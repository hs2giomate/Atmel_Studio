
HeaterP0Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001030c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001030c  0001030c  0002030c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  00010314  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003060c  2**0
                  CONTENTS
  5 .bss          00000fbc  2000060c  00010920  0003060c  2**2
                  ALLOC
  6 .stack        00010000  200015c8  000118dc  0003060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00071855  00000000  00000000  00030693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009a62  00000000  00000000  000a1ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001cd4b  00000000  00000000  000ab94a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003348  00000000  00000000  000c8695  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003000  00000000  00000000  000cb9dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004ecc4  00000000  00000000  000ce9dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003a515  00000000  00000000  0011d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013e8ba  00000000  00000000  00157bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d5ac  00000000  00000000  00296470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 15 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     ... ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	2d 63 00 00 59 51 00 00 55 03 00 00 55 03 00 00     -c..YQ..U...U...
      7c:	69 51 00 00 79 51 00 00 89 51 00 00 99 51 00 00     iQ..yQ...Q...Q..
      8c:	a9 51 00 00 b9 51 00 00 c9 51 00 00 55 03 00 00     .Q...Q...Q..U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     154:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     164:	55 03 00 00 69 78 00 00 85 78 00 00 a1 78 00 00     U...ix...x...x..
     174:	bd 78 00 00 55 03 00 00 b1 45 00 00 b1 b8 00 00     .x..U....E......
     184:	c1 b8 00 00 d1 b8 00 00 e1 b8 00 00 55 03 00 00     ............U...
     194:	cd 82 00 00 55 03 00 00 55 03 00 00 55 03 00 00     ....U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 e9 82 00 00     U...U...U.......
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 ad 8f 00 00 55 03 00 00     U...U.......U...
     1f4:	c9 8f 00 00 55 03 00 00 e5 8f 00 00 01 90 00 00     ....U...........
     204:	1d 90 00 00 39 90 00 00 55 03 00 00 55 03 00 00     ....9...U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	00010314 	.word	0x00010314

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00010314 	.word	0x00010314
     2c4:	20000610 	.word	0x20000610
     2c8:	00010314 	.word	0x00010314
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	00010314 	.word	0x00010314
     334:	20000000 	.word	0x20000000
     338:	2000060c 	.word	0x2000060c
     33c:	2000060c 	.word	0x2000060c
     340:	200015c8 	.word	0x200015c8
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	0000fad1 	.word	0x0000fad1
     350:	0000049d 	.word	0x0000049d

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>

0000035a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     35a:	b480      	push	{r7}
     35c:	b085      	sub	sp, #20
     35e:	af00      	add	r7, sp, #0
     360:	60f8      	str	r0, [r7, #12]
     362:	460b      	mov	r3, r1
     364:	607a      	str	r2, [r7, #4]
     366:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     368:	7afb      	ldrb	r3, [r7, #11]
     36a:	68fa      	ldr	r2, [r7, #12]
     36c:	01db      	lsls	r3, r3, #7
     36e:	4413      	add	r3, r2
     370:	3318      	adds	r3, #24
     372:	687a      	ldr	r2, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
}
     376:	bf00      	nop
     378:	3714      	adds	r7, #20
     37a:	46bd      	mov	sp, r7
     37c:	bc80      	pop	{r7}
     37e:	4770      	bx	lr

00000380 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     380:	b480      	push	{r7}
     382:	b085      	sub	sp, #20
     384:	af00      	add	r7, sp, #0
     386:	60f8      	str	r0, [r7, #12]
     388:	460b      	mov	r3, r1
     38a:	607a      	str	r2, [r7, #4]
     38c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38e:	7afb      	ldrb	r3, [r7, #11]
     390:	68fa      	ldr	r2, [r7, #12]
     392:	01db      	lsls	r3, r3, #7
     394:	4413      	add	r3, r2
     396:	3314      	adds	r3, #20
     398:	687a      	ldr	r2, [r7, #4]
     39a:	601a      	str	r2, [r3, #0]
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	bc80      	pop	{r7}
     3a4:	4770      	bx	lr
	...

000003a8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	4603      	mov	r3, r0
     3b0:	6039      	str	r1, [r7, #0]
     3b2:	71fb      	strb	r3, [r7, #7]
     3b4:	4613      	mov	r3, r2
     3b6:	71bb      	strb	r3, [r7, #6]
	if (level) {
     3b8:	79bb      	ldrb	r3, [r7, #6]
     3ba:	2b00      	cmp	r3, #0
     3bc:	d006      	beq.n	3cc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     3be:	79fb      	ldrb	r3, [r7, #7]
     3c0:	683a      	ldr	r2, [r7, #0]
     3c2:	4619      	mov	r1, r3
     3c4:	4806      	ldr	r0, [pc, #24]	; (3e0 <_gpio_set_level+0x38>)
     3c6:	4b07      	ldr	r3, [pc, #28]	; (3e4 <_gpio_set_level+0x3c>)
     3c8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     3ca:	e005      	b.n	3d8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     3cc:	79fb      	ldrb	r3, [r7, #7]
     3ce:	683a      	ldr	r2, [r7, #0]
     3d0:	4619      	mov	r1, r3
     3d2:	4803      	ldr	r0, [pc, #12]	; (3e0 <_gpio_set_level+0x38>)
     3d4:	4b04      	ldr	r3, [pc, #16]	; (3e8 <_gpio_set_level+0x40>)
     3d6:	4798      	blx	r3
}
     3d8:	bf00      	nop
     3da:	3708      	adds	r7, #8
     3dc:	46bd      	mov	sp, r7
     3de:	bd80      	pop	{r7, pc}
     3e0:	41008000 	.word	0x41008000
     3e4:	0000035b 	.word	0x0000035b
     3e8:	00000381 	.word	0x00000381

000003ec <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     3ec:	b580      	push	{r7, lr}
     3ee:	b082      	sub	sp, #8
     3f0:	af00      	add	r7, sp, #0
     3f2:	4603      	mov	r3, r0
     3f4:	460a      	mov	r2, r1
     3f6:	71fb      	strb	r3, [r7, #7]
     3f8:	4613      	mov	r3, r2
     3fa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     3fc:	79fb      	ldrb	r3, [r7, #7]
     3fe:	115b      	asrs	r3, r3, #5
     400:	b2d8      	uxtb	r0, r3
     402:	79fb      	ldrb	r3, [r7, #7]
     404:	f003 031f 	and.w	r3, r3, #31
     408:	2201      	movs	r2, #1
     40a:	fa02 f303 	lsl.w	r3, r2, r3
     40e:	79ba      	ldrb	r2, [r7, #6]
     410:	4619      	mov	r1, r3
     412:	4b03      	ldr	r3, [pc, #12]	; (420 <gpio_set_pin_level+0x34>)
     414:	4798      	blx	r3
}
     416:	bf00      	nop
     418:	3708      	adds	r7, #8
     41a:	46bd      	mov	sp, r7
     41c:	bd80      	pop	{r7, pc}
     41e:	bf00      	nop
     420:	000003a9 	.word	0x000003a9

00000424 <_ZN17HVACMessageHeaderC1Ev>:
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     424:	b480      	push	{r7}
     426:	b083      	sub	sp, #12
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
     42c:	687b      	ldr	r3, [r7, #4]
     42e:	2200      	movs	r2, #0
     430:	f042 0264 	orr.w	r2, r2, #100	; 0x64
     434:	701a      	strb	r2, [r3, #0]
     436:	2200      	movs	r2, #0
     438:	f042 0263 	orr.w	r2, r2, #99	; 0x63
     43c:	705a      	strb	r2, [r3, #1]
     43e:	2200      	movs	r2, #0
     440:	f042 0262 	orr.w	r2, r2, #98	; 0x62
     444:	709a      	strb	r2, [r3, #2]
     446:	2200      	movs	r2, #0
     448:	f042 0261 	orr.w	r2, r2, #97	; 0x61
     44c:	70da      	strb	r2, [r3, #3]
     44e:	687b      	ldr	r3, [r7, #4]
     450:	2200      	movs	r2, #0
     452:	715a      	strb	r2, [r3, #5]
     454:	687b      	ldr	r3, [r7, #4]
     456:	4618      	mov	r0, r3
     458:	370c      	adds	r7, #12
     45a:	46bd      	mov	sp, r7
     45c:	bc80      	pop	{r7}
     45e:	4770      	bx	lr

00000460 <_ZN17SingleTaskMessageC1Ev>:
 {
	 uint32	magic=MAINTENANCE_TOOL_KEYWORD;
	 char	command;
	 uint8_t	task=kHVACCommandNotTask;
 } ;
 struct __attribute__((__packed__)) SingleTaskMessage
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
     468:	687b      	ldr	r3, [r7, #4]
     46a:	4618      	mov	r0, r3
     46c:	4b03      	ldr	r3, [pc, #12]	; (47c <_ZN17SingleTaskMessageC1Ev+0x1c>)
     46e:	4798      	blx	r3
     470:	687b      	ldr	r3, [r7, #4]
     472:	4618      	mov	r0, r3
     474:	3708      	adds	r7, #8
     476:	46bd      	mov	sp, r7
     478:	bd80      	pop	{r7, pc}
     47a:	bf00      	nop
     47c:	00000425 	.word	0x00000425

00000480 <_ZL13FirmwareAlivePK10timer_task>:
static Maintenance_Tool	toolApp;
static SingleTaskMessage singleTask;
#define DELAY_HEATER_COMMUNICATION 1000

static void FirmwareAlive(const struct timer_task *const timer_task)
{
     480:	b580      	push	{r7, lr}
     482:	b082      	sub	sp, #8
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
		//gpio_toggle_pin_level(iAlcFwIsAlive);
		gpio_set_pin_level(iAlcFwIsAlive,true);
     488:	2101      	movs	r1, #1
     48a:	2007      	movs	r0, #7
     48c:	4b02      	ldr	r3, [pc, #8]	; (498 <_ZL13FirmwareAlivePK10timer_task+0x18>)
     48e:	4798      	blx	r3
}
     490:	bf00      	nop
     492:	3708      	adds	r7, #8
     494:	46bd      	mov	sp, r7
     496:	bd80      	pop	{r7, pc}
     498:	000003ed 	.word	0x000003ed

0000049c <main>:

int main(void)
{
     49c:	b580      	push	{r7, lr}
     49e:	b084      	sub	sp, #16
     4a0:	af00      	add	r7, sp, #0
	atmel_start_init();
     4a2:	4b3b      	ldr	r3, [pc, #236]	; (590 <main+0xf4>)
     4a4:	4798      	blx	r3
	uint8_t status,enableMask,lastEnableMask;
	bool powerOn;

	usb.Init();
     4a6:	483b      	ldr	r0, [pc, #236]	; (594 <main+0xf8>)
     4a8:	4b3b      	ldr	r3, [pc, #236]	; (598 <main+0xfc>)
     4aa:	4798      	blx	r3
	delay_ms(100);
     4ac:	2064      	movs	r0, #100	; 0x64
     4ae:	4b3b      	ldr	r3, [pc, #236]	; (59c <main+0x100>)
     4b0:	4798      	blx	r3
// 	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
// 	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	uint32_t p=pwm_enable(&LIVE_PULSE);
     4b2:	483b      	ldr	r0, [pc, #236]	; (5a0 <main+0x104>)
     4b4:	4b3b      	ldr	r3, [pc, #236]	; (5a4 <main+0x108>)
     4b6:	4798      	blx	r3
     4b8:	4603      	mov	r3, r0
     4ba:	60bb      	str	r3, [r7, #8]
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     4bc:	22fa      	movs	r2, #250	; 0xfa
     4be:	493a      	ldr	r1, [pc, #232]	; (5a8 <main+0x10c>)
     4c0:	483a      	ldr	r0, [pc, #232]	; (5ac <main+0x110>)
     4c2:	4b3b      	ldr	r3, [pc, #236]	; (5b0 <main+0x114>)
     4c4:	4798      	blx	r3
	heater.Init();
     4c6:	483b      	ldr	r0, [pc, #236]	; (5b4 <main+0x118>)
     4c8:	4b3b      	ldr	r3, [pc, #236]	; (5b8 <main+0x11c>)
     4ca:	4798      	blx	r3
	
	toolApp.Init();
     4cc:	483b      	ldr	r0, [pc, #236]	; (5bc <main+0x120>)
     4ce:	4b3c      	ldr	r3, [pc, #240]	; (5c0 <main+0x124>)
     4d0:	4798      	blx	r3
	while (1)
	{
		if (toolApp.IsAppConnected())
     4d2:	483a      	ldr	r0, [pc, #232]	; (5bc <main+0x120>)
     4d4:	4b3b      	ldr	r3, [pc, #236]	; (5c4 <main+0x128>)
     4d6:	4798      	blx	r3
     4d8:	4603      	mov	r3, r0
     4da:	2b00      	cmp	r3, #0
     4dc:	d04c      	beq.n	578 <main+0xdc>
		{
			if (toolApp.handleCommunication())
     4de:	4837      	ldr	r0, [pc, #220]	; (5bc <main+0x120>)
     4e0:	4b39      	ldr	r3, [pc, #228]	; (5c8 <main+0x12c>)
     4e2:	4798      	blx	r3
     4e4:	4603      	mov	r3, r0
     4e6:	2b00      	cmp	r3, #0
     4e8:	d028      	beq.n	53c <main+0xa0>
			{
				if (toolApp.singleTaskMessage.header.task==kHVACCommandSetHeaters)
     4ea:	4b34      	ldr	r3, [pc, #208]	; (5bc <main+0x120>)
     4ec:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
     4f0:	2b49      	cmp	r3, #73	; 0x49
     4f2:	d123      	bne.n	53c <main+0xa0>
				{
					lastEnableMask=enableMask;
     4f4:	7bfb      	ldrb	r3, [r7, #15]
     4f6:	71fb      	strb	r3, [r7, #7]
					enableMask=toolApp.singleTaskMessage.description;
     4f8:	4b30      	ldr	r3, [pc, #192]	; (5bc <main+0x120>)
     4fa:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
     4fe:	73fb      	strb	r3, [r7, #15]
					if (enableMask!=lastEnableMask)
     500:	7bfa      	ldrb	r2, [r7, #15]
     502:	79fb      	ldrb	r3, [r7, #7]
     504:	429a      	cmp	r2, r3
     506:	d019      	beq.n	53c <main+0xa0>
					{
						for (uint8_t i = 0; i < 4; i++)
     508:	2300      	movs	r3, #0
     50a:	73bb      	strb	r3, [r7, #14]
     50c:	7bbb      	ldrb	r3, [r7, #14]
     50e:	2b03      	cmp	r3, #3
     510:	dc14      	bgt.n	53c <main+0xa0>
						{
							powerOn=enableMask&(0x01<<i);
     512:	7bfa      	ldrb	r2, [r7, #15]
     514:	7bbb      	ldrb	r3, [r7, #14]
     516:	fa42 f303 	asr.w	r3, r2, r3
     51a:	f003 0301 	and.w	r3, r3, #1
     51e:	2b00      	cmp	r3, #0
     520:	bf14      	ite	ne
     522:	2301      	movne	r3, #1
     524:	2300      	moveq	r3, #0
     526:	71bb      	strb	r3, [r7, #6]
							//	usb<<"Setting Heater: "<<i<<"to " <<powerOn<<" .\t";
							heater.SetRelay(i,powerOn);
     528:	79ba      	ldrb	r2, [r7, #6]
     52a:	7bbb      	ldrb	r3, [r7, #14]
     52c:	4619      	mov	r1, r3
     52e:	4821      	ldr	r0, [pc, #132]	; (5b4 <main+0x118>)
     530:	4b26      	ldr	r3, [pc, #152]	; (5cc <main+0x130>)
     532:	4798      	blx	r3
						for (uint8_t i = 0; i < 4; i++)
     534:	7bbb      	ldrb	r3, [r7, #14]
     536:	3301      	adds	r3, #1
     538:	73bb      	strb	r3, [r7, #14]
     53a:	e7e7      	b.n	50c <main+0x70>
			} 
			else
			{
				
			}
			if (heater.statusChanged)
     53c:	4b1d      	ldr	r3, [pc, #116]	; (5b4 <main+0x118>)
     53e:	785b      	ldrb	r3, [r3, #1]
     540:	b2db      	uxtb	r3, r3
     542:	2b00      	cmp	r3, #0
     544:	d0c5      	beq.n	4d2 <main+0x36>
			{
				
				singleTask.description=heater.ReadStatus();
     546:	481b      	ldr	r0, [pc, #108]	; (5b4 <main+0x118>)
     548:	4b21      	ldr	r3, [pc, #132]	; (5d0 <main+0x134>)
     54a:	4798      	blx	r3
     54c:	4603      	mov	r3, r0
     54e:	461a      	mov	r2, r3
     550:	4b20      	ldr	r3, [pc, #128]	; (5d4 <main+0x138>)
     552:	719a      	strb	r2, [r3, #6]
				memcpy(toolApp.localBuffer,(void*)&singleTask,sizeof(SingleTaskMessage));
     554:	4b19      	ldr	r3, [pc, #100]	; (5bc <main+0x120>)
     556:	4a1f      	ldr	r2, [pc, #124]	; (5d4 <main+0x138>)
     558:	3305      	adds	r3, #5
     55a:	6810      	ldr	r0, [r2, #0]
     55c:	6018      	str	r0, [r3, #0]
     55e:	8891      	ldrh	r1, [r2, #4]
     560:	7992      	ldrb	r2, [r2, #6]
     562:	8099      	strh	r1, [r3, #4]
     564:	719a      	strb	r2, [r3, #6]
				usb.write(toolApp.localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     566:	2240      	movs	r2, #64	; 0x40
     568:	491b      	ldr	r1, [pc, #108]	; (5d8 <main+0x13c>)
     56a:	480a      	ldr	r0, [pc, #40]	; (594 <main+0xf8>)
     56c:	4b1b      	ldr	r3, [pc, #108]	; (5dc <main+0x140>)
     56e:	4798      	blx	r3
				heater.statusChanged=false;
     570:	4b10      	ldr	r3, [pc, #64]	; (5b4 <main+0x118>)
     572:	2200      	movs	r2, #0
     574:	705a      	strb	r2, [r3, #1]
     576:	e7ac      	b.n	4d2 <main+0x36>
			}
			
		} 
		else
		{
			enableMask=0xff;
     578:	23ff      	movs	r3, #255	; 0xff
     57a:	73fb      	strb	r3, [r7, #15]
			for (uint8_t i = 0; i < 4; i++)
     57c:	2300      	movs	r3, #0
     57e:	737b      	strb	r3, [r7, #13]
     580:	7b7b      	ldrb	r3, [r7, #13]
     582:	2b03      	cmp	r3, #3
     584:	dca5      	bgt.n	4d2 <main+0x36>
     586:	7b7b      	ldrb	r3, [r7, #13]
     588:	3301      	adds	r3, #1
     58a:	737b      	strb	r3, [r7, #13]
     58c:	e7f8      	b.n	580 <main+0xe4>
     58e:	bf00      	nop
     590:	00000ed1 	.word	0x00000ed1
     594:	200011d4 	.word	0x200011d4
     598:	0000ee71 	.word	0x0000ee71
     59c:	00002609 	.word	0x00002609
     5a0:	200013c4 	.word	0x200013c4
     5a4:	00002c29 	.word	0x00002c29
     5a8:	00000481 	.word	0x00000481
     5ac:	2000117c 	.word	0x2000117c
     5b0:	0000eaf5 	.word	0x0000eaf5
     5b4:	200007a8 	.word	0x200007a8
     5b8:	0000069d 	.word	0x0000069d
     5bc:	20000628 	.word	0x20000628
     5c0:	00000b81 	.word	0x00000b81
     5c4:	000009dd 	.word	0x000009dd
     5c8:	00000df9 	.word	0x00000df9
     5cc:	000007f5 	.word	0x000007f5
     5d0:	00000789 	.word	0x00000789
     5d4:	20000750 	.word	0x20000750
     5d8:	2000062d 	.word	0x2000062d
     5dc:	0000f141 	.word	0x0000f141

000005e0 <_Z41__static_initialization_and_destruction_0ii>:
		}
		
		

	}
}
     5e0:	b580      	push	{r7, lr}
     5e2:	b082      	sub	sp, #8
     5e4:	af00      	add	r7, sp, #0
     5e6:	6078      	str	r0, [r7, #4]
     5e8:	6039      	str	r1, [r7, #0]
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	2b01      	cmp	r3, #1
     5ee:	d10f      	bne.n	610 <_Z41__static_initialization_and_destruction_0ii+0x30>
     5f0:	683b      	ldr	r3, [r7, #0]
     5f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     5f6:	4293      	cmp	r3, r2
     5f8:	d10a      	bne.n	610 <_Z41__static_initialization_and_destruction_0ii+0x30>
static Maintenance_Tool	toolApp;
     5fa:	4807      	ldr	r0, [pc, #28]	; (618 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     5fc:	4b07      	ldr	r3, [pc, #28]	; (61c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     5fe:	4798      	blx	r3
     600:	4a07      	ldr	r2, [pc, #28]	; (620 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     602:	4908      	ldr	r1, [pc, #32]	; (624 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     604:	4804      	ldr	r0, [pc, #16]	; (618 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     606:	4b08      	ldr	r3, [pc, #32]	; (628 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     608:	4798      	blx	r3
static SingleTaskMessage singleTask;
     60a:	4808      	ldr	r0, [pc, #32]	; (62c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     60c:	4b08      	ldr	r3, [pc, #32]	; (630 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     60e:	4798      	blx	r3
}
     610:	bf00      	nop
     612:	3708      	adds	r7, #8
     614:	46bd      	mov	sp, r7
     616:	bd80      	pop	{r7, pc}
     618:	20000628 	.word	0x20000628
     61c:	00000961 	.word	0x00000961
     620:	20000000 	.word	0x20000000
     624:	00000939 	.word	0x00000939
     628:	0000fa9d 	.word	0x0000fa9d
     62c:	20000750 	.word	0x20000750
     630:	00000461 	.word	0x00000461

00000634 <_GLOBAL__sub_I_main>:
     634:	b580      	push	{r7, lr}
     636:	af00      	add	r7, sp, #0
     638:	f64f 71ff 	movw	r1, #65535	; 0xffff
     63c:	2001      	movs	r0, #1
     63e:	4b01      	ldr	r3, [pc, #4]	; (644 <_GLOBAL__sub_I_main+0x10>)
     640:	4798      	blx	r3
     642:	bd80      	pop	{r7, pc}
     644:	000005e1 	.word	0x000005e1

00000648 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
     648:	b480      	push	{r7}
     64a:	b083      	sub	sp, #12
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
     650:	4a05      	ldr	r2, [pc, #20]	; (668 <_ZN18SingleHeater_ClassC1Ev+0x20>)
     652:	687b      	ldr	r3, [r7, #4]
     654:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
     656:	687b      	ldr	r3, [r7, #4]
     658:	4a04      	ldr	r2, [pc, #16]	; (66c <_ZN18SingleHeater_ClassC1Ev+0x24>)
     65a:	619a      	str	r2, [r3, #24]
} //SingleHeater_Class
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	4618      	mov	r0, r3
     660:	370c      	adds	r7, #12
     662:	46bd      	mov	sp, r7
     664:	bc80      	pop	{r7}
     666:	4770      	bx	lr
     668:	20000758 	.word	0x20000758
     66c:	2000075c 	.word	0x2000075c

00000670 <_ZN18SingleHeater_ClassD1Ev>:
	
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
     670:	b480      	push	{r7}
     672:	b083      	sub	sp, #12
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
     678:	687b      	ldr	r3, [r7, #4]
     67a:	4618      	mov	r0, r3
     67c:	370c      	adds	r7, #12
     67e:	46bd      	mov	sp, r7
     680:	bc80      	pop	{r7}
     682:	4770      	bx	lr

00000684 <_ZL19HeaterStatusChangedv>:

static void	HeaterStatusChanged(void){
     684:	b480      	push	{r7}
     686:	af00      	add	r7, sp, #0
	
	ptrSingleHeaterClass->statusChanged=true;
     688:	4b03      	ldr	r3, [pc, #12]	; (698 <_ZL19HeaterStatusChangedv+0x14>)
     68a:	681b      	ldr	r3, [r3, #0]
     68c:	2201      	movs	r2, #1
     68e:	705a      	strb	r2, [r3, #1]
}
     690:	bf00      	nop
     692:	46bd      	mov	sp, r7
     694:	bc80      	pop	{r7}
     696:	4770      	bx	lr
     698:	20000758 	.word	0x20000758

0000069c <_ZN18SingleHeater_Class4InitEv>:

bool SingleHeater_Class::Init(void){
     69c:	b580      	push	{r7, lr}
     69e:	b082      	sub	sp, #8
     6a0:	af00      	add	r7, sp, #0
     6a2:	6078      	str	r0, [r7, #4]
		i2c->Init();
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	699b      	ldr	r3, [r3, #24]
     6a8:	4618      	mov	r0, r3
     6aa:	4b14      	ldr	r3, [pc, #80]	; (6fc <_ZN18SingleHeater_Class4InitEv+0x60>)
     6ac:	4798      	blx	r3
		if (i2c->isOK)
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	699b      	ldr	r3, [r3, #24]
     6b2:	7a5b      	ldrb	r3, [r3, #9]
     6b4:	b2db      	uxtb	r3, r3
     6b6:	2b00      	cmp	r3, #0
     6b8:	d018      	beq.n	6ec <_ZN18SingleHeater_Class4InitEv+0x50>
		{
			
			ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
     6ba:	4911      	ldr	r1, [pc, #68]	; (700 <_ZN18SingleHeater_Class4InitEv+0x64>)
     6bc:	2003      	movs	r0, #3
     6be:	4b11      	ldr	r3, [pc, #68]	; (704 <_ZN18SingleHeater_Class4InitEv+0x68>)
     6c0:	4798      	blx	r3
			InitExpanderArray();
     6c2:	6878      	ldr	r0, [r7, #4]
     6c4:	4b10      	ldr	r3, [pc, #64]	; (708 <_ZN18SingleHeater_Class4InitEv+0x6c>)
     6c6:	4798      	blx	r3
			expanders[0]->SetPortInput();
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	68db      	ldr	r3, [r3, #12]
     6cc:	4618      	mov	r0, r3
     6ce:	4b0f      	ldr	r3, [pc, #60]	; (70c <_ZN18SingleHeater_Class4InitEv+0x70>)
     6d0:	4798      	blx	r3
			expanders[1]->SetPortOutput();
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	691b      	ldr	r3, [r3, #16]
     6d6:	4618      	mov	r0, r3
     6d8:	4b0d      	ldr	r3, [pc, #52]	; (710 <_ZN18SingleHeater_Class4InitEv+0x74>)
     6da:	4798      	blx	r3
			isOK=SelfTest();
     6dc:	6878      	ldr	r0, [r7, #4]
     6de:	4b0d      	ldr	r3, [pc, #52]	; (714 <_ZN18SingleHeater_Class4InitEv+0x78>)
     6e0:	4798      	blx	r3
     6e2:	4603      	mov	r3, r0
     6e4:	461a      	mov	r2, r3
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	701a      	strb	r2, [r3, #0]
     6ea:	e000      	b.n	6ee <_ZN18SingleHeater_Class4InitEv+0x52>
		}
		else
		{
			asm("nop");
     6ec:	bf00      	nop
		}
		return isOK;
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	781b      	ldrb	r3, [r3, #0]
     6f2:	b2db      	uxtb	r3, r3
}
     6f4:	4618      	mov	r0, r3
     6f6:	3708      	adds	r7, #8
     6f8:	46bd      	mov	sp, r7
     6fa:	bd80      	pop	{r7, pc}
     6fc:	0000deb9 	.word	0x0000deb9
     700:	00000685 	.word	0x00000685
     704:	0000269d 	.word	0x0000269d
     708:	00000719 	.word	0x00000719
     70c:	0000e135 	.word	0x0000e135
     710:	0000e179 	.word	0x0000e179
     714:	00000831 	.word	0x00000831

00000718 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:

uint8_t SingleHeater_Class::InitExpanderArray(void){
     718:	b580      	push	{r7, lr}
     71a:	b084      	sub	sp, #16
     71c:	af00      	add	r7, sp, #0
     71e:	6078      	str	r0, [r7, #4]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
     720:	2300      	movs	r3, #0
     722:	60fb      	str	r3, [r7, #12]
     724:	68fb      	ldr	r3, [r7, #12]
     726:	2b01      	cmp	r3, #1
     728:	dc25      	bgt.n	776 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x5e>
	{
		expanders[i]=&expandersStatic[i];
     72a:	68fa      	ldr	r2, [r7, #12]
     72c:	4613      	mov	r3, r2
     72e:	00db      	lsls	r3, r3, #3
     730:	1a9b      	subs	r3, r3, r2
     732:	009b      	lsls	r3, r3, #2
     734:	4a12      	ldr	r2, [pc, #72]	; (780 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x68>)
     736:	441a      	add	r2, r3
     738:	6879      	ldr	r1, [r7, #4]
     73a:	68fb      	ldr	r3, [r7, #12]
     73c:	3302      	adds	r3, #2
     73e:	009b      	lsls	r3, r3, #2
     740:	440b      	add	r3, r1
     742:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
     744:	687a      	ldr	r2, [r7, #4]
     746:	68fb      	ldr	r3, [r7, #12]
     748:	3302      	adds	r3, #2
     74a:	009b      	lsls	r3, r3, #2
     74c:	4413      	add	r3, r2
     74e:	685a      	ldr	r2, [r3, #4]
     750:	687b      	ldr	r3, [r7, #4]
     752:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     754:	687b      	ldr	r3, [r7, #4]
     756:	6958      	ldr	r0, [r3, #20]
     758:	68fb      	ldr	r3, [r7, #12]
     75a:	b25b      	sxtb	r3, r3
     75c:	f043 0320 	orr.w	r3, r3, #32
     760:	b25b      	sxtb	r3, r3
     762:	b2d9      	uxtb	r1, r3
     764:	687b      	ldr	r3, [r7, #4]
     766:	699b      	ldr	r3, [r3, #24]
     768:	461a      	mov	r2, r3
     76a:	4b06      	ldr	r3, [pc, #24]	; (784 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x6c>)
     76c:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
     76e:	68fb      	ldr	r3, [r7, #12]
     770:	3301      	adds	r3, #1
     772:	60fb      	str	r3, [r7, #12]
     774:	e7d6      	b.n	724 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0xc>
	}
	
}
     776:	bf00      	nop
     778:	4618      	mov	r0, r3
     77a:	3710      	adds	r7, #16
     77c:	46bd      	mov	sp, r7
     77e:	bd80      	pop	{r7, pc}
     780:	20000770 	.word	0x20000770
     784:	0000dfcd 	.word	0x0000dfcd

00000788 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
     788:	b580      	push	{r7, lr}
     78a:	b084      	sub	sp, #16
     78c:	af00      	add	r7, sp, #0
     78e:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
     790:	687b      	ldr	r3, [r7, #4]
     792:	68db      	ldr	r3, [r3, #12]
     794:	4618      	mov	r0, r3
     796:	4b16      	ldr	r3, [pc, #88]	; (7f0 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
     798:	4798      	blx	r3
     79a:	4603      	mov	r3, r0
     79c:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
     79e:	7bbb      	ldrb	r3, [r7, #14]
     7a0:	f003 0301 	and.w	r3, r3, #1
     7a4:	2b00      	cmp	r3, #0
     7a6:	bf14      	ite	ne
     7a8:	2301      	movne	r3, #1
     7aa:	2300      	moveq	r3, #0
     7ac:	b2da      	uxtb	r2, r3
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
     7b2:	2300      	movs	r3, #0
     7b4:	73fb      	strb	r3, [r7, #15]
     7b6:	7bfb      	ldrb	r3, [r7, #15]
     7b8:	2b03      	cmp	r3, #3
     7ba:	dc14      	bgt.n	7e6 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
     7bc:	7bfb      	ldrb	r3, [r7, #15]
     7be:	7bb9      	ldrb	r1, [r7, #14]
     7c0:	7bfa      	ldrb	r2, [r7, #15]
     7c2:	3201      	adds	r2, #1
     7c4:	fa41 f202 	asr.w	r2, r1, r2
     7c8:	f002 0201 	and.w	r2, r2, #1
     7cc:	2a00      	cmp	r2, #0
     7ce:	bf14      	ite	ne
     7d0:	2201      	movne	r2, #1
     7d2:	2200      	moveq	r2, #0
     7d4:	b2d1      	uxtb	r1, r2
     7d6:	687a      	ldr	r2, [r7, #4]
     7d8:	4413      	add	r3, r2
     7da:	460a      	mov	r2, r1
     7dc:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
     7de:	7bfb      	ldrb	r3, [r7, #15]
     7e0:	3301      	adds	r3, #1
     7e2:	73fb      	strb	r3, [r7, #15]
     7e4:	e7e7      	b.n	7b6 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
     7e6:	7bbb      	ldrb	r3, [r7, #14]
}
     7e8:	4618      	mov	r0, r3
     7ea:	3710      	adds	r7, #16
     7ec:	46bd      	mov	sp, r7
     7ee:	bd80      	pop	{r7, pc}
     7f0:	0000e0b5 	.word	0x0000e0b5

000007f4 <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::Enable(uint8_t indexHeater){
	enabled=expanders[1]->WriteDigit(indexHeater,false);
	return uint8_t(enabled);
}
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
     7f4:	b580      	push	{r7, lr}
     7f6:	b082      	sub	sp, #8
     7f8:	af00      	add	r7, sp, #0
     7fa:	6078      	str	r0, [r7, #4]
     7fc:	460b      	mov	r3, r1
     7fe:	70fb      	strb	r3, [r7, #3]
     800:	4613      	mov	r3, r2
     802:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
     804:	687b      	ldr	r3, [r7, #4]
     806:	6918      	ldr	r0, [r3, #16]
     808:	78bb      	ldrb	r3, [r7, #2]
     80a:	f083 0301 	eor.w	r3, r3, #1
     80e:	b2da      	uxtb	r2, r3
     810:	78fb      	ldrb	r3, [r7, #3]
     812:	4619      	mov	r1, r3
     814:	4b05      	ldr	r3, [pc, #20]	; (82c <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
     816:	4798      	blx	r3
     818:	4603      	mov	r3, r0
     81a:	461a      	mov	r2, r3
     81c:	687b      	ldr	r3, [r7, #4]
     81e:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
     820:	687b      	ldr	r3, [r7, #4]
     822:	7adb      	ldrb	r3, [r3, #11]
}
     824:	4618      	mov	r0, r3
     826:	3708      	adds	r7, #8
     828:	46bd      	mov	sp, r7
     82a:	bd80      	pop	{r7, pc}
     82c:	0000e271 	.word	0x0000e271

00000830 <_ZN18SingleHeater_Class8SelfTestEv>:
	return uint8_t(enabled);
}



bool SingleHeater_Class::SelfTest(void){
     830:	b480      	push	{r7}
     832:	b083      	sub	sp, #12
     834:	af00      	add	r7, sp, #0
     836:	6078      	str	r0, [r7, #4]
	return true;
     838:	2301      	movs	r3, #1
}
     83a:	4618      	mov	r0, r3
     83c:	370c      	adds	r7, #12
     83e:	46bd      	mov	sp, r7
     840:	bc80      	pop	{r7}
     842:	4770      	bx	lr

00000844 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     844:	b590      	push	{r4, r7, lr}
     846:	b083      	sub	sp, #12
     848:	af00      	add	r7, sp, #0
     84a:	6078      	str	r0, [r7, #4]
     84c:	4c05      	ldr	r4, [pc, #20]	; (864 <__tcf_0+0x20>)
     84e:	4b06      	ldr	r3, [pc, #24]	; (868 <__tcf_0+0x24>)
     850:	429c      	cmp	r4, r3
     852:	d004      	beq.n	85e <__tcf_0+0x1a>
     854:	3c1c      	subs	r4, #28
     856:	4620      	mov	r0, r4
     858:	4b04      	ldr	r3, [pc, #16]	; (86c <__tcf_0+0x28>)
     85a:	4798      	blx	r3
     85c:	e7f7      	b.n	84e <__tcf_0+0xa>
     85e:	370c      	adds	r7, #12
     860:	46bd      	mov	sp, r7
     862:	bd90      	pop	{r4, r7, pc}
     864:	200007a8 	.word	0x200007a8
     868:	20000770 	.word	0x20000770
     86c:	0000dfb9 	.word	0x0000dfb9

00000870 <_Z41__static_initialization_and_destruction_0ii>:

     870:	b5b0      	push	{r4, r5, r7, lr}
     872:	b082      	sub	sp, #8
     874:	af00      	add	r7, sp, #0
     876:	6078      	str	r0, [r7, #4]
     878:	6039      	str	r1, [r7, #0]
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	2b01      	cmp	r3, #1
     87e:	d125      	bne.n	8cc <_Z41__static_initialization_and_destruction_0ii+0x5c>
     880:	683b      	ldr	r3, [r7, #0]
     882:	f64f 72ff 	movw	r2, #65535	; 0xffff
     886:	4293      	cmp	r3, r2
     888:	d120      	bne.n	8cc <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
     88a:	4912      	ldr	r1, [pc, #72]	; (8d4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     88c:	4812      	ldr	r0, [pc, #72]	; (8d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     88e:	4b13      	ldr	r3, [pc, #76]	; (8dc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     890:	4798      	blx	r3
     892:	4a13      	ldr	r2, [pc, #76]	; (8e0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     894:	4913      	ldr	r1, [pc, #76]	; (8e4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     896:	4810      	ldr	r0, [pc, #64]	; (8d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     898:	4b13      	ldr	r3, [pc, #76]	; (8e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     89a:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     89c:	4b13      	ldr	r3, [pc, #76]	; (8ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     89e:	2401      	movs	r4, #1
     8a0:	461d      	mov	r5, r3
     8a2:	2c00      	cmp	r4, #0
     8a4:	db05      	blt.n	8b2 <_Z41__static_initialization_and_destruction_0ii+0x42>
     8a6:	4628      	mov	r0, r5
     8a8:	4b11      	ldr	r3, [pc, #68]	; (8f0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
     8aa:	4798      	blx	r3
     8ac:	351c      	adds	r5, #28
     8ae:	3c01      	subs	r4, #1
     8b0:	e7f7      	b.n	8a2 <_Z41__static_initialization_and_destruction_0ii+0x32>
     8b2:	4a0b      	ldr	r2, [pc, #44]	; (8e0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     8b4:	490f      	ldr	r1, [pc, #60]	; (8f4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     8b6:	2000      	movs	r0, #0
     8b8:	4b0b      	ldr	r3, [pc, #44]	; (8e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     8ba:	4798      	blx	r3
     8bc:	480e      	ldr	r0, [pc, #56]	; (8f8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     8be:	4b0f      	ldr	r3, [pc, #60]	; (8fc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     8c0:	4798      	blx	r3
     8c2:	4a07      	ldr	r2, [pc, #28]	; (8e0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     8c4:	490e      	ldr	r1, [pc, #56]	; (900 <_Z41__static_initialization_and_destruction_0ii+0x90>)
     8c6:	480c      	ldr	r0, [pc, #48]	; (8f8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     8c8:	4b07      	ldr	r3, [pc, #28]	; (8e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     8ca:	4798      	blx	r3
     8cc:	bf00      	nop
     8ce:	3708      	adds	r7, #8
     8d0:	46bd      	mov	sp, r7
     8d2:	bdb0      	pop	{r4, r5, r7, pc}
     8d4:	20001448 	.word	0x20001448
     8d8:	2000075c 	.word	0x2000075c
     8dc:	0000de89 	.word	0x0000de89
     8e0:	20000000 	.word	0x20000000
     8e4:	0000dea5 	.word	0x0000dea5
     8e8:	0000fa9d 	.word	0x0000fa9d
     8ec:	20000770 	.word	0x20000770
     8f0:	0000dfa5 	.word	0x0000dfa5
     8f4:	00000845 	.word	0x00000845
     8f8:	200007a8 	.word	0x200007a8
     8fc:	00000649 	.word	0x00000649
     900:	00000671 	.word	0x00000671

00000904 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
     904:	b580      	push	{r7, lr}
     906:	af00      	add	r7, sp, #0
     908:	f64f 71ff 	movw	r1, #65535	; 0xffff
     90c:	2001      	movs	r0, #1
     90e:	4b01      	ldr	r3, [pc, #4]	; (914 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
     910:	4798      	blx	r3
     912:	bd80      	pop	{r7, pc}
     914:	00000871 	.word	0x00000871

00000918 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     918:	4b02      	ldr	r3, [pc, #8]	; (924 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     91a:	681a      	ldr	r2, [r3, #0]
     91c:	6813      	ldr	r3, [r2, #0]
     91e:	3301      	adds	r3, #1
     920:	6013      	str	r3, [r2, #0]
     922:	4770      	bx	lr
     924:	200007c4 	.word	0x200007c4

00000928 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     928:	4b02      	ldr	r3, [pc, #8]	; (934 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     92a:	681b      	ldr	r3, [r3, #0]
     92c:	2200      	movs	r2, #0
     92e:	711a      	strb	r2, [r3, #4]
     930:	4770      	bx	lr
     932:	bf00      	nop
     934:	200007c4 	.word	0x200007c4

00000938 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     938:	b538      	push	{r3, r4, r5, lr}
     93a:	4604      	mov	r4, r0
{
	ticks=0;
     93c:	2300      	movs	r3, #0
     93e:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
     940:	4d04      	ldr	r5, [pc, #16]	; (954 <_ZN16Maintenance_ToolD1Ev+0x1c>)
     942:	4628      	mov	r0, r5
     944:	4b04      	ldr	r3, [pc, #16]	; (958 <_ZN16Maintenance_ToolD1Ev+0x20>)
     946:	4798      	blx	r3
	interfaceTimer.Remove_task();
     948:	4628      	mov	r0, r5
     94a:	4b04      	ldr	r3, [pc, #16]	; (95c <_ZN16Maintenance_ToolD1Ev+0x24>)
     94c:	4798      	blx	r3
	
} //~Maintenance_Tool
     94e:	4620      	mov	r0, r4
     950:	bd38      	pop	{r3, r4, r5, pc}
     952:	bf00      	nop
     954:	200012ac 	.word	0x200012ac
     958:	0000f601 	.word	0x0000f601
     95c:	0000f719 	.word	0x0000f719

00000960 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
     960:	b470      	push	{r4, r5, r6}
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     962:	2200      	movs	r2, #0
     964:	2664      	movs	r6, #100	; 0x64
     966:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
     96a:	2563      	movs	r5, #99	; 0x63
     96c:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
     970:	2462      	movs	r4, #98	; 0x62
     972:	f880 4047 	strb.w	r4, [r0, #71]	; 0x47
     976:	2161      	movs	r1, #97	; 0x61
     978:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
     97c:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
     980:	f880 609c 	strb.w	r6, [r0, #156]	; 0x9c
     984:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
     988:	f880 409e 	strb.w	r4, [r0, #158]	; 0x9e
     98c:	f880 109f 	strb.w	r1, [r0, #159]	; 0x9f
     990:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
	ptrMaintenanceTool=this;
     994:	4904      	ldr	r1, [pc, #16]	; (9a8 <_ZN16Maintenance_ToolC1Ev+0x48>)
     996:	6008      	str	r0, [r1, #0]
	maintenanceIsConnected = false;
     998:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
	nextMaintenanceSyncTime = 0;
     99c:	64c2      	str	r2, [r0, #76]	; 0x4c
	nextMaintenanceUsageTimerSyncTime = 0;
     99e:	6502      	str	r2, [r0, #80]	; 0x50
	ticks=0;
     9a0:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
     9a2:	bc70      	pop	{r4, r5, r6}
     9a4:	4770      	bx	lr
     9a6:	bf00      	nop
     9a8:	200007c4 	.word	0x200007c4

000009ac <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     9ac:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     9ae:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
		if (isConnected)
     9b2:	b919      	cbnz	r1, 9bc <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     9b4:	4805      	ldr	r0, [pc, #20]	; (9cc <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     9b8:	4798      	blx	r3
     9ba:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     9bc:	f64e 2260 	movw	r2, #60000	; 0xea60
     9c0:	4904      	ldr	r1, [pc, #16]	; (9d4 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     9c2:	4802      	ldr	r0, [pc, #8]	; (9cc <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     9c4:	4b04      	ldr	r3, [pc, #16]	; (9d8 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     9c6:	4798      	blx	r3
     9c8:	bd08      	pop	{r3, pc}
     9ca:	bf00      	nop
     9cc:	200012ac 	.word	0x200012ac
     9d0:	0000f601 	.word	0x0000f601
     9d4:	00000929 	.word	0x00000929
     9d8:	0000f6e1 	.word	0x0000f6e1

000009dc <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     9dc:	b510      	push	{r4, lr}
     9de:	4604      	mov	r4, r0
	result=false;
     9e0:	2300      	movs	r3, #0
     9e2:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	magic=0;
     9e6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
	if (gotAccess==true)
     9ea:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
     9ee:	b12b      	cbz	r3, 9fc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     9f0:	2301      	movs	r3, #1
     9f2:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	return	result;
     9f6:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
}
     9fa:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     9fc:	4b13      	ldr	r3, [pc, #76]	; (a4c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     9fe:	7d5b      	ldrb	r3, [r3, #21]
     a00:	b18b      	cbz	r3, a26 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x4a>
     a02:	1d43      	adds	r3, r0, #5
     a04:	3009      	adds	r0, #9
     a06:	2200      	movs	r2, #0
				magic|= localBuffer[i];
     a08:	f813 1b01 	ldrb.w	r1, [r3], #1
     a0c:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			for (int i = 0; i < 4; i++)
     a10:	4283      	cmp	r3, r0
     a12:	d1f9      	bne.n	a08 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2c>
     a14:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     a18:	4b0d      	ldr	r3, [pc, #52]	; (a50 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
     a1a:	ea82 0103 	eor.w	r1, r2, r3
     a1e:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
			if (xorResult==0)
     a22:	429a      	cmp	r2, r3
     a24:	d005      	beq.n	a32 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x56>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a26:	2240      	movs	r2, #64	; 0x40
     a28:	1d61      	adds	r1, r4, #5
     a2a:	4808      	ldr	r0, [pc, #32]	; (a4c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     a2c:	4b09      	ldr	r3, [pc, #36]	; (a54 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
     a2e:	4798      	blx	r3
     a30:	e7e1      	b.n	9f6 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     a32:	2101      	movs	r1, #1
     a34:	f884 1101 	strb.w	r1, [r4, #257]	; 0x101
				result=true;
     a38:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
				is_MTPC_Beaming=true;
     a3c:	7121      	strb	r1, [r4, #4]
				setConnected(true);
     a3e:	4620      	mov	r0, r4
     a40:	4b05      	ldr	r3, [pc, #20]	; (a58 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     a42:	4798      	blx	r3
				return	result;
     a44:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     a48:	bd10      	pop	{r4, pc}
     a4a:	bf00      	nop
     a4c:	200011d4 	.word	0x200011d4
     a50:	61626364 	.word	0x61626364
     a54:	0000efbd 	.word	0x0000efbd
     a58:	000009ad 	.word	0x000009ad

00000a5c <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     a5c:	b410      	push	{r4}
     a5e:	1d02      	adds	r2, r0, #4
     a60:	2301      	movs	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     a62:	2400      	movs	r4, #0
     a64:	f802 4f01 	strb.w	r4, [r2, #1]!
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     a68:	b2d9      	uxtb	r1, r3
     a6a:	3301      	adds	r3, #1
     a6c:	2b41      	cmp	r3, #65	; 0x41
     a6e:	d1f9      	bne.n	a64 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
     a70:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
	}
	return	i;
}
     a74:	4608      	mov	r0, r1
     a76:	bc10      	pop	{r4}
     a78:	4770      	bx	lr

00000a7a <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     a7a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
     a7e:	b92b      	cbnz	r3, a8c <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     a80:	64c3      	str	r3, [r0, #76]	; 0x4c
		maintenanceIsConnected = true;
     a82:	2301      	movs	r3, #1
     a84:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
		bSendNotifications = true;
     a88:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     a8c:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
     a90:	4770      	bx	lr
	...

00000a94 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader>:

	uint32_t	w,r;
	
	
	bool	result(header.command == kGAINCommandWriteParameters);
	if (result){
     a94:	790b      	ldrb	r3, [r1, #4]
     a96:	2b47      	cmp	r3, #71	; 0x47
     a98:	d001      	beq.n	a9e <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0xa>
	bool	result(header.command == kGAINCommandWriteParameters);
     a9a:	2000      	movs	r0, #0
     a9c:	4770      	bx	lr
bool Maintenance_Tool::handleGAINCommandWriteParameters(HVACMessageHeader& header)	{
     a9e:	b570      	push	{r4, r5, r6, lr}
     aa0:	4604      	mov	r4, r0
		int n=sizeof(HVACMessageHeader)+1;
		flash.eraseFlash((uint32_t)&flashLayout->parameters,sizeof(UserParameters));
     aa2:	4e0c      	ldr	r6, [pc, #48]	; (ad4 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x40>)
     aa4:	6831      	ldr	r1, [r6, #0]
     aa6:	4d0c      	ldr	r5, [pc, #48]	; (ad8 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x44>)
     aa8:	2201      	movs	r2, #1
     aaa:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
     aae:	4628      	mov	r0, r5
     ab0:	4b0a      	ldr	r3, [pc, #40]	; (adc <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x48>)
     ab2:	4798      	blx	r3
			
		memcpy((uint8_t*)&parameters,&localBuffer[n+1],sizeof(UserParameters));
     ab4:	7b63      	ldrb	r3, [r4, #13]
     ab6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
		//uint32_t add=(uint32_t)&framMemory->parameters;
		uint32_t add=(uint32_t)&flashLayout->parameters;
     aba:	6832      	ldr	r2, [r6, #0]
		r=flash.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     abc:	2301      	movs	r3, #1
     abe:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     ac2:	f504 7184 	add.w	r1, r4, #264	; 0x108
     ac6:	4628      	mov	r0, r5
     ac8:	4c05      	ldr	r4, [pc, #20]	; (ae0 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x4c>)
     aca:	47a0      	blx	r4
		//	r=fram.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
			result=(bool)(r==0);
     acc:	fab0 f080 	clz	r0, r0
     ad0:	0940      	lsrs	r0, r0, #5
     ad2:	bd70      	pop	{r4, r5, r6, pc}
     ad4:	20000fa8 	.word	0x20000fa8
     ad8:	20000fac 	.word	0x20000fac
     adc:	0000e5c1 	.word	0x0000e5c1
     ae0:	0000e865 	.word	0x0000e865

00000ae4 <_ZN16Maintenance_Tool17CommandSetHeatersEv>:
bool Maintenance_Tool::CommandSetHeaters(void)	{

	uint32_t	w,r;
	uint8_t	data=0;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     ae4:	4603      	mov	r3, r0
     ae6:	f853 1f05 	ldr.w	r1, [r3, #5]!
     aea:	f8c0 1045 	str.w	r1, [r0, #69]	; 0x45
     aee:	8899      	ldrh	r1, [r3, #4]
     af0:	799b      	ldrb	r3, [r3, #6]
     af2:	f8a0 1049 	strh.w	r1, [r0, #73]	; 0x49
     af6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
     afa:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
		// 		 		for (i=0; i<header.dataSize; i++)
		// 		 			io >> ch;
	}
	
	return result;
}
     afe:	2849      	cmp	r0, #73	; 0x49
     b00:	bf14      	ite	ne
     b02:	2000      	movne	r0, #0
     b04:	2001      	moveq	r0, #1
     b06:	4770      	bx	lr

00000b08 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     b08:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     b0a:	0855      	lsrs	r5, r2, #1
     b0c:	d007      	beq.n	b1e <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     b0e:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     b10:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     b14:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     b16:	3401      	adds	r4, #1
     b18:	b2a4      	uxth	r4, r4
     b1a:	42ac      	cmp	r4, r5
     b1c:	dbf8      	blt.n	b10 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     b1e:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     b22:	bf1d      	ittte	ne
     b24:	189b      	addne	r3, r3, r2
     b26:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     b2a:	4048      	eorne	r0, r1
     b2c:	4608      	moveq	r0, r1

	return checksum;
	}
     b2e:	bc30      	pop	{r4, r5}
     b30:	4770      	bx	lr
	...

00000b34 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     b34:	b538      	push	{r3, r4, r5, lr}
     b36:	4604      	mov	r4, r0
	checksum=0;
     b38:	2500      	movs	r5, #0
     b3a:	f8a0 5104 	strh.w	r5, [r0, #260]	; 0x104
	checksum = calculateChecksum(0, sizeof(header), &header);
     b3e:	460b      	mov	r3, r1
     b40:	2206      	movs	r2, #6
     b42:	4629      	mov	r1, r5
     b44:	4d02      	ldr	r5, [pc, #8]	; (b50 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     b46:	47a8      	blx	r5
     b48:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104
	}
     b4c:	bd38      	pop	{r3, r4, r5, pc}
     b4e:	bf00      	nop
     b50:	00000b09 	.word	0x00000b09

00000b54 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
	}
	return	ticks;
}

void Maintenance_Tool::GetCPUSerialNumber(uint8_t* buffer)
{
     b54:	b410      	push	{r4}
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
     b56:	2200      	movs	r2, #0
     b58:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     b5c:	4c07      	ldr	r4, [pc, #28]	; (b7c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     b5e:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
     b62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (i = 0; i < 4; i++)
     b66:	f890 3124 	ldrb.w	r3, [r0, #292]	; 0x124
     b6a:	3301      	adds	r3, #1
     b6c:	b2db      	uxtb	r3, r3
     b6e:	f880 3124 	strb.w	r3, [r0, #292]	; 0x124
     b72:	461a      	mov	r2, r3
     b74:	2b03      	cmp	r3, #3
     b76:	ddf2      	ble.n	b5e <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0xa>
	}

}
     b78:	bc10      	pop	{r4}
     b7a:	4770      	bx	lr
     b7c:	41002018 	.word	0x41002018

00000b80 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b82:	4604      	mov	r4, r0
	ticks=0;
     b84:	2600      	movs	r6, #0
     b86:	6006      	str	r6, [r0, #0]
	interfaceTimer.Init();
     b88:	4d12      	ldr	r5, [pc, #72]	; (bd4 <_ZN16Maintenance_Tool4InitEv+0x54>)
     b8a:	4628      	mov	r0, r5
     b8c:	4b12      	ldr	r3, [pc, #72]	; (bd8 <_ZN16Maintenance_Tool4InitEv+0x58>)
     b8e:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     b94:	4911      	ldr	r1, [pc, #68]	; (bdc <_ZN16Maintenance_Tool4InitEv+0x5c>)
     b96:	4628      	mov	r0, r5
     b98:	4b11      	ldr	r3, [pc, #68]	; (be0 <_ZN16Maintenance_Tool4InitEv+0x60>)
     b9a:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     b9c:	f504 7585 	add.w	r5, r4, #266	; 0x10a
     ba0:	4629      	mov	r1, r5
     ba2:	4620      	mov	r0, r4
     ba4:	4b0f      	ldr	r3, [pc, #60]	; (be4 <_ZN16Maintenance_Tool4InitEv+0x64>)
     ba6:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     ba8:	f8d4 710a 	ldr.w	r7, [r4, #266]	; 0x10a
     bac:	f8d4 010e 	ldr.w	r0, [r4, #270]	; 0x10e
     bb0:	f8d4 1112 	ldr.w	r1, [r4, #274]	; 0x112
     bb4:	f8d4 2116 	ldr.w	r2, [r4, #278]	; 0x116
     bb8:	f8c4 7005 	str.w	r7, [r4, #5]
     bbc:	f8c4 0009 	str.w	r0, [r4, #9]
     bc0:	f8c4 100d 	str.w	r1, [r4, #13]
     bc4:	f8c4 2011 	str.w	r2, [r4, #17]
	gotAccess=false;
     bc8:	f884 6101 	strb.w	r6, [r4, #257]	; 0x101
}
     bcc:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bd2:	bf00      	nop
     bd4:	200012ac 	.word	0x200012ac
     bd8:	0000f5a5 	.word	0x0000f5a5
     bdc:	00000919 	.word	0x00000919
     be0:	0000f691 	.word	0x0000f691
     be4:	00000b55 	.word	0x00000b55

00000be8 <_GLOBAL__sub_I_ptrMaintenanceTool>:
     be8:	b510      	push	{r4, lr}
     bea:	4c05      	ldr	r4, [pc, #20]	; (c00 <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
     bec:	4620      	mov	r0, r4
     bee:	4b05      	ldr	r3, [pc, #20]	; (c04 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
     bf0:	4798      	blx	r3
     bf2:	4a05      	ldr	r2, [pc, #20]	; (c08 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
     bf4:	4905      	ldr	r1, [pc, #20]	; (c0c <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
     bf6:	4620      	mov	r0, r4
     bf8:	4b05      	ldr	r3, [pc, #20]	; (c10 <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
     bfa:	4798      	blx	r3
     bfc:	bd10      	pop	{r4, pc}
     bfe:	bf00      	nop
     c00:	200007c8 	.word	0x200007c8
     c04:	00000961 	.word	0x00000961
     c08:	20000000 	.word	0x20000000
     c0c:	00000939 	.word	0x00000939
     c10:	0000fa9d 	.word	0x0000fa9d

00000c14 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     c14:	b538      	push	{r3, r4, r5, lr}
     c16:	4605      	mov	r5, r0
     c18:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     c1a:	4b05      	ldr	r3, [pc, #20]	; (c30 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     c1c:	4798      	blx	r3
     c1e:	f8a5 0104 	strh.w	r0, [r5, #260]	; 0x104
	usb.writeData(&header, sizeof(header));
     c22:	2206      	movs	r2, #6
     c24:	4621      	mov	r1, r4
     c26:	4803      	ldr	r0, [pc, #12]	; (c34 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     c28:	4b03      	ldr	r3, [pc, #12]	; (c38 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     c2a:	4798      	blx	r3
     c2c:	bd38      	pop	{r3, r4, r5, pc}
     c2e:	bf00      	nop
     c30:	00000b35 	.word	0x00000b35
     c34:	200011d4 	.word	0x200011d4
     c38:	0000f0a9 	.word	0x0000f0a9

00000c3c <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader>:
bool Maintenance_Tool::handleGAINCommandReadParameters(HVACMessageHeader& header){
     c3c:	b538      	push	{r3, r4, r5, lr}
		if (result){
     c3e:	790b      	ldrb	r3, [r1, #4]
     c40:	2b48      	cmp	r3, #72	; 0x48
     c42:	d001      	beq.n	c48 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0xc>
	 	bool	result(header.command == kGAINCommandReadParameters);
     c44:	2000      	movs	r0, #0
     c46:	bd38      	pop	{r3, r4, r5, pc}
     c48:	4604      	mov	r4, r0
			uint32_t add=(uint32_t)&flashLayout->parameters;
     c4a:	4b0d      	ldr	r3, [pc, #52]	; (c80 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x44>)
     c4c:	681a      	ldr	r2, [r3, #0]
			r=flash.ReadAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     c4e:	2301      	movs	r3, #1
     c50:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     c54:	f500 7184 	add.w	r1, r0, #264	; 0x108
     c58:	480a      	ldr	r0, [pc, #40]	; (c84 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x48>)
     c5a:	4d0b      	ldr	r5, [pc, #44]	; (c88 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x4c>)
     c5c:	47a8      	blx	r5
			 if (r>0)
     c5e:	b908      	cbnz	r0, c64 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x28>
	 	bool	result(header.command == kGAINCommandReadParameters);
     c60:	2001      	movs	r0, #1
}
     c62:	bd38      	pop	{r3, r4, r5, pc}
				memcpy((uint8_t*)&localBuffer[n+1],(void*)&parameters,sizeof(UserParameters));
     c64:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
     c68:	7363      	strb	r3, [r4, #13]
				delay_us(1);
     c6a:	2001      	movs	r0, #1
     c6c:	4b07      	ldr	r3, [pc, #28]	; (c8c <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x50>)
     c6e:	4798      	blx	r3
				 usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     c70:	2240      	movs	r2, #64	; 0x40
     c72:	1d61      	adds	r1, r4, #5
     c74:	4806      	ldr	r0, [pc, #24]	; (c90 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x54>)
     c76:	4b07      	ldr	r3, [pc, #28]	; (c94 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x58>)
     c78:	4798      	blx	r3
				 result=w>0;
     c7a:	2000      	movs	r0, #0
     c7c:	bd38      	pop	{r3, r4, r5, pc}
     c7e:	bf00      	nop
     c80:	20000fa8 	.word	0x20000fa8
     c84:	20000fac 	.word	0x20000fac
     c88:	0000e945 	.word	0x0000e945
     c8c:	000025d5 	.word	0x000025d5
     c90:	200011d4 	.word	0x200011d4
     c94:	0000f141 	.word	0x0000f141

00000c98 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
     c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
     c9a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     c9e:	2b4a      	cmp	r3, #74	; 0x4a
     ca0:	bf0c      	ite	eq
     ca2:	2501      	moveq	r5, #1
     ca4:	2500      	movne	r5, #0
	if (result){
     ca6:	d001      	beq.n	cac <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
     ca8:	4628      	mov	r0, r5
     caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cac:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
     cae:	4f10      	ldr	r7, [pc, #64]	; (cf0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x58>)
     cb0:	4638      	mov	r0, r7
     cb2:	4b10      	ldr	r3, [pc, #64]	; (cf4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x5c>)
     cb4:	4798      	blx	r3
     cb6:	4606      	mov	r6, r0
			memcpy(localBuffer,(void*)&singleTask,n);
     cb8:	4b0f      	ldr	r3, [pc, #60]	; (cf8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
     cba:	f8c4 3005 	str.w	r3, [r4, #5]
     cbe:	2300      	movs	r3, #0
     cc0:	7263      	strb	r3, [r4, #9]
     cc2:	234a      	movs	r3, #74	; 0x4a
     cc4:	72a3      	strb	r3, [r4, #10]
     cc6:	72e0      	strb	r0, [r4, #11]
			if (!heater.statusChanged)
     cc8:	787b      	ldrb	r3, [r7, #1]
     cca:	b15b      	cbz	r3, ce4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x4c>
			singleTaskMessage=singleTask;
     ccc:	4b0a      	ldr	r3, [pc, #40]	; (cf8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x60>)
     cce:	f8c4 3045 	str.w	r3, [r4, #69]	; 0x45
     cd2:	2300      	movs	r3, #0
     cd4:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
     cd8:	234a      	movs	r3, #74	; 0x4a
     cda:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
     cde:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
     ce2:	e7e1      	b.n	ca8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     ce4:	2240      	movs	r2, #64	; 0x40
     ce6:	1d61      	adds	r1, r4, #5
     ce8:	4804      	ldr	r0, [pc, #16]	; (cfc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x64>)
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
     cec:	4798      	blx	r3
     cee:	e7ed      	b.n	ccc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x34>
     cf0:	200007a8 	.word	0x200007a8
     cf4:	00000789 	.word	0x00000789
     cf8:	61626364 	.word	0x61626364
     cfc:	200011d4 	.word	0x200011d4
     d00:	0000f141 	.word	0x0000f141

00000d04 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
     d04:	b570      	push	{r4, r5, r6, lr}
     d06:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
     d08:	f100 059c 	add.w	r5, r0, #156	; 0x9c
     d0c:	4601      	mov	r1, r0
     d0e:	f851 3f05 	ldr.w	r3, [r1, #5]!
     d12:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
     d16:	888b      	ldrh	r3, [r1, #4]
     d18:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
     d1a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     d1e:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
     d20:	b2db      	uxtb	r3, r3
     d22:	2b0f      	cmp	r3, #15
     d24:	d813      	bhi.n	d4e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x4a>
		gotTask=true;
     d26:	2301      	movs	r3, #1
     d28:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
		result=gotTask;
     d2c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
		switch (header.task)
     d30:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
     d34:	3b41      	subs	r3, #65	; 0x41
     d36:	2b0f      	cmp	r3, #15
     d38:	d84a      	bhi.n	dd0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xcc>
     d3a:	e8df f003 	tbb	[pc, r3]
     d3e:	2019      	.short	0x2019
     d40:	16162616 	.word	0x16162616
     d44:	433d362f 	.word	0x433d362f
     d48:	49161616 	.word	0x49161616
     d4c:	1649      	.short	0x1649
		gotTask=false;
     d4e:	2300      	movs	r3, #0
     d50:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     d54:	4e20      	ldr	r6, [pc, #128]	; (dd8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xd4>)
     d56:	2240      	movs	r2, #64	; 0x40
     d58:	4630      	mov	r0, r6
     d5a:	4b20      	ldr	r3, [pc, #128]	; (ddc <_ZN16Maintenance_Tool14handleHVACTaskEv+0xd8>)
     d5c:	4798      	blx	r3
		result=usb.rxReady;
     d5e:	7d73      	ldrb	r3, [r6, #21]
     d60:	b2db      	uxtb	r3, r3
     d62:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	if (result)
     d66:	2b00      	cmp	r3, #0
     d68:	d1e2      	bne.n	d30 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
     d6a:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     d6e:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
     d70:	4629      	mov	r1, r5
     d72:	4620      	mov	r0, r4
     d74:	4b1a      	ldr	r3, [pc, #104]	; (de0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xdc>)
     d76:	4798      	blx	r3
     d78:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     d7c:	e7f5      	b.n	d6a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x66>
	maintenanceIsConnected = false;
     d7e:	2300      	movs	r3, #0
     d80:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	bSendNotifications = false;
     d84:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
				break;
     d88:	e7ef      	b.n	d6a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x66>
				notifyGAINCommandReceived( header, result);
     d8a:	2201      	movs	r2, #1
     d8c:	4629      	mov	r1, r5
     d8e:	4620      	mov	r0, r4
     d90:	4b14      	ldr	r3, [pc, #80]	; (de4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xe0>)
     d92:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     d94:	2301      	movs	r3, #1
     d96:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     d9a:	e7e6      	b.n	d6a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x66>
				result = handleGAINCommandWriteParameters( header);
     d9c:	4629      	mov	r1, r5
     d9e:	4620      	mov	r0, r4
     da0:	4b11      	ldr	r3, [pc, #68]	; (de8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xe4>)
     da2:	4798      	blx	r3
     da4:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
			break;
     da8:	e7df      	b.n	d6a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x66>
				result = handleGAINCommandReadParameters( header);
     daa:	4629      	mov	r1, r5
     dac:	4620      	mov	r0, r4
     dae:	4b0f      	ldr	r3, [pc, #60]	; (dec <_ZN16Maintenance_Tool14handleHVACTaskEv+0xe8>)
     db0:	4798      	blx	r3
     db2:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
			break;
     db6:	e7d8      	b.n	d6a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x66>
				result = CommandSetHeaters();
     db8:	4620      	mov	r0, r4
     dba:	4b0d      	ldr	r3, [pc, #52]	; (df0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xec>)
     dbc:	4798      	blx	r3
     dbe:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
			break;
     dc2:	e7d2      	b.n	d6a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x66>
				result = CommandReadHeaterStatus();
     dc4:	4620      	mov	r0, r4
     dc6:	4b0b      	ldr	r3, [pc, #44]	; (df4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xf0>)
     dc8:	4798      	blx	r3
     dca:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     dce:	e7cc      	b.n	d6a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x66>
				result = false;
     dd0:	2300      	movs	r3, #0
     dd2:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     dd6:	e7c8      	b.n	d6a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x66>
     dd8:	200011d4 	.word	0x200011d4
     ddc:	0000efbd 	.word	0x0000efbd
     de0:	00000a7b 	.word	0x00000a7b
     de4:	00000c15 	.word	0x00000c15
     de8:	00000a95 	.word	0x00000a95
     dec:	00000c3d 	.word	0x00000c3d
     df0:	00000ae5 	.word	0x00000ae5
     df4:	00000c99 	.word	0x00000c99

00000df8 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dfa:	4604      	mov	r4, r0
	result=false;
     dfc:	2300      	movs	r3, #0
     dfe:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	if (gotAccess)
     e02:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
     e06:	2b00      	cmp	r3, #0
     e08:	d04c      	beq.n	ea4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>
		if (usb.rxReady)
     e0a:	4b28      	ldr	r3, [pc, #160]	; (eac <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     e0c:	7d5b      	ldrb	r3, [r3, #21]
     e0e:	b953      	cbnz	r3, e26 <_ZN16Maintenance_Tool19handleCommunicationEv+0x2e>
			gotCommand=false;
     e10:	2300      	movs	r3, #0
     e12:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     e16:	2240      	movs	r2, #64	; 0x40
     e18:	1d61      	adds	r1, r4, #5
     e1a:	4824      	ldr	r0, [pc, #144]	; (eac <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     e1c:	4b24      	ldr	r3, [pc, #144]	; (eb0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     e1e:	4798      	blx	r3
	}
     e20:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
     e26:	4603      	mov	r3, r0
     e28:	f853 2f05 	ldr.w	r2, [r3, #5]!
     e2c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
     e30:	889b      	ldrh	r3, [r3, #4]
     e32:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
			switch (input){
     e36:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
     e3a:	2b3d      	cmp	r3, #61	; 0x3d
     e3c:	d017      	beq.n	e6e <_ZN16Maintenance_Tool19handleCommunicationEv+0x76>
     e3e:	2b3e      	cmp	r3, #62	; 0x3e
     e40:	d010      	beq.n	e64 <_ZN16Maintenance_Tool19handleCommunicationEv+0x6c>
     e42:	2b3c      	cmp	r3, #60	; 0x3c
     e44:	d003      	beq.n	e4e <_ZN16Maintenance_Tool19handleCommunicationEv+0x56>
					gotCommand=false;
     e46:	2300      	movs	r3, #0
     e48:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
				break;
     e4c:	e006      	b.n	e5c <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					gotCommand=true;
     e4e:	2301      	movs	r3, #1
     e50:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
					result = handleHVACTask();
     e54:	4b17      	ldr	r3, [pc, #92]	; (eb4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     e56:	4798      	blx	r3
     e58:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
			ClearLocalBuffer();
     e5c:	4620      	mov	r0, r4
     e5e:	4b16      	ldr	r3, [pc, #88]	; (eb8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     e60:	4798      	blx	r3
     e62:	e7d8      	b.n	e16 <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
     e64:	4b13      	ldr	r3, [pc, #76]	; (eb4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     e66:	4798      	blx	r3
     e68:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     e6c:	e7f6      	b.n	e5c <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					is_MTPC_Beaming=true;
     e6e:	2501      	movs	r5, #1
     e70:	7105      	strb	r5, [r0, #4]
					interfaceTimer.Stop();
     e72:	4e12      	ldr	r6, [pc, #72]	; (ebc <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     e74:	4630      	mov	r0, r6
     e76:	4b12      	ldr	r3, [pc, #72]	; (ec0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
     e78:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     e7a:	4f12      	ldr	r7, [pc, #72]	; (ec4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
     e7c:	4639      	mov	r1, r7
     e7e:	4630      	mov	r0, r6
     e80:	4b11      	ldr	r3, [pc, #68]	; (ec8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
     e82:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
     e84:	f242 7210 	movw	r2, #10000	; 0x2710
     e88:	4639      	mov	r1, r7
     e8a:	4630      	mov	r0, r6
     e8c:	4b0f      	ldr	r3, [pc, #60]	; (ecc <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
     e8e:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     e90:	2300      	movs	r3, #0
     e92:	64e3      	str	r3, [r4, #76]	; 0x4c
					maintenanceIsConnected = true;
     e94:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
					bSendNotifications = true;
     e98:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
					result=is_MTPC_Beaming;
     e9c:	7923      	ldrb	r3, [r4, #4]
     e9e:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     ea2:	e7db      	b.n	e5c <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
		gotCommand=false;
     ea4:	2300      	movs	r3, #0
     ea6:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
     eaa:	e7b9      	b.n	e20 <_ZN16Maintenance_Tool19handleCommunicationEv+0x28>
     eac:	200011d4 	.word	0x200011d4
     eb0:	0000efbd 	.word	0x0000efbd
     eb4:	00000d05 	.word	0x00000d05
     eb8:	00000a5d 	.word	0x00000a5d
     ebc:	200012ac 	.word	0x200012ac
     ec0:	0000f601 	.word	0x0000f601
     ec4:	00000929 	.word	0x00000929
     ec8:	0000f745 	.word	0x0000f745
     ecc:	0000f6e1 	.word	0x0000f6e1

00000ed0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     ed0:	b580      	push	{r7, lr}
     ed2:	af00      	add	r7, sp, #0
	system_init();
     ed4:	4b03      	ldr	r3, [pc, #12]	; (ee4 <atmel_start_init+0x14>)
     ed6:	4798      	blx	r3
	usb_init();
     ed8:	4b03      	ldr	r3, [pc, #12]	; (ee8 <atmel_start_init+0x18>)
     eda:	4798      	blx	r3
	spi_nor_flash_init();
     edc:	4b03      	ldr	r3, [pc, #12]	; (eec <atmel_start_init+0x1c>)
     ede:	4798      	blx	r3
}
     ee0:	bf00      	nop
     ee2:	bd80      	pop	{r7, pc}
     ee4:	00002245 	.word	0x00002245
     ee8:	0000bfb5 	.word	0x0000bfb5
     eec:	0000bf49 	.word	0x0000bf49

00000ef0 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     ef0:	b480      	push	{r7}
     ef2:	b085      	sub	sp, #20
     ef4:	af00      	add	r7, sp, #0
     ef6:	60f8      	str	r0, [r7, #12]
     ef8:	460b      	mov	r3, r1
     efa:	607a      	str	r2, [r7, #4]
     efc:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     efe:	7afa      	ldrb	r2, [r7, #11]
     f00:	68fb      	ldr	r3, [r7, #12]
     f02:	3220      	adds	r2, #32
     f04:	6879      	ldr	r1, [r7, #4]
     f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     f0a:	bf00      	nop
     f0c:	3714      	adds	r7, #20
     f0e:	46bd      	mov	sp, r7
     f10:	f85d 7b04 	ldr.w	r7, [sp], #4
     f14:	4770      	bx	lr

00000f16 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     f16:	b480      	push	{r7}
     f18:	b083      	sub	sp, #12
     f1a:	af00      	add	r7, sp, #0
     f1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	691b      	ldr	r3, [r3, #16]
     f22:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     f26:	687b      	ldr	r3, [r7, #4]
     f28:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f2a:	bf00      	nop
     f2c:	370c      	adds	r7, #12
     f2e:	46bd      	mov	sp, r7
     f30:	f85d 7b04 	ldr.w	r7, [sp], #4
     f34:	4770      	bx	lr

00000f36 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     f36:	b480      	push	{r7}
     f38:	b083      	sub	sp, #12
     f3a:	af00      	add	r7, sp, #0
     f3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     f3e:	687b      	ldr	r3, [r7, #4]
     f40:	691b      	ldr	r3, [r3, #16]
     f42:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f4a:	bf00      	nop
     f4c:	370c      	adds	r7, #12
     f4e:	46bd      	mov	sp, r7
     f50:	f85d 7b04 	ldr.w	r7, [sp], #4
     f54:	4770      	bx	lr

00000f56 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     f56:	b480      	push	{r7}
     f58:	b083      	sub	sp, #12
     f5a:	af00      	add	r7, sp, #0
     f5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	691b      	ldr	r3, [r3, #16]
     f62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     f66:	687b      	ldr	r3, [r7, #4]
     f68:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f6a:	bf00      	nop
     f6c:	370c      	adds	r7, #12
     f6e:	46bd      	mov	sp, r7
     f70:	f85d 7b04 	ldr.w	r7, [sp], #4
     f74:	4770      	bx	lr

00000f76 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     f76:	b480      	push	{r7}
     f78:	b083      	sub	sp, #12
     f7a:	af00      	add	r7, sp, #0
     f7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     f7e:	687b      	ldr	r3, [r7, #4]
     f80:	691b      	ldr	r3, [r3, #16]
     f82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     f86:	687b      	ldr	r3, [r7, #4]
     f88:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f8a:	bf00      	nop
     f8c:	370c      	adds	r7, #12
     f8e:	46bd      	mov	sp, r7
     f90:	f85d 7b04 	ldr.w	r7, [sp], #4
     f94:	4770      	bx	lr

00000f96 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     f96:	b480      	push	{r7}
     f98:	b083      	sub	sp, #12
     f9a:	af00      	add	r7, sp, #0
     f9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	695b      	ldr	r3, [r3, #20]
     fa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     fa6:	687b      	ldr	r3, [r7, #4]
     fa8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     faa:	bf00      	nop
     fac:	370c      	adds	r7, #12
     fae:	46bd      	mov	sp, r7
     fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     fb4:	4770      	bx	lr

00000fb6 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     fb6:	b480      	push	{r7}
     fb8:	b083      	sub	sp, #12
     fba:	af00      	add	r7, sp, #0
     fbc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	695b      	ldr	r3, [r3, #20]
     fc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     fc6:	687b      	ldr	r3, [r7, #4]
     fc8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fca:	bf00      	nop
     fcc:	370c      	adds	r7, #12
     fce:	46bd      	mov	sp, r7
     fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
     fd4:	4770      	bx	lr

00000fd6 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     fd6:	b480      	push	{r7}
     fd8:	b083      	sub	sp, #12
     fda:	af00      	add	r7, sp, #0
     fdc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     fde:	687b      	ldr	r3, [r7, #4]
     fe0:	695b      	ldr	r3, [r3, #20]
     fe2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     fe6:	687b      	ldr	r3, [r7, #4]
     fe8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fea:	bf00      	nop
     fec:	370c      	adds	r7, #12
     fee:	46bd      	mov	sp, r7
     ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ff4:	4770      	bx	lr

00000ff6 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     ff6:	b480      	push	{r7}
     ff8:	b083      	sub	sp, #12
     ffa:	af00      	add	r7, sp, #0
     ffc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	695b      	ldr	r3, [r3, #20]
    1002:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1006:	687b      	ldr	r3, [r7, #4]
    1008:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    100a:	bf00      	nop
    100c:	370c      	adds	r7, #12
    100e:	46bd      	mov	sp, r7
    1010:	f85d 7b04 	ldr.w	r7, [sp], #4
    1014:	4770      	bx	lr

00001016 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    1016:	b480      	push	{r7}
    1018:	b083      	sub	sp, #12
    101a:	af00      	add	r7, sp, #0
    101c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	695b      	ldr	r3, [r3, #20]
    1022:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    1026:	687b      	ldr	r3, [r7, #4]
    1028:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    102a:	bf00      	nop
    102c:	370c      	adds	r7, #12
    102e:	46bd      	mov	sp, r7
    1030:	f85d 7b04 	ldr.w	r7, [sp], #4
    1034:	4770      	bx	lr

00001036 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    1036:	b480      	push	{r7}
    1038:	b083      	sub	sp, #12
    103a:	af00      	add	r7, sp, #0
    103c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    103e:	687b      	ldr	r3, [r7, #4]
    1040:	699b      	ldr	r3, [r3, #24]
    1042:	f043 0201 	orr.w	r2, r3, #1
    1046:	687b      	ldr	r3, [r7, #4]
    1048:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    104a:	bf00      	nop
    104c:	370c      	adds	r7, #12
    104e:	46bd      	mov	sp, r7
    1050:	f85d 7b04 	ldr.w	r7, [sp], #4
    1054:	4770      	bx	lr

00001056 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    1056:	b480      	push	{r7}
    1058:	b083      	sub	sp, #12
    105a:	af00      	add	r7, sp, #0
    105c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	699b      	ldr	r3, [r3, #24]
    1062:	f043 0202 	orr.w	r2, r3, #2
    1066:	687b      	ldr	r3, [r7, #4]
    1068:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    106a:	bf00      	nop
    106c:	370c      	adds	r7, #12
    106e:	46bd      	mov	sp, r7
    1070:	f85d 7b04 	ldr.w	r7, [sp], #4
    1074:	4770      	bx	lr

00001076 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    1076:	b480      	push	{r7}
    1078:	b083      	sub	sp, #12
    107a:	af00      	add	r7, sp, #0
    107c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	699b      	ldr	r3, [r3, #24]
    1082:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    1086:	687b      	ldr	r3, [r7, #4]
    1088:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    108a:	bf00      	nop
    108c:	370c      	adds	r7, #12
    108e:	46bd      	mov	sp, r7
    1090:	f85d 7b04 	ldr.w	r7, [sp], #4
    1094:	4770      	bx	lr

00001096 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    1096:	b480      	push	{r7}
    1098:	b083      	sub	sp, #12
    109a:	af00      	add	r7, sp, #0
    109c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	699b      	ldr	r3, [r3, #24]
    10a2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    10a6:	687b      	ldr	r3, [r7, #4]
    10a8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10aa:	bf00      	nop
    10ac:	370c      	adds	r7, #12
    10ae:	46bd      	mov	sp, r7
    10b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    10b4:	4770      	bx	lr

000010b6 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    10b6:	b480      	push	{r7}
    10b8:	b083      	sub	sp, #12
    10ba:	af00      	add	r7, sp, #0
    10bc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    10be:	687b      	ldr	r3, [r7, #4]
    10c0:	699b      	ldr	r3, [r3, #24]
    10c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    10c6:	687b      	ldr	r3, [r7, #4]
    10c8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10ca:	bf00      	nop
    10cc:	370c      	adds	r7, #12
    10ce:	46bd      	mov	sp, r7
    10d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    10d4:	4770      	bx	lr

000010d6 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    10d6:	b480      	push	{r7}
    10d8:	b083      	sub	sp, #12
    10da:	af00      	add	r7, sp, #0
    10dc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    10de:	687b      	ldr	r3, [r7, #4]
    10e0:	699b      	ldr	r3, [r3, #24]
    10e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    10e6:	687b      	ldr	r3, [r7, #4]
    10e8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10ea:	bf00      	nop
    10ec:	370c      	adds	r7, #12
    10ee:	46bd      	mov	sp, r7
    10f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    10f4:	4770      	bx	lr

000010f6 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    10f6:	b480      	push	{r7}
    10f8:	b083      	sub	sp, #12
    10fa:	af00      	add	r7, sp, #0
    10fc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	69db      	ldr	r3, [r3, #28]
    1102:	f043 0220 	orr.w	r2, r3, #32
    1106:	687b      	ldr	r3, [r7, #4]
    1108:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    110a:	bf00      	nop
    110c:	370c      	adds	r7, #12
    110e:	46bd      	mov	sp, r7
    1110:	f85d 7b04 	ldr.w	r7, [sp], #4
    1114:	4770      	bx	lr

00001116 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    1116:	b480      	push	{r7}
    1118:	b083      	sub	sp, #12
    111a:	af00      	add	r7, sp, #0
    111c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	69db      	ldr	r3, [r3, #28]
    1122:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1126:	687b      	ldr	r3, [r7, #4]
    1128:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    112a:	bf00      	nop
    112c:	370c      	adds	r7, #12
    112e:	46bd      	mov	sp, r7
    1130:	f85d 7b04 	ldr.w	r7, [sp], #4
    1134:	4770      	bx	lr

00001136 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    1136:	b480      	push	{r7}
    1138:	b083      	sub	sp, #12
    113a:	af00      	add	r7, sp, #0
    113c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	69db      	ldr	r3, [r3, #28]
    1142:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1146:	687b      	ldr	r3, [r7, #4]
    1148:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    114a:	bf00      	nop
    114c:	370c      	adds	r7, #12
    114e:	46bd      	mov	sp, r7
    1150:	f85d 7b04 	ldr.w	r7, [sp], #4
    1154:	4770      	bx	lr

00001156 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    1156:	b480      	push	{r7}
    1158:	b083      	sub	sp, #12
    115a:	af00      	add	r7, sp, #0
    115c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    115e:	687b      	ldr	r3, [r7, #4]
    1160:	6a1b      	ldr	r3, [r3, #32]
    1162:	f043 0201 	orr.w	r2, r3, #1
    1166:	687b      	ldr	r3, [r7, #4]
    1168:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    116a:	bf00      	nop
    116c:	370c      	adds	r7, #12
    116e:	46bd      	mov	sp, r7
    1170:	f85d 7b04 	ldr.w	r7, [sp], #4
    1174:	4770      	bx	lr

00001176 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    1176:	b480      	push	{r7}
    1178:	b083      	sub	sp, #12
    117a:	af00      	add	r7, sp, #0
    117c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	6a1b      	ldr	r3, [r3, #32]
    1182:	f043 0202 	orr.w	r2, r3, #2
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    118a:	bf00      	nop
    118c:	370c      	adds	r7, #12
    118e:	46bd      	mov	sp, r7
    1190:	f85d 7b04 	ldr.w	r7, [sp], #4
    1194:	4770      	bx	lr

00001196 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    1196:	b480      	push	{r7}
    1198:	b083      	sub	sp, #12
    119a:	af00      	add	r7, sp, #0
    119c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	6a1b      	ldr	r3, [r3, #32]
    11a2:	f043 0204 	orr.w	r2, r3, #4
    11a6:	687b      	ldr	r3, [r7, #4]
    11a8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11aa:	bf00      	nop
    11ac:	370c      	adds	r7, #12
    11ae:	46bd      	mov	sp, r7
    11b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    11b4:	4770      	bx	lr

000011b6 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    11b6:	b480      	push	{r7}
    11b8:	b083      	sub	sp, #12
    11ba:	af00      	add	r7, sp, #0
    11bc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    11be:	687b      	ldr	r3, [r7, #4]
    11c0:	6a1b      	ldr	r3, [r3, #32]
    11c2:	f043 0208 	orr.w	r2, r3, #8
    11c6:	687b      	ldr	r3, [r7, #4]
    11c8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11ca:	bf00      	nop
    11cc:	370c      	adds	r7, #12
    11ce:	46bd      	mov	sp, r7
    11d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    11d4:	4770      	bx	lr

000011d6 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    11d6:	b480      	push	{r7}
    11d8:	b083      	sub	sp, #12
    11da:	af00      	add	r7, sp, #0
    11dc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	6a1b      	ldr	r3, [r3, #32]
    11e2:	f043 0220 	orr.w	r2, r3, #32
    11e6:	687b      	ldr	r3, [r7, #4]
    11e8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11ea:	bf00      	nop
    11ec:	370c      	adds	r7, #12
    11ee:	46bd      	mov	sp, r7
    11f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    11f4:	4770      	bx	lr

000011f6 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    11f6:	b480      	push	{r7}
    11f8:	b083      	sub	sp, #12
    11fa:	af00      	add	r7, sp, #0
    11fc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    11fe:	687b      	ldr	r3, [r7, #4]
    1200:	6a1b      	ldr	r3, [r3, #32]
    1202:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1206:	687b      	ldr	r3, [r7, #4]
    1208:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    120a:	bf00      	nop
    120c:	370c      	adds	r7, #12
    120e:	46bd      	mov	sp, r7
    1210:	f85d 7b04 	ldr.w	r7, [sp], #4
    1214:	4770      	bx	lr

00001216 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1216:	b480      	push	{r7}
    1218:	b085      	sub	sp, #20
    121a:	af00      	add	r7, sp, #0
    121c:	60f8      	str	r0, [r7, #12]
    121e:	460b      	mov	r3, r1
    1220:	607a      	str	r2, [r7, #4]
    1222:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1224:	7afb      	ldrb	r3, [r7, #11]
    1226:	68fa      	ldr	r2, [r7, #12]
    1228:	01db      	lsls	r3, r3, #7
    122a:	4413      	add	r3, r2
    122c:	3308      	adds	r3, #8
    122e:	687a      	ldr	r2, [r7, #4]
    1230:	601a      	str	r2, [r3, #0]
}
    1232:	bf00      	nop
    1234:	3714      	adds	r7, #20
    1236:	46bd      	mov	sp, r7
    1238:	f85d 7b04 	ldr.w	r7, [sp], #4
    123c:	4770      	bx	lr

0000123e <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    123e:	b480      	push	{r7}
    1240:	b085      	sub	sp, #20
    1242:	af00      	add	r7, sp, #0
    1244:	60f8      	str	r0, [r7, #12]
    1246:	460b      	mov	r3, r1
    1248:	607a      	str	r2, [r7, #4]
    124a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    124c:	7afb      	ldrb	r3, [r7, #11]
    124e:	68fa      	ldr	r2, [r7, #12]
    1250:	01db      	lsls	r3, r3, #7
    1252:	4413      	add	r3, r2
    1254:	3304      	adds	r3, #4
    1256:	687a      	ldr	r2, [r7, #4]
    1258:	601a      	str	r2, [r3, #0]
}
    125a:	bf00      	nop
    125c:	3714      	adds	r7, #20
    125e:	46bd      	mov	sp, r7
    1260:	f85d 7b04 	ldr.w	r7, [sp], #4
    1264:	4770      	bx	lr

00001266 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1266:	b480      	push	{r7}
    1268:	b085      	sub	sp, #20
    126a:	af00      	add	r7, sp, #0
    126c:	60f8      	str	r0, [r7, #12]
    126e:	460b      	mov	r3, r1
    1270:	607a      	str	r2, [r7, #4]
    1272:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1274:	7afb      	ldrb	r3, [r7, #11]
    1276:	68fa      	ldr	r2, [r7, #12]
    1278:	01db      	lsls	r3, r3, #7
    127a:	4413      	add	r3, r2
    127c:	3318      	adds	r3, #24
    127e:	687a      	ldr	r2, [r7, #4]
    1280:	601a      	str	r2, [r3, #0]
}
    1282:	bf00      	nop
    1284:	3714      	adds	r7, #20
    1286:	46bd      	mov	sp, r7
    1288:	f85d 7b04 	ldr.w	r7, [sp], #4
    128c:	4770      	bx	lr

0000128e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    128e:	b480      	push	{r7}
    1290:	b085      	sub	sp, #20
    1292:	af00      	add	r7, sp, #0
    1294:	60f8      	str	r0, [r7, #12]
    1296:	460b      	mov	r3, r1
    1298:	607a      	str	r2, [r7, #4]
    129a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    129c:	7afb      	ldrb	r3, [r7, #11]
    129e:	68fa      	ldr	r2, [r7, #12]
    12a0:	01db      	lsls	r3, r3, #7
    12a2:	4413      	add	r3, r2
    12a4:	3314      	adds	r3, #20
    12a6:	687a      	ldr	r2, [r7, #4]
    12a8:	601a      	str	r2, [r3, #0]
}
    12aa:	bf00      	nop
    12ac:	3714      	adds	r7, #20
    12ae:	46bd      	mov	sp, r7
    12b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    12b4:	4770      	bx	lr

000012b6 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    12b6:	b480      	push	{r7}
    12b8:	b085      	sub	sp, #20
    12ba:	af00      	add	r7, sp, #0
    12bc:	6078      	str	r0, [r7, #4]
    12be:	4608      	mov	r0, r1
    12c0:	4611      	mov	r1, r2
    12c2:	461a      	mov	r2, r3
    12c4:	4603      	mov	r3, r0
    12c6:	70fb      	strb	r3, [r7, #3]
    12c8:	460b      	mov	r3, r1
    12ca:	70bb      	strb	r3, [r7, #2]
    12cc:	4613      	mov	r3, r2
    12ce:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12d0:	78fa      	ldrb	r2, [r7, #3]
    12d2:	78bb      	ldrb	r3, [r7, #2]
    12d4:	6879      	ldr	r1, [r7, #4]
    12d6:	01d2      	lsls	r2, r2, #7
    12d8:	440a      	add	r2, r1
    12da:	4413      	add	r3, r2
    12dc:	3330      	adds	r3, #48	; 0x30
    12de:	781b      	ldrb	r3, [r3, #0]
    12e0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    12e2:	7bfb      	ldrb	r3, [r7, #15]
    12e4:	f023 030f 	bic.w	r3, r3, #15
    12e8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    12ea:	787b      	ldrb	r3, [r7, #1]
    12ec:	f003 030f 	and.w	r3, r3, #15
    12f0:	b2da      	uxtb	r2, r3
    12f2:	7bfb      	ldrb	r3, [r7, #15]
    12f4:	4313      	orrs	r3, r2
    12f6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12f8:	78fa      	ldrb	r2, [r7, #3]
    12fa:	78bb      	ldrb	r3, [r7, #2]
    12fc:	6879      	ldr	r1, [r7, #4]
    12fe:	01d2      	lsls	r2, r2, #7
    1300:	440a      	add	r2, r1
    1302:	4413      	add	r3, r2
    1304:	3330      	adds	r3, #48	; 0x30
    1306:	7bfa      	ldrb	r2, [r7, #15]
    1308:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    130a:	bf00      	nop
    130c:	3714      	adds	r7, #20
    130e:	46bd      	mov	sp, r7
    1310:	f85d 7b04 	ldr.w	r7, [sp], #4
    1314:	4770      	bx	lr

00001316 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1316:	b480      	push	{r7}
    1318:	b085      	sub	sp, #20
    131a:	af00      	add	r7, sp, #0
    131c:	6078      	str	r0, [r7, #4]
    131e:	4608      	mov	r0, r1
    1320:	4611      	mov	r1, r2
    1322:	461a      	mov	r2, r3
    1324:	4603      	mov	r3, r0
    1326:	70fb      	strb	r3, [r7, #3]
    1328:	460b      	mov	r3, r1
    132a:	70bb      	strb	r3, [r7, #2]
    132c:	4613      	mov	r3, r2
    132e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1330:	78fa      	ldrb	r2, [r7, #3]
    1332:	78bb      	ldrb	r3, [r7, #2]
    1334:	6879      	ldr	r1, [r7, #4]
    1336:	01d2      	lsls	r2, r2, #7
    1338:	440a      	add	r2, r1
    133a:	4413      	add	r3, r2
    133c:	3330      	adds	r3, #48	; 0x30
    133e:	781b      	ldrb	r3, [r3, #0]
    1340:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1342:	7bfb      	ldrb	r3, [r7, #15]
    1344:	f003 030f 	and.w	r3, r3, #15
    1348:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    134a:	787b      	ldrb	r3, [r7, #1]
    134c:	011b      	lsls	r3, r3, #4
    134e:	b2da      	uxtb	r2, r3
    1350:	7bfb      	ldrb	r3, [r7, #15]
    1352:	4313      	orrs	r3, r2
    1354:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1356:	78fa      	ldrb	r2, [r7, #3]
    1358:	78bb      	ldrb	r3, [r7, #2]
    135a:	6879      	ldr	r1, [r7, #4]
    135c:	01d2      	lsls	r2, r2, #7
    135e:	440a      	add	r2, r1
    1360:	4413      	add	r3, r2
    1362:	3330      	adds	r3, #48	; 0x30
    1364:	7bfa      	ldrb	r2, [r7, #15]
    1366:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1368:	bf00      	nop
    136a:	3714      	adds	r7, #20
    136c:	46bd      	mov	sp, r7
    136e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1372:	4770      	bx	lr

00001374 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1374:	b480      	push	{r7}
    1376:	b085      	sub	sp, #20
    1378:	af00      	add	r7, sp, #0
    137a:	6078      	str	r0, [r7, #4]
    137c:	4608      	mov	r0, r1
    137e:	4611      	mov	r1, r2
    1380:	461a      	mov	r2, r3
    1382:	4603      	mov	r3, r0
    1384:	70fb      	strb	r3, [r7, #3]
    1386:	460b      	mov	r3, r1
    1388:	70bb      	strb	r3, [r7, #2]
    138a:	4613      	mov	r3, r2
    138c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    138e:	78fa      	ldrb	r2, [r7, #3]
    1390:	78bb      	ldrb	r3, [r7, #2]
    1392:	6879      	ldr	r1, [r7, #4]
    1394:	01d2      	lsls	r2, r2, #7
    1396:	440a      	add	r2, r1
    1398:	4413      	add	r3, r2
    139a:	3340      	adds	r3, #64	; 0x40
    139c:	781b      	ldrb	r3, [r3, #0]
    139e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    13a0:	7bfb      	ldrb	r3, [r7, #15]
    13a2:	f023 0301 	bic.w	r3, r3, #1
    13a6:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13a8:	787a      	ldrb	r2, [r7, #1]
    13aa:	7bfb      	ldrb	r3, [r7, #15]
    13ac:	4313      	orrs	r3, r2
    13ae:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13b0:	78fa      	ldrb	r2, [r7, #3]
    13b2:	78bb      	ldrb	r3, [r7, #2]
    13b4:	6879      	ldr	r1, [r7, #4]
    13b6:	01d2      	lsls	r2, r2, #7
    13b8:	440a      	add	r2, r1
    13ba:	4413      	add	r3, r2
    13bc:	3340      	adds	r3, #64	; 0x40
    13be:	7bfa      	ldrb	r2, [r7, #15]
    13c0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    13c2:	bf00      	nop
    13c4:	3714      	adds	r7, #20
    13c6:	46bd      	mov	sp, r7
    13c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    13cc:	4770      	bx	lr

000013ce <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    13ce:	b490      	push	{r4, r7}
    13d0:	b082      	sub	sp, #8
    13d2:	af00      	add	r7, sp, #0
    13d4:	6078      	str	r0, [r7, #4]
    13d6:	460b      	mov	r3, r1
    13d8:	70fb      	strb	r3, [r7, #3]
    13da:	4613      	mov	r3, r2
    13dc:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    13de:	78fa      	ldrb	r2, [r7, #3]
    13e0:	78bb      	ldrb	r3, [r7, #2]
    13e2:	78f8      	ldrb	r0, [r7, #3]
    13e4:	78b9      	ldrb	r1, [r7, #2]
    13e6:	687c      	ldr	r4, [r7, #4]
    13e8:	01c0      	lsls	r0, r0, #7
    13ea:	4420      	add	r0, r4
    13ec:	4401      	add	r1, r0
    13ee:	3140      	adds	r1, #64	; 0x40
    13f0:	7809      	ldrb	r1, [r1, #0]
    13f2:	b2c9      	uxtb	r1, r1
    13f4:	f041 0104 	orr.w	r1, r1, #4
    13f8:	b2c8      	uxtb	r0, r1
    13fa:	6879      	ldr	r1, [r7, #4]
    13fc:	01d2      	lsls	r2, r2, #7
    13fe:	440a      	add	r2, r1
    1400:	4413      	add	r3, r2
    1402:	3340      	adds	r3, #64	; 0x40
    1404:	4602      	mov	r2, r0
    1406:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1408:	bf00      	nop
    140a:	3708      	adds	r7, #8
    140c:	46bd      	mov	sp, r7
    140e:	bc90      	pop	{r4, r7}
    1410:	4770      	bx	lr

00001412 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1412:	b490      	push	{r4, r7}
    1414:	b082      	sub	sp, #8
    1416:	af00      	add	r7, sp, #0
    1418:	6078      	str	r0, [r7, #4]
    141a:	460b      	mov	r3, r1
    141c:	70fb      	strb	r3, [r7, #3]
    141e:	4613      	mov	r3, r2
    1420:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1422:	78fa      	ldrb	r2, [r7, #3]
    1424:	78bb      	ldrb	r3, [r7, #2]
    1426:	78f8      	ldrb	r0, [r7, #3]
    1428:	78b9      	ldrb	r1, [r7, #2]
    142a:	687c      	ldr	r4, [r7, #4]
    142c:	01c0      	lsls	r0, r0, #7
    142e:	4420      	add	r0, r4
    1430:	4401      	add	r1, r0
    1432:	3140      	adds	r1, #64	; 0x40
    1434:	7809      	ldrb	r1, [r1, #0]
    1436:	b2c9      	uxtb	r1, r1
    1438:	f021 0104 	bic.w	r1, r1, #4
    143c:	b2c8      	uxtb	r0, r1
    143e:	6879      	ldr	r1, [r7, #4]
    1440:	01d2      	lsls	r2, r2, #7
    1442:	440a      	add	r2, r1
    1444:	4413      	add	r3, r2
    1446:	3340      	adds	r3, #64	; 0x40
    1448:	4602      	mov	r2, r0
    144a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    144c:	bf00      	nop
    144e:	3708      	adds	r7, #8
    1450:	46bd      	mov	sp, r7
    1452:	bc90      	pop	{r4, r7}
    1454:	4770      	bx	lr

00001456 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1456:	b480      	push	{r7}
    1458:	b085      	sub	sp, #20
    145a:	af00      	add	r7, sp, #0
    145c:	60f8      	str	r0, [r7, #12]
    145e:	460b      	mov	r3, r1
    1460:	607a      	str	r2, [r7, #4]
    1462:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1464:	7afb      	ldrb	r3, [r7, #11]
    1466:	68fa      	ldr	r2, [r7, #12]
    1468:	01db      	lsls	r3, r3, #7
    146a:	4413      	add	r3, r2
    146c:	3328      	adds	r3, #40	; 0x28
    146e:	687a      	ldr	r2, [r7, #4]
    1470:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1472:	bf00      	nop
    1474:	3714      	adds	r7, #20
    1476:	46bd      	mov	sp, r7
    1478:	f85d 7b04 	ldr.w	r7, [sp], #4
    147c:	4770      	bx	lr
	...

00001480 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1480:	b580      	push	{r7, lr}
    1482:	b082      	sub	sp, #8
    1484:	af00      	add	r7, sp, #0
    1486:	4603      	mov	r3, r0
    1488:	6039      	str	r1, [r7, #0]
    148a:	71fb      	strb	r3, [r7, #7]
    148c:	4613      	mov	r3, r2
    148e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1490:	79bb      	ldrb	r3, [r7, #6]
    1492:	2b01      	cmp	r3, #1
    1494:	d01c      	beq.n	14d0 <_gpio_set_direction+0x50>
    1496:	2b02      	cmp	r3, #2
    1498:	d037      	beq.n	150a <_gpio_set_direction+0x8a>
    149a:	2b00      	cmp	r3, #0
    149c:	d14e      	bne.n	153c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    149e:	79fb      	ldrb	r3, [r7, #7]
    14a0:	683a      	ldr	r2, [r7, #0]
    14a2:	4619      	mov	r1, r3
    14a4:	482a      	ldr	r0, [pc, #168]	; (1550 <_gpio_set_direction+0xd0>)
    14a6:	4b2b      	ldr	r3, [pc, #172]	; (1554 <_gpio_set_direction+0xd4>)
    14a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    14aa:	683b      	ldr	r3, [r7, #0]
    14ac:	b29b      	uxth	r3, r3
    14ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    14b2:	79fb      	ldrb	r3, [r7, #7]
    14b4:	4619      	mov	r1, r3
    14b6:	4826      	ldr	r0, [pc, #152]	; (1550 <_gpio_set_direction+0xd0>)
    14b8:	4b27      	ldr	r3, [pc, #156]	; (1558 <_gpio_set_direction+0xd8>)
    14ba:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    14bc:	683b      	ldr	r3, [r7, #0]
    14be:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    14c0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    14c4:	79fb      	ldrb	r3, [r7, #7]
    14c6:	4619      	mov	r1, r3
    14c8:	4821      	ldr	r0, [pc, #132]	; (1550 <_gpio_set_direction+0xd0>)
    14ca:	4b23      	ldr	r3, [pc, #140]	; (1558 <_gpio_set_direction+0xd8>)
    14cc:	4798      	blx	r3
		break;
    14ce:	e03a      	b.n	1546 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    14d0:	79fb      	ldrb	r3, [r7, #7]
    14d2:	683a      	ldr	r2, [r7, #0]
    14d4:	4619      	mov	r1, r3
    14d6:	481e      	ldr	r0, [pc, #120]	; (1550 <_gpio_set_direction+0xd0>)
    14d8:	4b1e      	ldr	r3, [pc, #120]	; (1554 <_gpio_set_direction+0xd4>)
    14da:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    14dc:	683b      	ldr	r3, [r7, #0]
    14de:	b29b      	uxth	r3, r3
    14e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    14e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    14e8:	79f9      	ldrb	r1, [r7, #7]
    14ea:	461a      	mov	r2, r3
    14ec:	4818      	ldr	r0, [pc, #96]	; (1550 <_gpio_set_direction+0xd0>)
    14ee:	4b1a      	ldr	r3, [pc, #104]	; (1558 <_gpio_set_direction+0xd8>)
    14f0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    14f2:	683b      	ldr	r3, [r7, #0]
    14f4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    14f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    14fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    14fe:	79f9      	ldrb	r1, [r7, #7]
    1500:	461a      	mov	r2, r3
    1502:	4813      	ldr	r0, [pc, #76]	; (1550 <_gpio_set_direction+0xd0>)
    1504:	4b14      	ldr	r3, [pc, #80]	; (1558 <_gpio_set_direction+0xd8>)
    1506:	4798      	blx	r3
		break;
    1508:	e01d      	b.n	1546 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    150a:	79fb      	ldrb	r3, [r7, #7]
    150c:	683a      	ldr	r2, [r7, #0]
    150e:	4619      	mov	r1, r3
    1510:	480f      	ldr	r0, [pc, #60]	; (1550 <_gpio_set_direction+0xd0>)
    1512:	4b12      	ldr	r3, [pc, #72]	; (155c <_gpio_set_direction+0xdc>)
    1514:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1516:	683b      	ldr	r3, [r7, #0]
    1518:	b29b      	uxth	r3, r3
    151a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    151e:	79fb      	ldrb	r3, [r7, #7]
    1520:	4619      	mov	r1, r3
    1522:	480b      	ldr	r0, [pc, #44]	; (1550 <_gpio_set_direction+0xd0>)
    1524:	4b0c      	ldr	r3, [pc, #48]	; (1558 <_gpio_set_direction+0xd8>)
    1526:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1528:	683b      	ldr	r3, [r7, #0]
    152a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    152c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1530:	79fb      	ldrb	r3, [r7, #7]
    1532:	4619      	mov	r1, r3
    1534:	4806      	ldr	r0, [pc, #24]	; (1550 <_gpio_set_direction+0xd0>)
    1536:	4b08      	ldr	r3, [pc, #32]	; (1558 <_gpio_set_direction+0xd8>)
    1538:	4798      	blx	r3
		break;
    153a:	e004      	b.n	1546 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    153c:	2246      	movs	r2, #70	; 0x46
    153e:	4908      	ldr	r1, [pc, #32]	; (1560 <_gpio_set_direction+0xe0>)
    1540:	2000      	movs	r0, #0
    1542:	4b08      	ldr	r3, [pc, #32]	; (1564 <_gpio_set_direction+0xe4>)
    1544:	4798      	blx	r3
	}
}
    1546:	bf00      	nop
    1548:	3708      	adds	r7, #8
    154a:	46bd      	mov	sp, r7
    154c:	bd80      	pop	{r7, pc}
    154e:	bf00      	nop
    1550:	41008000 	.word	0x41008000
    1554:	0000123f 	.word	0x0000123f
    1558:	00001457 	.word	0x00001457
    155c:	00001217 	.word	0x00001217
    1560:	0000fe10 	.word	0x0000fe10
    1564:	00003e69 	.word	0x00003e69

00001568 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1568:	b580      	push	{r7, lr}
    156a:	b082      	sub	sp, #8
    156c:	af00      	add	r7, sp, #0
    156e:	4603      	mov	r3, r0
    1570:	6039      	str	r1, [r7, #0]
    1572:	71fb      	strb	r3, [r7, #7]
    1574:	4613      	mov	r3, r2
    1576:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1578:	79bb      	ldrb	r3, [r7, #6]
    157a:	2b00      	cmp	r3, #0
    157c:	d006      	beq.n	158c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    157e:	79fb      	ldrb	r3, [r7, #7]
    1580:	683a      	ldr	r2, [r7, #0]
    1582:	4619      	mov	r1, r3
    1584:	4806      	ldr	r0, [pc, #24]	; (15a0 <_gpio_set_level+0x38>)
    1586:	4b07      	ldr	r3, [pc, #28]	; (15a4 <_gpio_set_level+0x3c>)
    1588:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    158a:	e005      	b.n	1598 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    158c:	79fb      	ldrb	r3, [r7, #7]
    158e:	683a      	ldr	r2, [r7, #0]
    1590:	4619      	mov	r1, r3
    1592:	4803      	ldr	r0, [pc, #12]	; (15a0 <_gpio_set_level+0x38>)
    1594:	4b04      	ldr	r3, [pc, #16]	; (15a8 <_gpio_set_level+0x40>)
    1596:	4798      	blx	r3
}
    1598:	bf00      	nop
    159a:	3708      	adds	r7, #8
    159c:	46bd      	mov	sp, r7
    159e:	bd80      	pop	{r7, pc}
    15a0:	41008000 	.word	0x41008000
    15a4:	00001267 	.word	0x00001267
    15a8:	0000128f 	.word	0x0000128f

000015ac <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    15ac:	b580      	push	{r7, lr}
    15ae:	b082      	sub	sp, #8
    15b0:	af00      	add	r7, sp, #0
    15b2:	4603      	mov	r3, r0
    15b4:	71fb      	strb	r3, [r7, #7]
    15b6:	460b      	mov	r3, r1
    15b8:	71bb      	strb	r3, [r7, #6]
    15ba:	4613      	mov	r3, r2
    15bc:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    15be:	797b      	ldrb	r3, [r7, #5]
    15c0:	2b01      	cmp	r3, #1
    15c2:	d00a      	beq.n	15da <_gpio_set_pin_pull_mode+0x2e>
    15c4:	2b02      	cmp	r3, #2
    15c6:	d01f      	beq.n	1608 <_gpio_set_pin_pull_mode+0x5c>
    15c8:	2b00      	cmp	r3, #0
    15ca:	d134      	bne.n	1636 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    15cc:	79ba      	ldrb	r2, [r7, #6]
    15ce:	79fb      	ldrb	r3, [r7, #7]
    15d0:	4619      	mov	r1, r3
    15d2:	481e      	ldr	r0, [pc, #120]	; (164c <_gpio_set_pin_pull_mode+0xa0>)
    15d4:	4b1e      	ldr	r3, [pc, #120]	; (1650 <_gpio_set_pin_pull_mode+0xa4>)
    15d6:	4798      	blx	r3
		break;
    15d8:	e033      	b.n	1642 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    15da:	79bb      	ldrb	r3, [r7, #6]
    15dc:	2201      	movs	r2, #1
    15de:	409a      	lsls	r2, r3
    15e0:	79fb      	ldrb	r3, [r7, #7]
    15e2:	4619      	mov	r1, r3
    15e4:	4819      	ldr	r0, [pc, #100]	; (164c <_gpio_set_pin_pull_mode+0xa0>)
    15e6:	4b1b      	ldr	r3, [pc, #108]	; (1654 <_gpio_set_pin_pull_mode+0xa8>)
    15e8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    15ea:	79ba      	ldrb	r2, [r7, #6]
    15ec:	79fb      	ldrb	r3, [r7, #7]
    15ee:	4619      	mov	r1, r3
    15f0:	4816      	ldr	r0, [pc, #88]	; (164c <_gpio_set_pin_pull_mode+0xa0>)
    15f2:	4b19      	ldr	r3, [pc, #100]	; (1658 <_gpio_set_pin_pull_mode+0xac>)
    15f4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    15f6:	79bb      	ldrb	r3, [r7, #6]
    15f8:	2201      	movs	r2, #1
    15fa:	409a      	lsls	r2, r3
    15fc:	79fb      	ldrb	r3, [r7, #7]
    15fe:	4619      	mov	r1, r3
    1600:	4812      	ldr	r0, [pc, #72]	; (164c <_gpio_set_pin_pull_mode+0xa0>)
    1602:	4b16      	ldr	r3, [pc, #88]	; (165c <_gpio_set_pin_pull_mode+0xb0>)
    1604:	4798      	blx	r3
		break;
    1606:	e01c      	b.n	1642 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1608:	79bb      	ldrb	r3, [r7, #6]
    160a:	2201      	movs	r2, #1
    160c:	409a      	lsls	r2, r3
    160e:	79fb      	ldrb	r3, [r7, #7]
    1610:	4619      	mov	r1, r3
    1612:	480e      	ldr	r0, [pc, #56]	; (164c <_gpio_set_pin_pull_mode+0xa0>)
    1614:	4b0f      	ldr	r3, [pc, #60]	; (1654 <_gpio_set_pin_pull_mode+0xa8>)
    1616:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1618:	79ba      	ldrb	r2, [r7, #6]
    161a:	79fb      	ldrb	r3, [r7, #7]
    161c:	4619      	mov	r1, r3
    161e:	480b      	ldr	r0, [pc, #44]	; (164c <_gpio_set_pin_pull_mode+0xa0>)
    1620:	4b0d      	ldr	r3, [pc, #52]	; (1658 <_gpio_set_pin_pull_mode+0xac>)
    1622:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1624:	79bb      	ldrb	r3, [r7, #6]
    1626:	2201      	movs	r2, #1
    1628:	409a      	lsls	r2, r3
    162a:	79fb      	ldrb	r3, [r7, #7]
    162c:	4619      	mov	r1, r3
    162e:	4807      	ldr	r0, [pc, #28]	; (164c <_gpio_set_pin_pull_mode+0xa0>)
    1630:	4b0b      	ldr	r3, [pc, #44]	; (1660 <_gpio_set_pin_pull_mode+0xb4>)
    1632:	4798      	blx	r3
		break;
    1634:	e005      	b.n	1642 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1636:	2289      	movs	r2, #137	; 0x89
    1638:	490a      	ldr	r1, [pc, #40]	; (1664 <_gpio_set_pin_pull_mode+0xb8>)
    163a:	2000      	movs	r0, #0
    163c:	4b0a      	ldr	r3, [pc, #40]	; (1668 <_gpio_set_pin_pull_mode+0xbc>)
    163e:	4798      	blx	r3
		break;
    1640:	bf00      	nop
	}
}
    1642:	bf00      	nop
    1644:	3708      	adds	r7, #8
    1646:	46bd      	mov	sp, r7
    1648:	bd80      	pop	{r7, pc}
    164a:	bf00      	nop
    164c:	41008000 	.word	0x41008000
    1650:	00001413 	.word	0x00001413
    1654:	0000123f 	.word	0x0000123f
    1658:	000013cf 	.word	0x000013cf
    165c:	00001267 	.word	0x00001267
    1660:	0000128f 	.word	0x0000128f
    1664:	0000fe10 	.word	0x0000fe10
    1668:	00003e69 	.word	0x00003e69

0000166c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    166c:	b590      	push	{r4, r7, lr}
    166e:	b085      	sub	sp, #20
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	095b      	lsrs	r3, r3, #5
    167a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	b2db      	uxtb	r3, r3
    1680:	f003 031f 	and.w	r3, r3, #31
    1684:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1686:	683b      	ldr	r3, [r7, #0]
    1688:	f1b3 3fff 	cmp.w	r3, #4294967295
    168c:	d106      	bne.n	169c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    168e:	7bba      	ldrb	r2, [r7, #14]
    1690:	7bf9      	ldrb	r1, [r7, #15]
    1692:	2300      	movs	r3, #0
    1694:	4812      	ldr	r0, [pc, #72]	; (16e0 <_gpio_set_pin_function+0x74>)
    1696:	4c13      	ldr	r4, [pc, #76]	; (16e4 <_gpio_set_pin_function+0x78>)
    1698:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    169a:	e01d      	b.n	16d8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    169c:	7bba      	ldrb	r2, [r7, #14]
    169e:	7bf9      	ldrb	r1, [r7, #15]
    16a0:	2301      	movs	r3, #1
    16a2:	480f      	ldr	r0, [pc, #60]	; (16e0 <_gpio_set_pin_function+0x74>)
    16a4:	4c0f      	ldr	r4, [pc, #60]	; (16e4 <_gpio_set_pin_function+0x78>)
    16a6:	47a0      	blx	r4
		if (pin & 1) {
    16a8:	7bbb      	ldrb	r3, [r7, #14]
    16aa:	f003 0301 	and.w	r3, r3, #1
    16ae:	2b00      	cmp	r3, #0
    16b0:	d009      	beq.n	16c6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    16b2:	7bbb      	ldrb	r3, [r7, #14]
    16b4:	085b      	lsrs	r3, r3, #1
    16b6:	b2da      	uxtb	r2, r3
    16b8:	683b      	ldr	r3, [r7, #0]
    16ba:	b2db      	uxtb	r3, r3
    16bc:	7bf9      	ldrb	r1, [r7, #15]
    16be:	4808      	ldr	r0, [pc, #32]	; (16e0 <_gpio_set_pin_function+0x74>)
    16c0:	4c09      	ldr	r4, [pc, #36]	; (16e8 <_gpio_set_pin_function+0x7c>)
    16c2:	47a0      	blx	r4
}
    16c4:	e008      	b.n	16d8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    16c6:	7bbb      	ldrb	r3, [r7, #14]
    16c8:	085b      	lsrs	r3, r3, #1
    16ca:	b2da      	uxtb	r2, r3
    16cc:	683b      	ldr	r3, [r7, #0]
    16ce:	b2db      	uxtb	r3, r3
    16d0:	7bf9      	ldrb	r1, [r7, #15]
    16d2:	4803      	ldr	r0, [pc, #12]	; (16e0 <_gpio_set_pin_function+0x74>)
    16d4:	4c05      	ldr	r4, [pc, #20]	; (16ec <_gpio_set_pin_function+0x80>)
    16d6:	47a0      	blx	r4
}
    16d8:	bf00      	nop
    16da:	3714      	adds	r7, #20
    16dc:	46bd      	mov	sp, r7
    16de:	bd90      	pop	{r4, r7, pc}
    16e0:	41008000 	.word	0x41008000
    16e4:	00001375 	.word	0x00001375
    16e8:	00001317 	.word	0x00001317
    16ec:	000012b7 	.word	0x000012b7

000016f0 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b082      	sub	sp, #8
    16f4:	af00      	add	r7, sp, #0
    16f6:	4603      	mov	r3, r0
    16f8:	460a      	mov	r2, r1
    16fa:	71fb      	strb	r3, [r7, #7]
    16fc:	4613      	mov	r3, r2
    16fe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1700:	79fb      	ldrb	r3, [r7, #7]
    1702:	095b      	lsrs	r3, r3, #5
    1704:	b2d8      	uxtb	r0, r3
    1706:	79fb      	ldrb	r3, [r7, #7]
    1708:	f003 031f 	and.w	r3, r3, #31
    170c:	b2db      	uxtb	r3, r3
    170e:	79ba      	ldrb	r2, [r7, #6]
    1710:	4619      	mov	r1, r3
    1712:	4b03      	ldr	r3, [pc, #12]	; (1720 <gpio_set_pin_pull_mode+0x30>)
    1714:	4798      	blx	r3
}
    1716:	bf00      	nop
    1718:	3708      	adds	r7, #8
    171a:	46bd      	mov	sp, r7
    171c:	bd80      	pop	{r7, pc}
    171e:	bf00      	nop
    1720:	000015ad 	.word	0x000015ad

00001724 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1724:	b580      	push	{r7, lr}
    1726:	b082      	sub	sp, #8
    1728:	af00      	add	r7, sp, #0
    172a:	6078      	str	r0, [r7, #4]
    172c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    172e:	6839      	ldr	r1, [r7, #0]
    1730:	6878      	ldr	r0, [r7, #4]
    1732:	4b03      	ldr	r3, [pc, #12]	; (1740 <gpio_set_pin_function+0x1c>)
    1734:	4798      	blx	r3
}
    1736:	bf00      	nop
    1738:	3708      	adds	r7, #8
    173a:	46bd      	mov	sp, r7
    173c:	bd80      	pop	{r7, pc}
    173e:	bf00      	nop
    1740:	0000166d 	.word	0x0000166d

00001744 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1744:	b580      	push	{r7, lr}
    1746:	b082      	sub	sp, #8
    1748:	af00      	add	r7, sp, #0
    174a:	4603      	mov	r3, r0
    174c:	460a      	mov	r2, r1
    174e:	71fb      	strb	r3, [r7, #7]
    1750:	4613      	mov	r3, r2
    1752:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1754:	79fb      	ldrb	r3, [r7, #7]
    1756:	095b      	lsrs	r3, r3, #5
    1758:	b2d8      	uxtb	r0, r3
    175a:	79fb      	ldrb	r3, [r7, #7]
    175c:	f003 031f 	and.w	r3, r3, #31
    1760:	2201      	movs	r2, #1
    1762:	fa02 f303 	lsl.w	r3, r2, r3
    1766:	79ba      	ldrb	r2, [r7, #6]
    1768:	4619      	mov	r1, r3
    176a:	4b03      	ldr	r3, [pc, #12]	; (1778 <gpio_set_pin_direction+0x34>)
    176c:	4798      	blx	r3
}
    176e:	bf00      	nop
    1770:	3708      	adds	r7, #8
    1772:	46bd      	mov	sp, r7
    1774:	bd80      	pop	{r7, pc}
    1776:	bf00      	nop
    1778:	00001481 	.word	0x00001481

0000177c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    177c:	b580      	push	{r7, lr}
    177e:	b082      	sub	sp, #8
    1780:	af00      	add	r7, sp, #0
    1782:	4603      	mov	r3, r0
    1784:	460a      	mov	r2, r1
    1786:	71fb      	strb	r3, [r7, #7]
    1788:	4613      	mov	r3, r2
    178a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    178c:	79fb      	ldrb	r3, [r7, #7]
    178e:	095b      	lsrs	r3, r3, #5
    1790:	b2d8      	uxtb	r0, r3
    1792:	79fb      	ldrb	r3, [r7, #7]
    1794:	f003 031f 	and.w	r3, r3, #31
    1798:	2201      	movs	r2, #1
    179a:	fa02 f303 	lsl.w	r3, r2, r3
    179e:	79ba      	ldrb	r2, [r7, #6]
    17a0:	4619      	mov	r1, r3
    17a2:	4b03      	ldr	r3, [pc, #12]	; (17b0 <gpio_set_pin_level+0x34>)
    17a4:	4798      	blx	r3
}
    17a6:	bf00      	nop
    17a8:	3708      	adds	r7, #8
    17aa:	46bd      	mov	sp, r7
    17ac:	bd80      	pop	{r7, pc}
    17ae:	bf00      	nop
    17b0:	00001569 	.word	0x00001569

000017b4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    17b4:	b580      	push	{r7, lr}
    17b6:	af00      	add	r7, sp, #0
	_init_chip();
    17b8:	4b01      	ldr	r3, [pc, #4]	; (17c0 <init_mcu+0xc>)
    17ba:	4798      	blx	r3
}
    17bc:	bf00      	nop
    17be:	bd80      	pop	{r7, pc}
    17c0:	00004a75 	.word	0x00004a75

000017c4 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    17c4:	b580      	push	{r7, lr}
    17c6:	b082      	sub	sp, #8
    17c8:	af00      	add	r7, sp, #0
    17ca:	6078      	str	r0, [r7, #4]
    17cc:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d004      	beq.n	17de <wdt_init+0x1a>
    17d4:	683b      	ldr	r3, [r7, #0]
    17d6:	2b00      	cmp	r3, #0
    17d8:	d001      	beq.n	17de <wdt_init+0x1a>
    17da:	2301      	movs	r3, #1
    17dc:	e000      	b.n	17e0 <wdt_init+0x1c>
    17de:	2300      	movs	r3, #0
    17e0:	f003 0301 	and.w	r3, r3, #1
    17e4:	b2db      	uxtb	r3, r3
    17e6:	2248      	movs	r2, #72	; 0x48
    17e8:	4907      	ldr	r1, [pc, #28]	; (1808 <wdt_init+0x44>)
    17ea:	4618      	mov	r0, r3
    17ec:	4b07      	ldr	r3, [pc, #28]	; (180c <wdt_init+0x48>)
    17ee:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	683a      	ldr	r2, [r7, #0]
    17f4:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    17f6:	687b      	ldr	r3, [r7, #4]
    17f8:	4618      	mov	r0, r3
    17fa:	4b05      	ldr	r3, [pc, #20]	; (1810 <wdt_init+0x4c>)
    17fc:	4798      	blx	r3
    17fe:	4603      	mov	r3, r0
}
    1800:	4618      	mov	r0, r3
    1802:	3708      	adds	r7, #8
    1804:	46bd      	mov	sp, r7
    1806:	bd80      	pop	{r7, pc}
    1808:	0000fe2c 	.word	0x0000fe2c
    180c:	00003e69 	.word	0x00003e69
    1810:	0000b9ed 	.word	0x0000b9ed

00001814 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1814:	b580      	push	{r7, lr}
    1816:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1818:	4804      	ldr	r0, [pc, #16]	; (182c <CRC_CALC_init+0x18>)
    181a:	4b05      	ldr	r3, [pc, #20]	; (1830 <CRC_CALC_init+0x1c>)
    181c:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    181e:	4905      	ldr	r1, [pc, #20]	; (1834 <CRC_CALC_init+0x20>)
    1820:	4805      	ldr	r0, [pc, #20]	; (1838 <CRC_CALC_init+0x24>)
    1822:	4b06      	ldr	r3, [pc, #24]	; (183c <CRC_CALC_init+0x28>)
    1824:	4798      	blx	r3
}
    1826:	bf00      	nop
    1828:	bd80      	pop	{r7, pc}
    182a:	bf00      	nop
    182c:	40000800 	.word	0x40000800
    1830:	00001057 	.word	0x00001057
    1834:	41002000 	.word	0x41002000
    1838:	2000150c 	.word	0x2000150c
    183c:	00002589 	.word	0x00002589

00001840 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1840:	b580      	push	{r7, lr}
    1842:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1844:	2244      	movs	r2, #68	; 0x44
    1846:	2104      	movs	r1, #4
    1848:	4838      	ldr	r0, [pc, #224]	; (192c <EXTERNAL_IRQ_0_init+0xec>)
    184a:	4b39      	ldr	r3, [pc, #228]	; (1930 <EXTERNAL_IRQ_0_init+0xf0>)
    184c:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    184e:	4839      	ldr	r0, [pc, #228]	; (1934 <EXTERNAL_IRQ_0_init+0xf4>)
    1850:	4b39      	ldr	r3, [pc, #228]	; (1938 <EXTERNAL_IRQ_0_init+0xf8>)
    1852:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1854:	2101      	movs	r1, #1
    1856:	2040      	movs	r0, #64	; 0x40
    1858:	4b38      	ldr	r3, [pc, #224]	; (193c <EXTERNAL_IRQ_0_init+0xfc>)
    185a:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    185c:	2100      	movs	r1, #0
    185e:	2040      	movs	r0, #64	; 0x40
    1860:	4b37      	ldr	r3, [pc, #220]	; (1940 <EXTERNAL_IRQ_0_init+0x100>)
    1862:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1864:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1868:	2040      	movs	r0, #64	; 0x40
    186a:	4b36      	ldr	r3, [pc, #216]	; (1944 <EXTERNAL_IRQ_0_init+0x104>)
    186c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    186e:	2101      	movs	r1, #1
    1870:	2003      	movs	r0, #3
    1872:	4b32      	ldr	r3, [pc, #200]	; (193c <EXTERNAL_IRQ_0_init+0xfc>)
    1874:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1876:	2102      	movs	r1, #2
    1878:	2003      	movs	r0, #3
    187a:	4b31      	ldr	r3, [pc, #196]	; (1940 <EXTERNAL_IRQ_0_init+0x100>)
    187c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    187e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1882:	2003      	movs	r0, #3
    1884:	4b2f      	ldr	r3, [pc, #188]	; (1944 <EXTERNAL_IRQ_0_init+0x104>)
    1886:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1888:	2101      	movs	r1, #1
    188a:	2004      	movs	r0, #4
    188c:	4b2b      	ldr	r3, [pc, #172]	; (193c <EXTERNAL_IRQ_0_init+0xfc>)
    188e:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1890:	2102      	movs	r1, #2
    1892:	2004      	movs	r0, #4
    1894:	4b2a      	ldr	r3, [pc, #168]	; (1940 <EXTERNAL_IRQ_0_init+0x100>)
    1896:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1898:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    189c:	2004      	movs	r0, #4
    189e:	4b29      	ldr	r3, [pc, #164]	; (1944 <EXTERNAL_IRQ_0_init+0x104>)
    18a0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    18a2:	2101      	movs	r1, #1
    18a4:	2005      	movs	r0, #5
    18a6:	4b25      	ldr	r3, [pc, #148]	; (193c <EXTERNAL_IRQ_0_init+0xfc>)
    18a8:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    18aa:	2102      	movs	r1, #2
    18ac:	2005      	movs	r0, #5
    18ae:	4b24      	ldr	r3, [pc, #144]	; (1940 <EXTERNAL_IRQ_0_init+0x100>)
    18b0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    18b2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    18b6:	2005      	movs	r0, #5
    18b8:	4b22      	ldr	r3, [pc, #136]	; (1944 <EXTERNAL_IRQ_0_init+0x104>)
    18ba:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    18bc:	2101      	movs	r1, #1
    18be:	2056      	movs	r0, #86	; 0x56
    18c0:	4b1e      	ldr	r3, [pc, #120]	; (193c <EXTERNAL_IRQ_0_init+0xfc>)
    18c2:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    18c4:	2102      	movs	r1, #2
    18c6:	2056      	movs	r0, #86	; 0x56
    18c8:	4b1d      	ldr	r3, [pc, #116]	; (1940 <EXTERNAL_IRQ_0_init+0x100>)
    18ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    18cc:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    18d0:	2056      	movs	r0, #86	; 0x56
    18d2:	4b1c      	ldr	r3, [pc, #112]	; (1944 <EXTERNAL_IRQ_0_init+0x104>)
    18d4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    18d6:	2101      	movs	r1, #1
    18d8:	2057      	movs	r0, #87	; 0x57
    18da:	4b18      	ldr	r3, [pc, #96]	; (193c <EXTERNAL_IRQ_0_init+0xfc>)
    18dc:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    18de:	2102      	movs	r1, #2
    18e0:	2057      	movs	r0, #87	; 0x57
    18e2:	4b17      	ldr	r3, [pc, #92]	; (1940 <EXTERNAL_IRQ_0_init+0x100>)
    18e4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    18e6:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    18ea:	2057      	movs	r0, #87	; 0x57
    18ec:	4b15      	ldr	r3, [pc, #84]	; (1944 <EXTERNAL_IRQ_0_init+0x104>)
    18ee:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    18f0:	2101      	movs	r1, #1
    18f2:	2028      	movs	r0, #40	; 0x28
    18f4:	4b11      	ldr	r3, [pc, #68]	; (193c <EXTERNAL_IRQ_0_init+0xfc>)
    18f6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    18f8:	2100      	movs	r1, #0
    18fa:	2028      	movs	r0, #40	; 0x28
    18fc:	4b10      	ldr	r3, [pc, #64]	; (1940 <EXTERNAL_IRQ_0_init+0x100>)
    18fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1900:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1904:	2028      	movs	r0, #40	; 0x28
    1906:	4b0f      	ldr	r3, [pc, #60]	; (1944 <EXTERNAL_IRQ_0_init+0x104>)
    1908:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    190a:	2101      	movs	r1, #1
    190c:	2029      	movs	r0, #41	; 0x29
    190e:	4b0b      	ldr	r3, [pc, #44]	; (193c <EXTERNAL_IRQ_0_init+0xfc>)
    1910:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1912:	2100      	movs	r1, #0
    1914:	2029      	movs	r0, #41	; 0x29
    1916:	4b0a      	ldr	r3, [pc, #40]	; (1940 <EXTERNAL_IRQ_0_init+0x100>)
    1918:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    191a:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    191e:	2029      	movs	r0, #41	; 0x29
    1920:	4b08      	ldr	r3, [pc, #32]	; (1944 <EXTERNAL_IRQ_0_init+0x104>)
    1922:	4798      	blx	r3

	ext_irq_init();
    1924:	4b08      	ldr	r3, [pc, #32]	; (1948 <EXTERNAL_IRQ_0_init+0x108>)
    1926:	4798      	blx	r3
}
    1928:	bf00      	nop
    192a:	bd80      	pop	{r7, pc}
    192c:	40001c00 	.word	0x40001c00
    1930:	00000ef1 	.word	0x00000ef1
    1934:	40000800 	.word	0x40000800
    1938:	00000fd7 	.word	0x00000fd7
    193c:	00001745 	.word	0x00001745
    1940:	000016f1 	.word	0x000016f1
    1944:	00001725 	.word	0x00001725
    1948:	00002651 	.word	0x00002651

0000194c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    194c:	b580      	push	{r7, lr}
    194e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1950:	2244      	movs	r2, #68	; 0x44
    1952:	210b      	movs	r1, #11
    1954:	4807      	ldr	r0, [pc, #28]	; (1974 <EVENT_SYSTEM_0_init+0x28>)
    1956:	4b08      	ldr	r3, [pc, #32]	; (1978 <EVENT_SYSTEM_0_init+0x2c>)
    1958:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    195a:	2244      	movs	r2, #68	; 0x44
    195c:	210c      	movs	r1, #12
    195e:	4805      	ldr	r0, [pc, #20]	; (1974 <EVENT_SYSTEM_0_init+0x28>)
    1960:	4b05      	ldr	r3, [pc, #20]	; (1978 <EVENT_SYSTEM_0_init+0x2c>)
    1962:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1964:	4805      	ldr	r0, [pc, #20]	; (197c <EVENT_SYSTEM_0_init+0x30>)
    1966:	4b06      	ldr	r3, [pc, #24]	; (1980 <EVENT_SYSTEM_0_init+0x34>)
    1968:	4798      	blx	r3

	event_system_init();
    196a:	4b06      	ldr	r3, [pc, #24]	; (1984 <EVENT_SYSTEM_0_init+0x38>)
    196c:	4798      	blx	r3
}
    196e:	bf00      	nop
    1970:	bd80      	pop	{r7, pc}
    1972:	bf00      	nop
    1974:	40001c00 	.word	0x40001c00
    1978:	00000ef1 	.word	0x00000ef1
    197c:	40000800 	.word	0x40000800
    1980:	00001077 	.word	0x00001077
    1984:	0000263d 	.word	0x0000263d

00001988 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1988:	b580      	push	{r7, lr}
    198a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    198c:	2101      	movs	r1, #1
    198e:	202b      	movs	r0, #43	; 0x2b
    1990:	4b2b      	ldr	r3, [pc, #172]	; (1a40 <QSPI_N25Q256_PORT_init+0xb8>)
    1992:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1994:	2100      	movs	r1, #0
    1996:	202b      	movs	r0, #43	; 0x2b
    1998:	4b2a      	ldr	r3, [pc, #168]	; (1a44 <QSPI_N25Q256_PORT_init+0xbc>)
    199a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    199c:	492a      	ldr	r1, [pc, #168]	; (1a48 <QSPI_N25Q256_PORT_init+0xc0>)
    199e:	202b      	movs	r0, #43	; 0x2b
    19a0:	4b2a      	ldr	r3, [pc, #168]	; (1a4c <QSPI_N25Q256_PORT_init+0xc4>)
    19a2:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    19a4:	2102      	movs	r1, #2
    19a6:	2008      	movs	r0, #8
    19a8:	4b25      	ldr	r3, [pc, #148]	; (1a40 <QSPI_N25Q256_PORT_init+0xb8>)
    19aa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    19ac:	2100      	movs	r1, #0
    19ae:	2008      	movs	r0, #8
    19b0:	4b27      	ldr	r3, [pc, #156]	; (1a50 <QSPI_N25Q256_PORT_init+0xc8>)
    19b2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    19b4:	2100      	movs	r1, #0
    19b6:	2008      	movs	r0, #8
    19b8:	4b22      	ldr	r3, [pc, #136]	; (1a44 <QSPI_N25Q256_PORT_init+0xbc>)
    19ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    19bc:	4925      	ldr	r1, [pc, #148]	; (1a54 <QSPI_N25Q256_PORT_init+0xcc>)
    19be:	2008      	movs	r0, #8
    19c0:	4b22      	ldr	r3, [pc, #136]	; (1a4c <QSPI_N25Q256_PORT_init+0xc4>)
    19c2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    19c4:	2102      	movs	r1, #2
    19c6:	2009      	movs	r0, #9
    19c8:	4b1d      	ldr	r3, [pc, #116]	; (1a40 <QSPI_N25Q256_PORT_init+0xb8>)
    19ca:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    19cc:	2100      	movs	r1, #0
    19ce:	2009      	movs	r0, #9
    19d0:	4b1f      	ldr	r3, [pc, #124]	; (1a50 <QSPI_N25Q256_PORT_init+0xc8>)
    19d2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    19d4:	2100      	movs	r1, #0
    19d6:	2009      	movs	r0, #9
    19d8:	4b1a      	ldr	r3, [pc, #104]	; (1a44 <QSPI_N25Q256_PORT_init+0xbc>)
    19da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    19dc:	491e      	ldr	r1, [pc, #120]	; (1a58 <QSPI_N25Q256_PORT_init+0xd0>)
    19de:	2009      	movs	r0, #9
    19e0:	4b1a      	ldr	r3, [pc, #104]	; (1a4c <QSPI_N25Q256_PORT_init+0xc4>)
    19e2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    19e4:	2102      	movs	r1, #2
    19e6:	200a      	movs	r0, #10
    19e8:	4b15      	ldr	r3, [pc, #84]	; (1a40 <QSPI_N25Q256_PORT_init+0xb8>)
    19ea:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    19ec:	2100      	movs	r1, #0
    19ee:	200a      	movs	r0, #10
    19f0:	4b17      	ldr	r3, [pc, #92]	; (1a50 <QSPI_N25Q256_PORT_init+0xc8>)
    19f2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    19f4:	2100      	movs	r1, #0
    19f6:	200a      	movs	r0, #10
    19f8:	4b12      	ldr	r3, [pc, #72]	; (1a44 <QSPI_N25Q256_PORT_init+0xbc>)
    19fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    19fc:	4917      	ldr	r1, [pc, #92]	; (1a5c <QSPI_N25Q256_PORT_init+0xd4>)
    19fe:	200a      	movs	r0, #10
    1a00:	4b12      	ldr	r3, [pc, #72]	; (1a4c <QSPI_N25Q256_PORT_init+0xc4>)
    1a02:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1a04:	2102      	movs	r1, #2
    1a06:	200b      	movs	r0, #11
    1a08:	4b0d      	ldr	r3, [pc, #52]	; (1a40 <QSPI_N25Q256_PORT_init+0xb8>)
    1a0a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1a0c:	2100      	movs	r1, #0
    1a0e:	200b      	movs	r0, #11
    1a10:	4b0f      	ldr	r3, [pc, #60]	; (1a50 <QSPI_N25Q256_PORT_init+0xc8>)
    1a12:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1a14:	2100      	movs	r1, #0
    1a16:	200b      	movs	r0, #11
    1a18:	4b0a      	ldr	r3, [pc, #40]	; (1a44 <QSPI_N25Q256_PORT_init+0xbc>)
    1a1a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1a1c:	4910      	ldr	r1, [pc, #64]	; (1a60 <QSPI_N25Q256_PORT_init+0xd8>)
    1a1e:	200b      	movs	r0, #11
    1a20:	4b0a      	ldr	r3, [pc, #40]	; (1a4c <QSPI_N25Q256_PORT_init+0xc4>)
    1a22:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1a24:	2101      	movs	r1, #1
    1a26:	202a      	movs	r0, #42	; 0x2a
    1a28:	4b05      	ldr	r3, [pc, #20]	; (1a40 <QSPI_N25Q256_PORT_init+0xb8>)
    1a2a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1a2c:	2100      	movs	r1, #0
    1a2e:	202a      	movs	r0, #42	; 0x2a
    1a30:	4b04      	ldr	r3, [pc, #16]	; (1a44 <QSPI_N25Q256_PORT_init+0xbc>)
    1a32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1a34:	490b      	ldr	r1, [pc, #44]	; (1a64 <QSPI_N25Q256_PORT_init+0xdc>)
    1a36:	202a      	movs	r0, #42	; 0x2a
    1a38:	4b04      	ldr	r3, [pc, #16]	; (1a4c <QSPI_N25Q256_PORT_init+0xc4>)
    1a3a:	4798      	blx	r3
}
    1a3c:	bf00      	nop
    1a3e:	bd80      	pop	{r7, pc}
    1a40:	00001745 	.word	0x00001745
    1a44:	000016f1 	.word	0x000016f1
    1a48:	002b0007 	.word	0x002b0007
    1a4c:	00001725 	.word	0x00001725
    1a50:	0000177d 	.word	0x0000177d
    1a54:	00080007 	.word	0x00080007
    1a58:	00090007 	.word	0x00090007
    1a5c:	000a0007 	.word	0x000a0007
    1a60:	000b0007 	.word	0x000b0007
    1a64:	002a0007 	.word	0x002a0007

00001a68 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1a68:	b580      	push	{r7, lr}
    1a6a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1a6c:	4805      	ldr	r0, [pc, #20]	; (1a84 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1a6e:	4b06      	ldr	r3, [pc, #24]	; (1a88 <QSPI_N25Q256_CLOCK_init+0x20>)
    1a70:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1a72:	4804      	ldr	r0, [pc, #16]	; (1a84 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1a74:	4b05      	ldr	r3, [pc, #20]	; (1a8c <QSPI_N25Q256_CLOCK_init+0x24>)
    1a76:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1a78:	4802      	ldr	r0, [pc, #8]	; (1a84 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1a7a:	4b05      	ldr	r3, [pc, #20]	; (1a90 <QSPI_N25Q256_CLOCK_init+0x28>)
    1a7c:	4798      	blx	r3
}
    1a7e:	bf00      	nop
    1a80:	bd80      	pop	{r7, pc}
    1a82:	bf00      	nop
    1a84:	40000800 	.word	0x40000800
    1a88:	00000f37 	.word	0x00000f37
    1a8c:	00000f77 	.word	0x00000f77
    1a90:	00001137 	.word	0x00001137

00001a94 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1a98:	4b04      	ldr	r3, [pc, #16]	; (1aac <QSPI_N25Q256_init+0x18>)
    1a9a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1a9c:	4904      	ldr	r1, [pc, #16]	; (1ab0 <QSPI_N25Q256_init+0x1c>)
    1a9e:	4805      	ldr	r0, [pc, #20]	; (1ab4 <QSPI_N25Q256_init+0x20>)
    1aa0:	4b05      	ldr	r3, [pc, #20]	; (1ab8 <QSPI_N25Q256_init+0x24>)
    1aa2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1aa4:	4b05      	ldr	r3, [pc, #20]	; (1abc <QSPI_N25Q256_init+0x28>)
    1aa6:	4798      	blx	r3
}
    1aa8:	bf00      	nop
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	00001a69 	.word	0x00001a69
    1ab0:	42003400 	.word	0x42003400
    1ab4:	20001380 	.word	0x20001380
    1ab8:	00002cc5 	.word	0x00002cc5
    1abc:	00001989 	.word	0x00001989

00001ac0 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1ac4:	4802      	ldr	r0, [pc, #8]	; (1ad0 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1ac6:	4b03      	ldr	r3, [pc, #12]	; (1ad4 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1ac8:	4798      	blx	r3
}
    1aca:	bf00      	nop
    1acc:	bd80      	pop	{r7, pc}
    1ace:	bf00      	nop
    1ad0:	40000800 	.word	0x40000800
    1ad4:	00000fb7 	.word	0x00000fb7

00001ad8 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1ad8:	b580      	push	{r7, lr}
    1ada:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1adc:	4b03      	ldr	r3, [pc, #12]	; (1aec <DATETIME_CLOCK_init+0x14>)
    1ade:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1ae0:	4903      	ldr	r1, [pc, #12]	; (1af0 <DATETIME_CLOCK_init+0x18>)
    1ae2:	4804      	ldr	r0, [pc, #16]	; (1af4 <DATETIME_CLOCK_init+0x1c>)
    1ae4:	4b04      	ldr	r3, [pc, #16]	; (1af8 <DATETIME_CLOCK_init+0x20>)
    1ae6:	4798      	blx	r3
}
    1ae8:	bf00      	nop
    1aea:	bd80      	pop	{r7, pc}
    1aec:	00001ac1 	.word	0x00001ac1
    1af0:	40002400 	.word	0x40002400
    1af4:	200014e8 	.word	0x200014e8
    1af8:	0000242d 	.word	0x0000242d

00001afc <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1b00:	2100      	movs	r1, #0
    1b02:	2010      	movs	r0, #16
    1b04:	4b07      	ldr	r3, [pc, #28]	; (1b24 <I2C_SHARED_PORT_init+0x28>)
    1b06:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1b08:	4907      	ldr	r1, [pc, #28]	; (1b28 <I2C_SHARED_PORT_init+0x2c>)
    1b0a:	2010      	movs	r0, #16
    1b0c:	4b07      	ldr	r3, [pc, #28]	; (1b2c <I2C_SHARED_PORT_init+0x30>)
    1b0e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1b10:	2100      	movs	r1, #0
    1b12:	2011      	movs	r0, #17
    1b14:	4b03      	ldr	r3, [pc, #12]	; (1b24 <I2C_SHARED_PORT_init+0x28>)
    1b16:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1b18:	4905      	ldr	r1, [pc, #20]	; (1b30 <I2C_SHARED_PORT_init+0x34>)
    1b1a:	2011      	movs	r0, #17
    1b1c:	4b03      	ldr	r3, [pc, #12]	; (1b2c <I2C_SHARED_PORT_init+0x30>)
    1b1e:	4798      	blx	r3
}
    1b20:	bf00      	nop
    1b22:	bd80      	pop	{r7, pc}
    1b24:	000016f1 	.word	0x000016f1
    1b28:	00100002 	.word	0x00100002
    1b2c:	00001725 	.word	0x00001725
    1b30:	00110002 	.word	0x00110002

00001b34 <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    1b34:	b580      	push	{r7, lr}
    1b36:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b38:	2245      	movs	r2, #69	; 0x45
    1b3a:	2108      	movs	r1, #8
    1b3c:	4806      	ldr	r0, [pc, #24]	; (1b58 <I2C_SHARED_CLOCK_init+0x24>)
    1b3e:	4b07      	ldr	r3, [pc, #28]	; (1b5c <I2C_SHARED_CLOCK_init+0x28>)
    1b40:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b42:	224a      	movs	r2, #74	; 0x4a
    1b44:	2103      	movs	r1, #3
    1b46:	4804      	ldr	r0, [pc, #16]	; (1b58 <I2C_SHARED_CLOCK_init+0x24>)
    1b48:	4b04      	ldr	r3, [pc, #16]	; (1b5c <I2C_SHARED_CLOCK_init+0x28>)
    1b4a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1b4c:	4804      	ldr	r0, [pc, #16]	; (1b60 <I2C_SHARED_CLOCK_init+0x2c>)
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <I2C_SHARED_CLOCK_init+0x30>)
    1b50:	4798      	blx	r3
}
    1b52:	bf00      	nop
    1b54:	bd80      	pop	{r7, pc}
    1b56:	bf00      	nop
    1b58:	40001c00 	.word	0x40001c00
    1b5c:	00000ef1 	.word	0x00000ef1
    1b60:	40000800 	.word	0x40000800
    1b64:	00000ff7 	.word	0x00000ff7

00001b68 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    1b68:	b580      	push	{r7, lr}
    1b6a:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    1b6c:	4b04      	ldr	r3, [pc, #16]	; (1b80 <I2C_SHARED_init+0x18>)
    1b6e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM1);
    1b70:	4904      	ldr	r1, [pc, #16]	; (1b84 <I2C_SHARED_init+0x1c>)
    1b72:	4805      	ldr	r0, [pc, #20]	; (1b88 <I2C_SHARED_init+0x20>)
    1b74:	4b05      	ldr	r3, [pc, #20]	; (1b8c <I2C_SHARED_init+0x24>)
    1b76:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    1b78:	4b05      	ldr	r3, [pc, #20]	; (1b90 <I2C_SHARED_init+0x28>)
    1b7a:	4798      	blx	r3
}
    1b7c:	bf00      	nop
    1b7e:	bd80      	pop	{r7, pc}
    1b80:	00001b35 	.word	0x00001b35
    1b84:	40003400 	.word	0x40003400
    1b88:	20001468 	.word	0x20001468
    1b8c:	00002ae9 	.word	0x00002ae9
    1b90:	00001afd 	.word	0x00001afd

00001b94 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1b98:	2100      	movs	r1, #0
    1b9a:	203b      	movs	r0, #59	; 0x3b
    1b9c:	4b11      	ldr	r3, [pc, #68]	; (1be4 <SPI_TEMP_PORT_init+0x50>)
    1b9e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1ba0:	2102      	movs	r1, #2
    1ba2:	203b      	movs	r0, #59	; 0x3b
    1ba4:	4b10      	ldr	r3, [pc, #64]	; (1be8 <SPI_TEMP_PORT_init+0x54>)
    1ba6:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1ba8:	4910      	ldr	r1, [pc, #64]	; (1bec <SPI_TEMP_PORT_init+0x58>)
    1baa:	203b      	movs	r0, #59	; 0x3b
    1bac:	4b10      	ldr	r3, [pc, #64]	; (1bf0 <SPI_TEMP_PORT_init+0x5c>)
    1bae:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1bb0:	2100      	movs	r1, #0
    1bb2:	203a      	movs	r0, #58	; 0x3a
    1bb4:	4b0b      	ldr	r3, [pc, #44]	; (1be4 <SPI_TEMP_PORT_init+0x50>)
    1bb6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1bb8:	2102      	movs	r1, #2
    1bba:	203a      	movs	r0, #58	; 0x3a
    1bbc:	4b0a      	ldr	r3, [pc, #40]	; (1be8 <SPI_TEMP_PORT_init+0x54>)
    1bbe:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1bc0:	490c      	ldr	r1, [pc, #48]	; (1bf4 <SPI_TEMP_PORT_init+0x60>)
    1bc2:	203a      	movs	r0, #58	; 0x3a
    1bc4:	4b0a      	ldr	r3, [pc, #40]	; (1bf0 <SPI_TEMP_PORT_init+0x5c>)
    1bc6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1bc8:	2101      	movs	r1, #1
    1bca:	203c      	movs	r0, #60	; 0x3c
    1bcc:	4b06      	ldr	r3, [pc, #24]	; (1be8 <SPI_TEMP_PORT_init+0x54>)
    1bce:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1bd0:	2100      	movs	r1, #0
    1bd2:	203c      	movs	r0, #60	; 0x3c
    1bd4:	4b08      	ldr	r3, [pc, #32]	; (1bf8 <SPI_TEMP_PORT_init+0x64>)
    1bd6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1bd8:	4908      	ldr	r1, [pc, #32]	; (1bfc <SPI_TEMP_PORT_init+0x68>)
    1bda:	203c      	movs	r0, #60	; 0x3c
    1bdc:	4b04      	ldr	r3, [pc, #16]	; (1bf0 <SPI_TEMP_PORT_init+0x5c>)
    1bde:	4798      	blx	r3
}
    1be0:	bf00      	nop
    1be2:	bd80      	pop	{r7, pc}
    1be4:	0000177d 	.word	0x0000177d
    1be8:	00001745 	.word	0x00001745
    1bec:	003b0003 	.word	0x003b0003
    1bf0:	00001725 	.word	0x00001725
    1bf4:	003a0003 	.word	0x003a0003
    1bf8:	000016f1 	.word	0x000016f1
    1bfc:	003c0003 	.word	0x003c0003

00001c00 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1c00:	b580      	push	{r7, lr}
    1c02:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c04:	2245      	movs	r2, #69	; 0x45
    1c06:	2122      	movs	r1, #34	; 0x22
    1c08:	4806      	ldr	r0, [pc, #24]	; (1c24 <SPI_TEMP_CLOCK_init+0x24>)
    1c0a:	4b07      	ldr	r3, [pc, #28]	; (1c28 <SPI_TEMP_CLOCK_init+0x28>)
    1c0c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c0e:	224a      	movs	r2, #74	; 0x4a
    1c10:	2103      	movs	r1, #3
    1c12:	4804      	ldr	r0, [pc, #16]	; (1c24 <SPI_TEMP_CLOCK_init+0x24>)
    1c14:	4b04      	ldr	r3, [pc, #16]	; (1c28 <SPI_TEMP_CLOCK_init+0x28>)
    1c16:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1c18:	4804      	ldr	r0, [pc, #16]	; (1c2c <SPI_TEMP_CLOCK_init+0x2c>)
    1c1a:	4b05      	ldr	r3, [pc, #20]	; (1c30 <SPI_TEMP_CLOCK_init+0x30>)
    1c1c:	4798      	blx	r3
}
    1c1e:	bf00      	nop
    1c20:	bd80      	pop	{r7, pc}
    1c22:	bf00      	nop
    1c24:	40001c00 	.word	0x40001c00
    1c28:	00000ef1 	.word	0x00000ef1
    1c2c:	40000800 	.word	0x40000800
    1c30:	00001157 	.word	0x00001157

00001c34 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1c34:	b580      	push	{r7, lr}
    1c36:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1c38:	4b05      	ldr	r3, [pc, #20]	; (1c50 <SPI_TEMP_init+0x1c>)
    1c3a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1c3c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1c40:	4804      	ldr	r0, [pc, #16]	; (1c54 <SPI_TEMP_init+0x20>)
    1c42:	4b05      	ldr	r3, [pc, #20]	; (1c58 <SPI_TEMP_init+0x24>)
    1c44:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1c46:	4b05      	ldr	r3, [pc, #20]	; (1c5c <SPI_TEMP_init+0x28>)
    1c48:	4798      	blx	r3
}
    1c4a:	bf00      	nop
    1c4c:	bd80      	pop	{r7, pc}
    1c4e:	bf00      	nop
    1c50:	00001c01 	.word	0x00001c01
    1c54:	20001348 	.word	0x20001348
    1c58:	00002dd5 	.word	0x00002dd5
    1c5c:	00001b95 	.word	0x00001b95

00001c60 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    1c60:	b580      	push	{r7, lr}
    1c62:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1c64:	2100      	movs	r1, #0
    1c66:	2017      	movs	r0, #23
    1c68:	4b07      	ldr	r3, [pc, #28]	; (1c88 <I2C_EXPANDER_PORT_init+0x28>)
    1c6a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1c6c:	4907      	ldr	r1, [pc, #28]	; (1c8c <I2C_EXPANDER_PORT_init+0x2c>)
    1c6e:	2017      	movs	r0, #23
    1c70:	4b07      	ldr	r3, [pc, #28]	; (1c90 <I2C_EXPANDER_PORT_init+0x30>)
    1c72:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1c74:	2100      	movs	r1, #0
    1c76:	2016      	movs	r0, #22
    1c78:	4b03      	ldr	r3, [pc, #12]	; (1c88 <I2C_EXPANDER_PORT_init+0x28>)
    1c7a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1c7c:	4905      	ldr	r1, [pc, #20]	; (1c94 <I2C_EXPANDER_PORT_init+0x34>)
    1c7e:	2016      	movs	r0, #22
    1c80:	4b03      	ldr	r3, [pc, #12]	; (1c90 <I2C_EXPANDER_PORT_init+0x30>)
    1c82:	4798      	blx	r3
}
    1c84:	bf00      	nop
    1c86:	bd80      	pop	{r7, pc}
    1c88:	000016f1 	.word	0x000016f1
    1c8c:	00170003 	.word	0x00170003
    1c90:	00001725 	.word	0x00001725
    1c94:	00160003 	.word	0x00160003

00001c98 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1c98:	b580      	push	{r7, lr}
    1c9a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c9c:	2244      	movs	r2, #68	; 0x44
    1c9e:	2123      	movs	r1, #35	; 0x23
    1ca0:	4806      	ldr	r0, [pc, #24]	; (1cbc <I2C_EXPANDER_CLOCK_init+0x24>)
    1ca2:	4b07      	ldr	r3, [pc, #28]	; (1cc0 <I2C_EXPANDER_CLOCK_init+0x28>)
    1ca4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ca6:	224a      	movs	r2, #74	; 0x4a
    1ca8:	2103      	movs	r1, #3
    1caa:	4804      	ldr	r0, [pc, #16]	; (1cbc <I2C_EXPANDER_CLOCK_init+0x24>)
    1cac:	4b04      	ldr	r3, [pc, #16]	; (1cc0 <I2C_EXPANDER_CLOCK_init+0x28>)
    1cae:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1cb0:	4804      	ldr	r0, [pc, #16]	; (1cc4 <I2C_EXPANDER_CLOCK_init+0x2c>)
    1cb2:	4b05      	ldr	r3, [pc, #20]	; (1cc8 <I2C_EXPANDER_CLOCK_init+0x30>)
    1cb4:	4798      	blx	r3
}
    1cb6:	bf00      	nop
    1cb8:	bd80      	pop	{r7, pc}
    1cba:	bf00      	nop
    1cbc:	40001c00 	.word	0x40001c00
    1cc0:	00000ef1 	.word	0x00000ef1
    1cc4:	40000800 	.word	0x40000800
    1cc8:	00001177 	.word	0x00001177

00001ccc <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1ccc:	b580      	push	{r7, lr}
    1cce:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1cd0:	4b04      	ldr	r3, [pc, #16]	; (1ce4 <I2C_EXPANDER_init+0x18>)
    1cd2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    1cd4:	4904      	ldr	r1, [pc, #16]	; (1ce8 <I2C_EXPANDER_init+0x1c>)
    1cd6:	4805      	ldr	r0, [pc, #20]	; (1cec <I2C_EXPANDER_init+0x20>)
    1cd8:	4b05      	ldr	r3, [pc, #20]	; (1cf0 <I2C_EXPANDER_init+0x24>)
    1cda:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1cdc:	4b05      	ldr	r3, [pc, #20]	; (1cf4 <I2C_EXPANDER_init+0x28>)
    1cde:	4798      	blx	r3
}
    1ce0:	bf00      	nop
    1ce2:	bd80      	pop	{r7, pc}
    1ce4:	00001c99 	.word	0x00001c99
    1ce8:	43000400 	.word	0x43000400
    1cec:	20001448 	.word	0x20001448
    1cf0:	00002ae9 	.word	0x00002ae9
    1cf4:	00001c61 	.word	0x00001c61

00001cf8 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1cf8:	b580      	push	{r7, lr}
    1cfa:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1cfc:	2100      	movs	r1, #0
    1cfe:	2044      	movs	r0, #68	; 0x44
    1d00:	4b11      	ldr	r3, [pc, #68]	; (1d48 <SPI_HI3593_PORT_init+0x50>)
    1d02:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1d04:	2102      	movs	r1, #2
    1d06:	2044      	movs	r0, #68	; 0x44
    1d08:	4b10      	ldr	r3, [pc, #64]	; (1d4c <SPI_HI3593_PORT_init+0x54>)
    1d0a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1d0c:	4910      	ldr	r1, [pc, #64]	; (1d50 <SPI_HI3593_PORT_init+0x58>)
    1d0e:	2044      	movs	r0, #68	; 0x44
    1d10:	4b10      	ldr	r3, [pc, #64]	; (1d54 <SPI_HI3593_PORT_init+0x5c>)
    1d12:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1d14:	2100      	movs	r1, #0
    1d16:	2045      	movs	r0, #69	; 0x45
    1d18:	4b0b      	ldr	r3, [pc, #44]	; (1d48 <SPI_HI3593_PORT_init+0x50>)
    1d1a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1d1c:	2102      	movs	r1, #2
    1d1e:	2045      	movs	r0, #69	; 0x45
    1d20:	4b0a      	ldr	r3, [pc, #40]	; (1d4c <SPI_HI3593_PORT_init+0x54>)
    1d22:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1d24:	490c      	ldr	r1, [pc, #48]	; (1d58 <SPI_HI3593_PORT_init+0x60>)
    1d26:	2045      	movs	r0, #69	; 0x45
    1d28:	4b0a      	ldr	r3, [pc, #40]	; (1d54 <SPI_HI3593_PORT_init+0x5c>)
    1d2a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1d2c:	2101      	movs	r1, #1
    1d2e:	2047      	movs	r0, #71	; 0x47
    1d30:	4b06      	ldr	r3, [pc, #24]	; (1d4c <SPI_HI3593_PORT_init+0x54>)
    1d32:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1d34:	2100      	movs	r1, #0
    1d36:	2047      	movs	r0, #71	; 0x47
    1d38:	4b08      	ldr	r3, [pc, #32]	; (1d5c <SPI_HI3593_PORT_init+0x64>)
    1d3a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1d3c:	4908      	ldr	r1, [pc, #32]	; (1d60 <SPI_HI3593_PORT_init+0x68>)
    1d3e:	2047      	movs	r0, #71	; 0x47
    1d40:	4b04      	ldr	r3, [pc, #16]	; (1d54 <SPI_HI3593_PORT_init+0x5c>)
    1d42:	4798      	blx	r3
}
    1d44:	bf00      	nop
    1d46:	bd80      	pop	{r7, pc}
    1d48:	0000177d 	.word	0x0000177d
    1d4c:	00001745 	.word	0x00001745
    1d50:	00440002 	.word	0x00440002
    1d54:	00001725 	.word	0x00001725
    1d58:	00450002 	.word	0x00450002
    1d5c:	000016f1 	.word	0x000016f1
    1d60:	00470002 	.word	0x00470002

00001d64 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1d64:	b580      	push	{r7, lr}
    1d66:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d68:	2242      	movs	r2, #66	; 0x42
    1d6a:	2124      	movs	r1, #36	; 0x24
    1d6c:	4806      	ldr	r0, [pc, #24]	; (1d88 <SPI_HI3593_CLOCK_init+0x24>)
    1d6e:	4b07      	ldr	r3, [pc, #28]	; (1d8c <SPI_HI3593_CLOCK_init+0x28>)
    1d70:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d72:	224a      	movs	r2, #74	; 0x4a
    1d74:	2103      	movs	r1, #3
    1d76:	4804      	ldr	r0, [pc, #16]	; (1d88 <SPI_HI3593_CLOCK_init+0x24>)
    1d78:	4b04      	ldr	r3, [pc, #16]	; (1d8c <SPI_HI3593_CLOCK_init+0x28>)
    1d7a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1d7c:	4804      	ldr	r0, [pc, #16]	; (1d90 <SPI_HI3593_CLOCK_init+0x2c>)
    1d7e:	4b05      	ldr	r3, [pc, #20]	; (1d94 <SPI_HI3593_CLOCK_init+0x30>)
    1d80:	4798      	blx	r3
}
    1d82:	bf00      	nop
    1d84:	bd80      	pop	{r7, pc}
    1d86:	bf00      	nop
    1d88:	40001c00 	.word	0x40001c00
    1d8c:	00000ef1 	.word	0x00000ef1
    1d90:	40000800 	.word	0x40000800
    1d94:	00001197 	.word	0x00001197

00001d98 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1d98:	b580      	push	{r7, lr}
    1d9a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1d9c:	4b04      	ldr	r3, [pc, #16]	; (1db0 <SPI_HI3593_init+0x18>)
    1d9e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1da0:	4904      	ldr	r1, [pc, #16]	; (1db4 <SPI_HI3593_init+0x1c>)
    1da2:	4805      	ldr	r0, [pc, #20]	; (1db8 <SPI_HI3593_init+0x20>)
    1da4:	4b05      	ldr	r3, [pc, #20]	; (1dbc <SPI_HI3593_init+0x24>)
    1da6:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1da8:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <SPI_HI3593_init+0x28>)
    1daa:	4798      	blx	r3
}
    1dac:	bf00      	nop
    1dae:	bd80      	pop	{r7, pc}
    1db0:	00001d65 	.word	0x00001d65
    1db4:	43000800 	.word	0x43000800
    1db8:	20001330 	.word	0x20001330
    1dbc:	00002dd5 	.word	0x00002dd5
    1dc0:	00001cf9 	.word	0x00001cf9

00001dc4 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1dc8:	2100      	movs	r1, #0
    1dca:	2068      	movs	r0, #104	; 0x68
    1dcc:	4b07      	ldr	r3, [pc, #28]	; (1dec <I2C_EEPROM_PORT_init+0x28>)
    1dce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1dd0:	4907      	ldr	r1, [pc, #28]	; (1df0 <I2C_EEPROM_PORT_init+0x2c>)
    1dd2:	2068      	movs	r0, #104	; 0x68
    1dd4:	4b07      	ldr	r3, [pc, #28]	; (1df4 <I2C_EEPROM_PORT_init+0x30>)
    1dd6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1dd8:	2100      	movs	r1, #0
    1dda:	2069      	movs	r0, #105	; 0x69
    1ddc:	4b03      	ldr	r3, [pc, #12]	; (1dec <I2C_EEPROM_PORT_init+0x28>)
    1dde:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1de0:	4905      	ldr	r1, [pc, #20]	; (1df8 <I2C_EEPROM_PORT_init+0x34>)
    1de2:	2069      	movs	r0, #105	; 0x69
    1de4:	4b03      	ldr	r3, [pc, #12]	; (1df4 <I2C_EEPROM_PORT_init+0x30>)
    1de6:	4798      	blx	r3
}
    1de8:	bf00      	nop
    1dea:	bd80      	pop	{r7, pc}
    1dec:	000016f1 	.word	0x000016f1
    1df0:	00680002 	.word	0x00680002
    1df4:	00001725 	.word	0x00001725
    1df8:	00690002 	.word	0x00690002

00001dfc <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1dfc:	b580      	push	{r7, lr}
    1dfe:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e00:	2248      	movs	r2, #72	; 0x48
    1e02:	2125      	movs	r1, #37	; 0x25
    1e04:	4806      	ldr	r0, [pc, #24]	; (1e20 <I2C_EEPROM_CLOCK_init+0x24>)
    1e06:	4b07      	ldr	r3, [pc, #28]	; (1e24 <I2C_EEPROM_CLOCK_init+0x28>)
    1e08:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e0a:	224a      	movs	r2, #74	; 0x4a
    1e0c:	2103      	movs	r1, #3
    1e0e:	4804      	ldr	r0, [pc, #16]	; (1e20 <I2C_EEPROM_CLOCK_init+0x24>)
    1e10:	4b04      	ldr	r3, [pc, #16]	; (1e24 <I2C_EEPROM_CLOCK_init+0x28>)
    1e12:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1e14:	4804      	ldr	r0, [pc, #16]	; (1e28 <I2C_EEPROM_CLOCK_init+0x2c>)
    1e16:	4b05      	ldr	r3, [pc, #20]	; (1e2c <I2C_EEPROM_CLOCK_init+0x30>)
    1e18:	4798      	blx	r3
}
    1e1a:	bf00      	nop
    1e1c:	bd80      	pop	{r7, pc}
    1e1e:	bf00      	nop
    1e20:	40001c00 	.word	0x40001c00
    1e24:	00000ef1 	.word	0x00000ef1
    1e28:	40000800 	.word	0x40000800
    1e2c:	000011b7 	.word	0x000011b7

00001e30 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1e30:	b580      	push	{r7, lr}
    1e32:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1e34:	4b04      	ldr	r3, [pc, #16]	; (1e48 <I2C_EEPROM_init+0x18>)
    1e36:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    1e38:	4904      	ldr	r1, [pc, #16]	; (1e4c <I2C_EEPROM_init+0x1c>)
    1e3a:	4805      	ldr	r0, [pc, #20]	; (1e50 <I2C_EEPROM_init+0x20>)
    1e3c:	4b05      	ldr	r3, [pc, #20]	; (1e54 <I2C_EEPROM_init+0x24>)
    1e3e:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    1e40:	4b05      	ldr	r3, [pc, #20]	; (1e58 <I2C_EEPROM_init+0x28>)
    1e42:	4798      	blx	r3
}
    1e44:	bf00      	nop
    1e46:	bd80      	pop	{r7, pc}
    1e48:	00001dfd 	.word	0x00001dfd
    1e4c:	43000c00 	.word	0x43000c00
    1e50:	200014a8 	.word	0x200014a8
    1e54:	000029b5 	.word	0x000029b5
    1e58:	00001dc5 	.word	0x00001dc5

00001e5c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1e5c:	b580      	push	{r7, lr}
    1e5e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1e60:	4808      	ldr	r0, [pc, #32]	; (1e84 <TIMER_USB_init+0x28>)
    1e62:	4b09      	ldr	r3, [pc, #36]	; (1e88 <TIMER_USB_init+0x2c>)
    1e64:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e66:	2243      	movs	r2, #67	; 0x43
    1e68:	2109      	movs	r1, #9
    1e6a:	4808      	ldr	r0, [pc, #32]	; (1e8c <TIMER_USB_init+0x30>)
    1e6c:	4b08      	ldr	r3, [pc, #32]	; (1e90 <TIMER_USB_init+0x34>)
    1e6e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1e70:	4b08      	ldr	r3, [pc, #32]	; (1e94 <TIMER_USB_init+0x38>)
    1e72:	4798      	blx	r3
    1e74:	4603      	mov	r3, r0
    1e76:	461a      	mov	r2, r3
    1e78:	4907      	ldr	r1, [pc, #28]	; (1e98 <TIMER_USB_init+0x3c>)
    1e7a:	4808      	ldr	r0, [pc, #32]	; (1e9c <TIMER_USB_init+0x40>)
    1e7c:	4b08      	ldr	r3, [pc, #32]	; (1ea0 <TIMER_USB_init+0x44>)
    1e7e:	4798      	blx	r3
}
    1e80:	bf00      	nop
    1e82:	bd80      	pop	{r7, pc}
    1e84:	40000800 	.word	0x40000800
    1e88:	00001017 	.word	0x00001017
    1e8c:	40001c00 	.word	0x40001c00
    1e90:	00000ef1 	.word	0x00000ef1
    1e94:	00008e85 	.word	0x00008e85
    1e98:	40003800 	.word	0x40003800
    1e9c:	20001428 	.word	0x20001428
    1ea0:	00003065 	.word	0x00003065

00001ea4 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1ea4:	b580      	push	{r7, lr}
    1ea6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1ea8:	4808      	ldr	r0, [pc, #32]	; (1ecc <TIMER_ARINC_init+0x28>)
    1eaa:	4b09      	ldr	r3, [pc, #36]	; (1ed0 <TIMER_ARINC_init+0x2c>)
    1eac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1eae:	2244      	movs	r2, #68	; 0x44
    1eb0:	211a      	movs	r1, #26
    1eb2:	4808      	ldr	r0, [pc, #32]	; (1ed4 <TIMER_ARINC_init+0x30>)
    1eb4:	4b08      	ldr	r3, [pc, #32]	; (1ed8 <TIMER_ARINC_init+0x34>)
    1eb6:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1eb8:	4b08      	ldr	r3, [pc, #32]	; (1edc <TIMER_ARINC_init+0x38>)
    1eba:	4798      	blx	r3
    1ebc:	4603      	mov	r3, r0
    1ebe:	461a      	mov	r2, r3
    1ec0:	4907      	ldr	r1, [pc, #28]	; (1ee0 <TIMER_ARINC_init+0x3c>)
    1ec2:	4808      	ldr	r0, [pc, #32]	; (1ee4 <TIMER_ARINC_init+0x40>)
    1ec4:	4b08      	ldr	r3, [pc, #32]	; (1ee8 <TIMER_ARINC_init+0x44>)
    1ec6:	4798      	blx	r3
}
    1ec8:	bf00      	nop
    1eca:	bd80      	pop	{r7, pc}
    1ecc:	40000800 	.word	0x40000800
    1ed0:	000010d7 	.word	0x000010d7
    1ed4:	40001c00 	.word	0x40001c00
    1ed8:	00000ef1 	.word	0x00000ef1
    1edc:	00008e85 	.word	0x00008e85
    1ee0:	4101a000 	.word	0x4101a000
    1ee4:	20001408 	.word	0x20001408
    1ee8:	00003065 	.word	0x00003065

00001eec <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1eec:	b580      	push	{r7, lr}
    1eee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1ef0:	4808      	ldr	r0, [pc, #32]	; (1f14 <TIMER_MAINTENANCE_init+0x28>)
    1ef2:	4b09      	ldr	r3, [pc, #36]	; (1f18 <TIMER_MAINTENANCE_init+0x2c>)
    1ef4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ef6:	2246      	movs	r2, #70	; 0x46
    1ef8:	211e      	movs	r1, #30
    1efa:	4808      	ldr	r0, [pc, #32]	; (1f1c <TIMER_MAINTENANCE_init+0x30>)
    1efc:	4b08      	ldr	r3, [pc, #32]	; (1f20 <TIMER_MAINTENANCE_init+0x34>)
    1efe:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1f00:	4b08      	ldr	r3, [pc, #32]	; (1f24 <TIMER_MAINTENANCE_init+0x38>)
    1f02:	4798      	blx	r3
    1f04:	4603      	mov	r3, r0
    1f06:	461a      	mov	r2, r3
    1f08:	4907      	ldr	r1, [pc, #28]	; (1f28 <TIMER_MAINTENANCE_init+0x3c>)
    1f0a:	4808      	ldr	r0, [pc, #32]	; (1f2c <TIMER_MAINTENANCE_init+0x40>)
    1f0c:	4b08      	ldr	r3, [pc, #32]	; (1f30 <TIMER_MAINTENANCE_init+0x44>)
    1f0e:	4798      	blx	r3
}
    1f10:	bf00      	nop
    1f12:	bd80      	pop	{r7, pc}
    1f14:	40000800 	.word	0x40000800
    1f18:	000010f7 	.word	0x000010f7
    1f1c:	40001c00 	.word	0x40001c00
    1f20:	00000ef1 	.word	0x00000ef1
    1f24:	00008e85 	.word	0x00008e85
    1f28:	42001400 	.word	0x42001400
    1f2c:	20001360 	.word	0x20001360
    1f30:	00003065 	.word	0x00003065

00001f34 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1f34:	b580      	push	{r7, lr}
    1f36:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1f38:	4808      	ldr	r0, [pc, #32]	; (1f5c <TIMER_INTERFACE_init+0x28>)
    1f3a:	4b09      	ldr	r3, [pc, #36]	; (1f60 <TIMER_INTERFACE_init+0x2c>)
    1f3c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f3e:	2246      	movs	r2, #70	; 0x46
    1f40:	211e      	movs	r1, #30
    1f42:	4808      	ldr	r0, [pc, #32]	; (1f64 <TIMER_INTERFACE_init+0x30>)
    1f44:	4b08      	ldr	r3, [pc, #32]	; (1f68 <TIMER_INTERFACE_init+0x34>)
    1f46:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1f48:	4b08      	ldr	r3, [pc, #32]	; (1f6c <TIMER_INTERFACE_init+0x38>)
    1f4a:	4798      	blx	r3
    1f4c:	4603      	mov	r3, r0
    1f4e:	461a      	mov	r2, r3
    1f50:	4907      	ldr	r1, [pc, #28]	; (1f70 <TIMER_INTERFACE_init+0x3c>)
    1f52:	4808      	ldr	r0, [pc, #32]	; (1f74 <TIMER_INTERFACE_init+0x40>)
    1f54:	4b08      	ldr	r3, [pc, #32]	; (1f78 <TIMER_INTERFACE_init+0x44>)
    1f56:	4798      	blx	r3
}
    1f58:	bf00      	nop
    1f5a:	bd80      	pop	{r7, pc}
    1f5c:	40000800 	.word	0x40000800
    1f60:	00001117 	.word	0x00001117
    1f64:	40001c00 	.word	0x40001c00
    1f68:	00000ef1 	.word	0x00000ef1
    1f6c:	00008e85 	.word	0x00008e85
    1f70:	42001800 	.word	0x42001800
    1f74:	200013a4 	.word	0x200013a4
    1f78:	00003065 	.word	0x00003065

00001f7c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1f7c:	b580      	push	{r7, lr}
    1f7e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1f80:	4808      	ldr	r0, [pc, #32]	; (1fa4 <TIMER_EVENT_init+0x28>)
    1f82:	4b09      	ldr	r3, [pc, #36]	; (1fa8 <TIMER_EVENT_init+0x2c>)
    1f84:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f86:	2246      	movs	r2, #70	; 0x46
    1f88:	2127      	movs	r1, #39	; 0x27
    1f8a:	4808      	ldr	r0, [pc, #32]	; (1fac <TIMER_EVENT_init+0x30>)
    1f8c:	4b08      	ldr	r3, [pc, #32]	; (1fb0 <TIMER_EVENT_init+0x34>)
    1f8e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1f90:	4b08      	ldr	r3, [pc, #32]	; (1fb4 <TIMER_EVENT_init+0x38>)
    1f92:	4798      	blx	r3
    1f94:	4603      	mov	r3, r0
    1f96:	461a      	mov	r2, r3
    1f98:	4907      	ldr	r1, [pc, #28]	; (1fb8 <TIMER_EVENT_init+0x3c>)
    1f9a:	4808      	ldr	r0, [pc, #32]	; (1fbc <TIMER_EVENT_init+0x40>)
    1f9c:	4b08      	ldr	r3, [pc, #32]	; (1fc0 <TIMER_EVENT_init+0x44>)
    1f9e:	4798      	blx	r3
}
    1fa0:	bf00      	nop
    1fa2:	bd80      	pop	{r7, pc}
    1fa4:	40000800 	.word	0x40000800
    1fa8:	000011d7 	.word	0x000011d7
    1fac:	40001c00 	.word	0x40001c00
    1fb0:	00000ef1 	.word	0x00000ef1
    1fb4:	00008e85 	.word	0x00008e85
    1fb8:	43001400 	.word	0x43001400
    1fbc:	20001384 	.word	0x20001384
    1fc0:	00003065 	.word	0x00003065

00001fc4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1fc4:	b580      	push	{r7, lr}
    1fc6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    1fc8:	4902      	ldr	r1, [pc, #8]	; (1fd4 <LIVE_PULSE_PORT_init+0x10>)
    1fca:	2021      	movs	r0, #33	; 0x21
    1fcc:	4b02      	ldr	r3, [pc, #8]	; (1fd8 <LIVE_PULSE_PORT_init+0x14>)
    1fce:	4798      	blx	r3
}
    1fd0:	bf00      	nop
    1fd2:	bd80      	pop	{r7, pc}
    1fd4:	00210004 	.word	0x00210004
    1fd8:	00001725 	.word	0x00001725

00001fdc <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1fdc:	b580      	push	{r7, lr}
    1fde:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1fe0:	4804      	ldr	r0, [pc, #16]	; (1ff4 <LIVE_PULSE_CLOCK_init+0x18>)
    1fe2:	4b05      	ldr	r3, [pc, #20]	; (1ff8 <LIVE_PULSE_CLOCK_init+0x1c>)
    1fe4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1fe6:	2240      	movs	r2, #64	; 0x40
    1fe8:	2127      	movs	r1, #39	; 0x27
    1fea:	4804      	ldr	r0, [pc, #16]	; (1ffc <LIVE_PULSE_CLOCK_init+0x20>)
    1fec:	4b04      	ldr	r3, [pc, #16]	; (2000 <LIVE_PULSE_CLOCK_init+0x24>)
    1fee:	4798      	blx	r3
}
    1ff0:	bf00      	nop
    1ff2:	bd80      	pop	{r7, pc}
    1ff4:	40000800 	.word	0x40000800
    1ff8:	000011f7 	.word	0x000011f7
    1ffc:	40001c00 	.word	0x40001c00
    2000:	00000ef1 	.word	0x00000ef1

00002004 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    2004:	b580      	push	{r7, lr}
    2006:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2008:	4b06      	ldr	r3, [pc, #24]	; (2024 <LIVE_PULSE_init+0x20>)
    200a:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    200c:	4b06      	ldr	r3, [pc, #24]	; (2028 <LIVE_PULSE_init+0x24>)
    200e:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    2010:	4b06      	ldr	r3, [pc, #24]	; (202c <LIVE_PULSE_init+0x28>)
    2012:	4798      	blx	r3
    2014:	4603      	mov	r3, r0
    2016:	461a      	mov	r2, r3
    2018:	4905      	ldr	r1, [pc, #20]	; (2030 <LIVE_PULSE_init+0x2c>)
    201a:	4806      	ldr	r0, [pc, #24]	; (2034 <LIVE_PULSE_init+0x30>)
    201c:	4b06      	ldr	r3, [pc, #24]	; (2038 <LIVE_PULSE_init+0x34>)
    201e:	4798      	blx	r3
}
    2020:	bf00      	nop
    2022:	bd80      	pop	{r7, pc}
    2024:	00001fdd 	.word	0x00001fdd
    2028:	00001fc5 	.word	0x00001fc5
    202c:	00008e99 	.word	0x00008e99
    2030:	43001800 	.word	0x43001800
    2034:	200013c4 	.word	0x200013c4
    2038:	00002bc5 	.word	0x00002bc5

0000203c <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    203c:	b580      	push	{r7, lr}
    203e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    2040:	4804      	ldr	r0, [pc, #16]	; (2054 <TIMER_HVAC_CLOCK_init+0x18>)
    2042:	4b05      	ldr	r3, [pc, #20]	; (2058 <TIMER_HVAC_CLOCK_init+0x1c>)
    2044:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2046:	2244      	movs	r2, #68	; 0x44
    2048:	2119      	movs	r1, #25
    204a:	4804      	ldr	r0, [pc, #16]	; (205c <TIMER_HVAC_CLOCK_init+0x20>)
    204c:	4b04      	ldr	r3, [pc, #16]	; (2060 <TIMER_HVAC_CLOCK_init+0x24>)
    204e:	4798      	blx	r3
}
    2050:	bf00      	nop
    2052:	bd80      	pop	{r7, pc}
    2054:	40000800 	.word	0x40000800
    2058:	00001097 	.word	0x00001097
    205c:	40001c00 	.word	0x40001c00
    2060:	00000ef1 	.word	0x00000ef1

00002064 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    2064:	b580      	push	{r7, lr}
    2066:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    2068:	4b05      	ldr	r3, [pc, #20]	; (2080 <TIMER_HVAC_init+0x1c>)
    206a:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    206c:	4b05      	ldr	r3, [pc, #20]	; (2084 <TIMER_HVAC_init+0x20>)
    206e:	4798      	blx	r3
    2070:	4603      	mov	r3, r0
    2072:	461a      	mov	r2, r3
    2074:	4904      	ldr	r1, [pc, #16]	; (2088 <TIMER_HVAC_init+0x24>)
    2076:	4805      	ldr	r0, [pc, #20]	; (208c <TIMER_HVAC_init+0x28>)
    2078:	4b05      	ldr	r3, [pc, #20]	; (2090 <TIMER_HVAC_init+0x2c>)
    207a:	4798      	blx	r3
}
    207c:	bf00      	nop
    207e:	bd80      	pop	{r7, pc}
    2080:	0000203d 	.word	0x0000203d
    2084:	00008245 	.word	0x00008245
    2088:	41016000 	.word	0x41016000
    208c:	20001488 	.word	0x20001488
    2090:	00003065 	.word	0x00003065

00002094 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    2094:	b580      	push	{r7, lr}
    2096:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    2098:	4804      	ldr	r0, [pc, #16]	; (20ac <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    209a:	4b05      	ldr	r3, [pc, #20]	; (20b0 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    209c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    209e:	2244      	movs	r2, #68	; 0x44
    20a0:	2119      	movs	r1, #25
    20a2:	4804      	ldr	r0, [pc, #16]	; (20b4 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    20a4:	4b04      	ldr	r3, [pc, #16]	; (20b8 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    20a6:	4798      	blx	r3
}
    20a8:	bf00      	nop
    20aa:	bd80      	pop	{r7, pc}
    20ac:	40000800 	.word	0x40000800
    20b0:	000010b7 	.word	0x000010b7
    20b4:	40001c00 	.word	0x40001c00
    20b8:	00000ef1 	.word	0x00000ef1

000020bc <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    20bc:	b580      	push	{r7, lr}
    20be:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    20c0:	4b05      	ldr	r3, [pc, #20]	; (20d8 <TIMER_TEMPERATURES_init+0x1c>)
    20c2:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    20c4:	4b05      	ldr	r3, [pc, #20]	; (20dc <TIMER_TEMPERATURES_init+0x20>)
    20c6:	4798      	blx	r3
    20c8:	4603      	mov	r3, r0
    20ca:	461a      	mov	r2, r3
    20cc:	4904      	ldr	r1, [pc, #16]	; (20e0 <TIMER_TEMPERATURES_init+0x24>)
    20ce:	4805      	ldr	r0, [pc, #20]	; (20e4 <TIMER_TEMPERATURES_init+0x28>)
    20d0:	4b05      	ldr	r3, [pc, #20]	; (20e8 <TIMER_TEMPERATURES_init+0x2c>)
    20d2:	4798      	blx	r3
}
    20d4:	bf00      	nop
    20d6:	bd80      	pop	{r7, pc}
    20d8:	00002095 	.word	0x00002095
    20dc:	00008245 	.word	0x00008245
    20e0:	41018000 	.word	0x41018000
    20e4:	20001310 	.word	0x20001310
    20e8:	00003065 	.word	0x00003065

000020ec <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    20ec:	b580      	push	{r7, lr}
    20ee:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    20f0:	2102      	movs	r1, #2
    20f2:	2018      	movs	r0, #24
    20f4:	4b0f      	ldr	r3, [pc, #60]	; (2134 <CDCUSB_PORT_init+0x48>)
    20f6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    20f8:	2100      	movs	r1, #0
    20fa:	2018      	movs	r0, #24
    20fc:	4b0e      	ldr	r3, [pc, #56]	; (2138 <CDCUSB_PORT_init+0x4c>)
    20fe:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2100:	2100      	movs	r1, #0
    2102:	2018      	movs	r0, #24
    2104:	4b0d      	ldr	r3, [pc, #52]	; (213c <CDCUSB_PORT_init+0x50>)
    2106:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2108:	490d      	ldr	r1, [pc, #52]	; (2140 <CDCUSB_PORT_init+0x54>)
    210a:	2018      	movs	r0, #24
    210c:	4b0d      	ldr	r3, [pc, #52]	; (2144 <CDCUSB_PORT_init+0x58>)
    210e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2110:	2102      	movs	r1, #2
    2112:	2019      	movs	r0, #25
    2114:	4b07      	ldr	r3, [pc, #28]	; (2134 <CDCUSB_PORT_init+0x48>)
    2116:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2118:	2100      	movs	r1, #0
    211a:	2019      	movs	r0, #25
    211c:	4b06      	ldr	r3, [pc, #24]	; (2138 <CDCUSB_PORT_init+0x4c>)
    211e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2120:	2100      	movs	r1, #0
    2122:	2019      	movs	r0, #25
    2124:	4b05      	ldr	r3, [pc, #20]	; (213c <CDCUSB_PORT_init+0x50>)
    2126:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2128:	4907      	ldr	r1, [pc, #28]	; (2148 <CDCUSB_PORT_init+0x5c>)
    212a:	2019      	movs	r0, #25
    212c:	4b05      	ldr	r3, [pc, #20]	; (2144 <CDCUSB_PORT_init+0x58>)
    212e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2130:	bf00      	nop
    2132:	bd80      	pop	{r7, pc}
    2134:	00001745 	.word	0x00001745
    2138:	0000177d 	.word	0x0000177d
    213c:	000016f1 	.word	0x000016f1
    2140:	00180007 	.word	0x00180007
    2144:	00001725 	.word	0x00001725
    2148:	00190007 	.word	0x00190007

0000214c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    214c:	b580      	push	{r7, lr}
    214e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2150:	2242      	movs	r2, #66	; 0x42
    2152:	210a      	movs	r1, #10
    2154:	4805      	ldr	r0, [pc, #20]	; (216c <CDCUSB_CLOCK_init+0x20>)
    2156:	4b06      	ldr	r3, [pc, #24]	; (2170 <CDCUSB_CLOCK_init+0x24>)
    2158:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    215a:	4806      	ldr	r0, [pc, #24]	; (2174 <CDCUSB_CLOCK_init+0x28>)
    215c:	4b06      	ldr	r3, [pc, #24]	; (2178 <CDCUSB_CLOCK_init+0x2c>)
    215e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2160:	4804      	ldr	r0, [pc, #16]	; (2174 <CDCUSB_CLOCK_init+0x28>)
    2162:	4b06      	ldr	r3, [pc, #24]	; (217c <CDCUSB_CLOCK_init+0x30>)
    2164:	4798      	blx	r3
}
    2166:	bf00      	nop
    2168:	bd80      	pop	{r7, pc}
    216a:	bf00      	nop
    216c:	40001c00 	.word	0x40001c00
    2170:	00000ef1 	.word	0x00000ef1
    2174:	40000800 	.word	0x40000800
    2178:	00000f17 	.word	0x00000f17
    217c:	00001037 	.word	0x00001037

00002180 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2180:	b580      	push	{r7, lr}
    2182:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2184:	4b03      	ldr	r3, [pc, #12]	; (2194 <CDCUSB_init+0x14>)
    2186:	4798      	blx	r3
	usb_d_init();
    2188:	4b03      	ldr	r3, [pc, #12]	; (2198 <CDCUSB_init+0x18>)
    218a:	4798      	blx	r3
	CDCUSB_PORT_init();
    218c:	4b03      	ldr	r3, [pc, #12]	; (219c <CDCUSB_init+0x1c>)
    218e:	4798      	blx	r3
}
    2190:	bf00      	nop
    2192:	bd80      	pop	{r7, pc}
    2194:	0000214d 	.word	0x0000214d
    2198:	000038c1 	.word	0x000038c1
    219c:	000020ed 	.word	0x000020ed

000021a0 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    21a0:	b580      	push	{r7, lr}
    21a2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    21a4:	4802      	ldr	r0, [pc, #8]	; (21b0 <WATCHDOG_CLOCK_init+0x10>)
    21a6:	4b03      	ldr	r3, [pc, #12]	; (21b4 <WATCHDOG_CLOCK_init+0x14>)
    21a8:	4798      	blx	r3
}
    21aa:	bf00      	nop
    21ac:	bd80      	pop	{r7, pc}
    21ae:	bf00      	nop
    21b0:	40000800 	.word	0x40000800
    21b4:	00000f97 	.word	0x00000f97

000021b8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    21b8:	b580      	push	{r7, lr}
    21ba:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    21bc:	4b03      	ldr	r3, [pc, #12]	; (21cc <WATCHDOG_init+0x14>)
    21be:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    21c0:	4903      	ldr	r1, [pc, #12]	; (21d0 <WATCHDOG_init+0x18>)
    21c2:	4804      	ldr	r0, [pc, #16]	; (21d4 <WATCHDOG_init+0x1c>)
    21c4:	4b04      	ldr	r3, [pc, #16]	; (21d8 <WATCHDOG_init+0x20>)
    21c6:	4798      	blx	r3
}
    21c8:	bf00      	nop
    21ca:	bd80      	pop	{r7, pc}
    21cc:	000021a1 	.word	0x000021a1
    21d0:	40002000 	.word	0x40002000
    21d4:	20001508 	.word	0x20001508
    21d8:	000017c5 	.word	0x000017c5

000021dc <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    21dc:	b580      	push	{r7, lr}
    21de:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    21e0:	4904      	ldr	r1, [pc, #16]	; (21f4 <CAN_CCU_PORT_init+0x18>)
    21e2:	202d      	movs	r0, #45	; 0x2d
    21e4:	4b04      	ldr	r3, [pc, #16]	; (21f8 <CAN_CCU_PORT_init+0x1c>)
    21e6:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    21e8:	4904      	ldr	r1, [pc, #16]	; (21fc <CAN_CCU_PORT_init+0x20>)
    21ea:	202c      	movs	r0, #44	; 0x2c
    21ec:	4b02      	ldr	r3, [pc, #8]	; (21f8 <CAN_CCU_PORT_init+0x1c>)
    21ee:	4798      	blx	r3
}
    21f0:	bf00      	nop
    21f2:	bd80      	pop	{r7, pc}
    21f4:	002d0007 	.word	0x002d0007
    21f8:	00001725 	.word	0x00001725
    21fc:	002c0007 	.word	0x002c0007

00002200 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    2200:	b580      	push	{r7, lr}
    2202:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    2204:	4807      	ldr	r0, [pc, #28]	; (2224 <CAN_CCU_init+0x24>)
    2206:	4b08      	ldr	r3, [pc, #32]	; (2228 <CAN_CCU_init+0x28>)
    2208:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    220a:	2243      	movs	r2, #67	; 0x43
    220c:	211c      	movs	r1, #28
    220e:	4807      	ldr	r0, [pc, #28]	; (222c <CAN_CCU_init+0x2c>)
    2210:	4b07      	ldr	r3, [pc, #28]	; (2230 <CAN_CCU_init+0x30>)
    2212:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2214:	4907      	ldr	r1, [pc, #28]	; (2234 <CAN_CCU_init+0x34>)
    2216:	4808      	ldr	r0, [pc, #32]	; (2238 <CAN_CCU_init+0x38>)
    2218:	4b08      	ldr	r3, [pc, #32]	; (223c <CAN_CCU_init+0x3c>)
    221a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    221c:	4b08      	ldr	r3, [pc, #32]	; (2240 <CAN_CCU_init+0x40>)
    221e:	4798      	blx	r3
}
    2220:	bf00      	nop
    2222:	bd80      	pop	{r7, pc}
    2224:	40000800 	.word	0x40000800
    2228:	00000f57 	.word	0x00000f57
    222c:	40001c00 	.word	0x40001c00
    2230:	00000ef1 	.word	0x00000ef1
    2234:	42000400 	.word	0x42000400
    2238:	200013e0 	.word	0x200013e0
    223c:	0000249d 	.word	0x0000249d
    2240:	000021dd 	.word	0x000021dd

00002244 <system_init>:

void system_init(void)
{
    2244:	b580      	push	{r7, lr}
    2246:	af00      	add	r7, sp, #0
	init_mcu();
    2248:	4b5e      	ldr	r3, [pc, #376]	; (23c4 <system_init+0x180>)
    224a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    224c:	2100      	movs	r1, #0
    224e:	2007      	movs	r0, #7
    2250:	4b5d      	ldr	r3, [pc, #372]	; (23c8 <system_init+0x184>)
    2252:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    2254:	2102      	movs	r1, #2
    2256:	2007      	movs	r0, #7
    2258:	4b5c      	ldr	r3, [pc, #368]	; (23cc <system_init+0x188>)
    225a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    225c:	f04f 31ff 	mov.w	r1, #4294967295
    2260:	2007      	movs	r0, #7
    2262:	4b5b      	ldr	r3, [pc, #364]	; (23d0 <system_init+0x18c>)
    2264:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    2266:	2101      	movs	r1, #1
    2268:	200f      	movs	r0, #15
    226a:	4b57      	ldr	r3, [pc, #348]	; (23c8 <system_init+0x184>)
    226c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    226e:	2102      	movs	r1, #2
    2270:	200f      	movs	r0, #15
    2272:	4b56      	ldr	r3, [pc, #344]	; (23cc <system_init+0x188>)
    2274:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    2276:	f04f 31ff 	mov.w	r1, #4294967295
    227a:	200f      	movs	r0, #15
    227c:	4b54      	ldr	r3, [pc, #336]	; (23d0 <system_init+0x18c>)
    227e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2280:	2101      	movs	r1, #1
    2282:	2013      	movs	r0, #19
    2284:	4b50      	ldr	r3, [pc, #320]	; (23c8 <system_init+0x184>)
    2286:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2288:	2102      	movs	r1, #2
    228a:	2013      	movs	r0, #19
    228c:	4b4f      	ldr	r3, [pc, #316]	; (23cc <system_init+0x188>)
    228e:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2290:	f04f 31ff 	mov.w	r1, #4294967295
    2294:	2013      	movs	r0, #19
    2296:	4b4e      	ldr	r3, [pc, #312]	; (23d0 <system_init+0x18c>)
    2298:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    229a:	2101      	movs	r1, #1
    229c:	201b      	movs	r0, #27
    229e:	4b4a      	ldr	r3, [pc, #296]	; (23c8 <system_init+0x184>)
    22a0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    22a2:	2102      	movs	r1, #2
    22a4:	201b      	movs	r0, #27
    22a6:	4b49      	ldr	r3, [pc, #292]	; (23cc <system_init+0x188>)
    22a8:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    22aa:	f04f 31ff 	mov.w	r1, #4294967295
    22ae:	201b      	movs	r0, #27
    22b0:	4b47      	ldr	r3, [pc, #284]	; (23d0 <system_init+0x18c>)
    22b2:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    22b4:	2101      	movs	r1, #1
    22b6:	2027      	movs	r0, #39	; 0x27
    22b8:	4b44      	ldr	r3, [pc, #272]	; (23cc <system_init+0x188>)
    22ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    22bc:	2102      	movs	r1, #2
    22be:	2027      	movs	r0, #39	; 0x27
    22c0:	4b44      	ldr	r3, [pc, #272]	; (23d4 <system_init+0x190>)
    22c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    22c4:	f04f 31ff 	mov.w	r1, #4294967295
    22c8:	2027      	movs	r0, #39	; 0x27
    22ca:	4b41      	ldr	r3, [pc, #260]	; (23d0 <system_init+0x18c>)
    22cc:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    22ce:	2101      	movs	r1, #1
    22d0:	203d      	movs	r0, #61	; 0x3d
    22d2:	4b3d      	ldr	r3, [pc, #244]	; (23c8 <system_init+0x184>)
    22d4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    22d6:	2102      	movs	r1, #2
    22d8:	203d      	movs	r0, #61	; 0x3d
    22da:	4b3c      	ldr	r3, [pc, #240]	; (23cc <system_init+0x188>)
    22dc:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    22de:	f04f 31ff 	mov.w	r1, #4294967295
    22e2:	203d      	movs	r0, #61	; 0x3d
    22e4:	4b3a      	ldr	r3, [pc, #232]	; (23d0 <system_init+0x18c>)
    22e6:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    22e8:	2101      	movs	r1, #1
    22ea:	203f      	movs	r0, #63	; 0x3f
    22ec:	4b37      	ldr	r3, [pc, #220]	; (23cc <system_init+0x188>)
    22ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    22f0:	2101      	movs	r1, #1
    22f2:	203f      	movs	r0, #63	; 0x3f
    22f4:	4b37      	ldr	r3, [pc, #220]	; (23d4 <system_init+0x190>)
    22f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    22f8:	f04f 31ff 	mov.w	r1, #4294967295
    22fc:	203f      	movs	r0, #63	; 0x3f
    22fe:	4b34      	ldr	r3, [pc, #208]	; (23d0 <system_init+0x18c>)
    2300:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    2302:	2100      	movs	r1, #0
    2304:	204d      	movs	r0, #77	; 0x4d
    2306:	4b30      	ldr	r3, [pc, #192]	; (23c8 <system_init+0x184>)
    2308:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    230a:	2102      	movs	r1, #2
    230c:	204d      	movs	r0, #77	; 0x4d
    230e:	4b2f      	ldr	r3, [pc, #188]	; (23cc <system_init+0x188>)
    2310:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    2312:	f04f 31ff 	mov.w	r1, #4294967295
    2316:	204d      	movs	r0, #77	; 0x4d
    2318:	4b2d      	ldr	r3, [pc, #180]	; (23d0 <system_init+0x18c>)
    231a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    231c:	2101      	movs	r1, #1
    231e:	204e      	movs	r0, #78	; 0x4e
    2320:	4b29      	ldr	r3, [pc, #164]	; (23c8 <system_init+0x184>)
    2322:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2324:	2102      	movs	r1, #2
    2326:	204e      	movs	r0, #78	; 0x4e
    2328:	4b28      	ldr	r3, [pc, #160]	; (23cc <system_init+0x188>)
    232a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    232c:	f04f 31ff 	mov.w	r1, #4294967295
    2330:	204e      	movs	r0, #78	; 0x4e
    2332:	4b27      	ldr	r3, [pc, #156]	; (23d0 <system_init+0x18c>)
    2334:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    2336:	2100      	movs	r1, #0
    2338:	204f      	movs	r0, #79	; 0x4f
    233a:	4b23      	ldr	r3, [pc, #140]	; (23c8 <system_init+0x184>)
    233c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    233e:	2102      	movs	r1, #2
    2340:	204f      	movs	r0, #79	; 0x4f
    2342:	4b22      	ldr	r3, [pc, #136]	; (23cc <system_init+0x188>)
    2344:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    2346:	f04f 31ff 	mov.w	r1, #4294967295
    234a:	204f      	movs	r0, #79	; 0x4f
    234c:	4b20      	ldr	r3, [pc, #128]	; (23d0 <system_init+0x18c>)
    234e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2350:	2100      	movs	r1, #0
    2352:	2052      	movs	r0, #82	; 0x52
    2354:	4b1c      	ldr	r3, [pc, #112]	; (23c8 <system_init+0x184>)
    2356:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2358:	2102      	movs	r1, #2
    235a:	2052      	movs	r0, #82	; 0x52
    235c:	4b1b      	ldr	r3, [pc, #108]	; (23cc <system_init+0x188>)
    235e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2360:	f04f 31ff 	mov.w	r1, #4294967295
    2364:	2052      	movs	r0, #82	; 0x52
    2366:	4b1a      	ldr	r3, [pc, #104]	; (23d0 <system_init+0x18c>)
    2368:	4798      	blx	r3

	CRC_CALC_init();
    236a:	4b1b      	ldr	r3, [pc, #108]	; (23d8 <system_init+0x194>)
    236c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    236e:	4b1b      	ldr	r3, [pc, #108]	; (23dc <system_init+0x198>)
    2370:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2372:	4b1b      	ldr	r3, [pc, #108]	; (23e0 <system_init+0x19c>)
    2374:	4798      	blx	r3

	QSPI_N25Q256_init();
    2376:	4b1b      	ldr	r3, [pc, #108]	; (23e4 <system_init+0x1a0>)
    2378:	4798      	blx	r3

	DATETIME_CLOCK_init();
    237a:	4b1b      	ldr	r3, [pc, #108]	; (23e8 <system_init+0x1a4>)
    237c:	4798      	blx	r3

	I2C_SHARED_init();
    237e:	4b1b      	ldr	r3, [pc, #108]	; (23ec <system_init+0x1a8>)
    2380:	4798      	blx	r3

	SPI_TEMP_init();
    2382:	4b1b      	ldr	r3, [pc, #108]	; (23f0 <system_init+0x1ac>)
    2384:	4798      	blx	r3

	I2C_EXPANDER_init();
    2386:	4b1b      	ldr	r3, [pc, #108]	; (23f4 <system_init+0x1b0>)
    2388:	4798      	blx	r3

	SPI_HI3593_init();
    238a:	4b1b      	ldr	r3, [pc, #108]	; (23f8 <system_init+0x1b4>)
    238c:	4798      	blx	r3

	I2C_EEPROM_init();
    238e:	4b1b      	ldr	r3, [pc, #108]	; (23fc <system_init+0x1b8>)
    2390:	4798      	blx	r3

	TIMER_USB_init();
    2392:	4b1b      	ldr	r3, [pc, #108]	; (2400 <system_init+0x1bc>)
    2394:	4798      	blx	r3
	TIMER_ARINC_init();
    2396:	4b1b      	ldr	r3, [pc, #108]	; (2404 <system_init+0x1c0>)
    2398:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    239a:	4b1b      	ldr	r3, [pc, #108]	; (2408 <system_init+0x1c4>)
    239c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    239e:	4b1b      	ldr	r3, [pc, #108]	; (240c <system_init+0x1c8>)
    23a0:	4798      	blx	r3
	TIMER_EVENT_init();
    23a2:	4b1b      	ldr	r3, [pc, #108]	; (2410 <system_init+0x1cc>)
    23a4:	4798      	blx	r3
	LIVE_PULSE_init();
    23a6:	4b1b      	ldr	r3, [pc, #108]	; (2414 <system_init+0x1d0>)
    23a8:	4798      	blx	r3

	TIMER_HVAC_init();
    23aa:	4b1b      	ldr	r3, [pc, #108]	; (2418 <system_init+0x1d4>)
    23ac:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    23ae:	4b1b      	ldr	r3, [pc, #108]	; (241c <system_init+0x1d8>)
    23b0:	4798      	blx	r3

	CDCUSB_init();
    23b2:	4b1b      	ldr	r3, [pc, #108]	; (2420 <system_init+0x1dc>)
    23b4:	4798      	blx	r3

	WATCHDOG_init();
    23b6:	4b1b      	ldr	r3, [pc, #108]	; (2424 <system_init+0x1e0>)
    23b8:	4798      	blx	r3
	CAN_CCU_init();
    23ba:	4b1b      	ldr	r3, [pc, #108]	; (2428 <system_init+0x1e4>)
    23bc:	4798      	blx	r3
}
    23be:	bf00      	nop
    23c0:	bd80      	pop	{r7, pc}
    23c2:	bf00      	nop
    23c4:	000017b5 	.word	0x000017b5
    23c8:	0000177d 	.word	0x0000177d
    23cc:	00001745 	.word	0x00001745
    23d0:	00001725 	.word	0x00001725
    23d4:	000016f1 	.word	0x000016f1
    23d8:	00001815 	.word	0x00001815
    23dc:	00001841 	.word	0x00001841
    23e0:	0000194d 	.word	0x0000194d
    23e4:	00001a95 	.word	0x00001a95
    23e8:	00001ad9 	.word	0x00001ad9
    23ec:	00001b69 	.word	0x00001b69
    23f0:	00001c35 	.word	0x00001c35
    23f4:	00001ccd 	.word	0x00001ccd
    23f8:	00001d99 	.word	0x00001d99
    23fc:	00001e31 	.word	0x00001e31
    2400:	00001e5d 	.word	0x00001e5d
    2404:	00001ea5 	.word	0x00001ea5
    2408:	00001eed 	.word	0x00001eed
    240c:	00001f35 	.word	0x00001f35
    2410:	00001f7d 	.word	0x00001f7d
    2414:	00002005 	.word	0x00002005
    2418:	00002065 	.word	0x00002065
    241c:	000020bd 	.word	0x000020bd
    2420:	00002181 	.word	0x00002181
    2424:	000021b9 	.word	0x000021b9
    2428:	00002201 	.word	0x00002201

0000242c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    242c:	b580      	push	{r7, lr}
    242e:	b084      	sub	sp, #16
    2430:	af00      	add	r7, sp, #0
    2432:	6078      	str	r0, [r7, #4]
    2434:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    2436:	2300      	movs	r3, #0
    2438:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    243a:	687b      	ldr	r3, [r7, #4]
    243c:	2b00      	cmp	r3, #0
    243e:	bf14      	ite	ne
    2440:	2301      	movne	r3, #1
    2442:	2300      	moveq	r3, #0
    2444:	b2db      	uxtb	r3, r3
    2446:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    244a:	4911      	ldr	r1, [pc, #68]	; (2490 <calendar_init+0x64>)
    244c:	4618      	mov	r0, r3
    244e:	4b11      	ldr	r3, [pc, #68]	; (2494 <calendar_init+0x68>)
    2450:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    2452:	687b      	ldr	r3, [r7, #4]
    2454:	681a      	ldr	r2, [r3, #0]
    2456:	683b      	ldr	r3, [r7, #0]
    2458:	429a      	cmp	r2, r3
    245a:	d101      	bne.n	2460 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    245c:	2300      	movs	r3, #0
    245e:	e013      	b.n	2488 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	681b      	ldr	r3, [r3, #0]
    2464:	2b00      	cmp	r3, #0
    2466:	d002      	beq.n	246e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2468:	f06f 0311 	mvn.w	r3, #17
    246c:	e00c      	b.n	2488 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	683a      	ldr	r2, [r7, #0]
    2472:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2474:	687b      	ldr	r3, [r7, #4]
    2476:	4618      	mov	r0, r3
    2478:	4b07      	ldr	r3, [pc, #28]	; (2498 <calendar_init+0x6c>)
    247a:	4798      	blx	r3
    247c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    247e:	687b      	ldr	r3, [r7, #4]
    2480:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2484:	619a      	str	r2, [r3, #24]

	return ret;
    2486:	68fb      	ldr	r3, [r7, #12]
}
    2488:	4618      	mov	r0, r3
    248a:	3710      	adds	r7, #16
    248c:	46bd      	mov	sp, r7
    248e:	bd80      	pop	{r7, pc}
    2490:	0000fe48 	.word	0x0000fe48
    2494:	00003e69 	.word	0x00003e69
    2498:	000061f1 	.word	0x000061f1

0000249c <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    249c:	b580      	push	{r7, lr}
    249e:	b084      	sub	sp, #16
    24a0:	af00      	add	r7, sp, #0
    24a2:	6078      	str	r0, [r7, #4]
    24a4:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    24a6:	687b      	ldr	r3, [r7, #4]
    24a8:	2b00      	cmp	r3, #0
    24aa:	d004      	beq.n	24b6 <can_async_init+0x1a>
    24ac:	683b      	ldr	r3, [r7, #0]
    24ae:	2b00      	cmp	r3, #0
    24b0:	d001      	beq.n	24b6 <can_async_init+0x1a>
    24b2:	2301      	movs	r3, #1
    24b4:	e000      	b.n	24b8 <can_async_init+0x1c>
    24b6:	2300      	movs	r3, #0
    24b8:	f003 0301 	and.w	r3, r3, #1
    24bc:	b2db      	uxtb	r3, r3
    24be:	2241      	movs	r2, #65	; 0x41
    24c0:	490e      	ldr	r1, [pc, #56]	; (24fc <can_async_init+0x60>)
    24c2:	4618      	mov	r0, r3
    24c4:	4b0e      	ldr	r3, [pc, #56]	; (2500 <can_async_init+0x64>)
    24c6:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    24c8:	687b      	ldr	r3, [r7, #4]
    24ca:	6839      	ldr	r1, [r7, #0]
    24cc:	4618      	mov	r0, r3
    24ce:	4b0d      	ldr	r3, [pc, #52]	; (2504 <can_async_init+0x68>)
    24d0:	4798      	blx	r3
    24d2:	60f8      	str	r0, [r7, #12]
	if (rc) {
    24d4:	68fb      	ldr	r3, [r7, #12]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d001      	beq.n	24de <can_async_init+0x42>
		return rc;
    24da:	68fb      	ldr	r3, [r7, #12]
    24dc:	e009      	b.n	24f2 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    24de:	687b      	ldr	r3, [r7, #4]
    24e0:	4a09      	ldr	r2, [pc, #36]	; (2508 <can_async_init+0x6c>)
    24e2:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    24e4:	687b      	ldr	r3, [r7, #4]
    24e6:	4a09      	ldr	r2, [pc, #36]	; (250c <can_async_init+0x70>)
    24e8:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    24ea:	687b      	ldr	r3, [r7, #4]
    24ec:	4a08      	ldr	r2, [pc, #32]	; (2510 <can_async_init+0x74>)
    24ee:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    24f0:	2300      	movs	r3, #0
}
    24f2:	4618      	mov	r0, r3
    24f4:	3710      	adds	r7, #16
    24f6:	46bd      	mov	sp, r7
    24f8:	bd80      	pop	{r7, pc}
    24fa:	bf00      	nop
    24fc:	0000fe64 	.word	0x0000fe64
    2500:	00003e69 	.word	0x00003e69
    2504:	000043c5 	.word	0x000043c5
    2508:	00002515 	.word	0x00002515
    250c:	00002539 	.word	0x00002539
    2510:	0000255d 	.word	0x0000255d

00002514 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2514:	b580      	push	{r7, lr}
    2516:	b084      	sub	sp, #16
    2518:	af00      	add	r7, sp, #0
    251a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    251c:	687b      	ldr	r3, [r7, #4]
    251e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2520:	68fb      	ldr	r3, [r7, #12]
    2522:	69db      	ldr	r3, [r3, #28]
    2524:	2b00      	cmp	r3, #0
    2526:	d003      	beq.n	2530 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2528:	68fb      	ldr	r3, [r7, #12]
    252a:	69db      	ldr	r3, [r3, #28]
    252c:	68f8      	ldr	r0, [r7, #12]
    252e:	4798      	blx	r3
	}
}
    2530:	bf00      	nop
    2532:	3710      	adds	r7, #16
    2534:	46bd      	mov	sp, r7
    2536:	bd80      	pop	{r7, pc}

00002538 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2538:	b580      	push	{r7, lr}
    253a:	b084      	sub	sp, #16
    253c:	af00      	add	r7, sp, #0
    253e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2540:	687b      	ldr	r3, [r7, #4]
    2542:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2544:	68fb      	ldr	r3, [r7, #12]
    2546:	6a1b      	ldr	r3, [r3, #32]
    2548:	2b00      	cmp	r3, #0
    254a:	d003      	beq.n	2554 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    254c:	68fb      	ldr	r3, [r7, #12]
    254e:	6a1b      	ldr	r3, [r3, #32]
    2550:	68f8      	ldr	r0, [r7, #12]
    2552:	4798      	blx	r3
	}
}
    2554:	bf00      	nop
    2556:	3710      	adds	r7, #16
    2558:	46bd      	mov	sp, r7
    255a:	bd80      	pop	{r7, pc}

0000255c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    255c:	b580      	push	{r7, lr}
    255e:	b084      	sub	sp, #16
    2560:	af00      	add	r7, sp, #0
    2562:	6078      	str	r0, [r7, #4]
    2564:	460b      	mov	r3, r1
    2566:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2568:	687b      	ldr	r3, [r7, #4]
    256a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    256c:	68fb      	ldr	r3, [r7, #12]
    256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2570:	2b00      	cmp	r3, #0
    2572:	d005      	beq.n	2580 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2574:	68fb      	ldr	r3, [r7, #12]
    2576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2578:	78fa      	ldrb	r2, [r7, #3]
    257a:	4611      	mov	r1, r2
    257c:	68f8      	ldr	r0, [r7, #12]
    257e:	4798      	blx	r3
	}
}
    2580:	bf00      	nop
    2582:	3710      	adds	r7, #16
    2584:	46bd      	mov	sp, r7
    2586:	bd80      	pop	{r7, pc}

00002588 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2588:	b580      	push	{r7, lr}
    258a:	b082      	sub	sp, #8
    258c:	af00      	add	r7, sp, #0
    258e:	6078      	str	r0, [r7, #4]
    2590:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2592:	687b      	ldr	r3, [r7, #4]
    2594:	2b00      	cmp	r3, #0
    2596:	d004      	beq.n	25a2 <crc_sync_init+0x1a>
    2598:	683b      	ldr	r3, [r7, #0]
    259a:	2b00      	cmp	r3, #0
    259c:	d001      	beq.n	25a2 <crc_sync_init+0x1a>
    259e:	2301      	movs	r3, #1
    25a0:	e000      	b.n	25a4 <crc_sync_init+0x1c>
    25a2:	2300      	movs	r3, #0
    25a4:	f003 0301 	and.w	r3, r3, #1
    25a8:	b2db      	uxtb	r3, r3
    25aa:	222b      	movs	r2, #43	; 0x2b
    25ac:	4906      	ldr	r1, [pc, #24]	; (25c8 <crc_sync_init+0x40>)
    25ae:	4618      	mov	r0, r3
    25b0:	4b06      	ldr	r3, [pc, #24]	; (25cc <crc_sync_init+0x44>)
    25b2:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    25b4:	687b      	ldr	r3, [r7, #4]
    25b6:	6839      	ldr	r1, [r7, #0]
    25b8:	4618      	mov	r0, r3
    25ba:	4b05      	ldr	r3, [pc, #20]	; (25d0 <crc_sync_init+0x48>)
    25bc:	4798      	blx	r3
    25be:	4603      	mov	r3, r0
}
    25c0:	4618      	mov	r0, r3
    25c2:	3708      	adds	r7, #8
    25c4:	46bd      	mov	sp, r7
    25c6:	bd80      	pop	{r7, pc}
    25c8:	0000fe80 	.word	0x0000fe80
    25cc:	00003e69 	.word	0x00003e69
    25d0:	00004ac9 	.word	0x00004ac9

000025d4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    25d4:	b590      	push	{r4, r7, lr}
    25d6:	b083      	sub	sp, #12
    25d8:	af00      	add	r7, sp, #0
    25da:	4603      	mov	r3, r0
    25dc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    25de:	4b07      	ldr	r3, [pc, #28]	; (25fc <delay_us+0x28>)
    25e0:	681c      	ldr	r4, [r3, #0]
    25e2:	88fb      	ldrh	r3, [r7, #6]
    25e4:	4618      	mov	r0, r3
    25e6:	4b06      	ldr	r3, [pc, #24]	; (2600 <delay_us+0x2c>)
    25e8:	4798      	blx	r3
    25ea:	4603      	mov	r3, r0
    25ec:	4619      	mov	r1, r3
    25ee:	4620      	mov	r0, r4
    25f0:	4b04      	ldr	r3, [pc, #16]	; (2604 <delay_us+0x30>)
    25f2:	4798      	blx	r3
}
    25f4:	bf00      	nop
    25f6:	370c      	adds	r7, #12
    25f8:	46bd      	mov	sp, r7
    25fa:	bd90      	pop	{r4, r7, pc}
    25fc:	200008f0 	.word	0x200008f0
    2600:	0000481d 	.word	0x0000481d
    2604:	000049b1 	.word	0x000049b1

00002608 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2608:	b590      	push	{r4, r7, lr}
    260a:	b083      	sub	sp, #12
    260c:	af00      	add	r7, sp, #0
    260e:	4603      	mov	r3, r0
    2610:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2612:	4b07      	ldr	r3, [pc, #28]	; (2630 <delay_ms+0x28>)
    2614:	681c      	ldr	r4, [r3, #0]
    2616:	88fb      	ldrh	r3, [r7, #6]
    2618:	4618      	mov	r0, r3
    261a:	4b06      	ldr	r3, [pc, #24]	; (2634 <delay_ms+0x2c>)
    261c:	4798      	blx	r3
    261e:	4603      	mov	r3, r0
    2620:	4619      	mov	r1, r3
    2622:	4620      	mov	r0, r4
    2624:	4b04      	ldr	r3, [pc, #16]	; (2638 <delay_ms+0x30>)
    2626:	4798      	blx	r3
}
    2628:	bf00      	nop
    262a:	370c      	adds	r7, #12
    262c:	46bd      	mov	sp, r7
    262e:	bd90      	pop	{r4, r7, pc}
    2630:	200008f0 	.word	0x200008f0
    2634:	00004989 	.word	0x00004989
    2638:	000049b1 	.word	0x000049b1

0000263c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    263c:	b580      	push	{r7, lr}
    263e:	af00      	add	r7, sp, #0
	return _event_system_init();
    2640:	4b02      	ldr	r3, [pc, #8]	; (264c <event_system_init+0x10>)
    2642:	4798      	blx	r3
    2644:	4603      	mov	r3, r0
}
    2646:	4618      	mov	r0, r3
    2648:	bd80      	pop	{r7, pc}
    264a:	bf00      	nop
    264c:	00005265 	.word	0x00005265

00002650 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2650:	b580      	push	{r7, lr}
    2652:	b082      	sub	sp, #8
    2654:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2656:	2300      	movs	r3, #0
    2658:	80fb      	strh	r3, [r7, #6]
    265a:	e00e      	b.n	267a <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    265c:	88fb      	ldrh	r3, [r7, #6]
    265e:	4a0c      	ldr	r2, [pc, #48]	; (2690 <ext_irq_init+0x40>)
    2660:	00db      	lsls	r3, r3, #3
    2662:	4413      	add	r3, r2
    2664:	f04f 32ff 	mov.w	r2, #4294967295
    2668:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    266a:	88fb      	ldrh	r3, [r7, #6]
    266c:	4a08      	ldr	r2, [pc, #32]	; (2690 <ext_irq_init+0x40>)
    266e:	2100      	movs	r1, #0
    2670:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2674:	88fb      	ldrh	r3, [r7, #6]
    2676:	3301      	adds	r3, #1
    2678:	80fb      	strh	r3, [r7, #6]
    267a:	88fb      	ldrh	r3, [r7, #6]
    267c:	2b07      	cmp	r3, #7
    267e:	d9ed      	bls.n	265c <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2680:	4804      	ldr	r0, [pc, #16]	; (2694 <ext_irq_init+0x44>)
    2682:	4b05      	ldr	r3, [pc, #20]	; (2698 <ext_irq_init+0x48>)
    2684:	4798      	blx	r3
    2686:	4603      	mov	r3, r0
}
    2688:	4618      	mov	r0, r3
    268a:	3708      	adds	r7, #8
    268c:	46bd      	mov	sp, r7
    268e:	bd80      	pop	{r7, pc}
    2690:	200008f4 	.word	0x200008f4
    2694:	000027f5 	.word	0x000027f5
    2698:	00004e09 	.word	0x00004e09

0000269c <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    269c:	b580      	push	{r7, lr}
    269e:	b086      	sub	sp, #24
    26a0:	af00      	add	r7, sp, #0
    26a2:	6078      	str	r0, [r7, #4]
    26a4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    26a6:	2300      	movs	r3, #0
    26a8:	75fb      	strb	r3, [r7, #23]
    26aa:	2300      	movs	r3, #0
    26ac:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    26ae:	2300      	movs	r3, #0
    26b0:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    26b2:	e012      	b.n	26da <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    26b4:	7dfb      	ldrb	r3, [r7, #23]
    26b6:	4a4d      	ldr	r2, [pc, #308]	; (27ec <ext_irq_register+0x150>)
    26b8:	00db      	lsls	r3, r3, #3
    26ba:	4413      	add	r3, r2
    26bc:	685a      	ldr	r2, [r3, #4]
    26be:	687b      	ldr	r3, [r7, #4]
    26c0:	429a      	cmp	r2, r3
    26c2:	d107      	bne.n	26d4 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    26c4:	7dfb      	ldrb	r3, [r7, #23]
    26c6:	4949      	ldr	r1, [pc, #292]	; (27ec <ext_irq_register+0x150>)
    26c8:	683a      	ldr	r2, [r7, #0]
    26ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    26ce:	2301      	movs	r3, #1
    26d0:	757b      	strb	r3, [r7, #21]
			break;
    26d2:	e005      	b.n	26e0 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    26d4:	7dfb      	ldrb	r3, [r7, #23]
    26d6:	3301      	adds	r3, #1
    26d8:	75fb      	strb	r3, [r7, #23]
    26da:	7dfb      	ldrb	r3, [r7, #23]
    26dc:	2b07      	cmp	r3, #7
    26de:	d9e9      	bls.n	26b4 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    26e0:	683b      	ldr	r3, [r7, #0]
    26e2:	2b00      	cmp	r3, #0
    26e4:	d10e      	bne.n	2704 <ext_irq_register+0x68>
		if (!found) {
    26e6:	7d7b      	ldrb	r3, [r7, #21]
    26e8:	f083 0301 	eor.w	r3, r3, #1
    26ec:	b2db      	uxtb	r3, r3
    26ee:	2b00      	cmp	r3, #0
    26f0:	d002      	beq.n	26f8 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    26f2:	f06f 030c 	mvn.w	r3, #12
    26f6:	e074      	b.n	27e2 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    26f8:	2100      	movs	r1, #0
    26fa:	6878      	ldr	r0, [r7, #4]
    26fc:	4b3c      	ldr	r3, [pc, #240]	; (27f0 <ext_irq_register+0x154>)
    26fe:	4798      	blx	r3
    2700:	4603      	mov	r3, r0
    2702:	e06e      	b.n	27e2 <ext_irq_register+0x146>
	}

	if (!found) {
    2704:	7d7b      	ldrb	r3, [r7, #21]
    2706:	f083 0301 	eor.w	r3, r3, #1
    270a:	b2db      	uxtb	r3, r3
    270c:	2b00      	cmp	r3, #0
    270e:	d05a      	beq.n	27c6 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2710:	2300      	movs	r3, #0
    2712:	75fb      	strb	r3, [r7, #23]
    2714:	e016      	b.n	2744 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2716:	7dfb      	ldrb	r3, [r7, #23]
    2718:	4a34      	ldr	r2, [pc, #208]	; (27ec <ext_irq_register+0x150>)
    271a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    271e:	2b00      	cmp	r3, #0
    2720:	d10d      	bne.n	273e <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2722:	7dfb      	ldrb	r3, [r7, #23]
    2724:	4931      	ldr	r1, [pc, #196]	; (27ec <ext_irq_register+0x150>)
    2726:	683a      	ldr	r2, [r7, #0]
    2728:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    272c:	7dfb      	ldrb	r3, [r7, #23]
    272e:	4a2f      	ldr	r2, [pc, #188]	; (27ec <ext_irq_register+0x150>)
    2730:	00db      	lsls	r3, r3, #3
    2732:	4413      	add	r3, r2
    2734:	687a      	ldr	r2, [r7, #4]
    2736:	605a      	str	r2, [r3, #4]
				found           = true;
    2738:	2301      	movs	r3, #1
    273a:	757b      	strb	r3, [r7, #21]
				break;
    273c:	e005      	b.n	274a <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    273e:	7dfb      	ldrb	r3, [r7, #23]
    2740:	3301      	adds	r3, #1
    2742:	75fb      	strb	r3, [r7, #23]
    2744:	7dfb      	ldrb	r3, [r7, #23]
    2746:	2b07      	cmp	r3, #7
    2748:	d9e5      	bls.n	2716 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    274a:	e036      	b.n	27ba <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    274c:	7dfb      	ldrb	r3, [r7, #23]
    274e:	4a27      	ldr	r2, [pc, #156]	; (27ec <ext_irq_register+0x150>)
    2750:	00db      	lsls	r3, r3, #3
    2752:	4413      	add	r3, r2
    2754:	685a      	ldr	r2, [r3, #4]
    2756:	7dbb      	ldrb	r3, [r7, #22]
    2758:	4924      	ldr	r1, [pc, #144]	; (27ec <ext_irq_register+0x150>)
    275a:	00db      	lsls	r3, r3, #3
    275c:	440b      	add	r3, r1
    275e:	685b      	ldr	r3, [r3, #4]
    2760:	429a      	cmp	r2, r3
    2762:	d227      	bcs.n	27b4 <ext_irq_register+0x118>
    2764:	7dbb      	ldrb	r3, [r7, #22]
    2766:	4a21      	ldr	r2, [pc, #132]	; (27ec <ext_irq_register+0x150>)
    2768:	00db      	lsls	r3, r3, #3
    276a:	4413      	add	r3, r2
    276c:	685b      	ldr	r3, [r3, #4]
    276e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2772:	d01f      	beq.n	27b4 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2774:	7dbb      	ldrb	r3, [r7, #22]
    2776:	491d      	ldr	r1, [pc, #116]	; (27ec <ext_irq_register+0x150>)
    2778:	f107 020c 	add.w	r2, r7, #12
    277c:	00db      	lsls	r3, r3, #3
    277e:	440b      	add	r3, r1
    2780:	e893 0003 	ldmia.w	r3, {r0, r1}
    2784:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2788:	7dbb      	ldrb	r3, [r7, #22]
    278a:	7dfa      	ldrb	r2, [r7, #23]
    278c:	4817      	ldr	r0, [pc, #92]	; (27ec <ext_irq_register+0x150>)
    278e:	4917      	ldr	r1, [pc, #92]	; (27ec <ext_irq_register+0x150>)
    2790:	00db      	lsls	r3, r3, #3
    2792:	4403      	add	r3, r0
    2794:	00d2      	lsls	r2, r2, #3
    2796:	440a      	add	r2, r1
    2798:	e892 0003 	ldmia.w	r2, {r0, r1}
    279c:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    27a0:	7dfb      	ldrb	r3, [r7, #23]
    27a2:	4a12      	ldr	r2, [pc, #72]	; (27ec <ext_irq_register+0x150>)
    27a4:	00db      	lsls	r3, r3, #3
    27a6:	4413      	add	r3, r2
    27a8:	f107 020c 	add.w	r2, r7, #12
    27ac:	e892 0003 	ldmia.w	r2, {r0, r1}
    27b0:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    27b4:	7dbb      	ldrb	r3, [r7, #22]
    27b6:	3301      	adds	r3, #1
    27b8:	75bb      	strb	r3, [r7, #22]
    27ba:	7dbb      	ldrb	r3, [r7, #22]
    27bc:	2b07      	cmp	r3, #7
    27be:	d802      	bhi.n	27c6 <ext_irq_register+0x12a>
    27c0:	7dfb      	ldrb	r3, [r7, #23]
    27c2:	2b07      	cmp	r3, #7
    27c4:	d9c2      	bls.n	274c <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    27c6:	7d7b      	ldrb	r3, [r7, #21]
    27c8:	f083 0301 	eor.w	r3, r3, #1
    27cc:	b2db      	uxtb	r3, r3
    27ce:	2b00      	cmp	r3, #0
    27d0:	d002      	beq.n	27d8 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    27d2:	f06f 030c 	mvn.w	r3, #12
    27d6:	e004      	b.n	27e2 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    27d8:	2101      	movs	r1, #1
    27da:	6878      	ldr	r0, [r7, #4]
    27dc:	4b04      	ldr	r3, [pc, #16]	; (27f0 <ext_irq_register+0x154>)
    27de:	4798      	blx	r3
    27e0:	4603      	mov	r3, r0
}
    27e2:	4618      	mov	r0, r3
    27e4:	3718      	adds	r7, #24
    27e6:	46bd      	mov	sp, r7
    27e8:	bd80      	pop	{r7, pc}
    27ea:	bf00      	nop
    27ec:	200008f4 	.word	0x200008f4
    27f0:	00004f8d 	.word	0x00004f8d

000027f4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    27f4:	b580      	push	{r7, lr}
    27f6:	b084      	sub	sp, #16
    27f8:	af00      	add	r7, sp, #0
    27fa:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    27fc:	2300      	movs	r3, #0
    27fe:	73fb      	strb	r3, [r7, #15]
    2800:	2308      	movs	r3, #8
    2802:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2804:	e02a      	b.n	285c <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2806:	7bba      	ldrb	r2, [r7, #14]
    2808:	7bfb      	ldrb	r3, [r7, #15]
    280a:	4413      	add	r3, r2
    280c:	105b      	asrs	r3, r3, #1
    280e:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2810:	7b7b      	ldrb	r3, [r7, #13]
    2812:	2b07      	cmp	r3, #7
    2814:	d827      	bhi.n	2866 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2816:	7b7b      	ldrb	r3, [r7, #13]
    2818:	4a16      	ldr	r2, [pc, #88]	; (2874 <process_ext_irq+0x80>)
    281a:	00db      	lsls	r3, r3, #3
    281c:	4413      	add	r3, r2
    281e:	685a      	ldr	r2, [r3, #4]
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	429a      	cmp	r2, r3
    2824:	d10b      	bne.n	283e <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2826:	7b7b      	ldrb	r3, [r7, #13]
    2828:	4a12      	ldr	r2, [pc, #72]	; (2874 <process_ext_irq+0x80>)
    282a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    282e:	2b00      	cmp	r3, #0
    2830:	d01b      	beq.n	286a <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    2832:	7b7b      	ldrb	r3, [r7, #13]
    2834:	4a0f      	ldr	r2, [pc, #60]	; (2874 <process_ext_irq+0x80>)
    2836:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    283a:	4798      	blx	r3
			}
			return;
    283c:	e015      	b.n	286a <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    283e:	7b7b      	ldrb	r3, [r7, #13]
    2840:	4a0c      	ldr	r2, [pc, #48]	; (2874 <process_ext_irq+0x80>)
    2842:	00db      	lsls	r3, r3, #3
    2844:	4413      	add	r3, r2
    2846:	685a      	ldr	r2, [r3, #4]
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	429a      	cmp	r2, r3
    284c:	d203      	bcs.n	2856 <process_ext_irq+0x62>
			lower = middle + 1;
    284e:	7b7b      	ldrb	r3, [r7, #13]
    2850:	3301      	adds	r3, #1
    2852:	73fb      	strb	r3, [r7, #15]
    2854:	e002      	b.n	285c <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2856:	7b7b      	ldrb	r3, [r7, #13]
    2858:	3b01      	subs	r3, #1
    285a:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    285c:	7bba      	ldrb	r2, [r7, #14]
    285e:	7bfb      	ldrb	r3, [r7, #15]
    2860:	429a      	cmp	r2, r3
    2862:	d2d0      	bcs.n	2806 <process_ext_irq+0x12>
    2864:	e002      	b.n	286c <process_ext_irq+0x78>
			return;
    2866:	bf00      	nop
    2868:	e000      	b.n	286c <process_ext_irq+0x78>
			return;
    286a:	bf00      	nop
		}
	}
}
    286c:	3710      	adds	r7, #16
    286e:	46bd      	mov	sp, r7
    2870:	bd80      	pop	{r7, pc}
    2872:	bf00      	nop
    2874:	200008f4 	.word	0x200008f4

00002878 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    2878:	b580      	push	{r7, lr}
    287a:	b084      	sub	sp, #16
    287c:	af00      	add	r7, sp, #0
    287e:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2884:	687b      	ldr	r3, [r7, #4]
    2886:	885b      	ldrh	r3, [r3, #2]
    2888:	b29b      	uxth	r3, r3
    288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    288e:	2b00      	cmp	r3, #0
    2890:	d107      	bne.n	28a2 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    2892:	68fb      	ldr	r3, [r7, #12]
    2894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2896:	2b00      	cmp	r3, #0
    2898:	d003      	beq.n	28a2 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    289a:	68fb      	ldr	r3, [r7, #12]
    289c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    289e:	68f8      	ldr	r0, [r7, #12]
    28a0:	4798      	blx	r3
		}
	}
}
    28a2:	bf00      	nop
    28a4:	3710      	adds	r7, #16
    28a6:	46bd      	mov	sp, r7
    28a8:	bd80      	pop	{r7, pc}

000028aa <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    28aa:	b580      	push	{r7, lr}
    28ac:	b084      	sub	sp, #16
    28ae:	af00      	add	r7, sp, #0
    28b0:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    28b2:	687b      	ldr	r3, [r7, #4]
    28b4:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    28b6:	687b      	ldr	r3, [r7, #4]
    28b8:	885b      	ldrh	r3, [r3, #2]
    28ba:	b29b      	uxth	r3, r3
    28bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    28c0:	2b00      	cmp	r3, #0
    28c2:	d107      	bne.n	28d4 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    28c4:	68fb      	ldr	r3, [r7, #12]
    28c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    28c8:	2b00      	cmp	r3, #0
    28ca:	d003      	beq.n	28d4 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    28d0:	68f8      	ldr	r0, [r7, #12]
    28d2:	4798      	blx	r3
		}
	}
}
    28d4:	bf00      	nop
    28d6:	3710      	adds	r7, #16
    28d8:	46bd      	mov	sp, r7
    28da:	bd80      	pop	{r7, pc}

000028dc <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    28dc:	b580      	push	{r7, lr}
    28de:	b084      	sub	sp, #16
    28e0:	af00      	add	r7, sp, #0
    28e2:	6078      	str	r0, [r7, #4]
    28e4:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    28e6:	687b      	ldr	r3, [r7, #4]
    28e8:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	885b      	ldrh	r3, [r3, #2]
    28ee:	b29b      	uxth	r3, r3
    28f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    28f4:	2b00      	cmp	r3, #0
    28f6:	d108      	bne.n	290a <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    28f8:	68fb      	ldr	r3, [r7, #12]
    28fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    28fc:	2b00      	cmp	r3, #0
    28fe:	d004      	beq.n	290a <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    2900:	68fb      	ldr	r3, [r7, #12]
    2902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2904:	6839      	ldr	r1, [r7, #0]
    2906:	68f8      	ldr	r0, [r7, #12]
    2908:	4798      	blx	r3
		}
	}
}
    290a:	bf00      	nop
    290c:	3710      	adds	r7, #16
    290e:	46bd      	mov	sp, r7
    2910:	bd80      	pop	{r7, pc}
	...

00002914 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    2914:	b580      	push	{r7, lr}
    2916:	b08a      	sub	sp, #40	; 0x28
    2918:	af00      	add	r7, sp, #0
    291a:	60f8      	str	r0, [r7, #12]
    291c:	60b9      	str	r1, [r7, #8]
    291e:	4613      	mov	r3, r2
    2920:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2922:	68fb      	ldr	r3, [r7, #12]
    2924:	3b28      	subs	r3, #40	; 0x28
    2926:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    292a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    292c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    292e:	88fb      	ldrh	r3, [r7, #6]
    2930:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2932:	f248 0301 	movw	r3, #32769	; 0x8001
    2936:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2938:	68bb      	ldr	r3, [r7, #8]
    293a:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    293e:	f107 0214 	add.w	r2, r7, #20
    2942:	4611      	mov	r1, r2
    2944:	4618      	mov	r0, r3
    2946:	4b06      	ldr	r3, [pc, #24]	; (2960 <i2c_m_async_read+0x4c>)
    2948:	4798      	blx	r3
    294a:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    294c:	6a3b      	ldr	r3, [r7, #32]
    294e:	2b00      	cmp	r3, #0
    2950:	d001      	beq.n	2956 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    2952:	6a3b      	ldr	r3, [r7, #32]
    2954:	e000      	b.n	2958 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    2956:	88fb      	ldrh	r3, [r7, #6]
}
    2958:	4618      	mov	r0, r3
    295a:	3728      	adds	r7, #40	; 0x28
    295c:	46bd      	mov	sp, r7
    295e:	bd80      	pop	{r7, pc}
    2960:	00007051 	.word	0x00007051

00002964 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    2964:	b580      	push	{r7, lr}
    2966:	b08a      	sub	sp, #40	; 0x28
    2968:	af00      	add	r7, sp, #0
    296a:	60f8      	str	r0, [r7, #12]
    296c:	60b9      	str	r1, [r7, #8]
    296e:	4613      	mov	r3, r2
    2970:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2972:	68fb      	ldr	r3, [r7, #12]
    2974:	3b28      	subs	r3, #40	; 0x28
    2976:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    297a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    297c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    297e:	88fb      	ldrh	r3, [r7, #6]
    2980:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2986:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2988:	68bb      	ldr	r3, [r7, #8]
    298a:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    298e:	f107 0214 	add.w	r2, r7, #20
    2992:	4611      	mov	r1, r2
    2994:	4618      	mov	r0, r3
    2996:	4b06      	ldr	r3, [pc, #24]	; (29b0 <i2c_m_async_write+0x4c>)
    2998:	4798      	blx	r3
    299a:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    299c:	6a3b      	ldr	r3, [r7, #32]
    299e:	2b00      	cmp	r3, #0
    29a0:	d001      	beq.n	29a6 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    29a2:	6a3b      	ldr	r3, [r7, #32]
    29a4:	e000      	b.n	29a8 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    29a6:	88fb      	ldrh	r3, [r7, #6]
}
    29a8:	4618      	mov	r0, r3
    29aa:	3728      	adds	r7, #40	; 0x28
    29ac:	46bd      	mov	sp, r7
    29ae:	bd80      	pop	{r7, pc}
    29b0:	00007051 	.word	0x00007051

000029b4 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b084      	sub	sp, #16
    29b8:	af00      	add	r7, sp, #0
    29ba:	6078      	str	r0, [r7, #4]
    29bc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    29be:	687b      	ldr	r3, [r7, #4]
    29c0:	2b00      	cmp	r3, #0
    29c2:	bf14      	ite	ne
    29c4:	2301      	movne	r3, #1
    29c6:	2300      	moveq	r3, #0
    29c8:	b2db      	uxtb	r3, r3
    29ca:	2289      	movs	r2, #137	; 0x89
    29cc:	4915      	ldr	r1, [pc, #84]	; (2a24 <i2c_m_async_init+0x70>)
    29ce:	4618      	mov	r0, r3
    29d0:	4b15      	ldr	r3, [pc, #84]	; (2a28 <i2c_m_async_init+0x74>)
    29d2:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	6839      	ldr	r1, [r7, #0]
    29d8:	4618      	mov	r0, r3
    29da:	4b14      	ldr	r3, [pc, #80]	; (2a2c <i2c_m_async_init+0x78>)
    29dc:	4798      	blx	r3
    29de:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    29e0:	68fb      	ldr	r3, [r7, #12]
    29e2:	2b00      	cmp	r3, #0
    29e4:	d001      	beq.n	29ea <i2c_m_async_init+0x36>
		return init_status;
    29e6:	68fb      	ldr	r3, [r7, #12]
    29e8:	e018      	b.n	2a1c <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    29ea:	687b      	ldr	r3, [r7, #4]
    29ec:	4a10      	ldr	r2, [pc, #64]	; (2a30 <i2c_m_async_init+0x7c>)
    29ee:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    29f0:	687b      	ldr	r3, [r7, #4]
    29f2:	4a10      	ldr	r2, [pc, #64]	; (2a34 <i2c_m_async_init+0x80>)
    29f4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    29f6:	687b      	ldr	r3, [r7, #4]
    29f8:	4a0f      	ldr	r2, [pc, #60]	; (2a38 <i2c_m_async_init+0x84>)
    29fa:	2101      	movs	r1, #1
    29fc:	4618      	mov	r0, r3
    29fe:	4b0f      	ldr	r3, [pc, #60]	; (2a3c <i2c_m_async_init+0x88>)
    2a00:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    2a02:	687b      	ldr	r3, [r7, #4]
    2a04:	4a0e      	ldr	r2, [pc, #56]	; (2a40 <i2c_m_async_init+0x8c>)
    2a06:	2102      	movs	r1, #2
    2a08:	4618      	mov	r0, r3
    2a0a:	4b0c      	ldr	r3, [pc, #48]	; (2a3c <i2c_m_async_init+0x88>)
    2a0c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    2a0e:	687b      	ldr	r3, [r7, #4]
    2a10:	4a0c      	ldr	r2, [pc, #48]	; (2a44 <i2c_m_async_init+0x90>)
    2a12:	2100      	movs	r1, #0
    2a14:	4618      	mov	r0, r3
    2a16:	4b09      	ldr	r3, [pc, #36]	; (2a3c <i2c_m_async_init+0x88>)
    2a18:	4798      	blx	r3

	return ERR_NONE;
    2a1a:	2300      	movs	r3, #0
}
    2a1c:	4618      	mov	r0, r3
    2a1e:	3710      	adds	r7, #16
    2a20:	46bd      	mov	sp, r7
    2a22:	bd80      	pop	{r7, pc}
    2a24:	0000fe9c 	.word	0x0000fe9c
    2a28:	00003e69 	.word	0x00003e69
    2a2c:	00006ea1 	.word	0x00006ea1
    2a30:	00002915 	.word	0x00002915
    2a34:	00002965 	.word	0x00002965
    2a38:	00002879 	.word	0x00002879
    2a3c:	00007125 	.word	0x00007125
    2a40:	000028ab 	.word	0x000028ab
    2a44:	000028dd 	.word	0x000028dd

00002a48 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2a48:	b580      	push	{r7, lr}
    2a4a:	b08a      	sub	sp, #40	; 0x28
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	60f8      	str	r0, [r7, #12]
    2a50:	60b9      	str	r1, [r7, #8]
    2a52:	4613      	mov	r3, r2
    2a54:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2a56:	68fb      	ldr	r3, [r7, #12]
    2a58:	3b14      	subs	r3, #20
    2a5a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a5e:	8b9b      	ldrh	r3, [r3, #28]
    2a60:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2a62:	88fb      	ldrh	r3, [r7, #6]
    2a64:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2a66:	f248 0301 	movw	r3, #32769	; 0x8001
    2a6a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2a6c:	68bb      	ldr	r3, [r7, #8]
    2a6e:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a72:	f107 0214 	add.w	r2, r7, #20
    2a76:	4611      	mov	r1, r2
    2a78:	4618      	mov	r0, r3
    2a7a:	4b06      	ldr	r3, [pc, #24]	; (2a94 <i2c_m_sync_read+0x4c>)
    2a7c:	4798      	blx	r3
    2a7e:	6238      	str	r0, [r7, #32]

	if (ret) {
    2a80:	6a3b      	ldr	r3, [r7, #32]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d001      	beq.n	2a8a <i2c_m_sync_read+0x42>
		return ret;
    2a86:	6a3b      	ldr	r3, [r7, #32]
    2a88:	e000      	b.n	2a8c <i2c_m_sync_read+0x44>
	}

	return n;
    2a8a:	88fb      	ldrh	r3, [r7, #6]
}
    2a8c:	4618      	mov	r0, r3
    2a8e:	3728      	adds	r7, #40	; 0x28
    2a90:	46bd      	mov	sp, r7
    2a92:	bd80      	pop	{r7, pc}
    2a94:	0000736d 	.word	0x0000736d

00002a98 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2a98:	b580      	push	{r7, lr}
    2a9a:	b08a      	sub	sp, #40	; 0x28
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	60f8      	str	r0, [r7, #12]
    2aa0:	60b9      	str	r1, [r7, #8]
    2aa2:	4613      	mov	r3, r2
    2aa4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2aa6:	68fb      	ldr	r3, [r7, #12]
    2aa8:	3b14      	subs	r3, #20
    2aaa:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2aae:	8b9b      	ldrh	r3, [r3, #28]
    2ab0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2ab2:	88fb      	ldrh	r3, [r7, #6]
    2ab4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2aba:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2abc:	68bb      	ldr	r3, [r7, #8]
    2abe:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ac2:	f107 0214 	add.w	r2, r7, #20
    2ac6:	4611      	mov	r1, r2
    2ac8:	4618      	mov	r0, r3
    2aca:	4b06      	ldr	r3, [pc, #24]	; (2ae4 <i2c_m_sync_write+0x4c>)
    2acc:	4798      	blx	r3
    2ace:	6238      	str	r0, [r7, #32]

	if (ret) {
    2ad0:	6a3b      	ldr	r3, [r7, #32]
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d001      	beq.n	2ada <i2c_m_sync_write+0x42>
		return ret;
    2ad6:	6a3b      	ldr	r3, [r7, #32]
    2ad8:	e000      	b.n	2adc <i2c_m_sync_write+0x44>
	}

	return n;
    2ada:	88fb      	ldrh	r3, [r7, #6]
}
    2adc:	4618      	mov	r0, r3
    2ade:	3728      	adds	r7, #40	; 0x28
    2ae0:	46bd      	mov	sp, r7
    2ae2:	bd80      	pop	{r7, pc}
    2ae4:	0000736d 	.word	0x0000736d

00002ae8 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2ae8:	b580      	push	{r7, lr}
    2aea:	b084      	sub	sp, #16
    2aec:	af00      	add	r7, sp, #0
    2aee:	6078      	str	r0, [r7, #4]
    2af0:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2af2:	687b      	ldr	r3, [r7, #4]
    2af4:	2b00      	cmp	r3, #0
    2af6:	bf14      	ite	ne
    2af8:	2301      	movne	r3, #1
    2afa:	2300      	moveq	r3, #0
    2afc:	b2db      	uxtb	r3, r3
    2afe:	225e      	movs	r2, #94	; 0x5e
    2b00:	490c      	ldr	r1, [pc, #48]	; (2b34 <i2c_m_sync_init+0x4c>)
    2b02:	4618      	mov	r0, r3
    2b04:	4b0c      	ldr	r3, [pc, #48]	; (2b38 <i2c_m_sync_init+0x50>)
    2b06:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	6839      	ldr	r1, [r7, #0]
    2b0c:	4618      	mov	r0, r3
    2b0e:	4b0b      	ldr	r3, [pc, #44]	; (2b3c <i2c_m_sync_init+0x54>)
    2b10:	4798      	blx	r3
    2b12:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2b14:	68fb      	ldr	r3, [r7, #12]
    2b16:	2b00      	cmp	r3, #0
    2b18:	d001      	beq.n	2b1e <i2c_m_sync_init+0x36>
		return init_status;
    2b1a:	68fb      	ldr	r3, [r7, #12]
    2b1c:	e006      	b.n	2b2c <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2b1e:	687b      	ldr	r3, [r7, #4]
    2b20:	4a07      	ldr	r2, [pc, #28]	; (2b40 <i2c_m_sync_init+0x58>)
    2b22:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2b24:	687b      	ldr	r3, [r7, #4]
    2b26:	4a07      	ldr	r2, [pc, #28]	; (2b44 <i2c_m_sync_init+0x5c>)
    2b28:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2b2a:	2300      	movs	r3, #0
}
    2b2c:	4618      	mov	r0, r3
    2b2e:	3710      	adds	r7, #16
    2b30:	46bd      	mov	sp, r7
    2b32:	bd80      	pop	{r7, pc}
    2b34:	0000febc 	.word	0x0000febc
    2b38:	00003e69 	.word	0x00003e69
    2b3c:	00007169 	.word	0x00007169
    2b40:	00002a49 	.word	0x00002a49
    2b44:	00002a99 	.word	0x00002a99

00002b48 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2b48:	b580      	push	{r7, lr}
    2b4a:	b082      	sub	sp, #8
    2b4c:	af00      	add	r7, sp, #0
    2b4e:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2b50:	687b      	ldr	r3, [r7, #4]
    2b52:	4618      	mov	r0, r3
    2b54:	4b03      	ldr	r3, [pc, #12]	; (2b64 <i2c_m_sync_enable+0x1c>)
    2b56:	4798      	blx	r3
    2b58:	4603      	mov	r3, r0
}
    2b5a:	4618      	mov	r0, r3
    2b5c:	3708      	adds	r7, #8
    2b5e:	46bd      	mov	sp, r7
    2b60:	bd80      	pop	{r7, pc}
    2b62:	bf00      	nop
    2b64:	000071b1 	.word	0x000071b1

00002b68 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2b68:	b480      	push	{r7}
    2b6a:	b085      	sub	sp, #20
    2b6c:	af00      	add	r7, sp, #0
    2b6e:	60f8      	str	r0, [r7, #12]
    2b70:	460b      	mov	r3, r1
    2b72:	607a      	str	r2, [r7, #4]
    2b74:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2b76:	897b      	ldrh	r3, [r7, #10]
    2b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2b7c:	b21a      	sxth	r2, r3
    2b7e:	687b      	ldr	r3, [r7, #4]
    2b80:	b21b      	sxth	r3, r3
    2b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2b86:	b21b      	sxth	r3, r3
    2b88:	4313      	orrs	r3, r2
    2b8a:	b21b      	sxth	r3, r3
    2b8c:	b29a      	uxth	r2, r3
    2b8e:	68fb      	ldr	r3, [r7, #12]
    2b90:	839a      	strh	r2, [r3, #28]
    2b92:	68fb      	ldr	r3, [r7, #12]
    2b94:	8b9b      	ldrh	r3, [r3, #28]
}
    2b96:	4618      	mov	r0, r3
    2b98:	3714      	adds	r7, #20
    2b9a:	46bd      	mov	sp, r7
    2b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ba0:	4770      	bx	lr

00002ba2 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2ba2:	b480      	push	{r7}
    2ba4:	b083      	sub	sp, #12
    2ba6:	af00      	add	r7, sp, #0
    2ba8:	6078      	str	r0, [r7, #4]
    2baa:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	f103 0214 	add.w	r2, r3, #20
    2bb2:	683b      	ldr	r3, [r7, #0]
    2bb4:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2bb6:	2300      	movs	r3, #0
}
    2bb8:	4618      	mov	r0, r3
    2bba:	370c      	adds	r7, #12
    2bbc:	46bd      	mov	sp, r7
    2bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bc2:	4770      	bx	lr

00002bc4 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2bc4:	b580      	push	{r7, lr}
    2bc6:	b084      	sub	sp, #16
    2bc8:	af00      	add	r7, sp, #0
    2bca:	60f8      	str	r0, [r7, #12]
    2bcc:	60b9      	str	r1, [r7, #8]
    2bce:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2bd0:	68fb      	ldr	r3, [r7, #12]
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	d004      	beq.n	2be0 <pwm_init+0x1c>
    2bd6:	68bb      	ldr	r3, [r7, #8]
    2bd8:	2b00      	cmp	r3, #0
    2bda:	d001      	beq.n	2be0 <pwm_init+0x1c>
    2bdc:	2301      	movs	r3, #1
    2bde:	e000      	b.n	2be2 <pwm_init+0x1e>
    2be0:	2300      	movs	r3, #0
    2be2:	f003 0301 	and.w	r3, r3, #1
    2be6:	b2db      	uxtb	r3, r3
    2be8:	2233      	movs	r2, #51	; 0x33
    2bea:	490a      	ldr	r1, [pc, #40]	; (2c14 <pwm_init+0x50>)
    2bec:	4618      	mov	r0, r3
    2bee:	4b0a      	ldr	r3, [pc, #40]	; (2c18 <pwm_init+0x54>)
    2bf0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2bf2:	68fb      	ldr	r3, [r7, #12]
    2bf4:	68b9      	ldr	r1, [r7, #8]
    2bf6:	4618      	mov	r0, r3
    2bf8:	4b08      	ldr	r3, [pc, #32]	; (2c1c <pwm_init+0x58>)
    2bfa:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2bfc:	68fb      	ldr	r3, [r7, #12]
    2bfe:	4a08      	ldr	r2, [pc, #32]	; (2c20 <pwm_init+0x5c>)
    2c00:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2c02:	68fb      	ldr	r3, [r7, #12]
    2c04:	4a07      	ldr	r2, [pc, #28]	; (2c24 <pwm_init+0x60>)
    2c06:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2c08:	2300      	movs	r3, #0
}
    2c0a:	4618      	mov	r0, r3
    2c0c:	3710      	adds	r7, #16
    2c0e:	46bd      	mov	sp, r7
    2c10:	bd80      	pop	{r7, pc}
    2c12:	bf00      	nop
    2c14:	0000fed8 	.word	0x0000fed8
    2c18:	00003e69 	.word	0x00003e69
    2c1c:	00008a75 	.word	0x00008a75
    2c20:	00002c7d 	.word	0x00002c7d
    2c24:	00002ca1 	.word	0x00002ca1

00002c28 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    2c28:	b580      	push	{r7, lr}
    2c2a:	b082      	sub	sp, #8
    2c2c:	af00      	add	r7, sp, #0
    2c2e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2c30:	687b      	ldr	r3, [r7, #4]
    2c32:	2b00      	cmp	r3, #0
    2c34:	bf14      	ite	ne
    2c36:	2301      	movne	r3, #1
    2c38:	2300      	moveq	r3, #0
    2c3a:	b2db      	uxtb	r3, r3
    2c3c:	224a      	movs	r2, #74	; 0x4a
    2c3e:	490b      	ldr	r1, [pc, #44]	; (2c6c <pwm_enable+0x44>)
    2c40:	4618      	mov	r0, r3
    2c42:	4b0b      	ldr	r3, [pc, #44]	; (2c70 <pwm_enable+0x48>)
    2c44:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    2c46:	687b      	ldr	r3, [r7, #4]
    2c48:	4618      	mov	r0, r3
    2c4a:	4b0a      	ldr	r3, [pc, #40]	; (2c74 <pwm_enable+0x4c>)
    2c4c:	4798      	blx	r3
    2c4e:	4603      	mov	r3, r0
    2c50:	2b00      	cmp	r3, #0
    2c52:	d002      	beq.n	2c5a <pwm_enable+0x32>
		return ERR_DENIED;
    2c54:	f06f 0310 	mvn.w	r3, #16
    2c58:	e004      	b.n	2c64 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	4618      	mov	r0, r3
    2c5e:	4b06      	ldr	r3, [pc, #24]	; (2c78 <pwm_enable+0x50>)
    2c60:	4798      	blx	r3

	return ERR_NONE;
    2c62:	2300      	movs	r3, #0
}
    2c64:	4618      	mov	r0, r3
    2c66:	3708      	adds	r7, #8
    2c68:	46bd      	mov	sp, r7
    2c6a:	bd80      	pop	{r7, pc}
    2c6c:	0000fed8 	.word	0x0000fed8
    2c70:	00003e69 	.word	0x00003e69
    2c74:	00008e65 	.word	0x00008e65
    2c78:	00008d21 	.word	0x00008d21

00002c7c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2c7c:	b580      	push	{r7, lr}
    2c7e:	b084      	sub	sp, #16
    2c80:	af00      	add	r7, sp, #0
    2c82:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2c84:	687b      	ldr	r3, [r7, #4]
    2c86:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	695b      	ldr	r3, [r3, #20]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d003      	beq.n	2c98 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	695b      	ldr	r3, [r3, #20]
    2c94:	68f8      	ldr	r0, [r7, #12]
    2c96:	4798      	blx	r3
	}
}
    2c98:	bf00      	nop
    2c9a:	3710      	adds	r7, #16
    2c9c:	46bd      	mov	sp, r7
    2c9e:	bd80      	pop	{r7, pc}

00002ca0 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2ca0:	b580      	push	{r7, lr}
    2ca2:	b084      	sub	sp, #16
    2ca4:	af00      	add	r7, sp, #0
    2ca6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2cac:	68fb      	ldr	r3, [r7, #12]
    2cae:	699b      	ldr	r3, [r3, #24]
    2cb0:	2b00      	cmp	r3, #0
    2cb2:	d003      	beq.n	2cbc <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2cb4:	68fb      	ldr	r3, [r7, #12]
    2cb6:	699b      	ldr	r3, [r3, #24]
    2cb8:	68f8      	ldr	r0, [r7, #12]
    2cba:	4798      	blx	r3
	}
}
    2cbc:	bf00      	nop
    2cbe:	3710      	adds	r7, #16
    2cc0:	46bd      	mov	sp, r7
    2cc2:	bd80      	pop	{r7, pc}

00002cc4 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b082      	sub	sp, #8
    2cc8:	af00      	add	r7, sp, #0
    2cca:	6078      	str	r0, [r7, #4]
    2ccc:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	d004      	beq.n	2cde <qspi_sync_init+0x1a>
    2cd4:	683b      	ldr	r3, [r7, #0]
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d001      	beq.n	2cde <qspi_sync_init+0x1a>
    2cda:	2301      	movs	r3, #1
    2cdc:	e000      	b.n	2ce0 <qspi_sync_init+0x1c>
    2cde:	2300      	movs	r3, #0
    2ce0:	f003 0301 	and.w	r3, r3, #1
    2ce4:	b2db      	uxtb	r3, r3
    2ce6:	2231      	movs	r2, #49	; 0x31
    2ce8:	4906      	ldr	r1, [pc, #24]	; (2d04 <qspi_sync_init+0x40>)
    2cea:	4618      	mov	r0, r3
    2cec:	4b06      	ldr	r3, [pc, #24]	; (2d08 <qspi_sync_init+0x44>)
    2cee:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	6839      	ldr	r1, [r7, #0]
    2cf4:	4618      	mov	r0, r3
    2cf6:	4b05      	ldr	r3, [pc, #20]	; (2d0c <qspi_sync_init+0x48>)
    2cf8:	4798      	blx	r3
    2cfa:	4603      	mov	r3, r0
}
    2cfc:	4618      	mov	r0, r3
    2cfe:	3708      	adds	r7, #8
    2d00:	46bd      	mov	sp, r7
    2d02:	bd80      	pop	{r7, pc}
    2d04:	0000fef0 	.word	0x0000fef0
    2d08:	00003e69 	.word	0x00003e69
    2d0c:	00005e2d 	.word	0x00005e2d

00002d10 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2d10:	b580      	push	{r7, lr}
    2d12:	b082      	sub	sp, #8
    2d14:	af00      	add	r7, sp, #0
    2d16:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2d18:	687b      	ldr	r3, [r7, #4]
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	bf14      	ite	ne
    2d1e:	2301      	movne	r3, #1
    2d20:	2300      	moveq	r3, #0
    2d22:	b2db      	uxtb	r3, r3
    2d24:	223f      	movs	r2, #63	; 0x3f
    2d26:	4906      	ldr	r1, [pc, #24]	; (2d40 <qspi_sync_enable+0x30>)
    2d28:	4618      	mov	r0, r3
    2d2a:	4b06      	ldr	r3, [pc, #24]	; (2d44 <qspi_sync_enable+0x34>)
    2d2c:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	4618      	mov	r0, r3
    2d32:	4b05      	ldr	r3, [pc, #20]	; (2d48 <qspi_sync_enable+0x38>)
    2d34:	4798      	blx	r3
    2d36:	4603      	mov	r3, r0
}
    2d38:	4618      	mov	r0, r3
    2d3a:	3708      	adds	r7, #8
    2d3c:	46bd      	mov	sp, r7
    2d3e:	bd80      	pop	{r7, pc}
    2d40:	0000fef0 	.word	0x0000fef0
    2d44:	00003e69 	.word	0x00003e69
    2d48:	00005ea1 	.word	0x00005ea1

00002d4c <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2d4c:	b580      	push	{r7, lr}
    2d4e:	b082      	sub	sp, #8
    2d50:	af00      	add	r7, sp, #0
    2d52:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2d54:	687b      	ldr	r3, [r7, #4]
    2d56:	2b00      	cmp	r3, #0
    2d58:	bf14      	ite	ne
    2d5a:	2301      	movne	r3, #1
    2d5c:	2300      	moveq	r3, #0
    2d5e:	b2db      	uxtb	r3, r3
    2d60:	2246      	movs	r2, #70	; 0x46
    2d62:	4906      	ldr	r1, [pc, #24]	; (2d7c <qspi_sync_disable+0x30>)
    2d64:	4618      	mov	r0, r3
    2d66:	4b06      	ldr	r3, [pc, #24]	; (2d80 <qspi_sync_disable+0x34>)
    2d68:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2d6a:	687b      	ldr	r3, [r7, #4]
    2d6c:	4618      	mov	r0, r3
    2d6e:	4b05      	ldr	r3, [pc, #20]	; (2d84 <qspi_sync_disable+0x38>)
    2d70:	4798      	blx	r3
    2d72:	4603      	mov	r3, r0
}
    2d74:	4618      	mov	r0, r3
    2d76:	3708      	adds	r7, #8
    2d78:	46bd      	mov	sp, r7
    2d7a:	bd80      	pop	{r7, pc}
    2d7c:	0000fef0 	.word	0x0000fef0
    2d80:	00003e69 	.word	0x00003e69
    2d84:	00005ec5 	.word	0x00005ec5

00002d88 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2d88:	b580      	push	{r7, lr}
    2d8a:	b082      	sub	sp, #8
    2d8c:	af00      	add	r7, sp, #0
    2d8e:	6078      	str	r0, [r7, #4]
    2d90:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2d92:	687b      	ldr	r3, [r7, #4]
    2d94:	2b00      	cmp	r3, #0
    2d96:	d004      	beq.n	2da2 <qspi_sync_serial_run_command+0x1a>
    2d98:	683b      	ldr	r3, [r7, #0]
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d001      	beq.n	2da2 <qspi_sync_serial_run_command+0x1a>
    2d9e:	2301      	movs	r3, #1
    2da0:	e000      	b.n	2da4 <qspi_sync_serial_run_command+0x1c>
    2da2:	2300      	movs	r3, #0
    2da4:	f003 0301 	and.w	r3, r3, #1
    2da8:	b2db      	uxtb	r3, r3
    2daa:	224d      	movs	r2, #77	; 0x4d
    2dac:	4906      	ldr	r1, [pc, #24]	; (2dc8 <qspi_sync_serial_run_command+0x40>)
    2dae:	4618      	mov	r0, r3
    2db0:	4b06      	ldr	r3, [pc, #24]	; (2dcc <qspi_sync_serial_run_command+0x44>)
    2db2:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	6839      	ldr	r1, [r7, #0]
    2db8:	4618      	mov	r0, r3
    2dba:	4b05      	ldr	r3, [pc, #20]	; (2dd0 <qspi_sync_serial_run_command+0x48>)
    2dbc:	4798      	blx	r3
    2dbe:	4603      	mov	r3, r0
}
    2dc0:	4618      	mov	r0, r3
    2dc2:	3708      	adds	r7, #8
    2dc4:	46bd      	mov	sp, r7
    2dc6:	bd80      	pop	{r7, pc}
    2dc8:	0000fef0 	.word	0x0000fef0
    2dcc:	00003e69 	.word	0x00003e69
    2dd0:	00006011 	.word	0x00006011

00002dd4 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2dd4:	b580      	push	{r7, lr}
    2dd6:	b084      	sub	sp, #16
    2dd8:	af00      	add	r7, sp, #0
    2dda:	6078      	str	r0, [r7, #4]
    2ddc:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2dde:	2300      	movs	r3, #0
    2de0:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	2b00      	cmp	r3, #0
    2de6:	d004      	beq.n	2df2 <spi_m_sync_init+0x1e>
    2de8:	683b      	ldr	r3, [r7, #0]
    2dea:	2b00      	cmp	r3, #0
    2dec:	d001      	beq.n	2df2 <spi_m_sync_init+0x1e>
    2dee:	2301      	movs	r3, #1
    2df0:	e000      	b.n	2df4 <spi_m_sync_init+0x20>
    2df2:	2300      	movs	r3, #0
    2df4:	f003 0301 	and.w	r3, r3, #1
    2df8:	b2db      	uxtb	r3, r3
    2dfa:	2240      	movs	r2, #64	; 0x40
    2dfc:	4910      	ldr	r1, [pc, #64]	; (2e40 <spi_m_sync_init+0x6c>)
    2dfe:	4618      	mov	r0, r3
    2e00:	4b10      	ldr	r3, [pc, #64]	; (2e44 <spi_m_sync_init+0x70>)
    2e02:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2e04:	687b      	ldr	r3, [r7, #4]
    2e06:	683a      	ldr	r2, [r7, #0]
    2e08:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	3304      	adds	r3, #4
    2e0e:	6839      	ldr	r1, [r7, #0]
    2e10:	4618      	mov	r0, r3
    2e12:	4b0d      	ldr	r3, [pc, #52]	; (2e48 <spi_m_sync_init+0x74>)
    2e14:	4798      	blx	r3
    2e16:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2e18:	68fb      	ldr	r3, [r7, #12]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	da01      	bge.n	2e22 <spi_m_sync_init+0x4e>
		return rc;
    2e1e:	68fb      	ldr	r3, [r7, #12]
    2e20:	e00a      	b.n	2e38 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2e22:	687b      	ldr	r3, [r7, #4]
    2e24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2e28:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2e2a:	687b      	ldr	r3, [r7, #4]
    2e2c:	4a07      	ldr	r2, [pc, #28]	; (2e4c <spi_m_sync_init+0x78>)
    2e2e:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2e30:	687b      	ldr	r3, [r7, #4]
    2e32:	4a07      	ldr	r2, [pc, #28]	; (2e50 <spi_m_sync_init+0x7c>)
    2e34:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2e36:	2300      	movs	r3, #0
}
    2e38:	4618      	mov	r0, r3
    2e3a:	3710      	adds	r7, #16
    2e3c:	46bd      	mov	sp, r7
    2e3e:	bd80      	pop	{r7, pc}
    2e40:	0000ff0c 	.word	0x0000ff0c
    2e44:	00003e69 	.word	0x00003e69
    2e48:	000078d9 	.word	0x000078d9
    2e4c:	00002ecd 	.word	0x00002ecd
    2e50:	00002f25 	.word	0x00002f25

00002e54 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2e54:	b580      	push	{r7, lr}
    2e56:	b082      	sub	sp, #8
    2e58:	af00      	add	r7, sp, #0
    2e5a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	bf14      	ite	ne
    2e62:	2301      	movne	r3, #1
    2e64:	2300      	moveq	r3, #0
    2e66:	b2db      	uxtb	r3, r3
    2e68:	2257      	movs	r2, #87	; 0x57
    2e6a:	4906      	ldr	r1, [pc, #24]	; (2e84 <spi_m_sync_enable+0x30>)
    2e6c:	4618      	mov	r0, r3
    2e6e:	4b06      	ldr	r3, [pc, #24]	; (2e88 <spi_m_sync_enable+0x34>)
    2e70:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2e72:	687b      	ldr	r3, [r7, #4]
    2e74:	3304      	adds	r3, #4
    2e76:	4618      	mov	r0, r3
    2e78:	4b04      	ldr	r3, [pc, #16]	; (2e8c <spi_m_sync_enable+0x38>)
    2e7a:	4798      	blx	r3
}
    2e7c:	bf00      	nop
    2e7e:	3708      	adds	r7, #8
    2e80:	46bd      	mov	sp, r7
    2e82:	bd80      	pop	{r7, pc}
    2e84:	0000ff0c 	.word	0x0000ff0c
    2e88:	00003e69 	.word	0x00003e69
    2e8c:	000079e5 	.word	0x000079e5

00002e90 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2e90:	b580      	push	{r7, lr}
    2e92:	b082      	sub	sp, #8
    2e94:	af00      	add	r7, sp, #0
    2e96:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2e98:	687b      	ldr	r3, [r7, #4]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	bf14      	ite	ne
    2e9e:	2301      	movne	r3, #1
    2ea0:	2300      	moveq	r3, #0
    2ea2:	b2db      	uxtb	r3, r3
    2ea4:	225d      	movs	r2, #93	; 0x5d
    2ea6:	4906      	ldr	r1, [pc, #24]	; (2ec0 <spi_m_sync_disable+0x30>)
    2ea8:	4618      	mov	r0, r3
    2eaa:	4b06      	ldr	r3, [pc, #24]	; (2ec4 <spi_m_sync_disable+0x34>)
    2eac:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2eae:	687b      	ldr	r3, [r7, #4]
    2eb0:	3304      	adds	r3, #4
    2eb2:	4618      	mov	r0, r3
    2eb4:	4b04      	ldr	r3, [pc, #16]	; (2ec8 <spi_m_sync_disable+0x38>)
    2eb6:	4798      	blx	r3
}
    2eb8:	bf00      	nop
    2eba:	3708      	adds	r7, #8
    2ebc:	46bd      	mov	sp, r7
    2ebe:	bd80      	pop	{r7, pc}
    2ec0:	0000ff0c 	.word	0x0000ff0c
    2ec4:	00003e69 	.word	0x00003e69
    2ec8:	00007a35 	.word	0x00007a35

00002ecc <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2ecc:	b580      	push	{r7, lr}
    2ece:	b088      	sub	sp, #32
    2ed0:	af00      	add	r7, sp, #0
    2ed2:	60f8      	str	r0, [r7, #12]
    2ed4:	60b9      	str	r1, [r7, #8]
    2ed6:	4613      	mov	r3, r2
    2ed8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2eda:	68fb      	ldr	r3, [r7, #12]
    2edc:	2b00      	cmp	r3, #0
    2ede:	bf14      	ite	ne
    2ee0:	2301      	movne	r3, #1
    2ee2:	2300      	moveq	r3, #0
    2ee4:	b2db      	uxtb	r3, r3
    2ee6:	2287      	movs	r2, #135	; 0x87
    2ee8:	490b      	ldr	r1, [pc, #44]	; (2f18 <_spi_m_sync_io_read+0x4c>)
    2eea:	4618      	mov	r0, r3
    2eec:	4b0b      	ldr	r3, [pc, #44]	; (2f1c <_spi_m_sync_io_read+0x50>)
    2eee:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2ef0:	68fb      	ldr	r3, [r7, #12]
    2ef2:	3b0c      	subs	r3, #12
    2ef4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2ef6:	68bb      	ldr	r3, [r7, #8]
    2ef8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2efa:	2300      	movs	r3, #0
    2efc:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2efe:	88fb      	ldrh	r3, [r7, #6]
    2f00:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2f02:	f107 0310 	add.w	r3, r7, #16
    2f06:	4619      	mov	r1, r3
    2f08:	69f8      	ldr	r0, [r7, #28]
    2f0a:	4b05      	ldr	r3, [pc, #20]	; (2f20 <_spi_m_sync_io_read+0x54>)
    2f0c:	4798      	blx	r3
    2f0e:	4603      	mov	r3, r0
}
    2f10:	4618      	mov	r0, r3
    2f12:	3720      	adds	r7, #32
    2f14:	46bd      	mov	sp, r7
    2f16:	bd80      	pop	{r7, pc}
    2f18:	0000ff0c 	.word	0x0000ff0c
    2f1c:	00003e69 	.word	0x00003e69
    2f20:	00002f7d 	.word	0x00002f7d

00002f24 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2f24:	b580      	push	{r7, lr}
    2f26:	b088      	sub	sp, #32
    2f28:	af00      	add	r7, sp, #0
    2f2a:	60f8      	str	r0, [r7, #12]
    2f2c:	60b9      	str	r1, [r7, #8]
    2f2e:	4613      	mov	r3, r2
    2f30:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2f32:	68fb      	ldr	r3, [r7, #12]
    2f34:	2b00      	cmp	r3, #0
    2f36:	bf14      	ite	ne
    2f38:	2301      	movne	r3, #1
    2f3a:	2300      	moveq	r3, #0
    2f3c:	b2db      	uxtb	r3, r3
    2f3e:	22a3      	movs	r2, #163	; 0xa3
    2f40:	490b      	ldr	r1, [pc, #44]	; (2f70 <_spi_m_sync_io_write+0x4c>)
    2f42:	4618      	mov	r0, r3
    2f44:	4b0b      	ldr	r3, [pc, #44]	; (2f74 <_spi_m_sync_io_write+0x50>)
    2f46:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2f48:	68fb      	ldr	r3, [r7, #12]
    2f4a:	3b0c      	subs	r3, #12
    2f4c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2f4e:	2300      	movs	r3, #0
    2f50:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2f52:	68bb      	ldr	r3, [r7, #8]
    2f54:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2f56:	88fb      	ldrh	r3, [r7, #6]
    2f58:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2f5a:	f107 0310 	add.w	r3, r7, #16
    2f5e:	4619      	mov	r1, r3
    2f60:	69f8      	ldr	r0, [r7, #28]
    2f62:	4b05      	ldr	r3, [pc, #20]	; (2f78 <_spi_m_sync_io_write+0x54>)
    2f64:	4798      	blx	r3
    2f66:	4603      	mov	r3, r0
}
    2f68:	4618      	mov	r0, r3
    2f6a:	3720      	adds	r7, #32
    2f6c:	46bd      	mov	sp, r7
    2f6e:	bd80      	pop	{r7, pc}
    2f70:	0000ff0c 	.word	0x0000ff0c
    2f74:	00003e69 	.word	0x00003e69
    2f78:	00002f7d 	.word	0x00002f7d

00002f7c <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b086      	sub	sp, #24
    2f80:	af00      	add	r7, sp, #0
    2f82:	6078      	str	r0, [r7, #4]
    2f84:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d004      	beq.n	2f96 <spi_m_sync_transfer+0x1a>
    2f8c:	683b      	ldr	r3, [r7, #0]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d001      	beq.n	2f96 <spi_m_sync_transfer+0x1a>
    2f92:	2301      	movs	r3, #1
    2f94:	e000      	b.n	2f98 <spi_m_sync_transfer+0x1c>
    2f96:	2300      	movs	r3, #0
    2f98:	f003 0301 	and.w	r3, r3, #1
    2f9c:	b2db      	uxtb	r3, r3
    2f9e:	22b3      	movs	r2, #179	; 0xb3
    2fa0:	490c      	ldr	r1, [pc, #48]	; (2fd4 <spi_m_sync_transfer+0x58>)
    2fa2:	4618      	mov	r0, r3
    2fa4:	4b0c      	ldr	r3, [pc, #48]	; (2fd8 <spi_m_sync_transfer+0x5c>)
    2fa6:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2fa8:	683b      	ldr	r3, [r7, #0]
    2faa:	681b      	ldr	r3, [r3, #0]
    2fac:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2fae:	683b      	ldr	r3, [r7, #0]
    2fb0:	685b      	ldr	r3, [r3, #4]
    2fb2:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2fb4:	683b      	ldr	r3, [r7, #0]
    2fb6:	689b      	ldr	r3, [r3, #8]
    2fb8:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2fba:	687b      	ldr	r3, [r7, #4]
    2fbc:	3304      	adds	r3, #4
    2fbe:	f107 020c 	add.w	r2, r7, #12
    2fc2:	4611      	mov	r1, r2
    2fc4:	4618      	mov	r0, r3
    2fc6:	4b05      	ldr	r3, [pc, #20]	; (2fdc <spi_m_sync_transfer+0x60>)
    2fc8:	4798      	blx	r3
    2fca:	4603      	mov	r3, r0
}
    2fcc:	4618      	mov	r0, r3
    2fce:	3718      	adds	r7, #24
    2fd0:	46bd      	mov	sp, r7
    2fd2:	bd80      	pop	{r7, pc}
    2fd4:	0000ff0c 	.word	0x0000ff0c
    2fd8:	00003e69 	.word	0x00003e69
    2fdc:	00007bd9 	.word	0x00007bd9

00002fe0 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2fe0:	b580      	push	{r7, lr}
    2fe2:	b082      	sub	sp, #8
    2fe4:	af00      	add	r7, sp, #0
    2fe6:	6078      	str	r0, [r7, #4]
    2fe8:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    2fea:	687b      	ldr	r3, [r7, #4]
    2fec:	2b00      	cmp	r3, #0
    2fee:	d004      	beq.n	2ffa <spi_m_sync_get_io_descriptor+0x1a>
    2ff0:	683b      	ldr	r3, [r7, #0]
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d001      	beq.n	2ffa <spi_m_sync_get_io_descriptor+0x1a>
    2ff6:	2301      	movs	r3, #1
    2ff8:	e000      	b.n	2ffc <spi_m_sync_get_io_descriptor+0x1c>
    2ffa:	2300      	movs	r3, #0
    2ffc:	f003 0301 	and.w	r3, r3, #1
    3000:	b2db      	uxtb	r3, r3
    3002:	22bd      	movs	r2, #189	; 0xbd
    3004:	4906      	ldr	r1, [pc, #24]	; (3020 <spi_m_sync_get_io_descriptor+0x40>)
    3006:	4618      	mov	r0, r3
    3008:	4b06      	ldr	r3, [pc, #24]	; (3024 <spi_m_sync_get_io_descriptor+0x44>)
    300a:	4798      	blx	r3
	*io = &spi->io;
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	f103 020c 	add.w	r2, r3, #12
    3012:	683b      	ldr	r3, [r7, #0]
    3014:	601a      	str	r2, [r3, #0]
	return 0;
    3016:	2300      	movs	r3, #0
}
    3018:	4618      	mov	r0, r3
    301a:	3708      	adds	r7, #8
    301c:	46bd      	mov	sp, r7
    301e:	bd80      	pop	{r7, pc}
    3020:	0000ff0c 	.word	0x0000ff0c
    3024:	00003e69 	.word	0x00003e69

00003028 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3028:	b480      	push	{r7}
    302a:	b083      	sub	sp, #12
    302c:	af00      	add	r7, sp, #0
    302e:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	681b      	ldr	r3, [r3, #0]
}
    3034:	4618      	mov	r0, r3
    3036:	370c      	adds	r7, #12
    3038:	46bd      	mov	sp, r7
    303a:	f85d 7b04 	ldr.w	r7, [sp], #4
    303e:	4770      	bx	lr

00003040 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    3040:	b480      	push	{r7}
    3042:	b083      	sub	sp, #12
    3044:	af00      	add	r7, sp, #0
    3046:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    3048:	687b      	ldr	r3, [r7, #4]
    304a:	2b00      	cmp	r3, #0
    304c:	d002      	beq.n	3054 <list_get_next_element+0x14>
    304e:	687b      	ldr	r3, [r7, #4]
    3050:	681b      	ldr	r3, [r3, #0]
    3052:	e000      	b.n	3056 <list_get_next_element+0x16>
    3054:	2300      	movs	r3, #0
}
    3056:	4618      	mov	r0, r3
    3058:	370c      	adds	r7, #12
    305a:	46bd      	mov	sp, r7
    305c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3060:	4770      	bx	lr
	...

00003064 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    3064:	b580      	push	{r7, lr}
    3066:	b084      	sub	sp, #16
    3068:	af00      	add	r7, sp, #0
    306a:	60f8      	str	r0, [r7, #12]
    306c:	60b9      	str	r1, [r7, #8]
    306e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    3070:	68fb      	ldr	r3, [r7, #12]
    3072:	2b00      	cmp	r3, #0
    3074:	d007      	beq.n	3086 <timer_init+0x22>
    3076:	68bb      	ldr	r3, [r7, #8]
    3078:	2b00      	cmp	r3, #0
    307a:	d004      	beq.n	3086 <timer_init+0x22>
    307c:	687b      	ldr	r3, [r7, #4]
    307e:	2b00      	cmp	r3, #0
    3080:	d001      	beq.n	3086 <timer_init+0x22>
    3082:	2301      	movs	r3, #1
    3084:	e000      	b.n	3088 <timer_init+0x24>
    3086:	2300      	movs	r3, #0
    3088:	f003 0301 	and.w	r3, r3, #1
    308c:	b2db      	uxtb	r3, r3
    308e:	223b      	movs	r2, #59	; 0x3b
    3090:	490c      	ldr	r1, [pc, #48]	; (30c4 <timer_init+0x60>)
    3092:	4618      	mov	r0, r3
    3094:	4b0c      	ldr	r3, [pc, #48]	; (30c8 <timer_init+0x64>)
    3096:	4798      	blx	r3
	descr->func = func;
    3098:	68fb      	ldr	r3, [r7, #12]
    309a:	687a      	ldr	r2, [r7, #4]
    309c:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    309e:	68fb      	ldr	r3, [r7, #12]
    30a0:	681b      	ldr	r3, [r3, #0]
    30a2:	681b      	ldr	r3, [r3, #0]
    30a4:	68fa      	ldr	r2, [r7, #12]
    30a6:	3204      	adds	r2, #4
    30a8:	68b9      	ldr	r1, [r7, #8]
    30aa:	4610      	mov	r0, r2
    30ac:	4798      	blx	r3
	descr->time                           = 0;
    30ae:	68fb      	ldr	r3, [r7, #12]
    30b0:	2200      	movs	r2, #0
    30b2:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    30b4:	68fb      	ldr	r3, [r7, #12]
    30b6:	4a05      	ldr	r2, [pc, #20]	; (30cc <timer_init+0x68>)
    30b8:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    30ba:	2300      	movs	r3, #0
}
    30bc:	4618      	mov	r0, r3
    30be:	3710      	adds	r7, #16
    30c0:	46bd      	mov	sp, r7
    30c2:	bd80      	pop	{r7, pc}
    30c4:	0000ff28 	.word	0x0000ff28
    30c8:	00003e69 	.word	0x00003e69
    30cc:	00003455 	.word	0x00003455

000030d0 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    30d0:	b580      	push	{r7, lr}
    30d2:	b082      	sub	sp, #8
    30d4:	af00      	add	r7, sp, #0
    30d6:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	2b00      	cmp	r3, #0
    30dc:	d005      	beq.n	30ea <timer_start+0x1a>
    30de:	687b      	ldr	r3, [r7, #4]
    30e0:	681b      	ldr	r3, [r3, #0]
    30e2:	2b00      	cmp	r3, #0
    30e4:	d001      	beq.n	30ea <timer_start+0x1a>
    30e6:	2301      	movs	r3, #1
    30e8:	e000      	b.n	30ec <timer_start+0x1c>
    30ea:	2300      	movs	r3, #0
    30ec:	f003 0301 	and.w	r3, r3, #1
    30f0:	b2db      	uxtb	r3, r3
    30f2:	2254      	movs	r2, #84	; 0x54
    30f4:	490e      	ldr	r1, [pc, #56]	; (3130 <timer_start+0x60>)
    30f6:	4618      	mov	r0, r3
    30f8:	4b0e      	ldr	r3, [pc, #56]	; (3134 <timer_start+0x64>)
    30fa:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	681b      	ldr	r3, [r3, #0]
    3100:	699b      	ldr	r3, [r3, #24]
    3102:	687a      	ldr	r2, [r7, #4]
    3104:	3204      	adds	r2, #4
    3106:	4610      	mov	r0, r2
    3108:	4798      	blx	r3
    310a:	4603      	mov	r3, r0
    310c:	2b00      	cmp	r3, #0
    310e:	d002      	beq.n	3116 <timer_start+0x46>
		return ERR_DENIED;
    3110:	f06f 0310 	mvn.w	r3, #16
    3114:	e007      	b.n	3126 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    3116:	687b      	ldr	r3, [r7, #4]
    3118:	681b      	ldr	r3, [r3, #0]
    311a:	689b      	ldr	r3, [r3, #8]
    311c:	687a      	ldr	r2, [r7, #4]
    311e:	3204      	adds	r2, #4
    3120:	4610      	mov	r0, r2
    3122:	4798      	blx	r3

	return ERR_NONE;
    3124:	2300      	movs	r3, #0
}
    3126:	4618      	mov	r0, r3
    3128:	3708      	adds	r7, #8
    312a:	46bd      	mov	sp, r7
    312c:	bd80      	pop	{r7, pc}
    312e:	bf00      	nop
    3130:	0000ff28 	.word	0x0000ff28
    3134:	00003e69 	.word	0x00003e69

00003138 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    3138:	b580      	push	{r7, lr}
    313a:	b082      	sub	sp, #8
    313c:	af00      	add	r7, sp, #0
    313e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3140:	687b      	ldr	r3, [r7, #4]
    3142:	2b00      	cmp	r3, #0
    3144:	d005      	beq.n	3152 <timer_stop+0x1a>
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	681b      	ldr	r3, [r3, #0]
    314a:	2b00      	cmp	r3, #0
    314c:	d001      	beq.n	3152 <timer_stop+0x1a>
    314e:	2301      	movs	r3, #1
    3150:	e000      	b.n	3154 <timer_stop+0x1c>
    3152:	2300      	movs	r3, #0
    3154:	f003 0301 	and.w	r3, r3, #1
    3158:	b2db      	uxtb	r3, r3
    315a:	2262      	movs	r2, #98	; 0x62
    315c:	490f      	ldr	r1, [pc, #60]	; (319c <timer_stop+0x64>)
    315e:	4618      	mov	r0, r3
    3160:	4b0f      	ldr	r3, [pc, #60]	; (31a0 <timer_stop+0x68>)
    3162:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	681b      	ldr	r3, [r3, #0]
    3168:	699b      	ldr	r3, [r3, #24]
    316a:	687a      	ldr	r2, [r7, #4]
    316c:	3204      	adds	r2, #4
    316e:	4610      	mov	r0, r2
    3170:	4798      	blx	r3
    3172:	4603      	mov	r3, r0
    3174:	f083 0301 	eor.w	r3, r3, #1
    3178:	b2db      	uxtb	r3, r3
    317a:	2b00      	cmp	r3, #0
    317c:	d002      	beq.n	3184 <timer_stop+0x4c>
		return ERR_DENIED;
    317e:	f06f 0310 	mvn.w	r3, #16
    3182:	e007      	b.n	3194 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	681b      	ldr	r3, [r3, #0]
    3188:	68db      	ldr	r3, [r3, #12]
    318a:	687a      	ldr	r2, [r7, #4]
    318c:	3204      	adds	r2, #4
    318e:	4610      	mov	r0, r2
    3190:	4798      	blx	r3

	return ERR_NONE;
    3192:	2300      	movs	r3, #0
}
    3194:	4618      	mov	r0, r3
    3196:	3708      	adds	r7, #8
    3198:	46bd      	mov	sp, r7
    319a:	bd80      	pop	{r7, pc}
    319c:	0000ff28 	.word	0x0000ff28
    31a0:	00003e69 	.word	0x00003e69

000031a4 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    31a4:	b580      	push	{r7, lr}
    31a6:	b084      	sub	sp, #16
    31a8:	af00      	add	r7, sp, #0
    31aa:	6078      	str	r0, [r7, #4]
    31ac:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	2b00      	cmp	r3, #0
    31b2:	d008      	beq.n	31c6 <timer_add_task+0x22>
    31b4:	683b      	ldr	r3, [r7, #0]
    31b6:	2b00      	cmp	r3, #0
    31b8:	d005      	beq.n	31c6 <timer_add_task+0x22>
    31ba:	687b      	ldr	r3, [r7, #4]
    31bc:	681b      	ldr	r3, [r3, #0]
    31be:	2b00      	cmp	r3, #0
    31c0:	d001      	beq.n	31c6 <timer_add_task+0x22>
    31c2:	2301      	movs	r3, #1
    31c4:	e000      	b.n	31c8 <timer_add_task+0x24>
    31c6:	2300      	movs	r3, #0
    31c8:	f003 0301 	and.w	r3, r3, #1
    31cc:	b2db      	uxtb	r3, r3
    31ce:	227b      	movs	r2, #123	; 0x7b
    31d0:	492f      	ldr	r1, [pc, #188]	; (3290 <timer_add_task+0xec>)
    31d2:	4618      	mov	r0, r3
    31d4:	4b2f      	ldr	r3, [pc, #188]	; (3294 <timer_add_task+0xf0>)
    31d6:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    31d8:	687b      	ldr	r3, [r7, #4]
    31da:	7f1b      	ldrb	r3, [r3, #28]
    31dc:	b2db      	uxtb	r3, r3
    31de:	f043 0301 	orr.w	r3, r3, #1
    31e2:	b2da      	uxtb	r2, r3
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	3318      	adds	r3, #24
    31ec:	6839      	ldr	r1, [r7, #0]
    31ee:	4618      	mov	r0, r3
    31f0:	4b29      	ldr	r3, [pc, #164]	; (3298 <timer_add_task+0xf4>)
    31f2:	4798      	blx	r3
    31f4:	4603      	mov	r3, r0
    31f6:	2b00      	cmp	r3, #0
    31f8:	d00f      	beq.n	321a <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    31fa:	687b      	ldr	r3, [r7, #4]
    31fc:	7f1b      	ldrb	r3, [r3, #28]
    31fe:	b2db      	uxtb	r3, r3
    3200:	f023 0301 	bic.w	r3, r3, #1
    3204:	b2da      	uxtb	r2, r3
    3206:	687b      	ldr	r3, [r7, #4]
    3208:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    320a:	2280      	movs	r2, #128	; 0x80
    320c:	4920      	ldr	r1, [pc, #128]	; (3290 <timer_add_task+0xec>)
    320e:	2000      	movs	r0, #0
    3210:	4b20      	ldr	r3, [pc, #128]	; (3294 <timer_add_task+0xf0>)
    3212:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3214:	f06f 0311 	mvn.w	r3, #17
    3218:	e035      	b.n	3286 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    321a:	687b      	ldr	r3, [r7, #4]
    321c:	695a      	ldr	r2, [r3, #20]
    321e:	683b      	ldr	r3, [r7, #0]
    3220:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	f103 0018 	add.w	r0, r3, #24
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	695b      	ldr	r3, [r3, #20]
    322c:	461a      	mov	r2, r3
    322e:	6839      	ldr	r1, [r7, #0]
    3230:	4b1a      	ldr	r3, [pc, #104]	; (329c <timer_add_task+0xf8>)
    3232:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3234:	687b      	ldr	r3, [r7, #4]
    3236:	7f1b      	ldrb	r3, [r3, #28]
    3238:	b2db      	uxtb	r3, r3
    323a:	f023 0301 	bic.w	r3, r3, #1
    323e:	b2da      	uxtb	r2, r3
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	7f1b      	ldrb	r3, [r3, #28]
    3248:	b2db      	uxtb	r3, r3
    324a:	f003 0302 	and.w	r3, r3, #2
    324e:	2b00      	cmp	r3, #0
    3250:	d018      	beq.n	3284 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    3252:	f107 030c 	add.w	r3, r7, #12
    3256:	4618      	mov	r0, r3
    3258:	4b11      	ldr	r3, [pc, #68]	; (32a0 <timer_add_task+0xfc>)
    325a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	7f1b      	ldrb	r3, [r3, #28]
    3260:	b2db      	uxtb	r3, r3
    3262:	f023 0302 	bic.w	r3, r3, #2
    3266:	b2da      	uxtb	r2, r3
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	681b      	ldr	r3, [r3, #0]
    3270:	69db      	ldr	r3, [r3, #28]
    3272:	687a      	ldr	r2, [r7, #4]
    3274:	3204      	adds	r2, #4
    3276:	4610      	mov	r0, r2
    3278:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    327a:	f107 030c 	add.w	r3, r7, #12
    327e:	4618      	mov	r0, r3
    3280:	4b08      	ldr	r3, [pc, #32]	; (32a4 <timer_add_task+0x100>)
    3282:	4798      	blx	r3
	}

	return ERR_NONE;
    3284:	2300      	movs	r3, #0
}
    3286:	4618      	mov	r0, r3
    3288:	3710      	adds	r7, #16
    328a:	46bd      	mov	sp, r7
    328c:	bd80      	pop	{r7, pc}
    328e:	bf00      	nop
    3290:	0000ff28 	.word	0x0000ff28
    3294:	00003e69 	.word	0x00003e69
    3298:	00003e91 	.word	0x00003e91
    329c:	000033a5 	.word	0x000033a5
    32a0:	0000bfc5 	.word	0x0000bfc5
    32a4:	0000bfeb 	.word	0x0000bfeb

000032a8 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	b084      	sub	sp, #16
    32ac:	af00      	add	r7, sp, #0
    32ae:	6078      	str	r0, [r7, #4]
    32b0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    32b2:	687b      	ldr	r3, [r7, #4]
    32b4:	2b00      	cmp	r3, #0
    32b6:	d008      	beq.n	32ca <timer_remove_task+0x22>
    32b8:	683b      	ldr	r3, [r7, #0]
    32ba:	2b00      	cmp	r3, #0
    32bc:	d005      	beq.n	32ca <timer_remove_task+0x22>
    32be:	687b      	ldr	r3, [r7, #4]
    32c0:	681b      	ldr	r3, [r3, #0]
    32c2:	2b00      	cmp	r3, #0
    32c4:	d001      	beq.n	32ca <timer_remove_task+0x22>
    32c6:	2301      	movs	r3, #1
    32c8:	e000      	b.n	32cc <timer_remove_task+0x24>
    32ca:	2300      	movs	r3, #0
    32cc:	f003 0301 	and.w	r3, r3, #1
    32d0:	b2db      	uxtb	r3, r3
    32d2:	2296      	movs	r2, #150	; 0x96
    32d4:	492d      	ldr	r1, [pc, #180]	; (338c <timer_remove_task+0xe4>)
    32d6:	4618      	mov	r0, r3
    32d8:	4b2d      	ldr	r3, [pc, #180]	; (3390 <timer_remove_task+0xe8>)
    32da:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	7f1b      	ldrb	r3, [r3, #28]
    32e0:	b2db      	uxtb	r3, r3
    32e2:	f043 0301 	orr.w	r3, r3, #1
    32e6:	b2da      	uxtb	r2, r3
    32e8:	687b      	ldr	r3, [r7, #4]
    32ea:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    32ec:	687b      	ldr	r3, [r7, #4]
    32ee:	3318      	adds	r3, #24
    32f0:	6839      	ldr	r1, [r7, #0]
    32f2:	4618      	mov	r0, r3
    32f4:	4b27      	ldr	r3, [pc, #156]	; (3394 <timer_remove_task+0xec>)
    32f6:	4798      	blx	r3
    32f8:	4603      	mov	r3, r0
    32fa:	f083 0301 	eor.w	r3, r3, #1
    32fe:	b2db      	uxtb	r3, r3
    3300:	2b00      	cmp	r3, #0
    3302:	d00f      	beq.n	3324 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3304:	687b      	ldr	r3, [r7, #4]
    3306:	7f1b      	ldrb	r3, [r3, #28]
    3308:	b2db      	uxtb	r3, r3
    330a:	f023 0301 	bic.w	r3, r3, #1
    330e:	b2da      	uxtb	r2, r3
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3314:	229b      	movs	r2, #155	; 0x9b
    3316:	491d      	ldr	r1, [pc, #116]	; (338c <timer_remove_task+0xe4>)
    3318:	2000      	movs	r0, #0
    331a:	4b1d      	ldr	r3, [pc, #116]	; (3390 <timer_remove_task+0xe8>)
    331c:	4798      	blx	r3
		return ERR_NOT_FOUND;
    331e:	f06f 0309 	mvn.w	r3, #9
    3322:	e02e      	b.n	3382 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    3324:	687b      	ldr	r3, [r7, #4]
    3326:	3318      	adds	r3, #24
    3328:	6839      	ldr	r1, [r7, #0]
    332a:	4618      	mov	r0, r3
    332c:	4b1a      	ldr	r3, [pc, #104]	; (3398 <timer_remove_task+0xf0>)
    332e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3330:	687b      	ldr	r3, [r7, #4]
    3332:	7f1b      	ldrb	r3, [r3, #28]
    3334:	b2db      	uxtb	r3, r3
    3336:	f023 0301 	bic.w	r3, r3, #1
    333a:	b2da      	uxtb	r2, r3
    333c:	687b      	ldr	r3, [r7, #4]
    333e:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	7f1b      	ldrb	r3, [r3, #28]
    3344:	b2db      	uxtb	r3, r3
    3346:	f003 0302 	and.w	r3, r3, #2
    334a:	2b00      	cmp	r3, #0
    334c:	d018      	beq.n	3380 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    334e:	f107 030c 	add.w	r3, r7, #12
    3352:	4618      	mov	r0, r3
    3354:	4b11      	ldr	r3, [pc, #68]	; (339c <timer_remove_task+0xf4>)
    3356:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3358:	687b      	ldr	r3, [r7, #4]
    335a:	7f1b      	ldrb	r3, [r3, #28]
    335c:	b2db      	uxtb	r3, r3
    335e:	f023 0302 	bic.w	r3, r3, #2
    3362:	b2da      	uxtb	r2, r3
    3364:	687b      	ldr	r3, [r7, #4]
    3366:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	681b      	ldr	r3, [r3, #0]
    336c:	69db      	ldr	r3, [r3, #28]
    336e:	687a      	ldr	r2, [r7, #4]
    3370:	3204      	adds	r2, #4
    3372:	4610      	mov	r0, r2
    3374:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3376:	f107 030c 	add.w	r3, r7, #12
    337a:	4618      	mov	r0, r3
    337c:	4b08      	ldr	r3, [pc, #32]	; (33a0 <timer_remove_task+0xf8>)
    337e:	4798      	blx	r3
	}

	return ERR_NONE;
    3380:	2300      	movs	r3, #0
}
    3382:	4618      	mov	r0, r3
    3384:	3710      	adds	r7, #16
    3386:	46bd      	mov	sp, r7
    3388:	bd80      	pop	{r7, pc}
    338a:	bf00      	nop
    338c:	0000ff28 	.word	0x0000ff28
    3390:	00003e69 	.word	0x00003e69
    3394:	00003e91 	.word	0x00003e91
    3398:	00003ff3 	.word	0x00003ff3
    339c:	0000bfc5 	.word	0x0000bfc5
    33a0:	0000bfeb 	.word	0x0000bfeb

000033a4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    33a4:	b580      	push	{r7, lr}
    33a6:	b088      	sub	sp, #32
    33a8:	af00      	add	r7, sp, #0
    33aa:	60f8      	str	r0, [r7, #12]
    33ac:	60b9      	str	r1, [r7, #8]
    33ae:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    33b0:	2300      	movs	r3, #0
    33b2:	61bb      	str	r3, [r7, #24]
    33b4:	68f8      	ldr	r0, [r7, #12]
    33b6:	4b23      	ldr	r3, [pc, #140]	; (3444 <timer_add_timer_task+0xa0>)
    33b8:	4798      	blx	r3
    33ba:	6138      	str	r0, [r7, #16]

	if (!head) {
    33bc:	693b      	ldr	r3, [r7, #16]
    33be:	2b00      	cmp	r3, #0
    33c0:	d104      	bne.n	33cc <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    33c2:	68b9      	ldr	r1, [r7, #8]
    33c4:	68f8      	ldr	r0, [r7, #12]
    33c6:	4b20      	ldr	r3, [pc, #128]	; (3448 <timer_add_timer_task+0xa4>)
    33c8:	4798      	blx	r3
		return;
    33ca:	e037      	b.n	343c <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    33cc:	693b      	ldr	r3, [r7, #16]
    33ce:	61fb      	str	r3, [r7, #28]
    33d0:	e022      	b.n	3418 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    33d2:	69fb      	ldr	r3, [r7, #28]
    33d4:	685a      	ldr	r2, [r3, #4]
    33d6:	687b      	ldr	r3, [r7, #4]
    33d8:	429a      	cmp	r2, r3
    33da:	d808      	bhi.n	33ee <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    33dc:	69fb      	ldr	r3, [r7, #28]
    33de:	689a      	ldr	r2, [r3, #8]
    33e0:	69fb      	ldr	r3, [r7, #28]
    33e2:	6859      	ldr	r1, [r3, #4]
    33e4:	687b      	ldr	r3, [r7, #4]
    33e6:	1acb      	subs	r3, r1, r3
    33e8:	4413      	add	r3, r2
    33ea:	617b      	str	r3, [r7, #20]
    33ec:	e009      	b.n	3402 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    33ee:	69fb      	ldr	r3, [r7, #28]
    33f0:	689a      	ldr	r2, [r3, #8]
    33f2:	69fb      	ldr	r3, [r7, #28]
    33f4:	685b      	ldr	r3, [r3, #4]
    33f6:	441a      	add	r2, r3
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	425b      	negs	r3, r3
    33fc:	4413      	add	r3, r2
    33fe:	3301      	adds	r3, #1
    3400:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    3402:	68bb      	ldr	r3, [r7, #8]
    3404:	689a      	ldr	r2, [r3, #8]
    3406:	697b      	ldr	r3, [r7, #20]
    3408:	429a      	cmp	r2, r3
    340a:	d909      	bls.n	3420 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    340c:	69fb      	ldr	r3, [r7, #28]
    340e:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3410:	69f8      	ldr	r0, [r7, #28]
    3412:	4b0e      	ldr	r3, [pc, #56]	; (344c <timer_add_timer_task+0xa8>)
    3414:	4798      	blx	r3
    3416:	61f8      	str	r0, [r7, #28]
    3418:	69fb      	ldr	r3, [r7, #28]
    341a:	2b00      	cmp	r3, #0
    341c:	d1d9      	bne.n	33d2 <timer_add_timer_task+0x2e>
    341e:	e000      	b.n	3422 <timer_add_timer_task+0x7e>
			break;
    3420:	bf00      	nop
	}

	if (it == head) {
    3422:	69fa      	ldr	r2, [r7, #28]
    3424:	693b      	ldr	r3, [r7, #16]
    3426:	429a      	cmp	r2, r3
    3428:	d104      	bne.n	3434 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    342a:	68b9      	ldr	r1, [r7, #8]
    342c:	68f8      	ldr	r0, [r7, #12]
    342e:	4b06      	ldr	r3, [pc, #24]	; (3448 <timer_add_timer_task+0xa4>)
    3430:	4798      	blx	r3
    3432:	e003      	b.n	343c <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    3434:	68b9      	ldr	r1, [r7, #8]
    3436:	69b8      	ldr	r0, [r7, #24]
    3438:	4b05      	ldr	r3, [pc, #20]	; (3450 <timer_add_timer_task+0xac>)
    343a:	4798      	blx	r3
	}
}
    343c:	3720      	adds	r7, #32
    343e:	46bd      	mov	sp, r7
    3440:	bd80      	pop	{r7, pc}
    3442:	bf00      	nop
    3444:	00003029 	.word	0x00003029
    3448:	00003ec9 	.word	0x00003ec9
    344c:	00003041 	.word	0x00003041
    3450:	00003f21 	.word	0x00003f21

00003454 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    3454:	b580      	push	{r7, lr}
    3456:	b086      	sub	sp, #24
    3458:	af00      	add	r7, sp, #0
    345a:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	3b04      	subs	r3, #4
    3460:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    3462:	693b      	ldr	r3, [r7, #16]
    3464:	3318      	adds	r3, #24
    3466:	4618      	mov	r0, r3
    3468:	4b27      	ldr	r3, [pc, #156]	; (3508 <timer_process_counted+0xb4>)
    346a:	4798      	blx	r3
    346c:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    346e:	693b      	ldr	r3, [r7, #16]
    3470:	695b      	ldr	r3, [r3, #20]
    3472:	1c5a      	adds	r2, r3, #1
    3474:	693b      	ldr	r3, [r7, #16]
    3476:	615a      	str	r2, [r3, #20]
    3478:	693b      	ldr	r3, [r7, #16]
    347a:	695b      	ldr	r3, [r3, #20]
    347c:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    347e:	693b      	ldr	r3, [r7, #16]
    3480:	7f1b      	ldrb	r3, [r3, #28]
    3482:	b2db      	uxtb	r3, r3
    3484:	f003 0301 	and.w	r3, r3, #1
    3488:	2b00      	cmp	r3, #0
    348a:	d106      	bne.n	349a <timer_process_counted+0x46>
    348c:	693b      	ldr	r3, [r7, #16]
    348e:	7f1b      	ldrb	r3, [r3, #28]
    3490:	b2db      	uxtb	r3, r3
    3492:	f003 0302 	and.w	r3, r3, #2
    3496:	2b00      	cmp	r3, #0
    3498:	d027      	beq.n	34ea <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    349a:	693b      	ldr	r3, [r7, #16]
    349c:	7f1b      	ldrb	r3, [r3, #28]
    349e:	b2db      	uxtb	r3, r3
    34a0:	f043 0302 	orr.w	r3, r3, #2
    34a4:	b2da      	uxtb	r2, r3
    34a6:	693b      	ldr	r3, [r7, #16]
    34a8:	771a      	strb	r2, [r3, #28]
		return;
    34aa:	e029      	b.n	3500 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    34ac:	697b      	ldr	r3, [r7, #20]
    34ae:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    34b0:	693b      	ldr	r3, [r7, #16]
    34b2:	3318      	adds	r3, #24
    34b4:	4618      	mov	r0, r3
    34b6:	4b15      	ldr	r3, [pc, #84]	; (350c <timer_process_counted+0xb8>)
    34b8:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    34ba:	68bb      	ldr	r3, [r7, #8]
    34bc:	7c1b      	ldrb	r3, [r3, #16]
    34be:	2b01      	cmp	r3, #1
    34c0:	d109      	bne.n	34d6 <timer_process_counted+0x82>
			tmp->time_label = time;
    34c2:	68bb      	ldr	r3, [r7, #8]
    34c4:	68fa      	ldr	r2, [r7, #12]
    34c6:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    34c8:	693b      	ldr	r3, [r7, #16]
    34ca:	3318      	adds	r3, #24
    34cc:	68fa      	ldr	r2, [r7, #12]
    34ce:	68b9      	ldr	r1, [r7, #8]
    34d0:	4618      	mov	r0, r3
    34d2:	4b0f      	ldr	r3, [pc, #60]	; (3510 <timer_process_counted+0xbc>)
    34d4:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    34d6:	693b      	ldr	r3, [r7, #16]
    34d8:	3318      	adds	r3, #24
    34da:	4618      	mov	r0, r3
    34dc:	4b0a      	ldr	r3, [pc, #40]	; (3508 <timer_process_counted+0xb4>)
    34de:	4798      	blx	r3
    34e0:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    34e2:	68bb      	ldr	r3, [r7, #8]
    34e4:	68db      	ldr	r3, [r3, #12]
    34e6:	68b8      	ldr	r0, [r7, #8]
    34e8:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    34ea:	697b      	ldr	r3, [r7, #20]
    34ec:	2b00      	cmp	r3, #0
    34ee:	d007      	beq.n	3500 <timer_process_counted+0xac>
    34f0:	697b      	ldr	r3, [r7, #20]
    34f2:	685b      	ldr	r3, [r3, #4]
    34f4:	68fa      	ldr	r2, [r7, #12]
    34f6:	1ad2      	subs	r2, r2, r3
    34f8:	697b      	ldr	r3, [r7, #20]
    34fa:	689b      	ldr	r3, [r3, #8]
    34fc:	429a      	cmp	r2, r3
    34fe:	d2d5      	bcs.n	34ac <timer_process_counted+0x58>
	}
}
    3500:	3718      	adds	r7, #24
    3502:	46bd      	mov	sp, r7
    3504:	bd80      	pop	{r7, pc}
    3506:	bf00      	nop
    3508:	00003029 	.word	0x00003029
    350c:	00003fc1 	.word	0x00003fc1
    3510:	000033a5 	.word	0x000033a5

00003514 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    3514:	b480      	push	{r7}
    3516:	b085      	sub	sp, #20
    3518:	af00      	add	r7, sp, #0
    351a:	4603      	mov	r3, r0
    351c:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    351e:	2300      	movs	r3, #0
    3520:	73fb      	strb	r3, [r7, #15]
    3522:	e029      	b.n	3578 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3524:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3528:	4a19      	ldr	r2, [pc, #100]	; (3590 <_usb_d_find_ep+0x7c>)
    352a:	015b      	lsls	r3, r3, #5
    352c:	4413      	add	r3, r2
    352e:	3301      	adds	r3, #1
    3530:	781b      	ldrb	r3, [r3, #0]
    3532:	79fa      	ldrb	r2, [r7, #7]
    3534:	429a      	cmp	r2, r3
    3536:	d102      	bne.n	353e <_usb_d_find_ep+0x2a>
			return i;
    3538:	f997 300f 	ldrsb.w	r3, [r7, #15]
    353c:	e022      	b.n	3584 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    353e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3542:	4a13      	ldr	r2, [pc, #76]	; (3590 <_usb_d_find_ep+0x7c>)
    3544:	015b      	lsls	r3, r3, #5
    3546:	4413      	add	r3, r2
    3548:	781b      	ldrb	r3, [r3, #0]
    354a:	2b00      	cmp	r3, #0
    354c:	d10e      	bne.n	356c <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    354e:	79fb      	ldrb	r3, [r7, #7]
    3550:	f003 030f 	and.w	r3, r3, #15
    3554:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3558:	490d      	ldr	r1, [pc, #52]	; (3590 <_usb_d_find_ep+0x7c>)
    355a:	0152      	lsls	r2, r2, #5
    355c:	440a      	add	r2, r1
    355e:	3201      	adds	r2, #1
    3560:	7812      	ldrb	r2, [r2, #0]
    3562:	4293      	cmp	r3, r2
    3564:	d102      	bne.n	356c <_usb_d_find_ep+0x58>
			return i;
    3566:	f997 300f 	ldrsb.w	r3, [r7, #15]
    356a:	e00b      	b.n	3584 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    356c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3570:	b2db      	uxtb	r3, r3
    3572:	3301      	adds	r3, #1
    3574:	b2db      	uxtb	r3, r3
    3576:	73fb      	strb	r3, [r7, #15]
    3578:	f997 300f 	ldrsb.w	r3, [r7, #15]
    357c:	2b03      	cmp	r3, #3
    357e:	ddd1      	ble.n	3524 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3580:	f04f 33ff 	mov.w	r3, #4294967295
}
    3584:	4618      	mov	r0, r3
    3586:	3714      	adds	r7, #20
    3588:	46bd      	mov	sp, r7
    358a:	f85d 7b04 	ldr.w	r7, [sp], #4
    358e:	4770      	bx	lr
    3590:	20000934 	.word	0x20000934

00003594 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3594:	b580      	push	{r7, lr}
    3596:	b088      	sub	sp, #32
    3598:	af00      	add	r7, sp, #0
    359a:	60ba      	str	r2, [r7, #8]
    359c:	607b      	str	r3, [r7, #4]
    359e:	4603      	mov	r3, r0
    35a0:	73fb      	strb	r3, [r7, #15]
    35a2:	460b      	mov	r3, r1
    35a4:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    35a6:	68bb      	ldr	r3, [r7, #8]
    35a8:	617b      	str	r3, [r7, #20]
    35aa:	687b      	ldr	r3, [r7, #4]
    35ac:	61bb      	str	r3, [r7, #24]
    35ae:	7bbb      	ldrb	r3, [r7, #14]
    35b0:	2b00      	cmp	r3, #0
    35b2:	d004      	beq.n	35be <_usb_d_trans+0x2a>
    35b4:	7bfb      	ldrb	r3, [r7, #15]
    35b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    35ba:	b2db      	uxtb	r3, r3
    35bc:	e003      	b.n	35c6 <_usb_d_trans+0x32>
    35be:	7bfb      	ldrb	r3, [r7, #15]
    35c0:	f003 030f 	and.w	r3, r3, #15
    35c4:	b2db      	uxtb	r3, r3
    35c6:	773b      	strb	r3, [r7, #28]
    35c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    35cc:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    35ce:	f107 0314 	add.w	r3, r7, #20
    35d2:	4618      	mov	r0, r3
    35d4:	4b03      	ldr	r3, [pc, #12]	; (35e4 <_usb_d_trans+0x50>)
    35d6:	4798      	blx	r3
    35d8:	4603      	mov	r3, r0
}
    35da:	4618      	mov	r0, r3
    35dc:	3720      	adds	r7, #32
    35de:	46bd      	mov	sp, r7
    35e0:	bd80      	pop	{r7, pc}
    35e2:	bf00      	nop
    35e4:	0000b5f9 	.word	0x0000b5f9

000035e8 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    35e8:	b480      	push	{r7}
    35ea:	b085      	sub	sp, #20
    35ec:	af00      	add	r7, sp, #0
    35ee:	60f8      	str	r0, [r7, #12]
    35f0:	60b9      	str	r1, [r7, #8]
    35f2:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    35f4:	2300      	movs	r3, #0
}
    35f6:	4618      	mov	r0, r3
    35f8:	3714      	adds	r7, #20
    35fa:	46bd      	mov	sp, r7
    35fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3600:	4770      	bx	lr
	...

00003604 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3604:	b580      	push	{r7, lr}
    3606:	b086      	sub	sp, #24
    3608:	af00      	add	r7, sp, #0
    360a:	4603      	mov	r3, r0
    360c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    360e:	79fb      	ldrb	r3, [r7, #7]
    3610:	4618      	mov	r0, r3
    3612:	4b2a      	ldr	r3, [pc, #168]	; (36bc <usb_d_cb_trans_setup+0xb8>)
    3614:	4798      	blx	r3
    3616:	4603      	mov	r3, r0
    3618:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    361a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    361e:	015b      	lsls	r3, r3, #5
    3620:	4a27      	ldr	r2, [pc, #156]	; (36c0 <usb_d_cb_trans_setup+0xbc>)
    3622:	4413      	add	r3, r2
    3624:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    3626:	693b      	ldr	r3, [r7, #16]
    3628:	330c      	adds	r3, #12
    362a:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    362c:	79fb      	ldrb	r3, [r7, #7]
    362e:	68f9      	ldr	r1, [r7, #12]
    3630:	4618      	mov	r0, r3
    3632:	4b24      	ldr	r3, [pc, #144]	; (36c4 <usb_d_cb_trans_setup+0xc0>)
    3634:	4798      	blx	r3
    3636:	4603      	mov	r3, r0
    3638:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    363a:	7afb      	ldrb	r3, [r7, #11]
    363c:	2b08      	cmp	r3, #8
    363e:	d00d      	beq.n	365c <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3640:	79fb      	ldrb	r3, [r7, #7]
    3642:	2101      	movs	r1, #1
    3644:	4618      	mov	r0, r3
    3646:	4b20      	ldr	r3, [pc, #128]	; (36c8 <usb_d_cb_trans_setup+0xc4>)
    3648:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    364a:	79fb      	ldrb	r3, [r7, #7]
    364c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3650:	b2db      	uxtb	r3, r3
    3652:	2101      	movs	r1, #1
    3654:	4618      	mov	r0, r3
    3656:	4b1c      	ldr	r3, [pc, #112]	; (36c8 <usb_d_cb_trans_setup+0xc4>)
    3658:	4798      	blx	r3
		return;
    365a:	e02b      	b.n	36b4 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    365c:	79fb      	ldrb	r3, [r7, #7]
    365e:	2100      	movs	r1, #0
    3660:	4618      	mov	r0, r3
    3662:	4b19      	ldr	r3, [pc, #100]	; (36c8 <usb_d_cb_trans_setup+0xc4>)
    3664:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    3666:	79fb      	ldrb	r3, [r7, #7]
    3668:	f063 037f 	orn	r3, r3, #127	; 0x7f
    366c:	b2db      	uxtb	r3, r3
    366e:	2100      	movs	r1, #0
    3670:	4618      	mov	r0, r3
    3672:	4b15      	ldr	r3, [pc, #84]	; (36c8 <usb_d_cb_trans_setup+0xc4>)
    3674:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    3676:	693b      	ldr	r3, [r7, #16]
    3678:	2201      	movs	r2, #1
    367a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    367c:	693b      	ldr	r3, [r7, #16]
    367e:	695b      	ldr	r3, [r3, #20]
    3680:	79fa      	ldrb	r2, [r7, #7]
    3682:	68f9      	ldr	r1, [r7, #12]
    3684:	4610      	mov	r0, r2
    3686:	4798      	blx	r3
    3688:	4603      	mov	r3, r0
    368a:	f083 0301 	eor.w	r3, r3, #1
    368e:	b2db      	uxtb	r3, r3
    3690:	2b00      	cmp	r3, #0
    3692:	d00f      	beq.n	36b4 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3694:	693b      	ldr	r3, [r7, #16]
    3696:	2205      	movs	r2, #5
    3698:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    369a:	79fb      	ldrb	r3, [r7, #7]
    369c:	2101      	movs	r1, #1
    369e:	4618      	mov	r0, r3
    36a0:	4b09      	ldr	r3, [pc, #36]	; (36c8 <usb_d_cb_trans_setup+0xc4>)
    36a2:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    36a4:	79fb      	ldrb	r3, [r7, #7]
    36a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    36aa:	b2db      	uxtb	r3, r3
    36ac:	2101      	movs	r1, #1
    36ae:	4618      	mov	r0, r3
    36b0:	4b05      	ldr	r3, [pc, #20]	; (36c8 <usb_d_cb_trans_setup+0xc4>)
    36b2:	4798      	blx	r3
	}
}
    36b4:	3718      	adds	r7, #24
    36b6:	46bd      	mov	sp, r7
    36b8:	bd80      	pop	{r7, pc}
    36ba:	bf00      	nop
    36bc:	00003515 	.word	0x00003515
    36c0:	20000934 	.word	0x20000934
    36c4:	0000b551 	.word	0x0000b551
    36c8:	0000b3c9 	.word	0x0000b3c9

000036cc <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    36cc:	b580      	push	{r7, lr}
    36ce:	b084      	sub	sp, #16
    36d0:	af00      	add	r7, sp, #0
    36d2:	4603      	mov	r3, r0
    36d4:	6039      	str	r1, [r7, #0]
    36d6:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    36d8:	79fb      	ldrb	r3, [r7, #7]
    36da:	4618      	mov	r0, r3
    36dc:	4b0d      	ldr	r3, [pc, #52]	; (3714 <usb_d_cb_trans_more+0x48>)
    36de:	4798      	blx	r3
    36e0:	4603      	mov	r3, r0
    36e2:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    36e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    36e8:	015b      	lsls	r3, r3, #5
    36ea:	4a0b      	ldr	r2, [pc, #44]	; (3718 <usb_d_cb_trans_more+0x4c>)
    36ec:	4413      	add	r3, r2
    36ee:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    36f0:	68bb      	ldr	r3, [r7, #8]
    36f2:	789b      	ldrb	r3, [r3, #2]
    36f4:	2b03      	cmp	r3, #3
    36f6:	d107      	bne.n	3708 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    36f8:	68bb      	ldr	r3, [r7, #8]
    36fa:	699b      	ldr	r3, [r3, #24]
    36fc:	79fa      	ldrb	r2, [r7, #7]
    36fe:	6839      	ldr	r1, [r7, #0]
    3700:	4610      	mov	r0, r2
    3702:	4798      	blx	r3
    3704:	4603      	mov	r3, r0
    3706:	e000      	b.n	370a <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3708:	2300      	movs	r3, #0
}
    370a:	4618      	mov	r0, r3
    370c:	3710      	adds	r7, #16
    370e:	46bd      	mov	sp, r7
    3710:	bd80      	pop	{r7, pc}
    3712:	bf00      	nop
    3714:	00003515 	.word	0x00003515
    3718:	20000934 	.word	0x20000934

0000371c <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    371c:	b590      	push	{r4, r7, lr}
    371e:	b087      	sub	sp, #28
    3720:	af02      	add	r7, sp, #8
    3722:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3724:	687b      	ldr	r3, [r7, #4]
    3726:	789b      	ldrb	r3, [r3, #2]
    3728:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    372a:	687b      	ldr	r3, [r7, #4]
    372c:	7b1b      	ldrb	r3, [r3, #12]
    372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3732:	2b00      	cmp	r3, #0
    3734:	bf14      	ite	ne
    3736:	2301      	movne	r3, #1
    3738:	2300      	moveq	r3, #0
    373a:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    373c:	7bfb      	ldrb	r3, [r7, #15]
    373e:	2b03      	cmp	r3, #3
    3740:	d13a      	bne.n	37b8 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	69db      	ldr	r3, [r3, #28]
    3746:	687a      	ldr	r2, [r7, #4]
    3748:	7850      	ldrb	r0, [r2, #1]
    374a:	687a      	ldr	r2, [r7, #4]
    374c:	320c      	adds	r2, #12
    374e:	2101      	movs	r1, #1
    3750:	4798      	blx	r3
    3752:	4603      	mov	r3, r0
    3754:	737b      	strb	r3, [r7, #13]
		if (err) {
    3756:	7b7b      	ldrb	r3, [r7, #13]
    3758:	2b00      	cmp	r3, #0
    375a:	d015      	beq.n	3788 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    375c:	687b      	ldr	r3, [r7, #4]
    375e:	2205      	movs	r2, #5
    3760:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    3762:	687b      	ldr	r3, [r7, #4]
    3764:	2202      	movs	r2, #2
    3766:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3768:	7bbb      	ldrb	r3, [r7, #14]
    376a:	2b00      	cmp	r3, #0
    376c:	d002      	beq.n	3774 <usb_d_ctrl_trans_done+0x58>
    376e:	687b      	ldr	r3, [r7, #4]
    3770:	785b      	ldrb	r3, [r3, #1]
    3772:	e004      	b.n	377e <usb_d_ctrl_trans_done+0x62>
    3774:	687b      	ldr	r3, [r7, #4]
    3776:	785b      	ldrb	r3, [r3, #1]
    3778:	f063 037f 	orn	r3, r3, #127	; 0x7f
    377c:	b2db      	uxtb	r3, r3
    377e:	2101      	movs	r1, #1
    3780:	4618      	mov	r0, r3
    3782:	4b15      	ldr	r3, [pc, #84]	; (37d8 <usb_d_ctrl_trans_done+0xbc>)
    3784:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    3786:	e022      	b.n	37ce <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	2204      	movs	r2, #4
    378c:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    378e:	687b      	ldr	r3, [r7, #4]
    3790:	7858      	ldrb	r0, [r3, #1]
    3792:	7bbb      	ldrb	r3, [r7, #14]
    3794:	2b00      	cmp	r3, #0
    3796:	bf14      	ite	ne
    3798:	2301      	movne	r3, #1
    379a:	2300      	moveq	r3, #0
    379c:	b2db      	uxtb	r3, r3
    379e:	f083 0301 	eor.w	r3, r3, #1
    37a2:	b2db      	uxtb	r3, r3
    37a4:	f003 0301 	and.w	r3, r3, #1
    37a8:	b2d9      	uxtb	r1, r3
    37aa:	2301      	movs	r3, #1
    37ac:	9300      	str	r3, [sp, #0]
    37ae:	2300      	movs	r3, #0
    37b0:	2200      	movs	r2, #0
    37b2:	4c0a      	ldr	r4, [pc, #40]	; (37dc <usb_d_ctrl_trans_done+0xc0>)
    37b4:	47a0      	blx	r4
}
    37b6:	e00a      	b.n	37ce <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    37b8:	687b      	ldr	r3, [r7, #4]
    37ba:	69db      	ldr	r3, [r3, #28]
    37bc:	687a      	ldr	r2, [r7, #4]
    37be:	7850      	ldrb	r0, [r2, #1]
    37c0:	687a      	ldr	r2, [r7, #4]
    37c2:	320c      	adds	r2, #12
    37c4:	2100      	movs	r1, #0
    37c6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    37c8:	687b      	ldr	r3, [r7, #4]
    37ca:	2202      	movs	r2, #2
    37cc:	709a      	strb	r2, [r3, #2]
}
    37ce:	bf00      	nop
    37d0:	3714      	adds	r7, #20
    37d2:	46bd      	mov	sp, r7
    37d4:	bd90      	pop	{r4, r7, pc}
    37d6:	bf00      	nop
    37d8:	0000b3c9 	.word	0x0000b3c9
    37dc:	00003595 	.word	0x00003595

000037e0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    37e0:	b580      	push	{r7, lr}
    37e2:	b086      	sub	sp, #24
    37e4:	af00      	add	r7, sp, #0
    37e6:	4603      	mov	r3, r0
    37e8:	60b9      	str	r1, [r7, #8]
    37ea:	607a      	str	r2, [r7, #4]
    37ec:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    37ee:	7bfb      	ldrb	r3, [r7, #15]
    37f0:	4618      	mov	r0, r3
    37f2:	4b2f      	ldr	r3, [pc, #188]	; (38b0 <_usb_d_cb_trans_done+0xd0>)
    37f4:	4798      	blx	r3
    37f6:	4603      	mov	r3, r0
    37f8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    37fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37fe:	015b      	lsls	r3, r3, #5
    3800:	4a2c      	ldr	r2, [pc, #176]	; (38b4 <_usb_d_cb_trans_done+0xd4>)
    3802:	4413      	add	r3, r2
    3804:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    3806:	68bb      	ldr	r3, [r7, #8]
    3808:	2b00      	cmp	r3, #0
    380a:	d10e      	bne.n	382a <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    380c:	693b      	ldr	r3, [r7, #16]
    380e:	2200      	movs	r2, #0
    3810:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3812:	693b      	ldr	r3, [r7, #16]
    3814:	781b      	ldrb	r3, [r3, #0]
    3816:	2b00      	cmp	r3, #0
    3818:	d103      	bne.n	3822 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    381a:	6938      	ldr	r0, [r7, #16]
    381c:	4b26      	ldr	r3, [pc, #152]	; (38b8 <_usb_d_cb_trans_done+0xd8>)
    381e:	4798      	blx	r3
			return;
    3820:	e043      	b.n	38aa <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3822:	693b      	ldr	r3, [r7, #16]
    3824:	2201      	movs	r2, #1
    3826:	709a      	strb	r2, [r3, #2]
    3828:	e038      	b.n	389c <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    382a:	68bb      	ldr	r3, [r7, #8]
    382c:	2b01      	cmp	r3, #1
    382e:	d113      	bne.n	3858 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3830:	693b      	ldr	r3, [r7, #16]
    3832:	2202      	movs	r2, #2
    3834:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3836:	693b      	ldr	r3, [r7, #16]
    3838:	781b      	ldrb	r3, [r3, #0]
    383a:	2b00      	cmp	r3, #0
    383c:	d108      	bne.n	3850 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    383e:	693b      	ldr	r3, [r7, #16]
    3840:	2202      	movs	r2, #2
    3842:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3844:	7bfb      	ldrb	r3, [r7, #15]
    3846:	2100      	movs	r1, #0
    3848:	4618      	mov	r0, r3
    384a:	4b1c      	ldr	r3, [pc, #112]	; (38bc <_usb_d_cb_trans_done+0xdc>)
    384c:	4798      	blx	r3
    384e:	e025      	b.n	389c <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3850:	693b      	ldr	r3, [r7, #16]
    3852:	2205      	movs	r2, #5
    3854:	709a      	strb	r2, [r3, #2]
    3856:	e021      	b.n	389c <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3858:	68bb      	ldr	r3, [r7, #8]
    385a:	2b02      	cmp	r3, #2
    385c:	d10e      	bne.n	387c <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    385e:	693b      	ldr	r3, [r7, #16]
    3860:	2204      	movs	r2, #4
    3862:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3864:	693b      	ldr	r3, [r7, #16]
    3866:	781b      	ldrb	r3, [r3, #0]
    3868:	2b00      	cmp	r3, #0
    386a:	d103      	bne.n	3874 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    386c:	693b      	ldr	r3, [r7, #16]
    386e:	2202      	movs	r2, #2
    3870:	709a      	strb	r2, [r3, #2]
			return;
    3872:	e01a      	b.n	38aa <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3874:	693b      	ldr	r3, [r7, #16]
    3876:	2201      	movs	r2, #1
    3878:	709a      	strb	r2, [r3, #2]
    387a:	e00f      	b.n	389c <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    387c:	68bb      	ldr	r3, [r7, #8]
    387e:	2b03      	cmp	r3, #3
    3880:	d106      	bne.n	3890 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3882:	693b      	ldr	r3, [r7, #16]
    3884:	2200      	movs	r2, #0
    3886:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3888:	693b      	ldr	r3, [r7, #16]
    388a:	2205      	movs	r2, #5
    388c:	70da      	strb	r2, [r3, #3]
    388e:	e005      	b.n	389c <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3890:	693b      	ldr	r3, [r7, #16]
    3892:	2206      	movs	r2, #6
    3894:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3896:	693b      	ldr	r3, [r7, #16]
    3898:	2206      	movs	r2, #6
    389a:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    389c:	693b      	ldr	r3, [r7, #16]
    389e:	69db      	ldr	r3, [r3, #28]
    38a0:	693a      	ldr	r2, [r7, #16]
    38a2:	78d1      	ldrb	r1, [r2, #3]
    38a4:	687a      	ldr	r2, [r7, #4]
    38a6:	7bf8      	ldrb	r0, [r7, #15]
    38a8:	4798      	blx	r3
}
    38aa:	3718      	adds	r7, #24
    38ac:	46bd      	mov	sp, r7
    38ae:	bd80      	pop	{r7, pc}
    38b0:	00003515 	.word	0x00003515
    38b4:	20000934 	.word	0x20000934
    38b8:	0000371d 	.word	0x0000371d
    38bc:	0000b3c9 	.word	0x0000b3c9

000038c0 <usb_d_init>:

int32_t usb_d_init(void)
{
    38c0:	b580      	push	{r7, lr}
    38c2:	b082      	sub	sp, #8
    38c4:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    38c6:	4b21      	ldr	r3, [pc, #132]	; (394c <usb_d_init+0x8c>)
    38c8:	4798      	blx	r3
    38ca:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    38cc:	683b      	ldr	r3, [r7, #0]
    38ce:	2b00      	cmp	r3, #0
    38d0:	da01      	bge.n	38d6 <usb_d_init+0x16>
		return rc;
    38d2:	683b      	ldr	r3, [r7, #0]
    38d4:	e036      	b.n	3944 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    38d6:	2280      	movs	r2, #128	; 0x80
    38d8:	2100      	movs	r1, #0
    38da:	481d      	ldr	r0, [pc, #116]	; (3950 <usb_d_init+0x90>)
    38dc:	4b1d      	ldr	r3, [pc, #116]	; (3954 <usb_d_init+0x94>)
    38de:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    38e0:	2300      	movs	r3, #0
    38e2:	71fb      	strb	r3, [r7, #7]
    38e4:	e01e      	b.n	3924 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    38e6:	79fb      	ldrb	r3, [r7, #7]
    38e8:	4a19      	ldr	r2, [pc, #100]	; (3950 <usb_d_init+0x90>)
    38ea:	015b      	lsls	r3, r3, #5
    38ec:	4413      	add	r3, r2
    38ee:	3301      	adds	r3, #1
    38f0:	22ff      	movs	r2, #255	; 0xff
    38f2:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    38f4:	79fb      	ldrb	r3, [r7, #7]
    38f6:	4a16      	ldr	r2, [pc, #88]	; (3950 <usb_d_init+0x90>)
    38f8:	015b      	lsls	r3, r3, #5
    38fa:	4413      	add	r3, r2
    38fc:	3314      	adds	r3, #20
    38fe:	4a16      	ldr	r2, [pc, #88]	; (3958 <usb_d_init+0x98>)
    3900:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3902:	79fb      	ldrb	r3, [r7, #7]
    3904:	4a12      	ldr	r2, [pc, #72]	; (3950 <usb_d_init+0x90>)
    3906:	015b      	lsls	r3, r3, #5
    3908:	4413      	add	r3, r2
    390a:	3318      	adds	r3, #24
    390c:	4a12      	ldr	r2, [pc, #72]	; (3958 <usb_d_init+0x98>)
    390e:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3910:	79fb      	ldrb	r3, [r7, #7]
    3912:	4a0f      	ldr	r2, [pc, #60]	; (3950 <usb_d_init+0x90>)
    3914:	015b      	lsls	r3, r3, #5
    3916:	4413      	add	r3, r2
    3918:	331c      	adds	r3, #28
    391a:	4a0f      	ldr	r2, [pc, #60]	; (3958 <usb_d_init+0x98>)
    391c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    391e:	79fb      	ldrb	r3, [r7, #7]
    3920:	3301      	adds	r3, #1
    3922:	71fb      	strb	r3, [r7, #7]
    3924:	79fb      	ldrb	r3, [r7, #7]
    3926:	2b03      	cmp	r3, #3
    3928:	d9dd      	bls.n	38e6 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    392a:	490c      	ldr	r1, [pc, #48]	; (395c <usb_d_init+0x9c>)
    392c:	2000      	movs	r0, #0
    392e:	4b0c      	ldr	r3, [pc, #48]	; (3960 <usb_d_init+0xa0>)
    3930:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3932:	490c      	ldr	r1, [pc, #48]	; (3964 <usb_d_init+0xa4>)
    3934:	2001      	movs	r0, #1
    3936:	4b0a      	ldr	r3, [pc, #40]	; (3960 <usb_d_init+0xa0>)
    3938:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    393a:	490b      	ldr	r1, [pc, #44]	; (3968 <usb_d_init+0xa8>)
    393c:	2002      	movs	r0, #2
    393e:	4b08      	ldr	r3, [pc, #32]	; (3960 <usb_d_init+0xa0>)
    3940:	4798      	blx	r3
	return ERR_NONE;
    3942:	2300      	movs	r3, #0
}
    3944:	4618      	mov	r0, r3
    3946:	3708      	adds	r7, #8
    3948:	46bd      	mov	sp, r7
    394a:	bd80      	pop	{r7, pc}
    394c:	0000ac11 	.word	0x0000ac11
    3950:	20000934 	.word	0x20000934
    3954:	0000fc55 	.word	0x0000fc55
    3958:	000035e9 	.word	0x000035e9
    395c:	00003605 	.word	0x00003605
    3960:	0000b859 	.word	0x0000b859
    3964:	000036cd 	.word	0x000036cd
    3968:	000037e1 	.word	0x000037e1

0000396c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    396c:	b580      	push	{r7, lr}
    396e:	b082      	sub	sp, #8
    3970:	af00      	add	r7, sp, #0
    3972:	4603      	mov	r3, r0
    3974:	6039      	str	r1, [r7, #0]
    3976:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3978:	79fb      	ldrb	r3, [r7, #7]
    397a:	6839      	ldr	r1, [r7, #0]
    397c:	4618      	mov	r0, r3
    397e:	4b03      	ldr	r3, [pc, #12]	; (398c <usb_d_register_callback+0x20>)
    3980:	4798      	blx	r3
}
    3982:	bf00      	nop
    3984:	3708      	adds	r7, #8
    3986:	46bd      	mov	sp, r7
    3988:	bd80      	pop	{r7, pc}
    398a:	bf00      	nop
    398c:	0000b811 	.word	0x0000b811

00003990 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3990:	b580      	push	{r7, lr}
    3992:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3994:	4b02      	ldr	r3, [pc, #8]	; (39a0 <usb_d_enable+0x10>)
    3996:	4798      	blx	r3
    3998:	4603      	mov	r3, r0
}
    399a:	4618      	mov	r0, r3
    399c:	bd80      	pop	{r7, pc}
    399e:	bf00      	nop
    39a0:	0000ad01 	.word	0x0000ad01

000039a4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    39a4:	b580      	push	{r7, lr}
    39a6:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    39a8:	4b01      	ldr	r3, [pc, #4]	; (39b0 <usb_d_attach+0xc>)
    39aa:	4798      	blx	r3
}
    39ac:	bf00      	nop
    39ae:	bd80      	pop	{r7, pc}
    39b0:	0000ad85 	.word	0x0000ad85

000039b4 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    39b4:	b580      	push	{r7, lr}
    39b6:	b082      	sub	sp, #8
    39b8:	af00      	add	r7, sp, #0
    39ba:	4603      	mov	r3, r0
    39bc:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    39be:	79fb      	ldrb	r3, [r7, #7]
    39c0:	4618      	mov	r0, r3
    39c2:	4b03      	ldr	r3, [pc, #12]	; (39d0 <usb_d_set_address+0x1c>)
    39c4:	4798      	blx	r3
}
    39c6:	bf00      	nop
    39c8:	3708      	adds	r7, #8
    39ca:	46bd      	mov	sp, r7
    39cc:	bd80      	pop	{r7, pc}
    39ce:	bf00      	nop
    39d0:	0000ad99 	.word	0x0000ad99

000039d4 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    39d4:	b580      	push	{r7, lr}
    39d6:	b082      	sub	sp, #8
    39d8:	af00      	add	r7, sp, #0
    39da:	4603      	mov	r3, r0
    39dc:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    39de:	79fb      	ldrb	r3, [r7, #7]
    39e0:	b29b      	uxth	r3, r3
    39e2:	461a      	mov	r2, r3
    39e4:	2100      	movs	r1, #0
    39e6:	2000      	movs	r0, #0
    39e8:	4b03      	ldr	r3, [pc, #12]	; (39f8 <usb_d_ep0_init+0x24>)
    39ea:	4798      	blx	r3
    39ec:	4603      	mov	r3, r0
}
    39ee:	4618      	mov	r0, r3
    39f0:	3708      	adds	r7, #8
    39f2:	46bd      	mov	sp, r7
    39f4:	bd80      	pop	{r7, pc}
    39f6:	bf00      	nop
    39f8:	000039fd 	.word	0x000039fd

000039fc <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    39fc:	b580      	push	{r7, lr}
    39fe:	b086      	sub	sp, #24
    3a00:	af00      	add	r7, sp, #0
    3a02:	4603      	mov	r3, r0
    3a04:	71fb      	strb	r3, [r7, #7]
    3a06:	460b      	mov	r3, r1
    3a08:	71bb      	strb	r3, [r7, #6]
    3a0a:	4613      	mov	r3, r2
    3a0c:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a0e:	79fb      	ldrb	r3, [r7, #7]
    3a10:	4618      	mov	r0, r3
    3a12:	4b1e      	ldr	r3, [pc, #120]	; (3a8c <usb_d_ep_init+0x90>)
    3a14:	4798      	blx	r3
    3a16:	4603      	mov	r3, r0
    3a18:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a1e:	015b      	lsls	r3, r3, #5
    3a20:	4a1b      	ldr	r2, [pc, #108]	; (3a90 <usb_d_ep_init+0x94>)
    3a22:	4413      	add	r3, r2
    3a24:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    3a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	db02      	blt.n	3a34 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3a2e:	f06f 0313 	mvn.w	r3, #19
    3a32:	e027      	b.n	3a84 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3a34:	20ff      	movs	r0, #255	; 0xff
    3a36:	4b15      	ldr	r3, [pc, #84]	; (3a8c <usb_d_ep_init+0x90>)
    3a38:	4798      	blx	r3
    3a3a:	4603      	mov	r3, r0
    3a3c:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a42:	2b00      	cmp	r3, #0
    3a44:	da02      	bge.n	3a4c <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    3a46:	f06f 0314 	mvn.w	r3, #20
    3a4a:	e01b      	b.n	3a84 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a50:	015b      	lsls	r3, r3, #5
    3a52:	4a0f      	ldr	r2, [pc, #60]	; (3a90 <usb_d_ep_init+0x94>)
    3a54:	4413      	add	r3, r2
    3a56:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3a58:	88ba      	ldrh	r2, [r7, #4]
    3a5a:	79b9      	ldrb	r1, [r7, #6]
    3a5c:	79fb      	ldrb	r3, [r7, #7]
    3a5e:	4618      	mov	r0, r3
    3a60:	4b0c      	ldr	r3, [pc, #48]	; (3a94 <usb_d_ep_init+0x98>)
    3a62:	4798      	blx	r3
    3a64:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3a66:	68fb      	ldr	r3, [r7, #12]
    3a68:	2b00      	cmp	r3, #0
    3a6a:	da01      	bge.n	3a70 <usb_d_ep_init+0x74>
		return rc;
    3a6c:	68fb      	ldr	r3, [r7, #12]
    3a6e:	e009      	b.n	3a84 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3a70:	693b      	ldr	r3, [r7, #16]
    3a72:	79fa      	ldrb	r2, [r7, #7]
    3a74:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3a76:	79bb      	ldrb	r3, [r7, #6]
    3a78:	f003 0303 	and.w	r3, r3, #3
    3a7c:	b2da      	uxtb	r2, r3
    3a7e:	693b      	ldr	r3, [r7, #16]
    3a80:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3a82:	2300      	movs	r3, #0
}
    3a84:	4618      	mov	r0, r3
    3a86:	3718      	adds	r7, #24
    3a88:	46bd      	mov	sp, r7
    3a8a:	bd80      	pop	{r7, pc}
    3a8c:	00003515 	.word	0x00003515
    3a90:	20000934 	.word	0x20000934
    3a94:	0000ae39 	.word	0x0000ae39

00003a98 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3a98:	b580      	push	{r7, lr}
    3a9a:	b084      	sub	sp, #16
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	4603      	mov	r3, r0
    3aa0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3aa2:	79fb      	ldrb	r3, [r7, #7]
    3aa4:	4618      	mov	r0, r3
    3aa6:	4b0d      	ldr	r3, [pc, #52]	; (3adc <usb_d_ep_deinit+0x44>)
    3aa8:	4798      	blx	r3
    3aaa:	4603      	mov	r3, r0
    3aac:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ab2:	015b      	lsls	r3, r3, #5
    3ab4:	4a0a      	ldr	r2, [pc, #40]	; (3ae0 <usb_d_ep_deinit+0x48>)
    3ab6:	4413      	add	r3, r2
    3ab8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3abe:	2b00      	cmp	r3, #0
    3ac0:	db07      	blt.n	3ad2 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3ac2:	79fb      	ldrb	r3, [r7, #7]
    3ac4:	4618      	mov	r0, r3
    3ac6:	4b07      	ldr	r3, [pc, #28]	; (3ae4 <usb_d_ep_deinit+0x4c>)
    3ac8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3aca:	68bb      	ldr	r3, [r7, #8]
    3acc:	22ff      	movs	r2, #255	; 0xff
    3ace:	705a      	strb	r2, [r3, #1]
    3ad0:	e000      	b.n	3ad4 <usb_d_ep_deinit+0x3c>
		return;
    3ad2:	bf00      	nop
}
    3ad4:	3710      	adds	r7, #16
    3ad6:	46bd      	mov	sp, r7
    3ad8:	bd80      	pop	{r7, pc}
    3ada:	bf00      	nop
    3adc:	00003515 	.word	0x00003515
    3ae0:	20000934 	.word	0x20000934
    3ae4:	0000af6d 	.word	0x0000af6d

00003ae8 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3ae8:	b580      	push	{r7, lr}
    3aea:	b086      	sub	sp, #24
    3aec:	af00      	add	r7, sp, #0
    3aee:	4603      	mov	r3, r0
    3af0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3af2:	79fb      	ldrb	r3, [r7, #7]
    3af4:	4618      	mov	r0, r3
    3af6:	4b15      	ldr	r3, [pc, #84]	; (3b4c <usb_d_ep_enable+0x64>)
    3af8:	4798      	blx	r3
    3afa:	4603      	mov	r3, r0
    3afc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b02:	015b      	lsls	r3, r3, #5
    3b04:	4a12      	ldr	r2, [pc, #72]	; (3b50 <usb_d_ep_enable+0x68>)
    3b06:	4413      	add	r3, r2
    3b08:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b0e:	2b00      	cmp	r3, #0
    3b10:	da02      	bge.n	3b18 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3b12:	f06f 0311 	mvn.w	r3, #17
    3b16:	e014      	b.n	3b42 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3b18:	693b      	ldr	r3, [r7, #16]
    3b1a:	781b      	ldrb	r3, [r3, #0]
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d101      	bne.n	3b24 <usb_d_ep_enable+0x3c>
    3b20:	2202      	movs	r2, #2
    3b22:	e000      	b.n	3b26 <usb_d_ep_enable+0x3e>
    3b24:	2201      	movs	r2, #1
    3b26:	693b      	ldr	r3, [r7, #16]
    3b28:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3b2a:	79fb      	ldrb	r3, [r7, #7]
    3b2c:	4618      	mov	r0, r3
    3b2e:	4b09      	ldr	r3, [pc, #36]	; (3b54 <usb_d_ep_enable+0x6c>)
    3b30:	4798      	blx	r3
    3b32:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3b34:	68fb      	ldr	r3, [r7, #12]
    3b36:	2b00      	cmp	r3, #0
    3b38:	da02      	bge.n	3b40 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3b3a:	693b      	ldr	r3, [r7, #16]
    3b3c:	2200      	movs	r2, #0
    3b3e:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3b40:	68fb      	ldr	r3, [r7, #12]
}
    3b42:	4618      	mov	r0, r3
    3b44:	3718      	adds	r7, #24
    3b46:	46bd      	mov	sp, r7
    3b48:	bd80      	pop	{r7, pc}
    3b4a:	bf00      	nop
    3b4c:	00003515 	.word	0x00003515
    3b50:	20000934 	.word	0x20000934
    3b54:	0000b051 	.word	0x0000b051

00003b58 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3b58:	b590      	push	{r4, r7, lr}
    3b5a:	b08d      	sub	sp, #52	; 0x34
    3b5c:	af02      	add	r7, sp, #8
    3b5e:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	7a1b      	ldrb	r3, [r3, #8]
    3b64:	4618      	mov	r0, r3
    3b66:	4b51      	ldr	r3, [pc, #324]	; (3cac <usb_d_ep_transfer+0x154>)
    3b68:	4798      	blx	r3
    3b6a:	4603      	mov	r3, r0
    3b6c:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3b6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3b72:	015b      	lsls	r3, r3, #5
    3b74:	4a4e      	ldr	r2, [pc, #312]	; (3cb0 <usb_d_ep_transfer+0x158>)
    3b76:	4413      	add	r3, r2
    3b78:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3b7a:	687b      	ldr	r3, [r7, #4]
    3b7c:	7a1b      	ldrb	r3, [r3, #8]
    3b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3b82:	2b00      	cmp	r3, #0
    3b84:	bf14      	ite	ne
    3b86:	2301      	movne	r3, #1
    3b88:	2300      	moveq	r3, #0
    3b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3b8e:	687b      	ldr	r3, [r7, #4]
    3b90:	7a5b      	ldrb	r3, [r3, #9]
    3b92:	2b00      	cmp	r3, #0
    3b94:	bf14      	ite	ne
    3b96:	2301      	movne	r3, #1
    3b98:	2300      	moveq	r3, #0
    3b9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3b9e:	687b      	ldr	r3, [r7, #4]
    3ba0:	685b      	ldr	r3, [r3, #4]
    3ba2:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3ba4:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3ba8:	2b00      	cmp	r3, #0
    3baa:	da02      	bge.n	3bb2 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3bac:	f06f 0311 	mvn.w	r3, #17
    3bb0:	e077      	b.n	3ca2 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3bb2:	f107 0308 	add.w	r3, r7, #8
    3bb6:	4618      	mov	r0, r3
    3bb8:	4b3e      	ldr	r3, [pc, #248]	; (3cb4 <usb_d_ep_transfer+0x15c>)
    3bba:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3bbc:	69bb      	ldr	r3, [r7, #24]
    3bbe:	789b      	ldrb	r3, [r3, #2]
    3bc0:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3bc2:	7bfb      	ldrb	r3, [r7, #15]
    3bc4:	b2db      	uxtb	r3, r3
    3bc6:	2b01      	cmp	r3, #1
    3bc8:	d10c      	bne.n	3be4 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3bca:	69bb      	ldr	r3, [r7, #24]
    3bcc:	2203      	movs	r2, #3
    3bce:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3bd0:	f107 0308 	add.w	r3, r7, #8
    3bd4:	4618      	mov	r0, r3
    3bd6:	4b38      	ldr	r3, [pc, #224]	; (3cb8 <usb_d_ep_transfer+0x160>)
    3bd8:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3bda:	69bb      	ldr	r3, [r7, #24]
    3bdc:	781b      	ldrb	r3, [r3, #0]
    3bde:	2b00      	cmp	r3, #0
    3be0:	d151      	bne.n	3c86 <usb_d_ep_transfer+0x12e>
    3be2:	e017      	b.n	3c14 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3be4:	f107 0308 	add.w	r3, r7, #8
    3be8:	4618      	mov	r0, r3
    3bea:	4b33      	ldr	r3, [pc, #204]	; (3cb8 <usb_d_ep_transfer+0x160>)
    3bec:	4798      	blx	r3
		switch (state) {
    3bee:	7bfb      	ldrb	r3, [r7, #15]
    3bf0:	b2db      	uxtb	r3, r3
    3bf2:	2b05      	cmp	r3, #5
    3bf4:	d004      	beq.n	3c00 <usb_d_ep_transfer+0xa8>
    3bf6:	2b06      	cmp	r3, #6
    3bf8:	d004      	beq.n	3c04 <usb_d_ep_transfer+0xac>
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	d005      	beq.n	3c0a <usb_d_ep_transfer+0xb2>
    3bfe:	e007      	b.n	3c10 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3c00:	2302      	movs	r3, #2
    3c02:	e04e      	b.n	3ca2 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3c04:	f06f 030f 	mvn.w	r3, #15
    3c08:	e04b      	b.n	3ca2 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3c0a:	f06f 0312 	mvn.w	r3, #18
    3c0e:	e048      	b.n	3ca2 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3c10:	2301      	movs	r3, #1
    3c12:	e046      	b.n	3ca2 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3c14:	69bb      	ldr	r3, [r7, #24]
    3c16:	7c9b      	ldrb	r3, [r3, #18]
    3c18:	b29a      	uxth	r2, r3
    3c1a:	69bb      	ldr	r3, [r7, #24]
    3c1c:	7cdb      	ldrb	r3, [r3, #19]
    3c1e:	b29b      	uxth	r3, r3
    3c20:	021b      	lsls	r3, r3, #8
    3c22:	b29b      	uxth	r3, r3
    3c24:	4413      	add	r3, r2
    3c26:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3c28:	8afb      	ldrh	r3, [r7, #22]
    3c2a:	2b00      	cmp	r3, #0
    3c2c:	d10b      	bne.n	3c46 <usb_d_ep_transfer+0xee>
			dir                 = true;
    3c2e:	2301      	movs	r3, #1
    3c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3c34:	2300      	movs	r3, #0
    3c36:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3c38:	2301      	movs	r3, #1
    3c3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3c3e:	69bb      	ldr	r3, [r7, #24]
    3c40:	2204      	movs	r2, #4
    3c42:	709a      	strb	r2, [r3, #2]
    3c44:	e01f      	b.n	3c86 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3c46:	69bb      	ldr	r3, [r7, #24]
    3c48:	7b1b      	ldrb	r3, [r3, #12]
    3c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3c4e:	2b00      	cmp	r3, #0
    3c50:	bf14      	ite	ne
    3c52:	2301      	movne	r3, #1
    3c54:	2300      	moveq	r3, #0
    3c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3c5a:	8afa      	ldrh	r2, [r7, #22]
    3c5c:	6a3b      	ldr	r3, [r7, #32]
    3c5e:	429a      	cmp	r2, r3
    3c60:	d201      	bcs.n	3c66 <usb_d_ep_transfer+0x10e>
				len = req_len;
    3c62:	8afb      	ldrh	r3, [r7, #22]
    3c64:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d008      	beq.n	3c80 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3c6e:	8afa      	ldrh	r2, [r7, #22]
    3c70:	6a3b      	ldr	r3, [r7, #32]
    3c72:	429a      	cmp	r2, r3
    3c74:	bf8c      	ite	hi
    3c76:	2301      	movhi	r3, #1
    3c78:	2300      	movls	r3, #0
    3c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3c7e:	e002      	b.n	3c86 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3c80:	2300      	movs	r3, #0
    3c82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	7a18      	ldrb	r0, [r3, #8]
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	681a      	ldr	r2, [r3, #0]
    3c8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3c92:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3c96:	9300      	str	r3, [sp, #0]
    3c98:	6a3b      	ldr	r3, [r7, #32]
    3c9a:	4c08      	ldr	r4, [pc, #32]	; (3cbc <usb_d_ep_transfer+0x164>)
    3c9c:	47a0      	blx	r4
    3c9e:	6138      	str	r0, [r7, #16]
	return rc;
    3ca0:	693b      	ldr	r3, [r7, #16]
}
    3ca2:	4618      	mov	r0, r3
    3ca4:	372c      	adds	r7, #44	; 0x2c
    3ca6:	46bd      	mov	sp, r7
    3ca8:	bd90      	pop	{r4, r7, pc}
    3caa:	bf00      	nop
    3cac:	00003515 	.word	0x00003515
    3cb0:	20000934 	.word	0x20000934
    3cb4:	0000bfc5 	.word	0x0000bfc5
    3cb8:	0000bfeb 	.word	0x0000bfeb
    3cbc:	00003595 	.word	0x00003595

00003cc0 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3cc0:	b580      	push	{r7, lr}
    3cc2:	b084      	sub	sp, #16
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	4603      	mov	r3, r0
    3cc8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3cca:	79fb      	ldrb	r3, [r7, #7]
    3ccc:	4618      	mov	r0, r3
    3cce:	4b0e      	ldr	r3, [pc, #56]	; (3d08 <usb_d_ep_abort+0x48>)
    3cd0:	4798      	blx	r3
    3cd2:	4603      	mov	r3, r0
    3cd4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3cda:	015b      	lsls	r3, r3, #5
    3cdc:	4a0b      	ldr	r2, [pc, #44]	; (3d0c <usb_d_ep_abort+0x4c>)
    3cde:	4413      	add	r3, r2
    3ce0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	db0a      	blt.n	3d00 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3cea:	79fb      	ldrb	r3, [r7, #7]
    3cec:	4618      	mov	r0, r3
    3cee:	4b08      	ldr	r3, [pc, #32]	; (3d10 <usb_d_ep_abort+0x50>)
    3cf0:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3cf2:	68bb      	ldr	r3, [r7, #8]
    3cf4:	2201      	movs	r2, #1
    3cf6:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3cf8:	68bb      	ldr	r3, [r7, #8]
    3cfa:	2204      	movs	r2, #4
    3cfc:	70da      	strb	r2, [r3, #3]
    3cfe:	e000      	b.n	3d02 <usb_d_ep_abort+0x42>
		return;
    3d00:	bf00      	nop
}
    3d02:	3710      	adds	r7, #16
    3d04:	46bd      	mov	sp, r7
    3d06:	bd80      	pop	{r7, pc}
    3d08:	00003515 	.word	0x00003515
    3d0c:	20000934 	.word	0x20000934
    3d10:	0000b7bd 	.word	0x0000b7bd

00003d14 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3d14:	b580      	push	{r7, lr}
    3d16:	b086      	sub	sp, #24
    3d18:	af00      	add	r7, sp, #0
    3d1a:	4603      	mov	r3, r0
    3d1c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3d1e:	79fb      	ldrb	r3, [r7, #7]
    3d20:	4618      	mov	r0, r3
    3d22:	4b1a      	ldr	r3, [pc, #104]	; (3d8c <_usb_d_ep_halt_clr+0x78>)
    3d24:	4798      	blx	r3
    3d26:	4603      	mov	r3, r0
    3d28:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3d2e:	015b      	lsls	r3, r3, #5
    3d30:	4a17      	ldr	r2, [pc, #92]	; (3d90 <_usb_d_ep_halt_clr+0x7c>)
    3d32:	4413      	add	r3, r2
    3d34:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	da02      	bge.n	3d44 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3d3e:	f06f 0311 	mvn.w	r3, #17
    3d42:	e01f      	b.n	3d84 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3d44:	79fb      	ldrb	r3, [r7, #7]
    3d46:	2102      	movs	r1, #2
    3d48:	4618      	mov	r0, r3
    3d4a:	4b12      	ldr	r3, [pc, #72]	; (3d94 <_usb_d_ep_halt_clr+0x80>)
    3d4c:	4798      	blx	r3
    3d4e:	4603      	mov	r3, r0
    3d50:	2b00      	cmp	r3, #0
    3d52:	d016      	beq.n	3d82 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3d54:	79fb      	ldrb	r3, [r7, #7]
    3d56:	2100      	movs	r1, #0
    3d58:	4618      	mov	r0, r3
    3d5a:	4b0e      	ldr	r3, [pc, #56]	; (3d94 <_usb_d_ep_halt_clr+0x80>)
    3d5c:	4798      	blx	r3
    3d5e:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3d60:	68fb      	ldr	r3, [r7, #12]
    3d62:	2b00      	cmp	r3, #0
    3d64:	da01      	bge.n	3d6a <_usb_d_ep_halt_clr+0x56>
			return rc;
    3d66:	68fb      	ldr	r3, [r7, #12]
    3d68:	e00c      	b.n	3d84 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3d6a:	693b      	ldr	r3, [r7, #16]
    3d6c:	2201      	movs	r2, #1
    3d6e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3d70:	693b      	ldr	r3, [r7, #16]
    3d72:	2203      	movs	r2, #3
    3d74:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3d76:	693b      	ldr	r3, [r7, #16]
    3d78:	69db      	ldr	r3, [r3, #28]
    3d7a:	79f8      	ldrb	r0, [r7, #7]
    3d7c:	2200      	movs	r2, #0
    3d7e:	2103      	movs	r1, #3
    3d80:	4798      	blx	r3
	}
	return ERR_NONE;
    3d82:	2300      	movs	r3, #0
}
    3d84:	4618      	mov	r0, r3
    3d86:	3718      	adds	r7, #24
    3d88:	46bd      	mov	sp, r7
    3d8a:	bd80      	pop	{r7, pc}
    3d8c:	00003515 	.word	0x00003515
    3d90:	20000934 	.word	0x20000934
    3d94:	0000b3c9 	.word	0x0000b3c9

00003d98 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3d98:	b580      	push	{r7, lr}
    3d9a:	b082      	sub	sp, #8
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	4603      	mov	r3, r0
    3da0:	460a      	mov	r2, r1
    3da2:	71fb      	strb	r3, [r7, #7]
    3da4:	4613      	mov	r3, r2
    3da6:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3da8:	79bb      	ldrb	r3, [r7, #6]
    3daa:	2b00      	cmp	r3, #0
    3dac:	d105      	bne.n	3dba <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3dae:	79fb      	ldrb	r3, [r7, #7]
    3db0:	4618      	mov	r0, r3
    3db2:	4b0c      	ldr	r3, [pc, #48]	; (3de4 <usb_d_ep_halt+0x4c>)
    3db4:	4798      	blx	r3
    3db6:	4603      	mov	r3, r0
    3db8:	e00f      	b.n	3dda <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3dba:	79bb      	ldrb	r3, [r7, #6]
    3dbc:	2b01      	cmp	r3, #1
    3dbe:	d106      	bne.n	3dce <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3dc0:	79fb      	ldrb	r3, [r7, #7]
    3dc2:	2101      	movs	r1, #1
    3dc4:	4618      	mov	r0, r3
    3dc6:	4b08      	ldr	r3, [pc, #32]	; (3de8 <usb_d_ep_halt+0x50>)
    3dc8:	4798      	blx	r3
    3dca:	4603      	mov	r3, r0
    3dcc:	e005      	b.n	3dda <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3dce:	79fb      	ldrb	r3, [r7, #7]
    3dd0:	2102      	movs	r1, #2
    3dd2:	4618      	mov	r0, r3
    3dd4:	4b04      	ldr	r3, [pc, #16]	; (3de8 <usb_d_ep_halt+0x50>)
    3dd6:	4798      	blx	r3
    3dd8:	4603      	mov	r3, r0
	}
}
    3dda:	4618      	mov	r0, r3
    3ddc:	3708      	adds	r7, #8
    3dde:	46bd      	mov	sp, r7
    3de0:	bd80      	pop	{r7, pc}
    3de2:	bf00      	nop
    3de4:	00003d15 	.word	0x00003d15
    3de8:	0000b3c9 	.word	0x0000b3c9

00003dec <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3dec:	b580      	push	{r7, lr}
    3dee:	b086      	sub	sp, #24
    3df0:	af00      	add	r7, sp, #0
    3df2:	4603      	mov	r3, r0
    3df4:	603a      	str	r2, [r7, #0]
    3df6:	71fb      	strb	r3, [r7, #7]
    3df8:	460b      	mov	r3, r1
    3dfa:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3dfc:	79fb      	ldrb	r3, [r7, #7]
    3dfe:	4618      	mov	r0, r3
    3e00:	4b16      	ldr	r3, [pc, #88]	; (3e5c <usb_d_ep_register_callback+0x70>)
    3e02:	4798      	blx	r3
    3e04:	4603      	mov	r3, r0
    3e06:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3e08:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3e0c:	015b      	lsls	r3, r3, #5
    3e0e:	4a14      	ldr	r2, [pc, #80]	; (3e60 <usb_d_ep_register_callback+0x74>)
    3e10:	4413      	add	r3, r2
    3e12:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3e14:	683b      	ldr	r3, [r7, #0]
    3e16:	2b00      	cmp	r3, #0
    3e18:	d001      	beq.n	3e1e <usb_d_ep_register_callback+0x32>
    3e1a:	683b      	ldr	r3, [r7, #0]
    3e1c:	e000      	b.n	3e20 <usb_d_ep_register_callback+0x34>
    3e1e:	4b11      	ldr	r3, [pc, #68]	; (3e64 <usb_d_ep_register_callback+0x78>)
    3e20:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3e26:	2b00      	cmp	r3, #0
    3e28:	db13      	blt.n	3e52 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3e2a:	79bb      	ldrb	r3, [r7, #6]
    3e2c:	2b01      	cmp	r3, #1
    3e2e:	d008      	beq.n	3e42 <usb_d_ep_register_callback+0x56>
    3e30:	2b02      	cmp	r3, #2
    3e32:	d00a      	beq.n	3e4a <usb_d_ep_register_callback+0x5e>
    3e34:	2b00      	cmp	r3, #0
    3e36:	d000      	beq.n	3e3a <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3e38:	e00c      	b.n	3e54 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3e3a:	693b      	ldr	r3, [r7, #16]
    3e3c:	68fa      	ldr	r2, [r7, #12]
    3e3e:	615a      	str	r2, [r3, #20]
		break;
    3e40:	e008      	b.n	3e54 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3e42:	693b      	ldr	r3, [r7, #16]
    3e44:	68fa      	ldr	r2, [r7, #12]
    3e46:	619a      	str	r2, [r3, #24]
		break;
    3e48:	e004      	b.n	3e54 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3e4a:	693b      	ldr	r3, [r7, #16]
    3e4c:	68fa      	ldr	r2, [r7, #12]
    3e4e:	61da      	str	r2, [r3, #28]
		break;
    3e50:	e000      	b.n	3e54 <usb_d_ep_register_callback+0x68>
		return;
    3e52:	bf00      	nop
	}
}
    3e54:	3718      	adds	r7, #24
    3e56:	46bd      	mov	sp, r7
    3e58:	bd80      	pop	{r7, pc}
    3e5a:	bf00      	nop
    3e5c:	00003515 	.word	0x00003515
    3e60:	20000934 	.word	0x20000934
    3e64:	000035e9 	.word	0x000035e9

00003e68 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3e68:	b480      	push	{r7}
    3e6a:	b085      	sub	sp, #20
    3e6c:	af00      	add	r7, sp, #0
    3e6e:	4603      	mov	r3, r0
    3e70:	60b9      	str	r1, [r7, #8]
    3e72:	607a      	str	r2, [r7, #4]
    3e74:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3e76:	7bfb      	ldrb	r3, [r7, #15]
    3e78:	f083 0301 	eor.w	r3, r3, #1
    3e7c:	b2db      	uxtb	r3, r3
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d000      	beq.n	3e84 <assert+0x1c>
		__asm("BKPT #0");
    3e82:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3e84:	bf00      	nop
    3e86:	3714      	adds	r7, #20
    3e88:	46bd      	mov	sp, r7
    3e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e8e:	4770      	bx	lr

00003e90 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3e90:	b480      	push	{r7}
    3e92:	b085      	sub	sp, #20
    3e94:	af00      	add	r7, sp, #0
    3e96:	6078      	str	r0, [r7, #4]
    3e98:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3e9a:	687b      	ldr	r3, [r7, #4]
    3e9c:	681b      	ldr	r3, [r3, #0]
    3e9e:	60fb      	str	r3, [r7, #12]
    3ea0:	e008      	b.n	3eb4 <is_list_element+0x24>
		if (it == element) {
    3ea2:	68fa      	ldr	r2, [r7, #12]
    3ea4:	683b      	ldr	r3, [r7, #0]
    3ea6:	429a      	cmp	r2, r3
    3ea8:	d101      	bne.n	3eae <is_list_element+0x1e>
			return true;
    3eaa:	2301      	movs	r3, #1
    3eac:	e006      	b.n	3ebc <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3eae:	68fb      	ldr	r3, [r7, #12]
    3eb0:	681b      	ldr	r3, [r3, #0]
    3eb2:	60fb      	str	r3, [r7, #12]
    3eb4:	68fb      	ldr	r3, [r7, #12]
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	d1f3      	bne.n	3ea2 <is_list_element+0x12>
		}
	}

	return false;
    3eba:	2300      	movs	r3, #0
}
    3ebc:	4618      	mov	r0, r3
    3ebe:	3714      	adds	r7, #20
    3ec0:	46bd      	mov	sp, r7
    3ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec6:	4770      	bx	lr

00003ec8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3ec8:	b580      	push	{r7, lr}
    3eca:	b082      	sub	sp, #8
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
    3ed0:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3ed2:	6839      	ldr	r1, [r7, #0]
    3ed4:	6878      	ldr	r0, [r7, #4]
    3ed6:	4b0f      	ldr	r3, [pc, #60]	; (3f14 <list_insert_as_head+0x4c>)
    3ed8:	4798      	blx	r3
    3eda:	4603      	mov	r3, r0
    3edc:	2b00      	cmp	r3, #0
    3ede:	bf14      	ite	ne
    3ee0:	2301      	movne	r3, #1
    3ee2:	2300      	moveq	r3, #0
    3ee4:	b2db      	uxtb	r3, r3
    3ee6:	f083 0301 	eor.w	r3, r3, #1
    3eea:	b2db      	uxtb	r3, r3
    3eec:	f003 0301 	and.w	r3, r3, #1
    3ef0:	b2db      	uxtb	r3, r3
    3ef2:	2239      	movs	r2, #57	; 0x39
    3ef4:	4908      	ldr	r1, [pc, #32]	; (3f18 <list_insert_as_head+0x50>)
    3ef6:	4618      	mov	r0, r3
    3ef8:	4b08      	ldr	r3, [pc, #32]	; (3f1c <list_insert_as_head+0x54>)
    3efa:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3efc:	687b      	ldr	r3, [r7, #4]
    3efe:	681a      	ldr	r2, [r3, #0]
    3f00:	683b      	ldr	r3, [r7, #0]
    3f02:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	683a      	ldr	r2, [r7, #0]
    3f08:	601a      	str	r2, [r3, #0]
}
    3f0a:	bf00      	nop
    3f0c:	3708      	adds	r7, #8
    3f0e:	46bd      	mov	sp, r7
    3f10:	bd80      	pop	{r7, pc}
    3f12:	bf00      	nop
    3f14:	00003e91 	.word	0x00003e91
    3f18:	0000ff40 	.word	0x0000ff40
    3f1c:	00003e69 	.word	0x00003e69

00003f20 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3f20:	b480      	push	{r7}
    3f22:	b083      	sub	sp, #12
    3f24:	af00      	add	r7, sp, #0
    3f26:	6078      	str	r0, [r7, #4]
    3f28:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3f2a:	687b      	ldr	r3, [r7, #4]
    3f2c:	681a      	ldr	r2, [r3, #0]
    3f2e:	683b      	ldr	r3, [r7, #0]
    3f30:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	683a      	ldr	r2, [r7, #0]
    3f36:	601a      	str	r2, [r3, #0]
}
    3f38:	bf00      	nop
    3f3a:	370c      	adds	r7, #12
    3f3c:	46bd      	mov	sp, r7
    3f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f42:	4770      	bx	lr

00003f44 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3f44:	b580      	push	{r7, lr}
    3f46:	b084      	sub	sp, #16
    3f48:	af00      	add	r7, sp, #0
    3f4a:	6078      	str	r0, [r7, #4]
    3f4c:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	681b      	ldr	r3, [r3, #0]
    3f52:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3f54:	6839      	ldr	r1, [r7, #0]
    3f56:	6878      	ldr	r0, [r7, #4]
    3f58:	4b16      	ldr	r3, [pc, #88]	; (3fb4 <list_insert_at_end+0x70>)
    3f5a:	4798      	blx	r3
    3f5c:	4603      	mov	r3, r0
    3f5e:	2b00      	cmp	r3, #0
    3f60:	bf14      	ite	ne
    3f62:	2301      	movne	r3, #1
    3f64:	2300      	moveq	r3, #0
    3f66:	b2db      	uxtb	r3, r3
    3f68:	f083 0301 	eor.w	r3, r3, #1
    3f6c:	b2db      	uxtb	r3, r3
    3f6e:	f003 0301 	and.w	r3, r3, #1
    3f72:	b2db      	uxtb	r3, r3
    3f74:	224f      	movs	r2, #79	; 0x4f
    3f76:	4910      	ldr	r1, [pc, #64]	; (3fb8 <list_insert_at_end+0x74>)
    3f78:	4618      	mov	r0, r3
    3f7a:	4b10      	ldr	r3, [pc, #64]	; (3fbc <list_insert_at_end+0x78>)
    3f7c:	4798      	blx	r3

	if (!list->head) {
    3f7e:	687b      	ldr	r3, [r7, #4]
    3f80:	681b      	ldr	r3, [r3, #0]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d109      	bne.n	3f9a <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	683a      	ldr	r2, [r7, #0]
    3f8a:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3f8c:	683b      	ldr	r3, [r7, #0]
    3f8e:	2200      	movs	r2, #0
    3f90:	601a      	str	r2, [r3, #0]
		return;
    3f92:	e00c      	b.n	3fae <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3f94:	68fb      	ldr	r3, [r7, #12]
    3f96:	681b      	ldr	r3, [r3, #0]
    3f98:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3f9a:	68fb      	ldr	r3, [r7, #12]
    3f9c:	681b      	ldr	r3, [r3, #0]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d1f8      	bne.n	3f94 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3fa2:	68fb      	ldr	r3, [r7, #12]
    3fa4:	683a      	ldr	r2, [r7, #0]
    3fa6:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3fa8:	683b      	ldr	r3, [r7, #0]
    3faa:	2200      	movs	r2, #0
    3fac:	601a      	str	r2, [r3, #0]
}
    3fae:	3710      	adds	r7, #16
    3fb0:	46bd      	mov	sp, r7
    3fb2:	bd80      	pop	{r7, pc}
    3fb4:	00003e91 	.word	0x00003e91
    3fb8:	0000ff40 	.word	0x0000ff40
    3fbc:	00003e69 	.word	0x00003e69

00003fc0 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3fc0:	b480      	push	{r7}
    3fc2:	b085      	sub	sp, #20
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3fc8:	687b      	ldr	r3, [r7, #4]
    3fca:	681b      	ldr	r3, [r3, #0]
    3fcc:	2b00      	cmp	r3, #0
    3fce:	d009      	beq.n	3fe4 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	681b      	ldr	r3, [r3, #0]
    3fd4:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3fd6:	687b      	ldr	r3, [r7, #4]
    3fd8:	681b      	ldr	r3, [r3, #0]
    3fda:	681a      	ldr	r2, [r3, #0]
    3fdc:	687b      	ldr	r3, [r7, #4]
    3fde:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3fe0:	68fb      	ldr	r3, [r7, #12]
    3fe2:	e000      	b.n	3fe6 <list_remove_head+0x26>
	}

	return NULL;
    3fe4:	2300      	movs	r3, #0
}
    3fe6:	4618      	mov	r0, r3
    3fe8:	3714      	adds	r7, #20
    3fea:	46bd      	mov	sp, r7
    3fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff0:	4770      	bx	lr

00003ff2 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3ff2:	b480      	push	{r7}
    3ff4:	b085      	sub	sp, #20
    3ff6:	af00      	add	r7, sp, #0
    3ff8:	6078      	str	r0, [r7, #4]
    3ffa:	6039      	str	r1, [r7, #0]
	if (!element) {
    3ffc:	683b      	ldr	r3, [r7, #0]
    3ffe:	2b00      	cmp	r3, #0
    4000:	d101      	bne.n	4006 <list_delete_element+0x14>
		return false;
    4002:	2300      	movs	r3, #0
    4004:	e024      	b.n	4050 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	681a      	ldr	r2, [r3, #0]
    400a:	683b      	ldr	r3, [r7, #0]
    400c:	429a      	cmp	r2, r3
    400e:	d106      	bne.n	401e <list_delete_element+0x2c>
		list->head = list->head->next;
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	681b      	ldr	r3, [r3, #0]
    4014:	681a      	ldr	r2, [r3, #0]
    4016:	687b      	ldr	r3, [r7, #4]
    4018:	601a      	str	r2, [r3, #0]
		return true;
    401a:	2301      	movs	r3, #1
    401c:	e018      	b.n	4050 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    401e:	687b      	ldr	r3, [r7, #4]
    4020:	681b      	ldr	r3, [r3, #0]
    4022:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    4024:	e002      	b.n	402c <list_delete_element+0x3a>
			it = it->next;
    4026:	68fb      	ldr	r3, [r7, #12]
    4028:	681b      	ldr	r3, [r3, #0]
    402a:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    402c:	68fb      	ldr	r3, [r7, #12]
    402e:	2b00      	cmp	r3, #0
    4030:	d004      	beq.n	403c <list_delete_element+0x4a>
    4032:	68fb      	ldr	r3, [r7, #12]
    4034:	681a      	ldr	r2, [r3, #0]
    4036:	683b      	ldr	r3, [r7, #0]
    4038:	429a      	cmp	r2, r3
    403a:	d1f4      	bne.n	4026 <list_delete_element+0x34>
		}
		if (it) {
    403c:	68fb      	ldr	r3, [r7, #12]
    403e:	2b00      	cmp	r3, #0
    4040:	d005      	beq.n	404e <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    4042:	683b      	ldr	r3, [r7, #0]
    4044:	681a      	ldr	r2, [r3, #0]
    4046:	68fb      	ldr	r3, [r7, #12]
    4048:	601a      	str	r2, [r3, #0]
			return true;
    404a:	2301      	movs	r3, #1
    404c:	e000      	b.n	4050 <list_delete_element+0x5e>
		}
	}

	return false;
    404e:	2300      	movs	r3, #0
}
    4050:	4618      	mov	r0, r3
    4052:	3714      	adds	r7, #20
    4054:	46bd      	mov	sp, r7
    4056:	f85d 7b04 	ldr.w	r7, [sp], #4
    405a:	4770      	bx	lr

0000405c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    405c:	b480      	push	{r7}
    405e:	b083      	sub	sp, #12
    4060:	af00      	add	r7, sp, #0
    4062:	4603      	mov	r3, r0
    4064:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    406a:	2b00      	cmp	r3, #0
    406c:	db0b      	blt.n	4086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    406e:	4909      	ldr	r1, [pc, #36]	; (4094 <__NVIC_EnableIRQ+0x38>)
    4070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4074:	095b      	lsrs	r3, r3, #5
    4076:	88fa      	ldrh	r2, [r7, #6]
    4078:	f002 021f 	and.w	r2, r2, #31
    407c:	2001      	movs	r0, #1
    407e:	fa00 f202 	lsl.w	r2, r0, r2
    4082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4086:	bf00      	nop
    4088:	370c      	adds	r7, #12
    408a:	46bd      	mov	sp, r7
    408c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4090:	4770      	bx	lr
    4092:	bf00      	nop
    4094:	e000e100 	.word	0xe000e100

00004098 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4098:	b480      	push	{r7}
    409a:	b083      	sub	sp, #12
    409c:	af00      	add	r7, sp, #0
    409e:	4603      	mov	r3, r0
    40a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    40a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40a6:	2b00      	cmp	r3, #0
    40a8:	db10      	blt.n	40cc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40aa:	490b      	ldr	r1, [pc, #44]	; (40d8 <__NVIC_DisableIRQ+0x40>)
    40ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40b0:	095b      	lsrs	r3, r3, #5
    40b2:	88fa      	ldrh	r2, [r7, #6]
    40b4:	f002 021f 	and.w	r2, r2, #31
    40b8:	2001      	movs	r0, #1
    40ba:	fa00 f202 	lsl.w	r2, r0, r2
    40be:	3320      	adds	r3, #32
    40c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    40c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    40c8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    40cc:	bf00      	nop
    40ce:	370c      	adds	r7, #12
    40d0:	46bd      	mov	sp, r7
    40d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40d6:	4770      	bx	lr
    40d8:	e000e100 	.word	0xe000e100

000040dc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    40dc:	b480      	push	{r7}
    40de:	b083      	sub	sp, #12
    40e0:	af00      	add	r7, sp, #0
    40e2:	4603      	mov	r3, r0
    40e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    40e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40ea:	2b00      	cmp	r3, #0
    40ec:	db0c      	blt.n	4108 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40ee:	4909      	ldr	r1, [pc, #36]	; (4114 <__NVIC_ClearPendingIRQ+0x38>)
    40f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40f4:	095b      	lsrs	r3, r3, #5
    40f6:	88fa      	ldrh	r2, [r7, #6]
    40f8:	f002 021f 	and.w	r2, r2, #31
    40fc:	2001      	movs	r0, #1
    40fe:	fa00 f202 	lsl.w	r2, r0, r2
    4102:	3360      	adds	r3, #96	; 0x60
    4104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4108:	bf00      	nop
    410a:	370c      	adds	r7, #12
    410c:	46bd      	mov	sp, r7
    410e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4112:	4770      	bx	lr
    4114:	e000e100 	.word	0xe000e100

00004118 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    4118:	b480      	push	{r7}
    411a:	b083      	sub	sp, #12
    411c:	af00      	add	r7, sp, #0
    411e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    4120:	687b      	ldr	r3, [r7, #4]
    4122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4124:	095b      	lsrs	r3, r3, #5
    4126:	f003 0301 	and.w	r3, r3, #1
    412a:	2b00      	cmp	r3, #0
    412c:	bf14      	ite	ne
    412e:	2301      	movne	r3, #1
    4130:	2300      	moveq	r3, #0
    4132:	b2db      	uxtb	r3, r3
}
    4134:	4618      	mov	r0, r3
    4136:	370c      	adds	r7, #12
    4138:	46bd      	mov	sp, r7
    413a:	f85d 7b04 	ldr.w	r7, [sp], #4
    413e:	4770      	bx	lr

00004140 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    4140:	b480      	push	{r7}
    4142:	b083      	sub	sp, #12
    4144:	af00      	add	r7, sp, #0
    4146:	6078      	str	r0, [r7, #4]
    4148:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	683a      	ldr	r2, [r7, #0]
    414e:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4150:	bf00      	nop
    4152:	370c      	adds	r7, #12
    4154:	46bd      	mov	sp, r7
    4156:	f85d 7b04 	ldr.w	r7, [sp], #4
    415a:	4770      	bx	lr

0000415c <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    415c:	b480      	push	{r7}
    415e:	b083      	sub	sp, #12
    4160:	af00      	add	r7, sp, #0
    4162:	6078      	str	r0, [r7, #4]
    4164:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	683a      	ldr	r2, [r7, #0]
    416a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    416c:	bf00      	nop
    416e:	370c      	adds	r7, #12
    4170:	46bd      	mov	sp, r7
    4172:	f85d 7b04 	ldr.w	r7, [sp], #4
    4176:	4770      	bx	lr

00004178 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    4178:	b480      	push	{r7}
    417a:	b083      	sub	sp, #12
    417c:	af00      	add	r7, sp, #0
    417e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	699b      	ldr	r3, [r3, #24]
    4184:	f043 0201 	orr.w	r2, r3, #1
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    418c:	bf00      	nop
    418e:	370c      	adds	r7, #12
    4190:	46bd      	mov	sp, r7
    4192:	f85d 7b04 	ldr.w	r7, [sp], #4
    4196:	4770      	bx	lr

00004198 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    4198:	b480      	push	{r7}
    419a:	b085      	sub	sp, #20
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    41a0:	687b      	ldr	r3, [r7, #4]
    41a2:	699b      	ldr	r3, [r3, #24]
    41a4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    41a6:	68fb      	ldr	r3, [r7, #12]
    41a8:	f003 0301 	and.w	r3, r3, #1
    41ac:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    41ae:	68fb      	ldr	r3, [r7, #12]
    41b0:	2b00      	cmp	r3, #0
    41b2:	bf14      	ite	ne
    41b4:	2301      	movne	r3, #1
    41b6:	2300      	moveq	r3, #0
    41b8:	b2db      	uxtb	r3, r3
}
    41ba:	4618      	mov	r0, r3
    41bc:	3714      	adds	r7, #20
    41be:	46bd      	mov	sp, r7
    41c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    41c4:	4770      	bx	lr

000041c6 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    41c6:	b480      	push	{r7}
    41c8:	b083      	sub	sp, #12
    41ca:	af00      	add	r7, sp, #0
    41cc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	699b      	ldr	r3, [r3, #24]
    41d2:	f023 0201 	bic.w	r2, r3, #1
    41d6:	687b      	ldr	r3, [r7, #4]
    41d8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    41da:	bf00      	nop
    41dc:	370c      	adds	r7, #12
    41de:	46bd      	mov	sp, r7
    41e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    41e4:	4770      	bx	lr

000041e6 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    41e6:	b480      	push	{r7}
    41e8:	b083      	sub	sp, #12
    41ea:	af00      	add	r7, sp, #0
    41ec:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	699b      	ldr	r3, [r3, #24]
    41f2:	f043 0202 	orr.w	r2, r3, #2
    41f6:	687b      	ldr	r3, [r7, #4]
    41f8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    41fa:	bf00      	nop
    41fc:	370c      	adds	r7, #12
    41fe:	46bd      	mov	sp, r7
    4200:	f85d 7b04 	ldr.w	r7, [sp], #4
    4204:	4770      	bx	lr

00004206 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    4206:	b480      	push	{r7}
    4208:	b083      	sub	sp, #12
    420a:	af00      	add	r7, sp, #0
    420c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    420e:	687b      	ldr	r3, [r7, #4]
    4210:	699b      	ldr	r3, [r3, #24]
    4212:	f023 0202 	bic.w	r2, r3, #2
    4216:	687b      	ldr	r3, [r7, #4]
    4218:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    421a:	bf00      	nop
    421c:	370c      	adds	r7, #12
    421e:	46bd      	mov	sp, r7
    4220:	f85d 7b04 	ldr.w	r7, [sp], #4
    4224:	4770      	bx	lr

00004226 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    4226:	b480      	push	{r7}
    4228:	b083      	sub	sp, #12
    422a:	af00      	add	r7, sp, #0
    422c:	6078      	str	r0, [r7, #4]
    422e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	699a      	ldr	r2, [r3, #24]
    4234:	683b      	ldr	r3, [r7, #0]
    4236:	431a      	orrs	r2, r3
    4238:	687b      	ldr	r3, [r7, #4]
    423a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    423c:	bf00      	nop
    423e:	370c      	adds	r7, #12
    4240:	46bd      	mov	sp, r7
    4242:	f85d 7b04 	ldr.w	r7, [sp], #4
    4246:	4770      	bx	lr

00004248 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    4248:	b480      	push	{r7}
    424a:	b083      	sub	sp, #12
    424c:	af00      	add	r7, sp, #0
    424e:	6078      	str	r0, [r7, #4]
    4250:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	683a      	ldr	r2, [r7, #0]
    4256:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4258:	bf00      	nop
    425a:	370c      	adds	r7, #12
    425c:	46bd      	mov	sp, r7
    425e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4262:	4770      	bx	lr

00004264 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    4264:	b480      	push	{r7}
    4266:	b083      	sub	sp, #12
    4268:	af00      	add	r7, sp, #0
    426a:	6078      	str	r0, [r7, #4]
    426c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    426e:	687b      	ldr	r3, [r7, #4]
    4270:	683a      	ldr	r2, [r7, #0]
    4272:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    4274:	bf00      	nop
    4276:	370c      	adds	r7, #12
    4278:	46bd      	mov	sp, r7
    427a:	f85d 7b04 	ldr.w	r7, [sp], #4
    427e:	4770      	bx	lr

00004280 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    4280:	b480      	push	{r7}
    4282:	b083      	sub	sp, #12
    4284:	af00      	add	r7, sp, #0
    4286:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    4288:	687b      	ldr	r3, [r7, #4]
    428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    428c:	4618      	mov	r0, r3
    428e:	370c      	adds	r7, #12
    4290:	46bd      	mov	sp, r7
    4292:	f85d 7b04 	ldr.w	r7, [sp], #4
    4296:	4770      	bx	lr

00004298 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    4298:	b480      	push	{r7}
    429a:	b083      	sub	sp, #12
    429c:	af00      	add	r7, sp, #0
    429e:	6078      	str	r0, [r7, #4]
    42a0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	683a      	ldr	r2, [r7, #0]
    42a6:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    42a8:	bf00      	nop
    42aa:	370c      	adds	r7, #12
    42ac:	46bd      	mov	sp, r7
    42ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    42b2:	4770      	bx	lr

000042b4 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    42b4:	b480      	push	{r7}
    42b6:	b083      	sub	sp, #12
    42b8:	af00      	add	r7, sp, #0
    42ba:	6078      	str	r0, [r7, #4]
    42bc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    42be:	687b      	ldr	r3, [r7, #4]
    42c0:	683a      	ldr	r2, [r7, #0]
    42c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    42c6:	bf00      	nop
    42c8:	370c      	adds	r7, #12
    42ca:	46bd      	mov	sp, r7
    42cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    42d0:	4770      	bx	lr

000042d2 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    42d2:	b480      	push	{r7}
    42d4:	b083      	sub	sp, #12
    42d6:	af00      	add	r7, sp, #0
    42d8:	6078      	str	r0, [r7, #4]
    42da:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	683a      	ldr	r2, [r7, #0]
    42e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    42e4:	bf00      	nop
    42e6:	370c      	adds	r7, #12
    42e8:	46bd      	mov	sp, r7
    42ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ee:	4770      	bx	lr

000042f0 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    42f0:	b480      	push	{r7}
    42f2:	b083      	sub	sp, #12
    42f4:	af00      	add	r7, sp, #0
    42f6:	6078      	str	r0, [r7, #4]
    42f8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    42fa:	687b      	ldr	r3, [r7, #4]
    42fc:	683a      	ldr	r2, [r7, #0]
    42fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    4302:	bf00      	nop
    4304:	370c      	adds	r7, #12
    4306:	46bd      	mov	sp, r7
    4308:	f85d 7b04 	ldr.w	r7, [sp], #4
    430c:	4770      	bx	lr

0000430e <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    430e:	b480      	push	{r7}
    4310:	b083      	sub	sp, #12
    4312:	af00      	add	r7, sp, #0
    4314:	6078      	str	r0, [r7, #4]
    4316:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	683a      	ldr	r2, [r7, #0]
    431c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    4320:	bf00      	nop
    4322:	370c      	adds	r7, #12
    4324:	46bd      	mov	sp, r7
    4326:	f85d 7b04 	ldr.w	r7, [sp], #4
    432a:	4770      	bx	lr

0000432c <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    432c:	b480      	push	{r7}
    432e:	b083      	sub	sp, #12
    4330:	af00      	add	r7, sp, #0
    4332:	6078      	str	r0, [r7, #4]
    4334:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	683a      	ldr	r2, [r7, #0]
    433a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    433e:	bf00      	nop
    4340:	370c      	adds	r7, #12
    4342:	46bd      	mov	sp, r7
    4344:	f85d 7b04 	ldr.w	r7, [sp], #4
    4348:	4770      	bx	lr

0000434a <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    434a:	b480      	push	{r7}
    434c:	b083      	sub	sp, #12
    434e:	af00      	add	r7, sp, #0
    4350:	6078      	str	r0, [r7, #4]
    4352:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    4354:	687b      	ldr	r3, [r7, #4]
    4356:	683a      	ldr	r2, [r7, #0]
    4358:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    435c:	bf00      	nop
    435e:	370c      	adds	r7, #12
    4360:	46bd      	mov	sp, r7
    4362:	f85d 7b04 	ldr.w	r7, [sp], #4
    4366:	4770      	bx	lr

00004368 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    4368:	b480      	push	{r7}
    436a:	b083      	sub	sp, #12
    436c:	af00      	add	r7, sp, #0
    436e:	6078      	str	r0, [r7, #4]
    4370:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	683a      	ldr	r2, [r7, #0]
    4376:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    437a:	bf00      	nop
    437c:	370c      	adds	r7, #12
    437e:	46bd      	mov	sp, r7
    4380:	f85d 7b04 	ldr.w	r7, [sp], #4
    4384:	4770      	bx	lr

00004386 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    4386:	b480      	push	{r7}
    4388:	b083      	sub	sp, #12
    438a:	af00      	add	r7, sp, #0
    438c:	6078      	str	r0, [r7, #4]
    438e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    4390:	687b      	ldr	r3, [r7, #4]
    4392:	683a      	ldr	r2, [r7, #0]
    4394:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4398:	bf00      	nop
    439a:	370c      	adds	r7, #12
    439c:	46bd      	mov	sp, r7
    439e:	f85d 7b04 	ldr.w	r7, [sp], #4
    43a2:	4770      	bx	lr

000043a4 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    43a4:	b480      	push	{r7}
    43a6:	b083      	sub	sp, #12
    43a8:	af00      	add	r7, sp, #0
    43aa:	6078      	str	r0, [r7, #4]
    43ac:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    43ae:	687b      	ldr	r3, [r7, #4]
    43b0:	683a      	ldr	r2, [r7, #0]
    43b2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    43b6:	bf00      	nop
    43b8:	370c      	adds	r7, #12
    43ba:	46bd      	mov	sp, r7
    43bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c0:	4770      	bx	lr
	...

000043c4 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    43c4:	b580      	push	{r7, lr}
    43c6:	b082      	sub	sp, #8
    43c8:	af00      	add	r7, sp, #0
    43ca:	6078      	str	r0, [r7, #4]
    43cc:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    43ce:	687b      	ldr	r3, [r7, #4]
    43d0:	683a      	ldr	r2, [r7, #0]
    43d2:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    43d4:	687b      	ldr	r3, [r7, #4]
    43d6:	681b      	ldr	r3, [r3, #0]
    43d8:	4618      	mov	r0, r3
    43da:	4b55      	ldr	r3, [pc, #340]	; (4530 <_can_async_init+0x16c>)
    43dc:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    43de:	bf00      	nop
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	681b      	ldr	r3, [r3, #0]
    43e4:	4618      	mov	r0, r3
    43e6:	4b53      	ldr	r3, [pc, #332]	; (4534 <_can_async_init+0x170>)
    43e8:	4798      	blx	r3
    43ea:	4603      	mov	r3, r0
    43ec:	f083 0301 	eor.w	r3, r3, #1
    43f0:	b2db      	uxtb	r3, r3
    43f2:	2b00      	cmp	r3, #0
    43f4:	d1f4      	bne.n	43e0 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    43f6:	687b      	ldr	r3, [r7, #4]
    43f8:	681b      	ldr	r3, [r3, #0]
    43fa:	4618      	mov	r0, r3
    43fc:	4b4e      	ldr	r3, [pc, #312]	; (4538 <_can_async_init+0x174>)
    43fe:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    4400:	683b      	ldr	r3, [r7, #0]
    4402:	4a4e      	ldr	r2, [pc, #312]	; (453c <_can_async_init+0x178>)
    4404:	4293      	cmp	r3, r2
    4406:	d17a      	bne.n	44fe <_can_async_init+0x13a>
		_can1_dev    = dev;
    4408:	4a4d      	ldr	r2, [pc, #308]	; (4540 <_can_async_init+0x17c>)
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    440e:	687b      	ldr	r3, [r7, #4]
    4410:	4a4c      	ldr	r2, [pc, #304]	; (4544 <_can_async_init+0x180>)
    4412:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	681b      	ldr	r3, [r3, #0]
    4418:	f44f 7140 	mov.w	r1, #768	; 0x300
    441c:	4618      	mov	r0, r3
    441e:	4b4a      	ldr	r3, [pc, #296]	; (4548 <_can_async_init+0x184>)
    4420:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    4422:	687b      	ldr	r3, [r7, #4]
    4424:	681b      	ldr	r3, [r3, #0]
    4426:	2102      	movs	r1, #2
    4428:	4618      	mov	r0, r3
    442a:	4b48      	ldr	r3, [pc, #288]	; (454c <_can_async_init+0x188>)
    442c:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    442e:	687b      	ldr	r3, [r7, #4]
    4430:	681b      	ldr	r3, [r3, #0]
    4432:	4947      	ldr	r1, [pc, #284]	; (4550 <_can_async_init+0x18c>)
    4434:	4618      	mov	r0, r3
    4436:	4b47      	ldr	r3, [pc, #284]	; (4554 <_can_async_init+0x190>)
    4438:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	4946      	ldr	r1, [pc, #280]	; (4558 <_can_async_init+0x194>)
    4440:	4618      	mov	r0, r3
    4442:	4b46      	ldr	r3, [pc, #280]	; (455c <_can_async_init+0x198>)
    4444:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    4446:	687b      	ldr	r3, [r7, #4]
    4448:	681a      	ldr	r2, [r3, #0]
    444a:	4b45      	ldr	r3, [pc, #276]	; (4560 <_can_async_init+0x19c>)
    444c:	b29b      	uxth	r3, r3
    444e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4456:	4619      	mov	r1, r3
    4458:	4610      	mov	r0, r2
    445a:	4b42      	ldr	r3, [pc, #264]	; (4564 <_can_async_init+0x1a0>)
    445c:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	681b      	ldr	r3, [r3, #0]
    4462:	2107      	movs	r1, #7
    4464:	4618      	mov	r0, r3
    4466:	4b40      	ldr	r3, [pc, #256]	; (4568 <_can_async_init+0x1a4>)
    4468:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    446a:	687b      	ldr	r3, [r7, #4]
    446c:	681b      	ldr	r3, [r3, #0]
    446e:	2107      	movs	r1, #7
    4470:	4618      	mov	r0, r3
    4472:	4b3e      	ldr	r3, [pc, #248]	; (456c <_can_async_init+0x1a8>)
    4474:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    4476:	687b      	ldr	r3, [r7, #4]
    4478:	681a      	ldr	r2, [r3, #0]
    447a:	4b3d      	ldr	r3, [pc, #244]	; (4570 <_can_async_init+0x1ac>)
    447c:	b29b      	uxth	r3, r3
    447e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    4482:	4619      	mov	r1, r3
    4484:	4610      	mov	r0, r2
    4486:	4b3b      	ldr	r3, [pc, #236]	; (4574 <_can_async_init+0x1b0>)
    4488:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	681a      	ldr	r2, [r3, #0]
    448e:	4b3a      	ldr	r3, [pc, #232]	; (4578 <_can_async_init+0x1b4>)
    4490:	b29b      	uxth	r3, r3
    4492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4496:	4619      	mov	r1, r3
    4498:	4610      	mov	r0, r2
    449a:	4b38      	ldr	r3, [pc, #224]	; (457c <_can_async_init+0x1b8>)
    449c:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    449e:	687b      	ldr	r3, [r7, #4]
    44a0:	681b      	ldr	r3, [r3, #0]
    44a2:	2108      	movs	r1, #8
    44a4:	4618      	mov	r0, r3
    44a6:	4b36      	ldr	r3, [pc, #216]	; (4580 <_can_async_init+0x1bc>)
    44a8:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    44aa:	687b      	ldr	r3, [r7, #4]
    44ac:	681a      	ldr	r2, [r3, #0]
    44ae:	4b35      	ldr	r3, [pc, #212]	; (4584 <_can_async_init+0x1c0>)
    44b0:	b29b      	uxth	r3, r3
    44b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    44b6:	4619      	mov	r1, r3
    44b8:	4610      	mov	r0, r2
    44ba:	4b33      	ldr	r3, [pc, #204]	; (4588 <_can_async_init+0x1c4>)
    44bc:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    44be:	687b      	ldr	r3, [r7, #4]
    44c0:	681a      	ldr	r2, [r3, #0]
    44c2:	4b32      	ldr	r3, [pc, #200]	; (458c <_can_async_init+0x1c8>)
    44c4:	b29b      	uxth	r3, r3
    44c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    44ca:	4619      	mov	r1, r3
    44cc:	4610      	mov	r0, r2
    44ce:	4b30      	ldr	r3, [pc, #192]	; (4590 <_can_async_init+0x1cc>)
    44d0:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    44d2:	687b      	ldr	r3, [r7, #4]
    44d4:	681b      	ldr	r3, [r3, #0]
    44d6:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    44da:	4618      	mov	r0, r3
    44dc:	4b2d      	ldr	r3, [pc, #180]	; (4594 <_can_async_init+0x1d0>)
    44de:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    44e0:	204f      	movs	r0, #79	; 0x4f
    44e2:	4b2d      	ldr	r3, [pc, #180]	; (4598 <_can_async_init+0x1d4>)
    44e4:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    44e6:	204f      	movs	r0, #79	; 0x4f
    44e8:	4b2c      	ldr	r3, [pc, #176]	; (459c <_can_async_init+0x1d8>)
    44ea:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    44ec:	204f      	movs	r0, #79	; 0x4f
    44ee:	4b2c      	ldr	r3, [pc, #176]	; (45a0 <_can_async_init+0x1dc>)
    44f0:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    44f2:	687b      	ldr	r3, [r7, #4]
    44f4:	681b      	ldr	r3, [r3, #0]
    44f6:	2101      	movs	r1, #1
    44f8:	4618      	mov	r0, r3
    44fa:	4b2a      	ldr	r3, [pc, #168]	; (45a4 <_can_async_init+0x1e0>)
    44fc:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    44fe:	687b      	ldr	r3, [r7, #4]
    4500:	681b      	ldr	r3, [r3, #0]
    4502:	4618      	mov	r0, r3
    4504:	4b28      	ldr	r3, [pc, #160]	; (45a8 <_can_async_init+0x1e4>)
    4506:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	681b      	ldr	r3, [r3, #0]
    450c:	4618      	mov	r0, r3
    450e:	4b27      	ldr	r3, [pc, #156]	; (45ac <_can_async_init+0x1e8>)
    4510:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    4512:	bf00      	nop
    4514:	687b      	ldr	r3, [r7, #4]
    4516:	681b      	ldr	r3, [r3, #0]
    4518:	4618      	mov	r0, r3
    451a:	4b06      	ldr	r3, [pc, #24]	; (4534 <_can_async_init+0x170>)
    451c:	4798      	blx	r3
    451e:	4603      	mov	r3, r0
    4520:	2b00      	cmp	r3, #0
    4522:	d1f7      	bne.n	4514 <_can_async_init+0x150>
	};

	return ERR_NONE;
    4524:	2300      	movs	r3, #0
}
    4526:	4618      	mov	r0, r3
    4528:	3708      	adds	r7, #8
    452a:	46bd      	mov	sp, r7
    452c:	bd80      	pop	{r7, pc}
    452e:	bf00      	nop
    4530:	00004179 	.word	0x00004179
    4534:	00004199 	.word	0x00004199
    4538:	000041e7 	.word	0x000041e7
    453c:	42000400 	.word	0x42000400
    4540:	20000a54 	.word	0x20000a54
    4544:	20000004 	.word	0x20000004
    4548:	00004227 	.word	0x00004227
    454c:	00004141 	.word	0x00004141
    4550:	00010c01 	.word	0x00010c01
    4554:	00004249 	.word	0x00004249
    4558:	00010c10 	.word	0x00010c10
    455c:	0000415d 	.word	0x0000415d
    4560:	20001558 	.word	0x20001558
    4564:	0000432d 	.word	0x0000432d
    4568:	0000434b 	.word	0x0000434b
    456c:	00004387 	.word	0x00004387
    4570:	20001510 	.word	0x20001510
    4574:	00004369 	.word	0x00004369
    4578:	200009b4 	.word	0x200009b4
    457c:	000043a5 	.word	0x000043a5
    4580:	000042b5 	.word	0x000042b5
    4584:	200009c4 	.word	0x200009c4
    4588:	000042d3 	.word	0x000042d3
    458c:	20000a44 	.word	0x20000a44
    4590:	000042f1 	.word	0x000042f1
    4594:	0000430f 	.word	0x0000430f
    4598:	00004099 	.word	0x00004099
    459c:	000040dd 	.word	0x000040dd
    45a0:	0000405d 	.word	0x0000405d
    45a4:	00004299 	.word	0x00004299
    45a8:	00004207 	.word	0x00004207
    45ac:	000041c7 	.word	0x000041c7

000045b0 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    45b0:	b590      	push	{r4, r7, lr}
    45b2:	b083      	sub	sp, #12
    45b4:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    45b6:	4b2c      	ldr	r3, [pc, #176]	; (4668 <CAN1_Handler+0xb8>)
    45b8:	681b      	ldr	r3, [r3, #0]
    45ba:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    45bc:	687b      	ldr	r3, [r7, #4]
    45be:	681b      	ldr	r3, [r3, #0]
    45c0:	4618      	mov	r0, r3
    45c2:	4b2a      	ldr	r3, [pc, #168]	; (466c <CAN1_Handler+0xbc>)
    45c4:	4798      	blx	r3
    45c6:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    45c8:	683b      	ldr	r3, [r7, #0]
    45ca:	f003 0301 	and.w	r3, r3, #1
    45ce:	2b00      	cmp	r3, #0
    45d0:	d003      	beq.n	45da <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    45d2:	687b      	ldr	r3, [r7, #4]
    45d4:	689b      	ldr	r3, [r3, #8]
    45d6:	6878      	ldr	r0, [r7, #4]
    45d8:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    45da:	683b      	ldr	r3, [r7, #0]
    45dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    45e0:	2b00      	cmp	r3, #0
    45e2:	d003      	beq.n	45ec <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    45e4:	687b      	ldr	r3, [r7, #4]
    45e6:	685b      	ldr	r3, [r3, #4]
    45e8:	6878      	ldr	r0, [r7, #4]
    45ea:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    45ec:	683b      	ldr	r3, [r7, #0]
    45ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    45f2:	2b00      	cmp	r3, #0
    45f4:	d004      	beq.n	4600 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    45f6:	687b      	ldr	r3, [r7, #4]
    45f8:	68db      	ldr	r3, [r3, #12]
    45fa:	2103      	movs	r1, #3
    45fc:	6878      	ldr	r0, [r7, #4]
    45fe:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4600:	683b      	ldr	r3, [r7, #0]
    4602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4606:	2b00      	cmp	r3, #0
    4608:	d004      	beq.n	4614 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	68db      	ldr	r3, [r3, #12]
    460e:	2100      	movs	r1, #0
    4610:	6878      	ldr	r0, [r7, #4]
    4612:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4614:	683b      	ldr	r3, [r7, #0]
    4616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    461a:	2b00      	cmp	r3, #0
    461c:	d00f      	beq.n	463e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    461e:	687b      	ldr	r3, [r7, #4]
    4620:	68dc      	ldr	r4, [r3, #12]
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	4618      	mov	r0, r3
    4628:	4b11      	ldr	r3, [pc, #68]	; (4670 <CAN1_Handler+0xc0>)
    462a:	4798      	blx	r3
    462c:	4603      	mov	r3, r0
    462e:	2b00      	cmp	r3, #0
    4630:	d001      	beq.n	4636 <CAN1_Handler+0x86>
    4632:	2302      	movs	r3, #2
    4634:	e000      	b.n	4638 <CAN1_Handler+0x88>
    4636:	2301      	movs	r3, #1
    4638:	4619      	mov	r1, r3
    463a:	6878      	ldr	r0, [r7, #4]
    463c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    463e:	683b      	ldr	r3, [r7, #0]
    4640:	f003 0308 	and.w	r3, r3, #8
    4644:	2b00      	cmp	r3, #0
    4646:	d004      	beq.n	4652 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	68db      	ldr	r3, [r3, #12]
    464c:	2104      	movs	r1, #4
    464e:	6878      	ldr	r0, [r7, #4]
    4650:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    4652:	687b      	ldr	r3, [r7, #4]
    4654:	681b      	ldr	r3, [r3, #0]
    4656:	6839      	ldr	r1, [r7, #0]
    4658:	4618      	mov	r0, r3
    465a:	4b06      	ldr	r3, [pc, #24]	; (4674 <CAN1_Handler+0xc4>)
    465c:	4798      	blx	r3
}
    465e:	bf00      	nop
    4660:	370c      	adds	r7, #12
    4662:	46bd      	mov	sp, r7
    4664:	bd90      	pop	{r4, r7, pc}
    4666:	bf00      	nop
    4668:	20000a54 	.word	0x20000a54
    466c:	00004281 	.word	0x00004281
    4670:	00004119 	.word	0x00004119
    4674:	00004265 	.word	0x00004265

00004678 <__NVIC_SetPendingIRQ>:
{
    4678:	b480      	push	{r7}
    467a:	b083      	sub	sp, #12
    467c:	af00      	add	r7, sp, #0
    467e:	4603      	mov	r3, r0
    4680:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4686:	2b00      	cmp	r3, #0
    4688:	db0c      	blt.n	46a4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    468a:	4909      	ldr	r1, [pc, #36]	; (46b0 <__NVIC_SetPendingIRQ+0x38>)
    468c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4690:	095b      	lsrs	r3, r3, #5
    4692:	88fa      	ldrh	r2, [r7, #6]
    4694:	f002 021f 	and.w	r2, r2, #31
    4698:	2001      	movs	r0, #1
    469a:	fa00 f202 	lsl.w	r2, r0, r2
    469e:	3340      	adds	r3, #64	; 0x40
    46a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    46a4:	bf00      	nop
    46a6:	370c      	adds	r7, #12
    46a8:	46bd      	mov	sp, r7
    46aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ae:	4770      	bx	lr
    46b0:	e000e100 	.word	0xe000e100

000046b4 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    46b4:	b580      	push	{r7, lr}
    46b6:	b082      	sub	sp, #8
    46b8:	af00      	add	r7, sp, #0
    46ba:	4603      	mov	r3, r0
    46bc:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    46be:	79fb      	ldrb	r3, [r7, #7]
    46c0:	b21b      	sxth	r3, r3
    46c2:	4618      	mov	r0, r3
    46c4:	4b02      	ldr	r3, [pc, #8]	; (46d0 <_irq_set+0x1c>)
    46c6:	4798      	blx	r3
}
    46c8:	bf00      	nop
    46ca:	3708      	adds	r7, #8
    46cc:	46bd      	mov	sp, r7
    46ce:	bd80      	pop	{r7, pc}
    46d0:	00004679 	.word	0x00004679

000046d4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    46d4:	b480      	push	{r7}
    46d6:	b083      	sub	sp, #12
    46d8:	af00      	add	r7, sp, #0
    46da:	4603      	mov	r3, r0
    46dc:	6039      	str	r1, [r7, #0]
    46de:	80fb      	strh	r3, [r7, #6]
    46e0:	4613      	mov	r3, r2
    46e2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    46e4:	797b      	ldrb	r3, [r7, #5]
    46e6:	3b04      	subs	r3, #4
    46e8:	2b05      	cmp	r3, #5
    46ea:	d86b      	bhi.n	47c4 <_get_cycles_for_us_internal+0xf0>
    46ec:	a201      	add	r2, pc, #4	; (adr r2, 46f4 <_get_cycles_for_us_internal+0x20>)
    46ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    46f2:	bf00      	nop
    46f4:	000047a3 	.word	0x000047a3
    46f8:	00004783 	.word	0x00004783
    46fc:	00004765 	.word	0x00004765
    4700:	00004747 	.word	0x00004747
    4704:	00004729 	.word	0x00004729
    4708:	0000470d 	.word	0x0000470d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    470c:	88fb      	ldrh	r3, [r7, #6]
    470e:	683a      	ldr	r2, [r7, #0]
    4710:	4935      	ldr	r1, [pc, #212]	; (47e8 <_get_cycles_for_us_internal+0x114>)
    4712:	fba1 1202 	umull	r1, r2, r1, r2
    4716:	0c92      	lsrs	r2, r2, #18
    4718:	fb02 f303 	mul.w	r3, r2, r3
    471c:	3302      	adds	r3, #2
    471e:	4a33      	ldr	r2, [pc, #204]	; (47ec <_get_cycles_for_us_internal+0x118>)
    4720:	fba2 2303 	umull	r2, r3, r2, r3
    4724:	085b      	lsrs	r3, r3, #1
    4726:	e059      	b.n	47dc <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4728:	88fb      	ldrh	r3, [r7, #6]
    472a:	683a      	ldr	r2, [r7, #0]
    472c:	0952      	lsrs	r2, r2, #5
    472e:	4930      	ldr	r1, [pc, #192]	; (47f0 <_get_cycles_for_us_internal+0x11c>)
    4730:	fba1 1202 	umull	r1, r2, r1, r2
    4734:	09d2      	lsrs	r2, r2, #7
    4736:	fb02 f303 	mul.w	r3, r2, r3
    473a:	331d      	adds	r3, #29
    473c:	4a2d      	ldr	r2, [pc, #180]	; (47f4 <_get_cycles_for_us_internal+0x120>)
    473e:	fba2 2303 	umull	r2, r3, r2, r3
    4742:	091b      	lsrs	r3, r3, #4
    4744:	e04a      	b.n	47dc <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    4746:	88fb      	ldrh	r3, [r7, #6]
    4748:	683a      	ldr	r2, [r7, #0]
    474a:	492b      	ldr	r1, [pc, #172]	; (47f8 <_get_cycles_for_us_internal+0x124>)
    474c:	fba1 1202 	umull	r1, r2, r1, r2
    4750:	0b52      	lsrs	r2, r2, #13
    4752:	fb02 f303 	mul.w	r3, r2, r3
    4756:	f203 132b 	addw	r3, r3, #299	; 0x12b
    475a:	4a28      	ldr	r2, [pc, #160]	; (47fc <_get_cycles_for_us_internal+0x128>)
    475c:	fba2 2303 	umull	r2, r3, r2, r3
    4760:	095b      	lsrs	r3, r3, #5
    4762:	e03b      	b.n	47dc <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4764:	88fb      	ldrh	r3, [r7, #6]
    4766:	683a      	ldr	r2, [r7, #0]
    4768:	4925      	ldr	r1, [pc, #148]	; (4800 <_get_cycles_for_us_internal+0x12c>)
    476a:	fba1 1202 	umull	r1, r2, r1, r2
    476e:	0992      	lsrs	r2, r2, #6
    4770:	fb02 f303 	mul.w	r3, r2, r3
    4774:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4778:	4a22      	ldr	r2, [pc, #136]	; (4804 <_get_cycles_for_us_internal+0x130>)
    477a:	fba2 2303 	umull	r2, r3, r2, r3
    477e:	099b      	lsrs	r3, r3, #6
    4780:	e02c      	b.n	47dc <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4782:	88fb      	ldrh	r3, [r7, #6]
    4784:	683a      	ldr	r2, [r7, #0]
    4786:	4920      	ldr	r1, [pc, #128]	; (4808 <_get_cycles_for_us_internal+0x134>)
    4788:	fba1 1202 	umull	r1, r2, r1, r2
    478c:	0952      	lsrs	r2, r2, #5
    478e:	fb02 f303 	mul.w	r3, r2, r3
    4792:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4796:	332f      	adds	r3, #47	; 0x2f
    4798:	4a1c      	ldr	r2, [pc, #112]	; (480c <_get_cycles_for_us_internal+0x138>)
    479a:	fba2 2303 	umull	r2, r3, r2, r3
    479e:	0b5b      	lsrs	r3, r3, #13
    47a0:	e01c      	b.n	47dc <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    47a2:	88fb      	ldrh	r3, [r7, #6]
    47a4:	683a      	ldr	r2, [r7, #0]
    47a6:	491a      	ldr	r1, [pc, #104]	; (4810 <_get_cycles_for_us_internal+0x13c>)
    47a8:	fba1 1202 	umull	r1, r2, r1, r2
    47ac:	08d2      	lsrs	r2, r2, #3
    47ae:	fb02 f303 	mul.w	r3, r2, r3
    47b2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    47b6:	f203 33df 	addw	r3, r3, #991	; 0x3df
    47ba:	4a16      	ldr	r2, [pc, #88]	; (4814 <_get_cycles_for_us_internal+0x140>)
    47bc:	fba2 2303 	umull	r2, r3, r2, r3
    47c0:	0c5b      	lsrs	r3, r3, #17
    47c2:	e00b      	b.n	47dc <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    47c4:	88fb      	ldrh	r3, [r7, #6]
    47c6:	683a      	ldr	r2, [r7, #0]
    47c8:	fb02 f303 	mul.w	r3, r2, r3
    47cc:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    47d0:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    47d4:	4a10      	ldr	r2, [pc, #64]	; (4818 <_get_cycles_for_us_internal+0x144>)
    47d6:	fba2 2303 	umull	r2, r3, r2, r3
    47da:	0c9b      	lsrs	r3, r3, #18
	}
}
    47dc:	4618      	mov	r0, r3
    47de:	370c      	adds	r7, #12
    47e0:	46bd      	mov	sp, r7
    47e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    47e6:	4770      	bx	lr
    47e8:	431bde83 	.word	0x431bde83
    47ec:	aaaaaaab 	.word	0xaaaaaaab
    47f0:	0a7c5ac5 	.word	0x0a7c5ac5
    47f4:	88888889 	.word	0x88888889
    47f8:	d1b71759 	.word	0xd1b71759
    47fc:	1b4e81b5 	.word	0x1b4e81b5
    4800:	10624dd3 	.word	0x10624dd3
    4804:	057619f1 	.word	0x057619f1
    4808:	51eb851f 	.word	0x51eb851f
    480c:	45e7b273 	.word	0x45e7b273
    4810:	cccccccd 	.word	0xcccccccd
    4814:	6fd91d85 	.word	0x6fd91d85
    4818:	165e9f81 	.word	0x165e9f81

0000481c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    481c:	b580      	push	{r7, lr}
    481e:	b082      	sub	sp, #8
    4820:	af00      	add	r7, sp, #0
    4822:	4603      	mov	r3, r0
    4824:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4826:	88fb      	ldrh	r3, [r7, #6]
    4828:	2209      	movs	r2, #9
    482a:	4904      	ldr	r1, [pc, #16]	; (483c <_get_cycles_for_us+0x20>)
    482c:	4618      	mov	r0, r3
    482e:	4b04      	ldr	r3, [pc, #16]	; (4840 <_get_cycles_for_us+0x24>)
    4830:	4798      	blx	r3
    4832:	4603      	mov	r3, r0
}
    4834:	4618      	mov	r0, r3
    4836:	3708      	adds	r7, #8
    4838:	46bd      	mov	sp, r7
    483a:	bd80      	pop	{r7, pc}
    483c:	07270e00 	.word	0x07270e00
    4840:	000046d5 	.word	0x000046d5

00004844 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4844:	b480      	push	{r7}
    4846:	b083      	sub	sp, #12
    4848:	af00      	add	r7, sp, #0
    484a:	4603      	mov	r3, r0
    484c:	6039      	str	r1, [r7, #0]
    484e:	80fb      	strh	r3, [r7, #6]
    4850:	4613      	mov	r3, r2
    4852:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4854:	797b      	ldrb	r3, [r7, #5]
    4856:	3b04      	subs	r3, #4
    4858:	2b05      	cmp	r3, #5
    485a:	d870      	bhi.n	493e <_get_cycles_for_ms_internal+0xfa>
    485c:	a201      	add	r2, pc, #4	; (adr r2, 4864 <_get_cycles_for_ms_internal+0x20>)
    485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4862:	bf00      	nop
    4864:	00004921 	.word	0x00004921
    4868:	00004905 	.word	0x00004905
    486c:	000048e9 	.word	0x000048e9
    4870:	000048c5 	.word	0x000048c5
    4874:	000048a1 	.word	0x000048a1
    4878:	0000487d 	.word	0x0000487d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    487c:	88fb      	ldrh	r3, [r7, #6]
    487e:	683a      	ldr	r2, [r7, #0]
    4880:	4937      	ldr	r1, [pc, #220]	; (4960 <_get_cycles_for_ms_internal+0x11c>)
    4882:	fba1 1202 	umull	r1, r2, r1, r2
    4886:	0c92      	lsrs	r2, r2, #18
    4888:	fb02 f303 	mul.w	r3, r2, r3
    488c:	3302      	adds	r3, #2
    488e:	4a35      	ldr	r2, [pc, #212]	; (4964 <_get_cycles_for_ms_internal+0x120>)
    4890:	fba2 2303 	umull	r2, r3, r2, r3
    4894:	085b      	lsrs	r3, r3, #1
    4896:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    489a:	fb02 f303 	mul.w	r3, r2, r3
    489e:	e058      	b.n	4952 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    48a0:	88fb      	ldrh	r3, [r7, #6]
    48a2:	683a      	ldr	r2, [r7, #0]
    48a4:	0952      	lsrs	r2, r2, #5
    48a6:	4930      	ldr	r1, [pc, #192]	; (4968 <_get_cycles_for_ms_internal+0x124>)
    48a8:	fba1 1202 	umull	r1, r2, r1, r2
    48ac:	09d2      	lsrs	r2, r2, #7
    48ae:	fb02 f303 	mul.w	r3, r2, r3
    48b2:	3302      	adds	r3, #2
    48b4:	4a2b      	ldr	r2, [pc, #172]	; (4964 <_get_cycles_for_ms_internal+0x120>)
    48b6:	fba2 2303 	umull	r2, r3, r2, r3
    48ba:	085b      	lsrs	r3, r3, #1
    48bc:	2264      	movs	r2, #100	; 0x64
    48be:	fb02 f303 	mul.w	r3, r2, r3
    48c2:	e046      	b.n	4952 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    48c4:	88fb      	ldrh	r3, [r7, #6]
    48c6:	683a      	ldr	r2, [r7, #0]
    48c8:	4928      	ldr	r1, [pc, #160]	; (496c <_get_cycles_for_ms_internal+0x128>)
    48ca:	fba1 1202 	umull	r1, r2, r1, r2
    48ce:	0b52      	lsrs	r2, r2, #13
    48d0:	fb02 f303 	mul.w	r3, r2, r3
    48d4:	3302      	adds	r3, #2
    48d6:	4a23      	ldr	r2, [pc, #140]	; (4964 <_get_cycles_for_ms_internal+0x120>)
    48d8:	fba2 2303 	umull	r2, r3, r2, r3
    48dc:	085a      	lsrs	r2, r3, #1
    48de:	4613      	mov	r3, r2
    48e0:	009b      	lsls	r3, r3, #2
    48e2:	4413      	add	r3, r2
    48e4:	005b      	lsls	r3, r3, #1
    48e6:	e034      	b.n	4952 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    48e8:	88fb      	ldrh	r3, [r7, #6]
    48ea:	683a      	ldr	r2, [r7, #0]
    48ec:	4920      	ldr	r1, [pc, #128]	; (4970 <_get_cycles_for_ms_internal+0x12c>)
    48ee:	fba1 1202 	umull	r1, r2, r1, r2
    48f2:	0992      	lsrs	r2, r2, #6
    48f4:	fb02 f303 	mul.w	r3, r2, r3
    48f8:	3302      	adds	r3, #2
    48fa:	4a1a      	ldr	r2, [pc, #104]	; (4964 <_get_cycles_for_ms_internal+0x120>)
    48fc:	fba2 2303 	umull	r2, r3, r2, r3
    4900:	085b      	lsrs	r3, r3, #1
    4902:	e026      	b.n	4952 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4904:	88fb      	ldrh	r3, [r7, #6]
    4906:	683a      	ldr	r2, [r7, #0]
    4908:	491a      	ldr	r1, [pc, #104]	; (4974 <_get_cycles_for_ms_internal+0x130>)
    490a:	fba1 1202 	umull	r1, r2, r1, r2
    490e:	0952      	lsrs	r2, r2, #5
    4910:	fb02 f303 	mul.w	r3, r2, r3
    4914:	331d      	adds	r3, #29
    4916:	4a18      	ldr	r2, [pc, #96]	; (4978 <_get_cycles_for_ms_internal+0x134>)
    4918:	fba2 2303 	umull	r2, r3, r2, r3
    491c:	091b      	lsrs	r3, r3, #4
    491e:	e018      	b.n	4952 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4920:	88fb      	ldrh	r3, [r7, #6]
    4922:	683a      	ldr	r2, [r7, #0]
    4924:	4915      	ldr	r1, [pc, #84]	; (497c <_get_cycles_for_ms_internal+0x138>)
    4926:	fba1 1202 	umull	r1, r2, r1, r2
    492a:	08d2      	lsrs	r2, r2, #3
    492c:	fb02 f303 	mul.w	r3, r2, r3
    4930:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4934:	4a12      	ldr	r2, [pc, #72]	; (4980 <_get_cycles_for_ms_internal+0x13c>)
    4936:	fba2 2303 	umull	r2, r3, r2, r3
    493a:	095b      	lsrs	r3, r3, #5
    493c:	e009      	b.n	4952 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    493e:	88fb      	ldrh	r3, [r7, #6]
    4940:	683a      	ldr	r2, [r7, #0]
    4942:	fb02 f303 	mul.w	r3, r2, r3
    4946:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    494a:	4a0e      	ldr	r2, [pc, #56]	; (4984 <_get_cycles_for_ms_internal+0x140>)
    494c:	fba2 2303 	umull	r2, r3, r2, r3
    4950:	099b      	lsrs	r3, r3, #6
	}
}
    4952:	4618      	mov	r0, r3
    4954:	370c      	adds	r7, #12
    4956:	46bd      	mov	sp, r7
    4958:	f85d 7b04 	ldr.w	r7, [sp], #4
    495c:	4770      	bx	lr
    495e:	bf00      	nop
    4960:	431bde83 	.word	0x431bde83
    4964:	aaaaaaab 	.word	0xaaaaaaab
    4968:	0a7c5ac5 	.word	0x0a7c5ac5
    496c:	d1b71759 	.word	0xd1b71759
    4970:	10624dd3 	.word	0x10624dd3
    4974:	51eb851f 	.word	0x51eb851f
    4978:	88888889 	.word	0x88888889
    497c:	cccccccd 	.word	0xcccccccd
    4980:	1b4e81b5 	.word	0x1b4e81b5
    4984:	057619f1 	.word	0x057619f1

00004988 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4988:	b580      	push	{r7, lr}
    498a:	b082      	sub	sp, #8
    498c:	af00      	add	r7, sp, #0
    498e:	4603      	mov	r3, r0
    4990:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4992:	88fb      	ldrh	r3, [r7, #6]
    4994:	2209      	movs	r2, #9
    4996:	4904      	ldr	r1, [pc, #16]	; (49a8 <_get_cycles_for_ms+0x20>)
    4998:	4618      	mov	r0, r3
    499a:	4b04      	ldr	r3, [pc, #16]	; (49ac <_get_cycles_for_ms+0x24>)
    499c:	4798      	blx	r3
    499e:	4603      	mov	r3, r0
}
    49a0:	4618      	mov	r0, r3
    49a2:	3708      	adds	r7, #8
    49a4:	46bd      	mov	sp, r7
    49a6:	bd80      	pop	{r7, pc}
    49a8:	07270e00 	.word	0x07270e00
    49ac:	00004845 	.word	0x00004845

000049b0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    49b0:	b480      	push	{r7}
    49b2:	b083      	sub	sp, #12
    49b4:	af00      	add	r7, sp, #0
    49b6:	6078      	str	r0, [r7, #4]
    49b8:	6039      	str	r1, [r7, #0]
    49ba:	bf00      	nop
    49bc:	f3af 8000 	nop.w

000049c0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    49c0:	3901      	subs	r1, #1
    49c2:	d8fd      	bhi.n	49c0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    49c4:	bf00      	nop
    49c6:	370c      	adds	r7, #12
    49c8:	46bd      	mov	sp, r7
    49ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    49ce:	4770      	bx	lr

000049d0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    49d0:	b480      	push	{r7}
    49d2:	b083      	sub	sp, #12
    49d4:	af00      	add	r7, sp, #0
    49d6:	6078      	str	r0, [r7, #4]
    49d8:	460b      	mov	r3, r1
    49da:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	881b      	ldrh	r3, [r3, #0]
    49e0:	b29a      	uxth	r2, r3
    49e2:	887b      	ldrh	r3, [r7, #2]
    49e4:	021b      	lsls	r3, r3, #8
    49e6:	b29b      	uxth	r3, r3
    49e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    49ec:	b29b      	uxth	r3, r3
    49ee:	4313      	orrs	r3, r2
    49f0:	b29a      	uxth	r2, r3
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    49f6:	bf00      	nop
    49f8:	370c      	adds	r7, #12
    49fa:	46bd      	mov	sp, r7
    49fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a00:	4770      	bx	lr

00004a02 <hri_port_set_EVCTRL_reg>:
{
    4a02:	b480      	push	{r7}
    4a04:	b085      	sub	sp, #20
    4a06:	af00      	add	r7, sp, #0
    4a08:	60f8      	str	r0, [r7, #12]
    4a0a:	460b      	mov	r3, r1
    4a0c:	607a      	str	r2, [r7, #4]
    4a0e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4a10:	7afb      	ldrb	r3, [r7, #11]
    4a12:	7afa      	ldrb	r2, [r7, #11]
    4a14:	68f9      	ldr	r1, [r7, #12]
    4a16:	01d2      	lsls	r2, r2, #7
    4a18:	440a      	add	r2, r1
    4a1a:	322c      	adds	r2, #44	; 0x2c
    4a1c:	6811      	ldr	r1, [r2, #0]
    4a1e:	687a      	ldr	r2, [r7, #4]
    4a20:	430a      	orrs	r2, r1
    4a22:	68f9      	ldr	r1, [r7, #12]
    4a24:	01db      	lsls	r3, r3, #7
    4a26:	440b      	add	r3, r1
    4a28:	332c      	adds	r3, #44	; 0x2c
    4a2a:	601a      	str	r2, [r3, #0]
}
    4a2c:	bf00      	nop
    4a2e:	3714      	adds	r7, #20
    4a30:	46bd      	mov	sp, r7
    4a32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a36:	4770      	bx	lr

00004a38 <_port_event_init>:

static inline void _port_event_init()
{
    4a38:	b580      	push	{r7, lr}
    4a3a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4a3c:	2200      	movs	r2, #0
    4a3e:	2100      	movs	r1, #0
    4a40:	480a      	ldr	r0, [pc, #40]	; (4a6c <_port_event_init+0x34>)
    4a42:	4b0b      	ldr	r3, [pc, #44]	; (4a70 <_port_event_init+0x38>)
    4a44:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4a46:	2200      	movs	r2, #0
    4a48:	2101      	movs	r1, #1
    4a4a:	4808      	ldr	r0, [pc, #32]	; (4a6c <_port_event_init+0x34>)
    4a4c:	4b08      	ldr	r3, [pc, #32]	; (4a70 <_port_event_init+0x38>)
    4a4e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4a50:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4a54:	2102      	movs	r1, #2
    4a56:	4805      	ldr	r0, [pc, #20]	; (4a6c <_port_event_init+0x34>)
    4a58:	4b05      	ldr	r3, [pc, #20]	; (4a70 <_port_event_init+0x38>)
    4a5a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4a5c:	2200      	movs	r2, #0
    4a5e:	2103      	movs	r1, #3
    4a60:	4802      	ldr	r0, [pc, #8]	; (4a6c <_port_event_init+0x34>)
    4a62:	4b03      	ldr	r3, [pc, #12]	; (4a70 <_port_event_init+0x38>)
    4a64:	4798      	blx	r3
}
    4a66:	bf00      	nop
    4a68:	bd80      	pop	{r7, pc}
    4a6a:	bf00      	nop
    4a6c:	41008000 	.word	0x41008000
    4a70:	00004a03 	.word	0x00004a03

00004a74 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4a74:	b580      	push	{r7, lr}
    4a76:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4a78:	2104      	movs	r1, #4
    4a7a:	480b      	ldr	r0, [pc, #44]	; (4aa8 <_init_chip+0x34>)
    4a7c:	4b0b      	ldr	r3, [pc, #44]	; (4aac <_init_chip+0x38>)
    4a7e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4a80:	4b0b      	ldr	r3, [pc, #44]	; (4ab0 <_init_chip+0x3c>)
    4a82:	4798      	blx	r3
	_oscctrl_init_sources();
    4a84:	4b0b      	ldr	r3, [pc, #44]	; (4ab4 <_init_chip+0x40>)
    4a86:	4798      	blx	r3
	_mclk_init();
    4a88:	4b0b      	ldr	r3, [pc, #44]	; (4ab8 <_init_chip+0x44>)
    4a8a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4a8c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4a90:	4b0a      	ldr	r3, [pc, #40]	; (4abc <_init_chip+0x48>)
    4a92:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4a94:	4b0a      	ldr	r3, [pc, #40]	; (4ac0 <_init_chip+0x4c>)
    4a96:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4a98:	f640 30df 	movw	r0, #3039	; 0xbdf
    4a9c:	4b07      	ldr	r3, [pc, #28]	; (4abc <_init_chip+0x48>)
    4a9e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4aa0:	4b08      	ldr	r3, [pc, #32]	; (4ac4 <_init_chip+0x50>)
    4aa2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4aa4:	bf00      	nop
    4aa6:	bd80      	pop	{r7, pc}
    4aa8:	41004000 	.word	0x41004000
    4aac:	000049d1 	.word	0x000049d1
    4ab0:	00005565 	.word	0x00005565
    4ab4:	00005a2d 	.word	0x00005a2d
    4ab8:	00005485 	.word	0x00005485
    4abc:	00005345 	.word	0x00005345
    4ac0:	00005a6d 	.word	0x00005a6d
    4ac4:	00004a39 	.word	0x00004a39

00004ac8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4ac8:	b480      	push	{r7}
    4aca:	b083      	sub	sp, #12
    4acc:	af00      	add	r7, sp, #0
    4ace:	6078      	str	r0, [r7, #4]
    4ad0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4ad2:	687b      	ldr	r3, [r7, #4]
    4ad4:	683a      	ldr	r2, [r7, #0]
    4ad6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4ad8:	2300      	movs	r3, #0
}
    4ada:	4618      	mov	r0, r3
    4adc:	370c      	adds	r7, #12
    4ade:	46bd      	mov	sp, r7
    4ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ae4:	4770      	bx	lr
	...

00004ae8 <__NVIC_EnableIRQ>:
{
    4ae8:	b480      	push	{r7}
    4aea:	b083      	sub	sp, #12
    4aec:	af00      	add	r7, sp, #0
    4aee:	4603      	mov	r3, r0
    4af0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4af6:	2b00      	cmp	r3, #0
    4af8:	db0b      	blt.n	4b12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4afa:	4909      	ldr	r1, [pc, #36]	; (4b20 <__NVIC_EnableIRQ+0x38>)
    4afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4b00:	095b      	lsrs	r3, r3, #5
    4b02:	88fa      	ldrh	r2, [r7, #6]
    4b04:	f002 021f 	and.w	r2, r2, #31
    4b08:	2001      	movs	r0, #1
    4b0a:	fa00 f202 	lsl.w	r2, r0, r2
    4b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4b12:	bf00      	nop
    4b14:	370c      	adds	r7, #12
    4b16:	46bd      	mov	sp, r7
    4b18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b1c:	4770      	bx	lr
    4b1e:	bf00      	nop
    4b20:	e000e100 	.word	0xe000e100

00004b24 <__NVIC_DisableIRQ>:
{
    4b24:	b480      	push	{r7}
    4b26:	b083      	sub	sp, #12
    4b28:	af00      	add	r7, sp, #0
    4b2a:	4603      	mov	r3, r0
    4b2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4b32:	2b00      	cmp	r3, #0
    4b34:	db10      	blt.n	4b58 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b36:	490b      	ldr	r1, [pc, #44]	; (4b64 <__NVIC_DisableIRQ+0x40>)
    4b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4b3c:	095b      	lsrs	r3, r3, #5
    4b3e:	88fa      	ldrh	r2, [r7, #6]
    4b40:	f002 021f 	and.w	r2, r2, #31
    4b44:	2001      	movs	r0, #1
    4b46:	fa00 f202 	lsl.w	r2, r0, r2
    4b4a:	3320      	adds	r3, #32
    4b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4b50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4b54:	f3bf 8f6f 	isb	sy
}
    4b58:	bf00      	nop
    4b5a:	370c      	adds	r7, #12
    4b5c:	46bd      	mov	sp, r7
    4b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b62:	4770      	bx	lr
    4b64:	e000e100 	.word	0xe000e100

00004b68 <__NVIC_ClearPendingIRQ>:
{
    4b68:	b480      	push	{r7}
    4b6a:	b083      	sub	sp, #12
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	4603      	mov	r3, r0
    4b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4b76:	2b00      	cmp	r3, #0
    4b78:	db0c      	blt.n	4b94 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b7a:	4909      	ldr	r1, [pc, #36]	; (4ba0 <__NVIC_ClearPendingIRQ+0x38>)
    4b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4b80:	095b      	lsrs	r3, r3, #5
    4b82:	88fa      	ldrh	r2, [r7, #6]
    4b84:	f002 021f 	and.w	r2, r2, #31
    4b88:	2001      	movs	r0, #1
    4b8a:	fa00 f202 	lsl.w	r2, r0, r2
    4b8e:	3360      	adds	r3, #96	; 0x60
    4b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4b94:	bf00      	nop
    4b96:	370c      	adds	r7, #12
    4b98:	46bd      	mov	sp, r7
    4b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b9e:	4770      	bx	lr
    4ba0:	e000e100 	.word	0xe000e100

00004ba4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4ba4:	b480      	push	{r7}
    4ba6:	b083      	sub	sp, #12
    4ba8:	af00      	add	r7, sp, #0
    4baa:	6078      	str	r0, [r7, #4]
    4bac:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4bae:	bf00      	nop
    4bb0:	687b      	ldr	r3, [r7, #4]
    4bb2:	685a      	ldr	r2, [r3, #4]
    4bb4:	683b      	ldr	r3, [r7, #0]
    4bb6:	4013      	ands	r3, r2
    4bb8:	2b00      	cmp	r3, #0
    4bba:	d1f9      	bne.n	4bb0 <hri_eic_wait_for_sync+0xc>
	};
}
    4bbc:	bf00      	nop
    4bbe:	370c      	adds	r7, #12
    4bc0:	46bd      	mov	sp, r7
    4bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bc6:	4770      	bx	lr

00004bc8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4bc8:	b480      	push	{r7}
    4bca:	b083      	sub	sp, #12
    4bcc:	af00      	add	r7, sp, #0
    4bce:	6078      	str	r0, [r7, #4]
    4bd0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	685a      	ldr	r2, [r3, #4]
    4bd6:	683b      	ldr	r3, [r7, #0]
    4bd8:	4013      	ands	r3, r2
    4bda:	2b00      	cmp	r3, #0
    4bdc:	bf14      	ite	ne
    4bde:	2301      	movne	r3, #1
    4be0:	2300      	moveq	r3, #0
    4be2:	b2db      	uxtb	r3, r3
}
    4be4:	4618      	mov	r0, r3
    4be6:	370c      	adds	r7, #12
    4be8:	46bd      	mov	sp, r7
    4bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bee:	4770      	bx	lr

00004bf0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4bf0:	b480      	push	{r7}
    4bf2:	b083      	sub	sp, #12
    4bf4:	af00      	add	r7, sp, #0
    4bf6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4bf8:	687b      	ldr	r3, [r7, #4]
    4bfa:	695b      	ldr	r3, [r3, #20]
}
    4bfc:	4618      	mov	r0, r3
    4bfe:	370c      	adds	r7, #12
    4c00:	46bd      	mov	sp, r7
    4c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c06:	4770      	bx	lr

00004c08 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4c08:	b480      	push	{r7}
    4c0a:	b083      	sub	sp, #12
    4c0c:	af00      	add	r7, sp, #0
    4c0e:	6078      	str	r0, [r7, #4]
    4c10:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4c12:	687b      	ldr	r3, [r7, #4]
    4c14:	683a      	ldr	r2, [r7, #0]
    4c16:	615a      	str	r2, [r3, #20]
}
    4c18:	bf00      	nop
    4c1a:	370c      	adds	r7, #12
    4c1c:	46bd      	mov	sp, r7
    4c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c22:	4770      	bx	lr

00004c24 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4c24:	b480      	push	{r7}
    4c26:	b083      	sub	sp, #12
    4c28:	af00      	add	r7, sp, #0
    4c2a:	6078      	str	r0, [r7, #4]
    4c2c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4c2e:	687b      	ldr	r3, [r7, #4]
    4c30:	683a      	ldr	r2, [r7, #0]
    4c32:	611a      	str	r2, [r3, #16]
}
    4c34:	bf00      	nop
    4c36:	370c      	adds	r7, #12
    4c38:	46bd      	mov	sp, r7
    4c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c3e:	4770      	bx	lr

00004c40 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4c40:	b480      	push	{r7}
    4c42:	b083      	sub	sp, #12
    4c44:	af00      	add	r7, sp, #0
    4c46:	6078      	str	r0, [r7, #4]
    4c48:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4c4a:	687b      	ldr	r3, [r7, #4]
    4c4c:	683a      	ldr	r2, [r7, #0]
    4c4e:	60da      	str	r2, [r3, #12]
}
    4c50:	bf00      	nop
    4c52:	370c      	adds	r7, #12
    4c54:	46bd      	mov	sp, r7
    4c56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c5a:	4770      	bx	lr

00004c5c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4c5c:	b580      	push	{r7, lr}
    4c5e:	b082      	sub	sp, #8
    4c60:	af00      	add	r7, sp, #0
    4c62:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	781b      	ldrb	r3, [r3, #0]
    4c68:	b2db      	uxtb	r3, r3
    4c6a:	f043 0302 	orr.w	r3, r3, #2
    4c6e:	b2da      	uxtb	r2, r3
    4c70:	687b      	ldr	r3, [r7, #4]
    4c72:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4c74:	2103      	movs	r1, #3
    4c76:	6878      	ldr	r0, [r7, #4]
    4c78:	4b02      	ldr	r3, [pc, #8]	; (4c84 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4c7a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c7c:	bf00      	nop
    4c7e:	3708      	adds	r7, #8
    4c80:	46bd      	mov	sp, r7
    4c82:	bd80      	pop	{r7, pc}
    4c84:	00004ba5 	.word	0x00004ba5

00004c88 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4c88:	b580      	push	{r7, lr}
    4c8a:	b082      	sub	sp, #8
    4c8c:	af00      	add	r7, sp, #0
    4c8e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4c90:	687b      	ldr	r3, [r7, #4]
    4c92:	781b      	ldrb	r3, [r3, #0]
    4c94:	b2db      	uxtb	r3, r3
    4c96:	f023 0302 	bic.w	r3, r3, #2
    4c9a:	b2da      	uxtb	r2, r3
    4c9c:	687b      	ldr	r3, [r7, #4]
    4c9e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4ca0:	2103      	movs	r1, #3
    4ca2:	6878      	ldr	r0, [r7, #4]
    4ca4:	4b02      	ldr	r3, [pc, #8]	; (4cb0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4ca6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4ca8:	bf00      	nop
    4caa:	3708      	adds	r7, #8
    4cac:	46bd      	mov	sp, r7
    4cae:	bd80      	pop	{r7, pc}
    4cb0:	00004ba5 	.word	0x00004ba5

00004cb4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4cb4:	b580      	push	{r7, lr}
    4cb6:	b084      	sub	sp, #16
    4cb8:	af00      	add	r7, sp, #0
    4cba:	6078      	str	r0, [r7, #4]
    4cbc:	460b      	mov	r3, r1
    4cbe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4cc0:	687b      	ldr	r3, [r7, #4]
    4cc2:	781b      	ldrb	r3, [r3, #0]
    4cc4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4cc6:	7bfb      	ldrb	r3, [r7, #15]
    4cc8:	f023 0310 	bic.w	r3, r3, #16
    4ccc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4cce:	78fb      	ldrb	r3, [r7, #3]
    4cd0:	011b      	lsls	r3, r3, #4
    4cd2:	b25a      	sxtb	r2, r3
    4cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4cd8:	4313      	orrs	r3, r2
    4cda:	b25b      	sxtb	r3, r3
    4cdc:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4cde:	687b      	ldr	r3, [r7, #4]
    4ce0:	7bfa      	ldrb	r2, [r7, #15]
    4ce2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4ce4:	2103      	movs	r1, #3
    4ce6:	6878      	ldr	r0, [r7, #4]
    4ce8:	4b02      	ldr	r3, [pc, #8]	; (4cf4 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4cea:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4cec:	bf00      	nop
    4cee:	3710      	adds	r7, #16
    4cf0:	46bd      	mov	sp, r7
    4cf2:	bd80      	pop	{r7, pc}
    4cf4:	00004ba5 	.word	0x00004ba5

00004cf8 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4cf8:	b580      	push	{r7, lr}
    4cfa:	b084      	sub	sp, #16
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	6078      	str	r0, [r7, #4]
    4d00:	460b      	mov	r3, r1
    4d02:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4d04:	2103      	movs	r1, #3
    4d06:	6878      	ldr	r0, [r7, #4]
    4d08:	4b06      	ldr	r3, [pc, #24]	; (4d24 <hri_eic_get_CTRLA_reg+0x2c>)
    4d0a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4d0c:	687b      	ldr	r3, [r7, #4]
    4d0e:	781b      	ldrb	r3, [r3, #0]
    4d10:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4d12:	7bfa      	ldrb	r2, [r7, #15]
    4d14:	78fb      	ldrb	r3, [r7, #3]
    4d16:	4013      	ands	r3, r2
    4d18:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4d1a:	7bfb      	ldrb	r3, [r7, #15]
}
    4d1c:	4618      	mov	r0, r3
    4d1e:	3710      	adds	r7, #16
    4d20:	46bd      	mov	sp, r7
    4d22:	bd80      	pop	{r7, pc}
    4d24:	00004ba5 	.word	0x00004ba5

00004d28 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4d28:	b580      	push	{r7, lr}
    4d2a:	b082      	sub	sp, #8
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	6078      	str	r0, [r7, #4]
    4d30:	460b      	mov	r3, r1
    4d32:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	78fa      	ldrb	r2, [r7, #3]
    4d38:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4d3a:	2103      	movs	r1, #3
    4d3c:	6878      	ldr	r0, [r7, #4]
    4d3e:	4b03      	ldr	r3, [pc, #12]	; (4d4c <hri_eic_write_CTRLA_reg+0x24>)
    4d40:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d42:	bf00      	nop
    4d44:	3708      	adds	r7, #8
    4d46:	46bd      	mov	sp, r7
    4d48:	bd80      	pop	{r7, pc}
    4d4a:	bf00      	nop
    4d4c:	00004ba5 	.word	0x00004ba5

00004d50 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4d50:	b480      	push	{r7}
    4d52:	b083      	sub	sp, #12
    4d54:	af00      	add	r7, sp, #0
    4d56:	6078      	str	r0, [r7, #4]
    4d58:	460b      	mov	r3, r1
    4d5a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4d5c:	687b      	ldr	r3, [r7, #4]
    4d5e:	78fa      	ldrb	r2, [r7, #3]
    4d60:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d62:	bf00      	nop
    4d64:	370c      	adds	r7, #12
    4d66:	46bd      	mov	sp, r7
    4d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d6c:	4770      	bx	lr

00004d6e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4d6e:	b480      	push	{r7}
    4d70:	b083      	sub	sp, #12
    4d72:	af00      	add	r7, sp, #0
    4d74:	6078      	str	r0, [r7, #4]
    4d76:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4d78:	687b      	ldr	r3, [r7, #4]
    4d7a:	683a      	ldr	r2, [r7, #0]
    4d7c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d7e:	bf00      	nop
    4d80:	370c      	adds	r7, #12
    4d82:	46bd      	mov	sp, r7
    4d84:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d88:	4770      	bx	lr

00004d8a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4d8a:	b480      	push	{r7}
    4d8c:	b083      	sub	sp, #12
    4d8e:	af00      	add	r7, sp, #0
    4d90:	6078      	str	r0, [r7, #4]
    4d92:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4d94:	687b      	ldr	r3, [r7, #4]
    4d96:	683a      	ldr	r2, [r7, #0]
    4d98:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d9a:	bf00      	nop
    4d9c:	370c      	adds	r7, #12
    4d9e:	46bd      	mov	sp, r7
    4da0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4da4:	4770      	bx	lr

00004da6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4da6:	b480      	push	{r7}
    4da8:	b085      	sub	sp, #20
    4daa:	af00      	add	r7, sp, #0
    4dac:	60f8      	str	r0, [r7, #12]
    4dae:	460b      	mov	r3, r1
    4db0:	607a      	str	r2, [r7, #4]
    4db2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4db4:	7afb      	ldrb	r3, [r7, #11]
    4db6:	68fa      	ldr	r2, [r7, #12]
    4db8:	3306      	adds	r3, #6
    4dba:	009b      	lsls	r3, r3, #2
    4dbc:	4413      	add	r3, r2
    4dbe:	687a      	ldr	r2, [r7, #4]
    4dc0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4dc2:	bf00      	nop
    4dc4:	3714      	adds	r7, #20
    4dc6:	46bd      	mov	sp, r7
    4dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dcc:	4770      	bx	lr

00004dce <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4dce:	b480      	push	{r7}
    4dd0:	b083      	sub	sp, #12
    4dd2:	af00      	add	r7, sp, #0
    4dd4:	6078      	str	r0, [r7, #4]
    4dd6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4dd8:	687b      	ldr	r3, [r7, #4]
    4dda:	683a      	ldr	r2, [r7, #0]
    4ddc:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4dde:	bf00      	nop
    4de0:	370c      	adds	r7, #12
    4de2:	46bd      	mov	sp, r7
    4de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4de8:	4770      	bx	lr

00004dea <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4dea:	b480      	push	{r7}
    4dec:	b083      	sub	sp, #12
    4dee:	af00      	add	r7, sp, #0
    4df0:	6078      	str	r0, [r7, #4]
    4df2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4df4:	687b      	ldr	r3, [r7, #4]
    4df6:	683a      	ldr	r2, [r7, #0]
    4df8:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4dfa:	bf00      	nop
    4dfc:	370c      	adds	r7, #12
    4dfe:	46bd      	mov	sp, r7
    4e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e04:	4770      	bx	lr
	...

00004e08 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4e08:	b580      	push	{r7, lr}
    4e0a:	b082      	sub	sp, #8
    4e0c:	af00      	add	r7, sp, #0
    4e0e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4e10:	2101      	movs	r1, #1
    4e12:	484b      	ldr	r0, [pc, #300]	; (4f40 <_ext_irq_init+0x138>)
    4e14:	4b4b      	ldr	r3, [pc, #300]	; (4f44 <_ext_irq_init+0x13c>)
    4e16:	4798      	blx	r3
    4e18:	4603      	mov	r3, r0
    4e1a:	f083 0301 	eor.w	r3, r3, #1
    4e1e:	b2db      	uxtb	r3, r3
    4e20:	2b00      	cmp	r3, #0
    4e22:	d011      	beq.n	4e48 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4e24:	2102      	movs	r1, #2
    4e26:	4846      	ldr	r0, [pc, #280]	; (4f40 <_ext_irq_init+0x138>)
    4e28:	4b47      	ldr	r3, [pc, #284]	; (4f48 <_ext_irq_init+0x140>)
    4e2a:	4798      	blx	r3
    4e2c:	4603      	mov	r3, r0
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d006      	beq.n	4e40 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4e32:	4843      	ldr	r0, [pc, #268]	; (4f40 <_ext_irq_init+0x138>)
    4e34:	4b45      	ldr	r3, [pc, #276]	; (4f4c <_ext_irq_init+0x144>)
    4e36:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4e38:	2102      	movs	r1, #2
    4e3a:	4841      	ldr	r0, [pc, #260]	; (4f40 <_ext_irq_init+0x138>)
    4e3c:	4b44      	ldr	r3, [pc, #272]	; (4f50 <_ext_irq_init+0x148>)
    4e3e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4e40:	2101      	movs	r1, #1
    4e42:	483f      	ldr	r0, [pc, #252]	; (4f40 <_ext_irq_init+0x138>)
    4e44:	4b43      	ldr	r3, [pc, #268]	; (4f54 <_ext_irq_init+0x14c>)
    4e46:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4e48:	2101      	movs	r1, #1
    4e4a:	483d      	ldr	r0, [pc, #244]	; (4f40 <_ext_irq_init+0x138>)
    4e4c:	4b40      	ldr	r3, [pc, #256]	; (4f50 <_ext_irq_init+0x148>)
    4e4e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4e50:	2100      	movs	r1, #0
    4e52:	483b      	ldr	r0, [pc, #236]	; (4f40 <_ext_irq_init+0x138>)
    4e54:	4b40      	ldr	r3, [pc, #256]	; (4f58 <_ext_irq_init+0x150>)
    4e56:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4e58:	2100      	movs	r1, #0
    4e5a:	4839      	ldr	r0, [pc, #228]	; (4f40 <_ext_irq_init+0x138>)
    4e5c:	4b3f      	ldr	r3, [pc, #252]	; (4f5c <_ext_irq_init+0x154>)
    4e5e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4e60:	2100      	movs	r1, #0
    4e62:	4837      	ldr	r0, [pc, #220]	; (4f40 <_ext_irq_init+0x138>)
    4e64:	4b3e      	ldr	r3, [pc, #248]	; (4f60 <_ext_irq_init+0x158>)
    4e66:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4e68:	f240 31b9 	movw	r1, #953	; 0x3b9
    4e6c:	4834      	ldr	r0, [pc, #208]	; (4f40 <_ext_irq_init+0x138>)
    4e6e:	4b3d      	ldr	r3, [pc, #244]	; (4f64 <_ext_irq_init+0x15c>)
    4e70:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4e72:	f240 3139 	movw	r1, #825	; 0x339
    4e76:	4832      	ldr	r0, [pc, #200]	; (4f40 <_ext_irq_init+0x138>)
    4e78:	4b3b      	ldr	r3, [pc, #236]	; (4f68 <_ext_irq_init+0x160>)
    4e7a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4e7c:	2100      	movs	r1, #0
    4e7e:	4830      	ldr	r0, [pc, #192]	; (4f40 <_ext_irq_init+0x138>)
    4e80:	4b3a      	ldr	r3, [pc, #232]	; (4f6c <_ext_irq_init+0x164>)
    4e82:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4e84:	4a3a      	ldr	r2, [pc, #232]	; (4f70 <_ext_irq_init+0x168>)
    4e86:	2100      	movs	r1, #0
    4e88:	482d      	ldr	r0, [pc, #180]	; (4f40 <_ext_irq_init+0x138>)
    4e8a:	4b3a      	ldr	r3, [pc, #232]	; (4f74 <_ext_irq_init+0x16c>)
    4e8c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4e8e:	2211      	movs	r2, #17
    4e90:	2101      	movs	r1, #1
    4e92:	482b      	ldr	r0, [pc, #172]	; (4f40 <_ext_irq_init+0x138>)
    4e94:	4b37      	ldr	r3, [pc, #220]	; (4f74 <_ext_irq_init+0x16c>)
    4e96:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4e98:	4829      	ldr	r0, [pc, #164]	; (4f40 <_ext_irq_init+0x138>)
    4e9a:	4b37      	ldr	r3, [pc, #220]	; (4f78 <_ext_irq_init+0x170>)
    4e9c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4e9e:	200c      	movs	r0, #12
    4ea0:	4b36      	ldr	r3, [pc, #216]	; (4f7c <_ext_irq_init+0x174>)
    4ea2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4ea4:	200c      	movs	r0, #12
    4ea6:	4b36      	ldr	r3, [pc, #216]	; (4f80 <_ext_irq_init+0x178>)
    4ea8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4eaa:	200c      	movs	r0, #12
    4eac:	4b35      	ldr	r3, [pc, #212]	; (4f84 <_ext_irq_init+0x17c>)
    4eae:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4eb0:	200f      	movs	r0, #15
    4eb2:	4b32      	ldr	r3, [pc, #200]	; (4f7c <_ext_irq_init+0x174>)
    4eb4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4eb6:	200f      	movs	r0, #15
    4eb8:	4b31      	ldr	r3, [pc, #196]	; (4f80 <_ext_irq_init+0x178>)
    4eba:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4ebc:	200f      	movs	r0, #15
    4ebe:	4b31      	ldr	r3, [pc, #196]	; (4f84 <_ext_irq_init+0x17c>)
    4ec0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4ec2:	2010      	movs	r0, #16
    4ec4:	4b2d      	ldr	r3, [pc, #180]	; (4f7c <_ext_irq_init+0x174>)
    4ec6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4ec8:	2010      	movs	r0, #16
    4eca:	4b2d      	ldr	r3, [pc, #180]	; (4f80 <_ext_irq_init+0x178>)
    4ecc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4ece:	2010      	movs	r0, #16
    4ed0:	4b2c      	ldr	r3, [pc, #176]	; (4f84 <_ext_irq_init+0x17c>)
    4ed2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4ed4:	2011      	movs	r0, #17
    4ed6:	4b29      	ldr	r3, [pc, #164]	; (4f7c <_ext_irq_init+0x174>)
    4ed8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4eda:	2011      	movs	r0, #17
    4edc:	4b28      	ldr	r3, [pc, #160]	; (4f80 <_ext_irq_init+0x178>)
    4ede:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4ee0:	2011      	movs	r0, #17
    4ee2:	4b28      	ldr	r3, [pc, #160]	; (4f84 <_ext_irq_init+0x17c>)
    4ee4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4ee6:	2012      	movs	r0, #18
    4ee8:	4b24      	ldr	r3, [pc, #144]	; (4f7c <_ext_irq_init+0x174>)
    4eea:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4eec:	2012      	movs	r0, #18
    4eee:	4b24      	ldr	r3, [pc, #144]	; (4f80 <_ext_irq_init+0x178>)
    4ef0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4ef2:	2012      	movs	r0, #18
    4ef4:	4b23      	ldr	r3, [pc, #140]	; (4f84 <_ext_irq_init+0x17c>)
    4ef6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4ef8:	2013      	movs	r0, #19
    4efa:	4b20      	ldr	r3, [pc, #128]	; (4f7c <_ext_irq_init+0x174>)
    4efc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4efe:	2013      	movs	r0, #19
    4f00:	4b1f      	ldr	r3, [pc, #124]	; (4f80 <_ext_irq_init+0x178>)
    4f02:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4f04:	2013      	movs	r0, #19
    4f06:	4b1f      	ldr	r3, [pc, #124]	; (4f84 <_ext_irq_init+0x17c>)
    4f08:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4f0a:	2014      	movs	r0, #20
    4f0c:	4b1b      	ldr	r3, [pc, #108]	; (4f7c <_ext_irq_init+0x174>)
    4f0e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4f10:	2014      	movs	r0, #20
    4f12:	4b1b      	ldr	r3, [pc, #108]	; (4f80 <_ext_irq_init+0x178>)
    4f14:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4f16:	2014      	movs	r0, #20
    4f18:	4b1a      	ldr	r3, [pc, #104]	; (4f84 <_ext_irq_init+0x17c>)
    4f1a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4f1c:	2015      	movs	r0, #21
    4f1e:	4b17      	ldr	r3, [pc, #92]	; (4f7c <_ext_irq_init+0x174>)
    4f20:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4f22:	2015      	movs	r0, #21
    4f24:	4b16      	ldr	r3, [pc, #88]	; (4f80 <_ext_irq_init+0x178>)
    4f26:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4f28:	2015      	movs	r0, #21
    4f2a:	4b16      	ldr	r3, [pc, #88]	; (4f84 <_ext_irq_init+0x17c>)
    4f2c:	4798      	blx	r3

	callback = cb;
    4f2e:	4a16      	ldr	r2, [pc, #88]	; (4f88 <_ext_irq_init+0x180>)
    4f30:	687b      	ldr	r3, [r7, #4]
    4f32:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4f34:	2300      	movs	r3, #0
}
    4f36:	4618      	mov	r0, r3
    4f38:	3708      	adds	r7, #8
    4f3a:	46bd      	mov	sp, r7
    4f3c:	bd80      	pop	{r7, pc}
    4f3e:	bf00      	nop
    4f40:	40002800 	.word	0x40002800
    4f44:	00004bc9 	.word	0x00004bc9
    4f48:	00004cf9 	.word	0x00004cf9
    4f4c:	00004c89 	.word	0x00004c89
    4f50:	00004ba5 	.word	0x00004ba5
    4f54:	00004d29 	.word	0x00004d29
    4f58:	00004cb5 	.word	0x00004cb5
    4f5c:	00004d51 	.word	0x00004d51
    4f60:	00004d6f 	.word	0x00004d6f
    4f64:	00004d8b 	.word	0x00004d8b
    4f68:	00004dcf 	.word	0x00004dcf
    4f6c:	00004deb 	.word	0x00004deb
    4f70:	90999003 	.word	0x90999003
    4f74:	00004da7 	.word	0x00004da7
    4f78:	00004c5d 	.word	0x00004c5d
    4f7c:	00004b25 	.word	0x00004b25
    4f80:	00004b69 	.word	0x00004b69
    4f84:	00004ae9 	.word	0x00004ae9
    4f88:	20000a58 	.word	0x20000a58

00004f8c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4f8c:	b580      	push	{r7, lr}
    4f8e:	b084      	sub	sp, #16
    4f90:	af00      	add	r7, sp, #0
    4f92:	6078      	str	r0, [r7, #4]
    4f94:	460b      	mov	r3, r1
    4f96:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4f98:	23ff      	movs	r3, #255	; 0xff
    4f9a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4f9c:	2300      	movs	r3, #0
    4f9e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4fa0:	e010      	b.n	4fc4 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4fa2:	7bbb      	ldrb	r3, [r7, #14]
    4fa4:	4a1c      	ldr	r2, [pc, #112]	; (5018 <_ext_irq_enable+0x8c>)
    4fa6:	00db      	lsls	r3, r3, #3
    4fa8:	4413      	add	r3, r2
    4faa:	685a      	ldr	r2, [r3, #4]
    4fac:	687b      	ldr	r3, [r7, #4]
    4fae:	429a      	cmp	r2, r3
    4fb0:	d105      	bne.n	4fbe <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4fb2:	7bbb      	ldrb	r3, [r7, #14]
    4fb4:	4a18      	ldr	r2, [pc, #96]	; (5018 <_ext_irq_enable+0x8c>)
    4fb6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4fba:	73fb      	strb	r3, [r7, #15]
			break;
    4fbc:	e005      	b.n	4fca <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4fbe:	7bbb      	ldrb	r3, [r7, #14]
    4fc0:	3301      	adds	r3, #1
    4fc2:	73bb      	strb	r3, [r7, #14]
    4fc4:	7bbb      	ldrb	r3, [r7, #14]
    4fc6:	2b07      	cmp	r3, #7
    4fc8:	d9eb      	bls.n	4fa2 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4fca:	7bfb      	ldrb	r3, [r7, #15]
    4fcc:	2bff      	cmp	r3, #255	; 0xff
    4fce:	d102      	bne.n	4fd6 <_ext_irq_enable+0x4a>
		return -1;
    4fd0:	f04f 33ff 	mov.w	r3, #4294967295
    4fd4:	e01c      	b.n	5010 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4fd6:	78fb      	ldrb	r3, [r7, #3]
    4fd8:	2b00      	cmp	r3, #0
    4fda:	d008      	beq.n	4fee <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4fdc:	7bfb      	ldrb	r3, [r7, #15]
    4fde:	2201      	movs	r2, #1
    4fe0:	fa02 f303 	lsl.w	r3, r2, r3
    4fe4:	4619      	mov	r1, r3
    4fe6:	480d      	ldr	r0, [pc, #52]	; (501c <_ext_irq_enable+0x90>)
    4fe8:	4b0d      	ldr	r3, [pc, #52]	; (5020 <_ext_irq_enable+0x94>)
    4fea:	4798      	blx	r3
    4fec:	e00f      	b.n	500e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4fee:	7bfb      	ldrb	r3, [r7, #15]
    4ff0:	2201      	movs	r2, #1
    4ff2:	fa02 f303 	lsl.w	r3, r2, r3
    4ff6:	4619      	mov	r1, r3
    4ff8:	4808      	ldr	r0, [pc, #32]	; (501c <_ext_irq_enable+0x90>)
    4ffa:	4b0a      	ldr	r3, [pc, #40]	; (5024 <_ext_irq_enable+0x98>)
    4ffc:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4ffe:	7bfb      	ldrb	r3, [r7, #15]
    5000:	2201      	movs	r2, #1
    5002:	fa02 f303 	lsl.w	r3, r2, r3
    5006:	4619      	mov	r1, r3
    5008:	4804      	ldr	r0, [pc, #16]	; (501c <_ext_irq_enable+0x90>)
    500a:	4b07      	ldr	r3, [pc, #28]	; (5028 <_ext_irq_enable+0x9c>)
    500c:	4798      	blx	r3
	}

	return ERR_NONE;
    500e:	2300      	movs	r3, #0
}
    5010:	4618      	mov	r0, r3
    5012:	3710      	adds	r7, #16
    5014:	46bd      	mov	sp, r7
    5016:	bd80      	pop	{r7, pc}
    5018:	0000ff60 	.word	0x0000ff60
    501c:	40002800 	.word	0x40002800
    5020:	00004c25 	.word	0x00004c25
    5024:	00004c41 	.word	0x00004c41
    5028:	00004c09 	.word	0x00004c09

0000502c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    502c:	b580      	push	{r7, lr}
    502e:	b084      	sub	sp, #16
    5030:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    5032:	4841      	ldr	r0, [pc, #260]	; (5138 <_ext_irq_handler+0x10c>)
    5034:	4b41      	ldr	r3, [pc, #260]	; (513c <_ext_irq_handler+0x110>)
    5036:	4798      	blx	r3
    5038:	4603      	mov	r3, r0
    503a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    503c:	f04f 33ff 	mov.w	r3, #4294967295
    5040:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    5042:	683b      	ldr	r3, [r7, #0]
    5044:	4619      	mov	r1, r3
    5046:	483c      	ldr	r0, [pc, #240]	; (5138 <_ext_irq_handler+0x10c>)
    5048:	4b3d      	ldr	r3, [pc, #244]	; (5140 <_ext_irq_handler+0x114>)
    504a:	4798      	blx	r3

	ASSERT(callback);
    504c:	4b3d      	ldr	r3, [pc, #244]	; (5144 <_ext_irq_handler+0x118>)
    504e:	681b      	ldr	r3, [r3, #0]
    5050:	2b00      	cmp	r3, #0
    5052:	bf14      	ite	ne
    5054:	2301      	movne	r3, #1
    5056:	2300      	moveq	r3, #0
    5058:	b2db      	uxtb	r3, r3
    505a:	f44f 7282 	mov.w	r2, #260	; 0x104
    505e:	493a      	ldr	r1, [pc, #232]	; (5148 <_ext_irq_handler+0x11c>)
    5060:	4618      	mov	r0, r3
    5062:	4b3a      	ldr	r3, [pc, #232]	; (514c <_ext_irq_handler+0x120>)
    5064:	4798      	blx	r3

	while (flags) {
    5066:	e060      	b.n	512a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    5068:	683b      	ldr	r3, [r7, #0]
    506a:	4618      	mov	r0, r3
    506c:	4b38      	ldr	r3, [pc, #224]	; (5150 <_ext_irq_handler+0x124>)
    506e:	4798      	blx	r3
    5070:	4603      	mov	r3, r0
    5072:	b2db      	uxtb	r3, r3
    5074:	3b01      	subs	r3, #1
    5076:	b2db      	uxtb	r3, r3
    5078:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    507a:	e047      	b.n	510c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    507c:	2300      	movs	r3, #0
    507e:	71fb      	strb	r3, [r7, #7]
    5080:	2308      	movs	r3, #8
    5082:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    5084:	e024      	b.n	50d0 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    5086:	79ba      	ldrb	r2, [r7, #6]
    5088:	79fb      	ldrb	r3, [r7, #7]
    508a:	4413      	add	r3, r2
    508c:	105b      	asrs	r3, r3, #1
    508e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5090:	797b      	ldrb	r3, [r7, #5]
    5092:	4a30      	ldr	r2, [pc, #192]	; (5154 <_ext_irq_handler+0x128>)
    5094:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5098:	461a      	mov	r2, r3
    509a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    509e:	429a      	cmp	r2, r3
    50a0:	d106      	bne.n	50b0 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    50a2:	797b      	ldrb	r3, [r7, #5]
    50a4:	4a2b      	ldr	r2, [pc, #172]	; (5154 <_ext_irq_handler+0x128>)
    50a6:	00db      	lsls	r3, r3, #3
    50a8:	4413      	add	r3, r2
    50aa:	685b      	ldr	r3, [r3, #4]
    50ac:	60bb      	str	r3, [r7, #8]
					break;
    50ae:	e013      	b.n	50d8 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    50b0:	797b      	ldrb	r3, [r7, #5]
    50b2:	4a28      	ldr	r2, [pc, #160]	; (5154 <_ext_irq_handler+0x128>)
    50b4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    50b8:	461a      	mov	r2, r3
    50ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    50be:	429a      	cmp	r2, r3
    50c0:	da03      	bge.n	50ca <_ext_irq_handler+0x9e>
					lower = middle + 1;
    50c2:	797b      	ldrb	r3, [r7, #5]
    50c4:	3301      	adds	r3, #1
    50c6:	71fb      	strb	r3, [r7, #7]
    50c8:	e002      	b.n	50d0 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    50ca:	797b      	ldrb	r3, [r7, #5]
    50cc:	3b01      	subs	r3, #1
    50ce:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    50d0:	79ba      	ldrb	r2, [r7, #6]
    50d2:	79fb      	ldrb	r3, [r7, #7]
    50d4:	429a      	cmp	r2, r3
    50d6:	d2d6      	bcs.n	5086 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    50d8:	68bb      	ldr	r3, [r7, #8]
    50da:	f1b3 3fff 	cmp.w	r3, #4294967295
    50de:	d003      	beq.n	50e8 <_ext_irq_handler+0xbc>
				callback(pin);
    50e0:	4b18      	ldr	r3, [pc, #96]	; (5144 <_ext_irq_handler+0x118>)
    50e2:	681b      	ldr	r3, [r3, #0]
    50e4:	68b8      	ldr	r0, [r7, #8]
    50e6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    50e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    50ec:	2201      	movs	r2, #1
    50ee:	fa02 f303 	lsl.w	r3, r2, r3
    50f2:	43da      	mvns	r2, r3
    50f4:	683b      	ldr	r3, [r7, #0]
    50f6:	4013      	ands	r3, r2
    50f8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    50fa:	683b      	ldr	r3, [r7, #0]
    50fc:	4618      	mov	r0, r3
    50fe:	4b14      	ldr	r3, [pc, #80]	; (5150 <_ext_irq_handler+0x124>)
    5100:	4798      	blx	r3
    5102:	4603      	mov	r3, r0
    5104:	b2db      	uxtb	r3, r3
    5106:	3b01      	subs	r3, #1
    5108:	b2db      	uxtb	r3, r3
    510a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    510c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5110:	f1b3 3fff 	cmp.w	r3, #4294967295
    5114:	d1b2      	bne.n	507c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    5116:	4808      	ldr	r0, [pc, #32]	; (5138 <_ext_irq_handler+0x10c>)
    5118:	4b08      	ldr	r3, [pc, #32]	; (513c <_ext_irq_handler+0x110>)
    511a:	4798      	blx	r3
    511c:	4603      	mov	r3, r0
    511e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    5120:	683b      	ldr	r3, [r7, #0]
    5122:	4619      	mov	r1, r3
    5124:	4804      	ldr	r0, [pc, #16]	; (5138 <_ext_irq_handler+0x10c>)
    5126:	4b06      	ldr	r3, [pc, #24]	; (5140 <_ext_irq_handler+0x114>)
    5128:	4798      	blx	r3
	while (flags) {
    512a:	683b      	ldr	r3, [r7, #0]
    512c:	2b00      	cmp	r3, #0
    512e:	d19b      	bne.n	5068 <_ext_irq_handler+0x3c>
	}
}
    5130:	bf00      	nop
    5132:	3710      	adds	r7, #16
    5134:	46bd      	mov	sp, r7
    5136:	bd80      	pop	{r7, pc}
    5138:	40002800 	.word	0x40002800
    513c:	00004bf1 	.word	0x00004bf1
    5140:	00004c09 	.word	0x00004c09
    5144:	20000a58 	.word	0x20000a58
    5148:	0000ffa0 	.word	0x0000ffa0
    514c:	00003e69 	.word	0x00003e69
    5150:	0000fab5 	.word	0x0000fab5
    5154:	0000ff60 	.word	0x0000ff60

00005158 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    5158:	b580      	push	{r7, lr}
    515a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    515c:	4b01      	ldr	r3, [pc, #4]	; (5164 <EIC_0_Handler+0xc>)
    515e:	4798      	blx	r3
} /**
    5160:	bf00      	nop
    5162:	bd80      	pop	{r7, pc}
    5164:	0000502d 	.word	0x0000502d

00005168 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    5168:	b580      	push	{r7, lr}
    516a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    516c:	4b01      	ldr	r3, [pc, #4]	; (5174 <EIC_3_Handler+0xc>)
    516e:	4798      	blx	r3
} /**
    5170:	bf00      	nop
    5172:	bd80      	pop	{r7, pc}
    5174:	0000502d 	.word	0x0000502d

00005178 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5178:	b580      	push	{r7, lr}
    517a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    517c:	4b01      	ldr	r3, [pc, #4]	; (5184 <EIC_4_Handler+0xc>)
    517e:	4798      	blx	r3
} /**
    5180:	bf00      	nop
    5182:	bd80      	pop	{r7, pc}
    5184:	0000502d 	.word	0x0000502d

00005188 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5188:	b580      	push	{r7, lr}
    518a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    518c:	4b01      	ldr	r3, [pc, #4]	; (5194 <EIC_5_Handler+0xc>)
    518e:	4798      	blx	r3
} /**
    5190:	bf00      	nop
    5192:	bd80      	pop	{r7, pc}
    5194:	0000502d 	.word	0x0000502d

00005198 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5198:	b580      	push	{r7, lr}
    519a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    519c:	4b01      	ldr	r3, [pc, #4]	; (51a4 <EIC_6_Handler+0xc>)
    519e:	4798      	blx	r3
} /**
    51a0:	bf00      	nop
    51a2:	bd80      	pop	{r7, pc}
    51a4:	0000502d 	.word	0x0000502d

000051a8 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    51a8:	b580      	push	{r7, lr}
    51aa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    51ac:	4b01      	ldr	r3, [pc, #4]	; (51b4 <EIC_7_Handler+0xc>)
    51ae:	4798      	blx	r3
} /**
    51b0:	bf00      	nop
    51b2:	bd80      	pop	{r7, pc}
    51b4:	0000502d 	.word	0x0000502d

000051b8 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    51b8:	b580      	push	{r7, lr}
    51ba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    51bc:	4b01      	ldr	r3, [pc, #4]	; (51c4 <EIC_8_Handler+0xc>)
    51be:	4798      	blx	r3
} /**
    51c0:	bf00      	nop
    51c2:	bd80      	pop	{r7, pc}
    51c4:	0000502d 	.word	0x0000502d

000051c8 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    51c8:	b580      	push	{r7, lr}
    51ca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    51cc:	4b01      	ldr	r3, [pc, #4]	; (51d4 <EIC_9_Handler+0xc>)
    51ce:	4798      	blx	r3
}
    51d0:	bf00      	nop
    51d2:	bd80      	pop	{r7, pc}
    51d4:	0000502d 	.word	0x0000502d

000051d8 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    51d8:	b480      	push	{r7}
    51da:	b085      	sub	sp, #20
    51dc:	af00      	add	r7, sp, #0
    51de:	60f8      	str	r0, [r7, #12]
    51e0:	460b      	mov	r3, r1
    51e2:	607a      	str	r2, [r7, #4]
    51e4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    51e6:	7afa      	ldrb	r2, [r7, #11]
    51e8:	68fb      	ldr	r3, [r7, #12]
    51ea:	3248      	adds	r2, #72	; 0x48
    51ec:	6879      	ldr	r1, [r7, #4]
    51ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    51f2:	bf00      	nop
    51f4:	3714      	adds	r7, #20
    51f6:	46bd      	mov	sp, r7
    51f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    51fc:	4770      	bx	lr

000051fe <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    51fe:	b480      	push	{r7}
    5200:	b083      	sub	sp, #12
    5202:	af00      	add	r7, sp, #0
    5204:	6078      	str	r0, [r7, #4]
    5206:	460b      	mov	r3, r1
    5208:	70fb      	strb	r3, [r7, #3]
    520a:	4613      	mov	r3, r2
    520c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    520e:	78fb      	ldrb	r3, [r7, #3]
    5210:	687a      	ldr	r2, [r7, #4]
    5212:	3304      	adds	r3, #4
    5214:	00db      	lsls	r3, r3, #3
    5216:	4413      	add	r3, r2
    5218:	78ba      	ldrb	r2, [r7, #2]
    521a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    521c:	78fb      	ldrb	r3, [r7, #3]
    521e:	78ba      	ldrb	r2, [r7, #2]
    5220:	43d2      	mvns	r2, r2
    5222:	b2d1      	uxtb	r1, r2
    5224:	687a      	ldr	r2, [r7, #4]
    5226:	3304      	adds	r3, #4
    5228:	00db      	lsls	r3, r3, #3
    522a:	4413      	add	r3, r2
    522c:	460a      	mov	r2, r1
    522e:	711a      	strb	r2, [r3, #4]
}
    5230:	bf00      	nop
    5232:	370c      	adds	r7, #12
    5234:	46bd      	mov	sp, r7
    5236:	f85d 7b04 	ldr.w	r7, [sp], #4
    523a:	4770      	bx	lr

0000523c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    523c:	b480      	push	{r7}
    523e:	b085      	sub	sp, #20
    5240:	af00      	add	r7, sp, #0
    5242:	60f8      	str	r0, [r7, #12]
    5244:	460b      	mov	r3, r1
    5246:	607a      	str	r2, [r7, #4]
    5248:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    524a:	7afa      	ldrb	r2, [r7, #11]
    524c:	68fb      	ldr	r3, [r7, #12]
    524e:	3204      	adds	r2, #4
    5250:	6879      	ldr	r1, [r7, #4]
    5252:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5256:	bf00      	nop
    5258:	3714      	adds	r7, #20
    525a:	46bd      	mov	sp, r7
    525c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5260:	4770      	bx	lr
	...

00005264 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5264:	b580      	push	{r7, lr}
    5266:	b082      	sub	sp, #8
    5268:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    526a:	2300      	movs	r3, #0
    526c:	71fb      	strb	r3, [r7, #7]
    526e:	e00b      	b.n	5288 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5270:	79fb      	ldrb	r3, [r7, #7]
    5272:	4a18      	ldr	r2, [pc, #96]	; (52d4 <_event_system_init+0x70>)
    5274:	5cd3      	ldrb	r3, [r2, r3]
    5276:	461a      	mov	r2, r3
    5278:	79fb      	ldrb	r3, [r7, #7]
    527a:	4619      	mov	r1, r3
    527c:	4816      	ldr	r0, [pc, #88]	; (52d8 <_event_system_init+0x74>)
    527e:	4b17      	ldr	r3, [pc, #92]	; (52dc <_event_system_init+0x78>)
    5280:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    5282:	79fb      	ldrb	r3, [r7, #7]
    5284:	3301      	adds	r3, #1
    5286:	71fb      	strb	r3, [r7, #7]
    5288:	79fb      	ldrb	r3, [r7, #7]
    528a:	2b42      	cmp	r3, #66	; 0x42
    528c:	d9f0      	bls.n	5270 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    528e:	2300      	movs	r3, #0
    5290:	71fb      	strb	r3, [r7, #7]
    5292:	e016      	b.n	52c2 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5294:	79fb      	ldrb	r3, [r7, #7]
    5296:	4a12      	ldr	r2, [pc, #72]	; (52e0 <_event_system_init+0x7c>)
    5298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    529c:	461a      	mov	r2, r3
    529e:	79fb      	ldrb	r3, [r7, #7]
    52a0:	4619      	mov	r1, r3
    52a2:	480d      	ldr	r0, [pc, #52]	; (52d8 <_event_system_init+0x74>)
    52a4:	4b0f      	ldr	r3, [pc, #60]	; (52e4 <_event_system_init+0x80>)
    52a6:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    52a8:	79fb      	ldrb	r3, [r7, #7]
    52aa:	4a0f      	ldr	r2, [pc, #60]	; (52e8 <_event_system_init+0x84>)
    52ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    52b0:	b2da      	uxtb	r2, r3
    52b2:	79fb      	ldrb	r3, [r7, #7]
    52b4:	4619      	mov	r1, r3
    52b6:	4808      	ldr	r0, [pc, #32]	; (52d8 <_event_system_init+0x74>)
    52b8:	4b0c      	ldr	r3, [pc, #48]	; (52ec <_event_system_init+0x88>)
    52ba:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    52bc:	79fb      	ldrb	r3, [r7, #7]
    52be:	3301      	adds	r3, #1
    52c0:	71fb      	strb	r3, [r7, #7]
    52c2:	79fb      	ldrb	r3, [r7, #7]
    52c4:	2b1f      	cmp	r3, #31
    52c6:	d9e5      	bls.n	5294 <_event_system_init+0x30>
	}

	return ERR_NONE;
    52c8:	2300      	movs	r3, #0
}
    52ca:	4618      	mov	r0, r3
    52cc:	3708      	adds	r7, #8
    52ce:	46bd      	mov	sp, r7
    52d0:	bd80      	pop	{r7, pc}
    52d2:	bf00      	nop
    52d4:	0000ffb8 	.word	0x0000ffb8
    52d8:	4100e000 	.word	0x4100e000
    52dc:	000051d9 	.word	0x000051d9
    52e0:	0000fffc 	.word	0x0000fffc
    52e4:	0000523d 	.word	0x0000523d
    52e8:	0001003c 	.word	0x0001003c
    52ec:	000051ff 	.word	0x000051ff

000052f0 <hri_gclk_wait_for_sync>:
{
    52f0:	b480      	push	{r7}
    52f2:	b083      	sub	sp, #12
    52f4:	af00      	add	r7, sp, #0
    52f6:	6078      	str	r0, [r7, #4]
    52f8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    52fa:	bf00      	nop
    52fc:	687b      	ldr	r3, [r7, #4]
    52fe:	685a      	ldr	r2, [r3, #4]
    5300:	683b      	ldr	r3, [r7, #0]
    5302:	4013      	ands	r3, r2
    5304:	2b00      	cmp	r3, #0
    5306:	d1f9      	bne.n	52fc <hri_gclk_wait_for_sync+0xc>
}
    5308:	bf00      	nop
    530a:	370c      	adds	r7, #12
    530c:	46bd      	mov	sp, r7
    530e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5312:	4770      	bx	lr

00005314 <hri_gclk_write_GENCTRL_reg>:
{
    5314:	b580      	push	{r7, lr}
    5316:	b084      	sub	sp, #16
    5318:	af00      	add	r7, sp, #0
    531a:	60f8      	str	r0, [r7, #12]
    531c:	460b      	mov	r3, r1
    531e:	607a      	str	r2, [r7, #4]
    5320:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5322:	7afa      	ldrb	r2, [r7, #11]
    5324:	68fb      	ldr	r3, [r7, #12]
    5326:	3208      	adds	r2, #8
    5328:	6879      	ldr	r1, [r7, #4]
    532a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    532e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5332:	68f8      	ldr	r0, [r7, #12]
    5334:	4b02      	ldr	r3, [pc, #8]	; (5340 <hri_gclk_write_GENCTRL_reg+0x2c>)
    5336:	4798      	blx	r3
}
    5338:	bf00      	nop
    533a:	3710      	adds	r7, #16
    533c:	46bd      	mov	sp, r7
    533e:	bd80      	pop	{r7, pc}
    5340:	000052f1 	.word	0x000052f1

00005344 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    5344:	b580      	push	{r7, lr}
    5346:	b082      	sub	sp, #8
    5348:	af00      	add	r7, sp, #0
    534a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	f003 0301 	and.w	r3, r3, #1
    5352:	2b00      	cmp	r3, #0
    5354:	d004      	beq.n	5360 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    5356:	4a36      	ldr	r2, [pc, #216]	; (5430 <_gclk_init_generators_by_fref+0xec>)
    5358:	2100      	movs	r1, #0
    535a:	4836      	ldr	r0, [pc, #216]	; (5434 <_gclk_init_generators_by_fref+0xf0>)
    535c:	4b36      	ldr	r3, [pc, #216]	; (5438 <_gclk_init_generators_by_fref+0xf4>)
    535e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5360:	687b      	ldr	r3, [r7, #4]
    5362:	f003 0302 	and.w	r3, r3, #2
    5366:	2b00      	cmp	r3, #0
    5368:	d004      	beq.n	5374 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    536a:	4a34      	ldr	r2, [pc, #208]	; (543c <_gclk_init_generators_by_fref+0xf8>)
    536c:	2101      	movs	r1, #1
    536e:	4831      	ldr	r0, [pc, #196]	; (5434 <_gclk_init_generators_by_fref+0xf0>)
    5370:	4b31      	ldr	r3, [pc, #196]	; (5438 <_gclk_init_generators_by_fref+0xf4>)
    5372:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5374:	687b      	ldr	r3, [r7, #4]
    5376:	f003 0304 	and.w	r3, r3, #4
    537a:	2b00      	cmp	r3, #0
    537c:	d004      	beq.n	5388 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    537e:	4a30      	ldr	r2, [pc, #192]	; (5440 <_gclk_init_generators_by_fref+0xfc>)
    5380:	2102      	movs	r1, #2
    5382:	482c      	ldr	r0, [pc, #176]	; (5434 <_gclk_init_generators_by_fref+0xf0>)
    5384:	4b2c      	ldr	r3, [pc, #176]	; (5438 <_gclk_init_generators_by_fref+0xf4>)
    5386:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5388:	687b      	ldr	r3, [r7, #4]
    538a:	f003 0308 	and.w	r3, r3, #8
    538e:	2b00      	cmp	r3, #0
    5390:	d004      	beq.n	539c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    5392:	4a2c      	ldr	r2, [pc, #176]	; (5444 <_gclk_init_generators_by_fref+0x100>)
    5394:	2103      	movs	r1, #3
    5396:	4827      	ldr	r0, [pc, #156]	; (5434 <_gclk_init_generators_by_fref+0xf0>)
    5398:	4b27      	ldr	r3, [pc, #156]	; (5438 <_gclk_init_generators_by_fref+0xf4>)
    539a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    539c:	687b      	ldr	r3, [r7, #4]
    539e:	f003 0310 	and.w	r3, r3, #16
    53a2:	2b00      	cmp	r3, #0
    53a4:	d004      	beq.n	53b0 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    53a6:	4a28      	ldr	r2, [pc, #160]	; (5448 <_gclk_init_generators_by_fref+0x104>)
    53a8:	2104      	movs	r1, #4
    53aa:	4822      	ldr	r0, [pc, #136]	; (5434 <_gclk_init_generators_by_fref+0xf0>)
    53ac:	4b22      	ldr	r3, [pc, #136]	; (5438 <_gclk_init_generators_by_fref+0xf4>)
    53ae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    53b0:	687b      	ldr	r3, [r7, #4]
    53b2:	f003 0320 	and.w	r3, r3, #32
    53b6:	2b00      	cmp	r3, #0
    53b8:	d004      	beq.n	53c4 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    53ba:	4a24      	ldr	r2, [pc, #144]	; (544c <_gclk_init_generators_by_fref+0x108>)
    53bc:	2105      	movs	r1, #5
    53be:	481d      	ldr	r0, [pc, #116]	; (5434 <_gclk_init_generators_by_fref+0xf0>)
    53c0:	4b1d      	ldr	r3, [pc, #116]	; (5438 <_gclk_init_generators_by_fref+0xf4>)
    53c2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    53c4:	687b      	ldr	r3, [r7, #4]
    53c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    53ca:	2b00      	cmp	r3, #0
    53cc:	d004      	beq.n	53d8 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    53ce:	4a20      	ldr	r2, [pc, #128]	; (5450 <_gclk_init_generators_by_fref+0x10c>)
    53d0:	2106      	movs	r1, #6
    53d2:	4818      	ldr	r0, [pc, #96]	; (5434 <_gclk_init_generators_by_fref+0xf0>)
    53d4:	4b18      	ldr	r3, [pc, #96]	; (5438 <_gclk_init_generators_by_fref+0xf4>)
    53d6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    53d8:	687b      	ldr	r3, [r7, #4]
    53da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    53de:	2b00      	cmp	r3, #0
    53e0:	d004      	beq.n	53ec <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    53e2:	4a1c      	ldr	r2, [pc, #112]	; (5454 <_gclk_init_generators_by_fref+0x110>)
    53e4:	2107      	movs	r1, #7
    53e6:	4813      	ldr	r0, [pc, #76]	; (5434 <_gclk_init_generators_by_fref+0xf0>)
    53e8:	4b13      	ldr	r3, [pc, #76]	; (5438 <_gclk_init_generators_by_fref+0xf4>)
    53ea:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    53ec:	687b      	ldr	r3, [r7, #4]
    53ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
    53f2:	2b00      	cmp	r3, #0
    53f4:	d004      	beq.n	5400 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    53f6:	4a18      	ldr	r2, [pc, #96]	; (5458 <_gclk_init_generators_by_fref+0x114>)
    53f8:	2108      	movs	r1, #8
    53fa:	480e      	ldr	r0, [pc, #56]	; (5434 <_gclk_init_generators_by_fref+0xf0>)
    53fc:	4b0e      	ldr	r3, [pc, #56]	; (5438 <_gclk_init_generators_by_fref+0xf4>)
    53fe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5406:	2b00      	cmp	r3, #0
    5408:	d004      	beq.n	5414 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    540a:	4a14      	ldr	r2, [pc, #80]	; (545c <_gclk_init_generators_by_fref+0x118>)
    540c:	210a      	movs	r1, #10
    540e:	4809      	ldr	r0, [pc, #36]	; (5434 <_gclk_init_generators_by_fref+0xf0>)
    5410:	4b09      	ldr	r3, [pc, #36]	; (5438 <_gclk_init_generators_by_fref+0xf4>)
    5412:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    541a:	2b00      	cmp	r3, #0
    541c:	d004      	beq.n	5428 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    541e:	4a10      	ldr	r2, [pc, #64]	; (5460 <_gclk_init_generators_by_fref+0x11c>)
    5420:	210b      	movs	r1, #11
    5422:	4804      	ldr	r0, [pc, #16]	; (5434 <_gclk_init_generators_by_fref+0xf0>)
    5424:	4b04      	ldr	r3, [pc, #16]	; (5438 <_gclk_init_generators_by_fref+0xf4>)
    5426:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    5428:	bf00      	nop
    542a:	3708      	adds	r7, #8
    542c:	46bd      	mov	sp, r7
    542e:	bd80      	pop	{r7, pc}
    5430:	00010107 	.word	0x00010107
    5434:	40001c00 	.word	0x40001c00
    5438:	00005315 	.word	0x00005315
    543c:	00010907 	.word	0x00010907
    5440:	00010906 	.word	0x00010906
    5444:	00020908 	.word	0x00020908
    5448:	00010901 	.word	0x00010901
    544c:	00062901 	.word	0x00062901
    5450:	000c2901 	.word	0x000c2901
    5454:	00082908 	.word	0x00082908
    5458:	00032901 	.word	0x00032901
    545c:	00010905 	.word	0x00010905
    5460:	00041905 	.word	0x00041905

00005464 <hri_mclk_write_CPUDIV_reg>:
{
    5464:	b480      	push	{r7}
    5466:	b083      	sub	sp, #12
    5468:	af00      	add	r7, sp, #0
    546a:	6078      	str	r0, [r7, #4]
    546c:	460b      	mov	r3, r1
    546e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5470:	687b      	ldr	r3, [r7, #4]
    5472:	78fa      	ldrb	r2, [r7, #3]
    5474:	715a      	strb	r2, [r3, #5]
}
    5476:	bf00      	nop
    5478:	370c      	adds	r7, #12
    547a:	46bd      	mov	sp, r7
    547c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5480:	4770      	bx	lr
	...

00005484 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    5484:	b580      	push	{r7, lr}
    5486:	b082      	sub	sp, #8
    5488:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    548a:	4b05      	ldr	r3, [pc, #20]	; (54a0 <_mclk_init+0x1c>)
    548c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    548e:	2101      	movs	r1, #1
    5490:	6878      	ldr	r0, [r7, #4]
    5492:	4b04      	ldr	r3, [pc, #16]	; (54a4 <_mclk_init+0x20>)
    5494:	4798      	blx	r3
}
    5496:	bf00      	nop
    5498:	3708      	adds	r7, #8
    549a:	46bd      	mov	sp, r7
    549c:	bd80      	pop	{r7, pc}
    549e:	bf00      	nop
    54a0:	40000800 	.word	0x40000800
    54a4:	00005465 	.word	0x00005465

000054a8 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    54a8:	b480      	push	{r7}
    54aa:	b083      	sub	sp, #12
    54ac:	af00      	add	r7, sp, #0
    54ae:	6078      	str	r0, [r7, #4]
    54b0:	460b      	mov	r3, r1
    54b2:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    54b4:	687b      	ldr	r3, [r7, #4]
    54b6:	78fa      	ldrb	r2, [r7, #3]
    54b8:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    54ba:	bf00      	nop
    54bc:	370c      	adds	r7, #12
    54be:	46bd      	mov	sp, r7
    54c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    54c4:	4770      	bx	lr

000054c6 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    54c6:	b480      	push	{r7}
    54c8:	b083      	sub	sp, #12
    54ca:	af00      	add	r7, sp, #0
    54cc:	6078      	str	r0, [r7, #4]
    54ce:	460b      	mov	r3, r1
    54d0:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    54d2:	687b      	ldr	r3, [r7, #4]
    54d4:	887a      	ldrh	r2, [r7, #2]
    54d6:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    54d8:	bf00      	nop
    54da:	370c      	adds	r7, #12
    54dc:	46bd      	mov	sp, r7
    54de:	f85d 7b04 	ldr.w	r7, [sp], #4
    54e2:	4770      	bx	lr

000054e4 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    54e4:	b480      	push	{r7}
    54e6:	b083      	sub	sp, #12
    54e8:	af00      	add	r7, sp, #0
    54ea:	6078      	str	r0, [r7, #4]
    54ec:	460b      	mov	r3, r1
    54ee:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	78fa      	ldrb	r2, [r7, #3]
    54f4:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    54f6:	bf00      	nop
    54f8:	370c      	adds	r7, #12
    54fa:	46bd      	mov	sp, r7
    54fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5500:	4770      	bx	lr

00005502 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    5502:	b480      	push	{r7}
    5504:	b083      	sub	sp, #12
    5506:	af00      	add	r7, sp, #0
    5508:	6078      	str	r0, [r7, #4]
    550a:	460b      	mov	r3, r1
    550c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    550e:	687b      	ldr	r3, [r7, #4]
    5510:	78fa      	ldrb	r2, [r7, #3]
    5512:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5514:	bf00      	nop
    5516:	370c      	adds	r7, #12
    5518:	46bd      	mov	sp, r7
    551a:	f85d 7b04 	ldr.w	r7, [sp], #4
    551e:	4770      	bx	lr

00005520 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5520:	b480      	push	{r7}
    5522:	b085      	sub	sp, #20
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5528:	687b      	ldr	r3, [r7, #4]
    552a:	69db      	ldr	r3, [r3, #28]
    552c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    552e:	68fb      	ldr	r3, [r7, #12]
    5530:	0a1b      	lsrs	r3, r3, #8
    5532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5536:	60fb      	str	r3, [r7, #12]
	return tmp;
    5538:	68fb      	ldr	r3, [r7, #12]
}
    553a:	4618      	mov	r0, r3
    553c:	3714      	adds	r7, #20
    553e:	46bd      	mov	sp, r7
    5540:	f85d 7b04 	ldr.w	r7, [sp], #4
    5544:	4770      	bx	lr

00005546 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    5546:	b480      	push	{r7}
    5548:	b083      	sub	sp, #12
    554a:	af00      	add	r7, sp, #0
    554c:	6078      	str	r0, [r7, #4]
    554e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5550:	687b      	ldr	r3, [r7, #4]
    5552:	683a      	ldr	r2, [r7, #0]
    5554:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5556:	bf00      	nop
    5558:	370c      	adds	r7, #12
    555a:	46bd      	mov	sp, r7
    555c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5560:	4770      	bx	lr
	...

00005564 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    5564:	b580      	push	{r7, lr}
    5566:	b082      	sub	sp, #8
    5568:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    556a:	4b13      	ldr	r3, [pc, #76]	; (55b8 <_osc32kctrl_init_sources+0x54>)
    556c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    556e:	2300      	movs	r3, #0
    5570:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    5572:	f242 018e 	movw	r1, #8334	; 0x208e
    5576:	6878      	ldr	r0, [r7, #4]
    5578:	4b10      	ldr	r3, [pc, #64]	; (55bc <_osc32kctrl_init_sources+0x58>)
    557a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    557c:	2100      	movs	r1, #0
    557e:	6878      	ldr	r0, [r7, #4]
    5580:	4b0f      	ldr	r3, [pc, #60]	; (55c0 <_osc32kctrl_init_sources+0x5c>)
    5582:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5584:	2100      	movs	r1, #0
    5586:	6878      	ldr	r0, [r7, #4]
    5588:	4b0e      	ldr	r3, [pc, #56]	; (55c4 <_osc32kctrl_init_sources+0x60>)
    558a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    558c:	6878      	ldr	r0, [r7, #4]
    558e:	4b0e      	ldr	r3, [pc, #56]	; (55c8 <_osc32kctrl_init_sources+0x64>)
    5590:	4798      	blx	r3
    5592:	4603      	mov	r3, r0
    5594:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5596:	887b      	ldrh	r3, [r7, #2]
    5598:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    559a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    559e:	4619      	mov	r1, r3
    55a0:	6878      	ldr	r0, [r7, #4]
    55a2:	4b0a      	ldr	r3, [pc, #40]	; (55cc <_osc32kctrl_init_sources+0x68>)
    55a4:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    55a6:	2100      	movs	r1, #0
    55a8:	6878      	ldr	r0, [r7, #4]
    55aa:	4b09      	ldr	r3, [pc, #36]	; (55d0 <_osc32kctrl_init_sources+0x6c>)
    55ac:	4798      	blx	r3
	(void)calib;
}
    55ae:	bf00      	nop
    55b0:	3708      	adds	r7, #8
    55b2:	46bd      	mov	sp, r7
    55b4:	bd80      	pop	{r7, pc}
    55b6:	bf00      	nop
    55b8:	40001400 	.word	0x40001400
    55bc:	000054c7 	.word	0x000054c7
    55c0:	000054e5 	.word	0x000054e5
    55c4:	00005503 	.word	0x00005503
    55c8:	00005521 	.word	0x00005521
    55cc:	00005547 	.word	0x00005547
    55d0:	000054a9 	.word	0x000054a9

000055d4 <hri_gclk_wait_for_sync>:
{
    55d4:	b480      	push	{r7}
    55d6:	b083      	sub	sp, #12
    55d8:	af00      	add	r7, sp, #0
    55da:	6078      	str	r0, [r7, #4]
    55dc:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    55de:	bf00      	nop
    55e0:	687b      	ldr	r3, [r7, #4]
    55e2:	685a      	ldr	r2, [r3, #4]
    55e4:	683b      	ldr	r3, [r7, #0]
    55e6:	4013      	ands	r3, r2
    55e8:	2b00      	cmp	r3, #0
    55ea:	d1f9      	bne.n	55e0 <hri_gclk_wait_for_sync+0xc>
}
    55ec:	bf00      	nop
    55ee:	370c      	adds	r7, #12
    55f0:	46bd      	mov	sp, r7
    55f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55f6:	4770      	bx	lr

000055f8 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    55f8:	b480      	push	{r7}
    55fa:	b083      	sub	sp, #12
    55fc:	af00      	add	r7, sp, #0
    55fe:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	685b      	ldr	r3, [r3, #4]
    5604:	089b      	lsrs	r3, r3, #2
    5606:	f003 0301 	and.w	r3, r3, #1
    560a:	2b00      	cmp	r3, #0
    560c:	bf14      	ite	ne
    560e:	2301      	movne	r3, #1
    5610:	2300      	moveq	r3, #0
    5612:	b2db      	uxtb	r3, r3
}
    5614:	4618      	mov	r0, r3
    5616:	370c      	adds	r7, #12
    5618:	46bd      	mov	sp, r7
    561a:	f85d 7b04 	ldr.w	r7, [sp], #4
    561e:	4770      	bx	lr

00005620 <hri_gclk_read_SYNCBUSY_reg>:
{
    5620:	b480      	push	{r7}
    5622:	b083      	sub	sp, #12
    5624:	af00      	add	r7, sp, #0
    5626:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5628:	687b      	ldr	r3, [r7, #4]
    562a:	685b      	ldr	r3, [r3, #4]
}
    562c:	4618      	mov	r0, r3
    562e:	370c      	adds	r7, #12
    5630:	46bd      	mov	sp, r7
    5632:	f85d 7b04 	ldr.w	r7, [sp], #4
    5636:	4770      	bx	lr

00005638 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5638:	b580      	push	{r7, lr}
    563a:	b086      	sub	sp, #24
    563c:	af00      	add	r7, sp, #0
    563e:	60f8      	str	r0, [r7, #12]
    5640:	460b      	mov	r3, r1
    5642:	607a      	str	r2, [r7, #4]
    5644:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5646:	7afa      	ldrb	r2, [r7, #11]
    5648:	68fb      	ldr	r3, [r7, #12]
    564a:	3208      	adds	r2, #8
    564c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5650:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5652:	697b      	ldr	r3, [r7, #20]
    5654:	f023 030f 	bic.w	r3, r3, #15
    5658:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	f003 030f 	and.w	r3, r3, #15
    5660:	697a      	ldr	r2, [r7, #20]
    5662:	4313      	orrs	r3, r2
    5664:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5666:	7afa      	ldrb	r2, [r7, #11]
    5668:	68fb      	ldr	r3, [r7, #12]
    566a:	3208      	adds	r2, #8
    566c:	6979      	ldr	r1, [r7, #20]
    566e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5672:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5676:	68f8      	ldr	r0, [r7, #12]
    5678:	4b02      	ldr	r3, [pc, #8]	; (5684 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    567a:	4798      	blx	r3
}
    567c:	bf00      	nop
    567e:	3718      	adds	r7, #24
    5680:	46bd      	mov	sp, r7
    5682:	bd80      	pop	{r7, pc}
    5684:	000055d5 	.word	0x000055d5

00005688 <hri_gclk_write_PCHCTRL_reg>:
{
    5688:	b480      	push	{r7}
    568a:	b085      	sub	sp, #20
    568c:	af00      	add	r7, sp, #0
    568e:	60f8      	str	r0, [r7, #12]
    5690:	460b      	mov	r3, r1
    5692:	607a      	str	r2, [r7, #4]
    5694:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5696:	7afa      	ldrb	r2, [r7, #11]
    5698:	68fb      	ldr	r3, [r7, #12]
    569a:	3220      	adds	r2, #32
    569c:	6879      	ldr	r1, [r7, #4]
    569e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    56a2:	bf00      	nop
    56a4:	3714      	adds	r7, #20
    56a6:	46bd      	mov	sp, r7
    56a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ac:	4770      	bx	lr

000056ae <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    56ae:	b480      	push	{r7}
    56b0:	b085      	sub	sp, #20
    56b2:	af00      	add	r7, sp, #0
    56b4:	60f8      	str	r0, [r7, #12]
    56b6:	460b      	mov	r3, r1
    56b8:	607a      	str	r2, [r7, #4]
    56ba:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    56bc:	bf00      	nop
    56be:	7afa      	ldrb	r2, [r7, #11]
    56c0:	68f9      	ldr	r1, [r7, #12]
    56c2:	4613      	mov	r3, r2
    56c4:	009b      	lsls	r3, r3, #2
    56c6:	4413      	add	r3, r2
    56c8:	009b      	lsls	r3, r3, #2
    56ca:	440b      	add	r3, r1
    56cc:	333c      	adds	r3, #60	; 0x3c
    56ce:	681a      	ldr	r2, [r3, #0]
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	4013      	ands	r3, r2
    56d4:	2b00      	cmp	r3, #0
    56d6:	d1f2      	bne.n	56be <hri_oscctrl_wait_for_sync+0x10>
	};
}
    56d8:	bf00      	nop
    56da:	3714      	adds	r7, #20
    56dc:	46bd      	mov	sp, r7
    56de:	f85d 7b04 	ldr.w	r7, [sp], #4
    56e2:	4770      	bx	lr

000056e4 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    56e4:	b480      	push	{r7}
    56e6:	b083      	sub	sp, #12
    56e8:	af00      	add	r7, sp, #0
    56ea:	6078      	str	r0, [r7, #4]
    56ec:	460b      	mov	r3, r1
    56ee:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    56f0:	78fa      	ldrb	r2, [r7, #3]
    56f2:	6879      	ldr	r1, [r7, #4]
    56f4:	4613      	mov	r3, r2
    56f6:	009b      	lsls	r3, r3, #2
    56f8:	4413      	add	r3, r2
    56fa:	009b      	lsls	r3, r3, #2
    56fc:	440b      	add	r3, r1
    56fe:	3340      	adds	r3, #64	; 0x40
    5700:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    5702:	f003 0301 	and.w	r3, r3, #1
    5706:	2b00      	cmp	r3, #0
    5708:	bf14      	ite	ne
    570a:	2301      	movne	r3, #1
    570c:	2300      	moveq	r3, #0
    570e:	b2db      	uxtb	r3, r3
}
    5710:	4618      	mov	r0, r3
    5712:	370c      	adds	r7, #12
    5714:	46bd      	mov	sp, r7
    5716:	f85d 7b04 	ldr.w	r7, [sp], #4
    571a:	4770      	bx	lr

0000571c <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    571c:	b480      	push	{r7}
    571e:	b083      	sub	sp, #12
    5720:	af00      	add	r7, sp, #0
    5722:	6078      	str	r0, [r7, #4]
    5724:	460b      	mov	r3, r1
    5726:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5728:	78fa      	ldrb	r2, [r7, #3]
    572a:	6879      	ldr	r1, [r7, #4]
    572c:	4613      	mov	r3, r2
    572e:	009b      	lsls	r3, r3, #2
    5730:	4413      	add	r3, r2
    5732:	009b      	lsls	r3, r3, #2
    5734:	440b      	add	r3, r1
    5736:	3340      	adds	r3, #64	; 0x40
    5738:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    573a:	085b      	lsrs	r3, r3, #1
    573c:	f003 0301 	and.w	r3, r3, #1
    5740:	2b00      	cmp	r3, #0
    5742:	bf14      	ite	ne
    5744:	2301      	movne	r3, #1
    5746:	2300      	moveq	r3, #0
    5748:	b2db      	uxtb	r3, r3
}
    574a:	4618      	mov	r0, r3
    574c:	370c      	adds	r7, #12
    574e:	46bd      	mov	sp, r7
    5750:	f85d 7b04 	ldr.w	r7, [sp], #4
    5754:	4770      	bx	lr
	...

00005758 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5758:	b580      	push	{r7, lr}
    575a:	b082      	sub	sp, #8
    575c:	af00      	add	r7, sp, #0
    575e:	6078      	str	r0, [r7, #4]
    5760:	460b      	mov	r3, r1
    5762:	70fb      	strb	r3, [r7, #3]
    5764:	4613      	mov	r3, r2
    5766:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5768:	78fa      	ldrb	r2, [r7, #3]
    576a:	6879      	ldr	r1, [r7, #4]
    576c:	4613      	mov	r3, r2
    576e:	009b      	lsls	r3, r3, #2
    5770:	4413      	add	r3, r2
    5772:	009b      	lsls	r3, r3, #2
    5774:	440b      	add	r3, r1
    5776:	3330      	adds	r3, #48	; 0x30
    5778:	78ba      	ldrb	r2, [r7, #2]
    577a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    577c:	78fb      	ldrb	r3, [r7, #3]
    577e:	2202      	movs	r2, #2
    5780:	4619      	mov	r1, r3
    5782:	6878      	ldr	r0, [r7, #4]
    5784:	4b02      	ldr	r3, [pc, #8]	; (5790 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5786:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5788:	bf00      	nop
    578a:	3708      	adds	r7, #8
    578c:	46bd      	mov	sp, r7
    578e:	bd80      	pop	{r7, pc}
    5790:	000056af 	.word	0x000056af

00005794 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5794:	b580      	push	{r7, lr}
    5796:	b084      	sub	sp, #16
    5798:	af00      	add	r7, sp, #0
    579a:	60f8      	str	r0, [r7, #12]
    579c:	460b      	mov	r3, r1
    579e:	607a      	str	r2, [r7, #4]
    57a0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    57a2:	7afa      	ldrb	r2, [r7, #11]
    57a4:	68f9      	ldr	r1, [r7, #12]
    57a6:	4613      	mov	r3, r2
    57a8:	009b      	lsls	r3, r3, #2
    57aa:	4413      	add	r3, r2
    57ac:	009b      	lsls	r3, r3, #2
    57ae:	440b      	add	r3, r1
    57b0:	3334      	adds	r3, #52	; 0x34
    57b2:	687a      	ldr	r2, [r7, #4]
    57b4:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    57b6:	7afb      	ldrb	r3, [r7, #11]
    57b8:	2206      	movs	r2, #6
    57ba:	4619      	mov	r1, r3
    57bc:	68f8      	ldr	r0, [r7, #12]
    57be:	4b03      	ldr	r3, [pc, #12]	; (57cc <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    57c0:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    57c2:	bf00      	nop
    57c4:	3710      	adds	r7, #16
    57c6:	46bd      	mov	sp, r7
    57c8:	bd80      	pop	{r7, pc}
    57ca:	bf00      	nop
    57cc:	000056af 	.word	0x000056af

000057d0 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    57d0:	b480      	push	{r7}
    57d2:	b085      	sub	sp, #20
    57d4:	af00      	add	r7, sp, #0
    57d6:	60f8      	str	r0, [r7, #12]
    57d8:	460b      	mov	r3, r1
    57da:	607a      	str	r2, [r7, #4]
    57dc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    57de:	7afa      	ldrb	r2, [r7, #11]
    57e0:	68f9      	ldr	r1, [r7, #12]
    57e2:	4613      	mov	r3, r2
    57e4:	009b      	lsls	r3, r3, #2
    57e6:	4413      	add	r3, r2
    57e8:	009b      	lsls	r3, r3, #2
    57ea:	440b      	add	r3, r1
    57ec:	3338      	adds	r3, #56	; 0x38
    57ee:	687a      	ldr	r2, [r7, #4]
    57f0:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    57f2:	bf00      	nop
    57f4:	3714      	adds	r7, #20
    57f6:	46bd      	mov	sp, r7
    57f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    57fc:	4770      	bx	lr

000057fe <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    57fe:	b480      	push	{r7}
    5800:	b083      	sub	sp, #12
    5802:	af00      	add	r7, sp, #0
    5804:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5806:	687b      	ldr	r3, [r7, #4]
    5808:	691b      	ldr	r3, [r3, #16]
    580a:	085b      	lsrs	r3, r3, #1
    580c:	f003 0301 	and.w	r3, r3, #1
    5810:	2b00      	cmp	r3, #0
    5812:	bf14      	ite	ne
    5814:	2301      	movne	r3, #1
    5816:	2300      	moveq	r3, #0
    5818:	b2db      	uxtb	r3, r3
}
    581a:	4618      	mov	r0, r3
    581c:	370c      	adds	r7, #12
    581e:	46bd      	mov	sp, r7
    5820:	f85d 7b04 	ldr.w	r7, [sp], #4
    5824:	4770      	bx	lr

00005826 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5826:	b480      	push	{r7}
    5828:	b083      	sub	sp, #12
    582a:	af00      	add	r7, sp, #0
    582c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    582e:	687b      	ldr	r3, [r7, #4]
    5830:	691b      	ldr	r3, [r3, #16]
    5832:	0a1b      	lsrs	r3, r3, #8
    5834:	f003 0301 	and.w	r3, r3, #1
    5838:	2b00      	cmp	r3, #0
    583a:	bf14      	ite	ne
    583c:	2301      	movne	r3, #1
    583e:	2300      	moveq	r3, #0
    5840:	b2db      	uxtb	r3, r3
}
    5842:	4618      	mov	r0, r3
    5844:	370c      	adds	r7, #12
    5846:	46bd      	mov	sp, r7
    5848:	f85d 7b04 	ldr.w	r7, [sp], #4
    584c:	4770      	bx	lr

0000584e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    584e:	b480      	push	{r7}
    5850:	b085      	sub	sp, #20
    5852:	af00      	add	r7, sp, #0
    5854:	6078      	str	r0, [r7, #4]
    5856:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5858:	687b      	ldr	r3, [r7, #4]
    585a:	691b      	ldr	r3, [r3, #16]
    585c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    585e:	68fa      	ldr	r2, [r7, #12]
    5860:	683b      	ldr	r3, [r7, #0]
    5862:	4013      	ands	r3, r2
    5864:	60fb      	str	r3, [r7, #12]
	return tmp;
    5866:	68fb      	ldr	r3, [r7, #12]
}
    5868:	4618      	mov	r0, r3
    586a:	3714      	adds	r7, #20
    586c:	46bd      	mov	sp, r7
    586e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5872:	4770      	bx	lr

00005874 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5874:	b480      	push	{r7}
    5876:	b085      	sub	sp, #20
    5878:	af00      	add	r7, sp, #0
    587a:	60f8      	str	r0, [r7, #12]
    587c:	460b      	mov	r3, r1
    587e:	607a      	str	r2, [r7, #4]
    5880:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5882:	7afb      	ldrb	r3, [r7, #11]
    5884:	68fa      	ldr	r2, [r7, #12]
    5886:	3304      	adds	r3, #4
    5888:	009b      	lsls	r3, r3, #2
    588a:	4413      	add	r3, r2
    588c:	687a      	ldr	r2, [r7, #4]
    588e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5890:	bf00      	nop
    5892:	3714      	adds	r7, #20
    5894:	46bd      	mov	sp, r7
    5896:	f85d 7b04 	ldr.w	r7, [sp], #4
    589a:	4770      	bx	lr

0000589c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    589c:	b480      	push	{r7}
    589e:	b083      	sub	sp, #12
    58a0:	af00      	add	r7, sp, #0
    58a2:	6078      	str	r0, [r7, #4]
    58a4:	460b      	mov	r3, r1
    58a6:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    58a8:	687b      	ldr	r3, [r7, #4]
    58aa:	78fa      	ldrb	r2, [r7, #3]
    58ac:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    58ae:	bf00      	nop
    58b0:	370c      	adds	r7, #12
    58b2:	46bd      	mov	sp, r7
    58b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    58b8:	4770      	bx	lr

000058ba <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    58ba:	b480      	push	{r7}
    58bc:	b085      	sub	sp, #20
    58be:	af00      	add	r7, sp, #0
    58c0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    58c2:	687b      	ldr	r3, [r7, #4]
    58c4:	f893 3020 	ldrb.w	r3, [r3, #32]
    58c8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    58ca:	7bfb      	ldrb	r3, [r7, #15]
    58cc:	f003 0301 	and.w	r3, r3, #1
    58d0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    58d2:	7bfb      	ldrb	r3, [r7, #15]
    58d4:	2b00      	cmp	r3, #0
    58d6:	bf14      	ite	ne
    58d8:	2301      	movne	r3, #1
    58da:	2300      	moveq	r3, #0
    58dc:	b2db      	uxtb	r3, r3
}
    58de:	4618      	mov	r0, r3
    58e0:	3714      	adds	r7, #20
    58e2:	46bd      	mov	sp, r7
    58e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    58e8:	4770      	bx	lr

000058ea <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    58ea:	b480      	push	{r7}
    58ec:	b083      	sub	sp, #12
    58ee:	af00      	add	r7, sp, #0
    58f0:	6078      	str	r0, [r7, #4]
    58f2:	460b      	mov	r3, r1
    58f4:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    58f6:	687b      	ldr	r3, [r7, #4]
    58f8:	78fa      	ldrb	r2, [r7, #3]
    58fa:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    58fe:	bf00      	nop
    5900:	370c      	adds	r7, #12
    5902:	46bd      	mov	sp, r7
    5904:	f85d 7b04 	ldr.w	r7, [sp], #4
    5908:	4770      	bx	lr

0000590a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    590a:	b480      	push	{r7}
    590c:	b083      	sub	sp, #12
    590e:	af00      	add	r7, sp, #0
    5910:	6078      	str	r0, [r7, #4]
    5912:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5914:	687b      	ldr	r3, [r7, #4]
    5916:	683a      	ldr	r2, [r7, #0]
    5918:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    591a:	bf00      	nop
    591c:	370c      	adds	r7, #12
    591e:	46bd      	mov	sp, r7
    5920:	f85d 7b04 	ldr.w	r7, [sp], #4
    5924:	4770      	bx	lr

00005926 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5926:	b480      	push	{r7}
    5928:	b083      	sub	sp, #12
    592a:	af00      	add	r7, sp, #0
    592c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    592e:	687b      	ldr	r3, [r7, #4]
    5930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5932:	4618      	mov	r0, r3
    5934:	370c      	adds	r7, #12
    5936:	46bd      	mov	sp, r7
    5938:	f85d 7b04 	ldr.w	r7, [sp], #4
    593c:	4770      	bx	lr

0000593e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    593e:	b480      	push	{r7}
    5940:	b083      	sub	sp, #12
    5942:	af00      	add	r7, sp, #0
    5944:	6078      	str	r0, [r7, #4]
    5946:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5948:	687b      	ldr	r3, [r7, #4]
    594a:	683a      	ldr	r2, [r7, #0]
    594c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    594e:	bf00      	nop
    5950:	370c      	adds	r7, #12
    5952:	46bd      	mov	sp, r7
    5954:	f85d 7b04 	ldr.w	r7, [sp], #4
    5958:	4770      	bx	lr

0000595a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    595a:	b480      	push	{r7}
    595c:	b085      	sub	sp, #20
    595e:	af00      	add	r7, sp, #0
    5960:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5962:	687b      	ldr	r3, [r7, #4]
    5964:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5968:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    596a:	7bfb      	ldrb	r3, [r7, #15]
    596c:	085b      	lsrs	r3, r3, #1
    596e:	b2db      	uxtb	r3, r3
    5970:	f003 0301 	and.w	r3, r3, #1
    5974:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5976:	7bfb      	ldrb	r3, [r7, #15]
    5978:	2b00      	cmp	r3, #0
    597a:	bf14      	ite	ne
    597c:	2301      	movne	r3, #1
    597e:	2300      	moveq	r3, #0
    5980:	b2db      	uxtb	r3, r3
}
    5982:	4618      	mov	r0, r3
    5984:	3714      	adds	r7, #20
    5986:	46bd      	mov	sp, r7
    5988:	f85d 7b04 	ldr.w	r7, [sp], #4
    598c:	4770      	bx	lr

0000598e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    598e:	b480      	push	{r7}
    5990:	b085      	sub	sp, #20
    5992:	af00      	add	r7, sp, #0
    5994:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    599c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    599e:	7bfb      	ldrb	r3, [r7, #15]
    59a0:	089b      	lsrs	r3, r3, #2
    59a2:	b2db      	uxtb	r3, r3
    59a4:	f003 0301 	and.w	r3, r3, #1
    59a8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    59aa:	7bfb      	ldrb	r3, [r7, #15]
    59ac:	2b00      	cmp	r3, #0
    59ae:	bf14      	ite	ne
    59b0:	2301      	movne	r3, #1
    59b2:	2300      	moveq	r3, #0
    59b4:	b2db      	uxtb	r3, r3
}
    59b6:	4618      	mov	r0, r3
    59b8:	3714      	adds	r7, #20
    59ba:	46bd      	mov	sp, r7
    59bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    59c0:	4770      	bx	lr

000059c2 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    59c2:	b480      	push	{r7}
    59c4:	b085      	sub	sp, #20
    59c6:	af00      	add	r7, sp, #0
    59c8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    59ca:	687b      	ldr	r3, [r7, #4]
    59cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    59d0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    59d2:	7bfb      	ldrb	r3, [r7, #15]
    59d4:	08db      	lsrs	r3, r3, #3
    59d6:	b2db      	uxtb	r3, r3
    59d8:	f003 0301 	and.w	r3, r3, #1
    59dc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    59de:	7bfb      	ldrb	r3, [r7, #15]
    59e0:	2b00      	cmp	r3, #0
    59e2:	bf14      	ite	ne
    59e4:	2301      	movne	r3, #1
    59e6:	2300      	moveq	r3, #0
    59e8:	b2db      	uxtb	r3, r3
}
    59ea:	4618      	mov	r0, r3
    59ec:	3714      	adds	r7, #20
    59ee:	46bd      	mov	sp, r7
    59f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59f4:	4770      	bx	lr

000059f6 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    59f6:	b480      	push	{r7}
    59f8:	b085      	sub	sp, #20
    59fa:	af00      	add	r7, sp, #0
    59fc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    59fe:	687b      	ldr	r3, [r7, #4]
    5a00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5a04:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5a06:	7bfb      	ldrb	r3, [r7, #15]
    5a08:	091b      	lsrs	r3, r3, #4
    5a0a:	b2db      	uxtb	r3, r3
    5a0c:	f003 0301 	and.w	r3, r3, #1
    5a10:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5a12:	7bfb      	ldrb	r3, [r7, #15]
    5a14:	2b00      	cmp	r3, #0
    5a16:	bf14      	ite	ne
    5a18:	2301      	movne	r3, #1
    5a1a:	2300      	moveq	r3, #0
    5a1c:	b2db      	uxtb	r3, r3
}
    5a1e:	4618      	mov	r0, r3
    5a20:	3714      	adds	r7, #20
    5a22:	46bd      	mov	sp, r7
    5a24:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a28:	4770      	bx	lr
	...

00005a2c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5a2c:	b580      	push	{r7, lr}
    5a2e:	b082      	sub	sp, #8
    5a30:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5a32:	4b0a      	ldr	r3, [pc, #40]	; (5a5c <_oscctrl_init_sources+0x30>)
    5a34:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5a36:	4a0a      	ldr	r2, [pc, #40]	; (5a60 <_oscctrl_init_sources+0x34>)
    5a38:	2101      	movs	r1, #1
    5a3a:	6878      	ldr	r0, [r7, #4]
    5a3c:	4b09      	ldr	r3, [pc, #36]	; (5a64 <_oscctrl_init_sources+0x38>)
    5a3e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5a40:	bf00      	nop
    5a42:	6878      	ldr	r0, [r7, #4]
    5a44:	4b08      	ldr	r3, [pc, #32]	; (5a68 <_oscctrl_init_sources+0x3c>)
    5a46:	4798      	blx	r3
    5a48:	4603      	mov	r3, r0
    5a4a:	f083 0301 	eor.w	r3, r3, #1
    5a4e:	b2db      	uxtb	r3, r3
    5a50:	2b00      	cmp	r3, #0
    5a52:	d1f6      	bne.n	5a42 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5a54:	bf00      	nop
    5a56:	3708      	adds	r7, #8
    5a58:	46bd      	mov	sp, r7
    5a5a:	bd80      	pop	{r7, pc}
    5a5c:	40001000 	.word	0x40001000
    5a60:	03002646 	.word	0x03002646
    5a64:	00005875 	.word	0x00005875
    5a68:	000057ff 	.word	0x000057ff

00005a6c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5a6c:	b580      	push	{r7, lr}
    5a6e:	b084      	sub	sp, #16
    5a70:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5a72:	4b6b      	ldr	r3, [pc, #428]	; (5c20 <_oscctrl_init_referenced_generators+0x1b4>)
    5a74:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5a76:	2204      	movs	r2, #4
    5a78:	2100      	movs	r1, #0
    5a7a:	486a      	ldr	r0, [pc, #424]	; (5c24 <_oscctrl_init_referenced_generators+0x1b8>)
    5a7c:	4b6a      	ldr	r3, [pc, #424]	; (5c28 <_oscctrl_init_referenced_generators+0x1bc>)
    5a7e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5a80:	bf00      	nop
    5a82:	4868      	ldr	r0, [pc, #416]	; (5c24 <_oscctrl_init_referenced_generators+0x1b8>)
    5a84:	4b69      	ldr	r3, [pc, #420]	; (5c2c <_oscctrl_init_referenced_generators+0x1c0>)
    5a86:	4798      	blx	r3
    5a88:	4603      	mov	r3, r0
    5a8a:	2b00      	cmp	r3, #0
    5a8c:	d1f9      	bne.n	5a82 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5a8e:	2100      	movs	r1, #0
    5a90:	68f8      	ldr	r0, [r7, #12]
    5a92:	4b67      	ldr	r3, [pc, #412]	; (5c30 <_oscctrl_init_referenced_generators+0x1c4>)
    5a94:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5a96:	4967      	ldr	r1, [pc, #412]	; (5c34 <_oscctrl_init_referenced_generators+0x1c8>)
    5a98:	68f8      	ldr	r0, [r7, #12]
    5a9a:	4b67      	ldr	r3, [pc, #412]	; (5c38 <_oscctrl_init_referenced_generators+0x1cc>)
    5a9c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5a9e:	bf00      	nop
    5aa0:	68f8      	ldr	r0, [r7, #12]
    5aa2:	4b66      	ldr	r3, [pc, #408]	; (5c3c <_oscctrl_init_referenced_generators+0x1d0>)
    5aa4:	4798      	blx	r3
    5aa6:	4603      	mov	r3, r0
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	d1f9      	bne.n	5aa0 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5aac:	2100      	movs	r1, #0
    5aae:	68f8      	ldr	r0, [r7, #12]
    5ab0:	4b63      	ldr	r3, [pc, #396]	; (5c40 <_oscctrl_init_referenced_generators+0x1d4>)
    5ab2:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5ab4:	bf00      	nop
    5ab6:	68f8      	ldr	r0, [r7, #12]
    5ab8:	4b62      	ldr	r3, [pc, #392]	; (5c44 <_oscctrl_init_referenced_generators+0x1d8>)
    5aba:	4798      	blx	r3
    5abc:	4603      	mov	r3, r0
    5abe:	2b00      	cmp	r3, #0
    5ac0:	d1f9      	bne.n	5ab6 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5ac2:	2302      	movs	r3, #2
    5ac4:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5ac6:	7afb      	ldrb	r3, [r7, #11]
    5ac8:	4619      	mov	r1, r3
    5aca:	68f8      	ldr	r0, [r7, #12]
    5acc:	4b58      	ldr	r3, [pc, #352]	; (5c30 <_oscctrl_init_referenced_generators+0x1c4>)
    5ace:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5ad0:	bf00      	nop
    5ad2:	68f8      	ldr	r0, [r7, #12]
    5ad4:	4b5c      	ldr	r3, [pc, #368]	; (5c48 <_oscctrl_init_referenced_generators+0x1dc>)
    5ad6:	4798      	blx	r3
    5ad8:	4603      	mov	r3, r0
    5ada:	2b00      	cmp	r3, #0
    5adc:	d1f9      	bne.n	5ad2 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5ade:	68f8      	ldr	r0, [r7, #12]
    5ae0:	4b5a      	ldr	r3, [pc, #360]	; (5c4c <_oscctrl_init_referenced_generators+0x1e0>)
    5ae2:	4798      	blx	r3
    5ae4:	4603      	mov	r3, r0
    5ae6:	4619      	mov	r1, r3
    5ae8:	68f8      	ldr	r0, [r7, #12]
    5aea:	4b59      	ldr	r3, [pc, #356]	; (5c50 <_oscctrl_init_referenced_generators+0x1e4>)
    5aec:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5aee:	bf00      	nop
    5af0:	68f8      	ldr	r0, [r7, #12]
    5af2:	4b58      	ldr	r3, [pc, #352]	; (5c54 <_oscctrl_init_referenced_generators+0x1e8>)
    5af4:	4798      	blx	r3
    5af6:	4603      	mov	r3, r0
    5af8:	2b00      	cmp	r3, #0
    5afa:	d1f9      	bne.n	5af0 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5afc:	2319      	movs	r3, #25
    5afe:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5b00:	7afb      	ldrb	r3, [r7, #11]
    5b02:	4619      	mov	r1, r3
    5b04:	68f8      	ldr	r0, [r7, #12]
    5b06:	4b4e      	ldr	r3, [pc, #312]	; (5c40 <_oscctrl_init_referenced_generators+0x1d4>)
    5b08:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5b0a:	bf00      	nop
    5b0c:	68f8      	ldr	r0, [r7, #12]
    5b0e:	4b4d      	ldr	r3, [pc, #308]	; (5c44 <_oscctrl_init_referenced_generators+0x1d8>)
    5b10:	4798      	blx	r3
    5b12:	4603      	mov	r3, r0
    5b14:	2b00      	cmp	r3, #0
    5b16:	d1f9      	bne.n	5b0c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5b18:	2245      	movs	r2, #69	; 0x45
    5b1a:	2101      	movs	r1, #1
    5b1c:	4841      	ldr	r0, [pc, #260]	; (5c24 <_oscctrl_init_referenced_generators+0x1b8>)
    5b1e:	4b4e      	ldr	r3, [pc, #312]	; (5c58 <_oscctrl_init_referenced_generators+0x1ec>)
    5b20:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5b22:	223b      	movs	r2, #59	; 0x3b
    5b24:	2100      	movs	r1, #0
    5b26:	68f8      	ldr	r0, [r7, #12]
    5b28:	4b4c      	ldr	r3, [pc, #304]	; (5c5c <_oscctrl_init_referenced_generators+0x1f0>)
    5b2a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5b2c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5b30:	2100      	movs	r1, #0
    5b32:	68f8      	ldr	r0, [r7, #12]
    5b34:	4b4a      	ldr	r3, [pc, #296]	; (5c60 <_oscctrl_init_referenced_generators+0x1f4>)
    5b36:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5b38:	2242      	movs	r2, #66	; 0x42
    5b3a:	2100      	movs	r1, #0
    5b3c:	68f8      	ldr	r0, [r7, #12]
    5b3e:	4b49      	ldr	r3, [pc, #292]	; (5c64 <_oscctrl_init_referenced_generators+0x1f8>)
    5b40:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5b42:	4a49      	ldr	r2, [pc, #292]	; (5c68 <_oscctrl_init_referenced_generators+0x1fc>)
    5b44:	2101      	movs	r1, #1
    5b46:	68f8      	ldr	r0, [r7, #12]
    5b48:	4b44      	ldr	r3, [pc, #272]	; (5c5c <_oscctrl_init_referenced_generators+0x1f0>)
    5b4a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5b4c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5b50:	2101      	movs	r1, #1
    5b52:	68f8      	ldr	r0, [r7, #12]
    5b54:	4b42      	ldr	r3, [pc, #264]	; (5c60 <_oscctrl_init_referenced_generators+0x1f4>)
    5b56:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5b58:	2202      	movs	r2, #2
    5b5a:	2101      	movs	r1, #1
    5b5c:	68f8      	ldr	r0, [r7, #12]
    5b5e:	4b41      	ldr	r3, [pc, #260]	; (5c64 <_oscctrl_init_referenced_generators+0x1f8>)
    5b60:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5b62:	68f8      	ldr	r0, [r7, #12]
    5b64:	4b41      	ldr	r3, [pc, #260]	; (5c6c <_oscctrl_init_referenced_generators+0x200>)
    5b66:	4798      	blx	r3
    5b68:	4603      	mov	r3, r0
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	d00c      	beq.n	5b88 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5b6e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5b72:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5b74:	bf00      	nop
    5b76:	6879      	ldr	r1, [r7, #4]
    5b78:	68f8      	ldr	r0, [r7, #12]
    5b7a:	4b3d      	ldr	r3, [pc, #244]	; (5c70 <_oscctrl_init_referenced_generators+0x204>)
    5b7c:	4798      	blx	r3
    5b7e:	4602      	mov	r2, r0
    5b80:	687b      	ldr	r3, [r7, #4]
    5b82:	429a      	cmp	r2, r3
    5b84:	d1f7      	bne.n	5b76 <_oscctrl_init_referenced_generators+0x10a>
    5b86:	e009      	b.n	5b9c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5b88:	bf00      	nop
    5b8a:	68f8      	ldr	r0, [r7, #12]
    5b8c:	4b39      	ldr	r3, [pc, #228]	; (5c74 <_oscctrl_init_referenced_generators+0x208>)
    5b8e:	4798      	blx	r3
    5b90:	4603      	mov	r3, r0
    5b92:	f083 0301 	eor.w	r3, r3, #1
    5b96:	b2db      	uxtb	r3, r3
    5b98:	2b00      	cmp	r3, #0
    5b9a:	d1f6      	bne.n	5b8a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5b9c:	bf00      	nop
    5b9e:	2100      	movs	r1, #0
    5ba0:	68f8      	ldr	r0, [r7, #12]
    5ba2:	4b35      	ldr	r3, [pc, #212]	; (5c78 <_oscctrl_init_referenced_generators+0x20c>)
    5ba4:	4798      	blx	r3
    5ba6:	4603      	mov	r3, r0
    5ba8:	f083 0301 	eor.w	r3, r3, #1
    5bac:	b2db      	uxtb	r3, r3
    5bae:	2b00      	cmp	r3, #0
    5bb0:	d009      	beq.n	5bc6 <_oscctrl_init_referenced_generators+0x15a>
    5bb2:	2100      	movs	r1, #0
    5bb4:	68f8      	ldr	r0, [r7, #12]
    5bb6:	4b31      	ldr	r3, [pc, #196]	; (5c7c <_oscctrl_init_referenced_generators+0x210>)
    5bb8:	4798      	blx	r3
    5bba:	4603      	mov	r3, r0
    5bbc:	f083 0301 	eor.w	r3, r3, #1
    5bc0:	b2db      	uxtb	r3, r3
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d1eb      	bne.n	5b9e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5bc6:	bf00      	nop
    5bc8:	2101      	movs	r1, #1
    5bca:	68f8      	ldr	r0, [r7, #12]
    5bcc:	4b2a      	ldr	r3, [pc, #168]	; (5c78 <_oscctrl_init_referenced_generators+0x20c>)
    5bce:	4798      	blx	r3
    5bd0:	4603      	mov	r3, r0
    5bd2:	f083 0301 	eor.w	r3, r3, #1
    5bd6:	b2db      	uxtb	r3, r3
    5bd8:	2b00      	cmp	r3, #0
    5bda:	d009      	beq.n	5bf0 <_oscctrl_init_referenced_generators+0x184>
    5bdc:	2101      	movs	r1, #1
    5bde:	68f8      	ldr	r0, [r7, #12]
    5be0:	4b26      	ldr	r3, [pc, #152]	; (5c7c <_oscctrl_init_referenced_generators+0x210>)
    5be2:	4798      	blx	r3
    5be4:	4603      	mov	r3, r0
    5be6:	f083 0301 	eor.w	r3, r3, #1
    5bea:	b2db      	uxtb	r3, r3
    5bec:	2b00      	cmp	r3, #0
    5bee:	d1eb      	bne.n	5bc8 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5bf0:	bf00      	nop
    5bf2:	480c      	ldr	r0, [pc, #48]	; (5c24 <_oscctrl_init_referenced_generators+0x1b8>)
    5bf4:	4b22      	ldr	r3, [pc, #136]	; (5c80 <_oscctrl_init_referenced_generators+0x214>)
    5bf6:	4798      	blx	r3
    5bf8:	4603      	mov	r3, r0
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d1f9      	bne.n	5bf2 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5bfe:	2207      	movs	r2, #7
    5c00:	2100      	movs	r1, #0
    5c02:	4808      	ldr	r0, [pc, #32]	; (5c24 <_oscctrl_init_referenced_generators+0x1b8>)
    5c04:	4b08      	ldr	r3, [pc, #32]	; (5c28 <_oscctrl_init_referenced_generators+0x1bc>)
    5c06:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5c08:	bf00      	nop
    5c0a:	4806      	ldr	r0, [pc, #24]	; (5c24 <_oscctrl_init_referenced_generators+0x1b8>)
    5c0c:	4b07      	ldr	r3, [pc, #28]	; (5c2c <_oscctrl_init_referenced_generators+0x1c0>)
    5c0e:	4798      	blx	r3
    5c10:	4603      	mov	r3, r0
    5c12:	2b00      	cmp	r3, #0
    5c14:	d1f9      	bne.n	5c0a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5c16:	bf00      	nop
    5c18:	3710      	adds	r7, #16
    5c1a:	46bd      	mov	sp, r7
    5c1c:	bd80      	pop	{r7, pc}
    5c1e:	bf00      	nop
    5c20:	40001000 	.word	0x40001000
    5c24:	40001c00 	.word	0x40001c00
    5c28:	00005639 	.word	0x00005639
    5c2c:	000055f9 	.word	0x000055f9
    5c30:	0000589d 	.word	0x0000589d
    5c34:	0401bb80 	.word	0x0401bb80
    5c38:	0000593f 	.word	0x0000593f
    5c3c:	000059f7 	.word	0x000059f7
    5c40:	000058eb 	.word	0x000058eb
    5c44:	0000598f 	.word	0x0000598f
    5c48:	0000595b 	.word	0x0000595b
    5c4c:	00005927 	.word	0x00005927
    5c50:	0000590b 	.word	0x0000590b
    5c54:	000059c3 	.word	0x000059c3
    5c58:	00005689 	.word	0x00005689
    5c5c:	00005795 	.word	0x00005795
    5c60:	000057d1 	.word	0x000057d1
    5c64:	00005759 	.word	0x00005759
    5c68:	000407a0 	.word	0x000407a0
    5c6c:	000058bb 	.word	0x000058bb
    5c70:	0000584f 	.word	0x0000584f
    5c74:	00005827 	.word	0x00005827
    5c78:	000056e5 	.word	0x000056e5
    5c7c:	0000571d 	.word	0x0000571d
    5c80:	00005621 	.word	0x00005621

00005c84 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5c84:	b480      	push	{r7}
    5c86:	b083      	sub	sp, #12
    5c88:	af00      	add	r7, sp, #0
    5c8a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5c8c:	687b      	ldr	r3, [r7, #4]
    5c8e:	69db      	ldr	r3, [r3, #28]
    5c90:	0a9b      	lsrs	r3, r3, #10
    5c92:	f003 0301 	and.w	r3, r3, #1
    5c96:	2b00      	cmp	r3, #0
    5c98:	bf14      	ite	ne
    5c9a:	2301      	movne	r3, #1
    5c9c:	2300      	moveq	r3, #0
    5c9e:	b2db      	uxtb	r3, r3
}
    5ca0:	4618      	mov	r0, r3
    5ca2:	370c      	adds	r7, #12
    5ca4:	46bd      	mov	sp, r7
    5ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5caa:	4770      	bx	lr

00005cac <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5cac:	b480      	push	{r7}
    5cae:	b083      	sub	sp, #12
    5cb0:	af00      	add	r7, sp, #0
    5cb2:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5cba:	61da      	str	r2, [r3, #28]
}
    5cbc:	bf00      	nop
    5cbe:	370c      	adds	r7, #12
    5cc0:	46bd      	mov	sp, r7
    5cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cc6:	4770      	bx	lr

00005cc8 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5cc8:	b480      	push	{r7}
    5cca:	b083      	sub	sp, #12
    5ccc:	af00      	add	r7, sp, #0
    5cce:	6078      	str	r0, [r7, #4]
    5cd0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5cd2:	687b      	ldr	r3, [r7, #4]
    5cd4:	683a      	ldr	r2, [r7, #0]
    5cd6:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5cd8:	bf00      	nop
    5cda:	370c      	adds	r7, #12
    5cdc:	46bd      	mov	sp, r7
    5cde:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ce2:	4770      	bx	lr

00005ce4 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5ce4:	b480      	push	{r7}
    5ce6:	b083      	sub	sp, #12
    5ce8:	af00      	add	r7, sp, #0
    5cea:	6078      	str	r0, [r7, #4]
    5cec:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5cee:	687b      	ldr	r3, [r7, #4]
    5cf0:	683a      	ldr	r2, [r7, #0]
    5cf2:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5cf4:	bf00      	nop
    5cf6:	370c      	adds	r7, #12
    5cf8:	46bd      	mov	sp, r7
    5cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cfe:	4770      	bx	lr

00005d00 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5d00:	b480      	push	{r7}
    5d02:	b083      	sub	sp, #12
    5d04:	af00      	add	r7, sp, #0
    5d06:	6078      	str	r0, [r7, #4]
    5d08:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5d0a:	687b      	ldr	r3, [r7, #4]
    5d0c:	683a      	ldr	r2, [r7, #0]
    5d0e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d10:	bf00      	nop
    5d12:	370c      	adds	r7, #12
    5d14:	46bd      	mov	sp, r7
    5d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d1a:	4770      	bx	lr

00005d1c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5d1c:	b480      	push	{r7}
    5d1e:	b083      	sub	sp, #12
    5d20:	af00      	add	r7, sp, #0
    5d22:	6078      	str	r0, [r7, #4]
    5d24:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	683a      	ldr	r2, [r7, #0]
    5d2a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d2c:	bf00      	nop
    5d2e:	370c      	adds	r7, #12
    5d30:	46bd      	mov	sp, r7
    5d32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d36:	4770      	bx	lr

00005d38 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5d38:	b480      	push	{r7}
    5d3a:	b085      	sub	sp, #20
    5d3c:	af00      	add	r7, sp, #0
    5d3e:	6078      	str	r0, [r7, #4]
    5d40:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5d46:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5d48:	68fb      	ldr	r3, [r7, #12]
    5d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5d4e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5d50:	683b      	ldr	r3, [r7, #0]
    5d52:	b2db      	uxtb	r3, r3
    5d54:	68fa      	ldr	r2, [r7, #12]
    5d56:	4313      	orrs	r3, r2
    5d58:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5d5a:	687b      	ldr	r3, [r7, #4]
    5d5c:	68fa      	ldr	r2, [r7, #12]
    5d5e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d60:	bf00      	nop
    5d62:	3714      	adds	r7, #20
    5d64:	46bd      	mov	sp, r7
    5d66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d6a:	4770      	bx	lr

00005d6c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5d6c:	b480      	push	{r7}
    5d6e:	b085      	sub	sp, #20
    5d70:	af00      	add	r7, sp, #0
    5d72:	6078      	str	r0, [r7, #4]
    5d74:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5d76:	687b      	ldr	r3, [r7, #4]
    5d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5d7a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5d7c:	68fb      	ldr	r3, [r7, #12]
    5d7e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5d82:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5d84:	683b      	ldr	r3, [r7, #0]
    5d86:	041b      	lsls	r3, r3, #16
    5d88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5d8c:	68fa      	ldr	r2, [r7, #12]
    5d8e:	4313      	orrs	r3, r2
    5d90:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	68fa      	ldr	r2, [r7, #12]
    5d96:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d98:	bf00      	nop
    5d9a:	3714      	adds	r7, #20
    5d9c:	46bd      	mov	sp, r7
    5d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5da2:	4770      	bx	lr

00005da4 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5da4:	b480      	push	{r7}
    5da6:	b083      	sub	sp, #12
    5da8:	af00      	add	r7, sp, #0
    5daa:	6078      	str	r0, [r7, #4]
    5dac:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5dae:	687b      	ldr	r3, [r7, #4]
    5db0:	683a      	ldr	r2, [r7, #0]
    5db2:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5db4:	bf00      	nop
    5db6:	370c      	adds	r7, #12
    5db8:	46bd      	mov	sp, r7
    5dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dbe:	4770      	bx	lr

00005dc0 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5dc0:	b480      	push	{r7}
    5dc2:	b083      	sub	sp, #12
    5dc4:	af00      	add	r7, sp, #0
    5dc6:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5dc8:	687b      	ldr	r3, [r7, #4]
    5dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5dcc:	4618      	mov	r0, r3
    5dce:	370c      	adds	r7, #12
    5dd0:	46bd      	mov	sp, r7
    5dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dd6:	4770      	bx	lr

00005dd8 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5dd8:	b480      	push	{r7}
    5dda:	b085      	sub	sp, #20
    5ddc:	af00      	add	r7, sp, #0
    5dde:	60f8      	str	r0, [r7, #12]
    5de0:	60b9      	str	r1, [r7, #8]
    5de2:	607a      	str	r2, [r7, #4]
	while (count--) {
    5de4:	e007      	b.n	5df6 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5de6:	68fb      	ldr	r3, [r7, #12]
    5de8:	1c5a      	adds	r2, r3, #1
    5dea:	60fa      	str	r2, [r7, #12]
    5dec:	68ba      	ldr	r2, [r7, #8]
    5dee:	1c51      	adds	r1, r2, #1
    5df0:	60b9      	str	r1, [r7, #8]
    5df2:	7812      	ldrb	r2, [r2, #0]
    5df4:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	1e5a      	subs	r2, r3, #1
    5dfa:	607a      	str	r2, [r7, #4]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d1f2      	bne.n	5de6 <_qspi_memcpy+0xe>
	}
}
    5e00:	bf00      	nop
    5e02:	3714      	adds	r7, #20
    5e04:	46bd      	mov	sp, r7
    5e06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e0a:	4770      	bx	lr

00005e0c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5e0c:	b580      	push	{r7, lr}
    5e0e:	b082      	sub	sp, #8
    5e10:	af00      	add	r7, sp, #0
    5e12:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5e14:	4903      	ldr	r1, [pc, #12]	; (5e24 <_qspi_end_transfer+0x18>)
    5e16:	6878      	ldr	r0, [r7, #4]
    5e18:	4b03      	ldr	r3, [pc, #12]	; (5e28 <_qspi_end_transfer+0x1c>)
    5e1a:	4798      	blx	r3
}
    5e1c:	bf00      	nop
    5e1e:	3708      	adds	r7, #8
    5e20:	46bd      	mov	sp, r7
    5e22:	bd80      	pop	{r7, pc}
    5e24:	01000002 	.word	0x01000002
    5e28:	00005cc9 	.word	0x00005cc9

00005e2c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5e2c:	b580      	push	{r7, lr}
    5e2e:	b082      	sub	sp, #8
    5e30:	af00      	add	r7, sp, #0
    5e32:	6078      	str	r0, [r7, #4]
    5e34:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5e36:	687b      	ldr	r3, [r7, #4]
    5e38:	2b00      	cmp	r3, #0
    5e3a:	d004      	beq.n	5e46 <_qspi_sync_init+0x1a>
    5e3c:	683b      	ldr	r3, [r7, #0]
    5e3e:	2b00      	cmp	r3, #0
    5e40:	d001      	beq.n	5e46 <_qspi_sync_init+0x1a>
    5e42:	2301      	movs	r3, #1
    5e44:	e000      	b.n	5e48 <_qspi_sync_init+0x1c>
    5e46:	2300      	movs	r3, #0
    5e48:	f003 0301 	and.w	r3, r3, #1
    5e4c:	b2db      	uxtb	r3, r3
    5e4e:	2240      	movs	r2, #64	; 0x40
    5e50:	490c      	ldr	r1, [pc, #48]	; (5e84 <_qspi_sync_init+0x58>)
    5e52:	4618      	mov	r0, r3
    5e54:	4b0c      	ldr	r3, [pc, #48]	; (5e88 <_qspi_sync_init+0x5c>)
    5e56:	4798      	blx	r3
	dev->prvt = hw;
    5e58:	687b      	ldr	r3, [r7, #4]
    5e5a:	683a      	ldr	r2, [r7, #0]
    5e5c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5e5e:	687b      	ldr	r3, [r7, #4]
    5e60:	681b      	ldr	r3, [r3, #0]
    5e62:	2101      	movs	r1, #1
    5e64:	4618      	mov	r0, r3
    5e66:	4b09      	ldr	r3, [pc, #36]	; (5e8c <_qspi_sync_init+0x60>)
    5e68:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5e6a:	4909      	ldr	r1, [pc, #36]	; (5e90 <_qspi_sync_init+0x64>)
    5e6c:	6838      	ldr	r0, [r7, #0]
    5e6e:	4b09      	ldr	r3, [pc, #36]	; (5e94 <_qspi_sync_init+0x68>)
    5e70:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5e72:	4909      	ldr	r1, [pc, #36]	; (5e98 <_qspi_sync_init+0x6c>)
    5e74:	6838      	ldr	r0, [r7, #0]
    5e76:	4b09      	ldr	r3, [pc, #36]	; (5e9c <_qspi_sync_init+0x70>)
    5e78:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5e7a:	2300      	movs	r3, #0
}
    5e7c:	4618      	mov	r0, r3
    5e7e:	3708      	adds	r7, #8
    5e80:	46bd      	mov	sp, r7
    5e82:	bd80      	pop	{r7, pc}
    5e84:	000100bc 	.word	0x000100bc
    5e88:	00003e69 	.word	0x00003e69
    5e8c:	00005cc9 	.word	0x00005cc9
    5e90:	06000011 	.word	0x06000011
    5e94:	00005ce5 	.word	0x00005ce5
    5e98:	00241300 	.word	0x00241300
    5e9c:	00005d01 	.word	0x00005d01

00005ea0 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5ea0:	b580      	push	{r7, lr}
    5ea2:	b082      	sub	sp, #8
    5ea4:	af00      	add	r7, sp, #0
    5ea6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5ea8:	687b      	ldr	r3, [r7, #4]
    5eaa:	681b      	ldr	r3, [r3, #0]
    5eac:	2102      	movs	r1, #2
    5eae:	4618      	mov	r0, r3
    5eb0:	4b03      	ldr	r3, [pc, #12]	; (5ec0 <_qspi_sync_enable+0x20>)
    5eb2:	4798      	blx	r3
	return ERR_NONE;
    5eb4:	2300      	movs	r3, #0
}
    5eb6:	4618      	mov	r0, r3
    5eb8:	3708      	adds	r7, #8
    5eba:	46bd      	mov	sp, r7
    5ebc:	bd80      	pop	{r7, pc}
    5ebe:	bf00      	nop
    5ec0:	00005cc9 	.word	0x00005cc9

00005ec4 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5ec4:	b580      	push	{r7, lr}
    5ec6:	b082      	sub	sp, #8
    5ec8:	af00      	add	r7, sp, #0
    5eca:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5ecc:	687b      	ldr	r3, [r7, #4]
    5ece:	681b      	ldr	r3, [r3, #0]
    5ed0:	2100      	movs	r1, #0
    5ed2:	4618      	mov	r0, r3
    5ed4:	4b03      	ldr	r3, [pc, #12]	; (5ee4 <_qspi_sync_disable+0x20>)
    5ed6:	4798      	blx	r3
	return ERR_NONE;
    5ed8:	2300      	movs	r3, #0
}
    5eda:	4618      	mov	r0, r3
    5edc:	3708      	adds	r7, #8
    5ede:	46bd      	mov	sp, r7
    5ee0:	bd80      	pop	{r7, pc}
    5ee2:	bf00      	nop
    5ee4:	00005cc9 	.word	0x00005cc9

00005ee8 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5ee8:	b580      	push	{r7, lr}
    5eea:	b084      	sub	sp, #16
    5eec:	af00      	add	r7, sp, #0
    5eee:	6078      	str	r0, [r7, #4]
    5ef0:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5ef2:	687b      	ldr	r3, [r7, #4]
    5ef4:	681b      	ldr	r3, [r3, #0]
    5ef6:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5ef8:	683b      	ldr	r3, [r7, #0]
    5efa:	781b      	ldrb	r3, [r3, #0]
    5efc:	f003 0320 	and.w	r3, r3, #32
    5f00:	b2db      	uxtb	r3, r3
    5f02:	2b00      	cmp	r3, #0
    5f04:	d005      	beq.n	5f12 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5f06:	683b      	ldr	r3, [r7, #0]
    5f08:	689b      	ldr	r3, [r3, #8]
    5f0a:	4619      	mov	r1, r3
    5f0c:	68f8      	ldr	r0, [r7, #12]
    5f0e:	4b13      	ldr	r3, [pc, #76]	; (5f5c <_qspi_sync_command_set_ifr+0x74>)
    5f10:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5f12:	683b      	ldr	r3, [r7, #0]
    5f14:	781b      	ldrb	r3, [r3, #0]
    5f16:	f003 0310 	and.w	r3, r3, #16
    5f1a:	b2db      	uxtb	r3, r3
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d005      	beq.n	5f2c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5f20:	683b      	ldr	r3, [r7, #0]
    5f22:	791b      	ldrb	r3, [r3, #4]
    5f24:	4619      	mov	r1, r3
    5f26:	68f8      	ldr	r0, [r7, #12]
    5f28:	4b0d      	ldr	r3, [pc, #52]	; (5f60 <_qspi_sync_command_set_ifr+0x78>)
    5f2a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5f2c:	683b      	ldr	r3, [r7, #0]
    5f2e:	781b      	ldrb	r3, [r3, #0]
    5f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5f34:	b2db      	uxtb	r3, r3
    5f36:	2b00      	cmp	r3, #0
    5f38:	d005      	beq.n	5f46 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5f3a:	683b      	ldr	r3, [r7, #0]
    5f3c:	795b      	ldrb	r3, [r3, #5]
    5f3e:	4619      	mov	r1, r3
    5f40:	68f8      	ldr	r0, [r7, #12]
    5f42:	4b08      	ldr	r3, [pc, #32]	; (5f64 <_qspi_sync_command_set_ifr+0x7c>)
    5f44:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5f46:	683b      	ldr	r3, [r7, #0]
    5f48:	681b      	ldr	r3, [r3, #0]
    5f4a:	4619      	mov	r1, r3
    5f4c:	68f8      	ldr	r0, [r7, #12]
    5f4e:	4b06      	ldr	r3, [pc, #24]	; (5f68 <_qspi_sync_command_set_ifr+0x80>)
    5f50:	4798      	blx	r3
}
    5f52:	bf00      	nop
    5f54:	3710      	adds	r7, #16
    5f56:	46bd      	mov	sp, r7
    5f58:	bd80      	pop	{r7, pc}
    5f5a:	bf00      	nop
    5f5c:	00005d1d 	.word	0x00005d1d
    5f60:	00005d39 	.word	0x00005d39
    5f64:	00005d6d 	.word	0x00005d6d
    5f68:	00005da5 	.word	0x00005da5

00005f6c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5f6c:	b580      	push	{r7, lr}
    5f6e:	b084      	sub	sp, #16
    5f70:	af00      	add	r7, sp, #0
    5f72:	6078      	str	r0, [r7, #4]
    5f74:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5f76:	687b      	ldr	r3, [r7, #4]
    5f78:	681b      	ldr	r3, [r3, #0]
    5f7a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5f7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5f80:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5f82:	683b      	ldr	r3, [r7, #0]
    5f84:	781b      	ldrb	r3, [r3, #0]
    5f86:	f003 0320 	and.w	r3, r3, #32
    5f8a:	b2db      	uxtb	r3, r3
    5f8c:	2b00      	cmp	r3, #0
    5f8e:	d004      	beq.n	5f9a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5f90:	683b      	ldr	r3, [r7, #0]
    5f92:	689b      	ldr	r3, [r3, #8]
    5f94:	68fa      	ldr	r2, [r7, #12]
    5f96:	4413      	add	r3, r2
    5f98:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5f9a:	68b8      	ldr	r0, [r7, #8]
    5f9c:	4b18      	ldr	r3, [pc, #96]	; (6000 <_qspi_sync_run_transfer+0x94>)
    5f9e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5fa0:	683b      	ldr	r3, [r7, #0]
    5fa2:	691b      	ldr	r3, [r3, #16]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d103      	bne.n	5fb0 <_qspi_sync_run_transfer+0x44>
    5fa8:	683b      	ldr	r3, [r7, #0]
    5faa:	695b      	ldr	r3, [r3, #20]
    5fac:	2b00      	cmp	r3, #0
    5fae:	d001      	beq.n	5fb4 <_qspi_sync_run_transfer+0x48>
    5fb0:	2301      	movs	r3, #1
    5fb2:	e000      	b.n	5fb6 <_qspi_sync_run_transfer+0x4a>
    5fb4:	2300      	movs	r3, #0
    5fb6:	f003 0301 	and.w	r3, r3, #1
    5fba:	b2db      	uxtb	r3, r3
    5fbc:	2282      	movs	r2, #130	; 0x82
    5fbe:	4911      	ldr	r1, [pc, #68]	; (6004 <_qspi_sync_run_transfer+0x98>)
    5fc0:	4618      	mov	r0, r3
    5fc2:	4b11      	ldr	r3, [pc, #68]	; (6008 <_qspi_sync_run_transfer+0x9c>)
    5fc4:	4798      	blx	r3

	if (cmd->tx_buf) {
    5fc6:	683b      	ldr	r3, [r7, #0]
    5fc8:	691b      	ldr	r3, [r3, #16]
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d008      	beq.n	5fe0 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5fce:	683b      	ldr	r3, [r7, #0]
    5fd0:	6919      	ldr	r1, [r3, #16]
    5fd2:	683b      	ldr	r3, [r7, #0]
    5fd4:	68db      	ldr	r3, [r3, #12]
    5fd6:	461a      	mov	r2, r3
    5fd8:	68f8      	ldr	r0, [r7, #12]
    5fda:	4b0c      	ldr	r3, [pc, #48]	; (600c <_qspi_sync_run_transfer+0xa0>)
    5fdc:	4798      	blx	r3
    5fde:	e007      	b.n	5ff0 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5fe0:	683b      	ldr	r3, [r7, #0]
    5fe2:	6958      	ldr	r0, [r3, #20]
    5fe4:	683b      	ldr	r3, [r7, #0]
    5fe6:	68db      	ldr	r3, [r3, #12]
    5fe8:	461a      	mov	r2, r3
    5fea:	68f9      	ldr	r1, [r7, #12]
    5fec:	4b07      	ldr	r3, [pc, #28]	; (600c <_qspi_sync_run_transfer+0xa0>)
    5fee:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5ff0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5ff4:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5ff8:	bf00      	nop
    5ffa:	3710      	adds	r7, #16
    5ffc:	46bd      	mov	sp, r7
    5ffe:	bd80      	pop	{r7, pc}
    6000:	00005dc1 	.word	0x00005dc1
    6004:	000100bc 	.word	0x000100bc
    6008:	00003e69 	.word	0x00003e69
    600c:	00005dd9 	.word	0x00005dd9

00006010 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6010:	b580      	push	{r7, lr}
    6012:	b082      	sub	sp, #8
    6014:	af00      	add	r7, sp, #0
    6016:	6078      	str	r0, [r7, #4]
    6018:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    601a:	6839      	ldr	r1, [r7, #0]
    601c:	6878      	ldr	r0, [r7, #4]
    601e:	4b14      	ldr	r3, [pc, #80]	; (6070 <_qspi_sync_serial_run_command+0x60>)
    6020:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    6022:	683b      	ldr	r3, [r7, #0]
    6024:	781b      	ldrb	r3, [r3, #0]
    6026:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    602a:	b2db      	uxtb	r3, r3
    602c:	2b00      	cmp	r3, #0
    602e:	d003      	beq.n	6038 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    6030:	6839      	ldr	r1, [r7, #0]
    6032:	6878      	ldr	r0, [r7, #4]
    6034:	4b0f      	ldr	r3, [pc, #60]	; (6074 <_qspi_sync_serial_run_command+0x64>)
    6036:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	681b      	ldr	r3, [r3, #0]
    603c:	4618      	mov	r0, r3
    603e:	4b0e      	ldr	r3, [pc, #56]	; (6078 <_qspi_sync_serial_run_command+0x68>)
    6040:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    6042:	bf00      	nop
    6044:	687b      	ldr	r3, [r7, #4]
    6046:	681b      	ldr	r3, [r3, #0]
    6048:	4618      	mov	r0, r3
    604a:	4b0c      	ldr	r3, [pc, #48]	; (607c <_qspi_sync_serial_run_command+0x6c>)
    604c:	4798      	blx	r3
    604e:	4603      	mov	r3, r0
    6050:	f083 0301 	eor.w	r3, r3, #1
    6054:	b2db      	uxtb	r3, r3
    6056:	2b00      	cmp	r3, #0
    6058:	d1f4      	bne.n	6044 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    605a:	687b      	ldr	r3, [r7, #4]
    605c:	681b      	ldr	r3, [r3, #0]
    605e:	4618      	mov	r0, r3
    6060:	4b07      	ldr	r3, [pc, #28]	; (6080 <_qspi_sync_serial_run_command+0x70>)
    6062:	4798      	blx	r3
	return ERR_NONE;
    6064:	2300      	movs	r3, #0
}
    6066:	4618      	mov	r0, r3
    6068:	3708      	adds	r7, #8
    606a:	46bd      	mov	sp, r7
    606c:	bd80      	pop	{r7, pc}
    606e:	bf00      	nop
    6070:	00005ee9 	.word	0x00005ee9
    6074:	00005f6d 	.word	0x00005f6d
    6078:	00005e0d 	.word	0x00005e0d
    607c:	00005c85 	.word	0x00005c85
    6080:	00005cad 	.word	0x00005cad

00006084 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    6084:	b480      	push	{r7}
    6086:	b083      	sub	sp, #12
    6088:	af00      	add	r7, sp, #0
    608a:	6078      	str	r0, [r7, #4]
    608c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    608e:	bf00      	nop
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	691a      	ldr	r2, [r3, #16]
    6094:	683b      	ldr	r3, [r7, #0]
    6096:	4013      	ands	r3, r2
    6098:	2b00      	cmp	r3, #0
    609a:	d1f9      	bne.n	6090 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    609c:	bf00      	nop
    609e:	370c      	adds	r7, #12
    60a0:	46bd      	mov	sp, r7
    60a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    60a6:	4770      	bx	lr

000060a8 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    60a8:	b480      	push	{r7}
    60aa:	b083      	sub	sp, #12
    60ac:	af00      	add	r7, sp, #0
    60ae:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    60b0:	687b      	ldr	r3, [r7, #4]
    60b2:	f44f 7280 	mov.w	r2, #256	; 0x100
    60b6:	819a      	strh	r2, [r3, #12]
}
    60b8:	bf00      	nop
    60ba:	370c      	adds	r7, #12
    60bc:	46bd      	mov	sp, r7
    60be:	f85d 7b04 	ldr.w	r7, [sp], #4
    60c2:	4770      	bx	lr

000060c4 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    60c4:	b480      	push	{r7}
    60c6:	b083      	sub	sp, #12
    60c8:	af00      	add	r7, sp, #0
    60ca:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    60d2:	819a      	strh	r2, [r3, #12]
}
    60d4:	bf00      	nop
    60d6:	370c      	adds	r7, #12
    60d8:	46bd      	mov	sp, r7
    60da:	f85d 7b04 	ldr.w	r7, [sp], #4
    60de:	4770      	bx	lr

000060e0 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    60e0:	b480      	push	{r7}
    60e2:	b083      	sub	sp, #12
    60e4:	af00      	add	r7, sp, #0
    60e6:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    60e8:	687b      	ldr	r3, [r7, #4]
    60ea:	899b      	ldrh	r3, [r3, #12]
    60ec:	b29b      	uxth	r3, r3
}
    60ee:	4618      	mov	r0, r3
    60f0:	370c      	adds	r7, #12
    60f2:	46bd      	mov	sp, r7
    60f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    60f8:	4770      	bx	lr

000060fa <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    60fa:	b480      	push	{r7}
    60fc:	b083      	sub	sp, #12
    60fe:	af00      	add	r7, sp, #0
    6100:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    6102:	687b      	ldr	r3, [r7, #4]
    6104:	895b      	ldrh	r3, [r3, #10]
    6106:	b29b      	uxth	r3, r3
}
    6108:	4618      	mov	r0, r3
    610a:	370c      	adds	r7, #12
    610c:	46bd      	mov	sp, r7
    610e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6112:	4770      	bx	lr

00006114 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    6114:	b580      	push	{r7, lr}
    6116:	b082      	sub	sp, #8
    6118:	af00      	add	r7, sp, #0
    611a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    611c:	687b      	ldr	r3, [r7, #4]
    611e:	881b      	ldrh	r3, [r3, #0]
    6120:	b29b      	uxth	r3, r3
    6122:	f043 0301 	orr.w	r3, r3, #1
    6126:	b29a      	uxth	r2, r3
    6128:	687b      	ldr	r3, [r7, #4]
    612a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    612c:	2101      	movs	r1, #1
    612e:	6878      	ldr	r0, [r7, #4]
    6130:	4b02      	ldr	r3, [pc, #8]	; (613c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    6132:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6134:	bf00      	nop
    6136:	3708      	adds	r7, #8
    6138:	46bd      	mov	sp, r7
    613a:	bd80      	pop	{r7, pc}
    613c:	00006085 	.word	0x00006085

00006140 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6140:	b580      	push	{r7, lr}
    6142:	b084      	sub	sp, #16
    6144:	af00      	add	r7, sp, #0
    6146:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6148:	f248 0103 	movw	r1, #32771	; 0x8003
    614c:	6878      	ldr	r0, [r7, #4]
    614e:	4b0a      	ldr	r3, [pc, #40]	; (6178 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    6150:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6152:	687b      	ldr	r3, [r7, #4]
    6154:	881b      	ldrh	r3, [r3, #0]
    6156:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    6158:	89fb      	ldrh	r3, [r7, #14]
    615a:	085b      	lsrs	r3, r3, #1
    615c:	b29b      	uxth	r3, r3
    615e:	f003 0301 	and.w	r3, r3, #1
    6162:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    6164:	89fb      	ldrh	r3, [r7, #14]
    6166:	2b00      	cmp	r3, #0
    6168:	bf14      	ite	ne
    616a:	2301      	movne	r3, #1
    616c:	2300      	moveq	r3, #0
    616e:	b2db      	uxtb	r3, r3
}
    6170:	4618      	mov	r0, r3
    6172:	3710      	adds	r7, #16
    6174:	46bd      	mov	sp, r7
    6176:	bd80      	pop	{r7, pc}
    6178:	00006085 	.word	0x00006085

0000617c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    617c:	b580      	push	{r7, lr}
    617e:	b082      	sub	sp, #8
    6180:	af00      	add	r7, sp, #0
    6182:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6184:	687b      	ldr	r3, [r7, #4]
    6186:	881b      	ldrh	r3, [r3, #0]
    6188:	b29b      	uxth	r3, r3
    618a:	f023 0302 	bic.w	r3, r3, #2
    618e:	b29a      	uxth	r2, r3
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6194:	f248 0103 	movw	r1, #32771	; 0x8003
    6198:	6878      	ldr	r0, [r7, #4]
    619a:	4b03      	ldr	r3, [pc, #12]	; (61a8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    619c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    619e:	bf00      	nop
    61a0:	3708      	adds	r7, #8
    61a2:	46bd      	mov	sp, r7
    61a4:	bd80      	pop	{r7, pc}
    61a6:	bf00      	nop
    61a8:	00006085 	.word	0x00006085

000061ac <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    61ac:	b580      	push	{r7, lr}
    61ae:	b082      	sub	sp, #8
    61b0:	af00      	add	r7, sp, #0
    61b2:	6078      	str	r0, [r7, #4]
    61b4:	460b      	mov	r3, r1
    61b6:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    61b8:	687b      	ldr	r3, [r7, #4]
    61ba:	887a      	ldrh	r2, [r7, #2]
    61bc:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    61be:	f248 0103 	movw	r1, #32771	; 0x8003
    61c2:	6878      	ldr	r0, [r7, #4]
    61c4:	4b02      	ldr	r3, [pc, #8]	; (61d0 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    61c6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    61c8:	bf00      	nop
    61ca:	3708      	adds	r7, #8
    61cc:	46bd      	mov	sp, r7
    61ce:	bd80      	pop	{r7, pc}
    61d0:	00006085 	.word	0x00006085

000061d4 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    61d4:	b480      	push	{r7}
    61d6:	b083      	sub	sp, #12
    61d8:	af00      	add	r7, sp, #0
    61da:	6078      	str	r0, [r7, #4]
    61dc:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    61de:	687b      	ldr	r3, [r7, #4]
    61e0:	683a      	ldr	r2, [r7, #0]
    61e2:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    61e4:	bf00      	nop
    61e6:	370c      	adds	r7, #12
    61e8:	46bd      	mov	sp, r7
    61ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    61ee:	4770      	bx	lr

000061f0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    61f0:	b580      	push	{r7, lr}
    61f2:	b082      	sub	sp, #8
    61f4:	af00      	add	r7, sp, #0
    61f6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    61f8:	687b      	ldr	r3, [r7, #4]
    61fa:	2b00      	cmp	r3, #0
    61fc:	d005      	beq.n	620a <_calendar_init+0x1a>
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	681b      	ldr	r3, [r3, #0]
    6202:	2b00      	cmp	r3, #0
    6204:	d001      	beq.n	620a <_calendar_init+0x1a>
    6206:	2301      	movs	r3, #1
    6208:	e000      	b.n	620c <_calendar_init+0x1c>
    620a:	2300      	movs	r3, #0
    620c:	f003 0301 	and.w	r3, r3, #1
    6210:	b2db      	uxtb	r3, r3
    6212:	222f      	movs	r2, #47	; 0x2f
    6214:	491b      	ldr	r1, [pc, #108]	; (6284 <_calendar_init+0x94>)
    6216:	4618      	mov	r0, r3
    6218:	4b1b      	ldr	r3, [pc, #108]	; (6288 <_calendar_init+0x98>)
    621a:	4798      	blx	r3

	_rtc_dev = dev;
    621c:	4a1b      	ldr	r2, [pc, #108]	; (628c <_calendar_init+0x9c>)
    621e:	687b      	ldr	r3, [r7, #4]
    6220:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    6222:	687b      	ldr	r3, [r7, #4]
    6224:	681b      	ldr	r3, [r3, #0]
    6226:	4618      	mov	r0, r3
    6228:	4b19      	ldr	r3, [pc, #100]	; (6290 <_calendar_init+0xa0>)
    622a:	4798      	blx	r3
    622c:	4603      	mov	r3, r0
    622e:	2b00      	cmp	r3, #0
    6230:	d00a      	beq.n	6248 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    6232:	687b      	ldr	r3, [r7, #4]
    6234:	681b      	ldr	r3, [r3, #0]
    6236:	4618      	mov	r0, r3
    6238:	4b16      	ldr	r3, [pc, #88]	; (6294 <_calendar_init+0xa4>)
    623a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    623c:	687b      	ldr	r3, [r7, #4]
    623e:	681b      	ldr	r3, [r3, #0]
    6240:	2102      	movs	r1, #2
    6242:	4618      	mov	r0, r3
    6244:	4b14      	ldr	r3, [pc, #80]	; (6298 <_calendar_init+0xa8>)
    6246:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	681b      	ldr	r3, [r3, #0]
    624c:	4618      	mov	r0, r3
    624e:	4b13      	ldr	r3, [pc, #76]	; (629c <_calendar_init+0xac>)
    6250:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6252:	687b      	ldr	r3, [r7, #4]
    6254:	681b      	ldr	r3, [r3, #0]
    6256:	2101      	movs	r1, #1
    6258:	4618      	mov	r0, r3
    625a:	4b0f      	ldr	r3, [pc, #60]	; (6298 <_calendar_init+0xa8>)
    625c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    625e:	687b      	ldr	r3, [r7, #4]
    6260:	681b      	ldr	r3, [r3, #0]
    6262:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    6266:	4618      	mov	r0, r3
    6268:	4b0d      	ldr	r3, [pc, #52]	; (62a0 <_calendar_init+0xb0>)
    626a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    626c:	687b      	ldr	r3, [r7, #4]
    626e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6270:	2100      	movs	r1, #0
    6272:	4618      	mov	r0, r3
    6274:	4b0b      	ldr	r3, [pc, #44]	; (62a4 <_calendar_init+0xb4>)
    6276:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6278:	2300      	movs	r3, #0
}
    627a:	4618      	mov	r0, r3
    627c:	3708      	adds	r7, #8
    627e:	46bd      	mov	sp, r7
    6280:	bd80      	pop	{r7, pc}
    6282:	bf00      	nop
    6284:	000100d4 	.word	0x000100d4
    6288:	00003e69 	.word	0x00003e69
    628c:	20000a5c 	.word	0x20000a5c
    6290:	00006141 	.word	0x00006141
    6294:	0000617d 	.word	0x0000617d
    6298:	00006085 	.word	0x00006085
    629c:	00006115 	.word	0x00006115
    62a0:	000061ad 	.word	0x000061ad
    62a4:	000061d5 	.word	0x000061d5

000062a8 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    62a8:	b580      	push	{r7, lr}
    62aa:	b084      	sub	sp, #16
    62ac:	af00      	add	r7, sp, #0
    62ae:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    62b0:	687b      	ldr	r3, [r7, #4]
    62b2:	681b      	ldr	r3, [r3, #0]
    62b4:	4618      	mov	r0, r3
    62b6:	4b19      	ldr	r3, [pc, #100]	; (631c <_rtc_interrupt_handler+0x74>)
    62b8:	4798      	blx	r3
    62ba:	4603      	mov	r3, r0
    62bc:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    62be:	687b      	ldr	r3, [r7, #4]
    62c0:	681b      	ldr	r3, [r3, #0]
    62c2:	4618      	mov	r0, r3
    62c4:	4b16      	ldr	r3, [pc, #88]	; (6320 <_rtc_interrupt_handler+0x78>)
    62c6:	4798      	blx	r3
    62c8:	4603      	mov	r3, r0
    62ca:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    62cc:	89fa      	ldrh	r2, [r7, #14]
    62ce:	89bb      	ldrh	r3, [r7, #12]
    62d0:	4013      	ands	r3, r2
    62d2:	b29b      	uxth	r3, r3
    62d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    62d8:	2b00      	cmp	r3, #0
    62da:	d009      	beq.n	62f0 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	685b      	ldr	r3, [r3, #4]
    62e0:	6878      	ldr	r0, [r7, #4]
    62e2:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    62e4:	687b      	ldr	r3, [r7, #4]
    62e6:	681b      	ldr	r3, [r3, #0]
    62e8:	4618      	mov	r0, r3
    62ea:	4b0e      	ldr	r3, [pc, #56]	; (6324 <_rtc_interrupt_handler+0x7c>)
    62ec:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    62ee:	e010      	b.n	6312 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    62f0:	89fa      	ldrh	r2, [r7, #14]
    62f2:	89bb      	ldrh	r3, [r7, #12]
    62f4:	4013      	ands	r3, r2
    62f6:	b29b      	uxth	r3, r3
    62f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    62fc:	2b00      	cmp	r3, #0
    62fe:	d008      	beq.n	6312 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    6300:	687b      	ldr	r3, [r7, #4]
    6302:	689b      	ldr	r3, [r3, #8]
    6304:	6878      	ldr	r0, [r7, #4]
    6306:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    6308:	687b      	ldr	r3, [r7, #4]
    630a:	681b      	ldr	r3, [r3, #0]
    630c:	4618      	mov	r0, r3
    630e:	4b06      	ldr	r3, [pc, #24]	; (6328 <_rtc_interrupt_handler+0x80>)
    6310:	4798      	blx	r3
}
    6312:	bf00      	nop
    6314:	3710      	adds	r7, #16
    6316:	46bd      	mov	sp, r7
    6318:	bd80      	pop	{r7, pc}
    631a:	bf00      	nop
    631c:	000060e1 	.word	0x000060e1
    6320:	000060fb 	.word	0x000060fb
    6324:	000060a9 	.word	0x000060a9
    6328:	000060c5 	.word	0x000060c5

0000632c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    632c:	b580      	push	{r7, lr}
    632e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    6330:	4b03      	ldr	r3, [pc, #12]	; (6340 <RTC_Handler+0x14>)
    6332:	681b      	ldr	r3, [r3, #0]
    6334:	4618      	mov	r0, r3
    6336:	4b03      	ldr	r3, [pc, #12]	; (6344 <RTC_Handler+0x18>)
    6338:	4798      	blx	r3
}
    633a:	bf00      	nop
    633c:	bd80      	pop	{r7, pc}
    633e:	bf00      	nop
    6340:	20000a5c 	.word	0x20000a5c
    6344:	000062a9 	.word	0x000062a9

00006348 <__NVIC_EnableIRQ>:
{
    6348:	b480      	push	{r7}
    634a:	b083      	sub	sp, #12
    634c:	af00      	add	r7, sp, #0
    634e:	4603      	mov	r3, r0
    6350:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6356:	2b00      	cmp	r3, #0
    6358:	db0b      	blt.n	6372 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    635a:	4909      	ldr	r1, [pc, #36]	; (6380 <__NVIC_EnableIRQ+0x38>)
    635c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6360:	095b      	lsrs	r3, r3, #5
    6362:	88fa      	ldrh	r2, [r7, #6]
    6364:	f002 021f 	and.w	r2, r2, #31
    6368:	2001      	movs	r0, #1
    636a:	fa00 f202 	lsl.w	r2, r0, r2
    636e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6372:	bf00      	nop
    6374:	370c      	adds	r7, #12
    6376:	46bd      	mov	sp, r7
    6378:	f85d 7b04 	ldr.w	r7, [sp], #4
    637c:	4770      	bx	lr
    637e:	bf00      	nop
    6380:	e000e100 	.word	0xe000e100

00006384 <__NVIC_DisableIRQ>:
{
    6384:	b480      	push	{r7}
    6386:	b083      	sub	sp, #12
    6388:	af00      	add	r7, sp, #0
    638a:	4603      	mov	r3, r0
    638c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    638e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6392:	2b00      	cmp	r3, #0
    6394:	db10      	blt.n	63b8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6396:	490b      	ldr	r1, [pc, #44]	; (63c4 <__NVIC_DisableIRQ+0x40>)
    6398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    639c:	095b      	lsrs	r3, r3, #5
    639e:	88fa      	ldrh	r2, [r7, #6]
    63a0:	f002 021f 	and.w	r2, r2, #31
    63a4:	2001      	movs	r0, #1
    63a6:	fa00 f202 	lsl.w	r2, r0, r2
    63aa:	3320      	adds	r3, #32
    63ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    63b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    63b4:	f3bf 8f6f 	isb	sy
}
    63b8:	bf00      	nop
    63ba:	370c      	adds	r7, #12
    63bc:	46bd      	mov	sp, r7
    63be:	f85d 7b04 	ldr.w	r7, [sp], #4
    63c2:	4770      	bx	lr
    63c4:	e000e100 	.word	0xe000e100

000063c8 <__NVIC_ClearPendingIRQ>:
{
    63c8:	b480      	push	{r7}
    63ca:	b083      	sub	sp, #12
    63cc:	af00      	add	r7, sp, #0
    63ce:	4603      	mov	r3, r0
    63d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    63d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    63d6:	2b00      	cmp	r3, #0
    63d8:	db0c      	blt.n	63f4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    63da:	4909      	ldr	r1, [pc, #36]	; (6400 <__NVIC_ClearPendingIRQ+0x38>)
    63dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    63e0:	095b      	lsrs	r3, r3, #5
    63e2:	88fa      	ldrh	r2, [r7, #6]
    63e4:	f002 021f 	and.w	r2, r2, #31
    63e8:	2001      	movs	r0, #1
    63ea:	fa00 f202 	lsl.w	r2, r0, r2
    63ee:	3360      	adds	r3, #96	; 0x60
    63f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    63f4:	bf00      	nop
    63f6:	370c      	adds	r7, #12
    63f8:	46bd      	mov	sp, r7
    63fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    63fe:	4770      	bx	lr
    6400:	e000e100 	.word	0xe000e100

00006404 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6404:	b480      	push	{r7}
    6406:	b083      	sub	sp, #12
    6408:	af00      	add	r7, sp, #0
    640a:	6078      	str	r0, [r7, #4]
    640c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    640e:	bf00      	nop
    6410:	687b      	ldr	r3, [r7, #4]
    6412:	69da      	ldr	r2, [r3, #28]
    6414:	683b      	ldr	r3, [r7, #0]
    6416:	4013      	ands	r3, r2
    6418:	2b00      	cmp	r3, #0
    641a:	d1f9      	bne.n	6410 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    641c:	bf00      	nop
    641e:	370c      	adds	r7, #12
    6420:	46bd      	mov	sp, r7
    6422:	f85d 7b04 	ldr.w	r7, [sp], #4
    6426:	4770      	bx	lr

00006428 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6428:	b480      	push	{r7}
    642a:	b083      	sub	sp, #12
    642c:	af00      	add	r7, sp, #0
    642e:	6078      	str	r0, [r7, #4]
    6430:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6432:	687b      	ldr	r3, [r7, #4]
    6434:	69da      	ldr	r2, [r3, #28]
    6436:	683b      	ldr	r3, [r7, #0]
    6438:	4013      	ands	r3, r2
    643a:	2b00      	cmp	r3, #0
    643c:	bf14      	ite	ne
    643e:	2301      	movne	r3, #1
    6440:	2300      	moveq	r3, #0
    6442:	b2db      	uxtb	r3, r3
}
    6444:	4618      	mov	r0, r3
    6446:	370c      	adds	r7, #12
    6448:	46bd      	mov	sp, r7
    644a:	f85d 7b04 	ldr.w	r7, [sp], #4
    644e:	4770      	bx	lr

00006450 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6450:	b480      	push	{r7}
    6452:	b083      	sub	sp, #12
    6454:	af00      	add	r7, sp, #0
    6456:	6078      	str	r0, [r7, #4]
    6458:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    645a:	bf00      	nop
    645c:	687b      	ldr	r3, [r7, #4]
    645e:	69da      	ldr	r2, [r3, #28]
    6460:	683b      	ldr	r3, [r7, #0]
    6462:	4013      	ands	r3, r2
    6464:	2b00      	cmp	r3, #0
    6466:	d1f9      	bne.n	645c <hri_sercomspi_wait_for_sync+0xc>
	};
}
    6468:	bf00      	nop
    646a:	370c      	adds	r7, #12
    646c:	46bd      	mov	sp, r7
    646e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6472:	4770      	bx	lr

00006474 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6474:	b480      	push	{r7}
    6476:	b083      	sub	sp, #12
    6478:	af00      	add	r7, sp, #0
    647a:	6078      	str	r0, [r7, #4]
    647c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    647e:	687b      	ldr	r3, [r7, #4]
    6480:	69da      	ldr	r2, [r3, #28]
    6482:	683b      	ldr	r3, [r7, #0]
    6484:	4013      	ands	r3, r2
    6486:	2b00      	cmp	r3, #0
    6488:	bf14      	ite	ne
    648a:	2301      	movne	r3, #1
    648c:	2300      	moveq	r3, #0
    648e:	b2db      	uxtb	r3, r3
}
    6490:	4618      	mov	r0, r3
    6492:	370c      	adds	r7, #12
    6494:	46bd      	mov	sp, r7
    6496:	f85d 7b04 	ldr.w	r7, [sp], #4
    649a:	4770      	bx	lr

0000649c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    649c:	b480      	push	{r7}
    649e:	b083      	sub	sp, #12
    64a0:	af00      	add	r7, sp, #0
    64a2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    64a4:	687b      	ldr	r3, [r7, #4]
    64a6:	2201      	movs	r2, #1
    64a8:	761a      	strb	r2, [r3, #24]
}
    64aa:	bf00      	nop
    64ac:	370c      	adds	r7, #12
    64ae:	46bd      	mov	sp, r7
    64b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    64b4:	4770      	bx	lr

000064b6 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    64b6:	b480      	push	{r7}
    64b8:	b083      	sub	sp, #12
    64ba:	af00      	add	r7, sp, #0
    64bc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    64be:	687b      	ldr	r3, [r7, #4]
    64c0:	2202      	movs	r2, #2
    64c2:	761a      	strb	r2, [r3, #24]
}
    64c4:	bf00      	nop
    64c6:	370c      	adds	r7, #12
    64c8:	46bd      	mov	sp, r7
    64ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ce:	4770      	bx	lr

000064d0 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    64d0:	b480      	push	{r7}
    64d2:	b083      	sub	sp, #12
    64d4:	af00      	add	r7, sp, #0
    64d6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    64d8:	687b      	ldr	r3, [r7, #4]
    64da:	7e1b      	ldrb	r3, [r3, #24]
    64dc:	b2db      	uxtb	r3, r3
}
    64de:	4618      	mov	r0, r3
    64e0:	370c      	adds	r7, #12
    64e2:	46bd      	mov	sp, r7
    64e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    64e8:	4770      	bx	lr

000064ea <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    64ea:	b480      	push	{r7}
    64ec:	b083      	sub	sp, #12
    64ee:	af00      	add	r7, sp, #0
    64f0:	6078      	str	r0, [r7, #4]
    64f2:	460b      	mov	r3, r1
    64f4:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    64f6:	687b      	ldr	r3, [r7, #4]
    64f8:	78fa      	ldrb	r2, [r7, #3]
    64fa:	761a      	strb	r2, [r3, #24]
}
    64fc:	bf00      	nop
    64fe:	370c      	adds	r7, #12
    6500:	46bd      	mov	sp, r7
    6502:	f85d 7b04 	ldr.w	r7, [sp], #4
    6506:	4770      	bx	lr

00006508 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6508:	b480      	push	{r7}
    650a:	b085      	sub	sp, #20
    650c:	af00      	add	r7, sp, #0
    650e:	6078      	str	r0, [r7, #4]
    6510:	460b      	mov	r3, r1
    6512:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    6514:	687b      	ldr	r3, [r7, #4]
    6516:	7e1b      	ldrb	r3, [r3, #24]
    6518:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    651a:	7bfa      	ldrb	r2, [r7, #15]
    651c:	78fb      	ldrb	r3, [r7, #3]
    651e:	4013      	ands	r3, r2
    6520:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6522:	7bfb      	ldrb	r3, [r7, #15]
}
    6524:	4618      	mov	r0, r3
    6526:	3714      	adds	r7, #20
    6528:	46bd      	mov	sp, r7
    652a:	f85d 7b04 	ldr.w	r7, [sp], #4
    652e:	4770      	bx	lr

00006530 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6530:	b480      	push	{r7}
    6532:	b083      	sub	sp, #12
    6534:	af00      	add	r7, sp, #0
    6536:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6538:	687b      	ldr	r3, [r7, #4]
    653a:	7e1b      	ldrb	r3, [r3, #24]
    653c:	b2db      	uxtb	r3, r3
}
    653e:	4618      	mov	r0, r3
    6540:	370c      	adds	r7, #12
    6542:	46bd      	mov	sp, r7
    6544:	f85d 7b04 	ldr.w	r7, [sp], #4
    6548:	4770      	bx	lr

0000654a <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    654a:	b480      	push	{r7}
    654c:	b083      	sub	sp, #12
    654e:	af00      	add	r7, sp, #0
    6550:	6078      	str	r0, [r7, #4]
    6552:	460b      	mov	r3, r1
    6554:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6556:	687b      	ldr	r3, [r7, #4]
    6558:	78fa      	ldrb	r2, [r7, #3]
    655a:	761a      	strb	r2, [r3, #24]
}
    655c:	bf00      	nop
    655e:	370c      	adds	r7, #12
    6560:	46bd      	mov	sp, r7
    6562:	f85d 7b04 	ldr.w	r7, [sp], #4
    6566:	4770      	bx	lr

00006568 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6568:	b580      	push	{r7, lr}
    656a:	b082      	sub	sp, #8
    656c:	af00      	add	r7, sp, #0
    656e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6570:	687b      	ldr	r3, [r7, #4]
    6572:	681b      	ldr	r3, [r3, #0]
    6574:	f043 0202 	orr.w	r2, r3, #2
    6578:	687b      	ldr	r3, [r7, #4]
    657a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    657c:	2103      	movs	r1, #3
    657e:	6878      	ldr	r0, [r7, #4]
    6580:	4b02      	ldr	r3, [pc, #8]	; (658c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    6582:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6584:	bf00      	nop
    6586:	3708      	adds	r7, #8
    6588:	46bd      	mov	sp, r7
    658a:	bd80      	pop	{r7, pc}
    658c:	00006405 	.word	0x00006405

00006590 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6590:	b580      	push	{r7, lr}
    6592:	b082      	sub	sp, #8
    6594:	af00      	add	r7, sp, #0
    6596:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6598:	687b      	ldr	r3, [r7, #4]
    659a:	681b      	ldr	r3, [r3, #0]
    659c:	f023 0202 	bic.w	r2, r3, #2
    65a0:	687b      	ldr	r3, [r7, #4]
    65a2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    65a4:	2103      	movs	r1, #3
    65a6:	6878      	ldr	r0, [r7, #4]
    65a8:	4b02      	ldr	r3, [pc, #8]	; (65b4 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    65aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65ac:	bf00      	nop
    65ae:	3708      	adds	r7, #8
    65b0:	46bd      	mov	sp, r7
    65b2:	bd80      	pop	{r7, pc}
    65b4:	00006405 	.word	0x00006405

000065b8 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    65b8:	b480      	push	{r7}
    65ba:	b085      	sub	sp, #20
    65bc:	af00      	add	r7, sp, #0
    65be:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    65c0:	687b      	ldr	r3, [r7, #4]
    65c2:	681b      	ldr	r3, [r3, #0]
    65c4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    65c6:	68fb      	ldr	r3, [r7, #12]
    65c8:	0edb      	lsrs	r3, r3, #27
    65ca:	f003 0301 	and.w	r3, r3, #1
    65ce:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    65d0:	68fb      	ldr	r3, [r7, #12]
    65d2:	2b00      	cmp	r3, #0
    65d4:	bf14      	ite	ne
    65d6:	2301      	movne	r3, #1
    65d8:	2300      	moveq	r3, #0
    65da:	b2db      	uxtb	r3, r3
}
    65dc:	4618      	mov	r0, r3
    65de:	3714      	adds	r7, #20
    65e0:	46bd      	mov	sp, r7
    65e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    65e6:	4770      	bx	lr

000065e8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    65e8:	b580      	push	{r7, lr}
    65ea:	b084      	sub	sp, #16
    65ec:	af00      	add	r7, sp, #0
    65ee:	6078      	str	r0, [r7, #4]
    65f0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    65f2:	2103      	movs	r1, #3
    65f4:	6878      	ldr	r0, [r7, #4]
    65f6:	4b07      	ldr	r3, [pc, #28]	; (6614 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    65f8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    65fa:	687b      	ldr	r3, [r7, #4]
    65fc:	681b      	ldr	r3, [r3, #0]
    65fe:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6600:	68fa      	ldr	r2, [r7, #12]
    6602:	683b      	ldr	r3, [r7, #0]
    6604:	4013      	ands	r3, r2
    6606:	60fb      	str	r3, [r7, #12]
	return tmp;
    6608:	68fb      	ldr	r3, [r7, #12]
}
    660a:	4618      	mov	r0, r3
    660c:	3710      	adds	r7, #16
    660e:	46bd      	mov	sp, r7
    6610:	bd80      	pop	{r7, pc}
    6612:	bf00      	nop
    6614:	00006405 	.word	0x00006405

00006618 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6618:	b580      	push	{r7, lr}
    661a:	b082      	sub	sp, #8
    661c:	af00      	add	r7, sp, #0
    661e:	6078      	str	r0, [r7, #4]
    6620:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6622:	687b      	ldr	r3, [r7, #4]
    6624:	683a      	ldr	r2, [r7, #0]
    6626:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6628:	2103      	movs	r1, #3
    662a:	6878      	ldr	r0, [r7, #4]
    662c:	4b02      	ldr	r3, [pc, #8]	; (6638 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    662e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6630:	bf00      	nop
    6632:	3708      	adds	r7, #8
    6634:	46bd      	mov	sp, r7
    6636:	bd80      	pop	{r7, pc}
    6638:	00006405 	.word	0x00006405

0000663c <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    663c:	b580      	push	{r7, lr}
    663e:	b082      	sub	sp, #8
    6640:	af00      	add	r7, sp, #0
    6642:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6644:	687b      	ldr	r3, [r7, #4]
    6646:	681b      	ldr	r3, [r3, #0]
    6648:	f043 0202 	orr.w	r2, r3, #2
    664c:	687b      	ldr	r3, [r7, #4]
    664e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6650:	2103      	movs	r1, #3
    6652:	6878      	ldr	r0, [r7, #4]
    6654:	4b02      	ldr	r3, [pc, #8]	; (6660 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    6656:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6658:	bf00      	nop
    665a:	3708      	adds	r7, #8
    665c:	46bd      	mov	sp, r7
    665e:	bd80      	pop	{r7, pc}
    6660:	00006451 	.word	0x00006451

00006664 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6664:	b580      	push	{r7, lr}
    6666:	b084      	sub	sp, #16
    6668:	af00      	add	r7, sp, #0
    666a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    666c:	2103      	movs	r1, #3
    666e:	6878      	ldr	r0, [r7, #4]
    6670:	4b09      	ldr	r3, [pc, #36]	; (6698 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    6672:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6674:	687b      	ldr	r3, [r7, #4]
    6676:	681b      	ldr	r3, [r3, #0]
    6678:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    667a:	68fb      	ldr	r3, [r7, #12]
    667c:	085b      	lsrs	r3, r3, #1
    667e:	f003 0301 	and.w	r3, r3, #1
    6682:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6684:	68fb      	ldr	r3, [r7, #12]
    6686:	2b00      	cmp	r3, #0
    6688:	bf14      	ite	ne
    668a:	2301      	movne	r3, #1
    668c:	2300      	moveq	r3, #0
    668e:	b2db      	uxtb	r3, r3
}
    6690:	4618      	mov	r0, r3
    6692:	3710      	adds	r7, #16
    6694:	46bd      	mov	sp, r7
    6696:	bd80      	pop	{r7, pc}
    6698:	00006451 	.word	0x00006451

0000669c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    669c:	b580      	push	{r7, lr}
    669e:	b082      	sub	sp, #8
    66a0:	af00      	add	r7, sp, #0
    66a2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    66a4:	687b      	ldr	r3, [r7, #4]
    66a6:	681b      	ldr	r3, [r3, #0]
    66a8:	f023 0202 	bic.w	r2, r3, #2
    66ac:	687b      	ldr	r3, [r7, #4]
    66ae:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    66b0:	2103      	movs	r1, #3
    66b2:	6878      	ldr	r0, [r7, #4]
    66b4:	4b02      	ldr	r3, [pc, #8]	; (66c0 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    66b6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66b8:	bf00      	nop
    66ba:	3708      	adds	r7, #8
    66bc:	46bd      	mov	sp, r7
    66be:	bd80      	pop	{r7, pc}
    66c0:	00006451 	.word	0x00006451

000066c4 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    66c4:	b580      	push	{r7, lr}
    66c6:	b084      	sub	sp, #16
    66c8:	af00      	add	r7, sp, #0
    66ca:	6078      	str	r0, [r7, #4]
    66cc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    66ce:	2103      	movs	r1, #3
    66d0:	6878      	ldr	r0, [r7, #4]
    66d2:	4b07      	ldr	r3, [pc, #28]	; (66f0 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    66d4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    66d6:	687b      	ldr	r3, [r7, #4]
    66d8:	681b      	ldr	r3, [r3, #0]
    66da:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    66dc:	68fa      	ldr	r2, [r7, #12]
    66de:	683b      	ldr	r3, [r7, #0]
    66e0:	4013      	ands	r3, r2
    66e2:	60fb      	str	r3, [r7, #12]
	return tmp;
    66e4:	68fb      	ldr	r3, [r7, #12]
}
    66e6:	4618      	mov	r0, r3
    66e8:	3710      	adds	r7, #16
    66ea:	46bd      	mov	sp, r7
    66ec:	bd80      	pop	{r7, pc}
    66ee:	bf00      	nop
    66f0:	00006451 	.word	0x00006451

000066f4 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    66f4:	b580      	push	{r7, lr}
    66f6:	b082      	sub	sp, #8
    66f8:	af00      	add	r7, sp, #0
    66fa:	6078      	str	r0, [r7, #4]
    66fc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    66fe:	687b      	ldr	r3, [r7, #4]
    6700:	683a      	ldr	r2, [r7, #0]
    6702:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6704:	2103      	movs	r1, #3
    6706:	6878      	ldr	r0, [r7, #4]
    6708:	4b02      	ldr	r3, [pc, #8]	; (6714 <hri_sercomspi_write_CTRLA_reg+0x20>)
    670a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    670c:	bf00      	nop
    670e:	3708      	adds	r7, #8
    6710:	46bd      	mov	sp, r7
    6712:	bd80      	pop	{r7, pc}
    6714:	00006451 	.word	0x00006451

00006718 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6718:	b580      	push	{r7, lr}
    671a:	b082      	sub	sp, #8
    671c:	af00      	add	r7, sp, #0
    671e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6720:	687b      	ldr	r3, [r7, #4]
    6722:	685b      	ldr	r3, [r3, #4]
    6724:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6728:	687b      	ldr	r3, [r7, #4]
    672a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    672c:	2104      	movs	r1, #4
    672e:	6878      	ldr	r0, [r7, #4]
    6730:	4b02      	ldr	r3, [pc, #8]	; (673c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    6732:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6734:	bf00      	nop
    6736:	3708      	adds	r7, #8
    6738:	46bd      	mov	sp, r7
    673a:	bd80      	pop	{r7, pc}
    673c:	00006405 	.word	0x00006405

00006740 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6740:	b580      	push	{r7, lr}
    6742:	b082      	sub	sp, #8
    6744:	af00      	add	r7, sp, #0
    6746:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6748:	687b      	ldr	r3, [r7, #4]
    674a:	685b      	ldr	r3, [r3, #4]
    674c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6750:	687b      	ldr	r3, [r7, #4]
    6752:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6754:	2104      	movs	r1, #4
    6756:	6878      	ldr	r0, [r7, #4]
    6758:	4b02      	ldr	r3, [pc, #8]	; (6764 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    675a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    675c:	bf00      	nop
    675e:	3708      	adds	r7, #8
    6760:	46bd      	mov	sp, r7
    6762:	bd80      	pop	{r7, pc}
    6764:	00006405 	.word	0x00006405

00006768 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6768:	b580      	push	{r7, lr}
    676a:	b082      	sub	sp, #8
    676c:	af00      	add	r7, sp, #0
    676e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6770:	687b      	ldr	r3, [r7, #4]
    6772:	685b      	ldr	r3, [r3, #4]
    6774:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6778:	687b      	ldr	r3, [r7, #4]
    677a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    677c:	2104      	movs	r1, #4
    677e:	6878      	ldr	r0, [r7, #4]
    6780:	4b02      	ldr	r3, [pc, #8]	; (678c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    6782:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6784:	bf00      	nop
    6786:	3708      	adds	r7, #8
    6788:	46bd      	mov	sp, r7
    678a:	bd80      	pop	{r7, pc}
    678c:	00006405 	.word	0x00006405

00006790 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6790:	b580      	push	{r7, lr}
    6792:	b082      	sub	sp, #8
    6794:	af00      	add	r7, sp, #0
    6796:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6798:	687b      	ldr	r3, [r7, #4]
    679a:	685b      	ldr	r3, [r3, #4]
    679c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    67a0:	687b      	ldr	r3, [r7, #4]
    67a2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    67a4:	2104      	movs	r1, #4
    67a6:	6878      	ldr	r0, [r7, #4]
    67a8:	4b02      	ldr	r3, [pc, #8]	; (67b4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    67aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67ac:	bf00      	nop
    67ae:	3708      	adds	r7, #8
    67b0:	46bd      	mov	sp, r7
    67b2:	bd80      	pop	{r7, pc}
    67b4:	00006405 	.word	0x00006405

000067b8 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    67b8:	b580      	push	{r7, lr}
    67ba:	b082      	sub	sp, #8
    67bc:	af00      	add	r7, sp, #0
    67be:	6078      	str	r0, [r7, #4]
    67c0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    67c2:	687b      	ldr	r3, [r7, #4]
    67c4:	685a      	ldr	r2, [r3, #4]
    67c6:	683b      	ldr	r3, [r7, #0]
    67c8:	041b      	lsls	r3, r3, #16
    67ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    67ce:	431a      	orrs	r2, r3
    67d0:	687b      	ldr	r3, [r7, #4]
    67d2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    67d4:	2104      	movs	r1, #4
    67d6:	6878      	ldr	r0, [r7, #4]
    67d8:	4b02      	ldr	r3, [pc, #8]	; (67e4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    67da:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67dc:	bf00      	nop
    67de:	3708      	adds	r7, #8
    67e0:	46bd      	mov	sp, r7
    67e2:	bd80      	pop	{r7, pc}
    67e4:	00006405 	.word	0x00006405

000067e8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    67e8:	b580      	push	{r7, lr}
    67ea:	b082      	sub	sp, #8
    67ec:	af00      	add	r7, sp, #0
    67ee:	6078      	str	r0, [r7, #4]
    67f0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    67f2:	687b      	ldr	r3, [r7, #4]
    67f4:	683a      	ldr	r2, [r7, #0]
    67f6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    67f8:	2104      	movs	r1, #4
    67fa:	6878      	ldr	r0, [r7, #4]
    67fc:	4b02      	ldr	r3, [pc, #8]	; (6808 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    67fe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6800:	bf00      	nop
    6802:	3708      	adds	r7, #8
    6804:	46bd      	mov	sp, r7
    6806:	bd80      	pop	{r7, pc}
    6808:	00006405 	.word	0x00006405

0000680c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    680c:	b580      	push	{r7, lr}
    680e:	b082      	sub	sp, #8
    6810:	af00      	add	r7, sp, #0
    6812:	6078      	str	r0, [r7, #4]
    6814:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6816:	687b      	ldr	r3, [r7, #4]
    6818:	683a      	ldr	r2, [r7, #0]
    681a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    681c:	2117      	movs	r1, #23
    681e:	6878      	ldr	r0, [r7, #4]
    6820:	4b02      	ldr	r3, [pc, #8]	; (682c <hri_sercomspi_write_CTRLB_reg+0x20>)
    6822:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6824:	bf00      	nop
    6826:	3708      	adds	r7, #8
    6828:	46bd      	mov	sp, r7
    682a:	bd80      	pop	{r7, pc}
    682c:	00006451 	.word	0x00006451

00006830 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6830:	b480      	push	{r7}
    6832:	b083      	sub	sp, #12
    6834:	af00      	add	r7, sp, #0
    6836:	6078      	str	r0, [r7, #4]
    6838:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    683a:	687b      	ldr	r3, [r7, #4]
    683c:	683a      	ldr	r2, [r7, #0]
    683e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6840:	bf00      	nop
    6842:	370c      	adds	r7, #12
    6844:	46bd      	mov	sp, r7
    6846:	f85d 7b04 	ldr.w	r7, [sp], #4
    684a:	4770      	bx	lr

0000684c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    684c:	b480      	push	{r7}
    684e:	b083      	sub	sp, #12
    6850:	af00      	add	r7, sp, #0
    6852:	6078      	str	r0, [r7, #4]
    6854:	460b      	mov	r3, r1
    6856:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6858:	687b      	ldr	r3, [r7, #4]
    685a:	78fa      	ldrb	r2, [r7, #3]
    685c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    685e:	bf00      	nop
    6860:	370c      	adds	r7, #12
    6862:	46bd      	mov	sp, r7
    6864:	f85d 7b04 	ldr.w	r7, [sp], #4
    6868:	4770      	bx	lr
	...

0000686c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    686c:	b580      	push	{r7, lr}
    686e:	b084      	sub	sp, #16
    6870:	af00      	add	r7, sp, #0
    6872:	6078      	str	r0, [r7, #4]
    6874:	460b      	mov	r3, r1
    6876:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6878:	687b      	ldr	r3, [r7, #4]
    687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    687c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    687e:	68fb      	ldr	r3, [r7, #12]
    6880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6884:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6886:	78fb      	ldrb	r3, [r7, #3]
    6888:	039b      	lsls	r3, r3, #14
    688a:	461a      	mov	r2, r3
    688c:	68fb      	ldr	r3, [r7, #12]
    688e:	4313      	orrs	r3, r2
    6890:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6892:	687b      	ldr	r3, [r7, #4]
    6894:	68fa      	ldr	r2, [r7, #12]
    6896:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6898:	2104      	movs	r1, #4
    689a:	6878      	ldr	r0, [r7, #4]
    689c:	4b02      	ldr	r3, [pc, #8]	; (68a8 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    689e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68a0:	bf00      	nop
    68a2:	3710      	adds	r7, #16
    68a4:	46bd      	mov	sp, r7
    68a6:	bd80      	pop	{r7, pc}
    68a8:	00006405 	.word	0x00006405

000068ac <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    68ac:	b580      	push	{r7, lr}
    68ae:	b082      	sub	sp, #8
    68b0:	af00      	add	r7, sp, #0
    68b2:	6078      	str	r0, [r7, #4]
    68b4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    68b6:	687b      	ldr	r3, [r7, #4]
    68b8:	683a      	ldr	r2, [r7, #0]
    68ba:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68bc:	2104      	movs	r1, #4
    68be:	6878      	ldr	r0, [r7, #4]
    68c0:	4b02      	ldr	r3, [pc, #8]	; (68cc <hri_sercomi2cm_write_ADDR_reg+0x20>)
    68c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68c4:	bf00      	nop
    68c6:	3708      	adds	r7, #8
    68c8:	46bd      	mov	sp, r7
    68ca:	bd80      	pop	{r7, pc}
    68cc:	00006405 	.word	0x00006405

000068d0 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    68d0:	b580      	push	{r7, lr}
    68d2:	b082      	sub	sp, #8
    68d4:	af00      	add	r7, sp, #0
    68d6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68d8:	2104      	movs	r1, #4
    68da:	6878      	ldr	r0, [r7, #4]
    68dc:	4b03      	ldr	r3, [pc, #12]	; (68ec <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    68de:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    68e0:	687b      	ldr	r3, [r7, #4]
    68e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    68e4:	4618      	mov	r0, r3
    68e6:	3708      	adds	r7, #8
    68e8:	46bd      	mov	sp, r7
    68ea:	bd80      	pop	{r7, pc}
    68ec:	00006405 	.word	0x00006405

000068f0 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    68f0:	b480      	push	{r7}
    68f2:	b083      	sub	sp, #12
    68f4:	af00      	add	r7, sp, #0
    68f6:	6078      	str	r0, [r7, #4]
    68f8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    68fa:	687b      	ldr	r3, [r7, #4]
    68fc:	683a      	ldr	r2, [r7, #0]
    68fe:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6900:	bf00      	nop
    6902:	370c      	adds	r7, #12
    6904:	46bd      	mov	sp, r7
    6906:	f85d 7b04 	ldr.w	r7, [sp], #4
    690a:	4770      	bx	lr

0000690c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    690c:	b580      	push	{r7, lr}
    690e:	b082      	sub	sp, #8
    6910:	af00      	add	r7, sp, #0
    6912:	6078      	str	r0, [r7, #4]
    6914:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6916:	687b      	ldr	r3, [r7, #4]
    6918:	683a      	ldr	r2, [r7, #0]
    691a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    691c:	2104      	movs	r1, #4
    691e:	6878      	ldr	r0, [r7, #4]
    6920:	4b02      	ldr	r3, [pc, #8]	; (692c <hri_sercomi2cm_write_DATA_reg+0x20>)
    6922:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6924:	bf00      	nop
    6926:	3708      	adds	r7, #8
    6928:	46bd      	mov	sp, r7
    692a:	bd80      	pop	{r7, pc}
    692c:	00006405 	.word	0x00006405

00006930 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6930:	b580      	push	{r7, lr}
    6932:	b082      	sub	sp, #8
    6934:	af00      	add	r7, sp, #0
    6936:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6938:	2104      	movs	r1, #4
    693a:	6878      	ldr	r0, [r7, #4]
    693c:	4b03      	ldr	r3, [pc, #12]	; (694c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    693e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6940:	687b      	ldr	r3, [r7, #4]
    6942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6944:	4618      	mov	r0, r3
    6946:	3708      	adds	r7, #8
    6948:	46bd      	mov	sp, r7
    694a:	bd80      	pop	{r7, pc}
    694c:	00006405 	.word	0x00006405

00006950 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6950:	b480      	push	{r7}
    6952:	b083      	sub	sp, #12
    6954:	af00      	add	r7, sp, #0
    6956:	6078      	str	r0, [r7, #4]
    6958:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    695a:	687b      	ldr	r3, [r7, #4]
    695c:	683a      	ldr	r2, [r7, #0]
    695e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6960:	bf00      	nop
    6962:	370c      	adds	r7, #12
    6964:	46bd      	mov	sp, r7
    6966:	f85d 7b04 	ldr.w	r7, [sp], #4
    696a:	4770      	bx	lr

0000696c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    696c:	b480      	push	{r7}
    696e:	b083      	sub	sp, #12
    6970:	af00      	add	r7, sp, #0
    6972:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6974:	687b      	ldr	r3, [r7, #4]
    6976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6978:	4618      	mov	r0, r3
    697a:	370c      	adds	r7, #12
    697c:	46bd      	mov	sp, r7
    697e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6982:	4770      	bx	lr

00006984 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6984:	b480      	push	{r7}
    6986:	b083      	sub	sp, #12
    6988:	af00      	add	r7, sp, #0
    698a:	6078      	str	r0, [r7, #4]
    698c:	460b      	mov	r3, r1
    698e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6990:	687b      	ldr	r3, [r7, #4]
    6992:	78fa      	ldrb	r2, [r7, #3]
    6994:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6998:	bf00      	nop
    699a:	370c      	adds	r7, #12
    699c:	46bd      	mov	sp, r7
    699e:	f85d 7b04 	ldr.w	r7, [sp], #4
    69a2:	4770      	bx	lr

000069a4 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    69a4:	b480      	push	{r7}
    69a6:	b083      	sub	sp, #12
    69a8:	af00      	add	r7, sp, #0
    69aa:	6078      	str	r0, [r7, #4]
    69ac:	460b      	mov	r3, r1
    69ae:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    69b0:	687b      	ldr	r3, [r7, #4]
    69b2:	887a      	ldrh	r2, [r7, #2]
    69b4:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69b6:	bf00      	nop
    69b8:	370c      	adds	r7, #12
    69ba:	46bd      	mov	sp, r7
    69bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    69c0:	4770      	bx	lr
	...

000069c4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    69c4:	b580      	push	{r7, lr}
    69c6:	b082      	sub	sp, #8
    69c8:	af00      	add	r7, sp, #0
    69ca:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    69cc:	2104      	movs	r1, #4
    69ce:	6878      	ldr	r0, [r7, #4]
    69d0:	4b06      	ldr	r3, [pc, #24]	; (69ec <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    69d2:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    69d4:	687b      	ldr	r3, [r7, #4]
    69d6:	8b5b      	ldrh	r3, [r3, #26]
    69d8:	b29b      	uxth	r3, r3
    69da:	091b      	lsrs	r3, r3, #4
    69dc:	b29b      	uxth	r3, r3
    69de:	f003 0303 	and.w	r3, r3, #3
    69e2:	b29b      	uxth	r3, r3
}
    69e4:	4618      	mov	r0, r3
    69e6:	3708      	adds	r7, #8
    69e8:	46bd      	mov	sp, r7
    69ea:	bd80      	pop	{r7, pc}
    69ec:	00006405 	.word	0x00006405

000069f0 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    69f0:	b580      	push	{r7, lr}
    69f2:	b082      	sub	sp, #8
    69f4:	af00      	add	r7, sp, #0
    69f6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    69f8:	2104      	movs	r1, #4
    69fa:	6878      	ldr	r0, [r7, #4]
    69fc:	4b04      	ldr	r3, [pc, #16]	; (6a10 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    69fe:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6a00:	687b      	ldr	r3, [r7, #4]
    6a02:	8b5b      	ldrh	r3, [r3, #26]
    6a04:	b29b      	uxth	r3, r3
}
    6a06:	4618      	mov	r0, r3
    6a08:	3708      	adds	r7, #8
    6a0a:	46bd      	mov	sp, r7
    6a0c:	bd80      	pop	{r7, pc}
    6a0e:	bf00      	nop
    6a10:	00006405 	.word	0x00006405

00006a14 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6a14:	b580      	push	{r7, lr}
    6a16:	b082      	sub	sp, #8
    6a18:	af00      	add	r7, sp, #0
    6a1a:	6078      	str	r0, [r7, #4]
    6a1c:	460b      	mov	r3, r1
    6a1e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6a20:	687b      	ldr	r3, [r7, #4]
    6a22:	887a      	ldrh	r2, [r7, #2]
    6a24:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a26:	2104      	movs	r1, #4
    6a28:	6878      	ldr	r0, [r7, #4]
    6a2a:	4b03      	ldr	r3, [pc, #12]	; (6a38 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6a2c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a2e:	bf00      	nop
    6a30:	3708      	adds	r7, #8
    6a32:	46bd      	mov	sp, r7
    6a34:	bd80      	pop	{r7, pc}
    6a36:	bf00      	nop
    6a38:	00006405 	.word	0x00006405

00006a3c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6a3c:	b4b0      	push	{r4, r5, r7}
    6a3e:	b08d      	sub	sp, #52	; 0x34
    6a40:	af00      	add	r7, sp, #0
    6a42:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6a44:	4b13      	ldr	r3, [pc, #76]	; (6a94 <_sercom_get_hardware_index+0x58>)
    6a46:	f107 040c 	add.w	r4, r7, #12
    6a4a:	461d      	mov	r5, r3
    6a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6a50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6a54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6a58:	2300      	movs	r3, #0
    6a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    6a5c:	e010      	b.n	6a80 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6a60:	009b      	lsls	r3, r3, #2
    6a62:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6a66:	4413      	add	r3, r2
    6a68:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6a6c:	461a      	mov	r2, r3
    6a6e:	687b      	ldr	r3, [r7, #4]
    6a70:	429a      	cmp	r2, r3
    6a72:	d102      	bne.n	6a7a <_sercom_get_hardware_index+0x3e>
			return i;
    6a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6a76:	b2db      	uxtb	r3, r3
    6a78:	e006      	b.n	6a88 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6a7c:	3301      	adds	r3, #1
    6a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6a82:	2b07      	cmp	r3, #7
    6a84:	d9eb      	bls.n	6a5e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6a86:	2300      	movs	r3, #0
}
    6a88:	4618      	mov	r0, r3
    6a8a:	3734      	adds	r7, #52	; 0x34
    6a8c:	46bd      	mov	sp, r7
    6a8e:	bcb0      	pop	{r4, r5, r7}
    6a90:	4770      	bx	lr
    6a92:	bf00      	nop
    6a94:	00010108 	.word	0x00010108

00006a98 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    6a98:	b480      	push	{r7}
    6a9a:	b083      	sub	sp, #12
    6a9c:	af00      	add	r7, sp, #0
    6a9e:	6078      	str	r0, [r7, #4]
    6aa0:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    6aa2:	687b      	ldr	r3, [r7, #4]
    6aa4:	4a05      	ldr	r2, [pc, #20]	; (6abc <_sercom_init_irq_param+0x24>)
    6aa6:	4293      	cmp	r3, r2
    6aa8:	d102      	bne.n	6ab0 <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    6aaa:	4a05      	ldr	r2, [pc, #20]	; (6ac0 <_sercom_init_irq_param+0x28>)
    6aac:	683b      	ldr	r3, [r7, #0]
    6aae:	6013      	str	r3, [r2, #0]
	}
}
    6ab0:	bf00      	nop
    6ab2:	370c      	adds	r7, #12
    6ab4:	46bd      	mov	sp, r7
    6ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aba:	4770      	bx	lr
    6abc:	43000c00 	.word	0x43000c00
    6ac0:	20000a78 	.word	0x20000a78

00006ac4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6ac4:	b580      	push	{r7, lr}
    6ac6:	b084      	sub	sp, #16
    6ac8:	af00      	add	r7, sp, #0
    6aca:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6acc:	6878      	ldr	r0, [r7, #4]
    6ace:	4b13      	ldr	r3, [pc, #76]	; (6b1c <_get_i2cm_index+0x58>)
    6ad0:	4798      	blx	r3
    6ad2:	4603      	mov	r3, r0
    6ad4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6ad6:	2300      	movs	r3, #0
    6ad8:	73fb      	strb	r3, [r7, #15]
    6ada:	e010      	b.n	6afe <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6adc:	7bfa      	ldrb	r2, [r7, #15]
    6ade:	4910      	ldr	r1, [pc, #64]	; (6b20 <_get_i2cm_index+0x5c>)
    6ae0:	4613      	mov	r3, r2
    6ae2:	005b      	lsls	r3, r3, #1
    6ae4:	4413      	add	r3, r2
    6ae6:	00db      	lsls	r3, r3, #3
    6ae8:	440b      	add	r3, r1
    6aea:	781b      	ldrb	r3, [r3, #0]
    6aec:	7bba      	ldrb	r2, [r7, #14]
    6aee:	429a      	cmp	r2, r3
    6af0:	d102      	bne.n	6af8 <_get_i2cm_index+0x34>
			return i;
    6af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6af6:	e00d      	b.n	6b14 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6af8:	7bfb      	ldrb	r3, [r7, #15]
    6afa:	3301      	adds	r3, #1
    6afc:	73fb      	strb	r3, [r7, #15]
    6afe:	7bfb      	ldrb	r3, [r7, #15]
    6b00:	2b02      	cmp	r3, #2
    6b02:	d9eb      	bls.n	6adc <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6b04:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    6b08:	4906      	ldr	r1, [pc, #24]	; (6b24 <_get_i2cm_index+0x60>)
    6b0a:	2000      	movs	r0, #0
    6b0c:	4b06      	ldr	r3, [pc, #24]	; (6b28 <_get_i2cm_index+0x64>)
    6b0e:	4798      	blx	r3
	return -1;
    6b10:	f04f 33ff 	mov.w	r3, #4294967295
}
    6b14:	4618      	mov	r0, r3
    6b16:	3710      	adds	r7, #16
    6b18:	46bd      	mov	sp, r7
    6b1a:	bd80      	pop	{r7, pc}
    6b1c:	00006a3d 	.word	0x00006a3d
    6b20:	20000018 	.word	0x20000018
    6b24:	000100ec 	.word	0x000100ec
    6b28:	00003e69 	.word	0x00003e69

00006b2c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6b2c:	b580      	push	{r7, lr}
    6b2e:	b082      	sub	sp, #8
    6b30:	af00      	add	r7, sp, #0
    6b32:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6b34:	2103      	movs	r1, #3
    6b36:	6878      	ldr	r0, [r7, #4]
    6b38:	4b02      	ldr	r3, [pc, #8]	; (6b44 <_sercom_i2c_send_stop+0x18>)
    6b3a:	4798      	blx	r3
}
    6b3c:	bf00      	nop
    6b3e:	3708      	adds	r7, #8
    6b40:	46bd      	mov	sp, r7
    6b42:	bd80      	pop	{r7, pc}
    6b44:	000067b9 	.word	0x000067b9

00006b48 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6b48:	b590      	push	{r4, r7, lr}
    6b4a:	b087      	sub	sp, #28
    6b4c:	af00      	add	r7, sp, #0
    6b4e:	60f8      	str	r0, [r7, #12]
    6b50:	60b9      	str	r1, [r7, #8]
    6b52:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6b54:	68f8      	ldr	r0, [r7, #12]
    6b56:	4b7d      	ldr	r3, [pc, #500]	; (6d4c <_sercom_i2c_sync_analyse_flags+0x204>)
    6b58:	4798      	blx	r3
    6b5a:	4603      	mov	r3, r0
    6b5c:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6b5e:	68f8      	ldr	r0, [r7, #12]
    6b60:	4b7b      	ldr	r3, [pc, #492]	; (6d50 <_sercom_i2c_sync_analyse_flags+0x208>)
    6b62:	4798      	blx	r3
    6b64:	4603      	mov	r3, r0
    6b66:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6b68:	68bb      	ldr	r3, [r7, #8]
    6b6a:	f003 0301 	and.w	r3, r3, #1
    6b6e:	2b00      	cmp	r3, #0
    6b70:	f000 8095 	beq.w	6c9e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6b74:	8a7b      	ldrh	r3, [r7, #18]
    6b76:	f003 0302 	and.w	r3, r3, #2
    6b7a:	2b00      	cmp	r3, #0
    6b7c:	d01d      	beq.n	6bba <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6b7e:	68f8      	ldr	r0, [r7, #12]
    6b80:	4b74      	ldr	r3, [pc, #464]	; (6d54 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6b82:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6b84:	687b      	ldr	r3, [r7, #4]
    6b86:	885b      	ldrh	r3, [r3, #2]
    6b88:	b29b      	uxth	r3, r3
    6b8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6b8e:	b29a      	uxth	r2, r3
    6b90:	687b      	ldr	r3, [r7, #4]
    6b92:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6b94:	687b      	ldr	r3, [r7, #4]
    6b96:	885b      	ldrh	r3, [r3, #2]
    6b98:	b29b      	uxth	r3, r3
    6b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6b9e:	b29a      	uxth	r2, r3
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6ba4:	8a7b      	ldrh	r3, [r7, #18]
    6ba6:	f003 0301 	and.w	r3, r3, #1
    6baa:	2b00      	cmp	r3, #0
    6bac:	d002      	beq.n	6bb4 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6bae:	f06f 0304 	mvn.w	r3, #4
    6bb2:	e0c6      	b.n	6d42 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6bb4:	f06f 0303 	mvn.w	r3, #3
    6bb8:	e0c3      	b.n	6d42 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6bba:	8a7b      	ldrh	r3, [r7, #18]
    6bbc:	f003 0304 	and.w	r3, r3, #4
    6bc0:	2b00      	cmp	r3, #0
    6bc2:	d01f      	beq.n	6c04 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6bc4:	687b      	ldr	r3, [r7, #4]
    6bc6:	685b      	ldr	r3, [r3, #4]
    6bc8:	2b00      	cmp	r3, #0
    6bca:	dd07      	ble.n	6bdc <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6bcc:	687b      	ldr	r3, [r7, #4]
    6bce:	885b      	ldrh	r3, [r3, #2]
    6bd0:	b29b      	uxth	r3, r3
    6bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6bd6:	b29a      	uxth	r2, r3
    6bd8:	687b      	ldr	r3, [r7, #4]
    6bda:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6bdc:	687b      	ldr	r3, [r7, #4]
    6bde:	885b      	ldrh	r3, [r3, #2]
    6be0:	b29b      	uxth	r3, r3
    6be2:	b21b      	sxth	r3, r3
    6be4:	2b00      	cmp	r3, #0
    6be6:	da02      	bge.n	6bee <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6be8:	68f8      	ldr	r0, [r7, #12]
    6bea:	4b5b      	ldr	r3, [pc, #364]	; (6d58 <_sercom_i2c_sync_analyse_flags+0x210>)
    6bec:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6bee:	687b      	ldr	r3, [r7, #4]
    6bf0:	885b      	ldrh	r3, [r3, #2]
    6bf2:	b29b      	uxth	r3, r3
    6bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6bf8:	b29a      	uxth	r2, r3
    6bfa:	687b      	ldr	r3, [r7, #4]
    6bfc:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6bfe:	f06f 0301 	mvn.w	r3, #1
    6c02:	e09e      	b.n	6d42 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	885b      	ldrh	r3, [r3, #2]
    6c08:	b29b      	uxth	r3, r3
    6c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6c0e:	2b00      	cmp	r3, #0
    6c10:	d01c      	beq.n	6c4c <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6c12:	687b      	ldr	r3, [r7, #4]
    6c14:	881b      	ldrh	r3, [r3, #0]
    6c16:	121b      	asrs	r3, r3, #8
    6c18:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6c1a:	f003 0406 	and.w	r4, r3, #6
    6c1e:	68f8      	ldr	r0, [r7, #12]
    6c20:	4b4e      	ldr	r3, [pc, #312]	; (6d5c <_sercom_i2c_sync_analyse_flags+0x214>)
    6c22:	4798      	blx	r3
    6c24:	4603      	mov	r3, r0
    6c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6c2a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6c2c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6c30:	4619      	mov	r1, r3
    6c32:	68f8      	ldr	r0, [r7, #12]
    6c34:	4b4a      	ldr	r3, [pc, #296]	; (6d60 <_sercom_i2c_sync_analyse_flags+0x218>)
    6c36:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6c38:	687b      	ldr	r3, [r7, #4]
    6c3a:	885b      	ldrh	r3, [r3, #2]
    6c3c:	b29b      	uxth	r3, r3
    6c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6c42:	b29a      	uxth	r2, r3
    6c44:	687b      	ldr	r3, [r7, #4]
    6c46:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6c48:	2300      	movs	r3, #0
    6c4a:	e07a      	b.n	6d42 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	685b      	ldr	r3, [r3, #4]
    6c50:	2b00      	cmp	r3, #0
    6c52:	d111      	bne.n	6c78 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6c54:	687b      	ldr	r3, [r7, #4]
    6c56:	885b      	ldrh	r3, [r3, #2]
    6c58:	b29b      	uxth	r3, r3
    6c5a:	b21b      	sxth	r3, r3
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	da02      	bge.n	6c66 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6c60:	68f8      	ldr	r0, [r7, #12]
    6c62:	4b3d      	ldr	r3, [pc, #244]	; (6d58 <_sercom_i2c_sync_analyse_flags+0x210>)
    6c64:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6c66:	687b      	ldr	r3, [r7, #4]
    6c68:	885b      	ldrh	r3, [r3, #2]
    6c6a:	b29b      	uxth	r3, r3
    6c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6c70:	b29a      	uxth	r2, r3
    6c72:	687b      	ldr	r3, [r7, #4]
    6c74:	805a      	strh	r2, [r3, #2]
    6c76:	e010      	b.n	6c9a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	689b      	ldr	r3, [r3, #8]
    6c7c:	781b      	ldrb	r3, [r3, #0]
    6c7e:	4619      	mov	r1, r3
    6c80:	68f8      	ldr	r0, [r7, #12]
    6c82:	4b38      	ldr	r3, [pc, #224]	; (6d64 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6c84:	4798      	blx	r3
				msg->buffer++;
    6c86:	687b      	ldr	r3, [r7, #4]
    6c88:	689b      	ldr	r3, [r3, #8]
    6c8a:	1c5a      	adds	r2, r3, #1
    6c8c:	687b      	ldr	r3, [r7, #4]
    6c8e:	609a      	str	r2, [r3, #8]
				msg->len--;
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	685b      	ldr	r3, [r3, #4]
    6c94:	1e5a      	subs	r2, r3, #1
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6c9a:	2300      	movs	r3, #0
    6c9c:	e051      	b.n	6d42 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6c9e:	68bb      	ldr	r3, [r7, #8]
    6ca0:	f003 0302 	and.w	r3, r3, #2
    6ca4:	2b00      	cmp	r3, #0
    6ca6:	d04b      	beq.n	6d40 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6ca8:	687b      	ldr	r3, [r7, #4]
    6caa:	685b      	ldr	r3, [r3, #4]
    6cac:	2b00      	cmp	r3, #0
    6cae:	d041      	beq.n	6d34 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6cb0:	8a7b      	ldrh	r3, [r7, #18]
    6cb2:	f003 0304 	and.w	r3, r3, #4
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	d13c      	bne.n	6d34 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6cba:	687b      	ldr	r3, [r7, #4]
    6cbc:	685b      	ldr	r3, [r3, #4]
    6cbe:	1e5a      	subs	r2, r3, #1
    6cc0:	687b      	ldr	r3, [r7, #4]
    6cc2:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6cc4:	687b      	ldr	r3, [r7, #4]
    6cc6:	685b      	ldr	r3, [r3, #4]
    6cc8:	2b00      	cmp	r3, #0
    6cca:	d102      	bne.n	6cd2 <_sercom_i2c_sync_analyse_flags+0x18a>
    6ccc:	697b      	ldr	r3, [r7, #20]
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d006      	beq.n	6ce0 <_sercom_i2c_sync_analyse_flags+0x198>
    6cd2:	687b      	ldr	r3, [r7, #4]
    6cd4:	685b      	ldr	r3, [r3, #4]
    6cd6:	2b01      	cmp	r3, #1
    6cd8:	d105      	bne.n	6ce6 <_sercom_i2c_sync_analyse_flags+0x19e>
    6cda:	697b      	ldr	r3, [r7, #20]
    6cdc:	2b00      	cmp	r3, #0
    6cde:	d002      	beq.n	6ce6 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6ce0:	68f8      	ldr	r0, [r7, #12]
    6ce2:	4b21      	ldr	r3, [pc, #132]	; (6d68 <_sercom_i2c_sync_analyse_flags+0x220>)
    6ce4:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6ce6:	687b      	ldr	r3, [r7, #4]
    6ce8:	685b      	ldr	r3, [r3, #4]
    6cea:	2b00      	cmp	r3, #0
    6cec:	d113      	bne.n	6d16 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6cee:	687b      	ldr	r3, [r7, #4]
    6cf0:	885b      	ldrh	r3, [r3, #2]
    6cf2:	b29b      	uxth	r3, r3
    6cf4:	b21b      	sxth	r3, r3
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	da05      	bge.n	6d06 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6cfa:	68f8      	ldr	r0, [r7, #12]
    6cfc:	4b1b      	ldr	r3, [pc, #108]	; (6d6c <_sercom_i2c_sync_analyse_flags+0x224>)
    6cfe:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6d00:	68f8      	ldr	r0, [r7, #12]
    6d02:	4b15      	ldr	r3, [pc, #84]	; (6d58 <_sercom_i2c_sync_analyse_flags+0x210>)
    6d04:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6d06:	687b      	ldr	r3, [r7, #4]
    6d08:	885b      	ldrh	r3, [r3, #2]
    6d0a:	b29b      	uxth	r3, r3
    6d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d10:	b29a      	uxth	r2, r3
    6d12:	687b      	ldr	r3, [r7, #4]
    6d14:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6d16:	687b      	ldr	r3, [r7, #4]
    6d18:	689c      	ldr	r4, [r3, #8]
    6d1a:	1c62      	adds	r2, r4, #1
    6d1c:	687b      	ldr	r3, [r7, #4]
    6d1e:	609a      	str	r2, [r3, #8]
    6d20:	68f8      	ldr	r0, [r7, #12]
    6d22:	4b13      	ldr	r3, [pc, #76]	; (6d70 <_sercom_i2c_sync_analyse_flags+0x228>)
    6d24:	4798      	blx	r3
    6d26:	4603      	mov	r3, r0
    6d28:	b2db      	uxtb	r3, r3
    6d2a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6d2c:	68f8      	ldr	r0, [r7, #12]
    6d2e:	4b11      	ldr	r3, [pc, #68]	; (6d74 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6d30:	4798      	blx	r3
    6d32:	e005      	b.n	6d40 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6d34:	68f8      	ldr	r0, [r7, #12]
    6d36:	4b0f      	ldr	r3, [pc, #60]	; (6d74 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6d38:	4798      	blx	r3
			return I2C_NACK;
    6d3a:	f06f 0301 	mvn.w	r3, #1
    6d3e:	e000      	b.n	6d42 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6d40:	2300      	movs	r3, #0
}
    6d42:	4618      	mov	r0, r3
    6d44:	371c      	adds	r7, #28
    6d46:	46bd      	mov	sp, r7
    6d48:	bd90      	pop	{r4, r7, pc}
    6d4a:	bf00      	nop
    6d4c:	000065b9 	.word	0x000065b9
    6d50:	000069f1 	.word	0x000069f1
    6d54:	0000649d 	.word	0x0000649d
    6d58:	00006b2d 	.word	0x00006b2d
    6d5c:	000068d1 	.word	0x000068d1
    6d60:	000068ad 	.word	0x000068ad
    6d64:	0000690d 	.word	0x0000690d
    6d68:	00006769 	.word	0x00006769
    6d6c:	00006741 	.word	0x00006741
    6d70:	00006931 	.word	0x00006931
    6d74:	000064b7 	.word	0x000064b7

00006d78 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6d78:	b580      	push	{r7, lr}
    6d7a:	b086      	sub	sp, #24
    6d7c:	af00      	add	r7, sp, #0
    6d7e:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	691b      	ldr	r3, [r3, #16]
    6d84:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6d86:	6938      	ldr	r0, [r7, #16]
    6d88:	4b37      	ldr	r3, [pc, #220]	; (6e68 <_sercom_i2c_m_irq_handler+0xf0>)
    6d8a:	4798      	blx	r3
    6d8c:	4603      	mov	r3, r0
    6d8e:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6d90:	2300      	movs	r3, #0
    6d92:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6d94:	687b      	ldr	r3, [r7, #4]
    6d96:	2b00      	cmp	r3, #0
    6d98:	bf14      	ite	ne
    6d9a:	2301      	movne	r3, #1
    6d9c:	2300      	moveq	r3, #0
    6d9e:	b2db      	uxtb	r3, r3
    6da0:	f240 421e 	movw	r2, #1054	; 0x41e
    6da4:	4931      	ldr	r1, [pc, #196]	; (6e6c <_sercom_i2c_m_irq_handler+0xf4>)
    6da6:	4618      	mov	r0, r3
    6da8:	4b31      	ldr	r3, [pc, #196]	; (6e70 <_sercom_i2c_m_irq_handler+0xf8>)
    6daa:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6dac:	687b      	ldr	r3, [r7, #4]
    6dae:	691b      	ldr	r3, [r3, #16]
    6db0:	2b00      	cmp	r3, #0
    6db2:	bf14      	ite	ne
    6db4:	2301      	movne	r3, #1
    6db6:	2300      	moveq	r3, #0
    6db8:	b2db      	uxtb	r3, r3
    6dba:	f240 421f 	movw	r2, #1055	; 0x41f
    6dbe:	492b      	ldr	r1, [pc, #172]	; (6e6c <_sercom_i2c_m_irq_handler+0xf4>)
    6dc0:	4618      	mov	r0, r3
    6dc2:	4b2b      	ldr	r3, [pc, #172]	; (6e70 <_sercom_i2c_m_irq_handler+0xf8>)
    6dc4:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6dc6:	bf00      	nop
    6dc8:	68fb      	ldr	r3, [r7, #12]
    6dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6dce:	2b00      	cmp	r3, #0
    6dd0:	d126      	bne.n	6e20 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6dd2:	687b      	ldr	r3, [r7, #4]
    6dd4:	461a      	mov	r2, r3
    6dd6:	68f9      	ldr	r1, [r7, #12]
    6dd8:	6938      	ldr	r0, [r7, #16]
    6dda:	4b26      	ldr	r3, [pc, #152]	; (6e74 <_sercom_i2c_m_irq_handler+0xfc>)
    6ddc:	4798      	blx	r3
    6dde:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6de0:	697b      	ldr	r3, [r7, #20]
    6de2:	2b00      	cmp	r3, #0
    6de4:	d11b      	bne.n	6e1e <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6de6:	68fb      	ldr	r3, [r7, #12]
    6de8:	f003 0301 	and.w	r3, r3, #1
    6dec:	2b00      	cmp	r3, #0
    6dee:	d008      	beq.n	6e02 <_sercom_i2c_m_irq_handler+0x8a>
    6df0:	687b      	ldr	r3, [r7, #4]
    6df2:	699b      	ldr	r3, [r3, #24]
    6df4:	2b00      	cmp	r3, #0
    6df6:	d004      	beq.n	6e02 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6df8:	687b      	ldr	r3, [r7, #4]
    6dfa:	699b      	ldr	r3, [r3, #24]
    6dfc:	6878      	ldr	r0, [r7, #4]
    6dfe:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6e00:	e02e      	b.n	6e60 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6e02:	68fb      	ldr	r3, [r7, #12]
    6e04:	f003 0302 	and.w	r3, r3, #2
    6e08:	2b00      	cmp	r3, #0
    6e0a:	d029      	beq.n	6e60 <_sercom_i2c_m_irq_handler+0xe8>
    6e0c:	687b      	ldr	r3, [r7, #4]
    6e0e:	69db      	ldr	r3, [r3, #28]
    6e10:	2b00      	cmp	r3, #0
    6e12:	d025      	beq.n	6e60 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6e14:	687b      	ldr	r3, [r7, #4]
    6e16:	69db      	ldr	r3, [r3, #28]
    6e18:	6878      	ldr	r0, [r7, #4]
    6e1a:	4798      	blx	r3
		return;
    6e1c:	e020      	b.n	6e60 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    6e1e:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6e20:	687b      	ldr	r3, [r7, #4]
    6e22:	885b      	ldrh	r3, [r3, #2]
    6e24:	b29b      	uxth	r3, r3
    6e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e2a:	b29a      	uxth	r2, r3
    6e2c:	687b      	ldr	r3, [r7, #4]
    6e2e:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    6e30:	687b      	ldr	r3, [r7, #4]
    6e32:	695b      	ldr	r3, [r3, #20]
    6e34:	2b00      	cmp	r3, #0
    6e36:	d014      	beq.n	6e62 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6e38:	697b      	ldr	r3, [r7, #20]
    6e3a:	2b00      	cmp	r3, #0
    6e3c:	d005      	beq.n	6e4a <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    6e3e:	687b      	ldr	r3, [r7, #4]
    6e40:	695b      	ldr	r3, [r3, #20]
    6e42:	6979      	ldr	r1, [r7, #20]
    6e44:	6878      	ldr	r0, [r7, #4]
    6e46:	4798      	blx	r3
    6e48:	e005      	b.n	6e56 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	695b      	ldr	r3, [r3, #20]
    6e4e:	f06f 0104 	mvn.w	r1, #4
    6e52:	6878      	ldr	r0, [r7, #4]
    6e54:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6e56:	2180      	movs	r1, #128	; 0x80
    6e58:	6938      	ldr	r0, [r7, #16]
    6e5a:	4b07      	ldr	r3, [pc, #28]	; (6e78 <_sercom_i2c_m_irq_handler+0x100>)
    6e5c:	4798      	blx	r3
    6e5e:	e000      	b.n	6e62 <_sercom_i2c_m_irq_handler+0xea>
		return;
    6e60:	bf00      	nop
	}
}
    6e62:	3718      	adds	r7, #24
    6e64:	46bd      	mov	sp, r7
    6e66:	bd80      	pop	{r7, pc}
    6e68:	000064d1 	.word	0x000064d1
    6e6c:	000100ec 	.word	0x000100ec
    6e70:	00003e69 	.word	0x00003e69
    6e74:	00006b49 	.word	0x00006b49
    6e78:	000064eb 	.word	0x000064eb

00006e7c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6e7c:	b580      	push	{r7, lr}
    6e7e:	b082      	sub	sp, #8
    6e80:	af00      	add	r7, sp, #0
    6e82:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6e84:	6878      	ldr	r0, [r7, #4]
    6e86:	4b05      	ldr	r3, [pc, #20]	; (6e9c <_sercom_get_irq_num+0x20>)
    6e88:	4798      	blx	r3
    6e8a:	4603      	mov	r3, r0
    6e8c:	009b      	lsls	r3, r3, #2
    6e8e:	b2db      	uxtb	r3, r3
    6e90:	332e      	adds	r3, #46	; 0x2e
    6e92:	b2db      	uxtb	r3, r3
}
    6e94:	4618      	mov	r0, r3
    6e96:	3708      	adds	r7, #8
    6e98:	46bd      	mov	sp, r7
    6e9a:	bd80      	pop	{r7, pc}
    6e9c:	00006a3d 	.word	0x00006a3d

00006ea0 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6ea0:	b580      	push	{r7, lr}
    6ea2:	b086      	sub	sp, #24
    6ea4:	af00      	add	r7, sp, #0
    6ea6:	6078      	str	r0, [r7, #4]
    6ea8:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    6eaa:	687b      	ldr	r3, [r7, #4]
    6eac:	2b00      	cmp	r3, #0
    6eae:	bf14      	ite	ne
    6eb0:	2301      	movne	r3, #1
    6eb2:	2300      	moveq	r3, #0
    6eb4:	b2db      	uxtb	r3, r3
    6eb6:	f240 4292 	movw	r2, #1170	; 0x492
    6eba:	491d      	ldr	r1, [pc, #116]	; (6f30 <_i2c_m_async_init+0x90>)
    6ebc:	4618      	mov	r0, r3
    6ebe:	4b1d      	ldr	r3, [pc, #116]	; (6f34 <_i2c_m_async_init+0x94>)
    6ec0:	4798      	blx	r3

	i2c_dev->hw = hw;
    6ec2:	687b      	ldr	r3, [r7, #4]
    6ec4:	683a      	ldr	r2, [r7, #0]
    6ec6:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6ec8:	687b      	ldr	r3, [r7, #4]
    6eca:	6839      	ldr	r1, [r7, #0]
    6ecc:	4618      	mov	r0, r3
    6ece:	4b1a      	ldr	r3, [pc, #104]	; (6f38 <_i2c_m_async_init+0x98>)
    6ed0:	4798      	blx	r3
    6ed2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6ed4:	68fb      	ldr	r3, [r7, #12]
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	d001      	beq.n	6ede <_i2c_m_async_init+0x3e>
		return init_status;
    6eda:	68fb      	ldr	r3, [r7, #12]
    6edc:	e024      	b.n	6f28 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6ede:	6879      	ldr	r1, [r7, #4]
    6ee0:	6838      	ldr	r0, [r7, #0]
    6ee2:	4b16      	ldr	r3, [pc, #88]	; (6f3c <_i2c_m_async_init+0x9c>)
    6ee4:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6ee6:	6838      	ldr	r0, [r7, #0]
    6ee8:	4b15      	ldr	r3, [pc, #84]	; (6f40 <_i2c_m_async_init+0xa0>)
    6eea:	4798      	blx	r3
    6eec:	4603      	mov	r3, r0
    6eee:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6ef0:	2300      	movs	r3, #0
    6ef2:	613b      	str	r3, [r7, #16]
    6ef4:	e014      	b.n	6f20 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6ef6:	7dfb      	ldrb	r3, [r7, #23]
    6ef8:	b21b      	sxth	r3, r3
    6efa:	4618      	mov	r0, r3
    6efc:	4b11      	ldr	r3, [pc, #68]	; (6f44 <_i2c_m_async_init+0xa4>)
    6efe:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6f00:	7dfb      	ldrb	r3, [r7, #23]
    6f02:	b21b      	sxth	r3, r3
    6f04:	4618      	mov	r0, r3
    6f06:	4b10      	ldr	r3, [pc, #64]	; (6f48 <_i2c_m_async_init+0xa8>)
    6f08:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    6f0a:	7dfb      	ldrb	r3, [r7, #23]
    6f0c:	b21b      	sxth	r3, r3
    6f0e:	4618      	mov	r0, r3
    6f10:	4b0e      	ldr	r3, [pc, #56]	; (6f4c <_i2c_m_async_init+0xac>)
    6f12:	4798      	blx	r3
		irq++;
    6f14:	7dfb      	ldrb	r3, [r7, #23]
    6f16:	3301      	adds	r3, #1
    6f18:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6f1a:	693b      	ldr	r3, [r7, #16]
    6f1c:	3301      	adds	r3, #1
    6f1e:	613b      	str	r3, [r7, #16]
    6f20:	693b      	ldr	r3, [r7, #16]
    6f22:	2b03      	cmp	r3, #3
    6f24:	d9e7      	bls.n	6ef6 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6f26:	2300      	movs	r3, #0
}
    6f28:	4618      	mov	r0, r3
    6f2a:	3718      	adds	r7, #24
    6f2c:	46bd      	mov	sp, r7
    6f2e:	bd80      	pop	{r7, pc}
    6f30:	000100ec 	.word	0x000100ec
    6f34:	00003e69 	.word	0x00003e69
    6f38:	00007525 	.word	0x00007525
    6f3c:	00006a99 	.word	0x00006a99
    6f40:	00006e7d 	.word	0x00006e7d
    6f44:	00006385 	.word	0x00006385
    6f48:	000063c9 	.word	0x000063c9
    6f4c:	00006349 	.word	0x00006349

00006f50 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    6f50:	b590      	push	{r4, r7, lr}
    6f52:	b087      	sub	sp, #28
    6f54:	af00      	add	r7, sp, #0
    6f56:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6f58:	687b      	ldr	r3, [r7, #4]
    6f5a:	691b      	ldr	r3, [r3, #16]
    6f5c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6f5e:	687b      	ldr	r3, [r7, #4]
    6f60:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6f62:	6978      	ldr	r0, [r7, #20]
    6f64:	4b33      	ldr	r3, [pc, #204]	; (7034 <_sercom_i2c_send_address+0xe4>)
    6f66:	4798      	blx	r3
    6f68:	4603      	mov	r3, r0
    6f6a:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6f6c:	687b      	ldr	r3, [r7, #4]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	bf14      	ite	ne
    6f72:	2301      	movne	r3, #1
    6f74:	2300      	moveq	r3, #0
    6f76:	b2db      	uxtb	r3, r3
    6f78:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    6f7c:	492e      	ldr	r1, [pc, #184]	; (7038 <_sercom_i2c_send_address+0xe8>)
    6f7e:	4618      	mov	r0, r3
    6f80:	4b2e      	ldr	r3, [pc, #184]	; (703c <_sercom_i2c_send_address+0xec>)
    6f82:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6f84:	693b      	ldr	r3, [r7, #16]
    6f86:	685b      	ldr	r3, [r3, #4]
    6f88:	2b01      	cmp	r3, #1
    6f8a:	d106      	bne.n	6f9a <_sercom_i2c_send_address+0x4a>
    6f8c:	68fb      	ldr	r3, [r7, #12]
    6f8e:	2b00      	cmp	r3, #0
    6f90:	d003      	beq.n	6f9a <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6f92:	6978      	ldr	r0, [r7, #20]
    6f94:	4b2a      	ldr	r3, [pc, #168]	; (7040 <_sercom_i2c_send_address+0xf0>)
    6f96:	4798      	blx	r3
    6f98:	e002      	b.n	6fa0 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6f9a:	6978      	ldr	r0, [r7, #20]
    6f9c:	4b29      	ldr	r3, [pc, #164]	; (7044 <_sercom_i2c_send_address+0xf4>)
    6f9e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6fa0:	693b      	ldr	r3, [r7, #16]
    6fa2:	881b      	ldrh	r3, [r3, #0]
    6fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d022      	beq.n	6ff2 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6fac:	693b      	ldr	r3, [r7, #16]
    6fae:	885b      	ldrh	r3, [r3, #2]
    6fb0:	b29b      	uxth	r3, r3
    6fb2:	f003 0301 	and.w	r3, r3, #1
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d007      	beq.n	6fca <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6fba:	693b      	ldr	r3, [r7, #16]
    6fbc:	885b      	ldrh	r3, [r3, #2]
    6fbe:	b29b      	uxth	r3, r3
    6fc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6fc4:	b29a      	uxth	r2, r3
    6fc6:	693b      	ldr	r3, [r7, #16]
    6fc8:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6fca:	693b      	ldr	r3, [r7, #16]
    6fcc:	881b      	ldrh	r3, [r3, #0]
    6fce:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6fd0:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6fd4:	401c      	ands	r4, r3
    6fd6:	6978      	ldr	r0, [r7, #20]
    6fd8:	4b1b      	ldr	r3, [pc, #108]	; (7048 <_sercom_i2c_send_address+0xf8>)
    6fda:	4798      	blx	r3
    6fdc:	4603      	mov	r3, r0
    6fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6fe2:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6fe8:	4619      	mov	r1, r3
    6fea:	6978      	ldr	r0, [r7, #20]
    6fec:	4b17      	ldr	r3, [pc, #92]	; (704c <_sercom_i2c_send_address+0xfc>)
    6fee:	4798      	blx	r3
    6ff0:	e01a      	b.n	7028 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6ff2:	693b      	ldr	r3, [r7, #16]
    6ff4:	881b      	ldrh	r3, [r3, #0]
    6ff6:	005b      	lsls	r3, r3, #1
    6ff8:	b2db      	uxtb	r3, r3
    6ffa:	693a      	ldr	r2, [r7, #16]
    6ffc:	8852      	ldrh	r2, [r2, #2]
    6ffe:	b292      	uxth	r2, r2
    7000:	f002 0201 	and.w	r2, r2, #1
    7004:	2a00      	cmp	r2, #0
    7006:	bf14      	ite	ne
    7008:	2201      	movne	r2, #1
    700a:	2200      	moveq	r2, #0
    700c:	b2d2      	uxtb	r2, r2
    700e:	4313      	orrs	r3, r2
    7010:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7012:	6978      	ldr	r0, [r7, #20]
    7014:	4b0c      	ldr	r3, [pc, #48]	; (7048 <_sercom_i2c_send_address+0xf8>)
    7016:	4798      	blx	r3
    7018:	4603      	mov	r3, r0
    701a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    701e:	4323      	orrs	r3, r4
    7020:	4619      	mov	r1, r3
    7022:	6978      	ldr	r0, [r7, #20]
    7024:	4b09      	ldr	r3, [pc, #36]	; (704c <_sercom_i2c_send_address+0xfc>)
    7026:	4798      	blx	r3
	}

	return ERR_NONE;
    7028:	2300      	movs	r3, #0
}
    702a:	4618      	mov	r0, r3
    702c:	371c      	adds	r7, #28
    702e:	46bd      	mov	sp, r7
    7030:	bd90      	pop	{r4, r7, pc}
    7032:	bf00      	nop
    7034:	000065b9 	.word	0x000065b9
    7038:	000100ec 	.word	0x000100ec
    703c:	00003e69 	.word	0x00003e69
    7040:	00006769 	.word	0x00006769
    7044:	00006791 	.word	0x00006791
    7048:	000068d1 	.word	0x000068d1
    704c:	000068ad 	.word	0x000068ad

00007050 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    7050:	b580      	push	{r7, lr}
    7052:	b084      	sub	sp, #16
    7054:	af00      	add	r7, sp, #0
    7056:	6078      	str	r0, [r7, #4]
    7058:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    705a:	687b      	ldr	r3, [r7, #4]
    705c:	2b00      	cmp	r3, #0
    705e:	bf14      	ite	ne
    7060:	2301      	movne	r3, #1
    7062:	2300      	moveq	r3, #0
    7064:	b2db      	uxtb	r3, r3
    7066:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    706a:	492a      	ldr	r1, [pc, #168]	; (7114 <_i2c_m_async_transfer+0xc4>)
    706c:	4618      	mov	r0, r3
    706e:	4b2a      	ldr	r3, [pc, #168]	; (7118 <_i2c_m_async_transfer+0xc8>)
    7070:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    7072:	687b      	ldr	r3, [r7, #4]
    7074:	691b      	ldr	r3, [r3, #16]
    7076:	2b00      	cmp	r3, #0
    7078:	bf14      	ite	ne
    707a:	2301      	movne	r3, #1
    707c:	2300      	moveq	r3, #0
    707e:	b2db      	uxtb	r3, r3
    7080:	f240 42e9 	movw	r2, #1257	; 0x4e9
    7084:	4923      	ldr	r1, [pc, #140]	; (7114 <_i2c_m_async_transfer+0xc4>)
    7086:	4618      	mov	r0, r3
    7088:	4b23      	ldr	r3, [pc, #140]	; (7118 <_i2c_m_async_transfer+0xc8>)
    708a:	4798      	blx	r3
	ASSERT(msg);
    708c:	683b      	ldr	r3, [r7, #0]
    708e:	2b00      	cmp	r3, #0
    7090:	bf14      	ite	ne
    7092:	2301      	movne	r3, #1
    7094:	2300      	moveq	r3, #0
    7096:	b2db      	uxtb	r3, r3
    7098:	f240 42ea 	movw	r2, #1258	; 0x4ea
    709c:	491d      	ldr	r1, [pc, #116]	; (7114 <_i2c_m_async_transfer+0xc4>)
    709e:	4618      	mov	r0, r3
    70a0:	4b1d      	ldr	r3, [pc, #116]	; (7118 <_i2c_m_async_transfer+0xc8>)
    70a2:	4798      	blx	r3

	if (msg->len == 0) {
    70a4:	683b      	ldr	r3, [r7, #0]
    70a6:	685b      	ldr	r3, [r3, #4]
    70a8:	2b00      	cmp	r3, #0
    70aa:	d101      	bne.n	70b0 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    70ac:	2300      	movs	r3, #0
    70ae:	e02d      	b.n	710c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    70b0:	687b      	ldr	r3, [r7, #4]
    70b2:	885b      	ldrh	r3, [r3, #2]
    70b4:	b29b      	uxth	r3, r3
    70b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    70ba:	2b00      	cmp	r3, #0
    70bc:	d002      	beq.n	70c4 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    70be:	f06f 0303 	mvn.w	r3, #3
    70c2:	e023      	b.n	710c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    70c4:	683b      	ldr	r3, [r7, #0]
    70c6:	885b      	ldrh	r3, [r3, #2]
    70c8:	b29b      	uxth	r3, r3
    70ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    70ce:	b29a      	uxth	r2, r3
    70d0:	683b      	ldr	r3, [r7, #0]
    70d2:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    70d4:	687b      	ldr	r3, [r7, #4]
    70d6:	683a      	ldr	r2, [r7, #0]
    70d8:	ca07      	ldmia	r2, {r0, r1, r2}
    70da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    70de:	687b      	ldr	r3, [r7, #4]
    70e0:	691b      	ldr	r3, [r3, #16]
    70e2:	4618      	mov	r0, r3
    70e4:	4b0d      	ldr	r3, [pc, #52]	; (711c <_i2c_m_async_transfer+0xcc>)
    70e6:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    70e8:	6878      	ldr	r0, [r7, #4]
    70ea:	4b0d      	ldr	r3, [pc, #52]	; (7120 <_i2c_m_async_transfer+0xd0>)
    70ec:	4798      	blx	r3
    70ee:	60f8      	str	r0, [r7, #12]

	if (ret) {
    70f0:	68fb      	ldr	r3, [r7, #12]
    70f2:	2b00      	cmp	r3, #0
    70f4:	d009      	beq.n	710a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    70f6:	687b      	ldr	r3, [r7, #4]
    70f8:	885b      	ldrh	r3, [r3, #2]
    70fa:	b29b      	uxth	r3, r3
    70fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7100:	b29a      	uxth	r2, r3
    7102:	687b      	ldr	r3, [r7, #4]
    7104:	805a      	strh	r2, [r3, #2]

		return ret;
    7106:	68fb      	ldr	r3, [r7, #12]
    7108:	e000      	b.n	710c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    710a:	2300      	movs	r3, #0
}
    710c:	4618      	mov	r0, r3
    710e:	3710      	adds	r7, #16
    7110:	46bd      	mov	sp, r7
    7112:	bd80      	pop	{r7, pc}
    7114:	000100ec 	.word	0x000100ec
    7118:	00003e69 	.word	0x00003e69
    711c:	00006719 	.word	0x00006719
    7120:	00006f51 	.word	0x00006f51

00007124 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    7124:	b480      	push	{r7}
    7126:	b085      	sub	sp, #20
    7128:	af00      	add	r7, sp, #0
    712a:	60f8      	str	r0, [r7, #12]
    712c:	460b      	mov	r3, r1
    712e:	607a      	str	r2, [r7, #4]
    7130:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    7132:	7afb      	ldrb	r3, [r7, #11]
    7134:	2b01      	cmp	r3, #1
    7136:	d008      	beq.n	714a <_i2c_m_async_register_callback+0x26>
    7138:	2b02      	cmp	r3, #2
    713a:	d00a      	beq.n	7152 <_i2c_m_async_register_callback+0x2e>
    713c:	2b00      	cmp	r3, #0
    713e:	d000      	beq.n	7142 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    7140:	e00b      	b.n	715a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    7142:	68fb      	ldr	r3, [r7, #12]
    7144:	687a      	ldr	r2, [r7, #4]
    7146:	615a      	str	r2, [r3, #20]
		break;
    7148:	e007      	b.n	715a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    714a:	68fb      	ldr	r3, [r7, #12]
    714c:	687a      	ldr	r2, [r7, #4]
    714e:	619a      	str	r2, [r3, #24]
		break;
    7150:	e003      	b.n	715a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    7152:	68fb      	ldr	r3, [r7, #12]
    7154:	687a      	ldr	r2, [r7, #4]
    7156:	61da      	str	r2, [r3, #28]
		break;
    7158:	bf00      	nop
	}

	return ERR_NONE;
    715a:	2300      	movs	r3, #0
}
    715c:	4618      	mov	r0, r3
    715e:	3714      	adds	r7, #20
    7160:	46bd      	mov	sp, r7
    7162:	f85d 7b04 	ldr.w	r7, [sp], #4
    7166:	4770      	bx	lr

00007168 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    7168:	b580      	push	{r7, lr}
    716a:	b082      	sub	sp, #8
    716c:	af00      	add	r7, sp, #0
    716e:	6078      	str	r0, [r7, #4]
    7170:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    7172:	687b      	ldr	r3, [r7, #4]
    7174:	2b00      	cmp	r3, #0
    7176:	bf14      	ite	ne
    7178:	2301      	movne	r3, #1
    717a:	2300      	moveq	r3, #0
    717c:	b2db      	uxtb	r3, r3
    717e:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    7182:	4908      	ldr	r1, [pc, #32]	; (71a4 <_i2c_m_sync_init+0x3c>)
    7184:	4618      	mov	r0, r3
    7186:	4b08      	ldr	r3, [pc, #32]	; (71a8 <_i2c_m_sync_init+0x40>)
    7188:	4798      	blx	r3

	i2c_dev->hw = hw;
    718a:	687b      	ldr	r3, [r7, #4]
    718c:	683a      	ldr	r2, [r7, #0]
    718e:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7190:	687b      	ldr	r3, [r7, #4]
    7192:	6839      	ldr	r1, [r7, #0]
    7194:	4618      	mov	r0, r3
    7196:	4b05      	ldr	r3, [pc, #20]	; (71ac <_i2c_m_sync_init+0x44>)
    7198:	4798      	blx	r3
    719a:	4603      	mov	r3, r0
}
    719c:	4618      	mov	r0, r3
    719e:	3708      	adds	r7, #8
    71a0:	46bd      	mov	sp, r7
    71a2:	bd80      	pop	{r7, pc}
    71a4:	000100ec 	.word	0x000100ec
    71a8:	00003e69 	.word	0x00003e69
    71ac:	00007525 	.word	0x00007525

000071b0 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    71b0:	b580      	push	{r7, lr}
    71b2:	b082      	sub	sp, #8
    71b4:	af00      	add	r7, sp, #0
    71b6:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    71b8:	687b      	ldr	r3, [r7, #4]
    71ba:	2b00      	cmp	r3, #0
    71bc:	bf14      	ite	ne
    71be:	2301      	movne	r3, #1
    71c0:	2300      	moveq	r3, #0
    71c2:	b2db      	uxtb	r3, r3
    71c4:	f240 5265 	movw	r2, #1381	; 0x565
    71c8:	4906      	ldr	r1, [pc, #24]	; (71e4 <_i2c_m_sync_enable+0x34>)
    71ca:	4618      	mov	r0, r3
    71cc:	4b06      	ldr	r3, [pc, #24]	; (71e8 <_i2c_m_sync_enable+0x38>)
    71ce:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    71d0:	687b      	ldr	r3, [r7, #4]
    71d2:	691b      	ldr	r3, [r3, #16]
    71d4:	4618      	mov	r0, r3
    71d6:	4b05      	ldr	r3, [pc, #20]	; (71ec <_i2c_m_sync_enable+0x3c>)
    71d8:	4798      	blx	r3
    71da:	4603      	mov	r3, r0
}
    71dc:	4618      	mov	r0, r3
    71de:	3708      	adds	r7, #8
    71e0:	46bd      	mov	sp, r7
    71e2:	bd80      	pop	{r7, pc}
    71e4:	000100ec 	.word	0x000100ec
    71e8:	00003e69 	.word	0x00003e69
    71ec:	00007499 	.word	0x00007499

000071f0 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    71f0:	b580      	push	{r7, lr}
    71f2:	b084      	sub	sp, #16
    71f4:	af00      	add	r7, sp, #0
    71f6:	6078      	str	r0, [r7, #4]
    71f8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    71fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    71fe:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    7200:	687b      	ldr	r3, [r7, #4]
    7202:	691b      	ldr	r3, [r3, #16]
    7204:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    7206:	68b8      	ldr	r0, [r7, #8]
    7208:	4b0f      	ldr	r3, [pc, #60]	; (7248 <_sercom_i2c_sync_wait_bus+0x58>)
    720a:	4798      	blx	r3
    720c:	4603      	mov	r3, r0
    720e:	461a      	mov	r2, r3
    7210:	683b      	ldr	r3, [r7, #0]
    7212:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    7214:	68fb      	ldr	r3, [r7, #12]
    7216:	1e5a      	subs	r2, r3, #1
    7218:	60fa      	str	r2, [r7, #12]
    721a:	2b00      	cmp	r3, #0
    721c:	d102      	bne.n	7224 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    721e:	f06f 0304 	mvn.w	r3, #4
    7222:	e00c      	b.n	723e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    7224:	683b      	ldr	r3, [r7, #0]
    7226:	681b      	ldr	r3, [r3, #0]
    7228:	f003 0301 	and.w	r3, r3, #1
    722c:	2b00      	cmp	r3, #0
    722e:	d105      	bne.n	723c <_sercom_i2c_sync_wait_bus+0x4c>
    7230:	683b      	ldr	r3, [r7, #0]
    7232:	681b      	ldr	r3, [r3, #0]
    7234:	f003 0302 	and.w	r3, r3, #2
    7238:	2b00      	cmp	r3, #0
    723a:	d0e4      	beq.n	7206 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    723c:	2300      	movs	r3, #0
}
    723e:	4618      	mov	r0, r3
    7240:	3710      	adds	r7, #16
    7242:	46bd      	mov	sp, r7
    7244:	bd80      	pop	{r7, pc}
    7246:	bf00      	nop
    7248:	000064d1 	.word	0x000064d1

0000724c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    724c:	b590      	push	{r4, r7, lr}
    724e:	b087      	sub	sp, #28
    7250:	af00      	add	r7, sp, #0
    7252:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	691b      	ldr	r3, [r3, #16]
    7258:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    725a:	687b      	ldr	r3, [r7, #4]
    725c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    725e:	6978      	ldr	r0, [r7, #20]
    7260:	4b39      	ldr	r3, [pc, #228]	; (7348 <_sercom_i2c_sync_send_address+0xfc>)
    7262:	4798      	blx	r3
    7264:	4603      	mov	r3, r0
    7266:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    7268:	687b      	ldr	r3, [r7, #4]
    726a:	2b00      	cmp	r3, #0
    726c:	bf14      	ite	ne
    726e:	2301      	movne	r3, #1
    7270:	2300      	moveq	r3, #0
    7272:	b2db      	uxtb	r3, r3
    7274:	f240 52d5 	movw	r2, #1493	; 0x5d5
    7278:	4934      	ldr	r1, [pc, #208]	; (734c <_sercom_i2c_sync_send_address+0x100>)
    727a:	4618      	mov	r0, r3
    727c:	4b34      	ldr	r3, [pc, #208]	; (7350 <_sercom_i2c_sync_send_address+0x104>)
    727e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    7280:	693b      	ldr	r3, [r7, #16]
    7282:	685b      	ldr	r3, [r3, #4]
    7284:	2b01      	cmp	r3, #1
    7286:	d106      	bne.n	7296 <_sercom_i2c_sync_send_address+0x4a>
    7288:	68fb      	ldr	r3, [r7, #12]
    728a:	2b00      	cmp	r3, #0
    728c:	d003      	beq.n	7296 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    728e:	6978      	ldr	r0, [r7, #20]
    7290:	4b30      	ldr	r3, [pc, #192]	; (7354 <_sercom_i2c_sync_send_address+0x108>)
    7292:	4798      	blx	r3
    7294:	e002      	b.n	729c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    7296:	6978      	ldr	r0, [r7, #20]
    7298:	4b2f      	ldr	r3, [pc, #188]	; (7358 <_sercom_i2c_sync_send_address+0x10c>)
    729a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    729c:	693b      	ldr	r3, [r7, #16]
    729e:	881b      	ldrh	r3, [r3, #0]
    72a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    72a4:	2b00      	cmp	r3, #0
    72a6:	d022      	beq.n	72ee <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    72a8:	693b      	ldr	r3, [r7, #16]
    72aa:	885b      	ldrh	r3, [r3, #2]
    72ac:	b29b      	uxth	r3, r3
    72ae:	f003 0301 	and.w	r3, r3, #1
    72b2:	2b00      	cmp	r3, #0
    72b4:	d007      	beq.n	72c6 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    72b6:	693b      	ldr	r3, [r7, #16]
    72b8:	885b      	ldrh	r3, [r3, #2]
    72ba:	b29b      	uxth	r3, r3
    72bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    72c0:	b29a      	uxth	r2, r3
    72c2:	693b      	ldr	r3, [r7, #16]
    72c4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    72c6:	693b      	ldr	r3, [r7, #16]
    72c8:	881b      	ldrh	r3, [r3, #0]
    72ca:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    72cc:	f240 74fe 	movw	r4, #2046	; 0x7fe
    72d0:	401c      	ands	r4, r3
    72d2:	6978      	ldr	r0, [r7, #20]
    72d4:	4b21      	ldr	r3, [pc, #132]	; (735c <_sercom_i2c_sync_send_address+0x110>)
    72d6:	4798      	blx	r3
    72d8:	4603      	mov	r3, r0
    72da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    72de:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    72e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    72e4:	4619      	mov	r1, r3
    72e6:	6978      	ldr	r0, [r7, #20]
    72e8:	4b1d      	ldr	r3, [pc, #116]	; (7360 <_sercom_i2c_sync_send_address+0x114>)
    72ea:	4798      	blx	r3
    72ec:	e01a      	b.n	7324 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    72ee:	693b      	ldr	r3, [r7, #16]
    72f0:	881b      	ldrh	r3, [r3, #0]
    72f2:	005b      	lsls	r3, r3, #1
    72f4:	b2db      	uxtb	r3, r3
    72f6:	693a      	ldr	r2, [r7, #16]
    72f8:	8852      	ldrh	r2, [r2, #2]
    72fa:	b292      	uxth	r2, r2
    72fc:	f002 0201 	and.w	r2, r2, #1
    7300:	2a00      	cmp	r2, #0
    7302:	bf14      	ite	ne
    7304:	2201      	movne	r2, #1
    7306:	2200      	moveq	r2, #0
    7308:	b2d2      	uxtb	r2, r2
    730a:	4313      	orrs	r3, r2
    730c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    730e:	6978      	ldr	r0, [r7, #20]
    7310:	4b12      	ldr	r3, [pc, #72]	; (735c <_sercom_i2c_sync_send_address+0x110>)
    7312:	4798      	blx	r3
    7314:	4603      	mov	r3, r0
    7316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    731a:	4323      	orrs	r3, r4
    731c:	4619      	mov	r1, r3
    731e:	6978      	ldr	r0, [r7, #20]
    7320:	4b0f      	ldr	r3, [pc, #60]	; (7360 <_sercom_i2c_sync_send_address+0x114>)
    7322:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7324:	f107 0308 	add.w	r3, r7, #8
    7328:	4619      	mov	r1, r3
    732a:	6878      	ldr	r0, [r7, #4]
    732c:	4b0d      	ldr	r3, [pc, #52]	; (7364 <_sercom_i2c_sync_send_address+0x118>)
    732e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    7330:	68bb      	ldr	r3, [r7, #8]
    7332:	693a      	ldr	r2, [r7, #16]
    7334:	4619      	mov	r1, r3
    7336:	6978      	ldr	r0, [r7, #20]
    7338:	4b0b      	ldr	r3, [pc, #44]	; (7368 <_sercom_i2c_sync_send_address+0x11c>)
    733a:	4798      	blx	r3
    733c:	4603      	mov	r3, r0
}
    733e:	4618      	mov	r0, r3
    7340:	371c      	adds	r7, #28
    7342:	46bd      	mov	sp, r7
    7344:	bd90      	pop	{r4, r7, pc}
    7346:	bf00      	nop
    7348:	000065b9 	.word	0x000065b9
    734c:	000100ec 	.word	0x000100ec
    7350:	00003e69 	.word	0x00003e69
    7354:	00006769 	.word	0x00006769
    7358:	00006791 	.word	0x00006791
    735c:	000068d1 	.word	0x000068d1
    7360:	000068ad 	.word	0x000068ad
    7364:	000071f1 	.word	0x000071f1
    7368:	00006b49 	.word	0x00006b49

0000736c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    736c:	b580      	push	{r7, lr}
    736e:	b086      	sub	sp, #24
    7370:	af00      	add	r7, sp, #0
    7372:	6078      	str	r0, [r7, #4]
    7374:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    7376:	687b      	ldr	r3, [r7, #4]
    7378:	691b      	ldr	r3, [r3, #16]
    737a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    737c:	687b      	ldr	r3, [r7, #4]
    737e:	2b00      	cmp	r3, #0
    7380:	bf14      	ite	ne
    7382:	2301      	movne	r3, #1
    7384:	2300      	moveq	r3, #0
    7386:	b2db      	uxtb	r3, r3
    7388:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    738c:	493b      	ldr	r1, [pc, #236]	; (747c <_i2c_m_sync_transfer+0x110>)
    738e:	4618      	mov	r0, r3
    7390:	4b3b      	ldr	r3, [pc, #236]	; (7480 <_i2c_m_sync_transfer+0x114>)
    7392:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    7394:	687b      	ldr	r3, [r7, #4]
    7396:	691b      	ldr	r3, [r3, #16]
    7398:	2b00      	cmp	r3, #0
    739a:	bf14      	ite	ne
    739c:	2301      	movne	r3, #1
    739e:	2300      	moveq	r3, #0
    73a0:	b2db      	uxtb	r3, r3
    73a2:	f240 6201 	movw	r2, #1537	; 0x601
    73a6:	4935      	ldr	r1, [pc, #212]	; (747c <_i2c_m_sync_transfer+0x110>)
    73a8:	4618      	mov	r0, r3
    73aa:	4b35      	ldr	r3, [pc, #212]	; (7480 <_i2c_m_sync_transfer+0x114>)
    73ac:	4798      	blx	r3
	ASSERT(msg);
    73ae:	683b      	ldr	r3, [r7, #0]
    73b0:	2b00      	cmp	r3, #0
    73b2:	bf14      	ite	ne
    73b4:	2301      	movne	r3, #1
    73b6:	2300      	moveq	r3, #0
    73b8:	b2db      	uxtb	r3, r3
    73ba:	f240 6202 	movw	r2, #1538	; 0x602
    73be:	492f      	ldr	r1, [pc, #188]	; (747c <_i2c_m_sync_transfer+0x110>)
    73c0:	4618      	mov	r0, r3
    73c2:	4b2f      	ldr	r3, [pc, #188]	; (7480 <_i2c_m_sync_transfer+0x114>)
    73c4:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    73c6:	687b      	ldr	r3, [r7, #4]
    73c8:	885b      	ldrh	r3, [r3, #2]
    73ca:	b29b      	uxth	r3, r3
    73cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    73d0:	2b00      	cmp	r3, #0
    73d2:	d002      	beq.n	73da <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    73d4:	f06f 0305 	mvn.w	r3, #5
    73d8:	e04c      	b.n	7474 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    73da:	683b      	ldr	r3, [r7, #0]
    73dc:	885b      	ldrh	r3, [r3, #2]
    73de:	b29b      	uxth	r3, r3
    73e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    73e4:	b29a      	uxth	r2, r3
    73e6:	683b      	ldr	r3, [r7, #0]
    73e8:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    73ea:	687b      	ldr	r3, [r7, #4]
    73ec:	683a      	ldr	r2, [r7, #0]
    73ee:	ca07      	ldmia	r2, {r0, r1, r2}
    73f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    73f4:	6938      	ldr	r0, [r7, #16]
    73f6:	4b23      	ldr	r3, [pc, #140]	; (7484 <_i2c_m_sync_transfer+0x118>)
    73f8:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    73fa:	6878      	ldr	r0, [r7, #4]
    73fc:	4b22      	ldr	r3, [pc, #136]	; (7488 <_i2c_m_sync_transfer+0x11c>)
    73fe:	4798      	blx	r3
    7400:	6178      	str	r0, [r7, #20]

	if (ret) {
    7402:	697b      	ldr	r3, [r7, #20]
    7404:	2b00      	cmp	r3, #0
    7406:	d02d      	beq.n	7464 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7408:	687b      	ldr	r3, [r7, #4]
    740a:	885b      	ldrh	r3, [r3, #2]
    740c:	b29b      	uxth	r3, r3
    740e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7412:	b29a      	uxth	r2, r3
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	805a      	strh	r2, [r3, #2]

		return ret;
    7418:	697b      	ldr	r3, [r7, #20]
    741a:	e02b      	b.n	7474 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    741c:	f107 030c 	add.w	r3, r7, #12
    7420:	4619      	mov	r1, r3
    7422:	6878      	ldr	r0, [r7, #4]
    7424:	4b19      	ldr	r3, [pc, #100]	; (748c <_i2c_m_sync_transfer+0x120>)
    7426:	4798      	blx	r3
    7428:	6178      	str	r0, [r7, #20]

		if (ret) {
    742a:	697b      	ldr	r3, [r7, #20]
    742c:	2b00      	cmp	r3, #0
    742e:	d012      	beq.n	7456 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7430:	683b      	ldr	r3, [r7, #0]
    7432:	885b      	ldrh	r3, [r3, #2]
    7434:	b29b      	uxth	r3, r3
    7436:	b21b      	sxth	r3, r3
    7438:	2b00      	cmp	r3, #0
    743a:	da02      	bge.n	7442 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    743c:	6938      	ldr	r0, [r7, #16]
    743e:	4b14      	ldr	r3, [pc, #80]	; (7490 <_i2c_m_sync_transfer+0x124>)
    7440:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7442:	687b      	ldr	r3, [r7, #4]
    7444:	885b      	ldrh	r3, [r3, #2]
    7446:	b29b      	uxth	r3, r3
    7448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    744c:	b29a      	uxth	r2, r3
    744e:	687b      	ldr	r3, [r7, #4]
    7450:	805a      	strh	r2, [r3, #2]

			return ret;
    7452:	697b      	ldr	r3, [r7, #20]
    7454:	e00e      	b.n	7474 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    7456:	68fb      	ldr	r3, [r7, #12]
    7458:	687a      	ldr	r2, [r7, #4]
    745a:	4619      	mov	r1, r3
    745c:	6938      	ldr	r0, [r7, #16]
    745e:	4b0d      	ldr	r3, [pc, #52]	; (7494 <_i2c_m_sync_transfer+0x128>)
    7460:	4798      	blx	r3
    7462:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7464:	687b      	ldr	r3, [r7, #4]
    7466:	885b      	ldrh	r3, [r3, #2]
    7468:	b29b      	uxth	r3, r3
    746a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    746e:	2b00      	cmp	r3, #0
    7470:	d1d4      	bne.n	741c <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    7472:	697b      	ldr	r3, [r7, #20]
}
    7474:	4618      	mov	r0, r3
    7476:	3718      	adds	r7, #24
    7478:	46bd      	mov	sp, r7
    747a:	bd80      	pop	{r7, pc}
    747c:	000100ec 	.word	0x000100ec
    7480:	00003e69 	.word	0x00003e69
    7484:	00006719 	.word	0x00006719
    7488:	0000724d 	.word	0x0000724d
    748c:	000071f1 	.word	0x000071f1
    7490:	00006b2d 	.word	0x00006b2d
    7494:	00006b49 	.word	0x00006b49

00007498 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    7498:	b580      	push	{r7, lr}
    749a:	b084      	sub	sp, #16
    749c:	af00      	add	r7, sp, #0
    749e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    74a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    74a4:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    74a6:	2304      	movs	r3, #4
    74a8:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    74aa:	687b      	ldr	r3, [r7, #4]
    74ac:	2b00      	cmp	r3, #0
    74ae:	bf14      	ite	ne
    74b0:	2301      	movne	r3, #1
    74b2:	2300      	moveq	r3, #0
    74b4:	b2db      	uxtb	r3, r3
    74b6:	f240 6235 	movw	r2, #1589	; 0x635
    74ba:	4915      	ldr	r1, [pc, #84]	; (7510 <_i2c_m_enable_implementation+0x78>)
    74bc:	4618      	mov	r0, r3
    74be:	4b15      	ldr	r3, [pc, #84]	; (7514 <_i2c_m_enable_implementation+0x7c>)
    74c0:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    74c2:	6878      	ldr	r0, [r7, #4]
    74c4:	4b14      	ldr	r3, [pc, #80]	; (7518 <_i2c_m_enable_implementation+0x80>)
    74c6:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    74c8:	e016      	b.n	74f8 <_i2c_m_enable_implementation+0x60>
		timeout--;
    74ca:	68fb      	ldr	r3, [r7, #12]
    74cc:	3b01      	subs	r3, #1
    74ce:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    74d0:	68fb      	ldr	r3, [r7, #12]
    74d2:	2b00      	cmp	r3, #0
    74d4:	dc10      	bgt.n	74f8 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    74d6:	68bb      	ldr	r3, [r7, #8]
    74d8:	3b01      	subs	r3, #1
    74da:	60bb      	str	r3, [r7, #8]
    74dc:	68bb      	ldr	r3, [r7, #8]
    74de:	2b00      	cmp	r3, #0
    74e0:	d007      	beq.n	74f2 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    74e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    74e6:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    74e8:	2110      	movs	r1, #16
    74ea:	6878      	ldr	r0, [r7, #4]
    74ec:	4b0b      	ldr	r3, [pc, #44]	; (751c <_i2c_m_enable_implementation+0x84>)
    74ee:	4798      	blx	r3
    74f0:	e002      	b.n	74f8 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    74f2:	f06f 0305 	mvn.w	r3, #5
    74f6:	e006      	b.n	7506 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    74f8:	6878      	ldr	r0, [r7, #4]
    74fa:	4b09      	ldr	r3, [pc, #36]	; (7520 <_i2c_m_enable_implementation+0x88>)
    74fc:	4798      	blx	r3
    74fe:	4603      	mov	r3, r0
    7500:	2b01      	cmp	r3, #1
    7502:	d1e2      	bne.n	74ca <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    7504:	2300      	movs	r3, #0
}
    7506:	4618      	mov	r0, r3
    7508:	3710      	adds	r7, #16
    750a:	46bd      	mov	sp, r7
    750c:	bd80      	pop	{r7, pc}
    750e:	bf00      	nop
    7510:	000100ec 	.word	0x000100ec
    7514:	00003e69 	.word	0x00003e69
    7518:	00006569 	.word	0x00006569
    751c:	00006a15 	.word	0x00006a15
    7520:	000069c5 	.word	0x000069c5

00007524 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    7524:	b580      	push	{r7, lr}
    7526:	b084      	sub	sp, #16
    7528:	af00      	add	r7, sp, #0
    752a:	6078      	str	r0, [r7, #4]
    752c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    752e:	6838      	ldr	r0, [r7, #0]
    7530:	4b42      	ldr	r3, [pc, #264]	; (763c <_i2c_m_sync_init_impl+0x118>)
    7532:	4798      	blx	r3
    7534:	4603      	mov	r3, r0
    7536:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7538:	2101      	movs	r1, #1
    753a:	6838      	ldr	r0, [r7, #0]
    753c:	4b40      	ldr	r3, [pc, #256]	; (7640 <_i2c_m_sync_init_impl+0x11c>)
    753e:	4798      	blx	r3
    7540:	4603      	mov	r3, r0
    7542:	f083 0301 	eor.w	r3, r3, #1
    7546:	b2db      	uxtb	r3, r3
    7548:	2b00      	cmp	r3, #0
    754a:	d020      	beq.n	758e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    754c:	7bfa      	ldrb	r2, [r7, #15]
    754e:	493d      	ldr	r1, [pc, #244]	; (7644 <_i2c_m_sync_init_impl+0x120>)
    7550:	4613      	mov	r3, r2
    7552:	005b      	lsls	r3, r3, #1
    7554:	4413      	add	r3, r2
    7556:	00db      	lsls	r3, r3, #3
    7558:	440b      	add	r3, r1
    755a:	3304      	adds	r3, #4
    755c:	681b      	ldr	r3, [r3, #0]
    755e:	f003 031c 	and.w	r3, r3, #28
    7562:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    7564:	2102      	movs	r1, #2
    7566:	6838      	ldr	r0, [r7, #0]
    7568:	4b37      	ldr	r3, [pc, #220]	; (7648 <_i2c_m_sync_init_impl+0x124>)
    756a:	4798      	blx	r3
    756c:	4603      	mov	r3, r0
    756e:	2b00      	cmp	r3, #0
    7570:	d006      	beq.n	7580 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    7572:	6838      	ldr	r0, [r7, #0]
    7574:	4b35      	ldr	r3, [pc, #212]	; (764c <_i2c_m_sync_init_impl+0x128>)
    7576:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    7578:	2102      	movs	r1, #2
    757a:	6838      	ldr	r0, [r7, #0]
    757c:	4b34      	ldr	r3, [pc, #208]	; (7650 <_i2c_m_sync_init_impl+0x12c>)
    757e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    7580:	68bb      	ldr	r3, [r7, #8]
    7582:	f043 0301 	orr.w	r3, r3, #1
    7586:	4619      	mov	r1, r3
    7588:	6838      	ldr	r0, [r7, #0]
    758a:	4b32      	ldr	r3, [pc, #200]	; (7654 <_i2c_m_sync_init_impl+0x130>)
    758c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    758e:	2101      	movs	r1, #1
    7590:	6838      	ldr	r0, [r7, #0]
    7592:	4b2f      	ldr	r3, [pc, #188]	; (7650 <_i2c_m_sync_init_impl+0x12c>)
    7594:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    7596:	7bfa      	ldrb	r2, [r7, #15]
    7598:	492a      	ldr	r1, [pc, #168]	; (7644 <_i2c_m_sync_init_impl+0x120>)
    759a:	4613      	mov	r3, r2
    759c:	005b      	lsls	r3, r3, #1
    759e:	4413      	add	r3, r2
    75a0:	00db      	lsls	r3, r3, #3
    75a2:	440b      	add	r3, r1
    75a4:	3304      	adds	r3, #4
    75a6:	681b      	ldr	r3, [r3, #0]
    75a8:	4619      	mov	r1, r3
    75aa:	6838      	ldr	r0, [r7, #0]
    75ac:	4b29      	ldr	r3, [pc, #164]	; (7654 <_i2c_m_sync_init_impl+0x130>)
    75ae:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    75b0:	7bfa      	ldrb	r2, [r7, #15]
    75b2:	4924      	ldr	r1, [pc, #144]	; (7644 <_i2c_m_sync_init_impl+0x120>)
    75b4:	4613      	mov	r3, r2
    75b6:	005b      	lsls	r3, r3, #1
    75b8:	4413      	add	r3, r2
    75ba:	00db      	lsls	r3, r3, #3
    75bc:	440b      	add	r3, r1
    75be:	3308      	adds	r3, #8
    75c0:	681b      	ldr	r3, [r3, #0]
    75c2:	4619      	mov	r1, r3
    75c4:	6838      	ldr	r0, [r7, #0]
    75c6:	4b24      	ldr	r3, [pc, #144]	; (7658 <_i2c_m_sync_init_impl+0x134>)
    75c8:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    75ca:	7bfa      	ldrb	r2, [r7, #15]
    75cc:	491d      	ldr	r1, [pc, #116]	; (7644 <_i2c_m_sync_init_impl+0x120>)
    75ce:	4613      	mov	r3, r2
    75d0:	005b      	lsls	r3, r3, #1
    75d2:	4413      	add	r3, r2
    75d4:	00db      	lsls	r3, r3, #3
    75d6:	440b      	add	r3, r1
    75d8:	330c      	adds	r3, #12
    75da:	681b      	ldr	r3, [r3, #0]
    75dc:	4619      	mov	r1, r3
    75de:	6838      	ldr	r0, [r7, #0]
    75e0:	4b1e      	ldr	r3, [pc, #120]	; (765c <_i2c_m_sync_init_impl+0x138>)
    75e2:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    75e4:	7bfa      	ldrb	r2, [r7, #15]
    75e6:	4917      	ldr	r1, [pc, #92]	; (7644 <_i2c_m_sync_init_impl+0x120>)
    75e8:	4613      	mov	r3, r2
    75ea:	005b      	lsls	r3, r3, #1
    75ec:	4413      	add	r3, r2
    75ee:	00db      	lsls	r3, r3, #3
    75f0:	440b      	add	r3, r1
    75f2:	3304      	adds	r3, #4
    75f4:	681b      	ldr	r3, [r3, #0]
    75f6:	0e1b      	lsrs	r3, r3, #24
    75f8:	b29b      	uxth	r3, r3
    75fa:	f003 0303 	and.w	r3, r3, #3
    75fe:	b29a      	uxth	r2, r3
    7600:	687b      	ldr	r3, [r7, #4]
    7602:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	899b      	ldrh	r3, [r3, #12]
    7608:	2b01      	cmp	r3, #1
    760a:	bf8c      	ite	hi
    760c:	2301      	movhi	r3, #1
    760e:	2300      	movls	r3, #0
    7610:	b2db      	uxtb	r3, r3
    7612:	4619      	mov	r1, r3
    7614:	6838      	ldr	r0, [r7, #0]
    7616:	4b12      	ldr	r3, [pc, #72]	; (7660 <_i2c_m_sync_init_impl+0x13c>)
    7618:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    761a:	7bfa      	ldrb	r2, [r7, #15]
    761c:	4909      	ldr	r1, [pc, #36]	; (7644 <_i2c_m_sync_init_impl+0x120>)
    761e:	4613      	mov	r3, r2
    7620:	005b      	lsls	r3, r3, #1
    7622:	4413      	add	r3, r2
    7624:	00db      	lsls	r3, r3, #3
    7626:	440b      	add	r3, r1
    7628:	3312      	adds	r3, #18
    762a:	881a      	ldrh	r2, [r3, #0]
    762c:	687b      	ldr	r3, [r7, #4]
    762e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7630:	2300      	movs	r3, #0
}
    7632:	4618      	mov	r0, r3
    7634:	3710      	adds	r7, #16
    7636:	46bd      	mov	sp, r7
    7638:	bd80      	pop	{r7, pc}
    763a:	bf00      	nop
    763c:	00006ac5 	.word	0x00006ac5
    7640:	00006429 	.word	0x00006429
    7644:	20000018 	.word	0x20000018
    7648:	000065e9 	.word	0x000065e9
    764c:	00006591 	.word	0x00006591
    7650:	00006405 	.word	0x00006405
    7654:	00006619 	.word	0x00006619
    7658:	000067e9 	.word	0x000067e9
    765c:	00006831 	.word	0x00006831
    7660:	0000686d 	.word	0x0000686d

00007664 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    7664:	b580      	push	{r7, lr}
    7666:	b082      	sub	sp, #8
    7668:	af00      	add	r7, sp, #0
    766a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    766c:	2101      	movs	r1, #1
    766e:	6878      	ldr	r0, [r7, #4]
    7670:	4b07      	ldr	r3, [pc, #28]	; (7690 <_spi_sync_enable+0x2c>)
    7672:	4798      	blx	r3
    7674:	4603      	mov	r3, r0
    7676:	2b00      	cmp	r3, #0
    7678:	d002      	beq.n	7680 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    767a:	f06f 0303 	mvn.w	r3, #3
    767e:	e003      	b.n	7688 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    7680:	6878      	ldr	r0, [r7, #4]
    7682:	4b04      	ldr	r3, [pc, #16]	; (7694 <_spi_sync_enable+0x30>)
    7684:	4798      	blx	r3

	return ERR_NONE;
    7686:	2300      	movs	r3, #0
}
    7688:	4618      	mov	r0, r3
    768a:	3708      	adds	r7, #8
    768c:	46bd      	mov	sp, r7
    768e:	bd80      	pop	{r7, pc}
    7690:	00006475 	.word	0x00006475
    7694:	0000663d 	.word	0x0000663d

00007698 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    7698:	b580      	push	{r7, lr}
    769a:	b082      	sub	sp, #8
    769c:	af00      	add	r7, sp, #0
    769e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    76a0:	2101      	movs	r1, #1
    76a2:	6878      	ldr	r0, [r7, #4]
    76a4:	4b07      	ldr	r3, [pc, #28]	; (76c4 <_spi_sync_disable+0x2c>)
    76a6:	4798      	blx	r3
    76a8:	4603      	mov	r3, r0
    76aa:	2b00      	cmp	r3, #0
    76ac:	d002      	beq.n	76b4 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    76ae:	f06f 0303 	mvn.w	r3, #3
    76b2:	e003      	b.n	76bc <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    76b4:	6878      	ldr	r0, [r7, #4]
    76b6:	4b04      	ldr	r3, [pc, #16]	; (76c8 <_spi_sync_disable+0x30>)
    76b8:	4798      	blx	r3

	return ERR_NONE;
    76ba:	2300      	movs	r3, #0
}
    76bc:	4618      	mov	r0, r3
    76be:	3708      	adds	r7, #8
    76c0:	46bd      	mov	sp, r7
    76c2:	bd80      	pop	{r7, pc}
    76c4:	00006475 	.word	0x00006475
    76c8:	0000669d 	.word	0x0000669d

000076cc <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    76cc:	b580      	push	{r7, lr}
    76ce:	b082      	sub	sp, #8
    76d0:	af00      	add	r7, sp, #0
    76d2:	6078      	str	r0, [r7, #4]
    76d4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    76d6:	687b      	ldr	r3, [r7, #4]
    76d8:	2b00      	cmp	r3, #0
    76da:	d004      	beq.n	76e6 <_spi_load_regs_master+0x1a>
    76dc:	683b      	ldr	r3, [r7, #0]
    76de:	2b00      	cmp	r3, #0
    76e0:	d001      	beq.n	76e6 <_spi_load_regs_master+0x1a>
    76e2:	2301      	movs	r3, #1
    76e4:	e000      	b.n	76e8 <_spi_load_regs_master+0x1c>
    76e6:	2300      	movs	r3, #0
    76e8:	f003 0301 	and.w	r3, r3, #1
    76ec:	b2db      	uxtb	r3, r3
    76ee:	f640 1239 	movw	r2, #2361	; 0x939
    76f2:	4915      	ldr	r1, [pc, #84]	; (7748 <_spi_load_regs_master+0x7c>)
    76f4:	4618      	mov	r0, r3
    76f6:	4b15      	ldr	r3, [pc, #84]	; (774c <_spi_load_regs_master+0x80>)
    76f8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    76fa:	683b      	ldr	r3, [r7, #0]
    76fc:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    76fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7702:	f023 0301 	bic.w	r3, r3, #1
    7706:	4619      	mov	r1, r3
    7708:	6878      	ldr	r0, [r7, #4]
    770a:	4b11      	ldr	r3, [pc, #68]	; (7750 <_spi_load_regs_master+0x84>)
    770c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    770e:	683b      	ldr	r3, [r7, #0]
    7710:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    7712:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    7716:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    771a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    771e:	4619      	mov	r1, r3
    7720:	6878      	ldr	r0, [r7, #4]
    7722:	4b0c      	ldr	r3, [pc, #48]	; (7754 <_spi_load_regs_master+0x88>)
    7724:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    7726:	683b      	ldr	r3, [r7, #0]
    7728:	7b1b      	ldrb	r3, [r3, #12]
    772a:	4619      	mov	r1, r3
    772c:	6878      	ldr	r0, [r7, #4]
    772e:	4b0a      	ldr	r3, [pc, #40]	; (7758 <_spi_load_regs_master+0x8c>)
    7730:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7732:	683b      	ldr	r3, [r7, #0]
    7734:	7b5b      	ldrb	r3, [r3, #13]
    7736:	4619      	mov	r1, r3
    7738:	6878      	ldr	r0, [r7, #4]
    773a:	4b08      	ldr	r3, [pc, #32]	; (775c <_spi_load_regs_master+0x90>)
    773c:	4798      	blx	r3
}
    773e:	bf00      	nop
    7740:	3708      	adds	r7, #8
    7742:	46bd      	mov	sp, r7
    7744:	bd80      	pop	{r7, pc}
    7746:	bf00      	nop
    7748:	000100ec 	.word	0x000100ec
    774c:	00003e69 	.word	0x00003e69
    7750:	000066f5 	.word	0x000066f5
    7754:	0000680d 	.word	0x0000680d
    7758:	0000684d 	.word	0x0000684d
    775c:	00006985 	.word	0x00006985

00007760 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7760:	b580      	push	{r7, lr}
    7762:	b082      	sub	sp, #8
    7764:	af00      	add	r7, sp, #0
    7766:	6078      	str	r0, [r7, #4]
    7768:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    776a:	687b      	ldr	r3, [r7, #4]
    776c:	2b00      	cmp	r3, #0
    776e:	d004      	beq.n	777a <_spi_load_regs_slave+0x1a>
    7770:	683b      	ldr	r3, [r7, #0]
    7772:	2b00      	cmp	r3, #0
    7774:	d001      	beq.n	777a <_spi_load_regs_slave+0x1a>
    7776:	2301      	movs	r3, #1
    7778:	e000      	b.n	777c <_spi_load_regs_slave+0x1c>
    777a:	2300      	movs	r3, #0
    777c:	f003 0301 	and.w	r3, r3, #1
    7780:	b2db      	uxtb	r3, r3
    7782:	f640 124d 	movw	r2, #2381	; 0x94d
    7786:	491a      	ldr	r1, [pc, #104]	; (77f0 <_spi_load_regs_slave+0x90>)
    7788:	4618      	mov	r0, r3
    778a:	4b1a      	ldr	r3, [pc, #104]	; (77f4 <_spi_load_regs_slave+0x94>)
    778c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    778e:	683b      	ldr	r3, [r7, #0]
    7790:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7792:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7796:	f023 0301 	bic.w	r3, r3, #1
    779a:	4619      	mov	r1, r3
    779c:	6878      	ldr	r0, [r7, #4]
    779e:	4b16      	ldr	r3, [pc, #88]	; (77f8 <_spi_load_regs_slave+0x98>)
    77a0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    77a2:	683b      	ldr	r3, [r7, #0]
    77a4:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    77a6:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    77aa:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    77ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    77b2:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    77b6:	4619      	mov	r1, r3
    77b8:	6878      	ldr	r0, [r7, #4]
    77ba:	4b10      	ldr	r3, [pc, #64]	; (77fc <_spi_load_regs_slave+0x9c>)
    77bc:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    77be:	683b      	ldr	r3, [r7, #0]
    77c0:	689b      	ldr	r3, [r3, #8]
    77c2:	4619      	mov	r1, r3
    77c4:	6878      	ldr	r0, [r7, #4]
    77c6:	4b0e      	ldr	r3, [pc, #56]	; (7800 <_spi_load_regs_slave+0xa0>)
    77c8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    77ca:	683b      	ldr	r3, [r7, #0]
    77cc:	7b5b      	ldrb	r3, [r3, #13]
    77ce:	4619      	mov	r1, r3
    77d0:	6878      	ldr	r0, [r7, #4]
    77d2:	4b0c      	ldr	r3, [pc, #48]	; (7804 <_spi_load_regs_slave+0xa4>)
    77d4:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    77d6:	bf00      	nop
    77d8:	f04f 31ff 	mov.w	r1, #4294967295
    77dc:	6878      	ldr	r0, [r7, #4]
    77de:	4b0a      	ldr	r3, [pc, #40]	; (7808 <_spi_load_regs_slave+0xa8>)
    77e0:	4798      	blx	r3
    77e2:	4603      	mov	r3, r0
    77e4:	2b00      	cmp	r3, #0
    77e6:	d1f7      	bne.n	77d8 <_spi_load_regs_slave+0x78>
		;
}
    77e8:	bf00      	nop
    77ea:	3708      	adds	r7, #8
    77ec:	46bd      	mov	sp, r7
    77ee:	bd80      	pop	{r7, pc}
    77f0:	000100ec 	.word	0x000100ec
    77f4:	00003e69 	.word	0x00003e69
    77f8:	000066f5 	.word	0x000066f5
    77fc:	0000680d 	.word	0x0000680d
    7800:	000068f1 	.word	0x000068f1
    7804:	00006985 	.word	0x00006985
    7808:	00006475 	.word	0x00006475

0000780c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    780c:	b580      	push	{r7, lr}
    780e:	b084      	sub	sp, #16
    7810:	af00      	add	r7, sp, #0
    7812:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	4618      	mov	r0, r3
    7818:	4b11      	ldr	r3, [pc, #68]	; (7860 <_spi_get_regs+0x54>)
    781a:	4798      	blx	r3
    781c:	4603      	mov	r3, r0
    781e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7820:	2300      	movs	r3, #0
    7822:	73fb      	strb	r3, [r7, #15]
    7824:	e014      	b.n	7850 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    7826:	7bfa      	ldrb	r2, [r7, #15]
    7828:	490e      	ldr	r1, [pc, #56]	; (7864 <_spi_get_regs+0x58>)
    782a:	4613      	mov	r3, r2
    782c:	011b      	lsls	r3, r3, #4
    782e:	4413      	add	r3, r2
    7830:	440b      	add	r3, r1
    7832:	3310      	adds	r3, #16
    7834:	781b      	ldrb	r3, [r3, #0]
    7836:	7bba      	ldrb	r2, [r7, #14]
    7838:	429a      	cmp	r2, r3
    783a:	d106      	bne.n	784a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    783c:	7bfa      	ldrb	r2, [r7, #15]
    783e:	4613      	mov	r3, r2
    7840:	011b      	lsls	r3, r3, #4
    7842:	4413      	add	r3, r2
    7844:	4a07      	ldr	r2, [pc, #28]	; (7864 <_spi_get_regs+0x58>)
    7846:	4413      	add	r3, r2
    7848:	e006      	b.n	7858 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    784a:	7bfb      	ldrb	r3, [r7, #15]
    784c:	3301      	adds	r3, #1
    784e:	73fb      	strb	r3, [r7, #15]
    7850:	7bfb      	ldrb	r3, [r7, #15]
    7852:	2b01      	cmp	r3, #1
    7854:	d9e7      	bls.n	7826 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    7856:	2300      	movs	r3, #0
}
    7858:	4618      	mov	r0, r3
    785a:	3710      	adds	r7, #16
    785c:	46bd      	mov	sp, r7
    785e:	bd80      	pop	{r7, pc}
    7860:	00006a3d 	.word	0x00006a3d
    7864:	00010128 	.word	0x00010128

00007868 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    7868:	b580      	push	{r7, lr}
    786a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    786c:	4b03      	ldr	r3, [pc, #12]	; (787c <SERCOM7_0_Handler+0x14>)
    786e:	681b      	ldr	r3, [r3, #0]
    7870:	4618      	mov	r0, r3
    7872:	4b03      	ldr	r3, [pc, #12]	; (7880 <SERCOM7_0_Handler+0x18>)
    7874:	4798      	blx	r3
}
    7876:	bf00      	nop
    7878:	bd80      	pop	{r7, pc}
    787a:	bf00      	nop
    787c:	20000a78 	.word	0x20000a78
    7880:	00006d79 	.word	0x00006d79

00007884 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    7884:	b580      	push	{r7, lr}
    7886:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7888:	4b03      	ldr	r3, [pc, #12]	; (7898 <SERCOM7_1_Handler+0x14>)
    788a:	681b      	ldr	r3, [r3, #0]
    788c:	4618      	mov	r0, r3
    788e:	4b03      	ldr	r3, [pc, #12]	; (789c <SERCOM7_1_Handler+0x18>)
    7890:	4798      	blx	r3
}
    7892:	bf00      	nop
    7894:	bd80      	pop	{r7, pc}
    7896:	bf00      	nop
    7898:	20000a78 	.word	0x20000a78
    789c:	00006d79 	.word	0x00006d79

000078a0 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    78a0:	b580      	push	{r7, lr}
    78a2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    78a4:	4b03      	ldr	r3, [pc, #12]	; (78b4 <SERCOM7_2_Handler+0x14>)
    78a6:	681b      	ldr	r3, [r3, #0]
    78a8:	4618      	mov	r0, r3
    78aa:	4b03      	ldr	r3, [pc, #12]	; (78b8 <SERCOM7_2_Handler+0x18>)
    78ac:	4798      	blx	r3
}
    78ae:	bf00      	nop
    78b0:	bd80      	pop	{r7, pc}
    78b2:	bf00      	nop
    78b4:	20000a78 	.word	0x20000a78
    78b8:	00006d79 	.word	0x00006d79

000078bc <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    78bc:	b580      	push	{r7, lr}
    78be:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    78c0:	4b03      	ldr	r3, [pc, #12]	; (78d0 <SERCOM7_3_Handler+0x14>)
    78c2:	681b      	ldr	r3, [r3, #0]
    78c4:	4618      	mov	r0, r3
    78c6:	4b03      	ldr	r3, [pc, #12]	; (78d4 <SERCOM7_3_Handler+0x18>)
    78c8:	4798      	blx	r3
}
    78ca:	bf00      	nop
    78cc:	bd80      	pop	{r7, pc}
    78ce:	bf00      	nop
    78d0:	20000a78 	.word	0x20000a78
    78d4:	00006d79 	.word	0x00006d79

000078d8 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    78d8:	b580      	push	{r7, lr}
    78da:	b084      	sub	sp, #16
    78dc:	af00      	add	r7, sp, #0
    78de:	6078      	str	r0, [r7, #4]
    78e0:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    78e2:	683b      	ldr	r3, [r7, #0]
    78e4:	4618      	mov	r0, r3
    78e6:	4b35      	ldr	r3, [pc, #212]	; (79bc <_spi_m_sync_init+0xe4>)
    78e8:	4798      	blx	r3
    78ea:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    78ec:	687b      	ldr	r3, [r7, #4]
    78ee:	2b00      	cmp	r3, #0
    78f0:	d004      	beq.n	78fc <_spi_m_sync_init+0x24>
    78f2:	683b      	ldr	r3, [r7, #0]
    78f4:	2b00      	cmp	r3, #0
    78f6:	d001      	beq.n	78fc <_spi_m_sync_init+0x24>
    78f8:	2301      	movs	r3, #1
    78fa:	e000      	b.n	78fe <_spi_m_sync_init+0x26>
    78fc:	2300      	movs	r3, #0
    78fe:	f003 0301 	and.w	r3, r3, #1
    7902:	b2db      	uxtb	r3, r3
    7904:	f640 128c 	movw	r2, #2444	; 0x98c
    7908:	492d      	ldr	r1, [pc, #180]	; (79c0 <_spi_m_sync_init+0xe8>)
    790a:	4618      	mov	r0, r3
    790c:	4b2d      	ldr	r3, [pc, #180]	; (79c4 <_spi_m_sync_init+0xec>)
    790e:	4798      	blx	r3

	if (regs == NULL) {
    7910:	68fb      	ldr	r3, [r7, #12]
    7912:	2b00      	cmp	r3, #0
    7914:	d102      	bne.n	791c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    7916:	f06f 030c 	mvn.w	r3, #12
    791a:	e04a      	b.n	79b2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    791c:	2101      	movs	r1, #1
    791e:	6838      	ldr	r0, [r7, #0]
    7920:	4b29      	ldr	r3, [pc, #164]	; (79c8 <_spi_m_sync_init+0xf0>)
    7922:	4798      	blx	r3
    7924:	4603      	mov	r3, r0
    7926:	f083 0301 	eor.w	r3, r3, #1
    792a:	b2db      	uxtb	r3, r3
    792c:	2b00      	cmp	r3, #0
    792e:	d019      	beq.n	7964 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7930:	68fb      	ldr	r3, [r7, #12]
    7932:	681b      	ldr	r3, [r3, #0]
    7934:	f003 031c 	and.w	r3, r3, #28
    7938:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    793a:	2102      	movs	r1, #2
    793c:	6838      	ldr	r0, [r7, #0]
    793e:	4b23      	ldr	r3, [pc, #140]	; (79cc <_spi_m_sync_init+0xf4>)
    7940:	4798      	blx	r3
    7942:	4603      	mov	r3, r0
    7944:	2b00      	cmp	r3, #0
    7946:	d006      	beq.n	7956 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7948:	6838      	ldr	r0, [r7, #0]
    794a:	4b21      	ldr	r3, [pc, #132]	; (79d0 <_spi_m_sync_init+0xf8>)
    794c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    794e:	2102      	movs	r1, #2
    7950:	6838      	ldr	r0, [r7, #0]
    7952:	4b20      	ldr	r3, [pc, #128]	; (79d4 <_spi_m_sync_init+0xfc>)
    7954:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7956:	68bb      	ldr	r3, [r7, #8]
    7958:	f043 0301 	orr.w	r3, r3, #1
    795c:	4619      	mov	r1, r3
    795e:	6838      	ldr	r0, [r7, #0]
    7960:	4b1d      	ldr	r3, [pc, #116]	; (79d8 <_spi_m_sync_init+0x100>)
    7962:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    7964:	2101      	movs	r1, #1
    7966:	6838      	ldr	r0, [r7, #0]
    7968:	4b1a      	ldr	r3, [pc, #104]	; (79d4 <_spi_m_sync_init+0xfc>)
    796a:	4798      	blx	r3

	dev->prvt = hw;
    796c:	687b      	ldr	r3, [r7, #4]
    796e:	683a      	ldr	r2, [r7, #0]
    7970:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7972:	68fb      	ldr	r3, [r7, #12]
    7974:	681b      	ldr	r3, [r3, #0]
    7976:	f003 031c 	and.w	r3, r3, #28
    797a:	2b08      	cmp	r3, #8
    797c:	d104      	bne.n	7988 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    797e:	68f9      	ldr	r1, [r7, #12]
    7980:	6838      	ldr	r0, [r7, #0]
    7982:	4b16      	ldr	r3, [pc, #88]	; (79dc <_spi_m_sync_init+0x104>)
    7984:	4798      	blx	r3
    7986:	e003      	b.n	7990 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7988:	68f9      	ldr	r1, [r7, #12]
    798a:	6838      	ldr	r0, [r7, #0]
    798c:	4b14      	ldr	r3, [pc, #80]	; (79e0 <_spi_m_sync_init+0x108>)
    798e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7990:	68fb      	ldr	r3, [r7, #12]
    7992:	685b      	ldr	r3, [r3, #4]
    7994:	f003 0307 	and.w	r3, r3, #7
    7998:	2b00      	cmp	r3, #0
    799a:	d101      	bne.n	79a0 <_spi_m_sync_init+0xc8>
    799c:	2201      	movs	r2, #1
    799e:	e000      	b.n	79a2 <_spi_m_sync_init+0xca>
    79a0:	2202      	movs	r2, #2
    79a2:	687b      	ldr	r3, [r7, #4]
    79a4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    79a6:	68fb      	ldr	r3, [r7, #12]
    79a8:	89db      	ldrh	r3, [r3, #14]
    79aa:	b29a      	uxth	r2, r3
    79ac:	687b      	ldr	r3, [r7, #4]
    79ae:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    79b0:	2300      	movs	r3, #0
}
    79b2:	4618      	mov	r0, r3
    79b4:	3710      	adds	r7, #16
    79b6:	46bd      	mov	sp, r7
    79b8:	bd80      	pop	{r7, pc}
    79ba:	bf00      	nop
    79bc:	0000780d 	.word	0x0000780d
    79c0:	000100ec 	.word	0x000100ec
    79c4:	00003e69 	.word	0x00003e69
    79c8:	00006475 	.word	0x00006475
    79cc:	000066c5 	.word	0x000066c5
    79d0:	0000669d 	.word	0x0000669d
    79d4:	00006451 	.word	0x00006451
    79d8:	000066f5 	.word	0x000066f5
    79dc:	00007761 	.word	0x00007761
    79e0:	000076cd 	.word	0x000076cd

000079e4 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    79e4:	b580      	push	{r7, lr}
    79e6:	b082      	sub	sp, #8
    79e8:	af00      	add	r7, sp, #0
    79ea:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    79ec:	687b      	ldr	r3, [r7, #4]
    79ee:	2b00      	cmp	r3, #0
    79f0:	d005      	beq.n	79fe <_spi_m_sync_enable+0x1a>
    79f2:	687b      	ldr	r3, [r7, #4]
    79f4:	681b      	ldr	r3, [r3, #0]
    79f6:	2b00      	cmp	r3, #0
    79f8:	d001      	beq.n	79fe <_spi_m_sync_enable+0x1a>
    79fa:	2301      	movs	r3, #1
    79fc:	e000      	b.n	7a00 <_spi_m_sync_enable+0x1c>
    79fe:	2300      	movs	r3, #0
    7a00:	f003 0301 	and.w	r3, r3, #1
    7a04:	b2db      	uxtb	r3, r3
    7a06:	f640 12eb 	movw	r2, #2539	; 0x9eb
    7a0a:	4907      	ldr	r1, [pc, #28]	; (7a28 <_spi_m_sync_enable+0x44>)
    7a0c:	4618      	mov	r0, r3
    7a0e:	4b07      	ldr	r3, [pc, #28]	; (7a2c <_spi_m_sync_enable+0x48>)
    7a10:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    7a12:	687b      	ldr	r3, [r7, #4]
    7a14:	681b      	ldr	r3, [r3, #0]
    7a16:	4618      	mov	r0, r3
    7a18:	4b05      	ldr	r3, [pc, #20]	; (7a30 <_spi_m_sync_enable+0x4c>)
    7a1a:	4798      	blx	r3
    7a1c:	4603      	mov	r3, r0
}
    7a1e:	4618      	mov	r0, r3
    7a20:	3708      	adds	r7, #8
    7a22:	46bd      	mov	sp, r7
    7a24:	bd80      	pop	{r7, pc}
    7a26:	bf00      	nop
    7a28:	000100ec 	.word	0x000100ec
    7a2c:	00003e69 	.word	0x00003e69
    7a30:	00007665 	.word	0x00007665

00007a34 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    7a34:	b580      	push	{r7, lr}
    7a36:	b082      	sub	sp, #8
    7a38:	af00      	add	r7, sp, #0
    7a3a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7a3c:	687b      	ldr	r3, [r7, #4]
    7a3e:	2b00      	cmp	r3, #0
    7a40:	d005      	beq.n	7a4e <_spi_m_sync_disable+0x1a>
    7a42:	687b      	ldr	r3, [r7, #4]
    7a44:	681b      	ldr	r3, [r3, #0]
    7a46:	2b00      	cmp	r3, #0
    7a48:	d001      	beq.n	7a4e <_spi_m_sync_disable+0x1a>
    7a4a:	2301      	movs	r3, #1
    7a4c:	e000      	b.n	7a50 <_spi_m_sync_disable+0x1c>
    7a4e:	2300      	movs	r3, #0
    7a50:	f003 0301 	and.w	r3, r3, #1
    7a54:	b2db      	uxtb	r3, r3
    7a56:	f640 2207 	movw	r2, #2567	; 0xa07
    7a5a:	4907      	ldr	r1, [pc, #28]	; (7a78 <_spi_m_sync_disable+0x44>)
    7a5c:	4618      	mov	r0, r3
    7a5e:	4b07      	ldr	r3, [pc, #28]	; (7a7c <_spi_m_sync_disable+0x48>)
    7a60:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    7a62:	687b      	ldr	r3, [r7, #4]
    7a64:	681b      	ldr	r3, [r3, #0]
    7a66:	4618      	mov	r0, r3
    7a68:	4b05      	ldr	r3, [pc, #20]	; (7a80 <_spi_m_sync_disable+0x4c>)
    7a6a:	4798      	blx	r3
    7a6c:	4603      	mov	r3, r0
}
    7a6e:	4618      	mov	r0, r3
    7a70:	3708      	adds	r7, #8
    7a72:	46bd      	mov	sp, r7
    7a74:	bd80      	pop	{r7, pc}
    7a76:	bf00      	nop
    7a78:	000100ec 	.word	0x000100ec
    7a7c:	00003e69 	.word	0x00003e69
    7a80:	00007699 	.word	0x00007699

00007a84 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    7a84:	b580      	push	{r7, lr}
    7a86:	b082      	sub	sp, #8
    7a88:	af00      	add	r7, sp, #0
    7a8a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7a8c:	bf00      	nop
    7a8e:	2103      	movs	r1, #3
    7a90:	6878      	ldr	r0, [r7, #4]
    7a92:	4b06      	ldr	r3, [pc, #24]	; (7aac <_spi_wait_bus_idle+0x28>)
    7a94:	4798      	blx	r3
    7a96:	4603      	mov	r3, r0
    7a98:	2b00      	cmp	r3, #0
    7a9a:	d0f8      	beq.n	7a8e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7a9c:	2103      	movs	r1, #3
    7a9e:	6878      	ldr	r0, [r7, #4]
    7aa0:	4b03      	ldr	r3, [pc, #12]	; (7ab0 <_spi_wait_bus_idle+0x2c>)
    7aa2:	4798      	blx	r3
}
    7aa4:	bf00      	nop
    7aa6:	3708      	adds	r7, #8
    7aa8:	46bd      	mov	sp, r7
    7aaa:	bd80      	pop	{r7, pc}
    7aac:	00006509 	.word	0x00006509
    7ab0:	0000654b 	.word	0x0000654b

00007ab4 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    7ab4:	b580      	push	{r7, lr}
    7ab6:	b086      	sub	sp, #24
    7ab8:	af00      	add	r7, sp, #0
    7aba:	60f8      	str	r0, [r7, #12]
    7abc:	60b9      	str	r1, [r7, #8]
    7abe:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7ac0:	68bb      	ldr	r3, [r7, #8]
    7ac2:	f003 0304 	and.w	r3, r3, #4
    7ac6:	2b00      	cmp	r3, #0
    7ac8:	d101      	bne.n	7ace <_spi_rx_check_and_receive+0x1a>
		return false;
    7aca:	2300      	movs	r3, #0
    7acc:	e022      	b.n	7b14 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7ace:	68f8      	ldr	r0, [r7, #12]
    7ad0:	4b12      	ldr	r3, [pc, #72]	; (7b1c <_spi_rx_check_and_receive+0x68>)
    7ad2:	4798      	blx	r3
    7ad4:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    7ad6:	687b      	ldr	r3, [r7, #4]
    7ad8:	685b      	ldr	r3, [r3, #4]
    7ada:	2b00      	cmp	r3, #0
    7adc:	d014      	beq.n	7b08 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    7ade:	687b      	ldr	r3, [r7, #4]
    7ae0:	685b      	ldr	r3, [r3, #4]
    7ae2:	1c59      	adds	r1, r3, #1
    7ae4:	687a      	ldr	r2, [r7, #4]
    7ae6:	6051      	str	r1, [r2, #4]
    7ae8:	697a      	ldr	r2, [r7, #20]
    7aea:	b2d2      	uxtb	r2, r2
    7aec:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    7aee:	687b      	ldr	r3, [r7, #4]
    7af0:	7c1b      	ldrb	r3, [r3, #16]
    7af2:	2b01      	cmp	r3, #1
    7af4:	d908      	bls.n	7b08 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    7af6:	687b      	ldr	r3, [r7, #4]
    7af8:	685b      	ldr	r3, [r3, #4]
    7afa:	1c59      	adds	r1, r3, #1
    7afc:	687a      	ldr	r2, [r7, #4]
    7afe:	6051      	str	r1, [r2, #4]
    7b00:	697a      	ldr	r2, [r7, #20]
    7b02:	0a12      	lsrs	r2, r2, #8
    7b04:	b2d2      	uxtb	r2, r2
    7b06:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	68db      	ldr	r3, [r3, #12]
    7b0c:	1c5a      	adds	r2, r3, #1
    7b0e:	687b      	ldr	r3, [r7, #4]
    7b10:	60da      	str	r2, [r3, #12]

	return true;
    7b12:	2301      	movs	r3, #1
}
    7b14:	4618      	mov	r0, r3
    7b16:	3718      	adds	r7, #24
    7b18:	46bd      	mov	sp, r7
    7b1a:	bd80      	pop	{r7, pc}
    7b1c:	0000696d 	.word	0x0000696d

00007b20 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7b20:	b580      	push	{r7, lr}
    7b22:	b086      	sub	sp, #24
    7b24:	af00      	add	r7, sp, #0
    7b26:	60f8      	str	r0, [r7, #12]
    7b28:	60b9      	str	r1, [r7, #8]
    7b2a:	607a      	str	r2, [r7, #4]
    7b2c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7b2e:	68bb      	ldr	r3, [r7, #8]
    7b30:	f003 0301 	and.w	r3, r3, #1
    7b34:	2b00      	cmp	r3, #0
    7b36:	d028      	beq.n	7b8a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7b38:	687b      	ldr	r3, [r7, #4]
    7b3a:	681b      	ldr	r3, [r3, #0]
    7b3c:	2b00      	cmp	r3, #0
    7b3e:	d018      	beq.n	7b72 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7b40:	687b      	ldr	r3, [r7, #4]
    7b42:	681b      	ldr	r3, [r3, #0]
    7b44:	1c59      	adds	r1, r3, #1
    7b46:	687a      	ldr	r2, [r7, #4]
    7b48:	6011      	str	r1, [r2, #0]
    7b4a:	781b      	ldrb	r3, [r3, #0]
    7b4c:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7b4e:	687b      	ldr	r3, [r7, #4]
    7b50:	7c1b      	ldrb	r3, [r3, #16]
    7b52:	2b01      	cmp	r3, #1
    7b54:	d90f      	bls.n	7b76 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    7b56:	687b      	ldr	r3, [r7, #4]
    7b58:	681b      	ldr	r3, [r3, #0]
    7b5a:	781b      	ldrb	r3, [r3, #0]
    7b5c:	021b      	lsls	r3, r3, #8
    7b5e:	461a      	mov	r2, r3
    7b60:	697b      	ldr	r3, [r7, #20]
    7b62:	4313      	orrs	r3, r2
    7b64:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7b66:	687b      	ldr	r3, [r7, #4]
    7b68:	681b      	ldr	r3, [r3, #0]
    7b6a:	1c5a      	adds	r2, r3, #1
    7b6c:	687b      	ldr	r3, [r7, #4]
    7b6e:	601a      	str	r2, [r3, #0]
    7b70:	e001      	b.n	7b76 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7b72:	887b      	ldrh	r3, [r7, #2]
    7b74:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7b76:	687b      	ldr	r3, [r7, #4]
    7b78:	689b      	ldr	r3, [r3, #8]
    7b7a:	1c5a      	adds	r2, r3, #1
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7b80:	6979      	ldr	r1, [r7, #20]
    7b82:	68f8      	ldr	r0, [r7, #12]
    7b84:	4b03      	ldr	r3, [pc, #12]	; (7b94 <_spi_tx_check_and_send+0x74>)
    7b86:	4798      	blx	r3
    7b88:	e000      	b.n	7b8c <_spi_tx_check_and_send+0x6c>
		return;
    7b8a:	bf00      	nop
}
    7b8c:	3718      	adds	r7, #24
    7b8e:	46bd      	mov	sp, r7
    7b90:	bd80      	pop	{r7, pc}
    7b92:	bf00      	nop
    7b94:	00006951 	.word	0x00006951

00007b98 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7b98:	b580      	push	{r7, lr}
    7b9a:	b082      	sub	sp, #8
    7b9c:	af00      	add	r7, sp, #0
    7b9e:	6078      	str	r0, [r7, #4]
    7ba0:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    7ba2:	687b      	ldr	r3, [r7, #4]
    7ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7ba8:	2b00      	cmp	r3, #0
    7baa:	d00b      	beq.n	7bc4 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7bac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7bb0:	6838      	ldr	r0, [r7, #0]
    7bb2:	4b07      	ldr	r3, [pc, #28]	; (7bd0 <_spi_err_check+0x38>)
    7bb4:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7bb6:	2180      	movs	r1, #128	; 0x80
    7bb8:	6838      	ldr	r0, [r7, #0]
    7bba:	4b06      	ldr	r3, [pc, #24]	; (7bd4 <_spi_err_check+0x3c>)
    7bbc:	4798      	blx	r3
		return ERR_OVERFLOW;
    7bbe:	f06f 0312 	mvn.w	r3, #18
    7bc2:	e000      	b.n	7bc6 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7bc4:	2300      	movs	r3, #0
}
    7bc6:	4618      	mov	r0, r3
    7bc8:	3708      	adds	r7, #8
    7bca:	46bd      	mov	sp, r7
    7bcc:	bd80      	pop	{r7, pc}
    7bce:	bf00      	nop
    7bd0:	000069a5 	.word	0x000069a5
    7bd4:	0000654b 	.word	0x0000654b

00007bd8 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7bd8:	b590      	push	{r4, r7, lr}
    7bda:	b08b      	sub	sp, #44	; 0x2c
    7bdc:	af00      	add	r7, sp, #0
    7bde:	6078      	str	r0, [r7, #4]
    7be0:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    7be2:	687b      	ldr	r3, [r7, #4]
    7be4:	681b      	ldr	r3, [r3, #0]
    7be6:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7be8:	2300      	movs	r3, #0
    7bea:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7bec:	683b      	ldr	r3, [r7, #0]
    7bee:	681b      	ldr	r3, [r3, #0]
    7bf0:	60bb      	str	r3, [r7, #8]
    7bf2:	683b      	ldr	r3, [r7, #0]
    7bf4:	685b      	ldr	r3, [r3, #4]
    7bf6:	60fb      	str	r3, [r7, #12]
    7bf8:	2300      	movs	r3, #0
    7bfa:	613b      	str	r3, [r7, #16]
    7bfc:	2300      	movs	r3, #0
    7bfe:	617b      	str	r3, [r7, #20]
    7c00:	687b      	ldr	r3, [r7, #4]
    7c02:	791b      	ldrb	r3, [r3, #4]
    7c04:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7c06:	687b      	ldr	r3, [r7, #4]
    7c08:	2b00      	cmp	r3, #0
    7c0a:	d004      	beq.n	7c16 <_spi_m_sync_trans+0x3e>
    7c0c:	6a3b      	ldr	r3, [r7, #32]
    7c0e:	2b00      	cmp	r3, #0
    7c10:	d001      	beq.n	7c16 <_spi_m_sync_trans+0x3e>
    7c12:	2301      	movs	r3, #1
    7c14:	e000      	b.n	7c18 <_spi_m_sync_trans+0x40>
    7c16:	2300      	movs	r3, #0
    7c18:	f003 0301 	and.w	r3, r3, #1
    7c1c:	b2db      	uxtb	r3, r3
    7c1e:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    7c22:	492b      	ldr	r1, [pc, #172]	; (7cd0 <_spi_m_sync_trans+0xf8>)
    7c24:	4618      	mov	r0, r3
    7c26:	4b2b      	ldr	r3, [pc, #172]	; (7cd4 <_spi_m_sync_trans+0xfc>)
    7c28:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7c2a:	2107      	movs	r1, #7
    7c2c:	6a38      	ldr	r0, [r7, #32]
    7c2e:	4b2a      	ldr	r3, [pc, #168]	; (7cd8 <_spi_m_sync_trans+0x100>)
    7c30:	4798      	blx	r3
    7c32:	4603      	mov	r3, r0
    7c34:	2b00      	cmp	r3, #0
    7c36:	d002      	beq.n	7c3e <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7c38:	f06f 0303 	mvn.w	r3, #3
    7c3c:	e043      	b.n	7cc6 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7c3e:	6a38      	ldr	r0, [r7, #32]
    7c40:	4b26      	ldr	r3, [pc, #152]	; (7cdc <_spi_m_sync_trans+0x104>)
    7c42:	4798      	blx	r3
    7c44:	4603      	mov	r3, r0
    7c46:	f083 0301 	eor.w	r3, r3, #1
    7c4a:	b2db      	uxtb	r3, r3
    7c4c:	2b00      	cmp	r3, #0
    7c4e:	d002      	beq.n	7c56 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7c50:	f06f 0313 	mvn.w	r3, #19
    7c54:	e037      	b.n	7cc6 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7c56:	6a38      	ldr	r0, [r7, #32]
    7c58:	4b21      	ldr	r3, [pc, #132]	; (7ce0 <_spi_m_sync_trans+0x108>)
    7c5a:	4798      	blx	r3
    7c5c:	4603      	mov	r3, r0
    7c5e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7c60:	f107 0308 	add.w	r3, r7, #8
    7c64:	461a      	mov	r2, r3
    7c66:	69f9      	ldr	r1, [r7, #28]
    7c68:	6a38      	ldr	r0, [r7, #32]
    7c6a:	4b1e      	ldr	r3, [pc, #120]	; (7ce4 <_spi_m_sync_trans+0x10c>)
    7c6c:	4798      	blx	r3
    7c6e:	4603      	mov	r3, r0
    7c70:	f083 0301 	eor.w	r3, r3, #1
    7c74:	b2db      	uxtb	r3, r3
    7c76:	2b00      	cmp	r3, #0
    7c78:	d00b      	beq.n	7c92 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7c7a:	697a      	ldr	r2, [r7, #20]
    7c7c:	693b      	ldr	r3, [r7, #16]
    7c7e:	429a      	cmp	r2, r3
    7c80:	d307      	bcc.n	7c92 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7c82:	687b      	ldr	r3, [r7, #4]
    7c84:	88db      	ldrh	r3, [r3, #6]
    7c86:	f107 0208 	add.w	r2, r7, #8
    7c8a:	69f9      	ldr	r1, [r7, #28]
    7c8c:	6a38      	ldr	r0, [r7, #32]
    7c8e:	4c16      	ldr	r4, [pc, #88]	; (7ce8 <_spi_m_sync_trans+0x110>)
    7c90:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7c92:	6a39      	ldr	r1, [r7, #32]
    7c94:	69f8      	ldr	r0, [r7, #28]
    7c96:	4b15      	ldr	r3, [pc, #84]	; (7cec <_spi_m_sync_trans+0x114>)
    7c98:	4798      	blx	r3
    7c9a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	db0c      	blt.n	7cbc <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7ca2:	693a      	ldr	r2, [r7, #16]
    7ca4:	683b      	ldr	r3, [r7, #0]
    7ca6:	689b      	ldr	r3, [r3, #8]
    7ca8:	429a      	cmp	r2, r3
    7caa:	d3d4      	bcc.n	7c56 <_spi_m_sync_trans+0x7e>
    7cac:	697a      	ldr	r2, [r7, #20]
    7cae:	683b      	ldr	r3, [r7, #0]
    7cb0:	689b      	ldr	r3, [r3, #8]
    7cb2:	429a      	cmp	r2, r3
    7cb4:	d3cf      	bcc.n	7c56 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7cb6:	693b      	ldr	r3, [r7, #16]
    7cb8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7cba:	e000      	b.n	7cbe <_spi_m_sync_trans+0xe6>
			break;
    7cbc:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7cbe:	6a38      	ldr	r0, [r7, #32]
    7cc0:	4b0b      	ldr	r3, [pc, #44]	; (7cf0 <_spi_m_sync_trans+0x118>)
    7cc2:	4798      	blx	r3

	return rc;
    7cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7cc6:	4618      	mov	r0, r3
    7cc8:	372c      	adds	r7, #44	; 0x2c
    7cca:	46bd      	mov	sp, r7
    7ccc:	bd90      	pop	{r4, r7, pc}
    7cce:	bf00      	nop
    7cd0:	000100ec 	.word	0x000100ec
    7cd4:	00003e69 	.word	0x00003e69
    7cd8:	00006475 	.word	0x00006475
    7cdc:	00006665 	.word	0x00006665
    7ce0:	00006531 	.word	0x00006531
    7ce4:	00007ab5 	.word	0x00007ab5
    7ce8:	00007b21 	.word	0x00007b21
    7cec:	00007b99 	.word	0x00007b99
    7cf0:	00007a85 	.word	0x00007a85

00007cf4 <__NVIC_EnableIRQ>:
{
    7cf4:	b480      	push	{r7}
    7cf6:	b083      	sub	sp, #12
    7cf8:	af00      	add	r7, sp, #0
    7cfa:	4603      	mov	r3, r0
    7cfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d02:	2b00      	cmp	r3, #0
    7d04:	db0b      	blt.n	7d1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d06:	4909      	ldr	r1, [pc, #36]	; (7d2c <__NVIC_EnableIRQ+0x38>)
    7d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d0c:	095b      	lsrs	r3, r3, #5
    7d0e:	88fa      	ldrh	r2, [r7, #6]
    7d10:	f002 021f 	and.w	r2, r2, #31
    7d14:	2001      	movs	r0, #1
    7d16:	fa00 f202 	lsl.w	r2, r0, r2
    7d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7d1e:	bf00      	nop
    7d20:	370c      	adds	r7, #12
    7d22:	46bd      	mov	sp, r7
    7d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d28:	4770      	bx	lr
    7d2a:	bf00      	nop
    7d2c:	e000e100 	.word	0xe000e100

00007d30 <__NVIC_DisableIRQ>:
{
    7d30:	b480      	push	{r7}
    7d32:	b083      	sub	sp, #12
    7d34:	af00      	add	r7, sp, #0
    7d36:	4603      	mov	r3, r0
    7d38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d3e:	2b00      	cmp	r3, #0
    7d40:	db10      	blt.n	7d64 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d42:	490b      	ldr	r1, [pc, #44]	; (7d70 <__NVIC_DisableIRQ+0x40>)
    7d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d48:	095b      	lsrs	r3, r3, #5
    7d4a:	88fa      	ldrh	r2, [r7, #6]
    7d4c:	f002 021f 	and.w	r2, r2, #31
    7d50:	2001      	movs	r0, #1
    7d52:	fa00 f202 	lsl.w	r2, r0, r2
    7d56:	3320      	adds	r3, #32
    7d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7d60:	f3bf 8f6f 	isb	sy
}
    7d64:	bf00      	nop
    7d66:	370c      	adds	r7, #12
    7d68:	46bd      	mov	sp, r7
    7d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d6e:	4770      	bx	lr
    7d70:	e000e100 	.word	0xe000e100

00007d74 <__NVIC_ClearPendingIRQ>:
{
    7d74:	b480      	push	{r7}
    7d76:	b083      	sub	sp, #12
    7d78:	af00      	add	r7, sp, #0
    7d7a:	4603      	mov	r3, r0
    7d7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d82:	2b00      	cmp	r3, #0
    7d84:	db0c      	blt.n	7da0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d86:	4909      	ldr	r1, [pc, #36]	; (7dac <__NVIC_ClearPendingIRQ+0x38>)
    7d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7d8c:	095b      	lsrs	r3, r3, #5
    7d8e:	88fa      	ldrh	r2, [r7, #6]
    7d90:	f002 021f 	and.w	r2, r2, #31
    7d94:	2001      	movs	r0, #1
    7d96:	fa00 f202 	lsl.w	r2, r0, r2
    7d9a:	3360      	adds	r3, #96	; 0x60
    7d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7da0:	bf00      	nop
    7da2:	370c      	adds	r7, #12
    7da4:	46bd      	mov	sp, r7
    7da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7daa:	4770      	bx	lr
    7dac:	e000e100 	.word	0xe000e100

00007db0 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7db0:	b480      	push	{r7}
    7db2:	b083      	sub	sp, #12
    7db4:	af00      	add	r7, sp, #0
    7db6:	6078      	str	r0, [r7, #4]
    7db8:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7dba:	bf00      	nop
    7dbc:	687b      	ldr	r3, [r7, #4]
    7dbe:	689a      	ldr	r2, [r3, #8]
    7dc0:	683b      	ldr	r3, [r7, #0]
    7dc2:	4013      	ands	r3, r2
    7dc4:	2b00      	cmp	r3, #0
    7dc6:	d1f9      	bne.n	7dbc <hri_tcc_wait_for_sync+0xc>
	};
}
    7dc8:	bf00      	nop
    7dca:	370c      	adds	r7, #12
    7dcc:	46bd      	mov	sp, r7
    7dce:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dd2:	4770      	bx	lr

00007dd4 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7dd4:	b480      	push	{r7}
    7dd6:	b083      	sub	sp, #12
    7dd8:	af00      	add	r7, sp, #0
    7dda:	6078      	str	r0, [r7, #4]
    7ddc:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7dde:	687b      	ldr	r3, [r7, #4]
    7de0:	689a      	ldr	r2, [r3, #8]
    7de2:	683b      	ldr	r3, [r7, #0]
    7de4:	4013      	ands	r3, r2
    7de6:	2b00      	cmp	r3, #0
    7de8:	bf14      	ite	ne
    7dea:	2301      	movne	r3, #1
    7dec:	2300      	moveq	r3, #0
    7dee:	b2db      	uxtb	r3, r3
}
    7df0:	4618      	mov	r0, r3
    7df2:	370c      	adds	r7, #12
    7df4:	46bd      	mov	sp, r7
    7df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dfa:	4770      	bx	lr

00007dfc <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7dfc:	b480      	push	{r7}
    7dfe:	b083      	sub	sp, #12
    7e00:	af00      	add	r7, sp, #0
    7e02:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7e04:	687b      	ldr	r3, [r7, #4]
    7e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e08:	f003 0301 	and.w	r3, r3, #1
    7e0c:	2b00      	cmp	r3, #0
    7e0e:	bf14      	ite	ne
    7e10:	2301      	movne	r3, #1
    7e12:	2300      	moveq	r3, #0
    7e14:	b2db      	uxtb	r3, r3
}
    7e16:	4618      	mov	r0, r3
    7e18:	370c      	adds	r7, #12
    7e1a:	46bd      	mov	sp, r7
    7e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e20:	4770      	bx	lr

00007e22 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7e22:	b480      	push	{r7}
    7e24:	b083      	sub	sp, #12
    7e26:	af00      	add	r7, sp, #0
    7e28:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7e2a:	687b      	ldr	r3, [r7, #4]
    7e2c:	2201      	movs	r2, #1
    7e2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7e30:	bf00      	nop
    7e32:	370c      	adds	r7, #12
    7e34:	46bd      	mov	sp, r7
    7e36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e3a:	4770      	bx	lr

00007e3c <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7e3c:	b480      	push	{r7}
    7e3e:	b083      	sub	sp, #12
    7e40:	af00      	add	r7, sp, #0
    7e42:	6078      	str	r0, [r7, #4]
    7e44:	460b      	mov	r3, r1
    7e46:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7e48:	687b      	ldr	r3, [r7, #4]
    7e4a:	78fa      	ldrb	r2, [r7, #3]
    7e4c:	715a      	strb	r2, [r3, #5]
}
    7e4e:	bf00      	nop
    7e50:	370c      	adds	r7, #12
    7e52:	46bd      	mov	sp, r7
    7e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e58:	4770      	bx	lr

00007e5a <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7e5a:	b480      	push	{r7}
    7e5c:	b083      	sub	sp, #12
    7e5e:	af00      	add	r7, sp, #0
    7e60:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7e62:	687b      	ldr	r3, [r7, #4]
    7e64:	2201      	movs	r2, #1
    7e66:	629a      	str	r2, [r3, #40]	; 0x28
}
    7e68:	bf00      	nop
    7e6a:	370c      	adds	r7, #12
    7e6c:	46bd      	mov	sp, r7
    7e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e72:	4770      	bx	lr

00007e74 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7e74:	b580      	push	{r7, lr}
    7e76:	b082      	sub	sp, #8
    7e78:	af00      	add	r7, sp, #0
    7e7a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7e7c:	687b      	ldr	r3, [r7, #4]
    7e7e:	681b      	ldr	r3, [r3, #0]
    7e80:	f043 0201 	orr.w	r2, r3, #1
    7e84:	687b      	ldr	r3, [r7, #4]
    7e86:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7e88:	2101      	movs	r1, #1
    7e8a:	6878      	ldr	r0, [r7, #4]
    7e8c:	4b02      	ldr	r3, [pc, #8]	; (7e98 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7e8e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7e90:	bf00      	nop
    7e92:	3708      	adds	r7, #8
    7e94:	46bd      	mov	sp, r7
    7e96:	bd80      	pop	{r7, pc}
    7e98:	00007db1 	.word	0x00007db1

00007e9c <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7e9c:	b580      	push	{r7, lr}
    7e9e:	b082      	sub	sp, #8
    7ea0:	af00      	add	r7, sp, #0
    7ea2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7ea4:	687b      	ldr	r3, [r7, #4]
    7ea6:	681b      	ldr	r3, [r3, #0]
    7ea8:	f043 0202 	orr.w	r2, r3, #2
    7eac:	687b      	ldr	r3, [r7, #4]
    7eae:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7eb0:	2103      	movs	r1, #3
    7eb2:	6878      	ldr	r0, [r7, #4]
    7eb4:	4b02      	ldr	r3, [pc, #8]	; (7ec0 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7eb6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7eb8:	bf00      	nop
    7eba:	3708      	adds	r7, #8
    7ebc:	46bd      	mov	sp, r7
    7ebe:	bd80      	pop	{r7, pc}
    7ec0:	00007db1 	.word	0x00007db1

00007ec4 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7ec4:	b580      	push	{r7, lr}
    7ec6:	b084      	sub	sp, #16
    7ec8:	af00      	add	r7, sp, #0
    7eca:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7ecc:	2103      	movs	r1, #3
    7ece:	6878      	ldr	r0, [r7, #4]
    7ed0:	4b09      	ldr	r3, [pc, #36]	; (7ef8 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7ed2:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7ed4:	687b      	ldr	r3, [r7, #4]
    7ed6:	681b      	ldr	r3, [r3, #0]
    7ed8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7eda:	68fb      	ldr	r3, [r7, #12]
    7edc:	085b      	lsrs	r3, r3, #1
    7ede:	f003 0301 	and.w	r3, r3, #1
    7ee2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7ee4:	68fb      	ldr	r3, [r7, #12]
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	bf14      	ite	ne
    7eea:	2301      	movne	r3, #1
    7eec:	2300      	moveq	r3, #0
    7eee:	b2db      	uxtb	r3, r3
}
    7ef0:	4618      	mov	r0, r3
    7ef2:	3710      	adds	r7, #16
    7ef4:	46bd      	mov	sp, r7
    7ef6:	bd80      	pop	{r7, pc}
    7ef8:	00007db1 	.word	0x00007db1

00007efc <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7efc:	b580      	push	{r7, lr}
    7efe:	b082      	sub	sp, #8
    7f00:	af00      	add	r7, sp, #0
    7f02:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7f04:	687b      	ldr	r3, [r7, #4]
    7f06:	681b      	ldr	r3, [r3, #0]
    7f08:	f023 0202 	bic.w	r2, r3, #2
    7f0c:	687b      	ldr	r3, [r7, #4]
    7f0e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7f10:	2103      	movs	r1, #3
    7f12:	6878      	ldr	r0, [r7, #4]
    7f14:	4b02      	ldr	r3, [pc, #8]	; (7f20 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7f16:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7f18:	bf00      	nop
    7f1a:	3708      	adds	r7, #8
    7f1c:	46bd      	mov	sp, r7
    7f1e:	bd80      	pop	{r7, pc}
    7f20:	00007db1 	.word	0x00007db1

00007f24 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7f24:	b580      	push	{r7, lr}
    7f26:	b084      	sub	sp, #16
    7f28:	af00      	add	r7, sp, #0
    7f2a:	6078      	str	r0, [r7, #4]
    7f2c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7f2e:	2103      	movs	r1, #3
    7f30:	6878      	ldr	r0, [r7, #4]
    7f32:	4b07      	ldr	r3, [pc, #28]	; (7f50 <hri_tcc_get_CTRLA_reg+0x2c>)
    7f34:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7f36:	687b      	ldr	r3, [r7, #4]
    7f38:	681b      	ldr	r3, [r3, #0]
    7f3a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7f3c:	68fa      	ldr	r2, [r7, #12]
    7f3e:	683b      	ldr	r3, [r7, #0]
    7f40:	4013      	ands	r3, r2
    7f42:	60fb      	str	r3, [r7, #12]
	return tmp;
    7f44:	68fb      	ldr	r3, [r7, #12]
}
    7f46:	4618      	mov	r0, r3
    7f48:	3710      	adds	r7, #16
    7f4a:	46bd      	mov	sp, r7
    7f4c:	bd80      	pop	{r7, pc}
    7f4e:	bf00      	nop
    7f50:	00007db1 	.word	0x00007db1

00007f54 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7f54:	b580      	push	{r7, lr}
    7f56:	b082      	sub	sp, #8
    7f58:	af00      	add	r7, sp, #0
    7f5a:	6078      	str	r0, [r7, #4]
    7f5c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7f5e:	687b      	ldr	r3, [r7, #4]
    7f60:	683a      	ldr	r2, [r7, #0]
    7f62:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7f64:	2103      	movs	r1, #3
    7f66:	6878      	ldr	r0, [r7, #4]
    7f68:	4b02      	ldr	r3, [pc, #8]	; (7f74 <hri_tcc_write_CTRLA_reg+0x20>)
    7f6a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7f6c:	bf00      	nop
    7f6e:	3708      	adds	r7, #8
    7f70:	46bd      	mov	sp, r7
    7f72:	bd80      	pop	{r7, pc}
    7f74:	00007db1 	.word	0x00007db1

00007f78 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7f78:	b480      	push	{r7}
    7f7a:	b083      	sub	sp, #12
    7f7c:	af00      	add	r7, sp, #0
    7f7e:	6078      	str	r0, [r7, #4]
    7f80:	460b      	mov	r3, r1
    7f82:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7f84:	687b      	ldr	r3, [r7, #4]
    7f86:	78fa      	ldrb	r2, [r7, #3]
    7f88:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7f8a:	bf00      	nop
    7f8c:	370c      	adds	r7, #12
    7f8e:	46bd      	mov	sp, r7
    7f90:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f94:	4770      	bx	lr

00007f96 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7f96:	b480      	push	{r7}
    7f98:	b083      	sub	sp, #12
    7f9a:	af00      	add	r7, sp, #0
    7f9c:	6078      	str	r0, [r7, #4]
    7f9e:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7fa0:	687b      	ldr	r3, [r7, #4]
    7fa2:	683a      	ldr	r2, [r7, #0]
    7fa4:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7fa6:	bf00      	nop
    7fa8:	370c      	adds	r7, #12
    7faa:	46bd      	mov	sp, r7
    7fac:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fb0:	4770      	bx	lr
	...

00007fb4 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7fb4:	b580      	push	{r7, lr}
    7fb6:	b082      	sub	sp, #8
    7fb8:	af00      	add	r7, sp, #0
    7fba:	6078      	str	r0, [r7, #4]
    7fbc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7fbe:	687b      	ldr	r3, [r7, #4]
    7fc0:	683a      	ldr	r2, [r7, #0]
    7fc2:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7fc4:	2180      	movs	r1, #128	; 0x80
    7fc6:	6878      	ldr	r0, [r7, #4]
    7fc8:	4b02      	ldr	r3, [pc, #8]	; (7fd4 <hri_tcc_write_PER_reg+0x20>)
    7fca:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7fcc:	bf00      	nop
    7fce:	3708      	adds	r7, #8
    7fd0:	46bd      	mov	sp, r7
    7fd2:	bd80      	pop	{r7, pc}
    7fd4:	00007db1 	.word	0x00007db1

00007fd8 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7fd8:	b580      	push	{r7, lr}
    7fda:	b082      	sub	sp, #8
    7fdc:	af00      	add	r7, sp, #0
    7fde:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7fe0:	2180      	movs	r1, #128	; 0x80
    7fe2:	6878      	ldr	r0, [r7, #4]
    7fe4:	4b03      	ldr	r3, [pc, #12]	; (7ff4 <hri_tcc_read_PER_reg+0x1c>)
    7fe6:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7fe8:	687b      	ldr	r3, [r7, #4]
    7fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7fec:	4618      	mov	r0, r3
    7fee:	3708      	adds	r7, #8
    7ff0:	46bd      	mov	sp, r7
    7ff2:	bd80      	pop	{r7, pc}
    7ff4:	00007db1 	.word	0x00007db1

00007ff8 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7ff8:	b480      	push	{r7}
    7ffa:	b083      	sub	sp, #12
    7ffc:	af00      	add	r7, sp, #0
    7ffe:	6078      	str	r0, [r7, #4]
    8000:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    8002:	687b      	ldr	r3, [r7, #4]
    8004:	4a09      	ldr	r2, [pc, #36]	; (802c <_tcc_init_irq_param+0x34>)
    8006:	4293      	cmp	r3, r2
    8008:	d102      	bne.n	8010 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    800a:	4a09      	ldr	r2, [pc, #36]	; (8030 <_tcc_init_irq_param+0x38>)
    800c:	683b      	ldr	r3, [r7, #0]
    800e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    8010:	687b      	ldr	r3, [r7, #4]
    8012:	4a08      	ldr	r2, [pc, #32]	; (8034 <_tcc_init_irq_param+0x3c>)
    8014:	4293      	cmp	r3, r2
    8016:	d102      	bne.n	801e <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    8018:	4a07      	ldr	r2, [pc, #28]	; (8038 <_tcc_init_irq_param+0x40>)
    801a:	683b      	ldr	r3, [r7, #0]
    801c:	6013      	str	r3, [r2, #0]
	}
}
    801e:	bf00      	nop
    8020:	370c      	adds	r7, #12
    8022:	46bd      	mov	sp, r7
    8024:	f85d 7b04 	ldr.w	r7, [sp], #4
    8028:	4770      	bx	lr
    802a:	bf00      	nop
    802c:	41016000 	.word	0x41016000
    8030:	20000a8c 	.word	0x20000a8c
    8034:	41018000 	.word	0x41018000
    8038:	20000a90 	.word	0x20000a90

0000803c <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    803c:	b580      	push	{r7, lr}
    803e:	b084      	sub	sp, #16
    8040:	af00      	add	r7, sp, #0
    8042:	6078      	str	r0, [r7, #4]
    8044:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8046:	6838      	ldr	r0, [r7, #0]
    8048:	4b33      	ldr	r3, [pc, #204]	; (8118 <_tcc_timer_init+0xdc>)
    804a:	4798      	blx	r3
    804c:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    804e:	68fb      	ldr	r3, [r7, #12]
    8050:	2b00      	cmp	r3, #0
    8052:	d102      	bne.n	805a <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    8054:	f06f 0309 	mvn.w	r3, #9
    8058:	e05a      	b.n	8110 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    805a:	687b      	ldr	r3, [r7, #4]
    805c:	683a      	ldr	r2, [r7, #0]
    805e:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    8060:	2101      	movs	r1, #1
    8062:	6838      	ldr	r0, [r7, #0]
    8064:	4b2d      	ldr	r3, [pc, #180]	; (811c <_tcc_timer_init+0xe0>)
    8066:	4798      	blx	r3
    8068:	4603      	mov	r3, r0
    806a:	f083 0301 	eor.w	r3, r3, #1
    806e:	b2db      	uxtb	r3, r3
    8070:	2b00      	cmp	r3, #0
    8072:	d011      	beq.n	8098 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    8074:	2102      	movs	r1, #2
    8076:	6838      	ldr	r0, [r7, #0]
    8078:	4b29      	ldr	r3, [pc, #164]	; (8120 <_tcc_timer_init+0xe4>)
    807a:	4798      	blx	r3
    807c:	4603      	mov	r3, r0
    807e:	2b00      	cmp	r3, #0
    8080:	d006      	beq.n	8090 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    8082:	6838      	ldr	r0, [r7, #0]
    8084:	4b27      	ldr	r3, [pc, #156]	; (8124 <_tcc_timer_init+0xe8>)
    8086:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    8088:	2102      	movs	r1, #2
    808a:	6838      	ldr	r0, [r7, #0]
    808c:	4b26      	ldr	r3, [pc, #152]	; (8128 <_tcc_timer_init+0xec>)
    808e:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    8090:	2101      	movs	r1, #1
    8092:	6838      	ldr	r0, [r7, #0]
    8094:	4b25      	ldr	r3, [pc, #148]	; (812c <_tcc_timer_init+0xf0>)
    8096:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    8098:	2101      	movs	r1, #1
    809a:	6838      	ldr	r0, [r7, #0]
    809c:	4b22      	ldr	r3, [pc, #136]	; (8128 <_tcc_timer_init+0xec>)
    809e:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    80a0:	68fb      	ldr	r3, [r7, #12]
    80a2:	689b      	ldr	r3, [r3, #8]
    80a4:	4619      	mov	r1, r3
    80a6:	6838      	ldr	r0, [r7, #0]
    80a8:	4b20      	ldr	r3, [pc, #128]	; (812c <_tcc_timer_init+0xf0>)
    80aa:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    80ac:	68fb      	ldr	r3, [r7, #12]
    80ae:	7b1b      	ldrb	r3, [r3, #12]
    80b0:	4619      	mov	r1, r3
    80b2:	6838      	ldr	r0, [r7, #0]
    80b4:	4b1e      	ldr	r3, [pc, #120]	; (8130 <_tcc_timer_init+0xf4>)
    80b6:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    80b8:	68fb      	ldr	r3, [r7, #12]
    80ba:	7b5b      	ldrb	r3, [r3, #13]
    80bc:	4619      	mov	r1, r3
    80be:	6838      	ldr	r0, [r7, #0]
    80c0:	4b1c      	ldr	r3, [pc, #112]	; (8134 <_tcc_timer_init+0xf8>)
    80c2:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    80c4:	68fb      	ldr	r3, [r7, #12]
    80c6:	691b      	ldr	r3, [r3, #16]
    80c8:	4619      	mov	r1, r3
    80ca:	6838      	ldr	r0, [r7, #0]
    80cc:	4b1a      	ldr	r3, [pc, #104]	; (8138 <_tcc_timer_init+0xfc>)
    80ce:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    80d0:	68fb      	ldr	r3, [r7, #12]
    80d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    80d4:	4619      	mov	r1, r3
    80d6:	6838      	ldr	r0, [r7, #0]
    80d8:	4b18      	ldr	r3, [pc, #96]	; (813c <_tcc_timer_init+0x100>)
    80da:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    80dc:	6838      	ldr	r0, [r7, #0]
    80de:	4b18      	ldr	r3, [pc, #96]	; (8140 <_tcc_timer_init+0x104>)
    80e0:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    80e2:	6879      	ldr	r1, [r7, #4]
    80e4:	6838      	ldr	r0, [r7, #0]
    80e6:	4b17      	ldr	r3, [pc, #92]	; (8144 <_tcc_timer_init+0x108>)
    80e8:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    80ea:	68fb      	ldr	r3, [r7, #12]
    80ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    80f0:	4618      	mov	r0, r3
    80f2:	4b15      	ldr	r3, [pc, #84]	; (8148 <_tcc_timer_init+0x10c>)
    80f4:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    80f6:	68fb      	ldr	r3, [r7, #12]
    80f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    80fc:	4618      	mov	r0, r3
    80fe:	4b13      	ldr	r3, [pc, #76]	; (814c <_tcc_timer_init+0x110>)
    8100:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    8102:	68fb      	ldr	r3, [r7, #12]
    8104:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8108:	4618      	mov	r0, r3
    810a:	4b11      	ldr	r3, [pc, #68]	; (8150 <_tcc_timer_init+0x114>)
    810c:	4798      	blx	r3

	return ERR_NONE;
    810e:	2300      	movs	r3, #0
}
    8110:	4618      	mov	r0, r3
    8112:	3710      	adds	r7, #16
    8114:	46bd      	mov	sp, r7
    8116:	bd80      	pop	{r7, pc}
    8118:	00008305 	.word	0x00008305
    811c:	00007dd5 	.word	0x00007dd5
    8120:	00007f25 	.word	0x00007f25
    8124:	00007efd 	.word	0x00007efd
    8128:	00007db1 	.word	0x00007db1
    812c:	00007f55 	.word	0x00007f55
    8130:	00007e3d 	.word	0x00007e3d
    8134:	00007f79 	.word	0x00007f79
    8138:	00007f97 	.word	0x00007f97
    813c:	00007fb5 	.word	0x00007fb5
    8140:	00007e5b 	.word	0x00007e5b
    8144:	00007ff9 	.word	0x00007ff9
    8148:	00007d31 	.word	0x00007d31
    814c:	00007d75 	.word	0x00007d75
    8150:	00007cf5 	.word	0x00007cf5

00008154 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    8154:	b580      	push	{r7, lr}
    8156:	b084      	sub	sp, #16
    8158:	af00      	add	r7, sp, #0
    815a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    815c:	687b      	ldr	r3, [r7, #4]
    815e:	68db      	ldr	r3, [r3, #12]
    8160:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8162:	68f8      	ldr	r0, [r7, #12]
    8164:	4b0a      	ldr	r3, [pc, #40]	; (8190 <_tcc_timer_deinit+0x3c>)
    8166:	4798      	blx	r3
    8168:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    816a:	68bb      	ldr	r3, [r7, #8]
    816c:	2b00      	cmp	r3, #0
    816e:	d00b      	beq.n	8188 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    8170:	68bb      	ldr	r3, [r7, #8]
    8172:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8176:	4618      	mov	r0, r3
    8178:	4b06      	ldr	r3, [pc, #24]	; (8194 <_tcc_timer_deinit+0x40>)
    817a:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    817c:	68f8      	ldr	r0, [r7, #12]
    817e:	4b06      	ldr	r3, [pc, #24]	; (8198 <_tcc_timer_deinit+0x44>)
    8180:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    8182:	68f8      	ldr	r0, [r7, #12]
    8184:	4b05      	ldr	r3, [pc, #20]	; (819c <_tcc_timer_deinit+0x48>)
    8186:	4798      	blx	r3
	}
}
    8188:	bf00      	nop
    818a:	3710      	adds	r7, #16
    818c:	46bd      	mov	sp, r7
    818e:	bd80      	pop	{r7, pc}
    8190:	00008305 	.word	0x00008305
    8194:	00007d31 	.word	0x00007d31
    8198:	00007efd 	.word	0x00007efd
    819c:	00007e75 	.word	0x00007e75

000081a0 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    81a0:	b580      	push	{r7, lr}
    81a2:	b082      	sub	sp, #8
    81a4:	af00      	add	r7, sp, #0
    81a6:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    81a8:	687b      	ldr	r3, [r7, #4]
    81aa:	68db      	ldr	r3, [r3, #12]
    81ac:	4618      	mov	r0, r3
    81ae:	4b03      	ldr	r3, [pc, #12]	; (81bc <_tcc_timer_start+0x1c>)
    81b0:	4798      	blx	r3
}
    81b2:	bf00      	nop
    81b4:	3708      	adds	r7, #8
    81b6:	46bd      	mov	sp, r7
    81b8:	bd80      	pop	{r7, pc}
    81ba:	bf00      	nop
    81bc:	00007e9d 	.word	0x00007e9d

000081c0 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    81c0:	b580      	push	{r7, lr}
    81c2:	b082      	sub	sp, #8
    81c4:	af00      	add	r7, sp, #0
    81c6:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	68db      	ldr	r3, [r3, #12]
    81cc:	4618      	mov	r0, r3
    81ce:	4b03      	ldr	r3, [pc, #12]	; (81dc <_tcc_timer_stop+0x1c>)
    81d0:	4798      	blx	r3
}
    81d2:	bf00      	nop
    81d4:	3708      	adds	r7, #8
    81d6:	46bd      	mov	sp, r7
    81d8:	bd80      	pop	{r7, pc}
    81da:	bf00      	nop
    81dc:	00007efd 	.word	0x00007efd

000081e0 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    81e0:	b580      	push	{r7, lr}
    81e2:	b082      	sub	sp, #8
    81e4:	af00      	add	r7, sp, #0
    81e6:	6078      	str	r0, [r7, #4]
    81e8:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    81ea:	687b      	ldr	r3, [r7, #4]
    81ec:	68db      	ldr	r3, [r3, #12]
    81ee:	6839      	ldr	r1, [r7, #0]
    81f0:	4618      	mov	r0, r3
    81f2:	4b03      	ldr	r3, [pc, #12]	; (8200 <_tcc_timer_set_period+0x20>)
    81f4:	4798      	blx	r3
}
    81f6:	bf00      	nop
    81f8:	3708      	adds	r7, #8
    81fa:	46bd      	mov	sp, r7
    81fc:	bd80      	pop	{r7, pc}
    81fe:	bf00      	nop
    8200:	00007fb5 	.word	0x00007fb5

00008204 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    8204:	b580      	push	{r7, lr}
    8206:	b082      	sub	sp, #8
    8208:	af00      	add	r7, sp, #0
    820a:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    820c:	687b      	ldr	r3, [r7, #4]
    820e:	68db      	ldr	r3, [r3, #12]
    8210:	4618      	mov	r0, r3
    8212:	4b03      	ldr	r3, [pc, #12]	; (8220 <_tcc_timer_get_period+0x1c>)
    8214:	4798      	blx	r3
    8216:	4603      	mov	r3, r0
}
    8218:	4618      	mov	r0, r3
    821a:	3708      	adds	r7, #8
    821c:	46bd      	mov	sp, r7
    821e:	bd80      	pop	{r7, pc}
    8220:	00007fd9 	.word	0x00007fd9

00008224 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    8224:	b580      	push	{r7, lr}
    8226:	b082      	sub	sp, #8
    8228:	af00      	add	r7, sp, #0
    822a:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    822c:	687b      	ldr	r3, [r7, #4]
    822e:	68db      	ldr	r3, [r3, #12]
    8230:	4618      	mov	r0, r3
    8232:	4b03      	ldr	r3, [pc, #12]	; (8240 <_tcc_timer_is_started+0x1c>)
    8234:	4798      	blx	r3
    8236:	4603      	mov	r3, r0
}
    8238:	4618      	mov	r0, r3
    823a:	3708      	adds	r7, #8
    823c:	46bd      	mov	sp, r7
    823e:	bd80      	pop	{r7, pc}
    8240:	00007ec5 	.word	0x00007ec5

00008244 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    8244:	b480      	push	{r7}
    8246:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    8248:	4b02      	ldr	r3, [pc, #8]	; (8254 <_tcc_get_timer+0x10>)
}
    824a:	4618      	mov	r0, r3
    824c:	46bd      	mov	sp, r7
    824e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8252:	4770      	bx	lr
    8254:	200000c0 	.word	0x200000c0

00008258 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    8258:	b580      	push	{r7, lr}
    825a:	b084      	sub	sp, #16
    825c:	af00      	add	r7, sp, #0
    825e:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    8260:	687b      	ldr	r3, [r7, #4]
    8262:	68db      	ldr	r3, [r3, #12]
    8264:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    8266:	68f8      	ldr	r0, [r7, #12]
    8268:	4b08      	ldr	r3, [pc, #32]	; (828c <_tcc_timer_set_irq+0x34>)
    826a:	4798      	blx	r3
    826c:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    826e:	68bb      	ldr	r3, [r7, #8]
    8270:	2b00      	cmp	r3, #0
    8272:	d006      	beq.n	8282 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    8274:	68bb      	ldr	r3, [r7, #8]
    8276:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    827a:	b2db      	uxtb	r3, r3
    827c:	4618      	mov	r0, r3
    827e:	4b04      	ldr	r3, [pc, #16]	; (8290 <_tcc_timer_set_irq+0x38>)
    8280:	4798      	blx	r3
	}
}
    8282:	bf00      	nop
    8284:	3710      	adds	r7, #16
    8286:	46bd      	mov	sp, r7
    8288:	bd80      	pop	{r7, pc}
    828a:	bf00      	nop
    828c:	00008305 	.word	0x00008305
    8290:	000046b5 	.word	0x000046b5

00008294 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    8294:	b580      	push	{r7, lr}
    8296:	b084      	sub	sp, #16
    8298:	af00      	add	r7, sp, #0
    829a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	68db      	ldr	r3, [r3, #12]
    82a0:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    82a2:	68f8      	ldr	r0, [r7, #12]
    82a4:	4b07      	ldr	r3, [pc, #28]	; (82c4 <tcc_interrupt_handler+0x30>)
    82a6:	4798      	blx	r3
    82a8:	4603      	mov	r3, r0
    82aa:	2b00      	cmp	r3, #0
    82ac:	d006      	beq.n	82bc <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    82ae:	68f8      	ldr	r0, [r7, #12]
    82b0:	4b05      	ldr	r3, [pc, #20]	; (82c8 <tcc_interrupt_handler+0x34>)
    82b2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    82b4:	687b      	ldr	r3, [r7, #4]
    82b6:	681b      	ldr	r3, [r3, #0]
    82b8:	6878      	ldr	r0, [r7, #4]
    82ba:	4798      	blx	r3
	}
}
    82bc:	bf00      	nop
    82be:	3710      	adds	r7, #16
    82c0:	46bd      	mov	sp, r7
    82c2:	bd80      	pop	{r7, pc}
    82c4:	00007dfd 	.word	0x00007dfd
    82c8:	00007e23 	.word	0x00007e23

000082cc <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    82cc:	b580      	push	{r7, lr}
    82ce:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    82d0:	4b03      	ldr	r3, [pc, #12]	; (82e0 <TCC0_0_Handler+0x14>)
    82d2:	681b      	ldr	r3, [r3, #0]
    82d4:	4618      	mov	r0, r3
    82d6:	4b03      	ldr	r3, [pc, #12]	; (82e4 <TCC0_0_Handler+0x18>)
    82d8:	4798      	blx	r3
}
    82da:	bf00      	nop
    82dc:	bd80      	pop	{r7, pc}
    82de:	bf00      	nop
    82e0:	20000a8c 	.word	0x20000a8c
    82e4:	00008295 	.word	0x00008295

000082e8 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    82e8:	b580      	push	{r7, lr}
    82ea:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    82ec:	4b03      	ldr	r3, [pc, #12]	; (82fc <TCC1_0_Handler+0x14>)
    82ee:	681b      	ldr	r3, [r3, #0]
    82f0:	4618      	mov	r0, r3
    82f2:	4b03      	ldr	r3, [pc, #12]	; (8300 <TCC1_0_Handler+0x18>)
    82f4:	4798      	blx	r3
}
    82f6:	bf00      	nop
    82f8:	bd80      	pop	{r7, pc}
    82fa:	bf00      	nop
    82fc:	20000a90 	.word	0x20000a90
    8300:	00008295 	.word	0x00008295

00008304 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    8304:	b480      	push	{r7}
    8306:	b085      	sub	sp, #20
    8308:	af00      	add	r7, sp, #0
    830a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    830c:	2300      	movs	r3, #0
    830e:	73fb      	strb	r3, [r7, #15]
    8310:	e015      	b.n	833e <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    8312:	7bfa      	ldrb	r2, [r7, #15]
    8314:	490f      	ldr	r1, [pc, #60]	; (8354 <_get_tcc_cfg+0x50>)
    8316:	4613      	mov	r3, r2
    8318:	005b      	lsls	r3, r3, #1
    831a:	4413      	add	r3, r2
    831c:	011b      	lsls	r3, r3, #4
    831e:	440b      	add	r3, r1
    8320:	681a      	ldr	r2, [r3, #0]
    8322:	687b      	ldr	r3, [r7, #4]
    8324:	429a      	cmp	r2, r3
    8326:	d107      	bne.n	8338 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    8328:	7bfa      	ldrb	r2, [r7, #15]
    832a:	4613      	mov	r3, r2
    832c:	005b      	lsls	r3, r3, #1
    832e:	4413      	add	r3, r2
    8330:	011b      	lsls	r3, r3, #4
    8332:	4a08      	ldr	r2, [pc, #32]	; (8354 <_get_tcc_cfg+0x50>)
    8334:	4413      	add	r3, r2
    8336:	e006      	b.n	8346 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8338:	7bfb      	ldrb	r3, [r7, #15]
    833a:	3301      	adds	r3, #1
    833c:	73fb      	strb	r3, [r7, #15]
    833e:	7bfb      	ldrb	r3, [r7, #15]
    8340:	2b01      	cmp	r3, #1
    8342:	d9e6      	bls.n	8312 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    8344:	2300      	movs	r3, #0
}
    8346:	4618      	mov	r0, r3
    8348:	3714      	adds	r7, #20
    834a:	46bd      	mov	sp, r7
    834c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8350:	4770      	bx	lr
    8352:	bf00      	nop
    8354:	20000060 	.word	0x20000060

00008358 <__NVIC_EnableIRQ>:
{
    8358:	b480      	push	{r7}
    835a:	b083      	sub	sp, #12
    835c:	af00      	add	r7, sp, #0
    835e:	4603      	mov	r3, r0
    8360:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8366:	2b00      	cmp	r3, #0
    8368:	db0b      	blt.n	8382 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    836a:	4909      	ldr	r1, [pc, #36]	; (8390 <__NVIC_EnableIRQ+0x38>)
    836c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8370:	095b      	lsrs	r3, r3, #5
    8372:	88fa      	ldrh	r2, [r7, #6]
    8374:	f002 021f 	and.w	r2, r2, #31
    8378:	2001      	movs	r0, #1
    837a:	fa00 f202 	lsl.w	r2, r0, r2
    837e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8382:	bf00      	nop
    8384:	370c      	adds	r7, #12
    8386:	46bd      	mov	sp, r7
    8388:	f85d 7b04 	ldr.w	r7, [sp], #4
    838c:	4770      	bx	lr
    838e:	bf00      	nop
    8390:	e000e100 	.word	0xe000e100

00008394 <__NVIC_DisableIRQ>:
{
    8394:	b480      	push	{r7}
    8396:	b083      	sub	sp, #12
    8398:	af00      	add	r7, sp, #0
    839a:	4603      	mov	r3, r0
    839c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    839e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83a2:	2b00      	cmp	r3, #0
    83a4:	db10      	blt.n	83c8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    83a6:	490b      	ldr	r1, [pc, #44]	; (83d4 <__NVIC_DisableIRQ+0x40>)
    83a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83ac:	095b      	lsrs	r3, r3, #5
    83ae:	88fa      	ldrh	r2, [r7, #6]
    83b0:	f002 021f 	and.w	r2, r2, #31
    83b4:	2001      	movs	r0, #1
    83b6:	fa00 f202 	lsl.w	r2, r0, r2
    83ba:	3320      	adds	r3, #32
    83bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    83c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    83c4:	f3bf 8f6f 	isb	sy
}
    83c8:	bf00      	nop
    83ca:	370c      	adds	r7, #12
    83cc:	46bd      	mov	sp, r7
    83ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    83d2:	4770      	bx	lr
    83d4:	e000e100 	.word	0xe000e100

000083d8 <__NVIC_ClearPendingIRQ>:
{
    83d8:	b480      	push	{r7}
    83da:	b083      	sub	sp, #12
    83dc:	af00      	add	r7, sp, #0
    83de:	4603      	mov	r3, r0
    83e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    83e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83e6:	2b00      	cmp	r3, #0
    83e8:	db0c      	blt.n	8404 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    83ea:	4909      	ldr	r1, [pc, #36]	; (8410 <__NVIC_ClearPendingIRQ+0x38>)
    83ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83f0:	095b      	lsrs	r3, r3, #5
    83f2:	88fa      	ldrh	r2, [r7, #6]
    83f4:	f002 021f 	and.w	r2, r2, #31
    83f8:	2001      	movs	r0, #1
    83fa:	fa00 f202 	lsl.w	r2, r0, r2
    83fe:	3360      	adds	r3, #96	; 0x60
    8400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8404:	bf00      	nop
    8406:	370c      	adds	r7, #12
    8408:	46bd      	mov	sp, r7
    840a:	f85d 7b04 	ldr.w	r7, [sp], #4
    840e:	4770      	bx	lr
    8410:	e000e100 	.word	0xe000e100

00008414 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8414:	b480      	push	{r7}
    8416:	b083      	sub	sp, #12
    8418:	af00      	add	r7, sp, #0
    841a:	6078      	str	r0, [r7, #4]
    841c:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    841e:	bf00      	nop
    8420:	687b      	ldr	r3, [r7, #4]
    8422:	691a      	ldr	r2, [r3, #16]
    8424:	683b      	ldr	r3, [r7, #0]
    8426:	4013      	ands	r3, r2
    8428:	2b00      	cmp	r3, #0
    842a:	d1f9      	bne.n	8420 <hri_tc_wait_for_sync+0xc>
	};
}
    842c:	bf00      	nop
    842e:	370c      	adds	r7, #12
    8430:	46bd      	mov	sp, r7
    8432:	f85d 7b04 	ldr.w	r7, [sp], #4
    8436:	4770      	bx	lr

00008438 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8438:	b480      	push	{r7}
    843a:	b083      	sub	sp, #12
    843c:	af00      	add	r7, sp, #0
    843e:	6078      	str	r0, [r7, #4]
    8440:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    8442:	687b      	ldr	r3, [r7, #4]
    8444:	691a      	ldr	r2, [r3, #16]
    8446:	683b      	ldr	r3, [r7, #0]
    8448:	4013      	ands	r3, r2
    844a:	2b00      	cmp	r3, #0
    844c:	bf14      	ite	ne
    844e:	2301      	movne	r3, #1
    8450:	2300      	moveq	r3, #0
    8452:	b2db      	uxtb	r3, r3
}
    8454:	4618      	mov	r0, r3
    8456:	370c      	adds	r7, #12
    8458:	46bd      	mov	sp, r7
    845a:	f85d 7b04 	ldr.w	r7, [sp], #4
    845e:	4770      	bx	lr

00008460 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    8460:	b480      	push	{r7}
    8462:	b083      	sub	sp, #12
    8464:	af00      	add	r7, sp, #0
    8466:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    8468:	687b      	ldr	r3, [r7, #4]
    846a:	7a9b      	ldrb	r3, [r3, #10]
    846c:	b2db      	uxtb	r3, r3
    846e:	f003 0301 	and.w	r3, r3, #1
    8472:	2b00      	cmp	r3, #0
    8474:	bf14      	ite	ne
    8476:	2301      	movne	r3, #1
    8478:	2300      	moveq	r3, #0
    847a:	b2db      	uxtb	r3, r3
}
    847c:	4618      	mov	r0, r3
    847e:	370c      	adds	r7, #12
    8480:	46bd      	mov	sp, r7
    8482:	f85d 7b04 	ldr.w	r7, [sp], #4
    8486:	4770      	bx	lr

00008488 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    8488:	b480      	push	{r7}
    848a:	b083      	sub	sp, #12
    848c:	af00      	add	r7, sp, #0
    848e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	2201      	movs	r2, #1
    8494:	729a      	strb	r2, [r3, #10]
}
    8496:	bf00      	nop
    8498:	370c      	adds	r7, #12
    849a:	46bd      	mov	sp, r7
    849c:	f85d 7b04 	ldr.w	r7, [sp], #4
    84a0:	4770      	bx	lr

000084a2 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    84a2:	b480      	push	{r7}
    84a4:	b083      	sub	sp, #12
    84a6:	af00      	add	r7, sp, #0
    84a8:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    84aa:	687b      	ldr	r3, [r7, #4]
    84ac:	2202      	movs	r2, #2
    84ae:	729a      	strb	r2, [r3, #10]
}
    84b0:	bf00      	nop
    84b2:	370c      	adds	r7, #12
    84b4:	46bd      	mov	sp, r7
    84b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ba:	4770      	bx	lr

000084bc <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    84bc:	b480      	push	{r7}
    84be:	b083      	sub	sp, #12
    84c0:	af00      	add	r7, sp, #0
    84c2:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    84c4:	687b      	ldr	r3, [r7, #4]
    84c6:	2201      	movs	r2, #1
    84c8:	725a      	strb	r2, [r3, #9]
}
    84ca:	bf00      	nop
    84cc:	370c      	adds	r7, #12
    84ce:	46bd      	mov	sp, r7
    84d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    84d4:	4770      	bx	lr

000084d6 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    84d6:	b480      	push	{r7}
    84d8:	b083      	sub	sp, #12
    84da:	af00      	add	r7, sp, #0
    84dc:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    84de:	687b      	ldr	r3, [r7, #4]
    84e0:	7a5b      	ldrb	r3, [r3, #9]
    84e2:	b2db      	uxtb	r3, r3
    84e4:	085b      	lsrs	r3, r3, #1
    84e6:	f003 0301 	and.w	r3, r3, #1
    84ea:	2b00      	cmp	r3, #0
    84ec:	bf14      	ite	ne
    84ee:	2301      	movne	r3, #1
    84f0:	2300      	moveq	r3, #0
    84f2:	b2db      	uxtb	r3, r3
}
    84f4:	4618      	mov	r0, r3
    84f6:	370c      	adds	r7, #12
    84f8:	46bd      	mov	sp, r7
    84fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    84fe:	4770      	bx	lr

00008500 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8500:	b580      	push	{r7, lr}
    8502:	b082      	sub	sp, #8
    8504:	af00      	add	r7, sp, #0
    8506:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8508:	687b      	ldr	r3, [r7, #4]
    850a:	681b      	ldr	r3, [r3, #0]
    850c:	f043 0201 	orr.w	r2, r3, #1
    8510:	687b      	ldr	r3, [r7, #4]
    8512:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8514:	2101      	movs	r1, #1
    8516:	6878      	ldr	r0, [r7, #4]
    8518:	4b02      	ldr	r3, [pc, #8]	; (8524 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    851a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    851c:	bf00      	nop
    851e:	3708      	adds	r7, #8
    8520:	46bd      	mov	sp, r7
    8522:	bd80      	pop	{r7, pc}
    8524:	00008415 	.word	0x00008415

00008528 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8528:	b580      	push	{r7, lr}
    852a:	b082      	sub	sp, #8
    852c:	af00      	add	r7, sp, #0
    852e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8530:	687b      	ldr	r3, [r7, #4]
    8532:	681b      	ldr	r3, [r3, #0]
    8534:	f043 0202 	orr.w	r2, r3, #2
    8538:	687b      	ldr	r3, [r7, #4]
    853a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    853c:	2103      	movs	r1, #3
    853e:	6878      	ldr	r0, [r7, #4]
    8540:	4b02      	ldr	r3, [pc, #8]	; (854c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    8542:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8544:	bf00      	nop
    8546:	3708      	adds	r7, #8
    8548:	46bd      	mov	sp, r7
    854a:	bd80      	pop	{r7, pc}
    854c:	00008415 	.word	0x00008415

00008550 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8550:	b580      	push	{r7, lr}
    8552:	b084      	sub	sp, #16
    8554:	af00      	add	r7, sp, #0
    8556:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8558:	2103      	movs	r1, #3
    855a:	6878      	ldr	r0, [r7, #4]
    855c:	4b09      	ldr	r3, [pc, #36]	; (8584 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    855e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8560:	687b      	ldr	r3, [r7, #4]
    8562:	681b      	ldr	r3, [r3, #0]
    8564:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    8566:	68fb      	ldr	r3, [r7, #12]
    8568:	085b      	lsrs	r3, r3, #1
    856a:	f003 0301 	and.w	r3, r3, #1
    856e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8570:	68fb      	ldr	r3, [r7, #12]
    8572:	2b00      	cmp	r3, #0
    8574:	bf14      	ite	ne
    8576:	2301      	movne	r3, #1
    8578:	2300      	moveq	r3, #0
    857a:	b2db      	uxtb	r3, r3
}
    857c:	4618      	mov	r0, r3
    857e:	3710      	adds	r7, #16
    8580:	46bd      	mov	sp, r7
    8582:	bd80      	pop	{r7, pc}
    8584:	00008415 	.word	0x00008415

00008588 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8588:	b580      	push	{r7, lr}
    858a:	b082      	sub	sp, #8
    858c:	af00      	add	r7, sp, #0
    858e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8590:	687b      	ldr	r3, [r7, #4]
    8592:	681b      	ldr	r3, [r3, #0]
    8594:	f023 0202 	bic.w	r2, r3, #2
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    859c:	2103      	movs	r1, #3
    859e:	6878      	ldr	r0, [r7, #4]
    85a0:	4b02      	ldr	r3, [pc, #8]	; (85ac <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    85a2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    85a4:	bf00      	nop
    85a6:	3708      	adds	r7, #8
    85a8:	46bd      	mov	sp, r7
    85aa:	bd80      	pop	{r7, pc}
    85ac:	00008415 	.word	0x00008415

000085b0 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    85b0:	b480      	push	{r7}
    85b2:	b085      	sub	sp, #20
    85b4:	af00      	add	r7, sp, #0
    85b6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	681b      	ldr	r3, [r3, #0]
    85bc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    85be:	68fb      	ldr	r3, [r7, #12]
    85c0:	089b      	lsrs	r3, r3, #2
    85c2:	f003 0303 	and.w	r3, r3, #3
    85c6:	60fb      	str	r3, [r7, #12]
	return tmp;
    85c8:	68fb      	ldr	r3, [r7, #12]
}
    85ca:	4618      	mov	r0, r3
    85cc:	3714      	adds	r7, #20
    85ce:	46bd      	mov	sp, r7
    85d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d4:	4770      	bx	lr
	...

000085d8 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    85d8:	b580      	push	{r7, lr}
    85da:	b084      	sub	sp, #16
    85dc:	af00      	add	r7, sp, #0
    85de:	6078      	str	r0, [r7, #4]
    85e0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    85e2:	2103      	movs	r1, #3
    85e4:	6878      	ldr	r0, [r7, #4]
    85e6:	4b07      	ldr	r3, [pc, #28]	; (8604 <hri_tc_get_CTRLA_reg+0x2c>)
    85e8:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    85ea:	687b      	ldr	r3, [r7, #4]
    85ec:	681b      	ldr	r3, [r3, #0]
    85ee:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    85f0:	68fa      	ldr	r2, [r7, #12]
    85f2:	683b      	ldr	r3, [r7, #0]
    85f4:	4013      	ands	r3, r2
    85f6:	60fb      	str	r3, [r7, #12]
	return tmp;
    85f8:	68fb      	ldr	r3, [r7, #12]
}
    85fa:	4618      	mov	r0, r3
    85fc:	3710      	adds	r7, #16
    85fe:	46bd      	mov	sp, r7
    8600:	bd80      	pop	{r7, pc}
    8602:	bf00      	nop
    8604:	00008415 	.word	0x00008415

00008608 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8608:	b580      	push	{r7, lr}
    860a:	b082      	sub	sp, #8
    860c:	af00      	add	r7, sp, #0
    860e:	6078      	str	r0, [r7, #4]
    8610:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    8612:	687b      	ldr	r3, [r7, #4]
    8614:	683a      	ldr	r2, [r7, #0]
    8616:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8618:	2103      	movs	r1, #3
    861a:	6878      	ldr	r0, [r7, #4]
    861c:	4b02      	ldr	r3, [pc, #8]	; (8628 <hri_tc_write_CTRLA_reg+0x20>)
    861e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8620:	bf00      	nop
    8622:	3708      	adds	r7, #8
    8624:	46bd      	mov	sp, r7
    8626:	bd80      	pop	{r7, pc}
    8628:	00008415 	.word	0x00008415

0000862c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    862c:	b480      	push	{r7}
    862e:	b083      	sub	sp, #12
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
    8634:	460b      	mov	r3, r1
    8636:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8638:	687b      	ldr	r3, [r7, #4]
    863a:	887a      	ldrh	r2, [r7, #2]
    863c:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    863e:	bf00      	nop
    8640:	370c      	adds	r7, #12
    8642:	46bd      	mov	sp, r7
    8644:	f85d 7b04 	ldr.w	r7, [sp], #4
    8648:	4770      	bx	lr

0000864a <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    864a:	b480      	push	{r7}
    864c:	b083      	sub	sp, #12
    864e:	af00      	add	r7, sp, #0
    8650:	6078      	str	r0, [r7, #4]
    8652:	460b      	mov	r3, r1
    8654:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    8656:	687b      	ldr	r3, [r7, #4]
    8658:	78fa      	ldrb	r2, [r7, #3]
    865a:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    865c:	bf00      	nop
    865e:	370c      	adds	r7, #12
    8660:	46bd      	mov	sp, r7
    8662:	f85d 7b04 	ldr.w	r7, [sp], #4
    8666:	4770      	bx	lr

00008668 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    8668:	b480      	push	{r7}
    866a:	b083      	sub	sp, #12
    866c:	af00      	add	r7, sp, #0
    866e:	6078      	str	r0, [r7, #4]
    8670:	460b      	mov	r3, r1
    8672:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    8674:	687b      	ldr	r3, [r7, #4]
    8676:	78fa      	ldrb	r2, [r7, #3]
    8678:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    867a:	bf00      	nop
    867c:	370c      	adds	r7, #12
    867e:	46bd      	mov	sp, r7
    8680:	f85d 7b04 	ldr.w	r7, [sp], #4
    8684:	4770      	bx	lr
	...

00008688 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    8688:	b580      	push	{r7, lr}
    868a:	b082      	sub	sp, #8
    868c:	af00      	add	r7, sp, #0
    868e:	6078      	str	r0, [r7, #4]
    8690:	460b      	mov	r3, r1
    8692:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    8694:	687b      	ldr	r3, [r7, #4]
    8696:	78fa      	ldrb	r2, [r7, #3]
    8698:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    869a:	2120      	movs	r1, #32
    869c:	6878      	ldr	r0, [r7, #4]
    869e:	4b03      	ldr	r3, [pc, #12]	; (86ac <hri_tccount8_write_PER_reg+0x24>)
    86a0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    86a2:	bf00      	nop
    86a4:	3708      	adds	r7, #8
    86a6:	46bd      	mov	sp, r7
    86a8:	bd80      	pop	{r7, pc}
    86aa:	bf00      	nop
    86ac:	00008415 	.word	0x00008415

000086b0 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    86b0:	b580      	push	{r7, lr}
    86b2:	b082      	sub	sp, #8
    86b4:	af00      	add	r7, sp, #0
    86b6:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    86b8:	2120      	movs	r1, #32
    86ba:	6878      	ldr	r0, [r7, #4]
    86bc:	4b04      	ldr	r3, [pc, #16]	; (86d0 <hri_tccount8_read_PER_reg+0x20>)
    86be:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    86c0:	687b      	ldr	r3, [r7, #4]
    86c2:	7edb      	ldrb	r3, [r3, #27]
    86c4:	b2db      	uxtb	r3, r3
}
    86c6:	4618      	mov	r0, r3
    86c8:	3708      	adds	r7, #8
    86ca:	46bd      	mov	sp, r7
    86cc:	bd80      	pop	{r7, pc}
    86ce:	bf00      	nop
    86d0:	00008415 	.word	0x00008415

000086d4 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    86d4:	b580      	push	{r7, lr}
    86d6:	b082      	sub	sp, #8
    86d8:	af00      	add	r7, sp, #0
    86da:	6078      	str	r0, [r7, #4]
    86dc:	460b      	mov	r3, r1
    86de:	70fb      	strb	r3, [r7, #3]
    86e0:	4613      	mov	r3, r2
    86e2:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    86e4:	78fb      	ldrb	r3, [r7, #3]
    86e6:	687a      	ldr	r2, [r7, #4]
    86e8:	4413      	add	r3, r2
    86ea:	78ba      	ldrb	r2, [r7, #2]
    86ec:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    86ee:	21c0      	movs	r1, #192	; 0xc0
    86f0:	6878      	ldr	r0, [r7, #4]
    86f2:	4b03      	ldr	r3, [pc, #12]	; (8700 <hri_tccount8_write_CC_reg+0x2c>)
    86f4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    86f6:	bf00      	nop
    86f8:	3708      	adds	r7, #8
    86fa:	46bd      	mov	sp, r7
    86fc:	bd80      	pop	{r7, pc}
    86fe:	bf00      	nop
    8700:	00008415 	.word	0x00008415

00008704 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    8704:	b580      	push	{r7, lr}
    8706:	b082      	sub	sp, #8
    8708:	af00      	add	r7, sp, #0
    870a:	6078      	str	r0, [r7, #4]
    870c:	460b      	mov	r3, r1
    870e:	70fb      	strb	r3, [r7, #3]
    8710:	4613      	mov	r3, r2
    8712:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8714:	78fb      	ldrb	r3, [r7, #3]
    8716:	687a      	ldr	r2, [r7, #4]
    8718:	330c      	adds	r3, #12
    871a:	005b      	lsls	r3, r3, #1
    871c:	4413      	add	r3, r2
    871e:	883a      	ldrh	r2, [r7, #0]
    8720:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8722:	21c0      	movs	r1, #192	; 0xc0
    8724:	6878      	ldr	r0, [r7, #4]
    8726:	4b03      	ldr	r3, [pc, #12]	; (8734 <hri_tccount16_write_CC_reg+0x30>)
    8728:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    872a:	bf00      	nop
    872c:	3708      	adds	r7, #8
    872e:	46bd      	mov	sp, r7
    8730:	bd80      	pop	{r7, pc}
    8732:	bf00      	nop
    8734:	00008415 	.word	0x00008415

00008738 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8738:	b580      	push	{r7, lr}
    873a:	b082      	sub	sp, #8
    873c:	af00      	add	r7, sp, #0
    873e:	6078      	str	r0, [r7, #4]
    8740:	460b      	mov	r3, r1
    8742:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8744:	21c0      	movs	r1, #192	; 0xc0
    8746:	6878      	ldr	r0, [r7, #4]
    8748:	4b06      	ldr	r3, [pc, #24]	; (8764 <hri_tccount16_read_CC_reg+0x2c>)
    874a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    874c:	78fb      	ldrb	r3, [r7, #3]
    874e:	687a      	ldr	r2, [r7, #4]
    8750:	330c      	adds	r3, #12
    8752:	005b      	lsls	r3, r3, #1
    8754:	4413      	add	r3, r2
    8756:	889b      	ldrh	r3, [r3, #4]
    8758:	b29b      	uxth	r3, r3
}
    875a:	4618      	mov	r0, r3
    875c:	3708      	adds	r7, #8
    875e:	46bd      	mov	sp, r7
    8760:	bd80      	pop	{r7, pc}
    8762:	bf00      	nop
    8764:	00008415 	.word	0x00008415

00008768 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    8768:	b580      	push	{r7, lr}
    876a:	b084      	sub	sp, #16
    876c:	af00      	add	r7, sp, #0
    876e:	60f8      	str	r0, [r7, #12]
    8770:	460b      	mov	r3, r1
    8772:	607a      	str	r2, [r7, #4]
    8774:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    8776:	7afb      	ldrb	r3, [r7, #11]
    8778:	68fa      	ldr	r2, [r7, #12]
    877a:	3306      	adds	r3, #6
    877c:	009b      	lsls	r3, r3, #2
    877e:	4413      	add	r3, r2
    8780:	687a      	ldr	r2, [r7, #4]
    8782:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8784:	21c0      	movs	r1, #192	; 0xc0
    8786:	68f8      	ldr	r0, [r7, #12]
    8788:	4b02      	ldr	r3, [pc, #8]	; (8794 <hri_tccount32_write_CC_reg+0x2c>)
    878a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    878c:	bf00      	nop
    878e:	3710      	adds	r7, #16
    8790:	46bd      	mov	sp, r7
    8792:	bd80      	pop	{r7, pc}
    8794:	00008415 	.word	0x00008415

00008798 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    8798:	b580      	push	{r7, lr}
    879a:	b082      	sub	sp, #8
    879c:	af00      	add	r7, sp, #0
    879e:	6078      	str	r0, [r7, #4]
    87a0:	460b      	mov	r3, r1
    87a2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    87a4:	21c0      	movs	r1, #192	; 0xc0
    87a6:	6878      	ldr	r0, [r7, #4]
    87a8:	4b05      	ldr	r3, [pc, #20]	; (87c0 <hri_tccount32_read_CC_reg+0x28>)
    87aa:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    87ac:	78fb      	ldrb	r3, [r7, #3]
    87ae:	687a      	ldr	r2, [r7, #4]
    87b0:	3306      	adds	r3, #6
    87b2:	009b      	lsls	r3, r3, #2
    87b4:	4413      	add	r3, r2
    87b6:	685b      	ldr	r3, [r3, #4]
}
    87b8:	4618      	mov	r0, r3
    87ba:	3708      	adds	r7, #8
    87bc:	46bd      	mov	sp, r7
    87be:	bd80      	pop	{r7, pc}
    87c0:	00008415 	.word	0x00008415

000087c4 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    87c4:	b580      	push	{r7, lr}
    87c6:	b084      	sub	sp, #16
    87c8:	af00      	add	r7, sp, #0
    87ca:	6078      	str	r0, [r7, #4]
    87cc:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    87ce:	6838      	ldr	r0, [r7, #0]
    87d0:	4b93      	ldr	r3, [pc, #588]	; (8a20 <_tc_timer_init+0x25c>)
    87d2:	4798      	blx	r3
    87d4:	4603      	mov	r3, r0
    87d6:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	683a      	ldr	r2, [r7, #0]
    87dc:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    87de:	22a4      	movs	r2, #164	; 0xa4
    87e0:	4990      	ldr	r1, [pc, #576]	; (8a24 <_tc_timer_init+0x260>)
    87e2:	2001      	movs	r0, #1
    87e4:	4b90      	ldr	r3, [pc, #576]	; (8a28 <_tc_timer_init+0x264>)
    87e6:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    87e8:	2101      	movs	r1, #1
    87ea:	6838      	ldr	r0, [r7, #0]
    87ec:	4b8f      	ldr	r3, [pc, #572]	; (8a2c <_tc_timer_init+0x268>)
    87ee:	4798      	blx	r3
    87f0:	4603      	mov	r3, r0
    87f2:	f083 0301 	eor.w	r3, r3, #1
    87f6:	b2db      	uxtb	r3, r3
    87f8:	2b00      	cmp	r3, #0
    87fa:	d011      	beq.n	8820 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    87fc:	2102      	movs	r1, #2
    87fe:	6838      	ldr	r0, [r7, #0]
    8800:	4b8b      	ldr	r3, [pc, #556]	; (8a30 <_tc_timer_init+0x26c>)
    8802:	4798      	blx	r3
    8804:	4603      	mov	r3, r0
    8806:	2b00      	cmp	r3, #0
    8808:	d006      	beq.n	8818 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    880a:	6838      	ldr	r0, [r7, #0]
    880c:	4b89      	ldr	r3, [pc, #548]	; (8a34 <_tc_timer_init+0x270>)
    880e:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8810:	2102      	movs	r1, #2
    8812:	6838      	ldr	r0, [r7, #0]
    8814:	4b88      	ldr	r3, [pc, #544]	; (8a38 <_tc_timer_init+0x274>)
    8816:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8818:	2101      	movs	r1, #1
    881a:	6838      	ldr	r0, [r7, #0]
    881c:	4b87      	ldr	r3, [pc, #540]	; (8a3c <_tc_timer_init+0x278>)
    881e:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8820:	2101      	movs	r1, #1
    8822:	6838      	ldr	r0, [r7, #0]
    8824:	4b84      	ldr	r3, [pc, #528]	; (8a38 <_tc_timer_init+0x274>)
    8826:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8828:	f997 200f 	ldrsb.w	r2, [r7, #15]
    882c:	4984      	ldr	r1, [pc, #528]	; (8a40 <_tc_timer_init+0x27c>)
    882e:	4613      	mov	r3, r2
    8830:	009b      	lsls	r3, r3, #2
    8832:	4413      	add	r3, r2
    8834:	009b      	lsls	r3, r3, #2
    8836:	440b      	add	r3, r1
    8838:	3304      	adds	r3, #4
    883a:	681b      	ldr	r3, [r3, #0]
    883c:	4619      	mov	r1, r3
    883e:	6838      	ldr	r0, [r7, #0]
    8840:	4b7e      	ldr	r3, [pc, #504]	; (8a3c <_tc_timer_init+0x278>)
    8842:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8844:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8848:	497d      	ldr	r1, [pc, #500]	; (8a40 <_tc_timer_init+0x27c>)
    884a:	4613      	mov	r3, r2
    884c:	009b      	lsls	r3, r3, #2
    884e:	4413      	add	r3, r2
    8850:	009b      	lsls	r3, r3, #2
    8852:	440b      	add	r3, r1
    8854:	330a      	adds	r3, #10
    8856:	781b      	ldrb	r3, [r3, #0]
    8858:	4619      	mov	r1, r3
    885a:	6838      	ldr	r0, [r7, #0]
    885c:	4b79      	ldr	r3, [pc, #484]	; (8a44 <_tc_timer_init+0x280>)
    885e:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8860:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8864:	4976      	ldr	r1, [pc, #472]	; (8a40 <_tc_timer_init+0x27c>)
    8866:	4613      	mov	r3, r2
    8868:	009b      	lsls	r3, r3, #2
    886a:	4413      	add	r3, r2
    886c:	009b      	lsls	r3, r3, #2
    886e:	440b      	add	r3, r1
    8870:	3308      	adds	r3, #8
    8872:	881b      	ldrh	r3, [r3, #0]
    8874:	4619      	mov	r1, r3
    8876:	6838      	ldr	r0, [r7, #0]
    8878:	4b73      	ldr	r3, [pc, #460]	; (8a48 <_tc_timer_init+0x284>)
    887a:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    887c:	2101      	movs	r1, #1
    887e:	6838      	ldr	r0, [r7, #0]
    8880:	4b72      	ldr	r3, [pc, #456]	; (8a4c <_tc_timer_init+0x288>)
    8882:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8884:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8888:	496d      	ldr	r1, [pc, #436]	; (8a40 <_tc_timer_init+0x27c>)
    888a:	4613      	mov	r3, r2
    888c:	009b      	lsls	r3, r3, #2
    888e:	4413      	add	r3, r2
    8890:	009b      	lsls	r3, r3, #2
    8892:	440b      	add	r3, r1
    8894:	3304      	adds	r3, #4
    8896:	681b      	ldr	r3, [r3, #0]
    8898:	f003 030c 	and.w	r3, r3, #12
    889c:	2b08      	cmp	r3, #8
    889e:	d11e      	bne.n	88de <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    88a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88a4:	4966      	ldr	r1, [pc, #408]	; (8a40 <_tc_timer_init+0x27c>)
    88a6:	4613      	mov	r3, r2
    88a8:	009b      	lsls	r3, r3, #2
    88aa:	4413      	add	r3, r2
    88ac:	009b      	lsls	r3, r3, #2
    88ae:	440b      	add	r3, r1
    88b0:	330c      	adds	r3, #12
    88b2:	681b      	ldr	r3, [r3, #0]
    88b4:	461a      	mov	r2, r3
    88b6:	2100      	movs	r1, #0
    88b8:	6838      	ldr	r0, [r7, #0]
    88ba:	4b65      	ldr	r3, [pc, #404]	; (8a50 <_tc_timer_init+0x28c>)
    88bc:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    88be:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88c2:	495f      	ldr	r1, [pc, #380]	; (8a40 <_tc_timer_init+0x27c>)
    88c4:	4613      	mov	r3, r2
    88c6:	009b      	lsls	r3, r3, #2
    88c8:	4413      	add	r3, r2
    88ca:	009b      	lsls	r3, r3, #2
    88cc:	440b      	add	r3, r1
    88ce:	3310      	adds	r3, #16
    88d0:	681b      	ldr	r3, [r3, #0]
    88d2:	461a      	mov	r2, r3
    88d4:	2101      	movs	r1, #1
    88d6:	6838      	ldr	r0, [r7, #0]
    88d8:	4b5d      	ldr	r3, [pc, #372]	; (8a50 <_tc_timer_init+0x28c>)
    88da:	4798      	blx	r3
    88dc:	e06a      	b.n	89b4 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    88de:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88e2:	4957      	ldr	r1, [pc, #348]	; (8a40 <_tc_timer_init+0x27c>)
    88e4:	4613      	mov	r3, r2
    88e6:	009b      	lsls	r3, r3, #2
    88e8:	4413      	add	r3, r2
    88ea:	009b      	lsls	r3, r3, #2
    88ec:	440b      	add	r3, r1
    88ee:	3304      	adds	r3, #4
    88f0:	681b      	ldr	r3, [r3, #0]
    88f2:	f003 030c 	and.w	r3, r3, #12
    88f6:	2b00      	cmp	r3, #0
    88f8:	d120      	bne.n	893c <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    88fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88fe:	4950      	ldr	r1, [pc, #320]	; (8a40 <_tc_timer_init+0x27c>)
    8900:	4613      	mov	r3, r2
    8902:	009b      	lsls	r3, r3, #2
    8904:	4413      	add	r3, r2
    8906:	009b      	lsls	r3, r3, #2
    8908:	440b      	add	r3, r1
    890a:	330c      	adds	r3, #12
    890c:	681b      	ldr	r3, [r3, #0]
    890e:	b29b      	uxth	r3, r3
    8910:	461a      	mov	r2, r3
    8912:	2100      	movs	r1, #0
    8914:	6838      	ldr	r0, [r7, #0]
    8916:	4b4f      	ldr	r3, [pc, #316]	; (8a54 <_tc_timer_init+0x290>)
    8918:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    891a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    891e:	4948      	ldr	r1, [pc, #288]	; (8a40 <_tc_timer_init+0x27c>)
    8920:	4613      	mov	r3, r2
    8922:	009b      	lsls	r3, r3, #2
    8924:	4413      	add	r3, r2
    8926:	009b      	lsls	r3, r3, #2
    8928:	440b      	add	r3, r1
    892a:	3310      	adds	r3, #16
    892c:	681b      	ldr	r3, [r3, #0]
    892e:	b29b      	uxth	r3, r3
    8930:	461a      	mov	r2, r3
    8932:	2101      	movs	r1, #1
    8934:	6838      	ldr	r0, [r7, #0]
    8936:	4b47      	ldr	r3, [pc, #284]	; (8a54 <_tc_timer_init+0x290>)
    8938:	4798      	blx	r3
    893a:	e03b      	b.n	89b4 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    893c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8940:	493f      	ldr	r1, [pc, #252]	; (8a40 <_tc_timer_init+0x27c>)
    8942:	4613      	mov	r3, r2
    8944:	009b      	lsls	r3, r3, #2
    8946:	4413      	add	r3, r2
    8948:	009b      	lsls	r3, r3, #2
    894a:	440b      	add	r3, r1
    894c:	3304      	adds	r3, #4
    894e:	681b      	ldr	r3, [r3, #0]
    8950:	f003 030c 	and.w	r3, r3, #12
    8954:	2b04      	cmp	r3, #4
    8956:	d12d      	bne.n	89b4 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8958:	f997 200f 	ldrsb.w	r2, [r7, #15]
    895c:	4938      	ldr	r1, [pc, #224]	; (8a40 <_tc_timer_init+0x27c>)
    895e:	4613      	mov	r3, r2
    8960:	009b      	lsls	r3, r3, #2
    8962:	4413      	add	r3, r2
    8964:	009b      	lsls	r3, r3, #2
    8966:	440b      	add	r3, r1
    8968:	330c      	adds	r3, #12
    896a:	681b      	ldr	r3, [r3, #0]
    896c:	b2db      	uxtb	r3, r3
    896e:	461a      	mov	r2, r3
    8970:	2100      	movs	r1, #0
    8972:	6838      	ldr	r0, [r7, #0]
    8974:	4b38      	ldr	r3, [pc, #224]	; (8a58 <_tc_timer_init+0x294>)
    8976:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8978:	f997 200f 	ldrsb.w	r2, [r7, #15]
    897c:	4930      	ldr	r1, [pc, #192]	; (8a40 <_tc_timer_init+0x27c>)
    897e:	4613      	mov	r3, r2
    8980:	009b      	lsls	r3, r3, #2
    8982:	4413      	add	r3, r2
    8984:	009b      	lsls	r3, r3, #2
    8986:	440b      	add	r3, r1
    8988:	3310      	adds	r3, #16
    898a:	681b      	ldr	r3, [r3, #0]
    898c:	b2db      	uxtb	r3, r3
    898e:	461a      	mov	r2, r3
    8990:	2101      	movs	r1, #1
    8992:	6838      	ldr	r0, [r7, #0]
    8994:	4b30      	ldr	r3, [pc, #192]	; (8a58 <_tc_timer_init+0x294>)
    8996:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    8998:	f997 200f 	ldrsb.w	r2, [r7, #15]
    899c:	4928      	ldr	r1, [pc, #160]	; (8a40 <_tc_timer_init+0x27c>)
    899e:	4613      	mov	r3, r2
    89a0:	009b      	lsls	r3, r3, #2
    89a2:	4413      	add	r3, r2
    89a4:	009b      	lsls	r3, r3, #2
    89a6:	440b      	add	r3, r1
    89a8:	330b      	adds	r3, #11
    89aa:	781b      	ldrb	r3, [r3, #0]
    89ac:	4619      	mov	r1, r3
    89ae:	6838      	ldr	r0, [r7, #0]
    89b0:	4b2a      	ldr	r3, [pc, #168]	; (8a5c <_tc_timer_init+0x298>)
    89b2:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    89b4:	6838      	ldr	r0, [r7, #0]
    89b6:	4b2a      	ldr	r3, [pc, #168]	; (8a60 <_tc_timer_init+0x29c>)
    89b8:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    89ba:	6879      	ldr	r1, [r7, #4]
    89bc:	6838      	ldr	r0, [r7, #0]
    89be:	4b29      	ldr	r3, [pc, #164]	; (8a64 <_tc_timer_init+0x2a0>)
    89c0:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    89c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89c6:	491e      	ldr	r1, [pc, #120]	; (8a40 <_tc_timer_init+0x27c>)
    89c8:	4613      	mov	r3, r2
    89ca:	009b      	lsls	r3, r3, #2
    89cc:	4413      	add	r3, r2
    89ce:	009b      	lsls	r3, r3, #2
    89d0:	440b      	add	r3, r1
    89d2:	3302      	adds	r3, #2
    89d4:	f9b3 3000 	ldrsh.w	r3, [r3]
    89d8:	4618      	mov	r0, r3
    89da:	4b23      	ldr	r3, [pc, #140]	; (8a68 <_tc_timer_init+0x2a4>)
    89dc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    89de:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89e2:	4917      	ldr	r1, [pc, #92]	; (8a40 <_tc_timer_init+0x27c>)
    89e4:	4613      	mov	r3, r2
    89e6:	009b      	lsls	r3, r3, #2
    89e8:	4413      	add	r3, r2
    89ea:	009b      	lsls	r3, r3, #2
    89ec:	440b      	add	r3, r1
    89ee:	3302      	adds	r3, #2
    89f0:	f9b3 3000 	ldrsh.w	r3, [r3]
    89f4:	4618      	mov	r0, r3
    89f6:	4b1d      	ldr	r3, [pc, #116]	; (8a6c <_tc_timer_init+0x2a8>)
    89f8:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    89fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    89fe:	4910      	ldr	r1, [pc, #64]	; (8a40 <_tc_timer_init+0x27c>)
    8a00:	4613      	mov	r3, r2
    8a02:	009b      	lsls	r3, r3, #2
    8a04:	4413      	add	r3, r2
    8a06:	009b      	lsls	r3, r3, #2
    8a08:	440b      	add	r3, r1
    8a0a:	3302      	adds	r3, #2
    8a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a10:	4618      	mov	r0, r3
    8a12:	4b17      	ldr	r3, [pc, #92]	; (8a70 <_tc_timer_init+0x2ac>)
    8a14:	4798      	blx	r3

	return ERR_NONE;
    8a16:	2300      	movs	r3, #0
}
    8a18:	4618      	mov	r0, r3
    8a1a:	3710      	adds	r7, #16
    8a1c:	46bd      	mov	sp, r7
    8a1e:	bd80      	pop	{r7, pc}
    8a20:	00009055 	.word	0x00009055
    8a24:	0001014c 	.word	0x0001014c
    8a28:	00003e69 	.word	0x00003e69
    8a2c:	00008439 	.word	0x00008439
    8a30:	000085d9 	.word	0x000085d9
    8a34:	00008589 	.word	0x00008589
    8a38:	00008415 	.word	0x00008415
    8a3c:	00008609 	.word	0x00008609
    8a40:	200000e0 	.word	0x200000e0
    8a44:	00008669 	.word	0x00008669
    8a48:	0000862d 	.word	0x0000862d
    8a4c:	0000864b 	.word	0x0000864b
    8a50:	00008769 	.word	0x00008769
    8a54:	00008705 	.word	0x00008705
    8a58:	000086d5 	.word	0x000086d5
    8a5c:	00008689 	.word	0x00008689
    8a60:	000084bd 	.word	0x000084bd
    8a64:	000090bd 	.word	0x000090bd
    8a68:	00008395 	.word	0x00008395
    8a6c:	000083d9 	.word	0x000083d9
    8a70:	00008359 	.word	0x00008359

00008a74 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    8a74:	b580      	push	{r7, lr}
    8a76:	b084      	sub	sp, #16
    8a78:	af00      	add	r7, sp, #0
    8a7a:	6078      	str	r0, [r7, #4]
    8a7c:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    8a7e:	6838      	ldr	r0, [r7, #0]
    8a80:	4b73      	ldr	r3, [pc, #460]	; (8c50 <_pwm_init+0x1dc>)
    8a82:	4798      	blx	r3
    8a84:	4603      	mov	r3, r0
    8a86:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    8a88:	687b      	ldr	r3, [r7, #4]
    8a8a:	683a      	ldr	r2, [r7, #0]
    8a8c:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8a8e:	2101      	movs	r1, #1
    8a90:	6838      	ldr	r0, [r7, #0]
    8a92:	4b70      	ldr	r3, [pc, #448]	; (8c54 <_pwm_init+0x1e0>)
    8a94:	4798      	blx	r3
    8a96:	4603      	mov	r3, r0
    8a98:	f083 0301 	eor.w	r3, r3, #1
    8a9c:	b2db      	uxtb	r3, r3
    8a9e:	2b00      	cmp	r3, #0
    8aa0:	d011      	beq.n	8ac6 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8aa2:	2102      	movs	r1, #2
    8aa4:	6838      	ldr	r0, [r7, #0]
    8aa6:	4b6c      	ldr	r3, [pc, #432]	; (8c58 <_pwm_init+0x1e4>)
    8aa8:	4798      	blx	r3
    8aaa:	4603      	mov	r3, r0
    8aac:	2b00      	cmp	r3, #0
    8aae:	d006      	beq.n	8abe <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8ab0:	6838      	ldr	r0, [r7, #0]
    8ab2:	4b6a      	ldr	r3, [pc, #424]	; (8c5c <_pwm_init+0x1e8>)
    8ab4:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8ab6:	2102      	movs	r1, #2
    8ab8:	6838      	ldr	r0, [r7, #0]
    8aba:	4b69      	ldr	r3, [pc, #420]	; (8c60 <_pwm_init+0x1ec>)
    8abc:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8abe:	2101      	movs	r1, #1
    8ac0:	6838      	ldr	r0, [r7, #0]
    8ac2:	4b68      	ldr	r3, [pc, #416]	; (8c64 <_pwm_init+0x1f0>)
    8ac4:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8ac6:	2101      	movs	r1, #1
    8ac8:	6838      	ldr	r0, [r7, #0]
    8aca:	4b65      	ldr	r3, [pc, #404]	; (8c60 <_pwm_init+0x1ec>)
    8acc:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8ace:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8ad2:	4965      	ldr	r1, [pc, #404]	; (8c68 <_pwm_init+0x1f4>)
    8ad4:	4613      	mov	r3, r2
    8ad6:	009b      	lsls	r3, r3, #2
    8ad8:	4413      	add	r3, r2
    8ada:	009b      	lsls	r3, r3, #2
    8adc:	440b      	add	r3, r1
    8ade:	3304      	adds	r3, #4
    8ae0:	681b      	ldr	r3, [r3, #0]
    8ae2:	4619      	mov	r1, r3
    8ae4:	6838      	ldr	r0, [r7, #0]
    8ae6:	4b5f      	ldr	r3, [pc, #380]	; (8c64 <_pwm_init+0x1f0>)
    8ae8:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8aea:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8aee:	495e      	ldr	r1, [pc, #376]	; (8c68 <_pwm_init+0x1f4>)
    8af0:	4613      	mov	r3, r2
    8af2:	009b      	lsls	r3, r3, #2
    8af4:	4413      	add	r3, r2
    8af6:	009b      	lsls	r3, r3, #2
    8af8:	440b      	add	r3, r1
    8afa:	330a      	adds	r3, #10
    8afc:	781b      	ldrb	r3, [r3, #0]
    8afe:	4619      	mov	r1, r3
    8b00:	6838      	ldr	r0, [r7, #0]
    8b02:	4b5a      	ldr	r3, [pc, #360]	; (8c6c <_pwm_init+0x1f8>)
    8b04:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8b06:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b0a:	4957      	ldr	r1, [pc, #348]	; (8c68 <_pwm_init+0x1f4>)
    8b0c:	4613      	mov	r3, r2
    8b0e:	009b      	lsls	r3, r3, #2
    8b10:	4413      	add	r3, r2
    8b12:	009b      	lsls	r3, r3, #2
    8b14:	440b      	add	r3, r1
    8b16:	3308      	adds	r3, #8
    8b18:	881b      	ldrh	r3, [r3, #0]
    8b1a:	4619      	mov	r1, r3
    8b1c:	6838      	ldr	r0, [r7, #0]
    8b1e:	4b54      	ldr	r3, [pc, #336]	; (8c70 <_pwm_init+0x1fc>)
    8b20:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    8b22:	2103      	movs	r1, #3
    8b24:	6838      	ldr	r0, [r7, #0]
    8b26:	4b53      	ldr	r3, [pc, #332]	; (8c74 <_pwm_init+0x200>)
    8b28:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8b2a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b2e:	494e      	ldr	r1, [pc, #312]	; (8c68 <_pwm_init+0x1f4>)
    8b30:	4613      	mov	r3, r2
    8b32:	009b      	lsls	r3, r3, #2
    8b34:	4413      	add	r3, r2
    8b36:	009b      	lsls	r3, r3, #2
    8b38:	440b      	add	r3, r1
    8b3a:	3304      	adds	r3, #4
    8b3c:	681b      	ldr	r3, [r3, #0]
    8b3e:	f003 030c 	and.w	r3, r3, #12
    8b42:	2b08      	cmp	r3, #8
    8b44:	d11e      	bne.n	8b84 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8b46:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b4a:	4947      	ldr	r1, [pc, #284]	; (8c68 <_pwm_init+0x1f4>)
    8b4c:	4613      	mov	r3, r2
    8b4e:	009b      	lsls	r3, r3, #2
    8b50:	4413      	add	r3, r2
    8b52:	009b      	lsls	r3, r3, #2
    8b54:	440b      	add	r3, r1
    8b56:	330c      	adds	r3, #12
    8b58:	681b      	ldr	r3, [r3, #0]
    8b5a:	461a      	mov	r2, r3
    8b5c:	2100      	movs	r1, #0
    8b5e:	6838      	ldr	r0, [r7, #0]
    8b60:	4b45      	ldr	r3, [pc, #276]	; (8c78 <_pwm_init+0x204>)
    8b62:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8b64:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b68:	493f      	ldr	r1, [pc, #252]	; (8c68 <_pwm_init+0x1f4>)
    8b6a:	4613      	mov	r3, r2
    8b6c:	009b      	lsls	r3, r3, #2
    8b6e:	4413      	add	r3, r2
    8b70:	009b      	lsls	r3, r3, #2
    8b72:	440b      	add	r3, r1
    8b74:	3310      	adds	r3, #16
    8b76:	681b      	ldr	r3, [r3, #0]
    8b78:	461a      	mov	r2, r3
    8b7a:	2101      	movs	r1, #1
    8b7c:	6838      	ldr	r0, [r7, #0]
    8b7e:	4b3e      	ldr	r3, [pc, #248]	; (8c78 <_pwm_init+0x204>)
    8b80:	4798      	blx	r3
    8b82:	e031      	b.n	8be8 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8b84:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8b88:	4937      	ldr	r1, [pc, #220]	; (8c68 <_pwm_init+0x1f4>)
    8b8a:	4613      	mov	r3, r2
    8b8c:	009b      	lsls	r3, r3, #2
    8b8e:	4413      	add	r3, r2
    8b90:	009b      	lsls	r3, r3, #2
    8b92:	440b      	add	r3, r1
    8b94:	3304      	adds	r3, #4
    8b96:	681b      	ldr	r3, [r3, #0]
    8b98:	f003 030c 	and.w	r3, r3, #12
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	d120      	bne.n	8be2 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8ba0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8ba4:	4930      	ldr	r1, [pc, #192]	; (8c68 <_pwm_init+0x1f4>)
    8ba6:	4613      	mov	r3, r2
    8ba8:	009b      	lsls	r3, r3, #2
    8baa:	4413      	add	r3, r2
    8bac:	009b      	lsls	r3, r3, #2
    8bae:	440b      	add	r3, r1
    8bb0:	330c      	adds	r3, #12
    8bb2:	681b      	ldr	r3, [r3, #0]
    8bb4:	b29b      	uxth	r3, r3
    8bb6:	461a      	mov	r2, r3
    8bb8:	2100      	movs	r1, #0
    8bba:	6838      	ldr	r0, [r7, #0]
    8bbc:	4b2f      	ldr	r3, [pc, #188]	; (8c7c <_pwm_init+0x208>)
    8bbe:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8bc0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8bc4:	4928      	ldr	r1, [pc, #160]	; (8c68 <_pwm_init+0x1f4>)
    8bc6:	4613      	mov	r3, r2
    8bc8:	009b      	lsls	r3, r3, #2
    8bca:	4413      	add	r3, r2
    8bcc:	009b      	lsls	r3, r3, #2
    8bce:	440b      	add	r3, r1
    8bd0:	3310      	adds	r3, #16
    8bd2:	681b      	ldr	r3, [r3, #0]
    8bd4:	b29b      	uxth	r3, r3
    8bd6:	461a      	mov	r2, r3
    8bd8:	2101      	movs	r1, #1
    8bda:	6838      	ldr	r0, [r7, #0]
    8bdc:	4b27      	ldr	r3, [pc, #156]	; (8c7c <_pwm_init+0x208>)
    8bde:	4798      	blx	r3
    8be0:	e002      	b.n	8be8 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    8be2:	f04f 33ff 	mov.w	r3, #4294967295
    8be6:	e02e      	b.n	8c46 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8be8:	6879      	ldr	r1, [r7, #4]
    8bea:	6838      	ldr	r0, [r7, #0]
    8bec:	4b24      	ldr	r3, [pc, #144]	; (8c80 <_pwm_init+0x20c>)
    8bee:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8bf0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8bf4:	491c      	ldr	r1, [pc, #112]	; (8c68 <_pwm_init+0x1f4>)
    8bf6:	4613      	mov	r3, r2
    8bf8:	009b      	lsls	r3, r3, #2
    8bfa:	4413      	add	r3, r2
    8bfc:	009b      	lsls	r3, r3, #2
    8bfe:	440b      	add	r3, r1
    8c00:	3302      	adds	r3, #2
    8c02:	f9b3 3000 	ldrsh.w	r3, [r3]
    8c06:	4618      	mov	r0, r3
    8c08:	4b1e      	ldr	r3, [pc, #120]	; (8c84 <_pwm_init+0x210>)
    8c0a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8c0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c10:	4915      	ldr	r1, [pc, #84]	; (8c68 <_pwm_init+0x1f4>)
    8c12:	4613      	mov	r3, r2
    8c14:	009b      	lsls	r3, r3, #2
    8c16:	4413      	add	r3, r2
    8c18:	009b      	lsls	r3, r3, #2
    8c1a:	440b      	add	r3, r1
    8c1c:	3302      	adds	r3, #2
    8c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8c22:	4618      	mov	r0, r3
    8c24:	4b18      	ldr	r3, [pc, #96]	; (8c88 <_pwm_init+0x214>)
    8c26:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8c28:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8c2c:	490e      	ldr	r1, [pc, #56]	; (8c68 <_pwm_init+0x1f4>)
    8c2e:	4613      	mov	r3, r2
    8c30:	009b      	lsls	r3, r3, #2
    8c32:	4413      	add	r3, r2
    8c34:	009b      	lsls	r3, r3, #2
    8c36:	440b      	add	r3, r1
    8c38:	3302      	adds	r3, #2
    8c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
    8c3e:	4618      	mov	r0, r3
    8c40:	4b12      	ldr	r3, [pc, #72]	; (8c8c <_pwm_init+0x218>)
    8c42:	4798      	blx	r3

	return 0;
    8c44:	2300      	movs	r3, #0
}
    8c46:	4618      	mov	r0, r3
    8c48:	3710      	adds	r7, #16
    8c4a:	46bd      	mov	sp, r7
    8c4c:	bd80      	pop	{r7, pc}
    8c4e:	bf00      	nop
    8c50:	00009055 	.word	0x00009055
    8c54:	00008439 	.word	0x00008439
    8c58:	000085d9 	.word	0x000085d9
    8c5c:	00008589 	.word	0x00008589
    8c60:	00008415 	.word	0x00008415
    8c64:	00008609 	.word	0x00008609
    8c68:	200000e0 	.word	0x200000e0
    8c6c:	00008669 	.word	0x00008669
    8c70:	0000862d 	.word	0x0000862d
    8c74:	0000864b 	.word	0x0000864b
    8c78:	00008769 	.word	0x00008769
    8c7c:	00008705 	.word	0x00008705
    8c80:	000090bd 	.word	0x000090bd
    8c84:	00008395 	.word	0x00008395
    8c88:	000083d9 	.word	0x000083d9
    8c8c:	00008359 	.word	0x00008359

00008c90 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8c90:	b580      	push	{r7, lr}
    8c92:	b084      	sub	sp, #16
    8c94:	af00      	add	r7, sp, #0
    8c96:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8c98:	687b      	ldr	r3, [r7, #4]
    8c9a:	68db      	ldr	r3, [r3, #12]
    8c9c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8c9e:	68f8      	ldr	r0, [r7, #12]
    8ca0:	4b10      	ldr	r3, [pc, #64]	; (8ce4 <_tc_timer_deinit+0x54>)
    8ca2:	4798      	blx	r3
    8ca4:	4603      	mov	r3, r0
    8ca6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8ca8:	22f9      	movs	r2, #249	; 0xf9
    8caa:	490f      	ldr	r1, [pc, #60]	; (8ce8 <_tc_timer_deinit+0x58>)
    8cac:	2001      	movs	r0, #1
    8cae:	4b0f      	ldr	r3, [pc, #60]	; (8cec <_tc_timer_deinit+0x5c>)
    8cb0:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    8cb2:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8cb6:	490e      	ldr	r1, [pc, #56]	; (8cf0 <_tc_timer_deinit+0x60>)
    8cb8:	4613      	mov	r3, r2
    8cba:	009b      	lsls	r3, r3, #2
    8cbc:	4413      	add	r3, r2
    8cbe:	009b      	lsls	r3, r3, #2
    8cc0:	440b      	add	r3, r1
    8cc2:	3302      	adds	r3, #2
    8cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
    8cc8:	4618      	mov	r0, r3
    8cca:	4b0a      	ldr	r3, [pc, #40]	; (8cf4 <_tc_timer_deinit+0x64>)
    8ccc:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8cce:	68f8      	ldr	r0, [r7, #12]
    8cd0:	4b09      	ldr	r3, [pc, #36]	; (8cf8 <_tc_timer_deinit+0x68>)
    8cd2:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8cd4:	68f8      	ldr	r0, [r7, #12]
    8cd6:	4b09      	ldr	r3, [pc, #36]	; (8cfc <_tc_timer_deinit+0x6c>)
    8cd8:	4798      	blx	r3
}
    8cda:	bf00      	nop
    8cdc:	3710      	adds	r7, #16
    8cde:	46bd      	mov	sp, r7
    8ce0:	bd80      	pop	{r7, pc}
    8ce2:	bf00      	nop
    8ce4:	00009055 	.word	0x00009055
    8ce8:	0001014c 	.word	0x0001014c
    8cec:	00003e69 	.word	0x00003e69
    8cf0:	200000e0 	.word	0x200000e0
    8cf4:	00008395 	.word	0x00008395
    8cf8:	00008589 	.word	0x00008589
    8cfc:	00008501 	.word	0x00008501

00008d00 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8d00:	b580      	push	{r7, lr}
    8d02:	b082      	sub	sp, #8
    8d04:	af00      	add	r7, sp, #0
    8d06:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8d08:	687b      	ldr	r3, [r7, #4]
    8d0a:	68db      	ldr	r3, [r3, #12]
    8d0c:	4618      	mov	r0, r3
    8d0e:	4b03      	ldr	r3, [pc, #12]	; (8d1c <_tc_timer_start+0x1c>)
    8d10:	4798      	blx	r3
}
    8d12:	bf00      	nop
    8d14:	3708      	adds	r7, #8
    8d16:	46bd      	mov	sp, r7
    8d18:	bd80      	pop	{r7, pc}
    8d1a:	bf00      	nop
    8d1c:	00008529 	.word	0x00008529

00008d20 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8d20:	b580      	push	{r7, lr}
    8d22:	b082      	sub	sp, #8
    8d24:	af00      	add	r7, sp, #0
    8d26:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8d28:	687b      	ldr	r3, [r7, #4]
    8d2a:	691b      	ldr	r3, [r3, #16]
    8d2c:	4618      	mov	r0, r3
    8d2e:	4b03      	ldr	r3, [pc, #12]	; (8d3c <_pwm_enable+0x1c>)
    8d30:	4798      	blx	r3
}
    8d32:	bf00      	nop
    8d34:	3708      	adds	r7, #8
    8d36:	46bd      	mov	sp, r7
    8d38:	bd80      	pop	{r7, pc}
    8d3a:	bf00      	nop
    8d3c:	00008529 	.word	0x00008529

00008d40 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8d40:	b580      	push	{r7, lr}
    8d42:	b082      	sub	sp, #8
    8d44:	af00      	add	r7, sp, #0
    8d46:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8d48:	687b      	ldr	r3, [r7, #4]
    8d4a:	68db      	ldr	r3, [r3, #12]
    8d4c:	4618      	mov	r0, r3
    8d4e:	4b03      	ldr	r3, [pc, #12]	; (8d5c <_tc_timer_stop+0x1c>)
    8d50:	4798      	blx	r3
}
    8d52:	bf00      	nop
    8d54:	3708      	adds	r7, #8
    8d56:	46bd      	mov	sp, r7
    8d58:	bd80      	pop	{r7, pc}
    8d5a:	bf00      	nop
    8d5c:	00008589 	.word	0x00008589

00008d60 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8d60:	b580      	push	{r7, lr}
    8d62:	b084      	sub	sp, #16
    8d64:	af00      	add	r7, sp, #0
    8d66:	6078      	str	r0, [r7, #4]
    8d68:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8d6a:	687b      	ldr	r3, [r7, #4]
    8d6c:	68db      	ldr	r3, [r3, #12]
    8d6e:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8d70:	68f8      	ldr	r0, [r7, #12]
    8d72:	4b14      	ldr	r3, [pc, #80]	; (8dc4 <_tc_timer_set_period+0x64>)
    8d74:	4798      	blx	r3
    8d76:	4603      	mov	r3, r0
    8d78:	2b02      	cmp	r3, #2
    8d7a:	d105      	bne.n	8d88 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8d7c:	683a      	ldr	r2, [r7, #0]
    8d7e:	2100      	movs	r1, #0
    8d80:	68f8      	ldr	r0, [r7, #12]
    8d82:	4b11      	ldr	r3, [pc, #68]	; (8dc8 <_tc_timer_set_period+0x68>)
    8d84:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8d86:	e019      	b.n	8dbc <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8d88:	68f8      	ldr	r0, [r7, #12]
    8d8a:	4b0e      	ldr	r3, [pc, #56]	; (8dc4 <_tc_timer_set_period+0x64>)
    8d8c:	4798      	blx	r3
    8d8e:	4603      	mov	r3, r0
    8d90:	2b00      	cmp	r3, #0
    8d92:	d107      	bne.n	8da4 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8d94:	683b      	ldr	r3, [r7, #0]
    8d96:	b29b      	uxth	r3, r3
    8d98:	461a      	mov	r2, r3
    8d9a:	2100      	movs	r1, #0
    8d9c:	68f8      	ldr	r0, [r7, #12]
    8d9e:	4b0b      	ldr	r3, [pc, #44]	; (8dcc <_tc_timer_set_period+0x6c>)
    8da0:	4798      	blx	r3
}
    8da2:	e00b      	b.n	8dbc <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8da4:	68f8      	ldr	r0, [r7, #12]
    8da6:	4b07      	ldr	r3, [pc, #28]	; (8dc4 <_tc_timer_set_period+0x64>)
    8da8:	4798      	blx	r3
    8daa:	4603      	mov	r3, r0
    8dac:	2b01      	cmp	r3, #1
    8dae:	d105      	bne.n	8dbc <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8db0:	683b      	ldr	r3, [r7, #0]
    8db2:	b2db      	uxtb	r3, r3
    8db4:	4619      	mov	r1, r3
    8db6:	68f8      	ldr	r0, [r7, #12]
    8db8:	4b05      	ldr	r3, [pc, #20]	; (8dd0 <_tc_timer_set_period+0x70>)
    8dba:	4798      	blx	r3
}
    8dbc:	bf00      	nop
    8dbe:	3710      	adds	r7, #16
    8dc0:	46bd      	mov	sp, r7
    8dc2:	bd80      	pop	{r7, pc}
    8dc4:	000085b1 	.word	0x000085b1
    8dc8:	00008769 	.word	0x00008769
    8dcc:	00008705 	.word	0x00008705
    8dd0:	00008689 	.word	0x00008689

00008dd4 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8dd4:	b580      	push	{r7, lr}
    8dd6:	b084      	sub	sp, #16
    8dd8:	af00      	add	r7, sp, #0
    8dda:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8ddc:	687b      	ldr	r3, [r7, #4]
    8dde:	68db      	ldr	r3, [r3, #12]
    8de0:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8de2:	68f8      	ldr	r0, [r7, #12]
    8de4:	4b13      	ldr	r3, [pc, #76]	; (8e34 <_tc_timer_get_period+0x60>)
    8de6:	4798      	blx	r3
    8de8:	4603      	mov	r3, r0
    8dea:	2b02      	cmp	r3, #2
    8dec:	d105      	bne.n	8dfa <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8dee:	2100      	movs	r1, #0
    8df0:	68f8      	ldr	r0, [r7, #12]
    8df2:	4b11      	ldr	r3, [pc, #68]	; (8e38 <_tc_timer_get_period+0x64>)
    8df4:	4798      	blx	r3
    8df6:	4603      	mov	r3, r0
    8df8:	e017      	b.n	8e2a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8dfa:	68f8      	ldr	r0, [r7, #12]
    8dfc:	4b0d      	ldr	r3, [pc, #52]	; (8e34 <_tc_timer_get_period+0x60>)
    8dfe:	4798      	blx	r3
    8e00:	4603      	mov	r3, r0
    8e02:	2b00      	cmp	r3, #0
    8e04:	d105      	bne.n	8e12 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8e06:	2100      	movs	r1, #0
    8e08:	68f8      	ldr	r0, [r7, #12]
    8e0a:	4b0c      	ldr	r3, [pc, #48]	; (8e3c <_tc_timer_get_period+0x68>)
    8e0c:	4798      	blx	r3
    8e0e:	4603      	mov	r3, r0
    8e10:	e00b      	b.n	8e2a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8e12:	68f8      	ldr	r0, [r7, #12]
    8e14:	4b07      	ldr	r3, [pc, #28]	; (8e34 <_tc_timer_get_period+0x60>)
    8e16:	4798      	blx	r3
    8e18:	4603      	mov	r3, r0
    8e1a:	2b01      	cmp	r3, #1
    8e1c:	d104      	bne.n	8e28 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8e1e:	68f8      	ldr	r0, [r7, #12]
    8e20:	4b07      	ldr	r3, [pc, #28]	; (8e40 <_tc_timer_get_period+0x6c>)
    8e22:	4798      	blx	r3
    8e24:	4603      	mov	r3, r0
    8e26:	e000      	b.n	8e2a <_tc_timer_get_period+0x56>
	}

	return 0;
    8e28:	2300      	movs	r3, #0
}
    8e2a:	4618      	mov	r0, r3
    8e2c:	3710      	adds	r7, #16
    8e2e:	46bd      	mov	sp, r7
    8e30:	bd80      	pop	{r7, pc}
    8e32:	bf00      	nop
    8e34:	000085b1 	.word	0x000085b1
    8e38:	00008799 	.word	0x00008799
    8e3c:	00008739 	.word	0x00008739
    8e40:	000086b1 	.word	0x000086b1

00008e44 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8e44:	b580      	push	{r7, lr}
    8e46:	b082      	sub	sp, #8
    8e48:	af00      	add	r7, sp, #0
    8e4a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8e4c:	687b      	ldr	r3, [r7, #4]
    8e4e:	68db      	ldr	r3, [r3, #12]
    8e50:	4618      	mov	r0, r3
    8e52:	4b03      	ldr	r3, [pc, #12]	; (8e60 <_tc_timer_is_started+0x1c>)
    8e54:	4798      	blx	r3
    8e56:	4603      	mov	r3, r0
}
    8e58:	4618      	mov	r0, r3
    8e5a:	3708      	adds	r7, #8
    8e5c:	46bd      	mov	sp, r7
    8e5e:	bd80      	pop	{r7, pc}
    8e60:	00008551 	.word	0x00008551

00008e64 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    8e64:	b580      	push	{r7, lr}
    8e66:	b082      	sub	sp, #8
    8e68:	af00      	add	r7, sp, #0
    8e6a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8e6c:	687b      	ldr	r3, [r7, #4]
    8e6e:	691b      	ldr	r3, [r3, #16]
    8e70:	4618      	mov	r0, r3
    8e72:	4b03      	ldr	r3, [pc, #12]	; (8e80 <_pwm_is_enabled+0x1c>)
    8e74:	4798      	blx	r3
    8e76:	4603      	mov	r3, r0
}
    8e78:	4618      	mov	r0, r3
    8e7a:	3708      	adds	r7, #8
    8e7c:	46bd      	mov	sp, r7
    8e7e:	bd80      	pop	{r7, pc}
    8e80:	00008551 	.word	0x00008551

00008e84 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8e84:	b480      	push	{r7}
    8e86:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8e88:	4b02      	ldr	r3, [pc, #8]	; (8e94 <_tc_get_timer+0x10>)
}
    8e8a:	4618      	mov	r0, r3
    8e8c:	46bd      	mov	sp, r7
    8e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e92:	4770      	bx	lr
    8e94:	20000158 	.word	0x20000158

00008e98 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8e98:	b480      	push	{r7}
    8e9a:	af00      	add	r7, sp, #0
	return NULL;
    8e9c:	2300      	movs	r3, #0
}
    8e9e:	4618      	mov	r0, r3
    8ea0:	46bd      	mov	sp, r7
    8ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ea6:	4770      	bx	lr

00008ea8 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8ea8:	b580      	push	{r7, lr}
    8eaa:	b084      	sub	sp, #16
    8eac:	af00      	add	r7, sp, #0
    8eae:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8eb0:	687b      	ldr	r3, [r7, #4]
    8eb2:	68db      	ldr	r3, [r3, #12]
    8eb4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8eb6:	68f8      	ldr	r0, [r7, #12]
    8eb8:	4b0e      	ldr	r3, [pc, #56]	; (8ef4 <_tc_timer_set_irq+0x4c>)
    8eba:	4798      	blx	r3
    8ebc:	4603      	mov	r3, r0
    8ebe:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8ec0:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8ec4:	490c      	ldr	r1, [pc, #48]	; (8ef8 <_tc_timer_set_irq+0x50>)
    8ec6:	2001      	movs	r0, #1
    8ec8:	4b0c      	ldr	r3, [pc, #48]	; (8efc <_tc_timer_set_irq+0x54>)
    8eca:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8ecc:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8ed0:	490b      	ldr	r1, [pc, #44]	; (8f00 <_tc_timer_set_irq+0x58>)
    8ed2:	4613      	mov	r3, r2
    8ed4:	009b      	lsls	r3, r3, #2
    8ed6:	4413      	add	r3, r2
    8ed8:	009b      	lsls	r3, r3, #2
    8eda:	440b      	add	r3, r1
    8edc:	3302      	adds	r3, #2
    8ede:	f9b3 3000 	ldrsh.w	r3, [r3]
    8ee2:	b2db      	uxtb	r3, r3
    8ee4:	4618      	mov	r0, r3
    8ee6:	4b07      	ldr	r3, [pc, #28]	; (8f04 <_tc_timer_set_irq+0x5c>)
    8ee8:	4798      	blx	r3
}
    8eea:	bf00      	nop
    8eec:	3710      	adds	r7, #16
    8eee:	46bd      	mov	sp, r7
    8ef0:	bd80      	pop	{r7, pc}
    8ef2:	bf00      	nop
    8ef4:	00009055 	.word	0x00009055
    8ef8:	0001014c 	.word	0x0001014c
    8efc:	00003e69 	.word	0x00003e69
    8f00:	200000e0 	.word	0x200000e0
    8f04:	000046b5 	.word	0x000046b5

00008f08 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8f08:	b580      	push	{r7, lr}
    8f0a:	b084      	sub	sp, #16
    8f0c:	af00      	add	r7, sp, #0
    8f0e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8f10:	687b      	ldr	r3, [r7, #4]
    8f12:	68db      	ldr	r3, [r3, #12]
    8f14:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8f16:	68f8      	ldr	r0, [r7, #12]
    8f18:	4b07      	ldr	r3, [pc, #28]	; (8f38 <tc_interrupt_handler+0x30>)
    8f1a:	4798      	blx	r3
    8f1c:	4603      	mov	r3, r0
    8f1e:	2b00      	cmp	r3, #0
    8f20:	d006      	beq.n	8f30 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8f22:	68f8      	ldr	r0, [r7, #12]
    8f24:	4b05      	ldr	r3, [pc, #20]	; (8f3c <tc_interrupt_handler+0x34>)
    8f26:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8f28:	687b      	ldr	r3, [r7, #4]
    8f2a:	681b      	ldr	r3, [r3, #0]
    8f2c:	6878      	ldr	r0, [r7, #4]
    8f2e:	4798      	blx	r3
	}
}
    8f30:	bf00      	nop
    8f32:	3710      	adds	r7, #16
    8f34:	46bd      	mov	sp, r7
    8f36:	bd80      	pop	{r7, pc}
    8f38:	00008461 	.word	0x00008461
    8f3c:	00008489 	.word	0x00008489

00008f40 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8f40:	b580      	push	{r7, lr}
    8f42:	b084      	sub	sp, #16
    8f44:	af00      	add	r7, sp, #0
    8f46:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	691b      	ldr	r3, [r3, #16]
    8f4c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8f4e:	68f8      	ldr	r0, [r7, #12]
    8f50:	4b12      	ldr	r3, [pc, #72]	; (8f9c <tc_pwm_interrupt_handler+0x5c>)
    8f52:	4798      	blx	r3
    8f54:	4603      	mov	r3, r0
    8f56:	2b00      	cmp	r3, #0
    8f58:	d00a      	beq.n	8f70 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8f5a:	68f8      	ldr	r0, [r7, #12]
    8f5c:	4b10      	ldr	r3, [pc, #64]	; (8fa0 <tc_pwm_interrupt_handler+0x60>)
    8f5e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8f60:	687b      	ldr	r3, [r7, #4]
    8f62:	681b      	ldr	r3, [r3, #0]
    8f64:	2b00      	cmp	r3, #0
    8f66:	d003      	beq.n	8f70 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8f68:	687b      	ldr	r3, [r7, #4]
    8f6a:	681b      	ldr	r3, [r3, #0]
    8f6c:	6878      	ldr	r0, [r7, #4]
    8f6e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8f70:	68f8      	ldr	r0, [r7, #12]
    8f72:	4b0c      	ldr	r3, [pc, #48]	; (8fa4 <tc_pwm_interrupt_handler+0x64>)
    8f74:	4798      	blx	r3
    8f76:	4603      	mov	r3, r0
    8f78:	2b00      	cmp	r3, #0
    8f7a:	d00a      	beq.n	8f92 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8f7c:	68f8      	ldr	r0, [r7, #12]
    8f7e:	4b0a      	ldr	r3, [pc, #40]	; (8fa8 <tc_pwm_interrupt_handler+0x68>)
    8f80:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8f82:	687b      	ldr	r3, [r7, #4]
    8f84:	685b      	ldr	r3, [r3, #4]
    8f86:	2b00      	cmp	r3, #0
    8f88:	d003      	beq.n	8f92 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8f8a:	687b      	ldr	r3, [r7, #4]
    8f8c:	685b      	ldr	r3, [r3, #4]
    8f8e:	6878      	ldr	r0, [r7, #4]
    8f90:	4798      	blx	r3
		}
	}
}
    8f92:	bf00      	nop
    8f94:	3710      	adds	r7, #16
    8f96:	46bd      	mov	sp, r7
    8f98:	bd80      	pop	{r7, pc}
    8f9a:	bf00      	nop
    8f9c:	00008461 	.word	0x00008461
    8fa0:	00008489 	.word	0x00008489
    8fa4:	000084d7 	.word	0x000084d7
    8fa8:	000084a3 	.word	0x000084a3

00008fac <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8fac:	b580      	push	{r7, lr}
    8fae:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8fb0:	4b03      	ldr	r3, [pc, #12]	; (8fc0 <TC0_Handler+0x14>)
    8fb2:	681b      	ldr	r3, [r3, #0]
    8fb4:	4618      	mov	r0, r3
    8fb6:	4b03      	ldr	r3, [pc, #12]	; (8fc4 <TC0_Handler+0x18>)
    8fb8:	4798      	blx	r3
}
    8fba:	bf00      	nop
    8fbc:	bd80      	pop	{r7, pc}
    8fbe:	bf00      	nop
    8fc0:	20000a94 	.word	0x20000a94
    8fc4:	00008f09 	.word	0x00008f09

00008fc8 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8fc8:	b580      	push	{r7, lr}
    8fca:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8fcc:	4b03      	ldr	r3, [pc, #12]	; (8fdc <TC2_Handler+0x14>)
    8fce:	681b      	ldr	r3, [r3, #0]
    8fd0:	4618      	mov	r0, r3
    8fd2:	4b03      	ldr	r3, [pc, #12]	; (8fe0 <TC2_Handler+0x18>)
    8fd4:	4798      	blx	r3
}
    8fd6:	bf00      	nop
    8fd8:	bd80      	pop	{r7, pc}
    8fda:	bf00      	nop
    8fdc:	20000a98 	.word	0x20000a98
    8fe0:	00008f09 	.word	0x00008f09

00008fe4 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8fe4:	b580      	push	{r7, lr}
    8fe6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8fe8:	4b03      	ldr	r3, [pc, #12]	; (8ff8 <TC4_Handler+0x14>)
    8fea:	681b      	ldr	r3, [r3, #0]
    8fec:	4618      	mov	r0, r3
    8fee:	4b03      	ldr	r3, [pc, #12]	; (8ffc <TC4_Handler+0x18>)
    8ff0:	4798      	blx	r3
}
    8ff2:	bf00      	nop
    8ff4:	bd80      	pop	{r7, pc}
    8ff6:	bf00      	nop
    8ff8:	20000a9c 	.word	0x20000a9c
    8ffc:	00008f09 	.word	0x00008f09

00009000 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    9000:	b580      	push	{r7, lr}
    9002:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    9004:	4b03      	ldr	r3, [pc, #12]	; (9014 <TC5_Handler+0x14>)
    9006:	681b      	ldr	r3, [r3, #0]
    9008:	4618      	mov	r0, r3
    900a:	4b03      	ldr	r3, [pc, #12]	; (9018 <TC5_Handler+0x18>)
    900c:	4798      	blx	r3
}
    900e:	bf00      	nop
    9010:	bd80      	pop	{r7, pc}
    9012:	bf00      	nop
    9014:	20000aa0 	.word	0x20000aa0
    9018:	00008f09 	.word	0x00008f09

0000901c <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    901c:	b580      	push	{r7, lr}
    901e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    9020:	4b03      	ldr	r3, [pc, #12]	; (9030 <TC6_Handler+0x14>)
    9022:	681b      	ldr	r3, [r3, #0]
    9024:	4618      	mov	r0, r3
    9026:	4b03      	ldr	r3, [pc, #12]	; (9034 <TC6_Handler+0x18>)
    9028:	4798      	blx	r3
}
    902a:	bf00      	nop
    902c:	bd80      	pop	{r7, pc}
    902e:	bf00      	nop
    9030:	20000aa4 	.word	0x20000aa4
    9034:	00008f09 	.word	0x00008f09

00009038 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    9038:	b580      	push	{r7, lr}
    903a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    903c:	4b03      	ldr	r3, [pc, #12]	; (904c <TC7_Handler+0x14>)
    903e:	681b      	ldr	r3, [r3, #0]
    9040:	4618      	mov	r0, r3
    9042:	4b03      	ldr	r3, [pc, #12]	; (9050 <TC7_Handler+0x18>)
    9044:	4798      	blx	r3
}
    9046:	bf00      	nop
    9048:	bd80      	pop	{r7, pc}
    904a:	bf00      	nop
    904c:	20000aa8 	.word	0x20000aa8
    9050:	00008f41 	.word	0x00008f41

00009054 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    9054:	b580      	push	{r7, lr}
    9056:	b084      	sub	sp, #16
    9058:	af00      	add	r7, sp, #0
    905a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    905c:	6878      	ldr	r0, [r7, #4]
    905e:	4b13      	ldr	r3, [pc, #76]	; (90ac <get_tc_index+0x58>)
    9060:	4798      	blx	r3
    9062:	4603      	mov	r3, r0
    9064:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9066:	2300      	movs	r3, #0
    9068:	73fb      	strb	r3, [r7, #15]
    906a:	e010      	b.n	908e <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    906c:	7bfa      	ldrb	r2, [r7, #15]
    906e:	4910      	ldr	r1, [pc, #64]	; (90b0 <get_tc_index+0x5c>)
    9070:	4613      	mov	r3, r2
    9072:	009b      	lsls	r3, r3, #2
    9074:	4413      	add	r3, r2
    9076:	009b      	lsls	r3, r3, #2
    9078:	440b      	add	r3, r1
    907a:	781b      	ldrb	r3, [r3, #0]
    907c:	7bba      	ldrb	r2, [r7, #14]
    907e:	429a      	cmp	r2, r3
    9080:	d102      	bne.n	9088 <get_tc_index+0x34>
			return i;
    9082:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9086:	e00d      	b.n	90a4 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    9088:	7bfb      	ldrb	r3, [r7, #15]
    908a:	3301      	adds	r3, #1
    908c:	73fb      	strb	r3, [r7, #15]
    908e:	7bfb      	ldrb	r3, [r7, #15]
    9090:	2b05      	cmp	r3, #5
    9092:	d9eb      	bls.n	906c <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    9094:	f240 221d 	movw	r2, #541	; 0x21d
    9098:	4906      	ldr	r1, [pc, #24]	; (90b4 <get_tc_index+0x60>)
    909a:	2000      	movs	r0, #0
    909c:	4b06      	ldr	r3, [pc, #24]	; (90b8 <get_tc_index+0x64>)
    909e:	4798      	blx	r3
	return -1;
    90a0:	f04f 33ff 	mov.w	r3, #4294967295
}
    90a4:	4618      	mov	r0, r3
    90a6:	3710      	adds	r7, #16
    90a8:	46bd      	mov	sp, r7
    90aa:	bd80      	pop	{r7, pc}
    90ac:	00009159 	.word	0x00009159
    90b0:	200000e0 	.word	0x200000e0
    90b4:	0001014c 	.word	0x0001014c
    90b8:	00003e69 	.word	0x00003e69

000090bc <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    90bc:	b480      	push	{r7}
    90be:	b083      	sub	sp, #12
    90c0:	af00      	add	r7, sp, #0
    90c2:	6078      	str	r0, [r7, #4]
    90c4:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    90c6:	687b      	ldr	r3, [r7, #4]
    90c8:	4a17      	ldr	r2, [pc, #92]	; (9128 <_tc_init_irq_param+0x6c>)
    90ca:	4293      	cmp	r3, r2
    90cc:	d102      	bne.n	90d4 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    90ce:	4a17      	ldr	r2, [pc, #92]	; (912c <_tc_init_irq_param+0x70>)
    90d0:	683b      	ldr	r3, [r7, #0]
    90d2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    90d4:	687b      	ldr	r3, [r7, #4]
    90d6:	4a16      	ldr	r2, [pc, #88]	; (9130 <_tc_init_irq_param+0x74>)
    90d8:	4293      	cmp	r3, r2
    90da:	d102      	bne.n	90e2 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    90dc:	4a15      	ldr	r2, [pc, #84]	; (9134 <_tc_init_irq_param+0x78>)
    90de:	683b      	ldr	r3, [r7, #0]
    90e0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    90e2:	687b      	ldr	r3, [r7, #4]
    90e4:	4a14      	ldr	r2, [pc, #80]	; (9138 <_tc_init_irq_param+0x7c>)
    90e6:	4293      	cmp	r3, r2
    90e8:	d102      	bne.n	90f0 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    90ea:	4a14      	ldr	r2, [pc, #80]	; (913c <_tc_init_irq_param+0x80>)
    90ec:	683b      	ldr	r3, [r7, #0]
    90ee:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    90f0:	687b      	ldr	r3, [r7, #4]
    90f2:	4a13      	ldr	r2, [pc, #76]	; (9140 <_tc_init_irq_param+0x84>)
    90f4:	4293      	cmp	r3, r2
    90f6:	d102      	bne.n	90fe <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    90f8:	4a12      	ldr	r2, [pc, #72]	; (9144 <_tc_init_irq_param+0x88>)
    90fa:	683b      	ldr	r3, [r7, #0]
    90fc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    90fe:	687b      	ldr	r3, [r7, #4]
    9100:	4a11      	ldr	r2, [pc, #68]	; (9148 <_tc_init_irq_param+0x8c>)
    9102:	4293      	cmp	r3, r2
    9104:	d102      	bne.n	910c <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    9106:	4a11      	ldr	r2, [pc, #68]	; (914c <_tc_init_irq_param+0x90>)
    9108:	683b      	ldr	r3, [r7, #0]
    910a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    910c:	687b      	ldr	r3, [r7, #4]
    910e:	4a10      	ldr	r2, [pc, #64]	; (9150 <_tc_init_irq_param+0x94>)
    9110:	4293      	cmp	r3, r2
    9112:	d102      	bne.n	911a <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    9114:	4a0f      	ldr	r2, [pc, #60]	; (9154 <_tc_init_irq_param+0x98>)
    9116:	683b      	ldr	r3, [r7, #0]
    9118:	6013      	str	r3, [r2, #0]
	}
}
    911a:	bf00      	nop
    911c:	370c      	adds	r7, #12
    911e:	46bd      	mov	sp, r7
    9120:	f85d 7b04 	ldr.w	r7, [sp], #4
    9124:	4770      	bx	lr
    9126:	bf00      	nop
    9128:	40003800 	.word	0x40003800
    912c:	20000a94 	.word	0x20000a94
    9130:	4101a000 	.word	0x4101a000
    9134:	20000a98 	.word	0x20000a98
    9138:	42001400 	.word	0x42001400
    913c:	20000a9c 	.word	0x20000a9c
    9140:	42001800 	.word	0x42001800
    9144:	20000aa0 	.word	0x20000aa0
    9148:	43001400 	.word	0x43001400
    914c:	20000aa4 	.word	0x20000aa4
    9150:	43001800 	.word	0x43001800
    9154:	20000aa8 	.word	0x20000aa8

00009158 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    9158:	b4b0      	push	{r4, r5, r7}
    915a:	b08d      	sub	sp, #52	; 0x34
    915c:	af00      	add	r7, sp, #0
    915e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    9160:	4b13      	ldr	r3, [pc, #76]	; (91b0 <_get_hardware_offset+0x58>)
    9162:	f107 040c 	add.w	r4, r7, #12
    9166:	461d      	mov	r5, r3
    9168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    916a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    916c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    9170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9174:	2300      	movs	r3, #0
    9176:	62fb      	str	r3, [r7, #44]	; 0x2c
    9178:	e010      	b.n	919c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    917c:	009b      	lsls	r3, r3, #2
    917e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    9182:	4413      	add	r3, r2
    9184:	f853 3c24 	ldr.w	r3, [r3, #-36]
    9188:	461a      	mov	r2, r3
    918a:	687b      	ldr	r3, [r7, #4]
    918c:	429a      	cmp	r2, r3
    918e:	d102      	bne.n	9196 <_get_hardware_offset+0x3e>
			return i;
    9190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9192:	b2db      	uxtb	r3, r3
    9194:	e006      	b.n	91a4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    9196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9198:	3301      	adds	r3, #1
    919a:	62fb      	str	r3, [r7, #44]	; 0x2c
    919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    919e:	2b07      	cmp	r3, #7
    91a0:	d9eb      	bls.n	917a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    91a2:	2300      	movs	r3, #0
}
    91a4:	4618      	mov	r0, r3
    91a6:	3734      	adds	r7, #52	; 0x34
    91a8:	46bd      	mov	sp, r7
    91aa:	bcb0      	pop	{r4, r5, r7}
    91ac:	4770      	bx	lr
    91ae:	bf00      	nop
    91b0:	00010160 	.word	0x00010160

000091b4 <__NVIC_EnableIRQ>:
{
    91b4:	b480      	push	{r7}
    91b6:	b083      	sub	sp, #12
    91b8:	af00      	add	r7, sp, #0
    91ba:	4603      	mov	r3, r0
    91bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    91be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    91c2:	2b00      	cmp	r3, #0
    91c4:	db0b      	blt.n	91de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    91c6:	4909      	ldr	r1, [pc, #36]	; (91ec <__NVIC_EnableIRQ+0x38>)
    91c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    91cc:	095b      	lsrs	r3, r3, #5
    91ce:	88fa      	ldrh	r2, [r7, #6]
    91d0:	f002 021f 	and.w	r2, r2, #31
    91d4:	2001      	movs	r0, #1
    91d6:	fa00 f202 	lsl.w	r2, r0, r2
    91da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    91de:	bf00      	nop
    91e0:	370c      	adds	r7, #12
    91e2:	46bd      	mov	sp, r7
    91e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    91e8:	4770      	bx	lr
    91ea:	bf00      	nop
    91ec:	e000e100 	.word	0xe000e100

000091f0 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    91f0:	b480      	push	{r7}
    91f2:	b087      	sub	sp, #28
    91f4:	af00      	add	r7, sp, #0
    91f6:	60f8      	str	r0, [r7, #12]
    91f8:	460b      	mov	r3, r1
    91fa:	607a      	str	r2, [r7, #4]
    91fc:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    91fe:	7afa      	ldrb	r2, [r7, #11]
    9200:	68f9      	ldr	r1, [r7, #12]
    9202:	4613      	mov	r3, r2
    9204:	009b      	lsls	r3, r3, #2
    9206:	4413      	add	r3, r2
    9208:	009b      	lsls	r3, r3, #2
    920a:	440b      	add	r3, r1
    920c:	3340      	adds	r3, #64	; 0x40
    920e:	681b      	ldr	r3, [r3, #0]
    9210:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    9212:	697a      	ldr	r2, [r7, #20]
    9214:	687b      	ldr	r3, [r7, #4]
    9216:	4013      	ands	r3, r2
    9218:	617b      	str	r3, [r7, #20]
	return tmp;
    921a:	697b      	ldr	r3, [r7, #20]
}
    921c:	4618      	mov	r0, r3
    921e:	371c      	adds	r7, #28
    9220:	46bd      	mov	sp, r7
    9222:	f85d 7b04 	ldr.w	r7, [sp], #4
    9226:	4770      	bx	lr

00009228 <hri_oscctrl_get_STATUS_reg>:
{
    9228:	b480      	push	{r7}
    922a:	b085      	sub	sp, #20
    922c:	af00      	add	r7, sp, #0
    922e:	6078      	str	r0, [r7, #4]
    9230:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9232:	687b      	ldr	r3, [r7, #4]
    9234:	691b      	ldr	r3, [r3, #16]
    9236:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9238:	68fa      	ldr	r2, [r7, #12]
    923a:	683b      	ldr	r3, [r7, #0]
    923c:	4013      	ands	r3, r2
    923e:	60fb      	str	r3, [r7, #12]
	return tmp;
    9240:	68fb      	ldr	r3, [r7, #12]
}
    9242:	4618      	mov	r0, r3
    9244:	3714      	adds	r7, #20
    9246:	46bd      	mov	sp, r7
    9248:	f85d 7b04 	ldr.w	r7, [sp], #4
    924c:	4770      	bx	lr

0000924e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    924e:	b480      	push	{r7}
    9250:	b085      	sub	sp, #20
    9252:	af00      	add	r7, sp, #0
    9254:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    9256:	687b      	ldr	r3, [r7, #4]
    9258:	f893 3020 	ldrb.w	r3, [r3, #32]
    925c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    925e:	7bfb      	ldrb	r3, [r7, #15]
    9260:	f003 0301 	and.w	r3, r3, #1
    9264:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9266:	7bfb      	ldrb	r3, [r7, #15]
    9268:	2b00      	cmp	r3, #0
    926a:	bf14      	ite	ne
    926c:	2301      	movne	r3, #1
    926e:	2300      	moveq	r3, #0
    9270:	b2db      	uxtb	r3, r3
}
    9272:	4618      	mov	r0, r3
    9274:	3714      	adds	r7, #20
    9276:	46bd      	mov	sp, r7
    9278:	f85d 7b04 	ldr.w	r7, [sp], #4
    927c:	4770      	bx	lr

0000927e <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    927e:	b480      	push	{r7}
    9280:	b083      	sub	sp, #12
    9282:	af00      	add	r7, sp, #0
    9284:	6078      	str	r0, [r7, #4]
    9286:	460b      	mov	r3, r1
    9288:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    928a:	bf00      	nop
    928c:	687b      	ldr	r3, [r7, #4]
    928e:	789b      	ldrb	r3, [r3, #2]
    9290:	b2da      	uxtb	r2, r3
    9292:	78fb      	ldrb	r3, [r7, #3]
    9294:	4013      	ands	r3, r2
    9296:	b2db      	uxtb	r3, r3
    9298:	2b00      	cmp	r3, #0
    929a:	d1f7      	bne.n	928c <hri_usb_wait_for_sync+0xe>
	};
}
    929c:	bf00      	nop
    929e:	370c      	adds	r7, #12
    92a0:	46bd      	mov	sp, r7
    92a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    92a6:	4770      	bx	lr

000092a8 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    92a8:	b480      	push	{r7}
    92aa:	b083      	sub	sp, #12
    92ac:	af00      	add	r7, sp, #0
    92ae:	6078      	str	r0, [r7, #4]
    92b0:	460b      	mov	r3, r1
    92b2:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    92b4:	687b      	ldr	r3, [r7, #4]
    92b6:	789b      	ldrb	r3, [r3, #2]
    92b8:	b2da      	uxtb	r2, r3
    92ba:	78fb      	ldrb	r3, [r7, #3]
    92bc:	4013      	ands	r3, r2
    92be:	b2db      	uxtb	r3, r3
    92c0:	2b00      	cmp	r3, #0
    92c2:	bf14      	ite	ne
    92c4:	2301      	movne	r3, #1
    92c6:	2300      	moveq	r3, #0
    92c8:	b2db      	uxtb	r3, r3
}
    92ca:	4618      	mov	r0, r3
    92cc:	370c      	adds	r7, #12
    92ce:	46bd      	mov	sp, r7
    92d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    92d4:	4770      	bx	lr

000092d6 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    92d6:	b480      	push	{r7}
    92d8:	b085      	sub	sp, #20
    92da:	af00      	add	r7, sp, #0
    92dc:	6078      	str	r0, [r7, #4]
    92de:	460b      	mov	r3, r1
    92e0:	70fb      	strb	r3, [r7, #3]
    92e2:	4613      	mov	r3, r2
    92e4:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    92e6:	78fb      	ldrb	r3, [r7, #3]
    92e8:	687a      	ldr	r2, [r7, #4]
    92ea:	3308      	adds	r3, #8
    92ec:	015b      	lsls	r3, r3, #5
    92ee:	4413      	add	r3, r2
    92f0:	3307      	adds	r3, #7
    92f2:	781b      	ldrb	r3, [r3, #0]
    92f4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    92f6:	7bfa      	ldrb	r2, [r7, #15]
    92f8:	78bb      	ldrb	r3, [r7, #2]
    92fa:	4013      	ands	r3, r2
    92fc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    92fe:	7bfb      	ldrb	r3, [r7, #15]
}
    9300:	4618      	mov	r0, r3
    9302:	3714      	adds	r7, #20
    9304:	46bd      	mov	sp, r7
    9306:	f85d 7b04 	ldr.w	r7, [sp], #4
    930a:	4770      	bx	lr

0000930c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    930c:	b480      	push	{r7}
    930e:	b083      	sub	sp, #12
    9310:	af00      	add	r7, sp, #0
    9312:	6078      	str	r0, [r7, #4]
    9314:	460b      	mov	r3, r1
    9316:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9318:	78fb      	ldrb	r3, [r7, #3]
    931a:	687a      	ldr	r2, [r7, #4]
    931c:	3308      	adds	r3, #8
    931e:	015b      	lsls	r3, r3, #5
    9320:	4413      	add	r3, r2
    9322:	3307      	adds	r3, #7
    9324:	781b      	ldrb	r3, [r3, #0]
    9326:	b2db      	uxtb	r3, r3
}
    9328:	4618      	mov	r0, r3
    932a:	370c      	adds	r7, #12
    932c:	46bd      	mov	sp, r7
    932e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9332:	4770      	bx	lr

00009334 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    9334:	b480      	push	{r7}
    9336:	b083      	sub	sp, #12
    9338:	af00      	add	r7, sp, #0
    933a:	6078      	str	r0, [r7, #4]
    933c:	460b      	mov	r3, r1
    933e:	70fb      	strb	r3, [r7, #3]
    9340:	4613      	mov	r3, r2
    9342:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    9344:	78fb      	ldrb	r3, [r7, #3]
    9346:	687a      	ldr	r2, [r7, #4]
    9348:	3308      	adds	r3, #8
    934a:	015b      	lsls	r3, r3, #5
    934c:	4413      	add	r3, r2
    934e:	3307      	adds	r3, #7
    9350:	78ba      	ldrb	r2, [r7, #2]
    9352:	701a      	strb	r2, [r3, #0]
}
    9354:	bf00      	nop
    9356:	370c      	adds	r7, #12
    9358:	46bd      	mov	sp, r7
    935a:	f85d 7b04 	ldr.w	r7, [sp], #4
    935e:	4770      	bx	lr

00009360 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    9360:	b480      	push	{r7}
    9362:	b083      	sub	sp, #12
    9364:	af00      	add	r7, sp, #0
    9366:	6078      	str	r0, [r7, #4]
    9368:	460b      	mov	r3, r1
    936a:	70fb      	strb	r3, [r7, #3]
    936c:	4613      	mov	r3, r2
    936e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9370:	78fb      	ldrb	r3, [r7, #3]
    9372:	687a      	ldr	r2, [r7, #4]
    9374:	3308      	adds	r3, #8
    9376:	015b      	lsls	r3, r3, #5
    9378:	4413      	add	r3, r2
    937a:	3305      	adds	r3, #5
    937c:	78ba      	ldrb	r2, [r7, #2]
    937e:	701a      	strb	r2, [r3, #0]
}
    9380:	bf00      	nop
    9382:	370c      	adds	r7, #12
    9384:	46bd      	mov	sp, r7
    9386:	f85d 7b04 	ldr.w	r7, [sp], #4
    938a:	4770      	bx	lr

0000938c <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    938c:	b480      	push	{r7}
    938e:	b083      	sub	sp, #12
    9390:	af00      	add	r7, sp, #0
    9392:	6078      	str	r0, [r7, #4]
    9394:	460b      	mov	r3, r1
    9396:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    9398:	78fb      	ldrb	r3, [r7, #3]
    939a:	687a      	ldr	r2, [r7, #4]
    939c:	3308      	adds	r3, #8
    939e:	015b      	lsls	r3, r3, #5
    93a0:	4413      	add	r3, r2
    93a2:	3306      	adds	r3, #6
    93a4:	781b      	ldrb	r3, [r3, #0]
    93a6:	b2db      	uxtb	r3, r3
}
    93a8:	4618      	mov	r0, r3
    93aa:	370c      	adds	r7, #12
    93ac:	46bd      	mov	sp, r7
    93ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    93b2:	4770      	bx	lr

000093b4 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    93b4:	b480      	push	{r7}
    93b6:	b083      	sub	sp, #12
    93b8:	af00      	add	r7, sp, #0
    93ba:	6078      	str	r0, [r7, #4]
    93bc:	460b      	mov	r3, r1
    93be:	70fb      	strb	r3, [r7, #3]
    93c0:	4613      	mov	r3, r2
    93c2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    93c4:	78fb      	ldrb	r3, [r7, #3]
    93c6:	687a      	ldr	r2, [r7, #4]
    93c8:	3308      	adds	r3, #8
    93ca:	015b      	lsls	r3, r3, #5
    93cc:	4413      	add	r3, r2
    93ce:	3304      	adds	r3, #4
    93d0:	78ba      	ldrb	r2, [r7, #2]
    93d2:	701a      	strb	r2, [r3, #0]
}
    93d4:	bf00      	nop
    93d6:	370c      	adds	r7, #12
    93d8:	46bd      	mov	sp, r7
    93da:	f85d 7b04 	ldr.w	r7, [sp], #4
    93de:	4770      	bx	lr

000093e0 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    93e0:	b480      	push	{r7}
    93e2:	b083      	sub	sp, #12
    93e4:	af00      	add	r7, sp, #0
    93e6:	6078      	str	r0, [r7, #4]
    93e8:	460b      	mov	r3, r1
    93ea:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    93ec:	78fb      	ldrb	r3, [r7, #3]
    93ee:	687a      	ldr	r2, [r7, #4]
    93f0:	015b      	lsls	r3, r3, #5
    93f2:	4413      	add	r3, r2
    93f4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    93f8:	2210      	movs	r2, #16
    93fa:	701a      	strb	r2, [r3, #0]
}
    93fc:	bf00      	nop
    93fe:	370c      	adds	r7, #12
    9400:	46bd      	mov	sp, r7
    9402:	f85d 7b04 	ldr.w	r7, [sp], #4
    9406:	4770      	bx	lr

00009408 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    9408:	b480      	push	{r7}
    940a:	b083      	sub	sp, #12
    940c:	af00      	add	r7, sp, #0
    940e:	6078      	str	r0, [r7, #4]
    9410:	460b      	mov	r3, r1
    9412:	70fb      	strb	r3, [r7, #3]
    9414:	4613      	mov	r3, r2
    9416:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9418:	78fb      	ldrb	r3, [r7, #3]
    941a:	687a      	ldr	r2, [r7, #4]
    941c:	015b      	lsls	r3, r3, #5
    941e:	4413      	add	r3, r2
    9420:	f203 1309 	addw	r3, r3, #265	; 0x109
    9424:	78ba      	ldrb	r2, [r7, #2]
    9426:	701a      	strb	r2, [r3, #0]
}
    9428:	bf00      	nop
    942a:	370c      	adds	r7, #12
    942c:	46bd      	mov	sp, r7
    942e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9432:	4770      	bx	lr

00009434 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    9434:	b480      	push	{r7}
    9436:	b083      	sub	sp, #12
    9438:	af00      	add	r7, sp, #0
    943a:	6078      	str	r0, [r7, #4]
    943c:	460b      	mov	r3, r1
    943e:	70fb      	strb	r3, [r7, #3]
    9440:	4613      	mov	r3, r2
    9442:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    9444:	78fb      	ldrb	r3, [r7, #3]
    9446:	687a      	ldr	r2, [r7, #4]
    9448:	015b      	lsls	r3, r3, #5
    944a:	4413      	add	r3, r2
    944c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9450:	78ba      	ldrb	r2, [r7, #2]
    9452:	701a      	strb	r2, [r3, #0]
}
    9454:	bf00      	nop
    9456:	370c      	adds	r7, #12
    9458:	46bd      	mov	sp, r7
    945a:	f85d 7b04 	ldr.w	r7, [sp], #4
    945e:	4770      	bx	lr

00009460 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9460:	b480      	push	{r7}
    9462:	b085      	sub	sp, #20
    9464:	af00      	add	r7, sp, #0
    9466:	6078      	str	r0, [r7, #4]
    9468:	460b      	mov	r3, r1
    946a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    946c:	78fb      	ldrb	r3, [r7, #3]
    946e:	687a      	ldr	r2, [r7, #4]
    9470:	3308      	adds	r3, #8
    9472:	015b      	lsls	r3, r3, #5
    9474:	4413      	add	r3, r2
    9476:	781b      	ldrb	r3, [r3, #0]
    9478:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    947a:	7bfb      	ldrb	r3, [r7, #15]
    947c:	f003 0307 	and.w	r3, r3, #7
    9480:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9482:	7bfb      	ldrb	r3, [r7, #15]
}
    9484:	4618      	mov	r0, r3
    9486:	3714      	adds	r7, #20
    9488:	46bd      	mov	sp, r7
    948a:	f85d 7b04 	ldr.w	r7, [sp], #4
    948e:	4770      	bx	lr

00009490 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9490:	b480      	push	{r7}
    9492:	b085      	sub	sp, #20
    9494:	af00      	add	r7, sp, #0
    9496:	6078      	str	r0, [r7, #4]
    9498:	460b      	mov	r3, r1
    949a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    949c:	78fb      	ldrb	r3, [r7, #3]
    949e:	687a      	ldr	r2, [r7, #4]
    94a0:	3308      	adds	r3, #8
    94a2:	015b      	lsls	r3, r3, #5
    94a4:	4413      	add	r3, r2
    94a6:	781b      	ldrb	r3, [r3, #0]
    94a8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    94aa:	7bfb      	ldrb	r3, [r7, #15]
    94ac:	091b      	lsrs	r3, r3, #4
    94ae:	b2db      	uxtb	r3, r3
    94b0:	f003 0307 	and.w	r3, r3, #7
    94b4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    94b6:	7bfb      	ldrb	r3, [r7, #15]
}
    94b8:	4618      	mov	r0, r3
    94ba:	3714      	adds	r7, #20
    94bc:	46bd      	mov	sp, r7
    94be:	f85d 7b04 	ldr.w	r7, [sp], #4
    94c2:	4770      	bx	lr

000094c4 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    94c4:	b480      	push	{r7}
    94c6:	b083      	sub	sp, #12
    94c8:	af00      	add	r7, sp, #0
    94ca:	6078      	str	r0, [r7, #4]
    94cc:	460b      	mov	r3, r1
    94ce:	70fb      	strb	r3, [r7, #3]
    94d0:	4613      	mov	r3, r2
    94d2:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    94d4:	78fb      	ldrb	r3, [r7, #3]
    94d6:	687a      	ldr	r2, [r7, #4]
    94d8:	3308      	adds	r3, #8
    94da:	015b      	lsls	r3, r3, #5
    94dc:	4413      	add	r3, r2
    94de:	78ba      	ldrb	r2, [r7, #2]
    94e0:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    94e2:	bf00      	nop
    94e4:	370c      	adds	r7, #12
    94e6:	46bd      	mov	sp, r7
    94e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    94ec:	4770      	bx	lr

000094ee <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    94ee:	b480      	push	{r7}
    94f0:	b083      	sub	sp, #12
    94f2:	af00      	add	r7, sp, #0
    94f4:	6078      	str	r0, [r7, #4]
    94f6:	460b      	mov	r3, r1
    94f8:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    94fa:	78fb      	ldrb	r3, [r7, #3]
    94fc:	687a      	ldr	r2, [r7, #4]
    94fe:	3308      	adds	r3, #8
    9500:	015b      	lsls	r3, r3, #5
    9502:	4413      	add	r3, r2
    9504:	781b      	ldrb	r3, [r3, #0]
    9506:	b2db      	uxtb	r3, r3
}
    9508:	4618      	mov	r0, r3
    950a:	370c      	adds	r7, #12
    950c:	46bd      	mov	sp, r7
    950e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9512:	4770      	bx	lr

00009514 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    9514:	b480      	push	{r7}
    9516:	b083      	sub	sp, #12
    9518:	af00      	add	r7, sp, #0
    951a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    951c:	687b      	ldr	r3, [r7, #4]
    951e:	8b9b      	ldrh	r3, [r3, #28]
    9520:	b29b      	uxth	r3, r3
}
    9522:	4618      	mov	r0, r3
    9524:	370c      	adds	r7, #12
    9526:	46bd      	mov	sp, r7
    9528:	f85d 7b04 	ldr.w	r7, [sp], #4
    952c:	4770      	bx	lr

0000952e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    952e:	b480      	push	{r7}
    9530:	b083      	sub	sp, #12
    9532:	af00      	add	r7, sp, #0
    9534:	6078      	str	r0, [r7, #4]
    9536:	460b      	mov	r3, r1
    9538:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    953a:	687b      	ldr	r3, [r7, #4]
    953c:	887a      	ldrh	r2, [r7, #2]
    953e:	839a      	strh	r2, [r3, #28]
}
    9540:	bf00      	nop
    9542:	370c      	adds	r7, #12
    9544:	46bd      	mov	sp, r7
    9546:	f85d 7b04 	ldr.w	r7, [sp], #4
    954a:	4770      	bx	lr

0000954c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    954c:	b480      	push	{r7}
    954e:	b083      	sub	sp, #12
    9550:	af00      	add	r7, sp, #0
    9552:	6078      	str	r0, [r7, #4]
    9554:	460b      	mov	r3, r1
    9556:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9558:	687b      	ldr	r3, [r7, #4]
    955a:	887a      	ldrh	r2, [r7, #2]
    955c:	831a      	strh	r2, [r3, #24]
}
    955e:	bf00      	nop
    9560:	370c      	adds	r7, #12
    9562:	46bd      	mov	sp, r7
    9564:	f85d 7b04 	ldr.w	r7, [sp], #4
    9568:	4770      	bx	lr

0000956a <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    956a:	b480      	push	{r7}
    956c:	b083      	sub	sp, #12
    956e:	af00      	add	r7, sp, #0
    9570:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    9572:	687b      	ldr	r3, [r7, #4]
    9574:	8b1b      	ldrh	r3, [r3, #24]
    9576:	b29b      	uxth	r3, r3
}
    9578:	4618      	mov	r0, r3
    957a:	370c      	adds	r7, #12
    957c:	46bd      	mov	sp, r7
    957e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9582:	4770      	bx	lr

00009584 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9584:	b480      	push	{r7}
    9586:	b083      	sub	sp, #12
    9588:	af00      	add	r7, sp, #0
    958a:	6078      	str	r0, [r7, #4]
    958c:	460b      	mov	r3, r1
    958e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9590:	687b      	ldr	r3, [r7, #4]
    9592:	887a      	ldrh	r2, [r7, #2]
    9594:	829a      	strh	r2, [r3, #20]
}
    9596:	bf00      	nop
    9598:	370c      	adds	r7, #12
    959a:	46bd      	mov	sp, r7
    959c:	f85d 7b04 	ldr.w	r7, [sp], #4
    95a0:	4770      	bx	lr

000095a2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    95a2:	b480      	push	{r7}
    95a4:	b085      	sub	sp, #20
    95a6:	af00      	add	r7, sp, #0
    95a8:	6078      	str	r0, [r7, #4]
    95aa:	460b      	mov	r3, r1
    95ac:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	789b      	ldrb	r3, [r3, #2]
    95b2:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    95b4:	7bfa      	ldrb	r2, [r7, #15]
    95b6:	78fb      	ldrb	r3, [r7, #3]
    95b8:	4013      	ands	r3, r2
    95ba:	73fb      	strb	r3, [r7, #15]
	return tmp;
    95bc:	7bfb      	ldrb	r3, [r7, #15]
}
    95be:	4618      	mov	r0, r3
    95c0:	3714      	adds	r7, #20
    95c2:	46bd      	mov	sp, r7
    95c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    95c8:	4770      	bx	lr
	...

000095cc <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    95cc:	b580      	push	{r7, lr}
    95ce:	b082      	sub	sp, #8
    95d0:	af00      	add	r7, sp, #0
    95d2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    95d4:	687b      	ldr	r3, [r7, #4]
    95d6:	781b      	ldrb	r3, [r3, #0]
    95d8:	b2db      	uxtb	r3, r3
    95da:	f023 0302 	bic.w	r3, r3, #2
    95de:	b2da      	uxtb	r2, r3
    95e0:	687b      	ldr	r3, [r7, #4]
    95e2:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    95e4:	2103      	movs	r1, #3
    95e6:	6878      	ldr	r0, [r7, #4]
    95e8:	4b02      	ldr	r3, [pc, #8]	; (95f4 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    95ea:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    95ec:	bf00      	nop
    95ee:	3708      	adds	r7, #8
    95f0:	46bd      	mov	sp, r7
    95f2:	bd80      	pop	{r7, pc}
    95f4:	0000927f 	.word	0x0000927f

000095f8 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    95f8:	b580      	push	{r7, lr}
    95fa:	b084      	sub	sp, #16
    95fc:	af00      	add	r7, sp, #0
    95fe:	6078      	str	r0, [r7, #4]
    9600:	460b      	mov	r3, r1
    9602:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9604:	2103      	movs	r1, #3
    9606:	6878      	ldr	r0, [r7, #4]
    9608:	4b06      	ldr	r3, [pc, #24]	; (9624 <hri_usb_get_CTRLA_reg+0x2c>)
    960a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    960c:	687b      	ldr	r3, [r7, #4]
    960e:	781b      	ldrb	r3, [r3, #0]
    9610:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9612:	7bfa      	ldrb	r2, [r7, #15]
    9614:	78fb      	ldrb	r3, [r7, #3]
    9616:	4013      	ands	r3, r2
    9618:	73fb      	strb	r3, [r7, #15]
	return tmp;
    961a:	7bfb      	ldrb	r3, [r7, #15]
}
    961c:	4618      	mov	r0, r3
    961e:	3710      	adds	r7, #16
    9620:	46bd      	mov	sp, r7
    9622:	bd80      	pop	{r7, pc}
    9624:	0000927f 	.word	0x0000927f

00009628 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    9628:	b580      	push	{r7, lr}
    962a:	b082      	sub	sp, #8
    962c:	af00      	add	r7, sp, #0
    962e:	6078      	str	r0, [r7, #4]
    9630:	460b      	mov	r3, r1
    9632:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    9634:	687b      	ldr	r3, [r7, #4]
    9636:	78fa      	ldrb	r2, [r7, #3]
    9638:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    963a:	2103      	movs	r1, #3
    963c:	6878      	ldr	r0, [r7, #4]
    963e:	4b03      	ldr	r3, [pc, #12]	; (964c <hri_usb_write_CTRLA_reg+0x24>)
    9640:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    9642:	bf00      	nop
    9644:	3708      	adds	r7, #8
    9646:	46bd      	mov	sp, r7
    9648:	bd80      	pop	{r7, pc}
    964a:	bf00      	nop
    964c:	0000927f 	.word	0x0000927f

00009650 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    9650:	b580      	push	{r7, lr}
    9652:	b082      	sub	sp, #8
    9654:	af00      	add	r7, sp, #0
    9656:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9658:	2103      	movs	r1, #3
    965a:	6878      	ldr	r0, [r7, #4]
    965c:	4b04      	ldr	r3, [pc, #16]	; (9670 <hri_usb_read_CTRLA_reg+0x20>)
    965e:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    9660:	687b      	ldr	r3, [r7, #4]
    9662:	781b      	ldrb	r3, [r3, #0]
    9664:	b2db      	uxtb	r3, r3
}
    9666:	4618      	mov	r0, r3
    9668:	3708      	adds	r7, #8
    966a:	46bd      	mov	sp, r7
    966c:	bd80      	pop	{r7, pc}
    966e:	bf00      	nop
    9670:	0000927f 	.word	0x0000927f

00009674 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    9674:	b480      	push	{r7}
    9676:	b083      	sub	sp, #12
    9678:	af00      	add	r7, sp, #0
    967a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    967c:	687b      	ldr	r3, [r7, #4]
    967e:	891b      	ldrh	r3, [r3, #8]
    9680:	b29b      	uxth	r3, r3
    9682:	f023 0301 	bic.w	r3, r3, #1
    9686:	b29a      	uxth	r2, r3
    9688:	687b      	ldr	r3, [r7, #4]
    968a:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    968c:	bf00      	nop
    968e:	370c      	adds	r7, #12
    9690:	46bd      	mov	sp, r7
    9692:	f85d 7b04 	ldr.w	r7, [sp], #4
    9696:	4770      	bx	lr

00009698 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    9698:	b480      	push	{r7}
    969a:	b083      	sub	sp, #12
    969c:	af00      	add	r7, sp, #0
    969e:	6078      	str	r0, [r7, #4]
    96a0:	460b      	mov	r3, r1
    96a2:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    96a4:	687b      	ldr	r3, [r7, #4]
    96a6:	887a      	ldrh	r2, [r7, #2]
    96a8:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    96aa:	bf00      	nop
    96ac:	370c      	adds	r7, #12
    96ae:	46bd      	mov	sp, r7
    96b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    96b4:	4770      	bx	lr

000096b6 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    96b6:	b480      	push	{r7}
    96b8:	b083      	sub	sp, #12
    96ba:	af00      	add	r7, sp, #0
    96bc:	6078      	str	r0, [r7, #4]
    96be:	460b      	mov	r3, r1
    96c0:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    96c2:	687b      	ldr	r3, [r7, #4]
    96c4:	78fa      	ldrb	r2, [r7, #3]
    96c6:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    96c8:	bf00      	nop
    96ca:	370c      	adds	r7, #12
    96cc:	46bd      	mov	sp, r7
    96ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    96d2:	4770      	bx	lr

000096d4 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    96d4:	b480      	push	{r7}
    96d6:	b083      	sub	sp, #12
    96d8:	af00      	add	r7, sp, #0
    96da:	6078      	str	r0, [r7, #4]
    96dc:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    96de:	687b      	ldr	r3, [r7, #4]
    96e0:	683a      	ldr	r2, [r7, #0]
    96e2:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    96e4:	bf00      	nop
    96e6:	370c      	adds	r7, #12
    96e8:	46bd      	mov	sp, r7
    96ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    96ee:	4770      	bx	lr

000096f0 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    96f0:	b480      	push	{r7}
    96f2:	b083      	sub	sp, #12
    96f4:	af00      	add	r7, sp, #0
    96f6:	6078      	str	r0, [r7, #4]
    96f8:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    96fa:	2300      	movs	r3, #0
}
    96fc:	4618      	mov	r0, r3
    96fe:	370c      	adds	r7, #12
    9700:	46bd      	mov	sp, r7
    9702:	f85d 7b04 	ldr.w	r7, [sp], #4
    9706:	4770      	bx	lr

00009708 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9708:	b480      	push	{r7}
    970a:	b085      	sub	sp, #20
    970c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    970e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9712:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    9714:	4b28      	ldr	r3, [pc, #160]	; (97b8 <_usb_load_calib+0xb0>)
    9716:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9718:	f003 031f 	and.w	r3, r3, #31
    971c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    971e:	4b26      	ldr	r3, [pc, #152]	; (97b8 <_usb_load_calib+0xb0>)
    9720:	681b      	ldr	r3, [r3, #0]
    9722:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    9724:	f003 031f 	and.w	r3, r3, #31
    9728:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    972a:	4b23      	ldr	r3, [pc, #140]	; (97b8 <_usb_load_calib+0xb0>)
    972c:	681b      	ldr	r3, [r3, #0]
    972e:	0a9b      	lsrs	r3, r3, #10
    9730:	f003 0307 	and.w	r3, r3, #7
    9734:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    9736:	68fb      	ldr	r3, [r7, #12]
    9738:	2b00      	cmp	r3, #0
    973a:	d002      	beq.n	9742 <_usb_load_calib+0x3a>
    973c:	68fb      	ldr	r3, [r7, #12]
    973e:	2b1f      	cmp	r3, #31
    9740:	d101      	bne.n	9746 <_usb_load_calib+0x3e>
		pad_transn = 9;
    9742:	2309      	movs	r3, #9
    9744:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    9746:	68bb      	ldr	r3, [r7, #8]
    9748:	2b00      	cmp	r3, #0
    974a:	d002      	beq.n	9752 <_usb_load_calib+0x4a>
    974c:	68bb      	ldr	r3, [r7, #8]
    974e:	2b1f      	cmp	r3, #31
    9750:	d101      	bne.n	9756 <_usb_load_calib+0x4e>
		pad_transp = 25;
    9752:	2319      	movs	r3, #25
    9754:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    9756:	687b      	ldr	r3, [r7, #4]
    9758:	2b00      	cmp	r3, #0
    975a:	d002      	beq.n	9762 <_usb_load_calib+0x5a>
    975c:	687b      	ldr	r3, [r7, #4]
    975e:	2b07      	cmp	r3, #7
    9760:	d101      	bne.n	9766 <_usb_load_calib+0x5e>
		pad_trim = 6;
    9762:	2306      	movs	r3, #6
    9764:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    9766:	68fb      	ldr	r3, [r7, #12]
    9768:	b29b      	uxth	r3, r3
    976a:	019b      	lsls	r3, r3, #6
    976c:	b29b      	uxth	r3, r3
    976e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    9772:	b29a      	uxth	r2, r3
    9774:	68bb      	ldr	r3, [r7, #8]
    9776:	b29b      	uxth	r3, r3
    9778:	f003 031f 	and.w	r3, r3, #31
    977c:	b29b      	uxth	r3, r3
    977e:	4313      	orrs	r3, r2
    9780:	b29a      	uxth	r2, r3
    9782:	687b      	ldr	r3, [r7, #4]
    9784:	b29b      	uxth	r3, r3
    9786:	031b      	lsls	r3, r3, #12
    9788:	b29b      	uxth	r3, r3
    978a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    978e:	b29b      	uxth	r3, r3
    9790:	4313      	orrs	r3, r2
    9792:	b29a      	uxth	r2, r3
    9794:	683b      	ldr	r3, [r7, #0]
    9796:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    9798:	683a      	ldr	r2, [r7, #0]
    979a:	78d3      	ldrb	r3, [r2, #3]
    979c:	f043 0303 	orr.w	r3, r3, #3
    97a0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    97a2:	683a      	ldr	r2, [r7, #0]
    97a4:	78d3      	ldrb	r3, [r2, #3]
    97a6:	f043 030c 	orr.w	r3, r3, #12
    97aa:	70d3      	strb	r3, [r2, #3]
}
    97ac:	bf00      	nop
    97ae:	3714      	adds	r7, #20
    97b0:	46bd      	mov	sp, r7
    97b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    97b6:	4770      	bx	lr
    97b8:	00800084 	.word	0x00800084

000097bc <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    97bc:	b580      	push	{r7, lr}
    97be:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    97c0:	bf00      	nop
    97c2:	2203      	movs	r2, #3
    97c4:	2100      	movs	r1, #0
    97c6:	4804      	ldr	r0, [pc, #16]	; (97d8 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    97c8:	4b04      	ldr	r3, [pc, #16]	; (97dc <_usb_d_dev_wait_dpll_rdy+0x20>)
    97ca:	4798      	blx	r3
    97cc:	4603      	mov	r3, r0
    97ce:	2b03      	cmp	r3, #3
    97d0:	d1f7      	bne.n	97c2 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    97d2:	bf00      	nop
    97d4:	bd80      	pop	{r7, pc}
    97d6:	bf00      	nop
    97d8:	40001000 	.word	0x40001000
    97dc:	000091f1 	.word	0x000091f1

000097e0 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    97e0:	b580      	push	{r7, lr}
    97e2:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    97e4:	480e      	ldr	r0, [pc, #56]	; (9820 <_usb_d_dev_wait_dfll_rdy+0x40>)
    97e6:	4b0f      	ldr	r3, [pc, #60]	; (9824 <_usb_d_dev_wait_dfll_rdy+0x44>)
    97e8:	4798      	blx	r3
    97ea:	4603      	mov	r3, r0
    97ec:	2b00      	cmp	r3, #0
    97ee:	d00a      	beq.n	9806 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    97f0:	bf00      	nop
    97f2:	f44f 6110 	mov.w	r1, #2304	; 0x900
    97f6:	480a      	ldr	r0, [pc, #40]	; (9820 <_usb_d_dev_wait_dfll_rdy+0x40>)
    97f8:	4b0b      	ldr	r3, [pc, #44]	; (9828 <_usb_d_dev_wait_dfll_rdy+0x48>)
    97fa:	4798      	blx	r3
    97fc:	4603      	mov	r3, r0
    97fe:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    9802:	d1f6      	bne.n	97f2 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    9804:	e009      	b.n	981a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    9806:	bf00      	nop
    9808:	f44f 7180 	mov.w	r1, #256	; 0x100
    980c:	4804      	ldr	r0, [pc, #16]	; (9820 <_usb_d_dev_wait_dfll_rdy+0x40>)
    980e:	4b06      	ldr	r3, [pc, #24]	; (9828 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9810:	4798      	blx	r3
    9812:	4603      	mov	r3, r0
    9814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9818:	d1f6      	bne.n	9808 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    981a:	bf00      	nop
    981c:	bd80      	pop	{r7, pc}
    981e:	bf00      	nop
    9820:	40001000 	.word	0x40001000
    9824:	0000924f 	.word	0x0000924f
    9828:	00009229 	.word	0x00009229

0000982c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    982c:	b580      	push	{r7, lr}
    982e:	b082      	sub	sp, #8
    9830:	af00      	add	r7, sp, #0
    9832:	4603      	mov	r3, r0
    9834:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    9836:	79fb      	ldrb	r3, [r7, #7]
    9838:	2b00      	cmp	r3, #0
    983a:	d102      	bne.n	9842 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    983c:	4b05      	ldr	r3, [pc, #20]	; (9854 <_usb_d_dev_wait_clk_rdy+0x28>)
    983e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    9840:	e004      	b.n	984c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    9842:	79fb      	ldrb	r3, [r7, #7]
    9844:	2b01      	cmp	r3, #1
    9846:	d101      	bne.n	984c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9848:	4b03      	ldr	r3, [pc, #12]	; (9858 <_usb_d_dev_wait_clk_rdy+0x2c>)
    984a:	4798      	blx	r3
}
    984c:	bf00      	nop
    984e:	3708      	adds	r7, #8
    9850:	46bd      	mov	sp, r7
    9852:	bd80      	pop	{r7, pc}
    9854:	000097e1 	.word	0x000097e1
    9858:	000097bd 	.word	0x000097bd

0000985c <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    985c:	b580      	push	{r7, lr}
    985e:	b082      	sub	sp, #8
    9860:	af00      	add	r7, sp, #0
    9862:	4603      	mov	r3, r0
    9864:	6039      	str	r1, [r7, #0]
    9866:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    9868:	683b      	ldr	r3, [r7, #0]
    986a:	b2da      	uxtb	r2, r3
    986c:	79fb      	ldrb	r3, [r7, #7]
    986e:	4619      	mov	r1, r3
    9870:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9874:	4b02      	ldr	r3, [pc, #8]	; (9880 <_usbd_ep_int_ack+0x24>)
    9876:	4798      	blx	r3
}
    9878:	bf00      	nop
    987a:	3708      	adds	r7, #8
    987c:	46bd      	mov	sp, r7
    987e:	bd80      	pop	{r7, pc}
    9880:	00009335 	.word	0x00009335

00009884 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    9884:	b580      	push	{r7, lr}
    9886:	b082      	sub	sp, #8
    9888:	af00      	add	r7, sp, #0
    988a:	4603      	mov	r3, r0
    988c:	6039      	str	r1, [r7, #0]
    988e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9890:	683b      	ldr	r3, [r7, #0]
    9892:	b2da      	uxtb	r2, r3
    9894:	79fb      	ldrb	r3, [r7, #7]
    9896:	4619      	mov	r1, r3
    9898:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    989c:	4b02      	ldr	r3, [pc, #8]	; (98a8 <_usbd_ep_int_en+0x24>)
    989e:	4798      	blx	r3
}
    98a0:	bf00      	nop
    98a2:	3708      	adds	r7, #8
    98a4:	46bd      	mov	sp, r7
    98a6:	bd80      	pop	{r7, pc}
    98a8:	00009409 	.word	0x00009409

000098ac <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    98ac:	b580      	push	{r7, lr}
    98ae:	b082      	sub	sp, #8
    98b0:	af00      	add	r7, sp, #0
    98b2:	4603      	mov	r3, r0
    98b4:	6039      	str	r1, [r7, #0]
    98b6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    98b8:	683b      	ldr	r3, [r7, #0]
    98ba:	b2da      	uxtb	r2, r3
    98bc:	79fb      	ldrb	r3, [r7, #7]
    98be:	4619      	mov	r1, r3
    98c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98c4:	4b02      	ldr	r3, [pc, #8]	; (98d0 <_usbd_ep_int_dis+0x24>)
    98c6:	4798      	blx	r3
}
    98c8:	bf00      	nop
    98ca:	3708      	adds	r7, #8
    98cc:	46bd      	mov	sp, r7
    98ce:	bd80      	pop	{r7, pc}
    98d0:	00009435 	.word	0x00009435

000098d4 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    98d4:	b580      	push	{r7, lr}
    98d6:	b082      	sub	sp, #8
    98d8:	af00      	add	r7, sp, #0
    98da:	4603      	mov	r3, r0
    98dc:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    98de:	79fb      	ldrb	r3, [r7, #7]
    98e0:	4619      	mov	r1, r3
    98e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98e6:	4b06      	ldr	r3, [pc, #24]	; (9900 <_usbd_ep_is_ctrl+0x2c>)
    98e8:	4798      	blx	r3
    98ea:	4603      	mov	r3, r0
    98ec:	2b11      	cmp	r3, #17
    98ee:	bf0c      	ite	eq
    98f0:	2301      	moveq	r3, #1
    98f2:	2300      	movne	r3, #0
    98f4:	b2db      	uxtb	r3, r3
}
    98f6:	4618      	mov	r0, r3
    98f8:	3708      	adds	r7, #8
    98fa:	46bd      	mov	sp, r7
    98fc:	bd80      	pop	{r7, pc}
    98fe:	bf00      	nop
    9900:	000094ef 	.word	0x000094ef

00009904 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    9904:	b580      	push	{r7, lr}
    9906:	b082      	sub	sp, #8
    9908:	af00      	add	r7, sp, #0
    990a:	4603      	mov	r3, r0
    990c:	71fb      	strb	r3, [r7, #7]
    990e:	460b      	mov	r3, r1
    9910:	71bb      	strb	r3, [r7, #6]
    9912:	4613      	mov	r3, r2
    9914:	717b      	strb	r3, [r7, #5]
	if (st) {
    9916:	797b      	ldrb	r3, [r7, #5]
    9918:	2b00      	cmp	r3, #0
    991a:	d00b      	beq.n	9934 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    991c:	79bb      	ldrb	r3, [r7, #6]
    991e:	2210      	movs	r2, #16
    9920:	fa02 f303 	lsl.w	r3, r2, r3
    9924:	b2da      	uxtb	r2, r3
    9926:	79fb      	ldrb	r3, [r7, #7]
    9928:	4619      	mov	r1, r3
    992a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    992e:	4b09      	ldr	r3, [pc, #36]	; (9954 <_usbd_ep_set_stall+0x50>)
    9930:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    9932:	e00a      	b.n	994a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9934:	79bb      	ldrb	r3, [r7, #6]
    9936:	2210      	movs	r2, #16
    9938:	fa02 f303 	lsl.w	r3, r2, r3
    993c:	b2da      	uxtb	r2, r3
    993e:	79fb      	ldrb	r3, [r7, #7]
    9940:	4619      	mov	r1, r3
    9942:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9946:	4b04      	ldr	r3, [pc, #16]	; (9958 <_usbd_ep_set_stall+0x54>)
    9948:	4798      	blx	r3
}
    994a:	bf00      	nop
    994c:	3708      	adds	r7, #8
    994e:	46bd      	mov	sp, r7
    9950:	bd80      	pop	{r7, pc}
    9952:	bf00      	nop
    9954:	00009361 	.word	0x00009361
    9958:	000093b5 	.word	0x000093b5

0000995c <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    995c:	b580      	push	{r7, lr}
    995e:	b084      	sub	sp, #16
    9960:	af00      	add	r7, sp, #0
    9962:	4603      	mov	r3, r0
    9964:	460a      	mov	r2, r1
    9966:	71fb      	strb	r3, [r7, #7]
    9968:	4613      	mov	r3, r2
    996a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    996c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9970:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9972:	79fb      	ldrb	r3, [r7, #7]
    9974:	4619      	mov	r1, r3
    9976:	68f8      	ldr	r0, [r7, #12]
    9978:	4b08      	ldr	r3, [pc, #32]	; (999c <_usbd_ep_is_stalled+0x40>)
    997a:	4798      	blx	r3
    997c:	4603      	mov	r3, r0
    997e:	4619      	mov	r1, r3
    9980:	79bb      	ldrb	r3, [r7, #6]
    9982:	2210      	movs	r2, #16
    9984:	fa02 f303 	lsl.w	r3, r2, r3
    9988:	400b      	ands	r3, r1
    998a:	2b00      	cmp	r3, #0
    998c:	bf14      	ite	ne
    998e:	2301      	movne	r3, #1
    9990:	2300      	moveq	r3, #0
    9992:	b2db      	uxtb	r3, r3
}
    9994:	4618      	mov	r0, r3
    9996:	3710      	adds	r7, #16
    9998:	46bd      	mov	sp, r7
    999a:	bd80      	pop	{r7, pc}
    999c:	0000938d 	.word	0x0000938d

000099a0 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    99a0:	b580      	push	{r7, lr}
    99a2:	b084      	sub	sp, #16
    99a4:	af00      	add	r7, sp, #0
    99a6:	4603      	mov	r3, r0
    99a8:	460a      	mov	r2, r1
    99aa:	71fb      	strb	r3, [r7, #7]
    99ac:	4613      	mov	r3, r2
    99ae:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    99b0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    99b4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    99b6:	79fb      	ldrb	r3, [r7, #7]
    99b8:	4619      	mov	r1, r3
    99ba:	68f8      	ldr	r0, [r7, #12]
    99bc:	4b08      	ldr	r3, [pc, #32]	; (99e0 <_usbd_ep_is_stall_sent+0x40>)
    99be:	4798      	blx	r3
    99c0:	4603      	mov	r3, r0
    99c2:	4619      	mov	r1, r3
    99c4:	79bb      	ldrb	r3, [r7, #6]
    99c6:	2220      	movs	r2, #32
    99c8:	fa02 f303 	lsl.w	r3, r2, r3
    99cc:	400b      	ands	r3, r1
    99ce:	2b00      	cmp	r3, #0
    99d0:	bf14      	ite	ne
    99d2:	2301      	movne	r3, #1
    99d4:	2300      	moveq	r3, #0
    99d6:	b2db      	uxtb	r3, r3
}
    99d8:	4618      	mov	r0, r3
    99da:	3710      	adds	r7, #16
    99dc:	46bd      	mov	sp, r7
    99de:	bd80      	pop	{r7, pc}
    99e0:	0000930d 	.word	0x0000930d

000099e4 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    99e4:	b580      	push	{r7, lr}
    99e6:	b082      	sub	sp, #8
    99e8:	af00      	add	r7, sp, #0
    99ea:	4603      	mov	r3, r0
    99ec:	460a      	mov	r2, r1
    99ee:	71fb      	strb	r3, [r7, #7]
    99f0:	4613      	mov	r3, r2
    99f2:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    99f4:	79bb      	ldrb	r3, [r7, #6]
    99f6:	2220      	movs	r2, #32
    99f8:	409a      	lsls	r2, r3
    99fa:	79fb      	ldrb	r3, [r7, #7]
    99fc:	4611      	mov	r1, r2
    99fe:	4618      	mov	r0, r3
    9a00:	4b02      	ldr	r3, [pc, #8]	; (9a0c <_usbd_ep_ack_stall+0x28>)
    9a02:	4798      	blx	r3
}
    9a04:	bf00      	nop
    9a06:	3708      	adds	r7, #8
    9a08:	46bd      	mov	sp, r7
    9a0a:	bd80      	pop	{r7, pc}
    9a0c:	0000985d 	.word	0x0000985d

00009a10 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9a10:	b580      	push	{r7, lr}
    9a12:	b082      	sub	sp, #8
    9a14:	af00      	add	r7, sp, #0
    9a16:	4603      	mov	r3, r0
    9a18:	71fb      	strb	r3, [r7, #7]
    9a1a:	460b      	mov	r3, r1
    9a1c:	71bb      	strb	r3, [r7, #6]
    9a1e:	4613      	mov	r3, r2
    9a20:	717b      	strb	r3, [r7, #5]
	if (en) {
    9a22:	797b      	ldrb	r3, [r7, #5]
    9a24:	2b00      	cmp	r3, #0
    9a26:	d008      	beq.n	9a3a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9a28:	79bb      	ldrb	r3, [r7, #6]
    9a2a:	2220      	movs	r2, #32
    9a2c:	409a      	lsls	r2, r3
    9a2e:	79fb      	ldrb	r3, [r7, #7]
    9a30:	4611      	mov	r1, r2
    9a32:	4618      	mov	r0, r3
    9a34:	4b07      	ldr	r3, [pc, #28]	; (9a54 <_usbd_ep_int_stall_en+0x44>)
    9a36:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9a38:	e007      	b.n	9a4a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9a3a:	79bb      	ldrb	r3, [r7, #6]
    9a3c:	2220      	movs	r2, #32
    9a3e:	409a      	lsls	r2, r3
    9a40:	79fb      	ldrb	r3, [r7, #7]
    9a42:	4611      	mov	r1, r2
    9a44:	4618      	mov	r0, r3
    9a46:	4b04      	ldr	r3, [pc, #16]	; (9a58 <_usbd_ep_int_stall_en+0x48>)
    9a48:	4798      	blx	r3
}
    9a4a:	bf00      	nop
    9a4c:	3708      	adds	r7, #8
    9a4e:	46bd      	mov	sp, r7
    9a50:	bd80      	pop	{r7, pc}
    9a52:	bf00      	nop
    9a54:	00009885 	.word	0x00009885
    9a58:	000098ad 	.word	0x000098ad

00009a5c <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9a5c:	b580      	push	{r7, lr}
    9a5e:	b082      	sub	sp, #8
    9a60:	af00      	add	r7, sp, #0
    9a62:	4603      	mov	r3, r0
    9a64:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    9a66:	79fb      	ldrb	r3, [r7, #7]
    9a68:	4619      	mov	r1, r3
    9a6a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a6e:	4b03      	ldr	r3, [pc, #12]	; (9a7c <_usbd_ep_stop_setup+0x20>)
    9a70:	4798      	blx	r3
}
    9a72:	bf00      	nop
    9a74:	3708      	adds	r7, #8
    9a76:	46bd      	mov	sp, r7
    9a78:	bd80      	pop	{r7, pc}
    9a7a:	bf00      	nop
    9a7c:	000093e1 	.word	0x000093e1

00009a80 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9a80:	b580      	push	{r7, lr}
    9a82:	b082      	sub	sp, #8
    9a84:	af00      	add	r7, sp, #0
    9a86:	4603      	mov	r3, r0
    9a88:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9a8a:	79fb      	ldrb	r3, [r7, #7]
    9a8c:	2210      	movs	r2, #16
    9a8e:	4619      	mov	r1, r3
    9a90:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a94:	4b05      	ldr	r3, [pc, #20]	; (9aac <_usbd_ep_is_setup+0x2c>)
    9a96:	4798      	blx	r3
    9a98:	4603      	mov	r3, r0
    9a9a:	2b00      	cmp	r3, #0
    9a9c:	bf14      	ite	ne
    9a9e:	2301      	movne	r3, #1
    9aa0:	2300      	moveq	r3, #0
    9aa2:	b2db      	uxtb	r3, r3
}
    9aa4:	4618      	mov	r0, r3
    9aa6:	3708      	adds	r7, #8
    9aa8:	46bd      	mov	sp, r7
    9aaa:	bd80      	pop	{r7, pc}
    9aac:	000092d7 	.word	0x000092d7

00009ab0 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    9ab0:	b580      	push	{r7, lr}
    9ab2:	b082      	sub	sp, #8
    9ab4:	af00      	add	r7, sp, #0
    9ab6:	4603      	mov	r3, r0
    9ab8:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9aba:	79fb      	ldrb	r3, [r7, #7]
    9abc:	2110      	movs	r1, #16
    9abe:	4618      	mov	r0, r3
    9ac0:	4b02      	ldr	r3, [pc, #8]	; (9acc <_usbd_ep_ack_setup+0x1c>)
    9ac2:	4798      	blx	r3
}
    9ac4:	bf00      	nop
    9ac6:	3708      	adds	r7, #8
    9ac8:	46bd      	mov	sp, r7
    9aca:	bd80      	pop	{r7, pc}
    9acc:	0000985d 	.word	0x0000985d

00009ad0 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9ad0:	b580      	push	{r7, lr}
    9ad2:	b082      	sub	sp, #8
    9ad4:	af00      	add	r7, sp, #0
    9ad6:	4603      	mov	r3, r0
    9ad8:	71fb      	strb	r3, [r7, #7]
    9ada:	460b      	mov	r3, r1
    9adc:	71bb      	strb	r3, [r7, #6]
    9ade:	4613      	mov	r3, r2
    9ae0:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    9ae2:	797b      	ldrb	r3, [r7, #5]
    9ae4:	2b00      	cmp	r3, #0
    9ae6:	d00b      	beq.n	9b00 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9ae8:	79bb      	ldrb	r3, [r7, #6]
    9aea:	2201      	movs	r2, #1
    9aec:	fa02 f303 	lsl.w	r3, r2, r3
    9af0:	b2da      	uxtb	r2, r3
    9af2:	79fb      	ldrb	r3, [r7, #7]
    9af4:	4619      	mov	r1, r3
    9af6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9afa:	4b09      	ldr	r3, [pc, #36]	; (9b20 <_usbd_ep_set_toggle+0x50>)
    9afc:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    9afe:	e00a      	b.n	9b16 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9b00:	79bb      	ldrb	r3, [r7, #6]
    9b02:	2201      	movs	r2, #1
    9b04:	fa02 f303 	lsl.w	r3, r2, r3
    9b08:	b2da      	uxtb	r2, r3
    9b0a:	79fb      	ldrb	r3, [r7, #7]
    9b0c:	4619      	mov	r1, r3
    9b0e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b12:	4b04      	ldr	r3, [pc, #16]	; (9b24 <_usbd_ep_set_toggle+0x54>)
    9b14:	4798      	blx	r3
}
    9b16:	bf00      	nop
    9b18:	3708      	adds	r7, #8
    9b1a:	46bd      	mov	sp, r7
    9b1c:	bd80      	pop	{r7, pc}
    9b1e:	bf00      	nop
    9b20:	00009361 	.word	0x00009361
    9b24:	000093b5 	.word	0x000093b5

00009b28 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9b28:	b580      	push	{r7, lr}
    9b2a:	b082      	sub	sp, #8
    9b2c:	af00      	add	r7, sp, #0
    9b2e:	4603      	mov	r3, r0
    9b30:	460a      	mov	r2, r1
    9b32:	71fb      	strb	r3, [r7, #7]
    9b34:	4613      	mov	r3, r2
    9b36:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9b38:	79bb      	ldrb	r3, [r7, #6]
    9b3a:	2201      	movs	r2, #1
    9b3c:	409a      	lsls	r2, r3
    9b3e:	79fb      	ldrb	r3, [r7, #7]
    9b40:	4611      	mov	r1, r2
    9b42:	4618      	mov	r0, r3
    9b44:	4b02      	ldr	r3, [pc, #8]	; (9b50 <_usbd_ep_ack_io_cpt+0x28>)
    9b46:	4798      	blx	r3
}
    9b48:	bf00      	nop
    9b4a:	3708      	adds	r7, #8
    9b4c:	46bd      	mov	sp, r7
    9b4e:	bd80      	pop	{r7, pc}
    9b50:	0000985d 	.word	0x0000985d

00009b54 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9b54:	b480      	push	{r7}
    9b56:	b085      	sub	sp, #20
    9b58:	af00      	add	r7, sp, #0
    9b5a:	4603      	mov	r3, r0
    9b5c:	603a      	str	r2, [r7, #0]
    9b5e:	71fb      	strb	r3, [r7, #7]
    9b60:	460b      	mov	r3, r1
    9b62:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9b64:	79fa      	ldrb	r2, [r7, #7]
    9b66:	79bb      	ldrb	r3, [r7, #6]
    9b68:	0052      	lsls	r2, r2, #1
    9b6a:	4413      	add	r3, r2
    9b6c:	011b      	lsls	r3, r3, #4
    9b6e:	4a06      	ldr	r2, [pc, #24]	; (9b88 <_usbd_ep_set_buf+0x34>)
    9b70:	4413      	add	r3, r2
    9b72:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    9b74:	68fb      	ldr	r3, [r7, #12]
    9b76:	683a      	ldr	r2, [r7, #0]
    9b78:	601a      	str	r2, [r3, #0]
}
    9b7a:	bf00      	nop
    9b7c:	3714      	adds	r7, #20
    9b7e:	46bd      	mov	sp, r7
    9b80:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b84:	4770      	bx	lr
    9b86:	bf00      	nop
    9b88:	20000db4 	.word	0x20000db4

00009b8c <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9b8c:	b480      	push	{r7}
    9b8e:	b085      	sub	sp, #20
    9b90:	af00      	add	r7, sp, #0
    9b92:	4603      	mov	r3, r0
    9b94:	71fb      	strb	r3, [r7, #7]
    9b96:	460b      	mov	r3, r1
    9b98:	71bb      	strb	r3, [r7, #6]
    9b9a:	4613      	mov	r3, r2
    9b9c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9b9e:	79fa      	ldrb	r2, [r7, #7]
    9ba0:	79bb      	ldrb	r3, [r7, #6]
    9ba2:	0052      	lsls	r2, r2, #1
    9ba4:	4413      	add	r3, r2
    9ba6:	011b      	lsls	r3, r3, #4
    9ba8:	4a08      	ldr	r2, [pc, #32]	; (9bcc <_usbd_ep_set_in_count+0x40>)
    9baa:	4413      	add	r3, r2
    9bac:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9bae:	88bb      	ldrh	r3, [r7, #4]
    9bb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9bb4:	b299      	uxth	r1, r3
    9bb6:	68fa      	ldr	r2, [r7, #12]
    9bb8:	6853      	ldr	r3, [r2, #4]
    9bba:	f361 339b 	bfi	r3, r1, #14, #14
    9bbe:	6053      	str	r3, [r2, #4]
}
    9bc0:	bf00      	nop
    9bc2:	3714      	adds	r7, #20
    9bc4:	46bd      	mov	sp, r7
    9bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bca:	4770      	bx	lr
    9bcc:	20000db4 	.word	0x20000db4

00009bd0 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9bd0:	b480      	push	{r7}
    9bd2:	b085      	sub	sp, #20
    9bd4:	af00      	add	r7, sp, #0
    9bd6:	4603      	mov	r3, r0
    9bd8:	71fb      	strb	r3, [r7, #7]
    9bda:	460b      	mov	r3, r1
    9bdc:	71bb      	strb	r3, [r7, #6]
    9bde:	4613      	mov	r3, r2
    9be0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9be2:	79fa      	ldrb	r2, [r7, #7]
    9be4:	79bb      	ldrb	r3, [r7, #6]
    9be6:	0052      	lsls	r2, r2, #1
    9be8:	4413      	add	r3, r2
    9bea:	011b      	lsls	r3, r3, #4
    9bec:	4a08      	ldr	r2, [pc, #32]	; (9c10 <_usbd_ep_set_in_size+0x40>)
    9bee:	4413      	add	r3, r2
    9bf0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9bf2:	88bb      	ldrh	r3, [r7, #4]
    9bf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9bf8:	b299      	uxth	r1, r3
    9bfa:	68fa      	ldr	r2, [r7, #12]
    9bfc:	6853      	ldr	r3, [r2, #4]
    9bfe:	f361 030d 	bfi	r3, r1, #0, #14
    9c02:	6053      	str	r3, [r2, #4]
}
    9c04:	bf00      	nop
    9c06:	3714      	adds	r7, #20
    9c08:	46bd      	mov	sp, r7
    9c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c0e:	4770      	bx	lr
    9c10:	20000db4 	.word	0x20000db4

00009c14 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9c14:	b480      	push	{r7}
    9c16:	b085      	sub	sp, #20
    9c18:	af00      	add	r7, sp, #0
    9c1a:	4603      	mov	r3, r0
    9c1c:	71fb      	strb	r3, [r7, #7]
    9c1e:	460b      	mov	r3, r1
    9c20:	71bb      	strb	r3, [r7, #6]
    9c22:	4613      	mov	r3, r2
    9c24:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9c26:	79fa      	ldrb	r2, [r7, #7]
    9c28:	79bb      	ldrb	r3, [r7, #6]
    9c2a:	0052      	lsls	r2, r2, #1
    9c2c:	4413      	add	r3, r2
    9c2e:	011b      	lsls	r3, r3, #4
    9c30:	4a08      	ldr	r2, [pc, #32]	; (9c54 <_usbd_ep_set_out_count+0x40>)
    9c32:	4413      	add	r3, r2
    9c34:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9c36:	88bb      	ldrh	r3, [r7, #4]
    9c38:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9c3c:	b299      	uxth	r1, r3
    9c3e:	68fa      	ldr	r2, [r7, #12]
    9c40:	6853      	ldr	r3, [r2, #4]
    9c42:	f361 030d 	bfi	r3, r1, #0, #14
    9c46:	6053      	str	r3, [r2, #4]
}
    9c48:	bf00      	nop
    9c4a:	3714      	adds	r7, #20
    9c4c:	46bd      	mov	sp, r7
    9c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c52:	4770      	bx	lr
    9c54:	20000db4 	.word	0x20000db4

00009c58 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9c58:	b480      	push	{r7}
    9c5a:	b085      	sub	sp, #20
    9c5c:	af00      	add	r7, sp, #0
    9c5e:	4603      	mov	r3, r0
    9c60:	71fb      	strb	r3, [r7, #7]
    9c62:	460b      	mov	r3, r1
    9c64:	71bb      	strb	r3, [r7, #6]
    9c66:	4613      	mov	r3, r2
    9c68:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9c6a:	79fa      	ldrb	r2, [r7, #7]
    9c6c:	79bb      	ldrb	r3, [r7, #6]
    9c6e:	0052      	lsls	r2, r2, #1
    9c70:	4413      	add	r3, r2
    9c72:	011b      	lsls	r3, r3, #4
    9c74:	4a08      	ldr	r2, [pc, #32]	; (9c98 <_usbd_ep_set_out_size+0x40>)
    9c76:	4413      	add	r3, r2
    9c78:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9c7a:	88bb      	ldrh	r3, [r7, #4]
    9c7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9c80:	b299      	uxth	r1, r3
    9c82:	68fa      	ldr	r2, [r7, #12]
    9c84:	6853      	ldr	r3, [r2, #4]
    9c86:	f361 339b 	bfi	r3, r1, #14, #14
    9c8a:	6053      	str	r3, [r2, #4]
}
    9c8c:	bf00      	nop
    9c8e:	3714      	adds	r7, #20
    9c90:	46bd      	mov	sp, r7
    9c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c96:	4770      	bx	lr
    9c98:	20000db4 	.word	0x20000db4

00009c9c <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9c9c:	b580      	push	{r7, lr}
    9c9e:	b084      	sub	sp, #16
    9ca0:	af00      	add	r7, sp, #0
    9ca2:	60ba      	str	r2, [r7, #8]
    9ca4:	607b      	str	r3, [r7, #4]
    9ca6:	4603      	mov	r3, r0
    9ca8:	73fb      	strb	r3, [r7, #15]
    9caa:	460b      	mov	r3, r1
    9cac:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9cae:	68bb      	ldr	r3, [r7, #8]
    9cb0:	b29a      	uxth	r2, r3
    9cb2:	7bb9      	ldrb	r1, [r7, #14]
    9cb4:	7bfb      	ldrb	r3, [r7, #15]
    9cb6:	4618      	mov	r0, r3
    9cb8:	4b06      	ldr	r3, [pc, #24]	; (9cd4 <_usbd_ep_set_in_trans+0x38>)
    9cba:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9cbc:	687b      	ldr	r3, [r7, #4]
    9cbe:	b29a      	uxth	r2, r3
    9cc0:	7bb9      	ldrb	r1, [r7, #14]
    9cc2:	7bfb      	ldrb	r3, [r7, #15]
    9cc4:	4618      	mov	r0, r3
    9cc6:	4b04      	ldr	r3, [pc, #16]	; (9cd8 <_usbd_ep_set_in_trans+0x3c>)
    9cc8:	4798      	blx	r3
}
    9cca:	bf00      	nop
    9ccc:	3710      	adds	r7, #16
    9cce:	46bd      	mov	sp, r7
    9cd0:	bd80      	pop	{r7, pc}
    9cd2:	bf00      	nop
    9cd4:	00009bd1 	.word	0x00009bd1
    9cd8:	00009b8d 	.word	0x00009b8d

00009cdc <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9cdc:	b580      	push	{r7, lr}
    9cde:	b084      	sub	sp, #16
    9ce0:	af00      	add	r7, sp, #0
    9ce2:	60ba      	str	r2, [r7, #8]
    9ce4:	607b      	str	r3, [r7, #4]
    9ce6:	4603      	mov	r3, r0
    9ce8:	73fb      	strb	r3, [r7, #15]
    9cea:	460b      	mov	r3, r1
    9cec:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9cee:	68bb      	ldr	r3, [r7, #8]
    9cf0:	b29a      	uxth	r2, r3
    9cf2:	7bb9      	ldrb	r1, [r7, #14]
    9cf4:	7bfb      	ldrb	r3, [r7, #15]
    9cf6:	4618      	mov	r0, r3
    9cf8:	4b06      	ldr	r3, [pc, #24]	; (9d14 <_usbd_ep_set_out_trans+0x38>)
    9cfa:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9cfc:	687b      	ldr	r3, [r7, #4]
    9cfe:	b29a      	uxth	r2, r3
    9d00:	7bb9      	ldrb	r1, [r7, #14]
    9d02:	7bfb      	ldrb	r3, [r7, #15]
    9d04:	4618      	mov	r0, r3
    9d06:	4b04      	ldr	r3, [pc, #16]	; (9d18 <_usbd_ep_set_out_trans+0x3c>)
    9d08:	4798      	blx	r3
}
    9d0a:	bf00      	nop
    9d0c:	3710      	adds	r7, #16
    9d0e:	46bd      	mov	sp, r7
    9d10:	bd80      	pop	{r7, pc}
    9d12:	bf00      	nop
    9d14:	00009c59 	.word	0x00009c59
    9d18:	00009c15 	.word	0x00009c15

00009d1c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9d1c:	b480      	push	{r7}
    9d1e:	b085      	sub	sp, #20
    9d20:	af00      	add	r7, sp, #0
    9d22:	4603      	mov	r3, r0
    9d24:	460a      	mov	r2, r1
    9d26:	71fb      	strb	r3, [r7, #7]
    9d28:	4613      	mov	r3, r2
    9d2a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9d2c:	79fa      	ldrb	r2, [r7, #7]
    9d2e:	79bb      	ldrb	r3, [r7, #6]
    9d30:	0052      	lsls	r2, r2, #1
    9d32:	4413      	add	r3, r2
    9d34:	011b      	lsls	r3, r3, #4
    9d36:	4a06      	ldr	r2, [pc, #24]	; (9d50 <_usbd_ep_clear_bank_status+0x34>)
    9d38:	4413      	add	r3, r2
    9d3a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9d3c:	68fb      	ldr	r3, [r7, #12]
    9d3e:	2200      	movs	r2, #0
    9d40:	729a      	strb	r2, [r3, #10]
}
    9d42:	bf00      	nop
    9d44:	3714      	adds	r7, #20
    9d46:	46bd      	mov	sp, r7
    9d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d4c:	4770      	bx	lr
    9d4e:	bf00      	nop
    9d50:	20000db4 	.word	0x20000db4

00009d54 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9d54:	b580      	push	{r7, lr}
    9d56:	b082      	sub	sp, #8
    9d58:	af00      	add	r7, sp, #0
    9d5a:	4603      	mov	r3, r0
    9d5c:	71fb      	strb	r3, [r7, #7]
    9d5e:	460b      	mov	r3, r1
    9d60:	71bb      	strb	r3, [r7, #6]
    9d62:	4613      	mov	r3, r2
    9d64:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9d66:	797b      	ldrb	r3, [r7, #5]
    9d68:	2b00      	cmp	r3, #0
    9d6a:	d00b      	beq.n	9d84 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9d6c:	79bb      	ldrb	r3, [r7, #6]
    9d6e:	2240      	movs	r2, #64	; 0x40
    9d70:	fa02 f303 	lsl.w	r3, r2, r3
    9d74:	b2da      	uxtb	r2, r3
    9d76:	79fb      	ldrb	r3, [r7, #7]
    9d78:	4619      	mov	r1, r3
    9d7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d7e:	4b09      	ldr	r3, [pc, #36]	; (9da4 <_usbd_ep_set_in_rdy+0x50>)
    9d80:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9d82:	e00a      	b.n	9d9a <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9d84:	79bb      	ldrb	r3, [r7, #6]
    9d86:	2240      	movs	r2, #64	; 0x40
    9d88:	fa02 f303 	lsl.w	r3, r2, r3
    9d8c:	b2da      	uxtb	r2, r3
    9d8e:	79fb      	ldrb	r3, [r7, #7]
    9d90:	4619      	mov	r1, r3
    9d92:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d96:	4b04      	ldr	r3, [pc, #16]	; (9da8 <_usbd_ep_set_in_rdy+0x54>)
    9d98:	4798      	blx	r3
}
    9d9a:	bf00      	nop
    9d9c:	3708      	adds	r7, #8
    9d9e:	46bd      	mov	sp, r7
    9da0:	bd80      	pop	{r7, pc}
    9da2:	bf00      	nop
    9da4:	00009361 	.word	0x00009361
    9da8:	000093b5 	.word	0x000093b5

00009dac <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9dac:	b580      	push	{r7, lr}
    9dae:	b082      	sub	sp, #8
    9db0:	af00      	add	r7, sp, #0
    9db2:	4603      	mov	r3, r0
    9db4:	71fb      	strb	r3, [r7, #7]
    9db6:	460b      	mov	r3, r1
    9db8:	71bb      	strb	r3, [r7, #6]
    9dba:	4613      	mov	r3, r2
    9dbc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9dbe:	797b      	ldrb	r3, [r7, #5]
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d00b      	beq.n	9ddc <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9dc4:	79bb      	ldrb	r3, [r7, #6]
    9dc6:	2240      	movs	r2, #64	; 0x40
    9dc8:	fa02 f303 	lsl.w	r3, r2, r3
    9dcc:	b2da      	uxtb	r2, r3
    9dce:	79fb      	ldrb	r3, [r7, #7]
    9dd0:	4619      	mov	r1, r3
    9dd2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dd6:	4b09      	ldr	r3, [pc, #36]	; (9dfc <_usbd_ep_set_out_rdy+0x50>)
    9dd8:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9dda:	e00a      	b.n	9df2 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9ddc:	79bb      	ldrb	r3, [r7, #6]
    9dde:	2240      	movs	r2, #64	; 0x40
    9de0:	fa02 f303 	lsl.w	r3, r2, r3
    9de4:	b2da      	uxtb	r2, r3
    9de6:	79fb      	ldrb	r3, [r7, #7]
    9de8:	4619      	mov	r1, r3
    9dea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dee:	4b04      	ldr	r3, [pc, #16]	; (9e00 <_usbd_ep_set_out_rdy+0x54>)
    9df0:	4798      	blx	r3
}
    9df2:	bf00      	nop
    9df4:	3708      	adds	r7, #8
    9df6:	46bd      	mov	sp, r7
    9df8:	bd80      	pop	{r7, pc}
    9dfa:	bf00      	nop
    9dfc:	000093b5 	.word	0x000093b5
    9e00:	00009361 	.word	0x00009361

00009e04 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9e04:	b480      	push	{r7}
    9e06:	b083      	sub	sp, #12
    9e08:	af00      	add	r7, sp, #0
    9e0a:	4603      	mov	r3, r0
    9e0c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9e0e:	88fb      	ldrh	r3, [r7, #6]
    9e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9e14:	d820      	bhi.n	9e58 <_usbd_ep_pcksize_size+0x54>
    9e16:	88fb      	ldrh	r3, [r7, #6]
    9e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9e1c:	d81a      	bhi.n	9e54 <_usbd_ep_pcksize_size+0x50>
    9e1e:	88fb      	ldrh	r3, [r7, #6]
    9e20:	2b80      	cmp	r3, #128	; 0x80
    9e22:	d815      	bhi.n	9e50 <_usbd_ep_pcksize_size+0x4c>
    9e24:	88fb      	ldrh	r3, [r7, #6]
    9e26:	2b40      	cmp	r3, #64	; 0x40
    9e28:	d810      	bhi.n	9e4c <_usbd_ep_pcksize_size+0x48>
    9e2a:	88fb      	ldrh	r3, [r7, #6]
    9e2c:	2b20      	cmp	r3, #32
    9e2e:	d80b      	bhi.n	9e48 <_usbd_ep_pcksize_size+0x44>
    9e30:	88fb      	ldrh	r3, [r7, #6]
    9e32:	2b10      	cmp	r3, #16
    9e34:	d806      	bhi.n	9e44 <_usbd_ep_pcksize_size+0x40>
    9e36:	88fb      	ldrh	r3, [r7, #6]
    9e38:	2b08      	cmp	r3, #8
    9e3a:	bf8c      	ite	hi
    9e3c:	2301      	movhi	r3, #1
    9e3e:	2300      	movls	r3, #0
    9e40:	b2db      	uxtb	r3, r3
    9e42:	e00a      	b.n	9e5a <_usbd_ep_pcksize_size+0x56>
    9e44:	2302      	movs	r3, #2
    9e46:	e008      	b.n	9e5a <_usbd_ep_pcksize_size+0x56>
    9e48:	2303      	movs	r3, #3
    9e4a:	e006      	b.n	9e5a <_usbd_ep_pcksize_size+0x56>
    9e4c:	2304      	movs	r3, #4
    9e4e:	e004      	b.n	9e5a <_usbd_ep_pcksize_size+0x56>
    9e50:	2305      	movs	r3, #5
    9e52:	e002      	b.n	9e5a <_usbd_ep_pcksize_size+0x56>
    9e54:	2306      	movs	r3, #6
    9e56:	e000      	b.n	9e5a <_usbd_ep_pcksize_size+0x56>
    9e58:	2307      	movs	r3, #7
}
    9e5a:	4618      	mov	r0, r3
    9e5c:	370c      	adds	r7, #12
    9e5e:	46bd      	mov	sp, r7
    9e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e64:	4770      	bx	lr
	...

00009e68 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9e68:	b480      	push	{r7}
    9e6a:	b085      	sub	sp, #20
    9e6c:	af00      	add	r7, sp, #0
    9e6e:	4603      	mov	r3, r0
    9e70:	460a      	mov	r2, r1
    9e72:	71fb      	strb	r3, [r7, #7]
    9e74:	4613      	mov	r3, r2
    9e76:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9e78:	79fb      	ldrb	r3, [r7, #7]
    9e7a:	2b00      	cmp	r3, #0
    9e7c:	d008      	beq.n	9e90 <_usb_d_dev_ept+0x28>
    9e7e:	79bb      	ldrb	r3, [r7, #6]
    9e80:	2b00      	cmp	r3, #0
    9e82:	d003      	beq.n	9e8c <_usb_d_dev_ept+0x24>
    9e84:	79fb      	ldrb	r3, [r7, #7]
    9e86:	3304      	adds	r3, #4
    9e88:	b2db      	uxtb	r3, r3
    9e8a:	e002      	b.n	9e92 <_usb_d_dev_ept+0x2a>
    9e8c:	79fb      	ldrb	r3, [r7, #7]
    9e8e:	e000      	b.n	9e92 <_usb_d_dev_ept+0x2a>
    9e90:	2300      	movs	r3, #0
    9e92:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9e94:	7bfa      	ldrb	r2, [r7, #15]
    9e96:	4613      	mov	r3, r2
    9e98:	009b      	lsls	r3, r3, #2
    9e9a:	4413      	add	r3, r2
    9e9c:	009b      	lsls	r3, r3, #2
    9e9e:	3310      	adds	r3, #16
    9ea0:	4a04      	ldr	r2, [pc, #16]	; (9eb4 <_usb_d_dev_ept+0x4c>)
    9ea2:	4413      	add	r3, r2
    9ea4:	3304      	adds	r3, #4
}
    9ea6:	4618      	mov	r0, r3
    9ea8:	3714      	adds	r7, #20
    9eaa:	46bd      	mov	sp, r7
    9eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eb0:	4770      	bx	lr
    9eb2:	bf00      	nop
    9eb4:	20000cec 	.word	0x20000cec

00009eb8 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9eb8:	b580      	push	{r7, lr}
    9eba:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9ebc:	2104      	movs	r1, #4
    9ebe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ec2:	4b03      	ldr	r3, [pc, #12]	; (9ed0 <_usb_d_dev_sof+0x18>)
    9ec4:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9ec6:	4b03      	ldr	r3, [pc, #12]	; (9ed4 <_usb_d_dev_sof+0x1c>)
    9ec8:	681b      	ldr	r3, [r3, #0]
    9eca:	4798      	blx	r3
}
    9ecc:	bf00      	nop
    9ece:	bd80      	pop	{r7, pc}
    9ed0:	0000952f 	.word	0x0000952f
    9ed4:	20000cec 	.word	0x20000cec

00009ed8 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9ed8:	b580      	push	{r7, lr}
    9eda:	b084      	sub	sp, #16
    9edc:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9ede:	2300      	movs	r3, #0
    9ee0:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9ee2:	f240 2101 	movw	r1, #513	; 0x201
    9ee6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9eea:	4b1a      	ldr	r3, [pc, #104]	; (9f54 <_usb_d_dev_lpmsusp+0x7c>)
    9eec:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9eee:	f240 2101 	movw	r1, #513	; 0x201
    9ef2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ef6:	4b18      	ldr	r3, [pc, #96]	; (9f58 <_usb_d_dev_lpmsusp+0x80>)
    9ef8:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9efa:	2170      	movs	r1, #112	; 0x70
    9efc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f00:	4b16      	ldr	r3, [pc, #88]	; (9f5c <_usb_d_dev_lpmsusp+0x84>)
    9f02:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9f04:	2300      	movs	r3, #0
    9f06:	73fb      	strb	r3, [r7, #15]
    9f08:	e018      	b.n	9f3c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9f0a:	7bfb      	ldrb	r3, [r7, #15]
    9f0c:	015b      	lsls	r3, r3, #5
    9f0e:	4a14      	ldr	r2, [pc, #80]	; (9f60 <_usb_d_dev_lpmsusp+0x88>)
    9f10:	4413      	add	r3, r2
    9f12:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9f14:	687b      	ldr	r3, [r7, #4]
    9f16:	891b      	ldrh	r3, [r3, #8]
    9f18:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9f1c:	b2db      	uxtb	r3, r3
    9f1e:	2b03      	cmp	r3, #3
    9f20:	d109      	bne.n	9f36 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9f22:	687b      	ldr	r3, [r7, #4]
    9f24:	891b      	ldrh	r3, [r3, #8]
    9f26:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9f2a:	b29b      	uxth	r3, r3
    9f2c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9f2e:	687b      	ldr	r3, [r7, #4]
    9f30:	2200      	movs	r2, #0
    9f32:	811a      	strh	r2, [r3, #8]
			break;
    9f34:	e005      	b.n	9f42 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9f36:	7bfb      	ldrb	r3, [r7, #15]
    9f38:	3301      	adds	r3, #1
    9f3a:	73fb      	strb	r3, [r7, #15]
    9f3c:	7bfb      	ldrb	r3, [r7, #15]
    9f3e:	2b03      	cmp	r3, #3
    9f40:	d9e3      	bls.n	9f0a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9f42:	4b08      	ldr	r3, [pc, #32]	; (9f64 <_usb_d_dev_lpmsusp+0x8c>)
    9f44:	685b      	ldr	r3, [r3, #4]
    9f46:	68b9      	ldr	r1, [r7, #8]
    9f48:	2003      	movs	r0, #3
    9f4a:	4798      	blx	r3
}
    9f4c:	bf00      	nop
    9f4e:	3710      	adds	r7, #16
    9f50:	46bd      	mov	sp, r7
    9f52:	bd80      	pop	{r7, pc}
    9f54:	0000952f 	.word	0x0000952f
    9f58:	00009585 	.word	0x00009585
    9f5c:	0000954d 	.word	0x0000954d
    9f60:	20000db4 	.word	0x20000db4
    9f64:	20000cec 	.word	0x20000cec

00009f68 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9f68:	b580      	push	{r7, lr}
    9f6a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9f6c:	2180      	movs	r1, #128	; 0x80
    9f6e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f72:	4b04      	ldr	r3, [pc, #16]	; (9f84 <_usb_d_dev_ramerr+0x1c>)
    9f74:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9f76:	4b04      	ldr	r3, [pc, #16]	; (9f88 <_usb_d_dev_ramerr+0x20>)
    9f78:	685b      	ldr	r3, [r3, #4]
    9f7a:	2100      	movs	r1, #0
    9f7c:	2005      	movs	r0, #5
    9f7e:	4798      	blx	r3
}
    9f80:	bf00      	nop
    9f82:	bd80      	pop	{r7, pc}
    9f84:	0000952f 	.word	0x0000952f
    9f88:	20000cec 	.word	0x20000cec

00009f8c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9f8c:	b580      	push	{r7, lr}
    9f8e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9f90:	2170      	movs	r1, #112	; 0x70
    9f92:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f96:	4b0b      	ldr	r3, [pc, #44]	; (9fc4 <_usb_d_dev_wakeup+0x38>)
    9f98:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9f9a:	2170      	movs	r1, #112	; 0x70
    9f9c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9fa0:	4b09      	ldr	r3, [pc, #36]	; (9fc8 <_usb_d_dev_wakeup+0x3c>)
    9fa2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9fa4:	f240 2101 	movw	r1, #513	; 0x201
    9fa8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9fac:	4b07      	ldr	r3, [pc, #28]	; (9fcc <_usb_d_dev_wakeup+0x40>)
    9fae:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9fb0:	2000      	movs	r0, #0
    9fb2:	4b07      	ldr	r3, [pc, #28]	; (9fd0 <_usb_d_dev_wakeup+0x44>)
    9fb4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9fb6:	4b07      	ldr	r3, [pc, #28]	; (9fd4 <_usb_d_dev_wakeup+0x48>)
    9fb8:	685b      	ldr	r3, [r3, #4]
    9fba:	2100      	movs	r1, #0
    9fbc:	2002      	movs	r0, #2
    9fbe:	4798      	blx	r3
}
    9fc0:	bf00      	nop
    9fc2:	bd80      	pop	{r7, pc}
    9fc4:	0000952f 	.word	0x0000952f
    9fc8:	00009585 	.word	0x00009585
    9fcc:	0000954d 	.word	0x0000954d
    9fd0:	0000982d 	.word	0x0000982d
    9fd4:	20000cec 	.word	0x20000cec

00009fd8 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9fd8:	b580      	push	{r7, lr}
    9fda:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9fdc:	2200      	movs	r2, #0
    9fde:	2100      	movs	r1, #0
    9fe0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9fe4:	4b0d      	ldr	r3, [pc, #52]	; (a01c <_usb_d_dev_reset+0x44>)
    9fe6:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9fe8:	2108      	movs	r1, #8
    9fea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9fee:	4b0c      	ldr	r3, [pc, #48]	; (a020 <_usb_d_dev_reset+0x48>)
    9ff0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9ff2:	2170      	movs	r1, #112	; 0x70
    9ff4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ff8:	4b0a      	ldr	r3, [pc, #40]	; (a024 <_usb_d_dev_reset+0x4c>)
    9ffa:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9ffc:	f240 2101 	movw	r1, #513	; 0x201
    a000:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a004:	4b08      	ldr	r3, [pc, #32]	; (a028 <_usb_d_dev_reset+0x50>)
    a006:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    a008:	4b08      	ldr	r3, [pc, #32]	; (a02c <_usb_d_dev_reset+0x54>)
    a00a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    a00c:	4b08      	ldr	r3, [pc, #32]	; (a030 <_usb_d_dev_reset+0x58>)
    a00e:	685b      	ldr	r3, [r3, #4]
    a010:	2100      	movs	r1, #0
    a012:	2001      	movs	r0, #1
    a014:	4798      	blx	r3
}
    a016:	bf00      	nop
    a018:	bd80      	pop	{r7, pc}
    a01a:	bf00      	nop
    a01c:	000094c5 	.word	0x000094c5
    a020:	0000952f 	.word	0x0000952f
    a024:	00009585 	.word	0x00009585
    a028:	0000954d 	.word	0x0000954d
    a02c:	0000ab95 	.word	0x0000ab95
    a030:	20000cec 	.word	0x20000cec

0000a034 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    a034:	b580      	push	{r7, lr}
    a036:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a038:	f240 2101 	movw	r1, #513	; 0x201
    a03c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a040:	4b09      	ldr	r3, [pc, #36]	; (a068 <_usb_d_dev_suspend+0x34>)
    a042:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    a044:	f240 2101 	movw	r1, #513	; 0x201
    a048:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a04c:	4b07      	ldr	r3, [pc, #28]	; (a06c <_usb_d_dev_suspend+0x38>)
    a04e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    a050:	2170      	movs	r1, #112	; 0x70
    a052:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a056:	4b06      	ldr	r3, [pc, #24]	; (a070 <_usb_d_dev_suspend+0x3c>)
    a058:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    a05a:	4b06      	ldr	r3, [pc, #24]	; (a074 <_usb_d_dev_suspend+0x40>)
    a05c:	685b      	ldr	r3, [r3, #4]
    a05e:	2100      	movs	r1, #0
    a060:	2004      	movs	r0, #4
    a062:	4798      	blx	r3
}
    a064:	bf00      	nop
    a066:	bd80      	pop	{r7, pc}
    a068:	0000952f 	.word	0x0000952f
    a06c:	00009585 	.word	0x00009585
    a070:	0000954d 	.word	0x0000954d
    a074:	20000cec 	.word	0x20000cec

0000a078 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    a078:	b580      	push	{r7, lr}
    a07a:	b082      	sub	sp, #8
    a07c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    a07e:	2301      	movs	r3, #1
    a080:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    a082:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a086:	4b22      	ldr	r3, [pc, #136]	; (a110 <_usb_d_dev_handle_nep+0x98>)
    a088:	4798      	blx	r3
    a08a:	4603      	mov	r3, r0
    a08c:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    a08e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a092:	4b20      	ldr	r3, [pc, #128]	; (a114 <_usb_d_dev_handle_nep+0x9c>)
    a094:	4798      	blx	r3
    a096:	4603      	mov	r3, r0
    a098:	461a      	mov	r2, r3
    a09a:	88bb      	ldrh	r3, [r7, #4]
    a09c:	4013      	ands	r3, r2
    a09e:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    a0a0:	88bb      	ldrh	r3, [r7, #4]
    a0a2:	f003 0304 	and.w	r3, r3, #4
    a0a6:	2b00      	cmp	r3, #0
    a0a8:	d003      	beq.n	a0b2 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    a0aa:	4b1b      	ldr	r3, [pc, #108]	; (a118 <_usb_d_dev_handle_nep+0xa0>)
    a0ac:	4798      	blx	r3
		return true;
    a0ae:	2301      	movs	r3, #1
    a0b0:	e02a      	b.n	a108 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    a0b2:	88bb      	ldrh	r3, [r7, #4]
    a0b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a0b8:	2b00      	cmp	r3, #0
    a0ba:	d002      	beq.n	a0c2 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    a0bc:	4b17      	ldr	r3, [pc, #92]	; (a11c <_usb_d_dev_handle_nep+0xa4>)
    a0be:	4798      	blx	r3
    a0c0:	e021      	b.n	a106 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    a0c2:	88bb      	ldrh	r3, [r7, #4]
    a0c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a0c8:	2b00      	cmp	r3, #0
    a0ca:	d002      	beq.n	a0d2 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    a0cc:	4b14      	ldr	r3, [pc, #80]	; (a120 <_usb_d_dev_handle_nep+0xa8>)
    a0ce:	4798      	blx	r3
    a0d0:	e019      	b.n	a106 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    a0d2:	88bb      	ldrh	r3, [r7, #4]
    a0d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a0d8:	2b00      	cmp	r3, #0
    a0da:	d002      	beq.n	a0e2 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    a0dc:	4b11      	ldr	r3, [pc, #68]	; (a124 <_usb_d_dev_handle_nep+0xac>)
    a0de:	4798      	blx	r3
    a0e0:	e011      	b.n	a106 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    a0e2:	88bb      	ldrh	r3, [r7, #4]
    a0e4:	f003 0308 	and.w	r3, r3, #8
    a0e8:	2b00      	cmp	r3, #0
    a0ea:	d002      	beq.n	a0f2 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    a0ec:	4b0e      	ldr	r3, [pc, #56]	; (a128 <_usb_d_dev_handle_nep+0xb0>)
    a0ee:	4798      	blx	r3
    a0f0:	e009      	b.n	a106 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    a0f2:	88bb      	ldrh	r3, [r7, #4]
    a0f4:	f003 0301 	and.w	r3, r3, #1
    a0f8:	2b00      	cmp	r3, #0
    a0fa:	d002      	beq.n	a102 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    a0fc:	4b0b      	ldr	r3, [pc, #44]	; (a12c <_usb_d_dev_handle_nep+0xb4>)
    a0fe:	4798      	blx	r3
    a100:	e001      	b.n	a106 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    a102:	2300      	movs	r3, #0
    a104:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    a106:	79fb      	ldrb	r3, [r7, #7]
}
    a108:	4618      	mov	r0, r3
    a10a:	3708      	adds	r7, #8
    a10c:	46bd      	mov	sp, r7
    a10e:	bd80      	pop	{r7, pc}
    a110:	00009515 	.word	0x00009515
    a114:	0000956b 	.word	0x0000956b
    a118:	00009eb9 	.word	0x00009eb9
    a11c:	00009ed9 	.word	0x00009ed9
    a120:	00009f69 	.word	0x00009f69
    a124:	00009f8d 	.word	0x00009f8d
    a128:	00009fd9 	.word	0x00009fd9
    a12c:	0000a035 	.word	0x0000a035

0000a130 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a130:	b590      	push	{r4, r7, lr}
    a132:	b089      	sub	sp, #36	; 0x24
    a134:	af00      	add	r7, sp, #0
    a136:	6078      	str	r0, [r7, #4]
    a138:	460b      	mov	r3, r1
    a13a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    a13c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a140:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    a142:	687b      	ldr	r3, [r7, #4]
    a144:	7c9b      	ldrb	r3, [r3, #18]
    a146:	f003 030f 	and.w	r3, r3, #15
    a14a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a14c:	7dfb      	ldrb	r3, [r7, #23]
    a14e:	015b      	lsls	r3, r3, #5
    a150:	4a73      	ldr	r2, [pc, #460]	; (a320 <_usb_d_dev_in_next+0x1f0>)
    a152:	4413      	add	r3, r2
    a154:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    a156:	78fb      	ldrb	r3, [r7, #3]
    a158:	2b00      	cmp	r3, #0
    a15a:	d006      	beq.n	a16a <_usb_d_dev_in_next+0x3a>
    a15c:	693b      	ldr	r3, [r7, #16]
    a15e:	3310      	adds	r3, #16
    a160:	685b      	ldr	r3, [r3, #4]
    a162:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a166:	b29b      	uxth	r3, r3
    a168:	e000      	b.n	a16c <_usb_d_dev_in_next+0x3c>
    a16a:	2300      	movs	r3, #0
    a16c:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    a16e:	687b      	ldr	r3, [r7, #4]
    a170:	8a1b      	ldrh	r3, [r3, #16]
    a172:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a176:	4293      	cmp	r3, r2
    a178:	d103      	bne.n	a182 <_usb_d_dev_in_next+0x52>
    a17a:	687b      	ldr	r3, [r7, #4]
    a17c:	8a1b      	ldrh	r3, [r3, #16]
    a17e:	b21b      	sxth	r3, r3
    a180:	e004      	b.n	a18c <_usb_d_dev_in_next+0x5c>
    a182:	687b      	ldr	r3, [r7, #4]
    a184:	8a1b      	ldrh	r3, [r3, #16]
    a186:	3b01      	subs	r3, #1
    a188:	b29b      	uxth	r3, r3
    a18a:	b21b      	sxth	r3, r3
    a18c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    a190:	4013      	ands	r3, r2
    a192:	b21b      	sxth	r3, r3
    a194:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    a196:	2300      	movs	r3, #0
    a198:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    a19a:	687b      	ldr	r3, [r7, #4]
    a19c:	7cdb      	ldrb	r3, [r3, #19]
    a19e:	f003 0307 	and.w	r3, r3, #7
    a1a2:	b2db      	uxtb	r3, r3
    a1a4:	2b01      	cmp	r3, #1
    a1a6:	bf0c      	ite	eq
    a1a8:	2301      	moveq	r3, #1
    a1aa:	2300      	movne	r3, #0
    a1ac:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    a1ae:	78fb      	ldrb	r3, [r7, #3]
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	d004      	beq.n	a1be <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    a1b4:	7dfb      	ldrb	r3, [r7, #23]
    a1b6:	2101      	movs	r1, #1
    a1b8:	4618      	mov	r0, r3
    a1ba:	4b5a      	ldr	r3, [pc, #360]	; (a324 <_usb_d_dev_in_next+0x1f4>)
    a1bc:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    a1be:	687b      	ldr	r3, [r7, #4]
    a1c0:	689a      	ldr	r2, [r3, #8]
    a1c2:	89fb      	ldrh	r3, [r7, #14]
    a1c4:	441a      	add	r2, r3
    a1c6:	687b      	ldr	r3, [r7, #4]
    a1c8:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    a1ca:	687b      	ldr	r3, [r7, #4]
    a1cc:	689a      	ldr	r2, [r3, #8]
    a1ce:	687b      	ldr	r3, [r7, #4]
    a1d0:	685b      	ldr	r3, [r3, #4]
    a1d2:	429a      	cmp	r2, r3
    a1d4:	d243      	bcs.n	a25e <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    a1d6:	687b      	ldr	r3, [r7, #4]
    a1d8:	685b      	ldr	r3, [r3, #4]
    a1da:	b29a      	uxth	r2, r3
    a1dc:	687b      	ldr	r3, [r7, #4]
    a1de:	689b      	ldr	r3, [r3, #8]
    a1e0:	b29b      	uxth	r3, r3
    a1e2:	1ad3      	subs	r3, r2, r3
    a1e4:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    a1e6:	687b      	ldr	r3, [r7, #4]
    a1e8:	7cdb      	ldrb	r3, [r3, #19]
    a1ea:	f003 0320 	and.w	r3, r3, #32
    a1ee:	b2db      	uxtb	r3, r3
    a1f0:	2b00      	cmp	r3, #0
    a1f2:	d01b      	beq.n	a22c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    a1f4:	687b      	ldr	r3, [r7, #4]
    a1f6:	8a1b      	ldrh	r3, [r3, #16]
    a1f8:	8bfa      	ldrh	r2, [r7, #30]
    a1fa:	429a      	cmp	r2, r3
    a1fc:	d902      	bls.n	a204 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    a1fe:	687b      	ldr	r3, [r7, #4]
    a200:	8a1b      	ldrh	r3, [r3, #16]
    a202:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    a204:	687b      	ldr	r3, [r7, #4]
    a206:	68d8      	ldr	r0, [r3, #12]
    a208:	687b      	ldr	r3, [r7, #4]
    a20a:	681a      	ldr	r2, [r3, #0]
    a20c:	687b      	ldr	r3, [r7, #4]
    a20e:	689b      	ldr	r3, [r3, #8]
    a210:	4413      	add	r3, r2
    a212:	8bfa      	ldrh	r2, [r7, #30]
    a214:	4619      	mov	r1, r3
    a216:	4b44      	ldr	r3, [pc, #272]	; (a328 <_usb_d_dev_in_next+0x1f8>)
    a218:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    a21a:	687b      	ldr	r3, [r7, #4]
    a21c:	68db      	ldr	r3, [r3, #12]
    a21e:	461a      	mov	r2, r3
    a220:	7dfb      	ldrb	r3, [r7, #23]
    a222:	2101      	movs	r1, #1
    a224:	4618      	mov	r0, r3
    a226:	4b41      	ldr	r3, [pc, #260]	; (a32c <_usb_d_dev_in_next+0x1fc>)
    a228:	4798      	blx	r3
    a22a:	e011      	b.n	a250 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    a22c:	8bfb      	ldrh	r3, [r7, #30]
    a22e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a232:	d902      	bls.n	a23a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    a234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a238:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a23a:	687b      	ldr	r3, [r7, #4]
    a23c:	681a      	ldr	r2, [r3, #0]
    a23e:	687b      	ldr	r3, [r7, #4]
    a240:	689b      	ldr	r3, [r3, #8]
    a242:	4413      	add	r3, r2
    a244:	461a      	mov	r2, r3
    a246:	7dfb      	ldrb	r3, [r7, #23]
    a248:	2101      	movs	r1, #1
    a24a:	4618      	mov	r0, r3
    a24c:	4b37      	ldr	r3, [pc, #220]	; (a32c <_usb_d_dev_in_next+0x1fc>)
    a24e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    a250:	8bfa      	ldrh	r2, [r7, #30]
    a252:	7df8      	ldrb	r0, [r7, #23]
    a254:	2300      	movs	r3, #0
    a256:	2101      	movs	r1, #1
    a258:	4c35      	ldr	r4, [pc, #212]	; (a330 <_usb_d_dev_in_next+0x200>)
    a25a:	47a0      	blx	r4
		goto _in_tx_exec;
    a25c:	e041      	b.n	a2e2 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    a25e:	687b      	ldr	r3, [r7, #4]
    a260:	7cdb      	ldrb	r3, [r3, #19]
    a262:	f003 0310 	and.w	r3, r3, #16
    a266:	b2db      	uxtb	r3, r3
    a268:	2b00      	cmp	r3, #0
    a26a:	d00b      	beq.n	a284 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    a26c:	687a      	ldr	r2, [r7, #4]
    a26e:	7cd3      	ldrb	r3, [r2, #19]
    a270:	f36f 1304 	bfc	r3, #4, #1
    a274:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    a276:	7df8      	ldrb	r0, [r7, #23]
    a278:	2300      	movs	r3, #0
    a27a:	2200      	movs	r2, #0
    a27c:	2101      	movs	r1, #1
    a27e:	4c2c      	ldr	r4, [pc, #176]	; (a330 <_usb_d_dev_in_next+0x200>)
    a280:	47a0      	blx	r4
		goto _in_tx_exec;
    a282:	e02e      	b.n	a2e2 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    a284:	7afb      	ldrb	r3, [r7, #11]
    a286:	2b00      	cmp	r3, #0
    a288:	d006      	beq.n	a298 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    a28a:	7dfb      	ldrb	r3, [r7, #23]
    a28c:	224b      	movs	r2, #75	; 0x4b
    a28e:	4619      	mov	r1, r3
    a290:	69b8      	ldr	r0, [r7, #24]
    a292:	4b28      	ldr	r3, [pc, #160]	; (a334 <_usb_d_dev_in_next+0x204>)
    a294:	4798      	blx	r3
    a296:	e005      	b.n	a2a4 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    a298:	7dfb      	ldrb	r3, [r7, #23]
    a29a:	224a      	movs	r2, #74	; 0x4a
    a29c:	4619      	mov	r1, r3
    a29e:	69b8      	ldr	r0, [r7, #24]
    a2a0:	4b24      	ldr	r3, [pc, #144]	; (a334 <_usb_d_dev_in_next+0x204>)
    a2a2:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    a2a4:	687b      	ldr	r3, [r7, #4]
    a2a6:	8a1b      	ldrh	r3, [r3, #16]
    a2a8:	89ba      	ldrh	r2, [r7, #12]
    a2aa:	429a      	cmp	r2, r3
    a2ac:	d114      	bne.n	a2d8 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    a2ae:	687a      	ldr	r2, [r7, #4]
    a2b0:	7cd3      	ldrb	r3, [r2, #19]
    a2b2:	f36f 1386 	bfc	r3, #6, #1
    a2b6:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    a2b8:	4b1f      	ldr	r3, [pc, #124]	; (a338 <_usb_d_dev_in_next+0x208>)
    a2ba:	68db      	ldr	r3, [r3, #12]
    a2bc:	687a      	ldr	r2, [r7, #4]
    a2be:	7c90      	ldrb	r0, [r2, #18]
    a2c0:	687a      	ldr	r2, [r7, #4]
    a2c2:	6892      	ldr	r2, [r2, #8]
    a2c4:	4611      	mov	r1, r2
    a2c6:	4798      	blx	r3
    a2c8:	4603      	mov	r3, r0
    a2ca:	2b00      	cmp	r3, #0
    a2cc:	d124      	bne.n	a318 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    a2ce:	687a      	ldr	r2, [r7, #4]
    a2d0:	7cd3      	ldrb	r3, [r2, #19]
    a2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a2d6:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a2d8:	2100      	movs	r1, #0
    a2da:	6878      	ldr	r0, [r7, #4]
    a2dc:	4b17      	ldr	r3, [pc, #92]	; (a33c <_usb_d_dev_in_next+0x20c>)
    a2de:	4798      	blx	r3
	return;
    a2e0:	e01b      	b.n	a31a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    a2e2:	78fb      	ldrb	r3, [r7, #3]
    a2e4:	f083 0301 	eor.w	r3, r3, #1
    a2e8:	b2db      	uxtb	r3, r3
    a2ea:	2b00      	cmp	r3, #0
    a2ec:	d00d      	beq.n	a30a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    a2ee:	7afb      	ldrb	r3, [r7, #11]
    a2f0:	2b00      	cmp	r3, #0
    a2f2:	d002      	beq.n	a2fa <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    a2f4:	234e      	movs	r3, #78	; 0x4e
    a2f6:	777b      	strb	r3, [r7, #29]
    a2f8:	e001      	b.n	a2fe <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    a2fa:	234a      	movs	r3, #74	; 0x4a
    a2fc:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a2fe:	7f7a      	ldrb	r2, [r7, #29]
    a300:	7dfb      	ldrb	r3, [r7, #23]
    a302:	4619      	mov	r1, r3
    a304:	69b8      	ldr	r0, [r7, #24]
    a306:	4b0e      	ldr	r3, [pc, #56]	; (a340 <_usb_d_dev_in_next+0x210>)
    a308:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a30a:	7dfb      	ldrb	r3, [r7, #23]
    a30c:	2201      	movs	r2, #1
    a30e:	2101      	movs	r1, #1
    a310:	4618      	mov	r0, r3
    a312:	4b0c      	ldr	r3, [pc, #48]	; (a344 <_usb_d_dev_in_next+0x214>)
    a314:	4798      	blx	r3
    a316:	e000      	b.n	a31a <_usb_d_dev_in_next+0x1ea>
			return;
    a318:	bf00      	nop
}
    a31a:	3724      	adds	r7, #36	; 0x24
    a31c:	46bd      	mov	sp, r7
    a31e:	bd90      	pop	{r4, r7, pc}
    a320:	20000db4 	.word	0x20000db4
    a324:	00009b29 	.word	0x00009b29
    a328:	0000fb21 	.word	0x0000fb21
    a32c:	00009b55 	.word	0x00009b55
    a330:	00009c9d 	.word	0x00009c9d
    a334:	00009435 	.word	0x00009435
    a338:	20000cec 	.word	0x20000cec
    a33c:	0000b459 	.word	0x0000b459
    a340:	00009409 	.word	0x00009409
    a344:	00009d55 	.word	0x00009d55

0000a348 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a348:	b590      	push	{r4, r7, lr}
    a34a:	b08b      	sub	sp, #44	; 0x2c
    a34c:	af00      	add	r7, sp, #0
    a34e:	6078      	str	r0, [r7, #4]
    a350:	460b      	mov	r3, r1
    a352:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a354:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a358:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a35a:	687b      	ldr	r3, [r7, #4]
    a35c:	7c9b      	ldrb	r3, [r3, #18]
    a35e:	f003 030f 	and.w	r3, r3, #15
    a362:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a364:	7ffb      	ldrb	r3, [r7, #31]
    a366:	015b      	lsls	r3, r3, #5
    a368:	4a94      	ldr	r2, [pc, #592]	; (a5bc <_usb_d_dev_out_next+0x274>)
    a36a:	4413      	add	r3, r2
    a36c:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a36e:	78fb      	ldrb	r3, [r7, #3]
    a370:	2b00      	cmp	r3, #0
    a372:	d005      	beq.n	a380 <_usb_d_dev_out_next+0x38>
    a374:	69bb      	ldr	r3, [r7, #24]
    a376:	685b      	ldr	r3, [r3, #4]
    a378:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a37c:	b29b      	uxth	r3, r3
    a37e:	e000      	b.n	a382 <_usb_d_dev_out_next+0x3a>
    a380:	2300      	movs	r3, #0
    a382:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a384:	78fb      	ldrb	r3, [r7, #3]
    a386:	2b00      	cmp	r3, #0
    a388:	d005      	beq.n	a396 <_usb_d_dev_out_next+0x4e>
    a38a:	69bb      	ldr	r3, [r7, #24]
    a38c:	685b      	ldr	r3, [r3, #4]
    a38e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a392:	b29b      	uxth	r3, r3
    a394:	e000      	b.n	a398 <_usb_d_dev_out_next+0x50>
    a396:	2300      	movs	r3, #0
    a398:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a39a:	687b      	ldr	r3, [r7, #4]
    a39c:	8a1b      	ldrh	r3, [r3, #16]
    a39e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a3a2:	4293      	cmp	r3, r2
    a3a4:	d004      	beq.n	a3b0 <_usb_d_dev_out_next+0x68>
    a3a6:	687b      	ldr	r3, [r7, #4]
    a3a8:	8a1b      	ldrh	r3, [r3, #16]
    a3aa:	3b01      	subs	r3, #1
    a3ac:	b29b      	uxth	r3, r3
    a3ae:	e001      	b.n	a3b4 <_usb_d_dev_out_next+0x6c>
    a3b0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a3b4:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a3b6:	8aba      	ldrh	r2, [r7, #20]
    a3b8:	8a7b      	ldrh	r3, [r7, #18]
    a3ba:	4013      	ands	r3, r2
    a3bc:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a3be:	687b      	ldr	r3, [r7, #4]
    a3c0:	7cdb      	ldrb	r3, [r3, #19]
    a3c2:	f003 0307 	and.w	r3, r3, #7
    a3c6:	b2db      	uxtb	r3, r3
    a3c8:	2b01      	cmp	r3, #1
    a3ca:	bf0c      	ite	eq
    a3cc:	2301      	moveq	r3, #1
    a3ce:	2300      	movne	r3, #0
    a3d0:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a3d2:	78fb      	ldrb	r3, [r7, #3]
    a3d4:	2b00      	cmp	r3, #0
    a3d6:	d004      	beq.n	a3e2 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a3d8:	7ffb      	ldrb	r3, [r7, #31]
    a3da:	2100      	movs	r1, #0
    a3dc:	4618      	mov	r0, r3
    a3de:	4b78      	ldr	r3, [pc, #480]	; (a5c0 <_usb_d_dev_out_next+0x278>)
    a3e0:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a3e2:	687b      	ldr	r3, [r7, #4]
    a3e4:	7cdb      	ldrb	r3, [r3, #19]
    a3e6:	f003 0320 	and.w	r3, r3, #32
    a3ea:	b2db      	uxtb	r3, r3
    a3ec:	2b00      	cmp	r3, #0
    a3ee:	d01c      	beq.n	a42a <_usb_d_dev_out_next+0xe2>
    a3f0:	687b      	ldr	r3, [r7, #4]
    a3f2:	685b      	ldr	r3, [r3, #4]
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d018      	beq.n	a42a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a3f8:	687b      	ldr	r3, [r7, #4]
    a3fa:	685b      	ldr	r3, [r3, #4]
    a3fc:	b29a      	uxth	r2, r3
    a3fe:	687b      	ldr	r3, [r7, #4]
    a400:	689b      	ldr	r3, [r3, #8]
    a402:	b29b      	uxth	r3, r3
    a404:	1ad3      	subs	r3, r2, r3
    a406:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a408:	687b      	ldr	r3, [r7, #4]
    a40a:	681a      	ldr	r2, [r3, #0]
    a40c:	687b      	ldr	r3, [r7, #4]
    a40e:	689b      	ldr	r3, [r3, #8]
    a410:	18d0      	adds	r0, r2, r3
    a412:	687b      	ldr	r3, [r7, #4]
    a414:	68d9      	ldr	r1, [r3, #12]
    a416:	89ba      	ldrh	r2, [r7, #12]
    a418:	8a3b      	ldrh	r3, [r7, #16]
    a41a:	429a      	cmp	r2, r3
    a41c:	d901      	bls.n	a422 <_usb_d_dev_out_next+0xda>
    a41e:	8a3b      	ldrh	r3, [r7, #16]
    a420:	e000      	b.n	a424 <_usb_d_dev_out_next+0xdc>
    a422:	89bb      	ldrh	r3, [r7, #12]
    a424:	461a      	mov	r2, r3
    a426:	4b67      	ldr	r3, [pc, #412]	; (a5c4 <_usb_d_dev_out_next+0x27c>)
    a428:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a42a:	687b      	ldr	r3, [r7, #4]
    a42c:	685b      	ldr	r3, [r3, #4]
    a42e:	2b00      	cmp	r3, #0
    a430:	d121      	bne.n	a476 <_usb_d_dev_out_next+0x12e>
    a432:	687b      	ldr	r3, [r7, #4]
    a434:	7cdb      	ldrb	r3, [r3, #19]
    a436:	f003 0310 	and.w	r3, r3, #16
    a43a:	b2db      	uxtb	r3, r3
    a43c:	2b00      	cmp	r3, #0
    a43e:	d01a      	beq.n	a476 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a440:	687a      	ldr	r2, [r7, #4]
    a442:	7cd3      	ldrb	r3, [r2, #19]
    a444:	f36f 1304 	bfc	r3, #4, #1
    a448:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a44a:	687a      	ldr	r2, [r7, #4]
    a44c:	7cd3      	ldrb	r3, [r2, #19]
    a44e:	f043 0320 	orr.w	r3, r3, #32
    a452:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a454:	687b      	ldr	r3, [r7, #4]
    a456:	68db      	ldr	r3, [r3, #12]
    a458:	461a      	mov	r2, r3
    a45a:	7ffb      	ldrb	r3, [r7, #31]
    a45c:	2100      	movs	r1, #0
    a45e:	4618      	mov	r0, r3
    a460:	4b59      	ldr	r3, [pc, #356]	; (a5c8 <_usb_d_dev_out_next+0x280>)
    a462:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a464:	687b      	ldr	r3, [r7, #4]
    a466:	8a1b      	ldrh	r3, [r3, #16]
    a468:	461a      	mov	r2, r3
    a46a:	7ff8      	ldrb	r0, [r7, #31]
    a46c:	2300      	movs	r3, #0
    a46e:	2100      	movs	r1, #0
    a470:	4c56      	ldr	r4, [pc, #344]	; (a5cc <_usb_d_dev_out_next+0x284>)
    a472:	47a0      	blx	r4
		goto _out_rx_exec;
    a474:	e090      	b.n	a598 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a476:	78fb      	ldrb	r3, [r7, #3]
    a478:	2b00      	cmp	r3, #0
    a47a:	d010      	beq.n	a49e <_usb_d_dev_out_next+0x156>
    a47c:	687b      	ldr	r3, [r7, #4]
    a47e:	8a1b      	ldrh	r3, [r3, #16]
    a480:	8a3a      	ldrh	r2, [r7, #16]
    a482:	429a      	cmp	r2, r3
    a484:	d20b      	bcs.n	a49e <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a486:	687a      	ldr	r2, [r7, #4]
    a488:	7cd3      	ldrb	r3, [r2, #19]
    a48a:	f36f 1304 	bfc	r3, #4, #1
    a48e:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a490:	687b      	ldr	r3, [r7, #4]
    a492:	689a      	ldr	r2, [r3, #8]
    a494:	8abb      	ldrh	r3, [r7, #20]
    a496:	441a      	add	r2, r3
    a498:	687b      	ldr	r3, [r7, #4]
    a49a:	609a      	str	r2, [r3, #8]
    a49c:	e05c      	b.n	a558 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a49e:	687b      	ldr	r3, [r7, #4]
    a4a0:	689a      	ldr	r2, [r3, #8]
    a4a2:	8afb      	ldrh	r3, [r7, #22]
    a4a4:	441a      	add	r2, r3
    a4a6:	687b      	ldr	r3, [r7, #4]
    a4a8:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a4aa:	687b      	ldr	r3, [r7, #4]
    a4ac:	689a      	ldr	r2, [r3, #8]
    a4ae:	687b      	ldr	r3, [r7, #4]
    a4b0:	685b      	ldr	r3, [r3, #4]
    a4b2:	429a      	cmp	r2, r3
    a4b4:	d250      	bcs.n	a558 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a4b6:	687b      	ldr	r3, [r7, #4]
    a4b8:	685b      	ldr	r3, [r3, #4]
    a4ba:	b29a      	uxth	r2, r3
    a4bc:	687b      	ldr	r3, [r7, #4]
    a4be:	689b      	ldr	r3, [r3, #8]
    a4c0:	b29b      	uxth	r3, r3
    a4c2:	1ad3      	subs	r3, r2, r3
    a4c4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a4c6:	687b      	ldr	r3, [r7, #4]
    a4c8:	7cdb      	ldrb	r3, [r3, #19]
    a4ca:	f003 0320 	and.w	r3, r3, #32
    a4ce:	b2db      	uxtb	r3, r3
    a4d0:	2b00      	cmp	r3, #0
    a4d2:	d010      	beq.n	a4f6 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a4d4:	687b      	ldr	r3, [r7, #4]
    a4d6:	8a1b      	ldrh	r3, [r3, #16]
    a4d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a4da:	429a      	cmp	r2, r3
    a4dc:	d902      	bls.n	a4e4 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a4de:	687b      	ldr	r3, [r7, #4]
    a4e0:	8a1b      	ldrh	r3, [r3, #16]
    a4e2:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a4e4:	687b      	ldr	r3, [r7, #4]
    a4e6:	68db      	ldr	r3, [r3, #12]
    a4e8:	461a      	mov	r2, r3
    a4ea:	7ffb      	ldrb	r3, [r7, #31]
    a4ec:	2100      	movs	r1, #0
    a4ee:	4618      	mov	r0, r3
    a4f0:	4b35      	ldr	r3, [pc, #212]	; (a5c8 <_usb_d_dev_out_next+0x280>)
    a4f2:	4798      	blx	r3
    a4f4:	e029      	b.n	a54a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a4f6:	687b      	ldr	r3, [r7, #4]
    a4f8:	8a1b      	ldrh	r3, [r3, #16]
    a4fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a4fc:	429a      	cmp	r2, r3
    a4fe:	d90f      	bls.n	a520 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a500:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a506:	d903      	bls.n	a510 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a50c:	84fb      	strh	r3, [r7, #38]	; 0x26
    a50e:	e011      	b.n	a534 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a510:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a512:	8a7b      	ldrh	r3, [r7, #18]
    a514:	4013      	ands	r3, r2
    a516:	b29b      	uxth	r3, r3
    a518:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a51a:	1ad3      	subs	r3, r2, r3
    a51c:	84fb      	strh	r3, [r7, #38]	; 0x26
    a51e:	e009      	b.n	a534 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a520:	687b      	ldr	r3, [r7, #4]
    a522:	8a1b      	ldrh	r3, [r3, #16]
    a524:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a526:	429a      	cmp	r2, r3
    a528:	d204      	bcs.n	a534 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a52a:	687a      	ldr	r2, [r7, #4]
    a52c:	7cd3      	ldrb	r3, [r2, #19]
    a52e:	f043 0320 	orr.w	r3, r3, #32
    a532:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a534:	687b      	ldr	r3, [r7, #4]
    a536:	681a      	ldr	r2, [r3, #0]
    a538:	687b      	ldr	r3, [r7, #4]
    a53a:	689b      	ldr	r3, [r3, #8]
    a53c:	4413      	add	r3, r2
    a53e:	461a      	mov	r2, r3
    a540:	7ffb      	ldrb	r3, [r7, #31]
    a542:	2100      	movs	r1, #0
    a544:	4618      	mov	r0, r3
    a546:	4b20      	ldr	r3, [pc, #128]	; (a5c8 <_usb_d_dev_out_next+0x280>)
    a548:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a54a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a54c:	7ff8      	ldrb	r0, [r7, #31]
    a54e:	2300      	movs	r3, #0
    a550:	2100      	movs	r1, #0
    a552:	4c1e      	ldr	r4, [pc, #120]	; (a5cc <_usb_d_dev_out_next+0x284>)
    a554:	47a0      	blx	r4
			goto _out_rx_exec;
    a556:	e01f      	b.n	a598 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a558:	7bfb      	ldrb	r3, [r7, #15]
    a55a:	2b00      	cmp	r3, #0
    a55c:	d006      	beq.n	a56c <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a55e:	7ffb      	ldrb	r3, [r7, #31]
    a560:	222d      	movs	r2, #45	; 0x2d
    a562:	4619      	mov	r1, r3
    a564:	6a38      	ldr	r0, [r7, #32]
    a566:	4b1a      	ldr	r3, [pc, #104]	; (a5d0 <_usb_d_dev_out_next+0x288>)
    a568:	4798      	blx	r3
    a56a:	e005      	b.n	a578 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a56c:	7ffb      	ldrb	r3, [r7, #31]
    a56e:	2225      	movs	r2, #37	; 0x25
    a570:	4619      	mov	r1, r3
    a572:	6a38      	ldr	r0, [r7, #32]
    a574:	4b16      	ldr	r3, [pc, #88]	; (a5d0 <_usb_d_dev_out_next+0x288>)
    a576:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a578:	7ffb      	ldrb	r3, [r7, #31]
    a57a:	2b00      	cmp	r3, #0
    a57c:	d107      	bne.n	a58e <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a57e:	687b      	ldr	r3, [r7, #4]
    a580:	68db      	ldr	r3, [r3, #12]
    a582:	461a      	mov	r2, r3
    a584:	7ffb      	ldrb	r3, [r7, #31]
    a586:	2100      	movs	r1, #0
    a588:	4618      	mov	r0, r3
    a58a:	4b0f      	ldr	r3, [pc, #60]	; (a5c8 <_usb_d_dev_out_next+0x280>)
    a58c:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a58e:	2100      	movs	r1, #0
    a590:	6878      	ldr	r0, [r7, #4]
    a592:	4b10      	ldr	r3, [pc, #64]	; (a5d4 <_usb_d_dev_out_next+0x28c>)
    a594:	4798      	blx	r3
	return;
    a596:	e031      	b.n	a5fc <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a598:	78fb      	ldrb	r3, [r7, #3]
    a59a:	f083 0301 	eor.w	r3, r3, #1
    a59e:	b2db      	uxtb	r3, r3
    a5a0:	2b00      	cmp	r3, #0
    a5a2:	d025      	beq.n	a5f0 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a5a4:	7bfb      	ldrb	r3, [r7, #15]
    a5a6:	2b00      	cmp	r3, #0
    a5a8:	d018      	beq.n	a5dc <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a5aa:	7ffb      	ldrb	r3, [r7, #31]
    a5ac:	2101      	movs	r1, #1
    a5ae:	4618      	mov	r0, r3
    a5b0:	4b09      	ldr	r3, [pc, #36]	; (a5d8 <_usb_d_dev_out_next+0x290>)
    a5b2:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a5b4:	232d      	movs	r3, #45	; 0x2d
    a5b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a5ba:	e012      	b.n	a5e2 <_usb_d_dev_out_next+0x29a>
    a5bc:	20000db4 	.word	0x20000db4
    a5c0:	00009b29 	.word	0x00009b29
    a5c4:	0000fb21 	.word	0x0000fb21
    a5c8:	00009b55 	.word	0x00009b55
    a5cc:	00009cdd 	.word	0x00009cdd
    a5d0:	00009435 	.word	0x00009435
    a5d4:	0000b459 	.word	0x0000b459
    a5d8:	00009d1d 	.word	0x00009d1d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a5dc:	2325      	movs	r3, #37	; 0x25
    a5de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a5e2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a5e6:	7ffb      	ldrb	r3, [r7, #31]
    a5e8:	4619      	mov	r1, r3
    a5ea:	6a38      	ldr	r0, [r7, #32]
    a5ec:	4b05      	ldr	r3, [pc, #20]	; (a604 <_usb_d_dev_out_next+0x2bc>)
    a5ee:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a5f0:	7ffb      	ldrb	r3, [r7, #31]
    a5f2:	2201      	movs	r2, #1
    a5f4:	2100      	movs	r1, #0
    a5f6:	4618      	mov	r0, r3
    a5f8:	4b03      	ldr	r3, [pc, #12]	; (a608 <_usb_d_dev_out_next+0x2c0>)
    a5fa:	4798      	blx	r3
}
    a5fc:	372c      	adds	r7, #44	; 0x2c
    a5fe:	46bd      	mov	sp, r7
    a600:	bd90      	pop	{r4, r7, pc}
    a602:	bf00      	nop
    a604:	00009409 	.word	0x00009409
    a608:	00009dad 	.word	0x00009dad

0000a60c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a60c:	b580      	push	{r7, lr}
    a60e:	b084      	sub	sp, #16
    a610:	af00      	add	r7, sp, #0
    a612:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a614:	687b      	ldr	r3, [r7, #4]
    a616:	7c9b      	ldrb	r3, [r3, #18]
    a618:	f003 030f 	and.w	r3, r3, #15
    a61c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a61e:	687b      	ldr	r3, [r7, #4]
    a620:	7cdb      	ldrb	r3, [r3, #19]
    a622:	f003 0307 	and.w	r3, r3, #7
    a626:	b2db      	uxtb	r3, r3
    a628:	2b01      	cmp	r3, #1
    a62a:	bf0c      	ite	eq
    a62c:	2301      	moveq	r3, #1
    a62e:	2300      	movne	r3, #0
    a630:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a632:	7bbb      	ldrb	r3, [r7, #14]
    a634:	f083 0301 	eor.w	r3, r3, #1
    a638:	b2db      	uxtb	r3, r3
    a63a:	2b00      	cmp	r3, #0
    a63c:	d008      	beq.n	a650 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a63e:	7bfb      	ldrb	r3, [r7, #15]
    a640:	4618      	mov	r0, r3
    a642:	4b20      	ldr	r3, [pc, #128]	; (a6c4 <_usb_d_dev_handle_setup+0xb8>)
    a644:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a646:	7bfb      	ldrb	r3, [r7, #15]
    a648:	4618      	mov	r0, r3
    a64a:	4b1f      	ldr	r3, [pc, #124]	; (a6c8 <_usb_d_dev_handle_setup+0xbc>)
    a64c:	4798      	blx	r3
		return;
    a64e:	e036      	b.n	a6be <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a650:	687b      	ldr	r3, [r7, #4]
    a652:	7cdb      	ldrb	r3, [r3, #19]
    a654:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a658:	b2db      	uxtb	r3, r3
    a65a:	2b00      	cmp	r3, #0
    a65c:	d010      	beq.n	a680 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a65e:	687a      	ldr	r2, [r7, #4]
    a660:	7cd3      	ldrb	r3, [r2, #19]
    a662:	f36f 1386 	bfc	r3, #6, #1
    a666:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a668:	7bfb      	ldrb	r3, [r7, #15]
    a66a:	2200      	movs	r2, #0
    a66c:	2101      	movs	r1, #1
    a66e:	4618      	mov	r0, r3
    a670:	4b16      	ldr	r3, [pc, #88]	; (a6cc <_usb_d_dev_handle_setup+0xc0>)
    a672:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a674:	7bfb      	ldrb	r3, [r7, #15]
    a676:	2200      	movs	r2, #0
    a678:	2100      	movs	r1, #0
    a67a:	4618      	mov	r0, r3
    a67c:	4b14      	ldr	r3, [pc, #80]	; (a6d0 <_usb_d_dev_handle_setup+0xc4>)
    a67e:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a680:	687a      	ldr	r2, [r7, #4]
    a682:	7cd3      	ldrb	r3, [r2, #19]
    a684:	f36f 03c3 	bfc	r3, #3, #1
    a688:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a68a:	7bfb      	ldrb	r3, [r7, #15]
    a68c:	2100      	movs	r1, #0
    a68e:	4618      	mov	r0, r3
    a690:	4b10      	ldr	r3, [pc, #64]	; (a6d4 <_usb_d_dev_handle_setup+0xc8>)
    a692:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a694:	7bfb      	ldrb	r3, [r7, #15]
    a696:	2101      	movs	r1, #1
    a698:	4618      	mov	r0, r3
    a69a:	4b0e      	ldr	r3, [pc, #56]	; (a6d4 <_usb_d_dev_handle_setup+0xc8>)
    a69c:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a69e:	7bfb      	ldrb	r3, [r7, #15]
    a6a0:	216f      	movs	r1, #111	; 0x6f
    a6a2:	4618      	mov	r0, r3
    a6a4:	4b0c      	ldr	r3, [pc, #48]	; (a6d8 <_usb_d_dev_handle_setup+0xcc>)
    a6a6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a6a8:	7bfb      	ldrb	r3, [r7, #15]
    a6aa:	216f      	movs	r1, #111	; 0x6f
    a6ac:	4618      	mov	r0, r3
    a6ae:	4b0b      	ldr	r3, [pc, #44]	; (a6dc <_usb_d_dev_handle_setup+0xd0>)
    a6b0:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a6b2:	4b0b      	ldr	r3, [pc, #44]	; (a6e0 <_usb_d_dev_handle_setup+0xd4>)
    a6b4:	689b      	ldr	r3, [r3, #8]
    a6b6:	687a      	ldr	r2, [r7, #4]
    a6b8:	7c92      	ldrb	r2, [r2, #18]
    a6ba:	4610      	mov	r0, r2
    a6bc:	4798      	blx	r3
}
    a6be:	3710      	adds	r7, #16
    a6c0:	46bd      	mov	sp, r7
    a6c2:	bd80      	pop	{r7, pc}
    a6c4:	00009ab1 	.word	0x00009ab1
    a6c8:	00009a5d 	.word	0x00009a5d
    a6cc:	00009d55 	.word	0x00009d55
    a6d0:	00009dad 	.word	0x00009dad
    a6d4:	00009d1d 	.word	0x00009d1d
    a6d8:	0000985d 	.word	0x0000985d
    a6dc:	000098ad 	.word	0x000098ad
    a6e0:	20000cec 	.word	0x20000cec

0000a6e4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a6e4:	b580      	push	{r7, lr}
    a6e6:	b084      	sub	sp, #16
    a6e8:	af00      	add	r7, sp, #0
    a6ea:	6078      	str	r0, [r7, #4]
    a6ec:	460b      	mov	r3, r1
    a6ee:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a6f0:	687b      	ldr	r3, [r7, #4]
    a6f2:	7c9b      	ldrb	r3, [r3, #18]
    a6f4:	f003 030f 	and.w	r3, r3, #15
    a6f8:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a6fa:	78f9      	ldrb	r1, [r7, #3]
    a6fc:	7bfb      	ldrb	r3, [r7, #15]
    a6fe:	2200      	movs	r2, #0
    a700:	4618      	mov	r0, r3
    a702:	4b07      	ldr	r3, [pc, #28]	; (a720 <_usb_d_dev_handle_stall+0x3c>)
    a704:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a706:	4b07      	ldr	r3, [pc, #28]	; (a724 <_usb_d_dev_handle_stall+0x40>)
    a708:	691b      	ldr	r3, [r3, #16]
    a70a:	687a      	ldr	r2, [r7, #4]
    a70c:	7c90      	ldrb	r0, [r2, #18]
    a70e:	687a      	ldr	r2, [r7, #4]
    a710:	6892      	ldr	r2, [r2, #8]
    a712:	2101      	movs	r1, #1
    a714:	4798      	blx	r3
}
    a716:	bf00      	nop
    a718:	3710      	adds	r7, #16
    a71a:	46bd      	mov	sp, r7
    a71c:	bd80      	pop	{r7, pc}
    a71e:	bf00      	nop
    a720:	00009a11 	.word	0x00009a11
    a724:	20000cec 	.word	0x20000cec

0000a728 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a728:	b580      	push	{r7, lr}
    a72a:	b088      	sub	sp, #32
    a72c:	af00      	add	r7, sp, #0
    a72e:	6078      	str	r0, [r7, #4]
    a730:	460b      	mov	r3, r1
    a732:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a734:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a738:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a73a:	687b      	ldr	r3, [r7, #4]
    a73c:	7c9b      	ldrb	r3, [r3, #18]
    a73e:	f003 030f 	and.w	r3, r3, #15
    a742:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a744:	4b61      	ldr	r3, [pc, #388]	; (a8cc <_usb_d_dev_handle_trfail+0x1a4>)
    a746:	881b      	ldrh	r3, [r3, #0]
    a748:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a74a:	7efb      	ldrb	r3, [r7, #27]
    a74c:	015b      	lsls	r3, r3, #5
    a74e:	4a60      	ldr	r2, [pc, #384]	; (a8d0 <_usb_d_dev_handle_trfail+0x1a8>)
    a750:	4413      	add	r3, r2
    a752:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a754:	78fb      	ldrb	r3, [r7, #3]
    a756:	2b00      	cmp	r3, #0
    a758:	d006      	beq.n	a768 <_usb_d_dev_handle_trfail+0x40>
    a75a:	7efb      	ldrb	r3, [r7, #27]
    a75c:	4619      	mov	r1, r3
    a75e:	69f8      	ldr	r0, [r7, #28]
    a760:	4b5c      	ldr	r3, [pc, #368]	; (a8d4 <_usb_d_dev_handle_trfail+0x1ac>)
    a762:	4798      	blx	r3
    a764:	4603      	mov	r3, r0
    a766:	e005      	b.n	a774 <_usb_d_dev_handle_trfail+0x4c>
    a768:	7efb      	ldrb	r3, [r7, #27]
    a76a:	4619      	mov	r1, r3
    a76c:	69f8      	ldr	r0, [r7, #28]
    a76e:	4b5a      	ldr	r3, [pc, #360]	; (a8d8 <_usb_d_dev_handle_trfail+0x1b0>)
    a770:	4798      	blx	r3
    a772:	4603      	mov	r3, r0
    a774:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a776:	687b      	ldr	r3, [r7, #4]
    a778:	7cdb      	ldrb	r3, [r3, #19]
    a77a:	f003 0307 	and.w	r3, r3, #7
    a77e:	b2db      	uxtb	r3, r3
    a780:	2b01      	cmp	r3, #1
    a782:	bf0c      	ite	eq
    a784:	2301      	moveq	r3, #1
    a786:	2300      	movne	r3, #0
    a788:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a78a:	78fb      	ldrb	r3, [r7, #3]
    a78c:	011b      	lsls	r3, r3, #4
    a78e:	697a      	ldr	r2, [r7, #20]
    a790:	4413      	add	r3, r2
    a792:	7a9b      	ldrb	r3, [r3, #10]
    a794:	b2db      	uxtb	r3, r3
    a796:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a798:	7cfb      	ldrb	r3, [r7, #19]
    a79a:	2b02      	cmp	r3, #2
    a79c:	d12f      	bne.n	a7fe <_usb_d_dev_handle_trfail+0xd6>
    a79e:	7b3b      	ldrb	r3, [r7, #12]
    a7a0:	f003 0301 	and.w	r3, r3, #1
    a7a4:	b2db      	uxtb	r3, r3
    a7a6:	2b00      	cmp	r3, #0
    a7a8:	d029      	beq.n	a7fe <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a7aa:	78fb      	ldrb	r3, [r7, #3]
    a7ac:	011b      	lsls	r3, r3, #4
    a7ae:	697a      	ldr	r2, [r7, #20]
    a7b0:	441a      	add	r2, r3
    a7b2:	7a93      	ldrb	r3, [r2, #10]
    a7b4:	f36f 0300 	bfc	r3, #0, #1
    a7b8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a7ba:	78fb      	ldrb	r3, [r7, #3]
    a7bc:	f107 0220 	add.w	r2, r7, #32
    a7c0:	4413      	add	r3, r2
    a7c2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a7c6:	7efb      	ldrb	r3, [r7, #27]
    a7c8:	4619      	mov	r1, r3
    a7ca:	69f8      	ldr	r0, [r7, #28]
    a7cc:	4b43      	ldr	r3, [pc, #268]	; (a8dc <_usb_d_dev_handle_trfail+0x1b4>)
    a7ce:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a7d0:	78fb      	ldrb	r3, [r7, #3]
    a7d2:	f107 0220 	add.w	r2, r7, #32
    a7d6:	4413      	add	r3, r2
    a7d8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a7dc:	7efb      	ldrb	r3, [r7, #27]
    a7de:	4619      	mov	r1, r3
    a7e0:	69f8      	ldr	r0, [r7, #28]
    a7e2:	4b3f      	ldr	r3, [pc, #252]	; (a8e0 <_usb_d_dev_handle_trfail+0x1b8>)
    a7e4:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a7e6:	78fb      	ldrb	r3, [r7, #3]
    a7e8:	2b00      	cmp	r3, #0
    a7ea:	bf14      	ite	ne
    a7ec:	2301      	movne	r3, #1
    a7ee:	2300      	moveq	r3, #0
    a7f0:	b2db      	uxtb	r3, r3
    a7f2:	2204      	movs	r2, #4
    a7f4:	4619      	mov	r1, r3
    a7f6:	6878      	ldr	r0, [r7, #4]
    a7f8:	4b3a      	ldr	r3, [pc, #232]	; (a8e4 <_usb_d_dev_handle_trfail+0x1bc>)
    a7fa:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a7fc:	e062      	b.n	a8c4 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a7fe:	7b3b      	ldrb	r3, [r7, #12]
    a800:	f003 0302 	and.w	r3, r3, #2
    a804:	b2db      	uxtb	r3, r3
    a806:	2b00      	cmp	r3, #0
    a808:	d040      	beq.n	a88c <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a80a:	78fb      	ldrb	r3, [r7, #3]
    a80c:	011b      	lsls	r3, r3, #4
    a80e:	697a      	ldr	r2, [r7, #20]
    a810:	441a      	add	r2, r3
    a812:	7a93      	ldrb	r3, [r2, #10]
    a814:	f36f 0341 	bfc	r3, #1, #1
    a818:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a81a:	78fb      	ldrb	r3, [r7, #3]
    a81c:	f107 0220 	add.w	r2, r7, #32
    a820:	4413      	add	r3, r2
    a822:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a826:	7efb      	ldrb	r3, [r7, #27]
    a828:	4619      	mov	r1, r3
    a82a:	69f8      	ldr	r0, [r7, #28]
    a82c:	4b2b      	ldr	r3, [pc, #172]	; (a8dc <_usb_d_dev_handle_trfail+0x1b4>)
    a82e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a830:	78fb      	ldrb	r3, [r7, #3]
    a832:	f107 0220 	add.w	r2, r7, #32
    a836:	4413      	add	r3, r2
    a838:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a83c:	7efb      	ldrb	r3, [r7, #27]
    a83e:	4619      	mov	r1, r3
    a840:	69f8      	ldr	r0, [r7, #28]
    a842:	4b27      	ldr	r3, [pc, #156]	; (a8e0 <_usb_d_dev_handle_trfail+0x1b8>)
    a844:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a846:	7cbb      	ldrb	r3, [r7, #18]
    a848:	2b00      	cmp	r3, #0
    a84a:	d03b      	beq.n	a8c4 <_usb_d_dev_handle_trfail+0x19c>
    a84c:	687b      	ldr	r3, [r7, #4]
    a84e:	7cdb      	ldrb	r3, [r3, #19]
    a850:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a854:	b2db      	uxtb	r3, r3
    a856:	2b00      	cmp	r3, #0
    a858:	d034      	beq.n	a8c4 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a85a:	687b      	ldr	r3, [r7, #4]
    a85c:	7cdb      	ldrb	r3, [r3, #19]
    a85e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a862:	b2db      	uxtb	r3, r3
    a864:	461a      	mov	r2, r3
    a866:	78fb      	ldrb	r3, [r7, #3]
    a868:	4293      	cmp	r3, r2
    a86a:	d02b      	beq.n	a8c4 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a86c:	687b      	ldr	r3, [r7, #4]
    a86e:	7cdb      	ldrb	r3, [r3, #19]
    a870:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a874:	b2db      	uxtb	r3, r3
    a876:	2b00      	cmp	r3, #0
    a878:	bf14      	ite	ne
    a87a:	2301      	movne	r3, #1
    a87c:	2300      	moveq	r3, #0
    a87e:	b2db      	uxtb	r3, r3
    a880:	2200      	movs	r2, #0
    a882:	4619      	mov	r1, r3
    a884:	6878      	ldr	r0, [r7, #4]
    a886:	4b17      	ldr	r3, [pc, #92]	; (a8e4 <_usb_d_dev_handle_trfail+0x1bc>)
    a888:	4798      	blx	r3
}
    a88a:	e01b      	b.n	a8c4 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a88c:	78fa      	ldrb	r2, [r7, #3]
    a88e:	7efb      	ldrb	r3, [r7, #27]
    a890:	4611      	mov	r1, r2
    a892:	4618      	mov	r0, r3
    a894:	4b14      	ldr	r3, [pc, #80]	; (a8e8 <_usb_d_dev_handle_trfail+0x1c0>)
    a896:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a898:	78fb      	ldrb	r3, [r7, #3]
    a89a:	f107 0220 	add.w	r2, r7, #32
    a89e:	4413      	add	r3, r2
    a8a0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a8a4:	7efb      	ldrb	r3, [r7, #27]
    a8a6:	4619      	mov	r1, r3
    a8a8:	69f8      	ldr	r0, [r7, #28]
    a8aa:	4b0c      	ldr	r3, [pc, #48]	; (a8dc <_usb_d_dev_handle_trfail+0x1b4>)
    a8ac:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a8ae:	78fb      	ldrb	r3, [r7, #3]
    a8b0:	f107 0220 	add.w	r2, r7, #32
    a8b4:	4413      	add	r3, r2
    a8b6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a8ba:	7efb      	ldrb	r3, [r7, #27]
    a8bc:	4619      	mov	r1, r3
    a8be:	69f8      	ldr	r0, [r7, #28]
    a8c0:	4b07      	ldr	r3, [pc, #28]	; (a8e0 <_usb_d_dev_handle_trfail+0x1b8>)
    a8c2:	4798      	blx	r3
}
    a8c4:	bf00      	nop
    a8c6:	3720      	adds	r7, #32
    a8c8:	46bd      	mov	sp, r7
    a8ca:	bd80      	pop	{r7, pc}
    a8cc:	000101bc 	.word	0x000101bc
    a8d0:	20000db4 	.word	0x20000db4
    a8d4:	00009491 	.word	0x00009491
    a8d8:	00009461 	.word	0x00009461
    a8dc:	00009335 	.word	0x00009335
    a8e0:	00009435 	.word	0x00009435
    a8e4:	0000b4a1 	.word	0x0000b4a1
    a8e8:	00009d1d 	.word	0x00009d1d

0000a8ec <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a8ec:	b580      	push	{r7, lr}
    a8ee:	b082      	sub	sp, #8
    a8f0:	af00      	add	r7, sp, #0
    a8f2:	6078      	str	r0, [r7, #4]
    a8f4:	460b      	mov	r3, r1
    a8f6:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a8f8:	78fb      	ldrb	r3, [r7, #3]
    a8fa:	f003 0310 	and.w	r3, r3, #16
    a8fe:	2b00      	cmp	r3, #0
    a900:	d003      	beq.n	a90a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a902:	6878      	ldr	r0, [r7, #4]
    a904:	4b0c      	ldr	r3, [pc, #48]	; (a938 <_usb_d_dev_trans_setup_isr+0x4c>)
    a906:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a908:	e012      	b.n	a930 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a90a:	78fb      	ldrb	r3, [r7, #3]
    a90c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a910:	2b00      	cmp	r3, #0
    a912:	d004      	beq.n	a91e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a914:	2101      	movs	r1, #1
    a916:	6878      	ldr	r0, [r7, #4]
    a918:	4b08      	ldr	r3, [pc, #32]	; (a93c <_usb_d_dev_trans_setup_isr+0x50>)
    a91a:	4798      	blx	r3
}
    a91c:	e008      	b.n	a930 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a91e:	78fb      	ldrb	r3, [r7, #3]
    a920:	f003 0320 	and.w	r3, r3, #32
    a924:	2b00      	cmp	r3, #0
    a926:	d003      	beq.n	a930 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a928:	2100      	movs	r1, #0
    a92a:	6878      	ldr	r0, [r7, #4]
    a92c:	4b03      	ldr	r3, [pc, #12]	; (a93c <_usb_d_dev_trans_setup_isr+0x50>)
    a92e:	4798      	blx	r3
}
    a930:	bf00      	nop
    a932:	3708      	adds	r7, #8
    a934:	46bd      	mov	sp, r7
    a936:	bd80      	pop	{r7, pc}
    a938:	0000a60d 	.word	0x0000a60d
    a93c:	0000a6e5 	.word	0x0000a6e5

0000a940 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a940:	b580      	push	{r7, lr}
    a942:	b082      	sub	sp, #8
    a944:	af00      	add	r7, sp, #0
    a946:	6078      	str	r0, [r7, #4]
    a948:	460b      	mov	r3, r1
    a94a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a94c:	78fb      	ldrb	r3, [r7, #3]
    a94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a952:	2b00      	cmp	r3, #0
    a954:	d004      	beq.n	a960 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a956:	2101      	movs	r1, #1
    a958:	6878      	ldr	r0, [r7, #4]
    a95a:	4b1a      	ldr	r3, [pc, #104]	; (a9c4 <_usb_d_dev_trans_in_isr+0x84>)
    a95c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a95e:	e02c      	b.n	a9ba <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a960:	78fb      	ldrb	r3, [r7, #3]
    a962:	f003 0308 	and.w	r3, r3, #8
    a966:	2b00      	cmp	r3, #0
    a968:	d004      	beq.n	a974 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a96a:	2101      	movs	r1, #1
    a96c:	6878      	ldr	r0, [r7, #4]
    a96e:	4b16      	ldr	r3, [pc, #88]	; (a9c8 <_usb_d_dev_trans_in_isr+0x88>)
    a970:	4798      	blx	r3
}
    a972:	e022      	b.n	a9ba <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a974:	78fb      	ldrb	r3, [r7, #3]
    a976:	f003 0302 	and.w	r3, r3, #2
    a97a:	2b00      	cmp	r3, #0
    a97c:	d004      	beq.n	a988 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a97e:	2101      	movs	r1, #1
    a980:	6878      	ldr	r0, [r7, #4]
    a982:	4b12      	ldr	r3, [pc, #72]	; (a9cc <_usb_d_dev_trans_in_isr+0x8c>)
    a984:	4798      	blx	r3
}
    a986:	e018      	b.n	a9ba <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a988:	687b      	ldr	r3, [r7, #4]
    a98a:	7cdb      	ldrb	r3, [r3, #19]
    a98c:	f003 0307 	and.w	r3, r3, #7
    a990:	b2db      	uxtb	r3, r3
    a992:	2b01      	cmp	r3, #1
    a994:	d111      	bne.n	a9ba <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a996:	78fb      	ldrb	r3, [r7, #3]
    a998:	f003 0304 	and.w	r3, r3, #4
    a99c:	2b00      	cmp	r3, #0
    a99e:	d004      	beq.n	a9aa <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a9a0:	2100      	movs	r1, #0
    a9a2:	6878      	ldr	r0, [r7, #4]
    a9a4:	4b08      	ldr	r3, [pc, #32]	; (a9c8 <_usb_d_dev_trans_in_isr+0x88>)
    a9a6:	4798      	blx	r3
}
    a9a8:	e007      	b.n	a9ba <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a9aa:	78fb      	ldrb	r3, [r7, #3]
    a9ac:	f003 0310 	and.w	r3, r3, #16
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	d002      	beq.n	a9ba <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a9b4:	6878      	ldr	r0, [r7, #4]
    a9b6:	4b06      	ldr	r3, [pc, #24]	; (a9d0 <_usb_d_dev_trans_in_isr+0x90>)
    a9b8:	4798      	blx	r3
}
    a9ba:	bf00      	nop
    a9bc:	3708      	adds	r7, #8
    a9be:	46bd      	mov	sp, r7
    a9c0:	bd80      	pop	{r7, pc}
    a9c2:	bf00      	nop
    a9c4:	0000a6e5 	.word	0x0000a6e5
    a9c8:	0000a729 	.word	0x0000a729
    a9cc:	0000a131 	.word	0x0000a131
    a9d0:	0000a60d 	.word	0x0000a60d

0000a9d4 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a9d4:	b580      	push	{r7, lr}
    a9d6:	b082      	sub	sp, #8
    a9d8:	af00      	add	r7, sp, #0
    a9da:	6078      	str	r0, [r7, #4]
    a9dc:	460b      	mov	r3, r1
    a9de:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a9e0:	78fb      	ldrb	r3, [r7, #3]
    a9e2:	f003 0320 	and.w	r3, r3, #32
    a9e6:	2b00      	cmp	r3, #0
    a9e8:	d004      	beq.n	a9f4 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a9ea:	2100      	movs	r1, #0
    a9ec:	6878      	ldr	r0, [r7, #4]
    a9ee:	4b1a      	ldr	r3, [pc, #104]	; (aa58 <_usb_d_dev_trans_out_isr+0x84>)
    a9f0:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a9f2:	e02c      	b.n	aa4e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a9f4:	78fb      	ldrb	r3, [r7, #3]
    a9f6:	f003 0304 	and.w	r3, r3, #4
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	d004      	beq.n	aa08 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a9fe:	2100      	movs	r1, #0
    aa00:	6878      	ldr	r0, [r7, #4]
    aa02:	4b16      	ldr	r3, [pc, #88]	; (aa5c <_usb_d_dev_trans_out_isr+0x88>)
    aa04:	4798      	blx	r3
}
    aa06:	e022      	b.n	aa4e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    aa08:	78fb      	ldrb	r3, [r7, #3]
    aa0a:	f003 0301 	and.w	r3, r3, #1
    aa0e:	2b00      	cmp	r3, #0
    aa10:	d004      	beq.n	aa1c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    aa12:	2101      	movs	r1, #1
    aa14:	6878      	ldr	r0, [r7, #4]
    aa16:	4b12      	ldr	r3, [pc, #72]	; (aa60 <_usb_d_dev_trans_out_isr+0x8c>)
    aa18:	4798      	blx	r3
}
    aa1a:	e018      	b.n	aa4e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    aa1c:	687b      	ldr	r3, [r7, #4]
    aa1e:	7cdb      	ldrb	r3, [r3, #19]
    aa20:	f003 0307 	and.w	r3, r3, #7
    aa24:	b2db      	uxtb	r3, r3
    aa26:	2b01      	cmp	r3, #1
    aa28:	d111      	bne.n	aa4e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    aa2a:	78fb      	ldrb	r3, [r7, #3]
    aa2c:	f003 0308 	and.w	r3, r3, #8
    aa30:	2b00      	cmp	r3, #0
    aa32:	d004      	beq.n	aa3e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    aa34:	2101      	movs	r1, #1
    aa36:	6878      	ldr	r0, [r7, #4]
    aa38:	4b08      	ldr	r3, [pc, #32]	; (aa5c <_usb_d_dev_trans_out_isr+0x88>)
    aa3a:	4798      	blx	r3
}
    aa3c:	e007      	b.n	aa4e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    aa3e:	78fb      	ldrb	r3, [r7, #3]
    aa40:	f003 0310 	and.w	r3, r3, #16
    aa44:	2b00      	cmp	r3, #0
    aa46:	d002      	beq.n	aa4e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    aa48:	6878      	ldr	r0, [r7, #4]
    aa4a:	4b06      	ldr	r3, [pc, #24]	; (aa64 <_usb_d_dev_trans_out_isr+0x90>)
    aa4c:	4798      	blx	r3
}
    aa4e:	bf00      	nop
    aa50:	3708      	adds	r7, #8
    aa52:	46bd      	mov	sp, r7
    aa54:	bd80      	pop	{r7, pc}
    aa56:	bf00      	nop
    aa58:	0000a6e5 	.word	0x0000a6e5
    aa5c:	0000a729 	.word	0x0000a729
    aa60:	0000a349 	.word	0x0000a349
    aa64:	0000a60d 	.word	0x0000a60d

0000aa68 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    aa68:	b580      	push	{r7, lr}
    aa6a:	b084      	sub	sp, #16
    aa6c:	af00      	add	r7, sp, #0
    aa6e:	6078      	str	r0, [r7, #4]
    aa70:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    aa72:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa76:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aa78:	683b      	ldr	r3, [r7, #0]
    aa7a:	7c9b      	ldrb	r3, [r3, #18]
    aa7c:	f003 030f 	and.w	r3, r3, #15
    aa80:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    aa82:	7afb      	ldrb	r3, [r7, #11]
    aa84:	2201      	movs	r2, #1
    aa86:	409a      	lsls	r2, r3
    aa88:	687b      	ldr	r3, [r7, #4]
    aa8a:	4013      	ands	r3, r2
    aa8c:	2b00      	cmp	r3, #0
    aa8e:	d03d      	beq.n	ab0c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    aa90:	7afb      	ldrb	r3, [r7, #11]
    aa92:	68fa      	ldr	r2, [r7, #12]
    aa94:	3308      	adds	r3, #8
    aa96:	015b      	lsls	r3, r3, #5
    aa98:	4413      	add	r3, r2
    aa9a:	3307      	adds	r3, #7
    aa9c:	781b      	ldrb	r3, [r3, #0]
    aa9e:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    aaa0:	7afb      	ldrb	r3, [r7, #11]
    aaa2:	68fa      	ldr	r2, [r7, #12]
    aaa4:	015b      	lsls	r3, r3, #5
    aaa6:	4413      	add	r3, r2
    aaa8:	f203 1309 	addw	r3, r3, #265	; 0x109
    aaac:	781b      	ldrb	r3, [r3, #0]
    aaae:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    aab0:	7aba      	ldrb	r2, [r7, #10]
    aab2:	7a7b      	ldrb	r3, [r7, #9]
    aab4:	4013      	ands	r3, r2
    aab6:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    aab8:	7abb      	ldrb	r3, [r7, #10]
    aaba:	2b00      	cmp	r3, #0
    aabc:	d027      	beq.n	ab0e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    aabe:	683b      	ldr	r3, [r7, #0]
    aac0:	7cdb      	ldrb	r3, [r3, #19]
    aac2:	f003 0307 	and.w	r3, r3, #7
    aac6:	b2db      	uxtb	r3, r3
    aac8:	2b01      	cmp	r3, #1
    aaca:	d10c      	bne.n	aae6 <_usb_d_dev_handle_eps+0x7e>
    aacc:	683b      	ldr	r3, [r7, #0]
    aace:	7cdb      	ldrb	r3, [r3, #19]
    aad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aad4:	b2db      	uxtb	r3, r3
    aad6:	2b00      	cmp	r3, #0
    aad8:	d105      	bne.n	aae6 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    aada:	7abb      	ldrb	r3, [r7, #10]
    aadc:	4619      	mov	r1, r3
    aade:	6838      	ldr	r0, [r7, #0]
    aae0:	4b0c      	ldr	r3, [pc, #48]	; (ab14 <_usb_d_dev_handle_eps+0xac>)
    aae2:	4798      	blx	r3
    aae4:	e013      	b.n	ab0e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    aae6:	683b      	ldr	r3, [r7, #0]
    aae8:	7cdb      	ldrb	r3, [r3, #19]
    aaea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    aaee:	b2db      	uxtb	r3, r3
    aaf0:	2b00      	cmp	r3, #0
    aaf2:	d005      	beq.n	ab00 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    aaf4:	7abb      	ldrb	r3, [r7, #10]
    aaf6:	4619      	mov	r1, r3
    aaf8:	6838      	ldr	r0, [r7, #0]
    aafa:	4b07      	ldr	r3, [pc, #28]	; (ab18 <_usb_d_dev_handle_eps+0xb0>)
    aafc:	4798      	blx	r3
    aafe:	e006      	b.n	ab0e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    ab00:	7abb      	ldrb	r3, [r7, #10]
    ab02:	4619      	mov	r1, r3
    ab04:	6838      	ldr	r0, [r7, #0]
    ab06:	4b05      	ldr	r3, [pc, #20]	; (ab1c <_usb_d_dev_handle_eps+0xb4>)
    ab08:	4798      	blx	r3
    ab0a:	e000      	b.n	ab0e <_usb_d_dev_handle_eps+0xa6>
		return;
    ab0c:	bf00      	nop
		}
	}
}
    ab0e:	3710      	adds	r7, #16
    ab10:	46bd      	mov	sp, r7
    ab12:	bd80      	pop	{r7, pc}
    ab14:	0000a8ed 	.word	0x0000a8ed
    ab18:	0000a941 	.word	0x0000a941
    ab1c:	0000a9d5 	.word	0x0000a9d5

0000ab20 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    ab20:	b580      	push	{r7, lr}
    ab22:	b084      	sub	sp, #16
    ab24:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ab26:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ab2a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    ab2c:	68bb      	ldr	r3, [r7, #8]
    ab2e:	8c1b      	ldrh	r3, [r3, #32]
    ab30:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    ab32:	88fb      	ldrh	r3, [r7, #6]
    ab34:	2b00      	cmp	r3, #0
    ab36:	d104      	bne.n	ab42 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    ab38:	4b13      	ldr	r3, [pc, #76]	; (ab88 <_usb_d_dev_handler+0x68>)
    ab3a:	4798      	blx	r3
    ab3c:	4603      	mov	r3, r0
    ab3e:	2b00      	cmp	r3, #0
    ab40:	d11e      	bne.n	ab80 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    ab42:	2300      	movs	r3, #0
    ab44:	73fb      	strb	r3, [r7, #15]
    ab46:	e017      	b.n	ab78 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    ab48:	7bfa      	ldrb	r2, [r7, #15]
    ab4a:	4613      	mov	r3, r2
    ab4c:	009b      	lsls	r3, r3, #2
    ab4e:	4413      	add	r3, r2
    ab50:	009b      	lsls	r3, r3, #2
    ab52:	3310      	adds	r3, #16
    ab54:	4a0d      	ldr	r2, [pc, #52]	; (ab8c <_usb_d_dev_handler+0x6c>)
    ab56:	4413      	add	r3, r2
    ab58:	3304      	adds	r3, #4
    ab5a:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    ab5c:	683b      	ldr	r3, [r7, #0]
    ab5e:	7c9b      	ldrb	r3, [r3, #18]
    ab60:	2bff      	cmp	r3, #255	; 0xff
    ab62:	d005      	beq.n	ab70 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    ab64:	88fb      	ldrh	r3, [r7, #6]
    ab66:	6839      	ldr	r1, [r7, #0]
    ab68:	4618      	mov	r0, r3
    ab6a:	4b09      	ldr	r3, [pc, #36]	; (ab90 <_usb_d_dev_handler+0x70>)
    ab6c:	4798      	blx	r3
    ab6e:	e000      	b.n	ab72 <_usb_d_dev_handler+0x52>
			continue;
    ab70:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    ab72:	7bfb      	ldrb	r3, [r7, #15]
    ab74:	3301      	adds	r3, #1
    ab76:	73fb      	strb	r3, [r7, #15]
    ab78:	7bfb      	ldrb	r3, [r7, #15]
    ab7a:	2b08      	cmp	r3, #8
    ab7c:	d9e4      	bls.n	ab48 <_usb_d_dev_handler+0x28>
    ab7e:	e000      	b.n	ab82 <_usb_d_dev_handler+0x62>
			return;
    ab80:	bf00      	nop
	}
}
    ab82:	3710      	adds	r7, #16
    ab84:	46bd      	mov	sp, r7
    ab86:	bd80      	pop	{r7, pc}
    ab88:	0000a079 	.word	0x0000a079
    ab8c:	20000cec 	.word	0x20000cec
    ab90:	0000aa69 	.word	0x0000aa69

0000ab94 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    ab94:	b580      	push	{r7, lr}
    ab96:	b082      	sub	sp, #8
    ab98:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    ab9a:	2300      	movs	r3, #0
    ab9c:	71fb      	strb	r3, [r7, #7]
    ab9e:	e023      	b.n	abe8 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    aba0:	79fa      	ldrb	r2, [r7, #7]
    aba2:	4613      	mov	r3, r2
    aba4:	009b      	lsls	r3, r3, #2
    aba6:	4413      	add	r3, r2
    aba8:	009b      	lsls	r3, r3, #2
    abaa:	3310      	adds	r3, #16
    abac:	4a14      	ldr	r2, [pc, #80]	; (ac00 <_usb_d_dev_reset_epts+0x6c>)
    abae:	4413      	add	r3, r2
    abb0:	3304      	adds	r3, #4
    abb2:	2103      	movs	r1, #3
    abb4:	4618      	mov	r0, r3
    abb6:	4b13      	ldr	r3, [pc, #76]	; (ac04 <_usb_d_dev_reset_epts+0x70>)
    abb8:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    abba:	79fa      	ldrb	r2, [r7, #7]
    abbc:	4910      	ldr	r1, [pc, #64]	; (ac00 <_usb_d_dev_reset_epts+0x6c>)
    abbe:	4613      	mov	r3, r2
    abc0:	009b      	lsls	r3, r3, #2
    abc2:	4413      	add	r3, r2
    abc4:	009b      	lsls	r3, r3, #2
    abc6:	440b      	add	r3, r1
    abc8:	3326      	adds	r3, #38	; 0x26
    abca:	22ff      	movs	r2, #255	; 0xff
    abcc:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    abce:	79fa      	ldrb	r2, [r7, #7]
    abd0:	490b      	ldr	r1, [pc, #44]	; (ac00 <_usb_d_dev_reset_epts+0x6c>)
    abd2:	4613      	mov	r3, r2
    abd4:	009b      	lsls	r3, r3, #2
    abd6:	4413      	add	r3, r2
    abd8:	009b      	lsls	r3, r3, #2
    abda:	440b      	add	r3, r1
    abdc:	3327      	adds	r3, #39	; 0x27
    abde:	2200      	movs	r2, #0
    abe0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    abe2:	79fb      	ldrb	r3, [r7, #7]
    abe4:	3301      	adds	r3, #1
    abe6:	71fb      	strb	r3, [r7, #7]
    abe8:	79fb      	ldrb	r3, [r7, #7]
    abea:	2b08      	cmp	r3, #8
    abec:	d9d8      	bls.n	aba0 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    abee:	22a0      	movs	r2, #160	; 0xa0
    abf0:	2100      	movs	r1, #0
    abf2:	4805      	ldr	r0, [pc, #20]	; (ac08 <_usb_d_dev_reset_epts+0x74>)
    abf4:	4b05      	ldr	r3, [pc, #20]	; (ac0c <_usb_d_dev_reset_epts+0x78>)
    abf6:	4798      	blx	r3
}
    abf8:	bf00      	nop
    abfa:	3708      	adds	r7, #8
    abfc:	46bd      	mov	sp, r7
    abfe:	bd80      	pop	{r7, pc}
    ac00:	20000cec 	.word	0x20000cec
    ac04:	0000b459 	.word	0x0000b459
    ac08:	20000db4 	.word	0x20000db4
    ac0c:	0000fc55 	.word	0x0000fc55

0000ac10 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    ac10:	b580      	push	{r7, lr}
    ac12:	b084      	sub	sp, #16
    ac14:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    ac16:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ac1a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    ac1c:	2301      	movs	r3, #1
    ac1e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    ac20:	2304      	movs	r3, #4
    ac22:	713b      	strb	r3, [r7, #4]
    ac24:	2300      	movs	r3, #0
    ac26:	717b      	strb	r3, [r7, #5]
    ac28:	2300      	movs	r3, #0
    ac2a:	71bb      	strb	r3, [r7, #6]
    ac2c:	2300      	movs	r3, #0
    ac2e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    ac30:	2101      	movs	r1, #1
    ac32:	68f8      	ldr	r0, [r7, #12]
    ac34:	4b26      	ldr	r3, [pc, #152]	; (acd0 <_usb_d_dev_init+0xc0>)
    ac36:	4798      	blx	r3
    ac38:	4603      	mov	r3, r0
    ac3a:	f083 0301 	eor.w	r3, r3, #1
    ac3e:	b2db      	uxtb	r3, r3
    ac40:	2b00      	cmp	r3, #0
    ac42:	d011      	beq.n	ac68 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    ac44:	2102      	movs	r1, #2
    ac46:	68f8      	ldr	r0, [r7, #12]
    ac48:	4b22      	ldr	r3, [pc, #136]	; (acd4 <_usb_d_dev_init+0xc4>)
    ac4a:	4798      	blx	r3
    ac4c:	4603      	mov	r3, r0
    ac4e:	2b00      	cmp	r3, #0
    ac50:	d006      	beq.n	ac60 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    ac52:	68f8      	ldr	r0, [r7, #12]
    ac54:	4b20      	ldr	r3, [pc, #128]	; (acd8 <_usb_d_dev_init+0xc8>)
    ac56:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    ac58:	2102      	movs	r1, #2
    ac5a:	68f8      	ldr	r0, [r7, #12]
    ac5c:	4b1f      	ldr	r3, [pc, #124]	; (acdc <_usb_d_dev_init+0xcc>)
    ac5e:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    ac60:	2101      	movs	r1, #1
    ac62:	68f8      	ldr	r0, [r7, #12]
    ac64:	4b1e      	ldr	r3, [pc, #120]	; (ace0 <_usb_d_dev_init+0xd0>)
    ac66:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    ac68:	2101      	movs	r1, #1
    ac6a:	68f8      	ldr	r0, [r7, #12]
    ac6c:	4b1b      	ldr	r3, [pc, #108]	; (acdc <_usb_d_dev_init+0xcc>)
    ac6e:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    ac70:	4b1c      	ldr	r3, [pc, #112]	; (ace4 <_usb_d_dev_init+0xd4>)
    ac72:	4a1d      	ldr	r2, [pc, #116]	; (ace8 <_usb_d_dev_init+0xd8>)
    ac74:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    ac76:	4b1b      	ldr	r3, [pc, #108]	; (ace4 <_usb_d_dev_init+0xd4>)
    ac78:	4a1b      	ldr	r2, [pc, #108]	; (ace8 <_usb_d_dev_init+0xd8>)
    ac7a:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    ac7c:	4b19      	ldr	r3, [pc, #100]	; (ace4 <_usb_d_dev_init+0xd4>)
    ac7e:	4a1a      	ldr	r2, [pc, #104]	; (ace8 <_usb_d_dev_init+0xd8>)
    ac80:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    ac82:	4b18      	ldr	r3, [pc, #96]	; (ace4 <_usb_d_dev_init+0xd4>)
    ac84:	4a18      	ldr	r2, [pc, #96]	; (ace8 <_usb_d_dev_init+0xd8>)
    ac86:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    ac88:	4b16      	ldr	r3, [pc, #88]	; (ace4 <_usb_d_dev_init+0xd4>)
    ac8a:	4a17      	ldr	r2, [pc, #92]	; (ace8 <_usb_d_dev_init+0xd8>)
    ac8c:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    ac8e:	4b17      	ldr	r3, [pc, #92]	; (acec <_usb_d_dev_init+0xdc>)
    ac90:	4798      	blx	r3

	_usb_load_calib();
    ac92:	4b17      	ldr	r3, [pc, #92]	; (acf0 <_usb_d_dev_init+0xe0>)
    ac94:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    ac96:	2104      	movs	r1, #4
    ac98:	68f8      	ldr	r0, [r7, #12]
    ac9a:	4b11      	ldr	r3, [pc, #68]	; (ace0 <_usb_d_dev_init+0xd0>)
    ac9c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    ac9e:	4b15      	ldr	r3, [pc, #84]	; (acf4 <_usb_d_dev_init+0xe4>)
    aca0:	4619      	mov	r1, r3
    aca2:	68f8      	ldr	r0, [r7, #12]
    aca4:	4b14      	ldr	r3, [pc, #80]	; (acf8 <_usb_d_dev_init+0xe8>)
    aca6:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    aca8:	7afb      	ldrb	r3, [r7, #11]
    acaa:	f107 0210 	add.w	r2, r7, #16
    acae:	4413      	add	r3, r2
    acb0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    acb4:	f043 0301 	orr.w	r3, r3, #1
    acb8:	b2db      	uxtb	r3, r3
    acba:	b29b      	uxth	r3, r3
    acbc:	4619      	mov	r1, r3
    acbe:	68f8      	ldr	r0, [r7, #12]
    acc0:	4b0e      	ldr	r3, [pc, #56]	; (acfc <_usb_d_dev_init+0xec>)
    acc2:	4798      	blx	r3

	return ERR_NONE;
    acc4:	2300      	movs	r3, #0
}
    acc6:	4618      	mov	r0, r3
    acc8:	3710      	adds	r7, #16
    acca:	46bd      	mov	sp, r7
    accc:	bd80      	pop	{r7, pc}
    acce:	bf00      	nop
    acd0:	000092a9 	.word	0x000092a9
    acd4:	000095f9 	.word	0x000095f9
    acd8:	000095cd 	.word	0x000095cd
    acdc:	0000927f 	.word	0x0000927f
    ace0:	00009629 	.word	0x00009629
    ace4:	20000cec 	.word	0x20000cec
    ace8:	000096f1 	.word	0x000096f1
    acec:	0000ab95 	.word	0x0000ab95
    acf0:	00009709 	.word	0x00009709
    acf4:	20000db4 	.word	0x20000db4
    acf8:	000096d5 	.word	0x000096d5
    acfc:	00009699 	.word	0x00009699

0000ad00 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    ad00:	b580      	push	{r7, lr}
    ad02:	b082      	sub	sp, #8
    ad04:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ad06:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ad0a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    ad0c:	2103      	movs	r1, #3
    ad0e:	6878      	ldr	r0, [r7, #4]
    ad10:	4b17      	ldr	r3, [pc, #92]	; (ad70 <_usb_d_dev_enable+0x70>)
    ad12:	4798      	blx	r3
    ad14:	4603      	mov	r3, r0
    ad16:	2b00      	cmp	r3, #0
    ad18:	d002      	beq.n	ad20 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    ad1a:	f06f 0310 	mvn.w	r3, #16
    ad1e:	e023      	b.n	ad68 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    ad20:	6878      	ldr	r0, [r7, #4]
    ad22:	4b14      	ldr	r3, [pc, #80]	; (ad74 <_usb_d_dev_enable+0x74>)
    ad24:	4798      	blx	r3
    ad26:	4603      	mov	r3, r0
    ad28:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    ad2a:	78fb      	ldrb	r3, [r7, #3]
    ad2c:	f003 0302 	and.w	r3, r3, #2
    ad30:	2b00      	cmp	r3, #0
    ad32:	d107      	bne.n	ad44 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    ad34:	78fb      	ldrb	r3, [r7, #3]
    ad36:	f043 0302 	orr.w	r3, r3, #2
    ad3a:	b2db      	uxtb	r3, r3
    ad3c:	4619      	mov	r1, r3
    ad3e:	6878      	ldr	r0, [r7, #4]
    ad40:	4b0d      	ldr	r3, [pc, #52]	; (ad78 <_usb_d_dev_enable+0x78>)
    ad42:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    ad44:	2050      	movs	r0, #80	; 0x50
    ad46:	4b0d      	ldr	r3, [pc, #52]	; (ad7c <_usb_d_dev_enable+0x7c>)
    ad48:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    ad4a:	2051      	movs	r0, #81	; 0x51
    ad4c:	4b0b      	ldr	r3, [pc, #44]	; (ad7c <_usb_d_dev_enable+0x7c>)
    ad4e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    ad50:	2052      	movs	r0, #82	; 0x52
    ad52:	4b0a      	ldr	r3, [pc, #40]	; (ad7c <_usb_d_dev_enable+0x7c>)
    ad54:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    ad56:	2053      	movs	r0, #83	; 0x53
    ad58:	4b08      	ldr	r3, [pc, #32]	; (ad7c <_usb_d_dev_enable+0x7c>)
    ad5a:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    ad5c:	f240 218d 	movw	r1, #653	; 0x28d
    ad60:	6878      	ldr	r0, [r7, #4]
    ad62:	4b07      	ldr	r3, [pc, #28]	; (ad80 <_usb_d_dev_enable+0x80>)
    ad64:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    ad66:	2300      	movs	r3, #0
}
    ad68:	4618      	mov	r0, r3
    ad6a:	3708      	adds	r7, #8
    ad6c:	46bd      	mov	sp, r7
    ad6e:	bd80      	pop	{r7, pc}
    ad70:	000095a3 	.word	0x000095a3
    ad74:	00009651 	.word	0x00009651
    ad78:	00009629 	.word	0x00009629
    ad7c:	000091b5 	.word	0x000091b5
    ad80:	0000954d 	.word	0x0000954d

0000ad84 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    ad84:	b580      	push	{r7, lr}
    ad86:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    ad88:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ad8c:	4b01      	ldr	r3, [pc, #4]	; (ad94 <_usb_d_dev_attach+0x10>)
    ad8e:	4798      	blx	r3
}
    ad90:	bf00      	nop
    ad92:	bd80      	pop	{r7, pc}
    ad94:	00009675 	.word	0x00009675

0000ad98 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    ad98:	b580      	push	{r7, lr}
    ad9a:	b082      	sub	sp, #8
    ad9c:	af00      	add	r7, sp, #0
    ad9e:	4603      	mov	r3, r0
    ada0:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    ada2:	79fb      	ldrb	r3, [r7, #7]
    ada4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ada8:	b2db      	uxtb	r3, r3
    adaa:	4619      	mov	r1, r3
    adac:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    adb0:	4b02      	ldr	r3, [pc, #8]	; (adbc <_usb_d_dev_set_address+0x24>)
    adb2:	4798      	blx	r3
}
    adb4:	bf00      	nop
    adb6:	3708      	adds	r7, #8
    adb8:	46bd      	mov	sp, r7
    adba:	bd80      	pop	{r7, pc}
    adbc:	000096b7 	.word	0x000096b7

0000adc0 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    adc0:	b590      	push	{r4, r7, lr}
    adc2:	b085      	sub	sp, #20
    adc4:	af00      	add	r7, sp, #0
    adc6:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    adc8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    adcc:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    adce:	687b      	ldr	r3, [r7, #4]
    add0:	7c9b      	ldrb	r3, [r3, #18]
    add2:	f003 030f 	and.w	r3, r3, #15
    add6:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    add8:	687b      	ldr	r3, [r7, #4]
    adda:	68db      	ldr	r3, [r3, #12]
    addc:	461a      	mov	r2, r3
    adde:	7afb      	ldrb	r3, [r7, #11]
    ade0:	2100      	movs	r1, #0
    ade2:	4618      	mov	r0, r3
    ade4:	4b0f      	ldr	r3, [pc, #60]	; (ae24 <_usb_d_dev_trans_setup+0x64>)
    ade6:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    ade8:	687b      	ldr	r3, [r7, #4]
    adea:	8a1b      	ldrh	r3, [r3, #16]
    adec:	461a      	mov	r2, r3
    adee:	7af8      	ldrb	r0, [r7, #11]
    adf0:	2300      	movs	r3, #0
    adf2:	2100      	movs	r1, #0
    adf4:	4c0c      	ldr	r4, [pc, #48]	; (ae28 <_usb_d_dev_trans_setup+0x68>)
    adf6:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    adf8:	7afb      	ldrb	r3, [r7, #11]
    adfa:	22b0      	movs	r2, #176	; 0xb0
    adfc:	4619      	mov	r1, r3
    adfe:	68f8      	ldr	r0, [r7, #12]
    ae00:	4b0a      	ldr	r3, [pc, #40]	; (ae2c <_usb_d_dev_trans_setup+0x6c>)
    ae02:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    ae04:	7afb      	ldrb	r3, [r7, #11]
    ae06:	2200      	movs	r2, #0
    ae08:	2100      	movs	r1, #0
    ae0a:	4618      	mov	r0, r3
    ae0c:	4b08      	ldr	r3, [pc, #32]	; (ae30 <_usb_d_dev_trans_setup+0x70>)
    ae0e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    ae10:	7afb      	ldrb	r3, [r7, #11]
    ae12:	2210      	movs	r2, #16
    ae14:	4619      	mov	r1, r3
    ae16:	68f8      	ldr	r0, [r7, #12]
    ae18:	4b06      	ldr	r3, [pc, #24]	; (ae34 <_usb_d_dev_trans_setup+0x74>)
    ae1a:	4798      	blx	r3
}
    ae1c:	bf00      	nop
    ae1e:	3714      	adds	r7, #20
    ae20:	46bd      	mov	sp, r7
    ae22:	bd90      	pop	{r4, r7, pc}
    ae24:	00009b55 	.word	0x00009b55
    ae28:	00009cdd 	.word	0x00009cdd
    ae2c:	000093b5 	.word	0x000093b5
    ae30:	00009dad 	.word	0x00009dad
    ae34:	00009409 	.word	0x00009409

0000ae38 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    ae38:	b580      	push	{r7, lr}
    ae3a:	b088      	sub	sp, #32
    ae3c:	af00      	add	r7, sp, #0
    ae3e:	4603      	mov	r3, r0
    ae40:	71fb      	strb	r3, [r7, #7]
    ae42:	460b      	mov	r3, r1
    ae44:	71bb      	strb	r3, [r7, #6]
    ae46:	4613      	mov	r3, r2
    ae48:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    ae4a:	79fb      	ldrb	r3, [r7, #7]
    ae4c:	f003 030f 	and.w	r3, r3, #15
    ae50:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    ae52:	79fb      	ldrb	r3, [r7, #7]
    ae54:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ae58:	2b00      	cmp	r3, #0
    ae5a:	bf14      	ite	ne
    ae5c:	2301      	movne	r3, #1
    ae5e:	2300      	moveq	r3, #0
    ae60:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ae62:	7fba      	ldrb	r2, [r7, #30]
    ae64:	7ffb      	ldrb	r3, [r7, #31]
    ae66:	4611      	mov	r1, r2
    ae68:	4618      	mov	r0, r3
    ae6a:	4b3e      	ldr	r3, [pc, #248]	; (af64 <_usb_d_dev_ep_init+0x12c>)
    ae6c:	4798      	blx	r3
    ae6e:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    ae70:	79bb      	ldrb	r3, [r7, #6]
    ae72:	f003 0303 	and.w	r3, r3, #3
    ae76:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    ae78:	7ffa      	ldrb	r2, [r7, #31]
    ae7a:	4613      	mov	r3, r2
    ae7c:	005b      	lsls	r3, r3, #1
    ae7e:	4413      	add	r3, r2
    ae80:	009b      	lsls	r3, r3, #2
    ae82:	4a39      	ldr	r2, [pc, #228]	; (af68 <_usb_d_dev_ep_init+0x130>)
    ae84:	4413      	add	r3, r2
    ae86:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    ae88:	7ffb      	ldrb	r3, [r7, #31]
    ae8a:	2b04      	cmp	r3, #4
    ae8c:	d902      	bls.n	ae94 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    ae8e:	f06f 0311 	mvn.w	r3, #17
    ae92:	e063      	b.n	af5c <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    ae94:	69bb      	ldr	r3, [r7, #24]
    ae96:	7c9b      	ldrb	r3, [r3, #18]
    ae98:	2bff      	cmp	r3, #255	; 0xff
    ae9a:	d002      	beq.n	aea2 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    ae9c:	f06f 0313 	mvn.w	r3, #19
    aea0:	e05c      	b.n	af5c <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    aea2:	7dfb      	ldrb	r3, [r7, #23]
    aea4:	2b00      	cmp	r3, #0
    aea6:	d11f      	bne.n	aee8 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    aea8:	7fbb      	ldrb	r3, [r7, #30]
    aeaa:	2b00      	cmp	r3, #0
    aeac:	bf14      	ite	ne
    aeae:	2301      	movne	r3, #1
    aeb0:	2300      	moveq	r3, #0
    aeb2:	b2db      	uxtb	r3, r3
    aeb4:	f083 0301 	eor.w	r3, r3, #1
    aeb8:	b2db      	uxtb	r3, r3
    aeba:	f003 0301 	and.w	r3, r3, #1
    aebe:	b2da      	uxtb	r2, r3
    aec0:	7ffb      	ldrb	r3, [r7, #31]
    aec2:	4611      	mov	r1, r2
    aec4:	4618      	mov	r0, r3
    aec6:	4b27      	ldr	r3, [pc, #156]	; (af64 <_usb_d_dev_ep_init+0x12c>)
    aec8:	4798      	blx	r3
    aeca:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    aecc:	68fb      	ldr	r3, [r7, #12]
    aece:	7c9b      	ldrb	r3, [r3, #18]
    aed0:	2bff      	cmp	r3, #255	; 0xff
    aed2:	d002      	beq.n	aeda <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    aed4:	f06f 0313 	mvn.w	r3, #19
    aed8:	e040      	b.n	af5c <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    aeda:	693b      	ldr	r3, [r7, #16]
    aedc:	681b      	ldr	r3, [r3, #0]
    aede:	2b00      	cmp	r3, #0
    aee0:	d102      	bne.n	aee8 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    aee2:	f06f 0312 	mvn.w	r3, #18
    aee6:	e039      	b.n	af5c <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    aee8:	7fbb      	ldrb	r3, [r7, #30]
    aeea:	2b00      	cmp	r3, #0
    aeec:	d007      	beq.n	aefe <_usb_d_dev_ep_init+0xc6>
    aeee:	693b      	ldr	r3, [r7, #16]
    aef0:	685b      	ldr	r3, [r3, #4]
    aef2:	2b00      	cmp	r3, #0
    aef4:	bf14      	ite	ne
    aef6:	2301      	movne	r3, #1
    aef8:	2300      	moveq	r3, #0
    aefa:	b2db      	uxtb	r3, r3
    aefc:	e006      	b.n	af0c <_usb_d_dev_ep_init+0xd4>
    aefe:	693b      	ldr	r3, [r7, #16]
    af00:	681b      	ldr	r3, [r3, #0]
    af02:	2b00      	cmp	r3, #0
    af04:	bf14      	ite	ne
    af06:	2301      	movne	r3, #1
    af08:	2300      	moveq	r3, #0
    af0a:	b2db      	uxtb	r3, r3
    af0c:	2b00      	cmp	r3, #0
    af0e:	d00f      	beq.n	af30 <_usb_d_dev_ep_init+0xf8>
    af10:	7fbb      	ldrb	r3, [r7, #30]
    af12:	2b00      	cmp	r3, #0
    af14:	d003      	beq.n	af1e <_usb_d_dev_ep_init+0xe6>
    af16:	693b      	ldr	r3, [r7, #16]
    af18:	895b      	ldrh	r3, [r3, #10]
    af1a:	461a      	mov	r2, r3
    af1c:	e002      	b.n	af24 <_usb_d_dev_ep_init+0xec>
    af1e:	693b      	ldr	r3, [r7, #16]
    af20:	891b      	ldrh	r3, [r3, #8]
    af22:	461a      	mov	r2, r3
    af24:	88bb      	ldrh	r3, [r7, #4]
    af26:	429a      	cmp	r2, r3
    af28:	da02      	bge.n	af30 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    af2a:	f06f 0312 	mvn.w	r3, #18
    af2e:	e015      	b.n	af5c <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    af30:	7fbb      	ldrb	r3, [r7, #30]
    af32:	2b00      	cmp	r3, #0
    af34:	d002      	beq.n	af3c <_usb_d_dev_ep_init+0x104>
    af36:	693b      	ldr	r3, [r7, #16]
    af38:	685b      	ldr	r3, [r3, #4]
    af3a:	e001      	b.n	af40 <_usb_d_dev_ep_init+0x108>
    af3c:	693b      	ldr	r3, [r7, #16]
    af3e:	681b      	ldr	r3, [r3, #0]
    af40:	69ba      	ldr	r2, [r7, #24]
    af42:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    af44:	69bb      	ldr	r3, [r7, #24]
    af46:	88ba      	ldrh	r2, [r7, #4]
    af48:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    af4a:	7dfb      	ldrb	r3, [r7, #23]
    af4c:	3301      	adds	r3, #1
    af4e:	b2da      	uxtb	r2, r3
    af50:	69bb      	ldr	r3, [r7, #24]
    af52:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    af54:	69bb      	ldr	r3, [r7, #24]
    af56:	79fa      	ldrb	r2, [r7, #7]
    af58:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    af5a:	2300      	movs	r3, #0
}
    af5c:	4618      	mov	r0, r3
    af5e:	3720      	adds	r7, #32
    af60:	46bd      	mov	sp, r7
    af62:	bd80      	pop	{r7, pc}
    af64:	00009e69 	.word	0x00009e69
    af68:	00010180 	.word	0x00010180

0000af6c <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    af6c:	b580      	push	{r7, lr}
    af6e:	b086      	sub	sp, #24
    af70:	af00      	add	r7, sp, #0
    af72:	4603      	mov	r3, r0
    af74:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    af76:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    af7a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    af7c:	79fb      	ldrb	r3, [r7, #7]
    af7e:	f003 030f 	and.w	r3, r3, #15
    af82:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    af84:	79fb      	ldrb	r3, [r7, #7]
    af86:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af8a:	2b00      	cmp	r3, #0
    af8c:	bf14      	ite	ne
    af8e:	2301      	movne	r3, #1
    af90:	2300      	moveq	r3, #0
    af92:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    af94:	7cba      	ldrb	r2, [r7, #18]
    af96:	7cfb      	ldrb	r3, [r7, #19]
    af98:	4611      	mov	r1, r2
    af9a:	4618      	mov	r0, r3
    af9c:	4b2a      	ldr	r3, [pc, #168]	; (b048 <_usb_d_dev_ep_deinit+0xdc>)
    af9e:	4798      	blx	r3
    afa0:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    afa2:	7cfb      	ldrb	r3, [r7, #19]
    afa4:	2b04      	cmp	r3, #4
    afa6:	d84a      	bhi.n	b03e <_usb_d_dev_ep_deinit+0xd2>
    afa8:	68fb      	ldr	r3, [r7, #12]
    afaa:	7c9b      	ldrb	r3, [r3, #18]
    afac:	2bff      	cmp	r3, #255	; 0xff
    afae:	d046      	beq.n	b03e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    afb0:	7cbb      	ldrb	r3, [r7, #18]
    afb2:	2203      	movs	r2, #3
    afb4:	4619      	mov	r1, r3
    afb6:	68f8      	ldr	r0, [r7, #12]
    afb8:	4b24      	ldr	r3, [pc, #144]	; (b04c <_usb_d_dev_ep_deinit+0xe0>)
    afba:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    afbc:	68fb      	ldr	r3, [r7, #12]
    afbe:	7cdb      	ldrb	r3, [r3, #19]
    afc0:	f003 0307 	and.w	r3, r3, #7
    afc4:	b2db      	uxtb	r3, r3
    afc6:	2b01      	cmp	r3, #1
    afc8:	d107      	bne.n	afda <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    afca:	79fb      	ldrb	r3, [r7, #7]
    afcc:	697a      	ldr	r2, [r7, #20]
    afce:	3308      	adds	r3, #8
    afd0:	015b      	lsls	r3, r3, #5
    afd2:	4413      	add	r3, r2
    afd4:	2200      	movs	r2, #0
    afd6:	701a      	strb	r2, [r3, #0]
    afd8:	e02a      	b.n	b030 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    afda:	f997 3007 	ldrsb.w	r3, [r7, #7]
    afde:	2b00      	cmp	r3, #0
    afe0:	da15      	bge.n	b00e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    afe2:	79fb      	ldrb	r3, [r7, #7]
    afe4:	f003 030f 	and.w	r3, r3, #15
    afe8:	79fa      	ldrb	r2, [r7, #7]
    afea:	f002 020f 	and.w	r2, r2, #15
    afee:	6979      	ldr	r1, [r7, #20]
    aff0:	3208      	adds	r2, #8
    aff2:	0152      	lsls	r2, r2, #5
    aff4:	440a      	add	r2, r1
    aff6:	7812      	ldrb	r2, [r2, #0]
    aff8:	b2d2      	uxtb	r2, r2
    affa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    affe:	b2d1      	uxtb	r1, r2
    b000:	697a      	ldr	r2, [r7, #20]
    b002:	3308      	adds	r3, #8
    b004:	015b      	lsls	r3, r3, #5
    b006:	4413      	add	r3, r2
    b008:	460a      	mov	r2, r1
    b00a:	701a      	strb	r2, [r3, #0]
    b00c:	e010      	b.n	b030 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    b00e:	79fb      	ldrb	r3, [r7, #7]
    b010:	79fa      	ldrb	r2, [r7, #7]
    b012:	6979      	ldr	r1, [r7, #20]
    b014:	3208      	adds	r2, #8
    b016:	0152      	lsls	r2, r2, #5
    b018:	440a      	add	r2, r1
    b01a:	7812      	ldrb	r2, [r2, #0]
    b01c:	b2d2      	uxtb	r2, r2
    b01e:	f022 0207 	bic.w	r2, r2, #7
    b022:	b2d1      	uxtb	r1, r2
    b024:	697a      	ldr	r2, [r7, #20]
    b026:	3308      	adds	r3, #8
    b028:	015b      	lsls	r3, r3, #5
    b02a:	4413      	add	r3, r2
    b02c:	460a      	mov	r2, r1
    b02e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    b030:	68fb      	ldr	r3, [r7, #12]
    b032:	2200      	movs	r2, #0
    b034:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    b036:	68fb      	ldr	r3, [r7, #12]
    b038:	22ff      	movs	r2, #255	; 0xff
    b03a:	749a      	strb	r2, [r3, #18]
    b03c:	e000      	b.n	b040 <_usb_d_dev_ep_deinit+0xd4>
		return;
    b03e:	bf00      	nop
}
    b040:	3718      	adds	r7, #24
    b042:	46bd      	mov	sp, r7
    b044:	bd80      	pop	{r7, pc}
    b046:	bf00      	nop
    b048:	00009e69 	.word	0x00009e69
    b04c:	0000b4a1 	.word	0x0000b4a1

0000b050 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    b050:	b5b0      	push	{r4, r5, r7, lr}
    b052:	b088      	sub	sp, #32
    b054:	af00      	add	r7, sp, #0
    b056:	4603      	mov	r3, r0
    b058:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    b05a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b05e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    b060:	79fb      	ldrb	r3, [r7, #7]
    b062:	f003 030f 	and.w	r3, r3, #15
    b066:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    b068:	79fb      	ldrb	r3, [r7, #7]
    b06a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b06e:	2b00      	cmp	r3, #0
    b070:	bf14      	ite	ne
    b072:	2301      	movne	r3, #1
    b074:	2300      	moveq	r3, #0
    b076:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    b078:	7eba      	ldrb	r2, [r7, #26]
    b07a:	7efb      	ldrb	r3, [r7, #27]
    b07c:	4611      	mov	r1, r2
    b07e:	4618      	mov	r0, r3
    b080:	4b70      	ldr	r3, [pc, #448]	; (b244 <_usb_d_dev_ep_enable+0x1f4>)
    b082:	4798      	blx	r3
    b084:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    b086:	7efb      	ldrb	r3, [r7, #27]
    b088:	4619      	mov	r1, r3
    b08a:	69f8      	ldr	r0, [r7, #28]
    b08c:	4b6e      	ldr	r3, [pc, #440]	; (b248 <_usb_d_dev_ep_enable+0x1f8>)
    b08e:	4798      	blx	r3
    b090:	4603      	mov	r3, r0
    b092:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b094:	7efb      	ldrb	r3, [r7, #27]
    b096:	2b04      	cmp	r3, #4
    b098:	d803      	bhi.n	b0a2 <_usb_d_dev_ep_enable+0x52>
    b09a:	697b      	ldr	r3, [r7, #20]
    b09c:	7c9b      	ldrb	r3, [r3, #18]
    b09e:	2bff      	cmp	r3, #255	; 0xff
    b0a0:	d102      	bne.n	b0a8 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    b0a2:	f06f 0311 	mvn.w	r3, #17
    b0a6:	e0c8      	b.n	b23a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    b0a8:	7efb      	ldrb	r3, [r7, #27]
    b0aa:	015b      	lsls	r3, r3, #5
    b0ac:	4a67      	ldr	r2, [pc, #412]	; (b24c <_usb_d_dev_ep_enable+0x1fc>)
    b0ae:	4413      	add	r3, r2
    b0b0:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    b0b2:	697b      	ldr	r3, [r7, #20]
    b0b4:	7cdb      	ldrb	r3, [r3, #19]
    b0b6:	f003 0307 	and.w	r3, r3, #7
    b0ba:	b2db      	uxtb	r3, r3
    b0bc:	2b01      	cmp	r3, #1
    b0be:	d14b      	bne.n	b158 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    b0c0:	7cfb      	ldrb	r3, [r7, #19]
    b0c2:	f003 0377 	and.w	r3, r3, #119	; 0x77
    b0c6:	2b00      	cmp	r3, #0
    b0c8:	d002      	beq.n	b0d0 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    b0ca:	f06f 0313 	mvn.w	r3, #19
    b0ce:	e0b4      	b.n	b23a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    b0d0:	7efb      	ldrb	r3, [r7, #27]
    b0d2:	2211      	movs	r2, #17
    b0d4:	4619      	mov	r1, r3
    b0d6:	69f8      	ldr	r0, [r7, #28]
    b0d8:	4b5d      	ldr	r3, [pc, #372]	; (b250 <_usb_d_dev_ep_enable+0x200>)
    b0da:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b0dc:	697b      	ldr	r3, [r7, #20]
    b0de:	8a1b      	ldrh	r3, [r3, #16]
    b0e0:	039b      	lsls	r3, r3, #14
    b0e2:	4c5c      	ldr	r4, [pc, #368]	; (b254 <_usb_d_dev_ep_enable+0x204>)
    b0e4:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b0e6:	697b      	ldr	r3, [r7, #20]
    b0e8:	8a1b      	ldrh	r3, [r3, #16]
    b0ea:	4618      	mov	r0, r3
    b0ec:	4b5a      	ldr	r3, [pc, #360]	; (b258 <_usb_d_dev_ep_enable+0x208>)
    b0ee:	4798      	blx	r3
    b0f0:	4603      	mov	r3, r0
    b0f2:	071b      	lsls	r3, r3, #28
    b0f4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b0f8:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b0fc:	68fb      	ldr	r3, [r7, #12]
    b0fe:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    b100:	68fb      	ldr	r3, [r7, #12]
    b102:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b106:	697b      	ldr	r3, [r7, #20]
    b108:	8a1b      	ldrh	r3, [r3, #16]
    b10a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b10e:	697b      	ldr	r3, [r7, #20]
    b110:	8a1b      	ldrh	r3, [r3, #16]
    b112:	4618      	mov	r0, r3
    b114:	4b50      	ldr	r3, [pc, #320]	; (b258 <_usb_d_dev_ep_enable+0x208>)
    b116:	4798      	blx	r3
    b118:	4603      	mov	r3, r0
    b11a:	071b      	lsls	r3, r3, #28
    b11c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b120:	432b      	orrs	r3, r5
    b122:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b124:	7efb      	ldrb	r3, [r7, #27]
    b126:	2200      	movs	r2, #0
    b128:	2100      	movs	r1, #0
    b12a:	4618      	mov	r0, r3
    b12c:	4b4b      	ldr	r3, [pc, #300]	; (b25c <_usb_d_dev_ep_enable+0x20c>)
    b12e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    b130:	7efb      	ldrb	r3, [r7, #27]
    b132:	2200      	movs	r2, #0
    b134:	2101      	movs	r1, #1
    b136:	4618      	mov	r0, r3
    b138:	4b49      	ldr	r3, [pc, #292]	; (b260 <_usb_d_dev_ep_enable+0x210>)
    b13a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    b13c:	7efb      	ldrb	r3, [r7, #27]
    b13e:	2100      	movs	r1, #0
    b140:	4618      	mov	r0, r3
    b142:	4b48      	ldr	r3, [pc, #288]	; (b264 <_usb_d_dev_ep_enable+0x214>)
    b144:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b146:	7efb      	ldrb	r3, [r7, #27]
    b148:	2101      	movs	r1, #1
    b14a:	4618      	mov	r0, r3
    b14c:	4b45      	ldr	r3, [pc, #276]	; (b264 <_usb_d_dev_ep_enable+0x214>)
    b14e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    b150:	6978      	ldr	r0, [r7, #20]
    b152:	4b45      	ldr	r3, [pc, #276]	; (b268 <_usb_d_dev_ep_enable+0x218>)
    b154:	4798      	blx	r3
    b156:	e06f      	b.n	b238 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    b158:	7ebb      	ldrb	r3, [r7, #26]
    b15a:	2b00      	cmp	r3, #0
    b15c:	d038      	beq.n	b1d0 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    b15e:	7cfb      	ldrb	r3, [r7, #19]
    b160:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b164:	2b00      	cmp	r3, #0
    b166:	d002      	beq.n	b16e <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    b168:	f06f 0313 	mvn.w	r3, #19
    b16c:	e065      	b.n	b23a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    b16e:	697b      	ldr	r3, [r7, #20]
    b170:	7cdb      	ldrb	r3, [r3, #19]
    b172:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b176:	b2db      	uxtb	r3, r3
    b178:	011b      	lsls	r3, r3, #4
    b17a:	b2db      	uxtb	r3, r3
    b17c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b180:	b2da      	uxtb	r2, r3
    b182:	7cfb      	ldrb	r3, [r7, #19]
    b184:	4313      	orrs	r3, r2
    b186:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b188:	7cfa      	ldrb	r2, [r7, #19]
    b18a:	7efb      	ldrb	r3, [r7, #27]
    b18c:	4619      	mov	r1, r3
    b18e:	69f8      	ldr	r0, [r7, #28]
    b190:	4b2f      	ldr	r3, [pc, #188]	; (b250 <_usb_d_dev_ep_enable+0x200>)
    b192:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    b194:	68fb      	ldr	r3, [r7, #12]
    b196:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b19a:	697b      	ldr	r3, [r7, #20]
    b19c:	8a1b      	ldrh	r3, [r3, #16]
    b19e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    b1a2:	697b      	ldr	r3, [r7, #20]
    b1a4:	8a1b      	ldrh	r3, [r3, #16]
    b1a6:	4618      	mov	r0, r3
    b1a8:	4b2b      	ldr	r3, [pc, #172]	; (b258 <_usb_d_dev_ep_enable+0x208>)
    b1aa:	4798      	blx	r3
    b1ac:	4603      	mov	r3, r0
    b1ae:	071b      	lsls	r3, r3, #28
    b1b0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b1b4:	432b      	orrs	r3, r5
    b1b6:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b1b8:	7efb      	ldrb	r3, [r7, #27]
    b1ba:	2200      	movs	r2, #0
    b1bc:	2101      	movs	r1, #1
    b1be:	4618      	mov	r0, r3
    b1c0:	4b27      	ldr	r3, [pc, #156]	; (b260 <_usb_d_dev_ep_enable+0x210>)
    b1c2:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    b1c4:	7efb      	ldrb	r3, [r7, #27]
    b1c6:	2101      	movs	r1, #1
    b1c8:	4618      	mov	r0, r3
    b1ca:	4b26      	ldr	r3, [pc, #152]	; (b264 <_usb_d_dev_ep_enable+0x214>)
    b1cc:	4798      	blx	r3
    b1ce:	e033      	b.n	b238 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    b1d0:	7cfb      	ldrb	r3, [r7, #19]
    b1d2:	f003 0307 	and.w	r3, r3, #7
    b1d6:	2b00      	cmp	r3, #0
    b1d8:	d002      	beq.n	b1e0 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    b1da:	f06f 0313 	mvn.w	r3, #19
    b1de:	e02c      	b.n	b23a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    b1e0:	697b      	ldr	r3, [r7, #20]
    b1e2:	7cdb      	ldrb	r3, [r3, #19]
    b1e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b1e8:	b2db      	uxtb	r3, r3
    b1ea:	461a      	mov	r2, r3
    b1ec:	7cfb      	ldrb	r3, [r7, #19]
    b1ee:	4313      	orrs	r3, r2
    b1f0:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    b1f2:	7cfa      	ldrb	r2, [r7, #19]
    b1f4:	7efb      	ldrb	r3, [r7, #27]
    b1f6:	4619      	mov	r1, r3
    b1f8:	69f8      	ldr	r0, [r7, #28]
    b1fa:	4b15      	ldr	r3, [pc, #84]	; (b250 <_usb_d_dev_ep_enable+0x200>)
    b1fc:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b1fe:	697b      	ldr	r3, [r7, #20]
    b200:	8a1b      	ldrh	r3, [r3, #16]
    b202:	039b      	lsls	r3, r3, #14
    b204:	4c13      	ldr	r4, [pc, #76]	; (b254 <_usb_d_dev_ep_enable+0x204>)
    b206:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b208:	697b      	ldr	r3, [r7, #20]
    b20a:	8a1b      	ldrh	r3, [r3, #16]
    b20c:	4618      	mov	r0, r3
    b20e:	4b12      	ldr	r3, [pc, #72]	; (b258 <_usb_d_dev_ep_enable+0x208>)
    b210:	4798      	blx	r3
    b212:	4603      	mov	r3, r0
    b214:	071b      	lsls	r3, r3, #28
    b216:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    b21a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b21e:	68fb      	ldr	r3, [r7, #12]
    b220:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b222:	7efb      	ldrb	r3, [r7, #27]
    b224:	2200      	movs	r2, #0
    b226:	2100      	movs	r1, #0
    b228:	4618      	mov	r0, r3
    b22a:	4b0c      	ldr	r3, [pc, #48]	; (b25c <_usb_d_dev_ep_enable+0x20c>)
    b22c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    b22e:	7efb      	ldrb	r3, [r7, #27]
    b230:	2100      	movs	r1, #0
    b232:	4618      	mov	r0, r3
    b234:	4b0b      	ldr	r3, [pc, #44]	; (b264 <_usb_d_dev_ep_enable+0x214>)
    b236:	4798      	blx	r3
	}

	return USB_OK;
    b238:	2300      	movs	r3, #0
}
    b23a:	4618      	mov	r0, r3
    b23c:	3720      	adds	r7, #32
    b23e:	46bd      	mov	sp, r7
    b240:	bdb0      	pop	{r4, r5, r7, pc}
    b242:	bf00      	nop
    b244:	00009e69 	.word	0x00009e69
    b248:	000094ef 	.word	0x000094ef
    b24c:	20000db4 	.word	0x20000db4
    b250:	000094c5 	.word	0x000094c5
    b254:	0fffc000 	.word	0x0fffc000
    b258:	00009e05 	.word	0x00009e05
    b25c:	00009dad 	.word	0x00009dad
    b260:	00009d55 	.word	0x00009d55
    b264:	00009d1d 	.word	0x00009d1d
    b268:	0000adc1 	.word	0x0000adc1

0000b26c <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    b26c:	b580      	push	{r7, lr}
    b26e:	b084      	sub	sp, #16
    b270:	af00      	add	r7, sp, #0
    b272:	6078      	str	r0, [r7, #4]
    b274:	460b      	mov	r3, r1
    b276:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b278:	687b      	ldr	r3, [r7, #4]
    b27a:	7c9b      	ldrb	r3, [r3, #18]
    b27c:	f003 030f 	and.w	r3, r3, #15
    b280:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    b282:	78fa      	ldrb	r2, [r7, #3]
    b284:	7bfb      	ldrb	r3, [r7, #15]
    b286:	4611      	mov	r1, r2
    b288:	4618      	mov	r0, r3
    b28a:	4b03      	ldr	r3, [pc, #12]	; (b298 <_usb_d_dev_ep_stall_get+0x2c>)
    b28c:	4798      	blx	r3
    b28e:	4603      	mov	r3, r0
}
    b290:	4618      	mov	r0, r3
    b292:	3710      	adds	r7, #16
    b294:	46bd      	mov	sp, r7
    b296:	bd80      	pop	{r7, pc}
    b298:	0000995d 	.word	0x0000995d

0000b29c <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    b29c:	b580      	push	{r7, lr}
    b29e:	b084      	sub	sp, #16
    b2a0:	af00      	add	r7, sp, #0
    b2a2:	6078      	str	r0, [r7, #4]
    b2a4:	460b      	mov	r3, r1
    b2a6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b2a8:	687b      	ldr	r3, [r7, #4]
    b2aa:	7c9b      	ldrb	r3, [r3, #18]
    b2ac:	f003 030f 	and.w	r3, r3, #15
    b2b0:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    b2b2:	78f9      	ldrb	r1, [r7, #3]
    b2b4:	7bfb      	ldrb	r3, [r7, #15]
    b2b6:	2201      	movs	r2, #1
    b2b8:	4618      	mov	r0, r3
    b2ba:	4b0a      	ldr	r3, [pc, #40]	; (b2e4 <_usb_d_dev_ep_stall_set+0x48>)
    b2bc:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b2be:	78fb      	ldrb	r3, [r7, #3]
    b2c0:	2220      	movs	r2, #32
    b2c2:	409a      	lsls	r2, r3
    b2c4:	7bfb      	ldrb	r3, [r7, #15]
    b2c6:	4611      	mov	r1, r2
    b2c8:	4618      	mov	r0, r3
    b2ca:	4b07      	ldr	r3, [pc, #28]	; (b2e8 <_usb_d_dev_ep_stall_set+0x4c>)
    b2cc:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    b2ce:	687a      	ldr	r2, [r7, #4]
    b2d0:	7cd3      	ldrb	r3, [r2, #19]
    b2d2:	f043 0308 	orr.w	r3, r3, #8
    b2d6:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    b2d8:	2300      	movs	r3, #0
}
    b2da:	4618      	mov	r0, r3
    b2dc:	3710      	adds	r7, #16
    b2de:	46bd      	mov	sp, r7
    b2e0:	bd80      	pop	{r7, pc}
    b2e2:	bf00      	nop
    b2e4:	00009905 	.word	0x00009905
    b2e8:	00009885 	.word	0x00009885

0000b2ec <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    b2ec:	b580      	push	{r7, lr}
    b2ee:	b084      	sub	sp, #16
    b2f0:	af00      	add	r7, sp, #0
    b2f2:	6078      	str	r0, [r7, #4]
    b2f4:	460b      	mov	r3, r1
    b2f6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b2f8:	687b      	ldr	r3, [r7, #4]
    b2fa:	7c9b      	ldrb	r3, [r3, #18]
    b2fc:	f003 030f 	and.w	r3, r3, #15
    b300:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    b302:	78fa      	ldrb	r2, [r7, #3]
    b304:	7bfb      	ldrb	r3, [r7, #15]
    b306:	4611      	mov	r1, r2
    b308:	4618      	mov	r0, r3
    b30a:	4b28      	ldr	r3, [pc, #160]	; (b3ac <_usb_d_dev_ep_stall_clr+0xc0>)
    b30c:	4798      	blx	r3
    b30e:	4603      	mov	r3, r0
    b310:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b312:	7bbb      	ldrb	r3, [r7, #14]
    b314:	f083 0301 	eor.w	r3, r3, #1
    b318:	b2db      	uxtb	r3, r3
    b31a:	2b00      	cmp	r3, #0
    b31c:	d001      	beq.n	b322 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b31e:	2300      	movs	r3, #0
    b320:	e040      	b.n	b3a4 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b322:	78f9      	ldrb	r1, [r7, #3]
    b324:	7bfb      	ldrb	r3, [r7, #15]
    b326:	2200      	movs	r2, #0
    b328:	4618      	mov	r0, r3
    b32a:	4b21      	ldr	r3, [pc, #132]	; (b3b0 <_usb_d_dev_ep_stall_clr+0xc4>)
    b32c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b32e:	78fb      	ldrb	r3, [r7, #3]
    b330:	2220      	movs	r2, #32
    b332:	409a      	lsls	r2, r3
    b334:	7bfb      	ldrb	r3, [r7, #15]
    b336:	4611      	mov	r1, r2
    b338:	4618      	mov	r0, r3
    b33a:	4b1e      	ldr	r3, [pc, #120]	; (b3b4 <_usb_d_dev_ep_stall_clr+0xc8>)
    b33c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b33e:	78fa      	ldrb	r2, [r7, #3]
    b340:	7bfb      	ldrb	r3, [r7, #15]
    b342:	4611      	mov	r1, r2
    b344:	4618      	mov	r0, r3
    b346:	4b1c      	ldr	r3, [pc, #112]	; (b3b8 <_usb_d_dev_ep_stall_clr+0xcc>)
    b348:	4798      	blx	r3
    b34a:	4603      	mov	r3, r0
    b34c:	2b00      	cmp	r3, #0
    b34e:	d00b      	beq.n	b368 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b350:	78fa      	ldrb	r2, [r7, #3]
    b352:	7bfb      	ldrb	r3, [r7, #15]
    b354:	4611      	mov	r1, r2
    b356:	4618      	mov	r0, r3
    b358:	4b18      	ldr	r3, [pc, #96]	; (b3bc <_usb_d_dev_ep_stall_clr+0xd0>)
    b35a:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b35c:	78f9      	ldrb	r1, [r7, #3]
    b35e:	7bfb      	ldrb	r3, [r7, #15]
    b360:	2200      	movs	r2, #0
    b362:	4618      	mov	r0, r3
    b364:	4b16      	ldr	r3, [pc, #88]	; (b3c0 <_usb_d_dev_ep_stall_clr+0xd4>)
    b366:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b368:	687b      	ldr	r3, [r7, #4]
    b36a:	7cdb      	ldrb	r3, [r3, #19]
    b36c:	f003 0307 	and.w	r3, r3, #7
    b370:	b2db      	uxtb	r3, r3
    b372:	2b01      	cmp	r3, #1
    b374:	d110      	bne.n	b398 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b376:	7bfb      	ldrb	r3, [r7, #15]
    b378:	4619      	mov	r1, r3
    b37a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b37e:	4b11      	ldr	r3, [pc, #68]	; (b3c4 <_usb_d_dev_ep_stall_clr+0xd8>)
    b380:	4798      	blx	r3
    b382:	4603      	mov	r3, r0
    b384:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b388:	2b00      	cmp	r3, #0
    b38a:	d10a      	bne.n	b3a2 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b38c:	687a      	ldr	r2, [r7, #4]
    b38e:	7cd3      	ldrb	r3, [r2, #19]
    b390:	f36f 03c3 	bfc	r3, #3, #1
    b394:	74d3      	strb	r3, [r2, #19]
    b396:	e004      	b.n	b3a2 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b398:	687a      	ldr	r2, [r7, #4]
    b39a:	7cd3      	ldrb	r3, [r2, #19]
    b39c:	f36f 03c3 	bfc	r3, #3, #1
    b3a0:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b3a2:	2300      	movs	r3, #0
}
    b3a4:	4618      	mov	r0, r3
    b3a6:	3710      	adds	r7, #16
    b3a8:	46bd      	mov	sp, r7
    b3aa:	bd80      	pop	{r7, pc}
    b3ac:	0000995d 	.word	0x0000995d
    b3b0:	00009905 	.word	0x00009905
    b3b4:	000098ad 	.word	0x000098ad
    b3b8:	000099a1 	.word	0x000099a1
    b3bc:	000099e5 	.word	0x000099e5
    b3c0:	00009ad1 	.word	0x00009ad1
    b3c4:	0000938d 	.word	0x0000938d

0000b3c8 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b3c8:	b580      	push	{r7, lr}
    b3ca:	b086      	sub	sp, #24
    b3cc:	af00      	add	r7, sp, #0
    b3ce:	4603      	mov	r3, r0
    b3d0:	460a      	mov	r2, r1
    b3d2:	71fb      	strb	r3, [r7, #7]
    b3d4:	4613      	mov	r3, r2
    b3d6:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b3d8:	79fb      	ldrb	r3, [r7, #7]
    b3da:	f003 030f 	and.w	r3, r3, #15
    b3de:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b3e0:	79fb      	ldrb	r3, [r7, #7]
    b3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b3e6:	2b00      	cmp	r3, #0
    b3e8:	bf14      	ite	ne
    b3ea:	2301      	movne	r3, #1
    b3ec:	2300      	moveq	r3, #0
    b3ee:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b3f0:	7cba      	ldrb	r2, [r7, #18]
    b3f2:	7cfb      	ldrb	r3, [r7, #19]
    b3f4:	4611      	mov	r1, r2
    b3f6:	4618      	mov	r0, r3
    b3f8:	4b13      	ldr	r3, [pc, #76]	; (b448 <_usb_d_dev_ep_stall+0x80>)
    b3fa:	4798      	blx	r3
    b3fc:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b3fe:	7cfb      	ldrb	r3, [r7, #19]
    b400:	2b04      	cmp	r3, #4
    b402:	d902      	bls.n	b40a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b404:	f06f 0311 	mvn.w	r3, #17
    b408:	e01a      	b.n	b440 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b40a:	79bb      	ldrb	r3, [r7, #6]
    b40c:	2b01      	cmp	r3, #1
    b40e:	d106      	bne.n	b41e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b410:	7cbb      	ldrb	r3, [r7, #18]
    b412:	4619      	mov	r1, r3
    b414:	68f8      	ldr	r0, [r7, #12]
    b416:	4b0d      	ldr	r3, [pc, #52]	; (b44c <_usb_d_dev_ep_stall+0x84>)
    b418:	4798      	blx	r3
    b41a:	6178      	str	r0, [r7, #20]
    b41c:	e00f      	b.n	b43e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b41e:	79bb      	ldrb	r3, [r7, #6]
    b420:	2b00      	cmp	r3, #0
    b422:	d106      	bne.n	b432 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b424:	7cbb      	ldrb	r3, [r7, #18]
    b426:	4619      	mov	r1, r3
    b428:	68f8      	ldr	r0, [r7, #12]
    b42a:	4b09      	ldr	r3, [pc, #36]	; (b450 <_usb_d_dev_ep_stall+0x88>)
    b42c:	4798      	blx	r3
    b42e:	6178      	str	r0, [r7, #20]
    b430:	e005      	b.n	b43e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b432:	7cbb      	ldrb	r3, [r7, #18]
    b434:	4619      	mov	r1, r3
    b436:	68f8      	ldr	r0, [r7, #12]
    b438:	4b06      	ldr	r3, [pc, #24]	; (b454 <_usb_d_dev_ep_stall+0x8c>)
    b43a:	4798      	blx	r3
    b43c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b43e:	697b      	ldr	r3, [r7, #20]
}
    b440:	4618      	mov	r0, r3
    b442:	3718      	adds	r7, #24
    b444:	46bd      	mov	sp, r7
    b446:	bd80      	pop	{r7, pc}
    b448:	00009e69 	.word	0x00009e69
    b44c:	0000b29d 	.word	0x0000b29d
    b450:	0000b2ed 	.word	0x0000b2ed
    b454:	0000b26d 	.word	0x0000b26d

0000b458 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b458:	b580      	push	{r7, lr}
    b45a:	b082      	sub	sp, #8
    b45c:	af00      	add	r7, sp, #0
    b45e:	6078      	str	r0, [r7, #4]
    b460:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b462:	687b      	ldr	r3, [r7, #4]
    b464:	7c9b      	ldrb	r3, [r3, #18]
    b466:	2bff      	cmp	r3, #255	; 0xff
    b468:	d014      	beq.n	b494 <_usb_d_dev_trans_done+0x3c>
    b46a:	687b      	ldr	r3, [r7, #4]
    b46c:	7cdb      	ldrb	r3, [r3, #19]
    b46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b472:	b2db      	uxtb	r3, r3
    b474:	2b00      	cmp	r3, #0
    b476:	d00d      	beq.n	b494 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b478:	687a      	ldr	r2, [r7, #4]
    b47a:	7cd3      	ldrb	r3, [r2, #19]
    b47c:	f36f 1386 	bfc	r3, #6, #1
    b480:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b482:	4b06      	ldr	r3, [pc, #24]	; (b49c <_usb_d_dev_trans_done+0x44>)
    b484:	691b      	ldr	r3, [r3, #16]
    b486:	687a      	ldr	r2, [r7, #4]
    b488:	7c90      	ldrb	r0, [r2, #18]
    b48a:	687a      	ldr	r2, [r7, #4]
    b48c:	6892      	ldr	r2, [r2, #8]
    b48e:	6839      	ldr	r1, [r7, #0]
    b490:	4798      	blx	r3
    b492:	e000      	b.n	b496 <_usb_d_dev_trans_done+0x3e>
		return;
    b494:	bf00      	nop
}
    b496:	3708      	adds	r7, #8
    b498:	46bd      	mov	sp, r7
    b49a:	bd80      	pop	{r7, pc}
    b49c:	20000cec 	.word	0x20000cec

0000b4a0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b4a0:	b580      	push	{r7, lr}
    b4a2:	b086      	sub	sp, #24
    b4a4:	af00      	add	r7, sp, #0
    b4a6:	60f8      	str	r0, [r7, #12]
    b4a8:	460b      	mov	r3, r1
    b4aa:	607a      	str	r2, [r7, #4]
    b4ac:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b4ae:	68fb      	ldr	r3, [r7, #12]
    b4b0:	7c9b      	ldrb	r3, [r3, #18]
    b4b2:	f003 030f 	and.w	r3, r3, #15
    b4b6:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b4b8:	4b1f      	ldr	r3, [pc, #124]	; (b538 <_usb_d_dev_trans_stop+0x98>)
    b4ba:	881b      	ldrh	r3, [r3, #0]
    b4bc:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b4be:	68fb      	ldr	r3, [r7, #12]
    b4c0:	7c9b      	ldrb	r3, [r3, #18]
    b4c2:	2bff      	cmp	r3, #255	; 0xff
    b4c4:	d033      	beq.n	b52e <_usb_d_dev_trans_stop+0x8e>
    b4c6:	68fb      	ldr	r3, [r7, #12]
    b4c8:	7cdb      	ldrb	r3, [r3, #19]
    b4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b4ce:	b2db      	uxtb	r3, r3
    b4d0:	2b00      	cmp	r3, #0
    b4d2:	d02c      	beq.n	b52e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b4d4:	7afb      	ldrb	r3, [r7, #11]
    b4d6:	2b00      	cmp	r3, #0
    b4d8:	d006      	beq.n	b4e8 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b4da:	7dfb      	ldrb	r3, [r7, #23]
    b4dc:	2200      	movs	r2, #0
    b4de:	2101      	movs	r1, #1
    b4e0:	4618      	mov	r0, r3
    b4e2:	4b16      	ldr	r3, [pc, #88]	; (b53c <_usb_d_dev_trans_stop+0x9c>)
    b4e4:	4798      	blx	r3
    b4e6:	e005      	b.n	b4f4 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b4e8:	7dfb      	ldrb	r3, [r7, #23]
    b4ea:	2200      	movs	r2, #0
    b4ec:	2100      	movs	r1, #0
    b4ee:	4618      	mov	r0, r3
    b4f0:	4b13      	ldr	r3, [pc, #76]	; (b540 <_usb_d_dev_trans_stop+0xa0>)
    b4f2:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b4f4:	7afb      	ldrb	r3, [r7, #11]
    b4f6:	f107 0218 	add.w	r2, r7, #24
    b4fa:	4413      	add	r3, r2
    b4fc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b500:	461a      	mov	r2, r3
    b502:	7dfb      	ldrb	r3, [r7, #23]
    b504:	4611      	mov	r1, r2
    b506:	4618      	mov	r0, r3
    b508:	4b0e      	ldr	r3, [pc, #56]	; (b544 <_usb_d_dev_trans_stop+0xa4>)
    b50a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b50c:	7afb      	ldrb	r3, [r7, #11]
    b50e:	f107 0218 	add.w	r2, r7, #24
    b512:	4413      	add	r3, r2
    b514:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b518:	461a      	mov	r2, r3
    b51a:	7dfb      	ldrb	r3, [r7, #23]
    b51c:	4611      	mov	r1, r2
    b51e:	4618      	mov	r0, r3
    b520:	4b09      	ldr	r3, [pc, #36]	; (b548 <_usb_d_dev_trans_stop+0xa8>)
    b522:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b524:	6879      	ldr	r1, [r7, #4]
    b526:	68f8      	ldr	r0, [r7, #12]
    b528:	4b08      	ldr	r3, [pc, #32]	; (b54c <_usb_d_dev_trans_stop+0xac>)
    b52a:	4798      	blx	r3
    b52c:	e000      	b.n	b530 <_usb_d_dev_trans_stop+0x90>
		return;
    b52e:	bf00      	nop
}
    b530:	3718      	adds	r7, #24
    b532:	46bd      	mov	sp, r7
    b534:	bd80      	pop	{r7, pc}
    b536:	bf00      	nop
    b538:	000101c0 	.word	0x000101c0
    b53c:	00009d55 	.word	0x00009d55
    b540:	00009dad 	.word	0x00009dad
    b544:	0000985d 	.word	0x0000985d
    b548:	000098ad 	.word	0x000098ad
    b54c:	0000b459 	.word	0x0000b459

0000b550 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b550:	b580      	push	{r7, lr}
    b552:	b086      	sub	sp, #24
    b554:	af00      	add	r7, sp, #0
    b556:	4603      	mov	r3, r0
    b558:	6039      	str	r1, [r7, #0]
    b55a:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b55c:	79fb      	ldrb	r3, [r7, #7]
    b55e:	f003 030f 	and.w	r3, r3, #15
    b562:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b564:	7dfb      	ldrb	r3, [r7, #23]
    b566:	015b      	lsls	r3, r3, #5
    b568:	4a1e      	ldr	r2, [pc, #120]	; (b5e4 <_usb_d_dev_ep_read_req+0x94>)
    b56a:	4413      	add	r3, r2
    b56c:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b56e:	693b      	ldr	r3, [r7, #16]
    b570:	681b      	ldr	r3, [r3, #0]
    b572:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b574:	693b      	ldr	r3, [r7, #16]
    b576:	685b      	ldr	r3, [r3, #4]
    b578:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b57c:	b29b      	uxth	r3, r3
    b57e:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b580:	7dfb      	ldrb	r3, [r7, #23]
    b582:	2b04      	cmp	r3, #4
    b584:	d802      	bhi.n	b58c <_usb_d_dev_ep_read_req+0x3c>
    b586:	683b      	ldr	r3, [r7, #0]
    b588:	2b00      	cmp	r3, #0
    b58a:	d102      	bne.n	b592 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b58c:	f06f 0311 	mvn.w	r3, #17
    b590:	e023      	b.n	b5da <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b592:	7dfb      	ldrb	r3, [r7, #23]
    b594:	4618      	mov	r0, r3
    b596:	4b14      	ldr	r3, [pc, #80]	; (b5e8 <_usb_d_dev_ep_read_req+0x98>)
    b598:	4798      	blx	r3
    b59a:	4603      	mov	r3, r0
    b59c:	f083 0301 	eor.w	r3, r3, #1
    b5a0:	b2db      	uxtb	r3, r3
    b5a2:	2b00      	cmp	r3, #0
    b5a4:	d002      	beq.n	b5ac <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b5a6:	f06f 0312 	mvn.w	r3, #18
    b5aa:	e016      	b.n	b5da <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b5ac:	7dfb      	ldrb	r3, [r7, #23]
    b5ae:	4618      	mov	r0, r3
    b5b0:	4b0e      	ldr	r3, [pc, #56]	; (b5ec <_usb_d_dev_ep_read_req+0x9c>)
    b5b2:	4798      	blx	r3
    b5b4:	4603      	mov	r3, r0
    b5b6:	f083 0301 	eor.w	r3, r3, #1
    b5ba:	b2db      	uxtb	r3, r3
    b5bc:	2b00      	cmp	r3, #0
    b5be:	d001      	beq.n	b5c4 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b5c0:	2300      	movs	r3, #0
    b5c2:	e00a      	b.n	b5da <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b5c4:	68fb      	ldr	r3, [r7, #12]
    b5c6:	2208      	movs	r2, #8
    b5c8:	4619      	mov	r1, r3
    b5ca:	6838      	ldr	r0, [r7, #0]
    b5cc:	4b08      	ldr	r3, [pc, #32]	; (b5f0 <_usb_d_dev_ep_read_req+0xa0>)
    b5ce:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b5d0:	7dfb      	ldrb	r3, [r7, #23]
    b5d2:	4618      	mov	r0, r3
    b5d4:	4b07      	ldr	r3, [pc, #28]	; (b5f4 <_usb_d_dev_ep_read_req+0xa4>)
    b5d6:	4798      	blx	r3

	return bytes;
    b5d8:	897b      	ldrh	r3, [r7, #10]
}
    b5da:	4618      	mov	r0, r3
    b5dc:	3718      	adds	r7, #24
    b5de:	46bd      	mov	sp, r7
    b5e0:	bd80      	pop	{r7, pc}
    b5e2:	bf00      	nop
    b5e4:	20000db4 	.word	0x20000db4
    b5e8:	000098d5 	.word	0x000098d5
    b5ec:	00009a81 	.word	0x00009a81
    b5f0:	0000fb21 	.word	0x0000fb21
    b5f4:	00009ab1 	.word	0x00009ab1

0000b5f8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b5f8:	b580      	push	{r7, lr}
    b5fa:	b086      	sub	sp, #24
    b5fc:	af00      	add	r7, sp, #0
    b5fe:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b600:	687b      	ldr	r3, [r7, #4]
    b602:	7a1b      	ldrb	r3, [r3, #8]
    b604:	f003 030f 	and.w	r3, r3, #15
    b608:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b60a:	687b      	ldr	r3, [r7, #4]
    b60c:	7a1b      	ldrb	r3, [r3, #8]
    b60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b612:	2b00      	cmp	r3, #0
    b614:	bf14      	ite	ne
    b616:	2301      	movne	r3, #1
    b618:	2300      	moveq	r3, #0
    b61a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b61c:	7d7a      	ldrb	r2, [r7, #21]
    b61e:	7dbb      	ldrb	r3, [r7, #22]
    b620:	4611      	mov	r1, r2
    b622:	4618      	mov	r0, r3
    b624:	4b5f      	ldr	r3, [pc, #380]	; (b7a4 <_usb_d_dev_ep_trans+0x1ac>)
    b626:	4798      	blx	r3
    b628:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b62a:	693b      	ldr	r3, [r7, #16]
    b62c:	8a1b      	ldrh	r3, [r3, #16]
    b62e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b632:	4293      	cmp	r3, r2
    b634:	d004      	beq.n	b640 <_usb_d_dev_ep_trans+0x48>
    b636:	693b      	ldr	r3, [r7, #16]
    b638:	8a1b      	ldrh	r3, [r3, #16]
    b63a:	3b01      	subs	r3, #1
    b63c:	b29b      	uxth	r3, r3
    b63e:	e001      	b.n	b644 <_usb_d_dev_ep_trans+0x4c>
    b640:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b644:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b646:	687b      	ldr	r3, [r7, #4]
    b648:	685a      	ldr	r2, [r3, #4]
    b64a:	89fb      	ldrh	r3, [r7, #14]
    b64c:	4013      	ands	r3, r2
    b64e:	2b00      	cmp	r3, #0
    b650:	bf14      	ite	ne
    b652:	2301      	movne	r3, #1
    b654:	2300      	moveq	r3, #0
    b656:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b658:	2300      	movs	r3, #0
    b65a:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b65c:	7dbb      	ldrb	r3, [r7, #22]
    b65e:	2b04      	cmp	r3, #4
    b660:	d902      	bls.n	b668 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b662:	f06f 0311 	mvn.w	r3, #17
    b666:	e098      	b.n	b79a <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b668:	687b      	ldr	r3, [r7, #4]
    b66a:	681b      	ldr	r3, [r3, #0]
    b66c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b670:	d31a      	bcc.n	b6a8 <_usb_d_dev_ep_trans+0xb0>
    b672:	687b      	ldr	r3, [r7, #4]
    b674:	681b      	ldr	r3, [r3, #0]
    b676:	461a      	mov	r2, r3
    b678:	687b      	ldr	r3, [r7, #4]
    b67a:	685b      	ldr	r3, [r3, #4]
    b67c:	4413      	add	r3, r2
    b67e:	4a4a      	ldr	r2, [pc, #296]	; (b7a8 <_usb_d_dev_ep_trans+0x1b0>)
    b680:	4293      	cmp	r3, r2
    b682:	d811      	bhi.n	b6a8 <_usb_d_dev_ep_trans+0xb0>
    b684:	687b      	ldr	r3, [r7, #4]
    b686:	681b      	ldr	r3, [r3, #0]
    b688:	f003 0303 	and.w	r3, r3, #3
    b68c:	2b00      	cmp	r3, #0
    b68e:	d10b      	bne.n	b6a8 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b690:	7d7b      	ldrb	r3, [r7, #21]
    b692:	f083 0301 	eor.w	r3, r3, #1
    b696:	b2db      	uxtb	r3, r3
    b698:	2b00      	cmp	r3, #0
    b69a:	d00e      	beq.n	b6ba <_usb_d_dev_ep_trans+0xc2>
    b69c:	687b      	ldr	r3, [r7, #4]
    b69e:	685b      	ldr	r3, [r3, #4]
    b6a0:	693a      	ldr	r2, [r7, #16]
    b6a2:	8a12      	ldrh	r2, [r2, #16]
    b6a4:	4293      	cmp	r3, r2
    b6a6:	d208      	bcs.n	b6ba <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b6a8:	693b      	ldr	r3, [r7, #16]
    b6aa:	68db      	ldr	r3, [r3, #12]
    b6ac:	2b00      	cmp	r3, #0
    b6ae:	d102      	bne.n	b6b6 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b6b0:	f06f 0312 	mvn.w	r3, #18
    b6b4:	e071      	b.n	b79a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b6b6:	2301      	movs	r3, #1
    b6b8:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b6ba:	7d7b      	ldrb	r3, [r7, #21]
    b6bc:	f083 0301 	eor.w	r3, r3, #1
    b6c0:	b2db      	uxtb	r3, r3
    b6c2:	2b00      	cmp	r3, #0
    b6c4:	d009      	beq.n	b6da <_usb_d_dev_ep_trans+0xe2>
    b6c6:	7b7b      	ldrb	r3, [r7, #13]
    b6c8:	2b00      	cmp	r3, #0
    b6ca:	d006      	beq.n	b6da <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b6cc:	693b      	ldr	r3, [r7, #16]
    b6ce:	68db      	ldr	r3, [r3, #12]
    b6d0:	2b00      	cmp	r3, #0
    b6d2:	d102      	bne.n	b6da <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b6d4:	f06f 0311 	mvn.w	r3, #17
    b6d8:	e05f      	b.n	b79a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b6da:	693b      	ldr	r3, [r7, #16]
    b6dc:	7cdb      	ldrb	r3, [r3, #19]
    b6de:	f003 0308 	and.w	r3, r3, #8
    b6e2:	b2db      	uxtb	r3, r3
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	d001      	beq.n	b6ec <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b6e8:	2302      	movs	r3, #2
    b6ea:	e056      	b.n	b79a <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b6ec:	f107 0308 	add.w	r3, r7, #8
    b6f0:	4618      	mov	r0, r3
    b6f2:	4b2e      	ldr	r3, [pc, #184]	; (b7ac <_usb_d_dev_ep_trans+0x1b4>)
    b6f4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b6f6:	693b      	ldr	r3, [r7, #16]
    b6f8:	7cdb      	ldrb	r3, [r3, #19]
    b6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b6fe:	b2db      	uxtb	r3, r3
    b700:	2b00      	cmp	r3, #0
    b702:	d006      	beq.n	b712 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b704:	f107 0308 	add.w	r3, r7, #8
    b708:	4618      	mov	r0, r3
    b70a:	4b29      	ldr	r3, [pc, #164]	; (b7b0 <_usb_d_dev_ep_trans+0x1b8>)
    b70c:	4798      	blx	r3
		return USB_BUSY;
    b70e:	2301      	movs	r3, #1
    b710:	e043      	b.n	b79a <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b712:	693a      	ldr	r2, [r7, #16]
    b714:	7cd3      	ldrb	r3, [r2, #19]
    b716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b71a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b71c:	f107 0308 	add.w	r3, r7, #8
    b720:	4618      	mov	r0, r3
    b722:	4b23      	ldr	r3, [pc, #140]	; (b7b0 <_usb_d_dev_ep_trans+0x1b8>)
    b724:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b726:	687b      	ldr	r3, [r7, #4]
    b728:	681a      	ldr	r2, [r3, #0]
    b72a:	693b      	ldr	r3, [r7, #16]
    b72c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b72e:	687b      	ldr	r3, [r7, #4]
    b730:	685a      	ldr	r2, [r3, #4]
    b732:	693b      	ldr	r3, [r7, #16]
    b734:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b736:	693b      	ldr	r3, [r7, #16]
    b738:	2200      	movs	r2, #0
    b73a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b73c:	693a      	ldr	r2, [r7, #16]
    b73e:	7cd3      	ldrb	r3, [r2, #19]
    b740:	7d79      	ldrb	r1, [r7, #21]
    b742:	f361 13c7 	bfi	r3, r1, #7, #1
    b746:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b748:	693a      	ldr	r2, [r7, #16]
    b74a:	7cd3      	ldrb	r3, [r2, #19]
    b74c:	7df9      	ldrb	r1, [r7, #23]
    b74e:	f361 1345 	bfi	r3, r1, #5, #1
    b752:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b754:	687b      	ldr	r3, [r7, #4]
    b756:	7a5b      	ldrb	r3, [r3, #9]
    b758:	2b00      	cmp	r3, #0
    b75a:	d007      	beq.n	b76c <_usb_d_dev_ep_trans+0x174>
    b75c:	7b7b      	ldrb	r3, [r7, #13]
    b75e:	f083 0301 	eor.w	r3, r3, #1
    b762:	b2db      	uxtb	r3, r3
    b764:	2b00      	cmp	r3, #0
    b766:	d001      	beq.n	b76c <_usb_d_dev_ep_trans+0x174>
    b768:	2301      	movs	r3, #1
    b76a:	e000      	b.n	b76e <_usb_d_dev_ep_trans+0x176>
    b76c:	2300      	movs	r3, #0
    b76e:	b2db      	uxtb	r3, r3
    b770:	f003 0301 	and.w	r3, r3, #1
    b774:	b2d9      	uxtb	r1, r3
    b776:	693a      	ldr	r2, [r7, #16]
    b778:	7cd3      	ldrb	r3, [r2, #19]
    b77a:	f361 1304 	bfi	r3, r1, #4, #1
    b77e:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b780:	7d7b      	ldrb	r3, [r7, #21]
    b782:	2b00      	cmp	r3, #0
    b784:	d004      	beq.n	b790 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b786:	2100      	movs	r1, #0
    b788:	6938      	ldr	r0, [r7, #16]
    b78a:	4b0a      	ldr	r3, [pc, #40]	; (b7b4 <_usb_d_dev_ep_trans+0x1bc>)
    b78c:	4798      	blx	r3
    b78e:	e003      	b.n	b798 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b790:	2100      	movs	r1, #0
    b792:	6938      	ldr	r0, [r7, #16]
    b794:	4b08      	ldr	r3, [pc, #32]	; (b7b8 <_usb_d_dev_ep_trans+0x1c0>)
    b796:	4798      	blx	r3
	}

	return ERR_NONE;
    b798:	2300      	movs	r3, #0
}
    b79a:	4618      	mov	r0, r3
    b79c:	3718      	adds	r7, #24
    b79e:	46bd      	mov	sp, r7
    b7a0:	bd80      	pop	{r7, pc}
    b7a2:	bf00      	nop
    b7a4:	00009e69 	.word	0x00009e69
    b7a8:	20041fff 	.word	0x20041fff
    b7ac:	0000bfc5 	.word	0x0000bfc5
    b7b0:	0000bfeb 	.word	0x0000bfeb
    b7b4:	0000a131 	.word	0x0000a131
    b7b8:	0000a349 	.word	0x0000a349

0000b7bc <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b7bc:	b580      	push	{r7, lr}
    b7be:	b084      	sub	sp, #16
    b7c0:	af00      	add	r7, sp, #0
    b7c2:	4603      	mov	r3, r0
    b7c4:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b7c6:	79fb      	ldrb	r3, [r7, #7]
    b7c8:	f003 030f 	and.w	r3, r3, #15
    b7cc:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b7ce:	79fb      	ldrb	r3, [r7, #7]
    b7d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b7d4:	2b00      	cmp	r3, #0
    b7d6:	bf14      	ite	ne
    b7d8:	2301      	movne	r3, #1
    b7da:	2300      	moveq	r3, #0
    b7dc:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b7de:	7bba      	ldrb	r2, [r7, #14]
    b7e0:	7bfb      	ldrb	r3, [r7, #15]
    b7e2:	4611      	mov	r1, r2
    b7e4:	4618      	mov	r0, r3
    b7e6:	4b08      	ldr	r3, [pc, #32]	; (b808 <_usb_d_dev_ep_abort+0x4c>)
    b7e8:	4798      	blx	r3
    b7ea:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b7ec:	7bfb      	ldrb	r3, [r7, #15]
    b7ee:	2b04      	cmp	r3, #4
    b7f0:	d806      	bhi.n	b800 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b7f2:	7bbb      	ldrb	r3, [r7, #14]
    b7f4:	2202      	movs	r2, #2
    b7f6:	4619      	mov	r1, r3
    b7f8:	68b8      	ldr	r0, [r7, #8]
    b7fa:	4b04      	ldr	r3, [pc, #16]	; (b80c <_usb_d_dev_ep_abort+0x50>)
    b7fc:	4798      	blx	r3
    b7fe:	e000      	b.n	b802 <_usb_d_dev_ep_abort+0x46>
		return;
    b800:	bf00      	nop
}
    b802:	3710      	adds	r7, #16
    b804:	46bd      	mov	sp, r7
    b806:	bd80      	pop	{r7, pc}
    b808:	00009e69 	.word	0x00009e69
    b80c:	0000b4a1 	.word	0x0000b4a1

0000b810 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b810:	b480      	push	{r7}
    b812:	b085      	sub	sp, #20
    b814:	af00      	add	r7, sp, #0
    b816:	4603      	mov	r3, r0
    b818:	6039      	str	r1, [r7, #0]
    b81a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b81c:	683b      	ldr	r3, [r7, #0]
    b81e:	2b00      	cmp	r3, #0
    b820:	d001      	beq.n	b826 <_usb_d_dev_register_callback+0x16>
    b822:	683b      	ldr	r3, [r7, #0]
    b824:	e000      	b.n	b828 <_usb_d_dev_register_callback+0x18>
    b826:	4b0a      	ldr	r3, [pc, #40]	; (b850 <_usb_d_dev_register_callback+0x40>)
    b828:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b82a:	79fb      	ldrb	r3, [r7, #7]
    b82c:	2b01      	cmp	r3, #1
    b82e:	d103      	bne.n	b838 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b830:	4a08      	ldr	r2, [pc, #32]	; (b854 <_usb_d_dev_register_callback+0x44>)
    b832:	68fb      	ldr	r3, [r7, #12]
    b834:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b836:	e005      	b.n	b844 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b838:	79fb      	ldrb	r3, [r7, #7]
    b83a:	2b00      	cmp	r3, #0
    b83c:	d102      	bne.n	b844 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b83e:	4a05      	ldr	r2, [pc, #20]	; (b854 <_usb_d_dev_register_callback+0x44>)
    b840:	68fb      	ldr	r3, [r7, #12]
    b842:	6013      	str	r3, [r2, #0]
}
    b844:	bf00      	nop
    b846:	3714      	adds	r7, #20
    b848:	46bd      	mov	sp, r7
    b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b84e:	4770      	bx	lr
    b850:	000096f1 	.word	0x000096f1
    b854:	20000cec 	.word	0x20000cec

0000b858 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b858:	b480      	push	{r7}
    b85a:	b085      	sub	sp, #20
    b85c:	af00      	add	r7, sp, #0
    b85e:	4603      	mov	r3, r0
    b860:	6039      	str	r1, [r7, #0]
    b862:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b864:	683b      	ldr	r3, [r7, #0]
    b866:	2b00      	cmp	r3, #0
    b868:	d001      	beq.n	b86e <_usb_d_dev_register_ep_callback+0x16>
    b86a:	683b      	ldr	r3, [r7, #0]
    b86c:	e000      	b.n	b870 <_usb_d_dev_register_ep_callback+0x18>
    b86e:	4b0e      	ldr	r3, [pc, #56]	; (b8a8 <_usb_d_dev_register_ep_callback+0x50>)
    b870:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b872:	79fb      	ldrb	r3, [r7, #7]
    b874:	2b00      	cmp	r3, #0
    b876:	d103      	bne.n	b880 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b878:	4a0c      	ldr	r2, [pc, #48]	; (b8ac <_usb_d_dev_register_ep_callback+0x54>)
    b87a:	68fb      	ldr	r3, [r7, #12]
    b87c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b87e:	e00c      	b.n	b89a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b880:	79fb      	ldrb	r3, [r7, #7]
    b882:	2b01      	cmp	r3, #1
    b884:	d103      	bne.n	b88e <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b886:	4a09      	ldr	r2, [pc, #36]	; (b8ac <_usb_d_dev_register_ep_callback+0x54>)
    b888:	68fb      	ldr	r3, [r7, #12]
    b88a:	60d3      	str	r3, [r2, #12]
}
    b88c:	e005      	b.n	b89a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b88e:	79fb      	ldrb	r3, [r7, #7]
    b890:	2b02      	cmp	r3, #2
    b892:	d102      	bne.n	b89a <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b894:	4a05      	ldr	r2, [pc, #20]	; (b8ac <_usb_d_dev_register_ep_callback+0x54>)
    b896:	68fb      	ldr	r3, [r7, #12]
    b898:	6113      	str	r3, [r2, #16]
}
    b89a:	bf00      	nop
    b89c:	3714      	adds	r7, #20
    b89e:	46bd      	mov	sp, r7
    b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8a4:	4770      	bx	lr
    b8a6:	bf00      	nop
    b8a8:	000096f1 	.word	0x000096f1
    b8ac:	20000cec 	.word	0x20000cec

0000b8b0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b8b0:	b580      	push	{r7, lr}
    b8b2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b8b4:	4b01      	ldr	r3, [pc, #4]	; (b8bc <USB_0_Handler+0xc>)
    b8b6:	4798      	blx	r3
}
    b8b8:	bf00      	nop
    b8ba:	bd80      	pop	{r7, pc}
    b8bc:	0000ab21 	.word	0x0000ab21

0000b8c0 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b8c0:	b580      	push	{r7, lr}
    b8c2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b8c4:	4b01      	ldr	r3, [pc, #4]	; (b8cc <USB_1_Handler+0xc>)
    b8c6:	4798      	blx	r3
}
    b8c8:	bf00      	nop
    b8ca:	bd80      	pop	{r7, pc}
    b8cc:	0000ab21 	.word	0x0000ab21

0000b8d0 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b8d0:	b580      	push	{r7, lr}
    b8d2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b8d4:	4b01      	ldr	r3, [pc, #4]	; (b8dc <USB_2_Handler+0xc>)
    b8d6:	4798      	blx	r3
}
    b8d8:	bf00      	nop
    b8da:	bd80      	pop	{r7, pc}
    b8dc:	0000ab21 	.word	0x0000ab21

0000b8e0 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b8e0:	b580      	push	{r7, lr}
    b8e2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b8e4:	4b01      	ldr	r3, [pc, #4]	; (b8ec <USB_3_Handler+0xc>)
    b8e6:	4798      	blx	r3
}
    b8e8:	bf00      	nop
    b8ea:	bd80      	pop	{r7, pc}
    b8ec:	0000ab21 	.word	0x0000ab21

0000b8f0 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b8f0:	b480      	push	{r7}
    b8f2:	b083      	sub	sp, #12
    b8f4:	af00      	add	r7, sp, #0
    b8f6:	6078      	str	r0, [r7, #4]
    b8f8:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b8fa:	bf00      	nop
    b8fc:	687b      	ldr	r3, [r7, #4]
    b8fe:	689a      	ldr	r2, [r3, #8]
    b900:	683b      	ldr	r3, [r7, #0]
    b902:	4013      	ands	r3, r2
    b904:	2b00      	cmp	r3, #0
    b906:	d1f9      	bne.n	b8fc <hri_wdt_wait_for_sync+0xc>
	};
}
    b908:	bf00      	nop
    b90a:	370c      	adds	r7, #12
    b90c:	46bd      	mov	sp, r7
    b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b912:	4770      	bx	lr

0000b914 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b914:	b580      	push	{r7, lr}
    b916:	b084      	sub	sp, #16
    b918:	af00      	add	r7, sp, #0
    b91a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b91c:	210e      	movs	r1, #14
    b91e:	6878      	ldr	r0, [r7, #4]
    b920:	4b0a      	ldr	r3, [pc, #40]	; (b94c <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b922:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b924:	687b      	ldr	r3, [r7, #4]
    b926:	781b      	ldrb	r3, [r3, #0]
    b928:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b92a:	7bfb      	ldrb	r3, [r7, #15]
    b92c:	085b      	lsrs	r3, r3, #1
    b92e:	b2db      	uxtb	r3, r3
    b930:	f003 0301 	and.w	r3, r3, #1
    b934:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b936:	7bfb      	ldrb	r3, [r7, #15]
    b938:	2b00      	cmp	r3, #0
    b93a:	bf14      	ite	ne
    b93c:	2301      	movne	r3, #1
    b93e:	2300      	moveq	r3, #0
    b940:	b2db      	uxtb	r3, r3
}
    b942:	4618      	mov	r0, r3
    b944:	3710      	adds	r7, #16
    b946:	46bd      	mov	sp, r7
    b948:	bd80      	pop	{r7, pc}
    b94a:	bf00      	nop
    b94c:	0000b8f1 	.word	0x0000b8f1

0000b950 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b950:	b580      	push	{r7, lr}
    b952:	b082      	sub	sp, #8
    b954:	af00      	add	r7, sp, #0
    b956:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b958:	687b      	ldr	r3, [r7, #4]
    b95a:	781b      	ldrb	r3, [r3, #0]
    b95c:	b2db      	uxtb	r3, r3
    b95e:	f023 0304 	bic.w	r3, r3, #4
    b962:	b2da      	uxtb	r2, r3
    b964:	687b      	ldr	r3, [r7, #4]
    b966:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b968:	210e      	movs	r1, #14
    b96a:	6878      	ldr	r0, [r7, #4]
    b96c:	4b02      	ldr	r3, [pc, #8]	; (b978 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b96e:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b970:	bf00      	nop
    b972:	3708      	adds	r7, #8
    b974:	46bd      	mov	sp, r7
    b976:	bd80      	pop	{r7, pc}
    b978:	0000b8f1 	.word	0x0000b8f1

0000b97c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b97c:	b580      	push	{r7, lr}
    b97e:	b084      	sub	sp, #16
    b980:	af00      	add	r7, sp, #0
    b982:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b984:	210e      	movs	r1, #14
    b986:	6878      	ldr	r0, [r7, #4]
    b988:	4b08      	ldr	r3, [pc, #32]	; (b9ac <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b98a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b98c:	687b      	ldr	r3, [r7, #4]
    b98e:	781b      	ldrb	r3, [r3, #0]
    b990:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b992:	7bfb      	ldrb	r3, [r7, #15]
    b994:	09db      	lsrs	r3, r3, #7
    b996:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b998:	7bfb      	ldrb	r3, [r7, #15]
    b99a:	2b00      	cmp	r3, #0
    b99c:	bf14      	ite	ne
    b99e:	2301      	movne	r3, #1
    b9a0:	2300      	moveq	r3, #0
    b9a2:	b2db      	uxtb	r3, r3
}
    b9a4:	4618      	mov	r0, r3
    b9a6:	3710      	adds	r7, #16
    b9a8:	46bd      	mov	sp, r7
    b9aa:	bd80      	pop	{r7, pc}
    b9ac:	0000b8f1 	.word	0x0000b8f1

0000b9b0 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b9b0:	b480      	push	{r7}
    b9b2:	b085      	sub	sp, #20
    b9b4:	af00      	add	r7, sp, #0
    b9b6:	6078      	str	r0, [r7, #4]
    b9b8:	460b      	mov	r3, r1
    b9ba:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b9bc:	687b      	ldr	r3, [r7, #4]
    b9be:	785b      	ldrb	r3, [r3, #1]
    b9c0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b9c2:	7bfb      	ldrb	r3, [r7, #15]
    b9c4:	f023 030f 	bic.w	r3, r3, #15
    b9c8:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b9ca:	78fb      	ldrb	r3, [r7, #3]
    b9cc:	f003 030f 	and.w	r3, r3, #15
    b9d0:	b2da      	uxtb	r2, r3
    b9d2:	7bfb      	ldrb	r3, [r7, #15]
    b9d4:	4313      	orrs	r3, r2
    b9d6:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b9d8:	687b      	ldr	r3, [r7, #4]
    b9da:	7bfa      	ldrb	r2, [r7, #15]
    b9dc:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b9de:	bf00      	nop
    b9e0:	3714      	adds	r7, #20
    b9e2:	46bd      	mov	sp, r7
    b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9e8:	4770      	bx	lr
	...

0000b9ec <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b9ec:	b580      	push	{r7, lr}
    b9ee:	b082      	sub	sp, #8
    b9f0:	af00      	add	r7, sp, #0
    b9f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b9f4:	687b      	ldr	r3, [r7, #4]
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	d005      	beq.n	ba06 <_wdt_init+0x1a>
    b9fa:	687b      	ldr	r3, [r7, #4]
    b9fc:	681b      	ldr	r3, [r3, #0]
    b9fe:	2b00      	cmp	r3, #0
    ba00:	d001      	beq.n	ba06 <_wdt_init+0x1a>
    ba02:	2301      	movs	r3, #1
    ba04:	e000      	b.n	ba08 <_wdt_init+0x1c>
    ba06:	2300      	movs	r3, #0
    ba08:	f003 0301 	and.w	r3, r3, #1
    ba0c:	b2db      	uxtb	r3, r3
    ba0e:	2250      	movs	r2, #80	; 0x50
    ba10:	4913      	ldr	r1, [pc, #76]	; (ba60 <_wdt_init+0x74>)
    ba12:	4618      	mov	r0, r3
    ba14:	4b13      	ldr	r3, [pc, #76]	; (ba64 <_wdt_init+0x78>)
    ba16:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ba18:	687b      	ldr	r3, [r7, #4]
    ba1a:	681b      	ldr	r3, [r3, #0]
    ba1c:	4618      	mov	r0, r3
    ba1e:	4b12      	ldr	r3, [pc, #72]	; (ba68 <_wdt_init+0x7c>)
    ba20:	4798      	blx	r3
    ba22:	4603      	mov	r3, r0
    ba24:	2b00      	cmp	r3, #0
    ba26:	d107      	bne.n	ba38 <_wdt_init+0x4c>
    ba28:	687b      	ldr	r3, [r7, #4]
    ba2a:	681b      	ldr	r3, [r3, #0]
    ba2c:	4618      	mov	r0, r3
    ba2e:	4b0f      	ldr	r3, [pc, #60]	; (ba6c <_wdt_init+0x80>)
    ba30:	4798      	blx	r3
    ba32:	4603      	mov	r3, r0
    ba34:	2b00      	cmp	r3, #0
    ba36:	d002      	beq.n	ba3e <_wdt_init+0x52>
		return ERR_DENIED;
    ba38:	f06f 0310 	mvn.w	r3, #16
    ba3c:	e00b      	b.n	ba56 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    ba3e:	687b      	ldr	r3, [r7, #4]
    ba40:	681b      	ldr	r3, [r3, #0]
    ba42:	4618      	mov	r0, r3
    ba44:	4b0a      	ldr	r3, [pc, #40]	; (ba70 <_wdt_init+0x84>)
    ba46:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ba48:	687b      	ldr	r3, [r7, #4]
    ba4a:	681b      	ldr	r3, [r3, #0]
    ba4c:	210b      	movs	r1, #11
    ba4e:	4618      	mov	r0, r3
    ba50:	4b08      	ldr	r3, [pc, #32]	; (ba74 <_wdt_init+0x88>)
    ba52:	4798      	blx	r3
	}

	return ERR_NONE;
    ba54:	2300      	movs	r3, #0
}
    ba56:	4618      	mov	r0, r3
    ba58:	3708      	adds	r7, #8
    ba5a:	46bd      	mov	sp, r7
    ba5c:	bd80      	pop	{r7, pc}
    ba5e:	bf00      	nop
    ba60:	000101c4 	.word	0x000101c4
    ba64:	00003e69 	.word	0x00003e69
    ba68:	0000b97d 	.word	0x0000b97d
    ba6c:	0000b915 	.word	0x0000b915
    ba70:	0000b951 	.word	0x0000b951
    ba74:	0000b9b1 	.word	0x0000b9b1

0000ba78 <hri_port_set_DIR_reg>:
{
    ba78:	b480      	push	{r7}
    ba7a:	b085      	sub	sp, #20
    ba7c:	af00      	add	r7, sp, #0
    ba7e:	60f8      	str	r0, [r7, #12]
    ba80:	460b      	mov	r3, r1
    ba82:	607a      	str	r2, [r7, #4]
    ba84:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    ba86:	7afb      	ldrb	r3, [r7, #11]
    ba88:	68fa      	ldr	r2, [r7, #12]
    ba8a:	01db      	lsls	r3, r3, #7
    ba8c:	4413      	add	r3, r2
    ba8e:	3308      	adds	r3, #8
    ba90:	687a      	ldr	r2, [r7, #4]
    ba92:	601a      	str	r2, [r3, #0]
}
    ba94:	bf00      	nop
    ba96:	3714      	adds	r7, #20
    ba98:	46bd      	mov	sp, r7
    ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba9e:	4770      	bx	lr

0000baa0 <hri_port_clear_DIR_reg>:
{
    baa0:	b480      	push	{r7}
    baa2:	b085      	sub	sp, #20
    baa4:	af00      	add	r7, sp, #0
    baa6:	60f8      	str	r0, [r7, #12]
    baa8:	460b      	mov	r3, r1
    baaa:	607a      	str	r2, [r7, #4]
    baac:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    baae:	7afb      	ldrb	r3, [r7, #11]
    bab0:	68fa      	ldr	r2, [r7, #12]
    bab2:	01db      	lsls	r3, r3, #7
    bab4:	4413      	add	r3, r2
    bab6:	3304      	adds	r3, #4
    bab8:	687a      	ldr	r2, [r7, #4]
    baba:	601a      	str	r2, [r3, #0]
}
    babc:	bf00      	nop
    babe:	3714      	adds	r7, #20
    bac0:	46bd      	mov	sp, r7
    bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bac6:	4770      	bx	lr

0000bac8 <hri_port_set_OUT_reg>:
{
    bac8:	b480      	push	{r7}
    baca:	b085      	sub	sp, #20
    bacc:	af00      	add	r7, sp, #0
    bace:	60f8      	str	r0, [r7, #12]
    bad0:	460b      	mov	r3, r1
    bad2:	607a      	str	r2, [r7, #4]
    bad4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    bad6:	7afb      	ldrb	r3, [r7, #11]
    bad8:	68fa      	ldr	r2, [r7, #12]
    bada:	01db      	lsls	r3, r3, #7
    badc:	4413      	add	r3, r2
    bade:	3318      	adds	r3, #24
    bae0:	687a      	ldr	r2, [r7, #4]
    bae2:	601a      	str	r2, [r3, #0]
}
    bae4:	bf00      	nop
    bae6:	3714      	adds	r7, #20
    bae8:	46bd      	mov	sp, r7
    baea:	f85d 7b04 	ldr.w	r7, [sp], #4
    baee:	4770      	bx	lr

0000baf0 <hri_port_clear_OUT_reg>:
{
    baf0:	b480      	push	{r7}
    baf2:	b085      	sub	sp, #20
    baf4:	af00      	add	r7, sp, #0
    baf6:	60f8      	str	r0, [r7, #12]
    baf8:	460b      	mov	r3, r1
    bafa:	607a      	str	r2, [r7, #4]
    bafc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    bafe:	7afb      	ldrb	r3, [r7, #11]
    bb00:	68fa      	ldr	r2, [r7, #12]
    bb02:	01db      	lsls	r3, r3, #7
    bb04:	4413      	add	r3, r2
    bb06:	3314      	adds	r3, #20
    bb08:	687a      	ldr	r2, [r7, #4]
    bb0a:	601a      	str	r2, [r3, #0]
}
    bb0c:	bf00      	nop
    bb0e:	3714      	adds	r7, #20
    bb10:	46bd      	mov	sp, r7
    bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb16:	4770      	bx	lr

0000bb18 <hri_port_write_PMUX_PMUXE_bf>:
{
    bb18:	b480      	push	{r7}
    bb1a:	b085      	sub	sp, #20
    bb1c:	af00      	add	r7, sp, #0
    bb1e:	6078      	str	r0, [r7, #4]
    bb20:	4608      	mov	r0, r1
    bb22:	4611      	mov	r1, r2
    bb24:	461a      	mov	r2, r3
    bb26:	4603      	mov	r3, r0
    bb28:	70fb      	strb	r3, [r7, #3]
    bb2a:	460b      	mov	r3, r1
    bb2c:	70bb      	strb	r3, [r7, #2]
    bb2e:	4613      	mov	r3, r2
    bb30:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    bb32:	78fa      	ldrb	r2, [r7, #3]
    bb34:	78bb      	ldrb	r3, [r7, #2]
    bb36:	6879      	ldr	r1, [r7, #4]
    bb38:	01d2      	lsls	r2, r2, #7
    bb3a:	440a      	add	r2, r1
    bb3c:	4413      	add	r3, r2
    bb3e:	3330      	adds	r3, #48	; 0x30
    bb40:	781b      	ldrb	r3, [r3, #0]
    bb42:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    bb44:	7bfb      	ldrb	r3, [r7, #15]
    bb46:	f023 030f 	bic.w	r3, r3, #15
    bb4a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    bb4c:	787b      	ldrb	r3, [r7, #1]
    bb4e:	f003 030f 	and.w	r3, r3, #15
    bb52:	b2da      	uxtb	r2, r3
    bb54:	7bfb      	ldrb	r3, [r7, #15]
    bb56:	4313      	orrs	r3, r2
    bb58:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    bb5a:	78fa      	ldrb	r2, [r7, #3]
    bb5c:	78bb      	ldrb	r3, [r7, #2]
    bb5e:	6879      	ldr	r1, [r7, #4]
    bb60:	01d2      	lsls	r2, r2, #7
    bb62:	440a      	add	r2, r1
    bb64:	4413      	add	r3, r2
    bb66:	3330      	adds	r3, #48	; 0x30
    bb68:	7bfa      	ldrb	r2, [r7, #15]
    bb6a:	701a      	strb	r2, [r3, #0]
}
    bb6c:	bf00      	nop
    bb6e:	3714      	adds	r7, #20
    bb70:	46bd      	mov	sp, r7
    bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb76:	4770      	bx	lr

0000bb78 <hri_port_write_PMUX_PMUXO_bf>:
{
    bb78:	b480      	push	{r7}
    bb7a:	b085      	sub	sp, #20
    bb7c:	af00      	add	r7, sp, #0
    bb7e:	6078      	str	r0, [r7, #4]
    bb80:	4608      	mov	r0, r1
    bb82:	4611      	mov	r1, r2
    bb84:	461a      	mov	r2, r3
    bb86:	4603      	mov	r3, r0
    bb88:	70fb      	strb	r3, [r7, #3]
    bb8a:	460b      	mov	r3, r1
    bb8c:	70bb      	strb	r3, [r7, #2]
    bb8e:	4613      	mov	r3, r2
    bb90:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    bb92:	78fa      	ldrb	r2, [r7, #3]
    bb94:	78bb      	ldrb	r3, [r7, #2]
    bb96:	6879      	ldr	r1, [r7, #4]
    bb98:	01d2      	lsls	r2, r2, #7
    bb9a:	440a      	add	r2, r1
    bb9c:	4413      	add	r3, r2
    bb9e:	3330      	adds	r3, #48	; 0x30
    bba0:	781b      	ldrb	r3, [r3, #0]
    bba2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    bba4:	7bfb      	ldrb	r3, [r7, #15]
    bba6:	f003 030f 	and.w	r3, r3, #15
    bbaa:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    bbac:	787b      	ldrb	r3, [r7, #1]
    bbae:	011b      	lsls	r3, r3, #4
    bbb0:	b2da      	uxtb	r2, r3
    bbb2:	7bfb      	ldrb	r3, [r7, #15]
    bbb4:	4313      	orrs	r3, r2
    bbb6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    bbb8:	78fa      	ldrb	r2, [r7, #3]
    bbba:	78bb      	ldrb	r3, [r7, #2]
    bbbc:	6879      	ldr	r1, [r7, #4]
    bbbe:	01d2      	lsls	r2, r2, #7
    bbc0:	440a      	add	r2, r1
    bbc2:	4413      	add	r3, r2
    bbc4:	3330      	adds	r3, #48	; 0x30
    bbc6:	7bfa      	ldrb	r2, [r7, #15]
    bbc8:	701a      	strb	r2, [r3, #0]
}
    bbca:	bf00      	nop
    bbcc:	3714      	adds	r7, #20
    bbce:	46bd      	mov	sp, r7
    bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbd4:	4770      	bx	lr

0000bbd6 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    bbd6:	b480      	push	{r7}
    bbd8:	b085      	sub	sp, #20
    bbda:	af00      	add	r7, sp, #0
    bbdc:	6078      	str	r0, [r7, #4]
    bbde:	4608      	mov	r0, r1
    bbe0:	4611      	mov	r1, r2
    bbe2:	461a      	mov	r2, r3
    bbe4:	4603      	mov	r3, r0
    bbe6:	70fb      	strb	r3, [r7, #3]
    bbe8:	460b      	mov	r3, r1
    bbea:	70bb      	strb	r3, [r7, #2]
    bbec:	4613      	mov	r3, r2
    bbee:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    bbf0:	78fa      	ldrb	r2, [r7, #3]
    bbf2:	78bb      	ldrb	r3, [r7, #2]
    bbf4:	6879      	ldr	r1, [r7, #4]
    bbf6:	01d2      	lsls	r2, r2, #7
    bbf8:	440a      	add	r2, r1
    bbfa:	4413      	add	r3, r2
    bbfc:	3340      	adds	r3, #64	; 0x40
    bbfe:	781b      	ldrb	r3, [r3, #0]
    bc00:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    bc02:	7bfb      	ldrb	r3, [r7, #15]
    bc04:	f023 0301 	bic.w	r3, r3, #1
    bc08:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    bc0a:	787a      	ldrb	r2, [r7, #1]
    bc0c:	7bfb      	ldrb	r3, [r7, #15]
    bc0e:	4313      	orrs	r3, r2
    bc10:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    bc12:	78fa      	ldrb	r2, [r7, #3]
    bc14:	78bb      	ldrb	r3, [r7, #2]
    bc16:	6879      	ldr	r1, [r7, #4]
    bc18:	01d2      	lsls	r2, r2, #7
    bc1a:	440a      	add	r2, r1
    bc1c:	4413      	add	r3, r2
    bc1e:	3340      	adds	r3, #64	; 0x40
    bc20:	7bfa      	ldrb	r2, [r7, #15]
    bc22:	701a      	strb	r2, [r3, #0]
}
    bc24:	bf00      	nop
    bc26:	3714      	adds	r7, #20
    bc28:	46bd      	mov	sp, r7
    bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc2e:	4770      	bx	lr

0000bc30 <hri_port_write_WRCONFIG_reg>:
{
    bc30:	b480      	push	{r7}
    bc32:	b085      	sub	sp, #20
    bc34:	af00      	add	r7, sp, #0
    bc36:	60f8      	str	r0, [r7, #12]
    bc38:	460b      	mov	r3, r1
    bc3a:	607a      	str	r2, [r7, #4]
    bc3c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    bc3e:	7afb      	ldrb	r3, [r7, #11]
    bc40:	68fa      	ldr	r2, [r7, #12]
    bc42:	01db      	lsls	r3, r3, #7
    bc44:	4413      	add	r3, r2
    bc46:	3328      	adds	r3, #40	; 0x28
    bc48:	687a      	ldr	r2, [r7, #4]
    bc4a:	601a      	str	r2, [r3, #0]
}
    bc4c:	bf00      	nop
    bc4e:	3714      	adds	r7, #20
    bc50:	46bd      	mov	sp, r7
    bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc56:	4770      	bx	lr

0000bc58 <_gpio_set_direction>:
{
    bc58:	b580      	push	{r7, lr}
    bc5a:	b082      	sub	sp, #8
    bc5c:	af00      	add	r7, sp, #0
    bc5e:	4603      	mov	r3, r0
    bc60:	6039      	str	r1, [r7, #0]
    bc62:	71fb      	strb	r3, [r7, #7]
    bc64:	4613      	mov	r3, r2
    bc66:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    bc68:	79bb      	ldrb	r3, [r7, #6]
    bc6a:	2b01      	cmp	r3, #1
    bc6c:	d01c      	beq.n	bca8 <_gpio_set_direction+0x50>
    bc6e:	2b02      	cmp	r3, #2
    bc70:	d037      	beq.n	bce2 <_gpio_set_direction+0x8a>
    bc72:	2b00      	cmp	r3, #0
    bc74:	d14e      	bne.n	bd14 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    bc76:	79fb      	ldrb	r3, [r7, #7]
    bc78:	683a      	ldr	r2, [r7, #0]
    bc7a:	4619      	mov	r1, r3
    bc7c:	482a      	ldr	r0, [pc, #168]	; (bd28 <_gpio_set_direction+0xd0>)
    bc7e:	4b2b      	ldr	r3, [pc, #172]	; (bd2c <_gpio_set_direction+0xd4>)
    bc80:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    bc82:	683b      	ldr	r3, [r7, #0]
    bc84:	b29b      	uxth	r3, r3
    bc86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bc8a:	79fb      	ldrb	r3, [r7, #7]
    bc8c:	4619      	mov	r1, r3
    bc8e:	4826      	ldr	r0, [pc, #152]	; (bd28 <_gpio_set_direction+0xd0>)
    bc90:	4b27      	ldr	r3, [pc, #156]	; (bd30 <_gpio_set_direction+0xd8>)
    bc92:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    bc94:	683b      	ldr	r3, [r7, #0]
    bc96:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    bc98:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    bc9c:	79fb      	ldrb	r3, [r7, #7]
    bc9e:	4619      	mov	r1, r3
    bca0:	4821      	ldr	r0, [pc, #132]	; (bd28 <_gpio_set_direction+0xd0>)
    bca2:	4b23      	ldr	r3, [pc, #140]	; (bd30 <_gpio_set_direction+0xd8>)
    bca4:	4798      	blx	r3
		break;
    bca6:	e03a      	b.n	bd1e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    bca8:	79fb      	ldrb	r3, [r7, #7]
    bcaa:	683a      	ldr	r2, [r7, #0]
    bcac:	4619      	mov	r1, r3
    bcae:	481e      	ldr	r0, [pc, #120]	; (bd28 <_gpio_set_direction+0xd0>)
    bcb0:	4b1e      	ldr	r3, [pc, #120]	; (bd2c <_gpio_set_direction+0xd4>)
    bcb2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    bcb4:	683b      	ldr	r3, [r7, #0]
    bcb6:	b29b      	uxth	r3, r3
    bcb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    bcbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bcc0:	79f9      	ldrb	r1, [r7, #7]
    bcc2:	461a      	mov	r2, r3
    bcc4:	4818      	ldr	r0, [pc, #96]	; (bd28 <_gpio_set_direction+0xd0>)
    bcc6:	4b1a      	ldr	r3, [pc, #104]	; (bd30 <_gpio_set_direction+0xd8>)
    bcc8:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    bcca:	683b      	ldr	r3, [r7, #0]
    bccc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    bcce:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    bcd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bcd6:	79f9      	ldrb	r1, [r7, #7]
    bcd8:	461a      	mov	r2, r3
    bcda:	4813      	ldr	r0, [pc, #76]	; (bd28 <_gpio_set_direction+0xd0>)
    bcdc:	4b14      	ldr	r3, [pc, #80]	; (bd30 <_gpio_set_direction+0xd8>)
    bcde:	4798      	blx	r3
		break;
    bce0:	e01d      	b.n	bd1e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    bce2:	79fb      	ldrb	r3, [r7, #7]
    bce4:	683a      	ldr	r2, [r7, #0]
    bce6:	4619      	mov	r1, r3
    bce8:	480f      	ldr	r0, [pc, #60]	; (bd28 <_gpio_set_direction+0xd0>)
    bcea:	4b12      	ldr	r3, [pc, #72]	; (bd34 <_gpio_set_direction+0xdc>)
    bcec:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    bcee:	683b      	ldr	r3, [r7, #0]
    bcf0:	b29b      	uxth	r3, r3
    bcf2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bcf6:	79fb      	ldrb	r3, [r7, #7]
    bcf8:	4619      	mov	r1, r3
    bcfa:	480b      	ldr	r0, [pc, #44]	; (bd28 <_gpio_set_direction+0xd0>)
    bcfc:	4b0c      	ldr	r3, [pc, #48]	; (bd30 <_gpio_set_direction+0xd8>)
    bcfe:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    bd00:	683b      	ldr	r3, [r7, #0]
    bd02:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    bd04:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    bd08:	79fb      	ldrb	r3, [r7, #7]
    bd0a:	4619      	mov	r1, r3
    bd0c:	4806      	ldr	r0, [pc, #24]	; (bd28 <_gpio_set_direction+0xd0>)
    bd0e:	4b08      	ldr	r3, [pc, #32]	; (bd30 <_gpio_set_direction+0xd8>)
    bd10:	4798      	blx	r3
		break;
    bd12:	e004      	b.n	bd1e <_gpio_set_direction+0xc6>
		ASSERT(false);
    bd14:	2246      	movs	r2, #70	; 0x46
    bd16:	4908      	ldr	r1, [pc, #32]	; (bd38 <_gpio_set_direction+0xe0>)
    bd18:	2000      	movs	r0, #0
    bd1a:	4b08      	ldr	r3, [pc, #32]	; (bd3c <_gpio_set_direction+0xe4>)
    bd1c:	4798      	blx	r3
}
    bd1e:	bf00      	nop
    bd20:	3708      	adds	r7, #8
    bd22:	46bd      	mov	sp, r7
    bd24:	bd80      	pop	{r7, pc}
    bd26:	bf00      	nop
    bd28:	41008000 	.word	0x41008000
    bd2c:	0000baa1 	.word	0x0000baa1
    bd30:	0000bc31 	.word	0x0000bc31
    bd34:	0000ba79 	.word	0x0000ba79
    bd38:	000101dc 	.word	0x000101dc
    bd3c:	00003e69 	.word	0x00003e69

0000bd40 <_gpio_set_level>:
{
    bd40:	b580      	push	{r7, lr}
    bd42:	b082      	sub	sp, #8
    bd44:	af00      	add	r7, sp, #0
    bd46:	4603      	mov	r3, r0
    bd48:	6039      	str	r1, [r7, #0]
    bd4a:	71fb      	strb	r3, [r7, #7]
    bd4c:	4613      	mov	r3, r2
    bd4e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    bd50:	79bb      	ldrb	r3, [r7, #6]
    bd52:	2b00      	cmp	r3, #0
    bd54:	d006      	beq.n	bd64 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    bd56:	79fb      	ldrb	r3, [r7, #7]
    bd58:	683a      	ldr	r2, [r7, #0]
    bd5a:	4619      	mov	r1, r3
    bd5c:	4806      	ldr	r0, [pc, #24]	; (bd78 <_gpio_set_level+0x38>)
    bd5e:	4b07      	ldr	r3, [pc, #28]	; (bd7c <_gpio_set_level+0x3c>)
    bd60:	4798      	blx	r3
}
    bd62:	e005      	b.n	bd70 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    bd64:	79fb      	ldrb	r3, [r7, #7]
    bd66:	683a      	ldr	r2, [r7, #0]
    bd68:	4619      	mov	r1, r3
    bd6a:	4803      	ldr	r0, [pc, #12]	; (bd78 <_gpio_set_level+0x38>)
    bd6c:	4b04      	ldr	r3, [pc, #16]	; (bd80 <_gpio_set_level+0x40>)
    bd6e:	4798      	blx	r3
}
    bd70:	bf00      	nop
    bd72:	3708      	adds	r7, #8
    bd74:	46bd      	mov	sp, r7
    bd76:	bd80      	pop	{r7, pc}
    bd78:	41008000 	.word	0x41008000
    bd7c:	0000bac9 	.word	0x0000bac9
    bd80:	0000baf1 	.word	0x0000baf1

0000bd84 <_gpio_set_pin_function>:
{
    bd84:	b590      	push	{r4, r7, lr}
    bd86:	b085      	sub	sp, #20
    bd88:	af00      	add	r7, sp, #0
    bd8a:	6078      	str	r0, [r7, #4]
    bd8c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    bd8e:	687b      	ldr	r3, [r7, #4]
    bd90:	095b      	lsrs	r3, r3, #5
    bd92:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    bd94:	687b      	ldr	r3, [r7, #4]
    bd96:	b2db      	uxtb	r3, r3
    bd98:	f003 031f 	and.w	r3, r3, #31
    bd9c:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    bd9e:	683b      	ldr	r3, [r7, #0]
    bda0:	f1b3 3fff 	cmp.w	r3, #4294967295
    bda4:	d106      	bne.n	bdb4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    bda6:	7bba      	ldrb	r2, [r7, #14]
    bda8:	7bf9      	ldrb	r1, [r7, #15]
    bdaa:	2300      	movs	r3, #0
    bdac:	4812      	ldr	r0, [pc, #72]	; (bdf8 <_gpio_set_pin_function+0x74>)
    bdae:	4c13      	ldr	r4, [pc, #76]	; (bdfc <_gpio_set_pin_function+0x78>)
    bdb0:	47a0      	blx	r4
}
    bdb2:	e01d      	b.n	bdf0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    bdb4:	7bba      	ldrb	r2, [r7, #14]
    bdb6:	7bf9      	ldrb	r1, [r7, #15]
    bdb8:	2301      	movs	r3, #1
    bdba:	480f      	ldr	r0, [pc, #60]	; (bdf8 <_gpio_set_pin_function+0x74>)
    bdbc:	4c0f      	ldr	r4, [pc, #60]	; (bdfc <_gpio_set_pin_function+0x78>)
    bdbe:	47a0      	blx	r4
		if (pin & 1) {
    bdc0:	7bbb      	ldrb	r3, [r7, #14]
    bdc2:	f003 0301 	and.w	r3, r3, #1
    bdc6:	2b00      	cmp	r3, #0
    bdc8:	d009      	beq.n	bdde <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    bdca:	7bbb      	ldrb	r3, [r7, #14]
    bdcc:	085b      	lsrs	r3, r3, #1
    bdce:	b2da      	uxtb	r2, r3
    bdd0:	683b      	ldr	r3, [r7, #0]
    bdd2:	b2db      	uxtb	r3, r3
    bdd4:	7bf9      	ldrb	r1, [r7, #15]
    bdd6:	4808      	ldr	r0, [pc, #32]	; (bdf8 <_gpio_set_pin_function+0x74>)
    bdd8:	4c09      	ldr	r4, [pc, #36]	; (be00 <_gpio_set_pin_function+0x7c>)
    bdda:	47a0      	blx	r4
}
    bddc:	e008      	b.n	bdf0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    bdde:	7bbb      	ldrb	r3, [r7, #14]
    bde0:	085b      	lsrs	r3, r3, #1
    bde2:	b2da      	uxtb	r2, r3
    bde4:	683b      	ldr	r3, [r7, #0]
    bde6:	b2db      	uxtb	r3, r3
    bde8:	7bf9      	ldrb	r1, [r7, #15]
    bdea:	4803      	ldr	r0, [pc, #12]	; (bdf8 <_gpio_set_pin_function+0x74>)
    bdec:	4c05      	ldr	r4, [pc, #20]	; (be04 <_gpio_set_pin_function+0x80>)
    bdee:	47a0      	blx	r4
}
    bdf0:	bf00      	nop
    bdf2:	3714      	adds	r7, #20
    bdf4:	46bd      	mov	sp, r7
    bdf6:	bd90      	pop	{r4, r7, pc}
    bdf8:	41008000 	.word	0x41008000
    bdfc:	0000bbd7 	.word	0x0000bbd7
    be00:	0000bb79 	.word	0x0000bb79
    be04:	0000bb19 	.word	0x0000bb19

0000be08 <gpio_set_pin_function>:
{
    be08:	b580      	push	{r7, lr}
    be0a:	b082      	sub	sp, #8
    be0c:	af00      	add	r7, sp, #0
    be0e:	6078      	str	r0, [r7, #4]
    be10:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    be12:	6839      	ldr	r1, [r7, #0]
    be14:	6878      	ldr	r0, [r7, #4]
    be16:	4b03      	ldr	r3, [pc, #12]	; (be24 <gpio_set_pin_function+0x1c>)
    be18:	4798      	blx	r3
}
    be1a:	bf00      	nop
    be1c:	3708      	adds	r7, #8
    be1e:	46bd      	mov	sp, r7
    be20:	bd80      	pop	{r7, pc}
    be22:	bf00      	nop
    be24:	0000bd85 	.word	0x0000bd85

0000be28 <gpio_set_pin_direction>:
{
    be28:	b580      	push	{r7, lr}
    be2a:	b082      	sub	sp, #8
    be2c:	af00      	add	r7, sp, #0
    be2e:	4603      	mov	r3, r0
    be30:	460a      	mov	r2, r1
    be32:	71fb      	strb	r3, [r7, #7]
    be34:	4613      	mov	r3, r2
    be36:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    be38:	79fb      	ldrb	r3, [r7, #7]
    be3a:	095b      	lsrs	r3, r3, #5
    be3c:	b2d8      	uxtb	r0, r3
    be3e:	79fb      	ldrb	r3, [r7, #7]
    be40:	f003 031f 	and.w	r3, r3, #31
    be44:	2201      	movs	r2, #1
    be46:	fa02 f303 	lsl.w	r3, r2, r3
    be4a:	79ba      	ldrb	r2, [r7, #6]
    be4c:	4619      	mov	r1, r3
    be4e:	4b03      	ldr	r3, [pc, #12]	; (be5c <gpio_set_pin_direction+0x34>)
    be50:	4798      	blx	r3
}
    be52:	bf00      	nop
    be54:	3708      	adds	r7, #8
    be56:	46bd      	mov	sp, r7
    be58:	bd80      	pop	{r7, pc}
    be5a:	bf00      	nop
    be5c:	0000bc59 	.word	0x0000bc59

0000be60 <gpio_set_pin_level>:
{
    be60:	b580      	push	{r7, lr}
    be62:	b082      	sub	sp, #8
    be64:	af00      	add	r7, sp, #0
    be66:	4603      	mov	r3, r0
    be68:	460a      	mov	r2, r1
    be6a:	71fb      	strb	r3, [r7, #7]
    be6c:	4613      	mov	r3, r2
    be6e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    be70:	79fb      	ldrb	r3, [r7, #7]
    be72:	095b      	lsrs	r3, r3, #5
    be74:	b2d8      	uxtb	r0, r3
    be76:	79fb      	ldrb	r3, [r7, #7]
    be78:	f003 031f 	and.w	r3, r3, #31
    be7c:	2201      	movs	r2, #1
    be7e:	fa02 f303 	lsl.w	r3, r2, r3
    be82:	79ba      	ldrb	r2, [r7, #6]
    be84:	4619      	mov	r1, r3
    be86:	4b03      	ldr	r3, [pc, #12]	; (be94 <gpio_set_pin_level+0x34>)
    be88:	4798      	blx	r3
}
    be8a:	bf00      	nop
    be8c:	3708      	adds	r7, #8
    be8e:	46bd      	mov	sp, r7
    be90:	bd80      	pop	{r7, pc}
    be92:	bf00      	nop
    be94:	0000bd41 	.word	0x0000bd41

0000be98 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    be98:	b580      	push	{r7, lr}
    be9a:	b082      	sub	sp, #8
    be9c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    be9e:	2100      	movs	r1, #0
    bea0:	2008      	movs	r0, #8
    bea2:	4b24      	ldr	r3, [pc, #144]	; (bf34 <QSPI_N25Q256_exit_xip+0x9c>)
    bea4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    bea6:	2100      	movs	r1, #0
    bea8:	202b      	movs	r0, #43	; 0x2b
    beaa:	4b22      	ldr	r3, [pc, #136]	; (bf34 <QSPI_N25Q256_exit_xip+0x9c>)
    beac:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    beae:	2100      	movs	r1, #0
    beb0:	202a      	movs	r0, #42	; 0x2a
    beb2:	4b20      	ldr	r3, [pc, #128]	; (bf34 <QSPI_N25Q256_exit_xip+0x9c>)
    beb4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    beb6:	2102      	movs	r1, #2
    beb8:	2008      	movs	r0, #8
    beba:	4b1f      	ldr	r3, [pc, #124]	; (bf38 <QSPI_N25Q256_exit_xip+0xa0>)
    bebc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    bebe:	2102      	movs	r1, #2
    bec0:	202b      	movs	r0, #43	; 0x2b
    bec2:	4b1d      	ldr	r3, [pc, #116]	; (bf38 <QSPI_N25Q256_exit_xip+0xa0>)
    bec4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bec6:	2102      	movs	r1, #2
    bec8:	202a      	movs	r0, #42	; 0x2a
    beca:	4b1b      	ldr	r3, [pc, #108]	; (bf38 <QSPI_N25Q256_exit_xip+0xa0>)
    becc:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bece:	2101      	movs	r1, #1
    bed0:	2008      	movs	r0, #8
    bed2:	4b1a      	ldr	r3, [pc, #104]	; (bf3c <QSPI_N25Q256_exit_xip+0xa4>)
    bed4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bed6:	2100      	movs	r1, #0
    bed8:	202b      	movs	r0, #43	; 0x2b
    beda:	4b18      	ldr	r3, [pc, #96]	; (bf3c <QSPI_N25Q256_exit_xip+0xa4>)
    bedc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bede:	2100      	movs	r1, #0
    bee0:	202a      	movs	r0, #42	; 0x2a
    bee2:	4b16      	ldr	r3, [pc, #88]	; (bf3c <QSPI_N25Q256_exit_xip+0xa4>)
    bee4:	4798      	blx	r3

	delay_us(1);
    bee6:	2001      	movs	r0, #1
    bee8:	4b15      	ldr	r3, [pc, #84]	; (bf40 <QSPI_N25Q256_exit_xip+0xa8>)
    beea:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    beec:	2300      	movs	r3, #0
    beee:	607b      	str	r3, [r7, #4]
    bef0:	e010      	b.n	bf14 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bef2:	2101      	movs	r1, #1
    bef4:	202a      	movs	r0, #42	; 0x2a
    bef6:	4b11      	ldr	r3, [pc, #68]	; (bf3c <QSPI_N25Q256_exit_xip+0xa4>)
    bef8:	4798      	blx	r3
		delay_us(1);
    befa:	2001      	movs	r0, #1
    befc:	4b10      	ldr	r3, [pc, #64]	; (bf40 <QSPI_N25Q256_exit_xip+0xa8>)
    befe:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bf00:	2100      	movs	r1, #0
    bf02:	202a      	movs	r0, #42	; 0x2a
    bf04:	4b0d      	ldr	r3, [pc, #52]	; (bf3c <QSPI_N25Q256_exit_xip+0xa4>)
    bf06:	4798      	blx	r3
		delay_us(1);
    bf08:	2001      	movs	r0, #1
    bf0a:	4b0d      	ldr	r3, [pc, #52]	; (bf40 <QSPI_N25Q256_exit_xip+0xa8>)
    bf0c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    bf0e:	687b      	ldr	r3, [r7, #4]
    bf10:	3301      	adds	r3, #1
    bf12:	607b      	str	r3, [r7, #4]
    bf14:	687b      	ldr	r3, [r7, #4]
    bf16:	2b06      	cmp	r3, #6
    bf18:	ddeb      	ble.n	bef2 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    bf1a:	2101      	movs	r1, #1
    bf1c:	202b      	movs	r0, #43	; 0x2b
    bf1e:	4b07      	ldr	r3, [pc, #28]	; (bf3c <QSPI_N25Q256_exit_xip+0xa4>)
    bf20:	4798      	blx	r3
	delay_us(1);
    bf22:	2001      	movs	r0, #1
    bf24:	4b06      	ldr	r3, [pc, #24]	; (bf40 <QSPI_N25Q256_exit_xip+0xa8>)
    bf26:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    bf28:	4b06      	ldr	r3, [pc, #24]	; (bf44 <QSPI_N25Q256_exit_xip+0xac>)
    bf2a:	4798      	blx	r3
}
    bf2c:	bf00      	nop
    bf2e:	3708      	adds	r7, #8
    bf30:	46bd      	mov	sp, r7
    bf32:	bd80      	pop	{r7, pc}
    bf34:	0000be09 	.word	0x0000be09
    bf38:	0000be29 	.word	0x0000be29
    bf3c:	0000be61 	.word	0x0000be61
    bf40:	000025d5 	.word	0x000025d5
    bf44:	00001989 	.word	0x00001989

0000bf48 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    bf48:	b598      	push	{r3, r4, r7, lr}
    bf4a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    bf4c:	4806      	ldr	r0, [pc, #24]	; (bf68 <spi_nor_flash_init+0x20>)
    bf4e:	4b07      	ldr	r3, [pc, #28]	; (bf6c <spi_nor_flash_init+0x24>)
    bf50:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    bf52:	2300      	movs	r3, #0
    bf54:	4a06      	ldr	r2, [pc, #24]	; (bf70 <spi_nor_flash_init+0x28>)
    bf56:	4904      	ldr	r1, [pc, #16]	; (bf68 <spi_nor_flash_init+0x20>)
    bf58:	4806      	ldr	r0, [pc, #24]	; (bf74 <spi_nor_flash_init+0x2c>)
    bf5a:	4c07      	ldr	r4, [pc, #28]	; (bf78 <spi_nor_flash_init+0x30>)
    bf5c:	47a0      	blx	r4
    bf5e:	4602      	mov	r2, r0
    bf60:	4b06      	ldr	r3, [pc, #24]	; (bf7c <spi_nor_flash_init+0x34>)
    bf62:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    bf64:	bf00      	nop
    bf66:	bd98      	pop	{r3, r4, r7, pc}
    bf68:	20001380 	.word	0x20001380
    bf6c:	00002d11 	.word	0x00002d11
    bf70:	0000be99 	.word	0x0000be99
    bf74:	20000e54 	.word	0x20000e54
    bf78:	0000c3b5 	.word	0x0000c3b5
    bf7c:	200015a0 	.word	0x200015a0

0000bf80 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    bf80:	b580      	push	{r7, lr}
    bf82:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bf84:	4805      	ldr	r0, [pc, #20]	; (bf9c <cdc_device_acm_init+0x1c>)
    bf86:	4b06      	ldr	r3, [pc, #24]	; (bfa0 <cdc_device_acm_init+0x20>)
    bf88:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    bf8a:	4b06      	ldr	r3, [pc, #24]	; (bfa4 <cdc_device_acm_init+0x24>)
    bf8c:	4798      	blx	r3

	usbdc_start(single_desc);
    bf8e:	4806      	ldr	r0, [pc, #24]	; (bfa8 <cdc_device_acm_init+0x28>)
    bf90:	4b06      	ldr	r3, [pc, #24]	; (bfac <cdc_device_acm_init+0x2c>)
    bf92:	4798      	blx	r3
	usbdc_attach();
    bf94:	4b06      	ldr	r3, [pc, #24]	; (bfb0 <cdc_device_acm_init+0x30>)
    bf96:	4798      	blx	r3
}
    bf98:	bf00      	nop
    bf9a:	bd80      	pop	{r7, pc}
    bf9c:	20000ea4 	.word	0x20000ea4
    bfa0:	0000dadd 	.word	0x0000dadd
    bfa4:	0000cd55 	.word	0x0000cd55
    bfa8:	200001d0 	.word	0x200001d0
    bfac:	0000db79 	.word	0x0000db79
    bfb0:	0000dbc9 	.word	0x0000dbc9

0000bfb4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    bfb4:	b580      	push	{r7, lr}
    bfb6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    bfb8:	4b01      	ldr	r3, [pc, #4]	; (bfc0 <usb_init+0xc>)
    bfba:	4798      	blx	r3
}
    bfbc:	bf00      	nop
    bfbe:	bd80      	pop	{r7, pc}
    bfc0:	0000bf81 	.word	0x0000bf81

0000bfc4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    bfc4:	b480      	push	{r7}
    bfc6:	b085      	sub	sp, #20
    bfc8:	af00      	add	r7, sp, #0
    bfca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    bfcc:	f3ef 8310 	mrs	r3, PRIMASK
    bfd0:	60fb      	str	r3, [r7, #12]
  return(result);
    bfd2:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    bfd4:	687b      	ldr	r3, [r7, #4]
    bfd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    bfd8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    bfda:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    bfde:	bf00      	nop
    bfe0:	3714      	adds	r7, #20
    bfe2:	46bd      	mov	sp, r7
    bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
    bfe8:	4770      	bx	lr

0000bfea <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    bfea:	b480      	push	{r7}
    bfec:	b085      	sub	sp, #20
    bfee:	af00      	add	r7, sp, #0
    bff0:	6078      	str	r0, [r7, #4]
    bff2:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    bff6:	687b      	ldr	r3, [r7, #4]
    bff8:	681b      	ldr	r3, [r3, #0]
    bffa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    bffc:	68fb      	ldr	r3, [r7, #12]
    bffe:	f383 8810 	msr	PRIMASK, r3
}
    c002:	bf00      	nop
    c004:	3714      	adds	r7, #20
    c006:	46bd      	mov	sp, r7
    c008:	f85d 7b04 	ldr.w	r7, [sp], #4
    c00c:	4770      	bx	lr
	...

0000c010 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    c010:	b580      	push	{r7, lr}
    c012:	b08c      	sub	sp, #48	; 0x30
    c014:	af00      	add	r7, sp, #0
    c016:	6078      	str	r0, [r7, #4]
    c018:	460b      	mov	r3, r1
    c01a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c01c:	687b      	ldr	r3, [r7, #4]
    c01e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c020:	687b      	ldr	r3, [r7, #4]
    c022:	681b      	ldr	r3, [r3, #0]
    c024:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    c026:	f107 030c 	add.w	r3, r7, #12
    c02a:	2200      	movs	r2, #0
    c02c:	601a      	str	r2, [r3, #0]
    c02e:	605a      	str	r2, [r3, #4]
    c030:	609a      	str	r2, [r3, #8]
    c032:	60da      	str	r2, [r3, #12]
    c034:	611a      	str	r2, [r3, #16]
    c036:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c03a:	7b1b      	ldrb	r3, [r3, #12]
    c03c:	2b00      	cmp	r3, #0
    c03e:	d001      	beq.n	c044 <n25q256a_xip_confirm+0x34>
    c040:	2206      	movs	r2, #6
    c042:	e000      	b.n	c046 <n25q256a_xip_confirm+0x36>
    c044:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c046:	7b3b      	ldrb	r3, [r7, #12]
    c048:	f362 0302 	bfi	r3, r2, #0, #3
    c04c:	733b      	strb	r3, [r7, #12]
    c04e:	7b3b      	ldrb	r3, [r7, #12]
    c050:	f043 0310 	orr.w	r3, r3, #16
    c054:	733b      	strb	r3, [r7, #12]
    c056:	7b3b      	ldrb	r3, [r7, #12]
    c058:	f043 0320 	orr.w	r3, r3, #32
    c05c:	733b      	strb	r3, [r7, #12]
    c05e:	7b3b      	ldrb	r3, [r7, #12]
    c060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c064:	733b      	strb	r3, [r7, #12]
    c066:	7b3b      	ldrb	r3, [r7, #12]
    c068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c06c:	733b      	strb	r3, [r7, #12]
    c06e:	7b7b      	ldrb	r3, [r7, #13]
    c070:	f043 0303 	orr.w	r3, r3, #3
    c074:	737b      	strb	r3, [r7, #13]
    c076:	7b7b      	ldrb	r3, [r7, #13]
    c078:	2201      	movs	r2, #1
    c07a:	f362 1305 	bfi	r3, r2, #4, #2
    c07e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    c080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c082:	7b1b      	ldrb	r3, [r3, #12]
    c084:	2b00      	cmp	r3, #0
    c086:	d001      	beq.n	c08c <n25q256a_xip_confirm+0x7c>
    c088:	2208      	movs	r2, #8
    c08a:	e000      	b.n	c08e <n25q256a_xip_confirm+0x7e>
    c08c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    c08e:	7bbb      	ldrb	r3, [r7, #14]
    c090:	f362 0304 	bfi	r3, r2, #0, #5
    c094:	73bb      	strb	r3, [r7, #14]
    c096:	230b      	movs	r3, #11
    c098:	743b      	strb	r3, [r7, #16]
    c09a:	78fb      	ldrb	r3, [r7, #3]
    c09c:	2b00      	cmp	r3, #0
    c09e:	d001      	beq.n	c0a4 <n25q256a_xip_confirm+0x94>
    c0a0:	2300      	movs	r3, #0
    c0a2:	e000      	b.n	c0a6 <n25q256a_xip_confirm+0x96>
    c0a4:	23ff      	movs	r3, #255	; 0xff
    c0a6:	747b      	strb	r3, [r7, #17]
    c0a8:	2301      	movs	r3, #1
    c0aa:	61bb      	str	r3, [r7, #24]
    c0ac:	f107 0327 	add.w	r3, r7, #39	; 0x27
    c0b0:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    c0b2:	f107 030c 	add.w	r3, r7, #12
    c0b6:	4619      	mov	r1, r3
    c0b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c0ba:	4b07      	ldr	r3, [pc, #28]	; (c0d8 <n25q256a_xip_confirm+0xc8>)
    c0bc:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    c0be:	78fb      	ldrb	r3, [r7, #3]
    c0c0:	2b00      	cmp	r3, #0
    c0c2:	d001      	beq.n	c0c8 <n25q256a_xip_confirm+0xb8>
    c0c4:	2202      	movs	r2, #2
    c0c6:	e000      	b.n	c0ca <n25q256a_xip_confirm+0xba>
    c0c8:	2201      	movs	r2, #1
    c0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0cc:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c0ce:	2300      	movs	r3, #0
}
    c0d0:	4618      	mov	r0, r3
    c0d2:	3730      	adds	r7, #48	; 0x30
    c0d4:	46bd      	mov	sp, r7
    c0d6:	bd80      	pop	{r7, pc}
    c0d8:	00002d89 	.word	0x00002d89

0000c0dc <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    c0dc:	b580      	push	{r7, lr}
    c0de:	b08c      	sub	sp, #48	; 0x30
    c0e0:	af00      	add	r7, sp, #0
    c0e2:	6078      	str	r0, [r7, #4]
    c0e4:	460b      	mov	r3, r1
    c0e6:	70fb      	strb	r3, [r7, #3]
    c0e8:	4613      	mov	r3, r2
    c0ea:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    c0ec:	2300      	movs	r3, #0
    c0ee:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    c0f0:	687b      	ldr	r3, [r7, #4]
    c0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    c0f4:	687b      	ldr	r3, [r7, #4]
    c0f6:	681b      	ldr	r3, [r3, #0]
    c0f8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    c0fa:	f107 030c 	add.w	r3, r7, #12
    c0fe:	2200      	movs	r2, #0
    c100:	601a      	str	r2, [r3, #0]
    c102:	605a      	str	r2, [r3, #4]
    c104:	609a      	str	r2, [r3, #8]
    c106:	60da      	str	r2, [r3, #12]
    c108:	611a      	str	r2, [r3, #16]
    c10a:	615a      	str	r2, [r3, #20]
    c10c:	78fb      	ldrb	r3, [r7, #3]
    c10e:	f003 0307 	and.w	r3, r3, #7
    c112:	b2da      	uxtb	r2, r3
    c114:	7b3b      	ldrb	r3, [r7, #12]
    c116:	f362 0302 	bfi	r3, r2, #0, #3
    c11a:	733b      	strb	r3, [r7, #12]
    c11c:	7b3b      	ldrb	r3, [r7, #12]
    c11e:	f043 0310 	orr.w	r3, r3, #16
    c122:	733b      	strb	r3, [r7, #12]
    c124:	7b3b      	ldrb	r3, [r7, #12]
    c126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c12a:	733b      	strb	r3, [r7, #12]
    c12c:	78bb      	ldrb	r3, [r7, #2]
    c12e:	743b      	strb	r3, [r7, #16]
    c130:	2301      	movs	r3, #1
    c132:	61bb      	str	r3, [r7, #24]
    c134:	f107 0324 	add.w	r3, r7, #36	; 0x24
    c138:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    c13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c13c:	7b5b      	ldrb	r3, [r3, #13]
    c13e:	2b00      	cmp	r3, #0
    c140:	d003      	beq.n	c14a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    c142:	2100      	movs	r1, #0
    c144:	6878      	ldr	r0, [r7, #4]
    c146:	4b0a      	ldr	r3, [pc, #40]	; (c170 <n25q256a_read_reg+0x94>)
    c148:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c14a:	f107 030c 	add.w	r3, r7, #12
    c14e:	4619      	mov	r1, r3
    c150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c152:	4b08      	ldr	r3, [pc, #32]	; (c174 <n25q256a_read_reg+0x98>)
    c154:	4798      	blx	r3
	if (n25q->xip_mode) {
    c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c158:	7b5b      	ldrb	r3, [r3, #13]
    c15a:	2b00      	cmp	r3, #0
    c15c:	d003      	beq.n	c166 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    c15e:	2101      	movs	r1, #1
    c160:	6878      	ldr	r0, [r7, #4]
    c162:	4b03      	ldr	r3, [pc, #12]	; (c170 <n25q256a_read_reg+0x94>)
    c164:	4798      	blx	r3
	}
	return status;
    c166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c168:	4618      	mov	r0, r3
    c16a:	3730      	adds	r7, #48	; 0x30
    c16c:	46bd      	mov	sp, r7
    c16e:	bd80      	pop	{r7, pc}
    c170:	0000c011 	.word	0x0000c011
    c174:	00002d89 	.word	0x00002d89

0000c178 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    c178:	b580      	push	{r7, lr}
    c17a:	b08c      	sub	sp, #48	; 0x30
    c17c:	af00      	add	r7, sp, #0
    c17e:	60f8      	str	r0, [r7, #12]
    c180:	607b      	str	r3, [r7, #4]
    c182:	460b      	mov	r3, r1
    c184:	72fb      	strb	r3, [r7, #11]
    c186:	4613      	mov	r3, r2
    c188:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c18a:	68fb      	ldr	r3, [r7, #12]
    c18c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c18e:	68fb      	ldr	r3, [r7, #12]
    c190:	681b      	ldr	r3, [r3, #0]
    c192:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    c194:	f107 0310 	add.w	r3, r7, #16
    c198:	2200      	movs	r2, #0
    c19a:	601a      	str	r2, [r3, #0]
    c19c:	605a      	str	r2, [r3, #4]
    c19e:	609a      	str	r2, [r3, #8]
    c1a0:	60da      	str	r2, [r3, #12]
    c1a2:	611a      	str	r2, [r3, #16]
    c1a4:	615a      	str	r2, [r3, #20]
    c1a6:	7afb      	ldrb	r3, [r7, #11]
    c1a8:	f003 0307 	and.w	r3, r3, #7
    c1ac:	b2da      	uxtb	r2, r3
    c1ae:	7c3b      	ldrb	r3, [r7, #16]
    c1b0:	f362 0302 	bfi	r3, r2, #0, #3
    c1b4:	743b      	strb	r3, [r7, #16]
    c1b6:	7c3b      	ldrb	r3, [r7, #16]
    c1b8:	f043 0310 	orr.w	r3, r3, #16
    c1bc:	743b      	strb	r3, [r7, #16]
    c1be:	7c3b      	ldrb	r3, [r7, #16]
    c1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c1c4:	743b      	strb	r3, [r7, #16]
    c1c6:	7c7b      	ldrb	r3, [r7, #17]
    c1c8:	2202      	movs	r2, #2
    c1ca:	f362 1305 	bfi	r3, r2, #4, #2
    c1ce:	747b      	strb	r3, [r7, #17]
    c1d0:	7abb      	ldrb	r3, [r7, #10]
    c1d2:	753b      	strb	r3, [r7, #20]
    c1d4:	2301      	movs	r3, #1
    c1d6:	61fb      	str	r3, [r7, #28]
    c1d8:	1d3b      	adds	r3, r7, #4
    c1da:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    c1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1de:	7b5b      	ldrb	r3, [r3, #13]
    c1e0:	2b00      	cmp	r3, #0
    c1e2:	d003      	beq.n	c1ec <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    c1e4:	2100      	movs	r1, #0
    c1e6:	68f8      	ldr	r0, [r7, #12]
    c1e8:	4b09      	ldr	r3, [pc, #36]	; (c210 <n25q256a_write_reg+0x98>)
    c1ea:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    c1ec:	f107 0310 	add.w	r3, r7, #16
    c1f0:	4619      	mov	r1, r3
    c1f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c1f4:	4b07      	ldr	r3, [pc, #28]	; (c214 <n25q256a_write_reg+0x9c>)
    c1f6:	4798      	blx	r3
	if (n25q->xip_mode) {
    c1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1fa:	7b5b      	ldrb	r3, [r3, #13]
    c1fc:	2b00      	cmp	r3, #0
    c1fe:	d003      	beq.n	c208 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    c200:	2101      	movs	r1, #1
    c202:	68f8      	ldr	r0, [r7, #12]
    c204:	4b02      	ldr	r3, [pc, #8]	; (c210 <n25q256a_write_reg+0x98>)
    c206:	4798      	blx	r3
	}
}
    c208:	bf00      	nop
    c20a:	3730      	adds	r7, #48	; 0x30
    c20c:	46bd      	mov	sp, r7
    c20e:	bd80      	pop	{r7, pc}
    c210:	0000c011 	.word	0x0000c011
    c214:	00002d89 	.word	0x00002d89

0000c218 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    c218:	b580      	push	{r7, lr}
    c21a:	b090      	sub	sp, #64	; 0x40
    c21c:	af00      	add	r7, sp, #0
    c21e:	6078      	str	r0, [r7, #4]
    c220:	460b      	mov	r3, r1
    c222:	70fb      	strb	r3, [r7, #3]
    c224:	4613      	mov	r3, r2
    c226:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c228:	687b      	ldr	r3, [r7, #4]
    c22a:	681b      	ldr	r3, [r3, #0]
    c22c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    c22e:	78bb      	ldrb	r3, [r7, #2]
    c230:	2b00      	cmp	r3, #0
    c232:	d001      	beq.n	c238 <n25q256a_write_enable+0x20>
    c234:	2306      	movs	r3, #6
    c236:	e000      	b.n	c23a <n25q256a_write_enable+0x22>
    c238:	2304      	movs	r3, #4
    c23a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    c23e:	f107 0320 	add.w	r3, r7, #32
    c242:	2200      	movs	r2, #0
    c244:	601a      	str	r2, [r3, #0]
    c246:	605a      	str	r2, [r3, #4]
    c248:	609a      	str	r2, [r3, #8]
    c24a:	60da      	str	r2, [r3, #12]
    c24c:	611a      	str	r2, [r3, #16]
    c24e:	615a      	str	r2, [r3, #20]
    c250:	78fb      	ldrb	r3, [r7, #3]
    c252:	f003 0307 	and.w	r3, r3, #7
    c256:	b2da      	uxtb	r2, r3
    c258:	f897 3020 	ldrb.w	r3, [r7, #32]
    c25c:	f362 0302 	bfi	r3, r2, #0, #3
    c260:	f887 3020 	strb.w	r3, [r7, #32]
    c264:	f897 3020 	ldrb.w	r3, [r7, #32]
    c268:	f043 0310 	orr.w	r3, r3, #16
    c26c:	f887 3020 	strb.w	r3, [r7, #32]
    c270:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    c274:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    c278:	f107 0308 	add.w	r3, r7, #8
    c27c:	2200      	movs	r2, #0
    c27e:	601a      	str	r2, [r3, #0]
    c280:	605a      	str	r2, [r3, #4]
    c282:	609a      	str	r2, [r3, #8]
    c284:	60da      	str	r2, [r3, #12]
    c286:	611a      	str	r2, [r3, #16]
    c288:	615a      	str	r2, [r3, #20]
    c28a:	78fb      	ldrb	r3, [r7, #3]
    c28c:	f003 0307 	and.w	r3, r3, #7
    c290:	b2da      	uxtb	r2, r3
    c292:	7a3b      	ldrb	r3, [r7, #8]
    c294:	f362 0302 	bfi	r3, r2, #0, #3
    c298:	723b      	strb	r3, [r7, #8]
    c29a:	7a3b      	ldrb	r3, [r7, #8]
    c29c:	f043 0310 	orr.w	r3, r3, #16
    c2a0:	723b      	strb	r3, [r7, #8]
    c2a2:	7a3b      	ldrb	r3, [r7, #8]
    c2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c2a8:	723b      	strb	r3, [r7, #8]
    c2aa:	2305      	movs	r3, #5
    c2ac:	733b      	strb	r3, [r7, #12]
    c2ae:	2301      	movs	r3, #1
    c2b0:	617b      	str	r3, [r7, #20]
    c2b2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    c2b6:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    c2b8:	f107 0320 	add.w	r3, r7, #32
    c2bc:	4619      	mov	r1, r3
    c2be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c2c0:	4b08      	ldr	r3, [pc, #32]	; (c2e4 <n25q256a_write_enable+0xcc>)
    c2c2:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    c2c4:	f107 0308 	add.w	r3, r7, #8
    c2c8:	4619      	mov	r1, r3
    c2ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c2cc:	4b05      	ldr	r3, [pc, #20]	; (c2e4 <n25q256a_write_enable+0xcc>)
    c2ce:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    c2d0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    c2d4:	f003 0302 	and.w	r3, r3, #2
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d0ed      	beq.n	c2b8 <n25q256a_write_enable+0xa0>
}
    c2dc:	bf00      	nop
    c2de:	3740      	adds	r7, #64	; 0x40
    c2e0:	46bd      	mov	sp, r7
    c2e2:	bd80      	pop	{r7, pc}
    c2e4:	00002d89 	.word	0x00002d89

0000c2e8 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    c2e8:	b590      	push	{r4, r7, lr}
    c2ea:	b087      	sub	sp, #28
    c2ec:	af00      	add	r7, sp, #0
    c2ee:	6078      	str	r0, [r7, #4]
    c2f0:	460b      	mov	r3, r1
    c2f2:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    c2f4:	687b      	ldr	r3, [r7, #4]
    c2f6:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c2f8:	68fb      	ldr	r3, [r7, #12]
    c2fa:	7b1b      	ldrb	r3, [r3, #12]
    c2fc:	2b00      	cmp	r3, #0
    c2fe:	d001      	beq.n	c304 <n25q256a_switch_mode+0x1c>
    c300:	2306      	movs	r3, #6
    c302:	e000      	b.n	c306 <n25q256a_switch_mode+0x1e>
    c304:	2300      	movs	r3, #0
    c306:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c308:	7afb      	ldrb	r3, [r7, #11]
    c30a:	2265      	movs	r2, #101	; 0x65
    c30c:	4619      	mov	r1, r3
    c30e:	6878      	ldr	r0, [r7, #4]
    c310:	4b25      	ldr	r3, [pc, #148]	; (c3a8 <n25q256a_switch_mode+0xc0>)
    c312:	4798      	blx	r3
    c314:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c316:	2300      	movs	r3, #0
    c318:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c31a:	68fb      	ldr	r3, [r7, #12]
    c31c:	7b1b      	ldrb	r3, [r3, #12]
    c31e:	78fa      	ldrb	r2, [r7, #3]
    c320:	429a      	cmp	r2, r3
    c322:	d03d      	beq.n	c3a0 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c324:	78fb      	ldrb	r3, [r7, #3]
    c326:	2b00      	cmp	r3, #0
    c328:	d00b      	beq.n	c342 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c32a:	697b      	ldr	r3, [r7, #20]
    c32c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c330:	2b00      	cmp	r3, #0
    c332:	d011      	beq.n	c358 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c334:	697b      	ldr	r3, [r7, #20]
    c336:	f003 031f 	and.w	r3, r3, #31
    c33a:	617b      	str	r3, [r7, #20]
			modify = 1;
    c33c:	2301      	movs	r3, #1
    c33e:	74fb      	strb	r3, [r7, #19]
    c340:	e00a      	b.n	c358 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c342:	697b      	ldr	r3, [r7, #20]
    c344:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c348:	2b00      	cmp	r3, #0
    c34a:	d105      	bne.n	c358 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c34c:	697b      	ldr	r3, [r7, #20]
    c34e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c352:	617b      	str	r3, [r7, #20]
			modify = 1;
    c354:	2301      	movs	r3, #1
    c356:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c358:	7cfb      	ldrb	r3, [r7, #19]
    c35a:	2b00      	cmp	r3, #0
    c35c:	d021      	beq.n	c3a2 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c35e:	68fb      	ldr	r3, [r7, #12]
    c360:	78fa      	ldrb	r2, [r7, #3]
    c362:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c364:	7afb      	ldrb	r3, [r7, #11]
    c366:	2201      	movs	r2, #1
    c368:	4619      	mov	r1, r3
    c36a:	6878      	ldr	r0, [r7, #4]
    c36c:	4b0f      	ldr	r3, [pc, #60]	; (c3ac <n25q256a_switch_mode+0xc4>)
    c36e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c370:	7af9      	ldrb	r1, [r7, #11]
    c372:	697b      	ldr	r3, [r7, #20]
    c374:	2261      	movs	r2, #97	; 0x61
    c376:	6878      	ldr	r0, [r7, #4]
    c378:	4c0d      	ldr	r4, [pc, #52]	; (c3b0 <n25q256a_switch_mode+0xc8>)
    c37a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c37c:	78fb      	ldrb	r3, [r7, #3]
    c37e:	2b00      	cmp	r3, #0
    c380:	d001      	beq.n	c386 <n25q256a_switch_mode+0x9e>
    c382:	2306      	movs	r3, #6
    c384:	e000      	b.n	c388 <n25q256a_switch_mode+0xa0>
    c386:	2300      	movs	r3, #0
    c388:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c38a:	7afb      	ldrb	r3, [r7, #11]
    c38c:	2265      	movs	r2, #101	; 0x65
    c38e:	4619      	mov	r1, r3
    c390:	6878      	ldr	r0, [r7, #4]
    c392:	4b05      	ldr	r3, [pc, #20]	; (c3a8 <n25q256a_switch_mode+0xc0>)
    c394:	4798      	blx	r3
    c396:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c398:	68fb      	ldr	r3, [r7, #12]
    c39a:	78fa      	ldrb	r2, [r7, #3]
    c39c:	731a      	strb	r2, [r3, #12]
    c39e:	e000      	b.n	c3a2 <n25q256a_switch_mode+0xba>
		return;
    c3a0:	bf00      	nop
	}
}
    c3a2:	371c      	adds	r7, #28
    c3a4:	46bd      	mov	sp, r7
    c3a6:	bd90      	pop	{r4, r7, pc}
    c3a8:	0000c0dd 	.word	0x0000c0dd
    c3ac:	0000c219 	.word	0x0000c219
    c3b0:	0000c179 	.word	0x0000c179

0000c3b4 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c3b4:	b580      	push	{r7, lr}
    c3b6:	b086      	sub	sp, #24
    c3b8:	af00      	add	r7, sp, #0
    c3ba:	60f8      	str	r0, [r7, #12]
    c3bc:	60b9      	str	r1, [r7, #8]
    c3be:	607a      	str	r2, [r7, #4]
    c3c0:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c3c2:	68fb      	ldr	r3, [r7, #12]
    c3c4:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c3c6:	4a0c      	ldr	r2, [pc, #48]	; (c3f8 <n25q256a_construct+0x44>)
    c3c8:	68b9      	ldr	r1, [r7, #8]
    c3ca:	68f8      	ldr	r0, [r7, #12]
    c3cc:	4b0b      	ldr	r3, [pc, #44]	; (c3fc <n25q256a_construct+0x48>)
    c3ce:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c3d0:	697b      	ldr	r3, [r7, #20]
    c3d2:	2200      	movs	r2, #0
    c3d4:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c3d6:	697b      	ldr	r3, [r7, #20]
    c3d8:	2200      	movs	r2, #0
    c3da:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c3dc:	697b      	ldr	r3, [r7, #20]
    c3de:	687a      	ldr	r2, [r7, #4]
    c3e0:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c3e2:	78fb      	ldrb	r3, [r7, #3]
    c3e4:	4619      	mov	r1, r3
    c3e6:	68f8      	ldr	r0, [r7, #12]
    c3e8:	4b05      	ldr	r3, [pc, #20]	; (c400 <n25q256a_construct+0x4c>)
    c3ea:	4798      	blx	r3
	return me;
    c3ec:	68fb      	ldr	r3, [r7, #12]
}
    c3ee:	4618      	mov	r0, r3
    c3f0:	3718      	adds	r7, #24
    c3f2:	46bd      	mov	sp, r7
    c3f4:	bd80      	pop	{r7, pc}
    c3f6:	bf00      	nop
    c3f8:	000101f8 	.word	0x000101f8
    c3fc:	0000c891 	.word	0x0000c891
    c400:	0000c2e9 	.word	0x0000c2e9

0000c404 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c404:	b580      	push	{r7, lr}
    c406:	b08c      	sub	sp, #48	; 0x30
    c408:	af00      	add	r7, sp, #0
    c40a:	60f8      	str	r0, [r7, #12]
    c40c:	60b9      	str	r1, [r7, #8]
    c40e:	607a      	str	r2, [r7, #4]
    c410:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c412:	68fb      	ldr	r3, [r7, #12]
    c414:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c416:	68fb      	ldr	r3, [r7, #12]
    c418:	681b      	ldr	r3, [r3, #0]
    c41a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c41c:	f107 0310 	add.w	r3, r7, #16
    c420:	2200      	movs	r2, #0
    c422:	601a      	str	r2, [r3, #0]
    c424:	605a      	str	r2, [r3, #4]
    c426:	609a      	str	r2, [r3, #8]
    c428:	60da      	str	r2, [r3, #12]
    c42a:	611a      	str	r2, [r3, #16]
    c42c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c430:	7b1b      	ldrb	r3, [r3, #12]
    c432:	2b00      	cmp	r3, #0
    c434:	d001      	beq.n	c43a <n25q256a_read+0x36>
    c436:	2206      	movs	r2, #6
    c438:	e000      	b.n	c43c <n25q256a_read+0x38>
    c43a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c43c:	7c3b      	ldrb	r3, [r7, #16]
    c43e:	f362 0302 	bfi	r3, r2, #0, #3
    c442:	743b      	strb	r3, [r7, #16]
    c444:	7c3b      	ldrb	r3, [r7, #16]
    c446:	f043 0310 	orr.w	r3, r3, #16
    c44a:	743b      	strb	r3, [r7, #16]
    c44c:	7c3b      	ldrb	r3, [r7, #16]
    c44e:	f043 0320 	orr.w	r3, r3, #32
    c452:	743b      	strb	r3, [r7, #16]
    c454:	7c3b      	ldrb	r3, [r7, #16]
    c456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c45a:	743b      	strb	r3, [r7, #16]
    c45c:	7c7b      	ldrb	r3, [r7, #17]
    c45e:	2201      	movs	r2, #1
    c460:	f362 1305 	bfi	r3, r2, #4, #2
    c464:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c468:	7b1b      	ldrb	r3, [r3, #12]
    c46a:	2b00      	cmp	r3, #0
    c46c:	d001      	beq.n	c472 <n25q256a_read+0x6e>
    c46e:	220a      	movs	r2, #10
    c470:	e000      	b.n	c474 <n25q256a_read+0x70>
    c472:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c474:	7cbb      	ldrb	r3, [r7, #18]
    c476:	f362 0304 	bfi	r3, r2, #0, #5
    c47a:	74bb      	strb	r3, [r7, #18]
    c47c:	230b      	movs	r3, #11
    c47e:	753b      	strb	r3, [r7, #20]
    c480:	687b      	ldr	r3, [r7, #4]
    c482:	61bb      	str	r3, [r7, #24]
    c484:	683b      	ldr	r3, [r7, #0]
    c486:	61fb      	str	r3, [r7, #28]
    c488:	68bb      	ldr	r3, [r7, #8]
    c48a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c48c:	f107 0310 	add.w	r3, r7, #16
    c490:	4619      	mov	r1, r3
    c492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c494:	4b03      	ldr	r3, [pc, #12]	; (c4a4 <n25q256a_read+0xa0>)
    c496:	4798      	blx	r3
	return ERR_NONE;
    c498:	2300      	movs	r3, #0
}
    c49a:	4618      	mov	r0, r3
    c49c:	3730      	adds	r7, #48	; 0x30
    c49e:	46bd      	mov	sp, r7
    c4a0:	bd80      	pop	{r7, pc}
    c4a2:	bf00      	nop
    c4a4:	00002d89 	.word	0x00002d89

0000c4a8 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c4a8:	b580      	push	{r7, lr}
    c4aa:	b08c      	sub	sp, #48	; 0x30
    c4ac:	af00      	add	r7, sp, #0
    c4ae:	60f8      	str	r0, [r7, #12]
    c4b0:	60b9      	str	r1, [r7, #8]
    c4b2:	607a      	str	r2, [r7, #4]
    c4b4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c4b6:	68fb      	ldr	r3, [r7, #12]
    c4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c4ba:	68fb      	ldr	r3, [r7, #12]
    c4bc:	681b      	ldr	r3, [r3, #0]
    c4be:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c4c0:	f107 0310 	add.w	r3, r7, #16
    c4c4:	2200      	movs	r2, #0
    c4c6:	601a      	str	r2, [r3, #0]
    c4c8:	605a      	str	r2, [r3, #4]
    c4ca:	609a      	str	r2, [r3, #8]
    c4cc:	60da      	str	r2, [r3, #12]
    c4ce:	611a      	str	r2, [r3, #16]
    c4d0:	615a      	str	r2, [r3, #20]
    c4d2:	7c3b      	ldrb	r3, [r7, #16]
    c4d4:	f043 0310 	orr.w	r3, r3, #16
    c4d8:	743b      	strb	r3, [r7, #16]
    c4da:	7c3b      	ldrb	r3, [r7, #16]
    c4dc:	f043 0320 	orr.w	r3, r3, #32
    c4e0:	743b      	strb	r3, [r7, #16]
    c4e2:	7c3b      	ldrb	r3, [r7, #16]
    c4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c4e8:	743b      	strb	r3, [r7, #16]
    c4ea:	7c7b      	ldrb	r3, [r7, #17]
    c4ec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c4f0:	747b      	strb	r3, [r7, #17]
    c4f2:	2302      	movs	r3, #2
    c4f4:	753b      	strb	r3, [r7, #20]
    c4f6:	687b      	ldr	r3, [r7, #4]
    c4f8:	61bb      	str	r3, [r7, #24]
    c4fa:	683b      	ldr	r3, [r7, #0]
    c4fc:	61fb      	str	r3, [r7, #28]
    c4fe:	68bb      	ldr	r3, [r7, #8]
    c500:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c504:	7b1b      	ldrb	r3, [r3, #12]
    c506:	2b00      	cmp	r3, #0
    c508:	d001      	beq.n	c50e <n25q256a_write+0x66>
    c50a:	2206      	movs	r2, #6
    c50c:	e000      	b.n	c510 <n25q256a_write+0x68>
    c50e:	2200      	movs	r2, #0
    c510:	7c3b      	ldrb	r3, [r7, #16]
    c512:	f362 0302 	bfi	r3, r2, #0, #3
    c516:	743b      	strb	r3, [r7, #16]
	while (length) {
    c518:	e035      	b.n	c586 <n25q256a_write+0xde>
		cmd.address = address;
    c51a:	687b      	ldr	r3, [r7, #4]
    c51c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c51e:	683b      	ldr	r3, [r7, #0]
    c520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c524:	d802      	bhi.n	c52c <n25q256a_write+0x84>
			cmd.buf_len = length;
    c526:	683b      	ldr	r3, [r7, #0]
    c528:	61fb      	str	r3, [r7, #28]
    c52a:	e002      	b.n	c532 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c52c:	f44f 7380 	mov.w	r3, #256	; 0x100
    c530:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c532:	7c3b      	ldrb	r3, [r7, #16]
    c534:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c538:	b2db      	uxtb	r3, r3
    c53a:	2201      	movs	r2, #1
    c53c:	4619      	mov	r1, r3
    c53e:	68f8      	ldr	r0, [r7, #12]
    c540:	4b19      	ldr	r3, [pc, #100]	; (c5a8 <n25q256a_write+0x100>)
    c542:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c544:	f107 0310 	add.w	r3, r7, #16
    c548:	4619      	mov	r1, r3
    c54a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c54c:	4b17      	ldr	r3, [pc, #92]	; (c5ac <n25q256a_write+0x104>)
    c54e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c550:	bf00      	nop
    c552:	7c3b      	ldrb	r3, [r7, #16]
    c554:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c558:	b2db      	uxtb	r3, r3
    c55a:	2270      	movs	r2, #112	; 0x70
    c55c:	4619      	mov	r1, r3
    c55e:	68f8      	ldr	r0, [r7, #12]
    c560:	4b13      	ldr	r3, [pc, #76]	; (c5b0 <n25q256a_write+0x108>)
    c562:	4798      	blx	r3
    c564:	4603      	mov	r3, r0
    c566:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c56a:	2b00      	cmp	r3, #0
    c56c:	d0f1      	beq.n	c552 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c56e:	6a3a      	ldr	r2, [r7, #32]
    c570:	69fb      	ldr	r3, [r7, #28]
    c572:	4413      	add	r3, r2
    c574:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c576:	69fb      	ldr	r3, [r7, #28]
    c578:	683a      	ldr	r2, [r7, #0]
    c57a:	1ad3      	subs	r3, r2, r3
    c57c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c57e:	69fb      	ldr	r3, [r7, #28]
    c580:	687a      	ldr	r2, [r7, #4]
    c582:	4413      	add	r3, r2
    c584:	607b      	str	r3, [r7, #4]
	while (length) {
    c586:	683b      	ldr	r3, [r7, #0]
    c588:	2b00      	cmp	r3, #0
    c58a:	d1c6      	bne.n	c51a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c58e:	7b5b      	ldrb	r3, [r3, #13]
    c590:	2b00      	cmp	r3, #0
    c592:	d003      	beq.n	c59c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c594:	2101      	movs	r1, #1
    c596:	68f8      	ldr	r0, [r7, #12]
    c598:	4b06      	ldr	r3, [pc, #24]	; (c5b4 <n25q256a_write+0x10c>)
    c59a:	4798      	blx	r3
	}
	return ERR_NONE;
    c59c:	2300      	movs	r3, #0
}
    c59e:	4618      	mov	r0, r3
    c5a0:	3730      	adds	r7, #48	; 0x30
    c5a2:	46bd      	mov	sp, r7
    c5a4:	bd80      	pop	{r7, pc}
    c5a6:	bf00      	nop
    c5a8:	0000c219 	.word	0x0000c219
    c5ac:	00002d89 	.word	0x00002d89
    c5b0:	0000c0dd 	.word	0x0000c0dd
    c5b4:	0000c011 	.word	0x0000c011

0000c5b8 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c5b8:	b580      	push	{r7, lr}
    c5ba:	b090      	sub	sp, #64	; 0x40
    c5bc:	af00      	add	r7, sp, #0
    c5be:	60f8      	str	r0, [r7, #12]
    c5c0:	60b9      	str	r1, [r7, #8]
    c5c2:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c5c4:	68fb      	ldr	r3, [r7, #12]
    c5c6:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c5c8:	68fb      	ldr	r3, [r7, #12]
    c5ca:	681b      	ldr	r3, [r3, #0]
    c5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c5ce:	f107 0314 	add.w	r3, r7, #20
    c5d2:	2200      	movs	r2, #0
    c5d4:	601a      	str	r2, [r3, #0]
    c5d6:	605a      	str	r2, [r3, #4]
    c5d8:	609a      	str	r2, [r3, #8]
    c5da:	60da      	str	r2, [r3, #12]
    c5dc:	611a      	str	r2, [r3, #16]
    c5de:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c5e2:	7b1b      	ldrb	r3, [r3, #12]
    c5e4:	2b00      	cmp	r3, #0
    c5e6:	d001      	beq.n	c5ec <n25q256a_erase+0x34>
    c5e8:	2206      	movs	r2, #6
    c5ea:	e000      	b.n	c5ee <n25q256a_erase+0x36>
    c5ec:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c5ee:	7d3b      	ldrb	r3, [r7, #20]
    c5f0:	f362 0302 	bfi	r3, r2, #0, #3
    c5f4:	753b      	strb	r3, [r7, #20]
    c5f6:	7d3b      	ldrb	r3, [r7, #20]
    c5f8:	f043 0310 	orr.w	r3, r3, #16
    c5fc:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c5fe:	687b      	ldr	r3, [r7, #4]
    c600:	4a56      	ldr	r2, [pc, #344]	; (c75c <n25q256a_erase+0x1a4>)
    c602:	4293      	cmp	r3, r2
    c604:	bf94      	ite	ls
    c606:	2301      	movls	r3, #1
    c608:	2300      	movhi	r3, #0
    c60a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c60c:	7d3b      	ldrb	r3, [r7, #20]
    c60e:	f362 1345 	bfi	r3, r2, #5, #1
    c612:	753b      	strb	r3, [r7, #20]
    c614:	7d7b      	ldrb	r3, [r7, #21]
    c616:	2202      	movs	r2, #2
    c618:	f362 1305 	bfi	r3, r2, #4, #2
    c61c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c61e:	68bb      	ldr	r3, [r7, #8]
    c620:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c622:	687b      	ldr	r3, [r7, #4]
    c624:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c626:	2300      	movs	r3, #0
    c628:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c62a:	687b      	ldr	r3, [r7, #4]
    c62c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c630:	2b00      	cmp	r3, #0
    c632:	d104      	bne.n	c63e <n25q256a_erase+0x86>
    c634:	68bb      	ldr	r3, [r7, #8]
    c636:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c63a:	2b00      	cmp	r3, #0
    c63c:	d002      	beq.n	c644 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c63e:	f06f 030c 	mvn.w	r3, #12
    c642:	e087      	b.n	c754 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c644:	687b      	ldr	r3, [r7, #4]
    c646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c64a:	d368      	bcc.n	c71e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c64c:	23c7      	movs	r3, #199	; 0xc7
    c64e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c650:	7d3b      	ldrb	r3, [r7, #20]
    c652:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c656:	b2db      	uxtb	r3, r3
    c658:	2201      	movs	r2, #1
    c65a:	4619      	mov	r1, r3
    c65c:	68f8      	ldr	r0, [r7, #12]
    c65e:	4b40      	ldr	r3, [pc, #256]	; (c760 <n25q256a_erase+0x1a8>)
    c660:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c662:	f107 0314 	add.w	r3, r7, #20
    c666:	4619      	mov	r1, r3
    c668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c66a:	4b3e      	ldr	r3, [pc, #248]	; (c764 <n25q256a_erase+0x1ac>)
    c66c:	4798      	blx	r3
    c66e:	e059      	b.n	c724 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c672:	b29b      	uxth	r3, r3
    c674:	2b00      	cmp	r3, #0
    c676:	d11f      	bne.n	c6b8 <n25q256a_erase+0x100>
    c678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c67a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c67e:	d31b      	bcc.n	c6b8 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c682:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c684:	23d8      	movs	r3, #216	; 0xd8
    c686:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c688:	7d3b      	ldrb	r3, [r7, #20]
    c68a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c68e:	b2db      	uxtb	r3, r3
    c690:	2201      	movs	r2, #1
    c692:	4619      	mov	r1, r3
    c694:	68f8      	ldr	r0, [r7, #12]
    c696:	4b32      	ldr	r3, [pc, #200]	; (c760 <n25q256a_erase+0x1a8>)
    c698:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c69a:	f107 0314 	add.w	r3, r7, #20
    c69e:	4619      	mov	r1, r3
    c6a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c6a2:	4b30      	ldr	r3, [pc, #192]	; (c764 <n25q256a_erase+0x1ac>)
    c6a4:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c6b0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c6b4:	63bb      	str	r3, [r7, #56]	; 0x38
    c6b6:	e023      	b.n	c700 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c6be:	d31b      	bcc.n	c6f8 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6c2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c6c4:	2320      	movs	r3, #32
    c6c6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c6c8:	7d3b      	ldrb	r3, [r7, #20]
    c6ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c6ce:	b2db      	uxtb	r3, r3
    c6d0:	2201      	movs	r2, #1
    c6d2:	4619      	mov	r1, r3
    c6d4:	68f8      	ldr	r0, [r7, #12]
    c6d6:	4b22      	ldr	r3, [pc, #136]	; (c760 <n25q256a_erase+0x1a8>)
    c6d8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c6da:	f107 0314 	add.w	r3, r7, #20
    c6de:	4619      	mov	r1, r3
    c6e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c6e2:	4b20      	ldr	r3, [pc, #128]	; (c764 <n25q256a_erase+0x1ac>)
    c6e4:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c6f0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c6f4:	63bb      	str	r3, [r7, #56]	; 0x38
    c6f6:	e003      	b.n	c700 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c6f8:	f06f 030c 	mvn.w	r3, #12
    c6fc:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c6fe:	e011      	b.n	c724 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c700:	bf00      	nop
    c702:	7d3b      	ldrb	r3, [r7, #20]
    c704:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c708:	b2db      	uxtb	r3, r3
    c70a:	2270      	movs	r2, #112	; 0x70
    c70c:	4619      	mov	r1, r3
    c70e:	68f8      	ldr	r0, [r7, #12]
    c710:	4b15      	ldr	r3, [pc, #84]	; (c768 <n25q256a_erase+0x1b0>)
    c712:	4798      	blx	r3
    c714:	4603      	mov	r3, r0
    c716:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c71a:	2b00      	cmp	r3, #0
    c71c:	d0f1      	beq.n	c702 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c720:	2b00      	cmp	r3, #0
    c722:	d1a5      	bne.n	c670 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c724:	bf00      	nop
    c726:	7d3b      	ldrb	r3, [r7, #20]
    c728:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c72c:	b2db      	uxtb	r3, r3
    c72e:	2270      	movs	r2, #112	; 0x70
    c730:	4619      	mov	r1, r3
    c732:	68f8      	ldr	r0, [r7, #12]
    c734:	4b0c      	ldr	r3, [pc, #48]	; (c768 <n25q256a_erase+0x1b0>)
    c736:	4798      	blx	r3
    c738:	4603      	mov	r3, r0
    c73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c73e:	2b00      	cmp	r3, #0
    c740:	d0f1      	beq.n	c726 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c744:	7b5b      	ldrb	r3, [r3, #13]
    c746:	2b00      	cmp	r3, #0
    c748:	d003      	beq.n	c752 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c74a:	2101      	movs	r1, #1
    c74c:	68f8      	ldr	r0, [r7, #12]
    c74e:	4b07      	ldr	r3, [pc, #28]	; (c76c <n25q256a_erase+0x1b4>)
    c750:	4798      	blx	r3
	}
	return rc;
    c752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c754:	4618      	mov	r0, r3
    c756:	3740      	adds	r7, #64	; 0x40
    c758:	46bd      	mov	sp, r7
    c75a:	bd80      	pop	{r7, pc}
    c75c:	001fffff 	.word	0x001fffff
    c760:	0000c219 	.word	0x0000c219
    c764:	00002d89 	.word	0x00002d89
    c768:	0000c0dd 	.word	0x0000c0dd
    c76c:	0000c011 	.word	0x0000c011

0000c770 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c770:	b590      	push	{r4, r7, lr}
    c772:	b085      	sub	sp, #20
    c774:	af00      	add	r7, sp, #0
    c776:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c778:	687b      	ldr	r3, [r7, #4]
    c77a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c77c:	68fb      	ldr	r3, [r7, #12]
    c77e:	7b1b      	ldrb	r3, [r3, #12]
    c780:	2b00      	cmp	r3, #0
    c782:	d001      	beq.n	c788 <n25q256a_enable_xip+0x18>
    c784:	2306      	movs	r3, #6
    c786:	e000      	b.n	c78a <n25q256a_enable_xip+0x1a>
    c788:	2300      	movs	r3, #0
    c78a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c78c:	68fb      	ldr	r3, [r7, #12]
    c78e:	7b5b      	ldrb	r3, [r3, #13]
    c790:	2b00      	cmp	r3, #0
    c792:	d129      	bne.n	c7e8 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c794:	7afb      	ldrb	r3, [r7, #11]
    c796:	2285      	movs	r2, #133	; 0x85
    c798:	4619      	mov	r1, r3
    c79a:	6878      	ldr	r0, [r7, #4]
    c79c:	4b15      	ldr	r3, [pc, #84]	; (c7f4 <n25q256a_enable_xip+0x84>)
    c79e:	4798      	blx	r3
    c7a0:	4603      	mov	r3, r0
    c7a2:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c7a4:	7abb      	ldrb	r3, [r7, #10]
    c7a6:	f003 0308 	and.w	r3, r3, #8
    c7aa:	2b00      	cmp	r3, #0
    c7ac:	d015      	beq.n	c7da <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c7ae:	7abb      	ldrb	r3, [r7, #10]
    c7b0:	f023 0308 	bic.w	r3, r3, #8
    c7b4:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c7b6:	7abb      	ldrb	r3, [r7, #10]
    c7b8:	7af9      	ldrb	r1, [r7, #11]
    c7ba:	2281      	movs	r2, #129	; 0x81
    c7bc:	6878      	ldr	r0, [r7, #4]
    c7be:	4c0e      	ldr	r4, [pc, #56]	; (c7f8 <n25q256a_enable_xip+0x88>)
    c7c0:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c7c2:	bf00      	nop
    c7c4:	7afb      	ldrb	r3, [r7, #11]
    c7c6:	2270      	movs	r2, #112	; 0x70
    c7c8:	4619      	mov	r1, r3
    c7ca:	6878      	ldr	r0, [r7, #4]
    c7cc:	4b09      	ldr	r3, [pc, #36]	; (c7f4 <n25q256a_enable_xip+0x84>)
    c7ce:	4798      	blx	r3
    c7d0:	4603      	mov	r3, r0
    c7d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	d0f4      	beq.n	c7c4 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c7da:	68fb      	ldr	r3, [r7, #12]
    c7dc:	2201      	movs	r2, #1
    c7de:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c7e0:	2101      	movs	r1, #1
    c7e2:	6878      	ldr	r0, [r7, #4]
    c7e4:	4b05      	ldr	r3, [pc, #20]	; (c7fc <n25q256a_enable_xip+0x8c>)
    c7e6:	4798      	blx	r3
	}
	return ERR_NONE;
    c7e8:	2300      	movs	r3, #0
}
    c7ea:	4618      	mov	r0, r3
    c7ec:	3714      	adds	r7, #20
    c7ee:	46bd      	mov	sp, r7
    c7f0:	bd90      	pop	{r4, r7, pc}
    c7f2:	bf00      	nop
    c7f4:	0000c0dd 	.word	0x0000c0dd
    c7f8:	0000c179 	.word	0x0000c179
    c7fc:	0000c011 	.word	0x0000c011

0000c800 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c800:	b580      	push	{r7, lr}
    c802:	b086      	sub	sp, #24
    c804:	af00      	add	r7, sp, #0
    c806:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c808:	687b      	ldr	r3, [r7, #4]
    c80a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c80c:	687b      	ldr	r3, [r7, #4]
    c80e:	681b      	ldr	r3, [r3, #0]
    c810:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c812:	697b      	ldr	r3, [r7, #20]
    c814:	7b1b      	ldrb	r3, [r3, #12]
    c816:	2b00      	cmp	r3, #0
    c818:	d001      	beq.n	c81e <n25q256a_disable_xip+0x1e>
    c81a:	2306      	movs	r3, #6
    c81c:	e000      	b.n	c820 <n25q256a_disable_xip+0x20>
    c81e:	2300      	movs	r3, #0
    c820:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c822:	2100      	movs	r1, #0
    c824:	6878      	ldr	r0, [r7, #4]
    c826:	4b15      	ldr	r3, [pc, #84]	; (c87c <n25q256a_disable_xip+0x7c>)
    c828:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c82a:	7bfb      	ldrb	r3, [r7, #15]
    c82c:	2285      	movs	r2, #133	; 0x85
    c82e:	4619      	mov	r1, r3
    c830:	6878      	ldr	r0, [r7, #4]
    c832:	4b13      	ldr	r3, [pc, #76]	; (c880 <n25q256a_disable_xip+0x80>)
    c834:	4798      	blx	r3
    c836:	4603      	mov	r3, r0
    c838:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c83a:	7bbb      	ldrb	r3, [r7, #14]
    c83c:	f003 0308 	and.w	r3, r3, #8
    c840:	2b00      	cmp	r3, #0
    c842:	d113      	bne.n	c86c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c844:	697b      	ldr	r3, [r7, #20]
    c846:	689b      	ldr	r3, [r3, #8]
    c848:	2b00      	cmp	r3, #0
    c84a:	d00f      	beq.n	c86c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c84c:	693b      	ldr	r3, [r7, #16]
    c84e:	681b      	ldr	r3, [r3, #0]
    c850:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c852:	6938      	ldr	r0, [r7, #16]
    c854:	4b0b      	ldr	r3, [pc, #44]	; (c884 <n25q256a_disable_xip+0x84>)
    c856:	4798      	blx	r3
			n25q->pin_exit_xip();
    c858:	697b      	ldr	r3, [r7, #20]
    c85a:	689b      	ldr	r3, [r3, #8]
    c85c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c85e:	68b9      	ldr	r1, [r7, #8]
    c860:	6938      	ldr	r0, [r7, #16]
    c862:	4b09      	ldr	r3, [pc, #36]	; (c888 <n25q256a_disable_xip+0x88>)
    c864:	4798      	blx	r3
			qspi_sync_enable(descr);
    c866:	6938      	ldr	r0, [r7, #16]
    c868:	4b08      	ldr	r3, [pc, #32]	; (c88c <n25q256a_disable_xip+0x8c>)
    c86a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c86c:	697b      	ldr	r3, [r7, #20]
    c86e:	2200      	movs	r2, #0
    c870:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c872:	2300      	movs	r3, #0
}
    c874:	4618      	mov	r0, r3
    c876:	3718      	adds	r7, #24
    c878:	46bd      	mov	sp, r7
    c87a:	bd80      	pop	{r7, pc}
    c87c:	0000c011 	.word	0x0000c011
    c880:	0000c0dd 	.word	0x0000c0dd
    c884:	00002d4d 	.word	0x00002d4d
    c888:	00002cc5 	.word	0x00002cc5
    c88c:	00002d11 	.word	0x00002d11

0000c890 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c890:	b480      	push	{r7}
    c892:	b085      	sub	sp, #20
    c894:	af00      	add	r7, sp, #0
    c896:	60f8      	str	r0, [r7, #12]
    c898:	60b9      	str	r1, [r7, #8]
    c89a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c89c:	68fb      	ldr	r3, [r7, #12]
    c89e:	68ba      	ldr	r2, [r7, #8]
    c8a0:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c8a2:	68fb      	ldr	r3, [r7, #12]
    c8a4:	687a      	ldr	r2, [r7, #4]
    c8a6:	605a      	str	r2, [r3, #4]

	return me;
    c8a8:	68fb      	ldr	r3, [r7, #12]
}
    c8aa:	4618      	mov	r0, r3
    c8ac:	3714      	adds	r7, #20
    c8ae:	46bd      	mov	sp, r7
    c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8b4:	4770      	bx	lr

0000c8b6 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c8b6:	b480      	push	{r7}
    c8b8:	b083      	sub	sp, #12
    c8ba:	af00      	add	r7, sp, #0
    c8bc:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c8be:	687b      	ldr	r3, [r7, #4]
    c8c0:	781b      	ldrb	r3, [r3, #0]
    c8c2:	b29a      	uxth	r2, r3
    c8c4:	687b      	ldr	r3, [r7, #4]
    c8c6:	3301      	adds	r3, #1
    c8c8:	781b      	ldrb	r3, [r3, #0]
    c8ca:	b29b      	uxth	r3, r3
    c8cc:	021b      	lsls	r3, r3, #8
    c8ce:	b29b      	uxth	r3, r3
    c8d0:	4413      	add	r3, r2
    c8d2:	b29b      	uxth	r3, r3
}
    c8d4:	4618      	mov	r0, r3
    c8d6:	370c      	adds	r7, #12
    c8d8:	46bd      	mov	sp, r7
    c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8de:	4770      	bx	lr

0000c8e0 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c8e0:	b480      	push	{r7}
    c8e2:	b083      	sub	sp, #12
    c8e4:	af00      	add	r7, sp, #0
    c8e6:	6078      	str	r0, [r7, #4]
	return desc[0];
    c8e8:	687b      	ldr	r3, [r7, #4]
    c8ea:	781b      	ldrb	r3, [r3, #0]
}
    c8ec:	4618      	mov	r0, r3
    c8ee:	370c      	adds	r7, #12
    c8f0:	46bd      	mov	sp, r7
    c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8f6:	4770      	bx	lr

0000c8f8 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c8f8:	b580      	push	{r7, lr}
    c8fa:	b082      	sub	sp, #8
    c8fc:	af00      	add	r7, sp, #0
    c8fe:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c900:	6878      	ldr	r0, [r7, #4]
    c902:	4b05      	ldr	r3, [pc, #20]	; (c918 <usb_desc_next+0x20>)
    c904:	4798      	blx	r3
    c906:	4603      	mov	r3, r0
    c908:	461a      	mov	r2, r3
    c90a:	687b      	ldr	r3, [r7, #4]
    c90c:	4413      	add	r3, r2
}
    c90e:	4618      	mov	r0, r3
    c910:	3708      	adds	r7, #8
    c912:	46bd      	mov	sp, r7
    c914:	bd80      	pop	{r7, pc}
    c916:	bf00      	nop
    c918:	0000c8e1 	.word	0x0000c8e1

0000c91c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c91c:	b580      	push	{r7, lr}
    c91e:	b08c      	sub	sp, #48	; 0x30
    c920:	af00      	add	r7, sp, #0
    c922:	6078      	str	r0, [r7, #4]
    c924:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c926:	687b      	ldr	r3, [r7, #4]
    c928:	689b      	ldr	r3, [r3, #8]
    c92a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c92c:	683b      	ldr	r3, [r7, #0]
    c92e:	681b      	ldr	r3, [r3, #0]
    c930:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c932:	2300      	movs	r3, #0
    c934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c938:	e08f      	b.n	ca5a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c93c:	2b00      	cmp	r3, #0
    c93e:	d102      	bne.n	c946 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c940:	f06f 0309 	mvn.w	r3, #9
    c944:	e092      	b.n	ca6c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c948:	789b      	ldrb	r3, [r3, #2]
    c94a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c94e:	795b      	ldrb	r3, [r3, #5]
    c950:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c952:	7c7b      	ldrb	r3, [r7, #17]
    c954:	2b02      	cmp	r3, #2
    c956:	d002      	beq.n	c95e <cdcdf_acm_enable+0x42>
    c958:	7c7b      	ldrb	r3, [r7, #17]
    c95a:	2b0a      	cmp	r3, #10
    c95c:	d121      	bne.n	c9a2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c95e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c962:	6a3a      	ldr	r2, [r7, #32]
    c964:	5cd2      	ldrb	r2, [r2, r3]
    c966:	7bbb      	ldrb	r3, [r7, #14]
    c968:	429a      	cmp	r2, r3
    c96a:	d102      	bne.n	c972 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c96c:	f06f 0311 	mvn.w	r3, #17
    c970:	e07c      	b.n	ca6c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c976:	6a3a      	ldr	r2, [r7, #32]
    c978:	5cd3      	ldrb	r3, [r2, r3]
    c97a:	2bff      	cmp	r3, #255	; 0xff
    c97c:	d002      	beq.n	c984 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c97e:	f06f 031b 	mvn.w	r3, #27
    c982:	e073      	b.n	ca6c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c988:	7bb9      	ldrb	r1, [r7, #14]
    c98a:	6a3a      	ldr	r2, [r7, #32]
    c98c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c98e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c990:	683b      	ldr	r3, [r7, #0]
    c992:	685b      	ldr	r3, [r3, #4]
    c994:	2205      	movs	r2, #5
    c996:	4619      	mov	r1, r3
    c998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c99a:	4b36      	ldr	r3, [pc, #216]	; (ca74 <cdcdf_acm_enable+0x158>)
    c99c:	4798      	blx	r3
    c99e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c9a0:	e047      	b.n	ca32 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c9a2:	f06f 0309 	mvn.w	r3, #9
    c9a6:	e061      	b.n	ca6c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9aa:	789b      	ldrb	r3, [r3, #2]
    c9ac:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9b0:	78db      	ldrb	r3, [r3, #3]
    c9b2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9b6:	3304      	adds	r3, #4
    c9b8:	4618      	mov	r0, r3
    c9ba:	4b2f      	ldr	r3, [pc, #188]	; (ca78 <cdcdf_acm_enable+0x15c>)
    c9bc:	4798      	blx	r3
    c9be:	4603      	mov	r3, r0
    c9c0:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c9c2:	7ebb      	ldrb	r3, [r7, #26]
    c9c4:	7ef9      	ldrb	r1, [r7, #27]
    c9c6:	8bba      	ldrh	r2, [r7, #28]
    c9c8:	4618      	mov	r0, r3
    c9ca:	4b2c      	ldr	r3, [pc, #176]	; (ca7c <cdcdf_acm_enable+0x160>)
    c9cc:	4798      	blx	r3
    c9ce:	4603      	mov	r3, r0
    c9d0:	2b00      	cmp	r3, #0
    c9d2:	d002      	beq.n	c9da <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c9d4:	f06f 0313 	mvn.w	r3, #19
    c9d8:	e048      	b.n	ca6c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c9da:	7ebb      	ldrb	r3, [r7, #26]
    c9dc:	b25b      	sxtb	r3, r3
    c9de:	2b00      	cmp	r3, #0
    c9e0:	da0f      	bge.n	ca02 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c9e6:	7eb9      	ldrb	r1, [r7, #26]
    c9e8:	6a3a      	ldr	r2, [r7, #32]
    c9ea:	4413      	add	r3, r2
    c9ec:	460a      	mov	r2, r1
    c9ee:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c9f4:	6a3a      	ldr	r2, [r7, #32]
    c9f6:	4413      	add	r3, r2
    c9f8:	789b      	ldrb	r3, [r3, #2]
    c9fa:	4618      	mov	r0, r3
    c9fc:	4b20      	ldr	r3, [pc, #128]	; (ca80 <cdcdf_acm_enable+0x164>)
    c9fe:	4798      	blx	r3
    ca00:	e007      	b.n	ca12 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    ca02:	7eba      	ldrb	r2, [r7, #26]
    ca04:	6a3b      	ldr	r3, [r7, #32]
    ca06:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    ca08:	6a3b      	ldr	r3, [r7, #32]
    ca0a:	791b      	ldrb	r3, [r3, #4]
    ca0c:	4618      	mov	r0, r3
    ca0e:	4b1c      	ldr	r3, [pc, #112]	; (ca80 <cdcdf_acm_enable+0x164>)
    ca10:	4798      	blx	r3
			}
			desc->sod = ep;
    ca12:	683b      	ldr	r3, [r7, #0]
    ca14:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ca16:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ca18:	683b      	ldr	r3, [r7, #0]
    ca1a:	681b      	ldr	r3, [r3, #0]
    ca1c:	4618      	mov	r0, r3
    ca1e:	4b19      	ldr	r3, [pc, #100]	; (ca84 <cdcdf_acm_enable+0x168>)
    ca20:	4798      	blx	r3
    ca22:	4602      	mov	r2, r0
    ca24:	683b      	ldr	r3, [r7, #0]
    ca26:	685b      	ldr	r3, [r3, #4]
    ca28:	4619      	mov	r1, r3
    ca2a:	4610      	mov	r0, r2
    ca2c:	4b16      	ldr	r3, [pc, #88]	; (ca88 <cdcdf_acm_enable+0x16c>)
    ca2e:	4798      	blx	r3
    ca30:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ca34:	2b00      	cmp	r3, #0
    ca36:	d1b7      	bne.n	c9a8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    ca38:	683b      	ldr	r3, [r7, #0]
    ca3a:	681b      	ldr	r3, [r3, #0]
    ca3c:	4618      	mov	r0, r3
    ca3e:	4b11      	ldr	r3, [pc, #68]	; (ca84 <cdcdf_acm_enable+0x168>)
    ca40:	4798      	blx	r3
    ca42:	683b      	ldr	r3, [r7, #0]
    ca44:	685b      	ldr	r3, [r3, #4]
    ca46:	2204      	movs	r2, #4
    ca48:	4619      	mov	r1, r3
    ca4a:	4b0a      	ldr	r3, [pc, #40]	; (ca74 <cdcdf_acm_enable+0x158>)
    ca4c:	4798      	blx	r3
    ca4e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    ca50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ca54:	3301      	adds	r3, #1
    ca56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ca5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ca5e:	2b01      	cmp	r3, #1
    ca60:	f67f af6b 	bls.w	c93a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    ca64:	4b09      	ldr	r3, [pc, #36]	; (ca8c <cdcdf_acm_enable+0x170>)
    ca66:	2201      	movs	r2, #1
    ca68:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    ca6a:	2300      	movs	r3, #0
}
    ca6c:	4618      	mov	r0, r3
    ca6e:	3730      	adds	r7, #48	; 0x30
    ca70:	46bd      	mov	sp, r7
    ca72:	bd80      	pop	{r7, pc}
    ca74:	0000dcdd 	.word	0x0000dcdd
    ca78:	0000c8b7 	.word	0x0000c8b7
    ca7c:	000039fd 	.word	0x000039fd
    ca80:	00003ae9 	.word	0x00003ae9
    ca84:	0000c8f9 	.word	0x0000c8f9
    ca88:	0000dd39 	.word	0x0000dd39
    ca8c:	20000ef0 	.word	0x20000ef0

0000ca90 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    ca90:	b580      	push	{r7, lr}
    ca92:	b088      	sub	sp, #32
    ca94:	af00      	add	r7, sp, #0
    ca96:	6078      	str	r0, [r7, #4]
    ca98:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    ca9a:	687b      	ldr	r3, [r7, #4]
    ca9c:	689b      	ldr	r3, [r3, #8]
    ca9e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    caa0:	683b      	ldr	r3, [r7, #0]
    caa2:	2b00      	cmp	r3, #0
    caa4:	d00c      	beq.n	cac0 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    caa6:	683b      	ldr	r3, [r7, #0]
    caa8:	681b      	ldr	r3, [r3, #0]
    caaa:	795b      	ldrb	r3, [r3, #5]
    caac:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    caae:	7c7b      	ldrb	r3, [r7, #17]
    cab0:	2b02      	cmp	r3, #2
    cab2:	d005      	beq.n	cac0 <cdcdf_acm_disable+0x30>
    cab4:	7c7b      	ldrb	r3, [r7, #17]
    cab6:	2b0a      	cmp	r3, #10
    cab8:	d002      	beq.n	cac0 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    caba:	f06f 0309 	mvn.w	r3, #9
    cabe:	e035      	b.n	cb2c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    cac0:	2300      	movs	r3, #0
    cac2:	77fb      	strb	r3, [r7, #31]
    cac4:	e01f      	b.n	cb06 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    cac6:	7ffb      	ldrb	r3, [r7, #31]
    cac8:	69ba      	ldr	r2, [r7, #24]
    caca:	5cd3      	ldrb	r3, [r2, r3]
    cacc:	2bff      	cmp	r3, #255	; 0xff
    cace:	d016      	beq.n	cafe <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    cad0:	7ffb      	ldrb	r3, [r7, #31]
    cad2:	69ba      	ldr	r2, [r7, #24]
    cad4:	21ff      	movs	r1, #255	; 0xff
    cad6:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    cad8:	7ffb      	ldrb	r3, [r7, #31]
    cada:	69ba      	ldr	r2, [r7, #24]
    cadc:	4413      	add	r3, r2
    cade:	789b      	ldrb	r3, [r3, #2]
    cae0:	2bff      	cmp	r3, #255	; 0xff
    cae2:	d00d      	beq.n	cb00 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    cae4:	7ffb      	ldrb	r3, [r7, #31]
    cae6:	69ba      	ldr	r2, [r7, #24]
    cae8:	4413      	add	r3, r2
    caea:	789b      	ldrb	r3, [r3, #2]
    caec:	4618      	mov	r0, r3
    caee:	4b11      	ldr	r3, [pc, #68]	; (cb34 <cdcdf_acm_disable+0xa4>)
    caf0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    caf2:	7ffb      	ldrb	r3, [r7, #31]
    caf4:	69ba      	ldr	r2, [r7, #24]
    caf6:	4413      	add	r3, r2
    caf8:	22ff      	movs	r2, #255	; 0xff
    cafa:	709a      	strb	r2, [r3, #2]
    cafc:	e000      	b.n	cb00 <cdcdf_acm_disable+0x70>
			continue;
    cafe:	bf00      	nop
	for (i = 0; i < 2; i++) {
    cb00:	7ffb      	ldrb	r3, [r7, #31]
    cb02:	3301      	adds	r3, #1
    cb04:	77fb      	strb	r3, [r7, #31]
    cb06:	7ffb      	ldrb	r3, [r7, #31]
    cb08:	2b01      	cmp	r3, #1
    cb0a:	d9dc      	bls.n	cac6 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    cb0c:	69bb      	ldr	r3, [r7, #24]
    cb0e:	791b      	ldrb	r3, [r3, #4]
    cb10:	2bff      	cmp	r3, #255	; 0xff
    cb12:	d007      	beq.n	cb24 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    cb14:	69bb      	ldr	r3, [r7, #24]
    cb16:	791b      	ldrb	r3, [r3, #4]
    cb18:	4618      	mov	r0, r3
    cb1a:	4b06      	ldr	r3, [pc, #24]	; (cb34 <cdcdf_acm_disable+0xa4>)
    cb1c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    cb1e:	69bb      	ldr	r3, [r7, #24]
    cb20:	22ff      	movs	r2, #255	; 0xff
    cb22:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    cb24:	4b04      	ldr	r3, [pc, #16]	; (cb38 <cdcdf_acm_disable+0xa8>)
    cb26:	2200      	movs	r2, #0
    cb28:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    cb2a:	2300      	movs	r3, #0
}
    cb2c:	4618      	mov	r0, r3
    cb2e:	3720      	adds	r7, #32
    cb30:	46bd      	mov	sp, r7
    cb32:	bd80      	pop	{r7, pc}
    cb34:	00003a99 	.word	0x00003a99
    cb38:	20000ef0 	.word	0x20000ef0

0000cb3c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    cb3c:	b580      	push	{r7, lr}
    cb3e:	b084      	sub	sp, #16
    cb40:	af00      	add	r7, sp, #0
    cb42:	60f8      	str	r0, [r7, #12]
    cb44:	460b      	mov	r3, r1
    cb46:	607a      	str	r2, [r7, #4]
    cb48:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    cb4a:	7afb      	ldrb	r3, [r7, #11]
    cb4c:	2b01      	cmp	r3, #1
    cb4e:	d009      	beq.n	cb64 <cdcdf_acm_ctrl+0x28>
    cb50:	2b02      	cmp	r3, #2
    cb52:	d00d      	beq.n	cb70 <cdcdf_acm_ctrl+0x34>
    cb54:	2b00      	cmp	r3, #0
    cb56:	d10e      	bne.n	cb76 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    cb58:	6879      	ldr	r1, [r7, #4]
    cb5a:	68f8      	ldr	r0, [r7, #12]
    cb5c:	4b09      	ldr	r3, [pc, #36]	; (cb84 <cdcdf_acm_ctrl+0x48>)
    cb5e:	4798      	blx	r3
    cb60:	4603      	mov	r3, r0
    cb62:	e00a      	b.n	cb7a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    cb64:	6879      	ldr	r1, [r7, #4]
    cb66:	68f8      	ldr	r0, [r7, #12]
    cb68:	4b07      	ldr	r3, [pc, #28]	; (cb88 <cdcdf_acm_ctrl+0x4c>)
    cb6a:	4798      	blx	r3
    cb6c:	4603      	mov	r3, r0
    cb6e:	e004      	b.n	cb7a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    cb70:	f06f 031a 	mvn.w	r3, #26
    cb74:	e001      	b.n	cb7a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    cb76:	f06f 030c 	mvn.w	r3, #12
	}
}
    cb7a:	4618      	mov	r0, r3
    cb7c:	3710      	adds	r7, #16
    cb7e:	46bd      	mov	sp, r7
    cb80:	bd80      	pop	{r7, pc}
    cb82:	bf00      	nop
    cb84:	0000c91d 	.word	0x0000c91d
    cb88:	0000ca91 	.word	0x0000ca91

0000cb8c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cb8c:	b590      	push	{r4, r7, lr}
    cb8e:	b087      	sub	sp, #28
    cb90:	af00      	add	r7, sp, #0
    cb92:	4603      	mov	r3, r0
    cb94:	6039      	str	r1, [r7, #0]
    cb96:	71fb      	strb	r3, [r7, #7]
    cb98:	4613      	mov	r3, r2
    cb9a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    cb9c:	683b      	ldr	r3, [r7, #0]
    cb9e:	799a      	ldrb	r2, [r3, #6]
    cba0:	79db      	ldrb	r3, [r3, #7]
    cba2:	021b      	lsls	r3, r3, #8
    cba4:	4313      	orrs	r3, r2
    cba6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    cba8:	4b2b      	ldr	r3, [pc, #172]	; (cc58 <cdcdf_acm_set_req+0xcc>)
    cbaa:	4798      	blx	r3
    cbac:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    cbae:	683b      	ldr	r3, [r7, #0]
    cbb0:	785b      	ldrb	r3, [r3, #1]
    cbb2:	2b20      	cmp	r3, #32
    cbb4:	d002      	beq.n	cbbc <cdcdf_acm_set_req+0x30>
    cbb6:	2b22      	cmp	r3, #34	; 0x22
    cbb8:	d034      	beq.n	cc24 <cdcdf_acm_set_req+0x98>
    cbba:	e046      	b.n	cc4a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cbbc:	8afb      	ldrh	r3, [r7, #22]
    cbbe:	2b07      	cmp	r3, #7
    cbc0:	d002      	beq.n	cbc8 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    cbc2:	f04f 33ff 	mov.w	r3, #4294967295
    cbc6:	e042      	b.n	cc4e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    cbc8:	79bb      	ldrb	r3, [r7, #6]
    cbca:	2b00      	cmp	r3, #0
    cbcc:	d107      	bne.n	cbde <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    cbce:	8afa      	ldrh	r2, [r7, #22]
    cbd0:	79f8      	ldrb	r0, [r7, #7]
    cbd2:	2300      	movs	r3, #0
    cbd4:	6939      	ldr	r1, [r7, #16]
    cbd6:	4c21      	ldr	r4, [pc, #132]	; (cc5c <cdcdf_acm_set_req+0xd0>)
    cbd8:	47a0      	blx	r4
    cbda:	4603      	mov	r3, r0
    cbdc:	e037      	b.n	cc4e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    cbde:	693a      	ldr	r2, [r7, #16]
    cbe0:	f107 0308 	add.w	r3, r7, #8
    cbe4:	6810      	ldr	r0, [r2, #0]
    cbe6:	6018      	str	r0, [r3, #0]
    cbe8:	8891      	ldrh	r1, [r2, #4]
    cbea:	7992      	ldrb	r2, [r2, #6]
    cbec:	8099      	strh	r1, [r3, #4]
    cbee:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    cbf0:	4b1b      	ldr	r3, [pc, #108]	; (cc60 <cdcdf_acm_set_req+0xd4>)
    cbf2:	681b      	ldr	r3, [r3, #0]
    cbf4:	2b00      	cmp	r3, #0
    cbf6:	d008      	beq.n	cc0a <cdcdf_acm_set_req+0x7e>
    cbf8:	4b19      	ldr	r3, [pc, #100]	; (cc60 <cdcdf_acm_set_req+0xd4>)
    cbfa:	681b      	ldr	r3, [r3, #0]
    cbfc:	f107 0208 	add.w	r2, r7, #8
    cc00:	4610      	mov	r0, r2
    cc02:	4798      	blx	r3
    cc04:	4603      	mov	r3, r0
    cc06:	2b00      	cmp	r3, #0
    cc08:	d00a      	beq.n	cc20 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    cc0a:	4b16      	ldr	r3, [pc, #88]	; (cc64 <cdcdf_acm_set_req+0xd8>)
    cc0c:	f107 0208 	add.w	r2, r7, #8
    cc10:	e892 0003 	ldmia.w	r2, {r0, r1}
    cc14:	6018      	str	r0, [r3, #0]
    cc16:	3304      	adds	r3, #4
    cc18:	8019      	strh	r1, [r3, #0]
    cc1a:	3302      	adds	r3, #2
    cc1c:	0c0a      	lsrs	r2, r1, #16
    cc1e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    cc20:	2300      	movs	r3, #0
    cc22:	e014      	b.n	cc4e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    cc24:	2300      	movs	r3, #0
    cc26:	2200      	movs	r2, #0
    cc28:	2100      	movs	r1, #0
    cc2a:	2000      	movs	r0, #0
    cc2c:	4c0b      	ldr	r4, [pc, #44]	; (cc5c <cdcdf_acm_set_req+0xd0>)
    cc2e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    cc30:	4b0d      	ldr	r3, [pc, #52]	; (cc68 <cdcdf_acm_set_req+0xdc>)
    cc32:	681b      	ldr	r3, [r3, #0]
    cc34:	2b00      	cmp	r3, #0
    cc36:	d006      	beq.n	cc46 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    cc38:	4b0b      	ldr	r3, [pc, #44]	; (cc68 <cdcdf_acm_set_req+0xdc>)
    cc3a:	681b      	ldr	r3, [r3, #0]
    cc3c:	683a      	ldr	r2, [r7, #0]
    cc3e:	8852      	ldrh	r2, [r2, #2]
    cc40:	b292      	uxth	r2, r2
    cc42:	4610      	mov	r0, r2
    cc44:	4798      	blx	r3
		}
		return ERR_NONE;
    cc46:	2300      	movs	r3, #0
    cc48:	e001      	b.n	cc4e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    cc4a:	f06f 030c 	mvn.w	r3, #12
	}
}
    cc4e:	4618      	mov	r0, r3
    cc50:	371c      	adds	r7, #28
    cc52:	46bd      	mov	sp, r7
    cc54:	bd90      	pop	{r4, r7, pc}
    cc56:	bf00      	nop
    cc58:	0000dbd9 	.word	0x0000dbd9
    cc5c:	0000da4d 	.word	0x0000da4d
    cc60:	20000f04 	.word	0x20000f04
    cc64:	20000ef8 	.word	0x20000ef8
    cc68:	20000f00 	.word	0x20000f00

0000cc6c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cc6c:	b590      	push	{r4, r7, lr}
    cc6e:	b085      	sub	sp, #20
    cc70:	af00      	add	r7, sp, #0
    cc72:	4603      	mov	r3, r0
    cc74:	6039      	str	r1, [r7, #0]
    cc76:	71fb      	strb	r3, [r7, #7]
    cc78:	4613      	mov	r3, r2
    cc7a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    cc7c:	683b      	ldr	r3, [r7, #0]
    cc7e:	799a      	ldrb	r2, [r3, #6]
    cc80:	79db      	ldrb	r3, [r3, #7]
    cc82:	021b      	lsls	r3, r3, #8
    cc84:	4313      	orrs	r3, r2
    cc86:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    cc88:	79bb      	ldrb	r3, [r7, #6]
    cc8a:	2b01      	cmp	r3, #1
    cc8c:	d101      	bne.n	cc92 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    cc8e:	2300      	movs	r3, #0
    cc90:	e013      	b.n	ccba <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    cc92:	683b      	ldr	r3, [r7, #0]
    cc94:	785b      	ldrb	r3, [r3, #1]
    cc96:	2b21      	cmp	r3, #33	; 0x21
    cc98:	d10d      	bne.n	ccb6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    cc9a:	89fb      	ldrh	r3, [r7, #14]
    cc9c:	2b07      	cmp	r3, #7
    cc9e:	d002      	beq.n	cca6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    cca0:	f04f 33ff 	mov.w	r3, #4294967295
    cca4:	e009      	b.n	ccba <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    cca6:	89fa      	ldrh	r2, [r7, #14]
    cca8:	79f8      	ldrb	r0, [r7, #7]
    ccaa:	2300      	movs	r3, #0
    ccac:	4905      	ldr	r1, [pc, #20]	; (ccc4 <cdcdf_acm_get_req+0x58>)
    ccae:	4c06      	ldr	r4, [pc, #24]	; (ccc8 <cdcdf_acm_get_req+0x5c>)
    ccb0:	47a0      	blx	r4
    ccb2:	4603      	mov	r3, r0
    ccb4:	e001      	b.n	ccba <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    ccb6:	f06f 030c 	mvn.w	r3, #12
	}
}
    ccba:	4618      	mov	r0, r3
    ccbc:	3714      	adds	r7, #20
    ccbe:	46bd      	mov	sp, r7
    ccc0:	bd90      	pop	{r4, r7, pc}
    ccc2:	bf00      	nop
    ccc4:	20000ef8 	.word	0x20000ef8
    ccc8:	0000da4d 	.word	0x0000da4d

0000cccc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cccc:	b580      	push	{r7, lr}
    ccce:	b082      	sub	sp, #8
    ccd0:	af00      	add	r7, sp, #0
    ccd2:	4603      	mov	r3, r0
    ccd4:	6039      	str	r1, [r7, #0]
    ccd6:	71fb      	strb	r3, [r7, #7]
    ccd8:	4613      	mov	r3, r2
    ccda:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ccdc:	683b      	ldr	r3, [r7, #0]
    ccde:	781b      	ldrb	r3, [r3, #0]
    cce0:	095b      	lsrs	r3, r3, #5
    cce2:	b2db      	uxtb	r3, r3
    cce4:	f003 0303 	and.w	r3, r3, #3
    cce8:	2b01      	cmp	r3, #1
    ccea:	d002      	beq.n	ccf2 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    ccec:	f06f 0309 	mvn.w	r3, #9
    ccf0:	e026      	b.n	cd40 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    ccf2:	683b      	ldr	r3, [r7, #0]
    ccf4:	889b      	ldrh	r3, [r3, #4]
    ccf6:	b29a      	uxth	r2, r3
    ccf8:	4b13      	ldr	r3, [pc, #76]	; (cd48 <cdcdf_acm_req+0x7c>)
    ccfa:	781b      	ldrb	r3, [r3, #0]
    ccfc:	b29b      	uxth	r3, r3
    ccfe:	429a      	cmp	r2, r3
    cd00:	d007      	beq.n	cd12 <cdcdf_acm_req+0x46>
    cd02:	683b      	ldr	r3, [r7, #0]
    cd04:	889b      	ldrh	r3, [r3, #4]
    cd06:	b29a      	uxth	r2, r3
    cd08:	4b0f      	ldr	r3, [pc, #60]	; (cd48 <cdcdf_acm_req+0x7c>)
    cd0a:	785b      	ldrb	r3, [r3, #1]
    cd0c:	b29b      	uxth	r3, r3
    cd0e:	429a      	cmp	r2, r3
    cd10:	d114      	bne.n	cd3c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    cd12:	683b      	ldr	r3, [r7, #0]
    cd14:	781b      	ldrb	r3, [r3, #0]
    cd16:	b25b      	sxtb	r3, r3
    cd18:	2b00      	cmp	r3, #0
    cd1a:	da07      	bge.n	cd2c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    cd1c:	79ba      	ldrb	r2, [r7, #6]
    cd1e:	79fb      	ldrb	r3, [r7, #7]
    cd20:	6839      	ldr	r1, [r7, #0]
    cd22:	4618      	mov	r0, r3
    cd24:	4b09      	ldr	r3, [pc, #36]	; (cd4c <cdcdf_acm_req+0x80>)
    cd26:	4798      	blx	r3
    cd28:	4603      	mov	r3, r0
    cd2a:	e009      	b.n	cd40 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    cd2c:	79ba      	ldrb	r2, [r7, #6]
    cd2e:	79fb      	ldrb	r3, [r7, #7]
    cd30:	6839      	ldr	r1, [r7, #0]
    cd32:	4618      	mov	r0, r3
    cd34:	4b06      	ldr	r3, [pc, #24]	; (cd50 <cdcdf_acm_req+0x84>)
    cd36:	4798      	blx	r3
    cd38:	4603      	mov	r3, r0
    cd3a:	e001      	b.n	cd40 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    cd3c:	f06f 0309 	mvn.w	r3, #9
	}
}
    cd40:	4618      	mov	r0, r3
    cd42:	3708      	adds	r7, #8
    cd44:	46bd      	mov	sp, r7
    cd46:	bd80      	pop	{r7, pc}
    cd48:	20000ef0 	.word	0x20000ef0
    cd4c:	0000cc6d 	.word	0x0000cc6d
    cd50:	0000cb8d 	.word	0x0000cb8d

0000cd54 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    cd54:	b580      	push	{r7, lr}
    cd56:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    cd58:	4b0b      	ldr	r3, [pc, #44]	; (cd88 <cdcdf_acm_init+0x34>)
    cd5a:	4798      	blx	r3
    cd5c:	4603      	mov	r3, r0
    cd5e:	2b01      	cmp	r3, #1
    cd60:	d902      	bls.n	cd68 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    cd62:	f06f 0310 	mvn.w	r3, #16
    cd66:	e00d      	b.n	cd84 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    cd68:	4b08      	ldr	r3, [pc, #32]	; (cd8c <cdcdf_acm_init+0x38>)
    cd6a:	4a09      	ldr	r2, [pc, #36]	; (cd90 <cdcdf_acm_init+0x3c>)
    cd6c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    cd6e:	4b07      	ldr	r3, [pc, #28]	; (cd8c <cdcdf_acm_init+0x38>)
    cd70:	4a08      	ldr	r2, [pc, #32]	; (cd94 <cdcdf_acm_init+0x40>)
    cd72:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    cd74:	4805      	ldr	r0, [pc, #20]	; (cd8c <cdcdf_acm_init+0x38>)
    cd76:	4b08      	ldr	r3, [pc, #32]	; (cd98 <cdcdf_acm_init+0x44>)
    cd78:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    cd7a:	4908      	ldr	r1, [pc, #32]	; (cd9c <cdcdf_acm_init+0x48>)
    cd7c:	2001      	movs	r0, #1
    cd7e:	4b08      	ldr	r3, [pc, #32]	; (cda0 <cdcdf_acm_init+0x4c>)
    cd80:	4798      	blx	r3
	return ERR_NONE;
    cd82:	2300      	movs	r3, #0
}
    cd84:	4618      	mov	r0, r3
    cd86:	bd80      	pop	{r7, pc}
    cd88:	0000dbf1 	.word	0x0000dbf1
    cd8c:	20000ee4 	.word	0x20000ee4
    cd90:	0000cb3d 	.word	0x0000cb3d
    cd94:	20000ef0 	.word	0x20000ef0
    cd98:	0000db59 	.word	0x0000db59
    cd9c:	200001d8 	.word	0x200001d8
    cda0:	0000da89 	.word	0x0000da89

0000cda4 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    cda4:	b590      	push	{r4, r7, lr}
    cda6:	b083      	sub	sp, #12
    cda8:	af00      	add	r7, sp, #0
    cdaa:	6078      	str	r0, [r7, #4]
    cdac:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cdae:	4b0b      	ldr	r3, [pc, #44]	; (cddc <cdcdf_acm_read+0x38>)
    cdb0:	4798      	blx	r3
    cdb2:	4603      	mov	r3, r0
    cdb4:	f083 0301 	eor.w	r3, r3, #1
    cdb8:	b2db      	uxtb	r3, r3
    cdba:	2b00      	cmp	r3, #0
    cdbc:	d002      	beq.n	cdc4 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    cdbe:	f06f 0310 	mvn.w	r3, #16
    cdc2:	e007      	b.n	cdd4 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    cdc4:	4b06      	ldr	r3, [pc, #24]	; (cde0 <cdcdf_acm_read+0x3c>)
    cdc6:	7918      	ldrb	r0, [r3, #4]
    cdc8:	2300      	movs	r3, #0
    cdca:	683a      	ldr	r2, [r7, #0]
    cdcc:	6879      	ldr	r1, [r7, #4]
    cdce:	4c05      	ldr	r4, [pc, #20]	; (cde4 <cdcdf_acm_read+0x40>)
    cdd0:	47a0      	blx	r4
    cdd2:	4603      	mov	r3, r0
}
    cdd4:	4618      	mov	r0, r3
    cdd6:	370c      	adds	r7, #12
    cdd8:	46bd      	mov	sp, r7
    cdda:	bd90      	pop	{r4, r7, pc}
    cddc:	0000cec9 	.word	0x0000cec9
    cde0:	20000ef0 	.word	0x20000ef0
    cde4:	0000da4d 	.word	0x0000da4d

0000cde8 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    cde8:	b590      	push	{r4, r7, lr}
    cdea:	b083      	sub	sp, #12
    cdec:	af00      	add	r7, sp, #0
    cdee:	6078      	str	r0, [r7, #4]
    cdf0:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cdf2:	4b0b      	ldr	r3, [pc, #44]	; (ce20 <cdcdf_acm_write+0x38>)
    cdf4:	4798      	blx	r3
    cdf6:	4603      	mov	r3, r0
    cdf8:	f083 0301 	eor.w	r3, r3, #1
    cdfc:	b2db      	uxtb	r3, r3
    cdfe:	2b00      	cmp	r3, #0
    ce00:	d002      	beq.n	ce08 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    ce02:	f06f 0310 	mvn.w	r3, #16
    ce06:	e007      	b.n	ce18 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    ce08:	4b06      	ldr	r3, [pc, #24]	; (ce24 <cdcdf_acm_write+0x3c>)
    ce0a:	78d8      	ldrb	r0, [r3, #3]
    ce0c:	2301      	movs	r3, #1
    ce0e:	683a      	ldr	r2, [r7, #0]
    ce10:	6879      	ldr	r1, [r7, #4]
    ce12:	4c05      	ldr	r4, [pc, #20]	; (ce28 <cdcdf_acm_write+0x40>)
    ce14:	47a0      	blx	r4
    ce16:	4603      	mov	r3, r0
}
    ce18:	4618      	mov	r0, r3
    ce1a:	370c      	adds	r7, #12
    ce1c:	46bd      	mov	sp, r7
    ce1e:	bd90      	pop	{r4, r7, pc}
    ce20:	0000cec9 	.word	0x0000cec9
    ce24:	20000ef0 	.word	0x20000ef0
    ce28:	0000da4d 	.word	0x0000da4d

0000ce2c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    ce2c:	b580      	push	{r7, lr}
    ce2e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    ce30:	4b05      	ldr	r3, [pc, #20]	; (ce48 <cdcdf_acm_stop_xfer+0x1c>)
    ce32:	78db      	ldrb	r3, [r3, #3]
    ce34:	4618      	mov	r0, r3
    ce36:	4b05      	ldr	r3, [pc, #20]	; (ce4c <cdcdf_acm_stop_xfer+0x20>)
    ce38:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    ce3a:	4b03      	ldr	r3, [pc, #12]	; (ce48 <cdcdf_acm_stop_xfer+0x1c>)
    ce3c:	791b      	ldrb	r3, [r3, #4]
    ce3e:	4618      	mov	r0, r3
    ce40:	4b02      	ldr	r3, [pc, #8]	; (ce4c <cdcdf_acm_stop_xfer+0x20>)
    ce42:	4798      	blx	r3
}
    ce44:	bf00      	nop
    ce46:	bd80      	pop	{r7, pc}
    ce48:	20000ef0 	.word	0x20000ef0
    ce4c:	00003cc1 	.word	0x00003cc1

0000ce50 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    ce50:	b580      	push	{r7, lr}
    ce52:	b082      	sub	sp, #8
    ce54:	af00      	add	r7, sp, #0
    ce56:	4603      	mov	r3, r0
    ce58:	6039      	str	r1, [r7, #0]
    ce5a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    ce5c:	79fb      	ldrb	r3, [r7, #7]
    ce5e:	2b03      	cmp	r3, #3
    ce60:	d822      	bhi.n	cea8 <cdcdf_acm_register_callback+0x58>
    ce62:	a201      	add	r2, pc, #4	; (adr r2, ce68 <cdcdf_acm_register_callback+0x18>)
    ce64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce68:	0000ce79 	.word	0x0000ce79
    ce6c:	0000ce89 	.word	0x0000ce89
    ce70:	0000ce99 	.word	0x0000ce99
    ce74:	0000cea1 	.word	0x0000cea1
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    ce78:	4b0f      	ldr	r3, [pc, #60]	; (ceb8 <cdcdf_acm_register_callback+0x68>)
    ce7a:	791b      	ldrb	r3, [r3, #4]
    ce7c:	683a      	ldr	r2, [r7, #0]
    ce7e:	2102      	movs	r1, #2
    ce80:	4618      	mov	r0, r3
    ce82:	4b0e      	ldr	r3, [pc, #56]	; (cebc <cdcdf_acm_register_callback+0x6c>)
    ce84:	4798      	blx	r3
		break;
    ce86:	e012      	b.n	ceae <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    ce88:	4b0b      	ldr	r3, [pc, #44]	; (ceb8 <cdcdf_acm_register_callback+0x68>)
    ce8a:	78db      	ldrb	r3, [r3, #3]
    ce8c:	683a      	ldr	r2, [r7, #0]
    ce8e:	2102      	movs	r1, #2
    ce90:	4618      	mov	r0, r3
    ce92:	4b0a      	ldr	r3, [pc, #40]	; (cebc <cdcdf_acm_register_callback+0x6c>)
    ce94:	4798      	blx	r3
		break;
    ce96:	e00a      	b.n	ceae <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    ce98:	4a09      	ldr	r2, [pc, #36]	; (cec0 <cdcdf_acm_register_callback+0x70>)
    ce9a:	683b      	ldr	r3, [r7, #0]
    ce9c:	6013      	str	r3, [r2, #0]
		break;
    ce9e:	e006      	b.n	ceae <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cea0:	4a08      	ldr	r2, [pc, #32]	; (cec4 <cdcdf_acm_register_callback+0x74>)
    cea2:	683b      	ldr	r3, [r7, #0]
    cea4:	6013      	str	r3, [r2, #0]
		break;
    cea6:	e002      	b.n	ceae <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    cea8:	f06f 030c 	mvn.w	r3, #12
    ceac:	e000      	b.n	ceb0 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    ceae:	2300      	movs	r3, #0
}
    ceb0:	4618      	mov	r0, r3
    ceb2:	3708      	adds	r7, #8
    ceb4:	46bd      	mov	sp, r7
    ceb6:	bd80      	pop	{r7, pc}
    ceb8:	20000ef0 	.word	0x20000ef0
    cebc:	00003ded 	.word	0x00003ded
    cec0:	20000f04 	.word	0x20000f04
    cec4:	20000f00 	.word	0x20000f00

0000cec8 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    cec8:	b480      	push	{r7}
    ceca:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cecc:	4b03      	ldr	r3, [pc, #12]	; (cedc <cdcdf_acm_is_enabled+0x14>)
    cece:	795b      	ldrb	r3, [r3, #5]
}
    ced0:	4618      	mov	r0, r3
    ced2:	46bd      	mov	sp, r7
    ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ced8:	4770      	bx	lr
    ceda:	bf00      	nop
    cedc:	20000ef0 	.word	0x20000ef0

0000cee0 <usb_get_u16>:
{
    cee0:	b480      	push	{r7}
    cee2:	b083      	sub	sp, #12
    cee4:	af00      	add	r7, sp, #0
    cee6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cee8:	687b      	ldr	r3, [r7, #4]
    ceea:	781b      	ldrb	r3, [r3, #0]
    ceec:	b29a      	uxth	r2, r3
    ceee:	687b      	ldr	r3, [r7, #4]
    cef0:	3301      	adds	r3, #1
    cef2:	781b      	ldrb	r3, [r3, #0]
    cef4:	b29b      	uxth	r3, r3
    cef6:	021b      	lsls	r3, r3, #8
    cef8:	b29b      	uxth	r3, r3
    cefa:	4413      	add	r3, r2
    cefc:	b29b      	uxth	r3, r3
}
    cefe:	4618      	mov	r0, r3
    cf00:	370c      	adds	r7, #12
    cf02:	46bd      	mov	sp, r7
    cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf08:	4770      	bx	lr

0000cf0a <usb_desc_len>:
{
    cf0a:	b480      	push	{r7}
    cf0c:	b083      	sub	sp, #12
    cf0e:	af00      	add	r7, sp, #0
    cf10:	6078      	str	r0, [r7, #4]
	return desc[0];
    cf12:	687b      	ldr	r3, [r7, #4]
    cf14:	781b      	ldrb	r3, [r3, #0]
}
    cf16:	4618      	mov	r0, r3
    cf18:	370c      	adds	r7, #12
    cf1a:	46bd      	mov	sp, r7
    cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf20:	4770      	bx	lr
	...

0000cf24 <usb_desc_next>:
{
    cf24:	b580      	push	{r7, lr}
    cf26:	b082      	sub	sp, #8
    cf28:	af00      	add	r7, sp, #0
    cf2a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cf2c:	6878      	ldr	r0, [r7, #4]
    cf2e:	4b05      	ldr	r3, [pc, #20]	; (cf44 <usb_desc_next+0x20>)
    cf30:	4798      	blx	r3
    cf32:	4603      	mov	r3, r0
    cf34:	461a      	mov	r2, r3
    cf36:	687b      	ldr	r3, [r7, #4]
    cf38:	4413      	add	r3, r2
}
    cf3a:	4618      	mov	r0, r3
    cf3c:	3708      	adds	r7, #8
    cf3e:	46bd      	mov	sp, r7
    cf40:	bd80      	pop	{r7, pc}
    cf42:	bf00      	nop
    cf44:	0000cf0b 	.word	0x0000cf0b

0000cf48 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    cf48:	b580      	push	{r7, lr}
    cf4a:	b082      	sub	sp, #8
    cf4c:	af00      	add	r7, sp, #0
    cf4e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cf50:	687b      	ldr	r3, [r7, #4]
    cf52:	3302      	adds	r3, #2
    cf54:	4618      	mov	r0, r3
    cf56:	4b03      	ldr	r3, [pc, #12]	; (cf64 <usb_cfg_desc_total_len+0x1c>)
    cf58:	4798      	blx	r3
    cf5a:	4603      	mov	r3, r0
}
    cf5c:	4618      	mov	r0, r3
    cf5e:	3708      	adds	r7, #8
    cf60:	46bd      	mov	sp, r7
    cf62:	bd80      	pop	{r7, pc}
    cf64:	0000cee1 	.word	0x0000cee1

0000cf68 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    cf68:	b590      	push	{r4, r7, lr}
    cf6a:	b085      	sub	sp, #20
    cf6c:	af00      	add	r7, sp, #0
    cf6e:	4603      	mov	r3, r0
    cf70:	6039      	str	r1, [r7, #0]
    cf72:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    cf74:	2300      	movs	r3, #0
    cf76:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    cf78:	683b      	ldr	r3, [r7, #0]
    cf7a:	799a      	ldrb	r2, [r3, #6]
    cf7c:	79db      	ldrb	r3, [r3, #7]
    cf7e:	021b      	lsls	r3, r3, #8
    cf80:	4313      	orrs	r3, r2
    cf82:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    cf84:	897b      	ldrh	r3, [r7, #10]
    cf86:	2b12      	cmp	r3, #18
    cf88:	d901      	bls.n	cf8e <usbdc_get_dev_desc+0x26>
		length = 0x12;
    cf8a:	2312      	movs	r3, #18
    cf8c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    cf8e:	68fb      	ldr	r3, [r7, #12]
    cf90:	2b00      	cmp	r3, #0
    cf92:	d10a      	bne.n	cfaa <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    cf94:	4b0f      	ldr	r3, [pc, #60]	; (cfd4 <usbdc_get_dev_desc+0x6c>)
    cf96:	681b      	ldr	r3, [r3, #0]
    cf98:	6818      	ldr	r0, [r3, #0]
    cf9a:	4b0e      	ldr	r3, [pc, #56]	; (cfd4 <usbdc_get_dev_desc+0x6c>)
    cf9c:	681b      	ldr	r3, [r3, #0]
    cf9e:	685b      	ldr	r3, [r3, #4]
    cfa0:	2201      	movs	r2, #1
    cfa2:	4619      	mov	r1, r3
    cfa4:	4b0c      	ldr	r3, [pc, #48]	; (cfd8 <usbdc_get_dev_desc+0x70>)
    cfa6:	4798      	blx	r3
    cfa8:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    cfaa:	68fb      	ldr	r3, [r7, #12]
    cfac:	2b00      	cmp	r3, #0
    cfae:	d101      	bne.n	cfb4 <usbdc_get_dev_desc+0x4c>
		return false;
    cfb0:	2300      	movs	r3, #0
    cfb2:	e00b      	b.n	cfcc <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    cfb4:	897a      	ldrh	r2, [r7, #10]
    cfb6:	79f8      	ldrb	r0, [r7, #7]
    cfb8:	2300      	movs	r3, #0
    cfba:	68f9      	ldr	r1, [r7, #12]
    cfbc:	4c07      	ldr	r4, [pc, #28]	; (cfdc <usbdc_get_dev_desc+0x74>)
    cfbe:	47a0      	blx	r4
    cfc0:	4603      	mov	r3, r0
    cfc2:	2b00      	cmp	r3, #0
    cfc4:	d001      	beq.n	cfca <usbdc_get_dev_desc+0x62>
		return false;
    cfc6:	2300      	movs	r3, #0
    cfc8:	e000      	b.n	cfcc <usbdc_get_dev_desc+0x64>
	}
	return true;
    cfca:	2301      	movs	r3, #1
}
    cfcc:	4618      	mov	r0, r3
    cfce:	3714      	adds	r7, #20
    cfd0:	46bd      	mov	sp, r7
    cfd2:	bd90      	pop	{r4, r7, pc}
    cfd4:	20000f08 	.word	0x20000f08
    cfd8:	0000dcdd 	.word	0x0000dcdd
    cfdc:	0000da4d 	.word	0x0000da4d

0000cfe0 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    cfe0:	b590      	push	{r4, r7, lr}
    cfe2:	b087      	sub	sp, #28
    cfe4:	af00      	add	r7, sp, #0
    cfe6:	4603      	mov	r3, r0
    cfe8:	6039      	str	r1, [r7, #0]
    cfea:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    cfec:	2300      	movs	r3, #0
    cfee:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    cff0:	683b      	ldr	r3, [r7, #0]
    cff2:	799a      	ldrb	r2, [r3, #6]
    cff4:	79db      	ldrb	r3, [r3, #7]
    cff6:	021b      	lsls	r3, r3, #8
    cff8:	4313      	orrs	r3, r2
    cffa:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    cffc:	683b      	ldr	r3, [r7, #0]
    cffe:	885b      	ldrh	r3, [r3, #2]
    d000:	b29b      	uxth	r3, r3
    d002:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d004:	8a7a      	ldrh	r2, [r7, #18]
    d006:	4b1e      	ldr	r3, [pc, #120]	; (d080 <usbdc_get_cfg_desc+0xa0>)
    d008:	7f1b      	ldrb	r3, [r3, #28]
    d00a:	3b01      	subs	r3, #1
    d00c:	4013      	ands	r3, r2
    d00e:	2b00      	cmp	r3, #0
    d010:	bf0c      	ite	eq
    d012:	2301      	moveq	r3, #1
    d014:	2300      	movne	r3, #0
    d016:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d018:	697b      	ldr	r3, [r7, #20]
    d01a:	2b00      	cmp	r3, #0
    d01c:	d10c      	bne.n	d038 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    d01e:	4b18      	ldr	r3, [pc, #96]	; (d080 <usbdc_get_cfg_desc+0xa0>)
    d020:	681b      	ldr	r3, [r3, #0]
    d022:	6818      	ldr	r0, [r3, #0]
    d024:	4b16      	ldr	r3, [pc, #88]	; (d080 <usbdc_get_cfg_desc+0xa0>)
    d026:	681b      	ldr	r3, [r3, #0]
    d028:	6859      	ldr	r1, [r3, #4]
    d02a:	7c3b      	ldrb	r3, [r7, #16]
    d02c:	3301      	adds	r3, #1
    d02e:	b2db      	uxtb	r3, r3
    d030:	461a      	mov	r2, r3
    d032:	4b14      	ldr	r3, [pc, #80]	; (d084 <usbdc_get_cfg_desc+0xa4>)
    d034:	4798      	blx	r3
    d036:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    d038:	697b      	ldr	r3, [r7, #20]
    d03a:	2b00      	cmp	r3, #0
    d03c:	d101      	bne.n	d042 <usbdc_get_cfg_desc+0x62>
		return false;
    d03e:	2300      	movs	r3, #0
    d040:	e019      	b.n	d076 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    d042:	6978      	ldr	r0, [r7, #20]
    d044:	4b10      	ldr	r3, [pc, #64]	; (d088 <usbdc_get_cfg_desc+0xa8>)
    d046:	4798      	blx	r3
    d048:	4603      	mov	r3, r0
    d04a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    d04c:	8a7a      	ldrh	r2, [r7, #18]
    d04e:	89fb      	ldrh	r3, [r7, #14]
    d050:	429a      	cmp	r2, r3
    d052:	d802      	bhi.n	d05a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    d054:	2300      	movs	r3, #0
    d056:	747b      	strb	r3, [r7, #17]
    d058:	e001      	b.n	d05e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    d05a:	89fb      	ldrh	r3, [r7, #14]
    d05c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    d05e:	8a7a      	ldrh	r2, [r7, #18]
    d060:	7c7b      	ldrb	r3, [r7, #17]
    d062:	79f8      	ldrb	r0, [r7, #7]
    d064:	6979      	ldr	r1, [r7, #20]
    d066:	4c09      	ldr	r4, [pc, #36]	; (d08c <usbdc_get_cfg_desc+0xac>)
    d068:	47a0      	blx	r4
    d06a:	4603      	mov	r3, r0
    d06c:	2b00      	cmp	r3, #0
    d06e:	d001      	beq.n	d074 <usbdc_get_cfg_desc+0x94>
		return false;
    d070:	2300      	movs	r3, #0
    d072:	e000      	b.n	d076 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    d074:	2301      	movs	r3, #1
}
    d076:	4618      	mov	r0, r3
    d078:	371c      	adds	r7, #28
    d07a:	46bd      	mov	sp, r7
    d07c:	bd90      	pop	{r4, r7, pc}
    d07e:	bf00      	nop
    d080:	20000f08 	.word	0x20000f08
    d084:	0000dd9d 	.word	0x0000dd9d
    d088:	0000cf49 	.word	0x0000cf49
    d08c:	0000da4d 	.word	0x0000da4d

0000d090 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    d090:	b590      	push	{r4, r7, lr}
    d092:	b085      	sub	sp, #20
    d094:	af00      	add	r7, sp, #0
    d096:	4603      	mov	r3, r0
    d098:	6039      	str	r1, [r7, #0]
    d09a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    d09c:	683b      	ldr	r3, [r7, #0]
    d09e:	799a      	ldrb	r2, [r3, #6]
    d0a0:	79db      	ldrb	r3, [r3, #7]
    d0a2:	021b      	lsls	r3, r3, #8
    d0a4:	4313      	orrs	r3, r2
    d0a6:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    d0a8:	683b      	ldr	r3, [r7, #0]
    d0aa:	885b      	ldrh	r3, [r3, #2]
    d0ac:	b29b      	uxth	r3, r3
    d0ae:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    d0b0:	89fa      	ldrh	r2, [r7, #14]
    d0b2:	4b1a      	ldr	r3, [pc, #104]	; (d11c <usbdc_get_str_desc+0x8c>)
    d0b4:	7f1b      	ldrb	r3, [r3, #28]
    d0b6:	3b01      	subs	r3, #1
    d0b8:	4013      	ands	r3, r2
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	bf0c      	ite	eq
    d0be:	2301      	moveq	r3, #1
    d0c0:	2300      	movne	r3, #0
    d0c2:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    d0c4:	4b15      	ldr	r3, [pc, #84]	; (d11c <usbdc_get_str_desc+0x8c>)
    d0c6:	681b      	ldr	r3, [r3, #0]
    d0c8:	6818      	ldr	r0, [r3, #0]
    d0ca:	4b14      	ldr	r3, [pc, #80]	; (d11c <usbdc_get_str_desc+0x8c>)
    d0cc:	681b      	ldr	r3, [r3, #0]
    d0ce:	685b      	ldr	r3, [r3, #4]
    d0d0:	7b3a      	ldrb	r2, [r7, #12]
    d0d2:	4619      	mov	r1, r3
    d0d4:	4b12      	ldr	r3, [pc, #72]	; (d120 <usbdc_get_str_desc+0x90>)
    d0d6:	4798      	blx	r3
    d0d8:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    d0da:	68bb      	ldr	r3, [r7, #8]
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d101      	bne.n	d0e4 <usbdc_get_str_desc+0x54>
		return false;
    d0e0:	2300      	movs	r3, #0
    d0e2:	e017      	b.n	d114 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    d0e4:	68bb      	ldr	r3, [r7, #8]
    d0e6:	781b      	ldrb	r3, [r3, #0]
    d0e8:	b29b      	uxth	r3, r3
    d0ea:	89fa      	ldrh	r2, [r7, #14]
    d0ec:	429a      	cmp	r2, r3
    d0ee:	d802      	bhi.n	d0f6 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    d0f0:	2300      	movs	r3, #0
    d0f2:	737b      	strb	r3, [r7, #13]
    d0f4:	e002      	b.n	d0fc <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    d0f6:	68bb      	ldr	r3, [r7, #8]
    d0f8:	781b      	ldrb	r3, [r3, #0]
    d0fa:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    d0fc:	89fa      	ldrh	r2, [r7, #14]
    d0fe:	7b7b      	ldrb	r3, [r7, #13]
    d100:	79f8      	ldrb	r0, [r7, #7]
    d102:	68b9      	ldr	r1, [r7, #8]
    d104:	4c07      	ldr	r4, [pc, #28]	; (d124 <usbdc_get_str_desc+0x94>)
    d106:	47a0      	blx	r4
    d108:	4603      	mov	r3, r0
    d10a:	2b00      	cmp	r3, #0
    d10c:	d001      	beq.n	d112 <usbdc_get_str_desc+0x82>
		return false;
    d10e:	2300      	movs	r3, #0
    d110:	e000      	b.n	d114 <usbdc_get_str_desc+0x84>
	}
	return true;
    d112:	2301      	movs	r3, #1
}
    d114:	4618      	mov	r0, r3
    d116:	3714      	adds	r7, #20
    d118:	46bd      	mov	sp, r7
    d11a:	bd90      	pop	{r4, r7, pc}
    d11c:	20000f08 	.word	0x20000f08
    d120:	0000de15 	.word	0x0000de15
    d124:	0000da4d 	.word	0x0000da4d

0000d128 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    d128:	b580      	push	{r7, lr}
    d12a:	b084      	sub	sp, #16
    d12c:	af00      	add	r7, sp, #0
    d12e:	4603      	mov	r3, r0
    d130:	6039      	str	r1, [r7, #0]
    d132:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    d134:	683b      	ldr	r3, [r7, #0]
    d136:	885b      	ldrh	r3, [r3, #2]
    d138:	b29b      	uxth	r3, r3
    d13a:	0a1b      	lsrs	r3, r3, #8
    d13c:	b29b      	uxth	r3, r3
    d13e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    d140:	7bfb      	ldrb	r3, [r7, #15]
    d142:	2b02      	cmp	r3, #2
    d144:	d00d      	beq.n	d162 <usbdc_get_desc_req+0x3a>
    d146:	2b03      	cmp	r3, #3
    d148:	d012      	beq.n	d170 <usbdc_get_desc_req+0x48>
    d14a:	2b01      	cmp	r3, #1
    d14c:	d002      	beq.n	d154 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    d14e:	bf00      	nop
	}
	return false;
    d150:	2300      	movs	r3, #0
    d152:	e013      	b.n	d17c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    d154:	79fb      	ldrb	r3, [r7, #7]
    d156:	6839      	ldr	r1, [r7, #0]
    d158:	4618      	mov	r0, r3
    d15a:	4b0a      	ldr	r3, [pc, #40]	; (d184 <usbdc_get_desc_req+0x5c>)
    d15c:	4798      	blx	r3
    d15e:	4603      	mov	r3, r0
    d160:	e00c      	b.n	d17c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    d162:	79fb      	ldrb	r3, [r7, #7]
    d164:	6839      	ldr	r1, [r7, #0]
    d166:	4618      	mov	r0, r3
    d168:	4b07      	ldr	r3, [pc, #28]	; (d188 <usbdc_get_desc_req+0x60>)
    d16a:	4798      	blx	r3
    d16c:	4603      	mov	r3, r0
    d16e:	e005      	b.n	d17c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    d170:	79fb      	ldrb	r3, [r7, #7]
    d172:	6839      	ldr	r1, [r7, #0]
    d174:	4618      	mov	r0, r3
    d176:	4b05      	ldr	r3, [pc, #20]	; (d18c <usbdc_get_desc_req+0x64>)
    d178:	4798      	blx	r3
    d17a:	4603      	mov	r3, r0
}
    d17c:	4618      	mov	r0, r3
    d17e:	3710      	adds	r7, #16
    d180:	46bd      	mov	sp, r7
    d182:	bd80      	pop	{r7, pc}
    d184:	0000cf69 	.word	0x0000cf69
    d188:	0000cfe1 	.word	0x0000cfe1
    d18c:	0000d091 	.word	0x0000d091

0000d190 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    d190:	b590      	push	{r4, r7, lr}
    d192:	b085      	sub	sp, #20
    d194:	af00      	add	r7, sp, #0
    d196:	4603      	mov	r3, r0
    d198:	6039      	str	r1, [r7, #0]
    d19a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d19c:	683b      	ldr	r3, [r7, #0]
    d19e:	781b      	ldrb	r3, [r3, #0]
    d1a0:	f003 031f 	and.w	r3, r3, #31
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	db1b      	blt.n	d1e0 <usbdc_get_status_req+0x50>
    d1a8:	2b01      	cmp	r3, #1
    d1aa:	dd02      	ble.n	d1b2 <usbdc_get_status_req+0x22>
    d1ac:	2b02      	cmp	r3, #2
    d1ae:	d003      	beq.n	d1b8 <usbdc_get_status_req+0x28>
    d1b0:	e016      	b.n	d1e0 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    d1b2:	2300      	movs	r3, #0
    d1b4:	60fb      	str	r3, [r7, #12]
		break;
    d1b6:	e015      	b.n	d1e4 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    d1b8:	683b      	ldr	r3, [r7, #0]
    d1ba:	889b      	ldrh	r3, [r3, #4]
    d1bc:	b29b      	uxth	r3, r3
    d1be:	b2db      	uxtb	r3, r3
    d1c0:	2102      	movs	r1, #2
    d1c2:	4618      	mov	r0, r3
    d1c4:	4b0f      	ldr	r3, [pc, #60]	; (d204 <usbdc_get_status_req+0x74>)
    d1c6:	4798      	blx	r3
    d1c8:	4603      	mov	r3, r0
    d1ca:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    d1cc:	68fb      	ldr	r3, [r7, #12]
    d1ce:	2b00      	cmp	r3, #0
    d1d0:	da01      	bge.n	d1d6 <usbdc_get_status_req+0x46>
			return false;
    d1d2:	2300      	movs	r3, #0
    d1d4:	e012      	b.n	d1fc <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    d1d6:	68fb      	ldr	r3, [r7, #12]
    d1d8:	f003 0301 	and.w	r3, r3, #1
    d1dc:	60fb      	str	r3, [r7, #12]
		break;
    d1de:	e001      	b.n	d1e4 <usbdc_get_status_req+0x54>
	default:
		return false;
    d1e0:	2300      	movs	r3, #0
    d1e2:	e00b      	b.n	d1fc <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    d1e4:	4b08      	ldr	r3, [pc, #32]	; (d208 <usbdc_get_status_req+0x78>)
    d1e6:	695b      	ldr	r3, [r3, #20]
    d1e8:	89ba      	ldrh	r2, [r7, #12]
    d1ea:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    d1ec:	4b06      	ldr	r3, [pc, #24]	; (d208 <usbdc_get_status_req+0x78>)
    d1ee:	6959      	ldr	r1, [r3, #20]
    d1f0:	79f8      	ldrb	r0, [r7, #7]
    d1f2:	2300      	movs	r3, #0
    d1f4:	2202      	movs	r2, #2
    d1f6:	4c05      	ldr	r4, [pc, #20]	; (d20c <usbdc_get_status_req+0x7c>)
    d1f8:	47a0      	blx	r4
	return true;
    d1fa:	2301      	movs	r3, #1
}
    d1fc:	4618      	mov	r0, r3
    d1fe:	3714      	adds	r7, #20
    d200:	46bd      	mov	sp, r7
    d202:	bd90      	pop	{r4, r7, pc}
    d204:	00003d99 	.word	0x00003d99
    d208:	20000f08 	.word	0x20000f08
    d20c:	0000da4d 	.word	0x0000da4d

0000d210 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    d210:	b590      	push	{r4, r7, lr}
    d212:	b085      	sub	sp, #20
    d214:	af00      	add	r7, sp, #0
    d216:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d218:	4b1f      	ldr	r3, [pc, #124]	; (d298 <usbdc_get_interface+0x88>)
    d21a:	691b      	ldr	r3, [r3, #16]
    d21c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    d21e:	4b1e      	ldr	r3, [pc, #120]	; (d298 <usbdc_get_interface+0x88>)
    d220:	7f5b      	ldrb	r3, [r3, #29]
    d222:	461a      	mov	r2, r3
    d224:	687b      	ldr	r3, [r7, #4]
    d226:	889b      	ldrh	r3, [r3, #4]
    d228:	b29b      	uxth	r3, r3
    d22a:	fa42 f303 	asr.w	r3, r2, r3
    d22e:	f003 0301 	and.w	r3, r3, #1
    d232:	2b00      	cmp	r3, #0
    d234:	d128      	bne.n	d288 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    d236:	4b18      	ldr	r3, [pc, #96]	; (d298 <usbdc_get_interface+0x88>)
    d238:	695b      	ldr	r3, [r3, #20]
    d23a:	2200      	movs	r2, #0
    d23c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d23e:	4b16      	ldr	r3, [pc, #88]	; (d298 <usbdc_get_interface+0x88>)
    d240:	6959      	ldr	r1, [r3, #20]
    d242:	2300      	movs	r3, #0
    d244:	2201      	movs	r2, #1
    d246:	2000      	movs	r0, #0
    d248:	4c14      	ldr	r4, [pc, #80]	; (d29c <usbdc_get_interface+0x8c>)
    d24a:	47a0      	blx	r4
		return true;
    d24c:	2301      	movs	r3, #1
    d24e:	e01f      	b.n	d290 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    d250:	68fb      	ldr	r3, [r7, #12]
    d252:	685b      	ldr	r3, [r3, #4]
    d254:	687a      	ldr	r2, [r7, #4]
    d256:	2102      	movs	r1, #2
    d258:	68f8      	ldr	r0, [r7, #12]
    d25a:	4798      	blx	r3
    d25c:	60b8      	str	r0, [r7, #8]
    d25e:	68bb      	ldr	r3, [r7, #8]
    d260:	2b00      	cmp	r3, #0
    d262:	da03      	bge.n	d26c <usbdc_get_interface+0x5c>
			func = func->next;
    d264:	68fb      	ldr	r3, [r7, #12]
    d266:	681b      	ldr	r3, [r3, #0]
    d268:	60fb      	str	r3, [r7, #12]
    d26a:	e00d      	b.n	d288 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    d26c:	4b0a      	ldr	r3, [pc, #40]	; (d298 <usbdc_get_interface+0x88>)
    d26e:	695b      	ldr	r3, [r3, #20]
    d270:	68ba      	ldr	r2, [r7, #8]
    d272:	b2d2      	uxtb	r2, r2
    d274:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    d276:	4b08      	ldr	r3, [pc, #32]	; (d298 <usbdc_get_interface+0x88>)
    d278:	6959      	ldr	r1, [r3, #20]
    d27a:	2300      	movs	r3, #0
    d27c:	2201      	movs	r2, #1
    d27e:	2000      	movs	r0, #0
    d280:	4c06      	ldr	r4, [pc, #24]	; (d29c <usbdc_get_interface+0x8c>)
    d282:	47a0      	blx	r4
			return true;
    d284:	2301      	movs	r3, #1
    d286:	e003      	b.n	d290 <usbdc_get_interface+0x80>
	while (NULL != func) {
    d288:	68fb      	ldr	r3, [r7, #12]
    d28a:	2b00      	cmp	r3, #0
    d28c:	d1e0      	bne.n	d250 <usbdc_get_interface+0x40>
		}
	}
	return false;
    d28e:	2300      	movs	r3, #0
}
    d290:	4618      	mov	r0, r3
    d292:	3714      	adds	r7, #20
    d294:	46bd      	mov	sp, r7
    d296:	bd90      	pop	{r4, r7, pc}
    d298:	20000f08 	.word	0x20000f08
    d29c:	0000da4d 	.word	0x0000da4d

0000d2a0 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    d2a0:	b590      	push	{r4, r7, lr}
    d2a2:	b083      	sub	sp, #12
    d2a4:	af00      	add	r7, sp, #0
    d2a6:	4603      	mov	r3, r0
    d2a8:	6039      	str	r1, [r7, #0]
    d2aa:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d2ac:	683b      	ldr	r3, [r7, #0]
    d2ae:	785b      	ldrb	r3, [r3, #1]
    d2b0:	2b0a      	cmp	r3, #10
    d2b2:	d83a      	bhi.n	d32a <usbdc_get_req+0x8a>
    d2b4:	a201      	add	r2, pc, #4	; (adr r2, d2bc <usbdc_get_req+0x1c>)
    d2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d2ba:	bf00      	nop
    d2bc:	0000d313 	.word	0x0000d313
    d2c0:	0000d32b 	.word	0x0000d32b
    d2c4:	0000d32b 	.word	0x0000d32b
    d2c8:	0000d32b 	.word	0x0000d32b
    d2cc:	0000d32b 	.word	0x0000d32b
    d2d0:	0000d32b 	.word	0x0000d32b
    d2d4:	0000d2e9 	.word	0x0000d2e9
    d2d8:	0000d32b 	.word	0x0000d32b
    d2dc:	0000d2f7 	.word	0x0000d2f7
    d2e0:	0000d32b 	.word	0x0000d32b
    d2e4:	0000d321 	.word	0x0000d321
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    d2e8:	79fb      	ldrb	r3, [r7, #7]
    d2ea:	6839      	ldr	r1, [r7, #0]
    d2ec:	4618      	mov	r0, r3
    d2ee:	4b11      	ldr	r3, [pc, #68]	; (d334 <usbdc_get_req+0x94>)
    d2f0:	4798      	blx	r3
    d2f2:	4603      	mov	r3, r0
    d2f4:	e01a      	b.n	d32c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d2f6:	4b10      	ldr	r3, [pc, #64]	; (d338 <usbdc_get_req+0x98>)
    d2f8:	695b      	ldr	r3, [r3, #20]
    d2fa:	4a0f      	ldr	r2, [pc, #60]	; (d338 <usbdc_get_req+0x98>)
    d2fc:	7ed2      	ldrb	r2, [r2, #27]
    d2fe:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d300:	4b0d      	ldr	r3, [pc, #52]	; (d338 <usbdc_get_req+0x98>)
    d302:	6959      	ldr	r1, [r3, #20]
    d304:	79f8      	ldrb	r0, [r7, #7]
    d306:	2300      	movs	r3, #0
    d308:	2201      	movs	r2, #1
    d30a:	4c0c      	ldr	r4, [pc, #48]	; (d33c <usbdc_get_req+0x9c>)
    d30c:	47a0      	blx	r4
		return true;
    d30e:	2301      	movs	r3, #1
    d310:	e00c      	b.n	d32c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d312:	79fb      	ldrb	r3, [r7, #7]
    d314:	6839      	ldr	r1, [r7, #0]
    d316:	4618      	mov	r0, r3
    d318:	4b09      	ldr	r3, [pc, #36]	; (d340 <usbdc_get_req+0xa0>)
    d31a:	4798      	blx	r3
    d31c:	4603      	mov	r3, r0
    d31e:	e005      	b.n	d32c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d320:	6838      	ldr	r0, [r7, #0]
    d322:	4b08      	ldr	r3, [pc, #32]	; (d344 <usbdc_get_req+0xa4>)
    d324:	4798      	blx	r3
    d326:	4603      	mov	r3, r0
    d328:	e000      	b.n	d32c <usbdc_get_req+0x8c>
	default:
		return false;
    d32a:	2300      	movs	r3, #0
	}
}
    d32c:	4618      	mov	r0, r3
    d32e:	370c      	adds	r7, #12
    d330:	46bd      	mov	sp, r7
    d332:	bd90      	pop	{r4, r7, pc}
    d334:	0000d129 	.word	0x0000d129
    d338:	20000f08 	.word	0x20000f08
    d33c:	0000da4d 	.word	0x0000da4d
    d340:	0000d191 	.word	0x0000d191
    d344:	0000d211 	.word	0x0000d211

0000d348 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d348:	b590      	push	{r4, r7, lr}
    d34a:	b083      	sub	sp, #12
    d34c:	af00      	add	r7, sp, #0
    d34e:	4603      	mov	r3, r0
    d350:	6039      	str	r1, [r7, #0]
    d352:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d354:	683b      	ldr	r3, [r7, #0]
    d356:	781b      	ldrb	r3, [r3, #0]
    d358:	f003 031f 	and.w	r3, r3, #31
    d35c:	2b02      	cmp	r3, #2
    d35e:	d116      	bne.n	d38e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d360:	683b      	ldr	r3, [r7, #0]
    d362:	88db      	ldrh	r3, [r3, #6]
    d364:	b29b      	uxth	r3, r3
    d366:	2b00      	cmp	r3, #0
    d368:	d001      	beq.n	d36e <usbdc_clear_ftr_req+0x26>
			return false;
    d36a:	2300      	movs	r3, #0
    d36c:	e010      	b.n	d390 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d36e:	683b      	ldr	r3, [r7, #0]
    d370:	889b      	ldrh	r3, [r3, #4]
    d372:	b29b      	uxth	r3, r3
    d374:	b2db      	uxtb	r3, r3
    d376:	2100      	movs	r1, #0
    d378:	4618      	mov	r0, r3
    d37a:	4b07      	ldr	r3, [pc, #28]	; (d398 <usbdc_clear_ftr_req+0x50>)
    d37c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d37e:	79f8      	ldrb	r0, [r7, #7]
    d380:	2301      	movs	r3, #1
    d382:	2200      	movs	r2, #0
    d384:	2100      	movs	r1, #0
    d386:	4c05      	ldr	r4, [pc, #20]	; (d39c <usbdc_clear_ftr_req+0x54>)
    d388:	47a0      	blx	r4
		return true;
    d38a:	2301      	movs	r3, #1
    d38c:	e000      	b.n	d390 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d38e:	2300      	movs	r3, #0
	}
}
    d390:	4618      	mov	r0, r3
    d392:	370c      	adds	r7, #12
    d394:	46bd      	mov	sp, r7
    d396:	bd90      	pop	{r4, r7, pc}
    d398:	00003d99 	.word	0x00003d99
    d39c:	0000da4d 	.word	0x0000da4d

0000d3a0 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d3a0:	b590      	push	{r4, r7, lr}
    d3a2:	b083      	sub	sp, #12
    d3a4:	af00      	add	r7, sp, #0
    d3a6:	4603      	mov	r3, r0
    d3a8:	6039      	str	r1, [r7, #0]
    d3aa:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d3ac:	683b      	ldr	r3, [r7, #0]
    d3ae:	781b      	ldrb	r3, [r3, #0]
    d3b0:	f003 031f 	and.w	r3, r3, #31
    d3b4:	2b02      	cmp	r3, #2
    d3b6:	d116      	bne.n	d3e6 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d3b8:	683b      	ldr	r3, [r7, #0]
    d3ba:	88db      	ldrh	r3, [r3, #6]
    d3bc:	b29b      	uxth	r3, r3
    d3be:	2b00      	cmp	r3, #0
    d3c0:	d001      	beq.n	d3c6 <usbdc_set_ftr_req+0x26>
			return false;
    d3c2:	2300      	movs	r3, #0
    d3c4:	e010      	b.n	d3e8 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d3c6:	683b      	ldr	r3, [r7, #0]
    d3c8:	889b      	ldrh	r3, [r3, #4]
    d3ca:	b29b      	uxth	r3, r3
    d3cc:	b2db      	uxtb	r3, r3
    d3ce:	2101      	movs	r1, #1
    d3d0:	4618      	mov	r0, r3
    d3d2:	4b07      	ldr	r3, [pc, #28]	; (d3f0 <usbdc_set_ftr_req+0x50>)
    d3d4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d3d6:	79f8      	ldrb	r0, [r7, #7]
    d3d8:	2301      	movs	r3, #1
    d3da:	2200      	movs	r2, #0
    d3dc:	2100      	movs	r1, #0
    d3de:	4c05      	ldr	r4, [pc, #20]	; (d3f4 <usbdc_set_ftr_req+0x54>)
    d3e0:	47a0      	blx	r4
		return true;
    d3e2:	2301      	movs	r3, #1
    d3e4:	e000      	b.n	d3e8 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d3e6:	2300      	movs	r3, #0
	}
}
    d3e8:	4618      	mov	r0, r3
    d3ea:	370c      	adds	r7, #12
    d3ec:	46bd      	mov	sp, r7
    d3ee:	bd90      	pop	{r4, r7, pc}
    d3f0:	00003d99 	.word	0x00003d99
    d3f4:	0000da4d 	.word	0x0000da4d

0000d3f8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d3f8:	b580      	push	{r7, lr}
    d3fa:	b082      	sub	sp, #8
    d3fc:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d3fe:	4b0a      	ldr	r3, [pc, #40]	; (d428 <usbdc_unconfig+0x30>)
    d400:	691b      	ldr	r3, [r3, #16]
    d402:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d404:	e008      	b.n	d418 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d406:	687b      	ldr	r3, [r7, #4]
    d408:	685b      	ldr	r3, [r3, #4]
    d40a:	2200      	movs	r2, #0
    d40c:	2101      	movs	r1, #1
    d40e:	6878      	ldr	r0, [r7, #4]
    d410:	4798      	blx	r3
		func = func->next;
    d412:	687b      	ldr	r3, [r7, #4]
    d414:	681b      	ldr	r3, [r3, #0]
    d416:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d418:	687b      	ldr	r3, [r7, #4]
    d41a:	2b00      	cmp	r3, #0
    d41c:	d1f3      	bne.n	d406 <usbdc_unconfig+0xe>
	}
}
    d41e:	bf00      	nop
    d420:	3708      	adds	r7, #8
    d422:	46bd      	mov	sp, r7
    d424:	bd80      	pop	{r7, pc}
    d426:	bf00      	nop
    d428:	20000f08 	.word	0x20000f08

0000d42c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d42c:	b580      	push	{r7, lr}
    d42e:	b088      	sub	sp, #32
    d430:	af00      	add	r7, sp, #0
    d432:	4603      	mov	r3, r0
    d434:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d436:	2300      	movs	r3, #0
    d438:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d43a:	23ff      	movs	r3, #255	; 0xff
    d43c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d43e:	79fb      	ldrb	r3, [r7, #7]
    d440:	2b00      	cmp	r3, #0
    d442:	d103      	bne.n	d44c <usbdc_set_config+0x20>
		usbdc_unconfig();
    d444:	4b2e      	ldr	r3, [pc, #184]	; (d500 <usbdc_set_config+0xd4>)
    d446:	4798      	blx	r3
		return true;
    d448:	2301      	movs	r3, #1
    d44a:	e055      	b.n	d4f8 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d44c:	69bb      	ldr	r3, [r7, #24]
    d44e:	2b00      	cmp	r3, #0
    d450:	d10a      	bne.n	d468 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d452:	4b2c      	ldr	r3, [pc, #176]	; (d504 <usbdc_set_config+0xd8>)
    d454:	681b      	ldr	r3, [r3, #0]
    d456:	6818      	ldr	r0, [r3, #0]
    d458:	4b2a      	ldr	r3, [pc, #168]	; (d504 <usbdc_set_config+0xd8>)
    d45a:	681b      	ldr	r3, [r3, #0]
    d45c:	685b      	ldr	r3, [r3, #4]
    d45e:	79fa      	ldrb	r2, [r7, #7]
    d460:	4619      	mov	r1, r3
    d462:	4b29      	ldr	r3, [pc, #164]	; (d508 <usbdc_set_config+0xdc>)
    d464:	4798      	blx	r3
    d466:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d468:	69bb      	ldr	r3, [r7, #24]
    d46a:	2b00      	cmp	r3, #0
    d46c:	d101      	bne.n	d472 <usbdc_set_config+0x46>
		return false;
    d46e:	2300      	movs	r3, #0
    d470:	e042      	b.n	d4f8 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d472:	69b8      	ldr	r0, [r7, #24]
    d474:	4b25      	ldr	r3, [pc, #148]	; (d50c <usbdc_set_config+0xe0>)
    d476:	4798      	blx	r3
    d478:	4603      	mov	r3, r0
    d47a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d47c:	8abb      	ldrh	r3, [r7, #20]
    d47e:	69ba      	ldr	r2, [r7, #24]
    d480:	4413      	add	r3, r2
    d482:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d484:	693b      	ldr	r3, [r7, #16]
    d486:	2204      	movs	r2, #4
    d488:	4619      	mov	r1, r3
    d48a:	69b8      	ldr	r0, [r7, #24]
    d48c:	4b20      	ldr	r3, [pc, #128]	; (d510 <usbdc_set_config+0xe4>)
    d48e:	4798      	blx	r3
    d490:	4603      	mov	r3, r0
    d492:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d494:	e02c      	b.n	d4f0 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d496:	68fb      	ldr	r3, [r7, #12]
    d498:	3302      	adds	r3, #2
    d49a:	781b      	ldrb	r3, [r3, #0]
    d49c:	7dfa      	ldrb	r2, [r7, #23]
    d49e:	429a      	cmp	r2, r3
    d4a0:	d018      	beq.n	d4d4 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d4a2:	68fb      	ldr	r3, [r7, #12]
    d4a4:	789b      	ldrb	r3, [r3, #2]
    d4a6:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d4a8:	4b16      	ldr	r3, [pc, #88]	; (d504 <usbdc_set_config+0xd8>)
    d4aa:	691b      	ldr	r3, [r3, #16]
    d4ac:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d4ae:	e00c      	b.n	d4ca <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d4b0:	69fb      	ldr	r3, [r7, #28]
    d4b2:	685b      	ldr	r3, [r3, #4]
    d4b4:	f107 020c 	add.w	r2, r7, #12
    d4b8:	2100      	movs	r1, #0
    d4ba:	69f8      	ldr	r0, [r7, #28]
    d4bc:	4798      	blx	r3
    d4be:	4603      	mov	r3, r0
    d4c0:	2b00      	cmp	r3, #0
    d4c2:	d006      	beq.n	d4d2 <usbdc_set_config+0xa6>
					func = func->next;
    d4c4:	69fb      	ldr	r3, [r7, #28]
    d4c6:	681b      	ldr	r3, [r3, #0]
    d4c8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d4ca:	69fb      	ldr	r3, [r7, #28]
    d4cc:	2b00      	cmp	r3, #0
    d4ce:	d1ef      	bne.n	d4b0 <usbdc_set_config+0x84>
    d4d0:	e000      	b.n	d4d4 <usbdc_set_config+0xa8>
				} else {
					break;
    d4d2:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d4d4:	68fb      	ldr	r3, [r7, #12]
    d4d6:	4618      	mov	r0, r3
    d4d8:	4b0e      	ldr	r3, [pc, #56]	; (d514 <usbdc_set_config+0xe8>)
    d4da:	4798      	blx	r3
    d4dc:	4603      	mov	r3, r0
    d4de:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d4e0:	68fb      	ldr	r3, [r7, #12]
    d4e2:	6939      	ldr	r1, [r7, #16]
    d4e4:	2204      	movs	r2, #4
    d4e6:	4618      	mov	r0, r3
    d4e8:	4b09      	ldr	r3, [pc, #36]	; (d510 <usbdc_set_config+0xe4>)
    d4ea:	4798      	blx	r3
    d4ec:	4603      	mov	r3, r0
    d4ee:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d4f0:	68fb      	ldr	r3, [r7, #12]
    d4f2:	2b00      	cmp	r3, #0
    d4f4:	d1cf      	bne.n	d496 <usbdc_set_config+0x6a>
	}
	return true;
    d4f6:	2301      	movs	r3, #1
}
    d4f8:	4618      	mov	r0, r3
    d4fa:	3720      	adds	r7, #32
    d4fc:	46bd      	mov	sp, r7
    d4fe:	bd80      	pop	{r7, pc}
    d500:	0000d3f9 	.word	0x0000d3f9
    d504:	20000f08 	.word	0x20000f08
    d508:	0000dd9d 	.word	0x0000dd9d
    d50c:	0000cf49 	.word	0x0000cf49
    d510:	0000dcdd 	.word	0x0000dcdd
    d514:	0000cf25 	.word	0x0000cf25

0000d518 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d518:	b580      	push	{r7, lr}
    d51a:	b082      	sub	sp, #8
    d51c:	af00      	add	r7, sp, #0
    d51e:	4603      	mov	r3, r0
    d520:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d522:	79fb      	ldrb	r3, [r7, #7]
    d524:	4618      	mov	r0, r3
    d526:	4b03      	ldr	r3, [pc, #12]	; (d534 <usbdc_set_address+0x1c>)
    d528:	4798      	blx	r3
}
    d52a:	bf00      	nop
    d52c:	3708      	adds	r7, #8
    d52e:	46bd      	mov	sp, r7
    d530:	bd80      	pop	{r7, pc}
    d532:	bf00      	nop
    d534:	000039b5 	.word	0x000039b5

0000d538 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d538:	b590      	push	{r4, r7, lr}
    d53a:	b087      	sub	sp, #28
    d53c:	af00      	add	r7, sp, #0
    d53e:	4603      	mov	r3, r0
    d540:	460a      	mov	r2, r1
    d542:	80fb      	strh	r3, [r7, #6]
    d544:	4613      	mov	r3, r2
    d546:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d548:	2300      	movs	r3, #0
    d54a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d54c:	693b      	ldr	r3, [r7, #16]
    d54e:	2b00      	cmp	r3, #0
    d550:	d10b      	bne.n	d56a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d552:	4b43      	ldr	r3, [pc, #268]	; (d660 <usbdc_set_interface+0x128>)
    d554:	681b      	ldr	r3, [r3, #0]
    d556:	6818      	ldr	r0, [r3, #0]
    d558:	4b41      	ldr	r3, [pc, #260]	; (d660 <usbdc_set_interface+0x128>)
    d55a:	681b      	ldr	r3, [r3, #0]
    d55c:	6859      	ldr	r1, [r3, #4]
    d55e:	4b40      	ldr	r3, [pc, #256]	; (d660 <usbdc_set_interface+0x128>)
    d560:	7edb      	ldrb	r3, [r3, #27]
    d562:	461a      	mov	r2, r3
    d564:	4b3f      	ldr	r3, [pc, #252]	; (d664 <usbdc_set_interface+0x12c>)
    d566:	4798      	blx	r3
    d568:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d56a:	693b      	ldr	r3, [r7, #16]
    d56c:	2b00      	cmp	r3, #0
    d56e:	d101      	bne.n	d574 <usbdc_set_interface+0x3c>
		return false;
    d570:	2300      	movs	r3, #0
    d572:	e071      	b.n	d658 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d574:	693b      	ldr	r3, [r7, #16]
    d576:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d578:	6938      	ldr	r0, [r7, #16]
    d57a:	4b3b      	ldr	r3, [pc, #236]	; (d668 <usbdc_set_interface+0x130>)
    d57c:	4798      	blx	r3
    d57e:	4603      	mov	r3, r0
    d580:	461a      	mov	r2, r3
    d582:	693b      	ldr	r3, [r7, #16]
    d584:	4413      	add	r3, r2
    d586:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d588:	68bb      	ldr	r3, [r7, #8]
    d58a:	68f9      	ldr	r1, [r7, #12]
    d58c:	2204      	movs	r2, #4
    d58e:	4618      	mov	r0, r3
    d590:	4b36      	ldr	r3, [pc, #216]	; (d66c <usbdc_set_interface+0x134>)
    d592:	4798      	blx	r3
    d594:	6138      	str	r0, [r7, #16]
    d596:	693b      	ldr	r3, [r7, #16]
    d598:	2b00      	cmp	r3, #0
    d59a:	d113      	bne.n	d5c4 <usbdc_set_interface+0x8c>
		return false;
    d59c:	2300      	movs	r3, #0
    d59e:	e05b      	b.n	d658 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d5a0:	68bb      	ldr	r3, [r7, #8]
    d5a2:	4618      	mov	r0, r3
    d5a4:	4b32      	ldr	r3, [pc, #200]	; (d670 <usbdc_set_interface+0x138>)
    d5a6:	4798      	blx	r3
    d5a8:	4603      	mov	r3, r0
    d5aa:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d5ac:	68bb      	ldr	r3, [r7, #8]
    d5ae:	68f9      	ldr	r1, [r7, #12]
    d5b0:	2204      	movs	r2, #4
    d5b2:	4618      	mov	r0, r3
    d5b4:	4b2d      	ldr	r3, [pc, #180]	; (d66c <usbdc_set_interface+0x134>)
    d5b6:	4798      	blx	r3
    d5b8:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d5ba:	693b      	ldr	r3, [r7, #16]
    d5bc:	2b00      	cmp	r3, #0
    d5be:	d101      	bne.n	d5c4 <usbdc_set_interface+0x8c>
			return false;
    d5c0:	2300      	movs	r3, #0
    d5c2:	e049      	b.n	d658 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d5c4:	693b      	ldr	r3, [r7, #16]
    d5c6:	3302      	adds	r3, #2
    d5c8:	781b      	ldrb	r3, [r3, #0]
    d5ca:	b29b      	uxth	r3, r3
    d5cc:	88ba      	ldrh	r2, [r7, #4]
    d5ce:	429a      	cmp	r2, r3
    d5d0:	d1e6      	bne.n	d5a0 <usbdc_set_interface+0x68>
    d5d2:	693b      	ldr	r3, [r7, #16]
    d5d4:	3303      	adds	r3, #3
    d5d6:	781b      	ldrb	r3, [r3, #0]
    d5d8:	b29b      	uxth	r3, r3
    d5da:	88fa      	ldrh	r2, [r7, #6]
    d5dc:	429a      	cmp	r2, r3
    d5de:	d1df      	bne.n	d5a0 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d5e0:	693b      	ldr	r3, [r7, #16]
    d5e2:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d5e4:	4b1e      	ldr	r3, [pc, #120]	; (d660 <usbdc_set_interface+0x128>)
    d5e6:	691b      	ldr	r3, [r3, #16]
    d5e8:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d5ea:	e031      	b.n	d650 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d5ec:	697b      	ldr	r3, [r7, #20]
    d5ee:	685b      	ldr	r3, [r3, #4]
    d5f0:	f107 0208 	add.w	r2, r7, #8
    d5f4:	2101      	movs	r1, #1
    d5f6:	6978      	ldr	r0, [r7, #20]
    d5f8:	4798      	blx	r3
    d5fa:	4603      	mov	r3, r0
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	d003      	beq.n	d608 <usbdc_set_interface+0xd0>
			func = func->next;
    d600:	697b      	ldr	r3, [r7, #20]
    d602:	681b      	ldr	r3, [r3, #0]
    d604:	617b      	str	r3, [r7, #20]
    d606:	e023      	b.n	d650 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d608:	697b      	ldr	r3, [r7, #20]
    d60a:	685b      	ldr	r3, [r3, #4]
    d60c:	f107 0208 	add.w	r2, r7, #8
    d610:	2100      	movs	r1, #0
    d612:	6978      	ldr	r0, [r7, #20]
    d614:	4798      	blx	r3
    d616:	4603      	mov	r3, r0
    d618:	2b00      	cmp	r3, #0
    d61a:	d117      	bne.n	d64c <usbdc_set_interface+0x114>
			if (alt_set) {
    d61c:	88fb      	ldrh	r3, [r7, #6]
    d61e:	2b00      	cmp	r3, #0
    d620:	d00c      	beq.n	d63c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d622:	4b0f      	ldr	r3, [pc, #60]	; (d660 <usbdc_set_interface+0x128>)
    d624:	7f5b      	ldrb	r3, [r3, #29]
    d626:	b25a      	sxtb	r2, r3
    d628:	88bb      	ldrh	r3, [r7, #4]
    d62a:	2101      	movs	r1, #1
    d62c:	fa01 f303 	lsl.w	r3, r1, r3
    d630:	b25b      	sxtb	r3, r3
    d632:	4313      	orrs	r3, r2
    d634:	b25b      	sxtb	r3, r3
    d636:	b2da      	uxtb	r2, r3
    d638:	4b09      	ldr	r3, [pc, #36]	; (d660 <usbdc_set_interface+0x128>)
    d63a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d63c:	2300      	movs	r3, #0
    d63e:	2200      	movs	r2, #0
    d640:	2100      	movs	r1, #0
    d642:	2000      	movs	r0, #0
    d644:	4c0b      	ldr	r4, [pc, #44]	; (d674 <usbdc_set_interface+0x13c>)
    d646:	47a0      	blx	r4
			return true;
    d648:	2301      	movs	r3, #1
    d64a:	e005      	b.n	d658 <usbdc_set_interface+0x120>
		} else {
			return false;
    d64c:	2300      	movs	r3, #0
    d64e:	e003      	b.n	d658 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d650:	697b      	ldr	r3, [r7, #20]
    d652:	2b00      	cmp	r3, #0
    d654:	d1ca      	bne.n	d5ec <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d656:	2300      	movs	r3, #0
}
    d658:	4618      	mov	r0, r3
    d65a:	371c      	adds	r7, #28
    d65c:	46bd      	mov	sp, r7
    d65e:	bd90      	pop	{r4, r7, pc}
    d660:	20000f08 	.word	0x20000f08
    d664:	0000dd9d 	.word	0x0000dd9d
    d668:	0000cf49 	.word	0x0000cf49
    d66c:	0000dcdd 	.word	0x0000dcdd
    d670:	0000cf25 	.word	0x0000cf25
    d674:	0000da4d 	.word	0x0000da4d

0000d678 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d678:	b590      	push	{r4, r7, lr}
    d67a:	b083      	sub	sp, #12
    d67c:	af00      	add	r7, sp, #0
    d67e:	4603      	mov	r3, r0
    d680:	6039      	str	r1, [r7, #0]
    d682:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d684:	683b      	ldr	r3, [r7, #0]
    d686:	785b      	ldrb	r3, [r3, #1]
    d688:	3b01      	subs	r3, #1
    d68a:	2b0a      	cmp	r3, #10
    d68c:	d85b      	bhi.n	d746 <usbdc_set_req+0xce>
    d68e:	a201      	add	r2, pc, #4	; (adr r2, d694 <usbdc_set_req+0x1c>)
    d690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d694:	0000d713 	.word	0x0000d713
    d698:	0000d747 	.word	0x0000d747
    d69c:	0000d721 	.word	0x0000d721
    d6a0:	0000d747 	.word	0x0000d747
    d6a4:	0000d6c1 	.word	0x0000d6c1
    d6a8:	0000d747 	.word	0x0000d747
    d6ac:	0000d747 	.word	0x0000d747
    d6b0:	0000d747 	.word	0x0000d747
    d6b4:	0000d6db 	.word	0x0000d6db
    d6b8:	0000d747 	.word	0x0000d747
    d6bc:	0000d72f 	.word	0x0000d72f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d6c0:	79f8      	ldrb	r0, [r7, #7]
    d6c2:	2301      	movs	r3, #1
    d6c4:	2200      	movs	r2, #0
    d6c6:	2100      	movs	r1, #0
    d6c8:	4c21      	ldr	r4, [pc, #132]	; (d750 <usbdc_set_req+0xd8>)
    d6ca:	47a0      	blx	r4
    d6cc:	4603      	mov	r3, r0
    d6ce:	2b00      	cmp	r3, #0
    d6d0:	bf0c      	ite	eq
    d6d2:	2301      	moveq	r3, #1
    d6d4:	2300      	movne	r3, #0
    d6d6:	b2db      	uxtb	r3, r3
    d6d8:	e036      	b.n	d748 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d6da:	683b      	ldr	r3, [r7, #0]
    d6dc:	885b      	ldrh	r3, [r3, #2]
    d6de:	b29b      	uxth	r3, r3
    d6e0:	b2db      	uxtb	r3, r3
    d6e2:	4618      	mov	r0, r3
    d6e4:	4b1b      	ldr	r3, [pc, #108]	; (d754 <usbdc_set_req+0xdc>)
    d6e6:	4798      	blx	r3
    d6e8:	4603      	mov	r3, r0
    d6ea:	f083 0301 	eor.w	r3, r3, #1
    d6ee:	b2db      	uxtb	r3, r3
    d6f0:	2b00      	cmp	r3, #0
    d6f2:	d001      	beq.n	d6f8 <usbdc_set_req+0x80>
			return false;
    d6f4:	2300      	movs	r3, #0
    d6f6:	e027      	b.n	d748 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d6f8:	79f8      	ldrb	r0, [r7, #7]
    d6fa:	2301      	movs	r3, #1
    d6fc:	2200      	movs	r2, #0
    d6fe:	2100      	movs	r1, #0
    d700:	4c13      	ldr	r4, [pc, #76]	; (d750 <usbdc_set_req+0xd8>)
    d702:	47a0      	blx	r4
    d704:	4603      	mov	r3, r0
    d706:	2b00      	cmp	r3, #0
    d708:	bf0c      	ite	eq
    d70a:	2301      	moveq	r3, #1
    d70c:	2300      	movne	r3, #0
    d70e:	b2db      	uxtb	r3, r3
    d710:	e01a      	b.n	d748 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d712:	79fb      	ldrb	r3, [r7, #7]
    d714:	6839      	ldr	r1, [r7, #0]
    d716:	4618      	mov	r0, r3
    d718:	4b0f      	ldr	r3, [pc, #60]	; (d758 <usbdc_set_req+0xe0>)
    d71a:	4798      	blx	r3
    d71c:	4603      	mov	r3, r0
    d71e:	e013      	b.n	d748 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d720:	79fb      	ldrb	r3, [r7, #7]
    d722:	6839      	ldr	r1, [r7, #0]
    d724:	4618      	mov	r0, r3
    d726:	4b0d      	ldr	r3, [pc, #52]	; (d75c <usbdc_set_req+0xe4>)
    d728:	4798      	blx	r3
    d72a:	4603      	mov	r3, r0
    d72c:	e00c      	b.n	d748 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d72e:	683b      	ldr	r3, [r7, #0]
    d730:	885b      	ldrh	r3, [r3, #2]
    d732:	b29a      	uxth	r2, r3
    d734:	683b      	ldr	r3, [r7, #0]
    d736:	889b      	ldrh	r3, [r3, #4]
    d738:	b29b      	uxth	r3, r3
    d73a:	4619      	mov	r1, r3
    d73c:	4610      	mov	r0, r2
    d73e:	4b08      	ldr	r3, [pc, #32]	; (d760 <usbdc_set_req+0xe8>)
    d740:	4798      	blx	r3
    d742:	4603      	mov	r3, r0
    d744:	e000      	b.n	d748 <usbdc_set_req+0xd0>
	default:
		return false;
    d746:	2300      	movs	r3, #0
	}
}
    d748:	4618      	mov	r0, r3
    d74a:	370c      	adds	r7, #12
    d74c:	46bd      	mov	sp, r7
    d74e:	bd90      	pop	{r4, r7, pc}
    d750:	0000da4d 	.word	0x0000da4d
    d754:	0000d42d 	.word	0x0000d42d
    d758:	0000d349 	.word	0x0000d349
    d75c:	0000d3a1 	.word	0x0000d3a1
    d760:	0000d539 	.word	0x0000d539

0000d764 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d764:	b580      	push	{r7, lr}
    d766:	b082      	sub	sp, #8
    d768:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d76a:	4b0a      	ldr	r3, [pc, #40]	; (d794 <usbdc_sof_notify+0x30>)
    d76c:	685b      	ldr	r3, [r3, #4]
    d76e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d770:	e009      	b.n	d786 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d772:	687b      	ldr	r3, [r7, #4]
    d774:	685b      	ldr	r3, [r3, #4]
    d776:	2b00      	cmp	r3, #0
    d778:	d002      	beq.n	d780 <usbdc_sof_notify+0x1c>
			sof->cb();
    d77a:	687b      	ldr	r3, [r7, #4]
    d77c:	685b      	ldr	r3, [r3, #4]
    d77e:	4798      	blx	r3
		}
		sof = sof->next;
    d780:	687b      	ldr	r3, [r7, #4]
    d782:	681b      	ldr	r3, [r3, #0]
    d784:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d786:	687b      	ldr	r3, [r7, #4]
    d788:	2b00      	cmp	r3, #0
    d78a:	d1f2      	bne.n	d772 <usbdc_sof_notify+0xe>
	}
}
    d78c:	bf00      	nop
    d78e:	3708      	adds	r7, #8
    d790:	46bd      	mov	sp, r7
    d792:	bd80      	pop	{r7, pc}
    d794:	20000f08 	.word	0x20000f08

0000d798 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d798:	b580      	push	{r7, lr}
    d79a:	b084      	sub	sp, #16
    d79c:	af00      	add	r7, sp, #0
    d79e:	4603      	mov	r3, r0
    d7a0:	6039      	str	r1, [r7, #0]
    d7a2:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d7a4:	4b0b      	ldr	r3, [pc, #44]	; (d7d4 <usbdc_change_notify+0x3c>)
    d7a6:	68db      	ldr	r3, [r3, #12]
    d7a8:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d7aa:	e00c      	b.n	d7c6 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d7ac:	68fb      	ldr	r3, [r7, #12]
    d7ae:	685b      	ldr	r3, [r3, #4]
    d7b0:	2b00      	cmp	r3, #0
    d7b2:	d005      	beq.n	d7c0 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d7b4:	68fb      	ldr	r3, [r7, #12]
    d7b6:	685b      	ldr	r3, [r3, #4]
    d7b8:	79fa      	ldrb	r2, [r7, #7]
    d7ba:	6839      	ldr	r1, [r7, #0]
    d7bc:	4610      	mov	r0, r2
    d7be:	4798      	blx	r3
		}
		cg = cg->next;
    d7c0:	68fb      	ldr	r3, [r7, #12]
    d7c2:	681b      	ldr	r3, [r3, #0]
    d7c4:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d7c6:	68fb      	ldr	r3, [r7, #12]
    d7c8:	2b00      	cmp	r3, #0
    d7ca:	d1ef      	bne.n	d7ac <usbdc_change_notify+0x14>
	}
}
    d7cc:	bf00      	nop
    d7ce:	3710      	adds	r7, #16
    d7d0:	46bd      	mov	sp, r7
    d7d2:	bd80      	pop	{r7, pc}
    d7d4:	20000f08 	.word	0x20000f08

0000d7d8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d7d8:	b580      	push	{r7, lr}
    d7da:	b084      	sub	sp, #16
    d7dc:	af00      	add	r7, sp, #0
    d7de:	4603      	mov	r3, r0
    d7e0:	6039      	str	r1, [r7, #0]
    d7e2:	71fb      	strb	r3, [r7, #7]
    d7e4:	4613      	mov	r3, r2
    d7e6:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d7e8:	4b12      	ldr	r3, [pc, #72]	; (d834 <usbdc_request_handler+0x5c>)
    d7ea:	689b      	ldr	r3, [r3, #8]
    d7ec:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d7ee:	e019      	b.n	d824 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d7f0:	68fb      	ldr	r3, [r7, #12]
    d7f2:	685b      	ldr	r3, [r3, #4]
    d7f4:	2b00      	cmp	r3, #0
    d7f6:	d012      	beq.n	d81e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d7f8:	68fb      	ldr	r3, [r7, #12]
    d7fa:	685b      	ldr	r3, [r3, #4]
    d7fc:	79ba      	ldrb	r2, [r7, #6]
    d7fe:	79f8      	ldrb	r0, [r7, #7]
    d800:	6839      	ldr	r1, [r7, #0]
    d802:	4798      	blx	r3
    d804:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d806:	68bb      	ldr	r3, [r7, #8]
    d808:	2b00      	cmp	r3, #0
    d80a:	d101      	bne.n	d810 <usbdc_request_handler+0x38>
				return true;
    d80c:	2301      	movs	r3, #1
    d80e:	e00d      	b.n	d82c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d810:	68bb      	ldr	r3, [r7, #8]
    d812:	f113 0f0a 	cmn.w	r3, #10
    d816:	d002      	beq.n	d81e <usbdc_request_handler+0x46>
				return -1;
    d818:	f04f 33ff 	mov.w	r3, #4294967295
    d81c:	e006      	b.n	d82c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d81e:	68fb      	ldr	r3, [r7, #12]
    d820:	681b      	ldr	r3, [r3, #0]
    d822:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d824:	68fb      	ldr	r3, [r7, #12]
    d826:	2b00      	cmp	r3, #0
    d828:	d1e2      	bne.n	d7f0 <usbdc_request_handler+0x18>
	}
	return false;
    d82a:	2300      	movs	r3, #0
}
    d82c:	4618      	mov	r0, r3
    d82e:	3710      	adds	r7, #16
    d830:	46bd      	mov	sp, r7
    d832:	bd80      	pop	{r7, pc}
    d834:	20000f08 	.word	0x20000f08

0000d838 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d838:	b580      	push	{r7, lr}
    d83a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d83c:	4b01      	ldr	r3, [pc, #4]	; (d844 <usbd_sof_cb+0xc>)
    d83e:	4798      	blx	r3
}
    d840:	bf00      	nop
    d842:	bd80      	pop	{r7, pc}
    d844:	0000d765 	.word	0x0000d765

0000d848 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d848:	b580      	push	{r7, lr}
    d84a:	b082      	sub	sp, #8
    d84c:	af00      	add	r7, sp, #0
    d84e:	4603      	mov	r3, r0
    d850:	6039      	str	r1, [r7, #0]
    d852:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d854:	79fb      	ldrb	r3, [r7, #7]
    d856:	2200      	movs	r2, #0
    d858:	6839      	ldr	r1, [r7, #0]
    d85a:	4618      	mov	r0, r3
    d85c:	4b14      	ldr	r3, [pc, #80]	; (d8b0 <usbdc_cb_ctl_req+0x68>)
    d85e:	4798      	blx	r3
    d860:	4603      	mov	r3, r0
    d862:	f1b3 3fff 	cmp.w	r3, #4294967295
    d866:	d00b      	beq.n	d880 <usbdc_cb_ctl_req+0x38>
    d868:	2b01      	cmp	r3, #1
    d86a:	d007      	beq.n	d87c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d86c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d86e:	683b      	ldr	r3, [r7, #0]
    d870:	781b      	ldrb	r3, [r3, #0]
    d872:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d876:	2b00      	cmp	r3, #0
    d878:	d007      	beq.n	d88a <usbdc_cb_ctl_req+0x42>
    d87a:	e003      	b.n	d884 <usbdc_cb_ctl_req+0x3c>
		return true;
    d87c:	2301      	movs	r3, #1
    d87e:	e013      	b.n	d8a8 <usbdc_cb_ctl_req+0x60>
		return false;
    d880:	2300      	movs	r3, #0
    d882:	e011      	b.n	d8a8 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d884:	2b80      	cmp	r3, #128	; 0x80
    d886:	d007      	beq.n	d898 <usbdc_cb_ctl_req+0x50>
    d888:	e00d      	b.n	d8a6 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d88a:	79fb      	ldrb	r3, [r7, #7]
    d88c:	6839      	ldr	r1, [r7, #0]
    d88e:	4618      	mov	r0, r3
    d890:	4b08      	ldr	r3, [pc, #32]	; (d8b4 <usbdc_cb_ctl_req+0x6c>)
    d892:	4798      	blx	r3
    d894:	4603      	mov	r3, r0
    d896:	e007      	b.n	d8a8 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d898:	79fb      	ldrb	r3, [r7, #7]
    d89a:	6839      	ldr	r1, [r7, #0]
    d89c:	4618      	mov	r0, r3
    d89e:	4b06      	ldr	r3, [pc, #24]	; (d8b8 <usbdc_cb_ctl_req+0x70>)
    d8a0:	4798      	blx	r3
    d8a2:	4603      	mov	r3, r0
    d8a4:	e000      	b.n	d8a8 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d8a6:	2300      	movs	r3, #0
	}
}
    d8a8:	4618      	mov	r0, r3
    d8aa:	3708      	adds	r7, #8
    d8ac:	46bd      	mov	sp, r7
    d8ae:	bd80      	pop	{r7, pc}
    d8b0:	0000d7d9 	.word	0x0000d7d9
    d8b4:	0000d679 	.word	0x0000d679
    d8b8:	0000d2a1 	.word	0x0000d2a1

0000d8bc <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d8bc:	b580      	push	{r7, lr}
    d8be:	b082      	sub	sp, #8
    d8c0:	af00      	add	r7, sp, #0
    d8c2:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d8c4:	687b      	ldr	r3, [r7, #4]
    d8c6:	781b      	ldrb	r3, [r3, #0]
    d8c8:	2b00      	cmp	r3, #0
    d8ca:	d135      	bne.n	d938 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d8cc:	687b      	ldr	r3, [r7, #4]
    d8ce:	785b      	ldrb	r3, [r3, #1]
    d8d0:	2b05      	cmp	r3, #5
    d8d2:	d019      	beq.n	d908 <usbdc_ctrl_status_end+0x4c>
    d8d4:	2b09      	cmp	r3, #9
    d8d6:	d000      	beq.n	d8da <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d8d8:	e02f      	b.n	d93a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d8da:	687b      	ldr	r3, [r7, #4]
    d8dc:	885b      	ldrh	r3, [r3, #2]
    d8de:	b29b      	uxth	r3, r3
    d8e0:	b2da      	uxtb	r2, r3
    d8e2:	4b17      	ldr	r3, [pc, #92]	; (d940 <usbdc_ctrl_status_end+0x84>)
    d8e4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d8e6:	687b      	ldr	r3, [r7, #4]
    d8e8:	885b      	ldrh	r3, [r3, #2]
    d8ea:	b29b      	uxth	r3, r3
    d8ec:	2b00      	cmp	r3, #0
    d8ee:	d001      	beq.n	d8f4 <usbdc_ctrl_status_end+0x38>
    d8f0:	2204      	movs	r2, #4
    d8f2:	e000      	b.n	d8f6 <usbdc_ctrl_status_end+0x3a>
    d8f4:	2203      	movs	r2, #3
    d8f6:	4b12      	ldr	r3, [pc, #72]	; (d940 <usbdc_ctrl_status_end+0x84>)
    d8f8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d8fa:	4b11      	ldr	r3, [pc, #68]	; (d940 <usbdc_ctrl_status_end+0x84>)
    d8fc:	7e9b      	ldrb	r3, [r3, #26]
    d8fe:	4619      	mov	r1, r3
    d900:	2001      	movs	r0, #1
    d902:	4b10      	ldr	r3, [pc, #64]	; (d944 <usbdc_ctrl_status_end+0x88>)
    d904:	4798      	blx	r3
		break;
    d906:	e018      	b.n	d93a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d908:	687b      	ldr	r3, [r7, #4]
    d90a:	885b      	ldrh	r3, [r3, #2]
    d90c:	b29b      	uxth	r3, r3
    d90e:	b2db      	uxtb	r3, r3
    d910:	4618      	mov	r0, r3
    d912:	4b0d      	ldr	r3, [pc, #52]	; (d948 <usbdc_ctrl_status_end+0x8c>)
    d914:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d916:	687b      	ldr	r3, [r7, #4]
    d918:	885b      	ldrh	r3, [r3, #2]
    d91a:	b29b      	uxth	r3, r3
    d91c:	2b00      	cmp	r3, #0
    d91e:	d001      	beq.n	d924 <usbdc_ctrl_status_end+0x68>
    d920:	2203      	movs	r2, #3
    d922:	e000      	b.n	d926 <usbdc_ctrl_status_end+0x6a>
    d924:	2202      	movs	r2, #2
    d926:	4b06      	ldr	r3, [pc, #24]	; (d940 <usbdc_ctrl_status_end+0x84>)
    d928:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d92a:	4b05      	ldr	r3, [pc, #20]	; (d940 <usbdc_ctrl_status_end+0x84>)
    d92c:	7e9b      	ldrb	r3, [r3, #26]
    d92e:	4619      	mov	r1, r3
    d930:	2001      	movs	r0, #1
    d932:	4b04      	ldr	r3, [pc, #16]	; (d944 <usbdc_ctrl_status_end+0x88>)
    d934:	4798      	blx	r3
		break;
    d936:	e000      	b.n	d93a <usbdc_ctrl_status_end+0x7e>
		return;
    d938:	bf00      	nop
	}
}
    d93a:	3708      	adds	r7, #8
    d93c:	46bd      	mov	sp, r7
    d93e:	bd80      	pop	{r7, pc}
    d940:	20000f08 	.word	0x20000f08
    d944:	0000d799 	.word	0x0000d799
    d948:	0000d519 	.word	0x0000d519

0000d94c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d94c:	b580      	push	{r7, lr}
    d94e:	b082      	sub	sp, #8
    d950:	af00      	add	r7, sp, #0
    d952:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d954:	2201      	movs	r2, #1
    d956:	6879      	ldr	r1, [r7, #4]
    d958:	2000      	movs	r0, #0
    d95a:	4b03      	ldr	r3, [pc, #12]	; (d968 <usbdc_ctrl_data_end+0x1c>)
    d95c:	4798      	blx	r3
	return false;
    d95e:	2300      	movs	r3, #0
}
    d960:	4618      	mov	r0, r3
    d962:	3708      	adds	r7, #8
    d964:	46bd      	mov	sp, r7
    d966:	bd80      	pop	{r7, pc}
    d968:	0000d7d9 	.word	0x0000d7d9

0000d96c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d96c:	b580      	push	{r7, lr}
    d96e:	b082      	sub	sp, #8
    d970:	af00      	add	r7, sp, #0
    d972:	4603      	mov	r3, r0
    d974:	603a      	str	r2, [r7, #0]
    d976:	71fb      	strb	r3, [r7, #7]
    d978:	460b      	mov	r3, r1
    d97a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d97c:	79bb      	ldrb	r3, [r7, #6]
    d97e:	2b00      	cmp	r3, #0
    d980:	d002      	beq.n	d988 <usbdc_cb_ctl_done+0x1c>
    d982:	2b01      	cmp	r3, #1
    d984:	d004      	beq.n	d990 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d986:	e008      	b.n	d99a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d988:	6838      	ldr	r0, [r7, #0]
    d98a:	4b06      	ldr	r3, [pc, #24]	; (d9a4 <usbdc_cb_ctl_done+0x38>)
    d98c:	4798      	blx	r3
		break;
    d98e:	e004      	b.n	d99a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d990:	6838      	ldr	r0, [r7, #0]
    d992:	4b05      	ldr	r3, [pc, #20]	; (d9a8 <usbdc_cb_ctl_done+0x3c>)
    d994:	4798      	blx	r3
    d996:	4603      	mov	r3, r0
    d998:	e000      	b.n	d99c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d99a:	2300      	movs	r3, #0
}
    d99c:	4618      	mov	r0, r3
    d99e:	3708      	adds	r7, #8
    d9a0:	46bd      	mov	sp, r7
    d9a2:	bd80      	pop	{r7, pc}
    d9a4:	0000d8bd 	.word	0x0000d8bd
    d9a8:	0000d94d 	.word	0x0000d94d

0000d9ac <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d9ac:	b580      	push	{r7, lr}
    d9ae:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d9b0:	4b10      	ldr	r3, [pc, #64]	; (d9f4 <usbdc_reset+0x48>)
    d9b2:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d9b4:	4b10      	ldr	r3, [pc, #64]	; (d9f8 <usbdc_reset+0x4c>)
    d9b6:	2202      	movs	r2, #2
    d9b8:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d9ba:	4b0f      	ldr	r3, [pc, #60]	; (d9f8 <usbdc_reset+0x4c>)
    d9bc:	2200      	movs	r2, #0
    d9be:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d9c0:	4b0d      	ldr	r3, [pc, #52]	; (d9f8 <usbdc_reset+0x4c>)
    d9c2:	2200      	movs	r2, #0
    d9c4:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d9c6:	2000      	movs	r0, #0
    d9c8:	4b0c      	ldr	r3, [pc, #48]	; (d9fc <usbdc_reset+0x50>)
    d9ca:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d9cc:	4b0a      	ldr	r3, [pc, #40]	; (d9f8 <usbdc_reset+0x4c>)
    d9ce:	7f1b      	ldrb	r3, [r3, #28]
    d9d0:	4618      	mov	r0, r3
    d9d2:	4b0b      	ldr	r3, [pc, #44]	; (da00 <usbdc_reset+0x54>)
    d9d4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d9d6:	4a0b      	ldr	r2, [pc, #44]	; (da04 <usbdc_reset+0x58>)
    d9d8:	2100      	movs	r1, #0
    d9da:	2000      	movs	r0, #0
    d9dc:	4b0a      	ldr	r3, [pc, #40]	; (da08 <usbdc_reset+0x5c>)
    d9de:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d9e0:	4a0a      	ldr	r2, [pc, #40]	; (da0c <usbdc_reset+0x60>)
    d9e2:	2102      	movs	r1, #2
    d9e4:	2000      	movs	r0, #0
    d9e6:	4b08      	ldr	r3, [pc, #32]	; (da08 <usbdc_reset+0x5c>)
    d9e8:	4798      	blx	r3
	usb_d_ep_enable(0);
    d9ea:	2000      	movs	r0, #0
    d9ec:	4b08      	ldr	r3, [pc, #32]	; (da10 <usbdc_reset+0x64>)
    d9ee:	4798      	blx	r3
}
    d9f0:	bf00      	nop
    d9f2:	bd80      	pop	{r7, pc}
    d9f4:	0000d3f9 	.word	0x0000d3f9
    d9f8:	20000f08 	.word	0x20000f08
    d9fc:	00003a99 	.word	0x00003a99
    da00:	000039d5 	.word	0x000039d5
    da04:	0000d849 	.word	0x0000d849
    da08:	00003ded 	.word	0x00003ded
    da0c:	0000d96d 	.word	0x0000d96d
    da10:	00003ae9 	.word	0x00003ae9

0000da14 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    da14:	b580      	push	{r7, lr}
    da16:	b082      	sub	sp, #8
    da18:	af00      	add	r7, sp, #0
    da1a:	4603      	mov	r3, r0
    da1c:	6039      	str	r1, [r7, #0]
    da1e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    da20:	79fb      	ldrb	r3, [r7, #7]
    da22:	2b00      	cmp	r3, #0
    da24:	d002      	beq.n	da2c <usbd_event_cb+0x18>
    da26:	2b01      	cmp	r3, #1
    da28:	d005      	beq.n	da36 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    da2a:	e007      	b.n	da3c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    da2c:	6839      	ldr	r1, [r7, #0]
    da2e:	2000      	movs	r0, #0
    da30:	4b04      	ldr	r3, [pc, #16]	; (da44 <usbd_event_cb+0x30>)
    da32:	4798      	blx	r3
		break;
    da34:	e002      	b.n	da3c <usbd_event_cb+0x28>
		usbdc_reset();
    da36:	4b04      	ldr	r3, [pc, #16]	; (da48 <usbd_event_cb+0x34>)
    da38:	4798      	blx	r3
		break;
    da3a:	bf00      	nop
	}
}
    da3c:	bf00      	nop
    da3e:	3708      	adds	r7, #8
    da40:	46bd      	mov	sp, r7
    da42:	bd80      	pop	{r7, pc}
    da44:	0000d799 	.word	0x0000d799
    da48:	0000d9ad 	.word	0x0000d9ad

0000da4c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    da4c:	b580      	push	{r7, lr}
    da4e:	b088      	sub	sp, #32
    da50:	af00      	add	r7, sp, #0
    da52:	60b9      	str	r1, [r7, #8]
    da54:	607a      	str	r2, [r7, #4]
    da56:	461a      	mov	r2, r3
    da58:	4603      	mov	r3, r0
    da5a:	73fb      	strb	r3, [r7, #15]
    da5c:	4613      	mov	r3, r2
    da5e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    da60:	68bb      	ldr	r3, [r7, #8]
    da62:	617b      	str	r3, [r7, #20]
    da64:	687b      	ldr	r3, [r7, #4]
    da66:	61bb      	str	r3, [r7, #24]
    da68:	7bfb      	ldrb	r3, [r7, #15]
    da6a:	773b      	strb	r3, [r7, #28]
    da6c:	7bbb      	ldrb	r3, [r7, #14]
    da6e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    da70:	f107 0314 	add.w	r3, r7, #20
    da74:	4618      	mov	r0, r3
    da76:	4b03      	ldr	r3, [pc, #12]	; (da84 <usbdc_xfer+0x38>)
    da78:	4798      	blx	r3
    da7a:	4603      	mov	r3, r0
}
    da7c:	4618      	mov	r0, r3
    da7e:	3720      	adds	r7, #32
    da80:	46bd      	mov	sp, r7
    da82:	bd80      	pop	{r7, pc}
    da84:	00003b59 	.word	0x00003b59

0000da88 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    da88:	b580      	push	{r7, lr}
    da8a:	b082      	sub	sp, #8
    da8c:	af00      	add	r7, sp, #0
    da8e:	4603      	mov	r3, r0
    da90:	6039      	str	r1, [r7, #0]
    da92:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    da94:	79fb      	ldrb	r3, [r7, #7]
    da96:	2b01      	cmp	r3, #1
    da98:	d009      	beq.n	daae <usbdc_register_handler+0x26>
    da9a:	2b02      	cmp	r3, #2
    da9c:	d00c      	beq.n	dab8 <usbdc_register_handler+0x30>
    da9e:	2b00      	cmp	r3, #0
    daa0:	d000      	beq.n	daa4 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    daa2:	e00e      	b.n	dac2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    daa4:	6839      	ldr	r1, [r7, #0]
    daa6:	4809      	ldr	r0, [pc, #36]	; (dacc <usbdc_register_handler+0x44>)
    daa8:	4b09      	ldr	r3, [pc, #36]	; (dad0 <usbdc_register_handler+0x48>)
    daaa:	4798      	blx	r3
		break;
    daac:	e009      	b.n	dac2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    daae:	6839      	ldr	r1, [r7, #0]
    dab0:	4808      	ldr	r0, [pc, #32]	; (dad4 <usbdc_register_handler+0x4c>)
    dab2:	4b07      	ldr	r3, [pc, #28]	; (dad0 <usbdc_register_handler+0x48>)
    dab4:	4798      	blx	r3
		break;
    dab6:	e004      	b.n	dac2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    dab8:	6839      	ldr	r1, [r7, #0]
    daba:	4807      	ldr	r0, [pc, #28]	; (dad8 <usbdc_register_handler+0x50>)
    dabc:	4b04      	ldr	r3, [pc, #16]	; (dad0 <usbdc_register_handler+0x48>)
    dabe:	4798      	blx	r3
		break;
    dac0:	bf00      	nop
	}
}
    dac2:	bf00      	nop
    dac4:	3708      	adds	r7, #8
    dac6:	46bd      	mov	sp, r7
    dac8:	bd80      	pop	{r7, pc}
    daca:	bf00      	nop
    dacc:	20000f0c 	.word	0x20000f0c
    dad0:	00003f45 	.word	0x00003f45
    dad4:	20000f10 	.word	0x20000f10
    dad8:	20000f14 	.word	0x20000f14

0000dadc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    dadc:	b580      	push	{r7, lr}
    dade:	b084      	sub	sp, #16
    dae0:	af00      	add	r7, sp, #0
    dae2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    dae4:	687b      	ldr	r3, [r7, #4]
    dae6:	2b00      	cmp	r3, #0
    dae8:	bf14      	ite	ne
    daea:	2301      	movne	r3, #1
    daec:	2300      	moveq	r3, #0
    daee:	b2db      	uxtb	r3, r3
    daf0:	f240 3255 	movw	r2, #853	; 0x355
    daf4:	4910      	ldr	r1, [pc, #64]	; (db38 <usbdc_init+0x5c>)
    daf6:	4618      	mov	r0, r3
    daf8:	4b10      	ldr	r3, [pc, #64]	; (db3c <usbdc_init+0x60>)
    dafa:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    dafc:	4b10      	ldr	r3, [pc, #64]	; (db40 <usbdc_init+0x64>)
    dafe:	4798      	blx	r3
    db00:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    db02:	68fb      	ldr	r3, [r7, #12]
    db04:	2b00      	cmp	r3, #0
    db06:	da01      	bge.n	db0c <usbdc_init+0x30>
		return rc;
    db08:	68fb      	ldr	r3, [r7, #12]
    db0a:	e010      	b.n	db2e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    db0c:	2220      	movs	r2, #32
    db0e:	2100      	movs	r1, #0
    db10:	480c      	ldr	r0, [pc, #48]	; (db44 <usbdc_init+0x68>)
    db12:	4b0d      	ldr	r3, [pc, #52]	; (db48 <usbdc_init+0x6c>)
    db14:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    db16:	4a0b      	ldr	r2, [pc, #44]	; (db44 <usbdc_init+0x68>)
    db18:	687b      	ldr	r3, [r7, #4]
    db1a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    db1c:	490b      	ldr	r1, [pc, #44]	; (db4c <usbdc_init+0x70>)
    db1e:	2000      	movs	r0, #0
    db20:	4b0b      	ldr	r3, [pc, #44]	; (db50 <usbdc_init+0x74>)
    db22:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    db24:	490b      	ldr	r1, [pc, #44]	; (db54 <usbdc_init+0x78>)
    db26:	2001      	movs	r0, #1
    db28:	4b09      	ldr	r3, [pc, #36]	; (db50 <usbdc_init+0x74>)
    db2a:	4798      	blx	r3

	return 0;
    db2c:	2300      	movs	r3, #0
}
    db2e:	4618      	mov	r0, r3
    db30:	3710      	adds	r7, #16
    db32:	46bd      	mov	sp, r7
    db34:	bd80      	pop	{r7, pc}
    db36:	bf00      	nop
    db38:	0001020c 	.word	0x0001020c
    db3c:	00003e69 	.word	0x00003e69
    db40:	000038c1 	.word	0x000038c1
    db44:	20000f08 	.word	0x20000f08
    db48:	0000fc55 	.word	0x0000fc55
    db4c:	0000d839 	.word	0x0000d839
    db50:	0000396d 	.word	0x0000396d
    db54:	0000da15 	.word	0x0000da15

0000db58 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    db58:	b580      	push	{r7, lr}
    db5a:	b082      	sub	sp, #8
    db5c:	af00      	add	r7, sp, #0
    db5e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    db60:	6879      	ldr	r1, [r7, #4]
    db62:	4803      	ldr	r0, [pc, #12]	; (db70 <usbdc_register_function+0x18>)
    db64:	4b03      	ldr	r3, [pc, #12]	; (db74 <usbdc_register_function+0x1c>)
    db66:	4798      	blx	r3
}
    db68:	bf00      	nop
    db6a:	3708      	adds	r7, #8
    db6c:	46bd      	mov	sp, r7
    db6e:	bd80      	pop	{r7, pc}
    db70:	20000f18 	.word	0x20000f18
    db74:	00003f45 	.word	0x00003f45

0000db78 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    db78:	b580      	push	{r7, lr}
    db7a:	b082      	sub	sp, #8
    db7c:	af00      	add	r7, sp, #0
    db7e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    db80:	4b0f      	ldr	r3, [pc, #60]	; (dbc0 <usbdc_start+0x48>)
    db82:	7e9b      	ldrb	r3, [r3, #26]
    db84:	2b00      	cmp	r3, #0
    db86:	d002      	beq.n	db8e <usbdc_start+0x16>
		return ERR_BUSY;
    db88:	f06f 0303 	mvn.w	r3, #3
    db8c:	e013      	b.n	dbb6 <usbdc_start+0x3e>
	}

	if (desces) {
    db8e:	687b      	ldr	r3, [r7, #4]
    db90:	2b00      	cmp	r3, #0
    db92:	d00e      	beq.n	dbb2 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    db94:	4a0a      	ldr	r2, [pc, #40]	; (dbc0 <usbdc_start+0x48>)
    db96:	687b      	ldr	r3, [r7, #4]
    db98:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    db9a:	687b      	ldr	r3, [r7, #4]
    db9c:	681b      	ldr	r3, [r3, #0]
    db9e:	79da      	ldrb	r2, [r3, #7]
    dba0:	4b07      	ldr	r3, [pc, #28]	; (dbc0 <usbdc_start+0x48>)
    dba2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    dba4:	4b06      	ldr	r3, [pc, #24]	; (dbc0 <usbdc_start+0x48>)
    dba6:	2201      	movs	r2, #1
    dba8:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    dbaa:	4b06      	ldr	r3, [pc, #24]	; (dbc4 <usbdc_start+0x4c>)
    dbac:	4798      	blx	r3
	return ERR_NONE;
    dbae:	2300      	movs	r3, #0
    dbb0:	e001      	b.n	dbb6 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    dbb2:	f06f 0308 	mvn.w	r3, #8
}
    dbb6:	4618      	mov	r0, r3
    dbb8:	3708      	adds	r7, #8
    dbba:	46bd      	mov	sp, r7
    dbbc:	bd80      	pop	{r7, pc}
    dbbe:	bf00      	nop
    dbc0:	20000f08 	.word	0x20000f08
    dbc4:	00003991 	.word	0x00003991

0000dbc8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    dbc8:	b580      	push	{r7, lr}
    dbca:	af00      	add	r7, sp, #0
	usb_d_attach();
    dbcc:	4b01      	ldr	r3, [pc, #4]	; (dbd4 <usbdc_attach+0xc>)
    dbce:	4798      	blx	r3
}
    dbd0:	bf00      	nop
    dbd2:	bd80      	pop	{r7, pc}
    dbd4:	000039a5 	.word	0x000039a5

0000dbd8 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    dbd8:	b480      	push	{r7}
    dbda:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    dbdc:	4b03      	ldr	r3, [pc, #12]	; (dbec <usbdc_get_ctrl_buffer+0x14>)
    dbde:	695b      	ldr	r3, [r3, #20]
}
    dbe0:	4618      	mov	r0, r3
    dbe2:	46bd      	mov	sp, r7
    dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
    dbe8:	4770      	bx	lr
    dbea:	bf00      	nop
    dbec:	20000f08 	.word	0x20000f08

0000dbf0 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    dbf0:	b480      	push	{r7}
    dbf2:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    dbf4:	4b07      	ldr	r3, [pc, #28]	; (dc14 <usbdc_get_state+0x24>)
    dbf6:	7e9b      	ldrb	r3, [r3, #26]
    dbf8:	f003 0310 	and.w	r3, r3, #16
    dbfc:	2b00      	cmp	r3, #0
    dbfe:	d001      	beq.n	dc04 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    dc00:	2310      	movs	r3, #16
    dc02:	e001      	b.n	dc08 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    dc04:	4b03      	ldr	r3, [pc, #12]	; (dc14 <usbdc_get_state+0x24>)
    dc06:	7e9b      	ldrb	r3, [r3, #26]
}
    dc08:	4618      	mov	r0, r3
    dc0a:	46bd      	mov	sp, r7
    dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc10:	4770      	bx	lr
    dc12:	bf00      	nop
    dc14:	20000f08 	.word	0x20000f08

0000dc18 <usb_get_u16>:
{
    dc18:	b480      	push	{r7}
    dc1a:	b083      	sub	sp, #12
    dc1c:	af00      	add	r7, sp, #0
    dc1e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    dc20:	687b      	ldr	r3, [r7, #4]
    dc22:	781b      	ldrb	r3, [r3, #0]
    dc24:	b29a      	uxth	r2, r3
    dc26:	687b      	ldr	r3, [r7, #4]
    dc28:	3301      	adds	r3, #1
    dc2a:	781b      	ldrb	r3, [r3, #0]
    dc2c:	b29b      	uxth	r3, r3
    dc2e:	021b      	lsls	r3, r3, #8
    dc30:	b29b      	uxth	r3, r3
    dc32:	4413      	add	r3, r2
    dc34:	b29b      	uxth	r3, r3
}
    dc36:	4618      	mov	r0, r3
    dc38:	370c      	adds	r7, #12
    dc3a:	46bd      	mov	sp, r7
    dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc40:	4770      	bx	lr

0000dc42 <usb_desc_len>:
{
    dc42:	b480      	push	{r7}
    dc44:	b083      	sub	sp, #12
    dc46:	af00      	add	r7, sp, #0
    dc48:	6078      	str	r0, [r7, #4]
	return desc[0];
    dc4a:	687b      	ldr	r3, [r7, #4]
    dc4c:	781b      	ldrb	r3, [r3, #0]
}
    dc4e:	4618      	mov	r0, r3
    dc50:	370c      	adds	r7, #12
    dc52:	46bd      	mov	sp, r7
    dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc58:	4770      	bx	lr

0000dc5a <usb_desc_type>:
{
    dc5a:	b480      	push	{r7}
    dc5c:	b083      	sub	sp, #12
    dc5e:	af00      	add	r7, sp, #0
    dc60:	6078      	str	r0, [r7, #4]
	return desc[1];
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	3301      	adds	r3, #1
    dc66:	781b      	ldrb	r3, [r3, #0]
}
    dc68:	4618      	mov	r0, r3
    dc6a:	370c      	adds	r7, #12
    dc6c:	46bd      	mov	sp, r7
    dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc72:	4770      	bx	lr

0000dc74 <usb_desc_next>:
{
    dc74:	b580      	push	{r7, lr}
    dc76:	b082      	sub	sp, #8
    dc78:	af00      	add	r7, sp, #0
    dc7a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    dc7c:	6878      	ldr	r0, [r7, #4]
    dc7e:	4b05      	ldr	r3, [pc, #20]	; (dc94 <usb_desc_next+0x20>)
    dc80:	4798      	blx	r3
    dc82:	4603      	mov	r3, r0
    dc84:	461a      	mov	r2, r3
    dc86:	687b      	ldr	r3, [r7, #4]
    dc88:	4413      	add	r3, r2
}
    dc8a:	4618      	mov	r0, r3
    dc8c:	3708      	adds	r7, #8
    dc8e:	46bd      	mov	sp, r7
    dc90:	bd80      	pop	{r7, pc}
    dc92:	bf00      	nop
    dc94:	0000dc43 	.word	0x0000dc43

0000dc98 <usb_cfg_desc_total_len>:
{
    dc98:	b580      	push	{r7, lr}
    dc9a:	b082      	sub	sp, #8
    dc9c:	af00      	add	r7, sp, #0
    dc9e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    dca0:	687b      	ldr	r3, [r7, #4]
    dca2:	3302      	adds	r3, #2
    dca4:	4618      	mov	r0, r3
    dca6:	4b03      	ldr	r3, [pc, #12]	; (dcb4 <usb_cfg_desc_total_len+0x1c>)
    dca8:	4798      	blx	r3
    dcaa:	4603      	mov	r3, r0
}
    dcac:	4618      	mov	r0, r3
    dcae:	3708      	adds	r7, #8
    dcb0:	46bd      	mov	sp, r7
    dcb2:	bd80      	pop	{r7, pc}
    dcb4:	0000dc19 	.word	0x0000dc19

0000dcb8 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    dcb8:	b580      	push	{r7, lr}
    dcba:	b082      	sub	sp, #8
    dcbc:	af00      	add	r7, sp, #0
    dcbe:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    dcc0:	6878      	ldr	r0, [r7, #4]
    dcc2:	4b05      	ldr	r3, [pc, #20]	; (dcd8 <usb_cfg_desc_next+0x20>)
    dcc4:	4798      	blx	r3
    dcc6:	4603      	mov	r3, r0
    dcc8:	461a      	mov	r2, r3
    dcca:	687b      	ldr	r3, [r7, #4]
    dccc:	4413      	add	r3, r2
}
    dcce:	4618      	mov	r0, r3
    dcd0:	3708      	adds	r7, #8
    dcd2:	46bd      	mov	sp, r7
    dcd4:	bd80      	pop	{r7, pc}
    dcd6:	bf00      	nop
    dcd8:	0000dc99 	.word	0x0000dc99

0000dcdc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    dcdc:	b580      	push	{r7, lr}
    dcde:	b084      	sub	sp, #16
    dce0:	af00      	add	r7, sp, #0
    dce2:	60f8      	str	r0, [r7, #12]
    dce4:	60b9      	str	r1, [r7, #8]
    dce6:	4613      	mov	r3, r2
    dce8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    dcea:	e015      	b.n	dd18 <usb_find_desc+0x3c>
		_desc_len_check();
    dcec:	68f8      	ldr	r0, [r7, #12]
    dcee:	4b0f      	ldr	r3, [pc, #60]	; (dd2c <usb_find_desc+0x50>)
    dcf0:	4798      	blx	r3
    dcf2:	4603      	mov	r3, r0
    dcf4:	2b01      	cmp	r3, #1
    dcf6:	d801      	bhi.n	dcfc <usb_find_desc+0x20>
    dcf8:	2300      	movs	r3, #0
    dcfa:	e012      	b.n	dd22 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    dcfc:	68f8      	ldr	r0, [r7, #12]
    dcfe:	4b0c      	ldr	r3, [pc, #48]	; (dd30 <usb_find_desc+0x54>)
    dd00:	4798      	blx	r3
    dd02:	4603      	mov	r3, r0
    dd04:	461a      	mov	r2, r3
    dd06:	79fb      	ldrb	r3, [r7, #7]
    dd08:	4293      	cmp	r3, r2
    dd0a:	d101      	bne.n	dd10 <usb_find_desc+0x34>
			return desc;
    dd0c:	68fb      	ldr	r3, [r7, #12]
    dd0e:	e008      	b.n	dd22 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    dd10:	68f8      	ldr	r0, [r7, #12]
    dd12:	4b08      	ldr	r3, [pc, #32]	; (dd34 <usb_find_desc+0x58>)
    dd14:	4798      	blx	r3
    dd16:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    dd18:	68fa      	ldr	r2, [r7, #12]
    dd1a:	68bb      	ldr	r3, [r7, #8]
    dd1c:	429a      	cmp	r2, r3
    dd1e:	d3e5      	bcc.n	dcec <usb_find_desc+0x10>
	}
	return NULL;
    dd20:	2300      	movs	r3, #0
}
    dd22:	4618      	mov	r0, r3
    dd24:	3710      	adds	r7, #16
    dd26:	46bd      	mov	sp, r7
    dd28:	bd80      	pop	{r7, pc}
    dd2a:	bf00      	nop
    dd2c:	0000dc43 	.word	0x0000dc43
    dd30:	0000dc5b 	.word	0x0000dc5b
    dd34:	0000dc75 	.word	0x0000dc75

0000dd38 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    dd38:	b580      	push	{r7, lr}
    dd3a:	b082      	sub	sp, #8
    dd3c:	af00      	add	r7, sp, #0
    dd3e:	6078      	str	r0, [r7, #4]
    dd40:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    dd42:	e019      	b.n	dd78 <usb_find_ep_desc+0x40>
		_desc_len_check();
    dd44:	6878      	ldr	r0, [r7, #4]
    dd46:	4b12      	ldr	r3, [pc, #72]	; (dd90 <usb_find_ep_desc+0x58>)
    dd48:	4798      	blx	r3
    dd4a:	4603      	mov	r3, r0
    dd4c:	2b01      	cmp	r3, #1
    dd4e:	d801      	bhi.n	dd54 <usb_find_ep_desc+0x1c>
    dd50:	2300      	movs	r3, #0
    dd52:	e018      	b.n	dd86 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    dd54:	6878      	ldr	r0, [r7, #4]
    dd56:	4b0f      	ldr	r3, [pc, #60]	; (dd94 <usb_find_ep_desc+0x5c>)
    dd58:	4798      	blx	r3
    dd5a:	4603      	mov	r3, r0
    dd5c:	2b04      	cmp	r3, #4
    dd5e:	d010      	beq.n	dd82 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    dd60:	6878      	ldr	r0, [r7, #4]
    dd62:	4b0c      	ldr	r3, [pc, #48]	; (dd94 <usb_find_ep_desc+0x5c>)
    dd64:	4798      	blx	r3
    dd66:	4603      	mov	r3, r0
    dd68:	2b05      	cmp	r3, #5
    dd6a:	d101      	bne.n	dd70 <usb_find_ep_desc+0x38>
			return desc;
    dd6c:	687b      	ldr	r3, [r7, #4]
    dd6e:	e00a      	b.n	dd86 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    dd70:	6878      	ldr	r0, [r7, #4]
    dd72:	4b09      	ldr	r3, [pc, #36]	; (dd98 <usb_find_ep_desc+0x60>)
    dd74:	4798      	blx	r3
    dd76:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    dd78:	687a      	ldr	r2, [r7, #4]
    dd7a:	683b      	ldr	r3, [r7, #0]
    dd7c:	429a      	cmp	r2, r3
    dd7e:	d3e1      	bcc.n	dd44 <usb_find_ep_desc+0xc>
    dd80:	e000      	b.n	dd84 <usb_find_ep_desc+0x4c>
			break;
    dd82:	bf00      	nop
	}
	return NULL;
    dd84:	2300      	movs	r3, #0
}
    dd86:	4618      	mov	r0, r3
    dd88:	3708      	adds	r7, #8
    dd8a:	46bd      	mov	sp, r7
    dd8c:	bd80      	pop	{r7, pc}
    dd8e:	bf00      	nop
    dd90:	0000dc43 	.word	0x0000dc43
    dd94:	0000dc5b 	.word	0x0000dc5b
    dd98:	0000dc75 	.word	0x0000dc75

0000dd9c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    dd9c:	b580      	push	{r7, lr}
    dd9e:	b084      	sub	sp, #16
    dda0:	af00      	add	r7, sp, #0
    dda2:	60f8      	str	r0, [r7, #12]
    dda4:	60b9      	str	r1, [r7, #8]
    dda6:	4613      	mov	r3, r2
    dda8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ddaa:	2202      	movs	r2, #2
    ddac:	68b9      	ldr	r1, [r7, #8]
    ddae:	68f8      	ldr	r0, [r7, #12]
    ddb0:	4b15      	ldr	r3, [pc, #84]	; (de08 <usb_find_cfg_desc+0x6c>)
    ddb2:	4798      	blx	r3
    ddb4:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    ddb6:	68fb      	ldr	r3, [r7, #12]
    ddb8:	2b00      	cmp	r3, #0
    ddba:	d11a      	bne.n	ddf2 <usb_find_cfg_desc+0x56>
		return NULL;
    ddbc:	2300      	movs	r3, #0
    ddbe:	e01f      	b.n	de00 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    ddc0:	68f8      	ldr	r0, [r7, #12]
    ddc2:	4b12      	ldr	r3, [pc, #72]	; (de0c <usb_find_cfg_desc+0x70>)
    ddc4:	4798      	blx	r3
    ddc6:	4603      	mov	r3, r0
    ddc8:	2b01      	cmp	r3, #1
    ddca:	d801      	bhi.n	ddd0 <usb_find_cfg_desc+0x34>
    ddcc:	2300      	movs	r3, #0
    ddce:	e017      	b.n	de00 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    ddd0:	68fb      	ldr	r3, [r7, #12]
    ddd2:	3301      	adds	r3, #1
    ddd4:	781b      	ldrb	r3, [r3, #0]
    ddd6:	2b02      	cmp	r3, #2
    ddd8:	d110      	bne.n	ddfc <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    ddda:	68fb      	ldr	r3, [r7, #12]
    dddc:	3305      	adds	r3, #5
    ddde:	781b      	ldrb	r3, [r3, #0]
    dde0:	79fa      	ldrb	r2, [r7, #7]
    dde2:	429a      	cmp	r2, r3
    dde4:	d101      	bne.n	ddea <usb_find_cfg_desc+0x4e>
			return desc;
    dde6:	68fb      	ldr	r3, [r7, #12]
    dde8:	e00a      	b.n	de00 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    ddea:	68f8      	ldr	r0, [r7, #12]
    ddec:	4b08      	ldr	r3, [pc, #32]	; (de10 <usb_find_cfg_desc+0x74>)
    ddee:	4798      	blx	r3
    ddf0:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ddf2:	68fa      	ldr	r2, [r7, #12]
    ddf4:	68bb      	ldr	r3, [r7, #8]
    ddf6:	429a      	cmp	r2, r3
    ddf8:	d3e2      	bcc.n	ddc0 <usb_find_cfg_desc+0x24>
    ddfa:	e000      	b.n	ddfe <usb_find_cfg_desc+0x62>
			break;
    ddfc:	bf00      	nop
	}
	return NULL;
    ddfe:	2300      	movs	r3, #0
}
    de00:	4618      	mov	r0, r3
    de02:	3710      	adds	r7, #16
    de04:	46bd      	mov	sp, r7
    de06:	bd80      	pop	{r7, pc}
    de08:	0000dcdd 	.word	0x0000dcdd
    de0c:	0000dc43 	.word	0x0000dc43
    de10:	0000dcb9 	.word	0x0000dcb9

0000de14 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    de14:	b580      	push	{r7, lr}
    de16:	b086      	sub	sp, #24
    de18:	af00      	add	r7, sp, #0
    de1a:	60f8      	str	r0, [r7, #12]
    de1c:	60b9      	str	r1, [r7, #8]
    de1e:	4613      	mov	r3, r2
    de20:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    de22:	2300      	movs	r3, #0
    de24:	75fb      	strb	r3, [r7, #23]
    de26:	e020      	b.n	de6a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    de28:	2203      	movs	r2, #3
    de2a:	68b9      	ldr	r1, [r7, #8]
    de2c:	68f8      	ldr	r0, [r7, #12]
    de2e:	4b13      	ldr	r3, [pc, #76]	; (de7c <usb_find_str_desc+0x68>)
    de30:	4798      	blx	r3
    de32:	60f8      	str	r0, [r7, #12]
		if (desc) {
    de34:	68fb      	ldr	r3, [r7, #12]
    de36:	2b00      	cmp	r3, #0
    de38:	d015      	beq.n	de66 <usb_find_str_desc+0x52>
			_desc_len_check();
    de3a:	68f8      	ldr	r0, [r7, #12]
    de3c:	4b10      	ldr	r3, [pc, #64]	; (de80 <usb_find_str_desc+0x6c>)
    de3e:	4798      	blx	r3
    de40:	4603      	mov	r3, r0
    de42:	2b01      	cmp	r3, #1
    de44:	d801      	bhi.n	de4a <usb_find_str_desc+0x36>
    de46:	2300      	movs	r3, #0
    de48:	e014      	b.n	de74 <usb_find_str_desc+0x60>
			if (i == str_index) {
    de4a:	7dfa      	ldrb	r2, [r7, #23]
    de4c:	79fb      	ldrb	r3, [r7, #7]
    de4e:	429a      	cmp	r2, r3
    de50:	d101      	bne.n	de56 <usb_find_str_desc+0x42>
				return desc;
    de52:	68fb      	ldr	r3, [r7, #12]
    de54:	e00e      	b.n	de74 <usb_find_str_desc+0x60>
			}
			i++;
    de56:	7dfb      	ldrb	r3, [r7, #23]
    de58:	3301      	adds	r3, #1
    de5a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    de5c:	68f8      	ldr	r0, [r7, #12]
    de5e:	4b09      	ldr	r3, [pc, #36]	; (de84 <usb_find_str_desc+0x70>)
    de60:	4798      	blx	r3
    de62:	60f8      	str	r0, [r7, #12]
    de64:	e001      	b.n	de6a <usb_find_str_desc+0x56>
		} else {
			return NULL;
    de66:	2300      	movs	r3, #0
    de68:	e004      	b.n	de74 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    de6a:	68fa      	ldr	r2, [r7, #12]
    de6c:	68bb      	ldr	r3, [r7, #8]
    de6e:	429a      	cmp	r2, r3
    de70:	d3da      	bcc.n	de28 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    de72:	2300      	movs	r3, #0
}
    de74:	4618      	mov	r0, r3
    de76:	3718      	adds	r7, #24
    de78:	46bd      	mov	sp, r7
    de7a:	bd80      	pop	{r7, pc}
    de7c:	0000dcdd 	.word	0x0000dcdd
    de80:	0000dc43 	.word	0x0000dc43
    de84:	0000dc75 	.word	0x0000dc75

0000de88 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    de88:	b480      	push	{r7}
    de8a:	b083      	sub	sp, #12
    de8c:	af00      	add	r7, sp, #0
    de8e:	6078      	str	r0, [r7, #4]
    de90:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    de92:	687b      	ldr	r3, [r7, #4]
    de94:	683a      	ldr	r2, [r7, #0]
    de96:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    de98:	687b      	ldr	r3, [r7, #4]
    de9a:	4618      	mov	r0, r3
    de9c:	370c      	adds	r7, #12
    de9e:	46bd      	mov	sp, r7
    dea0:	bc80      	pop	{r7}
    dea2:	4770      	bx	lr

0000dea4 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    dea4:	b480      	push	{r7}
    dea6:	b083      	sub	sp, #12
    dea8:	af00      	add	r7, sp, #0
    deaa:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    deac:	687b      	ldr	r3, [r7, #4]
    deae:	4618      	mov	r0, r3
    deb0:	370c      	adds	r7, #12
    deb2:	46bd      	mov	sp, r7
    deb4:	bc80      	pop	{r7}
    deb6:	4770      	bx	lr

0000deb8 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    deb8:	b580      	push	{r7, lr}
    deba:	b084      	sub	sp, #16
    debc:	af00      	add	r7, sp, #0
    debe:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    dec0:	687b      	ldr	r3, [r7, #4]
    dec2:	4a14      	ldr	r2, [pc, #80]	; (df14 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    dec4:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    dec6:	687b      	ldr	r3, [r7, #4]
    dec8:	4a12      	ldr	r2, [pc, #72]	; (df14 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    deca:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    decc:	687b      	ldr	r3, [r7, #4]
    dece:	691a      	ldr	r2, [r3, #16]
    ded0:	687b      	ldr	r3, [r7, #4]
    ded2:	330c      	adds	r3, #12
    ded4:	4619      	mov	r1, r3
    ded6:	4610      	mov	r0, r2
    ded8:	4b0f      	ldr	r3, [pc, #60]	; (df18 <_ZN14I2C_Sync_Class4InitEv+0x60>)
    deda:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    dedc:	687b      	ldr	r3, [r7, #4]
    dede:	691b      	ldr	r3, [r3, #16]
    dee0:	4618      	mov	r0, r3
    dee2:	4b0e      	ldr	r3, [pc, #56]	; (df1c <_ZN14I2C_Sync_Class4InitEv+0x64>)
    dee4:	4798      	blx	r3
    dee6:	4603      	mov	r3, r0
    dee8:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    deea:	7bfb      	ldrb	r3, [r7, #15]
    deec:	2b00      	cmp	r3, #0
    deee:	bf0c      	ite	eq
    def0:	2301      	moveq	r3, #1
    def2:	2300      	movne	r3, #0
    def4:	b2da      	uxtb	r2, r3
    def6:	687b      	ldr	r3, [r7, #4]
    def8:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
    defa:	687b      	ldr	r3, [r7, #4]
    defc:	7a5b      	ldrb	r3, [r3, #9]
    defe:	b2da      	uxtb	r2, r3
    df00:	687b      	ldr	r3, [r7, #4]
    df02:	721a      	strb	r2, [r3, #8]
	return isOK;
    df04:	687b      	ldr	r3, [r7, #4]
    df06:	7a5b      	ldrb	r3, [r3, #9]
    df08:	b2db      	uxtb	r3, r3
	
}
    df0a:	4618      	mov	r0, r3
    df0c:	3710      	adds	r7, #16
    df0e:	46bd      	mov	sp, r7
    df10:	bd80      	pop	{r7, pc}
    df12:	bf00      	nop
    df14:	20000f28 	.word	0x20000f28
    df18:	00002ba3 	.word	0x00002ba3
    df1c:	00002b49 	.word	0x00002b49

0000df20 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    df20:	b580      	push	{r7, lr}
    df22:	b082      	sub	sp, #8
    df24:	af00      	add	r7, sp, #0
    df26:	6078      	str	r0, [r7, #4]
    df28:	460b      	mov	r3, r1
    df2a:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    df2c:	687b      	ldr	r3, [r7, #4]
    df2e:	691b      	ldr	r3, [r3, #16]
    df30:	78fa      	ldrb	r2, [r7, #3]
    df32:	b211      	sxth	r1, r2
    df34:	f44f 6200 	mov.w	r2, #2048	; 0x800
    df38:	4618      	mov	r0, r3
    df3a:	4b03      	ldr	r3, [pc, #12]	; (df48 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    df3c:	4798      	blx	r3
    df3e:	4603      	mov	r3, r0
}
    df40:	4618      	mov	r0, r3
    df42:	3708      	adds	r7, #8
    df44:	46bd      	mov	sp, r7
    df46:	bd80      	pop	{r7, pc}
    df48:	00002b69 	.word	0x00002b69

0000df4c <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    df4c:	b580      	push	{r7, lr}
    df4e:	b086      	sub	sp, #24
    df50:	af00      	add	r7, sp, #0
    df52:	60f8      	str	r0, [r7, #12]
    df54:	60b9      	str	r1, [r7, #8]
    df56:	4613      	mov	r3, r2
    df58:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    df5a:	68fb      	ldr	r3, [r7, #12]
    df5c:	68db      	ldr	r3, [r3, #12]
    df5e:	88fa      	ldrh	r2, [r7, #6]
    df60:	68b9      	ldr	r1, [r7, #8]
    df62:	4618      	mov	r0, r3
    df64:	4b03      	ldr	r3, [pc, #12]	; (df74 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    df66:	4798      	blx	r3
    df68:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    df6a:	697b      	ldr	r3, [r7, #20]
}
    df6c:	4618      	mov	r0, r3
    df6e:	3718      	adds	r7, #24
    df70:	46bd      	mov	sp, r7
    df72:	bd80      	pop	{r7, pc}
    df74:	0000f9fd 	.word	0x0000f9fd

0000df78 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    df78:	b580      	push	{r7, lr}
    df7a:	b086      	sub	sp, #24
    df7c:	af00      	add	r7, sp, #0
    df7e:	60f8      	str	r0, [r7, #12]
    df80:	60b9      	str	r1, [r7, #8]
    df82:	4613      	mov	r3, r2
    df84:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    df86:	68fb      	ldr	r3, [r7, #12]
    df88:	68db      	ldr	r3, [r3, #12]
    df8a:	88fa      	ldrh	r2, [r7, #6]
    df8c:	68b9      	ldr	r1, [r7, #8]
    df8e:	4618      	mov	r0, r3
    df90:	4b03      	ldr	r3, [pc, #12]	; (dfa0 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    df92:	4798      	blx	r3
    df94:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    df96:	697b      	ldr	r3, [r7, #20]
}
    df98:	4618      	mov	r0, r3
    df9a:	3718      	adds	r7, #24
    df9c:	46bd      	mov	sp, r7
    df9e:	bd80      	pop	{r7, pc}
    dfa0:	0000fa4d 	.word	0x0000fa4d

0000dfa4 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    dfa4:	b480      	push	{r7}
    dfa6:	b083      	sub	sp, #12
    dfa8:	af00      	add	r7, sp, #0
    dfaa:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    dfac:	687b      	ldr	r3, [r7, #4]
    dfae:	4618      	mov	r0, r3
    dfb0:	370c      	adds	r7, #12
    dfb2:	46bd      	mov	sp, r7
    dfb4:	bc80      	pop	{r7}
    dfb6:	4770      	bx	lr

0000dfb8 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    dfb8:	b480      	push	{r7}
    dfba:	b083      	sub	sp, #12
    dfbc:	af00      	add	r7, sp, #0
    dfbe:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    dfc0:	687b      	ldr	r3, [r7, #4]
    dfc2:	4618      	mov	r0, r3
    dfc4:	370c      	adds	r7, #12
    dfc6:	46bd      	mov	sp, r7
    dfc8:	bc80      	pop	{r7}
    dfca:	4770      	bx	lr

0000dfcc <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
	//i2cClass=i2c;
	isOK=i2cClass->isOK;
	return isOK;
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    dfcc:	b480      	push	{r7}
    dfce:	b085      	sub	sp, #20
    dfd0:	af00      	add	r7, sp, #0
    dfd2:	60f8      	str	r0, [r7, #12]
    dfd4:	460b      	mov	r3, r1
    dfd6:	607a      	str	r2, [r7, #4]
    dfd8:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    dfda:	687b      	ldr	r3, [r7, #4]
    dfdc:	681a      	ldr	r2, [r3, #0]
    dfde:	68fb      	ldr	r3, [r7, #12]
    dfe0:	615a      	str	r2, [r3, #20]
	rxBuffer=i2c->rxBuffer;
    dfe2:	687b      	ldr	r3, [r7, #4]
    dfe4:	685a      	ldr	r2, [r3, #4]
    dfe6:	68fb      	ldr	r3, [r7, #12]
    dfe8:	619a      	str	r2, [r3, #24]
	i2cAddress=addr;
    dfea:	68fb      	ldr	r3, [r7, #12]
    dfec:	7afa      	ldrb	r2, [r7, #11]
    dfee:	731a      	strb	r2, [r3, #12]
	i2cClass=i2c;
    dff0:	68fb      	ldr	r3, [r7, #12]
    dff2:	687a      	ldr	r2, [r7, #4]
    dff4:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
    dff6:	68fb      	ldr	r3, [r7, #12]
    dff8:	691b      	ldr	r3, [r3, #16]
    dffa:	7a5b      	ldrb	r3, [r3, #9]
    dffc:	b2da      	uxtb	r2, r3
    dffe:	68fb      	ldr	r3, [r7, #12]
    e000:	729a      	strb	r2, [r3, #10]
	return isOK;
    e002:	68fb      	ldr	r3, [r7, #12]
    e004:	7a9b      	ldrb	r3, [r3, #10]
    e006:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    e008:	4618      	mov	r0, r3
    e00a:	3714      	adds	r7, #20
    e00c:	46bd      	mov	sp, r7
    e00e:	bc80      	pop	{r7}
    e010:	4770      	bx	lr

0000e012 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    e012:	b480      	push	{r7}
    e014:	b083      	sub	sp, #12
    e016:	af00      	add	r7, sp, #0
    e018:	6078      	str	r0, [r7, #4]
    e01a:	460b      	mov	r3, r1
    e01c:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    e01e:	78fb      	ldrb	r3, [r7, #3]
    e020:	f003 0307 	and.w	r3, r3, #7
    e024:	b2db      	uxtb	r3, r3
}
    e026:	4618      	mov	r0, r3
    e028:	370c      	adds	r7, #12
    e02a:	46bd      	mov	sp, r7
    e02c:	bc80      	pop	{r7}
    e02e:	4770      	bx	lr

0000e030 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    e030:	b480      	push	{r7}
    e032:	b083      	sub	sp, #12
    e034:	af00      	add	r7, sp, #0
    e036:	6078      	str	r0, [r7, #4]
    e038:	4608      	mov	r0, r1
    e03a:	4611      	mov	r1, r2
    e03c:	461a      	mov	r2, r3
    e03e:	4603      	mov	r3, r0
    e040:	70fb      	strb	r3, [r7, #3]
    e042:	460b      	mov	r3, r1
    e044:	70bb      	strb	r3, [r7, #2]
    e046:	4613      	mov	r3, r2
    e048:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    e04a:	78fb      	ldrb	r3, [r7, #3]
    e04c:	2b07      	cmp	r3, #7
    e04e:	dc01      	bgt.n	e054 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    e050:	78bb      	ldrb	r3, [r7, #2]
    e052:	e000      	b.n	e056 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    e054:	787b      	ldrb	r3, [r7, #1]
}
    e056:	4618      	mov	r0, r3
    e058:	370c      	adds	r7, #12
    e05a:	46bd      	mov	sp, r7
    e05c:	bc80      	pop	{r7}
    e05e:	4770      	bx	lr

0000e060 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    e060:	b580      	push	{r7, lr}
    e062:	b082      	sub	sp, #8
    e064:	af00      	add	r7, sp, #0
    e066:	6078      	str	r0, [r7, #4]
    e068:	460b      	mov	r3, r1
    e06a:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    e06c:	687b      	ldr	r3, [r7, #4]
    e06e:	691a      	ldr	r2, [r3, #16]
    e070:	687b      	ldr	r3, [r7, #4]
    e072:	7b1b      	ldrb	r3, [r3, #12]
    e074:	4619      	mov	r1, r3
    e076:	4610      	mov	r0, r2
    e078:	4b0b      	ldr	r3, [pc, #44]	; (e0a8 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    e07a:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    e07c:	687b      	ldr	r3, [r7, #4]
    e07e:	691b      	ldr	r3, [r3, #16]
    e080:	1cf9      	adds	r1, r7, #3
    e082:	2201      	movs	r2, #1
    e084:	4618      	mov	r0, r3
    e086:	4b09      	ldr	r3, [pc, #36]	; (e0ac <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    e088:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    e08a:	687b      	ldr	r3, [r7, #4]
    e08c:	6918      	ldr	r0, [r3, #16]
    e08e:	687b      	ldr	r3, [r7, #4]
    e090:	3304      	adds	r3, #4
    e092:	2201      	movs	r2, #1
    e094:	4619      	mov	r1, r3
    e096:	4b06      	ldr	r3, [pc, #24]	; (e0b0 <_ZN14MCP23008_Class12readRegisterEh+0x50>)
    e098:	4798      	blx	r3

	return registerValue;
    e09a:	687b      	ldr	r3, [r7, #4]
    e09c:	791b      	ldrb	r3, [r3, #4]
}
    e09e:	4618      	mov	r0, r3
    e0a0:	3708      	adds	r7, #8
    e0a2:	46bd      	mov	sp, r7
    e0a4:	bd80      	pop	{r7, pc}
    e0a6:	bf00      	nop
    e0a8:	0000df21 	.word	0x0000df21
    e0ac:	0000df4d 	.word	0x0000df4d
    e0b0:	0000df79 	.word	0x0000df79

0000e0b4 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    e0b4:	b580      	push	{r7, lr}
    e0b6:	b082      	sub	sp, #8
    e0b8:	af00      	add	r7, sp, #0
    e0ba:	6078      	str	r0, [r7, #4]
	i2cClass->SetSlaveAddress(i2cAddress);
    e0bc:	687b      	ldr	r3, [r7, #4]
    e0be:	691a      	ldr	r2, [r3, #16]
    e0c0:	687b      	ldr	r3, [r7, #4]
    e0c2:	7b1b      	ldrb	r3, [r3, #12]
    e0c4:	4619      	mov	r1, r3
    e0c6:	4610      	mov	r0, r2
    e0c8:	4b05      	ldr	r3, [pc, #20]	; (e0e0 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x2c>)
    e0ca:	4798      	blx	r3
	return readRegister(MCP23008_GPIOA);
    e0cc:	2109      	movs	r1, #9
    e0ce:	6878      	ldr	r0, [r7, #4]
    e0d0:	4b04      	ldr	r3, [pc, #16]	; (e0e4 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    e0d2:	4798      	blx	r3
    e0d4:	4603      	mov	r3, r0
}
    e0d6:	4618      	mov	r0, r3
    e0d8:	3708      	adds	r7, #8
    e0da:	46bd      	mov	sp, r7
    e0dc:	bd80      	pop	{r7, pc}
    e0de:	bf00      	nop
    e0e0:	0000df21 	.word	0x0000df21
    e0e4:	0000e061 	.word	0x0000e061

0000e0e8 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    e0e8:	b580      	push	{r7, lr}
    e0ea:	b084      	sub	sp, #16
    e0ec:	af00      	add	r7, sp, #0
    e0ee:	6078      	str	r0, [r7, #4]
    e0f0:	460b      	mov	r3, r1
    e0f2:	70fb      	strb	r3, [r7, #3]
    e0f4:	4613      	mov	r3, r2
    e0f6:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    e0f8:	687b      	ldr	r3, [r7, #4]
    e0fa:	691a      	ldr	r2, [r3, #16]
    e0fc:	687b      	ldr	r3, [r7, #4]
    e0fe:	7b1b      	ldrb	r3, [r3, #12]
    e100:	4619      	mov	r1, r3
    e102:	4610      	mov	r0, r2
    e104:	4b09      	ldr	r3, [pc, #36]	; (e12c <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    e106:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    e108:	78fb      	ldrb	r3, [r7, #3]
    e10a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    e10c:	78bb      	ldrb	r3, [r7, #2]
    e10e:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    e110:	687b      	ldr	r3, [r7, #4]
    e112:	691b      	ldr	r3, [r3, #16]
    e114:	f107 010c 	add.w	r1, r7, #12
    e118:	2202      	movs	r2, #2
    e11a:	4618      	mov	r0, r3
    e11c:	4b04      	ldr	r3, [pc, #16]	; (e130 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    e11e:	4798      	blx	r3
    e120:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    e122:	4618      	mov	r0, r3
    e124:	3710      	adds	r7, #16
    e126:	46bd      	mov	sp, r7
    e128:	bd80      	pop	{r7, pc}
    e12a:	bf00      	nop
    e12c:	0000df21 	.word	0x0000df21
    e130:	0000df4d 	.word	0x0000df4d

0000e134 <_ZN14MCP23008_Class12SetPortInputEv>:
	writeRegister(MCP23008_GPIOA,v);
	return v;
}


void	MCP23008_Class::SetPortInput(void){
    e134:	b580      	push	{r7, lr}
    e136:	b084      	sub	sp, #16
    e138:	af00      	add	r7, sp, #0
    e13a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e13c:	2300      	movs	r3, #0
    e13e:	73fb      	strb	r3, [r7, #15]
    e140:	7bfb      	ldrb	r3, [r7, #15]
    e142:	2b07      	cmp	r3, #7
    e144:	dc0f      	bgt.n	e166 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    e146:	7bfb      	ldrb	r3, [r7, #15]
    e148:	2201      	movs	r2, #1
    e14a:	4619      	mov	r1, r3
    e14c:	6878      	ldr	r0, [r7, #4]
    e14e:	4b08      	ldr	r3, [pc, #32]	; (e170 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    e150:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    e152:	7bfb      	ldrb	r3, [r7, #15]
    e154:	2201      	movs	r2, #1
    e156:	4619      	mov	r1, r3
    e158:	6878      	ldr	r0, [r7, #4]
    e15a:	4b06      	ldr	r3, [pc, #24]	; (e174 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    e15c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e15e:	7bfb      	ldrb	r3, [r7, #15]
    e160:	3301      	adds	r3, #1
    e162:	73fb      	strb	r3, [r7, #15]
    e164:	e7ec      	b.n	e140 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    e166:	bf00      	nop
    e168:	3710      	adds	r7, #16
    e16a:	46bd      	mov	sp, r7
    e16c:	bd80      	pop	{r7, pc}
    e16e:	bf00      	nop
    e170:	0000e239 	.word	0x0000e239
    e174:	0000e31d 	.word	0x0000e31d

0000e178 <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
    e178:	b580      	push	{r7, lr}
    e17a:	b084      	sub	sp, #16
    e17c:	af00      	add	r7, sp, #0
    e17e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    e180:	2300      	movs	r3, #0
    e182:	73fb      	strb	r3, [r7, #15]
    e184:	7bfb      	ldrb	r3, [r7, #15]
    e186:	2b07      	cmp	r3, #7
    e188:	dc09      	bgt.n	e19e <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    e18a:	7bfb      	ldrb	r3, [r7, #15]
    e18c:	2200      	movs	r2, #0
    e18e:	4619      	mov	r1, r3
    e190:	6878      	ldr	r0, [r7, #4]
    e192:	4b05      	ldr	r3, [pc, #20]	; (e1a8 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    e194:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    e196:	7bfb      	ldrb	r3, [r7, #15]
    e198:	3301      	adds	r3, #1
    e19a:	73fb      	strb	r3, [r7, #15]
    e19c:	e7f2      	b.n	e184 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    e19e:	bf00      	nop
    e1a0:	3710      	adds	r7, #16
    e1a2:	46bd      	mov	sp, r7
    e1a4:	bd80      	pop	{r7, pc}
    e1a6:	bf00      	nop
    e1a8:	0000e239 	.word	0x0000e239

0000e1ac <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    e1ac:	b580      	push	{r7, lr}
    e1ae:	b084      	sub	sp, #16
    e1b0:	af00      	add	r7, sp, #0
    e1b2:	6078      	str	r0, [r7, #4]
    e1b4:	4608      	mov	r0, r1
    e1b6:	4611      	mov	r1, r2
    e1b8:	461a      	mov	r2, r3
    e1ba:	4603      	mov	r3, r0
    e1bc:	70fb      	strb	r3, [r7, #3]
    e1be:	460b      	mov	r3, r1
    e1c0:	70bb      	strb	r3, [r7, #2]
    e1c2:	4613      	mov	r3, r2
    e1c4:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    e1c6:	787b      	ldrb	r3, [r7, #1]
    e1c8:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    e1ca:	78fb      	ldrb	r3, [r7, #3]
    e1cc:	4619      	mov	r1, r3
    e1ce:	6878      	ldr	r0, [r7, #4]
    e1d0:	4b16      	ldr	r3, [pc, #88]	; (e22c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    e1d2:	4798      	blx	r3
    e1d4:	4603      	mov	r3, r0
    e1d6:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    e1d8:	7bfb      	ldrb	r3, [r7, #15]
    e1da:	4619      	mov	r1, r3
    e1dc:	6878      	ldr	r0, [r7, #4]
    e1de:	4b14      	ldr	r3, [pc, #80]	; (e230 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    e1e0:	4798      	blx	r3
    e1e2:	4603      	mov	r3, r0
    e1e4:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    e1e6:	78bb      	ldrb	r3, [r7, #2]
    e1e8:	2b00      	cmp	r3, #0
    e1ea:	d009      	beq.n	e200 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    e1ec:	7bba      	ldrb	r2, [r7, #14]
    e1ee:	7b7b      	ldrb	r3, [r7, #13]
    e1f0:	4619      	mov	r1, r3
    e1f2:	2301      	movs	r3, #1
    e1f4:	408b      	lsls	r3, r1
    e1f6:	b2db      	uxtb	r3, r3
    e1f8:	4313      	orrs	r3, r2
    e1fa:	b2db      	uxtb	r3, r3
    e1fc:	73bb      	strb	r3, [r7, #14]
    e1fe:	e00a      	b.n	e216 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    e200:	7bba      	ldrb	r2, [r7, #14]
    e202:	7b7b      	ldrb	r3, [r7, #13]
    e204:	4619      	mov	r1, r3
    e206:	2301      	movs	r3, #1
    e208:	408b      	lsls	r3, r1
    e20a:	b2db      	uxtb	r3, r3
    e20c:	43db      	mvns	r3, r3
    e20e:	b2db      	uxtb	r3, r3
    e210:	4013      	ands	r3, r2
    e212:	b2db      	uxtb	r3, r3
    e214:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    e216:	7bba      	ldrb	r2, [r7, #14]
    e218:	7bfb      	ldrb	r3, [r7, #15]
    e21a:	4619      	mov	r1, r3
    e21c:	6878      	ldr	r0, [r7, #4]
    e21e:	4b05      	ldr	r3, [pc, #20]	; (e234 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    e220:	4798      	blx	r3
}
    e222:	bf00      	nop
    e224:	3710      	adds	r7, #16
    e226:	46bd      	mov	sp, r7
    e228:	bd80      	pop	{r7, pc}
    e22a:	bf00      	nop
    e22c:	0000e013 	.word	0x0000e013
    e230:	0000e061 	.word	0x0000e061
    e234:	0000e0e9 	.word	0x0000e0e9

0000e238 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    e238:	b590      	push	{r4, r7, lr}
    e23a:	b085      	sub	sp, #20
    e23c:	af02      	add	r7, sp, #8
    e23e:	6078      	str	r0, [r7, #4]
    e240:	460b      	mov	r3, r1
    e242:	70fb      	strb	r3, [r7, #3]
    e244:	4613      	mov	r3, r2
    e246:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    e248:	78bb      	ldrb	r3, [r7, #2]
    e24a:	2b01      	cmp	r3, #1
    e24c:	bf0c      	ite	eq
    e24e:	2301      	moveq	r3, #1
    e250:	2300      	movne	r3, #0
    e252:	b2db      	uxtb	r3, r3
    e254:	461a      	mov	r2, r3
    e256:	78f9      	ldrb	r1, [r7, #3]
    e258:	2300      	movs	r3, #0
    e25a:	9300      	str	r3, [sp, #0]
    e25c:	2300      	movs	r3, #0
    e25e:	6878      	ldr	r0, [r7, #4]
    e260:	4c02      	ldr	r4, [pc, #8]	; (e26c <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    e262:	47a0      	blx	r4
}
    e264:	bf00      	nop
    e266:	370c      	adds	r7, #12
    e268:	46bd      	mov	sp, r7
    e26a:	bd90      	pop	{r4, r7, pc}
    e26c:	0000e1ad 	.word	0x0000e1ad

0000e270 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    e270:	b590      	push	{r4, r7, lr}
    e272:	b085      	sub	sp, #20
    e274:	af00      	add	r7, sp, #0
    e276:	6078      	str	r0, [r7, #4]
    e278:	460b      	mov	r3, r1
    e27a:	70fb      	strb	r3, [r7, #3]
    e27c:	4613      	mov	r3, r2
    e27e:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    e280:	78fb      	ldrb	r3, [r7, #3]
    e282:	4619      	mov	r1, r3
    e284:	6878      	ldr	r0, [r7, #4]
    e286:	4b21      	ldr	r3, [pc, #132]	; (e30c <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    e288:	4798      	blx	r3
    e28a:	4603      	mov	r3, r0
    e28c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    e28e:	78f9      	ldrb	r1, [r7, #3]
    e290:	230a      	movs	r3, #10
    e292:	220a      	movs	r2, #10
    e294:	6878      	ldr	r0, [r7, #4]
    e296:	4c1e      	ldr	r4, [pc, #120]	; (e310 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    e298:	47a0      	blx	r4
    e29a:	4603      	mov	r3, r0
    e29c:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    e29e:	7bfb      	ldrb	r3, [r7, #15]
    e2a0:	4619      	mov	r1, r3
    e2a2:	6878      	ldr	r0, [r7, #4]
    e2a4:	4b1b      	ldr	r3, [pc, #108]	; (e314 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    e2a6:	4798      	blx	r3
    e2a8:	4603      	mov	r3, r0
    e2aa:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    e2ac:	78bb      	ldrb	r3, [r7, #2]
    e2ae:	2b00      	cmp	r3, #0
    e2b0:	d009      	beq.n	e2c6 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    e2b2:	7bba      	ldrb	r2, [r7, #14]
    e2b4:	7b7b      	ldrb	r3, [r7, #13]
    e2b6:	4619      	mov	r1, r3
    e2b8:	2301      	movs	r3, #1
    e2ba:	408b      	lsls	r3, r1
    e2bc:	b2db      	uxtb	r3, r3
    e2be:	4313      	orrs	r3, r2
    e2c0:	b2db      	uxtb	r3, r3
    e2c2:	73bb      	strb	r3, [r7, #14]
    e2c4:	e00a      	b.n	e2dc <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    e2c6:	7bba      	ldrb	r2, [r7, #14]
    e2c8:	7b7b      	ldrb	r3, [r7, #13]
    e2ca:	4619      	mov	r1, r3
    e2cc:	2301      	movs	r3, #1
    e2ce:	408b      	lsls	r3, r1
    e2d0:	b2db      	uxtb	r3, r3
    e2d2:	43db      	mvns	r3, r3
    e2d4:	b2db      	uxtb	r3, r3
    e2d6:	4013      	ands	r3, r2
    e2d8:	b2db      	uxtb	r3, r3
    e2da:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    e2dc:	78f9      	ldrb	r1, [r7, #3]
    e2de:	2309      	movs	r3, #9
    e2e0:	2209      	movs	r2, #9
    e2e2:	6878      	ldr	r0, [r7, #4]
    e2e4:	4c0a      	ldr	r4, [pc, #40]	; (e310 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    e2e6:	47a0      	blx	r4
    e2e8:	4603      	mov	r3, r0
    e2ea:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    e2ec:	7bba      	ldrb	r2, [r7, #14]
    e2ee:	7bfb      	ldrb	r3, [r7, #15]
    e2f0:	4619      	mov	r1, r3
    e2f2:	6878      	ldr	r0, [r7, #4]
    e2f4:	4b08      	ldr	r3, [pc, #32]	; (e318 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    e2f6:	4798      	blx	r3
    e2f8:	4603      	mov	r3, r0
    e2fa:	2b00      	cmp	r3, #0
    e2fc:	bf0c      	ite	eq
    e2fe:	2301      	moveq	r3, #1
    e300:	2300      	movne	r3, #0
    e302:	b2db      	uxtb	r3, r3
}
    e304:	4618      	mov	r0, r3
    e306:	3714      	adds	r7, #20
    e308:	46bd      	mov	sp, r7
    e30a:	bd90      	pop	{r4, r7, pc}
    e30c:	0000e013 	.word	0x0000e013
    e310:	0000e031 	.word	0x0000e031
    e314:	0000e061 	.word	0x0000e061
    e318:	0000e0e9 	.word	0x0000e0e9

0000e31c <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    e31c:	b590      	push	{r4, r7, lr}
    e31e:	b085      	sub	sp, #20
    e320:	af02      	add	r7, sp, #8
    e322:	6078      	str	r0, [r7, #4]
    e324:	460b      	mov	r3, r1
    e326:	70fb      	strb	r3, [r7, #3]
    e328:	4613      	mov	r3, r2
    e32a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    e32c:	78ba      	ldrb	r2, [r7, #2]
    e32e:	78f9      	ldrb	r1, [r7, #3]
    e330:	2306      	movs	r3, #6
    e332:	9300      	str	r3, [sp, #0]
    e334:	2306      	movs	r3, #6
    e336:	6878      	ldr	r0, [r7, #4]
    e338:	4c02      	ldr	r4, [pc, #8]	; (e344 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    e33a:	47a0      	blx	r4
}
    e33c:	bf00      	nop
    e33e:	370c      	adds	r7, #12
    e340:	46bd      	mov	sp, r7
    e342:	bd90      	pop	{r4, r7, pc}
    e344:	0000e1ad 	.word	0x0000e1ad

0000e348 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e348:	b480      	push	{r7}
    e34a:	b085      	sub	sp, #20
    e34c:	af00      	add	r7, sp, #0
    e34e:	60f8      	str	r0, [r7, #12]
    e350:	460b      	mov	r3, r1
    e352:	607a      	str	r2, [r7, #4]
    e354:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e356:	7afb      	ldrb	r3, [r7, #11]
    e358:	68fa      	ldr	r2, [r7, #12]
    e35a:	01db      	lsls	r3, r3, #7
    e35c:	4413      	add	r3, r2
    e35e:	3318      	adds	r3, #24
    e360:	687a      	ldr	r2, [r7, #4]
    e362:	601a      	str	r2, [r3, #0]
}
    e364:	bf00      	nop
    e366:	3714      	adds	r7, #20
    e368:	46bd      	mov	sp, r7
    e36a:	bc80      	pop	{r7}
    e36c:	4770      	bx	lr

0000e36e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e36e:	b480      	push	{r7}
    e370:	b085      	sub	sp, #20
    e372:	af00      	add	r7, sp, #0
    e374:	60f8      	str	r0, [r7, #12]
    e376:	460b      	mov	r3, r1
    e378:	607a      	str	r2, [r7, #4]
    e37a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e37c:	7afb      	ldrb	r3, [r7, #11]
    e37e:	68fa      	ldr	r2, [r7, #12]
    e380:	01db      	lsls	r3, r3, #7
    e382:	4413      	add	r3, r2
    e384:	3314      	adds	r3, #20
    e386:	687a      	ldr	r2, [r7, #4]
    e388:	601a      	str	r2, [r3, #0]
}
    e38a:	bf00      	nop
    e38c:	3714      	adds	r7, #20
    e38e:	46bd      	mov	sp, r7
    e390:	bc80      	pop	{r7}
    e392:	4770      	bx	lr

0000e394 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    e394:	b580      	push	{r7, lr}
    e396:	b082      	sub	sp, #8
    e398:	af00      	add	r7, sp, #0
    e39a:	4603      	mov	r3, r0
    e39c:	6039      	str	r1, [r7, #0]
    e39e:	71fb      	strb	r3, [r7, #7]
    e3a0:	4613      	mov	r3, r2
    e3a2:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e3a4:	79bb      	ldrb	r3, [r7, #6]
    e3a6:	2b00      	cmp	r3, #0
    e3a8:	d006      	beq.n	e3b8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e3aa:	79fb      	ldrb	r3, [r7, #7]
    e3ac:	683a      	ldr	r2, [r7, #0]
    e3ae:	4619      	mov	r1, r3
    e3b0:	4806      	ldr	r0, [pc, #24]	; (e3cc <_gpio_set_level+0x38>)
    e3b2:	4b07      	ldr	r3, [pc, #28]	; (e3d0 <_gpio_set_level+0x3c>)
    e3b4:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    e3b6:	e005      	b.n	e3c4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e3b8:	79fb      	ldrb	r3, [r7, #7]
    e3ba:	683a      	ldr	r2, [r7, #0]
    e3bc:	4619      	mov	r1, r3
    e3be:	4803      	ldr	r0, [pc, #12]	; (e3cc <_gpio_set_level+0x38>)
    e3c0:	4b04      	ldr	r3, [pc, #16]	; (e3d4 <_gpio_set_level+0x40>)
    e3c2:	4798      	blx	r3
}
    e3c4:	bf00      	nop
    e3c6:	3708      	adds	r7, #8
    e3c8:	46bd      	mov	sp, r7
    e3ca:	bd80      	pop	{r7, pc}
    e3cc:	41008000 	.word	0x41008000
    e3d0:	0000e349 	.word	0x0000e349
    e3d4:	0000e36f 	.word	0x0000e36f

0000e3d8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    e3d8:	b580      	push	{r7, lr}
    e3da:	b082      	sub	sp, #8
    e3dc:	af00      	add	r7, sp, #0
    e3de:	4603      	mov	r3, r0
    e3e0:	460a      	mov	r2, r1
    e3e2:	71fb      	strb	r3, [r7, #7]
    e3e4:	4613      	mov	r3, r2
    e3e6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e3e8:	79fb      	ldrb	r3, [r7, #7]
    e3ea:	115b      	asrs	r3, r3, #5
    e3ec:	b2d8      	uxtb	r0, r3
    e3ee:	79fb      	ldrb	r3, [r7, #7]
    e3f0:	f003 031f 	and.w	r3, r3, #31
    e3f4:	2201      	movs	r2, #1
    e3f6:	fa02 f303 	lsl.w	r3, r2, r3
    e3fa:	79ba      	ldrb	r2, [r7, #6]
    e3fc:	4619      	mov	r1, r3
    e3fe:	4b03      	ldr	r3, [pc, #12]	; (e40c <gpio_set_pin_level+0x34>)
    e400:	4798      	blx	r3
}
    e402:	bf00      	nop
    e404:	3708      	adds	r7, #8
    e406:	46bd      	mov	sp, r7
    e408:	bd80      	pop	{r7, pc}
    e40a:	bf00      	nop
    e40c:	0000e395 	.word	0x0000e395

0000e410 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    e410:	b580      	push	{r7, lr}
    e412:	b082      	sub	sp, #8
    e414:	af00      	add	r7, sp, #0
    e416:	6078      	str	r0, [r7, #4]
    e418:	6039      	str	r1, [r7, #0]
    e41a:	687b      	ldr	r3, [r7, #4]
    e41c:	3318      	adds	r3, #24
    e41e:	4618      	mov	r0, r3
    e420:	4b08      	ldr	r3, [pc, #32]	; (e444 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    e422:	4798      	blx	r3
{
	appParameters=defaultParameters;
    e424:	687b      	ldr	r3, [r7, #4]
    e426:	4a08      	ldr	r2, [pc, #32]	; (e448 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    e428:	7812      	ldrb	r2, [r2, #0]
    e42a:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    e42c:	687b      	ldr	r3, [r7, #4]
    e42e:	683a      	ldr	r2, [r7, #0]
    e430:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    e432:	4b06      	ldr	r3, [pc, #24]	; (e44c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    e434:	681a      	ldr	r2, [r3, #0]
    e436:	687b      	ldr	r3, [r7, #4]
    e438:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    e43a:	687b      	ldr	r3, [r7, #4]
    e43c:	4618      	mov	r0, r3
    e43e:	3708      	adds	r7, #8
    e440:	46bd      	mov	sp, r7
    e442:	bd80      	pop	{r7, pc}
    e444:	0000f8e5 	.word	0x0000f8e5
    e448:	00010224 	.word	0x00010224
    e44c:	20000fa8 	.word	0x20000fa8

0000e450 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    e450:	b580      	push	{r7, lr}
    e452:	b082      	sub	sp, #8
    e454:	af00      	add	r7, sp, #0
    e456:	6078      	str	r0, [r7, #4]
    e458:	687b      	ldr	r3, [r7, #4]
    e45a:	3318      	adds	r3, #24
    e45c:	4618      	mov	r0, r3
    e45e:	4b03      	ldr	r3, [pc, #12]	; (e46c <_ZN16FlashMemoryClassD1Ev+0x1c>)
    e460:	4798      	blx	r3
{
} //~FlashMemoryClass
    e462:	687b      	ldr	r3, [r7, #4]
    e464:	4618      	mov	r0, r3
    e466:	3708      	adds	r7, #8
    e468:	46bd      	mov	sp, r7
    e46a:	bd80      	pop	{r7, pc}
    e46c:	0000f905 	.word	0x0000f905

0000e470 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
    e470:	b580      	push	{r7, lr}
    e472:	b082      	sub	sp, #8
    e474:	af00      	add	r7, sp, #0
    e476:	6078      	str	r0, [r7, #4]
	garbage=spi.Enable();
    e478:	687b      	ldr	r3, [r7, #4]
    e47a:	3318      	adds	r3, #24
    e47c:	4618      	mov	r0, r3
    e47e:	4b05      	ldr	r3, [pc, #20]	; (e494 <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
    e480:	4798      	blx	r3
    e482:	4603      	mov	r3, r0
    e484:	461a      	mov	r2, r3
    e486:	687b      	ldr	r3, [r7, #4]
    e488:	609a      	str	r2, [r3, #8]
	
	
}
    e48a:	bf00      	nop
    e48c:	3708      	adds	r7, #8
    e48e:	46bd      	mov	sp, r7
    e490:	bd80      	pop	{r7, pc}
    e492:	bf00      	nop
    e494:	0000f919 	.word	0x0000f919

0000e498 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	spi.Read((uint8_t *)dest, (uint16_t)size);
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
    e498:	b580      	push	{r7, lr}
    e49a:	b082      	sub	sp, #8
    e49c:	af00      	add	r7, sp, #0
    e49e:	6078      	str	r0, [r7, #4]
	garbage=0;
    e4a0:	687b      	ldr	r3, [r7, #4]
    e4a2:	2200      	movs	r2, #0
    e4a4:	609a      	str	r2, [r3, #8]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
    e4a6:	2100      	movs	r1, #0
    e4a8:	200f      	movs	r0, #15
    e4aa:	4b05      	ldr	r3, [pc, #20]	; (e4c0 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e4ac:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
    e4ae:	2101      	movs	r1, #1
    e4b0:	2013      	movs	r0, #19
    e4b2:	4b03      	ldr	r3, [pc, #12]	; (e4c0 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e4b4:	4798      	blx	r3
}
    e4b6:	bf00      	nop
    e4b8:	3708      	adds	r7, #8
    e4ba:	46bd      	mov	sp, r7
    e4bc:	bd80      	pop	{r7, pc}
    e4be:	bf00      	nop
    e4c0:	0000e3d9 	.word	0x0000e3d9

0000e4c4 <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
    e4c4:	b580      	push	{r7, lr}
    e4c6:	b082      	sub	sp, #8
    e4c8:	af00      	add	r7, sp, #0
    e4ca:	6078      	str	r0, [r7, #4]
	garbage=0;
    e4cc:	687b      	ldr	r3, [r7, #4]
    e4ce:	2200      	movs	r2, #0
    e4d0:	609a      	str	r2, [r3, #8]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    e4d2:	2101      	movs	r1, #1
    e4d4:	200f      	movs	r0, #15
    e4d6:	4b05      	ldr	r3, [pc, #20]	; (e4ec <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e4d8:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
    e4da:	2101      	movs	r1, #1
    e4dc:	2013      	movs	r0, #19
    e4de:	4b03      	ldr	r3, [pc, #12]	; (e4ec <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e4e0:	4798      	blx	r3
}
    e4e2:	bf00      	nop
    e4e4:	3708      	adds	r7, #8
    e4e6:	46bd      	mov	sp, r7
    e4e8:	bd80      	pop	{r7, pc}
    e4ea:	bf00      	nop
    e4ec:	0000e3d9 	.word	0x0000e3d9

0000e4f0 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
    e4f0:	b580      	push	{r7, lr}
    e4f2:	b082      	sub	sp, #8
    e4f4:	af00      	add	r7, sp, #0
    e4f6:	6078      	str	r0, [r7, #4]
    e4f8:	460b      	mov	r3, r1
    e4fa:	70fb      	strb	r3, [r7, #3]
	//WaitBusy();
	spi.Write(&byte,1);
    e4fc:	687b      	ldr	r3, [r7, #4]
    e4fe:	3318      	adds	r3, #24
    e500:	1cf9      	adds	r1, r7, #3
    e502:	2201      	movs	r2, #1
    e504:	4618      	mov	r0, r3
    e506:	4b03      	ldr	r3, [pc, #12]	; (e514 <_ZN16FlashMemoryClass9Send_ByteEh+0x24>)
    e508:	4798      	blx	r3
	return byte;
    e50a:	78fb      	ldrb	r3, [r7, #3]
}
    e50c:	4618      	mov	r0, r3
    e50e:	3708      	adds	r7, #8
    e510:	46bd      	mov	sp, r7
    e512:	bd80      	pop	{r7, pc}
    e514:	0000f955 	.word	0x0000f955

0000e518 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
    e518:	b580      	push	{r7, lr}
    e51a:	b084      	sub	sp, #16
    e51c:	af00      	add	r7, sp, #0
    e51e:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.Read(&byte,1);
    e520:	687b      	ldr	r3, [r7, #4]
    e522:	3318      	adds	r3, #24
    e524:	f107 010f 	add.w	r1, r7, #15
    e528:	2201      	movs	r2, #1
    e52a:	4618      	mov	r0, r3
    e52c:	4b03      	ldr	r3, [pc, #12]	; (e53c <_ZN16FlashMemoryClass8Get_ByteEv+0x24>)
    e52e:	4798      	blx	r3
	
	return byte;
    e530:	7bfb      	ldrb	r3, [r7, #15]
}
    e532:	4618      	mov	r0, r3
    e534:	3710      	adds	r7, #16
    e536:	46bd      	mov	sp, r7
    e538:	bd80      	pop	{r7, pc}
    e53a:	bf00      	nop
    e53c:	0000f999 	.word	0x0000f999

0000e540 <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
    e540:	b580      	push	{r7, lr}
    e542:	b082      	sub	sp, #8
    e544:	af00      	add	r7, sp, #0
    e546:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
    e548:	6878      	ldr	r0, [r7, #4]
    e54a:	4b0d      	ldr	r3, [pc, #52]	; (e580 <_ZN16FlashMemoryClass4WRENEv+0x40>)
    e54c:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
    e54e:	2106      	movs	r1, #6
    e550:	6878      	ldr	r0, [r7, #4]
    e552:	4b0c      	ldr	r3, [pc, #48]	; (e584 <_ZN16FlashMemoryClass4WRENEv+0x44>)
    e554:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
    e556:	6878      	ldr	r0, [r7, #4]
    e558:	4b0b      	ldr	r3, [pc, #44]	; (e588 <_ZN16FlashMemoryClass4WRENEv+0x48>)
    e55a:	4798      	blx	r3
		status=ReadStatusRegister();
    e55c:	6878      	ldr	r0, [r7, #4]
    e55e:	4b0b      	ldr	r3, [pc, #44]	; (e58c <_ZN16FlashMemoryClass4WRENEv+0x4c>)
    e560:	4798      	blx	r3
    e562:	4603      	mov	r3, r0
    e564:	461a      	mov	r2, r3
    e566:	687b      	ldr	r3, [r7, #4]
    e568:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	} while ((status&&(0x02))==0);
    e56c:	687b      	ldr	r3, [r7, #4]
    e56e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e572:	2b00      	cmp	r3, #0
    e574:	d100      	bne.n	e578 <_ZN16FlashMemoryClass4WRENEv+0x38>
	do
    e576:	e7e7      	b.n	e548 <_ZN16FlashMemoryClass4WRENEv+0x8>

}
    e578:	bf00      	nop
    e57a:	3708      	adds	r7, #8
    e57c:	46bd      	mov	sp, r7
    e57e:	bd80      	pop	{r7, pc}
    e580:	0000e499 	.word	0x0000e499
    e584:	0000e4f1 	.word	0x0000e4f1
    e588:	0000e4c5 	.word	0x0000e4c5
    e58c:	0000e76d 	.word	0x0000e76d

0000e590 <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
    e590:	b580      	push	{r7, lr}
    e592:	b082      	sub	sp, #8
    e594:	af00      	add	r7, sp, #0
    e596:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
    e598:	6878      	ldr	r0, [r7, #4]
    e59a:	4b06      	ldr	r3, [pc, #24]	; (e5b4 <_ZN16FlashMemoryClass4WRDIEv+0x24>)
    e59c:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
    e59e:	2104      	movs	r1, #4
    e5a0:	6878      	ldr	r0, [r7, #4]
    e5a2:	4b05      	ldr	r3, [pc, #20]	; (e5b8 <_ZN16FlashMemoryClass4WRDIEv+0x28>)
    e5a4:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
    e5a6:	6878      	ldr	r0, [r7, #4]
    e5a8:	4b04      	ldr	r3, [pc, #16]	; (e5bc <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
    e5aa:	4798      	blx	r3
	
}
    e5ac:	bf00      	nop
    e5ae:	3708      	adds	r7, #8
    e5b0:	46bd      	mov	sp, r7
    e5b2:	bd80      	pop	{r7, pc}
    e5b4:	0000e499 	.word	0x0000e499
    e5b8:	0000e4f1 	.word	0x0000e4f1
    e5bc:	0000e4c5 	.word	0x0000e4c5

0000e5c0 <_ZN16FlashMemoryClass10eraseFlashEmm>:
		return *srcPtr;

	}
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
    e5c0:	b580      	push	{r7, lr}
    e5c2:	b086      	sub	sp, #24
    e5c4:	af00      	add	r7, sp, #0
    e5c6:	60f8      	str	r0, [r7, #12]
    e5c8:	60b9      	str	r1, [r7, #8]
    e5ca:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
    e5cc:	687b      	ldr	r3, [r7, #4]
    e5ce:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
    e5d0:	68bb      	ldr	r3, [r7, #8]
    e5d2:	613b      	str	r3, [r7, #16]
	flashOpen();
    e5d4:	68f8      	ldr	r0, [r7, #12]
    e5d6:	4b21      	ldr	r3, [pc, #132]	; (e65c <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>)
    e5d8:	4798      	blx	r3
	while (eraseRemaining > 0)
    e5da:	697b      	ldr	r3, [r7, #20]
    e5dc:	2b00      	cmp	r3, #0
    e5de:	d035      	beq.n	e64c <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>
	{
	WREN();
    e5e0:	68f8      	ldr	r0, [r7, #12]
    e5e2:	4b1f      	ldr	r3, [pc, #124]	; (e660 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa0>)
    e5e4:	4798      	blx	r3
	if (eraseRemaining <= 4 * 1024)
    e5e6:	697b      	ldr	r3, [r7, #20]
    e5e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e5ec:	d806      	bhi.n	e5fc <_ZN16FlashMemoryClass10eraseFlashEmm+0x3c>
		{
		Sector_Erase(eraseAddress);
    e5ee:	6939      	ldr	r1, [r7, #16]
    e5f0:	68f8      	ldr	r0, [r7, #12]
    e5f2:	4b1c      	ldr	r3, [pc, #112]	; (e664 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e5f4:	4798      	blx	r3
		eraseRemaining = 0;
    e5f6:	2300      	movs	r3, #0
    e5f8:	617b      	str	r3, [r7, #20]
    e5fa:	e020      	b.n	e63e <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}
	else if (eraseRemaining < 64 * 1024)
    e5fc:	697b      	ldr	r3, [r7, #20]
    e5fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e602:	d20c      	bcs.n	e61e <_ZN16FlashMemoryClass10eraseFlashEmm+0x5e>
		{
		Sector_Erase(eraseAddress);
    e604:	6939      	ldr	r1, [r7, #16]
    e606:	68f8      	ldr	r0, [r7, #12]
    e608:	4b16      	ldr	r3, [pc, #88]	; (e664 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e60a:	4798      	blx	r3
		eraseAddress += (4 * 1024);
    e60c:	693b      	ldr	r3, [r7, #16]
    e60e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e612:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (4 * 1024);
    e614:	697b      	ldr	r3, [r7, #20]
    e616:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    e61a:	617b      	str	r3, [r7, #20]
    e61c:	e00f      	b.n	e63e <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}

	else if (eraseRemaining >= 64 * 1024)
    e61e:	697b      	ldr	r3, [r7, #20]
    e620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e624:	d30b      	bcc.n	e63e <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		{
		Block_Erase_64K(eraseAddress);
    e626:	6939      	ldr	r1, [r7, #16]
    e628:	68f8      	ldr	r0, [r7, #12]
    e62a:	4b0f      	ldr	r3, [pc, #60]	; (e668 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa8>)
    e62c:	4798      	blx	r3
		eraseAddress += (64 * 1024);
    e62e:	693b      	ldr	r3, [r7, #16]
    e630:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e634:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (64 * 1024);
    e636:	697b      	ldr	r3, [r7, #20]
    e638:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    e63c:	617b      	str	r3, [r7, #20]
		Block_Erase_32K(eraseAddress);
		eraseAddress += (32 * 1024);
		eraseRemaining -= (32 * 1024);
		}
*/
	WaitBusy();
    e63e:	68f8      	ldr	r0, [r7, #12]
    e640:	4b0a      	ldr	r3, [pc, #40]	; (e66c <_ZN16FlashMemoryClass10eraseFlashEmm+0xac>)
    e642:	4798      	blx	r3
	WRDI();
    e644:	68f8      	ldr	r0, [r7, #12]
    e646:	4b0a      	ldr	r3, [pc, #40]	; (e670 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb0>)
    e648:	4798      	blx	r3
	while (eraseRemaining > 0)
    e64a:	e7c6      	b.n	e5da <_ZN16FlashMemoryClass10eraseFlashEmm+0x1a>
	}
	flashClose();
    e64c:	68f8      	ldr	r0, [r7, #12]
    e64e:	4b09      	ldr	r3, [pc, #36]	; (e674 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb4>)
    e650:	4798      	blx	r3
}
    e652:	bf00      	nop
    e654:	3718      	adds	r7, #24
    e656:	46bd      	mov	sp, r7
    e658:	bd80      	pop	{r7, pc}
    e65a:	bf00      	nop
    e65c:	0000e471 	.word	0x0000e471
    e660:	0000e541 	.word	0x0000e541
    e664:	0000e809 	.word	0x0000e809
    e668:	0000e679 	.word	0x0000e679
    e66c:	0000e6d5 	.word	0x0000e6d5
    e670:	0000e591 	.word	0x0000e591
    e674:	0000e7e5 	.word	0x0000e7e5

0000e678 <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
    e678:	b580      	push	{r7, lr}
    e67a:	b082      	sub	sp, #8
    e67c:	af00      	add	r7, sp, #0
    e67e:	6078      	str	r0, [r7, #4]
    e680:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
    e682:	6878      	ldr	r0, [r7, #4]
    e684:	4b10      	ldr	r3, [pc, #64]	; (e6c8 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x50>)
    e686:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
    e688:	21d8      	movs	r1, #216	; 0xd8
    e68a:	6878      	ldr	r0, [r7, #4]
    e68c:	4b0f      	ldr	r3, [pc, #60]	; (e6cc <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e68e:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    e690:	683b      	ldr	r3, [r7, #0]
    e692:	0c1b      	lsrs	r3, r3, #16
    e694:	b2db      	uxtb	r3, r3
    e696:	4619      	mov	r1, r3
    e698:	6878      	ldr	r0, [r7, #4]
    e69a:	4b0c      	ldr	r3, [pc, #48]	; (e6cc <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e69c:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
    e69e:	683b      	ldr	r3, [r7, #0]
    e6a0:	0a1b      	lsrs	r3, r3, #8
    e6a2:	b2db      	uxtb	r3, r3
    e6a4:	4619      	mov	r1, r3
    e6a6:	6878      	ldr	r0, [r7, #4]
    e6a8:	4b08      	ldr	r3, [pc, #32]	; (e6cc <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e6aa:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
    e6ac:	683b      	ldr	r3, [r7, #0]
    e6ae:	b2db      	uxtb	r3, r3
    e6b0:	4619      	mov	r1, r3
    e6b2:	6878      	ldr	r0, [r7, #4]
    e6b4:	4b05      	ldr	r3, [pc, #20]	; (e6cc <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e6b6:	4798      	blx	r3
		CE_High_Flash();				// disable device
    e6b8:	6878      	ldr	r0, [r7, #4]
    e6ba:	4b05      	ldr	r3, [pc, #20]	; (e6d0 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x58>)
    e6bc:	4798      	blx	r3
		
}
    e6be:	bf00      	nop
    e6c0:	3708      	adds	r7, #8
    e6c2:	46bd      	mov	sp, r7
    e6c4:	bd80      	pop	{r7, pc}
    e6c6:	bf00      	nop
    e6c8:	0000e499 	.word	0x0000e499
    e6cc:	0000e4f1 	.word	0x0000e4f1
    e6d0:	0000e4c5 	.word	0x0000e4c5

0000e6d4 <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
    e6d4:	b580      	push	{r7, lr}
    e6d6:	b082      	sub	sp, #8
    e6d8:	af00      	add	r7, sp, #0
    e6da:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
    e6dc:	6878      	ldr	r0, [r7, #4]
    e6de:	4b0f      	ldr	r3, [pc, #60]	; (e71c <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    e6e0:	4798      	blx	r3
    e6e2:	4603      	mov	r3, r0
    e6e4:	461a      	mov	r2, r3
    e6e6:	687b      	ldr	r3, [r7, #4]
    e6e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    e6ec:	687b      	ldr	r3, [r7, #4]
    e6ee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e6f2:	f003 0301 	and.w	r3, r3, #1
    e6f6:	2b00      	cmp	r3, #0
    e6f8:	d008      	beq.n	e70c <_ZN16FlashMemoryClass8WaitBusyEv+0x38>
			status = ReadStatusRegister();
    e6fa:	6878      	ldr	r0, [r7, #4]
    e6fc:	4b07      	ldr	r3, [pc, #28]	; (e71c <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    e6fe:	4798      	blx	r3
    e700:	4603      	mov	r3, r0
    e702:	461a      	mov	r2, r3
    e704:	687b      	ldr	r3, [r7, #4]
    e706:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    e70a:	e7ef      	b.n	e6ec <_ZN16FlashMemoryClass8WaitBusyEv+0x18>
		}
		
		return	status;
    e70c:	687b      	ldr	r3, [r7, #4]
    e70e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    e712:	4618      	mov	r0, r3
    e714:	3708      	adds	r7, #8
    e716:	46bd      	mov	sp, r7
    e718:	bd80      	pop	{r7, pc}
    e71a:	bf00      	nop
    e71c:	0000e76d 	.word	0x0000e76d

0000e720 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
    e720:	b580      	push	{r7, lr}
    e722:	b082      	sub	sp, #8
    e724:	af00      	add	r7, sp, #0
    e726:	6078      	str	r0, [r7, #4]
	
	flashOpen();
    e728:	6878      	ldr	r0, [r7, #4]
    e72a:	4b0d      	ldr	r3, [pc, #52]	; (e760 <_ZN16FlashMemoryClass7IsReadyEv+0x40>)
    e72c:	4798      	blx	r3
	status = ReadStatusRegister();
    e72e:	6878      	ldr	r0, [r7, #4]
    e730:	4b0c      	ldr	r3, [pc, #48]	; (e764 <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
    e732:	4798      	blx	r3
    e734:	4603      	mov	r3, r0
    e736:	461a      	mov	r2, r3
    e738:	687b      	ldr	r3, [r7, #4]
    e73a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	flashClose();
    e73e:	6878      	ldr	r0, [r7, #4]
    e740:	4b09      	ldr	r3, [pc, #36]	; (e768 <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
    e742:	4798      	blx	r3
	return	(status&0x01)==0;
    e744:	687b      	ldr	r3, [r7, #4]
    e746:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e74a:	f003 0301 	and.w	r3, r3, #1
    e74e:	2b00      	cmp	r3, #0
    e750:	bf0c      	ite	eq
    e752:	2301      	moveq	r3, #1
    e754:	2300      	movne	r3, #0
    e756:	b2db      	uxtb	r3, r3
}
    e758:	4618      	mov	r0, r3
    e75a:	3708      	adds	r7, #8
    e75c:	46bd      	mov	sp, r7
    e75e:	bd80      	pop	{r7, pc}
    e760:	0000e471 	.word	0x0000e471
    e764:	0000e76d 	.word	0x0000e76d
    e768:	0000e7e5 	.word	0x0000e7e5

0000e76c <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
    e76c:	b580      	push	{r7, lr}
    e76e:	b082      	sub	sp, #8
    e770:	af00      	add	r7, sp, #0
    e772:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
    e774:	2105      	movs	r1, #5
    e776:	6878      	ldr	r0, [r7, #4]
    e778:	4b06      	ldr	r3, [pc, #24]	; (e794 <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x28>)
    e77a:	4798      	blx	r3
    e77c:	4603      	mov	r3, r0
    e77e:	461a      	mov	r2, r3
    e780:	687b      	ldr	r3, [r7, #4]
    e782:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		return status;
    e786:	687b      	ldr	r3, [r7, #4]
    e788:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    e78c:	4618      	mov	r0, r3
    e78e:	3708      	adds	r7, #8
    e790:	46bd      	mov	sp, r7
    e792:	bd80      	pop	{r7, pc}
    e794:	0000e799 	.word	0x0000e799

0000e798 <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
    e798:	b580      	push	{r7, lr}
    e79a:	b084      	sub	sp, #16
    e79c:	af00      	add	r7, sp, #0
    e79e:	6078      	str	r0, [r7, #4]
    e7a0:	460b      	mov	r3, r1
    e7a2:	70fb      	strb	r3, [r7, #3]
	uint8_t b = 0;
    e7a4:	2300      	movs	r3, #0
    e7a6:	73fb      	strb	r3, [r7, #15]
	CE_Low_Flash();			// enable device
    e7a8:	6878      	ldr	r0, [r7, #4]
    e7aa:	4b0a      	ldr	r3, [pc, #40]	; (e7d4 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x3c>)
    e7ac:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
    e7ae:	78fb      	ldrb	r3, [r7, #3]
    e7b0:	4619      	mov	r1, r3
    e7b2:	6878      	ldr	r0, [r7, #4]
    e7b4:	4b08      	ldr	r3, [pc, #32]	; (e7d8 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x40>)
    e7b6:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
    e7b8:	6878      	ldr	r0, [r7, #4]
    e7ba:	4b08      	ldr	r3, [pc, #32]	; (e7dc <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x44>)
    e7bc:	4798      	blx	r3
    e7be:	4603      	mov	r3, r0
    e7c0:	73fb      	strb	r3, [r7, #15]
	CE_High_Flash();			// disable device
    e7c2:	6878      	ldr	r0, [r7, #4]
    e7c4:	4b06      	ldr	r3, [pc, #24]	; (e7e0 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x48>)
    e7c6:	4798      	blx	r3
	return b;
    e7c8:	7bfb      	ldrb	r3, [r7, #15]
}
    e7ca:	4618      	mov	r0, r3
    e7cc:	3710      	adds	r7, #16
    e7ce:	46bd      	mov	sp, r7
    e7d0:	bd80      	pop	{r7, pc}
    e7d2:	bf00      	nop
    e7d4:	0000e499 	.word	0x0000e499
    e7d8:	0000e4f1 	.word	0x0000e4f1
    e7dc:	0000e519 	.word	0x0000e519
    e7e0:	0000e4c5 	.word	0x0000e4c5

0000e7e4 <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
    e7e4:	b580      	push	{r7, lr}
    e7e6:	b082      	sub	sp, #8
    e7e8:	af00      	add	r7, sp, #0
    e7ea:	6078      	str	r0, [r7, #4]
	garbage=0;
    e7ec:	687b      	ldr	r3, [r7, #4]
    e7ee:	2200      	movs	r2, #0
    e7f0:	609a      	str	r2, [r3, #8]
		spi.Disable();
    e7f2:	687b      	ldr	r3, [r7, #4]
    e7f4:	3318      	adds	r3, #24
    e7f6:	4618      	mov	r0, r3
    e7f8:	4b02      	ldr	r3, [pc, #8]	; (e804 <_ZN16FlashMemoryClass10flashCloseEv+0x20>)
    e7fa:	4798      	blx	r3
	}
    e7fc:	bf00      	nop
    e7fe:	3708      	adds	r7, #8
    e800:	46bd      	mov	sp, r7
    e802:	bd80      	pop	{r7, pc}
    e804:	0000f9dd 	.word	0x0000f9dd

0000e808 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
    e808:	b580      	push	{r7, lr}
    e80a:	b082      	sub	sp, #8
    e80c:	af00      	add	r7, sp, #0
    e80e:	6078      	str	r0, [r7, #4]
    e810:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
    e812:	6878      	ldr	r0, [r7, #4]
    e814:	4b10      	ldr	r3, [pc, #64]	; (e858 <_ZN16FlashMemoryClass12Sector_EraseEm+0x50>)
    e816:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
    e818:	2120      	movs	r1, #32
    e81a:	6878      	ldr	r0, [r7, #4]
    e81c:	4b0f      	ldr	r3, [pc, #60]	; (e85c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e81e:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    e820:	683b      	ldr	r3, [r7, #0]
    e822:	0c1b      	lsrs	r3, r3, #16
    e824:	b2db      	uxtb	r3, r3
    e826:	4619      	mov	r1, r3
    e828:	6878      	ldr	r0, [r7, #4]
    e82a:	4b0c      	ldr	r3, [pc, #48]	; (e85c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e82c:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
    e82e:	683b      	ldr	r3, [r7, #0]
    e830:	0a1b      	lsrs	r3, r3, #8
    e832:	b2db      	uxtb	r3, r3
    e834:	4619      	mov	r1, r3
    e836:	6878      	ldr	r0, [r7, #4]
    e838:	4b08      	ldr	r3, [pc, #32]	; (e85c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e83a:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
    e83c:	683b      	ldr	r3, [r7, #0]
    e83e:	b2db      	uxtb	r3, r3
    e840:	4619      	mov	r1, r3
    e842:	6878      	ldr	r0, [r7, #4]
    e844:	4b05      	ldr	r3, [pc, #20]	; (e85c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e846:	4798      	blx	r3
	CE_High_Flash();				// disable device
    e848:	6878      	ldr	r0, [r7, #4]
    e84a:	4b05      	ldr	r3, [pc, #20]	; (e860 <_ZN16FlashMemoryClass12Sector_EraseEm+0x58>)
    e84c:	4798      	blx	r3
}
    e84e:	bf00      	nop
    e850:	3708      	adds	r7, #8
    e852:	46bd      	mov	sp, r7
    e854:	bd80      	pop	{r7, pc}
    e856:	bf00      	nop
    e858:	0000e499 	.word	0x0000e499
    e85c:	0000e4f1 	.word	0x0000e4f1
    e860:	0000e4c5 	.word	0x0000e4c5

0000e864 <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    e864:	b580      	push	{r7, lr}
    e866:	b086      	sub	sp, #24
    e868:	af00      	add	r7, sp, #0
    e86a:	60f8      	str	r0, [r7, #12]
    e86c:	60b9      	str	r1, [r7, #8]
    e86e:	607a      	str	r2, [r7, #4]
    e870:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
    e872:	68f8      	ldr	r0, [r7, #12]
    e874:	4b2b      	ldr	r3, [pc, #172]	; (e924 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc0>)
    e876:	4798      	blx	r3
    e878:	4603      	mov	r3, r0
    e87a:	f083 0301 	eor.w	r3, r3, #1
    e87e:	b2db      	uxtb	r3, r3
    e880:	2b00      	cmp	r3, #0
    e882:	d000      	beq.n	e886 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x22>
    e884:	e7f5      	b.n	e872 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
    e886:	68f8      	ldr	r0, [r7, #12]
    e888:	4b27      	ldr	r3, [pc, #156]	; (e928 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc4>)
    e88a:	4798      	blx	r3
	WREN();
    e88c:	68f8      	ldr	r0, [r7, #12]
    e88e:	4b27      	ldr	r3, [pc, #156]	; (e92c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc8>)
    e890:	4798      	blx	r3
	CE_Low_Flash();
    e892:	68f8      	ldr	r0, [r7, #12]
    e894:	4b26      	ldr	r3, [pc, #152]	; (e930 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xcc>)
    e896:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
    e898:	68fb      	ldr	r3, [r7, #12]
    e89a:	2202      	movs	r2, #2
    e89c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    e8a0:	687b      	ldr	r3, [r7, #4]
    e8a2:	0c1b      	lsrs	r3, r3, #16
    e8a4:	b2da      	uxtb	r2, r3
    e8a6:	68fb      	ldr	r3, [r7, #12]
    e8a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    e8ac:	687b      	ldr	r3, [r7, #4]
    e8ae:	0a1b      	lsrs	r3, r3, #8
    e8b0:	b2da      	uxtb	r2, r3
    e8b2:	68fb      	ldr	r3, [r7, #12]
    e8b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	localBuffer[3]=(uint8_t)(addr&0xFF);
    e8b8:	687b      	ldr	r3, [r7, #4]
    e8ba:	b2da      	uxtb	r2, r3
    e8bc:	68fb      	ldr	r3, [r7, #12]
    e8be:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	for (uint32_t i = 4; i <(size)+4; i++)
    e8c2:	2304      	movs	r3, #4
    e8c4:	617b      	str	r3, [r7, #20]
    e8c6:	683b      	ldr	r3, [r7, #0]
    e8c8:	1d1a      	adds	r2, r3, #4
    e8ca:	697b      	ldr	r3, [r7, #20]
    e8cc:	429a      	cmp	r2, r3
    e8ce:	d90e      	bls.n	e8ee <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8a>
	{
		localBuffer[i]=*p;
    e8d0:	68bb      	ldr	r3, [r7, #8]
    e8d2:	7819      	ldrb	r1, [r3, #0]
    e8d4:	68fa      	ldr	r2, [r7, #12]
    e8d6:	697b      	ldr	r3, [r7, #20]
    e8d8:	4413      	add	r3, r2
    e8da:	3334      	adds	r3, #52	; 0x34
    e8dc:	460a      	mov	r2, r1
    e8de:	701a      	strb	r2, [r3, #0]
		p++;
    e8e0:	68bb      	ldr	r3, [r7, #8]
    e8e2:	3301      	adds	r3, #1
    e8e4:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
    e8e6:	697b      	ldr	r3, [r7, #20]
    e8e8:	3301      	adds	r3, #1
    e8ea:	617b      	str	r3, [r7, #20]
    e8ec:	e7eb      	b.n	e8c6 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x62>
	}


	w=spi.Write(&localBuffer[0],size+4);
    e8ee:	68fb      	ldr	r3, [r7, #12]
    e8f0:	f103 0018 	add.w	r0, r3, #24
    e8f4:	68fb      	ldr	r3, [r7, #12]
    e8f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
    e8fa:	683b      	ldr	r3, [r7, #0]
    e8fc:	3304      	adds	r3, #4
    e8fe:	461a      	mov	r2, r3
    e900:	4b0c      	ldr	r3, [pc, #48]	; (e934 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd0>)
    e902:	4798      	blx	r3
    e904:	4603      	mov	r3, r0
    e906:	613b      	str	r3, [r7, #16]

	CE_High_Flash();
    e908:	68f8      	ldr	r0, [r7, #12]
    e90a:	4b0b      	ldr	r3, [pc, #44]	; (e938 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
    e90c:	4798      	blx	r3
	WRDI();
    e90e:	68f8      	ldr	r0, [r7, #12]
    e910:	4b0a      	ldr	r3, [pc, #40]	; (e93c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
    e912:	4798      	blx	r3
	flashClose();
    e914:	68f8      	ldr	r0, [r7, #12]
    e916:	4b0a      	ldr	r3, [pc, #40]	; (e940 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
    e918:	4798      	blx	r3
	return	w;
    e91a:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    e91c:	4618      	mov	r0, r3
    e91e:	3718      	adds	r7, #24
    e920:	46bd      	mov	sp, r7
    e922:	bd80      	pop	{r7, pc}
    e924:	0000e721 	.word	0x0000e721
    e928:	0000e471 	.word	0x0000e471
    e92c:	0000e541 	.word	0x0000e541
    e930:	0000e499 	.word	0x0000e499
    e934:	0000f955 	.word	0x0000f955
    e938:	0000e4c5 	.word	0x0000e4c5
    e93c:	0000e591 	.word	0x0000e591
    e940:	0000e7e5 	.word	0x0000e7e5

0000e944 <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    e944:	b580      	push	{r7, lr}
    e946:	b086      	sub	sp, #24
    e948:	af00      	add	r7, sp, #0
    e94a:	60f8      	str	r0, [r7, #12]
    e94c:	60b9      	str	r1, [r7, #8]
    e94e:	607a      	str	r2, [r7, #4]
    e950:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
	while(!IsReady());
    e952:	68f8      	ldr	r0, [r7, #12]
    e954:	4b21      	ldr	r3, [pc, #132]	; (e9dc <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x98>)
    e956:	4798      	blx	r3
    e958:	4603      	mov	r3, r0
    e95a:	f083 0301 	eor.w	r3, r3, #1
    e95e:	b2db      	uxtb	r3, r3
    e960:	2b00      	cmp	r3, #0
    e962:	d000      	beq.n	e966 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x22>
    e964:	e7f5      	b.n	e952 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
    e966:	68f8      	ldr	r0, [r7, #12]
    e968:	4b1d      	ldr	r3, [pc, #116]	; (e9e0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x9c>)
    e96a:	4798      	blx	r3
	CE_Low_Flash();
    e96c:	68f8      	ldr	r0, [r7, #12]
    e96e:	4b1d      	ldr	r3, [pc, #116]	; (e9e4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa0>)
    e970:	4798      	blx	r3
	instruction[0]=kFlashRead;
    e972:	68fb      	ldr	r3, [r7, #12]
    e974:	2203      	movs	r2, #3
    e976:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    e97a:	687b      	ldr	r3, [r7, #4]
    e97c:	0c1b      	lsrs	r3, r3, #16
    e97e:	b2da      	uxtb	r2, r3
    e980:	68fb      	ldr	r3, [r7, #12]
    e982:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    e986:	687b      	ldr	r3, [r7, #4]
    e988:	0a1b      	lsrs	r3, r3, #8
    e98a:	b2da      	uxtb	r2, r3
    e98c:	68fb      	ldr	r3, [r7, #12]
    e98e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	instruction[3]=(uint8_t)(addr&0xFF);
    e992:	687b      	ldr	r3, [r7, #4]
    e994:	b2da      	uxtb	r2, r3
    e996:	68fb      	ldr	r3, [r7, #12]
    e998:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		
	uint32_t	r=spi.Write(instruction,4);
    e99c:	68fb      	ldr	r3, [r7, #12]
    e99e:	f103 0018 	add.w	r0, r3, #24
    e9a2:	68fb      	ldr	r3, [r7, #12]
    e9a4:	3348      	adds	r3, #72	; 0x48
    e9a6:	2204      	movs	r2, #4
    e9a8:	4619      	mov	r1, r3
    e9aa:	4b0f      	ldr	r3, [pc, #60]	; (e9e8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
    e9ac:	4798      	blx	r3
    e9ae:	4603      	mov	r3, r0
    e9b0:	617b      	str	r3, [r7, #20]
	r=spi.Read(p,size);
    e9b2:	68fb      	ldr	r3, [r7, #12]
    e9b4:	3318      	adds	r3, #24
    e9b6:	683a      	ldr	r2, [r7, #0]
    e9b8:	68b9      	ldr	r1, [r7, #8]
    e9ba:	4618      	mov	r0, r3
    e9bc:	4b0b      	ldr	r3, [pc, #44]	; (e9ec <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
    e9be:	4798      	blx	r3
    e9c0:	4603      	mov	r3, r0
    e9c2:	617b      	str	r3, [r7, #20]
	CE_High_Flash();
    e9c4:	68f8      	ldr	r0, [r7, #12]
    e9c6:	4b0a      	ldr	r3, [pc, #40]	; (e9f0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
    e9c8:	4798      	blx	r3
	flashClose();
    e9ca:	68f8      	ldr	r0, [r7, #12]
    e9cc:	4b09      	ldr	r3, [pc, #36]	; (e9f4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
    e9ce:	4798      	blx	r3
	
	return	r;
    e9d0:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    e9d2:	4618      	mov	r0, r3
    e9d4:	3718      	adds	r7, #24
    e9d6:	46bd      	mov	sp, r7
    e9d8:	bd80      	pop	{r7, pc}
    e9da:	bf00      	nop
    e9dc:	0000e721 	.word	0x0000e721
    e9e0:	0000e471 	.word	0x0000e471
    e9e4:	0000e499 	.word	0x0000e499
    e9e8:	0000f955 	.word	0x0000f955
    e9ec:	0000f999 	.word	0x0000f999
    e9f0:	0000e4c5 	.word	0x0000e4c5
    e9f4:	0000e7e5 	.word	0x0000e7e5

0000e9f8 <_Z41__static_initialization_and_destruction_0ii>:
    e9f8:	b580      	push	{r7, lr}
    e9fa:	b082      	sub	sp, #8
    e9fc:	af00      	add	r7, sp, #0
    e9fe:	6078      	str	r0, [r7, #4]
    ea00:	6039      	str	r1, [r7, #0]
    ea02:	687b      	ldr	r3, [r7, #4]
    ea04:	2b01      	cmp	r3, #1
    ea06:	d10d      	bne.n	ea24 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    ea08:	683b      	ldr	r3, [r7, #0]
    ea0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ea0e:	4293      	cmp	r3, r2
    ea10:	d108      	bne.n	ea24 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    ea12:	4906      	ldr	r1, [pc, #24]	; (ea2c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ea14:	4806      	ldr	r0, [pc, #24]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ea16:	4b07      	ldr	r3, [pc, #28]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    ea18:	4798      	blx	r3
    ea1a:	4a07      	ldr	r2, [pc, #28]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    ea1c:	4907      	ldr	r1, [pc, #28]	; (ea3c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ea1e:	4804      	ldr	r0, [pc, #16]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ea20:	4b07      	ldr	r3, [pc, #28]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    ea22:	4798      	blx	r3
    ea24:	bf00      	nop
    ea26:	3708      	adds	r7, #8
    ea28:	46bd      	mov	sp, r7
    ea2a:	bd80      	pop	{r7, pc}
    ea2c:	20001330 	.word	0x20001330
    ea30:	20000fac 	.word	0x20000fac
    ea34:	0000e411 	.word	0x0000e411
    ea38:	20000000 	.word	0x20000000
    ea3c:	0000e451 	.word	0x0000e451
    ea40:	0000fa9d 	.word	0x0000fa9d

0000ea44 <_GLOBAL__sub_I_flashLayout>:
    ea44:	b580      	push	{r7, lr}
    ea46:	af00      	add	r7, sp, #0
    ea48:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ea4c:	2001      	movs	r0, #1
    ea4e:	4b01      	ldr	r3, [pc, #4]	; (ea54 <_GLOBAL__sub_I_flashLayout+0x10>)
    ea50:	4798      	blx	r3
    ea52:	bd80      	pop	{r7, pc}
    ea54:	0000e9f9 	.word	0x0000e9f9

0000ea58 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    ea58:	b480      	push	{r7}
    ea5a:	b083      	sub	sp, #12
    ea5c:	af00      	add	r7, sp, #0
    ea5e:	6078      	str	r0, [r7, #4]
    ea60:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    ea62:	687b      	ldr	r3, [r7, #4]
    ea64:	683a      	ldr	r2, [r7, #0]
    ea66:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    ea68:	4a06      	ldr	r2, [pc, #24]	; (ea84 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    ea6a:	687b      	ldr	r3, [r7, #4]
    ea6c:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    ea6e:	687b      	ldr	r3, [r7, #4]
    ea70:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ea74:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    ea76:	687b      	ldr	r3, [r7, #4]
    ea78:	4618      	mov	r0, r3
    ea7a:	370c      	adds	r7, #12
    ea7c:	46bd      	mov	sp, r7
    ea7e:	bc80      	pop	{r7}
    ea80:	4770      	bx	lr
    ea82:	bf00      	nop
    ea84:	20000ffc 	.word	0x20000ffc

0000ea88 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    ea88:	b480      	push	{r7}
    ea8a:	b083      	sub	sp, #12
    ea8c:	af00      	add	r7, sp, #0
    ea8e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    ea90:	687b      	ldr	r3, [r7, #4]
    ea92:	2200      	movs	r2, #0
    ea94:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    ea96:	687b      	ldr	r3, [r7, #4]
    ea98:	4618      	mov	r0, r3
    ea9a:	370c      	adds	r7, #12
    ea9c:	46bd      	mov	sp, r7
    ea9e:	bc80      	pop	{r7}
    eaa0:	4770      	bx	lr
	...

0000eaa4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    eaa4:	b580      	push	{r7, lr}
    eaa6:	b086      	sub	sp, #24
    eaa8:	af00      	add	r7, sp, #0
    eaaa:	60f8      	str	r0, [r7, #12]
    eaac:	60b9      	str	r1, [r7, #8]
    eaae:	607a      	str	r2, [r7, #4]
    eab0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    eab2:	68f8      	ldr	r0, [r7, #12]
    eab4:	4b0d      	ldr	r3, [pc, #52]	; (eaec <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    eab6:	4798      	blx	r3
	task->interval = interval;
    eab8:	68fb      	ldr	r3, [r7, #12]
    eaba:	699b      	ldr	r3, [r3, #24]
    eabc:	687a      	ldr	r2, [r7, #4]
    eabe:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    eac0:	68fb      	ldr	r3, [r7, #12]
    eac2:	699b      	ldr	r3, [r3, #24]
    eac4:	68ba      	ldr	r2, [r7, #8]
    eac6:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    eac8:	68fb      	ldr	r3, [r7, #12]
    eaca:	699b      	ldr	r3, [r3, #24]
    eacc:	78fa      	ldrb	r2, [r7, #3]
    eace:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    ead0:	68fb      	ldr	r3, [r7, #12]
    ead2:	68da      	ldr	r2, [r3, #12]
    ead4:	68fb      	ldr	r3, [r7, #12]
    ead6:	699b      	ldr	r3, [r3, #24]
    ead8:	4619      	mov	r1, r3
    eada:	4610      	mov	r0, r2
    eadc:	4b04      	ldr	r3, [pc, #16]	; (eaf0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    eade:	4798      	blx	r3
    eae0:	6178      	str	r0, [r7, #20]
	
	return status;
    eae2:	697b      	ldr	r3, [r7, #20]
}
    eae4:	4618      	mov	r0, r3
    eae6:	3718      	adds	r7, #24
    eae8:	46bd      	mov	sp, r7
    eaea:	bd80      	pop	{r7, pc}
    eaec:	0000eb69 	.word	0x0000eb69
    eaf0:	000031a5 	.word	0x000031a5

0000eaf4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    eaf4:	b580      	push	{r7, lr}
    eaf6:	b086      	sub	sp, #24
    eaf8:	af00      	add	r7, sp, #0
    eafa:	60f8      	str	r0, [r7, #12]
    eafc:	60b9      	str	r1, [r7, #8]
    eafe:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    eb00:	687a      	ldr	r2, [r7, #4]
    eb02:	68b9      	ldr	r1, [r7, #8]
    eb04:	68f8      	ldr	r0, [r7, #12]
    eb06:	4b0c      	ldr	r3, [pc, #48]	; (eb38 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    eb08:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    eb0a:	68fb      	ldr	r3, [r7, #12]
    eb0c:	68db      	ldr	r3, [r3, #12]
    eb0e:	681b      	ldr	r3, [r3, #0]
    eb10:	699b      	ldr	r3, [r3, #24]
    eb12:	68fa      	ldr	r2, [r7, #12]
    eb14:	68d2      	ldr	r2, [r2, #12]
    eb16:	3204      	adds	r2, #4
    eb18:	4610      	mov	r0, r2
    eb1a:	4798      	blx	r3
    eb1c:	4603      	mov	r3, r0
    eb1e:	2b00      	cmp	r3, #0
    eb20:	d105      	bne.n	eb2e <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    eb22:	68fb      	ldr	r3, [r7, #12]
    eb24:	68db      	ldr	r3, [r3, #12]
    eb26:	4618      	mov	r0, r3
    eb28:	4b04      	ldr	r3, [pc, #16]	; (eb3c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    eb2a:	4798      	blx	r3
    eb2c:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    eb2e:	697b      	ldr	r3, [r7, #20]
}
    eb30:	4618      	mov	r0, r3
    eb32:	3718      	adds	r7, #24
    eb34:	46bd      	mov	sp, r7
    eb36:	bd80      	pop	{r7, pc}
    eb38:	0000eb41 	.word	0x0000eb41
    eb3c:	000030d1 	.word	0x000030d1

0000eb40 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    eb40:	b590      	push	{r4, r7, lr}
    eb42:	b087      	sub	sp, #28
    eb44:	af00      	add	r7, sp, #0
    eb46:	60f8      	str	r0, [r7, #12]
    eb48:	60b9      	str	r1, [r7, #8]
    eb4a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    eb4c:	2301      	movs	r3, #1
    eb4e:	687a      	ldr	r2, [r7, #4]
    eb50:	68b9      	ldr	r1, [r7, #8]
    eb52:	68f8      	ldr	r0, [r7, #12]
    eb54:	4c03      	ldr	r4, [pc, #12]	; (eb64 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    eb56:	47a0      	blx	r4
    eb58:	6178      	str	r0, [r7, #20]
		return status;
    eb5a:	697b      	ldr	r3, [r7, #20]
}
    eb5c:	4618      	mov	r0, r3
    eb5e:	371c      	adds	r7, #28
    eb60:	46bd      	mov	sp, r7
    eb62:	bd90      	pop	{r4, r7, pc}
    eb64:	0000eaa5 	.word	0x0000eaa5

0000eb68 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
		status=timer_start(timer_descr);
	}
	
	return status;
}
void	Timer_Class::ChooseAvailableTimerTask(void){
    eb68:	b480      	push	{r7}
    eb6a:	b085      	sub	sp, #20
    eb6c:	af00      	add	r7, sp, #0
    eb6e:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    eb70:	2300      	movs	r3, #0
    eb72:	73fb      	strb	r3, [r7, #15]
    eb74:	7bfb      	ldrb	r3, [r7, #15]
    eb76:	2b0f      	cmp	r3, #15
    eb78:	dc1c      	bgt.n	ebb4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    eb7a:	7bfb      	ldrb	r3, [r7, #15]
    eb7c:	f003 030f 	and.w	r3, r3, #15
    eb80:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    eb82:	7bba      	ldrb	r2, [r7, #14]
    eb84:	490f      	ldr	r1, [pc, #60]	; (ebc4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    eb86:	4613      	mov	r3, r2
    eb88:	009b      	lsls	r3, r3, #2
    eb8a:	4413      	add	r3, r2
    eb8c:	009b      	lsls	r3, r3, #2
    eb8e:	440b      	add	r3, r1
    eb90:	330c      	adds	r3, #12
    eb92:	681b      	ldr	r3, [r3, #0]
    eb94:	2b00      	cmp	r3, #0
    eb96:	d109      	bne.n	ebac <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    eb98:	7bba      	ldrb	r2, [r7, #14]
    eb9a:	4613      	mov	r3, r2
    eb9c:	009b      	lsls	r3, r3, #2
    eb9e:	4413      	add	r3, r2
    eba0:	009b      	lsls	r3, r3, #2
    eba2:	4a08      	ldr	r2, [pc, #32]	; (ebc4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    eba4:	441a      	add	r2, r3
    eba6:	687b      	ldr	r3, [r7, #4]
    eba8:	619a      	str	r2, [r3, #24]
			return;
    ebaa:	e006      	b.n	ebba <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ebac:	7bfb      	ldrb	r3, [r7, #15]
    ebae:	3301      	adds	r3, #1
    ebb0:	73fb      	strb	r3, [r7, #15]
    ebb2:	e7df      	b.n	eb74 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    ebb4:	687b      	ldr	r3, [r7, #4]
    ebb6:	4a03      	ldr	r2, [pc, #12]	; (ebc4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    ebb8:	619a      	str	r2, [r3, #24]

}
    ebba:	3714      	adds	r7, #20
    ebbc:	46bd      	mov	sp, r7
    ebbe:	bc80      	pop	{r7}
    ebc0:	4770      	bx	lr
    ebc2:	bf00      	nop
    ebc4:	20001000 	.word	0x20001000

0000ebc8 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    ebc8:	b580      	push	{r7, lr}
    ebca:	b082      	sub	sp, #8
    ebcc:	af00      	add	r7, sp, #0
    ebce:	6078      	str	r0, [r7, #4]
    ebd0:	6039      	str	r1, [r7, #0]
    ebd2:	687b      	ldr	r3, [r7, #4]
    ebd4:	2b01      	cmp	r3, #1
    ebd6:	d131      	bne.n	ec3c <_Z41__static_initialization_and_destruction_0ii+0x74>
    ebd8:	683b      	ldr	r3, [r7, #0]
    ebda:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ebde:	4293      	cmp	r3, r2
    ebe0:	d12c      	bne.n	ec3c <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ebe2:	4918      	ldr	r1, [pc, #96]	; (ec44 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    ebe4:	4818      	ldr	r0, [pc, #96]	; (ec48 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    ebe6:	4b19      	ldr	r3, [pc, #100]	; (ec4c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ebe8:	4798      	blx	r3
    ebea:	4a19      	ldr	r2, [pc, #100]	; (ec50 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ebec:	4919      	ldr	r1, [pc, #100]	; (ec54 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ebee:	4816      	ldr	r0, [pc, #88]	; (ec48 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    ebf0:	4b19      	ldr	r3, [pc, #100]	; (ec58 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ebf2:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    ebf4:	4919      	ldr	r1, [pc, #100]	; (ec5c <_Z41__static_initialization_and_destruction_0ii+0x94>)
    ebf6:	481a      	ldr	r0, [pc, #104]	; (ec60 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    ebf8:	4b14      	ldr	r3, [pc, #80]	; (ec4c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ebfa:	4798      	blx	r3
    ebfc:	4a14      	ldr	r2, [pc, #80]	; (ec50 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ebfe:	4915      	ldr	r1, [pc, #84]	; (ec54 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ec00:	4817      	ldr	r0, [pc, #92]	; (ec60 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    ec02:	4b15      	ldr	r3, [pc, #84]	; (ec58 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ec04:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    ec06:	4917      	ldr	r1, [pc, #92]	; (ec64 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    ec08:	4817      	ldr	r0, [pc, #92]	; (ec68 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    ec0a:	4b10      	ldr	r3, [pc, #64]	; (ec4c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ec0c:	4798      	blx	r3
    ec0e:	4a10      	ldr	r2, [pc, #64]	; (ec50 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ec10:	4910      	ldr	r1, [pc, #64]	; (ec54 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ec12:	4815      	ldr	r0, [pc, #84]	; (ec68 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    ec14:	4b10      	ldr	r3, [pc, #64]	; (ec58 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ec16:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    ec18:	4914      	ldr	r1, [pc, #80]	; (ec6c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    ec1a:	4815      	ldr	r0, [pc, #84]	; (ec70 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ec1c:	4b0b      	ldr	r3, [pc, #44]	; (ec4c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ec1e:	4798      	blx	r3
    ec20:	4a0b      	ldr	r2, [pc, #44]	; (ec50 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ec22:	490c      	ldr	r1, [pc, #48]	; (ec54 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ec24:	4812      	ldr	r0, [pc, #72]	; (ec70 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ec26:	4b0c      	ldr	r3, [pc, #48]	; (ec58 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ec28:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    ec2a:	4912      	ldr	r1, [pc, #72]	; (ec74 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    ec2c:	4812      	ldr	r0, [pc, #72]	; (ec78 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ec2e:	4b07      	ldr	r3, [pc, #28]	; (ec4c <_Z41__static_initialization_and_destruction_0ii+0x84>)
    ec30:	4798      	blx	r3
    ec32:	4a07      	ldr	r2, [pc, #28]	; (ec50 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    ec34:	4907      	ldr	r1, [pc, #28]	; (ec54 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    ec36:	4810      	ldr	r0, [pc, #64]	; (ec78 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ec38:	4b07      	ldr	r3, [pc, #28]	; (ec58 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    ec3a:	4798      	blx	r3
    ec3c:	bf00      	nop
    ec3e:	3708      	adds	r7, #8
    ec40:	46bd      	mov	sp, r7
    ec42:	bd80      	pop	{r7, pc}
    ec44:	20001310 	.word	0x20001310
    ec48:	20001144 	.word	0x20001144
    ec4c:	0000ea59 	.word	0x0000ea59
    ec50:	20000000 	.word	0x20000000
    ec54:	0000ea89 	.word	0x0000ea89
    ec58:	0000fa9d 	.word	0x0000fa9d
    ec5c:	20001384 	.word	0x20001384
    ec60:	20001160 	.word	0x20001160
    ec64:	20001488 	.word	0x20001488
    ec68:	2000117c 	.word	0x2000117c
    ec6c:	200013a4 	.word	0x200013a4
    ec70:	20001198 	.word	0x20001198
    ec74:	20001408 	.word	0x20001408
    ec78:	200011b4 	.word	0x200011b4

0000ec7c <_GLOBAL__sub_I_ptrTimerClass>:
    ec7c:	b580      	push	{r7, lr}
    ec7e:	af00      	add	r7, sp, #0
    ec80:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec84:	2001      	movs	r0, #1
    ec86:	4b01      	ldr	r3, [pc, #4]	; (ec8c <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    ec88:	4798      	blx	r3
    ec8a:	bd80      	pop	{r7, pc}
    ec8c:	0000ebc9 	.word	0x0000ebc9

0000ec90 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    ec90:	b480      	push	{r7}
    ec92:	b083      	sub	sp, #12
    ec94:	af00      	add	r7, sp, #0
    ec96:	6078      	str	r0, [r7, #4]
    ec98:	4a05      	ldr	r2, [pc, #20]	; (ecb0 <_ZN5PrintC1Ev+0x20>)
    ec9a:	687b      	ldr	r3, [r7, #4]
    ec9c:	601a      	str	r2, [r3, #0]
    ec9e:	687b      	ldr	r3, [r7, #4]
    eca0:	2200      	movs	r2, #0
    eca2:	605a      	str	r2, [r3, #4]
    eca4:	687b      	ldr	r3, [r7, #4]
    eca6:	4618      	mov	r0, r3
    eca8:	370c      	adds	r7, #12
    ecaa:	46bd      	mov	sp, r7
    ecac:	bc80      	pop	{r7}
    ecae:	4770      	bx	lr
    ecb0:	000102a4 	.word	0x000102a4

0000ecb4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    ecb4:	b480      	push	{r7}
    ecb6:	b083      	sub	sp, #12
    ecb8:	af00      	add	r7, sp, #0
    ecba:	6078      	str	r0, [r7, #4]
    ecbc:	2300      	movs	r3, #0
    ecbe:	4618      	mov	r0, r3
    ecc0:	370c      	adds	r7, #12
    ecc2:	46bd      	mov	sp, r7
    ecc4:	bc80      	pop	{r7}
    ecc6:	4770      	bx	lr

0000ecc8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    ecc8:	b480      	push	{r7}
    ecca:	b083      	sub	sp, #12
    eccc:	af00      	add	r7, sp, #0
    ecce:	6078      	str	r0, [r7, #4]
    ecd0:	bf00      	nop
    ecd2:	370c      	adds	r7, #12
    ecd4:	46bd      	mov	sp, r7
    ecd6:	bc80      	pop	{r7}
    ecd8:	4770      	bx	lr
	...

0000ecdc <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    ecdc:	b580      	push	{r7, lr}
    ecde:	b082      	sub	sp, #8
    ece0:	af00      	add	r7, sp, #0
    ece2:	6078      	str	r0, [r7, #4]
    ece4:	687b      	ldr	r3, [r7, #4]
    ece6:	4618      	mov	r0, r3
    ece8:	4b06      	ldr	r3, [pc, #24]	; (ed04 <_ZN6StreamC1Ev+0x28>)
    ecea:	4798      	blx	r3
    ecec:	4a06      	ldr	r2, [pc, #24]	; (ed08 <_ZN6StreamC1Ev+0x2c>)
    ecee:	687b      	ldr	r3, [r7, #4]
    ecf0:	601a      	str	r2, [r3, #0]
    ecf2:	687b      	ldr	r3, [r7, #4]
    ecf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ecf8:	609a      	str	r2, [r3, #8]
    ecfa:	687b      	ldr	r3, [r7, #4]
    ecfc:	4618      	mov	r0, r3
    ecfe:	3708      	adds	r7, #8
    ed00:	46bd      	mov	sp, r7
    ed02:	bd80      	pop	{r7, pc}
    ed04:	0000ec91 	.word	0x0000ec91
    ed08:	00010268 	.word	0x00010268

0000ed0c <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    ed0c:	b480      	push	{r7}
    ed0e:	b083      	sub	sp, #12
    ed10:	af00      	add	r7, sp, #0
    ed12:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    ed14:	4b06      	ldr	r3, [pc, #24]	; (ed30 <_ZL10USBTimeoutPK10timer_task+0x24>)
    ed16:	681b      	ldr	r3, [r3, #0]
    ed18:	2201      	movs	r2, #1
    ed1a:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    ed1c:	4b04      	ldr	r3, [pc, #16]	; (ed30 <_ZL10USBTimeoutPK10timer_task+0x24>)
    ed1e:	681b      	ldr	r3, [r3, #0]
    ed20:	2200      	movs	r2, #0
    ed22:	741a      	strb	r2, [r3, #16]
	
}
    ed24:	bf00      	nop
    ed26:	370c      	adds	r7, #12
    ed28:	46bd      	mov	sp, r7
    ed2a:	bc80      	pop	{r7}
    ed2c:	4770      	bx	lr
    ed2e:	bf00      	nop
    ed30:	200011d0 	.word	0x200011d0

0000ed34 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ed34:	b480      	push	{r7}
    ed36:	b083      	sub	sp, #12
    ed38:	af00      	add	r7, sp, #0
    ed3a:	4603      	mov	r3, r0
    ed3c:	603a      	str	r2, [r7, #0]
    ed3e:	71fb      	strb	r3, [r7, #7]
    ed40:	460b      	mov	r3, r1
    ed42:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    ed44:	4b08      	ldr	r3, [pc, #32]	; (ed68 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ed46:	681b      	ldr	r3, [r3, #0]
    ed48:	2201      	movs	r2, #1
    ed4a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    ed4c:	4b06      	ldr	r3, [pc, #24]	; (ed68 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ed4e:	681b      	ldr	r3, [r3, #0]
    ed50:	2201      	movs	r2, #1
    ed52:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ed54:	4b04      	ldr	r3, [pc, #16]	; (ed68 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ed56:	681b      	ldr	r3, [r3, #0]
    ed58:	2201      	movs	r2, #1
    ed5a:	741a      	strb	r2, [r3, #16]


	return false;
    ed5c:	2300      	movs	r3, #0
}
    ed5e:	4618      	mov	r0, r3
    ed60:	370c      	adds	r7, #12
    ed62:	46bd      	mov	sp, r7
    ed64:	bc80      	pop	{r7}
    ed66:	4770      	bx	lr
    ed68:	200011d0 	.word	0x200011d0

0000ed6c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ed6c:	b480      	push	{r7}
    ed6e:	b083      	sub	sp, #12
    ed70:	af00      	add	r7, sp, #0
    ed72:	4603      	mov	r3, r0
    ed74:	603a      	str	r2, [r7, #0]
    ed76:	71fb      	strb	r3, [r7, #7]
    ed78:	460b      	mov	r3, r1
    ed7a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    ed7c:	4b08      	ldr	r3, [pc, #32]	; (eda0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ed7e:	681b      	ldr	r3, [r3, #0]
    ed80:	2201      	movs	r2, #1
    ed82:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    ed84:	4b06      	ldr	r3, [pc, #24]	; (eda0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ed86:	681b      	ldr	r3, [r3, #0]
    ed88:	2201      	movs	r2, #1
    ed8a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ed8c:	4b04      	ldr	r3, [pc, #16]	; (eda0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ed8e:	681b      	ldr	r3, [r3, #0]
    ed90:	2201      	movs	r2, #1
    ed92:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    ed94:	2300      	movs	r3, #0
}
    ed96:	4618      	mov	r0, r3
    ed98:	370c      	adds	r7, #12
    ed9a:	46bd      	mov	sp, r7
    ed9c:	bc80      	pop	{r7}
    ed9e:	4770      	bx	lr
    eda0:	200011d0 	.word	0x200011d0

0000eda4 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    eda4:	b580      	push	{r7, lr}
    eda6:	b082      	sub	sp, #8
    eda8:	af00      	add	r7, sp, #0
    edaa:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    edac:	793b      	ldrb	r3, [r7, #4]
    edae:	f003 0301 	and.w	r3, r3, #1
    edb2:	b2db      	uxtb	r3, r3
    edb4:	2b00      	cmp	r3, #0
    edb6:	d013      	beq.n	ede0 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    edb8:	490c      	ldr	r1, [pc, #48]	; (edec <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    edba:	2000      	movs	r0, #0
    edbc:	4b0c      	ldr	r3, [pc, #48]	; (edf0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    edbe:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    edc0:	490c      	ldr	r1, [pc, #48]	; (edf4 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    edc2:	2001      	movs	r0, #1
    edc4:	4b0a      	ldr	r3, [pc, #40]	; (edf0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    edc6:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    edc8:	4b0b      	ldr	r3, [pc, #44]	; (edf8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    edca:	681b      	ldr	r3, [r3, #0]
    edcc:	2201      	movs	r2, #1
    edce:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    edd0:	4b09      	ldr	r3, [pc, #36]	; (edf8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    edd2:	681b      	ldr	r3, [r3, #0]
    edd4:	2201      	movs	r2, #1
    edd6:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    edd8:	4b07      	ldr	r3, [pc, #28]	; (edf8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    edda:	681b      	ldr	r3, [r3, #0]
    eddc:	2201      	movs	r2, #1
    edde:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    ede0:	2300      	movs	r3, #0
}
    ede2:	4618      	mov	r0, r3
    ede4:	3708      	adds	r7, #8
    ede6:	46bd      	mov	sp, r7
    ede8:	bd80      	pop	{r7, pc}
    edea:	bf00      	nop
    edec:	0000ed35 	.word	0x0000ed35
    edf0:	0000ce51 	.word	0x0000ce51
    edf4:	0000ed6d 	.word	0x0000ed6d
    edf8:	200011d0 	.word	0x200011d0

0000edfc <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    edfc:	b580      	push	{r7, lr}
    edfe:	b082      	sub	sp, #8
    ee00:	af00      	add	r7, sp, #0
    ee02:	6078      	str	r0, [r7, #4]
    ee04:	687b      	ldr	r3, [r7, #4]
    ee06:	4618      	mov	r0, r3
    ee08:	4b0a      	ldr	r3, [pc, #40]	; (ee34 <_ZN9CDC_ClassC1Ev+0x38>)
    ee0a:	4798      	blx	r3
    ee0c:	687b      	ldr	r3, [r7, #4]
    ee0e:	3310      	adds	r3, #16
    ee10:	4618      	mov	r0, r3
    ee12:	4b09      	ldr	r3, [pc, #36]	; (ee38 <_ZN9CDC_ClassC1Ev+0x3c>)
    ee14:	4798      	blx	r3
    ee16:	4a09      	ldr	r2, [pc, #36]	; (ee3c <_ZN9CDC_ClassC1Ev+0x40>)
    ee18:	687b      	ldr	r3, [r7, #4]
    ee1a:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    ee1c:	687b      	ldr	r3, [r7, #4]
    ee1e:	f04f 32ff 	mov.w	r2, #4294967295
    ee22:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    ee24:	4a06      	ldr	r2, [pc, #24]	; (ee40 <_ZN9CDC_ClassC1Ev+0x44>)
    ee26:	687b      	ldr	r3, [r7, #4]
    ee28:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    ee2a:	687b      	ldr	r3, [r7, #4]
    ee2c:	4618      	mov	r0, r3
    ee2e:	3708      	adds	r7, #8
    ee30:	46bd      	mov	sp, r7
    ee32:	bd80      	pop	{r7, pc}
    ee34:	0000ecdd 	.word	0x0000ecdd
    ee38:	0000f441 	.word	0x0000f441
    ee3c:	00010238 	.word	0x00010238
    ee40:	200011d0 	.word	0x200011d0

0000ee44 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    ee44:	b580      	push	{r7, lr}
    ee46:	b082      	sub	sp, #8
    ee48:	af00      	add	r7, sp, #0
    ee4a:	6078      	str	r0, [r7, #4]
    ee4c:	4a06      	ldr	r2, [pc, #24]	; (ee68 <_ZN9CDC_ClassD1Ev+0x24>)
    ee4e:	687b      	ldr	r3, [r7, #4]
    ee50:	601a      	str	r2, [r3, #0]
    ee52:	687b      	ldr	r3, [r7, #4]
    ee54:	3310      	adds	r3, #16
    ee56:	4618      	mov	r0, r3
    ee58:	4b04      	ldr	r3, [pc, #16]	; (ee6c <_ZN9CDC_ClassD1Ev+0x28>)
    ee5a:	4798      	blx	r3
{
} //~CDC_Class
    ee5c:	687b      	ldr	r3, [r7, #4]
    ee5e:	4618      	mov	r0, r3
    ee60:	3708      	adds	r7, #8
    ee62:	46bd      	mov	sp, r7
    ee64:	bd80      	pop	{r7, pc}
    ee66:	bf00      	nop
    ee68:	00010238 	.word	0x00010238
    ee6c:	0000f461 	.word	0x0000f461

0000ee70 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    ee70:	b580      	push	{r7, lr}
    ee72:	b082      	sub	sp, #8
    ee74:	af00      	add	r7, sp, #0
    ee76:	6078      	str	r0, [r7, #4]
	
	OnInit();
    ee78:	687b      	ldr	r3, [r7, #4]
    ee7a:	3310      	adds	r3, #16
    ee7c:	4618      	mov	r0, r3
    ee7e:	4b09      	ldr	r3, [pc, #36]	; (eea4 <_ZN9CDC_Class4InitEv+0x34>)
    ee80:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    ee82:	4909      	ldr	r1, [pc, #36]	; (eea8 <_ZN9CDC_Class4InitEv+0x38>)
    ee84:	2003      	movs	r0, #3
    ee86:	4b09      	ldr	r3, [pc, #36]	; (eeac <_ZN9CDC_Class4InitEv+0x3c>)
    ee88:	4798      	blx	r3
	delay_ms(100);
    ee8a:	2064      	movs	r0, #100	; 0x64
    ee8c:	4b08      	ldr	r3, [pc, #32]	; (eeb0 <_ZN9CDC_Class4InitEv+0x40>)
    ee8e:	4798      	blx	r3
		
	if (connected)
    ee90:	687b      	ldr	r3, [r7, #4]
    ee92:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    ee94:	2064      	movs	r0, #100	; 0x64
    ee96:	4b06      	ldr	r3, [pc, #24]	; (eeb0 <_ZN9CDC_Class4InitEv+0x40>)
    ee98:	4798      	blx	r3

	

}
    ee9a:	bf00      	nop
    ee9c:	3708      	adds	r7, #8
    ee9e:	46bd      	mov	sp, r7
    eea0:	bd80      	pop	{r7, pc}
    eea2:	bf00      	nop
    eea4:	0000f475 	.word	0x0000f475
    eea8:	0000eda5 	.word	0x0000eda5
    eeac:	0000ce51 	.word	0x0000ce51
    eeb0:	00002609 	.word	0x00002609

0000eeb4 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    eeb4:	b580      	push	{r7, lr}
    eeb6:	b082      	sub	sp, #8
    eeb8:	af00      	add	r7, sp, #0
    eeba:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    eebc:	4b03      	ldr	r3, [pc, #12]	; (eecc <_ZN9CDC_Class9IsEnabledEv+0x18>)
    eebe:	4798      	blx	r3
    eec0:	4603      	mov	r3, r0
	
}
    eec2:	4618      	mov	r0, r3
    eec4:	3708      	adds	r7, #8
    eec6:	46bd      	mov	sp, r7
    eec8:	bd80      	pop	{r7, pc}
    eeca:	bf00      	nop
    eecc:	0000cec9 	.word	0x0000cec9

0000eed0 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    eed0:	b580      	push	{r7, lr}
    eed2:	b084      	sub	sp, #16
    eed4:	af00      	add	r7, sp, #0
    eed6:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    eed8:	687b      	ldr	r3, [r7, #4]
    eeda:	699b      	ldr	r3, [r3, #24]
    eedc:	f1b3 3fff 	cmp.w	r3, #4294967295
    eee0:	bf14      	ite	ne
    eee2:	2301      	movne	r3, #1
    eee4:	2300      	moveq	r3, #0
    eee6:	b2db      	uxtb	r3, r3
    eee8:	2b00      	cmp	r3, #0
    eeea:	d002      	beq.n	eef2 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    eeec:	687b      	ldr	r3, [r7, #4]
    eeee:	699b      	ldr	r3, [r3, #24]
    eef0:	e011      	b.n	ef16 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    eef2:	687b      	ldr	r3, [r7, #4]
    eef4:	681b      	ldr	r3, [r3, #0]
    eef6:	331c      	adds	r3, #28
    eef8:	681b      	ldr	r3, [r3, #0]
    eefa:	f107 010f 	add.w	r1, r7, #15
    eefe:	2201      	movs	r2, #1
    ef00:	6878      	ldr	r0, [r7, #4]
    ef02:	4798      	blx	r3
    ef04:	4602      	mov	r2, r0
    ef06:	687b      	ldr	r3, [r7, #4]
    ef08:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    ef0a:	7bfb      	ldrb	r3, [r7, #15]
    ef0c:	461a      	mov	r2, r3
    ef0e:	687b      	ldr	r3, [r7, #4]
    ef10:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    ef12:	687b      	ldr	r3, [r7, #4]
    ef14:	699b      	ldr	r3, [r3, #24]
}
    ef16:	4618      	mov	r0, r3
    ef18:	3710      	adds	r7, #16
    ef1a:	46bd      	mov	sp, r7
    ef1c:	bd80      	pop	{r7, pc}
	...

0000ef20 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    ef20:	b580      	push	{r7, lr}
    ef22:	b086      	sub	sp, #24
    ef24:	af00      	add	r7, sp, #0
    ef26:	60f8      	str	r0, [r7, #12]
    ef28:	60b9      	str	r1, [r7, #8]
    ef2a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    ef2c:	68fb      	ldr	r3, [r7, #12]
    ef2e:	7c1b      	ldrb	r3, [r3, #16]
    ef30:	b2db      	uxtb	r3, r3
    ef32:	2b00      	cmp	r3, #0
    ef34:	d02e      	beq.n	ef94 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    ef36:	687a      	ldr	r2, [r7, #4]
    ef38:	4613      	mov	r3, r2
    ef3a:	009b      	lsls	r3, r3, #2
    ef3c:	4413      	add	r3, r2
    ef3e:	005b      	lsls	r3, r3, #1
    ef40:	461a      	mov	r2, r3
    ef42:	4918      	ldr	r1, [pc, #96]	; (efa4 <_ZN9CDC_Class8readDataEPvl+0x84>)
    ef44:	4818      	ldr	r0, [pc, #96]	; (efa8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ef46:	4b19      	ldr	r3, [pc, #100]	; (efac <_ZN9CDC_Class8readDataEPvl+0x8c>)
    ef48:	4798      	blx	r3
		rxReady=false;
    ef4a:	68fb      	ldr	r3, [r7, #12]
    ef4c:	2200      	movs	r2, #0
    ef4e:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    ef50:	687b      	ldr	r3, [r7, #4]
    ef52:	4619      	mov	r1, r3
    ef54:	68b8      	ldr	r0, [r7, #8]
    ef56:	4b16      	ldr	r3, [pc, #88]	; (efb0 <_ZN9CDC_Class8readDataEPvl+0x90>)
    ef58:	4798      	blx	r3
    ef5a:	4603      	mov	r3, r0
    ef5c:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    ef5e:	68fb      	ldr	r3, [r7, #12]
    ef60:	7d5b      	ldrb	r3, [r3, #21]
    ef62:	b2db      	uxtb	r3, r3
    ef64:	f083 0301 	eor.w	r3, r3, #1
    ef68:	b2db      	uxtb	r3, r3
    ef6a:	2b00      	cmp	r3, #0
    ef6c:	d006      	beq.n	ef7c <_ZN9CDC_Class8readDataEPvl+0x5c>
    ef6e:	68fb      	ldr	r3, [r7, #12]
    ef70:	7c1b      	ldrb	r3, [r3, #16]
    ef72:	b2db      	uxtb	r3, r3
    ef74:	2b00      	cmp	r3, #0
    ef76:	d001      	beq.n	ef7c <_ZN9CDC_Class8readDataEPvl+0x5c>
    ef78:	2301      	movs	r3, #1
    ef7a:	e000      	b.n	ef7e <_ZN9CDC_Class8readDataEPvl+0x5e>
    ef7c:	2300      	movs	r3, #0
    ef7e:	2b00      	cmp	r3, #0
    ef80:	d000      	beq.n	ef84 <_ZN9CDC_Class8readDataEPvl+0x64>
    ef82:	e7ec      	b.n	ef5e <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    ef84:	4808      	ldr	r0, [pc, #32]	; (efa8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ef86:	4b0b      	ldr	r3, [pc, #44]	; (efb4 <_ZN9CDC_Class8readDataEPvl+0x94>)
    ef88:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ef8a:	4906      	ldr	r1, [pc, #24]	; (efa4 <_ZN9CDC_Class8readDataEPvl+0x84>)
    ef8c:	4806      	ldr	r0, [pc, #24]	; (efa8 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ef8e:	4b0a      	ldr	r3, [pc, #40]	; (efb8 <_ZN9CDC_Class8readDataEPvl+0x98>)
    ef90:	4798      	blx	r3
    ef92:	e001      	b.n	ef98 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    ef94:	2300      	movs	r3, #0
    ef96:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    ef98:	7dfb      	ldrb	r3, [r7, #23]
}
    ef9a:	4618      	mov	r0, r3
    ef9c:	3718      	adds	r7, #24
    ef9e:	46bd      	mov	sp, r7
    efa0:	bd80      	pop	{r7, pc}
    efa2:	bf00      	nop
    efa4:	0000ed0d 	.word	0x0000ed0d
    efa8:	2000128c 	.word	0x2000128c
    efac:	0000f6e1 	.word	0x0000f6e1
    efb0:	0000cda5 	.word	0x0000cda5
    efb4:	0000f601 	.word	0x0000f601
    efb8:	0000f745 	.word	0x0000f745

0000efbc <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    efbc:	b580      	push	{r7, lr}
    efbe:	b086      	sub	sp, #24
    efc0:	af00      	add	r7, sp, #0
    efc2:	60f8      	str	r0, [r7, #12]
    efc4:	60b9      	str	r1, [r7, #8]
    efc6:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    efc8:	68fb      	ldr	r3, [r7, #12]
    efca:	2200      	movs	r2, #0
    efcc:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    efce:	687b      	ldr	r3, [r7, #4]
    efd0:	4619      	mov	r1, r3
    efd2:	68b8      	ldr	r0, [r7, #8]
    efd4:	4b04      	ldr	r3, [pc, #16]	; (efe8 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    efd6:	4798      	blx	r3
    efd8:	4603      	mov	r3, r0
    efda:	617b      	str	r3, [r7, #20]
	return r;
    efdc:	697b      	ldr	r3, [r7, #20]
}
    efde:	4618      	mov	r0, r3
    efe0:	3718      	adds	r7, #24
    efe2:	46bd      	mov	sp, r7
    efe4:	bd80      	pop	{r7, pc}
    efe6:	bf00      	nop
    efe8:	0000cda5 	.word	0x0000cda5

0000efec <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    efec:	b580      	push	{r7, lr}
    efee:	b084      	sub	sp, #16
    eff0:	af00      	add	r7, sp, #0
    eff2:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    eff4:	687b      	ldr	r3, [r7, #4]
    eff6:	2200      	movs	r2, #0
    eff8:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    effa:	f107 030f 	add.w	r3, r7, #15
    effe:	2101      	movs	r1, #1
    f000:	4618      	mov	r0, r3
    f002:	4b08      	ldr	r3, [pc, #32]	; (f024 <_ZN9CDC_Class4readEv+0x38>)
    f004:	4798      	blx	r3
	while(!rxReady);
    f006:	687b      	ldr	r3, [r7, #4]
    f008:	7d5b      	ldrb	r3, [r3, #21]
    f00a:	b2db      	uxtb	r3, r3
    f00c:	f083 0301 	eor.w	r3, r3, #1
    f010:	b2db      	uxtb	r3, r3
    f012:	2b00      	cmp	r3, #0
    f014:	d000      	beq.n	f018 <_ZN9CDC_Class4readEv+0x2c>
    f016:	e7f6      	b.n	f006 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    f018:	7bfb      	ldrb	r3, [r7, #15]
}
    f01a:	4618      	mov	r0, r3
    f01c:	3710      	adds	r7, #16
    f01e:	46bd      	mov	sp, r7
    f020:	bd80      	pop	{r7, pc}
    f022:	bf00      	nop
    f024:	0000cda5 	.word	0x0000cda5

0000f028 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    f028:	b580      	push	{r7, lr}
    f02a:	b082      	sub	sp, #8
    f02c:	af00      	add	r7, sp, #0
    f02e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    f030:	687b      	ldr	r3, [r7, #4]
    f032:	331c      	adds	r3, #28
    f034:	2140      	movs	r1, #64	; 0x40
    f036:	4618      	mov	r0, r3
    f038:	4b02      	ldr	r3, [pc, #8]	; (f044 <_ZN9CDC_Class5flushEv+0x1c>)
    f03a:	4798      	blx	r3
}
    f03c:	bf00      	nop
    f03e:	3708      	adds	r7, #8
    f040:	46bd      	mov	sp, r7
    f042:	bd80      	pop	{r7, pc}
    f044:	0000cde9 	.word	0x0000cde9

0000f048 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    f048:	b580      	push	{r7, lr}
    f04a:	b082      	sub	sp, #8
    f04c:	af00      	add	r7, sp, #0
    f04e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    f050:	4b02      	ldr	r3, [pc, #8]	; (f05c <_ZN9CDC_Class5clearEv+0x14>)
    f052:	4798      	blx	r3
}
    f054:	bf00      	nop
    f056:	3708      	adds	r7, #8
    f058:	46bd      	mov	sp, r7
    f05a:	bd80      	pop	{r7, pc}
    f05c:	0000ce2d 	.word	0x0000ce2d

0000f060 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    f060:	b580      	push	{r7, lr}
    f062:	b082      	sub	sp, #8
    f064:	af00      	add	r7, sp, #0
    f066:	6078      	str	r0, [r7, #4]
    f068:	460b      	mov	r3, r1
    f06a:	70fb      	strb	r3, [r7, #3]
	if (connected){
    f06c:	687b      	ldr	r3, [r7, #4]
    f06e:	7c1b      	ldrb	r3, [r3, #16]
    f070:	b2db      	uxtb	r3, r3
    f072:	2b00      	cmp	r3, #0
    f074:	d012      	beq.n	f09c <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    f076:	687b      	ldr	r3, [r7, #4]
    f078:	7d1b      	ldrb	r3, [r3, #20]
    f07a:	b2db      	uxtb	r3, r3
    f07c:	f083 0301 	eor.w	r3, r3, #1
    f080:	b2db      	uxtb	r3, r3
    f082:	2b00      	cmp	r3, #0
    f084:	d000      	beq.n	f088 <_ZN9CDC_Class5writeEh+0x28>
    f086:	e7f6      	b.n	f076 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    f088:	687b      	ldr	r3, [r7, #4]
    f08a:	681b      	ldr	r3, [r3, #0]
    f08c:	3324      	adds	r3, #36	; 0x24
    f08e:	681b      	ldr	r3, [r3, #0]
    f090:	1cf9      	adds	r1, r7, #3
    f092:	2201      	movs	r2, #1
    f094:	6878      	ldr	r0, [r7, #4]
    f096:	4798      	blx	r3
    f098:	4603      	mov	r3, r0
    f09a:	e000      	b.n	f09e <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    f09c:	2300      	movs	r3, #0
	}
		
}
    f09e:	4618      	mov	r0, r3
    f0a0:	3708      	adds	r7, #8
    f0a2:	46bd      	mov	sp, r7
    f0a4:	bd80      	pop	{r7, pc}
	...

0000f0a8 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    f0a8:	b580      	push	{r7, lr}
    f0aa:	b086      	sub	sp, #24
    f0ac:	af00      	add	r7, sp, #0
    f0ae:	60f8      	str	r0, [r7, #12]
    f0b0:	60b9      	str	r1, [r7, #8]
    f0b2:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    f0b4:	68fb      	ldr	r3, [r7, #12]
    f0b6:	7c1b      	ldrb	r3, [r3, #16]
    f0b8:	b2db      	uxtb	r3, r3
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	d02f      	beq.n	f11e <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f0be:	687a      	ldr	r2, [r7, #4]
    f0c0:	4613      	mov	r3, r2
    f0c2:	009b      	lsls	r3, r3, #2
    f0c4:	4413      	add	r3, r2
    f0c6:	005b      	lsls	r3, r3, #1
    f0c8:	461a      	mov	r2, r3
    f0ca:	4917      	ldr	r1, [pc, #92]	; (f128 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f0cc:	4817      	ldr	r0, [pc, #92]	; (f12c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f0ce:	4b18      	ldr	r3, [pc, #96]	; (f130 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    f0d0:	4798      	blx	r3
		txReady=false;
    f0d2:	68fb      	ldr	r3, [r7, #12]
    f0d4:	2200      	movs	r2, #0
    f0d6:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f0d8:	687b      	ldr	r3, [r7, #4]
    f0da:	4619      	mov	r1, r3
    f0dc:	68b8      	ldr	r0, [r7, #8]
    f0de:	4b15      	ldr	r3, [pc, #84]	; (f134 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    f0e0:	4798      	blx	r3
    f0e2:	4603      	mov	r3, r0
    f0e4:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    f0e6:	68fb      	ldr	r3, [r7, #12]
    f0e8:	7d1b      	ldrb	r3, [r3, #20]
    f0ea:	b2db      	uxtb	r3, r3
    f0ec:	f083 0301 	eor.w	r3, r3, #1
    f0f0:	b2db      	uxtb	r3, r3
    f0f2:	2b00      	cmp	r3, #0
    f0f4:	d006      	beq.n	f104 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f0f6:	68fb      	ldr	r3, [r7, #12]
    f0f8:	7c1b      	ldrb	r3, [r3, #16]
    f0fa:	b2db      	uxtb	r3, r3
    f0fc:	2b00      	cmp	r3, #0
    f0fe:	d001      	beq.n	f104 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f100:	2301      	movs	r3, #1
    f102:	e000      	b.n	f106 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    f104:	2300      	movs	r3, #0
    f106:	2b00      	cmp	r3, #0
    f108:	d000      	beq.n	f10c <_ZN9CDC_Class9writeDataEPKvl+0x64>
    f10a:	e7ec      	b.n	f0e6 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    f10c:	4807      	ldr	r0, [pc, #28]	; (f12c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f10e:	4b0a      	ldr	r3, [pc, #40]	; (f138 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    f110:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f112:	4905      	ldr	r1, [pc, #20]	; (f128 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f114:	4805      	ldr	r0, [pc, #20]	; (f12c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f116:	4b09      	ldr	r3, [pc, #36]	; (f13c <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    f118:	4798      	blx	r3
		return r;
    f11a:	697b      	ldr	r3, [r7, #20]
    f11c:	e000      	b.n	f120 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    f11e:	2300      	movs	r3, #0
	}
	

}
    f120:	4618      	mov	r0, r3
    f122:	3718      	adds	r7, #24
    f124:	46bd      	mov	sp, r7
    f126:	bd80      	pop	{r7, pc}
    f128:	0000ed0d 	.word	0x0000ed0d
    f12c:	2000128c 	.word	0x2000128c
    f130:	0000f6e1 	.word	0x0000f6e1
    f134:	0000cde9 	.word	0x0000cde9
    f138:	0000f601 	.word	0x0000f601
    f13c:	0000f745 	.word	0x0000f745

0000f140 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    f140:	b580      	push	{r7, lr}
    f142:	b086      	sub	sp, #24
    f144:	af00      	add	r7, sp, #0
    f146:	60f8      	str	r0, [r7, #12]
    f148:	60b9      	str	r1, [r7, #8]
    f14a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    f14c:	68fb      	ldr	r3, [r7, #12]
    f14e:	2200      	movs	r2, #0
    f150:	751a      	strb	r2, [r3, #20]

 	if (connected){
    f152:	68fb      	ldr	r3, [r7, #12]
    f154:	7c1b      	ldrb	r3, [r3, #16]
    f156:	b2db      	uxtb	r3, r3
    f158:	2b00      	cmp	r3, #0
    f15a:	d02a      	beq.n	f1b2 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f15c:	687a      	ldr	r2, [r7, #4]
    f15e:	4613      	mov	r3, r2
    f160:	009b      	lsls	r3, r3, #2
    f162:	4413      	add	r3, r2
    f164:	005b      	lsls	r3, r3, #1
    f166:	461a      	mov	r2, r3
    f168:	4915      	ldr	r1, [pc, #84]	; (f1c0 <_ZN9CDC_Class5writeEPKhj+0x80>)
    f16a:	4816      	ldr	r0, [pc, #88]	; (f1c4 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f16c:	4b16      	ldr	r3, [pc, #88]	; (f1c8 <_ZN9CDC_Class5writeEPKhj+0x88>)
    f16e:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f170:	6879      	ldr	r1, [r7, #4]
    f172:	68b8      	ldr	r0, [r7, #8]
    f174:	4b15      	ldr	r3, [pc, #84]	; (f1cc <_ZN9CDC_Class5writeEPKhj+0x8c>)
    f176:	4798      	blx	r3
    f178:	4603      	mov	r3, r0
    f17a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    f17c:	68fb      	ldr	r3, [r7, #12]
    f17e:	7d1b      	ldrb	r3, [r3, #20]
    f180:	b2db      	uxtb	r3, r3
    f182:	f083 0301 	eor.w	r3, r3, #1
    f186:	b2db      	uxtb	r3, r3
    f188:	2b00      	cmp	r3, #0
    f18a:	d006      	beq.n	f19a <_ZN9CDC_Class5writeEPKhj+0x5a>
    f18c:	68fb      	ldr	r3, [r7, #12]
    f18e:	7c1b      	ldrb	r3, [r3, #16]
    f190:	b2db      	uxtb	r3, r3
    f192:	2b00      	cmp	r3, #0
    f194:	d001      	beq.n	f19a <_ZN9CDC_Class5writeEPKhj+0x5a>
    f196:	2301      	movs	r3, #1
    f198:	e000      	b.n	f19c <_ZN9CDC_Class5writeEPKhj+0x5c>
    f19a:	2300      	movs	r3, #0
    f19c:	2b00      	cmp	r3, #0
    f19e:	d000      	beq.n	f1a2 <_ZN9CDC_Class5writeEPKhj+0x62>
    f1a0:	e7ec      	b.n	f17c <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    f1a2:	4808      	ldr	r0, [pc, #32]	; (f1c4 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f1a4:	4b0a      	ldr	r3, [pc, #40]	; (f1d0 <_ZN9CDC_Class5writeEPKhj+0x90>)
    f1a6:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f1a8:	4905      	ldr	r1, [pc, #20]	; (f1c0 <_ZN9CDC_Class5writeEPKhj+0x80>)
    f1aa:	4806      	ldr	r0, [pc, #24]	; (f1c4 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f1ac:	4b09      	ldr	r3, [pc, #36]	; (f1d4 <_ZN9CDC_Class5writeEPKhj+0x94>)
    f1ae:	4798      	blx	r3
    f1b0:	e001      	b.n	f1b6 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    f1b2:	2300      	movs	r3, #0
    f1b4:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    f1b6:	697b      	ldr	r3, [r7, #20]
}
    f1b8:	4618      	mov	r0, r3
    f1ba:	3718      	adds	r7, #24
    f1bc:	46bd      	mov	sp, r7
    f1be:	bd80      	pop	{r7, pc}
    f1c0:	0000ed0d 	.word	0x0000ed0d
    f1c4:	2000128c 	.word	0x2000128c
    f1c8:	0000f6e1 	.word	0x0000f6e1
    f1cc:	0000cde9 	.word	0x0000cde9
    f1d0:	0000f601 	.word	0x0000f601
    f1d4:	0000f745 	.word	0x0000f745

0000f1d8 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    f1d8:	b480      	push	{r7}
    f1da:	b083      	sub	sp, #12
    f1dc:	af00      	add	r7, sp, #0
    f1de:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    f1e0:	687b      	ldr	r3, [r7, #4]
    f1e2:	7d5b      	ldrb	r3, [r3, #21]
    f1e4:	b2db      	uxtb	r3, r3
    f1e6:	2b00      	cmp	r3, #0
    f1e8:	d006      	beq.n	f1f8 <_ZN9CDC_Class9availableEv+0x20>
    f1ea:	687b      	ldr	r3, [r7, #4]
    f1ec:	7d1b      	ldrb	r3, [r3, #20]
    f1ee:	b2db      	uxtb	r3, r3
    f1f0:	2b00      	cmp	r3, #0
    f1f2:	d001      	beq.n	f1f8 <_ZN9CDC_Class9availableEv+0x20>
    f1f4:	2301      	movs	r3, #1
    f1f6:	e000      	b.n	f1fa <_ZN9CDC_Class9availableEv+0x22>
    f1f8:	2300      	movs	r3, #0
    f1fa:	2b00      	cmp	r3, #0
    f1fc:	d001      	beq.n	f202 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    f1fe:	2301      	movs	r3, #1
    f200:	e000      	b.n	f204 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    f202:	2300      	movs	r3, #0
	}
	
}
    f204:	4618      	mov	r0, r3
    f206:	370c      	adds	r7, #12
    f208:	46bd      	mov	sp, r7
    f20a:	bc80      	pop	{r7}
    f20c:	4770      	bx	lr
	...

0000f210 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    f210:	b580      	push	{r7, lr}
    f212:	b082      	sub	sp, #8
    f214:	af00      	add	r7, sp, #0
    f216:	6078      	str	r0, [r7, #4]
    f218:	6039      	str	r1, [r7, #0]
    f21a:	687b      	ldr	r3, [r7, #4]
    f21c:	2b01      	cmp	r3, #1
    f21e:	d10c      	bne.n	f23a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    f220:	683b      	ldr	r3, [r7, #0]
    f222:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f226:	4293      	cmp	r3, r2
    f228:	d107      	bne.n	f23a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    f22a:	4806      	ldr	r0, [pc, #24]	; (f244 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f22c:	4b06      	ldr	r3, [pc, #24]	; (f248 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    f22e:	4798      	blx	r3
    f230:	4a06      	ldr	r2, [pc, #24]	; (f24c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    f232:	4907      	ldr	r1, [pc, #28]	; (f250 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    f234:	4803      	ldr	r0, [pc, #12]	; (f244 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    f236:	4b07      	ldr	r3, [pc, #28]	; (f254 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    f238:	4798      	blx	r3
    f23a:	bf00      	nop
    f23c:	3708      	adds	r7, #8
    f23e:	46bd      	mov	sp, r7
    f240:	bd80      	pop	{r7, pc}
    f242:	bf00      	nop
    f244:	200011d4 	.word	0x200011d4
    f248:	0000edfd 	.word	0x0000edfd
    f24c:	20000000 	.word	0x20000000
    f250:	0000ee45 	.word	0x0000ee45
    f254:	0000fa9d 	.word	0x0000fa9d

0000f258 <_GLOBAL__sub_I_ptrCDCClass>:
    f258:	b580      	push	{r7, lr}
    f25a:	af00      	add	r7, sp, #0
    f25c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f260:	2001      	movs	r0, #1
    f262:	4b01      	ldr	r3, [pc, #4]	; (f268 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    f264:	4798      	blx	r3
    f266:	bd80      	pop	{r7, pc}
    f268:	0000f211 	.word	0x0000f211

0000f26c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    f26c:	b580      	push	{r7, lr}
    f26e:	b086      	sub	sp, #24
    f270:	af00      	add	r7, sp, #0
    f272:	60f8      	str	r0, [r7, #12]
    f274:	60b9      	str	r1, [r7, #8]
    f276:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    f278:	2300      	movs	r3, #0
    f27a:	617b      	str	r3, [r7, #20]
  while (size--) {
    f27c:	687b      	ldr	r3, [r7, #4]
    f27e:	1e5a      	subs	r2, r3, #1
    f280:	607a      	str	r2, [r7, #4]
    f282:	2b00      	cmp	r3, #0
    f284:	bf14      	ite	ne
    f286:	2301      	movne	r3, #1
    f288:	2300      	moveq	r3, #0
    f28a:	b2db      	uxtb	r3, r3
    f28c:	2b00      	cmp	r3, #0
    f28e:	d016      	beq.n	f2be <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    f290:	68fb      	ldr	r3, [r7, #12]
    f292:	681b      	ldr	r3, [r3, #0]
    f294:	681a      	ldr	r2, [r3, #0]
    f296:	68bb      	ldr	r3, [r7, #8]
    f298:	1c59      	adds	r1, r3, #1
    f29a:	60b9      	str	r1, [r7, #8]
    f29c:	781b      	ldrb	r3, [r3, #0]
    f29e:	4619      	mov	r1, r3
    f2a0:	68f8      	ldr	r0, [r7, #12]
    f2a2:	4790      	blx	r2
    f2a4:	4603      	mov	r3, r0
    f2a6:	2b00      	cmp	r3, #0
    f2a8:	bf14      	ite	ne
    f2aa:	2301      	movne	r3, #1
    f2ac:	2300      	moveq	r3, #0
    f2ae:	b2db      	uxtb	r3, r3
    f2b0:	2b00      	cmp	r3, #0
    f2b2:	d003      	beq.n	f2bc <_ZN5Print5writeEPKhj+0x50>
    f2b4:	697b      	ldr	r3, [r7, #20]
    f2b6:	3301      	adds	r3, #1
    f2b8:	617b      	str	r3, [r7, #20]
  while (size--) {
    f2ba:	e7df      	b.n	f27c <_ZN5Print5writeEPKhj+0x10>
    else break;
    f2bc:	bf00      	nop
  }
  return n;
    f2be:	697b      	ldr	r3, [r7, #20]
}
    f2c0:	4618      	mov	r0, r3
    f2c2:	3718      	adds	r7, #24
    f2c4:	46bd      	mov	sp, r7
    f2c6:	bd80      	pop	{r7, pc}

0000f2c8 <hri_port_read_DIR_reg>:
{
    f2c8:	b480      	push	{r7}
    f2ca:	b083      	sub	sp, #12
    f2cc:	af00      	add	r7, sp, #0
    f2ce:	6078      	str	r0, [r7, #4]
    f2d0:	460b      	mov	r3, r1
    f2d2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f2d4:	78fb      	ldrb	r3, [r7, #3]
    f2d6:	687a      	ldr	r2, [r7, #4]
    f2d8:	01db      	lsls	r3, r3, #7
    f2da:	4413      	add	r3, r2
    f2dc:	681b      	ldr	r3, [r3, #0]
}
    f2de:	4618      	mov	r0, r3
    f2e0:	370c      	adds	r7, #12
    f2e2:	46bd      	mov	sp, r7
    f2e4:	bc80      	pop	{r7}
    f2e6:	4770      	bx	lr

0000f2e8 <hri_port_read_OUT_reg>:
{
    f2e8:	b480      	push	{r7}
    f2ea:	b083      	sub	sp, #12
    f2ec:	af00      	add	r7, sp, #0
    f2ee:	6078      	str	r0, [r7, #4]
    f2f0:	460b      	mov	r3, r1
    f2f2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f2f4:	78fb      	ldrb	r3, [r7, #3]
    f2f6:	687a      	ldr	r2, [r7, #4]
    f2f8:	01db      	lsls	r3, r3, #7
    f2fa:	4413      	add	r3, r2
    f2fc:	3310      	adds	r3, #16
    f2fe:	681b      	ldr	r3, [r3, #0]
}
    f300:	4618      	mov	r0, r3
    f302:	370c      	adds	r7, #12
    f304:	46bd      	mov	sp, r7
    f306:	bc80      	pop	{r7}
    f308:	4770      	bx	lr

0000f30a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f30a:	b480      	push	{r7}
    f30c:	b083      	sub	sp, #12
    f30e:	af00      	add	r7, sp, #0
    f310:	6078      	str	r0, [r7, #4]
    f312:	460b      	mov	r3, r1
    f314:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f316:	78fb      	ldrb	r3, [r7, #3]
    f318:	687a      	ldr	r2, [r7, #4]
    f31a:	01db      	lsls	r3, r3, #7
    f31c:	4413      	add	r3, r2
    f31e:	3320      	adds	r3, #32
    f320:	681b      	ldr	r3, [r3, #0]
}
    f322:	4618      	mov	r0, r3
    f324:	370c      	adds	r7, #12
    f326:	46bd      	mov	sp, r7
    f328:	bc80      	pop	{r7}
    f32a:	4770      	bx	lr

0000f32c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f32c:	b580      	push	{r7, lr}
    f32e:	b086      	sub	sp, #24
    f330:	af00      	add	r7, sp, #0
    f332:	4603      	mov	r3, r0
    f334:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f336:	f107 030c 	add.w	r3, r7, #12
    f33a:	4618      	mov	r0, r3
    f33c:	4b13      	ldr	r3, [pc, #76]	; (f38c <_gpio_get_level+0x60>)
    f33e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f340:	79fb      	ldrb	r3, [r7, #7]
    f342:	4619      	mov	r1, r3
    f344:	4812      	ldr	r0, [pc, #72]	; (f390 <_gpio_get_level+0x64>)
    f346:	4b13      	ldr	r3, [pc, #76]	; (f394 <_gpio_get_level+0x68>)
    f348:	4798      	blx	r3
    f34a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f34c:	79fb      	ldrb	r3, [r7, #7]
    f34e:	4619      	mov	r1, r3
    f350:	480f      	ldr	r0, [pc, #60]	; (f390 <_gpio_get_level+0x64>)
    f352:	4b11      	ldr	r3, [pc, #68]	; (f398 <_gpio_get_level+0x6c>)
    f354:	4798      	blx	r3
    f356:	4602      	mov	r2, r0
    f358:	697b      	ldr	r3, [r7, #20]
    f35a:	43db      	mvns	r3, r3
    f35c:	4013      	ands	r3, r2
    f35e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f360:	79fb      	ldrb	r3, [r7, #7]
    f362:	4619      	mov	r1, r3
    f364:	480a      	ldr	r0, [pc, #40]	; (f390 <_gpio_get_level+0x64>)
    f366:	4b0d      	ldr	r3, [pc, #52]	; (f39c <_gpio_get_level+0x70>)
    f368:	4798      	blx	r3
    f36a:	4602      	mov	r2, r0
    f36c:	697b      	ldr	r3, [r7, #20]
    f36e:	4013      	ands	r3, r2
    f370:	693a      	ldr	r2, [r7, #16]
    f372:	4313      	orrs	r3, r2
    f374:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f376:	f107 030c 	add.w	r3, r7, #12
    f37a:	4618      	mov	r0, r3
    f37c:	4b08      	ldr	r3, [pc, #32]	; (f3a0 <_gpio_get_level+0x74>)
    f37e:	4798      	blx	r3

	return tmp;
    f380:	693b      	ldr	r3, [r7, #16]
}
    f382:	4618      	mov	r0, r3
    f384:	3718      	adds	r7, #24
    f386:	46bd      	mov	sp, r7
    f388:	bd80      	pop	{r7, pc}
    f38a:	bf00      	nop
    f38c:	0000bfc5 	.word	0x0000bfc5
    f390:	41008000 	.word	0x41008000
    f394:	0000f2c9 	.word	0x0000f2c9
    f398:	0000f30b 	.word	0x0000f30b
    f39c:	0000f2e9 	.word	0x0000f2e9
    f3a0:	0000bfeb 	.word	0x0000bfeb

0000f3a4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f3a4:	b580      	push	{r7, lr}
    f3a6:	b082      	sub	sp, #8
    f3a8:	af00      	add	r7, sp, #0
    f3aa:	4603      	mov	r3, r0
    f3ac:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f3ae:	79fb      	ldrb	r3, [r7, #7]
    f3b0:	115b      	asrs	r3, r3, #5
    f3b2:	b2db      	uxtb	r3, r3
    f3b4:	4618      	mov	r0, r3
    f3b6:	4b09      	ldr	r3, [pc, #36]	; (f3dc <gpio_get_pin_level+0x38>)
    f3b8:	4798      	blx	r3
    f3ba:	4601      	mov	r1, r0
    f3bc:	79fb      	ldrb	r3, [r7, #7]
    f3be:	f003 031f 	and.w	r3, r3, #31
    f3c2:	2201      	movs	r2, #1
    f3c4:	fa02 f303 	lsl.w	r3, r2, r3
    f3c8:	400b      	ands	r3, r1
    f3ca:	2b00      	cmp	r3, #0
    f3cc:	bf14      	ite	ne
    f3ce:	2301      	movne	r3, #1
    f3d0:	2300      	moveq	r3, #0
    f3d2:	b2db      	uxtb	r3, r3
}
    f3d4:	4618      	mov	r0, r3
    f3d6:	3708      	adds	r7, #8
    f3d8:	46bd      	mov	sp, r7
    f3da:	bd80      	pop	{r7, pc}
    f3dc:	0000f32d 	.word	0x0000f32d

0000f3e0 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    f3e0:	b480      	push	{r7}
    f3e2:	b083      	sub	sp, #12
    f3e4:	af00      	add	r7, sp, #0
    f3e6:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    f3e8:	4b06      	ldr	r3, [pc, #24]	; (f404 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f3ea:	681b      	ldr	r3, [r3, #0]
    f3ec:	2201      	movs	r2, #1
    f3ee:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    f3f0:	4b04      	ldr	r3, [pc, #16]	; (f404 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f3f2:	681b      	ldr	r3, [r3, #0]
    f3f4:	2200      	movs	r2, #0
    f3f6:	705a      	strb	r2, [r3, #1]
}
    f3f8:	bf00      	nop
    f3fa:	370c      	adds	r7, #12
    f3fc:	46bd      	mov	sp, r7
    f3fe:	bc80      	pop	{r7}
    f400:	4770      	bx	lr
    f402:	bf00      	nop
    f404:	20001234 	.word	0x20001234

0000f408 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    f408:	b580      	push	{r7, lr}
    f40a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    f40c:	2040      	movs	r0, #64	; 0x40
    f40e:	4b0a      	ldr	r3, [pc, #40]	; (f438 <_ZL10USBPluggedv+0x30>)
    f410:	4798      	blx	r3
    f412:	4603      	mov	r3, r0
    f414:	2b00      	cmp	r3, #0
    f416:	d004      	beq.n	f422 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    f418:	4b08      	ldr	r3, [pc, #32]	; (f43c <_ZL10USBPluggedv+0x34>)
    f41a:	681b      	ldr	r3, [r3, #0]
    f41c:	2201      	movs	r2, #1
    f41e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    f420:	e007      	b.n	f432 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    f422:	4b06      	ldr	r3, [pc, #24]	; (f43c <_ZL10USBPluggedv+0x34>)
    f424:	681b      	ldr	r3, [r3, #0]
    f426:	2200      	movs	r2, #0
    f428:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    f42a:	4b04      	ldr	r3, [pc, #16]	; (f43c <_ZL10USBPluggedv+0x34>)
    f42c:	681b      	ldr	r3, [r3, #0]
    f42e:	2200      	movs	r2, #0
    f430:	701a      	strb	r2, [r3, #0]
}
    f432:	bf00      	nop
    f434:	bd80      	pop	{r7, pc}
    f436:	bf00      	nop
    f438:	0000f3a5 	.word	0x0000f3a5
    f43c:	20001234 	.word	0x20001234

0000f440 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    f440:	b480      	push	{r7}
    f442:	b083      	sub	sp, #12
    f444:	af00      	add	r7, sp, #0
    f446:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    f448:	4a04      	ldr	r2, [pc, #16]	; (f45c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    f44a:	687b      	ldr	r3, [r7, #4]
    f44c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    f44e:	687b      	ldr	r3, [r7, #4]
    f450:	4618      	mov	r0, r3
    f452:	370c      	adds	r7, #12
    f454:	46bd      	mov	sp, r7
    f456:	bc80      	pop	{r7}
    f458:	4770      	bx	lr
    f45a:	bf00      	nop
    f45c:	20001234 	.word	0x20001234

0000f460 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    f460:	b480      	push	{r7}
    f462:	b083      	sub	sp, #12
    f464:	af00      	add	r7, sp, #0
    f466:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    f468:	687b      	ldr	r3, [r7, #4]
    f46a:	4618      	mov	r0, r3
    f46c:	370c      	adds	r7, #12
    f46e:	46bd      	mov	sp, r7
    f470:	bc80      	pop	{r7}
    f472:	4770      	bx	lr

0000f474 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    f474:	b580      	push	{r7, lr}
    f476:	b082      	sub	sp, #8
    f478:	af00      	add	r7, sp, #0
    f47a:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    f47c:	491f      	ldr	r1, [pc, #124]	; (f4fc <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    f47e:	2040      	movs	r0, #64	; 0x40
    f480:	4b1f      	ldr	r3, [pc, #124]	; (f500 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f482:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    f484:	481f      	ldr	r0, [pc, #124]	; (f504 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f486:	4b20      	ldr	r3, [pc, #128]	; (f508 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    f488:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    f48a:	2040      	movs	r0, #64	; 0x40
    f48c:	4b1f      	ldr	r3, [pc, #124]	; (f50c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    f48e:	4798      	blx	r3
    f490:	4603      	mov	r3, r0
    f492:	461a      	mov	r2, r3
    f494:	687b      	ldr	r3, [r7, #4]
    f496:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    f498:	687b      	ldr	r3, [r7, #4]
    f49a:	78db      	ldrb	r3, [r3, #3]
    f49c:	2b00      	cmp	r3, #0
    f49e:	d024      	beq.n	f4ea <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    f4a0:	687b      	ldr	r3, [r7, #4]
    f4a2:	2200      	movs	r2, #0
    f4a4:	709a      	strb	r2, [r3, #2]
			plugged=true;
    f4a6:	687b      	ldr	r3, [r7, #4]
    f4a8:	2201      	movs	r2, #1
    f4aa:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    f4ac:	f44f 7216 	mov.w	r2, #600	; 0x258
    f4b0:	4917      	ldr	r1, [pc, #92]	; (f510 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    f4b2:	4814      	ldr	r0, [pc, #80]	; (f504 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f4b4:	4b17      	ldr	r3, [pc, #92]	; (f514 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    f4b6:	4798      	blx	r3
			usbTerminalTimer.Start();
    f4b8:	4812      	ldr	r0, [pc, #72]	; (f504 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f4ba:	4b17      	ldr	r3, [pc, #92]	; (f518 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    f4bc:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    f4be:	4817      	ldr	r0, [pc, #92]	; (f51c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    f4c0:	4b17      	ldr	r3, [pc, #92]	; (f520 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    f4c2:	4798      	blx	r3
    f4c4:	4603      	mov	r3, r0
    f4c6:	f083 0301 	eor.w	r3, r3, #1
    f4ca:	b2db      	uxtb	r3, r3
    f4cc:	2b00      	cmp	r3, #0
    f4ce:	d008      	beq.n	f4e2 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    f4d0:	687b      	ldr	r3, [r7, #4]
    f4d2:	789b      	ldrb	r3, [r3, #2]
    f4d4:	b2db      	uxtb	r3, r3
    f4d6:	2b00      	cmp	r3, #0
    f4d8:	d0f1      	beq.n	f4be <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    f4da:	687b      	ldr	r3, [r7, #4]
    f4dc:	2200      	movs	r2, #0
    f4de:	701a      	strb	r2, [r3, #0]
					return;
    f4e0:	e009      	b.n	f4f6 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    f4e2:	4808      	ldr	r0, [pc, #32]	; (f504 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f4e4:	4b0f      	ldr	r3, [pc, #60]	; (f524 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    f4e6:	4798      	blx	r3
    f4e8:	e005      	b.n	f4f6 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    f4ea:	687b      	ldr	r3, [r7, #4]
    f4ec:	2200      	movs	r2, #0
    f4ee:	701a      	strb	r2, [r3, #0]
			plugged=false;
    f4f0:	687b      	ldr	r3, [r7, #4]
    f4f2:	2200      	movs	r2, #0
    f4f4:	705a      	strb	r2, [r3, #1]
		}
		
}
    f4f6:	3708      	adds	r7, #8
    f4f8:	46bd      	mov	sp, r7
    f4fa:	bd80      	pop	{r7, pc}
    f4fc:	0000f409 	.word	0x0000f409
    f500:	0000269d 	.word	0x0000269d
    f504:	2000128c 	.word	0x2000128c
    f508:	0000f5a5 	.word	0x0000f5a5
    f50c:	0000f3a5 	.word	0x0000f3a5
    f510:	0000f3e1 	.word	0x0000f3e1
    f514:	0000f6b9 	.word	0x0000f6b9
    f518:	0000f5dd 	.word	0x0000f5dd
    f51c:	200011d4 	.word	0x200011d4
    f520:	0000eeb5 	.word	0x0000eeb5
    f524:	0000f601 	.word	0x0000f601

0000f528 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    f528:	b580      	push	{r7, lr}
    f52a:	b082      	sub	sp, #8
    f52c:	af00      	add	r7, sp, #0
    f52e:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    f530:	4b04      	ldr	r3, [pc, #16]	; (f544 <_ZL7task_cbPK10timer_task+0x1c>)
    f532:	681b      	ldr	r3, [r3, #0]
    f534:	4618      	mov	r0, r3
    f536:	4b04      	ldr	r3, [pc, #16]	; (f548 <_ZL7task_cbPK10timer_task+0x20>)
    f538:	4798      	blx	r3
}
    f53a:	bf00      	nop
    f53c:	3708      	adds	r7, #8
    f53e:	46bd      	mov	sp, r7
    f540:	bd80      	pop	{r7, pc}
    f542:	bf00      	nop
    f544:	20001238 	.word	0x20001238
    f548:	0000f629 	.word	0x0000f629

0000f54c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    f54c:	b480      	push	{r7}
    f54e:	b083      	sub	sp, #12
    f550:	af00      	add	r7, sp, #0
    f552:	6078      	str	r0, [r7, #4]
    f554:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    f556:	687b      	ldr	r3, [r7, #4]
    f558:	683a      	ldr	r2, [r7, #0]
    f55a:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    f55c:	4a08      	ldr	r2, [pc, #32]	; (f580 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    f55e:	687b      	ldr	r3, [r7, #4]
    f560:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    f562:	687b      	ldr	r3, [r7, #4]
    f564:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f568:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    f56a:	687b      	ldr	r3, [r7, #4]
    f56c:	689b      	ldr	r3, [r3, #8]
    f56e:	4a05      	ldr	r2, [pc, #20]	; (f584 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    f570:	60da      	str	r2, [r3, #12]
} //Timer_Class
    f572:	687b      	ldr	r3, [r7, #4]
    f574:	4618      	mov	r0, r3
    f576:	370c      	adds	r7, #12
    f578:	46bd      	mov	sp, r7
    f57a:	bc80      	pop	{r7}
    f57c:	4770      	bx	lr
    f57e:	bf00      	nop
    f580:	20001238 	.word	0x20001238
    f584:	0000f529 	.word	0x0000f529

0000f588 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    f588:	b480      	push	{r7}
    f58a:	b083      	sub	sp, #12
    f58c:	af00      	add	r7, sp, #0
    f58e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    f590:	687b      	ldr	r3, [r7, #4]
    f592:	2200      	movs	r2, #0
    f594:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    f596:	687b      	ldr	r3, [r7, #4]
    f598:	4618      	mov	r0, r3
    f59a:	370c      	adds	r7, #12
    f59c:	46bd      	mov	sp, r7
    f59e:	bc80      	pop	{r7}
    f5a0:	4770      	bx	lr
	...

0000f5a4 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    f5a4:	b580      	push	{r7, lr}
    f5a6:	b082      	sub	sp, #8
    f5a8:	af00      	add	r7, sp, #0
    f5aa:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    f5ac:	687b      	ldr	r3, [r7, #4]
    f5ae:	2200      	movs	r2, #0
    f5b0:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    f5b2:	6878      	ldr	r0, [r7, #4]
    f5b4:	4b08      	ldr	r3, [pc, #32]	; (f5d8 <_ZN17TimerSerial_Class4InitEv+0x34>)
    f5b6:	4798      	blx	r3
    f5b8:	4603      	mov	r3, r0
    f5ba:	2b00      	cmp	r3, #0
    f5bc:	bf0c      	ite	eq
    f5be:	2301      	moveq	r3, #1
    f5c0:	2300      	movne	r3, #0
    f5c2:	b2da      	uxtb	r2, r3
    f5c4:	687b      	ldr	r3, [r7, #4]
    f5c6:	709a      	strb	r2, [r3, #2]
	return isOK;
    f5c8:	687b      	ldr	r3, [r7, #4]
    f5ca:	789b      	ldrb	r3, [r3, #2]
    f5cc:	b2db      	uxtb	r3, r3
}
    f5ce:	4618      	mov	r0, r3
    f5d0:	3708      	adds	r7, #8
    f5d2:	46bd      	mov	sp, r7
    f5d4:	bd80      	pop	{r7, pc}
    f5d6:	bf00      	nop
    f5d8:	0000f5dd 	.word	0x0000f5dd

0000f5dc <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    f5dc:	b580      	push	{r7, lr}
    f5de:	b084      	sub	sp, #16
    f5e0:	af00      	add	r7, sp, #0
    f5e2:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    f5e4:	687b      	ldr	r3, [r7, #4]
    f5e6:	691b      	ldr	r3, [r3, #16]
    f5e8:	4618      	mov	r0, r3
    f5ea:	4b04      	ldr	r3, [pc, #16]	; (f5fc <_ZN17TimerSerial_Class5StartEv+0x20>)
    f5ec:	4798      	blx	r3
    f5ee:	60f8      	str	r0, [r7, #12]
	return status;
    f5f0:	68fb      	ldr	r3, [r7, #12]
	
}
    f5f2:	4618      	mov	r0, r3
    f5f4:	3710      	adds	r7, #16
    f5f6:	46bd      	mov	sp, r7
    f5f8:	bd80      	pop	{r7, pc}
    f5fa:	bf00      	nop
    f5fc:	000030d1 	.word	0x000030d1

0000f600 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    f600:	b580      	push	{r7, lr}
    f602:	b084      	sub	sp, #16
    f604:	af00      	add	r7, sp, #0
    f606:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    f608:	687b      	ldr	r3, [r7, #4]
    f60a:	691b      	ldr	r3, [r3, #16]
    f60c:	4618      	mov	r0, r3
    f60e:	4b05      	ldr	r3, [pc, #20]	; (f624 <_ZN17TimerSerial_Class4StopEv+0x24>)
    f610:	4798      	blx	r3
    f612:	60f8      	str	r0, [r7, #12]
	timeout=0;
    f614:	687b      	ldr	r3, [r7, #4]
    f616:	2200      	movs	r2, #0
    f618:	705a      	strb	r2, [r3, #1]
	return status;
    f61a:	68fb      	ldr	r3, [r7, #12]
}
    f61c:	4618      	mov	r0, r3
    f61e:	3710      	adds	r7, #16
    f620:	46bd      	mov	sp, r7
    f622:	bd80      	pop	{r7, pc}
    f624:	00003139 	.word	0x00003139

0000f628 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    f628:	b480      	push	{r7}
    f62a:	b083      	sub	sp, #12
    f62c:	af00      	add	r7, sp, #0
    f62e:	6078      	str	r0, [r7, #4]
	timeout=1;
    f630:	687b      	ldr	r3, [r7, #4]
    f632:	2201      	movs	r2, #1
    f634:	705a      	strb	r2, [r3, #1]
}
    f636:	bf00      	nop
    f638:	370c      	adds	r7, #12
    f63a:	46bd      	mov	sp, r7
    f63c:	bc80      	pop	{r7}
    f63e:	4770      	bx	lr

0000f640 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    f640:	b580      	push	{r7, lr}
    f642:	b086      	sub	sp, #24
    f644:	af00      	add	r7, sp, #0
    f646:	60f8      	str	r0, [r7, #12]
    f648:	60b9      	str	r1, [r7, #8]
    f64a:	607a      	str	r2, [r7, #4]
    f64c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    f64e:	68f8      	ldr	r0, [r7, #12]
    f650:	4b0d      	ldr	r3, [pc, #52]	; (f688 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    f652:	4798      	blx	r3
	task->interval = interval;
    f654:	68fb      	ldr	r3, [r7, #12]
    f656:	689b      	ldr	r3, [r3, #8]
    f658:	687a      	ldr	r2, [r7, #4]
    f65a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    f65c:	68fb      	ldr	r3, [r7, #12]
    f65e:	689b      	ldr	r3, [r3, #8]
    f660:	68ba      	ldr	r2, [r7, #8]
    f662:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    f664:	68fb      	ldr	r3, [r7, #12]
    f666:	689b      	ldr	r3, [r3, #8]
    f668:	78fa      	ldrb	r2, [r7, #3]
    f66a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    f66c:	68fb      	ldr	r3, [r7, #12]
    f66e:	691a      	ldr	r2, [r3, #16]
    f670:	68fb      	ldr	r3, [r7, #12]
    f672:	689b      	ldr	r3, [r3, #8]
    f674:	4619      	mov	r1, r3
    f676:	4610      	mov	r0, r2
    f678:	4b04      	ldr	r3, [pc, #16]	; (f68c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    f67a:	4798      	blx	r3
    f67c:	6178      	str	r0, [r7, #20]
	
	return status;
    f67e:	697b      	ldr	r3, [r7, #20]
}
    f680:	4618      	mov	r0, r3
    f682:	3718      	adds	r7, #24
    f684:	46bd      	mov	sp, r7
    f686:	bd80      	pop	{r7, pc}
    f688:	0000f79d 	.word	0x0000f79d
    f68c:	000031a5 	.word	0x000031a5

0000f690 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    f690:	b590      	push	{r4, r7, lr}
    f692:	b087      	sub	sp, #28
    f694:	af00      	add	r7, sp, #0
    f696:	60f8      	str	r0, [r7, #12]
    f698:	60b9      	str	r1, [r7, #8]
    f69a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    f69c:	2301      	movs	r3, #1
    f69e:	687a      	ldr	r2, [r7, #4]
    f6a0:	68b9      	ldr	r1, [r7, #8]
    f6a2:	68f8      	ldr	r0, [r7, #12]
    f6a4:	4c03      	ldr	r4, [pc, #12]	; (f6b4 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
    f6a6:	47a0      	blx	r4
    f6a8:	6178      	str	r0, [r7, #20]
		return status;
    f6aa:	697b      	ldr	r3, [r7, #20]
}
    f6ac:	4618      	mov	r0, r3
    f6ae:	371c      	adds	r7, #28
    f6b0:	46bd      	mov	sp, r7
    f6b2:	bd90      	pop	{r4, r7, pc}
    f6b4:	0000f641 	.word	0x0000f641

0000f6b8 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    f6b8:	b590      	push	{r4, r7, lr}
    f6ba:	b087      	sub	sp, #28
    f6bc:	af00      	add	r7, sp, #0
    f6be:	60f8      	str	r0, [r7, #12]
    f6c0:	60b9      	str	r1, [r7, #8]
    f6c2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f6c4:	2300      	movs	r3, #0
    f6c6:	687a      	ldr	r2, [r7, #4]
    f6c8:	68b9      	ldr	r1, [r7, #8]
    f6ca:	68f8      	ldr	r0, [r7, #12]
    f6cc:	4c03      	ldr	r4, [pc, #12]	; (f6dc <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    f6ce:	47a0      	blx	r4
    f6d0:	6178      	str	r0, [r7, #20]
	return status;
    f6d2:	697b      	ldr	r3, [r7, #20]
}
    f6d4:	4618      	mov	r0, r3
    f6d6:	371c      	adds	r7, #28
    f6d8:	46bd      	mov	sp, r7
    f6da:	bd90      	pop	{r4, r7, pc}
    f6dc:	0000f641 	.word	0x0000f641

0000f6e0 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    f6e0:	b590      	push	{r4, r7, lr}
    f6e2:	b087      	sub	sp, #28
    f6e4:	af00      	add	r7, sp, #0
    f6e6:	60f8      	str	r0, [r7, #12]
    f6e8:	60b9      	str	r1, [r7, #8]
    f6ea:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f6ec:	2300      	movs	r3, #0
    f6ee:	687a      	ldr	r2, [r7, #4]
    f6f0:	68b9      	ldr	r1, [r7, #8]
    f6f2:	68f8      	ldr	r0, [r7, #12]
    f6f4:	4c06      	ldr	r4, [pc, #24]	; (f710 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    f6f6:	47a0      	blx	r4
    f6f8:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    f6fa:	68fb      	ldr	r3, [r7, #12]
    f6fc:	691b      	ldr	r3, [r3, #16]
    f6fe:	4618      	mov	r0, r3
    f700:	4b04      	ldr	r3, [pc, #16]	; (f714 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    f702:	4798      	blx	r3
    f704:	6178      	str	r0, [r7, #20]
	return status;
    f706:	697b      	ldr	r3, [r7, #20]
}
    f708:	4618      	mov	r0, r3
    f70a:	371c      	adds	r7, #28
    f70c:	46bd      	mov	sp, r7
    f70e:	bd90      	pop	{r4, r7, pc}
    f710:	0000f641 	.word	0x0000f641
    f714:	000030d1 	.word	0x000030d1

0000f718 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
    f718:	b580      	push	{r7, lr}
    f71a:	b082      	sub	sp, #8
    f71c:	af00      	add	r7, sp, #0
    f71e:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    f720:	687b      	ldr	r3, [r7, #4]
    f722:	691a      	ldr	r2, [r3, #16]
    f724:	687b      	ldr	r3, [r7, #4]
    f726:	689b      	ldr	r3, [r3, #8]
    f728:	4619      	mov	r1, r3
    f72a:	4610      	mov	r0, r2
    f72c:	4b04      	ldr	r3, [pc, #16]	; (f740 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
    f72e:	4798      	blx	r3
	task->cb=NULL;
    f730:	687b      	ldr	r3, [r7, #4]
    f732:	689b      	ldr	r3, [r3, #8]
    f734:	2200      	movs	r2, #0
    f736:	60da      	str	r2, [r3, #12]
}
    f738:	bf00      	nop
    f73a:	3708      	adds	r7, #8
    f73c:	46bd      	mov	sp, r7
    f73e:	bd80      	pop	{r7, pc}
    f740:	000032a9 	.word	0x000032a9

0000f744 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    f744:	b580      	push	{r7, lr}
    f746:	b082      	sub	sp, #8
    f748:	af00      	add	r7, sp, #0
    f74a:	6078      	str	r0, [r7, #4]
    f74c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    f74e:	6839      	ldr	r1, [r7, #0]
    f750:	6878      	ldr	r0, [r7, #4]
    f752:	4b0f      	ldr	r3, [pc, #60]	; (f790 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    f754:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    f756:	687b      	ldr	r3, [r7, #4]
    f758:	691b      	ldr	r3, [r3, #16]
    f75a:	f103 0218 	add.w	r2, r3, #24
    f75e:	687b      	ldr	r3, [r7, #4]
    f760:	689b      	ldr	r3, [r3, #8]
    f762:	4619      	mov	r1, r3
    f764:	4610      	mov	r0, r2
    f766:	4b0b      	ldr	r3, [pc, #44]	; (f794 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    f768:	4798      	blx	r3
    f76a:	4603      	mov	r3, r0
    f76c:	2b00      	cmp	r3, #0
    f76e:	d007      	beq.n	f780 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    f770:	687b      	ldr	r3, [r7, #4]
    f772:	691a      	ldr	r2, [r3, #16]
    f774:	687b      	ldr	r3, [r7, #4]
    f776:	689b      	ldr	r3, [r3, #8]
    f778:	4619      	mov	r1, r3
    f77a:	4610      	mov	r0, r2
    f77c:	4b06      	ldr	r3, [pc, #24]	; (f798 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    f77e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    f780:	687b      	ldr	r3, [r7, #4]
    f782:	689b      	ldr	r3, [r3, #8]
    f784:	2200      	movs	r2, #0
    f786:	60da      	str	r2, [r3, #12]
}
    f788:	bf00      	nop
    f78a:	3708      	adds	r7, #8
    f78c:	46bd      	mov	sp, r7
    f78e:	bd80      	pop	{r7, pc}
    f790:	0000f7f5 	.word	0x0000f7f5
    f794:	00003e91 	.word	0x00003e91
    f798:	000032a9 	.word	0x000032a9

0000f79c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    f79c:	b480      	push	{r7}
    f79e:	b085      	sub	sp, #20
    f7a0:	af00      	add	r7, sp, #0
    f7a2:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f7a4:	2300      	movs	r3, #0
    f7a6:	73fb      	strb	r3, [r7, #15]
    f7a8:	7bfb      	ldrb	r3, [r7, #15]
    f7aa:	2b03      	cmp	r3, #3
    f7ac:	dc18      	bgt.n	f7e0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    f7ae:	7bfa      	ldrb	r2, [r7, #15]
    f7b0:	490f      	ldr	r1, [pc, #60]	; (f7f0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f7b2:	4613      	mov	r3, r2
    f7b4:	009b      	lsls	r3, r3, #2
    f7b6:	4413      	add	r3, r2
    f7b8:	009b      	lsls	r3, r3, #2
    f7ba:	440b      	add	r3, r1
    f7bc:	330c      	adds	r3, #12
    f7be:	681b      	ldr	r3, [r3, #0]
    f7c0:	2b00      	cmp	r3, #0
    f7c2:	d109      	bne.n	f7d8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    f7c4:	7bfa      	ldrb	r2, [r7, #15]
    f7c6:	4613      	mov	r3, r2
    f7c8:	009b      	lsls	r3, r3, #2
    f7ca:	4413      	add	r3, r2
    f7cc:	009b      	lsls	r3, r3, #2
    f7ce:	4a08      	ldr	r2, [pc, #32]	; (f7f0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f7d0:	441a      	add	r2, r3
    f7d2:	687b      	ldr	r3, [r7, #4]
    f7d4:	609a      	str	r2, [r3, #8]
			return;
    f7d6:	e006      	b.n	f7e6 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f7d8:	7bfb      	ldrb	r3, [r7, #15]
    f7da:	3301      	adds	r3, #1
    f7dc:	73fb      	strb	r3, [r7, #15]
    f7de:	e7e3      	b.n	f7a8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    f7e0:	687b      	ldr	r3, [r7, #4]
    f7e2:	4a03      	ldr	r2, [pc, #12]	; (f7f0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f7e4:	609a      	str	r2, [r3, #8]

}
    f7e6:	3714      	adds	r7, #20
    f7e8:	46bd      	mov	sp, r7
    f7ea:	bc80      	pop	{r7}
    f7ec:	4770      	bx	lr
    f7ee:	bf00      	nop
    f7f0:	2000123c 	.word	0x2000123c

0000f7f4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    f7f4:	b480      	push	{r7}
    f7f6:	b085      	sub	sp, #20
    f7f8:	af00      	add	r7, sp, #0
    f7fa:	6078      	str	r0, [r7, #4]
    f7fc:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f7fe:	2300      	movs	r3, #0
    f800:	73fb      	strb	r3, [r7, #15]
    f802:	7bfb      	ldrb	r3, [r7, #15]
    f804:	2b03      	cmp	r3, #3
    f806:	dc19      	bgt.n	f83c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    f808:	7bfa      	ldrb	r2, [r7, #15]
    f80a:	490e      	ldr	r1, [pc, #56]	; (f844 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    f80c:	4613      	mov	r3, r2
    f80e:	009b      	lsls	r3, r3, #2
    f810:	4413      	add	r3, r2
    f812:	009b      	lsls	r3, r3, #2
    f814:	440b      	add	r3, r1
    f816:	330c      	adds	r3, #12
    f818:	681a      	ldr	r2, [r3, #0]
    f81a:	683b      	ldr	r3, [r7, #0]
    f81c:	429a      	cmp	r2, r3
    f81e:	d109      	bne.n	f834 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    f820:	7bfa      	ldrb	r2, [r7, #15]
    f822:	4613      	mov	r3, r2
    f824:	009b      	lsls	r3, r3, #2
    f826:	4413      	add	r3, r2
    f828:	009b      	lsls	r3, r3, #2
    f82a:	4a06      	ldr	r2, [pc, #24]	; (f844 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    f82c:	441a      	add	r2, r3
    f82e:	687b      	ldr	r3, [r7, #4]
    f830:	609a      	str	r2, [r3, #8]
			return;
    f832:	e003      	b.n	f83c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f834:	7bfb      	ldrb	r3, [r7, #15]
    f836:	3301      	adds	r3, #1
    f838:	73fb      	strb	r3, [r7, #15]
    f83a:	e7e2      	b.n	f802 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    f83c:	3714      	adds	r7, #20
    f83e:	46bd      	mov	sp, r7
    f840:	bc80      	pop	{r7}
    f842:	4770      	bx	lr
    f844:	2000123c 	.word	0x2000123c

0000f848 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f848:	b580      	push	{r7, lr}
    f84a:	b082      	sub	sp, #8
    f84c:	af00      	add	r7, sp, #0
    f84e:	6078      	str	r0, [r7, #4]
    f850:	6039      	str	r1, [r7, #0]
    f852:	687b      	ldr	r3, [r7, #4]
    f854:	2b01      	cmp	r3, #1
    f856:	d116      	bne.n	f886 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    f858:	683b      	ldr	r3, [r7, #0]
    f85a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f85e:	4293      	cmp	r3, r2
    f860:	d111      	bne.n	f886 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    f862:	490b      	ldr	r1, [pc, #44]	; (f890 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    f864:	480b      	ldr	r0, [pc, #44]	; (f894 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f866:	4b0c      	ldr	r3, [pc, #48]	; (f898 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f868:	4798      	blx	r3
    f86a:	4a0c      	ldr	r2, [pc, #48]	; (f89c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f86c:	490c      	ldr	r1, [pc, #48]	; (f8a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f86e:	4809      	ldr	r0, [pc, #36]	; (f894 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f870:	4b0c      	ldr	r3, [pc, #48]	; (f8a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f872:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f874:	490c      	ldr	r1, [pc, #48]	; (f8a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f876:	480d      	ldr	r0, [pc, #52]	; (f8ac <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f878:	4b07      	ldr	r3, [pc, #28]	; (f898 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f87a:	4798      	blx	r3
    f87c:	4a07      	ldr	r2, [pc, #28]	; (f89c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f87e:	4908      	ldr	r1, [pc, #32]	; (f8a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f880:	480a      	ldr	r0, [pc, #40]	; (f8ac <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f882:	4b08      	ldr	r3, [pc, #32]	; (f8a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f884:	4798      	blx	r3
    f886:	bf00      	nop
    f888:	3708      	adds	r7, #8
    f88a:	46bd      	mov	sp, r7
    f88c:	bd80      	pop	{r7, pc}
    f88e:	bf00      	nop
    f890:	20001428 	.word	0x20001428
    f894:	2000128c 	.word	0x2000128c
    f898:	0000f54d 	.word	0x0000f54d
    f89c:	20000000 	.word	0x20000000
    f8a0:	0000f589 	.word	0x0000f589
    f8a4:	0000fa9d 	.word	0x0000fa9d
    f8a8:	20001360 	.word	0x20001360
    f8ac:	200012ac 	.word	0x200012ac

0000f8b0 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    f8b0:	b580      	push	{r7, lr}
    f8b2:	af00      	add	r7, sp, #0
    f8b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f8b8:	2001      	movs	r0, #1
    f8ba:	4b01      	ldr	r3, [pc, #4]	; (f8c0 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    f8bc:	4798      	blx	r3
    f8be:	bd80      	pop	{r7, pc}
    f8c0:	0000f849 	.word	0x0000f849

0000f8c4 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    f8c4:	b480      	push	{r7}
    f8c6:	b083      	sub	sp, #12
    f8c8:	af00      	add	r7, sp, #0
    f8ca:	6078      	str	r0, [r7, #4]
    return (void *)0;
    f8cc:	2300      	movs	r3, #0
	}
    f8ce:	4618      	mov	r0, r3
    f8d0:	370c      	adds	r7, #12
    f8d2:	46bd      	mov	sp, r7
    f8d4:	bc80      	pop	{r7}
    f8d6:	4770      	bx	lr

0000f8d8 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    f8d8:	b480      	push	{r7}
    f8da:	af00      	add	r7, sp, #0
		}
    f8dc:	bf00      	nop
    f8de:	46bd      	mov	sp, r7
    f8e0:	bc80      	pop	{r7}
    f8e2:	4770      	bx	lr

0000f8e4 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    f8e4:	b480      	push	{r7}
    f8e6:	b083      	sub	sp, #12
    f8e8:	af00      	add	r7, sp, #0
    f8ea:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    f8ec:	4a04      	ldr	r2, [pc, #16]	; (f900 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    f8ee:	687b      	ldr	r3, [r7, #4]
    f8f0:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    f8f2:	687b      	ldr	r3, [r7, #4]
    f8f4:	4618      	mov	r0, r3
    f8f6:	370c      	adds	r7, #12
    f8f8:	46bd      	mov	sp, r7
    f8fa:	bc80      	pop	{r7}
    f8fc:	4770      	bx	lr
    f8fe:	bf00      	nop
    f900:	200012cc 	.word	0x200012cc

0000f904 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    f904:	b480      	push	{r7}
    f906:	b083      	sub	sp, #12
    f908:	af00      	add	r7, sp, #0
    f90a:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    f90c:	687b      	ldr	r3, [r7, #4]
    f90e:	4618      	mov	r0, r3
    f910:	370c      	adds	r7, #12
    f912:	46bd      	mov	sp, r7
    f914:	bc80      	pop	{r7}
    f916:	4770      	bx	lr

0000f918 <_ZN13SPI_Syn_Class6EnableEv>:
	ptrSPISync=this;
	SPI=spiDesc;
}


int32_t SPI_Syn_Class::Enable(){
    f918:	b580      	push	{r7, lr}
    f91a:	b082      	sub	sp, #8
    f91c:	af00      	add	r7, sp, #0
    f91e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    f920:	687b      	ldr	r3, [r7, #4]
    f922:	68da      	ldr	r2, [r3, #12]
    f924:	687b      	ldr	r3, [r7, #4]
    f926:	3310      	adds	r3, #16
    f928:	4619      	mov	r1, r3
    f92a:	4610      	mov	r0, r2
    f92c:	4b07      	ldr	r3, [pc, #28]	; (f94c <_ZN13SPI_Syn_Class6EnableEv+0x34>)
    f92e:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    f930:	687b      	ldr	r3, [r7, #4]
    f932:	68db      	ldr	r3, [r3, #12]
    f934:	4618      	mov	r0, r3
    f936:	4b06      	ldr	r3, [pc, #24]	; (f950 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
    f938:	4798      	blx	r3
	ready=true;
    f93a:	687b      	ldr	r3, [r7, #4]
    f93c:	2201      	movs	r2, #1
    f93e:	701a      	strb	r2, [r3, #0]
	return 0;
    f940:	2300      	movs	r3, #0
}
    f942:	4618      	mov	r0, r3
    f944:	3708      	adds	r7, #8
    f946:	46bd      	mov	sp, r7
    f948:	bd80      	pop	{r7, pc}
    f94a:	bf00      	nop
    f94c:	00002fe1 	.word	0x00002fe1
    f950:	00002e55 	.word	0x00002e55

0000f954 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
    f954:	b580      	push	{r7, lr}
    f956:	b086      	sub	sp, #24
    f958:	af00      	add	r7, sp, #0
    f95a:	60f8      	str	r0, [r7, #12]
    f95c:	60b9      	str	r1, [r7, #8]
    f95e:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    f960:	68fb      	ldr	r3, [r7, #12]
    f962:	2201      	movs	r2, #1
    f964:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
    f966:	68fb      	ldr	r3, [r7, #12]
    f968:	691b      	ldr	r3, [r3, #16]
    f96a:	687a      	ldr	r2, [r7, #4]
    f96c:	b292      	uxth	r2, r2
    f96e:	68b9      	ldr	r1, [r7, #8]
    f970:	4618      	mov	r0, r3
    f972:	4b08      	ldr	r3, [pc, #32]	; (f994 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
    f974:	4798      	blx	r3
    f976:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    f978:	697b      	ldr	r3, [r7, #20]
    f97a:	2b00      	cmp	r3, #0
    f97c:	bf14      	ite	ne
    f97e:	2301      	movne	r3, #1
    f980:	2300      	moveq	r3, #0
    f982:	b2da      	uxtb	r2, r3
    f984:	68fb      	ldr	r3, [r7, #12]
    f986:	761a      	strb	r2, [r3, #24]
	 return w;
    f988:	697b      	ldr	r3, [r7, #20]
	
}
    f98a:	4618      	mov	r0, r3
    f98c:	3718      	adds	r7, #24
    f98e:	46bd      	mov	sp, r7
    f990:	bd80      	pop	{r7, pc}
    f992:	bf00      	nop
    f994:	0000f9fd 	.word	0x0000f9fd

0000f998 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
    f998:	b580      	push	{r7, lr}
    f99a:	b086      	sub	sp, #24
    f99c:	af00      	add	r7, sp, #0
    f99e:	60f8      	str	r0, [r7, #12]
    f9a0:	60b9      	str	r1, [r7, #8]
    f9a2:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    f9a4:	68fb      	ldr	r3, [r7, #12]
    f9a6:	2201      	movs	r2, #1
    f9a8:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
    f9aa:	68fb      	ldr	r3, [r7, #12]
    f9ac:	691b      	ldr	r3, [r3, #16]
    f9ae:	687a      	ldr	r2, [r7, #4]
    f9b0:	b292      	uxth	r2, r2
    f9b2:	68b9      	ldr	r1, [r7, #8]
    f9b4:	4618      	mov	r0, r3
    f9b6:	4b08      	ldr	r3, [pc, #32]	; (f9d8 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
    f9b8:	4798      	blx	r3
    f9ba:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    f9bc:	697b      	ldr	r3, [r7, #20]
    f9be:	2b00      	cmp	r3, #0
    f9c0:	bf14      	ite	ne
    f9c2:	2301      	movne	r3, #1
    f9c4:	2300      	moveq	r3, #0
    f9c6:	b2da      	uxtb	r2, r3
    f9c8:	68fb      	ldr	r3, [r7, #12]
    f9ca:	765a      	strb	r2, [r3, #25]
	return  r;
    f9cc:	697b      	ldr	r3, [r7, #20]
}
    f9ce:	4618      	mov	r0, r3
    f9d0:	3718      	adds	r7, #24
    f9d2:	46bd      	mov	sp, r7
    f9d4:	bd80      	pop	{r7, pc}
    f9d6:	bf00      	nop
    f9d8:	0000fa4d 	.word	0x0000fa4d

0000f9dc <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
    f9dc:	b580      	push	{r7, lr}
    f9de:	b082      	sub	sp, #8
    f9e0:	af00      	add	r7, sp, #0
    f9e2:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    f9e4:	687b      	ldr	r3, [r7, #4]
    f9e6:	68db      	ldr	r3, [r3, #12]
    f9e8:	4618      	mov	r0, r3
    f9ea:	4b03      	ldr	r3, [pc, #12]	; (f9f8 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
    f9ec:	4798      	blx	r3
	
}
    f9ee:	bf00      	nop
    f9f0:	3708      	adds	r7, #8
    f9f2:	46bd      	mov	sp, r7
    f9f4:	bd80      	pop	{r7, pc}
    f9f6:	bf00      	nop
    f9f8:	00002e91 	.word	0x00002e91

0000f9fc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    f9fc:	b580      	push	{r7, lr}
    f9fe:	b084      	sub	sp, #16
    fa00:	af00      	add	r7, sp, #0
    fa02:	60f8      	str	r0, [r7, #12]
    fa04:	60b9      	str	r1, [r7, #8]
    fa06:	4613      	mov	r3, r2
    fa08:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    fa0a:	68fb      	ldr	r3, [r7, #12]
    fa0c:	2b00      	cmp	r3, #0
    fa0e:	d004      	beq.n	fa1a <io_write+0x1e>
    fa10:	68bb      	ldr	r3, [r7, #8]
    fa12:	2b00      	cmp	r3, #0
    fa14:	d001      	beq.n	fa1a <io_write+0x1e>
    fa16:	2301      	movs	r3, #1
    fa18:	e000      	b.n	fa1c <io_write+0x20>
    fa1a:	2300      	movs	r3, #0
    fa1c:	f003 0301 	and.w	r3, r3, #1
    fa20:	b2db      	uxtb	r3, r3
    fa22:	2234      	movs	r2, #52	; 0x34
    fa24:	4907      	ldr	r1, [pc, #28]	; (fa44 <io_write+0x48>)
    fa26:	4618      	mov	r0, r3
    fa28:	4b07      	ldr	r3, [pc, #28]	; (fa48 <io_write+0x4c>)
    fa2a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    fa2c:	68fb      	ldr	r3, [r7, #12]
    fa2e:	681b      	ldr	r3, [r3, #0]
    fa30:	88fa      	ldrh	r2, [r7, #6]
    fa32:	68b9      	ldr	r1, [r7, #8]
    fa34:	68f8      	ldr	r0, [r7, #12]
    fa36:	4798      	blx	r3
    fa38:	4603      	mov	r3, r0
}
    fa3a:	4618      	mov	r0, r3
    fa3c:	3710      	adds	r7, #16
    fa3e:	46bd      	mov	sp, r7
    fa40:	bd80      	pop	{r7, pc}
    fa42:	bf00      	nop
    fa44:	000102b4 	.word	0x000102b4
    fa48:	00003e69 	.word	0x00003e69

0000fa4c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    fa4c:	b580      	push	{r7, lr}
    fa4e:	b084      	sub	sp, #16
    fa50:	af00      	add	r7, sp, #0
    fa52:	60f8      	str	r0, [r7, #12]
    fa54:	60b9      	str	r1, [r7, #8]
    fa56:	4613      	mov	r3, r2
    fa58:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    fa5a:	68fb      	ldr	r3, [r7, #12]
    fa5c:	2b00      	cmp	r3, #0
    fa5e:	d004      	beq.n	fa6a <io_read+0x1e>
    fa60:	68bb      	ldr	r3, [r7, #8]
    fa62:	2b00      	cmp	r3, #0
    fa64:	d001      	beq.n	fa6a <io_read+0x1e>
    fa66:	2301      	movs	r3, #1
    fa68:	e000      	b.n	fa6c <io_read+0x20>
    fa6a:	2300      	movs	r3, #0
    fa6c:	f003 0301 	and.w	r3, r3, #1
    fa70:	b2db      	uxtb	r3, r3
    fa72:	223d      	movs	r2, #61	; 0x3d
    fa74:	4907      	ldr	r1, [pc, #28]	; (fa94 <io_read+0x48>)
    fa76:	4618      	mov	r0, r3
    fa78:	4b07      	ldr	r3, [pc, #28]	; (fa98 <io_read+0x4c>)
    fa7a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    fa7c:	68fb      	ldr	r3, [r7, #12]
    fa7e:	685b      	ldr	r3, [r3, #4]
    fa80:	88fa      	ldrh	r2, [r7, #6]
    fa82:	68b9      	ldr	r1, [r7, #8]
    fa84:	68f8      	ldr	r0, [r7, #12]
    fa86:	4798      	blx	r3
    fa88:	4603      	mov	r3, r0
}
    fa8a:	4618      	mov	r0, r3
    fa8c:	3710      	adds	r7, #16
    fa8e:	46bd      	mov	sp, r7
    fa90:	bd80      	pop	{r7, pc}
    fa92:	bf00      	nop
    fa94:	000102b4 	.word	0x000102b4
    fa98:	00003e69 	.word	0x00003e69

0000fa9c <__aeabi_atexit>:
    fa9c:	460b      	mov	r3, r1
    fa9e:	4601      	mov	r1, r0
    faa0:	4618      	mov	r0, r3
    faa2:	f000 b801 	b.w	faa8 <__cxa_atexit>
    faa6:	bf00      	nop

0000faa8 <__cxa_atexit>:
    faa8:	4613      	mov	r3, r2
    faaa:	460a      	mov	r2, r1
    faac:	4601      	mov	r1, r0
    faae:	2002      	movs	r0, #2
    fab0:	f000 b91e 	b.w	fcf0 <__register_exitproc>

0000fab4 <ffs>:
    fab4:	b140      	cbz	r0, fac8 <ffs+0x14>
    fab6:	2300      	movs	r3, #0
    fab8:	fa40 f103 	asr.w	r1, r0, r3
    fabc:	1c5a      	adds	r2, r3, #1
    fabe:	07c9      	lsls	r1, r1, #31
    fac0:	4613      	mov	r3, r2
    fac2:	d5f9      	bpl.n	fab8 <ffs+0x4>
    fac4:	4610      	mov	r0, r2
    fac6:	4770      	bx	lr
    fac8:	4602      	mov	r2, r0
    faca:	4610      	mov	r0, r2
    facc:	4770      	bx	lr
    face:	bf00      	nop

0000fad0 <__libc_init_array>:
    fad0:	b570      	push	{r4, r5, r6, lr}
    fad2:	4e0f      	ldr	r6, [pc, #60]	; (fb10 <__libc_init_array+0x40>)
    fad4:	4d0f      	ldr	r5, [pc, #60]	; (fb14 <__libc_init_array+0x44>)
    fad6:	1b76      	subs	r6, r6, r5
    fad8:	10b6      	asrs	r6, r6, #2
    fada:	bf18      	it	ne
    fadc:	2400      	movne	r4, #0
    fade:	d005      	beq.n	faec <__libc_init_array+0x1c>
    fae0:	3401      	adds	r4, #1
    fae2:	f855 3b04 	ldr.w	r3, [r5], #4
    fae6:	4798      	blx	r3
    fae8:	42a6      	cmp	r6, r4
    faea:	d1f9      	bne.n	fae0 <__libc_init_array+0x10>
    faec:	4e0a      	ldr	r6, [pc, #40]	; (fb18 <__libc_init_array+0x48>)
    faee:	4d0b      	ldr	r5, [pc, #44]	; (fb1c <__libc_init_array+0x4c>)
    faf0:	1b76      	subs	r6, r6, r5
    faf2:	f000 fbeb 	bl	102cc <_init>
    faf6:	10b6      	asrs	r6, r6, #2
    faf8:	bf18      	it	ne
    fafa:	2400      	movne	r4, #0
    fafc:	d006      	beq.n	fb0c <__libc_init_array+0x3c>
    fafe:	3401      	adds	r4, #1
    fb00:	f855 3b04 	ldr.w	r3, [r5], #4
    fb04:	4798      	blx	r3
    fb06:	42a6      	cmp	r6, r4
    fb08:	d1f9      	bne.n	fafe <__libc_init_array+0x2e>
    fb0a:	bd70      	pop	{r4, r5, r6, pc}
    fb0c:	bd70      	pop	{r4, r5, r6, pc}
    fb0e:	bf00      	nop
    fb10:	000102d8 	.word	0x000102d8
    fb14:	000102d8 	.word	0x000102d8
    fb18:	000102fc 	.word	0x000102fc
    fb1c:	000102d8 	.word	0x000102d8

0000fb20 <memcpy>:
    fb20:	4684      	mov	ip, r0
    fb22:	ea41 0300 	orr.w	r3, r1, r0
    fb26:	f013 0303 	ands.w	r3, r3, #3
    fb2a:	d16d      	bne.n	fc08 <memcpy+0xe8>
    fb2c:	3a40      	subs	r2, #64	; 0x40
    fb2e:	d341      	bcc.n	fbb4 <memcpy+0x94>
    fb30:	f851 3b04 	ldr.w	r3, [r1], #4
    fb34:	f840 3b04 	str.w	r3, [r0], #4
    fb38:	f851 3b04 	ldr.w	r3, [r1], #4
    fb3c:	f840 3b04 	str.w	r3, [r0], #4
    fb40:	f851 3b04 	ldr.w	r3, [r1], #4
    fb44:	f840 3b04 	str.w	r3, [r0], #4
    fb48:	f851 3b04 	ldr.w	r3, [r1], #4
    fb4c:	f840 3b04 	str.w	r3, [r0], #4
    fb50:	f851 3b04 	ldr.w	r3, [r1], #4
    fb54:	f840 3b04 	str.w	r3, [r0], #4
    fb58:	f851 3b04 	ldr.w	r3, [r1], #4
    fb5c:	f840 3b04 	str.w	r3, [r0], #4
    fb60:	f851 3b04 	ldr.w	r3, [r1], #4
    fb64:	f840 3b04 	str.w	r3, [r0], #4
    fb68:	f851 3b04 	ldr.w	r3, [r1], #4
    fb6c:	f840 3b04 	str.w	r3, [r0], #4
    fb70:	f851 3b04 	ldr.w	r3, [r1], #4
    fb74:	f840 3b04 	str.w	r3, [r0], #4
    fb78:	f851 3b04 	ldr.w	r3, [r1], #4
    fb7c:	f840 3b04 	str.w	r3, [r0], #4
    fb80:	f851 3b04 	ldr.w	r3, [r1], #4
    fb84:	f840 3b04 	str.w	r3, [r0], #4
    fb88:	f851 3b04 	ldr.w	r3, [r1], #4
    fb8c:	f840 3b04 	str.w	r3, [r0], #4
    fb90:	f851 3b04 	ldr.w	r3, [r1], #4
    fb94:	f840 3b04 	str.w	r3, [r0], #4
    fb98:	f851 3b04 	ldr.w	r3, [r1], #4
    fb9c:	f840 3b04 	str.w	r3, [r0], #4
    fba0:	f851 3b04 	ldr.w	r3, [r1], #4
    fba4:	f840 3b04 	str.w	r3, [r0], #4
    fba8:	f851 3b04 	ldr.w	r3, [r1], #4
    fbac:	f840 3b04 	str.w	r3, [r0], #4
    fbb0:	3a40      	subs	r2, #64	; 0x40
    fbb2:	d2bd      	bcs.n	fb30 <memcpy+0x10>
    fbb4:	3230      	adds	r2, #48	; 0x30
    fbb6:	d311      	bcc.n	fbdc <memcpy+0xbc>
    fbb8:	f851 3b04 	ldr.w	r3, [r1], #4
    fbbc:	f840 3b04 	str.w	r3, [r0], #4
    fbc0:	f851 3b04 	ldr.w	r3, [r1], #4
    fbc4:	f840 3b04 	str.w	r3, [r0], #4
    fbc8:	f851 3b04 	ldr.w	r3, [r1], #4
    fbcc:	f840 3b04 	str.w	r3, [r0], #4
    fbd0:	f851 3b04 	ldr.w	r3, [r1], #4
    fbd4:	f840 3b04 	str.w	r3, [r0], #4
    fbd8:	3a10      	subs	r2, #16
    fbda:	d2ed      	bcs.n	fbb8 <memcpy+0x98>
    fbdc:	320c      	adds	r2, #12
    fbde:	d305      	bcc.n	fbec <memcpy+0xcc>
    fbe0:	f851 3b04 	ldr.w	r3, [r1], #4
    fbe4:	f840 3b04 	str.w	r3, [r0], #4
    fbe8:	3a04      	subs	r2, #4
    fbea:	d2f9      	bcs.n	fbe0 <memcpy+0xc0>
    fbec:	3204      	adds	r2, #4
    fbee:	d008      	beq.n	fc02 <memcpy+0xe2>
    fbf0:	07d2      	lsls	r2, r2, #31
    fbf2:	bf1c      	itt	ne
    fbf4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    fbf8:	f800 3b01 	strbne.w	r3, [r0], #1
    fbfc:	d301      	bcc.n	fc02 <memcpy+0xe2>
    fbfe:	880b      	ldrh	r3, [r1, #0]
    fc00:	8003      	strh	r3, [r0, #0]
    fc02:	4660      	mov	r0, ip
    fc04:	4770      	bx	lr
    fc06:	bf00      	nop
    fc08:	2a08      	cmp	r2, #8
    fc0a:	d313      	bcc.n	fc34 <memcpy+0x114>
    fc0c:	078b      	lsls	r3, r1, #30
    fc0e:	d08d      	beq.n	fb2c <memcpy+0xc>
    fc10:	f010 0303 	ands.w	r3, r0, #3
    fc14:	d08a      	beq.n	fb2c <memcpy+0xc>
    fc16:	f1c3 0304 	rsb	r3, r3, #4
    fc1a:	1ad2      	subs	r2, r2, r3
    fc1c:	07db      	lsls	r3, r3, #31
    fc1e:	bf1c      	itt	ne
    fc20:	f811 3b01 	ldrbne.w	r3, [r1], #1
    fc24:	f800 3b01 	strbne.w	r3, [r0], #1
    fc28:	d380      	bcc.n	fb2c <memcpy+0xc>
    fc2a:	f831 3b02 	ldrh.w	r3, [r1], #2
    fc2e:	f820 3b02 	strh.w	r3, [r0], #2
    fc32:	e77b      	b.n	fb2c <memcpy+0xc>
    fc34:	3a04      	subs	r2, #4
    fc36:	d3d9      	bcc.n	fbec <memcpy+0xcc>
    fc38:	3a01      	subs	r2, #1
    fc3a:	f811 3b01 	ldrb.w	r3, [r1], #1
    fc3e:	f800 3b01 	strb.w	r3, [r0], #1
    fc42:	d2f9      	bcs.n	fc38 <memcpy+0x118>
    fc44:	780b      	ldrb	r3, [r1, #0]
    fc46:	7003      	strb	r3, [r0, #0]
    fc48:	784b      	ldrb	r3, [r1, #1]
    fc4a:	7043      	strb	r3, [r0, #1]
    fc4c:	788b      	ldrb	r3, [r1, #2]
    fc4e:	7083      	strb	r3, [r0, #2]
    fc50:	4660      	mov	r0, ip
    fc52:	4770      	bx	lr

0000fc54 <memset>:
    fc54:	b470      	push	{r4, r5, r6}
    fc56:	0786      	lsls	r6, r0, #30
    fc58:	d046      	beq.n	fce8 <memset+0x94>
    fc5a:	1e54      	subs	r4, r2, #1
    fc5c:	2a00      	cmp	r2, #0
    fc5e:	d041      	beq.n	fce4 <memset+0x90>
    fc60:	b2ca      	uxtb	r2, r1
    fc62:	4603      	mov	r3, r0
    fc64:	e002      	b.n	fc6c <memset+0x18>
    fc66:	f114 34ff 	adds.w	r4, r4, #4294967295
    fc6a:	d33b      	bcc.n	fce4 <memset+0x90>
    fc6c:	f803 2b01 	strb.w	r2, [r3], #1
    fc70:	079d      	lsls	r5, r3, #30
    fc72:	d1f8      	bne.n	fc66 <memset+0x12>
    fc74:	2c03      	cmp	r4, #3
    fc76:	d92e      	bls.n	fcd6 <memset+0x82>
    fc78:	b2cd      	uxtb	r5, r1
    fc7a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    fc7e:	2c0f      	cmp	r4, #15
    fc80:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    fc84:	d919      	bls.n	fcba <memset+0x66>
    fc86:	f103 0210 	add.w	r2, r3, #16
    fc8a:	4626      	mov	r6, r4
    fc8c:	3e10      	subs	r6, #16
    fc8e:	2e0f      	cmp	r6, #15
    fc90:	f842 5c10 	str.w	r5, [r2, #-16]
    fc94:	f842 5c0c 	str.w	r5, [r2, #-12]
    fc98:	f842 5c08 	str.w	r5, [r2, #-8]
    fc9c:	f842 5c04 	str.w	r5, [r2, #-4]
    fca0:	f102 0210 	add.w	r2, r2, #16
    fca4:	d8f2      	bhi.n	fc8c <memset+0x38>
    fca6:	f1a4 0210 	sub.w	r2, r4, #16
    fcaa:	f022 020f 	bic.w	r2, r2, #15
    fcae:	f004 040f 	and.w	r4, r4, #15
    fcb2:	3210      	adds	r2, #16
    fcb4:	2c03      	cmp	r4, #3
    fcb6:	4413      	add	r3, r2
    fcb8:	d90d      	bls.n	fcd6 <memset+0x82>
    fcba:	461e      	mov	r6, r3
    fcbc:	4622      	mov	r2, r4
    fcbe:	3a04      	subs	r2, #4
    fcc0:	2a03      	cmp	r2, #3
    fcc2:	f846 5b04 	str.w	r5, [r6], #4
    fcc6:	d8fa      	bhi.n	fcbe <memset+0x6a>
    fcc8:	1f22      	subs	r2, r4, #4
    fcca:	f022 0203 	bic.w	r2, r2, #3
    fcce:	3204      	adds	r2, #4
    fcd0:	4413      	add	r3, r2
    fcd2:	f004 0403 	and.w	r4, r4, #3
    fcd6:	b12c      	cbz	r4, fce4 <memset+0x90>
    fcd8:	b2c9      	uxtb	r1, r1
    fcda:	441c      	add	r4, r3
    fcdc:	f803 1b01 	strb.w	r1, [r3], #1
    fce0:	429c      	cmp	r4, r3
    fce2:	d1fb      	bne.n	fcdc <memset+0x88>
    fce4:	bc70      	pop	{r4, r5, r6}
    fce6:	4770      	bx	lr
    fce8:	4614      	mov	r4, r2
    fcea:	4603      	mov	r3, r0
    fcec:	e7c2      	b.n	fc74 <memset+0x20>
    fcee:	bf00      	nop

0000fcf0 <__register_exitproc>:
    fcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fcf4:	4d2c      	ldr	r5, [pc, #176]	; (fda8 <__register_exitproc+0xb8>)
    fcf6:	4606      	mov	r6, r0
    fcf8:	6828      	ldr	r0, [r5, #0]
    fcfa:	4698      	mov	r8, r3
    fcfc:	460f      	mov	r7, r1
    fcfe:	4691      	mov	r9, r2
    fd00:	f000 f882 	bl	fe08 <__retarget_lock_acquire_recursive>
    fd04:	4b29      	ldr	r3, [pc, #164]	; (fdac <__register_exitproc+0xbc>)
    fd06:	681c      	ldr	r4, [r3, #0]
    fd08:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    fd0c:	2b00      	cmp	r3, #0
    fd0e:	d03e      	beq.n	fd8e <__register_exitproc+0x9e>
    fd10:	685a      	ldr	r2, [r3, #4]
    fd12:	2a1f      	cmp	r2, #31
    fd14:	dc1c      	bgt.n	fd50 <__register_exitproc+0x60>
    fd16:	f102 0e01 	add.w	lr, r2, #1
    fd1a:	b176      	cbz	r6, fd3a <__register_exitproc+0x4a>
    fd1c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    fd20:	2401      	movs	r4, #1
    fd22:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    fd26:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    fd2a:	4094      	lsls	r4, r2
    fd2c:	4320      	orrs	r0, r4
    fd2e:	2e02      	cmp	r6, #2
    fd30:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    fd34:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    fd38:	d023      	beq.n	fd82 <__register_exitproc+0x92>
    fd3a:	3202      	adds	r2, #2
    fd3c:	f8c3 e004 	str.w	lr, [r3, #4]
    fd40:	6828      	ldr	r0, [r5, #0]
    fd42:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    fd46:	f000 f861 	bl	fe0c <__retarget_lock_release_recursive>
    fd4a:	2000      	movs	r0, #0
    fd4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fd50:	4b17      	ldr	r3, [pc, #92]	; (fdb0 <__register_exitproc+0xc0>)
    fd52:	b30b      	cbz	r3, fd98 <__register_exitproc+0xa8>
    fd54:	f44f 70c8 	mov.w	r0, #400	; 0x190
    fd58:	f7ff fdb4 	bl	f8c4 <malloc>
    fd5c:	4603      	mov	r3, r0
    fd5e:	b1d8      	cbz	r0, fd98 <__register_exitproc+0xa8>
    fd60:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    fd64:	6002      	str	r2, [r0, #0]
    fd66:	2100      	movs	r1, #0
    fd68:	6041      	str	r1, [r0, #4]
    fd6a:	460a      	mov	r2, r1
    fd6c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    fd70:	f04f 0e01 	mov.w	lr, #1
    fd74:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    fd78:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    fd7c:	2e00      	cmp	r6, #0
    fd7e:	d0dc      	beq.n	fd3a <__register_exitproc+0x4a>
    fd80:	e7cc      	b.n	fd1c <__register_exitproc+0x2c>
    fd82:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    fd86:	430c      	orrs	r4, r1
    fd88:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    fd8c:	e7d5      	b.n	fd3a <__register_exitproc+0x4a>
    fd8e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    fd92:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    fd96:	e7bb      	b.n	fd10 <__register_exitproc+0x20>
    fd98:	6828      	ldr	r0, [r5, #0]
    fd9a:	f000 f837 	bl	fe0c <__retarget_lock_release_recursive>
    fd9e:	f04f 30ff 	mov.w	r0, #4294967295
    fda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fda6:	bf00      	nop
    fda8:	20000608 	.word	0x20000608
    fdac:	000102c8 	.word	0x000102c8
    fdb0:	0000f8c5 	.word	0x0000f8c5

0000fdb4 <register_fini>:
    fdb4:	4b02      	ldr	r3, [pc, #8]	; (fdc0 <register_fini+0xc>)
    fdb6:	b113      	cbz	r3, fdbe <register_fini+0xa>
    fdb8:	4802      	ldr	r0, [pc, #8]	; (fdc4 <register_fini+0x10>)
    fdba:	f000 b805 	b.w	fdc8 <atexit>
    fdbe:	4770      	bx	lr
    fdc0:	00000000 	.word	0x00000000
    fdc4:	0000fdd5 	.word	0x0000fdd5

0000fdc8 <atexit>:
    fdc8:	2300      	movs	r3, #0
    fdca:	4601      	mov	r1, r0
    fdcc:	461a      	mov	r2, r3
    fdce:	4618      	mov	r0, r3
    fdd0:	f7ff bf8e 	b.w	fcf0 <__register_exitproc>

0000fdd4 <__libc_fini_array>:
    fdd4:	b538      	push	{r3, r4, r5, lr}
    fdd6:	4c0a      	ldr	r4, [pc, #40]	; (fe00 <__libc_fini_array+0x2c>)
    fdd8:	4d0a      	ldr	r5, [pc, #40]	; (fe04 <__libc_fini_array+0x30>)
    fdda:	1b64      	subs	r4, r4, r5
    fddc:	10a4      	asrs	r4, r4, #2
    fdde:	d00a      	beq.n	fdf6 <__libc_fini_array+0x22>
    fde0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    fde4:	3b01      	subs	r3, #1
    fde6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    fdea:	3c01      	subs	r4, #1
    fdec:	f855 3904 	ldr.w	r3, [r5], #-4
    fdf0:	4798      	blx	r3
    fdf2:	2c00      	cmp	r4, #0
    fdf4:	d1f9      	bne.n	fdea <__libc_fini_array+0x16>
    fdf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fdfa:	f000 ba7f 	b.w	102fc <_fini>
    fdfe:	bf00      	nop
    fe00:	0001030c 	.word	0x0001030c
    fe04:	00010308 	.word	0x00010308

0000fe08 <__retarget_lock_acquire_recursive>:
    fe08:	4770      	bx	lr
    fe0a:	bf00      	nop

0000fe0c <__retarget_lock_release_recursive>:
    fe0c:	4770      	bx	lr
    fe0e:	bf00      	nop
    fe10:	682f2e2e 	.word	0x682f2e2e
    fe14:	702f6c70 	.word	0x702f6c70
    fe18:	2f74726f 	.word	0x2f74726f
    fe1c:	5f6c7068 	.word	0x5f6c7068
    fe20:	6f697067 	.word	0x6f697067
    fe24:	7361625f 	.word	0x7361625f
    fe28:	00682e65 	.word	0x00682e65
    fe2c:	682f2e2e 	.word	0x682f2e2e
    fe30:	692f6c61 	.word	0x692f6c61
    fe34:	756c636e 	.word	0x756c636e
    fe38:	682f6564 	.word	0x682f6564
    fe3c:	775f6c61 	.word	0x775f6c61
    fe40:	682e7464 	.word	0x682e7464
    fe44:	00000000 	.word	0x00000000
    fe48:	682f2e2e 	.word	0x682f2e2e
    fe4c:	732f6c61 	.word	0x732f6c61
    fe50:	682f6372 	.word	0x682f6372
    fe54:	635f6c61 	.word	0x635f6c61
    fe58:	6e656c61 	.word	0x6e656c61
    fe5c:	2e726164 	.word	0x2e726164
    fe60:	00000063 	.word	0x00000063
    fe64:	682f2e2e 	.word	0x682f2e2e
    fe68:	732f6c61 	.word	0x732f6c61
    fe6c:	682f6372 	.word	0x682f6372
    fe70:	635f6c61 	.word	0x635f6c61
    fe74:	615f6e61 	.word	0x615f6e61
    fe78:	636e7973 	.word	0x636e7973
    fe7c:	0000632e 	.word	0x0000632e
    fe80:	682f2e2e 	.word	0x682f2e2e
    fe84:	732f6c61 	.word	0x732f6c61
    fe88:	682f6372 	.word	0x682f6372
    fe8c:	635f6c61 	.word	0x635f6c61
    fe90:	735f6372 	.word	0x735f6372
    fe94:	2e636e79 	.word	0x2e636e79
    fe98:	00000063 	.word	0x00000063
    fe9c:	682f2e2e 	.word	0x682f2e2e
    fea0:	732f6c61 	.word	0x732f6c61
    fea4:	682f6372 	.word	0x682f6372
    fea8:	695f6c61 	.word	0x695f6c61
    feac:	6d5f6332 	.word	0x6d5f6332
    feb0:	7973615f 	.word	0x7973615f
    feb4:	632e636e 	.word	0x632e636e
    feb8:	00000000 	.word	0x00000000
    febc:	682f2e2e 	.word	0x682f2e2e
    fec0:	732f6c61 	.word	0x732f6c61
    fec4:	682f6372 	.word	0x682f6372
    fec8:	695f6c61 	.word	0x695f6c61
    fecc:	6d5f6332 	.word	0x6d5f6332
    fed0:	6e79735f 	.word	0x6e79735f
    fed4:	00632e63 	.word	0x00632e63
    fed8:	682f2e2e 	.word	0x682f2e2e
    fedc:	732f6c61 	.word	0x732f6c61
    fee0:	682f6372 	.word	0x682f6372
    fee4:	705f6c61 	.word	0x705f6c61
    fee8:	632e6d77 	.word	0x632e6d77
    feec:	00000000 	.word	0x00000000
    fef0:	682f2e2e 	.word	0x682f2e2e
    fef4:	732f6c61 	.word	0x732f6c61
    fef8:	682f6372 	.word	0x682f6372
    fefc:	715f6c61 	.word	0x715f6c61
    ff00:	5f697073 	.word	0x5f697073
    ff04:	636e7973 	.word	0x636e7973
    ff08:	0000632e 	.word	0x0000632e
    ff0c:	682f2e2e 	.word	0x682f2e2e
    ff10:	732f6c61 	.word	0x732f6c61
    ff14:	682f6372 	.word	0x682f6372
    ff18:	735f6c61 	.word	0x735f6c61
    ff1c:	6d5f6970 	.word	0x6d5f6970
    ff20:	6e79735f 	.word	0x6e79735f
    ff24:	00632e63 	.word	0x00632e63
    ff28:	682f2e2e 	.word	0x682f2e2e
    ff2c:	732f6c61 	.word	0x732f6c61
    ff30:	682f6372 	.word	0x682f6372
    ff34:	745f6c61 	.word	0x745f6c61
    ff38:	72656d69 	.word	0x72656d69
    ff3c:	0000632e 	.word	0x0000632e
    ff40:	682f2e2e 	.word	0x682f2e2e
    ff44:	752f6c61 	.word	0x752f6c61
    ff48:	736c6974 	.word	0x736c6974
    ff4c:	6372732f 	.word	0x6372732f
    ff50:	6974752f 	.word	0x6974752f
    ff54:	6c5f736c 	.word	0x6c5f736c
    ff58:	2e747369 	.word	0x2e747369
    ff5c:	00000063 	.word	0x00000063

0000ff60 <_map>:
    ff60:	00000000 00000040 00000003 00000003     ....@...........
    ff70:	00000004 00000004 00000005 00000005     ................
    ff80:	00000006 00000056 00000007 00000057     ....V.......W...
    ff90:	00000008 00000028 00000009 00000029     ....(.......)...
    ffa0:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    ffb0:	632e6369 00000000                       ic.c....

0000ffb8 <user_mux_confs>:
    ffb8:	00020100 00000000 00000000 00000000     ................
	...

0000fffc <channel_confs>:
    fffc:	0660065f 00000000 00000000 00000000     _.`.............
	...

0001003c <interrupt_cfg>:
	...
   100bc:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   100cc:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   100dc:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   100ec:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   100fc:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   1010c:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   1011c:	43000400 43000800 43000c00              ...C...C...C

00010128 <sercomspi_regs>:
   10128:	0020000c 00020000 00000000 01ff0001     .. .............
   10138:	30000c04 02000000 00000000 ff00ef00     ...0............
   10148:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   10158:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   10168:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   10178:	43001400 43001800                       ...C...C

00010180 <_usb_ep_cfgs>:
   10180:	20000aac 00000000 00000040 20000aec     ... ....@...... 
   10190:	20000b2c 00400040 20000b6c 20000bac     ,.. @.@.l.. ... 
   101a0:	00400040 20000bec 20000c2c 00400040     @.@.... ,.. @.@.
   101b0:	20000c6c 20000cac 00400040 00000804     l.. ... @.@.....
   101c0:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   101d0:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   101e0:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   101f0:	7361625f 00682e65                       _base.h.

000101f8 <n25q256a_interface>:
   101f8:	0000c405 0000c4a9 0000c5b9 0000c771     ............q...
   10208:	0000c801 752f2e2e 642f6273 63697665     ....../usb/devic
   10218:	73752f65 2e636462 00000063              e/usbdc.c...

00010224 <defaultParameters>:
   10224:	00000040                                @...

00010228 <defaultPreferences>:
   10228:	000000fa 00000032                       ....2...

00010230 <_ZTV9CDC_Class>:
	...
   10238:	0000f061 0000f141 0000ecb5 0000f029     a...A.......)...
   10248:	0000f1d9 0000efed 0000eed1 0000ef21     ............!...
   10258:	0000f049 0000f0a9                       I.......

00010260 <_ZTV6Stream>:
	...
   10268:	0000f8d9 0000f26d 0000ecb5 0000ecc9     ....m...........
   10278:	0000f8d9 0000f8d9 0000f8d9 2e257830     ............0x%.
   10288:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   10298:	0066766f                                ovf.

0001029c <_ZTV5Print>:
	...
   102a4:	0000f8d9 0000f26d 0000ecb5 0000ecc9     ....m...........
   102b4:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   102c4:	00632e6f                                o.c.

000102c8 <_global_impure_ptr>:
   102c8:	200001e0                                ... 

000102cc <_init>:
   102cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   102ce:	bf00      	nop
   102d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   102d2:	bc08      	pop	{r3}
   102d4:	469e      	mov	lr, r3
   102d6:	4770      	bx	lr

000102d8 <__init_array_start>:
   102d8:	0000fdb5 	.word	0x0000fdb5

000102dc <__frame_dummy_init_array_entry>:
   102dc:	00000289 00000635 00000905 00000be9     ....5...........
   102ec:	0000ea45 0000ec7d 0000f259 0000f8b1     E...}...Y.......

000102fc <_fini>:
   102fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   102fe:	bf00      	nop
   10300:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10302:	bc08      	pop	{r3}
   10304:	469e      	mov	lr, r3
   10306:	4770      	bx	lr

00010308 <__fini_array_start>:
   10308:	00000265 	.word	0x00000265
