
HeaterP0Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f1d0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f1d0  0000f1d0  0001f1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  0000f1d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002060c  2**0
                  CONTENTS
  5 .bss          00000cc8  2000060c  0000f7e4  0002060c  2**2
                  ALLOC
  6 .stack        00010004  200012d4  000104ac  0002060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000668f1  00000000  00000000  00020693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008b56  00000000  00000000  00086f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001abc1  00000000  00000000  0008fada  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002f90  00000000  00000000  000aa69b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002c90  00000000  00000000  000ad62b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004bbcb  00000000  00000000  000b02bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00035441  00000000  00000000  000fbe86  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013c49b  00000000  00000000  001312c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c808  00000000  00000000  0026d764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 12 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	65 59 00 00 91 47 00 00 d1 02 00 00 d1 02 00 00     eY...G..........
      7c:	a1 47 00 00 b1 47 00 00 c1 47 00 00 d1 47 00 00     .G...G...G...G..
      8c:	e1 47 00 00 f1 47 00 00 01 48 00 00 d1 02 00 00     .G...G...H......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 11 6e 00 00 2d 6e 00 00 49 6e 00 00     .....n..-n..In..
     174:	65 6e 00 00 d1 02 00 00 e5 3b 00 00 b9 ad 00 00     en.......;......
     184:	c9 ad 00 00 d9 ad 00 00 e9 ad 00 00 d1 02 00 00     ................
     194:	d5 77 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .w..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 f1 77 00 00     .............w..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 b5 84 00 00 d1 02 00 00     ................
     1f4:	d1 84 00 00 d1 02 00 00 ed 84 00 00 09 85 00 00     ................
     204:	25 85 00 00 41 85 00 00 d1 02 00 00 d1 02 00 00     %...A...........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	0000f1d8 	.word	0x0000f1d8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f1d8 	.word	0x0000f1d8
     2c4:	20000610 	.word	0x20000610
     2c8:	0000f1d8 	.word	0x0000f1d8
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000f1d8 	.word	0x0000f1d8
     33c:	2000060c 	.word	0x2000060c
     340:	200012d4 	.word	0x200012d4
     344:	2000060c 	.word	0x2000060c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000e845 	.word	0x0000e845
     354:	00000365 	.word	0x00000365

00000358 <_ZL13FirmwareAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     358:	2280      	movs	r2, #128	; 0x80
     35a:	4b01      	ldr	r3, [pc, #4]	; (360 <_ZL13FirmwareAlivePK10timer_task+0x8>)
     35c:	619a      	str	r2, [r3, #24]
     35e:	4770      	bx	lr
     360:	41008000 	.word	0x41008000

00000364 <main>:
		//gpio_toggle_pin_level(iAlcFwIsAlive);
		gpio_set_pin_level(iAlcFwIsAlive,true);
}

int main(void)
{
     364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	atmel_start_init();
     368:	4b2c      	ldr	r3, [pc, #176]	; (41c <main+0xb8>)
     36a:	4798      	blx	r3
	uint8_t status;

	usb.Init();
     36c:	4c2c      	ldr	r4, [pc, #176]	; (420 <main+0xbc>)
     36e:	4620      	mov	r0, r4
     370:	4b2c      	ldr	r3, [pc, #176]	; (424 <main+0xc0>)
     372:	4798      	blx	r3
	delay_ms(100);
     374:	2064      	movs	r0, #100	; 0x64
     376:	4b2c      	ldr	r3, [pc, #176]	; (428 <main+0xc4>)
     378:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     37a:	4e2c      	ldr	r6, [pc, #176]	; (42c <main+0xc8>)
     37c:	4631      	mov	r1, r6
     37e:	4620      	mov	r0, r4
     380:	4d2b      	ldr	r5, [pc, #172]	; (430 <main+0xcc>)
     382:	47a8      	blx	r5
     384:	4631      	mov	r1, r6
     386:	4620      	mov	r0, r4
     388:	47a8      	blx	r5
     38a:	492a      	ldr	r1, [pc, #168]	; (434 <main+0xd0>)
     38c:	4620      	mov	r0, r4
     38e:	47a8      	blx	r5
     390:	4631      	mov	r1, r6
     392:	4620      	mov	r0, r4
     394:	47a8      	blx	r5
     396:	4928      	ldr	r1, [pc, #160]	; (438 <main+0xd4>)
     398:	4620      	mov	r0, r4
     39a:	47a8      	blx	r5
     39c:	4927      	ldr	r1, [pc, #156]	; (43c <main+0xd8>)
     39e:	4620      	mov	r0, r4
     3a0:	47a8      	blx	r5
     3a2:	4927      	ldr	r1, [pc, #156]	; (440 <main+0xdc>)
     3a4:	4620      	mov	r0, r4
     3a6:	47a8      	blx	r5
     3a8:	4926      	ldr	r1, [pc, #152]	; (444 <main+0xe0>)
     3aa:	4620      	mov	r0, r4
     3ac:	47a8      	blx	r5
     3ae:	4631      	mov	r1, r6
     3b0:	4620      	mov	r0, r4
     3b2:	47a8      	blx	r5
     3b4:	4631      	mov	r1, r6
     3b6:	4620      	mov	r0, r4
     3b8:	47a8      	blx	r5
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	uint32_t p=pwm_enable(&LIVE_PULSE);
     3ba:	4823      	ldr	r0, [pc, #140]	; (448 <main+0xe4>)
     3bc:	4b23      	ldr	r3, [pc, #140]	; (44c <main+0xe8>)
     3be:	4798      	blx	r3
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     3c0:	22fa      	movs	r2, #250	; 0xfa
     3c2:	4923      	ldr	r1, [pc, #140]	; (450 <main+0xec>)
     3c4:	4823      	ldr	r0, [pc, #140]	; (454 <main+0xf0>)
     3c6:	4b24      	ldr	r3, [pc, #144]	; (458 <main+0xf4>)
     3c8:	4798      	blx	r3
	heater.Init();
     3ca:	4824      	ldr	r0, [pc, #144]	; (45c <main+0xf8>)
     3cc:	4b24      	ldr	r3, [pc, #144]	; (460 <main+0xfc>)
     3ce:	4798      	blx	r3
	while (1)
	{
		for (uint8_t i = 0; i < 4; i++)
		{
			delay_ms(DELAY_HEATER_COMMUNICATION);
     3d0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 428 <main+0xc4>
     3d4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 474 <main+0x110>
     3d8:	46a3      	mov	fp, r4
{
     3da:	2400      	movs	r4, #0
			delay_ms(DELAY_HEATER_COMMUNICATION);
     3dc:	2564      	movs	r5, #100	; 0x64
     3de:	b2e6      	uxtb	r6, r4
     3e0:	4628      	mov	r0, r5
     3e2:	47c8      	blx	r9
     3e4:	4651      	mov	r1, sl
     3e6:	4658      	mov	r0, fp
     3e8:	4f11      	ldr	r7, [pc, #68]	; (430 <main+0xcc>)
     3ea:	47b8      	blx	r7
     3ec:	220a      	movs	r2, #10
     3ee:	4631      	mov	r1, r6
     3f0:	4658      	mov	r0, fp
     3f2:	4b1c      	ldr	r3, [pc, #112]	; (464 <main+0x100>)
     3f4:	4798      	blx	r3
     3f6:	491c      	ldr	r1, [pc, #112]	; (468 <main+0x104>)
     3f8:	4658      	mov	r0, fp
     3fa:	47b8      	blx	r7
			usb<<"Enabling Heater: "<<i<<" .\t";
			heater.Enable(i);
     3fc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 45c <main+0xf8>
     400:	4631      	mov	r1, r6
     402:	4640      	mov	r0, r8
     404:	4b19      	ldr	r3, [pc, #100]	; (46c <main+0x108>)
     406:	4798      	blx	r3
// 			delay_ms(DELAY_HEATER_COMMUNICATION);
// 			status= heater.ReadStatus();
// 			usb<<"Heater "<<i<< " Status :"<<heater.heaterGPIO.inputs.niAlcHeaterRelayFault[i]<<NEWLINE;
			delay_ms(DELAY_HEATER_COMMUNICATION);
     408:	4628      	mov	r0, r5
     40a:	47c8      	blx	r9
			heater.Disable(i);
     40c:	4631      	mov	r1, r6
     40e:	4640      	mov	r0, r8
     410:	4b17      	ldr	r3, [pc, #92]	; (470 <main+0x10c>)
     412:	4798      	blx	r3
     414:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < 4; i++)
     416:	2c04      	cmp	r4, #4
     418:	d0df      	beq.n	3da <main+0x76>
     41a:	e7e0      	b.n	3de <main+0x7a>
     41c:	000005c5 	.word	0x000005c5
     420:	20000f24 	.word	0x20000f24
     424:	0000dc35 	.word	0x0000dc35
     428:	00001cfd 	.word	0x00001cfd
     42c:	0000ec7c 	.word	0x0000ec7c
     430:	0000e099 	.word	0x0000e099
     434:	0000ec80 	.word	0x0000ec80
     438:	0000eca4 	.word	0x0000eca4
     43c:	0000ecb0 	.word	0x0000ecb0
     440:	0000ecbc 	.word	0x0000ecbc
     444:	0000ecc4 	.word	0x0000ecc4
     448:	200010d0 	.word	0x200010d0
     44c:	0000231d 	.word	0x0000231d
     450:	00000359 	.word	0x00000359
     454:	20000ecc 	.word	0x20000ecc
     458:	0000d8b9 	.word	0x0000d8b9
     45c:	20000628 	.word	0x20000628
     460:	00000501 	.word	0x00000501
     464:	0000e0b9 	.word	0x0000e0b9
     468:	0000ece4 	.word	0x0000ece4
     46c:	00000541 	.word	0x00000541
     470:	00000555 	.word	0x00000555
     474:	0000ecd0 	.word	0x0000ecd0

00000478 <_GLOBAL__sub_I_main>:
		}
		

	}
}
     478:	b510      	push	{r4, lr}
static SingleHeater_Class heater;
     47a:	4c05      	ldr	r4, [pc, #20]	; (490 <_GLOBAL__sub_I_main+0x18>)
     47c:	4620      	mov	r0, r4
     47e:	4b05      	ldr	r3, [pc, #20]	; (494 <_GLOBAL__sub_I_main+0x1c>)
     480:	4798      	blx	r3
     482:	4a05      	ldr	r2, [pc, #20]	; (498 <_GLOBAL__sub_I_main+0x20>)
     484:	4905      	ldr	r1, [pc, #20]	; (49c <_GLOBAL__sub_I_main+0x24>)
     486:	4620      	mov	r0, r4
     488:	4b05      	ldr	r3, [pc, #20]	; (4a0 <_GLOBAL__sub_I_main+0x28>)
     48a:	4798      	blx	r3
     48c:	bd10      	pop	{r4, pc}
     48e:	bf00      	nop
     490:	20000628 	.word	0x20000628
     494:	000004c1 	.word	0x000004c1
     498:	20000000 	.word	0x20000000
     49c:	000004d1 	.word	0x000004d1
     4a0:	0000e811 	.word	0x0000e811

000004a4 <__tcf_0>:


#include "SingleHeater_Class.h"
SingleHeater_Class*	ptrSingleHeaterClass;
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     4a4:	b538      	push	{r3, r4, r5, lr}
     4a6:	4d04      	ldr	r5, [pc, #16]	; (4b8 <__tcf_0+0x14>)
     4a8:	f105 001c 	add.w	r0, r5, #28
     4ac:	4c03      	ldr	r4, [pc, #12]	; (4bc <__tcf_0+0x18>)
     4ae:	47a0      	blx	r4
     4b0:	4628      	mov	r0, r5
     4b2:	47a0      	blx	r4
     4b4:	bd38      	pop	{r3, r4, r5, pc}
     4b6:	bf00      	nop
     4b8:	20000644 	.word	0x20000644
     4bc:	0000d4c1 	.word	0x0000d4c1

000004c0 <_ZN18SingleHeater_ClassC1Ev>:


// default constructor
SingleHeater_Class::SingleHeater_Class()
{
	ptrSingleHeaterClass=this;
     4c0:	4b02      	ldr	r3, [pc, #8]	; (4cc <_ZN18SingleHeater_ClassC1Ev+0xc>)
     4c2:	6398      	str	r0, [r3, #56]	; 0x38
	i2c=&i2cSharedStatic;
     4c4:	333c      	adds	r3, #60	; 0x3c
     4c6:	6183      	str	r3, [r0, #24]
} //SingleHeater_Class
     4c8:	4770      	bx	lr
     4ca:	bf00      	nop
     4cc:	20000644 	.word	0x20000644

000004d0 <_ZN18SingleHeater_ClassD1Ev>:


// default destructor
SingleHeater_Class::~SingleHeater_Class()
{
} //~SingleHeater_Class
     4d0:	4770      	bx	lr
	...

000004d4 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:
			asm("nop");
		}
		return isOK;
}

uint8_t SingleHeater_Class::InitExpanderArray(void){
     4d4:	b570      	push	{r4, r5, r6, lr}
     4d6:	4605      	mov	r5, r0
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
	{
		expanders[i]=&expandersStatic[i];
     4d8:	4c07      	ldr	r4, [pc, #28]	; (4f8 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x24>)
     4da:	60c4      	str	r4, [r0, #12]
		currentExpander=(expanders[i]);
     4dc:	6144      	str	r4, [r0, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     4de:	6982      	ldr	r2, [r0, #24]
     4e0:	2120      	movs	r1, #32
     4e2:	4620      	mov	r0, r4
     4e4:	4e05      	ldr	r6, [pc, #20]	; (4fc <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x28>)
     4e6:	47b0      	blx	r6
		expanders[i]=&expandersStatic[i];
     4e8:	f104 001c 	add.w	r0, r4, #28
     4ec:	6128      	str	r0, [r5, #16]
		currentExpander=(expanders[i]);
     4ee:	6168      	str	r0, [r5, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     4f0:	69aa      	ldr	r2, [r5, #24]
     4f2:	2121      	movs	r1, #33	; 0x21
     4f4:	47b0      	blx	r6
	}
	
}
     4f6:	bd70      	pop	{r4, r5, r6, pc}
     4f8:	20000644 	.word	0x20000644
     4fc:	0000d4d5 	.word	0x0000d4d5

00000500 <_ZN18SingleHeater_Class4InitEv>:
bool SingleHeater_Class::Init(void){
     500:	b510      	push	{r4, lr}
     502:	4604      	mov	r4, r0
		i2c->Init();
     504:	6980      	ldr	r0, [r0, #24]
     506:	4b0a      	ldr	r3, [pc, #40]	; (530 <_ZN18SingleHeater_Class4InitEv+0x30>)
     508:	4798      	blx	r3
		if (i2c->isOK)
     50a:	69a3      	ldr	r3, [r4, #24]
     50c:	7a5b      	ldrb	r3, [r3, #9]
     50e:	b913      	cbnz	r3, 516 <_ZN18SingleHeater_Class4InitEv+0x16>
			asm("nop");
     510:	bf00      	nop
		return isOK;
     512:	7820      	ldrb	r0, [r4, #0]
}
     514:	bd10      	pop	{r4, pc}
			InitExpanderArray();
     516:	4620      	mov	r0, r4
     518:	4b06      	ldr	r3, [pc, #24]	; (534 <_ZN18SingleHeater_Class4InitEv+0x34>)
     51a:	4798      	blx	r3
			expanders[0]->SetPortInput();
     51c:	68e0      	ldr	r0, [r4, #12]
     51e:	4b06      	ldr	r3, [pc, #24]	; (538 <_ZN18SingleHeater_Class4InitEv+0x38>)
     520:	4798      	blx	r3
			expanders[1]->SetPortOutput();
     522:	6920      	ldr	r0, [r4, #16]
     524:	4b05      	ldr	r3, [pc, #20]	; (53c <_ZN18SingleHeater_Class4InitEv+0x3c>)
     526:	4798      	blx	r3
			isOK=SelfTest();
     528:	2301      	movs	r3, #1
     52a:	7023      	strb	r3, [r4, #0]
     52c:	e7f1      	b.n	512 <_ZN18SingleHeater_Class4InitEv+0x12>
     52e:	bf00      	nop
     530:	0000d3c1 	.word	0x0000d3c1
     534:	000004d5 	.word	0x000004d5
     538:	0000d609 	.word	0x0000d609
     53c:	0000d64d 	.word	0x0000d64d

00000540 <_ZN18SingleHeater_Class6EnableEh>:
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
	}
	return r;
}
uint8_t	SingleHeater_Class::Enable(uint8_t indexHeater){
     540:	b510      	push	{r4, lr}
     542:	4604      	mov	r4, r0
	enabled=expanders[1]->WriteDigit(indexHeater,true);
     544:	2201      	movs	r2, #1
     546:	6900      	ldr	r0, [r0, #16]
     548:	4b01      	ldr	r3, [pc, #4]	; (550 <_ZN18SingleHeater_Class6EnableEh+0x10>)
     54a:	4798      	blx	r3
     54c:	72e0      	strb	r0, [r4, #11]
	return uint8_t(enabled);
}
     54e:	bd10      	pop	{r4, pc}
     550:	0000d745 	.word	0x0000d745

00000554 <_ZN18SingleHeater_Class7DisableEh>:
uint8_t	SingleHeater_Class::Disable(uint8_t indexHeater){
     554:	b510      	push	{r4, lr}
     556:	4604      	mov	r4, r0
	enabled=expanders[1]->WriteDigit(indexHeater,false)?false:true;
     558:	2200      	movs	r2, #0
     55a:	6900      	ldr	r0, [r0, #16]
     55c:	4b03      	ldr	r3, [pc, #12]	; (56c <_ZN18SingleHeater_Class7DisableEh+0x18>)
     55e:	4798      	blx	r3
     560:	f080 0001 	eor.w	r0, r0, #1
     564:	b2c0      	uxtb	r0, r0
     566:	72e0      	strb	r0, [r4, #11]
	return uint8_t(enabled);
}
     568:	bd10      	pop	{r4, pc}
     56a:	bf00      	nop
     56c:	0000d745 	.word	0x0000d745

00000570 <_GLOBAL__sub_I_ptrSingleHeaterClass>:



bool SingleHeater_Class::SelfTest(void){
	return true;
}
     570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
     572:	4c0c      	ldr	r4, [pc, #48]	; (5a4 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x34>)
     574:	f104 053c 	add.w	r5, r4, #60	; 0x3c
     578:	490b      	ldr	r1, [pc, #44]	; (5a8 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x38>)
     57a:	4628      	mov	r0, r5
     57c:	4b0b      	ldr	r3, [pc, #44]	; (5ac <_GLOBAL__sub_I_ptrSingleHeaterClass+0x3c>)
     57e:	4798      	blx	r3
     580:	4e0b      	ldr	r6, [pc, #44]	; (5b0 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x40>)
     582:	4632      	mov	r2, r6
     584:	490b      	ldr	r1, [pc, #44]	; (5b4 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x44>)
     586:	4628      	mov	r0, r5
     588:	4d0b      	ldr	r5, [pc, #44]	; (5b8 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x48>)
     58a:	47a8      	blx	r5
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     58c:	4620      	mov	r0, r4
     58e:	4f0b      	ldr	r7, [pc, #44]	; (5bc <_GLOBAL__sub_I_ptrSingleHeaterClass+0x4c>)
     590:	47b8      	blx	r7
     592:	f104 001c 	add.w	r0, r4, #28
     596:	47b8      	blx	r7
     598:	4632      	mov	r2, r6
     59a:	4909      	ldr	r1, [pc, #36]	; (5c0 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x50>)
     59c:	2000      	movs	r0, #0
     59e:	47a8      	blx	r5
     5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5a2:	bf00      	nop
     5a4:	20000644 	.word	0x20000644
     5a8:	20001154 	.word	0x20001154
     5ac:	0000d391 	.word	0x0000d391
     5b0:	20000000 	.word	0x20000000
     5b4:	0000d3ad 	.word	0x0000d3ad
     5b8:	0000e811 	.word	0x0000e811
     5bc:	0000d4ad 	.word	0x0000d4ad
     5c0:	000004a5 	.word	0x000004a5

000005c4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     5c4:	b580      	push	{r7, lr}
     5c6:	af00      	add	r7, sp, #0
	system_init();
     5c8:	4b03      	ldr	r3, [pc, #12]	; (5d8 <atmel_start_init+0x14>)
     5ca:	4798      	blx	r3
	usb_init();
     5cc:	4b03      	ldr	r3, [pc, #12]	; (5dc <atmel_start_init+0x18>)
     5ce:	4798      	blx	r3
	spi_nor_flash_init();
     5d0:	4b03      	ldr	r3, [pc, #12]	; (5e0 <atmel_start_init+0x1c>)
     5d2:	4798      	blx	r3
}
     5d4:	bf00      	nop
     5d6:	bd80      	pop	{r7, pc}
     5d8:	00001939 	.word	0x00001939
     5dc:	0000b4bd 	.word	0x0000b4bd
     5e0:	0000b451 	.word	0x0000b451

000005e4 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     5e4:	b480      	push	{r7}
     5e6:	b085      	sub	sp, #20
     5e8:	af00      	add	r7, sp, #0
     5ea:	60f8      	str	r0, [r7, #12]
     5ec:	460b      	mov	r3, r1
     5ee:	607a      	str	r2, [r7, #4]
     5f0:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     5f2:	7afa      	ldrb	r2, [r7, #11]
     5f4:	68fb      	ldr	r3, [r7, #12]
     5f6:	3220      	adds	r2, #32
     5f8:	6879      	ldr	r1, [r7, #4]
     5fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     5fe:	bf00      	nop
     600:	3714      	adds	r7, #20
     602:	46bd      	mov	sp, r7
     604:	f85d 7b04 	ldr.w	r7, [sp], #4
     608:	4770      	bx	lr

0000060a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     60a:	b480      	push	{r7}
     60c:	b083      	sub	sp, #12
     60e:	af00      	add	r7, sp, #0
     610:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     612:	687b      	ldr	r3, [r7, #4]
     614:	691b      	ldr	r3, [r3, #16]
     616:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     61a:	687b      	ldr	r3, [r7, #4]
     61c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     61e:	bf00      	nop
     620:	370c      	adds	r7, #12
     622:	46bd      	mov	sp, r7
     624:	f85d 7b04 	ldr.w	r7, [sp], #4
     628:	4770      	bx	lr

0000062a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     62a:	b480      	push	{r7}
     62c:	b083      	sub	sp, #12
     62e:	af00      	add	r7, sp, #0
     630:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     632:	687b      	ldr	r3, [r7, #4]
     634:	691b      	ldr	r3, [r3, #16]
     636:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     63e:	bf00      	nop
     640:	370c      	adds	r7, #12
     642:	46bd      	mov	sp, r7
     644:	f85d 7b04 	ldr.w	r7, [sp], #4
     648:	4770      	bx	lr

0000064a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     64a:	b480      	push	{r7}
     64c:	b083      	sub	sp, #12
     64e:	af00      	add	r7, sp, #0
     650:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     652:	687b      	ldr	r3, [r7, #4]
     654:	691b      	ldr	r3, [r3, #16]
     656:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     65e:	bf00      	nop
     660:	370c      	adds	r7, #12
     662:	46bd      	mov	sp, r7
     664:	f85d 7b04 	ldr.w	r7, [sp], #4
     668:	4770      	bx	lr

0000066a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     66a:	b480      	push	{r7}
     66c:	b083      	sub	sp, #12
     66e:	af00      	add	r7, sp, #0
     670:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     672:	687b      	ldr	r3, [r7, #4]
     674:	691b      	ldr	r3, [r3, #16]
     676:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     67e:	bf00      	nop
     680:	370c      	adds	r7, #12
     682:	46bd      	mov	sp, r7
     684:	f85d 7b04 	ldr.w	r7, [sp], #4
     688:	4770      	bx	lr

0000068a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     68a:	b480      	push	{r7}
     68c:	b083      	sub	sp, #12
     68e:	af00      	add	r7, sp, #0
     690:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     692:	687b      	ldr	r3, [r7, #4]
     694:	695b      	ldr	r3, [r3, #20]
     696:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     69e:	bf00      	nop
     6a0:	370c      	adds	r7, #12
     6a2:	46bd      	mov	sp, r7
     6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6a8:	4770      	bx	lr

000006aa <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     6aa:	b480      	push	{r7}
     6ac:	b083      	sub	sp, #12
     6ae:	af00      	add	r7, sp, #0
     6b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	695b      	ldr	r3, [r3, #20]
     6b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6be:	bf00      	nop
     6c0:	370c      	adds	r7, #12
     6c2:	46bd      	mov	sp, r7
     6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c8:	4770      	bx	lr

000006ca <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     6ca:	b480      	push	{r7}
     6cc:	b083      	sub	sp, #12
     6ce:	af00      	add	r7, sp, #0
     6d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	695b      	ldr	r3, [r3, #20]
     6d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6de:	bf00      	nop
     6e0:	370c      	adds	r7, #12
     6e2:	46bd      	mov	sp, r7
     6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6e8:	4770      	bx	lr

000006ea <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     6ea:	b480      	push	{r7}
     6ec:	b083      	sub	sp, #12
     6ee:	af00      	add	r7, sp, #0
     6f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	695b      	ldr	r3, [r3, #20]
     6f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6fe:	bf00      	nop
     700:	370c      	adds	r7, #12
     702:	46bd      	mov	sp, r7
     704:	f85d 7b04 	ldr.w	r7, [sp], #4
     708:	4770      	bx	lr

0000070a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     70a:	b480      	push	{r7}
     70c:	b083      	sub	sp, #12
     70e:	af00      	add	r7, sp, #0
     710:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     712:	687b      	ldr	r3, [r7, #4]
     714:	695b      	ldr	r3, [r3, #20]
     716:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     71e:	bf00      	nop
     720:	370c      	adds	r7, #12
     722:	46bd      	mov	sp, r7
     724:	f85d 7b04 	ldr.w	r7, [sp], #4
     728:	4770      	bx	lr

0000072a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     72a:	b480      	push	{r7}
     72c:	b083      	sub	sp, #12
     72e:	af00      	add	r7, sp, #0
     730:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     732:	687b      	ldr	r3, [r7, #4]
     734:	699b      	ldr	r3, [r3, #24]
     736:	f043 0201 	orr.w	r2, r3, #1
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     73e:	bf00      	nop
     740:	370c      	adds	r7, #12
     742:	46bd      	mov	sp, r7
     744:	f85d 7b04 	ldr.w	r7, [sp], #4
     748:	4770      	bx	lr

0000074a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     74a:	b480      	push	{r7}
     74c:	b083      	sub	sp, #12
     74e:	af00      	add	r7, sp, #0
     750:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     752:	687b      	ldr	r3, [r7, #4]
     754:	699b      	ldr	r3, [r3, #24]
     756:	f043 0202 	orr.w	r2, r3, #2
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     75e:	bf00      	nop
     760:	370c      	adds	r7, #12
     762:	46bd      	mov	sp, r7
     764:	f85d 7b04 	ldr.w	r7, [sp], #4
     768:	4770      	bx	lr

0000076a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     76a:	b480      	push	{r7}
     76c:	b083      	sub	sp, #12
     76e:	af00      	add	r7, sp, #0
     770:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     772:	687b      	ldr	r3, [r7, #4]
     774:	699b      	ldr	r3, [r3, #24]
     776:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     77e:	bf00      	nop
     780:	370c      	adds	r7, #12
     782:	46bd      	mov	sp, r7
     784:	f85d 7b04 	ldr.w	r7, [sp], #4
     788:	4770      	bx	lr

0000078a <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     78a:	b480      	push	{r7}
     78c:	b083      	sub	sp, #12
     78e:	af00      	add	r7, sp, #0
     790:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     792:	687b      	ldr	r3, [r7, #4]
     794:	699b      	ldr	r3, [r3, #24]
     796:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     79e:	bf00      	nop
     7a0:	370c      	adds	r7, #12
     7a2:	46bd      	mov	sp, r7
     7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7a8:	4770      	bx	lr

000007aa <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     7aa:	b480      	push	{r7}
     7ac:	b083      	sub	sp, #12
     7ae:	af00      	add	r7, sp, #0
     7b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	699b      	ldr	r3, [r3, #24]
     7b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     7ba:	687b      	ldr	r3, [r7, #4]
     7bc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7be:	bf00      	nop
     7c0:	370c      	adds	r7, #12
     7c2:	46bd      	mov	sp, r7
     7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7c8:	4770      	bx	lr

000007ca <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     7ca:	b480      	push	{r7}
     7cc:	b083      	sub	sp, #12
     7ce:	af00      	add	r7, sp, #0
     7d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	699b      	ldr	r3, [r3, #24]
     7d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7de:	bf00      	nop
     7e0:	370c      	adds	r7, #12
     7e2:	46bd      	mov	sp, r7
     7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7e8:	4770      	bx	lr

000007ea <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     7ea:	b480      	push	{r7}
     7ec:	b083      	sub	sp, #12
     7ee:	af00      	add	r7, sp, #0
     7f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	69db      	ldr	r3, [r3, #28]
     7f6:	f043 0220 	orr.w	r2, r3, #32
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7fe:	bf00      	nop
     800:	370c      	adds	r7, #12
     802:	46bd      	mov	sp, r7
     804:	f85d 7b04 	ldr.w	r7, [sp], #4
     808:	4770      	bx	lr

0000080a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     80a:	b480      	push	{r7}
     80c:	b083      	sub	sp, #12
     80e:	af00      	add	r7, sp, #0
     810:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     812:	687b      	ldr	r3, [r7, #4]
     814:	69db      	ldr	r3, [r3, #28]
     816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     81a:	687b      	ldr	r3, [r7, #4]
     81c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     81e:	bf00      	nop
     820:	370c      	adds	r7, #12
     822:	46bd      	mov	sp, r7
     824:	f85d 7b04 	ldr.w	r7, [sp], #4
     828:	4770      	bx	lr

0000082a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     82a:	b480      	push	{r7}
     82c:	b083      	sub	sp, #12
     82e:	af00      	add	r7, sp, #0
     830:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     832:	687b      	ldr	r3, [r7, #4]
     834:	69db      	ldr	r3, [r3, #28]
     836:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     83e:	bf00      	nop
     840:	370c      	adds	r7, #12
     842:	46bd      	mov	sp, r7
     844:	f85d 7b04 	ldr.w	r7, [sp], #4
     848:	4770      	bx	lr

0000084a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     84a:	b480      	push	{r7}
     84c:	b083      	sub	sp, #12
     84e:	af00      	add	r7, sp, #0
     850:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     852:	687b      	ldr	r3, [r7, #4]
     854:	6a1b      	ldr	r3, [r3, #32]
     856:	f043 0201 	orr.w	r2, r3, #1
     85a:	687b      	ldr	r3, [r7, #4]
     85c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     85e:	bf00      	nop
     860:	370c      	adds	r7, #12
     862:	46bd      	mov	sp, r7
     864:	f85d 7b04 	ldr.w	r7, [sp], #4
     868:	4770      	bx	lr

0000086a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     86a:	b480      	push	{r7}
     86c:	b083      	sub	sp, #12
     86e:	af00      	add	r7, sp, #0
     870:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     872:	687b      	ldr	r3, [r7, #4]
     874:	6a1b      	ldr	r3, [r3, #32]
     876:	f043 0202 	orr.w	r2, r3, #2
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     87e:	bf00      	nop
     880:	370c      	adds	r7, #12
     882:	46bd      	mov	sp, r7
     884:	f85d 7b04 	ldr.w	r7, [sp], #4
     888:	4770      	bx	lr

0000088a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     88a:	b480      	push	{r7}
     88c:	b083      	sub	sp, #12
     88e:	af00      	add	r7, sp, #0
     890:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     892:	687b      	ldr	r3, [r7, #4]
     894:	6a1b      	ldr	r3, [r3, #32]
     896:	f043 0204 	orr.w	r2, r3, #4
     89a:	687b      	ldr	r3, [r7, #4]
     89c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     89e:	bf00      	nop
     8a0:	370c      	adds	r7, #12
     8a2:	46bd      	mov	sp, r7
     8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8a8:	4770      	bx	lr

000008aa <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     8aa:	b480      	push	{r7}
     8ac:	b083      	sub	sp, #12
     8ae:	af00      	add	r7, sp, #0
     8b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	6a1b      	ldr	r3, [r3, #32]
     8b6:	f043 0208 	orr.w	r2, r3, #8
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8be:	bf00      	nop
     8c0:	370c      	adds	r7, #12
     8c2:	46bd      	mov	sp, r7
     8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8c8:	4770      	bx	lr

000008ca <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     8ca:	b480      	push	{r7}
     8cc:	b083      	sub	sp, #12
     8ce:	af00      	add	r7, sp, #0
     8d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	6a1b      	ldr	r3, [r3, #32]
     8d6:	f043 0220 	orr.w	r2, r3, #32
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8de:	bf00      	nop
     8e0:	370c      	adds	r7, #12
     8e2:	46bd      	mov	sp, r7
     8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     8e8:	4770      	bx	lr

000008ea <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     8ea:	b480      	push	{r7}
     8ec:	b083      	sub	sp, #12
     8ee:	af00      	add	r7, sp, #0
     8f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     8f2:	687b      	ldr	r3, [r7, #4]
     8f4:	6a1b      	ldr	r3, [r3, #32]
     8f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     8fa:	687b      	ldr	r3, [r7, #4]
     8fc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8fe:	bf00      	nop
     900:	370c      	adds	r7, #12
     902:	46bd      	mov	sp, r7
     904:	f85d 7b04 	ldr.w	r7, [sp], #4
     908:	4770      	bx	lr

0000090a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     90a:	b480      	push	{r7}
     90c:	b085      	sub	sp, #20
     90e:	af00      	add	r7, sp, #0
     910:	60f8      	str	r0, [r7, #12]
     912:	460b      	mov	r3, r1
     914:	607a      	str	r2, [r7, #4]
     916:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     918:	7afb      	ldrb	r3, [r7, #11]
     91a:	68fa      	ldr	r2, [r7, #12]
     91c:	01db      	lsls	r3, r3, #7
     91e:	4413      	add	r3, r2
     920:	3308      	adds	r3, #8
     922:	687a      	ldr	r2, [r7, #4]
     924:	601a      	str	r2, [r3, #0]
}
     926:	bf00      	nop
     928:	3714      	adds	r7, #20
     92a:	46bd      	mov	sp, r7
     92c:	f85d 7b04 	ldr.w	r7, [sp], #4
     930:	4770      	bx	lr

00000932 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     932:	b480      	push	{r7}
     934:	b085      	sub	sp, #20
     936:	af00      	add	r7, sp, #0
     938:	60f8      	str	r0, [r7, #12]
     93a:	460b      	mov	r3, r1
     93c:	607a      	str	r2, [r7, #4]
     93e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     940:	7afb      	ldrb	r3, [r7, #11]
     942:	68fa      	ldr	r2, [r7, #12]
     944:	01db      	lsls	r3, r3, #7
     946:	4413      	add	r3, r2
     948:	3304      	adds	r3, #4
     94a:	687a      	ldr	r2, [r7, #4]
     94c:	601a      	str	r2, [r3, #0]
}
     94e:	bf00      	nop
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr

0000095a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     95a:	b480      	push	{r7}
     95c:	b085      	sub	sp, #20
     95e:	af00      	add	r7, sp, #0
     960:	60f8      	str	r0, [r7, #12]
     962:	460b      	mov	r3, r1
     964:	607a      	str	r2, [r7, #4]
     966:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     968:	7afb      	ldrb	r3, [r7, #11]
     96a:	68fa      	ldr	r2, [r7, #12]
     96c:	01db      	lsls	r3, r3, #7
     96e:	4413      	add	r3, r2
     970:	3318      	adds	r3, #24
     972:	687a      	ldr	r2, [r7, #4]
     974:	601a      	str	r2, [r3, #0]
}
     976:	bf00      	nop
     978:	3714      	adds	r7, #20
     97a:	46bd      	mov	sp, r7
     97c:	f85d 7b04 	ldr.w	r7, [sp], #4
     980:	4770      	bx	lr

00000982 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     982:	b480      	push	{r7}
     984:	b085      	sub	sp, #20
     986:	af00      	add	r7, sp, #0
     988:	60f8      	str	r0, [r7, #12]
     98a:	460b      	mov	r3, r1
     98c:	607a      	str	r2, [r7, #4]
     98e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     990:	7afb      	ldrb	r3, [r7, #11]
     992:	68fa      	ldr	r2, [r7, #12]
     994:	01db      	lsls	r3, r3, #7
     996:	4413      	add	r3, r2
     998:	3314      	adds	r3, #20
     99a:	687a      	ldr	r2, [r7, #4]
     99c:	601a      	str	r2, [r3, #0]
}
     99e:	bf00      	nop
     9a0:	3714      	adds	r7, #20
     9a2:	46bd      	mov	sp, r7
     9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9a8:	4770      	bx	lr

000009aa <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     9aa:	b480      	push	{r7}
     9ac:	b085      	sub	sp, #20
     9ae:	af00      	add	r7, sp, #0
     9b0:	6078      	str	r0, [r7, #4]
     9b2:	4608      	mov	r0, r1
     9b4:	4611      	mov	r1, r2
     9b6:	461a      	mov	r2, r3
     9b8:	4603      	mov	r3, r0
     9ba:	70fb      	strb	r3, [r7, #3]
     9bc:	460b      	mov	r3, r1
     9be:	70bb      	strb	r3, [r7, #2]
     9c0:	4613      	mov	r3, r2
     9c2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9c4:	78fa      	ldrb	r2, [r7, #3]
     9c6:	78bb      	ldrb	r3, [r7, #2]
     9c8:	6879      	ldr	r1, [r7, #4]
     9ca:	01d2      	lsls	r2, r2, #7
     9cc:	440a      	add	r2, r1
     9ce:	4413      	add	r3, r2
     9d0:	3330      	adds	r3, #48	; 0x30
     9d2:	781b      	ldrb	r3, [r3, #0]
     9d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9d6:	7bfb      	ldrb	r3, [r7, #15]
     9d8:	f023 030f 	bic.w	r3, r3, #15
     9dc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     9de:	787b      	ldrb	r3, [r7, #1]
     9e0:	f003 030f 	and.w	r3, r3, #15
     9e4:	b2da      	uxtb	r2, r3
     9e6:	7bfb      	ldrb	r3, [r7, #15]
     9e8:	4313      	orrs	r3, r2
     9ea:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9ec:	78fa      	ldrb	r2, [r7, #3]
     9ee:	78bb      	ldrb	r3, [r7, #2]
     9f0:	6879      	ldr	r1, [r7, #4]
     9f2:	01d2      	lsls	r2, r2, #7
     9f4:	440a      	add	r2, r1
     9f6:	4413      	add	r3, r2
     9f8:	3330      	adds	r3, #48	; 0x30
     9fa:	7bfa      	ldrb	r2, [r7, #15]
     9fc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     9fe:	bf00      	nop
     a00:	3714      	adds	r7, #20
     a02:	46bd      	mov	sp, r7
     a04:	f85d 7b04 	ldr.w	r7, [sp], #4
     a08:	4770      	bx	lr

00000a0a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     a0a:	b480      	push	{r7}
     a0c:	b085      	sub	sp, #20
     a0e:	af00      	add	r7, sp, #0
     a10:	6078      	str	r0, [r7, #4]
     a12:	4608      	mov	r0, r1
     a14:	4611      	mov	r1, r2
     a16:	461a      	mov	r2, r3
     a18:	4603      	mov	r3, r0
     a1a:	70fb      	strb	r3, [r7, #3]
     a1c:	460b      	mov	r3, r1
     a1e:	70bb      	strb	r3, [r7, #2]
     a20:	4613      	mov	r3, r2
     a22:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a24:	78fa      	ldrb	r2, [r7, #3]
     a26:	78bb      	ldrb	r3, [r7, #2]
     a28:	6879      	ldr	r1, [r7, #4]
     a2a:	01d2      	lsls	r2, r2, #7
     a2c:	440a      	add	r2, r1
     a2e:	4413      	add	r3, r2
     a30:	3330      	adds	r3, #48	; 0x30
     a32:	781b      	ldrb	r3, [r3, #0]
     a34:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a36:	7bfb      	ldrb	r3, [r7, #15]
     a38:	f003 030f 	and.w	r3, r3, #15
     a3c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     a3e:	787b      	ldrb	r3, [r7, #1]
     a40:	011b      	lsls	r3, r3, #4
     a42:	b2da      	uxtb	r2, r3
     a44:	7bfb      	ldrb	r3, [r7, #15]
     a46:	4313      	orrs	r3, r2
     a48:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4a:	78fa      	ldrb	r2, [r7, #3]
     a4c:	78bb      	ldrb	r3, [r7, #2]
     a4e:	6879      	ldr	r1, [r7, #4]
     a50:	01d2      	lsls	r2, r2, #7
     a52:	440a      	add	r2, r1
     a54:	4413      	add	r3, r2
     a56:	3330      	adds	r3, #48	; 0x30
     a58:	7bfa      	ldrb	r2, [r7, #15]
     a5a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     a5c:	bf00      	nop
     a5e:	3714      	adds	r7, #20
     a60:	46bd      	mov	sp, r7
     a62:	f85d 7b04 	ldr.w	r7, [sp], #4
     a66:	4770      	bx	lr

00000a68 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     a68:	b480      	push	{r7}
     a6a:	b085      	sub	sp, #20
     a6c:	af00      	add	r7, sp, #0
     a6e:	6078      	str	r0, [r7, #4]
     a70:	4608      	mov	r0, r1
     a72:	4611      	mov	r1, r2
     a74:	461a      	mov	r2, r3
     a76:	4603      	mov	r3, r0
     a78:	70fb      	strb	r3, [r7, #3]
     a7a:	460b      	mov	r3, r1
     a7c:	70bb      	strb	r3, [r7, #2]
     a7e:	4613      	mov	r3, r2
     a80:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	78fa      	ldrb	r2, [r7, #3]
     a84:	78bb      	ldrb	r3, [r7, #2]
     a86:	6879      	ldr	r1, [r7, #4]
     a88:	01d2      	lsls	r2, r2, #7
     a8a:	440a      	add	r2, r1
     a8c:	4413      	add	r3, r2
     a8e:	3340      	adds	r3, #64	; 0x40
     a90:	781b      	ldrb	r3, [r3, #0]
     a92:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     a94:	7bfb      	ldrb	r3, [r7, #15]
     a96:	f023 0301 	bic.w	r3, r3, #1
     a9a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a9c:	787a      	ldrb	r2, [r7, #1]
     a9e:	7bfb      	ldrb	r3, [r7, #15]
     aa0:	4313      	orrs	r3, r2
     aa2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aa4:	78fa      	ldrb	r2, [r7, #3]
     aa6:	78bb      	ldrb	r3, [r7, #2]
     aa8:	6879      	ldr	r1, [r7, #4]
     aaa:	01d2      	lsls	r2, r2, #7
     aac:	440a      	add	r2, r1
     aae:	4413      	add	r3, r2
     ab0:	3340      	adds	r3, #64	; 0x40
     ab2:	7bfa      	ldrb	r2, [r7, #15]
     ab4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ab6:	bf00      	nop
     ab8:	3714      	adds	r7, #20
     aba:	46bd      	mov	sp, r7
     abc:	f85d 7b04 	ldr.w	r7, [sp], #4
     ac0:	4770      	bx	lr

00000ac2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     ac2:	b490      	push	{r4, r7}
     ac4:	b082      	sub	sp, #8
     ac6:	af00      	add	r7, sp, #0
     ac8:	6078      	str	r0, [r7, #4]
     aca:	460b      	mov	r3, r1
     acc:	70fb      	strb	r3, [r7, #3]
     ace:	4613      	mov	r3, r2
     ad0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     ad2:	78fa      	ldrb	r2, [r7, #3]
     ad4:	78bb      	ldrb	r3, [r7, #2]
     ad6:	78f8      	ldrb	r0, [r7, #3]
     ad8:	78b9      	ldrb	r1, [r7, #2]
     ada:	687c      	ldr	r4, [r7, #4]
     adc:	01c0      	lsls	r0, r0, #7
     ade:	4420      	add	r0, r4
     ae0:	4401      	add	r1, r0
     ae2:	3140      	adds	r1, #64	; 0x40
     ae4:	7809      	ldrb	r1, [r1, #0]
     ae6:	b2c9      	uxtb	r1, r1
     ae8:	f041 0104 	orr.w	r1, r1, #4
     aec:	b2c8      	uxtb	r0, r1
     aee:	6879      	ldr	r1, [r7, #4]
     af0:	01d2      	lsls	r2, r2, #7
     af2:	440a      	add	r2, r1
     af4:	4413      	add	r3, r2
     af6:	3340      	adds	r3, #64	; 0x40
     af8:	4602      	mov	r2, r0
     afa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     afc:	bf00      	nop
     afe:	3708      	adds	r7, #8
     b00:	46bd      	mov	sp, r7
     b02:	bc90      	pop	{r4, r7}
     b04:	4770      	bx	lr

00000b06 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     b06:	b490      	push	{r4, r7}
     b08:	b082      	sub	sp, #8
     b0a:	af00      	add	r7, sp, #0
     b0c:	6078      	str	r0, [r7, #4]
     b0e:	460b      	mov	r3, r1
     b10:	70fb      	strb	r3, [r7, #3]
     b12:	4613      	mov	r3, r2
     b14:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b16:	78fa      	ldrb	r2, [r7, #3]
     b18:	78bb      	ldrb	r3, [r7, #2]
     b1a:	78f8      	ldrb	r0, [r7, #3]
     b1c:	78b9      	ldrb	r1, [r7, #2]
     b1e:	687c      	ldr	r4, [r7, #4]
     b20:	01c0      	lsls	r0, r0, #7
     b22:	4420      	add	r0, r4
     b24:	4401      	add	r1, r0
     b26:	3140      	adds	r1, #64	; 0x40
     b28:	7809      	ldrb	r1, [r1, #0]
     b2a:	b2c9      	uxtb	r1, r1
     b2c:	f021 0104 	bic.w	r1, r1, #4
     b30:	b2c8      	uxtb	r0, r1
     b32:	6879      	ldr	r1, [r7, #4]
     b34:	01d2      	lsls	r2, r2, #7
     b36:	440a      	add	r2, r1
     b38:	4413      	add	r3, r2
     b3a:	3340      	adds	r3, #64	; 0x40
     b3c:	4602      	mov	r2, r0
     b3e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b40:	bf00      	nop
     b42:	3708      	adds	r7, #8
     b44:	46bd      	mov	sp, r7
     b46:	bc90      	pop	{r4, r7}
     b48:	4770      	bx	lr

00000b4a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     b4a:	b480      	push	{r7}
     b4c:	b085      	sub	sp, #20
     b4e:	af00      	add	r7, sp, #0
     b50:	60f8      	str	r0, [r7, #12]
     b52:	460b      	mov	r3, r1
     b54:	607a      	str	r2, [r7, #4]
     b56:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b58:	7afb      	ldrb	r3, [r7, #11]
     b5a:	68fa      	ldr	r2, [r7, #12]
     b5c:	01db      	lsls	r3, r3, #7
     b5e:	4413      	add	r3, r2
     b60:	3328      	adds	r3, #40	; 0x28
     b62:	687a      	ldr	r2, [r7, #4]
     b64:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b66:	bf00      	nop
     b68:	3714      	adds	r7, #20
     b6a:	46bd      	mov	sp, r7
     b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b70:	4770      	bx	lr
	...

00000b74 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     b74:	b580      	push	{r7, lr}
     b76:	b082      	sub	sp, #8
     b78:	af00      	add	r7, sp, #0
     b7a:	4603      	mov	r3, r0
     b7c:	6039      	str	r1, [r7, #0]
     b7e:	71fb      	strb	r3, [r7, #7]
     b80:	4613      	mov	r3, r2
     b82:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     b84:	79bb      	ldrb	r3, [r7, #6]
     b86:	2b01      	cmp	r3, #1
     b88:	d01c      	beq.n	bc4 <_gpio_set_direction+0x50>
     b8a:	2b02      	cmp	r3, #2
     b8c:	d037      	beq.n	bfe <_gpio_set_direction+0x8a>
     b8e:	2b00      	cmp	r3, #0
     b90:	d14e      	bne.n	c30 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     b92:	79fb      	ldrb	r3, [r7, #7]
     b94:	683a      	ldr	r2, [r7, #0]
     b96:	4619      	mov	r1, r3
     b98:	482a      	ldr	r0, [pc, #168]	; (c44 <_gpio_set_direction+0xd0>)
     b9a:	4b2b      	ldr	r3, [pc, #172]	; (c48 <_gpio_set_direction+0xd4>)
     b9c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     b9e:	683b      	ldr	r3, [r7, #0]
     ba0:	b29b      	uxth	r3, r3
     ba2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     ba6:	79fb      	ldrb	r3, [r7, #7]
     ba8:	4619      	mov	r1, r3
     baa:	4826      	ldr	r0, [pc, #152]	; (c44 <_gpio_set_direction+0xd0>)
     bac:	4b27      	ldr	r3, [pc, #156]	; (c4c <_gpio_set_direction+0xd8>)
     bae:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     bb0:	683b      	ldr	r3, [r7, #0]
     bb2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     bb4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     bb8:	79fb      	ldrb	r3, [r7, #7]
     bba:	4619      	mov	r1, r3
     bbc:	4821      	ldr	r0, [pc, #132]	; (c44 <_gpio_set_direction+0xd0>)
     bbe:	4b23      	ldr	r3, [pc, #140]	; (c4c <_gpio_set_direction+0xd8>)
     bc0:	4798      	blx	r3
		break;
     bc2:	e03a      	b.n	c3a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     bc4:	79fb      	ldrb	r3, [r7, #7]
     bc6:	683a      	ldr	r2, [r7, #0]
     bc8:	4619      	mov	r1, r3
     bca:	481e      	ldr	r0, [pc, #120]	; (c44 <_gpio_set_direction+0xd0>)
     bcc:	4b1e      	ldr	r3, [pc, #120]	; (c48 <_gpio_set_direction+0xd4>)
     bce:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     bd0:	683b      	ldr	r3, [r7, #0]
     bd2:	b29b      	uxth	r3, r3
     bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     bdc:	79f9      	ldrb	r1, [r7, #7]
     bde:	461a      	mov	r2, r3
     be0:	4818      	ldr	r0, [pc, #96]	; (c44 <_gpio_set_direction+0xd0>)
     be2:	4b1a      	ldr	r3, [pc, #104]	; (c4c <_gpio_set_direction+0xd8>)
     be4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     be6:	683b      	ldr	r3, [r7, #0]
     be8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     bea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     bf2:	79f9      	ldrb	r1, [r7, #7]
     bf4:	461a      	mov	r2, r3
     bf6:	4813      	ldr	r0, [pc, #76]	; (c44 <_gpio_set_direction+0xd0>)
     bf8:	4b14      	ldr	r3, [pc, #80]	; (c4c <_gpio_set_direction+0xd8>)
     bfa:	4798      	blx	r3
		break;
     bfc:	e01d      	b.n	c3a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     bfe:	79fb      	ldrb	r3, [r7, #7]
     c00:	683a      	ldr	r2, [r7, #0]
     c02:	4619      	mov	r1, r3
     c04:	480f      	ldr	r0, [pc, #60]	; (c44 <_gpio_set_direction+0xd0>)
     c06:	4b12      	ldr	r3, [pc, #72]	; (c50 <_gpio_set_direction+0xdc>)
     c08:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     c0a:	683b      	ldr	r3, [r7, #0]
     c0c:	b29b      	uxth	r3, r3
     c0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     c12:	79fb      	ldrb	r3, [r7, #7]
     c14:	4619      	mov	r1, r3
     c16:	480b      	ldr	r0, [pc, #44]	; (c44 <_gpio_set_direction+0xd0>)
     c18:	4b0c      	ldr	r3, [pc, #48]	; (c4c <_gpio_set_direction+0xd8>)
     c1a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     c1c:	683b      	ldr	r3, [r7, #0]
     c1e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     c20:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     c24:	79fb      	ldrb	r3, [r7, #7]
     c26:	4619      	mov	r1, r3
     c28:	4806      	ldr	r0, [pc, #24]	; (c44 <_gpio_set_direction+0xd0>)
     c2a:	4b08      	ldr	r3, [pc, #32]	; (c4c <_gpio_set_direction+0xd8>)
     c2c:	4798      	blx	r3
		break;
     c2e:	e004      	b.n	c3a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     c30:	2246      	movs	r2, #70	; 0x46
     c32:	4908      	ldr	r1, [pc, #32]	; (c54 <_gpio_set_direction+0xe0>)
     c34:	2000      	movs	r0, #0
     c36:	4b08      	ldr	r3, [pc, #32]	; (c58 <_gpio_set_direction+0xe4>)
     c38:	4798      	blx	r3
	}
}
     c3a:	bf00      	nop
     c3c:	3708      	adds	r7, #8
     c3e:	46bd      	mov	sp, r7
     c40:	bd80      	pop	{r7, pc}
     c42:	bf00      	nop
     c44:	41008000 	.word	0x41008000
     c48:	00000933 	.word	0x00000933
     c4c:	00000b4b 	.word	0x00000b4b
     c50:	0000090b 	.word	0x0000090b
     c54:	0000ece8 	.word	0x0000ece8
     c58:	0000349d 	.word	0x0000349d

00000c5c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     c5c:	b580      	push	{r7, lr}
     c5e:	b082      	sub	sp, #8
     c60:	af00      	add	r7, sp, #0
     c62:	4603      	mov	r3, r0
     c64:	6039      	str	r1, [r7, #0]
     c66:	71fb      	strb	r3, [r7, #7]
     c68:	4613      	mov	r3, r2
     c6a:	71bb      	strb	r3, [r7, #6]
	if (level) {
     c6c:	79bb      	ldrb	r3, [r7, #6]
     c6e:	2b00      	cmp	r3, #0
     c70:	d006      	beq.n	c80 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     c72:	79fb      	ldrb	r3, [r7, #7]
     c74:	683a      	ldr	r2, [r7, #0]
     c76:	4619      	mov	r1, r3
     c78:	4806      	ldr	r0, [pc, #24]	; (c94 <_gpio_set_level+0x38>)
     c7a:	4b07      	ldr	r3, [pc, #28]	; (c98 <_gpio_set_level+0x3c>)
     c7c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     c7e:	e005      	b.n	c8c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     c80:	79fb      	ldrb	r3, [r7, #7]
     c82:	683a      	ldr	r2, [r7, #0]
     c84:	4619      	mov	r1, r3
     c86:	4803      	ldr	r0, [pc, #12]	; (c94 <_gpio_set_level+0x38>)
     c88:	4b04      	ldr	r3, [pc, #16]	; (c9c <_gpio_set_level+0x40>)
     c8a:	4798      	blx	r3
}
     c8c:	bf00      	nop
     c8e:	3708      	adds	r7, #8
     c90:	46bd      	mov	sp, r7
     c92:	bd80      	pop	{r7, pc}
     c94:	41008000 	.word	0x41008000
     c98:	0000095b 	.word	0x0000095b
     c9c:	00000983 	.word	0x00000983

00000ca0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     ca0:	b580      	push	{r7, lr}
     ca2:	b082      	sub	sp, #8
     ca4:	af00      	add	r7, sp, #0
     ca6:	4603      	mov	r3, r0
     ca8:	71fb      	strb	r3, [r7, #7]
     caa:	460b      	mov	r3, r1
     cac:	71bb      	strb	r3, [r7, #6]
     cae:	4613      	mov	r3, r2
     cb0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     cb2:	797b      	ldrb	r3, [r7, #5]
     cb4:	2b01      	cmp	r3, #1
     cb6:	d00a      	beq.n	cce <_gpio_set_pin_pull_mode+0x2e>
     cb8:	2b02      	cmp	r3, #2
     cba:	d01f      	beq.n	cfc <_gpio_set_pin_pull_mode+0x5c>
     cbc:	2b00      	cmp	r3, #0
     cbe:	d134      	bne.n	d2a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     cc0:	79ba      	ldrb	r2, [r7, #6]
     cc2:	79fb      	ldrb	r3, [r7, #7]
     cc4:	4619      	mov	r1, r3
     cc6:	481e      	ldr	r0, [pc, #120]	; (d40 <_gpio_set_pin_pull_mode+0xa0>)
     cc8:	4b1e      	ldr	r3, [pc, #120]	; (d44 <_gpio_set_pin_pull_mode+0xa4>)
     cca:	4798      	blx	r3
		break;
     ccc:	e033      	b.n	d36 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     cce:	79bb      	ldrb	r3, [r7, #6]
     cd0:	2201      	movs	r2, #1
     cd2:	409a      	lsls	r2, r3
     cd4:	79fb      	ldrb	r3, [r7, #7]
     cd6:	4619      	mov	r1, r3
     cd8:	4819      	ldr	r0, [pc, #100]	; (d40 <_gpio_set_pin_pull_mode+0xa0>)
     cda:	4b1b      	ldr	r3, [pc, #108]	; (d48 <_gpio_set_pin_pull_mode+0xa8>)
     cdc:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     cde:	79ba      	ldrb	r2, [r7, #6]
     ce0:	79fb      	ldrb	r3, [r7, #7]
     ce2:	4619      	mov	r1, r3
     ce4:	4816      	ldr	r0, [pc, #88]	; (d40 <_gpio_set_pin_pull_mode+0xa0>)
     ce6:	4b19      	ldr	r3, [pc, #100]	; (d4c <_gpio_set_pin_pull_mode+0xac>)
     ce8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     cea:	79bb      	ldrb	r3, [r7, #6]
     cec:	2201      	movs	r2, #1
     cee:	409a      	lsls	r2, r3
     cf0:	79fb      	ldrb	r3, [r7, #7]
     cf2:	4619      	mov	r1, r3
     cf4:	4812      	ldr	r0, [pc, #72]	; (d40 <_gpio_set_pin_pull_mode+0xa0>)
     cf6:	4b16      	ldr	r3, [pc, #88]	; (d50 <_gpio_set_pin_pull_mode+0xb0>)
     cf8:	4798      	blx	r3
		break;
     cfa:	e01c      	b.n	d36 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     cfc:	79bb      	ldrb	r3, [r7, #6]
     cfe:	2201      	movs	r2, #1
     d00:	409a      	lsls	r2, r3
     d02:	79fb      	ldrb	r3, [r7, #7]
     d04:	4619      	mov	r1, r3
     d06:	480e      	ldr	r0, [pc, #56]	; (d40 <_gpio_set_pin_pull_mode+0xa0>)
     d08:	4b0f      	ldr	r3, [pc, #60]	; (d48 <_gpio_set_pin_pull_mode+0xa8>)
     d0a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     d0c:	79ba      	ldrb	r2, [r7, #6]
     d0e:	79fb      	ldrb	r3, [r7, #7]
     d10:	4619      	mov	r1, r3
     d12:	480b      	ldr	r0, [pc, #44]	; (d40 <_gpio_set_pin_pull_mode+0xa0>)
     d14:	4b0d      	ldr	r3, [pc, #52]	; (d4c <_gpio_set_pin_pull_mode+0xac>)
     d16:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     d18:	79bb      	ldrb	r3, [r7, #6]
     d1a:	2201      	movs	r2, #1
     d1c:	409a      	lsls	r2, r3
     d1e:	79fb      	ldrb	r3, [r7, #7]
     d20:	4619      	mov	r1, r3
     d22:	4807      	ldr	r0, [pc, #28]	; (d40 <_gpio_set_pin_pull_mode+0xa0>)
     d24:	4b0b      	ldr	r3, [pc, #44]	; (d54 <_gpio_set_pin_pull_mode+0xb4>)
     d26:	4798      	blx	r3
		break;
     d28:	e005      	b.n	d36 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     d2a:	2289      	movs	r2, #137	; 0x89
     d2c:	490a      	ldr	r1, [pc, #40]	; (d58 <_gpio_set_pin_pull_mode+0xb8>)
     d2e:	2000      	movs	r0, #0
     d30:	4b0a      	ldr	r3, [pc, #40]	; (d5c <_gpio_set_pin_pull_mode+0xbc>)
     d32:	4798      	blx	r3
		break;
     d34:	bf00      	nop
	}
}
     d36:	bf00      	nop
     d38:	3708      	adds	r7, #8
     d3a:	46bd      	mov	sp, r7
     d3c:	bd80      	pop	{r7, pc}
     d3e:	bf00      	nop
     d40:	41008000 	.word	0x41008000
     d44:	00000b07 	.word	0x00000b07
     d48:	00000933 	.word	0x00000933
     d4c:	00000ac3 	.word	0x00000ac3
     d50:	0000095b 	.word	0x0000095b
     d54:	00000983 	.word	0x00000983
     d58:	0000ece8 	.word	0x0000ece8
     d5c:	0000349d 	.word	0x0000349d

00000d60 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     d60:	b590      	push	{r4, r7, lr}
     d62:	b085      	sub	sp, #20
     d64:	af00      	add	r7, sp, #0
     d66:	6078      	str	r0, [r7, #4]
     d68:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     d6a:	687b      	ldr	r3, [r7, #4]
     d6c:	095b      	lsrs	r3, r3, #5
     d6e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     d70:	687b      	ldr	r3, [r7, #4]
     d72:	b2db      	uxtb	r3, r3
     d74:	f003 031f 	and.w	r3, r3, #31
     d78:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     d7a:	683b      	ldr	r3, [r7, #0]
     d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
     d80:	d106      	bne.n	d90 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     d82:	7bba      	ldrb	r2, [r7, #14]
     d84:	7bf9      	ldrb	r1, [r7, #15]
     d86:	2300      	movs	r3, #0
     d88:	4812      	ldr	r0, [pc, #72]	; (dd4 <_gpio_set_pin_function+0x74>)
     d8a:	4c13      	ldr	r4, [pc, #76]	; (dd8 <_gpio_set_pin_function+0x78>)
     d8c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     d8e:	e01d      	b.n	dcc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     d90:	7bba      	ldrb	r2, [r7, #14]
     d92:	7bf9      	ldrb	r1, [r7, #15]
     d94:	2301      	movs	r3, #1
     d96:	480f      	ldr	r0, [pc, #60]	; (dd4 <_gpio_set_pin_function+0x74>)
     d98:	4c0f      	ldr	r4, [pc, #60]	; (dd8 <_gpio_set_pin_function+0x78>)
     d9a:	47a0      	blx	r4
		if (pin & 1) {
     d9c:	7bbb      	ldrb	r3, [r7, #14]
     d9e:	f003 0301 	and.w	r3, r3, #1
     da2:	2b00      	cmp	r3, #0
     da4:	d009      	beq.n	dba <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     da6:	7bbb      	ldrb	r3, [r7, #14]
     da8:	085b      	lsrs	r3, r3, #1
     daa:	b2da      	uxtb	r2, r3
     dac:	683b      	ldr	r3, [r7, #0]
     dae:	b2db      	uxtb	r3, r3
     db0:	7bf9      	ldrb	r1, [r7, #15]
     db2:	4808      	ldr	r0, [pc, #32]	; (dd4 <_gpio_set_pin_function+0x74>)
     db4:	4c09      	ldr	r4, [pc, #36]	; (ddc <_gpio_set_pin_function+0x7c>)
     db6:	47a0      	blx	r4
}
     db8:	e008      	b.n	dcc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     dba:	7bbb      	ldrb	r3, [r7, #14]
     dbc:	085b      	lsrs	r3, r3, #1
     dbe:	b2da      	uxtb	r2, r3
     dc0:	683b      	ldr	r3, [r7, #0]
     dc2:	b2db      	uxtb	r3, r3
     dc4:	7bf9      	ldrb	r1, [r7, #15]
     dc6:	4803      	ldr	r0, [pc, #12]	; (dd4 <_gpio_set_pin_function+0x74>)
     dc8:	4c05      	ldr	r4, [pc, #20]	; (de0 <_gpio_set_pin_function+0x80>)
     dca:	47a0      	blx	r4
}
     dcc:	bf00      	nop
     dce:	3714      	adds	r7, #20
     dd0:	46bd      	mov	sp, r7
     dd2:	bd90      	pop	{r4, r7, pc}
     dd4:	41008000 	.word	0x41008000
     dd8:	00000a69 	.word	0x00000a69
     ddc:	00000a0b 	.word	0x00000a0b
     de0:	000009ab 	.word	0x000009ab

00000de4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     de4:	b580      	push	{r7, lr}
     de6:	b082      	sub	sp, #8
     de8:	af00      	add	r7, sp, #0
     dea:	4603      	mov	r3, r0
     dec:	460a      	mov	r2, r1
     dee:	71fb      	strb	r3, [r7, #7]
     df0:	4613      	mov	r3, r2
     df2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     df4:	79fb      	ldrb	r3, [r7, #7]
     df6:	095b      	lsrs	r3, r3, #5
     df8:	b2d8      	uxtb	r0, r3
     dfa:	79fb      	ldrb	r3, [r7, #7]
     dfc:	f003 031f 	and.w	r3, r3, #31
     e00:	b2db      	uxtb	r3, r3
     e02:	79ba      	ldrb	r2, [r7, #6]
     e04:	4619      	mov	r1, r3
     e06:	4b03      	ldr	r3, [pc, #12]	; (e14 <gpio_set_pin_pull_mode+0x30>)
     e08:	4798      	blx	r3
}
     e0a:	bf00      	nop
     e0c:	3708      	adds	r7, #8
     e0e:	46bd      	mov	sp, r7
     e10:	bd80      	pop	{r7, pc}
     e12:	bf00      	nop
     e14:	00000ca1 	.word	0x00000ca1

00000e18 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     e18:	b580      	push	{r7, lr}
     e1a:	b082      	sub	sp, #8
     e1c:	af00      	add	r7, sp, #0
     e1e:	6078      	str	r0, [r7, #4]
     e20:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     e22:	6839      	ldr	r1, [r7, #0]
     e24:	6878      	ldr	r0, [r7, #4]
     e26:	4b03      	ldr	r3, [pc, #12]	; (e34 <gpio_set_pin_function+0x1c>)
     e28:	4798      	blx	r3
}
     e2a:	bf00      	nop
     e2c:	3708      	adds	r7, #8
     e2e:	46bd      	mov	sp, r7
     e30:	bd80      	pop	{r7, pc}
     e32:	bf00      	nop
     e34:	00000d61 	.word	0x00000d61

00000e38 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     e38:	b580      	push	{r7, lr}
     e3a:	b082      	sub	sp, #8
     e3c:	af00      	add	r7, sp, #0
     e3e:	4603      	mov	r3, r0
     e40:	460a      	mov	r2, r1
     e42:	71fb      	strb	r3, [r7, #7]
     e44:	4613      	mov	r3, r2
     e46:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     e48:	79fb      	ldrb	r3, [r7, #7]
     e4a:	095b      	lsrs	r3, r3, #5
     e4c:	b2d8      	uxtb	r0, r3
     e4e:	79fb      	ldrb	r3, [r7, #7]
     e50:	f003 031f 	and.w	r3, r3, #31
     e54:	2201      	movs	r2, #1
     e56:	fa02 f303 	lsl.w	r3, r2, r3
     e5a:	79ba      	ldrb	r2, [r7, #6]
     e5c:	4619      	mov	r1, r3
     e5e:	4b03      	ldr	r3, [pc, #12]	; (e6c <gpio_set_pin_direction+0x34>)
     e60:	4798      	blx	r3
}
     e62:	bf00      	nop
     e64:	3708      	adds	r7, #8
     e66:	46bd      	mov	sp, r7
     e68:	bd80      	pop	{r7, pc}
     e6a:	bf00      	nop
     e6c:	00000b75 	.word	0x00000b75

00000e70 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     e70:	b580      	push	{r7, lr}
     e72:	b082      	sub	sp, #8
     e74:	af00      	add	r7, sp, #0
     e76:	4603      	mov	r3, r0
     e78:	460a      	mov	r2, r1
     e7a:	71fb      	strb	r3, [r7, #7]
     e7c:	4613      	mov	r3, r2
     e7e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     e80:	79fb      	ldrb	r3, [r7, #7]
     e82:	095b      	lsrs	r3, r3, #5
     e84:	b2d8      	uxtb	r0, r3
     e86:	79fb      	ldrb	r3, [r7, #7]
     e88:	f003 031f 	and.w	r3, r3, #31
     e8c:	2201      	movs	r2, #1
     e8e:	fa02 f303 	lsl.w	r3, r2, r3
     e92:	79ba      	ldrb	r2, [r7, #6]
     e94:	4619      	mov	r1, r3
     e96:	4b03      	ldr	r3, [pc, #12]	; (ea4 <gpio_set_pin_level+0x34>)
     e98:	4798      	blx	r3
}
     e9a:	bf00      	nop
     e9c:	3708      	adds	r7, #8
     e9e:	46bd      	mov	sp, r7
     ea0:	bd80      	pop	{r7, pc}
     ea2:	bf00      	nop
     ea4:	00000c5d 	.word	0x00000c5d

00000ea8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     ea8:	b580      	push	{r7, lr}
     eaa:	af00      	add	r7, sp, #0
	_init_chip();
     eac:	4b01      	ldr	r3, [pc, #4]	; (eb4 <init_mcu+0xc>)
     eae:	4798      	blx	r3
}
     eb0:	bf00      	nop
     eb2:	bd80      	pop	{r7, pc}
     eb4:	000040ad 	.word	0x000040ad

00000eb8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     eb8:	b580      	push	{r7, lr}
     eba:	b082      	sub	sp, #8
     ebc:	af00      	add	r7, sp, #0
     ebe:	6078      	str	r0, [r7, #4]
     ec0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     ec2:	687b      	ldr	r3, [r7, #4]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d004      	beq.n	ed2 <wdt_init+0x1a>
     ec8:	683b      	ldr	r3, [r7, #0]
     eca:	2b00      	cmp	r3, #0
     ecc:	d001      	beq.n	ed2 <wdt_init+0x1a>
     ece:	2301      	movs	r3, #1
     ed0:	e000      	b.n	ed4 <wdt_init+0x1c>
     ed2:	2300      	movs	r3, #0
     ed4:	f003 0301 	and.w	r3, r3, #1
     ed8:	b2db      	uxtb	r3, r3
     eda:	2248      	movs	r2, #72	; 0x48
     edc:	4907      	ldr	r1, [pc, #28]	; (efc <wdt_init+0x44>)
     ede:	4618      	mov	r0, r3
     ee0:	4b07      	ldr	r3, [pc, #28]	; (f00 <wdt_init+0x48>)
     ee2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     ee4:	687b      	ldr	r3, [r7, #4]
     ee6:	683a      	ldr	r2, [r7, #0]
     ee8:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     eea:	687b      	ldr	r3, [r7, #4]
     eec:	4618      	mov	r0, r3
     eee:	4b05      	ldr	r3, [pc, #20]	; (f04 <wdt_init+0x4c>)
     ef0:	4798      	blx	r3
     ef2:	4603      	mov	r3, r0
}
     ef4:	4618      	mov	r0, r3
     ef6:	3708      	adds	r7, #8
     ef8:	46bd      	mov	sp, r7
     efa:	bd80      	pop	{r7, pc}
     efc:	0000ed04 	.word	0x0000ed04
     f00:	0000349d 	.word	0x0000349d
     f04:	0000aef5 	.word	0x0000aef5

00000f08 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     f08:	b580      	push	{r7, lr}
     f0a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     f0c:	4804      	ldr	r0, [pc, #16]	; (f20 <CRC_CALC_init+0x18>)
     f0e:	4b05      	ldr	r3, [pc, #20]	; (f24 <CRC_CALC_init+0x1c>)
     f10:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     f12:	4905      	ldr	r1, [pc, #20]	; (f28 <CRC_CALC_init+0x20>)
     f14:	4805      	ldr	r0, [pc, #20]	; (f2c <CRC_CALC_init+0x24>)
     f16:	4b06      	ldr	r3, [pc, #24]	; (f30 <CRC_CALC_init+0x28>)
     f18:	4798      	blx	r3
}
     f1a:	bf00      	nop
     f1c:	bd80      	pop	{r7, pc}
     f1e:	bf00      	nop
     f20:	40000800 	.word	0x40000800
     f24:	0000074b 	.word	0x0000074b
     f28:	41002000 	.word	0x41002000
     f2c:	20001218 	.word	0x20001218
     f30:	00001c7d 	.word	0x00001c7d

00000f34 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     f34:	b580      	push	{r7, lr}
     f36:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f38:	2244      	movs	r2, #68	; 0x44
     f3a:	2104      	movs	r1, #4
     f3c:	4838      	ldr	r0, [pc, #224]	; (1020 <EXTERNAL_IRQ_0_init+0xec>)
     f3e:	4b39      	ldr	r3, [pc, #228]	; (1024 <EXTERNAL_IRQ_0_init+0xf0>)
     f40:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     f42:	4839      	ldr	r0, [pc, #228]	; (1028 <EXTERNAL_IRQ_0_init+0xf4>)
     f44:	4b39      	ldr	r3, [pc, #228]	; (102c <EXTERNAL_IRQ_0_init+0xf8>)
     f46:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
     f48:	2101      	movs	r1, #1
     f4a:	2040      	movs	r0, #64	; 0x40
     f4c:	4b38      	ldr	r3, [pc, #224]	; (1030 <EXTERNAL_IRQ_0_init+0xfc>)
     f4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
     f50:	2100      	movs	r1, #0
     f52:	2040      	movs	r0, #64	; 0x40
     f54:	4b37      	ldr	r3, [pc, #220]	; (1034 <EXTERNAL_IRQ_0_init+0x100>)
     f56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
     f58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     f5c:	2040      	movs	r0, #64	; 0x40
     f5e:	4b36      	ldr	r3, [pc, #216]	; (1038 <EXTERNAL_IRQ_0_init+0x104>)
     f60:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
     f62:	2101      	movs	r1, #1
     f64:	2003      	movs	r0, #3
     f66:	4b32      	ldr	r3, [pc, #200]	; (1030 <EXTERNAL_IRQ_0_init+0xfc>)
     f68:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
     f6a:	2102      	movs	r1, #2
     f6c:	2003      	movs	r0, #3
     f6e:	4b31      	ldr	r3, [pc, #196]	; (1034 <EXTERNAL_IRQ_0_init+0x100>)
     f70:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
     f72:	f44f 3140 	mov.w	r1, #196608	; 0x30000
     f76:	2003      	movs	r0, #3
     f78:	4b2f      	ldr	r3, [pc, #188]	; (1038 <EXTERNAL_IRQ_0_init+0x104>)
     f7a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
     f7c:	2101      	movs	r1, #1
     f7e:	2004      	movs	r0, #4
     f80:	4b2b      	ldr	r3, [pc, #172]	; (1030 <EXTERNAL_IRQ_0_init+0xfc>)
     f82:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
     f84:	2102      	movs	r1, #2
     f86:	2004      	movs	r0, #4
     f88:	4b2a      	ldr	r3, [pc, #168]	; (1034 <EXTERNAL_IRQ_0_init+0x100>)
     f8a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
     f8c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     f90:	2004      	movs	r0, #4
     f92:	4b29      	ldr	r3, [pc, #164]	; (1038 <EXTERNAL_IRQ_0_init+0x104>)
     f94:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
     f96:	2101      	movs	r1, #1
     f98:	2005      	movs	r0, #5
     f9a:	4b25      	ldr	r3, [pc, #148]	; (1030 <EXTERNAL_IRQ_0_init+0xfc>)
     f9c:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
     f9e:	2102      	movs	r1, #2
     fa0:	2005      	movs	r0, #5
     fa2:	4b24      	ldr	r3, [pc, #144]	; (1034 <EXTERNAL_IRQ_0_init+0x100>)
     fa4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
     fa6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
     faa:	2005      	movs	r0, #5
     fac:	4b22      	ldr	r3, [pc, #136]	; (1038 <EXTERNAL_IRQ_0_init+0x104>)
     fae:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
     fb0:	2101      	movs	r1, #1
     fb2:	2056      	movs	r0, #86	; 0x56
     fb4:	4b1e      	ldr	r3, [pc, #120]	; (1030 <EXTERNAL_IRQ_0_init+0xfc>)
     fb6:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
     fb8:	2102      	movs	r1, #2
     fba:	2056      	movs	r0, #86	; 0x56
     fbc:	4b1d      	ldr	r3, [pc, #116]	; (1034 <EXTERNAL_IRQ_0_init+0x100>)
     fbe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
     fc0:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
     fc4:	2056      	movs	r0, #86	; 0x56
     fc6:	4b1c      	ldr	r3, [pc, #112]	; (1038 <EXTERNAL_IRQ_0_init+0x104>)
     fc8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
     fca:	2101      	movs	r1, #1
     fcc:	2057      	movs	r0, #87	; 0x57
     fce:	4b18      	ldr	r3, [pc, #96]	; (1030 <EXTERNAL_IRQ_0_init+0xfc>)
     fd0:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
     fd2:	2102      	movs	r1, #2
     fd4:	2057      	movs	r0, #87	; 0x57
     fd6:	4b17      	ldr	r3, [pc, #92]	; (1034 <EXTERNAL_IRQ_0_init+0x100>)
     fd8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
     fda:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
     fde:	2057      	movs	r0, #87	; 0x57
     fe0:	4b15      	ldr	r3, [pc, #84]	; (1038 <EXTERNAL_IRQ_0_init+0x104>)
     fe2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
     fe4:	2101      	movs	r1, #1
     fe6:	2028      	movs	r0, #40	; 0x28
     fe8:	4b11      	ldr	r3, [pc, #68]	; (1030 <EXTERNAL_IRQ_0_init+0xfc>)
     fea:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
     fec:	2100      	movs	r1, #0
     fee:	2028      	movs	r0, #40	; 0x28
     ff0:	4b10      	ldr	r3, [pc, #64]	; (1034 <EXTERNAL_IRQ_0_init+0x100>)
     ff2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
     ff4:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
     ff8:	2028      	movs	r0, #40	; 0x28
     ffa:	4b0f      	ldr	r3, [pc, #60]	; (1038 <EXTERNAL_IRQ_0_init+0x104>)
     ffc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
     ffe:	2101      	movs	r1, #1
    1000:	2029      	movs	r0, #41	; 0x29
    1002:	4b0b      	ldr	r3, [pc, #44]	; (1030 <EXTERNAL_IRQ_0_init+0xfc>)
    1004:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1006:	2100      	movs	r1, #0
    1008:	2029      	movs	r0, #41	; 0x29
    100a:	4b0a      	ldr	r3, [pc, #40]	; (1034 <EXTERNAL_IRQ_0_init+0x100>)
    100c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    100e:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1012:	2029      	movs	r0, #41	; 0x29
    1014:	4b08      	ldr	r3, [pc, #32]	; (1038 <EXTERNAL_IRQ_0_init+0x104>)
    1016:	4798      	blx	r3

	ext_irq_init();
    1018:	4b08      	ldr	r3, [pc, #32]	; (103c <EXTERNAL_IRQ_0_init+0x108>)
    101a:	4798      	blx	r3
}
    101c:	bf00      	nop
    101e:	bd80      	pop	{r7, pc}
    1020:	40001c00 	.word	0x40001c00
    1024:	000005e5 	.word	0x000005e5
    1028:	40000800 	.word	0x40000800
    102c:	000006cb 	.word	0x000006cb
    1030:	00000e39 	.word	0x00000e39
    1034:	00000de5 	.word	0x00000de5
    1038:	00000e19 	.word	0x00000e19
    103c:	00001d45 	.word	0x00001d45

00001040 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1040:	b580      	push	{r7, lr}
    1042:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1044:	2244      	movs	r2, #68	; 0x44
    1046:	210b      	movs	r1, #11
    1048:	4807      	ldr	r0, [pc, #28]	; (1068 <EVENT_SYSTEM_0_init+0x28>)
    104a:	4b08      	ldr	r3, [pc, #32]	; (106c <EVENT_SYSTEM_0_init+0x2c>)
    104c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    104e:	2244      	movs	r2, #68	; 0x44
    1050:	210c      	movs	r1, #12
    1052:	4805      	ldr	r0, [pc, #20]	; (1068 <EVENT_SYSTEM_0_init+0x28>)
    1054:	4b05      	ldr	r3, [pc, #20]	; (106c <EVENT_SYSTEM_0_init+0x2c>)
    1056:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1058:	4805      	ldr	r0, [pc, #20]	; (1070 <EVENT_SYSTEM_0_init+0x30>)
    105a:	4b06      	ldr	r3, [pc, #24]	; (1074 <EVENT_SYSTEM_0_init+0x34>)
    105c:	4798      	blx	r3

	event_system_init();
    105e:	4b06      	ldr	r3, [pc, #24]	; (1078 <EVENT_SYSTEM_0_init+0x38>)
    1060:	4798      	blx	r3
}
    1062:	bf00      	nop
    1064:	bd80      	pop	{r7, pc}
    1066:	bf00      	nop
    1068:	40001c00 	.word	0x40001c00
    106c:	000005e5 	.word	0x000005e5
    1070:	40000800 	.word	0x40000800
    1074:	0000076b 	.word	0x0000076b
    1078:	00001d31 	.word	0x00001d31

0000107c <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    107c:	b580      	push	{r7, lr}
    107e:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1080:	2101      	movs	r1, #1
    1082:	202b      	movs	r0, #43	; 0x2b
    1084:	4b2b      	ldr	r3, [pc, #172]	; (1134 <QSPI_N25Q256_PORT_init+0xb8>)
    1086:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1088:	2100      	movs	r1, #0
    108a:	202b      	movs	r0, #43	; 0x2b
    108c:	4b2a      	ldr	r3, [pc, #168]	; (1138 <QSPI_N25Q256_PORT_init+0xbc>)
    108e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1090:	492a      	ldr	r1, [pc, #168]	; (113c <QSPI_N25Q256_PORT_init+0xc0>)
    1092:	202b      	movs	r0, #43	; 0x2b
    1094:	4b2a      	ldr	r3, [pc, #168]	; (1140 <QSPI_N25Q256_PORT_init+0xc4>)
    1096:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1098:	2102      	movs	r1, #2
    109a:	2008      	movs	r0, #8
    109c:	4b25      	ldr	r3, [pc, #148]	; (1134 <QSPI_N25Q256_PORT_init+0xb8>)
    109e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    10a0:	2100      	movs	r1, #0
    10a2:	2008      	movs	r0, #8
    10a4:	4b27      	ldr	r3, [pc, #156]	; (1144 <QSPI_N25Q256_PORT_init+0xc8>)
    10a6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    10a8:	2100      	movs	r1, #0
    10aa:	2008      	movs	r0, #8
    10ac:	4b22      	ldr	r3, [pc, #136]	; (1138 <QSPI_N25Q256_PORT_init+0xbc>)
    10ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    10b0:	4925      	ldr	r1, [pc, #148]	; (1148 <QSPI_N25Q256_PORT_init+0xcc>)
    10b2:	2008      	movs	r0, #8
    10b4:	4b22      	ldr	r3, [pc, #136]	; (1140 <QSPI_N25Q256_PORT_init+0xc4>)
    10b6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    10b8:	2102      	movs	r1, #2
    10ba:	2009      	movs	r0, #9
    10bc:	4b1d      	ldr	r3, [pc, #116]	; (1134 <QSPI_N25Q256_PORT_init+0xb8>)
    10be:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    10c0:	2100      	movs	r1, #0
    10c2:	2009      	movs	r0, #9
    10c4:	4b1f      	ldr	r3, [pc, #124]	; (1144 <QSPI_N25Q256_PORT_init+0xc8>)
    10c6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    10c8:	2100      	movs	r1, #0
    10ca:	2009      	movs	r0, #9
    10cc:	4b1a      	ldr	r3, [pc, #104]	; (1138 <QSPI_N25Q256_PORT_init+0xbc>)
    10ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    10d0:	491e      	ldr	r1, [pc, #120]	; (114c <QSPI_N25Q256_PORT_init+0xd0>)
    10d2:	2009      	movs	r0, #9
    10d4:	4b1a      	ldr	r3, [pc, #104]	; (1140 <QSPI_N25Q256_PORT_init+0xc4>)
    10d6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    10d8:	2102      	movs	r1, #2
    10da:	200a      	movs	r0, #10
    10dc:	4b15      	ldr	r3, [pc, #84]	; (1134 <QSPI_N25Q256_PORT_init+0xb8>)
    10de:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    10e0:	2100      	movs	r1, #0
    10e2:	200a      	movs	r0, #10
    10e4:	4b17      	ldr	r3, [pc, #92]	; (1144 <QSPI_N25Q256_PORT_init+0xc8>)
    10e6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    10e8:	2100      	movs	r1, #0
    10ea:	200a      	movs	r0, #10
    10ec:	4b12      	ldr	r3, [pc, #72]	; (1138 <QSPI_N25Q256_PORT_init+0xbc>)
    10ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    10f0:	4917      	ldr	r1, [pc, #92]	; (1150 <QSPI_N25Q256_PORT_init+0xd4>)
    10f2:	200a      	movs	r0, #10
    10f4:	4b12      	ldr	r3, [pc, #72]	; (1140 <QSPI_N25Q256_PORT_init+0xc4>)
    10f6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    10f8:	2102      	movs	r1, #2
    10fa:	200b      	movs	r0, #11
    10fc:	4b0d      	ldr	r3, [pc, #52]	; (1134 <QSPI_N25Q256_PORT_init+0xb8>)
    10fe:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1100:	2100      	movs	r1, #0
    1102:	200b      	movs	r0, #11
    1104:	4b0f      	ldr	r3, [pc, #60]	; (1144 <QSPI_N25Q256_PORT_init+0xc8>)
    1106:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1108:	2100      	movs	r1, #0
    110a:	200b      	movs	r0, #11
    110c:	4b0a      	ldr	r3, [pc, #40]	; (1138 <QSPI_N25Q256_PORT_init+0xbc>)
    110e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1110:	4910      	ldr	r1, [pc, #64]	; (1154 <QSPI_N25Q256_PORT_init+0xd8>)
    1112:	200b      	movs	r0, #11
    1114:	4b0a      	ldr	r3, [pc, #40]	; (1140 <QSPI_N25Q256_PORT_init+0xc4>)
    1116:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1118:	2101      	movs	r1, #1
    111a:	202a      	movs	r0, #42	; 0x2a
    111c:	4b05      	ldr	r3, [pc, #20]	; (1134 <QSPI_N25Q256_PORT_init+0xb8>)
    111e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1120:	2100      	movs	r1, #0
    1122:	202a      	movs	r0, #42	; 0x2a
    1124:	4b04      	ldr	r3, [pc, #16]	; (1138 <QSPI_N25Q256_PORT_init+0xbc>)
    1126:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1128:	490b      	ldr	r1, [pc, #44]	; (1158 <QSPI_N25Q256_PORT_init+0xdc>)
    112a:	202a      	movs	r0, #42	; 0x2a
    112c:	4b04      	ldr	r3, [pc, #16]	; (1140 <QSPI_N25Q256_PORT_init+0xc4>)
    112e:	4798      	blx	r3
}
    1130:	bf00      	nop
    1132:	bd80      	pop	{r7, pc}
    1134:	00000e39 	.word	0x00000e39
    1138:	00000de5 	.word	0x00000de5
    113c:	002b0007 	.word	0x002b0007
    1140:	00000e19 	.word	0x00000e19
    1144:	00000e71 	.word	0x00000e71
    1148:	00080007 	.word	0x00080007
    114c:	00090007 	.word	0x00090007
    1150:	000a0007 	.word	0x000a0007
    1154:	000b0007 	.word	0x000b0007
    1158:	002a0007 	.word	0x002a0007

0000115c <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    115c:	b580      	push	{r7, lr}
    115e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1160:	4805      	ldr	r0, [pc, #20]	; (1178 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1162:	4b06      	ldr	r3, [pc, #24]	; (117c <QSPI_N25Q256_CLOCK_init+0x20>)
    1164:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1166:	4804      	ldr	r0, [pc, #16]	; (1178 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1168:	4b05      	ldr	r3, [pc, #20]	; (1180 <QSPI_N25Q256_CLOCK_init+0x24>)
    116a:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    116c:	4802      	ldr	r0, [pc, #8]	; (1178 <QSPI_N25Q256_CLOCK_init+0x1c>)
    116e:	4b05      	ldr	r3, [pc, #20]	; (1184 <QSPI_N25Q256_CLOCK_init+0x28>)
    1170:	4798      	blx	r3
}
    1172:	bf00      	nop
    1174:	bd80      	pop	{r7, pc}
    1176:	bf00      	nop
    1178:	40000800 	.word	0x40000800
    117c:	0000062b 	.word	0x0000062b
    1180:	0000066b 	.word	0x0000066b
    1184:	0000082b 	.word	0x0000082b

00001188 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1188:	b580      	push	{r7, lr}
    118a:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    118c:	4b04      	ldr	r3, [pc, #16]	; (11a0 <QSPI_N25Q256_init+0x18>)
    118e:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1190:	4904      	ldr	r1, [pc, #16]	; (11a4 <QSPI_N25Q256_init+0x1c>)
    1192:	4805      	ldr	r0, [pc, #20]	; (11a8 <QSPI_N25Q256_init+0x20>)
    1194:	4b05      	ldr	r3, [pc, #20]	; (11ac <QSPI_N25Q256_init+0x24>)
    1196:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1198:	4b05      	ldr	r3, [pc, #20]	; (11b0 <QSPI_N25Q256_init+0x28>)
    119a:	4798      	blx	r3
}
    119c:	bf00      	nop
    119e:	bd80      	pop	{r7, pc}
    11a0:	0000115d 	.word	0x0000115d
    11a4:	42003400 	.word	0x42003400
    11a8:	2000108c 	.word	0x2000108c
    11ac:	000023b9 	.word	0x000023b9
    11b0:	0000107d 	.word	0x0000107d

000011b4 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    11b4:	b580      	push	{r7, lr}
    11b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    11b8:	4802      	ldr	r0, [pc, #8]	; (11c4 <DATETIME_CLOCK_CLOCK_init+0x10>)
    11ba:	4b03      	ldr	r3, [pc, #12]	; (11c8 <DATETIME_CLOCK_CLOCK_init+0x14>)
    11bc:	4798      	blx	r3
}
    11be:	bf00      	nop
    11c0:	bd80      	pop	{r7, pc}
    11c2:	bf00      	nop
    11c4:	40000800 	.word	0x40000800
    11c8:	000006ab 	.word	0x000006ab

000011cc <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    11cc:	b580      	push	{r7, lr}
    11ce:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    11d0:	4b03      	ldr	r3, [pc, #12]	; (11e0 <DATETIME_CLOCK_init+0x14>)
    11d2:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    11d4:	4903      	ldr	r1, [pc, #12]	; (11e4 <DATETIME_CLOCK_init+0x18>)
    11d6:	4804      	ldr	r0, [pc, #16]	; (11e8 <DATETIME_CLOCK_init+0x1c>)
    11d8:	4b04      	ldr	r3, [pc, #16]	; (11ec <DATETIME_CLOCK_init+0x20>)
    11da:	4798      	blx	r3
}
    11dc:	bf00      	nop
    11de:	bd80      	pop	{r7, pc}
    11e0:	000011b5 	.word	0x000011b5
    11e4:	40002400 	.word	0x40002400
    11e8:	200011f4 	.word	0x200011f4
    11ec:	00001b21 	.word	0x00001b21

000011f0 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    11f0:	b580      	push	{r7, lr}
    11f2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    11f4:	2100      	movs	r1, #0
    11f6:	2010      	movs	r0, #16
    11f8:	4b07      	ldr	r3, [pc, #28]	; (1218 <I2C_SHARED_PORT_init+0x28>)
    11fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    11fc:	4907      	ldr	r1, [pc, #28]	; (121c <I2C_SHARED_PORT_init+0x2c>)
    11fe:	2010      	movs	r0, #16
    1200:	4b07      	ldr	r3, [pc, #28]	; (1220 <I2C_SHARED_PORT_init+0x30>)
    1202:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1204:	2100      	movs	r1, #0
    1206:	2011      	movs	r0, #17
    1208:	4b03      	ldr	r3, [pc, #12]	; (1218 <I2C_SHARED_PORT_init+0x28>)
    120a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    120c:	4905      	ldr	r1, [pc, #20]	; (1224 <I2C_SHARED_PORT_init+0x34>)
    120e:	2011      	movs	r0, #17
    1210:	4b03      	ldr	r3, [pc, #12]	; (1220 <I2C_SHARED_PORT_init+0x30>)
    1212:	4798      	blx	r3
}
    1214:	bf00      	nop
    1216:	bd80      	pop	{r7, pc}
    1218:	00000de5 	.word	0x00000de5
    121c:	00100002 	.word	0x00100002
    1220:	00000e19 	.word	0x00000e19
    1224:	00110002 	.word	0x00110002

00001228 <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    1228:	b580      	push	{r7, lr}
    122a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    122c:	2245      	movs	r2, #69	; 0x45
    122e:	2108      	movs	r1, #8
    1230:	4806      	ldr	r0, [pc, #24]	; (124c <I2C_SHARED_CLOCK_init+0x24>)
    1232:	4b07      	ldr	r3, [pc, #28]	; (1250 <I2C_SHARED_CLOCK_init+0x28>)
    1234:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1236:	224a      	movs	r2, #74	; 0x4a
    1238:	2103      	movs	r1, #3
    123a:	4804      	ldr	r0, [pc, #16]	; (124c <I2C_SHARED_CLOCK_init+0x24>)
    123c:	4b04      	ldr	r3, [pc, #16]	; (1250 <I2C_SHARED_CLOCK_init+0x28>)
    123e:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1240:	4804      	ldr	r0, [pc, #16]	; (1254 <I2C_SHARED_CLOCK_init+0x2c>)
    1242:	4b05      	ldr	r3, [pc, #20]	; (1258 <I2C_SHARED_CLOCK_init+0x30>)
    1244:	4798      	blx	r3
}
    1246:	bf00      	nop
    1248:	bd80      	pop	{r7, pc}
    124a:	bf00      	nop
    124c:	40001c00 	.word	0x40001c00
    1250:	000005e5 	.word	0x000005e5
    1254:	40000800 	.word	0x40000800
    1258:	000006eb 	.word	0x000006eb

0000125c <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    125c:	b580      	push	{r7, lr}
    125e:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    1260:	4b04      	ldr	r3, [pc, #16]	; (1274 <I2C_SHARED_init+0x18>)
    1262:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM1);
    1264:	4904      	ldr	r1, [pc, #16]	; (1278 <I2C_SHARED_init+0x1c>)
    1266:	4805      	ldr	r0, [pc, #20]	; (127c <I2C_SHARED_init+0x20>)
    1268:	4b05      	ldr	r3, [pc, #20]	; (1280 <I2C_SHARED_init+0x24>)
    126a:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    126c:	4b05      	ldr	r3, [pc, #20]	; (1284 <I2C_SHARED_init+0x28>)
    126e:	4798      	blx	r3
}
    1270:	bf00      	nop
    1272:	bd80      	pop	{r7, pc}
    1274:	00001229 	.word	0x00001229
    1278:	40003400 	.word	0x40003400
    127c:	20001174 	.word	0x20001174
    1280:	000021dd 	.word	0x000021dd
    1284:	000011f1 	.word	0x000011f1

00001288 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1288:	b580      	push	{r7, lr}
    128a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    128c:	2100      	movs	r1, #0
    128e:	203b      	movs	r0, #59	; 0x3b
    1290:	4b11      	ldr	r3, [pc, #68]	; (12d8 <SPI_TEMP_PORT_init+0x50>)
    1292:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1294:	2102      	movs	r1, #2
    1296:	203b      	movs	r0, #59	; 0x3b
    1298:	4b10      	ldr	r3, [pc, #64]	; (12dc <SPI_TEMP_PORT_init+0x54>)
    129a:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    129c:	4910      	ldr	r1, [pc, #64]	; (12e0 <SPI_TEMP_PORT_init+0x58>)
    129e:	203b      	movs	r0, #59	; 0x3b
    12a0:	4b10      	ldr	r3, [pc, #64]	; (12e4 <SPI_TEMP_PORT_init+0x5c>)
    12a2:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    12a4:	2100      	movs	r1, #0
    12a6:	203a      	movs	r0, #58	; 0x3a
    12a8:	4b0b      	ldr	r3, [pc, #44]	; (12d8 <SPI_TEMP_PORT_init+0x50>)
    12aa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    12ac:	2102      	movs	r1, #2
    12ae:	203a      	movs	r0, #58	; 0x3a
    12b0:	4b0a      	ldr	r3, [pc, #40]	; (12dc <SPI_TEMP_PORT_init+0x54>)
    12b2:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    12b4:	490c      	ldr	r1, [pc, #48]	; (12e8 <SPI_TEMP_PORT_init+0x60>)
    12b6:	203a      	movs	r0, #58	; 0x3a
    12b8:	4b0a      	ldr	r3, [pc, #40]	; (12e4 <SPI_TEMP_PORT_init+0x5c>)
    12ba:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    12bc:	2101      	movs	r1, #1
    12be:	203c      	movs	r0, #60	; 0x3c
    12c0:	4b06      	ldr	r3, [pc, #24]	; (12dc <SPI_TEMP_PORT_init+0x54>)
    12c2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    12c4:	2100      	movs	r1, #0
    12c6:	203c      	movs	r0, #60	; 0x3c
    12c8:	4b08      	ldr	r3, [pc, #32]	; (12ec <SPI_TEMP_PORT_init+0x64>)
    12ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    12cc:	4908      	ldr	r1, [pc, #32]	; (12f0 <SPI_TEMP_PORT_init+0x68>)
    12ce:	203c      	movs	r0, #60	; 0x3c
    12d0:	4b04      	ldr	r3, [pc, #16]	; (12e4 <SPI_TEMP_PORT_init+0x5c>)
    12d2:	4798      	blx	r3
}
    12d4:	bf00      	nop
    12d6:	bd80      	pop	{r7, pc}
    12d8:	00000e71 	.word	0x00000e71
    12dc:	00000e39 	.word	0x00000e39
    12e0:	003b0003 	.word	0x003b0003
    12e4:	00000e19 	.word	0x00000e19
    12e8:	003a0003 	.word	0x003a0003
    12ec:	00000de5 	.word	0x00000de5
    12f0:	003c0003 	.word	0x003c0003

000012f4 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    12f4:	b580      	push	{r7, lr}
    12f6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12f8:	2245      	movs	r2, #69	; 0x45
    12fa:	2122      	movs	r1, #34	; 0x22
    12fc:	4806      	ldr	r0, [pc, #24]	; (1318 <SPI_TEMP_CLOCK_init+0x24>)
    12fe:	4b07      	ldr	r3, [pc, #28]	; (131c <SPI_TEMP_CLOCK_init+0x28>)
    1300:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1302:	224a      	movs	r2, #74	; 0x4a
    1304:	2103      	movs	r1, #3
    1306:	4804      	ldr	r0, [pc, #16]	; (1318 <SPI_TEMP_CLOCK_init+0x24>)
    1308:	4b04      	ldr	r3, [pc, #16]	; (131c <SPI_TEMP_CLOCK_init+0x28>)
    130a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    130c:	4804      	ldr	r0, [pc, #16]	; (1320 <SPI_TEMP_CLOCK_init+0x2c>)
    130e:	4b05      	ldr	r3, [pc, #20]	; (1324 <SPI_TEMP_CLOCK_init+0x30>)
    1310:	4798      	blx	r3
}
    1312:	bf00      	nop
    1314:	bd80      	pop	{r7, pc}
    1316:	bf00      	nop
    1318:	40001c00 	.word	0x40001c00
    131c:	000005e5 	.word	0x000005e5
    1320:	40000800 	.word	0x40000800
    1324:	0000084b 	.word	0x0000084b

00001328 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1328:	b580      	push	{r7, lr}
    132a:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    132c:	4b05      	ldr	r3, [pc, #20]	; (1344 <SPI_TEMP_init+0x1c>)
    132e:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1330:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1334:	4804      	ldr	r0, [pc, #16]	; (1348 <SPI_TEMP_init+0x20>)
    1336:	4b05      	ldr	r3, [pc, #20]	; (134c <SPI_TEMP_init+0x24>)
    1338:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    133a:	4b05      	ldr	r3, [pc, #20]	; (1350 <SPI_TEMP_init+0x28>)
    133c:	4798      	blx	r3
}
    133e:	bf00      	nop
    1340:	bd80      	pop	{r7, pc}
    1342:	bf00      	nop
    1344:	000012f5 	.word	0x000012f5
    1348:	20001054 	.word	0x20001054
    134c:	000024c9 	.word	0x000024c9
    1350:	00001289 	.word	0x00001289

00001354 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    1354:	b580      	push	{r7, lr}
    1356:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1358:	2100      	movs	r1, #0
    135a:	2017      	movs	r0, #23
    135c:	4b07      	ldr	r3, [pc, #28]	; (137c <I2C_EXPANDER_PORT_init+0x28>)
    135e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1360:	4907      	ldr	r1, [pc, #28]	; (1380 <I2C_EXPANDER_PORT_init+0x2c>)
    1362:	2017      	movs	r0, #23
    1364:	4b07      	ldr	r3, [pc, #28]	; (1384 <I2C_EXPANDER_PORT_init+0x30>)
    1366:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1368:	2100      	movs	r1, #0
    136a:	2016      	movs	r0, #22
    136c:	4b03      	ldr	r3, [pc, #12]	; (137c <I2C_EXPANDER_PORT_init+0x28>)
    136e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1370:	4905      	ldr	r1, [pc, #20]	; (1388 <I2C_EXPANDER_PORT_init+0x34>)
    1372:	2016      	movs	r0, #22
    1374:	4b03      	ldr	r3, [pc, #12]	; (1384 <I2C_EXPANDER_PORT_init+0x30>)
    1376:	4798      	blx	r3
}
    1378:	bf00      	nop
    137a:	bd80      	pop	{r7, pc}
    137c:	00000de5 	.word	0x00000de5
    1380:	00170003 	.word	0x00170003
    1384:	00000e19 	.word	0x00000e19
    1388:	00160003 	.word	0x00160003

0000138c <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    138c:	b580      	push	{r7, lr}
    138e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1390:	2244      	movs	r2, #68	; 0x44
    1392:	2123      	movs	r1, #35	; 0x23
    1394:	4806      	ldr	r0, [pc, #24]	; (13b0 <I2C_EXPANDER_CLOCK_init+0x24>)
    1396:	4b07      	ldr	r3, [pc, #28]	; (13b4 <I2C_EXPANDER_CLOCK_init+0x28>)
    1398:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    139a:	224a      	movs	r2, #74	; 0x4a
    139c:	2103      	movs	r1, #3
    139e:	4804      	ldr	r0, [pc, #16]	; (13b0 <I2C_EXPANDER_CLOCK_init+0x24>)
    13a0:	4b04      	ldr	r3, [pc, #16]	; (13b4 <I2C_EXPANDER_CLOCK_init+0x28>)
    13a2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    13a4:	4804      	ldr	r0, [pc, #16]	; (13b8 <I2C_EXPANDER_CLOCK_init+0x2c>)
    13a6:	4b05      	ldr	r3, [pc, #20]	; (13bc <I2C_EXPANDER_CLOCK_init+0x30>)
    13a8:	4798      	blx	r3
}
    13aa:	bf00      	nop
    13ac:	bd80      	pop	{r7, pc}
    13ae:	bf00      	nop
    13b0:	40001c00 	.word	0x40001c00
    13b4:	000005e5 	.word	0x000005e5
    13b8:	40000800 	.word	0x40000800
    13bc:	0000086b 	.word	0x0000086b

000013c0 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    13c0:	b580      	push	{r7, lr}
    13c2:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    13c4:	4b04      	ldr	r3, [pc, #16]	; (13d8 <I2C_EXPANDER_init+0x18>)
    13c6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    13c8:	4904      	ldr	r1, [pc, #16]	; (13dc <I2C_EXPANDER_init+0x1c>)
    13ca:	4805      	ldr	r0, [pc, #20]	; (13e0 <I2C_EXPANDER_init+0x20>)
    13cc:	4b05      	ldr	r3, [pc, #20]	; (13e4 <I2C_EXPANDER_init+0x24>)
    13ce:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    13d0:	4b05      	ldr	r3, [pc, #20]	; (13e8 <I2C_EXPANDER_init+0x28>)
    13d2:	4798      	blx	r3
}
    13d4:	bf00      	nop
    13d6:	bd80      	pop	{r7, pc}
    13d8:	0000138d 	.word	0x0000138d
    13dc:	43000400 	.word	0x43000400
    13e0:	20001154 	.word	0x20001154
    13e4:	000021dd 	.word	0x000021dd
    13e8:	00001355 	.word	0x00001355

000013ec <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    13ec:	b580      	push	{r7, lr}
    13ee:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    13f0:	2100      	movs	r1, #0
    13f2:	2044      	movs	r0, #68	; 0x44
    13f4:	4b11      	ldr	r3, [pc, #68]	; (143c <SPI_HI3593_PORT_init+0x50>)
    13f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    13f8:	2102      	movs	r1, #2
    13fa:	2044      	movs	r0, #68	; 0x44
    13fc:	4b10      	ldr	r3, [pc, #64]	; (1440 <SPI_HI3593_PORT_init+0x54>)
    13fe:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1400:	4910      	ldr	r1, [pc, #64]	; (1444 <SPI_HI3593_PORT_init+0x58>)
    1402:	2044      	movs	r0, #68	; 0x44
    1404:	4b10      	ldr	r3, [pc, #64]	; (1448 <SPI_HI3593_PORT_init+0x5c>)
    1406:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1408:	2100      	movs	r1, #0
    140a:	2045      	movs	r0, #69	; 0x45
    140c:	4b0b      	ldr	r3, [pc, #44]	; (143c <SPI_HI3593_PORT_init+0x50>)
    140e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1410:	2102      	movs	r1, #2
    1412:	2045      	movs	r0, #69	; 0x45
    1414:	4b0a      	ldr	r3, [pc, #40]	; (1440 <SPI_HI3593_PORT_init+0x54>)
    1416:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1418:	490c      	ldr	r1, [pc, #48]	; (144c <SPI_HI3593_PORT_init+0x60>)
    141a:	2045      	movs	r0, #69	; 0x45
    141c:	4b0a      	ldr	r3, [pc, #40]	; (1448 <SPI_HI3593_PORT_init+0x5c>)
    141e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1420:	2101      	movs	r1, #1
    1422:	2047      	movs	r0, #71	; 0x47
    1424:	4b06      	ldr	r3, [pc, #24]	; (1440 <SPI_HI3593_PORT_init+0x54>)
    1426:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1428:	2100      	movs	r1, #0
    142a:	2047      	movs	r0, #71	; 0x47
    142c:	4b08      	ldr	r3, [pc, #32]	; (1450 <SPI_HI3593_PORT_init+0x64>)
    142e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1430:	4908      	ldr	r1, [pc, #32]	; (1454 <SPI_HI3593_PORT_init+0x68>)
    1432:	2047      	movs	r0, #71	; 0x47
    1434:	4b04      	ldr	r3, [pc, #16]	; (1448 <SPI_HI3593_PORT_init+0x5c>)
    1436:	4798      	blx	r3
}
    1438:	bf00      	nop
    143a:	bd80      	pop	{r7, pc}
    143c:	00000e71 	.word	0x00000e71
    1440:	00000e39 	.word	0x00000e39
    1444:	00440002 	.word	0x00440002
    1448:	00000e19 	.word	0x00000e19
    144c:	00450002 	.word	0x00450002
    1450:	00000de5 	.word	0x00000de5
    1454:	00470002 	.word	0x00470002

00001458 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1458:	b580      	push	{r7, lr}
    145a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    145c:	2242      	movs	r2, #66	; 0x42
    145e:	2124      	movs	r1, #36	; 0x24
    1460:	4806      	ldr	r0, [pc, #24]	; (147c <SPI_HI3593_CLOCK_init+0x24>)
    1462:	4b07      	ldr	r3, [pc, #28]	; (1480 <SPI_HI3593_CLOCK_init+0x28>)
    1464:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1466:	224a      	movs	r2, #74	; 0x4a
    1468:	2103      	movs	r1, #3
    146a:	4804      	ldr	r0, [pc, #16]	; (147c <SPI_HI3593_CLOCK_init+0x24>)
    146c:	4b04      	ldr	r3, [pc, #16]	; (1480 <SPI_HI3593_CLOCK_init+0x28>)
    146e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1470:	4804      	ldr	r0, [pc, #16]	; (1484 <SPI_HI3593_CLOCK_init+0x2c>)
    1472:	4b05      	ldr	r3, [pc, #20]	; (1488 <SPI_HI3593_CLOCK_init+0x30>)
    1474:	4798      	blx	r3
}
    1476:	bf00      	nop
    1478:	bd80      	pop	{r7, pc}
    147a:	bf00      	nop
    147c:	40001c00 	.word	0x40001c00
    1480:	000005e5 	.word	0x000005e5
    1484:	40000800 	.word	0x40000800
    1488:	0000088b 	.word	0x0000088b

0000148c <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    148c:	b580      	push	{r7, lr}
    148e:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1490:	4b04      	ldr	r3, [pc, #16]	; (14a4 <SPI_HI3593_init+0x18>)
    1492:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1494:	4904      	ldr	r1, [pc, #16]	; (14a8 <SPI_HI3593_init+0x1c>)
    1496:	4805      	ldr	r0, [pc, #20]	; (14ac <SPI_HI3593_init+0x20>)
    1498:	4b05      	ldr	r3, [pc, #20]	; (14b0 <SPI_HI3593_init+0x24>)
    149a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    149c:	4b05      	ldr	r3, [pc, #20]	; (14b4 <SPI_HI3593_init+0x28>)
    149e:	4798      	blx	r3
}
    14a0:	bf00      	nop
    14a2:	bd80      	pop	{r7, pc}
    14a4:	00001459 	.word	0x00001459
    14a8:	43000800 	.word	0x43000800
    14ac:	2000103c 	.word	0x2000103c
    14b0:	000024c9 	.word	0x000024c9
    14b4:	000013ed 	.word	0x000013ed

000014b8 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    14b8:	b580      	push	{r7, lr}
    14ba:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    14bc:	2100      	movs	r1, #0
    14be:	2068      	movs	r0, #104	; 0x68
    14c0:	4b07      	ldr	r3, [pc, #28]	; (14e0 <I2C_EEPROM_PORT_init+0x28>)
    14c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    14c4:	4907      	ldr	r1, [pc, #28]	; (14e4 <I2C_EEPROM_PORT_init+0x2c>)
    14c6:	2068      	movs	r0, #104	; 0x68
    14c8:	4b07      	ldr	r3, [pc, #28]	; (14e8 <I2C_EEPROM_PORT_init+0x30>)
    14ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    14cc:	2100      	movs	r1, #0
    14ce:	2069      	movs	r0, #105	; 0x69
    14d0:	4b03      	ldr	r3, [pc, #12]	; (14e0 <I2C_EEPROM_PORT_init+0x28>)
    14d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    14d4:	4905      	ldr	r1, [pc, #20]	; (14ec <I2C_EEPROM_PORT_init+0x34>)
    14d6:	2069      	movs	r0, #105	; 0x69
    14d8:	4b03      	ldr	r3, [pc, #12]	; (14e8 <I2C_EEPROM_PORT_init+0x30>)
    14da:	4798      	blx	r3
}
    14dc:	bf00      	nop
    14de:	bd80      	pop	{r7, pc}
    14e0:	00000de5 	.word	0x00000de5
    14e4:	00680002 	.word	0x00680002
    14e8:	00000e19 	.word	0x00000e19
    14ec:	00690002 	.word	0x00690002

000014f0 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    14f0:	b580      	push	{r7, lr}
    14f2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14f4:	2248      	movs	r2, #72	; 0x48
    14f6:	2125      	movs	r1, #37	; 0x25
    14f8:	4806      	ldr	r0, [pc, #24]	; (1514 <I2C_EEPROM_CLOCK_init+0x24>)
    14fa:	4b07      	ldr	r3, [pc, #28]	; (1518 <I2C_EEPROM_CLOCK_init+0x28>)
    14fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14fe:	224a      	movs	r2, #74	; 0x4a
    1500:	2103      	movs	r1, #3
    1502:	4804      	ldr	r0, [pc, #16]	; (1514 <I2C_EEPROM_CLOCK_init+0x24>)
    1504:	4b04      	ldr	r3, [pc, #16]	; (1518 <I2C_EEPROM_CLOCK_init+0x28>)
    1506:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1508:	4804      	ldr	r0, [pc, #16]	; (151c <I2C_EEPROM_CLOCK_init+0x2c>)
    150a:	4b05      	ldr	r3, [pc, #20]	; (1520 <I2C_EEPROM_CLOCK_init+0x30>)
    150c:	4798      	blx	r3
}
    150e:	bf00      	nop
    1510:	bd80      	pop	{r7, pc}
    1512:	bf00      	nop
    1514:	40001c00 	.word	0x40001c00
    1518:	000005e5 	.word	0x000005e5
    151c:	40000800 	.word	0x40000800
    1520:	000008ab 	.word	0x000008ab

00001524 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1524:	b580      	push	{r7, lr}
    1526:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1528:	4b04      	ldr	r3, [pc, #16]	; (153c <I2C_EEPROM_init+0x18>)
    152a:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    152c:	4904      	ldr	r1, [pc, #16]	; (1540 <I2C_EEPROM_init+0x1c>)
    152e:	4805      	ldr	r0, [pc, #20]	; (1544 <I2C_EEPROM_init+0x20>)
    1530:	4b05      	ldr	r3, [pc, #20]	; (1548 <I2C_EEPROM_init+0x24>)
    1532:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    1534:	4b05      	ldr	r3, [pc, #20]	; (154c <I2C_EEPROM_init+0x28>)
    1536:	4798      	blx	r3
}
    1538:	bf00      	nop
    153a:	bd80      	pop	{r7, pc}
    153c:	000014f1 	.word	0x000014f1
    1540:	43000c00 	.word	0x43000c00
    1544:	200011b4 	.word	0x200011b4
    1548:	000020a9 	.word	0x000020a9
    154c:	000014b9 	.word	0x000014b9

00001550 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1550:	b580      	push	{r7, lr}
    1552:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1554:	4808      	ldr	r0, [pc, #32]	; (1578 <TIMER_USB_init+0x28>)
    1556:	4b09      	ldr	r3, [pc, #36]	; (157c <TIMER_USB_init+0x2c>)
    1558:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    155a:	2243      	movs	r2, #67	; 0x43
    155c:	2109      	movs	r1, #9
    155e:	4808      	ldr	r0, [pc, #32]	; (1580 <TIMER_USB_init+0x30>)
    1560:	4b08      	ldr	r3, [pc, #32]	; (1584 <TIMER_USB_init+0x34>)
    1562:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1564:	4b08      	ldr	r3, [pc, #32]	; (1588 <TIMER_USB_init+0x38>)
    1566:	4798      	blx	r3
    1568:	4603      	mov	r3, r0
    156a:	461a      	mov	r2, r3
    156c:	4907      	ldr	r1, [pc, #28]	; (158c <TIMER_USB_init+0x3c>)
    156e:	4808      	ldr	r0, [pc, #32]	; (1590 <TIMER_USB_init+0x40>)
    1570:	4b08      	ldr	r3, [pc, #32]	; (1594 <TIMER_USB_init+0x44>)
    1572:	4798      	blx	r3
}
    1574:	bf00      	nop
    1576:	bd80      	pop	{r7, pc}
    1578:	40000800 	.word	0x40000800
    157c:	0000070b 	.word	0x0000070b
    1580:	40001c00 	.word	0x40001c00
    1584:	000005e5 	.word	0x000005e5
    1588:	0000838d 	.word	0x0000838d
    158c:	40003800 	.word	0x40003800
    1590:	20001134 	.word	0x20001134
    1594:	00002699 	.word	0x00002699

00001598 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1598:	b580      	push	{r7, lr}
    159a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    159c:	4808      	ldr	r0, [pc, #32]	; (15c0 <TIMER_ARINC_init+0x28>)
    159e:	4b09      	ldr	r3, [pc, #36]	; (15c4 <TIMER_ARINC_init+0x2c>)
    15a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15a2:	2244      	movs	r2, #68	; 0x44
    15a4:	211a      	movs	r1, #26
    15a6:	4808      	ldr	r0, [pc, #32]	; (15c8 <TIMER_ARINC_init+0x30>)
    15a8:	4b08      	ldr	r3, [pc, #32]	; (15cc <TIMER_ARINC_init+0x34>)
    15aa:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    15ac:	4b08      	ldr	r3, [pc, #32]	; (15d0 <TIMER_ARINC_init+0x38>)
    15ae:	4798      	blx	r3
    15b0:	4603      	mov	r3, r0
    15b2:	461a      	mov	r2, r3
    15b4:	4907      	ldr	r1, [pc, #28]	; (15d4 <TIMER_ARINC_init+0x3c>)
    15b6:	4808      	ldr	r0, [pc, #32]	; (15d8 <TIMER_ARINC_init+0x40>)
    15b8:	4b08      	ldr	r3, [pc, #32]	; (15dc <TIMER_ARINC_init+0x44>)
    15ba:	4798      	blx	r3
}
    15bc:	bf00      	nop
    15be:	bd80      	pop	{r7, pc}
    15c0:	40000800 	.word	0x40000800
    15c4:	000007cb 	.word	0x000007cb
    15c8:	40001c00 	.word	0x40001c00
    15cc:	000005e5 	.word	0x000005e5
    15d0:	0000838d 	.word	0x0000838d
    15d4:	4101a000 	.word	0x4101a000
    15d8:	20001114 	.word	0x20001114
    15dc:	00002699 	.word	0x00002699

000015e0 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    15e0:	b580      	push	{r7, lr}
    15e2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    15e4:	4808      	ldr	r0, [pc, #32]	; (1608 <TIMER_MAINTENANCE_init+0x28>)
    15e6:	4b09      	ldr	r3, [pc, #36]	; (160c <TIMER_MAINTENANCE_init+0x2c>)
    15e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15ea:	2246      	movs	r2, #70	; 0x46
    15ec:	211e      	movs	r1, #30
    15ee:	4808      	ldr	r0, [pc, #32]	; (1610 <TIMER_MAINTENANCE_init+0x30>)
    15f0:	4b08      	ldr	r3, [pc, #32]	; (1614 <TIMER_MAINTENANCE_init+0x34>)
    15f2:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    15f4:	4b08      	ldr	r3, [pc, #32]	; (1618 <TIMER_MAINTENANCE_init+0x38>)
    15f6:	4798      	blx	r3
    15f8:	4603      	mov	r3, r0
    15fa:	461a      	mov	r2, r3
    15fc:	4907      	ldr	r1, [pc, #28]	; (161c <TIMER_MAINTENANCE_init+0x3c>)
    15fe:	4808      	ldr	r0, [pc, #32]	; (1620 <TIMER_MAINTENANCE_init+0x40>)
    1600:	4b08      	ldr	r3, [pc, #32]	; (1624 <TIMER_MAINTENANCE_init+0x44>)
    1602:	4798      	blx	r3
}
    1604:	bf00      	nop
    1606:	bd80      	pop	{r7, pc}
    1608:	40000800 	.word	0x40000800
    160c:	000007eb 	.word	0x000007eb
    1610:	40001c00 	.word	0x40001c00
    1614:	000005e5 	.word	0x000005e5
    1618:	0000838d 	.word	0x0000838d
    161c:	42001400 	.word	0x42001400
    1620:	2000106c 	.word	0x2000106c
    1624:	00002699 	.word	0x00002699

00001628 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1628:	b580      	push	{r7, lr}
    162a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    162c:	4808      	ldr	r0, [pc, #32]	; (1650 <TIMER_INTERFACE_init+0x28>)
    162e:	4b09      	ldr	r3, [pc, #36]	; (1654 <TIMER_INTERFACE_init+0x2c>)
    1630:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1632:	2246      	movs	r2, #70	; 0x46
    1634:	211e      	movs	r1, #30
    1636:	4808      	ldr	r0, [pc, #32]	; (1658 <TIMER_INTERFACE_init+0x30>)
    1638:	4b08      	ldr	r3, [pc, #32]	; (165c <TIMER_INTERFACE_init+0x34>)
    163a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    163c:	4b08      	ldr	r3, [pc, #32]	; (1660 <TIMER_INTERFACE_init+0x38>)
    163e:	4798      	blx	r3
    1640:	4603      	mov	r3, r0
    1642:	461a      	mov	r2, r3
    1644:	4907      	ldr	r1, [pc, #28]	; (1664 <TIMER_INTERFACE_init+0x3c>)
    1646:	4808      	ldr	r0, [pc, #32]	; (1668 <TIMER_INTERFACE_init+0x40>)
    1648:	4b08      	ldr	r3, [pc, #32]	; (166c <TIMER_INTERFACE_init+0x44>)
    164a:	4798      	blx	r3
}
    164c:	bf00      	nop
    164e:	bd80      	pop	{r7, pc}
    1650:	40000800 	.word	0x40000800
    1654:	0000080b 	.word	0x0000080b
    1658:	40001c00 	.word	0x40001c00
    165c:	000005e5 	.word	0x000005e5
    1660:	0000838d 	.word	0x0000838d
    1664:	42001800 	.word	0x42001800
    1668:	200010b0 	.word	0x200010b0
    166c:	00002699 	.word	0x00002699

00001670 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1670:	b580      	push	{r7, lr}
    1672:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1674:	4808      	ldr	r0, [pc, #32]	; (1698 <TIMER_EVENT_init+0x28>)
    1676:	4b09      	ldr	r3, [pc, #36]	; (169c <TIMER_EVENT_init+0x2c>)
    1678:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    167a:	2246      	movs	r2, #70	; 0x46
    167c:	2127      	movs	r1, #39	; 0x27
    167e:	4808      	ldr	r0, [pc, #32]	; (16a0 <TIMER_EVENT_init+0x30>)
    1680:	4b08      	ldr	r3, [pc, #32]	; (16a4 <TIMER_EVENT_init+0x34>)
    1682:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1684:	4b08      	ldr	r3, [pc, #32]	; (16a8 <TIMER_EVENT_init+0x38>)
    1686:	4798      	blx	r3
    1688:	4603      	mov	r3, r0
    168a:	461a      	mov	r2, r3
    168c:	4907      	ldr	r1, [pc, #28]	; (16ac <TIMER_EVENT_init+0x3c>)
    168e:	4808      	ldr	r0, [pc, #32]	; (16b0 <TIMER_EVENT_init+0x40>)
    1690:	4b08      	ldr	r3, [pc, #32]	; (16b4 <TIMER_EVENT_init+0x44>)
    1692:	4798      	blx	r3
}
    1694:	bf00      	nop
    1696:	bd80      	pop	{r7, pc}
    1698:	40000800 	.word	0x40000800
    169c:	000008cb 	.word	0x000008cb
    16a0:	40001c00 	.word	0x40001c00
    16a4:	000005e5 	.word	0x000005e5
    16a8:	0000838d 	.word	0x0000838d
    16ac:	43001400 	.word	0x43001400
    16b0:	20001090 	.word	0x20001090
    16b4:	00002699 	.word	0x00002699

000016b8 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    16b8:	b580      	push	{r7, lr}
    16ba:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    16bc:	4902      	ldr	r1, [pc, #8]	; (16c8 <LIVE_PULSE_PORT_init+0x10>)
    16be:	2021      	movs	r0, #33	; 0x21
    16c0:	4b02      	ldr	r3, [pc, #8]	; (16cc <LIVE_PULSE_PORT_init+0x14>)
    16c2:	4798      	blx	r3
}
    16c4:	bf00      	nop
    16c6:	bd80      	pop	{r7, pc}
    16c8:	00210004 	.word	0x00210004
    16cc:	00000e19 	.word	0x00000e19

000016d0 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    16d0:	b580      	push	{r7, lr}
    16d2:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    16d4:	4804      	ldr	r0, [pc, #16]	; (16e8 <LIVE_PULSE_CLOCK_init+0x18>)
    16d6:	4b05      	ldr	r3, [pc, #20]	; (16ec <LIVE_PULSE_CLOCK_init+0x1c>)
    16d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16da:	2240      	movs	r2, #64	; 0x40
    16dc:	2127      	movs	r1, #39	; 0x27
    16de:	4804      	ldr	r0, [pc, #16]	; (16f0 <LIVE_PULSE_CLOCK_init+0x20>)
    16e0:	4b04      	ldr	r3, [pc, #16]	; (16f4 <LIVE_PULSE_CLOCK_init+0x24>)
    16e2:	4798      	blx	r3
}
    16e4:	bf00      	nop
    16e6:	bd80      	pop	{r7, pc}
    16e8:	40000800 	.word	0x40000800
    16ec:	000008eb 	.word	0x000008eb
    16f0:	40001c00 	.word	0x40001c00
    16f4:	000005e5 	.word	0x000005e5

000016f8 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    16f8:	b580      	push	{r7, lr}
    16fa:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    16fc:	4b06      	ldr	r3, [pc, #24]	; (1718 <LIVE_PULSE_init+0x20>)
    16fe:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1700:	4b06      	ldr	r3, [pc, #24]	; (171c <LIVE_PULSE_init+0x24>)
    1702:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1704:	4b06      	ldr	r3, [pc, #24]	; (1720 <LIVE_PULSE_init+0x28>)
    1706:	4798      	blx	r3
    1708:	4603      	mov	r3, r0
    170a:	461a      	mov	r2, r3
    170c:	4905      	ldr	r1, [pc, #20]	; (1724 <LIVE_PULSE_init+0x2c>)
    170e:	4806      	ldr	r0, [pc, #24]	; (1728 <LIVE_PULSE_init+0x30>)
    1710:	4b06      	ldr	r3, [pc, #24]	; (172c <LIVE_PULSE_init+0x34>)
    1712:	4798      	blx	r3
}
    1714:	bf00      	nop
    1716:	bd80      	pop	{r7, pc}
    1718:	000016d1 	.word	0x000016d1
    171c:	000016b9 	.word	0x000016b9
    1720:	000083a1 	.word	0x000083a1
    1724:	43001800 	.word	0x43001800
    1728:	200010d0 	.word	0x200010d0
    172c:	000022b9 	.word	0x000022b9

00001730 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1730:	b580      	push	{r7, lr}
    1732:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1734:	4804      	ldr	r0, [pc, #16]	; (1748 <TIMER_HVAC_CLOCK_init+0x18>)
    1736:	4b05      	ldr	r3, [pc, #20]	; (174c <TIMER_HVAC_CLOCK_init+0x1c>)
    1738:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    173a:	2244      	movs	r2, #68	; 0x44
    173c:	2119      	movs	r1, #25
    173e:	4804      	ldr	r0, [pc, #16]	; (1750 <TIMER_HVAC_CLOCK_init+0x20>)
    1740:	4b04      	ldr	r3, [pc, #16]	; (1754 <TIMER_HVAC_CLOCK_init+0x24>)
    1742:	4798      	blx	r3
}
    1744:	bf00      	nop
    1746:	bd80      	pop	{r7, pc}
    1748:	40000800 	.word	0x40000800
    174c:	0000078b 	.word	0x0000078b
    1750:	40001c00 	.word	0x40001c00
    1754:	000005e5 	.word	0x000005e5

00001758 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1758:	b580      	push	{r7, lr}
    175a:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    175c:	4b05      	ldr	r3, [pc, #20]	; (1774 <TIMER_HVAC_init+0x1c>)
    175e:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1760:	4b05      	ldr	r3, [pc, #20]	; (1778 <TIMER_HVAC_init+0x20>)
    1762:	4798      	blx	r3
    1764:	4603      	mov	r3, r0
    1766:	461a      	mov	r2, r3
    1768:	4904      	ldr	r1, [pc, #16]	; (177c <TIMER_HVAC_init+0x24>)
    176a:	4805      	ldr	r0, [pc, #20]	; (1780 <TIMER_HVAC_init+0x28>)
    176c:	4b05      	ldr	r3, [pc, #20]	; (1784 <TIMER_HVAC_init+0x2c>)
    176e:	4798      	blx	r3
}
    1770:	bf00      	nop
    1772:	bd80      	pop	{r7, pc}
    1774:	00001731 	.word	0x00001731
    1778:	0000774d 	.word	0x0000774d
    177c:	41016000 	.word	0x41016000
    1780:	20001194 	.word	0x20001194
    1784:	00002699 	.word	0x00002699

00001788 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1788:	b580      	push	{r7, lr}
    178a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    178c:	4804      	ldr	r0, [pc, #16]	; (17a0 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    178e:	4b05      	ldr	r3, [pc, #20]	; (17a4 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1790:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1792:	2244      	movs	r2, #68	; 0x44
    1794:	2119      	movs	r1, #25
    1796:	4804      	ldr	r0, [pc, #16]	; (17a8 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1798:	4b04      	ldr	r3, [pc, #16]	; (17ac <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    179a:	4798      	blx	r3
}
    179c:	bf00      	nop
    179e:	bd80      	pop	{r7, pc}
    17a0:	40000800 	.word	0x40000800
    17a4:	000007ab 	.word	0x000007ab
    17a8:	40001c00 	.word	0x40001c00
    17ac:	000005e5 	.word	0x000005e5

000017b0 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    17b0:	b580      	push	{r7, lr}
    17b2:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    17b4:	4b05      	ldr	r3, [pc, #20]	; (17cc <TIMER_TEMPERATURES_init+0x1c>)
    17b6:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    17b8:	4b05      	ldr	r3, [pc, #20]	; (17d0 <TIMER_TEMPERATURES_init+0x20>)
    17ba:	4798      	blx	r3
    17bc:	4603      	mov	r3, r0
    17be:	461a      	mov	r2, r3
    17c0:	4904      	ldr	r1, [pc, #16]	; (17d4 <TIMER_TEMPERATURES_init+0x24>)
    17c2:	4805      	ldr	r0, [pc, #20]	; (17d8 <TIMER_TEMPERATURES_init+0x28>)
    17c4:	4b05      	ldr	r3, [pc, #20]	; (17dc <TIMER_TEMPERATURES_init+0x2c>)
    17c6:	4798      	blx	r3
}
    17c8:	bf00      	nop
    17ca:	bd80      	pop	{r7, pc}
    17cc:	00001789 	.word	0x00001789
    17d0:	0000774d 	.word	0x0000774d
    17d4:	41018000 	.word	0x41018000
    17d8:	2000101c 	.word	0x2000101c
    17dc:	00002699 	.word	0x00002699

000017e0 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    17e0:	b580      	push	{r7, lr}
    17e2:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    17e4:	2102      	movs	r1, #2
    17e6:	2018      	movs	r0, #24
    17e8:	4b0f      	ldr	r3, [pc, #60]	; (1828 <CDCUSB_PORT_init+0x48>)
    17ea:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    17ec:	2100      	movs	r1, #0
    17ee:	2018      	movs	r0, #24
    17f0:	4b0e      	ldr	r3, [pc, #56]	; (182c <CDCUSB_PORT_init+0x4c>)
    17f2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    17f4:	2100      	movs	r1, #0
    17f6:	2018      	movs	r0, #24
    17f8:	4b0d      	ldr	r3, [pc, #52]	; (1830 <CDCUSB_PORT_init+0x50>)
    17fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    17fc:	490d      	ldr	r1, [pc, #52]	; (1834 <CDCUSB_PORT_init+0x54>)
    17fe:	2018      	movs	r0, #24
    1800:	4b0d      	ldr	r3, [pc, #52]	; (1838 <CDCUSB_PORT_init+0x58>)
    1802:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1804:	2102      	movs	r1, #2
    1806:	2019      	movs	r0, #25
    1808:	4b07      	ldr	r3, [pc, #28]	; (1828 <CDCUSB_PORT_init+0x48>)
    180a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    180c:	2100      	movs	r1, #0
    180e:	2019      	movs	r0, #25
    1810:	4b06      	ldr	r3, [pc, #24]	; (182c <CDCUSB_PORT_init+0x4c>)
    1812:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1814:	2100      	movs	r1, #0
    1816:	2019      	movs	r0, #25
    1818:	4b05      	ldr	r3, [pc, #20]	; (1830 <CDCUSB_PORT_init+0x50>)
    181a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    181c:	4907      	ldr	r1, [pc, #28]	; (183c <CDCUSB_PORT_init+0x5c>)
    181e:	2019      	movs	r0, #25
    1820:	4b05      	ldr	r3, [pc, #20]	; (1838 <CDCUSB_PORT_init+0x58>)
    1822:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1824:	bf00      	nop
    1826:	bd80      	pop	{r7, pc}
    1828:	00000e39 	.word	0x00000e39
    182c:	00000e71 	.word	0x00000e71
    1830:	00000de5 	.word	0x00000de5
    1834:	00180007 	.word	0x00180007
    1838:	00000e19 	.word	0x00000e19
    183c:	00190007 	.word	0x00190007

00001840 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1840:	b580      	push	{r7, lr}
    1842:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1844:	2242      	movs	r2, #66	; 0x42
    1846:	210a      	movs	r1, #10
    1848:	4805      	ldr	r0, [pc, #20]	; (1860 <CDCUSB_CLOCK_init+0x20>)
    184a:	4b06      	ldr	r3, [pc, #24]	; (1864 <CDCUSB_CLOCK_init+0x24>)
    184c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    184e:	4806      	ldr	r0, [pc, #24]	; (1868 <CDCUSB_CLOCK_init+0x28>)
    1850:	4b06      	ldr	r3, [pc, #24]	; (186c <CDCUSB_CLOCK_init+0x2c>)
    1852:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1854:	4804      	ldr	r0, [pc, #16]	; (1868 <CDCUSB_CLOCK_init+0x28>)
    1856:	4b06      	ldr	r3, [pc, #24]	; (1870 <CDCUSB_CLOCK_init+0x30>)
    1858:	4798      	blx	r3
}
    185a:	bf00      	nop
    185c:	bd80      	pop	{r7, pc}
    185e:	bf00      	nop
    1860:	40001c00 	.word	0x40001c00
    1864:	000005e5 	.word	0x000005e5
    1868:	40000800 	.word	0x40000800
    186c:	0000060b 	.word	0x0000060b
    1870:	0000072b 	.word	0x0000072b

00001874 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1874:	b580      	push	{r7, lr}
    1876:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1878:	4b03      	ldr	r3, [pc, #12]	; (1888 <CDCUSB_init+0x14>)
    187a:	4798      	blx	r3
	usb_d_init();
    187c:	4b03      	ldr	r3, [pc, #12]	; (188c <CDCUSB_init+0x18>)
    187e:	4798      	blx	r3
	CDCUSB_PORT_init();
    1880:	4b03      	ldr	r3, [pc, #12]	; (1890 <CDCUSB_init+0x1c>)
    1882:	4798      	blx	r3
}
    1884:	bf00      	nop
    1886:	bd80      	pop	{r7, pc}
    1888:	00001841 	.word	0x00001841
    188c:	00002ef5 	.word	0x00002ef5
    1890:	000017e1 	.word	0x000017e1

00001894 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1894:	b580      	push	{r7, lr}
    1896:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1898:	4802      	ldr	r0, [pc, #8]	; (18a4 <WATCHDOG_CLOCK_init+0x10>)
    189a:	4b03      	ldr	r3, [pc, #12]	; (18a8 <WATCHDOG_CLOCK_init+0x14>)
    189c:	4798      	blx	r3
}
    189e:	bf00      	nop
    18a0:	bd80      	pop	{r7, pc}
    18a2:	bf00      	nop
    18a4:	40000800 	.word	0x40000800
    18a8:	0000068b 	.word	0x0000068b

000018ac <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    18b0:	4b03      	ldr	r3, [pc, #12]	; (18c0 <WATCHDOG_init+0x14>)
    18b2:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    18b4:	4903      	ldr	r1, [pc, #12]	; (18c4 <WATCHDOG_init+0x18>)
    18b6:	4804      	ldr	r0, [pc, #16]	; (18c8 <WATCHDOG_init+0x1c>)
    18b8:	4b04      	ldr	r3, [pc, #16]	; (18cc <WATCHDOG_init+0x20>)
    18ba:	4798      	blx	r3
}
    18bc:	bf00      	nop
    18be:	bd80      	pop	{r7, pc}
    18c0:	00001895 	.word	0x00001895
    18c4:	40002000 	.word	0x40002000
    18c8:	20001214 	.word	0x20001214
    18cc:	00000eb9 	.word	0x00000eb9

000018d0 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    18d0:	b580      	push	{r7, lr}
    18d2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    18d4:	4904      	ldr	r1, [pc, #16]	; (18e8 <CAN_CCU_PORT_init+0x18>)
    18d6:	202d      	movs	r0, #45	; 0x2d
    18d8:	4b04      	ldr	r3, [pc, #16]	; (18ec <CAN_CCU_PORT_init+0x1c>)
    18da:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    18dc:	4904      	ldr	r1, [pc, #16]	; (18f0 <CAN_CCU_PORT_init+0x20>)
    18de:	202c      	movs	r0, #44	; 0x2c
    18e0:	4b02      	ldr	r3, [pc, #8]	; (18ec <CAN_CCU_PORT_init+0x1c>)
    18e2:	4798      	blx	r3
}
    18e4:	bf00      	nop
    18e6:	bd80      	pop	{r7, pc}
    18e8:	002d0007 	.word	0x002d0007
    18ec:	00000e19 	.word	0x00000e19
    18f0:	002c0007 	.word	0x002c0007

000018f4 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    18f4:	b580      	push	{r7, lr}
    18f6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    18f8:	4807      	ldr	r0, [pc, #28]	; (1918 <CAN_CCU_init+0x24>)
    18fa:	4b08      	ldr	r3, [pc, #32]	; (191c <CAN_CCU_init+0x28>)
    18fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18fe:	2243      	movs	r2, #67	; 0x43
    1900:	211c      	movs	r1, #28
    1902:	4807      	ldr	r0, [pc, #28]	; (1920 <CAN_CCU_init+0x2c>)
    1904:	4b07      	ldr	r3, [pc, #28]	; (1924 <CAN_CCU_init+0x30>)
    1906:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1908:	4907      	ldr	r1, [pc, #28]	; (1928 <CAN_CCU_init+0x34>)
    190a:	4808      	ldr	r0, [pc, #32]	; (192c <CAN_CCU_init+0x38>)
    190c:	4b08      	ldr	r3, [pc, #32]	; (1930 <CAN_CCU_init+0x3c>)
    190e:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1910:	4b08      	ldr	r3, [pc, #32]	; (1934 <CAN_CCU_init+0x40>)
    1912:	4798      	blx	r3
}
    1914:	bf00      	nop
    1916:	bd80      	pop	{r7, pc}
    1918:	40000800 	.word	0x40000800
    191c:	0000064b 	.word	0x0000064b
    1920:	40001c00 	.word	0x40001c00
    1924:	000005e5 	.word	0x000005e5
    1928:	42000400 	.word	0x42000400
    192c:	200010ec 	.word	0x200010ec
    1930:	00001b91 	.word	0x00001b91
    1934:	000018d1 	.word	0x000018d1

00001938 <system_init>:

void system_init(void)
{
    1938:	b580      	push	{r7, lr}
    193a:	af00      	add	r7, sp, #0
	init_mcu();
    193c:	4b5e      	ldr	r3, [pc, #376]	; (1ab8 <system_init+0x180>)
    193e:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1940:	2100      	movs	r1, #0
    1942:	2007      	movs	r0, #7
    1944:	4b5d      	ldr	r3, [pc, #372]	; (1abc <system_init+0x184>)
    1946:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1948:	2102      	movs	r1, #2
    194a:	2007      	movs	r0, #7
    194c:	4b5c      	ldr	r3, [pc, #368]	; (1ac0 <system_init+0x188>)
    194e:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1950:	f04f 31ff 	mov.w	r1, #4294967295
    1954:	2007      	movs	r0, #7
    1956:	4b5b      	ldr	r3, [pc, #364]	; (1ac4 <system_init+0x18c>)
    1958:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    195a:	2101      	movs	r1, #1
    195c:	200f      	movs	r0, #15
    195e:	4b57      	ldr	r3, [pc, #348]	; (1abc <system_init+0x184>)
    1960:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1962:	2102      	movs	r1, #2
    1964:	200f      	movs	r0, #15
    1966:	4b56      	ldr	r3, [pc, #344]	; (1ac0 <system_init+0x188>)
    1968:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    196a:	f04f 31ff 	mov.w	r1, #4294967295
    196e:	200f      	movs	r0, #15
    1970:	4b54      	ldr	r3, [pc, #336]	; (1ac4 <system_init+0x18c>)
    1972:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1974:	2101      	movs	r1, #1
    1976:	2013      	movs	r0, #19
    1978:	4b50      	ldr	r3, [pc, #320]	; (1abc <system_init+0x184>)
    197a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    197c:	2102      	movs	r1, #2
    197e:	2013      	movs	r0, #19
    1980:	4b4f      	ldr	r3, [pc, #316]	; (1ac0 <system_init+0x188>)
    1982:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1984:	f04f 31ff 	mov.w	r1, #4294967295
    1988:	2013      	movs	r0, #19
    198a:	4b4e      	ldr	r3, [pc, #312]	; (1ac4 <system_init+0x18c>)
    198c:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    198e:	2101      	movs	r1, #1
    1990:	201b      	movs	r0, #27
    1992:	4b4a      	ldr	r3, [pc, #296]	; (1abc <system_init+0x184>)
    1994:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1996:	2102      	movs	r1, #2
    1998:	201b      	movs	r0, #27
    199a:	4b49      	ldr	r3, [pc, #292]	; (1ac0 <system_init+0x188>)
    199c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    199e:	f04f 31ff 	mov.w	r1, #4294967295
    19a2:	201b      	movs	r0, #27
    19a4:	4b47      	ldr	r3, [pc, #284]	; (1ac4 <system_init+0x18c>)
    19a6:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    19a8:	2101      	movs	r1, #1
    19aa:	2027      	movs	r0, #39	; 0x27
    19ac:	4b44      	ldr	r3, [pc, #272]	; (1ac0 <system_init+0x188>)
    19ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    19b0:	2102      	movs	r1, #2
    19b2:	2027      	movs	r0, #39	; 0x27
    19b4:	4b44      	ldr	r3, [pc, #272]	; (1ac8 <system_init+0x190>)
    19b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    19b8:	f04f 31ff 	mov.w	r1, #4294967295
    19bc:	2027      	movs	r0, #39	; 0x27
    19be:	4b41      	ldr	r3, [pc, #260]	; (1ac4 <system_init+0x18c>)
    19c0:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    19c2:	2101      	movs	r1, #1
    19c4:	203d      	movs	r0, #61	; 0x3d
    19c6:	4b3d      	ldr	r3, [pc, #244]	; (1abc <system_init+0x184>)
    19c8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    19ca:	2102      	movs	r1, #2
    19cc:	203d      	movs	r0, #61	; 0x3d
    19ce:	4b3c      	ldr	r3, [pc, #240]	; (1ac0 <system_init+0x188>)
    19d0:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    19d2:	f04f 31ff 	mov.w	r1, #4294967295
    19d6:	203d      	movs	r0, #61	; 0x3d
    19d8:	4b3a      	ldr	r3, [pc, #232]	; (1ac4 <system_init+0x18c>)
    19da:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    19dc:	2101      	movs	r1, #1
    19de:	203f      	movs	r0, #63	; 0x3f
    19e0:	4b37      	ldr	r3, [pc, #220]	; (1ac0 <system_init+0x188>)
    19e2:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    19e4:	2101      	movs	r1, #1
    19e6:	203f      	movs	r0, #63	; 0x3f
    19e8:	4b37      	ldr	r3, [pc, #220]	; (1ac8 <system_init+0x190>)
    19ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    19ec:	f04f 31ff 	mov.w	r1, #4294967295
    19f0:	203f      	movs	r0, #63	; 0x3f
    19f2:	4b34      	ldr	r3, [pc, #208]	; (1ac4 <system_init+0x18c>)
    19f4:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    19f6:	2100      	movs	r1, #0
    19f8:	204d      	movs	r0, #77	; 0x4d
    19fa:	4b30      	ldr	r3, [pc, #192]	; (1abc <system_init+0x184>)
    19fc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    19fe:	2102      	movs	r1, #2
    1a00:	204d      	movs	r0, #77	; 0x4d
    1a02:	4b2f      	ldr	r3, [pc, #188]	; (1ac0 <system_init+0x188>)
    1a04:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1a06:	f04f 31ff 	mov.w	r1, #4294967295
    1a0a:	204d      	movs	r0, #77	; 0x4d
    1a0c:	4b2d      	ldr	r3, [pc, #180]	; (1ac4 <system_init+0x18c>)
    1a0e:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1a10:	2101      	movs	r1, #1
    1a12:	204e      	movs	r0, #78	; 0x4e
    1a14:	4b29      	ldr	r3, [pc, #164]	; (1abc <system_init+0x184>)
    1a16:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1a18:	2102      	movs	r1, #2
    1a1a:	204e      	movs	r0, #78	; 0x4e
    1a1c:	4b28      	ldr	r3, [pc, #160]	; (1ac0 <system_init+0x188>)
    1a1e:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1a20:	f04f 31ff 	mov.w	r1, #4294967295
    1a24:	204e      	movs	r0, #78	; 0x4e
    1a26:	4b27      	ldr	r3, [pc, #156]	; (1ac4 <system_init+0x18c>)
    1a28:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1a2a:	2100      	movs	r1, #0
    1a2c:	204f      	movs	r0, #79	; 0x4f
    1a2e:	4b23      	ldr	r3, [pc, #140]	; (1abc <system_init+0x184>)
    1a30:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1a32:	2102      	movs	r1, #2
    1a34:	204f      	movs	r0, #79	; 0x4f
    1a36:	4b22      	ldr	r3, [pc, #136]	; (1ac0 <system_init+0x188>)
    1a38:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1a3a:	f04f 31ff 	mov.w	r1, #4294967295
    1a3e:	204f      	movs	r0, #79	; 0x4f
    1a40:	4b20      	ldr	r3, [pc, #128]	; (1ac4 <system_init+0x18c>)
    1a42:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1a44:	2100      	movs	r1, #0
    1a46:	2052      	movs	r0, #82	; 0x52
    1a48:	4b1c      	ldr	r3, [pc, #112]	; (1abc <system_init+0x184>)
    1a4a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1a4c:	2102      	movs	r1, #2
    1a4e:	2052      	movs	r0, #82	; 0x52
    1a50:	4b1b      	ldr	r3, [pc, #108]	; (1ac0 <system_init+0x188>)
    1a52:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1a54:	f04f 31ff 	mov.w	r1, #4294967295
    1a58:	2052      	movs	r0, #82	; 0x52
    1a5a:	4b1a      	ldr	r3, [pc, #104]	; (1ac4 <system_init+0x18c>)
    1a5c:	4798      	blx	r3

	CRC_CALC_init();
    1a5e:	4b1b      	ldr	r3, [pc, #108]	; (1acc <system_init+0x194>)
    1a60:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1a62:	4b1b      	ldr	r3, [pc, #108]	; (1ad0 <system_init+0x198>)
    1a64:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1a66:	4b1b      	ldr	r3, [pc, #108]	; (1ad4 <system_init+0x19c>)
    1a68:	4798      	blx	r3

	QSPI_N25Q256_init();
    1a6a:	4b1b      	ldr	r3, [pc, #108]	; (1ad8 <system_init+0x1a0>)
    1a6c:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1a6e:	4b1b      	ldr	r3, [pc, #108]	; (1adc <system_init+0x1a4>)
    1a70:	4798      	blx	r3

	I2C_SHARED_init();
    1a72:	4b1b      	ldr	r3, [pc, #108]	; (1ae0 <system_init+0x1a8>)
    1a74:	4798      	blx	r3

	SPI_TEMP_init();
    1a76:	4b1b      	ldr	r3, [pc, #108]	; (1ae4 <system_init+0x1ac>)
    1a78:	4798      	blx	r3

	I2C_EXPANDER_init();
    1a7a:	4b1b      	ldr	r3, [pc, #108]	; (1ae8 <system_init+0x1b0>)
    1a7c:	4798      	blx	r3

	SPI_HI3593_init();
    1a7e:	4b1b      	ldr	r3, [pc, #108]	; (1aec <system_init+0x1b4>)
    1a80:	4798      	blx	r3

	I2C_EEPROM_init();
    1a82:	4b1b      	ldr	r3, [pc, #108]	; (1af0 <system_init+0x1b8>)
    1a84:	4798      	blx	r3

	TIMER_USB_init();
    1a86:	4b1b      	ldr	r3, [pc, #108]	; (1af4 <system_init+0x1bc>)
    1a88:	4798      	blx	r3
	TIMER_ARINC_init();
    1a8a:	4b1b      	ldr	r3, [pc, #108]	; (1af8 <system_init+0x1c0>)
    1a8c:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1a8e:	4b1b      	ldr	r3, [pc, #108]	; (1afc <system_init+0x1c4>)
    1a90:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1a92:	4b1b      	ldr	r3, [pc, #108]	; (1b00 <system_init+0x1c8>)
    1a94:	4798      	blx	r3
	TIMER_EVENT_init();
    1a96:	4b1b      	ldr	r3, [pc, #108]	; (1b04 <system_init+0x1cc>)
    1a98:	4798      	blx	r3
	LIVE_PULSE_init();
    1a9a:	4b1b      	ldr	r3, [pc, #108]	; (1b08 <system_init+0x1d0>)
    1a9c:	4798      	blx	r3

	TIMER_HVAC_init();
    1a9e:	4b1b      	ldr	r3, [pc, #108]	; (1b0c <system_init+0x1d4>)
    1aa0:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1aa2:	4b1b      	ldr	r3, [pc, #108]	; (1b10 <system_init+0x1d8>)
    1aa4:	4798      	blx	r3

	CDCUSB_init();
    1aa6:	4b1b      	ldr	r3, [pc, #108]	; (1b14 <system_init+0x1dc>)
    1aa8:	4798      	blx	r3

	WATCHDOG_init();
    1aaa:	4b1b      	ldr	r3, [pc, #108]	; (1b18 <system_init+0x1e0>)
    1aac:	4798      	blx	r3
	CAN_CCU_init();
    1aae:	4b1b      	ldr	r3, [pc, #108]	; (1b1c <system_init+0x1e4>)
    1ab0:	4798      	blx	r3
}
    1ab2:	bf00      	nop
    1ab4:	bd80      	pop	{r7, pc}
    1ab6:	bf00      	nop
    1ab8:	00000ea9 	.word	0x00000ea9
    1abc:	00000e71 	.word	0x00000e71
    1ac0:	00000e39 	.word	0x00000e39
    1ac4:	00000e19 	.word	0x00000e19
    1ac8:	00000de5 	.word	0x00000de5
    1acc:	00000f09 	.word	0x00000f09
    1ad0:	00000f35 	.word	0x00000f35
    1ad4:	00001041 	.word	0x00001041
    1ad8:	00001189 	.word	0x00001189
    1adc:	000011cd 	.word	0x000011cd
    1ae0:	0000125d 	.word	0x0000125d
    1ae4:	00001329 	.word	0x00001329
    1ae8:	000013c1 	.word	0x000013c1
    1aec:	0000148d 	.word	0x0000148d
    1af0:	00001525 	.word	0x00001525
    1af4:	00001551 	.word	0x00001551
    1af8:	00001599 	.word	0x00001599
    1afc:	000015e1 	.word	0x000015e1
    1b00:	00001629 	.word	0x00001629
    1b04:	00001671 	.word	0x00001671
    1b08:	000016f9 	.word	0x000016f9
    1b0c:	00001759 	.word	0x00001759
    1b10:	000017b1 	.word	0x000017b1
    1b14:	00001875 	.word	0x00001875
    1b18:	000018ad 	.word	0x000018ad
    1b1c:	000018f5 	.word	0x000018f5

00001b20 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b084      	sub	sp, #16
    1b24:	af00      	add	r7, sp, #0
    1b26:	6078      	str	r0, [r7, #4]
    1b28:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1b2a:	2300      	movs	r3, #0
    1b2c:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1b2e:	687b      	ldr	r3, [r7, #4]
    1b30:	2b00      	cmp	r3, #0
    1b32:	bf14      	ite	ne
    1b34:	2301      	movne	r3, #1
    1b36:	2300      	moveq	r3, #0
    1b38:	b2db      	uxtb	r3, r3
    1b3a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1b3e:	4911      	ldr	r1, [pc, #68]	; (1b84 <calendar_init+0x64>)
    1b40:	4618      	mov	r0, r3
    1b42:	4b11      	ldr	r3, [pc, #68]	; (1b88 <calendar_init+0x68>)
    1b44:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1b46:	687b      	ldr	r3, [r7, #4]
    1b48:	681a      	ldr	r2, [r3, #0]
    1b4a:	683b      	ldr	r3, [r7, #0]
    1b4c:	429a      	cmp	r2, r3
    1b4e:	d101      	bne.n	1b54 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1b50:	2300      	movs	r3, #0
    1b52:	e013      	b.n	1b7c <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	2b00      	cmp	r3, #0
    1b5a:	d002      	beq.n	1b62 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1b5c:	f06f 0311 	mvn.w	r3, #17
    1b60:	e00c      	b.n	1b7c <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1b62:	687b      	ldr	r3, [r7, #4]
    1b64:	683a      	ldr	r2, [r7, #0]
    1b66:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1b68:	687b      	ldr	r3, [r7, #4]
    1b6a:	4618      	mov	r0, r3
    1b6c:	4b07      	ldr	r3, [pc, #28]	; (1b8c <calendar_init+0x6c>)
    1b6e:	4798      	blx	r3
    1b70:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1b78:	619a      	str	r2, [r3, #24]

	return ret;
    1b7a:	68fb      	ldr	r3, [r7, #12]
}
    1b7c:	4618      	mov	r0, r3
    1b7e:	3710      	adds	r7, #16
    1b80:	46bd      	mov	sp, r7
    1b82:	bd80      	pop	{r7, pc}
    1b84:	0000ed20 	.word	0x0000ed20
    1b88:	0000349d 	.word	0x0000349d
    1b8c:	00005829 	.word	0x00005829

00001b90 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1b90:	b580      	push	{r7, lr}
    1b92:	b084      	sub	sp, #16
    1b94:	af00      	add	r7, sp, #0
    1b96:	6078      	str	r0, [r7, #4]
    1b98:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d004      	beq.n	1baa <can_async_init+0x1a>
    1ba0:	683b      	ldr	r3, [r7, #0]
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d001      	beq.n	1baa <can_async_init+0x1a>
    1ba6:	2301      	movs	r3, #1
    1ba8:	e000      	b.n	1bac <can_async_init+0x1c>
    1baa:	2300      	movs	r3, #0
    1bac:	f003 0301 	and.w	r3, r3, #1
    1bb0:	b2db      	uxtb	r3, r3
    1bb2:	2241      	movs	r2, #65	; 0x41
    1bb4:	490e      	ldr	r1, [pc, #56]	; (1bf0 <can_async_init+0x60>)
    1bb6:	4618      	mov	r0, r3
    1bb8:	4b0e      	ldr	r3, [pc, #56]	; (1bf4 <can_async_init+0x64>)
    1bba:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	6839      	ldr	r1, [r7, #0]
    1bc0:	4618      	mov	r0, r3
    1bc2:	4b0d      	ldr	r3, [pc, #52]	; (1bf8 <can_async_init+0x68>)
    1bc4:	4798      	blx	r3
    1bc6:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1bc8:	68fb      	ldr	r3, [r7, #12]
    1bca:	2b00      	cmp	r3, #0
    1bcc:	d001      	beq.n	1bd2 <can_async_init+0x42>
		return rc;
    1bce:	68fb      	ldr	r3, [r7, #12]
    1bd0:	e009      	b.n	1be6 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1bd2:	687b      	ldr	r3, [r7, #4]
    1bd4:	4a09      	ldr	r2, [pc, #36]	; (1bfc <can_async_init+0x6c>)
    1bd6:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1bd8:	687b      	ldr	r3, [r7, #4]
    1bda:	4a09      	ldr	r2, [pc, #36]	; (1c00 <can_async_init+0x70>)
    1bdc:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1bde:	687b      	ldr	r3, [r7, #4]
    1be0:	4a08      	ldr	r2, [pc, #32]	; (1c04 <can_async_init+0x74>)
    1be2:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1be4:	2300      	movs	r3, #0
}
    1be6:	4618      	mov	r0, r3
    1be8:	3710      	adds	r7, #16
    1bea:	46bd      	mov	sp, r7
    1bec:	bd80      	pop	{r7, pc}
    1bee:	bf00      	nop
    1bf0:	0000ed3c 	.word	0x0000ed3c
    1bf4:	0000349d 	.word	0x0000349d
    1bf8:	000039f9 	.word	0x000039f9
    1bfc:	00001c09 	.word	0x00001c09
    1c00:	00001c2d 	.word	0x00001c2d
    1c04:	00001c51 	.word	0x00001c51

00001c08 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1c08:	b580      	push	{r7, lr}
    1c0a:	b084      	sub	sp, #16
    1c0c:	af00      	add	r7, sp, #0
    1c0e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c10:	687b      	ldr	r3, [r7, #4]
    1c12:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1c14:	68fb      	ldr	r3, [r7, #12]
    1c16:	69db      	ldr	r3, [r3, #28]
    1c18:	2b00      	cmp	r3, #0
    1c1a:	d003      	beq.n	1c24 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	69db      	ldr	r3, [r3, #28]
    1c20:	68f8      	ldr	r0, [r7, #12]
    1c22:	4798      	blx	r3
	}
}
    1c24:	bf00      	nop
    1c26:	3710      	adds	r7, #16
    1c28:	46bd      	mov	sp, r7
    1c2a:	bd80      	pop	{r7, pc}

00001c2c <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	b084      	sub	sp, #16
    1c30:	af00      	add	r7, sp, #0
    1c32:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1c38:	68fb      	ldr	r3, [r7, #12]
    1c3a:	6a1b      	ldr	r3, [r3, #32]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d003      	beq.n	1c48 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1c40:	68fb      	ldr	r3, [r7, #12]
    1c42:	6a1b      	ldr	r3, [r3, #32]
    1c44:	68f8      	ldr	r0, [r7, #12]
    1c46:	4798      	blx	r3
	}
}
    1c48:	bf00      	nop
    1c4a:	3710      	adds	r7, #16
    1c4c:	46bd      	mov	sp, r7
    1c4e:	bd80      	pop	{r7, pc}

00001c50 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1c50:	b580      	push	{r7, lr}
    1c52:	b084      	sub	sp, #16
    1c54:	af00      	add	r7, sp, #0
    1c56:	6078      	str	r0, [r7, #4]
    1c58:	460b      	mov	r3, r1
    1c5a:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1c60:	68fb      	ldr	r3, [r7, #12]
    1c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c64:	2b00      	cmp	r3, #0
    1c66:	d005      	beq.n	1c74 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1c68:	68fb      	ldr	r3, [r7, #12]
    1c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c6c:	78fa      	ldrb	r2, [r7, #3]
    1c6e:	4611      	mov	r1, r2
    1c70:	68f8      	ldr	r0, [r7, #12]
    1c72:	4798      	blx	r3
	}
}
    1c74:	bf00      	nop
    1c76:	3710      	adds	r7, #16
    1c78:	46bd      	mov	sp, r7
    1c7a:	bd80      	pop	{r7, pc}

00001c7c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1c7c:	b580      	push	{r7, lr}
    1c7e:	b082      	sub	sp, #8
    1c80:	af00      	add	r7, sp, #0
    1c82:	6078      	str	r0, [r7, #4]
    1c84:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	2b00      	cmp	r3, #0
    1c8a:	d004      	beq.n	1c96 <crc_sync_init+0x1a>
    1c8c:	683b      	ldr	r3, [r7, #0]
    1c8e:	2b00      	cmp	r3, #0
    1c90:	d001      	beq.n	1c96 <crc_sync_init+0x1a>
    1c92:	2301      	movs	r3, #1
    1c94:	e000      	b.n	1c98 <crc_sync_init+0x1c>
    1c96:	2300      	movs	r3, #0
    1c98:	f003 0301 	and.w	r3, r3, #1
    1c9c:	b2db      	uxtb	r3, r3
    1c9e:	222b      	movs	r2, #43	; 0x2b
    1ca0:	4906      	ldr	r1, [pc, #24]	; (1cbc <crc_sync_init+0x40>)
    1ca2:	4618      	mov	r0, r3
    1ca4:	4b06      	ldr	r3, [pc, #24]	; (1cc0 <crc_sync_init+0x44>)
    1ca6:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	6839      	ldr	r1, [r7, #0]
    1cac:	4618      	mov	r0, r3
    1cae:	4b05      	ldr	r3, [pc, #20]	; (1cc4 <crc_sync_init+0x48>)
    1cb0:	4798      	blx	r3
    1cb2:	4603      	mov	r3, r0
}
    1cb4:	4618      	mov	r0, r3
    1cb6:	3708      	adds	r7, #8
    1cb8:	46bd      	mov	sp, r7
    1cba:	bd80      	pop	{r7, pc}
    1cbc:	0000ed58 	.word	0x0000ed58
    1cc0:	0000349d 	.word	0x0000349d
    1cc4:	00004101 	.word	0x00004101

00001cc8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1cc8:	b590      	push	{r4, r7, lr}
    1cca:	b083      	sub	sp, #12
    1ccc:	af00      	add	r7, sp, #0
    1cce:	4603      	mov	r3, r0
    1cd0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1cd2:	4b07      	ldr	r3, [pc, #28]	; (1cf0 <delay_us+0x28>)
    1cd4:	681c      	ldr	r4, [r3, #0]
    1cd6:	88fb      	ldrh	r3, [r7, #6]
    1cd8:	4618      	mov	r0, r3
    1cda:	4b06      	ldr	r3, [pc, #24]	; (1cf4 <delay_us+0x2c>)
    1cdc:	4798      	blx	r3
    1cde:	4603      	mov	r3, r0
    1ce0:	4619      	mov	r1, r3
    1ce2:	4620      	mov	r0, r4
    1ce4:	4b04      	ldr	r3, [pc, #16]	; (1cf8 <delay_us+0x30>)
    1ce6:	4798      	blx	r3
}
    1ce8:	bf00      	nop
    1cea:	370c      	adds	r7, #12
    1cec:	46bd      	mov	sp, r7
    1cee:	bd90      	pop	{r4, r7, pc}
    1cf0:	20000694 	.word	0x20000694
    1cf4:	00003e51 	.word	0x00003e51
    1cf8:	00003fe9 	.word	0x00003fe9

00001cfc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1cfc:	b590      	push	{r4, r7, lr}
    1cfe:	b083      	sub	sp, #12
    1d00:	af00      	add	r7, sp, #0
    1d02:	4603      	mov	r3, r0
    1d04:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1d06:	4b07      	ldr	r3, [pc, #28]	; (1d24 <delay_ms+0x28>)
    1d08:	681c      	ldr	r4, [r3, #0]
    1d0a:	88fb      	ldrh	r3, [r7, #6]
    1d0c:	4618      	mov	r0, r3
    1d0e:	4b06      	ldr	r3, [pc, #24]	; (1d28 <delay_ms+0x2c>)
    1d10:	4798      	blx	r3
    1d12:	4603      	mov	r3, r0
    1d14:	4619      	mov	r1, r3
    1d16:	4620      	mov	r0, r4
    1d18:	4b04      	ldr	r3, [pc, #16]	; (1d2c <delay_ms+0x30>)
    1d1a:	4798      	blx	r3
}
    1d1c:	bf00      	nop
    1d1e:	370c      	adds	r7, #12
    1d20:	46bd      	mov	sp, r7
    1d22:	bd90      	pop	{r4, r7, pc}
    1d24:	20000694 	.word	0x20000694
    1d28:	00003fbd 	.word	0x00003fbd
    1d2c:	00003fe9 	.word	0x00003fe9

00001d30 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1d30:	b580      	push	{r7, lr}
    1d32:	af00      	add	r7, sp, #0
	return _event_system_init();
    1d34:	4b02      	ldr	r3, [pc, #8]	; (1d40 <event_system_init+0x10>)
    1d36:	4798      	blx	r3
    1d38:	4603      	mov	r3, r0
}
    1d3a:	4618      	mov	r0, r3
    1d3c:	bd80      	pop	{r7, pc}
    1d3e:	bf00      	nop
    1d40:	0000489d 	.word	0x0000489d

00001d44 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b082      	sub	sp, #8
    1d48:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d4a:	2300      	movs	r3, #0
    1d4c:	80fb      	strh	r3, [r7, #6]
    1d4e:	e00e      	b.n	1d6e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1d50:	88fb      	ldrh	r3, [r7, #6]
    1d52:	4a0c      	ldr	r2, [pc, #48]	; (1d84 <ext_irq_init+0x40>)
    1d54:	00db      	lsls	r3, r3, #3
    1d56:	4413      	add	r3, r2
    1d58:	f04f 32ff 	mov.w	r2, #4294967295
    1d5c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1d5e:	88fb      	ldrh	r3, [r7, #6]
    1d60:	4a08      	ldr	r2, [pc, #32]	; (1d84 <ext_irq_init+0x40>)
    1d62:	2100      	movs	r1, #0
    1d64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d68:	88fb      	ldrh	r3, [r7, #6]
    1d6a:	3301      	adds	r3, #1
    1d6c:	80fb      	strh	r3, [r7, #6]
    1d6e:	88fb      	ldrh	r3, [r7, #6]
    1d70:	2b07      	cmp	r3, #7
    1d72:	d9ed      	bls.n	1d50 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1d74:	4804      	ldr	r0, [pc, #16]	; (1d88 <ext_irq_init+0x44>)
    1d76:	4b05      	ldr	r3, [pc, #20]	; (1d8c <ext_irq_init+0x48>)
    1d78:	4798      	blx	r3
    1d7a:	4603      	mov	r3, r0
}
    1d7c:	4618      	mov	r0, r3
    1d7e:	3708      	adds	r7, #8
    1d80:	46bd      	mov	sp, r7
    1d82:	bd80      	pop	{r7, pc}
    1d84:	20000698 	.word	0x20000698
    1d88:	00001ee9 	.word	0x00001ee9
    1d8c:	00004441 	.word	0x00004441

00001d90 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b086      	sub	sp, #24
    1d94:	af00      	add	r7, sp, #0
    1d96:	6078      	str	r0, [r7, #4]
    1d98:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    1d9a:	2300      	movs	r3, #0
    1d9c:	75fb      	strb	r3, [r7, #23]
    1d9e:	2300      	movs	r3, #0
    1da0:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    1da2:	2300      	movs	r3, #0
    1da4:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    1da6:	e012      	b.n	1dce <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    1da8:	7dfb      	ldrb	r3, [r7, #23]
    1daa:	4a4d      	ldr	r2, [pc, #308]	; (1ee0 <ext_irq_register+0x150>)
    1dac:	00db      	lsls	r3, r3, #3
    1dae:	4413      	add	r3, r2
    1db0:	685a      	ldr	r2, [r3, #4]
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	429a      	cmp	r2, r3
    1db6:	d107      	bne.n	1dc8 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    1db8:	7dfb      	ldrb	r3, [r7, #23]
    1dba:	4949      	ldr	r1, [pc, #292]	; (1ee0 <ext_irq_register+0x150>)
    1dbc:	683a      	ldr	r2, [r7, #0]
    1dbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    1dc2:	2301      	movs	r3, #1
    1dc4:	757b      	strb	r3, [r7, #21]
			break;
    1dc6:	e005      	b.n	1dd4 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1dc8:	7dfb      	ldrb	r3, [r7, #23]
    1dca:	3301      	adds	r3, #1
    1dcc:	75fb      	strb	r3, [r7, #23]
    1dce:	7dfb      	ldrb	r3, [r7, #23]
    1dd0:	2b07      	cmp	r3, #7
    1dd2:	d9e9      	bls.n	1da8 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    1dd4:	683b      	ldr	r3, [r7, #0]
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	d10e      	bne.n	1df8 <ext_irq_register+0x68>
		if (!found) {
    1dda:	7d7b      	ldrb	r3, [r7, #21]
    1ddc:	f083 0301 	eor.w	r3, r3, #1
    1de0:	b2db      	uxtb	r3, r3
    1de2:	2b00      	cmp	r3, #0
    1de4:	d002      	beq.n	1dec <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    1de6:	f06f 030c 	mvn.w	r3, #12
    1dea:	e074      	b.n	1ed6 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    1dec:	2100      	movs	r1, #0
    1dee:	6878      	ldr	r0, [r7, #4]
    1df0:	4b3c      	ldr	r3, [pc, #240]	; (1ee4 <ext_irq_register+0x154>)
    1df2:	4798      	blx	r3
    1df4:	4603      	mov	r3, r0
    1df6:	e06e      	b.n	1ed6 <ext_irq_register+0x146>
	}

	if (!found) {
    1df8:	7d7b      	ldrb	r3, [r7, #21]
    1dfa:	f083 0301 	eor.w	r3, r3, #1
    1dfe:	b2db      	uxtb	r3, r3
    1e00:	2b00      	cmp	r3, #0
    1e02:	d05a      	beq.n	1eba <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1e04:	2300      	movs	r3, #0
    1e06:	75fb      	strb	r3, [r7, #23]
    1e08:	e016      	b.n	1e38 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    1e0a:	7dfb      	ldrb	r3, [r7, #23]
    1e0c:	4a34      	ldr	r2, [pc, #208]	; (1ee0 <ext_irq_register+0x150>)
    1e0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1e12:	2b00      	cmp	r3, #0
    1e14:	d10d      	bne.n	1e32 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    1e16:	7dfb      	ldrb	r3, [r7, #23]
    1e18:	4931      	ldr	r1, [pc, #196]	; (1ee0 <ext_irq_register+0x150>)
    1e1a:	683a      	ldr	r2, [r7, #0]
    1e1c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    1e20:	7dfb      	ldrb	r3, [r7, #23]
    1e22:	4a2f      	ldr	r2, [pc, #188]	; (1ee0 <ext_irq_register+0x150>)
    1e24:	00db      	lsls	r3, r3, #3
    1e26:	4413      	add	r3, r2
    1e28:	687a      	ldr	r2, [r7, #4]
    1e2a:	605a      	str	r2, [r3, #4]
				found           = true;
    1e2c:	2301      	movs	r3, #1
    1e2e:	757b      	strb	r3, [r7, #21]
				break;
    1e30:	e005      	b.n	1e3e <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1e32:	7dfb      	ldrb	r3, [r7, #23]
    1e34:	3301      	adds	r3, #1
    1e36:	75fb      	strb	r3, [r7, #23]
    1e38:	7dfb      	ldrb	r3, [r7, #23]
    1e3a:	2b07      	cmp	r3, #7
    1e3c:	d9e5      	bls.n	1e0a <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1e3e:	e036      	b.n	1eae <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1e40:	7dfb      	ldrb	r3, [r7, #23]
    1e42:	4a27      	ldr	r2, [pc, #156]	; (1ee0 <ext_irq_register+0x150>)
    1e44:	00db      	lsls	r3, r3, #3
    1e46:	4413      	add	r3, r2
    1e48:	685a      	ldr	r2, [r3, #4]
    1e4a:	7dbb      	ldrb	r3, [r7, #22]
    1e4c:	4924      	ldr	r1, [pc, #144]	; (1ee0 <ext_irq_register+0x150>)
    1e4e:	00db      	lsls	r3, r3, #3
    1e50:	440b      	add	r3, r1
    1e52:	685b      	ldr	r3, [r3, #4]
    1e54:	429a      	cmp	r2, r3
    1e56:	d227      	bcs.n	1ea8 <ext_irq_register+0x118>
    1e58:	7dbb      	ldrb	r3, [r7, #22]
    1e5a:	4a21      	ldr	r2, [pc, #132]	; (1ee0 <ext_irq_register+0x150>)
    1e5c:	00db      	lsls	r3, r3, #3
    1e5e:	4413      	add	r3, r2
    1e60:	685b      	ldr	r3, [r3, #4]
    1e62:	f1b3 3fff 	cmp.w	r3, #4294967295
    1e66:	d01f      	beq.n	1ea8 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    1e68:	7dbb      	ldrb	r3, [r7, #22]
    1e6a:	491d      	ldr	r1, [pc, #116]	; (1ee0 <ext_irq_register+0x150>)
    1e6c:	f107 020c 	add.w	r2, r7, #12
    1e70:	00db      	lsls	r3, r3, #3
    1e72:	440b      	add	r3, r1
    1e74:	e893 0003 	ldmia.w	r3, {r0, r1}
    1e78:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    1e7c:	7dbb      	ldrb	r3, [r7, #22]
    1e7e:	7dfa      	ldrb	r2, [r7, #23]
    1e80:	4817      	ldr	r0, [pc, #92]	; (1ee0 <ext_irq_register+0x150>)
    1e82:	4917      	ldr	r1, [pc, #92]	; (1ee0 <ext_irq_register+0x150>)
    1e84:	00db      	lsls	r3, r3, #3
    1e86:	4403      	add	r3, r0
    1e88:	00d2      	lsls	r2, r2, #3
    1e8a:	440a      	add	r2, r1
    1e8c:	e892 0003 	ldmia.w	r2, {r0, r1}
    1e90:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    1e94:	7dfb      	ldrb	r3, [r7, #23]
    1e96:	4a12      	ldr	r2, [pc, #72]	; (1ee0 <ext_irq_register+0x150>)
    1e98:	00db      	lsls	r3, r3, #3
    1e9a:	4413      	add	r3, r2
    1e9c:	f107 020c 	add.w	r2, r7, #12
    1ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
    1ea4:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1ea8:	7dbb      	ldrb	r3, [r7, #22]
    1eaa:	3301      	adds	r3, #1
    1eac:	75bb      	strb	r3, [r7, #22]
    1eae:	7dbb      	ldrb	r3, [r7, #22]
    1eb0:	2b07      	cmp	r3, #7
    1eb2:	d802      	bhi.n	1eba <ext_irq_register+0x12a>
    1eb4:	7dfb      	ldrb	r3, [r7, #23]
    1eb6:	2b07      	cmp	r3, #7
    1eb8:	d9c2      	bls.n	1e40 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    1eba:	7d7b      	ldrb	r3, [r7, #21]
    1ebc:	f083 0301 	eor.w	r3, r3, #1
    1ec0:	b2db      	uxtb	r3, r3
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	d002      	beq.n	1ecc <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    1ec6:	f06f 030c 	mvn.w	r3, #12
    1eca:	e004      	b.n	1ed6 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    1ecc:	2101      	movs	r1, #1
    1ece:	6878      	ldr	r0, [r7, #4]
    1ed0:	4b04      	ldr	r3, [pc, #16]	; (1ee4 <ext_irq_register+0x154>)
    1ed2:	4798      	blx	r3
    1ed4:	4603      	mov	r3, r0
}
    1ed6:	4618      	mov	r0, r3
    1ed8:	3718      	adds	r7, #24
    1eda:	46bd      	mov	sp, r7
    1edc:	bd80      	pop	{r7, pc}
    1ede:	bf00      	nop
    1ee0:	20000698 	.word	0x20000698
    1ee4:	000045c5 	.word	0x000045c5

00001ee8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1ee8:	b580      	push	{r7, lr}
    1eea:	b084      	sub	sp, #16
    1eec:	af00      	add	r7, sp, #0
    1eee:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1ef0:	2300      	movs	r3, #0
    1ef2:	73fb      	strb	r3, [r7, #15]
    1ef4:	2308      	movs	r3, #8
    1ef6:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1ef8:	e02a      	b.n	1f50 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1efa:	7bba      	ldrb	r2, [r7, #14]
    1efc:	7bfb      	ldrb	r3, [r7, #15]
    1efe:	4413      	add	r3, r2
    1f00:	105b      	asrs	r3, r3, #1
    1f02:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1f04:	7b7b      	ldrb	r3, [r7, #13]
    1f06:	2b07      	cmp	r3, #7
    1f08:	d827      	bhi.n	1f5a <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1f0a:	7b7b      	ldrb	r3, [r7, #13]
    1f0c:	4a16      	ldr	r2, [pc, #88]	; (1f68 <process_ext_irq+0x80>)
    1f0e:	00db      	lsls	r3, r3, #3
    1f10:	4413      	add	r3, r2
    1f12:	685a      	ldr	r2, [r3, #4]
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	429a      	cmp	r2, r3
    1f18:	d10b      	bne.n	1f32 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1f1a:	7b7b      	ldrb	r3, [r7, #13]
    1f1c:	4a12      	ldr	r2, [pc, #72]	; (1f68 <process_ext_irq+0x80>)
    1f1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f22:	2b00      	cmp	r3, #0
    1f24:	d01b      	beq.n	1f5e <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1f26:	7b7b      	ldrb	r3, [r7, #13]
    1f28:	4a0f      	ldr	r2, [pc, #60]	; (1f68 <process_ext_irq+0x80>)
    1f2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f2e:	4798      	blx	r3
			}
			return;
    1f30:	e015      	b.n	1f5e <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1f32:	7b7b      	ldrb	r3, [r7, #13]
    1f34:	4a0c      	ldr	r2, [pc, #48]	; (1f68 <process_ext_irq+0x80>)
    1f36:	00db      	lsls	r3, r3, #3
    1f38:	4413      	add	r3, r2
    1f3a:	685a      	ldr	r2, [r3, #4]
    1f3c:	687b      	ldr	r3, [r7, #4]
    1f3e:	429a      	cmp	r2, r3
    1f40:	d203      	bcs.n	1f4a <process_ext_irq+0x62>
			lower = middle + 1;
    1f42:	7b7b      	ldrb	r3, [r7, #13]
    1f44:	3301      	adds	r3, #1
    1f46:	73fb      	strb	r3, [r7, #15]
    1f48:	e002      	b.n	1f50 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1f4a:	7b7b      	ldrb	r3, [r7, #13]
    1f4c:	3b01      	subs	r3, #1
    1f4e:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1f50:	7bba      	ldrb	r2, [r7, #14]
    1f52:	7bfb      	ldrb	r3, [r7, #15]
    1f54:	429a      	cmp	r2, r3
    1f56:	d2d0      	bcs.n	1efa <process_ext_irq+0x12>
    1f58:	e002      	b.n	1f60 <process_ext_irq+0x78>
			return;
    1f5a:	bf00      	nop
    1f5c:	e000      	b.n	1f60 <process_ext_irq+0x78>
			return;
    1f5e:	bf00      	nop
		}
	}
}
    1f60:	3710      	adds	r7, #16
    1f62:	46bd      	mov	sp, r7
    1f64:	bd80      	pop	{r7, pc}
    1f66:	bf00      	nop
    1f68:	20000698 	.word	0x20000698

00001f6c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1f6c:	b580      	push	{r7, lr}
    1f6e:	b084      	sub	sp, #16
    1f70:	af00      	add	r7, sp, #0
    1f72:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1f74:	687b      	ldr	r3, [r7, #4]
    1f76:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	885b      	ldrh	r3, [r3, #2]
    1f7c:	b29b      	uxth	r3, r3
    1f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1f82:	2b00      	cmp	r3, #0
    1f84:	d107      	bne.n	1f96 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    1f86:	68fb      	ldr	r3, [r7, #12]
    1f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d003      	beq.n	1f96 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    1f8e:	68fb      	ldr	r3, [r7, #12]
    1f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f92:	68f8      	ldr	r0, [r7, #12]
    1f94:	4798      	blx	r3
		}
	}
}
    1f96:	bf00      	nop
    1f98:	3710      	adds	r7, #16
    1f9a:	46bd      	mov	sp, r7
    1f9c:	bd80      	pop	{r7, pc}

00001f9e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1f9e:	b580      	push	{r7, lr}
    1fa0:	b084      	sub	sp, #16
    1fa2:	af00      	add	r7, sp, #0
    1fa4:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1faa:	687b      	ldr	r3, [r7, #4]
    1fac:	885b      	ldrh	r3, [r3, #2]
    1fae:	b29b      	uxth	r3, r3
    1fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d107      	bne.n	1fc8 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    1fb8:	68fb      	ldr	r3, [r7, #12]
    1fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d003      	beq.n	1fc8 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    1fc0:	68fb      	ldr	r3, [r7, #12]
    1fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1fc4:	68f8      	ldr	r0, [r7, #12]
    1fc6:	4798      	blx	r3
		}
	}
}
    1fc8:	bf00      	nop
    1fca:	3710      	adds	r7, #16
    1fcc:	46bd      	mov	sp, r7
    1fce:	bd80      	pop	{r7, pc}

00001fd0 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	b084      	sub	sp, #16
    1fd4:	af00      	add	r7, sp, #0
    1fd6:	6078      	str	r0, [r7, #4]
    1fd8:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1fda:	687b      	ldr	r3, [r7, #4]
    1fdc:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1fde:	687b      	ldr	r3, [r7, #4]
    1fe0:	885b      	ldrh	r3, [r3, #2]
    1fe2:	b29b      	uxth	r3, r3
    1fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1fe8:	2b00      	cmp	r3, #0
    1fea:	d108      	bne.n	1ffe <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    1fec:	68fb      	ldr	r3, [r7, #12]
    1fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	d004      	beq.n	1ffe <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    1ff4:	68fb      	ldr	r3, [r7, #12]
    1ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1ff8:	6839      	ldr	r1, [r7, #0]
    1ffa:	68f8      	ldr	r0, [r7, #12]
    1ffc:	4798      	blx	r3
		}
	}
}
    1ffe:	bf00      	nop
    2000:	3710      	adds	r7, #16
    2002:	46bd      	mov	sp, r7
    2004:	bd80      	pop	{r7, pc}
	...

00002008 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    2008:	b580      	push	{r7, lr}
    200a:	b08a      	sub	sp, #40	; 0x28
    200c:	af00      	add	r7, sp, #0
    200e:	60f8      	str	r0, [r7, #12]
    2010:	60b9      	str	r1, [r7, #8]
    2012:	4613      	mov	r3, r2
    2014:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2016:	68fb      	ldr	r3, [r7, #12]
    2018:	3b28      	subs	r3, #40	; 0x28
    201a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    201e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2020:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2022:	88fb      	ldrh	r3, [r7, #6]
    2024:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2026:	f248 0301 	movw	r3, #32769	; 0x8001
    202a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    202c:	68bb      	ldr	r3, [r7, #8]
    202e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2032:	f107 0214 	add.w	r2, r7, #20
    2036:	4611      	mov	r1, r2
    2038:	4618      	mov	r0, r3
    203a:	4b06      	ldr	r3, [pc, #24]	; (2054 <i2c_m_async_read+0x4c>)
    203c:	4798      	blx	r3
    203e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2040:	6a3b      	ldr	r3, [r7, #32]
    2042:	2b00      	cmp	r3, #0
    2044:	d001      	beq.n	204a <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    2046:	6a3b      	ldr	r3, [r7, #32]
    2048:	e000      	b.n	204c <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    204a:	88fb      	ldrh	r3, [r7, #6]
}
    204c:	4618      	mov	r0, r3
    204e:	3728      	adds	r7, #40	; 0x28
    2050:	46bd      	mov	sp, r7
    2052:	bd80      	pop	{r7, pc}
    2054:	00006661 	.word	0x00006661

00002058 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    2058:	b580      	push	{r7, lr}
    205a:	b08a      	sub	sp, #40	; 0x28
    205c:	af00      	add	r7, sp, #0
    205e:	60f8      	str	r0, [r7, #12]
    2060:	60b9      	str	r1, [r7, #8]
    2062:	4613      	mov	r3, r2
    2064:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2066:	68fb      	ldr	r3, [r7, #12]
    2068:	3b28      	subs	r3, #40	; 0x28
    206a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    206e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2070:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2072:	88fb      	ldrh	r3, [r7, #6]
    2074:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    207a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    207c:	68bb      	ldr	r3, [r7, #8]
    207e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2082:	f107 0214 	add.w	r2, r7, #20
    2086:	4611      	mov	r1, r2
    2088:	4618      	mov	r0, r3
    208a:	4b06      	ldr	r3, [pc, #24]	; (20a4 <i2c_m_async_write+0x4c>)
    208c:	4798      	blx	r3
    208e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2090:	6a3b      	ldr	r3, [r7, #32]
    2092:	2b00      	cmp	r3, #0
    2094:	d001      	beq.n	209a <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    2096:	6a3b      	ldr	r3, [r7, #32]
    2098:	e000      	b.n	209c <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    209a:	88fb      	ldrh	r3, [r7, #6]
}
    209c:	4618      	mov	r0, r3
    209e:	3728      	adds	r7, #40	; 0x28
    20a0:	46bd      	mov	sp, r7
    20a2:	bd80      	pop	{r7, pc}
    20a4:	00006661 	.word	0x00006661

000020a8 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    20a8:	b580      	push	{r7, lr}
    20aa:	b084      	sub	sp, #16
    20ac:	af00      	add	r7, sp, #0
    20ae:	6078      	str	r0, [r7, #4]
    20b0:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    20b2:	687b      	ldr	r3, [r7, #4]
    20b4:	2b00      	cmp	r3, #0
    20b6:	bf14      	ite	ne
    20b8:	2301      	movne	r3, #1
    20ba:	2300      	moveq	r3, #0
    20bc:	b2db      	uxtb	r3, r3
    20be:	2289      	movs	r2, #137	; 0x89
    20c0:	4915      	ldr	r1, [pc, #84]	; (2118 <i2c_m_async_init+0x70>)
    20c2:	4618      	mov	r0, r3
    20c4:	4b15      	ldr	r3, [pc, #84]	; (211c <i2c_m_async_init+0x74>)
    20c6:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    20c8:	687b      	ldr	r3, [r7, #4]
    20ca:	6839      	ldr	r1, [r7, #0]
    20cc:	4618      	mov	r0, r3
    20ce:	4b14      	ldr	r3, [pc, #80]	; (2120 <i2c_m_async_init+0x78>)
    20d0:	4798      	blx	r3
    20d2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	2b00      	cmp	r3, #0
    20d8:	d001      	beq.n	20de <i2c_m_async_init+0x36>
		return init_status;
    20da:	68fb      	ldr	r3, [r7, #12]
    20dc:	e018      	b.n	2110 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    20de:	687b      	ldr	r3, [r7, #4]
    20e0:	4a10      	ldr	r2, [pc, #64]	; (2124 <i2c_m_async_init+0x7c>)
    20e2:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	4a10      	ldr	r2, [pc, #64]	; (2128 <i2c_m_async_init+0x80>)
    20e8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    20ea:	687b      	ldr	r3, [r7, #4]
    20ec:	4a0f      	ldr	r2, [pc, #60]	; (212c <i2c_m_async_init+0x84>)
    20ee:	2101      	movs	r1, #1
    20f0:	4618      	mov	r0, r3
    20f2:	4b0f      	ldr	r3, [pc, #60]	; (2130 <i2c_m_async_init+0x88>)
    20f4:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    20f6:	687b      	ldr	r3, [r7, #4]
    20f8:	4a0e      	ldr	r2, [pc, #56]	; (2134 <i2c_m_async_init+0x8c>)
    20fa:	2102      	movs	r1, #2
    20fc:	4618      	mov	r0, r3
    20fe:	4b0c      	ldr	r3, [pc, #48]	; (2130 <i2c_m_async_init+0x88>)
    2100:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	4a0c      	ldr	r2, [pc, #48]	; (2138 <i2c_m_async_init+0x90>)
    2106:	2100      	movs	r1, #0
    2108:	4618      	mov	r0, r3
    210a:	4b09      	ldr	r3, [pc, #36]	; (2130 <i2c_m_async_init+0x88>)
    210c:	4798      	blx	r3

	return ERR_NONE;
    210e:	2300      	movs	r3, #0
}
    2110:	4618      	mov	r0, r3
    2112:	3710      	adds	r7, #16
    2114:	46bd      	mov	sp, r7
    2116:	bd80      	pop	{r7, pc}
    2118:	0000ed74 	.word	0x0000ed74
    211c:	0000349d 	.word	0x0000349d
    2120:	000064b1 	.word	0x000064b1
    2124:	00002009 	.word	0x00002009
    2128:	00002059 	.word	0x00002059
    212c:	00001f6d 	.word	0x00001f6d
    2130:	00006735 	.word	0x00006735
    2134:	00001f9f 	.word	0x00001f9f
    2138:	00001fd1 	.word	0x00001fd1

0000213c <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    213c:	b580      	push	{r7, lr}
    213e:	b08a      	sub	sp, #40	; 0x28
    2140:	af00      	add	r7, sp, #0
    2142:	60f8      	str	r0, [r7, #12]
    2144:	60b9      	str	r1, [r7, #8]
    2146:	4613      	mov	r3, r2
    2148:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    214a:	68fb      	ldr	r3, [r7, #12]
    214c:	3b14      	subs	r3, #20
    214e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2152:	8b9b      	ldrh	r3, [r3, #28]
    2154:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2156:	88fb      	ldrh	r3, [r7, #6]
    2158:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    215a:	f248 0301 	movw	r3, #32769	; 0x8001
    215e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2160:	68bb      	ldr	r3, [r7, #8]
    2162:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2166:	f107 0214 	add.w	r2, r7, #20
    216a:	4611      	mov	r1, r2
    216c:	4618      	mov	r0, r3
    216e:	4b06      	ldr	r3, [pc, #24]	; (2188 <i2c_m_sync_read+0x4c>)
    2170:	4798      	blx	r3
    2172:	6238      	str	r0, [r7, #32]

	if (ret) {
    2174:	6a3b      	ldr	r3, [r7, #32]
    2176:	2b00      	cmp	r3, #0
    2178:	d001      	beq.n	217e <i2c_m_sync_read+0x42>
		return ret;
    217a:	6a3b      	ldr	r3, [r7, #32]
    217c:	e000      	b.n	2180 <i2c_m_sync_read+0x44>
	}

	return n;
    217e:	88fb      	ldrh	r3, [r7, #6]
}
    2180:	4618      	mov	r0, r3
    2182:	3728      	adds	r7, #40	; 0x28
    2184:	46bd      	mov	sp, r7
    2186:	bd80      	pop	{r7, pc}
    2188:	0000697d 	.word	0x0000697d

0000218c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    218c:	b580      	push	{r7, lr}
    218e:	b08a      	sub	sp, #40	; 0x28
    2190:	af00      	add	r7, sp, #0
    2192:	60f8      	str	r0, [r7, #12]
    2194:	60b9      	str	r1, [r7, #8]
    2196:	4613      	mov	r3, r2
    2198:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    219a:	68fb      	ldr	r3, [r7, #12]
    219c:	3b14      	subs	r3, #20
    219e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    21a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21a2:	8b9b      	ldrh	r3, [r3, #28]
    21a4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    21a6:	88fb      	ldrh	r3, [r7, #6]
    21a8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    21aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    21ae:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    21b0:	68bb      	ldr	r3, [r7, #8]
    21b2:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    21b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21b6:	f107 0214 	add.w	r2, r7, #20
    21ba:	4611      	mov	r1, r2
    21bc:	4618      	mov	r0, r3
    21be:	4b06      	ldr	r3, [pc, #24]	; (21d8 <i2c_m_sync_write+0x4c>)
    21c0:	4798      	blx	r3
    21c2:	6238      	str	r0, [r7, #32]

	if (ret) {
    21c4:	6a3b      	ldr	r3, [r7, #32]
    21c6:	2b00      	cmp	r3, #0
    21c8:	d001      	beq.n	21ce <i2c_m_sync_write+0x42>
		return ret;
    21ca:	6a3b      	ldr	r3, [r7, #32]
    21cc:	e000      	b.n	21d0 <i2c_m_sync_write+0x44>
	}

	return n;
    21ce:	88fb      	ldrh	r3, [r7, #6]
}
    21d0:	4618      	mov	r0, r3
    21d2:	3728      	adds	r7, #40	; 0x28
    21d4:	46bd      	mov	sp, r7
    21d6:	bd80      	pop	{r7, pc}
    21d8:	0000697d 	.word	0x0000697d

000021dc <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    21dc:	b580      	push	{r7, lr}
    21de:	b084      	sub	sp, #16
    21e0:	af00      	add	r7, sp, #0
    21e2:	6078      	str	r0, [r7, #4]
    21e4:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    21e6:	687b      	ldr	r3, [r7, #4]
    21e8:	2b00      	cmp	r3, #0
    21ea:	bf14      	ite	ne
    21ec:	2301      	movne	r3, #1
    21ee:	2300      	moveq	r3, #0
    21f0:	b2db      	uxtb	r3, r3
    21f2:	225e      	movs	r2, #94	; 0x5e
    21f4:	490c      	ldr	r1, [pc, #48]	; (2228 <i2c_m_sync_init+0x4c>)
    21f6:	4618      	mov	r0, r3
    21f8:	4b0c      	ldr	r3, [pc, #48]	; (222c <i2c_m_sync_init+0x50>)
    21fa:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    21fc:	687b      	ldr	r3, [r7, #4]
    21fe:	6839      	ldr	r1, [r7, #0]
    2200:	4618      	mov	r0, r3
    2202:	4b0b      	ldr	r3, [pc, #44]	; (2230 <i2c_m_sync_init+0x54>)
    2204:	4798      	blx	r3
    2206:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2208:	68fb      	ldr	r3, [r7, #12]
    220a:	2b00      	cmp	r3, #0
    220c:	d001      	beq.n	2212 <i2c_m_sync_init+0x36>
		return init_status;
    220e:	68fb      	ldr	r3, [r7, #12]
    2210:	e006      	b.n	2220 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2212:	687b      	ldr	r3, [r7, #4]
    2214:	4a07      	ldr	r2, [pc, #28]	; (2234 <i2c_m_sync_init+0x58>)
    2216:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2218:	687b      	ldr	r3, [r7, #4]
    221a:	4a07      	ldr	r2, [pc, #28]	; (2238 <i2c_m_sync_init+0x5c>)
    221c:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    221e:	2300      	movs	r3, #0
}
    2220:	4618      	mov	r0, r3
    2222:	3710      	adds	r7, #16
    2224:	46bd      	mov	sp, r7
    2226:	bd80      	pop	{r7, pc}
    2228:	0000ed94 	.word	0x0000ed94
    222c:	0000349d 	.word	0x0000349d
    2230:	00006779 	.word	0x00006779
    2234:	0000213d 	.word	0x0000213d
    2238:	0000218d 	.word	0x0000218d

0000223c <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    223c:	b580      	push	{r7, lr}
    223e:	b082      	sub	sp, #8
    2240:	af00      	add	r7, sp, #0
    2242:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2244:	687b      	ldr	r3, [r7, #4]
    2246:	4618      	mov	r0, r3
    2248:	4b03      	ldr	r3, [pc, #12]	; (2258 <i2c_m_sync_enable+0x1c>)
    224a:	4798      	blx	r3
    224c:	4603      	mov	r3, r0
}
    224e:	4618      	mov	r0, r3
    2250:	3708      	adds	r7, #8
    2252:	46bd      	mov	sp, r7
    2254:	bd80      	pop	{r7, pc}
    2256:	bf00      	nop
    2258:	000067c1 	.word	0x000067c1

0000225c <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    225c:	b480      	push	{r7}
    225e:	b085      	sub	sp, #20
    2260:	af00      	add	r7, sp, #0
    2262:	60f8      	str	r0, [r7, #12]
    2264:	460b      	mov	r3, r1
    2266:	607a      	str	r2, [r7, #4]
    2268:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    226a:	897b      	ldrh	r3, [r7, #10]
    226c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2270:	b21a      	sxth	r2, r3
    2272:	687b      	ldr	r3, [r7, #4]
    2274:	b21b      	sxth	r3, r3
    2276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    227a:	b21b      	sxth	r3, r3
    227c:	4313      	orrs	r3, r2
    227e:	b21b      	sxth	r3, r3
    2280:	b29a      	uxth	r2, r3
    2282:	68fb      	ldr	r3, [r7, #12]
    2284:	839a      	strh	r2, [r3, #28]
    2286:	68fb      	ldr	r3, [r7, #12]
    2288:	8b9b      	ldrh	r3, [r3, #28]
}
    228a:	4618      	mov	r0, r3
    228c:	3714      	adds	r7, #20
    228e:	46bd      	mov	sp, r7
    2290:	f85d 7b04 	ldr.w	r7, [sp], #4
    2294:	4770      	bx	lr

00002296 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2296:	b480      	push	{r7}
    2298:	b083      	sub	sp, #12
    229a:	af00      	add	r7, sp, #0
    229c:	6078      	str	r0, [r7, #4]
    229e:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	f103 0214 	add.w	r2, r3, #20
    22a6:	683b      	ldr	r3, [r7, #0]
    22a8:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    22aa:	2300      	movs	r3, #0
}
    22ac:	4618      	mov	r0, r3
    22ae:	370c      	adds	r7, #12
    22b0:	46bd      	mov	sp, r7
    22b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    22b6:	4770      	bx	lr

000022b8 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    22b8:	b580      	push	{r7, lr}
    22ba:	b084      	sub	sp, #16
    22bc:	af00      	add	r7, sp, #0
    22be:	60f8      	str	r0, [r7, #12]
    22c0:	60b9      	str	r1, [r7, #8]
    22c2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    22c4:	68fb      	ldr	r3, [r7, #12]
    22c6:	2b00      	cmp	r3, #0
    22c8:	d004      	beq.n	22d4 <pwm_init+0x1c>
    22ca:	68bb      	ldr	r3, [r7, #8]
    22cc:	2b00      	cmp	r3, #0
    22ce:	d001      	beq.n	22d4 <pwm_init+0x1c>
    22d0:	2301      	movs	r3, #1
    22d2:	e000      	b.n	22d6 <pwm_init+0x1e>
    22d4:	2300      	movs	r3, #0
    22d6:	f003 0301 	and.w	r3, r3, #1
    22da:	b2db      	uxtb	r3, r3
    22dc:	2233      	movs	r2, #51	; 0x33
    22de:	490a      	ldr	r1, [pc, #40]	; (2308 <pwm_init+0x50>)
    22e0:	4618      	mov	r0, r3
    22e2:	4b0a      	ldr	r3, [pc, #40]	; (230c <pwm_init+0x54>)
    22e4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    22e6:	68fb      	ldr	r3, [r7, #12]
    22e8:	68b9      	ldr	r1, [r7, #8]
    22ea:	4618      	mov	r0, r3
    22ec:	4b08      	ldr	r3, [pc, #32]	; (2310 <pwm_init+0x58>)
    22ee:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    22f0:	68fb      	ldr	r3, [r7, #12]
    22f2:	4a08      	ldr	r2, [pc, #32]	; (2314 <pwm_init+0x5c>)
    22f4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    22f6:	68fb      	ldr	r3, [r7, #12]
    22f8:	4a07      	ldr	r2, [pc, #28]	; (2318 <pwm_init+0x60>)
    22fa:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    22fc:	2300      	movs	r3, #0
}
    22fe:	4618      	mov	r0, r3
    2300:	3710      	adds	r7, #16
    2302:	46bd      	mov	sp, r7
    2304:	bd80      	pop	{r7, pc}
    2306:	bf00      	nop
    2308:	0000edb0 	.word	0x0000edb0
    230c:	0000349d 	.word	0x0000349d
    2310:	00007f7d 	.word	0x00007f7d
    2314:	00002371 	.word	0x00002371
    2318:	00002395 	.word	0x00002395

0000231c <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    231c:	b580      	push	{r7, lr}
    231e:	b082      	sub	sp, #8
    2320:	af00      	add	r7, sp, #0
    2322:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2324:	687b      	ldr	r3, [r7, #4]
    2326:	2b00      	cmp	r3, #0
    2328:	bf14      	ite	ne
    232a:	2301      	movne	r3, #1
    232c:	2300      	moveq	r3, #0
    232e:	b2db      	uxtb	r3, r3
    2330:	224a      	movs	r2, #74	; 0x4a
    2332:	490b      	ldr	r1, [pc, #44]	; (2360 <pwm_enable+0x44>)
    2334:	4618      	mov	r0, r3
    2336:	4b0b      	ldr	r3, [pc, #44]	; (2364 <pwm_enable+0x48>)
    2338:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	4618      	mov	r0, r3
    233e:	4b0a      	ldr	r3, [pc, #40]	; (2368 <pwm_enable+0x4c>)
    2340:	4798      	blx	r3
    2342:	4603      	mov	r3, r0
    2344:	2b00      	cmp	r3, #0
    2346:	d002      	beq.n	234e <pwm_enable+0x32>
		return ERR_DENIED;
    2348:	f06f 0310 	mvn.w	r3, #16
    234c:	e004      	b.n	2358 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    234e:	687b      	ldr	r3, [r7, #4]
    2350:	4618      	mov	r0, r3
    2352:	4b06      	ldr	r3, [pc, #24]	; (236c <pwm_enable+0x50>)
    2354:	4798      	blx	r3

	return ERR_NONE;
    2356:	2300      	movs	r3, #0
}
    2358:	4618      	mov	r0, r3
    235a:	3708      	adds	r7, #8
    235c:	46bd      	mov	sp, r7
    235e:	bd80      	pop	{r7, pc}
    2360:	0000edb0 	.word	0x0000edb0
    2364:	0000349d 	.word	0x0000349d
    2368:	0000836d 	.word	0x0000836d
    236c:	00008229 	.word	0x00008229

00002370 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2370:	b580      	push	{r7, lr}
    2372:	b084      	sub	sp, #16
    2374:	af00      	add	r7, sp, #0
    2376:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    237c:	68fb      	ldr	r3, [r7, #12]
    237e:	695b      	ldr	r3, [r3, #20]
    2380:	2b00      	cmp	r3, #0
    2382:	d003      	beq.n	238c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2384:	68fb      	ldr	r3, [r7, #12]
    2386:	695b      	ldr	r3, [r3, #20]
    2388:	68f8      	ldr	r0, [r7, #12]
    238a:	4798      	blx	r3
	}
}
    238c:	bf00      	nop
    238e:	3710      	adds	r7, #16
    2390:	46bd      	mov	sp, r7
    2392:	bd80      	pop	{r7, pc}

00002394 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2394:	b580      	push	{r7, lr}
    2396:	b084      	sub	sp, #16
    2398:	af00      	add	r7, sp, #0
    239a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    23a0:	68fb      	ldr	r3, [r7, #12]
    23a2:	699b      	ldr	r3, [r3, #24]
    23a4:	2b00      	cmp	r3, #0
    23a6:	d003      	beq.n	23b0 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    23a8:	68fb      	ldr	r3, [r7, #12]
    23aa:	699b      	ldr	r3, [r3, #24]
    23ac:	68f8      	ldr	r0, [r7, #12]
    23ae:	4798      	blx	r3
	}
}
    23b0:	bf00      	nop
    23b2:	3710      	adds	r7, #16
    23b4:	46bd      	mov	sp, r7
    23b6:	bd80      	pop	{r7, pc}

000023b8 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    23b8:	b580      	push	{r7, lr}
    23ba:	b082      	sub	sp, #8
    23bc:	af00      	add	r7, sp, #0
    23be:	6078      	str	r0, [r7, #4]
    23c0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	2b00      	cmp	r3, #0
    23c6:	d004      	beq.n	23d2 <qspi_sync_init+0x1a>
    23c8:	683b      	ldr	r3, [r7, #0]
    23ca:	2b00      	cmp	r3, #0
    23cc:	d001      	beq.n	23d2 <qspi_sync_init+0x1a>
    23ce:	2301      	movs	r3, #1
    23d0:	e000      	b.n	23d4 <qspi_sync_init+0x1c>
    23d2:	2300      	movs	r3, #0
    23d4:	f003 0301 	and.w	r3, r3, #1
    23d8:	b2db      	uxtb	r3, r3
    23da:	2231      	movs	r2, #49	; 0x31
    23dc:	4906      	ldr	r1, [pc, #24]	; (23f8 <qspi_sync_init+0x40>)
    23de:	4618      	mov	r0, r3
    23e0:	4b06      	ldr	r3, [pc, #24]	; (23fc <qspi_sync_init+0x44>)
    23e2:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    23e4:	687b      	ldr	r3, [r7, #4]
    23e6:	6839      	ldr	r1, [r7, #0]
    23e8:	4618      	mov	r0, r3
    23ea:	4b05      	ldr	r3, [pc, #20]	; (2400 <qspi_sync_init+0x48>)
    23ec:	4798      	blx	r3
    23ee:	4603      	mov	r3, r0
}
    23f0:	4618      	mov	r0, r3
    23f2:	3708      	adds	r7, #8
    23f4:	46bd      	mov	sp, r7
    23f6:	bd80      	pop	{r7, pc}
    23f8:	0000edc8 	.word	0x0000edc8
    23fc:	0000349d 	.word	0x0000349d
    2400:	00005465 	.word	0x00005465

00002404 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2404:	b580      	push	{r7, lr}
    2406:	b082      	sub	sp, #8
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	2b00      	cmp	r3, #0
    2410:	bf14      	ite	ne
    2412:	2301      	movne	r3, #1
    2414:	2300      	moveq	r3, #0
    2416:	b2db      	uxtb	r3, r3
    2418:	223f      	movs	r2, #63	; 0x3f
    241a:	4906      	ldr	r1, [pc, #24]	; (2434 <qspi_sync_enable+0x30>)
    241c:	4618      	mov	r0, r3
    241e:	4b06      	ldr	r3, [pc, #24]	; (2438 <qspi_sync_enable+0x34>)
    2420:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2422:	687b      	ldr	r3, [r7, #4]
    2424:	4618      	mov	r0, r3
    2426:	4b05      	ldr	r3, [pc, #20]	; (243c <qspi_sync_enable+0x38>)
    2428:	4798      	blx	r3
    242a:	4603      	mov	r3, r0
}
    242c:	4618      	mov	r0, r3
    242e:	3708      	adds	r7, #8
    2430:	46bd      	mov	sp, r7
    2432:	bd80      	pop	{r7, pc}
    2434:	0000edc8 	.word	0x0000edc8
    2438:	0000349d 	.word	0x0000349d
    243c:	000054d9 	.word	0x000054d9

00002440 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2440:	b580      	push	{r7, lr}
    2442:	b082      	sub	sp, #8
    2444:	af00      	add	r7, sp, #0
    2446:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2448:	687b      	ldr	r3, [r7, #4]
    244a:	2b00      	cmp	r3, #0
    244c:	bf14      	ite	ne
    244e:	2301      	movne	r3, #1
    2450:	2300      	moveq	r3, #0
    2452:	b2db      	uxtb	r3, r3
    2454:	2246      	movs	r2, #70	; 0x46
    2456:	4906      	ldr	r1, [pc, #24]	; (2470 <qspi_sync_disable+0x30>)
    2458:	4618      	mov	r0, r3
    245a:	4b06      	ldr	r3, [pc, #24]	; (2474 <qspi_sync_disable+0x34>)
    245c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	4618      	mov	r0, r3
    2462:	4b05      	ldr	r3, [pc, #20]	; (2478 <qspi_sync_disable+0x38>)
    2464:	4798      	blx	r3
    2466:	4603      	mov	r3, r0
}
    2468:	4618      	mov	r0, r3
    246a:	3708      	adds	r7, #8
    246c:	46bd      	mov	sp, r7
    246e:	bd80      	pop	{r7, pc}
    2470:	0000edc8 	.word	0x0000edc8
    2474:	0000349d 	.word	0x0000349d
    2478:	000054fd 	.word	0x000054fd

0000247c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    247c:	b580      	push	{r7, lr}
    247e:	b082      	sub	sp, #8
    2480:	af00      	add	r7, sp, #0
    2482:	6078      	str	r0, [r7, #4]
    2484:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2486:	687b      	ldr	r3, [r7, #4]
    2488:	2b00      	cmp	r3, #0
    248a:	d004      	beq.n	2496 <qspi_sync_serial_run_command+0x1a>
    248c:	683b      	ldr	r3, [r7, #0]
    248e:	2b00      	cmp	r3, #0
    2490:	d001      	beq.n	2496 <qspi_sync_serial_run_command+0x1a>
    2492:	2301      	movs	r3, #1
    2494:	e000      	b.n	2498 <qspi_sync_serial_run_command+0x1c>
    2496:	2300      	movs	r3, #0
    2498:	f003 0301 	and.w	r3, r3, #1
    249c:	b2db      	uxtb	r3, r3
    249e:	224d      	movs	r2, #77	; 0x4d
    24a0:	4906      	ldr	r1, [pc, #24]	; (24bc <qspi_sync_serial_run_command+0x40>)
    24a2:	4618      	mov	r0, r3
    24a4:	4b06      	ldr	r3, [pc, #24]	; (24c0 <qspi_sync_serial_run_command+0x44>)
    24a6:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    24a8:	687b      	ldr	r3, [r7, #4]
    24aa:	6839      	ldr	r1, [r7, #0]
    24ac:	4618      	mov	r0, r3
    24ae:	4b05      	ldr	r3, [pc, #20]	; (24c4 <qspi_sync_serial_run_command+0x48>)
    24b0:	4798      	blx	r3
    24b2:	4603      	mov	r3, r0
}
    24b4:	4618      	mov	r0, r3
    24b6:	3708      	adds	r7, #8
    24b8:	46bd      	mov	sp, r7
    24ba:	bd80      	pop	{r7, pc}
    24bc:	0000edc8 	.word	0x0000edc8
    24c0:	0000349d 	.word	0x0000349d
    24c4:	00005649 	.word	0x00005649

000024c8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    24d2:	2300      	movs	r3, #0
    24d4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	2b00      	cmp	r3, #0
    24da:	d004      	beq.n	24e6 <spi_m_sync_init+0x1e>
    24dc:	683b      	ldr	r3, [r7, #0]
    24de:	2b00      	cmp	r3, #0
    24e0:	d001      	beq.n	24e6 <spi_m_sync_init+0x1e>
    24e2:	2301      	movs	r3, #1
    24e4:	e000      	b.n	24e8 <spi_m_sync_init+0x20>
    24e6:	2300      	movs	r3, #0
    24e8:	f003 0301 	and.w	r3, r3, #1
    24ec:	b2db      	uxtb	r3, r3
    24ee:	2240      	movs	r2, #64	; 0x40
    24f0:	4910      	ldr	r1, [pc, #64]	; (2534 <spi_m_sync_init+0x6c>)
    24f2:	4618      	mov	r0, r3
    24f4:	4b10      	ldr	r3, [pc, #64]	; (2538 <spi_m_sync_init+0x70>)
    24f6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    24f8:	687b      	ldr	r3, [r7, #4]
    24fa:	683a      	ldr	r2, [r7, #0]
    24fc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    24fe:	687b      	ldr	r3, [r7, #4]
    2500:	3304      	adds	r3, #4
    2502:	6839      	ldr	r1, [r7, #0]
    2504:	4618      	mov	r0, r3
    2506:	4b0d      	ldr	r3, [pc, #52]	; (253c <spi_m_sync_init+0x74>)
    2508:	4798      	blx	r3
    250a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    250c:	68fb      	ldr	r3, [r7, #12]
    250e:	2b00      	cmp	r3, #0
    2510:	da01      	bge.n	2516 <spi_m_sync_init+0x4e>
		return rc;
    2512:	68fb      	ldr	r3, [r7, #12]
    2514:	e00a      	b.n	252c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    251c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    251e:	687b      	ldr	r3, [r7, #4]
    2520:	4a07      	ldr	r2, [pc, #28]	; (2540 <spi_m_sync_init+0x78>)
    2522:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	4a07      	ldr	r2, [pc, #28]	; (2544 <spi_m_sync_init+0x7c>)
    2528:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    252a:	2300      	movs	r3, #0
}
    252c:	4618      	mov	r0, r3
    252e:	3710      	adds	r7, #16
    2530:	46bd      	mov	sp, r7
    2532:	bd80      	pop	{r7, pc}
    2534:	0000ede4 	.word	0x0000ede4
    2538:	0000349d 	.word	0x0000349d
    253c:	00006e81 	.word	0x00006e81
    2540:	00002549 	.word	0x00002549
    2544:	000025a1 	.word	0x000025a1

00002548 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2548:	b580      	push	{r7, lr}
    254a:	b088      	sub	sp, #32
    254c:	af00      	add	r7, sp, #0
    254e:	60f8      	str	r0, [r7, #12]
    2550:	60b9      	str	r1, [r7, #8]
    2552:	4613      	mov	r3, r2
    2554:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2556:	68fb      	ldr	r3, [r7, #12]
    2558:	2b00      	cmp	r3, #0
    255a:	bf14      	ite	ne
    255c:	2301      	movne	r3, #1
    255e:	2300      	moveq	r3, #0
    2560:	b2db      	uxtb	r3, r3
    2562:	2287      	movs	r2, #135	; 0x87
    2564:	490b      	ldr	r1, [pc, #44]	; (2594 <_spi_m_sync_io_read+0x4c>)
    2566:	4618      	mov	r0, r3
    2568:	4b0b      	ldr	r3, [pc, #44]	; (2598 <_spi_m_sync_io_read+0x50>)
    256a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    256c:	68fb      	ldr	r3, [r7, #12]
    256e:	3b0c      	subs	r3, #12
    2570:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2572:	68bb      	ldr	r3, [r7, #8]
    2574:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2576:	2300      	movs	r3, #0
    2578:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    257a:	88fb      	ldrh	r3, [r7, #6]
    257c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    257e:	f107 0310 	add.w	r3, r7, #16
    2582:	4619      	mov	r1, r3
    2584:	69f8      	ldr	r0, [r7, #28]
    2586:	4b05      	ldr	r3, [pc, #20]	; (259c <_spi_m_sync_io_read+0x54>)
    2588:	4798      	blx	r3
    258a:	4603      	mov	r3, r0
}
    258c:	4618      	mov	r0, r3
    258e:	3720      	adds	r7, #32
    2590:	46bd      	mov	sp, r7
    2592:	bd80      	pop	{r7, pc}
    2594:	0000ede4 	.word	0x0000ede4
    2598:	0000349d 	.word	0x0000349d
    259c:	000025f9 	.word	0x000025f9

000025a0 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    25a0:	b580      	push	{r7, lr}
    25a2:	b088      	sub	sp, #32
    25a4:	af00      	add	r7, sp, #0
    25a6:	60f8      	str	r0, [r7, #12]
    25a8:	60b9      	str	r1, [r7, #8]
    25aa:	4613      	mov	r3, r2
    25ac:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    25ae:	68fb      	ldr	r3, [r7, #12]
    25b0:	2b00      	cmp	r3, #0
    25b2:	bf14      	ite	ne
    25b4:	2301      	movne	r3, #1
    25b6:	2300      	moveq	r3, #0
    25b8:	b2db      	uxtb	r3, r3
    25ba:	22a3      	movs	r2, #163	; 0xa3
    25bc:	490b      	ldr	r1, [pc, #44]	; (25ec <_spi_m_sync_io_write+0x4c>)
    25be:	4618      	mov	r0, r3
    25c0:	4b0b      	ldr	r3, [pc, #44]	; (25f0 <_spi_m_sync_io_write+0x50>)
    25c2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    25c4:	68fb      	ldr	r3, [r7, #12]
    25c6:	3b0c      	subs	r3, #12
    25c8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    25ca:	2300      	movs	r3, #0
    25cc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    25ce:	68bb      	ldr	r3, [r7, #8]
    25d0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    25d2:	88fb      	ldrh	r3, [r7, #6]
    25d4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    25d6:	f107 0310 	add.w	r3, r7, #16
    25da:	4619      	mov	r1, r3
    25dc:	69f8      	ldr	r0, [r7, #28]
    25de:	4b05      	ldr	r3, [pc, #20]	; (25f4 <_spi_m_sync_io_write+0x54>)
    25e0:	4798      	blx	r3
    25e2:	4603      	mov	r3, r0
}
    25e4:	4618      	mov	r0, r3
    25e6:	3720      	adds	r7, #32
    25e8:	46bd      	mov	sp, r7
    25ea:	bd80      	pop	{r7, pc}
    25ec:	0000ede4 	.word	0x0000ede4
    25f0:	0000349d 	.word	0x0000349d
    25f4:	000025f9 	.word	0x000025f9

000025f8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    25f8:	b580      	push	{r7, lr}
    25fa:	b086      	sub	sp, #24
    25fc:	af00      	add	r7, sp, #0
    25fe:	6078      	str	r0, [r7, #4]
    2600:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	2b00      	cmp	r3, #0
    2606:	d004      	beq.n	2612 <spi_m_sync_transfer+0x1a>
    2608:	683b      	ldr	r3, [r7, #0]
    260a:	2b00      	cmp	r3, #0
    260c:	d001      	beq.n	2612 <spi_m_sync_transfer+0x1a>
    260e:	2301      	movs	r3, #1
    2610:	e000      	b.n	2614 <spi_m_sync_transfer+0x1c>
    2612:	2300      	movs	r3, #0
    2614:	f003 0301 	and.w	r3, r3, #1
    2618:	b2db      	uxtb	r3, r3
    261a:	22b3      	movs	r2, #179	; 0xb3
    261c:	490c      	ldr	r1, [pc, #48]	; (2650 <spi_m_sync_transfer+0x58>)
    261e:	4618      	mov	r0, r3
    2620:	4b0c      	ldr	r3, [pc, #48]	; (2654 <spi_m_sync_transfer+0x5c>)
    2622:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2624:	683b      	ldr	r3, [r7, #0]
    2626:	681b      	ldr	r3, [r3, #0]
    2628:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    262a:	683b      	ldr	r3, [r7, #0]
    262c:	685b      	ldr	r3, [r3, #4]
    262e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2630:	683b      	ldr	r3, [r7, #0]
    2632:	689b      	ldr	r3, [r3, #8]
    2634:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2636:	687b      	ldr	r3, [r7, #4]
    2638:	3304      	adds	r3, #4
    263a:	f107 020c 	add.w	r2, r7, #12
    263e:	4611      	mov	r1, r2
    2640:	4618      	mov	r0, r3
    2642:	4b05      	ldr	r3, [pc, #20]	; (2658 <spi_m_sync_transfer+0x60>)
    2644:	4798      	blx	r3
    2646:	4603      	mov	r3, r0
}
    2648:	4618      	mov	r0, r3
    264a:	3718      	adds	r7, #24
    264c:	46bd      	mov	sp, r7
    264e:	bd80      	pop	{r7, pc}
    2650:	0000ede4 	.word	0x0000ede4
    2654:	0000349d 	.word	0x0000349d
    2658:	000070e1 	.word	0x000070e1

0000265c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    265c:	b480      	push	{r7}
    265e:	b083      	sub	sp, #12
    2660:	af00      	add	r7, sp, #0
    2662:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2664:	687b      	ldr	r3, [r7, #4]
    2666:	681b      	ldr	r3, [r3, #0]
}
    2668:	4618      	mov	r0, r3
    266a:	370c      	adds	r7, #12
    266c:	46bd      	mov	sp, r7
    266e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2672:	4770      	bx	lr

00002674 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2674:	b480      	push	{r7}
    2676:	b083      	sub	sp, #12
    2678:	af00      	add	r7, sp, #0
    267a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    267c:	687b      	ldr	r3, [r7, #4]
    267e:	2b00      	cmp	r3, #0
    2680:	d002      	beq.n	2688 <list_get_next_element+0x14>
    2682:	687b      	ldr	r3, [r7, #4]
    2684:	681b      	ldr	r3, [r3, #0]
    2686:	e000      	b.n	268a <list_get_next_element+0x16>
    2688:	2300      	movs	r3, #0
}
    268a:	4618      	mov	r0, r3
    268c:	370c      	adds	r7, #12
    268e:	46bd      	mov	sp, r7
    2690:	f85d 7b04 	ldr.w	r7, [sp], #4
    2694:	4770      	bx	lr
	...

00002698 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2698:	b580      	push	{r7, lr}
    269a:	b084      	sub	sp, #16
    269c:	af00      	add	r7, sp, #0
    269e:	60f8      	str	r0, [r7, #12]
    26a0:	60b9      	str	r1, [r7, #8]
    26a2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    26a4:	68fb      	ldr	r3, [r7, #12]
    26a6:	2b00      	cmp	r3, #0
    26a8:	d007      	beq.n	26ba <timer_init+0x22>
    26aa:	68bb      	ldr	r3, [r7, #8]
    26ac:	2b00      	cmp	r3, #0
    26ae:	d004      	beq.n	26ba <timer_init+0x22>
    26b0:	687b      	ldr	r3, [r7, #4]
    26b2:	2b00      	cmp	r3, #0
    26b4:	d001      	beq.n	26ba <timer_init+0x22>
    26b6:	2301      	movs	r3, #1
    26b8:	e000      	b.n	26bc <timer_init+0x24>
    26ba:	2300      	movs	r3, #0
    26bc:	f003 0301 	and.w	r3, r3, #1
    26c0:	b2db      	uxtb	r3, r3
    26c2:	223b      	movs	r2, #59	; 0x3b
    26c4:	490c      	ldr	r1, [pc, #48]	; (26f8 <timer_init+0x60>)
    26c6:	4618      	mov	r0, r3
    26c8:	4b0c      	ldr	r3, [pc, #48]	; (26fc <timer_init+0x64>)
    26ca:	4798      	blx	r3
	descr->func = func;
    26cc:	68fb      	ldr	r3, [r7, #12]
    26ce:	687a      	ldr	r2, [r7, #4]
    26d0:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    26d2:	68fb      	ldr	r3, [r7, #12]
    26d4:	681b      	ldr	r3, [r3, #0]
    26d6:	681b      	ldr	r3, [r3, #0]
    26d8:	68fa      	ldr	r2, [r7, #12]
    26da:	3204      	adds	r2, #4
    26dc:	68b9      	ldr	r1, [r7, #8]
    26de:	4610      	mov	r0, r2
    26e0:	4798      	blx	r3
	descr->time                           = 0;
    26e2:	68fb      	ldr	r3, [r7, #12]
    26e4:	2200      	movs	r2, #0
    26e6:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    26e8:	68fb      	ldr	r3, [r7, #12]
    26ea:	4a05      	ldr	r2, [pc, #20]	; (2700 <timer_init+0x68>)
    26ec:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    26ee:	2300      	movs	r3, #0
}
    26f0:	4618      	mov	r0, r3
    26f2:	3710      	adds	r7, #16
    26f4:	46bd      	mov	sp, r7
    26f6:	bd80      	pop	{r7, pc}
    26f8:	0000ee00 	.word	0x0000ee00
    26fc:	0000349d 	.word	0x0000349d
    2700:	00002a89 	.word	0x00002a89

00002704 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2704:	b580      	push	{r7, lr}
    2706:	b082      	sub	sp, #8
    2708:	af00      	add	r7, sp, #0
    270a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    270c:	687b      	ldr	r3, [r7, #4]
    270e:	2b00      	cmp	r3, #0
    2710:	d005      	beq.n	271e <timer_start+0x1a>
    2712:	687b      	ldr	r3, [r7, #4]
    2714:	681b      	ldr	r3, [r3, #0]
    2716:	2b00      	cmp	r3, #0
    2718:	d001      	beq.n	271e <timer_start+0x1a>
    271a:	2301      	movs	r3, #1
    271c:	e000      	b.n	2720 <timer_start+0x1c>
    271e:	2300      	movs	r3, #0
    2720:	f003 0301 	and.w	r3, r3, #1
    2724:	b2db      	uxtb	r3, r3
    2726:	2254      	movs	r2, #84	; 0x54
    2728:	490e      	ldr	r1, [pc, #56]	; (2764 <timer_start+0x60>)
    272a:	4618      	mov	r0, r3
    272c:	4b0e      	ldr	r3, [pc, #56]	; (2768 <timer_start+0x64>)
    272e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	681b      	ldr	r3, [r3, #0]
    2734:	699b      	ldr	r3, [r3, #24]
    2736:	687a      	ldr	r2, [r7, #4]
    2738:	3204      	adds	r2, #4
    273a:	4610      	mov	r0, r2
    273c:	4798      	blx	r3
    273e:	4603      	mov	r3, r0
    2740:	2b00      	cmp	r3, #0
    2742:	d002      	beq.n	274a <timer_start+0x46>
		return ERR_DENIED;
    2744:	f06f 0310 	mvn.w	r3, #16
    2748:	e007      	b.n	275a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    274a:	687b      	ldr	r3, [r7, #4]
    274c:	681b      	ldr	r3, [r3, #0]
    274e:	689b      	ldr	r3, [r3, #8]
    2750:	687a      	ldr	r2, [r7, #4]
    2752:	3204      	adds	r2, #4
    2754:	4610      	mov	r0, r2
    2756:	4798      	blx	r3

	return ERR_NONE;
    2758:	2300      	movs	r3, #0
}
    275a:	4618      	mov	r0, r3
    275c:	3708      	adds	r7, #8
    275e:	46bd      	mov	sp, r7
    2760:	bd80      	pop	{r7, pc}
    2762:	bf00      	nop
    2764:	0000ee00 	.word	0x0000ee00
    2768:	0000349d 	.word	0x0000349d

0000276c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    276c:	b580      	push	{r7, lr}
    276e:	b082      	sub	sp, #8
    2770:	af00      	add	r7, sp, #0
    2772:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	2b00      	cmp	r3, #0
    2778:	d005      	beq.n	2786 <timer_stop+0x1a>
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	681b      	ldr	r3, [r3, #0]
    277e:	2b00      	cmp	r3, #0
    2780:	d001      	beq.n	2786 <timer_stop+0x1a>
    2782:	2301      	movs	r3, #1
    2784:	e000      	b.n	2788 <timer_stop+0x1c>
    2786:	2300      	movs	r3, #0
    2788:	f003 0301 	and.w	r3, r3, #1
    278c:	b2db      	uxtb	r3, r3
    278e:	2262      	movs	r2, #98	; 0x62
    2790:	490f      	ldr	r1, [pc, #60]	; (27d0 <timer_stop+0x64>)
    2792:	4618      	mov	r0, r3
    2794:	4b0f      	ldr	r3, [pc, #60]	; (27d4 <timer_stop+0x68>)
    2796:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	699b      	ldr	r3, [r3, #24]
    279e:	687a      	ldr	r2, [r7, #4]
    27a0:	3204      	adds	r2, #4
    27a2:	4610      	mov	r0, r2
    27a4:	4798      	blx	r3
    27a6:	4603      	mov	r3, r0
    27a8:	f083 0301 	eor.w	r3, r3, #1
    27ac:	b2db      	uxtb	r3, r3
    27ae:	2b00      	cmp	r3, #0
    27b0:	d002      	beq.n	27b8 <timer_stop+0x4c>
		return ERR_DENIED;
    27b2:	f06f 0310 	mvn.w	r3, #16
    27b6:	e007      	b.n	27c8 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    27b8:	687b      	ldr	r3, [r7, #4]
    27ba:	681b      	ldr	r3, [r3, #0]
    27bc:	68db      	ldr	r3, [r3, #12]
    27be:	687a      	ldr	r2, [r7, #4]
    27c0:	3204      	adds	r2, #4
    27c2:	4610      	mov	r0, r2
    27c4:	4798      	blx	r3

	return ERR_NONE;
    27c6:	2300      	movs	r3, #0
}
    27c8:	4618      	mov	r0, r3
    27ca:	3708      	adds	r7, #8
    27cc:	46bd      	mov	sp, r7
    27ce:	bd80      	pop	{r7, pc}
    27d0:	0000ee00 	.word	0x0000ee00
    27d4:	0000349d 	.word	0x0000349d

000027d8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    27d8:	b580      	push	{r7, lr}
    27da:	b084      	sub	sp, #16
    27dc:	af00      	add	r7, sp, #0
    27de:	6078      	str	r0, [r7, #4]
    27e0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    27e2:	687b      	ldr	r3, [r7, #4]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d008      	beq.n	27fa <timer_add_task+0x22>
    27e8:	683b      	ldr	r3, [r7, #0]
    27ea:	2b00      	cmp	r3, #0
    27ec:	d005      	beq.n	27fa <timer_add_task+0x22>
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	681b      	ldr	r3, [r3, #0]
    27f2:	2b00      	cmp	r3, #0
    27f4:	d001      	beq.n	27fa <timer_add_task+0x22>
    27f6:	2301      	movs	r3, #1
    27f8:	e000      	b.n	27fc <timer_add_task+0x24>
    27fa:	2300      	movs	r3, #0
    27fc:	f003 0301 	and.w	r3, r3, #1
    2800:	b2db      	uxtb	r3, r3
    2802:	227b      	movs	r2, #123	; 0x7b
    2804:	492f      	ldr	r1, [pc, #188]	; (28c4 <timer_add_task+0xec>)
    2806:	4618      	mov	r0, r3
    2808:	4b2f      	ldr	r3, [pc, #188]	; (28c8 <timer_add_task+0xf0>)
    280a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	7f1b      	ldrb	r3, [r3, #28]
    2810:	b2db      	uxtb	r3, r3
    2812:	f043 0301 	orr.w	r3, r3, #1
    2816:	b2da      	uxtb	r2, r3
    2818:	687b      	ldr	r3, [r7, #4]
    281a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    281c:	687b      	ldr	r3, [r7, #4]
    281e:	3318      	adds	r3, #24
    2820:	6839      	ldr	r1, [r7, #0]
    2822:	4618      	mov	r0, r3
    2824:	4b29      	ldr	r3, [pc, #164]	; (28cc <timer_add_task+0xf4>)
    2826:	4798      	blx	r3
    2828:	4603      	mov	r3, r0
    282a:	2b00      	cmp	r3, #0
    282c:	d00f      	beq.n	284e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	7f1b      	ldrb	r3, [r3, #28]
    2832:	b2db      	uxtb	r3, r3
    2834:	f023 0301 	bic.w	r3, r3, #1
    2838:	b2da      	uxtb	r2, r3
    283a:	687b      	ldr	r3, [r7, #4]
    283c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    283e:	2280      	movs	r2, #128	; 0x80
    2840:	4920      	ldr	r1, [pc, #128]	; (28c4 <timer_add_task+0xec>)
    2842:	2000      	movs	r0, #0
    2844:	4b20      	ldr	r3, [pc, #128]	; (28c8 <timer_add_task+0xf0>)
    2846:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2848:	f06f 0311 	mvn.w	r3, #17
    284c:	e035      	b.n	28ba <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    284e:	687b      	ldr	r3, [r7, #4]
    2850:	695a      	ldr	r2, [r3, #20]
    2852:	683b      	ldr	r3, [r7, #0]
    2854:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2856:	687b      	ldr	r3, [r7, #4]
    2858:	f103 0018 	add.w	r0, r3, #24
    285c:	687b      	ldr	r3, [r7, #4]
    285e:	695b      	ldr	r3, [r3, #20]
    2860:	461a      	mov	r2, r3
    2862:	6839      	ldr	r1, [r7, #0]
    2864:	4b1a      	ldr	r3, [pc, #104]	; (28d0 <timer_add_task+0xf8>)
    2866:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2868:	687b      	ldr	r3, [r7, #4]
    286a:	7f1b      	ldrb	r3, [r3, #28]
    286c:	b2db      	uxtb	r3, r3
    286e:	f023 0301 	bic.w	r3, r3, #1
    2872:	b2da      	uxtb	r2, r3
    2874:	687b      	ldr	r3, [r7, #4]
    2876:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	7f1b      	ldrb	r3, [r3, #28]
    287c:	b2db      	uxtb	r3, r3
    287e:	f003 0302 	and.w	r3, r3, #2
    2882:	2b00      	cmp	r3, #0
    2884:	d018      	beq.n	28b8 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2886:	f107 030c 	add.w	r3, r7, #12
    288a:	4618      	mov	r0, r3
    288c:	4b11      	ldr	r3, [pc, #68]	; (28d4 <timer_add_task+0xfc>)
    288e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	7f1b      	ldrb	r3, [r3, #28]
    2894:	b2db      	uxtb	r3, r3
    2896:	f023 0302 	bic.w	r3, r3, #2
    289a:	b2da      	uxtb	r2, r3
    289c:	687b      	ldr	r3, [r7, #4]
    289e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	681b      	ldr	r3, [r3, #0]
    28a4:	69db      	ldr	r3, [r3, #28]
    28a6:	687a      	ldr	r2, [r7, #4]
    28a8:	3204      	adds	r2, #4
    28aa:	4610      	mov	r0, r2
    28ac:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    28ae:	f107 030c 	add.w	r3, r7, #12
    28b2:	4618      	mov	r0, r3
    28b4:	4b08      	ldr	r3, [pc, #32]	; (28d8 <timer_add_task+0x100>)
    28b6:	4798      	blx	r3
	}

	return ERR_NONE;
    28b8:	2300      	movs	r3, #0
}
    28ba:	4618      	mov	r0, r3
    28bc:	3710      	adds	r7, #16
    28be:	46bd      	mov	sp, r7
    28c0:	bd80      	pop	{r7, pc}
    28c2:	bf00      	nop
    28c4:	0000ee00 	.word	0x0000ee00
    28c8:	0000349d 	.word	0x0000349d
    28cc:	000034c5 	.word	0x000034c5
    28d0:	000029d9 	.word	0x000029d9
    28d4:	0000b4cd 	.word	0x0000b4cd
    28d8:	0000b4f3 	.word	0x0000b4f3

000028dc <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    28dc:	b580      	push	{r7, lr}
    28de:	b084      	sub	sp, #16
    28e0:	af00      	add	r7, sp, #0
    28e2:	6078      	str	r0, [r7, #4]
    28e4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    28e6:	687b      	ldr	r3, [r7, #4]
    28e8:	2b00      	cmp	r3, #0
    28ea:	d008      	beq.n	28fe <timer_remove_task+0x22>
    28ec:	683b      	ldr	r3, [r7, #0]
    28ee:	2b00      	cmp	r3, #0
    28f0:	d005      	beq.n	28fe <timer_remove_task+0x22>
    28f2:	687b      	ldr	r3, [r7, #4]
    28f4:	681b      	ldr	r3, [r3, #0]
    28f6:	2b00      	cmp	r3, #0
    28f8:	d001      	beq.n	28fe <timer_remove_task+0x22>
    28fa:	2301      	movs	r3, #1
    28fc:	e000      	b.n	2900 <timer_remove_task+0x24>
    28fe:	2300      	movs	r3, #0
    2900:	f003 0301 	and.w	r3, r3, #1
    2904:	b2db      	uxtb	r3, r3
    2906:	2296      	movs	r2, #150	; 0x96
    2908:	492d      	ldr	r1, [pc, #180]	; (29c0 <timer_remove_task+0xe4>)
    290a:	4618      	mov	r0, r3
    290c:	4b2d      	ldr	r3, [pc, #180]	; (29c4 <timer_remove_task+0xe8>)
    290e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	7f1b      	ldrb	r3, [r3, #28]
    2914:	b2db      	uxtb	r3, r3
    2916:	f043 0301 	orr.w	r3, r3, #1
    291a:	b2da      	uxtb	r2, r3
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2920:	687b      	ldr	r3, [r7, #4]
    2922:	3318      	adds	r3, #24
    2924:	6839      	ldr	r1, [r7, #0]
    2926:	4618      	mov	r0, r3
    2928:	4b27      	ldr	r3, [pc, #156]	; (29c8 <timer_remove_task+0xec>)
    292a:	4798      	blx	r3
    292c:	4603      	mov	r3, r0
    292e:	f083 0301 	eor.w	r3, r3, #1
    2932:	b2db      	uxtb	r3, r3
    2934:	2b00      	cmp	r3, #0
    2936:	d00f      	beq.n	2958 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2938:	687b      	ldr	r3, [r7, #4]
    293a:	7f1b      	ldrb	r3, [r3, #28]
    293c:	b2db      	uxtb	r3, r3
    293e:	f023 0301 	bic.w	r3, r3, #1
    2942:	b2da      	uxtb	r2, r3
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2948:	229b      	movs	r2, #155	; 0x9b
    294a:	491d      	ldr	r1, [pc, #116]	; (29c0 <timer_remove_task+0xe4>)
    294c:	2000      	movs	r0, #0
    294e:	4b1d      	ldr	r3, [pc, #116]	; (29c4 <timer_remove_task+0xe8>)
    2950:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2952:	f06f 0309 	mvn.w	r3, #9
    2956:	e02e      	b.n	29b6 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	3318      	adds	r3, #24
    295c:	6839      	ldr	r1, [r7, #0]
    295e:	4618      	mov	r0, r3
    2960:	4b1a      	ldr	r3, [pc, #104]	; (29cc <timer_remove_task+0xf0>)
    2962:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2964:	687b      	ldr	r3, [r7, #4]
    2966:	7f1b      	ldrb	r3, [r3, #28]
    2968:	b2db      	uxtb	r3, r3
    296a:	f023 0301 	bic.w	r3, r3, #1
    296e:	b2da      	uxtb	r2, r3
    2970:	687b      	ldr	r3, [r7, #4]
    2972:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2974:	687b      	ldr	r3, [r7, #4]
    2976:	7f1b      	ldrb	r3, [r3, #28]
    2978:	b2db      	uxtb	r3, r3
    297a:	f003 0302 	and.w	r3, r3, #2
    297e:	2b00      	cmp	r3, #0
    2980:	d018      	beq.n	29b4 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2982:	f107 030c 	add.w	r3, r7, #12
    2986:	4618      	mov	r0, r3
    2988:	4b11      	ldr	r3, [pc, #68]	; (29d0 <timer_remove_task+0xf4>)
    298a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    298c:	687b      	ldr	r3, [r7, #4]
    298e:	7f1b      	ldrb	r3, [r3, #28]
    2990:	b2db      	uxtb	r3, r3
    2992:	f023 0302 	bic.w	r3, r3, #2
    2996:	b2da      	uxtb	r2, r3
    2998:	687b      	ldr	r3, [r7, #4]
    299a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	681b      	ldr	r3, [r3, #0]
    29a0:	69db      	ldr	r3, [r3, #28]
    29a2:	687a      	ldr	r2, [r7, #4]
    29a4:	3204      	adds	r2, #4
    29a6:	4610      	mov	r0, r2
    29a8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    29aa:	f107 030c 	add.w	r3, r7, #12
    29ae:	4618      	mov	r0, r3
    29b0:	4b08      	ldr	r3, [pc, #32]	; (29d4 <timer_remove_task+0xf8>)
    29b2:	4798      	blx	r3
	}

	return ERR_NONE;
    29b4:	2300      	movs	r3, #0
}
    29b6:	4618      	mov	r0, r3
    29b8:	3710      	adds	r7, #16
    29ba:	46bd      	mov	sp, r7
    29bc:	bd80      	pop	{r7, pc}
    29be:	bf00      	nop
    29c0:	0000ee00 	.word	0x0000ee00
    29c4:	0000349d 	.word	0x0000349d
    29c8:	000034c5 	.word	0x000034c5
    29cc:	00003627 	.word	0x00003627
    29d0:	0000b4cd 	.word	0x0000b4cd
    29d4:	0000b4f3 	.word	0x0000b4f3

000029d8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    29d8:	b580      	push	{r7, lr}
    29da:	b088      	sub	sp, #32
    29dc:	af00      	add	r7, sp, #0
    29de:	60f8      	str	r0, [r7, #12]
    29e0:	60b9      	str	r1, [r7, #8]
    29e2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    29e4:	2300      	movs	r3, #0
    29e6:	61bb      	str	r3, [r7, #24]
    29e8:	68f8      	ldr	r0, [r7, #12]
    29ea:	4b23      	ldr	r3, [pc, #140]	; (2a78 <timer_add_timer_task+0xa0>)
    29ec:	4798      	blx	r3
    29ee:	6138      	str	r0, [r7, #16]

	if (!head) {
    29f0:	693b      	ldr	r3, [r7, #16]
    29f2:	2b00      	cmp	r3, #0
    29f4:	d104      	bne.n	2a00 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    29f6:	68b9      	ldr	r1, [r7, #8]
    29f8:	68f8      	ldr	r0, [r7, #12]
    29fa:	4b20      	ldr	r3, [pc, #128]	; (2a7c <timer_add_timer_task+0xa4>)
    29fc:	4798      	blx	r3
		return;
    29fe:	e037      	b.n	2a70 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2a00:	693b      	ldr	r3, [r7, #16]
    2a02:	61fb      	str	r3, [r7, #28]
    2a04:	e022      	b.n	2a4c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2a06:	69fb      	ldr	r3, [r7, #28]
    2a08:	685a      	ldr	r2, [r3, #4]
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	429a      	cmp	r2, r3
    2a0e:	d808      	bhi.n	2a22 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2a10:	69fb      	ldr	r3, [r7, #28]
    2a12:	689a      	ldr	r2, [r3, #8]
    2a14:	69fb      	ldr	r3, [r7, #28]
    2a16:	6859      	ldr	r1, [r3, #4]
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	1acb      	subs	r3, r1, r3
    2a1c:	4413      	add	r3, r2
    2a1e:	617b      	str	r3, [r7, #20]
    2a20:	e009      	b.n	2a36 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2a22:	69fb      	ldr	r3, [r7, #28]
    2a24:	689a      	ldr	r2, [r3, #8]
    2a26:	69fb      	ldr	r3, [r7, #28]
    2a28:	685b      	ldr	r3, [r3, #4]
    2a2a:	441a      	add	r2, r3
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	425b      	negs	r3, r3
    2a30:	4413      	add	r3, r2
    2a32:	3301      	adds	r3, #1
    2a34:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2a36:	68bb      	ldr	r3, [r7, #8]
    2a38:	689a      	ldr	r2, [r3, #8]
    2a3a:	697b      	ldr	r3, [r7, #20]
    2a3c:	429a      	cmp	r2, r3
    2a3e:	d909      	bls.n	2a54 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2a40:	69fb      	ldr	r3, [r7, #28]
    2a42:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2a44:	69f8      	ldr	r0, [r7, #28]
    2a46:	4b0e      	ldr	r3, [pc, #56]	; (2a80 <timer_add_timer_task+0xa8>)
    2a48:	4798      	blx	r3
    2a4a:	61f8      	str	r0, [r7, #28]
    2a4c:	69fb      	ldr	r3, [r7, #28]
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d1d9      	bne.n	2a06 <timer_add_timer_task+0x2e>
    2a52:	e000      	b.n	2a56 <timer_add_timer_task+0x7e>
			break;
    2a54:	bf00      	nop
	}

	if (it == head) {
    2a56:	69fa      	ldr	r2, [r7, #28]
    2a58:	693b      	ldr	r3, [r7, #16]
    2a5a:	429a      	cmp	r2, r3
    2a5c:	d104      	bne.n	2a68 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2a5e:	68b9      	ldr	r1, [r7, #8]
    2a60:	68f8      	ldr	r0, [r7, #12]
    2a62:	4b06      	ldr	r3, [pc, #24]	; (2a7c <timer_add_timer_task+0xa4>)
    2a64:	4798      	blx	r3
    2a66:	e003      	b.n	2a70 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2a68:	68b9      	ldr	r1, [r7, #8]
    2a6a:	69b8      	ldr	r0, [r7, #24]
    2a6c:	4b05      	ldr	r3, [pc, #20]	; (2a84 <timer_add_timer_task+0xac>)
    2a6e:	4798      	blx	r3
	}
}
    2a70:	3720      	adds	r7, #32
    2a72:	46bd      	mov	sp, r7
    2a74:	bd80      	pop	{r7, pc}
    2a76:	bf00      	nop
    2a78:	0000265d 	.word	0x0000265d
    2a7c:	000034fd 	.word	0x000034fd
    2a80:	00002675 	.word	0x00002675
    2a84:	00003555 	.word	0x00003555

00002a88 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2a88:	b580      	push	{r7, lr}
    2a8a:	b086      	sub	sp, #24
    2a8c:	af00      	add	r7, sp, #0
    2a8e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2a90:	687b      	ldr	r3, [r7, #4]
    2a92:	3b04      	subs	r3, #4
    2a94:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2a96:	693b      	ldr	r3, [r7, #16]
    2a98:	3318      	adds	r3, #24
    2a9a:	4618      	mov	r0, r3
    2a9c:	4b27      	ldr	r3, [pc, #156]	; (2b3c <timer_process_counted+0xb4>)
    2a9e:	4798      	blx	r3
    2aa0:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2aa2:	693b      	ldr	r3, [r7, #16]
    2aa4:	695b      	ldr	r3, [r3, #20]
    2aa6:	1c5a      	adds	r2, r3, #1
    2aa8:	693b      	ldr	r3, [r7, #16]
    2aaa:	615a      	str	r2, [r3, #20]
    2aac:	693b      	ldr	r3, [r7, #16]
    2aae:	695b      	ldr	r3, [r3, #20]
    2ab0:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2ab2:	693b      	ldr	r3, [r7, #16]
    2ab4:	7f1b      	ldrb	r3, [r3, #28]
    2ab6:	b2db      	uxtb	r3, r3
    2ab8:	f003 0301 	and.w	r3, r3, #1
    2abc:	2b00      	cmp	r3, #0
    2abe:	d106      	bne.n	2ace <timer_process_counted+0x46>
    2ac0:	693b      	ldr	r3, [r7, #16]
    2ac2:	7f1b      	ldrb	r3, [r3, #28]
    2ac4:	b2db      	uxtb	r3, r3
    2ac6:	f003 0302 	and.w	r3, r3, #2
    2aca:	2b00      	cmp	r3, #0
    2acc:	d027      	beq.n	2b1e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2ace:	693b      	ldr	r3, [r7, #16]
    2ad0:	7f1b      	ldrb	r3, [r3, #28]
    2ad2:	b2db      	uxtb	r3, r3
    2ad4:	f043 0302 	orr.w	r3, r3, #2
    2ad8:	b2da      	uxtb	r2, r3
    2ada:	693b      	ldr	r3, [r7, #16]
    2adc:	771a      	strb	r2, [r3, #28]
		return;
    2ade:	e029      	b.n	2b34 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2ae0:	697b      	ldr	r3, [r7, #20]
    2ae2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2ae4:	693b      	ldr	r3, [r7, #16]
    2ae6:	3318      	adds	r3, #24
    2ae8:	4618      	mov	r0, r3
    2aea:	4b15      	ldr	r3, [pc, #84]	; (2b40 <timer_process_counted+0xb8>)
    2aec:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2aee:	68bb      	ldr	r3, [r7, #8]
    2af0:	7c1b      	ldrb	r3, [r3, #16]
    2af2:	2b01      	cmp	r3, #1
    2af4:	d109      	bne.n	2b0a <timer_process_counted+0x82>
			tmp->time_label = time;
    2af6:	68bb      	ldr	r3, [r7, #8]
    2af8:	68fa      	ldr	r2, [r7, #12]
    2afa:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2afc:	693b      	ldr	r3, [r7, #16]
    2afe:	3318      	adds	r3, #24
    2b00:	68fa      	ldr	r2, [r7, #12]
    2b02:	68b9      	ldr	r1, [r7, #8]
    2b04:	4618      	mov	r0, r3
    2b06:	4b0f      	ldr	r3, [pc, #60]	; (2b44 <timer_process_counted+0xbc>)
    2b08:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2b0a:	693b      	ldr	r3, [r7, #16]
    2b0c:	3318      	adds	r3, #24
    2b0e:	4618      	mov	r0, r3
    2b10:	4b0a      	ldr	r3, [pc, #40]	; (2b3c <timer_process_counted+0xb4>)
    2b12:	4798      	blx	r3
    2b14:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2b16:	68bb      	ldr	r3, [r7, #8]
    2b18:	68db      	ldr	r3, [r3, #12]
    2b1a:	68b8      	ldr	r0, [r7, #8]
    2b1c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2b1e:	697b      	ldr	r3, [r7, #20]
    2b20:	2b00      	cmp	r3, #0
    2b22:	d007      	beq.n	2b34 <timer_process_counted+0xac>
    2b24:	697b      	ldr	r3, [r7, #20]
    2b26:	685b      	ldr	r3, [r3, #4]
    2b28:	68fa      	ldr	r2, [r7, #12]
    2b2a:	1ad2      	subs	r2, r2, r3
    2b2c:	697b      	ldr	r3, [r7, #20]
    2b2e:	689b      	ldr	r3, [r3, #8]
    2b30:	429a      	cmp	r2, r3
    2b32:	d2d5      	bcs.n	2ae0 <timer_process_counted+0x58>
	}
}
    2b34:	3718      	adds	r7, #24
    2b36:	46bd      	mov	sp, r7
    2b38:	bd80      	pop	{r7, pc}
    2b3a:	bf00      	nop
    2b3c:	0000265d 	.word	0x0000265d
    2b40:	000035f5 	.word	0x000035f5
    2b44:	000029d9 	.word	0x000029d9

00002b48 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2b48:	b480      	push	{r7}
    2b4a:	b085      	sub	sp, #20
    2b4c:	af00      	add	r7, sp, #0
    2b4e:	4603      	mov	r3, r0
    2b50:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2b52:	2300      	movs	r3, #0
    2b54:	73fb      	strb	r3, [r7, #15]
    2b56:	e029      	b.n	2bac <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b5c:	4a19      	ldr	r2, [pc, #100]	; (2bc4 <_usb_d_find_ep+0x7c>)
    2b5e:	015b      	lsls	r3, r3, #5
    2b60:	4413      	add	r3, r2
    2b62:	3301      	adds	r3, #1
    2b64:	781b      	ldrb	r3, [r3, #0]
    2b66:	79fa      	ldrb	r2, [r7, #7]
    2b68:	429a      	cmp	r2, r3
    2b6a:	d102      	bne.n	2b72 <_usb_d_find_ep+0x2a>
			return i;
    2b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b70:	e022      	b.n	2bb8 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b76:	4a13      	ldr	r2, [pc, #76]	; (2bc4 <_usb_d_find_ep+0x7c>)
    2b78:	015b      	lsls	r3, r3, #5
    2b7a:	4413      	add	r3, r2
    2b7c:	781b      	ldrb	r3, [r3, #0]
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d10e      	bne.n	2ba0 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2b82:	79fb      	ldrb	r3, [r7, #7]
    2b84:	f003 030f 	and.w	r3, r3, #15
    2b88:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2b8c:	490d      	ldr	r1, [pc, #52]	; (2bc4 <_usb_d_find_ep+0x7c>)
    2b8e:	0152      	lsls	r2, r2, #5
    2b90:	440a      	add	r2, r1
    2b92:	3201      	adds	r2, #1
    2b94:	7812      	ldrb	r2, [r2, #0]
    2b96:	4293      	cmp	r3, r2
    2b98:	d102      	bne.n	2ba0 <_usb_d_find_ep+0x58>
			return i;
    2b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b9e:	e00b      	b.n	2bb8 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ba4:	b2db      	uxtb	r3, r3
    2ba6:	3301      	adds	r3, #1
    2ba8:	b2db      	uxtb	r3, r3
    2baa:	73fb      	strb	r3, [r7, #15]
    2bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bb0:	2b03      	cmp	r3, #3
    2bb2:	ddd1      	ble.n	2b58 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
    2bb8:	4618      	mov	r0, r3
    2bba:	3714      	adds	r7, #20
    2bbc:	46bd      	mov	sp, r7
    2bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bc2:	4770      	bx	lr
    2bc4:	200006d8 	.word	0x200006d8

00002bc8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2bc8:	b580      	push	{r7, lr}
    2bca:	b088      	sub	sp, #32
    2bcc:	af00      	add	r7, sp, #0
    2bce:	60ba      	str	r2, [r7, #8]
    2bd0:	607b      	str	r3, [r7, #4]
    2bd2:	4603      	mov	r3, r0
    2bd4:	73fb      	strb	r3, [r7, #15]
    2bd6:	460b      	mov	r3, r1
    2bd8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2bda:	68bb      	ldr	r3, [r7, #8]
    2bdc:	617b      	str	r3, [r7, #20]
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	61bb      	str	r3, [r7, #24]
    2be2:	7bbb      	ldrb	r3, [r7, #14]
    2be4:	2b00      	cmp	r3, #0
    2be6:	d004      	beq.n	2bf2 <_usb_d_trans+0x2a>
    2be8:	7bfb      	ldrb	r3, [r7, #15]
    2bea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2bee:	b2db      	uxtb	r3, r3
    2bf0:	e003      	b.n	2bfa <_usb_d_trans+0x32>
    2bf2:	7bfb      	ldrb	r3, [r7, #15]
    2bf4:	f003 030f 	and.w	r3, r3, #15
    2bf8:	b2db      	uxtb	r3, r3
    2bfa:	773b      	strb	r3, [r7, #28]
    2bfc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2c00:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2c02:	f107 0314 	add.w	r3, r7, #20
    2c06:	4618      	mov	r0, r3
    2c08:	4b03      	ldr	r3, [pc, #12]	; (2c18 <_usb_d_trans+0x50>)
    2c0a:	4798      	blx	r3
    2c0c:	4603      	mov	r3, r0
}
    2c0e:	4618      	mov	r0, r3
    2c10:	3720      	adds	r7, #32
    2c12:	46bd      	mov	sp, r7
    2c14:	bd80      	pop	{r7, pc}
    2c16:	bf00      	nop
    2c18:	0000ab01 	.word	0x0000ab01

00002c1c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2c1c:	b480      	push	{r7}
    2c1e:	b085      	sub	sp, #20
    2c20:	af00      	add	r7, sp, #0
    2c22:	60f8      	str	r0, [r7, #12]
    2c24:	60b9      	str	r1, [r7, #8]
    2c26:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2c28:	2300      	movs	r3, #0
}
    2c2a:	4618      	mov	r0, r3
    2c2c:	3714      	adds	r7, #20
    2c2e:	46bd      	mov	sp, r7
    2c30:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c34:	4770      	bx	lr
	...

00002c38 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2c38:	b580      	push	{r7, lr}
    2c3a:	b086      	sub	sp, #24
    2c3c:	af00      	add	r7, sp, #0
    2c3e:	4603      	mov	r3, r0
    2c40:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c42:	79fb      	ldrb	r3, [r7, #7]
    2c44:	4618      	mov	r0, r3
    2c46:	4b2a      	ldr	r3, [pc, #168]	; (2cf0 <usb_d_cb_trans_setup+0xb8>)
    2c48:	4798      	blx	r3
    2c4a:	4603      	mov	r3, r0
    2c4c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c52:	015b      	lsls	r3, r3, #5
    2c54:	4a27      	ldr	r2, [pc, #156]	; (2cf4 <usb_d_cb_trans_setup+0xbc>)
    2c56:	4413      	add	r3, r2
    2c58:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2c5a:	693b      	ldr	r3, [r7, #16]
    2c5c:	330c      	adds	r3, #12
    2c5e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2c60:	79fb      	ldrb	r3, [r7, #7]
    2c62:	68f9      	ldr	r1, [r7, #12]
    2c64:	4618      	mov	r0, r3
    2c66:	4b24      	ldr	r3, [pc, #144]	; (2cf8 <usb_d_cb_trans_setup+0xc0>)
    2c68:	4798      	blx	r3
    2c6a:	4603      	mov	r3, r0
    2c6c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2c6e:	7afb      	ldrb	r3, [r7, #11]
    2c70:	2b08      	cmp	r3, #8
    2c72:	d00d      	beq.n	2c90 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2c74:	79fb      	ldrb	r3, [r7, #7]
    2c76:	2101      	movs	r1, #1
    2c78:	4618      	mov	r0, r3
    2c7a:	4b20      	ldr	r3, [pc, #128]	; (2cfc <usb_d_cb_trans_setup+0xc4>)
    2c7c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2c7e:	79fb      	ldrb	r3, [r7, #7]
    2c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c84:	b2db      	uxtb	r3, r3
    2c86:	2101      	movs	r1, #1
    2c88:	4618      	mov	r0, r3
    2c8a:	4b1c      	ldr	r3, [pc, #112]	; (2cfc <usb_d_cb_trans_setup+0xc4>)
    2c8c:	4798      	blx	r3
		return;
    2c8e:	e02b      	b.n	2ce8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2c90:	79fb      	ldrb	r3, [r7, #7]
    2c92:	2100      	movs	r1, #0
    2c94:	4618      	mov	r0, r3
    2c96:	4b19      	ldr	r3, [pc, #100]	; (2cfc <usb_d_cb_trans_setup+0xc4>)
    2c98:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2c9a:	79fb      	ldrb	r3, [r7, #7]
    2c9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2ca0:	b2db      	uxtb	r3, r3
    2ca2:	2100      	movs	r1, #0
    2ca4:	4618      	mov	r0, r3
    2ca6:	4b15      	ldr	r3, [pc, #84]	; (2cfc <usb_d_cb_trans_setup+0xc4>)
    2ca8:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2caa:	693b      	ldr	r3, [r7, #16]
    2cac:	2201      	movs	r2, #1
    2cae:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2cb0:	693b      	ldr	r3, [r7, #16]
    2cb2:	695b      	ldr	r3, [r3, #20]
    2cb4:	79fa      	ldrb	r2, [r7, #7]
    2cb6:	68f9      	ldr	r1, [r7, #12]
    2cb8:	4610      	mov	r0, r2
    2cba:	4798      	blx	r3
    2cbc:	4603      	mov	r3, r0
    2cbe:	f083 0301 	eor.w	r3, r3, #1
    2cc2:	b2db      	uxtb	r3, r3
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	d00f      	beq.n	2ce8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2cc8:	693b      	ldr	r3, [r7, #16]
    2cca:	2205      	movs	r2, #5
    2ccc:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2cce:	79fb      	ldrb	r3, [r7, #7]
    2cd0:	2101      	movs	r1, #1
    2cd2:	4618      	mov	r0, r3
    2cd4:	4b09      	ldr	r3, [pc, #36]	; (2cfc <usb_d_cb_trans_setup+0xc4>)
    2cd6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2cd8:	79fb      	ldrb	r3, [r7, #7]
    2cda:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2cde:	b2db      	uxtb	r3, r3
    2ce0:	2101      	movs	r1, #1
    2ce2:	4618      	mov	r0, r3
    2ce4:	4b05      	ldr	r3, [pc, #20]	; (2cfc <usb_d_cb_trans_setup+0xc4>)
    2ce6:	4798      	blx	r3
	}
}
    2ce8:	3718      	adds	r7, #24
    2cea:	46bd      	mov	sp, r7
    2cec:	bd80      	pop	{r7, pc}
    2cee:	bf00      	nop
    2cf0:	00002b49 	.word	0x00002b49
    2cf4:	200006d8 	.word	0x200006d8
    2cf8:	0000aa59 	.word	0x0000aa59
    2cfc:	0000a8d1 	.word	0x0000a8d1

00002d00 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2d00:	b580      	push	{r7, lr}
    2d02:	b084      	sub	sp, #16
    2d04:	af00      	add	r7, sp, #0
    2d06:	4603      	mov	r3, r0
    2d08:	6039      	str	r1, [r7, #0]
    2d0a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d0c:	79fb      	ldrb	r3, [r7, #7]
    2d0e:	4618      	mov	r0, r3
    2d10:	4b0d      	ldr	r3, [pc, #52]	; (2d48 <usb_d_cb_trans_more+0x48>)
    2d12:	4798      	blx	r3
    2d14:	4603      	mov	r3, r0
    2d16:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d1c:	015b      	lsls	r3, r3, #5
    2d1e:	4a0b      	ldr	r2, [pc, #44]	; (2d4c <usb_d_cb_trans_more+0x4c>)
    2d20:	4413      	add	r3, r2
    2d22:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2d24:	68bb      	ldr	r3, [r7, #8]
    2d26:	789b      	ldrb	r3, [r3, #2]
    2d28:	2b03      	cmp	r3, #3
    2d2a:	d107      	bne.n	2d3c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2d2c:	68bb      	ldr	r3, [r7, #8]
    2d2e:	699b      	ldr	r3, [r3, #24]
    2d30:	79fa      	ldrb	r2, [r7, #7]
    2d32:	6839      	ldr	r1, [r7, #0]
    2d34:	4610      	mov	r0, r2
    2d36:	4798      	blx	r3
    2d38:	4603      	mov	r3, r0
    2d3a:	e000      	b.n	2d3e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2d3c:	2300      	movs	r3, #0
}
    2d3e:	4618      	mov	r0, r3
    2d40:	3710      	adds	r7, #16
    2d42:	46bd      	mov	sp, r7
    2d44:	bd80      	pop	{r7, pc}
    2d46:	bf00      	nop
    2d48:	00002b49 	.word	0x00002b49
    2d4c:	200006d8 	.word	0x200006d8

00002d50 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2d50:	b590      	push	{r4, r7, lr}
    2d52:	b087      	sub	sp, #28
    2d54:	af02      	add	r7, sp, #8
    2d56:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2d58:	687b      	ldr	r3, [r7, #4]
    2d5a:	789b      	ldrb	r3, [r3, #2]
    2d5c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2d5e:	687b      	ldr	r3, [r7, #4]
    2d60:	7b1b      	ldrb	r3, [r3, #12]
    2d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2d66:	2b00      	cmp	r3, #0
    2d68:	bf14      	ite	ne
    2d6a:	2301      	movne	r3, #1
    2d6c:	2300      	moveq	r3, #0
    2d6e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2d70:	7bfb      	ldrb	r3, [r7, #15]
    2d72:	2b03      	cmp	r3, #3
    2d74:	d13a      	bne.n	2dec <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2d76:	687b      	ldr	r3, [r7, #4]
    2d78:	69db      	ldr	r3, [r3, #28]
    2d7a:	687a      	ldr	r2, [r7, #4]
    2d7c:	7850      	ldrb	r0, [r2, #1]
    2d7e:	687a      	ldr	r2, [r7, #4]
    2d80:	320c      	adds	r2, #12
    2d82:	2101      	movs	r1, #1
    2d84:	4798      	blx	r3
    2d86:	4603      	mov	r3, r0
    2d88:	737b      	strb	r3, [r7, #13]
		if (err) {
    2d8a:	7b7b      	ldrb	r3, [r7, #13]
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d015      	beq.n	2dbc <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2d90:	687b      	ldr	r3, [r7, #4]
    2d92:	2205      	movs	r2, #5
    2d94:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	2202      	movs	r2, #2
    2d9a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2d9c:	7bbb      	ldrb	r3, [r7, #14]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d002      	beq.n	2da8 <usb_d_ctrl_trans_done+0x58>
    2da2:	687b      	ldr	r3, [r7, #4]
    2da4:	785b      	ldrb	r3, [r3, #1]
    2da6:	e004      	b.n	2db2 <usb_d_ctrl_trans_done+0x62>
    2da8:	687b      	ldr	r3, [r7, #4]
    2daa:	785b      	ldrb	r3, [r3, #1]
    2dac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2db0:	b2db      	uxtb	r3, r3
    2db2:	2101      	movs	r1, #1
    2db4:	4618      	mov	r0, r3
    2db6:	4b15      	ldr	r3, [pc, #84]	; (2e0c <usb_d_ctrl_trans_done+0xbc>)
    2db8:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2dba:	e022      	b.n	2e02 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2dbc:	687b      	ldr	r3, [r7, #4]
    2dbe:	2204      	movs	r2, #4
    2dc0:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2dc2:	687b      	ldr	r3, [r7, #4]
    2dc4:	7858      	ldrb	r0, [r3, #1]
    2dc6:	7bbb      	ldrb	r3, [r7, #14]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	bf14      	ite	ne
    2dcc:	2301      	movne	r3, #1
    2dce:	2300      	moveq	r3, #0
    2dd0:	b2db      	uxtb	r3, r3
    2dd2:	f083 0301 	eor.w	r3, r3, #1
    2dd6:	b2db      	uxtb	r3, r3
    2dd8:	f003 0301 	and.w	r3, r3, #1
    2ddc:	b2d9      	uxtb	r1, r3
    2dde:	2301      	movs	r3, #1
    2de0:	9300      	str	r3, [sp, #0]
    2de2:	2300      	movs	r3, #0
    2de4:	2200      	movs	r2, #0
    2de6:	4c0a      	ldr	r4, [pc, #40]	; (2e10 <usb_d_ctrl_trans_done+0xc0>)
    2de8:	47a0      	blx	r4
}
    2dea:	e00a      	b.n	2e02 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2dec:	687b      	ldr	r3, [r7, #4]
    2dee:	69db      	ldr	r3, [r3, #28]
    2df0:	687a      	ldr	r2, [r7, #4]
    2df2:	7850      	ldrb	r0, [r2, #1]
    2df4:	687a      	ldr	r2, [r7, #4]
    2df6:	320c      	adds	r2, #12
    2df8:	2100      	movs	r1, #0
    2dfa:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2dfc:	687b      	ldr	r3, [r7, #4]
    2dfe:	2202      	movs	r2, #2
    2e00:	709a      	strb	r2, [r3, #2]
}
    2e02:	bf00      	nop
    2e04:	3714      	adds	r7, #20
    2e06:	46bd      	mov	sp, r7
    2e08:	bd90      	pop	{r4, r7, pc}
    2e0a:	bf00      	nop
    2e0c:	0000a8d1 	.word	0x0000a8d1
    2e10:	00002bc9 	.word	0x00002bc9

00002e14 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2e14:	b580      	push	{r7, lr}
    2e16:	b086      	sub	sp, #24
    2e18:	af00      	add	r7, sp, #0
    2e1a:	4603      	mov	r3, r0
    2e1c:	60b9      	str	r1, [r7, #8]
    2e1e:	607a      	str	r2, [r7, #4]
    2e20:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e22:	7bfb      	ldrb	r3, [r7, #15]
    2e24:	4618      	mov	r0, r3
    2e26:	4b2f      	ldr	r3, [pc, #188]	; (2ee4 <_usb_d_cb_trans_done+0xd0>)
    2e28:	4798      	blx	r3
    2e2a:	4603      	mov	r3, r0
    2e2c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e32:	015b      	lsls	r3, r3, #5
    2e34:	4a2c      	ldr	r2, [pc, #176]	; (2ee8 <_usb_d_cb_trans_done+0xd4>)
    2e36:	4413      	add	r3, r2
    2e38:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2e3a:	68bb      	ldr	r3, [r7, #8]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d10e      	bne.n	2e5e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2e40:	693b      	ldr	r3, [r7, #16]
    2e42:	2200      	movs	r2, #0
    2e44:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2e46:	693b      	ldr	r3, [r7, #16]
    2e48:	781b      	ldrb	r3, [r3, #0]
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	d103      	bne.n	2e56 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    2e4e:	6938      	ldr	r0, [r7, #16]
    2e50:	4b26      	ldr	r3, [pc, #152]	; (2eec <_usb_d_cb_trans_done+0xd8>)
    2e52:	4798      	blx	r3
			return;
    2e54:	e043      	b.n	2ede <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2e56:	693b      	ldr	r3, [r7, #16]
    2e58:	2201      	movs	r2, #1
    2e5a:	709a      	strb	r2, [r3, #2]
    2e5c:	e038      	b.n	2ed0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2e5e:	68bb      	ldr	r3, [r7, #8]
    2e60:	2b01      	cmp	r3, #1
    2e62:	d113      	bne.n	2e8c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2e64:	693b      	ldr	r3, [r7, #16]
    2e66:	2202      	movs	r2, #2
    2e68:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2e6a:	693b      	ldr	r3, [r7, #16]
    2e6c:	781b      	ldrb	r3, [r3, #0]
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d108      	bne.n	2e84 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2e72:	693b      	ldr	r3, [r7, #16]
    2e74:	2202      	movs	r2, #2
    2e76:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2e78:	7bfb      	ldrb	r3, [r7, #15]
    2e7a:	2100      	movs	r1, #0
    2e7c:	4618      	mov	r0, r3
    2e7e:	4b1c      	ldr	r3, [pc, #112]	; (2ef0 <_usb_d_cb_trans_done+0xdc>)
    2e80:	4798      	blx	r3
    2e82:	e025      	b.n	2ed0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2e84:	693b      	ldr	r3, [r7, #16]
    2e86:	2205      	movs	r2, #5
    2e88:	709a      	strb	r2, [r3, #2]
    2e8a:	e021      	b.n	2ed0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2e8c:	68bb      	ldr	r3, [r7, #8]
    2e8e:	2b02      	cmp	r3, #2
    2e90:	d10e      	bne.n	2eb0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2e92:	693b      	ldr	r3, [r7, #16]
    2e94:	2204      	movs	r2, #4
    2e96:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2e98:	693b      	ldr	r3, [r7, #16]
    2e9a:	781b      	ldrb	r3, [r3, #0]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d103      	bne.n	2ea8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2ea0:	693b      	ldr	r3, [r7, #16]
    2ea2:	2202      	movs	r2, #2
    2ea4:	709a      	strb	r2, [r3, #2]
			return;
    2ea6:	e01a      	b.n	2ede <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2ea8:	693b      	ldr	r3, [r7, #16]
    2eaa:	2201      	movs	r2, #1
    2eac:	709a      	strb	r2, [r3, #2]
    2eae:	e00f      	b.n	2ed0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2eb0:	68bb      	ldr	r3, [r7, #8]
    2eb2:	2b03      	cmp	r3, #3
    2eb4:	d106      	bne.n	2ec4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2eb6:	693b      	ldr	r3, [r7, #16]
    2eb8:	2200      	movs	r2, #0
    2eba:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2ebc:	693b      	ldr	r3, [r7, #16]
    2ebe:	2205      	movs	r2, #5
    2ec0:	70da      	strb	r2, [r3, #3]
    2ec2:	e005      	b.n	2ed0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2ec4:	693b      	ldr	r3, [r7, #16]
    2ec6:	2206      	movs	r2, #6
    2ec8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2eca:	693b      	ldr	r3, [r7, #16]
    2ecc:	2206      	movs	r2, #6
    2ece:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2ed0:	693b      	ldr	r3, [r7, #16]
    2ed2:	69db      	ldr	r3, [r3, #28]
    2ed4:	693a      	ldr	r2, [r7, #16]
    2ed6:	78d1      	ldrb	r1, [r2, #3]
    2ed8:	687a      	ldr	r2, [r7, #4]
    2eda:	7bf8      	ldrb	r0, [r7, #15]
    2edc:	4798      	blx	r3
}
    2ede:	3718      	adds	r7, #24
    2ee0:	46bd      	mov	sp, r7
    2ee2:	bd80      	pop	{r7, pc}
    2ee4:	00002b49 	.word	0x00002b49
    2ee8:	200006d8 	.word	0x200006d8
    2eec:	00002d51 	.word	0x00002d51
    2ef0:	0000a8d1 	.word	0x0000a8d1

00002ef4 <usb_d_init>:

int32_t usb_d_init(void)
{
    2ef4:	b580      	push	{r7, lr}
    2ef6:	b082      	sub	sp, #8
    2ef8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2efa:	4b21      	ldr	r3, [pc, #132]	; (2f80 <usb_d_init+0x8c>)
    2efc:	4798      	blx	r3
    2efe:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2f00:	683b      	ldr	r3, [r7, #0]
    2f02:	2b00      	cmp	r3, #0
    2f04:	da01      	bge.n	2f0a <usb_d_init+0x16>
		return rc;
    2f06:	683b      	ldr	r3, [r7, #0]
    2f08:	e036      	b.n	2f78 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2f0a:	2280      	movs	r2, #128	; 0x80
    2f0c:	2100      	movs	r1, #0
    2f0e:	481d      	ldr	r0, [pc, #116]	; (2f84 <usb_d_init+0x90>)
    2f10:	4b1d      	ldr	r3, [pc, #116]	; (2f88 <usb_d_init+0x94>)
    2f12:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2f14:	2300      	movs	r3, #0
    2f16:	71fb      	strb	r3, [r7, #7]
    2f18:	e01e      	b.n	2f58 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2f1a:	79fb      	ldrb	r3, [r7, #7]
    2f1c:	4a19      	ldr	r2, [pc, #100]	; (2f84 <usb_d_init+0x90>)
    2f1e:	015b      	lsls	r3, r3, #5
    2f20:	4413      	add	r3, r2
    2f22:	3301      	adds	r3, #1
    2f24:	22ff      	movs	r2, #255	; 0xff
    2f26:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2f28:	79fb      	ldrb	r3, [r7, #7]
    2f2a:	4a16      	ldr	r2, [pc, #88]	; (2f84 <usb_d_init+0x90>)
    2f2c:	015b      	lsls	r3, r3, #5
    2f2e:	4413      	add	r3, r2
    2f30:	3314      	adds	r3, #20
    2f32:	4a16      	ldr	r2, [pc, #88]	; (2f8c <usb_d_init+0x98>)
    2f34:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2f36:	79fb      	ldrb	r3, [r7, #7]
    2f38:	4a12      	ldr	r2, [pc, #72]	; (2f84 <usb_d_init+0x90>)
    2f3a:	015b      	lsls	r3, r3, #5
    2f3c:	4413      	add	r3, r2
    2f3e:	3318      	adds	r3, #24
    2f40:	4a12      	ldr	r2, [pc, #72]	; (2f8c <usb_d_init+0x98>)
    2f42:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2f44:	79fb      	ldrb	r3, [r7, #7]
    2f46:	4a0f      	ldr	r2, [pc, #60]	; (2f84 <usb_d_init+0x90>)
    2f48:	015b      	lsls	r3, r3, #5
    2f4a:	4413      	add	r3, r2
    2f4c:	331c      	adds	r3, #28
    2f4e:	4a0f      	ldr	r2, [pc, #60]	; (2f8c <usb_d_init+0x98>)
    2f50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2f52:	79fb      	ldrb	r3, [r7, #7]
    2f54:	3301      	adds	r3, #1
    2f56:	71fb      	strb	r3, [r7, #7]
    2f58:	79fb      	ldrb	r3, [r7, #7]
    2f5a:	2b03      	cmp	r3, #3
    2f5c:	d9dd      	bls.n	2f1a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2f5e:	490c      	ldr	r1, [pc, #48]	; (2f90 <usb_d_init+0x9c>)
    2f60:	2000      	movs	r0, #0
    2f62:	4b0c      	ldr	r3, [pc, #48]	; (2f94 <usb_d_init+0xa0>)
    2f64:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2f66:	490c      	ldr	r1, [pc, #48]	; (2f98 <usb_d_init+0xa4>)
    2f68:	2001      	movs	r0, #1
    2f6a:	4b0a      	ldr	r3, [pc, #40]	; (2f94 <usb_d_init+0xa0>)
    2f6c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2f6e:	490b      	ldr	r1, [pc, #44]	; (2f9c <usb_d_init+0xa8>)
    2f70:	2002      	movs	r0, #2
    2f72:	4b08      	ldr	r3, [pc, #32]	; (2f94 <usb_d_init+0xa0>)
    2f74:	4798      	blx	r3
	return ERR_NONE;
    2f76:	2300      	movs	r3, #0
}
    2f78:	4618      	mov	r0, r3
    2f7a:	3708      	adds	r7, #8
    2f7c:	46bd      	mov	sp, r7
    2f7e:	bd80      	pop	{r7, pc}
    2f80:	0000a119 	.word	0x0000a119
    2f84:	200006d8 	.word	0x200006d8
    2f88:	0000e9c9 	.word	0x0000e9c9
    2f8c:	00002c1d 	.word	0x00002c1d
    2f90:	00002c39 	.word	0x00002c39
    2f94:	0000ad61 	.word	0x0000ad61
    2f98:	00002d01 	.word	0x00002d01
    2f9c:	00002e15 	.word	0x00002e15

00002fa0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b082      	sub	sp, #8
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	4603      	mov	r3, r0
    2fa8:	6039      	str	r1, [r7, #0]
    2faa:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2fac:	79fb      	ldrb	r3, [r7, #7]
    2fae:	6839      	ldr	r1, [r7, #0]
    2fb0:	4618      	mov	r0, r3
    2fb2:	4b03      	ldr	r3, [pc, #12]	; (2fc0 <usb_d_register_callback+0x20>)
    2fb4:	4798      	blx	r3
}
    2fb6:	bf00      	nop
    2fb8:	3708      	adds	r7, #8
    2fba:	46bd      	mov	sp, r7
    2fbc:	bd80      	pop	{r7, pc}
    2fbe:	bf00      	nop
    2fc0:	0000ad19 	.word	0x0000ad19

00002fc4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2fc4:	b580      	push	{r7, lr}
    2fc6:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2fc8:	4b02      	ldr	r3, [pc, #8]	; (2fd4 <usb_d_enable+0x10>)
    2fca:	4798      	blx	r3
    2fcc:	4603      	mov	r3, r0
}
    2fce:	4618      	mov	r0, r3
    2fd0:	bd80      	pop	{r7, pc}
    2fd2:	bf00      	nop
    2fd4:	0000a209 	.word	0x0000a209

00002fd8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2fd8:	b580      	push	{r7, lr}
    2fda:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2fdc:	4b01      	ldr	r3, [pc, #4]	; (2fe4 <usb_d_attach+0xc>)
    2fde:	4798      	blx	r3
}
    2fe0:	bf00      	nop
    2fe2:	bd80      	pop	{r7, pc}
    2fe4:	0000a28d 	.word	0x0000a28d

00002fe8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2fe8:	b580      	push	{r7, lr}
    2fea:	b082      	sub	sp, #8
    2fec:	af00      	add	r7, sp, #0
    2fee:	4603      	mov	r3, r0
    2ff0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    2ff2:	79fb      	ldrb	r3, [r7, #7]
    2ff4:	4618      	mov	r0, r3
    2ff6:	4b03      	ldr	r3, [pc, #12]	; (3004 <usb_d_set_address+0x1c>)
    2ff8:	4798      	blx	r3
}
    2ffa:	bf00      	nop
    2ffc:	3708      	adds	r7, #8
    2ffe:	46bd      	mov	sp, r7
    3000:	bd80      	pop	{r7, pc}
    3002:	bf00      	nop
    3004:	0000a2a1 	.word	0x0000a2a1

00003008 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3008:	b580      	push	{r7, lr}
    300a:	b082      	sub	sp, #8
    300c:	af00      	add	r7, sp, #0
    300e:	4603      	mov	r3, r0
    3010:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3012:	79fb      	ldrb	r3, [r7, #7]
    3014:	b29b      	uxth	r3, r3
    3016:	461a      	mov	r2, r3
    3018:	2100      	movs	r1, #0
    301a:	2000      	movs	r0, #0
    301c:	4b03      	ldr	r3, [pc, #12]	; (302c <usb_d_ep0_init+0x24>)
    301e:	4798      	blx	r3
    3020:	4603      	mov	r3, r0
}
    3022:	4618      	mov	r0, r3
    3024:	3708      	adds	r7, #8
    3026:	46bd      	mov	sp, r7
    3028:	bd80      	pop	{r7, pc}
    302a:	bf00      	nop
    302c:	00003031 	.word	0x00003031

00003030 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3030:	b580      	push	{r7, lr}
    3032:	b086      	sub	sp, #24
    3034:	af00      	add	r7, sp, #0
    3036:	4603      	mov	r3, r0
    3038:	71fb      	strb	r3, [r7, #7]
    303a:	460b      	mov	r3, r1
    303c:	71bb      	strb	r3, [r7, #6]
    303e:	4613      	mov	r3, r2
    3040:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3042:	79fb      	ldrb	r3, [r7, #7]
    3044:	4618      	mov	r0, r3
    3046:	4b1e      	ldr	r3, [pc, #120]	; (30c0 <usb_d_ep_init+0x90>)
    3048:	4798      	blx	r3
    304a:	4603      	mov	r3, r0
    304c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    304e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3052:	015b      	lsls	r3, r3, #5
    3054:	4a1b      	ldr	r2, [pc, #108]	; (30c4 <usb_d_ep_init+0x94>)
    3056:	4413      	add	r3, r2
    3058:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    305a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    305e:	2b00      	cmp	r3, #0
    3060:	db02      	blt.n	3068 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3062:	f06f 0313 	mvn.w	r3, #19
    3066:	e027      	b.n	30b8 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3068:	20ff      	movs	r0, #255	; 0xff
    306a:	4b15      	ldr	r3, [pc, #84]	; (30c0 <usb_d_ep_init+0x90>)
    306c:	4798      	blx	r3
    306e:	4603      	mov	r3, r0
    3070:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3072:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3076:	2b00      	cmp	r3, #0
    3078:	da02      	bge.n	3080 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    307a:	f06f 0314 	mvn.w	r3, #20
    307e:	e01b      	b.n	30b8 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3080:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3084:	015b      	lsls	r3, r3, #5
    3086:	4a0f      	ldr	r2, [pc, #60]	; (30c4 <usb_d_ep_init+0x94>)
    3088:	4413      	add	r3, r2
    308a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    308c:	88ba      	ldrh	r2, [r7, #4]
    308e:	79b9      	ldrb	r1, [r7, #6]
    3090:	79fb      	ldrb	r3, [r7, #7]
    3092:	4618      	mov	r0, r3
    3094:	4b0c      	ldr	r3, [pc, #48]	; (30c8 <usb_d_ep_init+0x98>)
    3096:	4798      	blx	r3
    3098:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    309a:	68fb      	ldr	r3, [r7, #12]
    309c:	2b00      	cmp	r3, #0
    309e:	da01      	bge.n	30a4 <usb_d_ep_init+0x74>
		return rc;
    30a0:	68fb      	ldr	r3, [r7, #12]
    30a2:	e009      	b.n	30b8 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    30a4:	693b      	ldr	r3, [r7, #16]
    30a6:	79fa      	ldrb	r2, [r7, #7]
    30a8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    30aa:	79bb      	ldrb	r3, [r7, #6]
    30ac:	f003 0303 	and.w	r3, r3, #3
    30b0:	b2da      	uxtb	r2, r3
    30b2:	693b      	ldr	r3, [r7, #16]
    30b4:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    30b6:	2300      	movs	r3, #0
}
    30b8:	4618      	mov	r0, r3
    30ba:	3718      	adds	r7, #24
    30bc:	46bd      	mov	sp, r7
    30be:	bd80      	pop	{r7, pc}
    30c0:	00002b49 	.word	0x00002b49
    30c4:	200006d8 	.word	0x200006d8
    30c8:	0000a341 	.word	0x0000a341

000030cc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    30cc:	b580      	push	{r7, lr}
    30ce:	b084      	sub	sp, #16
    30d0:	af00      	add	r7, sp, #0
    30d2:	4603      	mov	r3, r0
    30d4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    30d6:	79fb      	ldrb	r3, [r7, #7]
    30d8:	4618      	mov	r0, r3
    30da:	4b0d      	ldr	r3, [pc, #52]	; (3110 <usb_d_ep_deinit+0x44>)
    30dc:	4798      	blx	r3
    30de:	4603      	mov	r3, r0
    30e0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    30e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    30e6:	015b      	lsls	r3, r3, #5
    30e8:	4a0a      	ldr	r2, [pc, #40]	; (3114 <usb_d_ep_deinit+0x48>)
    30ea:	4413      	add	r3, r2
    30ec:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    30ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    30f2:	2b00      	cmp	r3, #0
    30f4:	db07      	blt.n	3106 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    30f6:	79fb      	ldrb	r3, [r7, #7]
    30f8:	4618      	mov	r0, r3
    30fa:	4b07      	ldr	r3, [pc, #28]	; (3118 <usb_d_ep_deinit+0x4c>)
    30fc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    30fe:	68bb      	ldr	r3, [r7, #8]
    3100:	22ff      	movs	r2, #255	; 0xff
    3102:	705a      	strb	r2, [r3, #1]
    3104:	e000      	b.n	3108 <usb_d_ep_deinit+0x3c>
		return;
    3106:	bf00      	nop
}
    3108:	3710      	adds	r7, #16
    310a:	46bd      	mov	sp, r7
    310c:	bd80      	pop	{r7, pc}
    310e:	bf00      	nop
    3110:	00002b49 	.word	0x00002b49
    3114:	200006d8 	.word	0x200006d8
    3118:	0000a475 	.word	0x0000a475

0000311c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    311c:	b580      	push	{r7, lr}
    311e:	b086      	sub	sp, #24
    3120:	af00      	add	r7, sp, #0
    3122:	4603      	mov	r3, r0
    3124:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3126:	79fb      	ldrb	r3, [r7, #7]
    3128:	4618      	mov	r0, r3
    312a:	4b15      	ldr	r3, [pc, #84]	; (3180 <usb_d_ep_enable+0x64>)
    312c:	4798      	blx	r3
    312e:	4603      	mov	r3, r0
    3130:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3132:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3136:	015b      	lsls	r3, r3, #5
    3138:	4a12      	ldr	r2, [pc, #72]	; (3184 <usb_d_ep_enable+0x68>)
    313a:	4413      	add	r3, r2
    313c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    313e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3142:	2b00      	cmp	r3, #0
    3144:	da02      	bge.n	314c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3146:	f06f 0311 	mvn.w	r3, #17
    314a:	e014      	b.n	3176 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    314c:	693b      	ldr	r3, [r7, #16]
    314e:	781b      	ldrb	r3, [r3, #0]
    3150:	2b00      	cmp	r3, #0
    3152:	d101      	bne.n	3158 <usb_d_ep_enable+0x3c>
    3154:	2202      	movs	r2, #2
    3156:	e000      	b.n	315a <usb_d_ep_enable+0x3e>
    3158:	2201      	movs	r2, #1
    315a:	693b      	ldr	r3, [r7, #16]
    315c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    315e:	79fb      	ldrb	r3, [r7, #7]
    3160:	4618      	mov	r0, r3
    3162:	4b09      	ldr	r3, [pc, #36]	; (3188 <usb_d_ep_enable+0x6c>)
    3164:	4798      	blx	r3
    3166:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3168:	68fb      	ldr	r3, [r7, #12]
    316a:	2b00      	cmp	r3, #0
    316c:	da02      	bge.n	3174 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    316e:	693b      	ldr	r3, [r7, #16]
    3170:	2200      	movs	r2, #0
    3172:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3174:	68fb      	ldr	r3, [r7, #12]
}
    3176:	4618      	mov	r0, r3
    3178:	3718      	adds	r7, #24
    317a:	46bd      	mov	sp, r7
    317c:	bd80      	pop	{r7, pc}
    317e:	bf00      	nop
    3180:	00002b49 	.word	0x00002b49
    3184:	200006d8 	.word	0x200006d8
    3188:	0000a559 	.word	0x0000a559

0000318c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    318c:	b590      	push	{r4, r7, lr}
    318e:	b08d      	sub	sp, #52	; 0x34
    3190:	af02      	add	r7, sp, #8
    3192:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3194:	687b      	ldr	r3, [r7, #4]
    3196:	7a1b      	ldrb	r3, [r3, #8]
    3198:	4618      	mov	r0, r3
    319a:	4b51      	ldr	r3, [pc, #324]	; (32e0 <usb_d_ep_transfer+0x154>)
    319c:	4798      	blx	r3
    319e:	4603      	mov	r3, r0
    31a0:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    31a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
    31a6:	015b      	lsls	r3, r3, #5
    31a8:	4a4e      	ldr	r2, [pc, #312]	; (32e4 <usb_d_ep_transfer+0x158>)
    31aa:	4413      	add	r3, r2
    31ac:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	7a1b      	ldrb	r3, [r3, #8]
    31b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    31b6:	2b00      	cmp	r3, #0
    31b8:	bf14      	ite	ne
    31ba:	2301      	movne	r3, #1
    31bc:	2300      	moveq	r3, #0
    31be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    31c2:	687b      	ldr	r3, [r7, #4]
    31c4:	7a5b      	ldrb	r3, [r3, #9]
    31c6:	2b00      	cmp	r3, #0
    31c8:	bf14      	ite	ne
    31ca:	2301      	movne	r3, #1
    31cc:	2300      	moveq	r3, #0
    31ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	685b      	ldr	r3, [r3, #4]
    31d6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    31d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    31dc:	2b00      	cmp	r3, #0
    31de:	da02      	bge.n	31e6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    31e0:	f06f 0311 	mvn.w	r3, #17
    31e4:	e077      	b.n	32d6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    31e6:	f107 0308 	add.w	r3, r7, #8
    31ea:	4618      	mov	r0, r3
    31ec:	4b3e      	ldr	r3, [pc, #248]	; (32e8 <usb_d_ep_transfer+0x15c>)
    31ee:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    31f0:	69bb      	ldr	r3, [r7, #24]
    31f2:	789b      	ldrb	r3, [r3, #2]
    31f4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    31f6:	7bfb      	ldrb	r3, [r7, #15]
    31f8:	b2db      	uxtb	r3, r3
    31fa:	2b01      	cmp	r3, #1
    31fc:	d10c      	bne.n	3218 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    31fe:	69bb      	ldr	r3, [r7, #24]
    3200:	2203      	movs	r2, #3
    3202:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3204:	f107 0308 	add.w	r3, r7, #8
    3208:	4618      	mov	r0, r3
    320a:	4b38      	ldr	r3, [pc, #224]	; (32ec <usb_d_ep_transfer+0x160>)
    320c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    320e:	69bb      	ldr	r3, [r7, #24]
    3210:	781b      	ldrb	r3, [r3, #0]
    3212:	2b00      	cmp	r3, #0
    3214:	d151      	bne.n	32ba <usb_d_ep_transfer+0x12e>
    3216:	e017      	b.n	3248 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3218:	f107 0308 	add.w	r3, r7, #8
    321c:	4618      	mov	r0, r3
    321e:	4b33      	ldr	r3, [pc, #204]	; (32ec <usb_d_ep_transfer+0x160>)
    3220:	4798      	blx	r3
		switch (state) {
    3222:	7bfb      	ldrb	r3, [r7, #15]
    3224:	b2db      	uxtb	r3, r3
    3226:	2b05      	cmp	r3, #5
    3228:	d004      	beq.n	3234 <usb_d_ep_transfer+0xa8>
    322a:	2b06      	cmp	r3, #6
    322c:	d004      	beq.n	3238 <usb_d_ep_transfer+0xac>
    322e:	2b00      	cmp	r3, #0
    3230:	d005      	beq.n	323e <usb_d_ep_transfer+0xb2>
    3232:	e007      	b.n	3244 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3234:	2302      	movs	r3, #2
    3236:	e04e      	b.n	32d6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3238:	f06f 030f 	mvn.w	r3, #15
    323c:	e04b      	b.n	32d6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    323e:	f06f 0312 	mvn.w	r3, #18
    3242:	e048      	b.n	32d6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3244:	2301      	movs	r3, #1
    3246:	e046      	b.n	32d6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3248:	69bb      	ldr	r3, [r7, #24]
    324a:	7c9b      	ldrb	r3, [r3, #18]
    324c:	b29a      	uxth	r2, r3
    324e:	69bb      	ldr	r3, [r7, #24]
    3250:	7cdb      	ldrb	r3, [r3, #19]
    3252:	b29b      	uxth	r3, r3
    3254:	021b      	lsls	r3, r3, #8
    3256:	b29b      	uxth	r3, r3
    3258:	4413      	add	r3, r2
    325a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    325c:	8afb      	ldrh	r3, [r7, #22]
    325e:	2b00      	cmp	r3, #0
    3260:	d10b      	bne.n	327a <usb_d_ep_transfer+0xee>
			dir                 = true;
    3262:	2301      	movs	r3, #1
    3264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3268:	2300      	movs	r3, #0
    326a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    326c:	2301      	movs	r3, #1
    326e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3272:	69bb      	ldr	r3, [r7, #24]
    3274:	2204      	movs	r2, #4
    3276:	709a      	strb	r2, [r3, #2]
    3278:	e01f      	b.n	32ba <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    327a:	69bb      	ldr	r3, [r7, #24]
    327c:	7b1b      	ldrb	r3, [r3, #12]
    327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3282:	2b00      	cmp	r3, #0
    3284:	bf14      	ite	ne
    3286:	2301      	movne	r3, #1
    3288:	2300      	moveq	r3, #0
    328a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    328e:	8afa      	ldrh	r2, [r7, #22]
    3290:	6a3b      	ldr	r3, [r7, #32]
    3292:	429a      	cmp	r2, r3
    3294:	d201      	bcs.n	329a <usb_d_ep_transfer+0x10e>
				len = req_len;
    3296:	8afb      	ldrh	r3, [r7, #22]
    3298:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    329a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    329e:	2b00      	cmp	r3, #0
    32a0:	d008      	beq.n	32b4 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    32a2:	8afa      	ldrh	r2, [r7, #22]
    32a4:	6a3b      	ldr	r3, [r7, #32]
    32a6:	429a      	cmp	r2, r3
    32a8:	bf8c      	ite	hi
    32aa:	2301      	movhi	r3, #1
    32ac:	2300      	movls	r3, #0
    32ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    32b2:	e002      	b.n	32ba <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    32b4:	2300      	movs	r3, #0
    32b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    32ba:	687b      	ldr	r3, [r7, #4]
    32bc:	7a18      	ldrb	r0, [r3, #8]
    32be:	687b      	ldr	r3, [r7, #4]
    32c0:	681a      	ldr	r2, [r3, #0]
    32c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    32c6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    32ca:	9300      	str	r3, [sp, #0]
    32cc:	6a3b      	ldr	r3, [r7, #32]
    32ce:	4c08      	ldr	r4, [pc, #32]	; (32f0 <usb_d_ep_transfer+0x164>)
    32d0:	47a0      	blx	r4
    32d2:	6138      	str	r0, [r7, #16]
	return rc;
    32d4:	693b      	ldr	r3, [r7, #16]
}
    32d6:	4618      	mov	r0, r3
    32d8:	372c      	adds	r7, #44	; 0x2c
    32da:	46bd      	mov	sp, r7
    32dc:	bd90      	pop	{r4, r7, pc}
    32de:	bf00      	nop
    32e0:	00002b49 	.word	0x00002b49
    32e4:	200006d8 	.word	0x200006d8
    32e8:	0000b4cd 	.word	0x0000b4cd
    32ec:	0000b4f3 	.word	0x0000b4f3
    32f0:	00002bc9 	.word	0x00002bc9

000032f4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    32f4:	b580      	push	{r7, lr}
    32f6:	b084      	sub	sp, #16
    32f8:	af00      	add	r7, sp, #0
    32fa:	4603      	mov	r3, r0
    32fc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    32fe:	79fb      	ldrb	r3, [r7, #7]
    3300:	4618      	mov	r0, r3
    3302:	4b0e      	ldr	r3, [pc, #56]	; (333c <usb_d_ep_abort+0x48>)
    3304:	4798      	blx	r3
    3306:	4603      	mov	r3, r0
    3308:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    330e:	015b      	lsls	r3, r3, #5
    3310:	4a0b      	ldr	r2, [pc, #44]	; (3340 <usb_d_ep_abort+0x4c>)
    3312:	4413      	add	r3, r2
    3314:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3316:	f997 300f 	ldrsb.w	r3, [r7, #15]
    331a:	2b00      	cmp	r3, #0
    331c:	db0a      	blt.n	3334 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    331e:	79fb      	ldrb	r3, [r7, #7]
    3320:	4618      	mov	r0, r3
    3322:	4b08      	ldr	r3, [pc, #32]	; (3344 <usb_d_ep_abort+0x50>)
    3324:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3326:	68bb      	ldr	r3, [r7, #8]
    3328:	2201      	movs	r2, #1
    332a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    332c:	68bb      	ldr	r3, [r7, #8]
    332e:	2204      	movs	r2, #4
    3330:	70da      	strb	r2, [r3, #3]
    3332:	e000      	b.n	3336 <usb_d_ep_abort+0x42>
		return;
    3334:	bf00      	nop
}
    3336:	3710      	adds	r7, #16
    3338:	46bd      	mov	sp, r7
    333a:	bd80      	pop	{r7, pc}
    333c:	00002b49 	.word	0x00002b49
    3340:	200006d8 	.word	0x200006d8
    3344:	0000acc5 	.word	0x0000acc5

00003348 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3348:	b580      	push	{r7, lr}
    334a:	b086      	sub	sp, #24
    334c:	af00      	add	r7, sp, #0
    334e:	4603      	mov	r3, r0
    3350:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3352:	79fb      	ldrb	r3, [r7, #7]
    3354:	4618      	mov	r0, r3
    3356:	4b1a      	ldr	r3, [pc, #104]	; (33c0 <_usb_d_ep_halt_clr+0x78>)
    3358:	4798      	blx	r3
    335a:	4603      	mov	r3, r0
    335c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    335e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3362:	015b      	lsls	r3, r3, #5
    3364:	4a17      	ldr	r2, [pc, #92]	; (33c4 <_usb_d_ep_halt_clr+0x7c>)
    3366:	4413      	add	r3, r2
    3368:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    336a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    336e:	2b00      	cmp	r3, #0
    3370:	da02      	bge.n	3378 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3372:	f06f 0311 	mvn.w	r3, #17
    3376:	e01f      	b.n	33b8 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3378:	79fb      	ldrb	r3, [r7, #7]
    337a:	2102      	movs	r1, #2
    337c:	4618      	mov	r0, r3
    337e:	4b12      	ldr	r3, [pc, #72]	; (33c8 <_usb_d_ep_halt_clr+0x80>)
    3380:	4798      	blx	r3
    3382:	4603      	mov	r3, r0
    3384:	2b00      	cmp	r3, #0
    3386:	d016      	beq.n	33b6 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3388:	79fb      	ldrb	r3, [r7, #7]
    338a:	2100      	movs	r1, #0
    338c:	4618      	mov	r0, r3
    338e:	4b0e      	ldr	r3, [pc, #56]	; (33c8 <_usb_d_ep_halt_clr+0x80>)
    3390:	4798      	blx	r3
    3392:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3394:	68fb      	ldr	r3, [r7, #12]
    3396:	2b00      	cmp	r3, #0
    3398:	da01      	bge.n	339e <_usb_d_ep_halt_clr+0x56>
			return rc;
    339a:	68fb      	ldr	r3, [r7, #12]
    339c:	e00c      	b.n	33b8 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    339e:	693b      	ldr	r3, [r7, #16]
    33a0:	2201      	movs	r2, #1
    33a2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    33a4:	693b      	ldr	r3, [r7, #16]
    33a6:	2203      	movs	r2, #3
    33a8:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    33aa:	693b      	ldr	r3, [r7, #16]
    33ac:	69db      	ldr	r3, [r3, #28]
    33ae:	79f8      	ldrb	r0, [r7, #7]
    33b0:	2200      	movs	r2, #0
    33b2:	2103      	movs	r1, #3
    33b4:	4798      	blx	r3
	}
	return ERR_NONE;
    33b6:	2300      	movs	r3, #0
}
    33b8:	4618      	mov	r0, r3
    33ba:	3718      	adds	r7, #24
    33bc:	46bd      	mov	sp, r7
    33be:	bd80      	pop	{r7, pc}
    33c0:	00002b49 	.word	0x00002b49
    33c4:	200006d8 	.word	0x200006d8
    33c8:	0000a8d1 	.word	0x0000a8d1

000033cc <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    33cc:	b580      	push	{r7, lr}
    33ce:	b082      	sub	sp, #8
    33d0:	af00      	add	r7, sp, #0
    33d2:	4603      	mov	r3, r0
    33d4:	460a      	mov	r2, r1
    33d6:	71fb      	strb	r3, [r7, #7]
    33d8:	4613      	mov	r3, r2
    33da:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    33dc:	79bb      	ldrb	r3, [r7, #6]
    33de:	2b00      	cmp	r3, #0
    33e0:	d105      	bne.n	33ee <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    33e2:	79fb      	ldrb	r3, [r7, #7]
    33e4:	4618      	mov	r0, r3
    33e6:	4b0c      	ldr	r3, [pc, #48]	; (3418 <usb_d_ep_halt+0x4c>)
    33e8:	4798      	blx	r3
    33ea:	4603      	mov	r3, r0
    33ec:	e00f      	b.n	340e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    33ee:	79bb      	ldrb	r3, [r7, #6]
    33f0:	2b01      	cmp	r3, #1
    33f2:	d106      	bne.n	3402 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    33f4:	79fb      	ldrb	r3, [r7, #7]
    33f6:	2101      	movs	r1, #1
    33f8:	4618      	mov	r0, r3
    33fa:	4b08      	ldr	r3, [pc, #32]	; (341c <usb_d_ep_halt+0x50>)
    33fc:	4798      	blx	r3
    33fe:	4603      	mov	r3, r0
    3400:	e005      	b.n	340e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3402:	79fb      	ldrb	r3, [r7, #7]
    3404:	2102      	movs	r1, #2
    3406:	4618      	mov	r0, r3
    3408:	4b04      	ldr	r3, [pc, #16]	; (341c <usb_d_ep_halt+0x50>)
    340a:	4798      	blx	r3
    340c:	4603      	mov	r3, r0
	}
}
    340e:	4618      	mov	r0, r3
    3410:	3708      	adds	r7, #8
    3412:	46bd      	mov	sp, r7
    3414:	bd80      	pop	{r7, pc}
    3416:	bf00      	nop
    3418:	00003349 	.word	0x00003349
    341c:	0000a8d1 	.word	0x0000a8d1

00003420 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3420:	b580      	push	{r7, lr}
    3422:	b086      	sub	sp, #24
    3424:	af00      	add	r7, sp, #0
    3426:	4603      	mov	r3, r0
    3428:	603a      	str	r2, [r7, #0]
    342a:	71fb      	strb	r3, [r7, #7]
    342c:	460b      	mov	r3, r1
    342e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3430:	79fb      	ldrb	r3, [r7, #7]
    3432:	4618      	mov	r0, r3
    3434:	4b16      	ldr	r3, [pc, #88]	; (3490 <usb_d_ep_register_callback+0x70>)
    3436:	4798      	blx	r3
    3438:	4603      	mov	r3, r0
    343a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    343c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3440:	015b      	lsls	r3, r3, #5
    3442:	4a14      	ldr	r2, [pc, #80]	; (3494 <usb_d_ep_register_callback+0x74>)
    3444:	4413      	add	r3, r2
    3446:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3448:	683b      	ldr	r3, [r7, #0]
    344a:	2b00      	cmp	r3, #0
    344c:	d001      	beq.n	3452 <usb_d_ep_register_callback+0x32>
    344e:	683b      	ldr	r3, [r7, #0]
    3450:	e000      	b.n	3454 <usb_d_ep_register_callback+0x34>
    3452:	4b11      	ldr	r3, [pc, #68]	; (3498 <usb_d_ep_register_callback+0x78>)
    3454:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3456:	f997 3017 	ldrsb.w	r3, [r7, #23]
    345a:	2b00      	cmp	r3, #0
    345c:	db13      	blt.n	3486 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    345e:	79bb      	ldrb	r3, [r7, #6]
    3460:	2b01      	cmp	r3, #1
    3462:	d008      	beq.n	3476 <usb_d_ep_register_callback+0x56>
    3464:	2b02      	cmp	r3, #2
    3466:	d00a      	beq.n	347e <usb_d_ep_register_callback+0x5e>
    3468:	2b00      	cmp	r3, #0
    346a:	d000      	beq.n	346e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    346c:	e00c      	b.n	3488 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    346e:	693b      	ldr	r3, [r7, #16]
    3470:	68fa      	ldr	r2, [r7, #12]
    3472:	615a      	str	r2, [r3, #20]
		break;
    3474:	e008      	b.n	3488 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3476:	693b      	ldr	r3, [r7, #16]
    3478:	68fa      	ldr	r2, [r7, #12]
    347a:	619a      	str	r2, [r3, #24]
		break;
    347c:	e004      	b.n	3488 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    347e:	693b      	ldr	r3, [r7, #16]
    3480:	68fa      	ldr	r2, [r7, #12]
    3482:	61da      	str	r2, [r3, #28]
		break;
    3484:	e000      	b.n	3488 <usb_d_ep_register_callback+0x68>
		return;
    3486:	bf00      	nop
	}
}
    3488:	3718      	adds	r7, #24
    348a:	46bd      	mov	sp, r7
    348c:	bd80      	pop	{r7, pc}
    348e:	bf00      	nop
    3490:	00002b49 	.word	0x00002b49
    3494:	200006d8 	.word	0x200006d8
    3498:	00002c1d 	.word	0x00002c1d

0000349c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    349c:	b480      	push	{r7}
    349e:	b085      	sub	sp, #20
    34a0:	af00      	add	r7, sp, #0
    34a2:	4603      	mov	r3, r0
    34a4:	60b9      	str	r1, [r7, #8]
    34a6:	607a      	str	r2, [r7, #4]
    34a8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    34aa:	7bfb      	ldrb	r3, [r7, #15]
    34ac:	f083 0301 	eor.w	r3, r3, #1
    34b0:	b2db      	uxtb	r3, r3
    34b2:	2b00      	cmp	r3, #0
    34b4:	d000      	beq.n	34b8 <assert+0x1c>
		__asm("BKPT #0");
    34b6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    34b8:	bf00      	nop
    34ba:	3714      	adds	r7, #20
    34bc:	46bd      	mov	sp, r7
    34be:	f85d 7b04 	ldr.w	r7, [sp], #4
    34c2:	4770      	bx	lr

000034c4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    34c4:	b480      	push	{r7}
    34c6:	b085      	sub	sp, #20
    34c8:	af00      	add	r7, sp, #0
    34ca:	6078      	str	r0, [r7, #4]
    34cc:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	681b      	ldr	r3, [r3, #0]
    34d2:	60fb      	str	r3, [r7, #12]
    34d4:	e008      	b.n	34e8 <is_list_element+0x24>
		if (it == element) {
    34d6:	68fa      	ldr	r2, [r7, #12]
    34d8:	683b      	ldr	r3, [r7, #0]
    34da:	429a      	cmp	r2, r3
    34dc:	d101      	bne.n	34e2 <is_list_element+0x1e>
			return true;
    34de:	2301      	movs	r3, #1
    34e0:	e006      	b.n	34f0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    34e2:	68fb      	ldr	r3, [r7, #12]
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	60fb      	str	r3, [r7, #12]
    34e8:	68fb      	ldr	r3, [r7, #12]
    34ea:	2b00      	cmp	r3, #0
    34ec:	d1f3      	bne.n	34d6 <is_list_element+0x12>
		}
	}

	return false;
    34ee:	2300      	movs	r3, #0
}
    34f0:	4618      	mov	r0, r3
    34f2:	3714      	adds	r7, #20
    34f4:	46bd      	mov	sp, r7
    34f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    34fa:	4770      	bx	lr

000034fc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    34fc:	b580      	push	{r7, lr}
    34fe:	b082      	sub	sp, #8
    3500:	af00      	add	r7, sp, #0
    3502:	6078      	str	r0, [r7, #4]
    3504:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3506:	6839      	ldr	r1, [r7, #0]
    3508:	6878      	ldr	r0, [r7, #4]
    350a:	4b0f      	ldr	r3, [pc, #60]	; (3548 <list_insert_as_head+0x4c>)
    350c:	4798      	blx	r3
    350e:	4603      	mov	r3, r0
    3510:	2b00      	cmp	r3, #0
    3512:	bf14      	ite	ne
    3514:	2301      	movne	r3, #1
    3516:	2300      	moveq	r3, #0
    3518:	b2db      	uxtb	r3, r3
    351a:	f083 0301 	eor.w	r3, r3, #1
    351e:	b2db      	uxtb	r3, r3
    3520:	f003 0301 	and.w	r3, r3, #1
    3524:	b2db      	uxtb	r3, r3
    3526:	2239      	movs	r2, #57	; 0x39
    3528:	4908      	ldr	r1, [pc, #32]	; (354c <list_insert_as_head+0x50>)
    352a:	4618      	mov	r0, r3
    352c:	4b08      	ldr	r3, [pc, #32]	; (3550 <list_insert_as_head+0x54>)
    352e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3530:	687b      	ldr	r3, [r7, #4]
    3532:	681a      	ldr	r2, [r3, #0]
    3534:	683b      	ldr	r3, [r7, #0]
    3536:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	683a      	ldr	r2, [r7, #0]
    353c:	601a      	str	r2, [r3, #0]
}
    353e:	bf00      	nop
    3540:	3708      	adds	r7, #8
    3542:	46bd      	mov	sp, r7
    3544:	bd80      	pop	{r7, pc}
    3546:	bf00      	nop
    3548:	000034c5 	.word	0x000034c5
    354c:	0000ee18 	.word	0x0000ee18
    3550:	0000349d 	.word	0x0000349d

00003554 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3554:	b480      	push	{r7}
    3556:	b083      	sub	sp, #12
    3558:	af00      	add	r7, sp, #0
    355a:	6078      	str	r0, [r7, #4]
    355c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	681a      	ldr	r2, [r3, #0]
    3562:	683b      	ldr	r3, [r7, #0]
    3564:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3566:	687b      	ldr	r3, [r7, #4]
    3568:	683a      	ldr	r2, [r7, #0]
    356a:	601a      	str	r2, [r3, #0]
}
    356c:	bf00      	nop
    356e:	370c      	adds	r7, #12
    3570:	46bd      	mov	sp, r7
    3572:	f85d 7b04 	ldr.w	r7, [sp], #4
    3576:	4770      	bx	lr

00003578 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3578:	b580      	push	{r7, lr}
    357a:	b084      	sub	sp, #16
    357c:	af00      	add	r7, sp, #0
    357e:	6078      	str	r0, [r7, #4]
    3580:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3582:	687b      	ldr	r3, [r7, #4]
    3584:	681b      	ldr	r3, [r3, #0]
    3586:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3588:	6839      	ldr	r1, [r7, #0]
    358a:	6878      	ldr	r0, [r7, #4]
    358c:	4b16      	ldr	r3, [pc, #88]	; (35e8 <list_insert_at_end+0x70>)
    358e:	4798      	blx	r3
    3590:	4603      	mov	r3, r0
    3592:	2b00      	cmp	r3, #0
    3594:	bf14      	ite	ne
    3596:	2301      	movne	r3, #1
    3598:	2300      	moveq	r3, #0
    359a:	b2db      	uxtb	r3, r3
    359c:	f083 0301 	eor.w	r3, r3, #1
    35a0:	b2db      	uxtb	r3, r3
    35a2:	f003 0301 	and.w	r3, r3, #1
    35a6:	b2db      	uxtb	r3, r3
    35a8:	224f      	movs	r2, #79	; 0x4f
    35aa:	4910      	ldr	r1, [pc, #64]	; (35ec <list_insert_at_end+0x74>)
    35ac:	4618      	mov	r0, r3
    35ae:	4b10      	ldr	r3, [pc, #64]	; (35f0 <list_insert_at_end+0x78>)
    35b0:	4798      	blx	r3

	if (!list->head) {
    35b2:	687b      	ldr	r3, [r7, #4]
    35b4:	681b      	ldr	r3, [r3, #0]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d109      	bne.n	35ce <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	683a      	ldr	r2, [r7, #0]
    35be:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    35c0:	683b      	ldr	r3, [r7, #0]
    35c2:	2200      	movs	r2, #0
    35c4:	601a      	str	r2, [r3, #0]
		return;
    35c6:	e00c      	b.n	35e2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    35c8:	68fb      	ldr	r3, [r7, #12]
    35ca:	681b      	ldr	r3, [r3, #0]
    35cc:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    35ce:	68fb      	ldr	r3, [r7, #12]
    35d0:	681b      	ldr	r3, [r3, #0]
    35d2:	2b00      	cmp	r3, #0
    35d4:	d1f8      	bne.n	35c8 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    35d6:	68fb      	ldr	r3, [r7, #12]
    35d8:	683a      	ldr	r2, [r7, #0]
    35da:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    35dc:	683b      	ldr	r3, [r7, #0]
    35de:	2200      	movs	r2, #0
    35e0:	601a      	str	r2, [r3, #0]
}
    35e2:	3710      	adds	r7, #16
    35e4:	46bd      	mov	sp, r7
    35e6:	bd80      	pop	{r7, pc}
    35e8:	000034c5 	.word	0x000034c5
    35ec:	0000ee18 	.word	0x0000ee18
    35f0:	0000349d 	.word	0x0000349d

000035f4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    35f4:	b480      	push	{r7}
    35f6:	b085      	sub	sp, #20
    35f8:	af00      	add	r7, sp, #0
    35fa:	6078      	str	r0, [r7, #4]
	if (list->head) {
    35fc:	687b      	ldr	r3, [r7, #4]
    35fe:	681b      	ldr	r3, [r3, #0]
    3600:	2b00      	cmp	r3, #0
    3602:	d009      	beq.n	3618 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	681b      	ldr	r3, [r3, #0]
    3608:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    360a:	687b      	ldr	r3, [r7, #4]
    360c:	681b      	ldr	r3, [r3, #0]
    360e:	681a      	ldr	r2, [r3, #0]
    3610:	687b      	ldr	r3, [r7, #4]
    3612:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3614:	68fb      	ldr	r3, [r7, #12]
    3616:	e000      	b.n	361a <list_remove_head+0x26>
	}

	return NULL;
    3618:	2300      	movs	r3, #0
}
    361a:	4618      	mov	r0, r3
    361c:	3714      	adds	r7, #20
    361e:	46bd      	mov	sp, r7
    3620:	f85d 7b04 	ldr.w	r7, [sp], #4
    3624:	4770      	bx	lr

00003626 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3626:	b480      	push	{r7}
    3628:	b085      	sub	sp, #20
    362a:	af00      	add	r7, sp, #0
    362c:	6078      	str	r0, [r7, #4]
    362e:	6039      	str	r1, [r7, #0]
	if (!element) {
    3630:	683b      	ldr	r3, [r7, #0]
    3632:	2b00      	cmp	r3, #0
    3634:	d101      	bne.n	363a <list_delete_element+0x14>
		return false;
    3636:	2300      	movs	r3, #0
    3638:	e024      	b.n	3684 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	681a      	ldr	r2, [r3, #0]
    363e:	683b      	ldr	r3, [r7, #0]
    3640:	429a      	cmp	r2, r3
    3642:	d106      	bne.n	3652 <list_delete_element+0x2c>
		list->head = list->head->next;
    3644:	687b      	ldr	r3, [r7, #4]
    3646:	681b      	ldr	r3, [r3, #0]
    3648:	681a      	ldr	r2, [r3, #0]
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	601a      	str	r2, [r3, #0]
		return true;
    364e:	2301      	movs	r3, #1
    3650:	e018      	b.n	3684 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3652:	687b      	ldr	r3, [r7, #4]
    3654:	681b      	ldr	r3, [r3, #0]
    3656:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3658:	e002      	b.n	3660 <list_delete_element+0x3a>
			it = it->next;
    365a:	68fb      	ldr	r3, [r7, #12]
    365c:	681b      	ldr	r3, [r3, #0]
    365e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3660:	68fb      	ldr	r3, [r7, #12]
    3662:	2b00      	cmp	r3, #0
    3664:	d004      	beq.n	3670 <list_delete_element+0x4a>
    3666:	68fb      	ldr	r3, [r7, #12]
    3668:	681a      	ldr	r2, [r3, #0]
    366a:	683b      	ldr	r3, [r7, #0]
    366c:	429a      	cmp	r2, r3
    366e:	d1f4      	bne.n	365a <list_delete_element+0x34>
		}
		if (it) {
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	2b00      	cmp	r3, #0
    3674:	d005      	beq.n	3682 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3676:	683b      	ldr	r3, [r7, #0]
    3678:	681a      	ldr	r2, [r3, #0]
    367a:	68fb      	ldr	r3, [r7, #12]
    367c:	601a      	str	r2, [r3, #0]
			return true;
    367e:	2301      	movs	r3, #1
    3680:	e000      	b.n	3684 <list_delete_element+0x5e>
		}
	}

	return false;
    3682:	2300      	movs	r3, #0
}
    3684:	4618      	mov	r0, r3
    3686:	3714      	adds	r7, #20
    3688:	46bd      	mov	sp, r7
    368a:	f85d 7b04 	ldr.w	r7, [sp], #4
    368e:	4770      	bx	lr

00003690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3690:	b480      	push	{r7}
    3692:	b083      	sub	sp, #12
    3694:	af00      	add	r7, sp, #0
    3696:	4603      	mov	r3, r0
    3698:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    369a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    369e:	2b00      	cmp	r3, #0
    36a0:	db0b      	blt.n	36ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36a2:	4909      	ldr	r1, [pc, #36]	; (36c8 <__NVIC_EnableIRQ+0x38>)
    36a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    36a8:	095b      	lsrs	r3, r3, #5
    36aa:	88fa      	ldrh	r2, [r7, #6]
    36ac:	f002 021f 	and.w	r2, r2, #31
    36b0:	2001      	movs	r0, #1
    36b2:	fa00 f202 	lsl.w	r2, r0, r2
    36b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    36ba:	bf00      	nop
    36bc:	370c      	adds	r7, #12
    36be:	46bd      	mov	sp, r7
    36c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    36c4:	4770      	bx	lr
    36c6:	bf00      	nop
    36c8:	e000e100 	.word	0xe000e100

000036cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    36cc:	b480      	push	{r7}
    36ce:	b083      	sub	sp, #12
    36d0:	af00      	add	r7, sp, #0
    36d2:	4603      	mov	r3, r0
    36d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    36d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    36da:	2b00      	cmp	r3, #0
    36dc:	db10      	blt.n	3700 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36de:	490b      	ldr	r1, [pc, #44]	; (370c <__NVIC_DisableIRQ+0x40>)
    36e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    36e4:	095b      	lsrs	r3, r3, #5
    36e6:	88fa      	ldrh	r2, [r7, #6]
    36e8:	f002 021f 	and.w	r2, r2, #31
    36ec:	2001      	movs	r0, #1
    36ee:	fa00 f202 	lsl.w	r2, r0, r2
    36f2:	3320      	adds	r3, #32
    36f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    36f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36fc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3700:	bf00      	nop
    3702:	370c      	adds	r7, #12
    3704:	46bd      	mov	sp, r7
    3706:	f85d 7b04 	ldr.w	r7, [sp], #4
    370a:	4770      	bx	lr
    370c:	e000e100 	.word	0xe000e100

00003710 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3710:	b480      	push	{r7}
    3712:	b083      	sub	sp, #12
    3714:	af00      	add	r7, sp, #0
    3716:	4603      	mov	r3, r0
    3718:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    371a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    371e:	2b00      	cmp	r3, #0
    3720:	db0c      	blt.n	373c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3722:	4909      	ldr	r1, [pc, #36]	; (3748 <__NVIC_ClearPendingIRQ+0x38>)
    3724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3728:	095b      	lsrs	r3, r3, #5
    372a:	88fa      	ldrh	r2, [r7, #6]
    372c:	f002 021f 	and.w	r2, r2, #31
    3730:	2001      	movs	r0, #1
    3732:	fa00 f202 	lsl.w	r2, r0, r2
    3736:	3360      	adds	r3, #96	; 0x60
    3738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    373c:	bf00      	nop
    373e:	370c      	adds	r7, #12
    3740:	46bd      	mov	sp, r7
    3742:	f85d 7b04 	ldr.w	r7, [sp], #4
    3746:	4770      	bx	lr
    3748:	e000e100 	.word	0xe000e100

0000374c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    374c:	b480      	push	{r7}
    374e:	b083      	sub	sp, #12
    3750:	af00      	add	r7, sp, #0
    3752:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3758:	095b      	lsrs	r3, r3, #5
    375a:	f003 0301 	and.w	r3, r3, #1
    375e:	2b00      	cmp	r3, #0
    3760:	bf14      	ite	ne
    3762:	2301      	movne	r3, #1
    3764:	2300      	moveq	r3, #0
    3766:	b2db      	uxtb	r3, r3
}
    3768:	4618      	mov	r0, r3
    376a:	370c      	adds	r7, #12
    376c:	46bd      	mov	sp, r7
    376e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3772:	4770      	bx	lr

00003774 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3774:	b480      	push	{r7}
    3776:	b083      	sub	sp, #12
    3778:	af00      	add	r7, sp, #0
    377a:	6078      	str	r0, [r7, #4]
    377c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    377e:	687b      	ldr	r3, [r7, #4]
    3780:	683a      	ldr	r2, [r7, #0]
    3782:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3784:	bf00      	nop
    3786:	370c      	adds	r7, #12
    3788:	46bd      	mov	sp, r7
    378a:	f85d 7b04 	ldr.w	r7, [sp], #4
    378e:	4770      	bx	lr

00003790 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3790:	b480      	push	{r7}
    3792:	b083      	sub	sp, #12
    3794:	af00      	add	r7, sp, #0
    3796:	6078      	str	r0, [r7, #4]
    3798:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    379a:	687b      	ldr	r3, [r7, #4]
    379c:	683a      	ldr	r2, [r7, #0]
    379e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    37a0:	bf00      	nop
    37a2:	370c      	adds	r7, #12
    37a4:	46bd      	mov	sp, r7
    37a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    37aa:	4770      	bx	lr

000037ac <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    37ac:	b480      	push	{r7}
    37ae:	b083      	sub	sp, #12
    37b0:	af00      	add	r7, sp, #0
    37b2:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    37b4:	687b      	ldr	r3, [r7, #4]
    37b6:	699b      	ldr	r3, [r3, #24]
    37b8:	f043 0201 	orr.w	r2, r3, #1
    37bc:	687b      	ldr	r3, [r7, #4]
    37be:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    37c0:	bf00      	nop
    37c2:	370c      	adds	r7, #12
    37c4:	46bd      	mov	sp, r7
    37c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    37ca:	4770      	bx	lr

000037cc <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    37cc:	b480      	push	{r7}
    37ce:	b085      	sub	sp, #20
    37d0:	af00      	add	r7, sp, #0
    37d2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    37d4:	687b      	ldr	r3, [r7, #4]
    37d6:	699b      	ldr	r3, [r3, #24]
    37d8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    37da:	68fb      	ldr	r3, [r7, #12]
    37dc:	f003 0301 	and.w	r3, r3, #1
    37e0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    37e2:	68fb      	ldr	r3, [r7, #12]
    37e4:	2b00      	cmp	r3, #0
    37e6:	bf14      	ite	ne
    37e8:	2301      	movne	r3, #1
    37ea:	2300      	moveq	r3, #0
    37ec:	b2db      	uxtb	r3, r3
}
    37ee:	4618      	mov	r0, r3
    37f0:	3714      	adds	r7, #20
    37f2:	46bd      	mov	sp, r7
    37f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    37f8:	4770      	bx	lr

000037fa <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    37fa:	b480      	push	{r7}
    37fc:	b083      	sub	sp, #12
    37fe:	af00      	add	r7, sp, #0
    3800:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3802:	687b      	ldr	r3, [r7, #4]
    3804:	699b      	ldr	r3, [r3, #24]
    3806:	f023 0201 	bic.w	r2, r3, #1
    380a:	687b      	ldr	r3, [r7, #4]
    380c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    380e:	bf00      	nop
    3810:	370c      	adds	r7, #12
    3812:	46bd      	mov	sp, r7
    3814:	f85d 7b04 	ldr.w	r7, [sp], #4
    3818:	4770      	bx	lr

0000381a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    381a:	b480      	push	{r7}
    381c:	b083      	sub	sp, #12
    381e:	af00      	add	r7, sp, #0
    3820:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3822:	687b      	ldr	r3, [r7, #4]
    3824:	699b      	ldr	r3, [r3, #24]
    3826:	f043 0202 	orr.w	r2, r3, #2
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    382e:	bf00      	nop
    3830:	370c      	adds	r7, #12
    3832:	46bd      	mov	sp, r7
    3834:	f85d 7b04 	ldr.w	r7, [sp], #4
    3838:	4770      	bx	lr

0000383a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    383a:	b480      	push	{r7}
    383c:	b083      	sub	sp, #12
    383e:	af00      	add	r7, sp, #0
    3840:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	699b      	ldr	r3, [r3, #24]
    3846:	f023 0202 	bic.w	r2, r3, #2
    384a:	687b      	ldr	r3, [r7, #4]
    384c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    384e:	bf00      	nop
    3850:	370c      	adds	r7, #12
    3852:	46bd      	mov	sp, r7
    3854:	f85d 7b04 	ldr.w	r7, [sp], #4
    3858:	4770      	bx	lr

0000385a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    385a:	b480      	push	{r7}
    385c:	b083      	sub	sp, #12
    385e:	af00      	add	r7, sp, #0
    3860:	6078      	str	r0, [r7, #4]
    3862:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3864:	687b      	ldr	r3, [r7, #4]
    3866:	699a      	ldr	r2, [r3, #24]
    3868:	683b      	ldr	r3, [r7, #0]
    386a:	431a      	orrs	r2, r3
    386c:	687b      	ldr	r3, [r7, #4]
    386e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3870:	bf00      	nop
    3872:	370c      	adds	r7, #12
    3874:	46bd      	mov	sp, r7
    3876:	f85d 7b04 	ldr.w	r7, [sp], #4
    387a:	4770      	bx	lr

0000387c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    387c:	b480      	push	{r7}
    387e:	b083      	sub	sp, #12
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
    3884:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3886:	687b      	ldr	r3, [r7, #4]
    3888:	683a      	ldr	r2, [r7, #0]
    388a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    388c:	bf00      	nop
    388e:	370c      	adds	r7, #12
    3890:	46bd      	mov	sp, r7
    3892:	f85d 7b04 	ldr.w	r7, [sp], #4
    3896:	4770      	bx	lr

00003898 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3898:	b480      	push	{r7}
    389a:	b083      	sub	sp, #12
    389c:	af00      	add	r7, sp, #0
    389e:	6078      	str	r0, [r7, #4]
    38a0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    38a2:	687b      	ldr	r3, [r7, #4]
    38a4:	683a      	ldr	r2, [r7, #0]
    38a6:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    38a8:	bf00      	nop
    38aa:	370c      	adds	r7, #12
    38ac:	46bd      	mov	sp, r7
    38ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    38b2:	4770      	bx	lr

000038b4 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    38b4:	b480      	push	{r7}
    38b6:	b083      	sub	sp, #12
    38b8:	af00      	add	r7, sp, #0
    38ba:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    38bc:	687b      	ldr	r3, [r7, #4]
    38be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    38c0:	4618      	mov	r0, r3
    38c2:	370c      	adds	r7, #12
    38c4:	46bd      	mov	sp, r7
    38c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    38ca:	4770      	bx	lr

000038cc <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    38cc:	b480      	push	{r7}
    38ce:	b083      	sub	sp, #12
    38d0:	af00      	add	r7, sp, #0
    38d2:	6078      	str	r0, [r7, #4]
    38d4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    38d6:	687b      	ldr	r3, [r7, #4]
    38d8:	683a      	ldr	r2, [r7, #0]
    38da:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    38dc:	bf00      	nop
    38de:	370c      	adds	r7, #12
    38e0:	46bd      	mov	sp, r7
    38e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    38e6:	4770      	bx	lr

000038e8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    38e8:	b480      	push	{r7}
    38ea:	b083      	sub	sp, #12
    38ec:	af00      	add	r7, sp, #0
    38ee:	6078      	str	r0, [r7, #4]
    38f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    38f2:	687b      	ldr	r3, [r7, #4]
    38f4:	683a      	ldr	r2, [r7, #0]
    38f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    38fa:	bf00      	nop
    38fc:	370c      	adds	r7, #12
    38fe:	46bd      	mov	sp, r7
    3900:	f85d 7b04 	ldr.w	r7, [sp], #4
    3904:	4770      	bx	lr

00003906 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3906:	b480      	push	{r7}
    3908:	b083      	sub	sp, #12
    390a:	af00      	add	r7, sp, #0
    390c:	6078      	str	r0, [r7, #4]
    390e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3910:	687b      	ldr	r3, [r7, #4]
    3912:	683a      	ldr	r2, [r7, #0]
    3914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3918:	bf00      	nop
    391a:	370c      	adds	r7, #12
    391c:	46bd      	mov	sp, r7
    391e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3922:	4770      	bx	lr

00003924 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3924:	b480      	push	{r7}
    3926:	b083      	sub	sp, #12
    3928:	af00      	add	r7, sp, #0
    392a:	6078      	str	r0, [r7, #4]
    392c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    392e:	687b      	ldr	r3, [r7, #4]
    3930:	683a      	ldr	r2, [r7, #0]
    3932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3936:	bf00      	nop
    3938:	370c      	adds	r7, #12
    393a:	46bd      	mov	sp, r7
    393c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3940:	4770      	bx	lr

00003942 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3942:	b480      	push	{r7}
    3944:	b083      	sub	sp, #12
    3946:	af00      	add	r7, sp, #0
    3948:	6078      	str	r0, [r7, #4]
    394a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    394c:	687b      	ldr	r3, [r7, #4]
    394e:	683a      	ldr	r2, [r7, #0]
    3950:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3954:	bf00      	nop
    3956:	370c      	adds	r7, #12
    3958:	46bd      	mov	sp, r7
    395a:	f85d 7b04 	ldr.w	r7, [sp], #4
    395e:	4770      	bx	lr

00003960 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3960:	b480      	push	{r7}
    3962:	b083      	sub	sp, #12
    3964:	af00      	add	r7, sp, #0
    3966:	6078      	str	r0, [r7, #4]
    3968:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	683a      	ldr	r2, [r7, #0]
    396e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3972:	bf00      	nop
    3974:	370c      	adds	r7, #12
    3976:	46bd      	mov	sp, r7
    3978:	f85d 7b04 	ldr.w	r7, [sp], #4
    397c:	4770      	bx	lr

0000397e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    397e:	b480      	push	{r7}
    3980:	b083      	sub	sp, #12
    3982:	af00      	add	r7, sp, #0
    3984:	6078      	str	r0, [r7, #4]
    3986:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	683a      	ldr	r2, [r7, #0]
    398c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3990:	bf00      	nop
    3992:	370c      	adds	r7, #12
    3994:	46bd      	mov	sp, r7
    3996:	f85d 7b04 	ldr.w	r7, [sp], #4
    399a:	4770      	bx	lr

0000399c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    399c:	b480      	push	{r7}
    399e:	b083      	sub	sp, #12
    39a0:	af00      	add	r7, sp, #0
    39a2:	6078      	str	r0, [r7, #4]
    39a4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    39a6:	687b      	ldr	r3, [r7, #4]
    39a8:	683a      	ldr	r2, [r7, #0]
    39aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    39ae:	bf00      	nop
    39b0:	370c      	adds	r7, #12
    39b2:	46bd      	mov	sp, r7
    39b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    39b8:	4770      	bx	lr

000039ba <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    39ba:	b480      	push	{r7}
    39bc:	b083      	sub	sp, #12
    39be:	af00      	add	r7, sp, #0
    39c0:	6078      	str	r0, [r7, #4]
    39c2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	683a      	ldr	r2, [r7, #0]
    39c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    39cc:	bf00      	nop
    39ce:	370c      	adds	r7, #12
    39d0:	46bd      	mov	sp, r7
    39d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    39d6:	4770      	bx	lr

000039d8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    39d8:	b480      	push	{r7}
    39da:	b083      	sub	sp, #12
    39dc:	af00      	add	r7, sp, #0
    39de:	6078      	str	r0, [r7, #4]
    39e0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	683a      	ldr	r2, [r7, #0]
    39e6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    39ea:	bf00      	nop
    39ec:	370c      	adds	r7, #12
    39ee:	46bd      	mov	sp, r7
    39f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    39f4:	4770      	bx	lr
	...

000039f8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    39f8:	b580      	push	{r7, lr}
    39fa:	b082      	sub	sp, #8
    39fc:	af00      	add	r7, sp, #0
    39fe:	6078      	str	r0, [r7, #4]
    3a00:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3a02:	687b      	ldr	r3, [r7, #4]
    3a04:	683a      	ldr	r2, [r7, #0]
    3a06:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3a08:	687b      	ldr	r3, [r7, #4]
    3a0a:	681b      	ldr	r3, [r3, #0]
    3a0c:	4618      	mov	r0, r3
    3a0e:	4b55      	ldr	r3, [pc, #340]	; (3b64 <_can_async_init+0x16c>)
    3a10:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3a12:	bf00      	nop
    3a14:	687b      	ldr	r3, [r7, #4]
    3a16:	681b      	ldr	r3, [r3, #0]
    3a18:	4618      	mov	r0, r3
    3a1a:	4b53      	ldr	r3, [pc, #332]	; (3b68 <_can_async_init+0x170>)
    3a1c:	4798      	blx	r3
    3a1e:	4603      	mov	r3, r0
    3a20:	f083 0301 	eor.w	r3, r3, #1
    3a24:	b2db      	uxtb	r3, r3
    3a26:	2b00      	cmp	r3, #0
    3a28:	d1f4      	bne.n	3a14 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	681b      	ldr	r3, [r3, #0]
    3a2e:	4618      	mov	r0, r3
    3a30:	4b4e      	ldr	r3, [pc, #312]	; (3b6c <_can_async_init+0x174>)
    3a32:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3a34:	683b      	ldr	r3, [r7, #0]
    3a36:	4a4e      	ldr	r2, [pc, #312]	; (3b70 <_can_async_init+0x178>)
    3a38:	4293      	cmp	r3, r2
    3a3a:	d17a      	bne.n	3b32 <_can_async_init+0x13a>
		_can1_dev    = dev;
    3a3c:	4a4d      	ldr	r2, [pc, #308]	; (3b74 <_can_async_init+0x17c>)
    3a3e:	687b      	ldr	r3, [r7, #4]
    3a40:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3a42:	687b      	ldr	r3, [r7, #4]
    3a44:	4a4c      	ldr	r2, [pc, #304]	; (3b78 <_can_async_init+0x180>)
    3a46:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	681b      	ldr	r3, [r3, #0]
    3a4c:	f44f 7140 	mov.w	r1, #768	; 0x300
    3a50:	4618      	mov	r0, r3
    3a52:	4b4a      	ldr	r3, [pc, #296]	; (3b7c <_can_async_init+0x184>)
    3a54:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3a56:	687b      	ldr	r3, [r7, #4]
    3a58:	681b      	ldr	r3, [r3, #0]
    3a5a:	2102      	movs	r1, #2
    3a5c:	4618      	mov	r0, r3
    3a5e:	4b48      	ldr	r3, [pc, #288]	; (3b80 <_can_async_init+0x188>)
    3a60:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3a62:	687b      	ldr	r3, [r7, #4]
    3a64:	681b      	ldr	r3, [r3, #0]
    3a66:	4947      	ldr	r1, [pc, #284]	; (3b84 <_can_async_init+0x18c>)
    3a68:	4618      	mov	r0, r3
    3a6a:	4b47      	ldr	r3, [pc, #284]	; (3b88 <_can_async_init+0x190>)
    3a6c:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3a6e:	687b      	ldr	r3, [r7, #4]
    3a70:	681b      	ldr	r3, [r3, #0]
    3a72:	4946      	ldr	r1, [pc, #280]	; (3b8c <_can_async_init+0x194>)
    3a74:	4618      	mov	r0, r3
    3a76:	4b46      	ldr	r3, [pc, #280]	; (3b90 <_can_async_init+0x198>)
    3a78:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3a7a:	687b      	ldr	r3, [r7, #4]
    3a7c:	681a      	ldr	r2, [r3, #0]
    3a7e:	4b45      	ldr	r3, [pc, #276]	; (3b94 <_can_async_init+0x19c>)
    3a80:	b29b      	uxth	r3, r3
    3a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3a8a:	4619      	mov	r1, r3
    3a8c:	4610      	mov	r0, r2
    3a8e:	4b42      	ldr	r3, [pc, #264]	; (3b98 <_can_async_init+0x1a0>)
    3a90:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3a92:	687b      	ldr	r3, [r7, #4]
    3a94:	681b      	ldr	r3, [r3, #0]
    3a96:	2107      	movs	r1, #7
    3a98:	4618      	mov	r0, r3
    3a9a:	4b40      	ldr	r3, [pc, #256]	; (3b9c <_can_async_init+0x1a4>)
    3a9c:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	681b      	ldr	r3, [r3, #0]
    3aa2:	2107      	movs	r1, #7
    3aa4:	4618      	mov	r0, r3
    3aa6:	4b3e      	ldr	r3, [pc, #248]	; (3ba0 <_can_async_init+0x1a8>)
    3aa8:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	681a      	ldr	r2, [r3, #0]
    3aae:	4b3d      	ldr	r3, [pc, #244]	; (3ba4 <_can_async_init+0x1ac>)
    3ab0:	b29b      	uxth	r3, r3
    3ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3ab6:	4619      	mov	r1, r3
    3ab8:	4610      	mov	r0, r2
    3aba:	4b3b      	ldr	r3, [pc, #236]	; (3ba8 <_can_async_init+0x1b0>)
    3abc:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	681a      	ldr	r2, [r3, #0]
    3ac2:	4b3a      	ldr	r3, [pc, #232]	; (3bac <_can_async_init+0x1b4>)
    3ac4:	b29b      	uxth	r3, r3
    3ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3aca:	4619      	mov	r1, r3
    3acc:	4610      	mov	r0, r2
    3ace:	4b38      	ldr	r3, [pc, #224]	; (3bb0 <_can_async_init+0x1b8>)
    3ad0:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	681b      	ldr	r3, [r3, #0]
    3ad6:	2108      	movs	r1, #8
    3ad8:	4618      	mov	r0, r3
    3ada:	4b36      	ldr	r3, [pc, #216]	; (3bb4 <_can_async_init+0x1bc>)
    3adc:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	681a      	ldr	r2, [r3, #0]
    3ae2:	4b35      	ldr	r3, [pc, #212]	; (3bb8 <_can_async_init+0x1c0>)
    3ae4:	b29b      	uxth	r3, r3
    3ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3aea:	4619      	mov	r1, r3
    3aec:	4610      	mov	r0, r2
    3aee:	4b33      	ldr	r3, [pc, #204]	; (3bbc <_can_async_init+0x1c4>)
    3af0:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3af2:	687b      	ldr	r3, [r7, #4]
    3af4:	681a      	ldr	r2, [r3, #0]
    3af6:	4b32      	ldr	r3, [pc, #200]	; (3bc0 <_can_async_init+0x1c8>)
    3af8:	b29b      	uxth	r3, r3
    3afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3afe:	4619      	mov	r1, r3
    3b00:	4610      	mov	r0, r2
    3b02:	4b30      	ldr	r3, [pc, #192]	; (3bc4 <_can_async_init+0x1cc>)
    3b04:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3b06:	687b      	ldr	r3, [r7, #4]
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3b0e:	4618      	mov	r0, r3
    3b10:	4b2d      	ldr	r3, [pc, #180]	; (3bc8 <_can_async_init+0x1d0>)
    3b12:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3b14:	204f      	movs	r0, #79	; 0x4f
    3b16:	4b2d      	ldr	r3, [pc, #180]	; (3bcc <_can_async_init+0x1d4>)
    3b18:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3b1a:	204f      	movs	r0, #79	; 0x4f
    3b1c:	4b2c      	ldr	r3, [pc, #176]	; (3bd0 <_can_async_init+0x1d8>)
    3b1e:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3b20:	204f      	movs	r0, #79	; 0x4f
    3b22:	4b2c      	ldr	r3, [pc, #176]	; (3bd4 <_can_async_init+0x1dc>)
    3b24:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3b26:	687b      	ldr	r3, [r7, #4]
    3b28:	681b      	ldr	r3, [r3, #0]
    3b2a:	2101      	movs	r1, #1
    3b2c:	4618      	mov	r0, r3
    3b2e:	4b2a      	ldr	r3, [pc, #168]	; (3bd8 <_can_async_init+0x1e0>)
    3b30:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3b32:	687b      	ldr	r3, [r7, #4]
    3b34:	681b      	ldr	r3, [r3, #0]
    3b36:	4618      	mov	r0, r3
    3b38:	4b28      	ldr	r3, [pc, #160]	; (3bdc <_can_async_init+0x1e4>)
    3b3a:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3b3c:	687b      	ldr	r3, [r7, #4]
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	4618      	mov	r0, r3
    3b42:	4b27      	ldr	r3, [pc, #156]	; (3be0 <_can_async_init+0x1e8>)
    3b44:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3b46:	bf00      	nop
    3b48:	687b      	ldr	r3, [r7, #4]
    3b4a:	681b      	ldr	r3, [r3, #0]
    3b4c:	4618      	mov	r0, r3
    3b4e:	4b06      	ldr	r3, [pc, #24]	; (3b68 <_can_async_init+0x170>)
    3b50:	4798      	blx	r3
    3b52:	4603      	mov	r3, r0
    3b54:	2b00      	cmp	r3, #0
    3b56:	d1f7      	bne.n	3b48 <_can_async_init+0x150>
	};

	return ERR_NONE;
    3b58:	2300      	movs	r3, #0
}
    3b5a:	4618      	mov	r0, r3
    3b5c:	3708      	adds	r7, #8
    3b5e:	46bd      	mov	sp, r7
    3b60:	bd80      	pop	{r7, pc}
    3b62:	bf00      	nop
    3b64:	000037ad 	.word	0x000037ad
    3b68:	000037cd 	.word	0x000037cd
    3b6c:	0000381b 	.word	0x0000381b
    3b70:	42000400 	.word	0x42000400
    3b74:	200007f8 	.word	0x200007f8
    3b78:	20000004 	.word	0x20000004
    3b7c:	0000385b 	.word	0x0000385b
    3b80:	00003775 	.word	0x00003775
    3b84:	00010c01 	.word	0x00010c01
    3b88:	0000387d 	.word	0x0000387d
    3b8c:	00010c10 	.word	0x00010c10
    3b90:	00003791 	.word	0x00003791
    3b94:	20001264 	.word	0x20001264
    3b98:	00003961 	.word	0x00003961
    3b9c:	0000397f 	.word	0x0000397f
    3ba0:	000039bb 	.word	0x000039bb
    3ba4:	2000121c 	.word	0x2000121c
    3ba8:	0000399d 	.word	0x0000399d
    3bac:	20000758 	.word	0x20000758
    3bb0:	000039d9 	.word	0x000039d9
    3bb4:	000038e9 	.word	0x000038e9
    3bb8:	20000768 	.word	0x20000768
    3bbc:	00003907 	.word	0x00003907
    3bc0:	200007e8 	.word	0x200007e8
    3bc4:	00003925 	.word	0x00003925
    3bc8:	00003943 	.word	0x00003943
    3bcc:	000036cd 	.word	0x000036cd
    3bd0:	00003711 	.word	0x00003711
    3bd4:	00003691 	.word	0x00003691
    3bd8:	000038cd 	.word	0x000038cd
    3bdc:	0000383b 	.word	0x0000383b
    3be0:	000037fb 	.word	0x000037fb

00003be4 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3be4:	b590      	push	{r4, r7, lr}
    3be6:	b083      	sub	sp, #12
    3be8:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3bea:	4b2c      	ldr	r3, [pc, #176]	; (3c9c <CAN1_Handler+0xb8>)
    3bec:	681b      	ldr	r3, [r3, #0]
    3bee:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3bf0:	687b      	ldr	r3, [r7, #4]
    3bf2:	681b      	ldr	r3, [r3, #0]
    3bf4:	4618      	mov	r0, r3
    3bf6:	4b2a      	ldr	r3, [pc, #168]	; (3ca0 <CAN1_Handler+0xbc>)
    3bf8:	4798      	blx	r3
    3bfa:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3bfc:	683b      	ldr	r3, [r7, #0]
    3bfe:	f003 0301 	and.w	r3, r3, #1
    3c02:	2b00      	cmp	r3, #0
    3c04:	d003      	beq.n	3c0e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3c06:	687b      	ldr	r3, [r7, #4]
    3c08:	689b      	ldr	r3, [r3, #8]
    3c0a:	6878      	ldr	r0, [r7, #4]
    3c0c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3c0e:	683b      	ldr	r3, [r7, #0]
    3c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3c14:	2b00      	cmp	r3, #0
    3c16:	d003      	beq.n	3c20 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3c18:	687b      	ldr	r3, [r7, #4]
    3c1a:	685b      	ldr	r3, [r3, #4]
    3c1c:	6878      	ldr	r0, [r7, #4]
    3c1e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3c20:	683b      	ldr	r3, [r7, #0]
    3c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c26:	2b00      	cmp	r3, #0
    3c28:	d004      	beq.n	3c34 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3c2a:	687b      	ldr	r3, [r7, #4]
    3c2c:	68db      	ldr	r3, [r3, #12]
    3c2e:	2103      	movs	r1, #3
    3c30:	6878      	ldr	r0, [r7, #4]
    3c32:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3c34:	683b      	ldr	r3, [r7, #0]
    3c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	d004      	beq.n	3c48 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3c3e:	687b      	ldr	r3, [r7, #4]
    3c40:	68db      	ldr	r3, [r3, #12]
    3c42:	2100      	movs	r1, #0
    3c44:	6878      	ldr	r0, [r7, #4]
    3c46:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3c48:	683b      	ldr	r3, [r7, #0]
    3c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3c4e:	2b00      	cmp	r3, #0
    3c50:	d00f      	beq.n	3c72 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3c52:	687b      	ldr	r3, [r7, #4]
    3c54:	68dc      	ldr	r4, [r3, #12]
    3c56:	687b      	ldr	r3, [r7, #4]
    3c58:	681b      	ldr	r3, [r3, #0]
    3c5a:	4618      	mov	r0, r3
    3c5c:	4b11      	ldr	r3, [pc, #68]	; (3ca4 <CAN1_Handler+0xc0>)
    3c5e:	4798      	blx	r3
    3c60:	4603      	mov	r3, r0
    3c62:	2b00      	cmp	r3, #0
    3c64:	d001      	beq.n	3c6a <CAN1_Handler+0x86>
    3c66:	2302      	movs	r3, #2
    3c68:	e000      	b.n	3c6c <CAN1_Handler+0x88>
    3c6a:	2301      	movs	r3, #1
    3c6c:	4619      	mov	r1, r3
    3c6e:	6878      	ldr	r0, [r7, #4]
    3c70:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3c72:	683b      	ldr	r3, [r7, #0]
    3c74:	f003 0308 	and.w	r3, r3, #8
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d004      	beq.n	3c86 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3c7c:	687b      	ldr	r3, [r7, #4]
    3c7e:	68db      	ldr	r3, [r3, #12]
    3c80:	2104      	movs	r1, #4
    3c82:	6878      	ldr	r0, [r7, #4]
    3c84:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	681b      	ldr	r3, [r3, #0]
    3c8a:	6839      	ldr	r1, [r7, #0]
    3c8c:	4618      	mov	r0, r3
    3c8e:	4b06      	ldr	r3, [pc, #24]	; (3ca8 <CAN1_Handler+0xc4>)
    3c90:	4798      	blx	r3
}
    3c92:	bf00      	nop
    3c94:	370c      	adds	r7, #12
    3c96:	46bd      	mov	sp, r7
    3c98:	bd90      	pop	{r4, r7, pc}
    3c9a:	bf00      	nop
    3c9c:	200007f8 	.word	0x200007f8
    3ca0:	000038b5 	.word	0x000038b5
    3ca4:	0000374d 	.word	0x0000374d
    3ca8:	00003899 	.word	0x00003899

00003cac <__NVIC_SetPendingIRQ>:
{
    3cac:	b480      	push	{r7}
    3cae:	b083      	sub	sp, #12
    3cb0:	af00      	add	r7, sp, #0
    3cb2:	4603      	mov	r3, r0
    3cb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3cba:	2b00      	cmp	r3, #0
    3cbc:	db0c      	blt.n	3cd8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3cbe:	4909      	ldr	r1, [pc, #36]	; (3ce4 <__NVIC_SetPendingIRQ+0x38>)
    3cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3cc4:	095b      	lsrs	r3, r3, #5
    3cc6:	88fa      	ldrh	r2, [r7, #6]
    3cc8:	f002 021f 	and.w	r2, r2, #31
    3ccc:	2001      	movs	r0, #1
    3cce:	fa00 f202 	lsl.w	r2, r0, r2
    3cd2:	3340      	adds	r3, #64	; 0x40
    3cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3cd8:	bf00      	nop
    3cda:	370c      	adds	r7, #12
    3cdc:	46bd      	mov	sp, r7
    3cde:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ce2:	4770      	bx	lr
    3ce4:	e000e100 	.word	0xe000e100

00003ce8 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    3ce8:	b580      	push	{r7, lr}
    3cea:	b082      	sub	sp, #8
    3cec:	af00      	add	r7, sp, #0
    3cee:	4603      	mov	r3, r0
    3cf0:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3cf2:	79fb      	ldrb	r3, [r7, #7]
    3cf4:	b21b      	sxth	r3, r3
    3cf6:	4618      	mov	r0, r3
    3cf8:	4b02      	ldr	r3, [pc, #8]	; (3d04 <_irq_set+0x1c>)
    3cfa:	4798      	blx	r3
}
    3cfc:	bf00      	nop
    3cfe:	3708      	adds	r7, #8
    3d00:	46bd      	mov	sp, r7
    3d02:	bd80      	pop	{r7, pc}
    3d04:	00003cad 	.word	0x00003cad

00003d08 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3d08:	b480      	push	{r7}
    3d0a:	b083      	sub	sp, #12
    3d0c:	af00      	add	r7, sp, #0
    3d0e:	4603      	mov	r3, r0
    3d10:	6039      	str	r1, [r7, #0]
    3d12:	80fb      	strh	r3, [r7, #6]
    3d14:	4613      	mov	r3, r2
    3d16:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3d18:	797b      	ldrb	r3, [r7, #5]
    3d1a:	3b04      	subs	r3, #4
    3d1c:	2b05      	cmp	r3, #5
    3d1e:	d86b      	bhi.n	3df8 <_get_cycles_for_us_internal+0xf0>
    3d20:	a201      	add	r2, pc, #4	; (adr r2, 3d28 <_get_cycles_for_us_internal+0x20>)
    3d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3d26:	bf00      	nop
    3d28:	00003dd7 	.word	0x00003dd7
    3d2c:	00003db7 	.word	0x00003db7
    3d30:	00003d99 	.word	0x00003d99
    3d34:	00003d7b 	.word	0x00003d7b
    3d38:	00003d5d 	.word	0x00003d5d
    3d3c:	00003d41 	.word	0x00003d41
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3d40:	88fb      	ldrh	r3, [r7, #6]
    3d42:	683a      	ldr	r2, [r7, #0]
    3d44:	4935      	ldr	r1, [pc, #212]	; (3e1c <_get_cycles_for_us_internal+0x114>)
    3d46:	fba1 1202 	umull	r1, r2, r1, r2
    3d4a:	0c92      	lsrs	r2, r2, #18
    3d4c:	fb02 f303 	mul.w	r3, r2, r3
    3d50:	3302      	adds	r3, #2
    3d52:	4a33      	ldr	r2, [pc, #204]	; (3e20 <_get_cycles_for_us_internal+0x118>)
    3d54:	fba2 2303 	umull	r2, r3, r2, r3
    3d58:	085b      	lsrs	r3, r3, #1
    3d5a:	e059      	b.n	3e10 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3d5c:	88fb      	ldrh	r3, [r7, #6]
    3d5e:	683a      	ldr	r2, [r7, #0]
    3d60:	0952      	lsrs	r2, r2, #5
    3d62:	4930      	ldr	r1, [pc, #192]	; (3e24 <_get_cycles_for_us_internal+0x11c>)
    3d64:	fba1 1202 	umull	r1, r2, r1, r2
    3d68:	09d2      	lsrs	r2, r2, #7
    3d6a:	fb02 f303 	mul.w	r3, r2, r3
    3d6e:	331d      	adds	r3, #29
    3d70:	4a2d      	ldr	r2, [pc, #180]	; (3e28 <_get_cycles_for_us_internal+0x120>)
    3d72:	fba2 2303 	umull	r2, r3, r2, r3
    3d76:	091b      	lsrs	r3, r3, #4
    3d78:	e04a      	b.n	3e10 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3d7a:	88fb      	ldrh	r3, [r7, #6]
    3d7c:	683a      	ldr	r2, [r7, #0]
    3d7e:	492b      	ldr	r1, [pc, #172]	; (3e2c <_get_cycles_for_us_internal+0x124>)
    3d80:	fba1 1202 	umull	r1, r2, r1, r2
    3d84:	0b52      	lsrs	r2, r2, #13
    3d86:	fb02 f303 	mul.w	r3, r2, r3
    3d8a:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3d8e:	4a28      	ldr	r2, [pc, #160]	; (3e30 <_get_cycles_for_us_internal+0x128>)
    3d90:	fba2 2303 	umull	r2, r3, r2, r3
    3d94:	095b      	lsrs	r3, r3, #5
    3d96:	e03b      	b.n	3e10 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3d98:	88fb      	ldrh	r3, [r7, #6]
    3d9a:	683a      	ldr	r2, [r7, #0]
    3d9c:	4925      	ldr	r1, [pc, #148]	; (3e34 <_get_cycles_for_us_internal+0x12c>)
    3d9e:	fba1 1202 	umull	r1, r2, r1, r2
    3da2:	0992      	lsrs	r2, r2, #6
    3da4:	fb02 f303 	mul.w	r3, r2, r3
    3da8:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3dac:	4a22      	ldr	r2, [pc, #136]	; (3e38 <_get_cycles_for_us_internal+0x130>)
    3dae:	fba2 2303 	umull	r2, r3, r2, r3
    3db2:	099b      	lsrs	r3, r3, #6
    3db4:	e02c      	b.n	3e10 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3db6:	88fb      	ldrh	r3, [r7, #6]
    3db8:	683a      	ldr	r2, [r7, #0]
    3dba:	4920      	ldr	r1, [pc, #128]	; (3e3c <_get_cycles_for_us_internal+0x134>)
    3dbc:	fba1 1202 	umull	r1, r2, r1, r2
    3dc0:	0952      	lsrs	r2, r2, #5
    3dc2:	fb02 f303 	mul.w	r3, r2, r3
    3dc6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3dca:	332f      	adds	r3, #47	; 0x2f
    3dcc:	4a1c      	ldr	r2, [pc, #112]	; (3e40 <_get_cycles_for_us_internal+0x138>)
    3dce:	fba2 2303 	umull	r2, r3, r2, r3
    3dd2:	0b5b      	lsrs	r3, r3, #13
    3dd4:	e01c      	b.n	3e10 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3dd6:	88fb      	ldrh	r3, [r7, #6]
    3dd8:	683a      	ldr	r2, [r7, #0]
    3dda:	491a      	ldr	r1, [pc, #104]	; (3e44 <_get_cycles_for_us_internal+0x13c>)
    3ddc:	fba1 1202 	umull	r1, r2, r1, r2
    3de0:	08d2      	lsrs	r2, r2, #3
    3de2:	fb02 f303 	mul.w	r3, r2, r3
    3de6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3dea:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3dee:	4a16      	ldr	r2, [pc, #88]	; (3e48 <_get_cycles_for_us_internal+0x140>)
    3df0:	fba2 2303 	umull	r2, r3, r2, r3
    3df4:	0c5b      	lsrs	r3, r3, #17
    3df6:	e00b      	b.n	3e10 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3df8:	88fb      	ldrh	r3, [r7, #6]
    3dfa:	683a      	ldr	r2, [r7, #0]
    3dfc:	fb02 f303 	mul.w	r3, r2, r3
    3e00:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3e04:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3e08:	4a10      	ldr	r2, [pc, #64]	; (3e4c <_get_cycles_for_us_internal+0x144>)
    3e0a:	fba2 2303 	umull	r2, r3, r2, r3
    3e0e:	0c9b      	lsrs	r3, r3, #18
	}
}
    3e10:	4618      	mov	r0, r3
    3e12:	370c      	adds	r7, #12
    3e14:	46bd      	mov	sp, r7
    3e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e1a:	4770      	bx	lr
    3e1c:	431bde83 	.word	0x431bde83
    3e20:	aaaaaaab 	.word	0xaaaaaaab
    3e24:	0a7c5ac5 	.word	0x0a7c5ac5
    3e28:	88888889 	.word	0x88888889
    3e2c:	d1b71759 	.word	0xd1b71759
    3e30:	1b4e81b5 	.word	0x1b4e81b5
    3e34:	10624dd3 	.word	0x10624dd3
    3e38:	057619f1 	.word	0x057619f1
    3e3c:	51eb851f 	.word	0x51eb851f
    3e40:	45e7b273 	.word	0x45e7b273
    3e44:	cccccccd 	.word	0xcccccccd
    3e48:	6fd91d85 	.word	0x6fd91d85
    3e4c:	165e9f81 	.word	0x165e9f81

00003e50 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b082      	sub	sp, #8
    3e54:	af00      	add	r7, sp, #0
    3e56:	4603      	mov	r3, r0
    3e58:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3e5a:	88fb      	ldrh	r3, [r7, #6]
    3e5c:	2209      	movs	r2, #9
    3e5e:	4904      	ldr	r1, [pc, #16]	; (3e70 <_get_cycles_for_us+0x20>)
    3e60:	4618      	mov	r0, r3
    3e62:	4b04      	ldr	r3, [pc, #16]	; (3e74 <_get_cycles_for_us+0x24>)
    3e64:	4798      	blx	r3
    3e66:	4603      	mov	r3, r0
}
    3e68:	4618      	mov	r0, r3
    3e6a:	3708      	adds	r7, #8
    3e6c:	46bd      	mov	sp, r7
    3e6e:	bd80      	pop	{r7, pc}
    3e70:	07270e00 	.word	0x07270e00
    3e74:	00003d09 	.word	0x00003d09

00003e78 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3e78:	b480      	push	{r7}
    3e7a:	b083      	sub	sp, #12
    3e7c:	af00      	add	r7, sp, #0
    3e7e:	4603      	mov	r3, r0
    3e80:	6039      	str	r1, [r7, #0]
    3e82:	80fb      	strh	r3, [r7, #6]
    3e84:	4613      	mov	r3, r2
    3e86:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3e88:	797b      	ldrb	r3, [r7, #5]
    3e8a:	3b04      	subs	r3, #4
    3e8c:	2b05      	cmp	r3, #5
    3e8e:	d870      	bhi.n	3f72 <_get_cycles_for_ms_internal+0xfa>
    3e90:	a201      	add	r2, pc, #4	; (adr r2, 3e98 <_get_cycles_for_ms_internal+0x20>)
    3e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3e96:	bf00      	nop
    3e98:	00003f55 	.word	0x00003f55
    3e9c:	00003f39 	.word	0x00003f39
    3ea0:	00003f1d 	.word	0x00003f1d
    3ea4:	00003ef9 	.word	0x00003ef9
    3ea8:	00003ed5 	.word	0x00003ed5
    3eac:	00003eb1 	.word	0x00003eb1
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3eb0:	88fb      	ldrh	r3, [r7, #6]
    3eb2:	683a      	ldr	r2, [r7, #0]
    3eb4:	4937      	ldr	r1, [pc, #220]	; (3f94 <_get_cycles_for_ms_internal+0x11c>)
    3eb6:	fba1 1202 	umull	r1, r2, r1, r2
    3eba:	0c92      	lsrs	r2, r2, #18
    3ebc:	fb02 f303 	mul.w	r3, r2, r3
    3ec0:	3302      	adds	r3, #2
    3ec2:	4a35      	ldr	r2, [pc, #212]	; (3f98 <_get_cycles_for_ms_internal+0x120>)
    3ec4:	fba2 2303 	umull	r2, r3, r2, r3
    3ec8:	085b      	lsrs	r3, r3, #1
    3eca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3ece:	fb02 f303 	mul.w	r3, r2, r3
    3ed2:	e058      	b.n	3f86 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3ed4:	88fb      	ldrh	r3, [r7, #6]
    3ed6:	683a      	ldr	r2, [r7, #0]
    3ed8:	0952      	lsrs	r2, r2, #5
    3eda:	4930      	ldr	r1, [pc, #192]	; (3f9c <_get_cycles_for_ms_internal+0x124>)
    3edc:	fba1 1202 	umull	r1, r2, r1, r2
    3ee0:	09d2      	lsrs	r2, r2, #7
    3ee2:	fb02 f303 	mul.w	r3, r2, r3
    3ee6:	3302      	adds	r3, #2
    3ee8:	4a2b      	ldr	r2, [pc, #172]	; (3f98 <_get_cycles_for_ms_internal+0x120>)
    3eea:	fba2 2303 	umull	r2, r3, r2, r3
    3eee:	085b      	lsrs	r3, r3, #1
    3ef0:	2264      	movs	r2, #100	; 0x64
    3ef2:	fb02 f303 	mul.w	r3, r2, r3
    3ef6:	e046      	b.n	3f86 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3ef8:	88fb      	ldrh	r3, [r7, #6]
    3efa:	683a      	ldr	r2, [r7, #0]
    3efc:	4928      	ldr	r1, [pc, #160]	; (3fa0 <_get_cycles_for_ms_internal+0x128>)
    3efe:	fba1 1202 	umull	r1, r2, r1, r2
    3f02:	0b52      	lsrs	r2, r2, #13
    3f04:	fb02 f303 	mul.w	r3, r2, r3
    3f08:	3302      	adds	r3, #2
    3f0a:	4a23      	ldr	r2, [pc, #140]	; (3f98 <_get_cycles_for_ms_internal+0x120>)
    3f0c:	fba2 2303 	umull	r2, r3, r2, r3
    3f10:	085a      	lsrs	r2, r3, #1
    3f12:	4613      	mov	r3, r2
    3f14:	009b      	lsls	r3, r3, #2
    3f16:	4413      	add	r3, r2
    3f18:	005b      	lsls	r3, r3, #1
    3f1a:	e034      	b.n	3f86 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3f1c:	88fb      	ldrh	r3, [r7, #6]
    3f1e:	683a      	ldr	r2, [r7, #0]
    3f20:	4920      	ldr	r1, [pc, #128]	; (3fa4 <_get_cycles_for_ms_internal+0x12c>)
    3f22:	fba1 1202 	umull	r1, r2, r1, r2
    3f26:	0992      	lsrs	r2, r2, #6
    3f28:	fb02 f303 	mul.w	r3, r2, r3
    3f2c:	3302      	adds	r3, #2
    3f2e:	4a1a      	ldr	r2, [pc, #104]	; (3f98 <_get_cycles_for_ms_internal+0x120>)
    3f30:	fba2 2303 	umull	r2, r3, r2, r3
    3f34:	085b      	lsrs	r3, r3, #1
    3f36:	e026      	b.n	3f86 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3f38:	88fb      	ldrh	r3, [r7, #6]
    3f3a:	683a      	ldr	r2, [r7, #0]
    3f3c:	491a      	ldr	r1, [pc, #104]	; (3fa8 <_get_cycles_for_ms_internal+0x130>)
    3f3e:	fba1 1202 	umull	r1, r2, r1, r2
    3f42:	0952      	lsrs	r2, r2, #5
    3f44:	fb02 f303 	mul.w	r3, r2, r3
    3f48:	331d      	adds	r3, #29
    3f4a:	4a18      	ldr	r2, [pc, #96]	; (3fac <_get_cycles_for_ms_internal+0x134>)
    3f4c:	fba2 2303 	umull	r2, r3, r2, r3
    3f50:	091b      	lsrs	r3, r3, #4
    3f52:	e018      	b.n	3f86 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3f54:	88fb      	ldrh	r3, [r7, #6]
    3f56:	683a      	ldr	r2, [r7, #0]
    3f58:	4915      	ldr	r1, [pc, #84]	; (3fb0 <_get_cycles_for_ms_internal+0x138>)
    3f5a:	fba1 1202 	umull	r1, r2, r1, r2
    3f5e:	08d2      	lsrs	r2, r2, #3
    3f60:	fb02 f303 	mul.w	r3, r2, r3
    3f64:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3f68:	4a12      	ldr	r2, [pc, #72]	; (3fb4 <_get_cycles_for_ms_internal+0x13c>)
    3f6a:	fba2 2303 	umull	r2, r3, r2, r3
    3f6e:	095b      	lsrs	r3, r3, #5
    3f70:	e009      	b.n	3f86 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3f72:	88fb      	ldrh	r3, [r7, #6]
    3f74:	683a      	ldr	r2, [r7, #0]
    3f76:	fb02 f303 	mul.w	r3, r2, r3
    3f7a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3f7e:	4a0e      	ldr	r2, [pc, #56]	; (3fb8 <_get_cycles_for_ms_internal+0x140>)
    3f80:	fba2 2303 	umull	r2, r3, r2, r3
    3f84:	099b      	lsrs	r3, r3, #6
	}
}
    3f86:	4618      	mov	r0, r3
    3f88:	370c      	adds	r7, #12
    3f8a:	46bd      	mov	sp, r7
    3f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f90:	4770      	bx	lr
    3f92:	bf00      	nop
    3f94:	431bde83 	.word	0x431bde83
    3f98:	aaaaaaab 	.word	0xaaaaaaab
    3f9c:	0a7c5ac5 	.word	0x0a7c5ac5
    3fa0:	d1b71759 	.word	0xd1b71759
    3fa4:	10624dd3 	.word	0x10624dd3
    3fa8:	51eb851f 	.word	0x51eb851f
    3fac:	88888889 	.word	0x88888889
    3fb0:	cccccccd 	.word	0xcccccccd
    3fb4:	1b4e81b5 	.word	0x1b4e81b5
    3fb8:	057619f1 	.word	0x057619f1

00003fbc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3fbc:	b580      	push	{r7, lr}
    3fbe:	b082      	sub	sp, #8
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	4603      	mov	r3, r0
    3fc4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3fc6:	88fb      	ldrh	r3, [r7, #6]
    3fc8:	2209      	movs	r2, #9
    3fca:	4904      	ldr	r1, [pc, #16]	; (3fdc <_get_cycles_for_ms+0x20>)
    3fcc:	4618      	mov	r0, r3
    3fce:	4b04      	ldr	r3, [pc, #16]	; (3fe0 <_get_cycles_for_ms+0x24>)
    3fd0:	4798      	blx	r3
    3fd2:	4603      	mov	r3, r0
}
    3fd4:	4618      	mov	r0, r3
    3fd6:	3708      	adds	r7, #8
    3fd8:	46bd      	mov	sp, r7
    3fda:	bd80      	pop	{r7, pc}
    3fdc:	07270e00 	.word	0x07270e00
    3fe0:	00003e79 	.word	0x00003e79
    3fe4:	00000000 	.word	0x00000000

00003fe8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3fe8:	b480      	push	{r7}
    3fea:	b083      	sub	sp, #12
    3fec:	af00      	add	r7, sp, #0
    3fee:	6078      	str	r0, [r7, #4]
    3ff0:	6039      	str	r1, [r7, #0]
    3ff2:	bf00      	nop
    3ff4:	f3af 8000 	nop.w

00003ff8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    3ff8:	3901      	subs	r1, #1
    3ffa:	d8fd      	bhi.n	3ff8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    3ffc:	bf00      	nop
    3ffe:	370c      	adds	r7, #12
    4000:	46bd      	mov	sp, r7
    4002:	f85d 7b04 	ldr.w	r7, [sp], #4
    4006:	4770      	bx	lr

00004008 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4008:	b480      	push	{r7}
    400a:	b083      	sub	sp, #12
    400c:	af00      	add	r7, sp, #0
    400e:	6078      	str	r0, [r7, #4]
    4010:	460b      	mov	r3, r1
    4012:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	881b      	ldrh	r3, [r3, #0]
    4018:	b29a      	uxth	r2, r3
    401a:	887b      	ldrh	r3, [r7, #2]
    401c:	021b      	lsls	r3, r3, #8
    401e:	b29b      	uxth	r3, r3
    4020:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4024:	b29b      	uxth	r3, r3
    4026:	4313      	orrs	r3, r2
    4028:	b29a      	uxth	r2, r3
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    402e:	bf00      	nop
    4030:	370c      	adds	r7, #12
    4032:	46bd      	mov	sp, r7
    4034:	f85d 7b04 	ldr.w	r7, [sp], #4
    4038:	4770      	bx	lr

0000403a <hri_port_set_EVCTRL_reg>:
{
    403a:	b480      	push	{r7}
    403c:	b085      	sub	sp, #20
    403e:	af00      	add	r7, sp, #0
    4040:	60f8      	str	r0, [r7, #12]
    4042:	460b      	mov	r3, r1
    4044:	607a      	str	r2, [r7, #4]
    4046:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4048:	7afb      	ldrb	r3, [r7, #11]
    404a:	7afa      	ldrb	r2, [r7, #11]
    404c:	68f9      	ldr	r1, [r7, #12]
    404e:	01d2      	lsls	r2, r2, #7
    4050:	440a      	add	r2, r1
    4052:	322c      	adds	r2, #44	; 0x2c
    4054:	6811      	ldr	r1, [r2, #0]
    4056:	687a      	ldr	r2, [r7, #4]
    4058:	430a      	orrs	r2, r1
    405a:	68f9      	ldr	r1, [r7, #12]
    405c:	01db      	lsls	r3, r3, #7
    405e:	440b      	add	r3, r1
    4060:	332c      	adds	r3, #44	; 0x2c
    4062:	601a      	str	r2, [r3, #0]
}
    4064:	bf00      	nop
    4066:	3714      	adds	r7, #20
    4068:	46bd      	mov	sp, r7
    406a:	f85d 7b04 	ldr.w	r7, [sp], #4
    406e:	4770      	bx	lr

00004070 <_port_event_init>:

static inline void _port_event_init()
{
    4070:	b580      	push	{r7, lr}
    4072:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4074:	2200      	movs	r2, #0
    4076:	2100      	movs	r1, #0
    4078:	480a      	ldr	r0, [pc, #40]	; (40a4 <_port_event_init+0x34>)
    407a:	4b0b      	ldr	r3, [pc, #44]	; (40a8 <_port_event_init+0x38>)
    407c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    407e:	2200      	movs	r2, #0
    4080:	2101      	movs	r1, #1
    4082:	4808      	ldr	r0, [pc, #32]	; (40a4 <_port_event_init+0x34>)
    4084:	4b08      	ldr	r3, [pc, #32]	; (40a8 <_port_event_init+0x38>)
    4086:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4088:	f64e 72ef 	movw	r2, #61423	; 0xefef
    408c:	2102      	movs	r1, #2
    408e:	4805      	ldr	r0, [pc, #20]	; (40a4 <_port_event_init+0x34>)
    4090:	4b05      	ldr	r3, [pc, #20]	; (40a8 <_port_event_init+0x38>)
    4092:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4094:	2200      	movs	r2, #0
    4096:	2103      	movs	r1, #3
    4098:	4802      	ldr	r0, [pc, #8]	; (40a4 <_port_event_init+0x34>)
    409a:	4b03      	ldr	r3, [pc, #12]	; (40a8 <_port_event_init+0x38>)
    409c:	4798      	blx	r3
}
    409e:	bf00      	nop
    40a0:	bd80      	pop	{r7, pc}
    40a2:	bf00      	nop
    40a4:	41008000 	.word	0x41008000
    40a8:	0000403b 	.word	0x0000403b

000040ac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    40ac:	b580      	push	{r7, lr}
    40ae:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    40b0:	2104      	movs	r1, #4
    40b2:	480b      	ldr	r0, [pc, #44]	; (40e0 <_init_chip+0x34>)
    40b4:	4b0b      	ldr	r3, [pc, #44]	; (40e4 <_init_chip+0x38>)
    40b6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    40b8:	4b0b      	ldr	r3, [pc, #44]	; (40e8 <_init_chip+0x3c>)
    40ba:	4798      	blx	r3
	_oscctrl_init_sources();
    40bc:	4b0b      	ldr	r3, [pc, #44]	; (40ec <_init_chip+0x40>)
    40be:	4798      	blx	r3
	_mclk_init();
    40c0:	4b0b      	ldr	r3, [pc, #44]	; (40f0 <_init_chip+0x44>)
    40c2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    40c4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    40c8:	4b0a      	ldr	r3, [pc, #40]	; (40f4 <_init_chip+0x48>)
    40ca:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    40cc:	4b0a      	ldr	r3, [pc, #40]	; (40f8 <_init_chip+0x4c>)
    40ce:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    40d0:	f640 30df 	movw	r0, #3039	; 0xbdf
    40d4:	4b07      	ldr	r3, [pc, #28]	; (40f4 <_init_chip+0x48>)
    40d6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    40d8:	4b08      	ldr	r3, [pc, #32]	; (40fc <_init_chip+0x50>)
    40da:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    40dc:	bf00      	nop
    40de:	bd80      	pop	{r7, pc}
    40e0:	41004000 	.word	0x41004000
    40e4:	00004009 	.word	0x00004009
    40e8:	00004b9d 	.word	0x00004b9d
    40ec:	00005065 	.word	0x00005065
    40f0:	00004abd 	.word	0x00004abd
    40f4:	0000497d 	.word	0x0000497d
    40f8:	000050a5 	.word	0x000050a5
    40fc:	00004071 	.word	0x00004071

00004100 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4100:	b480      	push	{r7}
    4102:	b083      	sub	sp, #12
    4104:	af00      	add	r7, sp, #0
    4106:	6078      	str	r0, [r7, #4]
    4108:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    410a:	687b      	ldr	r3, [r7, #4]
    410c:	683a      	ldr	r2, [r7, #0]
    410e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4110:	2300      	movs	r3, #0
}
    4112:	4618      	mov	r0, r3
    4114:	370c      	adds	r7, #12
    4116:	46bd      	mov	sp, r7
    4118:	f85d 7b04 	ldr.w	r7, [sp], #4
    411c:	4770      	bx	lr
	...

00004120 <__NVIC_EnableIRQ>:
{
    4120:	b480      	push	{r7}
    4122:	b083      	sub	sp, #12
    4124:	af00      	add	r7, sp, #0
    4126:	4603      	mov	r3, r0
    4128:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    412a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    412e:	2b00      	cmp	r3, #0
    4130:	db0b      	blt.n	414a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4132:	4909      	ldr	r1, [pc, #36]	; (4158 <__NVIC_EnableIRQ+0x38>)
    4134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4138:	095b      	lsrs	r3, r3, #5
    413a:	88fa      	ldrh	r2, [r7, #6]
    413c:	f002 021f 	and.w	r2, r2, #31
    4140:	2001      	movs	r0, #1
    4142:	fa00 f202 	lsl.w	r2, r0, r2
    4146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    414a:	bf00      	nop
    414c:	370c      	adds	r7, #12
    414e:	46bd      	mov	sp, r7
    4150:	f85d 7b04 	ldr.w	r7, [sp], #4
    4154:	4770      	bx	lr
    4156:	bf00      	nop
    4158:	e000e100 	.word	0xe000e100

0000415c <__NVIC_DisableIRQ>:
{
    415c:	b480      	push	{r7}
    415e:	b083      	sub	sp, #12
    4160:	af00      	add	r7, sp, #0
    4162:	4603      	mov	r3, r0
    4164:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    416a:	2b00      	cmp	r3, #0
    416c:	db10      	blt.n	4190 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    416e:	490b      	ldr	r1, [pc, #44]	; (419c <__NVIC_DisableIRQ+0x40>)
    4170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4174:	095b      	lsrs	r3, r3, #5
    4176:	88fa      	ldrh	r2, [r7, #6]
    4178:	f002 021f 	and.w	r2, r2, #31
    417c:	2001      	movs	r0, #1
    417e:	fa00 f202 	lsl.w	r2, r0, r2
    4182:	3320      	adds	r3, #32
    4184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4188:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    418c:	f3bf 8f6f 	isb	sy
}
    4190:	bf00      	nop
    4192:	370c      	adds	r7, #12
    4194:	46bd      	mov	sp, r7
    4196:	f85d 7b04 	ldr.w	r7, [sp], #4
    419a:	4770      	bx	lr
    419c:	e000e100 	.word	0xe000e100

000041a0 <__NVIC_ClearPendingIRQ>:
{
    41a0:	b480      	push	{r7}
    41a2:	b083      	sub	sp, #12
    41a4:	af00      	add	r7, sp, #0
    41a6:	4603      	mov	r3, r0
    41a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    41aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41ae:	2b00      	cmp	r3, #0
    41b0:	db0c      	blt.n	41cc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    41b2:	4909      	ldr	r1, [pc, #36]	; (41d8 <__NVIC_ClearPendingIRQ+0x38>)
    41b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41b8:	095b      	lsrs	r3, r3, #5
    41ba:	88fa      	ldrh	r2, [r7, #6]
    41bc:	f002 021f 	and.w	r2, r2, #31
    41c0:	2001      	movs	r0, #1
    41c2:	fa00 f202 	lsl.w	r2, r0, r2
    41c6:	3360      	adds	r3, #96	; 0x60
    41c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    41cc:	bf00      	nop
    41ce:	370c      	adds	r7, #12
    41d0:	46bd      	mov	sp, r7
    41d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    41d6:	4770      	bx	lr
    41d8:	e000e100 	.word	0xe000e100

000041dc <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    41dc:	b480      	push	{r7}
    41de:	b083      	sub	sp, #12
    41e0:	af00      	add	r7, sp, #0
    41e2:	6078      	str	r0, [r7, #4]
    41e4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    41e6:	bf00      	nop
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	685a      	ldr	r2, [r3, #4]
    41ec:	683b      	ldr	r3, [r7, #0]
    41ee:	4013      	ands	r3, r2
    41f0:	2b00      	cmp	r3, #0
    41f2:	d1f9      	bne.n	41e8 <hri_eic_wait_for_sync+0xc>
	};
}
    41f4:	bf00      	nop
    41f6:	370c      	adds	r7, #12
    41f8:	46bd      	mov	sp, r7
    41fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    41fe:	4770      	bx	lr

00004200 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4200:	b480      	push	{r7}
    4202:	b083      	sub	sp, #12
    4204:	af00      	add	r7, sp, #0
    4206:	6078      	str	r0, [r7, #4]
    4208:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    420a:	687b      	ldr	r3, [r7, #4]
    420c:	685a      	ldr	r2, [r3, #4]
    420e:	683b      	ldr	r3, [r7, #0]
    4210:	4013      	ands	r3, r2
    4212:	2b00      	cmp	r3, #0
    4214:	bf14      	ite	ne
    4216:	2301      	movne	r3, #1
    4218:	2300      	moveq	r3, #0
    421a:	b2db      	uxtb	r3, r3
}
    421c:	4618      	mov	r0, r3
    421e:	370c      	adds	r7, #12
    4220:	46bd      	mov	sp, r7
    4222:	f85d 7b04 	ldr.w	r7, [sp], #4
    4226:	4770      	bx	lr

00004228 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4228:	b480      	push	{r7}
    422a:	b083      	sub	sp, #12
    422c:	af00      	add	r7, sp, #0
    422e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	695b      	ldr	r3, [r3, #20]
}
    4234:	4618      	mov	r0, r3
    4236:	370c      	adds	r7, #12
    4238:	46bd      	mov	sp, r7
    423a:	f85d 7b04 	ldr.w	r7, [sp], #4
    423e:	4770      	bx	lr

00004240 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4240:	b480      	push	{r7}
    4242:	b083      	sub	sp, #12
    4244:	af00      	add	r7, sp, #0
    4246:	6078      	str	r0, [r7, #4]
    4248:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    424a:	687b      	ldr	r3, [r7, #4]
    424c:	683a      	ldr	r2, [r7, #0]
    424e:	615a      	str	r2, [r3, #20]
}
    4250:	bf00      	nop
    4252:	370c      	adds	r7, #12
    4254:	46bd      	mov	sp, r7
    4256:	f85d 7b04 	ldr.w	r7, [sp], #4
    425a:	4770      	bx	lr

0000425c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    425c:	b480      	push	{r7}
    425e:	b083      	sub	sp, #12
    4260:	af00      	add	r7, sp, #0
    4262:	6078      	str	r0, [r7, #4]
    4264:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	683a      	ldr	r2, [r7, #0]
    426a:	611a      	str	r2, [r3, #16]
}
    426c:	bf00      	nop
    426e:	370c      	adds	r7, #12
    4270:	46bd      	mov	sp, r7
    4272:	f85d 7b04 	ldr.w	r7, [sp], #4
    4276:	4770      	bx	lr

00004278 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4278:	b480      	push	{r7}
    427a:	b083      	sub	sp, #12
    427c:	af00      	add	r7, sp, #0
    427e:	6078      	str	r0, [r7, #4]
    4280:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	683a      	ldr	r2, [r7, #0]
    4286:	60da      	str	r2, [r3, #12]
}
    4288:	bf00      	nop
    428a:	370c      	adds	r7, #12
    428c:	46bd      	mov	sp, r7
    428e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4292:	4770      	bx	lr

00004294 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4294:	b580      	push	{r7, lr}
    4296:	b082      	sub	sp, #8
    4298:	af00      	add	r7, sp, #0
    429a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	781b      	ldrb	r3, [r3, #0]
    42a0:	b2db      	uxtb	r3, r3
    42a2:	f043 0302 	orr.w	r3, r3, #2
    42a6:	b2da      	uxtb	r2, r3
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    42ac:	2103      	movs	r1, #3
    42ae:	6878      	ldr	r0, [r7, #4]
    42b0:	4b02      	ldr	r3, [pc, #8]	; (42bc <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    42b2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    42b4:	bf00      	nop
    42b6:	3708      	adds	r7, #8
    42b8:	46bd      	mov	sp, r7
    42ba:	bd80      	pop	{r7, pc}
    42bc:	000041dd 	.word	0x000041dd

000042c0 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    42c0:	b580      	push	{r7, lr}
    42c2:	b082      	sub	sp, #8
    42c4:	af00      	add	r7, sp, #0
    42c6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    42c8:	687b      	ldr	r3, [r7, #4]
    42ca:	781b      	ldrb	r3, [r3, #0]
    42cc:	b2db      	uxtb	r3, r3
    42ce:	f023 0302 	bic.w	r3, r3, #2
    42d2:	b2da      	uxtb	r2, r3
    42d4:	687b      	ldr	r3, [r7, #4]
    42d6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    42d8:	2103      	movs	r1, #3
    42da:	6878      	ldr	r0, [r7, #4]
    42dc:	4b02      	ldr	r3, [pc, #8]	; (42e8 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    42de:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    42e0:	bf00      	nop
    42e2:	3708      	adds	r7, #8
    42e4:	46bd      	mov	sp, r7
    42e6:	bd80      	pop	{r7, pc}
    42e8:	000041dd 	.word	0x000041dd

000042ec <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    42ec:	b580      	push	{r7, lr}
    42ee:	b084      	sub	sp, #16
    42f0:	af00      	add	r7, sp, #0
    42f2:	6078      	str	r0, [r7, #4]
    42f4:	460b      	mov	r3, r1
    42f6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    42f8:	687b      	ldr	r3, [r7, #4]
    42fa:	781b      	ldrb	r3, [r3, #0]
    42fc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    42fe:	7bfb      	ldrb	r3, [r7, #15]
    4300:	f023 0310 	bic.w	r3, r3, #16
    4304:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4306:	78fb      	ldrb	r3, [r7, #3]
    4308:	011b      	lsls	r3, r3, #4
    430a:	b25a      	sxtb	r2, r3
    430c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4310:	4313      	orrs	r3, r2
    4312:	b25b      	sxtb	r3, r3
    4314:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	7bfa      	ldrb	r2, [r7, #15]
    431a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    431c:	2103      	movs	r1, #3
    431e:	6878      	ldr	r0, [r7, #4]
    4320:	4b02      	ldr	r3, [pc, #8]	; (432c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4322:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4324:	bf00      	nop
    4326:	3710      	adds	r7, #16
    4328:	46bd      	mov	sp, r7
    432a:	bd80      	pop	{r7, pc}
    432c:	000041dd 	.word	0x000041dd

00004330 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4330:	b580      	push	{r7, lr}
    4332:	b084      	sub	sp, #16
    4334:	af00      	add	r7, sp, #0
    4336:	6078      	str	r0, [r7, #4]
    4338:	460b      	mov	r3, r1
    433a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    433c:	2103      	movs	r1, #3
    433e:	6878      	ldr	r0, [r7, #4]
    4340:	4b06      	ldr	r3, [pc, #24]	; (435c <hri_eic_get_CTRLA_reg+0x2c>)
    4342:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4344:	687b      	ldr	r3, [r7, #4]
    4346:	781b      	ldrb	r3, [r3, #0]
    4348:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    434a:	7bfa      	ldrb	r2, [r7, #15]
    434c:	78fb      	ldrb	r3, [r7, #3]
    434e:	4013      	ands	r3, r2
    4350:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4352:	7bfb      	ldrb	r3, [r7, #15]
}
    4354:	4618      	mov	r0, r3
    4356:	3710      	adds	r7, #16
    4358:	46bd      	mov	sp, r7
    435a:	bd80      	pop	{r7, pc}
    435c:	000041dd 	.word	0x000041dd

00004360 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4360:	b580      	push	{r7, lr}
    4362:	b082      	sub	sp, #8
    4364:	af00      	add	r7, sp, #0
    4366:	6078      	str	r0, [r7, #4]
    4368:	460b      	mov	r3, r1
    436a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	78fa      	ldrb	r2, [r7, #3]
    4370:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4372:	2103      	movs	r1, #3
    4374:	6878      	ldr	r0, [r7, #4]
    4376:	4b03      	ldr	r3, [pc, #12]	; (4384 <hri_eic_write_CTRLA_reg+0x24>)
    4378:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    437a:	bf00      	nop
    437c:	3708      	adds	r7, #8
    437e:	46bd      	mov	sp, r7
    4380:	bd80      	pop	{r7, pc}
    4382:	bf00      	nop
    4384:	000041dd 	.word	0x000041dd

00004388 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4388:	b480      	push	{r7}
    438a:	b083      	sub	sp, #12
    438c:	af00      	add	r7, sp, #0
    438e:	6078      	str	r0, [r7, #4]
    4390:	460b      	mov	r3, r1
    4392:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	78fa      	ldrb	r2, [r7, #3]
    4398:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    439a:	bf00      	nop
    439c:	370c      	adds	r7, #12
    439e:	46bd      	mov	sp, r7
    43a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43a4:	4770      	bx	lr

000043a6 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    43a6:	b480      	push	{r7}
    43a8:	b083      	sub	sp, #12
    43aa:	af00      	add	r7, sp, #0
    43ac:	6078      	str	r0, [r7, #4]
    43ae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	683a      	ldr	r2, [r7, #0]
    43b4:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    43b6:	bf00      	nop
    43b8:	370c      	adds	r7, #12
    43ba:	46bd      	mov	sp, r7
    43bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c0:	4770      	bx	lr

000043c2 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    43c2:	b480      	push	{r7}
    43c4:	b083      	sub	sp, #12
    43c6:	af00      	add	r7, sp, #0
    43c8:	6078      	str	r0, [r7, #4]
    43ca:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	683a      	ldr	r2, [r7, #0]
    43d0:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    43d2:	bf00      	nop
    43d4:	370c      	adds	r7, #12
    43d6:	46bd      	mov	sp, r7
    43d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    43dc:	4770      	bx	lr

000043de <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    43de:	b480      	push	{r7}
    43e0:	b085      	sub	sp, #20
    43e2:	af00      	add	r7, sp, #0
    43e4:	60f8      	str	r0, [r7, #12]
    43e6:	460b      	mov	r3, r1
    43e8:	607a      	str	r2, [r7, #4]
    43ea:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    43ec:	7afb      	ldrb	r3, [r7, #11]
    43ee:	68fa      	ldr	r2, [r7, #12]
    43f0:	3306      	adds	r3, #6
    43f2:	009b      	lsls	r3, r3, #2
    43f4:	4413      	add	r3, r2
    43f6:	687a      	ldr	r2, [r7, #4]
    43f8:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    43fa:	bf00      	nop
    43fc:	3714      	adds	r7, #20
    43fe:	46bd      	mov	sp, r7
    4400:	f85d 7b04 	ldr.w	r7, [sp], #4
    4404:	4770      	bx	lr

00004406 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4406:	b480      	push	{r7}
    4408:	b083      	sub	sp, #12
    440a:	af00      	add	r7, sp, #0
    440c:	6078      	str	r0, [r7, #4]
    440e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4410:	687b      	ldr	r3, [r7, #4]
    4412:	683a      	ldr	r2, [r7, #0]
    4414:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4416:	bf00      	nop
    4418:	370c      	adds	r7, #12
    441a:	46bd      	mov	sp, r7
    441c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4420:	4770      	bx	lr

00004422 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4422:	b480      	push	{r7}
    4424:	b083      	sub	sp, #12
    4426:	af00      	add	r7, sp, #0
    4428:	6078      	str	r0, [r7, #4]
    442a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	683a      	ldr	r2, [r7, #0]
    4430:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4432:	bf00      	nop
    4434:	370c      	adds	r7, #12
    4436:	46bd      	mov	sp, r7
    4438:	f85d 7b04 	ldr.w	r7, [sp], #4
    443c:	4770      	bx	lr
	...

00004440 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4440:	b580      	push	{r7, lr}
    4442:	b082      	sub	sp, #8
    4444:	af00      	add	r7, sp, #0
    4446:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4448:	2101      	movs	r1, #1
    444a:	484b      	ldr	r0, [pc, #300]	; (4578 <_ext_irq_init+0x138>)
    444c:	4b4b      	ldr	r3, [pc, #300]	; (457c <_ext_irq_init+0x13c>)
    444e:	4798      	blx	r3
    4450:	4603      	mov	r3, r0
    4452:	f083 0301 	eor.w	r3, r3, #1
    4456:	b2db      	uxtb	r3, r3
    4458:	2b00      	cmp	r3, #0
    445a:	d011      	beq.n	4480 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    445c:	2102      	movs	r1, #2
    445e:	4846      	ldr	r0, [pc, #280]	; (4578 <_ext_irq_init+0x138>)
    4460:	4b47      	ldr	r3, [pc, #284]	; (4580 <_ext_irq_init+0x140>)
    4462:	4798      	blx	r3
    4464:	4603      	mov	r3, r0
    4466:	2b00      	cmp	r3, #0
    4468:	d006      	beq.n	4478 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    446a:	4843      	ldr	r0, [pc, #268]	; (4578 <_ext_irq_init+0x138>)
    446c:	4b45      	ldr	r3, [pc, #276]	; (4584 <_ext_irq_init+0x144>)
    446e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4470:	2102      	movs	r1, #2
    4472:	4841      	ldr	r0, [pc, #260]	; (4578 <_ext_irq_init+0x138>)
    4474:	4b44      	ldr	r3, [pc, #272]	; (4588 <_ext_irq_init+0x148>)
    4476:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4478:	2101      	movs	r1, #1
    447a:	483f      	ldr	r0, [pc, #252]	; (4578 <_ext_irq_init+0x138>)
    447c:	4b43      	ldr	r3, [pc, #268]	; (458c <_ext_irq_init+0x14c>)
    447e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4480:	2101      	movs	r1, #1
    4482:	483d      	ldr	r0, [pc, #244]	; (4578 <_ext_irq_init+0x138>)
    4484:	4b40      	ldr	r3, [pc, #256]	; (4588 <_ext_irq_init+0x148>)
    4486:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4488:	2100      	movs	r1, #0
    448a:	483b      	ldr	r0, [pc, #236]	; (4578 <_ext_irq_init+0x138>)
    448c:	4b40      	ldr	r3, [pc, #256]	; (4590 <_ext_irq_init+0x150>)
    448e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4490:	2100      	movs	r1, #0
    4492:	4839      	ldr	r0, [pc, #228]	; (4578 <_ext_irq_init+0x138>)
    4494:	4b3f      	ldr	r3, [pc, #252]	; (4594 <_ext_irq_init+0x154>)
    4496:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4498:	2100      	movs	r1, #0
    449a:	4837      	ldr	r0, [pc, #220]	; (4578 <_ext_irq_init+0x138>)
    449c:	4b3e      	ldr	r3, [pc, #248]	; (4598 <_ext_irq_init+0x158>)
    449e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    44a0:	f240 31b9 	movw	r1, #953	; 0x3b9
    44a4:	4834      	ldr	r0, [pc, #208]	; (4578 <_ext_irq_init+0x138>)
    44a6:	4b3d      	ldr	r3, [pc, #244]	; (459c <_ext_irq_init+0x15c>)
    44a8:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    44aa:	f240 3139 	movw	r1, #825	; 0x339
    44ae:	4832      	ldr	r0, [pc, #200]	; (4578 <_ext_irq_init+0x138>)
    44b0:	4b3b      	ldr	r3, [pc, #236]	; (45a0 <_ext_irq_init+0x160>)
    44b2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    44b4:	2100      	movs	r1, #0
    44b6:	4830      	ldr	r0, [pc, #192]	; (4578 <_ext_irq_init+0x138>)
    44b8:	4b3a      	ldr	r3, [pc, #232]	; (45a4 <_ext_irq_init+0x164>)
    44ba:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    44bc:	4a3a      	ldr	r2, [pc, #232]	; (45a8 <_ext_irq_init+0x168>)
    44be:	2100      	movs	r1, #0
    44c0:	482d      	ldr	r0, [pc, #180]	; (4578 <_ext_irq_init+0x138>)
    44c2:	4b3a      	ldr	r3, [pc, #232]	; (45ac <_ext_irq_init+0x16c>)
    44c4:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    44c6:	2211      	movs	r2, #17
    44c8:	2101      	movs	r1, #1
    44ca:	482b      	ldr	r0, [pc, #172]	; (4578 <_ext_irq_init+0x138>)
    44cc:	4b37      	ldr	r3, [pc, #220]	; (45ac <_ext_irq_init+0x16c>)
    44ce:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    44d0:	4829      	ldr	r0, [pc, #164]	; (4578 <_ext_irq_init+0x138>)
    44d2:	4b37      	ldr	r3, [pc, #220]	; (45b0 <_ext_irq_init+0x170>)
    44d4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    44d6:	200c      	movs	r0, #12
    44d8:	4b36      	ldr	r3, [pc, #216]	; (45b4 <_ext_irq_init+0x174>)
    44da:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    44dc:	200c      	movs	r0, #12
    44de:	4b36      	ldr	r3, [pc, #216]	; (45b8 <_ext_irq_init+0x178>)
    44e0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    44e2:	200c      	movs	r0, #12
    44e4:	4b35      	ldr	r3, [pc, #212]	; (45bc <_ext_irq_init+0x17c>)
    44e6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    44e8:	200f      	movs	r0, #15
    44ea:	4b32      	ldr	r3, [pc, #200]	; (45b4 <_ext_irq_init+0x174>)
    44ec:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    44ee:	200f      	movs	r0, #15
    44f0:	4b31      	ldr	r3, [pc, #196]	; (45b8 <_ext_irq_init+0x178>)
    44f2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    44f4:	200f      	movs	r0, #15
    44f6:	4b31      	ldr	r3, [pc, #196]	; (45bc <_ext_irq_init+0x17c>)
    44f8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    44fa:	2010      	movs	r0, #16
    44fc:	4b2d      	ldr	r3, [pc, #180]	; (45b4 <_ext_irq_init+0x174>)
    44fe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4500:	2010      	movs	r0, #16
    4502:	4b2d      	ldr	r3, [pc, #180]	; (45b8 <_ext_irq_init+0x178>)
    4504:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4506:	2010      	movs	r0, #16
    4508:	4b2c      	ldr	r3, [pc, #176]	; (45bc <_ext_irq_init+0x17c>)
    450a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    450c:	2011      	movs	r0, #17
    450e:	4b29      	ldr	r3, [pc, #164]	; (45b4 <_ext_irq_init+0x174>)
    4510:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4512:	2011      	movs	r0, #17
    4514:	4b28      	ldr	r3, [pc, #160]	; (45b8 <_ext_irq_init+0x178>)
    4516:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4518:	2011      	movs	r0, #17
    451a:	4b28      	ldr	r3, [pc, #160]	; (45bc <_ext_irq_init+0x17c>)
    451c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    451e:	2012      	movs	r0, #18
    4520:	4b24      	ldr	r3, [pc, #144]	; (45b4 <_ext_irq_init+0x174>)
    4522:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4524:	2012      	movs	r0, #18
    4526:	4b24      	ldr	r3, [pc, #144]	; (45b8 <_ext_irq_init+0x178>)
    4528:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    452a:	2012      	movs	r0, #18
    452c:	4b23      	ldr	r3, [pc, #140]	; (45bc <_ext_irq_init+0x17c>)
    452e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4530:	2013      	movs	r0, #19
    4532:	4b20      	ldr	r3, [pc, #128]	; (45b4 <_ext_irq_init+0x174>)
    4534:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4536:	2013      	movs	r0, #19
    4538:	4b1f      	ldr	r3, [pc, #124]	; (45b8 <_ext_irq_init+0x178>)
    453a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    453c:	2013      	movs	r0, #19
    453e:	4b1f      	ldr	r3, [pc, #124]	; (45bc <_ext_irq_init+0x17c>)
    4540:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4542:	2014      	movs	r0, #20
    4544:	4b1b      	ldr	r3, [pc, #108]	; (45b4 <_ext_irq_init+0x174>)
    4546:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4548:	2014      	movs	r0, #20
    454a:	4b1b      	ldr	r3, [pc, #108]	; (45b8 <_ext_irq_init+0x178>)
    454c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    454e:	2014      	movs	r0, #20
    4550:	4b1a      	ldr	r3, [pc, #104]	; (45bc <_ext_irq_init+0x17c>)
    4552:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4554:	2015      	movs	r0, #21
    4556:	4b17      	ldr	r3, [pc, #92]	; (45b4 <_ext_irq_init+0x174>)
    4558:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    455a:	2015      	movs	r0, #21
    455c:	4b16      	ldr	r3, [pc, #88]	; (45b8 <_ext_irq_init+0x178>)
    455e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4560:	2015      	movs	r0, #21
    4562:	4b16      	ldr	r3, [pc, #88]	; (45bc <_ext_irq_init+0x17c>)
    4564:	4798      	blx	r3

	callback = cb;
    4566:	4a16      	ldr	r2, [pc, #88]	; (45c0 <_ext_irq_init+0x180>)
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    456c:	2300      	movs	r3, #0
}
    456e:	4618      	mov	r0, r3
    4570:	3708      	adds	r7, #8
    4572:	46bd      	mov	sp, r7
    4574:	bd80      	pop	{r7, pc}
    4576:	bf00      	nop
    4578:	40002800 	.word	0x40002800
    457c:	00004201 	.word	0x00004201
    4580:	00004331 	.word	0x00004331
    4584:	000042c1 	.word	0x000042c1
    4588:	000041dd 	.word	0x000041dd
    458c:	00004361 	.word	0x00004361
    4590:	000042ed 	.word	0x000042ed
    4594:	00004389 	.word	0x00004389
    4598:	000043a7 	.word	0x000043a7
    459c:	000043c3 	.word	0x000043c3
    45a0:	00004407 	.word	0x00004407
    45a4:	00004423 	.word	0x00004423
    45a8:	90999003 	.word	0x90999003
    45ac:	000043df 	.word	0x000043df
    45b0:	00004295 	.word	0x00004295
    45b4:	0000415d 	.word	0x0000415d
    45b8:	000041a1 	.word	0x000041a1
    45bc:	00004121 	.word	0x00004121
    45c0:	200007fc 	.word	0x200007fc

000045c4 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    45c4:	b580      	push	{r7, lr}
    45c6:	b084      	sub	sp, #16
    45c8:	af00      	add	r7, sp, #0
    45ca:	6078      	str	r0, [r7, #4]
    45cc:	460b      	mov	r3, r1
    45ce:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    45d0:	23ff      	movs	r3, #255	; 0xff
    45d2:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    45d4:	2300      	movs	r3, #0
    45d6:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    45d8:	e010      	b.n	45fc <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    45da:	7bbb      	ldrb	r3, [r7, #14]
    45dc:	4a1c      	ldr	r2, [pc, #112]	; (4650 <_ext_irq_enable+0x8c>)
    45de:	00db      	lsls	r3, r3, #3
    45e0:	4413      	add	r3, r2
    45e2:	685a      	ldr	r2, [r3, #4]
    45e4:	687b      	ldr	r3, [r7, #4]
    45e6:	429a      	cmp	r2, r3
    45e8:	d105      	bne.n	45f6 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    45ea:	7bbb      	ldrb	r3, [r7, #14]
    45ec:	4a18      	ldr	r2, [pc, #96]	; (4650 <_ext_irq_enable+0x8c>)
    45ee:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    45f2:	73fb      	strb	r3, [r7, #15]
			break;
    45f4:	e005      	b.n	4602 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    45f6:	7bbb      	ldrb	r3, [r7, #14]
    45f8:	3301      	adds	r3, #1
    45fa:	73bb      	strb	r3, [r7, #14]
    45fc:	7bbb      	ldrb	r3, [r7, #14]
    45fe:	2b07      	cmp	r3, #7
    4600:	d9eb      	bls.n	45da <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4602:	7bfb      	ldrb	r3, [r7, #15]
    4604:	2bff      	cmp	r3, #255	; 0xff
    4606:	d102      	bne.n	460e <_ext_irq_enable+0x4a>
		return -1;
    4608:	f04f 33ff 	mov.w	r3, #4294967295
    460c:	e01c      	b.n	4648 <_ext_irq_enable+0x84>
	}

	if (enable) {
    460e:	78fb      	ldrb	r3, [r7, #3]
    4610:	2b00      	cmp	r3, #0
    4612:	d008      	beq.n	4626 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4614:	7bfb      	ldrb	r3, [r7, #15]
    4616:	2201      	movs	r2, #1
    4618:	fa02 f303 	lsl.w	r3, r2, r3
    461c:	4619      	mov	r1, r3
    461e:	480d      	ldr	r0, [pc, #52]	; (4654 <_ext_irq_enable+0x90>)
    4620:	4b0d      	ldr	r3, [pc, #52]	; (4658 <_ext_irq_enable+0x94>)
    4622:	4798      	blx	r3
    4624:	e00f      	b.n	4646 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4626:	7bfb      	ldrb	r3, [r7, #15]
    4628:	2201      	movs	r2, #1
    462a:	fa02 f303 	lsl.w	r3, r2, r3
    462e:	4619      	mov	r1, r3
    4630:	4808      	ldr	r0, [pc, #32]	; (4654 <_ext_irq_enable+0x90>)
    4632:	4b0a      	ldr	r3, [pc, #40]	; (465c <_ext_irq_enable+0x98>)
    4634:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4636:	7bfb      	ldrb	r3, [r7, #15]
    4638:	2201      	movs	r2, #1
    463a:	fa02 f303 	lsl.w	r3, r2, r3
    463e:	4619      	mov	r1, r3
    4640:	4804      	ldr	r0, [pc, #16]	; (4654 <_ext_irq_enable+0x90>)
    4642:	4b07      	ldr	r3, [pc, #28]	; (4660 <_ext_irq_enable+0x9c>)
    4644:	4798      	blx	r3
	}

	return ERR_NONE;
    4646:	2300      	movs	r3, #0
}
    4648:	4618      	mov	r0, r3
    464a:	3710      	adds	r7, #16
    464c:	46bd      	mov	sp, r7
    464e:	bd80      	pop	{r7, pc}
    4650:	0000ee38 	.word	0x0000ee38
    4654:	40002800 	.word	0x40002800
    4658:	0000425d 	.word	0x0000425d
    465c:	00004279 	.word	0x00004279
    4660:	00004241 	.word	0x00004241

00004664 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4664:	b580      	push	{r7, lr}
    4666:	b084      	sub	sp, #16
    4668:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    466a:	4841      	ldr	r0, [pc, #260]	; (4770 <_ext_irq_handler+0x10c>)
    466c:	4b41      	ldr	r3, [pc, #260]	; (4774 <_ext_irq_handler+0x110>)
    466e:	4798      	blx	r3
    4670:	4603      	mov	r3, r0
    4672:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4674:	f04f 33ff 	mov.w	r3, #4294967295
    4678:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    467a:	683b      	ldr	r3, [r7, #0]
    467c:	4619      	mov	r1, r3
    467e:	483c      	ldr	r0, [pc, #240]	; (4770 <_ext_irq_handler+0x10c>)
    4680:	4b3d      	ldr	r3, [pc, #244]	; (4778 <_ext_irq_handler+0x114>)
    4682:	4798      	blx	r3

	ASSERT(callback);
    4684:	4b3d      	ldr	r3, [pc, #244]	; (477c <_ext_irq_handler+0x118>)
    4686:	681b      	ldr	r3, [r3, #0]
    4688:	2b00      	cmp	r3, #0
    468a:	bf14      	ite	ne
    468c:	2301      	movne	r3, #1
    468e:	2300      	moveq	r3, #0
    4690:	b2db      	uxtb	r3, r3
    4692:	f44f 7282 	mov.w	r2, #260	; 0x104
    4696:	493a      	ldr	r1, [pc, #232]	; (4780 <_ext_irq_handler+0x11c>)
    4698:	4618      	mov	r0, r3
    469a:	4b3a      	ldr	r3, [pc, #232]	; (4784 <_ext_irq_handler+0x120>)
    469c:	4798      	blx	r3

	while (flags) {
    469e:	e060      	b.n	4762 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    46a0:	683b      	ldr	r3, [r7, #0]
    46a2:	4618      	mov	r0, r3
    46a4:	4b38      	ldr	r3, [pc, #224]	; (4788 <_ext_irq_handler+0x124>)
    46a6:	4798      	blx	r3
    46a8:	4603      	mov	r3, r0
    46aa:	b2db      	uxtb	r3, r3
    46ac:	3b01      	subs	r3, #1
    46ae:	b2db      	uxtb	r3, r3
    46b0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    46b2:	e047      	b.n	4744 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    46b4:	2300      	movs	r3, #0
    46b6:	71fb      	strb	r3, [r7, #7]
    46b8:	2308      	movs	r3, #8
    46ba:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    46bc:	e024      	b.n	4708 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    46be:	79ba      	ldrb	r2, [r7, #6]
    46c0:	79fb      	ldrb	r3, [r7, #7]
    46c2:	4413      	add	r3, r2
    46c4:	105b      	asrs	r3, r3, #1
    46c6:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    46c8:	797b      	ldrb	r3, [r7, #5]
    46ca:	4a30      	ldr	r2, [pc, #192]	; (478c <_ext_irq_handler+0x128>)
    46cc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    46d0:	461a      	mov	r2, r3
    46d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    46d6:	429a      	cmp	r2, r3
    46d8:	d106      	bne.n	46e8 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    46da:	797b      	ldrb	r3, [r7, #5]
    46dc:	4a2b      	ldr	r2, [pc, #172]	; (478c <_ext_irq_handler+0x128>)
    46de:	00db      	lsls	r3, r3, #3
    46e0:	4413      	add	r3, r2
    46e2:	685b      	ldr	r3, [r3, #4]
    46e4:	60bb      	str	r3, [r7, #8]
					break;
    46e6:	e013      	b.n	4710 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    46e8:	797b      	ldrb	r3, [r7, #5]
    46ea:	4a28      	ldr	r2, [pc, #160]	; (478c <_ext_irq_handler+0x128>)
    46ec:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    46f0:	461a      	mov	r2, r3
    46f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    46f6:	429a      	cmp	r2, r3
    46f8:	da03      	bge.n	4702 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    46fa:	797b      	ldrb	r3, [r7, #5]
    46fc:	3301      	adds	r3, #1
    46fe:	71fb      	strb	r3, [r7, #7]
    4700:	e002      	b.n	4708 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4702:	797b      	ldrb	r3, [r7, #5]
    4704:	3b01      	subs	r3, #1
    4706:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4708:	79ba      	ldrb	r2, [r7, #6]
    470a:	79fb      	ldrb	r3, [r7, #7]
    470c:	429a      	cmp	r2, r3
    470e:	d2d6      	bcs.n	46be <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4710:	68bb      	ldr	r3, [r7, #8]
    4712:	f1b3 3fff 	cmp.w	r3, #4294967295
    4716:	d003      	beq.n	4720 <_ext_irq_handler+0xbc>
				callback(pin);
    4718:	4b18      	ldr	r3, [pc, #96]	; (477c <_ext_irq_handler+0x118>)
    471a:	681b      	ldr	r3, [r3, #0]
    471c:	68b8      	ldr	r0, [r7, #8]
    471e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4720:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4724:	2201      	movs	r2, #1
    4726:	fa02 f303 	lsl.w	r3, r2, r3
    472a:	43da      	mvns	r2, r3
    472c:	683b      	ldr	r3, [r7, #0]
    472e:	4013      	ands	r3, r2
    4730:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4732:	683b      	ldr	r3, [r7, #0]
    4734:	4618      	mov	r0, r3
    4736:	4b14      	ldr	r3, [pc, #80]	; (4788 <_ext_irq_handler+0x124>)
    4738:	4798      	blx	r3
    473a:	4603      	mov	r3, r0
    473c:	b2db      	uxtb	r3, r3
    473e:	3b01      	subs	r3, #1
    4740:	b2db      	uxtb	r3, r3
    4742:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4744:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4748:	f1b3 3fff 	cmp.w	r3, #4294967295
    474c:	d1b2      	bne.n	46b4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    474e:	4808      	ldr	r0, [pc, #32]	; (4770 <_ext_irq_handler+0x10c>)
    4750:	4b08      	ldr	r3, [pc, #32]	; (4774 <_ext_irq_handler+0x110>)
    4752:	4798      	blx	r3
    4754:	4603      	mov	r3, r0
    4756:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4758:	683b      	ldr	r3, [r7, #0]
    475a:	4619      	mov	r1, r3
    475c:	4804      	ldr	r0, [pc, #16]	; (4770 <_ext_irq_handler+0x10c>)
    475e:	4b06      	ldr	r3, [pc, #24]	; (4778 <_ext_irq_handler+0x114>)
    4760:	4798      	blx	r3
	while (flags) {
    4762:	683b      	ldr	r3, [r7, #0]
    4764:	2b00      	cmp	r3, #0
    4766:	d19b      	bne.n	46a0 <_ext_irq_handler+0x3c>
	}
}
    4768:	bf00      	nop
    476a:	3710      	adds	r7, #16
    476c:	46bd      	mov	sp, r7
    476e:	bd80      	pop	{r7, pc}
    4770:	40002800 	.word	0x40002800
    4774:	00004229 	.word	0x00004229
    4778:	00004241 	.word	0x00004241
    477c:	200007fc 	.word	0x200007fc
    4780:	0000ee78 	.word	0x0000ee78
    4784:	0000349d 	.word	0x0000349d
    4788:	0000e829 	.word	0x0000e829
    478c:	0000ee38 	.word	0x0000ee38

00004790 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4790:	b580      	push	{r7, lr}
    4792:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4794:	4b01      	ldr	r3, [pc, #4]	; (479c <EIC_0_Handler+0xc>)
    4796:	4798      	blx	r3
} /**
    4798:	bf00      	nop
    479a:	bd80      	pop	{r7, pc}
    479c:	00004665 	.word	0x00004665

000047a0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    47a0:	b580      	push	{r7, lr}
    47a2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    47a4:	4b01      	ldr	r3, [pc, #4]	; (47ac <EIC_3_Handler+0xc>)
    47a6:	4798      	blx	r3
} /**
    47a8:	bf00      	nop
    47aa:	bd80      	pop	{r7, pc}
    47ac:	00004665 	.word	0x00004665

000047b0 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    47b0:	b580      	push	{r7, lr}
    47b2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    47b4:	4b01      	ldr	r3, [pc, #4]	; (47bc <EIC_4_Handler+0xc>)
    47b6:	4798      	blx	r3
} /**
    47b8:	bf00      	nop
    47ba:	bd80      	pop	{r7, pc}
    47bc:	00004665 	.word	0x00004665

000047c0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    47c0:	b580      	push	{r7, lr}
    47c2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    47c4:	4b01      	ldr	r3, [pc, #4]	; (47cc <EIC_5_Handler+0xc>)
    47c6:	4798      	blx	r3
} /**
    47c8:	bf00      	nop
    47ca:	bd80      	pop	{r7, pc}
    47cc:	00004665 	.word	0x00004665

000047d0 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    47d0:	b580      	push	{r7, lr}
    47d2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    47d4:	4b01      	ldr	r3, [pc, #4]	; (47dc <EIC_6_Handler+0xc>)
    47d6:	4798      	blx	r3
} /**
    47d8:	bf00      	nop
    47da:	bd80      	pop	{r7, pc}
    47dc:	00004665 	.word	0x00004665

000047e0 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    47e0:	b580      	push	{r7, lr}
    47e2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    47e4:	4b01      	ldr	r3, [pc, #4]	; (47ec <EIC_7_Handler+0xc>)
    47e6:	4798      	blx	r3
} /**
    47e8:	bf00      	nop
    47ea:	bd80      	pop	{r7, pc}
    47ec:	00004665 	.word	0x00004665

000047f0 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    47f0:	b580      	push	{r7, lr}
    47f2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    47f4:	4b01      	ldr	r3, [pc, #4]	; (47fc <EIC_8_Handler+0xc>)
    47f6:	4798      	blx	r3
} /**
    47f8:	bf00      	nop
    47fa:	bd80      	pop	{r7, pc}
    47fc:	00004665 	.word	0x00004665

00004800 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4800:	b580      	push	{r7, lr}
    4802:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4804:	4b01      	ldr	r3, [pc, #4]	; (480c <EIC_9_Handler+0xc>)
    4806:	4798      	blx	r3
}
    4808:	bf00      	nop
    480a:	bd80      	pop	{r7, pc}
    480c:	00004665 	.word	0x00004665

00004810 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4810:	b480      	push	{r7}
    4812:	b085      	sub	sp, #20
    4814:	af00      	add	r7, sp, #0
    4816:	60f8      	str	r0, [r7, #12]
    4818:	460b      	mov	r3, r1
    481a:	607a      	str	r2, [r7, #4]
    481c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    481e:	7afa      	ldrb	r2, [r7, #11]
    4820:	68fb      	ldr	r3, [r7, #12]
    4822:	3248      	adds	r2, #72	; 0x48
    4824:	6879      	ldr	r1, [r7, #4]
    4826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    482a:	bf00      	nop
    482c:	3714      	adds	r7, #20
    482e:	46bd      	mov	sp, r7
    4830:	f85d 7b04 	ldr.w	r7, [sp], #4
    4834:	4770      	bx	lr

00004836 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4836:	b480      	push	{r7}
    4838:	b083      	sub	sp, #12
    483a:	af00      	add	r7, sp, #0
    483c:	6078      	str	r0, [r7, #4]
    483e:	460b      	mov	r3, r1
    4840:	70fb      	strb	r3, [r7, #3]
    4842:	4613      	mov	r3, r2
    4844:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4846:	78fb      	ldrb	r3, [r7, #3]
    4848:	687a      	ldr	r2, [r7, #4]
    484a:	3304      	adds	r3, #4
    484c:	00db      	lsls	r3, r3, #3
    484e:	4413      	add	r3, r2
    4850:	78ba      	ldrb	r2, [r7, #2]
    4852:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4854:	78fb      	ldrb	r3, [r7, #3]
    4856:	78ba      	ldrb	r2, [r7, #2]
    4858:	43d2      	mvns	r2, r2
    485a:	b2d1      	uxtb	r1, r2
    485c:	687a      	ldr	r2, [r7, #4]
    485e:	3304      	adds	r3, #4
    4860:	00db      	lsls	r3, r3, #3
    4862:	4413      	add	r3, r2
    4864:	460a      	mov	r2, r1
    4866:	711a      	strb	r2, [r3, #4]
}
    4868:	bf00      	nop
    486a:	370c      	adds	r7, #12
    486c:	46bd      	mov	sp, r7
    486e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4872:	4770      	bx	lr

00004874 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4874:	b480      	push	{r7}
    4876:	b085      	sub	sp, #20
    4878:	af00      	add	r7, sp, #0
    487a:	60f8      	str	r0, [r7, #12]
    487c:	460b      	mov	r3, r1
    487e:	607a      	str	r2, [r7, #4]
    4880:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4882:	7afa      	ldrb	r2, [r7, #11]
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	3204      	adds	r2, #4
    4888:	6879      	ldr	r1, [r7, #4]
    488a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    488e:	bf00      	nop
    4890:	3714      	adds	r7, #20
    4892:	46bd      	mov	sp, r7
    4894:	f85d 7b04 	ldr.w	r7, [sp], #4
    4898:	4770      	bx	lr
	...

0000489c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    489c:	b580      	push	{r7, lr}
    489e:	b082      	sub	sp, #8
    48a0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    48a2:	2300      	movs	r3, #0
    48a4:	71fb      	strb	r3, [r7, #7]
    48a6:	e00b      	b.n	48c0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    48a8:	79fb      	ldrb	r3, [r7, #7]
    48aa:	4a18      	ldr	r2, [pc, #96]	; (490c <_event_system_init+0x70>)
    48ac:	5cd3      	ldrb	r3, [r2, r3]
    48ae:	461a      	mov	r2, r3
    48b0:	79fb      	ldrb	r3, [r7, #7]
    48b2:	4619      	mov	r1, r3
    48b4:	4816      	ldr	r0, [pc, #88]	; (4910 <_event_system_init+0x74>)
    48b6:	4b17      	ldr	r3, [pc, #92]	; (4914 <_event_system_init+0x78>)
    48b8:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    48ba:	79fb      	ldrb	r3, [r7, #7]
    48bc:	3301      	adds	r3, #1
    48be:	71fb      	strb	r3, [r7, #7]
    48c0:	79fb      	ldrb	r3, [r7, #7]
    48c2:	2b42      	cmp	r3, #66	; 0x42
    48c4:	d9f0      	bls.n	48a8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    48c6:	2300      	movs	r3, #0
    48c8:	71fb      	strb	r3, [r7, #7]
    48ca:	e016      	b.n	48fa <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    48cc:	79fb      	ldrb	r3, [r7, #7]
    48ce:	4a12      	ldr	r2, [pc, #72]	; (4918 <_event_system_init+0x7c>)
    48d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    48d4:	461a      	mov	r2, r3
    48d6:	79fb      	ldrb	r3, [r7, #7]
    48d8:	4619      	mov	r1, r3
    48da:	480d      	ldr	r0, [pc, #52]	; (4910 <_event_system_init+0x74>)
    48dc:	4b0f      	ldr	r3, [pc, #60]	; (491c <_event_system_init+0x80>)
    48de:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    48e0:	79fb      	ldrb	r3, [r7, #7]
    48e2:	4a0f      	ldr	r2, [pc, #60]	; (4920 <_event_system_init+0x84>)
    48e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    48e8:	b2da      	uxtb	r2, r3
    48ea:	79fb      	ldrb	r3, [r7, #7]
    48ec:	4619      	mov	r1, r3
    48ee:	4808      	ldr	r0, [pc, #32]	; (4910 <_event_system_init+0x74>)
    48f0:	4b0c      	ldr	r3, [pc, #48]	; (4924 <_event_system_init+0x88>)
    48f2:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    48f4:	79fb      	ldrb	r3, [r7, #7]
    48f6:	3301      	adds	r3, #1
    48f8:	71fb      	strb	r3, [r7, #7]
    48fa:	79fb      	ldrb	r3, [r7, #7]
    48fc:	2b1f      	cmp	r3, #31
    48fe:	d9e5      	bls.n	48cc <_event_system_init+0x30>
	}

	return ERR_NONE;
    4900:	2300      	movs	r3, #0
}
    4902:	4618      	mov	r0, r3
    4904:	3708      	adds	r7, #8
    4906:	46bd      	mov	sp, r7
    4908:	bd80      	pop	{r7, pc}
    490a:	bf00      	nop
    490c:	0000ee90 	.word	0x0000ee90
    4910:	4100e000 	.word	0x4100e000
    4914:	00004811 	.word	0x00004811
    4918:	0000eed4 	.word	0x0000eed4
    491c:	00004875 	.word	0x00004875
    4920:	0000ef14 	.word	0x0000ef14
    4924:	00004837 	.word	0x00004837

00004928 <hri_gclk_wait_for_sync>:
{
    4928:	b480      	push	{r7}
    492a:	b083      	sub	sp, #12
    492c:	af00      	add	r7, sp, #0
    492e:	6078      	str	r0, [r7, #4]
    4930:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4932:	bf00      	nop
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	685a      	ldr	r2, [r3, #4]
    4938:	683b      	ldr	r3, [r7, #0]
    493a:	4013      	ands	r3, r2
    493c:	2b00      	cmp	r3, #0
    493e:	d1f9      	bne.n	4934 <hri_gclk_wait_for_sync+0xc>
}
    4940:	bf00      	nop
    4942:	370c      	adds	r7, #12
    4944:	46bd      	mov	sp, r7
    4946:	f85d 7b04 	ldr.w	r7, [sp], #4
    494a:	4770      	bx	lr

0000494c <hri_gclk_write_GENCTRL_reg>:
{
    494c:	b580      	push	{r7, lr}
    494e:	b084      	sub	sp, #16
    4950:	af00      	add	r7, sp, #0
    4952:	60f8      	str	r0, [r7, #12]
    4954:	460b      	mov	r3, r1
    4956:	607a      	str	r2, [r7, #4]
    4958:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    495a:	7afa      	ldrb	r2, [r7, #11]
    495c:	68fb      	ldr	r3, [r7, #12]
    495e:	3208      	adds	r2, #8
    4960:	6879      	ldr	r1, [r7, #4]
    4962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4966:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    496a:	68f8      	ldr	r0, [r7, #12]
    496c:	4b02      	ldr	r3, [pc, #8]	; (4978 <hri_gclk_write_GENCTRL_reg+0x2c>)
    496e:	4798      	blx	r3
}
    4970:	bf00      	nop
    4972:	3710      	adds	r7, #16
    4974:	46bd      	mov	sp, r7
    4976:	bd80      	pop	{r7, pc}
    4978:	00004929 	.word	0x00004929

0000497c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    497c:	b580      	push	{r7, lr}
    497e:	b082      	sub	sp, #8
    4980:	af00      	add	r7, sp, #0
    4982:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	f003 0301 	and.w	r3, r3, #1
    498a:	2b00      	cmp	r3, #0
    498c:	d004      	beq.n	4998 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    498e:	4a36      	ldr	r2, [pc, #216]	; (4a68 <_gclk_init_generators_by_fref+0xec>)
    4990:	2100      	movs	r1, #0
    4992:	4836      	ldr	r0, [pc, #216]	; (4a6c <_gclk_init_generators_by_fref+0xf0>)
    4994:	4b36      	ldr	r3, [pc, #216]	; (4a70 <_gclk_init_generators_by_fref+0xf4>)
    4996:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4998:	687b      	ldr	r3, [r7, #4]
    499a:	f003 0302 	and.w	r3, r3, #2
    499e:	2b00      	cmp	r3, #0
    49a0:	d004      	beq.n	49ac <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    49a2:	4a34      	ldr	r2, [pc, #208]	; (4a74 <_gclk_init_generators_by_fref+0xf8>)
    49a4:	2101      	movs	r1, #1
    49a6:	4831      	ldr	r0, [pc, #196]	; (4a6c <_gclk_init_generators_by_fref+0xf0>)
    49a8:	4b31      	ldr	r3, [pc, #196]	; (4a70 <_gclk_init_generators_by_fref+0xf4>)
    49aa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    49ac:	687b      	ldr	r3, [r7, #4]
    49ae:	f003 0304 	and.w	r3, r3, #4
    49b2:	2b00      	cmp	r3, #0
    49b4:	d004      	beq.n	49c0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    49b6:	4a30      	ldr	r2, [pc, #192]	; (4a78 <_gclk_init_generators_by_fref+0xfc>)
    49b8:	2102      	movs	r1, #2
    49ba:	482c      	ldr	r0, [pc, #176]	; (4a6c <_gclk_init_generators_by_fref+0xf0>)
    49bc:	4b2c      	ldr	r3, [pc, #176]	; (4a70 <_gclk_init_generators_by_fref+0xf4>)
    49be:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    49c0:	687b      	ldr	r3, [r7, #4]
    49c2:	f003 0308 	and.w	r3, r3, #8
    49c6:	2b00      	cmp	r3, #0
    49c8:	d004      	beq.n	49d4 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    49ca:	4a2c      	ldr	r2, [pc, #176]	; (4a7c <_gclk_init_generators_by_fref+0x100>)
    49cc:	2103      	movs	r1, #3
    49ce:	4827      	ldr	r0, [pc, #156]	; (4a6c <_gclk_init_generators_by_fref+0xf0>)
    49d0:	4b27      	ldr	r3, [pc, #156]	; (4a70 <_gclk_init_generators_by_fref+0xf4>)
    49d2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	f003 0310 	and.w	r3, r3, #16
    49da:	2b00      	cmp	r3, #0
    49dc:	d004      	beq.n	49e8 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    49de:	4a28      	ldr	r2, [pc, #160]	; (4a80 <_gclk_init_generators_by_fref+0x104>)
    49e0:	2104      	movs	r1, #4
    49e2:	4822      	ldr	r0, [pc, #136]	; (4a6c <_gclk_init_generators_by_fref+0xf0>)
    49e4:	4b22      	ldr	r3, [pc, #136]	; (4a70 <_gclk_init_generators_by_fref+0xf4>)
    49e6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    49e8:	687b      	ldr	r3, [r7, #4]
    49ea:	f003 0320 	and.w	r3, r3, #32
    49ee:	2b00      	cmp	r3, #0
    49f0:	d004      	beq.n	49fc <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    49f2:	4a24      	ldr	r2, [pc, #144]	; (4a84 <_gclk_init_generators_by_fref+0x108>)
    49f4:	2105      	movs	r1, #5
    49f6:	481d      	ldr	r0, [pc, #116]	; (4a6c <_gclk_init_generators_by_fref+0xf0>)
    49f8:	4b1d      	ldr	r3, [pc, #116]	; (4a70 <_gclk_init_generators_by_fref+0xf4>)
    49fa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    49fc:	687b      	ldr	r3, [r7, #4]
    49fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4a02:	2b00      	cmp	r3, #0
    4a04:	d004      	beq.n	4a10 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4a06:	4a20      	ldr	r2, [pc, #128]	; (4a88 <_gclk_init_generators_by_fref+0x10c>)
    4a08:	2106      	movs	r1, #6
    4a0a:	4818      	ldr	r0, [pc, #96]	; (4a6c <_gclk_init_generators_by_fref+0xf0>)
    4a0c:	4b18      	ldr	r3, [pc, #96]	; (4a70 <_gclk_init_generators_by_fref+0xf4>)
    4a0e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4a16:	2b00      	cmp	r3, #0
    4a18:	d004      	beq.n	4a24 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4a1a:	4a1c      	ldr	r2, [pc, #112]	; (4a8c <_gclk_init_generators_by_fref+0x110>)
    4a1c:	2107      	movs	r1, #7
    4a1e:	4813      	ldr	r0, [pc, #76]	; (4a6c <_gclk_init_generators_by_fref+0xf0>)
    4a20:	4b13      	ldr	r3, [pc, #76]	; (4a70 <_gclk_init_generators_by_fref+0xf4>)
    4a22:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4a24:	687b      	ldr	r3, [r7, #4]
    4a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d004      	beq.n	4a38 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4a2e:	4a18      	ldr	r2, [pc, #96]	; (4a90 <_gclk_init_generators_by_fref+0x114>)
    4a30:	2108      	movs	r1, #8
    4a32:	480e      	ldr	r0, [pc, #56]	; (4a6c <_gclk_init_generators_by_fref+0xf0>)
    4a34:	4b0e      	ldr	r3, [pc, #56]	; (4a70 <_gclk_init_generators_by_fref+0xf4>)
    4a36:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d004      	beq.n	4a4c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4a42:	4a14      	ldr	r2, [pc, #80]	; (4a94 <_gclk_init_generators_by_fref+0x118>)
    4a44:	210a      	movs	r1, #10
    4a46:	4809      	ldr	r0, [pc, #36]	; (4a6c <_gclk_init_generators_by_fref+0xf0>)
    4a48:	4b09      	ldr	r3, [pc, #36]	; (4a70 <_gclk_init_generators_by_fref+0xf4>)
    4a4a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4a4c:	687b      	ldr	r3, [r7, #4]
    4a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4a52:	2b00      	cmp	r3, #0
    4a54:	d004      	beq.n	4a60 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4a56:	4a10      	ldr	r2, [pc, #64]	; (4a98 <_gclk_init_generators_by_fref+0x11c>)
    4a58:	210b      	movs	r1, #11
    4a5a:	4804      	ldr	r0, [pc, #16]	; (4a6c <_gclk_init_generators_by_fref+0xf0>)
    4a5c:	4b04      	ldr	r3, [pc, #16]	; (4a70 <_gclk_init_generators_by_fref+0xf4>)
    4a5e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4a60:	bf00      	nop
    4a62:	3708      	adds	r7, #8
    4a64:	46bd      	mov	sp, r7
    4a66:	bd80      	pop	{r7, pc}
    4a68:	00010107 	.word	0x00010107
    4a6c:	40001c00 	.word	0x40001c00
    4a70:	0000494d 	.word	0x0000494d
    4a74:	00010907 	.word	0x00010907
    4a78:	00010906 	.word	0x00010906
    4a7c:	00020908 	.word	0x00020908
    4a80:	00010901 	.word	0x00010901
    4a84:	00062901 	.word	0x00062901
    4a88:	000c2901 	.word	0x000c2901
    4a8c:	00082908 	.word	0x00082908
    4a90:	00032901 	.word	0x00032901
    4a94:	00010905 	.word	0x00010905
    4a98:	00041905 	.word	0x00041905

00004a9c <hri_mclk_write_CPUDIV_reg>:
{
    4a9c:	b480      	push	{r7}
    4a9e:	b083      	sub	sp, #12
    4aa0:	af00      	add	r7, sp, #0
    4aa2:	6078      	str	r0, [r7, #4]
    4aa4:	460b      	mov	r3, r1
    4aa6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4aa8:	687b      	ldr	r3, [r7, #4]
    4aaa:	78fa      	ldrb	r2, [r7, #3]
    4aac:	715a      	strb	r2, [r3, #5]
}
    4aae:	bf00      	nop
    4ab0:	370c      	adds	r7, #12
    4ab2:	46bd      	mov	sp, r7
    4ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ab8:	4770      	bx	lr
	...

00004abc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4abc:	b580      	push	{r7, lr}
    4abe:	b082      	sub	sp, #8
    4ac0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4ac2:	4b05      	ldr	r3, [pc, #20]	; (4ad8 <_mclk_init+0x1c>)
    4ac4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4ac6:	2101      	movs	r1, #1
    4ac8:	6878      	ldr	r0, [r7, #4]
    4aca:	4b04      	ldr	r3, [pc, #16]	; (4adc <_mclk_init+0x20>)
    4acc:	4798      	blx	r3
}
    4ace:	bf00      	nop
    4ad0:	3708      	adds	r7, #8
    4ad2:	46bd      	mov	sp, r7
    4ad4:	bd80      	pop	{r7, pc}
    4ad6:	bf00      	nop
    4ad8:	40000800 	.word	0x40000800
    4adc:	00004a9d 	.word	0x00004a9d

00004ae0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4ae0:	b480      	push	{r7}
    4ae2:	b083      	sub	sp, #12
    4ae4:	af00      	add	r7, sp, #0
    4ae6:	6078      	str	r0, [r7, #4]
    4ae8:	460b      	mov	r3, r1
    4aea:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	78fa      	ldrb	r2, [r7, #3]
    4af0:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4af2:	bf00      	nop
    4af4:	370c      	adds	r7, #12
    4af6:	46bd      	mov	sp, r7
    4af8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4afc:	4770      	bx	lr

00004afe <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4afe:	b480      	push	{r7}
    4b00:	b083      	sub	sp, #12
    4b02:	af00      	add	r7, sp, #0
    4b04:	6078      	str	r0, [r7, #4]
    4b06:	460b      	mov	r3, r1
    4b08:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4b0a:	687b      	ldr	r3, [r7, #4]
    4b0c:	887a      	ldrh	r2, [r7, #2]
    4b0e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4b10:	bf00      	nop
    4b12:	370c      	adds	r7, #12
    4b14:	46bd      	mov	sp, r7
    4b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b1a:	4770      	bx	lr

00004b1c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4b1c:	b480      	push	{r7}
    4b1e:	b083      	sub	sp, #12
    4b20:	af00      	add	r7, sp, #0
    4b22:	6078      	str	r0, [r7, #4]
    4b24:	460b      	mov	r3, r1
    4b26:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	78fa      	ldrb	r2, [r7, #3]
    4b2c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4b2e:	bf00      	nop
    4b30:	370c      	adds	r7, #12
    4b32:	46bd      	mov	sp, r7
    4b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b38:	4770      	bx	lr

00004b3a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4b3a:	b480      	push	{r7}
    4b3c:	b083      	sub	sp, #12
    4b3e:	af00      	add	r7, sp, #0
    4b40:	6078      	str	r0, [r7, #4]
    4b42:	460b      	mov	r3, r1
    4b44:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4b46:	687b      	ldr	r3, [r7, #4]
    4b48:	78fa      	ldrb	r2, [r7, #3]
    4b4a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4b4c:	bf00      	nop
    4b4e:	370c      	adds	r7, #12
    4b50:	46bd      	mov	sp, r7
    4b52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b56:	4770      	bx	lr

00004b58 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4b58:	b480      	push	{r7}
    4b5a:	b085      	sub	sp, #20
    4b5c:	af00      	add	r7, sp, #0
    4b5e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	69db      	ldr	r3, [r3, #28]
    4b64:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4b66:	68fb      	ldr	r3, [r7, #12]
    4b68:	0a1b      	lsrs	r3, r3, #8
    4b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4b6e:	60fb      	str	r3, [r7, #12]
	return tmp;
    4b70:	68fb      	ldr	r3, [r7, #12]
}
    4b72:	4618      	mov	r0, r3
    4b74:	3714      	adds	r7, #20
    4b76:	46bd      	mov	sp, r7
    4b78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b7c:	4770      	bx	lr

00004b7e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4b7e:	b480      	push	{r7}
    4b80:	b083      	sub	sp, #12
    4b82:	af00      	add	r7, sp, #0
    4b84:	6078      	str	r0, [r7, #4]
    4b86:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	683a      	ldr	r2, [r7, #0]
    4b8c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4b8e:	bf00      	nop
    4b90:	370c      	adds	r7, #12
    4b92:	46bd      	mov	sp, r7
    4b94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b98:	4770      	bx	lr
	...

00004b9c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4b9c:	b580      	push	{r7, lr}
    4b9e:	b082      	sub	sp, #8
    4ba0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4ba2:	4b13      	ldr	r3, [pc, #76]	; (4bf0 <_osc32kctrl_init_sources+0x54>)
    4ba4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4ba6:	2300      	movs	r3, #0
    4ba8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4baa:	f242 018e 	movw	r1, #8334	; 0x208e
    4bae:	6878      	ldr	r0, [r7, #4]
    4bb0:	4b10      	ldr	r3, [pc, #64]	; (4bf4 <_osc32kctrl_init_sources+0x58>)
    4bb2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4bb4:	2100      	movs	r1, #0
    4bb6:	6878      	ldr	r0, [r7, #4]
    4bb8:	4b0f      	ldr	r3, [pc, #60]	; (4bf8 <_osc32kctrl_init_sources+0x5c>)
    4bba:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4bbc:	2100      	movs	r1, #0
    4bbe:	6878      	ldr	r0, [r7, #4]
    4bc0:	4b0e      	ldr	r3, [pc, #56]	; (4bfc <_osc32kctrl_init_sources+0x60>)
    4bc2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4bc4:	6878      	ldr	r0, [r7, #4]
    4bc6:	4b0e      	ldr	r3, [pc, #56]	; (4c00 <_osc32kctrl_init_sources+0x64>)
    4bc8:	4798      	blx	r3
    4bca:	4603      	mov	r3, r0
    4bcc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4bce:	887b      	ldrh	r3, [r7, #2]
    4bd0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4bd2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4bd6:	4619      	mov	r1, r3
    4bd8:	6878      	ldr	r0, [r7, #4]
    4bda:	4b0a      	ldr	r3, [pc, #40]	; (4c04 <_osc32kctrl_init_sources+0x68>)
    4bdc:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4bde:	2100      	movs	r1, #0
    4be0:	6878      	ldr	r0, [r7, #4]
    4be2:	4b09      	ldr	r3, [pc, #36]	; (4c08 <_osc32kctrl_init_sources+0x6c>)
    4be4:	4798      	blx	r3
	(void)calib;
}
    4be6:	bf00      	nop
    4be8:	3708      	adds	r7, #8
    4bea:	46bd      	mov	sp, r7
    4bec:	bd80      	pop	{r7, pc}
    4bee:	bf00      	nop
    4bf0:	40001400 	.word	0x40001400
    4bf4:	00004aff 	.word	0x00004aff
    4bf8:	00004b1d 	.word	0x00004b1d
    4bfc:	00004b3b 	.word	0x00004b3b
    4c00:	00004b59 	.word	0x00004b59
    4c04:	00004b7f 	.word	0x00004b7f
    4c08:	00004ae1 	.word	0x00004ae1

00004c0c <hri_gclk_wait_for_sync>:
{
    4c0c:	b480      	push	{r7}
    4c0e:	b083      	sub	sp, #12
    4c10:	af00      	add	r7, sp, #0
    4c12:	6078      	str	r0, [r7, #4]
    4c14:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4c16:	bf00      	nop
    4c18:	687b      	ldr	r3, [r7, #4]
    4c1a:	685a      	ldr	r2, [r3, #4]
    4c1c:	683b      	ldr	r3, [r7, #0]
    4c1e:	4013      	ands	r3, r2
    4c20:	2b00      	cmp	r3, #0
    4c22:	d1f9      	bne.n	4c18 <hri_gclk_wait_for_sync+0xc>
}
    4c24:	bf00      	nop
    4c26:	370c      	adds	r7, #12
    4c28:	46bd      	mov	sp, r7
    4c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c2e:	4770      	bx	lr

00004c30 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4c30:	b480      	push	{r7}
    4c32:	b083      	sub	sp, #12
    4c34:	af00      	add	r7, sp, #0
    4c36:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4c38:	687b      	ldr	r3, [r7, #4]
    4c3a:	685b      	ldr	r3, [r3, #4]
    4c3c:	089b      	lsrs	r3, r3, #2
    4c3e:	f003 0301 	and.w	r3, r3, #1
    4c42:	2b00      	cmp	r3, #0
    4c44:	bf14      	ite	ne
    4c46:	2301      	movne	r3, #1
    4c48:	2300      	moveq	r3, #0
    4c4a:	b2db      	uxtb	r3, r3
}
    4c4c:	4618      	mov	r0, r3
    4c4e:	370c      	adds	r7, #12
    4c50:	46bd      	mov	sp, r7
    4c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c56:	4770      	bx	lr

00004c58 <hri_gclk_read_SYNCBUSY_reg>:
{
    4c58:	b480      	push	{r7}
    4c5a:	b083      	sub	sp, #12
    4c5c:	af00      	add	r7, sp, #0
    4c5e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4c60:	687b      	ldr	r3, [r7, #4]
    4c62:	685b      	ldr	r3, [r3, #4]
}
    4c64:	4618      	mov	r0, r3
    4c66:	370c      	adds	r7, #12
    4c68:	46bd      	mov	sp, r7
    4c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c6e:	4770      	bx	lr

00004c70 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4c70:	b580      	push	{r7, lr}
    4c72:	b086      	sub	sp, #24
    4c74:	af00      	add	r7, sp, #0
    4c76:	60f8      	str	r0, [r7, #12]
    4c78:	460b      	mov	r3, r1
    4c7a:	607a      	str	r2, [r7, #4]
    4c7c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4c7e:	7afa      	ldrb	r2, [r7, #11]
    4c80:	68fb      	ldr	r3, [r7, #12]
    4c82:	3208      	adds	r2, #8
    4c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4c88:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4c8a:	697b      	ldr	r3, [r7, #20]
    4c8c:	f023 030f 	bic.w	r3, r3, #15
    4c90:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4c92:	687b      	ldr	r3, [r7, #4]
    4c94:	f003 030f 	and.w	r3, r3, #15
    4c98:	697a      	ldr	r2, [r7, #20]
    4c9a:	4313      	orrs	r3, r2
    4c9c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4c9e:	7afa      	ldrb	r2, [r7, #11]
    4ca0:	68fb      	ldr	r3, [r7, #12]
    4ca2:	3208      	adds	r2, #8
    4ca4:	6979      	ldr	r1, [r7, #20]
    4ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4caa:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4cae:	68f8      	ldr	r0, [r7, #12]
    4cb0:	4b02      	ldr	r3, [pc, #8]	; (4cbc <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4cb2:	4798      	blx	r3
}
    4cb4:	bf00      	nop
    4cb6:	3718      	adds	r7, #24
    4cb8:	46bd      	mov	sp, r7
    4cba:	bd80      	pop	{r7, pc}
    4cbc:	00004c0d 	.word	0x00004c0d

00004cc0 <hri_gclk_write_PCHCTRL_reg>:
{
    4cc0:	b480      	push	{r7}
    4cc2:	b085      	sub	sp, #20
    4cc4:	af00      	add	r7, sp, #0
    4cc6:	60f8      	str	r0, [r7, #12]
    4cc8:	460b      	mov	r3, r1
    4cca:	607a      	str	r2, [r7, #4]
    4ccc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4cce:	7afa      	ldrb	r2, [r7, #11]
    4cd0:	68fb      	ldr	r3, [r7, #12]
    4cd2:	3220      	adds	r2, #32
    4cd4:	6879      	ldr	r1, [r7, #4]
    4cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4cda:	bf00      	nop
    4cdc:	3714      	adds	r7, #20
    4cde:	46bd      	mov	sp, r7
    4ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ce4:	4770      	bx	lr

00004ce6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4ce6:	b480      	push	{r7}
    4ce8:	b085      	sub	sp, #20
    4cea:	af00      	add	r7, sp, #0
    4cec:	60f8      	str	r0, [r7, #12]
    4cee:	460b      	mov	r3, r1
    4cf0:	607a      	str	r2, [r7, #4]
    4cf2:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4cf4:	bf00      	nop
    4cf6:	7afa      	ldrb	r2, [r7, #11]
    4cf8:	68f9      	ldr	r1, [r7, #12]
    4cfa:	4613      	mov	r3, r2
    4cfc:	009b      	lsls	r3, r3, #2
    4cfe:	4413      	add	r3, r2
    4d00:	009b      	lsls	r3, r3, #2
    4d02:	440b      	add	r3, r1
    4d04:	333c      	adds	r3, #60	; 0x3c
    4d06:	681a      	ldr	r2, [r3, #0]
    4d08:	687b      	ldr	r3, [r7, #4]
    4d0a:	4013      	ands	r3, r2
    4d0c:	2b00      	cmp	r3, #0
    4d0e:	d1f2      	bne.n	4cf6 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4d10:	bf00      	nop
    4d12:	3714      	adds	r7, #20
    4d14:	46bd      	mov	sp, r7
    4d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d1a:	4770      	bx	lr

00004d1c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4d1c:	b480      	push	{r7}
    4d1e:	b083      	sub	sp, #12
    4d20:	af00      	add	r7, sp, #0
    4d22:	6078      	str	r0, [r7, #4]
    4d24:	460b      	mov	r3, r1
    4d26:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4d28:	78fa      	ldrb	r2, [r7, #3]
    4d2a:	6879      	ldr	r1, [r7, #4]
    4d2c:	4613      	mov	r3, r2
    4d2e:	009b      	lsls	r3, r3, #2
    4d30:	4413      	add	r3, r2
    4d32:	009b      	lsls	r3, r3, #2
    4d34:	440b      	add	r3, r1
    4d36:	3340      	adds	r3, #64	; 0x40
    4d38:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4d3a:	f003 0301 	and.w	r3, r3, #1
    4d3e:	2b00      	cmp	r3, #0
    4d40:	bf14      	ite	ne
    4d42:	2301      	movne	r3, #1
    4d44:	2300      	moveq	r3, #0
    4d46:	b2db      	uxtb	r3, r3
}
    4d48:	4618      	mov	r0, r3
    4d4a:	370c      	adds	r7, #12
    4d4c:	46bd      	mov	sp, r7
    4d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d52:	4770      	bx	lr

00004d54 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4d54:	b480      	push	{r7}
    4d56:	b083      	sub	sp, #12
    4d58:	af00      	add	r7, sp, #0
    4d5a:	6078      	str	r0, [r7, #4]
    4d5c:	460b      	mov	r3, r1
    4d5e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4d60:	78fa      	ldrb	r2, [r7, #3]
    4d62:	6879      	ldr	r1, [r7, #4]
    4d64:	4613      	mov	r3, r2
    4d66:	009b      	lsls	r3, r3, #2
    4d68:	4413      	add	r3, r2
    4d6a:	009b      	lsls	r3, r3, #2
    4d6c:	440b      	add	r3, r1
    4d6e:	3340      	adds	r3, #64	; 0x40
    4d70:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4d72:	085b      	lsrs	r3, r3, #1
    4d74:	f003 0301 	and.w	r3, r3, #1
    4d78:	2b00      	cmp	r3, #0
    4d7a:	bf14      	ite	ne
    4d7c:	2301      	movne	r3, #1
    4d7e:	2300      	moveq	r3, #0
    4d80:	b2db      	uxtb	r3, r3
}
    4d82:	4618      	mov	r0, r3
    4d84:	370c      	adds	r7, #12
    4d86:	46bd      	mov	sp, r7
    4d88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d8c:	4770      	bx	lr
	...

00004d90 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4d90:	b580      	push	{r7, lr}
    4d92:	b082      	sub	sp, #8
    4d94:	af00      	add	r7, sp, #0
    4d96:	6078      	str	r0, [r7, #4]
    4d98:	460b      	mov	r3, r1
    4d9a:	70fb      	strb	r3, [r7, #3]
    4d9c:	4613      	mov	r3, r2
    4d9e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4da0:	78fa      	ldrb	r2, [r7, #3]
    4da2:	6879      	ldr	r1, [r7, #4]
    4da4:	4613      	mov	r3, r2
    4da6:	009b      	lsls	r3, r3, #2
    4da8:	4413      	add	r3, r2
    4daa:	009b      	lsls	r3, r3, #2
    4dac:	440b      	add	r3, r1
    4dae:	3330      	adds	r3, #48	; 0x30
    4db0:	78ba      	ldrb	r2, [r7, #2]
    4db2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4db4:	78fb      	ldrb	r3, [r7, #3]
    4db6:	2202      	movs	r2, #2
    4db8:	4619      	mov	r1, r3
    4dba:	6878      	ldr	r0, [r7, #4]
    4dbc:	4b02      	ldr	r3, [pc, #8]	; (4dc8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4dbe:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4dc0:	bf00      	nop
    4dc2:	3708      	adds	r7, #8
    4dc4:	46bd      	mov	sp, r7
    4dc6:	bd80      	pop	{r7, pc}
    4dc8:	00004ce7 	.word	0x00004ce7

00004dcc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4dcc:	b580      	push	{r7, lr}
    4dce:	b084      	sub	sp, #16
    4dd0:	af00      	add	r7, sp, #0
    4dd2:	60f8      	str	r0, [r7, #12]
    4dd4:	460b      	mov	r3, r1
    4dd6:	607a      	str	r2, [r7, #4]
    4dd8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4dda:	7afa      	ldrb	r2, [r7, #11]
    4ddc:	68f9      	ldr	r1, [r7, #12]
    4dde:	4613      	mov	r3, r2
    4de0:	009b      	lsls	r3, r3, #2
    4de2:	4413      	add	r3, r2
    4de4:	009b      	lsls	r3, r3, #2
    4de6:	440b      	add	r3, r1
    4de8:	3334      	adds	r3, #52	; 0x34
    4dea:	687a      	ldr	r2, [r7, #4]
    4dec:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4dee:	7afb      	ldrb	r3, [r7, #11]
    4df0:	2206      	movs	r2, #6
    4df2:	4619      	mov	r1, r3
    4df4:	68f8      	ldr	r0, [r7, #12]
    4df6:	4b03      	ldr	r3, [pc, #12]	; (4e04 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4df8:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4dfa:	bf00      	nop
    4dfc:	3710      	adds	r7, #16
    4dfe:	46bd      	mov	sp, r7
    4e00:	bd80      	pop	{r7, pc}
    4e02:	bf00      	nop
    4e04:	00004ce7 	.word	0x00004ce7

00004e08 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4e08:	b480      	push	{r7}
    4e0a:	b085      	sub	sp, #20
    4e0c:	af00      	add	r7, sp, #0
    4e0e:	60f8      	str	r0, [r7, #12]
    4e10:	460b      	mov	r3, r1
    4e12:	607a      	str	r2, [r7, #4]
    4e14:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4e16:	7afa      	ldrb	r2, [r7, #11]
    4e18:	68f9      	ldr	r1, [r7, #12]
    4e1a:	4613      	mov	r3, r2
    4e1c:	009b      	lsls	r3, r3, #2
    4e1e:	4413      	add	r3, r2
    4e20:	009b      	lsls	r3, r3, #2
    4e22:	440b      	add	r3, r1
    4e24:	3338      	adds	r3, #56	; 0x38
    4e26:	687a      	ldr	r2, [r7, #4]
    4e28:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e2a:	bf00      	nop
    4e2c:	3714      	adds	r7, #20
    4e2e:	46bd      	mov	sp, r7
    4e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e34:	4770      	bx	lr

00004e36 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4e36:	b480      	push	{r7}
    4e38:	b083      	sub	sp, #12
    4e3a:	af00      	add	r7, sp, #0
    4e3c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	691b      	ldr	r3, [r3, #16]
    4e42:	085b      	lsrs	r3, r3, #1
    4e44:	f003 0301 	and.w	r3, r3, #1
    4e48:	2b00      	cmp	r3, #0
    4e4a:	bf14      	ite	ne
    4e4c:	2301      	movne	r3, #1
    4e4e:	2300      	moveq	r3, #0
    4e50:	b2db      	uxtb	r3, r3
}
    4e52:	4618      	mov	r0, r3
    4e54:	370c      	adds	r7, #12
    4e56:	46bd      	mov	sp, r7
    4e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e5c:	4770      	bx	lr

00004e5e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4e5e:	b480      	push	{r7}
    4e60:	b083      	sub	sp, #12
    4e62:	af00      	add	r7, sp, #0
    4e64:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	691b      	ldr	r3, [r3, #16]
    4e6a:	0a1b      	lsrs	r3, r3, #8
    4e6c:	f003 0301 	and.w	r3, r3, #1
    4e70:	2b00      	cmp	r3, #0
    4e72:	bf14      	ite	ne
    4e74:	2301      	movne	r3, #1
    4e76:	2300      	moveq	r3, #0
    4e78:	b2db      	uxtb	r3, r3
}
    4e7a:	4618      	mov	r0, r3
    4e7c:	370c      	adds	r7, #12
    4e7e:	46bd      	mov	sp, r7
    4e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e84:	4770      	bx	lr

00004e86 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4e86:	b480      	push	{r7}
    4e88:	b085      	sub	sp, #20
    4e8a:	af00      	add	r7, sp, #0
    4e8c:	6078      	str	r0, [r7, #4]
    4e8e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	691b      	ldr	r3, [r3, #16]
    4e94:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4e96:	68fa      	ldr	r2, [r7, #12]
    4e98:	683b      	ldr	r3, [r7, #0]
    4e9a:	4013      	ands	r3, r2
    4e9c:	60fb      	str	r3, [r7, #12]
	return tmp;
    4e9e:	68fb      	ldr	r3, [r7, #12]
}
    4ea0:	4618      	mov	r0, r3
    4ea2:	3714      	adds	r7, #20
    4ea4:	46bd      	mov	sp, r7
    4ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eaa:	4770      	bx	lr

00004eac <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4eac:	b480      	push	{r7}
    4eae:	b085      	sub	sp, #20
    4eb0:	af00      	add	r7, sp, #0
    4eb2:	60f8      	str	r0, [r7, #12]
    4eb4:	460b      	mov	r3, r1
    4eb6:	607a      	str	r2, [r7, #4]
    4eb8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4eba:	7afb      	ldrb	r3, [r7, #11]
    4ebc:	68fa      	ldr	r2, [r7, #12]
    4ebe:	3304      	adds	r3, #4
    4ec0:	009b      	lsls	r3, r3, #2
    4ec2:	4413      	add	r3, r2
    4ec4:	687a      	ldr	r2, [r7, #4]
    4ec6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4ec8:	bf00      	nop
    4eca:	3714      	adds	r7, #20
    4ecc:	46bd      	mov	sp, r7
    4ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ed2:	4770      	bx	lr

00004ed4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4ed4:	b480      	push	{r7}
    4ed6:	b083      	sub	sp, #12
    4ed8:	af00      	add	r7, sp, #0
    4eda:	6078      	str	r0, [r7, #4]
    4edc:	460b      	mov	r3, r1
    4ede:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4ee0:	687b      	ldr	r3, [r7, #4]
    4ee2:	78fa      	ldrb	r2, [r7, #3]
    4ee4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4ee6:	bf00      	nop
    4ee8:	370c      	adds	r7, #12
    4eea:	46bd      	mov	sp, r7
    4eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ef0:	4770      	bx	lr

00004ef2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4ef2:	b480      	push	{r7}
    4ef4:	b085      	sub	sp, #20
    4ef6:	af00      	add	r7, sp, #0
    4ef8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4efa:	687b      	ldr	r3, [r7, #4]
    4efc:	f893 3020 	ldrb.w	r3, [r3, #32]
    4f00:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4f02:	7bfb      	ldrb	r3, [r7, #15]
    4f04:	f003 0301 	and.w	r3, r3, #1
    4f08:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4f0a:	7bfb      	ldrb	r3, [r7, #15]
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	bf14      	ite	ne
    4f10:	2301      	movne	r3, #1
    4f12:	2300      	moveq	r3, #0
    4f14:	b2db      	uxtb	r3, r3
}
    4f16:	4618      	mov	r0, r3
    4f18:	3714      	adds	r7, #20
    4f1a:	46bd      	mov	sp, r7
    4f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f20:	4770      	bx	lr

00004f22 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4f22:	b480      	push	{r7}
    4f24:	b083      	sub	sp, #12
    4f26:	af00      	add	r7, sp, #0
    4f28:	6078      	str	r0, [r7, #4]
    4f2a:	460b      	mov	r3, r1
    4f2c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4f2e:	687b      	ldr	r3, [r7, #4]
    4f30:	78fa      	ldrb	r2, [r7, #3]
    4f32:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f36:	bf00      	nop
    4f38:	370c      	adds	r7, #12
    4f3a:	46bd      	mov	sp, r7
    4f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f40:	4770      	bx	lr

00004f42 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4f42:	b480      	push	{r7}
    4f44:	b083      	sub	sp, #12
    4f46:	af00      	add	r7, sp, #0
    4f48:	6078      	str	r0, [r7, #4]
    4f4a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4f4c:	687b      	ldr	r3, [r7, #4]
    4f4e:	683a      	ldr	r2, [r7, #0]
    4f50:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f52:	bf00      	nop
    4f54:	370c      	adds	r7, #12
    4f56:	46bd      	mov	sp, r7
    4f58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f5c:	4770      	bx	lr

00004f5e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4f5e:	b480      	push	{r7}
    4f60:	b083      	sub	sp, #12
    4f62:	af00      	add	r7, sp, #0
    4f64:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4f66:	687b      	ldr	r3, [r7, #4]
    4f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4f6a:	4618      	mov	r0, r3
    4f6c:	370c      	adds	r7, #12
    4f6e:	46bd      	mov	sp, r7
    4f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f74:	4770      	bx	lr

00004f76 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4f76:	b480      	push	{r7}
    4f78:	b083      	sub	sp, #12
    4f7a:	af00      	add	r7, sp, #0
    4f7c:	6078      	str	r0, [r7, #4]
    4f7e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4f80:	687b      	ldr	r3, [r7, #4]
    4f82:	683a      	ldr	r2, [r7, #0]
    4f84:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f86:	bf00      	nop
    4f88:	370c      	adds	r7, #12
    4f8a:	46bd      	mov	sp, r7
    4f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f90:	4770      	bx	lr

00004f92 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4f92:	b480      	push	{r7}
    4f94:	b085      	sub	sp, #20
    4f96:	af00      	add	r7, sp, #0
    4f98:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4f9a:	687b      	ldr	r3, [r7, #4]
    4f9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4fa0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    4fa2:	7bfb      	ldrb	r3, [r7, #15]
    4fa4:	085b      	lsrs	r3, r3, #1
    4fa6:	b2db      	uxtb	r3, r3
    4fa8:	f003 0301 	and.w	r3, r3, #1
    4fac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4fae:	7bfb      	ldrb	r3, [r7, #15]
    4fb0:	2b00      	cmp	r3, #0
    4fb2:	bf14      	ite	ne
    4fb4:	2301      	movne	r3, #1
    4fb6:	2300      	moveq	r3, #0
    4fb8:	b2db      	uxtb	r3, r3
}
    4fba:	4618      	mov	r0, r3
    4fbc:	3714      	adds	r7, #20
    4fbe:	46bd      	mov	sp, r7
    4fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fc4:	4770      	bx	lr

00004fc6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    4fc6:	b480      	push	{r7}
    4fc8:	b085      	sub	sp, #20
    4fca:	af00      	add	r7, sp, #0
    4fcc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4fce:	687b      	ldr	r3, [r7, #4]
    4fd0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4fd4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    4fd6:	7bfb      	ldrb	r3, [r7, #15]
    4fd8:	089b      	lsrs	r3, r3, #2
    4fda:	b2db      	uxtb	r3, r3
    4fdc:	f003 0301 	and.w	r3, r3, #1
    4fe0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4fe2:	7bfb      	ldrb	r3, [r7, #15]
    4fe4:	2b00      	cmp	r3, #0
    4fe6:	bf14      	ite	ne
    4fe8:	2301      	movne	r3, #1
    4fea:	2300      	moveq	r3, #0
    4fec:	b2db      	uxtb	r3, r3
}
    4fee:	4618      	mov	r0, r3
    4ff0:	3714      	adds	r7, #20
    4ff2:	46bd      	mov	sp, r7
    4ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ff8:	4770      	bx	lr

00004ffa <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4ffa:	b480      	push	{r7}
    4ffc:	b085      	sub	sp, #20
    4ffe:	af00      	add	r7, sp, #0
    5000:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5002:	687b      	ldr	r3, [r7, #4]
    5004:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5008:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    500a:	7bfb      	ldrb	r3, [r7, #15]
    500c:	08db      	lsrs	r3, r3, #3
    500e:	b2db      	uxtb	r3, r3
    5010:	f003 0301 	and.w	r3, r3, #1
    5014:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5016:	7bfb      	ldrb	r3, [r7, #15]
    5018:	2b00      	cmp	r3, #0
    501a:	bf14      	ite	ne
    501c:	2301      	movne	r3, #1
    501e:	2300      	moveq	r3, #0
    5020:	b2db      	uxtb	r3, r3
}
    5022:	4618      	mov	r0, r3
    5024:	3714      	adds	r7, #20
    5026:	46bd      	mov	sp, r7
    5028:	f85d 7b04 	ldr.w	r7, [sp], #4
    502c:	4770      	bx	lr

0000502e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    502e:	b480      	push	{r7}
    5030:	b085      	sub	sp, #20
    5032:	af00      	add	r7, sp, #0
    5034:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5036:	687b      	ldr	r3, [r7, #4]
    5038:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    503c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    503e:	7bfb      	ldrb	r3, [r7, #15]
    5040:	091b      	lsrs	r3, r3, #4
    5042:	b2db      	uxtb	r3, r3
    5044:	f003 0301 	and.w	r3, r3, #1
    5048:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    504a:	7bfb      	ldrb	r3, [r7, #15]
    504c:	2b00      	cmp	r3, #0
    504e:	bf14      	ite	ne
    5050:	2301      	movne	r3, #1
    5052:	2300      	moveq	r3, #0
    5054:	b2db      	uxtb	r3, r3
}
    5056:	4618      	mov	r0, r3
    5058:	3714      	adds	r7, #20
    505a:	46bd      	mov	sp, r7
    505c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5060:	4770      	bx	lr
	...

00005064 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5064:	b580      	push	{r7, lr}
    5066:	b082      	sub	sp, #8
    5068:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    506a:	4b0a      	ldr	r3, [pc, #40]	; (5094 <_oscctrl_init_sources+0x30>)
    506c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    506e:	4a0a      	ldr	r2, [pc, #40]	; (5098 <_oscctrl_init_sources+0x34>)
    5070:	2101      	movs	r1, #1
    5072:	6878      	ldr	r0, [r7, #4]
    5074:	4b09      	ldr	r3, [pc, #36]	; (509c <_oscctrl_init_sources+0x38>)
    5076:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5078:	bf00      	nop
    507a:	6878      	ldr	r0, [r7, #4]
    507c:	4b08      	ldr	r3, [pc, #32]	; (50a0 <_oscctrl_init_sources+0x3c>)
    507e:	4798      	blx	r3
    5080:	4603      	mov	r3, r0
    5082:	f083 0301 	eor.w	r3, r3, #1
    5086:	b2db      	uxtb	r3, r3
    5088:	2b00      	cmp	r3, #0
    508a:	d1f6      	bne.n	507a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    508c:	bf00      	nop
    508e:	3708      	adds	r7, #8
    5090:	46bd      	mov	sp, r7
    5092:	bd80      	pop	{r7, pc}
    5094:	40001000 	.word	0x40001000
    5098:	03002646 	.word	0x03002646
    509c:	00004ead 	.word	0x00004ead
    50a0:	00004e37 	.word	0x00004e37

000050a4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    50a4:	b580      	push	{r7, lr}
    50a6:	b084      	sub	sp, #16
    50a8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    50aa:	4b6b      	ldr	r3, [pc, #428]	; (5258 <_oscctrl_init_referenced_generators+0x1b4>)
    50ac:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    50ae:	2204      	movs	r2, #4
    50b0:	2100      	movs	r1, #0
    50b2:	486a      	ldr	r0, [pc, #424]	; (525c <_oscctrl_init_referenced_generators+0x1b8>)
    50b4:	4b6a      	ldr	r3, [pc, #424]	; (5260 <_oscctrl_init_referenced_generators+0x1bc>)
    50b6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    50b8:	bf00      	nop
    50ba:	4868      	ldr	r0, [pc, #416]	; (525c <_oscctrl_init_referenced_generators+0x1b8>)
    50bc:	4b69      	ldr	r3, [pc, #420]	; (5264 <_oscctrl_init_referenced_generators+0x1c0>)
    50be:	4798      	blx	r3
    50c0:	4603      	mov	r3, r0
    50c2:	2b00      	cmp	r3, #0
    50c4:	d1f9      	bne.n	50ba <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    50c6:	2100      	movs	r1, #0
    50c8:	68f8      	ldr	r0, [r7, #12]
    50ca:	4b67      	ldr	r3, [pc, #412]	; (5268 <_oscctrl_init_referenced_generators+0x1c4>)
    50cc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    50ce:	4967      	ldr	r1, [pc, #412]	; (526c <_oscctrl_init_referenced_generators+0x1c8>)
    50d0:	68f8      	ldr	r0, [r7, #12]
    50d2:	4b67      	ldr	r3, [pc, #412]	; (5270 <_oscctrl_init_referenced_generators+0x1cc>)
    50d4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    50d6:	bf00      	nop
    50d8:	68f8      	ldr	r0, [r7, #12]
    50da:	4b66      	ldr	r3, [pc, #408]	; (5274 <_oscctrl_init_referenced_generators+0x1d0>)
    50dc:	4798      	blx	r3
    50de:	4603      	mov	r3, r0
    50e0:	2b00      	cmp	r3, #0
    50e2:	d1f9      	bne.n	50d8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    50e4:	2100      	movs	r1, #0
    50e6:	68f8      	ldr	r0, [r7, #12]
    50e8:	4b63      	ldr	r3, [pc, #396]	; (5278 <_oscctrl_init_referenced_generators+0x1d4>)
    50ea:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    50ec:	bf00      	nop
    50ee:	68f8      	ldr	r0, [r7, #12]
    50f0:	4b62      	ldr	r3, [pc, #392]	; (527c <_oscctrl_init_referenced_generators+0x1d8>)
    50f2:	4798      	blx	r3
    50f4:	4603      	mov	r3, r0
    50f6:	2b00      	cmp	r3, #0
    50f8:	d1f9      	bne.n	50ee <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    50fa:	2302      	movs	r3, #2
    50fc:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    50fe:	7afb      	ldrb	r3, [r7, #11]
    5100:	4619      	mov	r1, r3
    5102:	68f8      	ldr	r0, [r7, #12]
    5104:	4b58      	ldr	r3, [pc, #352]	; (5268 <_oscctrl_init_referenced_generators+0x1c4>)
    5106:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5108:	bf00      	nop
    510a:	68f8      	ldr	r0, [r7, #12]
    510c:	4b5c      	ldr	r3, [pc, #368]	; (5280 <_oscctrl_init_referenced_generators+0x1dc>)
    510e:	4798      	blx	r3
    5110:	4603      	mov	r3, r0
    5112:	2b00      	cmp	r3, #0
    5114:	d1f9      	bne.n	510a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5116:	68f8      	ldr	r0, [r7, #12]
    5118:	4b5a      	ldr	r3, [pc, #360]	; (5284 <_oscctrl_init_referenced_generators+0x1e0>)
    511a:	4798      	blx	r3
    511c:	4603      	mov	r3, r0
    511e:	4619      	mov	r1, r3
    5120:	68f8      	ldr	r0, [r7, #12]
    5122:	4b59      	ldr	r3, [pc, #356]	; (5288 <_oscctrl_init_referenced_generators+0x1e4>)
    5124:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5126:	bf00      	nop
    5128:	68f8      	ldr	r0, [r7, #12]
    512a:	4b58      	ldr	r3, [pc, #352]	; (528c <_oscctrl_init_referenced_generators+0x1e8>)
    512c:	4798      	blx	r3
    512e:	4603      	mov	r3, r0
    5130:	2b00      	cmp	r3, #0
    5132:	d1f9      	bne.n	5128 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5134:	2319      	movs	r3, #25
    5136:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5138:	7afb      	ldrb	r3, [r7, #11]
    513a:	4619      	mov	r1, r3
    513c:	68f8      	ldr	r0, [r7, #12]
    513e:	4b4e      	ldr	r3, [pc, #312]	; (5278 <_oscctrl_init_referenced_generators+0x1d4>)
    5140:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5142:	bf00      	nop
    5144:	68f8      	ldr	r0, [r7, #12]
    5146:	4b4d      	ldr	r3, [pc, #308]	; (527c <_oscctrl_init_referenced_generators+0x1d8>)
    5148:	4798      	blx	r3
    514a:	4603      	mov	r3, r0
    514c:	2b00      	cmp	r3, #0
    514e:	d1f9      	bne.n	5144 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5150:	2245      	movs	r2, #69	; 0x45
    5152:	2101      	movs	r1, #1
    5154:	4841      	ldr	r0, [pc, #260]	; (525c <_oscctrl_init_referenced_generators+0x1b8>)
    5156:	4b4e      	ldr	r3, [pc, #312]	; (5290 <_oscctrl_init_referenced_generators+0x1ec>)
    5158:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    515a:	223b      	movs	r2, #59	; 0x3b
    515c:	2100      	movs	r1, #0
    515e:	68f8      	ldr	r0, [r7, #12]
    5160:	4b4c      	ldr	r3, [pc, #304]	; (5294 <_oscctrl_init_referenced_generators+0x1f0>)
    5162:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5164:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5168:	2100      	movs	r1, #0
    516a:	68f8      	ldr	r0, [r7, #12]
    516c:	4b4a      	ldr	r3, [pc, #296]	; (5298 <_oscctrl_init_referenced_generators+0x1f4>)
    516e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5170:	2242      	movs	r2, #66	; 0x42
    5172:	2100      	movs	r1, #0
    5174:	68f8      	ldr	r0, [r7, #12]
    5176:	4b49      	ldr	r3, [pc, #292]	; (529c <_oscctrl_init_referenced_generators+0x1f8>)
    5178:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    517a:	4a49      	ldr	r2, [pc, #292]	; (52a0 <_oscctrl_init_referenced_generators+0x1fc>)
    517c:	2101      	movs	r1, #1
    517e:	68f8      	ldr	r0, [r7, #12]
    5180:	4b44      	ldr	r3, [pc, #272]	; (5294 <_oscctrl_init_referenced_generators+0x1f0>)
    5182:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5184:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5188:	2101      	movs	r1, #1
    518a:	68f8      	ldr	r0, [r7, #12]
    518c:	4b42      	ldr	r3, [pc, #264]	; (5298 <_oscctrl_init_referenced_generators+0x1f4>)
    518e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5190:	2202      	movs	r2, #2
    5192:	2101      	movs	r1, #1
    5194:	68f8      	ldr	r0, [r7, #12]
    5196:	4b41      	ldr	r3, [pc, #260]	; (529c <_oscctrl_init_referenced_generators+0x1f8>)
    5198:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    519a:	68f8      	ldr	r0, [r7, #12]
    519c:	4b41      	ldr	r3, [pc, #260]	; (52a4 <_oscctrl_init_referenced_generators+0x200>)
    519e:	4798      	blx	r3
    51a0:	4603      	mov	r3, r0
    51a2:	2b00      	cmp	r3, #0
    51a4:	d00c      	beq.n	51c0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    51a6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    51aa:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    51ac:	bf00      	nop
    51ae:	6879      	ldr	r1, [r7, #4]
    51b0:	68f8      	ldr	r0, [r7, #12]
    51b2:	4b3d      	ldr	r3, [pc, #244]	; (52a8 <_oscctrl_init_referenced_generators+0x204>)
    51b4:	4798      	blx	r3
    51b6:	4602      	mov	r2, r0
    51b8:	687b      	ldr	r3, [r7, #4]
    51ba:	429a      	cmp	r2, r3
    51bc:	d1f7      	bne.n	51ae <_oscctrl_init_referenced_generators+0x10a>
    51be:	e009      	b.n	51d4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    51c0:	bf00      	nop
    51c2:	68f8      	ldr	r0, [r7, #12]
    51c4:	4b39      	ldr	r3, [pc, #228]	; (52ac <_oscctrl_init_referenced_generators+0x208>)
    51c6:	4798      	blx	r3
    51c8:	4603      	mov	r3, r0
    51ca:	f083 0301 	eor.w	r3, r3, #1
    51ce:	b2db      	uxtb	r3, r3
    51d0:	2b00      	cmp	r3, #0
    51d2:	d1f6      	bne.n	51c2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    51d4:	bf00      	nop
    51d6:	2100      	movs	r1, #0
    51d8:	68f8      	ldr	r0, [r7, #12]
    51da:	4b35      	ldr	r3, [pc, #212]	; (52b0 <_oscctrl_init_referenced_generators+0x20c>)
    51dc:	4798      	blx	r3
    51de:	4603      	mov	r3, r0
    51e0:	f083 0301 	eor.w	r3, r3, #1
    51e4:	b2db      	uxtb	r3, r3
    51e6:	2b00      	cmp	r3, #0
    51e8:	d009      	beq.n	51fe <_oscctrl_init_referenced_generators+0x15a>
    51ea:	2100      	movs	r1, #0
    51ec:	68f8      	ldr	r0, [r7, #12]
    51ee:	4b31      	ldr	r3, [pc, #196]	; (52b4 <_oscctrl_init_referenced_generators+0x210>)
    51f0:	4798      	blx	r3
    51f2:	4603      	mov	r3, r0
    51f4:	f083 0301 	eor.w	r3, r3, #1
    51f8:	b2db      	uxtb	r3, r3
    51fa:	2b00      	cmp	r3, #0
    51fc:	d1eb      	bne.n	51d6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    51fe:	bf00      	nop
    5200:	2101      	movs	r1, #1
    5202:	68f8      	ldr	r0, [r7, #12]
    5204:	4b2a      	ldr	r3, [pc, #168]	; (52b0 <_oscctrl_init_referenced_generators+0x20c>)
    5206:	4798      	blx	r3
    5208:	4603      	mov	r3, r0
    520a:	f083 0301 	eor.w	r3, r3, #1
    520e:	b2db      	uxtb	r3, r3
    5210:	2b00      	cmp	r3, #0
    5212:	d009      	beq.n	5228 <_oscctrl_init_referenced_generators+0x184>
    5214:	2101      	movs	r1, #1
    5216:	68f8      	ldr	r0, [r7, #12]
    5218:	4b26      	ldr	r3, [pc, #152]	; (52b4 <_oscctrl_init_referenced_generators+0x210>)
    521a:	4798      	blx	r3
    521c:	4603      	mov	r3, r0
    521e:	f083 0301 	eor.w	r3, r3, #1
    5222:	b2db      	uxtb	r3, r3
    5224:	2b00      	cmp	r3, #0
    5226:	d1eb      	bne.n	5200 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5228:	bf00      	nop
    522a:	480c      	ldr	r0, [pc, #48]	; (525c <_oscctrl_init_referenced_generators+0x1b8>)
    522c:	4b22      	ldr	r3, [pc, #136]	; (52b8 <_oscctrl_init_referenced_generators+0x214>)
    522e:	4798      	blx	r3
    5230:	4603      	mov	r3, r0
    5232:	2b00      	cmp	r3, #0
    5234:	d1f9      	bne.n	522a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5236:	2207      	movs	r2, #7
    5238:	2100      	movs	r1, #0
    523a:	4808      	ldr	r0, [pc, #32]	; (525c <_oscctrl_init_referenced_generators+0x1b8>)
    523c:	4b08      	ldr	r3, [pc, #32]	; (5260 <_oscctrl_init_referenced_generators+0x1bc>)
    523e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5240:	bf00      	nop
    5242:	4806      	ldr	r0, [pc, #24]	; (525c <_oscctrl_init_referenced_generators+0x1b8>)
    5244:	4b07      	ldr	r3, [pc, #28]	; (5264 <_oscctrl_init_referenced_generators+0x1c0>)
    5246:	4798      	blx	r3
    5248:	4603      	mov	r3, r0
    524a:	2b00      	cmp	r3, #0
    524c:	d1f9      	bne.n	5242 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    524e:	bf00      	nop
    5250:	3710      	adds	r7, #16
    5252:	46bd      	mov	sp, r7
    5254:	bd80      	pop	{r7, pc}
    5256:	bf00      	nop
    5258:	40001000 	.word	0x40001000
    525c:	40001c00 	.word	0x40001c00
    5260:	00004c71 	.word	0x00004c71
    5264:	00004c31 	.word	0x00004c31
    5268:	00004ed5 	.word	0x00004ed5
    526c:	0401bb80 	.word	0x0401bb80
    5270:	00004f77 	.word	0x00004f77
    5274:	0000502f 	.word	0x0000502f
    5278:	00004f23 	.word	0x00004f23
    527c:	00004fc7 	.word	0x00004fc7
    5280:	00004f93 	.word	0x00004f93
    5284:	00004f5f 	.word	0x00004f5f
    5288:	00004f43 	.word	0x00004f43
    528c:	00004ffb 	.word	0x00004ffb
    5290:	00004cc1 	.word	0x00004cc1
    5294:	00004dcd 	.word	0x00004dcd
    5298:	00004e09 	.word	0x00004e09
    529c:	00004d91 	.word	0x00004d91
    52a0:	000407a0 	.word	0x000407a0
    52a4:	00004ef3 	.word	0x00004ef3
    52a8:	00004e87 	.word	0x00004e87
    52ac:	00004e5f 	.word	0x00004e5f
    52b0:	00004d1d 	.word	0x00004d1d
    52b4:	00004d55 	.word	0x00004d55
    52b8:	00004c59 	.word	0x00004c59

000052bc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    52bc:	b480      	push	{r7}
    52be:	b083      	sub	sp, #12
    52c0:	af00      	add	r7, sp, #0
    52c2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    52c4:	687b      	ldr	r3, [r7, #4]
    52c6:	69db      	ldr	r3, [r3, #28]
    52c8:	0a9b      	lsrs	r3, r3, #10
    52ca:	f003 0301 	and.w	r3, r3, #1
    52ce:	2b00      	cmp	r3, #0
    52d0:	bf14      	ite	ne
    52d2:	2301      	movne	r3, #1
    52d4:	2300      	moveq	r3, #0
    52d6:	b2db      	uxtb	r3, r3
}
    52d8:	4618      	mov	r0, r3
    52da:	370c      	adds	r7, #12
    52dc:	46bd      	mov	sp, r7
    52de:	f85d 7b04 	ldr.w	r7, [sp], #4
    52e2:	4770      	bx	lr

000052e4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    52e4:	b480      	push	{r7}
    52e6:	b083      	sub	sp, #12
    52e8:	af00      	add	r7, sp, #0
    52ea:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    52f2:	61da      	str	r2, [r3, #28]
}
    52f4:	bf00      	nop
    52f6:	370c      	adds	r7, #12
    52f8:	46bd      	mov	sp, r7
    52fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    52fe:	4770      	bx	lr

00005300 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5300:	b480      	push	{r7}
    5302:	b083      	sub	sp, #12
    5304:	af00      	add	r7, sp, #0
    5306:	6078      	str	r0, [r7, #4]
    5308:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    530a:	687b      	ldr	r3, [r7, #4]
    530c:	683a      	ldr	r2, [r7, #0]
    530e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5310:	bf00      	nop
    5312:	370c      	adds	r7, #12
    5314:	46bd      	mov	sp, r7
    5316:	f85d 7b04 	ldr.w	r7, [sp], #4
    531a:	4770      	bx	lr

0000531c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    531c:	b480      	push	{r7}
    531e:	b083      	sub	sp, #12
    5320:	af00      	add	r7, sp, #0
    5322:	6078      	str	r0, [r7, #4]
    5324:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5326:	687b      	ldr	r3, [r7, #4]
    5328:	683a      	ldr	r2, [r7, #0]
    532a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    532c:	bf00      	nop
    532e:	370c      	adds	r7, #12
    5330:	46bd      	mov	sp, r7
    5332:	f85d 7b04 	ldr.w	r7, [sp], #4
    5336:	4770      	bx	lr

00005338 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5338:	b480      	push	{r7}
    533a:	b083      	sub	sp, #12
    533c:	af00      	add	r7, sp, #0
    533e:	6078      	str	r0, [r7, #4]
    5340:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5342:	687b      	ldr	r3, [r7, #4]
    5344:	683a      	ldr	r2, [r7, #0]
    5346:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5348:	bf00      	nop
    534a:	370c      	adds	r7, #12
    534c:	46bd      	mov	sp, r7
    534e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5352:	4770      	bx	lr

00005354 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5354:	b480      	push	{r7}
    5356:	b083      	sub	sp, #12
    5358:	af00      	add	r7, sp, #0
    535a:	6078      	str	r0, [r7, #4]
    535c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    535e:	687b      	ldr	r3, [r7, #4]
    5360:	683a      	ldr	r2, [r7, #0]
    5362:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5364:	bf00      	nop
    5366:	370c      	adds	r7, #12
    5368:	46bd      	mov	sp, r7
    536a:	f85d 7b04 	ldr.w	r7, [sp], #4
    536e:	4770      	bx	lr

00005370 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5370:	b480      	push	{r7}
    5372:	b085      	sub	sp, #20
    5374:	af00      	add	r7, sp, #0
    5376:	6078      	str	r0, [r7, #4]
    5378:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    537a:	687b      	ldr	r3, [r7, #4]
    537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    537e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5380:	68fb      	ldr	r3, [r7, #12]
    5382:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5386:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5388:	683b      	ldr	r3, [r7, #0]
    538a:	b2db      	uxtb	r3, r3
    538c:	68fa      	ldr	r2, [r7, #12]
    538e:	4313      	orrs	r3, r2
    5390:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5392:	687b      	ldr	r3, [r7, #4]
    5394:	68fa      	ldr	r2, [r7, #12]
    5396:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5398:	bf00      	nop
    539a:	3714      	adds	r7, #20
    539c:	46bd      	mov	sp, r7
    539e:	f85d 7b04 	ldr.w	r7, [sp], #4
    53a2:	4770      	bx	lr

000053a4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    53a4:	b480      	push	{r7}
    53a6:	b085      	sub	sp, #20
    53a8:	af00      	add	r7, sp, #0
    53aa:	6078      	str	r0, [r7, #4]
    53ac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    53ae:	687b      	ldr	r3, [r7, #4]
    53b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    53b2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    53b4:	68fb      	ldr	r3, [r7, #12]
    53b6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    53ba:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    53bc:	683b      	ldr	r3, [r7, #0]
    53be:	041b      	lsls	r3, r3, #16
    53c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    53c4:	68fa      	ldr	r2, [r7, #12]
    53c6:	4313      	orrs	r3, r2
    53c8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    53ca:	687b      	ldr	r3, [r7, #4]
    53cc:	68fa      	ldr	r2, [r7, #12]
    53ce:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    53d0:	bf00      	nop
    53d2:	3714      	adds	r7, #20
    53d4:	46bd      	mov	sp, r7
    53d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53da:	4770      	bx	lr

000053dc <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    53dc:	b480      	push	{r7}
    53de:	b083      	sub	sp, #12
    53e0:	af00      	add	r7, sp, #0
    53e2:	6078      	str	r0, [r7, #4]
    53e4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    53e6:	687b      	ldr	r3, [r7, #4]
    53e8:	683a      	ldr	r2, [r7, #0]
    53ea:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    53ec:	bf00      	nop
    53ee:	370c      	adds	r7, #12
    53f0:	46bd      	mov	sp, r7
    53f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    53f6:	4770      	bx	lr

000053f8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    53f8:	b480      	push	{r7}
    53fa:	b083      	sub	sp, #12
    53fc:	af00      	add	r7, sp, #0
    53fe:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5404:	4618      	mov	r0, r3
    5406:	370c      	adds	r7, #12
    5408:	46bd      	mov	sp, r7
    540a:	f85d 7b04 	ldr.w	r7, [sp], #4
    540e:	4770      	bx	lr

00005410 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5410:	b480      	push	{r7}
    5412:	b085      	sub	sp, #20
    5414:	af00      	add	r7, sp, #0
    5416:	60f8      	str	r0, [r7, #12]
    5418:	60b9      	str	r1, [r7, #8]
    541a:	607a      	str	r2, [r7, #4]
	while (count--) {
    541c:	e007      	b.n	542e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    541e:	68fb      	ldr	r3, [r7, #12]
    5420:	1c5a      	adds	r2, r3, #1
    5422:	60fa      	str	r2, [r7, #12]
    5424:	68ba      	ldr	r2, [r7, #8]
    5426:	1c51      	adds	r1, r2, #1
    5428:	60b9      	str	r1, [r7, #8]
    542a:	7812      	ldrb	r2, [r2, #0]
    542c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    542e:	687b      	ldr	r3, [r7, #4]
    5430:	1e5a      	subs	r2, r3, #1
    5432:	607a      	str	r2, [r7, #4]
    5434:	2b00      	cmp	r3, #0
    5436:	d1f2      	bne.n	541e <_qspi_memcpy+0xe>
	}
}
    5438:	bf00      	nop
    543a:	3714      	adds	r7, #20
    543c:	46bd      	mov	sp, r7
    543e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5442:	4770      	bx	lr

00005444 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5444:	b580      	push	{r7, lr}
    5446:	b082      	sub	sp, #8
    5448:	af00      	add	r7, sp, #0
    544a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    544c:	4903      	ldr	r1, [pc, #12]	; (545c <_qspi_end_transfer+0x18>)
    544e:	6878      	ldr	r0, [r7, #4]
    5450:	4b03      	ldr	r3, [pc, #12]	; (5460 <_qspi_end_transfer+0x1c>)
    5452:	4798      	blx	r3
}
    5454:	bf00      	nop
    5456:	3708      	adds	r7, #8
    5458:	46bd      	mov	sp, r7
    545a:	bd80      	pop	{r7, pc}
    545c:	01000002 	.word	0x01000002
    5460:	00005301 	.word	0x00005301

00005464 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5464:	b580      	push	{r7, lr}
    5466:	b082      	sub	sp, #8
    5468:	af00      	add	r7, sp, #0
    546a:	6078      	str	r0, [r7, #4]
    546c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    546e:	687b      	ldr	r3, [r7, #4]
    5470:	2b00      	cmp	r3, #0
    5472:	d004      	beq.n	547e <_qspi_sync_init+0x1a>
    5474:	683b      	ldr	r3, [r7, #0]
    5476:	2b00      	cmp	r3, #0
    5478:	d001      	beq.n	547e <_qspi_sync_init+0x1a>
    547a:	2301      	movs	r3, #1
    547c:	e000      	b.n	5480 <_qspi_sync_init+0x1c>
    547e:	2300      	movs	r3, #0
    5480:	f003 0301 	and.w	r3, r3, #1
    5484:	b2db      	uxtb	r3, r3
    5486:	2240      	movs	r2, #64	; 0x40
    5488:	490c      	ldr	r1, [pc, #48]	; (54bc <_qspi_sync_init+0x58>)
    548a:	4618      	mov	r0, r3
    548c:	4b0c      	ldr	r3, [pc, #48]	; (54c0 <_qspi_sync_init+0x5c>)
    548e:	4798      	blx	r3
	dev->prvt = hw;
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	683a      	ldr	r2, [r7, #0]
    5494:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5496:	687b      	ldr	r3, [r7, #4]
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	2101      	movs	r1, #1
    549c:	4618      	mov	r0, r3
    549e:	4b09      	ldr	r3, [pc, #36]	; (54c4 <_qspi_sync_init+0x60>)
    54a0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    54a2:	4909      	ldr	r1, [pc, #36]	; (54c8 <_qspi_sync_init+0x64>)
    54a4:	6838      	ldr	r0, [r7, #0]
    54a6:	4b09      	ldr	r3, [pc, #36]	; (54cc <_qspi_sync_init+0x68>)
    54a8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    54aa:	4909      	ldr	r1, [pc, #36]	; (54d0 <_qspi_sync_init+0x6c>)
    54ac:	6838      	ldr	r0, [r7, #0]
    54ae:	4b09      	ldr	r3, [pc, #36]	; (54d4 <_qspi_sync_init+0x70>)
    54b0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    54b2:	2300      	movs	r3, #0
}
    54b4:	4618      	mov	r0, r3
    54b6:	3708      	adds	r7, #8
    54b8:	46bd      	mov	sp, r7
    54ba:	bd80      	pop	{r7, pc}
    54bc:	0000ef94 	.word	0x0000ef94
    54c0:	0000349d 	.word	0x0000349d
    54c4:	00005301 	.word	0x00005301
    54c8:	06000011 	.word	0x06000011
    54cc:	0000531d 	.word	0x0000531d
    54d0:	00241300 	.word	0x00241300
    54d4:	00005339 	.word	0x00005339

000054d8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    54d8:	b580      	push	{r7, lr}
    54da:	b082      	sub	sp, #8
    54dc:	af00      	add	r7, sp, #0
    54de:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    54e0:	687b      	ldr	r3, [r7, #4]
    54e2:	681b      	ldr	r3, [r3, #0]
    54e4:	2102      	movs	r1, #2
    54e6:	4618      	mov	r0, r3
    54e8:	4b03      	ldr	r3, [pc, #12]	; (54f8 <_qspi_sync_enable+0x20>)
    54ea:	4798      	blx	r3
	return ERR_NONE;
    54ec:	2300      	movs	r3, #0
}
    54ee:	4618      	mov	r0, r3
    54f0:	3708      	adds	r7, #8
    54f2:	46bd      	mov	sp, r7
    54f4:	bd80      	pop	{r7, pc}
    54f6:	bf00      	nop
    54f8:	00005301 	.word	0x00005301

000054fc <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    54fc:	b580      	push	{r7, lr}
    54fe:	b082      	sub	sp, #8
    5500:	af00      	add	r7, sp, #0
    5502:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5504:	687b      	ldr	r3, [r7, #4]
    5506:	681b      	ldr	r3, [r3, #0]
    5508:	2100      	movs	r1, #0
    550a:	4618      	mov	r0, r3
    550c:	4b03      	ldr	r3, [pc, #12]	; (551c <_qspi_sync_disable+0x20>)
    550e:	4798      	blx	r3
	return ERR_NONE;
    5510:	2300      	movs	r3, #0
}
    5512:	4618      	mov	r0, r3
    5514:	3708      	adds	r7, #8
    5516:	46bd      	mov	sp, r7
    5518:	bd80      	pop	{r7, pc}
    551a:	bf00      	nop
    551c:	00005301 	.word	0x00005301

00005520 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5520:	b580      	push	{r7, lr}
    5522:	b084      	sub	sp, #16
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
    5528:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    552a:	687b      	ldr	r3, [r7, #4]
    552c:	681b      	ldr	r3, [r3, #0]
    552e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5530:	683b      	ldr	r3, [r7, #0]
    5532:	781b      	ldrb	r3, [r3, #0]
    5534:	f003 0320 	and.w	r3, r3, #32
    5538:	b2db      	uxtb	r3, r3
    553a:	2b00      	cmp	r3, #0
    553c:	d005      	beq.n	554a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    553e:	683b      	ldr	r3, [r7, #0]
    5540:	689b      	ldr	r3, [r3, #8]
    5542:	4619      	mov	r1, r3
    5544:	68f8      	ldr	r0, [r7, #12]
    5546:	4b13      	ldr	r3, [pc, #76]	; (5594 <_qspi_sync_command_set_ifr+0x74>)
    5548:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    554a:	683b      	ldr	r3, [r7, #0]
    554c:	781b      	ldrb	r3, [r3, #0]
    554e:	f003 0310 	and.w	r3, r3, #16
    5552:	b2db      	uxtb	r3, r3
    5554:	2b00      	cmp	r3, #0
    5556:	d005      	beq.n	5564 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5558:	683b      	ldr	r3, [r7, #0]
    555a:	791b      	ldrb	r3, [r3, #4]
    555c:	4619      	mov	r1, r3
    555e:	68f8      	ldr	r0, [r7, #12]
    5560:	4b0d      	ldr	r3, [pc, #52]	; (5598 <_qspi_sync_command_set_ifr+0x78>)
    5562:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5564:	683b      	ldr	r3, [r7, #0]
    5566:	781b      	ldrb	r3, [r3, #0]
    5568:	f003 0340 	and.w	r3, r3, #64	; 0x40
    556c:	b2db      	uxtb	r3, r3
    556e:	2b00      	cmp	r3, #0
    5570:	d005      	beq.n	557e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5572:	683b      	ldr	r3, [r7, #0]
    5574:	795b      	ldrb	r3, [r3, #5]
    5576:	4619      	mov	r1, r3
    5578:	68f8      	ldr	r0, [r7, #12]
    557a:	4b08      	ldr	r3, [pc, #32]	; (559c <_qspi_sync_command_set_ifr+0x7c>)
    557c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    557e:	683b      	ldr	r3, [r7, #0]
    5580:	681b      	ldr	r3, [r3, #0]
    5582:	4619      	mov	r1, r3
    5584:	68f8      	ldr	r0, [r7, #12]
    5586:	4b06      	ldr	r3, [pc, #24]	; (55a0 <_qspi_sync_command_set_ifr+0x80>)
    5588:	4798      	blx	r3
}
    558a:	bf00      	nop
    558c:	3710      	adds	r7, #16
    558e:	46bd      	mov	sp, r7
    5590:	bd80      	pop	{r7, pc}
    5592:	bf00      	nop
    5594:	00005355 	.word	0x00005355
    5598:	00005371 	.word	0x00005371
    559c:	000053a5 	.word	0x000053a5
    55a0:	000053dd 	.word	0x000053dd

000055a4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    55a4:	b580      	push	{r7, lr}
    55a6:	b084      	sub	sp, #16
    55a8:	af00      	add	r7, sp, #0
    55aa:	6078      	str	r0, [r7, #4]
    55ac:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    55ae:	687b      	ldr	r3, [r7, #4]
    55b0:	681b      	ldr	r3, [r3, #0]
    55b2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    55b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    55b8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    55ba:	683b      	ldr	r3, [r7, #0]
    55bc:	781b      	ldrb	r3, [r3, #0]
    55be:	f003 0320 	and.w	r3, r3, #32
    55c2:	b2db      	uxtb	r3, r3
    55c4:	2b00      	cmp	r3, #0
    55c6:	d004      	beq.n	55d2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    55c8:	683b      	ldr	r3, [r7, #0]
    55ca:	689b      	ldr	r3, [r3, #8]
    55cc:	68fa      	ldr	r2, [r7, #12]
    55ce:	4413      	add	r3, r2
    55d0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    55d2:	68b8      	ldr	r0, [r7, #8]
    55d4:	4b18      	ldr	r3, [pc, #96]	; (5638 <_qspi_sync_run_transfer+0x94>)
    55d6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    55d8:	683b      	ldr	r3, [r7, #0]
    55da:	691b      	ldr	r3, [r3, #16]
    55dc:	2b00      	cmp	r3, #0
    55de:	d103      	bne.n	55e8 <_qspi_sync_run_transfer+0x44>
    55e0:	683b      	ldr	r3, [r7, #0]
    55e2:	695b      	ldr	r3, [r3, #20]
    55e4:	2b00      	cmp	r3, #0
    55e6:	d001      	beq.n	55ec <_qspi_sync_run_transfer+0x48>
    55e8:	2301      	movs	r3, #1
    55ea:	e000      	b.n	55ee <_qspi_sync_run_transfer+0x4a>
    55ec:	2300      	movs	r3, #0
    55ee:	f003 0301 	and.w	r3, r3, #1
    55f2:	b2db      	uxtb	r3, r3
    55f4:	2282      	movs	r2, #130	; 0x82
    55f6:	4911      	ldr	r1, [pc, #68]	; (563c <_qspi_sync_run_transfer+0x98>)
    55f8:	4618      	mov	r0, r3
    55fa:	4b11      	ldr	r3, [pc, #68]	; (5640 <_qspi_sync_run_transfer+0x9c>)
    55fc:	4798      	blx	r3

	if (cmd->tx_buf) {
    55fe:	683b      	ldr	r3, [r7, #0]
    5600:	691b      	ldr	r3, [r3, #16]
    5602:	2b00      	cmp	r3, #0
    5604:	d008      	beq.n	5618 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5606:	683b      	ldr	r3, [r7, #0]
    5608:	6919      	ldr	r1, [r3, #16]
    560a:	683b      	ldr	r3, [r7, #0]
    560c:	68db      	ldr	r3, [r3, #12]
    560e:	461a      	mov	r2, r3
    5610:	68f8      	ldr	r0, [r7, #12]
    5612:	4b0c      	ldr	r3, [pc, #48]	; (5644 <_qspi_sync_run_transfer+0xa0>)
    5614:	4798      	blx	r3
    5616:	e007      	b.n	5628 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5618:	683b      	ldr	r3, [r7, #0]
    561a:	6958      	ldr	r0, [r3, #20]
    561c:	683b      	ldr	r3, [r7, #0]
    561e:	68db      	ldr	r3, [r3, #12]
    5620:	461a      	mov	r2, r3
    5622:	68f9      	ldr	r1, [r7, #12]
    5624:	4b07      	ldr	r3, [pc, #28]	; (5644 <_qspi_sync_run_transfer+0xa0>)
    5626:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5628:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    562c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5630:	bf00      	nop
    5632:	3710      	adds	r7, #16
    5634:	46bd      	mov	sp, r7
    5636:	bd80      	pop	{r7, pc}
    5638:	000053f9 	.word	0x000053f9
    563c:	0000ef94 	.word	0x0000ef94
    5640:	0000349d 	.word	0x0000349d
    5644:	00005411 	.word	0x00005411

00005648 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5648:	b580      	push	{r7, lr}
    564a:	b082      	sub	sp, #8
    564c:	af00      	add	r7, sp, #0
    564e:	6078      	str	r0, [r7, #4]
    5650:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5652:	6839      	ldr	r1, [r7, #0]
    5654:	6878      	ldr	r0, [r7, #4]
    5656:	4b14      	ldr	r3, [pc, #80]	; (56a8 <_qspi_sync_serial_run_command+0x60>)
    5658:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    565a:	683b      	ldr	r3, [r7, #0]
    565c:	781b      	ldrb	r3, [r3, #0]
    565e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5662:	b2db      	uxtb	r3, r3
    5664:	2b00      	cmp	r3, #0
    5666:	d003      	beq.n	5670 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5668:	6839      	ldr	r1, [r7, #0]
    566a:	6878      	ldr	r0, [r7, #4]
    566c:	4b0f      	ldr	r3, [pc, #60]	; (56ac <_qspi_sync_serial_run_command+0x64>)
    566e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5670:	687b      	ldr	r3, [r7, #4]
    5672:	681b      	ldr	r3, [r3, #0]
    5674:	4618      	mov	r0, r3
    5676:	4b0e      	ldr	r3, [pc, #56]	; (56b0 <_qspi_sync_serial_run_command+0x68>)
    5678:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    567a:	bf00      	nop
    567c:	687b      	ldr	r3, [r7, #4]
    567e:	681b      	ldr	r3, [r3, #0]
    5680:	4618      	mov	r0, r3
    5682:	4b0c      	ldr	r3, [pc, #48]	; (56b4 <_qspi_sync_serial_run_command+0x6c>)
    5684:	4798      	blx	r3
    5686:	4603      	mov	r3, r0
    5688:	f083 0301 	eor.w	r3, r3, #1
    568c:	b2db      	uxtb	r3, r3
    568e:	2b00      	cmp	r3, #0
    5690:	d1f4      	bne.n	567c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5692:	687b      	ldr	r3, [r7, #4]
    5694:	681b      	ldr	r3, [r3, #0]
    5696:	4618      	mov	r0, r3
    5698:	4b07      	ldr	r3, [pc, #28]	; (56b8 <_qspi_sync_serial_run_command+0x70>)
    569a:	4798      	blx	r3
	return ERR_NONE;
    569c:	2300      	movs	r3, #0
}
    569e:	4618      	mov	r0, r3
    56a0:	3708      	adds	r7, #8
    56a2:	46bd      	mov	sp, r7
    56a4:	bd80      	pop	{r7, pc}
    56a6:	bf00      	nop
    56a8:	00005521 	.word	0x00005521
    56ac:	000055a5 	.word	0x000055a5
    56b0:	00005445 	.word	0x00005445
    56b4:	000052bd 	.word	0x000052bd
    56b8:	000052e5 	.word	0x000052e5

000056bc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    56bc:	b480      	push	{r7}
    56be:	b083      	sub	sp, #12
    56c0:	af00      	add	r7, sp, #0
    56c2:	6078      	str	r0, [r7, #4]
    56c4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    56c6:	bf00      	nop
    56c8:	687b      	ldr	r3, [r7, #4]
    56ca:	691a      	ldr	r2, [r3, #16]
    56cc:	683b      	ldr	r3, [r7, #0]
    56ce:	4013      	ands	r3, r2
    56d0:	2b00      	cmp	r3, #0
    56d2:	d1f9      	bne.n	56c8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    56d4:	bf00      	nop
    56d6:	370c      	adds	r7, #12
    56d8:	46bd      	mov	sp, r7
    56da:	f85d 7b04 	ldr.w	r7, [sp], #4
    56de:	4770      	bx	lr

000056e0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    56e0:	b480      	push	{r7}
    56e2:	b083      	sub	sp, #12
    56e4:	af00      	add	r7, sp, #0
    56e6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    56e8:	687b      	ldr	r3, [r7, #4]
    56ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    56ee:	819a      	strh	r2, [r3, #12]
}
    56f0:	bf00      	nop
    56f2:	370c      	adds	r7, #12
    56f4:	46bd      	mov	sp, r7
    56f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56fa:	4770      	bx	lr

000056fc <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    56fc:	b480      	push	{r7}
    56fe:	b083      	sub	sp, #12
    5700:	af00      	add	r7, sp, #0
    5702:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    570a:	819a      	strh	r2, [r3, #12]
}
    570c:	bf00      	nop
    570e:	370c      	adds	r7, #12
    5710:	46bd      	mov	sp, r7
    5712:	f85d 7b04 	ldr.w	r7, [sp], #4
    5716:	4770      	bx	lr

00005718 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5718:	b480      	push	{r7}
    571a:	b083      	sub	sp, #12
    571c:	af00      	add	r7, sp, #0
    571e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5720:	687b      	ldr	r3, [r7, #4]
    5722:	899b      	ldrh	r3, [r3, #12]
    5724:	b29b      	uxth	r3, r3
}
    5726:	4618      	mov	r0, r3
    5728:	370c      	adds	r7, #12
    572a:	46bd      	mov	sp, r7
    572c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5730:	4770      	bx	lr

00005732 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5732:	b480      	push	{r7}
    5734:	b083      	sub	sp, #12
    5736:	af00      	add	r7, sp, #0
    5738:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    573a:	687b      	ldr	r3, [r7, #4]
    573c:	895b      	ldrh	r3, [r3, #10]
    573e:	b29b      	uxth	r3, r3
}
    5740:	4618      	mov	r0, r3
    5742:	370c      	adds	r7, #12
    5744:	46bd      	mov	sp, r7
    5746:	f85d 7b04 	ldr.w	r7, [sp], #4
    574a:	4770      	bx	lr

0000574c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    574c:	b580      	push	{r7, lr}
    574e:	b082      	sub	sp, #8
    5750:	af00      	add	r7, sp, #0
    5752:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5754:	687b      	ldr	r3, [r7, #4]
    5756:	881b      	ldrh	r3, [r3, #0]
    5758:	b29b      	uxth	r3, r3
    575a:	f043 0301 	orr.w	r3, r3, #1
    575e:	b29a      	uxth	r2, r3
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5764:	2101      	movs	r1, #1
    5766:	6878      	ldr	r0, [r7, #4]
    5768:	4b02      	ldr	r3, [pc, #8]	; (5774 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    576a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    576c:	bf00      	nop
    576e:	3708      	adds	r7, #8
    5770:	46bd      	mov	sp, r7
    5772:	bd80      	pop	{r7, pc}
    5774:	000056bd 	.word	0x000056bd

00005778 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5778:	b580      	push	{r7, lr}
    577a:	b084      	sub	sp, #16
    577c:	af00      	add	r7, sp, #0
    577e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5780:	f248 0103 	movw	r1, #32771	; 0x8003
    5784:	6878      	ldr	r0, [r7, #4]
    5786:	4b0a      	ldr	r3, [pc, #40]	; (57b0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5788:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    578a:	687b      	ldr	r3, [r7, #4]
    578c:	881b      	ldrh	r3, [r3, #0]
    578e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5790:	89fb      	ldrh	r3, [r7, #14]
    5792:	085b      	lsrs	r3, r3, #1
    5794:	b29b      	uxth	r3, r3
    5796:	f003 0301 	and.w	r3, r3, #1
    579a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    579c:	89fb      	ldrh	r3, [r7, #14]
    579e:	2b00      	cmp	r3, #0
    57a0:	bf14      	ite	ne
    57a2:	2301      	movne	r3, #1
    57a4:	2300      	moveq	r3, #0
    57a6:	b2db      	uxtb	r3, r3
}
    57a8:	4618      	mov	r0, r3
    57aa:	3710      	adds	r7, #16
    57ac:	46bd      	mov	sp, r7
    57ae:	bd80      	pop	{r7, pc}
    57b0:	000056bd 	.word	0x000056bd

000057b4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    57b4:	b580      	push	{r7, lr}
    57b6:	b082      	sub	sp, #8
    57b8:	af00      	add	r7, sp, #0
    57ba:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    57bc:	687b      	ldr	r3, [r7, #4]
    57be:	881b      	ldrh	r3, [r3, #0]
    57c0:	b29b      	uxth	r3, r3
    57c2:	f023 0302 	bic.w	r3, r3, #2
    57c6:	b29a      	uxth	r2, r3
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    57cc:	f248 0103 	movw	r1, #32771	; 0x8003
    57d0:	6878      	ldr	r0, [r7, #4]
    57d2:	4b03      	ldr	r3, [pc, #12]	; (57e0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    57d4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    57d6:	bf00      	nop
    57d8:	3708      	adds	r7, #8
    57da:	46bd      	mov	sp, r7
    57dc:	bd80      	pop	{r7, pc}
    57de:	bf00      	nop
    57e0:	000056bd 	.word	0x000056bd

000057e4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    57e4:	b580      	push	{r7, lr}
    57e6:	b082      	sub	sp, #8
    57e8:	af00      	add	r7, sp, #0
    57ea:	6078      	str	r0, [r7, #4]
    57ec:	460b      	mov	r3, r1
    57ee:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    57f0:	687b      	ldr	r3, [r7, #4]
    57f2:	887a      	ldrh	r2, [r7, #2]
    57f4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    57f6:	f248 0103 	movw	r1, #32771	; 0x8003
    57fa:	6878      	ldr	r0, [r7, #4]
    57fc:	4b02      	ldr	r3, [pc, #8]	; (5808 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    57fe:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5800:	bf00      	nop
    5802:	3708      	adds	r7, #8
    5804:	46bd      	mov	sp, r7
    5806:	bd80      	pop	{r7, pc}
    5808:	000056bd 	.word	0x000056bd

0000580c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    580c:	b480      	push	{r7}
    580e:	b083      	sub	sp, #12
    5810:	af00      	add	r7, sp, #0
    5812:	6078      	str	r0, [r7, #4]
    5814:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5816:	687b      	ldr	r3, [r7, #4]
    5818:	683a      	ldr	r2, [r7, #0]
    581a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    581c:	bf00      	nop
    581e:	370c      	adds	r7, #12
    5820:	46bd      	mov	sp, r7
    5822:	f85d 7b04 	ldr.w	r7, [sp], #4
    5826:	4770      	bx	lr

00005828 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5828:	b580      	push	{r7, lr}
    582a:	b082      	sub	sp, #8
    582c:	af00      	add	r7, sp, #0
    582e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5830:	687b      	ldr	r3, [r7, #4]
    5832:	2b00      	cmp	r3, #0
    5834:	d005      	beq.n	5842 <_calendar_init+0x1a>
    5836:	687b      	ldr	r3, [r7, #4]
    5838:	681b      	ldr	r3, [r3, #0]
    583a:	2b00      	cmp	r3, #0
    583c:	d001      	beq.n	5842 <_calendar_init+0x1a>
    583e:	2301      	movs	r3, #1
    5840:	e000      	b.n	5844 <_calendar_init+0x1c>
    5842:	2300      	movs	r3, #0
    5844:	f003 0301 	and.w	r3, r3, #1
    5848:	b2db      	uxtb	r3, r3
    584a:	222f      	movs	r2, #47	; 0x2f
    584c:	491b      	ldr	r1, [pc, #108]	; (58bc <_calendar_init+0x94>)
    584e:	4618      	mov	r0, r3
    5850:	4b1b      	ldr	r3, [pc, #108]	; (58c0 <_calendar_init+0x98>)
    5852:	4798      	blx	r3

	_rtc_dev = dev;
    5854:	4a1b      	ldr	r2, [pc, #108]	; (58c4 <_calendar_init+0x9c>)
    5856:	687b      	ldr	r3, [r7, #4]
    5858:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    585a:	687b      	ldr	r3, [r7, #4]
    585c:	681b      	ldr	r3, [r3, #0]
    585e:	4618      	mov	r0, r3
    5860:	4b19      	ldr	r3, [pc, #100]	; (58c8 <_calendar_init+0xa0>)
    5862:	4798      	blx	r3
    5864:	4603      	mov	r3, r0
    5866:	2b00      	cmp	r3, #0
    5868:	d00a      	beq.n	5880 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    586a:	687b      	ldr	r3, [r7, #4]
    586c:	681b      	ldr	r3, [r3, #0]
    586e:	4618      	mov	r0, r3
    5870:	4b16      	ldr	r3, [pc, #88]	; (58cc <_calendar_init+0xa4>)
    5872:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5874:	687b      	ldr	r3, [r7, #4]
    5876:	681b      	ldr	r3, [r3, #0]
    5878:	2102      	movs	r1, #2
    587a:	4618      	mov	r0, r3
    587c:	4b14      	ldr	r3, [pc, #80]	; (58d0 <_calendar_init+0xa8>)
    587e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5880:	687b      	ldr	r3, [r7, #4]
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	4618      	mov	r0, r3
    5886:	4b13      	ldr	r3, [pc, #76]	; (58d4 <_calendar_init+0xac>)
    5888:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    588a:	687b      	ldr	r3, [r7, #4]
    588c:	681b      	ldr	r3, [r3, #0]
    588e:	2101      	movs	r1, #1
    5890:	4618      	mov	r0, r3
    5892:	4b0f      	ldr	r3, [pc, #60]	; (58d0 <_calendar_init+0xa8>)
    5894:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5896:	687b      	ldr	r3, [r7, #4]
    5898:	681b      	ldr	r3, [r3, #0]
    589a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    589e:	4618      	mov	r0, r3
    58a0:	4b0d      	ldr	r3, [pc, #52]	; (58d8 <_calendar_init+0xb0>)
    58a2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    58a4:	687b      	ldr	r3, [r7, #4]
    58a6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    58a8:	2100      	movs	r1, #0
    58aa:	4618      	mov	r0, r3
    58ac:	4b0b      	ldr	r3, [pc, #44]	; (58dc <_calendar_init+0xb4>)
    58ae:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    58b0:	2300      	movs	r3, #0
}
    58b2:	4618      	mov	r0, r3
    58b4:	3708      	adds	r7, #8
    58b6:	46bd      	mov	sp, r7
    58b8:	bd80      	pop	{r7, pc}
    58ba:	bf00      	nop
    58bc:	0000efac 	.word	0x0000efac
    58c0:	0000349d 	.word	0x0000349d
    58c4:	20000800 	.word	0x20000800
    58c8:	00005779 	.word	0x00005779
    58cc:	000057b5 	.word	0x000057b5
    58d0:	000056bd 	.word	0x000056bd
    58d4:	0000574d 	.word	0x0000574d
    58d8:	000057e5 	.word	0x000057e5
    58dc:	0000580d 	.word	0x0000580d

000058e0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    58e0:	b580      	push	{r7, lr}
    58e2:	b084      	sub	sp, #16
    58e4:	af00      	add	r7, sp, #0
    58e6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    58e8:	687b      	ldr	r3, [r7, #4]
    58ea:	681b      	ldr	r3, [r3, #0]
    58ec:	4618      	mov	r0, r3
    58ee:	4b19      	ldr	r3, [pc, #100]	; (5954 <_rtc_interrupt_handler+0x74>)
    58f0:	4798      	blx	r3
    58f2:	4603      	mov	r3, r0
    58f4:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    58f6:	687b      	ldr	r3, [r7, #4]
    58f8:	681b      	ldr	r3, [r3, #0]
    58fa:	4618      	mov	r0, r3
    58fc:	4b16      	ldr	r3, [pc, #88]	; (5958 <_rtc_interrupt_handler+0x78>)
    58fe:	4798      	blx	r3
    5900:	4603      	mov	r3, r0
    5902:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5904:	89fa      	ldrh	r2, [r7, #14]
    5906:	89bb      	ldrh	r3, [r7, #12]
    5908:	4013      	ands	r3, r2
    590a:	b29b      	uxth	r3, r3
    590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5910:	2b00      	cmp	r3, #0
    5912:	d009      	beq.n	5928 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5914:	687b      	ldr	r3, [r7, #4]
    5916:	685b      	ldr	r3, [r3, #4]
    5918:	6878      	ldr	r0, [r7, #4]
    591a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    591c:	687b      	ldr	r3, [r7, #4]
    591e:	681b      	ldr	r3, [r3, #0]
    5920:	4618      	mov	r0, r3
    5922:	4b0e      	ldr	r3, [pc, #56]	; (595c <_rtc_interrupt_handler+0x7c>)
    5924:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5926:	e010      	b.n	594a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5928:	89fa      	ldrh	r2, [r7, #14]
    592a:	89bb      	ldrh	r3, [r7, #12]
    592c:	4013      	ands	r3, r2
    592e:	b29b      	uxth	r3, r3
    5930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5934:	2b00      	cmp	r3, #0
    5936:	d008      	beq.n	594a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5938:	687b      	ldr	r3, [r7, #4]
    593a:	689b      	ldr	r3, [r3, #8]
    593c:	6878      	ldr	r0, [r7, #4]
    593e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5940:	687b      	ldr	r3, [r7, #4]
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	4618      	mov	r0, r3
    5946:	4b06      	ldr	r3, [pc, #24]	; (5960 <_rtc_interrupt_handler+0x80>)
    5948:	4798      	blx	r3
}
    594a:	bf00      	nop
    594c:	3710      	adds	r7, #16
    594e:	46bd      	mov	sp, r7
    5950:	bd80      	pop	{r7, pc}
    5952:	bf00      	nop
    5954:	00005719 	.word	0x00005719
    5958:	00005733 	.word	0x00005733
    595c:	000056e1 	.word	0x000056e1
    5960:	000056fd 	.word	0x000056fd

00005964 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5964:	b580      	push	{r7, lr}
    5966:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5968:	4b03      	ldr	r3, [pc, #12]	; (5978 <RTC_Handler+0x14>)
    596a:	681b      	ldr	r3, [r3, #0]
    596c:	4618      	mov	r0, r3
    596e:	4b03      	ldr	r3, [pc, #12]	; (597c <RTC_Handler+0x18>)
    5970:	4798      	blx	r3
}
    5972:	bf00      	nop
    5974:	bd80      	pop	{r7, pc}
    5976:	bf00      	nop
    5978:	20000800 	.word	0x20000800
    597c:	000058e1 	.word	0x000058e1

00005980 <__NVIC_EnableIRQ>:
{
    5980:	b480      	push	{r7}
    5982:	b083      	sub	sp, #12
    5984:	af00      	add	r7, sp, #0
    5986:	4603      	mov	r3, r0
    5988:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    598a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    598e:	2b00      	cmp	r3, #0
    5990:	db0b      	blt.n	59aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5992:	4909      	ldr	r1, [pc, #36]	; (59b8 <__NVIC_EnableIRQ+0x38>)
    5994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5998:	095b      	lsrs	r3, r3, #5
    599a:	88fa      	ldrh	r2, [r7, #6]
    599c:	f002 021f 	and.w	r2, r2, #31
    59a0:	2001      	movs	r0, #1
    59a2:	fa00 f202 	lsl.w	r2, r0, r2
    59a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    59aa:	bf00      	nop
    59ac:	370c      	adds	r7, #12
    59ae:	46bd      	mov	sp, r7
    59b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b4:	4770      	bx	lr
    59b6:	bf00      	nop
    59b8:	e000e100 	.word	0xe000e100

000059bc <__NVIC_DisableIRQ>:
{
    59bc:	b480      	push	{r7}
    59be:	b083      	sub	sp, #12
    59c0:	af00      	add	r7, sp, #0
    59c2:	4603      	mov	r3, r0
    59c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    59c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    59ca:	2b00      	cmp	r3, #0
    59cc:	db10      	blt.n	59f0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    59ce:	490b      	ldr	r1, [pc, #44]	; (59fc <__NVIC_DisableIRQ+0x40>)
    59d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    59d4:	095b      	lsrs	r3, r3, #5
    59d6:	88fa      	ldrh	r2, [r7, #6]
    59d8:	f002 021f 	and.w	r2, r2, #31
    59dc:	2001      	movs	r0, #1
    59de:	fa00 f202 	lsl.w	r2, r0, r2
    59e2:	3320      	adds	r3, #32
    59e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    59e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    59ec:	f3bf 8f6f 	isb	sy
}
    59f0:	bf00      	nop
    59f2:	370c      	adds	r7, #12
    59f4:	46bd      	mov	sp, r7
    59f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59fa:	4770      	bx	lr
    59fc:	e000e100 	.word	0xe000e100

00005a00 <__NVIC_ClearPendingIRQ>:
{
    5a00:	b480      	push	{r7}
    5a02:	b083      	sub	sp, #12
    5a04:	af00      	add	r7, sp, #0
    5a06:	4603      	mov	r3, r0
    5a08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a0e:	2b00      	cmp	r3, #0
    5a10:	db0c      	blt.n	5a2c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a12:	4909      	ldr	r1, [pc, #36]	; (5a38 <__NVIC_ClearPendingIRQ+0x38>)
    5a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a18:	095b      	lsrs	r3, r3, #5
    5a1a:	88fa      	ldrh	r2, [r7, #6]
    5a1c:	f002 021f 	and.w	r2, r2, #31
    5a20:	2001      	movs	r0, #1
    5a22:	fa00 f202 	lsl.w	r2, r0, r2
    5a26:	3360      	adds	r3, #96	; 0x60
    5a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5a2c:	bf00      	nop
    5a2e:	370c      	adds	r7, #12
    5a30:	46bd      	mov	sp, r7
    5a32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a36:	4770      	bx	lr
    5a38:	e000e100 	.word	0xe000e100

00005a3c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5a3c:	b480      	push	{r7}
    5a3e:	b083      	sub	sp, #12
    5a40:	af00      	add	r7, sp, #0
    5a42:	6078      	str	r0, [r7, #4]
    5a44:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5a46:	bf00      	nop
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	69da      	ldr	r2, [r3, #28]
    5a4c:	683b      	ldr	r3, [r7, #0]
    5a4e:	4013      	ands	r3, r2
    5a50:	2b00      	cmp	r3, #0
    5a52:	d1f9      	bne.n	5a48 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5a54:	bf00      	nop
    5a56:	370c      	adds	r7, #12
    5a58:	46bd      	mov	sp, r7
    5a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a5e:	4770      	bx	lr

00005a60 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5a60:	b480      	push	{r7}
    5a62:	b083      	sub	sp, #12
    5a64:	af00      	add	r7, sp, #0
    5a66:	6078      	str	r0, [r7, #4]
    5a68:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	69da      	ldr	r2, [r3, #28]
    5a6e:	683b      	ldr	r3, [r7, #0]
    5a70:	4013      	ands	r3, r2
    5a72:	2b00      	cmp	r3, #0
    5a74:	bf14      	ite	ne
    5a76:	2301      	movne	r3, #1
    5a78:	2300      	moveq	r3, #0
    5a7a:	b2db      	uxtb	r3, r3
}
    5a7c:	4618      	mov	r0, r3
    5a7e:	370c      	adds	r7, #12
    5a80:	46bd      	mov	sp, r7
    5a82:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a86:	4770      	bx	lr

00005a88 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5a88:	b480      	push	{r7}
    5a8a:	b083      	sub	sp, #12
    5a8c:	af00      	add	r7, sp, #0
    5a8e:	6078      	str	r0, [r7, #4]
    5a90:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5a92:	bf00      	nop
    5a94:	687b      	ldr	r3, [r7, #4]
    5a96:	69da      	ldr	r2, [r3, #28]
    5a98:	683b      	ldr	r3, [r7, #0]
    5a9a:	4013      	ands	r3, r2
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d1f9      	bne.n	5a94 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5aa0:	bf00      	nop
    5aa2:	370c      	adds	r7, #12
    5aa4:	46bd      	mov	sp, r7
    5aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aaa:	4770      	bx	lr

00005aac <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5aac:	b480      	push	{r7}
    5aae:	b083      	sub	sp, #12
    5ab0:	af00      	add	r7, sp, #0
    5ab2:	6078      	str	r0, [r7, #4]
    5ab4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5ab6:	687b      	ldr	r3, [r7, #4]
    5ab8:	69da      	ldr	r2, [r3, #28]
    5aba:	683b      	ldr	r3, [r7, #0]
    5abc:	4013      	ands	r3, r2
    5abe:	2b00      	cmp	r3, #0
    5ac0:	bf14      	ite	ne
    5ac2:	2301      	movne	r3, #1
    5ac4:	2300      	moveq	r3, #0
    5ac6:	b2db      	uxtb	r3, r3
}
    5ac8:	4618      	mov	r0, r3
    5aca:	370c      	adds	r7, #12
    5acc:	46bd      	mov	sp, r7
    5ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ad2:	4770      	bx	lr

00005ad4 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5ad4:	b480      	push	{r7}
    5ad6:	b083      	sub	sp, #12
    5ad8:	af00      	add	r7, sp, #0
    5ada:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5adc:	687b      	ldr	r3, [r7, #4]
    5ade:	2201      	movs	r2, #1
    5ae0:	761a      	strb	r2, [r3, #24]
}
    5ae2:	bf00      	nop
    5ae4:	370c      	adds	r7, #12
    5ae6:	46bd      	mov	sp, r7
    5ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aec:	4770      	bx	lr

00005aee <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5aee:	b480      	push	{r7}
    5af0:	b083      	sub	sp, #12
    5af2:	af00      	add	r7, sp, #0
    5af4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5af6:	687b      	ldr	r3, [r7, #4]
    5af8:	2202      	movs	r2, #2
    5afa:	761a      	strb	r2, [r3, #24]
}
    5afc:	bf00      	nop
    5afe:	370c      	adds	r7, #12
    5b00:	46bd      	mov	sp, r7
    5b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b06:	4770      	bx	lr

00005b08 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5b08:	b480      	push	{r7}
    5b0a:	b083      	sub	sp, #12
    5b0c:	af00      	add	r7, sp, #0
    5b0e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5b10:	687b      	ldr	r3, [r7, #4]
    5b12:	7e1b      	ldrb	r3, [r3, #24]
    5b14:	b2db      	uxtb	r3, r3
}
    5b16:	4618      	mov	r0, r3
    5b18:	370c      	adds	r7, #12
    5b1a:	46bd      	mov	sp, r7
    5b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b20:	4770      	bx	lr

00005b22 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    5b22:	b480      	push	{r7}
    5b24:	b083      	sub	sp, #12
    5b26:	af00      	add	r7, sp, #0
    5b28:	6078      	str	r0, [r7, #4]
    5b2a:	460b      	mov	r3, r1
    5b2c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    5b2e:	687b      	ldr	r3, [r7, #4]
    5b30:	78fa      	ldrb	r2, [r7, #3]
    5b32:	761a      	strb	r2, [r3, #24]
}
    5b34:	bf00      	nop
    5b36:	370c      	adds	r7, #12
    5b38:	46bd      	mov	sp, r7
    5b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b3e:	4770      	bx	lr

00005b40 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5b40:	b480      	push	{r7}
    5b42:	b085      	sub	sp, #20
    5b44:	af00      	add	r7, sp, #0
    5b46:	6078      	str	r0, [r7, #4]
    5b48:	460b      	mov	r3, r1
    5b4a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5b4c:	687b      	ldr	r3, [r7, #4]
    5b4e:	7e1b      	ldrb	r3, [r3, #24]
    5b50:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5b52:	7bfa      	ldrb	r2, [r7, #15]
    5b54:	78fb      	ldrb	r3, [r7, #3]
    5b56:	4013      	ands	r3, r2
    5b58:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5b5a:	7bfb      	ldrb	r3, [r7, #15]
}
    5b5c:	4618      	mov	r0, r3
    5b5e:	3714      	adds	r7, #20
    5b60:	46bd      	mov	sp, r7
    5b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b66:	4770      	bx	lr

00005b68 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5b68:	b480      	push	{r7}
    5b6a:	b083      	sub	sp, #12
    5b6c:	af00      	add	r7, sp, #0
    5b6e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	7e1b      	ldrb	r3, [r3, #24]
    5b74:	b2db      	uxtb	r3, r3
}
    5b76:	4618      	mov	r0, r3
    5b78:	370c      	adds	r7, #12
    5b7a:	46bd      	mov	sp, r7
    5b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b80:	4770      	bx	lr

00005b82 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5b82:	b480      	push	{r7}
    5b84:	b083      	sub	sp, #12
    5b86:	af00      	add	r7, sp, #0
    5b88:	6078      	str	r0, [r7, #4]
    5b8a:	460b      	mov	r3, r1
    5b8c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5b8e:	687b      	ldr	r3, [r7, #4]
    5b90:	78fa      	ldrb	r2, [r7, #3]
    5b92:	761a      	strb	r2, [r3, #24]
}
    5b94:	bf00      	nop
    5b96:	370c      	adds	r7, #12
    5b98:	46bd      	mov	sp, r7
    5b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b9e:	4770      	bx	lr

00005ba0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5ba0:	b580      	push	{r7, lr}
    5ba2:	b082      	sub	sp, #8
    5ba4:	af00      	add	r7, sp, #0
    5ba6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5ba8:	687b      	ldr	r3, [r7, #4]
    5baa:	681b      	ldr	r3, [r3, #0]
    5bac:	f043 0202 	orr.w	r2, r3, #2
    5bb0:	687b      	ldr	r3, [r7, #4]
    5bb2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5bb4:	2103      	movs	r1, #3
    5bb6:	6878      	ldr	r0, [r7, #4]
    5bb8:	4b02      	ldr	r3, [pc, #8]	; (5bc4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    5bba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bbc:	bf00      	nop
    5bbe:	3708      	adds	r7, #8
    5bc0:	46bd      	mov	sp, r7
    5bc2:	bd80      	pop	{r7, pc}
    5bc4:	00005a3d 	.word	0x00005a3d

00005bc8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5bc8:	b580      	push	{r7, lr}
    5bca:	b082      	sub	sp, #8
    5bcc:	af00      	add	r7, sp, #0
    5bce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5bd0:	687b      	ldr	r3, [r7, #4]
    5bd2:	681b      	ldr	r3, [r3, #0]
    5bd4:	f023 0202 	bic.w	r2, r3, #2
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5bdc:	2103      	movs	r1, #3
    5bde:	6878      	ldr	r0, [r7, #4]
    5be0:	4b02      	ldr	r3, [pc, #8]	; (5bec <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5be2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5be4:	bf00      	nop
    5be6:	3708      	adds	r7, #8
    5be8:	46bd      	mov	sp, r7
    5bea:	bd80      	pop	{r7, pc}
    5bec:	00005a3d 	.word	0x00005a3d

00005bf0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5bf0:	b480      	push	{r7}
    5bf2:	b085      	sub	sp, #20
    5bf4:	af00      	add	r7, sp, #0
    5bf6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5bf8:	687b      	ldr	r3, [r7, #4]
    5bfa:	681b      	ldr	r3, [r3, #0]
    5bfc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5bfe:	68fb      	ldr	r3, [r7, #12]
    5c00:	0edb      	lsrs	r3, r3, #27
    5c02:	f003 0301 	and.w	r3, r3, #1
    5c06:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5c08:	68fb      	ldr	r3, [r7, #12]
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	bf14      	ite	ne
    5c0e:	2301      	movne	r3, #1
    5c10:	2300      	moveq	r3, #0
    5c12:	b2db      	uxtb	r3, r3
}
    5c14:	4618      	mov	r0, r3
    5c16:	3714      	adds	r7, #20
    5c18:	46bd      	mov	sp, r7
    5c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c1e:	4770      	bx	lr

00005c20 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5c20:	b580      	push	{r7, lr}
    5c22:	b084      	sub	sp, #16
    5c24:	af00      	add	r7, sp, #0
    5c26:	6078      	str	r0, [r7, #4]
    5c28:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5c2a:	2103      	movs	r1, #3
    5c2c:	6878      	ldr	r0, [r7, #4]
    5c2e:	4b07      	ldr	r3, [pc, #28]	; (5c4c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5c30:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5c32:	687b      	ldr	r3, [r7, #4]
    5c34:	681b      	ldr	r3, [r3, #0]
    5c36:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5c38:	68fa      	ldr	r2, [r7, #12]
    5c3a:	683b      	ldr	r3, [r7, #0]
    5c3c:	4013      	ands	r3, r2
    5c3e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5c40:	68fb      	ldr	r3, [r7, #12]
}
    5c42:	4618      	mov	r0, r3
    5c44:	3710      	adds	r7, #16
    5c46:	46bd      	mov	sp, r7
    5c48:	bd80      	pop	{r7, pc}
    5c4a:	bf00      	nop
    5c4c:	00005a3d 	.word	0x00005a3d

00005c50 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5c50:	b580      	push	{r7, lr}
    5c52:	b082      	sub	sp, #8
    5c54:	af00      	add	r7, sp, #0
    5c56:	6078      	str	r0, [r7, #4]
    5c58:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5c5a:	687b      	ldr	r3, [r7, #4]
    5c5c:	683a      	ldr	r2, [r7, #0]
    5c5e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5c60:	2103      	movs	r1, #3
    5c62:	6878      	ldr	r0, [r7, #4]
    5c64:	4b02      	ldr	r3, [pc, #8]	; (5c70 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5c66:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c68:	bf00      	nop
    5c6a:	3708      	adds	r7, #8
    5c6c:	46bd      	mov	sp, r7
    5c6e:	bd80      	pop	{r7, pc}
    5c70:	00005a3d 	.word	0x00005a3d

00005c74 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5c74:	b580      	push	{r7, lr}
    5c76:	b084      	sub	sp, #16
    5c78:	af00      	add	r7, sp, #0
    5c7a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5c7c:	2103      	movs	r1, #3
    5c7e:	6878      	ldr	r0, [r7, #4]
    5c80:	4b09      	ldr	r3, [pc, #36]	; (5ca8 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5c82:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5c84:	687b      	ldr	r3, [r7, #4]
    5c86:	681b      	ldr	r3, [r3, #0]
    5c88:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5c8a:	68fb      	ldr	r3, [r7, #12]
    5c8c:	085b      	lsrs	r3, r3, #1
    5c8e:	f003 0301 	and.w	r3, r3, #1
    5c92:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5c94:	68fb      	ldr	r3, [r7, #12]
    5c96:	2b00      	cmp	r3, #0
    5c98:	bf14      	ite	ne
    5c9a:	2301      	movne	r3, #1
    5c9c:	2300      	moveq	r3, #0
    5c9e:	b2db      	uxtb	r3, r3
}
    5ca0:	4618      	mov	r0, r3
    5ca2:	3710      	adds	r7, #16
    5ca4:	46bd      	mov	sp, r7
    5ca6:	bd80      	pop	{r7, pc}
    5ca8:	00005a89 	.word	0x00005a89

00005cac <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5cac:	b580      	push	{r7, lr}
    5cae:	b082      	sub	sp, #8
    5cb0:	af00      	add	r7, sp, #0
    5cb2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	681b      	ldr	r3, [r3, #0]
    5cb8:	f023 0202 	bic.w	r2, r3, #2
    5cbc:	687b      	ldr	r3, [r7, #4]
    5cbe:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5cc0:	2103      	movs	r1, #3
    5cc2:	6878      	ldr	r0, [r7, #4]
    5cc4:	4b02      	ldr	r3, [pc, #8]	; (5cd0 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5cc6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cc8:	bf00      	nop
    5cca:	3708      	adds	r7, #8
    5ccc:	46bd      	mov	sp, r7
    5cce:	bd80      	pop	{r7, pc}
    5cd0:	00005a89 	.word	0x00005a89

00005cd4 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5cd4:	b580      	push	{r7, lr}
    5cd6:	b084      	sub	sp, #16
    5cd8:	af00      	add	r7, sp, #0
    5cda:	6078      	str	r0, [r7, #4]
    5cdc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5cde:	2103      	movs	r1, #3
    5ce0:	6878      	ldr	r0, [r7, #4]
    5ce2:	4b07      	ldr	r3, [pc, #28]	; (5d00 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5ce4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5ce6:	687b      	ldr	r3, [r7, #4]
    5ce8:	681b      	ldr	r3, [r3, #0]
    5cea:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5cec:	68fa      	ldr	r2, [r7, #12]
    5cee:	683b      	ldr	r3, [r7, #0]
    5cf0:	4013      	ands	r3, r2
    5cf2:	60fb      	str	r3, [r7, #12]
	return tmp;
    5cf4:	68fb      	ldr	r3, [r7, #12]
}
    5cf6:	4618      	mov	r0, r3
    5cf8:	3710      	adds	r7, #16
    5cfa:	46bd      	mov	sp, r7
    5cfc:	bd80      	pop	{r7, pc}
    5cfe:	bf00      	nop
    5d00:	00005a89 	.word	0x00005a89

00005d04 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5d04:	b580      	push	{r7, lr}
    5d06:	b082      	sub	sp, #8
    5d08:	af00      	add	r7, sp, #0
    5d0a:	6078      	str	r0, [r7, #4]
    5d0c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5d0e:	687b      	ldr	r3, [r7, #4]
    5d10:	683a      	ldr	r2, [r7, #0]
    5d12:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5d14:	2103      	movs	r1, #3
    5d16:	6878      	ldr	r0, [r7, #4]
    5d18:	4b02      	ldr	r3, [pc, #8]	; (5d24 <hri_sercomspi_write_CTRLA_reg+0x20>)
    5d1a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d1c:	bf00      	nop
    5d1e:	3708      	adds	r7, #8
    5d20:	46bd      	mov	sp, r7
    5d22:	bd80      	pop	{r7, pc}
    5d24:	00005a89 	.word	0x00005a89

00005d28 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5d28:	b580      	push	{r7, lr}
    5d2a:	b082      	sub	sp, #8
    5d2c:	af00      	add	r7, sp, #0
    5d2e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5d30:	687b      	ldr	r3, [r7, #4]
    5d32:	685b      	ldr	r3, [r3, #4]
    5d34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5d38:	687b      	ldr	r3, [r7, #4]
    5d3a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d3c:	2104      	movs	r1, #4
    5d3e:	6878      	ldr	r0, [r7, #4]
    5d40:	4b02      	ldr	r3, [pc, #8]	; (5d4c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5d42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d44:	bf00      	nop
    5d46:	3708      	adds	r7, #8
    5d48:	46bd      	mov	sp, r7
    5d4a:	bd80      	pop	{r7, pc}
    5d4c:	00005a3d 	.word	0x00005a3d

00005d50 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5d50:	b580      	push	{r7, lr}
    5d52:	b082      	sub	sp, #8
    5d54:	af00      	add	r7, sp, #0
    5d56:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5d58:	687b      	ldr	r3, [r7, #4]
    5d5a:	685b      	ldr	r3, [r3, #4]
    5d5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5d60:	687b      	ldr	r3, [r7, #4]
    5d62:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d64:	2104      	movs	r1, #4
    5d66:	6878      	ldr	r0, [r7, #4]
    5d68:	4b02      	ldr	r3, [pc, #8]	; (5d74 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5d6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d6c:	bf00      	nop
    5d6e:	3708      	adds	r7, #8
    5d70:	46bd      	mov	sp, r7
    5d72:	bd80      	pop	{r7, pc}
    5d74:	00005a3d 	.word	0x00005a3d

00005d78 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5d78:	b580      	push	{r7, lr}
    5d7a:	b082      	sub	sp, #8
    5d7c:	af00      	add	r7, sp, #0
    5d7e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5d80:	687b      	ldr	r3, [r7, #4]
    5d82:	685b      	ldr	r3, [r3, #4]
    5d84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5d88:	687b      	ldr	r3, [r7, #4]
    5d8a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d8c:	2104      	movs	r1, #4
    5d8e:	6878      	ldr	r0, [r7, #4]
    5d90:	4b02      	ldr	r3, [pc, #8]	; (5d9c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5d92:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d94:	bf00      	nop
    5d96:	3708      	adds	r7, #8
    5d98:	46bd      	mov	sp, r7
    5d9a:	bd80      	pop	{r7, pc}
    5d9c:	00005a3d 	.word	0x00005a3d

00005da0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5da0:	b580      	push	{r7, lr}
    5da2:	b082      	sub	sp, #8
    5da4:	af00      	add	r7, sp, #0
    5da6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	685b      	ldr	r3, [r3, #4]
    5dac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5db0:	687b      	ldr	r3, [r7, #4]
    5db2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5db4:	2104      	movs	r1, #4
    5db6:	6878      	ldr	r0, [r7, #4]
    5db8:	4b02      	ldr	r3, [pc, #8]	; (5dc4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5dba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5dbc:	bf00      	nop
    5dbe:	3708      	adds	r7, #8
    5dc0:	46bd      	mov	sp, r7
    5dc2:	bd80      	pop	{r7, pc}
    5dc4:	00005a3d 	.word	0x00005a3d

00005dc8 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5dc8:	b580      	push	{r7, lr}
    5dca:	b082      	sub	sp, #8
    5dcc:	af00      	add	r7, sp, #0
    5dce:	6078      	str	r0, [r7, #4]
    5dd0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5dd2:	687b      	ldr	r3, [r7, #4]
    5dd4:	685a      	ldr	r2, [r3, #4]
    5dd6:	683b      	ldr	r3, [r7, #0]
    5dd8:	041b      	lsls	r3, r3, #16
    5dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5dde:	431a      	orrs	r2, r3
    5de0:	687b      	ldr	r3, [r7, #4]
    5de2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5de4:	2104      	movs	r1, #4
    5de6:	6878      	ldr	r0, [r7, #4]
    5de8:	4b02      	ldr	r3, [pc, #8]	; (5df4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5dea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5dec:	bf00      	nop
    5dee:	3708      	adds	r7, #8
    5df0:	46bd      	mov	sp, r7
    5df2:	bd80      	pop	{r7, pc}
    5df4:	00005a3d 	.word	0x00005a3d

00005df8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5df8:	b580      	push	{r7, lr}
    5dfa:	b082      	sub	sp, #8
    5dfc:	af00      	add	r7, sp, #0
    5dfe:	6078      	str	r0, [r7, #4]
    5e00:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	683a      	ldr	r2, [r7, #0]
    5e06:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e08:	2104      	movs	r1, #4
    5e0a:	6878      	ldr	r0, [r7, #4]
    5e0c:	4b02      	ldr	r3, [pc, #8]	; (5e18 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5e0e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e10:	bf00      	nop
    5e12:	3708      	adds	r7, #8
    5e14:	46bd      	mov	sp, r7
    5e16:	bd80      	pop	{r7, pc}
    5e18:	00005a3d 	.word	0x00005a3d

00005e1c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5e1c:	b580      	push	{r7, lr}
    5e1e:	b082      	sub	sp, #8
    5e20:	af00      	add	r7, sp, #0
    5e22:	6078      	str	r0, [r7, #4]
    5e24:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5e26:	687b      	ldr	r3, [r7, #4]
    5e28:	683a      	ldr	r2, [r7, #0]
    5e2a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5e2c:	2117      	movs	r1, #23
    5e2e:	6878      	ldr	r0, [r7, #4]
    5e30:	4b02      	ldr	r3, [pc, #8]	; (5e3c <hri_sercomspi_write_CTRLB_reg+0x20>)
    5e32:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e34:	bf00      	nop
    5e36:	3708      	adds	r7, #8
    5e38:	46bd      	mov	sp, r7
    5e3a:	bd80      	pop	{r7, pc}
    5e3c:	00005a89 	.word	0x00005a89

00005e40 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5e40:	b480      	push	{r7}
    5e42:	b083      	sub	sp, #12
    5e44:	af00      	add	r7, sp, #0
    5e46:	6078      	str	r0, [r7, #4]
    5e48:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5e4a:	687b      	ldr	r3, [r7, #4]
    5e4c:	683a      	ldr	r2, [r7, #0]
    5e4e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e50:	bf00      	nop
    5e52:	370c      	adds	r7, #12
    5e54:	46bd      	mov	sp, r7
    5e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e5a:	4770      	bx	lr

00005e5c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5e5c:	b480      	push	{r7}
    5e5e:	b083      	sub	sp, #12
    5e60:	af00      	add	r7, sp, #0
    5e62:	6078      	str	r0, [r7, #4]
    5e64:	460b      	mov	r3, r1
    5e66:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5e68:	687b      	ldr	r3, [r7, #4]
    5e6a:	78fa      	ldrb	r2, [r7, #3]
    5e6c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e6e:	bf00      	nop
    5e70:	370c      	adds	r7, #12
    5e72:	46bd      	mov	sp, r7
    5e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e78:	4770      	bx	lr
	...

00005e7c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5e7c:	b580      	push	{r7, lr}
    5e7e:	b084      	sub	sp, #16
    5e80:	af00      	add	r7, sp, #0
    5e82:	6078      	str	r0, [r7, #4]
    5e84:	460b      	mov	r3, r1
    5e86:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5e88:	687b      	ldr	r3, [r7, #4]
    5e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e8c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5e8e:	68fb      	ldr	r3, [r7, #12]
    5e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5e94:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5e96:	78fb      	ldrb	r3, [r7, #3]
    5e98:	039b      	lsls	r3, r3, #14
    5e9a:	461a      	mov	r2, r3
    5e9c:	68fb      	ldr	r3, [r7, #12]
    5e9e:	4313      	orrs	r3, r2
    5ea0:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5ea2:	687b      	ldr	r3, [r7, #4]
    5ea4:	68fa      	ldr	r2, [r7, #12]
    5ea6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ea8:	2104      	movs	r1, #4
    5eaa:	6878      	ldr	r0, [r7, #4]
    5eac:	4b02      	ldr	r3, [pc, #8]	; (5eb8 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5eae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5eb0:	bf00      	nop
    5eb2:	3710      	adds	r7, #16
    5eb4:	46bd      	mov	sp, r7
    5eb6:	bd80      	pop	{r7, pc}
    5eb8:	00005a3d 	.word	0x00005a3d

00005ebc <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5ebc:	b580      	push	{r7, lr}
    5ebe:	b082      	sub	sp, #8
    5ec0:	af00      	add	r7, sp, #0
    5ec2:	6078      	str	r0, [r7, #4]
    5ec4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5ec6:	687b      	ldr	r3, [r7, #4]
    5ec8:	683a      	ldr	r2, [r7, #0]
    5eca:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ecc:	2104      	movs	r1, #4
    5ece:	6878      	ldr	r0, [r7, #4]
    5ed0:	4b02      	ldr	r3, [pc, #8]	; (5edc <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5ed2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ed4:	bf00      	nop
    5ed6:	3708      	adds	r7, #8
    5ed8:	46bd      	mov	sp, r7
    5eda:	bd80      	pop	{r7, pc}
    5edc:	00005a3d 	.word	0x00005a3d

00005ee0 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5ee0:	b580      	push	{r7, lr}
    5ee2:	b082      	sub	sp, #8
    5ee4:	af00      	add	r7, sp, #0
    5ee6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ee8:	2104      	movs	r1, #4
    5eea:	6878      	ldr	r0, [r7, #4]
    5eec:	4b03      	ldr	r3, [pc, #12]	; (5efc <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5eee:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5ef0:	687b      	ldr	r3, [r7, #4]
    5ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5ef4:	4618      	mov	r0, r3
    5ef6:	3708      	adds	r7, #8
    5ef8:	46bd      	mov	sp, r7
    5efa:	bd80      	pop	{r7, pc}
    5efc:	00005a3d 	.word	0x00005a3d

00005f00 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5f00:	b480      	push	{r7}
    5f02:	b083      	sub	sp, #12
    5f04:	af00      	add	r7, sp, #0
    5f06:	6078      	str	r0, [r7, #4]
    5f08:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5f0a:	687b      	ldr	r3, [r7, #4]
    5f0c:	683a      	ldr	r2, [r7, #0]
    5f0e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f10:	bf00      	nop
    5f12:	370c      	adds	r7, #12
    5f14:	46bd      	mov	sp, r7
    5f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f1a:	4770      	bx	lr

00005f1c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5f1c:	b580      	push	{r7, lr}
    5f1e:	b082      	sub	sp, #8
    5f20:	af00      	add	r7, sp, #0
    5f22:	6078      	str	r0, [r7, #4]
    5f24:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5f26:	687b      	ldr	r3, [r7, #4]
    5f28:	683a      	ldr	r2, [r7, #0]
    5f2a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f2c:	2104      	movs	r1, #4
    5f2e:	6878      	ldr	r0, [r7, #4]
    5f30:	4b02      	ldr	r3, [pc, #8]	; (5f3c <hri_sercomi2cm_write_DATA_reg+0x20>)
    5f32:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f34:	bf00      	nop
    5f36:	3708      	adds	r7, #8
    5f38:	46bd      	mov	sp, r7
    5f3a:	bd80      	pop	{r7, pc}
    5f3c:	00005a3d 	.word	0x00005a3d

00005f40 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5f40:	b580      	push	{r7, lr}
    5f42:	b082      	sub	sp, #8
    5f44:	af00      	add	r7, sp, #0
    5f46:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f48:	2104      	movs	r1, #4
    5f4a:	6878      	ldr	r0, [r7, #4]
    5f4c:	4b03      	ldr	r3, [pc, #12]	; (5f5c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5f4e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5f54:	4618      	mov	r0, r3
    5f56:	3708      	adds	r7, #8
    5f58:	46bd      	mov	sp, r7
    5f5a:	bd80      	pop	{r7, pc}
    5f5c:	00005a3d 	.word	0x00005a3d

00005f60 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5f60:	b480      	push	{r7}
    5f62:	b083      	sub	sp, #12
    5f64:	af00      	add	r7, sp, #0
    5f66:	6078      	str	r0, [r7, #4]
    5f68:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5f6a:	687b      	ldr	r3, [r7, #4]
    5f6c:	683a      	ldr	r2, [r7, #0]
    5f6e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f70:	bf00      	nop
    5f72:	370c      	adds	r7, #12
    5f74:	46bd      	mov	sp, r7
    5f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f7a:	4770      	bx	lr

00005f7c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5f7c:	b480      	push	{r7}
    5f7e:	b083      	sub	sp, #12
    5f80:	af00      	add	r7, sp, #0
    5f82:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5f88:	4618      	mov	r0, r3
    5f8a:	370c      	adds	r7, #12
    5f8c:	46bd      	mov	sp, r7
    5f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f92:	4770      	bx	lr

00005f94 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5f94:	b480      	push	{r7}
    5f96:	b083      	sub	sp, #12
    5f98:	af00      	add	r7, sp, #0
    5f9a:	6078      	str	r0, [r7, #4]
    5f9c:	460b      	mov	r3, r1
    5f9e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5fa0:	687b      	ldr	r3, [r7, #4]
    5fa2:	78fa      	ldrb	r2, [r7, #3]
    5fa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fa8:	bf00      	nop
    5faa:	370c      	adds	r7, #12
    5fac:	46bd      	mov	sp, r7
    5fae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fb2:	4770      	bx	lr

00005fb4 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5fb4:	b480      	push	{r7}
    5fb6:	b083      	sub	sp, #12
    5fb8:	af00      	add	r7, sp, #0
    5fba:	6078      	str	r0, [r7, #4]
    5fbc:	460b      	mov	r3, r1
    5fbe:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5fc0:	687b      	ldr	r3, [r7, #4]
    5fc2:	887a      	ldrh	r2, [r7, #2]
    5fc4:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fc6:	bf00      	nop
    5fc8:	370c      	adds	r7, #12
    5fca:	46bd      	mov	sp, r7
    5fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fd0:	4770      	bx	lr
	...

00005fd4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    5fd4:	b580      	push	{r7, lr}
    5fd6:	b082      	sub	sp, #8
    5fd8:	af00      	add	r7, sp, #0
    5fda:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5fdc:	2104      	movs	r1, #4
    5fde:	6878      	ldr	r0, [r7, #4]
    5fe0:	4b06      	ldr	r3, [pc, #24]	; (5ffc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    5fe2:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    5fe4:	687b      	ldr	r3, [r7, #4]
    5fe6:	8b5b      	ldrh	r3, [r3, #26]
    5fe8:	b29b      	uxth	r3, r3
    5fea:	091b      	lsrs	r3, r3, #4
    5fec:	b29b      	uxth	r3, r3
    5fee:	f003 0303 	and.w	r3, r3, #3
    5ff2:	b29b      	uxth	r3, r3
}
    5ff4:	4618      	mov	r0, r3
    5ff6:	3708      	adds	r7, #8
    5ff8:	46bd      	mov	sp, r7
    5ffa:	bd80      	pop	{r7, pc}
    5ffc:	00005a3d 	.word	0x00005a3d

00006000 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6000:	b580      	push	{r7, lr}
    6002:	b082      	sub	sp, #8
    6004:	af00      	add	r7, sp, #0
    6006:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6008:	2104      	movs	r1, #4
    600a:	6878      	ldr	r0, [r7, #4]
    600c:	4b04      	ldr	r3, [pc, #16]	; (6020 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    600e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	8b5b      	ldrh	r3, [r3, #26]
    6014:	b29b      	uxth	r3, r3
}
    6016:	4618      	mov	r0, r3
    6018:	3708      	adds	r7, #8
    601a:	46bd      	mov	sp, r7
    601c:	bd80      	pop	{r7, pc}
    601e:	bf00      	nop
    6020:	00005a3d 	.word	0x00005a3d

00006024 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6024:	b580      	push	{r7, lr}
    6026:	b082      	sub	sp, #8
    6028:	af00      	add	r7, sp, #0
    602a:	6078      	str	r0, [r7, #4]
    602c:	460b      	mov	r3, r1
    602e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6030:	687b      	ldr	r3, [r7, #4]
    6032:	887a      	ldrh	r2, [r7, #2]
    6034:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6036:	2104      	movs	r1, #4
    6038:	6878      	ldr	r0, [r7, #4]
    603a:	4b03      	ldr	r3, [pc, #12]	; (6048 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    603c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    603e:	bf00      	nop
    6040:	3708      	adds	r7, #8
    6042:	46bd      	mov	sp, r7
    6044:	bd80      	pop	{r7, pc}
    6046:	bf00      	nop
    6048:	00005a3d 	.word	0x00005a3d

0000604c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    604c:	b4b0      	push	{r4, r5, r7}
    604e:	b08d      	sub	sp, #52	; 0x34
    6050:	af00      	add	r7, sp, #0
    6052:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6054:	4b13      	ldr	r3, [pc, #76]	; (60a4 <_sercom_get_hardware_index+0x58>)
    6056:	f107 040c 	add.w	r4, r7, #12
    605a:	461d      	mov	r5, r3
    605c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    605e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6060:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6068:	2300      	movs	r3, #0
    606a:	62fb      	str	r3, [r7, #44]	; 0x2c
    606c:	e010      	b.n	6090 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6070:	009b      	lsls	r3, r3, #2
    6072:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6076:	4413      	add	r3, r2
    6078:	f853 3c24 	ldr.w	r3, [r3, #-36]
    607c:	461a      	mov	r2, r3
    607e:	687b      	ldr	r3, [r7, #4]
    6080:	429a      	cmp	r2, r3
    6082:	d102      	bne.n	608a <_sercom_get_hardware_index+0x3e>
			return i;
    6084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6086:	b2db      	uxtb	r3, r3
    6088:	e006      	b.n	6098 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    608c:	3301      	adds	r3, #1
    608e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6092:	2b07      	cmp	r3, #7
    6094:	d9eb      	bls.n	606e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6096:	2300      	movs	r3, #0
}
    6098:	4618      	mov	r0, r3
    609a:	3734      	adds	r7, #52	; 0x34
    609c:	46bd      	mov	sp, r7
    609e:	bcb0      	pop	{r4, r5, r7}
    60a0:	4770      	bx	lr
    60a2:	bf00      	nop
    60a4:	0000efe0 	.word	0x0000efe0

000060a8 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    60a8:	b480      	push	{r7}
    60aa:	b083      	sub	sp, #12
    60ac:	af00      	add	r7, sp, #0
    60ae:	6078      	str	r0, [r7, #4]
    60b0:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	4a05      	ldr	r2, [pc, #20]	; (60cc <_sercom_init_irq_param+0x24>)
    60b6:	4293      	cmp	r3, r2
    60b8:	d102      	bne.n	60c0 <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    60ba:	4a05      	ldr	r2, [pc, #20]	; (60d0 <_sercom_init_irq_param+0x28>)
    60bc:	683b      	ldr	r3, [r7, #0]
    60be:	6013      	str	r3, [r2, #0]
	}
}
    60c0:	bf00      	nop
    60c2:	370c      	adds	r7, #12
    60c4:	46bd      	mov	sp, r7
    60c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    60ca:	4770      	bx	lr
    60cc:	43000c00 	.word	0x43000c00
    60d0:	2000081c 	.word	0x2000081c

000060d4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    60d4:	b580      	push	{r7, lr}
    60d6:	b084      	sub	sp, #16
    60d8:	af00      	add	r7, sp, #0
    60da:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    60dc:	6878      	ldr	r0, [r7, #4]
    60de:	4b13      	ldr	r3, [pc, #76]	; (612c <_get_i2cm_index+0x58>)
    60e0:	4798      	blx	r3
    60e2:	4603      	mov	r3, r0
    60e4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    60e6:	2300      	movs	r3, #0
    60e8:	73fb      	strb	r3, [r7, #15]
    60ea:	e010      	b.n	610e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    60ec:	7bfa      	ldrb	r2, [r7, #15]
    60ee:	4910      	ldr	r1, [pc, #64]	; (6130 <_get_i2cm_index+0x5c>)
    60f0:	4613      	mov	r3, r2
    60f2:	005b      	lsls	r3, r3, #1
    60f4:	4413      	add	r3, r2
    60f6:	00db      	lsls	r3, r3, #3
    60f8:	440b      	add	r3, r1
    60fa:	781b      	ldrb	r3, [r3, #0]
    60fc:	7bba      	ldrb	r2, [r7, #14]
    60fe:	429a      	cmp	r2, r3
    6100:	d102      	bne.n	6108 <_get_i2cm_index+0x34>
			return i;
    6102:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6106:	e00d      	b.n	6124 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6108:	7bfb      	ldrb	r3, [r7, #15]
    610a:	3301      	adds	r3, #1
    610c:	73fb      	strb	r3, [r7, #15]
    610e:	7bfb      	ldrb	r3, [r7, #15]
    6110:	2b02      	cmp	r3, #2
    6112:	d9eb      	bls.n	60ec <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6114:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    6118:	4906      	ldr	r1, [pc, #24]	; (6134 <_get_i2cm_index+0x60>)
    611a:	2000      	movs	r0, #0
    611c:	4b06      	ldr	r3, [pc, #24]	; (6138 <_get_i2cm_index+0x64>)
    611e:	4798      	blx	r3
	return -1;
    6120:	f04f 33ff 	mov.w	r3, #4294967295
}
    6124:	4618      	mov	r0, r3
    6126:	3710      	adds	r7, #16
    6128:	46bd      	mov	sp, r7
    612a:	bd80      	pop	{r7, pc}
    612c:	0000604d 	.word	0x0000604d
    6130:	20000018 	.word	0x20000018
    6134:	0000efc4 	.word	0x0000efc4
    6138:	0000349d 	.word	0x0000349d

0000613c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    613c:	b580      	push	{r7, lr}
    613e:	b082      	sub	sp, #8
    6140:	af00      	add	r7, sp, #0
    6142:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6144:	2103      	movs	r1, #3
    6146:	6878      	ldr	r0, [r7, #4]
    6148:	4b02      	ldr	r3, [pc, #8]	; (6154 <_sercom_i2c_send_stop+0x18>)
    614a:	4798      	blx	r3
}
    614c:	bf00      	nop
    614e:	3708      	adds	r7, #8
    6150:	46bd      	mov	sp, r7
    6152:	bd80      	pop	{r7, pc}
    6154:	00005dc9 	.word	0x00005dc9

00006158 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6158:	b590      	push	{r4, r7, lr}
    615a:	b087      	sub	sp, #28
    615c:	af00      	add	r7, sp, #0
    615e:	60f8      	str	r0, [r7, #12]
    6160:	60b9      	str	r1, [r7, #8]
    6162:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6164:	68f8      	ldr	r0, [r7, #12]
    6166:	4b7d      	ldr	r3, [pc, #500]	; (635c <_sercom_i2c_sync_analyse_flags+0x204>)
    6168:	4798      	blx	r3
    616a:	4603      	mov	r3, r0
    616c:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    616e:	68f8      	ldr	r0, [r7, #12]
    6170:	4b7b      	ldr	r3, [pc, #492]	; (6360 <_sercom_i2c_sync_analyse_flags+0x208>)
    6172:	4798      	blx	r3
    6174:	4603      	mov	r3, r0
    6176:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6178:	68bb      	ldr	r3, [r7, #8]
    617a:	f003 0301 	and.w	r3, r3, #1
    617e:	2b00      	cmp	r3, #0
    6180:	f000 8095 	beq.w	62ae <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6184:	8a7b      	ldrh	r3, [r7, #18]
    6186:	f003 0302 	and.w	r3, r3, #2
    618a:	2b00      	cmp	r3, #0
    618c:	d01d      	beq.n	61ca <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    618e:	68f8      	ldr	r0, [r7, #12]
    6190:	4b74      	ldr	r3, [pc, #464]	; (6364 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6192:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6194:	687b      	ldr	r3, [r7, #4]
    6196:	885b      	ldrh	r3, [r3, #2]
    6198:	b29b      	uxth	r3, r3
    619a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    619e:	b29a      	uxth	r2, r3
    61a0:	687b      	ldr	r3, [r7, #4]
    61a2:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	885b      	ldrh	r3, [r3, #2]
    61a8:	b29b      	uxth	r3, r3
    61aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    61ae:	b29a      	uxth	r2, r3
    61b0:	687b      	ldr	r3, [r7, #4]
    61b2:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    61b4:	8a7b      	ldrh	r3, [r7, #18]
    61b6:	f003 0301 	and.w	r3, r3, #1
    61ba:	2b00      	cmp	r3, #0
    61bc:	d002      	beq.n	61c4 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    61be:	f06f 0304 	mvn.w	r3, #4
    61c2:	e0c6      	b.n	6352 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    61c4:	f06f 0303 	mvn.w	r3, #3
    61c8:	e0c3      	b.n	6352 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    61ca:	8a7b      	ldrh	r3, [r7, #18]
    61cc:	f003 0304 	and.w	r3, r3, #4
    61d0:	2b00      	cmp	r3, #0
    61d2:	d01f      	beq.n	6214 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    61d4:	687b      	ldr	r3, [r7, #4]
    61d6:	685b      	ldr	r3, [r3, #4]
    61d8:	2b00      	cmp	r3, #0
    61da:	dd07      	ble.n	61ec <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    61dc:	687b      	ldr	r3, [r7, #4]
    61de:	885b      	ldrh	r3, [r3, #2]
    61e0:	b29b      	uxth	r3, r3
    61e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    61e6:	b29a      	uxth	r2, r3
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    61ec:	687b      	ldr	r3, [r7, #4]
    61ee:	885b      	ldrh	r3, [r3, #2]
    61f0:	b29b      	uxth	r3, r3
    61f2:	b21b      	sxth	r3, r3
    61f4:	2b00      	cmp	r3, #0
    61f6:	da02      	bge.n	61fe <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    61f8:	68f8      	ldr	r0, [r7, #12]
    61fa:	4b5b      	ldr	r3, [pc, #364]	; (6368 <_sercom_i2c_sync_analyse_flags+0x210>)
    61fc:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	885b      	ldrh	r3, [r3, #2]
    6202:	b29b      	uxth	r3, r3
    6204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6208:	b29a      	uxth	r2, r3
    620a:	687b      	ldr	r3, [r7, #4]
    620c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    620e:	f06f 0301 	mvn.w	r3, #1
    6212:	e09e      	b.n	6352 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6214:	687b      	ldr	r3, [r7, #4]
    6216:	885b      	ldrh	r3, [r3, #2]
    6218:	b29b      	uxth	r3, r3
    621a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    621e:	2b00      	cmp	r3, #0
    6220:	d01c      	beq.n	625c <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6222:	687b      	ldr	r3, [r7, #4]
    6224:	881b      	ldrh	r3, [r3, #0]
    6226:	121b      	asrs	r3, r3, #8
    6228:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    622a:	f003 0406 	and.w	r4, r3, #6
    622e:	68f8      	ldr	r0, [r7, #12]
    6230:	4b4e      	ldr	r3, [pc, #312]	; (636c <_sercom_i2c_sync_analyse_flags+0x214>)
    6232:	4798      	blx	r3
    6234:	4603      	mov	r3, r0
    6236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    623a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    623c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6240:	4619      	mov	r1, r3
    6242:	68f8      	ldr	r0, [r7, #12]
    6244:	4b4a      	ldr	r3, [pc, #296]	; (6370 <_sercom_i2c_sync_analyse_flags+0x218>)
    6246:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	885b      	ldrh	r3, [r3, #2]
    624c:	b29b      	uxth	r3, r3
    624e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6252:	b29a      	uxth	r2, r3
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6258:	2300      	movs	r3, #0
    625a:	e07a      	b.n	6352 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    625c:	687b      	ldr	r3, [r7, #4]
    625e:	685b      	ldr	r3, [r3, #4]
    6260:	2b00      	cmp	r3, #0
    6262:	d111      	bne.n	6288 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6264:	687b      	ldr	r3, [r7, #4]
    6266:	885b      	ldrh	r3, [r3, #2]
    6268:	b29b      	uxth	r3, r3
    626a:	b21b      	sxth	r3, r3
    626c:	2b00      	cmp	r3, #0
    626e:	da02      	bge.n	6276 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6270:	68f8      	ldr	r0, [r7, #12]
    6272:	4b3d      	ldr	r3, [pc, #244]	; (6368 <_sercom_i2c_sync_analyse_flags+0x210>)
    6274:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6276:	687b      	ldr	r3, [r7, #4]
    6278:	885b      	ldrh	r3, [r3, #2]
    627a:	b29b      	uxth	r3, r3
    627c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6280:	b29a      	uxth	r2, r3
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	805a      	strh	r2, [r3, #2]
    6286:	e010      	b.n	62aa <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6288:	687b      	ldr	r3, [r7, #4]
    628a:	689b      	ldr	r3, [r3, #8]
    628c:	781b      	ldrb	r3, [r3, #0]
    628e:	4619      	mov	r1, r3
    6290:	68f8      	ldr	r0, [r7, #12]
    6292:	4b38      	ldr	r3, [pc, #224]	; (6374 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6294:	4798      	blx	r3
				msg->buffer++;
    6296:	687b      	ldr	r3, [r7, #4]
    6298:	689b      	ldr	r3, [r3, #8]
    629a:	1c5a      	adds	r2, r3, #1
    629c:	687b      	ldr	r3, [r7, #4]
    629e:	609a      	str	r2, [r3, #8]
				msg->len--;
    62a0:	687b      	ldr	r3, [r7, #4]
    62a2:	685b      	ldr	r3, [r3, #4]
    62a4:	1e5a      	subs	r2, r3, #1
    62a6:	687b      	ldr	r3, [r7, #4]
    62a8:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    62aa:	2300      	movs	r3, #0
    62ac:	e051      	b.n	6352 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    62ae:	68bb      	ldr	r3, [r7, #8]
    62b0:	f003 0302 	and.w	r3, r3, #2
    62b4:	2b00      	cmp	r3, #0
    62b6:	d04b      	beq.n	6350 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    62b8:	687b      	ldr	r3, [r7, #4]
    62ba:	685b      	ldr	r3, [r3, #4]
    62bc:	2b00      	cmp	r3, #0
    62be:	d041      	beq.n	6344 <_sercom_i2c_sync_analyse_flags+0x1ec>
    62c0:	8a7b      	ldrh	r3, [r7, #18]
    62c2:	f003 0304 	and.w	r3, r3, #4
    62c6:	2b00      	cmp	r3, #0
    62c8:	d13c      	bne.n	6344 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    62ca:	687b      	ldr	r3, [r7, #4]
    62cc:	685b      	ldr	r3, [r3, #4]
    62ce:	1e5a      	subs	r2, r3, #1
    62d0:	687b      	ldr	r3, [r7, #4]
    62d2:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    62d4:	687b      	ldr	r3, [r7, #4]
    62d6:	685b      	ldr	r3, [r3, #4]
    62d8:	2b00      	cmp	r3, #0
    62da:	d102      	bne.n	62e2 <_sercom_i2c_sync_analyse_flags+0x18a>
    62dc:	697b      	ldr	r3, [r7, #20]
    62de:	2b00      	cmp	r3, #0
    62e0:	d006      	beq.n	62f0 <_sercom_i2c_sync_analyse_flags+0x198>
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	685b      	ldr	r3, [r3, #4]
    62e6:	2b01      	cmp	r3, #1
    62e8:	d105      	bne.n	62f6 <_sercom_i2c_sync_analyse_flags+0x19e>
    62ea:	697b      	ldr	r3, [r7, #20]
    62ec:	2b00      	cmp	r3, #0
    62ee:	d002      	beq.n	62f6 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    62f0:	68f8      	ldr	r0, [r7, #12]
    62f2:	4b21      	ldr	r3, [pc, #132]	; (6378 <_sercom_i2c_sync_analyse_flags+0x220>)
    62f4:	4798      	blx	r3
			}

			if (msg->len == 0) {
    62f6:	687b      	ldr	r3, [r7, #4]
    62f8:	685b      	ldr	r3, [r3, #4]
    62fa:	2b00      	cmp	r3, #0
    62fc:	d113      	bne.n	6326 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    62fe:	687b      	ldr	r3, [r7, #4]
    6300:	885b      	ldrh	r3, [r3, #2]
    6302:	b29b      	uxth	r3, r3
    6304:	b21b      	sxth	r3, r3
    6306:	2b00      	cmp	r3, #0
    6308:	da05      	bge.n	6316 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    630a:	68f8      	ldr	r0, [r7, #12]
    630c:	4b1b      	ldr	r3, [pc, #108]	; (637c <_sercom_i2c_sync_analyse_flags+0x224>)
    630e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6310:	68f8      	ldr	r0, [r7, #12]
    6312:	4b15      	ldr	r3, [pc, #84]	; (6368 <_sercom_i2c_sync_analyse_flags+0x210>)
    6314:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6316:	687b      	ldr	r3, [r7, #4]
    6318:	885b      	ldrh	r3, [r3, #2]
    631a:	b29b      	uxth	r3, r3
    631c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6320:	b29a      	uxth	r2, r3
    6322:	687b      	ldr	r3, [r7, #4]
    6324:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6326:	687b      	ldr	r3, [r7, #4]
    6328:	689c      	ldr	r4, [r3, #8]
    632a:	1c62      	adds	r2, r4, #1
    632c:	687b      	ldr	r3, [r7, #4]
    632e:	609a      	str	r2, [r3, #8]
    6330:	68f8      	ldr	r0, [r7, #12]
    6332:	4b13      	ldr	r3, [pc, #76]	; (6380 <_sercom_i2c_sync_analyse_flags+0x228>)
    6334:	4798      	blx	r3
    6336:	4603      	mov	r3, r0
    6338:	b2db      	uxtb	r3, r3
    633a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    633c:	68f8      	ldr	r0, [r7, #12]
    633e:	4b11      	ldr	r3, [pc, #68]	; (6384 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6340:	4798      	blx	r3
    6342:	e005      	b.n	6350 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6344:	68f8      	ldr	r0, [r7, #12]
    6346:	4b0f      	ldr	r3, [pc, #60]	; (6384 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6348:	4798      	blx	r3
			return I2C_NACK;
    634a:	f06f 0301 	mvn.w	r3, #1
    634e:	e000      	b.n	6352 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6350:	2300      	movs	r3, #0
}
    6352:	4618      	mov	r0, r3
    6354:	371c      	adds	r7, #28
    6356:	46bd      	mov	sp, r7
    6358:	bd90      	pop	{r4, r7, pc}
    635a:	bf00      	nop
    635c:	00005bf1 	.word	0x00005bf1
    6360:	00006001 	.word	0x00006001
    6364:	00005ad5 	.word	0x00005ad5
    6368:	0000613d 	.word	0x0000613d
    636c:	00005ee1 	.word	0x00005ee1
    6370:	00005ebd 	.word	0x00005ebd
    6374:	00005f1d 	.word	0x00005f1d
    6378:	00005d79 	.word	0x00005d79
    637c:	00005d51 	.word	0x00005d51
    6380:	00005f41 	.word	0x00005f41
    6384:	00005aef 	.word	0x00005aef

00006388 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6388:	b580      	push	{r7, lr}
    638a:	b086      	sub	sp, #24
    638c:	af00      	add	r7, sp, #0
    638e:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6390:	687b      	ldr	r3, [r7, #4]
    6392:	691b      	ldr	r3, [r3, #16]
    6394:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6396:	6938      	ldr	r0, [r7, #16]
    6398:	4b37      	ldr	r3, [pc, #220]	; (6478 <_sercom_i2c_m_irq_handler+0xf0>)
    639a:	4798      	blx	r3
    639c:	4603      	mov	r3, r0
    639e:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    63a0:	2300      	movs	r3, #0
    63a2:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    63a4:	687b      	ldr	r3, [r7, #4]
    63a6:	2b00      	cmp	r3, #0
    63a8:	bf14      	ite	ne
    63aa:	2301      	movne	r3, #1
    63ac:	2300      	moveq	r3, #0
    63ae:	b2db      	uxtb	r3, r3
    63b0:	f240 421e 	movw	r2, #1054	; 0x41e
    63b4:	4931      	ldr	r1, [pc, #196]	; (647c <_sercom_i2c_m_irq_handler+0xf4>)
    63b6:	4618      	mov	r0, r3
    63b8:	4b31      	ldr	r3, [pc, #196]	; (6480 <_sercom_i2c_m_irq_handler+0xf8>)
    63ba:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    63bc:	687b      	ldr	r3, [r7, #4]
    63be:	691b      	ldr	r3, [r3, #16]
    63c0:	2b00      	cmp	r3, #0
    63c2:	bf14      	ite	ne
    63c4:	2301      	movne	r3, #1
    63c6:	2300      	moveq	r3, #0
    63c8:	b2db      	uxtb	r3, r3
    63ca:	f240 421f 	movw	r2, #1055	; 0x41f
    63ce:	492b      	ldr	r1, [pc, #172]	; (647c <_sercom_i2c_m_irq_handler+0xf4>)
    63d0:	4618      	mov	r0, r3
    63d2:	4b2b      	ldr	r3, [pc, #172]	; (6480 <_sercom_i2c_m_irq_handler+0xf8>)
    63d4:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    63d6:	bf00      	nop
    63d8:	68fb      	ldr	r3, [r7, #12]
    63da:	f003 0380 	and.w	r3, r3, #128	; 0x80
    63de:	2b00      	cmp	r3, #0
    63e0:	d126      	bne.n	6430 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	461a      	mov	r2, r3
    63e6:	68f9      	ldr	r1, [r7, #12]
    63e8:	6938      	ldr	r0, [r7, #16]
    63ea:	4b26      	ldr	r3, [pc, #152]	; (6484 <_sercom_i2c_m_irq_handler+0xfc>)
    63ec:	4798      	blx	r3
    63ee:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    63f0:	697b      	ldr	r3, [r7, #20]
    63f2:	2b00      	cmp	r3, #0
    63f4:	d11b      	bne.n	642e <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    63f6:	68fb      	ldr	r3, [r7, #12]
    63f8:	f003 0301 	and.w	r3, r3, #1
    63fc:	2b00      	cmp	r3, #0
    63fe:	d008      	beq.n	6412 <_sercom_i2c_m_irq_handler+0x8a>
    6400:	687b      	ldr	r3, [r7, #4]
    6402:	699b      	ldr	r3, [r3, #24]
    6404:	2b00      	cmp	r3, #0
    6406:	d004      	beq.n	6412 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6408:	687b      	ldr	r3, [r7, #4]
    640a:	699b      	ldr	r3, [r3, #24]
    640c:	6878      	ldr	r0, [r7, #4]
    640e:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6410:	e02e      	b.n	6470 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6412:	68fb      	ldr	r3, [r7, #12]
    6414:	f003 0302 	and.w	r3, r3, #2
    6418:	2b00      	cmp	r3, #0
    641a:	d029      	beq.n	6470 <_sercom_i2c_m_irq_handler+0xe8>
    641c:	687b      	ldr	r3, [r7, #4]
    641e:	69db      	ldr	r3, [r3, #28]
    6420:	2b00      	cmp	r3, #0
    6422:	d025      	beq.n	6470 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6424:	687b      	ldr	r3, [r7, #4]
    6426:	69db      	ldr	r3, [r3, #28]
    6428:	6878      	ldr	r0, [r7, #4]
    642a:	4798      	blx	r3
		return;
    642c:	e020      	b.n	6470 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    642e:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6430:	687b      	ldr	r3, [r7, #4]
    6432:	885b      	ldrh	r3, [r3, #2]
    6434:	b29b      	uxth	r3, r3
    6436:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    643a:	b29a      	uxth	r2, r3
    643c:	687b      	ldr	r3, [r7, #4]
    643e:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    6440:	687b      	ldr	r3, [r7, #4]
    6442:	695b      	ldr	r3, [r3, #20]
    6444:	2b00      	cmp	r3, #0
    6446:	d014      	beq.n	6472 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6448:	697b      	ldr	r3, [r7, #20]
    644a:	2b00      	cmp	r3, #0
    644c:	d005      	beq.n	645a <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    644e:	687b      	ldr	r3, [r7, #4]
    6450:	695b      	ldr	r3, [r3, #20]
    6452:	6979      	ldr	r1, [r7, #20]
    6454:	6878      	ldr	r0, [r7, #4]
    6456:	4798      	blx	r3
    6458:	e005      	b.n	6466 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    645a:	687b      	ldr	r3, [r7, #4]
    645c:	695b      	ldr	r3, [r3, #20]
    645e:	f06f 0104 	mvn.w	r1, #4
    6462:	6878      	ldr	r0, [r7, #4]
    6464:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6466:	2180      	movs	r1, #128	; 0x80
    6468:	6938      	ldr	r0, [r7, #16]
    646a:	4b07      	ldr	r3, [pc, #28]	; (6488 <_sercom_i2c_m_irq_handler+0x100>)
    646c:	4798      	blx	r3
    646e:	e000      	b.n	6472 <_sercom_i2c_m_irq_handler+0xea>
		return;
    6470:	bf00      	nop
	}
}
    6472:	3718      	adds	r7, #24
    6474:	46bd      	mov	sp, r7
    6476:	bd80      	pop	{r7, pc}
    6478:	00005b09 	.word	0x00005b09
    647c:	0000efc4 	.word	0x0000efc4
    6480:	0000349d 	.word	0x0000349d
    6484:	00006159 	.word	0x00006159
    6488:	00005b23 	.word	0x00005b23

0000648c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    648c:	b580      	push	{r7, lr}
    648e:	b082      	sub	sp, #8
    6490:	af00      	add	r7, sp, #0
    6492:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6494:	6878      	ldr	r0, [r7, #4]
    6496:	4b05      	ldr	r3, [pc, #20]	; (64ac <_sercom_get_irq_num+0x20>)
    6498:	4798      	blx	r3
    649a:	4603      	mov	r3, r0
    649c:	009b      	lsls	r3, r3, #2
    649e:	b2db      	uxtb	r3, r3
    64a0:	332e      	adds	r3, #46	; 0x2e
    64a2:	b2db      	uxtb	r3, r3
}
    64a4:	4618      	mov	r0, r3
    64a6:	3708      	adds	r7, #8
    64a8:	46bd      	mov	sp, r7
    64aa:	bd80      	pop	{r7, pc}
    64ac:	0000604d 	.word	0x0000604d

000064b0 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    64b0:	b580      	push	{r7, lr}
    64b2:	b086      	sub	sp, #24
    64b4:	af00      	add	r7, sp, #0
    64b6:	6078      	str	r0, [r7, #4]
    64b8:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    64ba:	687b      	ldr	r3, [r7, #4]
    64bc:	2b00      	cmp	r3, #0
    64be:	bf14      	ite	ne
    64c0:	2301      	movne	r3, #1
    64c2:	2300      	moveq	r3, #0
    64c4:	b2db      	uxtb	r3, r3
    64c6:	f240 4292 	movw	r2, #1170	; 0x492
    64ca:	491d      	ldr	r1, [pc, #116]	; (6540 <_i2c_m_async_init+0x90>)
    64cc:	4618      	mov	r0, r3
    64ce:	4b1d      	ldr	r3, [pc, #116]	; (6544 <_i2c_m_async_init+0x94>)
    64d0:	4798      	blx	r3

	i2c_dev->hw = hw;
    64d2:	687b      	ldr	r3, [r7, #4]
    64d4:	683a      	ldr	r2, [r7, #0]
    64d6:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    64d8:	687b      	ldr	r3, [r7, #4]
    64da:	6839      	ldr	r1, [r7, #0]
    64dc:	4618      	mov	r0, r3
    64de:	4b1a      	ldr	r3, [pc, #104]	; (6548 <_i2c_m_async_init+0x98>)
    64e0:	4798      	blx	r3
    64e2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    64e4:	68fb      	ldr	r3, [r7, #12]
    64e6:	2b00      	cmp	r3, #0
    64e8:	d001      	beq.n	64ee <_i2c_m_async_init+0x3e>
		return init_status;
    64ea:	68fb      	ldr	r3, [r7, #12]
    64ec:	e024      	b.n	6538 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    64ee:	6879      	ldr	r1, [r7, #4]
    64f0:	6838      	ldr	r0, [r7, #0]
    64f2:	4b16      	ldr	r3, [pc, #88]	; (654c <_i2c_m_async_init+0x9c>)
    64f4:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    64f6:	6838      	ldr	r0, [r7, #0]
    64f8:	4b15      	ldr	r3, [pc, #84]	; (6550 <_i2c_m_async_init+0xa0>)
    64fa:	4798      	blx	r3
    64fc:	4603      	mov	r3, r0
    64fe:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6500:	2300      	movs	r3, #0
    6502:	613b      	str	r3, [r7, #16]
    6504:	e014      	b.n	6530 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6506:	7dfb      	ldrb	r3, [r7, #23]
    6508:	b21b      	sxth	r3, r3
    650a:	4618      	mov	r0, r3
    650c:	4b11      	ldr	r3, [pc, #68]	; (6554 <_i2c_m_async_init+0xa4>)
    650e:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6510:	7dfb      	ldrb	r3, [r7, #23]
    6512:	b21b      	sxth	r3, r3
    6514:	4618      	mov	r0, r3
    6516:	4b10      	ldr	r3, [pc, #64]	; (6558 <_i2c_m_async_init+0xa8>)
    6518:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    651a:	7dfb      	ldrb	r3, [r7, #23]
    651c:	b21b      	sxth	r3, r3
    651e:	4618      	mov	r0, r3
    6520:	4b0e      	ldr	r3, [pc, #56]	; (655c <_i2c_m_async_init+0xac>)
    6522:	4798      	blx	r3
		irq++;
    6524:	7dfb      	ldrb	r3, [r7, #23]
    6526:	3301      	adds	r3, #1
    6528:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    652a:	693b      	ldr	r3, [r7, #16]
    652c:	3301      	adds	r3, #1
    652e:	613b      	str	r3, [r7, #16]
    6530:	693b      	ldr	r3, [r7, #16]
    6532:	2b03      	cmp	r3, #3
    6534:	d9e7      	bls.n	6506 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6536:	2300      	movs	r3, #0
}
    6538:	4618      	mov	r0, r3
    653a:	3718      	adds	r7, #24
    653c:	46bd      	mov	sp, r7
    653e:	bd80      	pop	{r7, pc}
    6540:	0000efc4 	.word	0x0000efc4
    6544:	0000349d 	.word	0x0000349d
    6548:	00006b35 	.word	0x00006b35
    654c:	000060a9 	.word	0x000060a9
    6550:	0000648d 	.word	0x0000648d
    6554:	000059bd 	.word	0x000059bd
    6558:	00005a01 	.word	0x00005a01
    655c:	00005981 	.word	0x00005981

00006560 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    6560:	b590      	push	{r4, r7, lr}
    6562:	b087      	sub	sp, #28
    6564:	af00      	add	r7, sp, #0
    6566:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6568:	687b      	ldr	r3, [r7, #4]
    656a:	691b      	ldr	r3, [r3, #16]
    656c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    656e:	687b      	ldr	r3, [r7, #4]
    6570:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6572:	6978      	ldr	r0, [r7, #20]
    6574:	4b33      	ldr	r3, [pc, #204]	; (6644 <_sercom_i2c_send_address+0xe4>)
    6576:	4798      	blx	r3
    6578:	4603      	mov	r3, r0
    657a:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    657c:	687b      	ldr	r3, [r7, #4]
    657e:	2b00      	cmp	r3, #0
    6580:	bf14      	ite	ne
    6582:	2301      	movne	r3, #1
    6584:	2300      	moveq	r3, #0
    6586:	b2db      	uxtb	r3, r3
    6588:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    658c:	492e      	ldr	r1, [pc, #184]	; (6648 <_sercom_i2c_send_address+0xe8>)
    658e:	4618      	mov	r0, r3
    6590:	4b2e      	ldr	r3, [pc, #184]	; (664c <_sercom_i2c_send_address+0xec>)
    6592:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6594:	693b      	ldr	r3, [r7, #16]
    6596:	685b      	ldr	r3, [r3, #4]
    6598:	2b01      	cmp	r3, #1
    659a:	d106      	bne.n	65aa <_sercom_i2c_send_address+0x4a>
    659c:	68fb      	ldr	r3, [r7, #12]
    659e:	2b00      	cmp	r3, #0
    65a0:	d003      	beq.n	65aa <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    65a2:	6978      	ldr	r0, [r7, #20]
    65a4:	4b2a      	ldr	r3, [pc, #168]	; (6650 <_sercom_i2c_send_address+0xf0>)
    65a6:	4798      	blx	r3
    65a8:	e002      	b.n	65b0 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    65aa:	6978      	ldr	r0, [r7, #20]
    65ac:	4b29      	ldr	r3, [pc, #164]	; (6654 <_sercom_i2c_send_address+0xf4>)
    65ae:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    65b0:	693b      	ldr	r3, [r7, #16]
    65b2:	881b      	ldrh	r3, [r3, #0]
    65b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    65b8:	2b00      	cmp	r3, #0
    65ba:	d022      	beq.n	6602 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    65bc:	693b      	ldr	r3, [r7, #16]
    65be:	885b      	ldrh	r3, [r3, #2]
    65c0:	b29b      	uxth	r3, r3
    65c2:	f003 0301 	and.w	r3, r3, #1
    65c6:	2b00      	cmp	r3, #0
    65c8:	d007      	beq.n	65da <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    65ca:	693b      	ldr	r3, [r7, #16]
    65cc:	885b      	ldrh	r3, [r3, #2]
    65ce:	b29b      	uxth	r3, r3
    65d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    65d4:	b29a      	uxth	r2, r3
    65d6:	693b      	ldr	r3, [r7, #16]
    65d8:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    65da:	693b      	ldr	r3, [r7, #16]
    65dc:	881b      	ldrh	r3, [r3, #0]
    65de:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    65e0:	f240 74fe 	movw	r4, #2046	; 0x7fe
    65e4:	401c      	ands	r4, r3
    65e6:	6978      	ldr	r0, [r7, #20]
    65e8:	4b1b      	ldr	r3, [pc, #108]	; (6658 <_sercom_i2c_send_address+0xf8>)
    65ea:	4798      	blx	r3
    65ec:	4603      	mov	r3, r0
    65ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    65f2:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    65f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    65f8:	4619      	mov	r1, r3
    65fa:	6978      	ldr	r0, [r7, #20]
    65fc:	4b17      	ldr	r3, [pc, #92]	; (665c <_sercom_i2c_send_address+0xfc>)
    65fe:	4798      	blx	r3
    6600:	e01a      	b.n	6638 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6602:	693b      	ldr	r3, [r7, #16]
    6604:	881b      	ldrh	r3, [r3, #0]
    6606:	005b      	lsls	r3, r3, #1
    6608:	b2db      	uxtb	r3, r3
    660a:	693a      	ldr	r2, [r7, #16]
    660c:	8852      	ldrh	r2, [r2, #2]
    660e:	b292      	uxth	r2, r2
    6610:	f002 0201 	and.w	r2, r2, #1
    6614:	2a00      	cmp	r2, #0
    6616:	bf14      	ite	ne
    6618:	2201      	movne	r2, #1
    661a:	2200      	moveq	r2, #0
    661c:	b2d2      	uxtb	r2, r2
    661e:	4313      	orrs	r3, r2
    6620:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6622:	6978      	ldr	r0, [r7, #20]
    6624:	4b0c      	ldr	r3, [pc, #48]	; (6658 <_sercom_i2c_send_address+0xf8>)
    6626:	4798      	blx	r3
    6628:	4603      	mov	r3, r0
    662a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    662e:	4323      	orrs	r3, r4
    6630:	4619      	mov	r1, r3
    6632:	6978      	ldr	r0, [r7, #20]
    6634:	4b09      	ldr	r3, [pc, #36]	; (665c <_sercom_i2c_send_address+0xfc>)
    6636:	4798      	blx	r3
	}

	return ERR_NONE;
    6638:	2300      	movs	r3, #0
}
    663a:	4618      	mov	r0, r3
    663c:	371c      	adds	r7, #28
    663e:	46bd      	mov	sp, r7
    6640:	bd90      	pop	{r4, r7, pc}
    6642:	bf00      	nop
    6644:	00005bf1 	.word	0x00005bf1
    6648:	0000efc4 	.word	0x0000efc4
    664c:	0000349d 	.word	0x0000349d
    6650:	00005d79 	.word	0x00005d79
    6654:	00005da1 	.word	0x00005da1
    6658:	00005ee1 	.word	0x00005ee1
    665c:	00005ebd 	.word	0x00005ebd

00006660 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    6660:	b580      	push	{r7, lr}
    6662:	b084      	sub	sp, #16
    6664:	af00      	add	r7, sp, #0
    6666:	6078      	str	r0, [r7, #4]
    6668:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    666a:	687b      	ldr	r3, [r7, #4]
    666c:	2b00      	cmp	r3, #0
    666e:	bf14      	ite	ne
    6670:	2301      	movne	r3, #1
    6672:	2300      	moveq	r3, #0
    6674:	b2db      	uxtb	r3, r3
    6676:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    667a:	492a      	ldr	r1, [pc, #168]	; (6724 <_i2c_m_async_transfer+0xc4>)
    667c:	4618      	mov	r0, r3
    667e:	4b2a      	ldr	r3, [pc, #168]	; (6728 <_i2c_m_async_transfer+0xc8>)
    6680:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6682:	687b      	ldr	r3, [r7, #4]
    6684:	691b      	ldr	r3, [r3, #16]
    6686:	2b00      	cmp	r3, #0
    6688:	bf14      	ite	ne
    668a:	2301      	movne	r3, #1
    668c:	2300      	moveq	r3, #0
    668e:	b2db      	uxtb	r3, r3
    6690:	f240 42e9 	movw	r2, #1257	; 0x4e9
    6694:	4923      	ldr	r1, [pc, #140]	; (6724 <_i2c_m_async_transfer+0xc4>)
    6696:	4618      	mov	r0, r3
    6698:	4b23      	ldr	r3, [pc, #140]	; (6728 <_i2c_m_async_transfer+0xc8>)
    669a:	4798      	blx	r3
	ASSERT(msg);
    669c:	683b      	ldr	r3, [r7, #0]
    669e:	2b00      	cmp	r3, #0
    66a0:	bf14      	ite	ne
    66a2:	2301      	movne	r3, #1
    66a4:	2300      	moveq	r3, #0
    66a6:	b2db      	uxtb	r3, r3
    66a8:	f240 42ea 	movw	r2, #1258	; 0x4ea
    66ac:	491d      	ldr	r1, [pc, #116]	; (6724 <_i2c_m_async_transfer+0xc4>)
    66ae:	4618      	mov	r0, r3
    66b0:	4b1d      	ldr	r3, [pc, #116]	; (6728 <_i2c_m_async_transfer+0xc8>)
    66b2:	4798      	blx	r3

	if (msg->len == 0) {
    66b4:	683b      	ldr	r3, [r7, #0]
    66b6:	685b      	ldr	r3, [r3, #4]
    66b8:	2b00      	cmp	r3, #0
    66ba:	d101      	bne.n	66c0 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    66bc:	2300      	movs	r3, #0
    66be:	e02d      	b.n	671c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    66c0:	687b      	ldr	r3, [r7, #4]
    66c2:	885b      	ldrh	r3, [r3, #2]
    66c4:	b29b      	uxth	r3, r3
    66c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    66ca:	2b00      	cmp	r3, #0
    66cc:	d002      	beq.n	66d4 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    66ce:	f06f 0303 	mvn.w	r3, #3
    66d2:	e023      	b.n	671c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    66d4:	683b      	ldr	r3, [r7, #0]
    66d6:	885b      	ldrh	r3, [r3, #2]
    66d8:	b29b      	uxth	r3, r3
    66da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    66de:	b29a      	uxth	r2, r3
    66e0:	683b      	ldr	r3, [r7, #0]
    66e2:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    66e4:	687b      	ldr	r3, [r7, #4]
    66e6:	683a      	ldr	r2, [r7, #0]
    66e8:	ca07      	ldmia	r2, {r0, r1, r2}
    66ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	691b      	ldr	r3, [r3, #16]
    66f2:	4618      	mov	r0, r3
    66f4:	4b0d      	ldr	r3, [pc, #52]	; (672c <_i2c_m_async_transfer+0xcc>)
    66f6:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    66f8:	6878      	ldr	r0, [r7, #4]
    66fa:	4b0d      	ldr	r3, [pc, #52]	; (6730 <_i2c_m_async_transfer+0xd0>)
    66fc:	4798      	blx	r3
    66fe:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6700:	68fb      	ldr	r3, [r7, #12]
    6702:	2b00      	cmp	r3, #0
    6704:	d009      	beq.n	671a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6706:	687b      	ldr	r3, [r7, #4]
    6708:	885b      	ldrh	r3, [r3, #2]
    670a:	b29b      	uxth	r3, r3
    670c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6710:	b29a      	uxth	r2, r3
    6712:	687b      	ldr	r3, [r7, #4]
    6714:	805a      	strh	r2, [r3, #2]

		return ret;
    6716:	68fb      	ldr	r3, [r7, #12]
    6718:	e000      	b.n	671c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    671a:	2300      	movs	r3, #0
}
    671c:	4618      	mov	r0, r3
    671e:	3710      	adds	r7, #16
    6720:	46bd      	mov	sp, r7
    6722:	bd80      	pop	{r7, pc}
    6724:	0000efc4 	.word	0x0000efc4
    6728:	0000349d 	.word	0x0000349d
    672c:	00005d29 	.word	0x00005d29
    6730:	00006561 	.word	0x00006561

00006734 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6734:	b480      	push	{r7}
    6736:	b085      	sub	sp, #20
    6738:	af00      	add	r7, sp, #0
    673a:	60f8      	str	r0, [r7, #12]
    673c:	460b      	mov	r3, r1
    673e:	607a      	str	r2, [r7, #4]
    6740:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6742:	7afb      	ldrb	r3, [r7, #11]
    6744:	2b01      	cmp	r3, #1
    6746:	d008      	beq.n	675a <_i2c_m_async_register_callback+0x26>
    6748:	2b02      	cmp	r3, #2
    674a:	d00a      	beq.n	6762 <_i2c_m_async_register_callback+0x2e>
    674c:	2b00      	cmp	r3, #0
    674e:	d000      	beq.n	6752 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    6750:	e00b      	b.n	676a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6752:	68fb      	ldr	r3, [r7, #12]
    6754:	687a      	ldr	r2, [r7, #4]
    6756:	615a      	str	r2, [r3, #20]
		break;
    6758:	e007      	b.n	676a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    675a:	68fb      	ldr	r3, [r7, #12]
    675c:	687a      	ldr	r2, [r7, #4]
    675e:	619a      	str	r2, [r3, #24]
		break;
    6760:	e003      	b.n	676a <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6762:	68fb      	ldr	r3, [r7, #12]
    6764:	687a      	ldr	r2, [r7, #4]
    6766:	61da      	str	r2, [r3, #28]
		break;
    6768:	bf00      	nop
	}

	return ERR_NONE;
    676a:	2300      	movs	r3, #0
}
    676c:	4618      	mov	r0, r3
    676e:	3714      	adds	r7, #20
    6770:	46bd      	mov	sp, r7
    6772:	f85d 7b04 	ldr.w	r7, [sp], #4
    6776:	4770      	bx	lr

00006778 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6778:	b580      	push	{r7, lr}
    677a:	b082      	sub	sp, #8
    677c:	af00      	add	r7, sp, #0
    677e:	6078      	str	r0, [r7, #4]
    6780:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6782:	687b      	ldr	r3, [r7, #4]
    6784:	2b00      	cmp	r3, #0
    6786:	bf14      	ite	ne
    6788:	2301      	movne	r3, #1
    678a:	2300      	moveq	r3, #0
    678c:	b2db      	uxtb	r3, r3
    678e:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    6792:	4908      	ldr	r1, [pc, #32]	; (67b4 <_i2c_m_sync_init+0x3c>)
    6794:	4618      	mov	r0, r3
    6796:	4b08      	ldr	r3, [pc, #32]	; (67b8 <_i2c_m_sync_init+0x40>)
    6798:	4798      	blx	r3

	i2c_dev->hw = hw;
    679a:	687b      	ldr	r3, [r7, #4]
    679c:	683a      	ldr	r2, [r7, #0]
    679e:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    67a0:	687b      	ldr	r3, [r7, #4]
    67a2:	6839      	ldr	r1, [r7, #0]
    67a4:	4618      	mov	r0, r3
    67a6:	4b05      	ldr	r3, [pc, #20]	; (67bc <_i2c_m_sync_init+0x44>)
    67a8:	4798      	blx	r3
    67aa:	4603      	mov	r3, r0
}
    67ac:	4618      	mov	r0, r3
    67ae:	3708      	adds	r7, #8
    67b0:	46bd      	mov	sp, r7
    67b2:	bd80      	pop	{r7, pc}
    67b4:	0000efc4 	.word	0x0000efc4
    67b8:	0000349d 	.word	0x0000349d
    67bc:	00006b35 	.word	0x00006b35

000067c0 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    67c0:	b580      	push	{r7, lr}
    67c2:	b082      	sub	sp, #8
    67c4:	af00      	add	r7, sp, #0
    67c6:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    67c8:	687b      	ldr	r3, [r7, #4]
    67ca:	2b00      	cmp	r3, #0
    67cc:	bf14      	ite	ne
    67ce:	2301      	movne	r3, #1
    67d0:	2300      	moveq	r3, #0
    67d2:	b2db      	uxtb	r3, r3
    67d4:	f240 5265 	movw	r2, #1381	; 0x565
    67d8:	4906      	ldr	r1, [pc, #24]	; (67f4 <_i2c_m_sync_enable+0x34>)
    67da:	4618      	mov	r0, r3
    67dc:	4b06      	ldr	r3, [pc, #24]	; (67f8 <_i2c_m_sync_enable+0x38>)
    67de:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    67e0:	687b      	ldr	r3, [r7, #4]
    67e2:	691b      	ldr	r3, [r3, #16]
    67e4:	4618      	mov	r0, r3
    67e6:	4b05      	ldr	r3, [pc, #20]	; (67fc <_i2c_m_sync_enable+0x3c>)
    67e8:	4798      	blx	r3
    67ea:	4603      	mov	r3, r0
}
    67ec:	4618      	mov	r0, r3
    67ee:	3708      	adds	r7, #8
    67f0:	46bd      	mov	sp, r7
    67f2:	bd80      	pop	{r7, pc}
    67f4:	0000efc4 	.word	0x0000efc4
    67f8:	0000349d 	.word	0x0000349d
    67fc:	00006aa9 	.word	0x00006aa9

00006800 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6800:	b580      	push	{r7, lr}
    6802:	b084      	sub	sp, #16
    6804:	af00      	add	r7, sp, #0
    6806:	6078      	str	r0, [r7, #4]
    6808:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    680a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    680e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6810:	687b      	ldr	r3, [r7, #4]
    6812:	691b      	ldr	r3, [r3, #16]
    6814:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6816:	68b8      	ldr	r0, [r7, #8]
    6818:	4b0f      	ldr	r3, [pc, #60]	; (6858 <_sercom_i2c_sync_wait_bus+0x58>)
    681a:	4798      	blx	r3
    681c:	4603      	mov	r3, r0
    681e:	461a      	mov	r2, r3
    6820:	683b      	ldr	r3, [r7, #0]
    6822:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6824:	68fb      	ldr	r3, [r7, #12]
    6826:	1e5a      	subs	r2, r3, #1
    6828:	60fa      	str	r2, [r7, #12]
    682a:	2b00      	cmp	r3, #0
    682c:	d102      	bne.n	6834 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    682e:	f06f 0304 	mvn.w	r3, #4
    6832:	e00c      	b.n	684e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6834:	683b      	ldr	r3, [r7, #0]
    6836:	681b      	ldr	r3, [r3, #0]
    6838:	f003 0301 	and.w	r3, r3, #1
    683c:	2b00      	cmp	r3, #0
    683e:	d105      	bne.n	684c <_sercom_i2c_sync_wait_bus+0x4c>
    6840:	683b      	ldr	r3, [r7, #0]
    6842:	681b      	ldr	r3, [r3, #0]
    6844:	f003 0302 	and.w	r3, r3, #2
    6848:	2b00      	cmp	r3, #0
    684a:	d0e4      	beq.n	6816 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    684c:	2300      	movs	r3, #0
}
    684e:	4618      	mov	r0, r3
    6850:	3710      	adds	r7, #16
    6852:	46bd      	mov	sp, r7
    6854:	bd80      	pop	{r7, pc}
    6856:	bf00      	nop
    6858:	00005b09 	.word	0x00005b09

0000685c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    685c:	b590      	push	{r4, r7, lr}
    685e:	b087      	sub	sp, #28
    6860:	af00      	add	r7, sp, #0
    6862:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6864:	687b      	ldr	r3, [r7, #4]
    6866:	691b      	ldr	r3, [r3, #16]
    6868:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    686a:	687b      	ldr	r3, [r7, #4]
    686c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    686e:	6978      	ldr	r0, [r7, #20]
    6870:	4b39      	ldr	r3, [pc, #228]	; (6958 <_sercom_i2c_sync_send_address+0xfc>)
    6872:	4798      	blx	r3
    6874:	4603      	mov	r3, r0
    6876:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6878:	687b      	ldr	r3, [r7, #4]
    687a:	2b00      	cmp	r3, #0
    687c:	bf14      	ite	ne
    687e:	2301      	movne	r3, #1
    6880:	2300      	moveq	r3, #0
    6882:	b2db      	uxtb	r3, r3
    6884:	f240 52d5 	movw	r2, #1493	; 0x5d5
    6888:	4934      	ldr	r1, [pc, #208]	; (695c <_sercom_i2c_sync_send_address+0x100>)
    688a:	4618      	mov	r0, r3
    688c:	4b34      	ldr	r3, [pc, #208]	; (6960 <_sercom_i2c_sync_send_address+0x104>)
    688e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6890:	693b      	ldr	r3, [r7, #16]
    6892:	685b      	ldr	r3, [r3, #4]
    6894:	2b01      	cmp	r3, #1
    6896:	d106      	bne.n	68a6 <_sercom_i2c_sync_send_address+0x4a>
    6898:	68fb      	ldr	r3, [r7, #12]
    689a:	2b00      	cmp	r3, #0
    689c:	d003      	beq.n	68a6 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    689e:	6978      	ldr	r0, [r7, #20]
    68a0:	4b30      	ldr	r3, [pc, #192]	; (6964 <_sercom_i2c_sync_send_address+0x108>)
    68a2:	4798      	blx	r3
    68a4:	e002      	b.n	68ac <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    68a6:	6978      	ldr	r0, [r7, #20]
    68a8:	4b2f      	ldr	r3, [pc, #188]	; (6968 <_sercom_i2c_sync_send_address+0x10c>)
    68aa:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    68ac:	693b      	ldr	r3, [r7, #16]
    68ae:	881b      	ldrh	r3, [r3, #0]
    68b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    68b4:	2b00      	cmp	r3, #0
    68b6:	d022      	beq.n	68fe <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    68b8:	693b      	ldr	r3, [r7, #16]
    68ba:	885b      	ldrh	r3, [r3, #2]
    68bc:	b29b      	uxth	r3, r3
    68be:	f003 0301 	and.w	r3, r3, #1
    68c2:	2b00      	cmp	r3, #0
    68c4:	d007      	beq.n	68d6 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    68c6:	693b      	ldr	r3, [r7, #16]
    68c8:	885b      	ldrh	r3, [r3, #2]
    68ca:	b29b      	uxth	r3, r3
    68cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    68d0:	b29a      	uxth	r2, r3
    68d2:	693b      	ldr	r3, [r7, #16]
    68d4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    68d6:	693b      	ldr	r3, [r7, #16]
    68d8:	881b      	ldrh	r3, [r3, #0]
    68da:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    68dc:	f240 74fe 	movw	r4, #2046	; 0x7fe
    68e0:	401c      	ands	r4, r3
    68e2:	6978      	ldr	r0, [r7, #20]
    68e4:	4b21      	ldr	r3, [pc, #132]	; (696c <_sercom_i2c_sync_send_address+0x110>)
    68e6:	4798      	blx	r3
    68e8:	4603      	mov	r3, r0
    68ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    68ee:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    68f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    68f4:	4619      	mov	r1, r3
    68f6:	6978      	ldr	r0, [r7, #20]
    68f8:	4b1d      	ldr	r3, [pc, #116]	; (6970 <_sercom_i2c_sync_send_address+0x114>)
    68fa:	4798      	blx	r3
    68fc:	e01a      	b.n	6934 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    68fe:	693b      	ldr	r3, [r7, #16]
    6900:	881b      	ldrh	r3, [r3, #0]
    6902:	005b      	lsls	r3, r3, #1
    6904:	b2db      	uxtb	r3, r3
    6906:	693a      	ldr	r2, [r7, #16]
    6908:	8852      	ldrh	r2, [r2, #2]
    690a:	b292      	uxth	r2, r2
    690c:	f002 0201 	and.w	r2, r2, #1
    6910:	2a00      	cmp	r2, #0
    6912:	bf14      	ite	ne
    6914:	2201      	movne	r2, #1
    6916:	2200      	moveq	r2, #0
    6918:	b2d2      	uxtb	r2, r2
    691a:	4313      	orrs	r3, r2
    691c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    691e:	6978      	ldr	r0, [r7, #20]
    6920:	4b12      	ldr	r3, [pc, #72]	; (696c <_sercom_i2c_sync_send_address+0x110>)
    6922:	4798      	blx	r3
    6924:	4603      	mov	r3, r0
    6926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    692a:	4323      	orrs	r3, r4
    692c:	4619      	mov	r1, r3
    692e:	6978      	ldr	r0, [r7, #20]
    6930:	4b0f      	ldr	r3, [pc, #60]	; (6970 <_sercom_i2c_sync_send_address+0x114>)
    6932:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6934:	f107 0308 	add.w	r3, r7, #8
    6938:	4619      	mov	r1, r3
    693a:	6878      	ldr	r0, [r7, #4]
    693c:	4b0d      	ldr	r3, [pc, #52]	; (6974 <_sercom_i2c_sync_send_address+0x118>)
    693e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6940:	68bb      	ldr	r3, [r7, #8]
    6942:	693a      	ldr	r2, [r7, #16]
    6944:	4619      	mov	r1, r3
    6946:	6978      	ldr	r0, [r7, #20]
    6948:	4b0b      	ldr	r3, [pc, #44]	; (6978 <_sercom_i2c_sync_send_address+0x11c>)
    694a:	4798      	blx	r3
    694c:	4603      	mov	r3, r0
}
    694e:	4618      	mov	r0, r3
    6950:	371c      	adds	r7, #28
    6952:	46bd      	mov	sp, r7
    6954:	bd90      	pop	{r4, r7, pc}
    6956:	bf00      	nop
    6958:	00005bf1 	.word	0x00005bf1
    695c:	0000efc4 	.word	0x0000efc4
    6960:	0000349d 	.word	0x0000349d
    6964:	00005d79 	.word	0x00005d79
    6968:	00005da1 	.word	0x00005da1
    696c:	00005ee1 	.word	0x00005ee1
    6970:	00005ebd 	.word	0x00005ebd
    6974:	00006801 	.word	0x00006801
    6978:	00006159 	.word	0x00006159

0000697c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    697c:	b580      	push	{r7, lr}
    697e:	b086      	sub	sp, #24
    6980:	af00      	add	r7, sp, #0
    6982:	6078      	str	r0, [r7, #4]
    6984:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    6986:	687b      	ldr	r3, [r7, #4]
    6988:	691b      	ldr	r3, [r3, #16]
    698a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    698c:	687b      	ldr	r3, [r7, #4]
    698e:	2b00      	cmp	r3, #0
    6990:	bf14      	ite	ne
    6992:	2301      	movne	r3, #1
    6994:	2300      	moveq	r3, #0
    6996:	b2db      	uxtb	r3, r3
    6998:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    699c:	493b      	ldr	r1, [pc, #236]	; (6a8c <_i2c_m_sync_transfer+0x110>)
    699e:	4618      	mov	r0, r3
    69a0:	4b3b      	ldr	r3, [pc, #236]	; (6a90 <_i2c_m_sync_transfer+0x114>)
    69a2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	691b      	ldr	r3, [r3, #16]
    69a8:	2b00      	cmp	r3, #0
    69aa:	bf14      	ite	ne
    69ac:	2301      	movne	r3, #1
    69ae:	2300      	moveq	r3, #0
    69b0:	b2db      	uxtb	r3, r3
    69b2:	f240 6201 	movw	r2, #1537	; 0x601
    69b6:	4935      	ldr	r1, [pc, #212]	; (6a8c <_i2c_m_sync_transfer+0x110>)
    69b8:	4618      	mov	r0, r3
    69ba:	4b35      	ldr	r3, [pc, #212]	; (6a90 <_i2c_m_sync_transfer+0x114>)
    69bc:	4798      	blx	r3
	ASSERT(msg);
    69be:	683b      	ldr	r3, [r7, #0]
    69c0:	2b00      	cmp	r3, #0
    69c2:	bf14      	ite	ne
    69c4:	2301      	movne	r3, #1
    69c6:	2300      	moveq	r3, #0
    69c8:	b2db      	uxtb	r3, r3
    69ca:	f240 6202 	movw	r2, #1538	; 0x602
    69ce:	492f      	ldr	r1, [pc, #188]	; (6a8c <_i2c_m_sync_transfer+0x110>)
    69d0:	4618      	mov	r0, r3
    69d2:	4b2f      	ldr	r3, [pc, #188]	; (6a90 <_i2c_m_sync_transfer+0x114>)
    69d4:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    69d6:	687b      	ldr	r3, [r7, #4]
    69d8:	885b      	ldrh	r3, [r3, #2]
    69da:	b29b      	uxth	r3, r3
    69dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    69e0:	2b00      	cmp	r3, #0
    69e2:	d002      	beq.n	69ea <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    69e4:	f06f 0305 	mvn.w	r3, #5
    69e8:	e04c      	b.n	6a84 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    69ea:	683b      	ldr	r3, [r7, #0]
    69ec:	885b      	ldrh	r3, [r3, #2]
    69ee:	b29b      	uxth	r3, r3
    69f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    69f4:	b29a      	uxth	r2, r3
    69f6:	683b      	ldr	r3, [r7, #0]
    69f8:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    69fa:	687b      	ldr	r3, [r7, #4]
    69fc:	683a      	ldr	r2, [r7, #0]
    69fe:	ca07      	ldmia	r2, {r0, r1, r2}
    6a00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6a04:	6938      	ldr	r0, [r7, #16]
    6a06:	4b23      	ldr	r3, [pc, #140]	; (6a94 <_i2c_m_sync_transfer+0x118>)
    6a08:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6a0a:	6878      	ldr	r0, [r7, #4]
    6a0c:	4b22      	ldr	r3, [pc, #136]	; (6a98 <_i2c_m_sync_transfer+0x11c>)
    6a0e:	4798      	blx	r3
    6a10:	6178      	str	r0, [r7, #20]

	if (ret) {
    6a12:	697b      	ldr	r3, [r7, #20]
    6a14:	2b00      	cmp	r3, #0
    6a16:	d02d      	beq.n	6a74 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6a18:	687b      	ldr	r3, [r7, #4]
    6a1a:	885b      	ldrh	r3, [r3, #2]
    6a1c:	b29b      	uxth	r3, r3
    6a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a22:	b29a      	uxth	r2, r3
    6a24:	687b      	ldr	r3, [r7, #4]
    6a26:	805a      	strh	r2, [r3, #2]

		return ret;
    6a28:	697b      	ldr	r3, [r7, #20]
    6a2a:	e02b      	b.n	6a84 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6a2c:	f107 030c 	add.w	r3, r7, #12
    6a30:	4619      	mov	r1, r3
    6a32:	6878      	ldr	r0, [r7, #4]
    6a34:	4b19      	ldr	r3, [pc, #100]	; (6a9c <_i2c_m_sync_transfer+0x120>)
    6a36:	4798      	blx	r3
    6a38:	6178      	str	r0, [r7, #20]

		if (ret) {
    6a3a:	697b      	ldr	r3, [r7, #20]
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d012      	beq.n	6a66 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6a40:	683b      	ldr	r3, [r7, #0]
    6a42:	885b      	ldrh	r3, [r3, #2]
    6a44:	b29b      	uxth	r3, r3
    6a46:	b21b      	sxth	r3, r3
    6a48:	2b00      	cmp	r3, #0
    6a4a:	da02      	bge.n	6a52 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6a4c:	6938      	ldr	r0, [r7, #16]
    6a4e:	4b14      	ldr	r3, [pc, #80]	; (6aa0 <_i2c_m_sync_transfer+0x124>)
    6a50:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6a52:	687b      	ldr	r3, [r7, #4]
    6a54:	885b      	ldrh	r3, [r3, #2]
    6a56:	b29b      	uxth	r3, r3
    6a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a5c:	b29a      	uxth	r2, r3
    6a5e:	687b      	ldr	r3, [r7, #4]
    6a60:	805a      	strh	r2, [r3, #2]

			return ret;
    6a62:	697b      	ldr	r3, [r7, #20]
    6a64:	e00e      	b.n	6a84 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6a66:	68fb      	ldr	r3, [r7, #12]
    6a68:	687a      	ldr	r2, [r7, #4]
    6a6a:	4619      	mov	r1, r3
    6a6c:	6938      	ldr	r0, [r7, #16]
    6a6e:	4b0d      	ldr	r3, [pc, #52]	; (6aa4 <_i2c_m_sync_transfer+0x128>)
    6a70:	4798      	blx	r3
    6a72:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6a74:	687b      	ldr	r3, [r7, #4]
    6a76:	885b      	ldrh	r3, [r3, #2]
    6a78:	b29b      	uxth	r3, r3
    6a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6a7e:	2b00      	cmp	r3, #0
    6a80:	d1d4      	bne.n	6a2c <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6a82:	697b      	ldr	r3, [r7, #20]
}
    6a84:	4618      	mov	r0, r3
    6a86:	3718      	adds	r7, #24
    6a88:	46bd      	mov	sp, r7
    6a8a:	bd80      	pop	{r7, pc}
    6a8c:	0000efc4 	.word	0x0000efc4
    6a90:	0000349d 	.word	0x0000349d
    6a94:	00005d29 	.word	0x00005d29
    6a98:	0000685d 	.word	0x0000685d
    6a9c:	00006801 	.word	0x00006801
    6aa0:	0000613d 	.word	0x0000613d
    6aa4:	00006159 	.word	0x00006159

00006aa8 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    6aa8:	b580      	push	{r7, lr}
    6aaa:	b084      	sub	sp, #16
    6aac:	af00      	add	r7, sp, #0
    6aae:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    6ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6ab4:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    6ab6:	2304      	movs	r3, #4
    6ab8:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    6aba:	687b      	ldr	r3, [r7, #4]
    6abc:	2b00      	cmp	r3, #0
    6abe:	bf14      	ite	ne
    6ac0:	2301      	movne	r3, #1
    6ac2:	2300      	moveq	r3, #0
    6ac4:	b2db      	uxtb	r3, r3
    6ac6:	f240 6235 	movw	r2, #1589	; 0x635
    6aca:	4915      	ldr	r1, [pc, #84]	; (6b20 <_i2c_m_enable_implementation+0x78>)
    6acc:	4618      	mov	r0, r3
    6ace:	4b15      	ldr	r3, [pc, #84]	; (6b24 <_i2c_m_enable_implementation+0x7c>)
    6ad0:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    6ad2:	6878      	ldr	r0, [r7, #4]
    6ad4:	4b14      	ldr	r3, [pc, #80]	; (6b28 <_i2c_m_enable_implementation+0x80>)
    6ad6:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6ad8:	e016      	b.n	6b08 <_i2c_m_enable_implementation+0x60>
		timeout--;
    6ada:	68fb      	ldr	r3, [r7, #12]
    6adc:	3b01      	subs	r3, #1
    6ade:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    6ae0:	68fb      	ldr	r3, [r7, #12]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	dc10      	bgt.n	6b08 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6ae6:	68bb      	ldr	r3, [r7, #8]
    6ae8:	3b01      	subs	r3, #1
    6aea:	60bb      	str	r3, [r7, #8]
    6aec:	68bb      	ldr	r3, [r7, #8]
    6aee:	2b00      	cmp	r3, #0
    6af0:	d007      	beq.n	6b02 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    6af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6af6:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6af8:	2110      	movs	r1, #16
    6afa:	6878      	ldr	r0, [r7, #4]
    6afc:	4b0b      	ldr	r3, [pc, #44]	; (6b2c <_i2c_m_enable_implementation+0x84>)
    6afe:	4798      	blx	r3
    6b00:	e002      	b.n	6b08 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    6b02:	f06f 0305 	mvn.w	r3, #5
    6b06:	e006      	b.n	6b16 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6b08:	6878      	ldr	r0, [r7, #4]
    6b0a:	4b09      	ldr	r3, [pc, #36]	; (6b30 <_i2c_m_enable_implementation+0x88>)
    6b0c:	4798      	blx	r3
    6b0e:	4603      	mov	r3, r0
    6b10:	2b01      	cmp	r3, #1
    6b12:	d1e2      	bne.n	6ada <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6b14:	2300      	movs	r3, #0
}
    6b16:	4618      	mov	r0, r3
    6b18:	3710      	adds	r7, #16
    6b1a:	46bd      	mov	sp, r7
    6b1c:	bd80      	pop	{r7, pc}
    6b1e:	bf00      	nop
    6b20:	0000efc4 	.word	0x0000efc4
    6b24:	0000349d 	.word	0x0000349d
    6b28:	00005ba1 	.word	0x00005ba1
    6b2c:	00006025 	.word	0x00006025
    6b30:	00005fd5 	.word	0x00005fd5

00006b34 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6b34:	b580      	push	{r7, lr}
    6b36:	b084      	sub	sp, #16
    6b38:	af00      	add	r7, sp, #0
    6b3a:	6078      	str	r0, [r7, #4]
    6b3c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6b3e:	6838      	ldr	r0, [r7, #0]
    6b40:	4b42      	ldr	r3, [pc, #264]	; (6c4c <_i2c_m_sync_init_impl+0x118>)
    6b42:	4798      	blx	r3
    6b44:	4603      	mov	r3, r0
    6b46:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6b48:	2101      	movs	r1, #1
    6b4a:	6838      	ldr	r0, [r7, #0]
    6b4c:	4b40      	ldr	r3, [pc, #256]	; (6c50 <_i2c_m_sync_init_impl+0x11c>)
    6b4e:	4798      	blx	r3
    6b50:	4603      	mov	r3, r0
    6b52:	f083 0301 	eor.w	r3, r3, #1
    6b56:	b2db      	uxtb	r3, r3
    6b58:	2b00      	cmp	r3, #0
    6b5a:	d020      	beq.n	6b9e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6b5c:	7bfa      	ldrb	r2, [r7, #15]
    6b5e:	493d      	ldr	r1, [pc, #244]	; (6c54 <_i2c_m_sync_init_impl+0x120>)
    6b60:	4613      	mov	r3, r2
    6b62:	005b      	lsls	r3, r3, #1
    6b64:	4413      	add	r3, r2
    6b66:	00db      	lsls	r3, r3, #3
    6b68:	440b      	add	r3, r1
    6b6a:	3304      	adds	r3, #4
    6b6c:	681b      	ldr	r3, [r3, #0]
    6b6e:	f003 031c 	and.w	r3, r3, #28
    6b72:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6b74:	2102      	movs	r1, #2
    6b76:	6838      	ldr	r0, [r7, #0]
    6b78:	4b37      	ldr	r3, [pc, #220]	; (6c58 <_i2c_m_sync_init_impl+0x124>)
    6b7a:	4798      	blx	r3
    6b7c:	4603      	mov	r3, r0
    6b7e:	2b00      	cmp	r3, #0
    6b80:	d006      	beq.n	6b90 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6b82:	6838      	ldr	r0, [r7, #0]
    6b84:	4b35      	ldr	r3, [pc, #212]	; (6c5c <_i2c_m_sync_init_impl+0x128>)
    6b86:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6b88:	2102      	movs	r1, #2
    6b8a:	6838      	ldr	r0, [r7, #0]
    6b8c:	4b34      	ldr	r3, [pc, #208]	; (6c60 <_i2c_m_sync_init_impl+0x12c>)
    6b8e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6b90:	68bb      	ldr	r3, [r7, #8]
    6b92:	f043 0301 	orr.w	r3, r3, #1
    6b96:	4619      	mov	r1, r3
    6b98:	6838      	ldr	r0, [r7, #0]
    6b9a:	4b32      	ldr	r3, [pc, #200]	; (6c64 <_i2c_m_sync_init_impl+0x130>)
    6b9c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6b9e:	2101      	movs	r1, #1
    6ba0:	6838      	ldr	r0, [r7, #0]
    6ba2:	4b2f      	ldr	r3, [pc, #188]	; (6c60 <_i2c_m_sync_init_impl+0x12c>)
    6ba4:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6ba6:	7bfa      	ldrb	r2, [r7, #15]
    6ba8:	492a      	ldr	r1, [pc, #168]	; (6c54 <_i2c_m_sync_init_impl+0x120>)
    6baa:	4613      	mov	r3, r2
    6bac:	005b      	lsls	r3, r3, #1
    6bae:	4413      	add	r3, r2
    6bb0:	00db      	lsls	r3, r3, #3
    6bb2:	440b      	add	r3, r1
    6bb4:	3304      	adds	r3, #4
    6bb6:	681b      	ldr	r3, [r3, #0]
    6bb8:	4619      	mov	r1, r3
    6bba:	6838      	ldr	r0, [r7, #0]
    6bbc:	4b29      	ldr	r3, [pc, #164]	; (6c64 <_i2c_m_sync_init_impl+0x130>)
    6bbe:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6bc0:	7bfa      	ldrb	r2, [r7, #15]
    6bc2:	4924      	ldr	r1, [pc, #144]	; (6c54 <_i2c_m_sync_init_impl+0x120>)
    6bc4:	4613      	mov	r3, r2
    6bc6:	005b      	lsls	r3, r3, #1
    6bc8:	4413      	add	r3, r2
    6bca:	00db      	lsls	r3, r3, #3
    6bcc:	440b      	add	r3, r1
    6bce:	3308      	adds	r3, #8
    6bd0:	681b      	ldr	r3, [r3, #0]
    6bd2:	4619      	mov	r1, r3
    6bd4:	6838      	ldr	r0, [r7, #0]
    6bd6:	4b24      	ldr	r3, [pc, #144]	; (6c68 <_i2c_m_sync_init_impl+0x134>)
    6bd8:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6bda:	7bfa      	ldrb	r2, [r7, #15]
    6bdc:	491d      	ldr	r1, [pc, #116]	; (6c54 <_i2c_m_sync_init_impl+0x120>)
    6bde:	4613      	mov	r3, r2
    6be0:	005b      	lsls	r3, r3, #1
    6be2:	4413      	add	r3, r2
    6be4:	00db      	lsls	r3, r3, #3
    6be6:	440b      	add	r3, r1
    6be8:	330c      	adds	r3, #12
    6bea:	681b      	ldr	r3, [r3, #0]
    6bec:	4619      	mov	r1, r3
    6bee:	6838      	ldr	r0, [r7, #0]
    6bf0:	4b1e      	ldr	r3, [pc, #120]	; (6c6c <_i2c_m_sync_init_impl+0x138>)
    6bf2:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6bf4:	7bfa      	ldrb	r2, [r7, #15]
    6bf6:	4917      	ldr	r1, [pc, #92]	; (6c54 <_i2c_m_sync_init_impl+0x120>)
    6bf8:	4613      	mov	r3, r2
    6bfa:	005b      	lsls	r3, r3, #1
    6bfc:	4413      	add	r3, r2
    6bfe:	00db      	lsls	r3, r3, #3
    6c00:	440b      	add	r3, r1
    6c02:	3304      	adds	r3, #4
    6c04:	681b      	ldr	r3, [r3, #0]
    6c06:	0e1b      	lsrs	r3, r3, #24
    6c08:	b29b      	uxth	r3, r3
    6c0a:	f003 0303 	and.w	r3, r3, #3
    6c0e:	b29a      	uxth	r2, r3
    6c10:	687b      	ldr	r3, [r7, #4]
    6c12:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6c14:	687b      	ldr	r3, [r7, #4]
    6c16:	899b      	ldrh	r3, [r3, #12]
    6c18:	2b01      	cmp	r3, #1
    6c1a:	bf8c      	ite	hi
    6c1c:	2301      	movhi	r3, #1
    6c1e:	2300      	movls	r3, #0
    6c20:	b2db      	uxtb	r3, r3
    6c22:	4619      	mov	r1, r3
    6c24:	6838      	ldr	r0, [r7, #0]
    6c26:	4b12      	ldr	r3, [pc, #72]	; (6c70 <_i2c_m_sync_init_impl+0x13c>)
    6c28:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6c2a:	7bfa      	ldrb	r2, [r7, #15]
    6c2c:	4909      	ldr	r1, [pc, #36]	; (6c54 <_i2c_m_sync_init_impl+0x120>)
    6c2e:	4613      	mov	r3, r2
    6c30:	005b      	lsls	r3, r3, #1
    6c32:	4413      	add	r3, r2
    6c34:	00db      	lsls	r3, r3, #3
    6c36:	440b      	add	r3, r1
    6c38:	3312      	adds	r3, #18
    6c3a:	881a      	ldrh	r2, [r3, #0]
    6c3c:	687b      	ldr	r3, [r7, #4]
    6c3e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6c40:	2300      	movs	r3, #0
}
    6c42:	4618      	mov	r0, r3
    6c44:	3710      	adds	r7, #16
    6c46:	46bd      	mov	sp, r7
    6c48:	bd80      	pop	{r7, pc}
    6c4a:	bf00      	nop
    6c4c:	000060d5 	.word	0x000060d5
    6c50:	00005a61 	.word	0x00005a61
    6c54:	20000018 	.word	0x20000018
    6c58:	00005c21 	.word	0x00005c21
    6c5c:	00005bc9 	.word	0x00005bc9
    6c60:	00005a3d 	.word	0x00005a3d
    6c64:	00005c51 	.word	0x00005c51
    6c68:	00005df9 	.word	0x00005df9
    6c6c:	00005e41 	.word	0x00005e41
    6c70:	00005e7d 	.word	0x00005e7d

00006c74 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6c74:	b580      	push	{r7, lr}
    6c76:	b082      	sub	sp, #8
    6c78:	af00      	add	r7, sp, #0
    6c7a:	6078      	str	r0, [r7, #4]
    6c7c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6c7e:	687b      	ldr	r3, [r7, #4]
    6c80:	2b00      	cmp	r3, #0
    6c82:	d004      	beq.n	6c8e <_spi_load_regs_master+0x1a>
    6c84:	683b      	ldr	r3, [r7, #0]
    6c86:	2b00      	cmp	r3, #0
    6c88:	d001      	beq.n	6c8e <_spi_load_regs_master+0x1a>
    6c8a:	2301      	movs	r3, #1
    6c8c:	e000      	b.n	6c90 <_spi_load_regs_master+0x1c>
    6c8e:	2300      	movs	r3, #0
    6c90:	f003 0301 	and.w	r3, r3, #1
    6c94:	b2db      	uxtb	r3, r3
    6c96:	f640 1239 	movw	r2, #2361	; 0x939
    6c9a:	4915      	ldr	r1, [pc, #84]	; (6cf0 <_spi_load_regs_master+0x7c>)
    6c9c:	4618      	mov	r0, r3
    6c9e:	4b15      	ldr	r3, [pc, #84]	; (6cf4 <_spi_load_regs_master+0x80>)
    6ca0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6ca2:	683b      	ldr	r3, [r7, #0]
    6ca4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6ca6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6caa:	f023 0301 	bic.w	r3, r3, #1
    6cae:	4619      	mov	r1, r3
    6cb0:	6878      	ldr	r0, [r7, #4]
    6cb2:	4b11      	ldr	r3, [pc, #68]	; (6cf8 <_spi_load_regs_master+0x84>)
    6cb4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6cb6:	683b      	ldr	r3, [r7, #0]
    6cb8:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6cba:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6cbe:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6cc6:	4619      	mov	r1, r3
    6cc8:	6878      	ldr	r0, [r7, #4]
    6cca:	4b0c      	ldr	r3, [pc, #48]	; (6cfc <_spi_load_regs_master+0x88>)
    6ccc:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6cce:	683b      	ldr	r3, [r7, #0]
    6cd0:	7b1b      	ldrb	r3, [r3, #12]
    6cd2:	4619      	mov	r1, r3
    6cd4:	6878      	ldr	r0, [r7, #4]
    6cd6:	4b0a      	ldr	r3, [pc, #40]	; (6d00 <_spi_load_regs_master+0x8c>)
    6cd8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6cda:	683b      	ldr	r3, [r7, #0]
    6cdc:	7b5b      	ldrb	r3, [r3, #13]
    6cde:	4619      	mov	r1, r3
    6ce0:	6878      	ldr	r0, [r7, #4]
    6ce2:	4b08      	ldr	r3, [pc, #32]	; (6d04 <_spi_load_regs_master+0x90>)
    6ce4:	4798      	blx	r3
}
    6ce6:	bf00      	nop
    6ce8:	3708      	adds	r7, #8
    6cea:	46bd      	mov	sp, r7
    6cec:	bd80      	pop	{r7, pc}
    6cee:	bf00      	nop
    6cf0:	0000efc4 	.word	0x0000efc4
    6cf4:	0000349d 	.word	0x0000349d
    6cf8:	00005d05 	.word	0x00005d05
    6cfc:	00005e1d 	.word	0x00005e1d
    6d00:	00005e5d 	.word	0x00005e5d
    6d04:	00005f95 	.word	0x00005f95

00006d08 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6d08:	b580      	push	{r7, lr}
    6d0a:	b082      	sub	sp, #8
    6d0c:	af00      	add	r7, sp, #0
    6d0e:	6078      	str	r0, [r7, #4]
    6d10:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6d12:	687b      	ldr	r3, [r7, #4]
    6d14:	2b00      	cmp	r3, #0
    6d16:	d004      	beq.n	6d22 <_spi_load_regs_slave+0x1a>
    6d18:	683b      	ldr	r3, [r7, #0]
    6d1a:	2b00      	cmp	r3, #0
    6d1c:	d001      	beq.n	6d22 <_spi_load_regs_slave+0x1a>
    6d1e:	2301      	movs	r3, #1
    6d20:	e000      	b.n	6d24 <_spi_load_regs_slave+0x1c>
    6d22:	2300      	movs	r3, #0
    6d24:	f003 0301 	and.w	r3, r3, #1
    6d28:	b2db      	uxtb	r3, r3
    6d2a:	f640 124d 	movw	r2, #2381	; 0x94d
    6d2e:	491a      	ldr	r1, [pc, #104]	; (6d98 <_spi_load_regs_slave+0x90>)
    6d30:	4618      	mov	r0, r3
    6d32:	4b1a      	ldr	r3, [pc, #104]	; (6d9c <_spi_load_regs_slave+0x94>)
    6d34:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6d36:	683b      	ldr	r3, [r7, #0]
    6d38:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6d3a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6d3e:	f023 0301 	bic.w	r3, r3, #1
    6d42:	4619      	mov	r1, r3
    6d44:	6878      	ldr	r0, [r7, #4]
    6d46:	4b16      	ldr	r3, [pc, #88]	; (6da0 <_spi_load_regs_slave+0x98>)
    6d48:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6d4a:	683b      	ldr	r3, [r7, #0]
    6d4c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6d4e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6d52:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6d5a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6d5e:	4619      	mov	r1, r3
    6d60:	6878      	ldr	r0, [r7, #4]
    6d62:	4b10      	ldr	r3, [pc, #64]	; (6da4 <_spi_load_regs_slave+0x9c>)
    6d64:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6d66:	683b      	ldr	r3, [r7, #0]
    6d68:	689b      	ldr	r3, [r3, #8]
    6d6a:	4619      	mov	r1, r3
    6d6c:	6878      	ldr	r0, [r7, #4]
    6d6e:	4b0e      	ldr	r3, [pc, #56]	; (6da8 <_spi_load_regs_slave+0xa0>)
    6d70:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d72:	683b      	ldr	r3, [r7, #0]
    6d74:	7b5b      	ldrb	r3, [r3, #13]
    6d76:	4619      	mov	r1, r3
    6d78:	6878      	ldr	r0, [r7, #4]
    6d7a:	4b0c      	ldr	r3, [pc, #48]	; (6dac <_spi_load_regs_slave+0xa4>)
    6d7c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6d7e:	bf00      	nop
    6d80:	f04f 31ff 	mov.w	r1, #4294967295
    6d84:	6878      	ldr	r0, [r7, #4]
    6d86:	4b0a      	ldr	r3, [pc, #40]	; (6db0 <_spi_load_regs_slave+0xa8>)
    6d88:	4798      	blx	r3
    6d8a:	4603      	mov	r3, r0
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d1f7      	bne.n	6d80 <_spi_load_regs_slave+0x78>
		;
}
    6d90:	bf00      	nop
    6d92:	3708      	adds	r7, #8
    6d94:	46bd      	mov	sp, r7
    6d96:	bd80      	pop	{r7, pc}
    6d98:	0000efc4 	.word	0x0000efc4
    6d9c:	0000349d 	.word	0x0000349d
    6da0:	00005d05 	.word	0x00005d05
    6da4:	00005e1d 	.word	0x00005e1d
    6da8:	00005f01 	.word	0x00005f01
    6dac:	00005f95 	.word	0x00005f95
    6db0:	00005aad 	.word	0x00005aad

00006db4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6db4:	b580      	push	{r7, lr}
    6db6:	b084      	sub	sp, #16
    6db8:	af00      	add	r7, sp, #0
    6dba:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6dbc:	687b      	ldr	r3, [r7, #4]
    6dbe:	4618      	mov	r0, r3
    6dc0:	4b11      	ldr	r3, [pc, #68]	; (6e08 <_spi_get_regs+0x54>)
    6dc2:	4798      	blx	r3
    6dc4:	4603      	mov	r3, r0
    6dc6:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6dc8:	2300      	movs	r3, #0
    6dca:	73fb      	strb	r3, [r7, #15]
    6dcc:	e014      	b.n	6df8 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6dce:	7bfa      	ldrb	r2, [r7, #15]
    6dd0:	490e      	ldr	r1, [pc, #56]	; (6e0c <_spi_get_regs+0x58>)
    6dd2:	4613      	mov	r3, r2
    6dd4:	011b      	lsls	r3, r3, #4
    6dd6:	4413      	add	r3, r2
    6dd8:	440b      	add	r3, r1
    6dda:	3310      	adds	r3, #16
    6ddc:	781b      	ldrb	r3, [r3, #0]
    6dde:	7bba      	ldrb	r2, [r7, #14]
    6de0:	429a      	cmp	r2, r3
    6de2:	d106      	bne.n	6df2 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6de4:	7bfa      	ldrb	r2, [r7, #15]
    6de6:	4613      	mov	r3, r2
    6de8:	011b      	lsls	r3, r3, #4
    6dea:	4413      	add	r3, r2
    6dec:	4a07      	ldr	r2, [pc, #28]	; (6e0c <_spi_get_regs+0x58>)
    6dee:	4413      	add	r3, r2
    6df0:	e006      	b.n	6e00 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6df2:	7bfb      	ldrb	r3, [r7, #15]
    6df4:	3301      	adds	r3, #1
    6df6:	73fb      	strb	r3, [r7, #15]
    6df8:	7bfb      	ldrb	r3, [r7, #15]
    6dfa:	2b01      	cmp	r3, #1
    6dfc:	d9e7      	bls.n	6dce <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6dfe:	2300      	movs	r3, #0
}
    6e00:	4618      	mov	r0, r3
    6e02:	3710      	adds	r7, #16
    6e04:	46bd      	mov	sp, r7
    6e06:	bd80      	pop	{r7, pc}
    6e08:	0000604d 	.word	0x0000604d
    6e0c:	0000f000 	.word	0x0000f000

00006e10 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    6e10:	b580      	push	{r7, lr}
    6e12:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6e14:	4b03      	ldr	r3, [pc, #12]	; (6e24 <SERCOM7_0_Handler+0x14>)
    6e16:	681b      	ldr	r3, [r3, #0]
    6e18:	4618      	mov	r0, r3
    6e1a:	4b03      	ldr	r3, [pc, #12]	; (6e28 <SERCOM7_0_Handler+0x18>)
    6e1c:	4798      	blx	r3
}
    6e1e:	bf00      	nop
    6e20:	bd80      	pop	{r7, pc}
    6e22:	bf00      	nop
    6e24:	2000081c 	.word	0x2000081c
    6e28:	00006389 	.word	0x00006389

00006e2c <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    6e2c:	b580      	push	{r7, lr}
    6e2e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6e30:	4b03      	ldr	r3, [pc, #12]	; (6e40 <SERCOM7_1_Handler+0x14>)
    6e32:	681b      	ldr	r3, [r3, #0]
    6e34:	4618      	mov	r0, r3
    6e36:	4b03      	ldr	r3, [pc, #12]	; (6e44 <SERCOM7_1_Handler+0x18>)
    6e38:	4798      	blx	r3
}
    6e3a:	bf00      	nop
    6e3c:	bd80      	pop	{r7, pc}
    6e3e:	bf00      	nop
    6e40:	2000081c 	.word	0x2000081c
    6e44:	00006389 	.word	0x00006389

00006e48 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    6e48:	b580      	push	{r7, lr}
    6e4a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6e4c:	4b03      	ldr	r3, [pc, #12]	; (6e5c <SERCOM7_2_Handler+0x14>)
    6e4e:	681b      	ldr	r3, [r3, #0]
    6e50:	4618      	mov	r0, r3
    6e52:	4b03      	ldr	r3, [pc, #12]	; (6e60 <SERCOM7_2_Handler+0x18>)
    6e54:	4798      	blx	r3
}
    6e56:	bf00      	nop
    6e58:	bd80      	pop	{r7, pc}
    6e5a:	bf00      	nop
    6e5c:	2000081c 	.word	0x2000081c
    6e60:	00006389 	.word	0x00006389

00006e64 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    6e64:	b580      	push	{r7, lr}
    6e66:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6e68:	4b03      	ldr	r3, [pc, #12]	; (6e78 <SERCOM7_3_Handler+0x14>)
    6e6a:	681b      	ldr	r3, [r3, #0]
    6e6c:	4618      	mov	r0, r3
    6e6e:	4b03      	ldr	r3, [pc, #12]	; (6e7c <SERCOM7_3_Handler+0x18>)
    6e70:	4798      	blx	r3
}
    6e72:	bf00      	nop
    6e74:	bd80      	pop	{r7, pc}
    6e76:	bf00      	nop
    6e78:	2000081c 	.word	0x2000081c
    6e7c:	00006389 	.word	0x00006389

00006e80 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6e80:	b580      	push	{r7, lr}
    6e82:	b084      	sub	sp, #16
    6e84:	af00      	add	r7, sp, #0
    6e86:	6078      	str	r0, [r7, #4]
    6e88:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6e8a:	683b      	ldr	r3, [r7, #0]
    6e8c:	4618      	mov	r0, r3
    6e8e:	4b35      	ldr	r3, [pc, #212]	; (6f64 <_spi_m_sync_init+0xe4>)
    6e90:	4798      	blx	r3
    6e92:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6e94:	687b      	ldr	r3, [r7, #4]
    6e96:	2b00      	cmp	r3, #0
    6e98:	d004      	beq.n	6ea4 <_spi_m_sync_init+0x24>
    6e9a:	683b      	ldr	r3, [r7, #0]
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	d001      	beq.n	6ea4 <_spi_m_sync_init+0x24>
    6ea0:	2301      	movs	r3, #1
    6ea2:	e000      	b.n	6ea6 <_spi_m_sync_init+0x26>
    6ea4:	2300      	movs	r3, #0
    6ea6:	f003 0301 	and.w	r3, r3, #1
    6eaa:	b2db      	uxtb	r3, r3
    6eac:	f640 128c 	movw	r2, #2444	; 0x98c
    6eb0:	492d      	ldr	r1, [pc, #180]	; (6f68 <_spi_m_sync_init+0xe8>)
    6eb2:	4618      	mov	r0, r3
    6eb4:	4b2d      	ldr	r3, [pc, #180]	; (6f6c <_spi_m_sync_init+0xec>)
    6eb6:	4798      	blx	r3

	if (regs == NULL) {
    6eb8:	68fb      	ldr	r3, [r7, #12]
    6eba:	2b00      	cmp	r3, #0
    6ebc:	d102      	bne.n	6ec4 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6ebe:	f06f 030c 	mvn.w	r3, #12
    6ec2:	e04a      	b.n	6f5a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6ec4:	2101      	movs	r1, #1
    6ec6:	6838      	ldr	r0, [r7, #0]
    6ec8:	4b29      	ldr	r3, [pc, #164]	; (6f70 <_spi_m_sync_init+0xf0>)
    6eca:	4798      	blx	r3
    6ecc:	4603      	mov	r3, r0
    6ece:	f083 0301 	eor.w	r3, r3, #1
    6ed2:	b2db      	uxtb	r3, r3
    6ed4:	2b00      	cmp	r3, #0
    6ed6:	d019      	beq.n	6f0c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6ed8:	68fb      	ldr	r3, [r7, #12]
    6eda:	681b      	ldr	r3, [r3, #0]
    6edc:	f003 031c 	and.w	r3, r3, #28
    6ee0:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6ee2:	2102      	movs	r1, #2
    6ee4:	6838      	ldr	r0, [r7, #0]
    6ee6:	4b23      	ldr	r3, [pc, #140]	; (6f74 <_spi_m_sync_init+0xf4>)
    6ee8:	4798      	blx	r3
    6eea:	4603      	mov	r3, r0
    6eec:	2b00      	cmp	r3, #0
    6eee:	d006      	beq.n	6efe <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6ef0:	6838      	ldr	r0, [r7, #0]
    6ef2:	4b21      	ldr	r3, [pc, #132]	; (6f78 <_spi_m_sync_init+0xf8>)
    6ef4:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6ef6:	2102      	movs	r1, #2
    6ef8:	6838      	ldr	r0, [r7, #0]
    6efa:	4b20      	ldr	r3, [pc, #128]	; (6f7c <_spi_m_sync_init+0xfc>)
    6efc:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6efe:	68bb      	ldr	r3, [r7, #8]
    6f00:	f043 0301 	orr.w	r3, r3, #1
    6f04:	4619      	mov	r1, r3
    6f06:	6838      	ldr	r0, [r7, #0]
    6f08:	4b1d      	ldr	r3, [pc, #116]	; (6f80 <_spi_m_sync_init+0x100>)
    6f0a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6f0c:	2101      	movs	r1, #1
    6f0e:	6838      	ldr	r0, [r7, #0]
    6f10:	4b1a      	ldr	r3, [pc, #104]	; (6f7c <_spi_m_sync_init+0xfc>)
    6f12:	4798      	blx	r3

	dev->prvt = hw;
    6f14:	687b      	ldr	r3, [r7, #4]
    6f16:	683a      	ldr	r2, [r7, #0]
    6f18:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6f1a:	68fb      	ldr	r3, [r7, #12]
    6f1c:	681b      	ldr	r3, [r3, #0]
    6f1e:	f003 031c 	and.w	r3, r3, #28
    6f22:	2b08      	cmp	r3, #8
    6f24:	d104      	bne.n	6f30 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6f26:	68f9      	ldr	r1, [r7, #12]
    6f28:	6838      	ldr	r0, [r7, #0]
    6f2a:	4b16      	ldr	r3, [pc, #88]	; (6f84 <_spi_m_sync_init+0x104>)
    6f2c:	4798      	blx	r3
    6f2e:	e003      	b.n	6f38 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6f30:	68f9      	ldr	r1, [r7, #12]
    6f32:	6838      	ldr	r0, [r7, #0]
    6f34:	4b14      	ldr	r3, [pc, #80]	; (6f88 <_spi_m_sync_init+0x108>)
    6f36:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6f38:	68fb      	ldr	r3, [r7, #12]
    6f3a:	685b      	ldr	r3, [r3, #4]
    6f3c:	f003 0307 	and.w	r3, r3, #7
    6f40:	2b00      	cmp	r3, #0
    6f42:	d101      	bne.n	6f48 <_spi_m_sync_init+0xc8>
    6f44:	2201      	movs	r2, #1
    6f46:	e000      	b.n	6f4a <_spi_m_sync_init+0xca>
    6f48:	2202      	movs	r2, #2
    6f4a:	687b      	ldr	r3, [r7, #4]
    6f4c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6f4e:	68fb      	ldr	r3, [r7, #12]
    6f50:	89db      	ldrh	r3, [r3, #14]
    6f52:	b29a      	uxth	r2, r3
    6f54:	687b      	ldr	r3, [r7, #4]
    6f56:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6f58:	2300      	movs	r3, #0
}
    6f5a:	4618      	mov	r0, r3
    6f5c:	3710      	adds	r7, #16
    6f5e:	46bd      	mov	sp, r7
    6f60:	bd80      	pop	{r7, pc}
    6f62:	bf00      	nop
    6f64:	00006db5 	.word	0x00006db5
    6f68:	0000efc4 	.word	0x0000efc4
    6f6c:	0000349d 	.word	0x0000349d
    6f70:	00005aad 	.word	0x00005aad
    6f74:	00005cd5 	.word	0x00005cd5
    6f78:	00005cad 	.word	0x00005cad
    6f7c:	00005a89 	.word	0x00005a89
    6f80:	00005d05 	.word	0x00005d05
    6f84:	00006d09 	.word	0x00006d09
    6f88:	00006c75 	.word	0x00006c75

00006f8c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6f8c:	b580      	push	{r7, lr}
    6f8e:	b082      	sub	sp, #8
    6f90:	af00      	add	r7, sp, #0
    6f92:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6f94:	bf00      	nop
    6f96:	2103      	movs	r1, #3
    6f98:	6878      	ldr	r0, [r7, #4]
    6f9a:	4b06      	ldr	r3, [pc, #24]	; (6fb4 <_spi_wait_bus_idle+0x28>)
    6f9c:	4798      	blx	r3
    6f9e:	4603      	mov	r3, r0
    6fa0:	2b00      	cmp	r3, #0
    6fa2:	d0f8      	beq.n	6f96 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6fa4:	2103      	movs	r1, #3
    6fa6:	6878      	ldr	r0, [r7, #4]
    6fa8:	4b03      	ldr	r3, [pc, #12]	; (6fb8 <_spi_wait_bus_idle+0x2c>)
    6faa:	4798      	blx	r3
}
    6fac:	bf00      	nop
    6fae:	3708      	adds	r7, #8
    6fb0:	46bd      	mov	sp, r7
    6fb2:	bd80      	pop	{r7, pc}
    6fb4:	00005b41 	.word	0x00005b41
    6fb8:	00005b83 	.word	0x00005b83

00006fbc <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6fbc:	b580      	push	{r7, lr}
    6fbe:	b086      	sub	sp, #24
    6fc0:	af00      	add	r7, sp, #0
    6fc2:	60f8      	str	r0, [r7, #12]
    6fc4:	60b9      	str	r1, [r7, #8]
    6fc6:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6fc8:	68bb      	ldr	r3, [r7, #8]
    6fca:	f003 0304 	and.w	r3, r3, #4
    6fce:	2b00      	cmp	r3, #0
    6fd0:	d101      	bne.n	6fd6 <_spi_rx_check_and_receive+0x1a>
		return false;
    6fd2:	2300      	movs	r3, #0
    6fd4:	e022      	b.n	701c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6fd6:	68f8      	ldr	r0, [r7, #12]
    6fd8:	4b12      	ldr	r3, [pc, #72]	; (7024 <_spi_rx_check_and_receive+0x68>)
    6fda:	4798      	blx	r3
    6fdc:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6fde:	687b      	ldr	r3, [r7, #4]
    6fe0:	685b      	ldr	r3, [r3, #4]
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d014      	beq.n	7010 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6fe6:	687b      	ldr	r3, [r7, #4]
    6fe8:	685b      	ldr	r3, [r3, #4]
    6fea:	1c59      	adds	r1, r3, #1
    6fec:	687a      	ldr	r2, [r7, #4]
    6fee:	6051      	str	r1, [r2, #4]
    6ff0:	697a      	ldr	r2, [r7, #20]
    6ff2:	b2d2      	uxtb	r2, r2
    6ff4:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6ff6:	687b      	ldr	r3, [r7, #4]
    6ff8:	7c1b      	ldrb	r3, [r3, #16]
    6ffa:	2b01      	cmp	r3, #1
    6ffc:	d908      	bls.n	7010 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6ffe:	687b      	ldr	r3, [r7, #4]
    7000:	685b      	ldr	r3, [r3, #4]
    7002:	1c59      	adds	r1, r3, #1
    7004:	687a      	ldr	r2, [r7, #4]
    7006:	6051      	str	r1, [r2, #4]
    7008:	697a      	ldr	r2, [r7, #20]
    700a:	0a12      	lsrs	r2, r2, #8
    700c:	b2d2      	uxtb	r2, r2
    700e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7010:	687b      	ldr	r3, [r7, #4]
    7012:	68db      	ldr	r3, [r3, #12]
    7014:	1c5a      	adds	r2, r3, #1
    7016:	687b      	ldr	r3, [r7, #4]
    7018:	60da      	str	r2, [r3, #12]

	return true;
    701a:	2301      	movs	r3, #1
}
    701c:	4618      	mov	r0, r3
    701e:	3718      	adds	r7, #24
    7020:	46bd      	mov	sp, r7
    7022:	bd80      	pop	{r7, pc}
    7024:	00005f7d 	.word	0x00005f7d

00007028 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7028:	b580      	push	{r7, lr}
    702a:	b086      	sub	sp, #24
    702c:	af00      	add	r7, sp, #0
    702e:	60f8      	str	r0, [r7, #12]
    7030:	60b9      	str	r1, [r7, #8]
    7032:	607a      	str	r2, [r7, #4]
    7034:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7036:	68bb      	ldr	r3, [r7, #8]
    7038:	f003 0301 	and.w	r3, r3, #1
    703c:	2b00      	cmp	r3, #0
    703e:	d028      	beq.n	7092 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	681b      	ldr	r3, [r3, #0]
    7044:	2b00      	cmp	r3, #0
    7046:	d018      	beq.n	707a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7048:	687b      	ldr	r3, [r7, #4]
    704a:	681b      	ldr	r3, [r3, #0]
    704c:	1c59      	adds	r1, r3, #1
    704e:	687a      	ldr	r2, [r7, #4]
    7050:	6011      	str	r1, [r2, #0]
    7052:	781b      	ldrb	r3, [r3, #0]
    7054:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7056:	687b      	ldr	r3, [r7, #4]
    7058:	7c1b      	ldrb	r3, [r3, #16]
    705a:	2b01      	cmp	r3, #1
    705c:	d90f      	bls.n	707e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    705e:	687b      	ldr	r3, [r7, #4]
    7060:	681b      	ldr	r3, [r3, #0]
    7062:	781b      	ldrb	r3, [r3, #0]
    7064:	021b      	lsls	r3, r3, #8
    7066:	461a      	mov	r2, r3
    7068:	697b      	ldr	r3, [r7, #20]
    706a:	4313      	orrs	r3, r2
    706c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    706e:	687b      	ldr	r3, [r7, #4]
    7070:	681b      	ldr	r3, [r3, #0]
    7072:	1c5a      	adds	r2, r3, #1
    7074:	687b      	ldr	r3, [r7, #4]
    7076:	601a      	str	r2, [r3, #0]
    7078:	e001      	b.n	707e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    707a:	887b      	ldrh	r3, [r7, #2]
    707c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    707e:	687b      	ldr	r3, [r7, #4]
    7080:	689b      	ldr	r3, [r3, #8]
    7082:	1c5a      	adds	r2, r3, #1
    7084:	687b      	ldr	r3, [r7, #4]
    7086:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7088:	6979      	ldr	r1, [r7, #20]
    708a:	68f8      	ldr	r0, [r7, #12]
    708c:	4b03      	ldr	r3, [pc, #12]	; (709c <_spi_tx_check_and_send+0x74>)
    708e:	4798      	blx	r3
    7090:	e000      	b.n	7094 <_spi_tx_check_and_send+0x6c>
		return;
    7092:	bf00      	nop
}
    7094:	3718      	adds	r7, #24
    7096:	46bd      	mov	sp, r7
    7098:	bd80      	pop	{r7, pc}
    709a:	bf00      	nop
    709c:	00005f61 	.word	0x00005f61

000070a0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    70a0:	b580      	push	{r7, lr}
    70a2:	b082      	sub	sp, #8
    70a4:	af00      	add	r7, sp, #0
    70a6:	6078      	str	r0, [r7, #4]
    70a8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    70aa:	687b      	ldr	r3, [r7, #4]
    70ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    70b0:	2b00      	cmp	r3, #0
    70b2:	d00b      	beq.n	70cc <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    70b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    70b8:	6838      	ldr	r0, [r7, #0]
    70ba:	4b07      	ldr	r3, [pc, #28]	; (70d8 <_spi_err_check+0x38>)
    70bc:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    70be:	2180      	movs	r1, #128	; 0x80
    70c0:	6838      	ldr	r0, [r7, #0]
    70c2:	4b06      	ldr	r3, [pc, #24]	; (70dc <_spi_err_check+0x3c>)
    70c4:	4798      	blx	r3
		return ERR_OVERFLOW;
    70c6:	f06f 0312 	mvn.w	r3, #18
    70ca:	e000      	b.n	70ce <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    70cc:	2300      	movs	r3, #0
}
    70ce:	4618      	mov	r0, r3
    70d0:	3708      	adds	r7, #8
    70d2:	46bd      	mov	sp, r7
    70d4:	bd80      	pop	{r7, pc}
    70d6:	bf00      	nop
    70d8:	00005fb5 	.word	0x00005fb5
    70dc:	00005b83 	.word	0x00005b83

000070e0 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    70e0:	b590      	push	{r4, r7, lr}
    70e2:	b08b      	sub	sp, #44	; 0x2c
    70e4:	af00      	add	r7, sp, #0
    70e6:	6078      	str	r0, [r7, #4]
    70e8:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    70ea:	687b      	ldr	r3, [r7, #4]
    70ec:	681b      	ldr	r3, [r3, #0]
    70ee:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    70f0:	2300      	movs	r3, #0
    70f2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    70f4:	683b      	ldr	r3, [r7, #0]
    70f6:	681b      	ldr	r3, [r3, #0]
    70f8:	60bb      	str	r3, [r7, #8]
    70fa:	683b      	ldr	r3, [r7, #0]
    70fc:	685b      	ldr	r3, [r3, #4]
    70fe:	60fb      	str	r3, [r7, #12]
    7100:	2300      	movs	r3, #0
    7102:	613b      	str	r3, [r7, #16]
    7104:	2300      	movs	r3, #0
    7106:	617b      	str	r3, [r7, #20]
    7108:	687b      	ldr	r3, [r7, #4]
    710a:	791b      	ldrb	r3, [r3, #4]
    710c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    710e:	687b      	ldr	r3, [r7, #4]
    7110:	2b00      	cmp	r3, #0
    7112:	d004      	beq.n	711e <_spi_m_sync_trans+0x3e>
    7114:	6a3b      	ldr	r3, [r7, #32]
    7116:	2b00      	cmp	r3, #0
    7118:	d001      	beq.n	711e <_spi_m_sync_trans+0x3e>
    711a:	2301      	movs	r3, #1
    711c:	e000      	b.n	7120 <_spi_m_sync_trans+0x40>
    711e:	2300      	movs	r3, #0
    7120:	f003 0301 	and.w	r3, r3, #1
    7124:	b2db      	uxtb	r3, r3
    7126:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    712a:	492b      	ldr	r1, [pc, #172]	; (71d8 <_spi_m_sync_trans+0xf8>)
    712c:	4618      	mov	r0, r3
    712e:	4b2b      	ldr	r3, [pc, #172]	; (71dc <_spi_m_sync_trans+0xfc>)
    7130:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7132:	2107      	movs	r1, #7
    7134:	6a38      	ldr	r0, [r7, #32]
    7136:	4b2a      	ldr	r3, [pc, #168]	; (71e0 <_spi_m_sync_trans+0x100>)
    7138:	4798      	blx	r3
    713a:	4603      	mov	r3, r0
    713c:	2b00      	cmp	r3, #0
    713e:	d002      	beq.n	7146 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7140:	f06f 0303 	mvn.w	r3, #3
    7144:	e043      	b.n	71ce <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7146:	6a38      	ldr	r0, [r7, #32]
    7148:	4b26      	ldr	r3, [pc, #152]	; (71e4 <_spi_m_sync_trans+0x104>)
    714a:	4798      	blx	r3
    714c:	4603      	mov	r3, r0
    714e:	f083 0301 	eor.w	r3, r3, #1
    7152:	b2db      	uxtb	r3, r3
    7154:	2b00      	cmp	r3, #0
    7156:	d002      	beq.n	715e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7158:	f06f 0313 	mvn.w	r3, #19
    715c:	e037      	b.n	71ce <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    715e:	6a38      	ldr	r0, [r7, #32]
    7160:	4b21      	ldr	r3, [pc, #132]	; (71e8 <_spi_m_sync_trans+0x108>)
    7162:	4798      	blx	r3
    7164:	4603      	mov	r3, r0
    7166:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7168:	f107 0308 	add.w	r3, r7, #8
    716c:	461a      	mov	r2, r3
    716e:	69f9      	ldr	r1, [r7, #28]
    7170:	6a38      	ldr	r0, [r7, #32]
    7172:	4b1e      	ldr	r3, [pc, #120]	; (71ec <_spi_m_sync_trans+0x10c>)
    7174:	4798      	blx	r3
    7176:	4603      	mov	r3, r0
    7178:	f083 0301 	eor.w	r3, r3, #1
    717c:	b2db      	uxtb	r3, r3
    717e:	2b00      	cmp	r3, #0
    7180:	d00b      	beq.n	719a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7182:	697a      	ldr	r2, [r7, #20]
    7184:	693b      	ldr	r3, [r7, #16]
    7186:	429a      	cmp	r2, r3
    7188:	d307      	bcc.n	719a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    718a:	687b      	ldr	r3, [r7, #4]
    718c:	88db      	ldrh	r3, [r3, #6]
    718e:	f107 0208 	add.w	r2, r7, #8
    7192:	69f9      	ldr	r1, [r7, #28]
    7194:	6a38      	ldr	r0, [r7, #32]
    7196:	4c16      	ldr	r4, [pc, #88]	; (71f0 <_spi_m_sync_trans+0x110>)
    7198:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    719a:	6a39      	ldr	r1, [r7, #32]
    719c:	69f8      	ldr	r0, [r7, #28]
    719e:	4b15      	ldr	r3, [pc, #84]	; (71f4 <_spi_m_sync_trans+0x114>)
    71a0:	4798      	blx	r3
    71a2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    71a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    71a6:	2b00      	cmp	r3, #0
    71a8:	db0c      	blt.n	71c4 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    71aa:	693a      	ldr	r2, [r7, #16]
    71ac:	683b      	ldr	r3, [r7, #0]
    71ae:	689b      	ldr	r3, [r3, #8]
    71b0:	429a      	cmp	r2, r3
    71b2:	d3d4      	bcc.n	715e <_spi_m_sync_trans+0x7e>
    71b4:	697a      	ldr	r2, [r7, #20]
    71b6:	683b      	ldr	r3, [r7, #0]
    71b8:	689b      	ldr	r3, [r3, #8]
    71ba:	429a      	cmp	r2, r3
    71bc:	d3cf      	bcc.n	715e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    71be:	693b      	ldr	r3, [r7, #16]
    71c0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    71c2:	e000      	b.n	71c6 <_spi_m_sync_trans+0xe6>
			break;
    71c4:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    71c6:	6a38      	ldr	r0, [r7, #32]
    71c8:	4b0b      	ldr	r3, [pc, #44]	; (71f8 <_spi_m_sync_trans+0x118>)
    71ca:	4798      	blx	r3

	return rc;
    71cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    71ce:	4618      	mov	r0, r3
    71d0:	372c      	adds	r7, #44	; 0x2c
    71d2:	46bd      	mov	sp, r7
    71d4:	bd90      	pop	{r4, r7, pc}
    71d6:	bf00      	nop
    71d8:	0000efc4 	.word	0x0000efc4
    71dc:	0000349d 	.word	0x0000349d
    71e0:	00005aad 	.word	0x00005aad
    71e4:	00005c75 	.word	0x00005c75
    71e8:	00005b69 	.word	0x00005b69
    71ec:	00006fbd 	.word	0x00006fbd
    71f0:	00007029 	.word	0x00007029
    71f4:	000070a1 	.word	0x000070a1
    71f8:	00006f8d 	.word	0x00006f8d

000071fc <__NVIC_EnableIRQ>:
{
    71fc:	b480      	push	{r7}
    71fe:	b083      	sub	sp, #12
    7200:	af00      	add	r7, sp, #0
    7202:	4603      	mov	r3, r0
    7204:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    720a:	2b00      	cmp	r3, #0
    720c:	db0b      	blt.n	7226 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    720e:	4909      	ldr	r1, [pc, #36]	; (7234 <__NVIC_EnableIRQ+0x38>)
    7210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7214:	095b      	lsrs	r3, r3, #5
    7216:	88fa      	ldrh	r2, [r7, #6]
    7218:	f002 021f 	and.w	r2, r2, #31
    721c:	2001      	movs	r0, #1
    721e:	fa00 f202 	lsl.w	r2, r0, r2
    7222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7226:	bf00      	nop
    7228:	370c      	adds	r7, #12
    722a:	46bd      	mov	sp, r7
    722c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7230:	4770      	bx	lr
    7232:	bf00      	nop
    7234:	e000e100 	.word	0xe000e100

00007238 <__NVIC_DisableIRQ>:
{
    7238:	b480      	push	{r7}
    723a:	b083      	sub	sp, #12
    723c:	af00      	add	r7, sp, #0
    723e:	4603      	mov	r3, r0
    7240:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7246:	2b00      	cmp	r3, #0
    7248:	db10      	blt.n	726c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    724a:	490b      	ldr	r1, [pc, #44]	; (7278 <__NVIC_DisableIRQ+0x40>)
    724c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7250:	095b      	lsrs	r3, r3, #5
    7252:	88fa      	ldrh	r2, [r7, #6]
    7254:	f002 021f 	and.w	r2, r2, #31
    7258:	2001      	movs	r0, #1
    725a:	fa00 f202 	lsl.w	r2, r0, r2
    725e:	3320      	adds	r3, #32
    7260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7264:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7268:	f3bf 8f6f 	isb	sy
}
    726c:	bf00      	nop
    726e:	370c      	adds	r7, #12
    7270:	46bd      	mov	sp, r7
    7272:	f85d 7b04 	ldr.w	r7, [sp], #4
    7276:	4770      	bx	lr
    7278:	e000e100 	.word	0xe000e100

0000727c <__NVIC_ClearPendingIRQ>:
{
    727c:	b480      	push	{r7}
    727e:	b083      	sub	sp, #12
    7280:	af00      	add	r7, sp, #0
    7282:	4603      	mov	r3, r0
    7284:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    728a:	2b00      	cmp	r3, #0
    728c:	db0c      	blt.n	72a8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    728e:	4909      	ldr	r1, [pc, #36]	; (72b4 <__NVIC_ClearPendingIRQ+0x38>)
    7290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7294:	095b      	lsrs	r3, r3, #5
    7296:	88fa      	ldrh	r2, [r7, #6]
    7298:	f002 021f 	and.w	r2, r2, #31
    729c:	2001      	movs	r0, #1
    729e:	fa00 f202 	lsl.w	r2, r0, r2
    72a2:	3360      	adds	r3, #96	; 0x60
    72a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72a8:	bf00      	nop
    72aa:	370c      	adds	r7, #12
    72ac:	46bd      	mov	sp, r7
    72ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    72b2:	4770      	bx	lr
    72b4:	e000e100 	.word	0xe000e100

000072b8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    72b8:	b480      	push	{r7}
    72ba:	b083      	sub	sp, #12
    72bc:	af00      	add	r7, sp, #0
    72be:	6078      	str	r0, [r7, #4]
    72c0:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    72c2:	bf00      	nop
    72c4:	687b      	ldr	r3, [r7, #4]
    72c6:	689a      	ldr	r2, [r3, #8]
    72c8:	683b      	ldr	r3, [r7, #0]
    72ca:	4013      	ands	r3, r2
    72cc:	2b00      	cmp	r3, #0
    72ce:	d1f9      	bne.n	72c4 <hri_tcc_wait_for_sync+0xc>
	};
}
    72d0:	bf00      	nop
    72d2:	370c      	adds	r7, #12
    72d4:	46bd      	mov	sp, r7
    72d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72da:	4770      	bx	lr

000072dc <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    72dc:	b480      	push	{r7}
    72de:	b083      	sub	sp, #12
    72e0:	af00      	add	r7, sp, #0
    72e2:	6078      	str	r0, [r7, #4]
    72e4:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    72e6:	687b      	ldr	r3, [r7, #4]
    72e8:	689a      	ldr	r2, [r3, #8]
    72ea:	683b      	ldr	r3, [r7, #0]
    72ec:	4013      	ands	r3, r2
    72ee:	2b00      	cmp	r3, #0
    72f0:	bf14      	ite	ne
    72f2:	2301      	movne	r3, #1
    72f4:	2300      	moveq	r3, #0
    72f6:	b2db      	uxtb	r3, r3
}
    72f8:	4618      	mov	r0, r3
    72fa:	370c      	adds	r7, #12
    72fc:	46bd      	mov	sp, r7
    72fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7302:	4770      	bx	lr

00007304 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7304:	b480      	push	{r7}
    7306:	b083      	sub	sp, #12
    7308:	af00      	add	r7, sp, #0
    730a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    730c:	687b      	ldr	r3, [r7, #4]
    730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7310:	f003 0301 	and.w	r3, r3, #1
    7314:	2b00      	cmp	r3, #0
    7316:	bf14      	ite	ne
    7318:	2301      	movne	r3, #1
    731a:	2300      	moveq	r3, #0
    731c:	b2db      	uxtb	r3, r3
}
    731e:	4618      	mov	r0, r3
    7320:	370c      	adds	r7, #12
    7322:	46bd      	mov	sp, r7
    7324:	f85d 7b04 	ldr.w	r7, [sp], #4
    7328:	4770      	bx	lr

0000732a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    732a:	b480      	push	{r7}
    732c:	b083      	sub	sp, #12
    732e:	af00      	add	r7, sp, #0
    7330:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7332:	687b      	ldr	r3, [r7, #4]
    7334:	2201      	movs	r2, #1
    7336:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7338:	bf00      	nop
    733a:	370c      	adds	r7, #12
    733c:	46bd      	mov	sp, r7
    733e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7342:	4770      	bx	lr

00007344 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7344:	b480      	push	{r7}
    7346:	b083      	sub	sp, #12
    7348:	af00      	add	r7, sp, #0
    734a:	6078      	str	r0, [r7, #4]
    734c:	460b      	mov	r3, r1
    734e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7350:	687b      	ldr	r3, [r7, #4]
    7352:	78fa      	ldrb	r2, [r7, #3]
    7354:	715a      	strb	r2, [r3, #5]
}
    7356:	bf00      	nop
    7358:	370c      	adds	r7, #12
    735a:	46bd      	mov	sp, r7
    735c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7360:	4770      	bx	lr

00007362 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7362:	b480      	push	{r7}
    7364:	b083      	sub	sp, #12
    7366:	af00      	add	r7, sp, #0
    7368:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    736a:	687b      	ldr	r3, [r7, #4]
    736c:	2201      	movs	r2, #1
    736e:	629a      	str	r2, [r3, #40]	; 0x28
}
    7370:	bf00      	nop
    7372:	370c      	adds	r7, #12
    7374:	46bd      	mov	sp, r7
    7376:	f85d 7b04 	ldr.w	r7, [sp], #4
    737a:	4770      	bx	lr

0000737c <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    737c:	b580      	push	{r7, lr}
    737e:	b082      	sub	sp, #8
    7380:	af00      	add	r7, sp, #0
    7382:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7384:	687b      	ldr	r3, [r7, #4]
    7386:	681b      	ldr	r3, [r3, #0]
    7388:	f043 0201 	orr.w	r2, r3, #1
    738c:	687b      	ldr	r3, [r7, #4]
    738e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7390:	2101      	movs	r1, #1
    7392:	6878      	ldr	r0, [r7, #4]
    7394:	4b02      	ldr	r3, [pc, #8]	; (73a0 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7396:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7398:	bf00      	nop
    739a:	3708      	adds	r7, #8
    739c:	46bd      	mov	sp, r7
    739e:	bd80      	pop	{r7, pc}
    73a0:	000072b9 	.word	0x000072b9

000073a4 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    73a4:	b580      	push	{r7, lr}
    73a6:	b082      	sub	sp, #8
    73a8:	af00      	add	r7, sp, #0
    73aa:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    73ac:	687b      	ldr	r3, [r7, #4]
    73ae:	681b      	ldr	r3, [r3, #0]
    73b0:	f043 0202 	orr.w	r2, r3, #2
    73b4:	687b      	ldr	r3, [r7, #4]
    73b6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    73b8:	2103      	movs	r1, #3
    73ba:	6878      	ldr	r0, [r7, #4]
    73bc:	4b02      	ldr	r3, [pc, #8]	; (73c8 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    73be:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    73c0:	bf00      	nop
    73c2:	3708      	adds	r7, #8
    73c4:	46bd      	mov	sp, r7
    73c6:	bd80      	pop	{r7, pc}
    73c8:	000072b9 	.word	0x000072b9

000073cc <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    73cc:	b580      	push	{r7, lr}
    73ce:	b084      	sub	sp, #16
    73d0:	af00      	add	r7, sp, #0
    73d2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    73d4:	2103      	movs	r1, #3
    73d6:	6878      	ldr	r0, [r7, #4]
    73d8:	4b09      	ldr	r3, [pc, #36]	; (7400 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    73da:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    73dc:	687b      	ldr	r3, [r7, #4]
    73de:	681b      	ldr	r3, [r3, #0]
    73e0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    73e2:	68fb      	ldr	r3, [r7, #12]
    73e4:	085b      	lsrs	r3, r3, #1
    73e6:	f003 0301 	and.w	r3, r3, #1
    73ea:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    73ec:	68fb      	ldr	r3, [r7, #12]
    73ee:	2b00      	cmp	r3, #0
    73f0:	bf14      	ite	ne
    73f2:	2301      	movne	r3, #1
    73f4:	2300      	moveq	r3, #0
    73f6:	b2db      	uxtb	r3, r3
}
    73f8:	4618      	mov	r0, r3
    73fa:	3710      	adds	r7, #16
    73fc:	46bd      	mov	sp, r7
    73fe:	bd80      	pop	{r7, pc}
    7400:	000072b9 	.word	0x000072b9

00007404 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7404:	b580      	push	{r7, lr}
    7406:	b082      	sub	sp, #8
    7408:	af00      	add	r7, sp, #0
    740a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    740c:	687b      	ldr	r3, [r7, #4]
    740e:	681b      	ldr	r3, [r3, #0]
    7410:	f023 0202 	bic.w	r2, r3, #2
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7418:	2103      	movs	r1, #3
    741a:	6878      	ldr	r0, [r7, #4]
    741c:	4b02      	ldr	r3, [pc, #8]	; (7428 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    741e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7420:	bf00      	nop
    7422:	3708      	adds	r7, #8
    7424:	46bd      	mov	sp, r7
    7426:	bd80      	pop	{r7, pc}
    7428:	000072b9 	.word	0x000072b9

0000742c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    742c:	b580      	push	{r7, lr}
    742e:	b084      	sub	sp, #16
    7430:	af00      	add	r7, sp, #0
    7432:	6078      	str	r0, [r7, #4]
    7434:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7436:	2103      	movs	r1, #3
    7438:	6878      	ldr	r0, [r7, #4]
    743a:	4b07      	ldr	r3, [pc, #28]	; (7458 <hri_tcc_get_CTRLA_reg+0x2c>)
    743c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    743e:	687b      	ldr	r3, [r7, #4]
    7440:	681b      	ldr	r3, [r3, #0]
    7442:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7444:	68fa      	ldr	r2, [r7, #12]
    7446:	683b      	ldr	r3, [r7, #0]
    7448:	4013      	ands	r3, r2
    744a:	60fb      	str	r3, [r7, #12]
	return tmp;
    744c:	68fb      	ldr	r3, [r7, #12]
}
    744e:	4618      	mov	r0, r3
    7450:	3710      	adds	r7, #16
    7452:	46bd      	mov	sp, r7
    7454:	bd80      	pop	{r7, pc}
    7456:	bf00      	nop
    7458:	000072b9 	.word	0x000072b9

0000745c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    745c:	b580      	push	{r7, lr}
    745e:	b082      	sub	sp, #8
    7460:	af00      	add	r7, sp, #0
    7462:	6078      	str	r0, [r7, #4]
    7464:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7466:	687b      	ldr	r3, [r7, #4]
    7468:	683a      	ldr	r2, [r7, #0]
    746a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    746c:	2103      	movs	r1, #3
    746e:	6878      	ldr	r0, [r7, #4]
    7470:	4b02      	ldr	r3, [pc, #8]	; (747c <hri_tcc_write_CTRLA_reg+0x20>)
    7472:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7474:	bf00      	nop
    7476:	3708      	adds	r7, #8
    7478:	46bd      	mov	sp, r7
    747a:	bd80      	pop	{r7, pc}
    747c:	000072b9 	.word	0x000072b9

00007480 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7480:	b480      	push	{r7}
    7482:	b083      	sub	sp, #12
    7484:	af00      	add	r7, sp, #0
    7486:	6078      	str	r0, [r7, #4]
    7488:	460b      	mov	r3, r1
    748a:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    748c:	687b      	ldr	r3, [r7, #4]
    748e:	78fa      	ldrb	r2, [r7, #3]
    7490:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7492:	bf00      	nop
    7494:	370c      	adds	r7, #12
    7496:	46bd      	mov	sp, r7
    7498:	f85d 7b04 	ldr.w	r7, [sp], #4
    749c:	4770      	bx	lr

0000749e <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    749e:	b480      	push	{r7}
    74a0:	b083      	sub	sp, #12
    74a2:	af00      	add	r7, sp, #0
    74a4:	6078      	str	r0, [r7, #4]
    74a6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    74a8:	687b      	ldr	r3, [r7, #4]
    74aa:	683a      	ldr	r2, [r7, #0]
    74ac:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    74ae:	bf00      	nop
    74b0:	370c      	adds	r7, #12
    74b2:	46bd      	mov	sp, r7
    74b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    74b8:	4770      	bx	lr
	...

000074bc <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    74bc:	b580      	push	{r7, lr}
    74be:	b082      	sub	sp, #8
    74c0:	af00      	add	r7, sp, #0
    74c2:	6078      	str	r0, [r7, #4]
    74c4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    74c6:	687b      	ldr	r3, [r7, #4]
    74c8:	683a      	ldr	r2, [r7, #0]
    74ca:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    74cc:	2180      	movs	r1, #128	; 0x80
    74ce:	6878      	ldr	r0, [r7, #4]
    74d0:	4b02      	ldr	r3, [pc, #8]	; (74dc <hri_tcc_write_PER_reg+0x20>)
    74d2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    74d4:	bf00      	nop
    74d6:	3708      	adds	r7, #8
    74d8:	46bd      	mov	sp, r7
    74da:	bd80      	pop	{r7, pc}
    74dc:	000072b9 	.word	0x000072b9

000074e0 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    74e0:	b580      	push	{r7, lr}
    74e2:	b082      	sub	sp, #8
    74e4:	af00      	add	r7, sp, #0
    74e6:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    74e8:	2180      	movs	r1, #128	; 0x80
    74ea:	6878      	ldr	r0, [r7, #4]
    74ec:	4b03      	ldr	r3, [pc, #12]	; (74fc <hri_tcc_read_PER_reg+0x1c>)
    74ee:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    74f0:	687b      	ldr	r3, [r7, #4]
    74f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    74f4:	4618      	mov	r0, r3
    74f6:	3708      	adds	r7, #8
    74f8:	46bd      	mov	sp, r7
    74fa:	bd80      	pop	{r7, pc}
    74fc:	000072b9 	.word	0x000072b9

00007500 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7500:	b480      	push	{r7}
    7502:	b083      	sub	sp, #12
    7504:	af00      	add	r7, sp, #0
    7506:	6078      	str	r0, [r7, #4]
    7508:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    750a:	687b      	ldr	r3, [r7, #4]
    750c:	4a09      	ldr	r2, [pc, #36]	; (7534 <_tcc_init_irq_param+0x34>)
    750e:	4293      	cmp	r3, r2
    7510:	d102      	bne.n	7518 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7512:	4a09      	ldr	r2, [pc, #36]	; (7538 <_tcc_init_irq_param+0x38>)
    7514:	683b      	ldr	r3, [r7, #0]
    7516:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7518:	687b      	ldr	r3, [r7, #4]
    751a:	4a08      	ldr	r2, [pc, #32]	; (753c <_tcc_init_irq_param+0x3c>)
    751c:	4293      	cmp	r3, r2
    751e:	d102      	bne.n	7526 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7520:	4a07      	ldr	r2, [pc, #28]	; (7540 <_tcc_init_irq_param+0x40>)
    7522:	683b      	ldr	r3, [r7, #0]
    7524:	6013      	str	r3, [r2, #0]
	}
}
    7526:	bf00      	nop
    7528:	370c      	adds	r7, #12
    752a:	46bd      	mov	sp, r7
    752c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7530:	4770      	bx	lr
    7532:	bf00      	nop
    7534:	41016000 	.word	0x41016000
    7538:	20000830 	.word	0x20000830
    753c:	41018000 	.word	0x41018000
    7540:	20000834 	.word	0x20000834

00007544 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7544:	b580      	push	{r7, lr}
    7546:	b084      	sub	sp, #16
    7548:	af00      	add	r7, sp, #0
    754a:	6078      	str	r0, [r7, #4]
    754c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    754e:	6838      	ldr	r0, [r7, #0]
    7550:	4b33      	ldr	r3, [pc, #204]	; (7620 <_tcc_timer_init+0xdc>)
    7552:	4798      	blx	r3
    7554:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7556:	68fb      	ldr	r3, [r7, #12]
    7558:	2b00      	cmp	r3, #0
    755a:	d102      	bne.n	7562 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    755c:	f06f 0309 	mvn.w	r3, #9
    7560:	e05a      	b.n	7618 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7562:	687b      	ldr	r3, [r7, #4]
    7564:	683a      	ldr	r2, [r7, #0]
    7566:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7568:	2101      	movs	r1, #1
    756a:	6838      	ldr	r0, [r7, #0]
    756c:	4b2d      	ldr	r3, [pc, #180]	; (7624 <_tcc_timer_init+0xe0>)
    756e:	4798      	blx	r3
    7570:	4603      	mov	r3, r0
    7572:	f083 0301 	eor.w	r3, r3, #1
    7576:	b2db      	uxtb	r3, r3
    7578:	2b00      	cmp	r3, #0
    757a:	d011      	beq.n	75a0 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    757c:	2102      	movs	r1, #2
    757e:	6838      	ldr	r0, [r7, #0]
    7580:	4b29      	ldr	r3, [pc, #164]	; (7628 <_tcc_timer_init+0xe4>)
    7582:	4798      	blx	r3
    7584:	4603      	mov	r3, r0
    7586:	2b00      	cmp	r3, #0
    7588:	d006      	beq.n	7598 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    758a:	6838      	ldr	r0, [r7, #0]
    758c:	4b27      	ldr	r3, [pc, #156]	; (762c <_tcc_timer_init+0xe8>)
    758e:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7590:	2102      	movs	r1, #2
    7592:	6838      	ldr	r0, [r7, #0]
    7594:	4b26      	ldr	r3, [pc, #152]	; (7630 <_tcc_timer_init+0xec>)
    7596:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7598:	2101      	movs	r1, #1
    759a:	6838      	ldr	r0, [r7, #0]
    759c:	4b25      	ldr	r3, [pc, #148]	; (7634 <_tcc_timer_init+0xf0>)
    759e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    75a0:	2101      	movs	r1, #1
    75a2:	6838      	ldr	r0, [r7, #0]
    75a4:	4b22      	ldr	r3, [pc, #136]	; (7630 <_tcc_timer_init+0xec>)
    75a6:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    75a8:	68fb      	ldr	r3, [r7, #12]
    75aa:	689b      	ldr	r3, [r3, #8]
    75ac:	4619      	mov	r1, r3
    75ae:	6838      	ldr	r0, [r7, #0]
    75b0:	4b20      	ldr	r3, [pc, #128]	; (7634 <_tcc_timer_init+0xf0>)
    75b2:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    75b4:	68fb      	ldr	r3, [r7, #12]
    75b6:	7b1b      	ldrb	r3, [r3, #12]
    75b8:	4619      	mov	r1, r3
    75ba:	6838      	ldr	r0, [r7, #0]
    75bc:	4b1e      	ldr	r3, [pc, #120]	; (7638 <_tcc_timer_init+0xf4>)
    75be:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    75c0:	68fb      	ldr	r3, [r7, #12]
    75c2:	7b5b      	ldrb	r3, [r3, #13]
    75c4:	4619      	mov	r1, r3
    75c6:	6838      	ldr	r0, [r7, #0]
    75c8:	4b1c      	ldr	r3, [pc, #112]	; (763c <_tcc_timer_init+0xf8>)
    75ca:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    75cc:	68fb      	ldr	r3, [r7, #12]
    75ce:	691b      	ldr	r3, [r3, #16]
    75d0:	4619      	mov	r1, r3
    75d2:	6838      	ldr	r0, [r7, #0]
    75d4:	4b1a      	ldr	r3, [pc, #104]	; (7640 <_tcc_timer_init+0xfc>)
    75d6:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    75d8:	68fb      	ldr	r3, [r7, #12]
    75da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    75dc:	4619      	mov	r1, r3
    75de:	6838      	ldr	r0, [r7, #0]
    75e0:	4b18      	ldr	r3, [pc, #96]	; (7644 <_tcc_timer_init+0x100>)
    75e2:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    75e4:	6838      	ldr	r0, [r7, #0]
    75e6:	4b18      	ldr	r3, [pc, #96]	; (7648 <_tcc_timer_init+0x104>)
    75e8:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    75ea:	6879      	ldr	r1, [r7, #4]
    75ec:	6838      	ldr	r0, [r7, #0]
    75ee:	4b17      	ldr	r3, [pc, #92]	; (764c <_tcc_timer_init+0x108>)
    75f0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    75f2:	68fb      	ldr	r3, [r7, #12]
    75f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    75f8:	4618      	mov	r0, r3
    75fa:	4b15      	ldr	r3, [pc, #84]	; (7650 <_tcc_timer_init+0x10c>)
    75fc:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    75fe:	68fb      	ldr	r3, [r7, #12]
    7600:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7604:	4618      	mov	r0, r3
    7606:	4b13      	ldr	r3, [pc, #76]	; (7654 <_tcc_timer_init+0x110>)
    7608:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    760a:	68fb      	ldr	r3, [r7, #12]
    760c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7610:	4618      	mov	r0, r3
    7612:	4b11      	ldr	r3, [pc, #68]	; (7658 <_tcc_timer_init+0x114>)
    7614:	4798      	blx	r3

	return ERR_NONE;
    7616:	2300      	movs	r3, #0
}
    7618:	4618      	mov	r0, r3
    761a:	3710      	adds	r7, #16
    761c:	46bd      	mov	sp, r7
    761e:	bd80      	pop	{r7, pc}
    7620:	0000780d 	.word	0x0000780d
    7624:	000072dd 	.word	0x000072dd
    7628:	0000742d 	.word	0x0000742d
    762c:	00007405 	.word	0x00007405
    7630:	000072b9 	.word	0x000072b9
    7634:	0000745d 	.word	0x0000745d
    7638:	00007345 	.word	0x00007345
    763c:	00007481 	.word	0x00007481
    7640:	0000749f 	.word	0x0000749f
    7644:	000074bd 	.word	0x000074bd
    7648:	00007363 	.word	0x00007363
    764c:	00007501 	.word	0x00007501
    7650:	00007239 	.word	0x00007239
    7654:	0000727d 	.word	0x0000727d
    7658:	000071fd 	.word	0x000071fd

0000765c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    765c:	b580      	push	{r7, lr}
    765e:	b084      	sub	sp, #16
    7660:	af00      	add	r7, sp, #0
    7662:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7664:	687b      	ldr	r3, [r7, #4]
    7666:	68db      	ldr	r3, [r3, #12]
    7668:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    766a:	68f8      	ldr	r0, [r7, #12]
    766c:	4b0a      	ldr	r3, [pc, #40]	; (7698 <_tcc_timer_deinit+0x3c>)
    766e:	4798      	blx	r3
    7670:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7672:	68bb      	ldr	r3, [r7, #8]
    7674:	2b00      	cmp	r3, #0
    7676:	d00b      	beq.n	7690 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7678:	68bb      	ldr	r3, [r7, #8]
    767a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    767e:	4618      	mov	r0, r3
    7680:	4b06      	ldr	r3, [pc, #24]	; (769c <_tcc_timer_deinit+0x40>)
    7682:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7684:	68f8      	ldr	r0, [r7, #12]
    7686:	4b06      	ldr	r3, [pc, #24]	; (76a0 <_tcc_timer_deinit+0x44>)
    7688:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    768a:	68f8      	ldr	r0, [r7, #12]
    768c:	4b05      	ldr	r3, [pc, #20]	; (76a4 <_tcc_timer_deinit+0x48>)
    768e:	4798      	blx	r3
	}
}
    7690:	bf00      	nop
    7692:	3710      	adds	r7, #16
    7694:	46bd      	mov	sp, r7
    7696:	bd80      	pop	{r7, pc}
    7698:	0000780d 	.word	0x0000780d
    769c:	00007239 	.word	0x00007239
    76a0:	00007405 	.word	0x00007405
    76a4:	0000737d 	.word	0x0000737d

000076a8 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    76a8:	b580      	push	{r7, lr}
    76aa:	b082      	sub	sp, #8
    76ac:	af00      	add	r7, sp, #0
    76ae:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    76b0:	687b      	ldr	r3, [r7, #4]
    76b2:	68db      	ldr	r3, [r3, #12]
    76b4:	4618      	mov	r0, r3
    76b6:	4b03      	ldr	r3, [pc, #12]	; (76c4 <_tcc_timer_start+0x1c>)
    76b8:	4798      	blx	r3
}
    76ba:	bf00      	nop
    76bc:	3708      	adds	r7, #8
    76be:	46bd      	mov	sp, r7
    76c0:	bd80      	pop	{r7, pc}
    76c2:	bf00      	nop
    76c4:	000073a5 	.word	0x000073a5

000076c8 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    76c8:	b580      	push	{r7, lr}
    76ca:	b082      	sub	sp, #8
    76cc:	af00      	add	r7, sp, #0
    76ce:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    76d0:	687b      	ldr	r3, [r7, #4]
    76d2:	68db      	ldr	r3, [r3, #12]
    76d4:	4618      	mov	r0, r3
    76d6:	4b03      	ldr	r3, [pc, #12]	; (76e4 <_tcc_timer_stop+0x1c>)
    76d8:	4798      	blx	r3
}
    76da:	bf00      	nop
    76dc:	3708      	adds	r7, #8
    76de:	46bd      	mov	sp, r7
    76e0:	bd80      	pop	{r7, pc}
    76e2:	bf00      	nop
    76e4:	00007405 	.word	0x00007405

000076e8 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    76e8:	b580      	push	{r7, lr}
    76ea:	b082      	sub	sp, #8
    76ec:	af00      	add	r7, sp, #0
    76ee:	6078      	str	r0, [r7, #4]
    76f0:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    76f2:	687b      	ldr	r3, [r7, #4]
    76f4:	68db      	ldr	r3, [r3, #12]
    76f6:	6839      	ldr	r1, [r7, #0]
    76f8:	4618      	mov	r0, r3
    76fa:	4b03      	ldr	r3, [pc, #12]	; (7708 <_tcc_timer_set_period+0x20>)
    76fc:	4798      	blx	r3
}
    76fe:	bf00      	nop
    7700:	3708      	adds	r7, #8
    7702:	46bd      	mov	sp, r7
    7704:	bd80      	pop	{r7, pc}
    7706:	bf00      	nop
    7708:	000074bd 	.word	0x000074bd

0000770c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    770c:	b580      	push	{r7, lr}
    770e:	b082      	sub	sp, #8
    7710:	af00      	add	r7, sp, #0
    7712:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7714:	687b      	ldr	r3, [r7, #4]
    7716:	68db      	ldr	r3, [r3, #12]
    7718:	4618      	mov	r0, r3
    771a:	4b03      	ldr	r3, [pc, #12]	; (7728 <_tcc_timer_get_period+0x1c>)
    771c:	4798      	blx	r3
    771e:	4603      	mov	r3, r0
}
    7720:	4618      	mov	r0, r3
    7722:	3708      	adds	r7, #8
    7724:	46bd      	mov	sp, r7
    7726:	bd80      	pop	{r7, pc}
    7728:	000074e1 	.word	0x000074e1

0000772c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    772c:	b580      	push	{r7, lr}
    772e:	b082      	sub	sp, #8
    7730:	af00      	add	r7, sp, #0
    7732:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7734:	687b      	ldr	r3, [r7, #4]
    7736:	68db      	ldr	r3, [r3, #12]
    7738:	4618      	mov	r0, r3
    773a:	4b03      	ldr	r3, [pc, #12]	; (7748 <_tcc_timer_is_started+0x1c>)
    773c:	4798      	blx	r3
    773e:	4603      	mov	r3, r0
}
    7740:	4618      	mov	r0, r3
    7742:	3708      	adds	r7, #8
    7744:	46bd      	mov	sp, r7
    7746:	bd80      	pop	{r7, pc}
    7748:	000073cd 	.word	0x000073cd

0000774c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    774c:	b480      	push	{r7}
    774e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7750:	4b02      	ldr	r3, [pc, #8]	; (775c <_tcc_get_timer+0x10>)
}
    7752:	4618      	mov	r0, r3
    7754:	46bd      	mov	sp, r7
    7756:	f85d 7b04 	ldr.w	r7, [sp], #4
    775a:	4770      	bx	lr
    775c:	200000c0 	.word	0x200000c0

00007760 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7760:	b580      	push	{r7, lr}
    7762:	b084      	sub	sp, #16
    7764:	af00      	add	r7, sp, #0
    7766:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7768:	687b      	ldr	r3, [r7, #4]
    776a:	68db      	ldr	r3, [r3, #12]
    776c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    776e:	68f8      	ldr	r0, [r7, #12]
    7770:	4b08      	ldr	r3, [pc, #32]	; (7794 <_tcc_timer_set_irq+0x34>)
    7772:	4798      	blx	r3
    7774:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7776:	68bb      	ldr	r3, [r7, #8]
    7778:	2b00      	cmp	r3, #0
    777a:	d006      	beq.n	778a <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    777c:	68bb      	ldr	r3, [r7, #8]
    777e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7782:	b2db      	uxtb	r3, r3
    7784:	4618      	mov	r0, r3
    7786:	4b04      	ldr	r3, [pc, #16]	; (7798 <_tcc_timer_set_irq+0x38>)
    7788:	4798      	blx	r3
	}
}
    778a:	bf00      	nop
    778c:	3710      	adds	r7, #16
    778e:	46bd      	mov	sp, r7
    7790:	bd80      	pop	{r7, pc}
    7792:	bf00      	nop
    7794:	0000780d 	.word	0x0000780d
    7798:	00003ce9 	.word	0x00003ce9

0000779c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    779c:	b580      	push	{r7, lr}
    779e:	b084      	sub	sp, #16
    77a0:	af00      	add	r7, sp, #0
    77a2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    77a4:	687b      	ldr	r3, [r7, #4]
    77a6:	68db      	ldr	r3, [r3, #12]
    77a8:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    77aa:	68f8      	ldr	r0, [r7, #12]
    77ac:	4b07      	ldr	r3, [pc, #28]	; (77cc <tcc_interrupt_handler+0x30>)
    77ae:	4798      	blx	r3
    77b0:	4603      	mov	r3, r0
    77b2:	2b00      	cmp	r3, #0
    77b4:	d006      	beq.n	77c4 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    77b6:	68f8      	ldr	r0, [r7, #12]
    77b8:	4b05      	ldr	r3, [pc, #20]	; (77d0 <tcc_interrupt_handler+0x34>)
    77ba:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    77bc:	687b      	ldr	r3, [r7, #4]
    77be:	681b      	ldr	r3, [r3, #0]
    77c0:	6878      	ldr	r0, [r7, #4]
    77c2:	4798      	blx	r3
	}
}
    77c4:	bf00      	nop
    77c6:	3710      	adds	r7, #16
    77c8:	46bd      	mov	sp, r7
    77ca:	bd80      	pop	{r7, pc}
    77cc:	00007305 	.word	0x00007305
    77d0:	0000732b 	.word	0x0000732b

000077d4 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    77d4:	b580      	push	{r7, lr}
    77d6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    77d8:	4b03      	ldr	r3, [pc, #12]	; (77e8 <TCC0_0_Handler+0x14>)
    77da:	681b      	ldr	r3, [r3, #0]
    77dc:	4618      	mov	r0, r3
    77de:	4b03      	ldr	r3, [pc, #12]	; (77ec <TCC0_0_Handler+0x18>)
    77e0:	4798      	blx	r3
}
    77e2:	bf00      	nop
    77e4:	bd80      	pop	{r7, pc}
    77e6:	bf00      	nop
    77e8:	20000830 	.word	0x20000830
    77ec:	0000779d 	.word	0x0000779d

000077f0 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    77f0:	b580      	push	{r7, lr}
    77f2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    77f4:	4b03      	ldr	r3, [pc, #12]	; (7804 <TCC1_0_Handler+0x14>)
    77f6:	681b      	ldr	r3, [r3, #0]
    77f8:	4618      	mov	r0, r3
    77fa:	4b03      	ldr	r3, [pc, #12]	; (7808 <TCC1_0_Handler+0x18>)
    77fc:	4798      	blx	r3
}
    77fe:	bf00      	nop
    7800:	bd80      	pop	{r7, pc}
    7802:	bf00      	nop
    7804:	20000834 	.word	0x20000834
    7808:	0000779d 	.word	0x0000779d

0000780c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    780c:	b480      	push	{r7}
    780e:	b085      	sub	sp, #20
    7810:	af00      	add	r7, sp, #0
    7812:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7814:	2300      	movs	r3, #0
    7816:	73fb      	strb	r3, [r7, #15]
    7818:	e015      	b.n	7846 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    781a:	7bfa      	ldrb	r2, [r7, #15]
    781c:	490f      	ldr	r1, [pc, #60]	; (785c <_get_tcc_cfg+0x50>)
    781e:	4613      	mov	r3, r2
    7820:	005b      	lsls	r3, r3, #1
    7822:	4413      	add	r3, r2
    7824:	011b      	lsls	r3, r3, #4
    7826:	440b      	add	r3, r1
    7828:	681a      	ldr	r2, [r3, #0]
    782a:	687b      	ldr	r3, [r7, #4]
    782c:	429a      	cmp	r2, r3
    782e:	d107      	bne.n	7840 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7830:	7bfa      	ldrb	r2, [r7, #15]
    7832:	4613      	mov	r3, r2
    7834:	005b      	lsls	r3, r3, #1
    7836:	4413      	add	r3, r2
    7838:	011b      	lsls	r3, r3, #4
    783a:	4a08      	ldr	r2, [pc, #32]	; (785c <_get_tcc_cfg+0x50>)
    783c:	4413      	add	r3, r2
    783e:	e006      	b.n	784e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7840:	7bfb      	ldrb	r3, [r7, #15]
    7842:	3301      	adds	r3, #1
    7844:	73fb      	strb	r3, [r7, #15]
    7846:	7bfb      	ldrb	r3, [r7, #15]
    7848:	2b01      	cmp	r3, #1
    784a:	d9e6      	bls.n	781a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    784c:	2300      	movs	r3, #0
}
    784e:	4618      	mov	r0, r3
    7850:	3714      	adds	r7, #20
    7852:	46bd      	mov	sp, r7
    7854:	f85d 7b04 	ldr.w	r7, [sp], #4
    7858:	4770      	bx	lr
    785a:	bf00      	nop
    785c:	20000060 	.word	0x20000060

00007860 <__NVIC_EnableIRQ>:
{
    7860:	b480      	push	{r7}
    7862:	b083      	sub	sp, #12
    7864:	af00      	add	r7, sp, #0
    7866:	4603      	mov	r3, r0
    7868:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    786a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    786e:	2b00      	cmp	r3, #0
    7870:	db0b      	blt.n	788a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7872:	4909      	ldr	r1, [pc, #36]	; (7898 <__NVIC_EnableIRQ+0x38>)
    7874:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7878:	095b      	lsrs	r3, r3, #5
    787a:	88fa      	ldrh	r2, [r7, #6]
    787c:	f002 021f 	and.w	r2, r2, #31
    7880:	2001      	movs	r0, #1
    7882:	fa00 f202 	lsl.w	r2, r0, r2
    7886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    788a:	bf00      	nop
    788c:	370c      	adds	r7, #12
    788e:	46bd      	mov	sp, r7
    7890:	f85d 7b04 	ldr.w	r7, [sp], #4
    7894:	4770      	bx	lr
    7896:	bf00      	nop
    7898:	e000e100 	.word	0xe000e100

0000789c <__NVIC_DisableIRQ>:
{
    789c:	b480      	push	{r7}
    789e:	b083      	sub	sp, #12
    78a0:	af00      	add	r7, sp, #0
    78a2:	4603      	mov	r3, r0
    78a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    78a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78aa:	2b00      	cmp	r3, #0
    78ac:	db10      	blt.n	78d0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78ae:	490b      	ldr	r1, [pc, #44]	; (78dc <__NVIC_DisableIRQ+0x40>)
    78b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78b4:	095b      	lsrs	r3, r3, #5
    78b6:	88fa      	ldrh	r2, [r7, #6]
    78b8:	f002 021f 	and.w	r2, r2, #31
    78bc:	2001      	movs	r0, #1
    78be:	fa00 f202 	lsl.w	r2, r0, r2
    78c2:	3320      	adds	r3, #32
    78c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    78c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    78cc:	f3bf 8f6f 	isb	sy
}
    78d0:	bf00      	nop
    78d2:	370c      	adds	r7, #12
    78d4:	46bd      	mov	sp, r7
    78d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    78da:	4770      	bx	lr
    78dc:	e000e100 	.word	0xe000e100

000078e0 <__NVIC_ClearPendingIRQ>:
{
    78e0:	b480      	push	{r7}
    78e2:	b083      	sub	sp, #12
    78e4:	af00      	add	r7, sp, #0
    78e6:	4603      	mov	r3, r0
    78e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    78ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78ee:	2b00      	cmp	r3, #0
    78f0:	db0c      	blt.n	790c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78f2:	4909      	ldr	r1, [pc, #36]	; (7918 <__NVIC_ClearPendingIRQ+0x38>)
    78f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78f8:	095b      	lsrs	r3, r3, #5
    78fa:	88fa      	ldrh	r2, [r7, #6]
    78fc:	f002 021f 	and.w	r2, r2, #31
    7900:	2001      	movs	r0, #1
    7902:	fa00 f202 	lsl.w	r2, r0, r2
    7906:	3360      	adds	r3, #96	; 0x60
    7908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    790c:	bf00      	nop
    790e:	370c      	adds	r7, #12
    7910:	46bd      	mov	sp, r7
    7912:	f85d 7b04 	ldr.w	r7, [sp], #4
    7916:	4770      	bx	lr
    7918:	e000e100 	.word	0xe000e100

0000791c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    791c:	b480      	push	{r7}
    791e:	b083      	sub	sp, #12
    7920:	af00      	add	r7, sp, #0
    7922:	6078      	str	r0, [r7, #4]
    7924:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7926:	bf00      	nop
    7928:	687b      	ldr	r3, [r7, #4]
    792a:	691a      	ldr	r2, [r3, #16]
    792c:	683b      	ldr	r3, [r7, #0]
    792e:	4013      	ands	r3, r2
    7930:	2b00      	cmp	r3, #0
    7932:	d1f9      	bne.n	7928 <hri_tc_wait_for_sync+0xc>
	};
}
    7934:	bf00      	nop
    7936:	370c      	adds	r7, #12
    7938:	46bd      	mov	sp, r7
    793a:	f85d 7b04 	ldr.w	r7, [sp], #4
    793e:	4770      	bx	lr

00007940 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7940:	b480      	push	{r7}
    7942:	b083      	sub	sp, #12
    7944:	af00      	add	r7, sp, #0
    7946:	6078      	str	r0, [r7, #4]
    7948:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    794a:	687b      	ldr	r3, [r7, #4]
    794c:	691a      	ldr	r2, [r3, #16]
    794e:	683b      	ldr	r3, [r7, #0]
    7950:	4013      	ands	r3, r2
    7952:	2b00      	cmp	r3, #0
    7954:	bf14      	ite	ne
    7956:	2301      	movne	r3, #1
    7958:	2300      	moveq	r3, #0
    795a:	b2db      	uxtb	r3, r3
}
    795c:	4618      	mov	r0, r3
    795e:	370c      	adds	r7, #12
    7960:	46bd      	mov	sp, r7
    7962:	f85d 7b04 	ldr.w	r7, [sp], #4
    7966:	4770      	bx	lr

00007968 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7968:	b480      	push	{r7}
    796a:	b083      	sub	sp, #12
    796c:	af00      	add	r7, sp, #0
    796e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7970:	687b      	ldr	r3, [r7, #4]
    7972:	7a9b      	ldrb	r3, [r3, #10]
    7974:	b2db      	uxtb	r3, r3
    7976:	f003 0301 	and.w	r3, r3, #1
    797a:	2b00      	cmp	r3, #0
    797c:	bf14      	ite	ne
    797e:	2301      	movne	r3, #1
    7980:	2300      	moveq	r3, #0
    7982:	b2db      	uxtb	r3, r3
}
    7984:	4618      	mov	r0, r3
    7986:	370c      	adds	r7, #12
    7988:	46bd      	mov	sp, r7
    798a:	f85d 7b04 	ldr.w	r7, [sp], #4
    798e:	4770      	bx	lr

00007990 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7990:	b480      	push	{r7}
    7992:	b083      	sub	sp, #12
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7998:	687b      	ldr	r3, [r7, #4]
    799a:	2201      	movs	r2, #1
    799c:	729a      	strb	r2, [r3, #10]
}
    799e:	bf00      	nop
    79a0:	370c      	adds	r7, #12
    79a2:	46bd      	mov	sp, r7
    79a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    79a8:	4770      	bx	lr

000079aa <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    79aa:	b480      	push	{r7}
    79ac:	b083      	sub	sp, #12
    79ae:	af00      	add	r7, sp, #0
    79b0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    79b2:	687b      	ldr	r3, [r7, #4]
    79b4:	2202      	movs	r2, #2
    79b6:	729a      	strb	r2, [r3, #10]
}
    79b8:	bf00      	nop
    79ba:	370c      	adds	r7, #12
    79bc:	46bd      	mov	sp, r7
    79be:	f85d 7b04 	ldr.w	r7, [sp], #4
    79c2:	4770      	bx	lr

000079c4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    79c4:	b480      	push	{r7}
    79c6:	b083      	sub	sp, #12
    79c8:	af00      	add	r7, sp, #0
    79ca:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    79cc:	687b      	ldr	r3, [r7, #4]
    79ce:	2201      	movs	r2, #1
    79d0:	725a      	strb	r2, [r3, #9]
}
    79d2:	bf00      	nop
    79d4:	370c      	adds	r7, #12
    79d6:	46bd      	mov	sp, r7
    79d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    79dc:	4770      	bx	lr

000079de <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    79de:	b480      	push	{r7}
    79e0:	b083      	sub	sp, #12
    79e2:	af00      	add	r7, sp, #0
    79e4:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	7a5b      	ldrb	r3, [r3, #9]
    79ea:	b2db      	uxtb	r3, r3
    79ec:	085b      	lsrs	r3, r3, #1
    79ee:	f003 0301 	and.w	r3, r3, #1
    79f2:	2b00      	cmp	r3, #0
    79f4:	bf14      	ite	ne
    79f6:	2301      	movne	r3, #1
    79f8:	2300      	moveq	r3, #0
    79fa:	b2db      	uxtb	r3, r3
}
    79fc:	4618      	mov	r0, r3
    79fe:	370c      	adds	r7, #12
    7a00:	46bd      	mov	sp, r7
    7a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a06:	4770      	bx	lr

00007a08 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7a08:	b580      	push	{r7, lr}
    7a0a:	b082      	sub	sp, #8
    7a0c:	af00      	add	r7, sp, #0
    7a0e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7a10:	687b      	ldr	r3, [r7, #4]
    7a12:	681b      	ldr	r3, [r3, #0]
    7a14:	f043 0201 	orr.w	r2, r3, #1
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7a1c:	2101      	movs	r1, #1
    7a1e:	6878      	ldr	r0, [r7, #4]
    7a20:	4b02      	ldr	r3, [pc, #8]	; (7a2c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7a22:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a24:	bf00      	nop
    7a26:	3708      	adds	r7, #8
    7a28:	46bd      	mov	sp, r7
    7a2a:	bd80      	pop	{r7, pc}
    7a2c:	0000791d 	.word	0x0000791d

00007a30 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7a30:	b580      	push	{r7, lr}
    7a32:	b082      	sub	sp, #8
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7a38:	687b      	ldr	r3, [r7, #4]
    7a3a:	681b      	ldr	r3, [r3, #0]
    7a3c:	f043 0202 	orr.w	r2, r3, #2
    7a40:	687b      	ldr	r3, [r7, #4]
    7a42:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a44:	2103      	movs	r1, #3
    7a46:	6878      	ldr	r0, [r7, #4]
    7a48:	4b02      	ldr	r3, [pc, #8]	; (7a54 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7a4a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a4c:	bf00      	nop
    7a4e:	3708      	adds	r7, #8
    7a50:	46bd      	mov	sp, r7
    7a52:	bd80      	pop	{r7, pc}
    7a54:	0000791d 	.word	0x0000791d

00007a58 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7a58:	b580      	push	{r7, lr}
    7a5a:	b084      	sub	sp, #16
    7a5c:	af00      	add	r7, sp, #0
    7a5e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a60:	2103      	movs	r1, #3
    7a62:	6878      	ldr	r0, [r7, #4]
    7a64:	4b09      	ldr	r3, [pc, #36]	; (7a8c <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7a66:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a68:	687b      	ldr	r3, [r7, #4]
    7a6a:	681b      	ldr	r3, [r3, #0]
    7a6c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7a6e:	68fb      	ldr	r3, [r7, #12]
    7a70:	085b      	lsrs	r3, r3, #1
    7a72:	f003 0301 	and.w	r3, r3, #1
    7a76:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7a78:	68fb      	ldr	r3, [r7, #12]
    7a7a:	2b00      	cmp	r3, #0
    7a7c:	bf14      	ite	ne
    7a7e:	2301      	movne	r3, #1
    7a80:	2300      	moveq	r3, #0
    7a82:	b2db      	uxtb	r3, r3
}
    7a84:	4618      	mov	r0, r3
    7a86:	3710      	adds	r7, #16
    7a88:	46bd      	mov	sp, r7
    7a8a:	bd80      	pop	{r7, pc}
    7a8c:	0000791d 	.word	0x0000791d

00007a90 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7a90:	b580      	push	{r7, lr}
    7a92:	b082      	sub	sp, #8
    7a94:	af00      	add	r7, sp, #0
    7a96:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7a98:	687b      	ldr	r3, [r7, #4]
    7a9a:	681b      	ldr	r3, [r3, #0]
    7a9c:	f023 0202 	bic.w	r2, r3, #2
    7aa0:	687b      	ldr	r3, [r7, #4]
    7aa2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7aa4:	2103      	movs	r1, #3
    7aa6:	6878      	ldr	r0, [r7, #4]
    7aa8:	4b02      	ldr	r3, [pc, #8]	; (7ab4 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7aaa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7aac:	bf00      	nop
    7aae:	3708      	adds	r7, #8
    7ab0:	46bd      	mov	sp, r7
    7ab2:	bd80      	pop	{r7, pc}
    7ab4:	0000791d 	.word	0x0000791d

00007ab8 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7ab8:	b480      	push	{r7}
    7aba:	b085      	sub	sp, #20
    7abc:	af00      	add	r7, sp, #0
    7abe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7ac0:	687b      	ldr	r3, [r7, #4]
    7ac2:	681b      	ldr	r3, [r3, #0]
    7ac4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7ac6:	68fb      	ldr	r3, [r7, #12]
    7ac8:	089b      	lsrs	r3, r3, #2
    7aca:	f003 0303 	and.w	r3, r3, #3
    7ace:	60fb      	str	r3, [r7, #12]
	return tmp;
    7ad0:	68fb      	ldr	r3, [r7, #12]
}
    7ad2:	4618      	mov	r0, r3
    7ad4:	3714      	adds	r7, #20
    7ad6:	46bd      	mov	sp, r7
    7ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7adc:	4770      	bx	lr
	...

00007ae0 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7ae0:	b580      	push	{r7, lr}
    7ae2:	b084      	sub	sp, #16
    7ae4:	af00      	add	r7, sp, #0
    7ae6:	6078      	str	r0, [r7, #4]
    7ae8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7aea:	2103      	movs	r1, #3
    7aec:	6878      	ldr	r0, [r7, #4]
    7aee:	4b07      	ldr	r3, [pc, #28]	; (7b0c <hri_tc_get_CTRLA_reg+0x2c>)
    7af0:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7af2:	687b      	ldr	r3, [r7, #4]
    7af4:	681b      	ldr	r3, [r3, #0]
    7af6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7af8:	68fa      	ldr	r2, [r7, #12]
    7afa:	683b      	ldr	r3, [r7, #0]
    7afc:	4013      	ands	r3, r2
    7afe:	60fb      	str	r3, [r7, #12]
	return tmp;
    7b00:	68fb      	ldr	r3, [r7, #12]
}
    7b02:	4618      	mov	r0, r3
    7b04:	3710      	adds	r7, #16
    7b06:	46bd      	mov	sp, r7
    7b08:	bd80      	pop	{r7, pc}
    7b0a:	bf00      	nop
    7b0c:	0000791d 	.word	0x0000791d

00007b10 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7b10:	b580      	push	{r7, lr}
    7b12:	b082      	sub	sp, #8
    7b14:	af00      	add	r7, sp, #0
    7b16:	6078      	str	r0, [r7, #4]
    7b18:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7b1a:	687b      	ldr	r3, [r7, #4]
    7b1c:	683a      	ldr	r2, [r7, #0]
    7b1e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7b20:	2103      	movs	r1, #3
    7b22:	6878      	ldr	r0, [r7, #4]
    7b24:	4b02      	ldr	r3, [pc, #8]	; (7b30 <hri_tc_write_CTRLA_reg+0x20>)
    7b26:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b28:	bf00      	nop
    7b2a:	3708      	adds	r7, #8
    7b2c:	46bd      	mov	sp, r7
    7b2e:	bd80      	pop	{r7, pc}
    7b30:	0000791d 	.word	0x0000791d

00007b34 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7b34:	b480      	push	{r7}
    7b36:	b083      	sub	sp, #12
    7b38:	af00      	add	r7, sp, #0
    7b3a:	6078      	str	r0, [r7, #4]
    7b3c:	460b      	mov	r3, r1
    7b3e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7b40:	687b      	ldr	r3, [r7, #4]
    7b42:	887a      	ldrh	r2, [r7, #2]
    7b44:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7b46:	bf00      	nop
    7b48:	370c      	adds	r7, #12
    7b4a:	46bd      	mov	sp, r7
    7b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b50:	4770      	bx	lr

00007b52 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7b52:	b480      	push	{r7}
    7b54:	b083      	sub	sp, #12
    7b56:	af00      	add	r7, sp, #0
    7b58:	6078      	str	r0, [r7, #4]
    7b5a:	460b      	mov	r3, r1
    7b5c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7b5e:	687b      	ldr	r3, [r7, #4]
    7b60:	78fa      	ldrb	r2, [r7, #3]
    7b62:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7b64:	bf00      	nop
    7b66:	370c      	adds	r7, #12
    7b68:	46bd      	mov	sp, r7
    7b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b6e:	4770      	bx	lr

00007b70 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7b70:	b480      	push	{r7}
    7b72:	b083      	sub	sp, #12
    7b74:	af00      	add	r7, sp, #0
    7b76:	6078      	str	r0, [r7, #4]
    7b78:	460b      	mov	r3, r1
    7b7a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	78fa      	ldrb	r2, [r7, #3]
    7b80:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7b82:	bf00      	nop
    7b84:	370c      	adds	r7, #12
    7b86:	46bd      	mov	sp, r7
    7b88:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b8c:	4770      	bx	lr
	...

00007b90 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7b90:	b580      	push	{r7, lr}
    7b92:	b082      	sub	sp, #8
    7b94:	af00      	add	r7, sp, #0
    7b96:	6078      	str	r0, [r7, #4]
    7b98:	460b      	mov	r3, r1
    7b9a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7b9c:	687b      	ldr	r3, [r7, #4]
    7b9e:	78fa      	ldrb	r2, [r7, #3]
    7ba0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7ba2:	2120      	movs	r1, #32
    7ba4:	6878      	ldr	r0, [r7, #4]
    7ba6:	4b03      	ldr	r3, [pc, #12]	; (7bb4 <hri_tccount8_write_PER_reg+0x24>)
    7ba8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7baa:	bf00      	nop
    7bac:	3708      	adds	r7, #8
    7bae:	46bd      	mov	sp, r7
    7bb0:	bd80      	pop	{r7, pc}
    7bb2:	bf00      	nop
    7bb4:	0000791d 	.word	0x0000791d

00007bb8 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7bb8:	b580      	push	{r7, lr}
    7bba:	b082      	sub	sp, #8
    7bbc:	af00      	add	r7, sp, #0
    7bbe:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7bc0:	2120      	movs	r1, #32
    7bc2:	6878      	ldr	r0, [r7, #4]
    7bc4:	4b04      	ldr	r3, [pc, #16]	; (7bd8 <hri_tccount8_read_PER_reg+0x20>)
    7bc6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7bc8:	687b      	ldr	r3, [r7, #4]
    7bca:	7edb      	ldrb	r3, [r3, #27]
    7bcc:	b2db      	uxtb	r3, r3
}
    7bce:	4618      	mov	r0, r3
    7bd0:	3708      	adds	r7, #8
    7bd2:	46bd      	mov	sp, r7
    7bd4:	bd80      	pop	{r7, pc}
    7bd6:	bf00      	nop
    7bd8:	0000791d 	.word	0x0000791d

00007bdc <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7bdc:	b580      	push	{r7, lr}
    7bde:	b082      	sub	sp, #8
    7be0:	af00      	add	r7, sp, #0
    7be2:	6078      	str	r0, [r7, #4]
    7be4:	460b      	mov	r3, r1
    7be6:	70fb      	strb	r3, [r7, #3]
    7be8:	4613      	mov	r3, r2
    7bea:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7bec:	78fb      	ldrb	r3, [r7, #3]
    7bee:	687a      	ldr	r2, [r7, #4]
    7bf0:	4413      	add	r3, r2
    7bf2:	78ba      	ldrb	r2, [r7, #2]
    7bf4:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7bf6:	21c0      	movs	r1, #192	; 0xc0
    7bf8:	6878      	ldr	r0, [r7, #4]
    7bfa:	4b03      	ldr	r3, [pc, #12]	; (7c08 <hri_tccount8_write_CC_reg+0x2c>)
    7bfc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7bfe:	bf00      	nop
    7c00:	3708      	adds	r7, #8
    7c02:	46bd      	mov	sp, r7
    7c04:	bd80      	pop	{r7, pc}
    7c06:	bf00      	nop
    7c08:	0000791d 	.word	0x0000791d

00007c0c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7c0c:	b580      	push	{r7, lr}
    7c0e:	b082      	sub	sp, #8
    7c10:	af00      	add	r7, sp, #0
    7c12:	6078      	str	r0, [r7, #4]
    7c14:	460b      	mov	r3, r1
    7c16:	70fb      	strb	r3, [r7, #3]
    7c18:	4613      	mov	r3, r2
    7c1a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7c1c:	78fb      	ldrb	r3, [r7, #3]
    7c1e:	687a      	ldr	r2, [r7, #4]
    7c20:	330c      	adds	r3, #12
    7c22:	005b      	lsls	r3, r3, #1
    7c24:	4413      	add	r3, r2
    7c26:	883a      	ldrh	r2, [r7, #0]
    7c28:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c2a:	21c0      	movs	r1, #192	; 0xc0
    7c2c:	6878      	ldr	r0, [r7, #4]
    7c2e:	4b03      	ldr	r3, [pc, #12]	; (7c3c <hri_tccount16_write_CC_reg+0x30>)
    7c30:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7c32:	bf00      	nop
    7c34:	3708      	adds	r7, #8
    7c36:	46bd      	mov	sp, r7
    7c38:	bd80      	pop	{r7, pc}
    7c3a:	bf00      	nop
    7c3c:	0000791d 	.word	0x0000791d

00007c40 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7c40:	b580      	push	{r7, lr}
    7c42:	b082      	sub	sp, #8
    7c44:	af00      	add	r7, sp, #0
    7c46:	6078      	str	r0, [r7, #4]
    7c48:	460b      	mov	r3, r1
    7c4a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c4c:	21c0      	movs	r1, #192	; 0xc0
    7c4e:	6878      	ldr	r0, [r7, #4]
    7c50:	4b06      	ldr	r3, [pc, #24]	; (7c6c <hri_tccount16_read_CC_reg+0x2c>)
    7c52:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7c54:	78fb      	ldrb	r3, [r7, #3]
    7c56:	687a      	ldr	r2, [r7, #4]
    7c58:	330c      	adds	r3, #12
    7c5a:	005b      	lsls	r3, r3, #1
    7c5c:	4413      	add	r3, r2
    7c5e:	889b      	ldrh	r3, [r3, #4]
    7c60:	b29b      	uxth	r3, r3
}
    7c62:	4618      	mov	r0, r3
    7c64:	3708      	adds	r7, #8
    7c66:	46bd      	mov	sp, r7
    7c68:	bd80      	pop	{r7, pc}
    7c6a:	bf00      	nop
    7c6c:	0000791d 	.word	0x0000791d

00007c70 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7c70:	b580      	push	{r7, lr}
    7c72:	b084      	sub	sp, #16
    7c74:	af00      	add	r7, sp, #0
    7c76:	60f8      	str	r0, [r7, #12]
    7c78:	460b      	mov	r3, r1
    7c7a:	607a      	str	r2, [r7, #4]
    7c7c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7c7e:	7afb      	ldrb	r3, [r7, #11]
    7c80:	68fa      	ldr	r2, [r7, #12]
    7c82:	3306      	adds	r3, #6
    7c84:	009b      	lsls	r3, r3, #2
    7c86:	4413      	add	r3, r2
    7c88:	687a      	ldr	r2, [r7, #4]
    7c8a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c8c:	21c0      	movs	r1, #192	; 0xc0
    7c8e:	68f8      	ldr	r0, [r7, #12]
    7c90:	4b02      	ldr	r3, [pc, #8]	; (7c9c <hri_tccount32_write_CC_reg+0x2c>)
    7c92:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7c94:	bf00      	nop
    7c96:	3710      	adds	r7, #16
    7c98:	46bd      	mov	sp, r7
    7c9a:	bd80      	pop	{r7, pc}
    7c9c:	0000791d 	.word	0x0000791d

00007ca0 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7ca0:	b580      	push	{r7, lr}
    7ca2:	b082      	sub	sp, #8
    7ca4:	af00      	add	r7, sp, #0
    7ca6:	6078      	str	r0, [r7, #4]
    7ca8:	460b      	mov	r3, r1
    7caa:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7cac:	21c0      	movs	r1, #192	; 0xc0
    7cae:	6878      	ldr	r0, [r7, #4]
    7cb0:	4b05      	ldr	r3, [pc, #20]	; (7cc8 <hri_tccount32_read_CC_reg+0x28>)
    7cb2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7cb4:	78fb      	ldrb	r3, [r7, #3]
    7cb6:	687a      	ldr	r2, [r7, #4]
    7cb8:	3306      	adds	r3, #6
    7cba:	009b      	lsls	r3, r3, #2
    7cbc:	4413      	add	r3, r2
    7cbe:	685b      	ldr	r3, [r3, #4]
}
    7cc0:	4618      	mov	r0, r3
    7cc2:	3708      	adds	r7, #8
    7cc4:	46bd      	mov	sp, r7
    7cc6:	bd80      	pop	{r7, pc}
    7cc8:	0000791d 	.word	0x0000791d

00007ccc <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7ccc:	b580      	push	{r7, lr}
    7cce:	b084      	sub	sp, #16
    7cd0:	af00      	add	r7, sp, #0
    7cd2:	6078      	str	r0, [r7, #4]
    7cd4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7cd6:	6838      	ldr	r0, [r7, #0]
    7cd8:	4b93      	ldr	r3, [pc, #588]	; (7f28 <_tc_timer_init+0x25c>)
    7cda:	4798      	blx	r3
    7cdc:	4603      	mov	r3, r0
    7cde:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7ce0:	687b      	ldr	r3, [r7, #4]
    7ce2:	683a      	ldr	r2, [r7, #0]
    7ce4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7ce6:	22a4      	movs	r2, #164	; 0xa4
    7ce8:	4990      	ldr	r1, [pc, #576]	; (7f2c <_tc_timer_init+0x260>)
    7cea:	2001      	movs	r0, #1
    7cec:	4b90      	ldr	r3, [pc, #576]	; (7f30 <_tc_timer_init+0x264>)
    7cee:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7cf0:	2101      	movs	r1, #1
    7cf2:	6838      	ldr	r0, [r7, #0]
    7cf4:	4b8f      	ldr	r3, [pc, #572]	; (7f34 <_tc_timer_init+0x268>)
    7cf6:	4798      	blx	r3
    7cf8:	4603      	mov	r3, r0
    7cfa:	f083 0301 	eor.w	r3, r3, #1
    7cfe:	b2db      	uxtb	r3, r3
    7d00:	2b00      	cmp	r3, #0
    7d02:	d011      	beq.n	7d28 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7d04:	2102      	movs	r1, #2
    7d06:	6838      	ldr	r0, [r7, #0]
    7d08:	4b8b      	ldr	r3, [pc, #556]	; (7f38 <_tc_timer_init+0x26c>)
    7d0a:	4798      	blx	r3
    7d0c:	4603      	mov	r3, r0
    7d0e:	2b00      	cmp	r3, #0
    7d10:	d006      	beq.n	7d20 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7d12:	6838      	ldr	r0, [r7, #0]
    7d14:	4b89      	ldr	r3, [pc, #548]	; (7f3c <_tc_timer_init+0x270>)
    7d16:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7d18:	2102      	movs	r1, #2
    7d1a:	6838      	ldr	r0, [r7, #0]
    7d1c:	4b88      	ldr	r3, [pc, #544]	; (7f40 <_tc_timer_init+0x274>)
    7d1e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7d20:	2101      	movs	r1, #1
    7d22:	6838      	ldr	r0, [r7, #0]
    7d24:	4b87      	ldr	r3, [pc, #540]	; (7f44 <_tc_timer_init+0x278>)
    7d26:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7d28:	2101      	movs	r1, #1
    7d2a:	6838      	ldr	r0, [r7, #0]
    7d2c:	4b84      	ldr	r3, [pc, #528]	; (7f40 <_tc_timer_init+0x274>)
    7d2e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7d30:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d34:	4984      	ldr	r1, [pc, #528]	; (7f48 <_tc_timer_init+0x27c>)
    7d36:	4613      	mov	r3, r2
    7d38:	009b      	lsls	r3, r3, #2
    7d3a:	4413      	add	r3, r2
    7d3c:	009b      	lsls	r3, r3, #2
    7d3e:	440b      	add	r3, r1
    7d40:	3304      	adds	r3, #4
    7d42:	681b      	ldr	r3, [r3, #0]
    7d44:	4619      	mov	r1, r3
    7d46:	6838      	ldr	r0, [r7, #0]
    7d48:	4b7e      	ldr	r3, [pc, #504]	; (7f44 <_tc_timer_init+0x278>)
    7d4a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7d4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d50:	497d      	ldr	r1, [pc, #500]	; (7f48 <_tc_timer_init+0x27c>)
    7d52:	4613      	mov	r3, r2
    7d54:	009b      	lsls	r3, r3, #2
    7d56:	4413      	add	r3, r2
    7d58:	009b      	lsls	r3, r3, #2
    7d5a:	440b      	add	r3, r1
    7d5c:	330a      	adds	r3, #10
    7d5e:	781b      	ldrb	r3, [r3, #0]
    7d60:	4619      	mov	r1, r3
    7d62:	6838      	ldr	r0, [r7, #0]
    7d64:	4b79      	ldr	r3, [pc, #484]	; (7f4c <_tc_timer_init+0x280>)
    7d66:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7d68:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d6c:	4976      	ldr	r1, [pc, #472]	; (7f48 <_tc_timer_init+0x27c>)
    7d6e:	4613      	mov	r3, r2
    7d70:	009b      	lsls	r3, r3, #2
    7d72:	4413      	add	r3, r2
    7d74:	009b      	lsls	r3, r3, #2
    7d76:	440b      	add	r3, r1
    7d78:	3308      	adds	r3, #8
    7d7a:	881b      	ldrh	r3, [r3, #0]
    7d7c:	4619      	mov	r1, r3
    7d7e:	6838      	ldr	r0, [r7, #0]
    7d80:	4b73      	ldr	r3, [pc, #460]	; (7f50 <_tc_timer_init+0x284>)
    7d82:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7d84:	2101      	movs	r1, #1
    7d86:	6838      	ldr	r0, [r7, #0]
    7d88:	4b72      	ldr	r3, [pc, #456]	; (7f54 <_tc_timer_init+0x288>)
    7d8a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7d8c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d90:	496d      	ldr	r1, [pc, #436]	; (7f48 <_tc_timer_init+0x27c>)
    7d92:	4613      	mov	r3, r2
    7d94:	009b      	lsls	r3, r3, #2
    7d96:	4413      	add	r3, r2
    7d98:	009b      	lsls	r3, r3, #2
    7d9a:	440b      	add	r3, r1
    7d9c:	3304      	adds	r3, #4
    7d9e:	681b      	ldr	r3, [r3, #0]
    7da0:	f003 030c 	and.w	r3, r3, #12
    7da4:	2b08      	cmp	r3, #8
    7da6:	d11e      	bne.n	7de6 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7da8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dac:	4966      	ldr	r1, [pc, #408]	; (7f48 <_tc_timer_init+0x27c>)
    7dae:	4613      	mov	r3, r2
    7db0:	009b      	lsls	r3, r3, #2
    7db2:	4413      	add	r3, r2
    7db4:	009b      	lsls	r3, r3, #2
    7db6:	440b      	add	r3, r1
    7db8:	330c      	adds	r3, #12
    7dba:	681b      	ldr	r3, [r3, #0]
    7dbc:	461a      	mov	r2, r3
    7dbe:	2100      	movs	r1, #0
    7dc0:	6838      	ldr	r0, [r7, #0]
    7dc2:	4b65      	ldr	r3, [pc, #404]	; (7f58 <_tc_timer_init+0x28c>)
    7dc4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7dc6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dca:	495f      	ldr	r1, [pc, #380]	; (7f48 <_tc_timer_init+0x27c>)
    7dcc:	4613      	mov	r3, r2
    7dce:	009b      	lsls	r3, r3, #2
    7dd0:	4413      	add	r3, r2
    7dd2:	009b      	lsls	r3, r3, #2
    7dd4:	440b      	add	r3, r1
    7dd6:	3310      	adds	r3, #16
    7dd8:	681b      	ldr	r3, [r3, #0]
    7dda:	461a      	mov	r2, r3
    7ddc:	2101      	movs	r1, #1
    7dde:	6838      	ldr	r0, [r7, #0]
    7de0:	4b5d      	ldr	r3, [pc, #372]	; (7f58 <_tc_timer_init+0x28c>)
    7de2:	4798      	blx	r3
    7de4:	e06a      	b.n	7ebc <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7de6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dea:	4957      	ldr	r1, [pc, #348]	; (7f48 <_tc_timer_init+0x27c>)
    7dec:	4613      	mov	r3, r2
    7dee:	009b      	lsls	r3, r3, #2
    7df0:	4413      	add	r3, r2
    7df2:	009b      	lsls	r3, r3, #2
    7df4:	440b      	add	r3, r1
    7df6:	3304      	adds	r3, #4
    7df8:	681b      	ldr	r3, [r3, #0]
    7dfa:	f003 030c 	and.w	r3, r3, #12
    7dfe:	2b00      	cmp	r3, #0
    7e00:	d120      	bne.n	7e44 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7e02:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e06:	4950      	ldr	r1, [pc, #320]	; (7f48 <_tc_timer_init+0x27c>)
    7e08:	4613      	mov	r3, r2
    7e0a:	009b      	lsls	r3, r3, #2
    7e0c:	4413      	add	r3, r2
    7e0e:	009b      	lsls	r3, r3, #2
    7e10:	440b      	add	r3, r1
    7e12:	330c      	adds	r3, #12
    7e14:	681b      	ldr	r3, [r3, #0]
    7e16:	b29b      	uxth	r3, r3
    7e18:	461a      	mov	r2, r3
    7e1a:	2100      	movs	r1, #0
    7e1c:	6838      	ldr	r0, [r7, #0]
    7e1e:	4b4f      	ldr	r3, [pc, #316]	; (7f5c <_tc_timer_init+0x290>)
    7e20:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7e22:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e26:	4948      	ldr	r1, [pc, #288]	; (7f48 <_tc_timer_init+0x27c>)
    7e28:	4613      	mov	r3, r2
    7e2a:	009b      	lsls	r3, r3, #2
    7e2c:	4413      	add	r3, r2
    7e2e:	009b      	lsls	r3, r3, #2
    7e30:	440b      	add	r3, r1
    7e32:	3310      	adds	r3, #16
    7e34:	681b      	ldr	r3, [r3, #0]
    7e36:	b29b      	uxth	r3, r3
    7e38:	461a      	mov	r2, r3
    7e3a:	2101      	movs	r1, #1
    7e3c:	6838      	ldr	r0, [r7, #0]
    7e3e:	4b47      	ldr	r3, [pc, #284]	; (7f5c <_tc_timer_init+0x290>)
    7e40:	4798      	blx	r3
    7e42:	e03b      	b.n	7ebc <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7e44:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e48:	493f      	ldr	r1, [pc, #252]	; (7f48 <_tc_timer_init+0x27c>)
    7e4a:	4613      	mov	r3, r2
    7e4c:	009b      	lsls	r3, r3, #2
    7e4e:	4413      	add	r3, r2
    7e50:	009b      	lsls	r3, r3, #2
    7e52:	440b      	add	r3, r1
    7e54:	3304      	adds	r3, #4
    7e56:	681b      	ldr	r3, [r3, #0]
    7e58:	f003 030c 	and.w	r3, r3, #12
    7e5c:	2b04      	cmp	r3, #4
    7e5e:	d12d      	bne.n	7ebc <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7e60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e64:	4938      	ldr	r1, [pc, #224]	; (7f48 <_tc_timer_init+0x27c>)
    7e66:	4613      	mov	r3, r2
    7e68:	009b      	lsls	r3, r3, #2
    7e6a:	4413      	add	r3, r2
    7e6c:	009b      	lsls	r3, r3, #2
    7e6e:	440b      	add	r3, r1
    7e70:	330c      	adds	r3, #12
    7e72:	681b      	ldr	r3, [r3, #0]
    7e74:	b2db      	uxtb	r3, r3
    7e76:	461a      	mov	r2, r3
    7e78:	2100      	movs	r1, #0
    7e7a:	6838      	ldr	r0, [r7, #0]
    7e7c:	4b38      	ldr	r3, [pc, #224]	; (7f60 <_tc_timer_init+0x294>)
    7e7e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7e80:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e84:	4930      	ldr	r1, [pc, #192]	; (7f48 <_tc_timer_init+0x27c>)
    7e86:	4613      	mov	r3, r2
    7e88:	009b      	lsls	r3, r3, #2
    7e8a:	4413      	add	r3, r2
    7e8c:	009b      	lsls	r3, r3, #2
    7e8e:	440b      	add	r3, r1
    7e90:	3310      	adds	r3, #16
    7e92:	681b      	ldr	r3, [r3, #0]
    7e94:	b2db      	uxtb	r3, r3
    7e96:	461a      	mov	r2, r3
    7e98:	2101      	movs	r1, #1
    7e9a:	6838      	ldr	r0, [r7, #0]
    7e9c:	4b30      	ldr	r3, [pc, #192]	; (7f60 <_tc_timer_init+0x294>)
    7e9e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7ea0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ea4:	4928      	ldr	r1, [pc, #160]	; (7f48 <_tc_timer_init+0x27c>)
    7ea6:	4613      	mov	r3, r2
    7ea8:	009b      	lsls	r3, r3, #2
    7eaa:	4413      	add	r3, r2
    7eac:	009b      	lsls	r3, r3, #2
    7eae:	440b      	add	r3, r1
    7eb0:	330b      	adds	r3, #11
    7eb2:	781b      	ldrb	r3, [r3, #0]
    7eb4:	4619      	mov	r1, r3
    7eb6:	6838      	ldr	r0, [r7, #0]
    7eb8:	4b2a      	ldr	r3, [pc, #168]	; (7f64 <_tc_timer_init+0x298>)
    7eba:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7ebc:	6838      	ldr	r0, [r7, #0]
    7ebe:	4b2a      	ldr	r3, [pc, #168]	; (7f68 <_tc_timer_init+0x29c>)
    7ec0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7ec2:	6879      	ldr	r1, [r7, #4]
    7ec4:	6838      	ldr	r0, [r7, #0]
    7ec6:	4b29      	ldr	r3, [pc, #164]	; (7f6c <_tc_timer_init+0x2a0>)
    7ec8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7eca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ece:	491e      	ldr	r1, [pc, #120]	; (7f48 <_tc_timer_init+0x27c>)
    7ed0:	4613      	mov	r3, r2
    7ed2:	009b      	lsls	r3, r3, #2
    7ed4:	4413      	add	r3, r2
    7ed6:	009b      	lsls	r3, r3, #2
    7ed8:	440b      	add	r3, r1
    7eda:	3302      	adds	r3, #2
    7edc:	f9b3 3000 	ldrsh.w	r3, [r3]
    7ee0:	4618      	mov	r0, r3
    7ee2:	4b23      	ldr	r3, [pc, #140]	; (7f70 <_tc_timer_init+0x2a4>)
    7ee4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7ee6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7eea:	4917      	ldr	r1, [pc, #92]	; (7f48 <_tc_timer_init+0x27c>)
    7eec:	4613      	mov	r3, r2
    7eee:	009b      	lsls	r3, r3, #2
    7ef0:	4413      	add	r3, r2
    7ef2:	009b      	lsls	r3, r3, #2
    7ef4:	440b      	add	r3, r1
    7ef6:	3302      	adds	r3, #2
    7ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
    7efc:	4618      	mov	r0, r3
    7efe:	4b1d      	ldr	r3, [pc, #116]	; (7f74 <_tc_timer_init+0x2a8>)
    7f00:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7f02:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f06:	4910      	ldr	r1, [pc, #64]	; (7f48 <_tc_timer_init+0x27c>)
    7f08:	4613      	mov	r3, r2
    7f0a:	009b      	lsls	r3, r3, #2
    7f0c:	4413      	add	r3, r2
    7f0e:	009b      	lsls	r3, r3, #2
    7f10:	440b      	add	r3, r1
    7f12:	3302      	adds	r3, #2
    7f14:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f18:	4618      	mov	r0, r3
    7f1a:	4b17      	ldr	r3, [pc, #92]	; (7f78 <_tc_timer_init+0x2ac>)
    7f1c:	4798      	blx	r3

	return ERR_NONE;
    7f1e:	2300      	movs	r3, #0
}
    7f20:	4618      	mov	r0, r3
    7f22:	3710      	adds	r7, #16
    7f24:	46bd      	mov	sp, r7
    7f26:	bd80      	pop	{r7, pc}
    7f28:	0000855d 	.word	0x0000855d
    7f2c:	0000f024 	.word	0x0000f024
    7f30:	0000349d 	.word	0x0000349d
    7f34:	00007941 	.word	0x00007941
    7f38:	00007ae1 	.word	0x00007ae1
    7f3c:	00007a91 	.word	0x00007a91
    7f40:	0000791d 	.word	0x0000791d
    7f44:	00007b11 	.word	0x00007b11
    7f48:	200000e0 	.word	0x200000e0
    7f4c:	00007b71 	.word	0x00007b71
    7f50:	00007b35 	.word	0x00007b35
    7f54:	00007b53 	.word	0x00007b53
    7f58:	00007c71 	.word	0x00007c71
    7f5c:	00007c0d 	.word	0x00007c0d
    7f60:	00007bdd 	.word	0x00007bdd
    7f64:	00007b91 	.word	0x00007b91
    7f68:	000079c5 	.word	0x000079c5
    7f6c:	000085c5 	.word	0x000085c5
    7f70:	0000789d 	.word	0x0000789d
    7f74:	000078e1 	.word	0x000078e1
    7f78:	00007861 	.word	0x00007861

00007f7c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7f7c:	b580      	push	{r7, lr}
    7f7e:	b084      	sub	sp, #16
    7f80:	af00      	add	r7, sp, #0
    7f82:	6078      	str	r0, [r7, #4]
    7f84:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7f86:	6838      	ldr	r0, [r7, #0]
    7f88:	4b73      	ldr	r3, [pc, #460]	; (8158 <_pwm_init+0x1dc>)
    7f8a:	4798      	blx	r3
    7f8c:	4603      	mov	r3, r0
    7f8e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7f90:	687b      	ldr	r3, [r7, #4]
    7f92:	683a      	ldr	r2, [r7, #0]
    7f94:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7f96:	2101      	movs	r1, #1
    7f98:	6838      	ldr	r0, [r7, #0]
    7f9a:	4b70      	ldr	r3, [pc, #448]	; (815c <_pwm_init+0x1e0>)
    7f9c:	4798      	blx	r3
    7f9e:	4603      	mov	r3, r0
    7fa0:	f083 0301 	eor.w	r3, r3, #1
    7fa4:	b2db      	uxtb	r3, r3
    7fa6:	2b00      	cmp	r3, #0
    7fa8:	d011      	beq.n	7fce <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7faa:	2102      	movs	r1, #2
    7fac:	6838      	ldr	r0, [r7, #0]
    7fae:	4b6c      	ldr	r3, [pc, #432]	; (8160 <_pwm_init+0x1e4>)
    7fb0:	4798      	blx	r3
    7fb2:	4603      	mov	r3, r0
    7fb4:	2b00      	cmp	r3, #0
    7fb6:	d006      	beq.n	7fc6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7fb8:	6838      	ldr	r0, [r7, #0]
    7fba:	4b6a      	ldr	r3, [pc, #424]	; (8164 <_pwm_init+0x1e8>)
    7fbc:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7fbe:	2102      	movs	r1, #2
    7fc0:	6838      	ldr	r0, [r7, #0]
    7fc2:	4b69      	ldr	r3, [pc, #420]	; (8168 <_pwm_init+0x1ec>)
    7fc4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7fc6:	2101      	movs	r1, #1
    7fc8:	6838      	ldr	r0, [r7, #0]
    7fca:	4b68      	ldr	r3, [pc, #416]	; (816c <_pwm_init+0x1f0>)
    7fcc:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7fce:	2101      	movs	r1, #1
    7fd0:	6838      	ldr	r0, [r7, #0]
    7fd2:	4b65      	ldr	r3, [pc, #404]	; (8168 <_pwm_init+0x1ec>)
    7fd4:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7fd6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7fda:	4965      	ldr	r1, [pc, #404]	; (8170 <_pwm_init+0x1f4>)
    7fdc:	4613      	mov	r3, r2
    7fde:	009b      	lsls	r3, r3, #2
    7fe0:	4413      	add	r3, r2
    7fe2:	009b      	lsls	r3, r3, #2
    7fe4:	440b      	add	r3, r1
    7fe6:	3304      	adds	r3, #4
    7fe8:	681b      	ldr	r3, [r3, #0]
    7fea:	4619      	mov	r1, r3
    7fec:	6838      	ldr	r0, [r7, #0]
    7fee:	4b5f      	ldr	r3, [pc, #380]	; (816c <_pwm_init+0x1f0>)
    7ff0:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7ff2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ff6:	495e      	ldr	r1, [pc, #376]	; (8170 <_pwm_init+0x1f4>)
    7ff8:	4613      	mov	r3, r2
    7ffa:	009b      	lsls	r3, r3, #2
    7ffc:	4413      	add	r3, r2
    7ffe:	009b      	lsls	r3, r3, #2
    8000:	440b      	add	r3, r1
    8002:	330a      	adds	r3, #10
    8004:	781b      	ldrb	r3, [r3, #0]
    8006:	4619      	mov	r1, r3
    8008:	6838      	ldr	r0, [r7, #0]
    800a:	4b5a      	ldr	r3, [pc, #360]	; (8174 <_pwm_init+0x1f8>)
    800c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    800e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8012:	4957      	ldr	r1, [pc, #348]	; (8170 <_pwm_init+0x1f4>)
    8014:	4613      	mov	r3, r2
    8016:	009b      	lsls	r3, r3, #2
    8018:	4413      	add	r3, r2
    801a:	009b      	lsls	r3, r3, #2
    801c:	440b      	add	r3, r1
    801e:	3308      	adds	r3, #8
    8020:	881b      	ldrh	r3, [r3, #0]
    8022:	4619      	mov	r1, r3
    8024:	6838      	ldr	r0, [r7, #0]
    8026:	4b54      	ldr	r3, [pc, #336]	; (8178 <_pwm_init+0x1fc>)
    8028:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    802a:	2103      	movs	r1, #3
    802c:	6838      	ldr	r0, [r7, #0]
    802e:	4b53      	ldr	r3, [pc, #332]	; (817c <_pwm_init+0x200>)
    8030:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8032:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8036:	494e      	ldr	r1, [pc, #312]	; (8170 <_pwm_init+0x1f4>)
    8038:	4613      	mov	r3, r2
    803a:	009b      	lsls	r3, r3, #2
    803c:	4413      	add	r3, r2
    803e:	009b      	lsls	r3, r3, #2
    8040:	440b      	add	r3, r1
    8042:	3304      	adds	r3, #4
    8044:	681b      	ldr	r3, [r3, #0]
    8046:	f003 030c 	and.w	r3, r3, #12
    804a:	2b08      	cmp	r3, #8
    804c:	d11e      	bne.n	808c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    804e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8052:	4947      	ldr	r1, [pc, #284]	; (8170 <_pwm_init+0x1f4>)
    8054:	4613      	mov	r3, r2
    8056:	009b      	lsls	r3, r3, #2
    8058:	4413      	add	r3, r2
    805a:	009b      	lsls	r3, r3, #2
    805c:	440b      	add	r3, r1
    805e:	330c      	adds	r3, #12
    8060:	681b      	ldr	r3, [r3, #0]
    8062:	461a      	mov	r2, r3
    8064:	2100      	movs	r1, #0
    8066:	6838      	ldr	r0, [r7, #0]
    8068:	4b45      	ldr	r3, [pc, #276]	; (8180 <_pwm_init+0x204>)
    806a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    806c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8070:	493f      	ldr	r1, [pc, #252]	; (8170 <_pwm_init+0x1f4>)
    8072:	4613      	mov	r3, r2
    8074:	009b      	lsls	r3, r3, #2
    8076:	4413      	add	r3, r2
    8078:	009b      	lsls	r3, r3, #2
    807a:	440b      	add	r3, r1
    807c:	3310      	adds	r3, #16
    807e:	681b      	ldr	r3, [r3, #0]
    8080:	461a      	mov	r2, r3
    8082:	2101      	movs	r1, #1
    8084:	6838      	ldr	r0, [r7, #0]
    8086:	4b3e      	ldr	r3, [pc, #248]	; (8180 <_pwm_init+0x204>)
    8088:	4798      	blx	r3
    808a:	e031      	b.n	80f0 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    808c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8090:	4937      	ldr	r1, [pc, #220]	; (8170 <_pwm_init+0x1f4>)
    8092:	4613      	mov	r3, r2
    8094:	009b      	lsls	r3, r3, #2
    8096:	4413      	add	r3, r2
    8098:	009b      	lsls	r3, r3, #2
    809a:	440b      	add	r3, r1
    809c:	3304      	adds	r3, #4
    809e:	681b      	ldr	r3, [r3, #0]
    80a0:	f003 030c 	and.w	r3, r3, #12
    80a4:	2b00      	cmp	r3, #0
    80a6:	d120      	bne.n	80ea <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    80a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80ac:	4930      	ldr	r1, [pc, #192]	; (8170 <_pwm_init+0x1f4>)
    80ae:	4613      	mov	r3, r2
    80b0:	009b      	lsls	r3, r3, #2
    80b2:	4413      	add	r3, r2
    80b4:	009b      	lsls	r3, r3, #2
    80b6:	440b      	add	r3, r1
    80b8:	330c      	adds	r3, #12
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	b29b      	uxth	r3, r3
    80be:	461a      	mov	r2, r3
    80c0:	2100      	movs	r1, #0
    80c2:	6838      	ldr	r0, [r7, #0]
    80c4:	4b2f      	ldr	r3, [pc, #188]	; (8184 <_pwm_init+0x208>)
    80c6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    80c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80cc:	4928      	ldr	r1, [pc, #160]	; (8170 <_pwm_init+0x1f4>)
    80ce:	4613      	mov	r3, r2
    80d0:	009b      	lsls	r3, r3, #2
    80d2:	4413      	add	r3, r2
    80d4:	009b      	lsls	r3, r3, #2
    80d6:	440b      	add	r3, r1
    80d8:	3310      	adds	r3, #16
    80da:	681b      	ldr	r3, [r3, #0]
    80dc:	b29b      	uxth	r3, r3
    80de:	461a      	mov	r2, r3
    80e0:	2101      	movs	r1, #1
    80e2:	6838      	ldr	r0, [r7, #0]
    80e4:	4b27      	ldr	r3, [pc, #156]	; (8184 <_pwm_init+0x208>)
    80e6:	4798      	blx	r3
    80e8:	e002      	b.n	80f0 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    80ea:	f04f 33ff 	mov.w	r3, #4294967295
    80ee:	e02e      	b.n	814e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    80f0:	6879      	ldr	r1, [r7, #4]
    80f2:	6838      	ldr	r0, [r7, #0]
    80f4:	4b24      	ldr	r3, [pc, #144]	; (8188 <_pwm_init+0x20c>)
    80f6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    80f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80fc:	491c      	ldr	r1, [pc, #112]	; (8170 <_pwm_init+0x1f4>)
    80fe:	4613      	mov	r3, r2
    8100:	009b      	lsls	r3, r3, #2
    8102:	4413      	add	r3, r2
    8104:	009b      	lsls	r3, r3, #2
    8106:	440b      	add	r3, r1
    8108:	3302      	adds	r3, #2
    810a:	f9b3 3000 	ldrsh.w	r3, [r3]
    810e:	4618      	mov	r0, r3
    8110:	4b1e      	ldr	r3, [pc, #120]	; (818c <_pwm_init+0x210>)
    8112:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8114:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8118:	4915      	ldr	r1, [pc, #84]	; (8170 <_pwm_init+0x1f4>)
    811a:	4613      	mov	r3, r2
    811c:	009b      	lsls	r3, r3, #2
    811e:	4413      	add	r3, r2
    8120:	009b      	lsls	r3, r3, #2
    8122:	440b      	add	r3, r1
    8124:	3302      	adds	r3, #2
    8126:	f9b3 3000 	ldrsh.w	r3, [r3]
    812a:	4618      	mov	r0, r3
    812c:	4b18      	ldr	r3, [pc, #96]	; (8190 <_pwm_init+0x214>)
    812e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8130:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8134:	490e      	ldr	r1, [pc, #56]	; (8170 <_pwm_init+0x1f4>)
    8136:	4613      	mov	r3, r2
    8138:	009b      	lsls	r3, r3, #2
    813a:	4413      	add	r3, r2
    813c:	009b      	lsls	r3, r3, #2
    813e:	440b      	add	r3, r1
    8140:	3302      	adds	r3, #2
    8142:	f9b3 3000 	ldrsh.w	r3, [r3]
    8146:	4618      	mov	r0, r3
    8148:	4b12      	ldr	r3, [pc, #72]	; (8194 <_pwm_init+0x218>)
    814a:	4798      	blx	r3

	return 0;
    814c:	2300      	movs	r3, #0
}
    814e:	4618      	mov	r0, r3
    8150:	3710      	adds	r7, #16
    8152:	46bd      	mov	sp, r7
    8154:	bd80      	pop	{r7, pc}
    8156:	bf00      	nop
    8158:	0000855d 	.word	0x0000855d
    815c:	00007941 	.word	0x00007941
    8160:	00007ae1 	.word	0x00007ae1
    8164:	00007a91 	.word	0x00007a91
    8168:	0000791d 	.word	0x0000791d
    816c:	00007b11 	.word	0x00007b11
    8170:	200000e0 	.word	0x200000e0
    8174:	00007b71 	.word	0x00007b71
    8178:	00007b35 	.word	0x00007b35
    817c:	00007b53 	.word	0x00007b53
    8180:	00007c71 	.word	0x00007c71
    8184:	00007c0d 	.word	0x00007c0d
    8188:	000085c5 	.word	0x000085c5
    818c:	0000789d 	.word	0x0000789d
    8190:	000078e1 	.word	0x000078e1
    8194:	00007861 	.word	0x00007861

00008198 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8198:	b580      	push	{r7, lr}
    819a:	b084      	sub	sp, #16
    819c:	af00      	add	r7, sp, #0
    819e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    81a0:	687b      	ldr	r3, [r7, #4]
    81a2:	68db      	ldr	r3, [r3, #12]
    81a4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    81a6:	68f8      	ldr	r0, [r7, #12]
    81a8:	4b10      	ldr	r3, [pc, #64]	; (81ec <_tc_timer_deinit+0x54>)
    81aa:	4798      	blx	r3
    81ac:	4603      	mov	r3, r0
    81ae:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    81b0:	22f9      	movs	r2, #249	; 0xf9
    81b2:	490f      	ldr	r1, [pc, #60]	; (81f0 <_tc_timer_deinit+0x58>)
    81b4:	2001      	movs	r0, #1
    81b6:	4b0f      	ldr	r3, [pc, #60]	; (81f4 <_tc_timer_deinit+0x5c>)
    81b8:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    81ba:	f997 200b 	ldrsb.w	r2, [r7, #11]
    81be:	490e      	ldr	r1, [pc, #56]	; (81f8 <_tc_timer_deinit+0x60>)
    81c0:	4613      	mov	r3, r2
    81c2:	009b      	lsls	r3, r3, #2
    81c4:	4413      	add	r3, r2
    81c6:	009b      	lsls	r3, r3, #2
    81c8:	440b      	add	r3, r1
    81ca:	3302      	adds	r3, #2
    81cc:	f9b3 3000 	ldrsh.w	r3, [r3]
    81d0:	4618      	mov	r0, r3
    81d2:	4b0a      	ldr	r3, [pc, #40]	; (81fc <_tc_timer_deinit+0x64>)
    81d4:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    81d6:	68f8      	ldr	r0, [r7, #12]
    81d8:	4b09      	ldr	r3, [pc, #36]	; (8200 <_tc_timer_deinit+0x68>)
    81da:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    81dc:	68f8      	ldr	r0, [r7, #12]
    81de:	4b09      	ldr	r3, [pc, #36]	; (8204 <_tc_timer_deinit+0x6c>)
    81e0:	4798      	blx	r3
}
    81e2:	bf00      	nop
    81e4:	3710      	adds	r7, #16
    81e6:	46bd      	mov	sp, r7
    81e8:	bd80      	pop	{r7, pc}
    81ea:	bf00      	nop
    81ec:	0000855d 	.word	0x0000855d
    81f0:	0000f024 	.word	0x0000f024
    81f4:	0000349d 	.word	0x0000349d
    81f8:	200000e0 	.word	0x200000e0
    81fc:	0000789d 	.word	0x0000789d
    8200:	00007a91 	.word	0x00007a91
    8204:	00007a09 	.word	0x00007a09

00008208 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8208:	b580      	push	{r7, lr}
    820a:	b082      	sub	sp, #8
    820c:	af00      	add	r7, sp, #0
    820e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8210:	687b      	ldr	r3, [r7, #4]
    8212:	68db      	ldr	r3, [r3, #12]
    8214:	4618      	mov	r0, r3
    8216:	4b03      	ldr	r3, [pc, #12]	; (8224 <_tc_timer_start+0x1c>)
    8218:	4798      	blx	r3
}
    821a:	bf00      	nop
    821c:	3708      	adds	r7, #8
    821e:	46bd      	mov	sp, r7
    8220:	bd80      	pop	{r7, pc}
    8222:	bf00      	nop
    8224:	00007a31 	.word	0x00007a31

00008228 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8228:	b580      	push	{r7, lr}
    822a:	b082      	sub	sp, #8
    822c:	af00      	add	r7, sp, #0
    822e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8230:	687b      	ldr	r3, [r7, #4]
    8232:	691b      	ldr	r3, [r3, #16]
    8234:	4618      	mov	r0, r3
    8236:	4b03      	ldr	r3, [pc, #12]	; (8244 <_pwm_enable+0x1c>)
    8238:	4798      	blx	r3
}
    823a:	bf00      	nop
    823c:	3708      	adds	r7, #8
    823e:	46bd      	mov	sp, r7
    8240:	bd80      	pop	{r7, pc}
    8242:	bf00      	nop
    8244:	00007a31 	.word	0x00007a31

00008248 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8248:	b580      	push	{r7, lr}
    824a:	b082      	sub	sp, #8
    824c:	af00      	add	r7, sp, #0
    824e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8250:	687b      	ldr	r3, [r7, #4]
    8252:	68db      	ldr	r3, [r3, #12]
    8254:	4618      	mov	r0, r3
    8256:	4b03      	ldr	r3, [pc, #12]	; (8264 <_tc_timer_stop+0x1c>)
    8258:	4798      	blx	r3
}
    825a:	bf00      	nop
    825c:	3708      	adds	r7, #8
    825e:	46bd      	mov	sp, r7
    8260:	bd80      	pop	{r7, pc}
    8262:	bf00      	nop
    8264:	00007a91 	.word	0x00007a91

00008268 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8268:	b580      	push	{r7, lr}
    826a:	b084      	sub	sp, #16
    826c:	af00      	add	r7, sp, #0
    826e:	6078      	str	r0, [r7, #4]
    8270:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8272:	687b      	ldr	r3, [r7, #4]
    8274:	68db      	ldr	r3, [r3, #12]
    8276:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8278:	68f8      	ldr	r0, [r7, #12]
    827a:	4b14      	ldr	r3, [pc, #80]	; (82cc <_tc_timer_set_period+0x64>)
    827c:	4798      	blx	r3
    827e:	4603      	mov	r3, r0
    8280:	2b02      	cmp	r3, #2
    8282:	d105      	bne.n	8290 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8284:	683a      	ldr	r2, [r7, #0]
    8286:	2100      	movs	r1, #0
    8288:	68f8      	ldr	r0, [r7, #12]
    828a:	4b11      	ldr	r3, [pc, #68]	; (82d0 <_tc_timer_set_period+0x68>)
    828c:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    828e:	e019      	b.n	82c4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8290:	68f8      	ldr	r0, [r7, #12]
    8292:	4b0e      	ldr	r3, [pc, #56]	; (82cc <_tc_timer_set_period+0x64>)
    8294:	4798      	blx	r3
    8296:	4603      	mov	r3, r0
    8298:	2b00      	cmp	r3, #0
    829a:	d107      	bne.n	82ac <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    829c:	683b      	ldr	r3, [r7, #0]
    829e:	b29b      	uxth	r3, r3
    82a0:	461a      	mov	r2, r3
    82a2:	2100      	movs	r1, #0
    82a4:	68f8      	ldr	r0, [r7, #12]
    82a6:	4b0b      	ldr	r3, [pc, #44]	; (82d4 <_tc_timer_set_period+0x6c>)
    82a8:	4798      	blx	r3
}
    82aa:	e00b      	b.n	82c4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    82ac:	68f8      	ldr	r0, [r7, #12]
    82ae:	4b07      	ldr	r3, [pc, #28]	; (82cc <_tc_timer_set_period+0x64>)
    82b0:	4798      	blx	r3
    82b2:	4603      	mov	r3, r0
    82b4:	2b01      	cmp	r3, #1
    82b6:	d105      	bne.n	82c4 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    82b8:	683b      	ldr	r3, [r7, #0]
    82ba:	b2db      	uxtb	r3, r3
    82bc:	4619      	mov	r1, r3
    82be:	68f8      	ldr	r0, [r7, #12]
    82c0:	4b05      	ldr	r3, [pc, #20]	; (82d8 <_tc_timer_set_period+0x70>)
    82c2:	4798      	blx	r3
}
    82c4:	bf00      	nop
    82c6:	3710      	adds	r7, #16
    82c8:	46bd      	mov	sp, r7
    82ca:	bd80      	pop	{r7, pc}
    82cc:	00007ab9 	.word	0x00007ab9
    82d0:	00007c71 	.word	0x00007c71
    82d4:	00007c0d 	.word	0x00007c0d
    82d8:	00007b91 	.word	0x00007b91

000082dc <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    82dc:	b580      	push	{r7, lr}
    82de:	b084      	sub	sp, #16
    82e0:	af00      	add	r7, sp, #0
    82e2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    82e4:	687b      	ldr	r3, [r7, #4]
    82e6:	68db      	ldr	r3, [r3, #12]
    82e8:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    82ea:	68f8      	ldr	r0, [r7, #12]
    82ec:	4b13      	ldr	r3, [pc, #76]	; (833c <_tc_timer_get_period+0x60>)
    82ee:	4798      	blx	r3
    82f0:	4603      	mov	r3, r0
    82f2:	2b02      	cmp	r3, #2
    82f4:	d105      	bne.n	8302 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    82f6:	2100      	movs	r1, #0
    82f8:	68f8      	ldr	r0, [r7, #12]
    82fa:	4b11      	ldr	r3, [pc, #68]	; (8340 <_tc_timer_get_period+0x64>)
    82fc:	4798      	blx	r3
    82fe:	4603      	mov	r3, r0
    8300:	e017      	b.n	8332 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8302:	68f8      	ldr	r0, [r7, #12]
    8304:	4b0d      	ldr	r3, [pc, #52]	; (833c <_tc_timer_get_period+0x60>)
    8306:	4798      	blx	r3
    8308:	4603      	mov	r3, r0
    830a:	2b00      	cmp	r3, #0
    830c:	d105      	bne.n	831a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    830e:	2100      	movs	r1, #0
    8310:	68f8      	ldr	r0, [r7, #12]
    8312:	4b0c      	ldr	r3, [pc, #48]	; (8344 <_tc_timer_get_period+0x68>)
    8314:	4798      	blx	r3
    8316:	4603      	mov	r3, r0
    8318:	e00b      	b.n	8332 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    831a:	68f8      	ldr	r0, [r7, #12]
    831c:	4b07      	ldr	r3, [pc, #28]	; (833c <_tc_timer_get_period+0x60>)
    831e:	4798      	blx	r3
    8320:	4603      	mov	r3, r0
    8322:	2b01      	cmp	r3, #1
    8324:	d104      	bne.n	8330 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8326:	68f8      	ldr	r0, [r7, #12]
    8328:	4b07      	ldr	r3, [pc, #28]	; (8348 <_tc_timer_get_period+0x6c>)
    832a:	4798      	blx	r3
    832c:	4603      	mov	r3, r0
    832e:	e000      	b.n	8332 <_tc_timer_get_period+0x56>
	}

	return 0;
    8330:	2300      	movs	r3, #0
}
    8332:	4618      	mov	r0, r3
    8334:	3710      	adds	r7, #16
    8336:	46bd      	mov	sp, r7
    8338:	bd80      	pop	{r7, pc}
    833a:	bf00      	nop
    833c:	00007ab9 	.word	0x00007ab9
    8340:	00007ca1 	.word	0x00007ca1
    8344:	00007c41 	.word	0x00007c41
    8348:	00007bb9 	.word	0x00007bb9

0000834c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    834c:	b580      	push	{r7, lr}
    834e:	b082      	sub	sp, #8
    8350:	af00      	add	r7, sp, #0
    8352:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8354:	687b      	ldr	r3, [r7, #4]
    8356:	68db      	ldr	r3, [r3, #12]
    8358:	4618      	mov	r0, r3
    835a:	4b03      	ldr	r3, [pc, #12]	; (8368 <_tc_timer_is_started+0x1c>)
    835c:	4798      	blx	r3
    835e:	4603      	mov	r3, r0
}
    8360:	4618      	mov	r0, r3
    8362:	3708      	adds	r7, #8
    8364:	46bd      	mov	sp, r7
    8366:	bd80      	pop	{r7, pc}
    8368:	00007a59 	.word	0x00007a59

0000836c <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    836c:	b580      	push	{r7, lr}
    836e:	b082      	sub	sp, #8
    8370:	af00      	add	r7, sp, #0
    8372:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8374:	687b      	ldr	r3, [r7, #4]
    8376:	691b      	ldr	r3, [r3, #16]
    8378:	4618      	mov	r0, r3
    837a:	4b03      	ldr	r3, [pc, #12]	; (8388 <_pwm_is_enabled+0x1c>)
    837c:	4798      	blx	r3
    837e:	4603      	mov	r3, r0
}
    8380:	4618      	mov	r0, r3
    8382:	3708      	adds	r7, #8
    8384:	46bd      	mov	sp, r7
    8386:	bd80      	pop	{r7, pc}
    8388:	00007a59 	.word	0x00007a59

0000838c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    838c:	b480      	push	{r7}
    838e:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8390:	4b02      	ldr	r3, [pc, #8]	; (839c <_tc_get_timer+0x10>)
}
    8392:	4618      	mov	r0, r3
    8394:	46bd      	mov	sp, r7
    8396:	f85d 7b04 	ldr.w	r7, [sp], #4
    839a:	4770      	bx	lr
    839c:	20000158 	.word	0x20000158

000083a0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    83a0:	b480      	push	{r7}
    83a2:	af00      	add	r7, sp, #0
	return NULL;
    83a4:	2300      	movs	r3, #0
}
    83a6:	4618      	mov	r0, r3
    83a8:	46bd      	mov	sp, r7
    83aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    83ae:	4770      	bx	lr

000083b0 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    83b0:	b580      	push	{r7, lr}
    83b2:	b084      	sub	sp, #16
    83b4:	af00      	add	r7, sp, #0
    83b6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    83b8:	687b      	ldr	r3, [r7, #4]
    83ba:	68db      	ldr	r3, [r3, #12]
    83bc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    83be:	68f8      	ldr	r0, [r7, #12]
    83c0:	4b0e      	ldr	r3, [pc, #56]	; (83fc <_tc_timer_set_irq+0x4c>)
    83c2:	4798      	blx	r3
    83c4:	4603      	mov	r3, r0
    83c6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    83c8:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    83cc:	490c      	ldr	r1, [pc, #48]	; (8400 <_tc_timer_set_irq+0x50>)
    83ce:	2001      	movs	r0, #1
    83d0:	4b0c      	ldr	r3, [pc, #48]	; (8404 <_tc_timer_set_irq+0x54>)
    83d2:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    83d4:	f997 200b 	ldrsb.w	r2, [r7, #11]
    83d8:	490b      	ldr	r1, [pc, #44]	; (8408 <_tc_timer_set_irq+0x58>)
    83da:	4613      	mov	r3, r2
    83dc:	009b      	lsls	r3, r3, #2
    83de:	4413      	add	r3, r2
    83e0:	009b      	lsls	r3, r3, #2
    83e2:	440b      	add	r3, r1
    83e4:	3302      	adds	r3, #2
    83e6:	f9b3 3000 	ldrsh.w	r3, [r3]
    83ea:	b2db      	uxtb	r3, r3
    83ec:	4618      	mov	r0, r3
    83ee:	4b07      	ldr	r3, [pc, #28]	; (840c <_tc_timer_set_irq+0x5c>)
    83f0:	4798      	blx	r3
}
    83f2:	bf00      	nop
    83f4:	3710      	adds	r7, #16
    83f6:	46bd      	mov	sp, r7
    83f8:	bd80      	pop	{r7, pc}
    83fa:	bf00      	nop
    83fc:	0000855d 	.word	0x0000855d
    8400:	0000f024 	.word	0x0000f024
    8404:	0000349d 	.word	0x0000349d
    8408:	200000e0 	.word	0x200000e0
    840c:	00003ce9 	.word	0x00003ce9

00008410 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8410:	b580      	push	{r7, lr}
    8412:	b084      	sub	sp, #16
    8414:	af00      	add	r7, sp, #0
    8416:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8418:	687b      	ldr	r3, [r7, #4]
    841a:	68db      	ldr	r3, [r3, #12]
    841c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    841e:	68f8      	ldr	r0, [r7, #12]
    8420:	4b07      	ldr	r3, [pc, #28]	; (8440 <tc_interrupt_handler+0x30>)
    8422:	4798      	blx	r3
    8424:	4603      	mov	r3, r0
    8426:	2b00      	cmp	r3, #0
    8428:	d006      	beq.n	8438 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    842a:	68f8      	ldr	r0, [r7, #12]
    842c:	4b05      	ldr	r3, [pc, #20]	; (8444 <tc_interrupt_handler+0x34>)
    842e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8430:	687b      	ldr	r3, [r7, #4]
    8432:	681b      	ldr	r3, [r3, #0]
    8434:	6878      	ldr	r0, [r7, #4]
    8436:	4798      	blx	r3
	}
}
    8438:	bf00      	nop
    843a:	3710      	adds	r7, #16
    843c:	46bd      	mov	sp, r7
    843e:	bd80      	pop	{r7, pc}
    8440:	00007969 	.word	0x00007969
    8444:	00007991 	.word	0x00007991

00008448 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8448:	b580      	push	{r7, lr}
    844a:	b084      	sub	sp, #16
    844c:	af00      	add	r7, sp, #0
    844e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8450:	687b      	ldr	r3, [r7, #4]
    8452:	691b      	ldr	r3, [r3, #16]
    8454:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8456:	68f8      	ldr	r0, [r7, #12]
    8458:	4b12      	ldr	r3, [pc, #72]	; (84a4 <tc_pwm_interrupt_handler+0x5c>)
    845a:	4798      	blx	r3
    845c:	4603      	mov	r3, r0
    845e:	2b00      	cmp	r3, #0
    8460:	d00a      	beq.n	8478 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8462:	68f8      	ldr	r0, [r7, #12]
    8464:	4b10      	ldr	r3, [pc, #64]	; (84a8 <tc_pwm_interrupt_handler+0x60>)
    8466:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8468:	687b      	ldr	r3, [r7, #4]
    846a:	681b      	ldr	r3, [r3, #0]
    846c:	2b00      	cmp	r3, #0
    846e:	d003      	beq.n	8478 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8470:	687b      	ldr	r3, [r7, #4]
    8472:	681b      	ldr	r3, [r3, #0]
    8474:	6878      	ldr	r0, [r7, #4]
    8476:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8478:	68f8      	ldr	r0, [r7, #12]
    847a:	4b0c      	ldr	r3, [pc, #48]	; (84ac <tc_pwm_interrupt_handler+0x64>)
    847c:	4798      	blx	r3
    847e:	4603      	mov	r3, r0
    8480:	2b00      	cmp	r3, #0
    8482:	d00a      	beq.n	849a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8484:	68f8      	ldr	r0, [r7, #12]
    8486:	4b0a      	ldr	r3, [pc, #40]	; (84b0 <tc_pwm_interrupt_handler+0x68>)
    8488:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    848a:	687b      	ldr	r3, [r7, #4]
    848c:	685b      	ldr	r3, [r3, #4]
    848e:	2b00      	cmp	r3, #0
    8490:	d003      	beq.n	849a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8492:	687b      	ldr	r3, [r7, #4]
    8494:	685b      	ldr	r3, [r3, #4]
    8496:	6878      	ldr	r0, [r7, #4]
    8498:	4798      	blx	r3
		}
	}
}
    849a:	bf00      	nop
    849c:	3710      	adds	r7, #16
    849e:	46bd      	mov	sp, r7
    84a0:	bd80      	pop	{r7, pc}
    84a2:	bf00      	nop
    84a4:	00007969 	.word	0x00007969
    84a8:	00007991 	.word	0x00007991
    84ac:	000079df 	.word	0x000079df
    84b0:	000079ab 	.word	0x000079ab

000084b4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    84b4:	b580      	push	{r7, lr}
    84b6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    84b8:	4b03      	ldr	r3, [pc, #12]	; (84c8 <TC0_Handler+0x14>)
    84ba:	681b      	ldr	r3, [r3, #0]
    84bc:	4618      	mov	r0, r3
    84be:	4b03      	ldr	r3, [pc, #12]	; (84cc <TC0_Handler+0x18>)
    84c0:	4798      	blx	r3
}
    84c2:	bf00      	nop
    84c4:	bd80      	pop	{r7, pc}
    84c6:	bf00      	nop
    84c8:	20000838 	.word	0x20000838
    84cc:	00008411 	.word	0x00008411

000084d0 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    84d0:	b580      	push	{r7, lr}
    84d2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    84d4:	4b03      	ldr	r3, [pc, #12]	; (84e4 <TC2_Handler+0x14>)
    84d6:	681b      	ldr	r3, [r3, #0]
    84d8:	4618      	mov	r0, r3
    84da:	4b03      	ldr	r3, [pc, #12]	; (84e8 <TC2_Handler+0x18>)
    84dc:	4798      	blx	r3
}
    84de:	bf00      	nop
    84e0:	bd80      	pop	{r7, pc}
    84e2:	bf00      	nop
    84e4:	2000083c 	.word	0x2000083c
    84e8:	00008411 	.word	0x00008411

000084ec <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    84ec:	b580      	push	{r7, lr}
    84ee:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    84f0:	4b03      	ldr	r3, [pc, #12]	; (8500 <TC4_Handler+0x14>)
    84f2:	681b      	ldr	r3, [r3, #0]
    84f4:	4618      	mov	r0, r3
    84f6:	4b03      	ldr	r3, [pc, #12]	; (8504 <TC4_Handler+0x18>)
    84f8:	4798      	blx	r3
}
    84fa:	bf00      	nop
    84fc:	bd80      	pop	{r7, pc}
    84fe:	bf00      	nop
    8500:	20000840 	.word	0x20000840
    8504:	00008411 	.word	0x00008411

00008508 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8508:	b580      	push	{r7, lr}
    850a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    850c:	4b03      	ldr	r3, [pc, #12]	; (851c <TC5_Handler+0x14>)
    850e:	681b      	ldr	r3, [r3, #0]
    8510:	4618      	mov	r0, r3
    8512:	4b03      	ldr	r3, [pc, #12]	; (8520 <TC5_Handler+0x18>)
    8514:	4798      	blx	r3
}
    8516:	bf00      	nop
    8518:	bd80      	pop	{r7, pc}
    851a:	bf00      	nop
    851c:	20000844 	.word	0x20000844
    8520:	00008411 	.word	0x00008411

00008524 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8524:	b580      	push	{r7, lr}
    8526:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8528:	4b03      	ldr	r3, [pc, #12]	; (8538 <TC6_Handler+0x14>)
    852a:	681b      	ldr	r3, [r3, #0]
    852c:	4618      	mov	r0, r3
    852e:	4b03      	ldr	r3, [pc, #12]	; (853c <TC6_Handler+0x18>)
    8530:	4798      	blx	r3
}
    8532:	bf00      	nop
    8534:	bd80      	pop	{r7, pc}
    8536:	bf00      	nop
    8538:	20000848 	.word	0x20000848
    853c:	00008411 	.word	0x00008411

00008540 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8540:	b580      	push	{r7, lr}
    8542:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8544:	4b03      	ldr	r3, [pc, #12]	; (8554 <TC7_Handler+0x14>)
    8546:	681b      	ldr	r3, [r3, #0]
    8548:	4618      	mov	r0, r3
    854a:	4b03      	ldr	r3, [pc, #12]	; (8558 <TC7_Handler+0x18>)
    854c:	4798      	blx	r3
}
    854e:	bf00      	nop
    8550:	bd80      	pop	{r7, pc}
    8552:	bf00      	nop
    8554:	2000084c 	.word	0x2000084c
    8558:	00008449 	.word	0x00008449

0000855c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    855c:	b580      	push	{r7, lr}
    855e:	b084      	sub	sp, #16
    8560:	af00      	add	r7, sp, #0
    8562:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8564:	6878      	ldr	r0, [r7, #4]
    8566:	4b13      	ldr	r3, [pc, #76]	; (85b4 <get_tc_index+0x58>)
    8568:	4798      	blx	r3
    856a:	4603      	mov	r3, r0
    856c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    856e:	2300      	movs	r3, #0
    8570:	73fb      	strb	r3, [r7, #15]
    8572:	e010      	b.n	8596 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8574:	7bfa      	ldrb	r2, [r7, #15]
    8576:	4910      	ldr	r1, [pc, #64]	; (85b8 <get_tc_index+0x5c>)
    8578:	4613      	mov	r3, r2
    857a:	009b      	lsls	r3, r3, #2
    857c:	4413      	add	r3, r2
    857e:	009b      	lsls	r3, r3, #2
    8580:	440b      	add	r3, r1
    8582:	781b      	ldrb	r3, [r3, #0]
    8584:	7bba      	ldrb	r2, [r7, #14]
    8586:	429a      	cmp	r2, r3
    8588:	d102      	bne.n	8590 <get_tc_index+0x34>
			return i;
    858a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    858e:	e00d      	b.n	85ac <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8590:	7bfb      	ldrb	r3, [r7, #15]
    8592:	3301      	adds	r3, #1
    8594:	73fb      	strb	r3, [r7, #15]
    8596:	7bfb      	ldrb	r3, [r7, #15]
    8598:	2b05      	cmp	r3, #5
    859a:	d9eb      	bls.n	8574 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    859c:	f240 221d 	movw	r2, #541	; 0x21d
    85a0:	4906      	ldr	r1, [pc, #24]	; (85bc <get_tc_index+0x60>)
    85a2:	2000      	movs	r0, #0
    85a4:	4b06      	ldr	r3, [pc, #24]	; (85c0 <get_tc_index+0x64>)
    85a6:	4798      	blx	r3
	return -1;
    85a8:	f04f 33ff 	mov.w	r3, #4294967295
}
    85ac:	4618      	mov	r0, r3
    85ae:	3710      	adds	r7, #16
    85b0:	46bd      	mov	sp, r7
    85b2:	bd80      	pop	{r7, pc}
    85b4:	00008661 	.word	0x00008661
    85b8:	200000e0 	.word	0x200000e0
    85bc:	0000f024 	.word	0x0000f024
    85c0:	0000349d 	.word	0x0000349d

000085c4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    85c4:	b480      	push	{r7}
    85c6:	b083      	sub	sp, #12
    85c8:	af00      	add	r7, sp, #0
    85ca:	6078      	str	r0, [r7, #4]
    85cc:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    85ce:	687b      	ldr	r3, [r7, #4]
    85d0:	4a17      	ldr	r2, [pc, #92]	; (8630 <_tc_init_irq_param+0x6c>)
    85d2:	4293      	cmp	r3, r2
    85d4:	d102      	bne.n	85dc <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    85d6:	4a17      	ldr	r2, [pc, #92]	; (8634 <_tc_init_irq_param+0x70>)
    85d8:	683b      	ldr	r3, [r7, #0]
    85da:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    85dc:	687b      	ldr	r3, [r7, #4]
    85de:	4a16      	ldr	r2, [pc, #88]	; (8638 <_tc_init_irq_param+0x74>)
    85e0:	4293      	cmp	r3, r2
    85e2:	d102      	bne.n	85ea <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    85e4:	4a15      	ldr	r2, [pc, #84]	; (863c <_tc_init_irq_param+0x78>)
    85e6:	683b      	ldr	r3, [r7, #0]
    85e8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    85ea:	687b      	ldr	r3, [r7, #4]
    85ec:	4a14      	ldr	r2, [pc, #80]	; (8640 <_tc_init_irq_param+0x7c>)
    85ee:	4293      	cmp	r3, r2
    85f0:	d102      	bne.n	85f8 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    85f2:	4a14      	ldr	r2, [pc, #80]	; (8644 <_tc_init_irq_param+0x80>)
    85f4:	683b      	ldr	r3, [r7, #0]
    85f6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    85f8:	687b      	ldr	r3, [r7, #4]
    85fa:	4a13      	ldr	r2, [pc, #76]	; (8648 <_tc_init_irq_param+0x84>)
    85fc:	4293      	cmp	r3, r2
    85fe:	d102      	bne.n	8606 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8600:	4a12      	ldr	r2, [pc, #72]	; (864c <_tc_init_irq_param+0x88>)
    8602:	683b      	ldr	r3, [r7, #0]
    8604:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8606:	687b      	ldr	r3, [r7, #4]
    8608:	4a11      	ldr	r2, [pc, #68]	; (8650 <_tc_init_irq_param+0x8c>)
    860a:	4293      	cmp	r3, r2
    860c:	d102      	bne.n	8614 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    860e:	4a11      	ldr	r2, [pc, #68]	; (8654 <_tc_init_irq_param+0x90>)
    8610:	683b      	ldr	r3, [r7, #0]
    8612:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8614:	687b      	ldr	r3, [r7, #4]
    8616:	4a10      	ldr	r2, [pc, #64]	; (8658 <_tc_init_irq_param+0x94>)
    8618:	4293      	cmp	r3, r2
    861a:	d102      	bne.n	8622 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    861c:	4a0f      	ldr	r2, [pc, #60]	; (865c <_tc_init_irq_param+0x98>)
    861e:	683b      	ldr	r3, [r7, #0]
    8620:	6013      	str	r3, [r2, #0]
	}
}
    8622:	bf00      	nop
    8624:	370c      	adds	r7, #12
    8626:	46bd      	mov	sp, r7
    8628:	f85d 7b04 	ldr.w	r7, [sp], #4
    862c:	4770      	bx	lr
    862e:	bf00      	nop
    8630:	40003800 	.word	0x40003800
    8634:	20000838 	.word	0x20000838
    8638:	4101a000 	.word	0x4101a000
    863c:	2000083c 	.word	0x2000083c
    8640:	42001400 	.word	0x42001400
    8644:	20000840 	.word	0x20000840
    8648:	42001800 	.word	0x42001800
    864c:	20000844 	.word	0x20000844
    8650:	43001400 	.word	0x43001400
    8654:	20000848 	.word	0x20000848
    8658:	43001800 	.word	0x43001800
    865c:	2000084c 	.word	0x2000084c

00008660 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8660:	b4b0      	push	{r4, r5, r7}
    8662:	b08d      	sub	sp, #52	; 0x34
    8664:	af00      	add	r7, sp, #0
    8666:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8668:	4b13      	ldr	r3, [pc, #76]	; (86b8 <_get_hardware_offset+0x58>)
    866a:	f107 040c 	add.w	r4, r7, #12
    866e:	461d      	mov	r5, r3
    8670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8674:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    867c:	2300      	movs	r3, #0
    867e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8680:	e010      	b.n	86a4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8684:	009b      	lsls	r3, r3, #2
    8686:	f107 0230 	add.w	r2, r7, #48	; 0x30
    868a:	4413      	add	r3, r2
    868c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8690:	461a      	mov	r2, r3
    8692:	687b      	ldr	r3, [r7, #4]
    8694:	429a      	cmp	r2, r3
    8696:	d102      	bne.n	869e <_get_hardware_offset+0x3e>
			return i;
    8698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    869a:	b2db      	uxtb	r3, r3
    869c:	e006      	b.n	86ac <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86a0:	3301      	adds	r3, #1
    86a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    86a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86a6:	2b07      	cmp	r3, #7
    86a8:	d9eb      	bls.n	8682 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    86aa:	2300      	movs	r3, #0
}
    86ac:	4618      	mov	r0, r3
    86ae:	3734      	adds	r7, #52	; 0x34
    86b0:	46bd      	mov	sp, r7
    86b2:	bcb0      	pop	{r4, r5, r7}
    86b4:	4770      	bx	lr
    86b6:	bf00      	nop
    86b8:	0000f038 	.word	0x0000f038

000086bc <__NVIC_EnableIRQ>:
{
    86bc:	b480      	push	{r7}
    86be:	b083      	sub	sp, #12
    86c0:	af00      	add	r7, sp, #0
    86c2:	4603      	mov	r3, r0
    86c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    86c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    86ca:	2b00      	cmp	r3, #0
    86cc:	db0b      	blt.n	86e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    86ce:	4909      	ldr	r1, [pc, #36]	; (86f4 <__NVIC_EnableIRQ+0x38>)
    86d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    86d4:	095b      	lsrs	r3, r3, #5
    86d6:	88fa      	ldrh	r2, [r7, #6]
    86d8:	f002 021f 	and.w	r2, r2, #31
    86dc:	2001      	movs	r0, #1
    86de:	fa00 f202 	lsl.w	r2, r0, r2
    86e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    86e6:	bf00      	nop
    86e8:	370c      	adds	r7, #12
    86ea:	46bd      	mov	sp, r7
    86ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    86f0:	4770      	bx	lr
    86f2:	bf00      	nop
    86f4:	e000e100 	.word	0xe000e100

000086f8 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    86f8:	b480      	push	{r7}
    86fa:	b087      	sub	sp, #28
    86fc:	af00      	add	r7, sp, #0
    86fe:	60f8      	str	r0, [r7, #12]
    8700:	460b      	mov	r3, r1
    8702:	607a      	str	r2, [r7, #4]
    8704:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8706:	7afa      	ldrb	r2, [r7, #11]
    8708:	68f9      	ldr	r1, [r7, #12]
    870a:	4613      	mov	r3, r2
    870c:	009b      	lsls	r3, r3, #2
    870e:	4413      	add	r3, r2
    8710:	009b      	lsls	r3, r3, #2
    8712:	440b      	add	r3, r1
    8714:	3340      	adds	r3, #64	; 0x40
    8716:	681b      	ldr	r3, [r3, #0]
    8718:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    871a:	697a      	ldr	r2, [r7, #20]
    871c:	687b      	ldr	r3, [r7, #4]
    871e:	4013      	ands	r3, r2
    8720:	617b      	str	r3, [r7, #20]
	return tmp;
    8722:	697b      	ldr	r3, [r7, #20]
}
    8724:	4618      	mov	r0, r3
    8726:	371c      	adds	r7, #28
    8728:	46bd      	mov	sp, r7
    872a:	f85d 7b04 	ldr.w	r7, [sp], #4
    872e:	4770      	bx	lr

00008730 <hri_oscctrl_get_STATUS_reg>:
{
    8730:	b480      	push	{r7}
    8732:	b085      	sub	sp, #20
    8734:	af00      	add	r7, sp, #0
    8736:	6078      	str	r0, [r7, #4]
    8738:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    873a:	687b      	ldr	r3, [r7, #4]
    873c:	691b      	ldr	r3, [r3, #16]
    873e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8740:	68fa      	ldr	r2, [r7, #12]
    8742:	683b      	ldr	r3, [r7, #0]
    8744:	4013      	ands	r3, r2
    8746:	60fb      	str	r3, [r7, #12]
	return tmp;
    8748:	68fb      	ldr	r3, [r7, #12]
}
    874a:	4618      	mov	r0, r3
    874c:	3714      	adds	r7, #20
    874e:	46bd      	mov	sp, r7
    8750:	f85d 7b04 	ldr.w	r7, [sp], #4
    8754:	4770      	bx	lr

00008756 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8756:	b480      	push	{r7}
    8758:	b085      	sub	sp, #20
    875a:	af00      	add	r7, sp, #0
    875c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    875e:	687b      	ldr	r3, [r7, #4]
    8760:	f893 3020 	ldrb.w	r3, [r3, #32]
    8764:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8766:	7bfb      	ldrb	r3, [r7, #15]
    8768:	f003 0301 	and.w	r3, r3, #1
    876c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    876e:	7bfb      	ldrb	r3, [r7, #15]
    8770:	2b00      	cmp	r3, #0
    8772:	bf14      	ite	ne
    8774:	2301      	movne	r3, #1
    8776:	2300      	moveq	r3, #0
    8778:	b2db      	uxtb	r3, r3
}
    877a:	4618      	mov	r0, r3
    877c:	3714      	adds	r7, #20
    877e:	46bd      	mov	sp, r7
    8780:	f85d 7b04 	ldr.w	r7, [sp], #4
    8784:	4770      	bx	lr

00008786 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8786:	b480      	push	{r7}
    8788:	b083      	sub	sp, #12
    878a:	af00      	add	r7, sp, #0
    878c:	6078      	str	r0, [r7, #4]
    878e:	460b      	mov	r3, r1
    8790:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8792:	bf00      	nop
    8794:	687b      	ldr	r3, [r7, #4]
    8796:	789b      	ldrb	r3, [r3, #2]
    8798:	b2da      	uxtb	r2, r3
    879a:	78fb      	ldrb	r3, [r7, #3]
    879c:	4013      	ands	r3, r2
    879e:	b2db      	uxtb	r3, r3
    87a0:	2b00      	cmp	r3, #0
    87a2:	d1f7      	bne.n	8794 <hri_usb_wait_for_sync+0xe>
	};
}
    87a4:	bf00      	nop
    87a6:	370c      	adds	r7, #12
    87a8:	46bd      	mov	sp, r7
    87aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    87ae:	4770      	bx	lr

000087b0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    87b0:	b480      	push	{r7}
    87b2:	b083      	sub	sp, #12
    87b4:	af00      	add	r7, sp, #0
    87b6:	6078      	str	r0, [r7, #4]
    87b8:	460b      	mov	r3, r1
    87ba:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    87bc:	687b      	ldr	r3, [r7, #4]
    87be:	789b      	ldrb	r3, [r3, #2]
    87c0:	b2da      	uxtb	r2, r3
    87c2:	78fb      	ldrb	r3, [r7, #3]
    87c4:	4013      	ands	r3, r2
    87c6:	b2db      	uxtb	r3, r3
    87c8:	2b00      	cmp	r3, #0
    87ca:	bf14      	ite	ne
    87cc:	2301      	movne	r3, #1
    87ce:	2300      	moveq	r3, #0
    87d0:	b2db      	uxtb	r3, r3
}
    87d2:	4618      	mov	r0, r3
    87d4:	370c      	adds	r7, #12
    87d6:	46bd      	mov	sp, r7
    87d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    87dc:	4770      	bx	lr

000087de <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    87de:	b480      	push	{r7}
    87e0:	b085      	sub	sp, #20
    87e2:	af00      	add	r7, sp, #0
    87e4:	6078      	str	r0, [r7, #4]
    87e6:	460b      	mov	r3, r1
    87e8:	70fb      	strb	r3, [r7, #3]
    87ea:	4613      	mov	r3, r2
    87ec:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    87ee:	78fb      	ldrb	r3, [r7, #3]
    87f0:	687a      	ldr	r2, [r7, #4]
    87f2:	3308      	adds	r3, #8
    87f4:	015b      	lsls	r3, r3, #5
    87f6:	4413      	add	r3, r2
    87f8:	3307      	adds	r3, #7
    87fa:	781b      	ldrb	r3, [r3, #0]
    87fc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    87fe:	7bfa      	ldrb	r2, [r7, #15]
    8800:	78bb      	ldrb	r3, [r7, #2]
    8802:	4013      	ands	r3, r2
    8804:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8806:	7bfb      	ldrb	r3, [r7, #15]
}
    8808:	4618      	mov	r0, r3
    880a:	3714      	adds	r7, #20
    880c:	46bd      	mov	sp, r7
    880e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8812:	4770      	bx	lr

00008814 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8814:	b480      	push	{r7}
    8816:	b083      	sub	sp, #12
    8818:	af00      	add	r7, sp, #0
    881a:	6078      	str	r0, [r7, #4]
    881c:	460b      	mov	r3, r1
    881e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8820:	78fb      	ldrb	r3, [r7, #3]
    8822:	687a      	ldr	r2, [r7, #4]
    8824:	3308      	adds	r3, #8
    8826:	015b      	lsls	r3, r3, #5
    8828:	4413      	add	r3, r2
    882a:	3307      	adds	r3, #7
    882c:	781b      	ldrb	r3, [r3, #0]
    882e:	b2db      	uxtb	r3, r3
}
    8830:	4618      	mov	r0, r3
    8832:	370c      	adds	r7, #12
    8834:	46bd      	mov	sp, r7
    8836:	f85d 7b04 	ldr.w	r7, [sp], #4
    883a:	4770      	bx	lr

0000883c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    883c:	b480      	push	{r7}
    883e:	b083      	sub	sp, #12
    8840:	af00      	add	r7, sp, #0
    8842:	6078      	str	r0, [r7, #4]
    8844:	460b      	mov	r3, r1
    8846:	70fb      	strb	r3, [r7, #3]
    8848:	4613      	mov	r3, r2
    884a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    884c:	78fb      	ldrb	r3, [r7, #3]
    884e:	687a      	ldr	r2, [r7, #4]
    8850:	3308      	adds	r3, #8
    8852:	015b      	lsls	r3, r3, #5
    8854:	4413      	add	r3, r2
    8856:	3307      	adds	r3, #7
    8858:	78ba      	ldrb	r2, [r7, #2]
    885a:	701a      	strb	r2, [r3, #0]
}
    885c:	bf00      	nop
    885e:	370c      	adds	r7, #12
    8860:	46bd      	mov	sp, r7
    8862:	f85d 7b04 	ldr.w	r7, [sp], #4
    8866:	4770      	bx	lr

00008868 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8868:	b480      	push	{r7}
    886a:	b083      	sub	sp, #12
    886c:	af00      	add	r7, sp, #0
    886e:	6078      	str	r0, [r7, #4]
    8870:	460b      	mov	r3, r1
    8872:	70fb      	strb	r3, [r7, #3]
    8874:	4613      	mov	r3, r2
    8876:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8878:	78fb      	ldrb	r3, [r7, #3]
    887a:	687a      	ldr	r2, [r7, #4]
    887c:	3308      	adds	r3, #8
    887e:	015b      	lsls	r3, r3, #5
    8880:	4413      	add	r3, r2
    8882:	3305      	adds	r3, #5
    8884:	78ba      	ldrb	r2, [r7, #2]
    8886:	701a      	strb	r2, [r3, #0]
}
    8888:	bf00      	nop
    888a:	370c      	adds	r7, #12
    888c:	46bd      	mov	sp, r7
    888e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8892:	4770      	bx	lr

00008894 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8894:	b480      	push	{r7}
    8896:	b083      	sub	sp, #12
    8898:	af00      	add	r7, sp, #0
    889a:	6078      	str	r0, [r7, #4]
    889c:	460b      	mov	r3, r1
    889e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    88a0:	78fb      	ldrb	r3, [r7, #3]
    88a2:	687a      	ldr	r2, [r7, #4]
    88a4:	3308      	adds	r3, #8
    88a6:	015b      	lsls	r3, r3, #5
    88a8:	4413      	add	r3, r2
    88aa:	3306      	adds	r3, #6
    88ac:	781b      	ldrb	r3, [r3, #0]
    88ae:	b2db      	uxtb	r3, r3
}
    88b0:	4618      	mov	r0, r3
    88b2:	370c      	adds	r7, #12
    88b4:	46bd      	mov	sp, r7
    88b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ba:	4770      	bx	lr

000088bc <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    88bc:	b480      	push	{r7}
    88be:	b083      	sub	sp, #12
    88c0:	af00      	add	r7, sp, #0
    88c2:	6078      	str	r0, [r7, #4]
    88c4:	460b      	mov	r3, r1
    88c6:	70fb      	strb	r3, [r7, #3]
    88c8:	4613      	mov	r3, r2
    88ca:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    88cc:	78fb      	ldrb	r3, [r7, #3]
    88ce:	687a      	ldr	r2, [r7, #4]
    88d0:	3308      	adds	r3, #8
    88d2:	015b      	lsls	r3, r3, #5
    88d4:	4413      	add	r3, r2
    88d6:	3304      	adds	r3, #4
    88d8:	78ba      	ldrb	r2, [r7, #2]
    88da:	701a      	strb	r2, [r3, #0]
}
    88dc:	bf00      	nop
    88de:	370c      	adds	r7, #12
    88e0:	46bd      	mov	sp, r7
    88e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88e6:	4770      	bx	lr

000088e8 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    88e8:	b480      	push	{r7}
    88ea:	b083      	sub	sp, #12
    88ec:	af00      	add	r7, sp, #0
    88ee:	6078      	str	r0, [r7, #4]
    88f0:	460b      	mov	r3, r1
    88f2:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    88f4:	78fb      	ldrb	r3, [r7, #3]
    88f6:	687a      	ldr	r2, [r7, #4]
    88f8:	015b      	lsls	r3, r3, #5
    88fa:	4413      	add	r3, r2
    88fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8900:	2210      	movs	r2, #16
    8902:	701a      	strb	r2, [r3, #0]
}
    8904:	bf00      	nop
    8906:	370c      	adds	r7, #12
    8908:	46bd      	mov	sp, r7
    890a:	f85d 7b04 	ldr.w	r7, [sp], #4
    890e:	4770      	bx	lr

00008910 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8910:	b480      	push	{r7}
    8912:	b083      	sub	sp, #12
    8914:	af00      	add	r7, sp, #0
    8916:	6078      	str	r0, [r7, #4]
    8918:	460b      	mov	r3, r1
    891a:	70fb      	strb	r3, [r7, #3]
    891c:	4613      	mov	r3, r2
    891e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8920:	78fb      	ldrb	r3, [r7, #3]
    8922:	687a      	ldr	r2, [r7, #4]
    8924:	015b      	lsls	r3, r3, #5
    8926:	4413      	add	r3, r2
    8928:	f203 1309 	addw	r3, r3, #265	; 0x109
    892c:	78ba      	ldrb	r2, [r7, #2]
    892e:	701a      	strb	r2, [r3, #0]
}
    8930:	bf00      	nop
    8932:	370c      	adds	r7, #12
    8934:	46bd      	mov	sp, r7
    8936:	f85d 7b04 	ldr.w	r7, [sp], #4
    893a:	4770      	bx	lr

0000893c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    893c:	b480      	push	{r7}
    893e:	b083      	sub	sp, #12
    8940:	af00      	add	r7, sp, #0
    8942:	6078      	str	r0, [r7, #4]
    8944:	460b      	mov	r3, r1
    8946:	70fb      	strb	r3, [r7, #3]
    8948:	4613      	mov	r3, r2
    894a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    894c:	78fb      	ldrb	r3, [r7, #3]
    894e:	687a      	ldr	r2, [r7, #4]
    8950:	015b      	lsls	r3, r3, #5
    8952:	4413      	add	r3, r2
    8954:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8958:	78ba      	ldrb	r2, [r7, #2]
    895a:	701a      	strb	r2, [r3, #0]
}
    895c:	bf00      	nop
    895e:	370c      	adds	r7, #12
    8960:	46bd      	mov	sp, r7
    8962:	f85d 7b04 	ldr.w	r7, [sp], #4
    8966:	4770      	bx	lr

00008968 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8968:	b480      	push	{r7}
    896a:	b085      	sub	sp, #20
    896c:	af00      	add	r7, sp, #0
    896e:	6078      	str	r0, [r7, #4]
    8970:	460b      	mov	r3, r1
    8972:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8974:	78fb      	ldrb	r3, [r7, #3]
    8976:	687a      	ldr	r2, [r7, #4]
    8978:	3308      	adds	r3, #8
    897a:	015b      	lsls	r3, r3, #5
    897c:	4413      	add	r3, r2
    897e:	781b      	ldrb	r3, [r3, #0]
    8980:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8982:	7bfb      	ldrb	r3, [r7, #15]
    8984:	f003 0307 	and.w	r3, r3, #7
    8988:	73fb      	strb	r3, [r7, #15]
	return tmp;
    898a:	7bfb      	ldrb	r3, [r7, #15]
}
    898c:	4618      	mov	r0, r3
    898e:	3714      	adds	r7, #20
    8990:	46bd      	mov	sp, r7
    8992:	f85d 7b04 	ldr.w	r7, [sp], #4
    8996:	4770      	bx	lr

00008998 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8998:	b480      	push	{r7}
    899a:	b085      	sub	sp, #20
    899c:	af00      	add	r7, sp, #0
    899e:	6078      	str	r0, [r7, #4]
    89a0:	460b      	mov	r3, r1
    89a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    89a4:	78fb      	ldrb	r3, [r7, #3]
    89a6:	687a      	ldr	r2, [r7, #4]
    89a8:	3308      	adds	r3, #8
    89aa:	015b      	lsls	r3, r3, #5
    89ac:	4413      	add	r3, r2
    89ae:	781b      	ldrb	r3, [r3, #0]
    89b0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    89b2:	7bfb      	ldrb	r3, [r7, #15]
    89b4:	091b      	lsrs	r3, r3, #4
    89b6:	b2db      	uxtb	r3, r3
    89b8:	f003 0307 	and.w	r3, r3, #7
    89bc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    89be:	7bfb      	ldrb	r3, [r7, #15]
}
    89c0:	4618      	mov	r0, r3
    89c2:	3714      	adds	r7, #20
    89c4:	46bd      	mov	sp, r7
    89c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    89ca:	4770      	bx	lr

000089cc <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    89cc:	b480      	push	{r7}
    89ce:	b083      	sub	sp, #12
    89d0:	af00      	add	r7, sp, #0
    89d2:	6078      	str	r0, [r7, #4]
    89d4:	460b      	mov	r3, r1
    89d6:	70fb      	strb	r3, [r7, #3]
    89d8:	4613      	mov	r3, r2
    89da:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    89dc:	78fb      	ldrb	r3, [r7, #3]
    89de:	687a      	ldr	r2, [r7, #4]
    89e0:	3308      	adds	r3, #8
    89e2:	015b      	lsls	r3, r3, #5
    89e4:	4413      	add	r3, r2
    89e6:	78ba      	ldrb	r2, [r7, #2]
    89e8:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    89ea:	bf00      	nop
    89ec:	370c      	adds	r7, #12
    89ee:	46bd      	mov	sp, r7
    89f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    89f4:	4770      	bx	lr

000089f6 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    89f6:	b480      	push	{r7}
    89f8:	b083      	sub	sp, #12
    89fa:	af00      	add	r7, sp, #0
    89fc:	6078      	str	r0, [r7, #4]
    89fe:	460b      	mov	r3, r1
    8a00:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8a02:	78fb      	ldrb	r3, [r7, #3]
    8a04:	687a      	ldr	r2, [r7, #4]
    8a06:	3308      	adds	r3, #8
    8a08:	015b      	lsls	r3, r3, #5
    8a0a:	4413      	add	r3, r2
    8a0c:	781b      	ldrb	r3, [r3, #0]
    8a0e:	b2db      	uxtb	r3, r3
}
    8a10:	4618      	mov	r0, r3
    8a12:	370c      	adds	r7, #12
    8a14:	46bd      	mov	sp, r7
    8a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a1a:	4770      	bx	lr

00008a1c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8a1c:	b480      	push	{r7}
    8a1e:	b083      	sub	sp, #12
    8a20:	af00      	add	r7, sp, #0
    8a22:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8a24:	687b      	ldr	r3, [r7, #4]
    8a26:	8b9b      	ldrh	r3, [r3, #28]
    8a28:	b29b      	uxth	r3, r3
}
    8a2a:	4618      	mov	r0, r3
    8a2c:	370c      	adds	r7, #12
    8a2e:	46bd      	mov	sp, r7
    8a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a34:	4770      	bx	lr

00008a36 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8a36:	b480      	push	{r7}
    8a38:	b083      	sub	sp, #12
    8a3a:	af00      	add	r7, sp, #0
    8a3c:	6078      	str	r0, [r7, #4]
    8a3e:	460b      	mov	r3, r1
    8a40:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8a42:	687b      	ldr	r3, [r7, #4]
    8a44:	887a      	ldrh	r2, [r7, #2]
    8a46:	839a      	strh	r2, [r3, #28]
}
    8a48:	bf00      	nop
    8a4a:	370c      	adds	r7, #12
    8a4c:	46bd      	mov	sp, r7
    8a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a52:	4770      	bx	lr

00008a54 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8a54:	b480      	push	{r7}
    8a56:	b083      	sub	sp, #12
    8a58:	af00      	add	r7, sp, #0
    8a5a:	6078      	str	r0, [r7, #4]
    8a5c:	460b      	mov	r3, r1
    8a5e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8a60:	687b      	ldr	r3, [r7, #4]
    8a62:	887a      	ldrh	r2, [r7, #2]
    8a64:	831a      	strh	r2, [r3, #24]
}
    8a66:	bf00      	nop
    8a68:	370c      	adds	r7, #12
    8a6a:	46bd      	mov	sp, r7
    8a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a70:	4770      	bx	lr

00008a72 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8a72:	b480      	push	{r7}
    8a74:	b083      	sub	sp, #12
    8a76:	af00      	add	r7, sp, #0
    8a78:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8a7a:	687b      	ldr	r3, [r7, #4]
    8a7c:	8b1b      	ldrh	r3, [r3, #24]
    8a7e:	b29b      	uxth	r3, r3
}
    8a80:	4618      	mov	r0, r3
    8a82:	370c      	adds	r7, #12
    8a84:	46bd      	mov	sp, r7
    8a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a8a:	4770      	bx	lr

00008a8c <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8a8c:	b480      	push	{r7}
    8a8e:	b083      	sub	sp, #12
    8a90:	af00      	add	r7, sp, #0
    8a92:	6078      	str	r0, [r7, #4]
    8a94:	460b      	mov	r3, r1
    8a96:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8a98:	687b      	ldr	r3, [r7, #4]
    8a9a:	887a      	ldrh	r2, [r7, #2]
    8a9c:	829a      	strh	r2, [r3, #20]
}
    8a9e:	bf00      	nop
    8aa0:	370c      	adds	r7, #12
    8aa2:	46bd      	mov	sp, r7
    8aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aa8:	4770      	bx	lr

00008aaa <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8aaa:	b480      	push	{r7}
    8aac:	b085      	sub	sp, #20
    8aae:	af00      	add	r7, sp, #0
    8ab0:	6078      	str	r0, [r7, #4]
    8ab2:	460b      	mov	r3, r1
    8ab4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8ab6:	687b      	ldr	r3, [r7, #4]
    8ab8:	789b      	ldrb	r3, [r3, #2]
    8aba:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8abc:	7bfa      	ldrb	r2, [r7, #15]
    8abe:	78fb      	ldrb	r3, [r7, #3]
    8ac0:	4013      	ands	r3, r2
    8ac2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8ac4:	7bfb      	ldrb	r3, [r7, #15]
}
    8ac6:	4618      	mov	r0, r3
    8ac8:	3714      	adds	r7, #20
    8aca:	46bd      	mov	sp, r7
    8acc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ad0:	4770      	bx	lr
	...

00008ad4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8ad4:	b580      	push	{r7, lr}
    8ad6:	b082      	sub	sp, #8
    8ad8:	af00      	add	r7, sp, #0
    8ada:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8adc:	687b      	ldr	r3, [r7, #4]
    8ade:	781b      	ldrb	r3, [r3, #0]
    8ae0:	b2db      	uxtb	r3, r3
    8ae2:	f023 0302 	bic.w	r3, r3, #2
    8ae6:	b2da      	uxtb	r2, r3
    8ae8:	687b      	ldr	r3, [r7, #4]
    8aea:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8aec:	2103      	movs	r1, #3
    8aee:	6878      	ldr	r0, [r7, #4]
    8af0:	4b02      	ldr	r3, [pc, #8]	; (8afc <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8af2:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8af4:	bf00      	nop
    8af6:	3708      	adds	r7, #8
    8af8:	46bd      	mov	sp, r7
    8afa:	bd80      	pop	{r7, pc}
    8afc:	00008787 	.word	0x00008787

00008b00 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8b00:	b580      	push	{r7, lr}
    8b02:	b084      	sub	sp, #16
    8b04:	af00      	add	r7, sp, #0
    8b06:	6078      	str	r0, [r7, #4]
    8b08:	460b      	mov	r3, r1
    8b0a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8b0c:	2103      	movs	r1, #3
    8b0e:	6878      	ldr	r0, [r7, #4]
    8b10:	4b06      	ldr	r3, [pc, #24]	; (8b2c <hri_usb_get_CTRLA_reg+0x2c>)
    8b12:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8b14:	687b      	ldr	r3, [r7, #4]
    8b16:	781b      	ldrb	r3, [r3, #0]
    8b18:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8b1a:	7bfa      	ldrb	r2, [r7, #15]
    8b1c:	78fb      	ldrb	r3, [r7, #3]
    8b1e:	4013      	ands	r3, r2
    8b20:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8b22:	7bfb      	ldrb	r3, [r7, #15]
}
    8b24:	4618      	mov	r0, r3
    8b26:	3710      	adds	r7, #16
    8b28:	46bd      	mov	sp, r7
    8b2a:	bd80      	pop	{r7, pc}
    8b2c:	00008787 	.word	0x00008787

00008b30 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8b30:	b580      	push	{r7, lr}
    8b32:	b082      	sub	sp, #8
    8b34:	af00      	add	r7, sp, #0
    8b36:	6078      	str	r0, [r7, #4]
    8b38:	460b      	mov	r3, r1
    8b3a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8b3c:	687b      	ldr	r3, [r7, #4]
    8b3e:	78fa      	ldrb	r2, [r7, #3]
    8b40:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8b42:	2103      	movs	r1, #3
    8b44:	6878      	ldr	r0, [r7, #4]
    8b46:	4b03      	ldr	r3, [pc, #12]	; (8b54 <hri_usb_write_CTRLA_reg+0x24>)
    8b48:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8b4a:	bf00      	nop
    8b4c:	3708      	adds	r7, #8
    8b4e:	46bd      	mov	sp, r7
    8b50:	bd80      	pop	{r7, pc}
    8b52:	bf00      	nop
    8b54:	00008787 	.word	0x00008787

00008b58 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8b58:	b580      	push	{r7, lr}
    8b5a:	b082      	sub	sp, #8
    8b5c:	af00      	add	r7, sp, #0
    8b5e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8b60:	2103      	movs	r1, #3
    8b62:	6878      	ldr	r0, [r7, #4]
    8b64:	4b04      	ldr	r3, [pc, #16]	; (8b78 <hri_usb_read_CTRLA_reg+0x20>)
    8b66:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8b68:	687b      	ldr	r3, [r7, #4]
    8b6a:	781b      	ldrb	r3, [r3, #0]
    8b6c:	b2db      	uxtb	r3, r3
}
    8b6e:	4618      	mov	r0, r3
    8b70:	3708      	adds	r7, #8
    8b72:	46bd      	mov	sp, r7
    8b74:	bd80      	pop	{r7, pc}
    8b76:	bf00      	nop
    8b78:	00008787 	.word	0x00008787

00008b7c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8b7c:	b480      	push	{r7}
    8b7e:	b083      	sub	sp, #12
    8b80:	af00      	add	r7, sp, #0
    8b82:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8b84:	687b      	ldr	r3, [r7, #4]
    8b86:	891b      	ldrh	r3, [r3, #8]
    8b88:	b29b      	uxth	r3, r3
    8b8a:	f023 0301 	bic.w	r3, r3, #1
    8b8e:	b29a      	uxth	r2, r3
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8b94:	bf00      	nop
    8b96:	370c      	adds	r7, #12
    8b98:	46bd      	mov	sp, r7
    8b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b9e:	4770      	bx	lr

00008ba0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8ba0:	b480      	push	{r7}
    8ba2:	b083      	sub	sp, #12
    8ba4:	af00      	add	r7, sp, #0
    8ba6:	6078      	str	r0, [r7, #4]
    8ba8:	460b      	mov	r3, r1
    8baa:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8bac:	687b      	ldr	r3, [r7, #4]
    8bae:	887a      	ldrh	r2, [r7, #2]
    8bb0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8bb2:	bf00      	nop
    8bb4:	370c      	adds	r7, #12
    8bb6:	46bd      	mov	sp, r7
    8bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bbc:	4770      	bx	lr

00008bbe <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8bbe:	b480      	push	{r7}
    8bc0:	b083      	sub	sp, #12
    8bc2:	af00      	add	r7, sp, #0
    8bc4:	6078      	str	r0, [r7, #4]
    8bc6:	460b      	mov	r3, r1
    8bc8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	78fa      	ldrb	r2, [r7, #3]
    8bce:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8bd0:	bf00      	nop
    8bd2:	370c      	adds	r7, #12
    8bd4:	46bd      	mov	sp, r7
    8bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bda:	4770      	bx	lr

00008bdc <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8bdc:	b480      	push	{r7}
    8bde:	b083      	sub	sp, #12
    8be0:	af00      	add	r7, sp, #0
    8be2:	6078      	str	r0, [r7, #4]
    8be4:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8be6:	687b      	ldr	r3, [r7, #4]
    8be8:	683a      	ldr	r2, [r7, #0]
    8bea:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8bec:	bf00      	nop
    8bee:	370c      	adds	r7, #12
    8bf0:	46bd      	mov	sp, r7
    8bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bf6:	4770      	bx	lr

00008bf8 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8bf8:	b480      	push	{r7}
    8bfa:	b083      	sub	sp, #12
    8bfc:	af00      	add	r7, sp, #0
    8bfe:	6078      	str	r0, [r7, #4]
    8c00:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8c02:	2300      	movs	r3, #0
}
    8c04:	4618      	mov	r0, r3
    8c06:	370c      	adds	r7, #12
    8c08:	46bd      	mov	sp, r7
    8c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c0e:	4770      	bx	lr

00008c10 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8c10:	b480      	push	{r7}
    8c12:	b085      	sub	sp, #20
    8c14:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8c16:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c1a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8c1c:	4b28      	ldr	r3, [pc, #160]	; (8cc0 <_usb_load_calib+0xb0>)
    8c1e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8c20:	f003 031f 	and.w	r3, r3, #31
    8c24:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8c26:	4b26      	ldr	r3, [pc, #152]	; (8cc0 <_usb_load_calib+0xb0>)
    8c28:	681b      	ldr	r3, [r3, #0]
    8c2a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8c2c:	f003 031f 	and.w	r3, r3, #31
    8c30:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8c32:	4b23      	ldr	r3, [pc, #140]	; (8cc0 <_usb_load_calib+0xb0>)
    8c34:	681b      	ldr	r3, [r3, #0]
    8c36:	0a9b      	lsrs	r3, r3, #10
    8c38:	f003 0307 	and.w	r3, r3, #7
    8c3c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8c3e:	68fb      	ldr	r3, [r7, #12]
    8c40:	2b00      	cmp	r3, #0
    8c42:	d002      	beq.n	8c4a <_usb_load_calib+0x3a>
    8c44:	68fb      	ldr	r3, [r7, #12]
    8c46:	2b1f      	cmp	r3, #31
    8c48:	d101      	bne.n	8c4e <_usb_load_calib+0x3e>
		pad_transn = 9;
    8c4a:	2309      	movs	r3, #9
    8c4c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8c4e:	68bb      	ldr	r3, [r7, #8]
    8c50:	2b00      	cmp	r3, #0
    8c52:	d002      	beq.n	8c5a <_usb_load_calib+0x4a>
    8c54:	68bb      	ldr	r3, [r7, #8]
    8c56:	2b1f      	cmp	r3, #31
    8c58:	d101      	bne.n	8c5e <_usb_load_calib+0x4e>
		pad_transp = 25;
    8c5a:	2319      	movs	r3, #25
    8c5c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8c5e:	687b      	ldr	r3, [r7, #4]
    8c60:	2b00      	cmp	r3, #0
    8c62:	d002      	beq.n	8c6a <_usb_load_calib+0x5a>
    8c64:	687b      	ldr	r3, [r7, #4]
    8c66:	2b07      	cmp	r3, #7
    8c68:	d101      	bne.n	8c6e <_usb_load_calib+0x5e>
		pad_trim = 6;
    8c6a:	2306      	movs	r3, #6
    8c6c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8c6e:	68fb      	ldr	r3, [r7, #12]
    8c70:	b29b      	uxth	r3, r3
    8c72:	019b      	lsls	r3, r3, #6
    8c74:	b29b      	uxth	r3, r3
    8c76:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8c7a:	b29a      	uxth	r2, r3
    8c7c:	68bb      	ldr	r3, [r7, #8]
    8c7e:	b29b      	uxth	r3, r3
    8c80:	f003 031f 	and.w	r3, r3, #31
    8c84:	b29b      	uxth	r3, r3
    8c86:	4313      	orrs	r3, r2
    8c88:	b29a      	uxth	r2, r3
    8c8a:	687b      	ldr	r3, [r7, #4]
    8c8c:	b29b      	uxth	r3, r3
    8c8e:	031b      	lsls	r3, r3, #12
    8c90:	b29b      	uxth	r3, r3
    8c92:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8c96:	b29b      	uxth	r3, r3
    8c98:	4313      	orrs	r3, r2
    8c9a:	b29a      	uxth	r2, r3
    8c9c:	683b      	ldr	r3, [r7, #0]
    8c9e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8ca0:	683a      	ldr	r2, [r7, #0]
    8ca2:	78d3      	ldrb	r3, [r2, #3]
    8ca4:	f043 0303 	orr.w	r3, r3, #3
    8ca8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8caa:	683a      	ldr	r2, [r7, #0]
    8cac:	78d3      	ldrb	r3, [r2, #3]
    8cae:	f043 030c 	orr.w	r3, r3, #12
    8cb2:	70d3      	strb	r3, [r2, #3]
}
    8cb4:	bf00      	nop
    8cb6:	3714      	adds	r7, #20
    8cb8:	46bd      	mov	sp, r7
    8cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cbe:	4770      	bx	lr
    8cc0:	00800084 	.word	0x00800084

00008cc4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8cc4:	b580      	push	{r7, lr}
    8cc6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8cc8:	bf00      	nop
    8cca:	2203      	movs	r2, #3
    8ccc:	2100      	movs	r1, #0
    8cce:	4804      	ldr	r0, [pc, #16]	; (8ce0 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8cd0:	4b04      	ldr	r3, [pc, #16]	; (8ce4 <_usb_d_dev_wait_dpll_rdy+0x20>)
    8cd2:	4798      	blx	r3
    8cd4:	4603      	mov	r3, r0
    8cd6:	2b03      	cmp	r3, #3
    8cd8:	d1f7      	bne.n	8cca <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8cda:	bf00      	nop
    8cdc:	bd80      	pop	{r7, pc}
    8cde:	bf00      	nop
    8ce0:	40001000 	.word	0x40001000
    8ce4:	000086f9 	.word	0x000086f9

00008ce8 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8ce8:	b580      	push	{r7, lr}
    8cea:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8cec:	480e      	ldr	r0, [pc, #56]	; (8d28 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8cee:	4b0f      	ldr	r3, [pc, #60]	; (8d2c <_usb_d_dev_wait_dfll_rdy+0x44>)
    8cf0:	4798      	blx	r3
    8cf2:	4603      	mov	r3, r0
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	d00a      	beq.n	8d0e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8cf8:	bf00      	nop
    8cfa:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8cfe:	480a      	ldr	r0, [pc, #40]	; (8d28 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8d00:	4b0b      	ldr	r3, [pc, #44]	; (8d30 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8d02:	4798      	blx	r3
    8d04:	4603      	mov	r3, r0
    8d06:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8d0a:	d1f6      	bne.n	8cfa <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8d0c:	e009      	b.n	8d22 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8d0e:	bf00      	nop
    8d10:	f44f 7180 	mov.w	r1, #256	; 0x100
    8d14:	4804      	ldr	r0, [pc, #16]	; (8d28 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8d16:	4b06      	ldr	r3, [pc, #24]	; (8d30 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8d18:	4798      	blx	r3
    8d1a:	4603      	mov	r3, r0
    8d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8d20:	d1f6      	bne.n	8d10 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8d22:	bf00      	nop
    8d24:	bd80      	pop	{r7, pc}
    8d26:	bf00      	nop
    8d28:	40001000 	.word	0x40001000
    8d2c:	00008757 	.word	0x00008757
    8d30:	00008731 	.word	0x00008731

00008d34 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8d34:	b580      	push	{r7, lr}
    8d36:	b082      	sub	sp, #8
    8d38:	af00      	add	r7, sp, #0
    8d3a:	4603      	mov	r3, r0
    8d3c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8d3e:	79fb      	ldrb	r3, [r7, #7]
    8d40:	2b00      	cmp	r3, #0
    8d42:	d102      	bne.n	8d4a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8d44:	4b05      	ldr	r3, [pc, #20]	; (8d5c <_usb_d_dev_wait_clk_rdy+0x28>)
    8d46:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8d48:	e004      	b.n	8d54 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8d4a:	79fb      	ldrb	r3, [r7, #7]
    8d4c:	2b01      	cmp	r3, #1
    8d4e:	d101      	bne.n	8d54 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8d50:	4b03      	ldr	r3, [pc, #12]	; (8d60 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8d52:	4798      	blx	r3
}
    8d54:	bf00      	nop
    8d56:	3708      	adds	r7, #8
    8d58:	46bd      	mov	sp, r7
    8d5a:	bd80      	pop	{r7, pc}
    8d5c:	00008ce9 	.word	0x00008ce9
    8d60:	00008cc5 	.word	0x00008cc5

00008d64 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8d64:	b580      	push	{r7, lr}
    8d66:	b082      	sub	sp, #8
    8d68:	af00      	add	r7, sp, #0
    8d6a:	4603      	mov	r3, r0
    8d6c:	6039      	str	r1, [r7, #0]
    8d6e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8d70:	683b      	ldr	r3, [r7, #0]
    8d72:	b2da      	uxtb	r2, r3
    8d74:	79fb      	ldrb	r3, [r7, #7]
    8d76:	4619      	mov	r1, r3
    8d78:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d7c:	4b02      	ldr	r3, [pc, #8]	; (8d88 <_usbd_ep_int_ack+0x24>)
    8d7e:	4798      	blx	r3
}
    8d80:	bf00      	nop
    8d82:	3708      	adds	r7, #8
    8d84:	46bd      	mov	sp, r7
    8d86:	bd80      	pop	{r7, pc}
    8d88:	0000883d 	.word	0x0000883d

00008d8c <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8d8c:	b580      	push	{r7, lr}
    8d8e:	b082      	sub	sp, #8
    8d90:	af00      	add	r7, sp, #0
    8d92:	4603      	mov	r3, r0
    8d94:	6039      	str	r1, [r7, #0]
    8d96:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8d98:	683b      	ldr	r3, [r7, #0]
    8d9a:	b2da      	uxtb	r2, r3
    8d9c:	79fb      	ldrb	r3, [r7, #7]
    8d9e:	4619      	mov	r1, r3
    8da0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8da4:	4b02      	ldr	r3, [pc, #8]	; (8db0 <_usbd_ep_int_en+0x24>)
    8da6:	4798      	blx	r3
}
    8da8:	bf00      	nop
    8daa:	3708      	adds	r7, #8
    8dac:	46bd      	mov	sp, r7
    8dae:	bd80      	pop	{r7, pc}
    8db0:	00008911 	.word	0x00008911

00008db4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8db4:	b580      	push	{r7, lr}
    8db6:	b082      	sub	sp, #8
    8db8:	af00      	add	r7, sp, #0
    8dba:	4603      	mov	r3, r0
    8dbc:	6039      	str	r1, [r7, #0]
    8dbe:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8dc0:	683b      	ldr	r3, [r7, #0]
    8dc2:	b2da      	uxtb	r2, r3
    8dc4:	79fb      	ldrb	r3, [r7, #7]
    8dc6:	4619      	mov	r1, r3
    8dc8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8dcc:	4b02      	ldr	r3, [pc, #8]	; (8dd8 <_usbd_ep_int_dis+0x24>)
    8dce:	4798      	blx	r3
}
    8dd0:	bf00      	nop
    8dd2:	3708      	adds	r7, #8
    8dd4:	46bd      	mov	sp, r7
    8dd6:	bd80      	pop	{r7, pc}
    8dd8:	0000893d 	.word	0x0000893d

00008ddc <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8ddc:	b580      	push	{r7, lr}
    8dde:	b082      	sub	sp, #8
    8de0:	af00      	add	r7, sp, #0
    8de2:	4603      	mov	r3, r0
    8de4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8de6:	79fb      	ldrb	r3, [r7, #7]
    8de8:	4619      	mov	r1, r3
    8dea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8dee:	4b06      	ldr	r3, [pc, #24]	; (8e08 <_usbd_ep_is_ctrl+0x2c>)
    8df0:	4798      	blx	r3
    8df2:	4603      	mov	r3, r0
    8df4:	2b11      	cmp	r3, #17
    8df6:	bf0c      	ite	eq
    8df8:	2301      	moveq	r3, #1
    8dfa:	2300      	movne	r3, #0
    8dfc:	b2db      	uxtb	r3, r3
}
    8dfe:	4618      	mov	r0, r3
    8e00:	3708      	adds	r7, #8
    8e02:	46bd      	mov	sp, r7
    8e04:	bd80      	pop	{r7, pc}
    8e06:	bf00      	nop
    8e08:	000089f7 	.word	0x000089f7

00008e0c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8e0c:	b580      	push	{r7, lr}
    8e0e:	b082      	sub	sp, #8
    8e10:	af00      	add	r7, sp, #0
    8e12:	4603      	mov	r3, r0
    8e14:	71fb      	strb	r3, [r7, #7]
    8e16:	460b      	mov	r3, r1
    8e18:	71bb      	strb	r3, [r7, #6]
    8e1a:	4613      	mov	r3, r2
    8e1c:	717b      	strb	r3, [r7, #5]
	if (st) {
    8e1e:	797b      	ldrb	r3, [r7, #5]
    8e20:	2b00      	cmp	r3, #0
    8e22:	d00b      	beq.n	8e3c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8e24:	79bb      	ldrb	r3, [r7, #6]
    8e26:	2210      	movs	r2, #16
    8e28:	fa02 f303 	lsl.w	r3, r2, r3
    8e2c:	b2da      	uxtb	r2, r3
    8e2e:	79fb      	ldrb	r3, [r7, #7]
    8e30:	4619      	mov	r1, r3
    8e32:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e36:	4b09      	ldr	r3, [pc, #36]	; (8e5c <_usbd_ep_set_stall+0x50>)
    8e38:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8e3a:	e00a      	b.n	8e52 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8e3c:	79bb      	ldrb	r3, [r7, #6]
    8e3e:	2210      	movs	r2, #16
    8e40:	fa02 f303 	lsl.w	r3, r2, r3
    8e44:	b2da      	uxtb	r2, r3
    8e46:	79fb      	ldrb	r3, [r7, #7]
    8e48:	4619      	mov	r1, r3
    8e4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e4e:	4b04      	ldr	r3, [pc, #16]	; (8e60 <_usbd_ep_set_stall+0x54>)
    8e50:	4798      	blx	r3
}
    8e52:	bf00      	nop
    8e54:	3708      	adds	r7, #8
    8e56:	46bd      	mov	sp, r7
    8e58:	bd80      	pop	{r7, pc}
    8e5a:	bf00      	nop
    8e5c:	00008869 	.word	0x00008869
    8e60:	000088bd 	.word	0x000088bd

00008e64 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8e64:	b580      	push	{r7, lr}
    8e66:	b084      	sub	sp, #16
    8e68:	af00      	add	r7, sp, #0
    8e6a:	4603      	mov	r3, r0
    8e6c:	460a      	mov	r2, r1
    8e6e:	71fb      	strb	r3, [r7, #7]
    8e70:	4613      	mov	r3, r2
    8e72:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8e74:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8e78:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8e7a:	79fb      	ldrb	r3, [r7, #7]
    8e7c:	4619      	mov	r1, r3
    8e7e:	68f8      	ldr	r0, [r7, #12]
    8e80:	4b08      	ldr	r3, [pc, #32]	; (8ea4 <_usbd_ep_is_stalled+0x40>)
    8e82:	4798      	blx	r3
    8e84:	4603      	mov	r3, r0
    8e86:	4619      	mov	r1, r3
    8e88:	79bb      	ldrb	r3, [r7, #6]
    8e8a:	2210      	movs	r2, #16
    8e8c:	fa02 f303 	lsl.w	r3, r2, r3
    8e90:	400b      	ands	r3, r1
    8e92:	2b00      	cmp	r3, #0
    8e94:	bf14      	ite	ne
    8e96:	2301      	movne	r3, #1
    8e98:	2300      	moveq	r3, #0
    8e9a:	b2db      	uxtb	r3, r3
}
    8e9c:	4618      	mov	r0, r3
    8e9e:	3710      	adds	r7, #16
    8ea0:	46bd      	mov	sp, r7
    8ea2:	bd80      	pop	{r7, pc}
    8ea4:	00008895 	.word	0x00008895

00008ea8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8ea8:	b580      	push	{r7, lr}
    8eaa:	b084      	sub	sp, #16
    8eac:	af00      	add	r7, sp, #0
    8eae:	4603      	mov	r3, r0
    8eb0:	460a      	mov	r2, r1
    8eb2:	71fb      	strb	r3, [r7, #7]
    8eb4:	4613      	mov	r3, r2
    8eb6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8eb8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ebc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8ebe:	79fb      	ldrb	r3, [r7, #7]
    8ec0:	4619      	mov	r1, r3
    8ec2:	68f8      	ldr	r0, [r7, #12]
    8ec4:	4b08      	ldr	r3, [pc, #32]	; (8ee8 <_usbd_ep_is_stall_sent+0x40>)
    8ec6:	4798      	blx	r3
    8ec8:	4603      	mov	r3, r0
    8eca:	4619      	mov	r1, r3
    8ecc:	79bb      	ldrb	r3, [r7, #6]
    8ece:	2220      	movs	r2, #32
    8ed0:	fa02 f303 	lsl.w	r3, r2, r3
    8ed4:	400b      	ands	r3, r1
    8ed6:	2b00      	cmp	r3, #0
    8ed8:	bf14      	ite	ne
    8eda:	2301      	movne	r3, #1
    8edc:	2300      	moveq	r3, #0
    8ede:	b2db      	uxtb	r3, r3
}
    8ee0:	4618      	mov	r0, r3
    8ee2:	3710      	adds	r7, #16
    8ee4:	46bd      	mov	sp, r7
    8ee6:	bd80      	pop	{r7, pc}
    8ee8:	00008815 	.word	0x00008815

00008eec <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8eec:	b580      	push	{r7, lr}
    8eee:	b082      	sub	sp, #8
    8ef0:	af00      	add	r7, sp, #0
    8ef2:	4603      	mov	r3, r0
    8ef4:	460a      	mov	r2, r1
    8ef6:	71fb      	strb	r3, [r7, #7]
    8ef8:	4613      	mov	r3, r2
    8efa:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8efc:	79bb      	ldrb	r3, [r7, #6]
    8efe:	2220      	movs	r2, #32
    8f00:	409a      	lsls	r2, r3
    8f02:	79fb      	ldrb	r3, [r7, #7]
    8f04:	4611      	mov	r1, r2
    8f06:	4618      	mov	r0, r3
    8f08:	4b02      	ldr	r3, [pc, #8]	; (8f14 <_usbd_ep_ack_stall+0x28>)
    8f0a:	4798      	blx	r3
}
    8f0c:	bf00      	nop
    8f0e:	3708      	adds	r7, #8
    8f10:	46bd      	mov	sp, r7
    8f12:	bd80      	pop	{r7, pc}
    8f14:	00008d65 	.word	0x00008d65

00008f18 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8f18:	b580      	push	{r7, lr}
    8f1a:	b082      	sub	sp, #8
    8f1c:	af00      	add	r7, sp, #0
    8f1e:	4603      	mov	r3, r0
    8f20:	71fb      	strb	r3, [r7, #7]
    8f22:	460b      	mov	r3, r1
    8f24:	71bb      	strb	r3, [r7, #6]
    8f26:	4613      	mov	r3, r2
    8f28:	717b      	strb	r3, [r7, #5]
	if (en) {
    8f2a:	797b      	ldrb	r3, [r7, #5]
    8f2c:	2b00      	cmp	r3, #0
    8f2e:	d008      	beq.n	8f42 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8f30:	79bb      	ldrb	r3, [r7, #6]
    8f32:	2220      	movs	r2, #32
    8f34:	409a      	lsls	r2, r3
    8f36:	79fb      	ldrb	r3, [r7, #7]
    8f38:	4611      	mov	r1, r2
    8f3a:	4618      	mov	r0, r3
    8f3c:	4b07      	ldr	r3, [pc, #28]	; (8f5c <_usbd_ep_int_stall_en+0x44>)
    8f3e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8f40:	e007      	b.n	8f52 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8f42:	79bb      	ldrb	r3, [r7, #6]
    8f44:	2220      	movs	r2, #32
    8f46:	409a      	lsls	r2, r3
    8f48:	79fb      	ldrb	r3, [r7, #7]
    8f4a:	4611      	mov	r1, r2
    8f4c:	4618      	mov	r0, r3
    8f4e:	4b04      	ldr	r3, [pc, #16]	; (8f60 <_usbd_ep_int_stall_en+0x48>)
    8f50:	4798      	blx	r3
}
    8f52:	bf00      	nop
    8f54:	3708      	adds	r7, #8
    8f56:	46bd      	mov	sp, r7
    8f58:	bd80      	pop	{r7, pc}
    8f5a:	bf00      	nop
    8f5c:	00008d8d 	.word	0x00008d8d
    8f60:	00008db5 	.word	0x00008db5

00008f64 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8f64:	b580      	push	{r7, lr}
    8f66:	b082      	sub	sp, #8
    8f68:	af00      	add	r7, sp, #0
    8f6a:	4603      	mov	r3, r0
    8f6c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8f6e:	79fb      	ldrb	r3, [r7, #7]
    8f70:	4619      	mov	r1, r3
    8f72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f76:	4b03      	ldr	r3, [pc, #12]	; (8f84 <_usbd_ep_stop_setup+0x20>)
    8f78:	4798      	blx	r3
}
    8f7a:	bf00      	nop
    8f7c:	3708      	adds	r7, #8
    8f7e:	46bd      	mov	sp, r7
    8f80:	bd80      	pop	{r7, pc}
    8f82:	bf00      	nop
    8f84:	000088e9 	.word	0x000088e9

00008f88 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8f88:	b580      	push	{r7, lr}
    8f8a:	b082      	sub	sp, #8
    8f8c:	af00      	add	r7, sp, #0
    8f8e:	4603      	mov	r3, r0
    8f90:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8f92:	79fb      	ldrb	r3, [r7, #7]
    8f94:	2210      	movs	r2, #16
    8f96:	4619      	mov	r1, r3
    8f98:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f9c:	4b05      	ldr	r3, [pc, #20]	; (8fb4 <_usbd_ep_is_setup+0x2c>)
    8f9e:	4798      	blx	r3
    8fa0:	4603      	mov	r3, r0
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	bf14      	ite	ne
    8fa6:	2301      	movne	r3, #1
    8fa8:	2300      	moveq	r3, #0
    8faa:	b2db      	uxtb	r3, r3
}
    8fac:	4618      	mov	r0, r3
    8fae:	3708      	adds	r7, #8
    8fb0:	46bd      	mov	sp, r7
    8fb2:	bd80      	pop	{r7, pc}
    8fb4:	000087df 	.word	0x000087df

00008fb8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8fb8:	b580      	push	{r7, lr}
    8fba:	b082      	sub	sp, #8
    8fbc:	af00      	add	r7, sp, #0
    8fbe:	4603      	mov	r3, r0
    8fc0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8fc2:	79fb      	ldrb	r3, [r7, #7]
    8fc4:	2110      	movs	r1, #16
    8fc6:	4618      	mov	r0, r3
    8fc8:	4b02      	ldr	r3, [pc, #8]	; (8fd4 <_usbd_ep_ack_setup+0x1c>)
    8fca:	4798      	blx	r3
}
    8fcc:	bf00      	nop
    8fce:	3708      	adds	r7, #8
    8fd0:	46bd      	mov	sp, r7
    8fd2:	bd80      	pop	{r7, pc}
    8fd4:	00008d65 	.word	0x00008d65

00008fd8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8fd8:	b580      	push	{r7, lr}
    8fda:	b082      	sub	sp, #8
    8fdc:	af00      	add	r7, sp, #0
    8fde:	4603      	mov	r3, r0
    8fe0:	71fb      	strb	r3, [r7, #7]
    8fe2:	460b      	mov	r3, r1
    8fe4:	71bb      	strb	r3, [r7, #6]
    8fe6:	4613      	mov	r3, r2
    8fe8:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8fea:	797b      	ldrb	r3, [r7, #5]
    8fec:	2b00      	cmp	r3, #0
    8fee:	d00b      	beq.n	9008 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8ff0:	79bb      	ldrb	r3, [r7, #6]
    8ff2:	2201      	movs	r2, #1
    8ff4:	fa02 f303 	lsl.w	r3, r2, r3
    8ff8:	b2da      	uxtb	r2, r3
    8ffa:	79fb      	ldrb	r3, [r7, #7]
    8ffc:	4619      	mov	r1, r3
    8ffe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9002:	4b09      	ldr	r3, [pc, #36]	; (9028 <_usbd_ep_set_toggle+0x50>)
    9004:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    9006:	e00a      	b.n	901e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9008:	79bb      	ldrb	r3, [r7, #6]
    900a:	2201      	movs	r2, #1
    900c:	fa02 f303 	lsl.w	r3, r2, r3
    9010:	b2da      	uxtb	r2, r3
    9012:	79fb      	ldrb	r3, [r7, #7]
    9014:	4619      	mov	r1, r3
    9016:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    901a:	4b04      	ldr	r3, [pc, #16]	; (902c <_usbd_ep_set_toggle+0x54>)
    901c:	4798      	blx	r3
}
    901e:	bf00      	nop
    9020:	3708      	adds	r7, #8
    9022:	46bd      	mov	sp, r7
    9024:	bd80      	pop	{r7, pc}
    9026:	bf00      	nop
    9028:	00008869 	.word	0x00008869
    902c:	000088bd 	.word	0x000088bd

00009030 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9030:	b580      	push	{r7, lr}
    9032:	b082      	sub	sp, #8
    9034:	af00      	add	r7, sp, #0
    9036:	4603      	mov	r3, r0
    9038:	460a      	mov	r2, r1
    903a:	71fb      	strb	r3, [r7, #7]
    903c:	4613      	mov	r3, r2
    903e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9040:	79bb      	ldrb	r3, [r7, #6]
    9042:	2201      	movs	r2, #1
    9044:	409a      	lsls	r2, r3
    9046:	79fb      	ldrb	r3, [r7, #7]
    9048:	4611      	mov	r1, r2
    904a:	4618      	mov	r0, r3
    904c:	4b02      	ldr	r3, [pc, #8]	; (9058 <_usbd_ep_ack_io_cpt+0x28>)
    904e:	4798      	blx	r3
}
    9050:	bf00      	nop
    9052:	3708      	adds	r7, #8
    9054:	46bd      	mov	sp, r7
    9056:	bd80      	pop	{r7, pc}
    9058:	00008d65 	.word	0x00008d65

0000905c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    905c:	b480      	push	{r7}
    905e:	b085      	sub	sp, #20
    9060:	af00      	add	r7, sp, #0
    9062:	4603      	mov	r3, r0
    9064:	603a      	str	r2, [r7, #0]
    9066:	71fb      	strb	r3, [r7, #7]
    9068:	460b      	mov	r3, r1
    906a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    906c:	79fa      	ldrb	r2, [r7, #7]
    906e:	79bb      	ldrb	r3, [r7, #6]
    9070:	0052      	lsls	r2, r2, #1
    9072:	4413      	add	r3, r2
    9074:	011b      	lsls	r3, r3, #4
    9076:	4a06      	ldr	r2, [pc, #24]	; (9090 <_usbd_ep_set_buf+0x34>)
    9078:	4413      	add	r3, r2
    907a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    907c:	68fb      	ldr	r3, [r7, #12]
    907e:	683a      	ldr	r2, [r7, #0]
    9080:	601a      	str	r2, [r3, #0]
}
    9082:	bf00      	nop
    9084:	3714      	adds	r7, #20
    9086:	46bd      	mov	sp, r7
    9088:	f85d 7b04 	ldr.w	r7, [sp], #4
    908c:	4770      	bx	lr
    908e:	bf00      	nop
    9090:	20000b58 	.word	0x20000b58

00009094 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9094:	b480      	push	{r7}
    9096:	b085      	sub	sp, #20
    9098:	af00      	add	r7, sp, #0
    909a:	4603      	mov	r3, r0
    909c:	71fb      	strb	r3, [r7, #7]
    909e:	460b      	mov	r3, r1
    90a0:	71bb      	strb	r3, [r7, #6]
    90a2:	4613      	mov	r3, r2
    90a4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    90a6:	79fa      	ldrb	r2, [r7, #7]
    90a8:	79bb      	ldrb	r3, [r7, #6]
    90aa:	0052      	lsls	r2, r2, #1
    90ac:	4413      	add	r3, r2
    90ae:	011b      	lsls	r3, r3, #4
    90b0:	4a08      	ldr	r2, [pc, #32]	; (90d4 <_usbd_ep_set_in_count+0x40>)
    90b2:	4413      	add	r3, r2
    90b4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    90b6:	88bb      	ldrh	r3, [r7, #4]
    90b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    90bc:	b299      	uxth	r1, r3
    90be:	68fa      	ldr	r2, [r7, #12]
    90c0:	6853      	ldr	r3, [r2, #4]
    90c2:	f361 339b 	bfi	r3, r1, #14, #14
    90c6:	6053      	str	r3, [r2, #4]
}
    90c8:	bf00      	nop
    90ca:	3714      	adds	r7, #20
    90cc:	46bd      	mov	sp, r7
    90ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    90d2:	4770      	bx	lr
    90d4:	20000b58 	.word	0x20000b58

000090d8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    90d8:	b480      	push	{r7}
    90da:	b085      	sub	sp, #20
    90dc:	af00      	add	r7, sp, #0
    90de:	4603      	mov	r3, r0
    90e0:	71fb      	strb	r3, [r7, #7]
    90e2:	460b      	mov	r3, r1
    90e4:	71bb      	strb	r3, [r7, #6]
    90e6:	4613      	mov	r3, r2
    90e8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    90ea:	79fa      	ldrb	r2, [r7, #7]
    90ec:	79bb      	ldrb	r3, [r7, #6]
    90ee:	0052      	lsls	r2, r2, #1
    90f0:	4413      	add	r3, r2
    90f2:	011b      	lsls	r3, r3, #4
    90f4:	4a08      	ldr	r2, [pc, #32]	; (9118 <_usbd_ep_set_in_size+0x40>)
    90f6:	4413      	add	r3, r2
    90f8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    90fa:	88bb      	ldrh	r3, [r7, #4]
    90fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9100:	b299      	uxth	r1, r3
    9102:	68fa      	ldr	r2, [r7, #12]
    9104:	6853      	ldr	r3, [r2, #4]
    9106:	f361 030d 	bfi	r3, r1, #0, #14
    910a:	6053      	str	r3, [r2, #4]
}
    910c:	bf00      	nop
    910e:	3714      	adds	r7, #20
    9110:	46bd      	mov	sp, r7
    9112:	f85d 7b04 	ldr.w	r7, [sp], #4
    9116:	4770      	bx	lr
    9118:	20000b58 	.word	0x20000b58

0000911c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    911c:	b480      	push	{r7}
    911e:	b085      	sub	sp, #20
    9120:	af00      	add	r7, sp, #0
    9122:	4603      	mov	r3, r0
    9124:	71fb      	strb	r3, [r7, #7]
    9126:	460b      	mov	r3, r1
    9128:	71bb      	strb	r3, [r7, #6]
    912a:	4613      	mov	r3, r2
    912c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    912e:	79fa      	ldrb	r2, [r7, #7]
    9130:	79bb      	ldrb	r3, [r7, #6]
    9132:	0052      	lsls	r2, r2, #1
    9134:	4413      	add	r3, r2
    9136:	011b      	lsls	r3, r3, #4
    9138:	4a08      	ldr	r2, [pc, #32]	; (915c <_usbd_ep_set_out_count+0x40>)
    913a:	4413      	add	r3, r2
    913c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    913e:	88bb      	ldrh	r3, [r7, #4]
    9140:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9144:	b299      	uxth	r1, r3
    9146:	68fa      	ldr	r2, [r7, #12]
    9148:	6853      	ldr	r3, [r2, #4]
    914a:	f361 030d 	bfi	r3, r1, #0, #14
    914e:	6053      	str	r3, [r2, #4]
}
    9150:	bf00      	nop
    9152:	3714      	adds	r7, #20
    9154:	46bd      	mov	sp, r7
    9156:	f85d 7b04 	ldr.w	r7, [sp], #4
    915a:	4770      	bx	lr
    915c:	20000b58 	.word	0x20000b58

00009160 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9160:	b480      	push	{r7}
    9162:	b085      	sub	sp, #20
    9164:	af00      	add	r7, sp, #0
    9166:	4603      	mov	r3, r0
    9168:	71fb      	strb	r3, [r7, #7]
    916a:	460b      	mov	r3, r1
    916c:	71bb      	strb	r3, [r7, #6]
    916e:	4613      	mov	r3, r2
    9170:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9172:	79fa      	ldrb	r2, [r7, #7]
    9174:	79bb      	ldrb	r3, [r7, #6]
    9176:	0052      	lsls	r2, r2, #1
    9178:	4413      	add	r3, r2
    917a:	011b      	lsls	r3, r3, #4
    917c:	4a08      	ldr	r2, [pc, #32]	; (91a0 <_usbd_ep_set_out_size+0x40>)
    917e:	4413      	add	r3, r2
    9180:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9182:	88bb      	ldrh	r3, [r7, #4]
    9184:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9188:	b299      	uxth	r1, r3
    918a:	68fa      	ldr	r2, [r7, #12]
    918c:	6853      	ldr	r3, [r2, #4]
    918e:	f361 339b 	bfi	r3, r1, #14, #14
    9192:	6053      	str	r3, [r2, #4]
}
    9194:	bf00      	nop
    9196:	3714      	adds	r7, #20
    9198:	46bd      	mov	sp, r7
    919a:	f85d 7b04 	ldr.w	r7, [sp], #4
    919e:	4770      	bx	lr
    91a0:	20000b58 	.word	0x20000b58

000091a4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    91a4:	b580      	push	{r7, lr}
    91a6:	b084      	sub	sp, #16
    91a8:	af00      	add	r7, sp, #0
    91aa:	60ba      	str	r2, [r7, #8]
    91ac:	607b      	str	r3, [r7, #4]
    91ae:	4603      	mov	r3, r0
    91b0:	73fb      	strb	r3, [r7, #15]
    91b2:	460b      	mov	r3, r1
    91b4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    91b6:	68bb      	ldr	r3, [r7, #8]
    91b8:	b29a      	uxth	r2, r3
    91ba:	7bb9      	ldrb	r1, [r7, #14]
    91bc:	7bfb      	ldrb	r3, [r7, #15]
    91be:	4618      	mov	r0, r3
    91c0:	4b06      	ldr	r3, [pc, #24]	; (91dc <_usbd_ep_set_in_trans+0x38>)
    91c2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    91c4:	687b      	ldr	r3, [r7, #4]
    91c6:	b29a      	uxth	r2, r3
    91c8:	7bb9      	ldrb	r1, [r7, #14]
    91ca:	7bfb      	ldrb	r3, [r7, #15]
    91cc:	4618      	mov	r0, r3
    91ce:	4b04      	ldr	r3, [pc, #16]	; (91e0 <_usbd_ep_set_in_trans+0x3c>)
    91d0:	4798      	blx	r3
}
    91d2:	bf00      	nop
    91d4:	3710      	adds	r7, #16
    91d6:	46bd      	mov	sp, r7
    91d8:	bd80      	pop	{r7, pc}
    91da:	bf00      	nop
    91dc:	000090d9 	.word	0x000090d9
    91e0:	00009095 	.word	0x00009095

000091e4 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    91e4:	b580      	push	{r7, lr}
    91e6:	b084      	sub	sp, #16
    91e8:	af00      	add	r7, sp, #0
    91ea:	60ba      	str	r2, [r7, #8]
    91ec:	607b      	str	r3, [r7, #4]
    91ee:	4603      	mov	r3, r0
    91f0:	73fb      	strb	r3, [r7, #15]
    91f2:	460b      	mov	r3, r1
    91f4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    91f6:	68bb      	ldr	r3, [r7, #8]
    91f8:	b29a      	uxth	r2, r3
    91fa:	7bb9      	ldrb	r1, [r7, #14]
    91fc:	7bfb      	ldrb	r3, [r7, #15]
    91fe:	4618      	mov	r0, r3
    9200:	4b06      	ldr	r3, [pc, #24]	; (921c <_usbd_ep_set_out_trans+0x38>)
    9202:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9204:	687b      	ldr	r3, [r7, #4]
    9206:	b29a      	uxth	r2, r3
    9208:	7bb9      	ldrb	r1, [r7, #14]
    920a:	7bfb      	ldrb	r3, [r7, #15]
    920c:	4618      	mov	r0, r3
    920e:	4b04      	ldr	r3, [pc, #16]	; (9220 <_usbd_ep_set_out_trans+0x3c>)
    9210:	4798      	blx	r3
}
    9212:	bf00      	nop
    9214:	3710      	adds	r7, #16
    9216:	46bd      	mov	sp, r7
    9218:	bd80      	pop	{r7, pc}
    921a:	bf00      	nop
    921c:	00009161 	.word	0x00009161
    9220:	0000911d 	.word	0x0000911d

00009224 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9224:	b480      	push	{r7}
    9226:	b085      	sub	sp, #20
    9228:	af00      	add	r7, sp, #0
    922a:	4603      	mov	r3, r0
    922c:	460a      	mov	r2, r1
    922e:	71fb      	strb	r3, [r7, #7]
    9230:	4613      	mov	r3, r2
    9232:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9234:	79fa      	ldrb	r2, [r7, #7]
    9236:	79bb      	ldrb	r3, [r7, #6]
    9238:	0052      	lsls	r2, r2, #1
    923a:	4413      	add	r3, r2
    923c:	011b      	lsls	r3, r3, #4
    923e:	4a06      	ldr	r2, [pc, #24]	; (9258 <_usbd_ep_clear_bank_status+0x34>)
    9240:	4413      	add	r3, r2
    9242:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9244:	68fb      	ldr	r3, [r7, #12]
    9246:	2200      	movs	r2, #0
    9248:	729a      	strb	r2, [r3, #10]
}
    924a:	bf00      	nop
    924c:	3714      	adds	r7, #20
    924e:	46bd      	mov	sp, r7
    9250:	f85d 7b04 	ldr.w	r7, [sp], #4
    9254:	4770      	bx	lr
    9256:	bf00      	nop
    9258:	20000b58 	.word	0x20000b58

0000925c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    925c:	b580      	push	{r7, lr}
    925e:	b082      	sub	sp, #8
    9260:	af00      	add	r7, sp, #0
    9262:	4603      	mov	r3, r0
    9264:	71fb      	strb	r3, [r7, #7]
    9266:	460b      	mov	r3, r1
    9268:	71bb      	strb	r3, [r7, #6]
    926a:	4613      	mov	r3, r2
    926c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    926e:	797b      	ldrb	r3, [r7, #5]
    9270:	2b00      	cmp	r3, #0
    9272:	d00b      	beq.n	928c <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9274:	79bb      	ldrb	r3, [r7, #6]
    9276:	2240      	movs	r2, #64	; 0x40
    9278:	fa02 f303 	lsl.w	r3, r2, r3
    927c:	b2da      	uxtb	r2, r3
    927e:	79fb      	ldrb	r3, [r7, #7]
    9280:	4619      	mov	r1, r3
    9282:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9286:	4b09      	ldr	r3, [pc, #36]	; (92ac <_usbd_ep_set_in_rdy+0x50>)
    9288:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    928a:	e00a      	b.n	92a2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    928c:	79bb      	ldrb	r3, [r7, #6]
    928e:	2240      	movs	r2, #64	; 0x40
    9290:	fa02 f303 	lsl.w	r3, r2, r3
    9294:	b2da      	uxtb	r2, r3
    9296:	79fb      	ldrb	r3, [r7, #7]
    9298:	4619      	mov	r1, r3
    929a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    929e:	4b04      	ldr	r3, [pc, #16]	; (92b0 <_usbd_ep_set_in_rdy+0x54>)
    92a0:	4798      	blx	r3
}
    92a2:	bf00      	nop
    92a4:	3708      	adds	r7, #8
    92a6:	46bd      	mov	sp, r7
    92a8:	bd80      	pop	{r7, pc}
    92aa:	bf00      	nop
    92ac:	00008869 	.word	0x00008869
    92b0:	000088bd 	.word	0x000088bd

000092b4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    92b4:	b580      	push	{r7, lr}
    92b6:	b082      	sub	sp, #8
    92b8:	af00      	add	r7, sp, #0
    92ba:	4603      	mov	r3, r0
    92bc:	71fb      	strb	r3, [r7, #7]
    92be:	460b      	mov	r3, r1
    92c0:	71bb      	strb	r3, [r7, #6]
    92c2:	4613      	mov	r3, r2
    92c4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    92c6:	797b      	ldrb	r3, [r7, #5]
    92c8:	2b00      	cmp	r3, #0
    92ca:	d00b      	beq.n	92e4 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    92cc:	79bb      	ldrb	r3, [r7, #6]
    92ce:	2240      	movs	r2, #64	; 0x40
    92d0:	fa02 f303 	lsl.w	r3, r2, r3
    92d4:	b2da      	uxtb	r2, r3
    92d6:	79fb      	ldrb	r3, [r7, #7]
    92d8:	4619      	mov	r1, r3
    92da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92de:	4b09      	ldr	r3, [pc, #36]	; (9304 <_usbd_ep_set_out_rdy+0x50>)
    92e0:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    92e2:	e00a      	b.n	92fa <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    92e4:	79bb      	ldrb	r3, [r7, #6]
    92e6:	2240      	movs	r2, #64	; 0x40
    92e8:	fa02 f303 	lsl.w	r3, r2, r3
    92ec:	b2da      	uxtb	r2, r3
    92ee:	79fb      	ldrb	r3, [r7, #7]
    92f0:	4619      	mov	r1, r3
    92f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92f6:	4b04      	ldr	r3, [pc, #16]	; (9308 <_usbd_ep_set_out_rdy+0x54>)
    92f8:	4798      	blx	r3
}
    92fa:	bf00      	nop
    92fc:	3708      	adds	r7, #8
    92fe:	46bd      	mov	sp, r7
    9300:	bd80      	pop	{r7, pc}
    9302:	bf00      	nop
    9304:	000088bd 	.word	0x000088bd
    9308:	00008869 	.word	0x00008869

0000930c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    930c:	b480      	push	{r7}
    930e:	b083      	sub	sp, #12
    9310:	af00      	add	r7, sp, #0
    9312:	4603      	mov	r3, r0
    9314:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9316:	88fb      	ldrh	r3, [r7, #6]
    9318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    931c:	d820      	bhi.n	9360 <_usbd_ep_pcksize_size+0x54>
    931e:	88fb      	ldrh	r3, [r7, #6]
    9320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9324:	d81a      	bhi.n	935c <_usbd_ep_pcksize_size+0x50>
    9326:	88fb      	ldrh	r3, [r7, #6]
    9328:	2b80      	cmp	r3, #128	; 0x80
    932a:	d815      	bhi.n	9358 <_usbd_ep_pcksize_size+0x4c>
    932c:	88fb      	ldrh	r3, [r7, #6]
    932e:	2b40      	cmp	r3, #64	; 0x40
    9330:	d810      	bhi.n	9354 <_usbd_ep_pcksize_size+0x48>
    9332:	88fb      	ldrh	r3, [r7, #6]
    9334:	2b20      	cmp	r3, #32
    9336:	d80b      	bhi.n	9350 <_usbd_ep_pcksize_size+0x44>
    9338:	88fb      	ldrh	r3, [r7, #6]
    933a:	2b10      	cmp	r3, #16
    933c:	d806      	bhi.n	934c <_usbd_ep_pcksize_size+0x40>
    933e:	88fb      	ldrh	r3, [r7, #6]
    9340:	2b08      	cmp	r3, #8
    9342:	bf8c      	ite	hi
    9344:	2301      	movhi	r3, #1
    9346:	2300      	movls	r3, #0
    9348:	b2db      	uxtb	r3, r3
    934a:	e00a      	b.n	9362 <_usbd_ep_pcksize_size+0x56>
    934c:	2302      	movs	r3, #2
    934e:	e008      	b.n	9362 <_usbd_ep_pcksize_size+0x56>
    9350:	2303      	movs	r3, #3
    9352:	e006      	b.n	9362 <_usbd_ep_pcksize_size+0x56>
    9354:	2304      	movs	r3, #4
    9356:	e004      	b.n	9362 <_usbd_ep_pcksize_size+0x56>
    9358:	2305      	movs	r3, #5
    935a:	e002      	b.n	9362 <_usbd_ep_pcksize_size+0x56>
    935c:	2306      	movs	r3, #6
    935e:	e000      	b.n	9362 <_usbd_ep_pcksize_size+0x56>
    9360:	2307      	movs	r3, #7
}
    9362:	4618      	mov	r0, r3
    9364:	370c      	adds	r7, #12
    9366:	46bd      	mov	sp, r7
    9368:	f85d 7b04 	ldr.w	r7, [sp], #4
    936c:	4770      	bx	lr
	...

00009370 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9370:	b480      	push	{r7}
    9372:	b085      	sub	sp, #20
    9374:	af00      	add	r7, sp, #0
    9376:	4603      	mov	r3, r0
    9378:	460a      	mov	r2, r1
    937a:	71fb      	strb	r3, [r7, #7]
    937c:	4613      	mov	r3, r2
    937e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9380:	79fb      	ldrb	r3, [r7, #7]
    9382:	2b00      	cmp	r3, #0
    9384:	d008      	beq.n	9398 <_usb_d_dev_ept+0x28>
    9386:	79bb      	ldrb	r3, [r7, #6]
    9388:	2b00      	cmp	r3, #0
    938a:	d003      	beq.n	9394 <_usb_d_dev_ept+0x24>
    938c:	79fb      	ldrb	r3, [r7, #7]
    938e:	3304      	adds	r3, #4
    9390:	b2db      	uxtb	r3, r3
    9392:	e002      	b.n	939a <_usb_d_dev_ept+0x2a>
    9394:	79fb      	ldrb	r3, [r7, #7]
    9396:	e000      	b.n	939a <_usb_d_dev_ept+0x2a>
    9398:	2300      	movs	r3, #0
    939a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    939c:	7bfa      	ldrb	r2, [r7, #15]
    939e:	4613      	mov	r3, r2
    93a0:	009b      	lsls	r3, r3, #2
    93a2:	4413      	add	r3, r2
    93a4:	009b      	lsls	r3, r3, #2
    93a6:	3310      	adds	r3, #16
    93a8:	4a04      	ldr	r2, [pc, #16]	; (93bc <_usb_d_dev_ept+0x4c>)
    93aa:	4413      	add	r3, r2
    93ac:	3304      	adds	r3, #4
}
    93ae:	4618      	mov	r0, r3
    93b0:	3714      	adds	r7, #20
    93b2:	46bd      	mov	sp, r7
    93b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    93b8:	4770      	bx	lr
    93ba:	bf00      	nop
    93bc:	20000a90 	.word	0x20000a90

000093c0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    93c0:	b580      	push	{r7, lr}
    93c2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    93c4:	2104      	movs	r1, #4
    93c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    93ca:	4b03      	ldr	r3, [pc, #12]	; (93d8 <_usb_d_dev_sof+0x18>)
    93cc:	4798      	blx	r3
	dev_inst.callbacks.sof();
    93ce:	4b03      	ldr	r3, [pc, #12]	; (93dc <_usb_d_dev_sof+0x1c>)
    93d0:	681b      	ldr	r3, [r3, #0]
    93d2:	4798      	blx	r3
}
    93d4:	bf00      	nop
    93d6:	bd80      	pop	{r7, pc}
    93d8:	00008a37 	.word	0x00008a37
    93dc:	20000a90 	.word	0x20000a90

000093e0 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    93e0:	b580      	push	{r7, lr}
    93e2:	b084      	sub	sp, #16
    93e4:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    93e6:	2300      	movs	r3, #0
    93e8:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    93ea:	f240 2101 	movw	r1, #513	; 0x201
    93ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    93f2:	4b1a      	ldr	r3, [pc, #104]	; (945c <_usb_d_dev_lpmsusp+0x7c>)
    93f4:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    93f6:	f240 2101 	movw	r1, #513	; 0x201
    93fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    93fe:	4b18      	ldr	r3, [pc, #96]	; (9460 <_usb_d_dev_lpmsusp+0x80>)
    9400:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9402:	2170      	movs	r1, #112	; 0x70
    9404:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9408:	4b16      	ldr	r3, [pc, #88]	; (9464 <_usb_d_dev_lpmsusp+0x84>)
    940a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    940c:	2300      	movs	r3, #0
    940e:	73fb      	strb	r3, [r7, #15]
    9410:	e018      	b.n	9444 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9412:	7bfb      	ldrb	r3, [r7, #15]
    9414:	015b      	lsls	r3, r3, #5
    9416:	4a14      	ldr	r2, [pc, #80]	; (9468 <_usb_d_dev_lpmsusp+0x88>)
    9418:	4413      	add	r3, r2
    941a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    941c:	687b      	ldr	r3, [r7, #4]
    941e:	891b      	ldrh	r3, [r3, #8]
    9420:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9424:	b2db      	uxtb	r3, r3
    9426:	2b03      	cmp	r3, #3
    9428:	d109      	bne.n	943e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    942a:	687b      	ldr	r3, [r7, #4]
    942c:	891b      	ldrh	r3, [r3, #8]
    942e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9432:	b29b      	uxth	r3, r3
    9434:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9436:	687b      	ldr	r3, [r7, #4]
    9438:	2200      	movs	r2, #0
    943a:	811a      	strh	r2, [r3, #8]
			break;
    943c:	e005      	b.n	944a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    943e:	7bfb      	ldrb	r3, [r7, #15]
    9440:	3301      	adds	r3, #1
    9442:	73fb      	strb	r3, [r7, #15]
    9444:	7bfb      	ldrb	r3, [r7, #15]
    9446:	2b03      	cmp	r3, #3
    9448:	d9e3      	bls.n	9412 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    944a:	4b08      	ldr	r3, [pc, #32]	; (946c <_usb_d_dev_lpmsusp+0x8c>)
    944c:	685b      	ldr	r3, [r3, #4]
    944e:	68b9      	ldr	r1, [r7, #8]
    9450:	2003      	movs	r0, #3
    9452:	4798      	blx	r3
}
    9454:	bf00      	nop
    9456:	3710      	adds	r7, #16
    9458:	46bd      	mov	sp, r7
    945a:	bd80      	pop	{r7, pc}
    945c:	00008a37 	.word	0x00008a37
    9460:	00008a8d 	.word	0x00008a8d
    9464:	00008a55 	.word	0x00008a55
    9468:	20000b58 	.word	0x20000b58
    946c:	20000a90 	.word	0x20000a90

00009470 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9470:	b580      	push	{r7, lr}
    9472:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9474:	2180      	movs	r1, #128	; 0x80
    9476:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    947a:	4b04      	ldr	r3, [pc, #16]	; (948c <_usb_d_dev_ramerr+0x1c>)
    947c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    947e:	4b04      	ldr	r3, [pc, #16]	; (9490 <_usb_d_dev_ramerr+0x20>)
    9480:	685b      	ldr	r3, [r3, #4]
    9482:	2100      	movs	r1, #0
    9484:	2005      	movs	r0, #5
    9486:	4798      	blx	r3
}
    9488:	bf00      	nop
    948a:	bd80      	pop	{r7, pc}
    948c:	00008a37 	.word	0x00008a37
    9490:	20000a90 	.word	0x20000a90

00009494 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9494:	b580      	push	{r7, lr}
    9496:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9498:	2170      	movs	r1, #112	; 0x70
    949a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    949e:	4b0b      	ldr	r3, [pc, #44]	; (94cc <_usb_d_dev_wakeup+0x38>)
    94a0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    94a2:	2170      	movs	r1, #112	; 0x70
    94a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94a8:	4b09      	ldr	r3, [pc, #36]	; (94d0 <_usb_d_dev_wakeup+0x3c>)
    94aa:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    94ac:	f240 2101 	movw	r1, #513	; 0x201
    94b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94b4:	4b07      	ldr	r3, [pc, #28]	; (94d4 <_usb_d_dev_wakeup+0x40>)
    94b6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    94b8:	2000      	movs	r0, #0
    94ba:	4b07      	ldr	r3, [pc, #28]	; (94d8 <_usb_d_dev_wakeup+0x44>)
    94bc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    94be:	4b07      	ldr	r3, [pc, #28]	; (94dc <_usb_d_dev_wakeup+0x48>)
    94c0:	685b      	ldr	r3, [r3, #4]
    94c2:	2100      	movs	r1, #0
    94c4:	2002      	movs	r0, #2
    94c6:	4798      	blx	r3
}
    94c8:	bf00      	nop
    94ca:	bd80      	pop	{r7, pc}
    94cc:	00008a37 	.word	0x00008a37
    94d0:	00008a8d 	.word	0x00008a8d
    94d4:	00008a55 	.word	0x00008a55
    94d8:	00008d35 	.word	0x00008d35
    94dc:	20000a90 	.word	0x20000a90

000094e0 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    94e0:	b580      	push	{r7, lr}
    94e2:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    94e4:	2200      	movs	r2, #0
    94e6:	2100      	movs	r1, #0
    94e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94ec:	4b0d      	ldr	r3, [pc, #52]	; (9524 <_usb_d_dev_reset+0x44>)
    94ee:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    94f0:	2108      	movs	r1, #8
    94f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94f6:	4b0c      	ldr	r3, [pc, #48]	; (9528 <_usb_d_dev_reset+0x48>)
    94f8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    94fa:	2170      	movs	r1, #112	; 0x70
    94fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9500:	4b0a      	ldr	r3, [pc, #40]	; (952c <_usb_d_dev_reset+0x4c>)
    9502:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9504:	f240 2101 	movw	r1, #513	; 0x201
    9508:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    950c:	4b08      	ldr	r3, [pc, #32]	; (9530 <_usb_d_dev_reset+0x50>)
    950e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9510:	4b08      	ldr	r3, [pc, #32]	; (9534 <_usb_d_dev_reset+0x54>)
    9512:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9514:	4b08      	ldr	r3, [pc, #32]	; (9538 <_usb_d_dev_reset+0x58>)
    9516:	685b      	ldr	r3, [r3, #4]
    9518:	2100      	movs	r1, #0
    951a:	2001      	movs	r0, #1
    951c:	4798      	blx	r3
}
    951e:	bf00      	nop
    9520:	bd80      	pop	{r7, pc}
    9522:	bf00      	nop
    9524:	000089cd 	.word	0x000089cd
    9528:	00008a37 	.word	0x00008a37
    952c:	00008a8d 	.word	0x00008a8d
    9530:	00008a55 	.word	0x00008a55
    9534:	0000a09d 	.word	0x0000a09d
    9538:	20000a90 	.word	0x20000a90

0000953c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    953c:	b580      	push	{r7, lr}
    953e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9540:	f240 2101 	movw	r1, #513	; 0x201
    9544:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9548:	4b09      	ldr	r3, [pc, #36]	; (9570 <_usb_d_dev_suspend+0x34>)
    954a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    954c:	f240 2101 	movw	r1, #513	; 0x201
    9550:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9554:	4b07      	ldr	r3, [pc, #28]	; (9574 <_usb_d_dev_suspend+0x38>)
    9556:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9558:	2170      	movs	r1, #112	; 0x70
    955a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    955e:	4b06      	ldr	r3, [pc, #24]	; (9578 <_usb_d_dev_suspend+0x3c>)
    9560:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9562:	4b06      	ldr	r3, [pc, #24]	; (957c <_usb_d_dev_suspend+0x40>)
    9564:	685b      	ldr	r3, [r3, #4]
    9566:	2100      	movs	r1, #0
    9568:	2004      	movs	r0, #4
    956a:	4798      	blx	r3
}
    956c:	bf00      	nop
    956e:	bd80      	pop	{r7, pc}
    9570:	00008a37 	.word	0x00008a37
    9574:	00008a8d 	.word	0x00008a8d
    9578:	00008a55 	.word	0x00008a55
    957c:	20000a90 	.word	0x20000a90

00009580 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9580:	b580      	push	{r7, lr}
    9582:	b082      	sub	sp, #8
    9584:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9586:	2301      	movs	r3, #1
    9588:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    958a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    958e:	4b22      	ldr	r3, [pc, #136]	; (9618 <_usb_d_dev_handle_nep+0x98>)
    9590:	4798      	blx	r3
    9592:	4603      	mov	r3, r0
    9594:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9596:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    959a:	4b20      	ldr	r3, [pc, #128]	; (961c <_usb_d_dev_handle_nep+0x9c>)
    959c:	4798      	blx	r3
    959e:	4603      	mov	r3, r0
    95a0:	461a      	mov	r2, r3
    95a2:	88bb      	ldrh	r3, [r7, #4]
    95a4:	4013      	ands	r3, r2
    95a6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    95a8:	88bb      	ldrh	r3, [r7, #4]
    95aa:	f003 0304 	and.w	r3, r3, #4
    95ae:	2b00      	cmp	r3, #0
    95b0:	d003      	beq.n	95ba <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    95b2:	4b1b      	ldr	r3, [pc, #108]	; (9620 <_usb_d_dev_handle_nep+0xa0>)
    95b4:	4798      	blx	r3
		return true;
    95b6:	2301      	movs	r3, #1
    95b8:	e02a      	b.n	9610 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    95ba:	88bb      	ldrh	r3, [r7, #4]
    95bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    95c0:	2b00      	cmp	r3, #0
    95c2:	d002      	beq.n	95ca <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    95c4:	4b17      	ldr	r3, [pc, #92]	; (9624 <_usb_d_dev_handle_nep+0xa4>)
    95c6:	4798      	blx	r3
    95c8:	e021      	b.n	960e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    95ca:	88bb      	ldrh	r3, [r7, #4]
    95cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    95d0:	2b00      	cmp	r3, #0
    95d2:	d002      	beq.n	95da <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    95d4:	4b14      	ldr	r3, [pc, #80]	; (9628 <_usb_d_dev_handle_nep+0xa8>)
    95d6:	4798      	blx	r3
    95d8:	e019      	b.n	960e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    95da:	88bb      	ldrh	r3, [r7, #4]
    95dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    95e0:	2b00      	cmp	r3, #0
    95e2:	d002      	beq.n	95ea <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    95e4:	4b11      	ldr	r3, [pc, #68]	; (962c <_usb_d_dev_handle_nep+0xac>)
    95e6:	4798      	blx	r3
    95e8:	e011      	b.n	960e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    95ea:	88bb      	ldrh	r3, [r7, #4]
    95ec:	f003 0308 	and.w	r3, r3, #8
    95f0:	2b00      	cmp	r3, #0
    95f2:	d002      	beq.n	95fa <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    95f4:	4b0e      	ldr	r3, [pc, #56]	; (9630 <_usb_d_dev_handle_nep+0xb0>)
    95f6:	4798      	blx	r3
    95f8:	e009      	b.n	960e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    95fa:	88bb      	ldrh	r3, [r7, #4]
    95fc:	f003 0301 	and.w	r3, r3, #1
    9600:	2b00      	cmp	r3, #0
    9602:	d002      	beq.n	960a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9604:	4b0b      	ldr	r3, [pc, #44]	; (9634 <_usb_d_dev_handle_nep+0xb4>)
    9606:	4798      	blx	r3
    9608:	e001      	b.n	960e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    960a:	2300      	movs	r3, #0
    960c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    960e:	79fb      	ldrb	r3, [r7, #7]
}
    9610:	4618      	mov	r0, r3
    9612:	3708      	adds	r7, #8
    9614:	46bd      	mov	sp, r7
    9616:	bd80      	pop	{r7, pc}
    9618:	00008a1d 	.word	0x00008a1d
    961c:	00008a73 	.word	0x00008a73
    9620:	000093c1 	.word	0x000093c1
    9624:	000093e1 	.word	0x000093e1
    9628:	00009471 	.word	0x00009471
    962c:	00009495 	.word	0x00009495
    9630:	000094e1 	.word	0x000094e1
    9634:	0000953d 	.word	0x0000953d

00009638 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9638:	b590      	push	{r4, r7, lr}
    963a:	b089      	sub	sp, #36	; 0x24
    963c:	af00      	add	r7, sp, #0
    963e:	6078      	str	r0, [r7, #4]
    9640:	460b      	mov	r3, r1
    9642:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9644:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9648:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    964a:	687b      	ldr	r3, [r7, #4]
    964c:	7c9b      	ldrb	r3, [r3, #18]
    964e:	f003 030f 	and.w	r3, r3, #15
    9652:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9654:	7dfb      	ldrb	r3, [r7, #23]
    9656:	015b      	lsls	r3, r3, #5
    9658:	4a73      	ldr	r2, [pc, #460]	; (9828 <_usb_d_dev_in_next+0x1f0>)
    965a:	4413      	add	r3, r2
    965c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    965e:	78fb      	ldrb	r3, [r7, #3]
    9660:	2b00      	cmp	r3, #0
    9662:	d006      	beq.n	9672 <_usb_d_dev_in_next+0x3a>
    9664:	693b      	ldr	r3, [r7, #16]
    9666:	3310      	adds	r3, #16
    9668:	685b      	ldr	r3, [r3, #4]
    966a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    966e:	b29b      	uxth	r3, r3
    9670:	e000      	b.n	9674 <_usb_d_dev_in_next+0x3c>
    9672:	2300      	movs	r3, #0
    9674:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9676:	687b      	ldr	r3, [r7, #4]
    9678:	8a1b      	ldrh	r3, [r3, #16]
    967a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    967e:	4293      	cmp	r3, r2
    9680:	d103      	bne.n	968a <_usb_d_dev_in_next+0x52>
    9682:	687b      	ldr	r3, [r7, #4]
    9684:	8a1b      	ldrh	r3, [r3, #16]
    9686:	b21b      	sxth	r3, r3
    9688:	e004      	b.n	9694 <_usb_d_dev_in_next+0x5c>
    968a:	687b      	ldr	r3, [r7, #4]
    968c:	8a1b      	ldrh	r3, [r3, #16]
    968e:	3b01      	subs	r3, #1
    9690:	b29b      	uxth	r3, r3
    9692:	b21b      	sxth	r3, r3
    9694:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9698:	4013      	ands	r3, r2
    969a:	b21b      	sxth	r3, r3
    969c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    969e:	2300      	movs	r3, #0
    96a0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    96a2:	687b      	ldr	r3, [r7, #4]
    96a4:	7cdb      	ldrb	r3, [r3, #19]
    96a6:	f003 0307 	and.w	r3, r3, #7
    96aa:	b2db      	uxtb	r3, r3
    96ac:	2b01      	cmp	r3, #1
    96ae:	bf0c      	ite	eq
    96b0:	2301      	moveq	r3, #1
    96b2:	2300      	movne	r3, #0
    96b4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    96b6:	78fb      	ldrb	r3, [r7, #3]
    96b8:	2b00      	cmp	r3, #0
    96ba:	d004      	beq.n	96c6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    96bc:	7dfb      	ldrb	r3, [r7, #23]
    96be:	2101      	movs	r1, #1
    96c0:	4618      	mov	r0, r3
    96c2:	4b5a      	ldr	r3, [pc, #360]	; (982c <_usb_d_dev_in_next+0x1f4>)
    96c4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    96c6:	687b      	ldr	r3, [r7, #4]
    96c8:	689a      	ldr	r2, [r3, #8]
    96ca:	89fb      	ldrh	r3, [r7, #14]
    96cc:	441a      	add	r2, r3
    96ce:	687b      	ldr	r3, [r7, #4]
    96d0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    96d2:	687b      	ldr	r3, [r7, #4]
    96d4:	689a      	ldr	r2, [r3, #8]
    96d6:	687b      	ldr	r3, [r7, #4]
    96d8:	685b      	ldr	r3, [r3, #4]
    96da:	429a      	cmp	r2, r3
    96dc:	d243      	bcs.n	9766 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    96de:	687b      	ldr	r3, [r7, #4]
    96e0:	685b      	ldr	r3, [r3, #4]
    96e2:	b29a      	uxth	r2, r3
    96e4:	687b      	ldr	r3, [r7, #4]
    96e6:	689b      	ldr	r3, [r3, #8]
    96e8:	b29b      	uxth	r3, r3
    96ea:	1ad3      	subs	r3, r2, r3
    96ec:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    96ee:	687b      	ldr	r3, [r7, #4]
    96f0:	7cdb      	ldrb	r3, [r3, #19]
    96f2:	f003 0320 	and.w	r3, r3, #32
    96f6:	b2db      	uxtb	r3, r3
    96f8:	2b00      	cmp	r3, #0
    96fa:	d01b      	beq.n	9734 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    96fc:	687b      	ldr	r3, [r7, #4]
    96fe:	8a1b      	ldrh	r3, [r3, #16]
    9700:	8bfa      	ldrh	r2, [r7, #30]
    9702:	429a      	cmp	r2, r3
    9704:	d902      	bls.n	970c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9706:	687b      	ldr	r3, [r7, #4]
    9708:	8a1b      	ldrh	r3, [r3, #16]
    970a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    970c:	687b      	ldr	r3, [r7, #4]
    970e:	68d8      	ldr	r0, [r3, #12]
    9710:	687b      	ldr	r3, [r7, #4]
    9712:	681a      	ldr	r2, [r3, #0]
    9714:	687b      	ldr	r3, [r7, #4]
    9716:	689b      	ldr	r3, [r3, #8]
    9718:	4413      	add	r3, r2
    971a:	8bfa      	ldrh	r2, [r7, #30]
    971c:	4619      	mov	r1, r3
    971e:	4b44      	ldr	r3, [pc, #272]	; (9830 <_usb_d_dev_in_next+0x1f8>)
    9720:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9722:	687b      	ldr	r3, [r7, #4]
    9724:	68db      	ldr	r3, [r3, #12]
    9726:	461a      	mov	r2, r3
    9728:	7dfb      	ldrb	r3, [r7, #23]
    972a:	2101      	movs	r1, #1
    972c:	4618      	mov	r0, r3
    972e:	4b41      	ldr	r3, [pc, #260]	; (9834 <_usb_d_dev_in_next+0x1fc>)
    9730:	4798      	blx	r3
    9732:	e011      	b.n	9758 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9734:	8bfb      	ldrh	r3, [r7, #30]
    9736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    973a:	d902      	bls.n	9742 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    973c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9740:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9742:	687b      	ldr	r3, [r7, #4]
    9744:	681a      	ldr	r2, [r3, #0]
    9746:	687b      	ldr	r3, [r7, #4]
    9748:	689b      	ldr	r3, [r3, #8]
    974a:	4413      	add	r3, r2
    974c:	461a      	mov	r2, r3
    974e:	7dfb      	ldrb	r3, [r7, #23]
    9750:	2101      	movs	r1, #1
    9752:	4618      	mov	r0, r3
    9754:	4b37      	ldr	r3, [pc, #220]	; (9834 <_usb_d_dev_in_next+0x1fc>)
    9756:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9758:	8bfa      	ldrh	r2, [r7, #30]
    975a:	7df8      	ldrb	r0, [r7, #23]
    975c:	2300      	movs	r3, #0
    975e:	2101      	movs	r1, #1
    9760:	4c35      	ldr	r4, [pc, #212]	; (9838 <_usb_d_dev_in_next+0x200>)
    9762:	47a0      	blx	r4
		goto _in_tx_exec;
    9764:	e041      	b.n	97ea <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9766:	687b      	ldr	r3, [r7, #4]
    9768:	7cdb      	ldrb	r3, [r3, #19]
    976a:	f003 0310 	and.w	r3, r3, #16
    976e:	b2db      	uxtb	r3, r3
    9770:	2b00      	cmp	r3, #0
    9772:	d00b      	beq.n	978c <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9774:	687a      	ldr	r2, [r7, #4]
    9776:	7cd3      	ldrb	r3, [r2, #19]
    9778:	f36f 1304 	bfc	r3, #4, #1
    977c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    977e:	7df8      	ldrb	r0, [r7, #23]
    9780:	2300      	movs	r3, #0
    9782:	2200      	movs	r2, #0
    9784:	2101      	movs	r1, #1
    9786:	4c2c      	ldr	r4, [pc, #176]	; (9838 <_usb_d_dev_in_next+0x200>)
    9788:	47a0      	blx	r4
		goto _in_tx_exec;
    978a:	e02e      	b.n	97ea <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    978c:	7afb      	ldrb	r3, [r7, #11]
    978e:	2b00      	cmp	r3, #0
    9790:	d006      	beq.n	97a0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9792:	7dfb      	ldrb	r3, [r7, #23]
    9794:	224b      	movs	r2, #75	; 0x4b
    9796:	4619      	mov	r1, r3
    9798:	69b8      	ldr	r0, [r7, #24]
    979a:	4b28      	ldr	r3, [pc, #160]	; (983c <_usb_d_dev_in_next+0x204>)
    979c:	4798      	blx	r3
    979e:	e005      	b.n	97ac <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    97a0:	7dfb      	ldrb	r3, [r7, #23]
    97a2:	224a      	movs	r2, #74	; 0x4a
    97a4:	4619      	mov	r1, r3
    97a6:	69b8      	ldr	r0, [r7, #24]
    97a8:	4b24      	ldr	r3, [pc, #144]	; (983c <_usb_d_dev_in_next+0x204>)
    97aa:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    97ac:	687b      	ldr	r3, [r7, #4]
    97ae:	8a1b      	ldrh	r3, [r3, #16]
    97b0:	89ba      	ldrh	r2, [r7, #12]
    97b2:	429a      	cmp	r2, r3
    97b4:	d114      	bne.n	97e0 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    97b6:	687a      	ldr	r2, [r7, #4]
    97b8:	7cd3      	ldrb	r3, [r2, #19]
    97ba:	f36f 1386 	bfc	r3, #6, #1
    97be:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    97c0:	4b1f      	ldr	r3, [pc, #124]	; (9840 <_usb_d_dev_in_next+0x208>)
    97c2:	68db      	ldr	r3, [r3, #12]
    97c4:	687a      	ldr	r2, [r7, #4]
    97c6:	7c90      	ldrb	r0, [r2, #18]
    97c8:	687a      	ldr	r2, [r7, #4]
    97ca:	6892      	ldr	r2, [r2, #8]
    97cc:	4611      	mov	r1, r2
    97ce:	4798      	blx	r3
    97d0:	4603      	mov	r3, r0
    97d2:	2b00      	cmp	r3, #0
    97d4:	d124      	bne.n	9820 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    97d6:	687a      	ldr	r2, [r7, #4]
    97d8:	7cd3      	ldrb	r3, [r2, #19]
    97da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    97de:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    97e0:	2100      	movs	r1, #0
    97e2:	6878      	ldr	r0, [r7, #4]
    97e4:	4b17      	ldr	r3, [pc, #92]	; (9844 <_usb_d_dev_in_next+0x20c>)
    97e6:	4798      	blx	r3
	return;
    97e8:	e01b      	b.n	9822 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    97ea:	78fb      	ldrb	r3, [r7, #3]
    97ec:	f083 0301 	eor.w	r3, r3, #1
    97f0:	b2db      	uxtb	r3, r3
    97f2:	2b00      	cmp	r3, #0
    97f4:	d00d      	beq.n	9812 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    97f6:	7afb      	ldrb	r3, [r7, #11]
    97f8:	2b00      	cmp	r3, #0
    97fa:	d002      	beq.n	9802 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    97fc:	234e      	movs	r3, #78	; 0x4e
    97fe:	777b      	strb	r3, [r7, #29]
    9800:	e001      	b.n	9806 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9802:	234a      	movs	r3, #74	; 0x4a
    9804:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9806:	7f7a      	ldrb	r2, [r7, #29]
    9808:	7dfb      	ldrb	r3, [r7, #23]
    980a:	4619      	mov	r1, r3
    980c:	69b8      	ldr	r0, [r7, #24]
    980e:	4b0e      	ldr	r3, [pc, #56]	; (9848 <_usb_d_dev_in_next+0x210>)
    9810:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9812:	7dfb      	ldrb	r3, [r7, #23]
    9814:	2201      	movs	r2, #1
    9816:	2101      	movs	r1, #1
    9818:	4618      	mov	r0, r3
    981a:	4b0c      	ldr	r3, [pc, #48]	; (984c <_usb_d_dev_in_next+0x214>)
    981c:	4798      	blx	r3
    981e:	e000      	b.n	9822 <_usb_d_dev_in_next+0x1ea>
			return;
    9820:	bf00      	nop
}
    9822:	3724      	adds	r7, #36	; 0x24
    9824:	46bd      	mov	sp, r7
    9826:	bd90      	pop	{r4, r7, pc}
    9828:	20000b58 	.word	0x20000b58
    982c:	00009031 	.word	0x00009031
    9830:	0000e895 	.word	0x0000e895
    9834:	0000905d 	.word	0x0000905d
    9838:	000091a5 	.word	0x000091a5
    983c:	0000893d 	.word	0x0000893d
    9840:	20000a90 	.word	0x20000a90
    9844:	0000a961 	.word	0x0000a961
    9848:	00008911 	.word	0x00008911
    984c:	0000925d 	.word	0x0000925d

00009850 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9850:	b590      	push	{r4, r7, lr}
    9852:	b08b      	sub	sp, #44	; 0x2c
    9854:	af00      	add	r7, sp, #0
    9856:	6078      	str	r0, [r7, #4]
    9858:	460b      	mov	r3, r1
    985a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    985c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9860:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    9862:	687b      	ldr	r3, [r7, #4]
    9864:	7c9b      	ldrb	r3, [r3, #18]
    9866:	f003 030f 	and.w	r3, r3, #15
    986a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    986c:	7ffb      	ldrb	r3, [r7, #31]
    986e:	015b      	lsls	r3, r3, #5
    9870:	4a94      	ldr	r2, [pc, #592]	; (9ac4 <_usb_d_dev_out_next+0x274>)
    9872:	4413      	add	r3, r2
    9874:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9876:	78fb      	ldrb	r3, [r7, #3]
    9878:	2b00      	cmp	r3, #0
    987a:	d005      	beq.n	9888 <_usb_d_dev_out_next+0x38>
    987c:	69bb      	ldr	r3, [r7, #24]
    987e:	685b      	ldr	r3, [r3, #4]
    9880:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9884:	b29b      	uxth	r3, r3
    9886:	e000      	b.n	988a <_usb_d_dev_out_next+0x3a>
    9888:	2300      	movs	r3, #0
    988a:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    988c:	78fb      	ldrb	r3, [r7, #3]
    988e:	2b00      	cmp	r3, #0
    9890:	d005      	beq.n	989e <_usb_d_dev_out_next+0x4e>
    9892:	69bb      	ldr	r3, [r7, #24]
    9894:	685b      	ldr	r3, [r3, #4]
    9896:	f3c3 030d 	ubfx	r3, r3, #0, #14
    989a:	b29b      	uxth	r3, r3
    989c:	e000      	b.n	98a0 <_usb_d_dev_out_next+0x50>
    989e:	2300      	movs	r3, #0
    98a0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    98a2:	687b      	ldr	r3, [r7, #4]
    98a4:	8a1b      	ldrh	r3, [r3, #16]
    98a6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    98aa:	4293      	cmp	r3, r2
    98ac:	d004      	beq.n	98b8 <_usb_d_dev_out_next+0x68>
    98ae:	687b      	ldr	r3, [r7, #4]
    98b0:	8a1b      	ldrh	r3, [r3, #16]
    98b2:	3b01      	subs	r3, #1
    98b4:	b29b      	uxth	r3, r3
    98b6:	e001      	b.n	98bc <_usb_d_dev_out_next+0x6c>
    98b8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    98bc:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    98be:	8aba      	ldrh	r2, [r7, #20]
    98c0:	8a7b      	ldrh	r3, [r7, #18]
    98c2:	4013      	ands	r3, r2
    98c4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    98c6:	687b      	ldr	r3, [r7, #4]
    98c8:	7cdb      	ldrb	r3, [r3, #19]
    98ca:	f003 0307 	and.w	r3, r3, #7
    98ce:	b2db      	uxtb	r3, r3
    98d0:	2b01      	cmp	r3, #1
    98d2:	bf0c      	ite	eq
    98d4:	2301      	moveq	r3, #1
    98d6:	2300      	movne	r3, #0
    98d8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    98da:	78fb      	ldrb	r3, [r7, #3]
    98dc:	2b00      	cmp	r3, #0
    98de:	d004      	beq.n	98ea <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    98e0:	7ffb      	ldrb	r3, [r7, #31]
    98e2:	2100      	movs	r1, #0
    98e4:	4618      	mov	r0, r3
    98e6:	4b78      	ldr	r3, [pc, #480]	; (9ac8 <_usb_d_dev_out_next+0x278>)
    98e8:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    98ea:	687b      	ldr	r3, [r7, #4]
    98ec:	7cdb      	ldrb	r3, [r3, #19]
    98ee:	f003 0320 	and.w	r3, r3, #32
    98f2:	b2db      	uxtb	r3, r3
    98f4:	2b00      	cmp	r3, #0
    98f6:	d01c      	beq.n	9932 <_usb_d_dev_out_next+0xe2>
    98f8:	687b      	ldr	r3, [r7, #4]
    98fa:	685b      	ldr	r3, [r3, #4]
    98fc:	2b00      	cmp	r3, #0
    98fe:	d018      	beq.n	9932 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9900:	687b      	ldr	r3, [r7, #4]
    9902:	685b      	ldr	r3, [r3, #4]
    9904:	b29a      	uxth	r2, r3
    9906:	687b      	ldr	r3, [r7, #4]
    9908:	689b      	ldr	r3, [r3, #8]
    990a:	b29b      	uxth	r3, r3
    990c:	1ad3      	subs	r3, r2, r3
    990e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9910:	687b      	ldr	r3, [r7, #4]
    9912:	681a      	ldr	r2, [r3, #0]
    9914:	687b      	ldr	r3, [r7, #4]
    9916:	689b      	ldr	r3, [r3, #8]
    9918:	18d0      	adds	r0, r2, r3
    991a:	687b      	ldr	r3, [r7, #4]
    991c:	68d9      	ldr	r1, [r3, #12]
    991e:	89ba      	ldrh	r2, [r7, #12]
    9920:	8a3b      	ldrh	r3, [r7, #16]
    9922:	429a      	cmp	r2, r3
    9924:	d901      	bls.n	992a <_usb_d_dev_out_next+0xda>
    9926:	8a3b      	ldrh	r3, [r7, #16]
    9928:	e000      	b.n	992c <_usb_d_dev_out_next+0xdc>
    992a:	89bb      	ldrh	r3, [r7, #12]
    992c:	461a      	mov	r2, r3
    992e:	4b67      	ldr	r3, [pc, #412]	; (9acc <_usb_d_dev_out_next+0x27c>)
    9930:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9932:	687b      	ldr	r3, [r7, #4]
    9934:	685b      	ldr	r3, [r3, #4]
    9936:	2b00      	cmp	r3, #0
    9938:	d121      	bne.n	997e <_usb_d_dev_out_next+0x12e>
    993a:	687b      	ldr	r3, [r7, #4]
    993c:	7cdb      	ldrb	r3, [r3, #19]
    993e:	f003 0310 	and.w	r3, r3, #16
    9942:	b2db      	uxtb	r3, r3
    9944:	2b00      	cmp	r3, #0
    9946:	d01a      	beq.n	997e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9948:	687a      	ldr	r2, [r7, #4]
    994a:	7cd3      	ldrb	r3, [r2, #19]
    994c:	f36f 1304 	bfc	r3, #4, #1
    9950:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    9952:	687a      	ldr	r2, [r7, #4]
    9954:	7cd3      	ldrb	r3, [r2, #19]
    9956:	f043 0320 	orr.w	r3, r3, #32
    995a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    995c:	687b      	ldr	r3, [r7, #4]
    995e:	68db      	ldr	r3, [r3, #12]
    9960:	461a      	mov	r2, r3
    9962:	7ffb      	ldrb	r3, [r7, #31]
    9964:	2100      	movs	r1, #0
    9966:	4618      	mov	r0, r3
    9968:	4b59      	ldr	r3, [pc, #356]	; (9ad0 <_usb_d_dev_out_next+0x280>)
    996a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    996c:	687b      	ldr	r3, [r7, #4]
    996e:	8a1b      	ldrh	r3, [r3, #16]
    9970:	461a      	mov	r2, r3
    9972:	7ff8      	ldrb	r0, [r7, #31]
    9974:	2300      	movs	r3, #0
    9976:	2100      	movs	r1, #0
    9978:	4c56      	ldr	r4, [pc, #344]	; (9ad4 <_usb_d_dev_out_next+0x284>)
    997a:	47a0      	blx	r4
		goto _out_rx_exec;
    997c:	e090      	b.n	9aa0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    997e:	78fb      	ldrb	r3, [r7, #3]
    9980:	2b00      	cmp	r3, #0
    9982:	d010      	beq.n	99a6 <_usb_d_dev_out_next+0x156>
    9984:	687b      	ldr	r3, [r7, #4]
    9986:	8a1b      	ldrh	r3, [r3, #16]
    9988:	8a3a      	ldrh	r2, [r7, #16]
    998a:	429a      	cmp	r2, r3
    998c:	d20b      	bcs.n	99a6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    998e:	687a      	ldr	r2, [r7, #4]
    9990:	7cd3      	ldrb	r3, [r2, #19]
    9992:	f36f 1304 	bfc	r3, #4, #1
    9996:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9998:	687b      	ldr	r3, [r7, #4]
    999a:	689a      	ldr	r2, [r3, #8]
    999c:	8abb      	ldrh	r3, [r7, #20]
    999e:	441a      	add	r2, r3
    99a0:	687b      	ldr	r3, [r7, #4]
    99a2:	609a      	str	r2, [r3, #8]
    99a4:	e05c      	b.n	9a60 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    99a6:	687b      	ldr	r3, [r7, #4]
    99a8:	689a      	ldr	r2, [r3, #8]
    99aa:	8afb      	ldrh	r3, [r7, #22]
    99ac:	441a      	add	r2, r3
    99ae:	687b      	ldr	r3, [r7, #4]
    99b0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    99b2:	687b      	ldr	r3, [r7, #4]
    99b4:	689a      	ldr	r2, [r3, #8]
    99b6:	687b      	ldr	r3, [r7, #4]
    99b8:	685b      	ldr	r3, [r3, #4]
    99ba:	429a      	cmp	r2, r3
    99bc:	d250      	bcs.n	9a60 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    99be:	687b      	ldr	r3, [r7, #4]
    99c0:	685b      	ldr	r3, [r3, #4]
    99c2:	b29a      	uxth	r2, r3
    99c4:	687b      	ldr	r3, [r7, #4]
    99c6:	689b      	ldr	r3, [r3, #8]
    99c8:	b29b      	uxth	r3, r3
    99ca:	1ad3      	subs	r3, r2, r3
    99cc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    99ce:	687b      	ldr	r3, [r7, #4]
    99d0:	7cdb      	ldrb	r3, [r3, #19]
    99d2:	f003 0320 	and.w	r3, r3, #32
    99d6:	b2db      	uxtb	r3, r3
    99d8:	2b00      	cmp	r3, #0
    99da:	d010      	beq.n	99fe <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    99dc:	687b      	ldr	r3, [r7, #4]
    99de:	8a1b      	ldrh	r3, [r3, #16]
    99e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    99e2:	429a      	cmp	r2, r3
    99e4:	d902      	bls.n	99ec <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    99e6:	687b      	ldr	r3, [r7, #4]
    99e8:	8a1b      	ldrh	r3, [r3, #16]
    99ea:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	68db      	ldr	r3, [r3, #12]
    99f0:	461a      	mov	r2, r3
    99f2:	7ffb      	ldrb	r3, [r7, #31]
    99f4:	2100      	movs	r1, #0
    99f6:	4618      	mov	r0, r3
    99f8:	4b35      	ldr	r3, [pc, #212]	; (9ad0 <_usb_d_dev_out_next+0x280>)
    99fa:	4798      	blx	r3
    99fc:	e029      	b.n	9a52 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    99fe:	687b      	ldr	r3, [r7, #4]
    9a00:	8a1b      	ldrh	r3, [r3, #16]
    9a02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a04:	429a      	cmp	r2, r3
    9a06:	d90f      	bls.n	9a28 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9a08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9a0e:	d903      	bls.n	9a18 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9a14:	84fb      	strh	r3, [r7, #38]	; 0x26
    9a16:	e011      	b.n	9a3c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9a18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a1a:	8a7b      	ldrh	r3, [r7, #18]
    9a1c:	4013      	ands	r3, r2
    9a1e:	b29b      	uxth	r3, r3
    9a20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a22:	1ad3      	subs	r3, r2, r3
    9a24:	84fb      	strh	r3, [r7, #38]	; 0x26
    9a26:	e009      	b.n	9a3c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9a28:	687b      	ldr	r3, [r7, #4]
    9a2a:	8a1b      	ldrh	r3, [r3, #16]
    9a2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a2e:	429a      	cmp	r2, r3
    9a30:	d204      	bcs.n	9a3c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9a32:	687a      	ldr	r2, [r7, #4]
    9a34:	7cd3      	ldrb	r3, [r2, #19]
    9a36:	f043 0320 	orr.w	r3, r3, #32
    9a3a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9a3c:	687b      	ldr	r3, [r7, #4]
    9a3e:	681a      	ldr	r2, [r3, #0]
    9a40:	687b      	ldr	r3, [r7, #4]
    9a42:	689b      	ldr	r3, [r3, #8]
    9a44:	4413      	add	r3, r2
    9a46:	461a      	mov	r2, r3
    9a48:	7ffb      	ldrb	r3, [r7, #31]
    9a4a:	2100      	movs	r1, #0
    9a4c:	4618      	mov	r0, r3
    9a4e:	4b20      	ldr	r3, [pc, #128]	; (9ad0 <_usb_d_dev_out_next+0x280>)
    9a50:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9a52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a54:	7ff8      	ldrb	r0, [r7, #31]
    9a56:	2300      	movs	r3, #0
    9a58:	2100      	movs	r1, #0
    9a5a:	4c1e      	ldr	r4, [pc, #120]	; (9ad4 <_usb_d_dev_out_next+0x284>)
    9a5c:	47a0      	blx	r4
			goto _out_rx_exec;
    9a5e:	e01f      	b.n	9aa0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9a60:	7bfb      	ldrb	r3, [r7, #15]
    9a62:	2b00      	cmp	r3, #0
    9a64:	d006      	beq.n	9a74 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9a66:	7ffb      	ldrb	r3, [r7, #31]
    9a68:	222d      	movs	r2, #45	; 0x2d
    9a6a:	4619      	mov	r1, r3
    9a6c:	6a38      	ldr	r0, [r7, #32]
    9a6e:	4b1a      	ldr	r3, [pc, #104]	; (9ad8 <_usb_d_dev_out_next+0x288>)
    9a70:	4798      	blx	r3
    9a72:	e005      	b.n	9a80 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9a74:	7ffb      	ldrb	r3, [r7, #31]
    9a76:	2225      	movs	r2, #37	; 0x25
    9a78:	4619      	mov	r1, r3
    9a7a:	6a38      	ldr	r0, [r7, #32]
    9a7c:	4b16      	ldr	r3, [pc, #88]	; (9ad8 <_usb_d_dev_out_next+0x288>)
    9a7e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9a80:	7ffb      	ldrb	r3, [r7, #31]
    9a82:	2b00      	cmp	r3, #0
    9a84:	d107      	bne.n	9a96 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9a86:	687b      	ldr	r3, [r7, #4]
    9a88:	68db      	ldr	r3, [r3, #12]
    9a8a:	461a      	mov	r2, r3
    9a8c:	7ffb      	ldrb	r3, [r7, #31]
    9a8e:	2100      	movs	r1, #0
    9a90:	4618      	mov	r0, r3
    9a92:	4b0f      	ldr	r3, [pc, #60]	; (9ad0 <_usb_d_dev_out_next+0x280>)
    9a94:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9a96:	2100      	movs	r1, #0
    9a98:	6878      	ldr	r0, [r7, #4]
    9a9a:	4b10      	ldr	r3, [pc, #64]	; (9adc <_usb_d_dev_out_next+0x28c>)
    9a9c:	4798      	blx	r3
	return;
    9a9e:	e031      	b.n	9b04 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9aa0:	78fb      	ldrb	r3, [r7, #3]
    9aa2:	f083 0301 	eor.w	r3, r3, #1
    9aa6:	b2db      	uxtb	r3, r3
    9aa8:	2b00      	cmp	r3, #0
    9aaa:	d025      	beq.n	9af8 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9aac:	7bfb      	ldrb	r3, [r7, #15]
    9aae:	2b00      	cmp	r3, #0
    9ab0:	d018      	beq.n	9ae4 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9ab2:	7ffb      	ldrb	r3, [r7, #31]
    9ab4:	2101      	movs	r1, #1
    9ab6:	4618      	mov	r0, r3
    9ab8:	4b09      	ldr	r3, [pc, #36]	; (9ae0 <_usb_d_dev_out_next+0x290>)
    9aba:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9abc:	232d      	movs	r3, #45	; 0x2d
    9abe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9ac2:	e012      	b.n	9aea <_usb_d_dev_out_next+0x29a>
    9ac4:	20000b58 	.word	0x20000b58
    9ac8:	00009031 	.word	0x00009031
    9acc:	0000e895 	.word	0x0000e895
    9ad0:	0000905d 	.word	0x0000905d
    9ad4:	000091e5 	.word	0x000091e5
    9ad8:	0000893d 	.word	0x0000893d
    9adc:	0000a961 	.word	0x0000a961
    9ae0:	00009225 	.word	0x00009225
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9ae4:	2325      	movs	r3, #37	; 0x25
    9ae6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9aea:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9aee:	7ffb      	ldrb	r3, [r7, #31]
    9af0:	4619      	mov	r1, r3
    9af2:	6a38      	ldr	r0, [r7, #32]
    9af4:	4b05      	ldr	r3, [pc, #20]	; (9b0c <_usb_d_dev_out_next+0x2bc>)
    9af6:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9af8:	7ffb      	ldrb	r3, [r7, #31]
    9afa:	2201      	movs	r2, #1
    9afc:	2100      	movs	r1, #0
    9afe:	4618      	mov	r0, r3
    9b00:	4b03      	ldr	r3, [pc, #12]	; (9b10 <_usb_d_dev_out_next+0x2c0>)
    9b02:	4798      	blx	r3
}
    9b04:	372c      	adds	r7, #44	; 0x2c
    9b06:	46bd      	mov	sp, r7
    9b08:	bd90      	pop	{r4, r7, pc}
    9b0a:	bf00      	nop
    9b0c:	00008911 	.word	0x00008911
    9b10:	000092b5 	.word	0x000092b5

00009b14 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9b14:	b580      	push	{r7, lr}
    9b16:	b084      	sub	sp, #16
    9b18:	af00      	add	r7, sp, #0
    9b1a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9b1c:	687b      	ldr	r3, [r7, #4]
    9b1e:	7c9b      	ldrb	r3, [r3, #18]
    9b20:	f003 030f 	and.w	r3, r3, #15
    9b24:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9b26:	687b      	ldr	r3, [r7, #4]
    9b28:	7cdb      	ldrb	r3, [r3, #19]
    9b2a:	f003 0307 	and.w	r3, r3, #7
    9b2e:	b2db      	uxtb	r3, r3
    9b30:	2b01      	cmp	r3, #1
    9b32:	bf0c      	ite	eq
    9b34:	2301      	moveq	r3, #1
    9b36:	2300      	movne	r3, #0
    9b38:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9b3a:	7bbb      	ldrb	r3, [r7, #14]
    9b3c:	f083 0301 	eor.w	r3, r3, #1
    9b40:	b2db      	uxtb	r3, r3
    9b42:	2b00      	cmp	r3, #0
    9b44:	d008      	beq.n	9b58 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9b46:	7bfb      	ldrb	r3, [r7, #15]
    9b48:	4618      	mov	r0, r3
    9b4a:	4b20      	ldr	r3, [pc, #128]	; (9bcc <_usb_d_dev_handle_setup+0xb8>)
    9b4c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9b4e:	7bfb      	ldrb	r3, [r7, #15]
    9b50:	4618      	mov	r0, r3
    9b52:	4b1f      	ldr	r3, [pc, #124]	; (9bd0 <_usb_d_dev_handle_setup+0xbc>)
    9b54:	4798      	blx	r3
		return;
    9b56:	e036      	b.n	9bc6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9b58:	687b      	ldr	r3, [r7, #4]
    9b5a:	7cdb      	ldrb	r3, [r3, #19]
    9b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b60:	b2db      	uxtb	r3, r3
    9b62:	2b00      	cmp	r3, #0
    9b64:	d010      	beq.n	9b88 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9b66:	687a      	ldr	r2, [r7, #4]
    9b68:	7cd3      	ldrb	r3, [r2, #19]
    9b6a:	f36f 1386 	bfc	r3, #6, #1
    9b6e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9b70:	7bfb      	ldrb	r3, [r7, #15]
    9b72:	2200      	movs	r2, #0
    9b74:	2101      	movs	r1, #1
    9b76:	4618      	mov	r0, r3
    9b78:	4b16      	ldr	r3, [pc, #88]	; (9bd4 <_usb_d_dev_handle_setup+0xc0>)
    9b7a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9b7c:	7bfb      	ldrb	r3, [r7, #15]
    9b7e:	2200      	movs	r2, #0
    9b80:	2100      	movs	r1, #0
    9b82:	4618      	mov	r0, r3
    9b84:	4b14      	ldr	r3, [pc, #80]	; (9bd8 <_usb_d_dev_handle_setup+0xc4>)
    9b86:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9b88:	687a      	ldr	r2, [r7, #4]
    9b8a:	7cd3      	ldrb	r3, [r2, #19]
    9b8c:	f36f 03c3 	bfc	r3, #3, #1
    9b90:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9b92:	7bfb      	ldrb	r3, [r7, #15]
    9b94:	2100      	movs	r1, #0
    9b96:	4618      	mov	r0, r3
    9b98:	4b10      	ldr	r3, [pc, #64]	; (9bdc <_usb_d_dev_handle_setup+0xc8>)
    9b9a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9b9c:	7bfb      	ldrb	r3, [r7, #15]
    9b9e:	2101      	movs	r1, #1
    9ba0:	4618      	mov	r0, r3
    9ba2:	4b0e      	ldr	r3, [pc, #56]	; (9bdc <_usb_d_dev_handle_setup+0xc8>)
    9ba4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9ba6:	7bfb      	ldrb	r3, [r7, #15]
    9ba8:	216f      	movs	r1, #111	; 0x6f
    9baa:	4618      	mov	r0, r3
    9bac:	4b0c      	ldr	r3, [pc, #48]	; (9be0 <_usb_d_dev_handle_setup+0xcc>)
    9bae:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9bb0:	7bfb      	ldrb	r3, [r7, #15]
    9bb2:	216f      	movs	r1, #111	; 0x6f
    9bb4:	4618      	mov	r0, r3
    9bb6:	4b0b      	ldr	r3, [pc, #44]	; (9be4 <_usb_d_dev_handle_setup+0xd0>)
    9bb8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9bba:	4b0b      	ldr	r3, [pc, #44]	; (9be8 <_usb_d_dev_handle_setup+0xd4>)
    9bbc:	689b      	ldr	r3, [r3, #8]
    9bbe:	687a      	ldr	r2, [r7, #4]
    9bc0:	7c92      	ldrb	r2, [r2, #18]
    9bc2:	4610      	mov	r0, r2
    9bc4:	4798      	blx	r3
}
    9bc6:	3710      	adds	r7, #16
    9bc8:	46bd      	mov	sp, r7
    9bca:	bd80      	pop	{r7, pc}
    9bcc:	00008fb9 	.word	0x00008fb9
    9bd0:	00008f65 	.word	0x00008f65
    9bd4:	0000925d 	.word	0x0000925d
    9bd8:	000092b5 	.word	0x000092b5
    9bdc:	00009225 	.word	0x00009225
    9be0:	00008d65 	.word	0x00008d65
    9be4:	00008db5 	.word	0x00008db5
    9be8:	20000a90 	.word	0x20000a90

00009bec <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9bec:	b580      	push	{r7, lr}
    9bee:	b084      	sub	sp, #16
    9bf0:	af00      	add	r7, sp, #0
    9bf2:	6078      	str	r0, [r7, #4]
    9bf4:	460b      	mov	r3, r1
    9bf6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9bf8:	687b      	ldr	r3, [r7, #4]
    9bfa:	7c9b      	ldrb	r3, [r3, #18]
    9bfc:	f003 030f 	and.w	r3, r3, #15
    9c00:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9c02:	78f9      	ldrb	r1, [r7, #3]
    9c04:	7bfb      	ldrb	r3, [r7, #15]
    9c06:	2200      	movs	r2, #0
    9c08:	4618      	mov	r0, r3
    9c0a:	4b07      	ldr	r3, [pc, #28]	; (9c28 <_usb_d_dev_handle_stall+0x3c>)
    9c0c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9c0e:	4b07      	ldr	r3, [pc, #28]	; (9c2c <_usb_d_dev_handle_stall+0x40>)
    9c10:	691b      	ldr	r3, [r3, #16]
    9c12:	687a      	ldr	r2, [r7, #4]
    9c14:	7c90      	ldrb	r0, [r2, #18]
    9c16:	687a      	ldr	r2, [r7, #4]
    9c18:	6892      	ldr	r2, [r2, #8]
    9c1a:	2101      	movs	r1, #1
    9c1c:	4798      	blx	r3
}
    9c1e:	bf00      	nop
    9c20:	3710      	adds	r7, #16
    9c22:	46bd      	mov	sp, r7
    9c24:	bd80      	pop	{r7, pc}
    9c26:	bf00      	nop
    9c28:	00008f19 	.word	0x00008f19
    9c2c:	20000a90 	.word	0x20000a90

00009c30 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9c30:	b580      	push	{r7, lr}
    9c32:	b088      	sub	sp, #32
    9c34:	af00      	add	r7, sp, #0
    9c36:	6078      	str	r0, [r7, #4]
    9c38:	460b      	mov	r3, r1
    9c3a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9c3c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c40:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9c42:	687b      	ldr	r3, [r7, #4]
    9c44:	7c9b      	ldrb	r3, [r3, #18]
    9c46:	f003 030f 	and.w	r3, r3, #15
    9c4a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9c4c:	4b61      	ldr	r3, [pc, #388]	; (9dd4 <_usb_d_dev_handle_trfail+0x1a4>)
    9c4e:	881b      	ldrh	r3, [r3, #0]
    9c50:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9c52:	7efb      	ldrb	r3, [r7, #27]
    9c54:	015b      	lsls	r3, r3, #5
    9c56:	4a60      	ldr	r2, [pc, #384]	; (9dd8 <_usb_d_dev_handle_trfail+0x1a8>)
    9c58:	4413      	add	r3, r2
    9c5a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9c5c:	78fb      	ldrb	r3, [r7, #3]
    9c5e:	2b00      	cmp	r3, #0
    9c60:	d006      	beq.n	9c70 <_usb_d_dev_handle_trfail+0x40>
    9c62:	7efb      	ldrb	r3, [r7, #27]
    9c64:	4619      	mov	r1, r3
    9c66:	69f8      	ldr	r0, [r7, #28]
    9c68:	4b5c      	ldr	r3, [pc, #368]	; (9ddc <_usb_d_dev_handle_trfail+0x1ac>)
    9c6a:	4798      	blx	r3
    9c6c:	4603      	mov	r3, r0
    9c6e:	e005      	b.n	9c7c <_usb_d_dev_handle_trfail+0x4c>
    9c70:	7efb      	ldrb	r3, [r7, #27]
    9c72:	4619      	mov	r1, r3
    9c74:	69f8      	ldr	r0, [r7, #28]
    9c76:	4b5a      	ldr	r3, [pc, #360]	; (9de0 <_usb_d_dev_handle_trfail+0x1b0>)
    9c78:	4798      	blx	r3
    9c7a:	4603      	mov	r3, r0
    9c7c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9c7e:	687b      	ldr	r3, [r7, #4]
    9c80:	7cdb      	ldrb	r3, [r3, #19]
    9c82:	f003 0307 	and.w	r3, r3, #7
    9c86:	b2db      	uxtb	r3, r3
    9c88:	2b01      	cmp	r3, #1
    9c8a:	bf0c      	ite	eq
    9c8c:	2301      	moveq	r3, #1
    9c8e:	2300      	movne	r3, #0
    9c90:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9c92:	78fb      	ldrb	r3, [r7, #3]
    9c94:	011b      	lsls	r3, r3, #4
    9c96:	697a      	ldr	r2, [r7, #20]
    9c98:	4413      	add	r3, r2
    9c9a:	7a9b      	ldrb	r3, [r3, #10]
    9c9c:	b2db      	uxtb	r3, r3
    9c9e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9ca0:	7cfb      	ldrb	r3, [r7, #19]
    9ca2:	2b02      	cmp	r3, #2
    9ca4:	d12f      	bne.n	9d06 <_usb_d_dev_handle_trfail+0xd6>
    9ca6:	7b3b      	ldrb	r3, [r7, #12]
    9ca8:	f003 0301 	and.w	r3, r3, #1
    9cac:	b2db      	uxtb	r3, r3
    9cae:	2b00      	cmp	r3, #0
    9cb0:	d029      	beq.n	9d06 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9cb2:	78fb      	ldrb	r3, [r7, #3]
    9cb4:	011b      	lsls	r3, r3, #4
    9cb6:	697a      	ldr	r2, [r7, #20]
    9cb8:	441a      	add	r2, r3
    9cba:	7a93      	ldrb	r3, [r2, #10]
    9cbc:	f36f 0300 	bfc	r3, #0, #1
    9cc0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9cc2:	78fb      	ldrb	r3, [r7, #3]
    9cc4:	f107 0220 	add.w	r2, r7, #32
    9cc8:	4413      	add	r3, r2
    9cca:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9cce:	7efb      	ldrb	r3, [r7, #27]
    9cd0:	4619      	mov	r1, r3
    9cd2:	69f8      	ldr	r0, [r7, #28]
    9cd4:	4b43      	ldr	r3, [pc, #268]	; (9de4 <_usb_d_dev_handle_trfail+0x1b4>)
    9cd6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9cd8:	78fb      	ldrb	r3, [r7, #3]
    9cda:	f107 0220 	add.w	r2, r7, #32
    9cde:	4413      	add	r3, r2
    9ce0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9ce4:	7efb      	ldrb	r3, [r7, #27]
    9ce6:	4619      	mov	r1, r3
    9ce8:	69f8      	ldr	r0, [r7, #28]
    9cea:	4b3f      	ldr	r3, [pc, #252]	; (9de8 <_usb_d_dev_handle_trfail+0x1b8>)
    9cec:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9cee:	78fb      	ldrb	r3, [r7, #3]
    9cf0:	2b00      	cmp	r3, #0
    9cf2:	bf14      	ite	ne
    9cf4:	2301      	movne	r3, #1
    9cf6:	2300      	moveq	r3, #0
    9cf8:	b2db      	uxtb	r3, r3
    9cfa:	2204      	movs	r2, #4
    9cfc:	4619      	mov	r1, r3
    9cfe:	6878      	ldr	r0, [r7, #4]
    9d00:	4b3a      	ldr	r3, [pc, #232]	; (9dec <_usb_d_dev_handle_trfail+0x1bc>)
    9d02:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9d04:	e062      	b.n	9dcc <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9d06:	7b3b      	ldrb	r3, [r7, #12]
    9d08:	f003 0302 	and.w	r3, r3, #2
    9d0c:	b2db      	uxtb	r3, r3
    9d0e:	2b00      	cmp	r3, #0
    9d10:	d040      	beq.n	9d94 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9d12:	78fb      	ldrb	r3, [r7, #3]
    9d14:	011b      	lsls	r3, r3, #4
    9d16:	697a      	ldr	r2, [r7, #20]
    9d18:	441a      	add	r2, r3
    9d1a:	7a93      	ldrb	r3, [r2, #10]
    9d1c:	f36f 0341 	bfc	r3, #1, #1
    9d20:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9d22:	78fb      	ldrb	r3, [r7, #3]
    9d24:	f107 0220 	add.w	r2, r7, #32
    9d28:	4413      	add	r3, r2
    9d2a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d2e:	7efb      	ldrb	r3, [r7, #27]
    9d30:	4619      	mov	r1, r3
    9d32:	69f8      	ldr	r0, [r7, #28]
    9d34:	4b2b      	ldr	r3, [pc, #172]	; (9de4 <_usb_d_dev_handle_trfail+0x1b4>)
    9d36:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9d38:	78fb      	ldrb	r3, [r7, #3]
    9d3a:	f107 0220 	add.w	r2, r7, #32
    9d3e:	4413      	add	r3, r2
    9d40:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d44:	7efb      	ldrb	r3, [r7, #27]
    9d46:	4619      	mov	r1, r3
    9d48:	69f8      	ldr	r0, [r7, #28]
    9d4a:	4b27      	ldr	r3, [pc, #156]	; (9de8 <_usb_d_dev_handle_trfail+0x1b8>)
    9d4c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9d4e:	7cbb      	ldrb	r3, [r7, #18]
    9d50:	2b00      	cmp	r3, #0
    9d52:	d03b      	beq.n	9dcc <_usb_d_dev_handle_trfail+0x19c>
    9d54:	687b      	ldr	r3, [r7, #4]
    9d56:	7cdb      	ldrb	r3, [r3, #19]
    9d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d5c:	b2db      	uxtb	r3, r3
    9d5e:	2b00      	cmp	r3, #0
    9d60:	d034      	beq.n	9dcc <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9d62:	687b      	ldr	r3, [r7, #4]
    9d64:	7cdb      	ldrb	r3, [r3, #19]
    9d66:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9d6a:	b2db      	uxtb	r3, r3
    9d6c:	461a      	mov	r2, r3
    9d6e:	78fb      	ldrb	r3, [r7, #3]
    9d70:	4293      	cmp	r3, r2
    9d72:	d02b      	beq.n	9dcc <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9d74:	687b      	ldr	r3, [r7, #4]
    9d76:	7cdb      	ldrb	r3, [r3, #19]
    9d78:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9d7c:	b2db      	uxtb	r3, r3
    9d7e:	2b00      	cmp	r3, #0
    9d80:	bf14      	ite	ne
    9d82:	2301      	movne	r3, #1
    9d84:	2300      	moveq	r3, #0
    9d86:	b2db      	uxtb	r3, r3
    9d88:	2200      	movs	r2, #0
    9d8a:	4619      	mov	r1, r3
    9d8c:	6878      	ldr	r0, [r7, #4]
    9d8e:	4b17      	ldr	r3, [pc, #92]	; (9dec <_usb_d_dev_handle_trfail+0x1bc>)
    9d90:	4798      	blx	r3
}
    9d92:	e01b      	b.n	9dcc <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9d94:	78fa      	ldrb	r2, [r7, #3]
    9d96:	7efb      	ldrb	r3, [r7, #27]
    9d98:	4611      	mov	r1, r2
    9d9a:	4618      	mov	r0, r3
    9d9c:	4b14      	ldr	r3, [pc, #80]	; (9df0 <_usb_d_dev_handle_trfail+0x1c0>)
    9d9e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9da0:	78fb      	ldrb	r3, [r7, #3]
    9da2:	f107 0220 	add.w	r2, r7, #32
    9da6:	4413      	add	r3, r2
    9da8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9dac:	7efb      	ldrb	r3, [r7, #27]
    9dae:	4619      	mov	r1, r3
    9db0:	69f8      	ldr	r0, [r7, #28]
    9db2:	4b0c      	ldr	r3, [pc, #48]	; (9de4 <_usb_d_dev_handle_trfail+0x1b4>)
    9db4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9db6:	78fb      	ldrb	r3, [r7, #3]
    9db8:	f107 0220 	add.w	r2, r7, #32
    9dbc:	4413      	add	r3, r2
    9dbe:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9dc2:	7efb      	ldrb	r3, [r7, #27]
    9dc4:	4619      	mov	r1, r3
    9dc6:	69f8      	ldr	r0, [r7, #28]
    9dc8:	4b07      	ldr	r3, [pc, #28]	; (9de8 <_usb_d_dev_handle_trfail+0x1b8>)
    9dca:	4798      	blx	r3
}
    9dcc:	bf00      	nop
    9dce:	3720      	adds	r7, #32
    9dd0:	46bd      	mov	sp, r7
    9dd2:	bd80      	pop	{r7, pc}
    9dd4:	0000f094 	.word	0x0000f094
    9dd8:	20000b58 	.word	0x20000b58
    9ddc:	00008999 	.word	0x00008999
    9de0:	00008969 	.word	0x00008969
    9de4:	0000883d 	.word	0x0000883d
    9de8:	0000893d 	.word	0x0000893d
    9dec:	0000a9a9 	.word	0x0000a9a9
    9df0:	00009225 	.word	0x00009225

00009df4 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9df4:	b580      	push	{r7, lr}
    9df6:	b082      	sub	sp, #8
    9df8:	af00      	add	r7, sp, #0
    9dfa:	6078      	str	r0, [r7, #4]
    9dfc:	460b      	mov	r3, r1
    9dfe:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9e00:	78fb      	ldrb	r3, [r7, #3]
    9e02:	f003 0310 	and.w	r3, r3, #16
    9e06:	2b00      	cmp	r3, #0
    9e08:	d003      	beq.n	9e12 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9e0a:	6878      	ldr	r0, [r7, #4]
    9e0c:	4b0c      	ldr	r3, [pc, #48]	; (9e40 <_usb_d_dev_trans_setup_isr+0x4c>)
    9e0e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9e10:	e012      	b.n	9e38 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9e12:	78fb      	ldrb	r3, [r7, #3]
    9e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e18:	2b00      	cmp	r3, #0
    9e1a:	d004      	beq.n	9e26 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9e1c:	2101      	movs	r1, #1
    9e1e:	6878      	ldr	r0, [r7, #4]
    9e20:	4b08      	ldr	r3, [pc, #32]	; (9e44 <_usb_d_dev_trans_setup_isr+0x50>)
    9e22:	4798      	blx	r3
}
    9e24:	e008      	b.n	9e38 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9e26:	78fb      	ldrb	r3, [r7, #3]
    9e28:	f003 0320 	and.w	r3, r3, #32
    9e2c:	2b00      	cmp	r3, #0
    9e2e:	d003      	beq.n	9e38 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9e30:	2100      	movs	r1, #0
    9e32:	6878      	ldr	r0, [r7, #4]
    9e34:	4b03      	ldr	r3, [pc, #12]	; (9e44 <_usb_d_dev_trans_setup_isr+0x50>)
    9e36:	4798      	blx	r3
}
    9e38:	bf00      	nop
    9e3a:	3708      	adds	r7, #8
    9e3c:	46bd      	mov	sp, r7
    9e3e:	bd80      	pop	{r7, pc}
    9e40:	00009b15 	.word	0x00009b15
    9e44:	00009bed 	.word	0x00009bed

00009e48 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9e48:	b580      	push	{r7, lr}
    9e4a:	b082      	sub	sp, #8
    9e4c:	af00      	add	r7, sp, #0
    9e4e:	6078      	str	r0, [r7, #4]
    9e50:	460b      	mov	r3, r1
    9e52:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9e54:	78fb      	ldrb	r3, [r7, #3]
    9e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e5a:	2b00      	cmp	r3, #0
    9e5c:	d004      	beq.n	9e68 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9e5e:	2101      	movs	r1, #1
    9e60:	6878      	ldr	r0, [r7, #4]
    9e62:	4b1a      	ldr	r3, [pc, #104]	; (9ecc <_usb_d_dev_trans_in_isr+0x84>)
    9e64:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9e66:	e02c      	b.n	9ec2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9e68:	78fb      	ldrb	r3, [r7, #3]
    9e6a:	f003 0308 	and.w	r3, r3, #8
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d004      	beq.n	9e7c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9e72:	2101      	movs	r1, #1
    9e74:	6878      	ldr	r0, [r7, #4]
    9e76:	4b16      	ldr	r3, [pc, #88]	; (9ed0 <_usb_d_dev_trans_in_isr+0x88>)
    9e78:	4798      	blx	r3
}
    9e7a:	e022      	b.n	9ec2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9e7c:	78fb      	ldrb	r3, [r7, #3]
    9e7e:	f003 0302 	and.w	r3, r3, #2
    9e82:	2b00      	cmp	r3, #0
    9e84:	d004      	beq.n	9e90 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9e86:	2101      	movs	r1, #1
    9e88:	6878      	ldr	r0, [r7, #4]
    9e8a:	4b12      	ldr	r3, [pc, #72]	; (9ed4 <_usb_d_dev_trans_in_isr+0x8c>)
    9e8c:	4798      	blx	r3
}
    9e8e:	e018      	b.n	9ec2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	7cdb      	ldrb	r3, [r3, #19]
    9e94:	f003 0307 	and.w	r3, r3, #7
    9e98:	b2db      	uxtb	r3, r3
    9e9a:	2b01      	cmp	r3, #1
    9e9c:	d111      	bne.n	9ec2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9e9e:	78fb      	ldrb	r3, [r7, #3]
    9ea0:	f003 0304 	and.w	r3, r3, #4
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	d004      	beq.n	9eb2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9ea8:	2100      	movs	r1, #0
    9eaa:	6878      	ldr	r0, [r7, #4]
    9eac:	4b08      	ldr	r3, [pc, #32]	; (9ed0 <_usb_d_dev_trans_in_isr+0x88>)
    9eae:	4798      	blx	r3
}
    9eb0:	e007      	b.n	9ec2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9eb2:	78fb      	ldrb	r3, [r7, #3]
    9eb4:	f003 0310 	and.w	r3, r3, #16
    9eb8:	2b00      	cmp	r3, #0
    9eba:	d002      	beq.n	9ec2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9ebc:	6878      	ldr	r0, [r7, #4]
    9ebe:	4b06      	ldr	r3, [pc, #24]	; (9ed8 <_usb_d_dev_trans_in_isr+0x90>)
    9ec0:	4798      	blx	r3
}
    9ec2:	bf00      	nop
    9ec4:	3708      	adds	r7, #8
    9ec6:	46bd      	mov	sp, r7
    9ec8:	bd80      	pop	{r7, pc}
    9eca:	bf00      	nop
    9ecc:	00009bed 	.word	0x00009bed
    9ed0:	00009c31 	.word	0x00009c31
    9ed4:	00009639 	.word	0x00009639
    9ed8:	00009b15 	.word	0x00009b15

00009edc <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9edc:	b580      	push	{r7, lr}
    9ede:	b082      	sub	sp, #8
    9ee0:	af00      	add	r7, sp, #0
    9ee2:	6078      	str	r0, [r7, #4]
    9ee4:	460b      	mov	r3, r1
    9ee6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9ee8:	78fb      	ldrb	r3, [r7, #3]
    9eea:	f003 0320 	and.w	r3, r3, #32
    9eee:	2b00      	cmp	r3, #0
    9ef0:	d004      	beq.n	9efc <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9ef2:	2100      	movs	r1, #0
    9ef4:	6878      	ldr	r0, [r7, #4]
    9ef6:	4b1a      	ldr	r3, [pc, #104]	; (9f60 <_usb_d_dev_trans_out_isr+0x84>)
    9ef8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9efa:	e02c      	b.n	9f56 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9efc:	78fb      	ldrb	r3, [r7, #3]
    9efe:	f003 0304 	and.w	r3, r3, #4
    9f02:	2b00      	cmp	r3, #0
    9f04:	d004      	beq.n	9f10 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9f06:	2100      	movs	r1, #0
    9f08:	6878      	ldr	r0, [r7, #4]
    9f0a:	4b16      	ldr	r3, [pc, #88]	; (9f64 <_usb_d_dev_trans_out_isr+0x88>)
    9f0c:	4798      	blx	r3
}
    9f0e:	e022      	b.n	9f56 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9f10:	78fb      	ldrb	r3, [r7, #3]
    9f12:	f003 0301 	and.w	r3, r3, #1
    9f16:	2b00      	cmp	r3, #0
    9f18:	d004      	beq.n	9f24 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9f1a:	2101      	movs	r1, #1
    9f1c:	6878      	ldr	r0, [r7, #4]
    9f1e:	4b12      	ldr	r3, [pc, #72]	; (9f68 <_usb_d_dev_trans_out_isr+0x8c>)
    9f20:	4798      	blx	r3
}
    9f22:	e018      	b.n	9f56 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9f24:	687b      	ldr	r3, [r7, #4]
    9f26:	7cdb      	ldrb	r3, [r3, #19]
    9f28:	f003 0307 	and.w	r3, r3, #7
    9f2c:	b2db      	uxtb	r3, r3
    9f2e:	2b01      	cmp	r3, #1
    9f30:	d111      	bne.n	9f56 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9f32:	78fb      	ldrb	r3, [r7, #3]
    9f34:	f003 0308 	and.w	r3, r3, #8
    9f38:	2b00      	cmp	r3, #0
    9f3a:	d004      	beq.n	9f46 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9f3c:	2101      	movs	r1, #1
    9f3e:	6878      	ldr	r0, [r7, #4]
    9f40:	4b08      	ldr	r3, [pc, #32]	; (9f64 <_usb_d_dev_trans_out_isr+0x88>)
    9f42:	4798      	blx	r3
}
    9f44:	e007      	b.n	9f56 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9f46:	78fb      	ldrb	r3, [r7, #3]
    9f48:	f003 0310 	and.w	r3, r3, #16
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	d002      	beq.n	9f56 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9f50:	6878      	ldr	r0, [r7, #4]
    9f52:	4b06      	ldr	r3, [pc, #24]	; (9f6c <_usb_d_dev_trans_out_isr+0x90>)
    9f54:	4798      	blx	r3
}
    9f56:	bf00      	nop
    9f58:	3708      	adds	r7, #8
    9f5a:	46bd      	mov	sp, r7
    9f5c:	bd80      	pop	{r7, pc}
    9f5e:	bf00      	nop
    9f60:	00009bed 	.word	0x00009bed
    9f64:	00009c31 	.word	0x00009c31
    9f68:	00009851 	.word	0x00009851
    9f6c:	00009b15 	.word	0x00009b15

00009f70 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9f70:	b580      	push	{r7, lr}
    9f72:	b084      	sub	sp, #16
    9f74:	af00      	add	r7, sp, #0
    9f76:	6078      	str	r0, [r7, #4]
    9f78:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9f7a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f7e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9f80:	683b      	ldr	r3, [r7, #0]
    9f82:	7c9b      	ldrb	r3, [r3, #18]
    9f84:	f003 030f 	and.w	r3, r3, #15
    9f88:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9f8a:	7afb      	ldrb	r3, [r7, #11]
    9f8c:	2201      	movs	r2, #1
    9f8e:	409a      	lsls	r2, r3
    9f90:	687b      	ldr	r3, [r7, #4]
    9f92:	4013      	ands	r3, r2
    9f94:	2b00      	cmp	r3, #0
    9f96:	d03d      	beq.n	a014 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9f98:	7afb      	ldrb	r3, [r7, #11]
    9f9a:	68fa      	ldr	r2, [r7, #12]
    9f9c:	3308      	adds	r3, #8
    9f9e:	015b      	lsls	r3, r3, #5
    9fa0:	4413      	add	r3, r2
    9fa2:	3307      	adds	r3, #7
    9fa4:	781b      	ldrb	r3, [r3, #0]
    9fa6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9fa8:	7afb      	ldrb	r3, [r7, #11]
    9faa:	68fa      	ldr	r2, [r7, #12]
    9fac:	015b      	lsls	r3, r3, #5
    9fae:	4413      	add	r3, r2
    9fb0:	f203 1309 	addw	r3, r3, #265	; 0x109
    9fb4:	781b      	ldrb	r3, [r3, #0]
    9fb6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9fb8:	7aba      	ldrb	r2, [r7, #10]
    9fba:	7a7b      	ldrb	r3, [r7, #9]
    9fbc:	4013      	ands	r3, r2
    9fbe:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9fc0:	7abb      	ldrb	r3, [r7, #10]
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d027      	beq.n	a016 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9fc6:	683b      	ldr	r3, [r7, #0]
    9fc8:	7cdb      	ldrb	r3, [r3, #19]
    9fca:	f003 0307 	and.w	r3, r3, #7
    9fce:	b2db      	uxtb	r3, r3
    9fd0:	2b01      	cmp	r3, #1
    9fd2:	d10c      	bne.n	9fee <_usb_d_dev_handle_eps+0x7e>
    9fd4:	683b      	ldr	r3, [r7, #0]
    9fd6:	7cdb      	ldrb	r3, [r3, #19]
    9fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9fdc:	b2db      	uxtb	r3, r3
    9fde:	2b00      	cmp	r3, #0
    9fe0:	d105      	bne.n	9fee <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9fe2:	7abb      	ldrb	r3, [r7, #10]
    9fe4:	4619      	mov	r1, r3
    9fe6:	6838      	ldr	r0, [r7, #0]
    9fe8:	4b0c      	ldr	r3, [pc, #48]	; (a01c <_usb_d_dev_handle_eps+0xac>)
    9fea:	4798      	blx	r3
    9fec:	e013      	b.n	a016 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9fee:	683b      	ldr	r3, [r7, #0]
    9ff0:	7cdb      	ldrb	r3, [r3, #19]
    9ff2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9ff6:	b2db      	uxtb	r3, r3
    9ff8:	2b00      	cmp	r3, #0
    9ffa:	d005      	beq.n	a008 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9ffc:	7abb      	ldrb	r3, [r7, #10]
    9ffe:	4619      	mov	r1, r3
    a000:	6838      	ldr	r0, [r7, #0]
    a002:	4b07      	ldr	r3, [pc, #28]	; (a020 <_usb_d_dev_handle_eps+0xb0>)
    a004:	4798      	blx	r3
    a006:	e006      	b.n	a016 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a008:	7abb      	ldrb	r3, [r7, #10]
    a00a:	4619      	mov	r1, r3
    a00c:	6838      	ldr	r0, [r7, #0]
    a00e:	4b05      	ldr	r3, [pc, #20]	; (a024 <_usb_d_dev_handle_eps+0xb4>)
    a010:	4798      	blx	r3
    a012:	e000      	b.n	a016 <_usb_d_dev_handle_eps+0xa6>
		return;
    a014:	bf00      	nop
		}
	}
}
    a016:	3710      	adds	r7, #16
    a018:	46bd      	mov	sp, r7
    a01a:	bd80      	pop	{r7, pc}
    a01c:	00009df5 	.word	0x00009df5
    a020:	00009e49 	.word	0x00009e49
    a024:	00009edd 	.word	0x00009edd

0000a028 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a028:	b580      	push	{r7, lr}
    a02a:	b084      	sub	sp, #16
    a02c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a02e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a032:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a034:	68bb      	ldr	r3, [r7, #8]
    a036:	8c1b      	ldrh	r3, [r3, #32]
    a038:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a03a:	88fb      	ldrh	r3, [r7, #6]
    a03c:	2b00      	cmp	r3, #0
    a03e:	d104      	bne.n	a04a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a040:	4b13      	ldr	r3, [pc, #76]	; (a090 <_usb_d_dev_handler+0x68>)
    a042:	4798      	blx	r3
    a044:	4603      	mov	r3, r0
    a046:	2b00      	cmp	r3, #0
    a048:	d11e      	bne.n	a088 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a04a:	2300      	movs	r3, #0
    a04c:	73fb      	strb	r3, [r7, #15]
    a04e:	e017      	b.n	a080 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a050:	7bfa      	ldrb	r2, [r7, #15]
    a052:	4613      	mov	r3, r2
    a054:	009b      	lsls	r3, r3, #2
    a056:	4413      	add	r3, r2
    a058:	009b      	lsls	r3, r3, #2
    a05a:	3310      	adds	r3, #16
    a05c:	4a0d      	ldr	r2, [pc, #52]	; (a094 <_usb_d_dev_handler+0x6c>)
    a05e:	4413      	add	r3, r2
    a060:	3304      	adds	r3, #4
    a062:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a064:	683b      	ldr	r3, [r7, #0]
    a066:	7c9b      	ldrb	r3, [r3, #18]
    a068:	2bff      	cmp	r3, #255	; 0xff
    a06a:	d005      	beq.n	a078 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a06c:	88fb      	ldrh	r3, [r7, #6]
    a06e:	6839      	ldr	r1, [r7, #0]
    a070:	4618      	mov	r0, r3
    a072:	4b09      	ldr	r3, [pc, #36]	; (a098 <_usb_d_dev_handler+0x70>)
    a074:	4798      	blx	r3
    a076:	e000      	b.n	a07a <_usb_d_dev_handler+0x52>
			continue;
    a078:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a07a:	7bfb      	ldrb	r3, [r7, #15]
    a07c:	3301      	adds	r3, #1
    a07e:	73fb      	strb	r3, [r7, #15]
    a080:	7bfb      	ldrb	r3, [r7, #15]
    a082:	2b08      	cmp	r3, #8
    a084:	d9e4      	bls.n	a050 <_usb_d_dev_handler+0x28>
    a086:	e000      	b.n	a08a <_usb_d_dev_handler+0x62>
			return;
    a088:	bf00      	nop
	}
}
    a08a:	3710      	adds	r7, #16
    a08c:	46bd      	mov	sp, r7
    a08e:	bd80      	pop	{r7, pc}
    a090:	00009581 	.word	0x00009581
    a094:	20000a90 	.word	0x20000a90
    a098:	00009f71 	.word	0x00009f71

0000a09c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a09c:	b580      	push	{r7, lr}
    a09e:	b082      	sub	sp, #8
    a0a0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a0a2:	2300      	movs	r3, #0
    a0a4:	71fb      	strb	r3, [r7, #7]
    a0a6:	e023      	b.n	a0f0 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a0a8:	79fa      	ldrb	r2, [r7, #7]
    a0aa:	4613      	mov	r3, r2
    a0ac:	009b      	lsls	r3, r3, #2
    a0ae:	4413      	add	r3, r2
    a0b0:	009b      	lsls	r3, r3, #2
    a0b2:	3310      	adds	r3, #16
    a0b4:	4a14      	ldr	r2, [pc, #80]	; (a108 <_usb_d_dev_reset_epts+0x6c>)
    a0b6:	4413      	add	r3, r2
    a0b8:	3304      	adds	r3, #4
    a0ba:	2103      	movs	r1, #3
    a0bc:	4618      	mov	r0, r3
    a0be:	4b13      	ldr	r3, [pc, #76]	; (a10c <_usb_d_dev_reset_epts+0x70>)
    a0c0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a0c2:	79fa      	ldrb	r2, [r7, #7]
    a0c4:	4910      	ldr	r1, [pc, #64]	; (a108 <_usb_d_dev_reset_epts+0x6c>)
    a0c6:	4613      	mov	r3, r2
    a0c8:	009b      	lsls	r3, r3, #2
    a0ca:	4413      	add	r3, r2
    a0cc:	009b      	lsls	r3, r3, #2
    a0ce:	440b      	add	r3, r1
    a0d0:	3326      	adds	r3, #38	; 0x26
    a0d2:	22ff      	movs	r2, #255	; 0xff
    a0d4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a0d6:	79fa      	ldrb	r2, [r7, #7]
    a0d8:	490b      	ldr	r1, [pc, #44]	; (a108 <_usb_d_dev_reset_epts+0x6c>)
    a0da:	4613      	mov	r3, r2
    a0dc:	009b      	lsls	r3, r3, #2
    a0de:	4413      	add	r3, r2
    a0e0:	009b      	lsls	r3, r3, #2
    a0e2:	440b      	add	r3, r1
    a0e4:	3327      	adds	r3, #39	; 0x27
    a0e6:	2200      	movs	r2, #0
    a0e8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a0ea:	79fb      	ldrb	r3, [r7, #7]
    a0ec:	3301      	adds	r3, #1
    a0ee:	71fb      	strb	r3, [r7, #7]
    a0f0:	79fb      	ldrb	r3, [r7, #7]
    a0f2:	2b08      	cmp	r3, #8
    a0f4:	d9d8      	bls.n	a0a8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a0f6:	22a0      	movs	r2, #160	; 0xa0
    a0f8:	2100      	movs	r1, #0
    a0fa:	4805      	ldr	r0, [pc, #20]	; (a110 <_usb_d_dev_reset_epts+0x74>)
    a0fc:	4b05      	ldr	r3, [pc, #20]	; (a114 <_usb_d_dev_reset_epts+0x78>)
    a0fe:	4798      	blx	r3
}
    a100:	bf00      	nop
    a102:	3708      	adds	r7, #8
    a104:	46bd      	mov	sp, r7
    a106:	bd80      	pop	{r7, pc}
    a108:	20000a90 	.word	0x20000a90
    a10c:	0000a961 	.word	0x0000a961
    a110:	20000b58 	.word	0x20000b58
    a114:	0000e9c9 	.word	0x0000e9c9

0000a118 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a118:	b580      	push	{r7, lr}
    a11a:	b084      	sub	sp, #16
    a11c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a11e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a122:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a124:	2301      	movs	r3, #1
    a126:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a128:	2304      	movs	r3, #4
    a12a:	713b      	strb	r3, [r7, #4]
    a12c:	2300      	movs	r3, #0
    a12e:	717b      	strb	r3, [r7, #5]
    a130:	2300      	movs	r3, #0
    a132:	71bb      	strb	r3, [r7, #6]
    a134:	2300      	movs	r3, #0
    a136:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a138:	2101      	movs	r1, #1
    a13a:	68f8      	ldr	r0, [r7, #12]
    a13c:	4b26      	ldr	r3, [pc, #152]	; (a1d8 <_usb_d_dev_init+0xc0>)
    a13e:	4798      	blx	r3
    a140:	4603      	mov	r3, r0
    a142:	f083 0301 	eor.w	r3, r3, #1
    a146:	b2db      	uxtb	r3, r3
    a148:	2b00      	cmp	r3, #0
    a14a:	d011      	beq.n	a170 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a14c:	2102      	movs	r1, #2
    a14e:	68f8      	ldr	r0, [r7, #12]
    a150:	4b22      	ldr	r3, [pc, #136]	; (a1dc <_usb_d_dev_init+0xc4>)
    a152:	4798      	blx	r3
    a154:	4603      	mov	r3, r0
    a156:	2b00      	cmp	r3, #0
    a158:	d006      	beq.n	a168 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a15a:	68f8      	ldr	r0, [r7, #12]
    a15c:	4b20      	ldr	r3, [pc, #128]	; (a1e0 <_usb_d_dev_init+0xc8>)
    a15e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a160:	2102      	movs	r1, #2
    a162:	68f8      	ldr	r0, [r7, #12]
    a164:	4b1f      	ldr	r3, [pc, #124]	; (a1e4 <_usb_d_dev_init+0xcc>)
    a166:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a168:	2101      	movs	r1, #1
    a16a:	68f8      	ldr	r0, [r7, #12]
    a16c:	4b1e      	ldr	r3, [pc, #120]	; (a1e8 <_usb_d_dev_init+0xd0>)
    a16e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a170:	2101      	movs	r1, #1
    a172:	68f8      	ldr	r0, [r7, #12]
    a174:	4b1b      	ldr	r3, [pc, #108]	; (a1e4 <_usb_d_dev_init+0xcc>)
    a176:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a178:	4b1c      	ldr	r3, [pc, #112]	; (a1ec <_usb_d_dev_init+0xd4>)
    a17a:	4a1d      	ldr	r2, [pc, #116]	; (a1f0 <_usb_d_dev_init+0xd8>)
    a17c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a17e:	4b1b      	ldr	r3, [pc, #108]	; (a1ec <_usb_d_dev_init+0xd4>)
    a180:	4a1b      	ldr	r2, [pc, #108]	; (a1f0 <_usb_d_dev_init+0xd8>)
    a182:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a184:	4b19      	ldr	r3, [pc, #100]	; (a1ec <_usb_d_dev_init+0xd4>)
    a186:	4a1a      	ldr	r2, [pc, #104]	; (a1f0 <_usb_d_dev_init+0xd8>)
    a188:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a18a:	4b18      	ldr	r3, [pc, #96]	; (a1ec <_usb_d_dev_init+0xd4>)
    a18c:	4a18      	ldr	r2, [pc, #96]	; (a1f0 <_usb_d_dev_init+0xd8>)
    a18e:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a190:	4b16      	ldr	r3, [pc, #88]	; (a1ec <_usb_d_dev_init+0xd4>)
    a192:	4a17      	ldr	r2, [pc, #92]	; (a1f0 <_usb_d_dev_init+0xd8>)
    a194:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a196:	4b17      	ldr	r3, [pc, #92]	; (a1f4 <_usb_d_dev_init+0xdc>)
    a198:	4798      	blx	r3

	_usb_load_calib();
    a19a:	4b17      	ldr	r3, [pc, #92]	; (a1f8 <_usb_d_dev_init+0xe0>)
    a19c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a19e:	2104      	movs	r1, #4
    a1a0:	68f8      	ldr	r0, [r7, #12]
    a1a2:	4b11      	ldr	r3, [pc, #68]	; (a1e8 <_usb_d_dev_init+0xd0>)
    a1a4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a1a6:	4b15      	ldr	r3, [pc, #84]	; (a1fc <_usb_d_dev_init+0xe4>)
    a1a8:	4619      	mov	r1, r3
    a1aa:	68f8      	ldr	r0, [r7, #12]
    a1ac:	4b14      	ldr	r3, [pc, #80]	; (a200 <_usb_d_dev_init+0xe8>)
    a1ae:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a1b0:	7afb      	ldrb	r3, [r7, #11]
    a1b2:	f107 0210 	add.w	r2, r7, #16
    a1b6:	4413      	add	r3, r2
    a1b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a1bc:	f043 0301 	orr.w	r3, r3, #1
    a1c0:	b2db      	uxtb	r3, r3
    a1c2:	b29b      	uxth	r3, r3
    a1c4:	4619      	mov	r1, r3
    a1c6:	68f8      	ldr	r0, [r7, #12]
    a1c8:	4b0e      	ldr	r3, [pc, #56]	; (a204 <_usb_d_dev_init+0xec>)
    a1ca:	4798      	blx	r3

	return ERR_NONE;
    a1cc:	2300      	movs	r3, #0
}
    a1ce:	4618      	mov	r0, r3
    a1d0:	3710      	adds	r7, #16
    a1d2:	46bd      	mov	sp, r7
    a1d4:	bd80      	pop	{r7, pc}
    a1d6:	bf00      	nop
    a1d8:	000087b1 	.word	0x000087b1
    a1dc:	00008b01 	.word	0x00008b01
    a1e0:	00008ad5 	.word	0x00008ad5
    a1e4:	00008787 	.word	0x00008787
    a1e8:	00008b31 	.word	0x00008b31
    a1ec:	20000a90 	.word	0x20000a90
    a1f0:	00008bf9 	.word	0x00008bf9
    a1f4:	0000a09d 	.word	0x0000a09d
    a1f8:	00008c11 	.word	0x00008c11
    a1fc:	20000b58 	.word	0x20000b58
    a200:	00008bdd 	.word	0x00008bdd
    a204:	00008ba1 	.word	0x00008ba1

0000a208 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a208:	b580      	push	{r7, lr}
    a20a:	b082      	sub	sp, #8
    a20c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a20e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a212:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a214:	2103      	movs	r1, #3
    a216:	6878      	ldr	r0, [r7, #4]
    a218:	4b17      	ldr	r3, [pc, #92]	; (a278 <_usb_d_dev_enable+0x70>)
    a21a:	4798      	blx	r3
    a21c:	4603      	mov	r3, r0
    a21e:	2b00      	cmp	r3, #0
    a220:	d002      	beq.n	a228 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a222:	f06f 0310 	mvn.w	r3, #16
    a226:	e023      	b.n	a270 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a228:	6878      	ldr	r0, [r7, #4]
    a22a:	4b14      	ldr	r3, [pc, #80]	; (a27c <_usb_d_dev_enable+0x74>)
    a22c:	4798      	blx	r3
    a22e:	4603      	mov	r3, r0
    a230:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a232:	78fb      	ldrb	r3, [r7, #3]
    a234:	f003 0302 	and.w	r3, r3, #2
    a238:	2b00      	cmp	r3, #0
    a23a:	d107      	bne.n	a24c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a23c:	78fb      	ldrb	r3, [r7, #3]
    a23e:	f043 0302 	orr.w	r3, r3, #2
    a242:	b2db      	uxtb	r3, r3
    a244:	4619      	mov	r1, r3
    a246:	6878      	ldr	r0, [r7, #4]
    a248:	4b0d      	ldr	r3, [pc, #52]	; (a280 <_usb_d_dev_enable+0x78>)
    a24a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a24c:	2050      	movs	r0, #80	; 0x50
    a24e:	4b0d      	ldr	r3, [pc, #52]	; (a284 <_usb_d_dev_enable+0x7c>)
    a250:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a252:	2051      	movs	r0, #81	; 0x51
    a254:	4b0b      	ldr	r3, [pc, #44]	; (a284 <_usb_d_dev_enable+0x7c>)
    a256:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a258:	2052      	movs	r0, #82	; 0x52
    a25a:	4b0a      	ldr	r3, [pc, #40]	; (a284 <_usb_d_dev_enable+0x7c>)
    a25c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a25e:	2053      	movs	r0, #83	; 0x53
    a260:	4b08      	ldr	r3, [pc, #32]	; (a284 <_usb_d_dev_enable+0x7c>)
    a262:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a264:	f240 218d 	movw	r1, #653	; 0x28d
    a268:	6878      	ldr	r0, [r7, #4]
    a26a:	4b07      	ldr	r3, [pc, #28]	; (a288 <_usb_d_dev_enable+0x80>)
    a26c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a26e:	2300      	movs	r3, #0
}
    a270:	4618      	mov	r0, r3
    a272:	3708      	adds	r7, #8
    a274:	46bd      	mov	sp, r7
    a276:	bd80      	pop	{r7, pc}
    a278:	00008aab 	.word	0x00008aab
    a27c:	00008b59 	.word	0x00008b59
    a280:	00008b31 	.word	0x00008b31
    a284:	000086bd 	.word	0x000086bd
    a288:	00008a55 	.word	0x00008a55

0000a28c <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a28c:	b580      	push	{r7, lr}
    a28e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a290:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a294:	4b01      	ldr	r3, [pc, #4]	; (a29c <_usb_d_dev_attach+0x10>)
    a296:	4798      	blx	r3
}
    a298:	bf00      	nop
    a29a:	bd80      	pop	{r7, pc}
    a29c:	00008b7d 	.word	0x00008b7d

0000a2a0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a2a0:	b580      	push	{r7, lr}
    a2a2:	b082      	sub	sp, #8
    a2a4:	af00      	add	r7, sp, #0
    a2a6:	4603      	mov	r3, r0
    a2a8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a2aa:	79fb      	ldrb	r3, [r7, #7]
    a2ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a2b0:	b2db      	uxtb	r3, r3
    a2b2:	4619      	mov	r1, r3
    a2b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a2b8:	4b02      	ldr	r3, [pc, #8]	; (a2c4 <_usb_d_dev_set_address+0x24>)
    a2ba:	4798      	blx	r3
}
    a2bc:	bf00      	nop
    a2be:	3708      	adds	r7, #8
    a2c0:	46bd      	mov	sp, r7
    a2c2:	bd80      	pop	{r7, pc}
    a2c4:	00008bbf 	.word	0x00008bbf

0000a2c8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a2c8:	b590      	push	{r4, r7, lr}
    a2ca:	b085      	sub	sp, #20
    a2cc:	af00      	add	r7, sp, #0
    a2ce:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a2d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a2d4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a2d6:	687b      	ldr	r3, [r7, #4]
    a2d8:	7c9b      	ldrb	r3, [r3, #18]
    a2da:	f003 030f 	and.w	r3, r3, #15
    a2de:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a2e0:	687b      	ldr	r3, [r7, #4]
    a2e2:	68db      	ldr	r3, [r3, #12]
    a2e4:	461a      	mov	r2, r3
    a2e6:	7afb      	ldrb	r3, [r7, #11]
    a2e8:	2100      	movs	r1, #0
    a2ea:	4618      	mov	r0, r3
    a2ec:	4b0f      	ldr	r3, [pc, #60]	; (a32c <_usb_d_dev_trans_setup+0x64>)
    a2ee:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a2f0:	687b      	ldr	r3, [r7, #4]
    a2f2:	8a1b      	ldrh	r3, [r3, #16]
    a2f4:	461a      	mov	r2, r3
    a2f6:	7af8      	ldrb	r0, [r7, #11]
    a2f8:	2300      	movs	r3, #0
    a2fa:	2100      	movs	r1, #0
    a2fc:	4c0c      	ldr	r4, [pc, #48]	; (a330 <_usb_d_dev_trans_setup+0x68>)
    a2fe:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a300:	7afb      	ldrb	r3, [r7, #11]
    a302:	22b0      	movs	r2, #176	; 0xb0
    a304:	4619      	mov	r1, r3
    a306:	68f8      	ldr	r0, [r7, #12]
    a308:	4b0a      	ldr	r3, [pc, #40]	; (a334 <_usb_d_dev_trans_setup+0x6c>)
    a30a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a30c:	7afb      	ldrb	r3, [r7, #11]
    a30e:	2200      	movs	r2, #0
    a310:	2100      	movs	r1, #0
    a312:	4618      	mov	r0, r3
    a314:	4b08      	ldr	r3, [pc, #32]	; (a338 <_usb_d_dev_trans_setup+0x70>)
    a316:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a318:	7afb      	ldrb	r3, [r7, #11]
    a31a:	2210      	movs	r2, #16
    a31c:	4619      	mov	r1, r3
    a31e:	68f8      	ldr	r0, [r7, #12]
    a320:	4b06      	ldr	r3, [pc, #24]	; (a33c <_usb_d_dev_trans_setup+0x74>)
    a322:	4798      	blx	r3
}
    a324:	bf00      	nop
    a326:	3714      	adds	r7, #20
    a328:	46bd      	mov	sp, r7
    a32a:	bd90      	pop	{r4, r7, pc}
    a32c:	0000905d 	.word	0x0000905d
    a330:	000091e5 	.word	0x000091e5
    a334:	000088bd 	.word	0x000088bd
    a338:	000092b5 	.word	0x000092b5
    a33c:	00008911 	.word	0x00008911

0000a340 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a340:	b580      	push	{r7, lr}
    a342:	b088      	sub	sp, #32
    a344:	af00      	add	r7, sp, #0
    a346:	4603      	mov	r3, r0
    a348:	71fb      	strb	r3, [r7, #7]
    a34a:	460b      	mov	r3, r1
    a34c:	71bb      	strb	r3, [r7, #6]
    a34e:	4613      	mov	r3, r2
    a350:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a352:	79fb      	ldrb	r3, [r7, #7]
    a354:	f003 030f 	and.w	r3, r3, #15
    a358:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a35a:	79fb      	ldrb	r3, [r7, #7]
    a35c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a360:	2b00      	cmp	r3, #0
    a362:	bf14      	ite	ne
    a364:	2301      	movne	r3, #1
    a366:	2300      	moveq	r3, #0
    a368:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a36a:	7fba      	ldrb	r2, [r7, #30]
    a36c:	7ffb      	ldrb	r3, [r7, #31]
    a36e:	4611      	mov	r1, r2
    a370:	4618      	mov	r0, r3
    a372:	4b3e      	ldr	r3, [pc, #248]	; (a46c <_usb_d_dev_ep_init+0x12c>)
    a374:	4798      	blx	r3
    a376:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a378:	79bb      	ldrb	r3, [r7, #6]
    a37a:	f003 0303 	and.w	r3, r3, #3
    a37e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a380:	7ffa      	ldrb	r2, [r7, #31]
    a382:	4613      	mov	r3, r2
    a384:	005b      	lsls	r3, r3, #1
    a386:	4413      	add	r3, r2
    a388:	009b      	lsls	r3, r3, #2
    a38a:	4a39      	ldr	r2, [pc, #228]	; (a470 <_usb_d_dev_ep_init+0x130>)
    a38c:	4413      	add	r3, r2
    a38e:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a390:	7ffb      	ldrb	r3, [r7, #31]
    a392:	2b04      	cmp	r3, #4
    a394:	d902      	bls.n	a39c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a396:	f06f 0311 	mvn.w	r3, #17
    a39a:	e063      	b.n	a464 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a39c:	69bb      	ldr	r3, [r7, #24]
    a39e:	7c9b      	ldrb	r3, [r3, #18]
    a3a0:	2bff      	cmp	r3, #255	; 0xff
    a3a2:	d002      	beq.n	a3aa <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a3a4:	f06f 0313 	mvn.w	r3, #19
    a3a8:	e05c      	b.n	a464 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a3aa:	7dfb      	ldrb	r3, [r7, #23]
    a3ac:	2b00      	cmp	r3, #0
    a3ae:	d11f      	bne.n	a3f0 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a3b0:	7fbb      	ldrb	r3, [r7, #30]
    a3b2:	2b00      	cmp	r3, #0
    a3b4:	bf14      	ite	ne
    a3b6:	2301      	movne	r3, #1
    a3b8:	2300      	moveq	r3, #0
    a3ba:	b2db      	uxtb	r3, r3
    a3bc:	f083 0301 	eor.w	r3, r3, #1
    a3c0:	b2db      	uxtb	r3, r3
    a3c2:	f003 0301 	and.w	r3, r3, #1
    a3c6:	b2da      	uxtb	r2, r3
    a3c8:	7ffb      	ldrb	r3, [r7, #31]
    a3ca:	4611      	mov	r1, r2
    a3cc:	4618      	mov	r0, r3
    a3ce:	4b27      	ldr	r3, [pc, #156]	; (a46c <_usb_d_dev_ep_init+0x12c>)
    a3d0:	4798      	blx	r3
    a3d2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a3d4:	68fb      	ldr	r3, [r7, #12]
    a3d6:	7c9b      	ldrb	r3, [r3, #18]
    a3d8:	2bff      	cmp	r3, #255	; 0xff
    a3da:	d002      	beq.n	a3e2 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a3dc:	f06f 0313 	mvn.w	r3, #19
    a3e0:	e040      	b.n	a464 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a3e2:	693b      	ldr	r3, [r7, #16]
    a3e4:	681b      	ldr	r3, [r3, #0]
    a3e6:	2b00      	cmp	r3, #0
    a3e8:	d102      	bne.n	a3f0 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a3ea:	f06f 0312 	mvn.w	r3, #18
    a3ee:	e039      	b.n	a464 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a3f0:	7fbb      	ldrb	r3, [r7, #30]
    a3f2:	2b00      	cmp	r3, #0
    a3f4:	d007      	beq.n	a406 <_usb_d_dev_ep_init+0xc6>
    a3f6:	693b      	ldr	r3, [r7, #16]
    a3f8:	685b      	ldr	r3, [r3, #4]
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	bf14      	ite	ne
    a3fe:	2301      	movne	r3, #1
    a400:	2300      	moveq	r3, #0
    a402:	b2db      	uxtb	r3, r3
    a404:	e006      	b.n	a414 <_usb_d_dev_ep_init+0xd4>
    a406:	693b      	ldr	r3, [r7, #16]
    a408:	681b      	ldr	r3, [r3, #0]
    a40a:	2b00      	cmp	r3, #0
    a40c:	bf14      	ite	ne
    a40e:	2301      	movne	r3, #1
    a410:	2300      	moveq	r3, #0
    a412:	b2db      	uxtb	r3, r3
    a414:	2b00      	cmp	r3, #0
    a416:	d00f      	beq.n	a438 <_usb_d_dev_ep_init+0xf8>
    a418:	7fbb      	ldrb	r3, [r7, #30]
    a41a:	2b00      	cmp	r3, #0
    a41c:	d003      	beq.n	a426 <_usb_d_dev_ep_init+0xe6>
    a41e:	693b      	ldr	r3, [r7, #16]
    a420:	895b      	ldrh	r3, [r3, #10]
    a422:	461a      	mov	r2, r3
    a424:	e002      	b.n	a42c <_usb_d_dev_ep_init+0xec>
    a426:	693b      	ldr	r3, [r7, #16]
    a428:	891b      	ldrh	r3, [r3, #8]
    a42a:	461a      	mov	r2, r3
    a42c:	88bb      	ldrh	r3, [r7, #4]
    a42e:	429a      	cmp	r2, r3
    a430:	da02      	bge.n	a438 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a432:	f06f 0312 	mvn.w	r3, #18
    a436:	e015      	b.n	a464 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a438:	7fbb      	ldrb	r3, [r7, #30]
    a43a:	2b00      	cmp	r3, #0
    a43c:	d002      	beq.n	a444 <_usb_d_dev_ep_init+0x104>
    a43e:	693b      	ldr	r3, [r7, #16]
    a440:	685b      	ldr	r3, [r3, #4]
    a442:	e001      	b.n	a448 <_usb_d_dev_ep_init+0x108>
    a444:	693b      	ldr	r3, [r7, #16]
    a446:	681b      	ldr	r3, [r3, #0]
    a448:	69ba      	ldr	r2, [r7, #24]
    a44a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a44c:	69bb      	ldr	r3, [r7, #24]
    a44e:	88ba      	ldrh	r2, [r7, #4]
    a450:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a452:	7dfb      	ldrb	r3, [r7, #23]
    a454:	3301      	adds	r3, #1
    a456:	b2da      	uxtb	r2, r3
    a458:	69bb      	ldr	r3, [r7, #24]
    a45a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a45c:	69bb      	ldr	r3, [r7, #24]
    a45e:	79fa      	ldrb	r2, [r7, #7]
    a460:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a462:	2300      	movs	r3, #0
}
    a464:	4618      	mov	r0, r3
    a466:	3720      	adds	r7, #32
    a468:	46bd      	mov	sp, r7
    a46a:	bd80      	pop	{r7, pc}
    a46c:	00009371 	.word	0x00009371
    a470:	0000f058 	.word	0x0000f058

0000a474 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a474:	b580      	push	{r7, lr}
    a476:	b086      	sub	sp, #24
    a478:	af00      	add	r7, sp, #0
    a47a:	4603      	mov	r3, r0
    a47c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a47e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a482:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a484:	79fb      	ldrb	r3, [r7, #7]
    a486:	f003 030f 	and.w	r3, r3, #15
    a48a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a48c:	79fb      	ldrb	r3, [r7, #7]
    a48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a492:	2b00      	cmp	r3, #0
    a494:	bf14      	ite	ne
    a496:	2301      	movne	r3, #1
    a498:	2300      	moveq	r3, #0
    a49a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a49c:	7cba      	ldrb	r2, [r7, #18]
    a49e:	7cfb      	ldrb	r3, [r7, #19]
    a4a0:	4611      	mov	r1, r2
    a4a2:	4618      	mov	r0, r3
    a4a4:	4b2a      	ldr	r3, [pc, #168]	; (a550 <_usb_d_dev_ep_deinit+0xdc>)
    a4a6:	4798      	blx	r3
    a4a8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a4aa:	7cfb      	ldrb	r3, [r7, #19]
    a4ac:	2b04      	cmp	r3, #4
    a4ae:	d84a      	bhi.n	a546 <_usb_d_dev_ep_deinit+0xd2>
    a4b0:	68fb      	ldr	r3, [r7, #12]
    a4b2:	7c9b      	ldrb	r3, [r3, #18]
    a4b4:	2bff      	cmp	r3, #255	; 0xff
    a4b6:	d046      	beq.n	a546 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a4b8:	7cbb      	ldrb	r3, [r7, #18]
    a4ba:	2203      	movs	r2, #3
    a4bc:	4619      	mov	r1, r3
    a4be:	68f8      	ldr	r0, [r7, #12]
    a4c0:	4b24      	ldr	r3, [pc, #144]	; (a554 <_usb_d_dev_ep_deinit+0xe0>)
    a4c2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a4c4:	68fb      	ldr	r3, [r7, #12]
    a4c6:	7cdb      	ldrb	r3, [r3, #19]
    a4c8:	f003 0307 	and.w	r3, r3, #7
    a4cc:	b2db      	uxtb	r3, r3
    a4ce:	2b01      	cmp	r3, #1
    a4d0:	d107      	bne.n	a4e2 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a4d2:	79fb      	ldrb	r3, [r7, #7]
    a4d4:	697a      	ldr	r2, [r7, #20]
    a4d6:	3308      	adds	r3, #8
    a4d8:	015b      	lsls	r3, r3, #5
    a4da:	4413      	add	r3, r2
    a4dc:	2200      	movs	r2, #0
    a4de:	701a      	strb	r2, [r3, #0]
    a4e0:	e02a      	b.n	a538 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a4e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	da15      	bge.n	a516 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a4ea:	79fb      	ldrb	r3, [r7, #7]
    a4ec:	f003 030f 	and.w	r3, r3, #15
    a4f0:	79fa      	ldrb	r2, [r7, #7]
    a4f2:	f002 020f 	and.w	r2, r2, #15
    a4f6:	6979      	ldr	r1, [r7, #20]
    a4f8:	3208      	adds	r2, #8
    a4fa:	0152      	lsls	r2, r2, #5
    a4fc:	440a      	add	r2, r1
    a4fe:	7812      	ldrb	r2, [r2, #0]
    a500:	b2d2      	uxtb	r2, r2
    a502:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a506:	b2d1      	uxtb	r1, r2
    a508:	697a      	ldr	r2, [r7, #20]
    a50a:	3308      	adds	r3, #8
    a50c:	015b      	lsls	r3, r3, #5
    a50e:	4413      	add	r3, r2
    a510:	460a      	mov	r2, r1
    a512:	701a      	strb	r2, [r3, #0]
    a514:	e010      	b.n	a538 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a516:	79fb      	ldrb	r3, [r7, #7]
    a518:	79fa      	ldrb	r2, [r7, #7]
    a51a:	6979      	ldr	r1, [r7, #20]
    a51c:	3208      	adds	r2, #8
    a51e:	0152      	lsls	r2, r2, #5
    a520:	440a      	add	r2, r1
    a522:	7812      	ldrb	r2, [r2, #0]
    a524:	b2d2      	uxtb	r2, r2
    a526:	f022 0207 	bic.w	r2, r2, #7
    a52a:	b2d1      	uxtb	r1, r2
    a52c:	697a      	ldr	r2, [r7, #20]
    a52e:	3308      	adds	r3, #8
    a530:	015b      	lsls	r3, r3, #5
    a532:	4413      	add	r3, r2
    a534:	460a      	mov	r2, r1
    a536:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a538:	68fb      	ldr	r3, [r7, #12]
    a53a:	2200      	movs	r2, #0
    a53c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a53e:	68fb      	ldr	r3, [r7, #12]
    a540:	22ff      	movs	r2, #255	; 0xff
    a542:	749a      	strb	r2, [r3, #18]
    a544:	e000      	b.n	a548 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a546:	bf00      	nop
}
    a548:	3718      	adds	r7, #24
    a54a:	46bd      	mov	sp, r7
    a54c:	bd80      	pop	{r7, pc}
    a54e:	bf00      	nop
    a550:	00009371 	.word	0x00009371
    a554:	0000a9a9 	.word	0x0000a9a9

0000a558 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a558:	b5b0      	push	{r4, r5, r7, lr}
    a55a:	b088      	sub	sp, #32
    a55c:	af00      	add	r7, sp, #0
    a55e:	4603      	mov	r3, r0
    a560:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a562:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a566:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a568:	79fb      	ldrb	r3, [r7, #7]
    a56a:	f003 030f 	and.w	r3, r3, #15
    a56e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a570:	79fb      	ldrb	r3, [r7, #7]
    a572:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a576:	2b00      	cmp	r3, #0
    a578:	bf14      	ite	ne
    a57a:	2301      	movne	r3, #1
    a57c:	2300      	moveq	r3, #0
    a57e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a580:	7eba      	ldrb	r2, [r7, #26]
    a582:	7efb      	ldrb	r3, [r7, #27]
    a584:	4611      	mov	r1, r2
    a586:	4618      	mov	r0, r3
    a588:	4b70      	ldr	r3, [pc, #448]	; (a74c <_usb_d_dev_ep_enable+0x1f4>)
    a58a:	4798      	blx	r3
    a58c:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a58e:	7efb      	ldrb	r3, [r7, #27]
    a590:	4619      	mov	r1, r3
    a592:	69f8      	ldr	r0, [r7, #28]
    a594:	4b6e      	ldr	r3, [pc, #440]	; (a750 <_usb_d_dev_ep_enable+0x1f8>)
    a596:	4798      	blx	r3
    a598:	4603      	mov	r3, r0
    a59a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a59c:	7efb      	ldrb	r3, [r7, #27]
    a59e:	2b04      	cmp	r3, #4
    a5a0:	d803      	bhi.n	a5aa <_usb_d_dev_ep_enable+0x52>
    a5a2:	697b      	ldr	r3, [r7, #20]
    a5a4:	7c9b      	ldrb	r3, [r3, #18]
    a5a6:	2bff      	cmp	r3, #255	; 0xff
    a5a8:	d102      	bne.n	a5b0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a5aa:	f06f 0311 	mvn.w	r3, #17
    a5ae:	e0c8      	b.n	a742 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a5b0:	7efb      	ldrb	r3, [r7, #27]
    a5b2:	015b      	lsls	r3, r3, #5
    a5b4:	4a67      	ldr	r2, [pc, #412]	; (a754 <_usb_d_dev_ep_enable+0x1fc>)
    a5b6:	4413      	add	r3, r2
    a5b8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a5ba:	697b      	ldr	r3, [r7, #20]
    a5bc:	7cdb      	ldrb	r3, [r3, #19]
    a5be:	f003 0307 	and.w	r3, r3, #7
    a5c2:	b2db      	uxtb	r3, r3
    a5c4:	2b01      	cmp	r3, #1
    a5c6:	d14b      	bne.n	a660 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a5c8:	7cfb      	ldrb	r3, [r7, #19]
    a5ca:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a5ce:	2b00      	cmp	r3, #0
    a5d0:	d002      	beq.n	a5d8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a5d2:	f06f 0313 	mvn.w	r3, #19
    a5d6:	e0b4      	b.n	a742 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a5d8:	7efb      	ldrb	r3, [r7, #27]
    a5da:	2211      	movs	r2, #17
    a5dc:	4619      	mov	r1, r3
    a5de:	69f8      	ldr	r0, [r7, #28]
    a5e0:	4b5d      	ldr	r3, [pc, #372]	; (a758 <_usb_d_dev_ep_enable+0x200>)
    a5e2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a5e4:	697b      	ldr	r3, [r7, #20]
    a5e6:	8a1b      	ldrh	r3, [r3, #16]
    a5e8:	039b      	lsls	r3, r3, #14
    a5ea:	4c5c      	ldr	r4, [pc, #368]	; (a75c <_usb_d_dev_ep_enable+0x204>)
    a5ec:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a5ee:	697b      	ldr	r3, [r7, #20]
    a5f0:	8a1b      	ldrh	r3, [r3, #16]
    a5f2:	4618      	mov	r0, r3
    a5f4:	4b5a      	ldr	r3, [pc, #360]	; (a760 <_usb_d_dev_ep_enable+0x208>)
    a5f6:	4798      	blx	r3
    a5f8:	4603      	mov	r3, r0
    a5fa:	071b      	lsls	r3, r3, #28
    a5fc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a600:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a604:	68fb      	ldr	r3, [r7, #12]
    a606:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a608:	68fb      	ldr	r3, [r7, #12]
    a60a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a60e:	697b      	ldr	r3, [r7, #20]
    a610:	8a1b      	ldrh	r3, [r3, #16]
    a612:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a616:	697b      	ldr	r3, [r7, #20]
    a618:	8a1b      	ldrh	r3, [r3, #16]
    a61a:	4618      	mov	r0, r3
    a61c:	4b50      	ldr	r3, [pc, #320]	; (a760 <_usb_d_dev_ep_enable+0x208>)
    a61e:	4798      	blx	r3
    a620:	4603      	mov	r3, r0
    a622:	071b      	lsls	r3, r3, #28
    a624:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a628:	432b      	orrs	r3, r5
    a62a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a62c:	7efb      	ldrb	r3, [r7, #27]
    a62e:	2200      	movs	r2, #0
    a630:	2100      	movs	r1, #0
    a632:	4618      	mov	r0, r3
    a634:	4b4b      	ldr	r3, [pc, #300]	; (a764 <_usb_d_dev_ep_enable+0x20c>)
    a636:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a638:	7efb      	ldrb	r3, [r7, #27]
    a63a:	2200      	movs	r2, #0
    a63c:	2101      	movs	r1, #1
    a63e:	4618      	mov	r0, r3
    a640:	4b49      	ldr	r3, [pc, #292]	; (a768 <_usb_d_dev_ep_enable+0x210>)
    a642:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a644:	7efb      	ldrb	r3, [r7, #27]
    a646:	2100      	movs	r1, #0
    a648:	4618      	mov	r0, r3
    a64a:	4b48      	ldr	r3, [pc, #288]	; (a76c <_usb_d_dev_ep_enable+0x214>)
    a64c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a64e:	7efb      	ldrb	r3, [r7, #27]
    a650:	2101      	movs	r1, #1
    a652:	4618      	mov	r0, r3
    a654:	4b45      	ldr	r3, [pc, #276]	; (a76c <_usb_d_dev_ep_enable+0x214>)
    a656:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a658:	6978      	ldr	r0, [r7, #20]
    a65a:	4b45      	ldr	r3, [pc, #276]	; (a770 <_usb_d_dev_ep_enable+0x218>)
    a65c:	4798      	blx	r3
    a65e:	e06f      	b.n	a740 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a660:	7ebb      	ldrb	r3, [r7, #26]
    a662:	2b00      	cmp	r3, #0
    a664:	d038      	beq.n	a6d8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a666:	7cfb      	ldrb	r3, [r7, #19]
    a668:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a66c:	2b00      	cmp	r3, #0
    a66e:	d002      	beq.n	a676 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a670:	f06f 0313 	mvn.w	r3, #19
    a674:	e065      	b.n	a742 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a676:	697b      	ldr	r3, [r7, #20]
    a678:	7cdb      	ldrb	r3, [r3, #19]
    a67a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a67e:	b2db      	uxtb	r3, r3
    a680:	011b      	lsls	r3, r3, #4
    a682:	b2db      	uxtb	r3, r3
    a684:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a688:	b2da      	uxtb	r2, r3
    a68a:	7cfb      	ldrb	r3, [r7, #19]
    a68c:	4313      	orrs	r3, r2
    a68e:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a690:	7cfa      	ldrb	r2, [r7, #19]
    a692:	7efb      	ldrb	r3, [r7, #27]
    a694:	4619      	mov	r1, r3
    a696:	69f8      	ldr	r0, [r7, #28]
    a698:	4b2f      	ldr	r3, [pc, #188]	; (a758 <_usb_d_dev_ep_enable+0x200>)
    a69a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a69c:	68fb      	ldr	r3, [r7, #12]
    a69e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a6a2:	697b      	ldr	r3, [r7, #20]
    a6a4:	8a1b      	ldrh	r3, [r3, #16]
    a6a6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a6aa:	697b      	ldr	r3, [r7, #20]
    a6ac:	8a1b      	ldrh	r3, [r3, #16]
    a6ae:	4618      	mov	r0, r3
    a6b0:	4b2b      	ldr	r3, [pc, #172]	; (a760 <_usb_d_dev_ep_enable+0x208>)
    a6b2:	4798      	blx	r3
    a6b4:	4603      	mov	r3, r0
    a6b6:	071b      	lsls	r3, r3, #28
    a6b8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a6bc:	432b      	orrs	r3, r5
    a6be:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a6c0:	7efb      	ldrb	r3, [r7, #27]
    a6c2:	2200      	movs	r2, #0
    a6c4:	2101      	movs	r1, #1
    a6c6:	4618      	mov	r0, r3
    a6c8:	4b27      	ldr	r3, [pc, #156]	; (a768 <_usb_d_dev_ep_enable+0x210>)
    a6ca:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a6cc:	7efb      	ldrb	r3, [r7, #27]
    a6ce:	2101      	movs	r1, #1
    a6d0:	4618      	mov	r0, r3
    a6d2:	4b26      	ldr	r3, [pc, #152]	; (a76c <_usb_d_dev_ep_enable+0x214>)
    a6d4:	4798      	blx	r3
    a6d6:	e033      	b.n	a740 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a6d8:	7cfb      	ldrb	r3, [r7, #19]
    a6da:	f003 0307 	and.w	r3, r3, #7
    a6de:	2b00      	cmp	r3, #0
    a6e0:	d002      	beq.n	a6e8 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a6e2:	f06f 0313 	mvn.w	r3, #19
    a6e6:	e02c      	b.n	a742 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a6e8:	697b      	ldr	r3, [r7, #20]
    a6ea:	7cdb      	ldrb	r3, [r3, #19]
    a6ec:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a6f0:	b2db      	uxtb	r3, r3
    a6f2:	461a      	mov	r2, r3
    a6f4:	7cfb      	ldrb	r3, [r7, #19]
    a6f6:	4313      	orrs	r3, r2
    a6f8:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a6fa:	7cfa      	ldrb	r2, [r7, #19]
    a6fc:	7efb      	ldrb	r3, [r7, #27]
    a6fe:	4619      	mov	r1, r3
    a700:	69f8      	ldr	r0, [r7, #28]
    a702:	4b15      	ldr	r3, [pc, #84]	; (a758 <_usb_d_dev_ep_enable+0x200>)
    a704:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a706:	697b      	ldr	r3, [r7, #20]
    a708:	8a1b      	ldrh	r3, [r3, #16]
    a70a:	039b      	lsls	r3, r3, #14
    a70c:	4c13      	ldr	r4, [pc, #76]	; (a75c <_usb_d_dev_ep_enable+0x204>)
    a70e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a710:	697b      	ldr	r3, [r7, #20]
    a712:	8a1b      	ldrh	r3, [r3, #16]
    a714:	4618      	mov	r0, r3
    a716:	4b12      	ldr	r3, [pc, #72]	; (a760 <_usb_d_dev_ep_enable+0x208>)
    a718:	4798      	blx	r3
    a71a:	4603      	mov	r3, r0
    a71c:	071b      	lsls	r3, r3, #28
    a71e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a722:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a726:	68fb      	ldr	r3, [r7, #12]
    a728:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a72a:	7efb      	ldrb	r3, [r7, #27]
    a72c:	2200      	movs	r2, #0
    a72e:	2100      	movs	r1, #0
    a730:	4618      	mov	r0, r3
    a732:	4b0c      	ldr	r3, [pc, #48]	; (a764 <_usb_d_dev_ep_enable+0x20c>)
    a734:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a736:	7efb      	ldrb	r3, [r7, #27]
    a738:	2100      	movs	r1, #0
    a73a:	4618      	mov	r0, r3
    a73c:	4b0b      	ldr	r3, [pc, #44]	; (a76c <_usb_d_dev_ep_enable+0x214>)
    a73e:	4798      	blx	r3
	}

	return USB_OK;
    a740:	2300      	movs	r3, #0
}
    a742:	4618      	mov	r0, r3
    a744:	3720      	adds	r7, #32
    a746:	46bd      	mov	sp, r7
    a748:	bdb0      	pop	{r4, r5, r7, pc}
    a74a:	bf00      	nop
    a74c:	00009371 	.word	0x00009371
    a750:	000089f7 	.word	0x000089f7
    a754:	20000b58 	.word	0x20000b58
    a758:	000089cd 	.word	0x000089cd
    a75c:	0fffc000 	.word	0x0fffc000
    a760:	0000930d 	.word	0x0000930d
    a764:	000092b5 	.word	0x000092b5
    a768:	0000925d 	.word	0x0000925d
    a76c:	00009225 	.word	0x00009225
    a770:	0000a2c9 	.word	0x0000a2c9

0000a774 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a774:	b580      	push	{r7, lr}
    a776:	b084      	sub	sp, #16
    a778:	af00      	add	r7, sp, #0
    a77a:	6078      	str	r0, [r7, #4]
    a77c:	460b      	mov	r3, r1
    a77e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a780:	687b      	ldr	r3, [r7, #4]
    a782:	7c9b      	ldrb	r3, [r3, #18]
    a784:	f003 030f 	and.w	r3, r3, #15
    a788:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a78a:	78fa      	ldrb	r2, [r7, #3]
    a78c:	7bfb      	ldrb	r3, [r7, #15]
    a78e:	4611      	mov	r1, r2
    a790:	4618      	mov	r0, r3
    a792:	4b03      	ldr	r3, [pc, #12]	; (a7a0 <_usb_d_dev_ep_stall_get+0x2c>)
    a794:	4798      	blx	r3
    a796:	4603      	mov	r3, r0
}
    a798:	4618      	mov	r0, r3
    a79a:	3710      	adds	r7, #16
    a79c:	46bd      	mov	sp, r7
    a79e:	bd80      	pop	{r7, pc}
    a7a0:	00008e65 	.word	0x00008e65

0000a7a4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a7a4:	b580      	push	{r7, lr}
    a7a6:	b084      	sub	sp, #16
    a7a8:	af00      	add	r7, sp, #0
    a7aa:	6078      	str	r0, [r7, #4]
    a7ac:	460b      	mov	r3, r1
    a7ae:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7b0:	687b      	ldr	r3, [r7, #4]
    a7b2:	7c9b      	ldrb	r3, [r3, #18]
    a7b4:	f003 030f 	and.w	r3, r3, #15
    a7b8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a7ba:	78f9      	ldrb	r1, [r7, #3]
    a7bc:	7bfb      	ldrb	r3, [r7, #15]
    a7be:	2201      	movs	r2, #1
    a7c0:	4618      	mov	r0, r3
    a7c2:	4b0a      	ldr	r3, [pc, #40]	; (a7ec <_usb_d_dev_ep_stall_set+0x48>)
    a7c4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a7c6:	78fb      	ldrb	r3, [r7, #3]
    a7c8:	2220      	movs	r2, #32
    a7ca:	409a      	lsls	r2, r3
    a7cc:	7bfb      	ldrb	r3, [r7, #15]
    a7ce:	4611      	mov	r1, r2
    a7d0:	4618      	mov	r0, r3
    a7d2:	4b07      	ldr	r3, [pc, #28]	; (a7f0 <_usb_d_dev_ep_stall_set+0x4c>)
    a7d4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a7d6:	687a      	ldr	r2, [r7, #4]
    a7d8:	7cd3      	ldrb	r3, [r2, #19]
    a7da:	f043 0308 	orr.w	r3, r3, #8
    a7de:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a7e0:	2300      	movs	r3, #0
}
    a7e2:	4618      	mov	r0, r3
    a7e4:	3710      	adds	r7, #16
    a7e6:	46bd      	mov	sp, r7
    a7e8:	bd80      	pop	{r7, pc}
    a7ea:	bf00      	nop
    a7ec:	00008e0d 	.word	0x00008e0d
    a7f0:	00008d8d 	.word	0x00008d8d

0000a7f4 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a7f4:	b580      	push	{r7, lr}
    a7f6:	b084      	sub	sp, #16
    a7f8:	af00      	add	r7, sp, #0
    a7fa:	6078      	str	r0, [r7, #4]
    a7fc:	460b      	mov	r3, r1
    a7fe:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a800:	687b      	ldr	r3, [r7, #4]
    a802:	7c9b      	ldrb	r3, [r3, #18]
    a804:	f003 030f 	and.w	r3, r3, #15
    a808:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a80a:	78fa      	ldrb	r2, [r7, #3]
    a80c:	7bfb      	ldrb	r3, [r7, #15]
    a80e:	4611      	mov	r1, r2
    a810:	4618      	mov	r0, r3
    a812:	4b28      	ldr	r3, [pc, #160]	; (a8b4 <_usb_d_dev_ep_stall_clr+0xc0>)
    a814:	4798      	blx	r3
    a816:	4603      	mov	r3, r0
    a818:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a81a:	7bbb      	ldrb	r3, [r7, #14]
    a81c:	f083 0301 	eor.w	r3, r3, #1
    a820:	b2db      	uxtb	r3, r3
    a822:	2b00      	cmp	r3, #0
    a824:	d001      	beq.n	a82a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a826:	2300      	movs	r3, #0
    a828:	e040      	b.n	a8ac <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a82a:	78f9      	ldrb	r1, [r7, #3]
    a82c:	7bfb      	ldrb	r3, [r7, #15]
    a82e:	2200      	movs	r2, #0
    a830:	4618      	mov	r0, r3
    a832:	4b21      	ldr	r3, [pc, #132]	; (a8b8 <_usb_d_dev_ep_stall_clr+0xc4>)
    a834:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a836:	78fb      	ldrb	r3, [r7, #3]
    a838:	2220      	movs	r2, #32
    a83a:	409a      	lsls	r2, r3
    a83c:	7bfb      	ldrb	r3, [r7, #15]
    a83e:	4611      	mov	r1, r2
    a840:	4618      	mov	r0, r3
    a842:	4b1e      	ldr	r3, [pc, #120]	; (a8bc <_usb_d_dev_ep_stall_clr+0xc8>)
    a844:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a846:	78fa      	ldrb	r2, [r7, #3]
    a848:	7bfb      	ldrb	r3, [r7, #15]
    a84a:	4611      	mov	r1, r2
    a84c:	4618      	mov	r0, r3
    a84e:	4b1c      	ldr	r3, [pc, #112]	; (a8c0 <_usb_d_dev_ep_stall_clr+0xcc>)
    a850:	4798      	blx	r3
    a852:	4603      	mov	r3, r0
    a854:	2b00      	cmp	r3, #0
    a856:	d00b      	beq.n	a870 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a858:	78fa      	ldrb	r2, [r7, #3]
    a85a:	7bfb      	ldrb	r3, [r7, #15]
    a85c:	4611      	mov	r1, r2
    a85e:	4618      	mov	r0, r3
    a860:	4b18      	ldr	r3, [pc, #96]	; (a8c4 <_usb_d_dev_ep_stall_clr+0xd0>)
    a862:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a864:	78f9      	ldrb	r1, [r7, #3]
    a866:	7bfb      	ldrb	r3, [r7, #15]
    a868:	2200      	movs	r2, #0
    a86a:	4618      	mov	r0, r3
    a86c:	4b16      	ldr	r3, [pc, #88]	; (a8c8 <_usb_d_dev_ep_stall_clr+0xd4>)
    a86e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a870:	687b      	ldr	r3, [r7, #4]
    a872:	7cdb      	ldrb	r3, [r3, #19]
    a874:	f003 0307 	and.w	r3, r3, #7
    a878:	b2db      	uxtb	r3, r3
    a87a:	2b01      	cmp	r3, #1
    a87c:	d110      	bne.n	a8a0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a87e:	7bfb      	ldrb	r3, [r7, #15]
    a880:	4619      	mov	r1, r3
    a882:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a886:	4b11      	ldr	r3, [pc, #68]	; (a8cc <_usb_d_dev_ep_stall_clr+0xd8>)
    a888:	4798      	blx	r3
    a88a:	4603      	mov	r3, r0
    a88c:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a890:	2b00      	cmp	r3, #0
    a892:	d10a      	bne.n	a8aa <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a894:	687a      	ldr	r2, [r7, #4]
    a896:	7cd3      	ldrb	r3, [r2, #19]
    a898:	f36f 03c3 	bfc	r3, #3, #1
    a89c:	74d3      	strb	r3, [r2, #19]
    a89e:	e004      	b.n	a8aa <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a8a0:	687a      	ldr	r2, [r7, #4]
    a8a2:	7cd3      	ldrb	r3, [r2, #19]
    a8a4:	f36f 03c3 	bfc	r3, #3, #1
    a8a8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a8aa:	2300      	movs	r3, #0
}
    a8ac:	4618      	mov	r0, r3
    a8ae:	3710      	adds	r7, #16
    a8b0:	46bd      	mov	sp, r7
    a8b2:	bd80      	pop	{r7, pc}
    a8b4:	00008e65 	.word	0x00008e65
    a8b8:	00008e0d 	.word	0x00008e0d
    a8bc:	00008db5 	.word	0x00008db5
    a8c0:	00008ea9 	.word	0x00008ea9
    a8c4:	00008eed 	.word	0x00008eed
    a8c8:	00008fd9 	.word	0x00008fd9
    a8cc:	00008895 	.word	0x00008895

0000a8d0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a8d0:	b580      	push	{r7, lr}
    a8d2:	b086      	sub	sp, #24
    a8d4:	af00      	add	r7, sp, #0
    a8d6:	4603      	mov	r3, r0
    a8d8:	460a      	mov	r2, r1
    a8da:	71fb      	strb	r3, [r7, #7]
    a8dc:	4613      	mov	r3, r2
    a8de:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a8e0:	79fb      	ldrb	r3, [r7, #7]
    a8e2:	f003 030f 	and.w	r3, r3, #15
    a8e6:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a8e8:	79fb      	ldrb	r3, [r7, #7]
    a8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a8ee:	2b00      	cmp	r3, #0
    a8f0:	bf14      	ite	ne
    a8f2:	2301      	movne	r3, #1
    a8f4:	2300      	moveq	r3, #0
    a8f6:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a8f8:	7cba      	ldrb	r2, [r7, #18]
    a8fa:	7cfb      	ldrb	r3, [r7, #19]
    a8fc:	4611      	mov	r1, r2
    a8fe:	4618      	mov	r0, r3
    a900:	4b13      	ldr	r3, [pc, #76]	; (a950 <_usb_d_dev_ep_stall+0x80>)
    a902:	4798      	blx	r3
    a904:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a906:	7cfb      	ldrb	r3, [r7, #19]
    a908:	2b04      	cmp	r3, #4
    a90a:	d902      	bls.n	a912 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a90c:	f06f 0311 	mvn.w	r3, #17
    a910:	e01a      	b.n	a948 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a912:	79bb      	ldrb	r3, [r7, #6]
    a914:	2b01      	cmp	r3, #1
    a916:	d106      	bne.n	a926 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a918:	7cbb      	ldrb	r3, [r7, #18]
    a91a:	4619      	mov	r1, r3
    a91c:	68f8      	ldr	r0, [r7, #12]
    a91e:	4b0d      	ldr	r3, [pc, #52]	; (a954 <_usb_d_dev_ep_stall+0x84>)
    a920:	4798      	blx	r3
    a922:	6178      	str	r0, [r7, #20]
    a924:	e00f      	b.n	a946 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a926:	79bb      	ldrb	r3, [r7, #6]
    a928:	2b00      	cmp	r3, #0
    a92a:	d106      	bne.n	a93a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a92c:	7cbb      	ldrb	r3, [r7, #18]
    a92e:	4619      	mov	r1, r3
    a930:	68f8      	ldr	r0, [r7, #12]
    a932:	4b09      	ldr	r3, [pc, #36]	; (a958 <_usb_d_dev_ep_stall+0x88>)
    a934:	4798      	blx	r3
    a936:	6178      	str	r0, [r7, #20]
    a938:	e005      	b.n	a946 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a93a:	7cbb      	ldrb	r3, [r7, #18]
    a93c:	4619      	mov	r1, r3
    a93e:	68f8      	ldr	r0, [r7, #12]
    a940:	4b06      	ldr	r3, [pc, #24]	; (a95c <_usb_d_dev_ep_stall+0x8c>)
    a942:	4798      	blx	r3
    a944:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a946:	697b      	ldr	r3, [r7, #20]
}
    a948:	4618      	mov	r0, r3
    a94a:	3718      	adds	r7, #24
    a94c:	46bd      	mov	sp, r7
    a94e:	bd80      	pop	{r7, pc}
    a950:	00009371 	.word	0x00009371
    a954:	0000a7a5 	.word	0x0000a7a5
    a958:	0000a7f5 	.word	0x0000a7f5
    a95c:	0000a775 	.word	0x0000a775

0000a960 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a960:	b580      	push	{r7, lr}
    a962:	b082      	sub	sp, #8
    a964:	af00      	add	r7, sp, #0
    a966:	6078      	str	r0, [r7, #4]
    a968:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a96a:	687b      	ldr	r3, [r7, #4]
    a96c:	7c9b      	ldrb	r3, [r3, #18]
    a96e:	2bff      	cmp	r3, #255	; 0xff
    a970:	d014      	beq.n	a99c <_usb_d_dev_trans_done+0x3c>
    a972:	687b      	ldr	r3, [r7, #4]
    a974:	7cdb      	ldrb	r3, [r3, #19]
    a976:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a97a:	b2db      	uxtb	r3, r3
    a97c:	2b00      	cmp	r3, #0
    a97e:	d00d      	beq.n	a99c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a980:	687a      	ldr	r2, [r7, #4]
    a982:	7cd3      	ldrb	r3, [r2, #19]
    a984:	f36f 1386 	bfc	r3, #6, #1
    a988:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a98a:	4b06      	ldr	r3, [pc, #24]	; (a9a4 <_usb_d_dev_trans_done+0x44>)
    a98c:	691b      	ldr	r3, [r3, #16]
    a98e:	687a      	ldr	r2, [r7, #4]
    a990:	7c90      	ldrb	r0, [r2, #18]
    a992:	687a      	ldr	r2, [r7, #4]
    a994:	6892      	ldr	r2, [r2, #8]
    a996:	6839      	ldr	r1, [r7, #0]
    a998:	4798      	blx	r3
    a99a:	e000      	b.n	a99e <_usb_d_dev_trans_done+0x3e>
		return;
    a99c:	bf00      	nop
}
    a99e:	3708      	adds	r7, #8
    a9a0:	46bd      	mov	sp, r7
    a9a2:	bd80      	pop	{r7, pc}
    a9a4:	20000a90 	.word	0x20000a90

0000a9a8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a9a8:	b580      	push	{r7, lr}
    a9aa:	b086      	sub	sp, #24
    a9ac:	af00      	add	r7, sp, #0
    a9ae:	60f8      	str	r0, [r7, #12]
    a9b0:	460b      	mov	r3, r1
    a9b2:	607a      	str	r2, [r7, #4]
    a9b4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a9b6:	68fb      	ldr	r3, [r7, #12]
    a9b8:	7c9b      	ldrb	r3, [r3, #18]
    a9ba:	f003 030f 	and.w	r3, r3, #15
    a9be:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a9c0:	4b1f      	ldr	r3, [pc, #124]	; (aa40 <_usb_d_dev_trans_stop+0x98>)
    a9c2:	881b      	ldrh	r3, [r3, #0]
    a9c4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a9c6:	68fb      	ldr	r3, [r7, #12]
    a9c8:	7c9b      	ldrb	r3, [r3, #18]
    a9ca:	2bff      	cmp	r3, #255	; 0xff
    a9cc:	d033      	beq.n	aa36 <_usb_d_dev_trans_stop+0x8e>
    a9ce:	68fb      	ldr	r3, [r7, #12]
    a9d0:	7cdb      	ldrb	r3, [r3, #19]
    a9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a9d6:	b2db      	uxtb	r3, r3
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d02c      	beq.n	aa36 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a9dc:	7afb      	ldrb	r3, [r7, #11]
    a9de:	2b00      	cmp	r3, #0
    a9e0:	d006      	beq.n	a9f0 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a9e2:	7dfb      	ldrb	r3, [r7, #23]
    a9e4:	2200      	movs	r2, #0
    a9e6:	2101      	movs	r1, #1
    a9e8:	4618      	mov	r0, r3
    a9ea:	4b16      	ldr	r3, [pc, #88]	; (aa44 <_usb_d_dev_trans_stop+0x9c>)
    a9ec:	4798      	blx	r3
    a9ee:	e005      	b.n	a9fc <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a9f0:	7dfb      	ldrb	r3, [r7, #23]
    a9f2:	2200      	movs	r2, #0
    a9f4:	2100      	movs	r1, #0
    a9f6:	4618      	mov	r0, r3
    a9f8:	4b13      	ldr	r3, [pc, #76]	; (aa48 <_usb_d_dev_trans_stop+0xa0>)
    a9fa:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a9fc:	7afb      	ldrb	r3, [r7, #11]
    a9fe:	f107 0218 	add.w	r2, r7, #24
    aa02:	4413      	add	r3, r2
    aa04:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    aa08:	461a      	mov	r2, r3
    aa0a:	7dfb      	ldrb	r3, [r7, #23]
    aa0c:	4611      	mov	r1, r2
    aa0e:	4618      	mov	r0, r3
    aa10:	4b0e      	ldr	r3, [pc, #56]	; (aa4c <_usb_d_dev_trans_stop+0xa4>)
    aa12:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    aa14:	7afb      	ldrb	r3, [r7, #11]
    aa16:	f107 0218 	add.w	r2, r7, #24
    aa1a:	4413      	add	r3, r2
    aa1c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    aa20:	461a      	mov	r2, r3
    aa22:	7dfb      	ldrb	r3, [r7, #23]
    aa24:	4611      	mov	r1, r2
    aa26:	4618      	mov	r0, r3
    aa28:	4b09      	ldr	r3, [pc, #36]	; (aa50 <_usb_d_dev_trans_stop+0xa8>)
    aa2a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    aa2c:	6879      	ldr	r1, [r7, #4]
    aa2e:	68f8      	ldr	r0, [r7, #12]
    aa30:	4b08      	ldr	r3, [pc, #32]	; (aa54 <_usb_d_dev_trans_stop+0xac>)
    aa32:	4798      	blx	r3
    aa34:	e000      	b.n	aa38 <_usb_d_dev_trans_stop+0x90>
		return;
    aa36:	bf00      	nop
}
    aa38:	3718      	adds	r7, #24
    aa3a:	46bd      	mov	sp, r7
    aa3c:	bd80      	pop	{r7, pc}
    aa3e:	bf00      	nop
    aa40:	0000f098 	.word	0x0000f098
    aa44:	0000925d 	.word	0x0000925d
    aa48:	000092b5 	.word	0x000092b5
    aa4c:	00008d65 	.word	0x00008d65
    aa50:	00008db5 	.word	0x00008db5
    aa54:	0000a961 	.word	0x0000a961

0000aa58 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    aa58:	b580      	push	{r7, lr}
    aa5a:	b086      	sub	sp, #24
    aa5c:	af00      	add	r7, sp, #0
    aa5e:	4603      	mov	r3, r0
    aa60:	6039      	str	r1, [r7, #0]
    aa62:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    aa64:	79fb      	ldrb	r3, [r7, #7]
    aa66:	f003 030f 	and.w	r3, r3, #15
    aa6a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    aa6c:	7dfb      	ldrb	r3, [r7, #23]
    aa6e:	015b      	lsls	r3, r3, #5
    aa70:	4a1e      	ldr	r2, [pc, #120]	; (aaec <_usb_d_dev_ep_read_req+0x94>)
    aa72:	4413      	add	r3, r2
    aa74:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    aa76:	693b      	ldr	r3, [r7, #16]
    aa78:	681b      	ldr	r3, [r3, #0]
    aa7a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    aa7c:	693b      	ldr	r3, [r7, #16]
    aa7e:	685b      	ldr	r3, [r3, #4]
    aa80:	f3c3 030d 	ubfx	r3, r3, #0, #14
    aa84:	b29b      	uxth	r3, r3
    aa86:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    aa88:	7dfb      	ldrb	r3, [r7, #23]
    aa8a:	2b04      	cmp	r3, #4
    aa8c:	d802      	bhi.n	aa94 <_usb_d_dev_ep_read_req+0x3c>
    aa8e:	683b      	ldr	r3, [r7, #0]
    aa90:	2b00      	cmp	r3, #0
    aa92:	d102      	bne.n	aa9a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    aa94:	f06f 0311 	mvn.w	r3, #17
    aa98:	e023      	b.n	aae2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    aa9a:	7dfb      	ldrb	r3, [r7, #23]
    aa9c:	4618      	mov	r0, r3
    aa9e:	4b14      	ldr	r3, [pc, #80]	; (aaf0 <_usb_d_dev_ep_read_req+0x98>)
    aaa0:	4798      	blx	r3
    aaa2:	4603      	mov	r3, r0
    aaa4:	f083 0301 	eor.w	r3, r3, #1
    aaa8:	b2db      	uxtb	r3, r3
    aaaa:	2b00      	cmp	r3, #0
    aaac:	d002      	beq.n	aab4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    aaae:	f06f 0312 	mvn.w	r3, #18
    aab2:	e016      	b.n	aae2 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    aab4:	7dfb      	ldrb	r3, [r7, #23]
    aab6:	4618      	mov	r0, r3
    aab8:	4b0e      	ldr	r3, [pc, #56]	; (aaf4 <_usb_d_dev_ep_read_req+0x9c>)
    aaba:	4798      	blx	r3
    aabc:	4603      	mov	r3, r0
    aabe:	f083 0301 	eor.w	r3, r3, #1
    aac2:	b2db      	uxtb	r3, r3
    aac4:	2b00      	cmp	r3, #0
    aac6:	d001      	beq.n	aacc <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    aac8:	2300      	movs	r3, #0
    aaca:	e00a      	b.n	aae2 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    aacc:	68fb      	ldr	r3, [r7, #12]
    aace:	2208      	movs	r2, #8
    aad0:	4619      	mov	r1, r3
    aad2:	6838      	ldr	r0, [r7, #0]
    aad4:	4b08      	ldr	r3, [pc, #32]	; (aaf8 <_usb_d_dev_ep_read_req+0xa0>)
    aad6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    aad8:	7dfb      	ldrb	r3, [r7, #23]
    aada:	4618      	mov	r0, r3
    aadc:	4b07      	ldr	r3, [pc, #28]	; (aafc <_usb_d_dev_ep_read_req+0xa4>)
    aade:	4798      	blx	r3

	return bytes;
    aae0:	897b      	ldrh	r3, [r7, #10]
}
    aae2:	4618      	mov	r0, r3
    aae4:	3718      	adds	r7, #24
    aae6:	46bd      	mov	sp, r7
    aae8:	bd80      	pop	{r7, pc}
    aaea:	bf00      	nop
    aaec:	20000b58 	.word	0x20000b58
    aaf0:	00008ddd 	.word	0x00008ddd
    aaf4:	00008f89 	.word	0x00008f89
    aaf8:	0000e895 	.word	0x0000e895
    aafc:	00008fb9 	.word	0x00008fb9

0000ab00 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    ab00:	b580      	push	{r7, lr}
    ab02:	b086      	sub	sp, #24
    ab04:	af00      	add	r7, sp, #0
    ab06:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ab08:	687b      	ldr	r3, [r7, #4]
    ab0a:	7a1b      	ldrb	r3, [r3, #8]
    ab0c:	f003 030f 	and.w	r3, r3, #15
    ab10:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    ab12:	687b      	ldr	r3, [r7, #4]
    ab14:	7a1b      	ldrb	r3, [r3, #8]
    ab16:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab1a:	2b00      	cmp	r3, #0
    ab1c:	bf14      	ite	ne
    ab1e:	2301      	movne	r3, #1
    ab20:	2300      	moveq	r3, #0
    ab22:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ab24:	7d7a      	ldrb	r2, [r7, #21]
    ab26:	7dbb      	ldrb	r3, [r7, #22]
    ab28:	4611      	mov	r1, r2
    ab2a:	4618      	mov	r0, r3
    ab2c:	4b5f      	ldr	r3, [pc, #380]	; (acac <_usb_d_dev_ep_trans+0x1ac>)
    ab2e:	4798      	blx	r3
    ab30:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ab32:	693b      	ldr	r3, [r7, #16]
    ab34:	8a1b      	ldrh	r3, [r3, #16]
    ab36:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ab3a:	4293      	cmp	r3, r2
    ab3c:	d004      	beq.n	ab48 <_usb_d_dev_ep_trans+0x48>
    ab3e:	693b      	ldr	r3, [r7, #16]
    ab40:	8a1b      	ldrh	r3, [r3, #16]
    ab42:	3b01      	subs	r3, #1
    ab44:	b29b      	uxth	r3, r3
    ab46:	e001      	b.n	ab4c <_usb_d_dev_ep_trans+0x4c>
    ab48:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ab4c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    ab4e:	687b      	ldr	r3, [r7, #4]
    ab50:	685a      	ldr	r2, [r3, #4]
    ab52:	89fb      	ldrh	r3, [r7, #14]
    ab54:	4013      	ands	r3, r2
    ab56:	2b00      	cmp	r3, #0
    ab58:	bf14      	ite	ne
    ab5a:	2301      	movne	r3, #1
    ab5c:	2300      	moveq	r3, #0
    ab5e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    ab60:	2300      	movs	r3, #0
    ab62:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ab64:	7dbb      	ldrb	r3, [r7, #22]
    ab66:	2b04      	cmp	r3, #4
    ab68:	d902      	bls.n	ab70 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    ab6a:	f06f 0311 	mvn.w	r3, #17
    ab6e:	e098      	b.n	aca2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    ab70:	687b      	ldr	r3, [r7, #4]
    ab72:	681b      	ldr	r3, [r3, #0]
    ab74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ab78:	d31a      	bcc.n	abb0 <_usb_d_dev_ep_trans+0xb0>
    ab7a:	687b      	ldr	r3, [r7, #4]
    ab7c:	681b      	ldr	r3, [r3, #0]
    ab7e:	461a      	mov	r2, r3
    ab80:	687b      	ldr	r3, [r7, #4]
    ab82:	685b      	ldr	r3, [r3, #4]
    ab84:	4413      	add	r3, r2
    ab86:	4a4a      	ldr	r2, [pc, #296]	; (acb0 <_usb_d_dev_ep_trans+0x1b0>)
    ab88:	4293      	cmp	r3, r2
    ab8a:	d811      	bhi.n	abb0 <_usb_d_dev_ep_trans+0xb0>
    ab8c:	687b      	ldr	r3, [r7, #4]
    ab8e:	681b      	ldr	r3, [r3, #0]
    ab90:	f003 0303 	and.w	r3, r3, #3
    ab94:	2b00      	cmp	r3, #0
    ab96:	d10b      	bne.n	abb0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    ab98:	7d7b      	ldrb	r3, [r7, #21]
    ab9a:	f083 0301 	eor.w	r3, r3, #1
    ab9e:	b2db      	uxtb	r3, r3
    aba0:	2b00      	cmp	r3, #0
    aba2:	d00e      	beq.n	abc2 <_usb_d_dev_ep_trans+0xc2>
    aba4:	687b      	ldr	r3, [r7, #4]
    aba6:	685b      	ldr	r3, [r3, #4]
    aba8:	693a      	ldr	r2, [r7, #16]
    abaa:	8a12      	ldrh	r2, [r2, #16]
    abac:	4293      	cmp	r3, r2
    abae:	d208      	bcs.n	abc2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    abb0:	693b      	ldr	r3, [r7, #16]
    abb2:	68db      	ldr	r3, [r3, #12]
    abb4:	2b00      	cmp	r3, #0
    abb6:	d102      	bne.n	abbe <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    abb8:	f06f 0312 	mvn.w	r3, #18
    abbc:	e071      	b.n	aca2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    abbe:	2301      	movs	r3, #1
    abc0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    abc2:	7d7b      	ldrb	r3, [r7, #21]
    abc4:	f083 0301 	eor.w	r3, r3, #1
    abc8:	b2db      	uxtb	r3, r3
    abca:	2b00      	cmp	r3, #0
    abcc:	d009      	beq.n	abe2 <_usb_d_dev_ep_trans+0xe2>
    abce:	7b7b      	ldrb	r3, [r7, #13]
    abd0:	2b00      	cmp	r3, #0
    abd2:	d006      	beq.n	abe2 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    abd4:	693b      	ldr	r3, [r7, #16]
    abd6:	68db      	ldr	r3, [r3, #12]
    abd8:	2b00      	cmp	r3, #0
    abda:	d102      	bne.n	abe2 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    abdc:	f06f 0311 	mvn.w	r3, #17
    abe0:	e05f      	b.n	aca2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    abe2:	693b      	ldr	r3, [r7, #16]
    abe4:	7cdb      	ldrb	r3, [r3, #19]
    abe6:	f003 0308 	and.w	r3, r3, #8
    abea:	b2db      	uxtb	r3, r3
    abec:	2b00      	cmp	r3, #0
    abee:	d001      	beq.n	abf4 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    abf0:	2302      	movs	r3, #2
    abf2:	e056      	b.n	aca2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    abf4:	f107 0308 	add.w	r3, r7, #8
    abf8:	4618      	mov	r0, r3
    abfa:	4b2e      	ldr	r3, [pc, #184]	; (acb4 <_usb_d_dev_ep_trans+0x1b4>)
    abfc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    abfe:	693b      	ldr	r3, [r7, #16]
    ac00:	7cdb      	ldrb	r3, [r3, #19]
    ac02:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ac06:	b2db      	uxtb	r3, r3
    ac08:	2b00      	cmp	r3, #0
    ac0a:	d006      	beq.n	ac1a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    ac0c:	f107 0308 	add.w	r3, r7, #8
    ac10:	4618      	mov	r0, r3
    ac12:	4b29      	ldr	r3, [pc, #164]	; (acb8 <_usb_d_dev_ep_trans+0x1b8>)
    ac14:	4798      	blx	r3
		return USB_BUSY;
    ac16:	2301      	movs	r3, #1
    ac18:	e043      	b.n	aca2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    ac1a:	693a      	ldr	r2, [r7, #16]
    ac1c:	7cd3      	ldrb	r3, [r2, #19]
    ac1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ac22:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    ac24:	f107 0308 	add.w	r3, r7, #8
    ac28:	4618      	mov	r0, r3
    ac2a:	4b23      	ldr	r3, [pc, #140]	; (acb8 <_usb_d_dev_ep_trans+0x1b8>)
    ac2c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    ac2e:	687b      	ldr	r3, [r7, #4]
    ac30:	681a      	ldr	r2, [r3, #0]
    ac32:	693b      	ldr	r3, [r7, #16]
    ac34:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    ac36:	687b      	ldr	r3, [r7, #4]
    ac38:	685a      	ldr	r2, [r3, #4]
    ac3a:	693b      	ldr	r3, [r7, #16]
    ac3c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    ac3e:	693b      	ldr	r3, [r7, #16]
    ac40:	2200      	movs	r2, #0
    ac42:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    ac44:	693a      	ldr	r2, [r7, #16]
    ac46:	7cd3      	ldrb	r3, [r2, #19]
    ac48:	7d79      	ldrb	r1, [r7, #21]
    ac4a:	f361 13c7 	bfi	r3, r1, #7, #1
    ac4e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    ac50:	693a      	ldr	r2, [r7, #16]
    ac52:	7cd3      	ldrb	r3, [r2, #19]
    ac54:	7df9      	ldrb	r1, [r7, #23]
    ac56:	f361 1345 	bfi	r3, r1, #5, #1
    ac5a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    ac5c:	687b      	ldr	r3, [r7, #4]
    ac5e:	7a5b      	ldrb	r3, [r3, #9]
    ac60:	2b00      	cmp	r3, #0
    ac62:	d007      	beq.n	ac74 <_usb_d_dev_ep_trans+0x174>
    ac64:	7b7b      	ldrb	r3, [r7, #13]
    ac66:	f083 0301 	eor.w	r3, r3, #1
    ac6a:	b2db      	uxtb	r3, r3
    ac6c:	2b00      	cmp	r3, #0
    ac6e:	d001      	beq.n	ac74 <_usb_d_dev_ep_trans+0x174>
    ac70:	2301      	movs	r3, #1
    ac72:	e000      	b.n	ac76 <_usb_d_dev_ep_trans+0x176>
    ac74:	2300      	movs	r3, #0
    ac76:	b2db      	uxtb	r3, r3
    ac78:	f003 0301 	and.w	r3, r3, #1
    ac7c:	b2d9      	uxtb	r1, r3
    ac7e:	693a      	ldr	r2, [r7, #16]
    ac80:	7cd3      	ldrb	r3, [r2, #19]
    ac82:	f361 1304 	bfi	r3, r1, #4, #1
    ac86:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    ac88:	7d7b      	ldrb	r3, [r7, #21]
    ac8a:	2b00      	cmp	r3, #0
    ac8c:	d004      	beq.n	ac98 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    ac8e:	2100      	movs	r1, #0
    ac90:	6938      	ldr	r0, [r7, #16]
    ac92:	4b0a      	ldr	r3, [pc, #40]	; (acbc <_usb_d_dev_ep_trans+0x1bc>)
    ac94:	4798      	blx	r3
    ac96:	e003      	b.n	aca0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    ac98:	2100      	movs	r1, #0
    ac9a:	6938      	ldr	r0, [r7, #16]
    ac9c:	4b08      	ldr	r3, [pc, #32]	; (acc0 <_usb_d_dev_ep_trans+0x1c0>)
    ac9e:	4798      	blx	r3
	}

	return ERR_NONE;
    aca0:	2300      	movs	r3, #0
}
    aca2:	4618      	mov	r0, r3
    aca4:	3718      	adds	r7, #24
    aca6:	46bd      	mov	sp, r7
    aca8:	bd80      	pop	{r7, pc}
    acaa:	bf00      	nop
    acac:	00009371 	.word	0x00009371
    acb0:	20041fff 	.word	0x20041fff
    acb4:	0000b4cd 	.word	0x0000b4cd
    acb8:	0000b4f3 	.word	0x0000b4f3
    acbc:	00009639 	.word	0x00009639
    acc0:	00009851 	.word	0x00009851

0000acc4 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    acc4:	b580      	push	{r7, lr}
    acc6:	b084      	sub	sp, #16
    acc8:	af00      	add	r7, sp, #0
    acca:	4603      	mov	r3, r0
    accc:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    acce:	79fb      	ldrb	r3, [r7, #7]
    acd0:	f003 030f 	and.w	r3, r3, #15
    acd4:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    acd6:	79fb      	ldrb	r3, [r7, #7]
    acd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    acdc:	2b00      	cmp	r3, #0
    acde:	bf14      	ite	ne
    ace0:	2301      	movne	r3, #1
    ace2:	2300      	moveq	r3, #0
    ace4:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ace6:	7bba      	ldrb	r2, [r7, #14]
    ace8:	7bfb      	ldrb	r3, [r7, #15]
    acea:	4611      	mov	r1, r2
    acec:	4618      	mov	r0, r3
    acee:	4b08      	ldr	r3, [pc, #32]	; (ad10 <_usb_d_dev_ep_abort+0x4c>)
    acf0:	4798      	blx	r3
    acf2:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    acf4:	7bfb      	ldrb	r3, [r7, #15]
    acf6:	2b04      	cmp	r3, #4
    acf8:	d806      	bhi.n	ad08 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    acfa:	7bbb      	ldrb	r3, [r7, #14]
    acfc:	2202      	movs	r2, #2
    acfe:	4619      	mov	r1, r3
    ad00:	68b8      	ldr	r0, [r7, #8]
    ad02:	4b04      	ldr	r3, [pc, #16]	; (ad14 <_usb_d_dev_ep_abort+0x50>)
    ad04:	4798      	blx	r3
    ad06:	e000      	b.n	ad0a <_usb_d_dev_ep_abort+0x46>
		return;
    ad08:	bf00      	nop
}
    ad0a:	3710      	adds	r7, #16
    ad0c:	46bd      	mov	sp, r7
    ad0e:	bd80      	pop	{r7, pc}
    ad10:	00009371 	.word	0x00009371
    ad14:	0000a9a9 	.word	0x0000a9a9

0000ad18 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    ad18:	b480      	push	{r7}
    ad1a:	b085      	sub	sp, #20
    ad1c:	af00      	add	r7, sp, #0
    ad1e:	4603      	mov	r3, r0
    ad20:	6039      	str	r1, [r7, #0]
    ad22:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ad24:	683b      	ldr	r3, [r7, #0]
    ad26:	2b00      	cmp	r3, #0
    ad28:	d001      	beq.n	ad2e <_usb_d_dev_register_callback+0x16>
    ad2a:	683b      	ldr	r3, [r7, #0]
    ad2c:	e000      	b.n	ad30 <_usb_d_dev_register_callback+0x18>
    ad2e:	4b0a      	ldr	r3, [pc, #40]	; (ad58 <_usb_d_dev_register_callback+0x40>)
    ad30:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    ad32:	79fb      	ldrb	r3, [r7, #7]
    ad34:	2b01      	cmp	r3, #1
    ad36:	d103      	bne.n	ad40 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    ad38:	4a08      	ldr	r2, [pc, #32]	; (ad5c <_usb_d_dev_register_callback+0x44>)
    ad3a:	68fb      	ldr	r3, [r7, #12]
    ad3c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    ad3e:	e005      	b.n	ad4c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    ad40:	79fb      	ldrb	r3, [r7, #7]
    ad42:	2b00      	cmp	r3, #0
    ad44:	d102      	bne.n	ad4c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    ad46:	4a05      	ldr	r2, [pc, #20]	; (ad5c <_usb_d_dev_register_callback+0x44>)
    ad48:	68fb      	ldr	r3, [r7, #12]
    ad4a:	6013      	str	r3, [r2, #0]
}
    ad4c:	bf00      	nop
    ad4e:	3714      	adds	r7, #20
    ad50:	46bd      	mov	sp, r7
    ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad56:	4770      	bx	lr
    ad58:	00008bf9 	.word	0x00008bf9
    ad5c:	20000a90 	.word	0x20000a90

0000ad60 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    ad60:	b480      	push	{r7}
    ad62:	b085      	sub	sp, #20
    ad64:	af00      	add	r7, sp, #0
    ad66:	4603      	mov	r3, r0
    ad68:	6039      	str	r1, [r7, #0]
    ad6a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ad6c:	683b      	ldr	r3, [r7, #0]
    ad6e:	2b00      	cmp	r3, #0
    ad70:	d001      	beq.n	ad76 <_usb_d_dev_register_ep_callback+0x16>
    ad72:	683b      	ldr	r3, [r7, #0]
    ad74:	e000      	b.n	ad78 <_usb_d_dev_register_ep_callback+0x18>
    ad76:	4b0e      	ldr	r3, [pc, #56]	; (adb0 <_usb_d_dev_register_ep_callback+0x50>)
    ad78:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    ad7a:	79fb      	ldrb	r3, [r7, #7]
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	d103      	bne.n	ad88 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    ad80:	4a0c      	ldr	r2, [pc, #48]	; (adb4 <_usb_d_dev_register_ep_callback+0x54>)
    ad82:	68fb      	ldr	r3, [r7, #12]
    ad84:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    ad86:	e00c      	b.n	ada2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    ad88:	79fb      	ldrb	r3, [r7, #7]
    ad8a:	2b01      	cmp	r3, #1
    ad8c:	d103      	bne.n	ad96 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    ad8e:	4a09      	ldr	r2, [pc, #36]	; (adb4 <_usb_d_dev_register_ep_callback+0x54>)
    ad90:	68fb      	ldr	r3, [r7, #12]
    ad92:	60d3      	str	r3, [r2, #12]
}
    ad94:	e005      	b.n	ada2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    ad96:	79fb      	ldrb	r3, [r7, #7]
    ad98:	2b02      	cmp	r3, #2
    ad9a:	d102      	bne.n	ada2 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    ad9c:	4a05      	ldr	r2, [pc, #20]	; (adb4 <_usb_d_dev_register_ep_callback+0x54>)
    ad9e:	68fb      	ldr	r3, [r7, #12]
    ada0:	6113      	str	r3, [r2, #16]
}
    ada2:	bf00      	nop
    ada4:	3714      	adds	r7, #20
    ada6:	46bd      	mov	sp, r7
    ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
    adac:	4770      	bx	lr
    adae:	bf00      	nop
    adb0:	00008bf9 	.word	0x00008bf9
    adb4:	20000a90 	.word	0x20000a90

0000adb8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    adb8:	b580      	push	{r7, lr}
    adba:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    adbc:	4b01      	ldr	r3, [pc, #4]	; (adc4 <USB_0_Handler+0xc>)
    adbe:	4798      	blx	r3
}
    adc0:	bf00      	nop
    adc2:	bd80      	pop	{r7, pc}
    adc4:	0000a029 	.word	0x0000a029

0000adc8 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    adc8:	b580      	push	{r7, lr}
    adca:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    adcc:	4b01      	ldr	r3, [pc, #4]	; (add4 <USB_1_Handler+0xc>)
    adce:	4798      	blx	r3
}
    add0:	bf00      	nop
    add2:	bd80      	pop	{r7, pc}
    add4:	0000a029 	.word	0x0000a029

0000add8 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    add8:	b580      	push	{r7, lr}
    adda:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    addc:	4b01      	ldr	r3, [pc, #4]	; (ade4 <USB_2_Handler+0xc>)
    adde:	4798      	blx	r3
}
    ade0:	bf00      	nop
    ade2:	bd80      	pop	{r7, pc}
    ade4:	0000a029 	.word	0x0000a029

0000ade8 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ade8:	b580      	push	{r7, lr}
    adea:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    adec:	4b01      	ldr	r3, [pc, #4]	; (adf4 <USB_3_Handler+0xc>)
    adee:	4798      	blx	r3
}
    adf0:	bf00      	nop
    adf2:	bd80      	pop	{r7, pc}
    adf4:	0000a029 	.word	0x0000a029

0000adf8 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    adf8:	b480      	push	{r7}
    adfa:	b083      	sub	sp, #12
    adfc:	af00      	add	r7, sp, #0
    adfe:	6078      	str	r0, [r7, #4]
    ae00:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ae02:	bf00      	nop
    ae04:	687b      	ldr	r3, [r7, #4]
    ae06:	689a      	ldr	r2, [r3, #8]
    ae08:	683b      	ldr	r3, [r7, #0]
    ae0a:	4013      	ands	r3, r2
    ae0c:	2b00      	cmp	r3, #0
    ae0e:	d1f9      	bne.n	ae04 <hri_wdt_wait_for_sync+0xc>
	};
}
    ae10:	bf00      	nop
    ae12:	370c      	adds	r7, #12
    ae14:	46bd      	mov	sp, r7
    ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae1a:	4770      	bx	lr

0000ae1c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ae1c:	b580      	push	{r7, lr}
    ae1e:	b084      	sub	sp, #16
    ae20:	af00      	add	r7, sp, #0
    ae22:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ae24:	210e      	movs	r1, #14
    ae26:	6878      	ldr	r0, [r7, #4]
    ae28:	4b0a      	ldr	r3, [pc, #40]	; (ae54 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ae2a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ae2c:	687b      	ldr	r3, [r7, #4]
    ae2e:	781b      	ldrb	r3, [r3, #0]
    ae30:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ae32:	7bfb      	ldrb	r3, [r7, #15]
    ae34:	085b      	lsrs	r3, r3, #1
    ae36:	b2db      	uxtb	r3, r3
    ae38:	f003 0301 	and.w	r3, r3, #1
    ae3c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ae3e:	7bfb      	ldrb	r3, [r7, #15]
    ae40:	2b00      	cmp	r3, #0
    ae42:	bf14      	ite	ne
    ae44:	2301      	movne	r3, #1
    ae46:	2300      	moveq	r3, #0
    ae48:	b2db      	uxtb	r3, r3
}
    ae4a:	4618      	mov	r0, r3
    ae4c:	3710      	adds	r7, #16
    ae4e:	46bd      	mov	sp, r7
    ae50:	bd80      	pop	{r7, pc}
    ae52:	bf00      	nop
    ae54:	0000adf9 	.word	0x0000adf9

0000ae58 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    ae58:	b580      	push	{r7, lr}
    ae5a:	b082      	sub	sp, #8
    ae5c:	af00      	add	r7, sp, #0
    ae5e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ae60:	687b      	ldr	r3, [r7, #4]
    ae62:	781b      	ldrb	r3, [r3, #0]
    ae64:	b2db      	uxtb	r3, r3
    ae66:	f023 0304 	bic.w	r3, r3, #4
    ae6a:	b2da      	uxtb	r2, r3
    ae6c:	687b      	ldr	r3, [r7, #4]
    ae6e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ae70:	210e      	movs	r1, #14
    ae72:	6878      	ldr	r0, [r7, #4]
    ae74:	4b02      	ldr	r3, [pc, #8]	; (ae80 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    ae76:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    ae78:	bf00      	nop
    ae7a:	3708      	adds	r7, #8
    ae7c:	46bd      	mov	sp, r7
    ae7e:	bd80      	pop	{r7, pc}
    ae80:	0000adf9 	.word	0x0000adf9

0000ae84 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    ae84:	b580      	push	{r7, lr}
    ae86:	b084      	sub	sp, #16
    ae88:	af00      	add	r7, sp, #0
    ae8a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ae8c:	210e      	movs	r1, #14
    ae8e:	6878      	ldr	r0, [r7, #4]
    ae90:	4b08      	ldr	r3, [pc, #32]	; (aeb4 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    ae92:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ae94:	687b      	ldr	r3, [r7, #4]
    ae96:	781b      	ldrb	r3, [r3, #0]
    ae98:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    ae9a:	7bfb      	ldrb	r3, [r7, #15]
    ae9c:	09db      	lsrs	r3, r3, #7
    ae9e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    aea0:	7bfb      	ldrb	r3, [r7, #15]
    aea2:	2b00      	cmp	r3, #0
    aea4:	bf14      	ite	ne
    aea6:	2301      	movne	r3, #1
    aea8:	2300      	moveq	r3, #0
    aeaa:	b2db      	uxtb	r3, r3
}
    aeac:	4618      	mov	r0, r3
    aeae:	3710      	adds	r7, #16
    aeb0:	46bd      	mov	sp, r7
    aeb2:	bd80      	pop	{r7, pc}
    aeb4:	0000adf9 	.word	0x0000adf9

0000aeb8 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    aeb8:	b480      	push	{r7}
    aeba:	b085      	sub	sp, #20
    aebc:	af00      	add	r7, sp, #0
    aebe:	6078      	str	r0, [r7, #4]
    aec0:	460b      	mov	r3, r1
    aec2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    aec4:	687b      	ldr	r3, [r7, #4]
    aec6:	785b      	ldrb	r3, [r3, #1]
    aec8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    aeca:	7bfb      	ldrb	r3, [r7, #15]
    aecc:	f023 030f 	bic.w	r3, r3, #15
    aed0:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    aed2:	78fb      	ldrb	r3, [r7, #3]
    aed4:	f003 030f 	and.w	r3, r3, #15
    aed8:	b2da      	uxtb	r2, r3
    aeda:	7bfb      	ldrb	r3, [r7, #15]
    aedc:	4313      	orrs	r3, r2
    aede:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    aee0:	687b      	ldr	r3, [r7, #4]
    aee2:	7bfa      	ldrb	r2, [r7, #15]
    aee4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    aee6:	bf00      	nop
    aee8:	3714      	adds	r7, #20
    aeea:	46bd      	mov	sp, r7
    aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
    aef0:	4770      	bx	lr
	...

0000aef4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    aef4:	b580      	push	{r7, lr}
    aef6:	b082      	sub	sp, #8
    aef8:	af00      	add	r7, sp, #0
    aefa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    aefc:	687b      	ldr	r3, [r7, #4]
    aefe:	2b00      	cmp	r3, #0
    af00:	d005      	beq.n	af0e <_wdt_init+0x1a>
    af02:	687b      	ldr	r3, [r7, #4]
    af04:	681b      	ldr	r3, [r3, #0]
    af06:	2b00      	cmp	r3, #0
    af08:	d001      	beq.n	af0e <_wdt_init+0x1a>
    af0a:	2301      	movs	r3, #1
    af0c:	e000      	b.n	af10 <_wdt_init+0x1c>
    af0e:	2300      	movs	r3, #0
    af10:	f003 0301 	and.w	r3, r3, #1
    af14:	b2db      	uxtb	r3, r3
    af16:	2250      	movs	r2, #80	; 0x50
    af18:	4913      	ldr	r1, [pc, #76]	; (af68 <_wdt_init+0x74>)
    af1a:	4618      	mov	r0, r3
    af1c:	4b13      	ldr	r3, [pc, #76]	; (af6c <_wdt_init+0x78>)
    af1e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    af20:	687b      	ldr	r3, [r7, #4]
    af22:	681b      	ldr	r3, [r3, #0]
    af24:	4618      	mov	r0, r3
    af26:	4b12      	ldr	r3, [pc, #72]	; (af70 <_wdt_init+0x7c>)
    af28:	4798      	blx	r3
    af2a:	4603      	mov	r3, r0
    af2c:	2b00      	cmp	r3, #0
    af2e:	d107      	bne.n	af40 <_wdt_init+0x4c>
    af30:	687b      	ldr	r3, [r7, #4]
    af32:	681b      	ldr	r3, [r3, #0]
    af34:	4618      	mov	r0, r3
    af36:	4b0f      	ldr	r3, [pc, #60]	; (af74 <_wdt_init+0x80>)
    af38:	4798      	blx	r3
    af3a:	4603      	mov	r3, r0
    af3c:	2b00      	cmp	r3, #0
    af3e:	d002      	beq.n	af46 <_wdt_init+0x52>
		return ERR_DENIED;
    af40:	f06f 0310 	mvn.w	r3, #16
    af44:	e00b      	b.n	af5e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    af46:	687b      	ldr	r3, [r7, #4]
    af48:	681b      	ldr	r3, [r3, #0]
    af4a:	4618      	mov	r0, r3
    af4c:	4b0a      	ldr	r3, [pc, #40]	; (af78 <_wdt_init+0x84>)
    af4e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    af50:	687b      	ldr	r3, [r7, #4]
    af52:	681b      	ldr	r3, [r3, #0]
    af54:	210b      	movs	r1, #11
    af56:	4618      	mov	r0, r3
    af58:	4b08      	ldr	r3, [pc, #32]	; (af7c <_wdt_init+0x88>)
    af5a:	4798      	blx	r3
	}

	return ERR_NONE;
    af5c:	2300      	movs	r3, #0
}
    af5e:	4618      	mov	r0, r3
    af60:	3708      	adds	r7, #8
    af62:	46bd      	mov	sp, r7
    af64:	bd80      	pop	{r7, pc}
    af66:	bf00      	nop
    af68:	0000f09c 	.word	0x0000f09c
    af6c:	0000349d 	.word	0x0000349d
    af70:	0000ae85 	.word	0x0000ae85
    af74:	0000ae1d 	.word	0x0000ae1d
    af78:	0000ae59 	.word	0x0000ae59
    af7c:	0000aeb9 	.word	0x0000aeb9

0000af80 <hri_port_set_DIR_reg>:
{
    af80:	b480      	push	{r7}
    af82:	b085      	sub	sp, #20
    af84:	af00      	add	r7, sp, #0
    af86:	60f8      	str	r0, [r7, #12]
    af88:	460b      	mov	r3, r1
    af8a:	607a      	str	r2, [r7, #4]
    af8c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    af8e:	7afb      	ldrb	r3, [r7, #11]
    af90:	68fa      	ldr	r2, [r7, #12]
    af92:	01db      	lsls	r3, r3, #7
    af94:	4413      	add	r3, r2
    af96:	3308      	adds	r3, #8
    af98:	687a      	ldr	r2, [r7, #4]
    af9a:	601a      	str	r2, [r3, #0]
}
    af9c:	bf00      	nop
    af9e:	3714      	adds	r7, #20
    afa0:	46bd      	mov	sp, r7
    afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    afa6:	4770      	bx	lr

0000afa8 <hri_port_clear_DIR_reg>:
{
    afa8:	b480      	push	{r7}
    afaa:	b085      	sub	sp, #20
    afac:	af00      	add	r7, sp, #0
    afae:	60f8      	str	r0, [r7, #12]
    afb0:	460b      	mov	r3, r1
    afb2:	607a      	str	r2, [r7, #4]
    afb4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    afb6:	7afb      	ldrb	r3, [r7, #11]
    afb8:	68fa      	ldr	r2, [r7, #12]
    afba:	01db      	lsls	r3, r3, #7
    afbc:	4413      	add	r3, r2
    afbe:	3304      	adds	r3, #4
    afc0:	687a      	ldr	r2, [r7, #4]
    afc2:	601a      	str	r2, [r3, #0]
}
    afc4:	bf00      	nop
    afc6:	3714      	adds	r7, #20
    afc8:	46bd      	mov	sp, r7
    afca:	f85d 7b04 	ldr.w	r7, [sp], #4
    afce:	4770      	bx	lr

0000afd0 <hri_port_set_OUT_reg>:
{
    afd0:	b480      	push	{r7}
    afd2:	b085      	sub	sp, #20
    afd4:	af00      	add	r7, sp, #0
    afd6:	60f8      	str	r0, [r7, #12]
    afd8:	460b      	mov	r3, r1
    afda:	607a      	str	r2, [r7, #4]
    afdc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    afde:	7afb      	ldrb	r3, [r7, #11]
    afe0:	68fa      	ldr	r2, [r7, #12]
    afe2:	01db      	lsls	r3, r3, #7
    afe4:	4413      	add	r3, r2
    afe6:	3318      	adds	r3, #24
    afe8:	687a      	ldr	r2, [r7, #4]
    afea:	601a      	str	r2, [r3, #0]
}
    afec:	bf00      	nop
    afee:	3714      	adds	r7, #20
    aff0:	46bd      	mov	sp, r7
    aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aff6:	4770      	bx	lr

0000aff8 <hri_port_clear_OUT_reg>:
{
    aff8:	b480      	push	{r7}
    affa:	b085      	sub	sp, #20
    affc:	af00      	add	r7, sp, #0
    affe:	60f8      	str	r0, [r7, #12]
    b000:	460b      	mov	r3, r1
    b002:	607a      	str	r2, [r7, #4]
    b004:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b006:	7afb      	ldrb	r3, [r7, #11]
    b008:	68fa      	ldr	r2, [r7, #12]
    b00a:	01db      	lsls	r3, r3, #7
    b00c:	4413      	add	r3, r2
    b00e:	3314      	adds	r3, #20
    b010:	687a      	ldr	r2, [r7, #4]
    b012:	601a      	str	r2, [r3, #0]
}
    b014:	bf00      	nop
    b016:	3714      	adds	r7, #20
    b018:	46bd      	mov	sp, r7
    b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b01e:	4770      	bx	lr

0000b020 <hri_port_write_PMUX_PMUXE_bf>:
{
    b020:	b480      	push	{r7}
    b022:	b085      	sub	sp, #20
    b024:	af00      	add	r7, sp, #0
    b026:	6078      	str	r0, [r7, #4]
    b028:	4608      	mov	r0, r1
    b02a:	4611      	mov	r1, r2
    b02c:	461a      	mov	r2, r3
    b02e:	4603      	mov	r3, r0
    b030:	70fb      	strb	r3, [r7, #3]
    b032:	460b      	mov	r3, r1
    b034:	70bb      	strb	r3, [r7, #2]
    b036:	4613      	mov	r3, r2
    b038:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b03a:	78fa      	ldrb	r2, [r7, #3]
    b03c:	78bb      	ldrb	r3, [r7, #2]
    b03e:	6879      	ldr	r1, [r7, #4]
    b040:	01d2      	lsls	r2, r2, #7
    b042:	440a      	add	r2, r1
    b044:	4413      	add	r3, r2
    b046:	3330      	adds	r3, #48	; 0x30
    b048:	781b      	ldrb	r3, [r3, #0]
    b04a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b04c:	7bfb      	ldrb	r3, [r7, #15]
    b04e:	f023 030f 	bic.w	r3, r3, #15
    b052:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b054:	787b      	ldrb	r3, [r7, #1]
    b056:	f003 030f 	and.w	r3, r3, #15
    b05a:	b2da      	uxtb	r2, r3
    b05c:	7bfb      	ldrb	r3, [r7, #15]
    b05e:	4313      	orrs	r3, r2
    b060:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b062:	78fa      	ldrb	r2, [r7, #3]
    b064:	78bb      	ldrb	r3, [r7, #2]
    b066:	6879      	ldr	r1, [r7, #4]
    b068:	01d2      	lsls	r2, r2, #7
    b06a:	440a      	add	r2, r1
    b06c:	4413      	add	r3, r2
    b06e:	3330      	adds	r3, #48	; 0x30
    b070:	7bfa      	ldrb	r2, [r7, #15]
    b072:	701a      	strb	r2, [r3, #0]
}
    b074:	bf00      	nop
    b076:	3714      	adds	r7, #20
    b078:	46bd      	mov	sp, r7
    b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b07e:	4770      	bx	lr

0000b080 <hri_port_write_PMUX_PMUXO_bf>:
{
    b080:	b480      	push	{r7}
    b082:	b085      	sub	sp, #20
    b084:	af00      	add	r7, sp, #0
    b086:	6078      	str	r0, [r7, #4]
    b088:	4608      	mov	r0, r1
    b08a:	4611      	mov	r1, r2
    b08c:	461a      	mov	r2, r3
    b08e:	4603      	mov	r3, r0
    b090:	70fb      	strb	r3, [r7, #3]
    b092:	460b      	mov	r3, r1
    b094:	70bb      	strb	r3, [r7, #2]
    b096:	4613      	mov	r3, r2
    b098:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b09a:	78fa      	ldrb	r2, [r7, #3]
    b09c:	78bb      	ldrb	r3, [r7, #2]
    b09e:	6879      	ldr	r1, [r7, #4]
    b0a0:	01d2      	lsls	r2, r2, #7
    b0a2:	440a      	add	r2, r1
    b0a4:	4413      	add	r3, r2
    b0a6:	3330      	adds	r3, #48	; 0x30
    b0a8:	781b      	ldrb	r3, [r3, #0]
    b0aa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b0ac:	7bfb      	ldrb	r3, [r7, #15]
    b0ae:	f003 030f 	and.w	r3, r3, #15
    b0b2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b0b4:	787b      	ldrb	r3, [r7, #1]
    b0b6:	011b      	lsls	r3, r3, #4
    b0b8:	b2da      	uxtb	r2, r3
    b0ba:	7bfb      	ldrb	r3, [r7, #15]
    b0bc:	4313      	orrs	r3, r2
    b0be:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b0c0:	78fa      	ldrb	r2, [r7, #3]
    b0c2:	78bb      	ldrb	r3, [r7, #2]
    b0c4:	6879      	ldr	r1, [r7, #4]
    b0c6:	01d2      	lsls	r2, r2, #7
    b0c8:	440a      	add	r2, r1
    b0ca:	4413      	add	r3, r2
    b0cc:	3330      	adds	r3, #48	; 0x30
    b0ce:	7bfa      	ldrb	r2, [r7, #15]
    b0d0:	701a      	strb	r2, [r3, #0]
}
    b0d2:	bf00      	nop
    b0d4:	3714      	adds	r7, #20
    b0d6:	46bd      	mov	sp, r7
    b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0dc:	4770      	bx	lr

0000b0de <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b0de:	b480      	push	{r7}
    b0e0:	b085      	sub	sp, #20
    b0e2:	af00      	add	r7, sp, #0
    b0e4:	6078      	str	r0, [r7, #4]
    b0e6:	4608      	mov	r0, r1
    b0e8:	4611      	mov	r1, r2
    b0ea:	461a      	mov	r2, r3
    b0ec:	4603      	mov	r3, r0
    b0ee:	70fb      	strb	r3, [r7, #3]
    b0f0:	460b      	mov	r3, r1
    b0f2:	70bb      	strb	r3, [r7, #2]
    b0f4:	4613      	mov	r3, r2
    b0f6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b0f8:	78fa      	ldrb	r2, [r7, #3]
    b0fa:	78bb      	ldrb	r3, [r7, #2]
    b0fc:	6879      	ldr	r1, [r7, #4]
    b0fe:	01d2      	lsls	r2, r2, #7
    b100:	440a      	add	r2, r1
    b102:	4413      	add	r3, r2
    b104:	3340      	adds	r3, #64	; 0x40
    b106:	781b      	ldrb	r3, [r3, #0]
    b108:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b10a:	7bfb      	ldrb	r3, [r7, #15]
    b10c:	f023 0301 	bic.w	r3, r3, #1
    b110:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b112:	787a      	ldrb	r2, [r7, #1]
    b114:	7bfb      	ldrb	r3, [r7, #15]
    b116:	4313      	orrs	r3, r2
    b118:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b11a:	78fa      	ldrb	r2, [r7, #3]
    b11c:	78bb      	ldrb	r3, [r7, #2]
    b11e:	6879      	ldr	r1, [r7, #4]
    b120:	01d2      	lsls	r2, r2, #7
    b122:	440a      	add	r2, r1
    b124:	4413      	add	r3, r2
    b126:	3340      	adds	r3, #64	; 0x40
    b128:	7bfa      	ldrb	r2, [r7, #15]
    b12a:	701a      	strb	r2, [r3, #0]
}
    b12c:	bf00      	nop
    b12e:	3714      	adds	r7, #20
    b130:	46bd      	mov	sp, r7
    b132:	f85d 7b04 	ldr.w	r7, [sp], #4
    b136:	4770      	bx	lr

0000b138 <hri_port_write_WRCONFIG_reg>:
{
    b138:	b480      	push	{r7}
    b13a:	b085      	sub	sp, #20
    b13c:	af00      	add	r7, sp, #0
    b13e:	60f8      	str	r0, [r7, #12]
    b140:	460b      	mov	r3, r1
    b142:	607a      	str	r2, [r7, #4]
    b144:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b146:	7afb      	ldrb	r3, [r7, #11]
    b148:	68fa      	ldr	r2, [r7, #12]
    b14a:	01db      	lsls	r3, r3, #7
    b14c:	4413      	add	r3, r2
    b14e:	3328      	adds	r3, #40	; 0x28
    b150:	687a      	ldr	r2, [r7, #4]
    b152:	601a      	str	r2, [r3, #0]
}
    b154:	bf00      	nop
    b156:	3714      	adds	r7, #20
    b158:	46bd      	mov	sp, r7
    b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b15e:	4770      	bx	lr

0000b160 <_gpio_set_direction>:
{
    b160:	b580      	push	{r7, lr}
    b162:	b082      	sub	sp, #8
    b164:	af00      	add	r7, sp, #0
    b166:	4603      	mov	r3, r0
    b168:	6039      	str	r1, [r7, #0]
    b16a:	71fb      	strb	r3, [r7, #7]
    b16c:	4613      	mov	r3, r2
    b16e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b170:	79bb      	ldrb	r3, [r7, #6]
    b172:	2b01      	cmp	r3, #1
    b174:	d01c      	beq.n	b1b0 <_gpio_set_direction+0x50>
    b176:	2b02      	cmp	r3, #2
    b178:	d037      	beq.n	b1ea <_gpio_set_direction+0x8a>
    b17a:	2b00      	cmp	r3, #0
    b17c:	d14e      	bne.n	b21c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b17e:	79fb      	ldrb	r3, [r7, #7]
    b180:	683a      	ldr	r2, [r7, #0]
    b182:	4619      	mov	r1, r3
    b184:	482a      	ldr	r0, [pc, #168]	; (b230 <_gpio_set_direction+0xd0>)
    b186:	4b2b      	ldr	r3, [pc, #172]	; (b234 <_gpio_set_direction+0xd4>)
    b188:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b18a:	683b      	ldr	r3, [r7, #0]
    b18c:	b29b      	uxth	r3, r3
    b18e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b192:	79fb      	ldrb	r3, [r7, #7]
    b194:	4619      	mov	r1, r3
    b196:	4826      	ldr	r0, [pc, #152]	; (b230 <_gpio_set_direction+0xd0>)
    b198:	4b27      	ldr	r3, [pc, #156]	; (b238 <_gpio_set_direction+0xd8>)
    b19a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b19c:	683b      	ldr	r3, [r7, #0]
    b19e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b1a0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b1a4:	79fb      	ldrb	r3, [r7, #7]
    b1a6:	4619      	mov	r1, r3
    b1a8:	4821      	ldr	r0, [pc, #132]	; (b230 <_gpio_set_direction+0xd0>)
    b1aa:	4b23      	ldr	r3, [pc, #140]	; (b238 <_gpio_set_direction+0xd8>)
    b1ac:	4798      	blx	r3
		break;
    b1ae:	e03a      	b.n	b226 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b1b0:	79fb      	ldrb	r3, [r7, #7]
    b1b2:	683a      	ldr	r2, [r7, #0]
    b1b4:	4619      	mov	r1, r3
    b1b6:	481e      	ldr	r0, [pc, #120]	; (b230 <_gpio_set_direction+0xd0>)
    b1b8:	4b1e      	ldr	r3, [pc, #120]	; (b234 <_gpio_set_direction+0xd4>)
    b1ba:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b1bc:	683b      	ldr	r3, [r7, #0]
    b1be:	b29b      	uxth	r3, r3
    b1c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b1c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b1c8:	79f9      	ldrb	r1, [r7, #7]
    b1ca:	461a      	mov	r2, r3
    b1cc:	4818      	ldr	r0, [pc, #96]	; (b230 <_gpio_set_direction+0xd0>)
    b1ce:	4b1a      	ldr	r3, [pc, #104]	; (b238 <_gpio_set_direction+0xd8>)
    b1d0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b1d2:	683b      	ldr	r3, [r7, #0]
    b1d4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b1d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b1da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b1de:	79f9      	ldrb	r1, [r7, #7]
    b1e0:	461a      	mov	r2, r3
    b1e2:	4813      	ldr	r0, [pc, #76]	; (b230 <_gpio_set_direction+0xd0>)
    b1e4:	4b14      	ldr	r3, [pc, #80]	; (b238 <_gpio_set_direction+0xd8>)
    b1e6:	4798      	blx	r3
		break;
    b1e8:	e01d      	b.n	b226 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b1ea:	79fb      	ldrb	r3, [r7, #7]
    b1ec:	683a      	ldr	r2, [r7, #0]
    b1ee:	4619      	mov	r1, r3
    b1f0:	480f      	ldr	r0, [pc, #60]	; (b230 <_gpio_set_direction+0xd0>)
    b1f2:	4b12      	ldr	r3, [pc, #72]	; (b23c <_gpio_set_direction+0xdc>)
    b1f4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b1f6:	683b      	ldr	r3, [r7, #0]
    b1f8:	b29b      	uxth	r3, r3
    b1fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b1fe:	79fb      	ldrb	r3, [r7, #7]
    b200:	4619      	mov	r1, r3
    b202:	480b      	ldr	r0, [pc, #44]	; (b230 <_gpio_set_direction+0xd0>)
    b204:	4b0c      	ldr	r3, [pc, #48]	; (b238 <_gpio_set_direction+0xd8>)
    b206:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b208:	683b      	ldr	r3, [r7, #0]
    b20a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b20c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b210:	79fb      	ldrb	r3, [r7, #7]
    b212:	4619      	mov	r1, r3
    b214:	4806      	ldr	r0, [pc, #24]	; (b230 <_gpio_set_direction+0xd0>)
    b216:	4b08      	ldr	r3, [pc, #32]	; (b238 <_gpio_set_direction+0xd8>)
    b218:	4798      	blx	r3
		break;
    b21a:	e004      	b.n	b226 <_gpio_set_direction+0xc6>
		ASSERT(false);
    b21c:	2246      	movs	r2, #70	; 0x46
    b21e:	4908      	ldr	r1, [pc, #32]	; (b240 <_gpio_set_direction+0xe0>)
    b220:	2000      	movs	r0, #0
    b222:	4b08      	ldr	r3, [pc, #32]	; (b244 <_gpio_set_direction+0xe4>)
    b224:	4798      	blx	r3
}
    b226:	bf00      	nop
    b228:	3708      	adds	r7, #8
    b22a:	46bd      	mov	sp, r7
    b22c:	bd80      	pop	{r7, pc}
    b22e:	bf00      	nop
    b230:	41008000 	.word	0x41008000
    b234:	0000afa9 	.word	0x0000afa9
    b238:	0000b139 	.word	0x0000b139
    b23c:	0000af81 	.word	0x0000af81
    b240:	0000f0b4 	.word	0x0000f0b4
    b244:	0000349d 	.word	0x0000349d

0000b248 <_gpio_set_level>:
{
    b248:	b580      	push	{r7, lr}
    b24a:	b082      	sub	sp, #8
    b24c:	af00      	add	r7, sp, #0
    b24e:	4603      	mov	r3, r0
    b250:	6039      	str	r1, [r7, #0]
    b252:	71fb      	strb	r3, [r7, #7]
    b254:	4613      	mov	r3, r2
    b256:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b258:	79bb      	ldrb	r3, [r7, #6]
    b25a:	2b00      	cmp	r3, #0
    b25c:	d006      	beq.n	b26c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b25e:	79fb      	ldrb	r3, [r7, #7]
    b260:	683a      	ldr	r2, [r7, #0]
    b262:	4619      	mov	r1, r3
    b264:	4806      	ldr	r0, [pc, #24]	; (b280 <_gpio_set_level+0x38>)
    b266:	4b07      	ldr	r3, [pc, #28]	; (b284 <_gpio_set_level+0x3c>)
    b268:	4798      	blx	r3
}
    b26a:	e005      	b.n	b278 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b26c:	79fb      	ldrb	r3, [r7, #7]
    b26e:	683a      	ldr	r2, [r7, #0]
    b270:	4619      	mov	r1, r3
    b272:	4803      	ldr	r0, [pc, #12]	; (b280 <_gpio_set_level+0x38>)
    b274:	4b04      	ldr	r3, [pc, #16]	; (b288 <_gpio_set_level+0x40>)
    b276:	4798      	blx	r3
}
    b278:	bf00      	nop
    b27a:	3708      	adds	r7, #8
    b27c:	46bd      	mov	sp, r7
    b27e:	bd80      	pop	{r7, pc}
    b280:	41008000 	.word	0x41008000
    b284:	0000afd1 	.word	0x0000afd1
    b288:	0000aff9 	.word	0x0000aff9

0000b28c <_gpio_set_pin_function>:
{
    b28c:	b590      	push	{r4, r7, lr}
    b28e:	b085      	sub	sp, #20
    b290:	af00      	add	r7, sp, #0
    b292:	6078      	str	r0, [r7, #4]
    b294:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b296:	687b      	ldr	r3, [r7, #4]
    b298:	095b      	lsrs	r3, r3, #5
    b29a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b29c:	687b      	ldr	r3, [r7, #4]
    b29e:	b2db      	uxtb	r3, r3
    b2a0:	f003 031f 	and.w	r3, r3, #31
    b2a4:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b2a6:	683b      	ldr	r3, [r7, #0]
    b2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    b2ac:	d106      	bne.n	b2bc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b2ae:	7bba      	ldrb	r2, [r7, #14]
    b2b0:	7bf9      	ldrb	r1, [r7, #15]
    b2b2:	2300      	movs	r3, #0
    b2b4:	4812      	ldr	r0, [pc, #72]	; (b300 <_gpio_set_pin_function+0x74>)
    b2b6:	4c13      	ldr	r4, [pc, #76]	; (b304 <_gpio_set_pin_function+0x78>)
    b2b8:	47a0      	blx	r4
}
    b2ba:	e01d      	b.n	b2f8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b2bc:	7bba      	ldrb	r2, [r7, #14]
    b2be:	7bf9      	ldrb	r1, [r7, #15]
    b2c0:	2301      	movs	r3, #1
    b2c2:	480f      	ldr	r0, [pc, #60]	; (b300 <_gpio_set_pin_function+0x74>)
    b2c4:	4c0f      	ldr	r4, [pc, #60]	; (b304 <_gpio_set_pin_function+0x78>)
    b2c6:	47a0      	blx	r4
		if (pin & 1) {
    b2c8:	7bbb      	ldrb	r3, [r7, #14]
    b2ca:	f003 0301 	and.w	r3, r3, #1
    b2ce:	2b00      	cmp	r3, #0
    b2d0:	d009      	beq.n	b2e6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b2d2:	7bbb      	ldrb	r3, [r7, #14]
    b2d4:	085b      	lsrs	r3, r3, #1
    b2d6:	b2da      	uxtb	r2, r3
    b2d8:	683b      	ldr	r3, [r7, #0]
    b2da:	b2db      	uxtb	r3, r3
    b2dc:	7bf9      	ldrb	r1, [r7, #15]
    b2de:	4808      	ldr	r0, [pc, #32]	; (b300 <_gpio_set_pin_function+0x74>)
    b2e0:	4c09      	ldr	r4, [pc, #36]	; (b308 <_gpio_set_pin_function+0x7c>)
    b2e2:	47a0      	blx	r4
}
    b2e4:	e008      	b.n	b2f8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b2e6:	7bbb      	ldrb	r3, [r7, #14]
    b2e8:	085b      	lsrs	r3, r3, #1
    b2ea:	b2da      	uxtb	r2, r3
    b2ec:	683b      	ldr	r3, [r7, #0]
    b2ee:	b2db      	uxtb	r3, r3
    b2f0:	7bf9      	ldrb	r1, [r7, #15]
    b2f2:	4803      	ldr	r0, [pc, #12]	; (b300 <_gpio_set_pin_function+0x74>)
    b2f4:	4c05      	ldr	r4, [pc, #20]	; (b30c <_gpio_set_pin_function+0x80>)
    b2f6:	47a0      	blx	r4
}
    b2f8:	bf00      	nop
    b2fa:	3714      	adds	r7, #20
    b2fc:	46bd      	mov	sp, r7
    b2fe:	bd90      	pop	{r4, r7, pc}
    b300:	41008000 	.word	0x41008000
    b304:	0000b0df 	.word	0x0000b0df
    b308:	0000b081 	.word	0x0000b081
    b30c:	0000b021 	.word	0x0000b021

0000b310 <gpio_set_pin_function>:
{
    b310:	b580      	push	{r7, lr}
    b312:	b082      	sub	sp, #8
    b314:	af00      	add	r7, sp, #0
    b316:	6078      	str	r0, [r7, #4]
    b318:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b31a:	6839      	ldr	r1, [r7, #0]
    b31c:	6878      	ldr	r0, [r7, #4]
    b31e:	4b03      	ldr	r3, [pc, #12]	; (b32c <gpio_set_pin_function+0x1c>)
    b320:	4798      	blx	r3
}
    b322:	bf00      	nop
    b324:	3708      	adds	r7, #8
    b326:	46bd      	mov	sp, r7
    b328:	bd80      	pop	{r7, pc}
    b32a:	bf00      	nop
    b32c:	0000b28d 	.word	0x0000b28d

0000b330 <gpio_set_pin_direction>:
{
    b330:	b580      	push	{r7, lr}
    b332:	b082      	sub	sp, #8
    b334:	af00      	add	r7, sp, #0
    b336:	4603      	mov	r3, r0
    b338:	460a      	mov	r2, r1
    b33a:	71fb      	strb	r3, [r7, #7]
    b33c:	4613      	mov	r3, r2
    b33e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b340:	79fb      	ldrb	r3, [r7, #7]
    b342:	095b      	lsrs	r3, r3, #5
    b344:	b2d8      	uxtb	r0, r3
    b346:	79fb      	ldrb	r3, [r7, #7]
    b348:	f003 031f 	and.w	r3, r3, #31
    b34c:	2201      	movs	r2, #1
    b34e:	fa02 f303 	lsl.w	r3, r2, r3
    b352:	79ba      	ldrb	r2, [r7, #6]
    b354:	4619      	mov	r1, r3
    b356:	4b03      	ldr	r3, [pc, #12]	; (b364 <gpio_set_pin_direction+0x34>)
    b358:	4798      	blx	r3
}
    b35a:	bf00      	nop
    b35c:	3708      	adds	r7, #8
    b35e:	46bd      	mov	sp, r7
    b360:	bd80      	pop	{r7, pc}
    b362:	bf00      	nop
    b364:	0000b161 	.word	0x0000b161

0000b368 <gpio_set_pin_level>:
{
    b368:	b580      	push	{r7, lr}
    b36a:	b082      	sub	sp, #8
    b36c:	af00      	add	r7, sp, #0
    b36e:	4603      	mov	r3, r0
    b370:	460a      	mov	r2, r1
    b372:	71fb      	strb	r3, [r7, #7]
    b374:	4613      	mov	r3, r2
    b376:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b378:	79fb      	ldrb	r3, [r7, #7]
    b37a:	095b      	lsrs	r3, r3, #5
    b37c:	b2d8      	uxtb	r0, r3
    b37e:	79fb      	ldrb	r3, [r7, #7]
    b380:	f003 031f 	and.w	r3, r3, #31
    b384:	2201      	movs	r2, #1
    b386:	fa02 f303 	lsl.w	r3, r2, r3
    b38a:	79ba      	ldrb	r2, [r7, #6]
    b38c:	4619      	mov	r1, r3
    b38e:	4b03      	ldr	r3, [pc, #12]	; (b39c <gpio_set_pin_level+0x34>)
    b390:	4798      	blx	r3
}
    b392:	bf00      	nop
    b394:	3708      	adds	r7, #8
    b396:	46bd      	mov	sp, r7
    b398:	bd80      	pop	{r7, pc}
    b39a:	bf00      	nop
    b39c:	0000b249 	.word	0x0000b249

0000b3a0 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b3a0:	b580      	push	{r7, lr}
    b3a2:	b082      	sub	sp, #8
    b3a4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b3a6:	2100      	movs	r1, #0
    b3a8:	2008      	movs	r0, #8
    b3aa:	4b24      	ldr	r3, [pc, #144]	; (b43c <QSPI_N25Q256_exit_xip+0x9c>)
    b3ac:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b3ae:	2100      	movs	r1, #0
    b3b0:	202b      	movs	r0, #43	; 0x2b
    b3b2:	4b22      	ldr	r3, [pc, #136]	; (b43c <QSPI_N25Q256_exit_xip+0x9c>)
    b3b4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b3b6:	2100      	movs	r1, #0
    b3b8:	202a      	movs	r0, #42	; 0x2a
    b3ba:	4b20      	ldr	r3, [pc, #128]	; (b43c <QSPI_N25Q256_exit_xip+0x9c>)
    b3bc:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b3be:	2102      	movs	r1, #2
    b3c0:	2008      	movs	r0, #8
    b3c2:	4b1f      	ldr	r3, [pc, #124]	; (b440 <QSPI_N25Q256_exit_xip+0xa0>)
    b3c4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b3c6:	2102      	movs	r1, #2
    b3c8:	202b      	movs	r0, #43	; 0x2b
    b3ca:	4b1d      	ldr	r3, [pc, #116]	; (b440 <QSPI_N25Q256_exit_xip+0xa0>)
    b3cc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b3ce:	2102      	movs	r1, #2
    b3d0:	202a      	movs	r0, #42	; 0x2a
    b3d2:	4b1b      	ldr	r3, [pc, #108]	; (b440 <QSPI_N25Q256_exit_xip+0xa0>)
    b3d4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b3d6:	2101      	movs	r1, #1
    b3d8:	2008      	movs	r0, #8
    b3da:	4b1a      	ldr	r3, [pc, #104]	; (b444 <QSPI_N25Q256_exit_xip+0xa4>)
    b3dc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b3de:	2100      	movs	r1, #0
    b3e0:	202b      	movs	r0, #43	; 0x2b
    b3e2:	4b18      	ldr	r3, [pc, #96]	; (b444 <QSPI_N25Q256_exit_xip+0xa4>)
    b3e4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b3e6:	2100      	movs	r1, #0
    b3e8:	202a      	movs	r0, #42	; 0x2a
    b3ea:	4b16      	ldr	r3, [pc, #88]	; (b444 <QSPI_N25Q256_exit_xip+0xa4>)
    b3ec:	4798      	blx	r3

	delay_us(1);
    b3ee:	2001      	movs	r0, #1
    b3f0:	4b15      	ldr	r3, [pc, #84]	; (b448 <QSPI_N25Q256_exit_xip+0xa8>)
    b3f2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b3f4:	2300      	movs	r3, #0
    b3f6:	607b      	str	r3, [r7, #4]
    b3f8:	e010      	b.n	b41c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b3fa:	2101      	movs	r1, #1
    b3fc:	202a      	movs	r0, #42	; 0x2a
    b3fe:	4b11      	ldr	r3, [pc, #68]	; (b444 <QSPI_N25Q256_exit_xip+0xa4>)
    b400:	4798      	blx	r3
		delay_us(1);
    b402:	2001      	movs	r0, #1
    b404:	4b10      	ldr	r3, [pc, #64]	; (b448 <QSPI_N25Q256_exit_xip+0xa8>)
    b406:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b408:	2100      	movs	r1, #0
    b40a:	202a      	movs	r0, #42	; 0x2a
    b40c:	4b0d      	ldr	r3, [pc, #52]	; (b444 <QSPI_N25Q256_exit_xip+0xa4>)
    b40e:	4798      	blx	r3
		delay_us(1);
    b410:	2001      	movs	r0, #1
    b412:	4b0d      	ldr	r3, [pc, #52]	; (b448 <QSPI_N25Q256_exit_xip+0xa8>)
    b414:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b416:	687b      	ldr	r3, [r7, #4]
    b418:	3301      	adds	r3, #1
    b41a:	607b      	str	r3, [r7, #4]
    b41c:	687b      	ldr	r3, [r7, #4]
    b41e:	2b06      	cmp	r3, #6
    b420:	ddeb      	ble.n	b3fa <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b422:	2101      	movs	r1, #1
    b424:	202b      	movs	r0, #43	; 0x2b
    b426:	4b07      	ldr	r3, [pc, #28]	; (b444 <QSPI_N25Q256_exit_xip+0xa4>)
    b428:	4798      	blx	r3
	delay_us(1);
    b42a:	2001      	movs	r0, #1
    b42c:	4b06      	ldr	r3, [pc, #24]	; (b448 <QSPI_N25Q256_exit_xip+0xa8>)
    b42e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b430:	4b06      	ldr	r3, [pc, #24]	; (b44c <QSPI_N25Q256_exit_xip+0xac>)
    b432:	4798      	blx	r3
}
    b434:	bf00      	nop
    b436:	3708      	adds	r7, #8
    b438:	46bd      	mov	sp, r7
    b43a:	bd80      	pop	{r7, pc}
    b43c:	0000b311 	.word	0x0000b311
    b440:	0000b331 	.word	0x0000b331
    b444:	0000b369 	.word	0x0000b369
    b448:	00001cc9 	.word	0x00001cc9
    b44c:	0000107d 	.word	0x0000107d

0000b450 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b450:	b598      	push	{r3, r4, r7, lr}
    b452:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b454:	4806      	ldr	r0, [pc, #24]	; (b470 <spi_nor_flash_init+0x20>)
    b456:	4b07      	ldr	r3, [pc, #28]	; (b474 <spi_nor_flash_init+0x24>)
    b458:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b45a:	2300      	movs	r3, #0
    b45c:	4a06      	ldr	r2, [pc, #24]	; (b478 <spi_nor_flash_init+0x28>)
    b45e:	4904      	ldr	r1, [pc, #16]	; (b470 <spi_nor_flash_init+0x20>)
    b460:	4806      	ldr	r0, [pc, #24]	; (b47c <spi_nor_flash_init+0x2c>)
    b462:	4c07      	ldr	r4, [pc, #28]	; (b480 <spi_nor_flash_init+0x30>)
    b464:	47a0      	blx	r4
    b466:	4602      	mov	r2, r0
    b468:	4b06      	ldr	r3, [pc, #24]	; (b484 <spi_nor_flash_init+0x34>)
    b46a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b46c:	bf00      	nop
    b46e:	bd98      	pop	{r3, r4, r7, pc}
    b470:	2000108c 	.word	0x2000108c
    b474:	00002405 	.word	0x00002405
    b478:	0000b3a1 	.word	0x0000b3a1
    b47c:	20000bf8 	.word	0x20000bf8
    b480:	0000b8bd 	.word	0x0000b8bd
    b484:	200012ac 	.word	0x200012ac

0000b488 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b488:	b580      	push	{r7, lr}
    b48a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b48c:	4805      	ldr	r0, [pc, #20]	; (b4a4 <cdc_device_acm_init+0x1c>)
    b48e:	4b06      	ldr	r3, [pc, #24]	; (b4a8 <cdc_device_acm_init+0x20>)
    b490:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b492:	4b06      	ldr	r3, [pc, #24]	; (b4ac <cdc_device_acm_init+0x24>)
    b494:	4798      	blx	r3

	usbdc_start(single_desc);
    b496:	4806      	ldr	r0, [pc, #24]	; (b4b0 <cdc_device_acm_init+0x28>)
    b498:	4b06      	ldr	r3, [pc, #24]	; (b4b4 <cdc_device_acm_init+0x2c>)
    b49a:	4798      	blx	r3
	usbdc_attach();
    b49c:	4b06      	ldr	r3, [pc, #24]	; (b4b8 <cdc_device_acm_init+0x30>)
    b49e:	4798      	blx	r3
}
    b4a0:	bf00      	nop
    b4a2:	bd80      	pop	{r7, pc}
    b4a4:	20000c48 	.word	0x20000c48
    b4a8:	0000cfe5 	.word	0x0000cfe5
    b4ac:	0000c25d 	.word	0x0000c25d
    b4b0:	200001d0 	.word	0x200001d0
    b4b4:	0000d081 	.word	0x0000d081
    b4b8:	0000d0d1 	.word	0x0000d0d1

0000b4bc <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b4bc:	b580      	push	{r7, lr}
    b4be:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b4c0:	4b01      	ldr	r3, [pc, #4]	; (b4c8 <usb_init+0xc>)
    b4c2:	4798      	blx	r3
}
    b4c4:	bf00      	nop
    b4c6:	bd80      	pop	{r7, pc}
    b4c8:	0000b489 	.word	0x0000b489

0000b4cc <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b4cc:	b480      	push	{r7}
    b4ce:	b085      	sub	sp, #20
    b4d0:	af00      	add	r7, sp, #0
    b4d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b4d4:	f3ef 8310 	mrs	r3, PRIMASK
    b4d8:	60fb      	str	r3, [r7, #12]
  return(result);
    b4da:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b4dc:	687b      	ldr	r3, [r7, #4]
    b4de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b4e0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b4e2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b4e6:	bf00      	nop
    b4e8:	3714      	adds	r7, #20
    b4ea:	46bd      	mov	sp, r7
    b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4f0:	4770      	bx	lr

0000b4f2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b4f2:	b480      	push	{r7}
    b4f4:	b085      	sub	sp, #20
    b4f6:	af00      	add	r7, sp, #0
    b4f8:	6078      	str	r0, [r7, #4]
    b4fa:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b4fe:	687b      	ldr	r3, [r7, #4]
    b500:	681b      	ldr	r3, [r3, #0]
    b502:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b504:	68fb      	ldr	r3, [r7, #12]
    b506:	f383 8810 	msr	PRIMASK, r3
}
    b50a:	bf00      	nop
    b50c:	3714      	adds	r7, #20
    b50e:	46bd      	mov	sp, r7
    b510:	f85d 7b04 	ldr.w	r7, [sp], #4
    b514:	4770      	bx	lr
	...

0000b518 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b518:	b580      	push	{r7, lr}
    b51a:	b08c      	sub	sp, #48	; 0x30
    b51c:	af00      	add	r7, sp, #0
    b51e:	6078      	str	r0, [r7, #4]
    b520:	460b      	mov	r3, r1
    b522:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b524:	687b      	ldr	r3, [r7, #4]
    b526:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b528:	687b      	ldr	r3, [r7, #4]
    b52a:	681b      	ldr	r3, [r3, #0]
    b52c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b52e:	f107 030c 	add.w	r3, r7, #12
    b532:	2200      	movs	r2, #0
    b534:	601a      	str	r2, [r3, #0]
    b536:	605a      	str	r2, [r3, #4]
    b538:	609a      	str	r2, [r3, #8]
    b53a:	60da      	str	r2, [r3, #12]
    b53c:	611a      	str	r2, [r3, #16]
    b53e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b542:	7b1b      	ldrb	r3, [r3, #12]
    b544:	2b00      	cmp	r3, #0
    b546:	d001      	beq.n	b54c <n25q256a_xip_confirm+0x34>
    b548:	2206      	movs	r2, #6
    b54a:	e000      	b.n	b54e <n25q256a_xip_confirm+0x36>
    b54c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b54e:	7b3b      	ldrb	r3, [r7, #12]
    b550:	f362 0302 	bfi	r3, r2, #0, #3
    b554:	733b      	strb	r3, [r7, #12]
    b556:	7b3b      	ldrb	r3, [r7, #12]
    b558:	f043 0310 	orr.w	r3, r3, #16
    b55c:	733b      	strb	r3, [r7, #12]
    b55e:	7b3b      	ldrb	r3, [r7, #12]
    b560:	f043 0320 	orr.w	r3, r3, #32
    b564:	733b      	strb	r3, [r7, #12]
    b566:	7b3b      	ldrb	r3, [r7, #12]
    b568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b56c:	733b      	strb	r3, [r7, #12]
    b56e:	7b3b      	ldrb	r3, [r7, #12]
    b570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b574:	733b      	strb	r3, [r7, #12]
    b576:	7b7b      	ldrb	r3, [r7, #13]
    b578:	f043 0303 	orr.w	r3, r3, #3
    b57c:	737b      	strb	r3, [r7, #13]
    b57e:	7b7b      	ldrb	r3, [r7, #13]
    b580:	2201      	movs	r2, #1
    b582:	f362 1305 	bfi	r3, r2, #4, #2
    b586:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b58a:	7b1b      	ldrb	r3, [r3, #12]
    b58c:	2b00      	cmp	r3, #0
    b58e:	d001      	beq.n	b594 <n25q256a_xip_confirm+0x7c>
    b590:	2208      	movs	r2, #8
    b592:	e000      	b.n	b596 <n25q256a_xip_confirm+0x7e>
    b594:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b596:	7bbb      	ldrb	r3, [r7, #14]
    b598:	f362 0304 	bfi	r3, r2, #0, #5
    b59c:	73bb      	strb	r3, [r7, #14]
    b59e:	230b      	movs	r3, #11
    b5a0:	743b      	strb	r3, [r7, #16]
    b5a2:	78fb      	ldrb	r3, [r7, #3]
    b5a4:	2b00      	cmp	r3, #0
    b5a6:	d001      	beq.n	b5ac <n25q256a_xip_confirm+0x94>
    b5a8:	2300      	movs	r3, #0
    b5aa:	e000      	b.n	b5ae <n25q256a_xip_confirm+0x96>
    b5ac:	23ff      	movs	r3, #255	; 0xff
    b5ae:	747b      	strb	r3, [r7, #17]
    b5b0:	2301      	movs	r3, #1
    b5b2:	61bb      	str	r3, [r7, #24]
    b5b4:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b5b8:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b5ba:	f107 030c 	add.w	r3, r7, #12
    b5be:	4619      	mov	r1, r3
    b5c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b5c2:	4b07      	ldr	r3, [pc, #28]	; (b5e0 <n25q256a_xip_confirm+0xc8>)
    b5c4:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b5c6:	78fb      	ldrb	r3, [r7, #3]
    b5c8:	2b00      	cmp	r3, #0
    b5ca:	d001      	beq.n	b5d0 <n25q256a_xip_confirm+0xb8>
    b5cc:	2202      	movs	r2, #2
    b5ce:	e000      	b.n	b5d2 <n25q256a_xip_confirm+0xba>
    b5d0:	2201      	movs	r2, #1
    b5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5d4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b5d6:	2300      	movs	r3, #0
}
    b5d8:	4618      	mov	r0, r3
    b5da:	3730      	adds	r7, #48	; 0x30
    b5dc:	46bd      	mov	sp, r7
    b5de:	bd80      	pop	{r7, pc}
    b5e0:	0000247d 	.word	0x0000247d

0000b5e4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b5e4:	b580      	push	{r7, lr}
    b5e6:	b08c      	sub	sp, #48	; 0x30
    b5e8:	af00      	add	r7, sp, #0
    b5ea:	6078      	str	r0, [r7, #4]
    b5ec:	460b      	mov	r3, r1
    b5ee:	70fb      	strb	r3, [r7, #3]
    b5f0:	4613      	mov	r3, r2
    b5f2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b5f4:	2300      	movs	r3, #0
    b5f6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b5f8:	687b      	ldr	r3, [r7, #4]
    b5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b5fc:	687b      	ldr	r3, [r7, #4]
    b5fe:	681b      	ldr	r3, [r3, #0]
    b600:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b602:	f107 030c 	add.w	r3, r7, #12
    b606:	2200      	movs	r2, #0
    b608:	601a      	str	r2, [r3, #0]
    b60a:	605a      	str	r2, [r3, #4]
    b60c:	609a      	str	r2, [r3, #8]
    b60e:	60da      	str	r2, [r3, #12]
    b610:	611a      	str	r2, [r3, #16]
    b612:	615a      	str	r2, [r3, #20]
    b614:	78fb      	ldrb	r3, [r7, #3]
    b616:	f003 0307 	and.w	r3, r3, #7
    b61a:	b2da      	uxtb	r2, r3
    b61c:	7b3b      	ldrb	r3, [r7, #12]
    b61e:	f362 0302 	bfi	r3, r2, #0, #3
    b622:	733b      	strb	r3, [r7, #12]
    b624:	7b3b      	ldrb	r3, [r7, #12]
    b626:	f043 0310 	orr.w	r3, r3, #16
    b62a:	733b      	strb	r3, [r7, #12]
    b62c:	7b3b      	ldrb	r3, [r7, #12]
    b62e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b632:	733b      	strb	r3, [r7, #12]
    b634:	78bb      	ldrb	r3, [r7, #2]
    b636:	743b      	strb	r3, [r7, #16]
    b638:	2301      	movs	r3, #1
    b63a:	61bb      	str	r3, [r7, #24]
    b63c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b640:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b644:	7b5b      	ldrb	r3, [r3, #13]
    b646:	2b00      	cmp	r3, #0
    b648:	d003      	beq.n	b652 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b64a:	2100      	movs	r1, #0
    b64c:	6878      	ldr	r0, [r7, #4]
    b64e:	4b0a      	ldr	r3, [pc, #40]	; (b678 <n25q256a_read_reg+0x94>)
    b650:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b652:	f107 030c 	add.w	r3, r7, #12
    b656:	4619      	mov	r1, r3
    b658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b65a:	4b08      	ldr	r3, [pc, #32]	; (b67c <n25q256a_read_reg+0x98>)
    b65c:	4798      	blx	r3
	if (n25q->xip_mode) {
    b65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b660:	7b5b      	ldrb	r3, [r3, #13]
    b662:	2b00      	cmp	r3, #0
    b664:	d003      	beq.n	b66e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b666:	2101      	movs	r1, #1
    b668:	6878      	ldr	r0, [r7, #4]
    b66a:	4b03      	ldr	r3, [pc, #12]	; (b678 <n25q256a_read_reg+0x94>)
    b66c:	4798      	blx	r3
	}
	return status;
    b66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b670:	4618      	mov	r0, r3
    b672:	3730      	adds	r7, #48	; 0x30
    b674:	46bd      	mov	sp, r7
    b676:	bd80      	pop	{r7, pc}
    b678:	0000b519 	.word	0x0000b519
    b67c:	0000247d 	.word	0x0000247d

0000b680 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b680:	b580      	push	{r7, lr}
    b682:	b08c      	sub	sp, #48	; 0x30
    b684:	af00      	add	r7, sp, #0
    b686:	60f8      	str	r0, [r7, #12]
    b688:	607b      	str	r3, [r7, #4]
    b68a:	460b      	mov	r3, r1
    b68c:	72fb      	strb	r3, [r7, #11]
    b68e:	4613      	mov	r3, r2
    b690:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b692:	68fb      	ldr	r3, [r7, #12]
    b694:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b696:	68fb      	ldr	r3, [r7, #12]
    b698:	681b      	ldr	r3, [r3, #0]
    b69a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b69c:	f107 0310 	add.w	r3, r7, #16
    b6a0:	2200      	movs	r2, #0
    b6a2:	601a      	str	r2, [r3, #0]
    b6a4:	605a      	str	r2, [r3, #4]
    b6a6:	609a      	str	r2, [r3, #8]
    b6a8:	60da      	str	r2, [r3, #12]
    b6aa:	611a      	str	r2, [r3, #16]
    b6ac:	615a      	str	r2, [r3, #20]
    b6ae:	7afb      	ldrb	r3, [r7, #11]
    b6b0:	f003 0307 	and.w	r3, r3, #7
    b6b4:	b2da      	uxtb	r2, r3
    b6b6:	7c3b      	ldrb	r3, [r7, #16]
    b6b8:	f362 0302 	bfi	r3, r2, #0, #3
    b6bc:	743b      	strb	r3, [r7, #16]
    b6be:	7c3b      	ldrb	r3, [r7, #16]
    b6c0:	f043 0310 	orr.w	r3, r3, #16
    b6c4:	743b      	strb	r3, [r7, #16]
    b6c6:	7c3b      	ldrb	r3, [r7, #16]
    b6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b6cc:	743b      	strb	r3, [r7, #16]
    b6ce:	7c7b      	ldrb	r3, [r7, #17]
    b6d0:	2202      	movs	r2, #2
    b6d2:	f362 1305 	bfi	r3, r2, #4, #2
    b6d6:	747b      	strb	r3, [r7, #17]
    b6d8:	7abb      	ldrb	r3, [r7, #10]
    b6da:	753b      	strb	r3, [r7, #20]
    b6dc:	2301      	movs	r3, #1
    b6de:	61fb      	str	r3, [r7, #28]
    b6e0:	1d3b      	adds	r3, r7, #4
    b6e2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6e6:	7b5b      	ldrb	r3, [r3, #13]
    b6e8:	2b00      	cmp	r3, #0
    b6ea:	d003      	beq.n	b6f4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b6ec:	2100      	movs	r1, #0
    b6ee:	68f8      	ldr	r0, [r7, #12]
    b6f0:	4b09      	ldr	r3, [pc, #36]	; (b718 <n25q256a_write_reg+0x98>)
    b6f2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b6f4:	f107 0310 	add.w	r3, r7, #16
    b6f8:	4619      	mov	r1, r3
    b6fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b6fc:	4b07      	ldr	r3, [pc, #28]	; (b71c <n25q256a_write_reg+0x9c>)
    b6fe:	4798      	blx	r3
	if (n25q->xip_mode) {
    b700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b702:	7b5b      	ldrb	r3, [r3, #13]
    b704:	2b00      	cmp	r3, #0
    b706:	d003      	beq.n	b710 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b708:	2101      	movs	r1, #1
    b70a:	68f8      	ldr	r0, [r7, #12]
    b70c:	4b02      	ldr	r3, [pc, #8]	; (b718 <n25q256a_write_reg+0x98>)
    b70e:	4798      	blx	r3
	}
}
    b710:	bf00      	nop
    b712:	3730      	adds	r7, #48	; 0x30
    b714:	46bd      	mov	sp, r7
    b716:	bd80      	pop	{r7, pc}
    b718:	0000b519 	.word	0x0000b519
    b71c:	0000247d 	.word	0x0000247d

0000b720 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b720:	b580      	push	{r7, lr}
    b722:	b090      	sub	sp, #64	; 0x40
    b724:	af00      	add	r7, sp, #0
    b726:	6078      	str	r0, [r7, #4]
    b728:	460b      	mov	r3, r1
    b72a:	70fb      	strb	r3, [r7, #3]
    b72c:	4613      	mov	r3, r2
    b72e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b730:	687b      	ldr	r3, [r7, #4]
    b732:	681b      	ldr	r3, [r3, #0]
    b734:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b736:	78bb      	ldrb	r3, [r7, #2]
    b738:	2b00      	cmp	r3, #0
    b73a:	d001      	beq.n	b740 <n25q256a_write_enable+0x20>
    b73c:	2306      	movs	r3, #6
    b73e:	e000      	b.n	b742 <n25q256a_write_enable+0x22>
    b740:	2304      	movs	r3, #4
    b742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b746:	f107 0320 	add.w	r3, r7, #32
    b74a:	2200      	movs	r2, #0
    b74c:	601a      	str	r2, [r3, #0]
    b74e:	605a      	str	r2, [r3, #4]
    b750:	609a      	str	r2, [r3, #8]
    b752:	60da      	str	r2, [r3, #12]
    b754:	611a      	str	r2, [r3, #16]
    b756:	615a      	str	r2, [r3, #20]
    b758:	78fb      	ldrb	r3, [r7, #3]
    b75a:	f003 0307 	and.w	r3, r3, #7
    b75e:	b2da      	uxtb	r2, r3
    b760:	f897 3020 	ldrb.w	r3, [r7, #32]
    b764:	f362 0302 	bfi	r3, r2, #0, #3
    b768:	f887 3020 	strb.w	r3, [r7, #32]
    b76c:	f897 3020 	ldrb.w	r3, [r7, #32]
    b770:	f043 0310 	orr.w	r3, r3, #16
    b774:	f887 3020 	strb.w	r3, [r7, #32]
    b778:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b77c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b780:	f107 0308 	add.w	r3, r7, #8
    b784:	2200      	movs	r2, #0
    b786:	601a      	str	r2, [r3, #0]
    b788:	605a      	str	r2, [r3, #4]
    b78a:	609a      	str	r2, [r3, #8]
    b78c:	60da      	str	r2, [r3, #12]
    b78e:	611a      	str	r2, [r3, #16]
    b790:	615a      	str	r2, [r3, #20]
    b792:	78fb      	ldrb	r3, [r7, #3]
    b794:	f003 0307 	and.w	r3, r3, #7
    b798:	b2da      	uxtb	r2, r3
    b79a:	7a3b      	ldrb	r3, [r7, #8]
    b79c:	f362 0302 	bfi	r3, r2, #0, #3
    b7a0:	723b      	strb	r3, [r7, #8]
    b7a2:	7a3b      	ldrb	r3, [r7, #8]
    b7a4:	f043 0310 	orr.w	r3, r3, #16
    b7a8:	723b      	strb	r3, [r7, #8]
    b7aa:	7a3b      	ldrb	r3, [r7, #8]
    b7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b7b0:	723b      	strb	r3, [r7, #8]
    b7b2:	2305      	movs	r3, #5
    b7b4:	733b      	strb	r3, [r7, #12]
    b7b6:	2301      	movs	r3, #1
    b7b8:	617b      	str	r3, [r7, #20]
    b7ba:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b7be:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b7c0:	f107 0320 	add.w	r3, r7, #32
    b7c4:	4619      	mov	r1, r3
    b7c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b7c8:	4b08      	ldr	r3, [pc, #32]	; (b7ec <n25q256a_write_enable+0xcc>)
    b7ca:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b7cc:	f107 0308 	add.w	r3, r7, #8
    b7d0:	4619      	mov	r1, r3
    b7d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b7d4:	4b05      	ldr	r3, [pc, #20]	; (b7ec <n25q256a_write_enable+0xcc>)
    b7d6:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b7d8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b7dc:	f003 0302 	and.w	r3, r3, #2
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d0ed      	beq.n	b7c0 <n25q256a_write_enable+0xa0>
}
    b7e4:	bf00      	nop
    b7e6:	3740      	adds	r7, #64	; 0x40
    b7e8:	46bd      	mov	sp, r7
    b7ea:	bd80      	pop	{r7, pc}
    b7ec:	0000247d 	.word	0x0000247d

0000b7f0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b7f0:	b590      	push	{r4, r7, lr}
    b7f2:	b087      	sub	sp, #28
    b7f4:	af00      	add	r7, sp, #0
    b7f6:	6078      	str	r0, [r7, #4]
    b7f8:	460b      	mov	r3, r1
    b7fa:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b7fc:	687b      	ldr	r3, [r7, #4]
    b7fe:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b800:	68fb      	ldr	r3, [r7, #12]
    b802:	7b1b      	ldrb	r3, [r3, #12]
    b804:	2b00      	cmp	r3, #0
    b806:	d001      	beq.n	b80c <n25q256a_switch_mode+0x1c>
    b808:	2306      	movs	r3, #6
    b80a:	e000      	b.n	b80e <n25q256a_switch_mode+0x1e>
    b80c:	2300      	movs	r3, #0
    b80e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b810:	7afb      	ldrb	r3, [r7, #11]
    b812:	2265      	movs	r2, #101	; 0x65
    b814:	4619      	mov	r1, r3
    b816:	6878      	ldr	r0, [r7, #4]
    b818:	4b25      	ldr	r3, [pc, #148]	; (b8b0 <n25q256a_switch_mode+0xc0>)
    b81a:	4798      	blx	r3
    b81c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b81e:	2300      	movs	r3, #0
    b820:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b822:	68fb      	ldr	r3, [r7, #12]
    b824:	7b1b      	ldrb	r3, [r3, #12]
    b826:	78fa      	ldrb	r2, [r7, #3]
    b828:	429a      	cmp	r2, r3
    b82a:	d03d      	beq.n	b8a8 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b82c:	78fb      	ldrb	r3, [r7, #3]
    b82e:	2b00      	cmp	r3, #0
    b830:	d00b      	beq.n	b84a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b832:	697b      	ldr	r3, [r7, #20]
    b834:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b838:	2b00      	cmp	r3, #0
    b83a:	d011      	beq.n	b860 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b83c:	697b      	ldr	r3, [r7, #20]
    b83e:	f003 031f 	and.w	r3, r3, #31
    b842:	617b      	str	r3, [r7, #20]
			modify = 1;
    b844:	2301      	movs	r3, #1
    b846:	74fb      	strb	r3, [r7, #19]
    b848:	e00a      	b.n	b860 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b84a:	697b      	ldr	r3, [r7, #20]
    b84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b850:	2b00      	cmp	r3, #0
    b852:	d105      	bne.n	b860 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b854:	697b      	ldr	r3, [r7, #20]
    b856:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b85a:	617b      	str	r3, [r7, #20]
			modify = 1;
    b85c:	2301      	movs	r3, #1
    b85e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b860:	7cfb      	ldrb	r3, [r7, #19]
    b862:	2b00      	cmp	r3, #0
    b864:	d021      	beq.n	b8aa <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b866:	68fb      	ldr	r3, [r7, #12]
    b868:	78fa      	ldrb	r2, [r7, #3]
    b86a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b86c:	7afb      	ldrb	r3, [r7, #11]
    b86e:	2201      	movs	r2, #1
    b870:	4619      	mov	r1, r3
    b872:	6878      	ldr	r0, [r7, #4]
    b874:	4b0f      	ldr	r3, [pc, #60]	; (b8b4 <n25q256a_switch_mode+0xc4>)
    b876:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b878:	7af9      	ldrb	r1, [r7, #11]
    b87a:	697b      	ldr	r3, [r7, #20]
    b87c:	2261      	movs	r2, #97	; 0x61
    b87e:	6878      	ldr	r0, [r7, #4]
    b880:	4c0d      	ldr	r4, [pc, #52]	; (b8b8 <n25q256a_switch_mode+0xc8>)
    b882:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b884:	78fb      	ldrb	r3, [r7, #3]
    b886:	2b00      	cmp	r3, #0
    b888:	d001      	beq.n	b88e <n25q256a_switch_mode+0x9e>
    b88a:	2306      	movs	r3, #6
    b88c:	e000      	b.n	b890 <n25q256a_switch_mode+0xa0>
    b88e:	2300      	movs	r3, #0
    b890:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b892:	7afb      	ldrb	r3, [r7, #11]
    b894:	2265      	movs	r2, #101	; 0x65
    b896:	4619      	mov	r1, r3
    b898:	6878      	ldr	r0, [r7, #4]
    b89a:	4b05      	ldr	r3, [pc, #20]	; (b8b0 <n25q256a_switch_mode+0xc0>)
    b89c:	4798      	blx	r3
    b89e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b8a0:	68fb      	ldr	r3, [r7, #12]
    b8a2:	78fa      	ldrb	r2, [r7, #3]
    b8a4:	731a      	strb	r2, [r3, #12]
    b8a6:	e000      	b.n	b8aa <n25q256a_switch_mode+0xba>
		return;
    b8a8:	bf00      	nop
	}
}
    b8aa:	371c      	adds	r7, #28
    b8ac:	46bd      	mov	sp, r7
    b8ae:	bd90      	pop	{r4, r7, pc}
    b8b0:	0000b5e5 	.word	0x0000b5e5
    b8b4:	0000b721 	.word	0x0000b721
    b8b8:	0000b681 	.word	0x0000b681

0000b8bc <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b8bc:	b580      	push	{r7, lr}
    b8be:	b086      	sub	sp, #24
    b8c0:	af00      	add	r7, sp, #0
    b8c2:	60f8      	str	r0, [r7, #12]
    b8c4:	60b9      	str	r1, [r7, #8]
    b8c6:	607a      	str	r2, [r7, #4]
    b8c8:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b8ca:	68fb      	ldr	r3, [r7, #12]
    b8cc:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b8ce:	4a0c      	ldr	r2, [pc, #48]	; (b900 <n25q256a_construct+0x44>)
    b8d0:	68b9      	ldr	r1, [r7, #8]
    b8d2:	68f8      	ldr	r0, [r7, #12]
    b8d4:	4b0b      	ldr	r3, [pc, #44]	; (b904 <n25q256a_construct+0x48>)
    b8d6:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b8d8:	697b      	ldr	r3, [r7, #20]
    b8da:	2200      	movs	r2, #0
    b8dc:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b8de:	697b      	ldr	r3, [r7, #20]
    b8e0:	2200      	movs	r2, #0
    b8e2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b8e4:	697b      	ldr	r3, [r7, #20]
    b8e6:	687a      	ldr	r2, [r7, #4]
    b8e8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b8ea:	78fb      	ldrb	r3, [r7, #3]
    b8ec:	4619      	mov	r1, r3
    b8ee:	68f8      	ldr	r0, [r7, #12]
    b8f0:	4b05      	ldr	r3, [pc, #20]	; (b908 <n25q256a_construct+0x4c>)
    b8f2:	4798      	blx	r3
	return me;
    b8f4:	68fb      	ldr	r3, [r7, #12]
}
    b8f6:	4618      	mov	r0, r3
    b8f8:	3718      	adds	r7, #24
    b8fa:	46bd      	mov	sp, r7
    b8fc:	bd80      	pop	{r7, pc}
    b8fe:	bf00      	nop
    b900:	0000f0d0 	.word	0x0000f0d0
    b904:	0000bd99 	.word	0x0000bd99
    b908:	0000b7f1 	.word	0x0000b7f1

0000b90c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b90c:	b580      	push	{r7, lr}
    b90e:	b08c      	sub	sp, #48	; 0x30
    b910:	af00      	add	r7, sp, #0
    b912:	60f8      	str	r0, [r7, #12]
    b914:	60b9      	str	r1, [r7, #8]
    b916:	607a      	str	r2, [r7, #4]
    b918:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b91a:	68fb      	ldr	r3, [r7, #12]
    b91c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b91e:	68fb      	ldr	r3, [r7, #12]
    b920:	681b      	ldr	r3, [r3, #0]
    b922:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b924:	f107 0310 	add.w	r3, r7, #16
    b928:	2200      	movs	r2, #0
    b92a:	601a      	str	r2, [r3, #0]
    b92c:	605a      	str	r2, [r3, #4]
    b92e:	609a      	str	r2, [r3, #8]
    b930:	60da      	str	r2, [r3, #12]
    b932:	611a      	str	r2, [r3, #16]
    b934:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b938:	7b1b      	ldrb	r3, [r3, #12]
    b93a:	2b00      	cmp	r3, #0
    b93c:	d001      	beq.n	b942 <n25q256a_read+0x36>
    b93e:	2206      	movs	r2, #6
    b940:	e000      	b.n	b944 <n25q256a_read+0x38>
    b942:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b944:	7c3b      	ldrb	r3, [r7, #16]
    b946:	f362 0302 	bfi	r3, r2, #0, #3
    b94a:	743b      	strb	r3, [r7, #16]
    b94c:	7c3b      	ldrb	r3, [r7, #16]
    b94e:	f043 0310 	orr.w	r3, r3, #16
    b952:	743b      	strb	r3, [r7, #16]
    b954:	7c3b      	ldrb	r3, [r7, #16]
    b956:	f043 0320 	orr.w	r3, r3, #32
    b95a:	743b      	strb	r3, [r7, #16]
    b95c:	7c3b      	ldrb	r3, [r7, #16]
    b95e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b962:	743b      	strb	r3, [r7, #16]
    b964:	7c7b      	ldrb	r3, [r7, #17]
    b966:	2201      	movs	r2, #1
    b968:	f362 1305 	bfi	r3, r2, #4, #2
    b96c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b970:	7b1b      	ldrb	r3, [r3, #12]
    b972:	2b00      	cmp	r3, #0
    b974:	d001      	beq.n	b97a <n25q256a_read+0x6e>
    b976:	220a      	movs	r2, #10
    b978:	e000      	b.n	b97c <n25q256a_read+0x70>
    b97a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b97c:	7cbb      	ldrb	r3, [r7, #18]
    b97e:	f362 0304 	bfi	r3, r2, #0, #5
    b982:	74bb      	strb	r3, [r7, #18]
    b984:	230b      	movs	r3, #11
    b986:	753b      	strb	r3, [r7, #20]
    b988:	687b      	ldr	r3, [r7, #4]
    b98a:	61bb      	str	r3, [r7, #24]
    b98c:	683b      	ldr	r3, [r7, #0]
    b98e:	61fb      	str	r3, [r7, #28]
    b990:	68bb      	ldr	r3, [r7, #8]
    b992:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b994:	f107 0310 	add.w	r3, r7, #16
    b998:	4619      	mov	r1, r3
    b99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b99c:	4b03      	ldr	r3, [pc, #12]	; (b9ac <n25q256a_read+0xa0>)
    b99e:	4798      	blx	r3
	return ERR_NONE;
    b9a0:	2300      	movs	r3, #0
}
    b9a2:	4618      	mov	r0, r3
    b9a4:	3730      	adds	r7, #48	; 0x30
    b9a6:	46bd      	mov	sp, r7
    b9a8:	bd80      	pop	{r7, pc}
    b9aa:	bf00      	nop
    b9ac:	0000247d 	.word	0x0000247d

0000b9b0 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b9b0:	b580      	push	{r7, lr}
    b9b2:	b08c      	sub	sp, #48	; 0x30
    b9b4:	af00      	add	r7, sp, #0
    b9b6:	60f8      	str	r0, [r7, #12]
    b9b8:	60b9      	str	r1, [r7, #8]
    b9ba:	607a      	str	r2, [r7, #4]
    b9bc:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b9be:	68fb      	ldr	r3, [r7, #12]
    b9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b9c2:	68fb      	ldr	r3, [r7, #12]
    b9c4:	681b      	ldr	r3, [r3, #0]
    b9c6:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b9c8:	f107 0310 	add.w	r3, r7, #16
    b9cc:	2200      	movs	r2, #0
    b9ce:	601a      	str	r2, [r3, #0]
    b9d0:	605a      	str	r2, [r3, #4]
    b9d2:	609a      	str	r2, [r3, #8]
    b9d4:	60da      	str	r2, [r3, #12]
    b9d6:	611a      	str	r2, [r3, #16]
    b9d8:	615a      	str	r2, [r3, #20]
    b9da:	7c3b      	ldrb	r3, [r7, #16]
    b9dc:	f043 0310 	orr.w	r3, r3, #16
    b9e0:	743b      	strb	r3, [r7, #16]
    b9e2:	7c3b      	ldrb	r3, [r7, #16]
    b9e4:	f043 0320 	orr.w	r3, r3, #32
    b9e8:	743b      	strb	r3, [r7, #16]
    b9ea:	7c3b      	ldrb	r3, [r7, #16]
    b9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b9f0:	743b      	strb	r3, [r7, #16]
    b9f2:	7c7b      	ldrb	r3, [r7, #17]
    b9f4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b9f8:	747b      	strb	r3, [r7, #17]
    b9fa:	2302      	movs	r3, #2
    b9fc:	753b      	strb	r3, [r7, #20]
    b9fe:	687b      	ldr	r3, [r7, #4]
    ba00:	61bb      	str	r3, [r7, #24]
    ba02:	683b      	ldr	r3, [r7, #0]
    ba04:	61fb      	str	r3, [r7, #28]
    ba06:	68bb      	ldr	r3, [r7, #8]
    ba08:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ba0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba0c:	7b1b      	ldrb	r3, [r3, #12]
    ba0e:	2b00      	cmp	r3, #0
    ba10:	d001      	beq.n	ba16 <n25q256a_write+0x66>
    ba12:	2206      	movs	r2, #6
    ba14:	e000      	b.n	ba18 <n25q256a_write+0x68>
    ba16:	2200      	movs	r2, #0
    ba18:	7c3b      	ldrb	r3, [r7, #16]
    ba1a:	f362 0302 	bfi	r3, r2, #0, #3
    ba1e:	743b      	strb	r3, [r7, #16]
	while (length) {
    ba20:	e035      	b.n	ba8e <n25q256a_write+0xde>
		cmd.address = address;
    ba22:	687b      	ldr	r3, [r7, #4]
    ba24:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ba26:	683b      	ldr	r3, [r7, #0]
    ba28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ba2c:	d802      	bhi.n	ba34 <n25q256a_write+0x84>
			cmd.buf_len = length;
    ba2e:	683b      	ldr	r3, [r7, #0]
    ba30:	61fb      	str	r3, [r7, #28]
    ba32:	e002      	b.n	ba3a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    ba34:	f44f 7380 	mov.w	r3, #256	; 0x100
    ba38:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ba3a:	7c3b      	ldrb	r3, [r7, #16]
    ba3c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba40:	b2db      	uxtb	r3, r3
    ba42:	2201      	movs	r2, #1
    ba44:	4619      	mov	r1, r3
    ba46:	68f8      	ldr	r0, [r7, #12]
    ba48:	4b19      	ldr	r3, [pc, #100]	; (bab0 <n25q256a_write+0x100>)
    ba4a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    ba4c:	f107 0310 	add.w	r3, r7, #16
    ba50:	4619      	mov	r1, r3
    ba52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ba54:	4b17      	ldr	r3, [pc, #92]	; (bab4 <n25q256a_write+0x104>)
    ba56:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ba58:	bf00      	nop
    ba5a:	7c3b      	ldrb	r3, [r7, #16]
    ba5c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba60:	b2db      	uxtb	r3, r3
    ba62:	2270      	movs	r2, #112	; 0x70
    ba64:	4619      	mov	r1, r3
    ba66:	68f8      	ldr	r0, [r7, #12]
    ba68:	4b13      	ldr	r3, [pc, #76]	; (bab8 <n25q256a_write+0x108>)
    ba6a:	4798      	blx	r3
    ba6c:	4603      	mov	r3, r0
    ba6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ba72:	2b00      	cmp	r3, #0
    ba74:	d0f1      	beq.n	ba5a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    ba76:	6a3a      	ldr	r2, [r7, #32]
    ba78:	69fb      	ldr	r3, [r7, #28]
    ba7a:	4413      	add	r3, r2
    ba7c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    ba7e:	69fb      	ldr	r3, [r7, #28]
    ba80:	683a      	ldr	r2, [r7, #0]
    ba82:	1ad3      	subs	r3, r2, r3
    ba84:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    ba86:	69fb      	ldr	r3, [r7, #28]
    ba88:	687a      	ldr	r2, [r7, #4]
    ba8a:	4413      	add	r3, r2
    ba8c:	607b      	str	r3, [r7, #4]
	while (length) {
    ba8e:	683b      	ldr	r3, [r7, #0]
    ba90:	2b00      	cmp	r3, #0
    ba92:	d1c6      	bne.n	ba22 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    ba94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba96:	7b5b      	ldrb	r3, [r3, #13]
    ba98:	2b00      	cmp	r3, #0
    ba9a:	d003      	beq.n	baa4 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    ba9c:	2101      	movs	r1, #1
    ba9e:	68f8      	ldr	r0, [r7, #12]
    baa0:	4b06      	ldr	r3, [pc, #24]	; (babc <n25q256a_write+0x10c>)
    baa2:	4798      	blx	r3
	}
	return ERR_NONE;
    baa4:	2300      	movs	r3, #0
}
    baa6:	4618      	mov	r0, r3
    baa8:	3730      	adds	r7, #48	; 0x30
    baaa:	46bd      	mov	sp, r7
    baac:	bd80      	pop	{r7, pc}
    baae:	bf00      	nop
    bab0:	0000b721 	.word	0x0000b721
    bab4:	0000247d 	.word	0x0000247d
    bab8:	0000b5e5 	.word	0x0000b5e5
    babc:	0000b519 	.word	0x0000b519

0000bac0 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    bac0:	b580      	push	{r7, lr}
    bac2:	b090      	sub	sp, #64	; 0x40
    bac4:	af00      	add	r7, sp, #0
    bac6:	60f8      	str	r0, [r7, #12]
    bac8:	60b9      	str	r1, [r7, #8]
    baca:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bacc:	68fb      	ldr	r3, [r7, #12]
    bace:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bad0:	68fb      	ldr	r3, [r7, #12]
    bad2:	681b      	ldr	r3, [r3, #0]
    bad4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    bad6:	f107 0314 	add.w	r3, r7, #20
    bada:	2200      	movs	r2, #0
    badc:	601a      	str	r2, [r3, #0]
    bade:	605a      	str	r2, [r3, #4]
    bae0:	609a      	str	r2, [r3, #8]
    bae2:	60da      	str	r2, [r3, #12]
    bae4:	611a      	str	r2, [r3, #16]
    bae6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    baea:	7b1b      	ldrb	r3, [r3, #12]
    baec:	2b00      	cmp	r3, #0
    baee:	d001      	beq.n	baf4 <n25q256a_erase+0x34>
    baf0:	2206      	movs	r2, #6
    baf2:	e000      	b.n	baf6 <n25q256a_erase+0x36>
    baf4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    baf6:	7d3b      	ldrb	r3, [r7, #20]
    baf8:	f362 0302 	bfi	r3, r2, #0, #3
    bafc:	753b      	strb	r3, [r7, #20]
    bafe:	7d3b      	ldrb	r3, [r7, #20]
    bb00:	f043 0310 	orr.w	r3, r3, #16
    bb04:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    bb06:	687b      	ldr	r3, [r7, #4]
    bb08:	4a56      	ldr	r2, [pc, #344]	; (bc64 <n25q256a_erase+0x1a4>)
    bb0a:	4293      	cmp	r3, r2
    bb0c:	bf94      	ite	ls
    bb0e:	2301      	movls	r3, #1
    bb10:	2300      	movhi	r3, #0
    bb12:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    bb14:	7d3b      	ldrb	r3, [r7, #20]
    bb16:	f362 1345 	bfi	r3, r2, #5, #1
    bb1a:	753b      	strb	r3, [r7, #20]
    bb1c:	7d7b      	ldrb	r3, [r7, #21]
    bb1e:	2202      	movs	r2, #2
    bb20:	f362 1305 	bfi	r3, r2, #4, #2
    bb24:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    bb26:	68bb      	ldr	r3, [r7, #8]
    bb28:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    bb2a:	687b      	ldr	r3, [r7, #4]
    bb2c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    bb2e:	2300      	movs	r3, #0
    bb30:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    bb32:	687b      	ldr	r3, [r7, #4]
    bb34:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bb38:	2b00      	cmp	r3, #0
    bb3a:	d104      	bne.n	bb46 <n25q256a_erase+0x86>
    bb3c:	68bb      	ldr	r3, [r7, #8]
    bb3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bb42:	2b00      	cmp	r3, #0
    bb44:	d002      	beq.n	bb4c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    bb46:	f06f 030c 	mvn.w	r3, #12
    bb4a:	e087      	b.n	bc5c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    bb4c:	687b      	ldr	r3, [r7, #4]
    bb4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    bb52:	d368      	bcc.n	bc26 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    bb54:	23c7      	movs	r3, #199	; 0xc7
    bb56:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bb58:	7d3b      	ldrb	r3, [r7, #20]
    bb5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb5e:	b2db      	uxtb	r3, r3
    bb60:	2201      	movs	r2, #1
    bb62:	4619      	mov	r1, r3
    bb64:	68f8      	ldr	r0, [r7, #12]
    bb66:	4b40      	ldr	r3, [pc, #256]	; (bc68 <n25q256a_erase+0x1a8>)
    bb68:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    bb6a:	f107 0314 	add.w	r3, r7, #20
    bb6e:	4619      	mov	r1, r3
    bb70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bb72:	4b3e      	ldr	r3, [pc, #248]	; (bc6c <n25q256a_erase+0x1ac>)
    bb74:	4798      	blx	r3
    bb76:	e059      	b.n	bc2c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    bb78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb7a:	b29b      	uxth	r3, r3
    bb7c:	2b00      	cmp	r3, #0
    bb7e:	d11f      	bne.n	bbc0 <n25q256a_erase+0x100>
    bb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bb86:	d31b      	bcc.n	bbc0 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    bb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb8a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    bb8c:	23d8      	movs	r3, #216	; 0xd8
    bb8e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bb90:	7d3b      	ldrb	r3, [r7, #20]
    bb92:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb96:	b2db      	uxtb	r3, r3
    bb98:	2201      	movs	r2, #1
    bb9a:	4619      	mov	r1, r3
    bb9c:	68f8      	ldr	r0, [r7, #12]
    bb9e:	4b32      	ldr	r3, [pc, #200]	; (bc68 <n25q256a_erase+0x1a8>)
    bba0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bba2:	f107 0314 	add.w	r3, r7, #20
    bba6:	4619      	mov	r1, r3
    bba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bbaa:	4b30      	ldr	r3, [pc, #192]	; (bc6c <n25q256a_erase+0x1ac>)
    bbac:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    bbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbb0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    bbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    bbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbb8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    bbbc:	63bb      	str	r3, [r7, #56]	; 0x38
    bbbe:	e023      	b.n	bc08 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    bbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    bbc6:	d31b      	bcc.n	bc00 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    bbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbca:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    bbcc:	2320      	movs	r3, #32
    bbce:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bbd0:	7d3b      	ldrb	r3, [r7, #20]
    bbd2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bbd6:	b2db      	uxtb	r3, r3
    bbd8:	2201      	movs	r2, #1
    bbda:	4619      	mov	r1, r3
    bbdc:	68f8      	ldr	r0, [r7, #12]
    bbde:	4b22      	ldr	r3, [pc, #136]	; (bc68 <n25q256a_erase+0x1a8>)
    bbe0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bbe2:	f107 0314 	add.w	r3, r7, #20
    bbe6:	4619      	mov	r1, r3
    bbe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bbea:	4b20      	ldr	r3, [pc, #128]	; (bc6c <n25q256a_erase+0x1ac>)
    bbec:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    bbee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    bbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbf8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bbfc:	63bb      	str	r3, [r7, #56]	; 0x38
    bbfe:	e003      	b.n	bc08 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    bc00:	f06f 030c 	mvn.w	r3, #12
    bc04:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    bc06:	e011      	b.n	bc2c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bc08:	bf00      	nop
    bc0a:	7d3b      	ldrb	r3, [r7, #20]
    bc0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc10:	b2db      	uxtb	r3, r3
    bc12:	2270      	movs	r2, #112	; 0x70
    bc14:	4619      	mov	r1, r3
    bc16:	68f8      	ldr	r0, [r7, #12]
    bc18:	4b15      	ldr	r3, [pc, #84]	; (bc70 <n25q256a_erase+0x1b0>)
    bc1a:	4798      	blx	r3
    bc1c:	4603      	mov	r3, r0
    bc1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc22:	2b00      	cmp	r3, #0
    bc24:	d0f1      	beq.n	bc0a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    bc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc28:	2b00      	cmp	r3, #0
    bc2a:	d1a5      	bne.n	bb78 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bc2c:	bf00      	nop
    bc2e:	7d3b      	ldrb	r3, [r7, #20]
    bc30:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc34:	b2db      	uxtb	r3, r3
    bc36:	2270      	movs	r2, #112	; 0x70
    bc38:	4619      	mov	r1, r3
    bc3a:	68f8      	ldr	r0, [r7, #12]
    bc3c:	4b0c      	ldr	r3, [pc, #48]	; (bc70 <n25q256a_erase+0x1b0>)
    bc3e:	4798      	blx	r3
    bc40:	4603      	mov	r3, r0
    bc42:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc46:	2b00      	cmp	r3, #0
    bc48:	d0f1      	beq.n	bc2e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bc4c:	7b5b      	ldrb	r3, [r3, #13]
    bc4e:	2b00      	cmp	r3, #0
    bc50:	d003      	beq.n	bc5a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    bc52:	2101      	movs	r1, #1
    bc54:	68f8      	ldr	r0, [r7, #12]
    bc56:	4b07      	ldr	r3, [pc, #28]	; (bc74 <n25q256a_erase+0x1b4>)
    bc58:	4798      	blx	r3
	}
	return rc;
    bc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    bc5c:	4618      	mov	r0, r3
    bc5e:	3740      	adds	r7, #64	; 0x40
    bc60:	46bd      	mov	sp, r7
    bc62:	bd80      	pop	{r7, pc}
    bc64:	001fffff 	.word	0x001fffff
    bc68:	0000b721 	.word	0x0000b721
    bc6c:	0000247d 	.word	0x0000247d
    bc70:	0000b5e5 	.word	0x0000b5e5
    bc74:	0000b519 	.word	0x0000b519

0000bc78 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    bc78:	b590      	push	{r4, r7, lr}
    bc7a:	b085      	sub	sp, #20
    bc7c:	af00      	add	r7, sp, #0
    bc7e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    bc80:	687b      	ldr	r3, [r7, #4]
    bc82:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bc84:	68fb      	ldr	r3, [r7, #12]
    bc86:	7b1b      	ldrb	r3, [r3, #12]
    bc88:	2b00      	cmp	r3, #0
    bc8a:	d001      	beq.n	bc90 <n25q256a_enable_xip+0x18>
    bc8c:	2306      	movs	r3, #6
    bc8e:	e000      	b.n	bc92 <n25q256a_enable_xip+0x1a>
    bc90:	2300      	movs	r3, #0
    bc92:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    bc94:	68fb      	ldr	r3, [r7, #12]
    bc96:	7b5b      	ldrb	r3, [r3, #13]
    bc98:	2b00      	cmp	r3, #0
    bc9a:	d129      	bne.n	bcf0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bc9c:	7afb      	ldrb	r3, [r7, #11]
    bc9e:	2285      	movs	r2, #133	; 0x85
    bca0:	4619      	mov	r1, r3
    bca2:	6878      	ldr	r0, [r7, #4]
    bca4:	4b15      	ldr	r3, [pc, #84]	; (bcfc <n25q256a_enable_xip+0x84>)
    bca6:	4798      	blx	r3
    bca8:	4603      	mov	r3, r0
    bcaa:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    bcac:	7abb      	ldrb	r3, [r7, #10]
    bcae:	f003 0308 	and.w	r3, r3, #8
    bcb2:	2b00      	cmp	r3, #0
    bcb4:	d015      	beq.n	bce2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    bcb6:	7abb      	ldrb	r3, [r7, #10]
    bcb8:	f023 0308 	bic.w	r3, r3, #8
    bcbc:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    bcbe:	7abb      	ldrb	r3, [r7, #10]
    bcc0:	7af9      	ldrb	r1, [r7, #11]
    bcc2:	2281      	movs	r2, #129	; 0x81
    bcc4:	6878      	ldr	r0, [r7, #4]
    bcc6:	4c0e      	ldr	r4, [pc, #56]	; (bd00 <n25q256a_enable_xip+0x88>)
    bcc8:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bcca:	bf00      	nop
    bccc:	7afb      	ldrb	r3, [r7, #11]
    bcce:	2270      	movs	r2, #112	; 0x70
    bcd0:	4619      	mov	r1, r3
    bcd2:	6878      	ldr	r0, [r7, #4]
    bcd4:	4b09      	ldr	r3, [pc, #36]	; (bcfc <n25q256a_enable_xip+0x84>)
    bcd6:	4798      	blx	r3
    bcd8:	4603      	mov	r3, r0
    bcda:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bcde:	2b00      	cmp	r3, #0
    bce0:	d0f4      	beq.n	bccc <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    bce2:	68fb      	ldr	r3, [r7, #12]
    bce4:	2201      	movs	r2, #1
    bce6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    bce8:	2101      	movs	r1, #1
    bcea:	6878      	ldr	r0, [r7, #4]
    bcec:	4b05      	ldr	r3, [pc, #20]	; (bd04 <n25q256a_enable_xip+0x8c>)
    bcee:	4798      	blx	r3
	}
	return ERR_NONE;
    bcf0:	2300      	movs	r3, #0
}
    bcf2:	4618      	mov	r0, r3
    bcf4:	3714      	adds	r7, #20
    bcf6:	46bd      	mov	sp, r7
    bcf8:	bd90      	pop	{r4, r7, pc}
    bcfa:	bf00      	nop
    bcfc:	0000b5e5 	.word	0x0000b5e5
    bd00:	0000b681 	.word	0x0000b681
    bd04:	0000b519 	.word	0x0000b519

0000bd08 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    bd08:	b580      	push	{r7, lr}
    bd0a:	b086      	sub	sp, #24
    bd0c:	af00      	add	r7, sp, #0
    bd0e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bd10:	687b      	ldr	r3, [r7, #4]
    bd12:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bd14:	687b      	ldr	r3, [r7, #4]
    bd16:	681b      	ldr	r3, [r3, #0]
    bd18:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bd1a:	697b      	ldr	r3, [r7, #20]
    bd1c:	7b1b      	ldrb	r3, [r3, #12]
    bd1e:	2b00      	cmp	r3, #0
    bd20:	d001      	beq.n	bd26 <n25q256a_disable_xip+0x1e>
    bd22:	2306      	movs	r3, #6
    bd24:	e000      	b.n	bd28 <n25q256a_disable_xip+0x20>
    bd26:	2300      	movs	r3, #0
    bd28:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    bd2a:	2100      	movs	r1, #0
    bd2c:	6878      	ldr	r0, [r7, #4]
    bd2e:	4b15      	ldr	r3, [pc, #84]	; (bd84 <n25q256a_disable_xip+0x7c>)
    bd30:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bd32:	7bfb      	ldrb	r3, [r7, #15]
    bd34:	2285      	movs	r2, #133	; 0x85
    bd36:	4619      	mov	r1, r3
    bd38:	6878      	ldr	r0, [r7, #4]
    bd3a:	4b13      	ldr	r3, [pc, #76]	; (bd88 <n25q256a_disable_xip+0x80>)
    bd3c:	4798      	blx	r3
    bd3e:	4603      	mov	r3, r0
    bd40:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    bd42:	7bbb      	ldrb	r3, [r7, #14]
    bd44:	f003 0308 	and.w	r3, r3, #8
    bd48:	2b00      	cmp	r3, #0
    bd4a:	d113      	bne.n	bd74 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    bd4c:	697b      	ldr	r3, [r7, #20]
    bd4e:	689b      	ldr	r3, [r3, #8]
    bd50:	2b00      	cmp	r3, #0
    bd52:	d00f      	beq.n	bd74 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    bd54:	693b      	ldr	r3, [r7, #16]
    bd56:	681b      	ldr	r3, [r3, #0]
    bd58:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    bd5a:	6938      	ldr	r0, [r7, #16]
    bd5c:	4b0b      	ldr	r3, [pc, #44]	; (bd8c <n25q256a_disable_xip+0x84>)
    bd5e:	4798      	blx	r3
			n25q->pin_exit_xip();
    bd60:	697b      	ldr	r3, [r7, #20]
    bd62:	689b      	ldr	r3, [r3, #8]
    bd64:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    bd66:	68b9      	ldr	r1, [r7, #8]
    bd68:	6938      	ldr	r0, [r7, #16]
    bd6a:	4b09      	ldr	r3, [pc, #36]	; (bd90 <n25q256a_disable_xip+0x88>)
    bd6c:	4798      	blx	r3
			qspi_sync_enable(descr);
    bd6e:	6938      	ldr	r0, [r7, #16]
    bd70:	4b08      	ldr	r3, [pc, #32]	; (bd94 <n25q256a_disable_xip+0x8c>)
    bd72:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bd74:	697b      	ldr	r3, [r7, #20]
    bd76:	2200      	movs	r2, #0
    bd78:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bd7a:	2300      	movs	r3, #0
}
    bd7c:	4618      	mov	r0, r3
    bd7e:	3718      	adds	r7, #24
    bd80:	46bd      	mov	sp, r7
    bd82:	bd80      	pop	{r7, pc}
    bd84:	0000b519 	.word	0x0000b519
    bd88:	0000b5e5 	.word	0x0000b5e5
    bd8c:	00002441 	.word	0x00002441
    bd90:	000023b9 	.word	0x000023b9
    bd94:	00002405 	.word	0x00002405

0000bd98 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    bd98:	b480      	push	{r7}
    bd9a:	b085      	sub	sp, #20
    bd9c:	af00      	add	r7, sp, #0
    bd9e:	60f8      	str	r0, [r7, #12]
    bda0:	60b9      	str	r1, [r7, #8]
    bda2:	607a      	str	r2, [r7, #4]
	me->io        = io;
    bda4:	68fb      	ldr	r3, [r7, #12]
    bda6:	68ba      	ldr	r2, [r7, #8]
    bda8:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    bdaa:	68fb      	ldr	r3, [r7, #12]
    bdac:	687a      	ldr	r2, [r7, #4]
    bdae:	605a      	str	r2, [r3, #4]

	return me;
    bdb0:	68fb      	ldr	r3, [r7, #12]
}
    bdb2:	4618      	mov	r0, r3
    bdb4:	3714      	adds	r7, #20
    bdb6:	46bd      	mov	sp, r7
    bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdbc:	4770      	bx	lr

0000bdbe <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    bdbe:	b480      	push	{r7}
    bdc0:	b083      	sub	sp, #12
    bdc2:	af00      	add	r7, sp, #0
    bdc4:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bdc6:	687b      	ldr	r3, [r7, #4]
    bdc8:	781b      	ldrb	r3, [r3, #0]
    bdca:	b29a      	uxth	r2, r3
    bdcc:	687b      	ldr	r3, [r7, #4]
    bdce:	3301      	adds	r3, #1
    bdd0:	781b      	ldrb	r3, [r3, #0]
    bdd2:	b29b      	uxth	r3, r3
    bdd4:	021b      	lsls	r3, r3, #8
    bdd6:	b29b      	uxth	r3, r3
    bdd8:	4413      	add	r3, r2
    bdda:	b29b      	uxth	r3, r3
}
    bddc:	4618      	mov	r0, r3
    bdde:	370c      	adds	r7, #12
    bde0:	46bd      	mov	sp, r7
    bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bde6:	4770      	bx	lr

0000bde8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    bde8:	b480      	push	{r7}
    bdea:	b083      	sub	sp, #12
    bdec:	af00      	add	r7, sp, #0
    bdee:	6078      	str	r0, [r7, #4]
	return desc[0];
    bdf0:	687b      	ldr	r3, [r7, #4]
    bdf2:	781b      	ldrb	r3, [r3, #0]
}
    bdf4:	4618      	mov	r0, r3
    bdf6:	370c      	adds	r7, #12
    bdf8:	46bd      	mov	sp, r7
    bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdfe:	4770      	bx	lr

0000be00 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    be00:	b580      	push	{r7, lr}
    be02:	b082      	sub	sp, #8
    be04:	af00      	add	r7, sp, #0
    be06:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    be08:	6878      	ldr	r0, [r7, #4]
    be0a:	4b05      	ldr	r3, [pc, #20]	; (be20 <usb_desc_next+0x20>)
    be0c:	4798      	blx	r3
    be0e:	4603      	mov	r3, r0
    be10:	461a      	mov	r2, r3
    be12:	687b      	ldr	r3, [r7, #4]
    be14:	4413      	add	r3, r2
}
    be16:	4618      	mov	r0, r3
    be18:	3708      	adds	r7, #8
    be1a:	46bd      	mov	sp, r7
    be1c:	bd80      	pop	{r7, pc}
    be1e:	bf00      	nop
    be20:	0000bde9 	.word	0x0000bde9

0000be24 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    be24:	b580      	push	{r7, lr}
    be26:	b08c      	sub	sp, #48	; 0x30
    be28:	af00      	add	r7, sp, #0
    be2a:	6078      	str	r0, [r7, #4]
    be2c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    be2e:	687b      	ldr	r3, [r7, #4]
    be30:	689b      	ldr	r3, [r3, #8]
    be32:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    be34:	683b      	ldr	r3, [r7, #0]
    be36:	681b      	ldr	r3, [r3, #0]
    be38:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    be3a:	2300      	movs	r3, #0
    be3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    be40:	e08f      	b.n	bf62 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    be42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be44:	2b00      	cmp	r3, #0
    be46:	d102      	bne.n	be4e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    be48:	f06f 0309 	mvn.w	r3, #9
    be4c:	e092      	b.n	bf74 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be50:	789b      	ldrb	r3, [r3, #2]
    be52:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    be54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be56:	795b      	ldrb	r3, [r3, #5]
    be58:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    be5a:	7c7b      	ldrb	r3, [r7, #17]
    be5c:	2b02      	cmp	r3, #2
    be5e:	d002      	beq.n	be66 <cdcdf_acm_enable+0x42>
    be60:	7c7b      	ldrb	r3, [r7, #17]
    be62:	2b0a      	cmp	r3, #10
    be64:	d121      	bne.n	beaa <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    be66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be6a:	6a3a      	ldr	r2, [r7, #32]
    be6c:	5cd2      	ldrb	r2, [r2, r3]
    be6e:	7bbb      	ldrb	r3, [r7, #14]
    be70:	429a      	cmp	r2, r3
    be72:	d102      	bne.n	be7a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    be74:	f06f 0311 	mvn.w	r3, #17
    be78:	e07c      	b.n	bf74 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    be7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be7e:	6a3a      	ldr	r2, [r7, #32]
    be80:	5cd3      	ldrb	r3, [r2, r3]
    be82:	2bff      	cmp	r3, #255	; 0xff
    be84:	d002      	beq.n	be8c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    be86:	f06f 031b 	mvn.w	r3, #27
    be8a:	e073      	b.n	bf74 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    be8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be90:	7bb9      	ldrb	r1, [r7, #14]
    be92:	6a3a      	ldr	r2, [r7, #32]
    be94:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    be96:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    be98:	683b      	ldr	r3, [r7, #0]
    be9a:	685b      	ldr	r3, [r3, #4]
    be9c:	2205      	movs	r2, #5
    be9e:	4619      	mov	r1, r3
    bea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bea2:	4b36      	ldr	r3, [pc, #216]	; (bf7c <cdcdf_acm_enable+0x158>)
    bea4:	4798      	blx	r3
    bea6:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bea8:	e047      	b.n	bf3a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    beaa:	f06f 0309 	mvn.w	r3, #9
    beae:	e061      	b.n	bf74 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    beb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    beb2:	789b      	ldrb	r3, [r3, #2]
    beb4:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    beb8:	78db      	ldrb	r3, [r3, #3]
    beba:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bebe:	3304      	adds	r3, #4
    bec0:	4618      	mov	r0, r3
    bec2:	4b2f      	ldr	r3, [pc, #188]	; (bf80 <cdcdf_acm_enable+0x15c>)
    bec4:	4798      	blx	r3
    bec6:	4603      	mov	r3, r0
    bec8:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    beca:	7ebb      	ldrb	r3, [r7, #26]
    becc:	7ef9      	ldrb	r1, [r7, #27]
    bece:	8bba      	ldrh	r2, [r7, #28]
    bed0:	4618      	mov	r0, r3
    bed2:	4b2c      	ldr	r3, [pc, #176]	; (bf84 <cdcdf_acm_enable+0x160>)
    bed4:	4798      	blx	r3
    bed6:	4603      	mov	r3, r0
    bed8:	2b00      	cmp	r3, #0
    beda:	d002      	beq.n	bee2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bedc:	f06f 0313 	mvn.w	r3, #19
    bee0:	e048      	b.n	bf74 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bee2:	7ebb      	ldrb	r3, [r7, #26]
    bee4:	b25b      	sxtb	r3, r3
    bee6:	2b00      	cmp	r3, #0
    bee8:	da0f      	bge.n	bf0a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    beea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    beee:	7eb9      	ldrb	r1, [r7, #26]
    bef0:	6a3a      	ldr	r2, [r7, #32]
    bef2:	4413      	add	r3, r2
    bef4:	460a      	mov	r2, r1
    bef6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    befc:	6a3a      	ldr	r2, [r7, #32]
    befe:	4413      	add	r3, r2
    bf00:	789b      	ldrb	r3, [r3, #2]
    bf02:	4618      	mov	r0, r3
    bf04:	4b20      	ldr	r3, [pc, #128]	; (bf88 <cdcdf_acm_enable+0x164>)
    bf06:	4798      	blx	r3
    bf08:	e007      	b.n	bf1a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bf0a:	7eba      	ldrb	r2, [r7, #26]
    bf0c:	6a3b      	ldr	r3, [r7, #32]
    bf0e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bf10:	6a3b      	ldr	r3, [r7, #32]
    bf12:	791b      	ldrb	r3, [r3, #4]
    bf14:	4618      	mov	r0, r3
    bf16:	4b1c      	ldr	r3, [pc, #112]	; (bf88 <cdcdf_acm_enable+0x164>)
    bf18:	4798      	blx	r3
			}
			desc->sod = ep;
    bf1a:	683b      	ldr	r3, [r7, #0]
    bf1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bf1e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bf20:	683b      	ldr	r3, [r7, #0]
    bf22:	681b      	ldr	r3, [r3, #0]
    bf24:	4618      	mov	r0, r3
    bf26:	4b19      	ldr	r3, [pc, #100]	; (bf8c <cdcdf_acm_enable+0x168>)
    bf28:	4798      	blx	r3
    bf2a:	4602      	mov	r2, r0
    bf2c:	683b      	ldr	r3, [r7, #0]
    bf2e:	685b      	ldr	r3, [r3, #4]
    bf30:	4619      	mov	r1, r3
    bf32:	4610      	mov	r0, r2
    bf34:	4b16      	ldr	r3, [pc, #88]	; (bf90 <cdcdf_acm_enable+0x16c>)
    bf36:	4798      	blx	r3
    bf38:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bf3c:	2b00      	cmp	r3, #0
    bf3e:	d1b7      	bne.n	beb0 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bf40:	683b      	ldr	r3, [r7, #0]
    bf42:	681b      	ldr	r3, [r3, #0]
    bf44:	4618      	mov	r0, r3
    bf46:	4b11      	ldr	r3, [pc, #68]	; (bf8c <cdcdf_acm_enable+0x168>)
    bf48:	4798      	blx	r3
    bf4a:	683b      	ldr	r3, [r7, #0]
    bf4c:	685b      	ldr	r3, [r3, #4]
    bf4e:	2204      	movs	r2, #4
    bf50:	4619      	mov	r1, r3
    bf52:	4b0a      	ldr	r3, [pc, #40]	; (bf7c <cdcdf_acm_enable+0x158>)
    bf54:	4798      	blx	r3
    bf56:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bf58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf5c:	3301      	adds	r3, #1
    bf5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bf62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf66:	2b01      	cmp	r3, #1
    bf68:	f67f af6b 	bls.w	be42 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bf6c:	4b09      	ldr	r3, [pc, #36]	; (bf94 <cdcdf_acm_enable+0x170>)
    bf6e:	2201      	movs	r2, #1
    bf70:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bf72:	2300      	movs	r3, #0
}
    bf74:	4618      	mov	r0, r3
    bf76:	3730      	adds	r7, #48	; 0x30
    bf78:	46bd      	mov	sp, r7
    bf7a:	bd80      	pop	{r7, pc}
    bf7c:	0000d1e5 	.word	0x0000d1e5
    bf80:	0000bdbf 	.word	0x0000bdbf
    bf84:	00003031 	.word	0x00003031
    bf88:	0000311d 	.word	0x0000311d
    bf8c:	0000be01 	.word	0x0000be01
    bf90:	0000d241 	.word	0x0000d241
    bf94:	20000c94 	.word	0x20000c94

0000bf98 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bf98:	b580      	push	{r7, lr}
    bf9a:	b088      	sub	sp, #32
    bf9c:	af00      	add	r7, sp, #0
    bf9e:	6078      	str	r0, [r7, #4]
    bfa0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bfa2:	687b      	ldr	r3, [r7, #4]
    bfa4:	689b      	ldr	r3, [r3, #8]
    bfa6:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bfa8:	683b      	ldr	r3, [r7, #0]
    bfaa:	2b00      	cmp	r3, #0
    bfac:	d00c      	beq.n	bfc8 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bfae:	683b      	ldr	r3, [r7, #0]
    bfb0:	681b      	ldr	r3, [r3, #0]
    bfb2:	795b      	ldrb	r3, [r3, #5]
    bfb4:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bfb6:	7c7b      	ldrb	r3, [r7, #17]
    bfb8:	2b02      	cmp	r3, #2
    bfba:	d005      	beq.n	bfc8 <cdcdf_acm_disable+0x30>
    bfbc:	7c7b      	ldrb	r3, [r7, #17]
    bfbe:	2b0a      	cmp	r3, #10
    bfc0:	d002      	beq.n	bfc8 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bfc2:	f06f 0309 	mvn.w	r3, #9
    bfc6:	e035      	b.n	c034 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bfc8:	2300      	movs	r3, #0
    bfca:	77fb      	strb	r3, [r7, #31]
    bfcc:	e01f      	b.n	c00e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bfce:	7ffb      	ldrb	r3, [r7, #31]
    bfd0:	69ba      	ldr	r2, [r7, #24]
    bfd2:	5cd3      	ldrb	r3, [r2, r3]
    bfd4:	2bff      	cmp	r3, #255	; 0xff
    bfd6:	d016      	beq.n	c006 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    bfd8:	7ffb      	ldrb	r3, [r7, #31]
    bfda:	69ba      	ldr	r2, [r7, #24]
    bfdc:	21ff      	movs	r1, #255	; 0xff
    bfde:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    bfe0:	7ffb      	ldrb	r3, [r7, #31]
    bfe2:	69ba      	ldr	r2, [r7, #24]
    bfe4:	4413      	add	r3, r2
    bfe6:	789b      	ldrb	r3, [r3, #2]
    bfe8:	2bff      	cmp	r3, #255	; 0xff
    bfea:	d00d      	beq.n	c008 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bfec:	7ffb      	ldrb	r3, [r7, #31]
    bfee:	69ba      	ldr	r2, [r7, #24]
    bff0:	4413      	add	r3, r2
    bff2:	789b      	ldrb	r3, [r3, #2]
    bff4:	4618      	mov	r0, r3
    bff6:	4b11      	ldr	r3, [pc, #68]	; (c03c <cdcdf_acm_disable+0xa4>)
    bff8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    bffa:	7ffb      	ldrb	r3, [r7, #31]
    bffc:	69ba      	ldr	r2, [r7, #24]
    bffe:	4413      	add	r3, r2
    c000:	22ff      	movs	r2, #255	; 0xff
    c002:	709a      	strb	r2, [r3, #2]
    c004:	e000      	b.n	c008 <cdcdf_acm_disable+0x70>
			continue;
    c006:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c008:	7ffb      	ldrb	r3, [r7, #31]
    c00a:	3301      	adds	r3, #1
    c00c:	77fb      	strb	r3, [r7, #31]
    c00e:	7ffb      	ldrb	r3, [r7, #31]
    c010:	2b01      	cmp	r3, #1
    c012:	d9dc      	bls.n	bfce <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c014:	69bb      	ldr	r3, [r7, #24]
    c016:	791b      	ldrb	r3, [r3, #4]
    c018:	2bff      	cmp	r3, #255	; 0xff
    c01a:	d007      	beq.n	c02c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c01c:	69bb      	ldr	r3, [r7, #24]
    c01e:	791b      	ldrb	r3, [r3, #4]
    c020:	4618      	mov	r0, r3
    c022:	4b06      	ldr	r3, [pc, #24]	; (c03c <cdcdf_acm_disable+0xa4>)
    c024:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c026:	69bb      	ldr	r3, [r7, #24]
    c028:	22ff      	movs	r2, #255	; 0xff
    c02a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c02c:	4b04      	ldr	r3, [pc, #16]	; (c040 <cdcdf_acm_disable+0xa8>)
    c02e:	2200      	movs	r2, #0
    c030:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c032:	2300      	movs	r3, #0
}
    c034:	4618      	mov	r0, r3
    c036:	3720      	adds	r7, #32
    c038:	46bd      	mov	sp, r7
    c03a:	bd80      	pop	{r7, pc}
    c03c:	000030cd 	.word	0x000030cd
    c040:	20000c94 	.word	0x20000c94

0000c044 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c044:	b580      	push	{r7, lr}
    c046:	b084      	sub	sp, #16
    c048:	af00      	add	r7, sp, #0
    c04a:	60f8      	str	r0, [r7, #12]
    c04c:	460b      	mov	r3, r1
    c04e:	607a      	str	r2, [r7, #4]
    c050:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c052:	7afb      	ldrb	r3, [r7, #11]
    c054:	2b01      	cmp	r3, #1
    c056:	d009      	beq.n	c06c <cdcdf_acm_ctrl+0x28>
    c058:	2b02      	cmp	r3, #2
    c05a:	d00d      	beq.n	c078 <cdcdf_acm_ctrl+0x34>
    c05c:	2b00      	cmp	r3, #0
    c05e:	d10e      	bne.n	c07e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c060:	6879      	ldr	r1, [r7, #4]
    c062:	68f8      	ldr	r0, [r7, #12]
    c064:	4b09      	ldr	r3, [pc, #36]	; (c08c <cdcdf_acm_ctrl+0x48>)
    c066:	4798      	blx	r3
    c068:	4603      	mov	r3, r0
    c06a:	e00a      	b.n	c082 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c06c:	6879      	ldr	r1, [r7, #4]
    c06e:	68f8      	ldr	r0, [r7, #12]
    c070:	4b07      	ldr	r3, [pc, #28]	; (c090 <cdcdf_acm_ctrl+0x4c>)
    c072:	4798      	blx	r3
    c074:	4603      	mov	r3, r0
    c076:	e004      	b.n	c082 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c078:	f06f 031a 	mvn.w	r3, #26
    c07c:	e001      	b.n	c082 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c07e:	f06f 030c 	mvn.w	r3, #12
	}
}
    c082:	4618      	mov	r0, r3
    c084:	3710      	adds	r7, #16
    c086:	46bd      	mov	sp, r7
    c088:	bd80      	pop	{r7, pc}
    c08a:	bf00      	nop
    c08c:	0000be25 	.word	0x0000be25
    c090:	0000bf99 	.word	0x0000bf99

0000c094 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c094:	b590      	push	{r4, r7, lr}
    c096:	b087      	sub	sp, #28
    c098:	af00      	add	r7, sp, #0
    c09a:	4603      	mov	r3, r0
    c09c:	6039      	str	r1, [r7, #0]
    c09e:	71fb      	strb	r3, [r7, #7]
    c0a0:	4613      	mov	r3, r2
    c0a2:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c0a4:	683b      	ldr	r3, [r7, #0]
    c0a6:	799a      	ldrb	r2, [r3, #6]
    c0a8:	79db      	ldrb	r3, [r3, #7]
    c0aa:	021b      	lsls	r3, r3, #8
    c0ac:	4313      	orrs	r3, r2
    c0ae:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c0b0:	4b2b      	ldr	r3, [pc, #172]	; (c160 <cdcdf_acm_set_req+0xcc>)
    c0b2:	4798      	blx	r3
    c0b4:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c0b6:	683b      	ldr	r3, [r7, #0]
    c0b8:	785b      	ldrb	r3, [r3, #1]
    c0ba:	2b20      	cmp	r3, #32
    c0bc:	d002      	beq.n	c0c4 <cdcdf_acm_set_req+0x30>
    c0be:	2b22      	cmp	r3, #34	; 0x22
    c0c0:	d034      	beq.n	c12c <cdcdf_acm_set_req+0x98>
    c0c2:	e046      	b.n	c152 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c0c4:	8afb      	ldrh	r3, [r7, #22]
    c0c6:	2b07      	cmp	r3, #7
    c0c8:	d002      	beq.n	c0d0 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c0ca:	f04f 33ff 	mov.w	r3, #4294967295
    c0ce:	e042      	b.n	c156 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c0d0:	79bb      	ldrb	r3, [r7, #6]
    c0d2:	2b00      	cmp	r3, #0
    c0d4:	d107      	bne.n	c0e6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c0d6:	8afa      	ldrh	r2, [r7, #22]
    c0d8:	79f8      	ldrb	r0, [r7, #7]
    c0da:	2300      	movs	r3, #0
    c0dc:	6939      	ldr	r1, [r7, #16]
    c0de:	4c21      	ldr	r4, [pc, #132]	; (c164 <cdcdf_acm_set_req+0xd0>)
    c0e0:	47a0      	blx	r4
    c0e2:	4603      	mov	r3, r0
    c0e4:	e037      	b.n	c156 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c0e6:	693a      	ldr	r2, [r7, #16]
    c0e8:	f107 0308 	add.w	r3, r7, #8
    c0ec:	6810      	ldr	r0, [r2, #0]
    c0ee:	6018      	str	r0, [r3, #0]
    c0f0:	8891      	ldrh	r1, [r2, #4]
    c0f2:	7992      	ldrb	r2, [r2, #6]
    c0f4:	8099      	strh	r1, [r3, #4]
    c0f6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c0f8:	4b1b      	ldr	r3, [pc, #108]	; (c168 <cdcdf_acm_set_req+0xd4>)
    c0fa:	681b      	ldr	r3, [r3, #0]
    c0fc:	2b00      	cmp	r3, #0
    c0fe:	d008      	beq.n	c112 <cdcdf_acm_set_req+0x7e>
    c100:	4b19      	ldr	r3, [pc, #100]	; (c168 <cdcdf_acm_set_req+0xd4>)
    c102:	681b      	ldr	r3, [r3, #0]
    c104:	f107 0208 	add.w	r2, r7, #8
    c108:	4610      	mov	r0, r2
    c10a:	4798      	blx	r3
    c10c:	4603      	mov	r3, r0
    c10e:	2b00      	cmp	r3, #0
    c110:	d00a      	beq.n	c128 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c112:	4b16      	ldr	r3, [pc, #88]	; (c16c <cdcdf_acm_set_req+0xd8>)
    c114:	f107 0208 	add.w	r2, r7, #8
    c118:	e892 0003 	ldmia.w	r2, {r0, r1}
    c11c:	6018      	str	r0, [r3, #0]
    c11e:	3304      	adds	r3, #4
    c120:	8019      	strh	r1, [r3, #0]
    c122:	3302      	adds	r3, #2
    c124:	0c0a      	lsrs	r2, r1, #16
    c126:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c128:	2300      	movs	r3, #0
    c12a:	e014      	b.n	c156 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c12c:	2300      	movs	r3, #0
    c12e:	2200      	movs	r2, #0
    c130:	2100      	movs	r1, #0
    c132:	2000      	movs	r0, #0
    c134:	4c0b      	ldr	r4, [pc, #44]	; (c164 <cdcdf_acm_set_req+0xd0>)
    c136:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c138:	4b0d      	ldr	r3, [pc, #52]	; (c170 <cdcdf_acm_set_req+0xdc>)
    c13a:	681b      	ldr	r3, [r3, #0]
    c13c:	2b00      	cmp	r3, #0
    c13e:	d006      	beq.n	c14e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c140:	4b0b      	ldr	r3, [pc, #44]	; (c170 <cdcdf_acm_set_req+0xdc>)
    c142:	681b      	ldr	r3, [r3, #0]
    c144:	683a      	ldr	r2, [r7, #0]
    c146:	8852      	ldrh	r2, [r2, #2]
    c148:	b292      	uxth	r2, r2
    c14a:	4610      	mov	r0, r2
    c14c:	4798      	blx	r3
		}
		return ERR_NONE;
    c14e:	2300      	movs	r3, #0
    c150:	e001      	b.n	c156 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c152:	f06f 030c 	mvn.w	r3, #12
	}
}
    c156:	4618      	mov	r0, r3
    c158:	371c      	adds	r7, #28
    c15a:	46bd      	mov	sp, r7
    c15c:	bd90      	pop	{r4, r7, pc}
    c15e:	bf00      	nop
    c160:	0000d0e1 	.word	0x0000d0e1
    c164:	0000cf55 	.word	0x0000cf55
    c168:	20000ca8 	.word	0x20000ca8
    c16c:	20000c9c 	.word	0x20000c9c
    c170:	20000ca4 	.word	0x20000ca4

0000c174 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c174:	b590      	push	{r4, r7, lr}
    c176:	b085      	sub	sp, #20
    c178:	af00      	add	r7, sp, #0
    c17a:	4603      	mov	r3, r0
    c17c:	6039      	str	r1, [r7, #0]
    c17e:	71fb      	strb	r3, [r7, #7]
    c180:	4613      	mov	r3, r2
    c182:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c184:	683b      	ldr	r3, [r7, #0]
    c186:	799a      	ldrb	r2, [r3, #6]
    c188:	79db      	ldrb	r3, [r3, #7]
    c18a:	021b      	lsls	r3, r3, #8
    c18c:	4313      	orrs	r3, r2
    c18e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c190:	79bb      	ldrb	r3, [r7, #6]
    c192:	2b01      	cmp	r3, #1
    c194:	d101      	bne.n	c19a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c196:	2300      	movs	r3, #0
    c198:	e013      	b.n	c1c2 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c19a:	683b      	ldr	r3, [r7, #0]
    c19c:	785b      	ldrb	r3, [r3, #1]
    c19e:	2b21      	cmp	r3, #33	; 0x21
    c1a0:	d10d      	bne.n	c1be <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c1a2:	89fb      	ldrh	r3, [r7, #14]
    c1a4:	2b07      	cmp	r3, #7
    c1a6:	d002      	beq.n	c1ae <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c1a8:	f04f 33ff 	mov.w	r3, #4294967295
    c1ac:	e009      	b.n	c1c2 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c1ae:	89fa      	ldrh	r2, [r7, #14]
    c1b0:	79f8      	ldrb	r0, [r7, #7]
    c1b2:	2300      	movs	r3, #0
    c1b4:	4905      	ldr	r1, [pc, #20]	; (c1cc <cdcdf_acm_get_req+0x58>)
    c1b6:	4c06      	ldr	r4, [pc, #24]	; (c1d0 <cdcdf_acm_get_req+0x5c>)
    c1b8:	47a0      	blx	r4
    c1ba:	4603      	mov	r3, r0
    c1bc:	e001      	b.n	c1c2 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c1be:	f06f 030c 	mvn.w	r3, #12
	}
}
    c1c2:	4618      	mov	r0, r3
    c1c4:	3714      	adds	r7, #20
    c1c6:	46bd      	mov	sp, r7
    c1c8:	bd90      	pop	{r4, r7, pc}
    c1ca:	bf00      	nop
    c1cc:	20000c9c 	.word	0x20000c9c
    c1d0:	0000cf55 	.word	0x0000cf55

0000c1d4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c1d4:	b580      	push	{r7, lr}
    c1d6:	b082      	sub	sp, #8
    c1d8:	af00      	add	r7, sp, #0
    c1da:	4603      	mov	r3, r0
    c1dc:	6039      	str	r1, [r7, #0]
    c1de:	71fb      	strb	r3, [r7, #7]
    c1e0:	4613      	mov	r3, r2
    c1e2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c1e4:	683b      	ldr	r3, [r7, #0]
    c1e6:	781b      	ldrb	r3, [r3, #0]
    c1e8:	095b      	lsrs	r3, r3, #5
    c1ea:	b2db      	uxtb	r3, r3
    c1ec:	f003 0303 	and.w	r3, r3, #3
    c1f0:	2b01      	cmp	r3, #1
    c1f2:	d002      	beq.n	c1fa <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c1f4:	f06f 0309 	mvn.w	r3, #9
    c1f8:	e026      	b.n	c248 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c1fa:	683b      	ldr	r3, [r7, #0]
    c1fc:	889b      	ldrh	r3, [r3, #4]
    c1fe:	b29a      	uxth	r2, r3
    c200:	4b13      	ldr	r3, [pc, #76]	; (c250 <cdcdf_acm_req+0x7c>)
    c202:	781b      	ldrb	r3, [r3, #0]
    c204:	b29b      	uxth	r3, r3
    c206:	429a      	cmp	r2, r3
    c208:	d007      	beq.n	c21a <cdcdf_acm_req+0x46>
    c20a:	683b      	ldr	r3, [r7, #0]
    c20c:	889b      	ldrh	r3, [r3, #4]
    c20e:	b29a      	uxth	r2, r3
    c210:	4b0f      	ldr	r3, [pc, #60]	; (c250 <cdcdf_acm_req+0x7c>)
    c212:	785b      	ldrb	r3, [r3, #1]
    c214:	b29b      	uxth	r3, r3
    c216:	429a      	cmp	r2, r3
    c218:	d114      	bne.n	c244 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c21a:	683b      	ldr	r3, [r7, #0]
    c21c:	781b      	ldrb	r3, [r3, #0]
    c21e:	b25b      	sxtb	r3, r3
    c220:	2b00      	cmp	r3, #0
    c222:	da07      	bge.n	c234 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c224:	79ba      	ldrb	r2, [r7, #6]
    c226:	79fb      	ldrb	r3, [r7, #7]
    c228:	6839      	ldr	r1, [r7, #0]
    c22a:	4618      	mov	r0, r3
    c22c:	4b09      	ldr	r3, [pc, #36]	; (c254 <cdcdf_acm_req+0x80>)
    c22e:	4798      	blx	r3
    c230:	4603      	mov	r3, r0
    c232:	e009      	b.n	c248 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c234:	79ba      	ldrb	r2, [r7, #6]
    c236:	79fb      	ldrb	r3, [r7, #7]
    c238:	6839      	ldr	r1, [r7, #0]
    c23a:	4618      	mov	r0, r3
    c23c:	4b06      	ldr	r3, [pc, #24]	; (c258 <cdcdf_acm_req+0x84>)
    c23e:	4798      	blx	r3
    c240:	4603      	mov	r3, r0
    c242:	e001      	b.n	c248 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c244:	f06f 0309 	mvn.w	r3, #9
	}
}
    c248:	4618      	mov	r0, r3
    c24a:	3708      	adds	r7, #8
    c24c:	46bd      	mov	sp, r7
    c24e:	bd80      	pop	{r7, pc}
    c250:	20000c94 	.word	0x20000c94
    c254:	0000c175 	.word	0x0000c175
    c258:	0000c095 	.word	0x0000c095

0000c25c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c25c:	b580      	push	{r7, lr}
    c25e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c260:	4b0b      	ldr	r3, [pc, #44]	; (c290 <cdcdf_acm_init+0x34>)
    c262:	4798      	blx	r3
    c264:	4603      	mov	r3, r0
    c266:	2b01      	cmp	r3, #1
    c268:	d902      	bls.n	c270 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c26a:	f06f 0310 	mvn.w	r3, #16
    c26e:	e00d      	b.n	c28c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c270:	4b08      	ldr	r3, [pc, #32]	; (c294 <cdcdf_acm_init+0x38>)
    c272:	4a09      	ldr	r2, [pc, #36]	; (c298 <cdcdf_acm_init+0x3c>)
    c274:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c276:	4b07      	ldr	r3, [pc, #28]	; (c294 <cdcdf_acm_init+0x38>)
    c278:	4a08      	ldr	r2, [pc, #32]	; (c29c <cdcdf_acm_init+0x40>)
    c27a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c27c:	4805      	ldr	r0, [pc, #20]	; (c294 <cdcdf_acm_init+0x38>)
    c27e:	4b08      	ldr	r3, [pc, #32]	; (c2a0 <cdcdf_acm_init+0x44>)
    c280:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c282:	4908      	ldr	r1, [pc, #32]	; (c2a4 <cdcdf_acm_init+0x48>)
    c284:	2001      	movs	r0, #1
    c286:	4b08      	ldr	r3, [pc, #32]	; (c2a8 <cdcdf_acm_init+0x4c>)
    c288:	4798      	blx	r3
	return ERR_NONE;
    c28a:	2300      	movs	r3, #0
}
    c28c:	4618      	mov	r0, r3
    c28e:	bd80      	pop	{r7, pc}
    c290:	0000d0f9 	.word	0x0000d0f9
    c294:	20000c88 	.word	0x20000c88
    c298:	0000c045 	.word	0x0000c045
    c29c:	20000c94 	.word	0x20000c94
    c2a0:	0000d061 	.word	0x0000d061
    c2a4:	200001d8 	.word	0x200001d8
    c2a8:	0000cf91 	.word	0x0000cf91

0000c2ac <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c2ac:	b590      	push	{r4, r7, lr}
    c2ae:	b083      	sub	sp, #12
    c2b0:	af00      	add	r7, sp, #0
    c2b2:	6078      	str	r0, [r7, #4]
    c2b4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c2b6:	4b0b      	ldr	r3, [pc, #44]	; (c2e4 <cdcdf_acm_read+0x38>)
    c2b8:	4798      	blx	r3
    c2ba:	4603      	mov	r3, r0
    c2bc:	f083 0301 	eor.w	r3, r3, #1
    c2c0:	b2db      	uxtb	r3, r3
    c2c2:	2b00      	cmp	r3, #0
    c2c4:	d002      	beq.n	c2cc <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c2c6:	f06f 0310 	mvn.w	r3, #16
    c2ca:	e007      	b.n	c2dc <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c2cc:	4b06      	ldr	r3, [pc, #24]	; (c2e8 <cdcdf_acm_read+0x3c>)
    c2ce:	7918      	ldrb	r0, [r3, #4]
    c2d0:	2300      	movs	r3, #0
    c2d2:	683a      	ldr	r2, [r7, #0]
    c2d4:	6879      	ldr	r1, [r7, #4]
    c2d6:	4c05      	ldr	r4, [pc, #20]	; (c2ec <cdcdf_acm_read+0x40>)
    c2d8:	47a0      	blx	r4
    c2da:	4603      	mov	r3, r0
}
    c2dc:	4618      	mov	r0, r3
    c2de:	370c      	adds	r7, #12
    c2e0:	46bd      	mov	sp, r7
    c2e2:	bd90      	pop	{r4, r7, pc}
    c2e4:	0000c3d1 	.word	0x0000c3d1
    c2e8:	20000c94 	.word	0x20000c94
    c2ec:	0000cf55 	.word	0x0000cf55

0000c2f0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c2f0:	b590      	push	{r4, r7, lr}
    c2f2:	b083      	sub	sp, #12
    c2f4:	af00      	add	r7, sp, #0
    c2f6:	6078      	str	r0, [r7, #4]
    c2f8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c2fa:	4b0b      	ldr	r3, [pc, #44]	; (c328 <cdcdf_acm_write+0x38>)
    c2fc:	4798      	blx	r3
    c2fe:	4603      	mov	r3, r0
    c300:	f083 0301 	eor.w	r3, r3, #1
    c304:	b2db      	uxtb	r3, r3
    c306:	2b00      	cmp	r3, #0
    c308:	d002      	beq.n	c310 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c30a:	f06f 0310 	mvn.w	r3, #16
    c30e:	e007      	b.n	c320 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c310:	4b06      	ldr	r3, [pc, #24]	; (c32c <cdcdf_acm_write+0x3c>)
    c312:	78d8      	ldrb	r0, [r3, #3]
    c314:	2301      	movs	r3, #1
    c316:	683a      	ldr	r2, [r7, #0]
    c318:	6879      	ldr	r1, [r7, #4]
    c31a:	4c05      	ldr	r4, [pc, #20]	; (c330 <cdcdf_acm_write+0x40>)
    c31c:	47a0      	blx	r4
    c31e:	4603      	mov	r3, r0
}
    c320:	4618      	mov	r0, r3
    c322:	370c      	adds	r7, #12
    c324:	46bd      	mov	sp, r7
    c326:	bd90      	pop	{r4, r7, pc}
    c328:	0000c3d1 	.word	0x0000c3d1
    c32c:	20000c94 	.word	0x20000c94
    c330:	0000cf55 	.word	0x0000cf55

0000c334 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c334:	b580      	push	{r7, lr}
    c336:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c338:	4b05      	ldr	r3, [pc, #20]	; (c350 <cdcdf_acm_stop_xfer+0x1c>)
    c33a:	78db      	ldrb	r3, [r3, #3]
    c33c:	4618      	mov	r0, r3
    c33e:	4b05      	ldr	r3, [pc, #20]	; (c354 <cdcdf_acm_stop_xfer+0x20>)
    c340:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c342:	4b03      	ldr	r3, [pc, #12]	; (c350 <cdcdf_acm_stop_xfer+0x1c>)
    c344:	791b      	ldrb	r3, [r3, #4]
    c346:	4618      	mov	r0, r3
    c348:	4b02      	ldr	r3, [pc, #8]	; (c354 <cdcdf_acm_stop_xfer+0x20>)
    c34a:	4798      	blx	r3
}
    c34c:	bf00      	nop
    c34e:	bd80      	pop	{r7, pc}
    c350:	20000c94 	.word	0x20000c94
    c354:	000032f5 	.word	0x000032f5

0000c358 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c358:	b580      	push	{r7, lr}
    c35a:	b082      	sub	sp, #8
    c35c:	af00      	add	r7, sp, #0
    c35e:	4603      	mov	r3, r0
    c360:	6039      	str	r1, [r7, #0]
    c362:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c364:	79fb      	ldrb	r3, [r7, #7]
    c366:	2b03      	cmp	r3, #3
    c368:	d822      	bhi.n	c3b0 <cdcdf_acm_register_callback+0x58>
    c36a:	a201      	add	r2, pc, #4	; (adr r2, c370 <cdcdf_acm_register_callback+0x18>)
    c36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c370:	0000c381 	.word	0x0000c381
    c374:	0000c391 	.word	0x0000c391
    c378:	0000c3a1 	.word	0x0000c3a1
    c37c:	0000c3a9 	.word	0x0000c3a9
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c380:	4b0f      	ldr	r3, [pc, #60]	; (c3c0 <cdcdf_acm_register_callback+0x68>)
    c382:	791b      	ldrb	r3, [r3, #4]
    c384:	683a      	ldr	r2, [r7, #0]
    c386:	2102      	movs	r1, #2
    c388:	4618      	mov	r0, r3
    c38a:	4b0e      	ldr	r3, [pc, #56]	; (c3c4 <cdcdf_acm_register_callback+0x6c>)
    c38c:	4798      	blx	r3
		break;
    c38e:	e012      	b.n	c3b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c390:	4b0b      	ldr	r3, [pc, #44]	; (c3c0 <cdcdf_acm_register_callback+0x68>)
    c392:	78db      	ldrb	r3, [r3, #3]
    c394:	683a      	ldr	r2, [r7, #0]
    c396:	2102      	movs	r1, #2
    c398:	4618      	mov	r0, r3
    c39a:	4b0a      	ldr	r3, [pc, #40]	; (c3c4 <cdcdf_acm_register_callback+0x6c>)
    c39c:	4798      	blx	r3
		break;
    c39e:	e00a      	b.n	c3b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c3a0:	4a09      	ldr	r2, [pc, #36]	; (c3c8 <cdcdf_acm_register_callback+0x70>)
    c3a2:	683b      	ldr	r3, [r7, #0]
    c3a4:	6013      	str	r3, [r2, #0]
		break;
    c3a6:	e006      	b.n	c3b6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c3a8:	4a08      	ldr	r2, [pc, #32]	; (c3cc <cdcdf_acm_register_callback+0x74>)
    c3aa:	683b      	ldr	r3, [r7, #0]
    c3ac:	6013      	str	r3, [r2, #0]
		break;
    c3ae:	e002      	b.n	c3b6 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c3b0:	f06f 030c 	mvn.w	r3, #12
    c3b4:	e000      	b.n	c3b8 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c3b6:	2300      	movs	r3, #0
}
    c3b8:	4618      	mov	r0, r3
    c3ba:	3708      	adds	r7, #8
    c3bc:	46bd      	mov	sp, r7
    c3be:	bd80      	pop	{r7, pc}
    c3c0:	20000c94 	.word	0x20000c94
    c3c4:	00003421 	.word	0x00003421
    c3c8:	20000ca8 	.word	0x20000ca8
    c3cc:	20000ca4 	.word	0x20000ca4

0000c3d0 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c3d0:	b480      	push	{r7}
    c3d2:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c3d4:	4b03      	ldr	r3, [pc, #12]	; (c3e4 <cdcdf_acm_is_enabled+0x14>)
    c3d6:	795b      	ldrb	r3, [r3, #5]
}
    c3d8:	4618      	mov	r0, r3
    c3da:	46bd      	mov	sp, r7
    c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3e0:	4770      	bx	lr
    c3e2:	bf00      	nop
    c3e4:	20000c94 	.word	0x20000c94

0000c3e8 <usb_get_u16>:
{
    c3e8:	b480      	push	{r7}
    c3ea:	b083      	sub	sp, #12
    c3ec:	af00      	add	r7, sp, #0
    c3ee:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c3f0:	687b      	ldr	r3, [r7, #4]
    c3f2:	781b      	ldrb	r3, [r3, #0]
    c3f4:	b29a      	uxth	r2, r3
    c3f6:	687b      	ldr	r3, [r7, #4]
    c3f8:	3301      	adds	r3, #1
    c3fa:	781b      	ldrb	r3, [r3, #0]
    c3fc:	b29b      	uxth	r3, r3
    c3fe:	021b      	lsls	r3, r3, #8
    c400:	b29b      	uxth	r3, r3
    c402:	4413      	add	r3, r2
    c404:	b29b      	uxth	r3, r3
}
    c406:	4618      	mov	r0, r3
    c408:	370c      	adds	r7, #12
    c40a:	46bd      	mov	sp, r7
    c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c410:	4770      	bx	lr

0000c412 <usb_desc_len>:
{
    c412:	b480      	push	{r7}
    c414:	b083      	sub	sp, #12
    c416:	af00      	add	r7, sp, #0
    c418:	6078      	str	r0, [r7, #4]
	return desc[0];
    c41a:	687b      	ldr	r3, [r7, #4]
    c41c:	781b      	ldrb	r3, [r3, #0]
}
    c41e:	4618      	mov	r0, r3
    c420:	370c      	adds	r7, #12
    c422:	46bd      	mov	sp, r7
    c424:	f85d 7b04 	ldr.w	r7, [sp], #4
    c428:	4770      	bx	lr
	...

0000c42c <usb_desc_next>:
{
    c42c:	b580      	push	{r7, lr}
    c42e:	b082      	sub	sp, #8
    c430:	af00      	add	r7, sp, #0
    c432:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c434:	6878      	ldr	r0, [r7, #4]
    c436:	4b05      	ldr	r3, [pc, #20]	; (c44c <usb_desc_next+0x20>)
    c438:	4798      	blx	r3
    c43a:	4603      	mov	r3, r0
    c43c:	461a      	mov	r2, r3
    c43e:	687b      	ldr	r3, [r7, #4]
    c440:	4413      	add	r3, r2
}
    c442:	4618      	mov	r0, r3
    c444:	3708      	adds	r7, #8
    c446:	46bd      	mov	sp, r7
    c448:	bd80      	pop	{r7, pc}
    c44a:	bf00      	nop
    c44c:	0000c413 	.word	0x0000c413

0000c450 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c450:	b580      	push	{r7, lr}
    c452:	b082      	sub	sp, #8
    c454:	af00      	add	r7, sp, #0
    c456:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c458:	687b      	ldr	r3, [r7, #4]
    c45a:	3302      	adds	r3, #2
    c45c:	4618      	mov	r0, r3
    c45e:	4b03      	ldr	r3, [pc, #12]	; (c46c <usb_cfg_desc_total_len+0x1c>)
    c460:	4798      	blx	r3
    c462:	4603      	mov	r3, r0
}
    c464:	4618      	mov	r0, r3
    c466:	3708      	adds	r7, #8
    c468:	46bd      	mov	sp, r7
    c46a:	bd80      	pop	{r7, pc}
    c46c:	0000c3e9 	.word	0x0000c3e9

0000c470 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c470:	b590      	push	{r4, r7, lr}
    c472:	b085      	sub	sp, #20
    c474:	af00      	add	r7, sp, #0
    c476:	4603      	mov	r3, r0
    c478:	6039      	str	r1, [r7, #0]
    c47a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c47c:	2300      	movs	r3, #0
    c47e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c480:	683b      	ldr	r3, [r7, #0]
    c482:	799a      	ldrb	r2, [r3, #6]
    c484:	79db      	ldrb	r3, [r3, #7]
    c486:	021b      	lsls	r3, r3, #8
    c488:	4313      	orrs	r3, r2
    c48a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c48c:	897b      	ldrh	r3, [r7, #10]
    c48e:	2b12      	cmp	r3, #18
    c490:	d901      	bls.n	c496 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c492:	2312      	movs	r3, #18
    c494:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c496:	68fb      	ldr	r3, [r7, #12]
    c498:	2b00      	cmp	r3, #0
    c49a:	d10a      	bne.n	c4b2 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c49c:	4b0f      	ldr	r3, [pc, #60]	; (c4dc <usbdc_get_dev_desc+0x6c>)
    c49e:	681b      	ldr	r3, [r3, #0]
    c4a0:	6818      	ldr	r0, [r3, #0]
    c4a2:	4b0e      	ldr	r3, [pc, #56]	; (c4dc <usbdc_get_dev_desc+0x6c>)
    c4a4:	681b      	ldr	r3, [r3, #0]
    c4a6:	685b      	ldr	r3, [r3, #4]
    c4a8:	2201      	movs	r2, #1
    c4aa:	4619      	mov	r1, r3
    c4ac:	4b0c      	ldr	r3, [pc, #48]	; (c4e0 <usbdc_get_dev_desc+0x70>)
    c4ae:	4798      	blx	r3
    c4b0:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c4b2:	68fb      	ldr	r3, [r7, #12]
    c4b4:	2b00      	cmp	r3, #0
    c4b6:	d101      	bne.n	c4bc <usbdc_get_dev_desc+0x4c>
		return false;
    c4b8:	2300      	movs	r3, #0
    c4ba:	e00b      	b.n	c4d4 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c4bc:	897a      	ldrh	r2, [r7, #10]
    c4be:	79f8      	ldrb	r0, [r7, #7]
    c4c0:	2300      	movs	r3, #0
    c4c2:	68f9      	ldr	r1, [r7, #12]
    c4c4:	4c07      	ldr	r4, [pc, #28]	; (c4e4 <usbdc_get_dev_desc+0x74>)
    c4c6:	47a0      	blx	r4
    c4c8:	4603      	mov	r3, r0
    c4ca:	2b00      	cmp	r3, #0
    c4cc:	d001      	beq.n	c4d2 <usbdc_get_dev_desc+0x62>
		return false;
    c4ce:	2300      	movs	r3, #0
    c4d0:	e000      	b.n	c4d4 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c4d2:	2301      	movs	r3, #1
}
    c4d4:	4618      	mov	r0, r3
    c4d6:	3714      	adds	r7, #20
    c4d8:	46bd      	mov	sp, r7
    c4da:	bd90      	pop	{r4, r7, pc}
    c4dc:	20000cac 	.word	0x20000cac
    c4e0:	0000d1e5 	.word	0x0000d1e5
    c4e4:	0000cf55 	.word	0x0000cf55

0000c4e8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c4e8:	b590      	push	{r4, r7, lr}
    c4ea:	b087      	sub	sp, #28
    c4ec:	af00      	add	r7, sp, #0
    c4ee:	4603      	mov	r3, r0
    c4f0:	6039      	str	r1, [r7, #0]
    c4f2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c4f4:	2300      	movs	r3, #0
    c4f6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c4f8:	683b      	ldr	r3, [r7, #0]
    c4fa:	799a      	ldrb	r2, [r3, #6]
    c4fc:	79db      	ldrb	r3, [r3, #7]
    c4fe:	021b      	lsls	r3, r3, #8
    c500:	4313      	orrs	r3, r2
    c502:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c504:	683b      	ldr	r3, [r7, #0]
    c506:	885b      	ldrh	r3, [r3, #2]
    c508:	b29b      	uxth	r3, r3
    c50a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c50c:	8a7a      	ldrh	r2, [r7, #18]
    c50e:	4b1e      	ldr	r3, [pc, #120]	; (c588 <usbdc_get_cfg_desc+0xa0>)
    c510:	7f1b      	ldrb	r3, [r3, #28]
    c512:	3b01      	subs	r3, #1
    c514:	4013      	ands	r3, r2
    c516:	2b00      	cmp	r3, #0
    c518:	bf0c      	ite	eq
    c51a:	2301      	moveq	r3, #1
    c51c:	2300      	movne	r3, #0
    c51e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c520:	697b      	ldr	r3, [r7, #20]
    c522:	2b00      	cmp	r3, #0
    c524:	d10c      	bne.n	c540 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c526:	4b18      	ldr	r3, [pc, #96]	; (c588 <usbdc_get_cfg_desc+0xa0>)
    c528:	681b      	ldr	r3, [r3, #0]
    c52a:	6818      	ldr	r0, [r3, #0]
    c52c:	4b16      	ldr	r3, [pc, #88]	; (c588 <usbdc_get_cfg_desc+0xa0>)
    c52e:	681b      	ldr	r3, [r3, #0]
    c530:	6859      	ldr	r1, [r3, #4]
    c532:	7c3b      	ldrb	r3, [r7, #16]
    c534:	3301      	adds	r3, #1
    c536:	b2db      	uxtb	r3, r3
    c538:	461a      	mov	r2, r3
    c53a:	4b14      	ldr	r3, [pc, #80]	; (c58c <usbdc_get_cfg_desc+0xa4>)
    c53c:	4798      	blx	r3
    c53e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c540:	697b      	ldr	r3, [r7, #20]
    c542:	2b00      	cmp	r3, #0
    c544:	d101      	bne.n	c54a <usbdc_get_cfg_desc+0x62>
		return false;
    c546:	2300      	movs	r3, #0
    c548:	e019      	b.n	c57e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c54a:	6978      	ldr	r0, [r7, #20]
    c54c:	4b10      	ldr	r3, [pc, #64]	; (c590 <usbdc_get_cfg_desc+0xa8>)
    c54e:	4798      	blx	r3
    c550:	4603      	mov	r3, r0
    c552:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c554:	8a7a      	ldrh	r2, [r7, #18]
    c556:	89fb      	ldrh	r3, [r7, #14]
    c558:	429a      	cmp	r2, r3
    c55a:	d802      	bhi.n	c562 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c55c:	2300      	movs	r3, #0
    c55e:	747b      	strb	r3, [r7, #17]
    c560:	e001      	b.n	c566 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c562:	89fb      	ldrh	r3, [r7, #14]
    c564:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c566:	8a7a      	ldrh	r2, [r7, #18]
    c568:	7c7b      	ldrb	r3, [r7, #17]
    c56a:	79f8      	ldrb	r0, [r7, #7]
    c56c:	6979      	ldr	r1, [r7, #20]
    c56e:	4c09      	ldr	r4, [pc, #36]	; (c594 <usbdc_get_cfg_desc+0xac>)
    c570:	47a0      	blx	r4
    c572:	4603      	mov	r3, r0
    c574:	2b00      	cmp	r3, #0
    c576:	d001      	beq.n	c57c <usbdc_get_cfg_desc+0x94>
		return false;
    c578:	2300      	movs	r3, #0
    c57a:	e000      	b.n	c57e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c57c:	2301      	movs	r3, #1
}
    c57e:	4618      	mov	r0, r3
    c580:	371c      	adds	r7, #28
    c582:	46bd      	mov	sp, r7
    c584:	bd90      	pop	{r4, r7, pc}
    c586:	bf00      	nop
    c588:	20000cac 	.word	0x20000cac
    c58c:	0000d2a5 	.word	0x0000d2a5
    c590:	0000c451 	.word	0x0000c451
    c594:	0000cf55 	.word	0x0000cf55

0000c598 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c598:	b590      	push	{r4, r7, lr}
    c59a:	b085      	sub	sp, #20
    c59c:	af00      	add	r7, sp, #0
    c59e:	4603      	mov	r3, r0
    c5a0:	6039      	str	r1, [r7, #0]
    c5a2:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c5a4:	683b      	ldr	r3, [r7, #0]
    c5a6:	799a      	ldrb	r2, [r3, #6]
    c5a8:	79db      	ldrb	r3, [r3, #7]
    c5aa:	021b      	lsls	r3, r3, #8
    c5ac:	4313      	orrs	r3, r2
    c5ae:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c5b0:	683b      	ldr	r3, [r7, #0]
    c5b2:	885b      	ldrh	r3, [r3, #2]
    c5b4:	b29b      	uxth	r3, r3
    c5b6:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c5b8:	89fa      	ldrh	r2, [r7, #14]
    c5ba:	4b1a      	ldr	r3, [pc, #104]	; (c624 <usbdc_get_str_desc+0x8c>)
    c5bc:	7f1b      	ldrb	r3, [r3, #28]
    c5be:	3b01      	subs	r3, #1
    c5c0:	4013      	ands	r3, r2
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	bf0c      	ite	eq
    c5c6:	2301      	moveq	r3, #1
    c5c8:	2300      	movne	r3, #0
    c5ca:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c5cc:	4b15      	ldr	r3, [pc, #84]	; (c624 <usbdc_get_str_desc+0x8c>)
    c5ce:	681b      	ldr	r3, [r3, #0]
    c5d0:	6818      	ldr	r0, [r3, #0]
    c5d2:	4b14      	ldr	r3, [pc, #80]	; (c624 <usbdc_get_str_desc+0x8c>)
    c5d4:	681b      	ldr	r3, [r3, #0]
    c5d6:	685b      	ldr	r3, [r3, #4]
    c5d8:	7b3a      	ldrb	r2, [r7, #12]
    c5da:	4619      	mov	r1, r3
    c5dc:	4b12      	ldr	r3, [pc, #72]	; (c628 <usbdc_get_str_desc+0x90>)
    c5de:	4798      	blx	r3
    c5e0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c5e2:	68bb      	ldr	r3, [r7, #8]
    c5e4:	2b00      	cmp	r3, #0
    c5e6:	d101      	bne.n	c5ec <usbdc_get_str_desc+0x54>
		return false;
    c5e8:	2300      	movs	r3, #0
    c5ea:	e017      	b.n	c61c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c5ec:	68bb      	ldr	r3, [r7, #8]
    c5ee:	781b      	ldrb	r3, [r3, #0]
    c5f0:	b29b      	uxth	r3, r3
    c5f2:	89fa      	ldrh	r2, [r7, #14]
    c5f4:	429a      	cmp	r2, r3
    c5f6:	d802      	bhi.n	c5fe <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c5f8:	2300      	movs	r3, #0
    c5fa:	737b      	strb	r3, [r7, #13]
    c5fc:	e002      	b.n	c604 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c5fe:	68bb      	ldr	r3, [r7, #8]
    c600:	781b      	ldrb	r3, [r3, #0]
    c602:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c604:	89fa      	ldrh	r2, [r7, #14]
    c606:	7b7b      	ldrb	r3, [r7, #13]
    c608:	79f8      	ldrb	r0, [r7, #7]
    c60a:	68b9      	ldr	r1, [r7, #8]
    c60c:	4c07      	ldr	r4, [pc, #28]	; (c62c <usbdc_get_str_desc+0x94>)
    c60e:	47a0      	blx	r4
    c610:	4603      	mov	r3, r0
    c612:	2b00      	cmp	r3, #0
    c614:	d001      	beq.n	c61a <usbdc_get_str_desc+0x82>
		return false;
    c616:	2300      	movs	r3, #0
    c618:	e000      	b.n	c61c <usbdc_get_str_desc+0x84>
	}
	return true;
    c61a:	2301      	movs	r3, #1
}
    c61c:	4618      	mov	r0, r3
    c61e:	3714      	adds	r7, #20
    c620:	46bd      	mov	sp, r7
    c622:	bd90      	pop	{r4, r7, pc}
    c624:	20000cac 	.word	0x20000cac
    c628:	0000d31d 	.word	0x0000d31d
    c62c:	0000cf55 	.word	0x0000cf55

0000c630 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c630:	b580      	push	{r7, lr}
    c632:	b084      	sub	sp, #16
    c634:	af00      	add	r7, sp, #0
    c636:	4603      	mov	r3, r0
    c638:	6039      	str	r1, [r7, #0]
    c63a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c63c:	683b      	ldr	r3, [r7, #0]
    c63e:	885b      	ldrh	r3, [r3, #2]
    c640:	b29b      	uxth	r3, r3
    c642:	0a1b      	lsrs	r3, r3, #8
    c644:	b29b      	uxth	r3, r3
    c646:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c648:	7bfb      	ldrb	r3, [r7, #15]
    c64a:	2b02      	cmp	r3, #2
    c64c:	d00d      	beq.n	c66a <usbdc_get_desc_req+0x3a>
    c64e:	2b03      	cmp	r3, #3
    c650:	d012      	beq.n	c678 <usbdc_get_desc_req+0x48>
    c652:	2b01      	cmp	r3, #1
    c654:	d002      	beq.n	c65c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c656:	bf00      	nop
	}
	return false;
    c658:	2300      	movs	r3, #0
    c65a:	e013      	b.n	c684 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c65c:	79fb      	ldrb	r3, [r7, #7]
    c65e:	6839      	ldr	r1, [r7, #0]
    c660:	4618      	mov	r0, r3
    c662:	4b0a      	ldr	r3, [pc, #40]	; (c68c <usbdc_get_desc_req+0x5c>)
    c664:	4798      	blx	r3
    c666:	4603      	mov	r3, r0
    c668:	e00c      	b.n	c684 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c66a:	79fb      	ldrb	r3, [r7, #7]
    c66c:	6839      	ldr	r1, [r7, #0]
    c66e:	4618      	mov	r0, r3
    c670:	4b07      	ldr	r3, [pc, #28]	; (c690 <usbdc_get_desc_req+0x60>)
    c672:	4798      	blx	r3
    c674:	4603      	mov	r3, r0
    c676:	e005      	b.n	c684 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c678:	79fb      	ldrb	r3, [r7, #7]
    c67a:	6839      	ldr	r1, [r7, #0]
    c67c:	4618      	mov	r0, r3
    c67e:	4b05      	ldr	r3, [pc, #20]	; (c694 <usbdc_get_desc_req+0x64>)
    c680:	4798      	blx	r3
    c682:	4603      	mov	r3, r0
}
    c684:	4618      	mov	r0, r3
    c686:	3710      	adds	r7, #16
    c688:	46bd      	mov	sp, r7
    c68a:	bd80      	pop	{r7, pc}
    c68c:	0000c471 	.word	0x0000c471
    c690:	0000c4e9 	.word	0x0000c4e9
    c694:	0000c599 	.word	0x0000c599

0000c698 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c698:	b590      	push	{r4, r7, lr}
    c69a:	b085      	sub	sp, #20
    c69c:	af00      	add	r7, sp, #0
    c69e:	4603      	mov	r3, r0
    c6a0:	6039      	str	r1, [r7, #0]
    c6a2:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c6a4:	683b      	ldr	r3, [r7, #0]
    c6a6:	781b      	ldrb	r3, [r3, #0]
    c6a8:	f003 031f 	and.w	r3, r3, #31
    c6ac:	2b00      	cmp	r3, #0
    c6ae:	db1b      	blt.n	c6e8 <usbdc_get_status_req+0x50>
    c6b0:	2b01      	cmp	r3, #1
    c6b2:	dd02      	ble.n	c6ba <usbdc_get_status_req+0x22>
    c6b4:	2b02      	cmp	r3, #2
    c6b6:	d003      	beq.n	c6c0 <usbdc_get_status_req+0x28>
    c6b8:	e016      	b.n	c6e8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c6ba:	2300      	movs	r3, #0
    c6bc:	60fb      	str	r3, [r7, #12]
		break;
    c6be:	e015      	b.n	c6ec <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c6c0:	683b      	ldr	r3, [r7, #0]
    c6c2:	889b      	ldrh	r3, [r3, #4]
    c6c4:	b29b      	uxth	r3, r3
    c6c6:	b2db      	uxtb	r3, r3
    c6c8:	2102      	movs	r1, #2
    c6ca:	4618      	mov	r0, r3
    c6cc:	4b0f      	ldr	r3, [pc, #60]	; (c70c <usbdc_get_status_req+0x74>)
    c6ce:	4798      	blx	r3
    c6d0:	4603      	mov	r3, r0
    c6d2:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c6d4:	68fb      	ldr	r3, [r7, #12]
    c6d6:	2b00      	cmp	r3, #0
    c6d8:	da01      	bge.n	c6de <usbdc_get_status_req+0x46>
			return false;
    c6da:	2300      	movs	r3, #0
    c6dc:	e012      	b.n	c704 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c6de:	68fb      	ldr	r3, [r7, #12]
    c6e0:	f003 0301 	and.w	r3, r3, #1
    c6e4:	60fb      	str	r3, [r7, #12]
		break;
    c6e6:	e001      	b.n	c6ec <usbdc_get_status_req+0x54>
	default:
		return false;
    c6e8:	2300      	movs	r3, #0
    c6ea:	e00b      	b.n	c704 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c6ec:	4b08      	ldr	r3, [pc, #32]	; (c710 <usbdc_get_status_req+0x78>)
    c6ee:	695b      	ldr	r3, [r3, #20]
    c6f0:	89ba      	ldrh	r2, [r7, #12]
    c6f2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c6f4:	4b06      	ldr	r3, [pc, #24]	; (c710 <usbdc_get_status_req+0x78>)
    c6f6:	6959      	ldr	r1, [r3, #20]
    c6f8:	79f8      	ldrb	r0, [r7, #7]
    c6fa:	2300      	movs	r3, #0
    c6fc:	2202      	movs	r2, #2
    c6fe:	4c05      	ldr	r4, [pc, #20]	; (c714 <usbdc_get_status_req+0x7c>)
    c700:	47a0      	blx	r4
	return true;
    c702:	2301      	movs	r3, #1
}
    c704:	4618      	mov	r0, r3
    c706:	3714      	adds	r7, #20
    c708:	46bd      	mov	sp, r7
    c70a:	bd90      	pop	{r4, r7, pc}
    c70c:	000033cd 	.word	0x000033cd
    c710:	20000cac 	.word	0x20000cac
    c714:	0000cf55 	.word	0x0000cf55

0000c718 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c718:	b590      	push	{r4, r7, lr}
    c71a:	b085      	sub	sp, #20
    c71c:	af00      	add	r7, sp, #0
    c71e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c720:	4b1f      	ldr	r3, [pc, #124]	; (c7a0 <usbdc_get_interface+0x88>)
    c722:	691b      	ldr	r3, [r3, #16]
    c724:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c726:	4b1e      	ldr	r3, [pc, #120]	; (c7a0 <usbdc_get_interface+0x88>)
    c728:	7f5b      	ldrb	r3, [r3, #29]
    c72a:	461a      	mov	r2, r3
    c72c:	687b      	ldr	r3, [r7, #4]
    c72e:	889b      	ldrh	r3, [r3, #4]
    c730:	b29b      	uxth	r3, r3
    c732:	fa42 f303 	asr.w	r3, r2, r3
    c736:	f003 0301 	and.w	r3, r3, #1
    c73a:	2b00      	cmp	r3, #0
    c73c:	d128      	bne.n	c790 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c73e:	4b18      	ldr	r3, [pc, #96]	; (c7a0 <usbdc_get_interface+0x88>)
    c740:	695b      	ldr	r3, [r3, #20]
    c742:	2200      	movs	r2, #0
    c744:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c746:	4b16      	ldr	r3, [pc, #88]	; (c7a0 <usbdc_get_interface+0x88>)
    c748:	6959      	ldr	r1, [r3, #20]
    c74a:	2300      	movs	r3, #0
    c74c:	2201      	movs	r2, #1
    c74e:	2000      	movs	r0, #0
    c750:	4c14      	ldr	r4, [pc, #80]	; (c7a4 <usbdc_get_interface+0x8c>)
    c752:	47a0      	blx	r4
		return true;
    c754:	2301      	movs	r3, #1
    c756:	e01f      	b.n	c798 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c758:	68fb      	ldr	r3, [r7, #12]
    c75a:	685b      	ldr	r3, [r3, #4]
    c75c:	687a      	ldr	r2, [r7, #4]
    c75e:	2102      	movs	r1, #2
    c760:	68f8      	ldr	r0, [r7, #12]
    c762:	4798      	blx	r3
    c764:	60b8      	str	r0, [r7, #8]
    c766:	68bb      	ldr	r3, [r7, #8]
    c768:	2b00      	cmp	r3, #0
    c76a:	da03      	bge.n	c774 <usbdc_get_interface+0x5c>
			func = func->next;
    c76c:	68fb      	ldr	r3, [r7, #12]
    c76e:	681b      	ldr	r3, [r3, #0]
    c770:	60fb      	str	r3, [r7, #12]
    c772:	e00d      	b.n	c790 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c774:	4b0a      	ldr	r3, [pc, #40]	; (c7a0 <usbdc_get_interface+0x88>)
    c776:	695b      	ldr	r3, [r3, #20]
    c778:	68ba      	ldr	r2, [r7, #8]
    c77a:	b2d2      	uxtb	r2, r2
    c77c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c77e:	4b08      	ldr	r3, [pc, #32]	; (c7a0 <usbdc_get_interface+0x88>)
    c780:	6959      	ldr	r1, [r3, #20]
    c782:	2300      	movs	r3, #0
    c784:	2201      	movs	r2, #1
    c786:	2000      	movs	r0, #0
    c788:	4c06      	ldr	r4, [pc, #24]	; (c7a4 <usbdc_get_interface+0x8c>)
    c78a:	47a0      	blx	r4
			return true;
    c78c:	2301      	movs	r3, #1
    c78e:	e003      	b.n	c798 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c790:	68fb      	ldr	r3, [r7, #12]
    c792:	2b00      	cmp	r3, #0
    c794:	d1e0      	bne.n	c758 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c796:	2300      	movs	r3, #0
}
    c798:	4618      	mov	r0, r3
    c79a:	3714      	adds	r7, #20
    c79c:	46bd      	mov	sp, r7
    c79e:	bd90      	pop	{r4, r7, pc}
    c7a0:	20000cac 	.word	0x20000cac
    c7a4:	0000cf55 	.word	0x0000cf55

0000c7a8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c7a8:	b590      	push	{r4, r7, lr}
    c7aa:	b083      	sub	sp, #12
    c7ac:	af00      	add	r7, sp, #0
    c7ae:	4603      	mov	r3, r0
    c7b0:	6039      	str	r1, [r7, #0]
    c7b2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c7b4:	683b      	ldr	r3, [r7, #0]
    c7b6:	785b      	ldrb	r3, [r3, #1]
    c7b8:	2b0a      	cmp	r3, #10
    c7ba:	d83a      	bhi.n	c832 <usbdc_get_req+0x8a>
    c7bc:	a201      	add	r2, pc, #4	; (adr r2, c7c4 <usbdc_get_req+0x1c>)
    c7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c7c2:	bf00      	nop
    c7c4:	0000c81b 	.word	0x0000c81b
    c7c8:	0000c833 	.word	0x0000c833
    c7cc:	0000c833 	.word	0x0000c833
    c7d0:	0000c833 	.word	0x0000c833
    c7d4:	0000c833 	.word	0x0000c833
    c7d8:	0000c833 	.word	0x0000c833
    c7dc:	0000c7f1 	.word	0x0000c7f1
    c7e0:	0000c833 	.word	0x0000c833
    c7e4:	0000c7ff 	.word	0x0000c7ff
    c7e8:	0000c833 	.word	0x0000c833
    c7ec:	0000c829 	.word	0x0000c829
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c7f0:	79fb      	ldrb	r3, [r7, #7]
    c7f2:	6839      	ldr	r1, [r7, #0]
    c7f4:	4618      	mov	r0, r3
    c7f6:	4b11      	ldr	r3, [pc, #68]	; (c83c <usbdc_get_req+0x94>)
    c7f8:	4798      	blx	r3
    c7fa:	4603      	mov	r3, r0
    c7fc:	e01a      	b.n	c834 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c7fe:	4b10      	ldr	r3, [pc, #64]	; (c840 <usbdc_get_req+0x98>)
    c800:	695b      	ldr	r3, [r3, #20]
    c802:	4a0f      	ldr	r2, [pc, #60]	; (c840 <usbdc_get_req+0x98>)
    c804:	7ed2      	ldrb	r2, [r2, #27]
    c806:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c808:	4b0d      	ldr	r3, [pc, #52]	; (c840 <usbdc_get_req+0x98>)
    c80a:	6959      	ldr	r1, [r3, #20]
    c80c:	79f8      	ldrb	r0, [r7, #7]
    c80e:	2300      	movs	r3, #0
    c810:	2201      	movs	r2, #1
    c812:	4c0c      	ldr	r4, [pc, #48]	; (c844 <usbdc_get_req+0x9c>)
    c814:	47a0      	blx	r4
		return true;
    c816:	2301      	movs	r3, #1
    c818:	e00c      	b.n	c834 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c81a:	79fb      	ldrb	r3, [r7, #7]
    c81c:	6839      	ldr	r1, [r7, #0]
    c81e:	4618      	mov	r0, r3
    c820:	4b09      	ldr	r3, [pc, #36]	; (c848 <usbdc_get_req+0xa0>)
    c822:	4798      	blx	r3
    c824:	4603      	mov	r3, r0
    c826:	e005      	b.n	c834 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c828:	6838      	ldr	r0, [r7, #0]
    c82a:	4b08      	ldr	r3, [pc, #32]	; (c84c <usbdc_get_req+0xa4>)
    c82c:	4798      	blx	r3
    c82e:	4603      	mov	r3, r0
    c830:	e000      	b.n	c834 <usbdc_get_req+0x8c>
	default:
		return false;
    c832:	2300      	movs	r3, #0
	}
}
    c834:	4618      	mov	r0, r3
    c836:	370c      	adds	r7, #12
    c838:	46bd      	mov	sp, r7
    c83a:	bd90      	pop	{r4, r7, pc}
    c83c:	0000c631 	.word	0x0000c631
    c840:	20000cac 	.word	0x20000cac
    c844:	0000cf55 	.word	0x0000cf55
    c848:	0000c699 	.word	0x0000c699
    c84c:	0000c719 	.word	0x0000c719

0000c850 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c850:	b590      	push	{r4, r7, lr}
    c852:	b083      	sub	sp, #12
    c854:	af00      	add	r7, sp, #0
    c856:	4603      	mov	r3, r0
    c858:	6039      	str	r1, [r7, #0]
    c85a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c85c:	683b      	ldr	r3, [r7, #0]
    c85e:	781b      	ldrb	r3, [r3, #0]
    c860:	f003 031f 	and.w	r3, r3, #31
    c864:	2b02      	cmp	r3, #2
    c866:	d116      	bne.n	c896 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c868:	683b      	ldr	r3, [r7, #0]
    c86a:	88db      	ldrh	r3, [r3, #6]
    c86c:	b29b      	uxth	r3, r3
    c86e:	2b00      	cmp	r3, #0
    c870:	d001      	beq.n	c876 <usbdc_clear_ftr_req+0x26>
			return false;
    c872:	2300      	movs	r3, #0
    c874:	e010      	b.n	c898 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c876:	683b      	ldr	r3, [r7, #0]
    c878:	889b      	ldrh	r3, [r3, #4]
    c87a:	b29b      	uxth	r3, r3
    c87c:	b2db      	uxtb	r3, r3
    c87e:	2100      	movs	r1, #0
    c880:	4618      	mov	r0, r3
    c882:	4b07      	ldr	r3, [pc, #28]	; (c8a0 <usbdc_clear_ftr_req+0x50>)
    c884:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c886:	79f8      	ldrb	r0, [r7, #7]
    c888:	2301      	movs	r3, #1
    c88a:	2200      	movs	r2, #0
    c88c:	2100      	movs	r1, #0
    c88e:	4c05      	ldr	r4, [pc, #20]	; (c8a4 <usbdc_clear_ftr_req+0x54>)
    c890:	47a0      	blx	r4
		return true;
    c892:	2301      	movs	r3, #1
    c894:	e000      	b.n	c898 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c896:	2300      	movs	r3, #0
	}
}
    c898:	4618      	mov	r0, r3
    c89a:	370c      	adds	r7, #12
    c89c:	46bd      	mov	sp, r7
    c89e:	bd90      	pop	{r4, r7, pc}
    c8a0:	000033cd 	.word	0x000033cd
    c8a4:	0000cf55 	.word	0x0000cf55

0000c8a8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c8a8:	b590      	push	{r4, r7, lr}
    c8aa:	b083      	sub	sp, #12
    c8ac:	af00      	add	r7, sp, #0
    c8ae:	4603      	mov	r3, r0
    c8b0:	6039      	str	r1, [r7, #0]
    c8b2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c8b4:	683b      	ldr	r3, [r7, #0]
    c8b6:	781b      	ldrb	r3, [r3, #0]
    c8b8:	f003 031f 	and.w	r3, r3, #31
    c8bc:	2b02      	cmp	r3, #2
    c8be:	d116      	bne.n	c8ee <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c8c0:	683b      	ldr	r3, [r7, #0]
    c8c2:	88db      	ldrh	r3, [r3, #6]
    c8c4:	b29b      	uxth	r3, r3
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	d001      	beq.n	c8ce <usbdc_set_ftr_req+0x26>
			return false;
    c8ca:	2300      	movs	r3, #0
    c8cc:	e010      	b.n	c8f0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c8ce:	683b      	ldr	r3, [r7, #0]
    c8d0:	889b      	ldrh	r3, [r3, #4]
    c8d2:	b29b      	uxth	r3, r3
    c8d4:	b2db      	uxtb	r3, r3
    c8d6:	2101      	movs	r1, #1
    c8d8:	4618      	mov	r0, r3
    c8da:	4b07      	ldr	r3, [pc, #28]	; (c8f8 <usbdc_set_ftr_req+0x50>)
    c8dc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c8de:	79f8      	ldrb	r0, [r7, #7]
    c8e0:	2301      	movs	r3, #1
    c8e2:	2200      	movs	r2, #0
    c8e4:	2100      	movs	r1, #0
    c8e6:	4c05      	ldr	r4, [pc, #20]	; (c8fc <usbdc_set_ftr_req+0x54>)
    c8e8:	47a0      	blx	r4
		return true;
    c8ea:	2301      	movs	r3, #1
    c8ec:	e000      	b.n	c8f0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c8ee:	2300      	movs	r3, #0
	}
}
    c8f0:	4618      	mov	r0, r3
    c8f2:	370c      	adds	r7, #12
    c8f4:	46bd      	mov	sp, r7
    c8f6:	bd90      	pop	{r4, r7, pc}
    c8f8:	000033cd 	.word	0x000033cd
    c8fc:	0000cf55 	.word	0x0000cf55

0000c900 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c900:	b580      	push	{r7, lr}
    c902:	b082      	sub	sp, #8
    c904:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c906:	4b0a      	ldr	r3, [pc, #40]	; (c930 <usbdc_unconfig+0x30>)
    c908:	691b      	ldr	r3, [r3, #16]
    c90a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c90c:	e008      	b.n	c920 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c90e:	687b      	ldr	r3, [r7, #4]
    c910:	685b      	ldr	r3, [r3, #4]
    c912:	2200      	movs	r2, #0
    c914:	2101      	movs	r1, #1
    c916:	6878      	ldr	r0, [r7, #4]
    c918:	4798      	blx	r3
		func = func->next;
    c91a:	687b      	ldr	r3, [r7, #4]
    c91c:	681b      	ldr	r3, [r3, #0]
    c91e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c920:	687b      	ldr	r3, [r7, #4]
    c922:	2b00      	cmp	r3, #0
    c924:	d1f3      	bne.n	c90e <usbdc_unconfig+0xe>
	}
}
    c926:	bf00      	nop
    c928:	3708      	adds	r7, #8
    c92a:	46bd      	mov	sp, r7
    c92c:	bd80      	pop	{r7, pc}
    c92e:	bf00      	nop
    c930:	20000cac 	.word	0x20000cac

0000c934 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c934:	b580      	push	{r7, lr}
    c936:	b088      	sub	sp, #32
    c938:	af00      	add	r7, sp, #0
    c93a:	4603      	mov	r3, r0
    c93c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c93e:	2300      	movs	r3, #0
    c940:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c942:	23ff      	movs	r3, #255	; 0xff
    c944:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c946:	79fb      	ldrb	r3, [r7, #7]
    c948:	2b00      	cmp	r3, #0
    c94a:	d103      	bne.n	c954 <usbdc_set_config+0x20>
		usbdc_unconfig();
    c94c:	4b2e      	ldr	r3, [pc, #184]	; (ca08 <usbdc_set_config+0xd4>)
    c94e:	4798      	blx	r3
		return true;
    c950:	2301      	movs	r3, #1
    c952:	e055      	b.n	ca00 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c954:	69bb      	ldr	r3, [r7, #24]
    c956:	2b00      	cmp	r3, #0
    c958:	d10a      	bne.n	c970 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c95a:	4b2c      	ldr	r3, [pc, #176]	; (ca0c <usbdc_set_config+0xd8>)
    c95c:	681b      	ldr	r3, [r3, #0]
    c95e:	6818      	ldr	r0, [r3, #0]
    c960:	4b2a      	ldr	r3, [pc, #168]	; (ca0c <usbdc_set_config+0xd8>)
    c962:	681b      	ldr	r3, [r3, #0]
    c964:	685b      	ldr	r3, [r3, #4]
    c966:	79fa      	ldrb	r2, [r7, #7]
    c968:	4619      	mov	r1, r3
    c96a:	4b29      	ldr	r3, [pc, #164]	; (ca10 <usbdc_set_config+0xdc>)
    c96c:	4798      	blx	r3
    c96e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c970:	69bb      	ldr	r3, [r7, #24]
    c972:	2b00      	cmp	r3, #0
    c974:	d101      	bne.n	c97a <usbdc_set_config+0x46>
		return false;
    c976:	2300      	movs	r3, #0
    c978:	e042      	b.n	ca00 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c97a:	69b8      	ldr	r0, [r7, #24]
    c97c:	4b25      	ldr	r3, [pc, #148]	; (ca14 <usbdc_set_config+0xe0>)
    c97e:	4798      	blx	r3
    c980:	4603      	mov	r3, r0
    c982:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c984:	8abb      	ldrh	r3, [r7, #20]
    c986:	69ba      	ldr	r2, [r7, #24]
    c988:	4413      	add	r3, r2
    c98a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c98c:	693b      	ldr	r3, [r7, #16]
    c98e:	2204      	movs	r2, #4
    c990:	4619      	mov	r1, r3
    c992:	69b8      	ldr	r0, [r7, #24]
    c994:	4b20      	ldr	r3, [pc, #128]	; (ca18 <usbdc_set_config+0xe4>)
    c996:	4798      	blx	r3
    c998:	4603      	mov	r3, r0
    c99a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c99c:	e02c      	b.n	c9f8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c99e:	68fb      	ldr	r3, [r7, #12]
    c9a0:	3302      	adds	r3, #2
    c9a2:	781b      	ldrb	r3, [r3, #0]
    c9a4:	7dfa      	ldrb	r2, [r7, #23]
    c9a6:	429a      	cmp	r2, r3
    c9a8:	d018      	beq.n	c9dc <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c9aa:	68fb      	ldr	r3, [r7, #12]
    c9ac:	789b      	ldrb	r3, [r3, #2]
    c9ae:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c9b0:	4b16      	ldr	r3, [pc, #88]	; (ca0c <usbdc_set_config+0xd8>)
    c9b2:	691b      	ldr	r3, [r3, #16]
    c9b4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c9b6:	e00c      	b.n	c9d2 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c9b8:	69fb      	ldr	r3, [r7, #28]
    c9ba:	685b      	ldr	r3, [r3, #4]
    c9bc:	f107 020c 	add.w	r2, r7, #12
    c9c0:	2100      	movs	r1, #0
    c9c2:	69f8      	ldr	r0, [r7, #28]
    c9c4:	4798      	blx	r3
    c9c6:	4603      	mov	r3, r0
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	d006      	beq.n	c9da <usbdc_set_config+0xa6>
					func = func->next;
    c9cc:	69fb      	ldr	r3, [r7, #28]
    c9ce:	681b      	ldr	r3, [r3, #0]
    c9d0:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c9d2:	69fb      	ldr	r3, [r7, #28]
    c9d4:	2b00      	cmp	r3, #0
    c9d6:	d1ef      	bne.n	c9b8 <usbdc_set_config+0x84>
    c9d8:	e000      	b.n	c9dc <usbdc_set_config+0xa8>
				} else {
					break;
    c9da:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c9dc:	68fb      	ldr	r3, [r7, #12]
    c9de:	4618      	mov	r0, r3
    c9e0:	4b0e      	ldr	r3, [pc, #56]	; (ca1c <usbdc_set_config+0xe8>)
    c9e2:	4798      	blx	r3
    c9e4:	4603      	mov	r3, r0
    c9e6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c9e8:	68fb      	ldr	r3, [r7, #12]
    c9ea:	6939      	ldr	r1, [r7, #16]
    c9ec:	2204      	movs	r2, #4
    c9ee:	4618      	mov	r0, r3
    c9f0:	4b09      	ldr	r3, [pc, #36]	; (ca18 <usbdc_set_config+0xe4>)
    c9f2:	4798      	blx	r3
    c9f4:	4603      	mov	r3, r0
    c9f6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c9f8:	68fb      	ldr	r3, [r7, #12]
    c9fa:	2b00      	cmp	r3, #0
    c9fc:	d1cf      	bne.n	c99e <usbdc_set_config+0x6a>
	}
	return true;
    c9fe:	2301      	movs	r3, #1
}
    ca00:	4618      	mov	r0, r3
    ca02:	3720      	adds	r7, #32
    ca04:	46bd      	mov	sp, r7
    ca06:	bd80      	pop	{r7, pc}
    ca08:	0000c901 	.word	0x0000c901
    ca0c:	20000cac 	.word	0x20000cac
    ca10:	0000d2a5 	.word	0x0000d2a5
    ca14:	0000c451 	.word	0x0000c451
    ca18:	0000d1e5 	.word	0x0000d1e5
    ca1c:	0000c42d 	.word	0x0000c42d

0000ca20 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    ca20:	b580      	push	{r7, lr}
    ca22:	b082      	sub	sp, #8
    ca24:	af00      	add	r7, sp, #0
    ca26:	4603      	mov	r3, r0
    ca28:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    ca2a:	79fb      	ldrb	r3, [r7, #7]
    ca2c:	4618      	mov	r0, r3
    ca2e:	4b03      	ldr	r3, [pc, #12]	; (ca3c <usbdc_set_address+0x1c>)
    ca30:	4798      	blx	r3
}
    ca32:	bf00      	nop
    ca34:	3708      	adds	r7, #8
    ca36:	46bd      	mov	sp, r7
    ca38:	bd80      	pop	{r7, pc}
    ca3a:	bf00      	nop
    ca3c:	00002fe9 	.word	0x00002fe9

0000ca40 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    ca40:	b590      	push	{r4, r7, lr}
    ca42:	b087      	sub	sp, #28
    ca44:	af00      	add	r7, sp, #0
    ca46:	4603      	mov	r3, r0
    ca48:	460a      	mov	r2, r1
    ca4a:	80fb      	strh	r3, [r7, #6]
    ca4c:	4613      	mov	r3, r2
    ca4e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    ca50:	2300      	movs	r3, #0
    ca52:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    ca54:	693b      	ldr	r3, [r7, #16]
    ca56:	2b00      	cmp	r3, #0
    ca58:	d10b      	bne.n	ca72 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ca5a:	4b43      	ldr	r3, [pc, #268]	; (cb68 <usbdc_set_interface+0x128>)
    ca5c:	681b      	ldr	r3, [r3, #0]
    ca5e:	6818      	ldr	r0, [r3, #0]
    ca60:	4b41      	ldr	r3, [pc, #260]	; (cb68 <usbdc_set_interface+0x128>)
    ca62:	681b      	ldr	r3, [r3, #0]
    ca64:	6859      	ldr	r1, [r3, #4]
    ca66:	4b40      	ldr	r3, [pc, #256]	; (cb68 <usbdc_set_interface+0x128>)
    ca68:	7edb      	ldrb	r3, [r3, #27]
    ca6a:	461a      	mov	r2, r3
    ca6c:	4b3f      	ldr	r3, [pc, #252]	; (cb6c <usbdc_set_interface+0x12c>)
    ca6e:	4798      	blx	r3
    ca70:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    ca72:	693b      	ldr	r3, [r7, #16]
    ca74:	2b00      	cmp	r3, #0
    ca76:	d101      	bne.n	ca7c <usbdc_set_interface+0x3c>
		return false;
    ca78:	2300      	movs	r3, #0
    ca7a:	e071      	b.n	cb60 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    ca7c:	693b      	ldr	r3, [r7, #16]
    ca7e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    ca80:	6938      	ldr	r0, [r7, #16]
    ca82:	4b3b      	ldr	r3, [pc, #236]	; (cb70 <usbdc_set_interface+0x130>)
    ca84:	4798      	blx	r3
    ca86:	4603      	mov	r3, r0
    ca88:	461a      	mov	r2, r3
    ca8a:	693b      	ldr	r3, [r7, #16]
    ca8c:	4413      	add	r3, r2
    ca8e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    ca90:	68bb      	ldr	r3, [r7, #8]
    ca92:	68f9      	ldr	r1, [r7, #12]
    ca94:	2204      	movs	r2, #4
    ca96:	4618      	mov	r0, r3
    ca98:	4b36      	ldr	r3, [pc, #216]	; (cb74 <usbdc_set_interface+0x134>)
    ca9a:	4798      	blx	r3
    ca9c:	6138      	str	r0, [r7, #16]
    ca9e:	693b      	ldr	r3, [r7, #16]
    caa0:	2b00      	cmp	r3, #0
    caa2:	d113      	bne.n	cacc <usbdc_set_interface+0x8c>
		return false;
    caa4:	2300      	movs	r3, #0
    caa6:	e05b      	b.n	cb60 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    caa8:	68bb      	ldr	r3, [r7, #8]
    caaa:	4618      	mov	r0, r3
    caac:	4b32      	ldr	r3, [pc, #200]	; (cb78 <usbdc_set_interface+0x138>)
    caae:	4798      	blx	r3
    cab0:	4603      	mov	r3, r0
    cab2:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cab4:	68bb      	ldr	r3, [r7, #8]
    cab6:	68f9      	ldr	r1, [r7, #12]
    cab8:	2204      	movs	r2, #4
    caba:	4618      	mov	r0, r3
    cabc:	4b2d      	ldr	r3, [pc, #180]	; (cb74 <usbdc_set_interface+0x134>)
    cabe:	4798      	blx	r3
    cac0:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    cac2:	693b      	ldr	r3, [r7, #16]
    cac4:	2b00      	cmp	r3, #0
    cac6:	d101      	bne.n	cacc <usbdc_set_interface+0x8c>
			return false;
    cac8:	2300      	movs	r3, #0
    caca:	e049      	b.n	cb60 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    cacc:	693b      	ldr	r3, [r7, #16]
    cace:	3302      	adds	r3, #2
    cad0:	781b      	ldrb	r3, [r3, #0]
    cad2:	b29b      	uxth	r3, r3
    cad4:	88ba      	ldrh	r2, [r7, #4]
    cad6:	429a      	cmp	r2, r3
    cad8:	d1e6      	bne.n	caa8 <usbdc_set_interface+0x68>
    cada:	693b      	ldr	r3, [r7, #16]
    cadc:	3303      	adds	r3, #3
    cade:	781b      	ldrb	r3, [r3, #0]
    cae0:	b29b      	uxth	r3, r3
    cae2:	88fa      	ldrh	r2, [r7, #6]
    cae4:	429a      	cmp	r2, r3
    cae6:	d1df      	bne.n	caa8 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    cae8:	693b      	ldr	r3, [r7, #16]
    caea:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    caec:	4b1e      	ldr	r3, [pc, #120]	; (cb68 <usbdc_set_interface+0x128>)
    caee:	691b      	ldr	r3, [r3, #16]
    caf0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    caf2:	e031      	b.n	cb58 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    caf4:	697b      	ldr	r3, [r7, #20]
    caf6:	685b      	ldr	r3, [r3, #4]
    caf8:	f107 0208 	add.w	r2, r7, #8
    cafc:	2101      	movs	r1, #1
    cafe:	6978      	ldr	r0, [r7, #20]
    cb00:	4798      	blx	r3
    cb02:	4603      	mov	r3, r0
    cb04:	2b00      	cmp	r3, #0
    cb06:	d003      	beq.n	cb10 <usbdc_set_interface+0xd0>
			func = func->next;
    cb08:	697b      	ldr	r3, [r7, #20]
    cb0a:	681b      	ldr	r3, [r3, #0]
    cb0c:	617b      	str	r3, [r7, #20]
    cb0e:	e023      	b.n	cb58 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    cb10:	697b      	ldr	r3, [r7, #20]
    cb12:	685b      	ldr	r3, [r3, #4]
    cb14:	f107 0208 	add.w	r2, r7, #8
    cb18:	2100      	movs	r1, #0
    cb1a:	6978      	ldr	r0, [r7, #20]
    cb1c:	4798      	blx	r3
    cb1e:	4603      	mov	r3, r0
    cb20:	2b00      	cmp	r3, #0
    cb22:	d117      	bne.n	cb54 <usbdc_set_interface+0x114>
			if (alt_set) {
    cb24:	88fb      	ldrh	r3, [r7, #6]
    cb26:	2b00      	cmp	r3, #0
    cb28:	d00c      	beq.n	cb44 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    cb2a:	4b0f      	ldr	r3, [pc, #60]	; (cb68 <usbdc_set_interface+0x128>)
    cb2c:	7f5b      	ldrb	r3, [r3, #29]
    cb2e:	b25a      	sxtb	r2, r3
    cb30:	88bb      	ldrh	r3, [r7, #4]
    cb32:	2101      	movs	r1, #1
    cb34:	fa01 f303 	lsl.w	r3, r1, r3
    cb38:	b25b      	sxtb	r3, r3
    cb3a:	4313      	orrs	r3, r2
    cb3c:	b25b      	sxtb	r3, r3
    cb3e:	b2da      	uxtb	r2, r3
    cb40:	4b09      	ldr	r3, [pc, #36]	; (cb68 <usbdc_set_interface+0x128>)
    cb42:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    cb44:	2300      	movs	r3, #0
    cb46:	2200      	movs	r2, #0
    cb48:	2100      	movs	r1, #0
    cb4a:	2000      	movs	r0, #0
    cb4c:	4c0b      	ldr	r4, [pc, #44]	; (cb7c <usbdc_set_interface+0x13c>)
    cb4e:	47a0      	blx	r4
			return true;
    cb50:	2301      	movs	r3, #1
    cb52:	e005      	b.n	cb60 <usbdc_set_interface+0x120>
		} else {
			return false;
    cb54:	2300      	movs	r3, #0
    cb56:	e003      	b.n	cb60 <usbdc_set_interface+0x120>
	while (NULL != func) {
    cb58:	697b      	ldr	r3, [r7, #20]
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d1ca      	bne.n	caf4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    cb5e:	2300      	movs	r3, #0
}
    cb60:	4618      	mov	r0, r3
    cb62:	371c      	adds	r7, #28
    cb64:	46bd      	mov	sp, r7
    cb66:	bd90      	pop	{r4, r7, pc}
    cb68:	20000cac 	.word	0x20000cac
    cb6c:	0000d2a5 	.word	0x0000d2a5
    cb70:	0000c451 	.word	0x0000c451
    cb74:	0000d1e5 	.word	0x0000d1e5
    cb78:	0000c42d 	.word	0x0000c42d
    cb7c:	0000cf55 	.word	0x0000cf55

0000cb80 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    cb80:	b590      	push	{r4, r7, lr}
    cb82:	b083      	sub	sp, #12
    cb84:	af00      	add	r7, sp, #0
    cb86:	4603      	mov	r3, r0
    cb88:	6039      	str	r1, [r7, #0]
    cb8a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cb8c:	683b      	ldr	r3, [r7, #0]
    cb8e:	785b      	ldrb	r3, [r3, #1]
    cb90:	3b01      	subs	r3, #1
    cb92:	2b0a      	cmp	r3, #10
    cb94:	d85b      	bhi.n	cc4e <usbdc_set_req+0xce>
    cb96:	a201      	add	r2, pc, #4	; (adr r2, cb9c <usbdc_set_req+0x1c>)
    cb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb9c:	0000cc1b 	.word	0x0000cc1b
    cba0:	0000cc4f 	.word	0x0000cc4f
    cba4:	0000cc29 	.word	0x0000cc29
    cba8:	0000cc4f 	.word	0x0000cc4f
    cbac:	0000cbc9 	.word	0x0000cbc9
    cbb0:	0000cc4f 	.word	0x0000cc4f
    cbb4:	0000cc4f 	.word	0x0000cc4f
    cbb8:	0000cc4f 	.word	0x0000cc4f
    cbbc:	0000cbe3 	.word	0x0000cbe3
    cbc0:	0000cc4f 	.word	0x0000cc4f
    cbc4:	0000cc37 	.word	0x0000cc37
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cbc8:	79f8      	ldrb	r0, [r7, #7]
    cbca:	2301      	movs	r3, #1
    cbcc:	2200      	movs	r2, #0
    cbce:	2100      	movs	r1, #0
    cbd0:	4c21      	ldr	r4, [pc, #132]	; (cc58 <usbdc_set_req+0xd8>)
    cbd2:	47a0      	blx	r4
    cbd4:	4603      	mov	r3, r0
    cbd6:	2b00      	cmp	r3, #0
    cbd8:	bf0c      	ite	eq
    cbda:	2301      	moveq	r3, #1
    cbdc:	2300      	movne	r3, #0
    cbde:	b2db      	uxtb	r3, r3
    cbe0:	e036      	b.n	cc50 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    cbe2:	683b      	ldr	r3, [r7, #0]
    cbe4:	885b      	ldrh	r3, [r3, #2]
    cbe6:	b29b      	uxth	r3, r3
    cbe8:	b2db      	uxtb	r3, r3
    cbea:	4618      	mov	r0, r3
    cbec:	4b1b      	ldr	r3, [pc, #108]	; (cc5c <usbdc_set_req+0xdc>)
    cbee:	4798      	blx	r3
    cbf0:	4603      	mov	r3, r0
    cbf2:	f083 0301 	eor.w	r3, r3, #1
    cbf6:	b2db      	uxtb	r3, r3
    cbf8:	2b00      	cmp	r3, #0
    cbfa:	d001      	beq.n	cc00 <usbdc_set_req+0x80>
			return false;
    cbfc:	2300      	movs	r3, #0
    cbfe:	e027      	b.n	cc50 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cc00:	79f8      	ldrb	r0, [r7, #7]
    cc02:	2301      	movs	r3, #1
    cc04:	2200      	movs	r2, #0
    cc06:	2100      	movs	r1, #0
    cc08:	4c13      	ldr	r4, [pc, #76]	; (cc58 <usbdc_set_req+0xd8>)
    cc0a:	47a0      	blx	r4
    cc0c:	4603      	mov	r3, r0
    cc0e:	2b00      	cmp	r3, #0
    cc10:	bf0c      	ite	eq
    cc12:	2301      	moveq	r3, #1
    cc14:	2300      	movne	r3, #0
    cc16:	b2db      	uxtb	r3, r3
    cc18:	e01a      	b.n	cc50 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    cc1a:	79fb      	ldrb	r3, [r7, #7]
    cc1c:	6839      	ldr	r1, [r7, #0]
    cc1e:	4618      	mov	r0, r3
    cc20:	4b0f      	ldr	r3, [pc, #60]	; (cc60 <usbdc_set_req+0xe0>)
    cc22:	4798      	blx	r3
    cc24:	4603      	mov	r3, r0
    cc26:	e013      	b.n	cc50 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    cc28:	79fb      	ldrb	r3, [r7, #7]
    cc2a:	6839      	ldr	r1, [r7, #0]
    cc2c:	4618      	mov	r0, r3
    cc2e:	4b0d      	ldr	r3, [pc, #52]	; (cc64 <usbdc_set_req+0xe4>)
    cc30:	4798      	blx	r3
    cc32:	4603      	mov	r3, r0
    cc34:	e00c      	b.n	cc50 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    cc36:	683b      	ldr	r3, [r7, #0]
    cc38:	885b      	ldrh	r3, [r3, #2]
    cc3a:	b29a      	uxth	r2, r3
    cc3c:	683b      	ldr	r3, [r7, #0]
    cc3e:	889b      	ldrh	r3, [r3, #4]
    cc40:	b29b      	uxth	r3, r3
    cc42:	4619      	mov	r1, r3
    cc44:	4610      	mov	r0, r2
    cc46:	4b08      	ldr	r3, [pc, #32]	; (cc68 <usbdc_set_req+0xe8>)
    cc48:	4798      	blx	r3
    cc4a:	4603      	mov	r3, r0
    cc4c:	e000      	b.n	cc50 <usbdc_set_req+0xd0>
	default:
		return false;
    cc4e:	2300      	movs	r3, #0
	}
}
    cc50:	4618      	mov	r0, r3
    cc52:	370c      	adds	r7, #12
    cc54:	46bd      	mov	sp, r7
    cc56:	bd90      	pop	{r4, r7, pc}
    cc58:	0000cf55 	.word	0x0000cf55
    cc5c:	0000c935 	.word	0x0000c935
    cc60:	0000c851 	.word	0x0000c851
    cc64:	0000c8a9 	.word	0x0000c8a9
    cc68:	0000ca41 	.word	0x0000ca41

0000cc6c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    cc6c:	b580      	push	{r7, lr}
    cc6e:	b082      	sub	sp, #8
    cc70:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cc72:	4b0a      	ldr	r3, [pc, #40]	; (cc9c <usbdc_sof_notify+0x30>)
    cc74:	685b      	ldr	r3, [r3, #4]
    cc76:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    cc78:	e009      	b.n	cc8e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    cc7a:	687b      	ldr	r3, [r7, #4]
    cc7c:	685b      	ldr	r3, [r3, #4]
    cc7e:	2b00      	cmp	r3, #0
    cc80:	d002      	beq.n	cc88 <usbdc_sof_notify+0x1c>
			sof->cb();
    cc82:	687b      	ldr	r3, [r7, #4]
    cc84:	685b      	ldr	r3, [r3, #4]
    cc86:	4798      	blx	r3
		}
		sof = sof->next;
    cc88:	687b      	ldr	r3, [r7, #4]
    cc8a:	681b      	ldr	r3, [r3, #0]
    cc8c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    cc8e:	687b      	ldr	r3, [r7, #4]
    cc90:	2b00      	cmp	r3, #0
    cc92:	d1f2      	bne.n	cc7a <usbdc_sof_notify+0xe>
	}
}
    cc94:	bf00      	nop
    cc96:	3708      	adds	r7, #8
    cc98:	46bd      	mov	sp, r7
    cc9a:	bd80      	pop	{r7, pc}
    cc9c:	20000cac 	.word	0x20000cac

0000cca0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    cca0:	b580      	push	{r7, lr}
    cca2:	b084      	sub	sp, #16
    cca4:	af00      	add	r7, sp, #0
    cca6:	4603      	mov	r3, r0
    cca8:	6039      	str	r1, [r7, #0]
    ccaa:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    ccac:	4b0b      	ldr	r3, [pc, #44]	; (ccdc <usbdc_change_notify+0x3c>)
    ccae:	68db      	ldr	r3, [r3, #12]
    ccb0:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    ccb2:	e00c      	b.n	ccce <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    ccb4:	68fb      	ldr	r3, [r7, #12]
    ccb6:	685b      	ldr	r3, [r3, #4]
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d005      	beq.n	ccc8 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    ccbc:	68fb      	ldr	r3, [r7, #12]
    ccbe:	685b      	ldr	r3, [r3, #4]
    ccc0:	79fa      	ldrb	r2, [r7, #7]
    ccc2:	6839      	ldr	r1, [r7, #0]
    ccc4:	4610      	mov	r0, r2
    ccc6:	4798      	blx	r3
		}
		cg = cg->next;
    ccc8:	68fb      	ldr	r3, [r7, #12]
    ccca:	681b      	ldr	r3, [r3, #0]
    cccc:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    ccce:	68fb      	ldr	r3, [r7, #12]
    ccd0:	2b00      	cmp	r3, #0
    ccd2:	d1ef      	bne.n	ccb4 <usbdc_change_notify+0x14>
	}
}
    ccd4:	bf00      	nop
    ccd6:	3710      	adds	r7, #16
    ccd8:	46bd      	mov	sp, r7
    ccda:	bd80      	pop	{r7, pc}
    ccdc:	20000cac 	.word	0x20000cac

0000cce0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cce0:	b580      	push	{r7, lr}
    cce2:	b084      	sub	sp, #16
    cce4:	af00      	add	r7, sp, #0
    cce6:	4603      	mov	r3, r0
    cce8:	6039      	str	r1, [r7, #0]
    ccea:	71fb      	strb	r3, [r7, #7]
    ccec:	4613      	mov	r3, r2
    ccee:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    ccf0:	4b12      	ldr	r3, [pc, #72]	; (cd3c <usbdc_request_handler+0x5c>)
    ccf2:	689b      	ldr	r3, [r3, #8]
    ccf4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    ccf6:	e019      	b.n	cd2c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    ccf8:	68fb      	ldr	r3, [r7, #12]
    ccfa:	685b      	ldr	r3, [r3, #4]
    ccfc:	2b00      	cmp	r3, #0
    ccfe:	d012      	beq.n	cd26 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    cd00:	68fb      	ldr	r3, [r7, #12]
    cd02:	685b      	ldr	r3, [r3, #4]
    cd04:	79ba      	ldrb	r2, [r7, #6]
    cd06:	79f8      	ldrb	r0, [r7, #7]
    cd08:	6839      	ldr	r1, [r7, #0]
    cd0a:	4798      	blx	r3
    cd0c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    cd0e:	68bb      	ldr	r3, [r7, #8]
    cd10:	2b00      	cmp	r3, #0
    cd12:	d101      	bne.n	cd18 <usbdc_request_handler+0x38>
				return true;
    cd14:	2301      	movs	r3, #1
    cd16:	e00d      	b.n	cd34 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    cd18:	68bb      	ldr	r3, [r7, #8]
    cd1a:	f113 0f0a 	cmn.w	r3, #10
    cd1e:	d002      	beq.n	cd26 <usbdc_request_handler+0x46>
				return -1;
    cd20:	f04f 33ff 	mov.w	r3, #4294967295
    cd24:	e006      	b.n	cd34 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    cd26:	68fb      	ldr	r3, [r7, #12]
    cd28:	681b      	ldr	r3, [r3, #0]
    cd2a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    cd2c:	68fb      	ldr	r3, [r7, #12]
    cd2e:	2b00      	cmp	r3, #0
    cd30:	d1e2      	bne.n	ccf8 <usbdc_request_handler+0x18>
	}
	return false;
    cd32:	2300      	movs	r3, #0
}
    cd34:	4618      	mov	r0, r3
    cd36:	3710      	adds	r7, #16
    cd38:	46bd      	mov	sp, r7
    cd3a:	bd80      	pop	{r7, pc}
    cd3c:	20000cac 	.word	0x20000cac

0000cd40 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    cd40:	b580      	push	{r7, lr}
    cd42:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    cd44:	4b01      	ldr	r3, [pc, #4]	; (cd4c <usbd_sof_cb+0xc>)
    cd46:	4798      	blx	r3
}
    cd48:	bf00      	nop
    cd4a:	bd80      	pop	{r7, pc}
    cd4c:	0000cc6d 	.word	0x0000cc6d

0000cd50 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    cd50:	b580      	push	{r7, lr}
    cd52:	b082      	sub	sp, #8
    cd54:	af00      	add	r7, sp, #0
    cd56:	4603      	mov	r3, r0
    cd58:	6039      	str	r1, [r7, #0]
    cd5a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    cd5c:	79fb      	ldrb	r3, [r7, #7]
    cd5e:	2200      	movs	r2, #0
    cd60:	6839      	ldr	r1, [r7, #0]
    cd62:	4618      	mov	r0, r3
    cd64:	4b14      	ldr	r3, [pc, #80]	; (cdb8 <usbdc_cb_ctl_req+0x68>)
    cd66:	4798      	blx	r3
    cd68:	4603      	mov	r3, r0
    cd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
    cd6e:	d00b      	beq.n	cd88 <usbdc_cb_ctl_req+0x38>
    cd70:	2b01      	cmp	r3, #1
    cd72:	d007      	beq.n	cd84 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    cd74:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cd76:	683b      	ldr	r3, [r7, #0]
    cd78:	781b      	ldrb	r3, [r3, #0]
    cd7a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d007      	beq.n	cd92 <usbdc_cb_ctl_req+0x42>
    cd82:	e003      	b.n	cd8c <usbdc_cb_ctl_req+0x3c>
		return true;
    cd84:	2301      	movs	r3, #1
    cd86:	e013      	b.n	cdb0 <usbdc_cb_ctl_req+0x60>
		return false;
    cd88:	2300      	movs	r3, #0
    cd8a:	e011      	b.n	cdb0 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cd8c:	2b80      	cmp	r3, #128	; 0x80
    cd8e:	d007      	beq.n	cda0 <usbdc_cb_ctl_req+0x50>
    cd90:	e00d      	b.n	cdae <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    cd92:	79fb      	ldrb	r3, [r7, #7]
    cd94:	6839      	ldr	r1, [r7, #0]
    cd96:	4618      	mov	r0, r3
    cd98:	4b08      	ldr	r3, [pc, #32]	; (cdbc <usbdc_cb_ctl_req+0x6c>)
    cd9a:	4798      	blx	r3
    cd9c:	4603      	mov	r3, r0
    cd9e:	e007      	b.n	cdb0 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    cda0:	79fb      	ldrb	r3, [r7, #7]
    cda2:	6839      	ldr	r1, [r7, #0]
    cda4:	4618      	mov	r0, r3
    cda6:	4b06      	ldr	r3, [pc, #24]	; (cdc0 <usbdc_cb_ctl_req+0x70>)
    cda8:	4798      	blx	r3
    cdaa:	4603      	mov	r3, r0
    cdac:	e000      	b.n	cdb0 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    cdae:	2300      	movs	r3, #0
	}
}
    cdb0:	4618      	mov	r0, r3
    cdb2:	3708      	adds	r7, #8
    cdb4:	46bd      	mov	sp, r7
    cdb6:	bd80      	pop	{r7, pc}
    cdb8:	0000cce1 	.word	0x0000cce1
    cdbc:	0000cb81 	.word	0x0000cb81
    cdc0:	0000c7a9 	.word	0x0000c7a9

0000cdc4 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    cdc4:	b580      	push	{r7, lr}
    cdc6:	b082      	sub	sp, #8
    cdc8:	af00      	add	r7, sp, #0
    cdca:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cdcc:	687b      	ldr	r3, [r7, #4]
    cdce:	781b      	ldrb	r3, [r3, #0]
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d135      	bne.n	ce40 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    cdd4:	687b      	ldr	r3, [r7, #4]
    cdd6:	785b      	ldrb	r3, [r3, #1]
    cdd8:	2b05      	cmp	r3, #5
    cdda:	d019      	beq.n	ce10 <usbdc_ctrl_status_end+0x4c>
    cddc:	2b09      	cmp	r3, #9
    cdde:	d000      	beq.n	cde2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    cde0:	e02f      	b.n	ce42 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    cde2:	687b      	ldr	r3, [r7, #4]
    cde4:	885b      	ldrh	r3, [r3, #2]
    cde6:	b29b      	uxth	r3, r3
    cde8:	b2da      	uxtb	r2, r3
    cdea:	4b17      	ldr	r3, [pc, #92]	; (ce48 <usbdc_ctrl_status_end+0x84>)
    cdec:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cdee:	687b      	ldr	r3, [r7, #4]
    cdf0:	885b      	ldrh	r3, [r3, #2]
    cdf2:	b29b      	uxth	r3, r3
    cdf4:	2b00      	cmp	r3, #0
    cdf6:	d001      	beq.n	cdfc <usbdc_ctrl_status_end+0x38>
    cdf8:	2204      	movs	r2, #4
    cdfa:	e000      	b.n	cdfe <usbdc_ctrl_status_end+0x3a>
    cdfc:	2203      	movs	r2, #3
    cdfe:	4b12      	ldr	r3, [pc, #72]	; (ce48 <usbdc_ctrl_status_end+0x84>)
    ce00:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ce02:	4b11      	ldr	r3, [pc, #68]	; (ce48 <usbdc_ctrl_status_end+0x84>)
    ce04:	7e9b      	ldrb	r3, [r3, #26]
    ce06:	4619      	mov	r1, r3
    ce08:	2001      	movs	r0, #1
    ce0a:	4b10      	ldr	r3, [pc, #64]	; (ce4c <usbdc_ctrl_status_end+0x88>)
    ce0c:	4798      	blx	r3
		break;
    ce0e:	e018      	b.n	ce42 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    ce10:	687b      	ldr	r3, [r7, #4]
    ce12:	885b      	ldrh	r3, [r3, #2]
    ce14:	b29b      	uxth	r3, r3
    ce16:	b2db      	uxtb	r3, r3
    ce18:	4618      	mov	r0, r3
    ce1a:	4b0d      	ldr	r3, [pc, #52]	; (ce50 <usbdc_ctrl_status_end+0x8c>)
    ce1c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    ce1e:	687b      	ldr	r3, [r7, #4]
    ce20:	885b      	ldrh	r3, [r3, #2]
    ce22:	b29b      	uxth	r3, r3
    ce24:	2b00      	cmp	r3, #0
    ce26:	d001      	beq.n	ce2c <usbdc_ctrl_status_end+0x68>
    ce28:	2203      	movs	r2, #3
    ce2a:	e000      	b.n	ce2e <usbdc_ctrl_status_end+0x6a>
    ce2c:	2202      	movs	r2, #2
    ce2e:	4b06      	ldr	r3, [pc, #24]	; (ce48 <usbdc_ctrl_status_end+0x84>)
    ce30:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ce32:	4b05      	ldr	r3, [pc, #20]	; (ce48 <usbdc_ctrl_status_end+0x84>)
    ce34:	7e9b      	ldrb	r3, [r3, #26]
    ce36:	4619      	mov	r1, r3
    ce38:	2001      	movs	r0, #1
    ce3a:	4b04      	ldr	r3, [pc, #16]	; (ce4c <usbdc_ctrl_status_end+0x88>)
    ce3c:	4798      	blx	r3
		break;
    ce3e:	e000      	b.n	ce42 <usbdc_ctrl_status_end+0x7e>
		return;
    ce40:	bf00      	nop
	}
}
    ce42:	3708      	adds	r7, #8
    ce44:	46bd      	mov	sp, r7
    ce46:	bd80      	pop	{r7, pc}
    ce48:	20000cac 	.word	0x20000cac
    ce4c:	0000cca1 	.word	0x0000cca1
    ce50:	0000ca21 	.word	0x0000ca21

0000ce54 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    ce54:	b580      	push	{r7, lr}
    ce56:	b082      	sub	sp, #8
    ce58:	af00      	add	r7, sp, #0
    ce5a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    ce5c:	2201      	movs	r2, #1
    ce5e:	6879      	ldr	r1, [r7, #4]
    ce60:	2000      	movs	r0, #0
    ce62:	4b03      	ldr	r3, [pc, #12]	; (ce70 <usbdc_ctrl_data_end+0x1c>)
    ce64:	4798      	blx	r3
	return false;
    ce66:	2300      	movs	r3, #0
}
    ce68:	4618      	mov	r0, r3
    ce6a:	3708      	adds	r7, #8
    ce6c:	46bd      	mov	sp, r7
    ce6e:	bd80      	pop	{r7, pc}
    ce70:	0000cce1 	.word	0x0000cce1

0000ce74 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    ce74:	b580      	push	{r7, lr}
    ce76:	b082      	sub	sp, #8
    ce78:	af00      	add	r7, sp, #0
    ce7a:	4603      	mov	r3, r0
    ce7c:	603a      	str	r2, [r7, #0]
    ce7e:	71fb      	strb	r3, [r7, #7]
    ce80:	460b      	mov	r3, r1
    ce82:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    ce84:	79bb      	ldrb	r3, [r7, #6]
    ce86:	2b00      	cmp	r3, #0
    ce88:	d002      	beq.n	ce90 <usbdc_cb_ctl_done+0x1c>
    ce8a:	2b01      	cmp	r3, #1
    ce8c:	d004      	beq.n	ce98 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    ce8e:	e008      	b.n	cea2 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    ce90:	6838      	ldr	r0, [r7, #0]
    ce92:	4b06      	ldr	r3, [pc, #24]	; (ceac <usbdc_cb_ctl_done+0x38>)
    ce94:	4798      	blx	r3
		break;
    ce96:	e004      	b.n	cea2 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    ce98:	6838      	ldr	r0, [r7, #0]
    ce9a:	4b05      	ldr	r3, [pc, #20]	; (ceb0 <usbdc_cb_ctl_done+0x3c>)
    ce9c:	4798      	blx	r3
    ce9e:	4603      	mov	r3, r0
    cea0:	e000      	b.n	cea4 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    cea2:	2300      	movs	r3, #0
}
    cea4:	4618      	mov	r0, r3
    cea6:	3708      	adds	r7, #8
    cea8:	46bd      	mov	sp, r7
    ceaa:	bd80      	pop	{r7, pc}
    ceac:	0000cdc5 	.word	0x0000cdc5
    ceb0:	0000ce55 	.word	0x0000ce55

0000ceb4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ceb4:	b580      	push	{r7, lr}
    ceb6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    ceb8:	4b10      	ldr	r3, [pc, #64]	; (cefc <usbdc_reset+0x48>)
    ceba:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cebc:	4b10      	ldr	r3, [pc, #64]	; (cf00 <usbdc_reset+0x4c>)
    cebe:	2202      	movs	r2, #2
    cec0:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    cec2:	4b0f      	ldr	r3, [pc, #60]	; (cf00 <usbdc_reset+0x4c>)
    cec4:	2200      	movs	r2, #0
    cec6:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cec8:	4b0d      	ldr	r3, [pc, #52]	; (cf00 <usbdc_reset+0x4c>)
    ceca:	2200      	movs	r2, #0
    cecc:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cece:	2000      	movs	r0, #0
    ced0:	4b0c      	ldr	r3, [pc, #48]	; (cf04 <usbdc_reset+0x50>)
    ced2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    ced4:	4b0a      	ldr	r3, [pc, #40]	; (cf00 <usbdc_reset+0x4c>)
    ced6:	7f1b      	ldrb	r3, [r3, #28]
    ced8:	4618      	mov	r0, r3
    ceda:	4b0b      	ldr	r3, [pc, #44]	; (cf08 <usbdc_reset+0x54>)
    cedc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cede:	4a0b      	ldr	r2, [pc, #44]	; (cf0c <usbdc_reset+0x58>)
    cee0:	2100      	movs	r1, #0
    cee2:	2000      	movs	r0, #0
    cee4:	4b0a      	ldr	r3, [pc, #40]	; (cf10 <usbdc_reset+0x5c>)
    cee6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cee8:	4a0a      	ldr	r2, [pc, #40]	; (cf14 <usbdc_reset+0x60>)
    ceea:	2102      	movs	r1, #2
    ceec:	2000      	movs	r0, #0
    ceee:	4b08      	ldr	r3, [pc, #32]	; (cf10 <usbdc_reset+0x5c>)
    cef0:	4798      	blx	r3
	usb_d_ep_enable(0);
    cef2:	2000      	movs	r0, #0
    cef4:	4b08      	ldr	r3, [pc, #32]	; (cf18 <usbdc_reset+0x64>)
    cef6:	4798      	blx	r3
}
    cef8:	bf00      	nop
    cefa:	bd80      	pop	{r7, pc}
    cefc:	0000c901 	.word	0x0000c901
    cf00:	20000cac 	.word	0x20000cac
    cf04:	000030cd 	.word	0x000030cd
    cf08:	00003009 	.word	0x00003009
    cf0c:	0000cd51 	.word	0x0000cd51
    cf10:	00003421 	.word	0x00003421
    cf14:	0000ce75 	.word	0x0000ce75
    cf18:	0000311d 	.word	0x0000311d

0000cf1c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cf1c:	b580      	push	{r7, lr}
    cf1e:	b082      	sub	sp, #8
    cf20:	af00      	add	r7, sp, #0
    cf22:	4603      	mov	r3, r0
    cf24:	6039      	str	r1, [r7, #0]
    cf26:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cf28:	79fb      	ldrb	r3, [r7, #7]
    cf2a:	2b00      	cmp	r3, #0
    cf2c:	d002      	beq.n	cf34 <usbd_event_cb+0x18>
    cf2e:	2b01      	cmp	r3, #1
    cf30:	d005      	beq.n	cf3e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cf32:	e007      	b.n	cf44 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cf34:	6839      	ldr	r1, [r7, #0]
    cf36:	2000      	movs	r0, #0
    cf38:	4b04      	ldr	r3, [pc, #16]	; (cf4c <usbd_event_cb+0x30>)
    cf3a:	4798      	blx	r3
		break;
    cf3c:	e002      	b.n	cf44 <usbd_event_cb+0x28>
		usbdc_reset();
    cf3e:	4b04      	ldr	r3, [pc, #16]	; (cf50 <usbd_event_cb+0x34>)
    cf40:	4798      	blx	r3
		break;
    cf42:	bf00      	nop
	}
}
    cf44:	bf00      	nop
    cf46:	3708      	adds	r7, #8
    cf48:	46bd      	mov	sp, r7
    cf4a:	bd80      	pop	{r7, pc}
    cf4c:	0000cca1 	.word	0x0000cca1
    cf50:	0000ceb5 	.word	0x0000ceb5

0000cf54 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cf54:	b580      	push	{r7, lr}
    cf56:	b088      	sub	sp, #32
    cf58:	af00      	add	r7, sp, #0
    cf5a:	60b9      	str	r1, [r7, #8]
    cf5c:	607a      	str	r2, [r7, #4]
    cf5e:	461a      	mov	r2, r3
    cf60:	4603      	mov	r3, r0
    cf62:	73fb      	strb	r3, [r7, #15]
    cf64:	4613      	mov	r3, r2
    cf66:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cf68:	68bb      	ldr	r3, [r7, #8]
    cf6a:	617b      	str	r3, [r7, #20]
    cf6c:	687b      	ldr	r3, [r7, #4]
    cf6e:	61bb      	str	r3, [r7, #24]
    cf70:	7bfb      	ldrb	r3, [r7, #15]
    cf72:	773b      	strb	r3, [r7, #28]
    cf74:	7bbb      	ldrb	r3, [r7, #14]
    cf76:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cf78:	f107 0314 	add.w	r3, r7, #20
    cf7c:	4618      	mov	r0, r3
    cf7e:	4b03      	ldr	r3, [pc, #12]	; (cf8c <usbdc_xfer+0x38>)
    cf80:	4798      	blx	r3
    cf82:	4603      	mov	r3, r0
}
    cf84:	4618      	mov	r0, r3
    cf86:	3720      	adds	r7, #32
    cf88:	46bd      	mov	sp, r7
    cf8a:	bd80      	pop	{r7, pc}
    cf8c:	0000318d 	.word	0x0000318d

0000cf90 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    cf90:	b580      	push	{r7, lr}
    cf92:	b082      	sub	sp, #8
    cf94:	af00      	add	r7, sp, #0
    cf96:	4603      	mov	r3, r0
    cf98:	6039      	str	r1, [r7, #0]
    cf9a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cf9c:	79fb      	ldrb	r3, [r7, #7]
    cf9e:	2b01      	cmp	r3, #1
    cfa0:	d009      	beq.n	cfb6 <usbdc_register_handler+0x26>
    cfa2:	2b02      	cmp	r3, #2
    cfa4:	d00c      	beq.n	cfc0 <usbdc_register_handler+0x30>
    cfa6:	2b00      	cmp	r3, #0
    cfa8:	d000      	beq.n	cfac <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    cfaa:	e00e      	b.n	cfca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    cfac:	6839      	ldr	r1, [r7, #0]
    cfae:	4809      	ldr	r0, [pc, #36]	; (cfd4 <usbdc_register_handler+0x44>)
    cfb0:	4b09      	ldr	r3, [pc, #36]	; (cfd8 <usbdc_register_handler+0x48>)
    cfb2:	4798      	blx	r3
		break;
    cfb4:	e009      	b.n	cfca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    cfb6:	6839      	ldr	r1, [r7, #0]
    cfb8:	4808      	ldr	r0, [pc, #32]	; (cfdc <usbdc_register_handler+0x4c>)
    cfba:	4b07      	ldr	r3, [pc, #28]	; (cfd8 <usbdc_register_handler+0x48>)
    cfbc:	4798      	blx	r3
		break;
    cfbe:	e004      	b.n	cfca <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cfc0:	6839      	ldr	r1, [r7, #0]
    cfc2:	4807      	ldr	r0, [pc, #28]	; (cfe0 <usbdc_register_handler+0x50>)
    cfc4:	4b04      	ldr	r3, [pc, #16]	; (cfd8 <usbdc_register_handler+0x48>)
    cfc6:	4798      	blx	r3
		break;
    cfc8:	bf00      	nop
	}
}
    cfca:	bf00      	nop
    cfcc:	3708      	adds	r7, #8
    cfce:	46bd      	mov	sp, r7
    cfd0:	bd80      	pop	{r7, pc}
    cfd2:	bf00      	nop
    cfd4:	20000cb0 	.word	0x20000cb0
    cfd8:	00003579 	.word	0x00003579
    cfdc:	20000cb4 	.word	0x20000cb4
    cfe0:	20000cb8 	.word	0x20000cb8

0000cfe4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cfe4:	b580      	push	{r7, lr}
    cfe6:	b084      	sub	sp, #16
    cfe8:	af00      	add	r7, sp, #0
    cfea:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    cfec:	687b      	ldr	r3, [r7, #4]
    cfee:	2b00      	cmp	r3, #0
    cff0:	bf14      	ite	ne
    cff2:	2301      	movne	r3, #1
    cff4:	2300      	moveq	r3, #0
    cff6:	b2db      	uxtb	r3, r3
    cff8:	f240 3255 	movw	r2, #853	; 0x355
    cffc:	4910      	ldr	r1, [pc, #64]	; (d040 <usbdc_init+0x5c>)
    cffe:	4618      	mov	r0, r3
    d000:	4b10      	ldr	r3, [pc, #64]	; (d044 <usbdc_init+0x60>)
    d002:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d004:	4b10      	ldr	r3, [pc, #64]	; (d048 <usbdc_init+0x64>)
    d006:	4798      	blx	r3
    d008:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d00a:	68fb      	ldr	r3, [r7, #12]
    d00c:	2b00      	cmp	r3, #0
    d00e:	da01      	bge.n	d014 <usbdc_init+0x30>
		return rc;
    d010:	68fb      	ldr	r3, [r7, #12]
    d012:	e010      	b.n	d036 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d014:	2220      	movs	r2, #32
    d016:	2100      	movs	r1, #0
    d018:	480c      	ldr	r0, [pc, #48]	; (d04c <usbdc_init+0x68>)
    d01a:	4b0d      	ldr	r3, [pc, #52]	; (d050 <usbdc_init+0x6c>)
    d01c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d01e:	4a0b      	ldr	r2, [pc, #44]	; (d04c <usbdc_init+0x68>)
    d020:	687b      	ldr	r3, [r7, #4]
    d022:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d024:	490b      	ldr	r1, [pc, #44]	; (d054 <usbdc_init+0x70>)
    d026:	2000      	movs	r0, #0
    d028:	4b0b      	ldr	r3, [pc, #44]	; (d058 <usbdc_init+0x74>)
    d02a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d02c:	490b      	ldr	r1, [pc, #44]	; (d05c <usbdc_init+0x78>)
    d02e:	2001      	movs	r0, #1
    d030:	4b09      	ldr	r3, [pc, #36]	; (d058 <usbdc_init+0x74>)
    d032:	4798      	blx	r3

	return 0;
    d034:	2300      	movs	r3, #0
}
    d036:	4618      	mov	r0, r3
    d038:	3710      	adds	r7, #16
    d03a:	46bd      	mov	sp, r7
    d03c:	bd80      	pop	{r7, pc}
    d03e:	bf00      	nop
    d040:	0000f0e4 	.word	0x0000f0e4
    d044:	0000349d 	.word	0x0000349d
    d048:	00002ef5 	.word	0x00002ef5
    d04c:	20000cac 	.word	0x20000cac
    d050:	0000e9c9 	.word	0x0000e9c9
    d054:	0000cd41 	.word	0x0000cd41
    d058:	00002fa1 	.word	0x00002fa1
    d05c:	0000cf1d 	.word	0x0000cf1d

0000d060 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d060:	b580      	push	{r7, lr}
    d062:	b082      	sub	sp, #8
    d064:	af00      	add	r7, sp, #0
    d066:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d068:	6879      	ldr	r1, [r7, #4]
    d06a:	4803      	ldr	r0, [pc, #12]	; (d078 <usbdc_register_function+0x18>)
    d06c:	4b03      	ldr	r3, [pc, #12]	; (d07c <usbdc_register_function+0x1c>)
    d06e:	4798      	blx	r3
}
    d070:	bf00      	nop
    d072:	3708      	adds	r7, #8
    d074:	46bd      	mov	sp, r7
    d076:	bd80      	pop	{r7, pc}
    d078:	20000cbc 	.word	0x20000cbc
    d07c:	00003579 	.word	0x00003579

0000d080 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d080:	b580      	push	{r7, lr}
    d082:	b082      	sub	sp, #8
    d084:	af00      	add	r7, sp, #0
    d086:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d088:	4b0f      	ldr	r3, [pc, #60]	; (d0c8 <usbdc_start+0x48>)
    d08a:	7e9b      	ldrb	r3, [r3, #26]
    d08c:	2b00      	cmp	r3, #0
    d08e:	d002      	beq.n	d096 <usbdc_start+0x16>
		return ERR_BUSY;
    d090:	f06f 0303 	mvn.w	r3, #3
    d094:	e013      	b.n	d0be <usbdc_start+0x3e>
	}

	if (desces) {
    d096:	687b      	ldr	r3, [r7, #4]
    d098:	2b00      	cmp	r3, #0
    d09a:	d00e      	beq.n	d0ba <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d09c:	4a0a      	ldr	r2, [pc, #40]	; (d0c8 <usbdc_start+0x48>)
    d09e:	687b      	ldr	r3, [r7, #4]
    d0a0:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d0a2:	687b      	ldr	r3, [r7, #4]
    d0a4:	681b      	ldr	r3, [r3, #0]
    d0a6:	79da      	ldrb	r2, [r3, #7]
    d0a8:	4b07      	ldr	r3, [pc, #28]	; (d0c8 <usbdc_start+0x48>)
    d0aa:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d0ac:	4b06      	ldr	r3, [pc, #24]	; (d0c8 <usbdc_start+0x48>)
    d0ae:	2201      	movs	r2, #1
    d0b0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d0b2:	4b06      	ldr	r3, [pc, #24]	; (d0cc <usbdc_start+0x4c>)
    d0b4:	4798      	blx	r3
	return ERR_NONE;
    d0b6:	2300      	movs	r3, #0
    d0b8:	e001      	b.n	d0be <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d0ba:	f06f 0308 	mvn.w	r3, #8
}
    d0be:	4618      	mov	r0, r3
    d0c0:	3708      	adds	r7, #8
    d0c2:	46bd      	mov	sp, r7
    d0c4:	bd80      	pop	{r7, pc}
    d0c6:	bf00      	nop
    d0c8:	20000cac 	.word	0x20000cac
    d0cc:	00002fc5 	.word	0x00002fc5

0000d0d0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d0d0:	b580      	push	{r7, lr}
    d0d2:	af00      	add	r7, sp, #0
	usb_d_attach();
    d0d4:	4b01      	ldr	r3, [pc, #4]	; (d0dc <usbdc_attach+0xc>)
    d0d6:	4798      	blx	r3
}
    d0d8:	bf00      	nop
    d0da:	bd80      	pop	{r7, pc}
    d0dc:	00002fd9 	.word	0x00002fd9

0000d0e0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d0e0:	b480      	push	{r7}
    d0e2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d0e4:	4b03      	ldr	r3, [pc, #12]	; (d0f4 <usbdc_get_ctrl_buffer+0x14>)
    d0e6:	695b      	ldr	r3, [r3, #20]
}
    d0e8:	4618      	mov	r0, r3
    d0ea:	46bd      	mov	sp, r7
    d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0f0:	4770      	bx	lr
    d0f2:	bf00      	nop
    d0f4:	20000cac 	.word	0x20000cac

0000d0f8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d0f8:	b480      	push	{r7}
    d0fa:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d0fc:	4b07      	ldr	r3, [pc, #28]	; (d11c <usbdc_get_state+0x24>)
    d0fe:	7e9b      	ldrb	r3, [r3, #26]
    d100:	f003 0310 	and.w	r3, r3, #16
    d104:	2b00      	cmp	r3, #0
    d106:	d001      	beq.n	d10c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d108:	2310      	movs	r3, #16
    d10a:	e001      	b.n	d110 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d10c:	4b03      	ldr	r3, [pc, #12]	; (d11c <usbdc_get_state+0x24>)
    d10e:	7e9b      	ldrb	r3, [r3, #26]
}
    d110:	4618      	mov	r0, r3
    d112:	46bd      	mov	sp, r7
    d114:	f85d 7b04 	ldr.w	r7, [sp], #4
    d118:	4770      	bx	lr
    d11a:	bf00      	nop
    d11c:	20000cac 	.word	0x20000cac

0000d120 <usb_get_u16>:
{
    d120:	b480      	push	{r7}
    d122:	b083      	sub	sp, #12
    d124:	af00      	add	r7, sp, #0
    d126:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d128:	687b      	ldr	r3, [r7, #4]
    d12a:	781b      	ldrb	r3, [r3, #0]
    d12c:	b29a      	uxth	r2, r3
    d12e:	687b      	ldr	r3, [r7, #4]
    d130:	3301      	adds	r3, #1
    d132:	781b      	ldrb	r3, [r3, #0]
    d134:	b29b      	uxth	r3, r3
    d136:	021b      	lsls	r3, r3, #8
    d138:	b29b      	uxth	r3, r3
    d13a:	4413      	add	r3, r2
    d13c:	b29b      	uxth	r3, r3
}
    d13e:	4618      	mov	r0, r3
    d140:	370c      	adds	r7, #12
    d142:	46bd      	mov	sp, r7
    d144:	f85d 7b04 	ldr.w	r7, [sp], #4
    d148:	4770      	bx	lr

0000d14a <usb_desc_len>:
{
    d14a:	b480      	push	{r7}
    d14c:	b083      	sub	sp, #12
    d14e:	af00      	add	r7, sp, #0
    d150:	6078      	str	r0, [r7, #4]
	return desc[0];
    d152:	687b      	ldr	r3, [r7, #4]
    d154:	781b      	ldrb	r3, [r3, #0]
}
    d156:	4618      	mov	r0, r3
    d158:	370c      	adds	r7, #12
    d15a:	46bd      	mov	sp, r7
    d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d160:	4770      	bx	lr

0000d162 <usb_desc_type>:
{
    d162:	b480      	push	{r7}
    d164:	b083      	sub	sp, #12
    d166:	af00      	add	r7, sp, #0
    d168:	6078      	str	r0, [r7, #4]
	return desc[1];
    d16a:	687b      	ldr	r3, [r7, #4]
    d16c:	3301      	adds	r3, #1
    d16e:	781b      	ldrb	r3, [r3, #0]
}
    d170:	4618      	mov	r0, r3
    d172:	370c      	adds	r7, #12
    d174:	46bd      	mov	sp, r7
    d176:	f85d 7b04 	ldr.w	r7, [sp], #4
    d17a:	4770      	bx	lr

0000d17c <usb_desc_next>:
{
    d17c:	b580      	push	{r7, lr}
    d17e:	b082      	sub	sp, #8
    d180:	af00      	add	r7, sp, #0
    d182:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d184:	6878      	ldr	r0, [r7, #4]
    d186:	4b05      	ldr	r3, [pc, #20]	; (d19c <usb_desc_next+0x20>)
    d188:	4798      	blx	r3
    d18a:	4603      	mov	r3, r0
    d18c:	461a      	mov	r2, r3
    d18e:	687b      	ldr	r3, [r7, #4]
    d190:	4413      	add	r3, r2
}
    d192:	4618      	mov	r0, r3
    d194:	3708      	adds	r7, #8
    d196:	46bd      	mov	sp, r7
    d198:	bd80      	pop	{r7, pc}
    d19a:	bf00      	nop
    d19c:	0000d14b 	.word	0x0000d14b

0000d1a0 <usb_cfg_desc_total_len>:
{
    d1a0:	b580      	push	{r7, lr}
    d1a2:	b082      	sub	sp, #8
    d1a4:	af00      	add	r7, sp, #0
    d1a6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d1a8:	687b      	ldr	r3, [r7, #4]
    d1aa:	3302      	adds	r3, #2
    d1ac:	4618      	mov	r0, r3
    d1ae:	4b03      	ldr	r3, [pc, #12]	; (d1bc <usb_cfg_desc_total_len+0x1c>)
    d1b0:	4798      	blx	r3
    d1b2:	4603      	mov	r3, r0
}
    d1b4:	4618      	mov	r0, r3
    d1b6:	3708      	adds	r7, #8
    d1b8:	46bd      	mov	sp, r7
    d1ba:	bd80      	pop	{r7, pc}
    d1bc:	0000d121 	.word	0x0000d121

0000d1c0 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d1c0:	b580      	push	{r7, lr}
    d1c2:	b082      	sub	sp, #8
    d1c4:	af00      	add	r7, sp, #0
    d1c6:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d1c8:	6878      	ldr	r0, [r7, #4]
    d1ca:	4b05      	ldr	r3, [pc, #20]	; (d1e0 <usb_cfg_desc_next+0x20>)
    d1cc:	4798      	blx	r3
    d1ce:	4603      	mov	r3, r0
    d1d0:	461a      	mov	r2, r3
    d1d2:	687b      	ldr	r3, [r7, #4]
    d1d4:	4413      	add	r3, r2
}
    d1d6:	4618      	mov	r0, r3
    d1d8:	3708      	adds	r7, #8
    d1da:	46bd      	mov	sp, r7
    d1dc:	bd80      	pop	{r7, pc}
    d1de:	bf00      	nop
    d1e0:	0000d1a1 	.word	0x0000d1a1

0000d1e4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d1e4:	b580      	push	{r7, lr}
    d1e6:	b084      	sub	sp, #16
    d1e8:	af00      	add	r7, sp, #0
    d1ea:	60f8      	str	r0, [r7, #12]
    d1ec:	60b9      	str	r1, [r7, #8]
    d1ee:	4613      	mov	r3, r2
    d1f0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d1f2:	e015      	b.n	d220 <usb_find_desc+0x3c>
		_desc_len_check();
    d1f4:	68f8      	ldr	r0, [r7, #12]
    d1f6:	4b0f      	ldr	r3, [pc, #60]	; (d234 <usb_find_desc+0x50>)
    d1f8:	4798      	blx	r3
    d1fa:	4603      	mov	r3, r0
    d1fc:	2b01      	cmp	r3, #1
    d1fe:	d801      	bhi.n	d204 <usb_find_desc+0x20>
    d200:	2300      	movs	r3, #0
    d202:	e012      	b.n	d22a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d204:	68f8      	ldr	r0, [r7, #12]
    d206:	4b0c      	ldr	r3, [pc, #48]	; (d238 <usb_find_desc+0x54>)
    d208:	4798      	blx	r3
    d20a:	4603      	mov	r3, r0
    d20c:	461a      	mov	r2, r3
    d20e:	79fb      	ldrb	r3, [r7, #7]
    d210:	4293      	cmp	r3, r2
    d212:	d101      	bne.n	d218 <usb_find_desc+0x34>
			return desc;
    d214:	68fb      	ldr	r3, [r7, #12]
    d216:	e008      	b.n	d22a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d218:	68f8      	ldr	r0, [r7, #12]
    d21a:	4b08      	ldr	r3, [pc, #32]	; (d23c <usb_find_desc+0x58>)
    d21c:	4798      	blx	r3
    d21e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d220:	68fa      	ldr	r2, [r7, #12]
    d222:	68bb      	ldr	r3, [r7, #8]
    d224:	429a      	cmp	r2, r3
    d226:	d3e5      	bcc.n	d1f4 <usb_find_desc+0x10>
	}
	return NULL;
    d228:	2300      	movs	r3, #0
}
    d22a:	4618      	mov	r0, r3
    d22c:	3710      	adds	r7, #16
    d22e:	46bd      	mov	sp, r7
    d230:	bd80      	pop	{r7, pc}
    d232:	bf00      	nop
    d234:	0000d14b 	.word	0x0000d14b
    d238:	0000d163 	.word	0x0000d163
    d23c:	0000d17d 	.word	0x0000d17d

0000d240 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d240:	b580      	push	{r7, lr}
    d242:	b082      	sub	sp, #8
    d244:	af00      	add	r7, sp, #0
    d246:	6078      	str	r0, [r7, #4]
    d248:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d24a:	e019      	b.n	d280 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d24c:	6878      	ldr	r0, [r7, #4]
    d24e:	4b12      	ldr	r3, [pc, #72]	; (d298 <usb_find_ep_desc+0x58>)
    d250:	4798      	blx	r3
    d252:	4603      	mov	r3, r0
    d254:	2b01      	cmp	r3, #1
    d256:	d801      	bhi.n	d25c <usb_find_ep_desc+0x1c>
    d258:	2300      	movs	r3, #0
    d25a:	e018      	b.n	d28e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d25c:	6878      	ldr	r0, [r7, #4]
    d25e:	4b0f      	ldr	r3, [pc, #60]	; (d29c <usb_find_ep_desc+0x5c>)
    d260:	4798      	blx	r3
    d262:	4603      	mov	r3, r0
    d264:	2b04      	cmp	r3, #4
    d266:	d010      	beq.n	d28a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d268:	6878      	ldr	r0, [r7, #4]
    d26a:	4b0c      	ldr	r3, [pc, #48]	; (d29c <usb_find_ep_desc+0x5c>)
    d26c:	4798      	blx	r3
    d26e:	4603      	mov	r3, r0
    d270:	2b05      	cmp	r3, #5
    d272:	d101      	bne.n	d278 <usb_find_ep_desc+0x38>
			return desc;
    d274:	687b      	ldr	r3, [r7, #4]
    d276:	e00a      	b.n	d28e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d278:	6878      	ldr	r0, [r7, #4]
    d27a:	4b09      	ldr	r3, [pc, #36]	; (d2a0 <usb_find_ep_desc+0x60>)
    d27c:	4798      	blx	r3
    d27e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d280:	687a      	ldr	r2, [r7, #4]
    d282:	683b      	ldr	r3, [r7, #0]
    d284:	429a      	cmp	r2, r3
    d286:	d3e1      	bcc.n	d24c <usb_find_ep_desc+0xc>
    d288:	e000      	b.n	d28c <usb_find_ep_desc+0x4c>
			break;
    d28a:	bf00      	nop
	}
	return NULL;
    d28c:	2300      	movs	r3, #0
}
    d28e:	4618      	mov	r0, r3
    d290:	3708      	adds	r7, #8
    d292:	46bd      	mov	sp, r7
    d294:	bd80      	pop	{r7, pc}
    d296:	bf00      	nop
    d298:	0000d14b 	.word	0x0000d14b
    d29c:	0000d163 	.word	0x0000d163
    d2a0:	0000d17d 	.word	0x0000d17d

0000d2a4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d2a4:	b580      	push	{r7, lr}
    d2a6:	b084      	sub	sp, #16
    d2a8:	af00      	add	r7, sp, #0
    d2aa:	60f8      	str	r0, [r7, #12]
    d2ac:	60b9      	str	r1, [r7, #8]
    d2ae:	4613      	mov	r3, r2
    d2b0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d2b2:	2202      	movs	r2, #2
    d2b4:	68b9      	ldr	r1, [r7, #8]
    d2b6:	68f8      	ldr	r0, [r7, #12]
    d2b8:	4b15      	ldr	r3, [pc, #84]	; (d310 <usb_find_cfg_desc+0x6c>)
    d2ba:	4798      	blx	r3
    d2bc:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d2be:	68fb      	ldr	r3, [r7, #12]
    d2c0:	2b00      	cmp	r3, #0
    d2c2:	d11a      	bne.n	d2fa <usb_find_cfg_desc+0x56>
		return NULL;
    d2c4:	2300      	movs	r3, #0
    d2c6:	e01f      	b.n	d308 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d2c8:	68f8      	ldr	r0, [r7, #12]
    d2ca:	4b12      	ldr	r3, [pc, #72]	; (d314 <usb_find_cfg_desc+0x70>)
    d2cc:	4798      	blx	r3
    d2ce:	4603      	mov	r3, r0
    d2d0:	2b01      	cmp	r3, #1
    d2d2:	d801      	bhi.n	d2d8 <usb_find_cfg_desc+0x34>
    d2d4:	2300      	movs	r3, #0
    d2d6:	e017      	b.n	d308 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d2d8:	68fb      	ldr	r3, [r7, #12]
    d2da:	3301      	adds	r3, #1
    d2dc:	781b      	ldrb	r3, [r3, #0]
    d2de:	2b02      	cmp	r3, #2
    d2e0:	d110      	bne.n	d304 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d2e2:	68fb      	ldr	r3, [r7, #12]
    d2e4:	3305      	adds	r3, #5
    d2e6:	781b      	ldrb	r3, [r3, #0]
    d2e8:	79fa      	ldrb	r2, [r7, #7]
    d2ea:	429a      	cmp	r2, r3
    d2ec:	d101      	bne.n	d2f2 <usb_find_cfg_desc+0x4e>
			return desc;
    d2ee:	68fb      	ldr	r3, [r7, #12]
    d2f0:	e00a      	b.n	d308 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d2f2:	68f8      	ldr	r0, [r7, #12]
    d2f4:	4b08      	ldr	r3, [pc, #32]	; (d318 <usb_find_cfg_desc+0x74>)
    d2f6:	4798      	blx	r3
    d2f8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d2fa:	68fa      	ldr	r2, [r7, #12]
    d2fc:	68bb      	ldr	r3, [r7, #8]
    d2fe:	429a      	cmp	r2, r3
    d300:	d3e2      	bcc.n	d2c8 <usb_find_cfg_desc+0x24>
    d302:	e000      	b.n	d306 <usb_find_cfg_desc+0x62>
			break;
    d304:	bf00      	nop
	}
	return NULL;
    d306:	2300      	movs	r3, #0
}
    d308:	4618      	mov	r0, r3
    d30a:	3710      	adds	r7, #16
    d30c:	46bd      	mov	sp, r7
    d30e:	bd80      	pop	{r7, pc}
    d310:	0000d1e5 	.word	0x0000d1e5
    d314:	0000d14b 	.word	0x0000d14b
    d318:	0000d1c1 	.word	0x0000d1c1

0000d31c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d31c:	b580      	push	{r7, lr}
    d31e:	b086      	sub	sp, #24
    d320:	af00      	add	r7, sp, #0
    d322:	60f8      	str	r0, [r7, #12]
    d324:	60b9      	str	r1, [r7, #8]
    d326:	4613      	mov	r3, r2
    d328:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d32a:	2300      	movs	r3, #0
    d32c:	75fb      	strb	r3, [r7, #23]
    d32e:	e020      	b.n	d372 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d330:	2203      	movs	r2, #3
    d332:	68b9      	ldr	r1, [r7, #8]
    d334:	68f8      	ldr	r0, [r7, #12]
    d336:	4b13      	ldr	r3, [pc, #76]	; (d384 <usb_find_str_desc+0x68>)
    d338:	4798      	blx	r3
    d33a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d33c:	68fb      	ldr	r3, [r7, #12]
    d33e:	2b00      	cmp	r3, #0
    d340:	d015      	beq.n	d36e <usb_find_str_desc+0x52>
			_desc_len_check();
    d342:	68f8      	ldr	r0, [r7, #12]
    d344:	4b10      	ldr	r3, [pc, #64]	; (d388 <usb_find_str_desc+0x6c>)
    d346:	4798      	blx	r3
    d348:	4603      	mov	r3, r0
    d34a:	2b01      	cmp	r3, #1
    d34c:	d801      	bhi.n	d352 <usb_find_str_desc+0x36>
    d34e:	2300      	movs	r3, #0
    d350:	e014      	b.n	d37c <usb_find_str_desc+0x60>
			if (i == str_index) {
    d352:	7dfa      	ldrb	r2, [r7, #23]
    d354:	79fb      	ldrb	r3, [r7, #7]
    d356:	429a      	cmp	r2, r3
    d358:	d101      	bne.n	d35e <usb_find_str_desc+0x42>
				return desc;
    d35a:	68fb      	ldr	r3, [r7, #12]
    d35c:	e00e      	b.n	d37c <usb_find_str_desc+0x60>
			}
			i++;
    d35e:	7dfb      	ldrb	r3, [r7, #23]
    d360:	3301      	adds	r3, #1
    d362:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d364:	68f8      	ldr	r0, [r7, #12]
    d366:	4b09      	ldr	r3, [pc, #36]	; (d38c <usb_find_str_desc+0x70>)
    d368:	4798      	blx	r3
    d36a:	60f8      	str	r0, [r7, #12]
    d36c:	e001      	b.n	d372 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d36e:	2300      	movs	r3, #0
    d370:	e004      	b.n	d37c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d372:	68fa      	ldr	r2, [r7, #12]
    d374:	68bb      	ldr	r3, [r7, #8]
    d376:	429a      	cmp	r2, r3
    d378:	d3da      	bcc.n	d330 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d37a:	2300      	movs	r3, #0
}
    d37c:	4618      	mov	r0, r3
    d37e:	3718      	adds	r7, #24
    d380:	46bd      	mov	sp, r7
    d382:	bd80      	pop	{r7, pc}
    d384:	0000d1e5 	.word	0x0000d1e5
    d388:	0000d14b 	.word	0x0000d14b
    d38c:	0000d17d 	.word	0x0000d17d

0000d390 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    d390:	b480      	push	{r7}
    d392:	b083      	sub	sp, #12
    d394:	af00      	add	r7, sp, #0
    d396:	6078      	str	r0, [r7, #4]
    d398:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    d39a:	687b      	ldr	r3, [r7, #4]
    d39c:	683a      	ldr	r2, [r7, #0]
    d39e:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    d3a0:	687b      	ldr	r3, [r7, #4]
    d3a2:	4618      	mov	r0, r3
    d3a4:	370c      	adds	r7, #12
    d3a6:	46bd      	mov	sp, r7
    d3a8:	bc80      	pop	{r7}
    d3aa:	4770      	bx	lr

0000d3ac <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    d3ac:	b480      	push	{r7}
    d3ae:	b083      	sub	sp, #12
    d3b0:	af00      	add	r7, sp, #0
    d3b2:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    d3b4:	687b      	ldr	r3, [r7, #4]
    d3b6:	4618      	mov	r0, r3
    d3b8:	370c      	adds	r7, #12
    d3ba:	46bd      	mov	sp, r7
    d3bc:	bc80      	pop	{r7}
    d3be:	4770      	bx	lr

0000d3c0 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    d3c0:	b580      	push	{r7, lr}
    d3c2:	b084      	sub	sp, #16
    d3c4:	af00      	add	r7, sp, #0
    d3c6:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    d3c8:	687b      	ldr	r3, [r7, #4]
    d3ca:	4a14      	ldr	r2, [pc, #80]	; (d41c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    d3cc:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    d3ce:	687b      	ldr	r3, [r7, #4]
    d3d0:	4a12      	ldr	r2, [pc, #72]	; (d41c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    d3d2:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    d3d4:	687b      	ldr	r3, [r7, #4]
    d3d6:	691a      	ldr	r2, [r3, #16]
    d3d8:	687b      	ldr	r3, [r7, #4]
    d3da:	330c      	adds	r3, #12
    d3dc:	4619      	mov	r1, r3
    d3de:	4610      	mov	r0, r2
    d3e0:	4b0f      	ldr	r3, [pc, #60]	; (d420 <_ZN14I2C_Sync_Class4InitEv+0x60>)
    d3e2:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d3e4:	687b      	ldr	r3, [r7, #4]
    d3e6:	691b      	ldr	r3, [r3, #16]
    d3e8:	4618      	mov	r0, r3
    d3ea:	4b0e      	ldr	r3, [pc, #56]	; (d424 <_ZN14I2C_Sync_Class4InitEv+0x64>)
    d3ec:	4798      	blx	r3
    d3ee:	4603      	mov	r3, r0
    d3f0:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    d3f2:	7bfb      	ldrb	r3, [r7, #15]
    d3f4:	2b00      	cmp	r3, #0
    d3f6:	bf0c      	ite	eq
    d3f8:	2301      	moveq	r3, #1
    d3fa:	2300      	movne	r3, #0
    d3fc:	b2da      	uxtb	r2, r3
    d3fe:	687b      	ldr	r3, [r7, #4]
    d400:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
    d402:	687b      	ldr	r3, [r7, #4]
    d404:	7a5b      	ldrb	r3, [r3, #9]
    d406:	b2da      	uxtb	r2, r3
    d408:	687b      	ldr	r3, [r7, #4]
    d40a:	721a      	strb	r2, [r3, #8]
	return isOK;
    d40c:	687b      	ldr	r3, [r7, #4]
    d40e:	7a5b      	ldrb	r3, [r3, #9]
    d410:	b2db      	uxtb	r3, r3
	
}
    d412:	4618      	mov	r0, r3
    d414:	3710      	adds	r7, #16
    d416:	46bd      	mov	sp, r7
    d418:	bd80      	pop	{r7, pc}
    d41a:	bf00      	nop
    d41c:	20000ccc 	.word	0x20000ccc
    d420:	00002297 	.word	0x00002297
    d424:	0000223d 	.word	0x0000223d

0000d428 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    d428:	b580      	push	{r7, lr}
    d42a:	b082      	sub	sp, #8
    d42c:	af00      	add	r7, sp, #0
    d42e:	6078      	str	r0, [r7, #4]
    d430:	460b      	mov	r3, r1
    d432:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    d434:	687b      	ldr	r3, [r7, #4]
    d436:	691b      	ldr	r3, [r3, #16]
    d438:	78fa      	ldrb	r2, [r7, #3]
    d43a:	b211      	sxth	r1, r2
    d43c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d440:	4618      	mov	r0, r3
    d442:	4b03      	ldr	r3, [pc, #12]	; (d450 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    d444:	4798      	blx	r3
    d446:	4603      	mov	r3, r0
}
    d448:	4618      	mov	r0, r3
    d44a:	3708      	adds	r7, #8
    d44c:	46bd      	mov	sp, r7
    d44e:	bd80      	pop	{r7, pc}
    d450:	0000225d 	.word	0x0000225d

0000d454 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    d454:	b580      	push	{r7, lr}
    d456:	b086      	sub	sp, #24
    d458:	af00      	add	r7, sp, #0
    d45a:	60f8      	str	r0, [r7, #12]
    d45c:	60b9      	str	r1, [r7, #8]
    d45e:	4613      	mov	r3, r2
    d460:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    d462:	68fb      	ldr	r3, [r7, #12]
    d464:	68db      	ldr	r3, [r3, #12]
    d466:	88fa      	ldrh	r2, [r7, #6]
    d468:	68b9      	ldr	r1, [r7, #8]
    d46a:	4618      	mov	r0, r3
    d46c:	4b03      	ldr	r3, [pc, #12]	; (d47c <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    d46e:	4798      	blx	r3
    d470:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    d472:	697b      	ldr	r3, [r7, #20]
}
    d474:	4618      	mov	r0, r3
    d476:	3718      	adds	r7, #24
    d478:	46bd      	mov	sp, r7
    d47a:	bd80      	pop	{r7, pc}
    d47c:	0000e771 	.word	0x0000e771

0000d480 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    d480:	b580      	push	{r7, lr}
    d482:	b086      	sub	sp, #24
    d484:	af00      	add	r7, sp, #0
    d486:	60f8      	str	r0, [r7, #12]
    d488:	60b9      	str	r1, [r7, #8]
    d48a:	4613      	mov	r3, r2
    d48c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    d48e:	68fb      	ldr	r3, [r7, #12]
    d490:	68db      	ldr	r3, [r3, #12]
    d492:	88fa      	ldrh	r2, [r7, #6]
    d494:	68b9      	ldr	r1, [r7, #8]
    d496:	4618      	mov	r0, r3
    d498:	4b03      	ldr	r3, [pc, #12]	; (d4a8 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    d49a:	4798      	blx	r3
    d49c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    d49e:	697b      	ldr	r3, [r7, #20]
}
    d4a0:	4618      	mov	r0, r3
    d4a2:	3718      	adds	r7, #24
    d4a4:	46bd      	mov	sp, r7
    d4a6:	bd80      	pop	{r7, pc}
    d4a8:	0000e7c1 	.word	0x0000e7c1

0000d4ac <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    d4ac:	b480      	push	{r7}
    d4ae:	b083      	sub	sp, #12
    d4b0:	af00      	add	r7, sp, #0
    d4b2:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    d4b4:	687b      	ldr	r3, [r7, #4]
    d4b6:	4618      	mov	r0, r3
    d4b8:	370c      	adds	r7, #12
    d4ba:	46bd      	mov	sp, r7
    d4bc:	bc80      	pop	{r7}
    d4be:	4770      	bx	lr

0000d4c0 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    d4c0:	b480      	push	{r7}
    d4c2:	b083      	sub	sp, #12
    d4c4:	af00      	add	r7, sp, #0
    d4c6:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    d4c8:	687b      	ldr	r3, [r7, #4]
    d4ca:	4618      	mov	r0, r3
    d4cc:	370c      	adds	r7, #12
    d4ce:	46bd      	mov	sp, r7
    d4d0:	bc80      	pop	{r7}
    d4d2:	4770      	bx	lr

0000d4d4 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
	//i2cClass=i2c;
	isOK=i2cClass->isOK;
	return isOK;
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    d4d4:	b480      	push	{r7}
    d4d6:	b085      	sub	sp, #20
    d4d8:	af00      	add	r7, sp, #0
    d4da:	60f8      	str	r0, [r7, #12]
    d4dc:	460b      	mov	r3, r1
    d4de:	607a      	str	r2, [r7, #4]
    d4e0:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    d4e2:	687b      	ldr	r3, [r7, #4]
    d4e4:	681a      	ldr	r2, [r3, #0]
    d4e6:	68fb      	ldr	r3, [r7, #12]
    d4e8:	615a      	str	r2, [r3, #20]
	rxBuffer=i2c->rxBuffer;
    d4ea:	687b      	ldr	r3, [r7, #4]
    d4ec:	685a      	ldr	r2, [r3, #4]
    d4ee:	68fb      	ldr	r3, [r7, #12]
    d4f0:	619a      	str	r2, [r3, #24]
	i2cAddress=addr;
    d4f2:	68fb      	ldr	r3, [r7, #12]
    d4f4:	7afa      	ldrb	r2, [r7, #11]
    d4f6:	731a      	strb	r2, [r3, #12]
	i2cClass=i2c;
    d4f8:	68fb      	ldr	r3, [r7, #12]
    d4fa:	687a      	ldr	r2, [r7, #4]
    d4fc:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
    d4fe:	68fb      	ldr	r3, [r7, #12]
    d500:	691b      	ldr	r3, [r3, #16]
    d502:	7a5b      	ldrb	r3, [r3, #9]
    d504:	b2da      	uxtb	r2, r3
    d506:	68fb      	ldr	r3, [r7, #12]
    d508:	729a      	strb	r2, [r3, #10]
	return isOK;
    d50a:	68fb      	ldr	r3, [r7, #12]
    d50c:	7a9b      	ldrb	r3, [r3, #10]
    d50e:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    d510:	4618      	mov	r0, r3
    d512:	3714      	adds	r7, #20
    d514:	46bd      	mov	sp, r7
    d516:	bc80      	pop	{r7}
    d518:	4770      	bx	lr

0000d51a <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    d51a:	b480      	push	{r7}
    d51c:	b083      	sub	sp, #12
    d51e:	af00      	add	r7, sp, #0
    d520:	6078      	str	r0, [r7, #4]
    d522:	460b      	mov	r3, r1
    d524:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    d526:	78fb      	ldrb	r3, [r7, #3]
    d528:	f003 0307 	and.w	r3, r3, #7
    d52c:	b2db      	uxtb	r3, r3
}
    d52e:	4618      	mov	r0, r3
    d530:	370c      	adds	r7, #12
    d532:	46bd      	mov	sp, r7
    d534:	bc80      	pop	{r7}
    d536:	4770      	bx	lr

0000d538 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    d538:	b480      	push	{r7}
    d53a:	b083      	sub	sp, #12
    d53c:	af00      	add	r7, sp, #0
    d53e:	6078      	str	r0, [r7, #4]
    d540:	4608      	mov	r0, r1
    d542:	4611      	mov	r1, r2
    d544:	461a      	mov	r2, r3
    d546:	4603      	mov	r3, r0
    d548:	70fb      	strb	r3, [r7, #3]
    d54a:	460b      	mov	r3, r1
    d54c:	70bb      	strb	r3, [r7, #2]
    d54e:	4613      	mov	r3, r2
    d550:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    d552:	78fb      	ldrb	r3, [r7, #3]
    d554:	2b07      	cmp	r3, #7
    d556:	dc01      	bgt.n	d55c <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    d558:	78bb      	ldrb	r3, [r7, #2]
    d55a:	e000      	b.n	d55e <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    d55c:	787b      	ldrb	r3, [r7, #1]
}
    d55e:	4618      	mov	r0, r3
    d560:	370c      	adds	r7, #12
    d562:	46bd      	mov	sp, r7
    d564:	bc80      	pop	{r7}
    d566:	4770      	bx	lr

0000d568 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    d568:	b580      	push	{r7, lr}
    d56a:	b082      	sub	sp, #8
    d56c:	af00      	add	r7, sp, #0
    d56e:	6078      	str	r0, [r7, #4]
    d570:	460b      	mov	r3, r1
    d572:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    d574:	687b      	ldr	r3, [r7, #4]
    d576:	691a      	ldr	r2, [r3, #16]
    d578:	687b      	ldr	r3, [r7, #4]
    d57a:	7b1b      	ldrb	r3, [r3, #12]
    d57c:	4619      	mov	r1, r3
    d57e:	4610      	mov	r0, r2
    d580:	4b0b      	ldr	r3, [pc, #44]	; (d5b0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    d582:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    d584:	687b      	ldr	r3, [r7, #4]
    d586:	691b      	ldr	r3, [r3, #16]
    d588:	1cf9      	adds	r1, r7, #3
    d58a:	2201      	movs	r2, #1
    d58c:	4618      	mov	r0, r3
    d58e:	4b09      	ldr	r3, [pc, #36]	; (d5b4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    d590:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    d592:	687b      	ldr	r3, [r7, #4]
    d594:	6918      	ldr	r0, [r3, #16]
    d596:	687b      	ldr	r3, [r7, #4]
    d598:	3304      	adds	r3, #4
    d59a:	2201      	movs	r2, #1
    d59c:	4619      	mov	r1, r3
    d59e:	4b06      	ldr	r3, [pc, #24]	; (d5b8 <_ZN14MCP23008_Class12readRegisterEh+0x50>)
    d5a0:	4798      	blx	r3

	return registerValue;
    d5a2:	687b      	ldr	r3, [r7, #4]
    d5a4:	791b      	ldrb	r3, [r3, #4]
}
    d5a6:	4618      	mov	r0, r3
    d5a8:	3708      	adds	r7, #8
    d5aa:	46bd      	mov	sp, r7
    d5ac:	bd80      	pop	{r7, pc}
    d5ae:	bf00      	nop
    d5b0:	0000d429 	.word	0x0000d429
    d5b4:	0000d455 	.word	0x0000d455
    d5b8:	0000d481 	.word	0x0000d481

0000d5bc <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    d5bc:	b580      	push	{r7, lr}
    d5be:	b084      	sub	sp, #16
    d5c0:	af00      	add	r7, sp, #0
    d5c2:	6078      	str	r0, [r7, #4]
    d5c4:	460b      	mov	r3, r1
    d5c6:	70fb      	strb	r3, [r7, #3]
    d5c8:	4613      	mov	r3, r2
    d5ca:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    d5cc:	687b      	ldr	r3, [r7, #4]
    d5ce:	691a      	ldr	r2, [r3, #16]
    d5d0:	687b      	ldr	r3, [r7, #4]
    d5d2:	7b1b      	ldrb	r3, [r3, #12]
    d5d4:	4619      	mov	r1, r3
    d5d6:	4610      	mov	r0, r2
    d5d8:	4b09      	ldr	r3, [pc, #36]	; (d600 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    d5da:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    d5dc:	78fb      	ldrb	r3, [r7, #3]
    d5de:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    d5e0:	78bb      	ldrb	r3, [r7, #2]
    d5e2:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    d5e4:	687b      	ldr	r3, [r7, #4]
    d5e6:	691b      	ldr	r3, [r3, #16]
    d5e8:	f107 010c 	add.w	r1, r7, #12
    d5ec:	2202      	movs	r2, #2
    d5ee:	4618      	mov	r0, r3
    d5f0:	4b04      	ldr	r3, [pc, #16]	; (d604 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    d5f2:	4798      	blx	r3
    d5f4:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    d5f6:	4618      	mov	r0, r3
    d5f8:	3710      	adds	r7, #16
    d5fa:	46bd      	mov	sp, r7
    d5fc:	bd80      	pop	{r7, pc}
    d5fe:	bf00      	nop
    d600:	0000d429 	.word	0x0000d429
    d604:	0000d455 	.word	0x0000d455

0000d608 <_ZN14MCP23008_Class12SetPortInputEv>:
	writeRegister(MCP23008_GPIOA,v);
	return v;
}


void	MCP23008_Class::SetPortInput(void){
    d608:	b580      	push	{r7, lr}
    d60a:	b084      	sub	sp, #16
    d60c:	af00      	add	r7, sp, #0
    d60e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d610:	2300      	movs	r3, #0
    d612:	73fb      	strb	r3, [r7, #15]
    d614:	7bfb      	ldrb	r3, [r7, #15]
    d616:	2b07      	cmp	r3, #7
    d618:	dc0f      	bgt.n	d63a <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    d61a:	7bfb      	ldrb	r3, [r7, #15]
    d61c:	2201      	movs	r2, #1
    d61e:	4619      	mov	r1, r3
    d620:	6878      	ldr	r0, [r7, #4]
    d622:	4b08      	ldr	r3, [pc, #32]	; (d644 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    d624:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    d626:	7bfb      	ldrb	r3, [r7, #15]
    d628:	2201      	movs	r2, #1
    d62a:	4619      	mov	r1, r3
    d62c:	6878      	ldr	r0, [r7, #4]
    d62e:	4b06      	ldr	r3, [pc, #24]	; (d648 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    d630:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d632:	7bfb      	ldrb	r3, [r7, #15]
    d634:	3301      	adds	r3, #1
    d636:	73fb      	strb	r3, [r7, #15]
    d638:	e7ec      	b.n	d614 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    d63a:	bf00      	nop
    d63c:	3710      	adds	r7, #16
    d63e:	46bd      	mov	sp, r7
    d640:	bd80      	pop	{r7, pc}
    d642:	bf00      	nop
    d644:	0000d70d 	.word	0x0000d70d
    d648:	0000d7f1 	.word	0x0000d7f1

0000d64c <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
    d64c:	b580      	push	{r7, lr}
    d64e:	b084      	sub	sp, #16
    d650:	af00      	add	r7, sp, #0
    d652:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d654:	2300      	movs	r3, #0
    d656:	73fb      	strb	r3, [r7, #15]
    d658:	7bfb      	ldrb	r3, [r7, #15]
    d65a:	2b07      	cmp	r3, #7
    d65c:	dc09      	bgt.n	d672 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    d65e:	7bfb      	ldrb	r3, [r7, #15]
    d660:	2200      	movs	r2, #0
    d662:	4619      	mov	r1, r3
    d664:	6878      	ldr	r0, [r7, #4]
    d666:	4b05      	ldr	r3, [pc, #20]	; (d67c <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    d668:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d66a:	7bfb      	ldrb	r3, [r7, #15]
    d66c:	3301      	adds	r3, #1
    d66e:	73fb      	strb	r3, [r7, #15]
    d670:	e7f2      	b.n	d658 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    d672:	bf00      	nop
    d674:	3710      	adds	r7, #16
    d676:	46bd      	mov	sp, r7
    d678:	bd80      	pop	{r7, pc}
    d67a:	bf00      	nop
    d67c:	0000d70d 	.word	0x0000d70d

0000d680 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    d680:	b580      	push	{r7, lr}
    d682:	b084      	sub	sp, #16
    d684:	af00      	add	r7, sp, #0
    d686:	6078      	str	r0, [r7, #4]
    d688:	4608      	mov	r0, r1
    d68a:	4611      	mov	r1, r2
    d68c:	461a      	mov	r2, r3
    d68e:	4603      	mov	r3, r0
    d690:	70fb      	strb	r3, [r7, #3]
    d692:	460b      	mov	r3, r1
    d694:	70bb      	strb	r3, [r7, #2]
    d696:	4613      	mov	r3, r2
    d698:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    d69a:	787b      	ldrb	r3, [r7, #1]
    d69c:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    d69e:	78fb      	ldrb	r3, [r7, #3]
    d6a0:	4619      	mov	r1, r3
    d6a2:	6878      	ldr	r0, [r7, #4]
    d6a4:	4b16      	ldr	r3, [pc, #88]	; (d700 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    d6a6:	4798      	blx	r3
    d6a8:	4603      	mov	r3, r0
    d6aa:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    d6ac:	7bfb      	ldrb	r3, [r7, #15]
    d6ae:	4619      	mov	r1, r3
    d6b0:	6878      	ldr	r0, [r7, #4]
    d6b2:	4b14      	ldr	r3, [pc, #80]	; (d704 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    d6b4:	4798      	blx	r3
    d6b6:	4603      	mov	r3, r0
    d6b8:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    d6ba:	78bb      	ldrb	r3, [r7, #2]
    d6bc:	2b00      	cmp	r3, #0
    d6be:	d009      	beq.n	d6d4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    d6c0:	7bba      	ldrb	r2, [r7, #14]
    d6c2:	7b7b      	ldrb	r3, [r7, #13]
    d6c4:	4619      	mov	r1, r3
    d6c6:	2301      	movs	r3, #1
    d6c8:	408b      	lsls	r3, r1
    d6ca:	b2db      	uxtb	r3, r3
    d6cc:	4313      	orrs	r3, r2
    d6ce:	b2db      	uxtb	r3, r3
    d6d0:	73bb      	strb	r3, [r7, #14]
    d6d2:	e00a      	b.n	d6ea <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    d6d4:	7bba      	ldrb	r2, [r7, #14]
    d6d6:	7b7b      	ldrb	r3, [r7, #13]
    d6d8:	4619      	mov	r1, r3
    d6da:	2301      	movs	r3, #1
    d6dc:	408b      	lsls	r3, r1
    d6de:	b2db      	uxtb	r3, r3
    d6e0:	43db      	mvns	r3, r3
    d6e2:	b2db      	uxtb	r3, r3
    d6e4:	4013      	ands	r3, r2
    d6e6:	b2db      	uxtb	r3, r3
    d6e8:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    d6ea:	7bba      	ldrb	r2, [r7, #14]
    d6ec:	7bfb      	ldrb	r3, [r7, #15]
    d6ee:	4619      	mov	r1, r3
    d6f0:	6878      	ldr	r0, [r7, #4]
    d6f2:	4b05      	ldr	r3, [pc, #20]	; (d708 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    d6f4:	4798      	blx	r3
}
    d6f6:	bf00      	nop
    d6f8:	3710      	adds	r7, #16
    d6fa:	46bd      	mov	sp, r7
    d6fc:	bd80      	pop	{r7, pc}
    d6fe:	bf00      	nop
    d700:	0000d51b 	.word	0x0000d51b
    d704:	0000d569 	.word	0x0000d569
    d708:	0000d5bd 	.word	0x0000d5bd

0000d70c <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    d70c:	b590      	push	{r4, r7, lr}
    d70e:	b085      	sub	sp, #20
    d710:	af02      	add	r7, sp, #8
    d712:	6078      	str	r0, [r7, #4]
    d714:	460b      	mov	r3, r1
    d716:	70fb      	strb	r3, [r7, #3]
    d718:	4613      	mov	r3, r2
    d71a:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    d71c:	78bb      	ldrb	r3, [r7, #2]
    d71e:	2b01      	cmp	r3, #1
    d720:	bf0c      	ite	eq
    d722:	2301      	moveq	r3, #1
    d724:	2300      	movne	r3, #0
    d726:	b2db      	uxtb	r3, r3
    d728:	461a      	mov	r2, r3
    d72a:	78f9      	ldrb	r1, [r7, #3]
    d72c:	2300      	movs	r3, #0
    d72e:	9300      	str	r3, [sp, #0]
    d730:	2300      	movs	r3, #0
    d732:	6878      	ldr	r0, [r7, #4]
    d734:	4c02      	ldr	r4, [pc, #8]	; (d740 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    d736:	47a0      	blx	r4
}
    d738:	bf00      	nop
    d73a:	370c      	adds	r7, #12
    d73c:	46bd      	mov	sp, r7
    d73e:	bd90      	pop	{r4, r7, pc}
    d740:	0000d681 	.word	0x0000d681

0000d744 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    d744:	b590      	push	{r4, r7, lr}
    d746:	b085      	sub	sp, #20
    d748:	af00      	add	r7, sp, #0
    d74a:	6078      	str	r0, [r7, #4]
    d74c:	460b      	mov	r3, r1
    d74e:	70fb      	strb	r3, [r7, #3]
    d750:	4613      	mov	r3, r2
    d752:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    d754:	78fb      	ldrb	r3, [r7, #3]
    d756:	4619      	mov	r1, r3
    d758:	6878      	ldr	r0, [r7, #4]
    d75a:	4b21      	ldr	r3, [pc, #132]	; (d7e0 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    d75c:	4798      	blx	r3
    d75e:	4603      	mov	r3, r0
    d760:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    d762:	78f9      	ldrb	r1, [r7, #3]
    d764:	230a      	movs	r3, #10
    d766:	220a      	movs	r2, #10
    d768:	6878      	ldr	r0, [r7, #4]
    d76a:	4c1e      	ldr	r4, [pc, #120]	; (d7e4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d76c:	47a0      	blx	r4
    d76e:	4603      	mov	r3, r0
    d770:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    d772:	7bfb      	ldrb	r3, [r7, #15]
    d774:	4619      	mov	r1, r3
    d776:	6878      	ldr	r0, [r7, #4]
    d778:	4b1b      	ldr	r3, [pc, #108]	; (d7e8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    d77a:	4798      	blx	r3
    d77c:	4603      	mov	r3, r0
    d77e:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    d780:	78bb      	ldrb	r3, [r7, #2]
    d782:	2b00      	cmp	r3, #0
    d784:	d009      	beq.n	d79a <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    d786:	7bba      	ldrb	r2, [r7, #14]
    d788:	7b7b      	ldrb	r3, [r7, #13]
    d78a:	4619      	mov	r1, r3
    d78c:	2301      	movs	r3, #1
    d78e:	408b      	lsls	r3, r1
    d790:	b2db      	uxtb	r3, r3
    d792:	4313      	orrs	r3, r2
    d794:	b2db      	uxtb	r3, r3
    d796:	73bb      	strb	r3, [r7, #14]
    d798:	e00a      	b.n	d7b0 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    d79a:	7bba      	ldrb	r2, [r7, #14]
    d79c:	7b7b      	ldrb	r3, [r7, #13]
    d79e:	4619      	mov	r1, r3
    d7a0:	2301      	movs	r3, #1
    d7a2:	408b      	lsls	r3, r1
    d7a4:	b2db      	uxtb	r3, r3
    d7a6:	43db      	mvns	r3, r3
    d7a8:	b2db      	uxtb	r3, r3
    d7aa:	4013      	ands	r3, r2
    d7ac:	b2db      	uxtb	r3, r3
    d7ae:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    d7b0:	78f9      	ldrb	r1, [r7, #3]
    d7b2:	2309      	movs	r3, #9
    d7b4:	2209      	movs	r2, #9
    d7b6:	6878      	ldr	r0, [r7, #4]
    d7b8:	4c0a      	ldr	r4, [pc, #40]	; (d7e4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d7ba:	47a0      	blx	r4
    d7bc:	4603      	mov	r3, r0
    d7be:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    d7c0:	7bba      	ldrb	r2, [r7, #14]
    d7c2:	7bfb      	ldrb	r3, [r7, #15]
    d7c4:	4619      	mov	r1, r3
    d7c6:	6878      	ldr	r0, [r7, #4]
    d7c8:	4b08      	ldr	r3, [pc, #32]	; (d7ec <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    d7ca:	4798      	blx	r3
    d7cc:	4603      	mov	r3, r0
    d7ce:	2b00      	cmp	r3, #0
    d7d0:	bf0c      	ite	eq
    d7d2:	2301      	moveq	r3, #1
    d7d4:	2300      	movne	r3, #0
    d7d6:	b2db      	uxtb	r3, r3
}
    d7d8:	4618      	mov	r0, r3
    d7da:	3714      	adds	r7, #20
    d7dc:	46bd      	mov	sp, r7
    d7de:	bd90      	pop	{r4, r7, pc}
    d7e0:	0000d51b 	.word	0x0000d51b
    d7e4:	0000d539 	.word	0x0000d539
    d7e8:	0000d569 	.word	0x0000d569
    d7ec:	0000d5bd 	.word	0x0000d5bd

0000d7f0 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    d7f0:	b590      	push	{r4, r7, lr}
    d7f2:	b085      	sub	sp, #20
    d7f4:	af02      	add	r7, sp, #8
    d7f6:	6078      	str	r0, [r7, #4]
    d7f8:	460b      	mov	r3, r1
    d7fa:	70fb      	strb	r3, [r7, #3]
    d7fc:	4613      	mov	r3, r2
    d7fe:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    d800:	78ba      	ldrb	r2, [r7, #2]
    d802:	78f9      	ldrb	r1, [r7, #3]
    d804:	2306      	movs	r3, #6
    d806:	9300      	str	r3, [sp, #0]
    d808:	2306      	movs	r3, #6
    d80a:	6878      	ldr	r0, [r7, #4]
    d80c:	4c02      	ldr	r4, [pc, #8]	; (d818 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    d80e:	47a0      	blx	r4
}
    d810:	bf00      	nop
    d812:	370c      	adds	r7, #12
    d814:	46bd      	mov	sp, r7
    d816:	bd90      	pop	{r4, r7, pc}
    d818:	0000d681 	.word	0x0000d681

0000d81c <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d81c:	b480      	push	{r7}
    d81e:	b083      	sub	sp, #12
    d820:	af00      	add	r7, sp, #0
    d822:	6078      	str	r0, [r7, #4]
    d824:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d826:	687b      	ldr	r3, [r7, #4]
    d828:	683a      	ldr	r2, [r7, #0]
    d82a:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    d82c:	4a06      	ldr	r2, [pc, #24]	; (d848 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    d82e:	687b      	ldr	r3, [r7, #4]
    d830:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d832:	687b      	ldr	r3, [r7, #4]
    d834:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d838:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d83a:	687b      	ldr	r3, [r7, #4]
    d83c:	4618      	mov	r0, r3
    d83e:	370c      	adds	r7, #12
    d840:	46bd      	mov	sp, r7
    d842:	bc80      	pop	{r7}
    d844:	4770      	bx	lr
    d846:	bf00      	nop
    d848:	20000d4c 	.word	0x20000d4c

0000d84c <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d84c:	b480      	push	{r7}
    d84e:	b083      	sub	sp, #12
    d850:	af00      	add	r7, sp, #0
    d852:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d854:	687b      	ldr	r3, [r7, #4]
    d856:	2200      	movs	r2, #0
    d858:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d85a:	687b      	ldr	r3, [r7, #4]
    d85c:	4618      	mov	r0, r3
    d85e:	370c      	adds	r7, #12
    d860:	46bd      	mov	sp, r7
    d862:	bc80      	pop	{r7}
    d864:	4770      	bx	lr
	...

0000d868 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    d868:	b580      	push	{r7, lr}
    d86a:	b086      	sub	sp, #24
    d86c:	af00      	add	r7, sp, #0
    d86e:	60f8      	str	r0, [r7, #12]
    d870:	60b9      	str	r1, [r7, #8]
    d872:	607a      	str	r2, [r7, #4]
    d874:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    d876:	68f8      	ldr	r0, [r7, #12]
    d878:	4b0d      	ldr	r3, [pc, #52]	; (d8b0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    d87a:	4798      	blx	r3
	task->interval = interval;
    d87c:	68fb      	ldr	r3, [r7, #12]
    d87e:	699b      	ldr	r3, [r3, #24]
    d880:	687a      	ldr	r2, [r7, #4]
    d882:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    d884:	68fb      	ldr	r3, [r7, #12]
    d886:	699b      	ldr	r3, [r3, #24]
    d888:	68ba      	ldr	r2, [r7, #8]
    d88a:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    d88c:	68fb      	ldr	r3, [r7, #12]
    d88e:	699b      	ldr	r3, [r3, #24]
    d890:	78fa      	ldrb	r2, [r7, #3]
    d892:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    d894:	68fb      	ldr	r3, [r7, #12]
    d896:	68da      	ldr	r2, [r3, #12]
    d898:	68fb      	ldr	r3, [r7, #12]
    d89a:	699b      	ldr	r3, [r3, #24]
    d89c:	4619      	mov	r1, r3
    d89e:	4610      	mov	r0, r2
    d8a0:	4b04      	ldr	r3, [pc, #16]	; (d8b4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    d8a2:	4798      	blx	r3
    d8a4:	6178      	str	r0, [r7, #20]
	
	return status;
    d8a6:	697b      	ldr	r3, [r7, #20]
}
    d8a8:	4618      	mov	r0, r3
    d8aa:	3718      	adds	r7, #24
    d8ac:	46bd      	mov	sp, r7
    d8ae:	bd80      	pop	{r7, pc}
    d8b0:	0000d92d 	.word	0x0000d92d
    d8b4:	000027d9 	.word	0x000027d9

0000d8b8 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    d8b8:	b580      	push	{r7, lr}
    d8ba:	b086      	sub	sp, #24
    d8bc:	af00      	add	r7, sp, #0
    d8be:	60f8      	str	r0, [r7, #12]
    d8c0:	60b9      	str	r1, [r7, #8]
    d8c2:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    d8c4:	687a      	ldr	r2, [r7, #4]
    d8c6:	68b9      	ldr	r1, [r7, #8]
    d8c8:	68f8      	ldr	r0, [r7, #12]
    d8ca:	4b0c      	ldr	r3, [pc, #48]	; (d8fc <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    d8cc:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    d8ce:	68fb      	ldr	r3, [r7, #12]
    d8d0:	68db      	ldr	r3, [r3, #12]
    d8d2:	681b      	ldr	r3, [r3, #0]
    d8d4:	699b      	ldr	r3, [r3, #24]
    d8d6:	68fa      	ldr	r2, [r7, #12]
    d8d8:	68d2      	ldr	r2, [r2, #12]
    d8da:	3204      	adds	r2, #4
    d8dc:	4610      	mov	r0, r2
    d8de:	4798      	blx	r3
    d8e0:	4603      	mov	r3, r0
    d8e2:	2b00      	cmp	r3, #0
    d8e4:	d105      	bne.n	d8f2 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    d8e6:	68fb      	ldr	r3, [r7, #12]
    d8e8:	68db      	ldr	r3, [r3, #12]
    d8ea:	4618      	mov	r0, r3
    d8ec:	4b04      	ldr	r3, [pc, #16]	; (d900 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    d8ee:	4798      	blx	r3
    d8f0:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    d8f2:	697b      	ldr	r3, [r7, #20]
}
    d8f4:	4618      	mov	r0, r3
    d8f6:	3718      	adds	r7, #24
    d8f8:	46bd      	mov	sp, r7
    d8fa:	bd80      	pop	{r7, pc}
    d8fc:	0000d905 	.word	0x0000d905
    d900:	00002705 	.word	0x00002705

0000d904 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    d904:	b590      	push	{r4, r7, lr}
    d906:	b087      	sub	sp, #28
    d908:	af00      	add	r7, sp, #0
    d90a:	60f8      	str	r0, [r7, #12]
    d90c:	60b9      	str	r1, [r7, #8]
    d90e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    d910:	2301      	movs	r3, #1
    d912:	687a      	ldr	r2, [r7, #4]
    d914:	68b9      	ldr	r1, [r7, #8]
    d916:	68f8      	ldr	r0, [r7, #12]
    d918:	4c03      	ldr	r4, [pc, #12]	; (d928 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    d91a:	47a0      	blx	r4
    d91c:	6178      	str	r0, [r7, #20]
		return status;
    d91e:	697b      	ldr	r3, [r7, #20]
}
    d920:	4618      	mov	r0, r3
    d922:	371c      	adds	r7, #28
    d924:	46bd      	mov	sp, r7
    d926:	bd90      	pop	{r4, r7, pc}
    d928:	0000d869 	.word	0x0000d869

0000d92c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
		status=timer_start(timer_descr);
	}
	
	return status;
}
void	Timer_Class::ChooseAvailableTimerTask(void){
    d92c:	b480      	push	{r7}
    d92e:	b085      	sub	sp, #20
    d930:	af00      	add	r7, sp, #0
    d932:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d934:	2300      	movs	r3, #0
    d936:	73fb      	strb	r3, [r7, #15]
    d938:	7bfb      	ldrb	r3, [r7, #15]
    d93a:	2b0f      	cmp	r3, #15
    d93c:	dc1c      	bgt.n	d978 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    d93e:	7bfb      	ldrb	r3, [r7, #15]
    d940:	f003 030f 	and.w	r3, r3, #15
    d944:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    d946:	7bba      	ldrb	r2, [r7, #14]
    d948:	490f      	ldr	r1, [pc, #60]	; (d988 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    d94a:	4613      	mov	r3, r2
    d94c:	009b      	lsls	r3, r3, #2
    d94e:	4413      	add	r3, r2
    d950:	009b      	lsls	r3, r3, #2
    d952:	440b      	add	r3, r1
    d954:	330c      	adds	r3, #12
    d956:	681b      	ldr	r3, [r3, #0]
    d958:	2b00      	cmp	r3, #0
    d95a:	d109      	bne.n	d970 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    d95c:	7bba      	ldrb	r2, [r7, #14]
    d95e:	4613      	mov	r3, r2
    d960:	009b      	lsls	r3, r3, #2
    d962:	4413      	add	r3, r2
    d964:	009b      	lsls	r3, r3, #2
    d966:	4a08      	ldr	r2, [pc, #32]	; (d988 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    d968:	441a      	add	r2, r3
    d96a:	687b      	ldr	r3, [r7, #4]
    d96c:	619a      	str	r2, [r3, #24]
			return;
    d96e:	e006      	b.n	d97e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d970:	7bfb      	ldrb	r3, [r7, #15]
    d972:	3301      	adds	r3, #1
    d974:	73fb      	strb	r3, [r7, #15]
    d976:	e7df      	b.n	d938 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    d978:	687b      	ldr	r3, [r7, #4]
    d97a:	4a03      	ldr	r2, [pc, #12]	; (d988 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    d97c:	619a      	str	r2, [r3, #24]

}
    d97e:	3714      	adds	r7, #20
    d980:	46bd      	mov	sp, r7
    d982:	bc80      	pop	{r7}
    d984:	4770      	bx	lr
    d986:	bf00      	nop
    d988:	20000d50 	.word	0x20000d50

0000d98c <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    d98c:	b580      	push	{r7, lr}
    d98e:	b082      	sub	sp, #8
    d990:	af00      	add	r7, sp, #0
    d992:	6078      	str	r0, [r7, #4]
    d994:	6039      	str	r1, [r7, #0]
    d996:	687b      	ldr	r3, [r7, #4]
    d998:	2b01      	cmp	r3, #1
    d99a:	d131      	bne.n	da00 <_Z41__static_initialization_and_destruction_0ii+0x74>
    d99c:	683b      	ldr	r3, [r7, #0]
    d99e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d9a2:	4293      	cmp	r3, r2
    d9a4:	d12c      	bne.n	da00 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    d9a6:	4918      	ldr	r1, [pc, #96]	; (da08 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    d9a8:	4818      	ldr	r0, [pc, #96]	; (da0c <_Z41__static_initialization_and_destruction_0ii+0x80>)
    d9aa:	4b19      	ldr	r3, [pc, #100]	; (da10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d9ac:	4798      	blx	r3
    d9ae:	4a19      	ldr	r2, [pc, #100]	; (da14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d9b0:	4919      	ldr	r1, [pc, #100]	; (da18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d9b2:	4816      	ldr	r0, [pc, #88]	; (da0c <_Z41__static_initialization_and_destruction_0ii+0x80>)
    d9b4:	4b19      	ldr	r3, [pc, #100]	; (da1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d9b6:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    d9b8:	4919      	ldr	r1, [pc, #100]	; (da20 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    d9ba:	481a      	ldr	r0, [pc, #104]	; (da24 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    d9bc:	4b14      	ldr	r3, [pc, #80]	; (da10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d9be:	4798      	blx	r3
    d9c0:	4a14      	ldr	r2, [pc, #80]	; (da14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d9c2:	4915      	ldr	r1, [pc, #84]	; (da18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d9c4:	4817      	ldr	r0, [pc, #92]	; (da24 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    d9c6:	4b15      	ldr	r3, [pc, #84]	; (da1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d9c8:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    d9ca:	4917      	ldr	r1, [pc, #92]	; (da28 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    d9cc:	4817      	ldr	r0, [pc, #92]	; (da2c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    d9ce:	4b10      	ldr	r3, [pc, #64]	; (da10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d9d0:	4798      	blx	r3
    d9d2:	4a10      	ldr	r2, [pc, #64]	; (da14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d9d4:	4910      	ldr	r1, [pc, #64]	; (da18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d9d6:	4815      	ldr	r0, [pc, #84]	; (da2c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    d9d8:	4b10      	ldr	r3, [pc, #64]	; (da1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d9da:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    d9dc:	4914      	ldr	r1, [pc, #80]	; (da30 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    d9de:	4815      	ldr	r0, [pc, #84]	; (da34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    d9e0:	4b0b      	ldr	r3, [pc, #44]	; (da10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d9e2:	4798      	blx	r3
    d9e4:	4a0b      	ldr	r2, [pc, #44]	; (da14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d9e6:	490c      	ldr	r1, [pc, #48]	; (da18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d9e8:	4812      	ldr	r0, [pc, #72]	; (da34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    d9ea:	4b0c      	ldr	r3, [pc, #48]	; (da1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d9ec:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    d9ee:	4912      	ldr	r1, [pc, #72]	; (da38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    d9f0:	4812      	ldr	r0, [pc, #72]	; (da3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    d9f2:	4b07      	ldr	r3, [pc, #28]	; (da10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d9f4:	4798      	blx	r3
    d9f6:	4a07      	ldr	r2, [pc, #28]	; (da14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d9f8:	4907      	ldr	r1, [pc, #28]	; (da18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d9fa:	4810      	ldr	r0, [pc, #64]	; (da3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    d9fc:	4b07      	ldr	r3, [pc, #28]	; (da1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d9fe:	4798      	blx	r3
    da00:	bf00      	nop
    da02:	3708      	adds	r7, #8
    da04:	46bd      	mov	sp, r7
    da06:	bd80      	pop	{r7, pc}
    da08:	2000101c 	.word	0x2000101c
    da0c:	20000e94 	.word	0x20000e94
    da10:	0000d81d 	.word	0x0000d81d
    da14:	20000000 	.word	0x20000000
    da18:	0000d84d 	.word	0x0000d84d
    da1c:	0000e811 	.word	0x0000e811
    da20:	20001090 	.word	0x20001090
    da24:	20000eb0 	.word	0x20000eb0
    da28:	20001194 	.word	0x20001194
    da2c:	20000ecc 	.word	0x20000ecc
    da30:	200010b0 	.word	0x200010b0
    da34:	20000ee8 	.word	0x20000ee8
    da38:	20001114 	.word	0x20001114
    da3c:	20000f04 	.word	0x20000f04

0000da40 <_GLOBAL__sub_I_ptrTimerClass>:
    da40:	b580      	push	{r7, lr}
    da42:	af00      	add	r7, sp, #0
    da44:	f64f 71ff 	movw	r1, #65535	; 0xffff
    da48:	2001      	movs	r0, #1
    da4a:	4b01      	ldr	r3, [pc, #4]	; (da50 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    da4c:	4798      	blx	r3
    da4e:	bd80      	pop	{r7, pc}
    da50:	0000d98d 	.word	0x0000d98d

0000da54 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    da54:	b480      	push	{r7}
    da56:	b083      	sub	sp, #12
    da58:	af00      	add	r7, sp, #0
    da5a:	6078      	str	r0, [r7, #4]
    da5c:	4a05      	ldr	r2, [pc, #20]	; (da74 <_ZN5PrintC1Ev+0x20>)
    da5e:	687b      	ldr	r3, [r7, #4]
    da60:	601a      	str	r2, [r3, #0]
    da62:	687b      	ldr	r3, [r7, #4]
    da64:	2200      	movs	r2, #0
    da66:	605a      	str	r2, [r3, #4]
    da68:	687b      	ldr	r3, [r7, #4]
    da6a:	4618      	mov	r0, r3
    da6c:	370c      	adds	r7, #12
    da6e:	46bd      	mov	sp, r7
    da70:	bc80      	pop	{r7}
    da72:	4770      	bx	lr
    da74:	0000f170 	.word	0x0000f170

0000da78 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    da78:	b480      	push	{r7}
    da7a:	b083      	sub	sp, #12
    da7c:	af00      	add	r7, sp, #0
    da7e:	6078      	str	r0, [r7, #4]
    da80:	2300      	movs	r3, #0
    da82:	4618      	mov	r0, r3
    da84:	370c      	adds	r7, #12
    da86:	46bd      	mov	sp, r7
    da88:	bc80      	pop	{r7}
    da8a:	4770      	bx	lr

0000da8c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    da8c:	b480      	push	{r7}
    da8e:	b083      	sub	sp, #12
    da90:	af00      	add	r7, sp, #0
    da92:	6078      	str	r0, [r7, #4]
    da94:	bf00      	nop
    da96:	370c      	adds	r7, #12
    da98:	46bd      	mov	sp, r7
    da9a:	bc80      	pop	{r7}
    da9c:	4770      	bx	lr
	...

0000daa0 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    daa0:	b580      	push	{r7, lr}
    daa2:	b082      	sub	sp, #8
    daa4:	af00      	add	r7, sp, #0
    daa6:	6078      	str	r0, [r7, #4]
    daa8:	687b      	ldr	r3, [r7, #4]
    daaa:	4618      	mov	r0, r3
    daac:	4b06      	ldr	r3, [pc, #24]	; (dac8 <_ZN6StreamC1Ev+0x28>)
    daae:	4798      	blx	r3
    dab0:	4a06      	ldr	r2, [pc, #24]	; (dacc <_ZN6StreamC1Ev+0x2c>)
    dab2:	687b      	ldr	r3, [r7, #4]
    dab4:	601a      	str	r2, [r3, #0]
    dab6:	687b      	ldr	r3, [r7, #4]
    dab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dabc:	609a      	str	r2, [r3, #8]
    dabe:	687b      	ldr	r3, [r7, #4]
    dac0:	4618      	mov	r0, r3
    dac2:	3708      	adds	r7, #8
    dac4:	46bd      	mov	sp, r7
    dac6:	bd80      	pop	{r7, pc}
    dac8:	0000da55 	.word	0x0000da55
    dacc:	0000f134 	.word	0x0000f134

0000dad0 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    dad0:	b480      	push	{r7}
    dad2:	b083      	sub	sp, #12
    dad4:	af00      	add	r7, sp, #0
    dad6:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    dad8:	4b06      	ldr	r3, [pc, #24]	; (daf4 <_ZL10USBTimeoutPK10timer_task+0x24>)
    dada:	681b      	ldr	r3, [r3, #0]
    dadc:	2201      	movs	r2, #1
    dade:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    dae0:	4b04      	ldr	r3, [pc, #16]	; (daf4 <_ZL10USBTimeoutPK10timer_task+0x24>)
    dae2:	681b      	ldr	r3, [r3, #0]
    dae4:	2200      	movs	r2, #0
    dae6:	741a      	strb	r2, [r3, #16]
	
}
    dae8:	bf00      	nop
    daea:	370c      	adds	r7, #12
    daec:	46bd      	mov	sp, r7
    daee:	bc80      	pop	{r7}
    daf0:	4770      	bx	lr
    daf2:	bf00      	nop
    daf4:	20000f20 	.word	0x20000f20

0000daf8 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    daf8:	b480      	push	{r7}
    dafa:	b083      	sub	sp, #12
    dafc:	af00      	add	r7, sp, #0
    dafe:	4603      	mov	r3, r0
    db00:	603a      	str	r2, [r7, #0]
    db02:	71fb      	strb	r3, [r7, #7]
    db04:	460b      	mov	r3, r1
    db06:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    db08:	4b08      	ldr	r3, [pc, #32]	; (db2c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    db0a:	681b      	ldr	r3, [r3, #0]
    db0c:	2201      	movs	r2, #1
    db0e:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    db10:	4b06      	ldr	r3, [pc, #24]	; (db2c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    db12:	681b      	ldr	r3, [r3, #0]
    db14:	2201      	movs	r2, #1
    db16:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    db18:	4b04      	ldr	r3, [pc, #16]	; (db2c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    db1a:	681b      	ldr	r3, [r3, #0]
    db1c:	2201      	movs	r2, #1
    db1e:	741a      	strb	r2, [r3, #16]


	return false;
    db20:	2300      	movs	r3, #0
}
    db22:	4618      	mov	r0, r3
    db24:	370c      	adds	r7, #12
    db26:	46bd      	mov	sp, r7
    db28:	bc80      	pop	{r7}
    db2a:	4770      	bx	lr
    db2c:	20000f20 	.word	0x20000f20

0000db30 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    db30:	b480      	push	{r7}
    db32:	b083      	sub	sp, #12
    db34:	af00      	add	r7, sp, #0
    db36:	4603      	mov	r3, r0
    db38:	603a      	str	r2, [r7, #0]
    db3a:	71fb      	strb	r3, [r7, #7]
    db3c:	460b      	mov	r3, r1
    db3e:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    db40:	4b08      	ldr	r3, [pc, #32]	; (db64 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    db42:	681b      	ldr	r3, [r3, #0]
    db44:	2201      	movs	r2, #1
    db46:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    db48:	4b06      	ldr	r3, [pc, #24]	; (db64 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    db4a:	681b      	ldr	r3, [r3, #0]
    db4c:	2201      	movs	r2, #1
    db4e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    db50:	4b04      	ldr	r3, [pc, #16]	; (db64 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    db52:	681b      	ldr	r3, [r3, #0]
    db54:	2201      	movs	r2, #1
    db56:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    db58:	2300      	movs	r3, #0
}
    db5a:	4618      	mov	r0, r3
    db5c:	370c      	adds	r7, #12
    db5e:	46bd      	mov	sp, r7
    db60:	bc80      	pop	{r7}
    db62:	4770      	bx	lr
    db64:	20000f20 	.word	0x20000f20

0000db68 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    db68:	b580      	push	{r7, lr}
    db6a:	b082      	sub	sp, #8
    db6c:	af00      	add	r7, sp, #0
    db6e:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    db70:	793b      	ldrb	r3, [r7, #4]
    db72:	f003 0301 	and.w	r3, r3, #1
    db76:	b2db      	uxtb	r3, r3
    db78:	2b00      	cmp	r3, #0
    db7a:	d013      	beq.n	dba4 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    db7c:	490c      	ldr	r1, [pc, #48]	; (dbb0 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    db7e:	2000      	movs	r0, #0
    db80:	4b0c      	ldr	r3, [pc, #48]	; (dbb4 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    db82:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    db84:	490c      	ldr	r1, [pc, #48]	; (dbb8 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    db86:	2001      	movs	r0, #1
    db88:	4b0a      	ldr	r3, [pc, #40]	; (dbb4 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    db8a:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    db8c:	4b0b      	ldr	r3, [pc, #44]	; (dbbc <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    db8e:	681b      	ldr	r3, [r3, #0]
    db90:	2201      	movs	r2, #1
    db92:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    db94:	4b09      	ldr	r3, [pc, #36]	; (dbbc <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    db96:	681b      	ldr	r3, [r3, #0]
    db98:	2201      	movs	r2, #1
    db9a:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    db9c:	4b07      	ldr	r3, [pc, #28]	; (dbbc <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    db9e:	681b      	ldr	r3, [r3, #0]
    dba0:	2201      	movs	r2, #1
    dba2:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    dba4:	2300      	movs	r3, #0
}
    dba6:	4618      	mov	r0, r3
    dba8:	3708      	adds	r7, #8
    dbaa:	46bd      	mov	sp, r7
    dbac:	bd80      	pop	{r7, pc}
    dbae:	bf00      	nop
    dbb0:	0000daf9 	.word	0x0000daf9
    dbb4:	0000c359 	.word	0x0000c359
    dbb8:	0000db31 	.word	0x0000db31
    dbbc:	20000f20 	.word	0x20000f20

0000dbc0 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    dbc0:	b580      	push	{r7, lr}
    dbc2:	b082      	sub	sp, #8
    dbc4:	af00      	add	r7, sp, #0
    dbc6:	6078      	str	r0, [r7, #4]
    dbc8:	687b      	ldr	r3, [r7, #4]
    dbca:	4618      	mov	r0, r3
    dbcc:	4b0a      	ldr	r3, [pc, #40]	; (dbf8 <_ZN9CDC_ClassC1Ev+0x38>)
    dbce:	4798      	blx	r3
    dbd0:	687b      	ldr	r3, [r7, #4]
    dbd2:	3310      	adds	r3, #16
    dbd4:	4618      	mov	r0, r3
    dbd6:	4b09      	ldr	r3, [pc, #36]	; (dbfc <_ZN9CDC_ClassC1Ev+0x3c>)
    dbd8:	4798      	blx	r3
    dbda:	4a09      	ldr	r2, [pc, #36]	; (dc00 <_ZN9CDC_ClassC1Ev+0x40>)
    dbdc:	687b      	ldr	r3, [r7, #4]
    dbde:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    dbe0:	687b      	ldr	r3, [r7, #4]
    dbe2:	f04f 32ff 	mov.w	r2, #4294967295
    dbe6:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    dbe8:	4a06      	ldr	r2, [pc, #24]	; (dc04 <_ZN9CDC_ClassC1Ev+0x44>)
    dbea:	687b      	ldr	r3, [r7, #4]
    dbec:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    dbee:	687b      	ldr	r3, [r7, #4]
    dbf0:	4618      	mov	r0, r3
    dbf2:	3708      	adds	r7, #8
    dbf4:	46bd      	mov	sp, r7
    dbf6:	bd80      	pop	{r7, pc}
    dbf8:	0000daa1 	.word	0x0000daa1
    dbfc:	0000e321 	.word	0x0000e321
    dc00:	0000f104 	.word	0x0000f104
    dc04:	20000f20 	.word	0x20000f20

0000dc08 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    dc08:	b580      	push	{r7, lr}
    dc0a:	b082      	sub	sp, #8
    dc0c:	af00      	add	r7, sp, #0
    dc0e:	6078      	str	r0, [r7, #4]
    dc10:	4a06      	ldr	r2, [pc, #24]	; (dc2c <_ZN9CDC_ClassD1Ev+0x24>)
    dc12:	687b      	ldr	r3, [r7, #4]
    dc14:	601a      	str	r2, [r3, #0]
    dc16:	687b      	ldr	r3, [r7, #4]
    dc18:	3310      	adds	r3, #16
    dc1a:	4618      	mov	r0, r3
    dc1c:	4b04      	ldr	r3, [pc, #16]	; (dc30 <_ZN9CDC_ClassD1Ev+0x28>)
    dc1e:	4798      	blx	r3
{
} //~CDC_Class
    dc20:	687b      	ldr	r3, [r7, #4]
    dc22:	4618      	mov	r0, r3
    dc24:	3708      	adds	r7, #8
    dc26:	46bd      	mov	sp, r7
    dc28:	bd80      	pop	{r7, pc}
    dc2a:	bf00      	nop
    dc2c:	0000f104 	.word	0x0000f104
    dc30:	0000e341 	.word	0x0000e341

0000dc34 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    dc34:	b580      	push	{r7, lr}
    dc36:	b082      	sub	sp, #8
    dc38:	af00      	add	r7, sp, #0
    dc3a:	6078      	str	r0, [r7, #4]
	
	OnInit();
    dc3c:	687b      	ldr	r3, [r7, #4]
    dc3e:	3310      	adds	r3, #16
    dc40:	4618      	mov	r0, r3
    dc42:	4b09      	ldr	r3, [pc, #36]	; (dc68 <_ZN9CDC_Class4InitEv+0x34>)
    dc44:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    dc46:	4909      	ldr	r1, [pc, #36]	; (dc6c <_ZN9CDC_Class4InitEv+0x38>)
    dc48:	2003      	movs	r0, #3
    dc4a:	4b09      	ldr	r3, [pc, #36]	; (dc70 <_ZN9CDC_Class4InitEv+0x3c>)
    dc4c:	4798      	blx	r3
	delay_ms(100);
    dc4e:	2064      	movs	r0, #100	; 0x64
    dc50:	4b08      	ldr	r3, [pc, #32]	; (dc74 <_ZN9CDC_Class4InitEv+0x40>)
    dc52:	4798      	blx	r3
		
	if (connected)
    dc54:	687b      	ldr	r3, [r7, #4]
    dc56:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    dc58:	2064      	movs	r0, #100	; 0x64
    dc5a:	4b06      	ldr	r3, [pc, #24]	; (dc74 <_ZN9CDC_Class4InitEv+0x40>)
    dc5c:	4798      	blx	r3

	

}
    dc5e:	bf00      	nop
    dc60:	3708      	adds	r7, #8
    dc62:	46bd      	mov	sp, r7
    dc64:	bd80      	pop	{r7, pc}
    dc66:	bf00      	nop
    dc68:	0000e355 	.word	0x0000e355
    dc6c:	0000db69 	.word	0x0000db69
    dc70:	0000c359 	.word	0x0000c359
    dc74:	00001cfd 	.word	0x00001cfd

0000dc78 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    dc78:	b580      	push	{r7, lr}
    dc7a:	b082      	sub	sp, #8
    dc7c:	af00      	add	r7, sp, #0
    dc7e:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    dc80:	4b03      	ldr	r3, [pc, #12]	; (dc90 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    dc82:	4798      	blx	r3
    dc84:	4603      	mov	r3, r0
	
}
    dc86:	4618      	mov	r0, r3
    dc88:	3708      	adds	r7, #8
    dc8a:	46bd      	mov	sp, r7
    dc8c:	bd80      	pop	{r7, pc}
    dc8e:	bf00      	nop
    dc90:	0000c3d1 	.word	0x0000c3d1

0000dc94 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    dc94:	b580      	push	{r7, lr}
    dc96:	b084      	sub	sp, #16
    dc98:	af00      	add	r7, sp, #0
    dc9a:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    dc9c:	687b      	ldr	r3, [r7, #4]
    dc9e:	699b      	ldr	r3, [r3, #24]
    dca0:	f1b3 3fff 	cmp.w	r3, #4294967295
    dca4:	bf14      	ite	ne
    dca6:	2301      	movne	r3, #1
    dca8:	2300      	moveq	r3, #0
    dcaa:	b2db      	uxtb	r3, r3
    dcac:	2b00      	cmp	r3, #0
    dcae:	d002      	beq.n	dcb6 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    dcb0:	687b      	ldr	r3, [r7, #4]
    dcb2:	699b      	ldr	r3, [r3, #24]
    dcb4:	e011      	b.n	dcda <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    dcb6:	687b      	ldr	r3, [r7, #4]
    dcb8:	681b      	ldr	r3, [r3, #0]
    dcba:	331c      	adds	r3, #28
    dcbc:	681b      	ldr	r3, [r3, #0]
    dcbe:	f107 010f 	add.w	r1, r7, #15
    dcc2:	2201      	movs	r2, #1
    dcc4:	6878      	ldr	r0, [r7, #4]
    dcc6:	4798      	blx	r3
    dcc8:	4602      	mov	r2, r0
    dcca:	687b      	ldr	r3, [r7, #4]
    dccc:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    dcce:	7bfb      	ldrb	r3, [r7, #15]
    dcd0:	461a      	mov	r2, r3
    dcd2:	687b      	ldr	r3, [r7, #4]
    dcd4:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    dcd6:	687b      	ldr	r3, [r7, #4]
    dcd8:	699b      	ldr	r3, [r3, #24]
}
    dcda:	4618      	mov	r0, r3
    dcdc:	3710      	adds	r7, #16
    dcde:	46bd      	mov	sp, r7
    dce0:	bd80      	pop	{r7, pc}
	...

0000dce4 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    dce4:	b580      	push	{r7, lr}
    dce6:	b086      	sub	sp, #24
    dce8:	af00      	add	r7, sp, #0
    dcea:	60f8      	str	r0, [r7, #12]
    dcec:	60b9      	str	r1, [r7, #8]
    dcee:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    dcf0:	68fb      	ldr	r3, [r7, #12]
    dcf2:	7c1b      	ldrb	r3, [r3, #16]
    dcf4:	b2db      	uxtb	r3, r3
    dcf6:	2b00      	cmp	r3, #0
    dcf8:	d02e      	beq.n	dd58 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    dcfa:	687a      	ldr	r2, [r7, #4]
    dcfc:	4613      	mov	r3, r2
    dcfe:	009b      	lsls	r3, r3, #2
    dd00:	4413      	add	r3, r2
    dd02:	005b      	lsls	r3, r3, #1
    dd04:	461a      	mov	r2, r3
    dd06:	4918      	ldr	r1, [pc, #96]	; (dd68 <_ZN9CDC_Class8readDataEPvl+0x84>)
    dd08:	4818      	ldr	r0, [pc, #96]	; (dd6c <_ZN9CDC_Class8readDataEPvl+0x88>)
    dd0a:	4b19      	ldr	r3, [pc, #100]	; (dd70 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    dd0c:	4798      	blx	r3
		rxReady=false;
    dd0e:	68fb      	ldr	r3, [r7, #12]
    dd10:	2200      	movs	r2, #0
    dd12:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    dd14:	687b      	ldr	r3, [r7, #4]
    dd16:	4619      	mov	r1, r3
    dd18:	68b8      	ldr	r0, [r7, #8]
    dd1a:	4b16      	ldr	r3, [pc, #88]	; (dd74 <_ZN9CDC_Class8readDataEPvl+0x90>)
    dd1c:	4798      	blx	r3
    dd1e:	4603      	mov	r3, r0
    dd20:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    dd22:	68fb      	ldr	r3, [r7, #12]
    dd24:	7d5b      	ldrb	r3, [r3, #21]
    dd26:	b2db      	uxtb	r3, r3
    dd28:	f083 0301 	eor.w	r3, r3, #1
    dd2c:	b2db      	uxtb	r3, r3
    dd2e:	2b00      	cmp	r3, #0
    dd30:	d006      	beq.n	dd40 <_ZN9CDC_Class8readDataEPvl+0x5c>
    dd32:	68fb      	ldr	r3, [r7, #12]
    dd34:	7c1b      	ldrb	r3, [r3, #16]
    dd36:	b2db      	uxtb	r3, r3
    dd38:	2b00      	cmp	r3, #0
    dd3a:	d001      	beq.n	dd40 <_ZN9CDC_Class8readDataEPvl+0x5c>
    dd3c:	2301      	movs	r3, #1
    dd3e:	e000      	b.n	dd42 <_ZN9CDC_Class8readDataEPvl+0x5e>
    dd40:	2300      	movs	r3, #0
    dd42:	2b00      	cmp	r3, #0
    dd44:	d000      	beq.n	dd48 <_ZN9CDC_Class8readDataEPvl+0x64>
    dd46:	e7ec      	b.n	dd22 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    dd48:	4808      	ldr	r0, [pc, #32]	; (dd6c <_ZN9CDC_Class8readDataEPvl+0x88>)
    dd4a:	4b0b      	ldr	r3, [pc, #44]	; (dd78 <_ZN9CDC_Class8readDataEPvl+0x94>)
    dd4c:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    dd4e:	4906      	ldr	r1, [pc, #24]	; (dd68 <_ZN9CDC_Class8readDataEPvl+0x84>)
    dd50:	4806      	ldr	r0, [pc, #24]	; (dd6c <_ZN9CDC_Class8readDataEPvl+0x88>)
    dd52:	4b0a      	ldr	r3, [pc, #40]	; (dd7c <_ZN9CDC_Class8readDataEPvl+0x98>)
    dd54:	4798      	blx	r3
    dd56:	e001      	b.n	dd5c <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    dd58:	2300      	movs	r3, #0
    dd5a:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    dd5c:	7dfb      	ldrb	r3, [r7, #23]
}
    dd5e:	4618      	mov	r0, r3
    dd60:	3718      	adds	r7, #24
    dd62:	46bd      	mov	sp, r7
    dd64:	bd80      	pop	{r7, pc}
    dd66:	bf00      	nop
    dd68:	0000dad1 	.word	0x0000dad1
    dd6c:	20000fdc 	.word	0x20000fdc
    dd70:	0000e599 	.word	0x0000e599
    dd74:	0000c2ad 	.word	0x0000c2ad
    dd78:	0000e4e1 	.word	0x0000e4e1
    dd7c:	0000e5d1 	.word	0x0000e5d1

0000dd80 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    dd80:	b580      	push	{r7, lr}
    dd82:	b084      	sub	sp, #16
    dd84:	af00      	add	r7, sp, #0
    dd86:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    dd88:	687b      	ldr	r3, [r7, #4]
    dd8a:	2200      	movs	r2, #0
    dd8c:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    dd8e:	f107 030f 	add.w	r3, r7, #15
    dd92:	2101      	movs	r1, #1
    dd94:	4618      	mov	r0, r3
    dd96:	4b08      	ldr	r3, [pc, #32]	; (ddb8 <_ZN9CDC_Class4readEv+0x38>)
    dd98:	4798      	blx	r3
	while(!rxReady);
    dd9a:	687b      	ldr	r3, [r7, #4]
    dd9c:	7d5b      	ldrb	r3, [r3, #21]
    dd9e:	b2db      	uxtb	r3, r3
    dda0:	f083 0301 	eor.w	r3, r3, #1
    dda4:	b2db      	uxtb	r3, r3
    dda6:	2b00      	cmp	r3, #0
    dda8:	d000      	beq.n	ddac <_ZN9CDC_Class4readEv+0x2c>
    ddaa:	e7f6      	b.n	dd9a <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    ddac:	7bfb      	ldrb	r3, [r7, #15]
}
    ddae:	4618      	mov	r0, r3
    ddb0:	3710      	adds	r7, #16
    ddb2:	46bd      	mov	sp, r7
    ddb4:	bd80      	pop	{r7, pc}
    ddb6:	bf00      	nop
    ddb8:	0000c2ad 	.word	0x0000c2ad

0000ddbc <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    ddbc:	b580      	push	{r7, lr}
    ddbe:	b082      	sub	sp, #8
    ddc0:	af00      	add	r7, sp, #0
    ddc2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    ddc4:	687b      	ldr	r3, [r7, #4]
    ddc6:	331c      	adds	r3, #28
    ddc8:	2140      	movs	r1, #64	; 0x40
    ddca:	4618      	mov	r0, r3
    ddcc:	4b02      	ldr	r3, [pc, #8]	; (ddd8 <_ZN9CDC_Class5flushEv+0x1c>)
    ddce:	4798      	blx	r3
}
    ddd0:	bf00      	nop
    ddd2:	3708      	adds	r7, #8
    ddd4:	46bd      	mov	sp, r7
    ddd6:	bd80      	pop	{r7, pc}
    ddd8:	0000c2f1 	.word	0x0000c2f1

0000dddc <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    dddc:	b580      	push	{r7, lr}
    ddde:	b082      	sub	sp, #8
    dde0:	af00      	add	r7, sp, #0
    dde2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    dde4:	4b02      	ldr	r3, [pc, #8]	; (ddf0 <_ZN9CDC_Class5clearEv+0x14>)
    dde6:	4798      	blx	r3
}
    dde8:	bf00      	nop
    ddea:	3708      	adds	r7, #8
    ddec:	46bd      	mov	sp, r7
    ddee:	bd80      	pop	{r7, pc}
    ddf0:	0000c335 	.word	0x0000c335

0000ddf4 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    ddf4:	b580      	push	{r7, lr}
    ddf6:	b082      	sub	sp, #8
    ddf8:	af00      	add	r7, sp, #0
    ddfa:	6078      	str	r0, [r7, #4]
    ddfc:	460b      	mov	r3, r1
    ddfe:	70fb      	strb	r3, [r7, #3]
	if (connected){
    de00:	687b      	ldr	r3, [r7, #4]
    de02:	7c1b      	ldrb	r3, [r3, #16]
    de04:	b2db      	uxtb	r3, r3
    de06:	2b00      	cmp	r3, #0
    de08:	d012      	beq.n	de30 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    de0a:	687b      	ldr	r3, [r7, #4]
    de0c:	7d1b      	ldrb	r3, [r3, #20]
    de0e:	b2db      	uxtb	r3, r3
    de10:	f083 0301 	eor.w	r3, r3, #1
    de14:	b2db      	uxtb	r3, r3
    de16:	2b00      	cmp	r3, #0
    de18:	d000      	beq.n	de1c <_ZN9CDC_Class5writeEh+0x28>
    de1a:	e7f6      	b.n	de0a <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    de1c:	687b      	ldr	r3, [r7, #4]
    de1e:	681b      	ldr	r3, [r3, #0]
    de20:	3324      	adds	r3, #36	; 0x24
    de22:	681b      	ldr	r3, [r3, #0]
    de24:	1cf9      	adds	r1, r7, #3
    de26:	2201      	movs	r2, #1
    de28:	6878      	ldr	r0, [r7, #4]
    de2a:	4798      	blx	r3
    de2c:	4603      	mov	r3, r0
    de2e:	e000      	b.n	de32 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    de30:	2300      	movs	r3, #0
	}
		
}
    de32:	4618      	mov	r0, r3
    de34:	3708      	adds	r7, #8
    de36:	46bd      	mov	sp, r7
    de38:	bd80      	pop	{r7, pc}
	...

0000de3c <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    de3c:	b580      	push	{r7, lr}
    de3e:	b086      	sub	sp, #24
    de40:	af00      	add	r7, sp, #0
    de42:	60f8      	str	r0, [r7, #12]
    de44:	60b9      	str	r1, [r7, #8]
    de46:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    de48:	68fb      	ldr	r3, [r7, #12]
    de4a:	7c1b      	ldrb	r3, [r3, #16]
    de4c:	b2db      	uxtb	r3, r3
    de4e:	2b00      	cmp	r3, #0
    de50:	d02f      	beq.n	deb2 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    de52:	687a      	ldr	r2, [r7, #4]
    de54:	4613      	mov	r3, r2
    de56:	009b      	lsls	r3, r3, #2
    de58:	4413      	add	r3, r2
    de5a:	005b      	lsls	r3, r3, #1
    de5c:	461a      	mov	r2, r3
    de5e:	4917      	ldr	r1, [pc, #92]	; (debc <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    de60:	4817      	ldr	r0, [pc, #92]	; (dec0 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    de62:	4b18      	ldr	r3, [pc, #96]	; (dec4 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    de64:	4798      	blx	r3
		txReady=false;
    de66:	68fb      	ldr	r3, [r7, #12]
    de68:	2200      	movs	r2, #0
    de6a:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    de6c:	687b      	ldr	r3, [r7, #4]
    de6e:	4619      	mov	r1, r3
    de70:	68b8      	ldr	r0, [r7, #8]
    de72:	4b15      	ldr	r3, [pc, #84]	; (dec8 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    de74:	4798      	blx	r3
    de76:	4603      	mov	r3, r0
    de78:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    de7a:	68fb      	ldr	r3, [r7, #12]
    de7c:	7d1b      	ldrb	r3, [r3, #20]
    de7e:	b2db      	uxtb	r3, r3
    de80:	f083 0301 	eor.w	r3, r3, #1
    de84:	b2db      	uxtb	r3, r3
    de86:	2b00      	cmp	r3, #0
    de88:	d006      	beq.n	de98 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    de8a:	68fb      	ldr	r3, [r7, #12]
    de8c:	7c1b      	ldrb	r3, [r3, #16]
    de8e:	b2db      	uxtb	r3, r3
    de90:	2b00      	cmp	r3, #0
    de92:	d001      	beq.n	de98 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    de94:	2301      	movs	r3, #1
    de96:	e000      	b.n	de9a <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    de98:	2300      	movs	r3, #0
    de9a:	2b00      	cmp	r3, #0
    de9c:	d000      	beq.n	dea0 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    de9e:	e7ec      	b.n	de7a <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    dea0:	4807      	ldr	r0, [pc, #28]	; (dec0 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dea2:	4b0a      	ldr	r3, [pc, #40]	; (decc <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    dea4:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    dea6:	4905      	ldr	r1, [pc, #20]	; (debc <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    dea8:	4805      	ldr	r0, [pc, #20]	; (dec0 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    deaa:	4b09      	ldr	r3, [pc, #36]	; (ded0 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    deac:	4798      	blx	r3
		return r;
    deae:	697b      	ldr	r3, [r7, #20]
    deb0:	e000      	b.n	deb4 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    deb2:	2300      	movs	r3, #0
	}
	

}
    deb4:	4618      	mov	r0, r3
    deb6:	3718      	adds	r7, #24
    deb8:	46bd      	mov	sp, r7
    deba:	bd80      	pop	{r7, pc}
    debc:	0000dad1 	.word	0x0000dad1
    dec0:	20000fdc 	.word	0x20000fdc
    dec4:	0000e599 	.word	0x0000e599
    dec8:	0000c2f1 	.word	0x0000c2f1
    decc:	0000e4e1 	.word	0x0000e4e1
    ded0:	0000e5d1 	.word	0x0000e5d1

0000ded4 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    ded4:	b580      	push	{r7, lr}
    ded6:	b086      	sub	sp, #24
    ded8:	af00      	add	r7, sp, #0
    deda:	60f8      	str	r0, [r7, #12]
    dedc:	60b9      	str	r1, [r7, #8]
    dede:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    dee0:	68fb      	ldr	r3, [r7, #12]
    dee2:	2200      	movs	r2, #0
    dee4:	751a      	strb	r2, [r3, #20]

 	if (connected){
    dee6:	68fb      	ldr	r3, [r7, #12]
    dee8:	7c1b      	ldrb	r3, [r3, #16]
    deea:	b2db      	uxtb	r3, r3
    deec:	2b00      	cmp	r3, #0
    deee:	d02a      	beq.n	df46 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    def0:	687a      	ldr	r2, [r7, #4]
    def2:	4613      	mov	r3, r2
    def4:	009b      	lsls	r3, r3, #2
    def6:	4413      	add	r3, r2
    def8:	005b      	lsls	r3, r3, #1
    defa:	461a      	mov	r2, r3
    defc:	4915      	ldr	r1, [pc, #84]	; (df54 <_ZN9CDC_Class5writeEPKhj+0x80>)
    defe:	4816      	ldr	r0, [pc, #88]	; (df58 <_ZN9CDC_Class5writeEPKhj+0x84>)
    df00:	4b16      	ldr	r3, [pc, #88]	; (df5c <_ZN9CDC_Class5writeEPKhj+0x88>)
    df02:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    df04:	6879      	ldr	r1, [r7, #4]
    df06:	68b8      	ldr	r0, [r7, #8]
    df08:	4b15      	ldr	r3, [pc, #84]	; (df60 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    df0a:	4798      	blx	r3
    df0c:	4603      	mov	r3, r0
    df0e:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    df10:	68fb      	ldr	r3, [r7, #12]
    df12:	7d1b      	ldrb	r3, [r3, #20]
    df14:	b2db      	uxtb	r3, r3
    df16:	f083 0301 	eor.w	r3, r3, #1
    df1a:	b2db      	uxtb	r3, r3
    df1c:	2b00      	cmp	r3, #0
    df1e:	d006      	beq.n	df2e <_ZN9CDC_Class5writeEPKhj+0x5a>
    df20:	68fb      	ldr	r3, [r7, #12]
    df22:	7c1b      	ldrb	r3, [r3, #16]
    df24:	b2db      	uxtb	r3, r3
    df26:	2b00      	cmp	r3, #0
    df28:	d001      	beq.n	df2e <_ZN9CDC_Class5writeEPKhj+0x5a>
    df2a:	2301      	movs	r3, #1
    df2c:	e000      	b.n	df30 <_ZN9CDC_Class5writeEPKhj+0x5c>
    df2e:	2300      	movs	r3, #0
    df30:	2b00      	cmp	r3, #0
    df32:	d000      	beq.n	df36 <_ZN9CDC_Class5writeEPKhj+0x62>
    df34:	e7ec      	b.n	df10 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    df36:	4808      	ldr	r0, [pc, #32]	; (df58 <_ZN9CDC_Class5writeEPKhj+0x84>)
    df38:	4b0a      	ldr	r3, [pc, #40]	; (df64 <_ZN9CDC_Class5writeEPKhj+0x90>)
    df3a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    df3c:	4905      	ldr	r1, [pc, #20]	; (df54 <_ZN9CDC_Class5writeEPKhj+0x80>)
    df3e:	4806      	ldr	r0, [pc, #24]	; (df58 <_ZN9CDC_Class5writeEPKhj+0x84>)
    df40:	4b09      	ldr	r3, [pc, #36]	; (df68 <_ZN9CDC_Class5writeEPKhj+0x94>)
    df42:	4798      	blx	r3
    df44:	e001      	b.n	df4a <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    df46:	2300      	movs	r3, #0
    df48:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    df4a:	697b      	ldr	r3, [r7, #20]
}
    df4c:	4618      	mov	r0, r3
    df4e:	3718      	adds	r7, #24
    df50:	46bd      	mov	sp, r7
    df52:	bd80      	pop	{r7, pc}
    df54:	0000dad1 	.word	0x0000dad1
    df58:	20000fdc 	.word	0x20000fdc
    df5c:	0000e599 	.word	0x0000e599
    df60:	0000c2f1 	.word	0x0000c2f1
    df64:	0000e4e1 	.word	0x0000e4e1
    df68:	0000e5d1 	.word	0x0000e5d1

0000df6c <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    df6c:	b480      	push	{r7}
    df6e:	b083      	sub	sp, #12
    df70:	af00      	add	r7, sp, #0
    df72:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    df74:	687b      	ldr	r3, [r7, #4]
    df76:	7d5b      	ldrb	r3, [r3, #21]
    df78:	b2db      	uxtb	r3, r3
    df7a:	2b00      	cmp	r3, #0
    df7c:	d006      	beq.n	df8c <_ZN9CDC_Class9availableEv+0x20>
    df7e:	687b      	ldr	r3, [r7, #4]
    df80:	7d1b      	ldrb	r3, [r3, #20]
    df82:	b2db      	uxtb	r3, r3
    df84:	2b00      	cmp	r3, #0
    df86:	d001      	beq.n	df8c <_ZN9CDC_Class9availableEv+0x20>
    df88:	2301      	movs	r3, #1
    df8a:	e000      	b.n	df8e <_ZN9CDC_Class9availableEv+0x22>
    df8c:	2300      	movs	r3, #0
    df8e:	2b00      	cmp	r3, #0
    df90:	d001      	beq.n	df96 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    df92:	2301      	movs	r3, #1
    df94:	e000      	b.n	df98 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    df96:	2300      	movs	r3, #0
	}
	
}
    df98:	4618      	mov	r0, r3
    df9a:	370c      	adds	r7, #12
    df9c:	46bd      	mov	sp, r7
    df9e:	bc80      	pop	{r7}
    dfa0:	4770      	bx	lr
	...

0000dfa4 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    dfa4:	b580      	push	{r7, lr}
    dfa6:	b082      	sub	sp, #8
    dfa8:	af00      	add	r7, sp, #0
    dfaa:	6078      	str	r0, [r7, #4]
    dfac:	6039      	str	r1, [r7, #0]
    dfae:	687b      	ldr	r3, [r7, #4]
    dfb0:	2b01      	cmp	r3, #1
    dfb2:	d10c      	bne.n	dfce <_Z41__static_initialization_and_destruction_0ii+0x2a>
    dfb4:	683b      	ldr	r3, [r7, #0]
    dfb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dfba:	4293      	cmp	r3, r2
    dfbc:	d107      	bne.n	dfce <_Z41__static_initialization_and_destruction_0ii+0x2a>
    dfbe:	4806      	ldr	r0, [pc, #24]	; (dfd8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dfc0:	4b06      	ldr	r3, [pc, #24]	; (dfdc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dfc2:	4798      	blx	r3
    dfc4:	4a06      	ldr	r2, [pc, #24]	; (dfe0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    dfc6:	4907      	ldr	r1, [pc, #28]	; (dfe4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    dfc8:	4803      	ldr	r0, [pc, #12]	; (dfd8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dfca:	4b07      	ldr	r3, [pc, #28]	; (dfe8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    dfcc:	4798      	blx	r3
    dfce:	bf00      	nop
    dfd0:	3708      	adds	r7, #8
    dfd2:	46bd      	mov	sp, r7
    dfd4:	bd80      	pop	{r7, pc}
    dfd6:	bf00      	nop
    dfd8:	20000f24 	.word	0x20000f24
    dfdc:	0000dbc1 	.word	0x0000dbc1
    dfe0:	20000000 	.word	0x20000000
    dfe4:	0000dc09 	.word	0x0000dc09
    dfe8:	0000e811 	.word	0x0000e811

0000dfec <_GLOBAL__sub_I_ptrCDCClass>:
    dfec:	b580      	push	{r7, lr}
    dfee:	af00      	add	r7, sp, #0
    dff0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dff4:	2001      	movs	r0, #1
    dff6:	4b01      	ldr	r3, [pc, #4]	; (dffc <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    dff8:	4798      	blx	r3
    dffa:	bd80      	pop	{r7, pc}
    dffc:	0000dfa5 	.word	0x0000dfa5

0000e000 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e000:	b590      	push	{r4, r7, lr}
    e002:	b083      	sub	sp, #12
    e004:	af00      	add	r7, sp, #0
    e006:	6078      	str	r0, [r7, #4]
    e008:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e00a:	683b      	ldr	r3, [r7, #0]
    e00c:	2b00      	cmp	r3, #0
    e00e:	d101      	bne.n	e014 <_ZN5Print5writeEPKc+0x14>
    e010:	2300      	movs	r3, #0
    e012:	e00c      	b.n	e02e <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e014:	687b      	ldr	r3, [r7, #4]
    e016:	681b      	ldr	r3, [r3, #0]
    e018:	3304      	adds	r3, #4
    e01a:	681c      	ldr	r4, [r3, #0]
    e01c:	6838      	ldr	r0, [r7, #0]
    e01e:	4b06      	ldr	r3, [pc, #24]	; (e038 <_ZN5Print5writeEPKc+0x38>)
    e020:	4798      	blx	r3
    e022:	4603      	mov	r3, r0
    e024:	461a      	mov	r2, r3
    e026:	6839      	ldr	r1, [r7, #0]
    e028:	6878      	ldr	r0, [r7, #4]
    e02a:	47a0      	blx	r4
    e02c:	4603      	mov	r3, r0
    }
    e02e:	4618      	mov	r0, r3
    e030:	370c      	adds	r7, #12
    e032:	46bd      	mov	sp, r7
    e034:	bd90      	pop	{r4, r7, pc}
    e036:	bf00      	nop
    e038:	0000ea81 	.word	0x0000ea81

0000e03c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e03c:	b580      	push	{r7, lr}
    e03e:	b086      	sub	sp, #24
    e040:	af00      	add	r7, sp, #0
    e042:	60f8      	str	r0, [r7, #12]
    e044:	60b9      	str	r1, [r7, #8]
    e046:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e048:	2300      	movs	r3, #0
    e04a:	617b      	str	r3, [r7, #20]
  while (size--) {
    e04c:	687b      	ldr	r3, [r7, #4]
    e04e:	1e5a      	subs	r2, r3, #1
    e050:	607a      	str	r2, [r7, #4]
    e052:	2b00      	cmp	r3, #0
    e054:	bf14      	ite	ne
    e056:	2301      	movne	r3, #1
    e058:	2300      	moveq	r3, #0
    e05a:	b2db      	uxtb	r3, r3
    e05c:	2b00      	cmp	r3, #0
    e05e:	d016      	beq.n	e08e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e060:	68fb      	ldr	r3, [r7, #12]
    e062:	681b      	ldr	r3, [r3, #0]
    e064:	681a      	ldr	r2, [r3, #0]
    e066:	68bb      	ldr	r3, [r7, #8]
    e068:	1c59      	adds	r1, r3, #1
    e06a:	60b9      	str	r1, [r7, #8]
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	4619      	mov	r1, r3
    e070:	68f8      	ldr	r0, [r7, #12]
    e072:	4790      	blx	r2
    e074:	4603      	mov	r3, r0
    e076:	2b00      	cmp	r3, #0
    e078:	bf14      	ite	ne
    e07a:	2301      	movne	r3, #1
    e07c:	2300      	moveq	r3, #0
    e07e:	b2db      	uxtb	r3, r3
    e080:	2b00      	cmp	r3, #0
    e082:	d003      	beq.n	e08c <_ZN5Print5writeEPKhj+0x50>
    e084:	697b      	ldr	r3, [r7, #20]
    e086:	3301      	adds	r3, #1
    e088:	617b      	str	r3, [r7, #20]
  while (size--) {
    e08a:	e7df      	b.n	e04c <_ZN5Print5writeEPKhj+0x10>
    else break;
    e08c:	bf00      	nop
  }
  return n;
    e08e:	697b      	ldr	r3, [r7, #20]
}
    e090:	4618      	mov	r0, r3
    e092:	3718      	adds	r7, #24
    e094:	46bd      	mov	sp, r7
    e096:	bd80      	pop	{r7, pc}

0000e098 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    e098:	b580      	push	{r7, lr}
    e09a:	b082      	sub	sp, #8
    e09c:	af00      	add	r7, sp, #0
    e09e:	6078      	str	r0, [r7, #4]
    e0a0:	6039      	str	r1, [r7, #0]
  return write(str);
    e0a2:	6839      	ldr	r1, [r7, #0]
    e0a4:	6878      	ldr	r0, [r7, #4]
    e0a6:	4b03      	ldr	r3, [pc, #12]	; (e0b4 <_ZN5Print5printEPKc+0x1c>)
    e0a8:	4798      	blx	r3
    e0aa:	4603      	mov	r3, r0
}
    e0ac:	4618      	mov	r0, r3
    e0ae:	3708      	adds	r7, #8
    e0b0:	46bd      	mov	sp, r7
    e0b2:	bd80      	pop	{r7, pc}
    e0b4:	0000e001 	.word	0x0000e001

0000e0b8 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    e0b8:	b580      	push	{r7, lr}
    e0ba:	b084      	sub	sp, #16
    e0bc:	af00      	add	r7, sp, #0
    e0be:	60f8      	str	r0, [r7, #12]
    e0c0:	460b      	mov	r3, r1
    e0c2:	607a      	str	r2, [r7, #4]
    e0c4:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    e0c6:	7afb      	ldrb	r3, [r7, #11]
    e0c8:	687a      	ldr	r2, [r7, #4]
    e0ca:	4619      	mov	r1, r3
    e0cc:	68f8      	ldr	r0, [r7, #12]
    e0ce:	4b03      	ldr	r3, [pc, #12]	; (e0dc <_ZN5Print5printEhi+0x24>)
    e0d0:	4798      	blx	r3
    e0d2:	4603      	mov	r3, r0
}
    e0d4:	4618      	mov	r0, r3
    e0d6:	3710      	adds	r7, #16
    e0d8:	46bd      	mov	sp, r7
    e0da:	bd80      	pop	{r7, pc}
    e0dc:	0000e0e1 	.word	0x0000e0e1

0000e0e0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
    e0e0:	b580      	push	{r7, lr}
    e0e2:	b084      	sub	sp, #16
    e0e4:	af00      	add	r7, sp, #0
    e0e6:	60f8      	str	r0, [r7, #12]
    e0e8:	60b9      	str	r1, [r7, #8]
    e0ea:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    e0ec:	687b      	ldr	r3, [r7, #4]
    e0ee:	2b00      	cmp	r3, #0
    e0f0:	d109      	bne.n	e106 <_ZN5Print5printEmi+0x26>
    e0f2:	68fb      	ldr	r3, [r7, #12]
    e0f4:	681b      	ldr	r3, [r3, #0]
    e0f6:	681b      	ldr	r3, [r3, #0]
    e0f8:	68ba      	ldr	r2, [r7, #8]
    e0fa:	b2d2      	uxtb	r2, r2
    e0fc:	4611      	mov	r1, r2
    e0fe:	68f8      	ldr	r0, [r7, #12]
    e100:	4798      	blx	r3
    e102:	4603      	mov	r3, r0
    e104:	e007      	b.n	e116 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    e106:	687b      	ldr	r3, [r7, #4]
    e108:	b2db      	uxtb	r3, r3
    e10a:	461a      	mov	r2, r3
    e10c:	68b9      	ldr	r1, [r7, #8]
    e10e:	68f8      	ldr	r0, [r7, #12]
    e110:	4b03      	ldr	r3, [pc, #12]	; (e120 <_ZN5Print5printEmi+0x40>)
    e112:	4798      	blx	r3
    e114:	4603      	mov	r3, r0
}
    e116:	4618      	mov	r0, r3
    e118:	3710      	adds	r7, #16
    e11a:	46bd      	mov	sp, r7
    e11c:	bd80      	pop	{r7, pc}
    e11e:	bf00      	nop
    e120:	0000e125 	.word	0x0000e125

0000e124 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    e124:	b580      	push	{r7, lr}
    e126:	b08e      	sub	sp, #56	; 0x38
    e128:	af00      	add	r7, sp, #0
    e12a:	60f8      	str	r0, [r7, #12]
    e12c:	60b9      	str	r1, [r7, #8]
    e12e:	4613      	mov	r3, r2
    e130:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    e132:	f107 0310 	add.w	r3, r7, #16
    e136:	3320      	adds	r3, #32
    e138:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    e13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e13c:	2200      	movs	r2, #0
    e13e:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    e140:	79fb      	ldrb	r3, [r7, #7]
    e142:	2b01      	cmp	r3, #1
    e144:	dc01      	bgt.n	e14a <_ZN5Print11printNumberEmh+0x26>
    e146:	230a      	movs	r3, #10
    e148:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    e14a:	79fa      	ldrb	r2, [r7, #7]
    e14c:	68bb      	ldr	r3, [r7, #8]
    e14e:	fbb3 f1f2 	udiv	r1, r3, r2
    e152:	fb02 f201 	mul.w	r2, r2, r1
    e156:	1a9b      	subs	r3, r3, r2
    e158:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    e15c:	79fb      	ldrb	r3, [r7, #7]
    e15e:	68ba      	ldr	r2, [r7, #8]
    e160:	fbb2 f3f3 	udiv	r3, r2, r3
    e164:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    e166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e168:	3b01      	subs	r3, #1
    e16a:	637b      	str	r3, [r7, #52]	; 0x34
    e16c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e170:	2b09      	cmp	r3, #9
    e172:	dc04      	bgt.n	e17e <_ZN5Print11printNumberEmh+0x5a>
    e174:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e178:	3330      	adds	r3, #48	; 0x30
    e17a:	b2db      	uxtb	r3, r3
    e17c:	e003      	b.n	e186 <_ZN5Print11printNumberEmh+0x62>
    e17e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e182:	3337      	adds	r3, #55	; 0x37
    e184:	b2db      	uxtb	r3, r3
    e186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e188:	7013      	strb	r3, [r2, #0]
  } while(n);
    e18a:	68bb      	ldr	r3, [r7, #8]
    e18c:	2b00      	cmp	r3, #0
    e18e:	d000      	beq.n	e192 <_ZN5Print11printNumberEmh+0x6e>
  do {
    e190:	e7db      	b.n	e14a <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    e192:	6b79      	ldr	r1, [r7, #52]	; 0x34
    e194:	68f8      	ldr	r0, [r7, #12]
    e196:	4b03      	ldr	r3, [pc, #12]	; (e1a4 <_ZN5Print11printNumberEmh+0x80>)
    e198:	4798      	blx	r3
    e19a:	4603      	mov	r3, r0
}
    e19c:	4618      	mov	r0, r3
    e19e:	3738      	adds	r7, #56	; 0x38
    e1a0:	46bd      	mov	sp, r7
    e1a2:	bd80      	pop	{r7, pc}
    e1a4:	0000e001 	.word	0x0000e001

0000e1a8 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e1a8:	b480      	push	{r7}
    e1aa:	b083      	sub	sp, #12
    e1ac:	af00      	add	r7, sp, #0
    e1ae:	6078      	str	r0, [r7, #4]
    e1b0:	460b      	mov	r3, r1
    e1b2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e1b4:	78fb      	ldrb	r3, [r7, #3]
    e1b6:	687a      	ldr	r2, [r7, #4]
    e1b8:	01db      	lsls	r3, r3, #7
    e1ba:	4413      	add	r3, r2
    e1bc:	681b      	ldr	r3, [r3, #0]
}
    e1be:	4618      	mov	r0, r3
    e1c0:	370c      	adds	r7, #12
    e1c2:	46bd      	mov	sp, r7
    e1c4:	bc80      	pop	{r7}
    e1c6:	4770      	bx	lr

0000e1c8 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e1c8:	b480      	push	{r7}
    e1ca:	b083      	sub	sp, #12
    e1cc:	af00      	add	r7, sp, #0
    e1ce:	6078      	str	r0, [r7, #4]
    e1d0:	460b      	mov	r3, r1
    e1d2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e1d4:	78fb      	ldrb	r3, [r7, #3]
    e1d6:	687a      	ldr	r2, [r7, #4]
    e1d8:	01db      	lsls	r3, r3, #7
    e1da:	4413      	add	r3, r2
    e1dc:	3310      	adds	r3, #16
    e1de:	681b      	ldr	r3, [r3, #0]
}
    e1e0:	4618      	mov	r0, r3
    e1e2:	370c      	adds	r7, #12
    e1e4:	46bd      	mov	sp, r7
    e1e6:	bc80      	pop	{r7}
    e1e8:	4770      	bx	lr

0000e1ea <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e1ea:	b480      	push	{r7}
    e1ec:	b083      	sub	sp, #12
    e1ee:	af00      	add	r7, sp, #0
    e1f0:	6078      	str	r0, [r7, #4]
    e1f2:	460b      	mov	r3, r1
    e1f4:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e1f6:	78fb      	ldrb	r3, [r7, #3]
    e1f8:	687a      	ldr	r2, [r7, #4]
    e1fa:	01db      	lsls	r3, r3, #7
    e1fc:	4413      	add	r3, r2
    e1fe:	3320      	adds	r3, #32
    e200:	681b      	ldr	r3, [r3, #0]
}
    e202:	4618      	mov	r0, r3
    e204:	370c      	adds	r7, #12
    e206:	46bd      	mov	sp, r7
    e208:	bc80      	pop	{r7}
    e20a:	4770      	bx	lr

0000e20c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e20c:	b580      	push	{r7, lr}
    e20e:	b086      	sub	sp, #24
    e210:	af00      	add	r7, sp, #0
    e212:	4603      	mov	r3, r0
    e214:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e216:	f107 030c 	add.w	r3, r7, #12
    e21a:	4618      	mov	r0, r3
    e21c:	4b13      	ldr	r3, [pc, #76]	; (e26c <_gpio_get_level+0x60>)
    e21e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e220:	79fb      	ldrb	r3, [r7, #7]
    e222:	4619      	mov	r1, r3
    e224:	4812      	ldr	r0, [pc, #72]	; (e270 <_gpio_get_level+0x64>)
    e226:	4b13      	ldr	r3, [pc, #76]	; (e274 <_gpio_get_level+0x68>)
    e228:	4798      	blx	r3
    e22a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e22c:	79fb      	ldrb	r3, [r7, #7]
    e22e:	4619      	mov	r1, r3
    e230:	480f      	ldr	r0, [pc, #60]	; (e270 <_gpio_get_level+0x64>)
    e232:	4b11      	ldr	r3, [pc, #68]	; (e278 <_gpio_get_level+0x6c>)
    e234:	4798      	blx	r3
    e236:	4602      	mov	r2, r0
    e238:	697b      	ldr	r3, [r7, #20]
    e23a:	43db      	mvns	r3, r3
    e23c:	4013      	ands	r3, r2
    e23e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e240:	79fb      	ldrb	r3, [r7, #7]
    e242:	4619      	mov	r1, r3
    e244:	480a      	ldr	r0, [pc, #40]	; (e270 <_gpio_get_level+0x64>)
    e246:	4b0d      	ldr	r3, [pc, #52]	; (e27c <_gpio_get_level+0x70>)
    e248:	4798      	blx	r3
    e24a:	4602      	mov	r2, r0
    e24c:	697b      	ldr	r3, [r7, #20]
    e24e:	4013      	ands	r3, r2
    e250:	693a      	ldr	r2, [r7, #16]
    e252:	4313      	orrs	r3, r2
    e254:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e256:	f107 030c 	add.w	r3, r7, #12
    e25a:	4618      	mov	r0, r3
    e25c:	4b08      	ldr	r3, [pc, #32]	; (e280 <_gpio_get_level+0x74>)
    e25e:	4798      	blx	r3

	return tmp;
    e260:	693b      	ldr	r3, [r7, #16]
}
    e262:	4618      	mov	r0, r3
    e264:	3718      	adds	r7, #24
    e266:	46bd      	mov	sp, r7
    e268:	bd80      	pop	{r7, pc}
    e26a:	bf00      	nop
    e26c:	0000b4cd 	.word	0x0000b4cd
    e270:	41008000 	.word	0x41008000
    e274:	0000e1a9 	.word	0x0000e1a9
    e278:	0000e1eb 	.word	0x0000e1eb
    e27c:	0000e1c9 	.word	0x0000e1c9
    e280:	0000b4f3 	.word	0x0000b4f3

0000e284 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e284:	b580      	push	{r7, lr}
    e286:	b082      	sub	sp, #8
    e288:	af00      	add	r7, sp, #0
    e28a:	4603      	mov	r3, r0
    e28c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e28e:	79fb      	ldrb	r3, [r7, #7]
    e290:	115b      	asrs	r3, r3, #5
    e292:	b2db      	uxtb	r3, r3
    e294:	4618      	mov	r0, r3
    e296:	4b09      	ldr	r3, [pc, #36]	; (e2bc <gpio_get_pin_level+0x38>)
    e298:	4798      	blx	r3
    e29a:	4601      	mov	r1, r0
    e29c:	79fb      	ldrb	r3, [r7, #7]
    e29e:	f003 031f 	and.w	r3, r3, #31
    e2a2:	2201      	movs	r2, #1
    e2a4:	fa02 f303 	lsl.w	r3, r2, r3
    e2a8:	400b      	ands	r3, r1
    e2aa:	2b00      	cmp	r3, #0
    e2ac:	bf14      	ite	ne
    e2ae:	2301      	movne	r3, #1
    e2b0:	2300      	moveq	r3, #0
    e2b2:	b2db      	uxtb	r3, r3
}
    e2b4:	4618      	mov	r0, r3
    e2b6:	3708      	adds	r7, #8
    e2b8:	46bd      	mov	sp, r7
    e2ba:	bd80      	pop	{r7, pc}
    e2bc:	0000e20d 	.word	0x0000e20d

0000e2c0 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e2c0:	b480      	push	{r7}
    e2c2:	b083      	sub	sp, #12
    e2c4:	af00      	add	r7, sp, #0
    e2c6:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e2c8:	4b06      	ldr	r3, [pc, #24]	; (e2e4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e2ca:	681b      	ldr	r3, [r3, #0]
    e2cc:	2201      	movs	r2, #1
    e2ce:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e2d0:	4b04      	ldr	r3, [pc, #16]	; (e2e4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e2d2:	681b      	ldr	r3, [r3, #0]
    e2d4:	2200      	movs	r2, #0
    e2d6:	705a      	strb	r2, [r3, #1]
}
    e2d8:	bf00      	nop
    e2da:	370c      	adds	r7, #12
    e2dc:	46bd      	mov	sp, r7
    e2de:	bc80      	pop	{r7}
    e2e0:	4770      	bx	lr
    e2e2:	bf00      	nop
    e2e4:	20000f84 	.word	0x20000f84

0000e2e8 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e2e8:	b580      	push	{r7, lr}
    e2ea:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e2ec:	2040      	movs	r0, #64	; 0x40
    e2ee:	4b0a      	ldr	r3, [pc, #40]	; (e318 <_ZL10USBPluggedv+0x30>)
    e2f0:	4798      	blx	r3
    e2f2:	4603      	mov	r3, r0
    e2f4:	2b00      	cmp	r3, #0
    e2f6:	d004      	beq.n	e302 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e2f8:	4b08      	ldr	r3, [pc, #32]	; (e31c <_ZL10USBPluggedv+0x34>)
    e2fa:	681b      	ldr	r3, [r3, #0]
    e2fc:	2201      	movs	r2, #1
    e2fe:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e300:	e007      	b.n	e312 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e302:	4b06      	ldr	r3, [pc, #24]	; (e31c <_ZL10USBPluggedv+0x34>)
    e304:	681b      	ldr	r3, [r3, #0]
    e306:	2200      	movs	r2, #0
    e308:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e30a:	4b04      	ldr	r3, [pc, #16]	; (e31c <_ZL10USBPluggedv+0x34>)
    e30c:	681b      	ldr	r3, [r3, #0]
    e30e:	2200      	movs	r2, #0
    e310:	701a      	strb	r2, [r3, #0]
}
    e312:	bf00      	nop
    e314:	bd80      	pop	{r7, pc}
    e316:	bf00      	nop
    e318:	0000e285 	.word	0x0000e285
    e31c:	20000f84 	.word	0x20000f84

0000e320 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e320:	b480      	push	{r7}
    e322:	b083      	sub	sp, #12
    e324:	af00      	add	r7, sp, #0
    e326:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e328:	4a04      	ldr	r2, [pc, #16]	; (e33c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e32a:	687b      	ldr	r3, [r7, #4]
    e32c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e32e:	687b      	ldr	r3, [r7, #4]
    e330:	4618      	mov	r0, r3
    e332:	370c      	adds	r7, #12
    e334:	46bd      	mov	sp, r7
    e336:	bc80      	pop	{r7}
    e338:	4770      	bx	lr
    e33a:	bf00      	nop
    e33c:	20000f84 	.word	0x20000f84

0000e340 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e340:	b480      	push	{r7}
    e342:	b083      	sub	sp, #12
    e344:	af00      	add	r7, sp, #0
    e346:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e348:	687b      	ldr	r3, [r7, #4]
    e34a:	4618      	mov	r0, r3
    e34c:	370c      	adds	r7, #12
    e34e:	46bd      	mov	sp, r7
    e350:	bc80      	pop	{r7}
    e352:	4770      	bx	lr

0000e354 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e354:	b580      	push	{r7, lr}
    e356:	b082      	sub	sp, #8
    e358:	af00      	add	r7, sp, #0
    e35a:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e35c:	491f      	ldr	r1, [pc, #124]	; (e3dc <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e35e:	2040      	movs	r0, #64	; 0x40
    e360:	4b1f      	ldr	r3, [pc, #124]	; (e3e0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e362:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e364:	481f      	ldr	r0, [pc, #124]	; (e3e4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e366:	4b20      	ldr	r3, [pc, #128]	; (e3e8 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e368:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e36a:	2040      	movs	r0, #64	; 0x40
    e36c:	4b1f      	ldr	r3, [pc, #124]	; (e3ec <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e36e:	4798      	blx	r3
    e370:	4603      	mov	r3, r0
    e372:	461a      	mov	r2, r3
    e374:	687b      	ldr	r3, [r7, #4]
    e376:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e378:	687b      	ldr	r3, [r7, #4]
    e37a:	78db      	ldrb	r3, [r3, #3]
    e37c:	2b00      	cmp	r3, #0
    e37e:	d024      	beq.n	e3ca <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    e380:	687b      	ldr	r3, [r7, #4]
    e382:	2200      	movs	r2, #0
    e384:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e386:	687b      	ldr	r3, [r7, #4]
    e388:	2201      	movs	r2, #1
    e38a:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e38c:	f44f 7216 	mov.w	r2, #600	; 0x258
    e390:	4917      	ldr	r1, [pc, #92]	; (e3f0 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e392:	4814      	ldr	r0, [pc, #80]	; (e3e4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e394:	4b17      	ldr	r3, [pc, #92]	; (e3f4 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e396:	4798      	blx	r3
			usbTerminalTimer.Start();
    e398:	4812      	ldr	r0, [pc, #72]	; (e3e4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e39a:	4b17      	ldr	r3, [pc, #92]	; (e3f8 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e39c:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e39e:	4817      	ldr	r0, [pc, #92]	; (e3fc <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e3a0:	4b17      	ldr	r3, [pc, #92]	; (e400 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    e3a2:	4798      	blx	r3
    e3a4:	4603      	mov	r3, r0
    e3a6:	f083 0301 	eor.w	r3, r3, #1
    e3aa:	b2db      	uxtb	r3, r3
    e3ac:	2b00      	cmp	r3, #0
    e3ae:	d008      	beq.n	e3c2 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    e3b0:	687b      	ldr	r3, [r7, #4]
    e3b2:	789b      	ldrb	r3, [r3, #2]
    e3b4:	b2db      	uxtb	r3, r3
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	d0f1      	beq.n	e39e <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    e3ba:	687b      	ldr	r3, [r7, #4]
    e3bc:	2200      	movs	r2, #0
    e3be:	701a      	strb	r2, [r3, #0]
					return;
    e3c0:	e009      	b.n	e3d6 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e3c2:	4808      	ldr	r0, [pc, #32]	; (e3e4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e3c4:	4b0f      	ldr	r3, [pc, #60]	; (e404 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    e3c6:	4798      	blx	r3
    e3c8:	e005      	b.n	e3d6 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    e3ca:	687b      	ldr	r3, [r7, #4]
    e3cc:	2200      	movs	r2, #0
    e3ce:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e3d0:	687b      	ldr	r3, [r7, #4]
    e3d2:	2200      	movs	r2, #0
    e3d4:	705a      	strb	r2, [r3, #1]
		}
		
}
    e3d6:	3708      	adds	r7, #8
    e3d8:	46bd      	mov	sp, r7
    e3da:	bd80      	pop	{r7, pc}
    e3dc:	0000e2e9 	.word	0x0000e2e9
    e3e0:	00001d91 	.word	0x00001d91
    e3e4:	20000fdc 	.word	0x20000fdc
    e3e8:	0000e485 	.word	0x0000e485
    e3ec:	0000e285 	.word	0x0000e285
    e3f0:	0000e2c1 	.word	0x0000e2c1
    e3f4:	0000e571 	.word	0x0000e571
    e3f8:	0000e4bd 	.word	0x0000e4bd
    e3fc:	20000f24 	.word	0x20000f24
    e400:	0000dc79 	.word	0x0000dc79
    e404:	0000e4e1 	.word	0x0000e4e1

0000e408 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    e408:	b580      	push	{r7, lr}
    e40a:	b082      	sub	sp, #8
    e40c:	af00      	add	r7, sp, #0
    e40e:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    e410:	4b04      	ldr	r3, [pc, #16]	; (e424 <_ZL7task_cbPK10timer_task+0x1c>)
    e412:	681b      	ldr	r3, [r3, #0]
    e414:	4618      	mov	r0, r3
    e416:	4b04      	ldr	r3, [pc, #16]	; (e428 <_ZL7task_cbPK10timer_task+0x20>)
    e418:	4798      	blx	r3
}
    e41a:	bf00      	nop
    e41c:	3708      	adds	r7, #8
    e41e:	46bd      	mov	sp, r7
    e420:	bd80      	pop	{r7, pc}
    e422:	bf00      	nop
    e424:	20000f88 	.word	0x20000f88
    e428:	0000e509 	.word	0x0000e509

0000e42c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    e42c:	b480      	push	{r7}
    e42e:	b083      	sub	sp, #12
    e430:	af00      	add	r7, sp, #0
    e432:	6078      	str	r0, [r7, #4]
    e434:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e436:	687b      	ldr	r3, [r7, #4]
    e438:	683a      	ldr	r2, [r7, #0]
    e43a:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    e43c:	4a08      	ldr	r2, [pc, #32]	; (e460 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    e43e:	687b      	ldr	r3, [r7, #4]
    e440:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e442:	687b      	ldr	r3, [r7, #4]
    e444:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e448:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    e44a:	687b      	ldr	r3, [r7, #4]
    e44c:	689b      	ldr	r3, [r3, #8]
    e44e:	4a05      	ldr	r2, [pc, #20]	; (e464 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    e450:	60da      	str	r2, [r3, #12]
} //Timer_Class
    e452:	687b      	ldr	r3, [r7, #4]
    e454:	4618      	mov	r0, r3
    e456:	370c      	adds	r7, #12
    e458:	46bd      	mov	sp, r7
    e45a:	bc80      	pop	{r7}
    e45c:	4770      	bx	lr
    e45e:	bf00      	nop
    e460:	20000f88 	.word	0x20000f88
    e464:	0000e409 	.word	0x0000e409

0000e468 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    e468:	b480      	push	{r7}
    e46a:	b083      	sub	sp, #12
    e46c:	af00      	add	r7, sp, #0
    e46e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e470:	687b      	ldr	r3, [r7, #4]
    e472:	2200      	movs	r2, #0
    e474:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e476:	687b      	ldr	r3, [r7, #4]
    e478:	4618      	mov	r0, r3
    e47a:	370c      	adds	r7, #12
    e47c:	46bd      	mov	sp, r7
    e47e:	bc80      	pop	{r7}
    e480:	4770      	bx	lr
	...

0000e484 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    e484:	b580      	push	{r7, lr}
    e486:	b082      	sub	sp, #8
    e488:	af00      	add	r7, sp, #0
    e48a:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    e48c:	687b      	ldr	r3, [r7, #4]
    e48e:	2200      	movs	r2, #0
    e490:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    e492:	6878      	ldr	r0, [r7, #4]
    e494:	4b08      	ldr	r3, [pc, #32]	; (e4b8 <_ZN17TimerSerial_Class4InitEv+0x34>)
    e496:	4798      	blx	r3
    e498:	4603      	mov	r3, r0
    e49a:	2b00      	cmp	r3, #0
    e49c:	bf0c      	ite	eq
    e49e:	2301      	moveq	r3, #1
    e4a0:	2300      	movne	r3, #0
    e4a2:	b2da      	uxtb	r2, r3
    e4a4:	687b      	ldr	r3, [r7, #4]
    e4a6:	709a      	strb	r2, [r3, #2]
	return isOK;
    e4a8:	687b      	ldr	r3, [r7, #4]
    e4aa:	789b      	ldrb	r3, [r3, #2]
    e4ac:	b2db      	uxtb	r3, r3
}
    e4ae:	4618      	mov	r0, r3
    e4b0:	3708      	adds	r7, #8
    e4b2:	46bd      	mov	sp, r7
    e4b4:	bd80      	pop	{r7, pc}
    e4b6:	bf00      	nop
    e4b8:	0000e4bd 	.word	0x0000e4bd

0000e4bc <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    e4bc:	b580      	push	{r7, lr}
    e4be:	b084      	sub	sp, #16
    e4c0:	af00      	add	r7, sp, #0
    e4c2:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e4c4:	687b      	ldr	r3, [r7, #4]
    e4c6:	691b      	ldr	r3, [r3, #16]
    e4c8:	4618      	mov	r0, r3
    e4ca:	4b04      	ldr	r3, [pc, #16]	; (e4dc <_ZN17TimerSerial_Class5StartEv+0x20>)
    e4cc:	4798      	blx	r3
    e4ce:	60f8      	str	r0, [r7, #12]
	return status;
    e4d0:	68fb      	ldr	r3, [r7, #12]
	
}
    e4d2:	4618      	mov	r0, r3
    e4d4:	3710      	adds	r7, #16
    e4d6:	46bd      	mov	sp, r7
    e4d8:	bd80      	pop	{r7, pc}
    e4da:	bf00      	nop
    e4dc:	00002705 	.word	0x00002705

0000e4e0 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    e4e0:	b580      	push	{r7, lr}
    e4e2:	b084      	sub	sp, #16
    e4e4:	af00      	add	r7, sp, #0
    e4e6:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e4e8:	687b      	ldr	r3, [r7, #4]
    e4ea:	691b      	ldr	r3, [r3, #16]
    e4ec:	4618      	mov	r0, r3
    e4ee:	4b05      	ldr	r3, [pc, #20]	; (e504 <_ZN17TimerSerial_Class4StopEv+0x24>)
    e4f0:	4798      	blx	r3
    e4f2:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e4f4:	687b      	ldr	r3, [r7, #4]
    e4f6:	2200      	movs	r2, #0
    e4f8:	705a      	strb	r2, [r3, #1]
	return status;
    e4fa:	68fb      	ldr	r3, [r7, #12]
}
    e4fc:	4618      	mov	r0, r3
    e4fe:	3710      	adds	r7, #16
    e500:	46bd      	mov	sp, r7
    e502:	bd80      	pop	{r7, pc}
    e504:	0000276d 	.word	0x0000276d

0000e508 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    e508:	b480      	push	{r7}
    e50a:	b083      	sub	sp, #12
    e50c:	af00      	add	r7, sp, #0
    e50e:	6078      	str	r0, [r7, #4]
	timeout=1;
    e510:	687b      	ldr	r3, [r7, #4]
    e512:	2201      	movs	r2, #1
    e514:	705a      	strb	r2, [r3, #1]
}
    e516:	bf00      	nop
    e518:	370c      	adds	r7, #12
    e51a:	46bd      	mov	sp, r7
    e51c:	bc80      	pop	{r7}
    e51e:	4770      	bx	lr

0000e520 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e520:	b580      	push	{r7, lr}
    e522:	b086      	sub	sp, #24
    e524:	af00      	add	r7, sp, #0
    e526:	60f8      	str	r0, [r7, #12]
    e528:	60b9      	str	r1, [r7, #8]
    e52a:	607a      	str	r2, [r7, #4]
    e52c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e52e:	68f8      	ldr	r0, [r7, #12]
    e530:	4b0d      	ldr	r3, [pc, #52]	; (e568 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e532:	4798      	blx	r3
	task->interval = interval;
    e534:	68fb      	ldr	r3, [r7, #12]
    e536:	689b      	ldr	r3, [r3, #8]
    e538:	687a      	ldr	r2, [r7, #4]
    e53a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e53c:	68fb      	ldr	r3, [r7, #12]
    e53e:	689b      	ldr	r3, [r3, #8]
    e540:	68ba      	ldr	r2, [r7, #8]
    e542:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e544:	68fb      	ldr	r3, [r7, #12]
    e546:	689b      	ldr	r3, [r3, #8]
    e548:	78fa      	ldrb	r2, [r7, #3]
    e54a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e54c:	68fb      	ldr	r3, [r7, #12]
    e54e:	691a      	ldr	r2, [r3, #16]
    e550:	68fb      	ldr	r3, [r7, #12]
    e552:	689b      	ldr	r3, [r3, #8]
    e554:	4619      	mov	r1, r3
    e556:	4610      	mov	r0, r2
    e558:	4b04      	ldr	r3, [pc, #16]	; (e56c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e55a:	4798      	blx	r3
    e55c:	6178      	str	r0, [r7, #20]
	
	return status;
    e55e:	697b      	ldr	r3, [r7, #20]
}
    e560:	4618      	mov	r0, r3
    e562:	3718      	adds	r7, #24
    e564:	46bd      	mov	sp, r7
    e566:	bd80      	pop	{r7, pc}
    e568:	0000e629 	.word	0x0000e629
    e56c:	000027d9 	.word	0x000027d9

0000e570 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    e570:	b590      	push	{r4, r7, lr}
    e572:	b087      	sub	sp, #28
    e574:	af00      	add	r7, sp, #0
    e576:	60f8      	str	r0, [r7, #12]
    e578:	60b9      	str	r1, [r7, #8]
    e57a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e57c:	2300      	movs	r3, #0
    e57e:	687a      	ldr	r2, [r7, #4]
    e580:	68b9      	ldr	r1, [r7, #8]
    e582:	68f8      	ldr	r0, [r7, #12]
    e584:	4c03      	ldr	r4, [pc, #12]	; (e594 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    e586:	47a0      	blx	r4
    e588:	6178      	str	r0, [r7, #20]
	return status;
    e58a:	697b      	ldr	r3, [r7, #20]
}
    e58c:	4618      	mov	r0, r3
    e58e:	371c      	adds	r7, #28
    e590:	46bd      	mov	sp, r7
    e592:	bd90      	pop	{r4, r7, pc}
    e594:	0000e521 	.word	0x0000e521

0000e598 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e598:	b590      	push	{r4, r7, lr}
    e59a:	b087      	sub	sp, #28
    e59c:	af00      	add	r7, sp, #0
    e59e:	60f8      	str	r0, [r7, #12]
    e5a0:	60b9      	str	r1, [r7, #8]
    e5a2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e5a4:	2300      	movs	r3, #0
    e5a6:	687a      	ldr	r2, [r7, #4]
    e5a8:	68b9      	ldr	r1, [r7, #8]
    e5aa:	68f8      	ldr	r0, [r7, #12]
    e5ac:	4c06      	ldr	r4, [pc, #24]	; (e5c8 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    e5ae:	47a0      	blx	r4
    e5b0:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    e5b2:	68fb      	ldr	r3, [r7, #12]
    e5b4:	691b      	ldr	r3, [r3, #16]
    e5b6:	4618      	mov	r0, r3
    e5b8:	4b04      	ldr	r3, [pc, #16]	; (e5cc <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    e5ba:	4798      	blx	r3
    e5bc:	6178      	str	r0, [r7, #20]
	return status;
    e5be:	697b      	ldr	r3, [r7, #20]
}
    e5c0:	4618      	mov	r0, r3
    e5c2:	371c      	adds	r7, #28
    e5c4:	46bd      	mov	sp, r7
    e5c6:	bd90      	pop	{r4, r7, pc}
    e5c8:	0000e521 	.word	0x0000e521
    e5cc:	00002705 	.word	0x00002705

0000e5d0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    e5d0:	b580      	push	{r7, lr}
    e5d2:	b082      	sub	sp, #8
    e5d4:	af00      	add	r7, sp, #0
    e5d6:	6078      	str	r0, [r7, #4]
    e5d8:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e5da:	6839      	ldr	r1, [r7, #0]
    e5dc:	6878      	ldr	r0, [r7, #4]
    e5de:	4b0f      	ldr	r3, [pc, #60]	; (e61c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    e5e0:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e5e2:	687b      	ldr	r3, [r7, #4]
    e5e4:	691b      	ldr	r3, [r3, #16]
    e5e6:	f103 0218 	add.w	r2, r3, #24
    e5ea:	687b      	ldr	r3, [r7, #4]
    e5ec:	689b      	ldr	r3, [r3, #8]
    e5ee:	4619      	mov	r1, r3
    e5f0:	4610      	mov	r0, r2
    e5f2:	4b0b      	ldr	r3, [pc, #44]	; (e620 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    e5f4:	4798      	blx	r3
    e5f6:	4603      	mov	r3, r0
    e5f8:	2b00      	cmp	r3, #0
    e5fa:	d007      	beq.n	e60c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e5fc:	687b      	ldr	r3, [r7, #4]
    e5fe:	691a      	ldr	r2, [r3, #16]
    e600:	687b      	ldr	r3, [r7, #4]
    e602:	689b      	ldr	r3, [r3, #8]
    e604:	4619      	mov	r1, r3
    e606:	4610      	mov	r0, r2
    e608:	4b06      	ldr	r3, [pc, #24]	; (e624 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    e60a:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e60c:	687b      	ldr	r3, [r7, #4]
    e60e:	689b      	ldr	r3, [r3, #8]
    e610:	2200      	movs	r2, #0
    e612:	60da      	str	r2, [r3, #12]
}
    e614:	bf00      	nop
    e616:	3708      	adds	r7, #8
    e618:	46bd      	mov	sp, r7
    e61a:	bd80      	pop	{r7, pc}
    e61c:	0000e681 	.word	0x0000e681
    e620:	000034c5 	.word	0x000034c5
    e624:	000028dd 	.word	0x000028dd

0000e628 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    e628:	b480      	push	{r7}
    e62a:	b085      	sub	sp, #20
    e62c:	af00      	add	r7, sp, #0
    e62e:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e630:	2300      	movs	r3, #0
    e632:	73fb      	strb	r3, [r7, #15]
    e634:	7bfb      	ldrb	r3, [r7, #15]
    e636:	2b03      	cmp	r3, #3
    e638:	dc18      	bgt.n	e66c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    e63a:	7bfa      	ldrb	r2, [r7, #15]
    e63c:	490f      	ldr	r1, [pc, #60]	; (e67c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e63e:	4613      	mov	r3, r2
    e640:	009b      	lsls	r3, r3, #2
    e642:	4413      	add	r3, r2
    e644:	009b      	lsls	r3, r3, #2
    e646:	440b      	add	r3, r1
    e648:	330c      	adds	r3, #12
    e64a:	681b      	ldr	r3, [r3, #0]
    e64c:	2b00      	cmp	r3, #0
    e64e:	d109      	bne.n	e664 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    e650:	7bfa      	ldrb	r2, [r7, #15]
    e652:	4613      	mov	r3, r2
    e654:	009b      	lsls	r3, r3, #2
    e656:	4413      	add	r3, r2
    e658:	009b      	lsls	r3, r3, #2
    e65a:	4a08      	ldr	r2, [pc, #32]	; (e67c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e65c:	441a      	add	r2, r3
    e65e:	687b      	ldr	r3, [r7, #4]
    e660:	609a      	str	r2, [r3, #8]
			return;
    e662:	e006      	b.n	e672 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e664:	7bfb      	ldrb	r3, [r7, #15]
    e666:	3301      	adds	r3, #1
    e668:	73fb      	strb	r3, [r7, #15]
    e66a:	e7e3      	b.n	e634 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    e66c:	687b      	ldr	r3, [r7, #4]
    e66e:	4a03      	ldr	r2, [pc, #12]	; (e67c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e670:	609a      	str	r2, [r3, #8]

}
    e672:	3714      	adds	r7, #20
    e674:	46bd      	mov	sp, r7
    e676:	bc80      	pop	{r7}
    e678:	4770      	bx	lr
    e67a:	bf00      	nop
    e67c:	20000f8c 	.word	0x20000f8c

0000e680 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    e680:	b480      	push	{r7}
    e682:	b085      	sub	sp, #20
    e684:	af00      	add	r7, sp, #0
    e686:	6078      	str	r0, [r7, #4]
    e688:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e68a:	2300      	movs	r3, #0
    e68c:	73fb      	strb	r3, [r7, #15]
    e68e:	7bfb      	ldrb	r3, [r7, #15]
    e690:	2b03      	cmp	r3, #3
    e692:	dc19      	bgt.n	e6c8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e694:	7bfa      	ldrb	r2, [r7, #15]
    e696:	490e      	ldr	r1, [pc, #56]	; (e6d0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e698:	4613      	mov	r3, r2
    e69a:	009b      	lsls	r3, r3, #2
    e69c:	4413      	add	r3, r2
    e69e:	009b      	lsls	r3, r3, #2
    e6a0:	440b      	add	r3, r1
    e6a2:	330c      	adds	r3, #12
    e6a4:	681a      	ldr	r2, [r3, #0]
    e6a6:	683b      	ldr	r3, [r7, #0]
    e6a8:	429a      	cmp	r2, r3
    e6aa:	d109      	bne.n	e6c0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e6ac:	7bfa      	ldrb	r2, [r7, #15]
    e6ae:	4613      	mov	r3, r2
    e6b0:	009b      	lsls	r3, r3, #2
    e6b2:	4413      	add	r3, r2
    e6b4:	009b      	lsls	r3, r3, #2
    e6b6:	4a06      	ldr	r2, [pc, #24]	; (e6d0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e6b8:	441a      	add	r2, r3
    e6ba:	687b      	ldr	r3, [r7, #4]
    e6bc:	609a      	str	r2, [r3, #8]
			return;
    e6be:	e003      	b.n	e6c8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e6c0:	7bfb      	ldrb	r3, [r7, #15]
    e6c2:	3301      	adds	r3, #1
    e6c4:	73fb      	strb	r3, [r7, #15]
    e6c6:	e7e2      	b.n	e68e <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    e6c8:	3714      	adds	r7, #20
    e6ca:	46bd      	mov	sp, r7
    e6cc:	bc80      	pop	{r7}
    e6ce:	4770      	bx	lr
    e6d0:	20000f8c 	.word	0x20000f8c

0000e6d4 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e6d4:	b580      	push	{r7, lr}
    e6d6:	b082      	sub	sp, #8
    e6d8:	af00      	add	r7, sp, #0
    e6da:	6078      	str	r0, [r7, #4]
    e6dc:	6039      	str	r1, [r7, #0]
    e6de:	687b      	ldr	r3, [r7, #4]
    e6e0:	2b01      	cmp	r3, #1
    e6e2:	d116      	bne.n	e712 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    e6e4:	683b      	ldr	r3, [r7, #0]
    e6e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e6ea:	4293      	cmp	r3, r2
    e6ec:	d111      	bne.n	e712 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    e6ee:	490b      	ldr	r1, [pc, #44]	; (e71c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e6f0:	480b      	ldr	r0, [pc, #44]	; (e720 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e6f2:	4b0c      	ldr	r3, [pc, #48]	; (e724 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e6f4:	4798      	blx	r3
    e6f6:	4a0c      	ldr	r2, [pc, #48]	; (e728 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e6f8:	490c      	ldr	r1, [pc, #48]	; (e72c <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e6fa:	4809      	ldr	r0, [pc, #36]	; (e720 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e6fc:	4b0c      	ldr	r3, [pc, #48]	; (e730 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e6fe:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e700:	490c      	ldr	r1, [pc, #48]	; (e734 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e702:	480d      	ldr	r0, [pc, #52]	; (e738 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e704:	4b07      	ldr	r3, [pc, #28]	; (e724 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e706:	4798      	blx	r3
    e708:	4a07      	ldr	r2, [pc, #28]	; (e728 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e70a:	4908      	ldr	r1, [pc, #32]	; (e72c <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e70c:	480a      	ldr	r0, [pc, #40]	; (e738 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e70e:	4b08      	ldr	r3, [pc, #32]	; (e730 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e710:	4798      	blx	r3
    e712:	bf00      	nop
    e714:	3708      	adds	r7, #8
    e716:	46bd      	mov	sp, r7
    e718:	bd80      	pop	{r7, pc}
    e71a:	bf00      	nop
    e71c:	20001134 	.word	0x20001134
    e720:	20000fdc 	.word	0x20000fdc
    e724:	0000e42d 	.word	0x0000e42d
    e728:	20000000 	.word	0x20000000
    e72c:	0000e469 	.word	0x0000e469
    e730:	0000e811 	.word	0x0000e811
    e734:	2000106c 	.word	0x2000106c
    e738:	20000ffc 	.word	0x20000ffc

0000e73c <_GLOBAL__sub_I_ptrTimerSerialClass>:
    e73c:	b580      	push	{r7, lr}
    e73e:	af00      	add	r7, sp, #0
    e740:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e744:	2001      	movs	r0, #1
    e746:	4b01      	ldr	r3, [pc, #4]	; (e74c <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    e748:	4798      	blx	r3
    e74a:	bd80      	pop	{r7, pc}
    e74c:	0000e6d5 	.word	0x0000e6d5

0000e750 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e750:	b480      	push	{r7}
    e752:	b083      	sub	sp, #12
    e754:	af00      	add	r7, sp, #0
    e756:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e758:	2300      	movs	r3, #0
	}
    e75a:	4618      	mov	r0, r3
    e75c:	370c      	adds	r7, #12
    e75e:	46bd      	mov	sp, r7
    e760:	bc80      	pop	{r7}
    e762:	4770      	bx	lr

0000e764 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e764:	b480      	push	{r7}
    e766:	af00      	add	r7, sp, #0
		}
    e768:	bf00      	nop
    e76a:	46bd      	mov	sp, r7
    e76c:	bc80      	pop	{r7}
    e76e:	4770      	bx	lr

0000e770 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    e770:	b580      	push	{r7, lr}
    e772:	b084      	sub	sp, #16
    e774:	af00      	add	r7, sp, #0
    e776:	60f8      	str	r0, [r7, #12]
    e778:	60b9      	str	r1, [r7, #8]
    e77a:	4613      	mov	r3, r2
    e77c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e77e:	68fb      	ldr	r3, [r7, #12]
    e780:	2b00      	cmp	r3, #0
    e782:	d004      	beq.n	e78e <io_write+0x1e>
    e784:	68bb      	ldr	r3, [r7, #8]
    e786:	2b00      	cmp	r3, #0
    e788:	d001      	beq.n	e78e <io_write+0x1e>
    e78a:	2301      	movs	r3, #1
    e78c:	e000      	b.n	e790 <io_write+0x20>
    e78e:	2300      	movs	r3, #0
    e790:	f003 0301 	and.w	r3, r3, #1
    e794:	b2db      	uxtb	r3, r3
    e796:	2234      	movs	r2, #52	; 0x34
    e798:	4907      	ldr	r1, [pc, #28]	; (e7b8 <io_write+0x48>)
    e79a:	4618      	mov	r0, r3
    e79c:	4b07      	ldr	r3, [pc, #28]	; (e7bc <io_write+0x4c>)
    e79e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    e7a0:	68fb      	ldr	r3, [r7, #12]
    e7a2:	681b      	ldr	r3, [r3, #0]
    e7a4:	88fa      	ldrh	r2, [r7, #6]
    e7a6:	68b9      	ldr	r1, [r7, #8]
    e7a8:	68f8      	ldr	r0, [r7, #12]
    e7aa:	4798      	blx	r3
    e7ac:	4603      	mov	r3, r0
}
    e7ae:	4618      	mov	r0, r3
    e7b0:	3710      	adds	r7, #16
    e7b2:	46bd      	mov	sp, r7
    e7b4:	bd80      	pop	{r7, pc}
    e7b6:	bf00      	nop
    e7b8:	0000f180 	.word	0x0000f180
    e7bc:	0000349d 	.word	0x0000349d

0000e7c0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    e7c0:	b580      	push	{r7, lr}
    e7c2:	b084      	sub	sp, #16
    e7c4:	af00      	add	r7, sp, #0
    e7c6:	60f8      	str	r0, [r7, #12]
    e7c8:	60b9      	str	r1, [r7, #8]
    e7ca:	4613      	mov	r3, r2
    e7cc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e7ce:	68fb      	ldr	r3, [r7, #12]
    e7d0:	2b00      	cmp	r3, #0
    e7d2:	d004      	beq.n	e7de <io_read+0x1e>
    e7d4:	68bb      	ldr	r3, [r7, #8]
    e7d6:	2b00      	cmp	r3, #0
    e7d8:	d001      	beq.n	e7de <io_read+0x1e>
    e7da:	2301      	movs	r3, #1
    e7dc:	e000      	b.n	e7e0 <io_read+0x20>
    e7de:	2300      	movs	r3, #0
    e7e0:	f003 0301 	and.w	r3, r3, #1
    e7e4:	b2db      	uxtb	r3, r3
    e7e6:	223d      	movs	r2, #61	; 0x3d
    e7e8:	4907      	ldr	r1, [pc, #28]	; (e808 <io_read+0x48>)
    e7ea:	4618      	mov	r0, r3
    e7ec:	4b07      	ldr	r3, [pc, #28]	; (e80c <io_read+0x4c>)
    e7ee:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    e7f0:	68fb      	ldr	r3, [r7, #12]
    e7f2:	685b      	ldr	r3, [r3, #4]
    e7f4:	88fa      	ldrh	r2, [r7, #6]
    e7f6:	68b9      	ldr	r1, [r7, #8]
    e7f8:	68f8      	ldr	r0, [r7, #12]
    e7fa:	4798      	blx	r3
    e7fc:	4603      	mov	r3, r0
}
    e7fe:	4618      	mov	r0, r3
    e800:	3710      	adds	r7, #16
    e802:	46bd      	mov	sp, r7
    e804:	bd80      	pop	{r7, pc}
    e806:	bf00      	nop
    e808:	0000f180 	.word	0x0000f180
    e80c:	0000349d 	.word	0x0000349d

0000e810 <__aeabi_atexit>:
    e810:	460b      	mov	r3, r1
    e812:	4601      	mov	r1, r0
    e814:	4618      	mov	r0, r3
    e816:	f000 b801 	b.w	e81c <__cxa_atexit>
    e81a:	bf00      	nop

0000e81c <__cxa_atexit>:
    e81c:	4613      	mov	r3, r2
    e81e:	460a      	mov	r2, r1
    e820:	4601      	mov	r1, r0
    e822:	2002      	movs	r0, #2
    e824:	f000 b99a 	b.w	eb5c <__register_exitproc>

0000e828 <ffs>:
    e828:	b140      	cbz	r0, e83c <ffs+0x14>
    e82a:	2300      	movs	r3, #0
    e82c:	fa40 f103 	asr.w	r1, r0, r3
    e830:	1c5a      	adds	r2, r3, #1
    e832:	07c9      	lsls	r1, r1, #31
    e834:	4613      	mov	r3, r2
    e836:	d5f9      	bpl.n	e82c <ffs+0x4>
    e838:	4610      	mov	r0, r2
    e83a:	4770      	bx	lr
    e83c:	4602      	mov	r2, r0
    e83e:	4610      	mov	r0, r2
    e840:	4770      	bx	lr
    e842:	bf00      	nop

0000e844 <__libc_init_array>:
    e844:	b570      	push	{r4, r5, r6, lr}
    e846:	4e0f      	ldr	r6, [pc, #60]	; (e884 <__libc_init_array+0x40>)
    e848:	4d0f      	ldr	r5, [pc, #60]	; (e888 <__libc_init_array+0x44>)
    e84a:	1b76      	subs	r6, r6, r5
    e84c:	10b6      	asrs	r6, r6, #2
    e84e:	bf18      	it	ne
    e850:	2400      	movne	r4, #0
    e852:	d005      	beq.n	e860 <__libc_init_array+0x1c>
    e854:	3401      	adds	r4, #1
    e856:	f855 3b04 	ldr.w	r3, [r5], #4
    e85a:	4798      	blx	r3
    e85c:	42a6      	cmp	r6, r4
    e85e:	d1f9      	bne.n	e854 <__libc_init_array+0x10>
    e860:	4e0a      	ldr	r6, [pc, #40]	; (e88c <__libc_init_array+0x48>)
    e862:	4d0b      	ldr	r5, [pc, #44]	; (e890 <__libc_init_array+0x4c>)
    e864:	1b76      	subs	r6, r6, r5
    e866:	f000 fc97 	bl	f198 <_init>
    e86a:	10b6      	asrs	r6, r6, #2
    e86c:	bf18      	it	ne
    e86e:	2400      	movne	r4, #0
    e870:	d006      	beq.n	e880 <__libc_init_array+0x3c>
    e872:	3401      	adds	r4, #1
    e874:	f855 3b04 	ldr.w	r3, [r5], #4
    e878:	4798      	blx	r3
    e87a:	42a6      	cmp	r6, r4
    e87c:	d1f9      	bne.n	e872 <__libc_init_array+0x2e>
    e87e:	bd70      	pop	{r4, r5, r6, pc}
    e880:	bd70      	pop	{r4, r5, r6, pc}
    e882:	bf00      	nop
    e884:	0000f1a4 	.word	0x0000f1a4
    e888:	0000f1a4 	.word	0x0000f1a4
    e88c:	0000f1c0 	.word	0x0000f1c0
    e890:	0000f1a4 	.word	0x0000f1a4

0000e894 <memcpy>:
    e894:	4684      	mov	ip, r0
    e896:	ea41 0300 	orr.w	r3, r1, r0
    e89a:	f013 0303 	ands.w	r3, r3, #3
    e89e:	d16d      	bne.n	e97c <memcpy+0xe8>
    e8a0:	3a40      	subs	r2, #64	; 0x40
    e8a2:	d341      	bcc.n	e928 <memcpy+0x94>
    e8a4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8a8:	f840 3b04 	str.w	r3, [r0], #4
    e8ac:	f851 3b04 	ldr.w	r3, [r1], #4
    e8b0:	f840 3b04 	str.w	r3, [r0], #4
    e8b4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8b8:	f840 3b04 	str.w	r3, [r0], #4
    e8bc:	f851 3b04 	ldr.w	r3, [r1], #4
    e8c0:	f840 3b04 	str.w	r3, [r0], #4
    e8c4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8c8:	f840 3b04 	str.w	r3, [r0], #4
    e8cc:	f851 3b04 	ldr.w	r3, [r1], #4
    e8d0:	f840 3b04 	str.w	r3, [r0], #4
    e8d4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8d8:	f840 3b04 	str.w	r3, [r0], #4
    e8dc:	f851 3b04 	ldr.w	r3, [r1], #4
    e8e0:	f840 3b04 	str.w	r3, [r0], #4
    e8e4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8e8:	f840 3b04 	str.w	r3, [r0], #4
    e8ec:	f851 3b04 	ldr.w	r3, [r1], #4
    e8f0:	f840 3b04 	str.w	r3, [r0], #4
    e8f4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8f8:	f840 3b04 	str.w	r3, [r0], #4
    e8fc:	f851 3b04 	ldr.w	r3, [r1], #4
    e900:	f840 3b04 	str.w	r3, [r0], #4
    e904:	f851 3b04 	ldr.w	r3, [r1], #4
    e908:	f840 3b04 	str.w	r3, [r0], #4
    e90c:	f851 3b04 	ldr.w	r3, [r1], #4
    e910:	f840 3b04 	str.w	r3, [r0], #4
    e914:	f851 3b04 	ldr.w	r3, [r1], #4
    e918:	f840 3b04 	str.w	r3, [r0], #4
    e91c:	f851 3b04 	ldr.w	r3, [r1], #4
    e920:	f840 3b04 	str.w	r3, [r0], #4
    e924:	3a40      	subs	r2, #64	; 0x40
    e926:	d2bd      	bcs.n	e8a4 <memcpy+0x10>
    e928:	3230      	adds	r2, #48	; 0x30
    e92a:	d311      	bcc.n	e950 <memcpy+0xbc>
    e92c:	f851 3b04 	ldr.w	r3, [r1], #4
    e930:	f840 3b04 	str.w	r3, [r0], #4
    e934:	f851 3b04 	ldr.w	r3, [r1], #4
    e938:	f840 3b04 	str.w	r3, [r0], #4
    e93c:	f851 3b04 	ldr.w	r3, [r1], #4
    e940:	f840 3b04 	str.w	r3, [r0], #4
    e944:	f851 3b04 	ldr.w	r3, [r1], #4
    e948:	f840 3b04 	str.w	r3, [r0], #4
    e94c:	3a10      	subs	r2, #16
    e94e:	d2ed      	bcs.n	e92c <memcpy+0x98>
    e950:	320c      	adds	r2, #12
    e952:	d305      	bcc.n	e960 <memcpy+0xcc>
    e954:	f851 3b04 	ldr.w	r3, [r1], #4
    e958:	f840 3b04 	str.w	r3, [r0], #4
    e95c:	3a04      	subs	r2, #4
    e95e:	d2f9      	bcs.n	e954 <memcpy+0xc0>
    e960:	3204      	adds	r2, #4
    e962:	d008      	beq.n	e976 <memcpy+0xe2>
    e964:	07d2      	lsls	r2, r2, #31
    e966:	bf1c      	itt	ne
    e968:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e96c:	f800 3b01 	strbne.w	r3, [r0], #1
    e970:	d301      	bcc.n	e976 <memcpy+0xe2>
    e972:	880b      	ldrh	r3, [r1, #0]
    e974:	8003      	strh	r3, [r0, #0]
    e976:	4660      	mov	r0, ip
    e978:	4770      	bx	lr
    e97a:	bf00      	nop
    e97c:	2a08      	cmp	r2, #8
    e97e:	d313      	bcc.n	e9a8 <memcpy+0x114>
    e980:	078b      	lsls	r3, r1, #30
    e982:	d08d      	beq.n	e8a0 <memcpy+0xc>
    e984:	f010 0303 	ands.w	r3, r0, #3
    e988:	d08a      	beq.n	e8a0 <memcpy+0xc>
    e98a:	f1c3 0304 	rsb	r3, r3, #4
    e98e:	1ad2      	subs	r2, r2, r3
    e990:	07db      	lsls	r3, r3, #31
    e992:	bf1c      	itt	ne
    e994:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e998:	f800 3b01 	strbne.w	r3, [r0], #1
    e99c:	d380      	bcc.n	e8a0 <memcpy+0xc>
    e99e:	f831 3b02 	ldrh.w	r3, [r1], #2
    e9a2:	f820 3b02 	strh.w	r3, [r0], #2
    e9a6:	e77b      	b.n	e8a0 <memcpy+0xc>
    e9a8:	3a04      	subs	r2, #4
    e9aa:	d3d9      	bcc.n	e960 <memcpy+0xcc>
    e9ac:	3a01      	subs	r2, #1
    e9ae:	f811 3b01 	ldrb.w	r3, [r1], #1
    e9b2:	f800 3b01 	strb.w	r3, [r0], #1
    e9b6:	d2f9      	bcs.n	e9ac <memcpy+0x118>
    e9b8:	780b      	ldrb	r3, [r1, #0]
    e9ba:	7003      	strb	r3, [r0, #0]
    e9bc:	784b      	ldrb	r3, [r1, #1]
    e9be:	7043      	strb	r3, [r0, #1]
    e9c0:	788b      	ldrb	r3, [r1, #2]
    e9c2:	7083      	strb	r3, [r0, #2]
    e9c4:	4660      	mov	r0, ip
    e9c6:	4770      	bx	lr

0000e9c8 <memset>:
    e9c8:	b470      	push	{r4, r5, r6}
    e9ca:	0786      	lsls	r6, r0, #30
    e9cc:	d046      	beq.n	ea5c <memset+0x94>
    e9ce:	1e54      	subs	r4, r2, #1
    e9d0:	2a00      	cmp	r2, #0
    e9d2:	d041      	beq.n	ea58 <memset+0x90>
    e9d4:	b2ca      	uxtb	r2, r1
    e9d6:	4603      	mov	r3, r0
    e9d8:	e002      	b.n	e9e0 <memset+0x18>
    e9da:	f114 34ff 	adds.w	r4, r4, #4294967295
    e9de:	d33b      	bcc.n	ea58 <memset+0x90>
    e9e0:	f803 2b01 	strb.w	r2, [r3], #1
    e9e4:	079d      	lsls	r5, r3, #30
    e9e6:	d1f8      	bne.n	e9da <memset+0x12>
    e9e8:	2c03      	cmp	r4, #3
    e9ea:	d92e      	bls.n	ea4a <memset+0x82>
    e9ec:	b2cd      	uxtb	r5, r1
    e9ee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e9f2:	2c0f      	cmp	r4, #15
    e9f4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e9f8:	d919      	bls.n	ea2e <memset+0x66>
    e9fa:	f103 0210 	add.w	r2, r3, #16
    e9fe:	4626      	mov	r6, r4
    ea00:	3e10      	subs	r6, #16
    ea02:	2e0f      	cmp	r6, #15
    ea04:	f842 5c10 	str.w	r5, [r2, #-16]
    ea08:	f842 5c0c 	str.w	r5, [r2, #-12]
    ea0c:	f842 5c08 	str.w	r5, [r2, #-8]
    ea10:	f842 5c04 	str.w	r5, [r2, #-4]
    ea14:	f102 0210 	add.w	r2, r2, #16
    ea18:	d8f2      	bhi.n	ea00 <memset+0x38>
    ea1a:	f1a4 0210 	sub.w	r2, r4, #16
    ea1e:	f022 020f 	bic.w	r2, r2, #15
    ea22:	f004 040f 	and.w	r4, r4, #15
    ea26:	3210      	adds	r2, #16
    ea28:	2c03      	cmp	r4, #3
    ea2a:	4413      	add	r3, r2
    ea2c:	d90d      	bls.n	ea4a <memset+0x82>
    ea2e:	461e      	mov	r6, r3
    ea30:	4622      	mov	r2, r4
    ea32:	3a04      	subs	r2, #4
    ea34:	2a03      	cmp	r2, #3
    ea36:	f846 5b04 	str.w	r5, [r6], #4
    ea3a:	d8fa      	bhi.n	ea32 <memset+0x6a>
    ea3c:	1f22      	subs	r2, r4, #4
    ea3e:	f022 0203 	bic.w	r2, r2, #3
    ea42:	3204      	adds	r2, #4
    ea44:	4413      	add	r3, r2
    ea46:	f004 0403 	and.w	r4, r4, #3
    ea4a:	b12c      	cbz	r4, ea58 <memset+0x90>
    ea4c:	b2c9      	uxtb	r1, r1
    ea4e:	441c      	add	r4, r3
    ea50:	f803 1b01 	strb.w	r1, [r3], #1
    ea54:	429c      	cmp	r4, r3
    ea56:	d1fb      	bne.n	ea50 <memset+0x88>
    ea58:	bc70      	pop	{r4, r5, r6}
    ea5a:	4770      	bx	lr
    ea5c:	4614      	mov	r4, r2
    ea5e:	4603      	mov	r3, r0
    ea60:	e7c2      	b.n	e9e8 <memset+0x20>
    ea62:	bf00      	nop
	...

0000ea80 <strlen>:
    ea80:	f890 f000 	pld	[r0]
    ea84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    ea88:	f020 0107 	bic.w	r1, r0, #7
    ea8c:	f06f 0c00 	mvn.w	ip, #0
    ea90:	f010 0407 	ands.w	r4, r0, #7
    ea94:	f891 f020 	pld	[r1, #32]
    ea98:	f040 8049 	bne.w	eb2e <strlen+0xae>
    ea9c:	f04f 0400 	mov.w	r4, #0
    eaa0:	f06f 0007 	mvn.w	r0, #7
    eaa4:	e9d1 2300 	ldrd	r2, r3, [r1]
    eaa8:	f891 f040 	pld	[r1, #64]	; 0x40
    eaac:	f100 0008 	add.w	r0, r0, #8
    eab0:	fa82 f24c 	uadd8	r2, r2, ip
    eab4:	faa4 f28c 	sel	r2, r4, ip
    eab8:	fa83 f34c 	uadd8	r3, r3, ip
    eabc:	faa2 f38c 	sel	r3, r2, ip
    eac0:	bb4b      	cbnz	r3, eb16 <strlen+0x96>
    eac2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    eac6:	fa82 f24c 	uadd8	r2, r2, ip
    eaca:	f100 0008 	add.w	r0, r0, #8
    eace:	faa4 f28c 	sel	r2, r4, ip
    ead2:	fa83 f34c 	uadd8	r3, r3, ip
    ead6:	faa2 f38c 	sel	r3, r2, ip
    eada:	b9e3      	cbnz	r3, eb16 <strlen+0x96>
    eadc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    eae0:	fa82 f24c 	uadd8	r2, r2, ip
    eae4:	f100 0008 	add.w	r0, r0, #8
    eae8:	faa4 f28c 	sel	r2, r4, ip
    eaec:	fa83 f34c 	uadd8	r3, r3, ip
    eaf0:	faa2 f38c 	sel	r3, r2, ip
    eaf4:	b97b      	cbnz	r3, eb16 <strlen+0x96>
    eaf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    eafa:	f101 0120 	add.w	r1, r1, #32
    eafe:	fa82 f24c 	uadd8	r2, r2, ip
    eb02:	f100 0008 	add.w	r0, r0, #8
    eb06:	faa4 f28c 	sel	r2, r4, ip
    eb0a:	fa83 f34c 	uadd8	r3, r3, ip
    eb0e:	faa2 f38c 	sel	r3, r2, ip
    eb12:	2b00      	cmp	r3, #0
    eb14:	d0c6      	beq.n	eaa4 <strlen+0x24>
    eb16:	2a00      	cmp	r2, #0
    eb18:	bf04      	itt	eq
    eb1a:	3004      	addeq	r0, #4
    eb1c:	461a      	moveq	r2, r3
    eb1e:	ba12      	rev	r2, r2
    eb20:	fab2 f282 	clz	r2, r2
    eb24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    eb28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    eb2c:	4770      	bx	lr
    eb2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    eb32:	f004 0503 	and.w	r5, r4, #3
    eb36:	f1c4 0000 	rsb	r0, r4, #0
    eb3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    eb3e:	f014 0f04 	tst.w	r4, #4
    eb42:	f891 f040 	pld	[r1, #64]	; 0x40
    eb46:	fa0c f505 	lsl.w	r5, ip, r5
    eb4a:	ea62 0205 	orn	r2, r2, r5
    eb4e:	bf1c      	itt	ne
    eb50:	ea63 0305 	ornne	r3, r3, r5
    eb54:	4662      	movne	r2, ip
    eb56:	f04f 0400 	mov.w	r4, #0
    eb5a:	e7a9      	b.n	eab0 <strlen+0x30>

0000eb5c <__register_exitproc>:
    eb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eb60:	4d2c      	ldr	r5, [pc, #176]	; (ec14 <__register_exitproc+0xb8>)
    eb62:	4606      	mov	r6, r0
    eb64:	6828      	ldr	r0, [r5, #0]
    eb66:	4698      	mov	r8, r3
    eb68:	460f      	mov	r7, r1
    eb6a:	4691      	mov	r9, r2
    eb6c:	f000 f882 	bl	ec74 <__retarget_lock_acquire_recursive>
    eb70:	4b29      	ldr	r3, [pc, #164]	; (ec18 <__register_exitproc+0xbc>)
    eb72:	681c      	ldr	r4, [r3, #0]
    eb74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    eb78:	2b00      	cmp	r3, #0
    eb7a:	d03e      	beq.n	ebfa <__register_exitproc+0x9e>
    eb7c:	685a      	ldr	r2, [r3, #4]
    eb7e:	2a1f      	cmp	r2, #31
    eb80:	dc1c      	bgt.n	ebbc <__register_exitproc+0x60>
    eb82:	f102 0e01 	add.w	lr, r2, #1
    eb86:	b176      	cbz	r6, eba6 <__register_exitproc+0x4a>
    eb88:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    eb8c:	2401      	movs	r4, #1
    eb8e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    eb92:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    eb96:	4094      	lsls	r4, r2
    eb98:	4320      	orrs	r0, r4
    eb9a:	2e02      	cmp	r6, #2
    eb9c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    eba0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    eba4:	d023      	beq.n	ebee <__register_exitproc+0x92>
    eba6:	3202      	adds	r2, #2
    eba8:	f8c3 e004 	str.w	lr, [r3, #4]
    ebac:	6828      	ldr	r0, [r5, #0]
    ebae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ebb2:	f000 f861 	bl	ec78 <__retarget_lock_release_recursive>
    ebb6:	2000      	movs	r0, #0
    ebb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ebbc:	4b17      	ldr	r3, [pc, #92]	; (ec1c <__register_exitproc+0xc0>)
    ebbe:	b30b      	cbz	r3, ec04 <__register_exitproc+0xa8>
    ebc0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ebc4:	f7ff fdc4 	bl	e750 <malloc>
    ebc8:	4603      	mov	r3, r0
    ebca:	b1d8      	cbz	r0, ec04 <__register_exitproc+0xa8>
    ebcc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ebd0:	6002      	str	r2, [r0, #0]
    ebd2:	2100      	movs	r1, #0
    ebd4:	6041      	str	r1, [r0, #4]
    ebd6:	460a      	mov	r2, r1
    ebd8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ebdc:	f04f 0e01 	mov.w	lr, #1
    ebe0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    ebe4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    ebe8:	2e00      	cmp	r6, #0
    ebea:	d0dc      	beq.n	eba6 <__register_exitproc+0x4a>
    ebec:	e7cc      	b.n	eb88 <__register_exitproc+0x2c>
    ebee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ebf2:	430c      	orrs	r4, r1
    ebf4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    ebf8:	e7d5      	b.n	eba6 <__register_exitproc+0x4a>
    ebfa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    ebfe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ec02:	e7bb      	b.n	eb7c <__register_exitproc+0x20>
    ec04:	6828      	ldr	r0, [r5, #0]
    ec06:	f000 f837 	bl	ec78 <__retarget_lock_release_recursive>
    ec0a:	f04f 30ff 	mov.w	r0, #4294967295
    ec0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ec12:	bf00      	nop
    ec14:	20000608 	.word	0x20000608
    ec18:	0000f194 	.word	0x0000f194
    ec1c:	0000e751 	.word	0x0000e751

0000ec20 <register_fini>:
    ec20:	4b02      	ldr	r3, [pc, #8]	; (ec2c <register_fini+0xc>)
    ec22:	b113      	cbz	r3, ec2a <register_fini+0xa>
    ec24:	4802      	ldr	r0, [pc, #8]	; (ec30 <register_fini+0x10>)
    ec26:	f000 b805 	b.w	ec34 <atexit>
    ec2a:	4770      	bx	lr
    ec2c:	00000000 	.word	0x00000000
    ec30:	0000ec41 	.word	0x0000ec41

0000ec34 <atexit>:
    ec34:	2300      	movs	r3, #0
    ec36:	4601      	mov	r1, r0
    ec38:	461a      	mov	r2, r3
    ec3a:	4618      	mov	r0, r3
    ec3c:	f7ff bf8e 	b.w	eb5c <__register_exitproc>

0000ec40 <__libc_fini_array>:
    ec40:	b538      	push	{r3, r4, r5, lr}
    ec42:	4c0a      	ldr	r4, [pc, #40]	; (ec6c <__libc_fini_array+0x2c>)
    ec44:	4d0a      	ldr	r5, [pc, #40]	; (ec70 <__libc_fini_array+0x30>)
    ec46:	1b64      	subs	r4, r4, r5
    ec48:	10a4      	asrs	r4, r4, #2
    ec4a:	d00a      	beq.n	ec62 <__libc_fini_array+0x22>
    ec4c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    ec50:	3b01      	subs	r3, #1
    ec52:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ec56:	3c01      	subs	r4, #1
    ec58:	f855 3904 	ldr.w	r3, [r5], #-4
    ec5c:	4798      	blx	r3
    ec5e:	2c00      	cmp	r4, #0
    ec60:	d1f9      	bne.n	ec56 <__libc_fini_array+0x16>
    ec62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ec66:	f000 baab 	b.w	f1c0 <_fini>
    ec6a:	bf00      	nop
    ec6c:	0000f1d0 	.word	0x0000f1d0
    ec70:	0000f1cc 	.word	0x0000f1cc

0000ec74 <__retarget_lock_acquire_recursive>:
    ec74:	4770      	bx	lr
    ec76:	bf00      	nop

0000ec78 <__retarget_lock_release_recursive>:
    ec78:	4770      	bx	lr
    ec7a:	bf00      	nop
    ec7c:	00000a0d 	.word	0x00000a0d
    ec80:	202a2a2a 	.word	0x202a2a2a
    ec84:	72617453 	.word	0x72617453
    ec88:	20705574 	.word	0x20705574
    ec8c:	6f676c41 	.word	0x6f676c41
    ec90:	68746972 	.word	0x68746972
    ec94:	206e656d 	.word	0x206e656d
    ec98:	74736554 	.word	0x74736554
    ec9c:	2a2a2a20 	.word	0x2a2a2a20
    eca0:	00000000 	.word	0x00000000
    eca4:	202a2a2a 	.word	0x202a2a2a
    eca8:	65746144 	.word	0x65746144
    ecac:	0020203a 	.word	0x0020203a
    ecb0:	2074634f 	.word	0x2074634f
    ecb4:	32203732 	.word	0x32203732
    ecb8:	00303230 	.word	0x00303230
    ecbc:	6d695420 	.word	0x6d695420
    ecc0:	00203a65 	.word	0x00203a65
    ecc4:	323a3731 	.word	0x323a3731
    ecc8:	34353a36 	.word	0x34353a36
    eccc:	00000000 	.word	0x00000000
    ecd0:	62616e45 	.word	0x62616e45
    ecd4:	676e696c 	.word	0x676e696c
    ecd8:	61654820 	.word	0x61654820
    ecdc:	3a726574 	.word	0x3a726574
    ece0:	00000020 	.word	0x00000020
    ece4:	00092e20 	.word	0x00092e20
    ece8:	682f2e2e 	.word	0x682f2e2e
    ecec:	702f6c70 	.word	0x702f6c70
    ecf0:	2f74726f 	.word	0x2f74726f
    ecf4:	5f6c7068 	.word	0x5f6c7068
    ecf8:	6f697067 	.word	0x6f697067
    ecfc:	7361625f 	.word	0x7361625f
    ed00:	00682e65 	.word	0x00682e65
    ed04:	682f2e2e 	.word	0x682f2e2e
    ed08:	692f6c61 	.word	0x692f6c61
    ed0c:	756c636e 	.word	0x756c636e
    ed10:	682f6564 	.word	0x682f6564
    ed14:	775f6c61 	.word	0x775f6c61
    ed18:	682e7464 	.word	0x682e7464
    ed1c:	00000000 	.word	0x00000000
    ed20:	682f2e2e 	.word	0x682f2e2e
    ed24:	732f6c61 	.word	0x732f6c61
    ed28:	682f6372 	.word	0x682f6372
    ed2c:	635f6c61 	.word	0x635f6c61
    ed30:	6e656c61 	.word	0x6e656c61
    ed34:	2e726164 	.word	0x2e726164
    ed38:	00000063 	.word	0x00000063
    ed3c:	682f2e2e 	.word	0x682f2e2e
    ed40:	732f6c61 	.word	0x732f6c61
    ed44:	682f6372 	.word	0x682f6372
    ed48:	635f6c61 	.word	0x635f6c61
    ed4c:	615f6e61 	.word	0x615f6e61
    ed50:	636e7973 	.word	0x636e7973
    ed54:	0000632e 	.word	0x0000632e
    ed58:	682f2e2e 	.word	0x682f2e2e
    ed5c:	732f6c61 	.word	0x732f6c61
    ed60:	682f6372 	.word	0x682f6372
    ed64:	635f6c61 	.word	0x635f6c61
    ed68:	735f6372 	.word	0x735f6372
    ed6c:	2e636e79 	.word	0x2e636e79
    ed70:	00000063 	.word	0x00000063
    ed74:	682f2e2e 	.word	0x682f2e2e
    ed78:	732f6c61 	.word	0x732f6c61
    ed7c:	682f6372 	.word	0x682f6372
    ed80:	695f6c61 	.word	0x695f6c61
    ed84:	6d5f6332 	.word	0x6d5f6332
    ed88:	7973615f 	.word	0x7973615f
    ed8c:	632e636e 	.word	0x632e636e
    ed90:	00000000 	.word	0x00000000
    ed94:	682f2e2e 	.word	0x682f2e2e
    ed98:	732f6c61 	.word	0x732f6c61
    ed9c:	682f6372 	.word	0x682f6372
    eda0:	695f6c61 	.word	0x695f6c61
    eda4:	6d5f6332 	.word	0x6d5f6332
    eda8:	6e79735f 	.word	0x6e79735f
    edac:	00632e63 	.word	0x00632e63
    edb0:	682f2e2e 	.word	0x682f2e2e
    edb4:	732f6c61 	.word	0x732f6c61
    edb8:	682f6372 	.word	0x682f6372
    edbc:	705f6c61 	.word	0x705f6c61
    edc0:	632e6d77 	.word	0x632e6d77
    edc4:	00000000 	.word	0x00000000
    edc8:	682f2e2e 	.word	0x682f2e2e
    edcc:	732f6c61 	.word	0x732f6c61
    edd0:	682f6372 	.word	0x682f6372
    edd4:	715f6c61 	.word	0x715f6c61
    edd8:	5f697073 	.word	0x5f697073
    eddc:	636e7973 	.word	0x636e7973
    ede0:	0000632e 	.word	0x0000632e
    ede4:	682f2e2e 	.word	0x682f2e2e
    ede8:	732f6c61 	.word	0x732f6c61
    edec:	682f6372 	.word	0x682f6372
    edf0:	735f6c61 	.word	0x735f6c61
    edf4:	6d5f6970 	.word	0x6d5f6970
    edf8:	6e79735f 	.word	0x6e79735f
    edfc:	00632e63 	.word	0x00632e63
    ee00:	682f2e2e 	.word	0x682f2e2e
    ee04:	732f6c61 	.word	0x732f6c61
    ee08:	682f6372 	.word	0x682f6372
    ee0c:	745f6c61 	.word	0x745f6c61
    ee10:	72656d69 	.word	0x72656d69
    ee14:	0000632e 	.word	0x0000632e
    ee18:	682f2e2e 	.word	0x682f2e2e
    ee1c:	752f6c61 	.word	0x752f6c61
    ee20:	736c6974 	.word	0x736c6974
    ee24:	6372732f 	.word	0x6372732f
    ee28:	6974752f 	.word	0x6974752f
    ee2c:	6c5f736c 	.word	0x6c5f736c
    ee30:	2e747369 	.word	0x2e747369
    ee34:	00000063 	.word	0x00000063

0000ee38 <_map>:
    ee38:	00000000 00000040 00000003 00000003     ....@...........
    ee48:	00000004 00000004 00000005 00000005     ................
    ee58:	00000006 00000056 00000007 00000057     ....V.......W...
    ee68:	00000008 00000028 00000009 00000029     ....(.......)...
    ee78:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    ee88:	632e6369 00000000                       ic.c....

0000ee90 <user_mux_confs>:
    ee90:	00020100 00000000 00000000 00000000     ................
	...

0000eed4 <channel_confs>:
    eed4:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000ef14 <interrupt_cfg>:
	...
    ef94:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    efa4:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    efb4:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    efc4:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    efd4:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    efe4:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    eff4:	43000400 43000800 43000c00              ...C...C...C

0000f000 <sercomspi_regs>:
    f000:	0020000c 00020000 00000000 01ff0001     .. .............
    f010:	30000c04 02000000 00000000 ff00ef00     ...0............
    f020:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    f030:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    f040:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    f050:	43001400 43001800                       ...C...C

0000f058 <_usb_ep_cfgs>:
    f058:	20000850 00000000 00000040 20000890     P.. ....@...... 
    f068:	200008d0 00400040 20000910 20000950     ... @.@.... P.. 
    f078:	00400040 20000990 200009d0 00400040     @.@.... ... @.@.
    f088:	20000a10 20000a50 00400040 00000804     ... P.. @.@.....
    f098:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    f0a8:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    f0b8:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    f0c8:	7361625f 00682e65                       _base.h.

0000f0d0 <n25q256a_interface>:
    f0d0:	0000b90d 0000b9b1 0000bac1 0000bc79     ............y...
    f0e0:	0000bd09 752f2e2e 642f6273 63697665     ....../usb/devic
    f0f0:	73752f65 2e636462 00000063              e/usbdc.c...

0000f0fc <_ZTV9CDC_Class>:
	...
    f104:	0000ddf5 0000ded5 0000da79 0000ddbd     ........y.......
    f114:	0000df6d 0000dd81 0000dc95 0000dce5     m...............
    f124:	0000dddd 0000de3d                       ....=...

0000f12c <_ZTV6Stream>:
	...
    f134:	0000e765 0000e03d 0000da79 0000da8d     e...=...y.......
    f144:	0000e765 0000e765 0000e765 2e257830     e...e...e...0x%.
    f154:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f164:	0066766f                                ovf.

0000f168 <_ZTV5Print>:
	...
    f170:	0000e765 0000e03d 0000da79 0000da8d     e...=...y.......
    f180:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f190:	00632e6f                                o.c.

0000f194 <_global_impure_ptr>:
    f194:	200001e0                                ... 

0000f198 <_init>:
    f198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f19a:	bf00      	nop
    f19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f19e:	bc08      	pop	{r3}
    f1a0:	469e      	mov	lr, r3
    f1a2:	4770      	bx	lr

0000f1a4 <__init_array_start>:
    f1a4:	0000ec21 	.word	0x0000ec21

0000f1a8 <__frame_dummy_init_array_entry>:
    f1a8:	00000289 00000479 00000571 0000da41     ....y...q...A...
    f1b8:	0000dfed 0000e73d                       ....=...

0000f1c0 <_fini>:
    f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1c2:	bf00      	nop
    f1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f1c6:	bc08      	pop	{r3}
    f1c8:	469e      	mov	lr, r3
    f1ca:	4770      	bx	lr

0000f1cc <__fini_array_start>:
    f1cc:	00000265 	.word	0x00000265
