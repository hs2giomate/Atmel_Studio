
HeaterP0Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000102b4  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000102b4  000102b4  000202b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  000102bc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003060c  2**0
                  CONTENTS
  5 .bss          00000d64  2000060c  000108c8  0003060c  2**2
                  ALLOC
  6 .stack        00010000  20001370  0001162c  0003060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000709d6  00000000  00000000  00030693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009a5d  00000000  00000000  000a1069  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001c987  00000000  00000000  000aaac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000032e8  00000000  00000000  000c744d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002fd0  00000000  00000000  000ca735  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004e2a2  00000000  00000000  000cd705  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003a175  00000000  00000000  0011b9a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013e92d  00000000  00000000  00155b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d344  00000000  00000000  0029444c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 13 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     p.. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	75 5f 00 00 a1 4d 00 00 d1 02 00 00 d1 02 00 00     u_...M..........
      7c:	b1 4d 00 00 c1 4d 00 00 d1 4d 00 00 e1 4d 00 00     .M...M...M...M..
      8c:	f1 4d 00 00 01 4e 00 00 11 4e 00 00 d1 02 00 00     .M...N...N......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 b1 74 00 00 cd 74 00 00 e9 74 00 00     .....t...t...t..
     174:	05 75 00 00 d1 02 00 00 f9 41 00 00 f9 b4 00 00     .u.......A......
     184:	09 b5 00 00 19 b5 00 00 29 b5 00 00 d1 02 00 00     ........).......
     194:	15 7f 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 31 7f 00 00     ............1...
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 f5 8b 00 00 d1 02 00 00     ................
     1f4:	11 8c 00 00 d1 02 00 00 2d 8c 00 00 49 8c 00 00     ........-...I...
     204:	65 8c 00 00 81 8c 00 00 d1 02 00 00 d1 02 00 00     e...............
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	000102bc 	.word	0x000102bc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000102bc 	.word	0x000102bc
     2c4:	20000610 	.word	0x20000610
     2c8:	000102bc 	.word	0x000102bc
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	000102bc 	.word	0x000102bc
     33c:	2000060c 	.word	0x2000060c
     340:	20001370 	.word	0x20001370
     344:	2000060c 	.word	0x2000060c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000f909 	.word	0x0000f909
     354:	00000365 	.word	0x00000365

00000358 <_ZL13FirmwareAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     358:	2280      	movs	r2, #128	; 0x80
     35a:	4b01      	ldr	r3, [pc, #4]	; (360 <_ZL13FirmwareAlivePK10timer_task+0x8>)
     35c:	619a      	str	r2, [r3, #24]
     35e:	4770      	bx	lr
     360:	41008000 	.word	0x41008000

00000364 <main>:
		//gpio_toggle_pin_level(iAlcFwIsAlive);
		gpio_set_pin_level(iAlcFwIsAlive,true);
}

int main(void)
{
     364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     368:	b0cd      	sub	sp, #308	; 0x134
	atmel_start_init();
     36a:	4b44      	ldr	r3, [pc, #272]	; (47c <main+0x118>)
     36c:	4798      	blx	r3
	uint8_t status,enableMask;

	usb.Init();
     36e:	4c44      	ldr	r4, [pc, #272]	; (480 <main+0x11c>)
     370:	4620      	mov	r0, r4
     372:	4b44      	ldr	r3, [pc, #272]	; (484 <main+0x120>)
     374:	4798      	blx	r3
	delay_ms(100);
     376:	2064      	movs	r0, #100	; 0x64
     378:	4b43      	ldr	r3, [pc, #268]	; (488 <main+0x124>)
     37a:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     37c:	4e43      	ldr	r6, [pc, #268]	; (48c <main+0x128>)
     37e:	4631      	mov	r1, r6
     380:	4620      	mov	r0, r4
     382:	4d43      	ldr	r5, [pc, #268]	; (490 <main+0x12c>)
     384:	47a8      	blx	r5
     386:	4631      	mov	r1, r6
     388:	4620      	mov	r0, r4
     38a:	47a8      	blx	r5
     38c:	4941      	ldr	r1, [pc, #260]	; (494 <main+0x130>)
     38e:	4620      	mov	r0, r4
     390:	47a8      	blx	r5
     392:	4631      	mov	r1, r6
     394:	4620      	mov	r0, r4
     396:	47a8      	blx	r5
     398:	493f      	ldr	r1, [pc, #252]	; (498 <main+0x134>)
     39a:	4620      	mov	r0, r4
     39c:	47a8      	blx	r5
     39e:	493f      	ldr	r1, [pc, #252]	; (49c <main+0x138>)
     3a0:	4620      	mov	r0, r4
     3a2:	47a8      	blx	r5
     3a4:	493e      	ldr	r1, [pc, #248]	; (4a0 <main+0x13c>)
     3a6:	4620      	mov	r0, r4
     3a8:	47a8      	blx	r5
     3aa:	493e      	ldr	r1, [pc, #248]	; (4a4 <main+0x140>)
     3ac:	4620      	mov	r0, r4
     3ae:	47a8      	blx	r5
     3b0:	4631      	mov	r1, r6
     3b2:	4620      	mov	r0, r4
     3b4:	47a8      	blx	r5
     3b6:	4631      	mov	r1, r6
     3b8:	4620      	mov	r0, r4
     3ba:	47a8      	blx	r5
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	uint32_t p=pwm_enable(&LIVE_PULSE);
     3bc:	483a      	ldr	r0, [pc, #232]	; (4a8 <main+0x144>)
     3be:	4b3b      	ldr	r3, [pc, #236]	; (4ac <main+0x148>)
     3c0:	4798      	blx	r3
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     3c2:	22fa      	movs	r2, #250	; 0xfa
     3c4:	493a      	ldr	r1, [pc, #232]	; (4b0 <main+0x14c>)
     3c6:	483b      	ldr	r0, [pc, #236]	; (4b4 <main+0x150>)
     3c8:	4b3b      	ldr	r3, [pc, #236]	; (4b8 <main+0x154>)
     3ca:	4798      	blx	r3
	heater.Init();
     3cc:	483b      	ldr	r0, [pc, #236]	; (4bc <main+0x158>)
     3ce:	4b3c      	ldr	r3, [pc, #240]	; (4c0 <main+0x15c>)
     3d0:	4798      	blx	r3
	Maintenance_Tool	toolApp;
     3d2:	4668      	mov	r0, sp
     3d4:	4b3b      	ldr	r3, [pc, #236]	; (4c4 <main+0x160>)
     3d6:	4798      	blx	r3
	toolApp.Init();
     3d8:	4668      	mov	r0, sp
     3da:	4b3b      	ldr	r3, [pc, #236]	; (4c8 <main+0x164>)
     3dc:	4798      	blx	r3
	while (1)
	{
		if (toolApp.IsAppConnected())
     3de:	4f3b      	ldr	r7, [pc, #236]	; (4cc <main+0x168>)
		{
			if (toolApp.handleCommunication())
     3e0:	f8df b114 	ldr.w	fp, [pc, #276]	; 4f8 <main+0x194>
		}
		for (uint8_t i = 0; i < 4; i++)
		{
			if (enableMask&i)
			{
				delay_ms(DELAY_HEATER_COMMUNICATION);
     3e4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 488 <main+0x124>
		if (toolApp.IsAppConnected())
     3e8:	4668      	mov	r0, sp
     3ea:	47b8      	blx	r7
     3ec:	2800      	cmp	r0, #0
     3ee:	d13e      	bne.n	46e <main+0x10a>
			enableMask=0xff;
     3f0:	f04f 08ff 	mov.w	r8, #255	; 0xff
     3f4:	4e36      	ldr	r6, [pc, #216]	; (4d0 <main+0x16c>)
     3f6:	2400      	movs	r4, #0
     3f8:	4d21      	ldr	r5, [pc, #132]	; (480 <main+0x11c>)
		for (uint8_t i = 0; i < 4; i++)
     3fa:	3401      	adds	r4, #1
     3fc:	b2e4      	uxtb	r4, r4
     3fe:	2c04      	cmp	r4, #4
     400:	d0f2      	beq.n	3e8 <main+0x84>
			if (enableMask&i)
     402:	ea18 0f04 	tst.w	r8, r4
     406:	d030      	beq.n	46a <main+0x106>
				delay_ms(DELAY_HEATER_COMMUNICATION);
     408:	2064      	movs	r0, #100	; 0x64
     40a:	47d0      	blx	sl
     40c:	4931      	ldr	r1, [pc, #196]	; (4d4 <main+0x170>)
     40e:	4628      	mov	r0, r5
     410:	f8df 907c 	ldr.w	r9, [pc, #124]	; 490 <main+0x12c>
     414:	47c8      	blx	r9
     416:	220a      	movs	r2, #10
     418:	4621      	mov	r1, r4
     41a:	4628      	mov	r0, r5
     41c:	4b2e      	ldr	r3, [pc, #184]	; (4d8 <main+0x174>)
     41e:	4798      	blx	r3
     420:	492e      	ldr	r1, [pc, #184]	; (4dc <main+0x178>)
     422:	4628      	mov	r0, r5
     424:	47c8      	blx	r9
				usb<<"Enabling Heater: "<<i<<" .\t";
				heater.Enable(i);
     426:	4621      	mov	r1, r4
     428:	4824      	ldr	r0, [pc, #144]	; (4bc <main+0x158>)
     42a:	4b2d      	ldr	r3, [pc, #180]	; (4e0 <main+0x17c>)
     42c:	4798      	blx	r3
				delay_ms(DELAY_HEATER_COMMUNICATION);
     42e:	2064      	movs	r0, #100	; 0x64
     430:	47d0      	blx	sl
				status= heater.ReadStatus();
     432:	4822      	ldr	r0, [pc, #136]	; (4bc <main+0x158>)
     434:	4b2b      	ldr	r3, [pc, #172]	; (4e4 <main+0x180>)
     436:	4798      	blx	r3
     438:	492b      	ldr	r1, [pc, #172]	; (4e8 <main+0x184>)
     43a:	4628      	mov	r0, r5
     43c:	47c8      	blx	r9
     43e:	220a      	movs	r2, #10
     440:	4621      	mov	r1, r4
     442:	4628      	mov	r0, r5
     444:	4b24      	ldr	r3, [pc, #144]	; (4d8 <main+0x174>)
     446:	4798      	blx	r3
     448:	4928      	ldr	r1, [pc, #160]	; (4ec <main+0x188>)
     44a:	4628      	mov	r0, r5
     44c:	47c8      	blx	r9
     44e:	220a      	movs	r2, #10
     450:	7831      	ldrb	r1, [r6, #0]
     452:	4628      	mov	r0, r5
     454:	4b26      	ldr	r3, [pc, #152]	; (4f0 <main+0x18c>)
     456:	4798      	blx	r3
     458:	490c      	ldr	r1, [pc, #48]	; (48c <main+0x128>)
     45a:	4628      	mov	r0, r5
     45c:	47c8      	blx	r9
				usb<<"Heater "<<i<< " Status :"<<heater.heaterGPIO.inputs.niAlcHeaterRelayFault[i]<<NEWLINE;
				delay_ms(DELAY_HEATER_COMMUNICATION);
     45e:	2064      	movs	r0, #100	; 0x64
     460:	47d0      	blx	sl
				heater.Disable(i);
     462:	4621      	mov	r1, r4
     464:	4815      	ldr	r0, [pc, #84]	; (4bc <main+0x158>)
     466:	4b23      	ldr	r3, [pc, #140]	; (4f4 <main+0x190>)
     468:	4798      	blx	r3
     46a:	3601      	adds	r6, #1
     46c:	e7c5      	b.n	3fa <main+0x96>
			if (toolApp.handleCommunication())
     46e:	4668      	mov	r0, sp
     470:	47d8      	blx	fp
     472:	2800      	cmp	r0, #0
     474:	d0be      	beq.n	3f4 <main+0x90>
				enableMask=toolApp.singleTaskMessage.description;
     476:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
     47a:	e7bb      	b.n	3f4 <main+0x90>
     47c:	00000b19 	.word	0x00000b19
     480:	20000f7c 	.word	0x20000f7c
     484:	0000eab9 	.word	0x0000eab9
     488:	00002251 	.word	0x00002251
     48c:	0000fd3c 	.word	0x0000fd3c
     490:	0000ef4d 	.word	0x0000ef4d
     494:	0000fd40 	.word	0x0000fd40
     498:	0000fd64 	.word	0x0000fd64
     49c:	0000fd70 	.word	0x0000fd70
     4a0:	0000fd7c 	.word	0x0000fd7c
     4a4:	0000fd84 	.word	0x0000fd84
     4a8:	2000116c 	.word	0x2000116c
     4ac:	00002871 	.word	0x00002871
     4b0:	00000359 	.word	0x00000359
     4b4:	20000f24 	.word	0x20000f24
     4b8:	0000e73d 	.word	0x0000e73d
     4bc:	20000628 	.word	0x20000628
     4c0:	00000585 	.word	0x00000585
     4c4:	00000699 	.word	0x00000699
     4c8:	00000861 	.word	0x00000861
     4cc:	000006e1 	.word	0x000006e1
     4d0:	2000062c 	.word	0x2000062c
     4d4:	0000fd90 	.word	0x0000fd90
     4d8:	0000ef91 	.word	0x0000ef91
     4dc:	0000fda4 	.word	0x0000fda4
     4e0:	000005f5 	.word	0x000005f5
     4e4:	000005c5 	.word	0x000005c5
     4e8:	0000fda8 	.word	0x0000fda8
     4ec:	0000fdb0 	.word	0x0000fdb0
     4f0:	0000efb9 	.word	0x0000efb9
     4f4:	00000609 	.word	0x00000609
     4f8:	00000a41 	.word	0x00000a41

000004fc <_GLOBAL__sub_I_main>:

		}
		

	}
}
     4fc:	b510      	push	{r4, lr}
static SingleHeater_Class heater;
     4fe:	4c05      	ldr	r4, [pc, #20]	; (514 <_GLOBAL__sub_I_main+0x18>)
     500:	4620      	mov	r0, r4
     502:	4b05      	ldr	r3, [pc, #20]	; (518 <_GLOBAL__sub_I_main+0x1c>)
     504:	4798      	blx	r3
     506:	4a05      	ldr	r2, [pc, #20]	; (51c <_GLOBAL__sub_I_main+0x20>)
     508:	4905      	ldr	r1, [pc, #20]	; (520 <_GLOBAL__sub_I_main+0x24>)
     50a:	4620      	mov	r0, r4
     50c:	4b05      	ldr	r3, [pc, #20]	; (524 <_GLOBAL__sub_I_main+0x28>)
     50e:	4798      	blx	r3
     510:	bd10      	pop	{r4, pc}
     512:	bf00      	nop
     514:	20000628 	.word	0x20000628
     518:	00000545 	.word	0x00000545
     51c:	20000000 	.word	0x20000000
     520:	00000555 	.word	0x00000555
     524:	0000f8d5 	.word	0x0000f8d5

00000528 <__tcf_0>:


#include "SingleHeater_Class.h"
SingleHeater_Class*	ptrSingleHeaterClass;
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     528:	b538      	push	{r3, r4, r5, lr}
     52a:	4d04      	ldr	r5, [pc, #16]	; (53c <__tcf_0+0x14>)
     52c:	f105 001c 	add.w	r0, r5, #28
     530:	4c03      	ldr	r4, [pc, #12]	; (540 <__tcf_0+0x18>)
     532:	47a0      	blx	r4
     534:	4628      	mov	r0, r5
     536:	47a0      	blx	r4
     538:	bd38      	pop	{r3, r4, r5, pc}
     53a:	bf00      	nop
     53c:	20000644 	.word	0x20000644
     540:	0000dc01 	.word	0x0000dc01

00000544 <_ZN18SingleHeater_ClassC1Ev>:


// default constructor
SingleHeater_Class::SingleHeater_Class()
{
	ptrSingleHeaterClass=this;
     544:	4b02      	ldr	r3, [pc, #8]	; (550 <_ZN18SingleHeater_ClassC1Ev+0xc>)
     546:	6398      	str	r0, [r3, #56]	; 0x38
	i2c=&i2cSharedStatic;
     548:	333c      	adds	r3, #60	; 0x3c
     54a:	6183      	str	r3, [r0, #24]
} //SingleHeater_Class
     54c:	4770      	bx	lr
     54e:	bf00      	nop
     550:	20000644 	.word	0x20000644

00000554 <_ZN18SingleHeater_ClassD1Ev>:


// default destructor
SingleHeater_Class::~SingleHeater_Class()
{
} //~SingleHeater_Class
     554:	4770      	bx	lr
	...

00000558 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:
			asm("nop");
		}
		return isOK;
}

uint8_t SingleHeater_Class::InitExpanderArray(void){
     558:	b570      	push	{r4, r5, r6, lr}
     55a:	4605      	mov	r5, r0
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
	{
		expanders[i]=&expandersStatic[i];
     55c:	4c07      	ldr	r4, [pc, #28]	; (57c <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x24>)
     55e:	60c4      	str	r4, [r0, #12]
		currentExpander=(expanders[i]);
     560:	6144      	str	r4, [r0, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     562:	6982      	ldr	r2, [r0, #24]
     564:	2120      	movs	r1, #32
     566:	4620      	mov	r0, r4
     568:	4e05      	ldr	r6, [pc, #20]	; (580 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x28>)
     56a:	47b0      	blx	r6
		expanders[i]=&expandersStatic[i];
     56c:	f104 001c 	add.w	r0, r4, #28
     570:	6128      	str	r0, [r5, #16]
		currentExpander=(expanders[i]);
     572:	6168      	str	r0, [r5, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     574:	69aa      	ldr	r2, [r5, #24]
     576:	2121      	movs	r1, #33	; 0x21
     578:	47b0      	blx	r6
	}
	
}
     57a:	bd70      	pop	{r4, r5, r6, pc}
     57c:	20000644 	.word	0x20000644
     580:	0000dc15 	.word	0x0000dc15

00000584 <_ZN18SingleHeater_Class4InitEv>:
bool SingleHeater_Class::Init(void){
     584:	b510      	push	{r4, lr}
     586:	4604      	mov	r4, r0
		i2c->Init();
     588:	6980      	ldr	r0, [r0, #24]
     58a:	4b0a      	ldr	r3, [pc, #40]	; (5b4 <_ZN18SingleHeater_Class4InitEv+0x30>)
     58c:	4798      	blx	r3
		if (i2c->isOK)
     58e:	69a3      	ldr	r3, [r4, #24]
     590:	7a5b      	ldrb	r3, [r3, #9]
     592:	b913      	cbnz	r3, 59a <_ZN18SingleHeater_Class4InitEv+0x16>
			asm("nop");
     594:	bf00      	nop
		return isOK;
     596:	7820      	ldrb	r0, [r4, #0]
}
     598:	bd10      	pop	{r4, pc}
			InitExpanderArray();
     59a:	4620      	mov	r0, r4
     59c:	4b06      	ldr	r3, [pc, #24]	; (5b8 <_ZN18SingleHeater_Class4InitEv+0x34>)
     59e:	4798      	blx	r3
			expanders[0]->SetPortInput();
     5a0:	68e0      	ldr	r0, [r4, #12]
     5a2:	4b06      	ldr	r3, [pc, #24]	; (5bc <_ZN18SingleHeater_Class4InitEv+0x38>)
     5a4:	4798      	blx	r3
			expanders[1]->SetPortOutput();
     5a6:	6920      	ldr	r0, [r4, #16]
     5a8:	4b05      	ldr	r3, [pc, #20]	; (5c0 <_ZN18SingleHeater_Class4InitEv+0x3c>)
     5aa:	4798      	blx	r3
			isOK=SelfTest();
     5ac:	2301      	movs	r3, #1
     5ae:	7023      	strb	r3, [r4, #0]
     5b0:	e7f1      	b.n	596 <_ZN18SingleHeater_Class4InitEv+0x12>
     5b2:	bf00      	nop
     5b4:	0000db01 	.word	0x0000db01
     5b8:	00000559 	.word	0x00000559
     5bc:	0000dd7d 	.word	0x0000dd7d
     5c0:	0000ddc1 	.word	0x0000ddc1

000005c4 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
     5c4:	b538      	push	{r3, r4, r5, lr}
     5c6:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
     5c8:	68c0      	ldr	r0, [r0, #12]
     5ca:	4b09      	ldr	r3, [pc, #36]	; (5f0 <_ZN18SingleHeater_Class10ReadStatusEv+0x2c>)
     5cc:	4798      	blx	r3
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
     5ce:	4605      	mov	r5, r0
     5d0:	f000 0301 	and.w	r3, r0, #1
     5d4:	70a3      	strb	r3, [r4, #2]
     5d6:	1ce1      	adds	r1, r4, #3
     5d8:	2301      	movs	r3, #1
	for (uint8_t i = 0; i < 4; i++)
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
     5da:	fa45 f203 	asr.w	r2, r5, r3
     5de:	f002 0201 	and.w	r2, r2, #1
     5e2:	f801 2b01 	strb.w	r2, [r1], #1
     5e6:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 4; i++)
     5e8:	2b05      	cmp	r3, #5
     5ea:	d1f6      	bne.n	5da <_ZN18SingleHeater_Class10ReadStatusEv+0x16>
	}
	return r;
}
     5ec:	bd38      	pop	{r3, r4, r5, pc}
     5ee:	bf00      	nop
     5f0:	0000dcfd 	.word	0x0000dcfd

000005f4 <_ZN18SingleHeater_Class6EnableEh>:
uint8_t	SingleHeater_Class::Enable(uint8_t indexHeater){
     5f4:	b510      	push	{r4, lr}
     5f6:	4604      	mov	r4, r0
	enabled=expanders[1]->WriteDigit(indexHeater,true);
     5f8:	2201      	movs	r2, #1
     5fa:	6900      	ldr	r0, [r0, #16]
     5fc:	4b01      	ldr	r3, [pc, #4]	; (604 <_ZN18SingleHeater_Class6EnableEh+0x10>)
     5fe:	4798      	blx	r3
     600:	72e0      	strb	r0, [r4, #11]
	return uint8_t(enabled);
}
     602:	bd10      	pop	{r4, pc}
     604:	0000deb9 	.word	0x0000deb9

00000608 <_ZN18SingleHeater_Class7DisableEh>:
uint8_t	SingleHeater_Class::Disable(uint8_t indexHeater){
     608:	b510      	push	{r4, lr}
     60a:	4604      	mov	r4, r0
	enabled=expanders[1]->WriteDigit(indexHeater,false)?false:true;
     60c:	2200      	movs	r2, #0
     60e:	6900      	ldr	r0, [r0, #16]
     610:	4b03      	ldr	r3, [pc, #12]	; (620 <_ZN18SingleHeater_Class7DisableEh+0x18>)
     612:	4798      	blx	r3
     614:	f080 0001 	eor.w	r0, r0, #1
     618:	b2c0      	uxtb	r0, r0
     61a:	72e0      	strb	r0, [r4, #11]
	return uint8_t(enabled);
}
     61c:	bd10      	pop	{r4, pc}
     61e:	bf00      	nop
     620:	0000deb9 	.word	0x0000deb9

00000624 <_GLOBAL__sub_I_ptrSingleHeaterClass>:



bool SingleHeater_Class::SelfTest(void){
	return true;
}
     624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
     626:	4c0c      	ldr	r4, [pc, #48]	; (658 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x34>)
     628:	f104 053c 	add.w	r5, r4, #60	; 0x3c
     62c:	490b      	ldr	r1, [pc, #44]	; (65c <_GLOBAL__sub_I_ptrSingleHeaterClass+0x38>)
     62e:	4628      	mov	r0, r5
     630:	4b0b      	ldr	r3, [pc, #44]	; (660 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x3c>)
     632:	4798      	blx	r3
     634:	4e0b      	ldr	r6, [pc, #44]	; (664 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x40>)
     636:	4632      	mov	r2, r6
     638:	490b      	ldr	r1, [pc, #44]	; (668 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x44>)
     63a:	4628      	mov	r0, r5
     63c:	4d0b      	ldr	r5, [pc, #44]	; (66c <_GLOBAL__sub_I_ptrSingleHeaterClass+0x48>)
     63e:	47a8      	blx	r5
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     640:	4620      	mov	r0, r4
     642:	4f0b      	ldr	r7, [pc, #44]	; (670 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x4c>)
     644:	47b8      	blx	r7
     646:	f104 001c 	add.w	r0, r4, #28
     64a:	47b8      	blx	r7
     64c:	4632      	mov	r2, r6
     64e:	4909      	ldr	r1, [pc, #36]	; (674 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x50>)
     650:	2000      	movs	r0, #0
     652:	47a8      	blx	r5
     654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     656:	bf00      	nop
     658:	20000644 	.word	0x20000644
     65c:	200011f0 	.word	0x200011f0
     660:	0000dad1 	.word	0x0000dad1
     664:	20000000 	.word	0x20000000
     668:	0000daed 	.word	0x0000daed
     66c:	0000f8d5 	.word	0x0000f8d5
     670:	0000dbed 	.word	0x0000dbed
     674:	00000529 	.word	0x00000529

00000678 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     678:	4b02      	ldr	r3, [pc, #8]	; (684 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     67a:	681a      	ldr	r2, [r3, #0]
     67c:	6813      	ldr	r3, [r2, #0]
     67e:	3301      	adds	r3, #1
     680:	6013      	str	r3, [r2, #0]
     682:	4770      	bx	lr
     684:	20000694 	.word	0x20000694

00000688 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     688:	4b02      	ldr	r3, [pc, #8]	; (694 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     68a:	681b      	ldr	r3, [r3, #0]
     68c:	2200      	movs	r2, #0
     68e:	711a      	strb	r2, [r3, #4]
     690:	4770      	bx	lr
     692:	bf00      	nop
     694:	20000694 	.word	0x20000694

00000698 <_ZN16Maintenance_ToolC1Ev>:


// default constructor
Maintenance_Tool::Maintenance_Tool()
{
	ptrMaintenanceTool=this;
     698:	4a04      	ldr	r2, [pc, #16]	; (6ac <_ZN16Maintenance_ToolC1Ev+0x14>)
     69a:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
     69c:	2200      	movs	r2, #0
     69e:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
	nextMaintenanceSyncTime = 0;
     6a2:	6542      	str	r2, [r0, #84]	; 0x54
	nextMaintenanceUsageTimerSyncTime = 0;
     6a4:	6582      	str	r2, [r0, #88]	; 0x58
	ticks=0;
     6a6:	6002      	str	r2, [r0, #0]
	
} //Maintenance_Tool
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	20000694 	.word	0x20000694

000006b0 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     6b0:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     6b2:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
		if (isConnected)
     6b6:	b919      	cbnz	r1, 6c0 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     6b8:	4805      	ldr	r0, [pc, #20]	; (6d0 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     6ba:	4b06      	ldr	r3, [pc, #24]	; (6d4 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     6bc:	4798      	blx	r3
     6be:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     6c0:	f64e 2260 	movw	r2, #60000	; 0xea60
     6c4:	4904      	ldr	r1, [pc, #16]	; (6d8 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     6c6:	4802      	ldr	r0, [pc, #8]	; (6d0 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     6c8:	4b04      	ldr	r3, [pc, #16]	; (6dc <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     6ca:	4798      	blx	r3
     6cc:	bd08      	pop	{r3, pc}
     6ce:	bf00      	nop
     6d0:	20001054 	.word	0x20001054
     6d4:	0000f465 	.word	0x0000f465
     6d8:	00000689 	.word	0x00000689
     6dc:	0000f545 	.word	0x0000f545

000006e0 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     6e0:	b510      	push	{r4, lr}
     6e2:	4604      	mov	r4, r0
	result=false;
     6e4:	2300      	movs	r3, #0
     6e6:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
	magic=0;
     6ea:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
	if (gotAccess==true)
     6ee:	f890 3109 	ldrb.w	r3, [r0, #265]	; 0x109
     6f2:	b12b      	cbz	r3, 700 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     6f4:	2301      	movs	r3, #1
     6f6:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
	return	result;
     6fa:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
}
     6fe:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     700:	4b13      	ldr	r3, [pc, #76]	; (750 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     702:	7d5b      	ldrb	r3, [r3, #21]
     704:	b18b      	cbz	r3, 72a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x4a>
     706:	1d43      	adds	r3, r0, #5
     708:	3009      	adds	r0, #9
     70a:	2200      	movs	r2, #0
				magic|= localBuffer[i];
     70c:	f813 1b01 	ldrb.w	r1, [r3], #1
     710:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			for (int i = 0; i < 4; i++)
     714:	4283      	cmp	r3, r0
     716:	d1f9      	bne.n	70c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2c>
     718:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     71c:	4b0d      	ldr	r3, [pc, #52]	; (754 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
     71e:	ea82 0103 	eor.w	r1, r2, r3
     722:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
			if (xorResult==0)
     726:	429a      	cmp	r2, r3
     728:	d005      	beq.n	736 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x56>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     72a:	2240      	movs	r2, #64	; 0x40
     72c:	1d61      	adds	r1, r4, #5
     72e:	4808      	ldr	r0, [pc, #32]	; (750 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     730:	4b09      	ldr	r3, [pc, #36]	; (758 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
     732:	4798      	blx	r3
     734:	e7e1      	b.n	6fa <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     736:	2101      	movs	r1, #1
     738:	f884 1109 	strb.w	r1, [r4, #265]	; 0x109
				result=true;
     73c:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
				is_MTPC_Beaming=true;
     740:	7121      	strb	r1, [r4, #4]
				setConnected(true);
     742:	4620      	mov	r0, r4
     744:	4b05      	ldr	r3, [pc, #20]	; (75c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     746:	4798      	blx	r3
				return	result;
     748:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
     74c:	bd10      	pop	{r4, pc}
     74e:	bf00      	nop
     750:	20000f7c 	.word	0x20000f7c
     754:	61626364 	.word	0x61626364
     758:	0000ec05 	.word	0x0000ec05
     75c:	000006b1 	.word	0x000006b1

00000760 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     760:	b410      	push	{r4}
     762:	1d02      	adds	r2, r0, #4
     764:	2301      	movs	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     766:	2400      	movs	r4, #0
     768:	f802 4f01 	strb.w	r4, [r2, #1]!
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     76c:	b2d9      	uxtb	r1, r3
     76e:	3301      	adds	r3, #1
     770:	2b41      	cmp	r3, #65	; 0x41
     772:	d1f9      	bne.n	768 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
     774:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
	}
	return	i;
}
     778:	4608      	mov	r0, r1
     77a:	bc10      	pop	{r4}
     77c:	4770      	bx	lr

0000077e <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     77e:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
     782:	b92b      	cbnz	r3, 790 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     784:	6543      	str	r3, [r0, #84]	; 0x54
		maintenanceIsConnected = true;
     786:	2301      	movs	r3, #1
     788:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
		bSendNotifications = true;
     78c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     790:	f890 0108 	ldrb.w	r0, [r0, #264]	; 0x108
     794:	4770      	bx	lr
	...

00000798 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader>:

	uint32_t	w,r;
	
	
	bool	result(header.command == kGAINCommandWriteParameters);
	if (result){
     798:	790b      	ldrb	r3, [r1, #4]
     79a:	2b47      	cmp	r3, #71	; 0x47
     79c:	d001      	beq.n	7a2 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0xa>
	bool	result(header.command == kGAINCommandWriteParameters);
     79e:	2000      	movs	r0, #0
     7a0:	4770      	bx	lr
bool Maintenance_Tool::handleGAINCommandWriteParameters(HVACMessageHeader& header)	{
     7a2:	b570      	push	{r4, r5, r6, lr}
     7a4:	4604      	mov	r4, r0
		int n=sizeof(HVACMessageHeader)+1;
		flash.eraseFlash((uint32_t)&flashLayout->parameters,sizeof(UserParameters));
     7a6:	4e0c      	ldr	r6, [pc, #48]	; (7d8 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x40>)
     7a8:	6831      	ldr	r1, [r6, #0]
     7aa:	4d0c      	ldr	r5, [pc, #48]	; (7dc <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x44>)
     7ac:	2201      	movs	r2, #1
     7ae:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
     7b2:	4628      	mov	r0, r5
     7b4:	4b0a      	ldr	r3, [pc, #40]	; (7e0 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x48>)
     7b6:	4798      	blx	r3
			
		memcpy((uint8_t*)&parameters,&localBuffer[n+1],sizeof(UserParameters));
     7b8:	7be3      	ldrb	r3, [r4, #15]
     7ba:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
		//uint32_t add=(uint32_t)&framMemory->parameters;
		uint32_t add=(uint32_t)&flashLayout->parameters;
     7be:	6832      	ldr	r2, [r6, #0]
		r=flash.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     7c0:	2301      	movs	r3, #1
     7c2:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     7c6:	f504 7188 	add.w	r1, r4, #272	; 0x110
     7ca:	4628      	mov	r0, r5
     7cc:	4c05      	ldr	r4, [pc, #20]	; (7e4 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x4c>)
     7ce:	47a0      	blx	r4
		//	r=fram.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
			result=(bool)(r==0);
     7d0:	fab0 f080 	clz	r0, r0
     7d4:	0940      	lsrs	r0, r0, #5
     7d6:	bd70      	pop	{r4, r5, r6, pc}
     7d8:	20000d50 	.word	0x20000d50
     7dc:	20000d54 	.word	0x20000d54
     7e0:	0000e209 	.word	0x0000e209
     7e4:	0000e4ad 	.word	0x0000e4ad

000007e8 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     7e8:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     7ea:	0855      	lsrs	r5, r2, #1
     7ec:	d007      	beq.n	7fe <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     7ee:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     7f0:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     7f4:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     7f6:	3401      	adds	r4, #1
     7f8:	b2a4      	uxth	r4, r4
     7fa:	42ac      	cmp	r4, r5
     7fc:	dbf8      	blt.n	7f0 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     7fe:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     802:	bf1d      	ittte	ne
     804:	189b      	addne	r3, r3, r2
     806:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     80a:	4048      	eorne	r0, r1
     80c:	4608      	moveq	r0, r1

	return checksum;
	}
     80e:	bc30      	pop	{r4, r5}
     810:	4770      	bx	lr
	...

00000814 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     814:	b538      	push	{r3, r4, r5, lr}
     816:	4604      	mov	r4, r0
	checksum=0;
     818:	2500      	movs	r5, #0
     81a:	f8a0 510c 	strh.w	r5, [r0, #268]	; 0x10c
	checksum = calculateChecksum(0, sizeof(header), &header);
     81e:	460b      	mov	r3, r1
     820:	2208      	movs	r2, #8
     822:	4629      	mov	r1, r5
     824:	4d02      	ldr	r5, [pc, #8]	; (830 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     826:	47a8      	blx	r5
     828:	f8a4 010c 	strh.w	r0, [r4, #268]	; 0x10c
	}
     82c:	bd38      	pop	{r3, r4, r5, pc}
     82e:	bf00      	nop
     830:	000007e9 	.word	0x000007e9

00000834 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
	}
	return	ticks;
}

void Maintenance_Tool::GetCPUSerialNumber(uint8_t* buffer)
{
     834:	b410      	push	{r4}
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
     836:	2200      	movs	r2, #0
     838:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     83c:	4c07      	ldr	r4, [pc, #28]	; (85c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     83e:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
     842:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (i = 0; i < 4; i++)
     846:	f890 312c 	ldrb.w	r3, [r0, #300]	; 0x12c
     84a:	3301      	adds	r3, #1
     84c:	b2db      	uxtb	r3, r3
     84e:	f880 312c 	strb.w	r3, [r0, #300]	; 0x12c
     852:	461a      	mov	r2, r3
     854:	2b03      	cmp	r3, #3
     856:	ddf2      	ble.n	83e <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0xa>
	}

     858:	bc10      	pop	{r4}
     85a:	4770      	bx	lr
     85c:	41002018 	.word	0x41002018

00000860 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     862:	4604      	mov	r4, r0
	ticks=0;
     864:	2600      	movs	r6, #0
     866:	6006      	str	r6, [r0, #0]
	interfaceTimer.Init();
     868:	4d12      	ldr	r5, [pc, #72]	; (8b4 <_ZN16Maintenance_Tool4InitEv+0x54>)
     86a:	4628      	mov	r0, r5
     86c:	4b12      	ldr	r3, [pc, #72]	; (8b8 <_ZN16Maintenance_Tool4InitEv+0x58>)
     86e:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     874:	4911      	ldr	r1, [pc, #68]	; (8bc <_ZN16Maintenance_Tool4InitEv+0x5c>)
     876:	4628      	mov	r0, r5
     878:	4b11      	ldr	r3, [pc, #68]	; (8c0 <_ZN16Maintenance_Tool4InitEv+0x60>)
     87a:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     87c:	f504 7589 	add.w	r5, r4, #274	; 0x112
     880:	4629      	mov	r1, r5
     882:	4620      	mov	r0, r4
     884:	4b0f      	ldr	r3, [pc, #60]	; (8c4 <_ZN16Maintenance_Tool4InitEv+0x64>)
     886:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     888:	f8d4 7112 	ldr.w	r7, [r4, #274]	; 0x112
     88c:	f8d4 0116 	ldr.w	r0, [r4, #278]	; 0x116
     890:	f8d4 111a 	ldr.w	r1, [r4, #282]	; 0x11a
     894:	f8d4 211e 	ldr.w	r2, [r4, #286]	; 0x11e
     898:	f8c4 7005 	str.w	r7, [r4, #5]
     89c:	f8c4 0009 	str.w	r0, [r4, #9]
     8a0:	f8c4 100d 	str.w	r1, [r4, #13]
     8a4:	f8c4 2011 	str.w	r2, [r4, #17]
	gotAccess=false;
     8a8:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
}
     8ac:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
     8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8b2:	bf00      	nop
     8b4:	20001054 	.word	0x20001054
     8b8:	0000f409 	.word	0x0000f409
     8bc:	00000679 	.word	0x00000679
     8c0:	0000f4f5 	.word	0x0000f4f5
     8c4:	00000835 	.word	0x00000835

000008c8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     8c8:	b538      	push	{r3, r4, r5, lr}
     8ca:	4605      	mov	r5, r0
     8cc:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     8ce:	4b05      	ldr	r3, [pc, #20]	; (8e4 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     8d0:	4798      	blx	r3
     8d2:	f8a5 010c 	strh.w	r0, [r5, #268]	; 0x10c
	usb.writeData(&header, sizeof(header));
     8d6:	2208      	movs	r2, #8
     8d8:	4621      	mov	r1, r4
     8da:	4803      	ldr	r0, [pc, #12]	; (8e8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     8dc:	4b03      	ldr	r3, [pc, #12]	; (8ec <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     8de:	4798      	blx	r3
     8e0:	bd38      	pop	{r3, r4, r5, pc}
     8e2:	bf00      	nop
     8e4:	00000815 	.word	0x00000815
     8e8:	20000f7c 	.word	0x20000f7c
     8ec:	0000ecf1 	.word	0x0000ecf1

000008f0 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader>:
bool Maintenance_Tool::handleGAINCommandReadParameters(HVACMessageHeader& header){
     8f0:	b538      	push	{r3, r4, r5, lr}
		if (result){
     8f2:	790b      	ldrb	r3, [r1, #4]
     8f4:	2b48      	cmp	r3, #72	; 0x48
     8f6:	d001      	beq.n	8fc <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0xc>
	 	bool	result(header.command == kGAINCommandReadParameters);
     8f8:	2000      	movs	r0, #0
     8fa:	bd38      	pop	{r3, r4, r5, pc}
     8fc:	4604      	mov	r4, r0
			uint32_t add=(uint32_t)&flashLayout->parameters;
     8fe:	4b0d      	ldr	r3, [pc, #52]	; (934 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x44>)
     900:	681a      	ldr	r2, [r3, #0]
			r=flash.ReadAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     902:	2301      	movs	r3, #1
     904:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     908:	f500 7188 	add.w	r1, r0, #272	; 0x110
     90c:	480a      	ldr	r0, [pc, #40]	; (938 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x48>)
     90e:	4d0b      	ldr	r5, [pc, #44]	; (93c <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x4c>)
     910:	47a8      	blx	r5
			 if (r>0)
     912:	b908      	cbnz	r0, 918 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x28>
	 	bool	result(header.command == kGAINCommandReadParameters);
     914:	2001      	movs	r0, #1
}
     916:	bd38      	pop	{r3, r4, r5, pc}
				memcpy((uint8_t*)&localBuffer[n+1],(void*)&parameters,sizeof(UserParameters));
     918:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
     91c:	73e3      	strb	r3, [r4, #15]
				delay_us(1);
     91e:	2001      	movs	r0, #1
     920:	4b07      	ldr	r3, [pc, #28]	; (940 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x50>)
     922:	4798      	blx	r3
				 usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     924:	2240      	movs	r2, #64	; 0x40
     926:	1d61      	adds	r1, r4, #5
     928:	4806      	ldr	r0, [pc, #24]	; (944 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x54>)
     92a:	4b07      	ldr	r3, [pc, #28]	; (948 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x58>)
     92c:	4798      	blx	r3
				 result=w>0;
     92e:	2000      	movs	r0, #0
     930:	bd38      	pop	{r3, r4, r5, pc}
     932:	bf00      	nop
     934:	20000d50 	.word	0x20000d50
     938:	20000d54 	.word	0x20000d54
     93c:	0000e58d 	.word	0x0000e58d
     940:	0000221d 	.word	0x0000221d
     944:	20000f7c 	.word	0x20000f7c
     948:	0000ed89 	.word	0x0000ed89

0000094c <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
     94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     94e:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
     950:	f100 06a4 	add.w	r6, r0, #164	; 0xa4
     954:	4605      	mov	r5, r0
     956:	f855 2f05 	ldr.w	r2, [r5, #5]!
     95a:	686b      	ldr	r3, [r5, #4]
     95c:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
     960:	6073      	str	r3, [r6, #4]
	&& (header.task<kGAINNumberOfCommands))
     962:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
     966:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
     968:	b2db      	uxtb	r3, r3
     96a:	2b0e      	cmp	r3, #14
     96c:	d813      	bhi.n	996 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x4a>
		gotTask=true;
     96e:	2301      	movs	r3, #1
     970:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
		result=gotTask;
     974:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
		switch (header.command)
     978:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
     97c:	3b41      	subs	r3, #65	; 0x41
     97e:	2b0e      	cmp	r3, #14
     980:	d84e      	bhi.n	a20 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xd4>
     982:	e8df f003 	tbb	[pc, r3]
     986:	211a      	.short	0x211a
     988:	17172717 	.word	0x17172717
     98c:	173e3730 	.word	0x173e3730
     990:	4d4d1717 	.word	0x4d4d1717
     994:	17          	.byte	0x17
     995:	00          	.byte	0x00
		gotTask=false;
     996:	2300      	movs	r3, #0
     998:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     99c:	4f22      	ldr	r7, [pc, #136]	; (a28 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xdc>)
     99e:	2240      	movs	r2, #64	; 0x40
     9a0:	4629      	mov	r1, r5
     9a2:	4638      	mov	r0, r7
     9a4:	4b21      	ldr	r3, [pc, #132]	; (a2c <_ZN16Maintenance_Tool14handleHVACTaskEv+0xe0>)
     9a6:	4798      	blx	r3
		result=usb.rxReady;
     9a8:	7d7b      	ldrb	r3, [r7, #21]
     9aa:	b2db      	uxtb	r3, r3
     9ac:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (result)
     9b0:	2b00      	cmp	r3, #0
     9b2:	d1e1      	bne.n	978 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
     9b4:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
     9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				result = handleGAINCommandConnect( header);
     9ba:	4631      	mov	r1, r6
     9bc:	4620      	mov	r0, r4
     9be:	4b1c      	ldr	r3, [pc, #112]	; (a30 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xe4>)
     9c0:	4798      	blx	r3
     9c2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
				break;
     9c6:	e7f5      	b.n	9b4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
	maintenanceIsConnected = false;
     9c8:	2300      	movs	r3, #0
     9ca:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	bSendNotifications = false;
     9ce:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
				break;
     9d2:	e7ef      	b.n	9b4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				notifyGAINCommandReceived( header, result);
     9d4:	2201      	movs	r2, #1
     9d6:	4631      	mov	r1, r6
     9d8:	4620      	mov	r0, r4
     9da:	4b16      	ldr	r3, [pc, #88]	; (a34 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xe8>)
     9dc:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     9de:	2301      	movs	r3, #1
     9e0:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
				break;
     9e4:	e7e6      	b.n	9b4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = handleGAINCommandWriteParameters( header);
     9e6:	4631      	mov	r1, r6
     9e8:	4620      	mov	r0, r4
     9ea:	4b13      	ldr	r3, [pc, #76]	; (a38 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xec>)
     9ec:	4798      	blx	r3
     9ee:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
			break;
     9f2:	e7df      	b.n	9b4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = handleGAINCommandReadParameters( header);
     9f4:	4631      	mov	r1, r6
     9f6:	4620      	mov	r0, r4
     9f8:	4b10      	ldr	r3, [pc, #64]	; (a3c <_ZN16Maintenance_Tool14handleHVACTaskEv+0xf0>)
     9fa:	4798      	blx	r3
     9fc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
			break;
     a00:	e7d8      	b.n	9b4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     a02:	6828      	ldr	r0, [r5, #0]
     a04:	6869      	ldr	r1, [r5, #4]
     a06:	68aa      	ldr	r2, [r5, #8]
     a08:	64a0      	str	r0, [r4, #72]	; 0x48
     a0a:	64e1      	str	r1, [r4, #76]	; 0x4c
     a0c:	6522      	str	r2, [r4, #80]	; 0x50
	bool	result(header.task == kHVACCommandSetHeaters);
     a0e:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
     a12:	2b49      	cmp	r3, #73	; 0x49
     a14:	bf14      	ite	ne
     a16:	2300      	movne	r3, #0
     a18:	2301      	moveq	r3, #1
     a1a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
				break;
     a1e:	e7c9      	b.n	9b4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = false;
     a20:	2300      	movs	r3, #0
     a22:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
				break;
     a26:	e7c5      	b.n	9b4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
     a28:	20000f7c 	.word	0x20000f7c
     a2c:	0000ec05 	.word	0x0000ec05
     a30:	0000077f 	.word	0x0000077f
     a34:	000008c9 	.word	0x000008c9
     a38:	00000799 	.word	0x00000799
     a3c:	000008f1 	.word	0x000008f1

00000a40 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a42:	4604      	mov	r4, r0
	result=false;
     a44:	2300      	movs	r3, #0
     a46:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
	if (gotAccess)
     a4a:	f890 3109 	ldrb.w	r3, [r0, #265]	; 0x109
     a4e:	2b00      	cmp	r3, #0
     a50:	d04c      	beq.n	aec <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>
		if (usb.rxReady)
     a52:	4b28      	ldr	r3, [pc, #160]	; (af4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     a54:	7d5b      	ldrb	r3, [r3, #21]
     a56:	b953      	cbnz	r3, a6e <_ZN16Maintenance_Tool19handleCommunicationEv+0x2e>
			gotCommand=false;
     a58:	2300      	movs	r3, #0
     a5a:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a5e:	2240      	movs	r2, #64	; 0x40
     a60:	1d61      	adds	r1, r4, #5
     a62:	4824      	ldr	r0, [pc, #144]	; (af4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     a64:	4b24      	ldr	r3, [pc, #144]	; (af8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     a66:	4798      	blx	r3
	}
     a68:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
     a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
     a6e:	4603      	mov	r3, r0
     a70:	f853 2f05 	ldr.w	r2, [r3, #5]!
     a74:	685b      	ldr	r3, [r3, #4]
     a76:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
     a7a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
			switch (input){
     a7e:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
     a82:	2b3d      	cmp	r3, #61	; 0x3d
     a84:	d017      	beq.n	ab6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x76>
     a86:	2b3e      	cmp	r3, #62	; 0x3e
     a88:	d010      	beq.n	aac <_ZN16Maintenance_Tool19handleCommunicationEv+0x6c>
     a8a:	2b3c      	cmp	r3, #60	; 0x3c
     a8c:	d003      	beq.n	a96 <_ZN16Maintenance_Tool19handleCommunicationEv+0x56>
					gotCommand=false;
     a8e:	2300      	movs	r3, #0
     a90:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
				break;
     a94:	e006      	b.n	aa4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					gotCommand=true;
     a96:	2301      	movs	r3, #1
     a98:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
					result = handleHVACTask();
     a9c:	4b17      	ldr	r3, [pc, #92]	; (afc <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     a9e:	4798      	blx	r3
     aa0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
			ClearLocalBuffer();
     aa4:	4620      	mov	r0, r4
     aa6:	4b16      	ldr	r3, [pc, #88]	; (b00 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     aa8:	4798      	blx	r3
     aaa:	e7d8      	b.n	a5e <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
     aac:	4b13      	ldr	r3, [pc, #76]	; (afc <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     aae:	4798      	blx	r3
     ab0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
				break;
     ab4:	e7f6      	b.n	aa4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					is_MTPC_Beaming=true;
     ab6:	2501      	movs	r5, #1
     ab8:	7105      	strb	r5, [r0, #4]
					interfaceTimer.Stop();
     aba:	4e12      	ldr	r6, [pc, #72]	; (b04 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     abc:	4630      	mov	r0, r6
     abe:	4b12      	ldr	r3, [pc, #72]	; (b08 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
     ac0:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     ac2:	4f12      	ldr	r7, [pc, #72]	; (b0c <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
     ac4:	4639      	mov	r1, r7
     ac6:	4630      	mov	r0, r6
     ac8:	4b11      	ldr	r3, [pc, #68]	; (b10 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
     aca:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
     acc:	f242 7210 	movw	r2, #10000	; 0x2710
     ad0:	4639      	mov	r1, r7
     ad2:	4630      	mov	r0, r6
     ad4:	4b0f      	ldr	r3, [pc, #60]	; (b14 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
     ad6:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     ad8:	2300      	movs	r3, #0
     ada:	6563      	str	r3, [r4, #84]	; 0x54
					maintenanceIsConnected = true;
     adc:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
					bSendNotifications = true;
     ae0:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
					result=is_MTPC_Beaming;
     ae4:	7923      	ldrb	r3, [r4, #4]
     ae6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
				break;
     aea:	e7db      	b.n	aa4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
		gotCommand=false;
     aec:	2300      	movs	r3, #0
     aee:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
     af2:	e7b9      	b.n	a68 <_ZN16Maintenance_Tool19handleCommunicationEv+0x28>
     af4:	20000f7c 	.word	0x20000f7c
     af8:	0000ec05 	.word	0x0000ec05
     afc:	0000094d 	.word	0x0000094d
     b00:	00000761 	.word	0x00000761
     b04:	20001054 	.word	0x20001054
     b08:	0000f465 	.word	0x0000f465
     b0c:	00000689 	.word	0x00000689
     b10:	0000f57d 	.word	0x0000f57d
     b14:	0000f545 	.word	0x0000f545

00000b18 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     b18:	b580      	push	{r7, lr}
     b1a:	af00      	add	r7, sp, #0
	system_init();
     b1c:	4b03      	ldr	r3, [pc, #12]	; (b2c <atmel_start_init+0x14>)
     b1e:	4798      	blx	r3
	usb_init();
     b20:	4b03      	ldr	r3, [pc, #12]	; (b30 <atmel_start_init+0x18>)
     b22:	4798      	blx	r3
	spi_nor_flash_init();
     b24:	4b03      	ldr	r3, [pc, #12]	; (b34 <atmel_start_init+0x1c>)
     b26:	4798      	blx	r3
}
     b28:	bf00      	nop
     b2a:	bd80      	pop	{r7, pc}
     b2c:	00001e8d 	.word	0x00001e8d
     b30:	0000bbfd 	.word	0x0000bbfd
     b34:	0000bb91 	.word	0x0000bb91

00000b38 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     b38:	b480      	push	{r7}
     b3a:	b085      	sub	sp, #20
     b3c:	af00      	add	r7, sp, #0
     b3e:	60f8      	str	r0, [r7, #12]
     b40:	460b      	mov	r3, r1
     b42:	607a      	str	r2, [r7, #4]
     b44:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     b46:	7afa      	ldrb	r2, [r7, #11]
     b48:	68fb      	ldr	r3, [r7, #12]
     b4a:	3220      	adds	r2, #32
     b4c:	6879      	ldr	r1, [r7, #4]
     b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     b52:	bf00      	nop
     b54:	3714      	adds	r7, #20
     b56:	46bd      	mov	sp, r7
     b58:	f85d 7b04 	ldr.w	r7, [sp], #4
     b5c:	4770      	bx	lr

00000b5e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     b5e:	b480      	push	{r7}
     b60:	b083      	sub	sp, #12
     b62:	af00      	add	r7, sp, #0
     b64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	691b      	ldr	r3, [r3, #16]
     b6a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     b6e:	687b      	ldr	r3, [r7, #4]
     b70:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b72:	bf00      	nop
     b74:	370c      	adds	r7, #12
     b76:	46bd      	mov	sp, r7
     b78:	f85d 7b04 	ldr.w	r7, [sp], #4
     b7c:	4770      	bx	lr

00000b7e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     b7e:	b480      	push	{r7}
     b80:	b083      	sub	sp, #12
     b82:	af00      	add	r7, sp, #0
     b84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	691b      	ldr	r3, [r3, #16]
     b8a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     b8e:	687b      	ldr	r3, [r7, #4]
     b90:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b92:	bf00      	nop
     b94:	370c      	adds	r7, #12
     b96:	46bd      	mov	sp, r7
     b98:	f85d 7b04 	ldr.w	r7, [sp], #4
     b9c:	4770      	bx	lr

00000b9e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     b9e:	b480      	push	{r7}
     ba0:	b083      	sub	sp, #12
     ba2:	af00      	add	r7, sp, #0
     ba4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     ba6:	687b      	ldr	r3, [r7, #4]
     ba8:	691b      	ldr	r3, [r3, #16]
     baa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     bae:	687b      	ldr	r3, [r7, #4]
     bb0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bb2:	bf00      	nop
     bb4:	370c      	adds	r7, #12
     bb6:	46bd      	mov	sp, r7
     bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bbc:	4770      	bx	lr

00000bbe <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     bbe:	b480      	push	{r7}
     bc0:	b083      	sub	sp, #12
     bc2:	af00      	add	r7, sp, #0
     bc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     bc6:	687b      	ldr	r3, [r7, #4]
     bc8:	691b      	ldr	r3, [r3, #16]
     bca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bd2:	bf00      	nop
     bd4:	370c      	adds	r7, #12
     bd6:	46bd      	mov	sp, r7
     bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bdc:	4770      	bx	lr

00000bde <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     bde:	b480      	push	{r7}
     be0:	b083      	sub	sp, #12
     be2:	af00      	add	r7, sp, #0
     be4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	695b      	ldr	r3, [r3, #20]
     bea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     bee:	687b      	ldr	r3, [r7, #4]
     bf0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bf2:	bf00      	nop
     bf4:	370c      	adds	r7, #12
     bf6:	46bd      	mov	sp, r7
     bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bfc:	4770      	bx	lr

00000bfe <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     bfe:	b480      	push	{r7}
     c00:	b083      	sub	sp, #12
     c02:	af00      	add	r7, sp, #0
     c04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	695b      	ldr	r3, [r3, #20]
     c0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c12:	bf00      	nop
     c14:	370c      	adds	r7, #12
     c16:	46bd      	mov	sp, r7
     c18:	f85d 7b04 	ldr.w	r7, [sp], #4
     c1c:	4770      	bx	lr

00000c1e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     c1e:	b480      	push	{r7}
     c20:	b083      	sub	sp, #12
     c22:	af00      	add	r7, sp, #0
     c24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	695b      	ldr	r3, [r3, #20]
     c2a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c32:	bf00      	nop
     c34:	370c      	adds	r7, #12
     c36:	46bd      	mov	sp, r7
     c38:	f85d 7b04 	ldr.w	r7, [sp], #4
     c3c:	4770      	bx	lr

00000c3e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     c3e:	b480      	push	{r7}
     c40:	b083      	sub	sp, #12
     c42:	af00      	add	r7, sp, #0
     c44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	695b      	ldr	r3, [r3, #20]
     c4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c52:	bf00      	nop
     c54:	370c      	adds	r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	f85d 7b04 	ldr.w	r7, [sp], #4
     c5c:	4770      	bx	lr

00000c5e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     c5e:	b480      	push	{r7}
     c60:	b083      	sub	sp, #12
     c62:	af00      	add	r7, sp, #0
     c64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	695b      	ldr	r3, [r3, #20]
     c6a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c72:	bf00      	nop
     c74:	370c      	adds	r7, #12
     c76:	46bd      	mov	sp, r7
     c78:	f85d 7b04 	ldr.w	r7, [sp], #4
     c7c:	4770      	bx	lr

00000c7e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     c7e:	b480      	push	{r7}
     c80:	b083      	sub	sp, #12
     c82:	af00      	add	r7, sp, #0
     c84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	699b      	ldr	r3, [r3, #24]
     c8a:	f043 0201 	orr.w	r2, r3, #1
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c92:	bf00      	nop
     c94:	370c      	adds	r7, #12
     c96:	46bd      	mov	sp, r7
     c98:	f85d 7b04 	ldr.w	r7, [sp], #4
     c9c:	4770      	bx	lr

00000c9e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     c9e:	b480      	push	{r7}
     ca0:	b083      	sub	sp, #12
     ca2:	af00      	add	r7, sp, #0
     ca4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	699b      	ldr	r3, [r3, #24]
     caa:	f043 0202 	orr.w	r2, r3, #2
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cb2:	bf00      	nop
     cb4:	370c      	adds	r7, #12
     cb6:	46bd      	mov	sp, r7
     cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cbc:	4770      	bx	lr

00000cbe <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     cbe:	b480      	push	{r7}
     cc0:	b083      	sub	sp, #12
     cc2:	af00      	add	r7, sp, #0
     cc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	699b      	ldr	r3, [r3, #24]
     cca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cd2:	bf00      	nop
     cd4:	370c      	adds	r7, #12
     cd6:	46bd      	mov	sp, r7
     cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cdc:	4770      	bx	lr

00000cde <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     cde:	b480      	push	{r7}
     ce0:	b083      	sub	sp, #12
     ce2:	af00      	add	r7, sp, #0
     ce4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	699b      	ldr	r3, [r3, #24]
     cea:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cf2:	bf00      	nop
     cf4:	370c      	adds	r7, #12
     cf6:	46bd      	mov	sp, r7
     cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cfc:	4770      	bx	lr

00000cfe <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     cfe:	b480      	push	{r7}
     d00:	b083      	sub	sp, #12
     d02:	af00      	add	r7, sp, #0
     d04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	699b      	ldr	r3, [r3, #24]
     d0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d12:	bf00      	nop
     d14:	370c      	adds	r7, #12
     d16:	46bd      	mov	sp, r7
     d18:	f85d 7b04 	ldr.w	r7, [sp], #4
     d1c:	4770      	bx	lr

00000d1e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     d1e:	b480      	push	{r7}
     d20:	b083      	sub	sp, #12
     d22:	af00      	add	r7, sp, #0
     d24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     d26:	687b      	ldr	r3, [r7, #4]
     d28:	699b      	ldr	r3, [r3, #24]
     d2a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d32:	bf00      	nop
     d34:	370c      	adds	r7, #12
     d36:	46bd      	mov	sp, r7
     d38:	f85d 7b04 	ldr.w	r7, [sp], #4
     d3c:	4770      	bx	lr

00000d3e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     d3e:	b480      	push	{r7}
     d40:	b083      	sub	sp, #12
     d42:	af00      	add	r7, sp, #0
     d44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	69db      	ldr	r3, [r3, #28]
     d4a:	f043 0220 	orr.w	r2, r3, #32
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d52:	bf00      	nop
     d54:	370c      	adds	r7, #12
     d56:	46bd      	mov	sp, r7
     d58:	f85d 7b04 	ldr.w	r7, [sp], #4
     d5c:	4770      	bx	lr

00000d5e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     d5e:	b480      	push	{r7}
     d60:	b083      	sub	sp, #12
     d62:	af00      	add	r7, sp, #0
     d64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	69db      	ldr	r3, [r3, #28]
     d6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d72:	bf00      	nop
     d74:	370c      	adds	r7, #12
     d76:	46bd      	mov	sp, r7
     d78:	f85d 7b04 	ldr.w	r7, [sp], #4
     d7c:	4770      	bx	lr

00000d7e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     d7e:	b480      	push	{r7}
     d80:	b083      	sub	sp, #12
     d82:	af00      	add	r7, sp, #0
     d84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	69db      	ldr	r3, [r3, #28]
     d8a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d92:	bf00      	nop
     d94:	370c      	adds	r7, #12
     d96:	46bd      	mov	sp, r7
     d98:	f85d 7b04 	ldr.w	r7, [sp], #4
     d9c:	4770      	bx	lr

00000d9e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     d9e:	b480      	push	{r7}
     da0:	b083      	sub	sp, #12
     da2:	af00      	add	r7, sp, #0
     da4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	6a1b      	ldr	r3, [r3, #32]
     daa:	f043 0201 	orr.w	r2, r3, #1
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     db2:	bf00      	nop
     db4:	370c      	adds	r7, #12
     db6:	46bd      	mov	sp, r7
     db8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbc:	4770      	bx	lr

00000dbe <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     dbe:	b480      	push	{r7}
     dc0:	b083      	sub	sp, #12
     dc2:	af00      	add	r7, sp, #0
     dc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	6a1b      	ldr	r3, [r3, #32]
     dca:	f043 0202 	orr.w	r2, r3, #2
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     dd2:	bf00      	nop
     dd4:	370c      	adds	r7, #12
     dd6:	46bd      	mov	sp, r7
     dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
     ddc:	4770      	bx	lr

00000dde <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     dde:	b480      	push	{r7}
     de0:	b083      	sub	sp, #12
     de2:	af00      	add	r7, sp, #0
     de4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	6a1b      	ldr	r3, [r3, #32]
     dea:	f043 0204 	orr.w	r2, r3, #4
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     df2:	bf00      	nop
     df4:	370c      	adds	r7, #12
     df6:	46bd      	mov	sp, r7
     df8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dfc:	4770      	bx	lr

00000dfe <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     dfe:	b480      	push	{r7}
     e00:	b083      	sub	sp, #12
     e02:	af00      	add	r7, sp, #0
     e04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	6a1b      	ldr	r3, [r3, #32]
     e0a:	f043 0208 	orr.w	r2, r3, #8
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e12:	bf00      	nop
     e14:	370c      	adds	r7, #12
     e16:	46bd      	mov	sp, r7
     e18:	f85d 7b04 	ldr.w	r7, [sp], #4
     e1c:	4770      	bx	lr

00000e1e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     e1e:	b480      	push	{r7}
     e20:	b083      	sub	sp, #12
     e22:	af00      	add	r7, sp, #0
     e24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     e26:	687b      	ldr	r3, [r7, #4]
     e28:	6a1b      	ldr	r3, [r3, #32]
     e2a:	f043 0220 	orr.w	r2, r3, #32
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e32:	bf00      	nop
     e34:	370c      	adds	r7, #12
     e36:	46bd      	mov	sp, r7
     e38:	f85d 7b04 	ldr.w	r7, [sp], #4
     e3c:	4770      	bx	lr

00000e3e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     e3e:	b480      	push	{r7}
     e40:	b083      	sub	sp, #12
     e42:	af00      	add	r7, sp, #0
     e44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     e46:	687b      	ldr	r3, [r7, #4]
     e48:	6a1b      	ldr	r3, [r3, #32]
     e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e52:	bf00      	nop
     e54:	370c      	adds	r7, #12
     e56:	46bd      	mov	sp, r7
     e58:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5c:	4770      	bx	lr

00000e5e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     e5e:	b480      	push	{r7}
     e60:	b085      	sub	sp, #20
     e62:	af00      	add	r7, sp, #0
     e64:	60f8      	str	r0, [r7, #12]
     e66:	460b      	mov	r3, r1
     e68:	607a      	str	r2, [r7, #4]
     e6a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e6c:	7afb      	ldrb	r3, [r7, #11]
     e6e:	68fa      	ldr	r2, [r7, #12]
     e70:	01db      	lsls	r3, r3, #7
     e72:	4413      	add	r3, r2
     e74:	3308      	adds	r3, #8
     e76:	687a      	ldr	r2, [r7, #4]
     e78:	601a      	str	r2, [r3, #0]
}
     e7a:	bf00      	nop
     e7c:	3714      	adds	r7, #20
     e7e:	46bd      	mov	sp, r7
     e80:	f85d 7b04 	ldr.w	r7, [sp], #4
     e84:	4770      	bx	lr

00000e86 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     e86:	b480      	push	{r7}
     e88:	b085      	sub	sp, #20
     e8a:	af00      	add	r7, sp, #0
     e8c:	60f8      	str	r0, [r7, #12]
     e8e:	460b      	mov	r3, r1
     e90:	607a      	str	r2, [r7, #4]
     e92:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e94:	7afb      	ldrb	r3, [r7, #11]
     e96:	68fa      	ldr	r2, [r7, #12]
     e98:	01db      	lsls	r3, r3, #7
     e9a:	4413      	add	r3, r2
     e9c:	3304      	adds	r3, #4
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	601a      	str	r2, [r3, #0]
}
     ea2:	bf00      	nop
     ea4:	3714      	adds	r7, #20
     ea6:	46bd      	mov	sp, r7
     ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
     eac:	4770      	bx	lr

00000eae <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     eae:	b480      	push	{r7}
     eb0:	b085      	sub	sp, #20
     eb2:	af00      	add	r7, sp, #0
     eb4:	60f8      	str	r0, [r7, #12]
     eb6:	460b      	mov	r3, r1
     eb8:	607a      	str	r2, [r7, #4]
     eba:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ebc:	7afb      	ldrb	r3, [r7, #11]
     ebe:	68fa      	ldr	r2, [r7, #12]
     ec0:	01db      	lsls	r3, r3, #7
     ec2:	4413      	add	r3, r2
     ec4:	3318      	adds	r3, #24
     ec6:	687a      	ldr	r2, [r7, #4]
     ec8:	601a      	str	r2, [r3, #0]
}
     eca:	bf00      	nop
     ecc:	3714      	adds	r7, #20
     ece:	46bd      	mov	sp, r7
     ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ed4:	4770      	bx	lr

00000ed6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     ed6:	b480      	push	{r7}
     ed8:	b085      	sub	sp, #20
     eda:	af00      	add	r7, sp, #0
     edc:	60f8      	str	r0, [r7, #12]
     ede:	460b      	mov	r3, r1
     ee0:	607a      	str	r2, [r7, #4]
     ee2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ee4:	7afb      	ldrb	r3, [r7, #11]
     ee6:	68fa      	ldr	r2, [r7, #12]
     ee8:	01db      	lsls	r3, r3, #7
     eea:	4413      	add	r3, r2
     eec:	3314      	adds	r3, #20
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	601a      	str	r2, [r3, #0]
}
     ef2:	bf00      	nop
     ef4:	3714      	adds	r7, #20
     ef6:	46bd      	mov	sp, r7
     ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
     efc:	4770      	bx	lr

00000efe <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     efe:	b480      	push	{r7}
     f00:	b085      	sub	sp, #20
     f02:	af00      	add	r7, sp, #0
     f04:	6078      	str	r0, [r7, #4]
     f06:	4608      	mov	r0, r1
     f08:	4611      	mov	r1, r2
     f0a:	461a      	mov	r2, r3
     f0c:	4603      	mov	r3, r0
     f0e:	70fb      	strb	r3, [r7, #3]
     f10:	460b      	mov	r3, r1
     f12:	70bb      	strb	r3, [r7, #2]
     f14:	4613      	mov	r3, r2
     f16:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f18:	78fa      	ldrb	r2, [r7, #3]
     f1a:	78bb      	ldrb	r3, [r7, #2]
     f1c:	6879      	ldr	r1, [r7, #4]
     f1e:	01d2      	lsls	r2, r2, #7
     f20:	440a      	add	r2, r1
     f22:	4413      	add	r3, r2
     f24:	3330      	adds	r3, #48	; 0x30
     f26:	781b      	ldrb	r3, [r3, #0]
     f28:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f2a:	7bfb      	ldrb	r3, [r7, #15]
     f2c:	f023 030f 	bic.w	r3, r3, #15
     f30:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     f32:	787b      	ldrb	r3, [r7, #1]
     f34:	f003 030f 	and.w	r3, r3, #15
     f38:	b2da      	uxtb	r2, r3
     f3a:	7bfb      	ldrb	r3, [r7, #15]
     f3c:	4313      	orrs	r3, r2
     f3e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f40:	78fa      	ldrb	r2, [r7, #3]
     f42:	78bb      	ldrb	r3, [r7, #2]
     f44:	6879      	ldr	r1, [r7, #4]
     f46:	01d2      	lsls	r2, r2, #7
     f48:	440a      	add	r2, r1
     f4a:	4413      	add	r3, r2
     f4c:	3330      	adds	r3, #48	; 0x30
     f4e:	7bfa      	ldrb	r2, [r7, #15]
     f50:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f52:	bf00      	nop
     f54:	3714      	adds	r7, #20
     f56:	46bd      	mov	sp, r7
     f58:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5c:	4770      	bx	lr

00000f5e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     f5e:	b480      	push	{r7}
     f60:	b085      	sub	sp, #20
     f62:	af00      	add	r7, sp, #0
     f64:	6078      	str	r0, [r7, #4]
     f66:	4608      	mov	r0, r1
     f68:	4611      	mov	r1, r2
     f6a:	461a      	mov	r2, r3
     f6c:	4603      	mov	r3, r0
     f6e:	70fb      	strb	r3, [r7, #3]
     f70:	460b      	mov	r3, r1
     f72:	70bb      	strb	r3, [r7, #2]
     f74:	4613      	mov	r3, r2
     f76:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f78:	78fa      	ldrb	r2, [r7, #3]
     f7a:	78bb      	ldrb	r3, [r7, #2]
     f7c:	6879      	ldr	r1, [r7, #4]
     f7e:	01d2      	lsls	r2, r2, #7
     f80:	440a      	add	r2, r1
     f82:	4413      	add	r3, r2
     f84:	3330      	adds	r3, #48	; 0x30
     f86:	781b      	ldrb	r3, [r3, #0]
     f88:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f8a:	7bfb      	ldrb	r3, [r7, #15]
     f8c:	f003 030f 	and.w	r3, r3, #15
     f90:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     f92:	787b      	ldrb	r3, [r7, #1]
     f94:	011b      	lsls	r3, r3, #4
     f96:	b2da      	uxtb	r2, r3
     f98:	7bfb      	ldrb	r3, [r7, #15]
     f9a:	4313      	orrs	r3, r2
     f9c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f9e:	78fa      	ldrb	r2, [r7, #3]
     fa0:	78bb      	ldrb	r3, [r7, #2]
     fa2:	6879      	ldr	r1, [r7, #4]
     fa4:	01d2      	lsls	r2, r2, #7
     fa6:	440a      	add	r2, r1
     fa8:	4413      	add	r3, r2
     faa:	3330      	adds	r3, #48	; 0x30
     fac:	7bfa      	ldrb	r2, [r7, #15]
     fae:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     fb0:	bf00      	nop
     fb2:	3714      	adds	r7, #20
     fb4:	46bd      	mov	sp, r7
     fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
     fba:	4770      	bx	lr

00000fbc <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     fbc:	b480      	push	{r7}
     fbe:	b085      	sub	sp, #20
     fc0:	af00      	add	r7, sp, #0
     fc2:	6078      	str	r0, [r7, #4]
     fc4:	4608      	mov	r0, r1
     fc6:	4611      	mov	r1, r2
     fc8:	461a      	mov	r2, r3
     fca:	4603      	mov	r3, r0
     fcc:	70fb      	strb	r3, [r7, #3]
     fce:	460b      	mov	r3, r1
     fd0:	70bb      	strb	r3, [r7, #2]
     fd2:	4613      	mov	r3, r2
     fd4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fd6:	78fa      	ldrb	r2, [r7, #3]
     fd8:	78bb      	ldrb	r3, [r7, #2]
     fda:	6879      	ldr	r1, [r7, #4]
     fdc:	01d2      	lsls	r2, r2, #7
     fde:	440a      	add	r2, r1
     fe0:	4413      	add	r3, r2
     fe2:	3340      	adds	r3, #64	; 0x40
     fe4:	781b      	ldrb	r3, [r3, #0]
     fe6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fe8:	7bfb      	ldrb	r3, [r7, #15]
     fea:	f023 0301 	bic.w	r3, r3, #1
     fee:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ff0:	787a      	ldrb	r2, [r7, #1]
     ff2:	7bfb      	ldrb	r3, [r7, #15]
     ff4:	4313      	orrs	r3, r2
     ff6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff8:	78fa      	ldrb	r2, [r7, #3]
     ffa:	78bb      	ldrb	r3, [r7, #2]
     ffc:	6879      	ldr	r1, [r7, #4]
     ffe:	01d2      	lsls	r2, r2, #7
    1000:	440a      	add	r2, r1
    1002:	4413      	add	r3, r2
    1004:	3340      	adds	r3, #64	; 0x40
    1006:	7bfa      	ldrb	r2, [r7, #15]
    1008:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    100a:	bf00      	nop
    100c:	3714      	adds	r7, #20
    100e:	46bd      	mov	sp, r7
    1010:	f85d 7b04 	ldr.w	r7, [sp], #4
    1014:	4770      	bx	lr

00001016 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1016:	b490      	push	{r4, r7}
    1018:	b082      	sub	sp, #8
    101a:	af00      	add	r7, sp, #0
    101c:	6078      	str	r0, [r7, #4]
    101e:	460b      	mov	r3, r1
    1020:	70fb      	strb	r3, [r7, #3]
    1022:	4613      	mov	r3, r2
    1024:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1026:	78fa      	ldrb	r2, [r7, #3]
    1028:	78bb      	ldrb	r3, [r7, #2]
    102a:	78f8      	ldrb	r0, [r7, #3]
    102c:	78b9      	ldrb	r1, [r7, #2]
    102e:	687c      	ldr	r4, [r7, #4]
    1030:	01c0      	lsls	r0, r0, #7
    1032:	4420      	add	r0, r4
    1034:	4401      	add	r1, r0
    1036:	3140      	adds	r1, #64	; 0x40
    1038:	7809      	ldrb	r1, [r1, #0]
    103a:	b2c9      	uxtb	r1, r1
    103c:	f041 0104 	orr.w	r1, r1, #4
    1040:	b2c8      	uxtb	r0, r1
    1042:	6879      	ldr	r1, [r7, #4]
    1044:	01d2      	lsls	r2, r2, #7
    1046:	440a      	add	r2, r1
    1048:	4413      	add	r3, r2
    104a:	3340      	adds	r3, #64	; 0x40
    104c:	4602      	mov	r2, r0
    104e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1050:	bf00      	nop
    1052:	3708      	adds	r7, #8
    1054:	46bd      	mov	sp, r7
    1056:	bc90      	pop	{r4, r7}
    1058:	4770      	bx	lr

0000105a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    105a:	b490      	push	{r4, r7}
    105c:	b082      	sub	sp, #8
    105e:	af00      	add	r7, sp, #0
    1060:	6078      	str	r0, [r7, #4]
    1062:	460b      	mov	r3, r1
    1064:	70fb      	strb	r3, [r7, #3]
    1066:	4613      	mov	r3, r2
    1068:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    106a:	78fa      	ldrb	r2, [r7, #3]
    106c:	78bb      	ldrb	r3, [r7, #2]
    106e:	78f8      	ldrb	r0, [r7, #3]
    1070:	78b9      	ldrb	r1, [r7, #2]
    1072:	687c      	ldr	r4, [r7, #4]
    1074:	01c0      	lsls	r0, r0, #7
    1076:	4420      	add	r0, r4
    1078:	4401      	add	r1, r0
    107a:	3140      	adds	r1, #64	; 0x40
    107c:	7809      	ldrb	r1, [r1, #0]
    107e:	b2c9      	uxtb	r1, r1
    1080:	f021 0104 	bic.w	r1, r1, #4
    1084:	b2c8      	uxtb	r0, r1
    1086:	6879      	ldr	r1, [r7, #4]
    1088:	01d2      	lsls	r2, r2, #7
    108a:	440a      	add	r2, r1
    108c:	4413      	add	r3, r2
    108e:	3340      	adds	r3, #64	; 0x40
    1090:	4602      	mov	r2, r0
    1092:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1094:	bf00      	nop
    1096:	3708      	adds	r7, #8
    1098:	46bd      	mov	sp, r7
    109a:	bc90      	pop	{r4, r7}
    109c:	4770      	bx	lr

0000109e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    109e:	b480      	push	{r7}
    10a0:	b085      	sub	sp, #20
    10a2:	af00      	add	r7, sp, #0
    10a4:	60f8      	str	r0, [r7, #12]
    10a6:	460b      	mov	r3, r1
    10a8:	607a      	str	r2, [r7, #4]
    10aa:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10ac:	7afb      	ldrb	r3, [r7, #11]
    10ae:	68fa      	ldr	r2, [r7, #12]
    10b0:	01db      	lsls	r3, r3, #7
    10b2:	4413      	add	r3, r2
    10b4:	3328      	adds	r3, #40	; 0x28
    10b6:	687a      	ldr	r2, [r7, #4]
    10b8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    10ba:	bf00      	nop
    10bc:	3714      	adds	r7, #20
    10be:	46bd      	mov	sp, r7
    10c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    10c4:	4770      	bx	lr
	...

000010c8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    10c8:	b580      	push	{r7, lr}
    10ca:	b082      	sub	sp, #8
    10cc:	af00      	add	r7, sp, #0
    10ce:	4603      	mov	r3, r0
    10d0:	6039      	str	r1, [r7, #0]
    10d2:	71fb      	strb	r3, [r7, #7]
    10d4:	4613      	mov	r3, r2
    10d6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    10d8:	79bb      	ldrb	r3, [r7, #6]
    10da:	2b01      	cmp	r3, #1
    10dc:	d01c      	beq.n	1118 <_gpio_set_direction+0x50>
    10de:	2b02      	cmp	r3, #2
    10e0:	d037      	beq.n	1152 <_gpio_set_direction+0x8a>
    10e2:	2b00      	cmp	r3, #0
    10e4:	d14e      	bne.n	1184 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    10e6:	79fb      	ldrb	r3, [r7, #7]
    10e8:	683a      	ldr	r2, [r7, #0]
    10ea:	4619      	mov	r1, r3
    10ec:	482a      	ldr	r0, [pc, #168]	; (1198 <_gpio_set_direction+0xd0>)
    10ee:	4b2b      	ldr	r3, [pc, #172]	; (119c <_gpio_set_direction+0xd4>)
    10f0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    10f2:	683b      	ldr	r3, [r7, #0]
    10f4:	b29b      	uxth	r3, r3
    10f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    10fa:	79fb      	ldrb	r3, [r7, #7]
    10fc:	4619      	mov	r1, r3
    10fe:	4826      	ldr	r0, [pc, #152]	; (1198 <_gpio_set_direction+0xd0>)
    1100:	4b27      	ldr	r3, [pc, #156]	; (11a0 <_gpio_set_direction+0xd8>)
    1102:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1104:	683b      	ldr	r3, [r7, #0]
    1106:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1108:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    110c:	79fb      	ldrb	r3, [r7, #7]
    110e:	4619      	mov	r1, r3
    1110:	4821      	ldr	r0, [pc, #132]	; (1198 <_gpio_set_direction+0xd0>)
    1112:	4b23      	ldr	r3, [pc, #140]	; (11a0 <_gpio_set_direction+0xd8>)
    1114:	4798      	blx	r3
		break;
    1116:	e03a      	b.n	118e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1118:	79fb      	ldrb	r3, [r7, #7]
    111a:	683a      	ldr	r2, [r7, #0]
    111c:	4619      	mov	r1, r3
    111e:	481e      	ldr	r0, [pc, #120]	; (1198 <_gpio_set_direction+0xd0>)
    1120:	4b1e      	ldr	r3, [pc, #120]	; (119c <_gpio_set_direction+0xd4>)
    1122:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1124:	683b      	ldr	r3, [r7, #0]
    1126:	b29b      	uxth	r3, r3
    1128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1130:	79f9      	ldrb	r1, [r7, #7]
    1132:	461a      	mov	r2, r3
    1134:	4818      	ldr	r0, [pc, #96]	; (1198 <_gpio_set_direction+0xd0>)
    1136:	4b1a      	ldr	r3, [pc, #104]	; (11a0 <_gpio_set_direction+0xd8>)
    1138:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    113a:	683b      	ldr	r3, [r7, #0]
    113c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    113e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1146:	79f9      	ldrb	r1, [r7, #7]
    1148:	461a      	mov	r2, r3
    114a:	4813      	ldr	r0, [pc, #76]	; (1198 <_gpio_set_direction+0xd0>)
    114c:	4b14      	ldr	r3, [pc, #80]	; (11a0 <_gpio_set_direction+0xd8>)
    114e:	4798      	blx	r3
		break;
    1150:	e01d      	b.n	118e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1152:	79fb      	ldrb	r3, [r7, #7]
    1154:	683a      	ldr	r2, [r7, #0]
    1156:	4619      	mov	r1, r3
    1158:	480f      	ldr	r0, [pc, #60]	; (1198 <_gpio_set_direction+0xd0>)
    115a:	4b12      	ldr	r3, [pc, #72]	; (11a4 <_gpio_set_direction+0xdc>)
    115c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    115e:	683b      	ldr	r3, [r7, #0]
    1160:	b29b      	uxth	r3, r3
    1162:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1166:	79fb      	ldrb	r3, [r7, #7]
    1168:	4619      	mov	r1, r3
    116a:	480b      	ldr	r0, [pc, #44]	; (1198 <_gpio_set_direction+0xd0>)
    116c:	4b0c      	ldr	r3, [pc, #48]	; (11a0 <_gpio_set_direction+0xd8>)
    116e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1170:	683b      	ldr	r3, [r7, #0]
    1172:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1174:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1178:	79fb      	ldrb	r3, [r7, #7]
    117a:	4619      	mov	r1, r3
    117c:	4806      	ldr	r0, [pc, #24]	; (1198 <_gpio_set_direction+0xd0>)
    117e:	4b08      	ldr	r3, [pc, #32]	; (11a0 <_gpio_set_direction+0xd8>)
    1180:	4798      	blx	r3
		break;
    1182:	e004      	b.n	118e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1184:	2246      	movs	r2, #70	; 0x46
    1186:	4908      	ldr	r1, [pc, #32]	; (11a8 <_gpio_set_direction+0xe0>)
    1188:	2000      	movs	r0, #0
    118a:	4b08      	ldr	r3, [pc, #32]	; (11ac <_gpio_set_direction+0xe4>)
    118c:	4798      	blx	r3
	}
}
    118e:	bf00      	nop
    1190:	3708      	adds	r7, #8
    1192:	46bd      	mov	sp, r7
    1194:	bd80      	pop	{r7, pc}
    1196:	bf00      	nop
    1198:	41008000 	.word	0x41008000
    119c:	00000e87 	.word	0x00000e87
    11a0:	0000109f 	.word	0x0000109f
    11a4:	00000e5f 	.word	0x00000e5f
    11a8:	0000fdbc 	.word	0x0000fdbc
    11ac:	00003ab1 	.word	0x00003ab1

000011b0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    11b0:	b580      	push	{r7, lr}
    11b2:	b082      	sub	sp, #8
    11b4:	af00      	add	r7, sp, #0
    11b6:	4603      	mov	r3, r0
    11b8:	6039      	str	r1, [r7, #0]
    11ba:	71fb      	strb	r3, [r7, #7]
    11bc:	4613      	mov	r3, r2
    11be:	71bb      	strb	r3, [r7, #6]
	if (level) {
    11c0:	79bb      	ldrb	r3, [r7, #6]
    11c2:	2b00      	cmp	r3, #0
    11c4:	d006      	beq.n	11d4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    11c6:	79fb      	ldrb	r3, [r7, #7]
    11c8:	683a      	ldr	r2, [r7, #0]
    11ca:	4619      	mov	r1, r3
    11cc:	4806      	ldr	r0, [pc, #24]	; (11e8 <_gpio_set_level+0x38>)
    11ce:	4b07      	ldr	r3, [pc, #28]	; (11ec <_gpio_set_level+0x3c>)
    11d0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    11d2:	e005      	b.n	11e0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    11d4:	79fb      	ldrb	r3, [r7, #7]
    11d6:	683a      	ldr	r2, [r7, #0]
    11d8:	4619      	mov	r1, r3
    11da:	4803      	ldr	r0, [pc, #12]	; (11e8 <_gpio_set_level+0x38>)
    11dc:	4b04      	ldr	r3, [pc, #16]	; (11f0 <_gpio_set_level+0x40>)
    11de:	4798      	blx	r3
}
    11e0:	bf00      	nop
    11e2:	3708      	adds	r7, #8
    11e4:	46bd      	mov	sp, r7
    11e6:	bd80      	pop	{r7, pc}
    11e8:	41008000 	.word	0x41008000
    11ec:	00000eaf 	.word	0x00000eaf
    11f0:	00000ed7 	.word	0x00000ed7

000011f4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    11f4:	b580      	push	{r7, lr}
    11f6:	b082      	sub	sp, #8
    11f8:	af00      	add	r7, sp, #0
    11fa:	4603      	mov	r3, r0
    11fc:	71fb      	strb	r3, [r7, #7]
    11fe:	460b      	mov	r3, r1
    1200:	71bb      	strb	r3, [r7, #6]
    1202:	4613      	mov	r3, r2
    1204:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1206:	797b      	ldrb	r3, [r7, #5]
    1208:	2b01      	cmp	r3, #1
    120a:	d00a      	beq.n	1222 <_gpio_set_pin_pull_mode+0x2e>
    120c:	2b02      	cmp	r3, #2
    120e:	d01f      	beq.n	1250 <_gpio_set_pin_pull_mode+0x5c>
    1210:	2b00      	cmp	r3, #0
    1212:	d134      	bne.n	127e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1214:	79ba      	ldrb	r2, [r7, #6]
    1216:	79fb      	ldrb	r3, [r7, #7]
    1218:	4619      	mov	r1, r3
    121a:	481e      	ldr	r0, [pc, #120]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    121c:	4b1e      	ldr	r3, [pc, #120]	; (1298 <_gpio_set_pin_pull_mode+0xa4>)
    121e:	4798      	blx	r3
		break;
    1220:	e033      	b.n	128a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1222:	79bb      	ldrb	r3, [r7, #6]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	79fb      	ldrb	r3, [r7, #7]
    122a:	4619      	mov	r1, r3
    122c:	4819      	ldr	r0, [pc, #100]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    122e:	4b1b      	ldr	r3, [pc, #108]	; (129c <_gpio_set_pin_pull_mode+0xa8>)
    1230:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1232:	79ba      	ldrb	r2, [r7, #6]
    1234:	79fb      	ldrb	r3, [r7, #7]
    1236:	4619      	mov	r1, r3
    1238:	4816      	ldr	r0, [pc, #88]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    123a:	4b19      	ldr	r3, [pc, #100]	; (12a0 <_gpio_set_pin_pull_mode+0xac>)
    123c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    123e:	79bb      	ldrb	r3, [r7, #6]
    1240:	2201      	movs	r2, #1
    1242:	409a      	lsls	r2, r3
    1244:	79fb      	ldrb	r3, [r7, #7]
    1246:	4619      	mov	r1, r3
    1248:	4812      	ldr	r0, [pc, #72]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    124a:	4b16      	ldr	r3, [pc, #88]	; (12a4 <_gpio_set_pin_pull_mode+0xb0>)
    124c:	4798      	blx	r3
		break;
    124e:	e01c      	b.n	128a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1250:	79bb      	ldrb	r3, [r7, #6]
    1252:	2201      	movs	r2, #1
    1254:	409a      	lsls	r2, r3
    1256:	79fb      	ldrb	r3, [r7, #7]
    1258:	4619      	mov	r1, r3
    125a:	480e      	ldr	r0, [pc, #56]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    125c:	4b0f      	ldr	r3, [pc, #60]	; (129c <_gpio_set_pin_pull_mode+0xa8>)
    125e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1260:	79ba      	ldrb	r2, [r7, #6]
    1262:	79fb      	ldrb	r3, [r7, #7]
    1264:	4619      	mov	r1, r3
    1266:	480b      	ldr	r0, [pc, #44]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    1268:	4b0d      	ldr	r3, [pc, #52]	; (12a0 <_gpio_set_pin_pull_mode+0xac>)
    126a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    126c:	79bb      	ldrb	r3, [r7, #6]
    126e:	2201      	movs	r2, #1
    1270:	409a      	lsls	r2, r3
    1272:	79fb      	ldrb	r3, [r7, #7]
    1274:	4619      	mov	r1, r3
    1276:	4807      	ldr	r0, [pc, #28]	; (1294 <_gpio_set_pin_pull_mode+0xa0>)
    1278:	4b0b      	ldr	r3, [pc, #44]	; (12a8 <_gpio_set_pin_pull_mode+0xb4>)
    127a:	4798      	blx	r3
		break;
    127c:	e005      	b.n	128a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    127e:	2289      	movs	r2, #137	; 0x89
    1280:	490a      	ldr	r1, [pc, #40]	; (12ac <_gpio_set_pin_pull_mode+0xb8>)
    1282:	2000      	movs	r0, #0
    1284:	4b0a      	ldr	r3, [pc, #40]	; (12b0 <_gpio_set_pin_pull_mode+0xbc>)
    1286:	4798      	blx	r3
		break;
    1288:	bf00      	nop
	}
}
    128a:	bf00      	nop
    128c:	3708      	adds	r7, #8
    128e:	46bd      	mov	sp, r7
    1290:	bd80      	pop	{r7, pc}
    1292:	bf00      	nop
    1294:	41008000 	.word	0x41008000
    1298:	0000105b 	.word	0x0000105b
    129c:	00000e87 	.word	0x00000e87
    12a0:	00001017 	.word	0x00001017
    12a4:	00000eaf 	.word	0x00000eaf
    12a8:	00000ed7 	.word	0x00000ed7
    12ac:	0000fdbc 	.word	0x0000fdbc
    12b0:	00003ab1 	.word	0x00003ab1

000012b4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    12b4:	b590      	push	{r4, r7, lr}
    12b6:	b085      	sub	sp, #20
    12b8:	af00      	add	r7, sp, #0
    12ba:	6078      	str	r0, [r7, #4]
    12bc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	095b      	lsrs	r3, r3, #5
    12c2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    12c4:	687b      	ldr	r3, [r7, #4]
    12c6:	b2db      	uxtb	r3, r3
    12c8:	f003 031f 	and.w	r3, r3, #31
    12cc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    12ce:	683b      	ldr	r3, [r7, #0]
    12d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    12d4:	d106      	bne.n	12e4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    12d6:	7bba      	ldrb	r2, [r7, #14]
    12d8:	7bf9      	ldrb	r1, [r7, #15]
    12da:	2300      	movs	r3, #0
    12dc:	4812      	ldr	r0, [pc, #72]	; (1328 <_gpio_set_pin_function+0x74>)
    12de:	4c13      	ldr	r4, [pc, #76]	; (132c <_gpio_set_pin_function+0x78>)
    12e0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    12e2:	e01d      	b.n	1320 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    12e4:	7bba      	ldrb	r2, [r7, #14]
    12e6:	7bf9      	ldrb	r1, [r7, #15]
    12e8:	2301      	movs	r3, #1
    12ea:	480f      	ldr	r0, [pc, #60]	; (1328 <_gpio_set_pin_function+0x74>)
    12ec:	4c0f      	ldr	r4, [pc, #60]	; (132c <_gpio_set_pin_function+0x78>)
    12ee:	47a0      	blx	r4
		if (pin & 1) {
    12f0:	7bbb      	ldrb	r3, [r7, #14]
    12f2:	f003 0301 	and.w	r3, r3, #1
    12f6:	2b00      	cmp	r3, #0
    12f8:	d009      	beq.n	130e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    12fa:	7bbb      	ldrb	r3, [r7, #14]
    12fc:	085b      	lsrs	r3, r3, #1
    12fe:	b2da      	uxtb	r2, r3
    1300:	683b      	ldr	r3, [r7, #0]
    1302:	b2db      	uxtb	r3, r3
    1304:	7bf9      	ldrb	r1, [r7, #15]
    1306:	4808      	ldr	r0, [pc, #32]	; (1328 <_gpio_set_pin_function+0x74>)
    1308:	4c09      	ldr	r4, [pc, #36]	; (1330 <_gpio_set_pin_function+0x7c>)
    130a:	47a0      	blx	r4
}
    130c:	e008      	b.n	1320 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    130e:	7bbb      	ldrb	r3, [r7, #14]
    1310:	085b      	lsrs	r3, r3, #1
    1312:	b2da      	uxtb	r2, r3
    1314:	683b      	ldr	r3, [r7, #0]
    1316:	b2db      	uxtb	r3, r3
    1318:	7bf9      	ldrb	r1, [r7, #15]
    131a:	4803      	ldr	r0, [pc, #12]	; (1328 <_gpio_set_pin_function+0x74>)
    131c:	4c05      	ldr	r4, [pc, #20]	; (1334 <_gpio_set_pin_function+0x80>)
    131e:	47a0      	blx	r4
}
    1320:	bf00      	nop
    1322:	3714      	adds	r7, #20
    1324:	46bd      	mov	sp, r7
    1326:	bd90      	pop	{r4, r7, pc}
    1328:	41008000 	.word	0x41008000
    132c:	00000fbd 	.word	0x00000fbd
    1330:	00000f5f 	.word	0x00000f5f
    1334:	00000eff 	.word	0x00000eff

00001338 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1338:	b580      	push	{r7, lr}
    133a:	b082      	sub	sp, #8
    133c:	af00      	add	r7, sp, #0
    133e:	4603      	mov	r3, r0
    1340:	460a      	mov	r2, r1
    1342:	71fb      	strb	r3, [r7, #7]
    1344:	4613      	mov	r3, r2
    1346:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1348:	79fb      	ldrb	r3, [r7, #7]
    134a:	095b      	lsrs	r3, r3, #5
    134c:	b2d8      	uxtb	r0, r3
    134e:	79fb      	ldrb	r3, [r7, #7]
    1350:	f003 031f 	and.w	r3, r3, #31
    1354:	b2db      	uxtb	r3, r3
    1356:	79ba      	ldrb	r2, [r7, #6]
    1358:	4619      	mov	r1, r3
    135a:	4b03      	ldr	r3, [pc, #12]	; (1368 <gpio_set_pin_pull_mode+0x30>)
    135c:	4798      	blx	r3
}
    135e:	bf00      	nop
    1360:	3708      	adds	r7, #8
    1362:	46bd      	mov	sp, r7
    1364:	bd80      	pop	{r7, pc}
    1366:	bf00      	nop
    1368:	000011f5 	.word	0x000011f5

0000136c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    136c:	b580      	push	{r7, lr}
    136e:	b082      	sub	sp, #8
    1370:	af00      	add	r7, sp, #0
    1372:	6078      	str	r0, [r7, #4]
    1374:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1376:	6839      	ldr	r1, [r7, #0]
    1378:	6878      	ldr	r0, [r7, #4]
    137a:	4b03      	ldr	r3, [pc, #12]	; (1388 <gpio_set_pin_function+0x1c>)
    137c:	4798      	blx	r3
}
    137e:	bf00      	nop
    1380:	3708      	adds	r7, #8
    1382:	46bd      	mov	sp, r7
    1384:	bd80      	pop	{r7, pc}
    1386:	bf00      	nop
    1388:	000012b5 	.word	0x000012b5

0000138c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    138c:	b580      	push	{r7, lr}
    138e:	b082      	sub	sp, #8
    1390:	af00      	add	r7, sp, #0
    1392:	4603      	mov	r3, r0
    1394:	460a      	mov	r2, r1
    1396:	71fb      	strb	r3, [r7, #7]
    1398:	4613      	mov	r3, r2
    139a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    139c:	79fb      	ldrb	r3, [r7, #7]
    139e:	095b      	lsrs	r3, r3, #5
    13a0:	b2d8      	uxtb	r0, r3
    13a2:	79fb      	ldrb	r3, [r7, #7]
    13a4:	f003 031f 	and.w	r3, r3, #31
    13a8:	2201      	movs	r2, #1
    13aa:	fa02 f303 	lsl.w	r3, r2, r3
    13ae:	79ba      	ldrb	r2, [r7, #6]
    13b0:	4619      	mov	r1, r3
    13b2:	4b03      	ldr	r3, [pc, #12]	; (13c0 <gpio_set_pin_direction+0x34>)
    13b4:	4798      	blx	r3
}
    13b6:	bf00      	nop
    13b8:	3708      	adds	r7, #8
    13ba:	46bd      	mov	sp, r7
    13bc:	bd80      	pop	{r7, pc}
    13be:	bf00      	nop
    13c0:	000010c9 	.word	0x000010c9

000013c4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    13c4:	b580      	push	{r7, lr}
    13c6:	b082      	sub	sp, #8
    13c8:	af00      	add	r7, sp, #0
    13ca:	4603      	mov	r3, r0
    13cc:	460a      	mov	r2, r1
    13ce:	71fb      	strb	r3, [r7, #7]
    13d0:	4613      	mov	r3, r2
    13d2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    13d4:	79fb      	ldrb	r3, [r7, #7]
    13d6:	095b      	lsrs	r3, r3, #5
    13d8:	b2d8      	uxtb	r0, r3
    13da:	79fb      	ldrb	r3, [r7, #7]
    13dc:	f003 031f 	and.w	r3, r3, #31
    13e0:	2201      	movs	r2, #1
    13e2:	fa02 f303 	lsl.w	r3, r2, r3
    13e6:	79ba      	ldrb	r2, [r7, #6]
    13e8:	4619      	mov	r1, r3
    13ea:	4b03      	ldr	r3, [pc, #12]	; (13f8 <gpio_set_pin_level+0x34>)
    13ec:	4798      	blx	r3
}
    13ee:	bf00      	nop
    13f0:	3708      	adds	r7, #8
    13f2:	46bd      	mov	sp, r7
    13f4:	bd80      	pop	{r7, pc}
    13f6:	bf00      	nop
    13f8:	000011b1 	.word	0x000011b1

000013fc <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    13fc:	b580      	push	{r7, lr}
    13fe:	af00      	add	r7, sp, #0
	_init_chip();
    1400:	4b01      	ldr	r3, [pc, #4]	; (1408 <init_mcu+0xc>)
    1402:	4798      	blx	r3
}
    1404:	bf00      	nop
    1406:	bd80      	pop	{r7, pc}
    1408:	000046bd 	.word	0x000046bd

0000140c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    140c:	b580      	push	{r7, lr}
    140e:	b082      	sub	sp, #8
    1410:	af00      	add	r7, sp, #0
    1412:	6078      	str	r0, [r7, #4]
    1414:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1416:	687b      	ldr	r3, [r7, #4]
    1418:	2b00      	cmp	r3, #0
    141a:	d004      	beq.n	1426 <wdt_init+0x1a>
    141c:	683b      	ldr	r3, [r7, #0]
    141e:	2b00      	cmp	r3, #0
    1420:	d001      	beq.n	1426 <wdt_init+0x1a>
    1422:	2301      	movs	r3, #1
    1424:	e000      	b.n	1428 <wdt_init+0x1c>
    1426:	2300      	movs	r3, #0
    1428:	f003 0301 	and.w	r3, r3, #1
    142c:	b2db      	uxtb	r3, r3
    142e:	2248      	movs	r2, #72	; 0x48
    1430:	4907      	ldr	r1, [pc, #28]	; (1450 <wdt_init+0x44>)
    1432:	4618      	mov	r0, r3
    1434:	4b07      	ldr	r3, [pc, #28]	; (1454 <wdt_init+0x48>)
    1436:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1438:	687b      	ldr	r3, [r7, #4]
    143a:	683a      	ldr	r2, [r7, #0]
    143c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	4618      	mov	r0, r3
    1442:	4b05      	ldr	r3, [pc, #20]	; (1458 <wdt_init+0x4c>)
    1444:	4798      	blx	r3
    1446:	4603      	mov	r3, r0
}
    1448:	4618      	mov	r0, r3
    144a:	3708      	adds	r7, #8
    144c:	46bd      	mov	sp, r7
    144e:	bd80      	pop	{r7, pc}
    1450:	0000fdd8 	.word	0x0000fdd8
    1454:	00003ab1 	.word	0x00003ab1
    1458:	0000b635 	.word	0x0000b635

0000145c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    145c:	b580      	push	{r7, lr}
    145e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1460:	4804      	ldr	r0, [pc, #16]	; (1474 <CRC_CALC_init+0x18>)
    1462:	4b05      	ldr	r3, [pc, #20]	; (1478 <CRC_CALC_init+0x1c>)
    1464:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1466:	4905      	ldr	r1, [pc, #20]	; (147c <CRC_CALC_init+0x20>)
    1468:	4805      	ldr	r0, [pc, #20]	; (1480 <CRC_CALC_init+0x24>)
    146a:	4b06      	ldr	r3, [pc, #24]	; (1484 <CRC_CALC_init+0x28>)
    146c:	4798      	blx	r3
}
    146e:	bf00      	nop
    1470:	bd80      	pop	{r7, pc}
    1472:	bf00      	nop
    1474:	40000800 	.word	0x40000800
    1478:	00000c9f 	.word	0x00000c9f
    147c:	41002000 	.word	0x41002000
    1480:	200012b4 	.word	0x200012b4
    1484:	000021d1 	.word	0x000021d1

00001488 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1488:	b580      	push	{r7, lr}
    148a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    148c:	2244      	movs	r2, #68	; 0x44
    148e:	2104      	movs	r1, #4
    1490:	4838      	ldr	r0, [pc, #224]	; (1574 <EXTERNAL_IRQ_0_init+0xec>)
    1492:	4b39      	ldr	r3, [pc, #228]	; (1578 <EXTERNAL_IRQ_0_init+0xf0>)
    1494:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1496:	4839      	ldr	r0, [pc, #228]	; (157c <EXTERNAL_IRQ_0_init+0xf4>)
    1498:	4b39      	ldr	r3, [pc, #228]	; (1580 <EXTERNAL_IRQ_0_init+0xf8>)
    149a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    149c:	2101      	movs	r1, #1
    149e:	2040      	movs	r0, #64	; 0x40
    14a0:	4b38      	ldr	r3, [pc, #224]	; (1584 <EXTERNAL_IRQ_0_init+0xfc>)
    14a2:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    14a4:	2100      	movs	r1, #0
    14a6:	2040      	movs	r0, #64	; 0x40
    14a8:	4b37      	ldr	r3, [pc, #220]	; (1588 <EXTERNAL_IRQ_0_init+0x100>)
    14aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    14ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    14b0:	2040      	movs	r0, #64	; 0x40
    14b2:	4b36      	ldr	r3, [pc, #216]	; (158c <EXTERNAL_IRQ_0_init+0x104>)
    14b4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    14b6:	2101      	movs	r1, #1
    14b8:	2003      	movs	r0, #3
    14ba:	4b32      	ldr	r3, [pc, #200]	; (1584 <EXTERNAL_IRQ_0_init+0xfc>)
    14bc:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    14be:	2102      	movs	r1, #2
    14c0:	2003      	movs	r0, #3
    14c2:	4b31      	ldr	r3, [pc, #196]	; (1588 <EXTERNAL_IRQ_0_init+0x100>)
    14c4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    14c6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    14ca:	2003      	movs	r0, #3
    14cc:	4b2f      	ldr	r3, [pc, #188]	; (158c <EXTERNAL_IRQ_0_init+0x104>)
    14ce:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    14d0:	2101      	movs	r1, #1
    14d2:	2004      	movs	r0, #4
    14d4:	4b2b      	ldr	r3, [pc, #172]	; (1584 <EXTERNAL_IRQ_0_init+0xfc>)
    14d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    14d8:	2102      	movs	r1, #2
    14da:	2004      	movs	r0, #4
    14dc:	4b2a      	ldr	r3, [pc, #168]	; (1588 <EXTERNAL_IRQ_0_init+0x100>)
    14de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    14e0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    14e4:	2004      	movs	r0, #4
    14e6:	4b29      	ldr	r3, [pc, #164]	; (158c <EXTERNAL_IRQ_0_init+0x104>)
    14e8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    14ea:	2101      	movs	r1, #1
    14ec:	2005      	movs	r0, #5
    14ee:	4b25      	ldr	r3, [pc, #148]	; (1584 <EXTERNAL_IRQ_0_init+0xfc>)
    14f0:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    14f2:	2102      	movs	r1, #2
    14f4:	2005      	movs	r0, #5
    14f6:	4b24      	ldr	r3, [pc, #144]	; (1588 <EXTERNAL_IRQ_0_init+0x100>)
    14f8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    14fa:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    14fe:	2005      	movs	r0, #5
    1500:	4b22      	ldr	r3, [pc, #136]	; (158c <EXTERNAL_IRQ_0_init+0x104>)
    1502:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1504:	2101      	movs	r1, #1
    1506:	2056      	movs	r0, #86	; 0x56
    1508:	4b1e      	ldr	r3, [pc, #120]	; (1584 <EXTERNAL_IRQ_0_init+0xfc>)
    150a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    150c:	2102      	movs	r1, #2
    150e:	2056      	movs	r0, #86	; 0x56
    1510:	4b1d      	ldr	r3, [pc, #116]	; (1588 <EXTERNAL_IRQ_0_init+0x100>)
    1512:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1514:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1518:	2056      	movs	r0, #86	; 0x56
    151a:	4b1c      	ldr	r3, [pc, #112]	; (158c <EXTERNAL_IRQ_0_init+0x104>)
    151c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    151e:	2101      	movs	r1, #1
    1520:	2057      	movs	r0, #87	; 0x57
    1522:	4b18      	ldr	r3, [pc, #96]	; (1584 <EXTERNAL_IRQ_0_init+0xfc>)
    1524:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1526:	2102      	movs	r1, #2
    1528:	2057      	movs	r0, #87	; 0x57
    152a:	4b17      	ldr	r3, [pc, #92]	; (1588 <EXTERNAL_IRQ_0_init+0x100>)
    152c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    152e:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1532:	2057      	movs	r0, #87	; 0x57
    1534:	4b15      	ldr	r3, [pc, #84]	; (158c <EXTERNAL_IRQ_0_init+0x104>)
    1536:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1538:	2101      	movs	r1, #1
    153a:	2028      	movs	r0, #40	; 0x28
    153c:	4b11      	ldr	r3, [pc, #68]	; (1584 <EXTERNAL_IRQ_0_init+0xfc>)
    153e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1540:	2100      	movs	r1, #0
    1542:	2028      	movs	r0, #40	; 0x28
    1544:	4b10      	ldr	r3, [pc, #64]	; (1588 <EXTERNAL_IRQ_0_init+0x100>)
    1546:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1548:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    154c:	2028      	movs	r0, #40	; 0x28
    154e:	4b0f      	ldr	r3, [pc, #60]	; (158c <EXTERNAL_IRQ_0_init+0x104>)
    1550:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1552:	2101      	movs	r1, #1
    1554:	2029      	movs	r0, #41	; 0x29
    1556:	4b0b      	ldr	r3, [pc, #44]	; (1584 <EXTERNAL_IRQ_0_init+0xfc>)
    1558:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    155a:	2100      	movs	r1, #0
    155c:	2029      	movs	r0, #41	; 0x29
    155e:	4b0a      	ldr	r3, [pc, #40]	; (1588 <EXTERNAL_IRQ_0_init+0x100>)
    1560:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1562:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1566:	2029      	movs	r0, #41	; 0x29
    1568:	4b08      	ldr	r3, [pc, #32]	; (158c <EXTERNAL_IRQ_0_init+0x104>)
    156a:	4798      	blx	r3

	ext_irq_init();
    156c:	4b08      	ldr	r3, [pc, #32]	; (1590 <EXTERNAL_IRQ_0_init+0x108>)
    156e:	4798      	blx	r3
}
    1570:	bf00      	nop
    1572:	bd80      	pop	{r7, pc}
    1574:	40001c00 	.word	0x40001c00
    1578:	00000b39 	.word	0x00000b39
    157c:	40000800 	.word	0x40000800
    1580:	00000c1f 	.word	0x00000c1f
    1584:	0000138d 	.word	0x0000138d
    1588:	00001339 	.word	0x00001339
    158c:	0000136d 	.word	0x0000136d
    1590:	00002299 	.word	0x00002299

00001594 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1594:	b580      	push	{r7, lr}
    1596:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1598:	2244      	movs	r2, #68	; 0x44
    159a:	210b      	movs	r1, #11
    159c:	4807      	ldr	r0, [pc, #28]	; (15bc <EVENT_SYSTEM_0_init+0x28>)
    159e:	4b08      	ldr	r3, [pc, #32]	; (15c0 <EVENT_SYSTEM_0_init+0x2c>)
    15a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15a2:	2244      	movs	r2, #68	; 0x44
    15a4:	210c      	movs	r1, #12
    15a6:	4805      	ldr	r0, [pc, #20]	; (15bc <EVENT_SYSTEM_0_init+0x28>)
    15a8:	4b05      	ldr	r3, [pc, #20]	; (15c0 <EVENT_SYSTEM_0_init+0x2c>)
    15aa:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    15ac:	4805      	ldr	r0, [pc, #20]	; (15c4 <EVENT_SYSTEM_0_init+0x30>)
    15ae:	4b06      	ldr	r3, [pc, #24]	; (15c8 <EVENT_SYSTEM_0_init+0x34>)
    15b0:	4798      	blx	r3

	event_system_init();
    15b2:	4b06      	ldr	r3, [pc, #24]	; (15cc <EVENT_SYSTEM_0_init+0x38>)
    15b4:	4798      	blx	r3
}
    15b6:	bf00      	nop
    15b8:	bd80      	pop	{r7, pc}
    15ba:	bf00      	nop
    15bc:	40001c00 	.word	0x40001c00
    15c0:	00000b39 	.word	0x00000b39
    15c4:	40000800 	.word	0x40000800
    15c8:	00000cbf 	.word	0x00000cbf
    15cc:	00002285 	.word	0x00002285

000015d0 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    15d4:	2101      	movs	r1, #1
    15d6:	202b      	movs	r0, #43	; 0x2b
    15d8:	4b2b      	ldr	r3, [pc, #172]	; (1688 <QSPI_N25Q256_PORT_init+0xb8>)
    15da:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    15dc:	2100      	movs	r1, #0
    15de:	202b      	movs	r0, #43	; 0x2b
    15e0:	4b2a      	ldr	r3, [pc, #168]	; (168c <QSPI_N25Q256_PORT_init+0xbc>)
    15e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    15e4:	492a      	ldr	r1, [pc, #168]	; (1690 <QSPI_N25Q256_PORT_init+0xc0>)
    15e6:	202b      	movs	r0, #43	; 0x2b
    15e8:	4b2a      	ldr	r3, [pc, #168]	; (1694 <QSPI_N25Q256_PORT_init+0xc4>)
    15ea:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    15ec:	2102      	movs	r1, #2
    15ee:	2008      	movs	r0, #8
    15f0:	4b25      	ldr	r3, [pc, #148]	; (1688 <QSPI_N25Q256_PORT_init+0xb8>)
    15f2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    15f4:	2100      	movs	r1, #0
    15f6:	2008      	movs	r0, #8
    15f8:	4b27      	ldr	r3, [pc, #156]	; (1698 <QSPI_N25Q256_PORT_init+0xc8>)
    15fa:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    15fc:	2100      	movs	r1, #0
    15fe:	2008      	movs	r0, #8
    1600:	4b22      	ldr	r3, [pc, #136]	; (168c <QSPI_N25Q256_PORT_init+0xbc>)
    1602:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1604:	4925      	ldr	r1, [pc, #148]	; (169c <QSPI_N25Q256_PORT_init+0xcc>)
    1606:	2008      	movs	r0, #8
    1608:	4b22      	ldr	r3, [pc, #136]	; (1694 <QSPI_N25Q256_PORT_init+0xc4>)
    160a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    160c:	2102      	movs	r1, #2
    160e:	2009      	movs	r0, #9
    1610:	4b1d      	ldr	r3, [pc, #116]	; (1688 <QSPI_N25Q256_PORT_init+0xb8>)
    1612:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1614:	2100      	movs	r1, #0
    1616:	2009      	movs	r0, #9
    1618:	4b1f      	ldr	r3, [pc, #124]	; (1698 <QSPI_N25Q256_PORT_init+0xc8>)
    161a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    161c:	2100      	movs	r1, #0
    161e:	2009      	movs	r0, #9
    1620:	4b1a      	ldr	r3, [pc, #104]	; (168c <QSPI_N25Q256_PORT_init+0xbc>)
    1622:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1624:	491e      	ldr	r1, [pc, #120]	; (16a0 <QSPI_N25Q256_PORT_init+0xd0>)
    1626:	2009      	movs	r0, #9
    1628:	4b1a      	ldr	r3, [pc, #104]	; (1694 <QSPI_N25Q256_PORT_init+0xc4>)
    162a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    162c:	2102      	movs	r1, #2
    162e:	200a      	movs	r0, #10
    1630:	4b15      	ldr	r3, [pc, #84]	; (1688 <QSPI_N25Q256_PORT_init+0xb8>)
    1632:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1634:	2100      	movs	r1, #0
    1636:	200a      	movs	r0, #10
    1638:	4b17      	ldr	r3, [pc, #92]	; (1698 <QSPI_N25Q256_PORT_init+0xc8>)
    163a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    163c:	2100      	movs	r1, #0
    163e:	200a      	movs	r0, #10
    1640:	4b12      	ldr	r3, [pc, #72]	; (168c <QSPI_N25Q256_PORT_init+0xbc>)
    1642:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1644:	4917      	ldr	r1, [pc, #92]	; (16a4 <QSPI_N25Q256_PORT_init+0xd4>)
    1646:	200a      	movs	r0, #10
    1648:	4b12      	ldr	r3, [pc, #72]	; (1694 <QSPI_N25Q256_PORT_init+0xc4>)
    164a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    164c:	2102      	movs	r1, #2
    164e:	200b      	movs	r0, #11
    1650:	4b0d      	ldr	r3, [pc, #52]	; (1688 <QSPI_N25Q256_PORT_init+0xb8>)
    1652:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1654:	2100      	movs	r1, #0
    1656:	200b      	movs	r0, #11
    1658:	4b0f      	ldr	r3, [pc, #60]	; (1698 <QSPI_N25Q256_PORT_init+0xc8>)
    165a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    165c:	2100      	movs	r1, #0
    165e:	200b      	movs	r0, #11
    1660:	4b0a      	ldr	r3, [pc, #40]	; (168c <QSPI_N25Q256_PORT_init+0xbc>)
    1662:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1664:	4910      	ldr	r1, [pc, #64]	; (16a8 <QSPI_N25Q256_PORT_init+0xd8>)
    1666:	200b      	movs	r0, #11
    1668:	4b0a      	ldr	r3, [pc, #40]	; (1694 <QSPI_N25Q256_PORT_init+0xc4>)
    166a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    166c:	2101      	movs	r1, #1
    166e:	202a      	movs	r0, #42	; 0x2a
    1670:	4b05      	ldr	r3, [pc, #20]	; (1688 <QSPI_N25Q256_PORT_init+0xb8>)
    1672:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1674:	2100      	movs	r1, #0
    1676:	202a      	movs	r0, #42	; 0x2a
    1678:	4b04      	ldr	r3, [pc, #16]	; (168c <QSPI_N25Q256_PORT_init+0xbc>)
    167a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    167c:	490b      	ldr	r1, [pc, #44]	; (16ac <QSPI_N25Q256_PORT_init+0xdc>)
    167e:	202a      	movs	r0, #42	; 0x2a
    1680:	4b04      	ldr	r3, [pc, #16]	; (1694 <QSPI_N25Q256_PORT_init+0xc4>)
    1682:	4798      	blx	r3
}
    1684:	bf00      	nop
    1686:	bd80      	pop	{r7, pc}
    1688:	0000138d 	.word	0x0000138d
    168c:	00001339 	.word	0x00001339
    1690:	002b0007 	.word	0x002b0007
    1694:	0000136d 	.word	0x0000136d
    1698:	000013c5 	.word	0x000013c5
    169c:	00080007 	.word	0x00080007
    16a0:	00090007 	.word	0x00090007
    16a4:	000a0007 	.word	0x000a0007
    16a8:	000b0007 	.word	0x000b0007
    16ac:	002a0007 	.word	0x002a0007

000016b0 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    16b0:	b580      	push	{r7, lr}
    16b2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    16b4:	4805      	ldr	r0, [pc, #20]	; (16cc <QSPI_N25Q256_CLOCK_init+0x1c>)
    16b6:	4b06      	ldr	r3, [pc, #24]	; (16d0 <QSPI_N25Q256_CLOCK_init+0x20>)
    16b8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    16ba:	4804      	ldr	r0, [pc, #16]	; (16cc <QSPI_N25Q256_CLOCK_init+0x1c>)
    16bc:	4b05      	ldr	r3, [pc, #20]	; (16d4 <QSPI_N25Q256_CLOCK_init+0x24>)
    16be:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    16c0:	4802      	ldr	r0, [pc, #8]	; (16cc <QSPI_N25Q256_CLOCK_init+0x1c>)
    16c2:	4b05      	ldr	r3, [pc, #20]	; (16d8 <QSPI_N25Q256_CLOCK_init+0x28>)
    16c4:	4798      	blx	r3
}
    16c6:	bf00      	nop
    16c8:	bd80      	pop	{r7, pc}
    16ca:	bf00      	nop
    16cc:	40000800 	.word	0x40000800
    16d0:	00000b7f 	.word	0x00000b7f
    16d4:	00000bbf 	.word	0x00000bbf
    16d8:	00000d7f 	.word	0x00000d7f

000016dc <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    16dc:	b580      	push	{r7, lr}
    16de:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    16e0:	4b04      	ldr	r3, [pc, #16]	; (16f4 <QSPI_N25Q256_init+0x18>)
    16e2:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    16e4:	4904      	ldr	r1, [pc, #16]	; (16f8 <QSPI_N25Q256_init+0x1c>)
    16e6:	4805      	ldr	r0, [pc, #20]	; (16fc <QSPI_N25Q256_init+0x20>)
    16e8:	4b05      	ldr	r3, [pc, #20]	; (1700 <QSPI_N25Q256_init+0x24>)
    16ea:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    16ec:	4b05      	ldr	r3, [pc, #20]	; (1704 <QSPI_N25Q256_init+0x28>)
    16ee:	4798      	blx	r3
}
    16f0:	bf00      	nop
    16f2:	bd80      	pop	{r7, pc}
    16f4:	000016b1 	.word	0x000016b1
    16f8:	42003400 	.word	0x42003400
    16fc:	20001128 	.word	0x20001128
    1700:	0000290d 	.word	0x0000290d
    1704:	000015d1 	.word	0x000015d1

00001708 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1708:	b580      	push	{r7, lr}
    170a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    170c:	4802      	ldr	r0, [pc, #8]	; (1718 <DATETIME_CLOCK_CLOCK_init+0x10>)
    170e:	4b03      	ldr	r3, [pc, #12]	; (171c <DATETIME_CLOCK_CLOCK_init+0x14>)
    1710:	4798      	blx	r3
}
    1712:	bf00      	nop
    1714:	bd80      	pop	{r7, pc}
    1716:	bf00      	nop
    1718:	40000800 	.word	0x40000800
    171c:	00000bff 	.word	0x00000bff

00001720 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1720:	b580      	push	{r7, lr}
    1722:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1724:	4b03      	ldr	r3, [pc, #12]	; (1734 <DATETIME_CLOCK_init+0x14>)
    1726:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1728:	4903      	ldr	r1, [pc, #12]	; (1738 <DATETIME_CLOCK_init+0x18>)
    172a:	4804      	ldr	r0, [pc, #16]	; (173c <DATETIME_CLOCK_init+0x1c>)
    172c:	4b04      	ldr	r3, [pc, #16]	; (1740 <DATETIME_CLOCK_init+0x20>)
    172e:	4798      	blx	r3
}
    1730:	bf00      	nop
    1732:	bd80      	pop	{r7, pc}
    1734:	00001709 	.word	0x00001709
    1738:	40002400 	.word	0x40002400
    173c:	20001290 	.word	0x20001290
    1740:	00002075 	.word	0x00002075

00001744 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    1744:	b580      	push	{r7, lr}
    1746:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1748:	2100      	movs	r1, #0
    174a:	2010      	movs	r0, #16
    174c:	4b07      	ldr	r3, [pc, #28]	; (176c <I2C_SHARED_PORT_init+0x28>)
    174e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1750:	4907      	ldr	r1, [pc, #28]	; (1770 <I2C_SHARED_PORT_init+0x2c>)
    1752:	2010      	movs	r0, #16
    1754:	4b07      	ldr	r3, [pc, #28]	; (1774 <I2C_SHARED_PORT_init+0x30>)
    1756:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1758:	2100      	movs	r1, #0
    175a:	2011      	movs	r0, #17
    175c:	4b03      	ldr	r3, [pc, #12]	; (176c <I2C_SHARED_PORT_init+0x28>)
    175e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1760:	4905      	ldr	r1, [pc, #20]	; (1778 <I2C_SHARED_PORT_init+0x34>)
    1762:	2011      	movs	r0, #17
    1764:	4b03      	ldr	r3, [pc, #12]	; (1774 <I2C_SHARED_PORT_init+0x30>)
    1766:	4798      	blx	r3
}
    1768:	bf00      	nop
    176a:	bd80      	pop	{r7, pc}
    176c:	00001339 	.word	0x00001339
    1770:	00100002 	.word	0x00100002
    1774:	0000136d 	.word	0x0000136d
    1778:	00110002 	.word	0x00110002

0000177c <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    177c:	b580      	push	{r7, lr}
    177e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1780:	2245      	movs	r2, #69	; 0x45
    1782:	2108      	movs	r1, #8
    1784:	4806      	ldr	r0, [pc, #24]	; (17a0 <I2C_SHARED_CLOCK_init+0x24>)
    1786:	4b07      	ldr	r3, [pc, #28]	; (17a4 <I2C_SHARED_CLOCK_init+0x28>)
    1788:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    178a:	224a      	movs	r2, #74	; 0x4a
    178c:	2103      	movs	r1, #3
    178e:	4804      	ldr	r0, [pc, #16]	; (17a0 <I2C_SHARED_CLOCK_init+0x24>)
    1790:	4b04      	ldr	r3, [pc, #16]	; (17a4 <I2C_SHARED_CLOCK_init+0x28>)
    1792:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1794:	4804      	ldr	r0, [pc, #16]	; (17a8 <I2C_SHARED_CLOCK_init+0x2c>)
    1796:	4b05      	ldr	r3, [pc, #20]	; (17ac <I2C_SHARED_CLOCK_init+0x30>)
    1798:	4798      	blx	r3
}
    179a:	bf00      	nop
    179c:	bd80      	pop	{r7, pc}
    179e:	bf00      	nop
    17a0:	40001c00 	.word	0x40001c00
    17a4:	00000b39 	.word	0x00000b39
    17a8:	40000800 	.word	0x40000800
    17ac:	00000c3f 	.word	0x00000c3f

000017b0 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    17b0:	b580      	push	{r7, lr}
    17b2:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    17b4:	4b04      	ldr	r3, [pc, #16]	; (17c8 <I2C_SHARED_init+0x18>)
    17b6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM1);
    17b8:	4904      	ldr	r1, [pc, #16]	; (17cc <I2C_SHARED_init+0x1c>)
    17ba:	4805      	ldr	r0, [pc, #20]	; (17d0 <I2C_SHARED_init+0x20>)
    17bc:	4b05      	ldr	r3, [pc, #20]	; (17d4 <I2C_SHARED_init+0x24>)
    17be:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    17c0:	4b05      	ldr	r3, [pc, #20]	; (17d8 <I2C_SHARED_init+0x28>)
    17c2:	4798      	blx	r3
}
    17c4:	bf00      	nop
    17c6:	bd80      	pop	{r7, pc}
    17c8:	0000177d 	.word	0x0000177d
    17cc:	40003400 	.word	0x40003400
    17d0:	20001210 	.word	0x20001210
    17d4:	00002731 	.word	0x00002731
    17d8:	00001745 	.word	0x00001745

000017dc <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    17dc:	b580      	push	{r7, lr}
    17de:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    17e0:	2100      	movs	r1, #0
    17e2:	203b      	movs	r0, #59	; 0x3b
    17e4:	4b11      	ldr	r3, [pc, #68]	; (182c <SPI_TEMP_PORT_init+0x50>)
    17e6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    17e8:	2102      	movs	r1, #2
    17ea:	203b      	movs	r0, #59	; 0x3b
    17ec:	4b10      	ldr	r3, [pc, #64]	; (1830 <SPI_TEMP_PORT_init+0x54>)
    17ee:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    17f0:	4910      	ldr	r1, [pc, #64]	; (1834 <SPI_TEMP_PORT_init+0x58>)
    17f2:	203b      	movs	r0, #59	; 0x3b
    17f4:	4b10      	ldr	r3, [pc, #64]	; (1838 <SPI_TEMP_PORT_init+0x5c>)
    17f6:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    17f8:	2100      	movs	r1, #0
    17fa:	203a      	movs	r0, #58	; 0x3a
    17fc:	4b0b      	ldr	r3, [pc, #44]	; (182c <SPI_TEMP_PORT_init+0x50>)
    17fe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1800:	2102      	movs	r1, #2
    1802:	203a      	movs	r0, #58	; 0x3a
    1804:	4b0a      	ldr	r3, [pc, #40]	; (1830 <SPI_TEMP_PORT_init+0x54>)
    1806:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1808:	490c      	ldr	r1, [pc, #48]	; (183c <SPI_TEMP_PORT_init+0x60>)
    180a:	203a      	movs	r0, #58	; 0x3a
    180c:	4b0a      	ldr	r3, [pc, #40]	; (1838 <SPI_TEMP_PORT_init+0x5c>)
    180e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1810:	2101      	movs	r1, #1
    1812:	203c      	movs	r0, #60	; 0x3c
    1814:	4b06      	ldr	r3, [pc, #24]	; (1830 <SPI_TEMP_PORT_init+0x54>)
    1816:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1818:	2100      	movs	r1, #0
    181a:	203c      	movs	r0, #60	; 0x3c
    181c:	4b08      	ldr	r3, [pc, #32]	; (1840 <SPI_TEMP_PORT_init+0x64>)
    181e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1820:	4908      	ldr	r1, [pc, #32]	; (1844 <SPI_TEMP_PORT_init+0x68>)
    1822:	203c      	movs	r0, #60	; 0x3c
    1824:	4b04      	ldr	r3, [pc, #16]	; (1838 <SPI_TEMP_PORT_init+0x5c>)
    1826:	4798      	blx	r3
}
    1828:	bf00      	nop
    182a:	bd80      	pop	{r7, pc}
    182c:	000013c5 	.word	0x000013c5
    1830:	0000138d 	.word	0x0000138d
    1834:	003b0003 	.word	0x003b0003
    1838:	0000136d 	.word	0x0000136d
    183c:	003a0003 	.word	0x003a0003
    1840:	00001339 	.word	0x00001339
    1844:	003c0003 	.word	0x003c0003

00001848 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1848:	b580      	push	{r7, lr}
    184a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    184c:	2245      	movs	r2, #69	; 0x45
    184e:	2122      	movs	r1, #34	; 0x22
    1850:	4806      	ldr	r0, [pc, #24]	; (186c <SPI_TEMP_CLOCK_init+0x24>)
    1852:	4b07      	ldr	r3, [pc, #28]	; (1870 <SPI_TEMP_CLOCK_init+0x28>)
    1854:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1856:	224a      	movs	r2, #74	; 0x4a
    1858:	2103      	movs	r1, #3
    185a:	4804      	ldr	r0, [pc, #16]	; (186c <SPI_TEMP_CLOCK_init+0x24>)
    185c:	4b04      	ldr	r3, [pc, #16]	; (1870 <SPI_TEMP_CLOCK_init+0x28>)
    185e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1860:	4804      	ldr	r0, [pc, #16]	; (1874 <SPI_TEMP_CLOCK_init+0x2c>)
    1862:	4b05      	ldr	r3, [pc, #20]	; (1878 <SPI_TEMP_CLOCK_init+0x30>)
    1864:	4798      	blx	r3
}
    1866:	bf00      	nop
    1868:	bd80      	pop	{r7, pc}
    186a:	bf00      	nop
    186c:	40001c00 	.word	0x40001c00
    1870:	00000b39 	.word	0x00000b39
    1874:	40000800 	.word	0x40000800
    1878:	00000d9f 	.word	0x00000d9f

0000187c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    187c:	b580      	push	{r7, lr}
    187e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1880:	4b05      	ldr	r3, [pc, #20]	; (1898 <SPI_TEMP_init+0x1c>)
    1882:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1884:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1888:	4804      	ldr	r0, [pc, #16]	; (189c <SPI_TEMP_init+0x20>)
    188a:	4b05      	ldr	r3, [pc, #20]	; (18a0 <SPI_TEMP_init+0x24>)
    188c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    188e:	4b05      	ldr	r3, [pc, #20]	; (18a4 <SPI_TEMP_init+0x28>)
    1890:	4798      	blx	r3
}
    1892:	bf00      	nop
    1894:	bd80      	pop	{r7, pc}
    1896:	bf00      	nop
    1898:	00001849 	.word	0x00001849
    189c:	200010f0 	.word	0x200010f0
    18a0:	00002a1d 	.word	0x00002a1d
    18a4:	000017dd 	.word	0x000017dd

000018a8 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    18a8:	b580      	push	{r7, lr}
    18aa:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    18ac:	2100      	movs	r1, #0
    18ae:	2017      	movs	r0, #23
    18b0:	4b07      	ldr	r3, [pc, #28]	; (18d0 <I2C_EXPANDER_PORT_init+0x28>)
    18b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    18b4:	4907      	ldr	r1, [pc, #28]	; (18d4 <I2C_EXPANDER_PORT_init+0x2c>)
    18b6:	2017      	movs	r0, #23
    18b8:	4b07      	ldr	r3, [pc, #28]	; (18d8 <I2C_EXPANDER_PORT_init+0x30>)
    18ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    18bc:	2100      	movs	r1, #0
    18be:	2016      	movs	r0, #22
    18c0:	4b03      	ldr	r3, [pc, #12]	; (18d0 <I2C_EXPANDER_PORT_init+0x28>)
    18c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    18c4:	4905      	ldr	r1, [pc, #20]	; (18dc <I2C_EXPANDER_PORT_init+0x34>)
    18c6:	2016      	movs	r0, #22
    18c8:	4b03      	ldr	r3, [pc, #12]	; (18d8 <I2C_EXPANDER_PORT_init+0x30>)
    18ca:	4798      	blx	r3
}
    18cc:	bf00      	nop
    18ce:	bd80      	pop	{r7, pc}
    18d0:	00001339 	.word	0x00001339
    18d4:	00170003 	.word	0x00170003
    18d8:	0000136d 	.word	0x0000136d
    18dc:	00160003 	.word	0x00160003

000018e0 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    18e0:	b580      	push	{r7, lr}
    18e2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18e4:	2244      	movs	r2, #68	; 0x44
    18e6:	2123      	movs	r1, #35	; 0x23
    18e8:	4806      	ldr	r0, [pc, #24]	; (1904 <I2C_EXPANDER_CLOCK_init+0x24>)
    18ea:	4b07      	ldr	r3, [pc, #28]	; (1908 <I2C_EXPANDER_CLOCK_init+0x28>)
    18ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18ee:	224a      	movs	r2, #74	; 0x4a
    18f0:	2103      	movs	r1, #3
    18f2:	4804      	ldr	r0, [pc, #16]	; (1904 <I2C_EXPANDER_CLOCK_init+0x24>)
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <I2C_EXPANDER_CLOCK_init+0x28>)
    18f6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    18f8:	4804      	ldr	r0, [pc, #16]	; (190c <I2C_EXPANDER_CLOCK_init+0x2c>)
    18fa:	4b05      	ldr	r3, [pc, #20]	; (1910 <I2C_EXPANDER_CLOCK_init+0x30>)
    18fc:	4798      	blx	r3
}
    18fe:	bf00      	nop
    1900:	bd80      	pop	{r7, pc}
    1902:	bf00      	nop
    1904:	40001c00 	.word	0x40001c00
    1908:	00000b39 	.word	0x00000b39
    190c:	40000800 	.word	0x40000800
    1910:	00000dbf 	.word	0x00000dbf

00001914 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1914:	b580      	push	{r7, lr}
    1916:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1918:	4b04      	ldr	r3, [pc, #16]	; (192c <I2C_EXPANDER_init+0x18>)
    191a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    191c:	4904      	ldr	r1, [pc, #16]	; (1930 <I2C_EXPANDER_init+0x1c>)
    191e:	4805      	ldr	r0, [pc, #20]	; (1934 <I2C_EXPANDER_init+0x20>)
    1920:	4b05      	ldr	r3, [pc, #20]	; (1938 <I2C_EXPANDER_init+0x24>)
    1922:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1924:	4b05      	ldr	r3, [pc, #20]	; (193c <I2C_EXPANDER_init+0x28>)
    1926:	4798      	blx	r3
}
    1928:	bf00      	nop
    192a:	bd80      	pop	{r7, pc}
    192c:	000018e1 	.word	0x000018e1
    1930:	43000400 	.word	0x43000400
    1934:	200011f0 	.word	0x200011f0
    1938:	00002731 	.word	0x00002731
    193c:	000018a9 	.word	0x000018a9

00001940 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1940:	b580      	push	{r7, lr}
    1942:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1944:	2100      	movs	r1, #0
    1946:	2044      	movs	r0, #68	; 0x44
    1948:	4b11      	ldr	r3, [pc, #68]	; (1990 <SPI_HI3593_PORT_init+0x50>)
    194a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    194c:	2102      	movs	r1, #2
    194e:	2044      	movs	r0, #68	; 0x44
    1950:	4b10      	ldr	r3, [pc, #64]	; (1994 <SPI_HI3593_PORT_init+0x54>)
    1952:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1954:	4910      	ldr	r1, [pc, #64]	; (1998 <SPI_HI3593_PORT_init+0x58>)
    1956:	2044      	movs	r0, #68	; 0x44
    1958:	4b10      	ldr	r3, [pc, #64]	; (199c <SPI_HI3593_PORT_init+0x5c>)
    195a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    195c:	2100      	movs	r1, #0
    195e:	2045      	movs	r0, #69	; 0x45
    1960:	4b0b      	ldr	r3, [pc, #44]	; (1990 <SPI_HI3593_PORT_init+0x50>)
    1962:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1964:	2102      	movs	r1, #2
    1966:	2045      	movs	r0, #69	; 0x45
    1968:	4b0a      	ldr	r3, [pc, #40]	; (1994 <SPI_HI3593_PORT_init+0x54>)
    196a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    196c:	490c      	ldr	r1, [pc, #48]	; (19a0 <SPI_HI3593_PORT_init+0x60>)
    196e:	2045      	movs	r0, #69	; 0x45
    1970:	4b0a      	ldr	r3, [pc, #40]	; (199c <SPI_HI3593_PORT_init+0x5c>)
    1972:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1974:	2101      	movs	r1, #1
    1976:	2047      	movs	r0, #71	; 0x47
    1978:	4b06      	ldr	r3, [pc, #24]	; (1994 <SPI_HI3593_PORT_init+0x54>)
    197a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    197c:	2100      	movs	r1, #0
    197e:	2047      	movs	r0, #71	; 0x47
    1980:	4b08      	ldr	r3, [pc, #32]	; (19a4 <SPI_HI3593_PORT_init+0x64>)
    1982:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1984:	4908      	ldr	r1, [pc, #32]	; (19a8 <SPI_HI3593_PORT_init+0x68>)
    1986:	2047      	movs	r0, #71	; 0x47
    1988:	4b04      	ldr	r3, [pc, #16]	; (199c <SPI_HI3593_PORT_init+0x5c>)
    198a:	4798      	blx	r3
}
    198c:	bf00      	nop
    198e:	bd80      	pop	{r7, pc}
    1990:	000013c5 	.word	0x000013c5
    1994:	0000138d 	.word	0x0000138d
    1998:	00440002 	.word	0x00440002
    199c:	0000136d 	.word	0x0000136d
    19a0:	00450002 	.word	0x00450002
    19a4:	00001339 	.word	0x00001339
    19a8:	00470002 	.word	0x00470002

000019ac <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    19ac:	b580      	push	{r7, lr}
    19ae:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19b0:	2242      	movs	r2, #66	; 0x42
    19b2:	2124      	movs	r1, #36	; 0x24
    19b4:	4806      	ldr	r0, [pc, #24]	; (19d0 <SPI_HI3593_CLOCK_init+0x24>)
    19b6:	4b07      	ldr	r3, [pc, #28]	; (19d4 <SPI_HI3593_CLOCK_init+0x28>)
    19b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19ba:	224a      	movs	r2, #74	; 0x4a
    19bc:	2103      	movs	r1, #3
    19be:	4804      	ldr	r0, [pc, #16]	; (19d0 <SPI_HI3593_CLOCK_init+0x24>)
    19c0:	4b04      	ldr	r3, [pc, #16]	; (19d4 <SPI_HI3593_CLOCK_init+0x28>)
    19c2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    19c4:	4804      	ldr	r0, [pc, #16]	; (19d8 <SPI_HI3593_CLOCK_init+0x2c>)
    19c6:	4b05      	ldr	r3, [pc, #20]	; (19dc <SPI_HI3593_CLOCK_init+0x30>)
    19c8:	4798      	blx	r3
}
    19ca:	bf00      	nop
    19cc:	bd80      	pop	{r7, pc}
    19ce:	bf00      	nop
    19d0:	40001c00 	.word	0x40001c00
    19d4:	00000b39 	.word	0x00000b39
    19d8:	40000800 	.word	0x40000800
    19dc:	00000ddf 	.word	0x00000ddf

000019e0 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    19e0:	b580      	push	{r7, lr}
    19e2:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    19e4:	4b04      	ldr	r3, [pc, #16]	; (19f8 <SPI_HI3593_init+0x18>)
    19e6:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    19e8:	4904      	ldr	r1, [pc, #16]	; (19fc <SPI_HI3593_init+0x1c>)
    19ea:	4805      	ldr	r0, [pc, #20]	; (1a00 <SPI_HI3593_init+0x20>)
    19ec:	4b05      	ldr	r3, [pc, #20]	; (1a04 <SPI_HI3593_init+0x24>)
    19ee:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    19f0:	4b05      	ldr	r3, [pc, #20]	; (1a08 <SPI_HI3593_init+0x28>)
    19f2:	4798      	blx	r3
}
    19f4:	bf00      	nop
    19f6:	bd80      	pop	{r7, pc}
    19f8:	000019ad 	.word	0x000019ad
    19fc:	43000800 	.word	0x43000800
    1a00:	200010d8 	.word	0x200010d8
    1a04:	00002a1d 	.word	0x00002a1d
    1a08:	00001941 	.word	0x00001941

00001a0c <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1a0c:	b580      	push	{r7, lr}
    1a0e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1a10:	2100      	movs	r1, #0
    1a12:	2068      	movs	r0, #104	; 0x68
    1a14:	4b07      	ldr	r3, [pc, #28]	; (1a34 <I2C_EEPROM_PORT_init+0x28>)
    1a16:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1a18:	4907      	ldr	r1, [pc, #28]	; (1a38 <I2C_EEPROM_PORT_init+0x2c>)
    1a1a:	2068      	movs	r0, #104	; 0x68
    1a1c:	4b07      	ldr	r3, [pc, #28]	; (1a3c <I2C_EEPROM_PORT_init+0x30>)
    1a1e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1a20:	2100      	movs	r1, #0
    1a22:	2069      	movs	r0, #105	; 0x69
    1a24:	4b03      	ldr	r3, [pc, #12]	; (1a34 <I2C_EEPROM_PORT_init+0x28>)
    1a26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1a28:	4905      	ldr	r1, [pc, #20]	; (1a40 <I2C_EEPROM_PORT_init+0x34>)
    1a2a:	2069      	movs	r0, #105	; 0x69
    1a2c:	4b03      	ldr	r3, [pc, #12]	; (1a3c <I2C_EEPROM_PORT_init+0x30>)
    1a2e:	4798      	blx	r3
}
    1a30:	bf00      	nop
    1a32:	bd80      	pop	{r7, pc}
    1a34:	00001339 	.word	0x00001339
    1a38:	00680002 	.word	0x00680002
    1a3c:	0000136d 	.word	0x0000136d
    1a40:	00690002 	.word	0x00690002

00001a44 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1a44:	b580      	push	{r7, lr}
    1a46:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a48:	2248      	movs	r2, #72	; 0x48
    1a4a:	2125      	movs	r1, #37	; 0x25
    1a4c:	4806      	ldr	r0, [pc, #24]	; (1a68 <I2C_EEPROM_CLOCK_init+0x24>)
    1a4e:	4b07      	ldr	r3, [pc, #28]	; (1a6c <I2C_EEPROM_CLOCK_init+0x28>)
    1a50:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a52:	224a      	movs	r2, #74	; 0x4a
    1a54:	2103      	movs	r1, #3
    1a56:	4804      	ldr	r0, [pc, #16]	; (1a68 <I2C_EEPROM_CLOCK_init+0x24>)
    1a58:	4b04      	ldr	r3, [pc, #16]	; (1a6c <I2C_EEPROM_CLOCK_init+0x28>)
    1a5a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1a5c:	4804      	ldr	r0, [pc, #16]	; (1a70 <I2C_EEPROM_CLOCK_init+0x2c>)
    1a5e:	4b05      	ldr	r3, [pc, #20]	; (1a74 <I2C_EEPROM_CLOCK_init+0x30>)
    1a60:	4798      	blx	r3
}
    1a62:	bf00      	nop
    1a64:	bd80      	pop	{r7, pc}
    1a66:	bf00      	nop
    1a68:	40001c00 	.word	0x40001c00
    1a6c:	00000b39 	.word	0x00000b39
    1a70:	40000800 	.word	0x40000800
    1a74:	00000dff 	.word	0x00000dff

00001a78 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1a78:	b580      	push	{r7, lr}
    1a7a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1a7c:	4b04      	ldr	r3, [pc, #16]	; (1a90 <I2C_EEPROM_init+0x18>)
    1a7e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    1a80:	4904      	ldr	r1, [pc, #16]	; (1a94 <I2C_EEPROM_init+0x1c>)
    1a82:	4805      	ldr	r0, [pc, #20]	; (1a98 <I2C_EEPROM_init+0x20>)
    1a84:	4b05      	ldr	r3, [pc, #20]	; (1a9c <I2C_EEPROM_init+0x24>)
    1a86:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    1a88:	4b05      	ldr	r3, [pc, #20]	; (1aa0 <I2C_EEPROM_init+0x28>)
    1a8a:	4798      	blx	r3
}
    1a8c:	bf00      	nop
    1a8e:	bd80      	pop	{r7, pc}
    1a90:	00001a45 	.word	0x00001a45
    1a94:	43000c00 	.word	0x43000c00
    1a98:	20001250 	.word	0x20001250
    1a9c:	000025fd 	.word	0x000025fd
    1aa0:	00001a0d 	.word	0x00001a0d

00001aa4 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1aa4:	b580      	push	{r7, lr}
    1aa6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1aa8:	4808      	ldr	r0, [pc, #32]	; (1acc <TIMER_USB_init+0x28>)
    1aaa:	4b09      	ldr	r3, [pc, #36]	; (1ad0 <TIMER_USB_init+0x2c>)
    1aac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1aae:	2243      	movs	r2, #67	; 0x43
    1ab0:	2109      	movs	r1, #9
    1ab2:	4808      	ldr	r0, [pc, #32]	; (1ad4 <TIMER_USB_init+0x30>)
    1ab4:	4b08      	ldr	r3, [pc, #32]	; (1ad8 <TIMER_USB_init+0x34>)
    1ab6:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1ab8:	4b08      	ldr	r3, [pc, #32]	; (1adc <TIMER_USB_init+0x38>)
    1aba:	4798      	blx	r3
    1abc:	4603      	mov	r3, r0
    1abe:	461a      	mov	r2, r3
    1ac0:	4907      	ldr	r1, [pc, #28]	; (1ae0 <TIMER_USB_init+0x3c>)
    1ac2:	4808      	ldr	r0, [pc, #32]	; (1ae4 <TIMER_USB_init+0x40>)
    1ac4:	4b08      	ldr	r3, [pc, #32]	; (1ae8 <TIMER_USB_init+0x44>)
    1ac6:	4798      	blx	r3
}
    1ac8:	bf00      	nop
    1aca:	bd80      	pop	{r7, pc}
    1acc:	40000800 	.word	0x40000800
    1ad0:	00000c5f 	.word	0x00000c5f
    1ad4:	40001c00 	.word	0x40001c00
    1ad8:	00000b39 	.word	0x00000b39
    1adc:	00008acd 	.word	0x00008acd
    1ae0:	40003800 	.word	0x40003800
    1ae4:	200011d0 	.word	0x200011d0
    1ae8:	00002cad 	.word	0x00002cad

00001aec <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1aec:	b580      	push	{r7, lr}
    1aee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1af0:	4808      	ldr	r0, [pc, #32]	; (1b14 <TIMER_ARINC_init+0x28>)
    1af2:	4b09      	ldr	r3, [pc, #36]	; (1b18 <TIMER_ARINC_init+0x2c>)
    1af4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1af6:	2244      	movs	r2, #68	; 0x44
    1af8:	211a      	movs	r1, #26
    1afa:	4808      	ldr	r0, [pc, #32]	; (1b1c <TIMER_ARINC_init+0x30>)
    1afc:	4b08      	ldr	r3, [pc, #32]	; (1b20 <TIMER_ARINC_init+0x34>)
    1afe:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1b00:	4b08      	ldr	r3, [pc, #32]	; (1b24 <TIMER_ARINC_init+0x38>)
    1b02:	4798      	blx	r3
    1b04:	4603      	mov	r3, r0
    1b06:	461a      	mov	r2, r3
    1b08:	4907      	ldr	r1, [pc, #28]	; (1b28 <TIMER_ARINC_init+0x3c>)
    1b0a:	4808      	ldr	r0, [pc, #32]	; (1b2c <TIMER_ARINC_init+0x40>)
    1b0c:	4b08      	ldr	r3, [pc, #32]	; (1b30 <TIMER_ARINC_init+0x44>)
    1b0e:	4798      	blx	r3
}
    1b10:	bf00      	nop
    1b12:	bd80      	pop	{r7, pc}
    1b14:	40000800 	.word	0x40000800
    1b18:	00000d1f 	.word	0x00000d1f
    1b1c:	40001c00 	.word	0x40001c00
    1b20:	00000b39 	.word	0x00000b39
    1b24:	00008acd 	.word	0x00008acd
    1b28:	4101a000 	.word	0x4101a000
    1b2c:	200011b0 	.word	0x200011b0
    1b30:	00002cad 	.word	0x00002cad

00001b34 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1b34:	b580      	push	{r7, lr}
    1b36:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1b38:	4808      	ldr	r0, [pc, #32]	; (1b5c <TIMER_MAINTENANCE_init+0x28>)
    1b3a:	4b09      	ldr	r3, [pc, #36]	; (1b60 <TIMER_MAINTENANCE_init+0x2c>)
    1b3c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b3e:	2246      	movs	r2, #70	; 0x46
    1b40:	211e      	movs	r1, #30
    1b42:	4808      	ldr	r0, [pc, #32]	; (1b64 <TIMER_MAINTENANCE_init+0x30>)
    1b44:	4b08      	ldr	r3, [pc, #32]	; (1b68 <TIMER_MAINTENANCE_init+0x34>)
    1b46:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1b48:	4b08      	ldr	r3, [pc, #32]	; (1b6c <TIMER_MAINTENANCE_init+0x38>)
    1b4a:	4798      	blx	r3
    1b4c:	4603      	mov	r3, r0
    1b4e:	461a      	mov	r2, r3
    1b50:	4907      	ldr	r1, [pc, #28]	; (1b70 <TIMER_MAINTENANCE_init+0x3c>)
    1b52:	4808      	ldr	r0, [pc, #32]	; (1b74 <TIMER_MAINTENANCE_init+0x40>)
    1b54:	4b08      	ldr	r3, [pc, #32]	; (1b78 <TIMER_MAINTENANCE_init+0x44>)
    1b56:	4798      	blx	r3
}
    1b58:	bf00      	nop
    1b5a:	bd80      	pop	{r7, pc}
    1b5c:	40000800 	.word	0x40000800
    1b60:	00000d3f 	.word	0x00000d3f
    1b64:	40001c00 	.word	0x40001c00
    1b68:	00000b39 	.word	0x00000b39
    1b6c:	00008acd 	.word	0x00008acd
    1b70:	42001400 	.word	0x42001400
    1b74:	20001108 	.word	0x20001108
    1b78:	00002cad 	.word	0x00002cad

00001b7c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1b7c:	b580      	push	{r7, lr}
    1b7e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1b80:	4808      	ldr	r0, [pc, #32]	; (1ba4 <TIMER_INTERFACE_init+0x28>)
    1b82:	4b09      	ldr	r3, [pc, #36]	; (1ba8 <TIMER_INTERFACE_init+0x2c>)
    1b84:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b86:	2246      	movs	r2, #70	; 0x46
    1b88:	211e      	movs	r1, #30
    1b8a:	4808      	ldr	r0, [pc, #32]	; (1bac <TIMER_INTERFACE_init+0x30>)
    1b8c:	4b08      	ldr	r3, [pc, #32]	; (1bb0 <TIMER_INTERFACE_init+0x34>)
    1b8e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1b90:	4b08      	ldr	r3, [pc, #32]	; (1bb4 <TIMER_INTERFACE_init+0x38>)
    1b92:	4798      	blx	r3
    1b94:	4603      	mov	r3, r0
    1b96:	461a      	mov	r2, r3
    1b98:	4907      	ldr	r1, [pc, #28]	; (1bb8 <TIMER_INTERFACE_init+0x3c>)
    1b9a:	4808      	ldr	r0, [pc, #32]	; (1bbc <TIMER_INTERFACE_init+0x40>)
    1b9c:	4b08      	ldr	r3, [pc, #32]	; (1bc0 <TIMER_INTERFACE_init+0x44>)
    1b9e:	4798      	blx	r3
}
    1ba0:	bf00      	nop
    1ba2:	bd80      	pop	{r7, pc}
    1ba4:	40000800 	.word	0x40000800
    1ba8:	00000d5f 	.word	0x00000d5f
    1bac:	40001c00 	.word	0x40001c00
    1bb0:	00000b39 	.word	0x00000b39
    1bb4:	00008acd 	.word	0x00008acd
    1bb8:	42001800 	.word	0x42001800
    1bbc:	2000114c 	.word	0x2000114c
    1bc0:	00002cad 	.word	0x00002cad

00001bc4 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1bc4:	b580      	push	{r7, lr}
    1bc6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1bc8:	4808      	ldr	r0, [pc, #32]	; (1bec <TIMER_EVENT_init+0x28>)
    1bca:	4b09      	ldr	r3, [pc, #36]	; (1bf0 <TIMER_EVENT_init+0x2c>)
    1bcc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bce:	2246      	movs	r2, #70	; 0x46
    1bd0:	2127      	movs	r1, #39	; 0x27
    1bd2:	4808      	ldr	r0, [pc, #32]	; (1bf4 <TIMER_EVENT_init+0x30>)
    1bd4:	4b08      	ldr	r3, [pc, #32]	; (1bf8 <TIMER_EVENT_init+0x34>)
    1bd6:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1bd8:	4b08      	ldr	r3, [pc, #32]	; (1bfc <TIMER_EVENT_init+0x38>)
    1bda:	4798      	blx	r3
    1bdc:	4603      	mov	r3, r0
    1bde:	461a      	mov	r2, r3
    1be0:	4907      	ldr	r1, [pc, #28]	; (1c00 <TIMER_EVENT_init+0x3c>)
    1be2:	4808      	ldr	r0, [pc, #32]	; (1c04 <TIMER_EVENT_init+0x40>)
    1be4:	4b08      	ldr	r3, [pc, #32]	; (1c08 <TIMER_EVENT_init+0x44>)
    1be6:	4798      	blx	r3
}
    1be8:	bf00      	nop
    1bea:	bd80      	pop	{r7, pc}
    1bec:	40000800 	.word	0x40000800
    1bf0:	00000e1f 	.word	0x00000e1f
    1bf4:	40001c00 	.word	0x40001c00
    1bf8:	00000b39 	.word	0x00000b39
    1bfc:	00008acd 	.word	0x00008acd
    1c00:	43001400 	.word	0x43001400
    1c04:	2000112c 	.word	0x2000112c
    1c08:	00002cad 	.word	0x00002cad

00001c0c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1c0c:	b580      	push	{r7, lr}
    1c0e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    1c10:	4902      	ldr	r1, [pc, #8]	; (1c1c <LIVE_PULSE_PORT_init+0x10>)
    1c12:	2021      	movs	r0, #33	; 0x21
    1c14:	4b02      	ldr	r3, [pc, #8]	; (1c20 <LIVE_PULSE_PORT_init+0x14>)
    1c16:	4798      	blx	r3
}
    1c18:	bf00      	nop
    1c1a:	bd80      	pop	{r7, pc}
    1c1c:	00210004 	.word	0x00210004
    1c20:	0000136d 	.word	0x0000136d

00001c24 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1c28:	4804      	ldr	r0, [pc, #16]	; (1c3c <LIVE_PULSE_CLOCK_init+0x18>)
    1c2a:	4b05      	ldr	r3, [pc, #20]	; (1c40 <LIVE_PULSE_CLOCK_init+0x1c>)
    1c2c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c2e:	2240      	movs	r2, #64	; 0x40
    1c30:	2127      	movs	r1, #39	; 0x27
    1c32:	4804      	ldr	r0, [pc, #16]	; (1c44 <LIVE_PULSE_CLOCK_init+0x20>)
    1c34:	4b04      	ldr	r3, [pc, #16]	; (1c48 <LIVE_PULSE_CLOCK_init+0x24>)
    1c36:	4798      	blx	r3
}
    1c38:	bf00      	nop
    1c3a:	bd80      	pop	{r7, pc}
    1c3c:	40000800 	.word	0x40000800
    1c40:	00000e3f 	.word	0x00000e3f
    1c44:	40001c00 	.word	0x40001c00
    1c48:	00000b39 	.word	0x00000b39

00001c4c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1c4c:	b580      	push	{r7, lr}
    1c4e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1c50:	4b06      	ldr	r3, [pc, #24]	; (1c6c <LIVE_PULSE_init+0x20>)
    1c52:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1c54:	4b06      	ldr	r3, [pc, #24]	; (1c70 <LIVE_PULSE_init+0x24>)
    1c56:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1c58:	4b06      	ldr	r3, [pc, #24]	; (1c74 <LIVE_PULSE_init+0x28>)
    1c5a:	4798      	blx	r3
    1c5c:	4603      	mov	r3, r0
    1c5e:	461a      	mov	r2, r3
    1c60:	4905      	ldr	r1, [pc, #20]	; (1c78 <LIVE_PULSE_init+0x2c>)
    1c62:	4806      	ldr	r0, [pc, #24]	; (1c7c <LIVE_PULSE_init+0x30>)
    1c64:	4b06      	ldr	r3, [pc, #24]	; (1c80 <LIVE_PULSE_init+0x34>)
    1c66:	4798      	blx	r3
}
    1c68:	bf00      	nop
    1c6a:	bd80      	pop	{r7, pc}
    1c6c:	00001c25 	.word	0x00001c25
    1c70:	00001c0d 	.word	0x00001c0d
    1c74:	00008ae1 	.word	0x00008ae1
    1c78:	43001800 	.word	0x43001800
    1c7c:	2000116c 	.word	0x2000116c
    1c80:	0000280d 	.word	0x0000280d

00001c84 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1c84:	b580      	push	{r7, lr}
    1c86:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1c88:	4804      	ldr	r0, [pc, #16]	; (1c9c <TIMER_HVAC_CLOCK_init+0x18>)
    1c8a:	4b05      	ldr	r3, [pc, #20]	; (1ca0 <TIMER_HVAC_CLOCK_init+0x1c>)
    1c8c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c8e:	2244      	movs	r2, #68	; 0x44
    1c90:	2119      	movs	r1, #25
    1c92:	4804      	ldr	r0, [pc, #16]	; (1ca4 <TIMER_HVAC_CLOCK_init+0x20>)
    1c94:	4b04      	ldr	r3, [pc, #16]	; (1ca8 <TIMER_HVAC_CLOCK_init+0x24>)
    1c96:	4798      	blx	r3
}
    1c98:	bf00      	nop
    1c9a:	bd80      	pop	{r7, pc}
    1c9c:	40000800 	.word	0x40000800
    1ca0:	00000cdf 	.word	0x00000cdf
    1ca4:	40001c00 	.word	0x40001c00
    1ca8:	00000b39 	.word	0x00000b39

00001cac <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1cac:	b580      	push	{r7, lr}
    1cae:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1cb0:	4b05      	ldr	r3, [pc, #20]	; (1cc8 <TIMER_HVAC_init+0x1c>)
    1cb2:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1cb4:	4b05      	ldr	r3, [pc, #20]	; (1ccc <TIMER_HVAC_init+0x20>)
    1cb6:	4798      	blx	r3
    1cb8:	4603      	mov	r3, r0
    1cba:	461a      	mov	r2, r3
    1cbc:	4904      	ldr	r1, [pc, #16]	; (1cd0 <TIMER_HVAC_init+0x24>)
    1cbe:	4805      	ldr	r0, [pc, #20]	; (1cd4 <TIMER_HVAC_init+0x28>)
    1cc0:	4b05      	ldr	r3, [pc, #20]	; (1cd8 <TIMER_HVAC_init+0x2c>)
    1cc2:	4798      	blx	r3
}
    1cc4:	bf00      	nop
    1cc6:	bd80      	pop	{r7, pc}
    1cc8:	00001c85 	.word	0x00001c85
    1ccc:	00007e8d 	.word	0x00007e8d
    1cd0:	41016000 	.word	0x41016000
    1cd4:	20001230 	.word	0x20001230
    1cd8:	00002cad 	.word	0x00002cad

00001cdc <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1cdc:	b580      	push	{r7, lr}
    1cde:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1ce0:	4804      	ldr	r0, [pc, #16]	; (1cf4 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1ce2:	4b05      	ldr	r3, [pc, #20]	; (1cf8 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1ce4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ce6:	2244      	movs	r2, #68	; 0x44
    1ce8:	2119      	movs	r1, #25
    1cea:	4804      	ldr	r0, [pc, #16]	; (1cfc <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1cec:	4b04      	ldr	r3, [pc, #16]	; (1d00 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1cee:	4798      	blx	r3
}
    1cf0:	bf00      	nop
    1cf2:	bd80      	pop	{r7, pc}
    1cf4:	40000800 	.word	0x40000800
    1cf8:	00000cff 	.word	0x00000cff
    1cfc:	40001c00 	.word	0x40001c00
    1d00:	00000b39 	.word	0x00000b39

00001d04 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1d04:	b580      	push	{r7, lr}
    1d06:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1d08:	4b05      	ldr	r3, [pc, #20]	; (1d20 <TIMER_TEMPERATURES_init+0x1c>)
    1d0a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1d0c:	4b05      	ldr	r3, [pc, #20]	; (1d24 <TIMER_TEMPERATURES_init+0x20>)
    1d0e:	4798      	blx	r3
    1d10:	4603      	mov	r3, r0
    1d12:	461a      	mov	r2, r3
    1d14:	4904      	ldr	r1, [pc, #16]	; (1d28 <TIMER_TEMPERATURES_init+0x24>)
    1d16:	4805      	ldr	r0, [pc, #20]	; (1d2c <TIMER_TEMPERATURES_init+0x28>)
    1d18:	4b05      	ldr	r3, [pc, #20]	; (1d30 <TIMER_TEMPERATURES_init+0x2c>)
    1d1a:	4798      	blx	r3
}
    1d1c:	bf00      	nop
    1d1e:	bd80      	pop	{r7, pc}
    1d20:	00001cdd 	.word	0x00001cdd
    1d24:	00007e8d 	.word	0x00007e8d
    1d28:	41018000 	.word	0x41018000
    1d2c:	200010b8 	.word	0x200010b8
    1d30:	00002cad 	.word	0x00002cad

00001d34 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1d34:	b580      	push	{r7, lr}
    1d36:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1d38:	2102      	movs	r1, #2
    1d3a:	2018      	movs	r0, #24
    1d3c:	4b0f      	ldr	r3, [pc, #60]	; (1d7c <CDCUSB_PORT_init+0x48>)
    1d3e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1d40:	2100      	movs	r1, #0
    1d42:	2018      	movs	r0, #24
    1d44:	4b0e      	ldr	r3, [pc, #56]	; (1d80 <CDCUSB_PORT_init+0x4c>)
    1d46:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1d48:	2100      	movs	r1, #0
    1d4a:	2018      	movs	r0, #24
    1d4c:	4b0d      	ldr	r3, [pc, #52]	; (1d84 <CDCUSB_PORT_init+0x50>)
    1d4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1d50:	490d      	ldr	r1, [pc, #52]	; (1d88 <CDCUSB_PORT_init+0x54>)
    1d52:	2018      	movs	r0, #24
    1d54:	4b0d      	ldr	r3, [pc, #52]	; (1d8c <CDCUSB_PORT_init+0x58>)
    1d56:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1d58:	2102      	movs	r1, #2
    1d5a:	2019      	movs	r0, #25
    1d5c:	4b07      	ldr	r3, [pc, #28]	; (1d7c <CDCUSB_PORT_init+0x48>)
    1d5e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1d60:	2100      	movs	r1, #0
    1d62:	2019      	movs	r0, #25
    1d64:	4b06      	ldr	r3, [pc, #24]	; (1d80 <CDCUSB_PORT_init+0x4c>)
    1d66:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1d68:	2100      	movs	r1, #0
    1d6a:	2019      	movs	r0, #25
    1d6c:	4b05      	ldr	r3, [pc, #20]	; (1d84 <CDCUSB_PORT_init+0x50>)
    1d6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1d70:	4907      	ldr	r1, [pc, #28]	; (1d90 <CDCUSB_PORT_init+0x5c>)
    1d72:	2019      	movs	r0, #25
    1d74:	4b05      	ldr	r3, [pc, #20]	; (1d8c <CDCUSB_PORT_init+0x58>)
    1d76:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1d78:	bf00      	nop
    1d7a:	bd80      	pop	{r7, pc}
    1d7c:	0000138d 	.word	0x0000138d
    1d80:	000013c5 	.word	0x000013c5
    1d84:	00001339 	.word	0x00001339
    1d88:	00180007 	.word	0x00180007
    1d8c:	0000136d 	.word	0x0000136d
    1d90:	00190007 	.word	0x00190007

00001d94 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1d94:	b580      	push	{r7, lr}
    1d96:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1d98:	2242      	movs	r2, #66	; 0x42
    1d9a:	210a      	movs	r1, #10
    1d9c:	4805      	ldr	r0, [pc, #20]	; (1db4 <CDCUSB_CLOCK_init+0x20>)
    1d9e:	4b06      	ldr	r3, [pc, #24]	; (1db8 <CDCUSB_CLOCK_init+0x24>)
    1da0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1da2:	4806      	ldr	r0, [pc, #24]	; (1dbc <CDCUSB_CLOCK_init+0x28>)
    1da4:	4b06      	ldr	r3, [pc, #24]	; (1dc0 <CDCUSB_CLOCK_init+0x2c>)
    1da6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1da8:	4804      	ldr	r0, [pc, #16]	; (1dbc <CDCUSB_CLOCK_init+0x28>)
    1daa:	4b06      	ldr	r3, [pc, #24]	; (1dc4 <CDCUSB_CLOCK_init+0x30>)
    1dac:	4798      	blx	r3
}
    1dae:	bf00      	nop
    1db0:	bd80      	pop	{r7, pc}
    1db2:	bf00      	nop
    1db4:	40001c00 	.word	0x40001c00
    1db8:	00000b39 	.word	0x00000b39
    1dbc:	40000800 	.word	0x40000800
    1dc0:	00000b5f 	.word	0x00000b5f
    1dc4:	00000c7f 	.word	0x00000c7f

00001dc8 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1dc8:	b580      	push	{r7, lr}
    1dca:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1dcc:	4b03      	ldr	r3, [pc, #12]	; (1ddc <CDCUSB_init+0x14>)
    1dce:	4798      	blx	r3
	usb_d_init();
    1dd0:	4b03      	ldr	r3, [pc, #12]	; (1de0 <CDCUSB_init+0x18>)
    1dd2:	4798      	blx	r3
	CDCUSB_PORT_init();
    1dd4:	4b03      	ldr	r3, [pc, #12]	; (1de4 <CDCUSB_init+0x1c>)
    1dd6:	4798      	blx	r3
}
    1dd8:	bf00      	nop
    1dda:	bd80      	pop	{r7, pc}
    1ddc:	00001d95 	.word	0x00001d95
    1de0:	00003509 	.word	0x00003509
    1de4:	00001d35 	.word	0x00001d35

00001de8 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1de8:	b580      	push	{r7, lr}
    1dea:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1dec:	4802      	ldr	r0, [pc, #8]	; (1df8 <WATCHDOG_CLOCK_init+0x10>)
    1dee:	4b03      	ldr	r3, [pc, #12]	; (1dfc <WATCHDOG_CLOCK_init+0x14>)
    1df0:	4798      	blx	r3
}
    1df2:	bf00      	nop
    1df4:	bd80      	pop	{r7, pc}
    1df6:	bf00      	nop
    1df8:	40000800 	.word	0x40000800
    1dfc:	00000bdf 	.word	0x00000bdf

00001e00 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1e00:	b580      	push	{r7, lr}
    1e02:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1e04:	4b03      	ldr	r3, [pc, #12]	; (1e14 <WATCHDOG_init+0x14>)
    1e06:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1e08:	4903      	ldr	r1, [pc, #12]	; (1e18 <WATCHDOG_init+0x18>)
    1e0a:	4804      	ldr	r0, [pc, #16]	; (1e1c <WATCHDOG_init+0x1c>)
    1e0c:	4b04      	ldr	r3, [pc, #16]	; (1e20 <WATCHDOG_init+0x20>)
    1e0e:	4798      	blx	r3
}
    1e10:	bf00      	nop
    1e12:	bd80      	pop	{r7, pc}
    1e14:	00001de9 	.word	0x00001de9
    1e18:	40002000 	.word	0x40002000
    1e1c:	200012b0 	.word	0x200012b0
    1e20:	0000140d 	.word	0x0000140d

00001e24 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1e28:	4904      	ldr	r1, [pc, #16]	; (1e3c <CAN_CCU_PORT_init+0x18>)
    1e2a:	202d      	movs	r0, #45	; 0x2d
    1e2c:	4b04      	ldr	r3, [pc, #16]	; (1e40 <CAN_CCU_PORT_init+0x1c>)
    1e2e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1e30:	4904      	ldr	r1, [pc, #16]	; (1e44 <CAN_CCU_PORT_init+0x20>)
    1e32:	202c      	movs	r0, #44	; 0x2c
    1e34:	4b02      	ldr	r3, [pc, #8]	; (1e40 <CAN_CCU_PORT_init+0x1c>)
    1e36:	4798      	blx	r3
}
    1e38:	bf00      	nop
    1e3a:	bd80      	pop	{r7, pc}
    1e3c:	002d0007 	.word	0x002d0007
    1e40:	0000136d 	.word	0x0000136d
    1e44:	002c0007 	.word	0x002c0007

00001e48 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1e48:	b580      	push	{r7, lr}
    1e4a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1e4c:	4807      	ldr	r0, [pc, #28]	; (1e6c <CAN_CCU_init+0x24>)
    1e4e:	4b08      	ldr	r3, [pc, #32]	; (1e70 <CAN_CCU_init+0x28>)
    1e50:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e52:	2243      	movs	r2, #67	; 0x43
    1e54:	211c      	movs	r1, #28
    1e56:	4807      	ldr	r0, [pc, #28]	; (1e74 <CAN_CCU_init+0x2c>)
    1e58:	4b07      	ldr	r3, [pc, #28]	; (1e78 <CAN_CCU_init+0x30>)
    1e5a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1e5c:	4907      	ldr	r1, [pc, #28]	; (1e7c <CAN_CCU_init+0x34>)
    1e5e:	4808      	ldr	r0, [pc, #32]	; (1e80 <CAN_CCU_init+0x38>)
    1e60:	4b08      	ldr	r3, [pc, #32]	; (1e84 <CAN_CCU_init+0x3c>)
    1e62:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1e64:	4b08      	ldr	r3, [pc, #32]	; (1e88 <CAN_CCU_init+0x40>)
    1e66:	4798      	blx	r3
}
    1e68:	bf00      	nop
    1e6a:	bd80      	pop	{r7, pc}
    1e6c:	40000800 	.word	0x40000800
    1e70:	00000b9f 	.word	0x00000b9f
    1e74:	40001c00 	.word	0x40001c00
    1e78:	00000b39 	.word	0x00000b39
    1e7c:	42000400 	.word	0x42000400
    1e80:	20001188 	.word	0x20001188
    1e84:	000020e5 	.word	0x000020e5
    1e88:	00001e25 	.word	0x00001e25

00001e8c <system_init>:

void system_init(void)
{
    1e8c:	b580      	push	{r7, lr}
    1e8e:	af00      	add	r7, sp, #0
	init_mcu();
    1e90:	4b5e      	ldr	r3, [pc, #376]	; (200c <system_init+0x180>)
    1e92:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1e94:	2100      	movs	r1, #0
    1e96:	2007      	movs	r0, #7
    1e98:	4b5d      	ldr	r3, [pc, #372]	; (2010 <system_init+0x184>)
    1e9a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1e9c:	2102      	movs	r1, #2
    1e9e:	2007      	movs	r0, #7
    1ea0:	4b5c      	ldr	r3, [pc, #368]	; (2014 <system_init+0x188>)
    1ea2:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1ea4:	f04f 31ff 	mov.w	r1, #4294967295
    1ea8:	2007      	movs	r0, #7
    1eaa:	4b5b      	ldr	r3, [pc, #364]	; (2018 <system_init+0x18c>)
    1eac:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1eae:	2101      	movs	r1, #1
    1eb0:	200f      	movs	r0, #15
    1eb2:	4b57      	ldr	r3, [pc, #348]	; (2010 <system_init+0x184>)
    1eb4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1eb6:	2102      	movs	r1, #2
    1eb8:	200f      	movs	r0, #15
    1eba:	4b56      	ldr	r3, [pc, #344]	; (2014 <system_init+0x188>)
    1ebc:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1ebe:	f04f 31ff 	mov.w	r1, #4294967295
    1ec2:	200f      	movs	r0, #15
    1ec4:	4b54      	ldr	r3, [pc, #336]	; (2018 <system_init+0x18c>)
    1ec6:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1ec8:	2101      	movs	r1, #1
    1eca:	2013      	movs	r0, #19
    1ecc:	4b50      	ldr	r3, [pc, #320]	; (2010 <system_init+0x184>)
    1ece:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1ed0:	2102      	movs	r1, #2
    1ed2:	2013      	movs	r0, #19
    1ed4:	4b4f      	ldr	r3, [pc, #316]	; (2014 <system_init+0x188>)
    1ed6:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1ed8:	f04f 31ff 	mov.w	r1, #4294967295
    1edc:	2013      	movs	r0, #19
    1ede:	4b4e      	ldr	r3, [pc, #312]	; (2018 <system_init+0x18c>)
    1ee0:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1ee2:	2101      	movs	r1, #1
    1ee4:	201b      	movs	r0, #27
    1ee6:	4b4a      	ldr	r3, [pc, #296]	; (2010 <system_init+0x184>)
    1ee8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1eea:	2102      	movs	r1, #2
    1eec:	201b      	movs	r0, #27
    1eee:	4b49      	ldr	r3, [pc, #292]	; (2014 <system_init+0x188>)
    1ef0:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1ef2:	f04f 31ff 	mov.w	r1, #4294967295
    1ef6:	201b      	movs	r0, #27
    1ef8:	4b47      	ldr	r3, [pc, #284]	; (2018 <system_init+0x18c>)
    1efa:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    1efc:	2101      	movs	r1, #1
    1efe:	2027      	movs	r0, #39	; 0x27
    1f00:	4b44      	ldr	r3, [pc, #272]	; (2014 <system_init+0x188>)
    1f02:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    1f04:	2102      	movs	r1, #2
    1f06:	2027      	movs	r0, #39	; 0x27
    1f08:	4b44      	ldr	r3, [pc, #272]	; (201c <system_init+0x190>)
    1f0a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    1f0c:	f04f 31ff 	mov.w	r1, #4294967295
    1f10:	2027      	movs	r0, #39	; 0x27
    1f12:	4b41      	ldr	r3, [pc, #260]	; (2018 <system_init+0x18c>)
    1f14:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1f16:	2101      	movs	r1, #1
    1f18:	203d      	movs	r0, #61	; 0x3d
    1f1a:	4b3d      	ldr	r3, [pc, #244]	; (2010 <system_init+0x184>)
    1f1c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1f1e:	2102      	movs	r1, #2
    1f20:	203d      	movs	r0, #61	; 0x3d
    1f22:	4b3c      	ldr	r3, [pc, #240]	; (2014 <system_init+0x188>)
    1f24:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1f26:	f04f 31ff 	mov.w	r1, #4294967295
    1f2a:	203d      	movs	r0, #61	; 0x3d
    1f2c:	4b3a      	ldr	r3, [pc, #232]	; (2018 <system_init+0x18c>)
    1f2e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1f30:	2101      	movs	r1, #1
    1f32:	203f      	movs	r0, #63	; 0x3f
    1f34:	4b37      	ldr	r3, [pc, #220]	; (2014 <system_init+0x188>)
    1f36:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1f38:	2101      	movs	r1, #1
    1f3a:	203f      	movs	r0, #63	; 0x3f
    1f3c:	4b37      	ldr	r3, [pc, #220]	; (201c <system_init+0x190>)
    1f3e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1f40:	f04f 31ff 	mov.w	r1, #4294967295
    1f44:	203f      	movs	r0, #63	; 0x3f
    1f46:	4b34      	ldr	r3, [pc, #208]	; (2018 <system_init+0x18c>)
    1f48:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1f4a:	2100      	movs	r1, #0
    1f4c:	204d      	movs	r0, #77	; 0x4d
    1f4e:	4b30      	ldr	r3, [pc, #192]	; (2010 <system_init+0x184>)
    1f50:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1f52:	2102      	movs	r1, #2
    1f54:	204d      	movs	r0, #77	; 0x4d
    1f56:	4b2f      	ldr	r3, [pc, #188]	; (2014 <system_init+0x188>)
    1f58:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1f5a:	f04f 31ff 	mov.w	r1, #4294967295
    1f5e:	204d      	movs	r0, #77	; 0x4d
    1f60:	4b2d      	ldr	r3, [pc, #180]	; (2018 <system_init+0x18c>)
    1f62:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1f64:	2101      	movs	r1, #1
    1f66:	204e      	movs	r0, #78	; 0x4e
    1f68:	4b29      	ldr	r3, [pc, #164]	; (2010 <system_init+0x184>)
    1f6a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1f6c:	2102      	movs	r1, #2
    1f6e:	204e      	movs	r0, #78	; 0x4e
    1f70:	4b28      	ldr	r3, [pc, #160]	; (2014 <system_init+0x188>)
    1f72:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1f74:	f04f 31ff 	mov.w	r1, #4294967295
    1f78:	204e      	movs	r0, #78	; 0x4e
    1f7a:	4b27      	ldr	r3, [pc, #156]	; (2018 <system_init+0x18c>)
    1f7c:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1f7e:	2100      	movs	r1, #0
    1f80:	204f      	movs	r0, #79	; 0x4f
    1f82:	4b23      	ldr	r3, [pc, #140]	; (2010 <system_init+0x184>)
    1f84:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1f86:	2102      	movs	r1, #2
    1f88:	204f      	movs	r0, #79	; 0x4f
    1f8a:	4b22      	ldr	r3, [pc, #136]	; (2014 <system_init+0x188>)
    1f8c:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1f8e:	f04f 31ff 	mov.w	r1, #4294967295
    1f92:	204f      	movs	r0, #79	; 0x4f
    1f94:	4b20      	ldr	r3, [pc, #128]	; (2018 <system_init+0x18c>)
    1f96:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1f98:	2100      	movs	r1, #0
    1f9a:	2052      	movs	r0, #82	; 0x52
    1f9c:	4b1c      	ldr	r3, [pc, #112]	; (2010 <system_init+0x184>)
    1f9e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1fa0:	2102      	movs	r1, #2
    1fa2:	2052      	movs	r0, #82	; 0x52
    1fa4:	4b1b      	ldr	r3, [pc, #108]	; (2014 <system_init+0x188>)
    1fa6:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1fa8:	f04f 31ff 	mov.w	r1, #4294967295
    1fac:	2052      	movs	r0, #82	; 0x52
    1fae:	4b1a      	ldr	r3, [pc, #104]	; (2018 <system_init+0x18c>)
    1fb0:	4798      	blx	r3

	CRC_CALC_init();
    1fb2:	4b1b      	ldr	r3, [pc, #108]	; (2020 <system_init+0x194>)
    1fb4:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1fb6:	4b1b      	ldr	r3, [pc, #108]	; (2024 <system_init+0x198>)
    1fb8:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1fba:	4b1b      	ldr	r3, [pc, #108]	; (2028 <system_init+0x19c>)
    1fbc:	4798      	blx	r3

	QSPI_N25Q256_init();
    1fbe:	4b1b      	ldr	r3, [pc, #108]	; (202c <system_init+0x1a0>)
    1fc0:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1fc2:	4b1b      	ldr	r3, [pc, #108]	; (2030 <system_init+0x1a4>)
    1fc4:	4798      	blx	r3

	I2C_SHARED_init();
    1fc6:	4b1b      	ldr	r3, [pc, #108]	; (2034 <system_init+0x1a8>)
    1fc8:	4798      	blx	r3

	SPI_TEMP_init();
    1fca:	4b1b      	ldr	r3, [pc, #108]	; (2038 <system_init+0x1ac>)
    1fcc:	4798      	blx	r3

	I2C_EXPANDER_init();
    1fce:	4b1b      	ldr	r3, [pc, #108]	; (203c <system_init+0x1b0>)
    1fd0:	4798      	blx	r3

	SPI_HI3593_init();
    1fd2:	4b1b      	ldr	r3, [pc, #108]	; (2040 <system_init+0x1b4>)
    1fd4:	4798      	blx	r3

	I2C_EEPROM_init();
    1fd6:	4b1b      	ldr	r3, [pc, #108]	; (2044 <system_init+0x1b8>)
    1fd8:	4798      	blx	r3

	TIMER_USB_init();
    1fda:	4b1b      	ldr	r3, [pc, #108]	; (2048 <system_init+0x1bc>)
    1fdc:	4798      	blx	r3
	TIMER_ARINC_init();
    1fde:	4b1b      	ldr	r3, [pc, #108]	; (204c <system_init+0x1c0>)
    1fe0:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1fe2:	4b1b      	ldr	r3, [pc, #108]	; (2050 <system_init+0x1c4>)
    1fe4:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1fe6:	4b1b      	ldr	r3, [pc, #108]	; (2054 <system_init+0x1c8>)
    1fe8:	4798      	blx	r3
	TIMER_EVENT_init();
    1fea:	4b1b      	ldr	r3, [pc, #108]	; (2058 <system_init+0x1cc>)
    1fec:	4798      	blx	r3
	LIVE_PULSE_init();
    1fee:	4b1b      	ldr	r3, [pc, #108]	; (205c <system_init+0x1d0>)
    1ff0:	4798      	blx	r3

	TIMER_HVAC_init();
    1ff2:	4b1b      	ldr	r3, [pc, #108]	; (2060 <system_init+0x1d4>)
    1ff4:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1ff6:	4b1b      	ldr	r3, [pc, #108]	; (2064 <system_init+0x1d8>)
    1ff8:	4798      	blx	r3

	CDCUSB_init();
    1ffa:	4b1b      	ldr	r3, [pc, #108]	; (2068 <system_init+0x1dc>)
    1ffc:	4798      	blx	r3

	WATCHDOG_init();
    1ffe:	4b1b      	ldr	r3, [pc, #108]	; (206c <system_init+0x1e0>)
    2000:	4798      	blx	r3
	CAN_CCU_init();
    2002:	4b1b      	ldr	r3, [pc, #108]	; (2070 <system_init+0x1e4>)
    2004:	4798      	blx	r3
}
    2006:	bf00      	nop
    2008:	bd80      	pop	{r7, pc}
    200a:	bf00      	nop
    200c:	000013fd 	.word	0x000013fd
    2010:	000013c5 	.word	0x000013c5
    2014:	0000138d 	.word	0x0000138d
    2018:	0000136d 	.word	0x0000136d
    201c:	00001339 	.word	0x00001339
    2020:	0000145d 	.word	0x0000145d
    2024:	00001489 	.word	0x00001489
    2028:	00001595 	.word	0x00001595
    202c:	000016dd 	.word	0x000016dd
    2030:	00001721 	.word	0x00001721
    2034:	000017b1 	.word	0x000017b1
    2038:	0000187d 	.word	0x0000187d
    203c:	00001915 	.word	0x00001915
    2040:	000019e1 	.word	0x000019e1
    2044:	00001a79 	.word	0x00001a79
    2048:	00001aa5 	.word	0x00001aa5
    204c:	00001aed 	.word	0x00001aed
    2050:	00001b35 	.word	0x00001b35
    2054:	00001b7d 	.word	0x00001b7d
    2058:	00001bc5 	.word	0x00001bc5
    205c:	00001c4d 	.word	0x00001c4d
    2060:	00001cad 	.word	0x00001cad
    2064:	00001d05 	.word	0x00001d05
    2068:	00001dc9 	.word	0x00001dc9
    206c:	00001e01 	.word	0x00001e01
    2070:	00001e49 	.word	0x00001e49

00002074 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2074:	b580      	push	{r7, lr}
    2076:	b084      	sub	sp, #16
    2078:	af00      	add	r7, sp, #0
    207a:	6078      	str	r0, [r7, #4]
    207c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    207e:	2300      	movs	r3, #0
    2080:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	2b00      	cmp	r3, #0
    2086:	bf14      	ite	ne
    2088:	2301      	movne	r3, #1
    208a:	2300      	moveq	r3, #0
    208c:	b2db      	uxtb	r3, r3
    208e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    2092:	4911      	ldr	r1, [pc, #68]	; (20d8 <calendar_init+0x64>)
    2094:	4618      	mov	r0, r3
    2096:	4b11      	ldr	r3, [pc, #68]	; (20dc <calendar_init+0x68>)
    2098:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    209a:	687b      	ldr	r3, [r7, #4]
    209c:	681a      	ldr	r2, [r3, #0]
    209e:	683b      	ldr	r3, [r7, #0]
    20a0:	429a      	cmp	r2, r3
    20a2:	d101      	bne.n	20a8 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    20a4:	2300      	movs	r3, #0
    20a6:	e013      	b.n	20d0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    20a8:	687b      	ldr	r3, [r7, #4]
    20aa:	681b      	ldr	r3, [r3, #0]
    20ac:	2b00      	cmp	r3, #0
    20ae:	d002      	beq.n	20b6 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    20b0:	f06f 0311 	mvn.w	r3, #17
    20b4:	e00c      	b.n	20d0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    20b6:	687b      	ldr	r3, [r7, #4]
    20b8:	683a      	ldr	r2, [r7, #0]
    20ba:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    20bc:	687b      	ldr	r3, [r7, #4]
    20be:	4618      	mov	r0, r3
    20c0:	4b07      	ldr	r3, [pc, #28]	; (20e0 <calendar_init+0x6c>)
    20c2:	4798      	blx	r3
    20c4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    20c6:	687b      	ldr	r3, [r7, #4]
    20c8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    20cc:	619a      	str	r2, [r3, #24]

	return ret;
    20ce:	68fb      	ldr	r3, [r7, #12]
}
    20d0:	4618      	mov	r0, r3
    20d2:	3710      	adds	r7, #16
    20d4:	46bd      	mov	sp, r7
    20d6:	bd80      	pop	{r7, pc}
    20d8:	0000fdf4 	.word	0x0000fdf4
    20dc:	00003ab1 	.word	0x00003ab1
    20e0:	00005e39 	.word	0x00005e39

000020e4 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    20e4:	b580      	push	{r7, lr}
    20e6:	b084      	sub	sp, #16
    20e8:	af00      	add	r7, sp, #0
    20ea:	6078      	str	r0, [r7, #4]
    20ec:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d004      	beq.n	20fe <can_async_init+0x1a>
    20f4:	683b      	ldr	r3, [r7, #0]
    20f6:	2b00      	cmp	r3, #0
    20f8:	d001      	beq.n	20fe <can_async_init+0x1a>
    20fa:	2301      	movs	r3, #1
    20fc:	e000      	b.n	2100 <can_async_init+0x1c>
    20fe:	2300      	movs	r3, #0
    2100:	f003 0301 	and.w	r3, r3, #1
    2104:	b2db      	uxtb	r3, r3
    2106:	2241      	movs	r2, #65	; 0x41
    2108:	490e      	ldr	r1, [pc, #56]	; (2144 <can_async_init+0x60>)
    210a:	4618      	mov	r0, r3
    210c:	4b0e      	ldr	r3, [pc, #56]	; (2148 <can_async_init+0x64>)
    210e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	6839      	ldr	r1, [r7, #0]
    2114:	4618      	mov	r0, r3
    2116:	4b0d      	ldr	r3, [pc, #52]	; (214c <can_async_init+0x68>)
    2118:	4798      	blx	r3
    211a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    211c:	68fb      	ldr	r3, [r7, #12]
    211e:	2b00      	cmp	r3, #0
    2120:	d001      	beq.n	2126 <can_async_init+0x42>
		return rc;
    2122:	68fb      	ldr	r3, [r7, #12]
    2124:	e009      	b.n	213a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    2126:	687b      	ldr	r3, [r7, #4]
    2128:	4a09      	ldr	r2, [pc, #36]	; (2150 <can_async_init+0x6c>)
    212a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    212c:	687b      	ldr	r3, [r7, #4]
    212e:	4a09      	ldr	r2, [pc, #36]	; (2154 <can_async_init+0x70>)
    2130:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	4a08      	ldr	r2, [pc, #32]	; (2158 <can_async_init+0x74>)
    2136:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2138:	2300      	movs	r3, #0
}
    213a:	4618      	mov	r0, r3
    213c:	3710      	adds	r7, #16
    213e:	46bd      	mov	sp, r7
    2140:	bd80      	pop	{r7, pc}
    2142:	bf00      	nop
    2144:	0000fe10 	.word	0x0000fe10
    2148:	00003ab1 	.word	0x00003ab1
    214c:	0000400d 	.word	0x0000400d
    2150:	0000215d 	.word	0x0000215d
    2154:	00002181 	.word	0x00002181
    2158:	000021a5 	.word	0x000021a5

0000215c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    215c:	b580      	push	{r7, lr}
    215e:	b084      	sub	sp, #16
    2160:	af00      	add	r7, sp, #0
    2162:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2168:	68fb      	ldr	r3, [r7, #12]
    216a:	69db      	ldr	r3, [r3, #28]
    216c:	2b00      	cmp	r3, #0
    216e:	d003      	beq.n	2178 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2170:	68fb      	ldr	r3, [r7, #12]
    2172:	69db      	ldr	r3, [r3, #28]
    2174:	68f8      	ldr	r0, [r7, #12]
    2176:	4798      	blx	r3
	}
}
    2178:	bf00      	nop
    217a:	3710      	adds	r7, #16
    217c:	46bd      	mov	sp, r7
    217e:	bd80      	pop	{r7, pc}

00002180 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2180:	b580      	push	{r7, lr}
    2182:	b084      	sub	sp, #16
    2184:	af00      	add	r7, sp, #0
    2186:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    218c:	68fb      	ldr	r3, [r7, #12]
    218e:	6a1b      	ldr	r3, [r3, #32]
    2190:	2b00      	cmp	r3, #0
    2192:	d003      	beq.n	219c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2194:	68fb      	ldr	r3, [r7, #12]
    2196:	6a1b      	ldr	r3, [r3, #32]
    2198:	68f8      	ldr	r0, [r7, #12]
    219a:	4798      	blx	r3
	}
}
    219c:	bf00      	nop
    219e:	3710      	adds	r7, #16
    21a0:	46bd      	mov	sp, r7
    21a2:	bd80      	pop	{r7, pc}

000021a4 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    21a4:	b580      	push	{r7, lr}
    21a6:	b084      	sub	sp, #16
    21a8:	af00      	add	r7, sp, #0
    21aa:	6078      	str	r0, [r7, #4]
    21ac:	460b      	mov	r3, r1
    21ae:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    21b4:	68fb      	ldr	r3, [r7, #12]
    21b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    21b8:	2b00      	cmp	r3, #0
    21ba:	d005      	beq.n	21c8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    21bc:	68fb      	ldr	r3, [r7, #12]
    21be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    21c0:	78fa      	ldrb	r2, [r7, #3]
    21c2:	4611      	mov	r1, r2
    21c4:	68f8      	ldr	r0, [r7, #12]
    21c6:	4798      	blx	r3
	}
}
    21c8:	bf00      	nop
    21ca:	3710      	adds	r7, #16
    21cc:	46bd      	mov	sp, r7
    21ce:	bd80      	pop	{r7, pc}

000021d0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	b082      	sub	sp, #8
    21d4:	af00      	add	r7, sp, #0
    21d6:	6078      	str	r0, [r7, #4]
    21d8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	2b00      	cmp	r3, #0
    21de:	d004      	beq.n	21ea <crc_sync_init+0x1a>
    21e0:	683b      	ldr	r3, [r7, #0]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d001      	beq.n	21ea <crc_sync_init+0x1a>
    21e6:	2301      	movs	r3, #1
    21e8:	e000      	b.n	21ec <crc_sync_init+0x1c>
    21ea:	2300      	movs	r3, #0
    21ec:	f003 0301 	and.w	r3, r3, #1
    21f0:	b2db      	uxtb	r3, r3
    21f2:	222b      	movs	r2, #43	; 0x2b
    21f4:	4906      	ldr	r1, [pc, #24]	; (2210 <crc_sync_init+0x40>)
    21f6:	4618      	mov	r0, r3
    21f8:	4b06      	ldr	r3, [pc, #24]	; (2214 <crc_sync_init+0x44>)
    21fa:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    21fc:	687b      	ldr	r3, [r7, #4]
    21fe:	6839      	ldr	r1, [r7, #0]
    2200:	4618      	mov	r0, r3
    2202:	4b05      	ldr	r3, [pc, #20]	; (2218 <crc_sync_init+0x48>)
    2204:	4798      	blx	r3
    2206:	4603      	mov	r3, r0
}
    2208:	4618      	mov	r0, r3
    220a:	3708      	adds	r7, #8
    220c:	46bd      	mov	sp, r7
    220e:	bd80      	pop	{r7, pc}
    2210:	0000fe2c 	.word	0x0000fe2c
    2214:	00003ab1 	.word	0x00003ab1
    2218:	00004711 	.word	0x00004711

0000221c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    221c:	b590      	push	{r4, r7, lr}
    221e:	b083      	sub	sp, #12
    2220:	af00      	add	r7, sp, #0
    2222:	4603      	mov	r3, r0
    2224:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2226:	4b07      	ldr	r3, [pc, #28]	; (2244 <delay_us+0x28>)
    2228:	681c      	ldr	r4, [r3, #0]
    222a:	88fb      	ldrh	r3, [r7, #6]
    222c:	4618      	mov	r0, r3
    222e:	4b06      	ldr	r3, [pc, #24]	; (2248 <delay_us+0x2c>)
    2230:	4798      	blx	r3
    2232:	4603      	mov	r3, r0
    2234:	4619      	mov	r1, r3
    2236:	4620      	mov	r0, r4
    2238:	4b04      	ldr	r3, [pc, #16]	; (224c <delay_us+0x30>)
    223a:	4798      	blx	r3
}
    223c:	bf00      	nop
    223e:	370c      	adds	r7, #12
    2240:	46bd      	mov	sp, r7
    2242:	bd90      	pop	{r4, r7, pc}
    2244:	20000698 	.word	0x20000698
    2248:	00004465 	.word	0x00004465
    224c:	000045f9 	.word	0x000045f9

00002250 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2250:	b590      	push	{r4, r7, lr}
    2252:	b083      	sub	sp, #12
    2254:	af00      	add	r7, sp, #0
    2256:	4603      	mov	r3, r0
    2258:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    225a:	4b07      	ldr	r3, [pc, #28]	; (2278 <delay_ms+0x28>)
    225c:	681c      	ldr	r4, [r3, #0]
    225e:	88fb      	ldrh	r3, [r7, #6]
    2260:	4618      	mov	r0, r3
    2262:	4b06      	ldr	r3, [pc, #24]	; (227c <delay_ms+0x2c>)
    2264:	4798      	blx	r3
    2266:	4603      	mov	r3, r0
    2268:	4619      	mov	r1, r3
    226a:	4620      	mov	r0, r4
    226c:	4b04      	ldr	r3, [pc, #16]	; (2280 <delay_ms+0x30>)
    226e:	4798      	blx	r3
}
    2270:	bf00      	nop
    2272:	370c      	adds	r7, #12
    2274:	46bd      	mov	sp, r7
    2276:	bd90      	pop	{r4, r7, pc}
    2278:	20000698 	.word	0x20000698
    227c:	000045d1 	.word	0x000045d1
    2280:	000045f9 	.word	0x000045f9

00002284 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2284:	b580      	push	{r7, lr}
    2286:	af00      	add	r7, sp, #0
	return _event_system_init();
    2288:	4b02      	ldr	r3, [pc, #8]	; (2294 <event_system_init+0x10>)
    228a:	4798      	blx	r3
    228c:	4603      	mov	r3, r0
}
    228e:	4618      	mov	r0, r3
    2290:	bd80      	pop	{r7, pc}
    2292:	bf00      	nop
    2294:	00004ead 	.word	0x00004ead

00002298 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2298:	b580      	push	{r7, lr}
    229a:	b082      	sub	sp, #8
    229c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    229e:	2300      	movs	r3, #0
    22a0:	80fb      	strh	r3, [r7, #6]
    22a2:	e00e      	b.n	22c2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    22a4:	88fb      	ldrh	r3, [r7, #6]
    22a6:	4a0c      	ldr	r2, [pc, #48]	; (22d8 <ext_irq_init+0x40>)
    22a8:	00db      	lsls	r3, r3, #3
    22aa:	4413      	add	r3, r2
    22ac:	f04f 32ff 	mov.w	r2, #4294967295
    22b0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    22b2:	88fb      	ldrh	r3, [r7, #6]
    22b4:	4a08      	ldr	r2, [pc, #32]	; (22d8 <ext_irq_init+0x40>)
    22b6:	2100      	movs	r1, #0
    22b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    22bc:	88fb      	ldrh	r3, [r7, #6]
    22be:	3301      	adds	r3, #1
    22c0:	80fb      	strh	r3, [r7, #6]
    22c2:	88fb      	ldrh	r3, [r7, #6]
    22c4:	2b07      	cmp	r3, #7
    22c6:	d9ed      	bls.n	22a4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    22c8:	4804      	ldr	r0, [pc, #16]	; (22dc <ext_irq_init+0x44>)
    22ca:	4b05      	ldr	r3, [pc, #20]	; (22e0 <ext_irq_init+0x48>)
    22cc:	4798      	blx	r3
    22ce:	4603      	mov	r3, r0
}
    22d0:	4618      	mov	r0, r3
    22d2:	3708      	adds	r7, #8
    22d4:	46bd      	mov	sp, r7
    22d6:	bd80      	pop	{r7, pc}
    22d8:	2000069c 	.word	0x2000069c
    22dc:	0000243d 	.word	0x0000243d
    22e0:	00004a51 	.word	0x00004a51

000022e4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    22e4:	b580      	push	{r7, lr}
    22e6:	b086      	sub	sp, #24
    22e8:	af00      	add	r7, sp, #0
    22ea:	6078      	str	r0, [r7, #4]
    22ec:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    22ee:	2300      	movs	r3, #0
    22f0:	75fb      	strb	r3, [r7, #23]
    22f2:	2300      	movs	r3, #0
    22f4:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    22f6:	2300      	movs	r3, #0
    22f8:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    22fa:	e012      	b.n	2322 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    22fc:	7dfb      	ldrb	r3, [r7, #23]
    22fe:	4a4d      	ldr	r2, [pc, #308]	; (2434 <ext_irq_register+0x150>)
    2300:	00db      	lsls	r3, r3, #3
    2302:	4413      	add	r3, r2
    2304:	685a      	ldr	r2, [r3, #4]
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	429a      	cmp	r2, r3
    230a:	d107      	bne.n	231c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    230c:	7dfb      	ldrb	r3, [r7, #23]
    230e:	4949      	ldr	r1, [pc, #292]	; (2434 <ext_irq_register+0x150>)
    2310:	683a      	ldr	r2, [r7, #0]
    2312:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2316:	2301      	movs	r3, #1
    2318:	757b      	strb	r3, [r7, #21]
			break;
    231a:	e005      	b.n	2328 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    231c:	7dfb      	ldrb	r3, [r7, #23]
    231e:	3301      	adds	r3, #1
    2320:	75fb      	strb	r3, [r7, #23]
    2322:	7dfb      	ldrb	r3, [r7, #23]
    2324:	2b07      	cmp	r3, #7
    2326:	d9e9      	bls.n	22fc <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2328:	683b      	ldr	r3, [r7, #0]
    232a:	2b00      	cmp	r3, #0
    232c:	d10e      	bne.n	234c <ext_irq_register+0x68>
		if (!found) {
    232e:	7d7b      	ldrb	r3, [r7, #21]
    2330:	f083 0301 	eor.w	r3, r3, #1
    2334:	b2db      	uxtb	r3, r3
    2336:	2b00      	cmp	r3, #0
    2338:	d002      	beq.n	2340 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    233a:	f06f 030c 	mvn.w	r3, #12
    233e:	e074      	b.n	242a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2340:	2100      	movs	r1, #0
    2342:	6878      	ldr	r0, [r7, #4]
    2344:	4b3c      	ldr	r3, [pc, #240]	; (2438 <ext_irq_register+0x154>)
    2346:	4798      	blx	r3
    2348:	4603      	mov	r3, r0
    234a:	e06e      	b.n	242a <ext_irq_register+0x146>
	}

	if (!found) {
    234c:	7d7b      	ldrb	r3, [r7, #21]
    234e:	f083 0301 	eor.w	r3, r3, #1
    2352:	b2db      	uxtb	r3, r3
    2354:	2b00      	cmp	r3, #0
    2356:	d05a      	beq.n	240e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2358:	2300      	movs	r3, #0
    235a:	75fb      	strb	r3, [r7, #23]
    235c:	e016      	b.n	238c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    235e:	7dfb      	ldrb	r3, [r7, #23]
    2360:	4a34      	ldr	r2, [pc, #208]	; (2434 <ext_irq_register+0x150>)
    2362:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2366:	2b00      	cmp	r3, #0
    2368:	d10d      	bne.n	2386 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    236a:	7dfb      	ldrb	r3, [r7, #23]
    236c:	4931      	ldr	r1, [pc, #196]	; (2434 <ext_irq_register+0x150>)
    236e:	683a      	ldr	r2, [r7, #0]
    2370:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2374:	7dfb      	ldrb	r3, [r7, #23]
    2376:	4a2f      	ldr	r2, [pc, #188]	; (2434 <ext_irq_register+0x150>)
    2378:	00db      	lsls	r3, r3, #3
    237a:	4413      	add	r3, r2
    237c:	687a      	ldr	r2, [r7, #4]
    237e:	605a      	str	r2, [r3, #4]
				found           = true;
    2380:	2301      	movs	r3, #1
    2382:	757b      	strb	r3, [r7, #21]
				break;
    2384:	e005      	b.n	2392 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2386:	7dfb      	ldrb	r3, [r7, #23]
    2388:	3301      	adds	r3, #1
    238a:	75fb      	strb	r3, [r7, #23]
    238c:	7dfb      	ldrb	r3, [r7, #23]
    238e:	2b07      	cmp	r3, #7
    2390:	d9e5      	bls.n	235e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2392:	e036      	b.n	2402 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2394:	7dfb      	ldrb	r3, [r7, #23]
    2396:	4a27      	ldr	r2, [pc, #156]	; (2434 <ext_irq_register+0x150>)
    2398:	00db      	lsls	r3, r3, #3
    239a:	4413      	add	r3, r2
    239c:	685a      	ldr	r2, [r3, #4]
    239e:	7dbb      	ldrb	r3, [r7, #22]
    23a0:	4924      	ldr	r1, [pc, #144]	; (2434 <ext_irq_register+0x150>)
    23a2:	00db      	lsls	r3, r3, #3
    23a4:	440b      	add	r3, r1
    23a6:	685b      	ldr	r3, [r3, #4]
    23a8:	429a      	cmp	r2, r3
    23aa:	d227      	bcs.n	23fc <ext_irq_register+0x118>
    23ac:	7dbb      	ldrb	r3, [r7, #22]
    23ae:	4a21      	ldr	r2, [pc, #132]	; (2434 <ext_irq_register+0x150>)
    23b0:	00db      	lsls	r3, r3, #3
    23b2:	4413      	add	r3, r2
    23b4:	685b      	ldr	r3, [r3, #4]
    23b6:	f1b3 3fff 	cmp.w	r3, #4294967295
    23ba:	d01f      	beq.n	23fc <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    23bc:	7dbb      	ldrb	r3, [r7, #22]
    23be:	491d      	ldr	r1, [pc, #116]	; (2434 <ext_irq_register+0x150>)
    23c0:	f107 020c 	add.w	r2, r7, #12
    23c4:	00db      	lsls	r3, r3, #3
    23c6:	440b      	add	r3, r1
    23c8:	e893 0003 	ldmia.w	r3, {r0, r1}
    23cc:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    23d0:	7dbb      	ldrb	r3, [r7, #22]
    23d2:	7dfa      	ldrb	r2, [r7, #23]
    23d4:	4817      	ldr	r0, [pc, #92]	; (2434 <ext_irq_register+0x150>)
    23d6:	4917      	ldr	r1, [pc, #92]	; (2434 <ext_irq_register+0x150>)
    23d8:	00db      	lsls	r3, r3, #3
    23da:	4403      	add	r3, r0
    23dc:	00d2      	lsls	r2, r2, #3
    23de:	440a      	add	r2, r1
    23e0:	e892 0003 	ldmia.w	r2, {r0, r1}
    23e4:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    23e8:	7dfb      	ldrb	r3, [r7, #23]
    23ea:	4a12      	ldr	r2, [pc, #72]	; (2434 <ext_irq_register+0x150>)
    23ec:	00db      	lsls	r3, r3, #3
    23ee:	4413      	add	r3, r2
    23f0:	f107 020c 	add.w	r2, r7, #12
    23f4:	e892 0003 	ldmia.w	r2, {r0, r1}
    23f8:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    23fc:	7dbb      	ldrb	r3, [r7, #22]
    23fe:	3301      	adds	r3, #1
    2400:	75bb      	strb	r3, [r7, #22]
    2402:	7dbb      	ldrb	r3, [r7, #22]
    2404:	2b07      	cmp	r3, #7
    2406:	d802      	bhi.n	240e <ext_irq_register+0x12a>
    2408:	7dfb      	ldrb	r3, [r7, #23]
    240a:	2b07      	cmp	r3, #7
    240c:	d9c2      	bls.n	2394 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    240e:	7d7b      	ldrb	r3, [r7, #21]
    2410:	f083 0301 	eor.w	r3, r3, #1
    2414:	b2db      	uxtb	r3, r3
    2416:	2b00      	cmp	r3, #0
    2418:	d002      	beq.n	2420 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    241a:	f06f 030c 	mvn.w	r3, #12
    241e:	e004      	b.n	242a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2420:	2101      	movs	r1, #1
    2422:	6878      	ldr	r0, [r7, #4]
    2424:	4b04      	ldr	r3, [pc, #16]	; (2438 <ext_irq_register+0x154>)
    2426:	4798      	blx	r3
    2428:	4603      	mov	r3, r0
}
    242a:	4618      	mov	r0, r3
    242c:	3718      	adds	r7, #24
    242e:	46bd      	mov	sp, r7
    2430:	bd80      	pop	{r7, pc}
    2432:	bf00      	nop
    2434:	2000069c 	.word	0x2000069c
    2438:	00004bd5 	.word	0x00004bd5

0000243c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    243c:	b580      	push	{r7, lr}
    243e:	b084      	sub	sp, #16
    2440:	af00      	add	r7, sp, #0
    2442:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2444:	2300      	movs	r3, #0
    2446:	73fb      	strb	r3, [r7, #15]
    2448:	2308      	movs	r3, #8
    244a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    244c:	e02a      	b.n	24a4 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    244e:	7bba      	ldrb	r2, [r7, #14]
    2450:	7bfb      	ldrb	r3, [r7, #15]
    2452:	4413      	add	r3, r2
    2454:	105b      	asrs	r3, r3, #1
    2456:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2458:	7b7b      	ldrb	r3, [r7, #13]
    245a:	2b07      	cmp	r3, #7
    245c:	d827      	bhi.n	24ae <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    245e:	7b7b      	ldrb	r3, [r7, #13]
    2460:	4a16      	ldr	r2, [pc, #88]	; (24bc <process_ext_irq+0x80>)
    2462:	00db      	lsls	r3, r3, #3
    2464:	4413      	add	r3, r2
    2466:	685a      	ldr	r2, [r3, #4]
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	429a      	cmp	r2, r3
    246c:	d10b      	bne.n	2486 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    246e:	7b7b      	ldrb	r3, [r7, #13]
    2470:	4a12      	ldr	r2, [pc, #72]	; (24bc <process_ext_irq+0x80>)
    2472:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2476:	2b00      	cmp	r3, #0
    2478:	d01b      	beq.n	24b2 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    247a:	7b7b      	ldrb	r3, [r7, #13]
    247c:	4a0f      	ldr	r2, [pc, #60]	; (24bc <process_ext_irq+0x80>)
    247e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2482:	4798      	blx	r3
			}
			return;
    2484:	e015      	b.n	24b2 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2486:	7b7b      	ldrb	r3, [r7, #13]
    2488:	4a0c      	ldr	r2, [pc, #48]	; (24bc <process_ext_irq+0x80>)
    248a:	00db      	lsls	r3, r3, #3
    248c:	4413      	add	r3, r2
    248e:	685a      	ldr	r2, [r3, #4]
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	429a      	cmp	r2, r3
    2494:	d203      	bcs.n	249e <process_ext_irq+0x62>
			lower = middle + 1;
    2496:	7b7b      	ldrb	r3, [r7, #13]
    2498:	3301      	adds	r3, #1
    249a:	73fb      	strb	r3, [r7, #15]
    249c:	e002      	b.n	24a4 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    249e:	7b7b      	ldrb	r3, [r7, #13]
    24a0:	3b01      	subs	r3, #1
    24a2:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    24a4:	7bba      	ldrb	r2, [r7, #14]
    24a6:	7bfb      	ldrb	r3, [r7, #15]
    24a8:	429a      	cmp	r2, r3
    24aa:	d2d0      	bcs.n	244e <process_ext_irq+0x12>
    24ac:	e002      	b.n	24b4 <process_ext_irq+0x78>
			return;
    24ae:	bf00      	nop
    24b0:	e000      	b.n	24b4 <process_ext_irq+0x78>
			return;
    24b2:	bf00      	nop
		}
	}
}
    24b4:	3710      	adds	r7, #16
    24b6:	46bd      	mov	sp, r7
    24b8:	bd80      	pop	{r7, pc}
    24ba:	bf00      	nop
    24bc:	2000069c 	.word	0x2000069c

000024c0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    24c0:	b580      	push	{r7, lr}
    24c2:	b084      	sub	sp, #16
    24c4:	af00      	add	r7, sp, #0
    24c6:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    24c8:	687b      	ldr	r3, [r7, #4]
    24ca:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    24cc:	687b      	ldr	r3, [r7, #4]
    24ce:	885b      	ldrh	r3, [r3, #2]
    24d0:	b29b      	uxth	r3, r3
    24d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    24d6:	2b00      	cmp	r3, #0
    24d8:	d107      	bne.n	24ea <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    24da:	68fb      	ldr	r3, [r7, #12]
    24dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    24de:	2b00      	cmp	r3, #0
    24e0:	d003      	beq.n	24ea <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    24e2:	68fb      	ldr	r3, [r7, #12]
    24e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    24e6:	68f8      	ldr	r0, [r7, #12]
    24e8:	4798      	blx	r3
		}
	}
}
    24ea:	bf00      	nop
    24ec:	3710      	adds	r7, #16
    24ee:	46bd      	mov	sp, r7
    24f0:	bd80      	pop	{r7, pc}

000024f2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    24f2:	b580      	push	{r7, lr}
    24f4:	b084      	sub	sp, #16
    24f6:	af00      	add	r7, sp, #0
    24f8:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    24fa:	687b      	ldr	r3, [r7, #4]
    24fc:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    24fe:	687b      	ldr	r3, [r7, #4]
    2500:	885b      	ldrh	r3, [r3, #2]
    2502:	b29b      	uxth	r3, r3
    2504:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2508:	2b00      	cmp	r3, #0
    250a:	d107      	bne.n	251c <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    250c:	68fb      	ldr	r3, [r7, #12]
    250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2510:	2b00      	cmp	r3, #0
    2512:	d003      	beq.n	251c <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    2514:	68fb      	ldr	r3, [r7, #12]
    2516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2518:	68f8      	ldr	r0, [r7, #12]
    251a:	4798      	blx	r3
		}
	}
}
    251c:	bf00      	nop
    251e:	3710      	adds	r7, #16
    2520:	46bd      	mov	sp, r7
    2522:	bd80      	pop	{r7, pc}

00002524 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    2524:	b580      	push	{r7, lr}
    2526:	b084      	sub	sp, #16
    2528:	af00      	add	r7, sp, #0
    252a:	6078      	str	r0, [r7, #4]
    252c:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    252e:	687b      	ldr	r3, [r7, #4]
    2530:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2532:	687b      	ldr	r3, [r7, #4]
    2534:	885b      	ldrh	r3, [r3, #2]
    2536:	b29b      	uxth	r3, r3
    2538:	f403 7380 	and.w	r3, r3, #256	; 0x100
    253c:	2b00      	cmp	r3, #0
    253e:	d108      	bne.n	2552 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    2540:	68fb      	ldr	r3, [r7, #12]
    2542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2544:	2b00      	cmp	r3, #0
    2546:	d004      	beq.n	2552 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    254c:	6839      	ldr	r1, [r7, #0]
    254e:	68f8      	ldr	r0, [r7, #12]
    2550:	4798      	blx	r3
		}
	}
}
    2552:	bf00      	nop
    2554:	3710      	adds	r7, #16
    2556:	46bd      	mov	sp, r7
    2558:	bd80      	pop	{r7, pc}
	...

0000255c <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    255c:	b580      	push	{r7, lr}
    255e:	b08a      	sub	sp, #40	; 0x28
    2560:	af00      	add	r7, sp, #0
    2562:	60f8      	str	r0, [r7, #12]
    2564:	60b9      	str	r1, [r7, #8]
    2566:	4613      	mov	r3, r2
    2568:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    256a:	68fb      	ldr	r3, [r7, #12]
    256c:	3b28      	subs	r3, #40	; 0x28
    256e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2572:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2574:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2576:	88fb      	ldrh	r3, [r7, #6]
    2578:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    257a:	f248 0301 	movw	r3, #32769	; 0x8001
    257e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2580:	68bb      	ldr	r3, [r7, #8]
    2582:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2586:	f107 0214 	add.w	r2, r7, #20
    258a:	4611      	mov	r1, r2
    258c:	4618      	mov	r0, r3
    258e:	4b06      	ldr	r3, [pc, #24]	; (25a8 <i2c_m_async_read+0x4c>)
    2590:	4798      	blx	r3
    2592:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2594:	6a3b      	ldr	r3, [r7, #32]
    2596:	2b00      	cmp	r3, #0
    2598:	d001      	beq.n	259e <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    259a:	6a3b      	ldr	r3, [r7, #32]
    259c:	e000      	b.n	25a0 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    259e:	88fb      	ldrh	r3, [r7, #6]
}
    25a0:	4618      	mov	r0, r3
    25a2:	3728      	adds	r7, #40	; 0x28
    25a4:	46bd      	mov	sp, r7
    25a6:	bd80      	pop	{r7, pc}
    25a8:	00006c99 	.word	0x00006c99

000025ac <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    25ac:	b580      	push	{r7, lr}
    25ae:	b08a      	sub	sp, #40	; 0x28
    25b0:	af00      	add	r7, sp, #0
    25b2:	60f8      	str	r0, [r7, #12]
    25b4:	60b9      	str	r1, [r7, #8]
    25b6:	4613      	mov	r3, r2
    25b8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    25ba:	68fb      	ldr	r3, [r7, #12]
    25bc:	3b28      	subs	r3, #40	; 0x28
    25be:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    25c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    25c4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    25c6:	88fb      	ldrh	r3, [r7, #6]
    25c8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    25ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    25ce:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    25d0:	68bb      	ldr	r3, [r7, #8]
    25d2:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    25d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25d6:	f107 0214 	add.w	r2, r7, #20
    25da:	4611      	mov	r1, r2
    25dc:	4618      	mov	r0, r3
    25de:	4b06      	ldr	r3, [pc, #24]	; (25f8 <i2c_m_async_write+0x4c>)
    25e0:	4798      	blx	r3
    25e2:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    25e4:	6a3b      	ldr	r3, [r7, #32]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d001      	beq.n	25ee <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    25ea:	6a3b      	ldr	r3, [r7, #32]
    25ec:	e000      	b.n	25f0 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    25ee:	88fb      	ldrh	r3, [r7, #6]
}
    25f0:	4618      	mov	r0, r3
    25f2:	3728      	adds	r7, #40	; 0x28
    25f4:	46bd      	mov	sp, r7
    25f6:	bd80      	pop	{r7, pc}
    25f8:	00006c99 	.word	0x00006c99

000025fc <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    25fc:	b580      	push	{r7, lr}
    25fe:	b084      	sub	sp, #16
    2600:	af00      	add	r7, sp, #0
    2602:	6078      	str	r0, [r7, #4]
    2604:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2606:	687b      	ldr	r3, [r7, #4]
    2608:	2b00      	cmp	r3, #0
    260a:	bf14      	ite	ne
    260c:	2301      	movne	r3, #1
    260e:	2300      	moveq	r3, #0
    2610:	b2db      	uxtb	r3, r3
    2612:	2289      	movs	r2, #137	; 0x89
    2614:	4915      	ldr	r1, [pc, #84]	; (266c <i2c_m_async_init+0x70>)
    2616:	4618      	mov	r0, r3
    2618:	4b15      	ldr	r3, [pc, #84]	; (2670 <i2c_m_async_init+0x74>)
    261a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    261c:	687b      	ldr	r3, [r7, #4]
    261e:	6839      	ldr	r1, [r7, #0]
    2620:	4618      	mov	r0, r3
    2622:	4b14      	ldr	r3, [pc, #80]	; (2674 <i2c_m_async_init+0x78>)
    2624:	4798      	blx	r3
    2626:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2628:	68fb      	ldr	r3, [r7, #12]
    262a:	2b00      	cmp	r3, #0
    262c:	d001      	beq.n	2632 <i2c_m_async_init+0x36>
		return init_status;
    262e:	68fb      	ldr	r3, [r7, #12]
    2630:	e018      	b.n	2664 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    2632:	687b      	ldr	r3, [r7, #4]
    2634:	4a10      	ldr	r2, [pc, #64]	; (2678 <i2c_m_async_init+0x7c>)
    2636:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    2638:	687b      	ldr	r3, [r7, #4]
    263a:	4a10      	ldr	r2, [pc, #64]	; (267c <i2c_m_async_init+0x80>)
    263c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    263e:	687b      	ldr	r3, [r7, #4]
    2640:	4a0f      	ldr	r2, [pc, #60]	; (2680 <i2c_m_async_init+0x84>)
    2642:	2101      	movs	r1, #1
    2644:	4618      	mov	r0, r3
    2646:	4b0f      	ldr	r3, [pc, #60]	; (2684 <i2c_m_async_init+0x88>)
    2648:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	4a0e      	ldr	r2, [pc, #56]	; (2688 <i2c_m_async_init+0x8c>)
    264e:	2102      	movs	r1, #2
    2650:	4618      	mov	r0, r3
    2652:	4b0c      	ldr	r3, [pc, #48]	; (2684 <i2c_m_async_init+0x88>)
    2654:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	4a0c      	ldr	r2, [pc, #48]	; (268c <i2c_m_async_init+0x90>)
    265a:	2100      	movs	r1, #0
    265c:	4618      	mov	r0, r3
    265e:	4b09      	ldr	r3, [pc, #36]	; (2684 <i2c_m_async_init+0x88>)
    2660:	4798      	blx	r3

	return ERR_NONE;
    2662:	2300      	movs	r3, #0
}
    2664:	4618      	mov	r0, r3
    2666:	3710      	adds	r7, #16
    2668:	46bd      	mov	sp, r7
    266a:	bd80      	pop	{r7, pc}
    266c:	0000fe48 	.word	0x0000fe48
    2670:	00003ab1 	.word	0x00003ab1
    2674:	00006ae9 	.word	0x00006ae9
    2678:	0000255d 	.word	0x0000255d
    267c:	000025ad 	.word	0x000025ad
    2680:	000024c1 	.word	0x000024c1
    2684:	00006d6d 	.word	0x00006d6d
    2688:	000024f3 	.word	0x000024f3
    268c:	00002525 	.word	0x00002525

00002690 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2690:	b580      	push	{r7, lr}
    2692:	b08a      	sub	sp, #40	; 0x28
    2694:	af00      	add	r7, sp, #0
    2696:	60f8      	str	r0, [r7, #12]
    2698:	60b9      	str	r1, [r7, #8]
    269a:	4613      	mov	r3, r2
    269c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    269e:	68fb      	ldr	r3, [r7, #12]
    26a0:	3b14      	subs	r3, #20
    26a2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    26a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26a6:	8b9b      	ldrh	r3, [r3, #28]
    26a8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    26aa:	88fb      	ldrh	r3, [r7, #6]
    26ac:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    26ae:	f248 0301 	movw	r3, #32769	; 0x8001
    26b2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    26b4:	68bb      	ldr	r3, [r7, #8]
    26b6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    26b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26ba:	f107 0214 	add.w	r2, r7, #20
    26be:	4611      	mov	r1, r2
    26c0:	4618      	mov	r0, r3
    26c2:	4b06      	ldr	r3, [pc, #24]	; (26dc <i2c_m_sync_read+0x4c>)
    26c4:	4798      	blx	r3
    26c6:	6238      	str	r0, [r7, #32]

	if (ret) {
    26c8:	6a3b      	ldr	r3, [r7, #32]
    26ca:	2b00      	cmp	r3, #0
    26cc:	d001      	beq.n	26d2 <i2c_m_sync_read+0x42>
		return ret;
    26ce:	6a3b      	ldr	r3, [r7, #32]
    26d0:	e000      	b.n	26d4 <i2c_m_sync_read+0x44>
	}

	return n;
    26d2:	88fb      	ldrh	r3, [r7, #6]
}
    26d4:	4618      	mov	r0, r3
    26d6:	3728      	adds	r7, #40	; 0x28
    26d8:	46bd      	mov	sp, r7
    26da:	bd80      	pop	{r7, pc}
    26dc:	00006fb5 	.word	0x00006fb5

000026e0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    26e0:	b580      	push	{r7, lr}
    26e2:	b08a      	sub	sp, #40	; 0x28
    26e4:	af00      	add	r7, sp, #0
    26e6:	60f8      	str	r0, [r7, #12]
    26e8:	60b9      	str	r1, [r7, #8]
    26ea:	4613      	mov	r3, r2
    26ec:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    26ee:	68fb      	ldr	r3, [r7, #12]
    26f0:	3b14      	subs	r3, #20
    26f2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    26f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26f6:	8b9b      	ldrh	r3, [r3, #28]
    26f8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    26fa:	88fb      	ldrh	r3, [r7, #6]
    26fc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    26fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2702:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2704:	68bb      	ldr	r3, [r7, #8]
    2706:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    270a:	f107 0214 	add.w	r2, r7, #20
    270e:	4611      	mov	r1, r2
    2710:	4618      	mov	r0, r3
    2712:	4b06      	ldr	r3, [pc, #24]	; (272c <i2c_m_sync_write+0x4c>)
    2714:	4798      	blx	r3
    2716:	6238      	str	r0, [r7, #32]

	if (ret) {
    2718:	6a3b      	ldr	r3, [r7, #32]
    271a:	2b00      	cmp	r3, #0
    271c:	d001      	beq.n	2722 <i2c_m_sync_write+0x42>
		return ret;
    271e:	6a3b      	ldr	r3, [r7, #32]
    2720:	e000      	b.n	2724 <i2c_m_sync_write+0x44>
	}

	return n;
    2722:	88fb      	ldrh	r3, [r7, #6]
}
    2724:	4618      	mov	r0, r3
    2726:	3728      	adds	r7, #40	; 0x28
    2728:	46bd      	mov	sp, r7
    272a:	bd80      	pop	{r7, pc}
    272c:	00006fb5 	.word	0x00006fb5

00002730 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2730:	b580      	push	{r7, lr}
    2732:	b084      	sub	sp, #16
    2734:	af00      	add	r7, sp, #0
    2736:	6078      	str	r0, [r7, #4]
    2738:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    273a:	687b      	ldr	r3, [r7, #4]
    273c:	2b00      	cmp	r3, #0
    273e:	bf14      	ite	ne
    2740:	2301      	movne	r3, #1
    2742:	2300      	moveq	r3, #0
    2744:	b2db      	uxtb	r3, r3
    2746:	225e      	movs	r2, #94	; 0x5e
    2748:	490c      	ldr	r1, [pc, #48]	; (277c <i2c_m_sync_init+0x4c>)
    274a:	4618      	mov	r0, r3
    274c:	4b0c      	ldr	r3, [pc, #48]	; (2780 <i2c_m_sync_init+0x50>)
    274e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2750:	687b      	ldr	r3, [r7, #4]
    2752:	6839      	ldr	r1, [r7, #0]
    2754:	4618      	mov	r0, r3
    2756:	4b0b      	ldr	r3, [pc, #44]	; (2784 <i2c_m_sync_init+0x54>)
    2758:	4798      	blx	r3
    275a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    275c:	68fb      	ldr	r3, [r7, #12]
    275e:	2b00      	cmp	r3, #0
    2760:	d001      	beq.n	2766 <i2c_m_sync_init+0x36>
		return init_status;
    2762:	68fb      	ldr	r3, [r7, #12]
    2764:	e006      	b.n	2774 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	4a07      	ldr	r2, [pc, #28]	; (2788 <i2c_m_sync_init+0x58>)
    276a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    276c:	687b      	ldr	r3, [r7, #4]
    276e:	4a07      	ldr	r2, [pc, #28]	; (278c <i2c_m_sync_init+0x5c>)
    2770:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2772:	2300      	movs	r3, #0
}
    2774:	4618      	mov	r0, r3
    2776:	3710      	adds	r7, #16
    2778:	46bd      	mov	sp, r7
    277a:	bd80      	pop	{r7, pc}
    277c:	0000fe68 	.word	0x0000fe68
    2780:	00003ab1 	.word	0x00003ab1
    2784:	00006db1 	.word	0x00006db1
    2788:	00002691 	.word	0x00002691
    278c:	000026e1 	.word	0x000026e1

00002790 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2790:	b580      	push	{r7, lr}
    2792:	b082      	sub	sp, #8
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	4618      	mov	r0, r3
    279c:	4b03      	ldr	r3, [pc, #12]	; (27ac <i2c_m_sync_enable+0x1c>)
    279e:	4798      	blx	r3
    27a0:	4603      	mov	r3, r0
}
    27a2:	4618      	mov	r0, r3
    27a4:	3708      	adds	r7, #8
    27a6:	46bd      	mov	sp, r7
    27a8:	bd80      	pop	{r7, pc}
    27aa:	bf00      	nop
    27ac:	00006df9 	.word	0x00006df9

000027b0 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    27b0:	b480      	push	{r7}
    27b2:	b085      	sub	sp, #20
    27b4:	af00      	add	r7, sp, #0
    27b6:	60f8      	str	r0, [r7, #12]
    27b8:	460b      	mov	r3, r1
    27ba:	607a      	str	r2, [r7, #4]
    27bc:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    27be:	897b      	ldrh	r3, [r7, #10]
    27c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    27c4:	b21a      	sxth	r2, r3
    27c6:	687b      	ldr	r3, [r7, #4]
    27c8:	b21b      	sxth	r3, r3
    27ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    27ce:	b21b      	sxth	r3, r3
    27d0:	4313      	orrs	r3, r2
    27d2:	b21b      	sxth	r3, r3
    27d4:	b29a      	uxth	r2, r3
    27d6:	68fb      	ldr	r3, [r7, #12]
    27d8:	839a      	strh	r2, [r3, #28]
    27da:	68fb      	ldr	r3, [r7, #12]
    27dc:	8b9b      	ldrh	r3, [r3, #28]
}
    27de:	4618      	mov	r0, r3
    27e0:	3714      	adds	r7, #20
    27e2:	46bd      	mov	sp, r7
    27e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    27e8:	4770      	bx	lr

000027ea <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    27ea:	b480      	push	{r7}
    27ec:	b083      	sub	sp, #12
    27ee:	af00      	add	r7, sp, #0
    27f0:	6078      	str	r0, [r7, #4]
    27f2:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	f103 0214 	add.w	r2, r3, #20
    27fa:	683b      	ldr	r3, [r7, #0]
    27fc:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    27fe:	2300      	movs	r3, #0
}
    2800:	4618      	mov	r0, r3
    2802:	370c      	adds	r7, #12
    2804:	46bd      	mov	sp, r7
    2806:	f85d 7b04 	ldr.w	r7, [sp], #4
    280a:	4770      	bx	lr

0000280c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    280c:	b580      	push	{r7, lr}
    280e:	b084      	sub	sp, #16
    2810:	af00      	add	r7, sp, #0
    2812:	60f8      	str	r0, [r7, #12]
    2814:	60b9      	str	r1, [r7, #8]
    2816:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2818:	68fb      	ldr	r3, [r7, #12]
    281a:	2b00      	cmp	r3, #0
    281c:	d004      	beq.n	2828 <pwm_init+0x1c>
    281e:	68bb      	ldr	r3, [r7, #8]
    2820:	2b00      	cmp	r3, #0
    2822:	d001      	beq.n	2828 <pwm_init+0x1c>
    2824:	2301      	movs	r3, #1
    2826:	e000      	b.n	282a <pwm_init+0x1e>
    2828:	2300      	movs	r3, #0
    282a:	f003 0301 	and.w	r3, r3, #1
    282e:	b2db      	uxtb	r3, r3
    2830:	2233      	movs	r2, #51	; 0x33
    2832:	490a      	ldr	r1, [pc, #40]	; (285c <pwm_init+0x50>)
    2834:	4618      	mov	r0, r3
    2836:	4b0a      	ldr	r3, [pc, #40]	; (2860 <pwm_init+0x54>)
    2838:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    283a:	68fb      	ldr	r3, [r7, #12]
    283c:	68b9      	ldr	r1, [r7, #8]
    283e:	4618      	mov	r0, r3
    2840:	4b08      	ldr	r3, [pc, #32]	; (2864 <pwm_init+0x58>)
    2842:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2844:	68fb      	ldr	r3, [r7, #12]
    2846:	4a08      	ldr	r2, [pc, #32]	; (2868 <pwm_init+0x5c>)
    2848:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    284a:	68fb      	ldr	r3, [r7, #12]
    284c:	4a07      	ldr	r2, [pc, #28]	; (286c <pwm_init+0x60>)
    284e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2850:	2300      	movs	r3, #0
}
    2852:	4618      	mov	r0, r3
    2854:	3710      	adds	r7, #16
    2856:	46bd      	mov	sp, r7
    2858:	bd80      	pop	{r7, pc}
    285a:	bf00      	nop
    285c:	0000fe84 	.word	0x0000fe84
    2860:	00003ab1 	.word	0x00003ab1
    2864:	000086bd 	.word	0x000086bd
    2868:	000028c5 	.word	0x000028c5
    286c:	000028e9 	.word	0x000028e9

00002870 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    2870:	b580      	push	{r7, lr}
    2872:	b082      	sub	sp, #8
    2874:	af00      	add	r7, sp, #0
    2876:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	2b00      	cmp	r3, #0
    287c:	bf14      	ite	ne
    287e:	2301      	movne	r3, #1
    2880:	2300      	moveq	r3, #0
    2882:	b2db      	uxtb	r3, r3
    2884:	224a      	movs	r2, #74	; 0x4a
    2886:	490b      	ldr	r1, [pc, #44]	; (28b4 <pwm_enable+0x44>)
    2888:	4618      	mov	r0, r3
    288a:	4b0b      	ldr	r3, [pc, #44]	; (28b8 <pwm_enable+0x48>)
    288c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    288e:	687b      	ldr	r3, [r7, #4]
    2890:	4618      	mov	r0, r3
    2892:	4b0a      	ldr	r3, [pc, #40]	; (28bc <pwm_enable+0x4c>)
    2894:	4798      	blx	r3
    2896:	4603      	mov	r3, r0
    2898:	2b00      	cmp	r3, #0
    289a:	d002      	beq.n	28a2 <pwm_enable+0x32>
		return ERR_DENIED;
    289c:	f06f 0310 	mvn.w	r3, #16
    28a0:	e004      	b.n	28ac <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	4618      	mov	r0, r3
    28a6:	4b06      	ldr	r3, [pc, #24]	; (28c0 <pwm_enable+0x50>)
    28a8:	4798      	blx	r3

	return ERR_NONE;
    28aa:	2300      	movs	r3, #0
}
    28ac:	4618      	mov	r0, r3
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}
    28b4:	0000fe84 	.word	0x0000fe84
    28b8:	00003ab1 	.word	0x00003ab1
    28bc:	00008aad 	.word	0x00008aad
    28c0:	00008969 	.word	0x00008969

000028c4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    28c4:	b580      	push	{r7, lr}
    28c6:	b084      	sub	sp, #16
    28c8:	af00      	add	r7, sp, #0
    28ca:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    28cc:	687b      	ldr	r3, [r7, #4]
    28ce:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    28d0:	68fb      	ldr	r3, [r7, #12]
    28d2:	695b      	ldr	r3, [r3, #20]
    28d4:	2b00      	cmp	r3, #0
    28d6:	d003      	beq.n	28e0 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    28d8:	68fb      	ldr	r3, [r7, #12]
    28da:	695b      	ldr	r3, [r3, #20]
    28dc:	68f8      	ldr	r0, [r7, #12]
    28de:	4798      	blx	r3
	}
}
    28e0:	bf00      	nop
    28e2:	3710      	adds	r7, #16
    28e4:	46bd      	mov	sp, r7
    28e6:	bd80      	pop	{r7, pc}

000028e8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    28e8:	b580      	push	{r7, lr}
    28ea:	b084      	sub	sp, #16
    28ec:	af00      	add	r7, sp, #0
    28ee:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    28f4:	68fb      	ldr	r3, [r7, #12]
    28f6:	699b      	ldr	r3, [r3, #24]
    28f8:	2b00      	cmp	r3, #0
    28fa:	d003      	beq.n	2904 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    28fc:	68fb      	ldr	r3, [r7, #12]
    28fe:	699b      	ldr	r3, [r3, #24]
    2900:	68f8      	ldr	r0, [r7, #12]
    2902:	4798      	blx	r3
	}
}
    2904:	bf00      	nop
    2906:	3710      	adds	r7, #16
    2908:	46bd      	mov	sp, r7
    290a:	bd80      	pop	{r7, pc}

0000290c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    290c:	b580      	push	{r7, lr}
    290e:	b082      	sub	sp, #8
    2910:	af00      	add	r7, sp, #0
    2912:	6078      	str	r0, [r7, #4]
    2914:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	2b00      	cmp	r3, #0
    291a:	d004      	beq.n	2926 <qspi_sync_init+0x1a>
    291c:	683b      	ldr	r3, [r7, #0]
    291e:	2b00      	cmp	r3, #0
    2920:	d001      	beq.n	2926 <qspi_sync_init+0x1a>
    2922:	2301      	movs	r3, #1
    2924:	e000      	b.n	2928 <qspi_sync_init+0x1c>
    2926:	2300      	movs	r3, #0
    2928:	f003 0301 	and.w	r3, r3, #1
    292c:	b2db      	uxtb	r3, r3
    292e:	2231      	movs	r2, #49	; 0x31
    2930:	4906      	ldr	r1, [pc, #24]	; (294c <qspi_sync_init+0x40>)
    2932:	4618      	mov	r0, r3
    2934:	4b06      	ldr	r3, [pc, #24]	; (2950 <qspi_sync_init+0x44>)
    2936:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2938:	687b      	ldr	r3, [r7, #4]
    293a:	6839      	ldr	r1, [r7, #0]
    293c:	4618      	mov	r0, r3
    293e:	4b05      	ldr	r3, [pc, #20]	; (2954 <qspi_sync_init+0x48>)
    2940:	4798      	blx	r3
    2942:	4603      	mov	r3, r0
}
    2944:	4618      	mov	r0, r3
    2946:	3708      	adds	r7, #8
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}
    294c:	0000fe9c 	.word	0x0000fe9c
    2950:	00003ab1 	.word	0x00003ab1
    2954:	00005a75 	.word	0x00005a75

00002958 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2958:	b580      	push	{r7, lr}
    295a:	b082      	sub	sp, #8
    295c:	af00      	add	r7, sp, #0
    295e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2960:	687b      	ldr	r3, [r7, #4]
    2962:	2b00      	cmp	r3, #0
    2964:	bf14      	ite	ne
    2966:	2301      	movne	r3, #1
    2968:	2300      	moveq	r3, #0
    296a:	b2db      	uxtb	r3, r3
    296c:	223f      	movs	r2, #63	; 0x3f
    296e:	4906      	ldr	r1, [pc, #24]	; (2988 <qspi_sync_enable+0x30>)
    2970:	4618      	mov	r0, r3
    2972:	4b06      	ldr	r3, [pc, #24]	; (298c <qspi_sync_enable+0x34>)
    2974:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2976:	687b      	ldr	r3, [r7, #4]
    2978:	4618      	mov	r0, r3
    297a:	4b05      	ldr	r3, [pc, #20]	; (2990 <qspi_sync_enable+0x38>)
    297c:	4798      	blx	r3
    297e:	4603      	mov	r3, r0
}
    2980:	4618      	mov	r0, r3
    2982:	3708      	adds	r7, #8
    2984:	46bd      	mov	sp, r7
    2986:	bd80      	pop	{r7, pc}
    2988:	0000fe9c 	.word	0x0000fe9c
    298c:	00003ab1 	.word	0x00003ab1
    2990:	00005ae9 	.word	0x00005ae9

00002994 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2994:	b580      	push	{r7, lr}
    2996:	b082      	sub	sp, #8
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	2b00      	cmp	r3, #0
    29a0:	bf14      	ite	ne
    29a2:	2301      	movne	r3, #1
    29a4:	2300      	moveq	r3, #0
    29a6:	b2db      	uxtb	r3, r3
    29a8:	2246      	movs	r2, #70	; 0x46
    29aa:	4906      	ldr	r1, [pc, #24]	; (29c4 <qspi_sync_disable+0x30>)
    29ac:	4618      	mov	r0, r3
    29ae:	4b06      	ldr	r3, [pc, #24]	; (29c8 <qspi_sync_disable+0x34>)
    29b0:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    29b2:	687b      	ldr	r3, [r7, #4]
    29b4:	4618      	mov	r0, r3
    29b6:	4b05      	ldr	r3, [pc, #20]	; (29cc <qspi_sync_disable+0x38>)
    29b8:	4798      	blx	r3
    29ba:	4603      	mov	r3, r0
}
    29bc:	4618      	mov	r0, r3
    29be:	3708      	adds	r7, #8
    29c0:	46bd      	mov	sp, r7
    29c2:	bd80      	pop	{r7, pc}
    29c4:	0000fe9c 	.word	0x0000fe9c
    29c8:	00003ab1 	.word	0x00003ab1
    29cc:	00005b0d 	.word	0x00005b0d

000029d0 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    29d0:	b580      	push	{r7, lr}
    29d2:	b082      	sub	sp, #8
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
    29d8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	2b00      	cmp	r3, #0
    29de:	d004      	beq.n	29ea <qspi_sync_serial_run_command+0x1a>
    29e0:	683b      	ldr	r3, [r7, #0]
    29e2:	2b00      	cmp	r3, #0
    29e4:	d001      	beq.n	29ea <qspi_sync_serial_run_command+0x1a>
    29e6:	2301      	movs	r3, #1
    29e8:	e000      	b.n	29ec <qspi_sync_serial_run_command+0x1c>
    29ea:	2300      	movs	r3, #0
    29ec:	f003 0301 	and.w	r3, r3, #1
    29f0:	b2db      	uxtb	r3, r3
    29f2:	224d      	movs	r2, #77	; 0x4d
    29f4:	4906      	ldr	r1, [pc, #24]	; (2a10 <qspi_sync_serial_run_command+0x40>)
    29f6:	4618      	mov	r0, r3
    29f8:	4b06      	ldr	r3, [pc, #24]	; (2a14 <qspi_sync_serial_run_command+0x44>)
    29fa:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	6839      	ldr	r1, [r7, #0]
    2a00:	4618      	mov	r0, r3
    2a02:	4b05      	ldr	r3, [pc, #20]	; (2a18 <qspi_sync_serial_run_command+0x48>)
    2a04:	4798      	blx	r3
    2a06:	4603      	mov	r3, r0
}
    2a08:	4618      	mov	r0, r3
    2a0a:	3708      	adds	r7, #8
    2a0c:	46bd      	mov	sp, r7
    2a0e:	bd80      	pop	{r7, pc}
    2a10:	0000fe9c 	.word	0x0000fe9c
    2a14:	00003ab1 	.word	0x00003ab1
    2a18:	00005c59 	.word	0x00005c59

00002a1c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2a1c:	b580      	push	{r7, lr}
    2a1e:	b084      	sub	sp, #16
    2a20:	af00      	add	r7, sp, #0
    2a22:	6078      	str	r0, [r7, #4]
    2a24:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2a26:	2300      	movs	r3, #0
    2a28:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2a2a:	687b      	ldr	r3, [r7, #4]
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d004      	beq.n	2a3a <spi_m_sync_init+0x1e>
    2a30:	683b      	ldr	r3, [r7, #0]
    2a32:	2b00      	cmp	r3, #0
    2a34:	d001      	beq.n	2a3a <spi_m_sync_init+0x1e>
    2a36:	2301      	movs	r3, #1
    2a38:	e000      	b.n	2a3c <spi_m_sync_init+0x20>
    2a3a:	2300      	movs	r3, #0
    2a3c:	f003 0301 	and.w	r3, r3, #1
    2a40:	b2db      	uxtb	r3, r3
    2a42:	2240      	movs	r2, #64	; 0x40
    2a44:	4910      	ldr	r1, [pc, #64]	; (2a88 <spi_m_sync_init+0x6c>)
    2a46:	4618      	mov	r0, r3
    2a48:	4b10      	ldr	r3, [pc, #64]	; (2a8c <spi_m_sync_init+0x70>)
    2a4a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	683a      	ldr	r2, [r7, #0]
    2a50:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	3304      	adds	r3, #4
    2a56:	6839      	ldr	r1, [r7, #0]
    2a58:	4618      	mov	r0, r3
    2a5a:	4b0d      	ldr	r3, [pc, #52]	; (2a90 <spi_m_sync_init+0x74>)
    2a5c:	4798      	blx	r3
    2a5e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2a60:	68fb      	ldr	r3, [r7, #12]
    2a62:	2b00      	cmp	r3, #0
    2a64:	da01      	bge.n	2a6a <spi_m_sync_init+0x4e>
		return rc;
    2a66:	68fb      	ldr	r3, [r7, #12]
    2a68:	e00a      	b.n	2a80 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2a70:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2a72:	687b      	ldr	r3, [r7, #4]
    2a74:	4a07      	ldr	r2, [pc, #28]	; (2a94 <spi_m_sync_init+0x78>)
    2a76:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	4a07      	ldr	r2, [pc, #28]	; (2a98 <spi_m_sync_init+0x7c>)
    2a7c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2a7e:	2300      	movs	r3, #0
}
    2a80:	4618      	mov	r0, r3
    2a82:	3710      	adds	r7, #16
    2a84:	46bd      	mov	sp, r7
    2a86:	bd80      	pop	{r7, pc}
    2a88:	0000feb8 	.word	0x0000feb8
    2a8c:	00003ab1 	.word	0x00003ab1
    2a90:	00007521 	.word	0x00007521
    2a94:	00002b15 	.word	0x00002b15
    2a98:	00002b6d 	.word	0x00002b6d

00002a9c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2a9c:	b580      	push	{r7, lr}
    2a9e:	b082      	sub	sp, #8
    2aa0:	af00      	add	r7, sp, #0
    2aa2:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	bf14      	ite	ne
    2aaa:	2301      	movne	r3, #1
    2aac:	2300      	moveq	r3, #0
    2aae:	b2db      	uxtb	r3, r3
    2ab0:	2257      	movs	r2, #87	; 0x57
    2ab2:	4906      	ldr	r1, [pc, #24]	; (2acc <spi_m_sync_enable+0x30>)
    2ab4:	4618      	mov	r0, r3
    2ab6:	4b06      	ldr	r3, [pc, #24]	; (2ad0 <spi_m_sync_enable+0x34>)
    2ab8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2aba:	687b      	ldr	r3, [r7, #4]
    2abc:	3304      	adds	r3, #4
    2abe:	4618      	mov	r0, r3
    2ac0:	4b04      	ldr	r3, [pc, #16]	; (2ad4 <spi_m_sync_enable+0x38>)
    2ac2:	4798      	blx	r3
}
    2ac4:	bf00      	nop
    2ac6:	3708      	adds	r7, #8
    2ac8:	46bd      	mov	sp, r7
    2aca:	bd80      	pop	{r7, pc}
    2acc:	0000feb8 	.word	0x0000feb8
    2ad0:	00003ab1 	.word	0x00003ab1
    2ad4:	0000762d 	.word	0x0000762d

00002ad8 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b082      	sub	sp, #8
    2adc:	af00      	add	r7, sp, #0
    2ade:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	bf14      	ite	ne
    2ae6:	2301      	movne	r3, #1
    2ae8:	2300      	moveq	r3, #0
    2aea:	b2db      	uxtb	r3, r3
    2aec:	225d      	movs	r2, #93	; 0x5d
    2aee:	4906      	ldr	r1, [pc, #24]	; (2b08 <spi_m_sync_disable+0x30>)
    2af0:	4618      	mov	r0, r3
    2af2:	4b06      	ldr	r3, [pc, #24]	; (2b0c <spi_m_sync_disable+0x34>)
    2af4:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2af6:	687b      	ldr	r3, [r7, #4]
    2af8:	3304      	adds	r3, #4
    2afa:	4618      	mov	r0, r3
    2afc:	4b04      	ldr	r3, [pc, #16]	; (2b10 <spi_m_sync_disable+0x38>)
    2afe:	4798      	blx	r3
}
    2b00:	bf00      	nop
    2b02:	3708      	adds	r7, #8
    2b04:	46bd      	mov	sp, r7
    2b06:	bd80      	pop	{r7, pc}
    2b08:	0000feb8 	.word	0x0000feb8
    2b0c:	00003ab1 	.word	0x00003ab1
    2b10:	0000767d 	.word	0x0000767d

00002b14 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2b14:	b580      	push	{r7, lr}
    2b16:	b088      	sub	sp, #32
    2b18:	af00      	add	r7, sp, #0
    2b1a:	60f8      	str	r0, [r7, #12]
    2b1c:	60b9      	str	r1, [r7, #8]
    2b1e:	4613      	mov	r3, r2
    2b20:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2b22:	68fb      	ldr	r3, [r7, #12]
    2b24:	2b00      	cmp	r3, #0
    2b26:	bf14      	ite	ne
    2b28:	2301      	movne	r3, #1
    2b2a:	2300      	moveq	r3, #0
    2b2c:	b2db      	uxtb	r3, r3
    2b2e:	2287      	movs	r2, #135	; 0x87
    2b30:	490b      	ldr	r1, [pc, #44]	; (2b60 <_spi_m_sync_io_read+0x4c>)
    2b32:	4618      	mov	r0, r3
    2b34:	4b0b      	ldr	r3, [pc, #44]	; (2b64 <_spi_m_sync_io_read+0x50>)
    2b36:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2b38:	68fb      	ldr	r3, [r7, #12]
    2b3a:	3b0c      	subs	r3, #12
    2b3c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2b3e:	68bb      	ldr	r3, [r7, #8]
    2b40:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2b42:	2300      	movs	r3, #0
    2b44:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2b46:	88fb      	ldrh	r3, [r7, #6]
    2b48:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2b4a:	f107 0310 	add.w	r3, r7, #16
    2b4e:	4619      	mov	r1, r3
    2b50:	69f8      	ldr	r0, [r7, #28]
    2b52:	4b05      	ldr	r3, [pc, #20]	; (2b68 <_spi_m_sync_io_read+0x54>)
    2b54:	4798      	blx	r3
    2b56:	4603      	mov	r3, r0
}
    2b58:	4618      	mov	r0, r3
    2b5a:	3720      	adds	r7, #32
    2b5c:	46bd      	mov	sp, r7
    2b5e:	bd80      	pop	{r7, pc}
    2b60:	0000feb8 	.word	0x0000feb8
    2b64:	00003ab1 	.word	0x00003ab1
    2b68:	00002bc5 	.word	0x00002bc5

00002b6c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2b6c:	b580      	push	{r7, lr}
    2b6e:	b088      	sub	sp, #32
    2b70:	af00      	add	r7, sp, #0
    2b72:	60f8      	str	r0, [r7, #12]
    2b74:	60b9      	str	r1, [r7, #8]
    2b76:	4613      	mov	r3, r2
    2b78:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2b7a:	68fb      	ldr	r3, [r7, #12]
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	bf14      	ite	ne
    2b80:	2301      	movne	r3, #1
    2b82:	2300      	moveq	r3, #0
    2b84:	b2db      	uxtb	r3, r3
    2b86:	22a3      	movs	r2, #163	; 0xa3
    2b88:	490b      	ldr	r1, [pc, #44]	; (2bb8 <_spi_m_sync_io_write+0x4c>)
    2b8a:	4618      	mov	r0, r3
    2b8c:	4b0b      	ldr	r3, [pc, #44]	; (2bbc <_spi_m_sync_io_write+0x50>)
    2b8e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2b90:	68fb      	ldr	r3, [r7, #12]
    2b92:	3b0c      	subs	r3, #12
    2b94:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2b96:	2300      	movs	r3, #0
    2b98:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2b9a:	68bb      	ldr	r3, [r7, #8]
    2b9c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2b9e:	88fb      	ldrh	r3, [r7, #6]
    2ba0:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2ba2:	f107 0310 	add.w	r3, r7, #16
    2ba6:	4619      	mov	r1, r3
    2ba8:	69f8      	ldr	r0, [r7, #28]
    2baa:	4b05      	ldr	r3, [pc, #20]	; (2bc0 <_spi_m_sync_io_write+0x54>)
    2bac:	4798      	blx	r3
    2bae:	4603      	mov	r3, r0
}
    2bb0:	4618      	mov	r0, r3
    2bb2:	3720      	adds	r7, #32
    2bb4:	46bd      	mov	sp, r7
    2bb6:	bd80      	pop	{r7, pc}
    2bb8:	0000feb8 	.word	0x0000feb8
    2bbc:	00003ab1 	.word	0x00003ab1
    2bc0:	00002bc5 	.word	0x00002bc5

00002bc4 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2bc4:	b580      	push	{r7, lr}
    2bc6:	b086      	sub	sp, #24
    2bc8:	af00      	add	r7, sp, #0
    2bca:	6078      	str	r0, [r7, #4]
    2bcc:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d004      	beq.n	2bde <spi_m_sync_transfer+0x1a>
    2bd4:	683b      	ldr	r3, [r7, #0]
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d001      	beq.n	2bde <spi_m_sync_transfer+0x1a>
    2bda:	2301      	movs	r3, #1
    2bdc:	e000      	b.n	2be0 <spi_m_sync_transfer+0x1c>
    2bde:	2300      	movs	r3, #0
    2be0:	f003 0301 	and.w	r3, r3, #1
    2be4:	b2db      	uxtb	r3, r3
    2be6:	22b3      	movs	r2, #179	; 0xb3
    2be8:	490c      	ldr	r1, [pc, #48]	; (2c1c <spi_m_sync_transfer+0x58>)
    2bea:	4618      	mov	r0, r3
    2bec:	4b0c      	ldr	r3, [pc, #48]	; (2c20 <spi_m_sync_transfer+0x5c>)
    2bee:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2bf0:	683b      	ldr	r3, [r7, #0]
    2bf2:	681b      	ldr	r3, [r3, #0]
    2bf4:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2bf6:	683b      	ldr	r3, [r7, #0]
    2bf8:	685b      	ldr	r3, [r3, #4]
    2bfa:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2bfc:	683b      	ldr	r3, [r7, #0]
    2bfe:	689b      	ldr	r3, [r3, #8]
    2c00:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2c02:	687b      	ldr	r3, [r7, #4]
    2c04:	3304      	adds	r3, #4
    2c06:	f107 020c 	add.w	r2, r7, #12
    2c0a:	4611      	mov	r1, r2
    2c0c:	4618      	mov	r0, r3
    2c0e:	4b05      	ldr	r3, [pc, #20]	; (2c24 <spi_m_sync_transfer+0x60>)
    2c10:	4798      	blx	r3
    2c12:	4603      	mov	r3, r0
}
    2c14:	4618      	mov	r0, r3
    2c16:	3718      	adds	r7, #24
    2c18:	46bd      	mov	sp, r7
    2c1a:	bd80      	pop	{r7, pc}
    2c1c:	0000feb8 	.word	0x0000feb8
    2c20:	00003ab1 	.word	0x00003ab1
    2c24:	00007821 	.word	0x00007821

00002c28 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2c28:	b580      	push	{r7, lr}
    2c2a:	b082      	sub	sp, #8
    2c2c:	af00      	add	r7, sp, #0
    2c2e:	6078      	str	r0, [r7, #4]
    2c30:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	2b00      	cmp	r3, #0
    2c36:	d004      	beq.n	2c42 <spi_m_sync_get_io_descriptor+0x1a>
    2c38:	683b      	ldr	r3, [r7, #0]
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d001      	beq.n	2c42 <spi_m_sync_get_io_descriptor+0x1a>
    2c3e:	2301      	movs	r3, #1
    2c40:	e000      	b.n	2c44 <spi_m_sync_get_io_descriptor+0x1c>
    2c42:	2300      	movs	r3, #0
    2c44:	f003 0301 	and.w	r3, r3, #1
    2c48:	b2db      	uxtb	r3, r3
    2c4a:	22bd      	movs	r2, #189	; 0xbd
    2c4c:	4906      	ldr	r1, [pc, #24]	; (2c68 <spi_m_sync_get_io_descriptor+0x40>)
    2c4e:	4618      	mov	r0, r3
    2c50:	4b06      	ldr	r3, [pc, #24]	; (2c6c <spi_m_sync_get_io_descriptor+0x44>)
    2c52:	4798      	blx	r3
	*io = &spi->io;
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	f103 020c 	add.w	r2, r3, #12
    2c5a:	683b      	ldr	r3, [r7, #0]
    2c5c:	601a      	str	r2, [r3, #0]
	return 0;
    2c5e:	2300      	movs	r3, #0
}
    2c60:	4618      	mov	r0, r3
    2c62:	3708      	adds	r7, #8
    2c64:	46bd      	mov	sp, r7
    2c66:	bd80      	pop	{r7, pc}
    2c68:	0000feb8 	.word	0x0000feb8
    2c6c:	00003ab1 	.word	0x00003ab1

00002c70 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2c70:	b480      	push	{r7}
    2c72:	b083      	sub	sp, #12
    2c74:	af00      	add	r7, sp, #0
    2c76:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	681b      	ldr	r3, [r3, #0]
}
    2c7c:	4618      	mov	r0, r3
    2c7e:	370c      	adds	r7, #12
    2c80:	46bd      	mov	sp, r7
    2c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c86:	4770      	bx	lr

00002c88 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2c88:	b480      	push	{r7}
    2c8a:	b083      	sub	sp, #12
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	2b00      	cmp	r3, #0
    2c94:	d002      	beq.n	2c9c <list_get_next_element+0x14>
    2c96:	687b      	ldr	r3, [r7, #4]
    2c98:	681b      	ldr	r3, [r3, #0]
    2c9a:	e000      	b.n	2c9e <list_get_next_element+0x16>
    2c9c:	2300      	movs	r3, #0
}
    2c9e:	4618      	mov	r0, r3
    2ca0:	370c      	adds	r7, #12
    2ca2:	46bd      	mov	sp, r7
    2ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ca8:	4770      	bx	lr
	...

00002cac <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2cac:	b580      	push	{r7, lr}
    2cae:	b084      	sub	sp, #16
    2cb0:	af00      	add	r7, sp, #0
    2cb2:	60f8      	str	r0, [r7, #12]
    2cb4:	60b9      	str	r1, [r7, #8]
    2cb6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2cb8:	68fb      	ldr	r3, [r7, #12]
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d007      	beq.n	2cce <timer_init+0x22>
    2cbe:	68bb      	ldr	r3, [r7, #8]
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	d004      	beq.n	2cce <timer_init+0x22>
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	d001      	beq.n	2cce <timer_init+0x22>
    2cca:	2301      	movs	r3, #1
    2ccc:	e000      	b.n	2cd0 <timer_init+0x24>
    2cce:	2300      	movs	r3, #0
    2cd0:	f003 0301 	and.w	r3, r3, #1
    2cd4:	b2db      	uxtb	r3, r3
    2cd6:	223b      	movs	r2, #59	; 0x3b
    2cd8:	490c      	ldr	r1, [pc, #48]	; (2d0c <timer_init+0x60>)
    2cda:	4618      	mov	r0, r3
    2cdc:	4b0c      	ldr	r3, [pc, #48]	; (2d10 <timer_init+0x64>)
    2cde:	4798      	blx	r3
	descr->func = func;
    2ce0:	68fb      	ldr	r3, [r7, #12]
    2ce2:	687a      	ldr	r2, [r7, #4]
    2ce4:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2ce6:	68fb      	ldr	r3, [r7, #12]
    2ce8:	681b      	ldr	r3, [r3, #0]
    2cea:	681b      	ldr	r3, [r3, #0]
    2cec:	68fa      	ldr	r2, [r7, #12]
    2cee:	3204      	adds	r2, #4
    2cf0:	68b9      	ldr	r1, [r7, #8]
    2cf2:	4610      	mov	r0, r2
    2cf4:	4798      	blx	r3
	descr->time                           = 0;
    2cf6:	68fb      	ldr	r3, [r7, #12]
    2cf8:	2200      	movs	r2, #0
    2cfa:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2cfc:	68fb      	ldr	r3, [r7, #12]
    2cfe:	4a05      	ldr	r2, [pc, #20]	; (2d14 <timer_init+0x68>)
    2d00:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2d02:	2300      	movs	r3, #0
}
    2d04:	4618      	mov	r0, r3
    2d06:	3710      	adds	r7, #16
    2d08:	46bd      	mov	sp, r7
    2d0a:	bd80      	pop	{r7, pc}
    2d0c:	0000fed4 	.word	0x0000fed4
    2d10:	00003ab1 	.word	0x00003ab1
    2d14:	0000309d 	.word	0x0000309d

00002d18 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2d18:	b580      	push	{r7, lr}
    2d1a:	b082      	sub	sp, #8
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2d20:	687b      	ldr	r3, [r7, #4]
    2d22:	2b00      	cmp	r3, #0
    2d24:	d005      	beq.n	2d32 <timer_start+0x1a>
    2d26:	687b      	ldr	r3, [r7, #4]
    2d28:	681b      	ldr	r3, [r3, #0]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d001      	beq.n	2d32 <timer_start+0x1a>
    2d2e:	2301      	movs	r3, #1
    2d30:	e000      	b.n	2d34 <timer_start+0x1c>
    2d32:	2300      	movs	r3, #0
    2d34:	f003 0301 	and.w	r3, r3, #1
    2d38:	b2db      	uxtb	r3, r3
    2d3a:	2254      	movs	r2, #84	; 0x54
    2d3c:	490e      	ldr	r1, [pc, #56]	; (2d78 <timer_start+0x60>)
    2d3e:	4618      	mov	r0, r3
    2d40:	4b0e      	ldr	r3, [pc, #56]	; (2d7c <timer_start+0x64>)
    2d42:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	699b      	ldr	r3, [r3, #24]
    2d4a:	687a      	ldr	r2, [r7, #4]
    2d4c:	3204      	adds	r2, #4
    2d4e:	4610      	mov	r0, r2
    2d50:	4798      	blx	r3
    2d52:	4603      	mov	r3, r0
    2d54:	2b00      	cmp	r3, #0
    2d56:	d002      	beq.n	2d5e <timer_start+0x46>
		return ERR_DENIED;
    2d58:	f06f 0310 	mvn.w	r3, #16
    2d5c:	e007      	b.n	2d6e <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2d5e:	687b      	ldr	r3, [r7, #4]
    2d60:	681b      	ldr	r3, [r3, #0]
    2d62:	689b      	ldr	r3, [r3, #8]
    2d64:	687a      	ldr	r2, [r7, #4]
    2d66:	3204      	adds	r2, #4
    2d68:	4610      	mov	r0, r2
    2d6a:	4798      	blx	r3

	return ERR_NONE;
    2d6c:	2300      	movs	r3, #0
}
    2d6e:	4618      	mov	r0, r3
    2d70:	3708      	adds	r7, #8
    2d72:	46bd      	mov	sp, r7
    2d74:	bd80      	pop	{r7, pc}
    2d76:	bf00      	nop
    2d78:	0000fed4 	.word	0x0000fed4
    2d7c:	00003ab1 	.word	0x00003ab1

00002d80 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2d80:	b580      	push	{r7, lr}
    2d82:	b082      	sub	sp, #8
    2d84:	af00      	add	r7, sp, #0
    2d86:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2d88:	687b      	ldr	r3, [r7, #4]
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d005      	beq.n	2d9a <timer_stop+0x1a>
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	681b      	ldr	r3, [r3, #0]
    2d92:	2b00      	cmp	r3, #0
    2d94:	d001      	beq.n	2d9a <timer_stop+0x1a>
    2d96:	2301      	movs	r3, #1
    2d98:	e000      	b.n	2d9c <timer_stop+0x1c>
    2d9a:	2300      	movs	r3, #0
    2d9c:	f003 0301 	and.w	r3, r3, #1
    2da0:	b2db      	uxtb	r3, r3
    2da2:	2262      	movs	r2, #98	; 0x62
    2da4:	490f      	ldr	r1, [pc, #60]	; (2de4 <timer_stop+0x64>)
    2da6:	4618      	mov	r0, r3
    2da8:	4b0f      	ldr	r3, [pc, #60]	; (2de8 <timer_stop+0x68>)
    2daa:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	681b      	ldr	r3, [r3, #0]
    2db0:	699b      	ldr	r3, [r3, #24]
    2db2:	687a      	ldr	r2, [r7, #4]
    2db4:	3204      	adds	r2, #4
    2db6:	4610      	mov	r0, r2
    2db8:	4798      	blx	r3
    2dba:	4603      	mov	r3, r0
    2dbc:	f083 0301 	eor.w	r3, r3, #1
    2dc0:	b2db      	uxtb	r3, r3
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d002      	beq.n	2dcc <timer_stop+0x4c>
		return ERR_DENIED;
    2dc6:	f06f 0310 	mvn.w	r3, #16
    2dca:	e007      	b.n	2ddc <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2dcc:	687b      	ldr	r3, [r7, #4]
    2dce:	681b      	ldr	r3, [r3, #0]
    2dd0:	68db      	ldr	r3, [r3, #12]
    2dd2:	687a      	ldr	r2, [r7, #4]
    2dd4:	3204      	adds	r2, #4
    2dd6:	4610      	mov	r0, r2
    2dd8:	4798      	blx	r3

	return ERR_NONE;
    2dda:	2300      	movs	r3, #0
}
    2ddc:	4618      	mov	r0, r3
    2dde:	3708      	adds	r7, #8
    2de0:	46bd      	mov	sp, r7
    2de2:	bd80      	pop	{r7, pc}
    2de4:	0000fed4 	.word	0x0000fed4
    2de8:	00003ab1 	.word	0x00003ab1

00002dec <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2dec:	b580      	push	{r7, lr}
    2dee:	b084      	sub	sp, #16
    2df0:	af00      	add	r7, sp, #0
    2df2:	6078      	str	r0, [r7, #4]
    2df4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	2b00      	cmp	r3, #0
    2dfa:	d008      	beq.n	2e0e <timer_add_task+0x22>
    2dfc:	683b      	ldr	r3, [r7, #0]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d005      	beq.n	2e0e <timer_add_task+0x22>
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	681b      	ldr	r3, [r3, #0]
    2e06:	2b00      	cmp	r3, #0
    2e08:	d001      	beq.n	2e0e <timer_add_task+0x22>
    2e0a:	2301      	movs	r3, #1
    2e0c:	e000      	b.n	2e10 <timer_add_task+0x24>
    2e0e:	2300      	movs	r3, #0
    2e10:	f003 0301 	and.w	r3, r3, #1
    2e14:	b2db      	uxtb	r3, r3
    2e16:	227b      	movs	r2, #123	; 0x7b
    2e18:	492f      	ldr	r1, [pc, #188]	; (2ed8 <timer_add_task+0xec>)
    2e1a:	4618      	mov	r0, r3
    2e1c:	4b2f      	ldr	r3, [pc, #188]	; (2edc <timer_add_task+0xf0>)
    2e1e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2e20:	687b      	ldr	r3, [r7, #4]
    2e22:	7f1b      	ldrb	r3, [r3, #28]
    2e24:	b2db      	uxtb	r3, r3
    2e26:	f043 0301 	orr.w	r3, r3, #1
    2e2a:	b2da      	uxtb	r2, r3
    2e2c:	687b      	ldr	r3, [r7, #4]
    2e2e:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2e30:	687b      	ldr	r3, [r7, #4]
    2e32:	3318      	adds	r3, #24
    2e34:	6839      	ldr	r1, [r7, #0]
    2e36:	4618      	mov	r0, r3
    2e38:	4b29      	ldr	r3, [pc, #164]	; (2ee0 <timer_add_task+0xf4>)
    2e3a:	4798      	blx	r3
    2e3c:	4603      	mov	r3, r0
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d00f      	beq.n	2e62 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	7f1b      	ldrb	r3, [r3, #28]
    2e46:	b2db      	uxtb	r3, r3
    2e48:	f023 0301 	bic.w	r3, r3, #1
    2e4c:	b2da      	uxtb	r2, r3
    2e4e:	687b      	ldr	r3, [r7, #4]
    2e50:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2e52:	2280      	movs	r2, #128	; 0x80
    2e54:	4920      	ldr	r1, [pc, #128]	; (2ed8 <timer_add_task+0xec>)
    2e56:	2000      	movs	r0, #0
    2e58:	4b20      	ldr	r3, [pc, #128]	; (2edc <timer_add_task+0xf0>)
    2e5a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2e5c:	f06f 0311 	mvn.w	r3, #17
    2e60:	e035      	b.n	2ece <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2e62:	687b      	ldr	r3, [r7, #4]
    2e64:	695a      	ldr	r2, [r3, #20]
    2e66:	683b      	ldr	r3, [r7, #0]
    2e68:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2e6a:	687b      	ldr	r3, [r7, #4]
    2e6c:	f103 0018 	add.w	r0, r3, #24
    2e70:	687b      	ldr	r3, [r7, #4]
    2e72:	695b      	ldr	r3, [r3, #20]
    2e74:	461a      	mov	r2, r3
    2e76:	6839      	ldr	r1, [r7, #0]
    2e78:	4b1a      	ldr	r3, [pc, #104]	; (2ee4 <timer_add_task+0xf8>)
    2e7a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2e7c:	687b      	ldr	r3, [r7, #4]
    2e7e:	7f1b      	ldrb	r3, [r3, #28]
    2e80:	b2db      	uxtb	r3, r3
    2e82:	f023 0301 	bic.w	r3, r3, #1
    2e86:	b2da      	uxtb	r2, r3
    2e88:	687b      	ldr	r3, [r7, #4]
    2e8a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2e8c:	687b      	ldr	r3, [r7, #4]
    2e8e:	7f1b      	ldrb	r3, [r3, #28]
    2e90:	b2db      	uxtb	r3, r3
    2e92:	f003 0302 	and.w	r3, r3, #2
    2e96:	2b00      	cmp	r3, #0
    2e98:	d018      	beq.n	2ecc <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2e9a:	f107 030c 	add.w	r3, r7, #12
    2e9e:	4618      	mov	r0, r3
    2ea0:	4b11      	ldr	r3, [pc, #68]	; (2ee8 <timer_add_task+0xfc>)
    2ea2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	7f1b      	ldrb	r3, [r3, #28]
    2ea8:	b2db      	uxtb	r3, r3
    2eaa:	f023 0302 	bic.w	r3, r3, #2
    2eae:	b2da      	uxtb	r2, r3
    2eb0:	687b      	ldr	r3, [r7, #4]
    2eb2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2eb4:	687b      	ldr	r3, [r7, #4]
    2eb6:	681b      	ldr	r3, [r3, #0]
    2eb8:	69db      	ldr	r3, [r3, #28]
    2eba:	687a      	ldr	r2, [r7, #4]
    2ebc:	3204      	adds	r2, #4
    2ebe:	4610      	mov	r0, r2
    2ec0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2ec2:	f107 030c 	add.w	r3, r7, #12
    2ec6:	4618      	mov	r0, r3
    2ec8:	4b08      	ldr	r3, [pc, #32]	; (2eec <timer_add_task+0x100>)
    2eca:	4798      	blx	r3
	}

	return ERR_NONE;
    2ecc:	2300      	movs	r3, #0
}
    2ece:	4618      	mov	r0, r3
    2ed0:	3710      	adds	r7, #16
    2ed2:	46bd      	mov	sp, r7
    2ed4:	bd80      	pop	{r7, pc}
    2ed6:	bf00      	nop
    2ed8:	0000fed4 	.word	0x0000fed4
    2edc:	00003ab1 	.word	0x00003ab1
    2ee0:	00003ad9 	.word	0x00003ad9
    2ee4:	00002fed 	.word	0x00002fed
    2ee8:	0000bc0d 	.word	0x0000bc0d
    2eec:	0000bc33 	.word	0x0000bc33

00002ef0 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2ef0:	b580      	push	{r7, lr}
    2ef2:	b084      	sub	sp, #16
    2ef4:	af00      	add	r7, sp, #0
    2ef6:	6078      	str	r0, [r7, #4]
    2ef8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2efa:	687b      	ldr	r3, [r7, #4]
    2efc:	2b00      	cmp	r3, #0
    2efe:	d008      	beq.n	2f12 <timer_remove_task+0x22>
    2f00:	683b      	ldr	r3, [r7, #0]
    2f02:	2b00      	cmp	r3, #0
    2f04:	d005      	beq.n	2f12 <timer_remove_task+0x22>
    2f06:	687b      	ldr	r3, [r7, #4]
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d001      	beq.n	2f12 <timer_remove_task+0x22>
    2f0e:	2301      	movs	r3, #1
    2f10:	e000      	b.n	2f14 <timer_remove_task+0x24>
    2f12:	2300      	movs	r3, #0
    2f14:	f003 0301 	and.w	r3, r3, #1
    2f18:	b2db      	uxtb	r3, r3
    2f1a:	2296      	movs	r2, #150	; 0x96
    2f1c:	492d      	ldr	r1, [pc, #180]	; (2fd4 <timer_remove_task+0xe4>)
    2f1e:	4618      	mov	r0, r3
    2f20:	4b2d      	ldr	r3, [pc, #180]	; (2fd8 <timer_remove_task+0xe8>)
    2f22:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2f24:	687b      	ldr	r3, [r7, #4]
    2f26:	7f1b      	ldrb	r3, [r3, #28]
    2f28:	b2db      	uxtb	r3, r3
    2f2a:	f043 0301 	orr.w	r3, r3, #1
    2f2e:	b2da      	uxtb	r2, r3
    2f30:	687b      	ldr	r3, [r7, #4]
    2f32:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	3318      	adds	r3, #24
    2f38:	6839      	ldr	r1, [r7, #0]
    2f3a:	4618      	mov	r0, r3
    2f3c:	4b27      	ldr	r3, [pc, #156]	; (2fdc <timer_remove_task+0xec>)
    2f3e:	4798      	blx	r3
    2f40:	4603      	mov	r3, r0
    2f42:	f083 0301 	eor.w	r3, r3, #1
    2f46:	b2db      	uxtb	r3, r3
    2f48:	2b00      	cmp	r3, #0
    2f4a:	d00f      	beq.n	2f6c <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2f4c:	687b      	ldr	r3, [r7, #4]
    2f4e:	7f1b      	ldrb	r3, [r3, #28]
    2f50:	b2db      	uxtb	r3, r3
    2f52:	f023 0301 	bic.w	r3, r3, #1
    2f56:	b2da      	uxtb	r2, r3
    2f58:	687b      	ldr	r3, [r7, #4]
    2f5a:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2f5c:	229b      	movs	r2, #155	; 0x9b
    2f5e:	491d      	ldr	r1, [pc, #116]	; (2fd4 <timer_remove_task+0xe4>)
    2f60:	2000      	movs	r0, #0
    2f62:	4b1d      	ldr	r3, [pc, #116]	; (2fd8 <timer_remove_task+0xe8>)
    2f64:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2f66:	f06f 0309 	mvn.w	r3, #9
    2f6a:	e02e      	b.n	2fca <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2f6c:	687b      	ldr	r3, [r7, #4]
    2f6e:	3318      	adds	r3, #24
    2f70:	6839      	ldr	r1, [r7, #0]
    2f72:	4618      	mov	r0, r3
    2f74:	4b1a      	ldr	r3, [pc, #104]	; (2fe0 <timer_remove_task+0xf0>)
    2f76:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2f78:	687b      	ldr	r3, [r7, #4]
    2f7a:	7f1b      	ldrb	r3, [r3, #28]
    2f7c:	b2db      	uxtb	r3, r3
    2f7e:	f023 0301 	bic.w	r3, r3, #1
    2f82:	b2da      	uxtb	r2, r3
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	7f1b      	ldrb	r3, [r3, #28]
    2f8c:	b2db      	uxtb	r3, r3
    2f8e:	f003 0302 	and.w	r3, r3, #2
    2f92:	2b00      	cmp	r3, #0
    2f94:	d018      	beq.n	2fc8 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2f96:	f107 030c 	add.w	r3, r7, #12
    2f9a:	4618      	mov	r0, r3
    2f9c:	4b11      	ldr	r3, [pc, #68]	; (2fe4 <timer_remove_task+0xf4>)
    2f9e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	7f1b      	ldrb	r3, [r3, #28]
    2fa4:	b2db      	uxtb	r3, r3
    2fa6:	f023 0302 	bic.w	r3, r3, #2
    2faa:	b2da      	uxtb	r2, r3
    2fac:	687b      	ldr	r3, [r7, #4]
    2fae:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	681b      	ldr	r3, [r3, #0]
    2fb4:	69db      	ldr	r3, [r3, #28]
    2fb6:	687a      	ldr	r2, [r7, #4]
    2fb8:	3204      	adds	r2, #4
    2fba:	4610      	mov	r0, r2
    2fbc:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2fbe:	f107 030c 	add.w	r3, r7, #12
    2fc2:	4618      	mov	r0, r3
    2fc4:	4b08      	ldr	r3, [pc, #32]	; (2fe8 <timer_remove_task+0xf8>)
    2fc6:	4798      	blx	r3
	}

	return ERR_NONE;
    2fc8:	2300      	movs	r3, #0
}
    2fca:	4618      	mov	r0, r3
    2fcc:	3710      	adds	r7, #16
    2fce:	46bd      	mov	sp, r7
    2fd0:	bd80      	pop	{r7, pc}
    2fd2:	bf00      	nop
    2fd4:	0000fed4 	.word	0x0000fed4
    2fd8:	00003ab1 	.word	0x00003ab1
    2fdc:	00003ad9 	.word	0x00003ad9
    2fe0:	00003c3b 	.word	0x00003c3b
    2fe4:	0000bc0d 	.word	0x0000bc0d
    2fe8:	0000bc33 	.word	0x0000bc33

00002fec <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2fec:	b580      	push	{r7, lr}
    2fee:	b088      	sub	sp, #32
    2ff0:	af00      	add	r7, sp, #0
    2ff2:	60f8      	str	r0, [r7, #12]
    2ff4:	60b9      	str	r1, [r7, #8]
    2ff6:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2ff8:	2300      	movs	r3, #0
    2ffa:	61bb      	str	r3, [r7, #24]
    2ffc:	68f8      	ldr	r0, [r7, #12]
    2ffe:	4b23      	ldr	r3, [pc, #140]	; (308c <timer_add_timer_task+0xa0>)
    3000:	4798      	blx	r3
    3002:	6138      	str	r0, [r7, #16]

	if (!head) {
    3004:	693b      	ldr	r3, [r7, #16]
    3006:	2b00      	cmp	r3, #0
    3008:	d104      	bne.n	3014 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    300a:	68b9      	ldr	r1, [r7, #8]
    300c:	68f8      	ldr	r0, [r7, #12]
    300e:	4b20      	ldr	r3, [pc, #128]	; (3090 <timer_add_timer_task+0xa4>)
    3010:	4798      	blx	r3
		return;
    3012:	e037      	b.n	3084 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3014:	693b      	ldr	r3, [r7, #16]
    3016:	61fb      	str	r3, [r7, #28]
    3018:	e022      	b.n	3060 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    301a:	69fb      	ldr	r3, [r7, #28]
    301c:	685a      	ldr	r2, [r3, #4]
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	429a      	cmp	r2, r3
    3022:	d808      	bhi.n	3036 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    3024:	69fb      	ldr	r3, [r7, #28]
    3026:	689a      	ldr	r2, [r3, #8]
    3028:	69fb      	ldr	r3, [r7, #28]
    302a:	6859      	ldr	r1, [r3, #4]
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	1acb      	subs	r3, r1, r3
    3030:	4413      	add	r3, r2
    3032:	617b      	str	r3, [r7, #20]
    3034:	e009      	b.n	304a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    3036:	69fb      	ldr	r3, [r7, #28]
    3038:	689a      	ldr	r2, [r3, #8]
    303a:	69fb      	ldr	r3, [r7, #28]
    303c:	685b      	ldr	r3, [r3, #4]
    303e:	441a      	add	r2, r3
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	425b      	negs	r3, r3
    3044:	4413      	add	r3, r2
    3046:	3301      	adds	r3, #1
    3048:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    304a:	68bb      	ldr	r3, [r7, #8]
    304c:	689a      	ldr	r2, [r3, #8]
    304e:	697b      	ldr	r3, [r7, #20]
    3050:	429a      	cmp	r2, r3
    3052:	d909      	bls.n	3068 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3054:	69fb      	ldr	r3, [r7, #28]
    3056:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3058:	69f8      	ldr	r0, [r7, #28]
    305a:	4b0e      	ldr	r3, [pc, #56]	; (3094 <timer_add_timer_task+0xa8>)
    305c:	4798      	blx	r3
    305e:	61f8      	str	r0, [r7, #28]
    3060:	69fb      	ldr	r3, [r7, #28]
    3062:	2b00      	cmp	r3, #0
    3064:	d1d9      	bne.n	301a <timer_add_timer_task+0x2e>
    3066:	e000      	b.n	306a <timer_add_timer_task+0x7e>
			break;
    3068:	bf00      	nop
	}

	if (it == head) {
    306a:	69fa      	ldr	r2, [r7, #28]
    306c:	693b      	ldr	r3, [r7, #16]
    306e:	429a      	cmp	r2, r3
    3070:	d104      	bne.n	307c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    3072:	68b9      	ldr	r1, [r7, #8]
    3074:	68f8      	ldr	r0, [r7, #12]
    3076:	4b06      	ldr	r3, [pc, #24]	; (3090 <timer_add_timer_task+0xa4>)
    3078:	4798      	blx	r3
    307a:	e003      	b.n	3084 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    307c:	68b9      	ldr	r1, [r7, #8]
    307e:	69b8      	ldr	r0, [r7, #24]
    3080:	4b05      	ldr	r3, [pc, #20]	; (3098 <timer_add_timer_task+0xac>)
    3082:	4798      	blx	r3
	}
}
    3084:	3720      	adds	r7, #32
    3086:	46bd      	mov	sp, r7
    3088:	bd80      	pop	{r7, pc}
    308a:	bf00      	nop
    308c:	00002c71 	.word	0x00002c71
    3090:	00003b11 	.word	0x00003b11
    3094:	00002c89 	.word	0x00002c89
    3098:	00003b69 	.word	0x00003b69

0000309c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    309c:	b580      	push	{r7, lr}
    309e:	b086      	sub	sp, #24
    30a0:	af00      	add	r7, sp, #0
    30a2:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	3b04      	subs	r3, #4
    30a8:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    30aa:	693b      	ldr	r3, [r7, #16]
    30ac:	3318      	adds	r3, #24
    30ae:	4618      	mov	r0, r3
    30b0:	4b27      	ldr	r3, [pc, #156]	; (3150 <timer_process_counted+0xb4>)
    30b2:	4798      	blx	r3
    30b4:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    30b6:	693b      	ldr	r3, [r7, #16]
    30b8:	695b      	ldr	r3, [r3, #20]
    30ba:	1c5a      	adds	r2, r3, #1
    30bc:	693b      	ldr	r3, [r7, #16]
    30be:	615a      	str	r2, [r3, #20]
    30c0:	693b      	ldr	r3, [r7, #16]
    30c2:	695b      	ldr	r3, [r3, #20]
    30c4:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    30c6:	693b      	ldr	r3, [r7, #16]
    30c8:	7f1b      	ldrb	r3, [r3, #28]
    30ca:	b2db      	uxtb	r3, r3
    30cc:	f003 0301 	and.w	r3, r3, #1
    30d0:	2b00      	cmp	r3, #0
    30d2:	d106      	bne.n	30e2 <timer_process_counted+0x46>
    30d4:	693b      	ldr	r3, [r7, #16]
    30d6:	7f1b      	ldrb	r3, [r3, #28]
    30d8:	b2db      	uxtb	r3, r3
    30da:	f003 0302 	and.w	r3, r3, #2
    30de:	2b00      	cmp	r3, #0
    30e0:	d027      	beq.n	3132 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    30e2:	693b      	ldr	r3, [r7, #16]
    30e4:	7f1b      	ldrb	r3, [r3, #28]
    30e6:	b2db      	uxtb	r3, r3
    30e8:	f043 0302 	orr.w	r3, r3, #2
    30ec:	b2da      	uxtb	r2, r3
    30ee:	693b      	ldr	r3, [r7, #16]
    30f0:	771a      	strb	r2, [r3, #28]
		return;
    30f2:	e029      	b.n	3148 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    30f4:	697b      	ldr	r3, [r7, #20]
    30f6:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    30f8:	693b      	ldr	r3, [r7, #16]
    30fa:	3318      	adds	r3, #24
    30fc:	4618      	mov	r0, r3
    30fe:	4b15      	ldr	r3, [pc, #84]	; (3154 <timer_process_counted+0xb8>)
    3100:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3102:	68bb      	ldr	r3, [r7, #8]
    3104:	7c1b      	ldrb	r3, [r3, #16]
    3106:	2b01      	cmp	r3, #1
    3108:	d109      	bne.n	311e <timer_process_counted+0x82>
			tmp->time_label = time;
    310a:	68bb      	ldr	r3, [r7, #8]
    310c:	68fa      	ldr	r2, [r7, #12]
    310e:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3110:	693b      	ldr	r3, [r7, #16]
    3112:	3318      	adds	r3, #24
    3114:	68fa      	ldr	r2, [r7, #12]
    3116:	68b9      	ldr	r1, [r7, #8]
    3118:	4618      	mov	r0, r3
    311a:	4b0f      	ldr	r3, [pc, #60]	; (3158 <timer_process_counted+0xbc>)
    311c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    311e:	693b      	ldr	r3, [r7, #16]
    3120:	3318      	adds	r3, #24
    3122:	4618      	mov	r0, r3
    3124:	4b0a      	ldr	r3, [pc, #40]	; (3150 <timer_process_counted+0xb4>)
    3126:	4798      	blx	r3
    3128:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    312a:	68bb      	ldr	r3, [r7, #8]
    312c:	68db      	ldr	r3, [r3, #12]
    312e:	68b8      	ldr	r0, [r7, #8]
    3130:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3132:	697b      	ldr	r3, [r7, #20]
    3134:	2b00      	cmp	r3, #0
    3136:	d007      	beq.n	3148 <timer_process_counted+0xac>
    3138:	697b      	ldr	r3, [r7, #20]
    313a:	685b      	ldr	r3, [r3, #4]
    313c:	68fa      	ldr	r2, [r7, #12]
    313e:	1ad2      	subs	r2, r2, r3
    3140:	697b      	ldr	r3, [r7, #20]
    3142:	689b      	ldr	r3, [r3, #8]
    3144:	429a      	cmp	r2, r3
    3146:	d2d5      	bcs.n	30f4 <timer_process_counted+0x58>
	}
}
    3148:	3718      	adds	r7, #24
    314a:	46bd      	mov	sp, r7
    314c:	bd80      	pop	{r7, pc}
    314e:	bf00      	nop
    3150:	00002c71 	.word	0x00002c71
    3154:	00003c09 	.word	0x00003c09
    3158:	00002fed 	.word	0x00002fed

0000315c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    315c:	b480      	push	{r7}
    315e:	b085      	sub	sp, #20
    3160:	af00      	add	r7, sp, #0
    3162:	4603      	mov	r3, r0
    3164:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3166:	2300      	movs	r3, #0
    3168:	73fb      	strb	r3, [r7, #15]
    316a:	e029      	b.n	31c0 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    316c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3170:	4a19      	ldr	r2, [pc, #100]	; (31d8 <_usb_d_find_ep+0x7c>)
    3172:	015b      	lsls	r3, r3, #5
    3174:	4413      	add	r3, r2
    3176:	3301      	adds	r3, #1
    3178:	781b      	ldrb	r3, [r3, #0]
    317a:	79fa      	ldrb	r2, [r7, #7]
    317c:	429a      	cmp	r2, r3
    317e:	d102      	bne.n	3186 <_usb_d_find_ep+0x2a>
			return i;
    3180:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3184:	e022      	b.n	31cc <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3186:	f997 300f 	ldrsb.w	r3, [r7, #15]
    318a:	4a13      	ldr	r2, [pc, #76]	; (31d8 <_usb_d_find_ep+0x7c>)
    318c:	015b      	lsls	r3, r3, #5
    318e:	4413      	add	r3, r2
    3190:	781b      	ldrb	r3, [r3, #0]
    3192:	2b00      	cmp	r3, #0
    3194:	d10e      	bne.n	31b4 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3196:	79fb      	ldrb	r3, [r7, #7]
    3198:	f003 030f 	and.w	r3, r3, #15
    319c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    31a0:	490d      	ldr	r1, [pc, #52]	; (31d8 <_usb_d_find_ep+0x7c>)
    31a2:	0152      	lsls	r2, r2, #5
    31a4:	440a      	add	r2, r1
    31a6:	3201      	adds	r2, #1
    31a8:	7812      	ldrb	r2, [r2, #0]
    31aa:	4293      	cmp	r3, r2
    31ac:	d102      	bne.n	31b4 <_usb_d_find_ep+0x58>
			return i;
    31ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31b2:	e00b      	b.n	31cc <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    31b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31b8:	b2db      	uxtb	r3, r3
    31ba:	3301      	adds	r3, #1
    31bc:	b2db      	uxtb	r3, r3
    31be:	73fb      	strb	r3, [r7, #15]
    31c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31c4:	2b03      	cmp	r3, #3
    31c6:	ddd1      	ble.n	316c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    31c8:	f04f 33ff 	mov.w	r3, #4294967295
}
    31cc:	4618      	mov	r0, r3
    31ce:	3714      	adds	r7, #20
    31d0:	46bd      	mov	sp, r7
    31d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    31d6:	4770      	bx	lr
    31d8:	200006dc 	.word	0x200006dc

000031dc <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    31dc:	b580      	push	{r7, lr}
    31de:	b088      	sub	sp, #32
    31e0:	af00      	add	r7, sp, #0
    31e2:	60ba      	str	r2, [r7, #8]
    31e4:	607b      	str	r3, [r7, #4]
    31e6:	4603      	mov	r3, r0
    31e8:	73fb      	strb	r3, [r7, #15]
    31ea:	460b      	mov	r3, r1
    31ec:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    31ee:	68bb      	ldr	r3, [r7, #8]
    31f0:	617b      	str	r3, [r7, #20]
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	61bb      	str	r3, [r7, #24]
    31f6:	7bbb      	ldrb	r3, [r7, #14]
    31f8:	2b00      	cmp	r3, #0
    31fa:	d004      	beq.n	3206 <_usb_d_trans+0x2a>
    31fc:	7bfb      	ldrb	r3, [r7, #15]
    31fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3202:	b2db      	uxtb	r3, r3
    3204:	e003      	b.n	320e <_usb_d_trans+0x32>
    3206:	7bfb      	ldrb	r3, [r7, #15]
    3208:	f003 030f 	and.w	r3, r3, #15
    320c:	b2db      	uxtb	r3, r3
    320e:	773b      	strb	r3, [r7, #28]
    3210:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3214:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3216:	f107 0314 	add.w	r3, r7, #20
    321a:	4618      	mov	r0, r3
    321c:	4b03      	ldr	r3, [pc, #12]	; (322c <_usb_d_trans+0x50>)
    321e:	4798      	blx	r3
    3220:	4603      	mov	r3, r0
}
    3222:	4618      	mov	r0, r3
    3224:	3720      	adds	r7, #32
    3226:	46bd      	mov	sp, r7
    3228:	bd80      	pop	{r7, pc}
    322a:	bf00      	nop
    322c:	0000b241 	.word	0x0000b241

00003230 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3230:	b480      	push	{r7}
    3232:	b085      	sub	sp, #20
    3234:	af00      	add	r7, sp, #0
    3236:	60f8      	str	r0, [r7, #12]
    3238:	60b9      	str	r1, [r7, #8]
    323a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    323c:	2300      	movs	r3, #0
}
    323e:	4618      	mov	r0, r3
    3240:	3714      	adds	r7, #20
    3242:	46bd      	mov	sp, r7
    3244:	f85d 7b04 	ldr.w	r7, [sp], #4
    3248:	4770      	bx	lr
	...

0000324c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    324c:	b580      	push	{r7, lr}
    324e:	b086      	sub	sp, #24
    3250:	af00      	add	r7, sp, #0
    3252:	4603      	mov	r3, r0
    3254:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3256:	79fb      	ldrb	r3, [r7, #7]
    3258:	4618      	mov	r0, r3
    325a:	4b2a      	ldr	r3, [pc, #168]	; (3304 <usb_d_cb_trans_setup+0xb8>)
    325c:	4798      	blx	r3
    325e:	4603      	mov	r3, r0
    3260:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3262:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3266:	015b      	lsls	r3, r3, #5
    3268:	4a27      	ldr	r2, [pc, #156]	; (3308 <usb_d_cb_trans_setup+0xbc>)
    326a:	4413      	add	r3, r2
    326c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    326e:	693b      	ldr	r3, [r7, #16]
    3270:	330c      	adds	r3, #12
    3272:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3274:	79fb      	ldrb	r3, [r7, #7]
    3276:	68f9      	ldr	r1, [r7, #12]
    3278:	4618      	mov	r0, r3
    327a:	4b24      	ldr	r3, [pc, #144]	; (330c <usb_d_cb_trans_setup+0xc0>)
    327c:	4798      	blx	r3
    327e:	4603      	mov	r3, r0
    3280:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    3282:	7afb      	ldrb	r3, [r7, #11]
    3284:	2b08      	cmp	r3, #8
    3286:	d00d      	beq.n	32a4 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3288:	79fb      	ldrb	r3, [r7, #7]
    328a:	2101      	movs	r1, #1
    328c:	4618      	mov	r0, r3
    328e:	4b20      	ldr	r3, [pc, #128]	; (3310 <usb_d_cb_trans_setup+0xc4>)
    3290:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3292:	79fb      	ldrb	r3, [r7, #7]
    3294:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3298:	b2db      	uxtb	r3, r3
    329a:	2101      	movs	r1, #1
    329c:	4618      	mov	r0, r3
    329e:	4b1c      	ldr	r3, [pc, #112]	; (3310 <usb_d_cb_trans_setup+0xc4>)
    32a0:	4798      	blx	r3
		return;
    32a2:	e02b      	b.n	32fc <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    32a4:	79fb      	ldrb	r3, [r7, #7]
    32a6:	2100      	movs	r1, #0
    32a8:	4618      	mov	r0, r3
    32aa:	4b19      	ldr	r3, [pc, #100]	; (3310 <usb_d_cb_trans_setup+0xc4>)
    32ac:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    32ae:	79fb      	ldrb	r3, [r7, #7]
    32b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    32b4:	b2db      	uxtb	r3, r3
    32b6:	2100      	movs	r1, #0
    32b8:	4618      	mov	r0, r3
    32ba:	4b15      	ldr	r3, [pc, #84]	; (3310 <usb_d_cb_trans_setup+0xc4>)
    32bc:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    32be:	693b      	ldr	r3, [r7, #16]
    32c0:	2201      	movs	r2, #1
    32c2:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    32c4:	693b      	ldr	r3, [r7, #16]
    32c6:	695b      	ldr	r3, [r3, #20]
    32c8:	79fa      	ldrb	r2, [r7, #7]
    32ca:	68f9      	ldr	r1, [r7, #12]
    32cc:	4610      	mov	r0, r2
    32ce:	4798      	blx	r3
    32d0:	4603      	mov	r3, r0
    32d2:	f083 0301 	eor.w	r3, r3, #1
    32d6:	b2db      	uxtb	r3, r3
    32d8:	2b00      	cmp	r3, #0
    32da:	d00f      	beq.n	32fc <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    32dc:	693b      	ldr	r3, [r7, #16]
    32de:	2205      	movs	r2, #5
    32e0:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    32e2:	79fb      	ldrb	r3, [r7, #7]
    32e4:	2101      	movs	r1, #1
    32e6:	4618      	mov	r0, r3
    32e8:	4b09      	ldr	r3, [pc, #36]	; (3310 <usb_d_cb_trans_setup+0xc4>)
    32ea:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    32ec:	79fb      	ldrb	r3, [r7, #7]
    32ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
    32f2:	b2db      	uxtb	r3, r3
    32f4:	2101      	movs	r1, #1
    32f6:	4618      	mov	r0, r3
    32f8:	4b05      	ldr	r3, [pc, #20]	; (3310 <usb_d_cb_trans_setup+0xc4>)
    32fa:	4798      	blx	r3
	}
}
    32fc:	3718      	adds	r7, #24
    32fe:	46bd      	mov	sp, r7
    3300:	bd80      	pop	{r7, pc}
    3302:	bf00      	nop
    3304:	0000315d 	.word	0x0000315d
    3308:	200006dc 	.word	0x200006dc
    330c:	0000b199 	.word	0x0000b199
    3310:	0000b011 	.word	0x0000b011

00003314 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3314:	b580      	push	{r7, lr}
    3316:	b084      	sub	sp, #16
    3318:	af00      	add	r7, sp, #0
    331a:	4603      	mov	r3, r0
    331c:	6039      	str	r1, [r7, #0]
    331e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3320:	79fb      	ldrb	r3, [r7, #7]
    3322:	4618      	mov	r0, r3
    3324:	4b0d      	ldr	r3, [pc, #52]	; (335c <usb_d_cb_trans_more+0x48>)
    3326:	4798      	blx	r3
    3328:	4603      	mov	r3, r0
    332a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    332c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3330:	015b      	lsls	r3, r3, #5
    3332:	4a0b      	ldr	r2, [pc, #44]	; (3360 <usb_d_cb_trans_more+0x4c>)
    3334:	4413      	add	r3, r2
    3336:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3338:	68bb      	ldr	r3, [r7, #8]
    333a:	789b      	ldrb	r3, [r3, #2]
    333c:	2b03      	cmp	r3, #3
    333e:	d107      	bne.n	3350 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3340:	68bb      	ldr	r3, [r7, #8]
    3342:	699b      	ldr	r3, [r3, #24]
    3344:	79fa      	ldrb	r2, [r7, #7]
    3346:	6839      	ldr	r1, [r7, #0]
    3348:	4610      	mov	r0, r2
    334a:	4798      	blx	r3
    334c:	4603      	mov	r3, r0
    334e:	e000      	b.n	3352 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3350:	2300      	movs	r3, #0
}
    3352:	4618      	mov	r0, r3
    3354:	3710      	adds	r7, #16
    3356:	46bd      	mov	sp, r7
    3358:	bd80      	pop	{r7, pc}
    335a:	bf00      	nop
    335c:	0000315d 	.word	0x0000315d
    3360:	200006dc 	.word	0x200006dc

00003364 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3364:	b590      	push	{r4, r7, lr}
    3366:	b087      	sub	sp, #28
    3368:	af02      	add	r7, sp, #8
    336a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    336c:	687b      	ldr	r3, [r7, #4]
    336e:	789b      	ldrb	r3, [r3, #2]
    3370:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	7b1b      	ldrb	r3, [r3, #12]
    3376:	f003 0380 	and.w	r3, r3, #128	; 0x80
    337a:	2b00      	cmp	r3, #0
    337c:	bf14      	ite	ne
    337e:	2301      	movne	r3, #1
    3380:	2300      	moveq	r3, #0
    3382:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3384:	7bfb      	ldrb	r3, [r7, #15]
    3386:	2b03      	cmp	r3, #3
    3388:	d13a      	bne.n	3400 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    338a:	687b      	ldr	r3, [r7, #4]
    338c:	69db      	ldr	r3, [r3, #28]
    338e:	687a      	ldr	r2, [r7, #4]
    3390:	7850      	ldrb	r0, [r2, #1]
    3392:	687a      	ldr	r2, [r7, #4]
    3394:	320c      	adds	r2, #12
    3396:	2101      	movs	r1, #1
    3398:	4798      	blx	r3
    339a:	4603      	mov	r3, r0
    339c:	737b      	strb	r3, [r7, #13]
		if (err) {
    339e:	7b7b      	ldrb	r3, [r7, #13]
    33a0:	2b00      	cmp	r3, #0
    33a2:	d015      	beq.n	33d0 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    33a4:	687b      	ldr	r3, [r7, #4]
    33a6:	2205      	movs	r2, #5
    33a8:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    33aa:	687b      	ldr	r3, [r7, #4]
    33ac:	2202      	movs	r2, #2
    33ae:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    33b0:	7bbb      	ldrb	r3, [r7, #14]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d002      	beq.n	33bc <usb_d_ctrl_trans_done+0x58>
    33b6:	687b      	ldr	r3, [r7, #4]
    33b8:	785b      	ldrb	r3, [r3, #1]
    33ba:	e004      	b.n	33c6 <usb_d_ctrl_trans_done+0x62>
    33bc:	687b      	ldr	r3, [r7, #4]
    33be:	785b      	ldrb	r3, [r3, #1]
    33c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    33c4:	b2db      	uxtb	r3, r3
    33c6:	2101      	movs	r1, #1
    33c8:	4618      	mov	r0, r3
    33ca:	4b15      	ldr	r3, [pc, #84]	; (3420 <usb_d_ctrl_trans_done+0xbc>)
    33cc:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    33ce:	e022      	b.n	3416 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	2204      	movs	r2, #4
    33d4:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    33d6:	687b      	ldr	r3, [r7, #4]
    33d8:	7858      	ldrb	r0, [r3, #1]
    33da:	7bbb      	ldrb	r3, [r7, #14]
    33dc:	2b00      	cmp	r3, #0
    33de:	bf14      	ite	ne
    33e0:	2301      	movne	r3, #1
    33e2:	2300      	moveq	r3, #0
    33e4:	b2db      	uxtb	r3, r3
    33e6:	f083 0301 	eor.w	r3, r3, #1
    33ea:	b2db      	uxtb	r3, r3
    33ec:	f003 0301 	and.w	r3, r3, #1
    33f0:	b2d9      	uxtb	r1, r3
    33f2:	2301      	movs	r3, #1
    33f4:	9300      	str	r3, [sp, #0]
    33f6:	2300      	movs	r3, #0
    33f8:	2200      	movs	r2, #0
    33fa:	4c0a      	ldr	r4, [pc, #40]	; (3424 <usb_d_ctrl_trans_done+0xc0>)
    33fc:	47a0      	blx	r4
}
    33fe:	e00a      	b.n	3416 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3400:	687b      	ldr	r3, [r7, #4]
    3402:	69db      	ldr	r3, [r3, #28]
    3404:	687a      	ldr	r2, [r7, #4]
    3406:	7850      	ldrb	r0, [r2, #1]
    3408:	687a      	ldr	r2, [r7, #4]
    340a:	320c      	adds	r2, #12
    340c:	2100      	movs	r1, #0
    340e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3410:	687b      	ldr	r3, [r7, #4]
    3412:	2202      	movs	r2, #2
    3414:	709a      	strb	r2, [r3, #2]
}
    3416:	bf00      	nop
    3418:	3714      	adds	r7, #20
    341a:	46bd      	mov	sp, r7
    341c:	bd90      	pop	{r4, r7, pc}
    341e:	bf00      	nop
    3420:	0000b011 	.word	0x0000b011
    3424:	000031dd 	.word	0x000031dd

00003428 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3428:	b580      	push	{r7, lr}
    342a:	b086      	sub	sp, #24
    342c:	af00      	add	r7, sp, #0
    342e:	4603      	mov	r3, r0
    3430:	60b9      	str	r1, [r7, #8]
    3432:	607a      	str	r2, [r7, #4]
    3434:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3436:	7bfb      	ldrb	r3, [r7, #15]
    3438:	4618      	mov	r0, r3
    343a:	4b2f      	ldr	r3, [pc, #188]	; (34f8 <_usb_d_cb_trans_done+0xd0>)
    343c:	4798      	blx	r3
    343e:	4603      	mov	r3, r0
    3440:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3442:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3446:	015b      	lsls	r3, r3, #5
    3448:	4a2c      	ldr	r2, [pc, #176]	; (34fc <_usb_d_cb_trans_done+0xd4>)
    344a:	4413      	add	r3, r2
    344c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    344e:	68bb      	ldr	r3, [r7, #8]
    3450:	2b00      	cmp	r3, #0
    3452:	d10e      	bne.n	3472 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3454:	693b      	ldr	r3, [r7, #16]
    3456:	2200      	movs	r2, #0
    3458:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    345a:	693b      	ldr	r3, [r7, #16]
    345c:	781b      	ldrb	r3, [r3, #0]
    345e:	2b00      	cmp	r3, #0
    3460:	d103      	bne.n	346a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3462:	6938      	ldr	r0, [r7, #16]
    3464:	4b26      	ldr	r3, [pc, #152]	; (3500 <_usb_d_cb_trans_done+0xd8>)
    3466:	4798      	blx	r3
			return;
    3468:	e043      	b.n	34f2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    346a:	693b      	ldr	r3, [r7, #16]
    346c:	2201      	movs	r2, #1
    346e:	709a      	strb	r2, [r3, #2]
    3470:	e038      	b.n	34e4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3472:	68bb      	ldr	r3, [r7, #8]
    3474:	2b01      	cmp	r3, #1
    3476:	d113      	bne.n	34a0 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3478:	693b      	ldr	r3, [r7, #16]
    347a:	2202      	movs	r2, #2
    347c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    347e:	693b      	ldr	r3, [r7, #16]
    3480:	781b      	ldrb	r3, [r3, #0]
    3482:	2b00      	cmp	r3, #0
    3484:	d108      	bne.n	3498 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3486:	693b      	ldr	r3, [r7, #16]
    3488:	2202      	movs	r2, #2
    348a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    348c:	7bfb      	ldrb	r3, [r7, #15]
    348e:	2100      	movs	r1, #0
    3490:	4618      	mov	r0, r3
    3492:	4b1c      	ldr	r3, [pc, #112]	; (3504 <_usb_d_cb_trans_done+0xdc>)
    3494:	4798      	blx	r3
    3496:	e025      	b.n	34e4 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3498:	693b      	ldr	r3, [r7, #16]
    349a:	2205      	movs	r2, #5
    349c:	709a      	strb	r2, [r3, #2]
    349e:	e021      	b.n	34e4 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    34a0:	68bb      	ldr	r3, [r7, #8]
    34a2:	2b02      	cmp	r3, #2
    34a4:	d10e      	bne.n	34c4 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    34a6:	693b      	ldr	r3, [r7, #16]
    34a8:	2204      	movs	r2, #4
    34aa:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    34ac:	693b      	ldr	r3, [r7, #16]
    34ae:	781b      	ldrb	r3, [r3, #0]
    34b0:	2b00      	cmp	r3, #0
    34b2:	d103      	bne.n	34bc <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    34b4:	693b      	ldr	r3, [r7, #16]
    34b6:	2202      	movs	r2, #2
    34b8:	709a      	strb	r2, [r3, #2]
			return;
    34ba:	e01a      	b.n	34f2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    34bc:	693b      	ldr	r3, [r7, #16]
    34be:	2201      	movs	r2, #1
    34c0:	709a      	strb	r2, [r3, #2]
    34c2:	e00f      	b.n	34e4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    34c4:	68bb      	ldr	r3, [r7, #8]
    34c6:	2b03      	cmp	r3, #3
    34c8:	d106      	bne.n	34d8 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    34ca:	693b      	ldr	r3, [r7, #16]
    34cc:	2200      	movs	r2, #0
    34ce:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    34d0:	693b      	ldr	r3, [r7, #16]
    34d2:	2205      	movs	r2, #5
    34d4:	70da      	strb	r2, [r3, #3]
    34d6:	e005      	b.n	34e4 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    34d8:	693b      	ldr	r3, [r7, #16]
    34da:	2206      	movs	r2, #6
    34dc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    34de:	693b      	ldr	r3, [r7, #16]
    34e0:	2206      	movs	r2, #6
    34e2:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    34e4:	693b      	ldr	r3, [r7, #16]
    34e6:	69db      	ldr	r3, [r3, #28]
    34e8:	693a      	ldr	r2, [r7, #16]
    34ea:	78d1      	ldrb	r1, [r2, #3]
    34ec:	687a      	ldr	r2, [r7, #4]
    34ee:	7bf8      	ldrb	r0, [r7, #15]
    34f0:	4798      	blx	r3
}
    34f2:	3718      	adds	r7, #24
    34f4:	46bd      	mov	sp, r7
    34f6:	bd80      	pop	{r7, pc}
    34f8:	0000315d 	.word	0x0000315d
    34fc:	200006dc 	.word	0x200006dc
    3500:	00003365 	.word	0x00003365
    3504:	0000b011 	.word	0x0000b011

00003508 <usb_d_init>:

int32_t usb_d_init(void)
{
    3508:	b580      	push	{r7, lr}
    350a:	b082      	sub	sp, #8
    350c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    350e:	4b21      	ldr	r3, [pc, #132]	; (3594 <usb_d_init+0x8c>)
    3510:	4798      	blx	r3
    3512:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3514:	683b      	ldr	r3, [r7, #0]
    3516:	2b00      	cmp	r3, #0
    3518:	da01      	bge.n	351e <usb_d_init+0x16>
		return rc;
    351a:	683b      	ldr	r3, [r7, #0]
    351c:	e036      	b.n	358c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    351e:	2280      	movs	r2, #128	; 0x80
    3520:	2100      	movs	r1, #0
    3522:	481d      	ldr	r0, [pc, #116]	; (3598 <usb_d_init+0x90>)
    3524:	4b1d      	ldr	r3, [pc, #116]	; (359c <usb_d_init+0x94>)
    3526:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3528:	2300      	movs	r3, #0
    352a:	71fb      	strb	r3, [r7, #7]
    352c:	e01e      	b.n	356c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    352e:	79fb      	ldrb	r3, [r7, #7]
    3530:	4a19      	ldr	r2, [pc, #100]	; (3598 <usb_d_init+0x90>)
    3532:	015b      	lsls	r3, r3, #5
    3534:	4413      	add	r3, r2
    3536:	3301      	adds	r3, #1
    3538:	22ff      	movs	r2, #255	; 0xff
    353a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    353c:	79fb      	ldrb	r3, [r7, #7]
    353e:	4a16      	ldr	r2, [pc, #88]	; (3598 <usb_d_init+0x90>)
    3540:	015b      	lsls	r3, r3, #5
    3542:	4413      	add	r3, r2
    3544:	3314      	adds	r3, #20
    3546:	4a16      	ldr	r2, [pc, #88]	; (35a0 <usb_d_init+0x98>)
    3548:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    354a:	79fb      	ldrb	r3, [r7, #7]
    354c:	4a12      	ldr	r2, [pc, #72]	; (3598 <usb_d_init+0x90>)
    354e:	015b      	lsls	r3, r3, #5
    3550:	4413      	add	r3, r2
    3552:	3318      	adds	r3, #24
    3554:	4a12      	ldr	r2, [pc, #72]	; (35a0 <usb_d_init+0x98>)
    3556:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3558:	79fb      	ldrb	r3, [r7, #7]
    355a:	4a0f      	ldr	r2, [pc, #60]	; (3598 <usb_d_init+0x90>)
    355c:	015b      	lsls	r3, r3, #5
    355e:	4413      	add	r3, r2
    3560:	331c      	adds	r3, #28
    3562:	4a0f      	ldr	r2, [pc, #60]	; (35a0 <usb_d_init+0x98>)
    3564:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3566:	79fb      	ldrb	r3, [r7, #7]
    3568:	3301      	adds	r3, #1
    356a:	71fb      	strb	r3, [r7, #7]
    356c:	79fb      	ldrb	r3, [r7, #7]
    356e:	2b03      	cmp	r3, #3
    3570:	d9dd      	bls.n	352e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3572:	490c      	ldr	r1, [pc, #48]	; (35a4 <usb_d_init+0x9c>)
    3574:	2000      	movs	r0, #0
    3576:	4b0c      	ldr	r3, [pc, #48]	; (35a8 <usb_d_init+0xa0>)
    3578:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    357a:	490c      	ldr	r1, [pc, #48]	; (35ac <usb_d_init+0xa4>)
    357c:	2001      	movs	r0, #1
    357e:	4b0a      	ldr	r3, [pc, #40]	; (35a8 <usb_d_init+0xa0>)
    3580:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3582:	490b      	ldr	r1, [pc, #44]	; (35b0 <usb_d_init+0xa8>)
    3584:	2002      	movs	r0, #2
    3586:	4b08      	ldr	r3, [pc, #32]	; (35a8 <usb_d_init+0xa0>)
    3588:	4798      	blx	r3
	return ERR_NONE;
    358a:	2300      	movs	r3, #0
}
    358c:	4618      	mov	r0, r3
    358e:	3708      	adds	r7, #8
    3590:	46bd      	mov	sp, r7
    3592:	bd80      	pop	{r7, pc}
    3594:	0000a859 	.word	0x0000a859
    3598:	200006dc 	.word	0x200006dc
    359c:	0000fa8d 	.word	0x0000fa8d
    35a0:	00003231 	.word	0x00003231
    35a4:	0000324d 	.word	0x0000324d
    35a8:	0000b4a1 	.word	0x0000b4a1
    35ac:	00003315 	.word	0x00003315
    35b0:	00003429 	.word	0x00003429

000035b4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    35b4:	b580      	push	{r7, lr}
    35b6:	b082      	sub	sp, #8
    35b8:	af00      	add	r7, sp, #0
    35ba:	4603      	mov	r3, r0
    35bc:	6039      	str	r1, [r7, #0]
    35be:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    35c0:	79fb      	ldrb	r3, [r7, #7]
    35c2:	6839      	ldr	r1, [r7, #0]
    35c4:	4618      	mov	r0, r3
    35c6:	4b03      	ldr	r3, [pc, #12]	; (35d4 <usb_d_register_callback+0x20>)
    35c8:	4798      	blx	r3
}
    35ca:	bf00      	nop
    35cc:	3708      	adds	r7, #8
    35ce:	46bd      	mov	sp, r7
    35d0:	bd80      	pop	{r7, pc}
    35d2:	bf00      	nop
    35d4:	0000b459 	.word	0x0000b459

000035d8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    35d8:	b580      	push	{r7, lr}
    35da:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    35dc:	4b02      	ldr	r3, [pc, #8]	; (35e8 <usb_d_enable+0x10>)
    35de:	4798      	blx	r3
    35e0:	4603      	mov	r3, r0
}
    35e2:	4618      	mov	r0, r3
    35e4:	bd80      	pop	{r7, pc}
    35e6:	bf00      	nop
    35e8:	0000a949 	.word	0x0000a949

000035ec <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    35ec:	b580      	push	{r7, lr}
    35ee:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    35f0:	4b01      	ldr	r3, [pc, #4]	; (35f8 <usb_d_attach+0xc>)
    35f2:	4798      	blx	r3
}
    35f4:	bf00      	nop
    35f6:	bd80      	pop	{r7, pc}
    35f8:	0000a9cd 	.word	0x0000a9cd

000035fc <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    35fc:	b580      	push	{r7, lr}
    35fe:	b082      	sub	sp, #8
    3600:	af00      	add	r7, sp, #0
    3602:	4603      	mov	r3, r0
    3604:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3606:	79fb      	ldrb	r3, [r7, #7]
    3608:	4618      	mov	r0, r3
    360a:	4b03      	ldr	r3, [pc, #12]	; (3618 <usb_d_set_address+0x1c>)
    360c:	4798      	blx	r3
}
    360e:	bf00      	nop
    3610:	3708      	adds	r7, #8
    3612:	46bd      	mov	sp, r7
    3614:	bd80      	pop	{r7, pc}
    3616:	bf00      	nop
    3618:	0000a9e1 	.word	0x0000a9e1

0000361c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    361c:	b580      	push	{r7, lr}
    361e:	b082      	sub	sp, #8
    3620:	af00      	add	r7, sp, #0
    3622:	4603      	mov	r3, r0
    3624:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3626:	79fb      	ldrb	r3, [r7, #7]
    3628:	b29b      	uxth	r3, r3
    362a:	461a      	mov	r2, r3
    362c:	2100      	movs	r1, #0
    362e:	2000      	movs	r0, #0
    3630:	4b03      	ldr	r3, [pc, #12]	; (3640 <usb_d_ep0_init+0x24>)
    3632:	4798      	blx	r3
    3634:	4603      	mov	r3, r0
}
    3636:	4618      	mov	r0, r3
    3638:	3708      	adds	r7, #8
    363a:	46bd      	mov	sp, r7
    363c:	bd80      	pop	{r7, pc}
    363e:	bf00      	nop
    3640:	00003645 	.word	0x00003645

00003644 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3644:	b580      	push	{r7, lr}
    3646:	b086      	sub	sp, #24
    3648:	af00      	add	r7, sp, #0
    364a:	4603      	mov	r3, r0
    364c:	71fb      	strb	r3, [r7, #7]
    364e:	460b      	mov	r3, r1
    3650:	71bb      	strb	r3, [r7, #6]
    3652:	4613      	mov	r3, r2
    3654:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3656:	79fb      	ldrb	r3, [r7, #7]
    3658:	4618      	mov	r0, r3
    365a:	4b1e      	ldr	r3, [pc, #120]	; (36d4 <usb_d_ep_init+0x90>)
    365c:	4798      	blx	r3
    365e:	4603      	mov	r3, r0
    3660:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3662:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3666:	015b      	lsls	r3, r3, #5
    3668:	4a1b      	ldr	r2, [pc, #108]	; (36d8 <usb_d_ep_init+0x94>)
    366a:	4413      	add	r3, r2
    366c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    366e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3672:	2b00      	cmp	r3, #0
    3674:	db02      	blt.n	367c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3676:	f06f 0313 	mvn.w	r3, #19
    367a:	e027      	b.n	36cc <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    367c:	20ff      	movs	r0, #255	; 0xff
    367e:	4b15      	ldr	r3, [pc, #84]	; (36d4 <usb_d_ep_init+0x90>)
    3680:	4798      	blx	r3
    3682:	4603      	mov	r3, r0
    3684:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3686:	f997 3017 	ldrsb.w	r3, [r7, #23]
    368a:	2b00      	cmp	r3, #0
    368c:	da02      	bge.n	3694 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    368e:	f06f 0314 	mvn.w	r3, #20
    3692:	e01b      	b.n	36cc <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3694:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3698:	015b      	lsls	r3, r3, #5
    369a:	4a0f      	ldr	r2, [pc, #60]	; (36d8 <usb_d_ep_init+0x94>)
    369c:	4413      	add	r3, r2
    369e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    36a0:	88ba      	ldrh	r2, [r7, #4]
    36a2:	79b9      	ldrb	r1, [r7, #6]
    36a4:	79fb      	ldrb	r3, [r7, #7]
    36a6:	4618      	mov	r0, r3
    36a8:	4b0c      	ldr	r3, [pc, #48]	; (36dc <usb_d_ep_init+0x98>)
    36aa:	4798      	blx	r3
    36ac:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    36ae:	68fb      	ldr	r3, [r7, #12]
    36b0:	2b00      	cmp	r3, #0
    36b2:	da01      	bge.n	36b8 <usb_d_ep_init+0x74>
		return rc;
    36b4:	68fb      	ldr	r3, [r7, #12]
    36b6:	e009      	b.n	36cc <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    36b8:	693b      	ldr	r3, [r7, #16]
    36ba:	79fa      	ldrb	r2, [r7, #7]
    36bc:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    36be:	79bb      	ldrb	r3, [r7, #6]
    36c0:	f003 0303 	and.w	r3, r3, #3
    36c4:	b2da      	uxtb	r2, r3
    36c6:	693b      	ldr	r3, [r7, #16]
    36c8:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    36ca:	2300      	movs	r3, #0
}
    36cc:	4618      	mov	r0, r3
    36ce:	3718      	adds	r7, #24
    36d0:	46bd      	mov	sp, r7
    36d2:	bd80      	pop	{r7, pc}
    36d4:	0000315d 	.word	0x0000315d
    36d8:	200006dc 	.word	0x200006dc
    36dc:	0000aa81 	.word	0x0000aa81

000036e0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    36e0:	b580      	push	{r7, lr}
    36e2:	b084      	sub	sp, #16
    36e4:	af00      	add	r7, sp, #0
    36e6:	4603      	mov	r3, r0
    36e8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    36ea:	79fb      	ldrb	r3, [r7, #7]
    36ec:	4618      	mov	r0, r3
    36ee:	4b0d      	ldr	r3, [pc, #52]	; (3724 <usb_d_ep_deinit+0x44>)
    36f0:	4798      	blx	r3
    36f2:	4603      	mov	r3, r0
    36f4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    36f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    36fa:	015b      	lsls	r3, r3, #5
    36fc:	4a0a      	ldr	r2, [pc, #40]	; (3728 <usb_d_ep_deinit+0x48>)
    36fe:	4413      	add	r3, r2
    3700:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3702:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3706:	2b00      	cmp	r3, #0
    3708:	db07      	blt.n	371a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    370a:	79fb      	ldrb	r3, [r7, #7]
    370c:	4618      	mov	r0, r3
    370e:	4b07      	ldr	r3, [pc, #28]	; (372c <usb_d_ep_deinit+0x4c>)
    3710:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3712:	68bb      	ldr	r3, [r7, #8]
    3714:	22ff      	movs	r2, #255	; 0xff
    3716:	705a      	strb	r2, [r3, #1]
    3718:	e000      	b.n	371c <usb_d_ep_deinit+0x3c>
		return;
    371a:	bf00      	nop
}
    371c:	3710      	adds	r7, #16
    371e:	46bd      	mov	sp, r7
    3720:	bd80      	pop	{r7, pc}
    3722:	bf00      	nop
    3724:	0000315d 	.word	0x0000315d
    3728:	200006dc 	.word	0x200006dc
    372c:	0000abb5 	.word	0x0000abb5

00003730 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3730:	b580      	push	{r7, lr}
    3732:	b086      	sub	sp, #24
    3734:	af00      	add	r7, sp, #0
    3736:	4603      	mov	r3, r0
    3738:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    373a:	79fb      	ldrb	r3, [r7, #7]
    373c:	4618      	mov	r0, r3
    373e:	4b15      	ldr	r3, [pc, #84]	; (3794 <usb_d_ep_enable+0x64>)
    3740:	4798      	blx	r3
    3742:	4603      	mov	r3, r0
    3744:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3746:	f997 3017 	ldrsb.w	r3, [r7, #23]
    374a:	015b      	lsls	r3, r3, #5
    374c:	4a12      	ldr	r2, [pc, #72]	; (3798 <usb_d_ep_enable+0x68>)
    374e:	4413      	add	r3, r2
    3750:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3752:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3756:	2b00      	cmp	r3, #0
    3758:	da02      	bge.n	3760 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    375a:	f06f 0311 	mvn.w	r3, #17
    375e:	e014      	b.n	378a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3760:	693b      	ldr	r3, [r7, #16]
    3762:	781b      	ldrb	r3, [r3, #0]
    3764:	2b00      	cmp	r3, #0
    3766:	d101      	bne.n	376c <usb_d_ep_enable+0x3c>
    3768:	2202      	movs	r2, #2
    376a:	e000      	b.n	376e <usb_d_ep_enable+0x3e>
    376c:	2201      	movs	r2, #1
    376e:	693b      	ldr	r3, [r7, #16]
    3770:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3772:	79fb      	ldrb	r3, [r7, #7]
    3774:	4618      	mov	r0, r3
    3776:	4b09      	ldr	r3, [pc, #36]	; (379c <usb_d_ep_enable+0x6c>)
    3778:	4798      	blx	r3
    377a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    377c:	68fb      	ldr	r3, [r7, #12]
    377e:	2b00      	cmp	r3, #0
    3780:	da02      	bge.n	3788 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3782:	693b      	ldr	r3, [r7, #16]
    3784:	2200      	movs	r2, #0
    3786:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3788:	68fb      	ldr	r3, [r7, #12]
}
    378a:	4618      	mov	r0, r3
    378c:	3718      	adds	r7, #24
    378e:	46bd      	mov	sp, r7
    3790:	bd80      	pop	{r7, pc}
    3792:	bf00      	nop
    3794:	0000315d 	.word	0x0000315d
    3798:	200006dc 	.word	0x200006dc
    379c:	0000ac99 	.word	0x0000ac99

000037a0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    37a0:	b590      	push	{r4, r7, lr}
    37a2:	b08d      	sub	sp, #52	; 0x34
    37a4:	af02      	add	r7, sp, #8
    37a6:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    37a8:	687b      	ldr	r3, [r7, #4]
    37aa:	7a1b      	ldrb	r3, [r3, #8]
    37ac:	4618      	mov	r0, r3
    37ae:	4b51      	ldr	r3, [pc, #324]	; (38f4 <usb_d_ep_transfer+0x154>)
    37b0:	4798      	blx	r3
    37b2:	4603      	mov	r3, r0
    37b4:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    37b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
    37ba:	015b      	lsls	r3, r3, #5
    37bc:	4a4e      	ldr	r2, [pc, #312]	; (38f8 <usb_d_ep_transfer+0x158>)
    37be:	4413      	add	r3, r2
    37c0:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	7a1b      	ldrb	r3, [r3, #8]
    37c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    37ca:	2b00      	cmp	r3, #0
    37cc:	bf14      	ite	ne
    37ce:	2301      	movne	r3, #1
    37d0:	2300      	moveq	r3, #0
    37d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    37d6:	687b      	ldr	r3, [r7, #4]
    37d8:	7a5b      	ldrb	r3, [r3, #9]
    37da:	2b00      	cmp	r3, #0
    37dc:	bf14      	ite	ne
    37de:	2301      	movne	r3, #1
    37e0:	2300      	moveq	r3, #0
    37e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    37e6:	687b      	ldr	r3, [r7, #4]
    37e8:	685b      	ldr	r3, [r3, #4]
    37ea:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    37ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
    37f0:	2b00      	cmp	r3, #0
    37f2:	da02      	bge.n	37fa <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    37f4:	f06f 0311 	mvn.w	r3, #17
    37f8:	e077      	b.n	38ea <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    37fa:	f107 0308 	add.w	r3, r7, #8
    37fe:	4618      	mov	r0, r3
    3800:	4b3e      	ldr	r3, [pc, #248]	; (38fc <usb_d_ep_transfer+0x15c>)
    3802:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3804:	69bb      	ldr	r3, [r7, #24]
    3806:	789b      	ldrb	r3, [r3, #2]
    3808:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    380a:	7bfb      	ldrb	r3, [r7, #15]
    380c:	b2db      	uxtb	r3, r3
    380e:	2b01      	cmp	r3, #1
    3810:	d10c      	bne.n	382c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3812:	69bb      	ldr	r3, [r7, #24]
    3814:	2203      	movs	r2, #3
    3816:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3818:	f107 0308 	add.w	r3, r7, #8
    381c:	4618      	mov	r0, r3
    381e:	4b38      	ldr	r3, [pc, #224]	; (3900 <usb_d_ep_transfer+0x160>)
    3820:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3822:	69bb      	ldr	r3, [r7, #24]
    3824:	781b      	ldrb	r3, [r3, #0]
    3826:	2b00      	cmp	r3, #0
    3828:	d151      	bne.n	38ce <usb_d_ep_transfer+0x12e>
    382a:	e017      	b.n	385c <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    382c:	f107 0308 	add.w	r3, r7, #8
    3830:	4618      	mov	r0, r3
    3832:	4b33      	ldr	r3, [pc, #204]	; (3900 <usb_d_ep_transfer+0x160>)
    3834:	4798      	blx	r3
		switch (state) {
    3836:	7bfb      	ldrb	r3, [r7, #15]
    3838:	b2db      	uxtb	r3, r3
    383a:	2b05      	cmp	r3, #5
    383c:	d004      	beq.n	3848 <usb_d_ep_transfer+0xa8>
    383e:	2b06      	cmp	r3, #6
    3840:	d004      	beq.n	384c <usb_d_ep_transfer+0xac>
    3842:	2b00      	cmp	r3, #0
    3844:	d005      	beq.n	3852 <usb_d_ep_transfer+0xb2>
    3846:	e007      	b.n	3858 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3848:	2302      	movs	r3, #2
    384a:	e04e      	b.n	38ea <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    384c:	f06f 030f 	mvn.w	r3, #15
    3850:	e04b      	b.n	38ea <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3852:	f06f 0312 	mvn.w	r3, #18
    3856:	e048      	b.n	38ea <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3858:	2301      	movs	r3, #1
    385a:	e046      	b.n	38ea <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    385c:	69bb      	ldr	r3, [r7, #24]
    385e:	7c9b      	ldrb	r3, [r3, #18]
    3860:	b29a      	uxth	r2, r3
    3862:	69bb      	ldr	r3, [r7, #24]
    3864:	7cdb      	ldrb	r3, [r3, #19]
    3866:	b29b      	uxth	r3, r3
    3868:	021b      	lsls	r3, r3, #8
    386a:	b29b      	uxth	r3, r3
    386c:	4413      	add	r3, r2
    386e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3870:	8afb      	ldrh	r3, [r7, #22]
    3872:	2b00      	cmp	r3, #0
    3874:	d10b      	bne.n	388e <usb_d_ep_transfer+0xee>
			dir                 = true;
    3876:	2301      	movs	r3, #1
    3878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    387c:	2300      	movs	r3, #0
    387e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3880:	2301      	movs	r3, #1
    3882:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3886:	69bb      	ldr	r3, [r7, #24]
    3888:	2204      	movs	r2, #4
    388a:	709a      	strb	r2, [r3, #2]
    388c:	e01f      	b.n	38ce <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    388e:	69bb      	ldr	r3, [r7, #24]
    3890:	7b1b      	ldrb	r3, [r3, #12]
    3892:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3896:	2b00      	cmp	r3, #0
    3898:	bf14      	ite	ne
    389a:	2301      	movne	r3, #1
    389c:	2300      	moveq	r3, #0
    389e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    38a2:	8afa      	ldrh	r2, [r7, #22]
    38a4:	6a3b      	ldr	r3, [r7, #32]
    38a6:	429a      	cmp	r2, r3
    38a8:	d201      	bcs.n	38ae <usb_d_ep_transfer+0x10e>
				len = req_len;
    38aa:	8afb      	ldrh	r3, [r7, #22]
    38ac:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    38ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    38b2:	2b00      	cmp	r3, #0
    38b4:	d008      	beq.n	38c8 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    38b6:	8afa      	ldrh	r2, [r7, #22]
    38b8:	6a3b      	ldr	r3, [r7, #32]
    38ba:	429a      	cmp	r2, r3
    38bc:	bf8c      	ite	hi
    38be:	2301      	movhi	r3, #1
    38c0:	2300      	movls	r3, #0
    38c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    38c6:	e002      	b.n	38ce <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    38c8:	2300      	movs	r3, #0
    38ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    38ce:	687b      	ldr	r3, [r7, #4]
    38d0:	7a18      	ldrb	r0, [r3, #8]
    38d2:	687b      	ldr	r3, [r7, #4]
    38d4:	681a      	ldr	r2, [r3, #0]
    38d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    38da:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    38de:	9300      	str	r3, [sp, #0]
    38e0:	6a3b      	ldr	r3, [r7, #32]
    38e2:	4c08      	ldr	r4, [pc, #32]	; (3904 <usb_d_ep_transfer+0x164>)
    38e4:	47a0      	blx	r4
    38e6:	6138      	str	r0, [r7, #16]
	return rc;
    38e8:	693b      	ldr	r3, [r7, #16]
}
    38ea:	4618      	mov	r0, r3
    38ec:	372c      	adds	r7, #44	; 0x2c
    38ee:	46bd      	mov	sp, r7
    38f0:	bd90      	pop	{r4, r7, pc}
    38f2:	bf00      	nop
    38f4:	0000315d 	.word	0x0000315d
    38f8:	200006dc 	.word	0x200006dc
    38fc:	0000bc0d 	.word	0x0000bc0d
    3900:	0000bc33 	.word	0x0000bc33
    3904:	000031dd 	.word	0x000031dd

00003908 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3908:	b580      	push	{r7, lr}
    390a:	b084      	sub	sp, #16
    390c:	af00      	add	r7, sp, #0
    390e:	4603      	mov	r3, r0
    3910:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3912:	79fb      	ldrb	r3, [r7, #7]
    3914:	4618      	mov	r0, r3
    3916:	4b0e      	ldr	r3, [pc, #56]	; (3950 <usb_d_ep_abort+0x48>)
    3918:	4798      	blx	r3
    391a:	4603      	mov	r3, r0
    391c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    391e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3922:	015b      	lsls	r3, r3, #5
    3924:	4a0b      	ldr	r2, [pc, #44]	; (3954 <usb_d_ep_abort+0x4c>)
    3926:	4413      	add	r3, r2
    3928:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    392e:	2b00      	cmp	r3, #0
    3930:	db0a      	blt.n	3948 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3932:	79fb      	ldrb	r3, [r7, #7]
    3934:	4618      	mov	r0, r3
    3936:	4b08      	ldr	r3, [pc, #32]	; (3958 <usb_d_ep_abort+0x50>)
    3938:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    393a:	68bb      	ldr	r3, [r7, #8]
    393c:	2201      	movs	r2, #1
    393e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3940:	68bb      	ldr	r3, [r7, #8]
    3942:	2204      	movs	r2, #4
    3944:	70da      	strb	r2, [r3, #3]
    3946:	e000      	b.n	394a <usb_d_ep_abort+0x42>
		return;
    3948:	bf00      	nop
}
    394a:	3710      	adds	r7, #16
    394c:	46bd      	mov	sp, r7
    394e:	bd80      	pop	{r7, pc}
    3950:	0000315d 	.word	0x0000315d
    3954:	200006dc 	.word	0x200006dc
    3958:	0000b405 	.word	0x0000b405

0000395c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    395c:	b580      	push	{r7, lr}
    395e:	b086      	sub	sp, #24
    3960:	af00      	add	r7, sp, #0
    3962:	4603      	mov	r3, r0
    3964:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3966:	79fb      	ldrb	r3, [r7, #7]
    3968:	4618      	mov	r0, r3
    396a:	4b1a      	ldr	r3, [pc, #104]	; (39d4 <_usb_d_ep_halt_clr+0x78>)
    396c:	4798      	blx	r3
    396e:	4603      	mov	r3, r0
    3970:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3972:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3976:	015b      	lsls	r3, r3, #5
    3978:	4a17      	ldr	r2, [pc, #92]	; (39d8 <_usb_d_ep_halt_clr+0x7c>)
    397a:	4413      	add	r3, r2
    397c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    397e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3982:	2b00      	cmp	r3, #0
    3984:	da02      	bge.n	398c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3986:	f06f 0311 	mvn.w	r3, #17
    398a:	e01f      	b.n	39cc <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    398c:	79fb      	ldrb	r3, [r7, #7]
    398e:	2102      	movs	r1, #2
    3990:	4618      	mov	r0, r3
    3992:	4b12      	ldr	r3, [pc, #72]	; (39dc <_usb_d_ep_halt_clr+0x80>)
    3994:	4798      	blx	r3
    3996:	4603      	mov	r3, r0
    3998:	2b00      	cmp	r3, #0
    399a:	d016      	beq.n	39ca <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    399c:	79fb      	ldrb	r3, [r7, #7]
    399e:	2100      	movs	r1, #0
    39a0:	4618      	mov	r0, r3
    39a2:	4b0e      	ldr	r3, [pc, #56]	; (39dc <_usb_d_ep_halt_clr+0x80>)
    39a4:	4798      	blx	r3
    39a6:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    39a8:	68fb      	ldr	r3, [r7, #12]
    39aa:	2b00      	cmp	r3, #0
    39ac:	da01      	bge.n	39b2 <_usb_d_ep_halt_clr+0x56>
			return rc;
    39ae:	68fb      	ldr	r3, [r7, #12]
    39b0:	e00c      	b.n	39cc <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    39b2:	693b      	ldr	r3, [r7, #16]
    39b4:	2201      	movs	r2, #1
    39b6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    39b8:	693b      	ldr	r3, [r7, #16]
    39ba:	2203      	movs	r2, #3
    39bc:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    39be:	693b      	ldr	r3, [r7, #16]
    39c0:	69db      	ldr	r3, [r3, #28]
    39c2:	79f8      	ldrb	r0, [r7, #7]
    39c4:	2200      	movs	r2, #0
    39c6:	2103      	movs	r1, #3
    39c8:	4798      	blx	r3
	}
	return ERR_NONE;
    39ca:	2300      	movs	r3, #0
}
    39cc:	4618      	mov	r0, r3
    39ce:	3718      	adds	r7, #24
    39d0:	46bd      	mov	sp, r7
    39d2:	bd80      	pop	{r7, pc}
    39d4:	0000315d 	.word	0x0000315d
    39d8:	200006dc 	.word	0x200006dc
    39dc:	0000b011 	.word	0x0000b011

000039e0 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    39e0:	b580      	push	{r7, lr}
    39e2:	b082      	sub	sp, #8
    39e4:	af00      	add	r7, sp, #0
    39e6:	4603      	mov	r3, r0
    39e8:	460a      	mov	r2, r1
    39ea:	71fb      	strb	r3, [r7, #7]
    39ec:	4613      	mov	r3, r2
    39ee:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    39f0:	79bb      	ldrb	r3, [r7, #6]
    39f2:	2b00      	cmp	r3, #0
    39f4:	d105      	bne.n	3a02 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    39f6:	79fb      	ldrb	r3, [r7, #7]
    39f8:	4618      	mov	r0, r3
    39fa:	4b0c      	ldr	r3, [pc, #48]	; (3a2c <usb_d_ep_halt+0x4c>)
    39fc:	4798      	blx	r3
    39fe:	4603      	mov	r3, r0
    3a00:	e00f      	b.n	3a22 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3a02:	79bb      	ldrb	r3, [r7, #6]
    3a04:	2b01      	cmp	r3, #1
    3a06:	d106      	bne.n	3a16 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3a08:	79fb      	ldrb	r3, [r7, #7]
    3a0a:	2101      	movs	r1, #1
    3a0c:	4618      	mov	r0, r3
    3a0e:	4b08      	ldr	r3, [pc, #32]	; (3a30 <usb_d_ep_halt+0x50>)
    3a10:	4798      	blx	r3
    3a12:	4603      	mov	r3, r0
    3a14:	e005      	b.n	3a22 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3a16:	79fb      	ldrb	r3, [r7, #7]
    3a18:	2102      	movs	r1, #2
    3a1a:	4618      	mov	r0, r3
    3a1c:	4b04      	ldr	r3, [pc, #16]	; (3a30 <usb_d_ep_halt+0x50>)
    3a1e:	4798      	blx	r3
    3a20:	4603      	mov	r3, r0
	}
}
    3a22:	4618      	mov	r0, r3
    3a24:	3708      	adds	r7, #8
    3a26:	46bd      	mov	sp, r7
    3a28:	bd80      	pop	{r7, pc}
    3a2a:	bf00      	nop
    3a2c:	0000395d 	.word	0x0000395d
    3a30:	0000b011 	.word	0x0000b011

00003a34 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3a34:	b580      	push	{r7, lr}
    3a36:	b086      	sub	sp, #24
    3a38:	af00      	add	r7, sp, #0
    3a3a:	4603      	mov	r3, r0
    3a3c:	603a      	str	r2, [r7, #0]
    3a3e:	71fb      	strb	r3, [r7, #7]
    3a40:	460b      	mov	r3, r1
    3a42:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a44:	79fb      	ldrb	r3, [r7, #7]
    3a46:	4618      	mov	r0, r3
    3a48:	4b16      	ldr	r3, [pc, #88]	; (3aa4 <usb_d_ep_register_callback+0x70>)
    3a4a:	4798      	blx	r3
    3a4c:	4603      	mov	r3, r0
    3a4e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a54:	015b      	lsls	r3, r3, #5
    3a56:	4a14      	ldr	r2, [pc, #80]	; (3aa8 <usb_d_ep_register_callback+0x74>)
    3a58:	4413      	add	r3, r2
    3a5a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3a5c:	683b      	ldr	r3, [r7, #0]
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d001      	beq.n	3a66 <usb_d_ep_register_callback+0x32>
    3a62:	683b      	ldr	r3, [r7, #0]
    3a64:	e000      	b.n	3a68 <usb_d_ep_register_callback+0x34>
    3a66:	4b11      	ldr	r3, [pc, #68]	; (3aac <usb_d_ep_register_callback+0x78>)
    3a68:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a6e:	2b00      	cmp	r3, #0
    3a70:	db13      	blt.n	3a9a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3a72:	79bb      	ldrb	r3, [r7, #6]
    3a74:	2b01      	cmp	r3, #1
    3a76:	d008      	beq.n	3a8a <usb_d_ep_register_callback+0x56>
    3a78:	2b02      	cmp	r3, #2
    3a7a:	d00a      	beq.n	3a92 <usb_d_ep_register_callback+0x5e>
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d000      	beq.n	3a82 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3a80:	e00c      	b.n	3a9c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3a82:	693b      	ldr	r3, [r7, #16]
    3a84:	68fa      	ldr	r2, [r7, #12]
    3a86:	615a      	str	r2, [r3, #20]
		break;
    3a88:	e008      	b.n	3a9c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3a8a:	693b      	ldr	r3, [r7, #16]
    3a8c:	68fa      	ldr	r2, [r7, #12]
    3a8e:	619a      	str	r2, [r3, #24]
		break;
    3a90:	e004      	b.n	3a9c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3a92:	693b      	ldr	r3, [r7, #16]
    3a94:	68fa      	ldr	r2, [r7, #12]
    3a96:	61da      	str	r2, [r3, #28]
		break;
    3a98:	e000      	b.n	3a9c <usb_d_ep_register_callback+0x68>
		return;
    3a9a:	bf00      	nop
	}
}
    3a9c:	3718      	adds	r7, #24
    3a9e:	46bd      	mov	sp, r7
    3aa0:	bd80      	pop	{r7, pc}
    3aa2:	bf00      	nop
    3aa4:	0000315d 	.word	0x0000315d
    3aa8:	200006dc 	.word	0x200006dc
    3aac:	00003231 	.word	0x00003231

00003ab0 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3ab0:	b480      	push	{r7}
    3ab2:	b085      	sub	sp, #20
    3ab4:	af00      	add	r7, sp, #0
    3ab6:	4603      	mov	r3, r0
    3ab8:	60b9      	str	r1, [r7, #8]
    3aba:	607a      	str	r2, [r7, #4]
    3abc:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3abe:	7bfb      	ldrb	r3, [r7, #15]
    3ac0:	f083 0301 	eor.w	r3, r3, #1
    3ac4:	b2db      	uxtb	r3, r3
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d000      	beq.n	3acc <assert+0x1c>
		__asm("BKPT #0");
    3aca:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3acc:	bf00      	nop
    3ace:	3714      	adds	r7, #20
    3ad0:	46bd      	mov	sp, r7
    3ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ad6:	4770      	bx	lr

00003ad8 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3ad8:	b480      	push	{r7}
    3ada:	b085      	sub	sp, #20
    3adc:	af00      	add	r7, sp, #0
    3ade:	6078      	str	r0, [r7, #4]
    3ae0:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	681b      	ldr	r3, [r3, #0]
    3ae6:	60fb      	str	r3, [r7, #12]
    3ae8:	e008      	b.n	3afc <is_list_element+0x24>
		if (it == element) {
    3aea:	68fa      	ldr	r2, [r7, #12]
    3aec:	683b      	ldr	r3, [r7, #0]
    3aee:	429a      	cmp	r2, r3
    3af0:	d101      	bne.n	3af6 <is_list_element+0x1e>
			return true;
    3af2:	2301      	movs	r3, #1
    3af4:	e006      	b.n	3b04 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3af6:	68fb      	ldr	r3, [r7, #12]
    3af8:	681b      	ldr	r3, [r3, #0]
    3afa:	60fb      	str	r3, [r7, #12]
    3afc:	68fb      	ldr	r3, [r7, #12]
    3afe:	2b00      	cmp	r3, #0
    3b00:	d1f3      	bne.n	3aea <is_list_element+0x12>
		}
	}

	return false;
    3b02:	2300      	movs	r3, #0
}
    3b04:	4618      	mov	r0, r3
    3b06:	3714      	adds	r7, #20
    3b08:	46bd      	mov	sp, r7
    3b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b0e:	4770      	bx	lr

00003b10 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3b10:	b580      	push	{r7, lr}
    3b12:	b082      	sub	sp, #8
    3b14:	af00      	add	r7, sp, #0
    3b16:	6078      	str	r0, [r7, #4]
    3b18:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3b1a:	6839      	ldr	r1, [r7, #0]
    3b1c:	6878      	ldr	r0, [r7, #4]
    3b1e:	4b0f      	ldr	r3, [pc, #60]	; (3b5c <list_insert_as_head+0x4c>)
    3b20:	4798      	blx	r3
    3b22:	4603      	mov	r3, r0
    3b24:	2b00      	cmp	r3, #0
    3b26:	bf14      	ite	ne
    3b28:	2301      	movne	r3, #1
    3b2a:	2300      	moveq	r3, #0
    3b2c:	b2db      	uxtb	r3, r3
    3b2e:	f083 0301 	eor.w	r3, r3, #1
    3b32:	b2db      	uxtb	r3, r3
    3b34:	f003 0301 	and.w	r3, r3, #1
    3b38:	b2db      	uxtb	r3, r3
    3b3a:	2239      	movs	r2, #57	; 0x39
    3b3c:	4908      	ldr	r1, [pc, #32]	; (3b60 <list_insert_as_head+0x50>)
    3b3e:	4618      	mov	r0, r3
    3b40:	4b08      	ldr	r3, [pc, #32]	; (3b64 <list_insert_as_head+0x54>)
    3b42:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3b44:	687b      	ldr	r3, [r7, #4]
    3b46:	681a      	ldr	r2, [r3, #0]
    3b48:	683b      	ldr	r3, [r7, #0]
    3b4a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3b4c:	687b      	ldr	r3, [r7, #4]
    3b4e:	683a      	ldr	r2, [r7, #0]
    3b50:	601a      	str	r2, [r3, #0]
}
    3b52:	bf00      	nop
    3b54:	3708      	adds	r7, #8
    3b56:	46bd      	mov	sp, r7
    3b58:	bd80      	pop	{r7, pc}
    3b5a:	bf00      	nop
    3b5c:	00003ad9 	.word	0x00003ad9
    3b60:	0000feec 	.word	0x0000feec
    3b64:	00003ab1 	.word	0x00003ab1

00003b68 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3b68:	b480      	push	{r7}
    3b6a:	b083      	sub	sp, #12
    3b6c:	af00      	add	r7, sp, #0
    3b6e:	6078      	str	r0, [r7, #4]
    3b70:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3b72:	687b      	ldr	r3, [r7, #4]
    3b74:	681a      	ldr	r2, [r3, #0]
    3b76:	683b      	ldr	r3, [r7, #0]
    3b78:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3b7a:	687b      	ldr	r3, [r7, #4]
    3b7c:	683a      	ldr	r2, [r7, #0]
    3b7e:	601a      	str	r2, [r3, #0]
}
    3b80:	bf00      	nop
    3b82:	370c      	adds	r7, #12
    3b84:	46bd      	mov	sp, r7
    3b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b8a:	4770      	bx	lr

00003b8c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3b8c:	b580      	push	{r7, lr}
    3b8e:	b084      	sub	sp, #16
    3b90:	af00      	add	r7, sp, #0
    3b92:	6078      	str	r0, [r7, #4]
    3b94:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3b96:	687b      	ldr	r3, [r7, #4]
    3b98:	681b      	ldr	r3, [r3, #0]
    3b9a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3b9c:	6839      	ldr	r1, [r7, #0]
    3b9e:	6878      	ldr	r0, [r7, #4]
    3ba0:	4b16      	ldr	r3, [pc, #88]	; (3bfc <list_insert_at_end+0x70>)
    3ba2:	4798      	blx	r3
    3ba4:	4603      	mov	r3, r0
    3ba6:	2b00      	cmp	r3, #0
    3ba8:	bf14      	ite	ne
    3baa:	2301      	movne	r3, #1
    3bac:	2300      	moveq	r3, #0
    3bae:	b2db      	uxtb	r3, r3
    3bb0:	f083 0301 	eor.w	r3, r3, #1
    3bb4:	b2db      	uxtb	r3, r3
    3bb6:	f003 0301 	and.w	r3, r3, #1
    3bba:	b2db      	uxtb	r3, r3
    3bbc:	224f      	movs	r2, #79	; 0x4f
    3bbe:	4910      	ldr	r1, [pc, #64]	; (3c00 <list_insert_at_end+0x74>)
    3bc0:	4618      	mov	r0, r3
    3bc2:	4b10      	ldr	r3, [pc, #64]	; (3c04 <list_insert_at_end+0x78>)
    3bc4:	4798      	blx	r3

	if (!list->head) {
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	681b      	ldr	r3, [r3, #0]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d109      	bne.n	3be2 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3bce:	687b      	ldr	r3, [r7, #4]
    3bd0:	683a      	ldr	r2, [r7, #0]
    3bd2:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3bd4:	683b      	ldr	r3, [r7, #0]
    3bd6:	2200      	movs	r2, #0
    3bd8:	601a      	str	r2, [r3, #0]
		return;
    3bda:	e00c      	b.n	3bf6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3bdc:	68fb      	ldr	r3, [r7, #12]
    3bde:	681b      	ldr	r3, [r3, #0]
    3be0:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3be2:	68fb      	ldr	r3, [r7, #12]
    3be4:	681b      	ldr	r3, [r3, #0]
    3be6:	2b00      	cmp	r3, #0
    3be8:	d1f8      	bne.n	3bdc <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3bea:	68fb      	ldr	r3, [r7, #12]
    3bec:	683a      	ldr	r2, [r7, #0]
    3bee:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3bf0:	683b      	ldr	r3, [r7, #0]
    3bf2:	2200      	movs	r2, #0
    3bf4:	601a      	str	r2, [r3, #0]
}
    3bf6:	3710      	adds	r7, #16
    3bf8:	46bd      	mov	sp, r7
    3bfa:	bd80      	pop	{r7, pc}
    3bfc:	00003ad9 	.word	0x00003ad9
    3c00:	0000feec 	.word	0x0000feec
    3c04:	00003ab1 	.word	0x00003ab1

00003c08 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3c08:	b480      	push	{r7}
    3c0a:	b085      	sub	sp, #20
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	681b      	ldr	r3, [r3, #0]
    3c14:	2b00      	cmp	r3, #0
    3c16:	d009      	beq.n	3c2c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3c18:	687b      	ldr	r3, [r7, #4]
    3c1a:	681b      	ldr	r3, [r3, #0]
    3c1c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3c1e:	687b      	ldr	r3, [r7, #4]
    3c20:	681b      	ldr	r3, [r3, #0]
    3c22:	681a      	ldr	r2, [r3, #0]
    3c24:	687b      	ldr	r3, [r7, #4]
    3c26:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3c28:	68fb      	ldr	r3, [r7, #12]
    3c2a:	e000      	b.n	3c2e <list_remove_head+0x26>
	}

	return NULL;
    3c2c:	2300      	movs	r3, #0
}
    3c2e:	4618      	mov	r0, r3
    3c30:	3714      	adds	r7, #20
    3c32:	46bd      	mov	sp, r7
    3c34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c38:	4770      	bx	lr

00003c3a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3c3a:	b480      	push	{r7}
    3c3c:	b085      	sub	sp, #20
    3c3e:	af00      	add	r7, sp, #0
    3c40:	6078      	str	r0, [r7, #4]
    3c42:	6039      	str	r1, [r7, #0]
	if (!element) {
    3c44:	683b      	ldr	r3, [r7, #0]
    3c46:	2b00      	cmp	r3, #0
    3c48:	d101      	bne.n	3c4e <list_delete_element+0x14>
		return false;
    3c4a:	2300      	movs	r3, #0
    3c4c:	e024      	b.n	3c98 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	681a      	ldr	r2, [r3, #0]
    3c52:	683b      	ldr	r3, [r7, #0]
    3c54:	429a      	cmp	r2, r3
    3c56:	d106      	bne.n	3c66 <list_delete_element+0x2c>
		list->head = list->head->next;
    3c58:	687b      	ldr	r3, [r7, #4]
    3c5a:	681b      	ldr	r3, [r3, #0]
    3c5c:	681a      	ldr	r2, [r3, #0]
    3c5e:	687b      	ldr	r3, [r7, #4]
    3c60:	601a      	str	r2, [r3, #0]
		return true;
    3c62:	2301      	movs	r3, #1
    3c64:	e018      	b.n	3c98 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3c66:	687b      	ldr	r3, [r7, #4]
    3c68:	681b      	ldr	r3, [r3, #0]
    3c6a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3c6c:	e002      	b.n	3c74 <list_delete_element+0x3a>
			it = it->next;
    3c6e:	68fb      	ldr	r3, [r7, #12]
    3c70:	681b      	ldr	r3, [r3, #0]
    3c72:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3c74:	68fb      	ldr	r3, [r7, #12]
    3c76:	2b00      	cmp	r3, #0
    3c78:	d004      	beq.n	3c84 <list_delete_element+0x4a>
    3c7a:	68fb      	ldr	r3, [r7, #12]
    3c7c:	681a      	ldr	r2, [r3, #0]
    3c7e:	683b      	ldr	r3, [r7, #0]
    3c80:	429a      	cmp	r2, r3
    3c82:	d1f4      	bne.n	3c6e <list_delete_element+0x34>
		}
		if (it) {
    3c84:	68fb      	ldr	r3, [r7, #12]
    3c86:	2b00      	cmp	r3, #0
    3c88:	d005      	beq.n	3c96 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3c8a:	683b      	ldr	r3, [r7, #0]
    3c8c:	681a      	ldr	r2, [r3, #0]
    3c8e:	68fb      	ldr	r3, [r7, #12]
    3c90:	601a      	str	r2, [r3, #0]
			return true;
    3c92:	2301      	movs	r3, #1
    3c94:	e000      	b.n	3c98 <list_delete_element+0x5e>
		}
	}

	return false;
    3c96:	2300      	movs	r3, #0
}
    3c98:	4618      	mov	r0, r3
    3c9a:	3714      	adds	r7, #20
    3c9c:	46bd      	mov	sp, r7
    3c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ca2:	4770      	bx	lr

00003ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3ca4:	b480      	push	{r7}
    3ca6:	b083      	sub	sp, #12
    3ca8:	af00      	add	r7, sp, #0
    3caa:	4603      	mov	r3, r0
    3cac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	db0b      	blt.n	3cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3cb6:	4909      	ldr	r1, [pc, #36]	; (3cdc <__NVIC_EnableIRQ+0x38>)
    3cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3cbc:	095b      	lsrs	r3, r3, #5
    3cbe:	88fa      	ldrh	r2, [r7, #6]
    3cc0:	f002 021f 	and.w	r2, r2, #31
    3cc4:	2001      	movs	r0, #1
    3cc6:	fa00 f202 	lsl.w	r2, r0, r2
    3cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3cce:	bf00      	nop
    3cd0:	370c      	adds	r7, #12
    3cd2:	46bd      	mov	sp, r7
    3cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cd8:	4770      	bx	lr
    3cda:	bf00      	nop
    3cdc:	e000e100 	.word	0xe000e100

00003ce0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3ce0:	b480      	push	{r7}
    3ce2:	b083      	sub	sp, #12
    3ce4:	af00      	add	r7, sp, #0
    3ce6:	4603      	mov	r3, r0
    3ce8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3cee:	2b00      	cmp	r3, #0
    3cf0:	db10      	blt.n	3d14 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3cf2:	490b      	ldr	r1, [pc, #44]	; (3d20 <__NVIC_DisableIRQ+0x40>)
    3cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3cf8:	095b      	lsrs	r3, r3, #5
    3cfa:	88fa      	ldrh	r2, [r7, #6]
    3cfc:	f002 021f 	and.w	r2, r2, #31
    3d00:	2001      	movs	r0, #1
    3d02:	fa00 f202 	lsl.w	r2, r0, r2
    3d06:	3320      	adds	r3, #32
    3d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3d0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d10:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3d14:	bf00      	nop
    3d16:	370c      	adds	r7, #12
    3d18:	46bd      	mov	sp, r7
    3d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d1e:	4770      	bx	lr
    3d20:	e000e100 	.word	0xe000e100

00003d24 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3d24:	b480      	push	{r7}
    3d26:	b083      	sub	sp, #12
    3d28:	af00      	add	r7, sp, #0
    3d2a:	4603      	mov	r3, r0
    3d2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d32:	2b00      	cmp	r3, #0
    3d34:	db0c      	blt.n	3d50 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d36:	4909      	ldr	r1, [pc, #36]	; (3d5c <__NVIC_ClearPendingIRQ+0x38>)
    3d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d3c:	095b      	lsrs	r3, r3, #5
    3d3e:	88fa      	ldrh	r2, [r7, #6]
    3d40:	f002 021f 	and.w	r2, r2, #31
    3d44:	2001      	movs	r0, #1
    3d46:	fa00 f202 	lsl.w	r2, r0, r2
    3d4a:	3360      	adds	r3, #96	; 0x60
    3d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3d50:	bf00      	nop
    3d52:	370c      	adds	r7, #12
    3d54:	46bd      	mov	sp, r7
    3d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d5a:	4770      	bx	lr
    3d5c:	e000e100 	.word	0xe000e100

00003d60 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3d60:	b480      	push	{r7}
    3d62:	b083      	sub	sp, #12
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3d6c:	095b      	lsrs	r3, r3, #5
    3d6e:	f003 0301 	and.w	r3, r3, #1
    3d72:	2b00      	cmp	r3, #0
    3d74:	bf14      	ite	ne
    3d76:	2301      	movne	r3, #1
    3d78:	2300      	moveq	r3, #0
    3d7a:	b2db      	uxtb	r3, r3
}
    3d7c:	4618      	mov	r0, r3
    3d7e:	370c      	adds	r7, #12
    3d80:	46bd      	mov	sp, r7
    3d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d86:	4770      	bx	lr

00003d88 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3d88:	b480      	push	{r7}
    3d8a:	b083      	sub	sp, #12
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
    3d90:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3d92:	687b      	ldr	r3, [r7, #4]
    3d94:	683a      	ldr	r2, [r7, #0]
    3d96:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d98:	bf00      	nop
    3d9a:	370c      	adds	r7, #12
    3d9c:	46bd      	mov	sp, r7
    3d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3da2:	4770      	bx	lr

00003da4 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3da4:	b480      	push	{r7}
    3da6:	b083      	sub	sp, #12
    3da8:	af00      	add	r7, sp, #0
    3daa:	6078      	str	r0, [r7, #4]
    3dac:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3dae:	687b      	ldr	r3, [r7, #4]
    3db0:	683a      	ldr	r2, [r7, #0]
    3db2:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3db4:	bf00      	nop
    3db6:	370c      	adds	r7, #12
    3db8:	46bd      	mov	sp, r7
    3dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dbe:	4770      	bx	lr

00003dc0 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3dc0:	b480      	push	{r7}
    3dc2:	b083      	sub	sp, #12
    3dc4:	af00      	add	r7, sp, #0
    3dc6:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3dc8:	687b      	ldr	r3, [r7, #4]
    3dca:	699b      	ldr	r3, [r3, #24]
    3dcc:	f043 0201 	orr.w	r2, r3, #1
    3dd0:	687b      	ldr	r3, [r7, #4]
    3dd2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dd4:	bf00      	nop
    3dd6:	370c      	adds	r7, #12
    3dd8:	46bd      	mov	sp, r7
    3dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dde:	4770      	bx	lr

00003de0 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3de0:	b480      	push	{r7}
    3de2:	b085      	sub	sp, #20
    3de4:	af00      	add	r7, sp, #0
    3de6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	699b      	ldr	r3, [r3, #24]
    3dec:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3dee:	68fb      	ldr	r3, [r7, #12]
    3df0:	f003 0301 	and.w	r3, r3, #1
    3df4:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3df6:	68fb      	ldr	r3, [r7, #12]
    3df8:	2b00      	cmp	r3, #0
    3dfa:	bf14      	ite	ne
    3dfc:	2301      	movne	r3, #1
    3dfe:	2300      	moveq	r3, #0
    3e00:	b2db      	uxtb	r3, r3
}
    3e02:	4618      	mov	r0, r3
    3e04:	3714      	adds	r7, #20
    3e06:	46bd      	mov	sp, r7
    3e08:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e0c:	4770      	bx	lr

00003e0e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3e0e:	b480      	push	{r7}
    3e10:	b083      	sub	sp, #12
    3e12:	af00      	add	r7, sp, #0
    3e14:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3e16:	687b      	ldr	r3, [r7, #4]
    3e18:	699b      	ldr	r3, [r3, #24]
    3e1a:	f023 0201 	bic.w	r2, r3, #1
    3e1e:	687b      	ldr	r3, [r7, #4]
    3e20:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e22:	bf00      	nop
    3e24:	370c      	adds	r7, #12
    3e26:	46bd      	mov	sp, r7
    3e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2c:	4770      	bx	lr

00003e2e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3e2e:	b480      	push	{r7}
    3e30:	b083      	sub	sp, #12
    3e32:	af00      	add	r7, sp, #0
    3e34:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	699b      	ldr	r3, [r3, #24]
    3e3a:	f043 0202 	orr.w	r2, r3, #2
    3e3e:	687b      	ldr	r3, [r7, #4]
    3e40:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e42:	bf00      	nop
    3e44:	370c      	adds	r7, #12
    3e46:	46bd      	mov	sp, r7
    3e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4c:	4770      	bx	lr

00003e4e <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3e4e:	b480      	push	{r7}
    3e50:	b083      	sub	sp, #12
    3e52:	af00      	add	r7, sp, #0
    3e54:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3e56:	687b      	ldr	r3, [r7, #4]
    3e58:	699b      	ldr	r3, [r3, #24]
    3e5a:	f023 0202 	bic.w	r2, r3, #2
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e62:	bf00      	nop
    3e64:	370c      	adds	r7, #12
    3e66:	46bd      	mov	sp, r7
    3e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e6c:	4770      	bx	lr

00003e6e <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3e6e:	b480      	push	{r7}
    3e70:	b083      	sub	sp, #12
    3e72:	af00      	add	r7, sp, #0
    3e74:	6078      	str	r0, [r7, #4]
    3e76:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3e78:	687b      	ldr	r3, [r7, #4]
    3e7a:	699a      	ldr	r2, [r3, #24]
    3e7c:	683b      	ldr	r3, [r7, #0]
    3e7e:	431a      	orrs	r2, r3
    3e80:	687b      	ldr	r3, [r7, #4]
    3e82:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e84:	bf00      	nop
    3e86:	370c      	adds	r7, #12
    3e88:	46bd      	mov	sp, r7
    3e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e8e:	4770      	bx	lr

00003e90 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3e90:	b480      	push	{r7}
    3e92:	b083      	sub	sp, #12
    3e94:	af00      	add	r7, sp, #0
    3e96:	6078      	str	r0, [r7, #4]
    3e98:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3e9a:	687b      	ldr	r3, [r7, #4]
    3e9c:	683a      	ldr	r2, [r7, #0]
    3e9e:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ea0:	bf00      	nop
    3ea2:	370c      	adds	r7, #12
    3ea4:	46bd      	mov	sp, r7
    3ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eaa:	4770      	bx	lr

00003eac <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3eac:	b480      	push	{r7}
    3eae:	b083      	sub	sp, #12
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	6078      	str	r0, [r7, #4]
    3eb4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	683a      	ldr	r2, [r7, #0]
    3eba:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ebc:	bf00      	nop
    3ebe:	370c      	adds	r7, #12
    3ec0:	46bd      	mov	sp, r7
    3ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec6:	4770      	bx	lr

00003ec8 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3ec8:	b480      	push	{r7}
    3eca:	b083      	sub	sp, #12
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3ed0:	687b      	ldr	r3, [r7, #4]
    3ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3ed4:	4618      	mov	r0, r3
    3ed6:	370c      	adds	r7, #12
    3ed8:	46bd      	mov	sp, r7
    3eda:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ede:	4770      	bx	lr

00003ee0 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3ee0:	b480      	push	{r7}
    3ee2:	b083      	sub	sp, #12
    3ee4:	af00      	add	r7, sp, #0
    3ee6:	6078      	str	r0, [r7, #4]
    3ee8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	683a      	ldr	r2, [r7, #0]
    3eee:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ef0:	bf00      	nop
    3ef2:	370c      	adds	r7, #12
    3ef4:	46bd      	mov	sp, r7
    3ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3efa:	4770      	bx	lr

00003efc <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3efc:	b480      	push	{r7}
    3efe:	b083      	sub	sp, #12
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
    3f04:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	683a      	ldr	r2, [r7, #0]
    3f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f0e:	bf00      	nop
    3f10:	370c      	adds	r7, #12
    3f12:	46bd      	mov	sp, r7
    3f14:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f18:	4770      	bx	lr

00003f1a <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3f1a:	b480      	push	{r7}
    3f1c:	b083      	sub	sp, #12
    3f1e:	af00      	add	r7, sp, #0
    3f20:	6078      	str	r0, [r7, #4]
    3f22:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	683a      	ldr	r2, [r7, #0]
    3f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f2c:	bf00      	nop
    3f2e:	370c      	adds	r7, #12
    3f30:	46bd      	mov	sp, r7
    3f32:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f36:	4770      	bx	lr

00003f38 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3f38:	b480      	push	{r7}
    3f3a:	b083      	sub	sp, #12
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
    3f40:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	683a      	ldr	r2, [r7, #0]
    3f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f4a:	bf00      	nop
    3f4c:	370c      	adds	r7, #12
    3f4e:	46bd      	mov	sp, r7
    3f50:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f54:	4770      	bx	lr

00003f56 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3f56:	b480      	push	{r7}
    3f58:	b083      	sub	sp, #12
    3f5a:	af00      	add	r7, sp, #0
    3f5c:	6078      	str	r0, [r7, #4]
    3f5e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	683a      	ldr	r2, [r7, #0]
    3f64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f68:	bf00      	nop
    3f6a:	370c      	adds	r7, #12
    3f6c:	46bd      	mov	sp, r7
    3f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f72:	4770      	bx	lr

00003f74 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3f74:	b480      	push	{r7}
    3f76:	b083      	sub	sp, #12
    3f78:	af00      	add	r7, sp, #0
    3f7a:	6078      	str	r0, [r7, #4]
    3f7c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3f7e:	687b      	ldr	r3, [r7, #4]
    3f80:	683a      	ldr	r2, [r7, #0]
    3f82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f86:	bf00      	nop
    3f88:	370c      	adds	r7, #12
    3f8a:	46bd      	mov	sp, r7
    3f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f90:	4770      	bx	lr

00003f92 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3f92:	b480      	push	{r7}
    3f94:	b083      	sub	sp, #12
    3f96:	af00      	add	r7, sp, #0
    3f98:	6078      	str	r0, [r7, #4]
    3f9a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	683a      	ldr	r2, [r7, #0]
    3fa0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fa4:	bf00      	nop
    3fa6:	370c      	adds	r7, #12
    3fa8:	46bd      	mov	sp, r7
    3faa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fae:	4770      	bx	lr

00003fb0 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3fb0:	b480      	push	{r7}
    3fb2:	b083      	sub	sp, #12
    3fb4:	af00      	add	r7, sp, #0
    3fb6:	6078      	str	r0, [r7, #4]
    3fb8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	683a      	ldr	r2, [r7, #0]
    3fbe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fc2:	bf00      	nop
    3fc4:	370c      	adds	r7, #12
    3fc6:	46bd      	mov	sp, r7
    3fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fcc:	4770      	bx	lr

00003fce <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3fce:	b480      	push	{r7}
    3fd0:	b083      	sub	sp, #12
    3fd2:	af00      	add	r7, sp, #0
    3fd4:	6078      	str	r0, [r7, #4]
    3fd6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	683a      	ldr	r2, [r7, #0]
    3fdc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fe0:	bf00      	nop
    3fe2:	370c      	adds	r7, #12
    3fe4:	46bd      	mov	sp, r7
    3fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fea:	4770      	bx	lr

00003fec <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3fec:	b480      	push	{r7}
    3fee:	b083      	sub	sp, #12
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	6078      	str	r0, [r7, #4]
    3ff4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3ff6:	687b      	ldr	r3, [r7, #4]
    3ff8:	683a      	ldr	r2, [r7, #0]
    3ffa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ffe:	bf00      	nop
    4000:	370c      	adds	r7, #12
    4002:	46bd      	mov	sp, r7
    4004:	f85d 7b04 	ldr.w	r7, [sp], #4
    4008:	4770      	bx	lr
	...

0000400c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    400c:	b580      	push	{r7, lr}
    400e:	b082      	sub	sp, #8
    4010:	af00      	add	r7, sp, #0
    4012:	6078      	str	r0, [r7, #4]
    4014:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    4016:	687b      	ldr	r3, [r7, #4]
    4018:	683a      	ldr	r2, [r7, #0]
    401a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	681b      	ldr	r3, [r3, #0]
    4020:	4618      	mov	r0, r3
    4022:	4b55      	ldr	r3, [pc, #340]	; (4178 <_can_async_init+0x16c>)
    4024:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    4026:	bf00      	nop
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	681b      	ldr	r3, [r3, #0]
    402c:	4618      	mov	r0, r3
    402e:	4b53      	ldr	r3, [pc, #332]	; (417c <_can_async_init+0x170>)
    4030:	4798      	blx	r3
    4032:	4603      	mov	r3, r0
    4034:	f083 0301 	eor.w	r3, r3, #1
    4038:	b2db      	uxtb	r3, r3
    403a:	2b00      	cmp	r3, #0
    403c:	d1f4      	bne.n	4028 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    403e:	687b      	ldr	r3, [r7, #4]
    4040:	681b      	ldr	r3, [r3, #0]
    4042:	4618      	mov	r0, r3
    4044:	4b4e      	ldr	r3, [pc, #312]	; (4180 <_can_async_init+0x174>)
    4046:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    4048:	683b      	ldr	r3, [r7, #0]
    404a:	4a4e      	ldr	r2, [pc, #312]	; (4184 <_can_async_init+0x178>)
    404c:	4293      	cmp	r3, r2
    404e:	d17a      	bne.n	4146 <_can_async_init+0x13a>
		_can1_dev    = dev;
    4050:	4a4d      	ldr	r2, [pc, #308]	; (4188 <_can_async_init+0x17c>)
    4052:	687b      	ldr	r3, [r7, #4]
    4054:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	4a4c      	ldr	r2, [pc, #304]	; (418c <_can_async_init+0x180>)
    405a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    405c:	687b      	ldr	r3, [r7, #4]
    405e:	681b      	ldr	r3, [r3, #0]
    4060:	f44f 7140 	mov.w	r1, #768	; 0x300
    4064:	4618      	mov	r0, r3
    4066:	4b4a      	ldr	r3, [pc, #296]	; (4190 <_can_async_init+0x184>)
    4068:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	681b      	ldr	r3, [r3, #0]
    406e:	2102      	movs	r1, #2
    4070:	4618      	mov	r0, r3
    4072:	4b48      	ldr	r3, [pc, #288]	; (4194 <_can_async_init+0x188>)
    4074:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    4076:	687b      	ldr	r3, [r7, #4]
    4078:	681b      	ldr	r3, [r3, #0]
    407a:	4947      	ldr	r1, [pc, #284]	; (4198 <_can_async_init+0x18c>)
    407c:	4618      	mov	r0, r3
    407e:	4b47      	ldr	r3, [pc, #284]	; (419c <_can_async_init+0x190>)
    4080:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    4082:	687b      	ldr	r3, [r7, #4]
    4084:	681b      	ldr	r3, [r3, #0]
    4086:	4946      	ldr	r1, [pc, #280]	; (41a0 <_can_async_init+0x194>)
    4088:	4618      	mov	r0, r3
    408a:	4b46      	ldr	r3, [pc, #280]	; (41a4 <_can_async_init+0x198>)
    408c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    408e:	687b      	ldr	r3, [r7, #4]
    4090:	681a      	ldr	r2, [r3, #0]
    4092:	4b45      	ldr	r3, [pc, #276]	; (41a8 <_can_async_init+0x19c>)
    4094:	b29b      	uxth	r3, r3
    4096:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    409a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    409e:	4619      	mov	r1, r3
    40a0:	4610      	mov	r0, r2
    40a2:	4b42      	ldr	r3, [pc, #264]	; (41ac <_can_async_init+0x1a0>)
    40a4:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	681b      	ldr	r3, [r3, #0]
    40aa:	2107      	movs	r1, #7
    40ac:	4618      	mov	r0, r3
    40ae:	4b40      	ldr	r3, [pc, #256]	; (41b0 <_can_async_init+0x1a4>)
    40b0:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	681b      	ldr	r3, [r3, #0]
    40b6:	2107      	movs	r1, #7
    40b8:	4618      	mov	r0, r3
    40ba:	4b3e      	ldr	r3, [pc, #248]	; (41b4 <_can_async_init+0x1a8>)
    40bc:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    40be:	687b      	ldr	r3, [r7, #4]
    40c0:	681a      	ldr	r2, [r3, #0]
    40c2:	4b3d      	ldr	r3, [pc, #244]	; (41b8 <_can_async_init+0x1ac>)
    40c4:	b29b      	uxth	r3, r3
    40c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    40ca:	4619      	mov	r1, r3
    40cc:	4610      	mov	r0, r2
    40ce:	4b3b      	ldr	r3, [pc, #236]	; (41bc <_can_async_init+0x1b0>)
    40d0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	681a      	ldr	r2, [r3, #0]
    40d6:	4b3a      	ldr	r3, [pc, #232]	; (41c0 <_can_async_init+0x1b4>)
    40d8:	b29b      	uxth	r3, r3
    40da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    40de:	4619      	mov	r1, r3
    40e0:	4610      	mov	r0, r2
    40e2:	4b38      	ldr	r3, [pc, #224]	; (41c4 <_can_async_init+0x1b8>)
    40e4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    40e6:	687b      	ldr	r3, [r7, #4]
    40e8:	681b      	ldr	r3, [r3, #0]
    40ea:	2108      	movs	r1, #8
    40ec:	4618      	mov	r0, r3
    40ee:	4b36      	ldr	r3, [pc, #216]	; (41c8 <_can_async_init+0x1bc>)
    40f0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	681a      	ldr	r2, [r3, #0]
    40f6:	4b35      	ldr	r3, [pc, #212]	; (41cc <_can_async_init+0x1c0>)
    40f8:	b29b      	uxth	r3, r3
    40fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    40fe:	4619      	mov	r1, r3
    4100:	4610      	mov	r0, r2
    4102:	4b33      	ldr	r3, [pc, #204]	; (41d0 <_can_async_init+0x1c4>)
    4104:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	681a      	ldr	r2, [r3, #0]
    410a:	4b32      	ldr	r3, [pc, #200]	; (41d4 <_can_async_init+0x1c8>)
    410c:	b29b      	uxth	r3, r3
    410e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4112:	4619      	mov	r1, r3
    4114:	4610      	mov	r0, r2
    4116:	4b30      	ldr	r3, [pc, #192]	; (41d8 <_can_async_init+0x1cc>)
    4118:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    411a:	687b      	ldr	r3, [r7, #4]
    411c:	681b      	ldr	r3, [r3, #0]
    411e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    4122:	4618      	mov	r0, r3
    4124:	4b2d      	ldr	r3, [pc, #180]	; (41dc <_can_async_init+0x1d0>)
    4126:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    4128:	204f      	movs	r0, #79	; 0x4f
    412a:	4b2d      	ldr	r3, [pc, #180]	; (41e0 <_can_async_init+0x1d4>)
    412c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    412e:	204f      	movs	r0, #79	; 0x4f
    4130:	4b2c      	ldr	r3, [pc, #176]	; (41e4 <_can_async_init+0x1d8>)
    4132:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4134:	204f      	movs	r0, #79	; 0x4f
    4136:	4b2c      	ldr	r3, [pc, #176]	; (41e8 <_can_async_init+0x1dc>)
    4138:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    413a:	687b      	ldr	r3, [r7, #4]
    413c:	681b      	ldr	r3, [r3, #0]
    413e:	2101      	movs	r1, #1
    4140:	4618      	mov	r0, r3
    4142:	4b2a      	ldr	r3, [pc, #168]	; (41ec <_can_async_init+0x1e0>)
    4144:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	681b      	ldr	r3, [r3, #0]
    414a:	4618      	mov	r0, r3
    414c:	4b28      	ldr	r3, [pc, #160]	; (41f0 <_can_async_init+0x1e4>)
    414e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	681b      	ldr	r3, [r3, #0]
    4154:	4618      	mov	r0, r3
    4156:	4b27      	ldr	r3, [pc, #156]	; (41f4 <_can_async_init+0x1e8>)
    4158:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    415a:	bf00      	nop
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	681b      	ldr	r3, [r3, #0]
    4160:	4618      	mov	r0, r3
    4162:	4b06      	ldr	r3, [pc, #24]	; (417c <_can_async_init+0x170>)
    4164:	4798      	blx	r3
    4166:	4603      	mov	r3, r0
    4168:	2b00      	cmp	r3, #0
    416a:	d1f7      	bne.n	415c <_can_async_init+0x150>
	};

	return ERR_NONE;
    416c:	2300      	movs	r3, #0
}
    416e:	4618      	mov	r0, r3
    4170:	3708      	adds	r7, #8
    4172:	46bd      	mov	sp, r7
    4174:	bd80      	pop	{r7, pc}
    4176:	bf00      	nop
    4178:	00003dc1 	.word	0x00003dc1
    417c:	00003de1 	.word	0x00003de1
    4180:	00003e2f 	.word	0x00003e2f
    4184:	42000400 	.word	0x42000400
    4188:	200007fc 	.word	0x200007fc
    418c:	20000004 	.word	0x20000004
    4190:	00003e6f 	.word	0x00003e6f
    4194:	00003d89 	.word	0x00003d89
    4198:	00010c01 	.word	0x00010c01
    419c:	00003e91 	.word	0x00003e91
    41a0:	00010c10 	.word	0x00010c10
    41a4:	00003da5 	.word	0x00003da5
    41a8:	20001300 	.word	0x20001300
    41ac:	00003f75 	.word	0x00003f75
    41b0:	00003f93 	.word	0x00003f93
    41b4:	00003fcf 	.word	0x00003fcf
    41b8:	200012b8 	.word	0x200012b8
    41bc:	00003fb1 	.word	0x00003fb1
    41c0:	2000075c 	.word	0x2000075c
    41c4:	00003fed 	.word	0x00003fed
    41c8:	00003efd 	.word	0x00003efd
    41cc:	2000076c 	.word	0x2000076c
    41d0:	00003f1b 	.word	0x00003f1b
    41d4:	200007ec 	.word	0x200007ec
    41d8:	00003f39 	.word	0x00003f39
    41dc:	00003f57 	.word	0x00003f57
    41e0:	00003ce1 	.word	0x00003ce1
    41e4:	00003d25 	.word	0x00003d25
    41e8:	00003ca5 	.word	0x00003ca5
    41ec:	00003ee1 	.word	0x00003ee1
    41f0:	00003e4f 	.word	0x00003e4f
    41f4:	00003e0f 	.word	0x00003e0f

000041f8 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    41f8:	b590      	push	{r4, r7, lr}
    41fa:	b083      	sub	sp, #12
    41fc:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    41fe:	4b2c      	ldr	r3, [pc, #176]	; (42b0 <CAN1_Handler+0xb8>)
    4200:	681b      	ldr	r3, [r3, #0]
    4202:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	681b      	ldr	r3, [r3, #0]
    4208:	4618      	mov	r0, r3
    420a:	4b2a      	ldr	r3, [pc, #168]	; (42b4 <CAN1_Handler+0xbc>)
    420c:	4798      	blx	r3
    420e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4210:	683b      	ldr	r3, [r7, #0]
    4212:	f003 0301 	and.w	r3, r3, #1
    4216:	2b00      	cmp	r3, #0
    4218:	d003      	beq.n	4222 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    421a:	687b      	ldr	r3, [r7, #4]
    421c:	689b      	ldr	r3, [r3, #8]
    421e:	6878      	ldr	r0, [r7, #4]
    4220:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    4222:	683b      	ldr	r3, [r7, #0]
    4224:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4228:	2b00      	cmp	r3, #0
    422a:	d003      	beq.n	4234 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    422c:	687b      	ldr	r3, [r7, #4]
    422e:	685b      	ldr	r3, [r3, #4]
    4230:	6878      	ldr	r0, [r7, #4]
    4232:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4234:	683b      	ldr	r3, [r7, #0]
    4236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    423a:	2b00      	cmp	r3, #0
    423c:	d004      	beq.n	4248 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    423e:	687b      	ldr	r3, [r7, #4]
    4240:	68db      	ldr	r3, [r3, #12]
    4242:	2103      	movs	r1, #3
    4244:	6878      	ldr	r0, [r7, #4]
    4246:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4248:	683b      	ldr	r3, [r7, #0]
    424a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    424e:	2b00      	cmp	r3, #0
    4250:	d004      	beq.n	425c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	68db      	ldr	r3, [r3, #12]
    4256:	2100      	movs	r1, #0
    4258:	6878      	ldr	r0, [r7, #4]
    425a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    425c:	683b      	ldr	r3, [r7, #0]
    425e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    4262:	2b00      	cmp	r3, #0
    4264:	d00f      	beq.n	4286 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	68dc      	ldr	r4, [r3, #12]
    426a:	687b      	ldr	r3, [r7, #4]
    426c:	681b      	ldr	r3, [r3, #0]
    426e:	4618      	mov	r0, r3
    4270:	4b11      	ldr	r3, [pc, #68]	; (42b8 <CAN1_Handler+0xc0>)
    4272:	4798      	blx	r3
    4274:	4603      	mov	r3, r0
    4276:	2b00      	cmp	r3, #0
    4278:	d001      	beq.n	427e <CAN1_Handler+0x86>
    427a:	2302      	movs	r3, #2
    427c:	e000      	b.n	4280 <CAN1_Handler+0x88>
    427e:	2301      	movs	r3, #1
    4280:	4619      	mov	r1, r3
    4282:	6878      	ldr	r0, [r7, #4]
    4284:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    4286:	683b      	ldr	r3, [r7, #0]
    4288:	f003 0308 	and.w	r3, r3, #8
    428c:	2b00      	cmp	r3, #0
    428e:	d004      	beq.n	429a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4290:	687b      	ldr	r3, [r7, #4]
    4292:	68db      	ldr	r3, [r3, #12]
    4294:	2104      	movs	r1, #4
    4296:	6878      	ldr	r0, [r7, #4]
    4298:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	681b      	ldr	r3, [r3, #0]
    429e:	6839      	ldr	r1, [r7, #0]
    42a0:	4618      	mov	r0, r3
    42a2:	4b06      	ldr	r3, [pc, #24]	; (42bc <CAN1_Handler+0xc4>)
    42a4:	4798      	blx	r3
}
    42a6:	bf00      	nop
    42a8:	370c      	adds	r7, #12
    42aa:	46bd      	mov	sp, r7
    42ac:	bd90      	pop	{r4, r7, pc}
    42ae:	bf00      	nop
    42b0:	200007fc 	.word	0x200007fc
    42b4:	00003ec9 	.word	0x00003ec9
    42b8:	00003d61 	.word	0x00003d61
    42bc:	00003ead 	.word	0x00003ead

000042c0 <__NVIC_SetPendingIRQ>:
{
    42c0:	b480      	push	{r7}
    42c2:	b083      	sub	sp, #12
    42c4:	af00      	add	r7, sp, #0
    42c6:	4603      	mov	r3, r0
    42c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    42ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    42ce:	2b00      	cmp	r3, #0
    42d0:	db0c      	blt.n	42ec <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42d2:	4909      	ldr	r1, [pc, #36]	; (42f8 <__NVIC_SetPendingIRQ+0x38>)
    42d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    42d8:	095b      	lsrs	r3, r3, #5
    42da:	88fa      	ldrh	r2, [r7, #6]
    42dc:	f002 021f 	and.w	r2, r2, #31
    42e0:	2001      	movs	r0, #1
    42e2:	fa00 f202 	lsl.w	r2, r0, r2
    42e6:	3340      	adds	r3, #64	; 0x40
    42e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    42ec:	bf00      	nop
    42ee:	370c      	adds	r7, #12
    42f0:	46bd      	mov	sp, r7
    42f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f6:	4770      	bx	lr
    42f8:	e000e100 	.word	0xe000e100

000042fc <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    42fc:	b580      	push	{r7, lr}
    42fe:	b082      	sub	sp, #8
    4300:	af00      	add	r7, sp, #0
    4302:	4603      	mov	r3, r0
    4304:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    4306:	79fb      	ldrb	r3, [r7, #7]
    4308:	b21b      	sxth	r3, r3
    430a:	4618      	mov	r0, r3
    430c:	4b02      	ldr	r3, [pc, #8]	; (4318 <_irq_set+0x1c>)
    430e:	4798      	blx	r3
}
    4310:	bf00      	nop
    4312:	3708      	adds	r7, #8
    4314:	46bd      	mov	sp, r7
    4316:	bd80      	pop	{r7, pc}
    4318:	000042c1 	.word	0x000042c1

0000431c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    431c:	b480      	push	{r7}
    431e:	b083      	sub	sp, #12
    4320:	af00      	add	r7, sp, #0
    4322:	4603      	mov	r3, r0
    4324:	6039      	str	r1, [r7, #0]
    4326:	80fb      	strh	r3, [r7, #6]
    4328:	4613      	mov	r3, r2
    432a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    432c:	797b      	ldrb	r3, [r7, #5]
    432e:	3b04      	subs	r3, #4
    4330:	2b05      	cmp	r3, #5
    4332:	d86b      	bhi.n	440c <_get_cycles_for_us_internal+0xf0>
    4334:	a201      	add	r2, pc, #4	; (adr r2, 433c <_get_cycles_for_us_internal+0x20>)
    4336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    433a:	bf00      	nop
    433c:	000043eb 	.word	0x000043eb
    4340:	000043cb 	.word	0x000043cb
    4344:	000043ad 	.word	0x000043ad
    4348:	0000438f 	.word	0x0000438f
    434c:	00004371 	.word	0x00004371
    4350:	00004355 	.word	0x00004355
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4354:	88fb      	ldrh	r3, [r7, #6]
    4356:	683a      	ldr	r2, [r7, #0]
    4358:	4935      	ldr	r1, [pc, #212]	; (4430 <_get_cycles_for_us_internal+0x114>)
    435a:	fba1 1202 	umull	r1, r2, r1, r2
    435e:	0c92      	lsrs	r2, r2, #18
    4360:	fb02 f303 	mul.w	r3, r2, r3
    4364:	3302      	adds	r3, #2
    4366:	4a33      	ldr	r2, [pc, #204]	; (4434 <_get_cycles_for_us_internal+0x118>)
    4368:	fba2 2303 	umull	r2, r3, r2, r3
    436c:	085b      	lsrs	r3, r3, #1
    436e:	e059      	b.n	4424 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4370:	88fb      	ldrh	r3, [r7, #6]
    4372:	683a      	ldr	r2, [r7, #0]
    4374:	0952      	lsrs	r2, r2, #5
    4376:	4930      	ldr	r1, [pc, #192]	; (4438 <_get_cycles_for_us_internal+0x11c>)
    4378:	fba1 1202 	umull	r1, r2, r1, r2
    437c:	09d2      	lsrs	r2, r2, #7
    437e:	fb02 f303 	mul.w	r3, r2, r3
    4382:	331d      	adds	r3, #29
    4384:	4a2d      	ldr	r2, [pc, #180]	; (443c <_get_cycles_for_us_internal+0x120>)
    4386:	fba2 2303 	umull	r2, r3, r2, r3
    438a:	091b      	lsrs	r3, r3, #4
    438c:	e04a      	b.n	4424 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    438e:	88fb      	ldrh	r3, [r7, #6]
    4390:	683a      	ldr	r2, [r7, #0]
    4392:	492b      	ldr	r1, [pc, #172]	; (4440 <_get_cycles_for_us_internal+0x124>)
    4394:	fba1 1202 	umull	r1, r2, r1, r2
    4398:	0b52      	lsrs	r2, r2, #13
    439a:	fb02 f303 	mul.w	r3, r2, r3
    439e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    43a2:	4a28      	ldr	r2, [pc, #160]	; (4444 <_get_cycles_for_us_internal+0x128>)
    43a4:	fba2 2303 	umull	r2, r3, r2, r3
    43a8:	095b      	lsrs	r3, r3, #5
    43aa:	e03b      	b.n	4424 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    43ac:	88fb      	ldrh	r3, [r7, #6]
    43ae:	683a      	ldr	r2, [r7, #0]
    43b0:	4925      	ldr	r1, [pc, #148]	; (4448 <_get_cycles_for_us_internal+0x12c>)
    43b2:	fba1 1202 	umull	r1, r2, r1, r2
    43b6:	0992      	lsrs	r2, r2, #6
    43b8:	fb02 f303 	mul.w	r3, r2, r3
    43bc:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    43c0:	4a22      	ldr	r2, [pc, #136]	; (444c <_get_cycles_for_us_internal+0x130>)
    43c2:	fba2 2303 	umull	r2, r3, r2, r3
    43c6:	099b      	lsrs	r3, r3, #6
    43c8:	e02c      	b.n	4424 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    43ca:	88fb      	ldrh	r3, [r7, #6]
    43cc:	683a      	ldr	r2, [r7, #0]
    43ce:	4920      	ldr	r1, [pc, #128]	; (4450 <_get_cycles_for_us_internal+0x134>)
    43d0:	fba1 1202 	umull	r1, r2, r1, r2
    43d4:	0952      	lsrs	r2, r2, #5
    43d6:	fb02 f303 	mul.w	r3, r2, r3
    43da:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    43de:	332f      	adds	r3, #47	; 0x2f
    43e0:	4a1c      	ldr	r2, [pc, #112]	; (4454 <_get_cycles_for_us_internal+0x138>)
    43e2:	fba2 2303 	umull	r2, r3, r2, r3
    43e6:	0b5b      	lsrs	r3, r3, #13
    43e8:	e01c      	b.n	4424 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    43ea:	88fb      	ldrh	r3, [r7, #6]
    43ec:	683a      	ldr	r2, [r7, #0]
    43ee:	491a      	ldr	r1, [pc, #104]	; (4458 <_get_cycles_for_us_internal+0x13c>)
    43f0:	fba1 1202 	umull	r1, r2, r1, r2
    43f4:	08d2      	lsrs	r2, r2, #3
    43f6:	fb02 f303 	mul.w	r3, r2, r3
    43fa:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    43fe:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4402:	4a16      	ldr	r2, [pc, #88]	; (445c <_get_cycles_for_us_internal+0x140>)
    4404:	fba2 2303 	umull	r2, r3, r2, r3
    4408:	0c5b      	lsrs	r3, r3, #17
    440a:	e00b      	b.n	4424 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    440c:	88fb      	ldrh	r3, [r7, #6]
    440e:	683a      	ldr	r2, [r7, #0]
    4410:	fb02 f303 	mul.w	r3, r2, r3
    4414:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4418:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    441c:	4a10      	ldr	r2, [pc, #64]	; (4460 <_get_cycles_for_us_internal+0x144>)
    441e:	fba2 2303 	umull	r2, r3, r2, r3
    4422:	0c9b      	lsrs	r3, r3, #18
	}
}
    4424:	4618      	mov	r0, r3
    4426:	370c      	adds	r7, #12
    4428:	46bd      	mov	sp, r7
    442a:	f85d 7b04 	ldr.w	r7, [sp], #4
    442e:	4770      	bx	lr
    4430:	431bde83 	.word	0x431bde83
    4434:	aaaaaaab 	.word	0xaaaaaaab
    4438:	0a7c5ac5 	.word	0x0a7c5ac5
    443c:	88888889 	.word	0x88888889
    4440:	d1b71759 	.word	0xd1b71759
    4444:	1b4e81b5 	.word	0x1b4e81b5
    4448:	10624dd3 	.word	0x10624dd3
    444c:	057619f1 	.word	0x057619f1
    4450:	51eb851f 	.word	0x51eb851f
    4454:	45e7b273 	.word	0x45e7b273
    4458:	cccccccd 	.word	0xcccccccd
    445c:	6fd91d85 	.word	0x6fd91d85
    4460:	165e9f81 	.word	0x165e9f81

00004464 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4464:	b580      	push	{r7, lr}
    4466:	b082      	sub	sp, #8
    4468:	af00      	add	r7, sp, #0
    446a:	4603      	mov	r3, r0
    446c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    446e:	88fb      	ldrh	r3, [r7, #6]
    4470:	2209      	movs	r2, #9
    4472:	4904      	ldr	r1, [pc, #16]	; (4484 <_get_cycles_for_us+0x20>)
    4474:	4618      	mov	r0, r3
    4476:	4b04      	ldr	r3, [pc, #16]	; (4488 <_get_cycles_for_us+0x24>)
    4478:	4798      	blx	r3
    447a:	4603      	mov	r3, r0
}
    447c:	4618      	mov	r0, r3
    447e:	3708      	adds	r7, #8
    4480:	46bd      	mov	sp, r7
    4482:	bd80      	pop	{r7, pc}
    4484:	07270e00 	.word	0x07270e00
    4488:	0000431d 	.word	0x0000431d

0000448c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    448c:	b480      	push	{r7}
    448e:	b083      	sub	sp, #12
    4490:	af00      	add	r7, sp, #0
    4492:	4603      	mov	r3, r0
    4494:	6039      	str	r1, [r7, #0]
    4496:	80fb      	strh	r3, [r7, #6]
    4498:	4613      	mov	r3, r2
    449a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    449c:	797b      	ldrb	r3, [r7, #5]
    449e:	3b04      	subs	r3, #4
    44a0:	2b05      	cmp	r3, #5
    44a2:	d870      	bhi.n	4586 <_get_cycles_for_ms_internal+0xfa>
    44a4:	a201      	add	r2, pc, #4	; (adr r2, 44ac <_get_cycles_for_ms_internal+0x20>)
    44a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    44aa:	bf00      	nop
    44ac:	00004569 	.word	0x00004569
    44b0:	0000454d 	.word	0x0000454d
    44b4:	00004531 	.word	0x00004531
    44b8:	0000450d 	.word	0x0000450d
    44bc:	000044e9 	.word	0x000044e9
    44c0:	000044c5 	.word	0x000044c5
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    44c4:	88fb      	ldrh	r3, [r7, #6]
    44c6:	683a      	ldr	r2, [r7, #0]
    44c8:	4937      	ldr	r1, [pc, #220]	; (45a8 <_get_cycles_for_ms_internal+0x11c>)
    44ca:	fba1 1202 	umull	r1, r2, r1, r2
    44ce:	0c92      	lsrs	r2, r2, #18
    44d0:	fb02 f303 	mul.w	r3, r2, r3
    44d4:	3302      	adds	r3, #2
    44d6:	4a35      	ldr	r2, [pc, #212]	; (45ac <_get_cycles_for_ms_internal+0x120>)
    44d8:	fba2 2303 	umull	r2, r3, r2, r3
    44dc:	085b      	lsrs	r3, r3, #1
    44de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    44e2:	fb02 f303 	mul.w	r3, r2, r3
    44e6:	e058      	b.n	459a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    44e8:	88fb      	ldrh	r3, [r7, #6]
    44ea:	683a      	ldr	r2, [r7, #0]
    44ec:	0952      	lsrs	r2, r2, #5
    44ee:	4930      	ldr	r1, [pc, #192]	; (45b0 <_get_cycles_for_ms_internal+0x124>)
    44f0:	fba1 1202 	umull	r1, r2, r1, r2
    44f4:	09d2      	lsrs	r2, r2, #7
    44f6:	fb02 f303 	mul.w	r3, r2, r3
    44fa:	3302      	adds	r3, #2
    44fc:	4a2b      	ldr	r2, [pc, #172]	; (45ac <_get_cycles_for_ms_internal+0x120>)
    44fe:	fba2 2303 	umull	r2, r3, r2, r3
    4502:	085b      	lsrs	r3, r3, #1
    4504:	2264      	movs	r2, #100	; 0x64
    4506:	fb02 f303 	mul.w	r3, r2, r3
    450a:	e046      	b.n	459a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    450c:	88fb      	ldrh	r3, [r7, #6]
    450e:	683a      	ldr	r2, [r7, #0]
    4510:	4928      	ldr	r1, [pc, #160]	; (45b4 <_get_cycles_for_ms_internal+0x128>)
    4512:	fba1 1202 	umull	r1, r2, r1, r2
    4516:	0b52      	lsrs	r2, r2, #13
    4518:	fb02 f303 	mul.w	r3, r2, r3
    451c:	3302      	adds	r3, #2
    451e:	4a23      	ldr	r2, [pc, #140]	; (45ac <_get_cycles_for_ms_internal+0x120>)
    4520:	fba2 2303 	umull	r2, r3, r2, r3
    4524:	085a      	lsrs	r2, r3, #1
    4526:	4613      	mov	r3, r2
    4528:	009b      	lsls	r3, r3, #2
    452a:	4413      	add	r3, r2
    452c:	005b      	lsls	r3, r3, #1
    452e:	e034      	b.n	459a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4530:	88fb      	ldrh	r3, [r7, #6]
    4532:	683a      	ldr	r2, [r7, #0]
    4534:	4920      	ldr	r1, [pc, #128]	; (45b8 <_get_cycles_for_ms_internal+0x12c>)
    4536:	fba1 1202 	umull	r1, r2, r1, r2
    453a:	0992      	lsrs	r2, r2, #6
    453c:	fb02 f303 	mul.w	r3, r2, r3
    4540:	3302      	adds	r3, #2
    4542:	4a1a      	ldr	r2, [pc, #104]	; (45ac <_get_cycles_for_ms_internal+0x120>)
    4544:	fba2 2303 	umull	r2, r3, r2, r3
    4548:	085b      	lsrs	r3, r3, #1
    454a:	e026      	b.n	459a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    454c:	88fb      	ldrh	r3, [r7, #6]
    454e:	683a      	ldr	r2, [r7, #0]
    4550:	491a      	ldr	r1, [pc, #104]	; (45bc <_get_cycles_for_ms_internal+0x130>)
    4552:	fba1 1202 	umull	r1, r2, r1, r2
    4556:	0952      	lsrs	r2, r2, #5
    4558:	fb02 f303 	mul.w	r3, r2, r3
    455c:	331d      	adds	r3, #29
    455e:	4a18      	ldr	r2, [pc, #96]	; (45c0 <_get_cycles_for_ms_internal+0x134>)
    4560:	fba2 2303 	umull	r2, r3, r2, r3
    4564:	091b      	lsrs	r3, r3, #4
    4566:	e018      	b.n	459a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4568:	88fb      	ldrh	r3, [r7, #6]
    456a:	683a      	ldr	r2, [r7, #0]
    456c:	4915      	ldr	r1, [pc, #84]	; (45c4 <_get_cycles_for_ms_internal+0x138>)
    456e:	fba1 1202 	umull	r1, r2, r1, r2
    4572:	08d2      	lsrs	r2, r2, #3
    4574:	fb02 f303 	mul.w	r3, r2, r3
    4578:	f203 132b 	addw	r3, r3, #299	; 0x12b
    457c:	4a12      	ldr	r2, [pc, #72]	; (45c8 <_get_cycles_for_ms_internal+0x13c>)
    457e:	fba2 2303 	umull	r2, r3, r2, r3
    4582:	095b      	lsrs	r3, r3, #5
    4584:	e009      	b.n	459a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4586:	88fb      	ldrh	r3, [r7, #6]
    4588:	683a      	ldr	r2, [r7, #0]
    458a:	fb02 f303 	mul.w	r3, r2, r3
    458e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4592:	4a0e      	ldr	r2, [pc, #56]	; (45cc <_get_cycles_for_ms_internal+0x140>)
    4594:	fba2 2303 	umull	r2, r3, r2, r3
    4598:	099b      	lsrs	r3, r3, #6
	}
}
    459a:	4618      	mov	r0, r3
    459c:	370c      	adds	r7, #12
    459e:	46bd      	mov	sp, r7
    45a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45a4:	4770      	bx	lr
    45a6:	bf00      	nop
    45a8:	431bde83 	.word	0x431bde83
    45ac:	aaaaaaab 	.word	0xaaaaaaab
    45b0:	0a7c5ac5 	.word	0x0a7c5ac5
    45b4:	d1b71759 	.word	0xd1b71759
    45b8:	10624dd3 	.word	0x10624dd3
    45bc:	51eb851f 	.word	0x51eb851f
    45c0:	88888889 	.word	0x88888889
    45c4:	cccccccd 	.word	0xcccccccd
    45c8:	1b4e81b5 	.word	0x1b4e81b5
    45cc:	057619f1 	.word	0x057619f1

000045d0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    45d0:	b580      	push	{r7, lr}
    45d2:	b082      	sub	sp, #8
    45d4:	af00      	add	r7, sp, #0
    45d6:	4603      	mov	r3, r0
    45d8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    45da:	88fb      	ldrh	r3, [r7, #6]
    45dc:	2209      	movs	r2, #9
    45de:	4904      	ldr	r1, [pc, #16]	; (45f0 <_get_cycles_for_ms+0x20>)
    45e0:	4618      	mov	r0, r3
    45e2:	4b04      	ldr	r3, [pc, #16]	; (45f4 <_get_cycles_for_ms+0x24>)
    45e4:	4798      	blx	r3
    45e6:	4603      	mov	r3, r0
}
    45e8:	4618      	mov	r0, r3
    45ea:	3708      	adds	r7, #8
    45ec:	46bd      	mov	sp, r7
    45ee:	bd80      	pop	{r7, pc}
    45f0:	07270e00 	.word	0x07270e00
    45f4:	0000448d 	.word	0x0000448d

000045f8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    45f8:	b480      	push	{r7}
    45fa:	b083      	sub	sp, #12
    45fc:	af00      	add	r7, sp, #0
    45fe:	6078      	str	r0, [r7, #4]
    4600:	6039      	str	r1, [r7, #0]
    4602:	bf00      	nop
    4604:	f3af 8000 	nop.w

00004608 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4608:	3901      	subs	r1, #1
    460a:	d8fd      	bhi.n	4608 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    460c:	bf00      	nop
    460e:	370c      	adds	r7, #12
    4610:	46bd      	mov	sp, r7
    4612:	f85d 7b04 	ldr.w	r7, [sp], #4
    4616:	4770      	bx	lr

00004618 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4618:	b480      	push	{r7}
    461a:	b083      	sub	sp, #12
    461c:	af00      	add	r7, sp, #0
    461e:	6078      	str	r0, [r7, #4]
    4620:	460b      	mov	r3, r1
    4622:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4624:	687b      	ldr	r3, [r7, #4]
    4626:	881b      	ldrh	r3, [r3, #0]
    4628:	b29a      	uxth	r2, r3
    462a:	887b      	ldrh	r3, [r7, #2]
    462c:	021b      	lsls	r3, r3, #8
    462e:	b29b      	uxth	r3, r3
    4630:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4634:	b29b      	uxth	r3, r3
    4636:	4313      	orrs	r3, r2
    4638:	b29a      	uxth	r2, r3
    463a:	687b      	ldr	r3, [r7, #4]
    463c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    463e:	bf00      	nop
    4640:	370c      	adds	r7, #12
    4642:	46bd      	mov	sp, r7
    4644:	f85d 7b04 	ldr.w	r7, [sp], #4
    4648:	4770      	bx	lr

0000464a <hri_port_set_EVCTRL_reg>:
{
    464a:	b480      	push	{r7}
    464c:	b085      	sub	sp, #20
    464e:	af00      	add	r7, sp, #0
    4650:	60f8      	str	r0, [r7, #12]
    4652:	460b      	mov	r3, r1
    4654:	607a      	str	r2, [r7, #4]
    4656:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4658:	7afb      	ldrb	r3, [r7, #11]
    465a:	7afa      	ldrb	r2, [r7, #11]
    465c:	68f9      	ldr	r1, [r7, #12]
    465e:	01d2      	lsls	r2, r2, #7
    4660:	440a      	add	r2, r1
    4662:	322c      	adds	r2, #44	; 0x2c
    4664:	6811      	ldr	r1, [r2, #0]
    4666:	687a      	ldr	r2, [r7, #4]
    4668:	430a      	orrs	r2, r1
    466a:	68f9      	ldr	r1, [r7, #12]
    466c:	01db      	lsls	r3, r3, #7
    466e:	440b      	add	r3, r1
    4670:	332c      	adds	r3, #44	; 0x2c
    4672:	601a      	str	r2, [r3, #0]
}
    4674:	bf00      	nop
    4676:	3714      	adds	r7, #20
    4678:	46bd      	mov	sp, r7
    467a:	f85d 7b04 	ldr.w	r7, [sp], #4
    467e:	4770      	bx	lr

00004680 <_port_event_init>:

static inline void _port_event_init()
{
    4680:	b580      	push	{r7, lr}
    4682:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4684:	2200      	movs	r2, #0
    4686:	2100      	movs	r1, #0
    4688:	480a      	ldr	r0, [pc, #40]	; (46b4 <_port_event_init+0x34>)
    468a:	4b0b      	ldr	r3, [pc, #44]	; (46b8 <_port_event_init+0x38>)
    468c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    468e:	2200      	movs	r2, #0
    4690:	2101      	movs	r1, #1
    4692:	4808      	ldr	r0, [pc, #32]	; (46b4 <_port_event_init+0x34>)
    4694:	4b08      	ldr	r3, [pc, #32]	; (46b8 <_port_event_init+0x38>)
    4696:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4698:	f64e 72ef 	movw	r2, #61423	; 0xefef
    469c:	2102      	movs	r1, #2
    469e:	4805      	ldr	r0, [pc, #20]	; (46b4 <_port_event_init+0x34>)
    46a0:	4b05      	ldr	r3, [pc, #20]	; (46b8 <_port_event_init+0x38>)
    46a2:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    46a4:	2200      	movs	r2, #0
    46a6:	2103      	movs	r1, #3
    46a8:	4802      	ldr	r0, [pc, #8]	; (46b4 <_port_event_init+0x34>)
    46aa:	4b03      	ldr	r3, [pc, #12]	; (46b8 <_port_event_init+0x38>)
    46ac:	4798      	blx	r3
}
    46ae:	bf00      	nop
    46b0:	bd80      	pop	{r7, pc}
    46b2:	bf00      	nop
    46b4:	41008000 	.word	0x41008000
    46b8:	0000464b 	.word	0x0000464b

000046bc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    46bc:	b580      	push	{r7, lr}
    46be:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    46c0:	2104      	movs	r1, #4
    46c2:	480b      	ldr	r0, [pc, #44]	; (46f0 <_init_chip+0x34>)
    46c4:	4b0b      	ldr	r3, [pc, #44]	; (46f4 <_init_chip+0x38>)
    46c6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    46c8:	4b0b      	ldr	r3, [pc, #44]	; (46f8 <_init_chip+0x3c>)
    46ca:	4798      	blx	r3
	_oscctrl_init_sources();
    46cc:	4b0b      	ldr	r3, [pc, #44]	; (46fc <_init_chip+0x40>)
    46ce:	4798      	blx	r3
	_mclk_init();
    46d0:	4b0b      	ldr	r3, [pc, #44]	; (4700 <_init_chip+0x44>)
    46d2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    46d4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    46d8:	4b0a      	ldr	r3, [pc, #40]	; (4704 <_init_chip+0x48>)
    46da:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    46dc:	4b0a      	ldr	r3, [pc, #40]	; (4708 <_init_chip+0x4c>)
    46de:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    46e0:	f640 30df 	movw	r0, #3039	; 0xbdf
    46e4:	4b07      	ldr	r3, [pc, #28]	; (4704 <_init_chip+0x48>)
    46e6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    46e8:	4b08      	ldr	r3, [pc, #32]	; (470c <_init_chip+0x50>)
    46ea:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    46ec:	bf00      	nop
    46ee:	bd80      	pop	{r7, pc}
    46f0:	41004000 	.word	0x41004000
    46f4:	00004619 	.word	0x00004619
    46f8:	000051ad 	.word	0x000051ad
    46fc:	00005675 	.word	0x00005675
    4700:	000050cd 	.word	0x000050cd
    4704:	00004f8d 	.word	0x00004f8d
    4708:	000056b5 	.word	0x000056b5
    470c:	00004681 	.word	0x00004681

00004710 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4710:	b480      	push	{r7}
    4712:	b083      	sub	sp, #12
    4714:	af00      	add	r7, sp, #0
    4716:	6078      	str	r0, [r7, #4]
    4718:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    471a:	687b      	ldr	r3, [r7, #4]
    471c:	683a      	ldr	r2, [r7, #0]
    471e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4720:	2300      	movs	r3, #0
}
    4722:	4618      	mov	r0, r3
    4724:	370c      	adds	r7, #12
    4726:	46bd      	mov	sp, r7
    4728:	f85d 7b04 	ldr.w	r7, [sp], #4
    472c:	4770      	bx	lr
	...

00004730 <__NVIC_EnableIRQ>:
{
    4730:	b480      	push	{r7}
    4732:	b083      	sub	sp, #12
    4734:	af00      	add	r7, sp, #0
    4736:	4603      	mov	r3, r0
    4738:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    473a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    473e:	2b00      	cmp	r3, #0
    4740:	db0b      	blt.n	475a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4742:	4909      	ldr	r1, [pc, #36]	; (4768 <__NVIC_EnableIRQ+0x38>)
    4744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4748:	095b      	lsrs	r3, r3, #5
    474a:	88fa      	ldrh	r2, [r7, #6]
    474c:	f002 021f 	and.w	r2, r2, #31
    4750:	2001      	movs	r0, #1
    4752:	fa00 f202 	lsl.w	r2, r0, r2
    4756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    475a:	bf00      	nop
    475c:	370c      	adds	r7, #12
    475e:	46bd      	mov	sp, r7
    4760:	f85d 7b04 	ldr.w	r7, [sp], #4
    4764:	4770      	bx	lr
    4766:	bf00      	nop
    4768:	e000e100 	.word	0xe000e100

0000476c <__NVIC_DisableIRQ>:
{
    476c:	b480      	push	{r7}
    476e:	b083      	sub	sp, #12
    4770:	af00      	add	r7, sp, #0
    4772:	4603      	mov	r3, r0
    4774:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    477a:	2b00      	cmp	r3, #0
    477c:	db10      	blt.n	47a0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    477e:	490b      	ldr	r1, [pc, #44]	; (47ac <__NVIC_DisableIRQ+0x40>)
    4780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4784:	095b      	lsrs	r3, r3, #5
    4786:	88fa      	ldrh	r2, [r7, #6]
    4788:	f002 021f 	and.w	r2, r2, #31
    478c:	2001      	movs	r0, #1
    478e:	fa00 f202 	lsl.w	r2, r0, r2
    4792:	3320      	adds	r3, #32
    4794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4798:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    479c:	f3bf 8f6f 	isb	sy
}
    47a0:	bf00      	nop
    47a2:	370c      	adds	r7, #12
    47a4:	46bd      	mov	sp, r7
    47a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    47aa:	4770      	bx	lr
    47ac:	e000e100 	.word	0xe000e100

000047b0 <__NVIC_ClearPendingIRQ>:
{
    47b0:	b480      	push	{r7}
    47b2:	b083      	sub	sp, #12
    47b4:	af00      	add	r7, sp, #0
    47b6:	4603      	mov	r3, r0
    47b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    47ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    47be:	2b00      	cmp	r3, #0
    47c0:	db0c      	blt.n	47dc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    47c2:	4909      	ldr	r1, [pc, #36]	; (47e8 <__NVIC_ClearPendingIRQ+0x38>)
    47c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    47c8:	095b      	lsrs	r3, r3, #5
    47ca:	88fa      	ldrh	r2, [r7, #6]
    47cc:	f002 021f 	and.w	r2, r2, #31
    47d0:	2001      	movs	r0, #1
    47d2:	fa00 f202 	lsl.w	r2, r0, r2
    47d6:	3360      	adds	r3, #96	; 0x60
    47d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47dc:	bf00      	nop
    47de:	370c      	adds	r7, #12
    47e0:	46bd      	mov	sp, r7
    47e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    47e6:	4770      	bx	lr
    47e8:	e000e100 	.word	0xe000e100

000047ec <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    47ec:	b480      	push	{r7}
    47ee:	b083      	sub	sp, #12
    47f0:	af00      	add	r7, sp, #0
    47f2:	6078      	str	r0, [r7, #4]
    47f4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    47f6:	bf00      	nop
    47f8:	687b      	ldr	r3, [r7, #4]
    47fa:	685a      	ldr	r2, [r3, #4]
    47fc:	683b      	ldr	r3, [r7, #0]
    47fe:	4013      	ands	r3, r2
    4800:	2b00      	cmp	r3, #0
    4802:	d1f9      	bne.n	47f8 <hri_eic_wait_for_sync+0xc>
	};
}
    4804:	bf00      	nop
    4806:	370c      	adds	r7, #12
    4808:	46bd      	mov	sp, r7
    480a:	f85d 7b04 	ldr.w	r7, [sp], #4
    480e:	4770      	bx	lr

00004810 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4810:	b480      	push	{r7}
    4812:	b083      	sub	sp, #12
    4814:	af00      	add	r7, sp, #0
    4816:	6078      	str	r0, [r7, #4]
    4818:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    481a:	687b      	ldr	r3, [r7, #4]
    481c:	685a      	ldr	r2, [r3, #4]
    481e:	683b      	ldr	r3, [r7, #0]
    4820:	4013      	ands	r3, r2
    4822:	2b00      	cmp	r3, #0
    4824:	bf14      	ite	ne
    4826:	2301      	movne	r3, #1
    4828:	2300      	moveq	r3, #0
    482a:	b2db      	uxtb	r3, r3
}
    482c:	4618      	mov	r0, r3
    482e:	370c      	adds	r7, #12
    4830:	46bd      	mov	sp, r7
    4832:	f85d 7b04 	ldr.w	r7, [sp], #4
    4836:	4770      	bx	lr

00004838 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4838:	b480      	push	{r7}
    483a:	b083      	sub	sp, #12
    483c:	af00      	add	r7, sp, #0
    483e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4840:	687b      	ldr	r3, [r7, #4]
    4842:	695b      	ldr	r3, [r3, #20]
}
    4844:	4618      	mov	r0, r3
    4846:	370c      	adds	r7, #12
    4848:	46bd      	mov	sp, r7
    484a:	f85d 7b04 	ldr.w	r7, [sp], #4
    484e:	4770      	bx	lr

00004850 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4850:	b480      	push	{r7}
    4852:	b083      	sub	sp, #12
    4854:	af00      	add	r7, sp, #0
    4856:	6078      	str	r0, [r7, #4]
    4858:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    485a:	687b      	ldr	r3, [r7, #4]
    485c:	683a      	ldr	r2, [r7, #0]
    485e:	615a      	str	r2, [r3, #20]
}
    4860:	bf00      	nop
    4862:	370c      	adds	r7, #12
    4864:	46bd      	mov	sp, r7
    4866:	f85d 7b04 	ldr.w	r7, [sp], #4
    486a:	4770      	bx	lr

0000486c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    486c:	b480      	push	{r7}
    486e:	b083      	sub	sp, #12
    4870:	af00      	add	r7, sp, #0
    4872:	6078      	str	r0, [r7, #4]
    4874:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	683a      	ldr	r2, [r7, #0]
    487a:	611a      	str	r2, [r3, #16]
}
    487c:	bf00      	nop
    487e:	370c      	adds	r7, #12
    4880:	46bd      	mov	sp, r7
    4882:	f85d 7b04 	ldr.w	r7, [sp], #4
    4886:	4770      	bx	lr

00004888 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4888:	b480      	push	{r7}
    488a:	b083      	sub	sp, #12
    488c:	af00      	add	r7, sp, #0
    488e:	6078      	str	r0, [r7, #4]
    4890:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4892:	687b      	ldr	r3, [r7, #4]
    4894:	683a      	ldr	r2, [r7, #0]
    4896:	60da      	str	r2, [r3, #12]
}
    4898:	bf00      	nop
    489a:	370c      	adds	r7, #12
    489c:	46bd      	mov	sp, r7
    489e:	f85d 7b04 	ldr.w	r7, [sp], #4
    48a2:	4770      	bx	lr

000048a4 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    48a4:	b580      	push	{r7, lr}
    48a6:	b082      	sub	sp, #8
    48a8:	af00      	add	r7, sp, #0
    48aa:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	781b      	ldrb	r3, [r3, #0]
    48b0:	b2db      	uxtb	r3, r3
    48b2:	f043 0302 	orr.w	r3, r3, #2
    48b6:	b2da      	uxtb	r2, r3
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    48bc:	2103      	movs	r1, #3
    48be:	6878      	ldr	r0, [r7, #4]
    48c0:	4b02      	ldr	r3, [pc, #8]	; (48cc <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    48c2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    48c4:	bf00      	nop
    48c6:	3708      	adds	r7, #8
    48c8:	46bd      	mov	sp, r7
    48ca:	bd80      	pop	{r7, pc}
    48cc:	000047ed 	.word	0x000047ed

000048d0 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    48d0:	b580      	push	{r7, lr}
    48d2:	b082      	sub	sp, #8
    48d4:	af00      	add	r7, sp, #0
    48d6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    48d8:	687b      	ldr	r3, [r7, #4]
    48da:	781b      	ldrb	r3, [r3, #0]
    48dc:	b2db      	uxtb	r3, r3
    48de:	f023 0302 	bic.w	r3, r3, #2
    48e2:	b2da      	uxtb	r2, r3
    48e4:	687b      	ldr	r3, [r7, #4]
    48e6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    48e8:	2103      	movs	r1, #3
    48ea:	6878      	ldr	r0, [r7, #4]
    48ec:	4b02      	ldr	r3, [pc, #8]	; (48f8 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    48ee:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    48f0:	bf00      	nop
    48f2:	3708      	adds	r7, #8
    48f4:	46bd      	mov	sp, r7
    48f6:	bd80      	pop	{r7, pc}
    48f8:	000047ed 	.word	0x000047ed

000048fc <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    48fc:	b580      	push	{r7, lr}
    48fe:	b084      	sub	sp, #16
    4900:	af00      	add	r7, sp, #0
    4902:	6078      	str	r0, [r7, #4]
    4904:	460b      	mov	r3, r1
    4906:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	781b      	ldrb	r3, [r3, #0]
    490c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    490e:	7bfb      	ldrb	r3, [r7, #15]
    4910:	f023 0310 	bic.w	r3, r3, #16
    4914:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4916:	78fb      	ldrb	r3, [r7, #3]
    4918:	011b      	lsls	r3, r3, #4
    491a:	b25a      	sxtb	r2, r3
    491c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4920:	4313      	orrs	r3, r2
    4922:	b25b      	sxtb	r3, r3
    4924:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4926:	687b      	ldr	r3, [r7, #4]
    4928:	7bfa      	ldrb	r2, [r7, #15]
    492a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    492c:	2103      	movs	r1, #3
    492e:	6878      	ldr	r0, [r7, #4]
    4930:	4b02      	ldr	r3, [pc, #8]	; (493c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4932:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4934:	bf00      	nop
    4936:	3710      	adds	r7, #16
    4938:	46bd      	mov	sp, r7
    493a:	bd80      	pop	{r7, pc}
    493c:	000047ed 	.word	0x000047ed

00004940 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4940:	b580      	push	{r7, lr}
    4942:	b084      	sub	sp, #16
    4944:	af00      	add	r7, sp, #0
    4946:	6078      	str	r0, [r7, #4]
    4948:	460b      	mov	r3, r1
    494a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    494c:	2103      	movs	r1, #3
    494e:	6878      	ldr	r0, [r7, #4]
    4950:	4b06      	ldr	r3, [pc, #24]	; (496c <hri_eic_get_CTRLA_reg+0x2c>)
    4952:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4954:	687b      	ldr	r3, [r7, #4]
    4956:	781b      	ldrb	r3, [r3, #0]
    4958:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    495a:	7bfa      	ldrb	r2, [r7, #15]
    495c:	78fb      	ldrb	r3, [r7, #3]
    495e:	4013      	ands	r3, r2
    4960:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4962:	7bfb      	ldrb	r3, [r7, #15]
}
    4964:	4618      	mov	r0, r3
    4966:	3710      	adds	r7, #16
    4968:	46bd      	mov	sp, r7
    496a:	bd80      	pop	{r7, pc}
    496c:	000047ed 	.word	0x000047ed

00004970 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4970:	b580      	push	{r7, lr}
    4972:	b082      	sub	sp, #8
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
    4978:	460b      	mov	r3, r1
    497a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    497c:	687b      	ldr	r3, [r7, #4]
    497e:	78fa      	ldrb	r2, [r7, #3]
    4980:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4982:	2103      	movs	r1, #3
    4984:	6878      	ldr	r0, [r7, #4]
    4986:	4b03      	ldr	r3, [pc, #12]	; (4994 <hri_eic_write_CTRLA_reg+0x24>)
    4988:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    498a:	bf00      	nop
    498c:	3708      	adds	r7, #8
    498e:	46bd      	mov	sp, r7
    4990:	bd80      	pop	{r7, pc}
    4992:	bf00      	nop
    4994:	000047ed 	.word	0x000047ed

00004998 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4998:	b480      	push	{r7}
    499a:	b083      	sub	sp, #12
    499c:	af00      	add	r7, sp, #0
    499e:	6078      	str	r0, [r7, #4]
    49a0:	460b      	mov	r3, r1
    49a2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    49a4:	687b      	ldr	r3, [r7, #4]
    49a6:	78fa      	ldrb	r2, [r7, #3]
    49a8:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    49aa:	bf00      	nop
    49ac:	370c      	adds	r7, #12
    49ae:	46bd      	mov	sp, r7
    49b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    49b4:	4770      	bx	lr

000049b6 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    49b6:	b480      	push	{r7}
    49b8:	b083      	sub	sp, #12
    49ba:	af00      	add	r7, sp, #0
    49bc:	6078      	str	r0, [r7, #4]
    49be:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    49c0:	687b      	ldr	r3, [r7, #4]
    49c2:	683a      	ldr	r2, [r7, #0]
    49c4:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    49c6:	bf00      	nop
    49c8:	370c      	adds	r7, #12
    49ca:	46bd      	mov	sp, r7
    49cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    49d0:	4770      	bx	lr

000049d2 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    49d2:	b480      	push	{r7}
    49d4:	b083      	sub	sp, #12
    49d6:	af00      	add	r7, sp, #0
    49d8:	6078      	str	r0, [r7, #4]
    49da:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	683a      	ldr	r2, [r7, #0]
    49e0:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    49e2:	bf00      	nop
    49e4:	370c      	adds	r7, #12
    49e6:	46bd      	mov	sp, r7
    49e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    49ec:	4770      	bx	lr

000049ee <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    49ee:	b480      	push	{r7}
    49f0:	b085      	sub	sp, #20
    49f2:	af00      	add	r7, sp, #0
    49f4:	60f8      	str	r0, [r7, #12]
    49f6:	460b      	mov	r3, r1
    49f8:	607a      	str	r2, [r7, #4]
    49fa:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    49fc:	7afb      	ldrb	r3, [r7, #11]
    49fe:	68fa      	ldr	r2, [r7, #12]
    4a00:	3306      	adds	r3, #6
    4a02:	009b      	lsls	r3, r3, #2
    4a04:	4413      	add	r3, r2
    4a06:	687a      	ldr	r2, [r7, #4]
    4a08:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a0a:	bf00      	nop
    4a0c:	3714      	adds	r7, #20
    4a0e:	46bd      	mov	sp, r7
    4a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a14:	4770      	bx	lr

00004a16 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4a16:	b480      	push	{r7}
    4a18:	b083      	sub	sp, #12
    4a1a:	af00      	add	r7, sp, #0
    4a1c:	6078      	str	r0, [r7, #4]
    4a1e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	683a      	ldr	r2, [r7, #0]
    4a24:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a26:	bf00      	nop
    4a28:	370c      	adds	r7, #12
    4a2a:	46bd      	mov	sp, r7
    4a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a30:	4770      	bx	lr

00004a32 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4a32:	b480      	push	{r7}
    4a34:	b083      	sub	sp, #12
    4a36:	af00      	add	r7, sp, #0
    4a38:	6078      	str	r0, [r7, #4]
    4a3a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4a3c:	687b      	ldr	r3, [r7, #4]
    4a3e:	683a      	ldr	r2, [r7, #0]
    4a40:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a42:	bf00      	nop
    4a44:	370c      	adds	r7, #12
    4a46:	46bd      	mov	sp, r7
    4a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a4c:	4770      	bx	lr
	...

00004a50 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4a50:	b580      	push	{r7, lr}
    4a52:	b082      	sub	sp, #8
    4a54:	af00      	add	r7, sp, #0
    4a56:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4a58:	2101      	movs	r1, #1
    4a5a:	484b      	ldr	r0, [pc, #300]	; (4b88 <_ext_irq_init+0x138>)
    4a5c:	4b4b      	ldr	r3, [pc, #300]	; (4b8c <_ext_irq_init+0x13c>)
    4a5e:	4798      	blx	r3
    4a60:	4603      	mov	r3, r0
    4a62:	f083 0301 	eor.w	r3, r3, #1
    4a66:	b2db      	uxtb	r3, r3
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d011      	beq.n	4a90 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4a6c:	2102      	movs	r1, #2
    4a6e:	4846      	ldr	r0, [pc, #280]	; (4b88 <_ext_irq_init+0x138>)
    4a70:	4b47      	ldr	r3, [pc, #284]	; (4b90 <_ext_irq_init+0x140>)
    4a72:	4798      	blx	r3
    4a74:	4603      	mov	r3, r0
    4a76:	2b00      	cmp	r3, #0
    4a78:	d006      	beq.n	4a88 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4a7a:	4843      	ldr	r0, [pc, #268]	; (4b88 <_ext_irq_init+0x138>)
    4a7c:	4b45      	ldr	r3, [pc, #276]	; (4b94 <_ext_irq_init+0x144>)
    4a7e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4a80:	2102      	movs	r1, #2
    4a82:	4841      	ldr	r0, [pc, #260]	; (4b88 <_ext_irq_init+0x138>)
    4a84:	4b44      	ldr	r3, [pc, #272]	; (4b98 <_ext_irq_init+0x148>)
    4a86:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4a88:	2101      	movs	r1, #1
    4a8a:	483f      	ldr	r0, [pc, #252]	; (4b88 <_ext_irq_init+0x138>)
    4a8c:	4b43      	ldr	r3, [pc, #268]	; (4b9c <_ext_irq_init+0x14c>)
    4a8e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4a90:	2101      	movs	r1, #1
    4a92:	483d      	ldr	r0, [pc, #244]	; (4b88 <_ext_irq_init+0x138>)
    4a94:	4b40      	ldr	r3, [pc, #256]	; (4b98 <_ext_irq_init+0x148>)
    4a96:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4a98:	2100      	movs	r1, #0
    4a9a:	483b      	ldr	r0, [pc, #236]	; (4b88 <_ext_irq_init+0x138>)
    4a9c:	4b40      	ldr	r3, [pc, #256]	; (4ba0 <_ext_irq_init+0x150>)
    4a9e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4aa0:	2100      	movs	r1, #0
    4aa2:	4839      	ldr	r0, [pc, #228]	; (4b88 <_ext_irq_init+0x138>)
    4aa4:	4b3f      	ldr	r3, [pc, #252]	; (4ba4 <_ext_irq_init+0x154>)
    4aa6:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4aa8:	2100      	movs	r1, #0
    4aaa:	4837      	ldr	r0, [pc, #220]	; (4b88 <_ext_irq_init+0x138>)
    4aac:	4b3e      	ldr	r3, [pc, #248]	; (4ba8 <_ext_irq_init+0x158>)
    4aae:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4ab0:	f240 31b9 	movw	r1, #953	; 0x3b9
    4ab4:	4834      	ldr	r0, [pc, #208]	; (4b88 <_ext_irq_init+0x138>)
    4ab6:	4b3d      	ldr	r3, [pc, #244]	; (4bac <_ext_irq_init+0x15c>)
    4ab8:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4aba:	f240 3139 	movw	r1, #825	; 0x339
    4abe:	4832      	ldr	r0, [pc, #200]	; (4b88 <_ext_irq_init+0x138>)
    4ac0:	4b3b      	ldr	r3, [pc, #236]	; (4bb0 <_ext_irq_init+0x160>)
    4ac2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4ac4:	2100      	movs	r1, #0
    4ac6:	4830      	ldr	r0, [pc, #192]	; (4b88 <_ext_irq_init+0x138>)
    4ac8:	4b3a      	ldr	r3, [pc, #232]	; (4bb4 <_ext_irq_init+0x164>)
    4aca:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4acc:	4a3a      	ldr	r2, [pc, #232]	; (4bb8 <_ext_irq_init+0x168>)
    4ace:	2100      	movs	r1, #0
    4ad0:	482d      	ldr	r0, [pc, #180]	; (4b88 <_ext_irq_init+0x138>)
    4ad2:	4b3a      	ldr	r3, [pc, #232]	; (4bbc <_ext_irq_init+0x16c>)
    4ad4:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4ad6:	2211      	movs	r2, #17
    4ad8:	2101      	movs	r1, #1
    4ada:	482b      	ldr	r0, [pc, #172]	; (4b88 <_ext_irq_init+0x138>)
    4adc:	4b37      	ldr	r3, [pc, #220]	; (4bbc <_ext_irq_init+0x16c>)
    4ade:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4ae0:	4829      	ldr	r0, [pc, #164]	; (4b88 <_ext_irq_init+0x138>)
    4ae2:	4b37      	ldr	r3, [pc, #220]	; (4bc0 <_ext_irq_init+0x170>)
    4ae4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4ae6:	200c      	movs	r0, #12
    4ae8:	4b36      	ldr	r3, [pc, #216]	; (4bc4 <_ext_irq_init+0x174>)
    4aea:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4aec:	200c      	movs	r0, #12
    4aee:	4b36      	ldr	r3, [pc, #216]	; (4bc8 <_ext_irq_init+0x178>)
    4af0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4af2:	200c      	movs	r0, #12
    4af4:	4b35      	ldr	r3, [pc, #212]	; (4bcc <_ext_irq_init+0x17c>)
    4af6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4af8:	200f      	movs	r0, #15
    4afa:	4b32      	ldr	r3, [pc, #200]	; (4bc4 <_ext_irq_init+0x174>)
    4afc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4afe:	200f      	movs	r0, #15
    4b00:	4b31      	ldr	r3, [pc, #196]	; (4bc8 <_ext_irq_init+0x178>)
    4b02:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4b04:	200f      	movs	r0, #15
    4b06:	4b31      	ldr	r3, [pc, #196]	; (4bcc <_ext_irq_init+0x17c>)
    4b08:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4b0a:	2010      	movs	r0, #16
    4b0c:	4b2d      	ldr	r3, [pc, #180]	; (4bc4 <_ext_irq_init+0x174>)
    4b0e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4b10:	2010      	movs	r0, #16
    4b12:	4b2d      	ldr	r3, [pc, #180]	; (4bc8 <_ext_irq_init+0x178>)
    4b14:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4b16:	2010      	movs	r0, #16
    4b18:	4b2c      	ldr	r3, [pc, #176]	; (4bcc <_ext_irq_init+0x17c>)
    4b1a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4b1c:	2011      	movs	r0, #17
    4b1e:	4b29      	ldr	r3, [pc, #164]	; (4bc4 <_ext_irq_init+0x174>)
    4b20:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4b22:	2011      	movs	r0, #17
    4b24:	4b28      	ldr	r3, [pc, #160]	; (4bc8 <_ext_irq_init+0x178>)
    4b26:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4b28:	2011      	movs	r0, #17
    4b2a:	4b28      	ldr	r3, [pc, #160]	; (4bcc <_ext_irq_init+0x17c>)
    4b2c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4b2e:	2012      	movs	r0, #18
    4b30:	4b24      	ldr	r3, [pc, #144]	; (4bc4 <_ext_irq_init+0x174>)
    4b32:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4b34:	2012      	movs	r0, #18
    4b36:	4b24      	ldr	r3, [pc, #144]	; (4bc8 <_ext_irq_init+0x178>)
    4b38:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4b3a:	2012      	movs	r0, #18
    4b3c:	4b23      	ldr	r3, [pc, #140]	; (4bcc <_ext_irq_init+0x17c>)
    4b3e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4b40:	2013      	movs	r0, #19
    4b42:	4b20      	ldr	r3, [pc, #128]	; (4bc4 <_ext_irq_init+0x174>)
    4b44:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4b46:	2013      	movs	r0, #19
    4b48:	4b1f      	ldr	r3, [pc, #124]	; (4bc8 <_ext_irq_init+0x178>)
    4b4a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4b4c:	2013      	movs	r0, #19
    4b4e:	4b1f      	ldr	r3, [pc, #124]	; (4bcc <_ext_irq_init+0x17c>)
    4b50:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4b52:	2014      	movs	r0, #20
    4b54:	4b1b      	ldr	r3, [pc, #108]	; (4bc4 <_ext_irq_init+0x174>)
    4b56:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4b58:	2014      	movs	r0, #20
    4b5a:	4b1b      	ldr	r3, [pc, #108]	; (4bc8 <_ext_irq_init+0x178>)
    4b5c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4b5e:	2014      	movs	r0, #20
    4b60:	4b1a      	ldr	r3, [pc, #104]	; (4bcc <_ext_irq_init+0x17c>)
    4b62:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4b64:	2015      	movs	r0, #21
    4b66:	4b17      	ldr	r3, [pc, #92]	; (4bc4 <_ext_irq_init+0x174>)
    4b68:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4b6a:	2015      	movs	r0, #21
    4b6c:	4b16      	ldr	r3, [pc, #88]	; (4bc8 <_ext_irq_init+0x178>)
    4b6e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4b70:	2015      	movs	r0, #21
    4b72:	4b16      	ldr	r3, [pc, #88]	; (4bcc <_ext_irq_init+0x17c>)
    4b74:	4798      	blx	r3

	callback = cb;
    4b76:	4a16      	ldr	r2, [pc, #88]	; (4bd0 <_ext_irq_init+0x180>)
    4b78:	687b      	ldr	r3, [r7, #4]
    4b7a:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4b7c:	2300      	movs	r3, #0
}
    4b7e:	4618      	mov	r0, r3
    4b80:	3708      	adds	r7, #8
    4b82:	46bd      	mov	sp, r7
    4b84:	bd80      	pop	{r7, pc}
    4b86:	bf00      	nop
    4b88:	40002800 	.word	0x40002800
    4b8c:	00004811 	.word	0x00004811
    4b90:	00004941 	.word	0x00004941
    4b94:	000048d1 	.word	0x000048d1
    4b98:	000047ed 	.word	0x000047ed
    4b9c:	00004971 	.word	0x00004971
    4ba0:	000048fd 	.word	0x000048fd
    4ba4:	00004999 	.word	0x00004999
    4ba8:	000049b7 	.word	0x000049b7
    4bac:	000049d3 	.word	0x000049d3
    4bb0:	00004a17 	.word	0x00004a17
    4bb4:	00004a33 	.word	0x00004a33
    4bb8:	90999003 	.word	0x90999003
    4bbc:	000049ef 	.word	0x000049ef
    4bc0:	000048a5 	.word	0x000048a5
    4bc4:	0000476d 	.word	0x0000476d
    4bc8:	000047b1 	.word	0x000047b1
    4bcc:	00004731 	.word	0x00004731
    4bd0:	20000800 	.word	0x20000800

00004bd4 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4bd4:	b580      	push	{r7, lr}
    4bd6:	b084      	sub	sp, #16
    4bd8:	af00      	add	r7, sp, #0
    4bda:	6078      	str	r0, [r7, #4]
    4bdc:	460b      	mov	r3, r1
    4bde:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4be0:	23ff      	movs	r3, #255	; 0xff
    4be2:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4be4:	2300      	movs	r3, #0
    4be6:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4be8:	e010      	b.n	4c0c <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4bea:	7bbb      	ldrb	r3, [r7, #14]
    4bec:	4a1c      	ldr	r2, [pc, #112]	; (4c60 <_ext_irq_enable+0x8c>)
    4bee:	00db      	lsls	r3, r3, #3
    4bf0:	4413      	add	r3, r2
    4bf2:	685a      	ldr	r2, [r3, #4]
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	429a      	cmp	r2, r3
    4bf8:	d105      	bne.n	4c06 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4bfa:	7bbb      	ldrb	r3, [r7, #14]
    4bfc:	4a18      	ldr	r2, [pc, #96]	; (4c60 <_ext_irq_enable+0x8c>)
    4bfe:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4c02:	73fb      	strb	r3, [r7, #15]
			break;
    4c04:	e005      	b.n	4c12 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4c06:	7bbb      	ldrb	r3, [r7, #14]
    4c08:	3301      	adds	r3, #1
    4c0a:	73bb      	strb	r3, [r7, #14]
    4c0c:	7bbb      	ldrb	r3, [r7, #14]
    4c0e:	2b07      	cmp	r3, #7
    4c10:	d9eb      	bls.n	4bea <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4c12:	7bfb      	ldrb	r3, [r7, #15]
    4c14:	2bff      	cmp	r3, #255	; 0xff
    4c16:	d102      	bne.n	4c1e <_ext_irq_enable+0x4a>
		return -1;
    4c18:	f04f 33ff 	mov.w	r3, #4294967295
    4c1c:	e01c      	b.n	4c58 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4c1e:	78fb      	ldrb	r3, [r7, #3]
    4c20:	2b00      	cmp	r3, #0
    4c22:	d008      	beq.n	4c36 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4c24:	7bfb      	ldrb	r3, [r7, #15]
    4c26:	2201      	movs	r2, #1
    4c28:	fa02 f303 	lsl.w	r3, r2, r3
    4c2c:	4619      	mov	r1, r3
    4c2e:	480d      	ldr	r0, [pc, #52]	; (4c64 <_ext_irq_enable+0x90>)
    4c30:	4b0d      	ldr	r3, [pc, #52]	; (4c68 <_ext_irq_enable+0x94>)
    4c32:	4798      	blx	r3
    4c34:	e00f      	b.n	4c56 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4c36:	7bfb      	ldrb	r3, [r7, #15]
    4c38:	2201      	movs	r2, #1
    4c3a:	fa02 f303 	lsl.w	r3, r2, r3
    4c3e:	4619      	mov	r1, r3
    4c40:	4808      	ldr	r0, [pc, #32]	; (4c64 <_ext_irq_enable+0x90>)
    4c42:	4b0a      	ldr	r3, [pc, #40]	; (4c6c <_ext_irq_enable+0x98>)
    4c44:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4c46:	7bfb      	ldrb	r3, [r7, #15]
    4c48:	2201      	movs	r2, #1
    4c4a:	fa02 f303 	lsl.w	r3, r2, r3
    4c4e:	4619      	mov	r1, r3
    4c50:	4804      	ldr	r0, [pc, #16]	; (4c64 <_ext_irq_enable+0x90>)
    4c52:	4b07      	ldr	r3, [pc, #28]	; (4c70 <_ext_irq_enable+0x9c>)
    4c54:	4798      	blx	r3
	}

	return ERR_NONE;
    4c56:	2300      	movs	r3, #0
}
    4c58:	4618      	mov	r0, r3
    4c5a:	3710      	adds	r7, #16
    4c5c:	46bd      	mov	sp, r7
    4c5e:	bd80      	pop	{r7, pc}
    4c60:	0000ff0c 	.word	0x0000ff0c
    4c64:	40002800 	.word	0x40002800
    4c68:	0000486d 	.word	0x0000486d
    4c6c:	00004889 	.word	0x00004889
    4c70:	00004851 	.word	0x00004851

00004c74 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4c74:	b580      	push	{r7, lr}
    4c76:	b084      	sub	sp, #16
    4c78:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4c7a:	4841      	ldr	r0, [pc, #260]	; (4d80 <_ext_irq_handler+0x10c>)
    4c7c:	4b41      	ldr	r3, [pc, #260]	; (4d84 <_ext_irq_handler+0x110>)
    4c7e:	4798      	blx	r3
    4c80:	4603      	mov	r3, r0
    4c82:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4c84:	f04f 33ff 	mov.w	r3, #4294967295
    4c88:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4c8a:	683b      	ldr	r3, [r7, #0]
    4c8c:	4619      	mov	r1, r3
    4c8e:	483c      	ldr	r0, [pc, #240]	; (4d80 <_ext_irq_handler+0x10c>)
    4c90:	4b3d      	ldr	r3, [pc, #244]	; (4d88 <_ext_irq_handler+0x114>)
    4c92:	4798      	blx	r3

	ASSERT(callback);
    4c94:	4b3d      	ldr	r3, [pc, #244]	; (4d8c <_ext_irq_handler+0x118>)
    4c96:	681b      	ldr	r3, [r3, #0]
    4c98:	2b00      	cmp	r3, #0
    4c9a:	bf14      	ite	ne
    4c9c:	2301      	movne	r3, #1
    4c9e:	2300      	moveq	r3, #0
    4ca0:	b2db      	uxtb	r3, r3
    4ca2:	f44f 7282 	mov.w	r2, #260	; 0x104
    4ca6:	493a      	ldr	r1, [pc, #232]	; (4d90 <_ext_irq_handler+0x11c>)
    4ca8:	4618      	mov	r0, r3
    4caa:	4b3a      	ldr	r3, [pc, #232]	; (4d94 <_ext_irq_handler+0x120>)
    4cac:	4798      	blx	r3

	while (flags) {
    4cae:	e060      	b.n	4d72 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4cb0:	683b      	ldr	r3, [r7, #0]
    4cb2:	4618      	mov	r0, r3
    4cb4:	4b38      	ldr	r3, [pc, #224]	; (4d98 <_ext_irq_handler+0x124>)
    4cb6:	4798      	blx	r3
    4cb8:	4603      	mov	r3, r0
    4cba:	b2db      	uxtb	r3, r3
    4cbc:	3b01      	subs	r3, #1
    4cbe:	b2db      	uxtb	r3, r3
    4cc0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4cc2:	e047      	b.n	4d54 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4cc4:	2300      	movs	r3, #0
    4cc6:	71fb      	strb	r3, [r7, #7]
    4cc8:	2308      	movs	r3, #8
    4cca:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4ccc:	e024      	b.n	4d18 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4cce:	79ba      	ldrb	r2, [r7, #6]
    4cd0:	79fb      	ldrb	r3, [r7, #7]
    4cd2:	4413      	add	r3, r2
    4cd4:	105b      	asrs	r3, r3, #1
    4cd6:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4cd8:	797b      	ldrb	r3, [r7, #5]
    4cda:	4a30      	ldr	r2, [pc, #192]	; (4d9c <_ext_irq_handler+0x128>)
    4cdc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4ce0:	461a      	mov	r2, r3
    4ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ce6:	429a      	cmp	r2, r3
    4ce8:	d106      	bne.n	4cf8 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4cea:	797b      	ldrb	r3, [r7, #5]
    4cec:	4a2b      	ldr	r2, [pc, #172]	; (4d9c <_ext_irq_handler+0x128>)
    4cee:	00db      	lsls	r3, r3, #3
    4cf0:	4413      	add	r3, r2
    4cf2:	685b      	ldr	r3, [r3, #4]
    4cf4:	60bb      	str	r3, [r7, #8]
					break;
    4cf6:	e013      	b.n	4d20 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4cf8:	797b      	ldrb	r3, [r7, #5]
    4cfa:	4a28      	ldr	r2, [pc, #160]	; (4d9c <_ext_irq_handler+0x128>)
    4cfc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4d00:	461a      	mov	r2, r3
    4d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4d06:	429a      	cmp	r2, r3
    4d08:	da03      	bge.n	4d12 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4d0a:	797b      	ldrb	r3, [r7, #5]
    4d0c:	3301      	adds	r3, #1
    4d0e:	71fb      	strb	r3, [r7, #7]
    4d10:	e002      	b.n	4d18 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4d12:	797b      	ldrb	r3, [r7, #5]
    4d14:	3b01      	subs	r3, #1
    4d16:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4d18:	79ba      	ldrb	r2, [r7, #6]
    4d1a:	79fb      	ldrb	r3, [r7, #7]
    4d1c:	429a      	cmp	r2, r3
    4d1e:	d2d6      	bcs.n	4cce <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4d20:	68bb      	ldr	r3, [r7, #8]
    4d22:	f1b3 3fff 	cmp.w	r3, #4294967295
    4d26:	d003      	beq.n	4d30 <_ext_irq_handler+0xbc>
				callback(pin);
    4d28:	4b18      	ldr	r3, [pc, #96]	; (4d8c <_ext_irq_handler+0x118>)
    4d2a:	681b      	ldr	r3, [r3, #0]
    4d2c:	68b8      	ldr	r0, [r7, #8]
    4d2e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4d34:	2201      	movs	r2, #1
    4d36:	fa02 f303 	lsl.w	r3, r2, r3
    4d3a:	43da      	mvns	r2, r3
    4d3c:	683b      	ldr	r3, [r7, #0]
    4d3e:	4013      	ands	r3, r2
    4d40:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4d42:	683b      	ldr	r3, [r7, #0]
    4d44:	4618      	mov	r0, r3
    4d46:	4b14      	ldr	r3, [pc, #80]	; (4d98 <_ext_irq_handler+0x124>)
    4d48:	4798      	blx	r3
    4d4a:	4603      	mov	r3, r0
    4d4c:	b2db      	uxtb	r3, r3
    4d4e:	3b01      	subs	r3, #1
    4d50:	b2db      	uxtb	r3, r3
    4d52:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4d58:	f1b3 3fff 	cmp.w	r3, #4294967295
    4d5c:	d1b2      	bne.n	4cc4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4d5e:	4808      	ldr	r0, [pc, #32]	; (4d80 <_ext_irq_handler+0x10c>)
    4d60:	4b08      	ldr	r3, [pc, #32]	; (4d84 <_ext_irq_handler+0x110>)
    4d62:	4798      	blx	r3
    4d64:	4603      	mov	r3, r0
    4d66:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4d68:	683b      	ldr	r3, [r7, #0]
    4d6a:	4619      	mov	r1, r3
    4d6c:	4804      	ldr	r0, [pc, #16]	; (4d80 <_ext_irq_handler+0x10c>)
    4d6e:	4b06      	ldr	r3, [pc, #24]	; (4d88 <_ext_irq_handler+0x114>)
    4d70:	4798      	blx	r3
	while (flags) {
    4d72:	683b      	ldr	r3, [r7, #0]
    4d74:	2b00      	cmp	r3, #0
    4d76:	d19b      	bne.n	4cb0 <_ext_irq_handler+0x3c>
	}
}
    4d78:	bf00      	nop
    4d7a:	3710      	adds	r7, #16
    4d7c:	46bd      	mov	sp, r7
    4d7e:	bd80      	pop	{r7, pc}
    4d80:	40002800 	.word	0x40002800
    4d84:	00004839 	.word	0x00004839
    4d88:	00004851 	.word	0x00004851
    4d8c:	20000800 	.word	0x20000800
    4d90:	0000ff4c 	.word	0x0000ff4c
    4d94:	00003ab1 	.word	0x00003ab1
    4d98:	0000f8ed 	.word	0x0000f8ed
    4d9c:	0000ff0c 	.word	0x0000ff0c

00004da0 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4da0:	b580      	push	{r7, lr}
    4da2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4da4:	4b01      	ldr	r3, [pc, #4]	; (4dac <EIC_0_Handler+0xc>)
    4da6:	4798      	blx	r3
} /**
    4da8:	bf00      	nop
    4daa:	bd80      	pop	{r7, pc}
    4dac:	00004c75 	.word	0x00004c75

00004db0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4db0:	b580      	push	{r7, lr}
    4db2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4db4:	4b01      	ldr	r3, [pc, #4]	; (4dbc <EIC_3_Handler+0xc>)
    4db6:	4798      	blx	r3
} /**
    4db8:	bf00      	nop
    4dba:	bd80      	pop	{r7, pc}
    4dbc:	00004c75 	.word	0x00004c75

00004dc0 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4dc0:	b580      	push	{r7, lr}
    4dc2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4dc4:	4b01      	ldr	r3, [pc, #4]	; (4dcc <EIC_4_Handler+0xc>)
    4dc6:	4798      	blx	r3
} /**
    4dc8:	bf00      	nop
    4dca:	bd80      	pop	{r7, pc}
    4dcc:	00004c75 	.word	0x00004c75

00004dd0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4dd0:	b580      	push	{r7, lr}
    4dd2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4dd4:	4b01      	ldr	r3, [pc, #4]	; (4ddc <EIC_5_Handler+0xc>)
    4dd6:	4798      	blx	r3
} /**
    4dd8:	bf00      	nop
    4dda:	bd80      	pop	{r7, pc}
    4ddc:	00004c75 	.word	0x00004c75

00004de0 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4de0:	b580      	push	{r7, lr}
    4de2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4de4:	4b01      	ldr	r3, [pc, #4]	; (4dec <EIC_6_Handler+0xc>)
    4de6:	4798      	blx	r3
} /**
    4de8:	bf00      	nop
    4dea:	bd80      	pop	{r7, pc}
    4dec:	00004c75 	.word	0x00004c75

00004df0 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4df0:	b580      	push	{r7, lr}
    4df2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4df4:	4b01      	ldr	r3, [pc, #4]	; (4dfc <EIC_7_Handler+0xc>)
    4df6:	4798      	blx	r3
} /**
    4df8:	bf00      	nop
    4dfa:	bd80      	pop	{r7, pc}
    4dfc:	00004c75 	.word	0x00004c75

00004e00 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4e00:	b580      	push	{r7, lr}
    4e02:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e04:	4b01      	ldr	r3, [pc, #4]	; (4e0c <EIC_8_Handler+0xc>)
    4e06:	4798      	blx	r3
} /**
    4e08:	bf00      	nop
    4e0a:	bd80      	pop	{r7, pc}
    4e0c:	00004c75 	.word	0x00004c75

00004e10 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4e10:	b580      	push	{r7, lr}
    4e12:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e14:	4b01      	ldr	r3, [pc, #4]	; (4e1c <EIC_9_Handler+0xc>)
    4e16:	4798      	blx	r3
}
    4e18:	bf00      	nop
    4e1a:	bd80      	pop	{r7, pc}
    4e1c:	00004c75 	.word	0x00004c75

00004e20 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4e20:	b480      	push	{r7}
    4e22:	b085      	sub	sp, #20
    4e24:	af00      	add	r7, sp, #0
    4e26:	60f8      	str	r0, [r7, #12]
    4e28:	460b      	mov	r3, r1
    4e2a:	607a      	str	r2, [r7, #4]
    4e2c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4e2e:	7afa      	ldrb	r2, [r7, #11]
    4e30:	68fb      	ldr	r3, [r7, #12]
    4e32:	3248      	adds	r2, #72	; 0x48
    4e34:	6879      	ldr	r1, [r7, #4]
    4e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4e3a:	bf00      	nop
    4e3c:	3714      	adds	r7, #20
    4e3e:	46bd      	mov	sp, r7
    4e40:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e44:	4770      	bx	lr

00004e46 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4e46:	b480      	push	{r7}
    4e48:	b083      	sub	sp, #12
    4e4a:	af00      	add	r7, sp, #0
    4e4c:	6078      	str	r0, [r7, #4]
    4e4e:	460b      	mov	r3, r1
    4e50:	70fb      	strb	r3, [r7, #3]
    4e52:	4613      	mov	r3, r2
    4e54:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4e56:	78fb      	ldrb	r3, [r7, #3]
    4e58:	687a      	ldr	r2, [r7, #4]
    4e5a:	3304      	adds	r3, #4
    4e5c:	00db      	lsls	r3, r3, #3
    4e5e:	4413      	add	r3, r2
    4e60:	78ba      	ldrb	r2, [r7, #2]
    4e62:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4e64:	78fb      	ldrb	r3, [r7, #3]
    4e66:	78ba      	ldrb	r2, [r7, #2]
    4e68:	43d2      	mvns	r2, r2
    4e6a:	b2d1      	uxtb	r1, r2
    4e6c:	687a      	ldr	r2, [r7, #4]
    4e6e:	3304      	adds	r3, #4
    4e70:	00db      	lsls	r3, r3, #3
    4e72:	4413      	add	r3, r2
    4e74:	460a      	mov	r2, r1
    4e76:	711a      	strb	r2, [r3, #4]
}
    4e78:	bf00      	nop
    4e7a:	370c      	adds	r7, #12
    4e7c:	46bd      	mov	sp, r7
    4e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e82:	4770      	bx	lr

00004e84 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4e84:	b480      	push	{r7}
    4e86:	b085      	sub	sp, #20
    4e88:	af00      	add	r7, sp, #0
    4e8a:	60f8      	str	r0, [r7, #12]
    4e8c:	460b      	mov	r3, r1
    4e8e:	607a      	str	r2, [r7, #4]
    4e90:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4e92:	7afa      	ldrb	r2, [r7, #11]
    4e94:	68fb      	ldr	r3, [r7, #12]
    4e96:	3204      	adds	r2, #4
    4e98:	6879      	ldr	r1, [r7, #4]
    4e9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4e9e:	bf00      	nop
    4ea0:	3714      	adds	r7, #20
    4ea2:	46bd      	mov	sp, r7
    4ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ea8:	4770      	bx	lr
	...

00004eac <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4eac:	b580      	push	{r7, lr}
    4eae:	b082      	sub	sp, #8
    4eb0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4eb2:	2300      	movs	r3, #0
    4eb4:	71fb      	strb	r3, [r7, #7]
    4eb6:	e00b      	b.n	4ed0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4eb8:	79fb      	ldrb	r3, [r7, #7]
    4eba:	4a18      	ldr	r2, [pc, #96]	; (4f1c <_event_system_init+0x70>)
    4ebc:	5cd3      	ldrb	r3, [r2, r3]
    4ebe:	461a      	mov	r2, r3
    4ec0:	79fb      	ldrb	r3, [r7, #7]
    4ec2:	4619      	mov	r1, r3
    4ec4:	4816      	ldr	r0, [pc, #88]	; (4f20 <_event_system_init+0x74>)
    4ec6:	4b17      	ldr	r3, [pc, #92]	; (4f24 <_event_system_init+0x78>)
    4ec8:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4eca:	79fb      	ldrb	r3, [r7, #7]
    4ecc:	3301      	adds	r3, #1
    4ece:	71fb      	strb	r3, [r7, #7]
    4ed0:	79fb      	ldrb	r3, [r7, #7]
    4ed2:	2b42      	cmp	r3, #66	; 0x42
    4ed4:	d9f0      	bls.n	4eb8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4ed6:	2300      	movs	r3, #0
    4ed8:	71fb      	strb	r3, [r7, #7]
    4eda:	e016      	b.n	4f0a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4edc:	79fb      	ldrb	r3, [r7, #7]
    4ede:	4a12      	ldr	r2, [pc, #72]	; (4f28 <_event_system_init+0x7c>)
    4ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4ee4:	461a      	mov	r2, r3
    4ee6:	79fb      	ldrb	r3, [r7, #7]
    4ee8:	4619      	mov	r1, r3
    4eea:	480d      	ldr	r0, [pc, #52]	; (4f20 <_event_system_init+0x74>)
    4eec:	4b0f      	ldr	r3, [pc, #60]	; (4f2c <_event_system_init+0x80>)
    4eee:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4ef0:	79fb      	ldrb	r3, [r7, #7]
    4ef2:	4a0f      	ldr	r2, [pc, #60]	; (4f30 <_event_system_init+0x84>)
    4ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ef8:	b2da      	uxtb	r2, r3
    4efa:	79fb      	ldrb	r3, [r7, #7]
    4efc:	4619      	mov	r1, r3
    4efe:	4808      	ldr	r0, [pc, #32]	; (4f20 <_event_system_init+0x74>)
    4f00:	4b0c      	ldr	r3, [pc, #48]	; (4f34 <_event_system_init+0x88>)
    4f02:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4f04:	79fb      	ldrb	r3, [r7, #7]
    4f06:	3301      	adds	r3, #1
    4f08:	71fb      	strb	r3, [r7, #7]
    4f0a:	79fb      	ldrb	r3, [r7, #7]
    4f0c:	2b1f      	cmp	r3, #31
    4f0e:	d9e5      	bls.n	4edc <_event_system_init+0x30>
	}

	return ERR_NONE;
    4f10:	2300      	movs	r3, #0
}
    4f12:	4618      	mov	r0, r3
    4f14:	3708      	adds	r7, #8
    4f16:	46bd      	mov	sp, r7
    4f18:	bd80      	pop	{r7, pc}
    4f1a:	bf00      	nop
    4f1c:	0000ff64 	.word	0x0000ff64
    4f20:	4100e000 	.word	0x4100e000
    4f24:	00004e21 	.word	0x00004e21
    4f28:	0000ffa8 	.word	0x0000ffa8
    4f2c:	00004e85 	.word	0x00004e85
    4f30:	0000ffe8 	.word	0x0000ffe8
    4f34:	00004e47 	.word	0x00004e47

00004f38 <hri_gclk_wait_for_sync>:
{
    4f38:	b480      	push	{r7}
    4f3a:	b083      	sub	sp, #12
    4f3c:	af00      	add	r7, sp, #0
    4f3e:	6078      	str	r0, [r7, #4]
    4f40:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4f42:	bf00      	nop
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	685a      	ldr	r2, [r3, #4]
    4f48:	683b      	ldr	r3, [r7, #0]
    4f4a:	4013      	ands	r3, r2
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	d1f9      	bne.n	4f44 <hri_gclk_wait_for_sync+0xc>
}
    4f50:	bf00      	nop
    4f52:	370c      	adds	r7, #12
    4f54:	46bd      	mov	sp, r7
    4f56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f5a:	4770      	bx	lr

00004f5c <hri_gclk_write_GENCTRL_reg>:
{
    4f5c:	b580      	push	{r7, lr}
    4f5e:	b084      	sub	sp, #16
    4f60:	af00      	add	r7, sp, #0
    4f62:	60f8      	str	r0, [r7, #12]
    4f64:	460b      	mov	r3, r1
    4f66:	607a      	str	r2, [r7, #4]
    4f68:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4f6a:	7afa      	ldrb	r2, [r7, #11]
    4f6c:	68fb      	ldr	r3, [r7, #12]
    4f6e:	3208      	adds	r2, #8
    4f70:	6879      	ldr	r1, [r7, #4]
    4f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4f76:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4f7a:	68f8      	ldr	r0, [r7, #12]
    4f7c:	4b02      	ldr	r3, [pc, #8]	; (4f88 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4f7e:	4798      	blx	r3
}
    4f80:	bf00      	nop
    4f82:	3710      	adds	r7, #16
    4f84:	46bd      	mov	sp, r7
    4f86:	bd80      	pop	{r7, pc}
    4f88:	00004f39 	.word	0x00004f39

00004f8c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4f8c:	b580      	push	{r7, lr}
    4f8e:	b082      	sub	sp, #8
    4f90:	af00      	add	r7, sp, #0
    4f92:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4f94:	687b      	ldr	r3, [r7, #4]
    4f96:	f003 0301 	and.w	r3, r3, #1
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d004      	beq.n	4fa8 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4f9e:	4a36      	ldr	r2, [pc, #216]	; (5078 <_gclk_init_generators_by_fref+0xec>)
    4fa0:	2100      	movs	r1, #0
    4fa2:	4836      	ldr	r0, [pc, #216]	; (507c <_gclk_init_generators_by_fref+0xf0>)
    4fa4:	4b36      	ldr	r3, [pc, #216]	; (5080 <_gclk_init_generators_by_fref+0xf4>)
    4fa6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4fa8:	687b      	ldr	r3, [r7, #4]
    4faa:	f003 0302 	and.w	r3, r3, #2
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d004      	beq.n	4fbc <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4fb2:	4a34      	ldr	r2, [pc, #208]	; (5084 <_gclk_init_generators_by_fref+0xf8>)
    4fb4:	2101      	movs	r1, #1
    4fb6:	4831      	ldr	r0, [pc, #196]	; (507c <_gclk_init_generators_by_fref+0xf0>)
    4fb8:	4b31      	ldr	r3, [pc, #196]	; (5080 <_gclk_init_generators_by_fref+0xf4>)
    4fba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4fbc:	687b      	ldr	r3, [r7, #4]
    4fbe:	f003 0304 	and.w	r3, r3, #4
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	d004      	beq.n	4fd0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4fc6:	4a30      	ldr	r2, [pc, #192]	; (5088 <_gclk_init_generators_by_fref+0xfc>)
    4fc8:	2102      	movs	r1, #2
    4fca:	482c      	ldr	r0, [pc, #176]	; (507c <_gclk_init_generators_by_fref+0xf0>)
    4fcc:	4b2c      	ldr	r3, [pc, #176]	; (5080 <_gclk_init_generators_by_fref+0xf4>)
    4fce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4fd0:	687b      	ldr	r3, [r7, #4]
    4fd2:	f003 0308 	and.w	r3, r3, #8
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	d004      	beq.n	4fe4 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4fda:	4a2c      	ldr	r2, [pc, #176]	; (508c <_gclk_init_generators_by_fref+0x100>)
    4fdc:	2103      	movs	r1, #3
    4fde:	4827      	ldr	r0, [pc, #156]	; (507c <_gclk_init_generators_by_fref+0xf0>)
    4fe0:	4b27      	ldr	r3, [pc, #156]	; (5080 <_gclk_init_generators_by_fref+0xf4>)
    4fe2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4fe4:	687b      	ldr	r3, [r7, #4]
    4fe6:	f003 0310 	and.w	r3, r3, #16
    4fea:	2b00      	cmp	r3, #0
    4fec:	d004      	beq.n	4ff8 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4fee:	4a28      	ldr	r2, [pc, #160]	; (5090 <_gclk_init_generators_by_fref+0x104>)
    4ff0:	2104      	movs	r1, #4
    4ff2:	4822      	ldr	r0, [pc, #136]	; (507c <_gclk_init_generators_by_fref+0xf0>)
    4ff4:	4b22      	ldr	r3, [pc, #136]	; (5080 <_gclk_init_generators_by_fref+0xf4>)
    4ff6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4ff8:	687b      	ldr	r3, [r7, #4]
    4ffa:	f003 0320 	and.w	r3, r3, #32
    4ffe:	2b00      	cmp	r3, #0
    5000:	d004      	beq.n	500c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    5002:	4a24      	ldr	r2, [pc, #144]	; (5094 <_gclk_init_generators_by_fref+0x108>)
    5004:	2105      	movs	r1, #5
    5006:	481d      	ldr	r0, [pc, #116]	; (507c <_gclk_init_generators_by_fref+0xf0>)
    5008:	4b1d      	ldr	r3, [pc, #116]	; (5080 <_gclk_init_generators_by_fref+0xf4>)
    500a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5012:	2b00      	cmp	r3, #0
    5014:	d004      	beq.n	5020 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    5016:	4a20      	ldr	r2, [pc, #128]	; (5098 <_gclk_init_generators_by_fref+0x10c>)
    5018:	2106      	movs	r1, #6
    501a:	4818      	ldr	r0, [pc, #96]	; (507c <_gclk_init_generators_by_fref+0xf0>)
    501c:	4b18      	ldr	r3, [pc, #96]	; (5080 <_gclk_init_generators_by_fref+0xf4>)
    501e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5020:	687b      	ldr	r3, [r7, #4]
    5022:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5026:	2b00      	cmp	r3, #0
    5028:	d004      	beq.n	5034 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    502a:	4a1c      	ldr	r2, [pc, #112]	; (509c <_gclk_init_generators_by_fref+0x110>)
    502c:	2107      	movs	r1, #7
    502e:	4813      	ldr	r0, [pc, #76]	; (507c <_gclk_init_generators_by_fref+0xf0>)
    5030:	4b13      	ldr	r3, [pc, #76]	; (5080 <_gclk_init_generators_by_fref+0xf4>)
    5032:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    5034:	687b      	ldr	r3, [r7, #4]
    5036:	f403 7380 	and.w	r3, r3, #256	; 0x100
    503a:	2b00      	cmp	r3, #0
    503c:	d004      	beq.n	5048 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    503e:	4a18      	ldr	r2, [pc, #96]	; (50a0 <_gclk_init_generators_by_fref+0x114>)
    5040:	2108      	movs	r1, #8
    5042:	480e      	ldr	r0, [pc, #56]	; (507c <_gclk_init_generators_by_fref+0xf0>)
    5044:	4b0e      	ldr	r3, [pc, #56]	; (5080 <_gclk_init_generators_by_fref+0xf4>)
    5046:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    504e:	2b00      	cmp	r3, #0
    5050:	d004      	beq.n	505c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    5052:	4a14      	ldr	r2, [pc, #80]	; (50a4 <_gclk_init_generators_by_fref+0x118>)
    5054:	210a      	movs	r1, #10
    5056:	4809      	ldr	r0, [pc, #36]	; (507c <_gclk_init_generators_by_fref+0xf0>)
    5058:	4b09      	ldr	r3, [pc, #36]	; (5080 <_gclk_init_generators_by_fref+0xf4>)
    505a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    505c:	687b      	ldr	r3, [r7, #4]
    505e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    5062:	2b00      	cmp	r3, #0
    5064:	d004      	beq.n	5070 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    5066:	4a10      	ldr	r2, [pc, #64]	; (50a8 <_gclk_init_generators_by_fref+0x11c>)
    5068:	210b      	movs	r1, #11
    506a:	4804      	ldr	r0, [pc, #16]	; (507c <_gclk_init_generators_by_fref+0xf0>)
    506c:	4b04      	ldr	r3, [pc, #16]	; (5080 <_gclk_init_generators_by_fref+0xf4>)
    506e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    5070:	bf00      	nop
    5072:	3708      	adds	r7, #8
    5074:	46bd      	mov	sp, r7
    5076:	bd80      	pop	{r7, pc}
    5078:	00010107 	.word	0x00010107
    507c:	40001c00 	.word	0x40001c00
    5080:	00004f5d 	.word	0x00004f5d
    5084:	00010907 	.word	0x00010907
    5088:	00010906 	.word	0x00010906
    508c:	00020908 	.word	0x00020908
    5090:	00010901 	.word	0x00010901
    5094:	00062901 	.word	0x00062901
    5098:	000c2901 	.word	0x000c2901
    509c:	00082908 	.word	0x00082908
    50a0:	00032901 	.word	0x00032901
    50a4:	00010905 	.word	0x00010905
    50a8:	00041905 	.word	0x00041905

000050ac <hri_mclk_write_CPUDIV_reg>:
{
    50ac:	b480      	push	{r7}
    50ae:	b083      	sub	sp, #12
    50b0:	af00      	add	r7, sp, #0
    50b2:	6078      	str	r0, [r7, #4]
    50b4:	460b      	mov	r3, r1
    50b6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    50b8:	687b      	ldr	r3, [r7, #4]
    50ba:	78fa      	ldrb	r2, [r7, #3]
    50bc:	715a      	strb	r2, [r3, #5]
}
    50be:	bf00      	nop
    50c0:	370c      	adds	r7, #12
    50c2:	46bd      	mov	sp, r7
    50c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    50c8:	4770      	bx	lr
	...

000050cc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    50cc:	b580      	push	{r7, lr}
    50ce:	b082      	sub	sp, #8
    50d0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    50d2:	4b05      	ldr	r3, [pc, #20]	; (50e8 <_mclk_init+0x1c>)
    50d4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    50d6:	2101      	movs	r1, #1
    50d8:	6878      	ldr	r0, [r7, #4]
    50da:	4b04      	ldr	r3, [pc, #16]	; (50ec <_mclk_init+0x20>)
    50dc:	4798      	blx	r3
}
    50de:	bf00      	nop
    50e0:	3708      	adds	r7, #8
    50e2:	46bd      	mov	sp, r7
    50e4:	bd80      	pop	{r7, pc}
    50e6:	bf00      	nop
    50e8:	40000800 	.word	0x40000800
    50ec:	000050ad 	.word	0x000050ad

000050f0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    50f0:	b480      	push	{r7}
    50f2:	b083      	sub	sp, #12
    50f4:	af00      	add	r7, sp, #0
    50f6:	6078      	str	r0, [r7, #4]
    50f8:	460b      	mov	r3, r1
    50fa:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	78fa      	ldrb	r2, [r7, #3]
    5100:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5102:	bf00      	nop
    5104:	370c      	adds	r7, #12
    5106:	46bd      	mov	sp, r7
    5108:	f85d 7b04 	ldr.w	r7, [sp], #4
    510c:	4770      	bx	lr

0000510e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    510e:	b480      	push	{r7}
    5110:	b083      	sub	sp, #12
    5112:	af00      	add	r7, sp, #0
    5114:	6078      	str	r0, [r7, #4]
    5116:	460b      	mov	r3, r1
    5118:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    511a:	687b      	ldr	r3, [r7, #4]
    511c:	887a      	ldrh	r2, [r7, #2]
    511e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5120:	bf00      	nop
    5122:	370c      	adds	r7, #12
    5124:	46bd      	mov	sp, r7
    5126:	f85d 7b04 	ldr.w	r7, [sp], #4
    512a:	4770      	bx	lr

0000512c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    512c:	b480      	push	{r7}
    512e:	b083      	sub	sp, #12
    5130:	af00      	add	r7, sp, #0
    5132:	6078      	str	r0, [r7, #4]
    5134:	460b      	mov	r3, r1
    5136:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5138:	687b      	ldr	r3, [r7, #4]
    513a:	78fa      	ldrb	r2, [r7, #3]
    513c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    513e:	bf00      	nop
    5140:	370c      	adds	r7, #12
    5142:	46bd      	mov	sp, r7
    5144:	f85d 7b04 	ldr.w	r7, [sp], #4
    5148:	4770      	bx	lr

0000514a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    514a:	b480      	push	{r7}
    514c:	b083      	sub	sp, #12
    514e:	af00      	add	r7, sp, #0
    5150:	6078      	str	r0, [r7, #4]
    5152:	460b      	mov	r3, r1
    5154:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    5156:	687b      	ldr	r3, [r7, #4]
    5158:	78fa      	ldrb	r2, [r7, #3]
    515a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    515c:	bf00      	nop
    515e:	370c      	adds	r7, #12
    5160:	46bd      	mov	sp, r7
    5162:	f85d 7b04 	ldr.w	r7, [sp], #4
    5166:	4770      	bx	lr

00005168 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5168:	b480      	push	{r7}
    516a:	b085      	sub	sp, #20
    516c:	af00      	add	r7, sp, #0
    516e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	69db      	ldr	r3, [r3, #28]
    5174:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    5176:	68fb      	ldr	r3, [r7, #12]
    5178:	0a1b      	lsrs	r3, r3, #8
    517a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    517e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5180:	68fb      	ldr	r3, [r7, #12]
}
    5182:	4618      	mov	r0, r3
    5184:	3714      	adds	r7, #20
    5186:	46bd      	mov	sp, r7
    5188:	f85d 7b04 	ldr.w	r7, [sp], #4
    518c:	4770      	bx	lr

0000518e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    518e:	b480      	push	{r7}
    5190:	b083      	sub	sp, #12
    5192:	af00      	add	r7, sp, #0
    5194:	6078      	str	r0, [r7, #4]
    5196:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5198:	687b      	ldr	r3, [r7, #4]
    519a:	683a      	ldr	r2, [r7, #0]
    519c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    519e:	bf00      	nop
    51a0:	370c      	adds	r7, #12
    51a2:	46bd      	mov	sp, r7
    51a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51a8:	4770      	bx	lr
	...

000051ac <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    51ac:	b580      	push	{r7, lr}
    51ae:	b082      	sub	sp, #8
    51b0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    51b2:	4b13      	ldr	r3, [pc, #76]	; (5200 <_osc32kctrl_init_sources+0x54>)
    51b4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    51b6:	2300      	movs	r3, #0
    51b8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    51ba:	f242 018e 	movw	r1, #8334	; 0x208e
    51be:	6878      	ldr	r0, [r7, #4]
    51c0:	4b10      	ldr	r3, [pc, #64]	; (5204 <_osc32kctrl_init_sources+0x58>)
    51c2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    51c4:	2100      	movs	r1, #0
    51c6:	6878      	ldr	r0, [r7, #4]
    51c8:	4b0f      	ldr	r3, [pc, #60]	; (5208 <_osc32kctrl_init_sources+0x5c>)
    51ca:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    51cc:	2100      	movs	r1, #0
    51ce:	6878      	ldr	r0, [r7, #4]
    51d0:	4b0e      	ldr	r3, [pc, #56]	; (520c <_osc32kctrl_init_sources+0x60>)
    51d2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    51d4:	6878      	ldr	r0, [r7, #4]
    51d6:	4b0e      	ldr	r3, [pc, #56]	; (5210 <_osc32kctrl_init_sources+0x64>)
    51d8:	4798      	blx	r3
    51da:	4603      	mov	r3, r0
    51dc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    51de:	887b      	ldrh	r3, [r7, #2]
    51e0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    51e2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    51e6:	4619      	mov	r1, r3
    51e8:	6878      	ldr	r0, [r7, #4]
    51ea:	4b0a      	ldr	r3, [pc, #40]	; (5214 <_osc32kctrl_init_sources+0x68>)
    51ec:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    51ee:	2100      	movs	r1, #0
    51f0:	6878      	ldr	r0, [r7, #4]
    51f2:	4b09      	ldr	r3, [pc, #36]	; (5218 <_osc32kctrl_init_sources+0x6c>)
    51f4:	4798      	blx	r3
	(void)calib;
}
    51f6:	bf00      	nop
    51f8:	3708      	adds	r7, #8
    51fa:	46bd      	mov	sp, r7
    51fc:	bd80      	pop	{r7, pc}
    51fe:	bf00      	nop
    5200:	40001400 	.word	0x40001400
    5204:	0000510f 	.word	0x0000510f
    5208:	0000512d 	.word	0x0000512d
    520c:	0000514b 	.word	0x0000514b
    5210:	00005169 	.word	0x00005169
    5214:	0000518f 	.word	0x0000518f
    5218:	000050f1 	.word	0x000050f1

0000521c <hri_gclk_wait_for_sync>:
{
    521c:	b480      	push	{r7}
    521e:	b083      	sub	sp, #12
    5220:	af00      	add	r7, sp, #0
    5222:	6078      	str	r0, [r7, #4]
    5224:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5226:	bf00      	nop
    5228:	687b      	ldr	r3, [r7, #4]
    522a:	685a      	ldr	r2, [r3, #4]
    522c:	683b      	ldr	r3, [r7, #0]
    522e:	4013      	ands	r3, r2
    5230:	2b00      	cmp	r3, #0
    5232:	d1f9      	bne.n	5228 <hri_gclk_wait_for_sync+0xc>
}
    5234:	bf00      	nop
    5236:	370c      	adds	r7, #12
    5238:	46bd      	mov	sp, r7
    523a:	f85d 7b04 	ldr.w	r7, [sp], #4
    523e:	4770      	bx	lr

00005240 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5240:	b480      	push	{r7}
    5242:	b083      	sub	sp, #12
    5244:	af00      	add	r7, sp, #0
    5246:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5248:	687b      	ldr	r3, [r7, #4]
    524a:	685b      	ldr	r3, [r3, #4]
    524c:	089b      	lsrs	r3, r3, #2
    524e:	f003 0301 	and.w	r3, r3, #1
    5252:	2b00      	cmp	r3, #0
    5254:	bf14      	ite	ne
    5256:	2301      	movne	r3, #1
    5258:	2300      	moveq	r3, #0
    525a:	b2db      	uxtb	r3, r3
}
    525c:	4618      	mov	r0, r3
    525e:	370c      	adds	r7, #12
    5260:	46bd      	mov	sp, r7
    5262:	f85d 7b04 	ldr.w	r7, [sp], #4
    5266:	4770      	bx	lr

00005268 <hri_gclk_read_SYNCBUSY_reg>:
{
    5268:	b480      	push	{r7}
    526a:	b083      	sub	sp, #12
    526c:	af00      	add	r7, sp, #0
    526e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	685b      	ldr	r3, [r3, #4]
}
    5274:	4618      	mov	r0, r3
    5276:	370c      	adds	r7, #12
    5278:	46bd      	mov	sp, r7
    527a:	f85d 7b04 	ldr.w	r7, [sp], #4
    527e:	4770      	bx	lr

00005280 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5280:	b580      	push	{r7, lr}
    5282:	b086      	sub	sp, #24
    5284:	af00      	add	r7, sp, #0
    5286:	60f8      	str	r0, [r7, #12]
    5288:	460b      	mov	r3, r1
    528a:	607a      	str	r2, [r7, #4]
    528c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    528e:	7afa      	ldrb	r2, [r7, #11]
    5290:	68fb      	ldr	r3, [r7, #12]
    5292:	3208      	adds	r2, #8
    5294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5298:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    529a:	697b      	ldr	r3, [r7, #20]
    529c:	f023 030f 	bic.w	r3, r3, #15
    52a0:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	f003 030f 	and.w	r3, r3, #15
    52a8:	697a      	ldr	r2, [r7, #20]
    52aa:	4313      	orrs	r3, r2
    52ac:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    52ae:	7afa      	ldrb	r2, [r7, #11]
    52b0:	68fb      	ldr	r3, [r7, #12]
    52b2:	3208      	adds	r2, #8
    52b4:	6979      	ldr	r1, [r7, #20]
    52b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    52ba:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    52be:	68f8      	ldr	r0, [r7, #12]
    52c0:	4b02      	ldr	r3, [pc, #8]	; (52cc <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    52c2:	4798      	blx	r3
}
    52c4:	bf00      	nop
    52c6:	3718      	adds	r7, #24
    52c8:	46bd      	mov	sp, r7
    52ca:	bd80      	pop	{r7, pc}
    52cc:	0000521d 	.word	0x0000521d

000052d0 <hri_gclk_write_PCHCTRL_reg>:
{
    52d0:	b480      	push	{r7}
    52d2:	b085      	sub	sp, #20
    52d4:	af00      	add	r7, sp, #0
    52d6:	60f8      	str	r0, [r7, #12]
    52d8:	460b      	mov	r3, r1
    52da:	607a      	str	r2, [r7, #4]
    52dc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    52de:	7afa      	ldrb	r2, [r7, #11]
    52e0:	68fb      	ldr	r3, [r7, #12]
    52e2:	3220      	adds	r2, #32
    52e4:	6879      	ldr	r1, [r7, #4]
    52e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    52ea:	bf00      	nop
    52ec:	3714      	adds	r7, #20
    52ee:	46bd      	mov	sp, r7
    52f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    52f4:	4770      	bx	lr

000052f6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    52f6:	b480      	push	{r7}
    52f8:	b085      	sub	sp, #20
    52fa:	af00      	add	r7, sp, #0
    52fc:	60f8      	str	r0, [r7, #12]
    52fe:	460b      	mov	r3, r1
    5300:	607a      	str	r2, [r7, #4]
    5302:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5304:	bf00      	nop
    5306:	7afa      	ldrb	r2, [r7, #11]
    5308:	68f9      	ldr	r1, [r7, #12]
    530a:	4613      	mov	r3, r2
    530c:	009b      	lsls	r3, r3, #2
    530e:	4413      	add	r3, r2
    5310:	009b      	lsls	r3, r3, #2
    5312:	440b      	add	r3, r1
    5314:	333c      	adds	r3, #60	; 0x3c
    5316:	681a      	ldr	r2, [r3, #0]
    5318:	687b      	ldr	r3, [r7, #4]
    531a:	4013      	ands	r3, r2
    531c:	2b00      	cmp	r3, #0
    531e:	d1f2      	bne.n	5306 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5320:	bf00      	nop
    5322:	3714      	adds	r7, #20
    5324:	46bd      	mov	sp, r7
    5326:	f85d 7b04 	ldr.w	r7, [sp], #4
    532a:	4770      	bx	lr

0000532c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    532c:	b480      	push	{r7}
    532e:	b083      	sub	sp, #12
    5330:	af00      	add	r7, sp, #0
    5332:	6078      	str	r0, [r7, #4]
    5334:	460b      	mov	r3, r1
    5336:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5338:	78fa      	ldrb	r2, [r7, #3]
    533a:	6879      	ldr	r1, [r7, #4]
    533c:	4613      	mov	r3, r2
    533e:	009b      	lsls	r3, r3, #2
    5340:	4413      	add	r3, r2
    5342:	009b      	lsls	r3, r3, #2
    5344:	440b      	add	r3, r1
    5346:	3340      	adds	r3, #64	; 0x40
    5348:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    534a:	f003 0301 	and.w	r3, r3, #1
    534e:	2b00      	cmp	r3, #0
    5350:	bf14      	ite	ne
    5352:	2301      	movne	r3, #1
    5354:	2300      	moveq	r3, #0
    5356:	b2db      	uxtb	r3, r3
}
    5358:	4618      	mov	r0, r3
    535a:	370c      	adds	r7, #12
    535c:	46bd      	mov	sp, r7
    535e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5362:	4770      	bx	lr

00005364 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5364:	b480      	push	{r7}
    5366:	b083      	sub	sp, #12
    5368:	af00      	add	r7, sp, #0
    536a:	6078      	str	r0, [r7, #4]
    536c:	460b      	mov	r3, r1
    536e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5370:	78fa      	ldrb	r2, [r7, #3]
    5372:	6879      	ldr	r1, [r7, #4]
    5374:	4613      	mov	r3, r2
    5376:	009b      	lsls	r3, r3, #2
    5378:	4413      	add	r3, r2
    537a:	009b      	lsls	r3, r3, #2
    537c:	440b      	add	r3, r1
    537e:	3340      	adds	r3, #64	; 0x40
    5380:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5382:	085b      	lsrs	r3, r3, #1
    5384:	f003 0301 	and.w	r3, r3, #1
    5388:	2b00      	cmp	r3, #0
    538a:	bf14      	ite	ne
    538c:	2301      	movne	r3, #1
    538e:	2300      	moveq	r3, #0
    5390:	b2db      	uxtb	r3, r3
}
    5392:	4618      	mov	r0, r3
    5394:	370c      	adds	r7, #12
    5396:	46bd      	mov	sp, r7
    5398:	f85d 7b04 	ldr.w	r7, [sp], #4
    539c:	4770      	bx	lr
	...

000053a0 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    53a0:	b580      	push	{r7, lr}
    53a2:	b082      	sub	sp, #8
    53a4:	af00      	add	r7, sp, #0
    53a6:	6078      	str	r0, [r7, #4]
    53a8:	460b      	mov	r3, r1
    53aa:	70fb      	strb	r3, [r7, #3]
    53ac:	4613      	mov	r3, r2
    53ae:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    53b0:	78fa      	ldrb	r2, [r7, #3]
    53b2:	6879      	ldr	r1, [r7, #4]
    53b4:	4613      	mov	r3, r2
    53b6:	009b      	lsls	r3, r3, #2
    53b8:	4413      	add	r3, r2
    53ba:	009b      	lsls	r3, r3, #2
    53bc:	440b      	add	r3, r1
    53be:	3330      	adds	r3, #48	; 0x30
    53c0:	78ba      	ldrb	r2, [r7, #2]
    53c2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    53c4:	78fb      	ldrb	r3, [r7, #3]
    53c6:	2202      	movs	r2, #2
    53c8:	4619      	mov	r1, r3
    53ca:	6878      	ldr	r0, [r7, #4]
    53cc:	4b02      	ldr	r3, [pc, #8]	; (53d8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    53ce:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    53d0:	bf00      	nop
    53d2:	3708      	adds	r7, #8
    53d4:	46bd      	mov	sp, r7
    53d6:	bd80      	pop	{r7, pc}
    53d8:	000052f7 	.word	0x000052f7

000053dc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    53dc:	b580      	push	{r7, lr}
    53de:	b084      	sub	sp, #16
    53e0:	af00      	add	r7, sp, #0
    53e2:	60f8      	str	r0, [r7, #12]
    53e4:	460b      	mov	r3, r1
    53e6:	607a      	str	r2, [r7, #4]
    53e8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    53ea:	7afa      	ldrb	r2, [r7, #11]
    53ec:	68f9      	ldr	r1, [r7, #12]
    53ee:	4613      	mov	r3, r2
    53f0:	009b      	lsls	r3, r3, #2
    53f2:	4413      	add	r3, r2
    53f4:	009b      	lsls	r3, r3, #2
    53f6:	440b      	add	r3, r1
    53f8:	3334      	adds	r3, #52	; 0x34
    53fa:	687a      	ldr	r2, [r7, #4]
    53fc:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    53fe:	7afb      	ldrb	r3, [r7, #11]
    5400:	2206      	movs	r2, #6
    5402:	4619      	mov	r1, r3
    5404:	68f8      	ldr	r0, [r7, #12]
    5406:	4b03      	ldr	r3, [pc, #12]	; (5414 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5408:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    540a:	bf00      	nop
    540c:	3710      	adds	r7, #16
    540e:	46bd      	mov	sp, r7
    5410:	bd80      	pop	{r7, pc}
    5412:	bf00      	nop
    5414:	000052f7 	.word	0x000052f7

00005418 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5418:	b480      	push	{r7}
    541a:	b085      	sub	sp, #20
    541c:	af00      	add	r7, sp, #0
    541e:	60f8      	str	r0, [r7, #12]
    5420:	460b      	mov	r3, r1
    5422:	607a      	str	r2, [r7, #4]
    5424:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5426:	7afa      	ldrb	r2, [r7, #11]
    5428:	68f9      	ldr	r1, [r7, #12]
    542a:	4613      	mov	r3, r2
    542c:	009b      	lsls	r3, r3, #2
    542e:	4413      	add	r3, r2
    5430:	009b      	lsls	r3, r3, #2
    5432:	440b      	add	r3, r1
    5434:	3338      	adds	r3, #56	; 0x38
    5436:	687a      	ldr	r2, [r7, #4]
    5438:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    543a:	bf00      	nop
    543c:	3714      	adds	r7, #20
    543e:	46bd      	mov	sp, r7
    5440:	f85d 7b04 	ldr.w	r7, [sp], #4
    5444:	4770      	bx	lr

00005446 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5446:	b480      	push	{r7}
    5448:	b083      	sub	sp, #12
    544a:	af00      	add	r7, sp, #0
    544c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    544e:	687b      	ldr	r3, [r7, #4]
    5450:	691b      	ldr	r3, [r3, #16]
    5452:	085b      	lsrs	r3, r3, #1
    5454:	f003 0301 	and.w	r3, r3, #1
    5458:	2b00      	cmp	r3, #0
    545a:	bf14      	ite	ne
    545c:	2301      	movne	r3, #1
    545e:	2300      	moveq	r3, #0
    5460:	b2db      	uxtb	r3, r3
}
    5462:	4618      	mov	r0, r3
    5464:	370c      	adds	r7, #12
    5466:	46bd      	mov	sp, r7
    5468:	f85d 7b04 	ldr.w	r7, [sp], #4
    546c:	4770      	bx	lr

0000546e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    546e:	b480      	push	{r7}
    5470:	b083      	sub	sp, #12
    5472:	af00      	add	r7, sp, #0
    5474:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5476:	687b      	ldr	r3, [r7, #4]
    5478:	691b      	ldr	r3, [r3, #16]
    547a:	0a1b      	lsrs	r3, r3, #8
    547c:	f003 0301 	and.w	r3, r3, #1
    5480:	2b00      	cmp	r3, #0
    5482:	bf14      	ite	ne
    5484:	2301      	movne	r3, #1
    5486:	2300      	moveq	r3, #0
    5488:	b2db      	uxtb	r3, r3
}
    548a:	4618      	mov	r0, r3
    548c:	370c      	adds	r7, #12
    548e:	46bd      	mov	sp, r7
    5490:	f85d 7b04 	ldr.w	r7, [sp], #4
    5494:	4770      	bx	lr

00005496 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5496:	b480      	push	{r7}
    5498:	b085      	sub	sp, #20
    549a:	af00      	add	r7, sp, #0
    549c:	6078      	str	r0, [r7, #4]
    549e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    54a0:	687b      	ldr	r3, [r7, #4]
    54a2:	691b      	ldr	r3, [r3, #16]
    54a4:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    54a6:	68fa      	ldr	r2, [r7, #12]
    54a8:	683b      	ldr	r3, [r7, #0]
    54aa:	4013      	ands	r3, r2
    54ac:	60fb      	str	r3, [r7, #12]
	return tmp;
    54ae:	68fb      	ldr	r3, [r7, #12]
}
    54b0:	4618      	mov	r0, r3
    54b2:	3714      	adds	r7, #20
    54b4:	46bd      	mov	sp, r7
    54b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ba:	4770      	bx	lr

000054bc <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    54bc:	b480      	push	{r7}
    54be:	b085      	sub	sp, #20
    54c0:	af00      	add	r7, sp, #0
    54c2:	60f8      	str	r0, [r7, #12]
    54c4:	460b      	mov	r3, r1
    54c6:	607a      	str	r2, [r7, #4]
    54c8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    54ca:	7afb      	ldrb	r3, [r7, #11]
    54cc:	68fa      	ldr	r2, [r7, #12]
    54ce:	3304      	adds	r3, #4
    54d0:	009b      	lsls	r3, r3, #2
    54d2:	4413      	add	r3, r2
    54d4:	687a      	ldr	r2, [r7, #4]
    54d6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    54d8:	bf00      	nop
    54da:	3714      	adds	r7, #20
    54dc:	46bd      	mov	sp, r7
    54de:	f85d 7b04 	ldr.w	r7, [sp], #4
    54e2:	4770      	bx	lr

000054e4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    54e4:	b480      	push	{r7}
    54e6:	b083      	sub	sp, #12
    54e8:	af00      	add	r7, sp, #0
    54ea:	6078      	str	r0, [r7, #4]
    54ec:	460b      	mov	r3, r1
    54ee:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	78fa      	ldrb	r2, [r7, #3]
    54f4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    54f6:	bf00      	nop
    54f8:	370c      	adds	r7, #12
    54fa:	46bd      	mov	sp, r7
    54fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5500:	4770      	bx	lr

00005502 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5502:	b480      	push	{r7}
    5504:	b085      	sub	sp, #20
    5506:	af00      	add	r7, sp, #0
    5508:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    550a:	687b      	ldr	r3, [r7, #4]
    550c:	f893 3020 	ldrb.w	r3, [r3, #32]
    5510:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5512:	7bfb      	ldrb	r3, [r7, #15]
    5514:	f003 0301 	and.w	r3, r3, #1
    5518:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    551a:	7bfb      	ldrb	r3, [r7, #15]
    551c:	2b00      	cmp	r3, #0
    551e:	bf14      	ite	ne
    5520:	2301      	movne	r3, #1
    5522:	2300      	moveq	r3, #0
    5524:	b2db      	uxtb	r3, r3
}
    5526:	4618      	mov	r0, r3
    5528:	3714      	adds	r7, #20
    552a:	46bd      	mov	sp, r7
    552c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5530:	4770      	bx	lr

00005532 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5532:	b480      	push	{r7}
    5534:	b083      	sub	sp, #12
    5536:	af00      	add	r7, sp, #0
    5538:	6078      	str	r0, [r7, #4]
    553a:	460b      	mov	r3, r1
    553c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    553e:	687b      	ldr	r3, [r7, #4]
    5540:	78fa      	ldrb	r2, [r7, #3]
    5542:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5546:	bf00      	nop
    5548:	370c      	adds	r7, #12
    554a:	46bd      	mov	sp, r7
    554c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5550:	4770      	bx	lr

00005552 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5552:	b480      	push	{r7}
    5554:	b083      	sub	sp, #12
    5556:	af00      	add	r7, sp, #0
    5558:	6078      	str	r0, [r7, #4]
    555a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    555c:	687b      	ldr	r3, [r7, #4]
    555e:	683a      	ldr	r2, [r7, #0]
    5560:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5562:	bf00      	nop
    5564:	370c      	adds	r7, #12
    5566:	46bd      	mov	sp, r7
    5568:	f85d 7b04 	ldr.w	r7, [sp], #4
    556c:	4770      	bx	lr

0000556e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    556e:	b480      	push	{r7}
    5570:	b083      	sub	sp, #12
    5572:	af00      	add	r7, sp, #0
    5574:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5576:	687b      	ldr	r3, [r7, #4]
    5578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    557a:	4618      	mov	r0, r3
    557c:	370c      	adds	r7, #12
    557e:	46bd      	mov	sp, r7
    5580:	f85d 7b04 	ldr.w	r7, [sp], #4
    5584:	4770      	bx	lr

00005586 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5586:	b480      	push	{r7}
    5588:	b083      	sub	sp, #12
    558a:	af00      	add	r7, sp, #0
    558c:	6078      	str	r0, [r7, #4]
    558e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5590:	687b      	ldr	r3, [r7, #4]
    5592:	683a      	ldr	r2, [r7, #0]
    5594:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5596:	bf00      	nop
    5598:	370c      	adds	r7, #12
    559a:	46bd      	mov	sp, r7
    559c:	f85d 7b04 	ldr.w	r7, [sp], #4
    55a0:	4770      	bx	lr

000055a2 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    55a2:	b480      	push	{r7}
    55a4:	b085      	sub	sp, #20
    55a6:	af00      	add	r7, sp, #0
    55a8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    55aa:	687b      	ldr	r3, [r7, #4]
    55ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    55b0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    55b2:	7bfb      	ldrb	r3, [r7, #15]
    55b4:	085b      	lsrs	r3, r3, #1
    55b6:	b2db      	uxtb	r3, r3
    55b8:	f003 0301 	and.w	r3, r3, #1
    55bc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    55be:	7bfb      	ldrb	r3, [r7, #15]
    55c0:	2b00      	cmp	r3, #0
    55c2:	bf14      	ite	ne
    55c4:	2301      	movne	r3, #1
    55c6:	2300      	moveq	r3, #0
    55c8:	b2db      	uxtb	r3, r3
}
    55ca:	4618      	mov	r0, r3
    55cc:	3714      	adds	r7, #20
    55ce:	46bd      	mov	sp, r7
    55d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    55d4:	4770      	bx	lr

000055d6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    55d6:	b480      	push	{r7}
    55d8:	b085      	sub	sp, #20
    55da:	af00      	add	r7, sp, #0
    55dc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    55de:	687b      	ldr	r3, [r7, #4]
    55e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    55e4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    55e6:	7bfb      	ldrb	r3, [r7, #15]
    55e8:	089b      	lsrs	r3, r3, #2
    55ea:	b2db      	uxtb	r3, r3
    55ec:	f003 0301 	and.w	r3, r3, #1
    55f0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    55f2:	7bfb      	ldrb	r3, [r7, #15]
    55f4:	2b00      	cmp	r3, #0
    55f6:	bf14      	ite	ne
    55f8:	2301      	movne	r3, #1
    55fa:	2300      	moveq	r3, #0
    55fc:	b2db      	uxtb	r3, r3
}
    55fe:	4618      	mov	r0, r3
    5600:	3714      	adds	r7, #20
    5602:	46bd      	mov	sp, r7
    5604:	f85d 7b04 	ldr.w	r7, [sp], #4
    5608:	4770      	bx	lr

0000560a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    560a:	b480      	push	{r7}
    560c:	b085      	sub	sp, #20
    560e:	af00      	add	r7, sp, #0
    5610:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5612:	687b      	ldr	r3, [r7, #4]
    5614:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5618:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    561a:	7bfb      	ldrb	r3, [r7, #15]
    561c:	08db      	lsrs	r3, r3, #3
    561e:	b2db      	uxtb	r3, r3
    5620:	f003 0301 	and.w	r3, r3, #1
    5624:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5626:	7bfb      	ldrb	r3, [r7, #15]
    5628:	2b00      	cmp	r3, #0
    562a:	bf14      	ite	ne
    562c:	2301      	movne	r3, #1
    562e:	2300      	moveq	r3, #0
    5630:	b2db      	uxtb	r3, r3
}
    5632:	4618      	mov	r0, r3
    5634:	3714      	adds	r7, #20
    5636:	46bd      	mov	sp, r7
    5638:	f85d 7b04 	ldr.w	r7, [sp], #4
    563c:	4770      	bx	lr

0000563e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    563e:	b480      	push	{r7}
    5640:	b085      	sub	sp, #20
    5642:	af00      	add	r7, sp, #0
    5644:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5646:	687b      	ldr	r3, [r7, #4]
    5648:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    564c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    564e:	7bfb      	ldrb	r3, [r7, #15]
    5650:	091b      	lsrs	r3, r3, #4
    5652:	b2db      	uxtb	r3, r3
    5654:	f003 0301 	and.w	r3, r3, #1
    5658:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    565a:	7bfb      	ldrb	r3, [r7, #15]
    565c:	2b00      	cmp	r3, #0
    565e:	bf14      	ite	ne
    5660:	2301      	movne	r3, #1
    5662:	2300      	moveq	r3, #0
    5664:	b2db      	uxtb	r3, r3
}
    5666:	4618      	mov	r0, r3
    5668:	3714      	adds	r7, #20
    566a:	46bd      	mov	sp, r7
    566c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5670:	4770      	bx	lr
	...

00005674 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5674:	b580      	push	{r7, lr}
    5676:	b082      	sub	sp, #8
    5678:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    567a:	4b0a      	ldr	r3, [pc, #40]	; (56a4 <_oscctrl_init_sources+0x30>)
    567c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    567e:	4a0a      	ldr	r2, [pc, #40]	; (56a8 <_oscctrl_init_sources+0x34>)
    5680:	2101      	movs	r1, #1
    5682:	6878      	ldr	r0, [r7, #4]
    5684:	4b09      	ldr	r3, [pc, #36]	; (56ac <_oscctrl_init_sources+0x38>)
    5686:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5688:	bf00      	nop
    568a:	6878      	ldr	r0, [r7, #4]
    568c:	4b08      	ldr	r3, [pc, #32]	; (56b0 <_oscctrl_init_sources+0x3c>)
    568e:	4798      	blx	r3
    5690:	4603      	mov	r3, r0
    5692:	f083 0301 	eor.w	r3, r3, #1
    5696:	b2db      	uxtb	r3, r3
    5698:	2b00      	cmp	r3, #0
    569a:	d1f6      	bne.n	568a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    569c:	bf00      	nop
    569e:	3708      	adds	r7, #8
    56a0:	46bd      	mov	sp, r7
    56a2:	bd80      	pop	{r7, pc}
    56a4:	40001000 	.word	0x40001000
    56a8:	03002646 	.word	0x03002646
    56ac:	000054bd 	.word	0x000054bd
    56b0:	00005447 	.word	0x00005447

000056b4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    56b4:	b580      	push	{r7, lr}
    56b6:	b084      	sub	sp, #16
    56b8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    56ba:	4b6b      	ldr	r3, [pc, #428]	; (5868 <_oscctrl_init_referenced_generators+0x1b4>)
    56bc:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    56be:	2204      	movs	r2, #4
    56c0:	2100      	movs	r1, #0
    56c2:	486a      	ldr	r0, [pc, #424]	; (586c <_oscctrl_init_referenced_generators+0x1b8>)
    56c4:	4b6a      	ldr	r3, [pc, #424]	; (5870 <_oscctrl_init_referenced_generators+0x1bc>)
    56c6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    56c8:	bf00      	nop
    56ca:	4868      	ldr	r0, [pc, #416]	; (586c <_oscctrl_init_referenced_generators+0x1b8>)
    56cc:	4b69      	ldr	r3, [pc, #420]	; (5874 <_oscctrl_init_referenced_generators+0x1c0>)
    56ce:	4798      	blx	r3
    56d0:	4603      	mov	r3, r0
    56d2:	2b00      	cmp	r3, #0
    56d4:	d1f9      	bne.n	56ca <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    56d6:	2100      	movs	r1, #0
    56d8:	68f8      	ldr	r0, [r7, #12]
    56da:	4b67      	ldr	r3, [pc, #412]	; (5878 <_oscctrl_init_referenced_generators+0x1c4>)
    56dc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    56de:	4967      	ldr	r1, [pc, #412]	; (587c <_oscctrl_init_referenced_generators+0x1c8>)
    56e0:	68f8      	ldr	r0, [r7, #12]
    56e2:	4b67      	ldr	r3, [pc, #412]	; (5880 <_oscctrl_init_referenced_generators+0x1cc>)
    56e4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    56e6:	bf00      	nop
    56e8:	68f8      	ldr	r0, [r7, #12]
    56ea:	4b66      	ldr	r3, [pc, #408]	; (5884 <_oscctrl_init_referenced_generators+0x1d0>)
    56ec:	4798      	blx	r3
    56ee:	4603      	mov	r3, r0
    56f0:	2b00      	cmp	r3, #0
    56f2:	d1f9      	bne.n	56e8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    56f4:	2100      	movs	r1, #0
    56f6:	68f8      	ldr	r0, [r7, #12]
    56f8:	4b63      	ldr	r3, [pc, #396]	; (5888 <_oscctrl_init_referenced_generators+0x1d4>)
    56fa:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    56fc:	bf00      	nop
    56fe:	68f8      	ldr	r0, [r7, #12]
    5700:	4b62      	ldr	r3, [pc, #392]	; (588c <_oscctrl_init_referenced_generators+0x1d8>)
    5702:	4798      	blx	r3
    5704:	4603      	mov	r3, r0
    5706:	2b00      	cmp	r3, #0
    5708:	d1f9      	bne.n	56fe <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    570a:	2302      	movs	r3, #2
    570c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    570e:	7afb      	ldrb	r3, [r7, #11]
    5710:	4619      	mov	r1, r3
    5712:	68f8      	ldr	r0, [r7, #12]
    5714:	4b58      	ldr	r3, [pc, #352]	; (5878 <_oscctrl_init_referenced_generators+0x1c4>)
    5716:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5718:	bf00      	nop
    571a:	68f8      	ldr	r0, [r7, #12]
    571c:	4b5c      	ldr	r3, [pc, #368]	; (5890 <_oscctrl_init_referenced_generators+0x1dc>)
    571e:	4798      	blx	r3
    5720:	4603      	mov	r3, r0
    5722:	2b00      	cmp	r3, #0
    5724:	d1f9      	bne.n	571a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5726:	68f8      	ldr	r0, [r7, #12]
    5728:	4b5a      	ldr	r3, [pc, #360]	; (5894 <_oscctrl_init_referenced_generators+0x1e0>)
    572a:	4798      	blx	r3
    572c:	4603      	mov	r3, r0
    572e:	4619      	mov	r1, r3
    5730:	68f8      	ldr	r0, [r7, #12]
    5732:	4b59      	ldr	r3, [pc, #356]	; (5898 <_oscctrl_init_referenced_generators+0x1e4>)
    5734:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5736:	bf00      	nop
    5738:	68f8      	ldr	r0, [r7, #12]
    573a:	4b58      	ldr	r3, [pc, #352]	; (589c <_oscctrl_init_referenced_generators+0x1e8>)
    573c:	4798      	blx	r3
    573e:	4603      	mov	r3, r0
    5740:	2b00      	cmp	r3, #0
    5742:	d1f9      	bne.n	5738 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5744:	2319      	movs	r3, #25
    5746:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5748:	7afb      	ldrb	r3, [r7, #11]
    574a:	4619      	mov	r1, r3
    574c:	68f8      	ldr	r0, [r7, #12]
    574e:	4b4e      	ldr	r3, [pc, #312]	; (5888 <_oscctrl_init_referenced_generators+0x1d4>)
    5750:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5752:	bf00      	nop
    5754:	68f8      	ldr	r0, [r7, #12]
    5756:	4b4d      	ldr	r3, [pc, #308]	; (588c <_oscctrl_init_referenced_generators+0x1d8>)
    5758:	4798      	blx	r3
    575a:	4603      	mov	r3, r0
    575c:	2b00      	cmp	r3, #0
    575e:	d1f9      	bne.n	5754 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5760:	2245      	movs	r2, #69	; 0x45
    5762:	2101      	movs	r1, #1
    5764:	4841      	ldr	r0, [pc, #260]	; (586c <_oscctrl_init_referenced_generators+0x1b8>)
    5766:	4b4e      	ldr	r3, [pc, #312]	; (58a0 <_oscctrl_init_referenced_generators+0x1ec>)
    5768:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    576a:	223b      	movs	r2, #59	; 0x3b
    576c:	2100      	movs	r1, #0
    576e:	68f8      	ldr	r0, [r7, #12]
    5770:	4b4c      	ldr	r3, [pc, #304]	; (58a4 <_oscctrl_init_referenced_generators+0x1f0>)
    5772:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5774:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5778:	2100      	movs	r1, #0
    577a:	68f8      	ldr	r0, [r7, #12]
    577c:	4b4a      	ldr	r3, [pc, #296]	; (58a8 <_oscctrl_init_referenced_generators+0x1f4>)
    577e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5780:	2242      	movs	r2, #66	; 0x42
    5782:	2100      	movs	r1, #0
    5784:	68f8      	ldr	r0, [r7, #12]
    5786:	4b49      	ldr	r3, [pc, #292]	; (58ac <_oscctrl_init_referenced_generators+0x1f8>)
    5788:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    578a:	4a49      	ldr	r2, [pc, #292]	; (58b0 <_oscctrl_init_referenced_generators+0x1fc>)
    578c:	2101      	movs	r1, #1
    578e:	68f8      	ldr	r0, [r7, #12]
    5790:	4b44      	ldr	r3, [pc, #272]	; (58a4 <_oscctrl_init_referenced_generators+0x1f0>)
    5792:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5794:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5798:	2101      	movs	r1, #1
    579a:	68f8      	ldr	r0, [r7, #12]
    579c:	4b42      	ldr	r3, [pc, #264]	; (58a8 <_oscctrl_init_referenced_generators+0x1f4>)
    579e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    57a0:	2202      	movs	r2, #2
    57a2:	2101      	movs	r1, #1
    57a4:	68f8      	ldr	r0, [r7, #12]
    57a6:	4b41      	ldr	r3, [pc, #260]	; (58ac <_oscctrl_init_referenced_generators+0x1f8>)
    57a8:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    57aa:	68f8      	ldr	r0, [r7, #12]
    57ac:	4b41      	ldr	r3, [pc, #260]	; (58b4 <_oscctrl_init_referenced_generators+0x200>)
    57ae:	4798      	blx	r3
    57b0:	4603      	mov	r3, r0
    57b2:	2b00      	cmp	r3, #0
    57b4:	d00c      	beq.n	57d0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    57b6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    57ba:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    57bc:	bf00      	nop
    57be:	6879      	ldr	r1, [r7, #4]
    57c0:	68f8      	ldr	r0, [r7, #12]
    57c2:	4b3d      	ldr	r3, [pc, #244]	; (58b8 <_oscctrl_init_referenced_generators+0x204>)
    57c4:	4798      	blx	r3
    57c6:	4602      	mov	r2, r0
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	429a      	cmp	r2, r3
    57cc:	d1f7      	bne.n	57be <_oscctrl_init_referenced_generators+0x10a>
    57ce:	e009      	b.n	57e4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    57d0:	bf00      	nop
    57d2:	68f8      	ldr	r0, [r7, #12]
    57d4:	4b39      	ldr	r3, [pc, #228]	; (58bc <_oscctrl_init_referenced_generators+0x208>)
    57d6:	4798      	blx	r3
    57d8:	4603      	mov	r3, r0
    57da:	f083 0301 	eor.w	r3, r3, #1
    57de:	b2db      	uxtb	r3, r3
    57e0:	2b00      	cmp	r3, #0
    57e2:	d1f6      	bne.n	57d2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    57e4:	bf00      	nop
    57e6:	2100      	movs	r1, #0
    57e8:	68f8      	ldr	r0, [r7, #12]
    57ea:	4b35      	ldr	r3, [pc, #212]	; (58c0 <_oscctrl_init_referenced_generators+0x20c>)
    57ec:	4798      	blx	r3
    57ee:	4603      	mov	r3, r0
    57f0:	f083 0301 	eor.w	r3, r3, #1
    57f4:	b2db      	uxtb	r3, r3
    57f6:	2b00      	cmp	r3, #0
    57f8:	d009      	beq.n	580e <_oscctrl_init_referenced_generators+0x15a>
    57fa:	2100      	movs	r1, #0
    57fc:	68f8      	ldr	r0, [r7, #12]
    57fe:	4b31      	ldr	r3, [pc, #196]	; (58c4 <_oscctrl_init_referenced_generators+0x210>)
    5800:	4798      	blx	r3
    5802:	4603      	mov	r3, r0
    5804:	f083 0301 	eor.w	r3, r3, #1
    5808:	b2db      	uxtb	r3, r3
    580a:	2b00      	cmp	r3, #0
    580c:	d1eb      	bne.n	57e6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    580e:	bf00      	nop
    5810:	2101      	movs	r1, #1
    5812:	68f8      	ldr	r0, [r7, #12]
    5814:	4b2a      	ldr	r3, [pc, #168]	; (58c0 <_oscctrl_init_referenced_generators+0x20c>)
    5816:	4798      	blx	r3
    5818:	4603      	mov	r3, r0
    581a:	f083 0301 	eor.w	r3, r3, #1
    581e:	b2db      	uxtb	r3, r3
    5820:	2b00      	cmp	r3, #0
    5822:	d009      	beq.n	5838 <_oscctrl_init_referenced_generators+0x184>
    5824:	2101      	movs	r1, #1
    5826:	68f8      	ldr	r0, [r7, #12]
    5828:	4b26      	ldr	r3, [pc, #152]	; (58c4 <_oscctrl_init_referenced_generators+0x210>)
    582a:	4798      	blx	r3
    582c:	4603      	mov	r3, r0
    582e:	f083 0301 	eor.w	r3, r3, #1
    5832:	b2db      	uxtb	r3, r3
    5834:	2b00      	cmp	r3, #0
    5836:	d1eb      	bne.n	5810 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5838:	bf00      	nop
    583a:	480c      	ldr	r0, [pc, #48]	; (586c <_oscctrl_init_referenced_generators+0x1b8>)
    583c:	4b22      	ldr	r3, [pc, #136]	; (58c8 <_oscctrl_init_referenced_generators+0x214>)
    583e:	4798      	blx	r3
    5840:	4603      	mov	r3, r0
    5842:	2b00      	cmp	r3, #0
    5844:	d1f9      	bne.n	583a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5846:	2207      	movs	r2, #7
    5848:	2100      	movs	r1, #0
    584a:	4808      	ldr	r0, [pc, #32]	; (586c <_oscctrl_init_referenced_generators+0x1b8>)
    584c:	4b08      	ldr	r3, [pc, #32]	; (5870 <_oscctrl_init_referenced_generators+0x1bc>)
    584e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5850:	bf00      	nop
    5852:	4806      	ldr	r0, [pc, #24]	; (586c <_oscctrl_init_referenced_generators+0x1b8>)
    5854:	4b07      	ldr	r3, [pc, #28]	; (5874 <_oscctrl_init_referenced_generators+0x1c0>)
    5856:	4798      	blx	r3
    5858:	4603      	mov	r3, r0
    585a:	2b00      	cmp	r3, #0
    585c:	d1f9      	bne.n	5852 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    585e:	bf00      	nop
    5860:	3710      	adds	r7, #16
    5862:	46bd      	mov	sp, r7
    5864:	bd80      	pop	{r7, pc}
    5866:	bf00      	nop
    5868:	40001000 	.word	0x40001000
    586c:	40001c00 	.word	0x40001c00
    5870:	00005281 	.word	0x00005281
    5874:	00005241 	.word	0x00005241
    5878:	000054e5 	.word	0x000054e5
    587c:	0401bb80 	.word	0x0401bb80
    5880:	00005587 	.word	0x00005587
    5884:	0000563f 	.word	0x0000563f
    5888:	00005533 	.word	0x00005533
    588c:	000055d7 	.word	0x000055d7
    5890:	000055a3 	.word	0x000055a3
    5894:	0000556f 	.word	0x0000556f
    5898:	00005553 	.word	0x00005553
    589c:	0000560b 	.word	0x0000560b
    58a0:	000052d1 	.word	0x000052d1
    58a4:	000053dd 	.word	0x000053dd
    58a8:	00005419 	.word	0x00005419
    58ac:	000053a1 	.word	0x000053a1
    58b0:	000407a0 	.word	0x000407a0
    58b4:	00005503 	.word	0x00005503
    58b8:	00005497 	.word	0x00005497
    58bc:	0000546f 	.word	0x0000546f
    58c0:	0000532d 	.word	0x0000532d
    58c4:	00005365 	.word	0x00005365
    58c8:	00005269 	.word	0x00005269

000058cc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    58cc:	b480      	push	{r7}
    58ce:	b083      	sub	sp, #12
    58d0:	af00      	add	r7, sp, #0
    58d2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	69db      	ldr	r3, [r3, #28]
    58d8:	0a9b      	lsrs	r3, r3, #10
    58da:	f003 0301 	and.w	r3, r3, #1
    58de:	2b00      	cmp	r3, #0
    58e0:	bf14      	ite	ne
    58e2:	2301      	movne	r3, #1
    58e4:	2300      	moveq	r3, #0
    58e6:	b2db      	uxtb	r3, r3
}
    58e8:	4618      	mov	r0, r3
    58ea:	370c      	adds	r7, #12
    58ec:	46bd      	mov	sp, r7
    58ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    58f2:	4770      	bx	lr

000058f4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    58f4:	b480      	push	{r7}
    58f6:	b083      	sub	sp, #12
    58f8:	af00      	add	r7, sp, #0
    58fa:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    58fc:	687b      	ldr	r3, [r7, #4]
    58fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5902:	61da      	str	r2, [r3, #28]
}
    5904:	bf00      	nop
    5906:	370c      	adds	r7, #12
    5908:	46bd      	mov	sp, r7
    590a:	f85d 7b04 	ldr.w	r7, [sp], #4
    590e:	4770      	bx	lr

00005910 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5910:	b480      	push	{r7}
    5912:	b083      	sub	sp, #12
    5914:	af00      	add	r7, sp, #0
    5916:	6078      	str	r0, [r7, #4]
    5918:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    591a:	687b      	ldr	r3, [r7, #4]
    591c:	683a      	ldr	r2, [r7, #0]
    591e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5920:	bf00      	nop
    5922:	370c      	adds	r7, #12
    5924:	46bd      	mov	sp, r7
    5926:	f85d 7b04 	ldr.w	r7, [sp], #4
    592a:	4770      	bx	lr

0000592c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    592c:	b480      	push	{r7}
    592e:	b083      	sub	sp, #12
    5930:	af00      	add	r7, sp, #0
    5932:	6078      	str	r0, [r7, #4]
    5934:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5936:	687b      	ldr	r3, [r7, #4]
    5938:	683a      	ldr	r2, [r7, #0]
    593a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    593c:	bf00      	nop
    593e:	370c      	adds	r7, #12
    5940:	46bd      	mov	sp, r7
    5942:	f85d 7b04 	ldr.w	r7, [sp], #4
    5946:	4770      	bx	lr

00005948 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5948:	b480      	push	{r7}
    594a:	b083      	sub	sp, #12
    594c:	af00      	add	r7, sp, #0
    594e:	6078      	str	r0, [r7, #4]
    5950:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5952:	687b      	ldr	r3, [r7, #4]
    5954:	683a      	ldr	r2, [r7, #0]
    5956:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5958:	bf00      	nop
    595a:	370c      	adds	r7, #12
    595c:	46bd      	mov	sp, r7
    595e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5962:	4770      	bx	lr

00005964 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5964:	b480      	push	{r7}
    5966:	b083      	sub	sp, #12
    5968:	af00      	add	r7, sp, #0
    596a:	6078      	str	r0, [r7, #4]
    596c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    596e:	687b      	ldr	r3, [r7, #4]
    5970:	683a      	ldr	r2, [r7, #0]
    5972:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5974:	bf00      	nop
    5976:	370c      	adds	r7, #12
    5978:	46bd      	mov	sp, r7
    597a:	f85d 7b04 	ldr.w	r7, [sp], #4
    597e:	4770      	bx	lr

00005980 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5980:	b480      	push	{r7}
    5982:	b085      	sub	sp, #20
    5984:	af00      	add	r7, sp, #0
    5986:	6078      	str	r0, [r7, #4]
    5988:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    598a:	687b      	ldr	r3, [r7, #4]
    598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    598e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5990:	68fb      	ldr	r3, [r7, #12]
    5992:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5996:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5998:	683b      	ldr	r3, [r7, #0]
    599a:	b2db      	uxtb	r3, r3
    599c:	68fa      	ldr	r2, [r7, #12]
    599e:	4313      	orrs	r3, r2
    59a0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	68fa      	ldr	r2, [r7, #12]
    59a6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    59a8:	bf00      	nop
    59aa:	3714      	adds	r7, #20
    59ac:	46bd      	mov	sp, r7
    59ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b2:	4770      	bx	lr

000059b4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    59b4:	b480      	push	{r7}
    59b6:	b085      	sub	sp, #20
    59b8:	af00      	add	r7, sp, #0
    59ba:	6078      	str	r0, [r7, #4]
    59bc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    59be:	687b      	ldr	r3, [r7, #4]
    59c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    59c2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    59c4:	68fb      	ldr	r3, [r7, #12]
    59c6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    59ca:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    59cc:	683b      	ldr	r3, [r7, #0]
    59ce:	041b      	lsls	r3, r3, #16
    59d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    59d4:	68fa      	ldr	r2, [r7, #12]
    59d6:	4313      	orrs	r3, r2
    59d8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    59da:	687b      	ldr	r3, [r7, #4]
    59dc:	68fa      	ldr	r2, [r7, #12]
    59de:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    59e0:	bf00      	nop
    59e2:	3714      	adds	r7, #20
    59e4:	46bd      	mov	sp, r7
    59e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ea:	4770      	bx	lr

000059ec <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    59ec:	b480      	push	{r7}
    59ee:	b083      	sub	sp, #12
    59f0:	af00      	add	r7, sp, #0
    59f2:	6078      	str	r0, [r7, #4]
    59f4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    59f6:	687b      	ldr	r3, [r7, #4]
    59f8:	683a      	ldr	r2, [r7, #0]
    59fa:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    59fc:	bf00      	nop
    59fe:	370c      	adds	r7, #12
    5a00:	46bd      	mov	sp, r7
    5a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a06:	4770      	bx	lr

00005a08 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5a08:	b480      	push	{r7}
    5a0a:	b083      	sub	sp, #12
    5a0c:	af00      	add	r7, sp, #0
    5a0e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5a14:	4618      	mov	r0, r3
    5a16:	370c      	adds	r7, #12
    5a18:	46bd      	mov	sp, r7
    5a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a1e:	4770      	bx	lr

00005a20 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5a20:	b480      	push	{r7}
    5a22:	b085      	sub	sp, #20
    5a24:	af00      	add	r7, sp, #0
    5a26:	60f8      	str	r0, [r7, #12]
    5a28:	60b9      	str	r1, [r7, #8]
    5a2a:	607a      	str	r2, [r7, #4]
	while (count--) {
    5a2c:	e007      	b.n	5a3e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5a2e:	68fb      	ldr	r3, [r7, #12]
    5a30:	1c5a      	adds	r2, r3, #1
    5a32:	60fa      	str	r2, [r7, #12]
    5a34:	68ba      	ldr	r2, [r7, #8]
    5a36:	1c51      	adds	r1, r2, #1
    5a38:	60b9      	str	r1, [r7, #8]
    5a3a:	7812      	ldrb	r2, [r2, #0]
    5a3c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5a3e:	687b      	ldr	r3, [r7, #4]
    5a40:	1e5a      	subs	r2, r3, #1
    5a42:	607a      	str	r2, [r7, #4]
    5a44:	2b00      	cmp	r3, #0
    5a46:	d1f2      	bne.n	5a2e <_qspi_memcpy+0xe>
	}
}
    5a48:	bf00      	nop
    5a4a:	3714      	adds	r7, #20
    5a4c:	46bd      	mov	sp, r7
    5a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a52:	4770      	bx	lr

00005a54 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5a54:	b580      	push	{r7, lr}
    5a56:	b082      	sub	sp, #8
    5a58:	af00      	add	r7, sp, #0
    5a5a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5a5c:	4903      	ldr	r1, [pc, #12]	; (5a6c <_qspi_end_transfer+0x18>)
    5a5e:	6878      	ldr	r0, [r7, #4]
    5a60:	4b03      	ldr	r3, [pc, #12]	; (5a70 <_qspi_end_transfer+0x1c>)
    5a62:	4798      	blx	r3
}
    5a64:	bf00      	nop
    5a66:	3708      	adds	r7, #8
    5a68:	46bd      	mov	sp, r7
    5a6a:	bd80      	pop	{r7, pc}
    5a6c:	01000002 	.word	0x01000002
    5a70:	00005911 	.word	0x00005911

00005a74 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5a74:	b580      	push	{r7, lr}
    5a76:	b082      	sub	sp, #8
    5a78:	af00      	add	r7, sp, #0
    5a7a:	6078      	str	r0, [r7, #4]
    5a7c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	2b00      	cmp	r3, #0
    5a82:	d004      	beq.n	5a8e <_qspi_sync_init+0x1a>
    5a84:	683b      	ldr	r3, [r7, #0]
    5a86:	2b00      	cmp	r3, #0
    5a88:	d001      	beq.n	5a8e <_qspi_sync_init+0x1a>
    5a8a:	2301      	movs	r3, #1
    5a8c:	e000      	b.n	5a90 <_qspi_sync_init+0x1c>
    5a8e:	2300      	movs	r3, #0
    5a90:	f003 0301 	and.w	r3, r3, #1
    5a94:	b2db      	uxtb	r3, r3
    5a96:	2240      	movs	r2, #64	; 0x40
    5a98:	490c      	ldr	r1, [pc, #48]	; (5acc <_qspi_sync_init+0x58>)
    5a9a:	4618      	mov	r0, r3
    5a9c:	4b0c      	ldr	r3, [pc, #48]	; (5ad0 <_qspi_sync_init+0x5c>)
    5a9e:	4798      	blx	r3
	dev->prvt = hw;
    5aa0:	687b      	ldr	r3, [r7, #4]
    5aa2:	683a      	ldr	r2, [r7, #0]
    5aa4:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5aa6:	687b      	ldr	r3, [r7, #4]
    5aa8:	681b      	ldr	r3, [r3, #0]
    5aaa:	2101      	movs	r1, #1
    5aac:	4618      	mov	r0, r3
    5aae:	4b09      	ldr	r3, [pc, #36]	; (5ad4 <_qspi_sync_init+0x60>)
    5ab0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5ab2:	4909      	ldr	r1, [pc, #36]	; (5ad8 <_qspi_sync_init+0x64>)
    5ab4:	6838      	ldr	r0, [r7, #0]
    5ab6:	4b09      	ldr	r3, [pc, #36]	; (5adc <_qspi_sync_init+0x68>)
    5ab8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5aba:	4909      	ldr	r1, [pc, #36]	; (5ae0 <_qspi_sync_init+0x6c>)
    5abc:	6838      	ldr	r0, [r7, #0]
    5abe:	4b09      	ldr	r3, [pc, #36]	; (5ae4 <_qspi_sync_init+0x70>)
    5ac0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5ac2:	2300      	movs	r3, #0
}
    5ac4:	4618      	mov	r0, r3
    5ac6:	3708      	adds	r7, #8
    5ac8:	46bd      	mov	sp, r7
    5aca:	bd80      	pop	{r7, pc}
    5acc:	00010068 	.word	0x00010068
    5ad0:	00003ab1 	.word	0x00003ab1
    5ad4:	00005911 	.word	0x00005911
    5ad8:	06000011 	.word	0x06000011
    5adc:	0000592d 	.word	0x0000592d
    5ae0:	00241300 	.word	0x00241300
    5ae4:	00005949 	.word	0x00005949

00005ae8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5ae8:	b580      	push	{r7, lr}
    5aea:	b082      	sub	sp, #8
    5aec:	af00      	add	r7, sp, #0
    5aee:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5af0:	687b      	ldr	r3, [r7, #4]
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	2102      	movs	r1, #2
    5af6:	4618      	mov	r0, r3
    5af8:	4b03      	ldr	r3, [pc, #12]	; (5b08 <_qspi_sync_enable+0x20>)
    5afa:	4798      	blx	r3
	return ERR_NONE;
    5afc:	2300      	movs	r3, #0
}
    5afe:	4618      	mov	r0, r3
    5b00:	3708      	adds	r7, #8
    5b02:	46bd      	mov	sp, r7
    5b04:	bd80      	pop	{r7, pc}
    5b06:	bf00      	nop
    5b08:	00005911 	.word	0x00005911

00005b0c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5b0c:	b580      	push	{r7, lr}
    5b0e:	b082      	sub	sp, #8
    5b10:	af00      	add	r7, sp, #0
    5b12:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5b14:	687b      	ldr	r3, [r7, #4]
    5b16:	681b      	ldr	r3, [r3, #0]
    5b18:	2100      	movs	r1, #0
    5b1a:	4618      	mov	r0, r3
    5b1c:	4b03      	ldr	r3, [pc, #12]	; (5b2c <_qspi_sync_disable+0x20>)
    5b1e:	4798      	blx	r3
	return ERR_NONE;
    5b20:	2300      	movs	r3, #0
}
    5b22:	4618      	mov	r0, r3
    5b24:	3708      	adds	r7, #8
    5b26:	46bd      	mov	sp, r7
    5b28:	bd80      	pop	{r7, pc}
    5b2a:	bf00      	nop
    5b2c:	00005911 	.word	0x00005911

00005b30 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5b30:	b580      	push	{r7, lr}
    5b32:	b084      	sub	sp, #16
    5b34:	af00      	add	r7, sp, #0
    5b36:	6078      	str	r0, [r7, #4]
    5b38:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	681b      	ldr	r3, [r3, #0]
    5b3e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5b40:	683b      	ldr	r3, [r7, #0]
    5b42:	781b      	ldrb	r3, [r3, #0]
    5b44:	f003 0320 	and.w	r3, r3, #32
    5b48:	b2db      	uxtb	r3, r3
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d005      	beq.n	5b5a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5b4e:	683b      	ldr	r3, [r7, #0]
    5b50:	689b      	ldr	r3, [r3, #8]
    5b52:	4619      	mov	r1, r3
    5b54:	68f8      	ldr	r0, [r7, #12]
    5b56:	4b13      	ldr	r3, [pc, #76]	; (5ba4 <_qspi_sync_command_set_ifr+0x74>)
    5b58:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5b5a:	683b      	ldr	r3, [r7, #0]
    5b5c:	781b      	ldrb	r3, [r3, #0]
    5b5e:	f003 0310 	and.w	r3, r3, #16
    5b62:	b2db      	uxtb	r3, r3
    5b64:	2b00      	cmp	r3, #0
    5b66:	d005      	beq.n	5b74 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5b68:	683b      	ldr	r3, [r7, #0]
    5b6a:	791b      	ldrb	r3, [r3, #4]
    5b6c:	4619      	mov	r1, r3
    5b6e:	68f8      	ldr	r0, [r7, #12]
    5b70:	4b0d      	ldr	r3, [pc, #52]	; (5ba8 <_qspi_sync_command_set_ifr+0x78>)
    5b72:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5b74:	683b      	ldr	r3, [r7, #0]
    5b76:	781b      	ldrb	r3, [r3, #0]
    5b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5b7c:	b2db      	uxtb	r3, r3
    5b7e:	2b00      	cmp	r3, #0
    5b80:	d005      	beq.n	5b8e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5b82:	683b      	ldr	r3, [r7, #0]
    5b84:	795b      	ldrb	r3, [r3, #5]
    5b86:	4619      	mov	r1, r3
    5b88:	68f8      	ldr	r0, [r7, #12]
    5b8a:	4b08      	ldr	r3, [pc, #32]	; (5bac <_qspi_sync_command_set_ifr+0x7c>)
    5b8c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5b8e:	683b      	ldr	r3, [r7, #0]
    5b90:	681b      	ldr	r3, [r3, #0]
    5b92:	4619      	mov	r1, r3
    5b94:	68f8      	ldr	r0, [r7, #12]
    5b96:	4b06      	ldr	r3, [pc, #24]	; (5bb0 <_qspi_sync_command_set_ifr+0x80>)
    5b98:	4798      	blx	r3
}
    5b9a:	bf00      	nop
    5b9c:	3710      	adds	r7, #16
    5b9e:	46bd      	mov	sp, r7
    5ba0:	bd80      	pop	{r7, pc}
    5ba2:	bf00      	nop
    5ba4:	00005965 	.word	0x00005965
    5ba8:	00005981 	.word	0x00005981
    5bac:	000059b5 	.word	0x000059b5
    5bb0:	000059ed 	.word	0x000059ed

00005bb4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5bb4:	b580      	push	{r7, lr}
    5bb6:	b084      	sub	sp, #16
    5bb8:	af00      	add	r7, sp, #0
    5bba:	6078      	str	r0, [r7, #4]
    5bbc:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	681b      	ldr	r3, [r3, #0]
    5bc2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5bc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5bc8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5bca:	683b      	ldr	r3, [r7, #0]
    5bcc:	781b      	ldrb	r3, [r3, #0]
    5bce:	f003 0320 	and.w	r3, r3, #32
    5bd2:	b2db      	uxtb	r3, r3
    5bd4:	2b00      	cmp	r3, #0
    5bd6:	d004      	beq.n	5be2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5bd8:	683b      	ldr	r3, [r7, #0]
    5bda:	689b      	ldr	r3, [r3, #8]
    5bdc:	68fa      	ldr	r2, [r7, #12]
    5bde:	4413      	add	r3, r2
    5be0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5be2:	68b8      	ldr	r0, [r7, #8]
    5be4:	4b18      	ldr	r3, [pc, #96]	; (5c48 <_qspi_sync_run_transfer+0x94>)
    5be6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5be8:	683b      	ldr	r3, [r7, #0]
    5bea:	691b      	ldr	r3, [r3, #16]
    5bec:	2b00      	cmp	r3, #0
    5bee:	d103      	bne.n	5bf8 <_qspi_sync_run_transfer+0x44>
    5bf0:	683b      	ldr	r3, [r7, #0]
    5bf2:	695b      	ldr	r3, [r3, #20]
    5bf4:	2b00      	cmp	r3, #0
    5bf6:	d001      	beq.n	5bfc <_qspi_sync_run_transfer+0x48>
    5bf8:	2301      	movs	r3, #1
    5bfa:	e000      	b.n	5bfe <_qspi_sync_run_transfer+0x4a>
    5bfc:	2300      	movs	r3, #0
    5bfe:	f003 0301 	and.w	r3, r3, #1
    5c02:	b2db      	uxtb	r3, r3
    5c04:	2282      	movs	r2, #130	; 0x82
    5c06:	4911      	ldr	r1, [pc, #68]	; (5c4c <_qspi_sync_run_transfer+0x98>)
    5c08:	4618      	mov	r0, r3
    5c0a:	4b11      	ldr	r3, [pc, #68]	; (5c50 <_qspi_sync_run_transfer+0x9c>)
    5c0c:	4798      	blx	r3

	if (cmd->tx_buf) {
    5c0e:	683b      	ldr	r3, [r7, #0]
    5c10:	691b      	ldr	r3, [r3, #16]
    5c12:	2b00      	cmp	r3, #0
    5c14:	d008      	beq.n	5c28 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5c16:	683b      	ldr	r3, [r7, #0]
    5c18:	6919      	ldr	r1, [r3, #16]
    5c1a:	683b      	ldr	r3, [r7, #0]
    5c1c:	68db      	ldr	r3, [r3, #12]
    5c1e:	461a      	mov	r2, r3
    5c20:	68f8      	ldr	r0, [r7, #12]
    5c22:	4b0c      	ldr	r3, [pc, #48]	; (5c54 <_qspi_sync_run_transfer+0xa0>)
    5c24:	4798      	blx	r3
    5c26:	e007      	b.n	5c38 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5c28:	683b      	ldr	r3, [r7, #0]
    5c2a:	6958      	ldr	r0, [r3, #20]
    5c2c:	683b      	ldr	r3, [r7, #0]
    5c2e:	68db      	ldr	r3, [r3, #12]
    5c30:	461a      	mov	r2, r3
    5c32:	68f9      	ldr	r1, [r7, #12]
    5c34:	4b07      	ldr	r3, [pc, #28]	; (5c54 <_qspi_sync_run_transfer+0xa0>)
    5c36:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5c38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5c3c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5c40:	bf00      	nop
    5c42:	3710      	adds	r7, #16
    5c44:	46bd      	mov	sp, r7
    5c46:	bd80      	pop	{r7, pc}
    5c48:	00005a09 	.word	0x00005a09
    5c4c:	00010068 	.word	0x00010068
    5c50:	00003ab1 	.word	0x00003ab1
    5c54:	00005a21 	.word	0x00005a21

00005c58 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5c58:	b580      	push	{r7, lr}
    5c5a:	b082      	sub	sp, #8
    5c5c:	af00      	add	r7, sp, #0
    5c5e:	6078      	str	r0, [r7, #4]
    5c60:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5c62:	6839      	ldr	r1, [r7, #0]
    5c64:	6878      	ldr	r0, [r7, #4]
    5c66:	4b14      	ldr	r3, [pc, #80]	; (5cb8 <_qspi_sync_serial_run_command+0x60>)
    5c68:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5c6a:	683b      	ldr	r3, [r7, #0]
    5c6c:	781b      	ldrb	r3, [r3, #0]
    5c6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5c72:	b2db      	uxtb	r3, r3
    5c74:	2b00      	cmp	r3, #0
    5c76:	d003      	beq.n	5c80 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5c78:	6839      	ldr	r1, [r7, #0]
    5c7a:	6878      	ldr	r0, [r7, #4]
    5c7c:	4b0f      	ldr	r3, [pc, #60]	; (5cbc <_qspi_sync_serial_run_command+0x64>)
    5c7e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	681b      	ldr	r3, [r3, #0]
    5c84:	4618      	mov	r0, r3
    5c86:	4b0e      	ldr	r3, [pc, #56]	; (5cc0 <_qspi_sync_serial_run_command+0x68>)
    5c88:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5c8a:	bf00      	nop
    5c8c:	687b      	ldr	r3, [r7, #4]
    5c8e:	681b      	ldr	r3, [r3, #0]
    5c90:	4618      	mov	r0, r3
    5c92:	4b0c      	ldr	r3, [pc, #48]	; (5cc4 <_qspi_sync_serial_run_command+0x6c>)
    5c94:	4798      	blx	r3
    5c96:	4603      	mov	r3, r0
    5c98:	f083 0301 	eor.w	r3, r3, #1
    5c9c:	b2db      	uxtb	r3, r3
    5c9e:	2b00      	cmp	r3, #0
    5ca0:	d1f4      	bne.n	5c8c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5ca2:	687b      	ldr	r3, [r7, #4]
    5ca4:	681b      	ldr	r3, [r3, #0]
    5ca6:	4618      	mov	r0, r3
    5ca8:	4b07      	ldr	r3, [pc, #28]	; (5cc8 <_qspi_sync_serial_run_command+0x70>)
    5caa:	4798      	blx	r3
	return ERR_NONE;
    5cac:	2300      	movs	r3, #0
}
    5cae:	4618      	mov	r0, r3
    5cb0:	3708      	adds	r7, #8
    5cb2:	46bd      	mov	sp, r7
    5cb4:	bd80      	pop	{r7, pc}
    5cb6:	bf00      	nop
    5cb8:	00005b31 	.word	0x00005b31
    5cbc:	00005bb5 	.word	0x00005bb5
    5cc0:	00005a55 	.word	0x00005a55
    5cc4:	000058cd 	.word	0x000058cd
    5cc8:	000058f5 	.word	0x000058f5

00005ccc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5ccc:	b480      	push	{r7}
    5cce:	b083      	sub	sp, #12
    5cd0:	af00      	add	r7, sp, #0
    5cd2:	6078      	str	r0, [r7, #4]
    5cd4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5cd6:	bf00      	nop
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	691a      	ldr	r2, [r3, #16]
    5cdc:	683b      	ldr	r3, [r7, #0]
    5cde:	4013      	ands	r3, r2
    5ce0:	2b00      	cmp	r3, #0
    5ce2:	d1f9      	bne.n	5cd8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5ce4:	bf00      	nop
    5ce6:	370c      	adds	r7, #12
    5ce8:	46bd      	mov	sp, r7
    5cea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cee:	4770      	bx	lr

00005cf0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5cf0:	b480      	push	{r7}
    5cf2:	b083      	sub	sp, #12
    5cf4:	af00      	add	r7, sp, #0
    5cf6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5cf8:	687b      	ldr	r3, [r7, #4]
    5cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
    5cfe:	819a      	strh	r2, [r3, #12]
}
    5d00:	bf00      	nop
    5d02:	370c      	adds	r7, #12
    5d04:	46bd      	mov	sp, r7
    5d06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d0a:	4770      	bx	lr

00005d0c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5d0c:	b480      	push	{r7}
    5d0e:	b083      	sub	sp, #12
    5d10:	af00      	add	r7, sp, #0
    5d12:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5d14:	687b      	ldr	r3, [r7, #4]
    5d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5d1a:	819a      	strh	r2, [r3, #12]
}
    5d1c:	bf00      	nop
    5d1e:	370c      	adds	r7, #12
    5d20:	46bd      	mov	sp, r7
    5d22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d26:	4770      	bx	lr

00005d28 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5d28:	b480      	push	{r7}
    5d2a:	b083      	sub	sp, #12
    5d2c:	af00      	add	r7, sp, #0
    5d2e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5d30:	687b      	ldr	r3, [r7, #4]
    5d32:	899b      	ldrh	r3, [r3, #12]
    5d34:	b29b      	uxth	r3, r3
}
    5d36:	4618      	mov	r0, r3
    5d38:	370c      	adds	r7, #12
    5d3a:	46bd      	mov	sp, r7
    5d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d40:	4770      	bx	lr

00005d42 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5d42:	b480      	push	{r7}
    5d44:	b083      	sub	sp, #12
    5d46:	af00      	add	r7, sp, #0
    5d48:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5d4a:	687b      	ldr	r3, [r7, #4]
    5d4c:	895b      	ldrh	r3, [r3, #10]
    5d4e:	b29b      	uxth	r3, r3
}
    5d50:	4618      	mov	r0, r3
    5d52:	370c      	adds	r7, #12
    5d54:	46bd      	mov	sp, r7
    5d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d5a:	4770      	bx	lr

00005d5c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5d5c:	b580      	push	{r7, lr}
    5d5e:	b082      	sub	sp, #8
    5d60:	af00      	add	r7, sp, #0
    5d62:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5d64:	687b      	ldr	r3, [r7, #4]
    5d66:	881b      	ldrh	r3, [r3, #0]
    5d68:	b29b      	uxth	r3, r3
    5d6a:	f043 0301 	orr.w	r3, r3, #1
    5d6e:	b29a      	uxth	r2, r3
    5d70:	687b      	ldr	r3, [r7, #4]
    5d72:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5d74:	2101      	movs	r1, #1
    5d76:	6878      	ldr	r0, [r7, #4]
    5d78:	4b02      	ldr	r3, [pc, #8]	; (5d84 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5d7a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5d7c:	bf00      	nop
    5d7e:	3708      	adds	r7, #8
    5d80:	46bd      	mov	sp, r7
    5d82:	bd80      	pop	{r7, pc}
    5d84:	00005ccd 	.word	0x00005ccd

00005d88 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b084      	sub	sp, #16
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5d90:	f248 0103 	movw	r1, #32771	; 0x8003
    5d94:	6878      	ldr	r0, [r7, #4]
    5d96:	4b0a      	ldr	r3, [pc, #40]	; (5dc0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5d98:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	881b      	ldrh	r3, [r3, #0]
    5d9e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5da0:	89fb      	ldrh	r3, [r7, #14]
    5da2:	085b      	lsrs	r3, r3, #1
    5da4:	b29b      	uxth	r3, r3
    5da6:	f003 0301 	and.w	r3, r3, #1
    5daa:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5dac:	89fb      	ldrh	r3, [r7, #14]
    5dae:	2b00      	cmp	r3, #0
    5db0:	bf14      	ite	ne
    5db2:	2301      	movne	r3, #1
    5db4:	2300      	moveq	r3, #0
    5db6:	b2db      	uxtb	r3, r3
}
    5db8:	4618      	mov	r0, r3
    5dba:	3710      	adds	r7, #16
    5dbc:	46bd      	mov	sp, r7
    5dbe:	bd80      	pop	{r7, pc}
    5dc0:	00005ccd 	.word	0x00005ccd

00005dc4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5dc4:	b580      	push	{r7, lr}
    5dc6:	b082      	sub	sp, #8
    5dc8:	af00      	add	r7, sp, #0
    5dca:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5dcc:	687b      	ldr	r3, [r7, #4]
    5dce:	881b      	ldrh	r3, [r3, #0]
    5dd0:	b29b      	uxth	r3, r3
    5dd2:	f023 0302 	bic.w	r3, r3, #2
    5dd6:	b29a      	uxth	r2, r3
    5dd8:	687b      	ldr	r3, [r7, #4]
    5dda:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5ddc:	f248 0103 	movw	r1, #32771	; 0x8003
    5de0:	6878      	ldr	r0, [r7, #4]
    5de2:	4b03      	ldr	r3, [pc, #12]	; (5df0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5de4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5de6:	bf00      	nop
    5de8:	3708      	adds	r7, #8
    5dea:	46bd      	mov	sp, r7
    5dec:	bd80      	pop	{r7, pc}
    5dee:	bf00      	nop
    5df0:	00005ccd 	.word	0x00005ccd

00005df4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5df4:	b580      	push	{r7, lr}
    5df6:	b082      	sub	sp, #8
    5df8:	af00      	add	r7, sp, #0
    5dfa:	6078      	str	r0, [r7, #4]
    5dfc:	460b      	mov	r3, r1
    5dfe:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5e00:	687b      	ldr	r3, [r7, #4]
    5e02:	887a      	ldrh	r2, [r7, #2]
    5e04:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5e06:	f248 0103 	movw	r1, #32771	; 0x8003
    5e0a:	6878      	ldr	r0, [r7, #4]
    5e0c:	4b02      	ldr	r3, [pc, #8]	; (5e18 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5e0e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5e10:	bf00      	nop
    5e12:	3708      	adds	r7, #8
    5e14:	46bd      	mov	sp, r7
    5e16:	bd80      	pop	{r7, pc}
    5e18:	00005ccd 	.word	0x00005ccd

00005e1c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5e1c:	b480      	push	{r7}
    5e1e:	b083      	sub	sp, #12
    5e20:	af00      	add	r7, sp, #0
    5e22:	6078      	str	r0, [r7, #4]
    5e24:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5e26:	687b      	ldr	r3, [r7, #4]
    5e28:	683a      	ldr	r2, [r7, #0]
    5e2a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5e2c:	bf00      	nop
    5e2e:	370c      	adds	r7, #12
    5e30:	46bd      	mov	sp, r7
    5e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e36:	4770      	bx	lr

00005e38 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5e38:	b580      	push	{r7, lr}
    5e3a:	b082      	sub	sp, #8
    5e3c:	af00      	add	r7, sp, #0
    5e3e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5e40:	687b      	ldr	r3, [r7, #4]
    5e42:	2b00      	cmp	r3, #0
    5e44:	d005      	beq.n	5e52 <_calendar_init+0x1a>
    5e46:	687b      	ldr	r3, [r7, #4]
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d001      	beq.n	5e52 <_calendar_init+0x1a>
    5e4e:	2301      	movs	r3, #1
    5e50:	e000      	b.n	5e54 <_calendar_init+0x1c>
    5e52:	2300      	movs	r3, #0
    5e54:	f003 0301 	and.w	r3, r3, #1
    5e58:	b2db      	uxtb	r3, r3
    5e5a:	222f      	movs	r2, #47	; 0x2f
    5e5c:	491b      	ldr	r1, [pc, #108]	; (5ecc <_calendar_init+0x94>)
    5e5e:	4618      	mov	r0, r3
    5e60:	4b1b      	ldr	r3, [pc, #108]	; (5ed0 <_calendar_init+0x98>)
    5e62:	4798      	blx	r3

	_rtc_dev = dev;
    5e64:	4a1b      	ldr	r2, [pc, #108]	; (5ed4 <_calendar_init+0x9c>)
    5e66:	687b      	ldr	r3, [r7, #4]
    5e68:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5e6a:	687b      	ldr	r3, [r7, #4]
    5e6c:	681b      	ldr	r3, [r3, #0]
    5e6e:	4618      	mov	r0, r3
    5e70:	4b19      	ldr	r3, [pc, #100]	; (5ed8 <_calendar_init+0xa0>)
    5e72:	4798      	blx	r3
    5e74:	4603      	mov	r3, r0
    5e76:	2b00      	cmp	r3, #0
    5e78:	d00a      	beq.n	5e90 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5e7a:	687b      	ldr	r3, [r7, #4]
    5e7c:	681b      	ldr	r3, [r3, #0]
    5e7e:	4618      	mov	r0, r3
    5e80:	4b16      	ldr	r3, [pc, #88]	; (5edc <_calendar_init+0xa4>)
    5e82:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5e84:	687b      	ldr	r3, [r7, #4]
    5e86:	681b      	ldr	r3, [r3, #0]
    5e88:	2102      	movs	r1, #2
    5e8a:	4618      	mov	r0, r3
    5e8c:	4b14      	ldr	r3, [pc, #80]	; (5ee0 <_calendar_init+0xa8>)
    5e8e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5e90:	687b      	ldr	r3, [r7, #4]
    5e92:	681b      	ldr	r3, [r3, #0]
    5e94:	4618      	mov	r0, r3
    5e96:	4b13      	ldr	r3, [pc, #76]	; (5ee4 <_calendar_init+0xac>)
    5e98:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5e9a:	687b      	ldr	r3, [r7, #4]
    5e9c:	681b      	ldr	r3, [r3, #0]
    5e9e:	2101      	movs	r1, #1
    5ea0:	4618      	mov	r0, r3
    5ea2:	4b0f      	ldr	r3, [pc, #60]	; (5ee0 <_calendar_init+0xa8>)
    5ea4:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5ea6:	687b      	ldr	r3, [r7, #4]
    5ea8:	681b      	ldr	r3, [r3, #0]
    5eaa:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5eae:	4618      	mov	r0, r3
    5eb0:	4b0d      	ldr	r3, [pc, #52]	; (5ee8 <_calendar_init+0xb0>)
    5eb2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5eb4:	687b      	ldr	r3, [r7, #4]
    5eb6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5eb8:	2100      	movs	r1, #0
    5eba:	4618      	mov	r0, r3
    5ebc:	4b0b      	ldr	r3, [pc, #44]	; (5eec <_calendar_init+0xb4>)
    5ebe:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5ec0:	2300      	movs	r3, #0
}
    5ec2:	4618      	mov	r0, r3
    5ec4:	3708      	adds	r7, #8
    5ec6:	46bd      	mov	sp, r7
    5ec8:	bd80      	pop	{r7, pc}
    5eca:	bf00      	nop
    5ecc:	00010080 	.word	0x00010080
    5ed0:	00003ab1 	.word	0x00003ab1
    5ed4:	20000804 	.word	0x20000804
    5ed8:	00005d89 	.word	0x00005d89
    5edc:	00005dc5 	.word	0x00005dc5
    5ee0:	00005ccd 	.word	0x00005ccd
    5ee4:	00005d5d 	.word	0x00005d5d
    5ee8:	00005df5 	.word	0x00005df5
    5eec:	00005e1d 	.word	0x00005e1d

00005ef0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5ef0:	b580      	push	{r7, lr}
    5ef2:	b084      	sub	sp, #16
    5ef4:	af00      	add	r7, sp, #0
    5ef6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5ef8:	687b      	ldr	r3, [r7, #4]
    5efa:	681b      	ldr	r3, [r3, #0]
    5efc:	4618      	mov	r0, r3
    5efe:	4b19      	ldr	r3, [pc, #100]	; (5f64 <_rtc_interrupt_handler+0x74>)
    5f00:	4798      	blx	r3
    5f02:	4603      	mov	r3, r0
    5f04:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5f06:	687b      	ldr	r3, [r7, #4]
    5f08:	681b      	ldr	r3, [r3, #0]
    5f0a:	4618      	mov	r0, r3
    5f0c:	4b16      	ldr	r3, [pc, #88]	; (5f68 <_rtc_interrupt_handler+0x78>)
    5f0e:	4798      	blx	r3
    5f10:	4603      	mov	r3, r0
    5f12:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5f14:	89fa      	ldrh	r2, [r7, #14]
    5f16:	89bb      	ldrh	r3, [r7, #12]
    5f18:	4013      	ands	r3, r2
    5f1a:	b29b      	uxth	r3, r3
    5f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5f20:	2b00      	cmp	r3, #0
    5f22:	d009      	beq.n	5f38 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5f24:	687b      	ldr	r3, [r7, #4]
    5f26:	685b      	ldr	r3, [r3, #4]
    5f28:	6878      	ldr	r0, [r7, #4]
    5f2a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	681b      	ldr	r3, [r3, #0]
    5f30:	4618      	mov	r0, r3
    5f32:	4b0e      	ldr	r3, [pc, #56]	; (5f6c <_rtc_interrupt_handler+0x7c>)
    5f34:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5f36:	e010      	b.n	5f5a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5f38:	89fa      	ldrh	r2, [r7, #14]
    5f3a:	89bb      	ldrh	r3, [r7, #12]
    5f3c:	4013      	ands	r3, r2
    5f3e:	b29b      	uxth	r3, r3
    5f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5f44:	2b00      	cmp	r3, #0
    5f46:	d008      	beq.n	5f5a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	689b      	ldr	r3, [r3, #8]
    5f4c:	6878      	ldr	r0, [r7, #4]
    5f4e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	681b      	ldr	r3, [r3, #0]
    5f54:	4618      	mov	r0, r3
    5f56:	4b06      	ldr	r3, [pc, #24]	; (5f70 <_rtc_interrupt_handler+0x80>)
    5f58:	4798      	blx	r3
}
    5f5a:	bf00      	nop
    5f5c:	3710      	adds	r7, #16
    5f5e:	46bd      	mov	sp, r7
    5f60:	bd80      	pop	{r7, pc}
    5f62:	bf00      	nop
    5f64:	00005d29 	.word	0x00005d29
    5f68:	00005d43 	.word	0x00005d43
    5f6c:	00005cf1 	.word	0x00005cf1
    5f70:	00005d0d 	.word	0x00005d0d

00005f74 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5f74:	b580      	push	{r7, lr}
    5f76:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5f78:	4b03      	ldr	r3, [pc, #12]	; (5f88 <RTC_Handler+0x14>)
    5f7a:	681b      	ldr	r3, [r3, #0]
    5f7c:	4618      	mov	r0, r3
    5f7e:	4b03      	ldr	r3, [pc, #12]	; (5f8c <RTC_Handler+0x18>)
    5f80:	4798      	blx	r3
}
    5f82:	bf00      	nop
    5f84:	bd80      	pop	{r7, pc}
    5f86:	bf00      	nop
    5f88:	20000804 	.word	0x20000804
    5f8c:	00005ef1 	.word	0x00005ef1

00005f90 <__NVIC_EnableIRQ>:
{
    5f90:	b480      	push	{r7}
    5f92:	b083      	sub	sp, #12
    5f94:	af00      	add	r7, sp, #0
    5f96:	4603      	mov	r3, r0
    5f98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	db0b      	blt.n	5fba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fa2:	4909      	ldr	r1, [pc, #36]	; (5fc8 <__NVIC_EnableIRQ+0x38>)
    5fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5fa8:	095b      	lsrs	r3, r3, #5
    5faa:	88fa      	ldrh	r2, [r7, #6]
    5fac:	f002 021f 	and.w	r2, r2, #31
    5fb0:	2001      	movs	r0, #1
    5fb2:	fa00 f202 	lsl.w	r2, r0, r2
    5fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5fba:	bf00      	nop
    5fbc:	370c      	adds	r7, #12
    5fbe:	46bd      	mov	sp, r7
    5fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fc4:	4770      	bx	lr
    5fc6:	bf00      	nop
    5fc8:	e000e100 	.word	0xe000e100

00005fcc <__NVIC_DisableIRQ>:
{
    5fcc:	b480      	push	{r7}
    5fce:	b083      	sub	sp, #12
    5fd0:	af00      	add	r7, sp, #0
    5fd2:	4603      	mov	r3, r0
    5fd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5fda:	2b00      	cmp	r3, #0
    5fdc:	db10      	blt.n	6000 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fde:	490b      	ldr	r1, [pc, #44]	; (600c <__NVIC_DisableIRQ+0x40>)
    5fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5fe4:	095b      	lsrs	r3, r3, #5
    5fe6:	88fa      	ldrh	r2, [r7, #6]
    5fe8:	f002 021f 	and.w	r2, r2, #31
    5fec:	2001      	movs	r0, #1
    5fee:	fa00 f202 	lsl.w	r2, r0, r2
    5ff2:	3320      	adds	r3, #32
    5ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5ff8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5ffc:	f3bf 8f6f 	isb	sy
}
    6000:	bf00      	nop
    6002:	370c      	adds	r7, #12
    6004:	46bd      	mov	sp, r7
    6006:	f85d 7b04 	ldr.w	r7, [sp], #4
    600a:	4770      	bx	lr
    600c:	e000e100 	.word	0xe000e100

00006010 <__NVIC_ClearPendingIRQ>:
{
    6010:	b480      	push	{r7}
    6012:	b083      	sub	sp, #12
    6014:	af00      	add	r7, sp, #0
    6016:	4603      	mov	r3, r0
    6018:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    601a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    601e:	2b00      	cmp	r3, #0
    6020:	db0c      	blt.n	603c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6022:	4909      	ldr	r1, [pc, #36]	; (6048 <__NVIC_ClearPendingIRQ+0x38>)
    6024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6028:	095b      	lsrs	r3, r3, #5
    602a:	88fa      	ldrh	r2, [r7, #6]
    602c:	f002 021f 	and.w	r2, r2, #31
    6030:	2001      	movs	r0, #1
    6032:	fa00 f202 	lsl.w	r2, r0, r2
    6036:	3360      	adds	r3, #96	; 0x60
    6038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    603c:	bf00      	nop
    603e:	370c      	adds	r7, #12
    6040:	46bd      	mov	sp, r7
    6042:	f85d 7b04 	ldr.w	r7, [sp], #4
    6046:	4770      	bx	lr
    6048:	e000e100 	.word	0xe000e100

0000604c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    604c:	b480      	push	{r7}
    604e:	b083      	sub	sp, #12
    6050:	af00      	add	r7, sp, #0
    6052:	6078      	str	r0, [r7, #4]
    6054:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6056:	bf00      	nop
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	69da      	ldr	r2, [r3, #28]
    605c:	683b      	ldr	r3, [r7, #0]
    605e:	4013      	ands	r3, r2
    6060:	2b00      	cmp	r3, #0
    6062:	d1f9      	bne.n	6058 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6064:	bf00      	nop
    6066:	370c      	adds	r7, #12
    6068:	46bd      	mov	sp, r7
    606a:	f85d 7b04 	ldr.w	r7, [sp], #4
    606e:	4770      	bx	lr

00006070 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6070:	b480      	push	{r7}
    6072:	b083      	sub	sp, #12
    6074:	af00      	add	r7, sp, #0
    6076:	6078      	str	r0, [r7, #4]
    6078:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    607a:	687b      	ldr	r3, [r7, #4]
    607c:	69da      	ldr	r2, [r3, #28]
    607e:	683b      	ldr	r3, [r7, #0]
    6080:	4013      	ands	r3, r2
    6082:	2b00      	cmp	r3, #0
    6084:	bf14      	ite	ne
    6086:	2301      	movne	r3, #1
    6088:	2300      	moveq	r3, #0
    608a:	b2db      	uxtb	r3, r3
}
    608c:	4618      	mov	r0, r3
    608e:	370c      	adds	r7, #12
    6090:	46bd      	mov	sp, r7
    6092:	f85d 7b04 	ldr.w	r7, [sp], #4
    6096:	4770      	bx	lr

00006098 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6098:	b480      	push	{r7}
    609a:	b083      	sub	sp, #12
    609c:	af00      	add	r7, sp, #0
    609e:	6078      	str	r0, [r7, #4]
    60a0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    60a2:	bf00      	nop
    60a4:	687b      	ldr	r3, [r7, #4]
    60a6:	69da      	ldr	r2, [r3, #28]
    60a8:	683b      	ldr	r3, [r7, #0]
    60aa:	4013      	ands	r3, r2
    60ac:	2b00      	cmp	r3, #0
    60ae:	d1f9      	bne.n	60a4 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    60b0:	bf00      	nop
    60b2:	370c      	adds	r7, #12
    60b4:	46bd      	mov	sp, r7
    60b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    60ba:	4770      	bx	lr

000060bc <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    60bc:	b480      	push	{r7}
    60be:	b083      	sub	sp, #12
    60c0:	af00      	add	r7, sp, #0
    60c2:	6078      	str	r0, [r7, #4]
    60c4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    60c6:	687b      	ldr	r3, [r7, #4]
    60c8:	69da      	ldr	r2, [r3, #28]
    60ca:	683b      	ldr	r3, [r7, #0]
    60cc:	4013      	ands	r3, r2
    60ce:	2b00      	cmp	r3, #0
    60d0:	bf14      	ite	ne
    60d2:	2301      	movne	r3, #1
    60d4:	2300      	moveq	r3, #0
    60d6:	b2db      	uxtb	r3, r3
}
    60d8:	4618      	mov	r0, r3
    60da:	370c      	adds	r7, #12
    60dc:	46bd      	mov	sp, r7
    60de:	f85d 7b04 	ldr.w	r7, [sp], #4
    60e2:	4770      	bx	lr

000060e4 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    60e4:	b480      	push	{r7}
    60e6:	b083      	sub	sp, #12
    60e8:	af00      	add	r7, sp, #0
    60ea:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    60ec:	687b      	ldr	r3, [r7, #4]
    60ee:	2201      	movs	r2, #1
    60f0:	761a      	strb	r2, [r3, #24]
}
    60f2:	bf00      	nop
    60f4:	370c      	adds	r7, #12
    60f6:	46bd      	mov	sp, r7
    60f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    60fc:	4770      	bx	lr

000060fe <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    60fe:	b480      	push	{r7}
    6100:	b083      	sub	sp, #12
    6102:	af00      	add	r7, sp, #0
    6104:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6106:	687b      	ldr	r3, [r7, #4]
    6108:	2202      	movs	r2, #2
    610a:	761a      	strb	r2, [r3, #24]
}
    610c:	bf00      	nop
    610e:	370c      	adds	r7, #12
    6110:	46bd      	mov	sp, r7
    6112:	f85d 7b04 	ldr.w	r7, [sp], #4
    6116:	4770      	bx	lr

00006118 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    6118:	b480      	push	{r7}
    611a:	b083      	sub	sp, #12
    611c:	af00      	add	r7, sp, #0
    611e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6120:	687b      	ldr	r3, [r7, #4]
    6122:	7e1b      	ldrb	r3, [r3, #24]
    6124:	b2db      	uxtb	r3, r3
}
    6126:	4618      	mov	r0, r3
    6128:	370c      	adds	r7, #12
    612a:	46bd      	mov	sp, r7
    612c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6130:	4770      	bx	lr

00006132 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    6132:	b480      	push	{r7}
    6134:	b083      	sub	sp, #12
    6136:	af00      	add	r7, sp, #0
    6138:	6078      	str	r0, [r7, #4]
    613a:	460b      	mov	r3, r1
    613c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    613e:	687b      	ldr	r3, [r7, #4]
    6140:	78fa      	ldrb	r2, [r7, #3]
    6142:	761a      	strb	r2, [r3, #24]
}
    6144:	bf00      	nop
    6146:	370c      	adds	r7, #12
    6148:	46bd      	mov	sp, r7
    614a:	f85d 7b04 	ldr.w	r7, [sp], #4
    614e:	4770      	bx	lr

00006150 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6150:	b480      	push	{r7}
    6152:	b085      	sub	sp, #20
    6154:	af00      	add	r7, sp, #0
    6156:	6078      	str	r0, [r7, #4]
    6158:	460b      	mov	r3, r1
    615a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	7e1b      	ldrb	r3, [r3, #24]
    6160:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6162:	7bfa      	ldrb	r2, [r7, #15]
    6164:	78fb      	ldrb	r3, [r7, #3]
    6166:	4013      	ands	r3, r2
    6168:	73fb      	strb	r3, [r7, #15]
	return tmp;
    616a:	7bfb      	ldrb	r3, [r7, #15]
}
    616c:	4618      	mov	r0, r3
    616e:	3714      	adds	r7, #20
    6170:	46bd      	mov	sp, r7
    6172:	f85d 7b04 	ldr.w	r7, [sp], #4
    6176:	4770      	bx	lr

00006178 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6178:	b480      	push	{r7}
    617a:	b083      	sub	sp, #12
    617c:	af00      	add	r7, sp, #0
    617e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	7e1b      	ldrb	r3, [r3, #24]
    6184:	b2db      	uxtb	r3, r3
}
    6186:	4618      	mov	r0, r3
    6188:	370c      	adds	r7, #12
    618a:	46bd      	mov	sp, r7
    618c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6190:	4770      	bx	lr

00006192 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6192:	b480      	push	{r7}
    6194:	b083      	sub	sp, #12
    6196:	af00      	add	r7, sp, #0
    6198:	6078      	str	r0, [r7, #4]
    619a:	460b      	mov	r3, r1
    619c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    619e:	687b      	ldr	r3, [r7, #4]
    61a0:	78fa      	ldrb	r2, [r7, #3]
    61a2:	761a      	strb	r2, [r3, #24]
}
    61a4:	bf00      	nop
    61a6:	370c      	adds	r7, #12
    61a8:	46bd      	mov	sp, r7
    61aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    61ae:	4770      	bx	lr

000061b0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    61b0:	b580      	push	{r7, lr}
    61b2:	b082      	sub	sp, #8
    61b4:	af00      	add	r7, sp, #0
    61b6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    61b8:	687b      	ldr	r3, [r7, #4]
    61ba:	681b      	ldr	r3, [r3, #0]
    61bc:	f043 0202 	orr.w	r2, r3, #2
    61c0:	687b      	ldr	r3, [r7, #4]
    61c2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    61c4:	2103      	movs	r1, #3
    61c6:	6878      	ldr	r0, [r7, #4]
    61c8:	4b02      	ldr	r3, [pc, #8]	; (61d4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    61ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61cc:	bf00      	nop
    61ce:	3708      	adds	r7, #8
    61d0:	46bd      	mov	sp, r7
    61d2:	bd80      	pop	{r7, pc}
    61d4:	0000604d 	.word	0x0000604d

000061d8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    61d8:	b580      	push	{r7, lr}
    61da:	b082      	sub	sp, #8
    61dc:	af00      	add	r7, sp, #0
    61de:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	681b      	ldr	r3, [r3, #0]
    61e4:	f023 0202 	bic.w	r2, r3, #2
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    61ec:	2103      	movs	r1, #3
    61ee:	6878      	ldr	r0, [r7, #4]
    61f0:	4b02      	ldr	r3, [pc, #8]	; (61fc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    61f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61f4:	bf00      	nop
    61f6:	3708      	adds	r7, #8
    61f8:	46bd      	mov	sp, r7
    61fa:	bd80      	pop	{r7, pc}
    61fc:	0000604d 	.word	0x0000604d

00006200 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6200:	b480      	push	{r7}
    6202:	b085      	sub	sp, #20
    6204:	af00      	add	r7, sp, #0
    6206:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	681b      	ldr	r3, [r3, #0]
    620c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    620e:	68fb      	ldr	r3, [r7, #12]
    6210:	0edb      	lsrs	r3, r3, #27
    6212:	f003 0301 	and.w	r3, r3, #1
    6216:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6218:	68fb      	ldr	r3, [r7, #12]
    621a:	2b00      	cmp	r3, #0
    621c:	bf14      	ite	ne
    621e:	2301      	movne	r3, #1
    6220:	2300      	moveq	r3, #0
    6222:	b2db      	uxtb	r3, r3
}
    6224:	4618      	mov	r0, r3
    6226:	3714      	adds	r7, #20
    6228:	46bd      	mov	sp, r7
    622a:	f85d 7b04 	ldr.w	r7, [sp], #4
    622e:	4770      	bx	lr

00006230 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6230:	b580      	push	{r7, lr}
    6232:	b084      	sub	sp, #16
    6234:	af00      	add	r7, sp, #0
    6236:	6078      	str	r0, [r7, #4]
    6238:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    623a:	2103      	movs	r1, #3
    623c:	6878      	ldr	r0, [r7, #4]
    623e:	4b07      	ldr	r3, [pc, #28]	; (625c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6240:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6242:	687b      	ldr	r3, [r7, #4]
    6244:	681b      	ldr	r3, [r3, #0]
    6246:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6248:	68fa      	ldr	r2, [r7, #12]
    624a:	683b      	ldr	r3, [r7, #0]
    624c:	4013      	ands	r3, r2
    624e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6250:	68fb      	ldr	r3, [r7, #12]
}
    6252:	4618      	mov	r0, r3
    6254:	3710      	adds	r7, #16
    6256:	46bd      	mov	sp, r7
    6258:	bd80      	pop	{r7, pc}
    625a:	bf00      	nop
    625c:	0000604d 	.word	0x0000604d

00006260 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6260:	b580      	push	{r7, lr}
    6262:	b082      	sub	sp, #8
    6264:	af00      	add	r7, sp, #0
    6266:	6078      	str	r0, [r7, #4]
    6268:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	683a      	ldr	r2, [r7, #0]
    626e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6270:	2103      	movs	r1, #3
    6272:	6878      	ldr	r0, [r7, #4]
    6274:	4b02      	ldr	r3, [pc, #8]	; (6280 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6276:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6278:	bf00      	nop
    627a:	3708      	adds	r7, #8
    627c:	46bd      	mov	sp, r7
    627e:	bd80      	pop	{r7, pc}
    6280:	0000604d 	.word	0x0000604d

00006284 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6284:	b580      	push	{r7, lr}
    6286:	b082      	sub	sp, #8
    6288:	af00      	add	r7, sp, #0
    628a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    628c:	687b      	ldr	r3, [r7, #4]
    628e:	681b      	ldr	r3, [r3, #0]
    6290:	f043 0202 	orr.w	r2, r3, #2
    6294:	687b      	ldr	r3, [r7, #4]
    6296:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6298:	2103      	movs	r1, #3
    629a:	6878      	ldr	r0, [r7, #4]
    629c:	4b02      	ldr	r3, [pc, #8]	; (62a8 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    629e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62a0:	bf00      	nop
    62a2:	3708      	adds	r7, #8
    62a4:	46bd      	mov	sp, r7
    62a6:	bd80      	pop	{r7, pc}
    62a8:	00006099 	.word	0x00006099

000062ac <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    62ac:	b580      	push	{r7, lr}
    62ae:	b084      	sub	sp, #16
    62b0:	af00      	add	r7, sp, #0
    62b2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    62b4:	2103      	movs	r1, #3
    62b6:	6878      	ldr	r0, [r7, #4]
    62b8:	4b09      	ldr	r3, [pc, #36]	; (62e0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    62ba:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    62bc:	687b      	ldr	r3, [r7, #4]
    62be:	681b      	ldr	r3, [r3, #0]
    62c0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    62c2:	68fb      	ldr	r3, [r7, #12]
    62c4:	085b      	lsrs	r3, r3, #1
    62c6:	f003 0301 	and.w	r3, r3, #1
    62ca:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    62cc:	68fb      	ldr	r3, [r7, #12]
    62ce:	2b00      	cmp	r3, #0
    62d0:	bf14      	ite	ne
    62d2:	2301      	movne	r3, #1
    62d4:	2300      	moveq	r3, #0
    62d6:	b2db      	uxtb	r3, r3
}
    62d8:	4618      	mov	r0, r3
    62da:	3710      	adds	r7, #16
    62dc:	46bd      	mov	sp, r7
    62de:	bd80      	pop	{r7, pc}
    62e0:	00006099 	.word	0x00006099

000062e4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    62e4:	b580      	push	{r7, lr}
    62e6:	b082      	sub	sp, #8
    62e8:	af00      	add	r7, sp, #0
    62ea:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    62ec:	687b      	ldr	r3, [r7, #4]
    62ee:	681b      	ldr	r3, [r3, #0]
    62f0:	f023 0202 	bic.w	r2, r3, #2
    62f4:	687b      	ldr	r3, [r7, #4]
    62f6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    62f8:	2103      	movs	r1, #3
    62fa:	6878      	ldr	r0, [r7, #4]
    62fc:	4b02      	ldr	r3, [pc, #8]	; (6308 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    62fe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6300:	bf00      	nop
    6302:	3708      	adds	r7, #8
    6304:	46bd      	mov	sp, r7
    6306:	bd80      	pop	{r7, pc}
    6308:	00006099 	.word	0x00006099

0000630c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    630c:	b580      	push	{r7, lr}
    630e:	b084      	sub	sp, #16
    6310:	af00      	add	r7, sp, #0
    6312:	6078      	str	r0, [r7, #4]
    6314:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6316:	2103      	movs	r1, #3
    6318:	6878      	ldr	r0, [r7, #4]
    631a:	4b07      	ldr	r3, [pc, #28]	; (6338 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    631c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    631e:	687b      	ldr	r3, [r7, #4]
    6320:	681b      	ldr	r3, [r3, #0]
    6322:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6324:	68fa      	ldr	r2, [r7, #12]
    6326:	683b      	ldr	r3, [r7, #0]
    6328:	4013      	ands	r3, r2
    632a:	60fb      	str	r3, [r7, #12]
	return tmp;
    632c:	68fb      	ldr	r3, [r7, #12]
}
    632e:	4618      	mov	r0, r3
    6330:	3710      	adds	r7, #16
    6332:	46bd      	mov	sp, r7
    6334:	bd80      	pop	{r7, pc}
    6336:	bf00      	nop
    6338:	00006099 	.word	0x00006099

0000633c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    633c:	b580      	push	{r7, lr}
    633e:	b082      	sub	sp, #8
    6340:	af00      	add	r7, sp, #0
    6342:	6078      	str	r0, [r7, #4]
    6344:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6346:	687b      	ldr	r3, [r7, #4]
    6348:	683a      	ldr	r2, [r7, #0]
    634a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    634c:	2103      	movs	r1, #3
    634e:	6878      	ldr	r0, [r7, #4]
    6350:	4b02      	ldr	r3, [pc, #8]	; (635c <hri_sercomspi_write_CTRLA_reg+0x20>)
    6352:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6354:	bf00      	nop
    6356:	3708      	adds	r7, #8
    6358:	46bd      	mov	sp, r7
    635a:	bd80      	pop	{r7, pc}
    635c:	00006099 	.word	0x00006099

00006360 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6360:	b580      	push	{r7, lr}
    6362:	b082      	sub	sp, #8
    6364:	af00      	add	r7, sp, #0
    6366:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6368:	687b      	ldr	r3, [r7, #4]
    636a:	685b      	ldr	r3, [r3, #4]
    636c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6370:	687b      	ldr	r3, [r7, #4]
    6372:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6374:	2104      	movs	r1, #4
    6376:	6878      	ldr	r0, [r7, #4]
    6378:	4b02      	ldr	r3, [pc, #8]	; (6384 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    637a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    637c:	bf00      	nop
    637e:	3708      	adds	r7, #8
    6380:	46bd      	mov	sp, r7
    6382:	bd80      	pop	{r7, pc}
    6384:	0000604d 	.word	0x0000604d

00006388 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6388:	b580      	push	{r7, lr}
    638a:	b082      	sub	sp, #8
    638c:	af00      	add	r7, sp, #0
    638e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6390:	687b      	ldr	r3, [r7, #4]
    6392:	685b      	ldr	r3, [r3, #4]
    6394:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6398:	687b      	ldr	r3, [r7, #4]
    639a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    639c:	2104      	movs	r1, #4
    639e:	6878      	ldr	r0, [r7, #4]
    63a0:	4b02      	ldr	r3, [pc, #8]	; (63ac <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    63a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63a4:	bf00      	nop
    63a6:	3708      	adds	r7, #8
    63a8:	46bd      	mov	sp, r7
    63aa:	bd80      	pop	{r7, pc}
    63ac:	0000604d 	.word	0x0000604d

000063b0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    63b0:	b580      	push	{r7, lr}
    63b2:	b082      	sub	sp, #8
    63b4:	af00      	add	r7, sp, #0
    63b6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    63b8:	687b      	ldr	r3, [r7, #4]
    63ba:	685b      	ldr	r3, [r3, #4]
    63bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    63c0:	687b      	ldr	r3, [r7, #4]
    63c2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    63c4:	2104      	movs	r1, #4
    63c6:	6878      	ldr	r0, [r7, #4]
    63c8:	4b02      	ldr	r3, [pc, #8]	; (63d4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    63ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63cc:	bf00      	nop
    63ce:	3708      	adds	r7, #8
    63d0:	46bd      	mov	sp, r7
    63d2:	bd80      	pop	{r7, pc}
    63d4:	0000604d 	.word	0x0000604d

000063d8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    63d8:	b580      	push	{r7, lr}
    63da:	b082      	sub	sp, #8
    63dc:	af00      	add	r7, sp, #0
    63de:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    63e0:	687b      	ldr	r3, [r7, #4]
    63e2:	685b      	ldr	r3, [r3, #4]
    63e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    63e8:	687b      	ldr	r3, [r7, #4]
    63ea:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    63ec:	2104      	movs	r1, #4
    63ee:	6878      	ldr	r0, [r7, #4]
    63f0:	4b02      	ldr	r3, [pc, #8]	; (63fc <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    63f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63f4:	bf00      	nop
    63f6:	3708      	adds	r7, #8
    63f8:	46bd      	mov	sp, r7
    63fa:	bd80      	pop	{r7, pc}
    63fc:	0000604d 	.word	0x0000604d

00006400 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6400:	b580      	push	{r7, lr}
    6402:	b082      	sub	sp, #8
    6404:	af00      	add	r7, sp, #0
    6406:	6078      	str	r0, [r7, #4]
    6408:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    640a:	687b      	ldr	r3, [r7, #4]
    640c:	685a      	ldr	r2, [r3, #4]
    640e:	683b      	ldr	r3, [r7, #0]
    6410:	041b      	lsls	r3, r3, #16
    6412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    6416:	431a      	orrs	r2, r3
    6418:	687b      	ldr	r3, [r7, #4]
    641a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    641c:	2104      	movs	r1, #4
    641e:	6878      	ldr	r0, [r7, #4]
    6420:	4b02      	ldr	r3, [pc, #8]	; (642c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    6422:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6424:	bf00      	nop
    6426:	3708      	adds	r7, #8
    6428:	46bd      	mov	sp, r7
    642a:	bd80      	pop	{r7, pc}
    642c:	0000604d 	.word	0x0000604d

00006430 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6430:	b580      	push	{r7, lr}
    6432:	b082      	sub	sp, #8
    6434:	af00      	add	r7, sp, #0
    6436:	6078      	str	r0, [r7, #4]
    6438:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    643a:	687b      	ldr	r3, [r7, #4]
    643c:	683a      	ldr	r2, [r7, #0]
    643e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6440:	2104      	movs	r1, #4
    6442:	6878      	ldr	r0, [r7, #4]
    6444:	4b02      	ldr	r3, [pc, #8]	; (6450 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    6446:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6448:	bf00      	nop
    644a:	3708      	adds	r7, #8
    644c:	46bd      	mov	sp, r7
    644e:	bd80      	pop	{r7, pc}
    6450:	0000604d 	.word	0x0000604d

00006454 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6454:	b580      	push	{r7, lr}
    6456:	b082      	sub	sp, #8
    6458:	af00      	add	r7, sp, #0
    645a:	6078      	str	r0, [r7, #4]
    645c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    645e:	687b      	ldr	r3, [r7, #4]
    6460:	683a      	ldr	r2, [r7, #0]
    6462:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6464:	2117      	movs	r1, #23
    6466:	6878      	ldr	r0, [r7, #4]
    6468:	4b02      	ldr	r3, [pc, #8]	; (6474 <hri_sercomspi_write_CTRLB_reg+0x20>)
    646a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    646c:	bf00      	nop
    646e:	3708      	adds	r7, #8
    6470:	46bd      	mov	sp, r7
    6472:	bd80      	pop	{r7, pc}
    6474:	00006099 	.word	0x00006099

00006478 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6478:	b480      	push	{r7}
    647a:	b083      	sub	sp, #12
    647c:	af00      	add	r7, sp, #0
    647e:	6078      	str	r0, [r7, #4]
    6480:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6482:	687b      	ldr	r3, [r7, #4]
    6484:	683a      	ldr	r2, [r7, #0]
    6486:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6488:	bf00      	nop
    648a:	370c      	adds	r7, #12
    648c:	46bd      	mov	sp, r7
    648e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6492:	4770      	bx	lr

00006494 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6494:	b480      	push	{r7}
    6496:	b083      	sub	sp, #12
    6498:	af00      	add	r7, sp, #0
    649a:	6078      	str	r0, [r7, #4]
    649c:	460b      	mov	r3, r1
    649e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    64a0:	687b      	ldr	r3, [r7, #4]
    64a2:	78fa      	ldrb	r2, [r7, #3]
    64a4:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64a6:	bf00      	nop
    64a8:	370c      	adds	r7, #12
    64aa:	46bd      	mov	sp, r7
    64ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    64b0:	4770      	bx	lr
	...

000064b4 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    64b4:	b580      	push	{r7, lr}
    64b6:	b084      	sub	sp, #16
    64b8:	af00      	add	r7, sp, #0
    64ba:	6078      	str	r0, [r7, #4]
    64bc:	460b      	mov	r3, r1
    64be:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    64c0:	687b      	ldr	r3, [r7, #4]
    64c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    64c4:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    64c6:	68fb      	ldr	r3, [r7, #12]
    64c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    64cc:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    64ce:	78fb      	ldrb	r3, [r7, #3]
    64d0:	039b      	lsls	r3, r3, #14
    64d2:	461a      	mov	r2, r3
    64d4:	68fb      	ldr	r3, [r7, #12]
    64d6:	4313      	orrs	r3, r2
    64d8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    64da:	687b      	ldr	r3, [r7, #4]
    64dc:	68fa      	ldr	r2, [r7, #12]
    64de:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    64e0:	2104      	movs	r1, #4
    64e2:	6878      	ldr	r0, [r7, #4]
    64e4:	4b02      	ldr	r3, [pc, #8]	; (64f0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    64e6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64e8:	bf00      	nop
    64ea:	3710      	adds	r7, #16
    64ec:	46bd      	mov	sp, r7
    64ee:	bd80      	pop	{r7, pc}
    64f0:	0000604d 	.word	0x0000604d

000064f4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    64f4:	b580      	push	{r7, lr}
    64f6:	b082      	sub	sp, #8
    64f8:	af00      	add	r7, sp, #0
    64fa:	6078      	str	r0, [r7, #4]
    64fc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    64fe:	687b      	ldr	r3, [r7, #4]
    6500:	683a      	ldr	r2, [r7, #0]
    6502:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6504:	2104      	movs	r1, #4
    6506:	6878      	ldr	r0, [r7, #4]
    6508:	4b02      	ldr	r3, [pc, #8]	; (6514 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    650a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    650c:	bf00      	nop
    650e:	3708      	adds	r7, #8
    6510:	46bd      	mov	sp, r7
    6512:	bd80      	pop	{r7, pc}
    6514:	0000604d 	.word	0x0000604d

00006518 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6518:	b580      	push	{r7, lr}
    651a:	b082      	sub	sp, #8
    651c:	af00      	add	r7, sp, #0
    651e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6520:	2104      	movs	r1, #4
    6522:	6878      	ldr	r0, [r7, #4]
    6524:	4b03      	ldr	r3, [pc, #12]	; (6534 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6526:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6528:	687b      	ldr	r3, [r7, #4]
    652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    652c:	4618      	mov	r0, r3
    652e:	3708      	adds	r7, #8
    6530:	46bd      	mov	sp, r7
    6532:	bd80      	pop	{r7, pc}
    6534:	0000604d 	.word	0x0000604d

00006538 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6538:	b480      	push	{r7}
    653a:	b083      	sub	sp, #12
    653c:	af00      	add	r7, sp, #0
    653e:	6078      	str	r0, [r7, #4]
    6540:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6542:	687b      	ldr	r3, [r7, #4]
    6544:	683a      	ldr	r2, [r7, #0]
    6546:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6548:	bf00      	nop
    654a:	370c      	adds	r7, #12
    654c:	46bd      	mov	sp, r7
    654e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6552:	4770      	bx	lr

00006554 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6554:	b580      	push	{r7, lr}
    6556:	b082      	sub	sp, #8
    6558:	af00      	add	r7, sp, #0
    655a:	6078      	str	r0, [r7, #4]
    655c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    655e:	687b      	ldr	r3, [r7, #4]
    6560:	683a      	ldr	r2, [r7, #0]
    6562:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6564:	2104      	movs	r1, #4
    6566:	6878      	ldr	r0, [r7, #4]
    6568:	4b02      	ldr	r3, [pc, #8]	; (6574 <hri_sercomi2cm_write_DATA_reg+0x20>)
    656a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    656c:	bf00      	nop
    656e:	3708      	adds	r7, #8
    6570:	46bd      	mov	sp, r7
    6572:	bd80      	pop	{r7, pc}
    6574:	0000604d 	.word	0x0000604d

00006578 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6578:	b580      	push	{r7, lr}
    657a:	b082      	sub	sp, #8
    657c:	af00      	add	r7, sp, #0
    657e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6580:	2104      	movs	r1, #4
    6582:	6878      	ldr	r0, [r7, #4]
    6584:	4b03      	ldr	r3, [pc, #12]	; (6594 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6586:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6588:	687b      	ldr	r3, [r7, #4]
    658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    658c:	4618      	mov	r0, r3
    658e:	3708      	adds	r7, #8
    6590:	46bd      	mov	sp, r7
    6592:	bd80      	pop	{r7, pc}
    6594:	0000604d 	.word	0x0000604d

00006598 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6598:	b480      	push	{r7}
    659a:	b083      	sub	sp, #12
    659c:	af00      	add	r7, sp, #0
    659e:	6078      	str	r0, [r7, #4]
    65a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    65a2:	687b      	ldr	r3, [r7, #4]
    65a4:	683a      	ldr	r2, [r7, #0]
    65a6:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65a8:	bf00      	nop
    65aa:	370c      	adds	r7, #12
    65ac:	46bd      	mov	sp, r7
    65ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    65b2:	4770      	bx	lr

000065b4 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    65b4:	b480      	push	{r7}
    65b6:	b083      	sub	sp, #12
    65b8:	af00      	add	r7, sp, #0
    65ba:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    65bc:	687b      	ldr	r3, [r7, #4]
    65be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    65c0:	4618      	mov	r0, r3
    65c2:	370c      	adds	r7, #12
    65c4:	46bd      	mov	sp, r7
    65c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    65ca:	4770      	bx	lr

000065cc <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    65cc:	b480      	push	{r7}
    65ce:	b083      	sub	sp, #12
    65d0:	af00      	add	r7, sp, #0
    65d2:	6078      	str	r0, [r7, #4]
    65d4:	460b      	mov	r3, r1
    65d6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	78fa      	ldrb	r2, [r7, #3]
    65dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65e0:	bf00      	nop
    65e2:	370c      	adds	r7, #12
    65e4:	46bd      	mov	sp, r7
    65e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    65ea:	4770      	bx	lr

000065ec <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    65ec:	b480      	push	{r7}
    65ee:	b083      	sub	sp, #12
    65f0:	af00      	add	r7, sp, #0
    65f2:	6078      	str	r0, [r7, #4]
    65f4:	460b      	mov	r3, r1
    65f6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    65f8:	687b      	ldr	r3, [r7, #4]
    65fa:	887a      	ldrh	r2, [r7, #2]
    65fc:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65fe:	bf00      	nop
    6600:	370c      	adds	r7, #12
    6602:	46bd      	mov	sp, r7
    6604:	f85d 7b04 	ldr.w	r7, [sp], #4
    6608:	4770      	bx	lr
	...

0000660c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    660c:	b580      	push	{r7, lr}
    660e:	b082      	sub	sp, #8
    6610:	af00      	add	r7, sp, #0
    6612:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6614:	2104      	movs	r1, #4
    6616:	6878      	ldr	r0, [r7, #4]
    6618:	4b06      	ldr	r3, [pc, #24]	; (6634 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    661a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    661c:	687b      	ldr	r3, [r7, #4]
    661e:	8b5b      	ldrh	r3, [r3, #26]
    6620:	b29b      	uxth	r3, r3
    6622:	091b      	lsrs	r3, r3, #4
    6624:	b29b      	uxth	r3, r3
    6626:	f003 0303 	and.w	r3, r3, #3
    662a:	b29b      	uxth	r3, r3
}
    662c:	4618      	mov	r0, r3
    662e:	3708      	adds	r7, #8
    6630:	46bd      	mov	sp, r7
    6632:	bd80      	pop	{r7, pc}
    6634:	0000604d 	.word	0x0000604d

00006638 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6638:	b580      	push	{r7, lr}
    663a:	b082      	sub	sp, #8
    663c:	af00      	add	r7, sp, #0
    663e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6640:	2104      	movs	r1, #4
    6642:	6878      	ldr	r0, [r7, #4]
    6644:	4b04      	ldr	r3, [pc, #16]	; (6658 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6646:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6648:	687b      	ldr	r3, [r7, #4]
    664a:	8b5b      	ldrh	r3, [r3, #26]
    664c:	b29b      	uxth	r3, r3
}
    664e:	4618      	mov	r0, r3
    6650:	3708      	adds	r7, #8
    6652:	46bd      	mov	sp, r7
    6654:	bd80      	pop	{r7, pc}
    6656:	bf00      	nop
    6658:	0000604d 	.word	0x0000604d

0000665c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    665c:	b580      	push	{r7, lr}
    665e:	b082      	sub	sp, #8
    6660:	af00      	add	r7, sp, #0
    6662:	6078      	str	r0, [r7, #4]
    6664:	460b      	mov	r3, r1
    6666:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6668:	687b      	ldr	r3, [r7, #4]
    666a:	887a      	ldrh	r2, [r7, #2]
    666c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    666e:	2104      	movs	r1, #4
    6670:	6878      	ldr	r0, [r7, #4]
    6672:	4b03      	ldr	r3, [pc, #12]	; (6680 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6674:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6676:	bf00      	nop
    6678:	3708      	adds	r7, #8
    667a:	46bd      	mov	sp, r7
    667c:	bd80      	pop	{r7, pc}
    667e:	bf00      	nop
    6680:	0000604d 	.word	0x0000604d

00006684 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6684:	b4b0      	push	{r4, r5, r7}
    6686:	b08d      	sub	sp, #52	; 0x34
    6688:	af00      	add	r7, sp, #0
    668a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    668c:	4b13      	ldr	r3, [pc, #76]	; (66dc <_sercom_get_hardware_index+0x58>)
    668e:	f107 040c 	add.w	r4, r7, #12
    6692:	461d      	mov	r5, r3
    6694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6698:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    669c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    66a0:	2300      	movs	r3, #0
    66a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    66a4:	e010      	b.n	66c8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    66a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    66a8:	009b      	lsls	r3, r3, #2
    66aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
    66ae:	4413      	add	r3, r2
    66b0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    66b4:	461a      	mov	r2, r3
    66b6:	687b      	ldr	r3, [r7, #4]
    66b8:	429a      	cmp	r2, r3
    66ba:	d102      	bne.n	66c2 <_sercom_get_hardware_index+0x3e>
			return i;
    66bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    66be:	b2db      	uxtb	r3, r3
    66c0:	e006      	b.n	66d0 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    66c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    66c4:	3301      	adds	r3, #1
    66c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    66c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    66ca:	2b07      	cmp	r3, #7
    66cc:	d9eb      	bls.n	66a6 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    66ce:	2300      	movs	r3, #0
}
    66d0:	4618      	mov	r0, r3
    66d2:	3734      	adds	r7, #52	; 0x34
    66d4:	46bd      	mov	sp, r7
    66d6:	bcb0      	pop	{r4, r5, r7}
    66d8:	4770      	bx	lr
    66da:	bf00      	nop
    66dc:	000100b4 	.word	0x000100b4

000066e0 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    66e0:	b480      	push	{r7}
    66e2:	b083      	sub	sp, #12
    66e4:	af00      	add	r7, sp, #0
    66e6:	6078      	str	r0, [r7, #4]
    66e8:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    66ea:	687b      	ldr	r3, [r7, #4]
    66ec:	4a05      	ldr	r2, [pc, #20]	; (6704 <_sercom_init_irq_param+0x24>)
    66ee:	4293      	cmp	r3, r2
    66f0:	d102      	bne.n	66f8 <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    66f2:	4a05      	ldr	r2, [pc, #20]	; (6708 <_sercom_init_irq_param+0x28>)
    66f4:	683b      	ldr	r3, [r7, #0]
    66f6:	6013      	str	r3, [r2, #0]
	}
}
    66f8:	bf00      	nop
    66fa:	370c      	adds	r7, #12
    66fc:	46bd      	mov	sp, r7
    66fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6702:	4770      	bx	lr
    6704:	43000c00 	.word	0x43000c00
    6708:	20000820 	.word	0x20000820

0000670c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    670c:	b580      	push	{r7, lr}
    670e:	b084      	sub	sp, #16
    6710:	af00      	add	r7, sp, #0
    6712:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6714:	6878      	ldr	r0, [r7, #4]
    6716:	4b13      	ldr	r3, [pc, #76]	; (6764 <_get_i2cm_index+0x58>)
    6718:	4798      	blx	r3
    671a:	4603      	mov	r3, r0
    671c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    671e:	2300      	movs	r3, #0
    6720:	73fb      	strb	r3, [r7, #15]
    6722:	e010      	b.n	6746 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6724:	7bfa      	ldrb	r2, [r7, #15]
    6726:	4910      	ldr	r1, [pc, #64]	; (6768 <_get_i2cm_index+0x5c>)
    6728:	4613      	mov	r3, r2
    672a:	005b      	lsls	r3, r3, #1
    672c:	4413      	add	r3, r2
    672e:	00db      	lsls	r3, r3, #3
    6730:	440b      	add	r3, r1
    6732:	781b      	ldrb	r3, [r3, #0]
    6734:	7bba      	ldrb	r2, [r7, #14]
    6736:	429a      	cmp	r2, r3
    6738:	d102      	bne.n	6740 <_get_i2cm_index+0x34>
			return i;
    673a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    673e:	e00d      	b.n	675c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6740:	7bfb      	ldrb	r3, [r7, #15]
    6742:	3301      	adds	r3, #1
    6744:	73fb      	strb	r3, [r7, #15]
    6746:	7bfb      	ldrb	r3, [r7, #15]
    6748:	2b02      	cmp	r3, #2
    674a:	d9eb      	bls.n	6724 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    674c:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    6750:	4906      	ldr	r1, [pc, #24]	; (676c <_get_i2cm_index+0x60>)
    6752:	2000      	movs	r0, #0
    6754:	4b06      	ldr	r3, [pc, #24]	; (6770 <_get_i2cm_index+0x64>)
    6756:	4798      	blx	r3
	return -1;
    6758:	f04f 33ff 	mov.w	r3, #4294967295
}
    675c:	4618      	mov	r0, r3
    675e:	3710      	adds	r7, #16
    6760:	46bd      	mov	sp, r7
    6762:	bd80      	pop	{r7, pc}
    6764:	00006685 	.word	0x00006685
    6768:	20000018 	.word	0x20000018
    676c:	00010098 	.word	0x00010098
    6770:	00003ab1 	.word	0x00003ab1

00006774 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6774:	b580      	push	{r7, lr}
    6776:	b082      	sub	sp, #8
    6778:	af00      	add	r7, sp, #0
    677a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    677c:	2103      	movs	r1, #3
    677e:	6878      	ldr	r0, [r7, #4]
    6780:	4b02      	ldr	r3, [pc, #8]	; (678c <_sercom_i2c_send_stop+0x18>)
    6782:	4798      	blx	r3
}
    6784:	bf00      	nop
    6786:	3708      	adds	r7, #8
    6788:	46bd      	mov	sp, r7
    678a:	bd80      	pop	{r7, pc}
    678c:	00006401 	.word	0x00006401

00006790 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6790:	b590      	push	{r4, r7, lr}
    6792:	b087      	sub	sp, #28
    6794:	af00      	add	r7, sp, #0
    6796:	60f8      	str	r0, [r7, #12]
    6798:	60b9      	str	r1, [r7, #8]
    679a:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    679c:	68f8      	ldr	r0, [r7, #12]
    679e:	4b7d      	ldr	r3, [pc, #500]	; (6994 <_sercom_i2c_sync_analyse_flags+0x204>)
    67a0:	4798      	blx	r3
    67a2:	4603      	mov	r3, r0
    67a4:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    67a6:	68f8      	ldr	r0, [r7, #12]
    67a8:	4b7b      	ldr	r3, [pc, #492]	; (6998 <_sercom_i2c_sync_analyse_flags+0x208>)
    67aa:	4798      	blx	r3
    67ac:	4603      	mov	r3, r0
    67ae:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    67b0:	68bb      	ldr	r3, [r7, #8]
    67b2:	f003 0301 	and.w	r3, r3, #1
    67b6:	2b00      	cmp	r3, #0
    67b8:	f000 8095 	beq.w	68e6 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    67bc:	8a7b      	ldrh	r3, [r7, #18]
    67be:	f003 0302 	and.w	r3, r3, #2
    67c2:	2b00      	cmp	r3, #0
    67c4:	d01d      	beq.n	6802 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    67c6:	68f8      	ldr	r0, [r7, #12]
    67c8:	4b74      	ldr	r3, [pc, #464]	; (699c <_sercom_i2c_sync_analyse_flags+0x20c>)
    67ca:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    67cc:	687b      	ldr	r3, [r7, #4]
    67ce:	885b      	ldrh	r3, [r3, #2]
    67d0:	b29b      	uxth	r3, r3
    67d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    67d6:	b29a      	uxth	r2, r3
    67d8:	687b      	ldr	r3, [r7, #4]
    67da:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    67dc:	687b      	ldr	r3, [r7, #4]
    67de:	885b      	ldrh	r3, [r3, #2]
    67e0:	b29b      	uxth	r3, r3
    67e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    67e6:	b29a      	uxth	r2, r3
    67e8:	687b      	ldr	r3, [r7, #4]
    67ea:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    67ec:	8a7b      	ldrh	r3, [r7, #18]
    67ee:	f003 0301 	and.w	r3, r3, #1
    67f2:	2b00      	cmp	r3, #0
    67f4:	d002      	beq.n	67fc <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    67f6:	f06f 0304 	mvn.w	r3, #4
    67fa:	e0c6      	b.n	698a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    67fc:	f06f 0303 	mvn.w	r3, #3
    6800:	e0c3      	b.n	698a <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6802:	8a7b      	ldrh	r3, [r7, #18]
    6804:	f003 0304 	and.w	r3, r3, #4
    6808:	2b00      	cmp	r3, #0
    680a:	d01f      	beq.n	684c <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    680c:	687b      	ldr	r3, [r7, #4]
    680e:	685b      	ldr	r3, [r3, #4]
    6810:	2b00      	cmp	r3, #0
    6812:	dd07      	ble.n	6824 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6814:	687b      	ldr	r3, [r7, #4]
    6816:	885b      	ldrh	r3, [r3, #2]
    6818:	b29b      	uxth	r3, r3
    681a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    681e:	b29a      	uxth	r2, r3
    6820:	687b      	ldr	r3, [r7, #4]
    6822:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6824:	687b      	ldr	r3, [r7, #4]
    6826:	885b      	ldrh	r3, [r3, #2]
    6828:	b29b      	uxth	r3, r3
    682a:	b21b      	sxth	r3, r3
    682c:	2b00      	cmp	r3, #0
    682e:	da02      	bge.n	6836 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6830:	68f8      	ldr	r0, [r7, #12]
    6832:	4b5b      	ldr	r3, [pc, #364]	; (69a0 <_sercom_i2c_sync_analyse_flags+0x210>)
    6834:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6836:	687b      	ldr	r3, [r7, #4]
    6838:	885b      	ldrh	r3, [r3, #2]
    683a:	b29b      	uxth	r3, r3
    683c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6840:	b29a      	uxth	r2, r3
    6842:	687b      	ldr	r3, [r7, #4]
    6844:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6846:	f06f 0301 	mvn.w	r3, #1
    684a:	e09e      	b.n	698a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    684c:	687b      	ldr	r3, [r7, #4]
    684e:	885b      	ldrh	r3, [r3, #2]
    6850:	b29b      	uxth	r3, r3
    6852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6856:	2b00      	cmp	r3, #0
    6858:	d01c      	beq.n	6894 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    685a:	687b      	ldr	r3, [r7, #4]
    685c:	881b      	ldrh	r3, [r3, #0]
    685e:	121b      	asrs	r3, r3, #8
    6860:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6862:	f003 0406 	and.w	r4, r3, #6
    6866:	68f8      	ldr	r0, [r7, #12]
    6868:	4b4e      	ldr	r3, [pc, #312]	; (69a4 <_sercom_i2c_sync_analyse_flags+0x214>)
    686a:	4798      	blx	r3
    686c:	4603      	mov	r3, r0
    686e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6872:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6874:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6878:	4619      	mov	r1, r3
    687a:	68f8      	ldr	r0, [r7, #12]
    687c:	4b4a      	ldr	r3, [pc, #296]	; (69a8 <_sercom_i2c_sync_analyse_flags+0x218>)
    687e:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6880:	687b      	ldr	r3, [r7, #4]
    6882:	885b      	ldrh	r3, [r3, #2]
    6884:	b29b      	uxth	r3, r3
    6886:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    688a:	b29a      	uxth	r2, r3
    688c:	687b      	ldr	r3, [r7, #4]
    688e:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6890:	2300      	movs	r3, #0
    6892:	e07a      	b.n	698a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6894:	687b      	ldr	r3, [r7, #4]
    6896:	685b      	ldr	r3, [r3, #4]
    6898:	2b00      	cmp	r3, #0
    689a:	d111      	bne.n	68c0 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    689c:	687b      	ldr	r3, [r7, #4]
    689e:	885b      	ldrh	r3, [r3, #2]
    68a0:	b29b      	uxth	r3, r3
    68a2:	b21b      	sxth	r3, r3
    68a4:	2b00      	cmp	r3, #0
    68a6:	da02      	bge.n	68ae <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    68a8:	68f8      	ldr	r0, [r7, #12]
    68aa:	4b3d      	ldr	r3, [pc, #244]	; (69a0 <_sercom_i2c_sync_analyse_flags+0x210>)
    68ac:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    68ae:	687b      	ldr	r3, [r7, #4]
    68b0:	885b      	ldrh	r3, [r3, #2]
    68b2:	b29b      	uxth	r3, r3
    68b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    68b8:	b29a      	uxth	r2, r3
    68ba:	687b      	ldr	r3, [r7, #4]
    68bc:	805a      	strh	r2, [r3, #2]
    68be:	e010      	b.n	68e2 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    68c0:	687b      	ldr	r3, [r7, #4]
    68c2:	689b      	ldr	r3, [r3, #8]
    68c4:	781b      	ldrb	r3, [r3, #0]
    68c6:	4619      	mov	r1, r3
    68c8:	68f8      	ldr	r0, [r7, #12]
    68ca:	4b38      	ldr	r3, [pc, #224]	; (69ac <_sercom_i2c_sync_analyse_flags+0x21c>)
    68cc:	4798      	blx	r3
				msg->buffer++;
    68ce:	687b      	ldr	r3, [r7, #4]
    68d0:	689b      	ldr	r3, [r3, #8]
    68d2:	1c5a      	adds	r2, r3, #1
    68d4:	687b      	ldr	r3, [r7, #4]
    68d6:	609a      	str	r2, [r3, #8]
				msg->len--;
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	685b      	ldr	r3, [r3, #4]
    68dc:	1e5a      	subs	r2, r3, #1
    68de:	687b      	ldr	r3, [r7, #4]
    68e0:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    68e2:	2300      	movs	r3, #0
    68e4:	e051      	b.n	698a <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    68e6:	68bb      	ldr	r3, [r7, #8]
    68e8:	f003 0302 	and.w	r3, r3, #2
    68ec:	2b00      	cmp	r3, #0
    68ee:	d04b      	beq.n	6988 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    68f0:	687b      	ldr	r3, [r7, #4]
    68f2:	685b      	ldr	r3, [r3, #4]
    68f4:	2b00      	cmp	r3, #0
    68f6:	d041      	beq.n	697c <_sercom_i2c_sync_analyse_flags+0x1ec>
    68f8:	8a7b      	ldrh	r3, [r7, #18]
    68fa:	f003 0304 	and.w	r3, r3, #4
    68fe:	2b00      	cmp	r3, #0
    6900:	d13c      	bne.n	697c <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6902:	687b      	ldr	r3, [r7, #4]
    6904:	685b      	ldr	r3, [r3, #4]
    6906:	1e5a      	subs	r2, r3, #1
    6908:	687b      	ldr	r3, [r7, #4]
    690a:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    690c:	687b      	ldr	r3, [r7, #4]
    690e:	685b      	ldr	r3, [r3, #4]
    6910:	2b00      	cmp	r3, #0
    6912:	d102      	bne.n	691a <_sercom_i2c_sync_analyse_flags+0x18a>
    6914:	697b      	ldr	r3, [r7, #20]
    6916:	2b00      	cmp	r3, #0
    6918:	d006      	beq.n	6928 <_sercom_i2c_sync_analyse_flags+0x198>
    691a:	687b      	ldr	r3, [r7, #4]
    691c:	685b      	ldr	r3, [r3, #4]
    691e:	2b01      	cmp	r3, #1
    6920:	d105      	bne.n	692e <_sercom_i2c_sync_analyse_flags+0x19e>
    6922:	697b      	ldr	r3, [r7, #20]
    6924:	2b00      	cmp	r3, #0
    6926:	d002      	beq.n	692e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6928:	68f8      	ldr	r0, [r7, #12]
    692a:	4b21      	ldr	r3, [pc, #132]	; (69b0 <_sercom_i2c_sync_analyse_flags+0x220>)
    692c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    692e:	687b      	ldr	r3, [r7, #4]
    6930:	685b      	ldr	r3, [r3, #4]
    6932:	2b00      	cmp	r3, #0
    6934:	d113      	bne.n	695e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6936:	687b      	ldr	r3, [r7, #4]
    6938:	885b      	ldrh	r3, [r3, #2]
    693a:	b29b      	uxth	r3, r3
    693c:	b21b      	sxth	r3, r3
    693e:	2b00      	cmp	r3, #0
    6940:	da05      	bge.n	694e <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6942:	68f8      	ldr	r0, [r7, #12]
    6944:	4b1b      	ldr	r3, [pc, #108]	; (69b4 <_sercom_i2c_sync_analyse_flags+0x224>)
    6946:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6948:	68f8      	ldr	r0, [r7, #12]
    694a:	4b15      	ldr	r3, [pc, #84]	; (69a0 <_sercom_i2c_sync_analyse_flags+0x210>)
    694c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    694e:	687b      	ldr	r3, [r7, #4]
    6950:	885b      	ldrh	r3, [r3, #2]
    6952:	b29b      	uxth	r3, r3
    6954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6958:	b29a      	uxth	r2, r3
    695a:	687b      	ldr	r3, [r7, #4]
    695c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    695e:	687b      	ldr	r3, [r7, #4]
    6960:	689c      	ldr	r4, [r3, #8]
    6962:	1c62      	adds	r2, r4, #1
    6964:	687b      	ldr	r3, [r7, #4]
    6966:	609a      	str	r2, [r3, #8]
    6968:	68f8      	ldr	r0, [r7, #12]
    696a:	4b13      	ldr	r3, [pc, #76]	; (69b8 <_sercom_i2c_sync_analyse_flags+0x228>)
    696c:	4798      	blx	r3
    696e:	4603      	mov	r3, r0
    6970:	b2db      	uxtb	r3, r3
    6972:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6974:	68f8      	ldr	r0, [r7, #12]
    6976:	4b11      	ldr	r3, [pc, #68]	; (69bc <_sercom_i2c_sync_analyse_flags+0x22c>)
    6978:	4798      	blx	r3
    697a:	e005      	b.n	6988 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    697c:	68f8      	ldr	r0, [r7, #12]
    697e:	4b0f      	ldr	r3, [pc, #60]	; (69bc <_sercom_i2c_sync_analyse_flags+0x22c>)
    6980:	4798      	blx	r3
			return I2C_NACK;
    6982:	f06f 0301 	mvn.w	r3, #1
    6986:	e000      	b.n	698a <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6988:	2300      	movs	r3, #0
}
    698a:	4618      	mov	r0, r3
    698c:	371c      	adds	r7, #28
    698e:	46bd      	mov	sp, r7
    6990:	bd90      	pop	{r4, r7, pc}
    6992:	bf00      	nop
    6994:	00006201 	.word	0x00006201
    6998:	00006639 	.word	0x00006639
    699c:	000060e5 	.word	0x000060e5
    69a0:	00006775 	.word	0x00006775
    69a4:	00006519 	.word	0x00006519
    69a8:	000064f5 	.word	0x000064f5
    69ac:	00006555 	.word	0x00006555
    69b0:	000063b1 	.word	0x000063b1
    69b4:	00006389 	.word	0x00006389
    69b8:	00006579 	.word	0x00006579
    69bc:	000060ff 	.word	0x000060ff

000069c0 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    69c0:	b580      	push	{r7, lr}
    69c2:	b086      	sub	sp, #24
    69c4:	af00      	add	r7, sp, #0
    69c6:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    69c8:	687b      	ldr	r3, [r7, #4]
    69ca:	691b      	ldr	r3, [r3, #16]
    69cc:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    69ce:	6938      	ldr	r0, [r7, #16]
    69d0:	4b37      	ldr	r3, [pc, #220]	; (6ab0 <_sercom_i2c_m_irq_handler+0xf0>)
    69d2:	4798      	blx	r3
    69d4:	4603      	mov	r3, r0
    69d6:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    69d8:	2300      	movs	r3, #0
    69da:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    69dc:	687b      	ldr	r3, [r7, #4]
    69de:	2b00      	cmp	r3, #0
    69e0:	bf14      	ite	ne
    69e2:	2301      	movne	r3, #1
    69e4:	2300      	moveq	r3, #0
    69e6:	b2db      	uxtb	r3, r3
    69e8:	f240 421e 	movw	r2, #1054	; 0x41e
    69ec:	4931      	ldr	r1, [pc, #196]	; (6ab4 <_sercom_i2c_m_irq_handler+0xf4>)
    69ee:	4618      	mov	r0, r3
    69f0:	4b31      	ldr	r3, [pc, #196]	; (6ab8 <_sercom_i2c_m_irq_handler+0xf8>)
    69f2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    69f4:	687b      	ldr	r3, [r7, #4]
    69f6:	691b      	ldr	r3, [r3, #16]
    69f8:	2b00      	cmp	r3, #0
    69fa:	bf14      	ite	ne
    69fc:	2301      	movne	r3, #1
    69fe:	2300      	moveq	r3, #0
    6a00:	b2db      	uxtb	r3, r3
    6a02:	f240 421f 	movw	r2, #1055	; 0x41f
    6a06:	492b      	ldr	r1, [pc, #172]	; (6ab4 <_sercom_i2c_m_irq_handler+0xf4>)
    6a08:	4618      	mov	r0, r3
    6a0a:	4b2b      	ldr	r3, [pc, #172]	; (6ab8 <_sercom_i2c_m_irq_handler+0xf8>)
    6a0c:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6a0e:	bf00      	nop
    6a10:	68fb      	ldr	r3, [r7, #12]
    6a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6a16:	2b00      	cmp	r3, #0
    6a18:	d126      	bne.n	6a68 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6a1a:	687b      	ldr	r3, [r7, #4]
    6a1c:	461a      	mov	r2, r3
    6a1e:	68f9      	ldr	r1, [r7, #12]
    6a20:	6938      	ldr	r0, [r7, #16]
    6a22:	4b26      	ldr	r3, [pc, #152]	; (6abc <_sercom_i2c_m_irq_handler+0xfc>)
    6a24:	4798      	blx	r3
    6a26:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6a28:	697b      	ldr	r3, [r7, #20]
    6a2a:	2b00      	cmp	r3, #0
    6a2c:	d11b      	bne.n	6a66 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6a2e:	68fb      	ldr	r3, [r7, #12]
    6a30:	f003 0301 	and.w	r3, r3, #1
    6a34:	2b00      	cmp	r3, #0
    6a36:	d008      	beq.n	6a4a <_sercom_i2c_m_irq_handler+0x8a>
    6a38:	687b      	ldr	r3, [r7, #4]
    6a3a:	699b      	ldr	r3, [r3, #24]
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d004      	beq.n	6a4a <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6a40:	687b      	ldr	r3, [r7, #4]
    6a42:	699b      	ldr	r3, [r3, #24]
    6a44:	6878      	ldr	r0, [r7, #4]
    6a46:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6a48:	e02e      	b.n	6aa8 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6a4a:	68fb      	ldr	r3, [r7, #12]
    6a4c:	f003 0302 	and.w	r3, r3, #2
    6a50:	2b00      	cmp	r3, #0
    6a52:	d029      	beq.n	6aa8 <_sercom_i2c_m_irq_handler+0xe8>
    6a54:	687b      	ldr	r3, [r7, #4]
    6a56:	69db      	ldr	r3, [r3, #28]
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d025      	beq.n	6aa8 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6a5c:	687b      	ldr	r3, [r7, #4]
    6a5e:	69db      	ldr	r3, [r3, #28]
    6a60:	6878      	ldr	r0, [r7, #4]
    6a62:	4798      	blx	r3
		return;
    6a64:	e020      	b.n	6aa8 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    6a66:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6a68:	687b      	ldr	r3, [r7, #4]
    6a6a:	885b      	ldrh	r3, [r3, #2]
    6a6c:	b29b      	uxth	r3, r3
    6a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a72:	b29a      	uxth	r2, r3
    6a74:	687b      	ldr	r3, [r7, #4]
    6a76:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    6a78:	687b      	ldr	r3, [r7, #4]
    6a7a:	695b      	ldr	r3, [r3, #20]
    6a7c:	2b00      	cmp	r3, #0
    6a7e:	d014      	beq.n	6aaa <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6a80:	697b      	ldr	r3, [r7, #20]
    6a82:	2b00      	cmp	r3, #0
    6a84:	d005      	beq.n	6a92 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    6a86:	687b      	ldr	r3, [r7, #4]
    6a88:	695b      	ldr	r3, [r3, #20]
    6a8a:	6979      	ldr	r1, [r7, #20]
    6a8c:	6878      	ldr	r0, [r7, #4]
    6a8e:	4798      	blx	r3
    6a90:	e005      	b.n	6a9e <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6a92:	687b      	ldr	r3, [r7, #4]
    6a94:	695b      	ldr	r3, [r3, #20]
    6a96:	f06f 0104 	mvn.w	r1, #4
    6a9a:	6878      	ldr	r0, [r7, #4]
    6a9c:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6a9e:	2180      	movs	r1, #128	; 0x80
    6aa0:	6938      	ldr	r0, [r7, #16]
    6aa2:	4b07      	ldr	r3, [pc, #28]	; (6ac0 <_sercom_i2c_m_irq_handler+0x100>)
    6aa4:	4798      	blx	r3
    6aa6:	e000      	b.n	6aaa <_sercom_i2c_m_irq_handler+0xea>
		return;
    6aa8:	bf00      	nop
	}
}
    6aaa:	3718      	adds	r7, #24
    6aac:	46bd      	mov	sp, r7
    6aae:	bd80      	pop	{r7, pc}
    6ab0:	00006119 	.word	0x00006119
    6ab4:	00010098 	.word	0x00010098
    6ab8:	00003ab1 	.word	0x00003ab1
    6abc:	00006791 	.word	0x00006791
    6ac0:	00006133 	.word	0x00006133

00006ac4 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6ac4:	b580      	push	{r7, lr}
    6ac6:	b082      	sub	sp, #8
    6ac8:	af00      	add	r7, sp, #0
    6aca:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6acc:	6878      	ldr	r0, [r7, #4]
    6ace:	4b05      	ldr	r3, [pc, #20]	; (6ae4 <_sercom_get_irq_num+0x20>)
    6ad0:	4798      	blx	r3
    6ad2:	4603      	mov	r3, r0
    6ad4:	009b      	lsls	r3, r3, #2
    6ad6:	b2db      	uxtb	r3, r3
    6ad8:	332e      	adds	r3, #46	; 0x2e
    6ada:	b2db      	uxtb	r3, r3
}
    6adc:	4618      	mov	r0, r3
    6ade:	3708      	adds	r7, #8
    6ae0:	46bd      	mov	sp, r7
    6ae2:	bd80      	pop	{r7, pc}
    6ae4:	00006685 	.word	0x00006685

00006ae8 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6ae8:	b580      	push	{r7, lr}
    6aea:	b086      	sub	sp, #24
    6aec:	af00      	add	r7, sp, #0
    6aee:	6078      	str	r0, [r7, #4]
    6af0:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    6af2:	687b      	ldr	r3, [r7, #4]
    6af4:	2b00      	cmp	r3, #0
    6af6:	bf14      	ite	ne
    6af8:	2301      	movne	r3, #1
    6afa:	2300      	moveq	r3, #0
    6afc:	b2db      	uxtb	r3, r3
    6afe:	f240 4292 	movw	r2, #1170	; 0x492
    6b02:	491d      	ldr	r1, [pc, #116]	; (6b78 <_i2c_m_async_init+0x90>)
    6b04:	4618      	mov	r0, r3
    6b06:	4b1d      	ldr	r3, [pc, #116]	; (6b7c <_i2c_m_async_init+0x94>)
    6b08:	4798      	blx	r3

	i2c_dev->hw = hw;
    6b0a:	687b      	ldr	r3, [r7, #4]
    6b0c:	683a      	ldr	r2, [r7, #0]
    6b0e:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6b10:	687b      	ldr	r3, [r7, #4]
    6b12:	6839      	ldr	r1, [r7, #0]
    6b14:	4618      	mov	r0, r3
    6b16:	4b1a      	ldr	r3, [pc, #104]	; (6b80 <_i2c_m_async_init+0x98>)
    6b18:	4798      	blx	r3
    6b1a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6b1c:	68fb      	ldr	r3, [r7, #12]
    6b1e:	2b00      	cmp	r3, #0
    6b20:	d001      	beq.n	6b26 <_i2c_m_async_init+0x3e>
		return init_status;
    6b22:	68fb      	ldr	r3, [r7, #12]
    6b24:	e024      	b.n	6b70 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6b26:	6879      	ldr	r1, [r7, #4]
    6b28:	6838      	ldr	r0, [r7, #0]
    6b2a:	4b16      	ldr	r3, [pc, #88]	; (6b84 <_i2c_m_async_init+0x9c>)
    6b2c:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6b2e:	6838      	ldr	r0, [r7, #0]
    6b30:	4b15      	ldr	r3, [pc, #84]	; (6b88 <_i2c_m_async_init+0xa0>)
    6b32:	4798      	blx	r3
    6b34:	4603      	mov	r3, r0
    6b36:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6b38:	2300      	movs	r3, #0
    6b3a:	613b      	str	r3, [r7, #16]
    6b3c:	e014      	b.n	6b68 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6b3e:	7dfb      	ldrb	r3, [r7, #23]
    6b40:	b21b      	sxth	r3, r3
    6b42:	4618      	mov	r0, r3
    6b44:	4b11      	ldr	r3, [pc, #68]	; (6b8c <_i2c_m_async_init+0xa4>)
    6b46:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6b48:	7dfb      	ldrb	r3, [r7, #23]
    6b4a:	b21b      	sxth	r3, r3
    6b4c:	4618      	mov	r0, r3
    6b4e:	4b10      	ldr	r3, [pc, #64]	; (6b90 <_i2c_m_async_init+0xa8>)
    6b50:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    6b52:	7dfb      	ldrb	r3, [r7, #23]
    6b54:	b21b      	sxth	r3, r3
    6b56:	4618      	mov	r0, r3
    6b58:	4b0e      	ldr	r3, [pc, #56]	; (6b94 <_i2c_m_async_init+0xac>)
    6b5a:	4798      	blx	r3
		irq++;
    6b5c:	7dfb      	ldrb	r3, [r7, #23]
    6b5e:	3301      	adds	r3, #1
    6b60:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6b62:	693b      	ldr	r3, [r7, #16]
    6b64:	3301      	adds	r3, #1
    6b66:	613b      	str	r3, [r7, #16]
    6b68:	693b      	ldr	r3, [r7, #16]
    6b6a:	2b03      	cmp	r3, #3
    6b6c:	d9e7      	bls.n	6b3e <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6b6e:	2300      	movs	r3, #0
}
    6b70:	4618      	mov	r0, r3
    6b72:	3718      	adds	r7, #24
    6b74:	46bd      	mov	sp, r7
    6b76:	bd80      	pop	{r7, pc}
    6b78:	00010098 	.word	0x00010098
    6b7c:	00003ab1 	.word	0x00003ab1
    6b80:	0000716d 	.word	0x0000716d
    6b84:	000066e1 	.word	0x000066e1
    6b88:	00006ac5 	.word	0x00006ac5
    6b8c:	00005fcd 	.word	0x00005fcd
    6b90:	00006011 	.word	0x00006011
    6b94:	00005f91 	.word	0x00005f91

00006b98 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    6b98:	b590      	push	{r4, r7, lr}
    6b9a:	b087      	sub	sp, #28
    6b9c:	af00      	add	r7, sp, #0
    6b9e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	691b      	ldr	r3, [r3, #16]
    6ba4:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6ba6:	687b      	ldr	r3, [r7, #4]
    6ba8:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6baa:	6978      	ldr	r0, [r7, #20]
    6bac:	4b33      	ldr	r3, [pc, #204]	; (6c7c <_sercom_i2c_send_address+0xe4>)
    6bae:	4798      	blx	r3
    6bb0:	4603      	mov	r3, r0
    6bb2:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6bb4:	687b      	ldr	r3, [r7, #4]
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	bf14      	ite	ne
    6bba:	2301      	movne	r3, #1
    6bbc:	2300      	moveq	r3, #0
    6bbe:	b2db      	uxtb	r3, r3
    6bc0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    6bc4:	492e      	ldr	r1, [pc, #184]	; (6c80 <_sercom_i2c_send_address+0xe8>)
    6bc6:	4618      	mov	r0, r3
    6bc8:	4b2e      	ldr	r3, [pc, #184]	; (6c84 <_sercom_i2c_send_address+0xec>)
    6bca:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6bcc:	693b      	ldr	r3, [r7, #16]
    6bce:	685b      	ldr	r3, [r3, #4]
    6bd0:	2b01      	cmp	r3, #1
    6bd2:	d106      	bne.n	6be2 <_sercom_i2c_send_address+0x4a>
    6bd4:	68fb      	ldr	r3, [r7, #12]
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d003      	beq.n	6be2 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6bda:	6978      	ldr	r0, [r7, #20]
    6bdc:	4b2a      	ldr	r3, [pc, #168]	; (6c88 <_sercom_i2c_send_address+0xf0>)
    6bde:	4798      	blx	r3
    6be0:	e002      	b.n	6be8 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6be2:	6978      	ldr	r0, [r7, #20]
    6be4:	4b29      	ldr	r3, [pc, #164]	; (6c8c <_sercom_i2c_send_address+0xf4>)
    6be6:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6be8:	693b      	ldr	r3, [r7, #16]
    6bea:	881b      	ldrh	r3, [r3, #0]
    6bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	d022      	beq.n	6c3a <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6bf4:	693b      	ldr	r3, [r7, #16]
    6bf6:	885b      	ldrh	r3, [r3, #2]
    6bf8:	b29b      	uxth	r3, r3
    6bfa:	f003 0301 	and.w	r3, r3, #1
    6bfe:	2b00      	cmp	r3, #0
    6c00:	d007      	beq.n	6c12 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6c02:	693b      	ldr	r3, [r7, #16]
    6c04:	885b      	ldrh	r3, [r3, #2]
    6c06:	b29b      	uxth	r3, r3
    6c08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6c0c:	b29a      	uxth	r2, r3
    6c0e:	693b      	ldr	r3, [r7, #16]
    6c10:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6c12:	693b      	ldr	r3, [r7, #16]
    6c14:	881b      	ldrh	r3, [r3, #0]
    6c16:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6c18:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6c1c:	401c      	ands	r4, r3
    6c1e:	6978      	ldr	r0, [r7, #20]
    6c20:	4b1b      	ldr	r3, [pc, #108]	; (6c90 <_sercom_i2c_send_address+0xf8>)
    6c22:	4798      	blx	r3
    6c24:	4603      	mov	r3, r0
    6c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6c2a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6c30:	4619      	mov	r1, r3
    6c32:	6978      	ldr	r0, [r7, #20]
    6c34:	4b17      	ldr	r3, [pc, #92]	; (6c94 <_sercom_i2c_send_address+0xfc>)
    6c36:	4798      	blx	r3
    6c38:	e01a      	b.n	6c70 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6c3a:	693b      	ldr	r3, [r7, #16]
    6c3c:	881b      	ldrh	r3, [r3, #0]
    6c3e:	005b      	lsls	r3, r3, #1
    6c40:	b2db      	uxtb	r3, r3
    6c42:	693a      	ldr	r2, [r7, #16]
    6c44:	8852      	ldrh	r2, [r2, #2]
    6c46:	b292      	uxth	r2, r2
    6c48:	f002 0201 	and.w	r2, r2, #1
    6c4c:	2a00      	cmp	r2, #0
    6c4e:	bf14      	ite	ne
    6c50:	2201      	movne	r2, #1
    6c52:	2200      	moveq	r2, #0
    6c54:	b2d2      	uxtb	r2, r2
    6c56:	4313      	orrs	r3, r2
    6c58:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6c5a:	6978      	ldr	r0, [r7, #20]
    6c5c:	4b0c      	ldr	r3, [pc, #48]	; (6c90 <_sercom_i2c_send_address+0xf8>)
    6c5e:	4798      	blx	r3
    6c60:	4603      	mov	r3, r0
    6c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6c66:	4323      	orrs	r3, r4
    6c68:	4619      	mov	r1, r3
    6c6a:	6978      	ldr	r0, [r7, #20]
    6c6c:	4b09      	ldr	r3, [pc, #36]	; (6c94 <_sercom_i2c_send_address+0xfc>)
    6c6e:	4798      	blx	r3
	}

	return ERR_NONE;
    6c70:	2300      	movs	r3, #0
}
    6c72:	4618      	mov	r0, r3
    6c74:	371c      	adds	r7, #28
    6c76:	46bd      	mov	sp, r7
    6c78:	bd90      	pop	{r4, r7, pc}
    6c7a:	bf00      	nop
    6c7c:	00006201 	.word	0x00006201
    6c80:	00010098 	.word	0x00010098
    6c84:	00003ab1 	.word	0x00003ab1
    6c88:	000063b1 	.word	0x000063b1
    6c8c:	000063d9 	.word	0x000063d9
    6c90:	00006519 	.word	0x00006519
    6c94:	000064f5 	.word	0x000064f5

00006c98 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    6c98:	b580      	push	{r7, lr}
    6c9a:	b084      	sub	sp, #16
    6c9c:	af00      	add	r7, sp, #0
    6c9e:	6078      	str	r0, [r7, #4]
    6ca0:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6ca2:	687b      	ldr	r3, [r7, #4]
    6ca4:	2b00      	cmp	r3, #0
    6ca6:	bf14      	ite	ne
    6ca8:	2301      	movne	r3, #1
    6caa:	2300      	moveq	r3, #0
    6cac:	b2db      	uxtb	r3, r3
    6cae:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    6cb2:	492a      	ldr	r1, [pc, #168]	; (6d5c <_i2c_m_async_transfer+0xc4>)
    6cb4:	4618      	mov	r0, r3
    6cb6:	4b2a      	ldr	r3, [pc, #168]	; (6d60 <_i2c_m_async_transfer+0xc8>)
    6cb8:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6cba:	687b      	ldr	r3, [r7, #4]
    6cbc:	691b      	ldr	r3, [r3, #16]
    6cbe:	2b00      	cmp	r3, #0
    6cc0:	bf14      	ite	ne
    6cc2:	2301      	movne	r3, #1
    6cc4:	2300      	moveq	r3, #0
    6cc6:	b2db      	uxtb	r3, r3
    6cc8:	f240 42e9 	movw	r2, #1257	; 0x4e9
    6ccc:	4923      	ldr	r1, [pc, #140]	; (6d5c <_i2c_m_async_transfer+0xc4>)
    6cce:	4618      	mov	r0, r3
    6cd0:	4b23      	ldr	r3, [pc, #140]	; (6d60 <_i2c_m_async_transfer+0xc8>)
    6cd2:	4798      	blx	r3
	ASSERT(msg);
    6cd4:	683b      	ldr	r3, [r7, #0]
    6cd6:	2b00      	cmp	r3, #0
    6cd8:	bf14      	ite	ne
    6cda:	2301      	movne	r3, #1
    6cdc:	2300      	moveq	r3, #0
    6cde:	b2db      	uxtb	r3, r3
    6ce0:	f240 42ea 	movw	r2, #1258	; 0x4ea
    6ce4:	491d      	ldr	r1, [pc, #116]	; (6d5c <_i2c_m_async_transfer+0xc4>)
    6ce6:	4618      	mov	r0, r3
    6ce8:	4b1d      	ldr	r3, [pc, #116]	; (6d60 <_i2c_m_async_transfer+0xc8>)
    6cea:	4798      	blx	r3

	if (msg->len == 0) {
    6cec:	683b      	ldr	r3, [r7, #0]
    6cee:	685b      	ldr	r3, [r3, #4]
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	d101      	bne.n	6cf8 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6cf4:	2300      	movs	r3, #0
    6cf6:	e02d      	b.n	6d54 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6cf8:	687b      	ldr	r3, [r7, #4]
    6cfa:	885b      	ldrh	r3, [r3, #2]
    6cfc:	b29b      	uxth	r3, r3
    6cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6d02:	2b00      	cmp	r3, #0
    6d04:	d002      	beq.n	6d0c <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6d06:	f06f 0303 	mvn.w	r3, #3
    6d0a:	e023      	b.n	6d54 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6d0c:	683b      	ldr	r3, [r7, #0]
    6d0e:	885b      	ldrh	r3, [r3, #2]
    6d10:	b29b      	uxth	r3, r3
    6d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6d16:	b29a      	uxth	r2, r3
    6d18:	683b      	ldr	r3, [r7, #0]
    6d1a:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6d1c:	687b      	ldr	r3, [r7, #4]
    6d1e:	683a      	ldr	r2, [r7, #0]
    6d20:	ca07      	ldmia	r2, {r0, r1, r2}
    6d22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6d26:	687b      	ldr	r3, [r7, #4]
    6d28:	691b      	ldr	r3, [r3, #16]
    6d2a:	4618      	mov	r0, r3
    6d2c:	4b0d      	ldr	r3, [pc, #52]	; (6d64 <_i2c_m_async_transfer+0xcc>)
    6d2e:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6d30:	6878      	ldr	r0, [r7, #4]
    6d32:	4b0d      	ldr	r3, [pc, #52]	; (6d68 <_i2c_m_async_transfer+0xd0>)
    6d34:	4798      	blx	r3
    6d36:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6d38:	68fb      	ldr	r3, [r7, #12]
    6d3a:	2b00      	cmp	r3, #0
    6d3c:	d009      	beq.n	6d52 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6d3e:	687b      	ldr	r3, [r7, #4]
    6d40:	885b      	ldrh	r3, [r3, #2]
    6d42:	b29b      	uxth	r3, r3
    6d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d48:	b29a      	uxth	r2, r3
    6d4a:	687b      	ldr	r3, [r7, #4]
    6d4c:	805a      	strh	r2, [r3, #2]

		return ret;
    6d4e:	68fb      	ldr	r3, [r7, #12]
    6d50:	e000      	b.n	6d54 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6d52:	2300      	movs	r3, #0
}
    6d54:	4618      	mov	r0, r3
    6d56:	3710      	adds	r7, #16
    6d58:	46bd      	mov	sp, r7
    6d5a:	bd80      	pop	{r7, pc}
    6d5c:	00010098 	.word	0x00010098
    6d60:	00003ab1 	.word	0x00003ab1
    6d64:	00006361 	.word	0x00006361
    6d68:	00006b99 	.word	0x00006b99

00006d6c <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6d6c:	b480      	push	{r7}
    6d6e:	b085      	sub	sp, #20
    6d70:	af00      	add	r7, sp, #0
    6d72:	60f8      	str	r0, [r7, #12]
    6d74:	460b      	mov	r3, r1
    6d76:	607a      	str	r2, [r7, #4]
    6d78:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6d7a:	7afb      	ldrb	r3, [r7, #11]
    6d7c:	2b01      	cmp	r3, #1
    6d7e:	d008      	beq.n	6d92 <_i2c_m_async_register_callback+0x26>
    6d80:	2b02      	cmp	r3, #2
    6d82:	d00a      	beq.n	6d9a <_i2c_m_async_register_callback+0x2e>
    6d84:	2b00      	cmp	r3, #0
    6d86:	d000      	beq.n	6d8a <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    6d88:	e00b      	b.n	6da2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6d8a:	68fb      	ldr	r3, [r7, #12]
    6d8c:	687a      	ldr	r2, [r7, #4]
    6d8e:	615a      	str	r2, [r3, #20]
		break;
    6d90:	e007      	b.n	6da2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6d92:	68fb      	ldr	r3, [r7, #12]
    6d94:	687a      	ldr	r2, [r7, #4]
    6d96:	619a      	str	r2, [r3, #24]
		break;
    6d98:	e003      	b.n	6da2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6d9a:	68fb      	ldr	r3, [r7, #12]
    6d9c:	687a      	ldr	r2, [r7, #4]
    6d9e:	61da      	str	r2, [r3, #28]
		break;
    6da0:	bf00      	nop
	}

	return ERR_NONE;
    6da2:	2300      	movs	r3, #0
}
    6da4:	4618      	mov	r0, r3
    6da6:	3714      	adds	r7, #20
    6da8:	46bd      	mov	sp, r7
    6daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dae:	4770      	bx	lr

00006db0 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6db0:	b580      	push	{r7, lr}
    6db2:	b082      	sub	sp, #8
    6db4:	af00      	add	r7, sp, #0
    6db6:	6078      	str	r0, [r7, #4]
    6db8:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	2b00      	cmp	r3, #0
    6dbe:	bf14      	ite	ne
    6dc0:	2301      	movne	r3, #1
    6dc2:	2300      	moveq	r3, #0
    6dc4:	b2db      	uxtb	r3, r3
    6dc6:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    6dca:	4908      	ldr	r1, [pc, #32]	; (6dec <_i2c_m_sync_init+0x3c>)
    6dcc:	4618      	mov	r0, r3
    6dce:	4b08      	ldr	r3, [pc, #32]	; (6df0 <_i2c_m_sync_init+0x40>)
    6dd0:	4798      	blx	r3

	i2c_dev->hw = hw;
    6dd2:	687b      	ldr	r3, [r7, #4]
    6dd4:	683a      	ldr	r2, [r7, #0]
    6dd6:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6dd8:	687b      	ldr	r3, [r7, #4]
    6dda:	6839      	ldr	r1, [r7, #0]
    6ddc:	4618      	mov	r0, r3
    6dde:	4b05      	ldr	r3, [pc, #20]	; (6df4 <_i2c_m_sync_init+0x44>)
    6de0:	4798      	blx	r3
    6de2:	4603      	mov	r3, r0
}
    6de4:	4618      	mov	r0, r3
    6de6:	3708      	adds	r7, #8
    6de8:	46bd      	mov	sp, r7
    6dea:	bd80      	pop	{r7, pc}
    6dec:	00010098 	.word	0x00010098
    6df0:	00003ab1 	.word	0x00003ab1
    6df4:	0000716d 	.word	0x0000716d

00006df8 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6df8:	b580      	push	{r7, lr}
    6dfa:	b082      	sub	sp, #8
    6dfc:	af00      	add	r7, sp, #0
    6dfe:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6e00:	687b      	ldr	r3, [r7, #4]
    6e02:	2b00      	cmp	r3, #0
    6e04:	bf14      	ite	ne
    6e06:	2301      	movne	r3, #1
    6e08:	2300      	moveq	r3, #0
    6e0a:	b2db      	uxtb	r3, r3
    6e0c:	f240 5265 	movw	r2, #1381	; 0x565
    6e10:	4906      	ldr	r1, [pc, #24]	; (6e2c <_i2c_m_sync_enable+0x34>)
    6e12:	4618      	mov	r0, r3
    6e14:	4b06      	ldr	r3, [pc, #24]	; (6e30 <_i2c_m_sync_enable+0x38>)
    6e16:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6e18:	687b      	ldr	r3, [r7, #4]
    6e1a:	691b      	ldr	r3, [r3, #16]
    6e1c:	4618      	mov	r0, r3
    6e1e:	4b05      	ldr	r3, [pc, #20]	; (6e34 <_i2c_m_sync_enable+0x3c>)
    6e20:	4798      	blx	r3
    6e22:	4603      	mov	r3, r0
}
    6e24:	4618      	mov	r0, r3
    6e26:	3708      	adds	r7, #8
    6e28:	46bd      	mov	sp, r7
    6e2a:	bd80      	pop	{r7, pc}
    6e2c:	00010098 	.word	0x00010098
    6e30:	00003ab1 	.word	0x00003ab1
    6e34:	000070e1 	.word	0x000070e1

00006e38 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6e38:	b580      	push	{r7, lr}
    6e3a:	b084      	sub	sp, #16
    6e3c:	af00      	add	r7, sp, #0
    6e3e:	6078      	str	r0, [r7, #4]
    6e40:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6e46:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6e48:	687b      	ldr	r3, [r7, #4]
    6e4a:	691b      	ldr	r3, [r3, #16]
    6e4c:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6e4e:	68b8      	ldr	r0, [r7, #8]
    6e50:	4b0f      	ldr	r3, [pc, #60]	; (6e90 <_sercom_i2c_sync_wait_bus+0x58>)
    6e52:	4798      	blx	r3
    6e54:	4603      	mov	r3, r0
    6e56:	461a      	mov	r2, r3
    6e58:	683b      	ldr	r3, [r7, #0]
    6e5a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6e5c:	68fb      	ldr	r3, [r7, #12]
    6e5e:	1e5a      	subs	r2, r3, #1
    6e60:	60fa      	str	r2, [r7, #12]
    6e62:	2b00      	cmp	r3, #0
    6e64:	d102      	bne.n	6e6c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6e66:	f06f 0304 	mvn.w	r3, #4
    6e6a:	e00c      	b.n	6e86 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6e6c:	683b      	ldr	r3, [r7, #0]
    6e6e:	681b      	ldr	r3, [r3, #0]
    6e70:	f003 0301 	and.w	r3, r3, #1
    6e74:	2b00      	cmp	r3, #0
    6e76:	d105      	bne.n	6e84 <_sercom_i2c_sync_wait_bus+0x4c>
    6e78:	683b      	ldr	r3, [r7, #0]
    6e7a:	681b      	ldr	r3, [r3, #0]
    6e7c:	f003 0302 	and.w	r3, r3, #2
    6e80:	2b00      	cmp	r3, #0
    6e82:	d0e4      	beq.n	6e4e <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6e84:	2300      	movs	r3, #0
}
    6e86:	4618      	mov	r0, r3
    6e88:	3710      	adds	r7, #16
    6e8a:	46bd      	mov	sp, r7
    6e8c:	bd80      	pop	{r7, pc}
    6e8e:	bf00      	nop
    6e90:	00006119 	.word	0x00006119

00006e94 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6e94:	b590      	push	{r4, r7, lr}
    6e96:	b087      	sub	sp, #28
    6e98:	af00      	add	r7, sp, #0
    6e9a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6e9c:	687b      	ldr	r3, [r7, #4]
    6e9e:	691b      	ldr	r3, [r3, #16]
    6ea0:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6ea2:	687b      	ldr	r3, [r7, #4]
    6ea4:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6ea6:	6978      	ldr	r0, [r7, #20]
    6ea8:	4b39      	ldr	r3, [pc, #228]	; (6f90 <_sercom_i2c_sync_send_address+0xfc>)
    6eaa:	4798      	blx	r3
    6eac:	4603      	mov	r3, r0
    6eae:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6eb0:	687b      	ldr	r3, [r7, #4]
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	bf14      	ite	ne
    6eb6:	2301      	movne	r3, #1
    6eb8:	2300      	moveq	r3, #0
    6eba:	b2db      	uxtb	r3, r3
    6ebc:	f240 52d5 	movw	r2, #1493	; 0x5d5
    6ec0:	4934      	ldr	r1, [pc, #208]	; (6f94 <_sercom_i2c_sync_send_address+0x100>)
    6ec2:	4618      	mov	r0, r3
    6ec4:	4b34      	ldr	r3, [pc, #208]	; (6f98 <_sercom_i2c_sync_send_address+0x104>)
    6ec6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6ec8:	693b      	ldr	r3, [r7, #16]
    6eca:	685b      	ldr	r3, [r3, #4]
    6ecc:	2b01      	cmp	r3, #1
    6ece:	d106      	bne.n	6ede <_sercom_i2c_sync_send_address+0x4a>
    6ed0:	68fb      	ldr	r3, [r7, #12]
    6ed2:	2b00      	cmp	r3, #0
    6ed4:	d003      	beq.n	6ede <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6ed6:	6978      	ldr	r0, [r7, #20]
    6ed8:	4b30      	ldr	r3, [pc, #192]	; (6f9c <_sercom_i2c_sync_send_address+0x108>)
    6eda:	4798      	blx	r3
    6edc:	e002      	b.n	6ee4 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6ede:	6978      	ldr	r0, [r7, #20]
    6ee0:	4b2f      	ldr	r3, [pc, #188]	; (6fa0 <_sercom_i2c_sync_send_address+0x10c>)
    6ee2:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6ee4:	693b      	ldr	r3, [r7, #16]
    6ee6:	881b      	ldrh	r3, [r3, #0]
    6ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6eec:	2b00      	cmp	r3, #0
    6eee:	d022      	beq.n	6f36 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6ef0:	693b      	ldr	r3, [r7, #16]
    6ef2:	885b      	ldrh	r3, [r3, #2]
    6ef4:	b29b      	uxth	r3, r3
    6ef6:	f003 0301 	and.w	r3, r3, #1
    6efa:	2b00      	cmp	r3, #0
    6efc:	d007      	beq.n	6f0e <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6efe:	693b      	ldr	r3, [r7, #16]
    6f00:	885b      	ldrh	r3, [r3, #2]
    6f02:	b29b      	uxth	r3, r3
    6f04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6f08:	b29a      	uxth	r2, r3
    6f0a:	693b      	ldr	r3, [r7, #16]
    6f0c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6f0e:	693b      	ldr	r3, [r7, #16]
    6f10:	881b      	ldrh	r3, [r3, #0]
    6f12:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6f14:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6f18:	401c      	ands	r4, r3
    6f1a:	6978      	ldr	r0, [r7, #20]
    6f1c:	4b21      	ldr	r3, [pc, #132]	; (6fa4 <_sercom_i2c_sync_send_address+0x110>)
    6f1e:	4798      	blx	r3
    6f20:	4603      	mov	r3, r0
    6f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6f26:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6f2c:	4619      	mov	r1, r3
    6f2e:	6978      	ldr	r0, [r7, #20]
    6f30:	4b1d      	ldr	r3, [pc, #116]	; (6fa8 <_sercom_i2c_sync_send_address+0x114>)
    6f32:	4798      	blx	r3
    6f34:	e01a      	b.n	6f6c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6f36:	693b      	ldr	r3, [r7, #16]
    6f38:	881b      	ldrh	r3, [r3, #0]
    6f3a:	005b      	lsls	r3, r3, #1
    6f3c:	b2db      	uxtb	r3, r3
    6f3e:	693a      	ldr	r2, [r7, #16]
    6f40:	8852      	ldrh	r2, [r2, #2]
    6f42:	b292      	uxth	r2, r2
    6f44:	f002 0201 	and.w	r2, r2, #1
    6f48:	2a00      	cmp	r2, #0
    6f4a:	bf14      	ite	ne
    6f4c:	2201      	movne	r2, #1
    6f4e:	2200      	moveq	r2, #0
    6f50:	b2d2      	uxtb	r2, r2
    6f52:	4313      	orrs	r3, r2
    6f54:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6f56:	6978      	ldr	r0, [r7, #20]
    6f58:	4b12      	ldr	r3, [pc, #72]	; (6fa4 <_sercom_i2c_sync_send_address+0x110>)
    6f5a:	4798      	blx	r3
    6f5c:	4603      	mov	r3, r0
    6f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6f62:	4323      	orrs	r3, r4
    6f64:	4619      	mov	r1, r3
    6f66:	6978      	ldr	r0, [r7, #20]
    6f68:	4b0f      	ldr	r3, [pc, #60]	; (6fa8 <_sercom_i2c_sync_send_address+0x114>)
    6f6a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6f6c:	f107 0308 	add.w	r3, r7, #8
    6f70:	4619      	mov	r1, r3
    6f72:	6878      	ldr	r0, [r7, #4]
    6f74:	4b0d      	ldr	r3, [pc, #52]	; (6fac <_sercom_i2c_sync_send_address+0x118>)
    6f76:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6f78:	68bb      	ldr	r3, [r7, #8]
    6f7a:	693a      	ldr	r2, [r7, #16]
    6f7c:	4619      	mov	r1, r3
    6f7e:	6978      	ldr	r0, [r7, #20]
    6f80:	4b0b      	ldr	r3, [pc, #44]	; (6fb0 <_sercom_i2c_sync_send_address+0x11c>)
    6f82:	4798      	blx	r3
    6f84:	4603      	mov	r3, r0
}
    6f86:	4618      	mov	r0, r3
    6f88:	371c      	adds	r7, #28
    6f8a:	46bd      	mov	sp, r7
    6f8c:	bd90      	pop	{r4, r7, pc}
    6f8e:	bf00      	nop
    6f90:	00006201 	.word	0x00006201
    6f94:	00010098 	.word	0x00010098
    6f98:	00003ab1 	.word	0x00003ab1
    6f9c:	000063b1 	.word	0x000063b1
    6fa0:	000063d9 	.word	0x000063d9
    6fa4:	00006519 	.word	0x00006519
    6fa8:	000064f5 	.word	0x000064f5
    6fac:	00006e39 	.word	0x00006e39
    6fb0:	00006791 	.word	0x00006791

00006fb4 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    6fb4:	b580      	push	{r7, lr}
    6fb6:	b086      	sub	sp, #24
    6fb8:	af00      	add	r7, sp, #0
    6fba:	6078      	str	r0, [r7, #4]
    6fbc:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    6fbe:	687b      	ldr	r3, [r7, #4]
    6fc0:	691b      	ldr	r3, [r3, #16]
    6fc2:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    6fc4:	687b      	ldr	r3, [r7, #4]
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	bf14      	ite	ne
    6fca:	2301      	movne	r3, #1
    6fcc:	2300      	moveq	r3, #0
    6fce:	b2db      	uxtb	r3, r3
    6fd0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    6fd4:	493b      	ldr	r1, [pc, #236]	; (70c4 <_i2c_m_sync_transfer+0x110>)
    6fd6:	4618      	mov	r0, r3
    6fd8:	4b3b      	ldr	r3, [pc, #236]	; (70c8 <_i2c_m_sync_transfer+0x114>)
    6fda:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6fdc:	687b      	ldr	r3, [r7, #4]
    6fde:	691b      	ldr	r3, [r3, #16]
    6fe0:	2b00      	cmp	r3, #0
    6fe2:	bf14      	ite	ne
    6fe4:	2301      	movne	r3, #1
    6fe6:	2300      	moveq	r3, #0
    6fe8:	b2db      	uxtb	r3, r3
    6fea:	f240 6201 	movw	r2, #1537	; 0x601
    6fee:	4935      	ldr	r1, [pc, #212]	; (70c4 <_i2c_m_sync_transfer+0x110>)
    6ff0:	4618      	mov	r0, r3
    6ff2:	4b35      	ldr	r3, [pc, #212]	; (70c8 <_i2c_m_sync_transfer+0x114>)
    6ff4:	4798      	blx	r3
	ASSERT(msg);
    6ff6:	683b      	ldr	r3, [r7, #0]
    6ff8:	2b00      	cmp	r3, #0
    6ffa:	bf14      	ite	ne
    6ffc:	2301      	movne	r3, #1
    6ffe:	2300      	moveq	r3, #0
    7000:	b2db      	uxtb	r3, r3
    7002:	f240 6202 	movw	r2, #1538	; 0x602
    7006:	492f      	ldr	r1, [pc, #188]	; (70c4 <_i2c_m_sync_transfer+0x110>)
    7008:	4618      	mov	r0, r3
    700a:	4b2f      	ldr	r3, [pc, #188]	; (70c8 <_i2c_m_sync_transfer+0x114>)
    700c:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    700e:	687b      	ldr	r3, [r7, #4]
    7010:	885b      	ldrh	r3, [r3, #2]
    7012:	b29b      	uxth	r3, r3
    7014:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7018:	2b00      	cmp	r3, #0
    701a:	d002      	beq.n	7022 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    701c:	f06f 0305 	mvn.w	r3, #5
    7020:	e04c      	b.n	70bc <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    7022:	683b      	ldr	r3, [r7, #0]
    7024:	885b      	ldrh	r3, [r3, #2]
    7026:	b29b      	uxth	r3, r3
    7028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    702c:	b29a      	uxth	r2, r3
    702e:	683b      	ldr	r3, [r7, #0]
    7030:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    7032:	687b      	ldr	r3, [r7, #4]
    7034:	683a      	ldr	r2, [r7, #0]
    7036:	ca07      	ldmia	r2, {r0, r1, r2}
    7038:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    703c:	6938      	ldr	r0, [r7, #16]
    703e:	4b23      	ldr	r3, [pc, #140]	; (70cc <_i2c_m_sync_transfer+0x118>)
    7040:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    7042:	6878      	ldr	r0, [r7, #4]
    7044:	4b22      	ldr	r3, [pc, #136]	; (70d0 <_i2c_m_sync_transfer+0x11c>)
    7046:	4798      	blx	r3
    7048:	6178      	str	r0, [r7, #20]

	if (ret) {
    704a:	697b      	ldr	r3, [r7, #20]
    704c:	2b00      	cmp	r3, #0
    704e:	d02d      	beq.n	70ac <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7050:	687b      	ldr	r3, [r7, #4]
    7052:	885b      	ldrh	r3, [r3, #2]
    7054:	b29b      	uxth	r3, r3
    7056:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    705a:	b29a      	uxth	r2, r3
    705c:	687b      	ldr	r3, [r7, #4]
    705e:	805a      	strh	r2, [r3, #2]

		return ret;
    7060:	697b      	ldr	r3, [r7, #20]
    7062:	e02b      	b.n	70bc <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7064:	f107 030c 	add.w	r3, r7, #12
    7068:	4619      	mov	r1, r3
    706a:	6878      	ldr	r0, [r7, #4]
    706c:	4b19      	ldr	r3, [pc, #100]	; (70d4 <_i2c_m_sync_transfer+0x120>)
    706e:	4798      	blx	r3
    7070:	6178      	str	r0, [r7, #20]

		if (ret) {
    7072:	697b      	ldr	r3, [r7, #20]
    7074:	2b00      	cmp	r3, #0
    7076:	d012      	beq.n	709e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7078:	683b      	ldr	r3, [r7, #0]
    707a:	885b      	ldrh	r3, [r3, #2]
    707c:	b29b      	uxth	r3, r3
    707e:	b21b      	sxth	r3, r3
    7080:	2b00      	cmp	r3, #0
    7082:	da02      	bge.n	708a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    7084:	6938      	ldr	r0, [r7, #16]
    7086:	4b14      	ldr	r3, [pc, #80]	; (70d8 <_i2c_m_sync_transfer+0x124>)
    7088:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    708a:	687b      	ldr	r3, [r7, #4]
    708c:	885b      	ldrh	r3, [r3, #2]
    708e:	b29b      	uxth	r3, r3
    7090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7094:	b29a      	uxth	r2, r3
    7096:	687b      	ldr	r3, [r7, #4]
    7098:	805a      	strh	r2, [r3, #2]

			return ret;
    709a:	697b      	ldr	r3, [r7, #20]
    709c:	e00e      	b.n	70bc <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    709e:	68fb      	ldr	r3, [r7, #12]
    70a0:	687a      	ldr	r2, [r7, #4]
    70a2:	4619      	mov	r1, r3
    70a4:	6938      	ldr	r0, [r7, #16]
    70a6:	4b0d      	ldr	r3, [pc, #52]	; (70dc <_i2c_m_sync_transfer+0x128>)
    70a8:	4798      	blx	r3
    70aa:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    70ac:	687b      	ldr	r3, [r7, #4]
    70ae:	885b      	ldrh	r3, [r3, #2]
    70b0:	b29b      	uxth	r3, r3
    70b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    70b6:	2b00      	cmp	r3, #0
    70b8:	d1d4      	bne.n	7064 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    70ba:	697b      	ldr	r3, [r7, #20]
}
    70bc:	4618      	mov	r0, r3
    70be:	3718      	adds	r7, #24
    70c0:	46bd      	mov	sp, r7
    70c2:	bd80      	pop	{r7, pc}
    70c4:	00010098 	.word	0x00010098
    70c8:	00003ab1 	.word	0x00003ab1
    70cc:	00006361 	.word	0x00006361
    70d0:	00006e95 	.word	0x00006e95
    70d4:	00006e39 	.word	0x00006e39
    70d8:	00006775 	.word	0x00006775
    70dc:	00006791 	.word	0x00006791

000070e0 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    70e0:	b580      	push	{r7, lr}
    70e2:	b084      	sub	sp, #16
    70e4:	af00      	add	r7, sp, #0
    70e6:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    70e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    70ec:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    70ee:	2304      	movs	r3, #4
    70f0:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    70f2:	687b      	ldr	r3, [r7, #4]
    70f4:	2b00      	cmp	r3, #0
    70f6:	bf14      	ite	ne
    70f8:	2301      	movne	r3, #1
    70fa:	2300      	moveq	r3, #0
    70fc:	b2db      	uxtb	r3, r3
    70fe:	f240 6235 	movw	r2, #1589	; 0x635
    7102:	4915      	ldr	r1, [pc, #84]	; (7158 <_i2c_m_enable_implementation+0x78>)
    7104:	4618      	mov	r0, r3
    7106:	4b15      	ldr	r3, [pc, #84]	; (715c <_i2c_m_enable_implementation+0x7c>)
    7108:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    710a:	6878      	ldr	r0, [r7, #4]
    710c:	4b14      	ldr	r3, [pc, #80]	; (7160 <_i2c_m_enable_implementation+0x80>)
    710e:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7110:	e016      	b.n	7140 <_i2c_m_enable_implementation+0x60>
		timeout--;
    7112:	68fb      	ldr	r3, [r7, #12]
    7114:	3b01      	subs	r3, #1
    7116:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    7118:	68fb      	ldr	r3, [r7, #12]
    711a:	2b00      	cmp	r3, #0
    711c:	dc10      	bgt.n	7140 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    711e:	68bb      	ldr	r3, [r7, #8]
    7120:	3b01      	subs	r3, #1
    7122:	60bb      	str	r3, [r7, #8]
    7124:	68bb      	ldr	r3, [r7, #8]
    7126:	2b00      	cmp	r3, #0
    7128:	d007      	beq.n	713a <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    712a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    712e:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    7130:	2110      	movs	r1, #16
    7132:	6878      	ldr	r0, [r7, #4]
    7134:	4b0b      	ldr	r3, [pc, #44]	; (7164 <_i2c_m_enable_implementation+0x84>)
    7136:	4798      	blx	r3
    7138:	e002      	b.n	7140 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    713a:	f06f 0305 	mvn.w	r3, #5
    713e:	e006      	b.n	714e <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7140:	6878      	ldr	r0, [r7, #4]
    7142:	4b09      	ldr	r3, [pc, #36]	; (7168 <_i2c_m_enable_implementation+0x88>)
    7144:	4798      	blx	r3
    7146:	4603      	mov	r3, r0
    7148:	2b01      	cmp	r3, #1
    714a:	d1e2      	bne.n	7112 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    714c:	2300      	movs	r3, #0
}
    714e:	4618      	mov	r0, r3
    7150:	3710      	adds	r7, #16
    7152:	46bd      	mov	sp, r7
    7154:	bd80      	pop	{r7, pc}
    7156:	bf00      	nop
    7158:	00010098 	.word	0x00010098
    715c:	00003ab1 	.word	0x00003ab1
    7160:	000061b1 	.word	0x000061b1
    7164:	0000665d 	.word	0x0000665d
    7168:	0000660d 	.word	0x0000660d

0000716c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    716c:	b580      	push	{r7, lr}
    716e:	b084      	sub	sp, #16
    7170:	af00      	add	r7, sp, #0
    7172:	6078      	str	r0, [r7, #4]
    7174:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    7176:	6838      	ldr	r0, [r7, #0]
    7178:	4b42      	ldr	r3, [pc, #264]	; (7284 <_i2c_m_sync_init_impl+0x118>)
    717a:	4798      	blx	r3
    717c:	4603      	mov	r3, r0
    717e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7180:	2101      	movs	r1, #1
    7182:	6838      	ldr	r0, [r7, #0]
    7184:	4b40      	ldr	r3, [pc, #256]	; (7288 <_i2c_m_sync_init_impl+0x11c>)
    7186:	4798      	blx	r3
    7188:	4603      	mov	r3, r0
    718a:	f083 0301 	eor.w	r3, r3, #1
    718e:	b2db      	uxtb	r3, r3
    7190:	2b00      	cmp	r3, #0
    7192:	d020      	beq.n	71d6 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7194:	7bfa      	ldrb	r2, [r7, #15]
    7196:	493d      	ldr	r1, [pc, #244]	; (728c <_i2c_m_sync_init_impl+0x120>)
    7198:	4613      	mov	r3, r2
    719a:	005b      	lsls	r3, r3, #1
    719c:	4413      	add	r3, r2
    719e:	00db      	lsls	r3, r3, #3
    71a0:	440b      	add	r3, r1
    71a2:	3304      	adds	r3, #4
    71a4:	681b      	ldr	r3, [r3, #0]
    71a6:	f003 031c 	and.w	r3, r3, #28
    71aa:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    71ac:	2102      	movs	r1, #2
    71ae:	6838      	ldr	r0, [r7, #0]
    71b0:	4b37      	ldr	r3, [pc, #220]	; (7290 <_i2c_m_sync_init_impl+0x124>)
    71b2:	4798      	blx	r3
    71b4:	4603      	mov	r3, r0
    71b6:	2b00      	cmp	r3, #0
    71b8:	d006      	beq.n	71c8 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    71ba:	6838      	ldr	r0, [r7, #0]
    71bc:	4b35      	ldr	r3, [pc, #212]	; (7294 <_i2c_m_sync_init_impl+0x128>)
    71be:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    71c0:	2102      	movs	r1, #2
    71c2:	6838      	ldr	r0, [r7, #0]
    71c4:	4b34      	ldr	r3, [pc, #208]	; (7298 <_i2c_m_sync_init_impl+0x12c>)
    71c6:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    71c8:	68bb      	ldr	r3, [r7, #8]
    71ca:	f043 0301 	orr.w	r3, r3, #1
    71ce:	4619      	mov	r1, r3
    71d0:	6838      	ldr	r0, [r7, #0]
    71d2:	4b32      	ldr	r3, [pc, #200]	; (729c <_i2c_m_sync_init_impl+0x130>)
    71d4:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    71d6:	2101      	movs	r1, #1
    71d8:	6838      	ldr	r0, [r7, #0]
    71da:	4b2f      	ldr	r3, [pc, #188]	; (7298 <_i2c_m_sync_init_impl+0x12c>)
    71dc:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    71de:	7bfa      	ldrb	r2, [r7, #15]
    71e0:	492a      	ldr	r1, [pc, #168]	; (728c <_i2c_m_sync_init_impl+0x120>)
    71e2:	4613      	mov	r3, r2
    71e4:	005b      	lsls	r3, r3, #1
    71e6:	4413      	add	r3, r2
    71e8:	00db      	lsls	r3, r3, #3
    71ea:	440b      	add	r3, r1
    71ec:	3304      	adds	r3, #4
    71ee:	681b      	ldr	r3, [r3, #0]
    71f0:	4619      	mov	r1, r3
    71f2:	6838      	ldr	r0, [r7, #0]
    71f4:	4b29      	ldr	r3, [pc, #164]	; (729c <_i2c_m_sync_init_impl+0x130>)
    71f6:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    71f8:	7bfa      	ldrb	r2, [r7, #15]
    71fa:	4924      	ldr	r1, [pc, #144]	; (728c <_i2c_m_sync_init_impl+0x120>)
    71fc:	4613      	mov	r3, r2
    71fe:	005b      	lsls	r3, r3, #1
    7200:	4413      	add	r3, r2
    7202:	00db      	lsls	r3, r3, #3
    7204:	440b      	add	r3, r1
    7206:	3308      	adds	r3, #8
    7208:	681b      	ldr	r3, [r3, #0]
    720a:	4619      	mov	r1, r3
    720c:	6838      	ldr	r0, [r7, #0]
    720e:	4b24      	ldr	r3, [pc, #144]	; (72a0 <_i2c_m_sync_init_impl+0x134>)
    7210:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    7212:	7bfa      	ldrb	r2, [r7, #15]
    7214:	491d      	ldr	r1, [pc, #116]	; (728c <_i2c_m_sync_init_impl+0x120>)
    7216:	4613      	mov	r3, r2
    7218:	005b      	lsls	r3, r3, #1
    721a:	4413      	add	r3, r2
    721c:	00db      	lsls	r3, r3, #3
    721e:	440b      	add	r3, r1
    7220:	330c      	adds	r3, #12
    7222:	681b      	ldr	r3, [r3, #0]
    7224:	4619      	mov	r1, r3
    7226:	6838      	ldr	r0, [r7, #0]
    7228:	4b1e      	ldr	r3, [pc, #120]	; (72a4 <_i2c_m_sync_init_impl+0x138>)
    722a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    722c:	7bfa      	ldrb	r2, [r7, #15]
    722e:	4917      	ldr	r1, [pc, #92]	; (728c <_i2c_m_sync_init_impl+0x120>)
    7230:	4613      	mov	r3, r2
    7232:	005b      	lsls	r3, r3, #1
    7234:	4413      	add	r3, r2
    7236:	00db      	lsls	r3, r3, #3
    7238:	440b      	add	r3, r1
    723a:	3304      	adds	r3, #4
    723c:	681b      	ldr	r3, [r3, #0]
    723e:	0e1b      	lsrs	r3, r3, #24
    7240:	b29b      	uxth	r3, r3
    7242:	f003 0303 	and.w	r3, r3, #3
    7246:	b29a      	uxth	r2, r3
    7248:	687b      	ldr	r3, [r7, #4]
    724a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	899b      	ldrh	r3, [r3, #12]
    7250:	2b01      	cmp	r3, #1
    7252:	bf8c      	ite	hi
    7254:	2301      	movhi	r3, #1
    7256:	2300      	movls	r3, #0
    7258:	b2db      	uxtb	r3, r3
    725a:	4619      	mov	r1, r3
    725c:	6838      	ldr	r0, [r7, #0]
    725e:	4b12      	ldr	r3, [pc, #72]	; (72a8 <_i2c_m_sync_init_impl+0x13c>)
    7260:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    7262:	7bfa      	ldrb	r2, [r7, #15]
    7264:	4909      	ldr	r1, [pc, #36]	; (728c <_i2c_m_sync_init_impl+0x120>)
    7266:	4613      	mov	r3, r2
    7268:	005b      	lsls	r3, r3, #1
    726a:	4413      	add	r3, r2
    726c:	00db      	lsls	r3, r3, #3
    726e:	440b      	add	r3, r1
    7270:	3312      	adds	r3, #18
    7272:	881a      	ldrh	r2, [r3, #0]
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7278:	2300      	movs	r3, #0
}
    727a:	4618      	mov	r0, r3
    727c:	3710      	adds	r7, #16
    727e:	46bd      	mov	sp, r7
    7280:	bd80      	pop	{r7, pc}
    7282:	bf00      	nop
    7284:	0000670d 	.word	0x0000670d
    7288:	00006071 	.word	0x00006071
    728c:	20000018 	.word	0x20000018
    7290:	00006231 	.word	0x00006231
    7294:	000061d9 	.word	0x000061d9
    7298:	0000604d 	.word	0x0000604d
    729c:	00006261 	.word	0x00006261
    72a0:	00006431 	.word	0x00006431
    72a4:	00006479 	.word	0x00006479
    72a8:	000064b5 	.word	0x000064b5

000072ac <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    72ac:	b580      	push	{r7, lr}
    72ae:	b082      	sub	sp, #8
    72b0:	af00      	add	r7, sp, #0
    72b2:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    72b4:	2101      	movs	r1, #1
    72b6:	6878      	ldr	r0, [r7, #4]
    72b8:	4b07      	ldr	r3, [pc, #28]	; (72d8 <_spi_sync_enable+0x2c>)
    72ba:	4798      	blx	r3
    72bc:	4603      	mov	r3, r0
    72be:	2b00      	cmp	r3, #0
    72c0:	d002      	beq.n	72c8 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    72c2:	f06f 0303 	mvn.w	r3, #3
    72c6:	e003      	b.n	72d0 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    72c8:	6878      	ldr	r0, [r7, #4]
    72ca:	4b04      	ldr	r3, [pc, #16]	; (72dc <_spi_sync_enable+0x30>)
    72cc:	4798      	blx	r3

	return ERR_NONE;
    72ce:	2300      	movs	r3, #0
}
    72d0:	4618      	mov	r0, r3
    72d2:	3708      	adds	r7, #8
    72d4:	46bd      	mov	sp, r7
    72d6:	bd80      	pop	{r7, pc}
    72d8:	000060bd 	.word	0x000060bd
    72dc:	00006285 	.word	0x00006285

000072e0 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    72e0:	b580      	push	{r7, lr}
    72e2:	b082      	sub	sp, #8
    72e4:	af00      	add	r7, sp, #0
    72e6:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    72e8:	2101      	movs	r1, #1
    72ea:	6878      	ldr	r0, [r7, #4]
    72ec:	4b07      	ldr	r3, [pc, #28]	; (730c <_spi_sync_disable+0x2c>)
    72ee:	4798      	blx	r3
    72f0:	4603      	mov	r3, r0
    72f2:	2b00      	cmp	r3, #0
    72f4:	d002      	beq.n	72fc <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    72f6:	f06f 0303 	mvn.w	r3, #3
    72fa:	e003      	b.n	7304 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    72fc:	6878      	ldr	r0, [r7, #4]
    72fe:	4b04      	ldr	r3, [pc, #16]	; (7310 <_spi_sync_disable+0x30>)
    7300:	4798      	blx	r3

	return ERR_NONE;
    7302:	2300      	movs	r3, #0
}
    7304:	4618      	mov	r0, r3
    7306:	3708      	adds	r7, #8
    7308:	46bd      	mov	sp, r7
    730a:	bd80      	pop	{r7, pc}
    730c:	000060bd 	.word	0x000060bd
    7310:	000062e5 	.word	0x000062e5

00007314 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7314:	b580      	push	{r7, lr}
    7316:	b082      	sub	sp, #8
    7318:	af00      	add	r7, sp, #0
    731a:	6078      	str	r0, [r7, #4]
    731c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    731e:	687b      	ldr	r3, [r7, #4]
    7320:	2b00      	cmp	r3, #0
    7322:	d004      	beq.n	732e <_spi_load_regs_master+0x1a>
    7324:	683b      	ldr	r3, [r7, #0]
    7326:	2b00      	cmp	r3, #0
    7328:	d001      	beq.n	732e <_spi_load_regs_master+0x1a>
    732a:	2301      	movs	r3, #1
    732c:	e000      	b.n	7330 <_spi_load_regs_master+0x1c>
    732e:	2300      	movs	r3, #0
    7330:	f003 0301 	and.w	r3, r3, #1
    7334:	b2db      	uxtb	r3, r3
    7336:	f640 1239 	movw	r2, #2361	; 0x939
    733a:	4915      	ldr	r1, [pc, #84]	; (7390 <_spi_load_regs_master+0x7c>)
    733c:	4618      	mov	r0, r3
    733e:	4b15      	ldr	r3, [pc, #84]	; (7394 <_spi_load_regs_master+0x80>)
    7340:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7342:	683b      	ldr	r3, [r7, #0]
    7344:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7346:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    734a:	f023 0301 	bic.w	r3, r3, #1
    734e:	4619      	mov	r1, r3
    7350:	6878      	ldr	r0, [r7, #4]
    7352:	4b11      	ldr	r3, [pc, #68]	; (7398 <_spi_load_regs_master+0x84>)
    7354:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    7356:	683b      	ldr	r3, [r7, #0]
    7358:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    735a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    735e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7366:	4619      	mov	r1, r3
    7368:	6878      	ldr	r0, [r7, #4]
    736a:	4b0c      	ldr	r3, [pc, #48]	; (739c <_spi_load_regs_master+0x88>)
    736c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    736e:	683b      	ldr	r3, [r7, #0]
    7370:	7b1b      	ldrb	r3, [r3, #12]
    7372:	4619      	mov	r1, r3
    7374:	6878      	ldr	r0, [r7, #4]
    7376:	4b0a      	ldr	r3, [pc, #40]	; (73a0 <_spi_load_regs_master+0x8c>)
    7378:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    737a:	683b      	ldr	r3, [r7, #0]
    737c:	7b5b      	ldrb	r3, [r3, #13]
    737e:	4619      	mov	r1, r3
    7380:	6878      	ldr	r0, [r7, #4]
    7382:	4b08      	ldr	r3, [pc, #32]	; (73a4 <_spi_load_regs_master+0x90>)
    7384:	4798      	blx	r3
}
    7386:	bf00      	nop
    7388:	3708      	adds	r7, #8
    738a:	46bd      	mov	sp, r7
    738c:	bd80      	pop	{r7, pc}
    738e:	bf00      	nop
    7390:	00010098 	.word	0x00010098
    7394:	00003ab1 	.word	0x00003ab1
    7398:	0000633d 	.word	0x0000633d
    739c:	00006455 	.word	0x00006455
    73a0:	00006495 	.word	0x00006495
    73a4:	000065cd 	.word	0x000065cd

000073a8 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    73a8:	b580      	push	{r7, lr}
    73aa:	b082      	sub	sp, #8
    73ac:	af00      	add	r7, sp, #0
    73ae:	6078      	str	r0, [r7, #4]
    73b0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    73b2:	687b      	ldr	r3, [r7, #4]
    73b4:	2b00      	cmp	r3, #0
    73b6:	d004      	beq.n	73c2 <_spi_load_regs_slave+0x1a>
    73b8:	683b      	ldr	r3, [r7, #0]
    73ba:	2b00      	cmp	r3, #0
    73bc:	d001      	beq.n	73c2 <_spi_load_regs_slave+0x1a>
    73be:	2301      	movs	r3, #1
    73c0:	e000      	b.n	73c4 <_spi_load_regs_slave+0x1c>
    73c2:	2300      	movs	r3, #0
    73c4:	f003 0301 	and.w	r3, r3, #1
    73c8:	b2db      	uxtb	r3, r3
    73ca:	f640 124d 	movw	r2, #2381	; 0x94d
    73ce:	491a      	ldr	r1, [pc, #104]	; (7438 <_spi_load_regs_slave+0x90>)
    73d0:	4618      	mov	r0, r3
    73d2:	4b1a      	ldr	r3, [pc, #104]	; (743c <_spi_load_regs_slave+0x94>)
    73d4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    73d6:	683b      	ldr	r3, [r7, #0]
    73d8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    73da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    73de:	f023 0301 	bic.w	r3, r3, #1
    73e2:	4619      	mov	r1, r3
    73e4:	6878      	ldr	r0, [r7, #4]
    73e6:	4b16      	ldr	r3, [pc, #88]	; (7440 <_spi_load_regs_slave+0x98>)
    73e8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    73ea:	683b      	ldr	r3, [r7, #0]
    73ec:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    73ee:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    73f2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    73f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    73fa:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    73fe:	4619      	mov	r1, r3
    7400:	6878      	ldr	r0, [r7, #4]
    7402:	4b10      	ldr	r3, [pc, #64]	; (7444 <_spi_load_regs_slave+0x9c>)
    7404:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    7406:	683b      	ldr	r3, [r7, #0]
    7408:	689b      	ldr	r3, [r3, #8]
    740a:	4619      	mov	r1, r3
    740c:	6878      	ldr	r0, [r7, #4]
    740e:	4b0e      	ldr	r3, [pc, #56]	; (7448 <_spi_load_regs_slave+0xa0>)
    7410:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7412:	683b      	ldr	r3, [r7, #0]
    7414:	7b5b      	ldrb	r3, [r3, #13]
    7416:	4619      	mov	r1, r3
    7418:	6878      	ldr	r0, [r7, #4]
    741a:	4b0c      	ldr	r3, [pc, #48]	; (744c <_spi_load_regs_slave+0xa4>)
    741c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    741e:	bf00      	nop
    7420:	f04f 31ff 	mov.w	r1, #4294967295
    7424:	6878      	ldr	r0, [r7, #4]
    7426:	4b0a      	ldr	r3, [pc, #40]	; (7450 <_spi_load_regs_slave+0xa8>)
    7428:	4798      	blx	r3
    742a:	4603      	mov	r3, r0
    742c:	2b00      	cmp	r3, #0
    742e:	d1f7      	bne.n	7420 <_spi_load_regs_slave+0x78>
		;
}
    7430:	bf00      	nop
    7432:	3708      	adds	r7, #8
    7434:	46bd      	mov	sp, r7
    7436:	bd80      	pop	{r7, pc}
    7438:	00010098 	.word	0x00010098
    743c:	00003ab1 	.word	0x00003ab1
    7440:	0000633d 	.word	0x0000633d
    7444:	00006455 	.word	0x00006455
    7448:	00006539 	.word	0x00006539
    744c:	000065cd 	.word	0x000065cd
    7450:	000060bd 	.word	0x000060bd

00007454 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7454:	b580      	push	{r7, lr}
    7456:	b084      	sub	sp, #16
    7458:	af00      	add	r7, sp, #0
    745a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    745c:	687b      	ldr	r3, [r7, #4]
    745e:	4618      	mov	r0, r3
    7460:	4b11      	ldr	r3, [pc, #68]	; (74a8 <_spi_get_regs+0x54>)
    7462:	4798      	blx	r3
    7464:	4603      	mov	r3, r0
    7466:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7468:	2300      	movs	r3, #0
    746a:	73fb      	strb	r3, [r7, #15]
    746c:	e014      	b.n	7498 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    746e:	7bfa      	ldrb	r2, [r7, #15]
    7470:	490e      	ldr	r1, [pc, #56]	; (74ac <_spi_get_regs+0x58>)
    7472:	4613      	mov	r3, r2
    7474:	011b      	lsls	r3, r3, #4
    7476:	4413      	add	r3, r2
    7478:	440b      	add	r3, r1
    747a:	3310      	adds	r3, #16
    747c:	781b      	ldrb	r3, [r3, #0]
    747e:	7bba      	ldrb	r2, [r7, #14]
    7480:	429a      	cmp	r2, r3
    7482:	d106      	bne.n	7492 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7484:	7bfa      	ldrb	r2, [r7, #15]
    7486:	4613      	mov	r3, r2
    7488:	011b      	lsls	r3, r3, #4
    748a:	4413      	add	r3, r2
    748c:	4a07      	ldr	r2, [pc, #28]	; (74ac <_spi_get_regs+0x58>)
    748e:	4413      	add	r3, r2
    7490:	e006      	b.n	74a0 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7492:	7bfb      	ldrb	r3, [r7, #15]
    7494:	3301      	adds	r3, #1
    7496:	73fb      	strb	r3, [r7, #15]
    7498:	7bfb      	ldrb	r3, [r7, #15]
    749a:	2b01      	cmp	r3, #1
    749c:	d9e7      	bls.n	746e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    749e:	2300      	movs	r3, #0
}
    74a0:	4618      	mov	r0, r3
    74a2:	3710      	adds	r7, #16
    74a4:	46bd      	mov	sp, r7
    74a6:	bd80      	pop	{r7, pc}
    74a8:	00006685 	.word	0x00006685
    74ac:	000100d4 	.word	0x000100d4

000074b0 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    74b0:	b580      	push	{r7, lr}
    74b2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    74b4:	4b03      	ldr	r3, [pc, #12]	; (74c4 <SERCOM7_0_Handler+0x14>)
    74b6:	681b      	ldr	r3, [r3, #0]
    74b8:	4618      	mov	r0, r3
    74ba:	4b03      	ldr	r3, [pc, #12]	; (74c8 <SERCOM7_0_Handler+0x18>)
    74bc:	4798      	blx	r3
}
    74be:	bf00      	nop
    74c0:	bd80      	pop	{r7, pc}
    74c2:	bf00      	nop
    74c4:	20000820 	.word	0x20000820
    74c8:	000069c1 	.word	0x000069c1

000074cc <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    74cc:	b580      	push	{r7, lr}
    74ce:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    74d0:	4b03      	ldr	r3, [pc, #12]	; (74e0 <SERCOM7_1_Handler+0x14>)
    74d2:	681b      	ldr	r3, [r3, #0]
    74d4:	4618      	mov	r0, r3
    74d6:	4b03      	ldr	r3, [pc, #12]	; (74e4 <SERCOM7_1_Handler+0x18>)
    74d8:	4798      	blx	r3
}
    74da:	bf00      	nop
    74dc:	bd80      	pop	{r7, pc}
    74de:	bf00      	nop
    74e0:	20000820 	.word	0x20000820
    74e4:	000069c1 	.word	0x000069c1

000074e8 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    74e8:	b580      	push	{r7, lr}
    74ea:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    74ec:	4b03      	ldr	r3, [pc, #12]	; (74fc <SERCOM7_2_Handler+0x14>)
    74ee:	681b      	ldr	r3, [r3, #0]
    74f0:	4618      	mov	r0, r3
    74f2:	4b03      	ldr	r3, [pc, #12]	; (7500 <SERCOM7_2_Handler+0x18>)
    74f4:	4798      	blx	r3
}
    74f6:	bf00      	nop
    74f8:	bd80      	pop	{r7, pc}
    74fa:	bf00      	nop
    74fc:	20000820 	.word	0x20000820
    7500:	000069c1 	.word	0x000069c1

00007504 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    7504:	b580      	push	{r7, lr}
    7506:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7508:	4b03      	ldr	r3, [pc, #12]	; (7518 <SERCOM7_3_Handler+0x14>)
    750a:	681b      	ldr	r3, [r3, #0]
    750c:	4618      	mov	r0, r3
    750e:	4b03      	ldr	r3, [pc, #12]	; (751c <SERCOM7_3_Handler+0x18>)
    7510:	4798      	blx	r3
}
    7512:	bf00      	nop
    7514:	bd80      	pop	{r7, pc}
    7516:	bf00      	nop
    7518:	20000820 	.word	0x20000820
    751c:	000069c1 	.word	0x000069c1

00007520 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7520:	b580      	push	{r7, lr}
    7522:	b084      	sub	sp, #16
    7524:	af00      	add	r7, sp, #0
    7526:	6078      	str	r0, [r7, #4]
    7528:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    752a:	683b      	ldr	r3, [r7, #0]
    752c:	4618      	mov	r0, r3
    752e:	4b35      	ldr	r3, [pc, #212]	; (7604 <_spi_m_sync_init+0xe4>)
    7530:	4798      	blx	r3
    7532:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7534:	687b      	ldr	r3, [r7, #4]
    7536:	2b00      	cmp	r3, #0
    7538:	d004      	beq.n	7544 <_spi_m_sync_init+0x24>
    753a:	683b      	ldr	r3, [r7, #0]
    753c:	2b00      	cmp	r3, #0
    753e:	d001      	beq.n	7544 <_spi_m_sync_init+0x24>
    7540:	2301      	movs	r3, #1
    7542:	e000      	b.n	7546 <_spi_m_sync_init+0x26>
    7544:	2300      	movs	r3, #0
    7546:	f003 0301 	and.w	r3, r3, #1
    754a:	b2db      	uxtb	r3, r3
    754c:	f640 128c 	movw	r2, #2444	; 0x98c
    7550:	492d      	ldr	r1, [pc, #180]	; (7608 <_spi_m_sync_init+0xe8>)
    7552:	4618      	mov	r0, r3
    7554:	4b2d      	ldr	r3, [pc, #180]	; (760c <_spi_m_sync_init+0xec>)
    7556:	4798      	blx	r3

	if (regs == NULL) {
    7558:	68fb      	ldr	r3, [r7, #12]
    755a:	2b00      	cmp	r3, #0
    755c:	d102      	bne.n	7564 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    755e:	f06f 030c 	mvn.w	r3, #12
    7562:	e04a      	b.n	75fa <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7564:	2101      	movs	r1, #1
    7566:	6838      	ldr	r0, [r7, #0]
    7568:	4b29      	ldr	r3, [pc, #164]	; (7610 <_spi_m_sync_init+0xf0>)
    756a:	4798      	blx	r3
    756c:	4603      	mov	r3, r0
    756e:	f083 0301 	eor.w	r3, r3, #1
    7572:	b2db      	uxtb	r3, r3
    7574:	2b00      	cmp	r3, #0
    7576:	d019      	beq.n	75ac <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7578:	68fb      	ldr	r3, [r7, #12]
    757a:	681b      	ldr	r3, [r3, #0]
    757c:	f003 031c 	and.w	r3, r3, #28
    7580:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7582:	2102      	movs	r1, #2
    7584:	6838      	ldr	r0, [r7, #0]
    7586:	4b23      	ldr	r3, [pc, #140]	; (7614 <_spi_m_sync_init+0xf4>)
    7588:	4798      	blx	r3
    758a:	4603      	mov	r3, r0
    758c:	2b00      	cmp	r3, #0
    758e:	d006      	beq.n	759e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7590:	6838      	ldr	r0, [r7, #0]
    7592:	4b21      	ldr	r3, [pc, #132]	; (7618 <_spi_m_sync_init+0xf8>)
    7594:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7596:	2102      	movs	r1, #2
    7598:	6838      	ldr	r0, [r7, #0]
    759a:	4b20      	ldr	r3, [pc, #128]	; (761c <_spi_m_sync_init+0xfc>)
    759c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    759e:	68bb      	ldr	r3, [r7, #8]
    75a0:	f043 0301 	orr.w	r3, r3, #1
    75a4:	4619      	mov	r1, r3
    75a6:	6838      	ldr	r0, [r7, #0]
    75a8:	4b1d      	ldr	r3, [pc, #116]	; (7620 <_spi_m_sync_init+0x100>)
    75aa:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    75ac:	2101      	movs	r1, #1
    75ae:	6838      	ldr	r0, [r7, #0]
    75b0:	4b1a      	ldr	r3, [pc, #104]	; (761c <_spi_m_sync_init+0xfc>)
    75b2:	4798      	blx	r3

	dev->prvt = hw;
    75b4:	687b      	ldr	r3, [r7, #4]
    75b6:	683a      	ldr	r2, [r7, #0]
    75b8:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    75ba:	68fb      	ldr	r3, [r7, #12]
    75bc:	681b      	ldr	r3, [r3, #0]
    75be:	f003 031c 	and.w	r3, r3, #28
    75c2:	2b08      	cmp	r3, #8
    75c4:	d104      	bne.n	75d0 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    75c6:	68f9      	ldr	r1, [r7, #12]
    75c8:	6838      	ldr	r0, [r7, #0]
    75ca:	4b16      	ldr	r3, [pc, #88]	; (7624 <_spi_m_sync_init+0x104>)
    75cc:	4798      	blx	r3
    75ce:	e003      	b.n	75d8 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    75d0:	68f9      	ldr	r1, [r7, #12]
    75d2:	6838      	ldr	r0, [r7, #0]
    75d4:	4b14      	ldr	r3, [pc, #80]	; (7628 <_spi_m_sync_init+0x108>)
    75d6:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    75d8:	68fb      	ldr	r3, [r7, #12]
    75da:	685b      	ldr	r3, [r3, #4]
    75dc:	f003 0307 	and.w	r3, r3, #7
    75e0:	2b00      	cmp	r3, #0
    75e2:	d101      	bne.n	75e8 <_spi_m_sync_init+0xc8>
    75e4:	2201      	movs	r2, #1
    75e6:	e000      	b.n	75ea <_spi_m_sync_init+0xca>
    75e8:	2202      	movs	r2, #2
    75ea:	687b      	ldr	r3, [r7, #4]
    75ec:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    75ee:	68fb      	ldr	r3, [r7, #12]
    75f0:	89db      	ldrh	r3, [r3, #14]
    75f2:	b29a      	uxth	r2, r3
    75f4:	687b      	ldr	r3, [r7, #4]
    75f6:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    75f8:	2300      	movs	r3, #0
}
    75fa:	4618      	mov	r0, r3
    75fc:	3710      	adds	r7, #16
    75fe:	46bd      	mov	sp, r7
    7600:	bd80      	pop	{r7, pc}
    7602:	bf00      	nop
    7604:	00007455 	.word	0x00007455
    7608:	00010098 	.word	0x00010098
    760c:	00003ab1 	.word	0x00003ab1
    7610:	000060bd 	.word	0x000060bd
    7614:	0000630d 	.word	0x0000630d
    7618:	000062e5 	.word	0x000062e5
    761c:	00006099 	.word	0x00006099
    7620:	0000633d 	.word	0x0000633d
    7624:	000073a9 	.word	0x000073a9
    7628:	00007315 	.word	0x00007315

0000762c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    762c:	b580      	push	{r7, lr}
    762e:	b082      	sub	sp, #8
    7630:	af00      	add	r7, sp, #0
    7632:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7634:	687b      	ldr	r3, [r7, #4]
    7636:	2b00      	cmp	r3, #0
    7638:	d005      	beq.n	7646 <_spi_m_sync_enable+0x1a>
    763a:	687b      	ldr	r3, [r7, #4]
    763c:	681b      	ldr	r3, [r3, #0]
    763e:	2b00      	cmp	r3, #0
    7640:	d001      	beq.n	7646 <_spi_m_sync_enable+0x1a>
    7642:	2301      	movs	r3, #1
    7644:	e000      	b.n	7648 <_spi_m_sync_enable+0x1c>
    7646:	2300      	movs	r3, #0
    7648:	f003 0301 	and.w	r3, r3, #1
    764c:	b2db      	uxtb	r3, r3
    764e:	f640 12eb 	movw	r2, #2539	; 0x9eb
    7652:	4907      	ldr	r1, [pc, #28]	; (7670 <_spi_m_sync_enable+0x44>)
    7654:	4618      	mov	r0, r3
    7656:	4b07      	ldr	r3, [pc, #28]	; (7674 <_spi_m_sync_enable+0x48>)
    7658:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    765a:	687b      	ldr	r3, [r7, #4]
    765c:	681b      	ldr	r3, [r3, #0]
    765e:	4618      	mov	r0, r3
    7660:	4b05      	ldr	r3, [pc, #20]	; (7678 <_spi_m_sync_enable+0x4c>)
    7662:	4798      	blx	r3
    7664:	4603      	mov	r3, r0
}
    7666:	4618      	mov	r0, r3
    7668:	3708      	adds	r7, #8
    766a:	46bd      	mov	sp, r7
    766c:	bd80      	pop	{r7, pc}
    766e:	bf00      	nop
    7670:	00010098 	.word	0x00010098
    7674:	00003ab1 	.word	0x00003ab1
    7678:	000072ad 	.word	0x000072ad

0000767c <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    767c:	b580      	push	{r7, lr}
    767e:	b082      	sub	sp, #8
    7680:	af00      	add	r7, sp, #0
    7682:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	2b00      	cmp	r3, #0
    7688:	d005      	beq.n	7696 <_spi_m_sync_disable+0x1a>
    768a:	687b      	ldr	r3, [r7, #4]
    768c:	681b      	ldr	r3, [r3, #0]
    768e:	2b00      	cmp	r3, #0
    7690:	d001      	beq.n	7696 <_spi_m_sync_disable+0x1a>
    7692:	2301      	movs	r3, #1
    7694:	e000      	b.n	7698 <_spi_m_sync_disable+0x1c>
    7696:	2300      	movs	r3, #0
    7698:	f003 0301 	and.w	r3, r3, #1
    769c:	b2db      	uxtb	r3, r3
    769e:	f640 2207 	movw	r2, #2567	; 0xa07
    76a2:	4907      	ldr	r1, [pc, #28]	; (76c0 <_spi_m_sync_disable+0x44>)
    76a4:	4618      	mov	r0, r3
    76a6:	4b07      	ldr	r3, [pc, #28]	; (76c4 <_spi_m_sync_disable+0x48>)
    76a8:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    76aa:	687b      	ldr	r3, [r7, #4]
    76ac:	681b      	ldr	r3, [r3, #0]
    76ae:	4618      	mov	r0, r3
    76b0:	4b05      	ldr	r3, [pc, #20]	; (76c8 <_spi_m_sync_disable+0x4c>)
    76b2:	4798      	blx	r3
    76b4:	4603      	mov	r3, r0
}
    76b6:	4618      	mov	r0, r3
    76b8:	3708      	adds	r7, #8
    76ba:	46bd      	mov	sp, r7
    76bc:	bd80      	pop	{r7, pc}
    76be:	bf00      	nop
    76c0:	00010098 	.word	0x00010098
    76c4:	00003ab1 	.word	0x00003ab1
    76c8:	000072e1 	.word	0x000072e1

000076cc <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    76cc:	b580      	push	{r7, lr}
    76ce:	b082      	sub	sp, #8
    76d0:	af00      	add	r7, sp, #0
    76d2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    76d4:	bf00      	nop
    76d6:	2103      	movs	r1, #3
    76d8:	6878      	ldr	r0, [r7, #4]
    76da:	4b06      	ldr	r3, [pc, #24]	; (76f4 <_spi_wait_bus_idle+0x28>)
    76dc:	4798      	blx	r3
    76de:	4603      	mov	r3, r0
    76e0:	2b00      	cmp	r3, #0
    76e2:	d0f8      	beq.n	76d6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    76e4:	2103      	movs	r1, #3
    76e6:	6878      	ldr	r0, [r7, #4]
    76e8:	4b03      	ldr	r3, [pc, #12]	; (76f8 <_spi_wait_bus_idle+0x2c>)
    76ea:	4798      	blx	r3
}
    76ec:	bf00      	nop
    76ee:	3708      	adds	r7, #8
    76f0:	46bd      	mov	sp, r7
    76f2:	bd80      	pop	{r7, pc}
    76f4:	00006151 	.word	0x00006151
    76f8:	00006193 	.word	0x00006193

000076fc <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    76fc:	b580      	push	{r7, lr}
    76fe:	b086      	sub	sp, #24
    7700:	af00      	add	r7, sp, #0
    7702:	60f8      	str	r0, [r7, #12]
    7704:	60b9      	str	r1, [r7, #8]
    7706:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7708:	68bb      	ldr	r3, [r7, #8]
    770a:	f003 0304 	and.w	r3, r3, #4
    770e:	2b00      	cmp	r3, #0
    7710:	d101      	bne.n	7716 <_spi_rx_check_and_receive+0x1a>
		return false;
    7712:	2300      	movs	r3, #0
    7714:	e022      	b.n	775c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7716:	68f8      	ldr	r0, [r7, #12]
    7718:	4b12      	ldr	r3, [pc, #72]	; (7764 <_spi_rx_check_and_receive+0x68>)
    771a:	4798      	blx	r3
    771c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    771e:	687b      	ldr	r3, [r7, #4]
    7720:	685b      	ldr	r3, [r3, #4]
    7722:	2b00      	cmp	r3, #0
    7724:	d014      	beq.n	7750 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    7726:	687b      	ldr	r3, [r7, #4]
    7728:	685b      	ldr	r3, [r3, #4]
    772a:	1c59      	adds	r1, r3, #1
    772c:	687a      	ldr	r2, [r7, #4]
    772e:	6051      	str	r1, [r2, #4]
    7730:	697a      	ldr	r2, [r7, #20]
    7732:	b2d2      	uxtb	r2, r2
    7734:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    7736:	687b      	ldr	r3, [r7, #4]
    7738:	7c1b      	ldrb	r3, [r3, #16]
    773a:	2b01      	cmp	r3, #1
    773c:	d908      	bls.n	7750 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    773e:	687b      	ldr	r3, [r7, #4]
    7740:	685b      	ldr	r3, [r3, #4]
    7742:	1c59      	adds	r1, r3, #1
    7744:	687a      	ldr	r2, [r7, #4]
    7746:	6051      	str	r1, [r2, #4]
    7748:	697a      	ldr	r2, [r7, #20]
    774a:	0a12      	lsrs	r2, r2, #8
    774c:	b2d2      	uxtb	r2, r2
    774e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7750:	687b      	ldr	r3, [r7, #4]
    7752:	68db      	ldr	r3, [r3, #12]
    7754:	1c5a      	adds	r2, r3, #1
    7756:	687b      	ldr	r3, [r7, #4]
    7758:	60da      	str	r2, [r3, #12]

	return true;
    775a:	2301      	movs	r3, #1
}
    775c:	4618      	mov	r0, r3
    775e:	3718      	adds	r7, #24
    7760:	46bd      	mov	sp, r7
    7762:	bd80      	pop	{r7, pc}
    7764:	000065b5 	.word	0x000065b5

00007768 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7768:	b580      	push	{r7, lr}
    776a:	b086      	sub	sp, #24
    776c:	af00      	add	r7, sp, #0
    776e:	60f8      	str	r0, [r7, #12]
    7770:	60b9      	str	r1, [r7, #8]
    7772:	607a      	str	r2, [r7, #4]
    7774:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7776:	68bb      	ldr	r3, [r7, #8]
    7778:	f003 0301 	and.w	r3, r3, #1
    777c:	2b00      	cmp	r3, #0
    777e:	d028      	beq.n	77d2 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7780:	687b      	ldr	r3, [r7, #4]
    7782:	681b      	ldr	r3, [r3, #0]
    7784:	2b00      	cmp	r3, #0
    7786:	d018      	beq.n	77ba <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7788:	687b      	ldr	r3, [r7, #4]
    778a:	681b      	ldr	r3, [r3, #0]
    778c:	1c59      	adds	r1, r3, #1
    778e:	687a      	ldr	r2, [r7, #4]
    7790:	6011      	str	r1, [r2, #0]
    7792:	781b      	ldrb	r3, [r3, #0]
    7794:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7796:	687b      	ldr	r3, [r7, #4]
    7798:	7c1b      	ldrb	r3, [r3, #16]
    779a:	2b01      	cmp	r3, #1
    779c:	d90f      	bls.n	77be <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    779e:	687b      	ldr	r3, [r7, #4]
    77a0:	681b      	ldr	r3, [r3, #0]
    77a2:	781b      	ldrb	r3, [r3, #0]
    77a4:	021b      	lsls	r3, r3, #8
    77a6:	461a      	mov	r2, r3
    77a8:	697b      	ldr	r3, [r7, #20]
    77aa:	4313      	orrs	r3, r2
    77ac:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    77ae:	687b      	ldr	r3, [r7, #4]
    77b0:	681b      	ldr	r3, [r3, #0]
    77b2:	1c5a      	adds	r2, r3, #1
    77b4:	687b      	ldr	r3, [r7, #4]
    77b6:	601a      	str	r2, [r3, #0]
    77b8:	e001      	b.n	77be <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    77ba:	887b      	ldrh	r3, [r7, #2]
    77bc:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    77be:	687b      	ldr	r3, [r7, #4]
    77c0:	689b      	ldr	r3, [r3, #8]
    77c2:	1c5a      	adds	r2, r3, #1
    77c4:	687b      	ldr	r3, [r7, #4]
    77c6:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    77c8:	6979      	ldr	r1, [r7, #20]
    77ca:	68f8      	ldr	r0, [r7, #12]
    77cc:	4b03      	ldr	r3, [pc, #12]	; (77dc <_spi_tx_check_and_send+0x74>)
    77ce:	4798      	blx	r3
    77d0:	e000      	b.n	77d4 <_spi_tx_check_and_send+0x6c>
		return;
    77d2:	bf00      	nop
}
    77d4:	3718      	adds	r7, #24
    77d6:	46bd      	mov	sp, r7
    77d8:	bd80      	pop	{r7, pc}
    77da:	bf00      	nop
    77dc:	00006599 	.word	0x00006599

000077e0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    77e0:	b580      	push	{r7, lr}
    77e2:	b082      	sub	sp, #8
    77e4:	af00      	add	r7, sp, #0
    77e6:	6078      	str	r0, [r7, #4]
    77e8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    77ea:	687b      	ldr	r3, [r7, #4]
    77ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    77f0:	2b00      	cmp	r3, #0
    77f2:	d00b      	beq.n	780c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    77f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    77f8:	6838      	ldr	r0, [r7, #0]
    77fa:	4b07      	ldr	r3, [pc, #28]	; (7818 <_spi_err_check+0x38>)
    77fc:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    77fe:	2180      	movs	r1, #128	; 0x80
    7800:	6838      	ldr	r0, [r7, #0]
    7802:	4b06      	ldr	r3, [pc, #24]	; (781c <_spi_err_check+0x3c>)
    7804:	4798      	blx	r3
		return ERR_OVERFLOW;
    7806:	f06f 0312 	mvn.w	r3, #18
    780a:	e000      	b.n	780e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    780c:	2300      	movs	r3, #0
}
    780e:	4618      	mov	r0, r3
    7810:	3708      	adds	r7, #8
    7812:	46bd      	mov	sp, r7
    7814:	bd80      	pop	{r7, pc}
    7816:	bf00      	nop
    7818:	000065ed 	.word	0x000065ed
    781c:	00006193 	.word	0x00006193

00007820 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7820:	b590      	push	{r4, r7, lr}
    7822:	b08b      	sub	sp, #44	; 0x2c
    7824:	af00      	add	r7, sp, #0
    7826:	6078      	str	r0, [r7, #4]
    7828:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    782a:	687b      	ldr	r3, [r7, #4]
    782c:	681b      	ldr	r3, [r3, #0]
    782e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7830:	2300      	movs	r3, #0
    7832:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7834:	683b      	ldr	r3, [r7, #0]
    7836:	681b      	ldr	r3, [r3, #0]
    7838:	60bb      	str	r3, [r7, #8]
    783a:	683b      	ldr	r3, [r7, #0]
    783c:	685b      	ldr	r3, [r3, #4]
    783e:	60fb      	str	r3, [r7, #12]
    7840:	2300      	movs	r3, #0
    7842:	613b      	str	r3, [r7, #16]
    7844:	2300      	movs	r3, #0
    7846:	617b      	str	r3, [r7, #20]
    7848:	687b      	ldr	r3, [r7, #4]
    784a:	791b      	ldrb	r3, [r3, #4]
    784c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    784e:	687b      	ldr	r3, [r7, #4]
    7850:	2b00      	cmp	r3, #0
    7852:	d004      	beq.n	785e <_spi_m_sync_trans+0x3e>
    7854:	6a3b      	ldr	r3, [r7, #32]
    7856:	2b00      	cmp	r3, #0
    7858:	d001      	beq.n	785e <_spi_m_sync_trans+0x3e>
    785a:	2301      	movs	r3, #1
    785c:	e000      	b.n	7860 <_spi_m_sync_trans+0x40>
    785e:	2300      	movs	r3, #0
    7860:	f003 0301 	and.w	r3, r3, #1
    7864:	b2db      	uxtb	r3, r3
    7866:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    786a:	492b      	ldr	r1, [pc, #172]	; (7918 <_spi_m_sync_trans+0xf8>)
    786c:	4618      	mov	r0, r3
    786e:	4b2b      	ldr	r3, [pc, #172]	; (791c <_spi_m_sync_trans+0xfc>)
    7870:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7872:	2107      	movs	r1, #7
    7874:	6a38      	ldr	r0, [r7, #32]
    7876:	4b2a      	ldr	r3, [pc, #168]	; (7920 <_spi_m_sync_trans+0x100>)
    7878:	4798      	blx	r3
    787a:	4603      	mov	r3, r0
    787c:	2b00      	cmp	r3, #0
    787e:	d002      	beq.n	7886 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7880:	f06f 0303 	mvn.w	r3, #3
    7884:	e043      	b.n	790e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7886:	6a38      	ldr	r0, [r7, #32]
    7888:	4b26      	ldr	r3, [pc, #152]	; (7924 <_spi_m_sync_trans+0x104>)
    788a:	4798      	blx	r3
    788c:	4603      	mov	r3, r0
    788e:	f083 0301 	eor.w	r3, r3, #1
    7892:	b2db      	uxtb	r3, r3
    7894:	2b00      	cmp	r3, #0
    7896:	d002      	beq.n	789e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7898:	f06f 0313 	mvn.w	r3, #19
    789c:	e037      	b.n	790e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    789e:	6a38      	ldr	r0, [r7, #32]
    78a0:	4b21      	ldr	r3, [pc, #132]	; (7928 <_spi_m_sync_trans+0x108>)
    78a2:	4798      	blx	r3
    78a4:	4603      	mov	r3, r0
    78a6:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    78a8:	f107 0308 	add.w	r3, r7, #8
    78ac:	461a      	mov	r2, r3
    78ae:	69f9      	ldr	r1, [r7, #28]
    78b0:	6a38      	ldr	r0, [r7, #32]
    78b2:	4b1e      	ldr	r3, [pc, #120]	; (792c <_spi_m_sync_trans+0x10c>)
    78b4:	4798      	blx	r3
    78b6:	4603      	mov	r3, r0
    78b8:	f083 0301 	eor.w	r3, r3, #1
    78bc:	b2db      	uxtb	r3, r3
    78be:	2b00      	cmp	r3, #0
    78c0:	d00b      	beq.n	78da <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    78c2:	697a      	ldr	r2, [r7, #20]
    78c4:	693b      	ldr	r3, [r7, #16]
    78c6:	429a      	cmp	r2, r3
    78c8:	d307      	bcc.n	78da <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    78ca:	687b      	ldr	r3, [r7, #4]
    78cc:	88db      	ldrh	r3, [r3, #6]
    78ce:	f107 0208 	add.w	r2, r7, #8
    78d2:	69f9      	ldr	r1, [r7, #28]
    78d4:	6a38      	ldr	r0, [r7, #32]
    78d6:	4c16      	ldr	r4, [pc, #88]	; (7930 <_spi_m_sync_trans+0x110>)
    78d8:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    78da:	6a39      	ldr	r1, [r7, #32]
    78dc:	69f8      	ldr	r0, [r7, #28]
    78de:	4b15      	ldr	r3, [pc, #84]	; (7934 <_spi_m_sync_trans+0x114>)
    78e0:	4798      	blx	r3
    78e2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    78e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    78e6:	2b00      	cmp	r3, #0
    78e8:	db0c      	blt.n	7904 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    78ea:	693a      	ldr	r2, [r7, #16]
    78ec:	683b      	ldr	r3, [r7, #0]
    78ee:	689b      	ldr	r3, [r3, #8]
    78f0:	429a      	cmp	r2, r3
    78f2:	d3d4      	bcc.n	789e <_spi_m_sync_trans+0x7e>
    78f4:	697a      	ldr	r2, [r7, #20]
    78f6:	683b      	ldr	r3, [r7, #0]
    78f8:	689b      	ldr	r3, [r3, #8]
    78fa:	429a      	cmp	r2, r3
    78fc:	d3cf      	bcc.n	789e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    78fe:	693b      	ldr	r3, [r7, #16]
    7900:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7902:	e000      	b.n	7906 <_spi_m_sync_trans+0xe6>
			break;
    7904:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7906:	6a38      	ldr	r0, [r7, #32]
    7908:	4b0b      	ldr	r3, [pc, #44]	; (7938 <_spi_m_sync_trans+0x118>)
    790a:	4798      	blx	r3

	return rc;
    790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    790e:	4618      	mov	r0, r3
    7910:	372c      	adds	r7, #44	; 0x2c
    7912:	46bd      	mov	sp, r7
    7914:	bd90      	pop	{r4, r7, pc}
    7916:	bf00      	nop
    7918:	00010098 	.word	0x00010098
    791c:	00003ab1 	.word	0x00003ab1
    7920:	000060bd 	.word	0x000060bd
    7924:	000062ad 	.word	0x000062ad
    7928:	00006179 	.word	0x00006179
    792c:	000076fd 	.word	0x000076fd
    7930:	00007769 	.word	0x00007769
    7934:	000077e1 	.word	0x000077e1
    7938:	000076cd 	.word	0x000076cd

0000793c <__NVIC_EnableIRQ>:
{
    793c:	b480      	push	{r7}
    793e:	b083      	sub	sp, #12
    7940:	af00      	add	r7, sp, #0
    7942:	4603      	mov	r3, r0
    7944:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    794a:	2b00      	cmp	r3, #0
    794c:	db0b      	blt.n	7966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    794e:	4909      	ldr	r1, [pc, #36]	; (7974 <__NVIC_EnableIRQ+0x38>)
    7950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7954:	095b      	lsrs	r3, r3, #5
    7956:	88fa      	ldrh	r2, [r7, #6]
    7958:	f002 021f 	and.w	r2, r2, #31
    795c:	2001      	movs	r0, #1
    795e:	fa00 f202 	lsl.w	r2, r0, r2
    7962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7966:	bf00      	nop
    7968:	370c      	adds	r7, #12
    796a:	46bd      	mov	sp, r7
    796c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7970:	4770      	bx	lr
    7972:	bf00      	nop
    7974:	e000e100 	.word	0xe000e100

00007978 <__NVIC_DisableIRQ>:
{
    7978:	b480      	push	{r7}
    797a:	b083      	sub	sp, #12
    797c:	af00      	add	r7, sp, #0
    797e:	4603      	mov	r3, r0
    7980:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7986:	2b00      	cmp	r3, #0
    7988:	db10      	blt.n	79ac <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    798a:	490b      	ldr	r1, [pc, #44]	; (79b8 <__NVIC_DisableIRQ+0x40>)
    798c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7990:	095b      	lsrs	r3, r3, #5
    7992:	88fa      	ldrh	r2, [r7, #6]
    7994:	f002 021f 	and.w	r2, r2, #31
    7998:	2001      	movs	r0, #1
    799a:	fa00 f202 	lsl.w	r2, r0, r2
    799e:	3320      	adds	r3, #32
    79a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    79a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    79a8:	f3bf 8f6f 	isb	sy
}
    79ac:	bf00      	nop
    79ae:	370c      	adds	r7, #12
    79b0:	46bd      	mov	sp, r7
    79b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    79b6:	4770      	bx	lr
    79b8:	e000e100 	.word	0xe000e100

000079bc <__NVIC_ClearPendingIRQ>:
{
    79bc:	b480      	push	{r7}
    79be:	b083      	sub	sp, #12
    79c0:	af00      	add	r7, sp, #0
    79c2:	4603      	mov	r3, r0
    79c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    79c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    79ca:	2b00      	cmp	r3, #0
    79cc:	db0c      	blt.n	79e8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    79ce:	4909      	ldr	r1, [pc, #36]	; (79f4 <__NVIC_ClearPendingIRQ+0x38>)
    79d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    79d4:	095b      	lsrs	r3, r3, #5
    79d6:	88fa      	ldrh	r2, [r7, #6]
    79d8:	f002 021f 	and.w	r2, r2, #31
    79dc:	2001      	movs	r0, #1
    79de:	fa00 f202 	lsl.w	r2, r0, r2
    79e2:	3360      	adds	r3, #96	; 0x60
    79e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    79e8:	bf00      	nop
    79ea:	370c      	adds	r7, #12
    79ec:	46bd      	mov	sp, r7
    79ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    79f2:	4770      	bx	lr
    79f4:	e000e100 	.word	0xe000e100

000079f8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    79f8:	b480      	push	{r7}
    79fa:	b083      	sub	sp, #12
    79fc:	af00      	add	r7, sp, #0
    79fe:	6078      	str	r0, [r7, #4]
    7a00:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7a02:	bf00      	nop
    7a04:	687b      	ldr	r3, [r7, #4]
    7a06:	689a      	ldr	r2, [r3, #8]
    7a08:	683b      	ldr	r3, [r7, #0]
    7a0a:	4013      	ands	r3, r2
    7a0c:	2b00      	cmp	r3, #0
    7a0e:	d1f9      	bne.n	7a04 <hri_tcc_wait_for_sync+0xc>
	};
}
    7a10:	bf00      	nop
    7a12:	370c      	adds	r7, #12
    7a14:	46bd      	mov	sp, r7
    7a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a1a:	4770      	bx	lr

00007a1c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7a1c:	b480      	push	{r7}
    7a1e:	b083      	sub	sp, #12
    7a20:	af00      	add	r7, sp, #0
    7a22:	6078      	str	r0, [r7, #4]
    7a24:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7a26:	687b      	ldr	r3, [r7, #4]
    7a28:	689a      	ldr	r2, [r3, #8]
    7a2a:	683b      	ldr	r3, [r7, #0]
    7a2c:	4013      	ands	r3, r2
    7a2e:	2b00      	cmp	r3, #0
    7a30:	bf14      	ite	ne
    7a32:	2301      	movne	r3, #1
    7a34:	2300      	moveq	r3, #0
    7a36:	b2db      	uxtb	r3, r3
}
    7a38:	4618      	mov	r0, r3
    7a3a:	370c      	adds	r7, #12
    7a3c:	46bd      	mov	sp, r7
    7a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a42:	4770      	bx	lr

00007a44 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7a44:	b480      	push	{r7}
    7a46:	b083      	sub	sp, #12
    7a48:	af00      	add	r7, sp, #0
    7a4a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7a4c:	687b      	ldr	r3, [r7, #4]
    7a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7a50:	f003 0301 	and.w	r3, r3, #1
    7a54:	2b00      	cmp	r3, #0
    7a56:	bf14      	ite	ne
    7a58:	2301      	movne	r3, #1
    7a5a:	2300      	moveq	r3, #0
    7a5c:	b2db      	uxtb	r3, r3
}
    7a5e:	4618      	mov	r0, r3
    7a60:	370c      	adds	r7, #12
    7a62:	46bd      	mov	sp, r7
    7a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a68:	4770      	bx	lr

00007a6a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7a6a:	b480      	push	{r7}
    7a6c:	b083      	sub	sp, #12
    7a6e:	af00      	add	r7, sp, #0
    7a70:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7a72:	687b      	ldr	r3, [r7, #4]
    7a74:	2201      	movs	r2, #1
    7a76:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7a78:	bf00      	nop
    7a7a:	370c      	adds	r7, #12
    7a7c:	46bd      	mov	sp, r7
    7a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a82:	4770      	bx	lr

00007a84 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7a84:	b480      	push	{r7}
    7a86:	b083      	sub	sp, #12
    7a88:	af00      	add	r7, sp, #0
    7a8a:	6078      	str	r0, [r7, #4]
    7a8c:	460b      	mov	r3, r1
    7a8e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7a90:	687b      	ldr	r3, [r7, #4]
    7a92:	78fa      	ldrb	r2, [r7, #3]
    7a94:	715a      	strb	r2, [r3, #5]
}
    7a96:	bf00      	nop
    7a98:	370c      	adds	r7, #12
    7a9a:	46bd      	mov	sp, r7
    7a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aa0:	4770      	bx	lr

00007aa2 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7aa2:	b480      	push	{r7}
    7aa4:	b083      	sub	sp, #12
    7aa6:	af00      	add	r7, sp, #0
    7aa8:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7aaa:	687b      	ldr	r3, [r7, #4]
    7aac:	2201      	movs	r2, #1
    7aae:	629a      	str	r2, [r3, #40]	; 0x28
}
    7ab0:	bf00      	nop
    7ab2:	370c      	adds	r7, #12
    7ab4:	46bd      	mov	sp, r7
    7ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aba:	4770      	bx	lr

00007abc <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7abc:	b580      	push	{r7, lr}
    7abe:	b082      	sub	sp, #8
    7ac0:	af00      	add	r7, sp, #0
    7ac2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7ac4:	687b      	ldr	r3, [r7, #4]
    7ac6:	681b      	ldr	r3, [r3, #0]
    7ac8:	f043 0201 	orr.w	r2, r3, #1
    7acc:	687b      	ldr	r3, [r7, #4]
    7ace:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7ad0:	2101      	movs	r1, #1
    7ad2:	6878      	ldr	r0, [r7, #4]
    7ad4:	4b02      	ldr	r3, [pc, #8]	; (7ae0 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7ad6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7ad8:	bf00      	nop
    7ada:	3708      	adds	r7, #8
    7adc:	46bd      	mov	sp, r7
    7ade:	bd80      	pop	{r7, pc}
    7ae0:	000079f9 	.word	0x000079f9

00007ae4 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7ae4:	b580      	push	{r7, lr}
    7ae6:	b082      	sub	sp, #8
    7ae8:	af00      	add	r7, sp, #0
    7aea:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7aec:	687b      	ldr	r3, [r7, #4]
    7aee:	681b      	ldr	r3, [r3, #0]
    7af0:	f043 0202 	orr.w	r2, r3, #2
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7af8:	2103      	movs	r1, #3
    7afa:	6878      	ldr	r0, [r7, #4]
    7afc:	4b02      	ldr	r3, [pc, #8]	; (7b08 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7afe:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7b00:	bf00      	nop
    7b02:	3708      	adds	r7, #8
    7b04:	46bd      	mov	sp, r7
    7b06:	bd80      	pop	{r7, pc}
    7b08:	000079f9 	.word	0x000079f9

00007b0c <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7b0c:	b580      	push	{r7, lr}
    7b0e:	b084      	sub	sp, #16
    7b10:	af00      	add	r7, sp, #0
    7b12:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7b14:	2103      	movs	r1, #3
    7b16:	6878      	ldr	r0, [r7, #4]
    7b18:	4b09      	ldr	r3, [pc, #36]	; (7b40 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7b1a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	681b      	ldr	r3, [r3, #0]
    7b20:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7b22:	68fb      	ldr	r3, [r7, #12]
    7b24:	085b      	lsrs	r3, r3, #1
    7b26:	f003 0301 	and.w	r3, r3, #1
    7b2a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7b2c:	68fb      	ldr	r3, [r7, #12]
    7b2e:	2b00      	cmp	r3, #0
    7b30:	bf14      	ite	ne
    7b32:	2301      	movne	r3, #1
    7b34:	2300      	moveq	r3, #0
    7b36:	b2db      	uxtb	r3, r3
}
    7b38:	4618      	mov	r0, r3
    7b3a:	3710      	adds	r7, #16
    7b3c:	46bd      	mov	sp, r7
    7b3e:	bd80      	pop	{r7, pc}
    7b40:	000079f9 	.word	0x000079f9

00007b44 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7b44:	b580      	push	{r7, lr}
    7b46:	b082      	sub	sp, #8
    7b48:	af00      	add	r7, sp, #0
    7b4a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	681b      	ldr	r3, [r3, #0]
    7b50:	f023 0202 	bic.w	r2, r3, #2
    7b54:	687b      	ldr	r3, [r7, #4]
    7b56:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7b58:	2103      	movs	r1, #3
    7b5a:	6878      	ldr	r0, [r7, #4]
    7b5c:	4b02      	ldr	r3, [pc, #8]	; (7b68 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7b5e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7b60:	bf00      	nop
    7b62:	3708      	adds	r7, #8
    7b64:	46bd      	mov	sp, r7
    7b66:	bd80      	pop	{r7, pc}
    7b68:	000079f9 	.word	0x000079f9

00007b6c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7b6c:	b580      	push	{r7, lr}
    7b6e:	b084      	sub	sp, #16
    7b70:	af00      	add	r7, sp, #0
    7b72:	6078      	str	r0, [r7, #4]
    7b74:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7b76:	2103      	movs	r1, #3
    7b78:	6878      	ldr	r0, [r7, #4]
    7b7a:	4b07      	ldr	r3, [pc, #28]	; (7b98 <hri_tcc_get_CTRLA_reg+0x2c>)
    7b7c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7b7e:	687b      	ldr	r3, [r7, #4]
    7b80:	681b      	ldr	r3, [r3, #0]
    7b82:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7b84:	68fa      	ldr	r2, [r7, #12]
    7b86:	683b      	ldr	r3, [r7, #0]
    7b88:	4013      	ands	r3, r2
    7b8a:	60fb      	str	r3, [r7, #12]
	return tmp;
    7b8c:	68fb      	ldr	r3, [r7, #12]
}
    7b8e:	4618      	mov	r0, r3
    7b90:	3710      	adds	r7, #16
    7b92:	46bd      	mov	sp, r7
    7b94:	bd80      	pop	{r7, pc}
    7b96:	bf00      	nop
    7b98:	000079f9 	.word	0x000079f9

00007b9c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7b9c:	b580      	push	{r7, lr}
    7b9e:	b082      	sub	sp, #8
    7ba0:	af00      	add	r7, sp, #0
    7ba2:	6078      	str	r0, [r7, #4]
    7ba4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7ba6:	687b      	ldr	r3, [r7, #4]
    7ba8:	683a      	ldr	r2, [r7, #0]
    7baa:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7bac:	2103      	movs	r1, #3
    7bae:	6878      	ldr	r0, [r7, #4]
    7bb0:	4b02      	ldr	r3, [pc, #8]	; (7bbc <hri_tcc_write_CTRLA_reg+0x20>)
    7bb2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7bb4:	bf00      	nop
    7bb6:	3708      	adds	r7, #8
    7bb8:	46bd      	mov	sp, r7
    7bba:	bd80      	pop	{r7, pc}
    7bbc:	000079f9 	.word	0x000079f9

00007bc0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7bc0:	b480      	push	{r7}
    7bc2:	b083      	sub	sp, #12
    7bc4:	af00      	add	r7, sp, #0
    7bc6:	6078      	str	r0, [r7, #4]
    7bc8:	460b      	mov	r3, r1
    7bca:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7bcc:	687b      	ldr	r3, [r7, #4]
    7bce:	78fa      	ldrb	r2, [r7, #3]
    7bd0:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7bd2:	bf00      	nop
    7bd4:	370c      	adds	r7, #12
    7bd6:	46bd      	mov	sp, r7
    7bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bdc:	4770      	bx	lr

00007bde <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7bde:	b480      	push	{r7}
    7be0:	b083      	sub	sp, #12
    7be2:	af00      	add	r7, sp, #0
    7be4:	6078      	str	r0, [r7, #4]
    7be6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7be8:	687b      	ldr	r3, [r7, #4]
    7bea:	683a      	ldr	r2, [r7, #0]
    7bec:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7bee:	bf00      	nop
    7bf0:	370c      	adds	r7, #12
    7bf2:	46bd      	mov	sp, r7
    7bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bf8:	4770      	bx	lr
	...

00007bfc <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7bfc:	b580      	push	{r7, lr}
    7bfe:	b082      	sub	sp, #8
    7c00:	af00      	add	r7, sp, #0
    7c02:	6078      	str	r0, [r7, #4]
    7c04:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7c06:	687b      	ldr	r3, [r7, #4]
    7c08:	683a      	ldr	r2, [r7, #0]
    7c0a:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7c0c:	2180      	movs	r1, #128	; 0x80
    7c0e:	6878      	ldr	r0, [r7, #4]
    7c10:	4b02      	ldr	r3, [pc, #8]	; (7c1c <hri_tcc_write_PER_reg+0x20>)
    7c12:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c14:	bf00      	nop
    7c16:	3708      	adds	r7, #8
    7c18:	46bd      	mov	sp, r7
    7c1a:	bd80      	pop	{r7, pc}
    7c1c:	000079f9 	.word	0x000079f9

00007c20 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7c20:	b580      	push	{r7, lr}
    7c22:	b082      	sub	sp, #8
    7c24:	af00      	add	r7, sp, #0
    7c26:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7c28:	2180      	movs	r1, #128	; 0x80
    7c2a:	6878      	ldr	r0, [r7, #4]
    7c2c:	4b03      	ldr	r3, [pc, #12]	; (7c3c <hri_tcc_read_PER_reg+0x1c>)
    7c2e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7c34:	4618      	mov	r0, r3
    7c36:	3708      	adds	r7, #8
    7c38:	46bd      	mov	sp, r7
    7c3a:	bd80      	pop	{r7, pc}
    7c3c:	000079f9 	.word	0x000079f9

00007c40 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7c40:	b480      	push	{r7}
    7c42:	b083      	sub	sp, #12
    7c44:	af00      	add	r7, sp, #0
    7c46:	6078      	str	r0, [r7, #4]
    7c48:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7c4a:	687b      	ldr	r3, [r7, #4]
    7c4c:	4a09      	ldr	r2, [pc, #36]	; (7c74 <_tcc_init_irq_param+0x34>)
    7c4e:	4293      	cmp	r3, r2
    7c50:	d102      	bne.n	7c58 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7c52:	4a09      	ldr	r2, [pc, #36]	; (7c78 <_tcc_init_irq_param+0x38>)
    7c54:	683b      	ldr	r3, [r7, #0]
    7c56:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7c58:	687b      	ldr	r3, [r7, #4]
    7c5a:	4a08      	ldr	r2, [pc, #32]	; (7c7c <_tcc_init_irq_param+0x3c>)
    7c5c:	4293      	cmp	r3, r2
    7c5e:	d102      	bne.n	7c66 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7c60:	4a07      	ldr	r2, [pc, #28]	; (7c80 <_tcc_init_irq_param+0x40>)
    7c62:	683b      	ldr	r3, [r7, #0]
    7c64:	6013      	str	r3, [r2, #0]
	}
}
    7c66:	bf00      	nop
    7c68:	370c      	adds	r7, #12
    7c6a:	46bd      	mov	sp, r7
    7c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c70:	4770      	bx	lr
    7c72:	bf00      	nop
    7c74:	41016000 	.word	0x41016000
    7c78:	20000834 	.word	0x20000834
    7c7c:	41018000 	.word	0x41018000
    7c80:	20000838 	.word	0x20000838

00007c84 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7c84:	b580      	push	{r7, lr}
    7c86:	b084      	sub	sp, #16
    7c88:	af00      	add	r7, sp, #0
    7c8a:	6078      	str	r0, [r7, #4]
    7c8c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7c8e:	6838      	ldr	r0, [r7, #0]
    7c90:	4b33      	ldr	r3, [pc, #204]	; (7d60 <_tcc_timer_init+0xdc>)
    7c92:	4798      	blx	r3
    7c94:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7c96:	68fb      	ldr	r3, [r7, #12]
    7c98:	2b00      	cmp	r3, #0
    7c9a:	d102      	bne.n	7ca2 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7c9c:	f06f 0309 	mvn.w	r3, #9
    7ca0:	e05a      	b.n	7d58 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7ca2:	687b      	ldr	r3, [r7, #4]
    7ca4:	683a      	ldr	r2, [r7, #0]
    7ca6:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7ca8:	2101      	movs	r1, #1
    7caa:	6838      	ldr	r0, [r7, #0]
    7cac:	4b2d      	ldr	r3, [pc, #180]	; (7d64 <_tcc_timer_init+0xe0>)
    7cae:	4798      	blx	r3
    7cb0:	4603      	mov	r3, r0
    7cb2:	f083 0301 	eor.w	r3, r3, #1
    7cb6:	b2db      	uxtb	r3, r3
    7cb8:	2b00      	cmp	r3, #0
    7cba:	d011      	beq.n	7ce0 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7cbc:	2102      	movs	r1, #2
    7cbe:	6838      	ldr	r0, [r7, #0]
    7cc0:	4b29      	ldr	r3, [pc, #164]	; (7d68 <_tcc_timer_init+0xe4>)
    7cc2:	4798      	blx	r3
    7cc4:	4603      	mov	r3, r0
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	d006      	beq.n	7cd8 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7cca:	6838      	ldr	r0, [r7, #0]
    7ccc:	4b27      	ldr	r3, [pc, #156]	; (7d6c <_tcc_timer_init+0xe8>)
    7cce:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7cd0:	2102      	movs	r1, #2
    7cd2:	6838      	ldr	r0, [r7, #0]
    7cd4:	4b26      	ldr	r3, [pc, #152]	; (7d70 <_tcc_timer_init+0xec>)
    7cd6:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7cd8:	2101      	movs	r1, #1
    7cda:	6838      	ldr	r0, [r7, #0]
    7cdc:	4b25      	ldr	r3, [pc, #148]	; (7d74 <_tcc_timer_init+0xf0>)
    7cde:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7ce0:	2101      	movs	r1, #1
    7ce2:	6838      	ldr	r0, [r7, #0]
    7ce4:	4b22      	ldr	r3, [pc, #136]	; (7d70 <_tcc_timer_init+0xec>)
    7ce6:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7ce8:	68fb      	ldr	r3, [r7, #12]
    7cea:	689b      	ldr	r3, [r3, #8]
    7cec:	4619      	mov	r1, r3
    7cee:	6838      	ldr	r0, [r7, #0]
    7cf0:	4b20      	ldr	r3, [pc, #128]	; (7d74 <_tcc_timer_init+0xf0>)
    7cf2:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7cf4:	68fb      	ldr	r3, [r7, #12]
    7cf6:	7b1b      	ldrb	r3, [r3, #12]
    7cf8:	4619      	mov	r1, r3
    7cfa:	6838      	ldr	r0, [r7, #0]
    7cfc:	4b1e      	ldr	r3, [pc, #120]	; (7d78 <_tcc_timer_init+0xf4>)
    7cfe:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7d00:	68fb      	ldr	r3, [r7, #12]
    7d02:	7b5b      	ldrb	r3, [r3, #13]
    7d04:	4619      	mov	r1, r3
    7d06:	6838      	ldr	r0, [r7, #0]
    7d08:	4b1c      	ldr	r3, [pc, #112]	; (7d7c <_tcc_timer_init+0xf8>)
    7d0a:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7d0c:	68fb      	ldr	r3, [r7, #12]
    7d0e:	691b      	ldr	r3, [r3, #16]
    7d10:	4619      	mov	r1, r3
    7d12:	6838      	ldr	r0, [r7, #0]
    7d14:	4b1a      	ldr	r3, [pc, #104]	; (7d80 <_tcc_timer_init+0xfc>)
    7d16:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7d18:	68fb      	ldr	r3, [r7, #12]
    7d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7d1c:	4619      	mov	r1, r3
    7d1e:	6838      	ldr	r0, [r7, #0]
    7d20:	4b18      	ldr	r3, [pc, #96]	; (7d84 <_tcc_timer_init+0x100>)
    7d22:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7d24:	6838      	ldr	r0, [r7, #0]
    7d26:	4b18      	ldr	r3, [pc, #96]	; (7d88 <_tcc_timer_init+0x104>)
    7d28:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7d2a:	6879      	ldr	r1, [r7, #4]
    7d2c:	6838      	ldr	r0, [r7, #0]
    7d2e:	4b17      	ldr	r3, [pc, #92]	; (7d8c <_tcc_timer_init+0x108>)
    7d30:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7d32:	68fb      	ldr	r3, [r7, #12]
    7d34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7d38:	4618      	mov	r0, r3
    7d3a:	4b15      	ldr	r3, [pc, #84]	; (7d90 <_tcc_timer_init+0x10c>)
    7d3c:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7d3e:	68fb      	ldr	r3, [r7, #12]
    7d40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7d44:	4618      	mov	r0, r3
    7d46:	4b13      	ldr	r3, [pc, #76]	; (7d94 <_tcc_timer_init+0x110>)
    7d48:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7d4a:	68fb      	ldr	r3, [r7, #12]
    7d4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7d50:	4618      	mov	r0, r3
    7d52:	4b11      	ldr	r3, [pc, #68]	; (7d98 <_tcc_timer_init+0x114>)
    7d54:	4798      	blx	r3

	return ERR_NONE;
    7d56:	2300      	movs	r3, #0
}
    7d58:	4618      	mov	r0, r3
    7d5a:	3710      	adds	r7, #16
    7d5c:	46bd      	mov	sp, r7
    7d5e:	bd80      	pop	{r7, pc}
    7d60:	00007f4d 	.word	0x00007f4d
    7d64:	00007a1d 	.word	0x00007a1d
    7d68:	00007b6d 	.word	0x00007b6d
    7d6c:	00007b45 	.word	0x00007b45
    7d70:	000079f9 	.word	0x000079f9
    7d74:	00007b9d 	.word	0x00007b9d
    7d78:	00007a85 	.word	0x00007a85
    7d7c:	00007bc1 	.word	0x00007bc1
    7d80:	00007bdf 	.word	0x00007bdf
    7d84:	00007bfd 	.word	0x00007bfd
    7d88:	00007aa3 	.word	0x00007aa3
    7d8c:	00007c41 	.word	0x00007c41
    7d90:	00007979 	.word	0x00007979
    7d94:	000079bd 	.word	0x000079bd
    7d98:	0000793d 	.word	0x0000793d

00007d9c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7d9c:	b580      	push	{r7, lr}
    7d9e:	b084      	sub	sp, #16
    7da0:	af00      	add	r7, sp, #0
    7da2:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7da4:	687b      	ldr	r3, [r7, #4]
    7da6:	68db      	ldr	r3, [r3, #12]
    7da8:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7daa:	68f8      	ldr	r0, [r7, #12]
    7dac:	4b0a      	ldr	r3, [pc, #40]	; (7dd8 <_tcc_timer_deinit+0x3c>)
    7dae:	4798      	blx	r3
    7db0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7db2:	68bb      	ldr	r3, [r7, #8]
    7db4:	2b00      	cmp	r3, #0
    7db6:	d00b      	beq.n	7dd0 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7db8:	68bb      	ldr	r3, [r7, #8]
    7dba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7dbe:	4618      	mov	r0, r3
    7dc0:	4b06      	ldr	r3, [pc, #24]	; (7ddc <_tcc_timer_deinit+0x40>)
    7dc2:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7dc4:	68f8      	ldr	r0, [r7, #12]
    7dc6:	4b06      	ldr	r3, [pc, #24]	; (7de0 <_tcc_timer_deinit+0x44>)
    7dc8:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7dca:	68f8      	ldr	r0, [r7, #12]
    7dcc:	4b05      	ldr	r3, [pc, #20]	; (7de4 <_tcc_timer_deinit+0x48>)
    7dce:	4798      	blx	r3
	}
}
    7dd0:	bf00      	nop
    7dd2:	3710      	adds	r7, #16
    7dd4:	46bd      	mov	sp, r7
    7dd6:	bd80      	pop	{r7, pc}
    7dd8:	00007f4d 	.word	0x00007f4d
    7ddc:	00007979 	.word	0x00007979
    7de0:	00007b45 	.word	0x00007b45
    7de4:	00007abd 	.word	0x00007abd

00007de8 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7de8:	b580      	push	{r7, lr}
    7dea:	b082      	sub	sp, #8
    7dec:	af00      	add	r7, sp, #0
    7dee:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7df0:	687b      	ldr	r3, [r7, #4]
    7df2:	68db      	ldr	r3, [r3, #12]
    7df4:	4618      	mov	r0, r3
    7df6:	4b03      	ldr	r3, [pc, #12]	; (7e04 <_tcc_timer_start+0x1c>)
    7df8:	4798      	blx	r3
}
    7dfa:	bf00      	nop
    7dfc:	3708      	adds	r7, #8
    7dfe:	46bd      	mov	sp, r7
    7e00:	bd80      	pop	{r7, pc}
    7e02:	bf00      	nop
    7e04:	00007ae5 	.word	0x00007ae5

00007e08 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7e08:	b580      	push	{r7, lr}
    7e0a:	b082      	sub	sp, #8
    7e0c:	af00      	add	r7, sp, #0
    7e0e:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7e10:	687b      	ldr	r3, [r7, #4]
    7e12:	68db      	ldr	r3, [r3, #12]
    7e14:	4618      	mov	r0, r3
    7e16:	4b03      	ldr	r3, [pc, #12]	; (7e24 <_tcc_timer_stop+0x1c>)
    7e18:	4798      	blx	r3
}
    7e1a:	bf00      	nop
    7e1c:	3708      	adds	r7, #8
    7e1e:	46bd      	mov	sp, r7
    7e20:	bd80      	pop	{r7, pc}
    7e22:	bf00      	nop
    7e24:	00007b45 	.word	0x00007b45

00007e28 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7e28:	b580      	push	{r7, lr}
    7e2a:	b082      	sub	sp, #8
    7e2c:	af00      	add	r7, sp, #0
    7e2e:	6078      	str	r0, [r7, #4]
    7e30:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7e32:	687b      	ldr	r3, [r7, #4]
    7e34:	68db      	ldr	r3, [r3, #12]
    7e36:	6839      	ldr	r1, [r7, #0]
    7e38:	4618      	mov	r0, r3
    7e3a:	4b03      	ldr	r3, [pc, #12]	; (7e48 <_tcc_timer_set_period+0x20>)
    7e3c:	4798      	blx	r3
}
    7e3e:	bf00      	nop
    7e40:	3708      	adds	r7, #8
    7e42:	46bd      	mov	sp, r7
    7e44:	bd80      	pop	{r7, pc}
    7e46:	bf00      	nop
    7e48:	00007bfd 	.word	0x00007bfd

00007e4c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7e4c:	b580      	push	{r7, lr}
    7e4e:	b082      	sub	sp, #8
    7e50:	af00      	add	r7, sp, #0
    7e52:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7e54:	687b      	ldr	r3, [r7, #4]
    7e56:	68db      	ldr	r3, [r3, #12]
    7e58:	4618      	mov	r0, r3
    7e5a:	4b03      	ldr	r3, [pc, #12]	; (7e68 <_tcc_timer_get_period+0x1c>)
    7e5c:	4798      	blx	r3
    7e5e:	4603      	mov	r3, r0
}
    7e60:	4618      	mov	r0, r3
    7e62:	3708      	adds	r7, #8
    7e64:	46bd      	mov	sp, r7
    7e66:	bd80      	pop	{r7, pc}
    7e68:	00007c21 	.word	0x00007c21

00007e6c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7e6c:	b580      	push	{r7, lr}
    7e6e:	b082      	sub	sp, #8
    7e70:	af00      	add	r7, sp, #0
    7e72:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7e74:	687b      	ldr	r3, [r7, #4]
    7e76:	68db      	ldr	r3, [r3, #12]
    7e78:	4618      	mov	r0, r3
    7e7a:	4b03      	ldr	r3, [pc, #12]	; (7e88 <_tcc_timer_is_started+0x1c>)
    7e7c:	4798      	blx	r3
    7e7e:	4603      	mov	r3, r0
}
    7e80:	4618      	mov	r0, r3
    7e82:	3708      	adds	r7, #8
    7e84:	46bd      	mov	sp, r7
    7e86:	bd80      	pop	{r7, pc}
    7e88:	00007b0d 	.word	0x00007b0d

00007e8c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7e8c:	b480      	push	{r7}
    7e8e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7e90:	4b02      	ldr	r3, [pc, #8]	; (7e9c <_tcc_get_timer+0x10>)
}
    7e92:	4618      	mov	r0, r3
    7e94:	46bd      	mov	sp, r7
    7e96:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e9a:	4770      	bx	lr
    7e9c:	200000c0 	.word	0x200000c0

00007ea0 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7ea0:	b580      	push	{r7, lr}
    7ea2:	b084      	sub	sp, #16
    7ea4:	af00      	add	r7, sp, #0
    7ea6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7ea8:	687b      	ldr	r3, [r7, #4]
    7eaa:	68db      	ldr	r3, [r3, #12]
    7eac:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7eae:	68f8      	ldr	r0, [r7, #12]
    7eb0:	4b08      	ldr	r3, [pc, #32]	; (7ed4 <_tcc_timer_set_irq+0x34>)
    7eb2:	4798      	blx	r3
    7eb4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7eb6:	68bb      	ldr	r3, [r7, #8]
    7eb8:	2b00      	cmp	r3, #0
    7eba:	d006      	beq.n	7eca <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7ebc:	68bb      	ldr	r3, [r7, #8]
    7ebe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7ec2:	b2db      	uxtb	r3, r3
    7ec4:	4618      	mov	r0, r3
    7ec6:	4b04      	ldr	r3, [pc, #16]	; (7ed8 <_tcc_timer_set_irq+0x38>)
    7ec8:	4798      	blx	r3
	}
}
    7eca:	bf00      	nop
    7ecc:	3710      	adds	r7, #16
    7ece:	46bd      	mov	sp, r7
    7ed0:	bd80      	pop	{r7, pc}
    7ed2:	bf00      	nop
    7ed4:	00007f4d 	.word	0x00007f4d
    7ed8:	000042fd 	.word	0x000042fd

00007edc <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7edc:	b580      	push	{r7, lr}
    7ede:	b084      	sub	sp, #16
    7ee0:	af00      	add	r7, sp, #0
    7ee2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7ee4:	687b      	ldr	r3, [r7, #4]
    7ee6:	68db      	ldr	r3, [r3, #12]
    7ee8:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7eea:	68f8      	ldr	r0, [r7, #12]
    7eec:	4b07      	ldr	r3, [pc, #28]	; (7f0c <tcc_interrupt_handler+0x30>)
    7eee:	4798      	blx	r3
    7ef0:	4603      	mov	r3, r0
    7ef2:	2b00      	cmp	r3, #0
    7ef4:	d006      	beq.n	7f04 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7ef6:	68f8      	ldr	r0, [r7, #12]
    7ef8:	4b05      	ldr	r3, [pc, #20]	; (7f10 <tcc_interrupt_handler+0x34>)
    7efa:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7efc:	687b      	ldr	r3, [r7, #4]
    7efe:	681b      	ldr	r3, [r3, #0]
    7f00:	6878      	ldr	r0, [r7, #4]
    7f02:	4798      	blx	r3
	}
}
    7f04:	bf00      	nop
    7f06:	3710      	adds	r7, #16
    7f08:	46bd      	mov	sp, r7
    7f0a:	bd80      	pop	{r7, pc}
    7f0c:	00007a45 	.word	0x00007a45
    7f10:	00007a6b 	.word	0x00007a6b

00007f14 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7f14:	b580      	push	{r7, lr}
    7f16:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7f18:	4b03      	ldr	r3, [pc, #12]	; (7f28 <TCC0_0_Handler+0x14>)
    7f1a:	681b      	ldr	r3, [r3, #0]
    7f1c:	4618      	mov	r0, r3
    7f1e:	4b03      	ldr	r3, [pc, #12]	; (7f2c <TCC0_0_Handler+0x18>)
    7f20:	4798      	blx	r3
}
    7f22:	bf00      	nop
    7f24:	bd80      	pop	{r7, pc}
    7f26:	bf00      	nop
    7f28:	20000834 	.word	0x20000834
    7f2c:	00007edd 	.word	0x00007edd

00007f30 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7f30:	b580      	push	{r7, lr}
    7f32:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7f34:	4b03      	ldr	r3, [pc, #12]	; (7f44 <TCC1_0_Handler+0x14>)
    7f36:	681b      	ldr	r3, [r3, #0]
    7f38:	4618      	mov	r0, r3
    7f3a:	4b03      	ldr	r3, [pc, #12]	; (7f48 <TCC1_0_Handler+0x18>)
    7f3c:	4798      	blx	r3
}
    7f3e:	bf00      	nop
    7f40:	bd80      	pop	{r7, pc}
    7f42:	bf00      	nop
    7f44:	20000838 	.word	0x20000838
    7f48:	00007edd 	.word	0x00007edd

00007f4c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7f4c:	b480      	push	{r7}
    7f4e:	b085      	sub	sp, #20
    7f50:	af00      	add	r7, sp, #0
    7f52:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7f54:	2300      	movs	r3, #0
    7f56:	73fb      	strb	r3, [r7, #15]
    7f58:	e015      	b.n	7f86 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    7f5a:	7bfa      	ldrb	r2, [r7, #15]
    7f5c:	490f      	ldr	r1, [pc, #60]	; (7f9c <_get_tcc_cfg+0x50>)
    7f5e:	4613      	mov	r3, r2
    7f60:	005b      	lsls	r3, r3, #1
    7f62:	4413      	add	r3, r2
    7f64:	011b      	lsls	r3, r3, #4
    7f66:	440b      	add	r3, r1
    7f68:	681a      	ldr	r2, [r3, #0]
    7f6a:	687b      	ldr	r3, [r7, #4]
    7f6c:	429a      	cmp	r2, r3
    7f6e:	d107      	bne.n	7f80 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7f70:	7bfa      	ldrb	r2, [r7, #15]
    7f72:	4613      	mov	r3, r2
    7f74:	005b      	lsls	r3, r3, #1
    7f76:	4413      	add	r3, r2
    7f78:	011b      	lsls	r3, r3, #4
    7f7a:	4a08      	ldr	r2, [pc, #32]	; (7f9c <_get_tcc_cfg+0x50>)
    7f7c:	4413      	add	r3, r2
    7f7e:	e006      	b.n	7f8e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7f80:	7bfb      	ldrb	r3, [r7, #15]
    7f82:	3301      	adds	r3, #1
    7f84:	73fb      	strb	r3, [r7, #15]
    7f86:	7bfb      	ldrb	r3, [r7, #15]
    7f88:	2b01      	cmp	r3, #1
    7f8a:	d9e6      	bls.n	7f5a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7f8c:	2300      	movs	r3, #0
}
    7f8e:	4618      	mov	r0, r3
    7f90:	3714      	adds	r7, #20
    7f92:	46bd      	mov	sp, r7
    7f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f98:	4770      	bx	lr
    7f9a:	bf00      	nop
    7f9c:	20000060 	.word	0x20000060

00007fa0 <__NVIC_EnableIRQ>:
{
    7fa0:	b480      	push	{r7}
    7fa2:	b083      	sub	sp, #12
    7fa4:	af00      	add	r7, sp, #0
    7fa6:	4603      	mov	r3, r0
    7fa8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7fae:	2b00      	cmp	r3, #0
    7fb0:	db0b      	blt.n	7fca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7fb2:	4909      	ldr	r1, [pc, #36]	; (7fd8 <__NVIC_EnableIRQ+0x38>)
    7fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7fb8:	095b      	lsrs	r3, r3, #5
    7fba:	88fa      	ldrh	r2, [r7, #6]
    7fbc:	f002 021f 	and.w	r2, r2, #31
    7fc0:	2001      	movs	r0, #1
    7fc2:	fa00 f202 	lsl.w	r2, r0, r2
    7fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7fca:	bf00      	nop
    7fcc:	370c      	adds	r7, #12
    7fce:	46bd      	mov	sp, r7
    7fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fd4:	4770      	bx	lr
    7fd6:	bf00      	nop
    7fd8:	e000e100 	.word	0xe000e100

00007fdc <__NVIC_DisableIRQ>:
{
    7fdc:	b480      	push	{r7}
    7fde:	b083      	sub	sp, #12
    7fe0:	af00      	add	r7, sp, #0
    7fe2:	4603      	mov	r3, r0
    7fe4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7fea:	2b00      	cmp	r3, #0
    7fec:	db10      	blt.n	8010 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7fee:	490b      	ldr	r1, [pc, #44]	; (801c <__NVIC_DisableIRQ+0x40>)
    7ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7ff4:	095b      	lsrs	r3, r3, #5
    7ff6:	88fa      	ldrh	r2, [r7, #6]
    7ff8:	f002 021f 	and.w	r2, r2, #31
    7ffc:	2001      	movs	r0, #1
    7ffe:	fa00 f202 	lsl.w	r2, r0, r2
    8002:	3320      	adds	r3, #32
    8004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    800c:	f3bf 8f6f 	isb	sy
}
    8010:	bf00      	nop
    8012:	370c      	adds	r7, #12
    8014:	46bd      	mov	sp, r7
    8016:	f85d 7b04 	ldr.w	r7, [sp], #4
    801a:	4770      	bx	lr
    801c:	e000e100 	.word	0xe000e100

00008020 <__NVIC_ClearPendingIRQ>:
{
    8020:	b480      	push	{r7}
    8022:	b083      	sub	sp, #12
    8024:	af00      	add	r7, sp, #0
    8026:	4603      	mov	r3, r0
    8028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    802a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    802e:	2b00      	cmp	r3, #0
    8030:	db0c      	blt.n	804c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8032:	4909      	ldr	r1, [pc, #36]	; (8058 <__NVIC_ClearPendingIRQ+0x38>)
    8034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8038:	095b      	lsrs	r3, r3, #5
    803a:	88fa      	ldrh	r2, [r7, #6]
    803c:	f002 021f 	and.w	r2, r2, #31
    8040:	2001      	movs	r0, #1
    8042:	fa00 f202 	lsl.w	r2, r0, r2
    8046:	3360      	adds	r3, #96	; 0x60
    8048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    804c:	bf00      	nop
    804e:	370c      	adds	r7, #12
    8050:	46bd      	mov	sp, r7
    8052:	f85d 7b04 	ldr.w	r7, [sp], #4
    8056:	4770      	bx	lr
    8058:	e000e100 	.word	0xe000e100

0000805c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    805c:	b480      	push	{r7}
    805e:	b083      	sub	sp, #12
    8060:	af00      	add	r7, sp, #0
    8062:	6078      	str	r0, [r7, #4]
    8064:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8066:	bf00      	nop
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	691a      	ldr	r2, [r3, #16]
    806c:	683b      	ldr	r3, [r7, #0]
    806e:	4013      	ands	r3, r2
    8070:	2b00      	cmp	r3, #0
    8072:	d1f9      	bne.n	8068 <hri_tc_wait_for_sync+0xc>
	};
}
    8074:	bf00      	nop
    8076:	370c      	adds	r7, #12
    8078:	46bd      	mov	sp, r7
    807a:	f85d 7b04 	ldr.w	r7, [sp], #4
    807e:	4770      	bx	lr

00008080 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8080:	b480      	push	{r7}
    8082:	b083      	sub	sp, #12
    8084:	af00      	add	r7, sp, #0
    8086:	6078      	str	r0, [r7, #4]
    8088:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    808a:	687b      	ldr	r3, [r7, #4]
    808c:	691a      	ldr	r2, [r3, #16]
    808e:	683b      	ldr	r3, [r7, #0]
    8090:	4013      	ands	r3, r2
    8092:	2b00      	cmp	r3, #0
    8094:	bf14      	ite	ne
    8096:	2301      	movne	r3, #1
    8098:	2300      	moveq	r3, #0
    809a:	b2db      	uxtb	r3, r3
}
    809c:	4618      	mov	r0, r3
    809e:	370c      	adds	r7, #12
    80a0:	46bd      	mov	sp, r7
    80a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    80a6:	4770      	bx	lr

000080a8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    80a8:	b480      	push	{r7}
    80aa:	b083      	sub	sp, #12
    80ac:	af00      	add	r7, sp, #0
    80ae:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	7a9b      	ldrb	r3, [r3, #10]
    80b4:	b2db      	uxtb	r3, r3
    80b6:	f003 0301 	and.w	r3, r3, #1
    80ba:	2b00      	cmp	r3, #0
    80bc:	bf14      	ite	ne
    80be:	2301      	movne	r3, #1
    80c0:	2300      	moveq	r3, #0
    80c2:	b2db      	uxtb	r3, r3
}
    80c4:	4618      	mov	r0, r3
    80c6:	370c      	adds	r7, #12
    80c8:	46bd      	mov	sp, r7
    80ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    80ce:	4770      	bx	lr

000080d0 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    80d0:	b480      	push	{r7}
    80d2:	b083      	sub	sp, #12
    80d4:	af00      	add	r7, sp, #0
    80d6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    80d8:	687b      	ldr	r3, [r7, #4]
    80da:	2201      	movs	r2, #1
    80dc:	729a      	strb	r2, [r3, #10]
}
    80de:	bf00      	nop
    80e0:	370c      	adds	r7, #12
    80e2:	46bd      	mov	sp, r7
    80e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    80e8:	4770      	bx	lr

000080ea <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    80ea:	b480      	push	{r7}
    80ec:	b083      	sub	sp, #12
    80ee:	af00      	add	r7, sp, #0
    80f0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    80f2:	687b      	ldr	r3, [r7, #4]
    80f4:	2202      	movs	r2, #2
    80f6:	729a      	strb	r2, [r3, #10]
}
    80f8:	bf00      	nop
    80fa:	370c      	adds	r7, #12
    80fc:	46bd      	mov	sp, r7
    80fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8102:	4770      	bx	lr

00008104 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    8104:	b480      	push	{r7}
    8106:	b083      	sub	sp, #12
    8108:	af00      	add	r7, sp, #0
    810a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    810c:	687b      	ldr	r3, [r7, #4]
    810e:	2201      	movs	r2, #1
    8110:	725a      	strb	r2, [r3, #9]
}
    8112:	bf00      	nop
    8114:	370c      	adds	r7, #12
    8116:	46bd      	mov	sp, r7
    8118:	f85d 7b04 	ldr.w	r7, [sp], #4
    811c:	4770      	bx	lr

0000811e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    811e:	b480      	push	{r7}
    8120:	b083      	sub	sp, #12
    8122:	af00      	add	r7, sp, #0
    8124:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    8126:	687b      	ldr	r3, [r7, #4]
    8128:	7a5b      	ldrb	r3, [r3, #9]
    812a:	b2db      	uxtb	r3, r3
    812c:	085b      	lsrs	r3, r3, #1
    812e:	f003 0301 	and.w	r3, r3, #1
    8132:	2b00      	cmp	r3, #0
    8134:	bf14      	ite	ne
    8136:	2301      	movne	r3, #1
    8138:	2300      	moveq	r3, #0
    813a:	b2db      	uxtb	r3, r3
}
    813c:	4618      	mov	r0, r3
    813e:	370c      	adds	r7, #12
    8140:	46bd      	mov	sp, r7
    8142:	f85d 7b04 	ldr.w	r7, [sp], #4
    8146:	4770      	bx	lr

00008148 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8148:	b580      	push	{r7, lr}
    814a:	b082      	sub	sp, #8
    814c:	af00      	add	r7, sp, #0
    814e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8150:	687b      	ldr	r3, [r7, #4]
    8152:	681b      	ldr	r3, [r3, #0]
    8154:	f043 0201 	orr.w	r2, r3, #1
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    815c:	2101      	movs	r1, #1
    815e:	6878      	ldr	r0, [r7, #4]
    8160:	4b02      	ldr	r3, [pc, #8]	; (816c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    8162:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8164:	bf00      	nop
    8166:	3708      	adds	r7, #8
    8168:	46bd      	mov	sp, r7
    816a:	bd80      	pop	{r7, pc}
    816c:	0000805d 	.word	0x0000805d

00008170 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8170:	b580      	push	{r7, lr}
    8172:	b082      	sub	sp, #8
    8174:	af00      	add	r7, sp, #0
    8176:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8178:	687b      	ldr	r3, [r7, #4]
    817a:	681b      	ldr	r3, [r3, #0]
    817c:	f043 0202 	orr.w	r2, r3, #2
    8180:	687b      	ldr	r3, [r7, #4]
    8182:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8184:	2103      	movs	r1, #3
    8186:	6878      	ldr	r0, [r7, #4]
    8188:	4b02      	ldr	r3, [pc, #8]	; (8194 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    818a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    818c:	bf00      	nop
    818e:	3708      	adds	r7, #8
    8190:	46bd      	mov	sp, r7
    8192:	bd80      	pop	{r7, pc}
    8194:	0000805d 	.word	0x0000805d

00008198 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8198:	b580      	push	{r7, lr}
    819a:	b084      	sub	sp, #16
    819c:	af00      	add	r7, sp, #0
    819e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    81a0:	2103      	movs	r1, #3
    81a2:	6878      	ldr	r0, [r7, #4]
    81a4:	4b09      	ldr	r3, [pc, #36]	; (81cc <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    81a6:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    81a8:	687b      	ldr	r3, [r7, #4]
    81aa:	681b      	ldr	r3, [r3, #0]
    81ac:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    81ae:	68fb      	ldr	r3, [r7, #12]
    81b0:	085b      	lsrs	r3, r3, #1
    81b2:	f003 0301 	and.w	r3, r3, #1
    81b6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    81b8:	68fb      	ldr	r3, [r7, #12]
    81ba:	2b00      	cmp	r3, #0
    81bc:	bf14      	ite	ne
    81be:	2301      	movne	r3, #1
    81c0:	2300      	moveq	r3, #0
    81c2:	b2db      	uxtb	r3, r3
}
    81c4:	4618      	mov	r0, r3
    81c6:	3710      	adds	r7, #16
    81c8:	46bd      	mov	sp, r7
    81ca:	bd80      	pop	{r7, pc}
    81cc:	0000805d 	.word	0x0000805d

000081d0 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    81d0:	b580      	push	{r7, lr}
    81d2:	b082      	sub	sp, #8
    81d4:	af00      	add	r7, sp, #0
    81d6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	681b      	ldr	r3, [r3, #0]
    81dc:	f023 0202 	bic.w	r2, r3, #2
    81e0:	687b      	ldr	r3, [r7, #4]
    81e2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    81e4:	2103      	movs	r1, #3
    81e6:	6878      	ldr	r0, [r7, #4]
    81e8:	4b02      	ldr	r3, [pc, #8]	; (81f4 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    81ea:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    81ec:	bf00      	nop
    81ee:	3708      	adds	r7, #8
    81f0:	46bd      	mov	sp, r7
    81f2:	bd80      	pop	{r7, pc}
    81f4:	0000805d 	.word	0x0000805d

000081f8 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    81f8:	b480      	push	{r7}
    81fa:	b085      	sub	sp, #20
    81fc:	af00      	add	r7, sp, #0
    81fe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8200:	687b      	ldr	r3, [r7, #4]
    8202:	681b      	ldr	r3, [r3, #0]
    8204:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    8206:	68fb      	ldr	r3, [r7, #12]
    8208:	089b      	lsrs	r3, r3, #2
    820a:	f003 0303 	and.w	r3, r3, #3
    820e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8210:	68fb      	ldr	r3, [r7, #12]
}
    8212:	4618      	mov	r0, r3
    8214:	3714      	adds	r7, #20
    8216:	46bd      	mov	sp, r7
    8218:	f85d 7b04 	ldr.w	r7, [sp], #4
    821c:	4770      	bx	lr
	...

00008220 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    8220:	b580      	push	{r7, lr}
    8222:	b084      	sub	sp, #16
    8224:	af00      	add	r7, sp, #0
    8226:	6078      	str	r0, [r7, #4]
    8228:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    822a:	2103      	movs	r1, #3
    822c:	6878      	ldr	r0, [r7, #4]
    822e:	4b07      	ldr	r3, [pc, #28]	; (824c <hri_tc_get_CTRLA_reg+0x2c>)
    8230:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8232:	687b      	ldr	r3, [r7, #4]
    8234:	681b      	ldr	r3, [r3, #0]
    8236:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8238:	68fa      	ldr	r2, [r7, #12]
    823a:	683b      	ldr	r3, [r7, #0]
    823c:	4013      	ands	r3, r2
    823e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8240:	68fb      	ldr	r3, [r7, #12]
}
    8242:	4618      	mov	r0, r3
    8244:	3710      	adds	r7, #16
    8246:	46bd      	mov	sp, r7
    8248:	bd80      	pop	{r7, pc}
    824a:	bf00      	nop
    824c:	0000805d 	.word	0x0000805d

00008250 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8250:	b580      	push	{r7, lr}
    8252:	b082      	sub	sp, #8
    8254:	af00      	add	r7, sp, #0
    8256:	6078      	str	r0, [r7, #4]
    8258:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    825a:	687b      	ldr	r3, [r7, #4]
    825c:	683a      	ldr	r2, [r7, #0]
    825e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8260:	2103      	movs	r1, #3
    8262:	6878      	ldr	r0, [r7, #4]
    8264:	4b02      	ldr	r3, [pc, #8]	; (8270 <hri_tc_write_CTRLA_reg+0x20>)
    8266:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8268:	bf00      	nop
    826a:	3708      	adds	r7, #8
    826c:	46bd      	mov	sp, r7
    826e:	bd80      	pop	{r7, pc}
    8270:	0000805d 	.word	0x0000805d

00008274 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8274:	b480      	push	{r7}
    8276:	b083      	sub	sp, #12
    8278:	af00      	add	r7, sp, #0
    827a:	6078      	str	r0, [r7, #4]
    827c:	460b      	mov	r3, r1
    827e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8280:	687b      	ldr	r3, [r7, #4]
    8282:	887a      	ldrh	r2, [r7, #2]
    8284:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    8286:	bf00      	nop
    8288:	370c      	adds	r7, #12
    828a:	46bd      	mov	sp, r7
    828c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8290:	4770      	bx	lr

00008292 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    8292:	b480      	push	{r7}
    8294:	b083      	sub	sp, #12
    8296:	af00      	add	r7, sp, #0
    8298:	6078      	str	r0, [r7, #4]
    829a:	460b      	mov	r3, r1
    829c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    829e:	687b      	ldr	r3, [r7, #4]
    82a0:	78fa      	ldrb	r2, [r7, #3]
    82a2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    82a4:	bf00      	nop
    82a6:	370c      	adds	r7, #12
    82a8:	46bd      	mov	sp, r7
    82aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    82ae:	4770      	bx	lr

000082b0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    82b0:	b480      	push	{r7}
    82b2:	b083      	sub	sp, #12
    82b4:	af00      	add	r7, sp, #0
    82b6:	6078      	str	r0, [r7, #4]
    82b8:	460b      	mov	r3, r1
    82ba:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    82bc:	687b      	ldr	r3, [r7, #4]
    82be:	78fa      	ldrb	r2, [r7, #3]
    82c0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    82c2:	bf00      	nop
    82c4:	370c      	adds	r7, #12
    82c6:	46bd      	mov	sp, r7
    82c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    82cc:	4770      	bx	lr
	...

000082d0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    82d0:	b580      	push	{r7, lr}
    82d2:	b082      	sub	sp, #8
    82d4:	af00      	add	r7, sp, #0
    82d6:	6078      	str	r0, [r7, #4]
    82d8:	460b      	mov	r3, r1
    82da:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    82dc:	687b      	ldr	r3, [r7, #4]
    82de:	78fa      	ldrb	r2, [r7, #3]
    82e0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    82e2:	2120      	movs	r1, #32
    82e4:	6878      	ldr	r0, [r7, #4]
    82e6:	4b03      	ldr	r3, [pc, #12]	; (82f4 <hri_tccount8_write_PER_reg+0x24>)
    82e8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    82ea:	bf00      	nop
    82ec:	3708      	adds	r7, #8
    82ee:	46bd      	mov	sp, r7
    82f0:	bd80      	pop	{r7, pc}
    82f2:	bf00      	nop
    82f4:	0000805d 	.word	0x0000805d

000082f8 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    82f8:	b580      	push	{r7, lr}
    82fa:	b082      	sub	sp, #8
    82fc:	af00      	add	r7, sp, #0
    82fe:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8300:	2120      	movs	r1, #32
    8302:	6878      	ldr	r0, [r7, #4]
    8304:	4b04      	ldr	r3, [pc, #16]	; (8318 <hri_tccount8_read_PER_reg+0x20>)
    8306:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    8308:	687b      	ldr	r3, [r7, #4]
    830a:	7edb      	ldrb	r3, [r3, #27]
    830c:	b2db      	uxtb	r3, r3
}
    830e:	4618      	mov	r0, r3
    8310:	3708      	adds	r7, #8
    8312:	46bd      	mov	sp, r7
    8314:	bd80      	pop	{r7, pc}
    8316:	bf00      	nop
    8318:	0000805d 	.word	0x0000805d

0000831c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    831c:	b580      	push	{r7, lr}
    831e:	b082      	sub	sp, #8
    8320:	af00      	add	r7, sp, #0
    8322:	6078      	str	r0, [r7, #4]
    8324:	460b      	mov	r3, r1
    8326:	70fb      	strb	r3, [r7, #3]
    8328:	4613      	mov	r3, r2
    832a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    832c:	78fb      	ldrb	r3, [r7, #3]
    832e:	687a      	ldr	r2, [r7, #4]
    8330:	4413      	add	r3, r2
    8332:	78ba      	ldrb	r2, [r7, #2]
    8334:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8336:	21c0      	movs	r1, #192	; 0xc0
    8338:	6878      	ldr	r0, [r7, #4]
    833a:	4b03      	ldr	r3, [pc, #12]	; (8348 <hri_tccount8_write_CC_reg+0x2c>)
    833c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    833e:	bf00      	nop
    8340:	3708      	adds	r7, #8
    8342:	46bd      	mov	sp, r7
    8344:	bd80      	pop	{r7, pc}
    8346:	bf00      	nop
    8348:	0000805d 	.word	0x0000805d

0000834c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    834c:	b580      	push	{r7, lr}
    834e:	b082      	sub	sp, #8
    8350:	af00      	add	r7, sp, #0
    8352:	6078      	str	r0, [r7, #4]
    8354:	460b      	mov	r3, r1
    8356:	70fb      	strb	r3, [r7, #3]
    8358:	4613      	mov	r3, r2
    835a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    835c:	78fb      	ldrb	r3, [r7, #3]
    835e:	687a      	ldr	r2, [r7, #4]
    8360:	330c      	adds	r3, #12
    8362:	005b      	lsls	r3, r3, #1
    8364:	4413      	add	r3, r2
    8366:	883a      	ldrh	r2, [r7, #0]
    8368:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    836a:	21c0      	movs	r1, #192	; 0xc0
    836c:	6878      	ldr	r0, [r7, #4]
    836e:	4b03      	ldr	r3, [pc, #12]	; (837c <hri_tccount16_write_CC_reg+0x30>)
    8370:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8372:	bf00      	nop
    8374:	3708      	adds	r7, #8
    8376:	46bd      	mov	sp, r7
    8378:	bd80      	pop	{r7, pc}
    837a:	bf00      	nop
    837c:	0000805d 	.word	0x0000805d

00008380 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8380:	b580      	push	{r7, lr}
    8382:	b082      	sub	sp, #8
    8384:	af00      	add	r7, sp, #0
    8386:	6078      	str	r0, [r7, #4]
    8388:	460b      	mov	r3, r1
    838a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    838c:	21c0      	movs	r1, #192	; 0xc0
    838e:	6878      	ldr	r0, [r7, #4]
    8390:	4b06      	ldr	r3, [pc, #24]	; (83ac <hri_tccount16_read_CC_reg+0x2c>)
    8392:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8394:	78fb      	ldrb	r3, [r7, #3]
    8396:	687a      	ldr	r2, [r7, #4]
    8398:	330c      	adds	r3, #12
    839a:	005b      	lsls	r3, r3, #1
    839c:	4413      	add	r3, r2
    839e:	889b      	ldrh	r3, [r3, #4]
    83a0:	b29b      	uxth	r3, r3
}
    83a2:	4618      	mov	r0, r3
    83a4:	3708      	adds	r7, #8
    83a6:	46bd      	mov	sp, r7
    83a8:	bd80      	pop	{r7, pc}
    83aa:	bf00      	nop
    83ac:	0000805d 	.word	0x0000805d

000083b0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    83b0:	b580      	push	{r7, lr}
    83b2:	b084      	sub	sp, #16
    83b4:	af00      	add	r7, sp, #0
    83b6:	60f8      	str	r0, [r7, #12]
    83b8:	460b      	mov	r3, r1
    83ba:	607a      	str	r2, [r7, #4]
    83bc:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    83be:	7afb      	ldrb	r3, [r7, #11]
    83c0:	68fa      	ldr	r2, [r7, #12]
    83c2:	3306      	adds	r3, #6
    83c4:	009b      	lsls	r3, r3, #2
    83c6:	4413      	add	r3, r2
    83c8:	687a      	ldr	r2, [r7, #4]
    83ca:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    83cc:	21c0      	movs	r1, #192	; 0xc0
    83ce:	68f8      	ldr	r0, [r7, #12]
    83d0:	4b02      	ldr	r3, [pc, #8]	; (83dc <hri_tccount32_write_CC_reg+0x2c>)
    83d2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    83d4:	bf00      	nop
    83d6:	3710      	adds	r7, #16
    83d8:	46bd      	mov	sp, r7
    83da:	bd80      	pop	{r7, pc}
    83dc:	0000805d 	.word	0x0000805d

000083e0 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    83e0:	b580      	push	{r7, lr}
    83e2:	b082      	sub	sp, #8
    83e4:	af00      	add	r7, sp, #0
    83e6:	6078      	str	r0, [r7, #4]
    83e8:	460b      	mov	r3, r1
    83ea:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    83ec:	21c0      	movs	r1, #192	; 0xc0
    83ee:	6878      	ldr	r0, [r7, #4]
    83f0:	4b05      	ldr	r3, [pc, #20]	; (8408 <hri_tccount32_read_CC_reg+0x28>)
    83f2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    83f4:	78fb      	ldrb	r3, [r7, #3]
    83f6:	687a      	ldr	r2, [r7, #4]
    83f8:	3306      	adds	r3, #6
    83fa:	009b      	lsls	r3, r3, #2
    83fc:	4413      	add	r3, r2
    83fe:	685b      	ldr	r3, [r3, #4]
}
    8400:	4618      	mov	r0, r3
    8402:	3708      	adds	r7, #8
    8404:	46bd      	mov	sp, r7
    8406:	bd80      	pop	{r7, pc}
    8408:	0000805d 	.word	0x0000805d

0000840c <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    840c:	b580      	push	{r7, lr}
    840e:	b084      	sub	sp, #16
    8410:	af00      	add	r7, sp, #0
    8412:	6078      	str	r0, [r7, #4]
    8414:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    8416:	6838      	ldr	r0, [r7, #0]
    8418:	4b93      	ldr	r3, [pc, #588]	; (8668 <_tc_timer_init+0x25c>)
    841a:	4798      	blx	r3
    841c:	4603      	mov	r3, r0
    841e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    8420:	687b      	ldr	r3, [r7, #4]
    8422:	683a      	ldr	r2, [r7, #0]
    8424:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    8426:	22a4      	movs	r2, #164	; 0xa4
    8428:	4990      	ldr	r1, [pc, #576]	; (866c <_tc_timer_init+0x260>)
    842a:	2001      	movs	r0, #1
    842c:	4b90      	ldr	r3, [pc, #576]	; (8670 <_tc_timer_init+0x264>)
    842e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8430:	2101      	movs	r1, #1
    8432:	6838      	ldr	r0, [r7, #0]
    8434:	4b8f      	ldr	r3, [pc, #572]	; (8674 <_tc_timer_init+0x268>)
    8436:	4798      	blx	r3
    8438:	4603      	mov	r3, r0
    843a:	f083 0301 	eor.w	r3, r3, #1
    843e:	b2db      	uxtb	r3, r3
    8440:	2b00      	cmp	r3, #0
    8442:	d011      	beq.n	8468 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8444:	2102      	movs	r1, #2
    8446:	6838      	ldr	r0, [r7, #0]
    8448:	4b8b      	ldr	r3, [pc, #556]	; (8678 <_tc_timer_init+0x26c>)
    844a:	4798      	blx	r3
    844c:	4603      	mov	r3, r0
    844e:	2b00      	cmp	r3, #0
    8450:	d006      	beq.n	8460 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8452:	6838      	ldr	r0, [r7, #0]
    8454:	4b89      	ldr	r3, [pc, #548]	; (867c <_tc_timer_init+0x270>)
    8456:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8458:	2102      	movs	r1, #2
    845a:	6838      	ldr	r0, [r7, #0]
    845c:	4b88      	ldr	r3, [pc, #544]	; (8680 <_tc_timer_init+0x274>)
    845e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8460:	2101      	movs	r1, #1
    8462:	6838      	ldr	r0, [r7, #0]
    8464:	4b87      	ldr	r3, [pc, #540]	; (8684 <_tc_timer_init+0x278>)
    8466:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8468:	2101      	movs	r1, #1
    846a:	6838      	ldr	r0, [r7, #0]
    846c:	4b84      	ldr	r3, [pc, #528]	; (8680 <_tc_timer_init+0x274>)
    846e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8470:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8474:	4984      	ldr	r1, [pc, #528]	; (8688 <_tc_timer_init+0x27c>)
    8476:	4613      	mov	r3, r2
    8478:	009b      	lsls	r3, r3, #2
    847a:	4413      	add	r3, r2
    847c:	009b      	lsls	r3, r3, #2
    847e:	440b      	add	r3, r1
    8480:	3304      	adds	r3, #4
    8482:	681b      	ldr	r3, [r3, #0]
    8484:	4619      	mov	r1, r3
    8486:	6838      	ldr	r0, [r7, #0]
    8488:	4b7e      	ldr	r3, [pc, #504]	; (8684 <_tc_timer_init+0x278>)
    848a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    848c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8490:	497d      	ldr	r1, [pc, #500]	; (8688 <_tc_timer_init+0x27c>)
    8492:	4613      	mov	r3, r2
    8494:	009b      	lsls	r3, r3, #2
    8496:	4413      	add	r3, r2
    8498:	009b      	lsls	r3, r3, #2
    849a:	440b      	add	r3, r1
    849c:	330a      	adds	r3, #10
    849e:	781b      	ldrb	r3, [r3, #0]
    84a0:	4619      	mov	r1, r3
    84a2:	6838      	ldr	r0, [r7, #0]
    84a4:	4b79      	ldr	r3, [pc, #484]	; (868c <_tc_timer_init+0x280>)
    84a6:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    84a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    84ac:	4976      	ldr	r1, [pc, #472]	; (8688 <_tc_timer_init+0x27c>)
    84ae:	4613      	mov	r3, r2
    84b0:	009b      	lsls	r3, r3, #2
    84b2:	4413      	add	r3, r2
    84b4:	009b      	lsls	r3, r3, #2
    84b6:	440b      	add	r3, r1
    84b8:	3308      	adds	r3, #8
    84ba:	881b      	ldrh	r3, [r3, #0]
    84bc:	4619      	mov	r1, r3
    84be:	6838      	ldr	r0, [r7, #0]
    84c0:	4b73      	ldr	r3, [pc, #460]	; (8690 <_tc_timer_init+0x284>)
    84c2:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    84c4:	2101      	movs	r1, #1
    84c6:	6838      	ldr	r0, [r7, #0]
    84c8:	4b72      	ldr	r3, [pc, #456]	; (8694 <_tc_timer_init+0x288>)
    84ca:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    84cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    84d0:	496d      	ldr	r1, [pc, #436]	; (8688 <_tc_timer_init+0x27c>)
    84d2:	4613      	mov	r3, r2
    84d4:	009b      	lsls	r3, r3, #2
    84d6:	4413      	add	r3, r2
    84d8:	009b      	lsls	r3, r3, #2
    84da:	440b      	add	r3, r1
    84dc:	3304      	adds	r3, #4
    84de:	681b      	ldr	r3, [r3, #0]
    84e0:	f003 030c 	and.w	r3, r3, #12
    84e4:	2b08      	cmp	r3, #8
    84e6:	d11e      	bne.n	8526 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    84e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    84ec:	4966      	ldr	r1, [pc, #408]	; (8688 <_tc_timer_init+0x27c>)
    84ee:	4613      	mov	r3, r2
    84f0:	009b      	lsls	r3, r3, #2
    84f2:	4413      	add	r3, r2
    84f4:	009b      	lsls	r3, r3, #2
    84f6:	440b      	add	r3, r1
    84f8:	330c      	adds	r3, #12
    84fa:	681b      	ldr	r3, [r3, #0]
    84fc:	461a      	mov	r2, r3
    84fe:	2100      	movs	r1, #0
    8500:	6838      	ldr	r0, [r7, #0]
    8502:	4b65      	ldr	r3, [pc, #404]	; (8698 <_tc_timer_init+0x28c>)
    8504:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8506:	f997 200f 	ldrsb.w	r2, [r7, #15]
    850a:	495f      	ldr	r1, [pc, #380]	; (8688 <_tc_timer_init+0x27c>)
    850c:	4613      	mov	r3, r2
    850e:	009b      	lsls	r3, r3, #2
    8510:	4413      	add	r3, r2
    8512:	009b      	lsls	r3, r3, #2
    8514:	440b      	add	r3, r1
    8516:	3310      	adds	r3, #16
    8518:	681b      	ldr	r3, [r3, #0]
    851a:	461a      	mov	r2, r3
    851c:	2101      	movs	r1, #1
    851e:	6838      	ldr	r0, [r7, #0]
    8520:	4b5d      	ldr	r3, [pc, #372]	; (8698 <_tc_timer_init+0x28c>)
    8522:	4798      	blx	r3
    8524:	e06a      	b.n	85fc <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8526:	f997 200f 	ldrsb.w	r2, [r7, #15]
    852a:	4957      	ldr	r1, [pc, #348]	; (8688 <_tc_timer_init+0x27c>)
    852c:	4613      	mov	r3, r2
    852e:	009b      	lsls	r3, r3, #2
    8530:	4413      	add	r3, r2
    8532:	009b      	lsls	r3, r3, #2
    8534:	440b      	add	r3, r1
    8536:	3304      	adds	r3, #4
    8538:	681b      	ldr	r3, [r3, #0]
    853a:	f003 030c 	and.w	r3, r3, #12
    853e:	2b00      	cmp	r3, #0
    8540:	d120      	bne.n	8584 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8542:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8546:	4950      	ldr	r1, [pc, #320]	; (8688 <_tc_timer_init+0x27c>)
    8548:	4613      	mov	r3, r2
    854a:	009b      	lsls	r3, r3, #2
    854c:	4413      	add	r3, r2
    854e:	009b      	lsls	r3, r3, #2
    8550:	440b      	add	r3, r1
    8552:	330c      	adds	r3, #12
    8554:	681b      	ldr	r3, [r3, #0]
    8556:	b29b      	uxth	r3, r3
    8558:	461a      	mov	r2, r3
    855a:	2100      	movs	r1, #0
    855c:	6838      	ldr	r0, [r7, #0]
    855e:	4b4f      	ldr	r3, [pc, #316]	; (869c <_tc_timer_init+0x290>)
    8560:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8562:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8566:	4948      	ldr	r1, [pc, #288]	; (8688 <_tc_timer_init+0x27c>)
    8568:	4613      	mov	r3, r2
    856a:	009b      	lsls	r3, r3, #2
    856c:	4413      	add	r3, r2
    856e:	009b      	lsls	r3, r3, #2
    8570:	440b      	add	r3, r1
    8572:	3310      	adds	r3, #16
    8574:	681b      	ldr	r3, [r3, #0]
    8576:	b29b      	uxth	r3, r3
    8578:	461a      	mov	r2, r3
    857a:	2101      	movs	r1, #1
    857c:	6838      	ldr	r0, [r7, #0]
    857e:	4b47      	ldr	r3, [pc, #284]	; (869c <_tc_timer_init+0x290>)
    8580:	4798      	blx	r3
    8582:	e03b      	b.n	85fc <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8584:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8588:	493f      	ldr	r1, [pc, #252]	; (8688 <_tc_timer_init+0x27c>)
    858a:	4613      	mov	r3, r2
    858c:	009b      	lsls	r3, r3, #2
    858e:	4413      	add	r3, r2
    8590:	009b      	lsls	r3, r3, #2
    8592:	440b      	add	r3, r1
    8594:	3304      	adds	r3, #4
    8596:	681b      	ldr	r3, [r3, #0]
    8598:	f003 030c 	and.w	r3, r3, #12
    859c:	2b04      	cmp	r3, #4
    859e:	d12d      	bne.n	85fc <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    85a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85a4:	4938      	ldr	r1, [pc, #224]	; (8688 <_tc_timer_init+0x27c>)
    85a6:	4613      	mov	r3, r2
    85a8:	009b      	lsls	r3, r3, #2
    85aa:	4413      	add	r3, r2
    85ac:	009b      	lsls	r3, r3, #2
    85ae:	440b      	add	r3, r1
    85b0:	330c      	adds	r3, #12
    85b2:	681b      	ldr	r3, [r3, #0]
    85b4:	b2db      	uxtb	r3, r3
    85b6:	461a      	mov	r2, r3
    85b8:	2100      	movs	r1, #0
    85ba:	6838      	ldr	r0, [r7, #0]
    85bc:	4b38      	ldr	r3, [pc, #224]	; (86a0 <_tc_timer_init+0x294>)
    85be:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    85c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85c4:	4930      	ldr	r1, [pc, #192]	; (8688 <_tc_timer_init+0x27c>)
    85c6:	4613      	mov	r3, r2
    85c8:	009b      	lsls	r3, r3, #2
    85ca:	4413      	add	r3, r2
    85cc:	009b      	lsls	r3, r3, #2
    85ce:	440b      	add	r3, r1
    85d0:	3310      	adds	r3, #16
    85d2:	681b      	ldr	r3, [r3, #0]
    85d4:	b2db      	uxtb	r3, r3
    85d6:	461a      	mov	r2, r3
    85d8:	2101      	movs	r1, #1
    85da:	6838      	ldr	r0, [r7, #0]
    85dc:	4b30      	ldr	r3, [pc, #192]	; (86a0 <_tc_timer_init+0x294>)
    85de:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    85e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85e4:	4928      	ldr	r1, [pc, #160]	; (8688 <_tc_timer_init+0x27c>)
    85e6:	4613      	mov	r3, r2
    85e8:	009b      	lsls	r3, r3, #2
    85ea:	4413      	add	r3, r2
    85ec:	009b      	lsls	r3, r3, #2
    85ee:	440b      	add	r3, r1
    85f0:	330b      	adds	r3, #11
    85f2:	781b      	ldrb	r3, [r3, #0]
    85f4:	4619      	mov	r1, r3
    85f6:	6838      	ldr	r0, [r7, #0]
    85f8:	4b2a      	ldr	r3, [pc, #168]	; (86a4 <_tc_timer_init+0x298>)
    85fa:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    85fc:	6838      	ldr	r0, [r7, #0]
    85fe:	4b2a      	ldr	r3, [pc, #168]	; (86a8 <_tc_timer_init+0x29c>)
    8600:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    8602:	6879      	ldr	r1, [r7, #4]
    8604:	6838      	ldr	r0, [r7, #0]
    8606:	4b29      	ldr	r3, [pc, #164]	; (86ac <_tc_timer_init+0x2a0>)
    8608:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    860a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    860e:	491e      	ldr	r1, [pc, #120]	; (8688 <_tc_timer_init+0x27c>)
    8610:	4613      	mov	r3, r2
    8612:	009b      	lsls	r3, r3, #2
    8614:	4413      	add	r3, r2
    8616:	009b      	lsls	r3, r3, #2
    8618:	440b      	add	r3, r1
    861a:	3302      	adds	r3, #2
    861c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8620:	4618      	mov	r0, r3
    8622:	4b23      	ldr	r3, [pc, #140]	; (86b0 <_tc_timer_init+0x2a4>)
    8624:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8626:	f997 200f 	ldrsb.w	r2, [r7, #15]
    862a:	4917      	ldr	r1, [pc, #92]	; (8688 <_tc_timer_init+0x27c>)
    862c:	4613      	mov	r3, r2
    862e:	009b      	lsls	r3, r3, #2
    8630:	4413      	add	r3, r2
    8632:	009b      	lsls	r3, r3, #2
    8634:	440b      	add	r3, r1
    8636:	3302      	adds	r3, #2
    8638:	f9b3 3000 	ldrsh.w	r3, [r3]
    863c:	4618      	mov	r0, r3
    863e:	4b1d      	ldr	r3, [pc, #116]	; (86b4 <_tc_timer_init+0x2a8>)
    8640:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8642:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8646:	4910      	ldr	r1, [pc, #64]	; (8688 <_tc_timer_init+0x27c>)
    8648:	4613      	mov	r3, r2
    864a:	009b      	lsls	r3, r3, #2
    864c:	4413      	add	r3, r2
    864e:	009b      	lsls	r3, r3, #2
    8650:	440b      	add	r3, r1
    8652:	3302      	adds	r3, #2
    8654:	f9b3 3000 	ldrsh.w	r3, [r3]
    8658:	4618      	mov	r0, r3
    865a:	4b17      	ldr	r3, [pc, #92]	; (86b8 <_tc_timer_init+0x2ac>)
    865c:	4798      	blx	r3

	return ERR_NONE;
    865e:	2300      	movs	r3, #0
}
    8660:	4618      	mov	r0, r3
    8662:	3710      	adds	r7, #16
    8664:	46bd      	mov	sp, r7
    8666:	bd80      	pop	{r7, pc}
    8668:	00008c9d 	.word	0x00008c9d
    866c:	000100f8 	.word	0x000100f8
    8670:	00003ab1 	.word	0x00003ab1
    8674:	00008081 	.word	0x00008081
    8678:	00008221 	.word	0x00008221
    867c:	000081d1 	.word	0x000081d1
    8680:	0000805d 	.word	0x0000805d
    8684:	00008251 	.word	0x00008251
    8688:	200000e0 	.word	0x200000e0
    868c:	000082b1 	.word	0x000082b1
    8690:	00008275 	.word	0x00008275
    8694:	00008293 	.word	0x00008293
    8698:	000083b1 	.word	0x000083b1
    869c:	0000834d 	.word	0x0000834d
    86a0:	0000831d 	.word	0x0000831d
    86a4:	000082d1 	.word	0x000082d1
    86a8:	00008105 	.word	0x00008105
    86ac:	00008d05 	.word	0x00008d05
    86b0:	00007fdd 	.word	0x00007fdd
    86b4:	00008021 	.word	0x00008021
    86b8:	00007fa1 	.word	0x00007fa1

000086bc <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    86bc:	b580      	push	{r7, lr}
    86be:	b084      	sub	sp, #16
    86c0:	af00      	add	r7, sp, #0
    86c2:	6078      	str	r0, [r7, #4]
    86c4:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    86c6:	6838      	ldr	r0, [r7, #0]
    86c8:	4b73      	ldr	r3, [pc, #460]	; (8898 <_pwm_init+0x1dc>)
    86ca:	4798      	blx	r3
    86cc:	4603      	mov	r3, r0
    86ce:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    86d0:	687b      	ldr	r3, [r7, #4]
    86d2:	683a      	ldr	r2, [r7, #0]
    86d4:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    86d6:	2101      	movs	r1, #1
    86d8:	6838      	ldr	r0, [r7, #0]
    86da:	4b70      	ldr	r3, [pc, #448]	; (889c <_pwm_init+0x1e0>)
    86dc:	4798      	blx	r3
    86de:	4603      	mov	r3, r0
    86e0:	f083 0301 	eor.w	r3, r3, #1
    86e4:	b2db      	uxtb	r3, r3
    86e6:	2b00      	cmp	r3, #0
    86e8:	d011      	beq.n	870e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    86ea:	2102      	movs	r1, #2
    86ec:	6838      	ldr	r0, [r7, #0]
    86ee:	4b6c      	ldr	r3, [pc, #432]	; (88a0 <_pwm_init+0x1e4>)
    86f0:	4798      	blx	r3
    86f2:	4603      	mov	r3, r0
    86f4:	2b00      	cmp	r3, #0
    86f6:	d006      	beq.n	8706 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    86f8:	6838      	ldr	r0, [r7, #0]
    86fa:	4b6a      	ldr	r3, [pc, #424]	; (88a4 <_pwm_init+0x1e8>)
    86fc:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    86fe:	2102      	movs	r1, #2
    8700:	6838      	ldr	r0, [r7, #0]
    8702:	4b69      	ldr	r3, [pc, #420]	; (88a8 <_pwm_init+0x1ec>)
    8704:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8706:	2101      	movs	r1, #1
    8708:	6838      	ldr	r0, [r7, #0]
    870a:	4b68      	ldr	r3, [pc, #416]	; (88ac <_pwm_init+0x1f0>)
    870c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    870e:	2101      	movs	r1, #1
    8710:	6838      	ldr	r0, [r7, #0]
    8712:	4b65      	ldr	r3, [pc, #404]	; (88a8 <_pwm_init+0x1ec>)
    8714:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8716:	f997 200f 	ldrsb.w	r2, [r7, #15]
    871a:	4965      	ldr	r1, [pc, #404]	; (88b0 <_pwm_init+0x1f4>)
    871c:	4613      	mov	r3, r2
    871e:	009b      	lsls	r3, r3, #2
    8720:	4413      	add	r3, r2
    8722:	009b      	lsls	r3, r3, #2
    8724:	440b      	add	r3, r1
    8726:	3304      	adds	r3, #4
    8728:	681b      	ldr	r3, [r3, #0]
    872a:	4619      	mov	r1, r3
    872c:	6838      	ldr	r0, [r7, #0]
    872e:	4b5f      	ldr	r3, [pc, #380]	; (88ac <_pwm_init+0x1f0>)
    8730:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8732:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8736:	495e      	ldr	r1, [pc, #376]	; (88b0 <_pwm_init+0x1f4>)
    8738:	4613      	mov	r3, r2
    873a:	009b      	lsls	r3, r3, #2
    873c:	4413      	add	r3, r2
    873e:	009b      	lsls	r3, r3, #2
    8740:	440b      	add	r3, r1
    8742:	330a      	adds	r3, #10
    8744:	781b      	ldrb	r3, [r3, #0]
    8746:	4619      	mov	r1, r3
    8748:	6838      	ldr	r0, [r7, #0]
    874a:	4b5a      	ldr	r3, [pc, #360]	; (88b4 <_pwm_init+0x1f8>)
    874c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    874e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8752:	4957      	ldr	r1, [pc, #348]	; (88b0 <_pwm_init+0x1f4>)
    8754:	4613      	mov	r3, r2
    8756:	009b      	lsls	r3, r3, #2
    8758:	4413      	add	r3, r2
    875a:	009b      	lsls	r3, r3, #2
    875c:	440b      	add	r3, r1
    875e:	3308      	adds	r3, #8
    8760:	881b      	ldrh	r3, [r3, #0]
    8762:	4619      	mov	r1, r3
    8764:	6838      	ldr	r0, [r7, #0]
    8766:	4b54      	ldr	r3, [pc, #336]	; (88b8 <_pwm_init+0x1fc>)
    8768:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    876a:	2103      	movs	r1, #3
    876c:	6838      	ldr	r0, [r7, #0]
    876e:	4b53      	ldr	r3, [pc, #332]	; (88bc <_pwm_init+0x200>)
    8770:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8772:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8776:	494e      	ldr	r1, [pc, #312]	; (88b0 <_pwm_init+0x1f4>)
    8778:	4613      	mov	r3, r2
    877a:	009b      	lsls	r3, r3, #2
    877c:	4413      	add	r3, r2
    877e:	009b      	lsls	r3, r3, #2
    8780:	440b      	add	r3, r1
    8782:	3304      	adds	r3, #4
    8784:	681b      	ldr	r3, [r3, #0]
    8786:	f003 030c 	and.w	r3, r3, #12
    878a:	2b08      	cmp	r3, #8
    878c:	d11e      	bne.n	87cc <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    878e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8792:	4947      	ldr	r1, [pc, #284]	; (88b0 <_pwm_init+0x1f4>)
    8794:	4613      	mov	r3, r2
    8796:	009b      	lsls	r3, r3, #2
    8798:	4413      	add	r3, r2
    879a:	009b      	lsls	r3, r3, #2
    879c:	440b      	add	r3, r1
    879e:	330c      	adds	r3, #12
    87a0:	681b      	ldr	r3, [r3, #0]
    87a2:	461a      	mov	r2, r3
    87a4:	2100      	movs	r1, #0
    87a6:	6838      	ldr	r0, [r7, #0]
    87a8:	4b45      	ldr	r3, [pc, #276]	; (88c0 <_pwm_init+0x204>)
    87aa:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    87ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87b0:	493f      	ldr	r1, [pc, #252]	; (88b0 <_pwm_init+0x1f4>)
    87b2:	4613      	mov	r3, r2
    87b4:	009b      	lsls	r3, r3, #2
    87b6:	4413      	add	r3, r2
    87b8:	009b      	lsls	r3, r3, #2
    87ba:	440b      	add	r3, r1
    87bc:	3310      	adds	r3, #16
    87be:	681b      	ldr	r3, [r3, #0]
    87c0:	461a      	mov	r2, r3
    87c2:	2101      	movs	r1, #1
    87c4:	6838      	ldr	r0, [r7, #0]
    87c6:	4b3e      	ldr	r3, [pc, #248]	; (88c0 <_pwm_init+0x204>)
    87c8:	4798      	blx	r3
    87ca:	e031      	b.n	8830 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    87cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87d0:	4937      	ldr	r1, [pc, #220]	; (88b0 <_pwm_init+0x1f4>)
    87d2:	4613      	mov	r3, r2
    87d4:	009b      	lsls	r3, r3, #2
    87d6:	4413      	add	r3, r2
    87d8:	009b      	lsls	r3, r3, #2
    87da:	440b      	add	r3, r1
    87dc:	3304      	adds	r3, #4
    87de:	681b      	ldr	r3, [r3, #0]
    87e0:	f003 030c 	and.w	r3, r3, #12
    87e4:	2b00      	cmp	r3, #0
    87e6:	d120      	bne.n	882a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    87e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87ec:	4930      	ldr	r1, [pc, #192]	; (88b0 <_pwm_init+0x1f4>)
    87ee:	4613      	mov	r3, r2
    87f0:	009b      	lsls	r3, r3, #2
    87f2:	4413      	add	r3, r2
    87f4:	009b      	lsls	r3, r3, #2
    87f6:	440b      	add	r3, r1
    87f8:	330c      	adds	r3, #12
    87fa:	681b      	ldr	r3, [r3, #0]
    87fc:	b29b      	uxth	r3, r3
    87fe:	461a      	mov	r2, r3
    8800:	2100      	movs	r1, #0
    8802:	6838      	ldr	r0, [r7, #0]
    8804:	4b2f      	ldr	r3, [pc, #188]	; (88c4 <_pwm_init+0x208>)
    8806:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8808:	f997 200f 	ldrsb.w	r2, [r7, #15]
    880c:	4928      	ldr	r1, [pc, #160]	; (88b0 <_pwm_init+0x1f4>)
    880e:	4613      	mov	r3, r2
    8810:	009b      	lsls	r3, r3, #2
    8812:	4413      	add	r3, r2
    8814:	009b      	lsls	r3, r3, #2
    8816:	440b      	add	r3, r1
    8818:	3310      	adds	r3, #16
    881a:	681b      	ldr	r3, [r3, #0]
    881c:	b29b      	uxth	r3, r3
    881e:	461a      	mov	r2, r3
    8820:	2101      	movs	r1, #1
    8822:	6838      	ldr	r0, [r7, #0]
    8824:	4b27      	ldr	r3, [pc, #156]	; (88c4 <_pwm_init+0x208>)
    8826:	4798      	blx	r3
    8828:	e002      	b.n	8830 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    882a:	f04f 33ff 	mov.w	r3, #4294967295
    882e:	e02e      	b.n	888e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8830:	6879      	ldr	r1, [r7, #4]
    8832:	6838      	ldr	r0, [r7, #0]
    8834:	4b24      	ldr	r3, [pc, #144]	; (88c8 <_pwm_init+0x20c>)
    8836:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8838:	f997 200f 	ldrsb.w	r2, [r7, #15]
    883c:	491c      	ldr	r1, [pc, #112]	; (88b0 <_pwm_init+0x1f4>)
    883e:	4613      	mov	r3, r2
    8840:	009b      	lsls	r3, r3, #2
    8842:	4413      	add	r3, r2
    8844:	009b      	lsls	r3, r3, #2
    8846:	440b      	add	r3, r1
    8848:	3302      	adds	r3, #2
    884a:	f9b3 3000 	ldrsh.w	r3, [r3]
    884e:	4618      	mov	r0, r3
    8850:	4b1e      	ldr	r3, [pc, #120]	; (88cc <_pwm_init+0x210>)
    8852:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8854:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8858:	4915      	ldr	r1, [pc, #84]	; (88b0 <_pwm_init+0x1f4>)
    885a:	4613      	mov	r3, r2
    885c:	009b      	lsls	r3, r3, #2
    885e:	4413      	add	r3, r2
    8860:	009b      	lsls	r3, r3, #2
    8862:	440b      	add	r3, r1
    8864:	3302      	adds	r3, #2
    8866:	f9b3 3000 	ldrsh.w	r3, [r3]
    886a:	4618      	mov	r0, r3
    886c:	4b18      	ldr	r3, [pc, #96]	; (88d0 <_pwm_init+0x214>)
    886e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8870:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8874:	490e      	ldr	r1, [pc, #56]	; (88b0 <_pwm_init+0x1f4>)
    8876:	4613      	mov	r3, r2
    8878:	009b      	lsls	r3, r3, #2
    887a:	4413      	add	r3, r2
    887c:	009b      	lsls	r3, r3, #2
    887e:	440b      	add	r3, r1
    8880:	3302      	adds	r3, #2
    8882:	f9b3 3000 	ldrsh.w	r3, [r3]
    8886:	4618      	mov	r0, r3
    8888:	4b12      	ldr	r3, [pc, #72]	; (88d4 <_pwm_init+0x218>)
    888a:	4798      	blx	r3

	return 0;
    888c:	2300      	movs	r3, #0
}
    888e:	4618      	mov	r0, r3
    8890:	3710      	adds	r7, #16
    8892:	46bd      	mov	sp, r7
    8894:	bd80      	pop	{r7, pc}
    8896:	bf00      	nop
    8898:	00008c9d 	.word	0x00008c9d
    889c:	00008081 	.word	0x00008081
    88a0:	00008221 	.word	0x00008221
    88a4:	000081d1 	.word	0x000081d1
    88a8:	0000805d 	.word	0x0000805d
    88ac:	00008251 	.word	0x00008251
    88b0:	200000e0 	.word	0x200000e0
    88b4:	000082b1 	.word	0x000082b1
    88b8:	00008275 	.word	0x00008275
    88bc:	00008293 	.word	0x00008293
    88c0:	000083b1 	.word	0x000083b1
    88c4:	0000834d 	.word	0x0000834d
    88c8:	00008d05 	.word	0x00008d05
    88cc:	00007fdd 	.word	0x00007fdd
    88d0:	00008021 	.word	0x00008021
    88d4:	00007fa1 	.word	0x00007fa1

000088d8 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    88d8:	b580      	push	{r7, lr}
    88da:	b084      	sub	sp, #16
    88dc:	af00      	add	r7, sp, #0
    88de:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    88e0:	687b      	ldr	r3, [r7, #4]
    88e2:	68db      	ldr	r3, [r3, #12]
    88e4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    88e6:	68f8      	ldr	r0, [r7, #12]
    88e8:	4b10      	ldr	r3, [pc, #64]	; (892c <_tc_timer_deinit+0x54>)
    88ea:	4798      	blx	r3
    88ec:	4603      	mov	r3, r0
    88ee:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    88f0:	22f9      	movs	r2, #249	; 0xf9
    88f2:	490f      	ldr	r1, [pc, #60]	; (8930 <_tc_timer_deinit+0x58>)
    88f4:	2001      	movs	r0, #1
    88f6:	4b0f      	ldr	r3, [pc, #60]	; (8934 <_tc_timer_deinit+0x5c>)
    88f8:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    88fa:	f997 200b 	ldrsb.w	r2, [r7, #11]
    88fe:	490e      	ldr	r1, [pc, #56]	; (8938 <_tc_timer_deinit+0x60>)
    8900:	4613      	mov	r3, r2
    8902:	009b      	lsls	r3, r3, #2
    8904:	4413      	add	r3, r2
    8906:	009b      	lsls	r3, r3, #2
    8908:	440b      	add	r3, r1
    890a:	3302      	adds	r3, #2
    890c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8910:	4618      	mov	r0, r3
    8912:	4b0a      	ldr	r3, [pc, #40]	; (893c <_tc_timer_deinit+0x64>)
    8914:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8916:	68f8      	ldr	r0, [r7, #12]
    8918:	4b09      	ldr	r3, [pc, #36]	; (8940 <_tc_timer_deinit+0x68>)
    891a:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    891c:	68f8      	ldr	r0, [r7, #12]
    891e:	4b09      	ldr	r3, [pc, #36]	; (8944 <_tc_timer_deinit+0x6c>)
    8920:	4798      	blx	r3
}
    8922:	bf00      	nop
    8924:	3710      	adds	r7, #16
    8926:	46bd      	mov	sp, r7
    8928:	bd80      	pop	{r7, pc}
    892a:	bf00      	nop
    892c:	00008c9d 	.word	0x00008c9d
    8930:	000100f8 	.word	0x000100f8
    8934:	00003ab1 	.word	0x00003ab1
    8938:	200000e0 	.word	0x200000e0
    893c:	00007fdd 	.word	0x00007fdd
    8940:	000081d1 	.word	0x000081d1
    8944:	00008149 	.word	0x00008149

00008948 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8948:	b580      	push	{r7, lr}
    894a:	b082      	sub	sp, #8
    894c:	af00      	add	r7, sp, #0
    894e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8950:	687b      	ldr	r3, [r7, #4]
    8952:	68db      	ldr	r3, [r3, #12]
    8954:	4618      	mov	r0, r3
    8956:	4b03      	ldr	r3, [pc, #12]	; (8964 <_tc_timer_start+0x1c>)
    8958:	4798      	blx	r3
}
    895a:	bf00      	nop
    895c:	3708      	adds	r7, #8
    895e:	46bd      	mov	sp, r7
    8960:	bd80      	pop	{r7, pc}
    8962:	bf00      	nop
    8964:	00008171 	.word	0x00008171

00008968 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8968:	b580      	push	{r7, lr}
    896a:	b082      	sub	sp, #8
    896c:	af00      	add	r7, sp, #0
    896e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8970:	687b      	ldr	r3, [r7, #4]
    8972:	691b      	ldr	r3, [r3, #16]
    8974:	4618      	mov	r0, r3
    8976:	4b03      	ldr	r3, [pc, #12]	; (8984 <_pwm_enable+0x1c>)
    8978:	4798      	blx	r3
}
    897a:	bf00      	nop
    897c:	3708      	adds	r7, #8
    897e:	46bd      	mov	sp, r7
    8980:	bd80      	pop	{r7, pc}
    8982:	bf00      	nop
    8984:	00008171 	.word	0x00008171

00008988 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8988:	b580      	push	{r7, lr}
    898a:	b082      	sub	sp, #8
    898c:	af00      	add	r7, sp, #0
    898e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8990:	687b      	ldr	r3, [r7, #4]
    8992:	68db      	ldr	r3, [r3, #12]
    8994:	4618      	mov	r0, r3
    8996:	4b03      	ldr	r3, [pc, #12]	; (89a4 <_tc_timer_stop+0x1c>)
    8998:	4798      	blx	r3
}
    899a:	bf00      	nop
    899c:	3708      	adds	r7, #8
    899e:	46bd      	mov	sp, r7
    89a0:	bd80      	pop	{r7, pc}
    89a2:	bf00      	nop
    89a4:	000081d1 	.word	0x000081d1

000089a8 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    89a8:	b580      	push	{r7, lr}
    89aa:	b084      	sub	sp, #16
    89ac:	af00      	add	r7, sp, #0
    89ae:	6078      	str	r0, [r7, #4]
    89b0:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    89b2:	687b      	ldr	r3, [r7, #4]
    89b4:	68db      	ldr	r3, [r3, #12]
    89b6:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    89b8:	68f8      	ldr	r0, [r7, #12]
    89ba:	4b14      	ldr	r3, [pc, #80]	; (8a0c <_tc_timer_set_period+0x64>)
    89bc:	4798      	blx	r3
    89be:	4603      	mov	r3, r0
    89c0:	2b02      	cmp	r3, #2
    89c2:	d105      	bne.n	89d0 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    89c4:	683a      	ldr	r2, [r7, #0]
    89c6:	2100      	movs	r1, #0
    89c8:	68f8      	ldr	r0, [r7, #12]
    89ca:	4b11      	ldr	r3, [pc, #68]	; (8a10 <_tc_timer_set_period+0x68>)
    89cc:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    89ce:	e019      	b.n	8a04 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    89d0:	68f8      	ldr	r0, [r7, #12]
    89d2:	4b0e      	ldr	r3, [pc, #56]	; (8a0c <_tc_timer_set_period+0x64>)
    89d4:	4798      	blx	r3
    89d6:	4603      	mov	r3, r0
    89d8:	2b00      	cmp	r3, #0
    89da:	d107      	bne.n	89ec <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    89dc:	683b      	ldr	r3, [r7, #0]
    89de:	b29b      	uxth	r3, r3
    89e0:	461a      	mov	r2, r3
    89e2:	2100      	movs	r1, #0
    89e4:	68f8      	ldr	r0, [r7, #12]
    89e6:	4b0b      	ldr	r3, [pc, #44]	; (8a14 <_tc_timer_set_period+0x6c>)
    89e8:	4798      	blx	r3
}
    89ea:	e00b      	b.n	8a04 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    89ec:	68f8      	ldr	r0, [r7, #12]
    89ee:	4b07      	ldr	r3, [pc, #28]	; (8a0c <_tc_timer_set_period+0x64>)
    89f0:	4798      	blx	r3
    89f2:	4603      	mov	r3, r0
    89f4:	2b01      	cmp	r3, #1
    89f6:	d105      	bne.n	8a04 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    89f8:	683b      	ldr	r3, [r7, #0]
    89fa:	b2db      	uxtb	r3, r3
    89fc:	4619      	mov	r1, r3
    89fe:	68f8      	ldr	r0, [r7, #12]
    8a00:	4b05      	ldr	r3, [pc, #20]	; (8a18 <_tc_timer_set_period+0x70>)
    8a02:	4798      	blx	r3
}
    8a04:	bf00      	nop
    8a06:	3710      	adds	r7, #16
    8a08:	46bd      	mov	sp, r7
    8a0a:	bd80      	pop	{r7, pc}
    8a0c:	000081f9 	.word	0x000081f9
    8a10:	000083b1 	.word	0x000083b1
    8a14:	0000834d 	.word	0x0000834d
    8a18:	000082d1 	.word	0x000082d1

00008a1c <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8a1c:	b580      	push	{r7, lr}
    8a1e:	b084      	sub	sp, #16
    8a20:	af00      	add	r7, sp, #0
    8a22:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8a24:	687b      	ldr	r3, [r7, #4]
    8a26:	68db      	ldr	r3, [r3, #12]
    8a28:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8a2a:	68f8      	ldr	r0, [r7, #12]
    8a2c:	4b13      	ldr	r3, [pc, #76]	; (8a7c <_tc_timer_get_period+0x60>)
    8a2e:	4798      	blx	r3
    8a30:	4603      	mov	r3, r0
    8a32:	2b02      	cmp	r3, #2
    8a34:	d105      	bne.n	8a42 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8a36:	2100      	movs	r1, #0
    8a38:	68f8      	ldr	r0, [r7, #12]
    8a3a:	4b11      	ldr	r3, [pc, #68]	; (8a80 <_tc_timer_get_period+0x64>)
    8a3c:	4798      	blx	r3
    8a3e:	4603      	mov	r3, r0
    8a40:	e017      	b.n	8a72 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8a42:	68f8      	ldr	r0, [r7, #12]
    8a44:	4b0d      	ldr	r3, [pc, #52]	; (8a7c <_tc_timer_get_period+0x60>)
    8a46:	4798      	blx	r3
    8a48:	4603      	mov	r3, r0
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	d105      	bne.n	8a5a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8a4e:	2100      	movs	r1, #0
    8a50:	68f8      	ldr	r0, [r7, #12]
    8a52:	4b0c      	ldr	r3, [pc, #48]	; (8a84 <_tc_timer_get_period+0x68>)
    8a54:	4798      	blx	r3
    8a56:	4603      	mov	r3, r0
    8a58:	e00b      	b.n	8a72 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8a5a:	68f8      	ldr	r0, [r7, #12]
    8a5c:	4b07      	ldr	r3, [pc, #28]	; (8a7c <_tc_timer_get_period+0x60>)
    8a5e:	4798      	blx	r3
    8a60:	4603      	mov	r3, r0
    8a62:	2b01      	cmp	r3, #1
    8a64:	d104      	bne.n	8a70 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8a66:	68f8      	ldr	r0, [r7, #12]
    8a68:	4b07      	ldr	r3, [pc, #28]	; (8a88 <_tc_timer_get_period+0x6c>)
    8a6a:	4798      	blx	r3
    8a6c:	4603      	mov	r3, r0
    8a6e:	e000      	b.n	8a72 <_tc_timer_get_period+0x56>
	}

	return 0;
    8a70:	2300      	movs	r3, #0
}
    8a72:	4618      	mov	r0, r3
    8a74:	3710      	adds	r7, #16
    8a76:	46bd      	mov	sp, r7
    8a78:	bd80      	pop	{r7, pc}
    8a7a:	bf00      	nop
    8a7c:	000081f9 	.word	0x000081f9
    8a80:	000083e1 	.word	0x000083e1
    8a84:	00008381 	.word	0x00008381
    8a88:	000082f9 	.word	0x000082f9

00008a8c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8a8c:	b580      	push	{r7, lr}
    8a8e:	b082      	sub	sp, #8
    8a90:	af00      	add	r7, sp, #0
    8a92:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8a94:	687b      	ldr	r3, [r7, #4]
    8a96:	68db      	ldr	r3, [r3, #12]
    8a98:	4618      	mov	r0, r3
    8a9a:	4b03      	ldr	r3, [pc, #12]	; (8aa8 <_tc_timer_is_started+0x1c>)
    8a9c:	4798      	blx	r3
    8a9e:	4603      	mov	r3, r0
}
    8aa0:	4618      	mov	r0, r3
    8aa2:	3708      	adds	r7, #8
    8aa4:	46bd      	mov	sp, r7
    8aa6:	bd80      	pop	{r7, pc}
    8aa8:	00008199 	.word	0x00008199

00008aac <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    8aac:	b580      	push	{r7, lr}
    8aae:	b082      	sub	sp, #8
    8ab0:	af00      	add	r7, sp, #0
    8ab2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8ab4:	687b      	ldr	r3, [r7, #4]
    8ab6:	691b      	ldr	r3, [r3, #16]
    8ab8:	4618      	mov	r0, r3
    8aba:	4b03      	ldr	r3, [pc, #12]	; (8ac8 <_pwm_is_enabled+0x1c>)
    8abc:	4798      	blx	r3
    8abe:	4603      	mov	r3, r0
}
    8ac0:	4618      	mov	r0, r3
    8ac2:	3708      	adds	r7, #8
    8ac4:	46bd      	mov	sp, r7
    8ac6:	bd80      	pop	{r7, pc}
    8ac8:	00008199 	.word	0x00008199

00008acc <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8acc:	b480      	push	{r7}
    8ace:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8ad0:	4b02      	ldr	r3, [pc, #8]	; (8adc <_tc_get_timer+0x10>)
}
    8ad2:	4618      	mov	r0, r3
    8ad4:	46bd      	mov	sp, r7
    8ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ada:	4770      	bx	lr
    8adc:	20000158 	.word	0x20000158

00008ae0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8ae0:	b480      	push	{r7}
    8ae2:	af00      	add	r7, sp, #0
	return NULL;
    8ae4:	2300      	movs	r3, #0
}
    8ae6:	4618      	mov	r0, r3
    8ae8:	46bd      	mov	sp, r7
    8aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aee:	4770      	bx	lr

00008af0 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8af0:	b580      	push	{r7, lr}
    8af2:	b084      	sub	sp, #16
    8af4:	af00      	add	r7, sp, #0
    8af6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8af8:	687b      	ldr	r3, [r7, #4]
    8afa:	68db      	ldr	r3, [r3, #12]
    8afc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8afe:	68f8      	ldr	r0, [r7, #12]
    8b00:	4b0e      	ldr	r3, [pc, #56]	; (8b3c <_tc_timer_set_irq+0x4c>)
    8b02:	4798      	blx	r3
    8b04:	4603      	mov	r3, r0
    8b06:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8b08:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8b0c:	490c      	ldr	r1, [pc, #48]	; (8b40 <_tc_timer_set_irq+0x50>)
    8b0e:	2001      	movs	r0, #1
    8b10:	4b0c      	ldr	r3, [pc, #48]	; (8b44 <_tc_timer_set_irq+0x54>)
    8b12:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8b14:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8b18:	490b      	ldr	r1, [pc, #44]	; (8b48 <_tc_timer_set_irq+0x58>)
    8b1a:	4613      	mov	r3, r2
    8b1c:	009b      	lsls	r3, r3, #2
    8b1e:	4413      	add	r3, r2
    8b20:	009b      	lsls	r3, r3, #2
    8b22:	440b      	add	r3, r1
    8b24:	3302      	adds	r3, #2
    8b26:	f9b3 3000 	ldrsh.w	r3, [r3]
    8b2a:	b2db      	uxtb	r3, r3
    8b2c:	4618      	mov	r0, r3
    8b2e:	4b07      	ldr	r3, [pc, #28]	; (8b4c <_tc_timer_set_irq+0x5c>)
    8b30:	4798      	blx	r3
}
    8b32:	bf00      	nop
    8b34:	3710      	adds	r7, #16
    8b36:	46bd      	mov	sp, r7
    8b38:	bd80      	pop	{r7, pc}
    8b3a:	bf00      	nop
    8b3c:	00008c9d 	.word	0x00008c9d
    8b40:	000100f8 	.word	0x000100f8
    8b44:	00003ab1 	.word	0x00003ab1
    8b48:	200000e0 	.word	0x200000e0
    8b4c:	000042fd 	.word	0x000042fd

00008b50 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8b50:	b580      	push	{r7, lr}
    8b52:	b084      	sub	sp, #16
    8b54:	af00      	add	r7, sp, #0
    8b56:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8b58:	687b      	ldr	r3, [r7, #4]
    8b5a:	68db      	ldr	r3, [r3, #12]
    8b5c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8b5e:	68f8      	ldr	r0, [r7, #12]
    8b60:	4b07      	ldr	r3, [pc, #28]	; (8b80 <tc_interrupt_handler+0x30>)
    8b62:	4798      	blx	r3
    8b64:	4603      	mov	r3, r0
    8b66:	2b00      	cmp	r3, #0
    8b68:	d006      	beq.n	8b78 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8b6a:	68f8      	ldr	r0, [r7, #12]
    8b6c:	4b05      	ldr	r3, [pc, #20]	; (8b84 <tc_interrupt_handler+0x34>)
    8b6e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8b70:	687b      	ldr	r3, [r7, #4]
    8b72:	681b      	ldr	r3, [r3, #0]
    8b74:	6878      	ldr	r0, [r7, #4]
    8b76:	4798      	blx	r3
	}
}
    8b78:	bf00      	nop
    8b7a:	3710      	adds	r7, #16
    8b7c:	46bd      	mov	sp, r7
    8b7e:	bd80      	pop	{r7, pc}
    8b80:	000080a9 	.word	0x000080a9
    8b84:	000080d1 	.word	0x000080d1

00008b88 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8b88:	b580      	push	{r7, lr}
    8b8a:	b084      	sub	sp, #16
    8b8c:	af00      	add	r7, sp, #0
    8b8e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	691b      	ldr	r3, [r3, #16]
    8b94:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8b96:	68f8      	ldr	r0, [r7, #12]
    8b98:	4b12      	ldr	r3, [pc, #72]	; (8be4 <tc_pwm_interrupt_handler+0x5c>)
    8b9a:	4798      	blx	r3
    8b9c:	4603      	mov	r3, r0
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	d00a      	beq.n	8bb8 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8ba2:	68f8      	ldr	r0, [r7, #12]
    8ba4:	4b10      	ldr	r3, [pc, #64]	; (8be8 <tc_pwm_interrupt_handler+0x60>)
    8ba6:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8ba8:	687b      	ldr	r3, [r7, #4]
    8baa:	681b      	ldr	r3, [r3, #0]
    8bac:	2b00      	cmp	r3, #0
    8bae:	d003      	beq.n	8bb8 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8bb0:	687b      	ldr	r3, [r7, #4]
    8bb2:	681b      	ldr	r3, [r3, #0]
    8bb4:	6878      	ldr	r0, [r7, #4]
    8bb6:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8bb8:	68f8      	ldr	r0, [r7, #12]
    8bba:	4b0c      	ldr	r3, [pc, #48]	; (8bec <tc_pwm_interrupt_handler+0x64>)
    8bbc:	4798      	blx	r3
    8bbe:	4603      	mov	r3, r0
    8bc0:	2b00      	cmp	r3, #0
    8bc2:	d00a      	beq.n	8bda <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8bc4:	68f8      	ldr	r0, [r7, #12]
    8bc6:	4b0a      	ldr	r3, [pc, #40]	; (8bf0 <tc_pwm_interrupt_handler+0x68>)
    8bc8:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	685b      	ldr	r3, [r3, #4]
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d003      	beq.n	8bda <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8bd2:	687b      	ldr	r3, [r7, #4]
    8bd4:	685b      	ldr	r3, [r3, #4]
    8bd6:	6878      	ldr	r0, [r7, #4]
    8bd8:	4798      	blx	r3
		}
	}
}
    8bda:	bf00      	nop
    8bdc:	3710      	adds	r7, #16
    8bde:	46bd      	mov	sp, r7
    8be0:	bd80      	pop	{r7, pc}
    8be2:	bf00      	nop
    8be4:	000080a9 	.word	0x000080a9
    8be8:	000080d1 	.word	0x000080d1
    8bec:	0000811f 	.word	0x0000811f
    8bf0:	000080eb 	.word	0x000080eb

00008bf4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8bf4:	b580      	push	{r7, lr}
    8bf6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8bf8:	4b03      	ldr	r3, [pc, #12]	; (8c08 <TC0_Handler+0x14>)
    8bfa:	681b      	ldr	r3, [r3, #0]
    8bfc:	4618      	mov	r0, r3
    8bfe:	4b03      	ldr	r3, [pc, #12]	; (8c0c <TC0_Handler+0x18>)
    8c00:	4798      	blx	r3
}
    8c02:	bf00      	nop
    8c04:	bd80      	pop	{r7, pc}
    8c06:	bf00      	nop
    8c08:	2000083c 	.word	0x2000083c
    8c0c:	00008b51 	.word	0x00008b51

00008c10 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8c10:	b580      	push	{r7, lr}
    8c12:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8c14:	4b03      	ldr	r3, [pc, #12]	; (8c24 <TC2_Handler+0x14>)
    8c16:	681b      	ldr	r3, [r3, #0]
    8c18:	4618      	mov	r0, r3
    8c1a:	4b03      	ldr	r3, [pc, #12]	; (8c28 <TC2_Handler+0x18>)
    8c1c:	4798      	blx	r3
}
    8c1e:	bf00      	nop
    8c20:	bd80      	pop	{r7, pc}
    8c22:	bf00      	nop
    8c24:	20000840 	.word	0x20000840
    8c28:	00008b51 	.word	0x00008b51

00008c2c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8c2c:	b580      	push	{r7, lr}
    8c2e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8c30:	4b03      	ldr	r3, [pc, #12]	; (8c40 <TC4_Handler+0x14>)
    8c32:	681b      	ldr	r3, [r3, #0]
    8c34:	4618      	mov	r0, r3
    8c36:	4b03      	ldr	r3, [pc, #12]	; (8c44 <TC4_Handler+0x18>)
    8c38:	4798      	blx	r3
}
    8c3a:	bf00      	nop
    8c3c:	bd80      	pop	{r7, pc}
    8c3e:	bf00      	nop
    8c40:	20000844 	.word	0x20000844
    8c44:	00008b51 	.word	0x00008b51

00008c48 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8c48:	b580      	push	{r7, lr}
    8c4a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8c4c:	4b03      	ldr	r3, [pc, #12]	; (8c5c <TC5_Handler+0x14>)
    8c4e:	681b      	ldr	r3, [r3, #0]
    8c50:	4618      	mov	r0, r3
    8c52:	4b03      	ldr	r3, [pc, #12]	; (8c60 <TC5_Handler+0x18>)
    8c54:	4798      	blx	r3
}
    8c56:	bf00      	nop
    8c58:	bd80      	pop	{r7, pc}
    8c5a:	bf00      	nop
    8c5c:	20000848 	.word	0x20000848
    8c60:	00008b51 	.word	0x00008b51

00008c64 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8c64:	b580      	push	{r7, lr}
    8c66:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8c68:	4b03      	ldr	r3, [pc, #12]	; (8c78 <TC6_Handler+0x14>)
    8c6a:	681b      	ldr	r3, [r3, #0]
    8c6c:	4618      	mov	r0, r3
    8c6e:	4b03      	ldr	r3, [pc, #12]	; (8c7c <TC6_Handler+0x18>)
    8c70:	4798      	blx	r3
}
    8c72:	bf00      	nop
    8c74:	bd80      	pop	{r7, pc}
    8c76:	bf00      	nop
    8c78:	2000084c 	.word	0x2000084c
    8c7c:	00008b51 	.word	0x00008b51

00008c80 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8c80:	b580      	push	{r7, lr}
    8c82:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8c84:	4b03      	ldr	r3, [pc, #12]	; (8c94 <TC7_Handler+0x14>)
    8c86:	681b      	ldr	r3, [r3, #0]
    8c88:	4618      	mov	r0, r3
    8c8a:	4b03      	ldr	r3, [pc, #12]	; (8c98 <TC7_Handler+0x18>)
    8c8c:	4798      	blx	r3
}
    8c8e:	bf00      	nop
    8c90:	bd80      	pop	{r7, pc}
    8c92:	bf00      	nop
    8c94:	20000850 	.word	0x20000850
    8c98:	00008b89 	.word	0x00008b89

00008c9c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8c9c:	b580      	push	{r7, lr}
    8c9e:	b084      	sub	sp, #16
    8ca0:	af00      	add	r7, sp, #0
    8ca2:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8ca4:	6878      	ldr	r0, [r7, #4]
    8ca6:	4b13      	ldr	r3, [pc, #76]	; (8cf4 <get_tc_index+0x58>)
    8ca8:	4798      	blx	r3
    8caa:	4603      	mov	r3, r0
    8cac:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8cae:	2300      	movs	r3, #0
    8cb0:	73fb      	strb	r3, [r7, #15]
    8cb2:	e010      	b.n	8cd6 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8cb4:	7bfa      	ldrb	r2, [r7, #15]
    8cb6:	4910      	ldr	r1, [pc, #64]	; (8cf8 <get_tc_index+0x5c>)
    8cb8:	4613      	mov	r3, r2
    8cba:	009b      	lsls	r3, r3, #2
    8cbc:	4413      	add	r3, r2
    8cbe:	009b      	lsls	r3, r3, #2
    8cc0:	440b      	add	r3, r1
    8cc2:	781b      	ldrb	r3, [r3, #0]
    8cc4:	7bba      	ldrb	r2, [r7, #14]
    8cc6:	429a      	cmp	r2, r3
    8cc8:	d102      	bne.n	8cd0 <get_tc_index+0x34>
			return i;
    8cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8cce:	e00d      	b.n	8cec <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8cd0:	7bfb      	ldrb	r3, [r7, #15]
    8cd2:	3301      	adds	r3, #1
    8cd4:	73fb      	strb	r3, [r7, #15]
    8cd6:	7bfb      	ldrb	r3, [r7, #15]
    8cd8:	2b05      	cmp	r3, #5
    8cda:	d9eb      	bls.n	8cb4 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8cdc:	f240 221d 	movw	r2, #541	; 0x21d
    8ce0:	4906      	ldr	r1, [pc, #24]	; (8cfc <get_tc_index+0x60>)
    8ce2:	2000      	movs	r0, #0
    8ce4:	4b06      	ldr	r3, [pc, #24]	; (8d00 <get_tc_index+0x64>)
    8ce6:	4798      	blx	r3
	return -1;
    8ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
    8cec:	4618      	mov	r0, r3
    8cee:	3710      	adds	r7, #16
    8cf0:	46bd      	mov	sp, r7
    8cf2:	bd80      	pop	{r7, pc}
    8cf4:	00008da1 	.word	0x00008da1
    8cf8:	200000e0 	.word	0x200000e0
    8cfc:	000100f8 	.word	0x000100f8
    8d00:	00003ab1 	.word	0x00003ab1

00008d04 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8d04:	b480      	push	{r7}
    8d06:	b083      	sub	sp, #12
    8d08:	af00      	add	r7, sp, #0
    8d0a:	6078      	str	r0, [r7, #4]
    8d0c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8d0e:	687b      	ldr	r3, [r7, #4]
    8d10:	4a17      	ldr	r2, [pc, #92]	; (8d70 <_tc_init_irq_param+0x6c>)
    8d12:	4293      	cmp	r3, r2
    8d14:	d102      	bne.n	8d1c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8d16:	4a17      	ldr	r2, [pc, #92]	; (8d74 <_tc_init_irq_param+0x70>)
    8d18:	683b      	ldr	r3, [r7, #0]
    8d1a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8d1c:	687b      	ldr	r3, [r7, #4]
    8d1e:	4a16      	ldr	r2, [pc, #88]	; (8d78 <_tc_init_irq_param+0x74>)
    8d20:	4293      	cmp	r3, r2
    8d22:	d102      	bne.n	8d2a <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8d24:	4a15      	ldr	r2, [pc, #84]	; (8d7c <_tc_init_irq_param+0x78>)
    8d26:	683b      	ldr	r3, [r7, #0]
    8d28:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8d2a:	687b      	ldr	r3, [r7, #4]
    8d2c:	4a14      	ldr	r2, [pc, #80]	; (8d80 <_tc_init_irq_param+0x7c>)
    8d2e:	4293      	cmp	r3, r2
    8d30:	d102      	bne.n	8d38 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8d32:	4a14      	ldr	r2, [pc, #80]	; (8d84 <_tc_init_irq_param+0x80>)
    8d34:	683b      	ldr	r3, [r7, #0]
    8d36:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8d38:	687b      	ldr	r3, [r7, #4]
    8d3a:	4a13      	ldr	r2, [pc, #76]	; (8d88 <_tc_init_irq_param+0x84>)
    8d3c:	4293      	cmp	r3, r2
    8d3e:	d102      	bne.n	8d46 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8d40:	4a12      	ldr	r2, [pc, #72]	; (8d8c <_tc_init_irq_param+0x88>)
    8d42:	683b      	ldr	r3, [r7, #0]
    8d44:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8d46:	687b      	ldr	r3, [r7, #4]
    8d48:	4a11      	ldr	r2, [pc, #68]	; (8d90 <_tc_init_irq_param+0x8c>)
    8d4a:	4293      	cmp	r3, r2
    8d4c:	d102      	bne.n	8d54 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8d4e:	4a11      	ldr	r2, [pc, #68]	; (8d94 <_tc_init_irq_param+0x90>)
    8d50:	683b      	ldr	r3, [r7, #0]
    8d52:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8d54:	687b      	ldr	r3, [r7, #4]
    8d56:	4a10      	ldr	r2, [pc, #64]	; (8d98 <_tc_init_irq_param+0x94>)
    8d58:	4293      	cmp	r3, r2
    8d5a:	d102      	bne.n	8d62 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8d5c:	4a0f      	ldr	r2, [pc, #60]	; (8d9c <_tc_init_irq_param+0x98>)
    8d5e:	683b      	ldr	r3, [r7, #0]
    8d60:	6013      	str	r3, [r2, #0]
	}
}
    8d62:	bf00      	nop
    8d64:	370c      	adds	r7, #12
    8d66:	46bd      	mov	sp, r7
    8d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d6c:	4770      	bx	lr
    8d6e:	bf00      	nop
    8d70:	40003800 	.word	0x40003800
    8d74:	2000083c 	.word	0x2000083c
    8d78:	4101a000 	.word	0x4101a000
    8d7c:	20000840 	.word	0x20000840
    8d80:	42001400 	.word	0x42001400
    8d84:	20000844 	.word	0x20000844
    8d88:	42001800 	.word	0x42001800
    8d8c:	20000848 	.word	0x20000848
    8d90:	43001400 	.word	0x43001400
    8d94:	2000084c 	.word	0x2000084c
    8d98:	43001800 	.word	0x43001800
    8d9c:	20000850 	.word	0x20000850

00008da0 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8da0:	b4b0      	push	{r4, r5, r7}
    8da2:	b08d      	sub	sp, #52	; 0x34
    8da4:	af00      	add	r7, sp, #0
    8da6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8da8:	4b13      	ldr	r3, [pc, #76]	; (8df8 <_get_hardware_offset+0x58>)
    8daa:	f107 040c 	add.w	r4, r7, #12
    8dae:	461d      	mov	r5, r3
    8db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8db4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8dbc:	2300      	movs	r3, #0
    8dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    8dc0:	e010      	b.n	8de4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8dc4:	009b      	lsls	r3, r3, #2
    8dc6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8dca:	4413      	add	r3, r2
    8dcc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8dd0:	461a      	mov	r2, r3
    8dd2:	687b      	ldr	r3, [r7, #4]
    8dd4:	429a      	cmp	r2, r3
    8dd6:	d102      	bne.n	8dde <_get_hardware_offset+0x3e>
			return i;
    8dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8dda:	b2db      	uxtb	r3, r3
    8ddc:	e006      	b.n	8dec <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8de0:	3301      	adds	r3, #1
    8de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    8de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8de6:	2b07      	cmp	r3, #7
    8de8:	d9eb      	bls.n	8dc2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8dea:	2300      	movs	r3, #0
}
    8dec:	4618      	mov	r0, r3
    8dee:	3734      	adds	r7, #52	; 0x34
    8df0:	46bd      	mov	sp, r7
    8df2:	bcb0      	pop	{r4, r5, r7}
    8df4:	4770      	bx	lr
    8df6:	bf00      	nop
    8df8:	0001010c 	.word	0x0001010c

00008dfc <__NVIC_EnableIRQ>:
{
    8dfc:	b480      	push	{r7}
    8dfe:	b083      	sub	sp, #12
    8e00:	af00      	add	r7, sp, #0
    8e02:	4603      	mov	r3, r0
    8e04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e0a:	2b00      	cmp	r3, #0
    8e0c:	db0b      	blt.n	8e26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e0e:	4909      	ldr	r1, [pc, #36]	; (8e34 <__NVIC_EnableIRQ+0x38>)
    8e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e14:	095b      	lsrs	r3, r3, #5
    8e16:	88fa      	ldrh	r2, [r7, #6]
    8e18:	f002 021f 	and.w	r2, r2, #31
    8e1c:	2001      	movs	r0, #1
    8e1e:	fa00 f202 	lsl.w	r2, r0, r2
    8e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e26:	bf00      	nop
    8e28:	370c      	adds	r7, #12
    8e2a:	46bd      	mov	sp, r7
    8e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e30:	4770      	bx	lr
    8e32:	bf00      	nop
    8e34:	e000e100 	.word	0xe000e100

00008e38 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8e38:	b480      	push	{r7}
    8e3a:	b087      	sub	sp, #28
    8e3c:	af00      	add	r7, sp, #0
    8e3e:	60f8      	str	r0, [r7, #12]
    8e40:	460b      	mov	r3, r1
    8e42:	607a      	str	r2, [r7, #4]
    8e44:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8e46:	7afa      	ldrb	r2, [r7, #11]
    8e48:	68f9      	ldr	r1, [r7, #12]
    8e4a:	4613      	mov	r3, r2
    8e4c:	009b      	lsls	r3, r3, #2
    8e4e:	4413      	add	r3, r2
    8e50:	009b      	lsls	r3, r3, #2
    8e52:	440b      	add	r3, r1
    8e54:	3340      	adds	r3, #64	; 0x40
    8e56:	681b      	ldr	r3, [r3, #0]
    8e58:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8e5a:	697a      	ldr	r2, [r7, #20]
    8e5c:	687b      	ldr	r3, [r7, #4]
    8e5e:	4013      	ands	r3, r2
    8e60:	617b      	str	r3, [r7, #20]
	return tmp;
    8e62:	697b      	ldr	r3, [r7, #20]
}
    8e64:	4618      	mov	r0, r3
    8e66:	371c      	adds	r7, #28
    8e68:	46bd      	mov	sp, r7
    8e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e6e:	4770      	bx	lr

00008e70 <hri_oscctrl_get_STATUS_reg>:
{
    8e70:	b480      	push	{r7}
    8e72:	b085      	sub	sp, #20
    8e74:	af00      	add	r7, sp, #0
    8e76:	6078      	str	r0, [r7, #4]
    8e78:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	691b      	ldr	r3, [r3, #16]
    8e7e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8e80:	68fa      	ldr	r2, [r7, #12]
    8e82:	683b      	ldr	r3, [r7, #0]
    8e84:	4013      	ands	r3, r2
    8e86:	60fb      	str	r3, [r7, #12]
	return tmp;
    8e88:	68fb      	ldr	r3, [r7, #12]
}
    8e8a:	4618      	mov	r0, r3
    8e8c:	3714      	adds	r7, #20
    8e8e:	46bd      	mov	sp, r7
    8e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e94:	4770      	bx	lr

00008e96 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8e96:	b480      	push	{r7}
    8e98:	b085      	sub	sp, #20
    8e9a:	af00      	add	r7, sp, #0
    8e9c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8e9e:	687b      	ldr	r3, [r7, #4]
    8ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
    8ea4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8ea6:	7bfb      	ldrb	r3, [r7, #15]
    8ea8:	f003 0301 	and.w	r3, r3, #1
    8eac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8eae:	7bfb      	ldrb	r3, [r7, #15]
    8eb0:	2b00      	cmp	r3, #0
    8eb2:	bf14      	ite	ne
    8eb4:	2301      	movne	r3, #1
    8eb6:	2300      	moveq	r3, #0
    8eb8:	b2db      	uxtb	r3, r3
}
    8eba:	4618      	mov	r0, r3
    8ebc:	3714      	adds	r7, #20
    8ebe:	46bd      	mov	sp, r7
    8ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ec4:	4770      	bx	lr

00008ec6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8ec6:	b480      	push	{r7}
    8ec8:	b083      	sub	sp, #12
    8eca:	af00      	add	r7, sp, #0
    8ecc:	6078      	str	r0, [r7, #4]
    8ece:	460b      	mov	r3, r1
    8ed0:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8ed2:	bf00      	nop
    8ed4:	687b      	ldr	r3, [r7, #4]
    8ed6:	789b      	ldrb	r3, [r3, #2]
    8ed8:	b2da      	uxtb	r2, r3
    8eda:	78fb      	ldrb	r3, [r7, #3]
    8edc:	4013      	ands	r3, r2
    8ede:	b2db      	uxtb	r3, r3
    8ee0:	2b00      	cmp	r3, #0
    8ee2:	d1f7      	bne.n	8ed4 <hri_usb_wait_for_sync+0xe>
	};
}
    8ee4:	bf00      	nop
    8ee6:	370c      	adds	r7, #12
    8ee8:	46bd      	mov	sp, r7
    8eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eee:	4770      	bx	lr

00008ef0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8ef0:	b480      	push	{r7}
    8ef2:	b083      	sub	sp, #12
    8ef4:	af00      	add	r7, sp, #0
    8ef6:	6078      	str	r0, [r7, #4]
    8ef8:	460b      	mov	r3, r1
    8efa:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8efc:	687b      	ldr	r3, [r7, #4]
    8efe:	789b      	ldrb	r3, [r3, #2]
    8f00:	b2da      	uxtb	r2, r3
    8f02:	78fb      	ldrb	r3, [r7, #3]
    8f04:	4013      	ands	r3, r2
    8f06:	b2db      	uxtb	r3, r3
    8f08:	2b00      	cmp	r3, #0
    8f0a:	bf14      	ite	ne
    8f0c:	2301      	movne	r3, #1
    8f0e:	2300      	moveq	r3, #0
    8f10:	b2db      	uxtb	r3, r3
}
    8f12:	4618      	mov	r0, r3
    8f14:	370c      	adds	r7, #12
    8f16:	46bd      	mov	sp, r7
    8f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f1c:	4770      	bx	lr

00008f1e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8f1e:	b480      	push	{r7}
    8f20:	b085      	sub	sp, #20
    8f22:	af00      	add	r7, sp, #0
    8f24:	6078      	str	r0, [r7, #4]
    8f26:	460b      	mov	r3, r1
    8f28:	70fb      	strb	r3, [r7, #3]
    8f2a:	4613      	mov	r3, r2
    8f2c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8f2e:	78fb      	ldrb	r3, [r7, #3]
    8f30:	687a      	ldr	r2, [r7, #4]
    8f32:	3308      	adds	r3, #8
    8f34:	015b      	lsls	r3, r3, #5
    8f36:	4413      	add	r3, r2
    8f38:	3307      	adds	r3, #7
    8f3a:	781b      	ldrb	r3, [r3, #0]
    8f3c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8f3e:	7bfa      	ldrb	r2, [r7, #15]
    8f40:	78bb      	ldrb	r3, [r7, #2]
    8f42:	4013      	ands	r3, r2
    8f44:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8f46:	7bfb      	ldrb	r3, [r7, #15]
}
    8f48:	4618      	mov	r0, r3
    8f4a:	3714      	adds	r7, #20
    8f4c:	46bd      	mov	sp, r7
    8f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f52:	4770      	bx	lr

00008f54 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8f54:	b480      	push	{r7}
    8f56:	b083      	sub	sp, #12
    8f58:	af00      	add	r7, sp, #0
    8f5a:	6078      	str	r0, [r7, #4]
    8f5c:	460b      	mov	r3, r1
    8f5e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8f60:	78fb      	ldrb	r3, [r7, #3]
    8f62:	687a      	ldr	r2, [r7, #4]
    8f64:	3308      	adds	r3, #8
    8f66:	015b      	lsls	r3, r3, #5
    8f68:	4413      	add	r3, r2
    8f6a:	3307      	adds	r3, #7
    8f6c:	781b      	ldrb	r3, [r3, #0]
    8f6e:	b2db      	uxtb	r3, r3
}
    8f70:	4618      	mov	r0, r3
    8f72:	370c      	adds	r7, #12
    8f74:	46bd      	mov	sp, r7
    8f76:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f7a:	4770      	bx	lr

00008f7c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8f7c:	b480      	push	{r7}
    8f7e:	b083      	sub	sp, #12
    8f80:	af00      	add	r7, sp, #0
    8f82:	6078      	str	r0, [r7, #4]
    8f84:	460b      	mov	r3, r1
    8f86:	70fb      	strb	r3, [r7, #3]
    8f88:	4613      	mov	r3, r2
    8f8a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8f8c:	78fb      	ldrb	r3, [r7, #3]
    8f8e:	687a      	ldr	r2, [r7, #4]
    8f90:	3308      	adds	r3, #8
    8f92:	015b      	lsls	r3, r3, #5
    8f94:	4413      	add	r3, r2
    8f96:	3307      	adds	r3, #7
    8f98:	78ba      	ldrb	r2, [r7, #2]
    8f9a:	701a      	strb	r2, [r3, #0]
}
    8f9c:	bf00      	nop
    8f9e:	370c      	adds	r7, #12
    8fa0:	46bd      	mov	sp, r7
    8fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fa6:	4770      	bx	lr

00008fa8 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8fa8:	b480      	push	{r7}
    8faa:	b083      	sub	sp, #12
    8fac:	af00      	add	r7, sp, #0
    8fae:	6078      	str	r0, [r7, #4]
    8fb0:	460b      	mov	r3, r1
    8fb2:	70fb      	strb	r3, [r7, #3]
    8fb4:	4613      	mov	r3, r2
    8fb6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8fb8:	78fb      	ldrb	r3, [r7, #3]
    8fba:	687a      	ldr	r2, [r7, #4]
    8fbc:	3308      	adds	r3, #8
    8fbe:	015b      	lsls	r3, r3, #5
    8fc0:	4413      	add	r3, r2
    8fc2:	3305      	adds	r3, #5
    8fc4:	78ba      	ldrb	r2, [r7, #2]
    8fc6:	701a      	strb	r2, [r3, #0]
}
    8fc8:	bf00      	nop
    8fca:	370c      	adds	r7, #12
    8fcc:	46bd      	mov	sp, r7
    8fce:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fd2:	4770      	bx	lr

00008fd4 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8fd4:	b480      	push	{r7}
    8fd6:	b083      	sub	sp, #12
    8fd8:	af00      	add	r7, sp, #0
    8fda:	6078      	str	r0, [r7, #4]
    8fdc:	460b      	mov	r3, r1
    8fde:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8fe0:	78fb      	ldrb	r3, [r7, #3]
    8fe2:	687a      	ldr	r2, [r7, #4]
    8fe4:	3308      	adds	r3, #8
    8fe6:	015b      	lsls	r3, r3, #5
    8fe8:	4413      	add	r3, r2
    8fea:	3306      	adds	r3, #6
    8fec:	781b      	ldrb	r3, [r3, #0]
    8fee:	b2db      	uxtb	r3, r3
}
    8ff0:	4618      	mov	r0, r3
    8ff2:	370c      	adds	r7, #12
    8ff4:	46bd      	mov	sp, r7
    8ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ffa:	4770      	bx	lr

00008ffc <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8ffc:	b480      	push	{r7}
    8ffe:	b083      	sub	sp, #12
    9000:	af00      	add	r7, sp, #0
    9002:	6078      	str	r0, [r7, #4]
    9004:	460b      	mov	r3, r1
    9006:	70fb      	strb	r3, [r7, #3]
    9008:	4613      	mov	r3, r2
    900a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    900c:	78fb      	ldrb	r3, [r7, #3]
    900e:	687a      	ldr	r2, [r7, #4]
    9010:	3308      	adds	r3, #8
    9012:	015b      	lsls	r3, r3, #5
    9014:	4413      	add	r3, r2
    9016:	3304      	adds	r3, #4
    9018:	78ba      	ldrb	r2, [r7, #2]
    901a:	701a      	strb	r2, [r3, #0]
}
    901c:	bf00      	nop
    901e:	370c      	adds	r7, #12
    9020:	46bd      	mov	sp, r7
    9022:	f85d 7b04 	ldr.w	r7, [sp], #4
    9026:	4770      	bx	lr

00009028 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    9028:	b480      	push	{r7}
    902a:	b083      	sub	sp, #12
    902c:	af00      	add	r7, sp, #0
    902e:	6078      	str	r0, [r7, #4]
    9030:	460b      	mov	r3, r1
    9032:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    9034:	78fb      	ldrb	r3, [r7, #3]
    9036:	687a      	ldr	r2, [r7, #4]
    9038:	015b      	lsls	r3, r3, #5
    903a:	4413      	add	r3, r2
    903c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9040:	2210      	movs	r2, #16
    9042:	701a      	strb	r2, [r3, #0]
}
    9044:	bf00      	nop
    9046:	370c      	adds	r7, #12
    9048:	46bd      	mov	sp, r7
    904a:	f85d 7b04 	ldr.w	r7, [sp], #4
    904e:	4770      	bx	lr

00009050 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    9050:	b480      	push	{r7}
    9052:	b083      	sub	sp, #12
    9054:	af00      	add	r7, sp, #0
    9056:	6078      	str	r0, [r7, #4]
    9058:	460b      	mov	r3, r1
    905a:	70fb      	strb	r3, [r7, #3]
    905c:	4613      	mov	r3, r2
    905e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9060:	78fb      	ldrb	r3, [r7, #3]
    9062:	687a      	ldr	r2, [r7, #4]
    9064:	015b      	lsls	r3, r3, #5
    9066:	4413      	add	r3, r2
    9068:	f203 1309 	addw	r3, r3, #265	; 0x109
    906c:	78ba      	ldrb	r2, [r7, #2]
    906e:	701a      	strb	r2, [r3, #0]
}
    9070:	bf00      	nop
    9072:	370c      	adds	r7, #12
    9074:	46bd      	mov	sp, r7
    9076:	f85d 7b04 	ldr.w	r7, [sp], #4
    907a:	4770      	bx	lr

0000907c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    907c:	b480      	push	{r7}
    907e:	b083      	sub	sp, #12
    9080:	af00      	add	r7, sp, #0
    9082:	6078      	str	r0, [r7, #4]
    9084:	460b      	mov	r3, r1
    9086:	70fb      	strb	r3, [r7, #3]
    9088:	4613      	mov	r3, r2
    908a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    908c:	78fb      	ldrb	r3, [r7, #3]
    908e:	687a      	ldr	r2, [r7, #4]
    9090:	015b      	lsls	r3, r3, #5
    9092:	4413      	add	r3, r2
    9094:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9098:	78ba      	ldrb	r2, [r7, #2]
    909a:	701a      	strb	r2, [r3, #0]
}
    909c:	bf00      	nop
    909e:	370c      	adds	r7, #12
    90a0:	46bd      	mov	sp, r7
    90a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    90a6:	4770      	bx	lr

000090a8 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    90a8:	b480      	push	{r7}
    90aa:	b085      	sub	sp, #20
    90ac:	af00      	add	r7, sp, #0
    90ae:	6078      	str	r0, [r7, #4]
    90b0:	460b      	mov	r3, r1
    90b2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    90b4:	78fb      	ldrb	r3, [r7, #3]
    90b6:	687a      	ldr	r2, [r7, #4]
    90b8:	3308      	adds	r3, #8
    90ba:	015b      	lsls	r3, r3, #5
    90bc:	4413      	add	r3, r2
    90be:	781b      	ldrb	r3, [r3, #0]
    90c0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    90c2:	7bfb      	ldrb	r3, [r7, #15]
    90c4:	f003 0307 	and.w	r3, r3, #7
    90c8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    90ca:	7bfb      	ldrb	r3, [r7, #15]
}
    90cc:	4618      	mov	r0, r3
    90ce:	3714      	adds	r7, #20
    90d0:	46bd      	mov	sp, r7
    90d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    90d6:	4770      	bx	lr

000090d8 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    90d8:	b480      	push	{r7}
    90da:	b085      	sub	sp, #20
    90dc:	af00      	add	r7, sp, #0
    90de:	6078      	str	r0, [r7, #4]
    90e0:	460b      	mov	r3, r1
    90e2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    90e4:	78fb      	ldrb	r3, [r7, #3]
    90e6:	687a      	ldr	r2, [r7, #4]
    90e8:	3308      	adds	r3, #8
    90ea:	015b      	lsls	r3, r3, #5
    90ec:	4413      	add	r3, r2
    90ee:	781b      	ldrb	r3, [r3, #0]
    90f0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    90f2:	7bfb      	ldrb	r3, [r7, #15]
    90f4:	091b      	lsrs	r3, r3, #4
    90f6:	b2db      	uxtb	r3, r3
    90f8:	f003 0307 	and.w	r3, r3, #7
    90fc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    90fe:	7bfb      	ldrb	r3, [r7, #15]
}
    9100:	4618      	mov	r0, r3
    9102:	3714      	adds	r7, #20
    9104:	46bd      	mov	sp, r7
    9106:	f85d 7b04 	ldr.w	r7, [sp], #4
    910a:	4770      	bx	lr

0000910c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    910c:	b480      	push	{r7}
    910e:	b083      	sub	sp, #12
    9110:	af00      	add	r7, sp, #0
    9112:	6078      	str	r0, [r7, #4]
    9114:	460b      	mov	r3, r1
    9116:	70fb      	strb	r3, [r7, #3]
    9118:	4613      	mov	r3, r2
    911a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    911c:	78fb      	ldrb	r3, [r7, #3]
    911e:	687a      	ldr	r2, [r7, #4]
    9120:	3308      	adds	r3, #8
    9122:	015b      	lsls	r3, r3, #5
    9124:	4413      	add	r3, r2
    9126:	78ba      	ldrb	r2, [r7, #2]
    9128:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    912a:	bf00      	nop
    912c:	370c      	adds	r7, #12
    912e:	46bd      	mov	sp, r7
    9130:	f85d 7b04 	ldr.w	r7, [sp], #4
    9134:	4770      	bx	lr

00009136 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    9136:	b480      	push	{r7}
    9138:	b083      	sub	sp, #12
    913a:	af00      	add	r7, sp, #0
    913c:	6078      	str	r0, [r7, #4]
    913e:	460b      	mov	r3, r1
    9140:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9142:	78fb      	ldrb	r3, [r7, #3]
    9144:	687a      	ldr	r2, [r7, #4]
    9146:	3308      	adds	r3, #8
    9148:	015b      	lsls	r3, r3, #5
    914a:	4413      	add	r3, r2
    914c:	781b      	ldrb	r3, [r3, #0]
    914e:	b2db      	uxtb	r3, r3
}
    9150:	4618      	mov	r0, r3
    9152:	370c      	adds	r7, #12
    9154:	46bd      	mov	sp, r7
    9156:	f85d 7b04 	ldr.w	r7, [sp], #4
    915a:	4770      	bx	lr

0000915c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    915c:	b480      	push	{r7}
    915e:	b083      	sub	sp, #12
    9160:	af00      	add	r7, sp, #0
    9162:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    9164:	687b      	ldr	r3, [r7, #4]
    9166:	8b9b      	ldrh	r3, [r3, #28]
    9168:	b29b      	uxth	r3, r3
}
    916a:	4618      	mov	r0, r3
    916c:	370c      	adds	r7, #12
    916e:	46bd      	mov	sp, r7
    9170:	f85d 7b04 	ldr.w	r7, [sp], #4
    9174:	4770      	bx	lr

00009176 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    9176:	b480      	push	{r7}
    9178:	b083      	sub	sp, #12
    917a:	af00      	add	r7, sp, #0
    917c:	6078      	str	r0, [r7, #4]
    917e:	460b      	mov	r3, r1
    9180:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9182:	687b      	ldr	r3, [r7, #4]
    9184:	887a      	ldrh	r2, [r7, #2]
    9186:	839a      	strh	r2, [r3, #28]
}
    9188:	bf00      	nop
    918a:	370c      	adds	r7, #12
    918c:	46bd      	mov	sp, r7
    918e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9192:	4770      	bx	lr

00009194 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9194:	b480      	push	{r7}
    9196:	b083      	sub	sp, #12
    9198:	af00      	add	r7, sp, #0
    919a:	6078      	str	r0, [r7, #4]
    919c:	460b      	mov	r3, r1
    919e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    91a0:	687b      	ldr	r3, [r7, #4]
    91a2:	887a      	ldrh	r2, [r7, #2]
    91a4:	831a      	strh	r2, [r3, #24]
}
    91a6:	bf00      	nop
    91a8:	370c      	adds	r7, #12
    91aa:	46bd      	mov	sp, r7
    91ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    91b0:	4770      	bx	lr

000091b2 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    91b2:	b480      	push	{r7}
    91b4:	b083      	sub	sp, #12
    91b6:	af00      	add	r7, sp, #0
    91b8:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    91ba:	687b      	ldr	r3, [r7, #4]
    91bc:	8b1b      	ldrh	r3, [r3, #24]
    91be:	b29b      	uxth	r3, r3
}
    91c0:	4618      	mov	r0, r3
    91c2:	370c      	adds	r7, #12
    91c4:	46bd      	mov	sp, r7
    91c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    91ca:	4770      	bx	lr

000091cc <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    91cc:	b480      	push	{r7}
    91ce:	b083      	sub	sp, #12
    91d0:	af00      	add	r7, sp, #0
    91d2:	6078      	str	r0, [r7, #4]
    91d4:	460b      	mov	r3, r1
    91d6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    91d8:	687b      	ldr	r3, [r7, #4]
    91da:	887a      	ldrh	r2, [r7, #2]
    91dc:	829a      	strh	r2, [r3, #20]
}
    91de:	bf00      	nop
    91e0:	370c      	adds	r7, #12
    91e2:	46bd      	mov	sp, r7
    91e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    91e8:	4770      	bx	lr

000091ea <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    91ea:	b480      	push	{r7}
    91ec:	b085      	sub	sp, #20
    91ee:	af00      	add	r7, sp, #0
    91f0:	6078      	str	r0, [r7, #4]
    91f2:	460b      	mov	r3, r1
    91f4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    91f6:	687b      	ldr	r3, [r7, #4]
    91f8:	789b      	ldrb	r3, [r3, #2]
    91fa:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    91fc:	7bfa      	ldrb	r2, [r7, #15]
    91fe:	78fb      	ldrb	r3, [r7, #3]
    9200:	4013      	ands	r3, r2
    9202:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9204:	7bfb      	ldrb	r3, [r7, #15]
}
    9206:	4618      	mov	r0, r3
    9208:	3714      	adds	r7, #20
    920a:	46bd      	mov	sp, r7
    920c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9210:	4770      	bx	lr
	...

00009214 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9214:	b580      	push	{r7, lr}
    9216:	b082      	sub	sp, #8
    9218:	af00      	add	r7, sp, #0
    921a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    921c:	687b      	ldr	r3, [r7, #4]
    921e:	781b      	ldrb	r3, [r3, #0]
    9220:	b2db      	uxtb	r3, r3
    9222:	f023 0302 	bic.w	r3, r3, #2
    9226:	b2da      	uxtb	r2, r3
    9228:	687b      	ldr	r3, [r7, #4]
    922a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    922c:	2103      	movs	r1, #3
    922e:	6878      	ldr	r0, [r7, #4]
    9230:	4b02      	ldr	r3, [pc, #8]	; (923c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    9232:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    9234:	bf00      	nop
    9236:	3708      	adds	r7, #8
    9238:	46bd      	mov	sp, r7
    923a:	bd80      	pop	{r7, pc}
    923c:	00008ec7 	.word	0x00008ec7

00009240 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    9240:	b580      	push	{r7, lr}
    9242:	b084      	sub	sp, #16
    9244:	af00      	add	r7, sp, #0
    9246:	6078      	str	r0, [r7, #4]
    9248:	460b      	mov	r3, r1
    924a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    924c:	2103      	movs	r1, #3
    924e:	6878      	ldr	r0, [r7, #4]
    9250:	4b06      	ldr	r3, [pc, #24]	; (926c <hri_usb_get_CTRLA_reg+0x2c>)
    9252:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    9254:	687b      	ldr	r3, [r7, #4]
    9256:	781b      	ldrb	r3, [r3, #0]
    9258:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    925a:	7bfa      	ldrb	r2, [r7, #15]
    925c:	78fb      	ldrb	r3, [r7, #3]
    925e:	4013      	ands	r3, r2
    9260:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9262:	7bfb      	ldrb	r3, [r7, #15]
}
    9264:	4618      	mov	r0, r3
    9266:	3710      	adds	r7, #16
    9268:	46bd      	mov	sp, r7
    926a:	bd80      	pop	{r7, pc}
    926c:	00008ec7 	.word	0x00008ec7

00009270 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    9270:	b580      	push	{r7, lr}
    9272:	b082      	sub	sp, #8
    9274:	af00      	add	r7, sp, #0
    9276:	6078      	str	r0, [r7, #4]
    9278:	460b      	mov	r3, r1
    927a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    927c:	687b      	ldr	r3, [r7, #4]
    927e:	78fa      	ldrb	r2, [r7, #3]
    9280:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9282:	2103      	movs	r1, #3
    9284:	6878      	ldr	r0, [r7, #4]
    9286:	4b03      	ldr	r3, [pc, #12]	; (9294 <hri_usb_write_CTRLA_reg+0x24>)
    9288:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    928a:	bf00      	nop
    928c:	3708      	adds	r7, #8
    928e:	46bd      	mov	sp, r7
    9290:	bd80      	pop	{r7, pc}
    9292:	bf00      	nop
    9294:	00008ec7 	.word	0x00008ec7

00009298 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    9298:	b580      	push	{r7, lr}
    929a:	b082      	sub	sp, #8
    929c:	af00      	add	r7, sp, #0
    929e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    92a0:	2103      	movs	r1, #3
    92a2:	6878      	ldr	r0, [r7, #4]
    92a4:	4b04      	ldr	r3, [pc, #16]	; (92b8 <hri_usb_read_CTRLA_reg+0x20>)
    92a6:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    92a8:	687b      	ldr	r3, [r7, #4]
    92aa:	781b      	ldrb	r3, [r3, #0]
    92ac:	b2db      	uxtb	r3, r3
}
    92ae:	4618      	mov	r0, r3
    92b0:	3708      	adds	r7, #8
    92b2:	46bd      	mov	sp, r7
    92b4:	bd80      	pop	{r7, pc}
    92b6:	bf00      	nop
    92b8:	00008ec7 	.word	0x00008ec7

000092bc <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    92bc:	b480      	push	{r7}
    92be:	b083      	sub	sp, #12
    92c0:	af00      	add	r7, sp, #0
    92c2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	891b      	ldrh	r3, [r3, #8]
    92c8:	b29b      	uxth	r3, r3
    92ca:	f023 0301 	bic.w	r3, r3, #1
    92ce:	b29a      	uxth	r2, r3
    92d0:	687b      	ldr	r3, [r7, #4]
    92d2:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    92d4:	bf00      	nop
    92d6:	370c      	adds	r7, #12
    92d8:	46bd      	mov	sp, r7
    92da:	f85d 7b04 	ldr.w	r7, [sp], #4
    92de:	4770      	bx	lr

000092e0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    92e0:	b480      	push	{r7}
    92e2:	b083      	sub	sp, #12
    92e4:	af00      	add	r7, sp, #0
    92e6:	6078      	str	r0, [r7, #4]
    92e8:	460b      	mov	r3, r1
    92ea:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    92ec:	687b      	ldr	r3, [r7, #4]
    92ee:	887a      	ldrh	r2, [r7, #2]
    92f0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    92f2:	bf00      	nop
    92f4:	370c      	adds	r7, #12
    92f6:	46bd      	mov	sp, r7
    92f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    92fc:	4770      	bx	lr

000092fe <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    92fe:	b480      	push	{r7}
    9300:	b083      	sub	sp, #12
    9302:	af00      	add	r7, sp, #0
    9304:	6078      	str	r0, [r7, #4]
    9306:	460b      	mov	r3, r1
    9308:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    930a:	687b      	ldr	r3, [r7, #4]
    930c:	78fa      	ldrb	r2, [r7, #3]
    930e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    9310:	bf00      	nop
    9312:	370c      	adds	r7, #12
    9314:	46bd      	mov	sp, r7
    9316:	f85d 7b04 	ldr.w	r7, [sp], #4
    931a:	4770      	bx	lr

0000931c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    931c:	b480      	push	{r7}
    931e:	b083      	sub	sp, #12
    9320:	af00      	add	r7, sp, #0
    9322:	6078      	str	r0, [r7, #4]
    9324:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    9326:	687b      	ldr	r3, [r7, #4]
    9328:	683a      	ldr	r2, [r7, #0]
    932a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    932c:	bf00      	nop
    932e:	370c      	adds	r7, #12
    9330:	46bd      	mov	sp, r7
    9332:	f85d 7b04 	ldr.w	r7, [sp], #4
    9336:	4770      	bx	lr

00009338 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    9338:	b480      	push	{r7}
    933a:	b083      	sub	sp, #12
    933c:	af00      	add	r7, sp, #0
    933e:	6078      	str	r0, [r7, #4]
    9340:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    9342:	2300      	movs	r3, #0
}
    9344:	4618      	mov	r0, r3
    9346:	370c      	adds	r7, #12
    9348:	46bd      	mov	sp, r7
    934a:	f85d 7b04 	ldr.w	r7, [sp], #4
    934e:	4770      	bx	lr

00009350 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9350:	b480      	push	{r7}
    9352:	b085      	sub	sp, #20
    9354:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    9356:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    935a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    935c:	4b28      	ldr	r3, [pc, #160]	; (9400 <_usb_load_calib+0xb0>)
    935e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9360:	f003 031f 	and.w	r3, r3, #31
    9364:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    9366:	4b26      	ldr	r3, [pc, #152]	; (9400 <_usb_load_calib+0xb0>)
    9368:	681b      	ldr	r3, [r3, #0]
    936a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    936c:	f003 031f 	and.w	r3, r3, #31
    9370:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9372:	4b23      	ldr	r3, [pc, #140]	; (9400 <_usb_load_calib+0xb0>)
    9374:	681b      	ldr	r3, [r3, #0]
    9376:	0a9b      	lsrs	r3, r3, #10
    9378:	f003 0307 	and.w	r3, r3, #7
    937c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    937e:	68fb      	ldr	r3, [r7, #12]
    9380:	2b00      	cmp	r3, #0
    9382:	d002      	beq.n	938a <_usb_load_calib+0x3a>
    9384:	68fb      	ldr	r3, [r7, #12]
    9386:	2b1f      	cmp	r3, #31
    9388:	d101      	bne.n	938e <_usb_load_calib+0x3e>
		pad_transn = 9;
    938a:	2309      	movs	r3, #9
    938c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    938e:	68bb      	ldr	r3, [r7, #8]
    9390:	2b00      	cmp	r3, #0
    9392:	d002      	beq.n	939a <_usb_load_calib+0x4a>
    9394:	68bb      	ldr	r3, [r7, #8]
    9396:	2b1f      	cmp	r3, #31
    9398:	d101      	bne.n	939e <_usb_load_calib+0x4e>
		pad_transp = 25;
    939a:	2319      	movs	r3, #25
    939c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    939e:	687b      	ldr	r3, [r7, #4]
    93a0:	2b00      	cmp	r3, #0
    93a2:	d002      	beq.n	93aa <_usb_load_calib+0x5a>
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	2b07      	cmp	r3, #7
    93a8:	d101      	bne.n	93ae <_usb_load_calib+0x5e>
		pad_trim = 6;
    93aa:	2306      	movs	r3, #6
    93ac:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    93ae:	68fb      	ldr	r3, [r7, #12]
    93b0:	b29b      	uxth	r3, r3
    93b2:	019b      	lsls	r3, r3, #6
    93b4:	b29b      	uxth	r3, r3
    93b6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    93ba:	b29a      	uxth	r2, r3
    93bc:	68bb      	ldr	r3, [r7, #8]
    93be:	b29b      	uxth	r3, r3
    93c0:	f003 031f 	and.w	r3, r3, #31
    93c4:	b29b      	uxth	r3, r3
    93c6:	4313      	orrs	r3, r2
    93c8:	b29a      	uxth	r2, r3
    93ca:	687b      	ldr	r3, [r7, #4]
    93cc:	b29b      	uxth	r3, r3
    93ce:	031b      	lsls	r3, r3, #12
    93d0:	b29b      	uxth	r3, r3
    93d2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    93d6:	b29b      	uxth	r3, r3
    93d8:	4313      	orrs	r3, r2
    93da:	b29a      	uxth	r2, r3
    93dc:	683b      	ldr	r3, [r7, #0]
    93de:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    93e0:	683a      	ldr	r2, [r7, #0]
    93e2:	78d3      	ldrb	r3, [r2, #3]
    93e4:	f043 0303 	orr.w	r3, r3, #3
    93e8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    93ea:	683a      	ldr	r2, [r7, #0]
    93ec:	78d3      	ldrb	r3, [r2, #3]
    93ee:	f043 030c 	orr.w	r3, r3, #12
    93f2:	70d3      	strb	r3, [r2, #3]
}
    93f4:	bf00      	nop
    93f6:	3714      	adds	r7, #20
    93f8:	46bd      	mov	sp, r7
    93fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    93fe:	4770      	bx	lr
    9400:	00800084 	.word	0x00800084

00009404 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    9404:	b580      	push	{r7, lr}
    9406:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    9408:	bf00      	nop
    940a:	2203      	movs	r2, #3
    940c:	2100      	movs	r1, #0
    940e:	4804      	ldr	r0, [pc, #16]	; (9420 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    9410:	4b04      	ldr	r3, [pc, #16]	; (9424 <_usb_d_dev_wait_dpll_rdy+0x20>)
    9412:	4798      	blx	r3
    9414:	4603      	mov	r3, r0
    9416:	2b03      	cmp	r3, #3
    9418:	d1f7      	bne.n	940a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    941a:	bf00      	nop
    941c:	bd80      	pop	{r7, pc}
    941e:	bf00      	nop
    9420:	40001000 	.word	0x40001000
    9424:	00008e39 	.word	0x00008e39

00009428 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    9428:	b580      	push	{r7, lr}
    942a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    942c:	480e      	ldr	r0, [pc, #56]	; (9468 <_usb_d_dev_wait_dfll_rdy+0x40>)
    942e:	4b0f      	ldr	r3, [pc, #60]	; (946c <_usb_d_dev_wait_dfll_rdy+0x44>)
    9430:	4798      	blx	r3
    9432:	4603      	mov	r3, r0
    9434:	2b00      	cmp	r3, #0
    9436:	d00a      	beq.n	944e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    9438:	bf00      	nop
    943a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    943e:	480a      	ldr	r0, [pc, #40]	; (9468 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9440:	4b0b      	ldr	r3, [pc, #44]	; (9470 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9442:	4798      	blx	r3
    9444:	4603      	mov	r3, r0
    9446:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    944a:	d1f6      	bne.n	943a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    944c:	e009      	b.n	9462 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    944e:	bf00      	nop
    9450:	f44f 7180 	mov.w	r1, #256	; 0x100
    9454:	4804      	ldr	r0, [pc, #16]	; (9468 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9456:	4b06      	ldr	r3, [pc, #24]	; (9470 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9458:	4798      	blx	r3
    945a:	4603      	mov	r3, r0
    945c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9460:	d1f6      	bne.n	9450 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    9462:	bf00      	nop
    9464:	bd80      	pop	{r7, pc}
    9466:	bf00      	nop
    9468:	40001000 	.word	0x40001000
    946c:	00008e97 	.word	0x00008e97
    9470:	00008e71 	.word	0x00008e71

00009474 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    9474:	b580      	push	{r7, lr}
    9476:	b082      	sub	sp, #8
    9478:	af00      	add	r7, sp, #0
    947a:	4603      	mov	r3, r0
    947c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    947e:	79fb      	ldrb	r3, [r7, #7]
    9480:	2b00      	cmp	r3, #0
    9482:	d102      	bne.n	948a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9484:	4b05      	ldr	r3, [pc, #20]	; (949c <_usb_d_dev_wait_clk_rdy+0x28>)
    9486:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    9488:	e004      	b.n	9494 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    948a:	79fb      	ldrb	r3, [r7, #7]
    948c:	2b01      	cmp	r3, #1
    948e:	d101      	bne.n	9494 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9490:	4b03      	ldr	r3, [pc, #12]	; (94a0 <_usb_d_dev_wait_clk_rdy+0x2c>)
    9492:	4798      	blx	r3
}
    9494:	bf00      	nop
    9496:	3708      	adds	r7, #8
    9498:	46bd      	mov	sp, r7
    949a:	bd80      	pop	{r7, pc}
    949c:	00009429 	.word	0x00009429
    94a0:	00009405 	.word	0x00009405

000094a4 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    94a4:	b580      	push	{r7, lr}
    94a6:	b082      	sub	sp, #8
    94a8:	af00      	add	r7, sp, #0
    94aa:	4603      	mov	r3, r0
    94ac:	6039      	str	r1, [r7, #0]
    94ae:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    94b0:	683b      	ldr	r3, [r7, #0]
    94b2:	b2da      	uxtb	r2, r3
    94b4:	79fb      	ldrb	r3, [r7, #7]
    94b6:	4619      	mov	r1, r3
    94b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94bc:	4b02      	ldr	r3, [pc, #8]	; (94c8 <_usbd_ep_int_ack+0x24>)
    94be:	4798      	blx	r3
}
    94c0:	bf00      	nop
    94c2:	3708      	adds	r7, #8
    94c4:	46bd      	mov	sp, r7
    94c6:	bd80      	pop	{r7, pc}
    94c8:	00008f7d 	.word	0x00008f7d

000094cc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    94cc:	b580      	push	{r7, lr}
    94ce:	b082      	sub	sp, #8
    94d0:	af00      	add	r7, sp, #0
    94d2:	4603      	mov	r3, r0
    94d4:	6039      	str	r1, [r7, #0]
    94d6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    94d8:	683b      	ldr	r3, [r7, #0]
    94da:	b2da      	uxtb	r2, r3
    94dc:	79fb      	ldrb	r3, [r7, #7]
    94de:	4619      	mov	r1, r3
    94e0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94e4:	4b02      	ldr	r3, [pc, #8]	; (94f0 <_usbd_ep_int_en+0x24>)
    94e6:	4798      	blx	r3
}
    94e8:	bf00      	nop
    94ea:	3708      	adds	r7, #8
    94ec:	46bd      	mov	sp, r7
    94ee:	bd80      	pop	{r7, pc}
    94f0:	00009051 	.word	0x00009051

000094f4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    94f4:	b580      	push	{r7, lr}
    94f6:	b082      	sub	sp, #8
    94f8:	af00      	add	r7, sp, #0
    94fa:	4603      	mov	r3, r0
    94fc:	6039      	str	r1, [r7, #0]
    94fe:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    9500:	683b      	ldr	r3, [r7, #0]
    9502:	b2da      	uxtb	r2, r3
    9504:	79fb      	ldrb	r3, [r7, #7]
    9506:	4619      	mov	r1, r3
    9508:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    950c:	4b02      	ldr	r3, [pc, #8]	; (9518 <_usbd_ep_int_dis+0x24>)
    950e:	4798      	blx	r3
}
    9510:	bf00      	nop
    9512:	3708      	adds	r7, #8
    9514:	46bd      	mov	sp, r7
    9516:	bd80      	pop	{r7, pc}
    9518:	0000907d 	.word	0x0000907d

0000951c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    951c:	b580      	push	{r7, lr}
    951e:	b082      	sub	sp, #8
    9520:	af00      	add	r7, sp, #0
    9522:	4603      	mov	r3, r0
    9524:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    9526:	79fb      	ldrb	r3, [r7, #7]
    9528:	4619      	mov	r1, r3
    952a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    952e:	4b06      	ldr	r3, [pc, #24]	; (9548 <_usbd_ep_is_ctrl+0x2c>)
    9530:	4798      	blx	r3
    9532:	4603      	mov	r3, r0
    9534:	2b11      	cmp	r3, #17
    9536:	bf0c      	ite	eq
    9538:	2301      	moveq	r3, #1
    953a:	2300      	movne	r3, #0
    953c:	b2db      	uxtb	r3, r3
}
    953e:	4618      	mov	r0, r3
    9540:	3708      	adds	r7, #8
    9542:	46bd      	mov	sp, r7
    9544:	bd80      	pop	{r7, pc}
    9546:	bf00      	nop
    9548:	00009137 	.word	0x00009137

0000954c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    954c:	b580      	push	{r7, lr}
    954e:	b082      	sub	sp, #8
    9550:	af00      	add	r7, sp, #0
    9552:	4603      	mov	r3, r0
    9554:	71fb      	strb	r3, [r7, #7]
    9556:	460b      	mov	r3, r1
    9558:	71bb      	strb	r3, [r7, #6]
    955a:	4613      	mov	r3, r2
    955c:	717b      	strb	r3, [r7, #5]
	if (st) {
    955e:	797b      	ldrb	r3, [r7, #5]
    9560:	2b00      	cmp	r3, #0
    9562:	d00b      	beq.n	957c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9564:	79bb      	ldrb	r3, [r7, #6]
    9566:	2210      	movs	r2, #16
    9568:	fa02 f303 	lsl.w	r3, r2, r3
    956c:	b2da      	uxtb	r2, r3
    956e:	79fb      	ldrb	r3, [r7, #7]
    9570:	4619      	mov	r1, r3
    9572:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9576:	4b09      	ldr	r3, [pc, #36]	; (959c <_usbd_ep_set_stall+0x50>)
    9578:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    957a:	e00a      	b.n	9592 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    957c:	79bb      	ldrb	r3, [r7, #6]
    957e:	2210      	movs	r2, #16
    9580:	fa02 f303 	lsl.w	r3, r2, r3
    9584:	b2da      	uxtb	r2, r3
    9586:	79fb      	ldrb	r3, [r7, #7]
    9588:	4619      	mov	r1, r3
    958a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    958e:	4b04      	ldr	r3, [pc, #16]	; (95a0 <_usbd_ep_set_stall+0x54>)
    9590:	4798      	blx	r3
}
    9592:	bf00      	nop
    9594:	3708      	adds	r7, #8
    9596:	46bd      	mov	sp, r7
    9598:	bd80      	pop	{r7, pc}
    959a:	bf00      	nop
    959c:	00008fa9 	.word	0x00008fa9
    95a0:	00008ffd 	.word	0x00008ffd

000095a4 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    95a4:	b580      	push	{r7, lr}
    95a6:	b084      	sub	sp, #16
    95a8:	af00      	add	r7, sp, #0
    95aa:	4603      	mov	r3, r0
    95ac:	460a      	mov	r2, r1
    95ae:	71fb      	strb	r3, [r7, #7]
    95b0:	4613      	mov	r3, r2
    95b2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    95b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    95b8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    95ba:	79fb      	ldrb	r3, [r7, #7]
    95bc:	4619      	mov	r1, r3
    95be:	68f8      	ldr	r0, [r7, #12]
    95c0:	4b08      	ldr	r3, [pc, #32]	; (95e4 <_usbd_ep_is_stalled+0x40>)
    95c2:	4798      	blx	r3
    95c4:	4603      	mov	r3, r0
    95c6:	4619      	mov	r1, r3
    95c8:	79bb      	ldrb	r3, [r7, #6]
    95ca:	2210      	movs	r2, #16
    95cc:	fa02 f303 	lsl.w	r3, r2, r3
    95d0:	400b      	ands	r3, r1
    95d2:	2b00      	cmp	r3, #0
    95d4:	bf14      	ite	ne
    95d6:	2301      	movne	r3, #1
    95d8:	2300      	moveq	r3, #0
    95da:	b2db      	uxtb	r3, r3
}
    95dc:	4618      	mov	r0, r3
    95de:	3710      	adds	r7, #16
    95e0:	46bd      	mov	sp, r7
    95e2:	bd80      	pop	{r7, pc}
    95e4:	00008fd5 	.word	0x00008fd5

000095e8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    95e8:	b580      	push	{r7, lr}
    95ea:	b084      	sub	sp, #16
    95ec:	af00      	add	r7, sp, #0
    95ee:	4603      	mov	r3, r0
    95f0:	460a      	mov	r2, r1
    95f2:	71fb      	strb	r3, [r7, #7]
    95f4:	4613      	mov	r3, r2
    95f6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    95f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    95fc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    95fe:	79fb      	ldrb	r3, [r7, #7]
    9600:	4619      	mov	r1, r3
    9602:	68f8      	ldr	r0, [r7, #12]
    9604:	4b08      	ldr	r3, [pc, #32]	; (9628 <_usbd_ep_is_stall_sent+0x40>)
    9606:	4798      	blx	r3
    9608:	4603      	mov	r3, r0
    960a:	4619      	mov	r1, r3
    960c:	79bb      	ldrb	r3, [r7, #6]
    960e:	2220      	movs	r2, #32
    9610:	fa02 f303 	lsl.w	r3, r2, r3
    9614:	400b      	ands	r3, r1
    9616:	2b00      	cmp	r3, #0
    9618:	bf14      	ite	ne
    961a:	2301      	movne	r3, #1
    961c:	2300      	moveq	r3, #0
    961e:	b2db      	uxtb	r3, r3
}
    9620:	4618      	mov	r0, r3
    9622:	3710      	adds	r7, #16
    9624:	46bd      	mov	sp, r7
    9626:	bd80      	pop	{r7, pc}
    9628:	00008f55 	.word	0x00008f55

0000962c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    962c:	b580      	push	{r7, lr}
    962e:	b082      	sub	sp, #8
    9630:	af00      	add	r7, sp, #0
    9632:	4603      	mov	r3, r0
    9634:	460a      	mov	r2, r1
    9636:	71fb      	strb	r3, [r7, #7]
    9638:	4613      	mov	r3, r2
    963a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    963c:	79bb      	ldrb	r3, [r7, #6]
    963e:	2220      	movs	r2, #32
    9640:	409a      	lsls	r2, r3
    9642:	79fb      	ldrb	r3, [r7, #7]
    9644:	4611      	mov	r1, r2
    9646:	4618      	mov	r0, r3
    9648:	4b02      	ldr	r3, [pc, #8]	; (9654 <_usbd_ep_ack_stall+0x28>)
    964a:	4798      	blx	r3
}
    964c:	bf00      	nop
    964e:	3708      	adds	r7, #8
    9650:	46bd      	mov	sp, r7
    9652:	bd80      	pop	{r7, pc}
    9654:	000094a5 	.word	0x000094a5

00009658 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9658:	b580      	push	{r7, lr}
    965a:	b082      	sub	sp, #8
    965c:	af00      	add	r7, sp, #0
    965e:	4603      	mov	r3, r0
    9660:	71fb      	strb	r3, [r7, #7]
    9662:	460b      	mov	r3, r1
    9664:	71bb      	strb	r3, [r7, #6]
    9666:	4613      	mov	r3, r2
    9668:	717b      	strb	r3, [r7, #5]
	if (en) {
    966a:	797b      	ldrb	r3, [r7, #5]
    966c:	2b00      	cmp	r3, #0
    966e:	d008      	beq.n	9682 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9670:	79bb      	ldrb	r3, [r7, #6]
    9672:	2220      	movs	r2, #32
    9674:	409a      	lsls	r2, r3
    9676:	79fb      	ldrb	r3, [r7, #7]
    9678:	4611      	mov	r1, r2
    967a:	4618      	mov	r0, r3
    967c:	4b07      	ldr	r3, [pc, #28]	; (969c <_usbd_ep_int_stall_en+0x44>)
    967e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9680:	e007      	b.n	9692 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9682:	79bb      	ldrb	r3, [r7, #6]
    9684:	2220      	movs	r2, #32
    9686:	409a      	lsls	r2, r3
    9688:	79fb      	ldrb	r3, [r7, #7]
    968a:	4611      	mov	r1, r2
    968c:	4618      	mov	r0, r3
    968e:	4b04      	ldr	r3, [pc, #16]	; (96a0 <_usbd_ep_int_stall_en+0x48>)
    9690:	4798      	blx	r3
}
    9692:	bf00      	nop
    9694:	3708      	adds	r7, #8
    9696:	46bd      	mov	sp, r7
    9698:	bd80      	pop	{r7, pc}
    969a:	bf00      	nop
    969c:	000094cd 	.word	0x000094cd
    96a0:	000094f5 	.word	0x000094f5

000096a4 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    96a4:	b580      	push	{r7, lr}
    96a6:	b082      	sub	sp, #8
    96a8:	af00      	add	r7, sp, #0
    96aa:	4603      	mov	r3, r0
    96ac:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    96ae:	79fb      	ldrb	r3, [r7, #7]
    96b0:	4619      	mov	r1, r3
    96b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96b6:	4b03      	ldr	r3, [pc, #12]	; (96c4 <_usbd_ep_stop_setup+0x20>)
    96b8:	4798      	blx	r3
}
    96ba:	bf00      	nop
    96bc:	3708      	adds	r7, #8
    96be:	46bd      	mov	sp, r7
    96c0:	bd80      	pop	{r7, pc}
    96c2:	bf00      	nop
    96c4:	00009029 	.word	0x00009029

000096c8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    96c8:	b580      	push	{r7, lr}
    96ca:	b082      	sub	sp, #8
    96cc:	af00      	add	r7, sp, #0
    96ce:	4603      	mov	r3, r0
    96d0:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    96d2:	79fb      	ldrb	r3, [r7, #7]
    96d4:	2210      	movs	r2, #16
    96d6:	4619      	mov	r1, r3
    96d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96dc:	4b05      	ldr	r3, [pc, #20]	; (96f4 <_usbd_ep_is_setup+0x2c>)
    96de:	4798      	blx	r3
    96e0:	4603      	mov	r3, r0
    96e2:	2b00      	cmp	r3, #0
    96e4:	bf14      	ite	ne
    96e6:	2301      	movne	r3, #1
    96e8:	2300      	moveq	r3, #0
    96ea:	b2db      	uxtb	r3, r3
}
    96ec:	4618      	mov	r0, r3
    96ee:	3708      	adds	r7, #8
    96f0:	46bd      	mov	sp, r7
    96f2:	bd80      	pop	{r7, pc}
    96f4:	00008f1f 	.word	0x00008f1f

000096f8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    96f8:	b580      	push	{r7, lr}
    96fa:	b082      	sub	sp, #8
    96fc:	af00      	add	r7, sp, #0
    96fe:	4603      	mov	r3, r0
    9700:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9702:	79fb      	ldrb	r3, [r7, #7]
    9704:	2110      	movs	r1, #16
    9706:	4618      	mov	r0, r3
    9708:	4b02      	ldr	r3, [pc, #8]	; (9714 <_usbd_ep_ack_setup+0x1c>)
    970a:	4798      	blx	r3
}
    970c:	bf00      	nop
    970e:	3708      	adds	r7, #8
    9710:	46bd      	mov	sp, r7
    9712:	bd80      	pop	{r7, pc}
    9714:	000094a5 	.word	0x000094a5

00009718 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9718:	b580      	push	{r7, lr}
    971a:	b082      	sub	sp, #8
    971c:	af00      	add	r7, sp, #0
    971e:	4603      	mov	r3, r0
    9720:	71fb      	strb	r3, [r7, #7]
    9722:	460b      	mov	r3, r1
    9724:	71bb      	strb	r3, [r7, #6]
    9726:	4613      	mov	r3, r2
    9728:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    972a:	797b      	ldrb	r3, [r7, #5]
    972c:	2b00      	cmp	r3, #0
    972e:	d00b      	beq.n	9748 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9730:	79bb      	ldrb	r3, [r7, #6]
    9732:	2201      	movs	r2, #1
    9734:	fa02 f303 	lsl.w	r3, r2, r3
    9738:	b2da      	uxtb	r2, r3
    973a:	79fb      	ldrb	r3, [r7, #7]
    973c:	4619      	mov	r1, r3
    973e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9742:	4b09      	ldr	r3, [pc, #36]	; (9768 <_usbd_ep_set_toggle+0x50>)
    9744:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    9746:	e00a      	b.n	975e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9748:	79bb      	ldrb	r3, [r7, #6]
    974a:	2201      	movs	r2, #1
    974c:	fa02 f303 	lsl.w	r3, r2, r3
    9750:	b2da      	uxtb	r2, r3
    9752:	79fb      	ldrb	r3, [r7, #7]
    9754:	4619      	mov	r1, r3
    9756:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    975a:	4b04      	ldr	r3, [pc, #16]	; (976c <_usbd_ep_set_toggle+0x54>)
    975c:	4798      	blx	r3
}
    975e:	bf00      	nop
    9760:	3708      	adds	r7, #8
    9762:	46bd      	mov	sp, r7
    9764:	bd80      	pop	{r7, pc}
    9766:	bf00      	nop
    9768:	00008fa9 	.word	0x00008fa9
    976c:	00008ffd 	.word	0x00008ffd

00009770 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9770:	b580      	push	{r7, lr}
    9772:	b082      	sub	sp, #8
    9774:	af00      	add	r7, sp, #0
    9776:	4603      	mov	r3, r0
    9778:	460a      	mov	r2, r1
    977a:	71fb      	strb	r3, [r7, #7]
    977c:	4613      	mov	r3, r2
    977e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9780:	79bb      	ldrb	r3, [r7, #6]
    9782:	2201      	movs	r2, #1
    9784:	409a      	lsls	r2, r3
    9786:	79fb      	ldrb	r3, [r7, #7]
    9788:	4611      	mov	r1, r2
    978a:	4618      	mov	r0, r3
    978c:	4b02      	ldr	r3, [pc, #8]	; (9798 <_usbd_ep_ack_io_cpt+0x28>)
    978e:	4798      	blx	r3
}
    9790:	bf00      	nop
    9792:	3708      	adds	r7, #8
    9794:	46bd      	mov	sp, r7
    9796:	bd80      	pop	{r7, pc}
    9798:	000094a5 	.word	0x000094a5

0000979c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    979c:	b480      	push	{r7}
    979e:	b085      	sub	sp, #20
    97a0:	af00      	add	r7, sp, #0
    97a2:	4603      	mov	r3, r0
    97a4:	603a      	str	r2, [r7, #0]
    97a6:	71fb      	strb	r3, [r7, #7]
    97a8:	460b      	mov	r3, r1
    97aa:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    97ac:	79fa      	ldrb	r2, [r7, #7]
    97ae:	79bb      	ldrb	r3, [r7, #6]
    97b0:	0052      	lsls	r2, r2, #1
    97b2:	4413      	add	r3, r2
    97b4:	011b      	lsls	r3, r3, #4
    97b6:	4a06      	ldr	r2, [pc, #24]	; (97d0 <_usbd_ep_set_buf+0x34>)
    97b8:	4413      	add	r3, r2
    97ba:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    97bc:	68fb      	ldr	r3, [r7, #12]
    97be:	683a      	ldr	r2, [r7, #0]
    97c0:	601a      	str	r2, [r3, #0]
}
    97c2:	bf00      	nop
    97c4:	3714      	adds	r7, #20
    97c6:	46bd      	mov	sp, r7
    97c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    97cc:	4770      	bx	lr
    97ce:	bf00      	nop
    97d0:	20000b5c 	.word	0x20000b5c

000097d4 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    97d4:	b480      	push	{r7}
    97d6:	b085      	sub	sp, #20
    97d8:	af00      	add	r7, sp, #0
    97da:	4603      	mov	r3, r0
    97dc:	71fb      	strb	r3, [r7, #7]
    97de:	460b      	mov	r3, r1
    97e0:	71bb      	strb	r3, [r7, #6]
    97e2:	4613      	mov	r3, r2
    97e4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    97e6:	79fa      	ldrb	r2, [r7, #7]
    97e8:	79bb      	ldrb	r3, [r7, #6]
    97ea:	0052      	lsls	r2, r2, #1
    97ec:	4413      	add	r3, r2
    97ee:	011b      	lsls	r3, r3, #4
    97f0:	4a08      	ldr	r2, [pc, #32]	; (9814 <_usbd_ep_set_in_count+0x40>)
    97f2:	4413      	add	r3, r2
    97f4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    97f6:	88bb      	ldrh	r3, [r7, #4]
    97f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    97fc:	b299      	uxth	r1, r3
    97fe:	68fa      	ldr	r2, [r7, #12]
    9800:	6853      	ldr	r3, [r2, #4]
    9802:	f361 339b 	bfi	r3, r1, #14, #14
    9806:	6053      	str	r3, [r2, #4]
}
    9808:	bf00      	nop
    980a:	3714      	adds	r7, #20
    980c:	46bd      	mov	sp, r7
    980e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9812:	4770      	bx	lr
    9814:	20000b5c 	.word	0x20000b5c

00009818 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9818:	b480      	push	{r7}
    981a:	b085      	sub	sp, #20
    981c:	af00      	add	r7, sp, #0
    981e:	4603      	mov	r3, r0
    9820:	71fb      	strb	r3, [r7, #7]
    9822:	460b      	mov	r3, r1
    9824:	71bb      	strb	r3, [r7, #6]
    9826:	4613      	mov	r3, r2
    9828:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    982a:	79fa      	ldrb	r2, [r7, #7]
    982c:	79bb      	ldrb	r3, [r7, #6]
    982e:	0052      	lsls	r2, r2, #1
    9830:	4413      	add	r3, r2
    9832:	011b      	lsls	r3, r3, #4
    9834:	4a08      	ldr	r2, [pc, #32]	; (9858 <_usbd_ep_set_in_size+0x40>)
    9836:	4413      	add	r3, r2
    9838:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    983a:	88bb      	ldrh	r3, [r7, #4]
    983c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9840:	b299      	uxth	r1, r3
    9842:	68fa      	ldr	r2, [r7, #12]
    9844:	6853      	ldr	r3, [r2, #4]
    9846:	f361 030d 	bfi	r3, r1, #0, #14
    984a:	6053      	str	r3, [r2, #4]
}
    984c:	bf00      	nop
    984e:	3714      	adds	r7, #20
    9850:	46bd      	mov	sp, r7
    9852:	f85d 7b04 	ldr.w	r7, [sp], #4
    9856:	4770      	bx	lr
    9858:	20000b5c 	.word	0x20000b5c

0000985c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    985c:	b480      	push	{r7}
    985e:	b085      	sub	sp, #20
    9860:	af00      	add	r7, sp, #0
    9862:	4603      	mov	r3, r0
    9864:	71fb      	strb	r3, [r7, #7]
    9866:	460b      	mov	r3, r1
    9868:	71bb      	strb	r3, [r7, #6]
    986a:	4613      	mov	r3, r2
    986c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    986e:	79fa      	ldrb	r2, [r7, #7]
    9870:	79bb      	ldrb	r3, [r7, #6]
    9872:	0052      	lsls	r2, r2, #1
    9874:	4413      	add	r3, r2
    9876:	011b      	lsls	r3, r3, #4
    9878:	4a08      	ldr	r2, [pc, #32]	; (989c <_usbd_ep_set_out_count+0x40>)
    987a:	4413      	add	r3, r2
    987c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    987e:	88bb      	ldrh	r3, [r7, #4]
    9880:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9884:	b299      	uxth	r1, r3
    9886:	68fa      	ldr	r2, [r7, #12]
    9888:	6853      	ldr	r3, [r2, #4]
    988a:	f361 030d 	bfi	r3, r1, #0, #14
    988e:	6053      	str	r3, [r2, #4]
}
    9890:	bf00      	nop
    9892:	3714      	adds	r7, #20
    9894:	46bd      	mov	sp, r7
    9896:	f85d 7b04 	ldr.w	r7, [sp], #4
    989a:	4770      	bx	lr
    989c:	20000b5c 	.word	0x20000b5c

000098a0 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    98a0:	b480      	push	{r7}
    98a2:	b085      	sub	sp, #20
    98a4:	af00      	add	r7, sp, #0
    98a6:	4603      	mov	r3, r0
    98a8:	71fb      	strb	r3, [r7, #7]
    98aa:	460b      	mov	r3, r1
    98ac:	71bb      	strb	r3, [r7, #6]
    98ae:	4613      	mov	r3, r2
    98b0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    98b2:	79fa      	ldrb	r2, [r7, #7]
    98b4:	79bb      	ldrb	r3, [r7, #6]
    98b6:	0052      	lsls	r2, r2, #1
    98b8:	4413      	add	r3, r2
    98ba:	011b      	lsls	r3, r3, #4
    98bc:	4a08      	ldr	r2, [pc, #32]	; (98e0 <_usbd_ep_set_out_size+0x40>)
    98be:	4413      	add	r3, r2
    98c0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    98c2:	88bb      	ldrh	r3, [r7, #4]
    98c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    98c8:	b299      	uxth	r1, r3
    98ca:	68fa      	ldr	r2, [r7, #12]
    98cc:	6853      	ldr	r3, [r2, #4]
    98ce:	f361 339b 	bfi	r3, r1, #14, #14
    98d2:	6053      	str	r3, [r2, #4]
}
    98d4:	bf00      	nop
    98d6:	3714      	adds	r7, #20
    98d8:	46bd      	mov	sp, r7
    98da:	f85d 7b04 	ldr.w	r7, [sp], #4
    98de:	4770      	bx	lr
    98e0:	20000b5c 	.word	0x20000b5c

000098e4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    98e4:	b580      	push	{r7, lr}
    98e6:	b084      	sub	sp, #16
    98e8:	af00      	add	r7, sp, #0
    98ea:	60ba      	str	r2, [r7, #8]
    98ec:	607b      	str	r3, [r7, #4]
    98ee:	4603      	mov	r3, r0
    98f0:	73fb      	strb	r3, [r7, #15]
    98f2:	460b      	mov	r3, r1
    98f4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    98f6:	68bb      	ldr	r3, [r7, #8]
    98f8:	b29a      	uxth	r2, r3
    98fa:	7bb9      	ldrb	r1, [r7, #14]
    98fc:	7bfb      	ldrb	r3, [r7, #15]
    98fe:	4618      	mov	r0, r3
    9900:	4b06      	ldr	r3, [pc, #24]	; (991c <_usbd_ep_set_in_trans+0x38>)
    9902:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9904:	687b      	ldr	r3, [r7, #4]
    9906:	b29a      	uxth	r2, r3
    9908:	7bb9      	ldrb	r1, [r7, #14]
    990a:	7bfb      	ldrb	r3, [r7, #15]
    990c:	4618      	mov	r0, r3
    990e:	4b04      	ldr	r3, [pc, #16]	; (9920 <_usbd_ep_set_in_trans+0x3c>)
    9910:	4798      	blx	r3
}
    9912:	bf00      	nop
    9914:	3710      	adds	r7, #16
    9916:	46bd      	mov	sp, r7
    9918:	bd80      	pop	{r7, pc}
    991a:	bf00      	nop
    991c:	00009819 	.word	0x00009819
    9920:	000097d5 	.word	0x000097d5

00009924 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9924:	b580      	push	{r7, lr}
    9926:	b084      	sub	sp, #16
    9928:	af00      	add	r7, sp, #0
    992a:	60ba      	str	r2, [r7, #8]
    992c:	607b      	str	r3, [r7, #4]
    992e:	4603      	mov	r3, r0
    9930:	73fb      	strb	r3, [r7, #15]
    9932:	460b      	mov	r3, r1
    9934:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9936:	68bb      	ldr	r3, [r7, #8]
    9938:	b29a      	uxth	r2, r3
    993a:	7bb9      	ldrb	r1, [r7, #14]
    993c:	7bfb      	ldrb	r3, [r7, #15]
    993e:	4618      	mov	r0, r3
    9940:	4b06      	ldr	r3, [pc, #24]	; (995c <_usbd_ep_set_out_trans+0x38>)
    9942:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9944:	687b      	ldr	r3, [r7, #4]
    9946:	b29a      	uxth	r2, r3
    9948:	7bb9      	ldrb	r1, [r7, #14]
    994a:	7bfb      	ldrb	r3, [r7, #15]
    994c:	4618      	mov	r0, r3
    994e:	4b04      	ldr	r3, [pc, #16]	; (9960 <_usbd_ep_set_out_trans+0x3c>)
    9950:	4798      	blx	r3
}
    9952:	bf00      	nop
    9954:	3710      	adds	r7, #16
    9956:	46bd      	mov	sp, r7
    9958:	bd80      	pop	{r7, pc}
    995a:	bf00      	nop
    995c:	000098a1 	.word	0x000098a1
    9960:	0000985d 	.word	0x0000985d

00009964 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9964:	b480      	push	{r7}
    9966:	b085      	sub	sp, #20
    9968:	af00      	add	r7, sp, #0
    996a:	4603      	mov	r3, r0
    996c:	460a      	mov	r2, r1
    996e:	71fb      	strb	r3, [r7, #7]
    9970:	4613      	mov	r3, r2
    9972:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9974:	79fa      	ldrb	r2, [r7, #7]
    9976:	79bb      	ldrb	r3, [r7, #6]
    9978:	0052      	lsls	r2, r2, #1
    997a:	4413      	add	r3, r2
    997c:	011b      	lsls	r3, r3, #4
    997e:	4a06      	ldr	r2, [pc, #24]	; (9998 <_usbd_ep_clear_bank_status+0x34>)
    9980:	4413      	add	r3, r2
    9982:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9984:	68fb      	ldr	r3, [r7, #12]
    9986:	2200      	movs	r2, #0
    9988:	729a      	strb	r2, [r3, #10]
}
    998a:	bf00      	nop
    998c:	3714      	adds	r7, #20
    998e:	46bd      	mov	sp, r7
    9990:	f85d 7b04 	ldr.w	r7, [sp], #4
    9994:	4770      	bx	lr
    9996:	bf00      	nop
    9998:	20000b5c 	.word	0x20000b5c

0000999c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    999c:	b580      	push	{r7, lr}
    999e:	b082      	sub	sp, #8
    99a0:	af00      	add	r7, sp, #0
    99a2:	4603      	mov	r3, r0
    99a4:	71fb      	strb	r3, [r7, #7]
    99a6:	460b      	mov	r3, r1
    99a8:	71bb      	strb	r3, [r7, #6]
    99aa:	4613      	mov	r3, r2
    99ac:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    99ae:	797b      	ldrb	r3, [r7, #5]
    99b0:	2b00      	cmp	r3, #0
    99b2:	d00b      	beq.n	99cc <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    99b4:	79bb      	ldrb	r3, [r7, #6]
    99b6:	2240      	movs	r2, #64	; 0x40
    99b8:	fa02 f303 	lsl.w	r3, r2, r3
    99bc:	b2da      	uxtb	r2, r3
    99be:	79fb      	ldrb	r3, [r7, #7]
    99c0:	4619      	mov	r1, r3
    99c2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99c6:	4b09      	ldr	r3, [pc, #36]	; (99ec <_usbd_ep_set_in_rdy+0x50>)
    99c8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    99ca:	e00a      	b.n	99e2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    99cc:	79bb      	ldrb	r3, [r7, #6]
    99ce:	2240      	movs	r2, #64	; 0x40
    99d0:	fa02 f303 	lsl.w	r3, r2, r3
    99d4:	b2da      	uxtb	r2, r3
    99d6:	79fb      	ldrb	r3, [r7, #7]
    99d8:	4619      	mov	r1, r3
    99da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99de:	4b04      	ldr	r3, [pc, #16]	; (99f0 <_usbd_ep_set_in_rdy+0x54>)
    99e0:	4798      	blx	r3
}
    99e2:	bf00      	nop
    99e4:	3708      	adds	r7, #8
    99e6:	46bd      	mov	sp, r7
    99e8:	bd80      	pop	{r7, pc}
    99ea:	bf00      	nop
    99ec:	00008fa9 	.word	0x00008fa9
    99f0:	00008ffd 	.word	0x00008ffd

000099f4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    99f4:	b580      	push	{r7, lr}
    99f6:	b082      	sub	sp, #8
    99f8:	af00      	add	r7, sp, #0
    99fa:	4603      	mov	r3, r0
    99fc:	71fb      	strb	r3, [r7, #7]
    99fe:	460b      	mov	r3, r1
    9a00:	71bb      	strb	r3, [r7, #6]
    9a02:	4613      	mov	r3, r2
    9a04:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9a06:	797b      	ldrb	r3, [r7, #5]
    9a08:	2b00      	cmp	r3, #0
    9a0a:	d00b      	beq.n	9a24 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9a0c:	79bb      	ldrb	r3, [r7, #6]
    9a0e:	2240      	movs	r2, #64	; 0x40
    9a10:	fa02 f303 	lsl.w	r3, r2, r3
    9a14:	b2da      	uxtb	r2, r3
    9a16:	79fb      	ldrb	r3, [r7, #7]
    9a18:	4619      	mov	r1, r3
    9a1a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a1e:	4b09      	ldr	r3, [pc, #36]	; (9a44 <_usbd_ep_set_out_rdy+0x50>)
    9a20:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9a22:	e00a      	b.n	9a3a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9a24:	79bb      	ldrb	r3, [r7, #6]
    9a26:	2240      	movs	r2, #64	; 0x40
    9a28:	fa02 f303 	lsl.w	r3, r2, r3
    9a2c:	b2da      	uxtb	r2, r3
    9a2e:	79fb      	ldrb	r3, [r7, #7]
    9a30:	4619      	mov	r1, r3
    9a32:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a36:	4b04      	ldr	r3, [pc, #16]	; (9a48 <_usbd_ep_set_out_rdy+0x54>)
    9a38:	4798      	blx	r3
}
    9a3a:	bf00      	nop
    9a3c:	3708      	adds	r7, #8
    9a3e:	46bd      	mov	sp, r7
    9a40:	bd80      	pop	{r7, pc}
    9a42:	bf00      	nop
    9a44:	00008ffd 	.word	0x00008ffd
    9a48:	00008fa9 	.word	0x00008fa9

00009a4c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9a4c:	b480      	push	{r7}
    9a4e:	b083      	sub	sp, #12
    9a50:	af00      	add	r7, sp, #0
    9a52:	4603      	mov	r3, r0
    9a54:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9a56:	88fb      	ldrh	r3, [r7, #6]
    9a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9a5c:	d820      	bhi.n	9aa0 <_usbd_ep_pcksize_size+0x54>
    9a5e:	88fb      	ldrh	r3, [r7, #6]
    9a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9a64:	d81a      	bhi.n	9a9c <_usbd_ep_pcksize_size+0x50>
    9a66:	88fb      	ldrh	r3, [r7, #6]
    9a68:	2b80      	cmp	r3, #128	; 0x80
    9a6a:	d815      	bhi.n	9a98 <_usbd_ep_pcksize_size+0x4c>
    9a6c:	88fb      	ldrh	r3, [r7, #6]
    9a6e:	2b40      	cmp	r3, #64	; 0x40
    9a70:	d810      	bhi.n	9a94 <_usbd_ep_pcksize_size+0x48>
    9a72:	88fb      	ldrh	r3, [r7, #6]
    9a74:	2b20      	cmp	r3, #32
    9a76:	d80b      	bhi.n	9a90 <_usbd_ep_pcksize_size+0x44>
    9a78:	88fb      	ldrh	r3, [r7, #6]
    9a7a:	2b10      	cmp	r3, #16
    9a7c:	d806      	bhi.n	9a8c <_usbd_ep_pcksize_size+0x40>
    9a7e:	88fb      	ldrh	r3, [r7, #6]
    9a80:	2b08      	cmp	r3, #8
    9a82:	bf8c      	ite	hi
    9a84:	2301      	movhi	r3, #1
    9a86:	2300      	movls	r3, #0
    9a88:	b2db      	uxtb	r3, r3
    9a8a:	e00a      	b.n	9aa2 <_usbd_ep_pcksize_size+0x56>
    9a8c:	2302      	movs	r3, #2
    9a8e:	e008      	b.n	9aa2 <_usbd_ep_pcksize_size+0x56>
    9a90:	2303      	movs	r3, #3
    9a92:	e006      	b.n	9aa2 <_usbd_ep_pcksize_size+0x56>
    9a94:	2304      	movs	r3, #4
    9a96:	e004      	b.n	9aa2 <_usbd_ep_pcksize_size+0x56>
    9a98:	2305      	movs	r3, #5
    9a9a:	e002      	b.n	9aa2 <_usbd_ep_pcksize_size+0x56>
    9a9c:	2306      	movs	r3, #6
    9a9e:	e000      	b.n	9aa2 <_usbd_ep_pcksize_size+0x56>
    9aa0:	2307      	movs	r3, #7
}
    9aa2:	4618      	mov	r0, r3
    9aa4:	370c      	adds	r7, #12
    9aa6:	46bd      	mov	sp, r7
    9aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aac:	4770      	bx	lr
	...

00009ab0 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9ab0:	b480      	push	{r7}
    9ab2:	b085      	sub	sp, #20
    9ab4:	af00      	add	r7, sp, #0
    9ab6:	4603      	mov	r3, r0
    9ab8:	460a      	mov	r2, r1
    9aba:	71fb      	strb	r3, [r7, #7]
    9abc:	4613      	mov	r3, r2
    9abe:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9ac0:	79fb      	ldrb	r3, [r7, #7]
    9ac2:	2b00      	cmp	r3, #0
    9ac4:	d008      	beq.n	9ad8 <_usb_d_dev_ept+0x28>
    9ac6:	79bb      	ldrb	r3, [r7, #6]
    9ac8:	2b00      	cmp	r3, #0
    9aca:	d003      	beq.n	9ad4 <_usb_d_dev_ept+0x24>
    9acc:	79fb      	ldrb	r3, [r7, #7]
    9ace:	3304      	adds	r3, #4
    9ad0:	b2db      	uxtb	r3, r3
    9ad2:	e002      	b.n	9ada <_usb_d_dev_ept+0x2a>
    9ad4:	79fb      	ldrb	r3, [r7, #7]
    9ad6:	e000      	b.n	9ada <_usb_d_dev_ept+0x2a>
    9ad8:	2300      	movs	r3, #0
    9ada:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9adc:	7bfa      	ldrb	r2, [r7, #15]
    9ade:	4613      	mov	r3, r2
    9ae0:	009b      	lsls	r3, r3, #2
    9ae2:	4413      	add	r3, r2
    9ae4:	009b      	lsls	r3, r3, #2
    9ae6:	3310      	adds	r3, #16
    9ae8:	4a04      	ldr	r2, [pc, #16]	; (9afc <_usb_d_dev_ept+0x4c>)
    9aea:	4413      	add	r3, r2
    9aec:	3304      	adds	r3, #4
}
    9aee:	4618      	mov	r0, r3
    9af0:	3714      	adds	r7, #20
    9af2:	46bd      	mov	sp, r7
    9af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9af8:	4770      	bx	lr
    9afa:	bf00      	nop
    9afc:	20000a94 	.word	0x20000a94

00009b00 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9b00:	b580      	push	{r7, lr}
    9b02:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9b04:	2104      	movs	r1, #4
    9b06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b0a:	4b03      	ldr	r3, [pc, #12]	; (9b18 <_usb_d_dev_sof+0x18>)
    9b0c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9b0e:	4b03      	ldr	r3, [pc, #12]	; (9b1c <_usb_d_dev_sof+0x1c>)
    9b10:	681b      	ldr	r3, [r3, #0]
    9b12:	4798      	blx	r3
}
    9b14:	bf00      	nop
    9b16:	bd80      	pop	{r7, pc}
    9b18:	00009177 	.word	0x00009177
    9b1c:	20000a94 	.word	0x20000a94

00009b20 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9b20:	b580      	push	{r7, lr}
    9b22:	b084      	sub	sp, #16
    9b24:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9b26:	2300      	movs	r3, #0
    9b28:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9b2a:	f240 2101 	movw	r1, #513	; 0x201
    9b2e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b32:	4b1a      	ldr	r3, [pc, #104]	; (9b9c <_usb_d_dev_lpmsusp+0x7c>)
    9b34:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9b36:	f240 2101 	movw	r1, #513	; 0x201
    9b3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b3e:	4b18      	ldr	r3, [pc, #96]	; (9ba0 <_usb_d_dev_lpmsusp+0x80>)
    9b40:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9b42:	2170      	movs	r1, #112	; 0x70
    9b44:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b48:	4b16      	ldr	r3, [pc, #88]	; (9ba4 <_usb_d_dev_lpmsusp+0x84>)
    9b4a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9b4c:	2300      	movs	r3, #0
    9b4e:	73fb      	strb	r3, [r7, #15]
    9b50:	e018      	b.n	9b84 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9b52:	7bfb      	ldrb	r3, [r7, #15]
    9b54:	015b      	lsls	r3, r3, #5
    9b56:	4a14      	ldr	r2, [pc, #80]	; (9ba8 <_usb_d_dev_lpmsusp+0x88>)
    9b58:	4413      	add	r3, r2
    9b5a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9b5c:	687b      	ldr	r3, [r7, #4]
    9b5e:	891b      	ldrh	r3, [r3, #8]
    9b60:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9b64:	b2db      	uxtb	r3, r3
    9b66:	2b03      	cmp	r3, #3
    9b68:	d109      	bne.n	9b7e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9b6a:	687b      	ldr	r3, [r7, #4]
    9b6c:	891b      	ldrh	r3, [r3, #8]
    9b6e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9b72:	b29b      	uxth	r3, r3
    9b74:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9b76:	687b      	ldr	r3, [r7, #4]
    9b78:	2200      	movs	r2, #0
    9b7a:	811a      	strh	r2, [r3, #8]
			break;
    9b7c:	e005      	b.n	9b8a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9b7e:	7bfb      	ldrb	r3, [r7, #15]
    9b80:	3301      	adds	r3, #1
    9b82:	73fb      	strb	r3, [r7, #15]
    9b84:	7bfb      	ldrb	r3, [r7, #15]
    9b86:	2b03      	cmp	r3, #3
    9b88:	d9e3      	bls.n	9b52 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9b8a:	4b08      	ldr	r3, [pc, #32]	; (9bac <_usb_d_dev_lpmsusp+0x8c>)
    9b8c:	685b      	ldr	r3, [r3, #4]
    9b8e:	68b9      	ldr	r1, [r7, #8]
    9b90:	2003      	movs	r0, #3
    9b92:	4798      	blx	r3
}
    9b94:	bf00      	nop
    9b96:	3710      	adds	r7, #16
    9b98:	46bd      	mov	sp, r7
    9b9a:	bd80      	pop	{r7, pc}
    9b9c:	00009177 	.word	0x00009177
    9ba0:	000091cd 	.word	0x000091cd
    9ba4:	00009195 	.word	0x00009195
    9ba8:	20000b5c 	.word	0x20000b5c
    9bac:	20000a94 	.word	0x20000a94

00009bb0 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9bb0:	b580      	push	{r7, lr}
    9bb2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9bb4:	2180      	movs	r1, #128	; 0x80
    9bb6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bba:	4b04      	ldr	r3, [pc, #16]	; (9bcc <_usb_d_dev_ramerr+0x1c>)
    9bbc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9bbe:	4b04      	ldr	r3, [pc, #16]	; (9bd0 <_usb_d_dev_ramerr+0x20>)
    9bc0:	685b      	ldr	r3, [r3, #4]
    9bc2:	2100      	movs	r1, #0
    9bc4:	2005      	movs	r0, #5
    9bc6:	4798      	blx	r3
}
    9bc8:	bf00      	nop
    9bca:	bd80      	pop	{r7, pc}
    9bcc:	00009177 	.word	0x00009177
    9bd0:	20000a94 	.word	0x20000a94

00009bd4 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9bd4:	b580      	push	{r7, lr}
    9bd6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9bd8:	2170      	movs	r1, #112	; 0x70
    9bda:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bde:	4b0b      	ldr	r3, [pc, #44]	; (9c0c <_usb_d_dev_wakeup+0x38>)
    9be0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9be2:	2170      	movs	r1, #112	; 0x70
    9be4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9be8:	4b09      	ldr	r3, [pc, #36]	; (9c10 <_usb_d_dev_wakeup+0x3c>)
    9bea:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9bec:	f240 2101 	movw	r1, #513	; 0x201
    9bf0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bf4:	4b07      	ldr	r3, [pc, #28]	; (9c14 <_usb_d_dev_wakeup+0x40>)
    9bf6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9bf8:	2000      	movs	r0, #0
    9bfa:	4b07      	ldr	r3, [pc, #28]	; (9c18 <_usb_d_dev_wakeup+0x44>)
    9bfc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9bfe:	4b07      	ldr	r3, [pc, #28]	; (9c1c <_usb_d_dev_wakeup+0x48>)
    9c00:	685b      	ldr	r3, [r3, #4]
    9c02:	2100      	movs	r1, #0
    9c04:	2002      	movs	r0, #2
    9c06:	4798      	blx	r3
}
    9c08:	bf00      	nop
    9c0a:	bd80      	pop	{r7, pc}
    9c0c:	00009177 	.word	0x00009177
    9c10:	000091cd 	.word	0x000091cd
    9c14:	00009195 	.word	0x00009195
    9c18:	00009475 	.word	0x00009475
    9c1c:	20000a94 	.word	0x20000a94

00009c20 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9c20:	b580      	push	{r7, lr}
    9c22:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9c24:	2200      	movs	r2, #0
    9c26:	2100      	movs	r1, #0
    9c28:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c2c:	4b0d      	ldr	r3, [pc, #52]	; (9c64 <_usb_d_dev_reset+0x44>)
    9c2e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9c30:	2108      	movs	r1, #8
    9c32:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c36:	4b0c      	ldr	r3, [pc, #48]	; (9c68 <_usb_d_dev_reset+0x48>)
    9c38:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9c3a:	2170      	movs	r1, #112	; 0x70
    9c3c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c40:	4b0a      	ldr	r3, [pc, #40]	; (9c6c <_usb_d_dev_reset+0x4c>)
    9c42:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9c44:	f240 2101 	movw	r1, #513	; 0x201
    9c48:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c4c:	4b08      	ldr	r3, [pc, #32]	; (9c70 <_usb_d_dev_reset+0x50>)
    9c4e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9c50:	4b08      	ldr	r3, [pc, #32]	; (9c74 <_usb_d_dev_reset+0x54>)
    9c52:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9c54:	4b08      	ldr	r3, [pc, #32]	; (9c78 <_usb_d_dev_reset+0x58>)
    9c56:	685b      	ldr	r3, [r3, #4]
    9c58:	2100      	movs	r1, #0
    9c5a:	2001      	movs	r0, #1
    9c5c:	4798      	blx	r3
}
    9c5e:	bf00      	nop
    9c60:	bd80      	pop	{r7, pc}
    9c62:	bf00      	nop
    9c64:	0000910d 	.word	0x0000910d
    9c68:	00009177 	.word	0x00009177
    9c6c:	000091cd 	.word	0x000091cd
    9c70:	00009195 	.word	0x00009195
    9c74:	0000a7dd 	.word	0x0000a7dd
    9c78:	20000a94 	.word	0x20000a94

00009c7c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9c7c:	b580      	push	{r7, lr}
    9c7e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9c80:	f240 2101 	movw	r1, #513	; 0x201
    9c84:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c88:	4b09      	ldr	r3, [pc, #36]	; (9cb0 <_usb_d_dev_suspend+0x34>)
    9c8a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9c8c:	f240 2101 	movw	r1, #513	; 0x201
    9c90:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c94:	4b07      	ldr	r3, [pc, #28]	; (9cb4 <_usb_d_dev_suspend+0x38>)
    9c96:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9c98:	2170      	movs	r1, #112	; 0x70
    9c9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c9e:	4b06      	ldr	r3, [pc, #24]	; (9cb8 <_usb_d_dev_suspend+0x3c>)
    9ca0:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9ca2:	4b06      	ldr	r3, [pc, #24]	; (9cbc <_usb_d_dev_suspend+0x40>)
    9ca4:	685b      	ldr	r3, [r3, #4]
    9ca6:	2100      	movs	r1, #0
    9ca8:	2004      	movs	r0, #4
    9caa:	4798      	blx	r3
}
    9cac:	bf00      	nop
    9cae:	bd80      	pop	{r7, pc}
    9cb0:	00009177 	.word	0x00009177
    9cb4:	000091cd 	.word	0x000091cd
    9cb8:	00009195 	.word	0x00009195
    9cbc:	20000a94 	.word	0x20000a94

00009cc0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9cc0:	b580      	push	{r7, lr}
    9cc2:	b082      	sub	sp, #8
    9cc4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9cc6:	2301      	movs	r3, #1
    9cc8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9cca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cce:	4b22      	ldr	r3, [pc, #136]	; (9d58 <_usb_d_dev_handle_nep+0x98>)
    9cd0:	4798      	blx	r3
    9cd2:	4603      	mov	r3, r0
    9cd4:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9cd6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cda:	4b20      	ldr	r3, [pc, #128]	; (9d5c <_usb_d_dev_handle_nep+0x9c>)
    9cdc:	4798      	blx	r3
    9cde:	4603      	mov	r3, r0
    9ce0:	461a      	mov	r2, r3
    9ce2:	88bb      	ldrh	r3, [r7, #4]
    9ce4:	4013      	ands	r3, r2
    9ce6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9ce8:	88bb      	ldrh	r3, [r7, #4]
    9cea:	f003 0304 	and.w	r3, r3, #4
    9cee:	2b00      	cmp	r3, #0
    9cf0:	d003      	beq.n	9cfa <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9cf2:	4b1b      	ldr	r3, [pc, #108]	; (9d60 <_usb_d_dev_handle_nep+0xa0>)
    9cf4:	4798      	blx	r3
		return true;
    9cf6:	2301      	movs	r3, #1
    9cf8:	e02a      	b.n	9d50 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9cfa:	88bb      	ldrh	r3, [r7, #4]
    9cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9d00:	2b00      	cmp	r3, #0
    9d02:	d002      	beq.n	9d0a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9d04:	4b17      	ldr	r3, [pc, #92]	; (9d64 <_usb_d_dev_handle_nep+0xa4>)
    9d06:	4798      	blx	r3
    9d08:	e021      	b.n	9d4e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9d0a:	88bb      	ldrh	r3, [r7, #4]
    9d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9d10:	2b00      	cmp	r3, #0
    9d12:	d002      	beq.n	9d1a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9d14:	4b14      	ldr	r3, [pc, #80]	; (9d68 <_usb_d_dev_handle_nep+0xa8>)
    9d16:	4798      	blx	r3
    9d18:	e019      	b.n	9d4e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9d1a:	88bb      	ldrh	r3, [r7, #4]
    9d1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9d20:	2b00      	cmp	r3, #0
    9d22:	d002      	beq.n	9d2a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9d24:	4b11      	ldr	r3, [pc, #68]	; (9d6c <_usb_d_dev_handle_nep+0xac>)
    9d26:	4798      	blx	r3
    9d28:	e011      	b.n	9d4e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9d2a:	88bb      	ldrh	r3, [r7, #4]
    9d2c:	f003 0308 	and.w	r3, r3, #8
    9d30:	2b00      	cmp	r3, #0
    9d32:	d002      	beq.n	9d3a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9d34:	4b0e      	ldr	r3, [pc, #56]	; (9d70 <_usb_d_dev_handle_nep+0xb0>)
    9d36:	4798      	blx	r3
    9d38:	e009      	b.n	9d4e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9d3a:	88bb      	ldrh	r3, [r7, #4]
    9d3c:	f003 0301 	and.w	r3, r3, #1
    9d40:	2b00      	cmp	r3, #0
    9d42:	d002      	beq.n	9d4a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9d44:	4b0b      	ldr	r3, [pc, #44]	; (9d74 <_usb_d_dev_handle_nep+0xb4>)
    9d46:	4798      	blx	r3
    9d48:	e001      	b.n	9d4e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9d4a:	2300      	movs	r3, #0
    9d4c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9d4e:	79fb      	ldrb	r3, [r7, #7]
}
    9d50:	4618      	mov	r0, r3
    9d52:	3708      	adds	r7, #8
    9d54:	46bd      	mov	sp, r7
    9d56:	bd80      	pop	{r7, pc}
    9d58:	0000915d 	.word	0x0000915d
    9d5c:	000091b3 	.word	0x000091b3
    9d60:	00009b01 	.word	0x00009b01
    9d64:	00009b21 	.word	0x00009b21
    9d68:	00009bb1 	.word	0x00009bb1
    9d6c:	00009bd5 	.word	0x00009bd5
    9d70:	00009c21 	.word	0x00009c21
    9d74:	00009c7d 	.word	0x00009c7d

00009d78 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9d78:	b590      	push	{r4, r7, lr}
    9d7a:	b089      	sub	sp, #36	; 0x24
    9d7c:	af00      	add	r7, sp, #0
    9d7e:	6078      	str	r0, [r7, #4]
    9d80:	460b      	mov	r3, r1
    9d82:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9d84:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d88:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9d8a:	687b      	ldr	r3, [r7, #4]
    9d8c:	7c9b      	ldrb	r3, [r3, #18]
    9d8e:	f003 030f 	and.w	r3, r3, #15
    9d92:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9d94:	7dfb      	ldrb	r3, [r7, #23]
    9d96:	015b      	lsls	r3, r3, #5
    9d98:	4a73      	ldr	r2, [pc, #460]	; (9f68 <_usb_d_dev_in_next+0x1f0>)
    9d9a:	4413      	add	r3, r2
    9d9c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9d9e:	78fb      	ldrb	r3, [r7, #3]
    9da0:	2b00      	cmp	r3, #0
    9da2:	d006      	beq.n	9db2 <_usb_d_dev_in_next+0x3a>
    9da4:	693b      	ldr	r3, [r7, #16]
    9da6:	3310      	adds	r3, #16
    9da8:	685b      	ldr	r3, [r3, #4]
    9daa:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9dae:	b29b      	uxth	r3, r3
    9db0:	e000      	b.n	9db4 <_usb_d_dev_in_next+0x3c>
    9db2:	2300      	movs	r3, #0
    9db4:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9db6:	687b      	ldr	r3, [r7, #4]
    9db8:	8a1b      	ldrh	r3, [r3, #16]
    9dba:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9dbe:	4293      	cmp	r3, r2
    9dc0:	d103      	bne.n	9dca <_usb_d_dev_in_next+0x52>
    9dc2:	687b      	ldr	r3, [r7, #4]
    9dc4:	8a1b      	ldrh	r3, [r3, #16]
    9dc6:	b21b      	sxth	r3, r3
    9dc8:	e004      	b.n	9dd4 <_usb_d_dev_in_next+0x5c>
    9dca:	687b      	ldr	r3, [r7, #4]
    9dcc:	8a1b      	ldrh	r3, [r3, #16]
    9dce:	3b01      	subs	r3, #1
    9dd0:	b29b      	uxth	r3, r3
    9dd2:	b21b      	sxth	r3, r3
    9dd4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9dd8:	4013      	ands	r3, r2
    9dda:	b21b      	sxth	r3, r3
    9ddc:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9dde:	2300      	movs	r3, #0
    9de0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9de2:	687b      	ldr	r3, [r7, #4]
    9de4:	7cdb      	ldrb	r3, [r3, #19]
    9de6:	f003 0307 	and.w	r3, r3, #7
    9dea:	b2db      	uxtb	r3, r3
    9dec:	2b01      	cmp	r3, #1
    9dee:	bf0c      	ite	eq
    9df0:	2301      	moveq	r3, #1
    9df2:	2300      	movne	r3, #0
    9df4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9df6:	78fb      	ldrb	r3, [r7, #3]
    9df8:	2b00      	cmp	r3, #0
    9dfa:	d004      	beq.n	9e06 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9dfc:	7dfb      	ldrb	r3, [r7, #23]
    9dfe:	2101      	movs	r1, #1
    9e00:	4618      	mov	r0, r3
    9e02:	4b5a      	ldr	r3, [pc, #360]	; (9f6c <_usb_d_dev_in_next+0x1f4>)
    9e04:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9e06:	687b      	ldr	r3, [r7, #4]
    9e08:	689a      	ldr	r2, [r3, #8]
    9e0a:	89fb      	ldrh	r3, [r7, #14]
    9e0c:	441a      	add	r2, r3
    9e0e:	687b      	ldr	r3, [r7, #4]
    9e10:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9e12:	687b      	ldr	r3, [r7, #4]
    9e14:	689a      	ldr	r2, [r3, #8]
    9e16:	687b      	ldr	r3, [r7, #4]
    9e18:	685b      	ldr	r3, [r3, #4]
    9e1a:	429a      	cmp	r2, r3
    9e1c:	d243      	bcs.n	9ea6 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9e1e:	687b      	ldr	r3, [r7, #4]
    9e20:	685b      	ldr	r3, [r3, #4]
    9e22:	b29a      	uxth	r2, r3
    9e24:	687b      	ldr	r3, [r7, #4]
    9e26:	689b      	ldr	r3, [r3, #8]
    9e28:	b29b      	uxth	r3, r3
    9e2a:	1ad3      	subs	r3, r2, r3
    9e2c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9e2e:	687b      	ldr	r3, [r7, #4]
    9e30:	7cdb      	ldrb	r3, [r3, #19]
    9e32:	f003 0320 	and.w	r3, r3, #32
    9e36:	b2db      	uxtb	r3, r3
    9e38:	2b00      	cmp	r3, #0
    9e3a:	d01b      	beq.n	9e74 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9e3c:	687b      	ldr	r3, [r7, #4]
    9e3e:	8a1b      	ldrh	r3, [r3, #16]
    9e40:	8bfa      	ldrh	r2, [r7, #30]
    9e42:	429a      	cmp	r2, r3
    9e44:	d902      	bls.n	9e4c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9e46:	687b      	ldr	r3, [r7, #4]
    9e48:	8a1b      	ldrh	r3, [r3, #16]
    9e4a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9e4c:	687b      	ldr	r3, [r7, #4]
    9e4e:	68d8      	ldr	r0, [r3, #12]
    9e50:	687b      	ldr	r3, [r7, #4]
    9e52:	681a      	ldr	r2, [r3, #0]
    9e54:	687b      	ldr	r3, [r7, #4]
    9e56:	689b      	ldr	r3, [r3, #8]
    9e58:	4413      	add	r3, r2
    9e5a:	8bfa      	ldrh	r2, [r7, #30]
    9e5c:	4619      	mov	r1, r3
    9e5e:	4b44      	ldr	r3, [pc, #272]	; (9f70 <_usb_d_dev_in_next+0x1f8>)
    9e60:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9e62:	687b      	ldr	r3, [r7, #4]
    9e64:	68db      	ldr	r3, [r3, #12]
    9e66:	461a      	mov	r2, r3
    9e68:	7dfb      	ldrb	r3, [r7, #23]
    9e6a:	2101      	movs	r1, #1
    9e6c:	4618      	mov	r0, r3
    9e6e:	4b41      	ldr	r3, [pc, #260]	; (9f74 <_usb_d_dev_in_next+0x1fc>)
    9e70:	4798      	blx	r3
    9e72:	e011      	b.n	9e98 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9e74:	8bfb      	ldrh	r3, [r7, #30]
    9e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9e7a:	d902      	bls.n	9e82 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9e80:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9e82:	687b      	ldr	r3, [r7, #4]
    9e84:	681a      	ldr	r2, [r3, #0]
    9e86:	687b      	ldr	r3, [r7, #4]
    9e88:	689b      	ldr	r3, [r3, #8]
    9e8a:	4413      	add	r3, r2
    9e8c:	461a      	mov	r2, r3
    9e8e:	7dfb      	ldrb	r3, [r7, #23]
    9e90:	2101      	movs	r1, #1
    9e92:	4618      	mov	r0, r3
    9e94:	4b37      	ldr	r3, [pc, #220]	; (9f74 <_usb_d_dev_in_next+0x1fc>)
    9e96:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9e98:	8bfa      	ldrh	r2, [r7, #30]
    9e9a:	7df8      	ldrb	r0, [r7, #23]
    9e9c:	2300      	movs	r3, #0
    9e9e:	2101      	movs	r1, #1
    9ea0:	4c35      	ldr	r4, [pc, #212]	; (9f78 <_usb_d_dev_in_next+0x200>)
    9ea2:	47a0      	blx	r4
		goto _in_tx_exec;
    9ea4:	e041      	b.n	9f2a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9ea6:	687b      	ldr	r3, [r7, #4]
    9ea8:	7cdb      	ldrb	r3, [r3, #19]
    9eaa:	f003 0310 	and.w	r3, r3, #16
    9eae:	b2db      	uxtb	r3, r3
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	d00b      	beq.n	9ecc <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9eb4:	687a      	ldr	r2, [r7, #4]
    9eb6:	7cd3      	ldrb	r3, [r2, #19]
    9eb8:	f36f 1304 	bfc	r3, #4, #1
    9ebc:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9ebe:	7df8      	ldrb	r0, [r7, #23]
    9ec0:	2300      	movs	r3, #0
    9ec2:	2200      	movs	r2, #0
    9ec4:	2101      	movs	r1, #1
    9ec6:	4c2c      	ldr	r4, [pc, #176]	; (9f78 <_usb_d_dev_in_next+0x200>)
    9ec8:	47a0      	blx	r4
		goto _in_tx_exec;
    9eca:	e02e      	b.n	9f2a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9ecc:	7afb      	ldrb	r3, [r7, #11]
    9ece:	2b00      	cmp	r3, #0
    9ed0:	d006      	beq.n	9ee0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9ed2:	7dfb      	ldrb	r3, [r7, #23]
    9ed4:	224b      	movs	r2, #75	; 0x4b
    9ed6:	4619      	mov	r1, r3
    9ed8:	69b8      	ldr	r0, [r7, #24]
    9eda:	4b28      	ldr	r3, [pc, #160]	; (9f7c <_usb_d_dev_in_next+0x204>)
    9edc:	4798      	blx	r3
    9ede:	e005      	b.n	9eec <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9ee0:	7dfb      	ldrb	r3, [r7, #23]
    9ee2:	224a      	movs	r2, #74	; 0x4a
    9ee4:	4619      	mov	r1, r3
    9ee6:	69b8      	ldr	r0, [r7, #24]
    9ee8:	4b24      	ldr	r3, [pc, #144]	; (9f7c <_usb_d_dev_in_next+0x204>)
    9eea:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9eec:	687b      	ldr	r3, [r7, #4]
    9eee:	8a1b      	ldrh	r3, [r3, #16]
    9ef0:	89ba      	ldrh	r2, [r7, #12]
    9ef2:	429a      	cmp	r2, r3
    9ef4:	d114      	bne.n	9f20 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9ef6:	687a      	ldr	r2, [r7, #4]
    9ef8:	7cd3      	ldrb	r3, [r2, #19]
    9efa:	f36f 1386 	bfc	r3, #6, #1
    9efe:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9f00:	4b1f      	ldr	r3, [pc, #124]	; (9f80 <_usb_d_dev_in_next+0x208>)
    9f02:	68db      	ldr	r3, [r3, #12]
    9f04:	687a      	ldr	r2, [r7, #4]
    9f06:	7c90      	ldrb	r0, [r2, #18]
    9f08:	687a      	ldr	r2, [r7, #4]
    9f0a:	6892      	ldr	r2, [r2, #8]
    9f0c:	4611      	mov	r1, r2
    9f0e:	4798      	blx	r3
    9f10:	4603      	mov	r3, r0
    9f12:	2b00      	cmp	r3, #0
    9f14:	d124      	bne.n	9f60 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9f16:	687a      	ldr	r2, [r7, #4]
    9f18:	7cd3      	ldrb	r3, [r2, #19]
    9f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f1e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9f20:	2100      	movs	r1, #0
    9f22:	6878      	ldr	r0, [r7, #4]
    9f24:	4b17      	ldr	r3, [pc, #92]	; (9f84 <_usb_d_dev_in_next+0x20c>)
    9f26:	4798      	blx	r3
	return;
    9f28:	e01b      	b.n	9f62 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9f2a:	78fb      	ldrb	r3, [r7, #3]
    9f2c:	f083 0301 	eor.w	r3, r3, #1
    9f30:	b2db      	uxtb	r3, r3
    9f32:	2b00      	cmp	r3, #0
    9f34:	d00d      	beq.n	9f52 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9f36:	7afb      	ldrb	r3, [r7, #11]
    9f38:	2b00      	cmp	r3, #0
    9f3a:	d002      	beq.n	9f42 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9f3c:	234e      	movs	r3, #78	; 0x4e
    9f3e:	777b      	strb	r3, [r7, #29]
    9f40:	e001      	b.n	9f46 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9f42:	234a      	movs	r3, #74	; 0x4a
    9f44:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9f46:	7f7a      	ldrb	r2, [r7, #29]
    9f48:	7dfb      	ldrb	r3, [r7, #23]
    9f4a:	4619      	mov	r1, r3
    9f4c:	69b8      	ldr	r0, [r7, #24]
    9f4e:	4b0e      	ldr	r3, [pc, #56]	; (9f88 <_usb_d_dev_in_next+0x210>)
    9f50:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9f52:	7dfb      	ldrb	r3, [r7, #23]
    9f54:	2201      	movs	r2, #1
    9f56:	2101      	movs	r1, #1
    9f58:	4618      	mov	r0, r3
    9f5a:	4b0c      	ldr	r3, [pc, #48]	; (9f8c <_usb_d_dev_in_next+0x214>)
    9f5c:	4798      	blx	r3
    9f5e:	e000      	b.n	9f62 <_usb_d_dev_in_next+0x1ea>
			return;
    9f60:	bf00      	nop
}
    9f62:	3724      	adds	r7, #36	; 0x24
    9f64:	46bd      	mov	sp, r7
    9f66:	bd90      	pop	{r4, r7, pc}
    9f68:	20000b5c 	.word	0x20000b5c
    9f6c:	00009771 	.word	0x00009771
    9f70:	0000f959 	.word	0x0000f959
    9f74:	0000979d 	.word	0x0000979d
    9f78:	000098e5 	.word	0x000098e5
    9f7c:	0000907d 	.word	0x0000907d
    9f80:	20000a94 	.word	0x20000a94
    9f84:	0000b0a1 	.word	0x0000b0a1
    9f88:	00009051 	.word	0x00009051
    9f8c:	0000999d 	.word	0x0000999d

00009f90 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9f90:	b590      	push	{r4, r7, lr}
    9f92:	b08b      	sub	sp, #44	; 0x2c
    9f94:	af00      	add	r7, sp, #0
    9f96:	6078      	str	r0, [r7, #4]
    9f98:	460b      	mov	r3, r1
    9f9a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9f9c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9fa0:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    9fa2:	687b      	ldr	r3, [r7, #4]
    9fa4:	7c9b      	ldrb	r3, [r3, #18]
    9fa6:	f003 030f 	and.w	r3, r3, #15
    9faa:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9fac:	7ffb      	ldrb	r3, [r7, #31]
    9fae:	015b      	lsls	r3, r3, #5
    9fb0:	4a94      	ldr	r2, [pc, #592]	; (a204 <_usb_d_dev_out_next+0x274>)
    9fb2:	4413      	add	r3, r2
    9fb4:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9fb6:	78fb      	ldrb	r3, [r7, #3]
    9fb8:	2b00      	cmp	r3, #0
    9fba:	d005      	beq.n	9fc8 <_usb_d_dev_out_next+0x38>
    9fbc:	69bb      	ldr	r3, [r7, #24]
    9fbe:	685b      	ldr	r3, [r3, #4]
    9fc0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9fc4:	b29b      	uxth	r3, r3
    9fc6:	e000      	b.n	9fca <_usb_d_dev_out_next+0x3a>
    9fc8:	2300      	movs	r3, #0
    9fca:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9fcc:	78fb      	ldrb	r3, [r7, #3]
    9fce:	2b00      	cmp	r3, #0
    9fd0:	d005      	beq.n	9fde <_usb_d_dev_out_next+0x4e>
    9fd2:	69bb      	ldr	r3, [r7, #24]
    9fd4:	685b      	ldr	r3, [r3, #4]
    9fd6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9fda:	b29b      	uxth	r3, r3
    9fdc:	e000      	b.n	9fe0 <_usb_d_dev_out_next+0x50>
    9fde:	2300      	movs	r3, #0
    9fe0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9fe2:	687b      	ldr	r3, [r7, #4]
    9fe4:	8a1b      	ldrh	r3, [r3, #16]
    9fe6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9fea:	4293      	cmp	r3, r2
    9fec:	d004      	beq.n	9ff8 <_usb_d_dev_out_next+0x68>
    9fee:	687b      	ldr	r3, [r7, #4]
    9ff0:	8a1b      	ldrh	r3, [r3, #16]
    9ff2:	3b01      	subs	r3, #1
    9ff4:	b29b      	uxth	r3, r3
    9ff6:	e001      	b.n	9ffc <_usb_d_dev_out_next+0x6c>
    9ff8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9ffc:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9ffe:	8aba      	ldrh	r2, [r7, #20]
    a000:	8a7b      	ldrh	r3, [r7, #18]
    a002:	4013      	ands	r3, r2
    a004:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a006:	687b      	ldr	r3, [r7, #4]
    a008:	7cdb      	ldrb	r3, [r3, #19]
    a00a:	f003 0307 	and.w	r3, r3, #7
    a00e:	b2db      	uxtb	r3, r3
    a010:	2b01      	cmp	r3, #1
    a012:	bf0c      	ite	eq
    a014:	2301      	moveq	r3, #1
    a016:	2300      	movne	r3, #0
    a018:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a01a:	78fb      	ldrb	r3, [r7, #3]
    a01c:	2b00      	cmp	r3, #0
    a01e:	d004      	beq.n	a02a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a020:	7ffb      	ldrb	r3, [r7, #31]
    a022:	2100      	movs	r1, #0
    a024:	4618      	mov	r0, r3
    a026:	4b78      	ldr	r3, [pc, #480]	; (a208 <_usb_d_dev_out_next+0x278>)
    a028:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a02a:	687b      	ldr	r3, [r7, #4]
    a02c:	7cdb      	ldrb	r3, [r3, #19]
    a02e:	f003 0320 	and.w	r3, r3, #32
    a032:	b2db      	uxtb	r3, r3
    a034:	2b00      	cmp	r3, #0
    a036:	d01c      	beq.n	a072 <_usb_d_dev_out_next+0xe2>
    a038:	687b      	ldr	r3, [r7, #4]
    a03a:	685b      	ldr	r3, [r3, #4]
    a03c:	2b00      	cmp	r3, #0
    a03e:	d018      	beq.n	a072 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a040:	687b      	ldr	r3, [r7, #4]
    a042:	685b      	ldr	r3, [r3, #4]
    a044:	b29a      	uxth	r2, r3
    a046:	687b      	ldr	r3, [r7, #4]
    a048:	689b      	ldr	r3, [r3, #8]
    a04a:	b29b      	uxth	r3, r3
    a04c:	1ad3      	subs	r3, r2, r3
    a04e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a050:	687b      	ldr	r3, [r7, #4]
    a052:	681a      	ldr	r2, [r3, #0]
    a054:	687b      	ldr	r3, [r7, #4]
    a056:	689b      	ldr	r3, [r3, #8]
    a058:	18d0      	adds	r0, r2, r3
    a05a:	687b      	ldr	r3, [r7, #4]
    a05c:	68d9      	ldr	r1, [r3, #12]
    a05e:	89ba      	ldrh	r2, [r7, #12]
    a060:	8a3b      	ldrh	r3, [r7, #16]
    a062:	429a      	cmp	r2, r3
    a064:	d901      	bls.n	a06a <_usb_d_dev_out_next+0xda>
    a066:	8a3b      	ldrh	r3, [r7, #16]
    a068:	e000      	b.n	a06c <_usb_d_dev_out_next+0xdc>
    a06a:	89bb      	ldrh	r3, [r7, #12]
    a06c:	461a      	mov	r2, r3
    a06e:	4b67      	ldr	r3, [pc, #412]	; (a20c <_usb_d_dev_out_next+0x27c>)
    a070:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	685b      	ldr	r3, [r3, #4]
    a076:	2b00      	cmp	r3, #0
    a078:	d121      	bne.n	a0be <_usb_d_dev_out_next+0x12e>
    a07a:	687b      	ldr	r3, [r7, #4]
    a07c:	7cdb      	ldrb	r3, [r3, #19]
    a07e:	f003 0310 	and.w	r3, r3, #16
    a082:	b2db      	uxtb	r3, r3
    a084:	2b00      	cmp	r3, #0
    a086:	d01a      	beq.n	a0be <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a088:	687a      	ldr	r2, [r7, #4]
    a08a:	7cd3      	ldrb	r3, [r2, #19]
    a08c:	f36f 1304 	bfc	r3, #4, #1
    a090:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a092:	687a      	ldr	r2, [r7, #4]
    a094:	7cd3      	ldrb	r3, [r2, #19]
    a096:	f043 0320 	orr.w	r3, r3, #32
    a09a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a09c:	687b      	ldr	r3, [r7, #4]
    a09e:	68db      	ldr	r3, [r3, #12]
    a0a0:	461a      	mov	r2, r3
    a0a2:	7ffb      	ldrb	r3, [r7, #31]
    a0a4:	2100      	movs	r1, #0
    a0a6:	4618      	mov	r0, r3
    a0a8:	4b59      	ldr	r3, [pc, #356]	; (a210 <_usb_d_dev_out_next+0x280>)
    a0aa:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a0ac:	687b      	ldr	r3, [r7, #4]
    a0ae:	8a1b      	ldrh	r3, [r3, #16]
    a0b0:	461a      	mov	r2, r3
    a0b2:	7ff8      	ldrb	r0, [r7, #31]
    a0b4:	2300      	movs	r3, #0
    a0b6:	2100      	movs	r1, #0
    a0b8:	4c56      	ldr	r4, [pc, #344]	; (a214 <_usb_d_dev_out_next+0x284>)
    a0ba:	47a0      	blx	r4
		goto _out_rx_exec;
    a0bc:	e090      	b.n	a1e0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a0be:	78fb      	ldrb	r3, [r7, #3]
    a0c0:	2b00      	cmp	r3, #0
    a0c2:	d010      	beq.n	a0e6 <_usb_d_dev_out_next+0x156>
    a0c4:	687b      	ldr	r3, [r7, #4]
    a0c6:	8a1b      	ldrh	r3, [r3, #16]
    a0c8:	8a3a      	ldrh	r2, [r7, #16]
    a0ca:	429a      	cmp	r2, r3
    a0cc:	d20b      	bcs.n	a0e6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a0ce:	687a      	ldr	r2, [r7, #4]
    a0d0:	7cd3      	ldrb	r3, [r2, #19]
    a0d2:	f36f 1304 	bfc	r3, #4, #1
    a0d6:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a0d8:	687b      	ldr	r3, [r7, #4]
    a0da:	689a      	ldr	r2, [r3, #8]
    a0dc:	8abb      	ldrh	r3, [r7, #20]
    a0de:	441a      	add	r2, r3
    a0e0:	687b      	ldr	r3, [r7, #4]
    a0e2:	609a      	str	r2, [r3, #8]
    a0e4:	e05c      	b.n	a1a0 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a0e6:	687b      	ldr	r3, [r7, #4]
    a0e8:	689a      	ldr	r2, [r3, #8]
    a0ea:	8afb      	ldrh	r3, [r7, #22]
    a0ec:	441a      	add	r2, r3
    a0ee:	687b      	ldr	r3, [r7, #4]
    a0f0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a0f2:	687b      	ldr	r3, [r7, #4]
    a0f4:	689a      	ldr	r2, [r3, #8]
    a0f6:	687b      	ldr	r3, [r7, #4]
    a0f8:	685b      	ldr	r3, [r3, #4]
    a0fa:	429a      	cmp	r2, r3
    a0fc:	d250      	bcs.n	a1a0 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a0fe:	687b      	ldr	r3, [r7, #4]
    a100:	685b      	ldr	r3, [r3, #4]
    a102:	b29a      	uxth	r2, r3
    a104:	687b      	ldr	r3, [r7, #4]
    a106:	689b      	ldr	r3, [r3, #8]
    a108:	b29b      	uxth	r3, r3
    a10a:	1ad3      	subs	r3, r2, r3
    a10c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a10e:	687b      	ldr	r3, [r7, #4]
    a110:	7cdb      	ldrb	r3, [r3, #19]
    a112:	f003 0320 	and.w	r3, r3, #32
    a116:	b2db      	uxtb	r3, r3
    a118:	2b00      	cmp	r3, #0
    a11a:	d010      	beq.n	a13e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a11c:	687b      	ldr	r3, [r7, #4]
    a11e:	8a1b      	ldrh	r3, [r3, #16]
    a120:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a122:	429a      	cmp	r2, r3
    a124:	d902      	bls.n	a12c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a126:	687b      	ldr	r3, [r7, #4]
    a128:	8a1b      	ldrh	r3, [r3, #16]
    a12a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a12c:	687b      	ldr	r3, [r7, #4]
    a12e:	68db      	ldr	r3, [r3, #12]
    a130:	461a      	mov	r2, r3
    a132:	7ffb      	ldrb	r3, [r7, #31]
    a134:	2100      	movs	r1, #0
    a136:	4618      	mov	r0, r3
    a138:	4b35      	ldr	r3, [pc, #212]	; (a210 <_usb_d_dev_out_next+0x280>)
    a13a:	4798      	blx	r3
    a13c:	e029      	b.n	a192 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a13e:	687b      	ldr	r3, [r7, #4]
    a140:	8a1b      	ldrh	r3, [r3, #16]
    a142:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a144:	429a      	cmp	r2, r3
    a146:	d90f      	bls.n	a168 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a148:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a14a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a14e:	d903      	bls.n	a158 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a154:	84fb      	strh	r3, [r7, #38]	; 0x26
    a156:	e011      	b.n	a17c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a158:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a15a:	8a7b      	ldrh	r3, [r7, #18]
    a15c:	4013      	ands	r3, r2
    a15e:	b29b      	uxth	r3, r3
    a160:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a162:	1ad3      	subs	r3, r2, r3
    a164:	84fb      	strh	r3, [r7, #38]	; 0x26
    a166:	e009      	b.n	a17c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a168:	687b      	ldr	r3, [r7, #4]
    a16a:	8a1b      	ldrh	r3, [r3, #16]
    a16c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a16e:	429a      	cmp	r2, r3
    a170:	d204      	bcs.n	a17c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a172:	687a      	ldr	r2, [r7, #4]
    a174:	7cd3      	ldrb	r3, [r2, #19]
    a176:	f043 0320 	orr.w	r3, r3, #32
    a17a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a17c:	687b      	ldr	r3, [r7, #4]
    a17e:	681a      	ldr	r2, [r3, #0]
    a180:	687b      	ldr	r3, [r7, #4]
    a182:	689b      	ldr	r3, [r3, #8]
    a184:	4413      	add	r3, r2
    a186:	461a      	mov	r2, r3
    a188:	7ffb      	ldrb	r3, [r7, #31]
    a18a:	2100      	movs	r1, #0
    a18c:	4618      	mov	r0, r3
    a18e:	4b20      	ldr	r3, [pc, #128]	; (a210 <_usb_d_dev_out_next+0x280>)
    a190:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a192:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a194:	7ff8      	ldrb	r0, [r7, #31]
    a196:	2300      	movs	r3, #0
    a198:	2100      	movs	r1, #0
    a19a:	4c1e      	ldr	r4, [pc, #120]	; (a214 <_usb_d_dev_out_next+0x284>)
    a19c:	47a0      	blx	r4
			goto _out_rx_exec;
    a19e:	e01f      	b.n	a1e0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a1a0:	7bfb      	ldrb	r3, [r7, #15]
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	d006      	beq.n	a1b4 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a1a6:	7ffb      	ldrb	r3, [r7, #31]
    a1a8:	222d      	movs	r2, #45	; 0x2d
    a1aa:	4619      	mov	r1, r3
    a1ac:	6a38      	ldr	r0, [r7, #32]
    a1ae:	4b1a      	ldr	r3, [pc, #104]	; (a218 <_usb_d_dev_out_next+0x288>)
    a1b0:	4798      	blx	r3
    a1b2:	e005      	b.n	a1c0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a1b4:	7ffb      	ldrb	r3, [r7, #31]
    a1b6:	2225      	movs	r2, #37	; 0x25
    a1b8:	4619      	mov	r1, r3
    a1ba:	6a38      	ldr	r0, [r7, #32]
    a1bc:	4b16      	ldr	r3, [pc, #88]	; (a218 <_usb_d_dev_out_next+0x288>)
    a1be:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a1c0:	7ffb      	ldrb	r3, [r7, #31]
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	d107      	bne.n	a1d6 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a1c6:	687b      	ldr	r3, [r7, #4]
    a1c8:	68db      	ldr	r3, [r3, #12]
    a1ca:	461a      	mov	r2, r3
    a1cc:	7ffb      	ldrb	r3, [r7, #31]
    a1ce:	2100      	movs	r1, #0
    a1d0:	4618      	mov	r0, r3
    a1d2:	4b0f      	ldr	r3, [pc, #60]	; (a210 <_usb_d_dev_out_next+0x280>)
    a1d4:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a1d6:	2100      	movs	r1, #0
    a1d8:	6878      	ldr	r0, [r7, #4]
    a1da:	4b10      	ldr	r3, [pc, #64]	; (a21c <_usb_d_dev_out_next+0x28c>)
    a1dc:	4798      	blx	r3
	return;
    a1de:	e031      	b.n	a244 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a1e0:	78fb      	ldrb	r3, [r7, #3]
    a1e2:	f083 0301 	eor.w	r3, r3, #1
    a1e6:	b2db      	uxtb	r3, r3
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d025      	beq.n	a238 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a1ec:	7bfb      	ldrb	r3, [r7, #15]
    a1ee:	2b00      	cmp	r3, #0
    a1f0:	d018      	beq.n	a224 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a1f2:	7ffb      	ldrb	r3, [r7, #31]
    a1f4:	2101      	movs	r1, #1
    a1f6:	4618      	mov	r0, r3
    a1f8:	4b09      	ldr	r3, [pc, #36]	; (a220 <_usb_d_dev_out_next+0x290>)
    a1fa:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a1fc:	232d      	movs	r3, #45	; 0x2d
    a1fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a202:	e012      	b.n	a22a <_usb_d_dev_out_next+0x29a>
    a204:	20000b5c 	.word	0x20000b5c
    a208:	00009771 	.word	0x00009771
    a20c:	0000f959 	.word	0x0000f959
    a210:	0000979d 	.word	0x0000979d
    a214:	00009925 	.word	0x00009925
    a218:	0000907d 	.word	0x0000907d
    a21c:	0000b0a1 	.word	0x0000b0a1
    a220:	00009965 	.word	0x00009965
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a224:	2325      	movs	r3, #37	; 0x25
    a226:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a22a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a22e:	7ffb      	ldrb	r3, [r7, #31]
    a230:	4619      	mov	r1, r3
    a232:	6a38      	ldr	r0, [r7, #32]
    a234:	4b05      	ldr	r3, [pc, #20]	; (a24c <_usb_d_dev_out_next+0x2bc>)
    a236:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a238:	7ffb      	ldrb	r3, [r7, #31]
    a23a:	2201      	movs	r2, #1
    a23c:	2100      	movs	r1, #0
    a23e:	4618      	mov	r0, r3
    a240:	4b03      	ldr	r3, [pc, #12]	; (a250 <_usb_d_dev_out_next+0x2c0>)
    a242:	4798      	blx	r3
}
    a244:	372c      	adds	r7, #44	; 0x2c
    a246:	46bd      	mov	sp, r7
    a248:	bd90      	pop	{r4, r7, pc}
    a24a:	bf00      	nop
    a24c:	00009051 	.word	0x00009051
    a250:	000099f5 	.word	0x000099f5

0000a254 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a254:	b580      	push	{r7, lr}
    a256:	b084      	sub	sp, #16
    a258:	af00      	add	r7, sp, #0
    a25a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a25c:	687b      	ldr	r3, [r7, #4]
    a25e:	7c9b      	ldrb	r3, [r3, #18]
    a260:	f003 030f 	and.w	r3, r3, #15
    a264:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a266:	687b      	ldr	r3, [r7, #4]
    a268:	7cdb      	ldrb	r3, [r3, #19]
    a26a:	f003 0307 	and.w	r3, r3, #7
    a26e:	b2db      	uxtb	r3, r3
    a270:	2b01      	cmp	r3, #1
    a272:	bf0c      	ite	eq
    a274:	2301      	moveq	r3, #1
    a276:	2300      	movne	r3, #0
    a278:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a27a:	7bbb      	ldrb	r3, [r7, #14]
    a27c:	f083 0301 	eor.w	r3, r3, #1
    a280:	b2db      	uxtb	r3, r3
    a282:	2b00      	cmp	r3, #0
    a284:	d008      	beq.n	a298 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a286:	7bfb      	ldrb	r3, [r7, #15]
    a288:	4618      	mov	r0, r3
    a28a:	4b20      	ldr	r3, [pc, #128]	; (a30c <_usb_d_dev_handle_setup+0xb8>)
    a28c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a28e:	7bfb      	ldrb	r3, [r7, #15]
    a290:	4618      	mov	r0, r3
    a292:	4b1f      	ldr	r3, [pc, #124]	; (a310 <_usb_d_dev_handle_setup+0xbc>)
    a294:	4798      	blx	r3
		return;
    a296:	e036      	b.n	a306 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a298:	687b      	ldr	r3, [r7, #4]
    a29a:	7cdb      	ldrb	r3, [r3, #19]
    a29c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a2a0:	b2db      	uxtb	r3, r3
    a2a2:	2b00      	cmp	r3, #0
    a2a4:	d010      	beq.n	a2c8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a2a6:	687a      	ldr	r2, [r7, #4]
    a2a8:	7cd3      	ldrb	r3, [r2, #19]
    a2aa:	f36f 1386 	bfc	r3, #6, #1
    a2ae:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a2b0:	7bfb      	ldrb	r3, [r7, #15]
    a2b2:	2200      	movs	r2, #0
    a2b4:	2101      	movs	r1, #1
    a2b6:	4618      	mov	r0, r3
    a2b8:	4b16      	ldr	r3, [pc, #88]	; (a314 <_usb_d_dev_handle_setup+0xc0>)
    a2ba:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a2bc:	7bfb      	ldrb	r3, [r7, #15]
    a2be:	2200      	movs	r2, #0
    a2c0:	2100      	movs	r1, #0
    a2c2:	4618      	mov	r0, r3
    a2c4:	4b14      	ldr	r3, [pc, #80]	; (a318 <_usb_d_dev_handle_setup+0xc4>)
    a2c6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a2c8:	687a      	ldr	r2, [r7, #4]
    a2ca:	7cd3      	ldrb	r3, [r2, #19]
    a2cc:	f36f 03c3 	bfc	r3, #3, #1
    a2d0:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a2d2:	7bfb      	ldrb	r3, [r7, #15]
    a2d4:	2100      	movs	r1, #0
    a2d6:	4618      	mov	r0, r3
    a2d8:	4b10      	ldr	r3, [pc, #64]	; (a31c <_usb_d_dev_handle_setup+0xc8>)
    a2da:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a2dc:	7bfb      	ldrb	r3, [r7, #15]
    a2de:	2101      	movs	r1, #1
    a2e0:	4618      	mov	r0, r3
    a2e2:	4b0e      	ldr	r3, [pc, #56]	; (a31c <_usb_d_dev_handle_setup+0xc8>)
    a2e4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a2e6:	7bfb      	ldrb	r3, [r7, #15]
    a2e8:	216f      	movs	r1, #111	; 0x6f
    a2ea:	4618      	mov	r0, r3
    a2ec:	4b0c      	ldr	r3, [pc, #48]	; (a320 <_usb_d_dev_handle_setup+0xcc>)
    a2ee:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a2f0:	7bfb      	ldrb	r3, [r7, #15]
    a2f2:	216f      	movs	r1, #111	; 0x6f
    a2f4:	4618      	mov	r0, r3
    a2f6:	4b0b      	ldr	r3, [pc, #44]	; (a324 <_usb_d_dev_handle_setup+0xd0>)
    a2f8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a2fa:	4b0b      	ldr	r3, [pc, #44]	; (a328 <_usb_d_dev_handle_setup+0xd4>)
    a2fc:	689b      	ldr	r3, [r3, #8]
    a2fe:	687a      	ldr	r2, [r7, #4]
    a300:	7c92      	ldrb	r2, [r2, #18]
    a302:	4610      	mov	r0, r2
    a304:	4798      	blx	r3
}
    a306:	3710      	adds	r7, #16
    a308:	46bd      	mov	sp, r7
    a30a:	bd80      	pop	{r7, pc}
    a30c:	000096f9 	.word	0x000096f9
    a310:	000096a5 	.word	0x000096a5
    a314:	0000999d 	.word	0x0000999d
    a318:	000099f5 	.word	0x000099f5
    a31c:	00009965 	.word	0x00009965
    a320:	000094a5 	.word	0x000094a5
    a324:	000094f5 	.word	0x000094f5
    a328:	20000a94 	.word	0x20000a94

0000a32c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a32c:	b580      	push	{r7, lr}
    a32e:	b084      	sub	sp, #16
    a330:	af00      	add	r7, sp, #0
    a332:	6078      	str	r0, [r7, #4]
    a334:	460b      	mov	r3, r1
    a336:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a338:	687b      	ldr	r3, [r7, #4]
    a33a:	7c9b      	ldrb	r3, [r3, #18]
    a33c:	f003 030f 	and.w	r3, r3, #15
    a340:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a342:	78f9      	ldrb	r1, [r7, #3]
    a344:	7bfb      	ldrb	r3, [r7, #15]
    a346:	2200      	movs	r2, #0
    a348:	4618      	mov	r0, r3
    a34a:	4b07      	ldr	r3, [pc, #28]	; (a368 <_usb_d_dev_handle_stall+0x3c>)
    a34c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a34e:	4b07      	ldr	r3, [pc, #28]	; (a36c <_usb_d_dev_handle_stall+0x40>)
    a350:	691b      	ldr	r3, [r3, #16]
    a352:	687a      	ldr	r2, [r7, #4]
    a354:	7c90      	ldrb	r0, [r2, #18]
    a356:	687a      	ldr	r2, [r7, #4]
    a358:	6892      	ldr	r2, [r2, #8]
    a35a:	2101      	movs	r1, #1
    a35c:	4798      	blx	r3
}
    a35e:	bf00      	nop
    a360:	3710      	adds	r7, #16
    a362:	46bd      	mov	sp, r7
    a364:	bd80      	pop	{r7, pc}
    a366:	bf00      	nop
    a368:	00009659 	.word	0x00009659
    a36c:	20000a94 	.word	0x20000a94

0000a370 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a370:	b580      	push	{r7, lr}
    a372:	b088      	sub	sp, #32
    a374:	af00      	add	r7, sp, #0
    a376:	6078      	str	r0, [r7, #4]
    a378:	460b      	mov	r3, r1
    a37a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a37c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a380:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a382:	687b      	ldr	r3, [r7, #4]
    a384:	7c9b      	ldrb	r3, [r3, #18]
    a386:	f003 030f 	and.w	r3, r3, #15
    a38a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a38c:	4b61      	ldr	r3, [pc, #388]	; (a514 <_usb_d_dev_handle_trfail+0x1a4>)
    a38e:	881b      	ldrh	r3, [r3, #0]
    a390:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a392:	7efb      	ldrb	r3, [r7, #27]
    a394:	015b      	lsls	r3, r3, #5
    a396:	4a60      	ldr	r2, [pc, #384]	; (a518 <_usb_d_dev_handle_trfail+0x1a8>)
    a398:	4413      	add	r3, r2
    a39a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a39c:	78fb      	ldrb	r3, [r7, #3]
    a39e:	2b00      	cmp	r3, #0
    a3a0:	d006      	beq.n	a3b0 <_usb_d_dev_handle_trfail+0x40>
    a3a2:	7efb      	ldrb	r3, [r7, #27]
    a3a4:	4619      	mov	r1, r3
    a3a6:	69f8      	ldr	r0, [r7, #28]
    a3a8:	4b5c      	ldr	r3, [pc, #368]	; (a51c <_usb_d_dev_handle_trfail+0x1ac>)
    a3aa:	4798      	blx	r3
    a3ac:	4603      	mov	r3, r0
    a3ae:	e005      	b.n	a3bc <_usb_d_dev_handle_trfail+0x4c>
    a3b0:	7efb      	ldrb	r3, [r7, #27]
    a3b2:	4619      	mov	r1, r3
    a3b4:	69f8      	ldr	r0, [r7, #28]
    a3b6:	4b5a      	ldr	r3, [pc, #360]	; (a520 <_usb_d_dev_handle_trfail+0x1b0>)
    a3b8:	4798      	blx	r3
    a3ba:	4603      	mov	r3, r0
    a3bc:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a3be:	687b      	ldr	r3, [r7, #4]
    a3c0:	7cdb      	ldrb	r3, [r3, #19]
    a3c2:	f003 0307 	and.w	r3, r3, #7
    a3c6:	b2db      	uxtb	r3, r3
    a3c8:	2b01      	cmp	r3, #1
    a3ca:	bf0c      	ite	eq
    a3cc:	2301      	moveq	r3, #1
    a3ce:	2300      	movne	r3, #0
    a3d0:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a3d2:	78fb      	ldrb	r3, [r7, #3]
    a3d4:	011b      	lsls	r3, r3, #4
    a3d6:	697a      	ldr	r2, [r7, #20]
    a3d8:	4413      	add	r3, r2
    a3da:	7a9b      	ldrb	r3, [r3, #10]
    a3dc:	b2db      	uxtb	r3, r3
    a3de:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a3e0:	7cfb      	ldrb	r3, [r7, #19]
    a3e2:	2b02      	cmp	r3, #2
    a3e4:	d12f      	bne.n	a446 <_usb_d_dev_handle_trfail+0xd6>
    a3e6:	7b3b      	ldrb	r3, [r7, #12]
    a3e8:	f003 0301 	and.w	r3, r3, #1
    a3ec:	b2db      	uxtb	r3, r3
    a3ee:	2b00      	cmp	r3, #0
    a3f0:	d029      	beq.n	a446 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a3f2:	78fb      	ldrb	r3, [r7, #3]
    a3f4:	011b      	lsls	r3, r3, #4
    a3f6:	697a      	ldr	r2, [r7, #20]
    a3f8:	441a      	add	r2, r3
    a3fa:	7a93      	ldrb	r3, [r2, #10]
    a3fc:	f36f 0300 	bfc	r3, #0, #1
    a400:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a402:	78fb      	ldrb	r3, [r7, #3]
    a404:	f107 0220 	add.w	r2, r7, #32
    a408:	4413      	add	r3, r2
    a40a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a40e:	7efb      	ldrb	r3, [r7, #27]
    a410:	4619      	mov	r1, r3
    a412:	69f8      	ldr	r0, [r7, #28]
    a414:	4b43      	ldr	r3, [pc, #268]	; (a524 <_usb_d_dev_handle_trfail+0x1b4>)
    a416:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a418:	78fb      	ldrb	r3, [r7, #3]
    a41a:	f107 0220 	add.w	r2, r7, #32
    a41e:	4413      	add	r3, r2
    a420:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a424:	7efb      	ldrb	r3, [r7, #27]
    a426:	4619      	mov	r1, r3
    a428:	69f8      	ldr	r0, [r7, #28]
    a42a:	4b3f      	ldr	r3, [pc, #252]	; (a528 <_usb_d_dev_handle_trfail+0x1b8>)
    a42c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a42e:	78fb      	ldrb	r3, [r7, #3]
    a430:	2b00      	cmp	r3, #0
    a432:	bf14      	ite	ne
    a434:	2301      	movne	r3, #1
    a436:	2300      	moveq	r3, #0
    a438:	b2db      	uxtb	r3, r3
    a43a:	2204      	movs	r2, #4
    a43c:	4619      	mov	r1, r3
    a43e:	6878      	ldr	r0, [r7, #4]
    a440:	4b3a      	ldr	r3, [pc, #232]	; (a52c <_usb_d_dev_handle_trfail+0x1bc>)
    a442:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a444:	e062      	b.n	a50c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a446:	7b3b      	ldrb	r3, [r7, #12]
    a448:	f003 0302 	and.w	r3, r3, #2
    a44c:	b2db      	uxtb	r3, r3
    a44e:	2b00      	cmp	r3, #0
    a450:	d040      	beq.n	a4d4 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a452:	78fb      	ldrb	r3, [r7, #3]
    a454:	011b      	lsls	r3, r3, #4
    a456:	697a      	ldr	r2, [r7, #20]
    a458:	441a      	add	r2, r3
    a45a:	7a93      	ldrb	r3, [r2, #10]
    a45c:	f36f 0341 	bfc	r3, #1, #1
    a460:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a462:	78fb      	ldrb	r3, [r7, #3]
    a464:	f107 0220 	add.w	r2, r7, #32
    a468:	4413      	add	r3, r2
    a46a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a46e:	7efb      	ldrb	r3, [r7, #27]
    a470:	4619      	mov	r1, r3
    a472:	69f8      	ldr	r0, [r7, #28]
    a474:	4b2b      	ldr	r3, [pc, #172]	; (a524 <_usb_d_dev_handle_trfail+0x1b4>)
    a476:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a478:	78fb      	ldrb	r3, [r7, #3]
    a47a:	f107 0220 	add.w	r2, r7, #32
    a47e:	4413      	add	r3, r2
    a480:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a484:	7efb      	ldrb	r3, [r7, #27]
    a486:	4619      	mov	r1, r3
    a488:	69f8      	ldr	r0, [r7, #28]
    a48a:	4b27      	ldr	r3, [pc, #156]	; (a528 <_usb_d_dev_handle_trfail+0x1b8>)
    a48c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a48e:	7cbb      	ldrb	r3, [r7, #18]
    a490:	2b00      	cmp	r3, #0
    a492:	d03b      	beq.n	a50c <_usb_d_dev_handle_trfail+0x19c>
    a494:	687b      	ldr	r3, [r7, #4]
    a496:	7cdb      	ldrb	r3, [r3, #19]
    a498:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a49c:	b2db      	uxtb	r3, r3
    a49e:	2b00      	cmp	r3, #0
    a4a0:	d034      	beq.n	a50c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a4a2:	687b      	ldr	r3, [r7, #4]
    a4a4:	7cdb      	ldrb	r3, [r3, #19]
    a4a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a4aa:	b2db      	uxtb	r3, r3
    a4ac:	461a      	mov	r2, r3
    a4ae:	78fb      	ldrb	r3, [r7, #3]
    a4b0:	4293      	cmp	r3, r2
    a4b2:	d02b      	beq.n	a50c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a4b4:	687b      	ldr	r3, [r7, #4]
    a4b6:	7cdb      	ldrb	r3, [r3, #19]
    a4b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a4bc:	b2db      	uxtb	r3, r3
    a4be:	2b00      	cmp	r3, #0
    a4c0:	bf14      	ite	ne
    a4c2:	2301      	movne	r3, #1
    a4c4:	2300      	moveq	r3, #0
    a4c6:	b2db      	uxtb	r3, r3
    a4c8:	2200      	movs	r2, #0
    a4ca:	4619      	mov	r1, r3
    a4cc:	6878      	ldr	r0, [r7, #4]
    a4ce:	4b17      	ldr	r3, [pc, #92]	; (a52c <_usb_d_dev_handle_trfail+0x1bc>)
    a4d0:	4798      	blx	r3
}
    a4d2:	e01b      	b.n	a50c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a4d4:	78fa      	ldrb	r2, [r7, #3]
    a4d6:	7efb      	ldrb	r3, [r7, #27]
    a4d8:	4611      	mov	r1, r2
    a4da:	4618      	mov	r0, r3
    a4dc:	4b14      	ldr	r3, [pc, #80]	; (a530 <_usb_d_dev_handle_trfail+0x1c0>)
    a4de:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a4e0:	78fb      	ldrb	r3, [r7, #3]
    a4e2:	f107 0220 	add.w	r2, r7, #32
    a4e6:	4413      	add	r3, r2
    a4e8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a4ec:	7efb      	ldrb	r3, [r7, #27]
    a4ee:	4619      	mov	r1, r3
    a4f0:	69f8      	ldr	r0, [r7, #28]
    a4f2:	4b0c      	ldr	r3, [pc, #48]	; (a524 <_usb_d_dev_handle_trfail+0x1b4>)
    a4f4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a4f6:	78fb      	ldrb	r3, [r7, #3]
    a4f8:	f107 0220 	add.w	r2, r7, #32
    a4fc:	4413      	add	r3, r2
    a4fe:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a502:	7efb      	ldrb	r3, [r7, #27]
    a504:	4619      	mov	r1, r3
    a506:	69f8      	ldr	r0, [r7, #28]
    a508:	4b07      	ldr	r3, [pc, #28]	; (a528 <_usb_d_dev_handle_trfail+0x1b8>)
    a50a:	4798      	blx	r3
}
    a50c:	bf00      	nop
    a50e:	3720      	adds	r7, #32
    a510:	46bd      	mov	sp, r7
    a512:	bd80      	pop	{r7, pc}
    a514:	00010168 	.word	0x00010168
    a518:	20000b5c 	.word	0x20000b5c
    a51c:	000090d9 	.word	0x000090d9
    a520:	000090a9 	.word	0x000090a9
    a524:	00008f7d 	.word	0x00008f7d
    a528:	0000907d 	.word	0x0000907d
    a52c:	0000b0e9 	.word	0x0000b0e9
    a530:	00009965 	.word	0x00009965

0000a534 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a534:	b580      	push	{r7, lr}
    a536:	b082      	sub	sp, #8
    a538:	af00      	add	r7, sp, #0
    a53a:	6078      	str	r0, [r7, #4]
    a53c:	460b      	mov	r3, r1
    a53e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a540:	78fb      	ldrb	r3, [r7, #3]
    a542:	f003 0310 	and.w	r3, r3, #16
    a546:	2b00      	cmp	r3, #0
    a548:	d003      	beq.n	a552 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a54a:	6878      	ldr	r0, [r7, #4]
    a54c:	4b0c      	ldr	r3, [pc, #48]	; (a580 <_usb_d_dev_trans_setup_isr+0x4c>)
    a54e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a550:	e012      	b.n	a578 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a552:	78fb      	ldrb	r3, [r7, #3]
    a554:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a558:	2b00      	cmp	r3, #0
    a55a:	d004      	beq.n	a566 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a55c:	2101      	movs	r1, #1
    a55e:	6878      	ldr	r0, [r7, #4]
    a560:	4b08      	ldr	r3, [pc, #32]	; (a584 <_usb_d_dev_trans_setup_isr+0x50>)
    a562:	4798      	blx	r3
}
    a564:	e008      	b.n	a578 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a566:	78fb      	ldrb	r3, [r7, #3]
    a568:	f003 0320 	and.w	r3, r3, #32
    a56c:	2b00      	cmp	r3, #0
    a56e:	d003      	beq.n	a578 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a570:	2100      	movs	r1, #0
    a572:	6878      	ldr	r0, [r7, #4]
    a574:	4b03      	ldr	r3, [pc, #12]	; (a584 <_usb_d_dev_trans_setup_isr+0x50>)
    a576:	4798      	blx	r3
}
    a578:	bf00      	nop
    a57a:	3708      	adds	r7, #8
    a57c:	46bd      	mov	sp, r7
    a57e:	bd80      	pop	{r7, pc}
    a580:	0000a255 	.word	0x0000a255
    a584:	0000a32d 	.word	0x0000a32d

0000a588 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a588:	b580      	push	{r7, lr}
    a58a:	b082      	sub	sp, #8
    a58c:	af00      	add	r7, sp, #0
    a58e:	6078      	str	r0, [r7, #4]
    a590:	460b      	mov	r3, r1
    a592:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a594:	78fb      	ldrb	r3, [r7, #3]
    a596:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a59a:	2b00      	cmp	r3, #0
    a59c:	d004      	beq.n	a5a8 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a59e:	2101      	movs	r1, #1
    a5a0:	6878      	ldr	r0, [r7, #4]
    a5a2:	4b1a      	ldr	r3, [pc, #104]	; (a60c <_usb_d_dev_trans_in_isr+0x84>)
    a5a4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a5a6:	e02c      	b.n	a602 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a5a8:	78fb      	ldrb	r3, [r7, #3]
    a5aa:	f003 0308 	and.w	r3, r3, #8
    a5ae:	2b00      	cmp	r3, #0
    a5b0:	d004      	beq.n	a5bc <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a5b2:	2101      	movs	r1, #1
    a5b4:	6878      	ldr	r0, [r7, #4]
    a5b6:	4b16      	ldr	r3, [pc, #88]	; (a610 <_usb_d_dev_trans_in_isr+0x88>)
    a5b8:	4798      	blx	r3
}
    a5ba:	e022      	b.n	a602 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a5bc:	78fb      	ldrb	r3, [r7, #3]
    a5be:	f003 0302 	and.w	r3, r3, #2
    a5c2:	2b00      	cmp	r3, #0
    a5c4:	d004      	beq.n	a5d0 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a5c6:	2101      	movs	r1, #1
    a5c8:	6878      	ldr	r0, [r7, #4]
    a5ca:	4b12      	ldr	r3, [pc, #72]	; (a614 <_usb_d_dev_trans_in_isr+0x8c>)
    a5cc:	4798      	blx	r3
}
    a5ce:	e018      	b.n	a602 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a5d0:	687b      	ldr	r3, [r7, #4]
    a5d2:	7cdb      	ldrb	r3, [r3, #19]
    a5d4:	f003 0307 	and.w	r3, r3, #7
    a5d8:	b2db      	uxtb	r3, r3
    a5da:	2b01      	cmp	r3, #1
    a5dc:	d111      	bne.n	a602 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a5de:	78fb      	ldrb	r3, [r7, #3]
    a5e0:	f003 0304 	and.w	r3, r3, #4
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	d004      	beq.n	a5f2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a5e8:	2100      	movs	r1, #0
    a5ea:	6878      	ldr	r0, [r7, #4]
    a5ec:	4b08      	ldr	r3, [pc, #32]	; (a610 <_usb_d_dev_trans_in_isr+0x88>)
    a5ee:	4798      	blx	r3
}
    a5f0:	e007      	b.n	a602 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a5f2:	78fb      	ldrb	r3, [r7, #3]
    a5f4:	f003 0310 	and.w	r3, r3, #16
    a5f8:	2b00      	cmp	r3, #0
    a5fa:	d002      	beq.n	a602 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a5fc:	6878      	ldr	r0, [r7, #4]
    a5fe:	4b06      	ldr	r3, [pc, #24]	; (a618 <_usb_d_dev_trans_in_isr+0x90>)
    a600:	4798      	blx	r3
}
    a602:	bf00      	nop
    a604:	3708      	adds	r7, #8
    a606:	46bd      	mov	sp, r7
    a608:	bd80      	pop	{r7, pc}
    a60a:	bf00      	nop
    a60c:	0000a32d 	.word	0x0000a32d
    a610:	0000a371 	.word	0x0000a371
    a614:	00009d79 	.word	0x00009d79
    a618:	0000a255 	.word	0x0000a255

0000a61c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a61c:	b580      	push	{r7, lr}
    a61e:	b082      	sub	sp, #8
    a620:	af00      	add	r7, sp, #0
    a622:	6078      	str	r0, [r7, #4]
    a624:	460b      	mov	r3, r1
    a626:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a628:	78fb      	ldrb	r3, [r7, #3]
    a62a:	f003 0320 	and.w	r3, r3, #32
    a62e:	2b00      	cmp	r3, #0
    a630:	d004      	beq.n	a63c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a632:	2100      	movs	r1, #0
    a634:	6878      	ldr	r0, [r7, #4]
    a636:	4b1a      	ldr	r3, [pc, #104]	; (a6a0 <_usb_d_dev_trans_out_isr+0x84>)
    a638:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a63a:	e02c      	b.n	a696 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a63c:	78fb      	ldrb	r3, [r7, #3]
    a63e:	f003 0304 	and.w	r3, r3, #4
    a642:	2b00      	cmp	r3, #0
    a644:	d004      	beq.n	a650 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a646:	2100      	movs	r1, #0
    a648:	6878      	ldr	r0, [r7, #4]
    a64a:	4b16      	ldr	r3, [pc, #88]	; (a6a4 <_usb_d_dev_trans_out_isr+0x88>)
    a64c:	4798      	blx	r3
}
    a64e:	e022      	b.n	a696 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a650:	78fb      	ldrb	r3, [r7, #3]
    a652:	f003 0301 	and.w	r3, r3, #1
    a656:	2b00      	cmp	r3, #0
    a658:	d004      	beq.n	a664 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a65a:	2101      	movs	r1, #1
    a65c:	6878      	ldr	r0, [r7, #4]
    a65e:	4b12      	ldr	r3, [pc, #72]	; (a6a8 <_usb_d_dev_trans_out_isr+0x8c>)
    a660:	4798      	blx	r3
}
    a662:	e018      	b.n	a696 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a664:	687b      	ldr	r3, [r7, #4]
    a666:	7cdb      	ldrb	r3, [r3, #19]
    a668:	f003 0307 	and.w	r3, r3, #7
    a66c:	b2db      	uxtb	r3, r3
    a66e:	2b01      	cmp	r3, #1
    a670:	d111      	bne.n	a696 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a672:	78fb      	ldrb	r3, [r7, #3]
    a674:	f003 0308 	and.w	r3, r3, #8
    a678:	2b00      	cmp	r3, #0
    a67a:	d004      	beq.n	a686 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a67c:	2101      	movs	r1, #1
    a67e:	6878      	ldr	r0, [r7, #4]
    a680:	4b08      	ldr	r3, [pc, #32]	; (a6a4 <_usb_d_dev_trans_out_isr+0x88>)
    a682:	4798      	blx	r3
}
    a684:	e007      	b.n	a696 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a686:	78fb      	ldrb	r3, [r7, #3]
    a688:	f003 0310 	and.w	r3, r3, #16
    a68c:	2b00      	cmp	r3, #0
    a68e:	d002      	beq.n	a696 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a690:	6878      	ldr	r0, [r7, #4]
    a692:	4b06      	ldr	r3, [pc, #24]	; (a6ac <_usb_d_dev_trans_out_isr+0x90>)
    a694:	4798      	blx	r3
}
    a696:	bf00      	nop
    a698:	3708      	adds	r7, #8
    a69a:	46bd      	mov	sp, r7
    a69c:	bd80      	pop	{r7, pc}
    a69e:	bf00      	nop
    a6a0:	0000a32d 	.word	0x0000a32d
    a6a4:	0000a371 	.word	0x0000a371
    a6a8:	00009f91 	.word	0x00009f91
    a6ac:	0000a255 	.word	0x0000a255

0000a6b0 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a6b0:	b580      	push	{r7, lr}
    a6b2:	b084      	sub	sp, #16
    a6b4:	af00      	add	r7, sp, #0
    a6b6:	6078      	str	r0, [r7, #4]
    a6b8:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a6ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a6be:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a6c0:	683b      	ldr	r3, [r7, #0]
    a6c2:	7c9b      	ldrb	r3, [r3, #18]
    a6c4:	f003 030f 	and.w	r3, r3, #15
    a6c8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a6ca:	7afb      	ldrb	r3, [r7, #11]
    a6cc:	2201      	movs	r2, #1
    a6ce:	409a      	lsls	r2, r3
    a6d0:	687b      	ldr	r3, [r7, #4]
    a6d2:	4013      	ands	r3, r2
    a6d4:	2b00      	cmp	r3, #0
    a6d6:	d03d      	beq.n	a754 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a6d8:	7afb      	ldrb	r3, [r7, #11]
    a6da:	68fa      	ldr	r2, [r7, #12]
    a6dc:	3308      	adds	r3, #8
    a6de:	015b      	lsls	r3, r3, #5
    a6e0:	4413      	add	r3, r2
    a6e2:	3307      	adds	r3, #7
    a6e4:	781b      	ldrb	r3, [r3, #0]
    a6e6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a6e8:	7afb      	ldrb	r3, [r7, #11]
    a6ea:	68fa      	ldr	r2, [r7, #12]
    a6ec:	015b      	lsls	r3, r3, #5
    a6ee:	4413      	add	r3, r2
    a6f0:	f203 1309 	addw	r3, r3, #265	; 0x109
    a6f4:	781b      	ldrb	r3, [r3, #0]
    a6f6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a6f8:	7aba      	ldrb	r2, [r7, #10]
    a6fa:	7a7b      	ldrb	r3, [r7, #9]
    a6fc:	4013      	ands	r3, r2
    a6fe:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a700:	7abb      	ldrb	r3, [r7, #10]
    a702:	2b00      	cmp	r3, #0
    a704:	d027      	beq.n	a756 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a706:	683b      	ldr	r3, [r7, #0]
    a708:	7cdb      	ldrb	r3, [r3, #19]
    a70a:	f003 0307 	and.w	r3, r3, #7
    a70e:	b2db      	uxtb	r3, r3
    a710:	2b01      	cmp	r3, #1
    a712:	d10c      	bne.n	a72e <_usb_d_dev_handle_eps+0x7e>
    a714:	683b      	ldr	r3, [r7, #0]
    a716:	7cdb      	ldrb	r3, [r3, #19]
    a718:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a71c:	b2db      	uxtb	r3, r3
    a71e:	2b00      	cmp	r3, #0
    a720:	d105      	bne.n	a72e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a722:	7abb      	ldrb	r3, [r7, #10]
    a724:	4619      	mov	r1, r3
    a726:	6838      	ldr	r0, [r7, #0]
    a728:	4b0c      	ldr	r3, [pc, #48]	; (a75c <_usb_d_dev_handle_eps+0xac>)
    a72a:	4798      	blx	r3
    a72c:	e013      	b.n	a756 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a72e:	683b      	ldr	r3, [r7, #0]
    a730:	7cdb      	ldrb	r3, [r3, #19]
    a732:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a736:	b2db      	uxtb	r3, r3
    a738:	2b00      	cmp	r3, #0
    a73a:	d005      	beq.n	a748 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a73c:	7abb      	ldrb	r3, [r7, #10]
    a73e:	4619      	mov	r1, r3
    a740:	6838      	ldr	r0, [r7, #0]
    a742:	4b07      	ldr	r3, [pc, #28]	; (a760 <_usb_d_dev_handle_eps+0xb0>)
    a744:	4798      	blx	r3
    a746:	e006      	b.n	a756 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a748:	7abb      	ldrb	r3, [r7, #10]
    a74a:	4619      	mov	r1, r3
    a74c:	6838      	ldr	r0, [r7, #0]
    a74e:	4b05      	ldr	r3, [pc, #20]	; (a764 <_usb_d_dev_handle_eps+0xb4>)
    a750:	4798      	blx	r3
    a752:	e000      	b.n	a756 <_usb_d_dev_handle_eps+0xa6>
		return;
    a754:	bf00      	nop
		}
	}
}
    a756:	3710      	adds	r7, #16
    a758:	46bd      	mov	sp, r7
    a75a:	bd80      	pop	{r7, pc}
    a75c:	0000a535 	.word	0x0000a535
    a760:	0000a589 	.word	0x0000a589
    a764:	0000a61d 	.word	0x0000a61d

0000a768 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a768:	b580      	push	{r7, lr}
    a76a:	b084      	sub	sp, #16
    a76c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a76e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a772:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a774:	68bb      	ldr	r3, [r7, #8]
    a776:	8c1b      	ldrh	r3, [r3, #32]
    a778:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a77a:	88fb      	ldrh	r3, [r7, #6]
    a77c:	2b00      	cmp	r3, #0
    a77e:	d104      	bne.n	a78a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a780:	4b13      	ldr	r3, [pc, #76]	; (a7d0 <_usb_d_dev_handler+0x68>)
    a782:	4798      	blx	r3
    a784:	4603      	mov	r3, r0
    a786:	2b00      	cmp	r3, #0
    a788:	d11e      	bne.n	a7c8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a78a:	2300      	movs	r3, #0
    a78c:	73fb      	strb	r3, [r7, #15]
    a78e:	e017      	b.n	a7c0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a790:	7bfa      	ldrb	r2, [r7, #15]
    a792:	4613      	mov	r3, r2
    a794:	009b      	lsls	r3, r3, #2
    a796:	4413      	add	r3, r2
    a798:	009b      	lsls	r3, r3, #2
    a79a:	3310      	adds	r3, #16
    a79c:	4a0d      	ldr	r2, [pc, #52]	; (a7d4 <_usb_d_dev_handler+0x6c>)
    a79e:	4413      	add	r3, r2
    a7a0:	3304      	adds	r3, #4
    a7a2:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a7a4:	683b      	ldr	r3, [r7, #0]
    a7a6:	7c9b      	ldrb	r3, [r3, #18]
    a7a8:	2bff      	cmp	r3, #255	; 0xff
    a7aa:	d005      	beq.n	a7b8 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a7ac:	88fb      	ldrh	r3, [r7, #6]
    a7ae:	6839      	ldr	r1, [r7, #0]
    a7b0:	4618      	mov	r0, r3
    a7b2:	4b09      	ldr	r3, [pc, #36]	; (a7d8 <_usb_d_dev_handler+0x70>)
    a7b4:	4798      	blx	r3
    a7b6:	e000      	b.n	a7ba <_usb_d_dev_handler+0x52>
			continue;
    a7b8:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a7ba:	7bfb      	ldrb	r3, [r7, #15]
    a7bc:	3301      	adds	r3, #1
    a7be:	73fb      	strb	r3, [r7, #15]
    a7c0:	7bfb      	ldrb	r3, [r7, #15]
    a7c2:	2b08      	cmp	r3, #8
    a7c4:	d9e4      	bls.n	a790 <_usb_d_dev_handler+0x28>
    a7c6:	e000      	b.n	a7ca <_usb_d_dev_handler+0x62>
			return;
    a7c8:	bf00      	nop
	}
}
    a7ca:	3710      	adds	r7, #16
    a7cc:	46bd      	mov	sp, r7
    a7ce:	bd80      	pop	{r7, pc}
    a7d0:	00009cc1 	.word	0x00009cc1
    a7d4:	20000a94 	.word	0x20000a94
    a7d8:	0000a6b1 	.word	0x0000a6b1

0000a7dc <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a7dc:	b580      	push	{r7, lr}
    a7de:	b082      	sub	sp, #8
    a7e0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a7e2:	2300      	movs	r3, #0
    a7e4:	71fb      	strb	r3, [r7, #7]
    a7e6:	e023      	b.n	a830 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a7e8:	79fa      	ldrb	r2, [r7, #7]
    a7ea:	4613      	mov	r3, r2
    a7ec:	009b      	lsls	r3, r3, #2
    a7ee:	4413      	add	r3, r2
    a7f0:	009b      	lsls	r3, r3, #2
    a7f2:	3310      	adds	r3, #16
    a7f4:	4a14      	ldr	r2, [pc, #80]	; (a848 <_usb_d_dev_reset_epts+0x6c>)
    a7f6:	4413      	add	r3, r2
    a7f8:	3304      	adds	r3, #4
    a7fa:	2103      	movs	r1, #3
    a7fc:	4618      	mov	r0, r3
    a7fe:	4b13      	ldr	r3, [pc, #76]	; (a84c <_usb_d_dev_reset_epts+0x70>)
    a800:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a802:	79fa      	ldrb	r2, [r7, #7]
    a804:	4910      	ldr	r1, [pc, #64]	; (a848 <_usb_d_dev_reset_epts+0x6c>)
    a806:	4613      	mov	r3, r2
    a808:	009b      	lsls	r3, r3, #2
    a80a:	4413      	add	r3, r2
    a80c:	009b      	lsls	r3, r3, #2
    a80e:	440b      	add	r3, r1
    a810:	3326      	adds	r3, #38	; 0x26
    a812:	22ff      	movs	r2, #255	; 0xff
    a814:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a816:	79fa      	ldrb	r2, [r7, #7]
    a818:	490b      	ldr	r1, [pc, #44]	; (a848 <_usb_d_dev_reset_epts+0x6c>)
    a81a:	4613      	mov	r3, r2
    a81c:	009b      	lsls	r3, r3, #2
    a81e:	4413      	add	r3, r2
    a820:	009b      	lsls	r3, r3, #2
    a822:	440b      	add	r3, r1
    a824:	3327      	adds	r3, #39	; 0x27
    a826:	2200      	movs	r2, #0
    a828:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a82a:	79fb      	ldrb	r3, [r7, #7]
    a82c:	3301      	adds	r3, #1
    a82e:	71fb      	strb	r3, [r7, #7]
    a830:	79fb      	ldrb	r3, [r7, #7]
    a832:	2b08      	cmp	r3, #8
    a834:	d9d8      	bls.n	a7e8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a836:	22a0      	movs	r2, #160	; 0xa0
    a838:	2100      	movs	r1, #0
    a83a:	4805      	ldr	r0, [pc, #20]	; (a850 <_usb_d_dev_reset_epts+0x74>)
    a83c:	4b05      	ldr	r3, [pc, #20]	; (a854 <_usb_d_dev_reset_epts+0x78>)
    a83e:	4798      	blx	r3
}
    a840:	bf00      	nop
    a842:	3708      	adds	r7, #8
    a844:	46bd      	mov	sp, r7
    a846:	bd80      	pop	{r7, pc}
    a848:	20000a94 	.word	0x20000a94
    a84c:	0000b0a1 	.word	0x0000b0a1
    a850:	20000b5c 	.word	0x20000b5c
    a854:	0000fa8d 	.word	0x0000fa8d

0000a858 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a858:	b580      	push	{r7, lr}
    a85a:	b084      	sub	sp, #16
    a85c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a85e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a862:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a864:	2301      	movs	r3, #1
    a866:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a868:	2304      	movs	r3, #4
    a86a:	713b      	strb	r3, [r7, #4]
    a86c:	2300      	movs	r3, #0
    a86e:	717b      	strb	r3, [r7, #5]
    a870:	2300      	movs	r3, #0
    a872:	71bb      	strb	r3, [r7, #6]
    a874:	2300      	movs	r3, #0
    a876:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a878:	2101      	movs	r1, #1
    a87a:	68f8      	ldr	r0, [r7, #12]
    a87c:	4b26      	ldr	r3, [pc, #152]	; (a918 <_usb_d_dev_init+0xc0>)
    a87e:	4798      	blx	r3
    a880:	4603      	mov	r3, r0
    a882:	f083 0301 	eor.w	r3, r3, #1
    a886:	b2db      	uxtb	r3, r3
    a888:	2b00      	cmp	r3, #0
    a88a:	d011      	beq.n	a8b0 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a88c:	2102      	movs	r1, #2
    a88e:	68f8      	ldr	r0, [r7, #12]
    a890:	4b22      	ldr	r3, [pc, #136]	; (a91c <_usb_d_dev_init+0xc4>)
    a892:	4798      	blx	r3
    a894:	4603      	mov	r3, r0
    a896:	2b00      	cmp	r3, #0
    a898:	d006      	beq.n	a8a8 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a89a:	68f8      	ldr	r0, [r7, #12]
    a89c:	4b20      	ldr	r3, [pc, #128]	; (a920 <_usb_d_dev_init+0xc8>)
    a89e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a8a0:	2102      	movs	r1, #2
    a8a2:	68f8      	ldr	r0, [r7, #12]
    a8a4:	4b1f      	ldr	r3, [pc, #124]	; (a924 <_usb_d_dev_init+0xcc>)
    a8a6:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a8a8:	2101      	movs	r1, #1
    a8aa:	68f8      	ldr	r0, [r7, #12]
    a8ac:	4b1e      	ldr	r3, [pc, #120]	; (a928 <_usb_d_dev_init+0xd0>)
    a8ae:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a8b0:	2101      	movs	r1, #1
    a8b2:	68f8      	ldr	r0, [r7, #12]
    a8b4:	4b1b      	ldr	r3, [pc, #108]	; (a924 <_usb_d_dev_init+0xcc>)
    a8b6:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a8b8:	4b1c      	ldr	r3, [pc, #112]	; (a92c <_usb_d_dev_init+0xd4>)
    a8ba:	4a1d      	ldr	r2, [pc, #116]	; (a930 <_usb_d_dev_init+0xd8>)
    a8bc:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a8be:	4b1b      	ldr	r3, [pc, #108]	; (a92c <_usb_d_dev_init+0xd4>)
    a8c0:	4a1b      	ldr	r2, [pc, #108]	; (a930 <_usb_d_dev_init+0xd8>)
    a8c2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a8c4:	4b19      	ldr	r3, [pc, #100]	; (a92c <_usb_d_dev_init+0xd4>)
    a8c6:	4a1a      	ldr	r2, [pc, #104]	; (a930 <_usb_d_dev_init+0xd8>)
    a8c8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a8ca:	4b18      	ldr	r3, [pc, #96]	; (a92c <_usb_d_dev_init+0xd4>)
    a8cc:	4a18      	ldr	r2, [pc, #96]	; (a930 <_usb_d_dev_init+0xd8>)
    a8ce:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a8d0:	4b16      	ldr	r3, [pc, #88]	; (a92c <_usb_d_dev_init+0xd4>)
    a8d2:	4a17      	ldr	r2, [pc, #92]	; (a930 <_usb_d_dev_init+0xd8>)
    a8d4:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a8d6:	4b17      	ldr	r3, [pc, #92]	; (a934 <_usb_d_dev_init+0xdc>)
    a8d8:	4798      	blx	r3

	_usb_load_calib();
    a8da:	4b17      	ldr	r3, [pc, #92]	; (a938 <_usb_d_dev_init+0xe0>)
    a8dc:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a8de:	2104      	movs	r1, #4
    a8e0:	68f8      	ldr	r0, [r7, #12]
    a8e2:	4b11      	ldr	r3, [pc, #68]	; (a928 <_usb_d_dev_init+0xd0>)
    a8e4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a8e6:	4b15      	ldr	r3, [pc, #84]	; (a93c <_usb_d_dev_init+0xe4>)
    a8e8:	4619      	mov	r1, r3
    a8ea:	68f8      	ldr	r0, [r7, #12]
    a8ec:	4b14      	ldr	r3, [pc, #80]	; (a940 <_usb_d_dev_init+0xe8>)
    a8ee:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a8f0:	7afb      	ldrb	r3, [r7, #11]
    a8f2:	f107 0210 	add.w	r2, r7, #16
    a8f6:	4413      	add	r3, r2
    a8f8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a8fc:	f043 0301 	orr.w	r3, r3, #1
    a900:	b2db      	uxtb	r3, r3
    a902:	b29b      	uxth	r3, r3
    a904:	4619      	mov	r1, r3
    a906:	68f8      	ldr	r0, [r7, #12]
    a908:	4b0e      	ldr	r3, [pc, #56]	; (a944 <_usb_d_dev_init+0xec>)
    a90a:	4798      	blx	r3

	return ERR_NONE;
    a90c:	2300      	movs	r3, #0
}
    a90e:	4618      	mov	r0, r3
    a910:	3710      	adds	r7, #16
    a912:	46bd      	mov	sp, r7
    a914:	bd80      	pop	{r7, pc}
    a916:	bf00      	nop
    a918:	00008ef1 	.word	0x00008ef1
    a91c:	00009241 	.word	0x00009241
    a920:	00009215 	.word	0x00009215
    a924:	00008ec7 	.word	0x00008ec7
    a928:	00009271 	.word	0x00009271
    a92c:	20000a94 	.word	0x20000a94
    a930:	00009339 	.word	0x00009339
    a934:	0000a7dd 	.word	0x0000a7dd
    a938:	00009351 	.word	0x00009351
    a93c:	20000b5c 	.word	0x20000b5c
    a940:	0000931d 	.word	0x0000931d
    a944:	000092e1 	.word	0x000092e1

0000a948 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a948:	b580      	push	{r7, lr}
    a94a:	b082      	sub	sp, #8
    a94c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a94e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a952:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a954:	2103      	movs	r1, #3
    a956:	6878      	ldr	r0, [r7, #4]
    a958:	4b17      	ldr	r3, [pc, #92]	; (a9b8 <_usb_d_dev_enable+0x70>)
    a95a:	4798      	blx	r3
    a95c:	4603      	mov	r3, r0
    a95e:	2b00      	cmp	r3, #0
    a960:	d002      	beq.n	a968 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a962:	f06f 0310 	mvn.w	r3, #16
    a966:	e023      	b.n	a9b0 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a968:	6878      	ldr	r0, [r7, #4]
    a96a:	4b14      	ldr	r3, [pc, #80]	; (a9bc <_usb_d_dev_enable+0x74>)
    a96c:	4798      	blx	r3
    a96e:	4603      	mov	r3, r0
    a970:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a972:	78fb      	ldrb	r3, [r7, #3]
    a974:	f003 0302 	and.w	r3, r3, #2
    a978:	2b00      	cmp	r3, #0
    a97a:	d107      	bne.n	a98c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a97c:	78fb      	ldrb	r3, [r7, #3]
    a97e:	f043 0302 	orr.w	r3, r3, #2
    a982:	b2db      	uxtb	r3, r3
    a984:	4619      	mov	r1, r3
    a986:	6878      	ldr	r0, [r7, #4]
    a988:	4b0d      	ldr	r3, [pc, #52]	; (a9c0 <_usb_d_dev_enable+0x78>)
    a98a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a98c:	2050      	movs	r0, #80	; 0x50
    a98e:	4b0d      	ldr	r3, [pc, #52]	; (a9c4 <_usb_d_dev_enable+0x7c>)
    a990:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a992:	2051      	movs	r0, #81	; 0x51
    a994:	4b0b      	ldr	r3, [pc, #44]	; (a9c4 <_usb_d_dev_enable+0x7c>)
    a996:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a998:	2052      	movs	r0, #82	; 0x52
    a99a:	4b0a      	ldr	r3, [pc, #40]	; (a9c4 <_usb_d_dev_enable+0x7c>)
    a99c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a99e:	2053      	movs	r0, #83	; 0x53
    a9a0:	4b08      	ldr	r3, [pc, #32]	; (a9c4 <_usb_d_dev_enable+0x7c>)
    a9a2:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a9a4:	f240 218d 	movw	r1, #653	; 0x28d
    a9a8:	6878      	ldr	r0, [r7, #4]
    a9aa:	4b07      	ldr	r3, [pc, #28]	; (a9c8 <_usb_d_dev_enable+0x80>)
    a9ac:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a9ae:	2300      	movs	r3, #0
}
    a9b0:	4618      	mov	r0, r3
    a9b2:	3708      	adds	r7, #8
    a9b4:	46bd      	mov	sp, r7
    a9b6:	bd80      	pop	{r7, pc}
    a9b8:	000091eb 	.word	0x000091eb
    a9bc:	00009299 	.word	0x00009299
    a9c0:	00009271 	.word	0x00009271
    a9c4:	00008dfd 	.word	0x00008dfd
    a9c8:	00009195 	.word	0x00009195

0000a9cc <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a9cc:	b580      	push	{r7, lr}
    a9ce:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a9d0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a9d4:	4b01      	ldr	r3, [pc, #4]	; (a9dc <_usb_d_dev_attach+0x10>)
    a9d6:	4798      	blx	r3
}
    a9d8:	bf00      	nop
    a9da:	bd80      	pop	{r7, pc}
    a9dc:	000092bd 	.word	0x000092bd

0000a9e0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a9e0:	b580      	push	{r7, lr}
    a9e2:	b082      	sub	sp, #8
    a9e4:	af00      	add	r7, sp, #0
    a9e6:	4603      	mov	r3, r0
    a9e8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a9ea:	79fb      	ldrb	r3, [r7, #7]
    a9ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a9f0:	b2db      	uxtb	r3, r3
    a9f2:	4619      	mov	r1, r3
    a9f4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a9f8:	4b02      	ldr	r3, [pc, #8]	; (aa04 <_usb_d_dev_set_address+0x24>)
    a9fa:	4798      	blx	r3
}
    a9fc:	bf00      	nop
    a9fe:	3708      	adds	r7, #8
    aa00:	46bd      	mov	sp, r7
    aa02:	bd80      	pop	{r7, pc}
    aa04:	000092ff 	.word	0x000092ff

0000aa08 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    aa08:	b590      	push	{r4, r7, lr}
    aa0a:	b085      	sub	sp, #20
    aa0c:	af00      	add	r7, sp, #0
    aa0e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    aa10:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa14:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aa16:	687b      	ldr	r3, [r7, #4]
    aa18:	7c9b      	ldrb	r3, [r3, #18]
    aa1a:	f003 030f 	and.w	r3, r3, #15
    aa1e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    aa20:	687b      	ldr	r3, [r7, #4]
    aa22:	68db      	ldr	r3, [r3, #12]
    aa24:	461a      	mov	r2, r3
    aa26:	7afb      	ldrb	r3, [r7, #11]
    aa28:	2100      	movs	r1, #0
    aa2a:	4618      	mov	r0, r3
    aa2c:	4b0f      	ldr	r3, [pc, #60]	; (aa6c <_usb_d_dev_trans_setup+0x64>)
    aa2e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    aa30:	687b      	ldr	r3, [r7, #4]
    aa32:	8a1b      	ldrh	r3, [r3, #16]
    aa34:	461a      	mov	r2, r3
    aa36:	7af8      	ldrb	r0, [r7, #11]
    aa38:	2300      	movs	r3, #0
    aa3a:	2100      	movs	r1, #0
    aa3c:	4c0c      	ldr	r4, [pc, #48]	; (aa70 <_usb_d_dev_trans_setup+0x68>)
    aa3e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    aa40:	7afb      	ldrb	r3, [r7, #11]
    aa42:	22b0      	movs	r2, #176	; 0xb0
    aa44:	4619      	mov	r1, r3
    aa46:	68f8      	ldr	r0, [r7, #12]
    aa48:	4b0a      	ldr	r3, [pc, #40]	; (aa74 <_usb_d_dev_trans_setup+0x6c>)
    aa4a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    aa4c:	7afb      	ldrb	r3, [r7, #11]
    aa4e:	2200      	movs	r2, #0
    aa50:	2100      	movs	r1, #0
    aa52:	4618      	mov	r0, r3
    aa54:	4b08      	ldr	r3, [pc, #32]	; (aa78 <_usb_d_dev_trans_setup+0x70>)
    aa56:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    aa58:	7afb      	ldrb	r3, [r7, #11]
    aa5a:	2210      	movs	r2, #16
    aa5c:	4619      	mov	r1, r3
    aa5e:	68f8      	ldr	r0, [r7, #12]
    aa60:	4b06      	ldr	r3, [pc, #24]	; (aa7c <_usb_d_dev_trans_setup+0x74>)
    aa62:	4798      	blx	r3
}
    aa64:	bf00      	nop
    aa66:	3714      	adds	r7, #20
    aa68:	46bd      	mov	sp, r7
    aa6a:	bd90      	pop	{r4, r7, pc}
    aa6c:	0000979d 	.word	0x0000979d
    aa70:	00009925 	.word	0x00009925
    aa74:	00008ffd 	.word	0x00008ffd
    aa78:	000099f5 	.word	0x000099f5
    aa7c:	00009051 	.word	0x00009051

0000aa80 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    aa80:	b580      	push	{r7, lr}
    aa82:	b088      	sub	sp, #32
    aa84:	af00      	add	r7, sp, #0
    aa86:	4603      	mov	r3, r0
    aa88:	71fb      	strb	r3, [r7, #7]
    aa8a:	460b      	mov	r3, r1
    aa8c:	71bb      	strb	r3, [r7, #6]
    aa8e:	4613      	mov	r3, r2
    aa90:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    aa92:	79fb      	ldrb	r3, [r7, #7]
    aa94:	f003 030f 	and.w	r3, r3, #15
    aa98:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    aa9a:	79fb      	ldrb	r3, [r7, #7]
    aa9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aaa0:	2b00      	cmp	r3, #0
    aaa2:	bf14      	ite	ne
    aaa4:	2301      	movne	r3, #1
    aaa6:	2300      	moveq	r3, #0
    aaa8:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    aaaa:	7fba      	ldrb	r2, [r7, #30]
    aaac:	7ffb      	ldrb	r3, [r7, #31]
    aaae:	4611      	mov	r1, r2
    aab0:	4618      	mov	r0, r3
    aab2:	4b3e      	ldr	r3, [pc, #248]	; (abac <_usb_d_dev_ep_init+0x12c>)
    aab4:	4798      	blx	r3
    aab6:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    aab8:	79bb      	ldrb	r3, [r7, #6]
    aaba:	f003 0303 	and.w	r3, r3, #3
    aabe:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    aac0:	7ffa      	ldrb	r2, [r7, #31]
    aac2:	4613      	mov	r3, r2
    aac4:	005b      	lsls	r3, r3, #1
    aac6:	4413      	add	r3, r2
    aac8:	009b      	lsls	r3, r3, #2
    aaca:	4a39      	ldr	r2, [pc, #228]	; (abb0 <_usb_d_dev_ep_init+0x130>)
    aacc:	4413      	add	r3, r2
    aace:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    aad0:	7ffb      	ldrb	r3, [r7, #31]
    aad2:	2b04      	cmp	r3, #4
    aad4:	d902      	bls.n	aadc <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    aad6:	f06f 0311 	mvn.w	r3, #17
    aada:	e063      	b.n	aba4 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    aadc:	69bb      	ldr	r3, [r7, #24]
    aade:	7c9b      	ldrb	r3, [r3, #18]
    aae0:	2bff      	cmp	r3, #255	; 0xff
    aae2:	d002      	beq.n	aaea <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    aae4:	f06f 0313 	mvn.w	r3, #19
    aae8:	e05c      	b.n	aba4 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    aaea:	7dfb      	ldrb	r3, [r7, #23]
    aaec:	2b00      	cmp	r3, #0
    aaee:	d11f      	bne.n	ab30 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    aaf0:	7fbb      	ldrb	r3, [r7, #30]
    aaf2:	2b00      	cmp	r3, #0
    aaf4:	bf14      	ite	ne
    aaf6:	2301      	movne	r3, #1
    aaf8:	2300      	moveq	r3, #0
    aafa:	b2db      	uxtb	r3, r3
    aafc:	f083 0301 	eor.w	r3, r3, #1
    ab00:	b2db      	uxtb	r3, r3
    ab02:	f003 0301 	and.w	r3, r3, #1
    ab06:	b2da      	uxtb	r2, r3
    ab08:	7ffb      	ldrb	r3, [r7, #31]
    ab0a:	4611      	mov	r1, r2
    ab0c:	4618      	mov	r0, r3
    ab0e:	4b27      	ldr	r3, [pc, #156]	; (abac <_usb_d_dev_ep_init+0x12c>)
    ab10:	4798      	blx	r3
    ab12:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    ab14:	68fb      	ldr	r3, [r7, #12]
    ab16:	7c9b      	ldrb	r3, [r3, #18]
    ab18:	2bff      	cmp	r3, #255	; 0xff
    ab1a:	d002      	beq.n	ab22 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    ab1c:	f06f 0313 	mvn.w	r3, #19
    ab20:	e040      	b.n	aba4 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    ab22:	693b      	ldr	r3, [r7, #16]
    ab24:	681b      	ldr	r3, [r3, #0]
    ab26:	2b00      	cmp	r3, #0
    ab28:	d102      	bne.n	ab30 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    ab2a:	f06f 0312 	mvn.w	r3, #18
    ab2e:	e039      	b.n	aba4 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    ab30:	7fbb      	ldrb	r3, [r7, #30]
    ab32:	2b00      	cmp	r3, #0
    ab34:	d007      	beq.n	ab46 <_usb_d_dev_ep_init+0xc6>
    ab36:	693b      	ldr	r3, [r7, #16]
    ab38:	685b      	ldr	r3, [r3, #4]
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	bf14      	ite	ne
    ab3e:	2301      	movne	r3, #1
    ab40:	2300      	moveq	r3, #0
    ab42:	b2db      	uxtb	r3, r3
    ab44:	e006      	b.n	ab54 <_usb_d_dev_ep_init+0xd4>
    ab46:	693b      	ldr	r3, [r7, #16]
    ab48:	681b      	ldr	r3, [r3, #0]
    ab4a:	2b00      	cmp	r3, #0
    ab4c:	bf14      	ite	ne
    ab4e:	2301      	movne	r3, #1
    ab50:	2300      	moveq	r3, #0
    ab52:	b2db      	uxtb	r3, r3
    ab54:	2b00      	cmp	r3, #0
    ab56:	d00f      	beq.n	ab78 <_usb_d_dev_ep_init+0xf8>
    ab58:	7fbb      	ldrb	r3, [r7, #30]
    ab5a:	2b00      	cmp	r3, #0
    ab5c:	d003      	beq.n	ab66 <_usb_d_dev_ep_init+0xe6>
    ab5e:	693b      	ldr	r3, [r7, #16]
    ab60:	895b      	ldrh	r3, [r3, #10]
    ab62:	461a      	mov	r2, r3
    ab64:	e002      	b.n	ab6c <_usb_d_dev_ep_init+0xec>
    ab66:	693b      	ldr	r3, [r7, #16]
    ab68:	891b      	ldrh	r3, [r3, #8]
    ab6a:	461a      	mov	r2, r3
    ab6c:	88bb      	ldrh	r3, [r7, #4]
    ab6e:	429a      	cmp	r2, r3
    ab70:	da02      	bge.n	ab78 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    ab72:	f06f 0312 	mvn.w	r3, #18
    ab76:	e015      	b.n	aba4 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    ab78:	7fbb      	ldrb	r3, [r7, #30]
    ab7a:	2b00      	cmp	r3, #0
    ab7c:	d002      	beq.n	ab84 <_usb_d_dev_ep_init+0x104>
    ab7e:	693b      	ldr	r3, [r7, #16]
    ab80:	685b      	ldr	r3, [r3, #4]
    ab82:	e001      	b.n	ab88 <_usb_d_dev_ep_init+0x108>
    ab84:	693b      	ldr	r3, [r7, #16]
    ab86:	681b      	ldr	r3, [r3, #0]
    ab88:	69ba      	ldr	r2, [r7, #24]
    ab8a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    ab8c:	69bb      	ldr	r3, [r7, #24]
    ab8e:	88ba      	ldrh	r2, [r7, #4]
    ab90:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    ab92:	7dfb      	ldrb	r3, [r7, #23]
    ab94:	3301      	adds	r3, #1
    ab96:	b2da      	uxtb	r2, r3
    ab98:	69bb      	ldr	r3, [r7, #24]
    ab9a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    ab9c:	69bb      	ldr	r3, [r7, #24]
    ab9e:	79fa      	ldrb	r2, [r7, #7]
    aba0:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    aba2:	2300      	movs	r3, #0
}
    aba4:	4618      	mov	r0, r3
    aba6:	3720      	adds	r7, #32
    aba8:	46bd      	mov	sp, r7
    abaa:	bd80      	pop	{r7, pc}
    abac:	00009ab1 	.word	0x00009ab1
    abb0:	0001012c 	.word	0x0001012c

0000abb4 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    abb4:	b580      	push	{r7, lr}
    abb6:	b086      	sub	sp, #24
    abb8:	af00      	add	r7, sp, #0
    abba:	4603      	mov	r3, r0
    abbc:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    abbe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    abc2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    abc4:	79fb      	ldrb	r3, [r7, #7]
    abc6:	f003 030f 	and.w	r3, r3, #15
    abca:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    abcc:	79fb      	ldrb	r3, [r7, #7]
    abce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    abd2:	2b00      	cmp	r3, #0
    abd4:	bf14      	ite	ne
    abd6:	2301      	movne	r3, #1
    abd8:	2300      	moveq	r3, #0
    abda:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    abdc:	7cba      	ldrb	r2, [r7, #18]
    abde:	7cfb      	ldrb	r3, [r7, #19]
    abe0:	4611      	mov	r1, r2
    abe2:	4618      	mov	r0, r3
    abe4:	4b2a      	ldr	r3, [pc, #168]	; (ac90 <_usb_d_dev_ep_deinit+0xdc>)
    abe6:	4798      	blx	r3
    abe8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    abea:	7cfb      	ldrb	r3, [r7, #19]
    abec:	2b04      	cmp	r3, #4
    abee:	d84a      	bhi.n	ac86 <_usb_d_dev_ep_deinit+0xd2>
    abf0:	68fb      	ldr	r3, [r7, #12]
    abf2:	7c9b      	ldrb	r3, [r3, #18]
    abf4:	2bff      	cmp	r3, #255	; 0xff
    abf6:	d046      	beq.n	ac86 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    abf8:	7cbb      	ldrb	r3, [r7, #18]
    abfa:	2203      	movs	r2, #3
    abfc:	4619      	mov	r1, r3
    abfe:	68f8      	ldr	r0, [r7, #12]
    ac00:	4b24      	ldr	r3, [pc, #144]	; (ac94 <_usb_d_dev_ep_deinit+0xe0>)
    ac02:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ac04:	68fb      	ldr	r3, [r7, #12]
    ac06:	7cdb      	ldrb	r3, [r3, #19]
    ac08:	f003 0307 	and.w	r3, r3, #7
    ac0c:	b2db      	uxtb	r3, r3
    ac0e:	2b01      	cmp	r3, #1
    ac10:	d107      	bne.n	ac22 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    ac12:	79fb      	ldrb	r3, [r7, #7]
    ac14:	697a      	ldr	r2, [r7, #20]
    ac16:	3308      	adds	r3, #8
    ac18:	015b      	lsls	r3, r3, #5
    ac1a:	4413      	add	r3, r2
    ac1c:	2200      	movs	r2, #0
    ac1e:	701a      	strb	r2, [r3, #0]
    ac20:	e02a      	b.n	ac78 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    ac22:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ac26:	2b00      	cmp	r3, #0
    ac28:	da15      	bge.n	ac56 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    ac2a:	79fb      	ldrb	r3, [r7, #7]
    ac2c:	f003 030f 	and.w	r3, r3, #15
    ac30:	79fa      	ldrb	r2, [r7, #7]
    ac32:	f002 020f 	and.w	r2, r2, #15
    ac36:	6979      	ldr	r1, [r7, #20]
    ac38:	3208      	adds	r2, #8
    ac3a:	0152      	lsls	r2, r2, #5
    ac3c:	440a      	add	r2, r1
    ac3e:	7812      	ldrb	r2, [r2, #0]
    ac40:	b2d2      	uxtb	r2, r2
    ac42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    ac46:	b2d1      	uxtb	r1, r2
    ac48:	697a      	ldr	r2, [r7, #20]
    ac4a:	3308      	adds	r3, #8
    ac4c:	015b      	lsls	r3, r3, #5
    ac4e:	4413      	add	r3, r2
    ac50:	460a      	mov	r2, r1
    ac52:	701a      	strb	r2, [r3, #0]
    ac54:	e010      	b.n	ac78 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    ac56:	79fb      	ldrb	r3, [r7, #7]
    ac58:	79fa      	ldrb	r2, [r7, #7]
    ac5a:	6979      	ldr	r1, [r7, #20]
    ac5c:	3208      	adds	r2, #8
    ac5e:	0152      	lsls	r2, r2, #5
    ac60:	440a      	add	r2, r1
    ac62:	7812      	ldrb	r2, [r2, #0]
    ac64:	b2d2      	uxtb	r2, r2
    ac66:	f022 0207 	bic.w	r2, r2, #7
    ac6a:	b2d1      	uxtb	r1, r2
    ac6c:	697a      	ldr	r2, [r7, #20]
    ac6e:	3308      	adds	r3, #8
    ac70:	015b      	lsls	r3, r3, #5
    ac72:	4413      	add	r3, r2
    ac74:	460a      	mov	r2, r1
    ac76:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    ac78:	68fb      	ldr	r3, [r7, #12]
    ac7a:	2200      	movs	r2, #0
    ac7c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    ac7e:	68fb      	ldr	r3, [r7, #12]
    ac80:	22ff      	movs	r2, #255	; 0xff
    ac82:	749a      	strb	r2, [r3, #18]
    ac84:	e000      	b.n	ac88 <_usb_d_dev_ep_deinit+0xd4>
		return;
    ac86:	bf00      	nop
}
    ac88:	3718      	adds	r7, #24
    ac8a:	46bd      	mov	sp, r7
    ac8c:	bd80      	pop	{r7, pc}
    ac8e:	bf00      	nop
    ac90:	00009ab1 	.word	0x00009ab1
    ac94:	0000b0e9 	.word	0x0000b0e9

0000ac98 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    ac98:	b5b0      	push	{r4, r5, r7, lr}
    ac9a:	b088      	sub	sp, #32
    ac9c:	af00      	add	r7, sp, #0
    ac9e:	4603      	mov	r3, r0
    aca0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    aca2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aca6:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    aca8:	79fb      	ldrb	r3, [r7, #7]
    acaa:	f003 030f 	and.w	r3, r3, #15
    acae:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    acb0:	79fb      	ldrb	r3, [r7, #7]
    acb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    acb6:	2b00      	cmp	r3, #0
    acb8:	bf14      	ite	ne
    acba:	2301      	movne	r3, #1
    acbc:	2300      	moveq	r3, #0
    acbe:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    acc0:	7eba      	ldrb	r2, [r7, #26]
    acc2:	7efb      	ldrb	r3, [r7, #27]
    acc4:	4611      	mov	r1, r2
    acc6:	4618      	mov	r0, r3
    acc8:	4b70      	ldr	r3, [pc, #448]	; (ae8c <_usb_d_dev_ep_enable+0x1f4>)
    acca:	4798      	blx	r3
    accc:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    acce:	7efb      	ldrb	r3, [r7, #27]
    acd0:	4619      	mov	r1, r3
    acd2:	69f8      	ldr	r0, [r7, #28]
    acd4:	4b6e      	ldr	r3, [pc, #440]	; (ae90 <_usb_d_dev_ep_enable+0x1f8>)
    acd6:	4798      	blx	r3
    acd8:	4603      	mov	r3, r0
    acda:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    acdc:	7efb      	ldrb	r3, [r7, #27]
    acde:	2b04      	cmp	r3, #4
    ace0:	d803      	bhi.n	acea <_usb_d_dev_ep_enable+0x52>
    ace2:	697b      	ldr	r3, [r7, #20]
    ace4:	7c9b      	ldrb	r3, [r3, #18]
    ace6:	2bff      	cmp	r3, #255	; 0xff
    ace8:	d102      	bne.n	acf0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    acea:	f06f 0311 	mvn.w	r3, #17
    acee:	e0c8      	b.n	ae82 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    acf0:	7efb      	ldrb	r3, [r7, #27]
    acf2:	015b      	lsls	r3, r3, #5
    acf4:	4a67      	ldr	r2, [pc, #412]	; (ae94 <_usb_d_dev_ep_enable+0x1fc>)
    acf6:	4413      	add	r3, r2
    acf8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    acfa:	697b      	ldr	r3, [r7, #20]
    acfc:	7cdb      	ldrb	r3, [r3, #19]
    acfe:	f003 0307 	and.w	r3, r3, #7
    ad02:	b2db      	uxtb	r3, r3
    ad04:	2b01      	cmp	r3, #1
    ad06:	d14b      	bne.n	ada0 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    ad08:	7cfb      	ldrb	r3, [r7, #19]
    ad0a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    ad0e:	2b00      	cmp	r3, #0
    ad10:	d002      	beq.n	ad18 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    ad12:	f06f 0313 	mvn.w	r3, #19
    ad16:	e0b4      	b.n	ae82 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    ad18:	7efb      	ldrb	r3, [r7, #27]
    ad1a:	2211      	movs	r2, #17
    ad1c:	4619      	mov	r1, r3
    ad1e:	69f8      	ldr	r0, [r7, #28]
    ad20:	4b5d      	ldr	r3, [pc, #372]	; (ae98 <_usb_d_dev_ep_enable+0x200>)
    ad22:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ad24:	697b      	ldr	r3, [r7, #20]
    ad26:	8a1b      	ldrh	r3, [r3, #16]
    ad28:	039b      	lsls	r3, r3, #14
    ad2a:	4c5c      	ldr	r4, [pc, #368]	; (ae9c <_usb_d_dev_ep_enable+0x204>)
    ad2c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ad2e:	697b      	ldr	r3, [r7, #20]
    ad30:	8a1b      	ldrh	r3, [r3, #16]
    ad32:	4618      	mov	r0, r3
    ad34:	4b5a      	ldr	r3, [pc, #360]	; (aea0 <_usb_d_dev_ep_enable+0x208>)
    ad36:	4798      	blx	r3
    ad38:	4603      	mov	r3, r0
    ad3a:	071b      	lsls	r3, r3, #28
    ad3c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ad40:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ad44:	68fb      	ldr	r3, [r7, #12]
    ad46:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    ad48:	68fb      	ldr	r3, [r7, #12]
    ad4a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ad4e:	697b      	ldr	r3, [r7, #20]
    ad50:	8a1b      	ldrh	r3, [r3, #16]
    ad52:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ad56:	697b      	ldr	r3, [r7, #20]
    ad58:	8a1b      	ldrh	r3, [r3, #16]
    ad5a:	4618      	mov	r0, r3
    ad5c:	4b50      	ldr	r3, [pc, #320]	; (aea0 <_usb_d_dev_ep_enable+0x208>)
    ad5e:	4798      	blx	r3
    ad60:	4603      	mov	r3, r0
    ad62:	071b      	lsls	r3, r3, #28
    ad64:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ad68:	432b      	orrs	r3, r5
    ad6a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ad6c:	7efb      	ldrb	r3, [r7, #27]
    ad6e:	2200      	movs	r2, #0
    ad70:	2100      	movs	r1, #0
    ad72:	4618      	mov	r0, r3
    ad74:	4b4b      	ldr	r3, [pc, #300]	; (aea4 <_usb_d_dev_ep_enable+0x20c>)
    ad76:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    ad78:	7efb      	ldrb	r3, [r7, #27]
    ad7a:	2200      	movs	r2, #0
    ad7c:	2101      	movs	r1, #1
    ad7e:	4618      	mov	r0, r3
    ad80:	4b49      	ldr	r3, [pc, #292]	; (aea8 <_usb_d_dev_ep_enable+0x210>)
    ad82:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    ad84:	7efb      	ldrb	r3, [r7, #27]
    ad86:	2100      	movs	r1, #0
    ad88:	4618      	mov	r0, r3
    ad8a:	4b48      	ldr	r3, [pc, #288]	; (aeac <_usb_d_dev_ep_enable+0x214>)
    ad8c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ad8e:	7efb      	ldrb	r3, [r7, #27]
    ad90:	2101      	movs	r1, #1
    ad92:	4618      	mov	r0, r3
    ad94:	4b45      	ldr	r3, [pc, #276]	; (aeac <_usb_d_dev_ep_enable+0x214>)
    ad96:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    ad98:	6978      	ldr	r0, [r7, #20]
    ad9a:	4b45      	ldr	r3, [pc, #276]	; (aeb0 <_usb_d_dev_ep_enable+0x218>)
    ad9c:	4798      	blx	r3
    ad9e:	e06f      	b.n	ae80 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    ada0:	7ebb      	ldrb	r3, [r7, #26]
    ada2:	2b00      	cmp	r3, #0
    ada4:	d038      	beq.n	ae18 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    ada6:	7cfb      	ldrb	r3, [r7, #19]
    ada8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    adac:	2b00      	cmp	r3, #0
    adae:	d002      	beq.n	adb6 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    adb0:	f06f 0313 	mvn.w	r3, #19
    adb4:	e065      	b.n	ae82 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    adb6:	697b      	ldr	r3, [r7, #20]
    adb8:	7cdb      	ldrb	r3, [r3, #19]
    adba:	f3c3 0302 	ubfx	r3, r3, #0, #3
    adbe:	b2db      	uxtb	r3, r3
    adc0:	011b      	lsls	r3, r3, #4
    adc2:	b2db      	uxtb	r3, r3
    adc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    adc8:	b2da      	uxtb	r2, r3
    adca:	7cfb      	ldrb	r3, [r7, #19]
    adcc:	4313      	orrs	r3, r2
    adce:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    add0:	7cfa      	ldrb	r2, [r7, #19]
    add2:	7efb      	ldrb	r3, [r7, #27]
    add4:	4619      	mov	r1, r3
    add6:	69f8      	ldr	r0, [r7, #28]
    add8:	4b2f      	ldr	r3, [pc, #188]	; (ae98 <_usb_d_dev_ep_enable+0x200>)
    adda:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    addc:	68fb      	ldr	r3, [r7, #12]
    adde:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ade2:	697b      	ldr	r3, [r7, #20]
    ade4:	8a1b      	ldrh	r3, [r3, #16]
    ade6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    adea:	697b      	ldr	r3, [r7, #20]
    adec:	8a1b      	ldrh	r3, [r3, #16]
    adee:	4618      	mov	r0, r3
    adf0:	4b2b      	ldr	r3, [pc, #172]	; (aea0 <_usb_d_dev_ep_enable+0x208>)
    adf2:	4798      	blx	r3
    adf4:	4603      	mov	r3, r0
    adf6:	071b      	lsls	r3, r3, #28
    adf8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    adfc:	432b      	orrs	r3, r5
    adfe:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    ae00:	7efb      	ldrb	r3, [r7, #27]
    ae02:	2200      	movs	r2, #0
    ae04:	2101      	movs	r1, #1
    ae06:	4618      	mov	r0, r3
    ae08:	4b27      	ldr	r3, [pc, #156]	; (aea8 <_usb_d_dev_ep_enable+0x210>)
    ae0a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ae0c:	7efb      	ldrb	r3, [r7, #27]
    ae0e:	2101      	movs	r1, #1
    ae10:	4618      	mov	r0, r3
    ae12:	4b26      	ldr	r3, [pc, #152]	; (aeac <_usb_d_dev_ep_enable+0x214>)
    ae14:	4798      	blx	r3
    ae16:	e033      	b.n	ae80 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    ae18:	7cfb      	ldrb	r3, [r7, #19]
    ae1a:	f003 0307 	and.w	r3, r3, #7
    ae1e:	2b00      	cmp	r3, #0
    ae20:	d002      	beq.n	ae28 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    ae22:	f06f 0313 	mvn.w	r3, #19
    ae26:	e02c      	b.n	ae82 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    ae28:	697b      	ldr	r3, [r7, #20]
    ae2a:	7cdb      	ldrb	r3, [r3, #19]
    ae2c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae30:	b2db      	uxtb	r3, r3
    ae32:	461a      	mov	r2, r3
    ae34:	7cfb      	ldrb	r3, [r7, #19]
    ae36:	4313      	orrs	r3, r2
    ae38:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    ae3a:	7cfa      	ldrb	r2, [r7, #19]
    ae3c:	7efb      	ldrb	r3, [r7, #27]
    ae3e:	4619      	mov	r1, r3
    ae40:	69f8      	ldr	r0, [r7, #28]
    ae42:	4b15      	ldr	r3, [pc, #84]	; (ae98 <_usb_d_dev_ep_enable+0x200>)
    ae44:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ae46:	697b      	ldr	r3, [r7, #20]
    ae48:	8a1b      	ldrh	r3, [r3, #16]
    ae4a:	039b      	lsls	r3, r3, #14
    ae4c:	4c13      	ldr	r4, [pc, #76]	; (ae9c <_usb_d_dev_ep_enable+0x204>)
    ae4e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ae50:	697b      	ldr	r3, [r7, #20]
    ae52:	8a1b      	ldrh	r3, [r3, #16]
    ae54:	4618      	mov	r0, r3
    ae56:	4b12      	ldr	r3, [pc, #72]	; (aea0 <_usb_d_dev_ep_enable+0x208>)
    ae58:	4798      	blx	r3
    ae5a:	4603      	mov	r3, r0
    ae5c:	071b      	lsls	r3, r3, #28
    ae5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ae62:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ae66:	68fb      	ldr	r3, [r7, #12]
    ae68:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ae6a:	7efb      	ldrb	r3, [r7, #27]
    ae6c:	2200      	movs	r2, #0
    ae6e:	2100      	movs	r1, #0
    ae70:	4618      	mov	r0, r3
    ae72:	4b0c      	ldr	r3, [pc, #48]	; (aea4 <_usb_d_dev_ep_enable+0x20c>)
    ae74:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    ae76:	7efb      	ldrb	r3, [r7, #27]
    ae78:	2100      	movs	r1, #0
    ae7a:	4618      	mov	r0, r3
    ae7c:	4b0b      	ldr	r3, [pc, #44]	; (aeac <_usb_d_dev_ep_enable+0x214>)
    ae7e:	4798      	blx	r3
	}

	return USB_OK;
    ae80:	2300      	movs	r3, #0
}
    ae82:	4618      	mov	r0, r3
    ae84:	3720      	adds	r7, #32
    ae86:	46bd      	mov	sp, r7
    ae88:	bdb0      	pop	{r4, r5, r7, pc}
    ae8a:	bf00      	nop
    ae8c:	00009ab1 	.word	0x00009ab1
    ae90:	00009137 	.word	0x00009137
    ae94:	20000b5c 	.word	0x20000b5c
    ae98:	0000910d 	.word	0x0000910d
    ae9c:	0fffc000 	.word	0x0fffc000
    aea0:	00009a4d 	.word	0x00009a4d
    aea4:	000099f5 	.word	0x000099f5
    aea8:	0000999d 	.word	0x0000999d
    aeac:	00009965 	.word	0x00009965
    aeb0:	0000aa09 	.word	0x0000aa09

0000aeb4 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    aeb4:	b580      	push	{r7, lr}
    aeb6:	b084      	sub	sp, #16
    aeb8:	af00      	add	r7, sp, #0
    aeba:	6078      	str	r0, [r7, #4]
    aebc:	460b      	mov	r3, r1
    aebe:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aec0:	687b      	ldr	r3, [r7, #4]
    aec2:	7c9b      	ldrb	r3, [r3, #18]
    aec4:	f003 030f 	and.w	r3, r3, #15
    aec8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    aeca:	78fa      	ldrb	r2, [r7, #3]
    aecc:	7bfb      	ldrb	r3, [r7, #15]
    aece:	4611      	mov	r1, r2
    aed0:	4618      	mov	r0, r3
    aed2:	4b03      	ldr	r3, [pc, #12]	; (aee0 <_usb_d_dev_ep_stall_get+0x2c>)
    aed4:	4798      	blx	r3
    aed6:	4603      	mov	r3, r0
}
    aed8:	4618      	mov	r0, r3
    aeda:	3710      	adds	r7, #16
    aedc:	46bd      	mov	sp, r7
    aede:	bd80      	pop	{r7, pc}
    aee0:	000095a5 	.word	0x000095a5

0000aee4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    aee4:	b580      	push	{r7, lr}
    aee6:	b084      	sub	sp, #16
    aee8:	af00      	add	r7, sp, #0
    aeea:	6078      	str	r0, [r7, #4]
    aeec:	460b      	mov	r3, r1
    aeee:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aef0:	687b      	ldr	r3, [r7, #4]
    aef2:	7c9b      	ldrb	r3, [r3, #18]
    aef4:	f003 030f 	and.w	r3, r3, #15
    aef8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    aefa:	78f9      	ldrb	r1, [r7, #3]
    aefc:	7bfb      	ldrb	r3, [r7, #15]
    aefe:	2201      	movs	r2, #1
    af00:	4618      	mov	r0, r3
    af02:	4b0a      	ldr	r3, [pc, #40]	; (af2c <_usb_d_dev_ep_stall_set+0x48>)
    af04:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    af06:	78fb      	ldrb	r3, [r7, #3]
    af08:	2220      	movs	r2, #32
    af0a:	409a      	lsls	r2, r3
    af0c:	7bfb      	ldrb	r3, [r7, #15]
    af0e:	4611      	mov	r1, r2
    af10:	4618      	mov	r0, r3
    af12:	4b07      	ldr	r3, [pc, #28]	; (af30 <_usb_d_dev_ep_stall_set+0x4c>)
    af14:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    af16:	687a      	ldr	r2, [r7, #4]
    af18:	7cd3      	ldrb	r3, [r2, #19]
    af1a:	f043 0308 	orr.w	r3, r3, #8
    af1e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    af20:	2300      	movs	r3, #0
}
    af22:	4618      	mov	r0, r3
    af24:	3710      	adds	r7, #16
    af26:	46bd      	mov	sp, r7
    af28:	bd80      	pop	{r7, pc}
    af2a:	bf00      	nop
    af2c:	0000954d 	.word	0x0000954d
    af30:	000094cd 	.word	0x000094cd

0000af34 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    af34:	b580      	push	{r7, lr}
    af36:	b084      	sub	sp, #16
    af38:	af00      	add	r7, sp, #0
    af3a:	6078      	str	r0, [r7, #4]
    af3c:	460b      	mov	r3, r1
    af3e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    af40:	687b      	ldr	r3, [r7, #4]
    af42:	7c9b      	ldrb	r3, [r3, #18]
    af44:	f003 030f 	and.w	r3, r3, #15
    af48:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    af4a:	78fa      	ldrb	r2, [r7, #3]
    af4c:	7bfb      	ldrb	r3, [r7, #15]
    af4e:	4611      	mov	r1, r2
    af50:	4618      	mov	r0, r3
    af52:	4b28      	ldr	r3, [pc, #160]	; (aff4 <_usb_d_dev_ep_stall_clr+0xc0>)
    af54:	4798      	blx	r3
    af56:	4603      	mov	r3, r0
    af58:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    af5a:	7bbb      	ldrb	r3, [r7, #14]
    af5c:	f083 0301 	eor.w	r3, r3, #1
    af60:	b2db      	uxtb	r3, r3
    af62:	2b00      	cmp	r3, #0
    af64:	d001      	beq.n	af6a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    af66:	2300      	movs	r3, #0
    af68:	e040      	b.n	afec <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    af6a:	78f9      	ldrb	r1, [r7, #3]
    af6c:	7bfb      	ldrb	r3, [r7, #15]
    af6e:	2200      	movs	r2, #0
    af70:	4618      	mov	r0, r3
    af72:	4b21      	ldr	r3, [pc, #132]	; (aff8 <_usb_d_dev_ep_stall_clr+0xc4>)
    af74:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    af76:	78fb      	ldrb	r3, [r7, #3]
    af78:	2220      	movs	r2, #32
    af7a:	409a      	lsls	r2, r3
    af7c:	7bfb      	ldrb	r3, [r7, #15]
    af7e:	4611      	mov	r1, r2
    af80:	4618      	mov	r0, r3
    af82:	4b1e      	ldr	r3, [pc, #120]	; (affc <_usb_d_dev_ep_stall_clr+0xc8>)
    af84:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    af86:	78fa      	ldrb	r2, [r7, #3]
    af88:	7bfb      	ldrb	r3, [r7, #15]
    af8a:	4611      	mov	r1, r2
    af8c:	4618      	mov	r0, r3
    af8e:	4b1c      	ldr	r3, [pc, #112]	; (b000 <_usb_d_dev_ep_stall_clr+0xcc>)
    af90:	4798      	blx	r3
    af92:	4603      	mov	r3, r0
    af94:	2b00      	cmp	r3, #0
    af96:	d00b      	beq.n	afb0 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    af98:	78fa      	ldrb	r2, [r7, #3]
    af9a:	7bfb      	ldrb	r3, [r7, #15]
    af9c:	4611      	mov	r1, r2
    af9e:	4618      	mov	r0, r3
    afa0:	4b18      	ldr	r3, [pc, #96]	; (b004 <_usb_d_dev_ep_stall_clr+0xd0>)
    afa2:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    afa4:	78f9      	ldrb	r1, [r7, #3]
    afa6:	7bfb      	ldrb	r3, [r7, #15]
    afa8:	2200      	movs	r2, #0
    afaa:	4618      	mov	r0, r3
    afac:	4b16      	ldr	r3, [pc, #88]	; (b008 <_usb_d_dev_ep_stall_clr+0xd4>)
    afae:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    afb0:	687b      	ldr	r3, [r7, #4]
    afb2:	7cdb      	ldrb	r3, [r3, #19]
    afb4:	f003 0307 	and.w	r3, r3, #7
    afb8:	b2db      	uxtb	r3, r3
    afba:	2b01      	cmp	r3, #1
    afbc:	d110      	bne.n	afe0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    afbe:	7bfb      	ldrb	r3, [r7, #15]
    afc0:	4619      	mov	r1, r3
    afc2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    afc6:	4b11      	ldr	r3, [pc, #68]	; (b00c <_usb_d_dev_ep_stall_clr+0xd8>)
    afc8:	4798      	blx	r3
    afca:	4603      	mov	r3, r0
    afcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
    afd0:	2b00      	cmp	r3, #0
    afd2:	d10a      	bne.n	afea <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    afd4:	687a      	ldr	r2, [r7, #4]
    afd6:	7cd3      	ldrb	r3, [r2, #19]
    afd8:	f36f 03c3 	bfc	r3, #3, #1
    afdc:	74d3      	strb	r3, [r2, #19]
    afde:	e004      	b.n	afea <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    afe0:	687a      	ldr	r2, [r7, #4]
    afe2:	7cd3      	ldrb	r3, [r2, #19]
    afe4:	f36f 03c3 	bfc	r3, #3, #1
    afe8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    afea:	2300      	movs	r3, #0
}
    afec:	4618      	mov	r0, r3
    afee:	3710      	adds	r7, #16
    aff0:	46bd      	mov	sp, r7
    aff2:	bd80      	pop	{r7, pc}
    aff4:	000095a5 	.word	0x000095a5
    aff8:	0000954d 	.word	0x0000954d
    affc:	000094f5 	.word	0x000094f5
    b000:	000095e9 	.word	0x000095e9
    b004:	0000962d 	.word	0x0000962d
    b008:	00009719 	.word	0x00009719
    b00c:	00008fd5 	.word	0x00008fd5

0000b010 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b010:	b580      	push	{r7, lr}
    b012:	b086      	sub	sp, #24
    b014:	af00      	add	r7, sp, #0
    b016:	4603      	mov	r3, r0
    b018:	460a      	mov	r2, r1
    b01a:	71fb      	strb	r3, [r7, #7]
    b01c:	4613      	mov	r3, r2
    b01e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b020:	79fb      	ldrb	r3, [r7, #7]
    b022:	f003 030f 	and.w	r3, r3, #15
    b026:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b028:	79fb      	ldrb	r3, [r7, #7]
    b02a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b02e:	2b00      	cmp	r3, #0
    b030:	bf14      	ite	ne
    b032:	2301      	movne	r3, #1
    b034:	2300      	moveq	r3, #0
    b036:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b038:	7cba      	ldrb	r2, [r7, #18]
    b03a:	7cfb      	ldrb	r3, [r7, #19]
    b03c:	4611      	mov	r1, r2
    b03e:	4618      	mov	r0, r3
    b040:	4b13      	ldr	r3, [pc, #76]	; (b090 <_usb_d_dev_ep_stall+0x80>)
    b042:	4798      	blx	r3
    b044:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b046:	7cfb      	ldrb	r3, [r7, #19]
    b048:	2b04      	cmp	r3, #4
    b04a:	d902      	bls.n	b052 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b04c:	f06f 0311 	mvn.w	r3, #17
    b050:	e01a      	b.n	b088 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b052:	79bb      	ldrb	r3, [r7, #6]
    b054:	2b01      	cmp	r3, #1
    b056:	d106      	bne.n	b066 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b058:	7cbb      	ldrb	r3, [r7, #18]
    b05a:	4619      	mov	r1, r3
    b05c:	68f8      	ldr	r0, [r7, #12]
    b05e:	4b0d      	ldr	r3, [pc, #52]	; (b094 <_usb_d_dev_ep_stall+0x84>)
    b060:	4798      	blx	r3
    b062:	6178      	str	r0, [r7, #20]
    b064:	e00f      	b.n	b086 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b066:	79bb      	ldrb	r3, [r7, #6]
    b068:	2b00      	cmp	r3, #0
    b06a:	d106      	bne.n	b07a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b06c:	7cbb      	ldrb	r3, [r7, #18]
    b06e:	4619      	mov	r1, r3
    b070:	68f8      	ldr	r0, [r7, #12]
    b072:	4b09      	ldr	r3, [pc, #36]	; (b098 <_usb_d_dev_ep_stall+0x88>)
    b074:	4798      	blx	r3
    b076:	6178      	str	r0, [r7, #20]
    b078:	e005      	b.n	b086 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b07a:	7cbb      	ldrb	r3, [r7, #18]
    b07c:	4619      	mov	r1, r3
    b07e:	68f8      	ldr	r0, [r7, #12]
    b080:	4b06      	ldr	r3, [pc, #24]	; (b09c <_usb_d_dev_ep_stall+0x8c>)
    b082:	4798      	blx	r3
    b084:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b086:	697b      	ldr	r3, [r7, #20]
}
    b088:	4618      	mov	r0, r3
    b08a:	3718      	adds	r7, #24
    b08c:	46bd      	mov	sp, r7
    b08e:	bd80      	pop	{r7, pc}
    b090:	00009ab1 	.word	0x00009ab1
    b094:	0000aee5 	.word	0x0000aee5
    b098:	0000af35 	.word	0x0000af35
    b09c:	0000aeb5 	.word	0x0000aeb5

0000b0a0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b0a0:	b580      	push	{r7, lr}
    b0a2:	b082      	sub	sp, #8
    b0a4:	af00      	add	r7, sp, #0
    b0a6:	6078      	str	r0, [r7, #4]
    b0a8:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b0aa:	687b      	ldr	r3, [r7, #4]
    b0ac:	7c9b      	ldrb	r3, [r3, #18]
    b0ae:	2bff      	cmp	r3, #255	; 0xff
    b0b0:	d014      	beq.n	b0dc <_usb_d_dev_trans_done+0x3c>
    b0b2:	687b      	ldr	r3, [r7, #4]
    b0b4:	7cdb      	ldrb	r3, [r3, #19]
    b0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b0ba:	b2db      	uxtb	r3, r3
    b0bc:	2b00      	cmp	r3, #0
    b0be:	d00d      	beq.n	b0dc <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b0c0:	687a      	ldr	r2, [r7, #4]
    b0c2:	7cd3      	ldrb	r3, [r2, #19]
    b0c4:	f36f 1386 	bfc	r3, #6, #1
    b0c8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b0ca:	4b06      	ldr	r3, [pc, #24]	; (b0e4 <_usb_d_dev_trans_done+0x44>)
    b0cc:	691b      	ldr	r3, [r3, #16]
    b0ce:	687a      	ldr	r2, [r7, #4]
    b0d0:	7c90      	ldrb	r0, [r2, #18]
    b0d2:	687a      	ldr	r2, [r7, #4]
    b0d4:	6892      	ldr	r2, [r2, #8]
    b0d6:	6839      	ldr	r1, [r7, #0]
    b0d8:	4798      	blx	r3
    b0da:	e000      	b.n	b0de <_usb_d_dev_trans_done+0x3e>
		return;
    b0dc:	bf00      	nop
}
    b0de:	3708      	adds	r7, #8
    b0e0:	46bd      	mov	sp, r7
    b0e2:	bd80      	pop	{r7, pc}
    b0e4:	20000a94 	.word	0x20000a94

0000b0e8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b0e8:	b580      	push	{r7, lr}
    b0ea:	b086      	sub	sp, #24
    b0ec:	af00      	add	r7, sp, #0
    b0ee:	60f8      	str	r0, [r7, #12]
    b0f0:	460b      	mov	r3, r1
    b0f2:	607a      	str	r2, [r7, #4]
    b0f4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b0f6:	68fb      	ldr	r3, [r7, #12]
    b0f8:	7c9b      	ldrb	r3, [r3, #18]
    b0fa:	f003 030f 	and.w	r3, r3, #15
    b0fe:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b100:	4b1f      	ldr	r3, [pc, #124]	; (b180 <_usb_d_dev_trans_stop+0x98>)
    b102:	881b      	ldrh	r3, [r3, #0]
    b104:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b106:	68fb      	ldr	r3, [r7, #12]
    b108:	7c9b      	ldrb	r3, [r3, #18]
    b10a:	2bff      	cmp	r3, #255	; 0xff
    b10c:	d033      	beq.n	b176 <_usb_d_dev_trans_stop+0x8e>
    b10e:	68fb      	ldr	r3, [r7, #12]
    b110:	7cdb      	ldrb	r3, [r3, #19]
    b112:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b116:	b2db      	uxtb	r3, r3
    b118:	2b00      	cmp	r3, #0
    b11a:	d02c      	beq.n	b176 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b11c:	7afb      	ldrb	r3, [r7, #11]
    b11e:	2b00      	cmp	r3, #0
    b120:	d006      	beq.n	b130 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b122:	7dfb      	ldrb	r3, [r7, #23]
    b124:	2200      	movs	r2, #0
    b126:	2101      	movs	r1, #1
    b128:	4618      	mov	r0, r3
    b12a:	4b16      	ldr	r3, [pc, #88]	; (b184 <_usb_d_dev_trans_stop+0x9c>)
    b12c:	4798      	blx	r3
    b12e:	e005      	b.n	b13c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b130:	7dfb      	ldrb	r3, [r7, #23]
    b132:	2200      	movs	r2, #0
    b134:	2100      	movs	r1, #0
    b136:	4618      	mov	r0, r3
    b138:	4b13      	ldr	r3, [pc, #76]	; (b188 <_usb_d_dev_trans_stop+0xa0>)
    b13a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b13c:	7afb      	ldrb	r3, [r7, #11]
    b13e:	f107 0218 	add.w	r2, r7, #24
    b142:	4413      	add	r3, r2
    b144:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b148:	461a      	mov	r2, r3
    b14a:	7dfb      	ldrb	r3, [r7, #23]
    b14c:	4611      	mov	r1, r2
    b14e:	4618      	mov	r0, r3
    b150:	4b0e      	ldr	r3, [pc, #56]	; (b18c <_usb_d_dev_trans_stop+0xa4>)
    b152:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b154:	7afb      	ldrb	r3, [r7, #11]
    b156:	f107 0218 	add.w	r2, r7, #24
    b15a:	4413      	add	r3, r2
    b15c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b160:	461a      	mov	r2, r3
    b162:	7dfb      	ldrb	r3, [r7, #23]
    b164:	4611      	mov	r1, r2
    b166:	4618      	mov	r0, r3
    b168:	4b09      	ldr	r3, [pc, #36]	; (b190 <_usb_d_dev_trans_stop+0xa8>)
    b16a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b16c:	6879      	ldr	r1, [r7, #4]
    b16e:	68f8      	ldr	r0, [r7, #12]
    b170:	4b08      	ldr	r3, [pc, #32]	; (b194 <_usb_d_dev_trans_stop+0xac>)
    b172:	4798      	blx	r3
    b174:	e000      	b.n	b178 <_usb_d_dev_trans_stop+0x90>
		return;
    b176:	bf00      	nop
}
    b178:	3718      	adds	r7, #24
    b17a:	46bd      	mov	sp, r7
    b17c:	bd80      	pop	{r7, pc}
    b17e:	bf00      	nop
    b180:	0001016c 	.word	0x0001016c
    b184:	0000999d 	.word	0x0000999d
    b188:	000099f5 	.word	0x000099f5
    b18c:	000094a5 	.word	0x000094a5
    b190:	000094f5 	.word	0x000094f5
    b194:	0000b0a1 	.word	0x0000b0a1

0000b198 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b198:	b580      	push	{r7, lr}
    b19a:	b086      	sub	sp, #24
    b19c:	af00      	add	r7, sp, #0
    b19e:	4603      	mov	r3, r0
    b1a0:	6039      	str	r1, [r7, #0]
    b1a2:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b1a4:	79fb      	ldrb	r3, [r7, #7]
    b1a6:	f003 030f 	and.w	r3, r3, #15
    b1aa:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b1ac:	7dfb      	ldrb	r3, [r7, #23]
    b1ae:	015b      	lsls	r3, r3, #5
    b1b0:	4a1e      	ldr	r2, [pc, #120]	; (b22c <_usb_d_dev_ep_read_req+0x94>)
    b1b2:	4413      	add	r3, r2
    b1b4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b1b6:	693b      	ldr	r3, [r7, #16]
    b1b8:	681b      	ldr	r3, [r3, #0]
    b1ba:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b1bc:	693b      	ldr	r3, [r7, #16]
    b1be:	685b      	ldr	r3, [r3, #4]
    b1c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b1c4:	b29b      	uxth	r3, r3
    b1c6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b1c8:	7dfb      	ldrb	r3, [r7, #23]
    b1ca:	2b04      	cmp	r3, #4
    b1cc:	d802      	bhi.n	b1d4 <_usb_d_dev_ep_read_req+0x3c>
    b1ce:	683b      	ldr	r3, [r7, #0]
    b1d0:	2b00      	cmp	r3, #0
    b1d2:	d102      	bne.n	b1da <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b1d4:	f06f 0311 	mvn.w	r3, #17
    b1d8:	e023      	b.n	b222 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b1da:	7dfb      	ldrb	r3, [r7, #23]
    b1dc:	4618      	mov	r0, r3
    b1de:	4b14      	ldr	r3, [pc, #80]	; (b230 <_usb_d_dev_ep_read_req+0x98>)
    b1e0:	4798      	blx	r3
    b1e2:	4603      	mov	r3, r0
    b1e4:	f083 0301 	eor.w	r3, r3, #1
    b1e8:	b2db      	uxtb	r3, r3
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	d002      	beq.n	b1f4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b1ee:	f06f 0312 	mvn.w	r3, #18
    b1f2:	e016      	b.n	b222 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b1f4:	7dfb      	ldrb	r3, [r7, #23]
    b1f6:	4618      	mov	r0, r3
    b1f8:	4b0e      	ldr	r3, [pc, #56]	; (b234 <_usb_d_dev_ep_read_req+0x9c>)
    b1fa:	4798      	blx	r3
    b1fc:	4603      	mov	r3, r0
    b1fe:	f083 0301 	eor.w	r3, r3, #1
    b202:	b2db      	uxtb	r3, r3
    b204:	2b00      	cmp	r3, #0
    b206:	d001      	beq.n	b20c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b208:	2300      	movs	r3, #0
    b20a:	e00a      	b.n	b222 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b20c:	68fb      	ldr	r3, [r7, #12]
    b20e:	2208      	movs	r2, #8
    b210:	4619      	mov	r1, r3
    b212:	6838      	ldr	r0, [r7, #0]
    b214:	4b08      	ldr	r3, [pc, #32]	; (b238 <_usb_d_dev_ep_read_req+0xa0>)
    b216:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b218:	7dfb      	ldrb	r3, [r7, #23]
    b21a:	4618      	mov	r0, r3
    b21c:	4b07      	ldr	r3, [pc, #28]	; (b23c <_usb_d_dev_ep_read_req+0xa4>)
    b21e:	4798      	blx	r3

	return bytes;
    b220:	897b      	ldrh	r3, [r7, #10]
}
    b222:	4618      	mov	r0, r3
    b224:	3718      	adds	r7, #24
    b226:	46bd      	mov	sp, r7
    b228:	bd80      	pop	{r7, pc}
    b22a:	bf00      	nop
    b22c:	20000b5c 	.word	0x20000b5c
    b230:	0000951d 	.word	0x0000951d
    b234:	000096c9 	.word	0x000096c9
    b238:	0000f959 	.word	0x0000f959
    b23c:	000096f9 	.word	0x000096f9

0000b240 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b240:	b580      	push	{r7, lr}
    b242:	b086      	sub	sp, #24
    b244:	af00      	add	r7, sp, #0
    b246:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b248:	687b      	ldr	r3, [r7, #4]
    b24a:	7a1b      	ldrb	r3, [r3, #8]
    b24c:	f003 030f 	and.w	r3, r3, #15
    b250:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b252:	687b      	ldr	r3, [r7, #4]
    b254:	7a1b      	ldrb	r3, [r3, #8]
    b256:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b25a:	2b00      	cmp	r3, #0
    b25c:	bf14      	ite	ne
    b25e:	2301      	movne	r3, #1
    b260:	2300      	moveq	r3, #0
    b262:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b264:	7d7a      	ldrb	r2, [r7, #21]
    b266:	7dbb      	ldrb	r3, [r7, #22]
    b268:	4611      	mov	r1, r2
    b26a:	4618      	mov	r0, r3
    b26c:	4b5f      	ldr	r3, [pc, #380]	; (b3ec <_usb_d_dev_ep_trans+0x1ac>)
    b26e:	4798      	blx	r3
    b270:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b272:	693b      	ldr	r3, [r7, #16]
    b274:	8a1b      	ldrh	r3, [r3, #16]
    b276:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b27a:	4293      	cmp	r3, r2
    b27c:	d004      	beq.n	b288 <_usb_d_dev_ep_trans+0x48>
    b27e:	693b      	ldr	r3, [r7, #16]
    b280:	8a1b      	ldrh	r3, [r3, #16]
    b282:	3b01      	subs	r3, #1
    b284:	b29b      	uxth	r3, r3
    b286:	e001      	b.n	b28c <_usb_d_dev_ep_trans+0x4c>
    b288:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b28c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b28e:	687b      	ldr	r3, [r7, #4]
    b290:	685a      	ldr	r2, [r3, #4]
    b292:	89fb      	ldrh	r3, [r7, #14]
    b294:	4013      	ands	r3, r2
    b296:	2b00      	cmp	r3, #0
    b298:	bf14      	ite	ne
    b29a:	2301      	movne	r3, #1
    b29c:	2300      	moveq	r3, #0
    b29e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b2a0:	2300      	movs	r3, #0
    b2a2:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b2a4:	7dbb      	ldrb	r3, [r7, #22]
    b2a6:	2b04      	cmp	r3, #4
    b2a8:	d902      	bls.n	b2b0 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b2aa:	f06f 0311 	mvn.w	r3, #17
    b2ae:	e098      	b.n	b3e2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b2b0:	687b      	ldr	r3, [r7, #4]
    b2b2:	681b      	ldr	r3, [r3, #0]
    b2b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b2b8:	d31a      	bcc.n	b2f0 <_usb_d_dev_ep_trans+0xb0>
    b2ba:	687b      	ldr	r3, [r7, #4]
    b2bc:	681b      	ldr	r3, [r3, #0]
    b2be:	461a      	mov	r2, r3
    b2c0:	687b      	ldr	r3, [r7, #4]
    b2c2:	685b      	ldr	r3, [r3, #4]
    b2c4:	4413      	add	r3, r2
    b2c6:	4a4a      	ldr	r2, [pc, #296]	; (b3f0 <_usb_d_dev_ep_trans+0x1b0>)
    b2c8:	4293      	cmp	r3, r2
    b2ca:	d811      	bhi.n	b2f0 <_usb_d_dev_ep_trans+0xb0>
    b2cc:	687b      	ldr	r3, [r7, #4]
    b2ce:	681b      	ldr	r3, [r3, #0]
    b2d0:	f003 0303 	and.w	r3, r3, #3
    b2d4:	2b00      	cmp	r3, #0
    b2d6:	d10b      	bne.n	b2f0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b2d8:	7d7b      	ldrb	r3, [r7, #21]
    b2da:	f083 0301 	eor.w	r3, r3, #1
    b2de:	b2db      	uxtb	r3, r3
    b2e0:	2b00      	cmp	r3, #0
    b2e2:	d00e      	beq.n	b302 <_usb_d_dev_ep_trans+0xc2>
    b2e4:	687b      	ldr	r3, [r7, #4]
    b2e6:	685b      	ldr	r3, [r3, #4]
    b2e8:	693a      	ldr	r2, [r7, #16]
    b2ea:	8a12      	ldrh	r2, [r2, #16]
    b2ec:	4293      	cmp	r3, r2
    b2ee:	d208      	bcs.n	b302 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b2f0:	693b      	ldr	r3, [r7, #16]
    b2f2:	68db      	ldr	r3, [r3, #12]
    b2f4:	2b00      	cmp	r3, #0
    b2f6:	d102      	bne.n	b2fe <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b2f8:	f06f 0312 	mvn.w	r3, #18
    b2fc:	e071      	b.n	b3e2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b2fe:	2301      	movs	r3, #1
    b300:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b302:	7d7b      	ldrb	r3, [r7, #21]
    b304:	f083 0301 	eor.w	r3, r3, #1
    b308:	b2db      	uxtb	r3, r3
    b30a:	2b00      	cmp	r3, #0
    b30c:	d009      	beq.n	b322 <_usb_d_dev_ep_trans+0xe2>
    b30e:	7b7b      	ldrb	r3, [r7, #13]
    b310:	2b00      	cmp	r3, #0
    b312:	d006      	beq.n	b322 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b314:	693b      	ldr	r3, [r7, #16]
    b316:	68db      	ldr	r3, [r3, #12]
    b318:	2b00      	cmp	r3, #0
    b31a:	d102      	bne.n	b322 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b31c:	f06f 0311 	mvn.w	r3, #17
    b320:	e05f      	b.n	b3e2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b322:	693b      	ldr	r3, [r7, #16]
    b324:	7cdb      	ldrb	r3, [r3, #19]
    b326:	f003 0308 	and.w	r3, r3, #8
    b32a:	b2db      	uxtb	r3, r3
    b32c:	2b00      	cmp	r3, #0
    b32e:	d001      	beq.n	b334 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b330:	2302      	movs	r3, #2
    b332:	e056      	b.n	b3e2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b334:	f107 0308 	add.w	r3, r7, #8
    b338:	4618      	mov	r0, r3
    b33a:	4b2e      	ldr	r3, [pc, #184]	; (b3f4 <_usb_d_dev_ep_trans+0x1b4>)
    b33c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b33e:	693b      	ldr	r3, [r7, #16]
    b340:	7cdb      	ldrb	r3, [r3, #19]
    b342:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b346:	b2db      	uxtb	r3, r3
    b348:	2b00      	cmp	r3, #0
    b34a:	d006      	beq.n	b35a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b34c:	f107 0308 	add.w	r3, r7, #8
    b350:	4618      	mov	r0, r3
    b352:	4b29      	ldr	r3, [pc, #164]	; (b3f8 <_usb_d_dev_ep_trans+0x1b8>)
    b354:	4798      	blx	r3
		return USB_BUSY;
    b356:	2301      	movs	r3, #1
    b358:	e043      	b.n	b3e2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b35a:	693a      	ldr	r2, [r7, #16]
    b35c:	7cd3      	ldrb	r3, [r2, #19]
    b35e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b362:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b364:	f107 0308 	add.w	r3, r7, #8
    b368:	4618      	mov	r0, r3
    b36a:	4b23      	ldr	r3, [pc, #140]	; (b3f8 <_usb_d_dev_ep_trans+0x1b8>)
    b36c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b36e:	687b      	ldr	r3, [r7, #4]
    b370:	681a      	ldr	r2, [r3, #0]
    b372:	693b      	ldr	r3, [r7, #16]
    b374:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b376:	687b      	ldr	r3, [r7, #4]
    b378:	685a      	ldr	r2, [r3, #4]
    b37a:	693b      	ldr	r3, [r7, #16]
    b37c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b37e:	693b      	ldr	r3, [r7, #16]
    b380:	2200      	movs	r2, #0
    b382:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b384:	693a      	ldr	r2, [r7, #16]
    b386:	7cd3      	ldrb	r3, [r2, #19]
    b388:	7d79      	ldrb	r1, [r7, #21]
    b38a:	f361 13c7 	bfi	r3, r1, #7, #1
    b38e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b390:	693a      	ldr	r2, [r7, #16]
    b392:	7cd3      	ldrb	r3, [r2, #19]
    b394:	7df9      	ldrb	r1, [r7, #23]
    b396:	f361 1345 	bfi	r3, r1, #5, #1
    b39a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b39c:	687b      	ldr	r3, [r7, #4]
    b39e:	7a5b      	ldrb	r3, [r3, #9]
    b3a0:	2b00      	cmp	r3, #0
    b3a2:	d007      	beq.n	b3b4 <_usb_d_dev_ep_trans+0x174>
    b3a4:	7b7b      	ldrb	r3, [r7, #13]
    b3a6:	f083 0301 	eor.w	r3, r3, #1
    b3aa:	b2db      	uxtb	r3, r3
    b3ac:	2b00      	cmp	r3, #0
    b3ae:	d001      	beq.n	b3b4 <_usb_d_dev_ep_trans+0x174>
    b3b0:	2301      	movs	r3, #1
    b3b2:	e000      	b.n	b3b6 <_usb_d_dev_ep_trans+0x176>
    b3b4:	2300      	movs	r3, #0
    b3b6:	b2db      	uxtb	r3, r3
    b3b8:	f003 0301 	and.w	r3, r3, #1
    b3bc:	b2d9      	uxtb	r1, r3
    b3be:	693a      	ldr	r2, [r7, #16]
    b3c0:	7cd3      	ldrb	r3, [r2, #19]
    b3c2:	f361 1304 	bfi	r3, r1, #4, #1
    b3c6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b3c8:	7d7b      	ldrb	r3, [r7, #21]
    b3ca:	2b00      	cmp	r3, #0
    b3cc:	d004      	beq.n	b3d8 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b3ce:	2100      	movs	r1, #0
    b3d0:	6938      	ldr	r0, [r7, #16]
    b3d2:	4b0a      	ldr	r3, [pc, #40]	; (b3fc <_usb_d_dev_ep_trans+0x1bc>)
    b3d4:	4798      	blx	r3
    b3d6:	e003      	b.n	b3e0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b3d8:	2100      	movs	r1, #0
    b3da:	6938      	ldr	r0, [r7, #16]
    b3dc:	4b08      	ldr	r3, [pc, #32]	; (b400 <_usb_d_dev_ep_trans+0x1c0>)
    b3de:	4798      	blx	r3
	}

	return ERR_NONE;
    b3e0:	2300      	movs	r3, #0
}
    b3e2:	4618      	mov	r0, r3
    b3e4:	3718      	adds	r7, #24
    b3e6:	46bd      	mov	sp, r7
    b3e8:	bd80      	pop	{r7, pc}
    b3ea:	bf00      	nop
    b3ec:	00009ab1 	.word	0x00009ab1
    b3f0:	20041fff 	.word	0x20041fff
    b3f4:	0000bc0d 	.word	0x0000bc0d
    b3f8:	0000bc33 	.word	0x0000bc33
    b3fc:	00009d79 	.word	0x00009d79
    b400:	00009f91 	.word	0x00009f91

0000b404 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b404:	b580      	push	{r7, lr}
    b406:	b084      	sub	sp, #16
    b408:	af00      	add	r7, sp, #0
    b40a:	4603      	mov	r3, r0
    b40c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b40e:	79fb      	ldrb	r3, [r7, #7]
    b410:	f003 030f 	and.w	r3, r3, #15
    b414:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b416:	79fb      	ldrb	r3, [r7, #7]
    b418:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b41c:	2b00      	cmp	r3, #0
    b41e:	bf14      	ite	ne
    b420:	2301      	movne	r3, #1
    b422:	2300      	moveq	r3, #0
    b424:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b426:	7bba      	ldrb	r2, [r7, #14]
    b428:	7bfb      	ldrb	r3, [r7, #15]
    b42a:	4611      	mov	r1, r2
    b42c:	4618      	mov	r0, r3
    b42e:	4b08      	ldr	r3, [pc, #32]	; (b450 <_usb_d_dev_ep_abort+0x4c>)
    b430:	4798      	blx	r3
    b432:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b434:	7bfb      	ldrb	r3, [r7, #15]
    b436:	2b04      	cmp	r3, #4
    b438:	d806      	bhi.n	b448 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b43a:	7bbb      	ldrb	r3, [r7, #14]
    b43c:	2202      	movs	r2, #2
    b43e:	4619      	mov	r1, r3
    b440:	68b8      	ldr	r0, [r7, #8]
    b442:	4b04      	ldr	r3, [pc, #16]	; (b454 <_usb_d_dev_ep_abort+0x50>)
    b444:	4798      	blx	r3
    b446:	e000      	b.n	b44a <_usb_d_dev_ep_abort+0x46>
		return;
    b448:	bf00      	nop
}
    b44a:	3710      	adds	r7, #16
    b44c:	46bd      	mov	sp, r7
    b44e:	bd80      	pop	{r7, pc}
    b450:	00009ab1 	.word	0x00009ab1
    b454:	0000b0e9 	.word	0x0000b0e9

0000b458 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b458:	b480      	push	{r7}
    b45a:	b085      	sub	sp, #20
    b45c:	af00      	add	r7, sp, #0
    b45e:	4603      	mov	r3, r0
    b460:	6039      	str	r1, [r7, #0]
    b462:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b464:	683b      	ldr	r3, [r7, #0]
    b466:	2b00      	cmp	r3, #0
    b468:	d001      	beq.n	b46e <_usb_d_dev_register_callback+0x16>
    b46a:	683b      	ldr	r3, [r7, #0]
    b46c:	e000      	b.n	b470 <_usb_d_dev_register_callback+0x18>
    b46e:	4b0a      	ldr	r3, [pc, #40]	; (b498 <_usb_d_dev_register_callback+0x40>)
    b470:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b472:	79fb      	ldrb	r3, [r7, #7]
    b474:	2b01      	cmp	r3, #1
    b476:	d103      	bne.n	b480 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b478:	4a08      	ldr	r2, [pc, #32]	; (b49c <_usb_d_dev_register_callback+0x44>)
    b47a:	68fb      	ldr	r3, [r7, #12]
    b47c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b47e:	e005      	b.n	b48c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b480:	79fb      	ldrb	r3, [r7, #7]
    b482:	2b00      	cmp	r3, #0
    b484:	d102      	bne.n	b48c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b486:	4a05      	ldr	r2, [pc, #20]	; (b49c <_usb_d_dev_register_callback+0x44>)
    b488:	68fb      	ldr	r3, [r7, #12]
    b48a:	6013      	str	r3, [r2, #0]
}
    b48c:	bf00      	nop
    b48e:	3714      	adds	r7, #20
    b490:	46bd      	mov	sp, r7
    b492:	f85d 7b04 	ldr.w	r7, [sp], #4
    b496:	4770      	bx	lr
    b498:	00009339 	.word	0x00009339
    b49c:	20000a94 	.word	0x20000a94

0000b4a0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b4a0:	b480      	push	{r7}
    b4a2:	b085      	sub	sp, #20
    b4a4:	af00      	add	r7, sp, #0
    b4a6:	4603      	mov	r3, r0
    b4a8:	6039      	str	r1, [r7, #0]
    b4aa:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b4ac:	683b      	ldr	r3, [r7, #0]
    b4ae:	2b00      	cmp	r3, #0
    b4b0:	d001      	beq.n	b4b6 <_usb_d_dev_register_ep_callback+0x16>
    b4b2:	683b      	ldr	r3, [r7, #0]
    b4b4:	e000      	b.n	b4b8 <_usb_d_dev_register_ep_callback+0x18>
    b4b6:	4b0e      	ldr	r3, [pc, #56]	; (b4f0 <_usb_d_dev_register_ep_callback+0x50>)
    b4b8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b4ba:	79fb      	ldrb	r3, [r7, #7]
    b4bc:	2b00      	cmp	r3, #0
    b4be:	d103      	bne.n	b4c8 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b4c0:	4a0c      	ldr	r2, [pc, #48]	; (b4f4 <_usb_d_dev_register_ep_callback+0x54>)
    b4c2:	68fb      	ldr	r3, [r7, #12]
    b4c4:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b4c6:	e00c      	b.n	b4e2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b4c8:	79fb      	ldrb	r3, [r7, #7]
    b4ca:	2b01      	cmp	r3, #1
    b4cc:	d103      	bne.n	b4d6 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b4ce:	4a09      	ldr	r2, [pc, #36]	; (b4f4 <_usb_d_dev_register_ep_callback+0x54>)
    b4d0:	68fb      	ldr	r3, [r7, #12]
    b4d2:	60d3      	str	r3, [r2, #12]
}
    b4d4:	e005      	b.n	b4e2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b4d6:	79fb      	ldrb	r3, [r7, #7]
    b4d8:	2b02      	cmp	r3, #2
    b4da:	d102      	bne.n	b4e2 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b4dc:	4a05      	ldr	r2, [pc, #20]	; (b4f4 <_usb_d_dev_register_ep_callback+0x54>)
    b4de:	68fb      	ldr	r3, [r7, #12]
    b4e0:	6113      	str	r3, [r2, #16]
}
    b4e2:	bf00      	nop
    b4e4:	3714      	adds	r7, #20
    b4e6:	46bd      	mov	sp, r7
    b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4ec:	4770      	bx	lr
    b4ee:	bf00      	nop
    b4f0:	00009339 	.word	0x00009339
    b4f4:	20000a94 	.word	0x20000a94

0000b4f8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b4f8:	b580      	push	{r7, lr}
    b4fa:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b4fc:	4b01      	ldr	r3, [pc, #4]	; (b504 <USB_0_Handler+0xc>)
    b4fe:	4798      	blx	r3
}
    b500:	bf00      	nop
    b502:	bd80      	pop	{r7, pc}
    b504:	0000a769 	.word	0x0000a769

0000b508 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b508:	b580      	push	{r7, lr}
    b50a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b50c:	4b01      	ldr	r3, [pc, #4]	; (b514 <USB_1_Handler+0xc>)
    b50e:	4798      	blx	r3
}
    b510:	bf00      	nop
    b512:	bd80      	pop	{r7, pc}
    b514:	0000a769 	.word	0x0000a769

0000b518 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b518:	b580      	push	{r7, lr}
    b51a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b51c:	4b01      	ldr	r3, [pc, #4]	; (b524 <USB_2_Handler+0xc>)
    b51e:	4798      	blx	r3
}
    b520:	bf00      	nop
    b522:	bd80      	pop	{r7, pc}
    b524:	0000a769 	.word	0x0000a769

0000b528 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b528:	b580      	push	{r7, lr}
    b52a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b52c:	4b01      	ldr	r3, [pc, #4]	; (b534 <USB_3_Handler+0xc>)
    b52e:	4798      	blx	r3
}
    b530:	bf00      	nop
    b532:	bd80      	pop	{r7, pc}
    b534:	0000a769 	.word	0x0000a769

0000b538 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b538:	b480      	push	{r7}
    b53a:	b083      	sub	sp, #12
    b53c:	af00      	add	r7, sp, #0
    b53e:	6078      	str	r0, [r7, #4]
    b540:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b542:	bf00      	nop
    b544:	687b      	ldr	r3, [r7, #4]
    b546:	689a      	ldr	r2, [r3, #8]
    b548:	683b      	ldr	r3, [r7, #0]
    b54a:	4013      	ands	r3, r2
    b54c:	2b00      	cmp	r3, #0
    b54e:	d1f9      	bne.n	b544 <hri_wdt_wait_for_sync+0xc>
	};
}
    b550:	bf00      	nop
    b552:	370c      	adds	r7, #12
    b554:	46bd      	mov	sp, r7
    b556:	f85d 7b04 	ldr.w	r7, [sp], #4
    b55a:	4770      	bx	lr

0000b55c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b55c:	b580      	push	{r7, lr}
    b55e:	b084      	sub	sp, #16
    b560:	af00      	add	r7, sp, #0
    b562:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b564:	210e      	movs	r1, #14
    b566:	6878      	ldr	r0, [r7, #4]
    b568:	4b0a      	ldr	r3, [pc, #40]	; (b594 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b56a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b56c:	687b      	ldr	r3, [r7, #4]
    b56e:	781b      	ldrb	r3, [r3, #0]
    b570:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b572:	7bfb      	ldrb	r3, [r7, #15]
    b574:	085b      	lsrs	r3, r3, #1
    b576:	b2db      	uxtb	r3, r3
    b578:	f003 0301 	and.w	r3, r3, #1
    b57c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b57e:	7bfb      	ldrb	r3, [r7, #15]
    b580:	2b00      	cmp	r3, #0
    b582:	bf14      	ite	ne
    b584:	2301      	movne	r3, #1
    b586:	2300      	moveq	r3, #0
    b588:	b2db      	uxtb	r3, r3
}
    b58a:	4618      	mov	r0, r3
    b58c:	3710      	adds	r7, #16
    b58e:	46bd      	mov	sp, r7
    b590:	bd80      	pop	{r7, pc}
    b592:	bf00      	nop
    b594:	0000b539 	.word	0x0000b539

0000b598 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b598:	b580      	push	{r7, lr}
    b59a:	b082      	sub	sp, #8
    b59c:	af00      	add	r7, sp, #0
    b59e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b5a0:	687b      	ldr	r3, [r7, #4]
    b5a2:	781b      	ldrb	r3, [r3, #0]
    b5a4:	b2db      	uxtb	r3, r3
    b5a6:	f023 0304 	bic.w	r3, r3, #4
    b5aa:	b2da      	uxtb	r2, r3
    b5ac:	687b      	ldr	r3, [r7, #4]
    b5ae:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b5b0:	210e      	movs	r1, #14
    b5b2:	6878      	ldr	r0, [r7, #4]
    b5b4:	4b02      	ldr	r3, [pc, #8]	; (b5c0 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b5b6:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b5b8:	bf00      	nop
    b5ba:	3708      	adds	r7, #8
    b5bc:	46bd      	mov	sp, r7
    b5be:	bd80      	pop	{r7, pc}
    b5c0:	0000b539 	.word	0x0000b539

0000b5c4 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b5c4:	b580      	push	{r7, lr}
    b5c6:	b084      	sub	sp, #16
    b5c8:	af00      	add	r7, sp, #0
    b5ca:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b5cc:	210e      	movs	r1, #14
    b5ce:	6878      	ldr	r0, [r7, #4]
    b5d0:	4b08      	ldr	r3, [pc, #32]	; (b5f4 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b5d2:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b5d4:	687b      	ldr	r3, [r7, #4]
    b5d6:	781b      	ldrb	r3, [r3, #0]
    b5d8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b5da:	7bfb      	ldrb	r3, [r7, #15]
    b5dc:	09db      	lsrs	r3, r3, #7
    b5de:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b5e0:	7bfb      	ldrb	r3, [r7, #15]
    b5e2:	2b00      	cmp	r3, #0
    b5e4:	bf14      	ite	ne
    b5e6:	2301      	movne	r3, #1
    b5e8:	2300      	moveq	r3, #0
    b5ea:	b2db      	uxtb	r3, r3
}
    b5ec:	4618      	mov	r0, r3
    b5ee:	3710      	adds	r7, #16
    b5f0:	46bd      	mov	sp, r7
    b5f2:	bd80      	pop	{r7, pc}
    b5f4:	0000b539 	.word	0x0000b539

0000b5f8 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b5f8:	b480      	push	{r7}
    b5fa:	b085      	sub	sp, #20
    b5fc:	af00      	add	r7, sp, #0
    b5fe:	6078      	str	r0, [r7, #4]
    b600:	460b      	mov	r3, r1
    b602:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b604:	687b      	ldr	r3, [r7, #4]
    b606:	785b      	ldrb	r3, [r3, #1]
    b608:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b60a:	7bfb      	ldrb	r3, [r7, #15]
    b60c:	f023 030f 	bic.w	r3, r3, #15
    b610:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b612:	78fb      	ldrb	r3, [r7, #3]
    b614:	f003 030f 	and.w	r3, r3, #15
    b618:	b2da      	uxtb	r2, r3
    b61a:	7bfb      	ldrb	r3, [r7, #15]
    b61c:	4313      	orrs	r3, r2
    b61e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b620:	687b      	ldr	r3, [r7, #4]
    b622:	7bfa      	ldrb	r2, [r7, #15]
    b624:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b626:	bf00      	nop
    b628:	3714      	adds	r7, #20
    b62a:	46bd      	mov	sp, r7
    b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b630:	4770      	bx	lr
	...

0000b634 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b634:	b580      	push	{r7, lr}
    b636:	b082      	sub	sp, #8
    b638:	af00      	add	r7, sp, #0
    b63a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b63c:	687b      	ldr	r3, [r7, #4]
    b63e:	2b00      	cmp	r3, #0
    b640:	d005      	beq.n	b64e <_wdt_init+0x1a>
    b642:	687b      	ldr	r3, [r7, #4]
    b644:	681b      	ldr	r3, [r3, #0]
    b646:	2b00      	cmp	r3, #0
    b648:	d001      	beq.n	b64e <_wdt_init+0x1a>
    b64a:	2301      	movs	r3, #1
    b64c:	e000      	b.n	b650 <_wdt_init+0x1c>
    b64e:	2300      	movs	r3, #0
    b650:	f003 0301 	and.w	r3, r3, #1
    b654:	b2db      	uxtb	r3, r3
    b656:	2250      	movs	r2, #80	; 0x50
    b658:	4913      	ldr	r1, [pc, #76]	; (b6a8 <_wdt_init+0x74>)
    b65a:	4618      	mov	r0, r3
    b65c:	4b13      	ldr	r3, [pc, #76]	; (b6ac <_wdt_init+0x78>)
    b65e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b660:	687b      	ldr	r3, [r7, #4]
    b662:	681b      	ldr	r3, [r3, #0]
    b664:	4618      	mov	r0, r3
    b666:	4b12      	ldr	r3, [pc, #72]	; (b6b0 <_wdt_init+0x7c>)
    b668:	4798      	blx	r3
    b66a:	4603      	mov	r3, r0
    b66c:	2b00      	cmp	r3, #0
    b66e:	d107      	bne.n	b680 <_wdt_init+0x4c>
    b670:	687b      	ldr	r3, [r7, #4]
    b672:	681b      	ldr	r3, [r3, #0]
    b674:	4618      	mov	r0, r3
    b676:	4b0f      	ldr	r3, [pc, #60]	; (b6b4 <_wdt_init+0x80>)
    b678:	4798      	blx	r3
    b67a:	4603      	mov	r3, r0
    b67c:	2b00      	cmp	r3, #0
    b67e:	d002      	beq.n	b686 <_wdt_init+0x52>
		return ERR_DENIED;
    b680:	f06f 0310 	mvn.w	r3, #16
    b684:	e00b      	b.n	b69e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b686:	687b      	ldr	r3, [r7, #4]
    b688:	681b      	ldr	r3, [r3, #0]
    b68a:	4618      	mov	r0, r3
    b68c:	4b0a      	ldr	r3, [pc, #40]	; (b6b8 <_wdt_init+0x84>)
    b68e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b690:	687b      	ldr	r3, [r7, #4]
    b692:	681b      	ldr	r3, [r3, #0]
    b694:	210b      	movs	r1, #11
    b696:	4618      	mov	r0, r3
    b698:	4b08      	ldr	r3, [pc, #32]	; (b6bc <_wdt_init+0x88>)
    b69a:	4798      	blx	r3
	}

	return ERR_NONE;
    b69c:	2300      	movs	r3, #0
}
    b69e:	4618      	mov	r0, r3
    b6a0:	3708      	adds	r7, #8
    b6a2:	46bd      	mov	sp, r7
    b6a4:	bd80      	pop	{r7, pc}
    b6a6:	bf00      	nop
    b6a8:	00010170 	.word	0x00010170
    b6ac:	00003ab1 	.word	0x00003ab1
    b6b0:	0000b5c5 	.word	0x0000b5c5
    b6b4:	0000b55d 	.word	0x0000b55d
    b6b8:	0000b599 	.word	0x0000b599
    b6bc:	0000b5f9 	.word	0x0000b5f9

0000b6c0 <hri_port_set_DIR_reg>:
{
    b6c0:	b480      	push	{r7}
    b6c2:	b085      	sub	sp, #20
    b6c4:	af00      	add	r7, sp, #0
    b6c6:	60f8      	str	r0, [r7, #12]
    b6c8:	460b      	mov	r3, r1
    b6ca:	607a      	str	r2, [r7, #4]
    b6cc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b6ce:	7afb      	ldrb	r3, [r7, #11]
    b6d0:	68fa      	ldr	r2, [r7, #12]
    b6d2:	01db      	lsls	r3, r3, #7
    b6d4:	4413      	add	r3, r2
    b6d6:	3308      	adds	r3, #8
    b6d8:	687a      	ldr	r2, [r7, #4]
    b6da:	601a      	str	r2, [r3, #0]
}
    b6dc:	bf00      	nop
    b6de:	3714      	adds	r7, #20
    b6e0:	46bd      	mov	sp, r7
    b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6e6:	4770      	bx	lr

0000b6e8 <hri_port_clear_DIR_reg>:
{
    b6e8:	b480      	push	{r7}
    b6ea:	b085      	sub	sp, #20
    b6ec:	af00      	add	r7, sp, #0
    b6ee:	60f8      	str	r0, [r7, #12]
    b6f0:	460b      	mov	r3, r1
    b6f2:	607a      	str	r2, [r7, #4]
    b6f4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b6f6:	7afb      	ldrb	r3, [r7, #11]
    b6f8:	68fa      	ldr	r2, [r7, #12]
    b6fa:	01db      	lsls	r3, r3, #7
    b6fc:	4413      	add	r3, r2
    b6fe:	3304      	adds	r3, #4
    b700:	687a      	ldr	r2, [r7, #4]
    b702:	601a      	str	r2, [r3, #0]
}
    b704:	bf00      	nop
    b706:	3714      	adds	r7, #20
    b708:	46bd      	mov	sp, r7
    b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b70e:	4770      	bx	lr

0000b710 <hri_port_set_OUT_reg>:
{
    b710:	b480      	push	{r7}
    b712:	b085      	sub	sp, #20
    b714:	af00      	add	r7, sp, #0
    b716:	60f8      	str	r0, [r7, #12]
    b718:	460b      	mov	r3, r1
    b71a:	607a      	str	r2, [r7, #4]
    b71c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b71e:	7afb      	ldrb	r3, [r7, #11]
    b720:	68fa      	ldr	r2, [r7, #12]
    b722:	01db      	lsls	r3, r3, #7
    b724:	4413      	add	r3, r2
    b726:	3318      	adds	r3, #24
    b728:	687a      	ldr	r2, [r7, #4]
    b72a:	601a      	str	r2, [r3, #0]
}
    b72c:	bf00      	nop
    b72e:	3714      	adds	r7, #20
    b730:	46bd      	mov	sp, r7
    b732:	f85d 7b04 	ldr.w	r7, [sp], #4
    b736:	4770      	bx	lr

0000b738 <hri_port_clear_OUT_reg>:
{
    b738:	b480      	push	{r7}
    b73a:	b085      	sub	sp, #20
    b73c:	af00      	add	r7, sp, #0
    b73e:	60f8      	str	r0, [r7, #12]
    b740:	460b      	mov	r3, r1
    b742:	607a      	str	r2, [r7, #4]
    b744:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b746:	7afb      	ldrb	r3, [r7, #11]
    b748:	68fa      	ldr	r2, [r7, #12]
    b74a:	01db      	lsls	r3, r3, #7
    b74c:	4413      	add	r3, r2
    b74e:	3314      	adds	r3, #20
    b750:	687a      	ldr	r2, [r7, #4]
    b752:	601a      	str	r2, [r3, #0]
}
    b754:	bf00      	nop
    b756:	3714      	adds	r7, #20
    b758:	46bd      	mov	sp, r7
    b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b75e:	4770      	bx	lr

0000b760 <hri_port_write_PMUX_PMUXE_bf>:
{
    b760:	b480      	push	{r7}
    b762:	b085      	sub	sp, #20
    b764:	af00      	add	r7, sp, #0
    b766:	6078      	str	r0, [r7, #4]
    b768:	4608      	mov	r0, r1
    b76a:	4611      	mov	r1, r2
    b76c:	461a      	mov	r2, r3
    b76e:	4603      	mov	r3, r0
    b770:	70fb      	strb	r3, [r7, #3]
    b772:	460b      	mov	r3, r1
    b774:	70bb      	strb	r3, [r7, #2]
    b776:	4613      	mov	r3, r2
    b778:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b77a:	78fa      	ldrb	r2, [r7, #3]
    b77c:	78bb      	ldrb	r3, [r7, #2]
    b77e:	6879      	ldr	r1, [r7, #4]
    b780:	01d2      	lsls	r2, r2, #7
    b782:	440a      	add	r2, r1
    b784:	4413      	add	r3, r2
    b786:	3330      	adds	r3, #48	; 0x30
    b788:	781b      	ldrb	r3, [r3, #0]
    b78a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b78c:	7bfb      	ldrb	r3, [r7, #15]
    b78e:	f023 030f 	bic.w	r3, r3, #15
    b792:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b794:	787b      	ldrb	r3, [r7, #1]
    b796:	f003 030f 	and.w	r3, r3, #15
    b79a:	b2da      	uxtb	r2, r3
    b79c:	7bfb      	ldrb	r3, [r7, #15]
    b79e:	4313      	orrs	r3, r2
    b7a0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b7a2:	78fa      	ldrb	r2, [r7, #3]
    b7a4:	78bb      	ldrb	r3, [r7, #2]
    b7a6:	6879      	ldr	r1, [r7, #4]
    b7a8:	01d2      	lsls	r2, r2, #7
    b7aa:	440a      	add	r2, r1
    b7ac:	4413      	add	r3, r2
    b7ae:	3330      	adds	r3, #48	; 0x30
    b7b0:	7bfa      	ldrb	r2, [r7, #15]
    b7b2:	701a      	strb	r2, [r3, #0]
}
    b7b4:	bf00      	nop
    b7b6:	3714      	adds	r7, #20
    b7b8:	46bd      	mov	sp, r7
    b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7be:	4770      	bx	lr

0000b7c0 <hri_port_write_PMUX_PMUXO_bf>:
{
    b7c0:	b480      	push	{r7}
    b7c2:	b085      	sub	sp, #20
    b7c4:	af00      	add	r7, sp, #0
    b7c6:	6078      	str	r0, [r7, #4]
    b7c8:	4608      	mov	r0, r1
    b7ca:	4611      	mov	r1, r2
    b7cc:	461a      	mov	r2, r3
    b7ce:	4603      	mov	r3, r0
    b7d0:	70fb      	strb	r3, [r7, #3]
    b7d2:	460b      	mov	r3, r1
    b7d4:	70bb      	strb	r3, [r7, #2]
    b7d6:	4613      	mov	r3, r2
    b7d8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b7da:	78fa      	ldrb	r2, [r7, #3]
    b7dc:	78bb      	ldrb	r3, [r7, #2]
    b7de:	6879      	ldr	r1, [r7, #4]
    b7e0:	01d2      	lsls	r2, r2, #7
    b7e2:	440a      	add	r2, r1
    b7e4:	4413      	add	r3, r2
    b7e6:	3330      	adds	r3, #48	; 0x30
    b7e8:	781b      	ldrb	r3, [r3, #0]
    b7ea:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b7ec:	7bfb      	ldrb	r3, [r7, #15]
    b7ee:	f003 030f 	and.w	r3, r3, #15
    b7f2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b7f4:	787b      	ldrb	r3, [r7, #1]
    b7f6:	011b      	lsls	r3, r3, #4
    b7f8:	b2da      	uxtb	r2, r3
    b7fa:	7bfb      	ldrb	r3, [r7, #15]
    b7fc:	4313      	orrs	r3, r2
    b7fe:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b800:	78fa      	ldrb	r2, [r7, #3]
    b802:	78bb      	ldrb	r3, [r7, #2]
    b804:	6879      	ldr	r1, [r7, #4]
    b806:	01d2      	lsls	r2, r2, #7
    b808:	440a      	add	r2, r1
    b80a:	4413      	add	r3, r2
    b80c:	3330      	adds	r3, #48	; 0x30
    b80e:	7bfa      	ldrb	r2, [r7, #15]
    b810:	701a      	strb	r2, [r3, #0]
}
    b812:	bf00      	nop
    b814:	3714      	adds	r7, #20
    b816:	46bd      	mov	sp, r7
    b818:	f85d 7b04 	ldr.w	r7, [sp], #4
    b81c:	4770      	bx	lr

0000b81e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b81e:	b480      	push	{r7}
    b820:	b085      	sub	sp, #20
    b822:	af00      	add	r7, sp, #0
    b824:	6078      	str	r0, [r7, #4]
    b826:	4608      	mov	r0, r1
    b828:	4611      	mov	r1, r2
    b82a:	461a      	mov	r2, r3
    b82c:	4603      	mov	r3, r0
    b82e:	70fb      	strb	r3, [r7, #3]
    b830:	460b      	mov	r3, r1
    b832:	70bb      	strb	r3, [r7, #2]
    b834:	4613      	mov	r3, r2
    b836:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b838:	78fa      	ldrb	r2, [r7, #3]
    b83a:	78bb      	ldrb	r3, [r7, #2]
    b83c:	6879      	ldr	r1, [r7, #4]
    b83e:	01d2      	lsls	r2, r2, #7
    b840:	440a      	add	r2, r1
    b842:	4413      	add	r3, r2
    b844:	3340      	adds	r3, #64	; 0x40
    b846:	781b      	ldrb	r3, [r3, #0]
    b848:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b84a:	7bfb      	ldrb	r3, [r7, #15]
    b84c:	f023 0301 	bic.w	r3, r3, #1
    b850:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b852:	787a      	ldrb	r2, [r7, #1]
    b854:	7bfb      	ldrb	r3, [r7, #15]
    b856:	4313      	orrs	r3, r2
    b858:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b85a:	78fa      	ldrb	r2, [r7, #3]
    b85c:	78bb      	ldrb	r3, [r7, #2]
    b85e:	6879      	ldr	r1, [r7, #4]
    b860:	01d2      	lsls	r2, r2, #7
    b862:	440a      	add	r2, r1
    b864:	4413      	add	r3, r2
    b866:	3340      	adds	r3, #64	; 0x40
    b868:	7bfa      	ldrb	r2, [r7, #15]
    b86a:	701a      	strb	r2, [r3, #0]
}
    b86c:	bf00      	nop
    b86e:	3714      	adds	r7, #20
    b870:	46bd      	mov	sp, r7
    b872:	f85d 7b04 	ldr.w	r7, [sp], #4
    b876:	4770      	bx	lr

0000b878 <hri_port_write_WRCONFIG_reg>:
{
    b878:	b480      	push	{r7}
    b87a:	b085      	sub	sp, #20
    b87c:	af00      	add	r7, sp, #0
    b87e:	60f8      	str	r0, [r7, #12]
    b880:	460b      	mov	r3, r1
    b882:	607a      	str	r2, [r7, #4]
    b884:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b886:	7afb      	ldrb	r3, [r7, #11]
    b888:	68fa      	ldr	r2, [r7, #12]
    b88a:	01db      	lsls	r3, r3, #7
    b88c:	4413      	add	r3, r2
    b88e:	3328      	adds	r3, #40	; 0x28
    b890:	687a      	ldr	r2, [r7, #4]
    b892:	601a      	str	r2, [r3, #0]
}
    b894:	bf00      	nop
    b896:	3714      	adds	r7, #20
    b898:	46bd      	mov	sp, r7
    b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b89e:	4770      	bx	lr

0000b8a0 <_gpio_set_direction>:
{
    b8a0:	b580      	push	{r7, lr}
    b8a2:	b082      	sub	sp, #8
    b8a4:	af00      	add	r7, sp, #0
    b8a6:	4603      	mov	r3, r0
    b8a8:	6039      	str	r1, [r7, #0]
    b8aa:	71fb      	strb	r3, [r7, #7]
    b8ac:	4613      	mov	r3, r2
    b8ae:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b8b0:	79bb      	ldrb	r3, [r7, #6]
    b8b2:	2b01      	cmp	r3, #1
    b8b4:	d01c      	beq.n	b8f0 <_gpio_set_direction+0x50>
    b8b6:	2b02      	cmp	r3, #2
    b8b8:	d037      	beq.n	b92a <_gpio_set_direction+0x8a>
    b8ba:	2b00      	cmp	r3, #0
    b8bc:	d14e      	bne.n	b95c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b8be:	79fb      	ldrb	r3, [r7, #7]
    b8c0:	683a      	ldr	r2, [r7, #0]
    b8c2:	4619      	mov	r1, r3
    b8c4:	482a      	ldr	r0, [pc, #168]	; (b970 <_gpio_set_direction+0xd0>)
    b8c6:	4b2b      	ldr	r3, [pc, #172]	; (b974 <_gpio_set_direction+0xd4>)
    b8c8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b8ca:	683b      	ldr	r3, [r7, #0]
    b8cc:	b29b      	uxth	r3, r3
    b8ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b8d2:	79fb      	ldrb	r3, [r7, #7]
    b8d4:	4619      	mov	r1, r3
    b8d6:	4826      	ldr	r0, [pc, #152]	; (b970 <_gpio_set_direction+0xd0>)
    b8d8:	4b27      	ldr	r3, [pc, #156]	; (b978 <_gpio_set_direction+0xd8>)
    b8da:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b8dc:	683b      	ldr	r3, [r7, #0]
    b8de:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b8e0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b8e4:	79fb      	ldrb	r3, [r7, #7]
    b8e6:	4619      	mov	r1, r3
    b8e8:	4821      	ldr	r0, [pc, #132]	; (b970 <_gpio_set_direction+0xd0>)
    b8ea:	4b23      	ldr	r3, [pc, #140]	; (b978 <_gpio_set_direction+0xd8>)
    b8ec:	4798      	blx	r3
		break;
    b8ee:	e03a      	b.n	b966 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b8f0:	79fb      	ldrb	r3, [r7, #7]
    b8f2:	683a      	ldr	r2, [r7, #0]
    b8f4:	4619      	mov	r1, r3
    b8f6:	481e      	ldr	r0, [pc, #120]	; (b970 <_gpio_set_direction+0xd0>)
    b8f8:	4b1e      	ldr	r3, [pc, #120]	; (b974 <_gpio_set_direction+0xd4>)
    b8fa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b8fc:	683b      	ldr	r3, [r7, #0]
    b8fe:	b29b      	uxth	r3, r3
    b900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b908:	79f9      	ldrb	r1, [r7, #7]
    b90a:	461a      	mov	r2, r3
    b90c:	4818      	ldr	r0, [pc, #96]	; (b970 <_gpio_set_direction+0xd0>)
    b90e:	4b1a      	ldr	r3, [pc, #104]	; (b978 <_gpio_set_direction+0xd8>)
    b910:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b912:	683b      	ldr	r3, [r7, #0]
    b914:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b916:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b91a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b91e:	79f9      	ldrb	r1, [r7, #7]
    b920:	461a      	mov	r2, r3
    b922:	4813      	ldr	r0, [pc, #76]	; (b970 <_gpio_set_direction+0xd0>)
    b924:	4b14      	ldr	r3, [pc, #80]	; (b978 <_gpio_set_direction+0xd8>)
    b926:	4798      	blx	r3
		break;
    b928:	e01d      	b.n	b966 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b92a:	79fb      	ldrb	r3, [r7, #7]
    b92c:	683a      	ldr	r2, [r7, #0]
    b92e:	4619      	mov	r1, r3
    b930:	480f      	ldr	r0, [pc, #60]	; (b970 <_gpio_set_direction+0xd0>)
    b932:	4b12      	ldr	r3, [pc, #72]	; (b97c <_gpio_set_direction+0xdc>)
    b934:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b936:	683b      	ldr	r3, [r7, #0]
    b938:	b29b      	uxth	r3, r3
    b93a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b93e:	79fb      	ldrb	r3, [r7, #7]
    b940:	4619      	mov	r1, r3
    b942:	480b      	ldr	r0, [pc, #44]	; (b970 <_gpio_set_direction+0xd0>)
    b944:	4b0c      	ldr	r3, [pc, #48]	; (b978 <_gpio_set_direction+0xd8>)
    b946:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b948:	683b      	ldr	r3, [r7, #0]
    b94a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b94c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b950:	79fb      	ldrb	r3, [r7, #7]
    b952:	4619      	mov	r1, r3
    b954:	4806      	ldr	r0, [pc, #24]	; (b970 <_gpio_set_direction+0xd0>)
    b956:	4b08      	ldr	r3, [pc, #32]	; (b978 <_gpio_set_direction+0xd8>)
    b958:	4798      	blx	r3
		break;
    b95a:	e004      	b.n	b966 <_gpio_set_direction+0xc6>
		ASSERT(false);
    b95c:	2246      	movs	r2, #70	; 0x46
    b95e:	4908      	ldr	r1, [pc, #32]	; (b980 <_gpio_set_direction+0xe0>)
    b960:	2000      	movs	r0, #0
    b962:	4b08      	ldr	r3, [pc, #32]	; (b984 <_gpio_set_direction+0xe4>)
    b964:	4798      	blx	r3
}
    b966:	bf00      	nop
    b968:	3708      	adds	r7, #8
    b96a:	46bd      	mov	sp, r7
    b96c:	bd80      	pop	{r7, pc}
    b96e:	bf00      	nop
    b970:	41008000 	.word	0x41008000
    b974:	0000b6e9 	.word	0x0000b6e9
    b978:	0000b879 	.word	0x0000b879
    b97c:	0000b6c1 	.word	0x0000b6c1
    b980:	00010188 	.word	0x00010188
    b984:	00003ab1 	.word	0x00003ab1

0000b988 <_gpio_set_level>:
{
    b988:	b580      	push	{r7, lr}
    b98a:	b082      	sub	sp, #8
    b98c:	af00      	add	r7, sp, #0
    b98e:	4603      	mov	r3, r0
    b990:	6039      	str	r1, [r7, #0]
    b992:	71fb      	strb	r3, [r7, #7]
    b994:	4613      	mov	r3, r2
    b996:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b998:	79bb      	ldrb	r3, [r7, #6]
    b99a:	2b00      	cmp	r3, #0
    b99c:	d006      	beq.n	b9ac <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b99e:	79fb      	ldrb	r3, [r7, #7]
    b9a0:	683a      	ldr	r2, [r7, #0]
    b9a2:	4619      	mov	r1, r3
    b9a4:	4806      	ldr	r0, [pc, #24]	; (b9c0 <_gpio_set_level+0x38>)
    b9a6:	4b07      	ldr	r3, [pc, #28]	; (b9c4 <_gpio_set_level+0x3c>)
    b9a8:	4798      	blx	r3
}
    b9aa:	e005      	b.n	b9b8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b9ac:	79fb      	ldrb	r3, [r7, #7]
    b9ae:	683a      	ldr	r2, [r7, #0]
    b9b0:	4619      	mov	r1, r3
    b9b2:	4803      	ldr	r0, [pc, #12]	; (b9c0 <_gpio_set_level+0x38>)
    b9b4:	4b04      	ldr	r3, [pc, #16]	; (b9c8 <_gpio_set_level+0x40>)
    b9b6:	4798      	blx	r3
}
    b9b8:	bf00      	nop
    b9ba:	3708      	adds	r7, #8
    b9bc:	46bd      	mov	sp, r7
    b9be:	bd80      	pop	{r7, pc}
    b9c0:	41008000 	.word	0x41008000
    b9c4:	0000b711 	.word	0x0000b711
    b9c8:	0000b739 	.word	0x0000b739

0000b9cc <_gpio_set_pin_function>:
{
    b9cc:	b590      	push	{r4, r7, lr}
    b9ce:	b085      	sub	sp, #20
    b9d0:	af00      	add	r7, sp, #0
    b9d2:	6078      	str	r0, [r7, #4]
    b9d4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b9d6:	687b      	ldr	r3, [r7, #4]
    b9d8:	095b      	lsrs	r3, r3, #5
    b9da:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b9dc:	687b      	ldr	r3, [r7, #4]
    b9de:	b2db      	uxtb	r3, r3
    b9e0:	f003 031f 	and.w	r3, r3, #31
    b9e4:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b9e6:	683b      	ldr	r3, [r7, #0]
    b9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
    b9ec:	d106      	bne.n	b9fc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b9ee:	7bba      	ldrb	r2, [r7, #14]
    b9f0:	7bf9      	ldrb	r1, [r7, #15]
    b9f2:	2300      	movs	r3, #0
    b9f4:	4812      	ldr	r0, [pc, #72]	; (ba40 <_gpio_set_pin_function+0x74>)
    b9f6:	4c13      	ldr	r4, [pc, #76]	; (ba44 <_gpio_set_pin_function+0x78>)
    b9f8:	47a0      	blx	r4
}
    b9fa:	e01d      	b.n	ba38 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b9fc:	7bba      	ldrb	r2, [r7, #14]
    b9fe:	7bf9      	ldrb	r1, [r7, #15]
    ba00:	2301      	movs	r3, #1
    ba02:	480f      	ldr	r0, [pc, #60]	; (ba40 <_gpio_set_pin_function+0x74>)
    ba04:	4c0f      	ldr	r4, [pc, #60]	; (ba44 <_gpio_set_pin_function+0x78>)
    ba06:	47a0      	blx	r4
		if (pin & 1) {
    ba08:	7bbb      	ldrb	r3, [r7, #14]
    ba0a:	f003 0301 	and.w	r3, r3, #1
    ba0e:	2b00      	cmp	r3, #0
    ba10:	d009      	beq.n	ba26 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    ba12:	7bbb      	ldrb	r3, [r7, #14]
    ba14:	085b      	lsrs	r3, r3, #1
    ba16:	b2da      	uxtb	r2, r3
    ba18:	683b      	ldr	r3, [r7, #0]
    ba1a:	b2db      	uxtb	r3, r3
    ba1c:	7bf9      	ldrb	r1, [r7, #15]
    ba1e:	4808      	ldr	r0, [pc, #32]	; (ba40 <_gpio_set_pin_function+0x74>)
    ba20:	4c09      	ldr	r4, [pc, #36]	; (ba48 <_gpio_set_pin_function+0x7c>)
    ba22:	47a0      	blx	r4
}
    ba24:	e008      	b.n	ba38 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    ba26:	7bbb      	ldrb	r3, [r7, #14]
    ba28:	085b      	lsrs	r3, r3, #1
    ba2a:	b2da      	uxtb	r2, r3
    ba2c:	683b      	ldr	r3, [r7, #0]
    ba2e:	b2db      	uxtb	r3, r3
    ba30:	7bf9      	ldrb	r1, [r7, #15]
    ba32:	4803      	ldr	r0, [pc, #12]	; (ba40 <_gpio_set_pin_function+0x74>)
    ba34:	4c05      	ldr	r4, [pc, #20]	; (ba4c <_gpio_set_pin_function+0x80>)
    ba36:	47a0      	blx	r4
}
    ba38:	bf00      	nop
    ba3a:	3714      	adds	r7, #20
    ba3c:	46bd      	mov	sp, r7
    ba3e:	bd90      	pop	{r4, r7, pc}
    ba40:	41008000 	.word	0x41008000
    ba44:	0000b81f 	.word	0x0000b81f
    ba48:	0000b7c1 	.word	0x0000b7c1
    ba4c:	0000b761 	.word	0x0000b761

0000ba50 <gpio_set_pin_function>:
{
    ba50:	b580      	push	{r7, lr}
    ba52:	b082      	sub	sp, #8
    ba54:	af00      	add	r7, sp, #0
    ba56:	6078      	str	r0, [r7, #4]
    ba58:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    ba5a:	6839      	ldr	r1, [r7, #0]
    ba5c:	6878      	ldr	r0, [r7, #4]
    ba5e:	4b03      	ldr	r3, [pc, #12]	; (ba6c <gpio_set_pin_function+0x1c>)
    ba60:	4798      	blx	r3
}
    ba62:	bf00      	nop
    ba64:	3708      	adds	r7, #8
    ba66:	46bd      	mov	sp, r7
    ba68:	bd80      	pop	{r7, pc}
    ba6a:	bf00      	nop
    ba6c:	0000b9cd 	.word	0x0000b9cd

0000ba70 <gpio_set_pin_direction>:
{
    ba70:	b580      	push	{r7, lr}
    ba72:	b082      	sub	sp, #8
    ba74:	af00      	add	r7, sp, #0
    ba76:	4603      	mov	r3, r0
    ba78:	460a      	mov	r2, r1
    ba7a:	71fb      	strb	r3, [r7, #7]
    ba7c:	4613      	mov	r3, r2
    ba7e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    ba80:	79fb      	ldrb	r3, [r7, #7]
    ba82:	095b      	lsrs	r3, r3, #5
    ba84:	b2d8      	uxtb	r0, r3
    ba86:	79fb      	ldrb	r3, [r7, #7]
    ba88:	f003 031f 	and.w	r3, r3, #31
    ba8c:	2201      	movs	r2, #1
    ba8e:	fa02 f303 	lsl.w	r3, r2, r3
    ba92:	79ba      	ldrb	r2, [r7, #6]
    ba94:	4619      	mov	r1, r3
    ba96:	4b03      	ldr	r3, [pc, #12]	; (baa4 <gpio_set_pin_direction+0x34>)
    ba98:	4798      	blx	r3
}
    ba9a:	bf00      	nop
    ba9c:	3708      	adds	r7, #8
    ba9e:	46bd      	mov	sp, r7
    baa0:	bd80      	pop	{r7, pc}
    baa2:	bf00      	nop
    baa4:	0000b8a1 	.word	0x0000b8a1

0000baa8 <gpio_set_pin_level>:
{
    baa8:	b580      	push	{r7, lr}
    baaa:	b082      	sub	sp, #8
    baac:	af00      	add	r7, sp, #0
    baae:	4603      	mov	r3, r0
    bab0:	460a      	mov	r2, r1
    bab2:	71fb      	strb	r3, [r7, #7]
    bab4:	4613      	mov	r3, r2
    bab6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    bab8:	79fb      	ldrb	r3, [r7, #7]
    baba:	095b      	lsrs	r3, r3, #5
    babc:	b2d8      	uxtb	r0, r3
    babe:	79fb      	ldrb	r3, [r7, #7]
    bac0:	f003 031f 	and.w	r3, r3, #31
    bac4:	2201      	movs	r2, #1
    bac6:	fa02 f303 	lsl.w	r3, r2, r3
    baca:	79ba      	ldrb	r2, [r7, #6]
    bacc:	4619      	mov	r1, r3
    bace:	4b03      	ldr	r3, [pc, #12]	; (badc <gpio_set_pin_level+0x34>)
    bad0:	4798      	blx	r3
}
    bad2:	bf00      	nop
    bad4:	3708      	adds	r7, #8
    bad6:	46bd      	mov	sp, r7
    bad8:	bd80      	pop	{r7, pc}
    bada:	bf00      	nop
    badc:	0000b989 	.word	0x0000b989

0000bae0 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    bae0:	b580      	push	{r7, lr}
    bae2:	b082      	sub	sp, #8
    bae4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    bae6:	2100      	movs	r1, #0
    bae8:	2008      	movs	r0, #8
    baea:	4b24      	ldr	r3, [pc, #144]	; (bb7c <QSPI_N25Q256_exit_xip+0x9c>)
    baec:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    baee:	2100      	movs	r1, #0
    baf0:	202b      	movs	r0, #43	; 0x2b
    baf2:	4b22      	ldr	r3, [pc, #136]	; (bb7c <QSPI_N25Q256_exit_xip+0x9c>)
    baf4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    baf6:	2100      	movs	r1, #0
    baf8:	202a      	movs	r0, #42	; 0x2a
    bafa:	4b20      	ldr	r3, [pc, #128]	; (bb7c <QSPI_N25Q256_exit_xip+0x9c>)
    bafc:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    bafe:	2102      	movs	r1, #2
    bb00:	2008      	movs	r0, #8
    bb02:	4b1f      	ldr	r3, [pc, #124]	; (bb80 <QSPI_N25Q256_exit_xip+0xa0>)
    bb04:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    bb06:	2102      	movs	r1, #2
    bb08:	202b      	movs	r0, #43	; 0x2b
    bb0a:	4b1d      	ldr	r3, [pc, #116]	; (bb80 <QSPI_N25Q256_exit_xip+0xa0>)
    bb0c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bb0e:	2102      	movs	r1, #2
    bb10:	202a      	movs	r0, #42	; 0x2a
    bb12:	4b1b      	ldr	r3, [pc, #108]	; (bb80 <QSPI_N25Q256_exit_xip+0xa0>)
    bb14:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bb16:	2101      	movs	r1, #1
    bb18:	2008      	movs	r0, #8
    bb1a:	4b1a      	ldr	r3, [pc, #104]	; (bb84 <QSPI_N25Q256_exit_xip+0xa4>)
    bb1c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bb1e:	2100      	movs	r1, #0
    bb20:	202b      	movs	r0, #43	; 0x2b
    bb22:	4b18      	ldr	r3, [pc, #96]	; (bb84 <QSPI_N25Q256_exit_xip+0xa4>)
    bb24:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bb26:	2100      	movs	r1, #0
    bb28:	202a      	movs	r0, #42	; 0x2a
    bb2a:	4b16      	ldr	r3, [pc, #88]	; (bb84 <QSPI_N25Q256_exit_xip+0xa4>)
    bb2c:	4798      	blx	r3

	delay_us(1);
    bb2e:	2001      	movs	r0, #1
    bb30:	4b15      	ldr	r3, [pc, #84]	; (bb88 <QSPI_N25Q256_exit_xip+0xa8>)
    bb32:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    bb34:	2300      	movs	r3, #0
    bb36:	607b      	str	r3, [r7, #4]
    bb38:	e010      	b.n	bb5c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bb3a:	2101      	movs	r1, #1
    bb3c:	202a      	movs	r0, #42	; 0x2a
    bb3e:	4b11      	ldr	r3, [pc, #68]	; (bb84 <QSPI_N25Q256_exit_xip+0xa4>)
    bb40:	4798      	blx	r3
		delay_us(1);
    bb42:	2001      	movs	r0, #1
    bb44:	4b10      	ldr	r3, [pc, #64]	; (bb88 <QSPI_N25Q256_exit_xip+0xa8>)
    bb46:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bb48:	2100      	movs	r1, #0
    bb4a:	202a      	movs	r0, #42	; 0x2a
    bb4c:	4b0d      	ldr	r3, [pc, #52]	; (bb84 <QSPI_N25Q256_exit_xip+0xa4>)
    bb4e:	4798      	blx	r3
		delay_us(1);
    bb50:	2001      	movs	r0, #1
    bb52:	4b0d      	ldr	r3, [pc, #52]	; (bb88 <QSPI_N25Q256_exit_xip+0xa8>)
    bb54:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    bb56:	687b      	ldr	r3, [r7, #4]
    bb58:	3301      	adds	r3, #1
    bb5a:	607b      	str	r3, [r7, #4]
    bb5c:	687b      	ldr	r3, [r7, #4]
    bb5e:	2b06      	cmp	r3, #6
    bb60:	ddeb      	ble.n	bb3a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    bb62:	2101      	movs	r1, #1
    bb64:	202b      	movs	r0, #43	; 0x2b
    bb66:	4b07      	ldr	r3, [pc, #28]	; (bb84 <QSPI_N25Q256_exit_xip+0xa4>)
    bb68:	4798      	blx	r3
	delay_us(1);
    bb6a:	2001      	movs	r0, #1
    bb6c:	4b06      	ldr	r3, [pc, #24]	; (bb88 <QSPI_N25Q256_exit_xip+0xa8>)
    bb6e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    bb70:	4b06      	ldr	r3, [pc, #24]	; (bb8c <QSPI_N25Q256_exit_xip+0xac>)
    bb72:	4798      	blx	r3
}
    bb74:	bf00      	nop
    bb76:	3708      	adds	r7, #8
    bb78:	46bd      	mov	sp, r7
    bb7a:	bd80      	pop	{r7, pc}
    bb7c:	0000ba51 	.word	0x0000ba51
    bb80:	0000ba71 	.word	0x0000ba71
    bb84:	0000baa9 	.word	0x0000baa9
    bb88:	0000221d 	.word	0x0000221d
    bb8c:	000015d1 	.word	0x000015d1

0000bb90 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    bb90:	b598      	push	{r3, r4, r7, lr}
    bb92:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    bb94:	4806      	ldr	r0, [pc, #24]	; (bbb0 <spi_nor_flash_init+0x20>)
    bb96:	4b07      	ldr	r3, [pc, #28]	; (bbb4 <spi_nor_flash_init+0x24>)
    bb98:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    bb9a:	2300      	movs	r3, #0
    bb9c:	4a06      	ldr	r2, [pc, #24]	; (bbb8 <spi_nor_flash_init+0x28>)
    bb9e:	4904      	ldr	r1, [pc, #16]	; (bbb0 <spi_nor_flash_init+0x20>)
    bba0:	4806      	ldr	r0, [pc, #24]	; (bbbc <spi_nor_flash_init+0x2c>)
    bba2:	4c07      	ldr	r4, [pc, #28]	; (bbc0 <spi_nor_flash_init+0x30>)
    bba4:	47a0      	blx	r4
    bba6:	4602      	mov	r2, r0
    bba8:	4b06      	ldr	r3, [pc, #24]	; (bbc4 <spi_nor_flash_init+0x34>)
    bbaa:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    bbac:	bf00      	nop
    bbae:	bd98      	pop	{r3, r4, r7, pc}
    bbb0:	20001128 	.word	0x20001128
    bbb4:	00002959 	.word	0x00002959
    bbb8:	0000bae1 	.word	0x0000bae1
    bbbc:	20000bfc 	.word	0x20000bfc
    bbc0:	0000bffd 	.word	0x0000bffd
    bbc4:	20001348 	.word	0x20001348

0000bbc8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    bbc8:	b580      	push	{r7, lr}
    bbca:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bbcc:	4805      	ldr	r0, [pc, #20]	; (bbe4 <cdc_device_acm_init+0x1c>)
    bbce:	4b06      	ldr	r3, [pc, #24]	; (bbe8 <cdc_device_acm_init+0x20>)
    bbd0:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    bbd2:	4b06      	ldr	r3, [pc, #24]	; (bbec <cdc_device_acm_init+0x24>)
    bbd4:	4798      	blx	r3

	usbdc_start(single_desc);
    bbd6:	4806      	ldr	r0, [pc, #24]	; (bbf0 <cdc_device_acm_init+0x28>)
    bbd8:	4b06      	ldr	r3, [pc, #24]	; (bbf4 <cdc_device_acm_init+0x2c>)
    bbda:	4798      	blx	r3
	usbdc_attach();
    bbdc:	4b06      	ldr	r3, [pc, #24]	; (bbf8 <cdc_device_acm_init+0x30>)
    bbde:	4798      	blx	r3
}
    bbe0:	bf00      	nop
    bbe2:	bd80      	pop	{r7, pc}
    bbe4:	20000c4c 	.word	0x20000c4c
    bbe8:	0000d725 	.word	0x0000d725
    bbec:	0000c99d 	.word	0x0000c99d
    bbf0:	200001d0 	.word	0x200001d0
    bbf4:	0000d7c1 	.word	0x0000d7c1
    bbf8:	0000d811 	.word	0x0000d811

0000bbfc <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    bbfc:	b580      	push	{r7, lr}
    bbfe:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    bc00:	4b01      	ldr	r3, [pc, #4]	; (bc08 <usb_init+0xc>)
    bc02:	4798      	blx	r3
}
    bc04:	bf00      	nop
    bc06:	bd80      	pop	{r7, pc}
    bc08:	0000bbc9 	.word	0x0000bbc9

0000bc0c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    bc0c:	b480      	push	{r7}
    bc0e:	b085      	sub	sp, #20
    bc10:	af00      	add	r7, sp, #0
    bc12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    bc14:	f3ef 8310 	mrs	r3, PRIMASK
    bc18:	60fb      	str	r3, [r7, #12]
  return(result);
    bc1a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    bc1c:	687b      	ldr	r3, [r7, #4]
    bc1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    bc20:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    bc22:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    bc26:	bf00      	nop
    bc28:	3714      	adds	r7, #20
    bc2a:	46bd      	mov	sp, r7
    bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc30:	4770      	bx	lr

0000bc32 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    bc32:	b480      	push	{r7}
    bc34:	b085      	sub	sp, #20
    bc36:	af00      	add	r7, sp, #0
    bc38:	6078      	str	r0, [r7, #4]
    bc3a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    bc3e:	687b      	ldr	r3, [r7, #4]
    bc40:	681b      	ldr	r3, [r3, #0]
    bc42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    bc44:	68fb      	ldr	r3, [r7, #12]
    bc46:	f383 8810 	msr	PRIMASK, r3
}
    bc4a:	bf00      	nop
    bc4c:	3714      	adds	r7, #20
    bc4e:	46bd      	mov	sp, r7
    bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc54:	4770      	bx	lr
	...

0000bc58 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    bc58:	b580      	push	{r7, lr}
    bc5a:	b08c      	sub	sp, #48	; 0x30
    bc5c:	af00      	add	r7, sp, #0
    bc5e:	6078      	str	r0, [r7, #4]
    bc60:	460b      	mov	r3, r1
    bc62:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bc64:	687b      	ldr	r3, [r7, #4]
    bc66:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bc68:	687b      	ldr	r3, [r7, #4]
    bc6a:	681b      	ldr	r3, [r3, #0]
    bc6c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    bc6e:	f107 030c 	add.w	r3, r7, #12
    bc72:	2200      	movs	r2, #0
    bc74:	601a      	str	r2, [r3, #0]
    bc76:	605a      	str	r2, [r3, #4]
    bc78:	609a      	str	r2, [r3, #8]
    bc7a:	60da      	str	r2, [r3, #12]
    bc7c:	611a      	str	r2, [r3, #16]
    bc7e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc82:	7b1b      	ldrb	r3, [r3, #12]
    bc84:	2b00      	cmp	r3, #0
    bc86:	d001      	beq.n	bc8c <n25q256a_xip_confirm+0x34>
    bc88:	2206      	movs	r2, #6
    bc8a:	e000      	b.n	bc8e <n25q256a_xip_confirm+0x36>
    bc8c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bc8e:	7b3b      	ldrb	r3, [r7, #12]
    bc90:	f362 0302 	bfi	r3, r2, #0, #3
    bc94:	733b      	strb	r3, [r7, #12]
    bc96:	7b3b      	ldrb	r3, [r7, #12]
    bc98:	f043 0310 	orr.w	r3, r3, #16
    bc9c:	733b      	strb	r3, [r7, #12]
    bc9e:	7b3b      	ldrb	r3, [r7, #12]
    bca0:	f043 0320 	orr.w	r3, r3, #32
    bca4:	733b      	strb	r3, [r7, #12]
    bca6:	7b3b      	ldrb	r3, [r7, #12]
    bca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bcac:	733b      	strb	r3, [r7, #12]
    bcae:	7b3b      	ldrb	r3, [r7, #12]
    bcb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bcb4:	733b      	strb	r3, [r7, #12]
    bcb6:	7b7b      	ldrb	r3, [r7, #13]
    bcb8:	f043 0303 	orr.w	r3, r3, #3
    bcbc:	737b      	strb	r3, [r7, #13]
    bcbe:	7b7b      	ldrb	r3, [r7, #13]
    bcc0:	2201      	movs	r2, #1
    bcc2:	f362 1305 	bfi	r3, r2, #4, #2
    bcc6:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    bcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bcca:	7b1b      	ldrb	r3, [r3, #12]
    bccc:	2b00      	cmp	r3, #0
    bcce:	d001      	beq.n	bcd4 <n25q256a_xip_confirm+0x7c>
    bcd0:	2208      	movs	r2, #8
    bcd2:	e000      	b.n	bcd6 <n25q256a_xip_confirm+0x7e>
    bcd4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bcd6:	7bbb      	ldrb	r3, [r7, #14]
    bcd8:	f362 0304 	bfi	r3, r2, #0, #5
    bcdc:	73bb      	strb	r3, [r7, #14]
    bcde:	230b      	movs	r3, #11
    bce0:	743b      	strb	r3, [r7, #16]
    bce2:	78fb      	ldrb	r3, [r7, #3]
    bce4:	2b00      	cmp	r3, #0
    bce6:	d001      	beq.n	bcec <n25q256a_xip_confirm+0x94>
    bce8:	2300      	movs	r3, #0
    bcea:	e000      	b.n	bcee <n25q256a_xip_confirm+0x96>
    bcec:	23ff      	movs	r3, #255	; 0xff
    bcee:	747b      	strb	r3, [r7, #17]
    bcf0:	2301      	movs	r3, #1
    bcf2:	61bb      	str	r3, [r7, #24]
    bcf4:	f107 0327 	add.w	r3, r7, #39	; 0x27
    bcf8:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    bcfa:	f107 030c 	add.w	r3, r7, #12
    bcfe:	4619      	mov	r1, r3
    bd00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bd02:	4b07      	ldr	r3, [pc, #28]	; (bd20 <n25q256a_xip_confirm+0xc8>)
    bd04:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    bd06:	78fb      	ldrb	r3, [r7, #3]
    bd08:	2b00      	cmp	r3, #0
    bd0a:	d001      	beq.n	bd10 <n25q256a_xip_confirm+0xb8>
    bd0c:	2202      	movs	r2, #2
    bd0e:	e000      	b.n	bd12 <n25q256a_xip_confirm+0xba>
    bd10:	2201      	movs	r2, #1
    bd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd14:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bd16:	2300      	movs	r3, #0
}
    bd18:	4618      	mov	r0, r3
    bd1a:	3730      	adds	r7, #48	; 0x30
    bd1c:	46bd      	mov	sp, r7
    bd1e:	bd80      	pop	{r7, pc}
    bd20:	000029d1 	.word	0x000029d1

0000bd24 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    bd24:	b580      	push	{r7, lr}
    bd26:	b08c      	sub	sp, #48	; 0x30
    bd28:	af00      	add	r7, sp, #0
    bd2a:	6078      	str	r0, [r7, #4]
    bd2c:	460b      	mov	r3, r1
    bd2e:	70fb      	strb	r3, [r7, #3]
    bd30:	4613      	mov	r3, r2
    bd32:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    bd34:	2300      	movs	r3, #0
    bd36:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    bd38:	687b      	ldr	r3, [r7, #4]
    bd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    bd3c:	687b      	ldr	r3, [r7, #4]
    bd3e:	681b      	ldr	r3, [r3, #0]
    bd40:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    bd42:	f107 030c 	add.w	r3, r7, #12
    bd46:	2200      	movs	r2, #0
    bd48:	601a      	str	r2, [r3, #0]
    bd4a:	605a      	str	r2, [r3, #4]
    bd4c:	609a      	str	r2, [r3, #8]
    bd4e:	60da      	str	r2, [r3, #12]
    bd50:	611a      	str	r2, [r3, #16]
    bd52:	615a      	str	r2, [r3, #20]
    bd54:	78fb      	ldrb	r3, [r7, #3]
    bd56:	f003 0307 	and.w	r3, r3, #7
    bd5a:	b2da      	uxtb	r2, r3
    bd5c:	7b3b      	ldrb	r3, [r7, #12]
    bd5e:	f362 0302 	bfi	r3, r2, #0, #3
    bd62:	733b      	strb	r3, [r7, #12]
    bd64:	7b3b      	ldrb	r3, [r7, #12]
    bd66:	f043 0310 	orr.w	r3, r3, #16
    bd6a:	733b      	strb	r3, [r7, #12]
    bd6c:	7b3b      	ldrb	r3, [r7, #12]
    bd6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bd72:	733b      	strb	r3, [r7, #12]
    bd74:	78bb      	ldrb	r3, [r7, #2]
    bd76:	743b      	strb	r3, [r7, #16]
    bd78:	2301      	movs	r3, #1
    bd7a:	61bb      	str	r3, [r7, #24]
    bd7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    bd80:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    bd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd84:	7b5b      	ldrb	r3, [r3, #13]
    bd86:	2b00      	cmp	r3, #0
    bd88:	d003      	beq.n	bd92 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    bd8a:	2100      	movs	r1, #0
    bd8c:	6878      	ldr	r0, [r7, #4]
    bd8e:	4b0a      	ldr	r3, [pc, #40]	; (bdb8 <n25q256a_read_reg+0x94>)
    bd90:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bd92:	f107 030c 	add.w	r3, r7, #12
    bd96:	4619      	mov	r1, r3
    bd98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bd9a:	4b08      	ldr	r3, [pc, #32]	; (bdbc <n25q256a_read_reg+0x98>)
    bd9c:	4798      	blx	r3
	if (n25q->xip_mode) {
    bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bda0:	7b5b      	ldrb	r3, [r3, #13]
    bda2:	2b00      	cmp	r3, #0
    bda4:	d003      	beq.n	bdae <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    bda6:	2101      	movs	r1, #1
    bda8:	6878      	ldr	r0, [r7, #4]
    bdaa:	4b03      	ldr	r3, [pc, #12]	; (bdb8 <n25q256a_read_reg+0x94>)
    bdac:	4798      	blx	r3
	}
	return status;
    bdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    bdb0:	4618      	mov	r0, r3
    bdb2:	3730      	adds	r7, #48	; 0x30
    bdb4:	46bd      	mov	sp, r7
    bdb6:	bd80      	pop	{r7, pc}
    bdb8:	0000bc59 	.word	0x0000bc59
    bdbc:	000029d1 	.word	0x000029d1

0000bdc0 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    bdc0:	b580      	push	{r7, lr}
    bdc2:	b08c      	sub	sp, #48	; 0x30
    bdc4:	af00      	add	r7, sp, #0
    bdc6:	60f8      	str	r0, [r7, #12]
    bdc8:	607b      	str	r3, [r7, #4]
    bdca:	460b      	mov	r3, r1
    bdcc:	72fb      	strb	r3, [r7, #11]
    bdce:	4613      	mov	r3, r2
    bdd0:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bdd2:	68fb      	ldr	r3, [r7, #12]
    bdd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bdd6:	68fb      	ldr	r3, [r7, #12]
    bdd8:	681b      	ldr	r3, [r3, #0]
    bdda:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    bddc:	f107 0310 	add.w	r3, r7, #16
    bde0:	2200      	movs	r2, #0
    bde2:	601a      	str	r2, [r3, #0]
    bde4:	605a      	str	r2, [r3, #4]
    bde6:	609a      	str	r2, [r3, #8]
    bde8:	60da      	str	r2, [r3, #12]
    bdea:	611a      	str	r2, [r3, #16]
    bdec:	615a      	str	r2, [r3, #20]
    bdee:	7afb      	ldrb	r3, [r7, #11]
    bdf0:	f003 0307 	and.w	r3, r3, #7
    bdf4:	b2da      	uxtb	r2, r3
    bdf6:	7c3b      	ldrb	r3, [r7, #16]
    bdf8:	f362 0302 	bfi	r3, r2, #0, #3
    bdfc:	743b      	strb	r3, [r7, #16]
    bdfe:	7c3b      	ldrb	r3, [r7, #16]
    be00:	f043 0310 	orr.w	r3, r3, #16
    be04:	743b      	strb	r3, [r7, #16]
    be06:	7c3b      	ldrb	r3, [r7, #16]
    be08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    be0c:	743b      	strb	r3, [r7, #16]
    be0e:	7c7b      	ldrb	r3, [r7, #17]
    be10:	2202      	movs	r2, #2
    be12:	f362 1305 	bfi	r3, r2, #4, #2
    be16:	747b      	strb	r3, [r7, #17]
    be18:	7abb      	ldrb	r3, [r7, #10]
    be1a:	753b      	strb	r3, [r7, #20]
    be1c:	2301      	movs	r3, #1
    be1e:	61fb      	str	r3, [r7, #28]
    be20:	1d3b      	adds	r3, r7, #4
    be22:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be26:	7b5b      	ldrb	r3, [r3, #13]
    be28:	2b00      	cmp	r3, #0
    be2a:	d003      	beq.n	be34 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    be2c:	2100      	movs	r1, #0
    be2e:	68f8      	ldr	r0, [r7, #12]
    be30:	4b09      	ldr	r3, [pc, #36]	; (be58 <n25q256a_write_reg+0x98>)
    be32:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    be34:	f107 0310 	add.w	r3, r7, #16
    be38:	4619      	mov	r1, r3
    be3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    be3c:	4b07      	ldr	r3, [pc, #28]	; (be5c <n25q256a_write_reg+0x9c>)
    be3e:	4798      	blx	r3
	if (n25q->xip_mode) {
    be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be42:	7b5b      	ldrb	r3, [r3, #13]
    be44:	2b00      	cmp	r3, #0
    be46:	d003      	beq.n	be50 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    be48:	2101      	movs	r1, #1
    be4a:	68f8      	ldr	r0, [r7, #12]
    be4c:	4b02      	ldr	r3, [pc, #8]	; (be58 <n25q256a_write_reg+0x98>)
    be4e:	4798      	blx	r3
	}
}
    be50:	bf00      	nop
    be52:	3730      	adds	r7, #48	; 0x30
    be54:	46bd      	mov	sp, r7
    be56:	bd80      	pop	{r7, pc}
    be58:	0000bc59 	.word	0x0000bc59
    be5c:	000029d1 	.word	0x000029d1

0000be60 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    be60:	b580      	push	{r7, lr}
    be62:	b090      	sub	sp, #64	; 0x40
    be64:	af00      	add	r7, sp, #0
    be66:	6078      	str	r0, [r7, #4]
    be68:	460b      	mov	r3, r1
    be6a:	70fb      	strb	r3, [r7, #3]
    be6c:	4613      	mov	r3, r2
    be6e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    be70:	687b      	ldr	r3, [r7, #4]
    be72:	681b      	ldr	r3, [r3, #0]
    be74:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    be76:	78bb      	ldrb	r3, [r7, #2]
    be78:	2b00      	cmp	r3, #0
    be7a:	d001      	beq.n	be80 <n25q256a_write_enable+0x20>
    be7c:	2306      	movs	r3, #6
    be7e:	e000      	b.n	be82 <n25q256a_write_enable+0x22>
    be80:	2304      	movs	r3, #4
    be82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    be86:	f107 0320 	add.w	r3, r7, #32
    be8a:	2200      	movs	r2, #0
    be8c:	601a      	str	r2, [r3, #0]
    be8e:	605a      	str	r2, [r3, #4]
    be90:	609a      	str	r2, [r3, #8]
    be92:	60da      	str	r2, [r3, #12]
    be94:	611a      	str	r2, [r3, #16]
    be96:	615a      	str	r2, [r3, #20]
    be98:	78fb      	ldrb	r3, [r7, #3]
    be9a:	f003 0307 	and.w	r3, r3, #7
    be9e:	b2da      	uxtb	r2, r3
    bea0:	f897 3020 	ldrb.w	r3, [r7, #32]
    bea4:	f362 0302 	bfi	r3, r2, #0, #3
    bea8:	f887 3020 	strb.w	r3, [r7, #32]
    beac:	f897 3020 	ldrb.w	r3, [r7, #32]
    beb0:	f043 0310 	orr.w	r3, r3, #16
    beb4:	f887 3020 	strb.w	r3, [r7, #32]
    beb8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    bebc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    bec0:	f107 0308 	add.w	r3, r7, #8
    bec4:	2200      	movs	r2, #0
    bec6:	601a      	str	r2, [r3, #0]
    bec8:	605a      	str	r2, [r3, #4]
    beca:	609a      	str	r2, [r3, #8]
    becc:	60da      	str	r2, [r3, #12]
    bece:	611a      	str	r2, [r3, #16]
    bed0:	615a      	str	r2, [r3, #20]
    bed2:	78fb      	ldrb	r3, [r7, #3]
    bed4:	f003 0307 	and.w	r3, r3, #7
    bed8:	b2da      	uxtb	r2, r3
    beda:	7a3b      	ldrb	r3, [r7, #8]
    bedc:	f362 0302 	bfi	r3, r2, #0, #3
    bee0:	723b      	strb	r3, [r7, #8]
    bee2:	7a3b      	ldrb	r3, [r7, #8]
    bee4:	f043 0310 	orr.w	r3, r3, #16
    bee8:	723b      	strb	r3, [r7, #8]
    beea:	7a3b      	ldrb	r3, [r7, #8]
    beec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bef0:	723b      	strb	r3, [r7, #8]
    bef2:	2305      	movs	r3, #5
    bef4:	733b      	strb	r3, [r7, #12]
    bef6:	2301      	movs	r3, #1
    bef8:	617b      	str	r3, [r7, #20]
    befa:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    befe:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    bf00:	f107 0320 	add.w	r3, r7, #32
    bf04:	4619      	mov	r1, r3
    bf06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bf08:	4b08      	ldr	r3, [pc, #32]	; (bf2c <n25q256a_write_enable+0xcc>)
    bf0a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    bf0c:	f107 0308 	add.w	r3, r7, #8
    bf10:	4619      	mov	r1, r3
    bf12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bf14:	4b05      	ldr	r3, [pc, #20]	; (bf2c <n25q256a_write_enable+0xcc>)
    bf16:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    bf18:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    bf1c:	f003 0302 	and.w	r3, r3, #2
    bf20:	2b00      	cmp	r3, #0
    bf22:	d0ed      	beq.n	bf00 <n25q256a_write_enable+0xa0>
}
    bf24:	bf00      	nop
    bf26:	3740      	adds	r7, #64	; 0x40
    bf28:	46bd      	mov	sp, r7
    bf2a:	bd80      	pop	{r7, pc}
    bf2c:	000029d1 	.word	0x000029d1

0000bf30 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    bf30:	b590      	push	{r4, r7, lr}
    bf32:	b087      	sub	sp, #28
    bf34:	af00      	add	r7, sp, #0
    bf36:	6078      	str	r0, [r7, #4]
    bf38:	460b      	mov	r3, r1
    bf3a:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    bf3c:	687b      	ldr	r3, [r7, #4]
    bf3e:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bf40:	68fb      	ldr	r3, [r7, #12]
    bf42:	7b1b      	ldrb	r3, [r3, #12]
    bf44:	2b00      	cmp	r3, #0
    bf46:	d001      	beq.n	bf4c <n25q256a_switch_mode+0x1c>
    bf48:	2306      	movs	r3, #6
    bf4a:	e000      	b.n	bf4e <n25q256a_switch_mode+0x1e>
    bf4c:	2300      	movs	r3, #0
    bf4e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bf50:	7afb      	ldrb	r3, [r7, #11]
    bf52:	2265      	movs	r2, #101	; 0x65
    bf54:	4619      	mov	r1, r3
    bf56:	6878      	ldr	r0, [r7, #4]
    bf58:	4b25      	ldr	r3, [pc, #148]	; (bff0 <n25q256a_switch_mode+0xc0>)
    bf5a:	4798      	blx	r3
    bf5c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    bf5e:	2300      	movs	r3, #0
    bf60:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    bf62:	68fb      	ldr	r3, [r7, #12]
    bf64:	7b1b      	ldrb	r3, [r3, #12]
    bf66:	78fa      	ldrb	r2, [r7, #3]
    bf68:	429a      	cmp	r2, r3
    bf6a:	d03d      	beq.n	bfe8 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    bf6c:	78fb      	ldrb	r3, [r7, #3]
    bf6e:	2b00      	cmp	r3, #0
    bf70:	d00b      	beq.n	bf8a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    bf72:	697b      	ldr	r3, [r7, #20]
    bf74:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bf78:	2b00      	cmp	r3, #0
    bf7a:	d011      	beq.n	bfa0 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    bf7c:	697b      	ldr	r3, [r7, #20]
    bf7e:	f003 031f 	and.w	r3, r3, #31
    bf82:	617b      	str	r3, [r7, #20]
			modify = 1;
    bf84:	2301      	movs	r3, #1
    bf86:	74fb      	strb	r3, [r7, #19]
    bf88:	e00a      	b.n	bfa0 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    bf8a:	697b      	ldr	r3, [r7, #20]
    bf8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bf90:	2b00      	cmp	r3, #0
    bf92:	d105      	bne.n	bfa0 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    bf94:	697b      	ldr	r3, [r7, #20]
    bf96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    bf9a:	617b      	str	r3, [r7, #20]
			modify = 1;
    bf9c:	2301      	movs	r3, #1
    bf9e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    bfa0:	7cfb      	ldrb	r3, [r7, #19]
    bfa2:	2b00      	cmp	r3, #0
    bfa4:	d021      	beq.n	bfea <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    bfa6:	68fb      	ldr	r3, [r7, #12]
    bfa8:	78fa      	ldrb	r2, [r7, #3]
    bfaa:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    bfac:	7afb      	ldrb	r3, [r7, #11]
    bfae:	2201      	movs	r2, #1
    bfb0:	4619      	mov	r1, r3
    bfb2:	6878      	ldr	r0, [r7, #4]
    bfb4:	4b0f      	ldr	r3, [pc, #60]	; (bff4 <n25q256a_switch_mode+0xc4>)
    bfb6:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    bfb8:	7af9      	ldrb	r1, [r7, #11]
    bfba:	697b      	ldr	r3, [r7, #20]
    bfbc:	2261      	movs	r2, #97	; 0x61
    bfbe:	6878      	ldr	r0, [r7, #4]
    bfc0:	4c0d      	ldr	r4, [pc, #52]	; (bff8 <n25q256a_switch_mode+0xc8>)
    bfc2:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bfc4:	78fb      	ldrb	r3, [r7, #3]
    bfc6:	2b00      	cmp	r3, #0
    bfc8:	d001      	beq.n	bfce <n25q256a_switch_mode+0x9e>
    bfca:	2306      	movs	r3, #6
    bfcc:	e000      	b.n	bfd0 <n25q256a_switch_mode+0xa0>
    bfce:	2300      	movs	r3, #0
    bfd0:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bfd2:	7afb      	ldrb	r3, [r7, #11]
    bfd4:	2265      	movs	r2, #101	; 0x65
    bfd6:	4619      	mov	r1, r3
    bfd8:	6878      	ldr	r0, [r7, #4]
    bfda:	4b05      	ldr	r3, [pc, #20]	; (bff0 <n25q256a_switch_mode+0xc0>)
    bfdc:	4798      	blx	r3
    bfde:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    bfe0:	68fb      	ldr	r3, [r7, #12]
    bfe2:	78fa      	ldrb	r2, [r7, #3]
    bfe4:	731a      	strb	r2, [r3, #12]
    bfe6:	e000      	b.n	bfea <n25q256a_switch_mode+0xba>
		return;
    bfe8:	bf00      	nop
	}
}
    bfea:	371c      	adds	r7, #28
    bfec:	46bd      	mov	sp, r7
    bfee:	bd90      	pop	{r4, r7, pc}
    bff0:	0000bd25 	.word	0x0000bd25
    bff4:	0000be61 	.word	0x0000be61
    bff8:	0000bdc1 	.word	0x0000bdc1

0000bffc <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    bffc:	b580      	push	{r7, lr}
    bffe:	b086      	sub	sp, #24
    c000:	af00      	add	r7, sp, #0
    c002:	60f8      	str	r0, [r7, #12]
    c004:	60b9      	str	r1, [r7, #8]
    c006:	607a      	str	r2, [r7, #4]
    c008:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c00a:	68fb      	ldr	r3, [r7, #12]
    c00c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c00e:	4a0c      	ldr	r2, [pc, #48]	; (c040 <n25q256a_construct+0x44>)
    c010:	68b9      	ldr	r1, [r7, #8]
    c012:	68f8      	ldr	r0, [r7, #12]
    c014:	4b0b      	ldr	r3, [pc, #44]	; (c044 <n25q256a_construct+0x48>)
    c016:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c018:	697b      	ldr	r3, [r7, #20]
    c01a:	2200      	movs	r2, #0
    c01c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c01e:	697b      	ldr	r3, [r7, #20]
    c020:	2200      	movs	r2, #0
    c022:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c024:	697b      	ldr	r3, [r7, #20]
    c026:	687a      	ldr	r2, [r7, #4]
    c028:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c02a:	78fb      	ldrb	r3, [r7, #3]
    c02c:	4619      	mov	r1, r3
    c02e:	68f8      	ldr	r0, [r7, #12]
    c030:	4b05      	ldr	r3, [pc, #20]	; (c048 <n25q256a_construct+0x4c>)
    c032:	4798      	blx	r3
	return me;
    c034:	68fb      	ldr	r3, [r7, #12]
}
    c036:	4618      	mov	r0, r3
    c038:	3718      	adds	r7, #24
    c03a:	46bd      	mov	sp, r7
    c03c:	bd80      	pop	{r7, pc}
    c03e:	bf00      	nop
    c040:	000101a4 	.word	0x000101a4
    c044:	0000c4d9 	.word	0x0000c4d9
    c048:	0000bf31 	.word	0x0000bf31

0000c04c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c04c:	b580      	push	{r7, lr}
    c04e:	b08c      	sub	sp, #48	; 0x30
    c050:	af00      	add	r7, sp, #0
    c052:	60f8      	str	r0, [r7, #12]
    c054:	60b9      	str	r1, [r7, #8]
    c056:	607a      	str	r2, [r7, #4]
    c058:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c05a:	68fb      	ldr	r3, [r7, #12]
    c05c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c05e:	68fb      	ldr	r3, [r7, #12]
    c060:	681b      	ldr	r3, [r3, #0]
    c062:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c064:	f107 0310 	add.w	r3, r7, #16
    c068:	2200      	movs	r2, #0
    c06a:	601a      	str	r2, [r3, #0]
    c06c:	605a      	str	r2, [r3, #4]
    c06e:	609a      	str	r2, [r3, #8]
    c070:	60da      	str	r2, [r3, #12]
    c072:	611a      	str	r2, [r3, #16]
    c074:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c078:	7b1b      	ldrb	r3, [r3, #12]
    c07a:	2b00      	cmp	r3, #0
    c07c:	d001      	beq.n	c082 <n25q256a_read+0x36>
    c07e:	2206      	movs	r2, #6
    c080:	e000      	b.n	c084 <n25q256a_read+0x38>
    c082:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c084:	7c3b      	ldrb	r3, [r7, #16]
    c086:	f362 0302 	bfi	r3, r2, #0, #3
    c08a:	743b      	strb	r3, [r7, #16]
    c08c:	7c3b      	ldrb	r3, [r7, #16]
    c08e:	f043 0310 	orr.w	r3, r3, #16
    c092:	743b      	strb	r3, [r7, #16]
    c094:	7c3b      	ldrb	r3, [r7, #16]
    c096:	f043 0320 	orr.w	r3, r3, #32
    c09a:	743b      	strb	r3, [r7, #16]
    c09c:	7c3b      	ldrb	r3, [r7, #16]
    c09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c0a2:	743b      	strb	r3, [r7, #16]
    c0a4:	7c7b      	ldrb	r3, [r7, #17]
    c0a6:	2201      	movs	r2, #1
    c0a8:	f362 1305 	bfi	r3, r2, #4, #2
    c0ac:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0b0:	7b1b      	ldrb	r3, [r3, #12]
    c0b2:	2b00      	cmp	r3, #0
    c0b4:	d001      	beq.n	c0ba <n25q256a_read+0x6e>
    c0b6:	220a      	movs	r2, #10
    c0b8:	e000      	b.n	c0bc <n25q256a_read+0x70>
    c0ba:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c0bc:	7cbb      	ldrb	r3, [r7, #18]
    c0be:	f362 0304 	bfi	r3, r2, #0, #5
    c0c2:	74bb      	strb	r3, [r7, #18]
    c0c4:	230b      	movs	r3, #11
    c0c6:	753b      	strb	r3, [r7, #20]
    c0c8:	687b      	ldr	r3, [r7, #4]
    c0ca:	61bb      	str	r3, [r7, #24]
    c0cc:	683b      	ldr	r3, [r7, #0]
    c0ce:	61fb      	str	r3, [r7, #28]
    c0d0:	68bb      	ldr	r3, [r7, #8]
    c0d2:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c0d4:	f107 0310 	add.w	r3, r7, #16
    c0d8:	4619      	mov	r1, r3
    c0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c0dc:	4b03      	ldr	r3, [pc, #12]	; (c0ec <n25q256a_read+0xa0>)
    c0de:	4798      	blx	r3
	return ERR_NONE;
    c0e0:	2300      	movs	r3, #0
}
    c0e2:	4618      	mov	r0, r3
    c0e4:	3730      	adds	r7, #48	; 0x30
    c0e6:	46bd      	mov	sp, r7
    c0e8:	bd80      	pop	{r7, pc}
    c0ea:	bf00      	nop
    c0ec:	000029d1 	.word	0x000029d1

0000c0f0 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c0f0:	b580      	push	{r7, lr}
    c0f2:	b08c      	sub	sp, #48	; 0x30
    c0f4:	af00      	add	r7, sp, #0
    c0f6:	60f8      	str	r0, [r7, #12]
    c0f8:	60b9      	str	r1, [r7, #8]
    c0fa:	607a      	str	r2, [r7, #4]
    c0fc:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c0fe:	68fb      	ldr	r3, [r7, #12]
    c100:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c102:	68fb      	ldr	r3, [r7, #12]
    c104:	681b      	ldr	r3, [r3, #0]
    c106:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c108:	f107 0310 	add.w	r3, r7, #16
    c10c:	2200      	movs	r2, #0
    c10e:	601a      	str	r2, [r3, #0]
    c110:	605a      	str	r2, [r3, #4]
    c112:	609a      	str	r2, [r3, #8]
    c114:	60da      	str	r2, [r3, #12]
    c116:	611a      	str	r2, [r3, #16]
    c118:	615a      	str	r2, [r3, #20]
    c11a:	7c3b      	ldrb	r3, [r7, #16]
    c11c:	f043 0310 	orr.w	r3, r3, #16
    c120:	743b      	strb	r3, [r7, #16]
    c122:	7c3b      	ldrb	r3, [r7, #16]
    c124:	f043 0320 	orr.w	r3, r3, #32
    c128:	743b      	strb	r3, [r7, #16]
    c12a:	7c3b      	ldrb	r3, [r7, #16]
    c12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c130:	743b      	strb	r3, [r7, #16]
    c132:	7c7b      	ldrb	r3, [r7, #17]
    c134:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c138:	747b      	strb	r3, [r7, #17]
    c13a:	2302      	movs	r3, #2
    c13c:	753b      	strb	r3, [r7, #20]
    c13e:	687b      	ldr	r3, [r7, #4]
    c140:	61bb      	str	r3, [r7, #24]
    c142:	683b      	ldr	r3, [r7, #0]
    c144:	61fb      	str	r3, [r7, #28]
    c146:	68bb      	ldr	r3, [r7, #8]
    c148:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c14c:	7b1b      	ldrb	r3, [r3, #12]
    c14e:	2b00      	cmp	r3, #0
    c150:	d001      	beq.n	c156 <n25q256a_write+0x66>
    c152:	2206      	movs	r2, #6
    c154:	e000      	b.n	c158 <n25q256a_write+0x68>
    c156:	2200      	movs	r2, #0
    c158:	7c3b      	ldrb	r3, [r7, #16]
    c15a:	f362 0302 	bfi	r3, r2, #0, #3
    c15e:	743b      	strb	r3, [r7, #16]
	while (length) {
    c160:	e035      	b.n	c1ce <n25q256a_write+0xde>
		cmd.address = address;
    c162:	687b      	ldr	r3, [r7, #4]
    c164:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c166:	683b      	ldr	r3, [r7, #0]
    c168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c16c:	d802      	bhi.n	c174 <n25q256a_write+0x84>
			cmd.buf_len = length;
    c16e:	683b      	ldr	r3, [r7, #0]
    c170:	61fb      	str	r3, [r7, #28]
    c172:	e002      	b.n	c17a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c174:	f44f 7380 	mov.w	r3, #256	; 0x100
    c178:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c17a:	7c3b      	ldrb	r3, [r7, #16]
    c17c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c180:	b2db      	uxtb	r3, r3
    c182:	2201      	movs	r2, #1
    c184:	4619      	mov	r1, r3
    c186:	68f8      	ldr	r0, [r7, #12]
    c188:	4b19      	ldr	r3, [pc, #100]	; (c1f0 <n25q256a_write+0x100>)
    c18a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c18c:	f107 0310 	add.w	r3, r7, #16
    c190:	4619      	mov	r1, r3
    c192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c194:	4b17      	ldr	r3, [pc, #92]	; (c1f4 <n25q256a_write+0x104>)
    c196:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c198:	bf00      	nop
    c19a:	7c3b      	ldrb	r3, [r7, #16]
    c19c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c1a0:	b2db      	uxtb	r3, r3
    c1a2:	2270      	movs	r2, #112	; 0x70
    c1a4:	4619      	mov	r1, r3
    c1a6:	68f8      	ldr	r0, [r7, #12]
    c1a8:	4b13      	ldr	r3, [pc, #76]	; (c1f8 <n25q256a_write+0x108>)
    c1aa:	4798      	blx	r3
    c1ac:	4603      	mov	r3, r0
    c1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c1b2:	2b00      	cmp	r3, #0
    c1b4:	d0f1      	beq.n	c19a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c1b6:	6a3a      	ldr	r2, [r7, #32]
    c1b8:	69fb      	ldr	r3, [r7, #28]
    c1ba:	4413      	add	r3, r2
    c1bc:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c1be:	69fb      	ldr	r3, [r7, #28]
    c1c0:	683a      	ldr	r2, [r7, #0]
    c1c2:	1ad3      	subs	r3, r2, r3
    c1c4:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c1c6:	69fb      	ldr	r3, [r7, #28]
    c1c8:	687a      	ldr	r2, [r7, #4]
    c1ca:	4413      	add	r3, r2
    c1cc:	607b      	str	r3, [r7, #4]
	while (length) {
    c1ce:	683b      	ldr	r3, [r7, #0]
    c1d0:	2b00      	cmp	r3, #0
    c1d2:	d1c6      	bne.n	c162 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1d6:	7b5b      	ldrb	r3, [r3, #13]
    c1d8:	2b00      	cmp	r3, #0
    c1da:	d003      	beq.n	c1e4 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c1dc:	2101      	movs	r1, #1
    c1de:	68f8      	ldr	r0, [r7, #12]
    c1e0:	4b06      	ldr	r3, [pc, #24]	; (c1fc <n25q256a_write+0x10c>)
    c1e2:	4798      	blx	r3
	}
	return ERR_NONE;
    c1e4:	2300      	movs	r3, #0
}
    c1e6:	4618      	mov	r0, r3
    c1e8:	3730      	adds	r7, #48	; 0x30
    c1ea:	46bd      	mov	sp, r7
    c1ec:	bd80      	pop	{r7, pc}
    c1ee:	bf00      	nop
    c1f0:	0000be61 	.word	0x0000be61
    c1f4:	000029d1 	.word	0x000029d1
    c1f8:	0000bd25 	.word	0x0000bd25
    c1fc:	0000bc59 	.word	0x0000bc59

0000c200 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c200:	b580      	push	{r7, lr}
    c202:	b090      	sub	sp, #64	; 0x40
    c204:	af00      	add	r7, sp, #0
    c206:	60f8      	str	r0, [r7, #12]
    c208:	60b9      	str	r1, [r7, #8]
    c20a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c20c:	68fb      	ldr	r3, [r7, #12]
    c20e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c210:	68fb      	ldr	r3, [r7, #12]
    c212:	681b      	ldr	r3, [r3, #0]
    c214:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c216:	f107 0314 	add.w	r3, r7, #20
    c21a:	2200      	movs	r2, #0
    c21c:	601a      	str	r2, [r3, #0]
    c21e:	605a      	str	r2, [r3, #4]
    c220:	609a      	str	r2, [r3, #8]
    c222:	60da      	str	r2, [r3, #12]
    c224:	611a      	str	r2, [r3, #16]
    c226:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c22a:	7b1b      	ldrb	r3, [r3, #12]
    c22c:	2b00      	cmp	r3, #0
    c22e:	d001      	beq.n	c234 <n25q256a_erase+0x34>
    c230:	2206      	movs	r2, #6
    c232:	e000      	b.n	c236 <n25q256a_erase+0x36>
    c234:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c236:	7d3b      	ldrb	r3, [r7, #20]
    c238:	f362 0302 	bfi	r3, r2, #0, #3
    c23c:	753b      	strb	r3, [r7, #20]
    c23e:	7d3b      	ldrb	r3, [r7, #20]
    c240:	f043 0310 	orr.w	r3, r3, #16
    c244:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c246:	687b      	ldr	r3, [r7, #4]
    c248:	4a56      	ldr	r2, [pc, #344]	; (c3a4 <n25q256a_erase+0x1a4>)
    c24a:	4293      	cmp	r3, r2
    c24c:	bf94      	ite	ls
    c24e:	2301      	movls	r3, #1
    c250:	2300      	movhi	r3, #0
    c252:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c254:	7d3b      	ldrb	r3, [r7, #20]
    c256:	f362 1345 	bfi	r3, r2, #5, #1
    c25a:	753b      	strb	r3, [r7, #20]
    c25c:	7d7b      	ldrb	r3, [r7, #21]
    c25e:	2202      	movs	r2, #2
    c260:	f362 1305 	bfi	r3, r2, #4, #2
    c264:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c266:	68bb      	ldr	r3, [r7, #8]
    c268:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c26a:	687b      	ldr	r3, [r7, #4]
    c26c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c26e:	2300      	movs	r3, #0
    c270:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c272:	687b      	ldr	r3, [r7, #4]
    c274:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c278:	2b00      	cmp	r3, #0
    c27a:	d104      	bne.n	c286 <n25q256a_erase+0x86>
    c27c:	68bb      	ldr	r3, [r7, #8]
    c27e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c282:	2b00      	cmp	r3, #0
    c284:	d002      	beq.n	c28c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c286:	f06f 030c 	mvn.w	r3, #12
    c28a:	e087      	b.n	c39c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c28c:	687b      	ldr	r3, [r7, #4]
    c28e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c292:	d368      	bcc.n	c366 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c294:	23c7      	movs	r3, #199	; 0xc7
    c296:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c298:	7d3b      	ldrb	r3, [r7, #20]
    c29a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c29e:	b2db      	uxtb	r3, r3
    c2a0:	2201      	movs	r2, #1
    c2a2:	4619      	mov	r1, r3
    c2a4:	68f8      	ldr	r0, [r7, #12]
    c2a6:	4b40      	ldr	r3, [pc, #256]	; (c3a8 <n25q256a_erase+0x1a8>)
    c2a8:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c2aa:	f107 0314 	add.w	r3, r7, #20
    c2ae:	4619      	mov	r1, r3
    c2b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c2b2:	4b3e      	ldr	r3, [pc, #248]	; (c3ac <n25q256a_erase+0x1ac>)
    c2b4:	4798      	blx	r3
    c2b6:	e059      	b.n	c36c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c2ba:	b29b      	uxth	r3, r3
    c2bc:	2b00      	cmp	r3, #0
    c2be:	d11f      	bne.n	c300 <n25q256a_erase+0x100>
    c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c2c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c2c6:	d31b      	bcc.n	c300 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c2ca:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c2cc:	23d8      	movs	r3, #216	; 0xd8
    c2ce:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c2d0:	7d3b      	ldrb	r3, [r7, #20]
    c2d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c2d6:	b2db      	uxtb	r3, r3
    c2d8:	2201      	movs	r2, #1
    c2da:	4619      	mov	r1, r3
    c2dc:	68f8      	ldr	r0, [r7, #12]
    c2de:	4b32      	ldr	r3, [pc, #200]	; (c3a8 <n25q256a_erase+0x1a8>)
    c2e0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c2e2:	f107 0314 	add.w	r3, r7, #20
    c2e6:	4619      	mov	r1, r3
    c2e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c2ea:	4b30      	ldr	r3, [pc, #192]	; (c3ac <n25q256a_erase+0x1ac>)
    c2ec:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c2f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c2f8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c2fc:	63bb      	str	r3, [r7, #56]	; 0x38
    c2fe:	e023      	b.n	c348 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c306:	d31b      	bcc.n	c340 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c30a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c30c:	2320      	movs	r3, #32
    c30e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c310:	7d3b      	ldrb	r3, [r7, #20]
    c312:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c316:	b2db      	uxtb	r3, r3
    c318:	2201      	movs	r2, #1
    c31a:	4619      	mov	r1, r3
    c31c:	68f8      	ldr	r0, [r7, #12]
    c31e:	4b22      	ldr	r3, [pc, #136]	; (c3a8 <n25q256a_erase+0x1a8>)
    c320:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c322:	f107 0314 	add.w	r3, r7, #20
    c326:	4619      	mov	r1, r3
    c328:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c32a:	4b20      	ldr	r3, [pc, #128]	; (c3ac <n25q256a_erase+0x1ac>)
    c32c:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c334:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c338:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c33c:	63bb      	str	r3, [r7, #56]	; 0x38
    c33e:	e003      	b.n	c348 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c340:	f06f 030c 	mvn.w	r3, #12
    c344:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c346:	e011      	b.n	c36c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c348:	bf00      	nop
    c34a:	7d3b      	ldrb	r3, [r7, #20]
    c34c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c350:	b2db      	uxtb	r3, r3
    c352:	2270      	movs	r2, #112	; 0x70
    c354:	4619      	mov	r1, r3
    c356:	68f8      	ldr	r0, [r7, #12]
    c358:	4b15      	ldr	r3, [pc, #84]	; (c3b0 <n25q256a_erase+0x1b0>)
    c35a:	4798      	blx	r3
    c35c:	4603      	mov	r3, r0
    c35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c362:	2b00      	cmp	r3, #0
    c364:	d0f1      	beq.n	c34a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c368:	2b00      	cmp	r3, #0
    c36a:	d1a5      	bne.n	c2b8 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c36c:	bf00      	nop
    c36e:	7d3b      	ldrb	r3, [r7, #20]
    c370:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c374:	b2db      	uxtb	r3, r3
    c376:	2270      	movs	r2, #112	; 0x70
    c378:	4619      	mov	r1, r3
    c37a:	68f8      	ldr	r0, [r7, #12]
    c37c:	4b0c      	ldr	r3, [pc, #48]	; (c3b0 <n25q256a_erase+0x1b0>)
    c37e:	4798      	blx	r3
    c380:	4603      	mov	r3, r0
    c382:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c386:	2b00      	cmp	r3, #0
    c388:	d0f1      	beq.n	c36e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c38c:	7b5b      	ldrb	r3, [r3, #13]
    c38e:	2b00      	cmp	r3, #0
    c390:	d003      	beq.n	c39a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c392:	2101      	movs	r1, #1
    c394:	68f8      	ldr	r0, [r7, #12]
    c396:	4b07      	ldr	r3, [pc, #28]	; (c3b4 <n25q256a_erase+0x1b4>)
    c398:	4798      	blx	r3
	}
	return rc;
    c39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c39c:	4618      	mov	r0, r3
    c39e:	3740      	adds	r7, #64	; 0x40
    c3a0:	46bd      	mov	sp, r7
    c3a2:	bd80      	pop	{r7, pc}
    c3a4:	001fffff 	.word	0x001fffff
    c3a8:	0000be61 	.word	0x0000be61
    c3ac:	000029d1 	.word	0x000029d1
    c3b0:	0000bd25 	.word	0x0000bd25
    c3b4:	0000bc59 	.word	0x0000bc59

0000c3b8 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c3b8:	b590      	push	{r4, r7, lr}
    c3ba:	b085      	sub	sp, #20
    c3bc:	af00      	add	r7, sp, #0
    c3be:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c3c0:	687b      	ldr	r3, [r7, #4]
    c3c2:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c3c4:	68fb      	ldr	r3, [r7, #12]
    c3c6:	7b1b      	ldrb	r3, [r3, #12]
    c3c8:	2b00      	cmp	r3, #0
    c3ca:	d001      	beq.n	c3d0 <n25q256a_enable_xip+0x18>
    c3cc:	2306      	movs	r3, #6
    c3ce:	e000      	b.n	c3d2 <n25q256a_enable_xip+0x1a>
    c3d0:	2300      	movs	r3, #0
    c3d2:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c3d4:	68fb      	ldr	r3, [r7, #12]
    c3d6:	7b5b      	ldrb	r3, [r3, #13]
    c3d8:	2b00      	cmp	r3, #0
    c3da:	d129      	bne.n	c430 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c3dc:	7afb      	ldrb	r3, [r7, #11]
    c3de:	2285      	movs	r2, #133	; 0x85
    c3e0:	4619      	mov	r1, r3
    c3e2:	6878      	ldr	r0, [r7, #4]
    c3e4:	4b15      	ldr	r3, [pc, #84]	; (c43c <n25q256a_enable_xip+0x84>)
    c3e6:	4798      	blx	r3
    c3e8:	4603      	mov	r3, r0
    c3ea:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c3ec:	7abb      	ldrb	r3, [r7, #10]
    c3ee:	f003 0308 	and.w	r3, r3, #8
    c3f2:	2b00      	cmp	r3, #0
    c3f4:	d015      	beq.n	c422 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c3f6:	7abb      	ldrb	r3, [r7, #10]
    c3f8:	f023 0308 	bic.w	r3, r3, #8
    c3fc:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c3fe:	7abb      	ldrb	r3, [r7, #10]
    c400:	7af9      	ldrb	r1, [r7, #11]
    c402:	2281      	movs	r2, #129	; 0x81
    c404:	6878      	ldr	r0, [r7, #4]
    c406:	4c0e      	ldr	r4, [pc, #56]	; (c440 <n25q256a_enable_xip+0x88>)
    c408:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c40a:	bf00      	nop
    c40c:	7afb      	ldrb	r3, [r7, #11]
    c40e:	2270      	movs	r2, #112	; 0x70
    c410:	4619      	mov	r1, r3
    c412:	6878      	ldr	r0, [r7, #4]
    c414:	4b09      	ldr	r3, [pc, #36]	; (c43c <n25q256a_enable_xip+0x84>)
    c416:	4798      	blx	r3
    c418:	4603      	mov	r3, r0
    c41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c41e:	2b00      	cmp	r3, #0
    c420:	d0f4      	beq.n	c40c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c422:	68fb      	ldr	r3, [r7, #12]
    c424:	2201      	movs	r2, #1
    c426:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c428:	2101      	movs	r1, #1
    c42a:	6878      	ldr	r0, [r7, #4]
    c42c:	4b05      	ldr	r3, [pc, #20]	; (c444 <n25q256a_enable_xip+0x8c>)
    c42e:	4798      	blx	r3
	}
	return ERR_NONE;
    c430:	2300      	movs	r3, #0
}
    c432:	4618      	mov	r0, r3
    c434:	3714      	adds	r7, #20
    c436:	46bd      	mov	sp, r7
    c438:	bd90      	pop	{r4, r7, pc}
    c43a:	bf00      	nop
    c43c:	0000bd25 	.word	0x0000bd25
    c440:	0000bdc1 	.word	0x0000bdc1
    c444:	0000bc59 	.word	0x0000bc59

0000c448 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c448:	b580      	push	{r7, lr}
    c44a:	b086      	sub	sp, #24
    c44c:	af00      	add	r7, sp, #0
    c44e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c450:	687b      	ldr	r3, [r7, #4]
    c452:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c454:	687b      	ldr	r3, [r7, #4]
    c456:	681b      	ldr	r3, [r3, #0]
    c458:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c45a:	697b      	ldr	r3, [r7, #20]
    c45c:	7b1b      	ldrb	r3, [r3, #12]
    c45e:	2b00      	cmp	r3, #0
    c460:	d001      	beq.n	c466 <n25q256a_disable_xip+0x1e>
    c462:	2306      	movs	r3, #6
    c464:	e000      	b.n	c468 <n25q256a_disable_xip+0x20>
    c466:	2300      	movs	r3, #0
    c468:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c46a:	2100      	movs	r1, #0
    c46c:	6878      	ldr	r0, [r7, #4]
    c46e:	4b15      	ldr	r3, [pc, #84]	; (c4c4 <n25q256a_disable_xip+0x7c>)
    c470:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c472:	7bfb      	ldrb	r3, [r7, #15]
    c474:	2285      	movs	r2, #133	; 0x85
    c476:	4619      	mov	r1, r3
    c478:	6878      	ldr	r0, [r7, #4]
    c47a:	4b13      	ldr	r3, [pc, #76]	; (c4c8 <n25q256a_disable_xip+0x80>)
    c47c:	4798      	blx	r3
    c47e:	4603      	mov	r3, r0
    c480:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c482:	7bbb      	ldrb	r3, [r7, #14]
    c484:	f003 0308 	and.w	r3, r3, #8
    c488:	2b00      	cmp	r3, #0
    c48a:	d113      	bne.n	c4b4 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c48c:	697b      	ldr	r3, [r7, #20]
    c48e:	689b      	ldr	r3, [r3, #8]
    c490:	2b00      	cmp	r3, #0
    c492:	d00f      	beq.n	c4b4 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c494:	693b      	ldr	r3, [r7, #16]
    c496:	681b      	ldr	r3, [r3, #0]
    c498:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c49a:	6938      	ldr	r0, [r7, #16]
    c49c:	4b0b      	ldr	r3, [pc, #44]	; (c4cc <n25q256a_disable_xip+0x84>)
    c49e:	4798      	blx	r3
			n25q->pin_exit_xip();
    c4a0:	697b      	ldr	r3, [r7, #20]
    c4a2:	689b      	ldr	r3, [r3, #8]
    c4a4:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c4a6:	68b9      	ldr	r1, [r7, #8]
    c4a8:	6938      	ldr	r0, [r7, #16]
    c4aa:	4b09      	ldr	r3, [pc, #36]	; (c4d0 <n25q256a_disable_xip+0x88>)
    c4ac:	4798      	blx	r3
			qspi_sync_enable(descr);
    c4ae:	6938      	ldr	r0, [r7, #16]
    c4b0:	4b08      	ldr	r3, [pc, #32]	; (c4d4 <n25q256a_disable_xip+0x8c>)
    c4b2:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c4b4:	697b      	ldr	r3, [r7, #20]
    c4b6:	2200      	movs	r2, #0
    c4b8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c4ba:	2300      	movs	r3, #0
}
    c4bc:	4618      	mov	r0, r3
    c4be:	3718      	adds	r7, #24
    c4c0:	46bd      	mov	sp, r7
    c4c2:	bd80      	pop	{r7, pc}
    c4c4:	0000bc59 	.word	0x0000bc59
    c4c8:	0000bd25 	.word	0x0000bd25
    c4cc:	00002995 	.word	0x00002995
    c4d0:	0000290d 	.word	0x0000290d
    c4d4:	00002959 	.word	0x00002959

0000c4d8 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c4d8:	b480      	push	{r7}
    c4da:	b085      	sub	sp, #20
    c4dc:	af00      	add	r7, sp, #0
    c4de:	60f8      	str	r0, [r7, #12]
    c4e0:	60b9      	str	r1, [r7, #8]
    c4e2:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c4e4:	68fb      	ldr	r3, [r7, #12]
    c4e6:	68ba      	ldr	r2, [r7, #8]
    c4e8:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c4ea:	68fb      	ldr	r3, [r7, #12]
    c4ec:	687a      	ldr	r2, [r7, #4]
    c4ee:	605a      	str	r2, [r3, #4]

	return me;
    c4f0:	68fb      	ldr	r3, [r7, #12]
}
    c4f2:	4618      	mov	r0, r3
    c4f4:	3714      	adds	r7, #20
    c4f6:	46bd      	mov	sp, r7
    c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4fc:	4770      	bx	lr

0000c4fe <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c4fe:	b480      	push	{r7}
    c500:	b083      	sub	sp, #12
    c502:	af00      	add	r7, sp, #0
    c504:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c506:	687b      	ldr	r3, [r7, #4]
    c508:	781b      	ldrb	r3, [r3, #0]
    c50a:	b29a      	uxth	r2, r3
    c50c:	687b      	ldr	r3, [r7, #4]
    c50e:	3301      	adds	r3, #1
    c510:	781b      	ldrb	r3, [r3, #0]
    c512:	b29b      	uxth	r3, r3
    c514:	021b      	lsls	r3, r3, #8
    c516:	b29b      	uxth	r3, r3
    c518:	4413      	add	r3, r2
    c51a:	b29b      	uxth	r3, r3
}
    c51c:	4618      	mov	r0, r3
    c51e:	370c      	adds	r7, #12
    c520:	46bd      	mov	sp, r7
    c522:	f85d 7b04 	ldr.w	r7, [sp], #4
    c526:	4770      	bx	lr

0000c528 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c528:	b480      	push	{r7}
    c52a:	b083      	sub	sp, #12
    c52c:	af00      	add	r7, sp, #0
    c52e:	6078      	str	r0, [r7, #4]
	return desc[0];
    c530:	687b      	ldr	r3, [r7, #4]
    c532:	781b      	ldrb	r3, [r3, #0]
}
    c534:	4618      	mov	r0, r3
    c536:	370c      	adds	r7, #12
    c538:	46bd      	mov	sp, r7
    c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c53e:	4770      	bx	lr

0000c540 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c540:	b580      	push	{r7, lr}
    c542:	b082      	sub	sp, #8
    c544:	af00      	add	r7, sp, #0
    c546:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c548:	6878      	ldr	r0, [r7, #4]
    c54a:	4b05      	ldr	r3, [pc, #20]	; (c560 <usb_desc_next+0x20>)
    c54c:	4798      	blx	r3
    c54e:	4603      	mov	r3, r0
    c550:	461a      	mov	r2, r3
    c552:	687b      	ldr	r3, [r7, #4]
    c554:	4413      	add	r3, r2
}
    c556:	4618      	mov	r0, r3
    c558:	3708      	adds	r7, #8
    c55a:	46bd      	mov	sp, r7
    c55c:	bd80      	pop	{r7, pc}
    c55e:	bf00      	nop
    c560:	0000c529 	.word	0x0000c529

0000c564 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c564:	b580      	push	{r7, lr}
    c566:	b08c      	sub	sp, #48	; 0x30
    c568:	af00      	add	r7, sp, #0
    c56a:	6078      	str	r0, [r7, #4]
    c56c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c56e:	687b      	ldr	r3, [r7, #4]
    c570:	689b      	ldr	r3, [r3, #8]
    c572:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c574:	683b      	ldr	r3, [r7, #0]
    c576:	681b      	ldr	r3, [r3, #0]
    c578:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c57a:	2300      	movs	r3, #0
    c57c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c580:	e08f      	b.n	c6a2 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c584:	2b00      	cmp	r3, #0
    c586:	d102      	bne.n	c58e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c588:	f06f 0309 	mvn.w	r3, #9
    c58c:	e092      	b.n	c6b4 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c590:	789b      	ldrb	r3, [r3, #2]
    c592:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c596:	795b      	ldrb	r3, [r3, #5]
    c598:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c59a:	7c7b      	ldrb	r3, [r7, #17]
    c59c:	2b02      	cmp	r3, #2
    c59e:	d002      	beq.n	c5a6 <cdcdf_acm_enable+0x42>
    c5a0:	7c7b      	ldrb	r3, [r7, #17]
    c5a2:	2b0a      	cmp	r3, #10
    c5a4:	d121      	bne.n	c5ea <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c5a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c5aa:	6a3a      	ldr	r2, [r7, #32]
    c5ac:	5cd2      	ldrb	r2, [r2, r3]
    c5ae:	7bbb      	ldrb	r3, [r7, #14]
    c5b0:	429a      	cmp	r2, r3
    c5b2:	d102      	bne.n	c5ba <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c5b4:	f06f 0311 	mvn.w	r3, #17
    c5b8:	e07c      	b.n	c6b4 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c5ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c5be:	6a3a      	ldr	r2, [r7, #32]
    c5c0:	5cd3      	ldrb	r3, [r2, r3]
    c5c2:	2bff      	cmp	r3, #255	; 0xff
    c5c4:	d002      	beq.n	c5cc <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c5c6:	f06f 031b 	mvn.w	r3, #27
    c5ca:	e073      	b.n	c6b4 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c5d0:	7bb9      	ldrb	r1, [r7, #14]
    c5d2:	6a3a      	ldr	r2, [r7, #32]
    c5d4:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c5d6:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c5d8:	683b      	ldr	r3, [r7, #0]
    c5da:	685b      	ldr	r3, [r3, #4]
    c5dc:	2205      	movs	r2, #5
    c5de:	4619      	mov	r1, r3
    c5e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c5e2:	4b36      	ldr	r3, [pc, #216]	; (c6bc <cdcdf_acm_enable+0x158>)
    c5e4:	4798      	blx	r3
    c5e6:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c5e8:	e047      	b.n	c67a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c5ea:	f06f 0309 	mvn.w	r3, #9
    c5ee:	e061      	b.n	c6b4 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c5f2:	789b      	ldrb	r3, [r3, #2]
    c5f4:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c5f8:	78db      	ldrb	r3, [r3, #3]
    c5fa:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c5fe:	3304      	adds	r3, #4
    c600:	4618      	mov	r0, r3
    c602:	4b2f      	ldr	r3, [pc, #188]	; (c6c0 <cdcdf_acm_enable+0x15c>)
    c604:	4798      	blx	r3
    c606:	4603      	mov	r3, r0
    c608:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c60a:	7ebb      	ldrb	r3, [r7, #26]
    c60c:	7ef9      	ldrb	r1, [r7, #27]
    c60e:	8bba      	ldrh	r2, [r7, #28]
    c610:	4618      	mov	r0, r3
    c612:	4b2c      	ldr	r3, [pc, #176]	; (c6c4 <cdcdf_acm_enable+0x160>)
    c614:	4798      	blx	r3
    c616:	4603      	mov	r3, r0
    c618:	2b00      	cmp	r3, #0
    c61a:	d002      	beq.n	c622 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c61c:	f06f 0313 	mvn.w	r3, #19
    c620:	e048      	b.n	c6b4 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c622:	7ebb      	ldrb	r3, [r7, #26]
    c624:	b25b      	sxtb	r3, r3
    c626:	2b00      	cmp	r3, #0
    c628:	da0f      	bge.n	c64a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c62a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c62e:	7eb9      	ldrb	r1, [r7, #26]
    c630:	6a3a      	ldr	r2, [r7, #32]
    c632:	4413      	add	r3, r2
    c634:	460a      	mov	r2, r1
    c636:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c63c:	6a3a      	ldr	r2, [r7, #32]
    c63e:	4413      	add	r3, r2
    c640:	789b      	ldrb	r3, [r3, #2]
    c642:	4618      	mov	r0, r3
    c644:	4b20      	ldr	r3, [pc, #128]	; (c6c8 <cdcdf_acm_enable+0x164>)
    c646:	4798      	blx	r3
    c648:	e007      	b.n	c65a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c64a:	7eba      	ldrb	r2, [r7, #26]
    c64c:	6a3b      	ldr	r3, [r7, #32]
    c64e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c650:	6a3b      	ldr	r3, [r7, #32]
    c652:	791b      	ldrb	r3, [r3, #4]
    c654:	4618      	mov	r0, r3
    c656:	4b1c      	ldr	r3, [pc, #112]	; (c6c8 <cdcdf_acm_enable+0x164>)
    c658:	4798      	blx	r3
			}
			desc->sod = ep;
    c65a:	683b      	ldr	r3, [r7, #0]
    c65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c65e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c660:	683b      	ldr	r3, [r7, #0]
    c662:	681b      	ldr	r3, [r3, #0]
    c664:	4618      	mov	r0, r3
    c666:	4b19      	ldr	r3, [pc, #100]	; (c6cc <cdcdf_acm_enable+0x168>)
    c668:	4798      	blx	r3
    c66a:	4602      	mov	r2, r0
    c66c:	683b      	ldr	r3, [r7, #0]
    c66e:	685b      	ldr	r3, [r3, #4]
    c670:	4619      	mov	r1, r3
    c672:	4610      	mov	r0, r2
    c674:	4b16      	ldr	r3, [pc, #88]	; (c6d0 <cdcdf_acm_enable+0x16c>)
    c676:	4798      	blx	r3
    c678:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c67c:	2b00      	cmp	r3, #0
    c67e:	d1b7      	bne.n	c5f0 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c680:	683b      	ldr	r3, [r7, #0]
    c682:	681b      	ldr	r3, [r3, #0]
    c684:	4618      	mov	r0, r3
    c686:	4b11      	ldr	r3, [pc, #68]	; (c6cc <cdcdf_acm_enable+0x168>)
    c688:	4798      	blx	r3
    c68a:	683b      	ldr	r3, [r7, #0]
    c68c:	685b      	ldr	r3, [r3, #4]
    c68e:	2204      	movs	r2, #4
    c690:	4619      	mov	r1, r3
    c692:	4b0a      	ldr	r3, [pc, #40]	; (c6bc <cdcdf_acm_enable+0x158>)
    c694:	4798      	blx	r3
    c696:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c69c:	3301      	adds	r3, #1
    c69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c6a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c6a6:	2b01      	cmp	r3, #1
    c6a8:	f67f af6b 	bls.w	c582 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c6ac:	4b09      	ldr	r3, [pc, #36]	; (c6d4 <cdcdf_acm_enable+0x170>)
    c6ae:	2201      	movs	r2, #1
    c6b0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c6b2:	2300      	movs	r3, #0
}
    c6b4:	4618      	mov	r0, r3
    c6b6:	3730      	adds	r7, #48	; 0x30
    c6b8:	46bd      	mov	sp, r7
    c6ba:	bd80      	pop	{r7, pc}
    c6bc:	0000d925 	.word	0x0000d925
    c6c0:	0000c4ff 	.word	0x0000c4ff
    c6c4:	00003645 	.word	0x00003645
    c6c8:	00003731 	.word	0x00003731
    c6cc:	0000c541 	.word	0x0000c541
    c6d0:	0000d981 	.word	0x0000d981
    c6d4:	20000c98 	.word	0x20000c98

0000c6d8 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c6d8:	b580      	push	{r7, lr}
    c6da:	b088      	sub	sp, #32
    c6dc:	af00      	add	r7, sp, #0
    c6de:	6078      	str	r0, [r7, #4]
    c6e0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c6e2:	687b      	ldr	r3, [r7, #4]
    c6e4:	689b      	ldr	r3, [r3, #8]
    c6e6:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c6e8:	683b      	ldr	r3, [r7, #0]
    c6ea:	2b00      	cmp	r3, #0
    c6ec:	d00c      	beq.n	c708 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c6ee:	683b      	ldr	r3, [r7, #0]
    c6f0:	681b      	ldr	r3, [r3, #0]
    c6f2:	795b      	ldrb	r3, [r3, #5]
    c6f4:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c6f6:	7c7b      	ldrb	r3, [r7, #17]
    c6f8:	2b02      	cmp	r3, #2
    c6fa:	d005      	beq.n	c708 <cdcdf_acm_disable+0x30>
    c6fc:	7c7b      	ldrb	r3, [r7, #17]
    c6fe:	2b0a      	cmp	r3, #10
    c700:	d002      	beq.n	c708 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c702:	f06f 0309 	mvn.w	r3, #9
    c706:	e035      	b.n	c774 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c708:	2300      	movs	r3, #0
    c70a:	77fb      	strb	r3, [r7, #31]
    c70c:	e01f      	b.n	c74e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c70e:	7ffb      	ldrb	r3, [r7, #31]
    c710:	69ba      	ldr	r2, [r7, #24]
    c712:	5cd3      	ldrb	r3, [r2, r3]
    c714:	2bff      	cmp	r3, #255	; 0xff
    c716:	d016      	beq.n	c746 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c718:	7ffb      	ldrb	r3, [r7, #31]
    c71a:	69ba      	ldr	r2, [r7, #24]
    c71c:	21ff      	movs	r1, #255	; 0xff
    c71e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c720:	7ffb      	ldrb	r3, [r7, #31]
    c722:	69ba      	ldr	r2, [r7, #24]
    c724:	4413      	add	r3, r2
    c726:	789b      	ldrb	r3, [r3, #2]
    c728:	2bff      	cmp	r3, #255	; 0xff
    c72a:	d00d      	beq.n	c748 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c72c:	7ffb      	ldrb	r3, [r7, #31]
    c72e:	69ba      	ldr	r2, [r7, #24]
    c730:	4413      	add	r3, r2
    c732:	789b      	ldrb	r3, [r3, #2]
    c734:	4618      	mov	r0, r3
    c736:	4b11      	ldr	r3, [pc, #68]	; (c77c <cdcdf_acm_disable+0xa4>)
    c738:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c73a:	7ffb      	ldrb	r3, [r7, #31]
    c73c:	69ba      	ldr	r2, [r7, #24]
    c73e:	4413      	add	r3, r2
    c740:	22ff      	movs	r2, #255	; 0xff
    c742:	709a      	strb	r2, [r3, #2]
    c744:	e000      	b.n	c748 <cdcdf_acm_disable+0x70>
			continue;
    c746:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c748:	7ffb      	ldrb	r3, [r7, #31]
    c74a:	3301      	adds	r3, #1
    c74c:	77fb      	strb	r3, [r7, #31]
    c74e:	7ffb      	ldrb	r3, [r7, #31]
    c750:	2b01      	cmp	r3, #1
    c752:	d9dc      	bls.n	c70e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c754:	69bb      	ldr	r3, [r7, #24]
    c756:	791b      	ldrb	r3, [r3, #4]
    c758:	2bff      	cmp	r3, #255	; 0xff
    c75a:	d007      	beq.n	c76c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c75c:	69bb      	ldr	r3, [r7, #24]
    c75e:	791b      	ldrb	r3, [r3, #4]
    c760:	4618      	mov	r0, r3
    c762:	4b06      	ldr	r3, [pc, #24]	; (c77c <cdcdf_acm_disable+0xa4>)
    c764:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c766:	69bb      	ldr	r3, [r7, #24]
    c768:	22ff      	movs	r2, #255	; 0xff
    c76a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c76c:	4b04      	ldr	r3, [pc, #16]	; (c780 <cdcdf_acm_disable+0xa8>)
    c76e:	2200      	movs	r2, #0
    c770:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c772:	2300      	movs	r3, #0
}
    c774:	4618      	mov	r0, r3
    c776:	3720      	adds	r7, #32
    c778:	46bd      	mov	sp, r7
    c77a:	bd80      	pop	{r7, pc}
    c77c:	000036e1 	.word	0x000036e1
    c780:	20000c98 	.word	0x20000c98

0000c784 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c784:	b580      	push	{r7, lr}
    c786:	b084      	sub	sp, #16
    c788:	af00      	add	r7, sp, #0
    c78a:	60f8      	str	r0, [r7, #12]
    c78c:	460b      	mov	r3, r1
    c78e:	607a      	str	r2, [r7, #4]
    c790:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c792:	7afb      	ldrb	r3, [r7, #11]
    c794:	2b01      	cmp	r3, #1
    c796:	d009      	beq.n	c7ac <cdcdf_acm_ctrl+0x28>
    c798:	2b02      	cmp	r3, #2
    c79a:	d00d      	beq.n	c7b8 <cdcdf_acm_ctrl+0x34>
    c79c:	2b00      	cmp	r3, #0
    c79e:	d10e      	bne.n	c7be <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c7a0:	6879      	ldr	r1, [r7, #4]
    c7a2:	68f8      	ldr	r0, [r7, #12]
    c7a4:	4b09      	ldr	r3, [pc, #36]	; (c7cc <cdcdf_acm_ctrl+0x48>)
    c7a6:	4798      	blx	r3
    c7a8:	4603      	mov	r3, r0
    c7aa:	e00a      	b.n	c7c2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c7ac:	6879      	ldr	r1, [r7, #4]
    c7ae:	68f8      	ldr	r0, [r7, #12]
    c7b0:	4b07      	ldr	r3, [pc, #28]	; (c7d0 <cdcdf_acm_ctrl+0x4c>)
    c7b2:	4798      	blx	r3
    c7b4:	4603      	mov	r3, r0
    c7b6:	e004      	b.n	c7c2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c7b8:	f06f 031a 	mvn.w	r3, #26
    c7bc:	e001      	b.n	c7c2 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c7be:	f06f 030c 	mvn.w	r3, #12
	}
}
    c7c2:	4618      	mov	r0, r3
    c7c4:	3710      	adds	r7, #16
    c7c6:	46bd      	mov	sp, r7
    c7c8:	bd80      	pop	{r7, pc}
    c7ca:	bf00      	nop
    c7cc:	0000c565 	.word	0x0000c565
    c7d0:	0000c6d9 	.word	0x0000c6d9

0000c7d4 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c7d4:	b590      	push	{r4, r7, lr}
    c7d6:	b087      	sub	sp, #28
    c7d8:	af00      	add	r7, sp, #0
    c7da:	4603      	mov	r3, r0
    c7dc:	6039      	str	r1, [r7, #0]
    c7de:	71fb      	strb	r3, [r7, #7]
    c7e0:	4613      	mov	r3, r2
    c7e2:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c7e4:	683b      	ldr	r3, [r7, #0]
    c7e6:	799a      	ldrb	r2, [r3, #6]
    c7e8:	79db      	ldrb	r3, [r3, #7]
    c7ea:	021b      	lsls	r3, r3, #8
    c7ec:	4313      	orrs	r3, r2
    c7ee:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c7f0:	4b2b      	ldr	r3, [pc, #172]	; (c8a0 <cdcdf_acm_set_req+0xcc>)
    c7f2:	4798      	blx	r3
    c7f4:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c7f6:	683b      	ldr	r3, [r7, #0]
    c7f8:	785b      	ldrb	r3, [r3, #1]
    c7fa:	2b20      	cmp	r3, #32
    c7fc:	d002      	beq.n	c804 <cdcdf_acm_set_req+0x30>
    c7fe:	2b22      	cmp	r3, #34	; 0x22
    c800:	d034      	beq.n	c86c <cdcdf_acm_set_req+0x98>
    c802:	e046      	b.n	c892 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c804:	8afb      	ldrh	r3, [r7, #22]
    c806:	2b07      	cmp	r3, #7
    c808:	d002      	beq.n	c810 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c80a:	f04f 33ff 	mov.w	r3, #4294967295
    c80e:	e042      	b.n	c896 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c810:	79bb      	ldrb	r3, [r7, #6]
    c812:	2b00      	cmp	r3, #0
    c814:	d107      	bne.n	c826 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c816:	8afa      	ldrh	r2, [r7, #22]
    c818:	79f8      	ldrb	r0, [r7, #7]
    c81a:	2300      	movs	r3, #0
    c81c:	6939      	ldr	r1, [r7, #16]
    c81e:	4c21      	ldr	r4, [pc, #132]	; (c8a4 <cdcdf_acm_set_req+0xd0>)
    c820:	47a0      	blx	r4
    c822:	4603      	mov	r3, r0
    c824:	e037      	b.n	c896 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c826:	693a      	ldr	r2, [r7, #16]
    c828:	f107 0308 	add.w	r3, r7, #8
    c82c:	6810      	ldr	r0, [r2, #0]
    c82e:	6018      	str	r0, [r3, #0]
    c830:	8891      	ldrh	r1, [r2, #4]
    c832:	7992      	ldrb	r2, [r2, #6]
    c834:	8099      	strh	r1, [r3, #4]
    c836:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c838:	4b1b      	ldr	r3, [pc, #108]	; (c8a8 <cdcdf_acm_set_req+0xd4>)
    c83a:	681b      	ldr	r3, [r3, #0]
    c83c:	2b00      	cmp	r3, #0
    c83e:	d008      	beq.n	c852 <cdcdf_acm_set_req+0x7e>
    c840:	4b19      	ldr	r3, [pc, #100]	; (c8a8 <cdcdf_acm_set_req+0xd4>)
    c842:	681b      	ldr	r3, [r3, #0]
    c844:	f107 0208 	add.w	r2, r7, #8
    c848:	4610      	mov	r0, r2
    c84a:	4798      	blx	r3
    c84c:	4603      	mov	r3, r0
    c84e:	2b00      	cmp	r3, #0
    c850:	d00a      	beq.n	c868 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c852:	4b16      	ldr	r3, [pc, #88]	; (c8ac <cdcdf_acm_set_req+0xd8>)
    c854:	f107 0208 	add.w	r2, r7, #8
    c858:	e892 0003 	ldmia.w	r2, {r0, r1}
    c85c:	6018      	str	r0, [r3, #0]
    c85e:	3304      	adds	r3, #4
    c860:	8019      	strh	r1, [r3, #0]
    c862:	3302      	adds	r3, #2
    c864:	0c0a      	lsrs	r2, r1, #16
    c866:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c868:	2300      	movs	r3, #0
    c86a:	e014      	b.n	c896 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c86c:	2300      	movs	r3, #0
    c86e:	2200      	movs	r2, #0
    c870:	2100      	movs	r1, #0
    c872:	2000      	movs	r0, #0
    c874:	4c0b      	ldr	r4, [pc, #44]	; (c8a4 <cdcdf_acm_set_req+0xd0>)
    c876:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c878:	4b0d      	ldr	r3, [pc, #52]	; (c8b0 <cdcdf_acm_set_req+0xdc>)
    c87a:	681b      	ldr	r3, [r3, #0]
    c87c:	2b00      	cmp	r3, #0
    c87e:	d006      	beq.n	c88e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c880:	4b0b      	ldr	r3, [pc, #44]	; (c8b0 <cdcdf_acm_set_req+0xdc>)
    c882:	681b      	ldr	r3, [r3, #0]
    c884:	683a      	ldr	r2, [r7, #0]
    c886:	8852      	ldrh	r2, [r2, #2]
    c888:	b292      	uxth	r2, r2
    c88a:	4610      	mov	r0, r2
    c88c:	4798      	blx	r3
		}
		return ERR_NONE;
    c88e:	2300      	movs	r3, #0
    c890:	e001      	b.n	c896 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c892:	f06f 030c 	mvn.w	r3, #12
	}
}
    c896:	4618      	mov	r0, r3
    c898:	371c      	adds	r7, #28
    c89a:	46bd      	mov	sp, r7
    c89c:	bd90      	pop	{r4, r7, pc}
    c89e:	bf00      	nop
    c8a0:	0000d821 	.word	0x0000d821
    c8a4:	0000d695 	.word	0x0000d695
    c8a8:	20000cac 	.word	0x20000cac
    c8ac:	20000ca0 	.word	0x20000ca0
    c8b0:	20000ca8 	.word	0x20000ca8

0000c8b4 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c8b4:	b590      	push	{r4, r7, lr}
    c8b6:	b085      	sub	sp, #20
    c8b8:	af00      	add	r7, sp, #0
    c8ba:	4603      	mov	r3, r0
    c8bc:	6039      	str	r1, [r7, #0]
    c8be:	71fb      	strb	r3, [r7, #7]
    c8c0:	4613      	mov	r3, r2
    c8c2:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c8c4:	683b      	ldr	r3, [r7, #0]
    c8c6:	799a      	ldrb	r2, [r3, #6]
    c8c8:	79db      	ldrb	r3, [r3, #7]
    c8ca:	021b      	lsls	r3, r3, #8
    c8cc:	4313      	orrs	r3, r2
    c8ce:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c8d0:	79bb      	ldrb	r3, [r7, #6]
    c8d2:	2b01      	cmp	r3, #1
    c8d4:	d101      	bne.n	c8da <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c8d6:	2300      	movs	r3, #0
    c8d8:	e013      	b.n	c902 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c8da:	683b      	ldr	r3, [r7, #0]
    c8dc:	785b      	ldrb	r3, [r3, #1]
    c8de:	2b21      	cmp	r3, #33	; 0x21
    c8e0:	d10d      	bne.n	c8fe <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c8e2:	89fb      	ldrh	r3, [r7, #14]
    c8e4:	2b07      	cmp	r3, #7
    c8e6:	d002      	beq.n	c8ee <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c8e8:	f04f 33ff 	mov.w	r3, #4294967295
    c8ec:	e009      	b.n	c902 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c8ee:	89fa      	ldrh	r2, [r7, #14]
    c8f0:	79f8      	ldrb	r0, [r7, #7]
    c8f2:	2300      	movs	r3, #0
    c8f4:	4905      	ldr	r1, [pc, #20]	; (c90c <cdcdf_acm_get_req+0x58>)
    c8f6:	4c06      	ldr	r4, [pc, #24]	; (c910 <cdcdf_acm_get_req+0x5c>)
    c8f8:	47a0      	blx	r4
    c8fa:	4603      	mov	r3, r0
    c8fc:	e001      	b.n	c902 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c8fe:	f06f 030c 	mvn.w	r3, #12
	}
}
    c902:	4618      	mov	r0, r3
    c904:	3714      	adds	r7, #20
    c906:	46bd      	mov	sp, r7
    c908:	bd90      	pop	{r4, r7, pc}
    c90a:	bf00      	nop
    c90c:	20000ca0 	.word	0x20000ca0
    c910:	0000d695 	.word	0x0000d695

0000c914 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c914:	b580      	push	{r7, lr}
    c916:	b082      	sub	sp, #8
    c918:	af00      	add	r7, sp, #0
    c91a:	4603      	mov	r3, r0
    c91c:	6039      	str	r1, [r7, #0]
    c91e:	71fb      	strb	r3, [r7, #7]
    c920:	4613      	mov	r3, r2
    c922:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c924:	683b      	ldr	r3, [r7, #0]
    c926:	781b      	ldrb	r3, [r3, #0]
    c928:	095b      	lsrs	r3, r3, #5
    c92a:	b2db      	uxtb	r3, r3
    c92c:	f003 0303 	and.w	r3, r3, #3
    c930:	2b01      	cmp	r3, #1
    c932:	d002      	beq.n	c93a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c934:	f06f 0309 	mvn.w	r3, #9
    c938:	e026      	b.n	c988 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c93a:	683b      	ldr	r3, [r7, #0]
    c93c:	889b      	ldrh	r3, [r3, #4]
    c93e:	b29a      	uxth	r2, r3
    c940:	4b13      	ldr	r3, [pc, #76]	; (c990 <cdcdf_acm_req+0x7c>)
    c942:	781b      	ldrb	r3, [r3, #0]
    c944:	b29b      	uxth	r3, r3
    c946:	429a      	cmp	r2, r3
    c948:	d007      	beq.n	c95a <cdcdf_acm_req+0x46>
    c94a:	683b      	ldr	r3, [r7, #0]
    c94c:	889b      	ldrh	r3, [r3, #4]
    c94e:	b29a      	uxth	r2, r3
    c950:	4b0f      	ldr	r3, [pc, #60]	; (c990 <cdcdf_acm_req+0x7c>)
    c952:	785b      	ldrb	r3, [r3, #1]
    c954:	b29b      	uxth	r3, r3
    c956:	429a      	cmp	r2, r3
    c958:	d114      	bne.n	c984 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c95a:	683b      	ldr	r3, [r7, #0]
    c95c:	781b      	ldrb	r3, [r3, #0]
    c95e:	b25b      	sxtb	r3, r3
    c960:	2b00      	cmp	r3, #0
    c962:	da07      	bge.n	c974 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c964:	79ba      	ldrb	r2, [r7, #6]
    c966:	79fb      	ldrb	r3, [r7, #7]
    c968:	6839      	ldr	r1, [r7, #0]
    c96a:	4618      	mov	r0, r3
    c96c:	4b09      	ldr	r3, [pc, #36]	; (c994 <cdcdf_acm_req+0x80>)
    c96e:	4798      	blx	r3
    c970:	4603      	mov	r3, r0
    c972:	e009      	b.n	c988 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c974:	79ba      	ldrb	r2, [r7, #6]
    c976:	79fb      	ldrb	r3, [r7, #7]
    c978:	6839      	ldr	r1, [r7, #0]
    c97a:	4618      	mov	r0, r3
    c97c:	4b06      	ldr	r3, [pc, #24]	; (c998 <cdcdf_acm_req+0x84>)
    c97e:	4798      	blx	r3
    c980:	4603      	mov	r3, r0
    c982:	e001      	b.n	c988 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c984:	f06f 0309 	mvn.w	r3, #9
	}
}
    c988:	4618      	mov	r0, r3
    c98a:	3708      	adds	r7, #8
    c98c:	46bd      	mov	sp, r7
    c98e:	bd80      	pop	{r7, pc}
    c990:	20000c98 	.word	0x20000c98
    c994:	0000c8b5 	.word	0x0000c8b5
    c998:	0000c7d5 	.word	0x0000c7d5

0000c99c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c99c:	b580      	push	{r7, lr}
    c99e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c9a0:	4b0b      	ldr	r3, [pc, #44]	; (c9d0 <cdcdf_acm_init+0x34>)
    c9a2:	4798      	blx	r3
    c9a4:	4603      	mov	r3, r0
    c9a6:	2b01      	cmp	r3, #1
    c9a8:	d902      	bls.n	c9b0 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c9aa:	f06f 0310 	mvn.w	r3, #16
    c9ae:	e00d      	b.n	c9cc <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c9b0:	4b08      	ldr	r3, [pc, #32]	; (c9d4 <cdcdf_acm_init+0x38>)
    c9b2:	4a09      	ldr	r2, [pc, #36]	; (c9d8 <cdcdf_acm_init+0x3c>)
    c9b4:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c9b6:	4b07      	ldr	r3, [pc, #28]	; (c9d4 <cdcdf_acm_init+0x38>)
    c9b8:	4a08      	ldr	r2, [pc, #32]	; (c9dc <cdcdf_acm_init+0x40>)
    c9ba:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c9bc:	4805      	ldr	r0, [pc, #20]	; (c9d4 <cdcdf_acm_init+0x38>)
    c9be:	4b08      	ldr	r3, [pc, #32]	; (c9e0 <cdcdf_acm_init+0x44>)
    c9c0:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c9c2:	4908      	ldr	r1, [pc, #32]	; (c9e4 <cdcdf_acm_init+0x48>)
    c9c4:	2001      	movs	r0, #1
    c9c6:	4b08      	ldr	r3, [pc, #32]	; (c9e8 <cdcdf_acm_init+0x4c>)
    c9c8:	4798      	blx	r3
	return ERR_NONE;
    c9ca:	2300      	movs	r3, #0
}
    c9cc:	4618      	mov	r0, r3
    c9ce:	bd80      	pop	{r7, pc}
    c9d0:	0000d839 	.word	0x0000d839
    c9d4:	20000c8c 	.word	0x20000c8c
    c9d8:	0000c785 	.word	0x0000c785
    c9dc:	20000c98 	.word	0x20000c98
    c9e0:	0000d7a1 	.word	0x0000d7a1
    c9e4:	200001d8 	.word	0x200001d8
    c9e8:	0000d6d1 	.word	0x0000d6d1

0000c9ec <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c9ec:	b590      	push	{r4, r7, lr}
    c9ee:	b083      	sub	sp, #12
    c9f0:	af00      	add	r7, sp, #0
    c9f2:	6078      	str	r0, [r7, #4]
    c9f4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c9f6:	4b0b      	ldr	r3, [pc, #44]	; (ca24 <cdcdf_acm_read+0x38>)
    c9f8:	4798      	blx	r3
    c9fa:	4603      	mov	r3, r0
    c9fc:	f083 0301 	eor.w	r3, r3, #1
    ca00:	b2db      	uxtb	r3, r3
    ca02:	2b00      	cmp	r3, #0
    ca04:	d002      	beq.n	ca0c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    ca06:	f06f 0310 	mvn.w	r3, #16
    ca0a:	e007      	b.n	ca1c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    ca0c:	4b06      	ldr	r3, [pc, #24]	; (ca28 <cdcdf_acm_read+0x3c>)
    ca0e:	7918      	ldrb	r0, [r3, #4]
    ca10:	2300      	movs	r3, #0
    ca12:	683a      	ldr	r2, [r7, #0]
    ca14:	6879      	ldr	r1, [r7, #4]
    ca16:	4c05      	ldr	r4, [pc, #20]	; (ca2c <cdcdf_acm_read+0x40>)
    ca18:	47a0      	blx	r4
    ca1a:	4603      	mov	r3, r0
}
    ca1c:	4618      	mov	r0, r3
    ca1e:	370c      	adds	r7, #12
    ca20:	46bd      	mov	sp, r7
    ca22:	bd90      	pop	{r4, r7, pc}
    ca24:	0000cb11 	.word	0x0000cb11
    ca28:	20000c98 	.word	0x20000c98
    ca2c:	0000d695 	.word	0x0000d695

0000ca30 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    ca30:	b590      	push	{r4, r7, lr}
    ca32:	b083      	sub	sp, #12
    ca34:	af00      	add	r7, sp, #0
    ca36:	6078      	str	r0, [r7, #4]
    ca38:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    ca3a:	4b0b      	ldr	r3, [pc, #44]	; (ca68 <cdcdf_acm_write+0x38>)
    ca3c:	4798      	blx	r3
    ca3e:	4603      	mov	r3, r0
    ca40:	f083 0301 	eor.w	r3, r3, #1
    ca44:	b2db      	uxtb	r3, r3
    ca46:	2b00      	cmp	r3, #0
    ca48:	d002      	beq.n	ca50 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    ca4a:	f06f 0310 	mvn.w	r3, #16
    ca4e:	e007      	b.n	ca60 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    ca50:	4b06      	ldr	r3, [pc, #24]	; (ca6c <cdcdf_acm_write+0x3c>)
    ca52:	78d8      	ldrb	r0, [r3, #3]
    ca54:	2301      	movs	r3, #1
    ca56:	683a      	ldr	r2, [r7, #0]
    ca58:	6879      	ldr	r1, [r7, #4]
    ca5a:	4c05      	ldr	r4, [pc, #20]	; (ca70 <cdcdf_acm_write+0x40>)
    ca5c:	47a0      	blx	r4
    ca5e:	4603      	mov	r3, r0
}
    ca60:	4618      	mov	r0, r3
    ca62:	370c      	adds	r7, #12
    ca64:	46bd      	mov	sp, r7
    ca66:	bd90      	pop	{r4, r7, pc}
    ca68:	0000cb11 	.word	0x0000cb11
    ca6c:	20000c98 	.word	0x20000c98
    ca70:	0000d695 	.word	0x0000d695

0000ca74 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    ca74:	b580      	push	{r7, lr}
    ca76:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    ca78:	4b05      	ldr	r3, [pc, #20]	; (ca90 <cdcdf_acm_stop_xfer+0x1c>)
    ca7a:	78db      	ldrb	r3, [r3, #3]
    ca7c:	4618      	mov	r0, r3
    ca7e:	4b05      	ldr	r3, [pc, #20]	; (ca94 <cdcdf_acm_stop_xfer+0x20>)
    ca80:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    ca82:	4b03      	ldr	r3, [pc, #12]	; (ca90 <cdcdf_acm_stop_xfer+0x1c>)
    ca84:	791b      	ldrb	r3, [r3, #4]
    ca86:	4618      	mov	r0, r3
    ca88:	4b02      	ldr	r3, [pc, #8]	; (ca94 <cdcdf_acm_stop_xfer+0x20>)
    ca8a:	4798      	blx	r3
}
    ca8c:	bf00      	nop
    ca8e:	bd80      	pop	{r7, pc}
    ca90:	20000c98 	.word	0x20000c98
    ca94:	00003909 	.word	0x00003909

0000ca98 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    ca98:	b580      	push	{r7, lr}
    ca9a:	b082      	sub	sp, #8
    ca9c:	af00      	add	r7, sp, #0
    ca9e:	4603      	mov	r3, r0
    caa0:	6039      	str	r1, [r7, #0]
    caa2:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    caa4:	79fb      	ldrb	r3, [r7, #7]
    caa6:	2b03      	cmp	r3, #3
    caa8:	d822      	bhi.n	caf0 <cdcdf_acm_register_callback+0x58>
    caaa:	a201      	add	r2, pc, #4	; (adr r2, cab0 <cdcdf_acm_register_callback+0x18>)
    caac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cab0:	0000cac1 	.word	0x0000cac1
    cab4:	0000cad1 	.word	0x0000cad1
    cab8:	0000cae1 	.word	0x0000cae1
    cabc:	0000cae9 	.word	0x0000cae9
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    cac0:	4b0f      	ldr	r3, [pc, #60]	; (cb00 <cdcdf_acm_register_callback+0x68>)
    cac2:	791b      	ldrb	r3, [r3, #4]
    cac4:	683a      	ldr	r2, [r7, #0]
    cac6:	2102      	movs	r1, #2
    cac8:	4618      	mov	r0, r3
    caca:	4b0e      	ldr	r3, [pc, #56]	; (cb04 <cdcdf_acm_register_callback+0x6c>)
    cacc:	4798      	blx	r3
		break;
    cace:	e012      	b.n	caf6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    cad0:	4b0b      	ldr	r3, [pc, #44]	; (cb00 <cdcdf_acm_register_callback+0x68>)
    cad2:	78db      	ldrb	r3, [r3, #3]
    cad4:	683a      	ldr	r2, [r7, #0]
    cad6:	2102      	movs	r1, #2
    cad8:	4618      	mov	r0, r3
    cada:	4b0a      	ldr	r3, [pc, #40]	; (cb04 <cdcdf_acm_register_callback+0x6c>)
    cadc:	4798      	blx	r3
		break;
    cade:	e00a      	b.n	caf6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    cae0:	4a09      	ldr	r2, [pc, #36]	; (cb08 <cdcdf_acm_register_callback+0x70>)
    cae2:	683b      	ldr	r3, [r7, #0]
    cae4:	6013      	str	r3, [r2, #0]
		break;
    cae6:	e006      	b.n	caf6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cae8:	4a08      	ldr	r2, [pc, #32]	; (cb0c <cdcdf_acm_register_callback+0x74>)
    caea:	683b      	ldr	r3, [r7, #0]
    caec:	6013      	str	r3, [r2, #0]
		break;
    caee:	e002      	b.n	caf6 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    caf0:	f06f 030c 	mvn.w	r3, #12
    caf4:	e000      	b.n	caf8 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    caf6:	2300      	movs	r3, #0
}
    caf8:	4618      	mov	r0, r3
    cafa:	3708      	adds	r7, #8
    cafc:	46bd      	mov	sp, r7
    cafe:	bd80      	pop	{r7, pc}
    cb00:	20000c98 	.word	0x20000c98
    cb04:	00003a35 	.word	0x00003a35
    cb08:	20000cac 	.word	0x20000cac
    cb0c:	20000ca8 	.word	0x20000ca8

0000cb10 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    cb10:	b480      	push	{r7}
    cb12:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cb14:	4b03      	ldr	r3, [pc, #12]	; (cb24 <cdcdf_acm_is_enabled+0x14>)
    cb16:	795b      	ldrb	r3, [r3, #5]
}
    cb18:	4618      	mov	r0, r3
    cb1a:	46bd      	mov	sp, r7
    cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb20:	4770      	bx	lr
    cb22:	bf00      	nop
    cb24:	20000c98 	.word	0x20000c98

0000cb28 <usb_get_u16>:
{
    cb28:	b480      	push	{r7}
    cb2a:	b083      	sub	sp, #12
    cb2c:	af00      	add	r7, sp, #0
    cb2e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cb30:	687b      	ldr	r3, [r7, #4]
    cb32:	781b      	ldrb	r3, [r3, #0]
    cb34:	b29a      	uxth	r2, r3
    cb36:	687b      	ldr	r3, [r7, #4]
    cb38:	3301      	adds	r3, #1
    cb3a:	781b      	ldrb	r3, [r3, #0]
    cb3c:	b29b      	uxth	r3, r3
    cb3e:	021b      	lsls	r3, r3, #8
    cb40:	b29b      	uxth	r3, r3
    cb42:	4413      	add	r3, r2
    cb44:	b29b      	uxth	r3, r3
}
    cb46:	4618      	mov	r0, r3
    cb48:	370c      	adds	r7, #12
    cb4a:	46bd      	mov	sp, r7
    cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb50:	4770      	bx	lr

0000cb52 <usb_desc_len>:
{
    cb52:	b480      	push	{r7}
    cb54:	b083      	sub	sp, #12
    cb56:	af00      	add	r7, sp, #0
    cb58:	6078      	str	r0, [r7, #4]
	return desc[0];
    cb5a:	687b      	ldr	r3, [r7, #4]
    cb5c:	781b      	ldrb	r3, [r3, #0]
}
    cb5e:	4618      	mov	r0, r3
    cb60:	370c      	adds	r7, #12
    cb62:	46bd      	mov	sp, r7
    cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb68:	4770      	bx	lr
	...

0000cb6c <usb_desc_next>:
{
    cb6c:	b580      	push	{r7, lr}
    cb6e:	b082      	sub	sp, #8
    cb70:	af00      	add	r7, sp, #0
    cb72:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cb74:	6878      	ldr	r0, [r7, #4]
    cb76:	4b05      	ldr	r3, [pc, #20]	; (cb8c <usb_desc_next+0x20>)
    cb78:	4798      	blx	r3
    cb7a:	4603      	mov	r3, r0
    cb7c:	461a      	mov	r2, r3
    cb7e:	687b      	ldr	r3, [r7, #4]
    cb80:	4413      	add	r3, r2
}
    cb82:	4618      	mov	r0, r3
    cb84:	3708      	adds	r7, #8
    cb86:	46bd      	mov	sp, r7
    cb88:	bd80      	pop	{r7, pc}
    cb8a:	bf00      	nop
    cb8c:	0000cb53 	.word	0x0000cb53

0000cb90 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    cb90:	b580      	push	{r7, lr}
    cb92:	b082      	sub	sp, #8
    cb94:	af00      	add	r7, sp, #0
    cb96:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cb98:	687b      	ldr	r3, [r7, #4]
    cb9a:	3302      	adds	r3, #2
    cb9c:	4618      	mov	r0, r3
    cb9e:	4b03      	ldr	r3, [pc, #12]	; (cbac <usb_cfg_desc_total_len+0x1c>)
    cba0:	4798      	blx	r3
    cba2:	4603      	mov	r3, r0
}
    cba4:	4618      	mov	r0, r3
    cba6:	3708      	adds	r7, #8
    cba8:	46bd      	mov	sp, r7
    cbaa:	bd80      	pop	{r7, pc}
    cbac:	0000cb29 	.word	0x0000cb29

0000cbb0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    cbb0:	b590      	push	{r4, r7, lr}
    cbb2:	b085      	sub	sp, #20
    cbb4:	af00      	add	r7, sp, #0
    cbb6:	4603      	mov	r3, r0
    cbb8:	6039      	str	r1, [r7, #0]
    cbba:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    cbbc:	2300      	movs	r3, #0
    cbbe:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    cbc0:	683b      	ldr	r3, [r7, #0]
    cbc2:	799a      	ldrb	r2, [r3, #6]
    cbc4:	79db      	ldrb	r3, [r3, #7]
    cbc6:	021b      	lsls	r3, r3, #8
    cbc8:	4313      	orrs	r3, r2
    cbca:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    cbcc:	897b      	ldrh	r3, [r7, #10]
    cbce:	2b12      	cmp	r3, #18
    cbd0:	d901      	bls.n	cbd6 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    cbd2:	2312      	movs	r3, #18
    cbd4:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    cbd6:	68fb      	ldr	r3, [r7, #12]
    cbd8:	2b00      	cmp	r3, #0
    cbda:	d10a      	bne.n	cbf2 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    cbdc:	4b0f      	ldr	r3, [pc, #60]	; (cc1c <usbdc_get_dev_desc+0x6c>)
    cbde:	681b      	ldr	r3, [r3, #0]
    cbe0:	6818      	ldr	r0, [r3, #0]
    cbe2:	4b0e      	ldr	r3, [pc, #56]	; (cc1c <usbdc_get_dev_desc+0x6c>)
    cbe4:	681b      	ldr	r3, [r3, #0]
    cbe6:	685b      	ldr	r3, [r3, #4]
    cbe8:	2201      	movs	r2, #1
    cbea:	4619      	mov	r1, r3
    cbec:	4b0c      	ldr	r3, [pc, #48]	; (cc20 <usbdc_get_dev_desc+0x70>)
    cbee:	4798      	blx	r3
    cbf0:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    cbf2:	68fb      	ldr	r3, [r7, #12]
    cbf4:	2b00      	cmp	r3, #0
    cbf6:	d101      	bne.n	cbfc <usbdc_get_dev_desc+0x4c>
		return false;
    cbf8:	2300      	movs	r3, #0
    cbfa:	e00b      	b.n	cc14 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    cbfc:	897a      	ldrh	r2, [r7, #10]
    cbfe:	79f8      	ldrb	r0, [r7, #7]
    cc00:	2300      	movs	r3, #0
    cc02:	68f9      	ldr	r1, [r7, #12]
    cc04:	4c07      	ldr	r4, [pc, #28]	; (cc24 <usbdc_get_dev_desc+0x74>)
    cc06:	47a0      	blx	r4
    cc08:	4603      	mov	r3, r0
    cc0a:	2b00      	cmp	r3, #0
    cc0c:	d001      	beq.n	cc12 <usbdc_get_dev_desc+0x62>
		return false;
    cc0e:	2300      	movs	r3, #0
    cc10:	e000      	b.n	cc14 <usbdc_get_dev_desc+0x64>
	}
	return true;
    cc12:	2301      	movs	r3, #1
}
    cc14:	4618      	mov	r0, r3
    cc16:	3714      	adds	r7, #20
    cc18:	46bd      	mov	sp, r7
    cc1a:	bd90      	pop	{r4, r7, pc}
    cc1c:	20000cb0 	.word	0x20000cb0
    cc20:	0000d925 	.word	0x0000d925
    cc24:	0000d695 	.word	0x0000d695

0000cc28 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    cc28:	b590      	push	{r4, r7, lr}
    cc2a:	b087      	sub	sp, #28
    cc2c:	af00      	add	r7, sp, #0
    cc2e:	4603      	mov	r3, r0
    cc30:	6039      	str	r1, [r7, #0]
    cc32:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    cc34:	2300      	movs	r3, #0
    cc36:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    cc38:	683b      	ldr	r3, [r7, #0]
    cc3a:	799a      	ldrb	r2, [r3, #6]
    cc3c:	79db      	ldrb	r3, [r3, #7]
    cc3e:	021b      	lsls	r3, r3, #8
    cc40:	4313      	orrs	r3, r2
    cc42:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    cc44:	683b      	ldr	r3, [r7, #0]
    cc46:	885b      	ldrh	r3, [r3, #2]
    cc48:	b29b      	uxth	r3, r3
    cc4a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cc4c:	8a7a      	ldrh	r2, [r7, #18]
    cc4e:	4b1e      	ldr	r3, [pc, #120]	; (ccc8 <usbdc_get_cfg_desc+0xa0>)
    cc50:	7f1b      	ldrb	r3, [r3, #28]
    cc52:	3b01      	subs	r3, #1
    cc54:	4013      	ands	r3, r2
    cc56:	2b00      	cmp	r3, #0
    cc58:	bf0c      	ite	eq
    cc5a:	2301      	moveq	r3, #1
    cc5c:	2300      	movne	r3, #0
    cc5e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cc60:	697b      	ldr	r3, [r7, #20]
    cc62:	2b00      	cmp	r3, #0
    cc64:	d10c      	bne.n	cc80 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    cc66:	4b18      	ldr	r3, [pc, #96]	; (ccc8 <usbdc_get_cfg_desc+0xa0>)
    cc68:	681b      	ldr	r3, [r3, #0]
    cc6a:	6818      	ldr	r0, [r3, #0]
    cc6c:	4b16      	ldr	r3, [pc, #88]	; (ccc8 <usbdc_get_cfg_desc+0xa0>)
    cc6e:	681b      	ldr	r3, [r3, #0]
    cc70:	6859      	ldr	r1, [r3, #4]
    cc72:	7c3b      	ldrb	r3, [r7, #16]
    cc74:	3301      	adds	r3, #1
    cc76:	b2db      	uxtb	r3, r3
    cc78:	461a      	mov	r2, r3
    cc7a:	4b14      	ldr	r3, [pc, #80]	; (cccc <usbdc_get_cfg_desc+0xa4>)
    cc7c:	4798      	blx	r3
    cc7e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    cc80:	697b      	ldr	r3, [r7, #20]
    cc82:	2b00      	cmp	r3, #0
    cc84:	d101      	bne.n	cc8a <usbdc_get_cfg_desc+0x62>
		return false;
    cc86:	2300      	movs	r3, #0
    cc88:	e019      	b.n	ccbe <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    cc8a:	6978      	ldr	r0, [r7, #20]
    cc8c:	4b10      	ldr	r3, [pc, #64]	; (ccd0 <usbdc_get_cfg_desc+0xa8>)
    cc8e:	4798      	blx	r3
    cc90:	4603      	mov	r3, r0
    cc92:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    cc94:	8a7a      	ldrh	r2, [r7, #18]
    cc96:	89fb      	ldrh	r3, [r7, #14]
    cc98:	429a      	cmp	r2, r3
    cc9a:	d802      	bhi.n	cca2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    cc9c:	2300      	movs	r3, #0
    cc9e:	747b      	strb	r3, [r7, #17]
    cca0:	e001      	b.n	cca6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    cca2:	89fb      	ldrh	r3, [r7, #14]
    cca4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    cca6:	8a7a      	ldrh	r2, [r7, #18]
    cca8:	7c7b      	ldrb	r3, [r7, #17]
    ccaa:	79f8      	ldrb	r0, [r7, #7]
    ccac:	6979      	ldr	r1, [r7, #20]
    ccae:	4c09      	ldr	r4, [pc, #36]	; (ccd4 <usbdc_get_cfg_desc+0xac>)
    ccb0:	47a0      	blx	r4
    ccb2:	4603      	mov	r3, r0
    ccb4:	2b00      	cmp	r3, #0
    ccb6:	d001      	beq.n	ccbc <usbdc_get_cfg_desc+0x94>
		return false;
    ccb8:	2300      	movs	r3, #0
    ccba:	e000      	b.n	ccbe <usbdc_get_cfg_desc+0x96>
	}
	return true;
    ccbc:	2301      	movs	r3, #1
}
    ccbe:	4618      	mov	r0, r3
    ccc0:	371c      	adds	r7, #28
    ccc2:	46bd      	mov	sp, r7
    ccc4:	bd90      	pop	{r4, r7, pc}
    ccc6:	bf00      	nop
    ccc8:	20000cb0 	.word	0x20000cb0
    cccc:	0000d9e5 	.word	0x0000d9e5
    ccd0:	0000cb91 	.word	0x0000cb91
    ccd4:	0000d695 	.word	0x0000d695

0000ccd8 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    ccd8:	b590      	push	{r4, r7, lr}
    ccda:	b085      	sub	sp, #20
    ccdc:	af00      	add	r7, sp, #0
    ccde:	4603      	mov	r3, r0
    cce0:	6039      	str	r1, [r7, #0]
    cce2:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    cce4:	683b      	ldr	r3, [r7, #0]
    cce6:	799a      	ldrb	r2, [r3, #6]
    cce8:	79db      	ldrb	r3, [r3, #7]
    ccea:	021b      	lsls	r3, r3, #8
    ccec:	4313      	orrs	r3, r2
    ccee:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    ccf0:	683b      	ldr	r3, [r7, #0]
    ccf2:	885b      	ldrh	r3, [r3, #2]
    ccf4:	b29b      	uxth	r3, r3
    ccf6:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ccf8:	89fa      	ldrh	r2, [r7, #14]
    ccfa:	4b1a      	ldr	r3, [pc, #104]	; (cd64 <usbdc_get_str_desc+0x8c>)
    ccfc:	7f1b      	ldrb	r3, [r3, #28]
    ccfe:	3b01      	subs	r3, #1
    cd00:	4013      	ands	r3, r2
    cd02:	2b00      	cmp	r3, #0
    cd04:	bf0c      	ite	eq
    cd06:	2301      	moveq	r3, #1
    cd08:	2300      	movne	r3, #0
    cd0a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    cd0c:	4b15      	ldr	r3, [pc, #84]	; (cd64 <usbdc_get_str_desc+0x8c>)
    cd0e:	681b      	ldr	r3, [r3, #0]
    cd10:	6818      	ldr	r0, [r3, #0]
    cd12:	4b14      	ldr	r3, [pc, #80]	; (cd64 <usbdc_get_str_desc+0x8c>)
    cd14:	681b      	ldr	r3, [r3, #0]
    cd16:	685b      	ldr	r3, [r3, #4]
    cd18:	7b3a      	ldrb	r2, [r7, #12]
    cd1a:	4619      	mov	r1, r3
    cd1c:	4b12      	ldr	r3, [pc, #72]	; (cd68 <usbdc_get_str_desc+0x90>)
    cd1e:	4798      	blx	r3
    cd20:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    cd22:	68bb      	ldr	r3, [r7, #8]
    cd24:	2b00      	cmp	r3, #0
    cd26:	d101      	bne.n	cd2c <usbdc_get_str_desc+0x54>
		return false;
    cd28:	2300      	movs	r3, #0
    cd2a:	e017      	b.n	cd5c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    cd2c:	68bb      	ldr	r3, [r7, #8]
    cd2e:	781b      	ldrb	r3, [r3, #0]
    cd30:	b29b      	uxth	r3, r3
    cd32:	89fa      	ldrh	r2, [r7, #14]
    cd34:	429a      	cmp	r2, r3
    cd36:	d802      	bhi.n	cd3e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    cd38:	2300      	movs	r3, #0
    cd3a:	737b      	strb	r3, [r7, #13]
    cd3c:	e002      	b.n	cd44 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    cd3e:	68bb      	ldr	r3, [r7, #8]
    cd40:	781b      	ldrb	r3, [r3, #0]
    cd42:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    cd44:	89fa      	ldrh	r2, [r7, #14]
    cd46:	7b7b      	ldrb	r3, [r7, #13]
    cd48:	79f8      	ldrb	r0, [r7, #7]
    cd4a:	68b9      	ldr	r1, [r7, #8]
    cd4c:	4c07      	ldr	r4, [pc, #28]	; (cd6c <usbdc_get_str_desc+0x94>)
    cd4e:	47a0      	blx	r4
    cd50:	4603      	mov	r3, r0
    cd52:	2b00      	cmp	r3, #0
    cd54:	d001      	beq.n	cd5a <usbdc_get_str_desc+0x82>
		return false;
    cd56:	2300      	movs	r3, #0
    cd58:	e000      	b.n	cd5c <usbdc_get_str_desc+0x84>
	}
	return true;
    cd5a:	2301      	movs	r3, #1
}
    cd5c:	4618      	mov	r0, r3
    cd5e:	3714      	adds	r7, #20
    cd60:	46bd      	mov	sp, r7
    cd62:	bd90      	pop	{r4, r7, pc}
    cd64:	20000cb0 	.word	0x20000cb0
    cd68:	0000da5d 	.word	0x0000da5d
    cd6c:	0000d695 	.word	0x0000d695

0000cd70 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	b084      	sub	sp, #16
    cd74:	af00      	add	r7, sp, #0
    cd76:	4603      	mov	r3, r0
    cd78:	6039      	str	r1, [r7, #0]
    cd7a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    cd7c:	683b      	ldr	r3, [r7, #0]
    cd7e:	885b      	ldrh	r3, [r3, #2]
    cd80:	b29b      	uxth	r3, r3
    cd82:	0a1b      	lsrs	r3, r3, #8
    cd84:	b29b      	uxth	r3, r3
    cd86:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    cd88:	7bfb      	ldrb	r3, [r7, #15]
    cd8a:	2b02      	cmp	r3, #2
    cd8c:	d00d      	beq.n	cdaa <usbdc_get_desc_req+0x3a>
    cd8e:	2b03      	cmp	r3, #3
    cd90:	d012      	beq.n	cdb8 <usbdc_get_desc_req+0x48>
    cd92:	2b01      	cmp	r3, #1
    cd94:	d002      	beq.n	cd9c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    cd96:	bf00      	nop
	}
	return false;
    cd98:	2300      	movs	r3, #0
    cd9a:	e013      	b.n	cdc4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    cd9c:	79fb      	ldrb	r3, [r7, #7]
    cd9e:	6839      	ldr	r1, [r7, #0]
    cda0:	4618      	mov	r0, r3
    cda2:	4b0a      	ldr	r3, [pc, #40]	; (cdcc <usbdc_get_desc_req+0x5c>)
    cda4:	4798      	blx	r3
    cda6:	4603      	mov	r3, r0
    cda8:	e00c      	b.n	cdc4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    cdaa:	79fb      	ldrb	r3, [r7, #7]
    cdac:	6839      	ldr	r1, [r7, #0]
    cdae:	4618      	mov	r0, r3
    cdb0:	4b07      	ldr	r3, [pc, #28]	; (cdd0 <usbdc_get_desc_req+0x60>)
    cdb2:	4798      	blx	r3
    cdb4:	4603      	mov	r3, r0
    cdb6:	e005      	b.n	cdc4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    cdb8:	79fb      	ldrb	r3, [r7, #7]
    cdba:	6839      	ldr	r1, [r7, #0]
    cdbc:	4618      	mov	r0, r3
    cdbe:	4b05      	ldr	r3, [pc, #20]	; (cdd4 <usbdc_get_desc_req+0x64>)
    cdc0:	4798      	blx	r3
    cdc2:	4603      	mov	r3, r0
}
    cdc4:	4618      	mov	r0, r3
    cdc6:	3710      	adds	r7, #16
    cdc8:	46bd      	mov	sp, r7
    cdca:	bd80      	pop	{r7, pc}
    cdcc:	0000cbb1 	.word	0x0000cbb1
    cdd0:	0000cc29 	.word	0x0000cc29
    cdd4:	0000ccd9 	.word	0x0000ccd9

0000cdd8 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    cdd8:	b590      	push	{r4, r7, lr}
    cdda:	b085      	sub	sp, #20
    cddc:	af00      	add	r7, sp, #0
    cdde:	4603      	mov	r3, r0
    cde0:	6039      	str	r1, [r7, #0]
    cde2:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cde4:	683b      	ldr	r3, [r7, #0]
    cde6:	781b      	ldrb	r3, [r3, #0]
    cde8:	f003 031f 	and.w	r3, r3, #31
    cdec:	2b00      	cmp	r3, #0
    cdee:	db1b      	blt.n	ce28 <usbdc_get_status_req+0x50>
    cdf0:	2b01      	cmp	r3, #1
    cdf2:	dd02      	ble.n	cdfa <usbdc_get_status_req+0x22>
    cdf4:	2b02      	cmp	r3, #2
    cdf6:	d003      	beq.n	ce00 <usbdc_get_status_req+0x28>
    cdf8:	e016      	b.n	ce28 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    cdfa:	2300      	movs	r3, #0
    cdfc:	60fb      	str	r3, [r7, #12]
		break;
    cdfe:	e015      	b.n	ce2c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ce00:	683b      	ldr	r3, [r7, #0]
    ce02:	889b      	ldrh	r3, [r3, #4]
    ce04:	b29b      	uxth	r3, r3
    ce06:	b2db      	uxtb	r3, r3
    ce08:	2102      	movs	r1, #2
    ce0a:	4618      	mov	r0, r3
    ce0c:	4b0f      	ldr	r3, [pc, #60]	; (ce4c <usbdc_get_status_req+0x74>)
    ce0e:	4798      	blx	r3
    ce10:	4603      	mov	r3, r0
    ce12:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    ce14:	68fb      	ldr	r3, [r7, #12]
    ce16:	2b00      	cmp	r3, #0
    ce18:	da01      	bge.n	ce1e <usbdc_get_status_req+0x46>
			return false;
    ce1a:	2300      	movs	r3, #0
    ce1c:	e012      	b.n	ce44 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    ce1e:	68fb      	ldr	r3, [r7, #12]
    ce20:	f003 0301 	and.w	r3, r3, #1
    ce24:	60fb      	str	r3, [r7, #12]
		break;
    ce26:	e001      	b.n	ce2c <usbdc_get_status_req+0x54>
	default:
		return false;
    ce28:	2300      	movs	r3, #0
    ce2a:	e00b      	b.n	ce44 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    ce2c:	4b08      	ldr	r3, [pc, #32]	; (ce50 <usbdc_get_status_req+0x78>)
    ce2e:	695b      	ldr	r3, [r3, #20]
    ce30:	89ba      	ldrh	r2, [r7, #12]
    ce32:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ce34:	4b06      	ldr	r3, [pc, #24]	; (ce50 <usbdc_get_status_req+0x78>)
    ce36:	6959      	ldr	r1, [r3, #20]
    ce38:	79f8      	ldrb	r0, [r7, #7]
    ce3a:	2300      	movs	r3, #0
    ce3c:	2202      	movs	r2, #2
    ce3e:	4c05      	ldr	r4, [pc, #20]	; (ce54 <usbdc_get_status_req+0x7c>)
    ce40:	47a0      	blx	r4
	return true;
    ce42:	2301      	movs	r3, #1
}
    ce44:	4618      	mov	r0, r3
    ce46:	3714      	adds	r7, #20
    ce48:	46bd      	mov	sp, r7
    ce4a:	bd90      	pop	{r4, r7, pc}
    ce4c:	000039e1 	.word	0x000039e1
    ce50:	20000cb0 	.word	0x20000cb0
    ce54:	0000d695 	.word	0x0000d695

0000ce58 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    ce58:	b590      	push	{r4, r7, lr}
    ce5a:	b085      	sub	sp, #20
    ce5c:	af00      	add	r7, sp, #0
    ce5e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ce60:	4b1f      	ldr	r3, [pc, #124]	; (cee0 <usbdc_get_interface+0x88>)
    ce62:	691b      	ldr	r3, [r3, #16]
    ce64:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    ce66:	4b1e      	ldr	r3, [pc, #120]	; (cee0 <usbdc_get_interface+0x88>)
    ce68:	7f5b      	ldrb	r3, [r3, #29]
    ce6a:	461a      	mov	r2, r3
    ce6c:	687b      	ldr	r3, [r7, #4]
    ce6e:	889b      	ldrh	r3, [r3, #4]
    ce70:	b29b      	uxth	r3, r3
    ce72:	fa42 f303 	asr.w	r3, r2, r3
    ce76:	f003 0301 	and.w	r3, r3, #1
    ce7a:	2b00      	cmp	r3, #0
    ce7c:	d128      	bne.n	ced0 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    ce7e:	4b18      	ldr	r3, [pc, #96]	; (cee0 <usbdc_get_interface+0x88>)
    ce80:	695b      	ldr	r3, [r3, #20]
    ce82:	2200      	movs	r2, #0
    ce84:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ce86:	4b16      	ldr	r3, [pc, #88]	; (cee0 <usbdc_get_interface+0x88>)
    ce88:	6959      	ldr	r1, [r3, #20]
    ce8a:	2300      	movs	r3, #0
    ce8c:	2201      	movs	r2, #1
    ce8e:	2000      	movs	r0, #0
    ce90:	4c14      	ldr	r4, [pc, #80]	; (cee4 <usbdc_get_interface+0x8c>)
    ce92:	47a0      	blx	r4
		return true;
    ce94:	2301      	movs	r3, #1
    ce96:	e01f      	b.n	ced8 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    ce98:	68fb      	ldr	r3, [r7, #12]
    ce9a:	685b      	ldr	r3, [r3, #4]
    ce9c:	687a      	ldr	r2, [r7, #4]
    ce9e:	2102      	movs	r1, #2
    cea0:	68f8      	ldr	r0, [r7, #12]
    cea2:	4798      	blx	r3
    cea4:	60b8      	str	r0, [r7, #8]
    cea6:	68bb      	ldr	r3, [r7, #8]
    cea8:	2b00      	cmp	r3, #0
    ceaa:	da03      	bge.n	ceb4 <usbdc_get_interface+0x5c>
			func = func->next;
    ceac:	68fb      	ldr	r3, [r7, #12]
    ceae:	681b      	ldr	r3, [r3, #0]
    ceb0:	60fb      	str	r3, [r7, #12]
    ceb2:	e00d      	b.n	ced0 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    ceb4:	4b0a      	ldr	r3, [pc, #40]	; (cee0 <usbdc_get_interface+0x88>)
    ceb6:	695b      	ldr	r3, [r3, #20]
    ceb8:	68ba      	ldr	r2, [r7, #8]
    ceba:	b2d2      	uxtb	r2, r2
    cebc:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cebe:	4b08      	ldr	r3, [pc, #32]	; (cee0 <usbdc_get_interface+0x88>)
    cec0:	6959      	ldr	r1, [r3, #20]
    cec2:	2300      	movs	r3, #0
    cec4:	2201      	movs	r2, #1
    cec6:	2000      	movs	r0, #0
    cec8:	4c06      	ldr	r4, [pc, #24]	; (cee4 <usbdc_get_interface+0x8c>)
    ceca:	47a0      	blx	r4
			return true;
    cecc:	2301      	movs	r3, #1
    cece:	e003      	b.n	ced8 <usbdc_get_interface+0x80>
	while (NULL != func) {
    ced0:	68fb      	ldr	r3, [r7, #12]
    ced2:	2b00      	cmp	r3, #0
    ced4:	d1e0      	bne.n	ce98 <usbdc_get_interface+0x40>
		}
	}
	return false;
    ced6:	2300      	movs	r3, #0
}
    ced8:	4618      	mov	r0, r3
    ceda:	3714      	adds	r7, #20
    cedc:	46bd      	mov	sp, r7
    cede:	bd90      	pop	{r4, r7, pc}
    cee0:	20000cb0 	.word	0x20000cb0
    cee4:	0000d695 	.word	0x0000d695

0000cee8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    cee8:	b590      	push	{r4, r7, lr}
    ceea:	b083      	sub	sp, #12
    ceec:	af00      	add	r7, sp, #0
    ceee:	4603      	mov	r3, r0
    cef0:	6039      	str	r1, [r7, #0]
    cef2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cef4:	683b      	ldr	r3, [r7, #0]
    cef6:	785b      	ldrb	r3, [r3, #1]
    cef8:	2b0a      	cmp	r3, #10
    cefa:	d83a      	bhi.n	cf72 <usbdc_get_req+0x8a>
    cefc:	a201      	add	r2, pc, #4	; (adr r2, cf04 <usbdc_get_req+0x1c>)
    cefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cf02:	bf00      	nop
    cf04:	0000cf5b 	.word	0x0000cf5b
    cf08:	0000cf73 	.word	0x0000cf73
    cf0c:	0000cf73 	.word	0x0000cf73
    cf10:	0000cf73 	.word	0x0000cf73
    cf14:	0000cf73 	.word	0x0000cf73
    cf18:	0000cf73 	.word	0x0000cf73
    cf1c:	0000cf31 	.word	0x0000cf31
    cf20:	0000cf73 	.word	0x0000cf73
    cf24:	0000cf3f 	.word	0x0000cf3f
    cf28:	0000cf73 	.word	0x0000cf73
    cf2c:	0000cf69 	.word	0x0000cf69
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    cf30:	79fb      	ldrb	r3, [r7, #7]
    cf32:	6839      	ldr	r1, [r7, #0]
    cf34:	4618      	mov	r0, r3
    cf36:	4b11      	ldr	r3, [pc, #68]	; (cf7c <usbdc_get_req+0x94>)
    cf38:	4798      	blx	r3
    cf3a:	4603      	mov	r3, r0
    cf3c:	e01a      	b.n	cf74 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    cf3e:	4b10      	ldr	r3, [pc, #64]	; (cf80 <usbdc_get_req+0x98>)
    cf40:	695b      	ldr	r3, [r3, #20]
    cf42:	4a0f      	ldr	r2, [pc, #60]	; (cf80 <usbdc_get_req+0x98>)
    cf44:	7ed2      	ldrb	r2, [r2, #27]
    cf46:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    cf48:	4b0d      	ldr	r3, [pc, #52]	; (cf80 <usbdc_get_req+0x98>)
    cf4a:	6959      	ldr	r1, [r3, #20]
    cf4c:	79f8      	ldrb	r0, [r7, #7]
    cf4e:	2300      	movs	r3, #0
    cf50:	2201      	movs	r2, #1
    cf52:	4c0c      	ldr	r4, [pc, #48]	; (cf84 <usbdc_get_req+0x9c>)
    cf54:	47a0      	blx	r4
		return true;
    cf56:	2301      	movs	r3, #1
    cf58:	e00c      	b.n	cf74 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    cf5a:	79fb      	ldrb	r3, [r7, #7]
    cf5c:	6839      	ldr	r1, [r7, #0]
    cf5e:	4618      	mov	r0, r3
    cf60:	4b09      	ldr	r3, [pc, #36]	; (cf88 <usbdc_get_req+0xa0>)
    cf62:	4798      	blx	r3
    cf64:	4603      	mov	r3, r0
    cf66:	e005      	b.n	cf74 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    cf68:	6838      	ldr	r0, [r7, #0]
    cf6a:	4b08      	ldr	r3, [pc, #32]	; (cf8c <usbdc_get_req+0xa4>)
    cf6c:	4798      	blx	r3
    cf6e:	4603      	mov	r3, r0
    cf70:	e000      	b.n	cf74 <usbdc_get_req+0x8c>
	default:
		return false;
    cf72:	2300      	movs	r3, #0
	}
}
    cf74:	4618      	mov	r0, r3
    cf76:	370c      	adds	r7, #12
    cf78:	46bd      	mov	sp, r7
    cf7a:	bd90      	pop	{r4, r7, pc}
    cf7c:	0000cd71 	.word	0x0000cd71
    cf80:	20000cb0 	.word	0x20000cb0
    cf84:	0000d695 	.word	0x0000d695
    cf88:	0000cdd9 	.word	0x0000cdd9
    cf8c:	0000ce59 	.word	0x0000ce59

0000cf90 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cf90:	b590      	push	{r4, r7, lr}
    cf92:	b083      	sub	sp, #12
    cf94:	af00      	add	r7, sp, #0
    cf96:	4603      	mov	r3, r0
    cf98:	6039      	str	r1, [r7, #0]
    cf9a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cf9c:	683b      	ldr	r3, [r7, #0]
    cf9e:	781b      	ldrb	r3, [r3, #0]
    cfa0:	f003 031f 	and.w	r3, r3, #31
    cfa4:	2b02      	cmp	r3, #2
    cfa6:	d116      	bne.n	cfd6 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    cfa8:	683b      	ldr	r3, [r7, #0]
    cfaa:	88db      	ldrh	r3, [r3, #6]
    cfac:	b29b      	uxth	r3, r3
    cfae:	2b00      	cmp	r3, #0
    cfb0:	d001      	beq.n	cfb6 <usbdc_clear_ftr_req+0x26>
			return false;
    cfb2:	2300      	movs	r3, #0
    cfb4:	e010      	b.n	cfd8 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    cfb6:	683b      	ldr	r3, [r7, #0]
    cfb8:	889b      	ldrh	r3, [r3, #4]
    cfba:	b29b      	uxth	r3, r3
    cfbc:	b2db      	uxtb	r3, r3
    cfbe:	2100      	movs	r1, #0
    cfc0:	4618      	mov	r0, r3
    cfc2:	4b07      	ldr	r3, [pc, #28]	; (cfe0 <usbdc_clear_ftr_req+0x50>)
    cfc4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    cfc6:	79f8      	ldrb	r0, [r7, #7]
    cfc8:	2301      	movs	r3, #1
    cfca:	2200      	movs	r2, #0
    cfcc:	2100      	movs	r1, #0
    cfce:	4c05      	ldr	r4, [pc, #20]	; (cfe4 <usbdc_clear_ftr_req+0x54>)
    cfd0:	47a0      	blx	r4
		return true;
    cfd2:	2301      	movs	r3, #1
    cfd4:	e000      	b.n	cfd8 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    cfd6:	2300      	movs	r3, #0
	}
}
    cfd8:	4618      	mov	r0, r3
    cfda:	370c      	adds	r7, #12
    cfdc:	46bd      	mov	sp, r7
    cfde:	bd90      	pop	{r4, r7, pc}
    cfe0:	000039e1 	.word	0x000039e1
    cfe4:	0000d695 	.word	0x0000d695

0000cfe8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cfe8:	b590      	push	{r4, r7, lr}
    cfea:	b083      	sub	sp, #12
    cfec:	af00      	add	r7, sp, #0
    cfee:	4603      	mov	r3, r0
    cff0:	6039      	str	r1, [r7, #0]
    cff2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cff4:	683b      	ldr	r3, [r7, #0]
    cff6:	781b      	ldrb	r3, [r3, #0]
    cff8:	f003 031f 	and.w	r3, r3, #31
    cffc:	2b02      	cmp	r3, #2
    cffe:	d116      	bne.n	d02e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d000:	683b      	ldr	r3, [r7, #0]
    d002:	88db      	ldrh	r3, [r3, #6]
    d004:	b29b      	uxth	r3, r3
    d006:	2b00      	cmp	r3, #0
    d008:	d001      	beq.n	d00e <usbdc_set_ftr_req+0x26>
			return false;
    d00a:	2300      	movs	r3, #0
    d00c:	e010      	b.n	d030 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d00e:	683b      	ldr	r3, [r7, #0]
    d010:	889b      	ldrh	r3, [r3, #4]
    d012:	b29b      	uxth	r3, r3
    d014:	b2db      	uxtb	r3, r3
    d016:	2101      	movs	r1, #1
    d018:	4618      	mov	r0, r3
    d01a:	4b07      	ldr	r3, [pc, #28]	; (d038 <usbdc_set_ftr_req+0x50>)
    d01c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d01e:	79f8      	ldrb	r0, [r7, #7]
    d020:	2301      	movs	r3, #1
    d022:	2200      	movs	r2, #0
    d024:	2100      	movs	r1, #0
    d026:	4c05      	ldr	r4, [pc, #20]	; (d03c <usbdc_set_ftr_req+0x54>)
    d028:	47a0      	blx	r4
		return true;
    d02a:	2301      	movs	r3, #1
    d02c:	e000      	b.n	d030 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d02e:	2300      	movs	r3, #0
	}
}
    d030:	4618      	mov	r0, r3
    d032:	370c      	adds	r7, #12
    d034:	46bd      	mov	sp, r7
    d036:	bd90      	pop	{r4, r7, pc}
    d038:	000039e1 	.word	0x000039e1
    d03c:	0000d695 	.word	0x0000d695

0000d040 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d040:	b580      	push	{r7, lr}
    d042:	b082      	sub	sp, #8
    d044:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d046:	4b0a      	ldr	r3, [pc, #40]	; (d070 <usbdc_unconfig+0x30>)
    d048:	691b      	ldr	r3, [r3, #16]
    d04a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d04c:	e008      	b.n	d060 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d04e:	687b      	ldr	r3, [r7, #4]
    d050:	685b      	ldr	r3, [r3, #4]
    d052:	2200      	movs	r2, #0
    d054:	2101      	movs	r1, #1
    d056:	6878      	ldr	r0, [r7, #4]
    d058:	4798      	blx	r3
		func = func->next;
    d05a:	687b      	ldr	r3, [r7, #4]
    d05c:	681b      	ldr	r3, [r3, #0]
    d05e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d060:	687b      	ldr	r3, [r7, #4]
    d062:	2b00      	cmp	r3, #0
    d064:	d1f3      	bne.n	d04e <usbdc_unconfig+0xe>
	}
}
    d066:	bf00      	nop
    d068:	3708      	adds	r7, #8
    d06a:	46bd      	mov	sp, r7
    d06c:	bd80      	pop	{r7, pc}
    d06e:	bf00      	nop
    d070:	20000cb0 	.word	0x20000cb0

0000d074 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d074:	b580      	push	{r7, lr}
    d076:	b088      	sub	sp, #32
    d078:	af00      	add	r7, sp, #0
    d07a:	4603      	mov	r3, r0
    d07c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d07e:	2300      	movs	r3, #0
    d080:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d082:	23ff      	movs	r3, #255	; 0xff
    d084:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d086:	79fb      	ldrb	r3, [r7, #7]
    d088:	2b00      	cmp	r3, #0
    d08a:	d103      	bne.n	d094 <usbdc_set_config+0x20>
		usbdc_unconfig();
    d08c:	4b2e      	ldr	r3, [pc, #184]	; (d148 <usbdc_set_config+0xd4>)
    d08e:	4798      	blx	r3
		return true;
    d090:	2301      	movs	r3, #1
    d092:	e055      	b.n	d140 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d094:	69bb      	ldr	r3, [r7, #24]
    d096:	2b00      	cmp	r3, #0
    d098:	d10a      	bne.n	d0b0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d09a:	4b2c      	ldr	r3, [pc, #176]	; (d14c <usbdc_set_config+0xd8>)
    d09c:	681b      	ldr	r3, [r3, #0]
    d09e:	6818      	ldr	r0, [r3, #0]
    d0a0:	4b2a      	ldr	r3, [pc, #168]	; (d14c <usbdc_set_config+0xd8>)
    d0a2:	681b      	ldr	r3, [r3, #0]
    d0a4:	685b      	ldr	r3, [r3, #4]
    d0a6:	79fa      	ldrb	r2, [r7, #7]
    d0a8:	4619      	mov	r1, r3
    d0aa:	4b29      	ldr	r3, [pc, #164]	; (d150 <usbdc_set_config+0xdc>)
    d0ac:	4798      	blx	r3
    d0ae:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d0b0:	69bb      	ldr	r3, [r7, #24]
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	d101      	bne.n	d0ba <usbdc_set_config+0x46>
		return false;
    d0b6:	2300      	movs	r3, #0
    d0b8:	e042      	b.n	d140 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d0ba:	69b8      	ldr	r0, [r7, #24]
    d0bc:	4b25      	ldr	r3, [pc, #148]	; (d154 <usbdc_set_config+0xe0>)
    d0be:	4798      	blx	r3
    d0c0:	4603      	mov	r3, r0
    d0c2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d0c4:	8abb      	ldrh	r3, [r7, #20]
    d0c6:	69ba      	ldr	r2, [r7, #24]
    d0c8:	4413      	add	r3, r2
    d0ca:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d0cc:	693b      	ldr	r3, [r7, #16]
    d0ce:	2204      	movs	r2, #4
    d0d0:	4619      	mov	r1, r3
    d0d2:	69b8      	ldr	r0, [r7, #24]
    d0d4:	4b20      	ldr	r3, [pc, #128]	; (d158 <usbdc_set_config+0xe4>)
    d0d6:	4798      	blx	r3
    d0d8:	4603      	mov	r3, r0
    d0da:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d0dc:	e02c      	b.n	d138 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d0de:	68fb      	ldr	r3, [r7, #12]
    d0e0:	3302      	adds	r3, #2
    d0e2:	781b      	ldrb	r3, [r3, #0]
    d0e4:	7dfa      	ldrb	r2, [r7, #23]
    d0e6:	429a      	cmp	r2, r3
    d0e8:	d018      	beq.n	d11c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d0ea:	68fb      	ldr	r3, [r7, #12]
    d0ec:	789b      	ldrb	r3, [r3, #2]
    d0ee:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d0f0:	4b16      	ldr	r3, [pc, #88]	; (d14c <usbdc_set_config+0xd8>)
    d0f2:	691b      	ldr	r3, [r3, #16]
    d0f4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d0f6:	e00c      	b.n	d112 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d0f8:	69fb      	ldr	r3, [r7, #28]
    d0fa:	685b      	ldr	r3, [r3, #4]
    d0fc:	f107 020c 	add.w	r2, r7, #12
    d100:	2100      	movs	r1, #0
    d102:	69f8      	ldr	r0, [r7, #28]
    d104:	4798      	blx	r3
    d106:	4603      	mov	r3, r0
    d108:	2b00      	cmp	r3, #0
    d10a:	d006      	beq.n	d11a <usbdc_set_config+0xa6>
					func = func->next;
    d10c:	69fb      	ldr	r3, [r7, #28]
    d10e:	681b      	ldr	r3, [r3, #0]
    d110:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d112:	69fb      	ldr	r3, [r7, #28]
    d114:	2b00      	cmp	r3, #0
    d116:	d1ef      	bne.n	d0f8 <usbdc_set_config+0x84>
    d118:	e000      	b.n	d11c <usbdc_set_config+0xa8>
				} else {
					break;
    d11a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d11c:	68fb      	ldr	r3, [r7, #12]
    d11e:	4618      	mov	r0, r3
    d120:	4b0e      	ldr	r3, [pc, #56]	; (d15c <usbdc_set_config+0xe8>)
    d122:	4798      	blx	r3
    d124:	4603      	mov	r3, r0
    d126:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d128:	68fb      	ldr	r3, [r7, #12]
    d12a:	6939      	ldr	r1, [r7, #16]
    d12c:	2204      	movs	r2, #4
    d12e:	4618      	mov	r0, r3
    d130:	4b09      	ldr	r3, [pc, #36]	; (d158 <usbdc_set_config+0xe4>)
    d132:	4798      	blx	r3
    d134:	4603      	mov	r3, r0
    d136:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d138:	68fb      	ldr	r3, [r7, #12]
    d13a:	2b00      	cmp	r3, #0
    d13c:	d1cf      	bne.n	d0de <usbdc_set_config+0x6a>
	}
	return true;
    d13e:	2301      	movs	r3, #1
}
    d140:	4618      	mov	r0, r3
    d142:	3720      	adds	r7, #32
    d144:	46bd      	mov	sp, r7
    d146:	bd80      	pop	{r7, pc}
    d148:	0000d041 	.word	0x0000d041
    d14c:	20000cb0 	.word	0x20000cb0
    d150:	0000d9e5 	.word	0x0000d9e5
    d154:	0000cb91 	.word	0x0000cb91
    d158:	0000d925 	.word	0x0000d925
    d15c:	0000cb6d 	.word	0x0000cb6d

0000d160 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d160:	b580      	push	{r7, lr}
    d162:	b082      	sub	sp, #8
    d164:	af00      	add	r7, sp, #0
    d166:	4603      	mov	r3, r0
    d168:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d16a:	79fb      	ldrb	r3, [r7, #7]
    d16c:	4618      	mov	r0, r3
    d16e:	4b03      	ldr	r3, [pc, #12]	; (d17c <usbdc_set_address+0x1c>)
    d170:	4798      	blx	r3
}
    d172:	bf00      	nop
    d174:	3708      	adds	r7, #8
    d176:	46bd      	mov	sp, r7
    d178:	bd80      	pop	{r7, pc}
    d17a:	bf00      	nop
    d17c:	000035fd 	.word	0x000035fd

0000d180 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d180:	b590      	push	{r4, r7, lr}
    d182:	b087      	sub	sp, #28
    d184:	af00      	add	r7, sp, #0
    d186:	4603      	mov	r3, r0
    d188:	460a      	mov	r2, r1
    d18a:	80fb      	strh	r3, [r7, #6]
    d18c:	4613      	mov	r3, r2
    d18e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d190:	2300      	movs	r3, #0
    d192:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d194:	693b      	ldr	r3, [r7, #16]
    d196:	2b00      	cmp	r3, #0
    d198:	d10b      	bne.n	d1b2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d19a:	4b43      	ldr	r3, [pc, #268]	; (d2a8 <usbdc_set_interface+0x128>)
    d19c:	681b      	ldr	r3, [r3, #0]
    d19e:	6818      	ldr	r0, [r3, #0]
    d1a0:	4b41      	ldr	r3, [pc, #260]	; (d2a8 <usbdc_set_interface+0x128>)
    d1a2:	681b      	ldr	r3, [r3, #0]
    d1a4:	6859      	ldr	r1, [r3, #4]
    d1a6:	4b40      	ldr	r3, [pc, #256]	; (d2a8 <usbdc_set_interface+0x128>)
    d1a8:	7edb      	ldrb	r3, [r3, #27]
    d1aa:	461a      	mov	r2, r3
    d1ac:	4b3f      	ldr	r3, [pc, #252]	; (d2ac <usbdc_set_interface+0x12c>)
    d1ae:	4798      	blx	r3
    d1b0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d1b2:	693b      	ldr	r3, [r7, #16]
    d1b4:	2b00      	cmp	r3, #0
    d1b6:	d101      	bne.n	d1bc <usbdc_set_interface+0x3c>
		return false;
    d1b8:	2300      	movs	r3, #0
    d1ba:	e071      	b.n	d2a0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d1bc:	693b      	ldr	r3, [r7, #16]
    d1be:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d1c0:	6938      	ldr	r0, [r7, #16]
    d1c2:	4b3b      	ldr	r3, [pc, #236]	; (d2b0 <usbdc_set_interface+0x130>)
    d1c4:	4798      	blx	r3
    d1c6:	4603      	mov	r3, r0
    d1c8:	461a      	mov	r2, r3
    d1ca:	693b      	ldr	r3, [r7, #16]
    d1cc:	4413      	add	r3, r2
    d1ce:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d1d0:	68bb      	ldr	r3, [r7, #8]
    d1d2:	68f9      	ldr	r1, [r7, #12]
    d1d4:	2204      	movs	r2, #4
    d1d6:	4618      	mov	r0, r3
    d1d8:	4b36      	ldr	r3, [pc, #216]	; (d2b4 <usbdc_set_interface+0x134>)
    d1da:	4798      	blx	r3
    d1dc:	6138      	str	r0, [r7, #16]
    d1de:	693b      	ldr	r3, [r7, #16]
    d1e0:	2b00      	cmp	r3, #0
    d1e2:	d113      	bne.n	d20c <usbdc_set_interface+0x8c>
		return false;
    d1e4:	2300      	movs	r3, #0
    d1e6:	e05b      	b.n	d2a0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d1e8:	68bb      	ldr	r3, [r7, #8]
    d1ea:	4618      	mov	r0, r3
    d1ec:	4b32      	ldr	r3, [pc, #200]	; (d2b8 <usbdc_set_interface+0x138>)
    d1ee:	4798      	blx	r3
    d1f0:	4603      	mov	r3, r0
    d1f2:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d1f4:	68bb      	ldr	r3, [r7, #8]
    d1f6:	68f9      	ldr	r1, [r7, #12]
    d1f8:	2204      	movs	r2, #4
    d1fa:	4618      	mov	r0, r3
    d1fc:	4b2d      	ldr	r3, [pc, #180]	; (d2b4 <usbdc_set_interface+0x134>)
    d1fe:	4798      	blx	r3
    d200:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d202:	693b      	ldr	r3, [r7, #16]
    d204:	2b00      	cmp	r3, #0
    d206:	d101      	bne.n	d20c <usbdc_set_interface+0x8c>
			return false;
    d208:	2300      	movs	r3, #0
    d20a:	e049      	b.n	d2a0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d20c:	693b      	ldr	r3, [r7, #16]
    d20e:	3302      	adds	r3, #2
    d210:	781b      	ldrb	r3, [r3, #0]
    d212:	b29b      	uxth	r3, r3
    d214:	88ba      	ldrh	r2, [r7, #4]
    d216:	429a      	cmp	r2, r3
    d218:	d1e6      	bne.n	d1e8 <usbdc_set_interface+0x68>
    d21a:	693b      	ldr	r3, [r7, #16]
    d21c:	3303      	adds	r3, #3
    d21e:	781b      	ldrb	r3, [r3, #0]
    d220:	b29b      	uxth	r3, r3
    d222:	88fa      	ldrh	r2, [r7, #6]
    d224:	429a      	cmp	r2, r3
    d226:	d1df      	bne.n	d1e8 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d228:	693b      	ldr	r3, [r7, #16]
    d22a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d22c:	4b1e      	ldr	r3, [pc, #120]	; (d2a8 <usbdc_set_interface+0x128>)
    d22e:	691b      	ldr	r3, [r3, #16]
    d230:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d232:	e031      	b.n	d298 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d234:	697b      	ldr	r3, [r7, #20]
    d236:	685b      	ldr	r3, [r3, #4]
    d238:	f107 0208 	add.w	r2, r7, #8
    d23c:	2101      	movs	r1, #1
    d23e:	6978      	ldr	r0, [r7, #20]
    d240:	4798      	blx	r3
    d242:	4603      	mov	r3, r0
    d244:	2b00      	cmp	r3, #0
    d246:	d003      	beq.n	d250 <usbdc_set_interface+0xd0>
			func = func->next;
    d248:	697b      	ldr	r3, [r7, #20]
    d24a:	681b      	ldr	r3, [r3, #0]
    d24c:	617b      	str	r3, [r7, #20]
    d24e:	e023      	b.n	d298 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d250:	697b      	ldr	r3, [r7, #20]
    d252:	685b      	ldr	r3, [r3, #4]
    d254:	f107 0208 	add.w	r2, r7, #8
    d258:	2100      	movs	r1, #0
    d25a:	6978      	ldr	r0, [r7, #20]
    d25c:	4798      	blx	r3
    d25e:	4603      	mov	r3, r0
    d260:	2b00      	cmp	r3, #0
    d262:	d117      	bne.n	d294 <usbdc_set_interface+0x114>
			if (alt_set) {
    d264:	88fb      	ldrh	r3, [r7, #6]
    d266:	2b00      	cmp	r3, #0
    d268:	d00c      	beq.n	d284 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d26a:	4b0f      	ldr	r3, [pc, #60]	; (d2a8 <usbdc_set_interface+0x128>)
    d26c:	7f5b      	ldrb	r3, [r3, #29]
    d26e:	b25a      	sxtb	r2, r3
    d270:	88bb      	ldrh	r3, [r7, #4]
    d272:	2101      	movs	r1, #1
    d274:	fa01 f303 	lsl.w	r3, r1, r3
    d278:	b25b      	sxtb	r3, r3
    d27a:	4313      	orrs	r3, r2
    d27c:	b25b      	sxtb	r3, r3
    d27e:	b2da      	uxtb	r2, r3
    d280:	4b09      	ldr	r3, [pc, #36]	; (d2a8 <usbdc_set_interface+0x128>)
    d282:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d284:	2300      	movs	r3, #0
    d286:	2200      	movs	r2, #0
    d288:	2100      	movs	r1, #0
    d28a:	2000      	movs	r0, #0
    d28c:	4c0b      	ldr	r4, [pc, #44]	; (d2bc <usbdc_set_interface+0x13c>)
    d28e:	47a0      	blx	r4
			return true;
    d290:	2301      	movs	r3, #1
    d292:	e005      	b.n	d2a0 <usbdc_set_interface+0x120>
		} else {
			return false;
    d294:	2300      	movs	r3, #0
    d296:	e003      	b.n	d2a0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d298:	697b      	ldr	r3, [r7, #20]
    d29a:	2b00      	cmp	r3, #0
    d29c:	d1ca      	bne.n	d234 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d29e:	2300      	movs	r3, #0
}
    d2a0:	4618      	mov	r0, r3
    d2a2:	371c      	adds	r7, #28
    d2a4:	46bd      	mov	sp, r7
    d2a6:	bd90      	pop	{r4, r7, pc}
    d2a8:	20000cb0 	.word	0x20000cb0
    d2ac:	0000d9e5 	.word	0x0000d9e5
    d2b0:	0000cb91 	.word	0x0000cb91
    d2b4:	0000d925 	.word	0x0000d925
    d2b8:	0000cb6d 	.word	0x0000cb6d
    d2bc:	0000d695 	.word	0x0000d695

0000d2c0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d2c0:	b590      	push	{r4, r7, lr}
    d2c2:	b083      	sub	sp, #12
    d2c4:	af00      	add	r7, sp, #0
    d2c6:	4603      	mov	r3, r0
    d2c8:	6039      	str	r1, [r7, #0]
    d2ca:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d2cc:	683b      	ldr	r3, [r7, #0]
    d2ce:	785b      	ldrb	r3, [r3, #1]
    d2d0:	3b01      	subs	r3, #1
    d2d2:	2b0a      	cmp	r3, #10
    d2d4:	d85b      	bhi.n	d38e <usbdc_set_req+0xce>
    d2d6:	a201      	add	r2, pc, #4	; (adr r2, d2dc <usbdc_set_req+0x1c>)
    d2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d2dc:	0000d35b 	.word	0x0000d35b
    d2e0:	0000d38f 	.word	0x0000d38f
    d2e4:	0000d369 	.word	0x0000d369
    d2e8:	0000d38f 	.word	0x0000d38f
    d2ec:	0000d309 	.word	0x0000d309
    d2f0:	0000d38f 	.word	0x0000d38f
    d2f4:	0000d38f 	.word	0x0000d38f
    d2f8:	0000d38f 	.word	0x0000d38f
    d2fc:	0000d323 	.word	0x0000d323
    d300:	0000d38f 	.word	0x0000d38f
    d304:	0000d377 	.word	0x0000d377
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d308:	79f8      	ldrb	r0, [r7, #7]
    d30a:	2301      	movs	r3, #1
    d30c:	2200      	movs	r2, #0
    d30e:	2100      	movs	r1, #0
    d310:	4c21      	ldr	r4, [pc, #132]	; (d398 <usbdc_set_req+0xd8>)
    d312:	47a0      	blx	r4
    d314:	4603      	mov	r3, r0
    d316:	2b00      	cmp	r3, #0
    d318:	bf0c      	ite	eq
    d31a:	2301      	moveq	r3, #1
    d31c:	2300      	movne	r3, #0
    d31e:	b2db      	uxtb	r3, r3
    d320:	e036      	b.n	d390 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d322:	683b      	ldr	r3, [r7, #0]
    d324:	885b      	ldrh	r3, [r3, #2]
    d326:	b29b      	uxth	r3, r3
    d328:	b2db      	uxtb	r3, r3
    d32a:	4618      	mov	r0, r3
    d32c:	4b1b      	ldr	r3, [pc, #108]	; (d39c <usbdc_set_req+0xdc>)
    d32e:	4798      	blx	r3
    d330:	4603      	mov	r3, r0
    d332:	f083 0301 	eor.w	r3, r3, #1
    d336:	b2db      	uxtb	r3, r3
    d338:	2b00      	cmp	r3, #0
    d33a:	d001      	beq.n	d340 <usbdc_set_req+0x80>
			return false;
    d33c:	2300      	movs	r3, #0
    d33e:	e027      	b.n	d390 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d340:	79f8      	ldrb	r0, [r7, #7]
    d342:	2301      	movs	r3, #1
    d344:	2200      	movs	r2, #0
    d346:	2100      	movs	r1, #0
    d348:	4c13      	ldr	r4, [pc, #76]	; (d398 <usbdc_set_req+0xd8>)
    d34a:	47a0      	blx	r4
    d34c:	4603      	mov	r3, r0
    d34e:	2b00      	cmp	r3, #0
    d350:	bf0c      	ite	eq
    d352:	2301      	moveq	r3, #1
    d354:	2300      	movne	r3, #0
    d356:	b2db      	uxtb	r3, r3
    d358:	e01a      	b.n	d390 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d35a:	79fb      	ldrb	r3, [r7, #7]
    d35c:	6839      	ldr	r1, [r7, #0]
    d35e:	4618      	mov	r0, r3
    d360:	4b0f      	ldr	r3, [pc, #60]	; (d3a0 <usbdc_set_req+0xe0>)
    d362:	4798      	blx	r3
    d364:	4603      	mov	r3, r0
    d366:	e013      	b.n	d390 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d368:	79fb      	ldrb	r3, [r7, #7]
    d36a:	6839      	ldr	r1, [r7, #0]
    d36c:	4618      	mov	r0, r3
    d36e:	4b0d      	ldr	r3, [pc, #52]	; (d3a4 <usbdc_set_req+0xe4>)
    d370:	4798      	blx	r3
    d372:	4603      	mov	r3, r0
    d374:	e00c      	b.n	d390 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d376:	683b      	ldr	r3, [r7, #0]
    d378:	885b      	ldrh	r3, [r3, #2]
    d37a:	b29a      	uxth	r2, r3
    d37c:	683b      	ldr	r3, [r7, #0]
    d37e:	889b      	ldrh	r3, [r3, #4]
    d380:	b29b      	uxth	r3, r3
    d382:	4619      	mov	r1, r3
    d384:	4610      	mov	r0, r2
    d386:	4b08      	ldr	r3, [pc, #32]	; (d3a8 <usbdc_set_req+0xe8>)
    d388:	4798      	blx	r3
    d38a:	4603      	mov	r3, r0
    d38c:	e000      	b.n	d390 <usbdc_set_req+0xd0>
	default:
		return false;
    d38e:	2300      	movs	r3, #0
	}
}
    d390:	4618      	mov	r0, r3
    d392:	370c      	adds	r7, #12
    d394:	46bd      	mov	sp, r7
    d396:	bd90      	pop	{r4, r7, pc}
    d398:	0000d695 	.word	0x0000d695
    d39c:	0000d075 	.word	0x0000d075
    d3a0:	0000cf91 	.word	0x0000cf91
    d3a4:	0000cfe9 	.word	0x0000cfe9
    d3a8:	0000d181 	.word	0x0000d181

0000d3ac <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d3ac:	b580      	push	{r7, lr}
    d3ae:	b082      	sub	sp, #8
    d3b0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d3b2:	4b0a      	ldr	r3, [pc, #40]	; (d3dc <usbdc_sof_notify+0x30>)
    d3b4:	685b      	ldr	r3, [r3, #4]
    d3b6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d3b8:	e009      	b.n	d3ce <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d3ba:	687b      	ldr	r3, [r7, #4]
    d3bc:	685b      	ldr	r3, [r3, #4]
    d3be:	2b00      	cmp	r3, #0
    d3c0:	d002      	beq.n	d3c8 <usbdc_sof_notify+0x1c>
			sof->cb();
    d3c2:	687b      	ldr	r3, [r7, #4]
    d3c4:	685b      	ldr	r3, [r3, #4]
    d3c6:	4798      	blx	r3
		}
		sof = sof->next;
    d3c8:	687b      	ldr	r3, [r7, #4]
    d3ca:	681b      	ldr	r3, [r3, #0]
    d3cc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d3ce:	687b      	ldr	r3, [r7, #4]
    d3d0:	2b00      	cmp	r3, #0
    d3d2:	d1f2      	bne.n	d3ba <usbdc_sof_notify+0xe>
	}
}
    d3d4:	bf00      	nop
    d3d6:	3708      	adds	r7, #8
    d3d8:	46bd      	mov	sp, r7
    d3da:	bd80      	pop	{r7, pc}
    d3dc:	20000cb0 	.word	0x20000cb0

0000d3e0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d3e0:	b580      	push	{r7, lr}
    d3e2:	b084      	sub	sp, #16
    d3e4:	af00      	add	r7, sp, #0
    d3e6:	4603      	mov	r3, r0
    d3e8:	6039      	str	r1, [r7, #0]
    d3ea:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d3ec:	4b0b      	ldr	r3, [pc, #44]	; (d41c <usbdc_change_notify+0x3c>)
    d3ee:	68db      	ldr	r3, [r3, #12]
    d3f0:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d3f2:	e00c      	b.n	d40e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d3f4:	68fb      	ldr	r3, [r7, #12]
    d3f6:	685b      	ldr	r3, [r3, #4]
    d3f8:	2b00      	cmp	r3, #0
    d3fa:	d005      	beq.n	d408 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d3fc:	68fb      	ldr	r3, [r7, #12]
    d3fe:	685b      	ldr	r3, [r3, #4]
    d400:	79fa      	ldrb	r2, [r7, #7]
    d402:	6839      	ldr	r1, [r7, #0]
    d404:	4610      	mov	r0, r2
    d406:	4798      	blx	r3
		}
		cg = cg->next;
    d408:	68fb      	ldr	r3, [r7, #12]
    d40a:	681b      	ldr	r3, [r3, #0]
    d40c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d40e:	68fb      	ldr	r3, [r7, #12]
    d410:	2b00      	cmp	r3, #0
    d412:	d1ef      	bne.n	d3f4 <usbdc_change_notify+0x14>
	}
}
    d414:	bf00      	nop
    d416:	3710      	adds	r7, #16
    d418:	46bd      	mov	sp, r7
    d41a:	bd80      	pop	{r7, pc}
    d41c:	20000cb0 	.word	0x20000cb0

0000d420 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d420:	b580      	push	{r7, lr}
    d422:	b084      	sub	sp, #16
    d424:	af00      	add	r7, sp, #0
    d426:	4603      	mov	r3, r0
    d428:	6039      	str	r1, [r7, #0]
    d42a:	71fb      	strb	r3, [r7, #7]
    d42c:	4613      	mov	r3, r2
    d42e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d430:	4b12      	ldr	r3, [pc, #72]	; (d47c <usbdc_request_handler+0x5c>)
    d432:	689b      	ldr	r3, [r3, #8]
    d434:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d436:	e019      	b.n	d46c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d438:	68fb      	ldr	r3, [r7, #12]
    d43a:	685b      	ldr	r3, [r3, #4]
    d43c:	2b00      	cmp	r3, #0
    d43e:	d012      	beq.n	d466 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d440:	68fb      	ldr	r3, [r7, #12]
    d442:	685b      	ldr	r3, [r3, #4]
    d444:	79ba      	ldrb	r2, [r7, #6]
    d446:	79f8      	ldrb	r0, [r7, #7]
    d448:	6839      	ldr	r1, [r7, #0]
    d44a:	4798      	blx	r3
    d44c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d44e:	68bb      	ldr	r3, [r7, #8]
    d450:	2b00      	cmp	r3, #0
    d452:	d101      	bne.n	d458 <usbdc_request_handler+0x38>
				return true;
    d454:	2301      	movs	r3, #1
    d456:	e00d      	b.n	d474 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d458:	68bb      	ldr	r3, [r7, #8]
    d45a:	f113 0f0a 	cmn.w	r3, #10
    d45e:	d002      	beq.n	d466 <usbdc_request_handler+0x46>
				return -1;
    d460:	f04f 33ff 	mov.w	r3, #4294967295
    d464:	e006      	b.n	d474 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d466:	68fb      	ldr	r3, [r7, #12]
    d468:	681b      	ldr	r3, [r3, #0]
    d46a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d46c:	68fb      	ldr	r3, [r7, #12]
    d46e:	2b00      	cmp	r3, #0
    d470:	d1e2      	bne.n	d438 <usbdc_request_handler+0x18>
	}
	return false;
    d472:	2300      	movs	r3, #0
}
    d474:	4618      	mov	r0, r3
    d476:	3710      	adds	r7, #16
    d478:	46bd      	mov	sp, r7
    d47a:	bd80      	pop	{r7, pc}
    d47c:	20000cb0 	.word	0x20000cb0

0000d480 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d480:	b580      	push	{r7, lr}
    d482:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d484:	4b01      	ldr	r3, [pc, #4]	; (d48c <usbd_sof_cb+0xc>)
    d486:	4798      	blx	r3
}
    d488:	bf00      	nop
    d48a:	bd80      	pop	{r7, pc}
    d48c:	0000d3ad 	.word	0x0000d3ad

0000d490 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d490:	b580      	push	{r7, lr}
    d492:	b082      	sub	sp, #8
    d494:	af00      	add	r7, sp, #0
    d496:	4603      	mov	r3, r0
    d498:	6039      	str	r1, [r7, #0]
    d49a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d49c:	79fb      	ldrb	r3, [r7, #7]
    d49e:	2200      	movs	r2, #0
    d4a0:	6839      	ldr	r1, [r7, #0]
    d4a2:	4618      	mov	r0, r3
    d4a4:	4b14      	ldr	r3, [pc, #80]	; (d4f8 <usbdc_cb_ctl_req+0x68>)
    d4a6:	4798      	blx	r3
    d4a8:	4603      	mov	r3, r0
    d4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    d4ae:	d00b      	beq.n	d4c8 <usbdc_cb_ctl_req+0x38>
    d4b0:	2b01      	cmp	r3, #1
    d4b2:	d007      	beq.n	d4c4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d4b4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d4b6:	683b      	ldr	r3, [r7, #0]
    d4b8:	781b      	ldrb	r3, [r3, #0]
    d4ba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d4be:	2b00      	cmp	r3, #0
    d4c0:	d007      	beq.n	d4d2 <usbdc_cb_ctl_req+0x42>
    d4c2:	e003      	b.n	d4cc <usbdc_cb_ctl_req+0x3c>
		return true;
    d4c4:	2301      	movs	r3, #1
    d4c6:	e013      	b.n	d4f0 <usbdc_cb_ctl_req+0x60>
		return false;
    d4c8:	2300      	movs	r3, #0
    d4ca:	e011      	b.n	d4f0 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d4cc:	2b80      	cmp	r3, #128	; 0x80
    d4ce:	d007      	beq.n	d4e0 <usbdc_cb_ctl_req+0x50>
    d4d0:	e00d      	b.n	d4ee <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d4d2:	79fb      	ldrb	r3, [r7, #7]
    d4d4:	6839      	ldr	r1, [r7, #0]
    d4d6:	4618      	mov	r0, r3
    d4d8:	4b08      	ldr	r3, [pc, #32]	; (d4fc <usbdc_cb_ctl_req+0x6c>)
    d4da:	4798      	blx	r3
    d4dc:	4603      	mov	r3, r0
    d4de:	e007      	b.n	d4f0 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d4e0:	79fb      	ldrb	r3, [r7, #7]
    d4e2:	6839      	ldr	r1, [r7, #0]
    d4e4:	4618      	mov	r0, r3
    d4e6:	4b06      	ldr	r3, [pc, #24]	; (d500 <usbdc_cb_ctl_req+0x70>)
    d4e8:	4798      	blx	r3
    d4ea:	4603      	mov	r3, r0
    d4ec:	e000      	b.n	d4f0 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d4ee:	2300      	movs	r3, #0
	}
}
    d4f0:	4618      	mov	r0, r3
    d4f2:	3708      	adds	r7, #8
    d4f4:	46bd      	mov	sp, r7
    d4f6:	bd80      	pop	{r7, pc}
    d4f8:	0000d421 	.word	0x0000d421
    d4fc:	0000d2c1 	.word	0x0000d2c1
    d500:	0000cee9 	.word	0x0000cee9

0000d504 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d504:	b580      	push	{r7, lr}
    d506:	b082      	sub	sp, #8
    d508:	af00      	add	r7, sp, #0
    d50a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d50c:	687b      	ldr	r3, [r7, #4]
    d50e:	781b      	ldrb	r3, [r3, #0]
    d510:	2b00      	cmp	r3, #0
    d512:	d135      	bne.n	d580 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d514:	687b      	ldr	r3, [r7, #4]
    d516:	785b      	ldrb	r3, [r3, #1]
    d518:	2b05      	cmp	r3, #5
    d51a:	d019      	beq.n	d550 <usbdc_ctrl_status_end+0x4c>
    d51c:	2b09      	cmp	r3, #9
    d51e:	d000      	beq.n	d522 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d520:	e02f      	b.n	d582 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d522:	687b      	ldr	r3, [r7, #4]
    d524:	885b      	ldrh	r3, [r3, #2]
    d526:	b29b      	uxth	r3, r3
    d528:	b2da      	uxtb	r2, r3
    d52a:	4b17      	ldr	r3, [pc, #92]	; (d588 <usbdc_ctrl_status_end+0x84>)
    d52c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d52e:	687b      	ldr	r3, [r7, #4]
    d530:	885b      	ldrh	r3, [r3, #2]
    d532:	b29b      	uxth	r3, r3
    d534:	2b00      	cmp	r3, #0
    d536:	d001      	beq.n	d53c <usbdc_ctrl_status_end+0x38>
    d538:	2204      	movs	r2, #4
    d53a:	e000      	b.n	d53e <usbdc_ctrl_status_end+0x3a>
    d53c:	2203      	movs	r2, #3
    d53e:	4b12      	ldr	r3, [pc, #72]	; (d588 <usbdc_ctrl_status_end+0x84>)
    d540:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d542:	4b11      	ldr	r3, [pc, #68]	; (d588 <usbdc_ctrl_status_end+0x84>)
    d544:	7e9b      	ldrb	r3, [r3, #26]
    d546:	4619      	mov	r1, r3
    d548:	2001      	movs	r0, #1
    d54a:	4b10      	ldr	r3, [pc, #64]	; (d58c <usbdc_ctrl_status_end+0x88>)
    d54c:	4798      	blx	r3
		break;
    d54e:	e018      	b.n	d582 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d550:	687b      	ldr	r3, [r7, #4]
    d552:	885b      	ldrh	r3, [r3, #2]
    d554:	b29b      	uxth	r3, r3
    d556:	b2db      	uxtb	r3, r3
    d558:	4618      	mov	r0, r3
    d55a:	4b0d      	ldr	r3, [pc, #52]	; (d590 <usbdc_ctrl_status_end+0x8c>)
    d55c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d55e:	687b      	ldr	r3, [r7, #4]
    d560:	885b      	ldrh	r3, [r3, #2]
    d562:	b29b      	uxth	r3, r3
    d564:	2b00      	cmp	r3, #0
    d566:	d001      	beq.n	d56c <usbdc_ctrl_status_end+0x68>
    d568:	2203      	movs	r2, #3
    d56a:	e000      	b.n	d56e <usbdc_ctrl_status_end+0x6a>
    d56c:	2202      	movs	r2, #2
    d56e:	4b06      	ldr	r3, [pc, #24]	; (d588 <usbdc_ctrl_status_end+0x84>)
    d570:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d572:	4b05      	ldr	r3, [pc, #20]	; (d588 <usbdc_ctrl_status_end+0x84>)
    d574:	7e9b      	ldrb	r3, [r3, #26]
    d576:	4619      	mov	r1, r3
    d578:	2001      	movs	r0, #1
    d57a:	4b04      	ldr	r3, [pc, #16]	; (d58c <usbdc_ctrl_status_end+0x88>)
    d57c:	4798      	blx	r3
		break;
    d57e:	e000      	b.n	d582 <usbdc_ctrl_status_end+0x7e>
		return;
    d580:	bf00      	nop
	}
}
    d582:	3708      	adds	r7, #8
    d584:	46bd      	mov	sp, r7
    d586:	bd80      	pop	{r7, pc}
    d588:	20000cb0 	.word	0x20000cb0
    d58c:	0000d3e1 	.word	0x0000d3e1
    d590:	0000d161 	.word	0x0000d161

0000d594 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d594:	b580      	push	{r7, lr}
    d596:	b082      	sub	sp, #8
    d598:	af00      	add	r7, sp, #0
    d59a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d59c:	2201      	movs	r2, #1
    d59e:	6879      	ldr	r1, [r7, #4]
    d5a0:	2000      	movs	r0, #0
    d5a2:	4b03      	ldr	r3, [pc, #12]	; (d5b0 <usbdc_ctrl_data_end+0x1c>)
    d5a4:	4798      	blx	r3
	return false;
    d5a6:	2300      	movs	r3, #0
}
    d5a8:	4618      	mov	r0, r3
    d5aa:	3708      	adds	r7, #8
    d5ac:	46bd      	mov	sp, r7
    d5ae:	bd80      	pop	{r7, pc}
    d5b0:	0000d421 	.word	0x0000d421

0000d5b4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d5b4:	b580      	push	{r7, lr}
    d5b6:	b082      	sub	sp, #8
    d5b8:	af00      	add	r7, sp, #0
    d5ba:	4603      	mov	r3, r0
    d5bc:	603a      	str	r2, [r7, #0]
    d5be:	71fb      	strb	r3, [r7, #7]
    d5c0:	460b      	mov	r3, r1
    d5c2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d5c4:	79bb      	ldrb	r3, [r7, #6]
    d5c6:	2b00      	cmp	r3, #0
    d5c8:	d002      	beq.n	d5d0 <usbdc_cb_ctl_done+0x1c>
    d5ca:	2b01      	cmp	r3, #1
    d5cc:	d004      	beq.n	d5d8 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d5ce:	e008      	b.n	d5e2 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d5d0:	6838      	ldr	r0, [r7, #0]
    d5d2:	4b06      	ldr	r3, [pc, #24]	; (d5ec <usbdc_cb_ctl_done+0x38>)
    d5d4:	4798      	blx	r3
		break;
    d5d6:	e004      	b.n	d5e2 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d5d8:	6838      	ldr	r0, [r7, #0]
    d5da:	4b05      	ldr	r3, [pc, #20]	; (d5f0 <usbdc_cb_ctl_done+0x3c>)
    d5dc:	4798      	blx	r3
    d5de:	4603      	mov	r3, r0
    d5e0:	e000      	b.n	d5e4 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d5e2:	2300      	movs	r3, #0
}
    d5e4:	4618      	mov	r0, r3
    d5e6:	3708      	adds	r7, #8
    d5e8:	46bd      	mov	sp, r7
    d5ea:	bd80      	pop	{r7, pc}
    d5ec:	0000d505 	.word	0x0000d505
    d5f0:	0000d595 	.word	0x0000d595

0000d5f4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d5f4:	b580      	push	{r7, lr}
    d5f6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d5f8:	4b10      	ldr	r3, [pc, #64]	; (d63c <usbdc_reset+0x48>)
    d5fa:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d5fc:	4b10      	ldr	r3, [pc, #64]	; (d640 <usbdc_reset+0x4c>)
    d5fe:	2202      	movs	r2, #2
    d600:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d602:	4b0f      	ldr	r3, [pc, #60]	; (d640 <usbdc_reset+0x4c>)
    d604:	2200      	movs	r2, #0
    d606:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d608:	4b0d      	ldr	r3, [pc, #52]	; (d640 <usbdc_reset+0x4c>)
    d60a:	2200      	movs	r2, #0
    d60c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d60e:	2000      	movs	r0, #0
    d610:	4b0c      	ldr	r3, [pc, #48]	; (d644 <usbdc_reset+0x50>)
    d612:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d614:	4b0a      	ldr	r3, [pc, #40]	; (d640 <usbdc_reset+0x4c>)
    d616:	7f1b      	ldrb	r3, [r3, #28]
    d618:	4618      	mov	r0, r3
    d61a:	4b0b      	ldr	r3, [pc, #44]	; (d648 <usbdc_reset+0x54>)
    d61c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d61e:	4a0b      	ldr	r2, [pc, #44]	; (d64c <usbdc_reset+0x58>)
    d620:	2100      	movs	r1, #0
    d622:	2000      	movs	r0, #0
    d624:	4b0a      	ldr	r3, [pc, #40]	; (d650 <usbdc_reset+0x5c>)
    d626:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d628:	4a0a      	ldr	r2, [pc, #40]	; (d654 <usbdc_reset+0x60>)
    d62a:	2102      	movs	r1, #2
    d62c:	2000      	movs	r0, #0
    d62e:	4b08      	ldr	r3, [pc, #32]	; (d650 <usbdc_reset+0x5c>)
    d630:	4798      	blx	r3
	usb_d_ep_enable(0);
    d632:	2000      	movs	r0, #0
    d634:	4b08      	ldr	r3, [pc, #32]	; (d658 <usbdc_reset+0x64>)
    d636:	4798      	blx	r3
}
    d638:	bf00      	nop
    d63a:	bd80      	pop	{r7, pc}
    d63c:	0000d041 	.word	0x0000d041
    d640:	20000cb0 	.word	0x20000cb0
    d644:	000036e1 	.word	0x000036e1
    d648:	0000361d 	.word	0x0000361d
    d64c:	0000d491 	.word	0x0000d491
    d650:	00003a35 	.word	0x00003a35
    d654:	0000d5b5 	.word	0x0000d5b5
    d658:	00003731 	.word	0x00003731

0000d65c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d65c:	b580      	push	{r7, lr}
    d65e:	b082      	sub	sp, #8
    d660:	af00      	add	r7, sp, #0
    d662:	4603      	mov	r3, r0
    d664:	6039      	str	r1, [r7, #0]
    d666:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d668:	79fb      	ldrb	r3, [r7, #7]
    d66a:	2b00      	cmp	r3, #0
    d66c:	d002      	beq.n	d674 <usbd_event_cb+0x18>
    d66e:	2b01      	cmp	r3, #1
    d670:	d005      	beq.n	d67e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d672:	e007      	b.n	d684 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d674:	6839      	ldr	r1, [r7, #0]
    d676:	2000      	movs	r0, #0
    d678:	4b04      	ldr	r3, [pc, #16]	; (d68c <usbd_event_cb+0x30>)
    d67a:	4798      	blx	r3
		break;
    d67c:	e002      	b.n	d684 <usbd_event_cb+0x28>
		usbdc_reset();
    d67e:	4b04      	ldr	r3, [pc, #16]	; (d690 <usbd_event_cb+0x34>)
    d680:	4798      	blx	r3
		break;
    d682:	bf00      	nop
	}
}
    d684:	bf00      	nop
    d686:	3708      	adds	r7, #8
    d688:	46bd      	mov	sp, r7
    d68a:	bd80      	pop	{r7, pc}
    d68c:	0000d3e1 	.word	0x0000d3e1
    d690:	0000d5f5 	.word	0x0000d5f5

0000d694 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d694:	b580      	push	{r7, lr}
    d696:	b088      	sub	sp, #32
    d698:	af00      	add	r7, sp, #0
    d69a:	60b9      	str	r1, [r7, #8]
    d69c:	607a      	str	r2, [r7, #4]
    d69e:	461a      	mov	r2, r3
    d6a0:	4603      	mov	r3, r0
    d6a2:	73fb      	strb	r3, [r7, #15]
    d6a4:	4613      	mov	r3, r2
    d6a6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d6a8:	68bb      	ldr	r3, [r7, #8]
    d6aa:	617b      	str	r3, [r7, #20]
    d6ac:	687b      	ldr	r3, [r7, #4]
    d6ae:	61bb      	str	r3, [r7, #24]
    d6b0:	7bfb      	ldrb	r3, [r7, #15]
    d6b2:	773b      	strb	r3, [r7, #28]
    d6b4:	7bbb      	ldrb	r3, [r7, #14]
    d6b6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d6b8:	f107 0314 	add.w	r3, r7, #20
    d6bc:	4618      	mov	r0, r3
    d6be:	4b03      	ldr	r3, [pc, #12]	; (d6cc <usbdc_xfer+0x38>)
    d6c0:	4798      	blx	r3
    d6c2:	4603      	mov	r3, r0
}
    d6c4:	4618      	mov	r0, r3
    d6c6:	3720      	adds	r7, #32
    d6c8:	46bd      	mov	sp, r7
    d6ca:	bd80      	pop	{r7, pc}
    d6cc:	000037a1 	.word	0x000037a1

0000d6d0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d6d0:	b580      	push	{r7, lr}
    d6d2:	b082      	sub	sp, #8
    d6d4:	af00      	add	r7, sp, #0
    d6d6:	4603      	mov	r3, r0
    d6d8:	6039      	str	r1, [r7, #0]
    d6da:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d6dc:	79fb      	ldrb	r3, [r7, #7]
    d6de:	2b01      	cmp	r3, #1
    d6e0:	d009      	beq.n	d6f6 <usbdc_register_handler+0x26>
    d6e2:	2b02      	cmp	r3, #2
    d6e4:	d00c      	beq.n	d700 <usbdc_register_handler+0x30>
    d6e6:	2b00      	cmp	r3, #0
    d6e8:	d000      	beq.n	d6ec <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d6ea:	e00e      	b.n	d70a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d6ec:	6839      	ldr	r1, [r7, #0]
    d6ee:	4809      	ldr	r0, [pc, #36]	; (d714 <usbdc_register_handler+0x44>)
    d6f0:	4b09      	ldr	r3, [pc, #36]	; (d718 <usbdc_register_handler+0x48>)
    d6f2:	4798      	blx	r3
		break;
    d6f4:	e009      	b.n	d70a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d6f6:	6839      	ldr	r1, [r7, #0]
    d6f8:	4808      	ldr	r0, [pc, #32]	; (d71c <usbdc_register_handler+0x4c>)
    d6fa:	4b07      	ldr	r3, [pc, #28]	; (d718 <usbdc_register_handler+0x48>)
    d6fc:	4798      	blx	r3
		break;
    d6fe:	e004      	b.n	d70a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d700:	6839      	ldr	r1, [r7, #0]
    d702:	4807      	ldr	r0, [pc, #28]	; (d720 <usbdc_register_handler+0x50>)
    d704:	4b04      	ldr	r3, [pc, #16]	; (d718 <usbdc_register_handler+0x48>)
    d706:	4798      	blx	r3
		break;
    d708:	bf00      	nop
	}
}
    d70a:	bf00      	nop
    d70c:	3708      	adds	r7, #8
    d70e:	46bd      	mov	sp, r7
    d710:	bd80      	pop	{r7, pc}
    d712:	bf00      	nop
    d714:	20000cb4 	.word	0x20000cb4
    d718:	00003b8d 	.word	0x00003b8d
    d71c:	20000cb8 	.word	0x20000cb8
    d720:	20000cbc 	.word	0x20000cbc

0000d724 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d724:	b580      	push	{r7, lr}
    d726:	b084      	sub	sp, #16
    d728:	af00      	add	r7, sp, #0
    d72a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d72c:	687b      	ldr	r3, [r7, #4]
    d72e:	2b00      	cmp	r3, #0
    d730:	bf14      	ite	ne
    d732:	2301      	movne	r3, #1
    d734:	2300      	moveq	r3, #0
    d736:	b2db      	uxtb	r3, r3
    d738:	f240 3255 	movw	r2, #853	; 0x355
    d73c:	4910      	ldr	r1, [pc, #64]	; (d780 <usbdc_init+0x5c>)
    d73e:	4618      	mov	r0, r3
    d740:	4b10      	ldr	r3, [pc, #64]	; (d784 <usbdc_init+0x60>)
    d742:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d744:	4b10      	ldr	r3, [pc, #64]	; (d788 <usbdc_init+0x64>)
    d746:	4798      	blx	r3
    d748:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d74a:	68fb      	ldr	r3, [r7, #12]
    d74c:	2b00      	cmp	r3, #0
    d74e:	da01      	bge.n	d754 <usbdc_init+0x30>
		return rc;
    d750:	68fb      	ldr	r3, [r7, #12]
    d752:	e010      	b.n	d776 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d754:	2220      	movs	r2, #32
    d756:	2100      	movs	r1, #0
    d758:	480c      	ldr	r0, [pc, #48]	; (d78c <usbdc_init+0x68>)
    d75a:	4b0d      	ldr	r3, [pc, #52]	; (d790 <usbdc_init+0x6c>)
    d75c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d75e:	4a0b      	ldr	r2, [pc, #44]	; (d78c <usbdc_init+0x68>)
    d760:	687b      	ldr	r3, [r7, #4]
    d762:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d764:	490b      	ldr	r1, [pc, #44]	; (d794 <usbdc_init+0x70>)
    d766:	2000      	movs	r0, #0
    d768:	4b0b      	ldr	r3, [pc, #44]	; (d798 <usbdc_init+0x74>)
    d76a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d76c:	490b      	ldr	r1, [pc, #44]	; (d79c <usbdc_init+0x78>)
    d76e:	2001      	movs	r0, #1
    d770:	4b09      	ldr	r3, [pc, #36]	; (d798 <usbdc_init+0x74>)
    d772:	4798      	blx	r3

	return 0;
    d774:	2300      	movs	r3, #0
}
    d776:	4618      	mov	r0, r3
    d778:	3710      	adds	r7, #16
    d77a:	46bd      	mov	sp, r7
    d77c:	bd80      	pop	{r7, pc}
    d77e:	bf00      	nop
    d780:	000101b8 	.word	0x000101b8
    d784:	00003ab1 	.word	0x00003ab1
    d788:	00003509 	.word	0x00003509
    d78c:	20000cb0 	.word	0x20000cb0
    d790:	0000fa8d 	.word	0x0000fa8d
    d794:	0000d481 	.word	0x0000d481
    d798:	000035b5 	.word	0x000035b5
    d79c:	0000d65d 	.word	0x0000d65d

0000d7a0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d7a0:	b580      	push	{r7, lr}
    d7a2:	b082      	sub	sp, #8
    d7a4:	af00      	add	r7, sp, #0
    d7a6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d7a8:	6879      	ldr	r1, [r7, #4]
    d7aa:	4803      	ldr	r0, [pc, #12]	; (d7b8 <usbdc_register_function+0x18>)
    d7ac:	4b03      	ldr	r3, [pc, #12]	; (d7bc <usbdc_register_function+0x1c>)
    d7ae:	4798      	blx	r3
}
    d7b0:	bf00      	nop
    d7b2:	3708      	adds	r7, #8
    d7b4:	46bd      	mov	sp, r7
    d7b6:	bd80      	pop	{r7, pc}
    d7b8:	20000cc0 	.word	0x20000cc0
    d7bc:	00003b8d 	.word	0x00003b8d

0000d7c0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d7c0:	b580      	push	{r7, lr}
    d7c2:	b082      	sub	sp, #8
    d7c4:	af00      	add	r7, sp, #0
    d7c6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d7c8:	4b0f      	ldr	r3, [pc, #60]	; (d808 <usbdc_start+0x48>)
    d7ca:	7e9b      	ldrb	r3, [r3, #26]
    d7cc:	2b00      	cmp	r3, #0
    d7ce:	d002      	beq.n	d7d6 <usbdc_start+0x16>
		return ERR_BUSY;
    d7d0:	f06f 0303 	mvn.w	r3, #3
    d7d4:	e013      	b.n	d7fe <usbdc_start+0x3e>
	}

	if (desces) {
    d7d6:	687b      	ldr	r3, [r7, #4]
    d7d8:	2b00      	cmp	r3, #0
    d7da:	d00e      	beq.n	d7fa <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d7dc:	4a0a      	ldr	r2, [pc, #40]	; (d808 <usbdc_start+0x48>)
    d7de:	687b      	ldr	r3, [r7, #4]
    d7e0:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d7e2:	687b      	ldr	r3, [r7, #4]
    d7e4:	681b      	ldr	r3, [r3, #0]
    d7e6:	79da      	ldrb	r2, [r3, #7]
    d7e8:	4b07      	ldr	r3, [pc, #28]	; (d808 <usbdc_start+0x48>)
    d7ea:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d7ec:	4b06      	ldr	r3, [pc, #24]	; (d808 <usbdc_start+0x48>)
    d7ee:	2201      	movs	r2, #1
    d7f0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d7f2:	4b06      	ldr	r3, [pc, #24]	; (d80c <usbdc_start+0x4c>)
    d7f4:	4798      	blx	r3
	return ERR_NONE;
    d7f6:	2300      	movs	r3, #0
    d7f8:	e001      	b.n	d7fe <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d7fa:	f06f 0308 	mvn.w	r3, #8
}
    d7fe:	4618      	mov	r0, r3
    d800:	3708      	adds	r7, #8
    d802:	46bd      	mov	sp, r7
    d804:	bd80      	pop	{r7, pc}
    d806:	bf00      	nop
    d808:	20000cb0 	.word	0x20000cb0
    d80c:	000035d9 	.word	0x000035d9

0000d810 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d810:	b580      	push	{r7, lr}
    d812:	af00      	add	r7, sp, #0
	usb_d_attach();
    d814:	4b01      	ldr	r3, [pc, #4]	; (d81c <usbdc_attach+0xc>)
    d816:	4798      	blx	r3
}
    d818:	bf00      	nop
    d81a:	bd80      	pop	{r7, pc}
    d81c:	000035ed 	.word	0x000035ed

0000d820 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d820:	b480      	push	{r7}
    d822:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d824:	4b03      	ldr	r3, [pc, #12]	; (d834 <usbdc_get_ctrl_buffer+0x14>)
    d826:	695b      	ldr	r3, [r3, #20]
}
    d828:	4618      	mov	r0, r3
    d82a:	46bd      	mov	sp, r7
    d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d830:	4770      	bx	lr
    d832:	bf00      	nop
    d834:	20000cb0 	.word	0x20000cb0

0000d838 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d838:	b480      	push	{r7}
    d83a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d83c:	4b07      	ldr	r3, [pc, #28]	; (d85c <usbdc_get_state+0x24>)
    d83e:	7e9b      	ldrb	r3, [r3, #26]
    d840:	f003 0310 	and.w	r3, r3, #16
    d844:	2b00      	cmp	r3, #0
    d846:	d001      	beq.n	d84c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d848:	2310      	movs	r3, #16
    d84a:	e001      	b.n	d850 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d84c:	4b03      	ldr	r3, [pc, #12]	; (d85c <usbdc_get_state+0x24>)
    d84e:	7e9b      	ldrb	r3, [r3, #26]
}
    d850:	4618      	mov	r0, r3
    d852:	46bd      	mov	sp, r7
    d854:	f85d 7b04 	ldr.w	r7, [sp], #4
    d858:	4770      	bx	lr
    d85a:	bf00      	nop
    d85c:	20000cb0 	.word	0x20000cb0

0000d860 <usb_get_u16>:
{
    d860:	b480      	push	{r7}
    d862:	b083      	sub	sp, #12
    d864:	af00      	add	r7, sp, #0
    d866:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d868:	687b      	ldr	r3, [r7, #4]
    d86a:	781b      	ldrb	r3, [r3, #0]
    d86c:	b29a      	uxth	r2, r3
    d86e:	687b      	ldr	r3, [r7, #4]
    d870:	3301      	adds	r3, #1
    d872:	781b      	ldrb	r3, [r3, #0]
    d874:	b29b      	uxth	r3, r3
    d876:	021b      	lsls	r3, r3, #8
    d878:	b29b      	uxth	r3, r3
    d87a:	4413      	add	r3, r2
    d87c:	b29b      	uxth	r3, r3
}
    d87e:	4618      	mov	r0, r3
    d880:	370c      	adds	r7, #12
    d882:	46bd      	mov	sp, r7
    d884:	f85d 7b04 	ldr.w	r7, [sp], #4
    d888:	4770      	bx	lr

0000d88a <usb_desc_len>:
{
    d88a:	b480      	push	{r7}
    d88c:	b083      	sub	sp, #12
    d88e:	af00      	add	r7, sp, #0
    d890:	6078      	str	r0, [r7, #4]
	return desc[0];
    d892:	687b      	ldr	r3, [r7, #4]
    d894:	781b      	ldrb	r3, [r3, #0]
}
    d896:	4618      	mov	r0, r3
    d898:	370c      	adds	r7, #12
    d89a:	46bd      	mov	sp, r7
    d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8a0:	4770      	bx	lr

0000d8a2 <usb_desc_type>:
{
    d8a2:	b480      	push	{r7}
    d8a4:	b083      	sub	sp, #12
    d8a6:	af00      	add	r7, sp, #0
    d8a8:	6078      	str	r0, [r7, #4]
	return desc[1];
    d8aa:	687b      	ldr	r3, [r7, #4]
    d8ac:	3301      	adds	r3, #1
    d8ae:	781b      	ldrb	r3, [r3, #0]
}
    d8b0:	4618      	mov	r0, r3
    d8b2:	370c      	adds	r7, #12
    d8b4:	46bd      	mov	sp, r7
    d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8ba:	4770      	bx	lr

0000d8bc <usb_desc_next>:
{
    d8bc:	b580      	push	{r7, lr}
    d8be:	b082      	sub	sp, #8
    d8c0:	af00      	add	r7, sp, #0
    d8c2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d8c4:	6878      	ldr	r0, [r7, #4]
    d8c6:	4b05      	ldr	r3, [pc, #20]	; (d8dc <usb_desc_next+0x20>)
    d8c8:	4798      	blx	r3
    d8ca:	4603      	mov	r3, r0
    d8cc:	461a      	mov	r2, r3
    d8ce:	687b      	ldr	r3, [r7, #4]
    d8d0:	4413      	add	r3, r2
}
    d8d2:	4618      	mov	r0, r3
    d8d4:	3708      	adds	r7, #8
    d8d6:	46bd      	mov	sp, r7
    d8d8:	bd80      	pop	{r7, pc}
    d8da:	bf00      	nop
    d8dc:	0000d88b 	.word	0x0000d88b

0000d8e0 <usb_cfg_desc_total_len>:
{
    d8e0:	b580      	push	{r7, lr}
    d8e2:	b082      	sub	sp, #8
    d8e4:	af00      	add	r7, sp, #0
    d8e6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d8e8:	687b      	ldr	r3, [r7, #4]
    d8ea:	3302      	adds	r3, #2
    d8ec:	4618      	mov	r0, r3
    d8ee:	4b03      	ldr	r3, [pc, #12]	; (d8fc <usb_cfg_desc_total_len+0x1c>)
    d8f0:	4798      	blx	r3
    d8f2:	4603      	mov	r3, r0
}
    d8f4:	4618      	mov	r0, r3
    d8f6:	3708      	adds	r7, #8
    d8f8:	46bd      	mov	sp, r7
    d8fa:	bd80      	pop	{r7, pc}
    d8fc:	0000d861 	.word	0x0000d861

0000d900 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d900:	b580      	push	{r7, lr}
    d902:	b082      	sub	sp, #8
    d904:	af00      	add	r7, sp, #0
    d906:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d908:	6878      	ldr	r0, [r7, #4]
    d90a:	4b05      	ldr	r3, [pc, #20]	; (d920 <usb_cfg_desc_next+0x20>)
    d90c:	4798      	blx	r3
    d90e:	4603      	mov	r3, r0
    d910:	461a      	mov	r2, r3
    d912:	687b      	ldr	r3, [r7, #4]
    d914:	4413      	add	r3, r2
}
    d916:	4618      	mov	r0, r3
    d918:	3708      	adds	r7, #8
    d91a:	46bd      	mov	sp, r7
    d91c:	bd80      	pop	{r7, pc}
    d91e:	bf00      	nop
    d920:	0000d8e1 	.word	0x0000d8e1

0000d924 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d924:	b580      	push	{r7, lr}
    d926:	b084      	sub	sp, #16
    d928:	af00      	add	r7, sp, #0
    d92a:	60f8      	str	r0, [r7, #12]
    d92c:	60b9      	str	r1, [r7, #8]
    d92e:	4613      	mov	r3, r2
    d930:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d932:	e015      	b.n	d960 <usb_find_desc+0x3c>
		_desc_len_check();
    d934:	68f8      	ldr	r0, [r7, #12]
    d936:	4b0f      	ldr	r3, [pc, #60]	; (d974 <usb_find_desc+0x50>)
    d938:	4798      	blx	r3
    d93a:	4603      	mov	r3, r0
    d93c:	2b01      	cmp	r3, #1
    d93e:	d801      	bhi.n	d944 <usb_find_desc+0x20>
    d940:	2300      	movs	r3, #0
    d942:	e012      	b.n	d96a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d944:	68f8      	ldr	r0, [r7, #12]
    d946:	4b0c      	ldr	r3, [pc, #48]	; (d978 <usb_find_desc+0x54>)
    d948:	4798      	blx	r3
    d94a:	4603      	mov	r3, r0
    d94c:	461a      	mov	r2, r3
    d94e:	79fb      	ldrb	r3, [r7, #7]
    d950:	4293      	cmp	r3, r2
    d952:	d101      	bne.n	d958 <usb_find_desc+0x34>
			return desc;
    d954:	68fb      	ldr	r3, [r7, #12]
    d956:	e008      	b.n	d96a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d958:	68f8      	ldr	r0, [r7, #12]
    d95a:	4b08      	ldr	r3, [pc, #32]	; (d97c <usb_find_desc+0x58>)
    d95c:	4798      	blx	r3
    d95e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d960:	68fa      	ldr	r2, [r7, #12]
    d962:	68bb      	ldr	r3, [r7, #8]
    d964:	429a      	cmp	r2, r3
    d966:	d3e5      	bcc.n	d934 <usb_find_desc+0x10>
	}
	return NULL;
    d968:	2300      	movs	r3, #0
}
    d96a:	4618      	mov	r0, r3
    d96c:	3710      	adds	r7, #16
    d96e:	46bd      	mov	sp, r7
    d970:	bd80      	pop	{r7, pc}
    d972:	bf00      	nop
    d974:	0000d88b 	.word	0x0000d88b
    d978:	0000d8a3 	.word	0x0000d8a3
    d97c:	0000d8bd 	.word	0x0000d8bd

0000d980 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d980:	b580      	push	{r7, lr}
    d982:	b082      	sub	sp, #8
    d984:	af00      	add	r7, sp, #0
    d986:	6078      	str	r0, [r7, #4]
    d988:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d98a:	e019      	b.n	d9c0 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d98c:	6878      	ldr	r0, [r7, #4]
    d98e:	4b12      	ldr	r3, [pc, #72]	; (d9d8 <usb_find_ep_desc+0x58>)
    d990:	4798      	blx	r3
    d992:	4603      	mov	r3, r0
    d994:	2b01      	cmp	r3, #1
    d996:	d801      	bhi.n	d99c <usb_find_ep_desc+0x1c>
    d998:	2300      	movs	r3, #0
    d99a:	e018      	b.n	d9ce <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d99c:	6878      	ldr	r0, [r7, #4]
    d99e:	4b0f      	ldr	r3, [pc, #60]	; (d9dc <usb_find_ep_desc+0x5c>)
    d9a0:	4798      	blx	r3
    d9a2:	4603      	mov	r3, r0
    d9a4:	2b04      	cmp	r3, #4
    d9a6:	d010      	beq.n	d9ca <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d9a8:	6878      	ldr	r0, [r7, #4]
    d9aa:	4b0c      	ldr	r3, [pc, #48]	; (d9dc <usb_find_ep_desc+0x5c>)
    d9ac:	4798      	blx	r3
    d9ae:	4603      	mov	r3, r0
    d9b0:	2b05      	cmp	r3, #5
    d9b2:	d101      	bne.n	d9b8 <usb_find_ep_desc+0x38>
			return desc;
    d9b4:	687b      	ldr	r3, [r7, #4]
    d9b6:	e00a      	b.n	d9ce <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d9b8:	6878      	ldr	r0, [r7, #4]
    d9ba:	4b09      	ldr	r3, [pc, #36]	; (d9e0 <usb_find_ep_desc+0x60>)
    d9bc:	4798      	blx	r3
    d9be:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d9c0:	687a      	ldr	r2, [r7, #4]
    d9c2:	683b      	ldr	r3, [r7, #0]
    d9c4:	429a      	cmp	r2, r3
    d9c6:	d3e1      	bcc.n	d98c <usb_find_ep_desc+0xc>
    d9c8:	e000      	b.n	d9cc <usb_find_ep_desc+0x4c>
			break;
    d9ca:	bf00      	nop
	}
	return NULL;
    d9cc:	2300      	movs	r3, #0
}
    d9ce:	4618      	mov	r0, r3
    d9d0:	3708      	adds	r7, #8
    d9d2:	46bd      	mov	sp, r7
    d9d4:	bd80      	pop	{r7, pc}
    d9d6:	bf00      	nop
    d9d8:	0000d88b 	.word	0x0000d88b
    d9dc:	0000d8a3 	.word	0x0000d8a3
    d9e0:	0000d8bd 	.word	0x0000d8bd

0000d9e4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d9e4:	b580      	push	{r7, lr}
    d9e6:	b084      	sub	sp, #16
    d9e8:	af00      	add	r7, sp, #0
    d9ea:	60f8      	str	r0, [r7, #12]
    d9ec:	60b9      	str	r1, [r7, #8]
    d9ee:	4613      	mov	r3, r2
    d9f0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d9f2:	2202      	movs	r2, #2
    d9f4:	68b9      	ldr	r1, [r7, #8]
    d9f6:	68f8      	ldr	r0, [r7, #12]
    d9f8:	4b15      	ldr	r3, [pc, #84]	; (da50 <usb_find_cfg_desc+0x6c>)
    d9fa:	4798      	blx	r3
    d9fc:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d9fe:	68fb      	ldr	r3, [r7, #12]
    da00:	2b00      	cmp	r3, #0
    da02:	d11a      	bne.n	da3a <usb_find_cfg_desc+0x56>
		return NULL;
    da04:	2300      	movs	r3, #0
    da06:	e01f      	b.n	da48 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    da08:	68f8      	ldr	r0, [r7, #12]
    da0a:	4b12      	ldr	r3, [pc, #72]	; (da54 <usb_find_cfg_desc+0x70>)
    da0c:	4798      	blx	r3
    da0e:	4603      	mov	r3, r0
    da10:	2b01      	cmp	r3, #1
    da12:	d801      	bhi.n	da18 <usb_find_cfg_desc+0x34>
    da14:	2300      	movs	r3, #0
    da16:	e017      	b.n	da48 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    da18:	68fb      	ldr	r3, [r7, #12]
    da1a:	3301      	adds	r3, #1
    da1c:	781b      	ldrb	r3, [r3, #0]
    da1e:	2b02      	cmp	r3, #2
    da20:	d110      	bne.n	da44 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    da22:	68fb      	ldr	r3, [r7, #12]
    da24:	3305      	adds	r3, #5
    da26:	781b      	ldrb	r3, [r3, #0]
    da28:	79fa      	ldrb	r2, [r7, #7]
    da2a:	429a      	cmp	r2, r3
    da2c:	d101      	bne.n	da32 <usb_find_cfg_desc+0x4e>
			return desc;
    da2e:	68fb      	ldr	r3, [r7, #12]
    da30:	e00a      	b.n	da48 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    da32:	68f8      	ldr	r0, [r7, #12]
    da34:	4b08      	ldr	r3, [pc, #32]	; (da58 <usb_find_cfg_desc+0x74>)
    da36:	4798      	blx	r3
    da38:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    da3a:	68fa      	ldr	r2, [r7, #12]
    da3c:	68bb      	ldr	r3, [r7, #8]
    da3e:	429a      	cmp	r2, r3
    da40:	d3e2      	bcc.n	da08 <usb_find_cfg_desc+0x24>
    da42:	e000      	b.n	da46 <usb_find_cfg_desc+0x62>
			break;
    da44:	bf00      	nop
	}
	return NULL;
    da46:	2300      	movs	r3, #0
}
    da48:	4618      	mov	r0, r3
    da4a:	3710      	adds	r7, #16
    da4c:	46bd      	mov	sp, r7
    da4e:	bd80      	pop	{r7, pc}
    da50:	0000d925 	.word	0x0000d925
    da54:	0000d88b 	.word	0x0000d88b
    da58:	0000d901 	.word	0x0000d901

0000da5c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    da5c:	b580      	push	{r7, lr}
    da5e:	b086      	sub	sp, #24
    da60:	af00      	add	r7, sp, #0
    da62:	60f8      	str	r0, [r7, #12]
    da64:	60b9      	str	r1, [r7, #8]
    da66:	4613      	mov	r3, r2
    da68:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    da6a:	2300      	movs	r3, #0
    da6c:	75fb      	strb	r3, [r7, #23]
    da6e:	e020      	b.n	dab2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    da70:	2203      	movs	r2, #3
    da72:	68b9      	ldr	r1, [r7, #8]
    da74:	68f8      	ldr	r0, [r7, #12]
    da76:	4b13      	ldr	r3, [pc, #76]	; (dac4 <usb_find_str_desc+0x68>)
    da78:	4798      	blx	r3
    da7a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    da7c:	68fb      	ldr	r3, [r7, #12]
    da7e:	2b00      	cmp	r3, #0
    da80:	d015      	beq.n	daae <usb_find_str_desc+0x52>
			_desc_len_check();
    da82:	68f8      	ldr	r0, [r7, #12]
    da84:	4b10      	ldr	r3, [pc, #64]	; (dac8 <usb_find_str_desc+0x6c>)
    da86:	4798      	blx	r3
    da88:	4603      	mov	r3, r0
    da8a:	2b01      	cmp	r3, #1
    da8c:	d801      	bhi.n	da92 <usb_find_str_desc+0x36>
    da8e:	2300      	movs	r3, #0
    da90:	e014      	b.n	dabc <usb_find_str_desc+0x60>
			if (i == str_index) {
    da92:	7dfa      	ldrb	r2, [r7, #23]
    da94:	79fb      	ldrb	r3, [r7, #7]
    da96:	429a      	cmp	r2, r3
    da98:	d101      	bne.n	da9e <usb_find_str_desc+0x42>
				return desc;
    da9a:	68fb      	ldr	r3, [r7, #12]
    da9c:	e00e      	b.n	dabc <usb_find_str_desc+0x60>
			}
			i++;
    da9e:	7dfb      	ldrb	r3, [r7, #23]
    daa0:	3301      	adds	r3, #1
    daa2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    daa4:	68f8      	ldr	r0, [r7, #12]
    daa6:	4b09      	ldr	r3, [pc, #36]	; (dacc <usb_find_str_desc+0x70>)
    daa8:	4798      	blx	r3
    daaa:	60f8      	str	r0, [r7, #12]
    daac:	e001      	b.n	dab2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    daae:	2300      	movs	r3, #0
    dab0:	e004      	b.n	dabc <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    dab2:	68fa      	ldr	r2, [r7, #12]
    dab4:	68bb      	ldr	r3, [r7, #8]
    dab6:	429a      	cmp	r2, r3
    dab8:	d3da      	bcc.n	da70 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    daba:	2300      	movs	r3, #0
}
    dabc:	4618      	mov	r0, r3
    dabe:	3718      	adds	r7, #24
    dac0:	46bd      	mov	sp, r7
    dac2:	bd80      	pop	{r7, pc}
    dac4:	0000d925 	.word	0x0000d925
    dac8:	0000d88b 	.word	0x0000d88b
    dacc:	0000d8bd 	.word	0x0000d8bd

0000dad0 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    dad0:	b480      	push	{r7}
    dad2:	b083      	sub	sp, #12
    dad4:	af00      	add	r7, sp, #0
    dad6:	6078      	str	r0, [r7, #4]
    dad8:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    dada:	687b      	ldr	r3, [r7, #4]
    dadc:	683a      	ldr	r2, [r7, #0]
    dade:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    dae0:	687b      	ldr	r3, [r7, #4]
    dae2:	4618      	mov	r0, r3
    dae4:	370c      	adds	r7, #12
    dae6:	46bd      	mov	sp, r7
    dae8:	bc80      	pop	{r7}
    daea:	4770      	bx	lr

0000daec <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    daec:	b480      	push	{r7}
    daee:	b083      	sub	sp, #12
    daf0:	af00      	add	r7, sp, #0
    daf2:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    daf4:	687b      	ldr	r3, [r7, #4]
    daf6:	4618      	mov	r0, r3
    daf8:	370c      	adds	r7, #12
    dafa:	46bd      	mov	sp, r7
    dafc:	bc80      	pop	{r7}
    dafe:	4770      	bx	lr

0000db00 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    db00:	b580      	push	{r7, lr}
    db02:	b084      	sub	sp, #16
    db04:	af00      	add	r7, sp, #0
    db06:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    db08:	687b      	ldr	r3, [r7, #4]
    db0a:	4a14      	ldr	r2, [pc, #80]	; (db5c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    db0c:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    db0e:	687b      	ldr	r3, [r7, #4]
    db10:	4a12      	ldr	r2, [pc, #72]	; (db5c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    db12:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    db14:	687b      	ldr	r3, [r7, #4]
    db16:	691a      	ldr	r2, [r3, #16]
    db18:	687b      	ldr	r3, [r7, #4]
    db1a:	330c      	adds	r3, #12
    db1c:	4619      	mov	r1, r3
    db1e:	4610      	mov	r0, r2
    db20:	4b0f      	ldr	r3, [pc, #60]	; (db60 <_ZN14I2C_Sync_Class4InitEv+0x60>)
    db22:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    db24:	687b      	ldr	r3, [r7, #4]
    db26:	691b      	ldr	r3, [r3, #16]
    db28:	4618      	mov	r0, r3
    db2a:	4b0e      	ldr	r3, [pc, #56]	; (db64 <_ZN14I2C_Sync_Class4InitEv+0x64>)
    db2c:	4798      	blx	r3
    db2e:	4603      	mov	r3, r0
    db30:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    db32:	7bfb      	ldrb	r3, [r7, #15]
    db34:	2b00      	cmp	r3, #0
    db36:	bf0c      	ite	eq
    db38:	2301      	moveq	r3, #1
    db3a:	2300      	movne	r3, #0
    db3c:	b2da      	uxtb	r2, r3
    db3e:	687b      	ldr	r3, [r7, #4]
    db40:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
    db42:	687b      	ldr	r3, [r7, #4]
    db44:	7a5b      	ldrb	r3, [r3, #9]
    db46:	b2da      	uxtb	r2, r3
    db48:	687b      	ldr	r3, [r7, #4]
    db4a:	721a      	strb	r2, [r3, #8]
	return isOK;
    db4c:	687b      	ldr	r3, [r7, #4]
    db4e:	7a5b      	ldrb	r3, [r3, #9]
    db50:	b2db      	uxtb	r3, r3
	
}
    db52:	4618      	mov	r0, r3
    db54:	3710      	adds	r7, #16
    db56:	46bd      	mov	sp, r7
    db58:	bd80      	pop	{r7, pc}
    db5a:	bf00      	nop
    db5c:	20000cd0 	.word	0x20000cd0
    db60:	000027eb 	.word	0x000027eb
    db64:	00002791 	.word	0x00002791

0000db68 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    db68:	b580      	push	{r7, lr}
    db6a:	b082      	sub	sp, #8
    db6c:	af00      	add	r7, sp, #0
    db6e:	6078      	str	r0, [r7, #4]
    db70:	460b      	mov	r3, r1
    db72:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    db74:	687b      	ldr	r3, [r7, #4]
    db76:	691b      	ldr	r3, [r3, #16]
    db78:	78fa      	ldrb	r2, [r7, #3]
    db7a:	b211      	sxth	r1, r2
    db7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    db80:	4618      	mov	r0, r3
    db82:	4b03      	ldr	r3, [pc, #12]	; (db90 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    db84:	4798      	blx	r3
    db86:	4603      	mov	r3, r0
}
    db88:	4618      	mov	r0, r3
    db8a:	3708      	adds	r7, #8
    db8c:	46bd      	mov	sp, r7
    db8e:	bd80      	pop	{r7, pc}
    db90:	000027b1 	.word	0x000027b1

0000db94 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    db94:	b580      	push	{r7, lr}
    db96:	b086      	sub	sp, #24
    db98:	af00      	add	r7, sp, #0
    db9a:	60f8      	str	r0, [r7, #12]
    db9c:	60b9      	str	r1, [r7, #8]
    db9e:	4613      	mov	r3, r2
    dba0:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    dba2:	68fb      	ldr	r3, [r7, #12]
    dba4:	68db      	ldr	r3, [r3, #12]
    dba6:	88fa      	ldrh	r2, [r7, #6]
    dba8:	68b9      	ldr	r1, [r7, #8]
    dbaa:	4618      	mov	r0, r3
    dbac:	4b03      	ldr	r3, [pc, #12]	; (dbbc <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    dbae:	4798      	blx	r3
    dbb0:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    dbb2:	697b      	ldr	r3, [r7, #20]
}
    dbb4:	4618      	mov	r0, r3
    dbb6:	3718      	adds	r7, #24
    dbb8:	46bd      	mov	sp, r7
    dbba:	bd80      	pop	{r7, pc}
    dbbc:	0000f835 	.word	0x0000f835

0000dbc0 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    dbc0:	b580      	push	{r7, lr}
    dbc2:	b086      	sub	sp, #24
    dbc4:	af00      	add	r7, sp, #0
    dbc6:	60f8      	str	r0, [r7, #12]
    dbc8:	60b9      	str	r1, [r7, #8]
    dbca:	4613      	mov	r3, r2
    dbcc:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    dbce:	68fb      	ldr	r3, [r7, #12]
    dbd0:	68db      	ldr	r3, [r3, #12]
    dbd2:	88fa      	ldrh	r2, [r7, #6]
    dbd4:	68b9      	ldr	r1, [r7, #8]
    dbd6:	4618      	mov	r0, r3
    dbd8:	4b03      	ldr	r3, [pc, #12]	; (dbe8 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    dbda:	4798      	blx	r3
    dbdc:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    dbde:	697b      	ldr	r3, [r7, #20]
}
    dbe0:	4618      	mov	r0, r3
    dbe2:	3718      	adds	r7, #24
    dbe4:	46bd      	mov	sp, r7
    dbe6:	bd80      	pop	{r7, pc}
    dbe8:	0000f885 	.word	0x0000f885

0000dbec <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    dbec:	b480      	push	{r7}
    dbee:	b083      	sub	sp, #12
    dbf0:	af00      	add	r7, sp, #0
    dbf2:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    dbf4:	687b      	ldr	r3, [r7, #4]
    dbf6:	4618      	mov	r0, r3
    dbf8:	370c      	adds	r7, #12
    dbfa:	46bd      	mov	sp, r7
    dbfc:	bc80      	pop	{r7}
    dbfe:	4770      	bx	lr

0000dc00 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    dc00:	b480      	push	{r7}
    dc02:	b083      	sub	sp, #12
    dc04:	af00      	add	r7, sp, #0
    dc06:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    dc08:	687b      	ldr	r3, [r7, #4]
    dc0a:	4618      	mov	r0, r3
    dc0c:	370c      	adds	r7, #12
    dc0e:	46bd      	mov	sp, r7
    dc10:	bc80      	pop	{r7}
    dc12:	4770      	bx	lr

0000dc14 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
	//i2cClass=i2c;
	isOK=i2cClass->isOK;
	return isOK;
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    dc14:	b480      	push	{r7}
    dc16:	b085      	sub	sp, #20
    dc18:	af00      	add	r7, sp, #0
    dc1a:	60f8      	str	r0, [r7, #12]
    dc1c:	460b      	mov	r3, r1
    dc1e:	607a      	str	r2, [r7, #4]
    dc20:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    dc22:	687b      	ldr	r3, [r7, #4]
    dc24:	681a      	ldr	r2, [r3, #0]
    dc26:	68fb      	ldr	r3, [r7, #12]
    dc28:	615a      	str	r2, [r3, #20]
	rxBuffer=i2c->rxBuffer;
    dc2a:	687b      	ldr	r3, [r7, #4]
    dc2c:	685a      	ldr	r2, [r3, #4]
    dc2e:	68fb      	ldr	r3, [r7, #12]
    dc30:	619a      	str	r2, [r3, #24]
	i2cAddress=addr;
    dc32:	68fb      	ldr	r3, [r7, #12]
    dc34:	7afa      	ldrb	r2, [r7, #11]
    dc36:	731a      	strb	r2, [r3, #12]
	i2cClass=i2c;
    dc38:	68fb      	ldr	r3, [r7, #12]
    dc3a:	687a      	ldr	r2, [r7, #4]
    dc3c:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
    dc3e:	68fb      	ldr	r3, [r7, #12]
    dc40:	691b      	ldr	r3, [r3, #16]
    dc42:	7a5b      	ldrb	r3, [r3, #9]
    dc44:	b2da      	uxtb	r2, r3
    dc46:	68fb      	ldr	r3, [r7, #12]
    dc48:	729a      	strb	r2, [r3, #10]
	return isOK;
    dc4a:	68fb      	ldr	r3, [r7, #12]
    dc4c:	7a9b      	ldrb	r3, [r3, #10]
    dc4e:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    dc50:	4618      	mov	r0, r3
    dc52:	3714      	adds	r7, #20
    dc54:	46bd      	mov	sp, r7
    dc56:	bc80      	pop	{r7}
    dc58:	4770      	bx	lr

0000dc5a <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    dc5a:	b480      	push	{r7}
    dc5c:	b083      	sub	sp, #12
    dc5e:	af00      	add	r7, sp, #0
    dc60:	6078      	str	r0, [r7, #4]
    dc62:	460b      	mov	r3, r1
    dc64:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    dc66:	78fb      	ldrb	r3, [r7, #3]
    dc68:	f003 0307 	and.w	r3, r3, #7
    dc6c:	b2db      	uxtb	r3, r3
}
    dc6e:	4618      	mov	r0, r3
    dc70:	370c      	adds	r7, #12
    dc72:	46bd      	mov	sp, r7
    dc74:	bc80      	pop	{r7}
    dc76:	4770      	bx	lr

0000dc78 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    dc78:	b480      	push	{r7}
    dc7a:	b083      	sub	sp, #12
    dc7c:	af00      	add	r7, sp, #0
    dc7e:	6078      	str	r0, [r7, #4]
    dc80:	4608      	mov	r0, r1
    dc82:	4611      	mov	r1, r2
    dc84:	461a      	mov	r2, r3
    dc86:	4603      	mov	r3, r0
    dc88:	70fb      	strb	r3, [r7, #3]
    dc8a:	460b      	mov	r3, r1
    dc8c:	70bb      	strb	r3, [r7, #2]
    dc8e:	4613      	mov	r3, r2
    dc90:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    dc92:	78fb      	ldrb	r3, [r7, #3]
    dc94:	2b07      	cmp	r3, #7
    dc96:	dc01      	bgt.n	dc9c <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    dc98:	78bb      	ldrb	r3, [r7, #2]
    dc9a:	e000      	b.n	dc9e <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    dc9c:	787b      	ldrb	r3, [r7, #1]
}
    dc9e:	4618      	mov	r0, r3
    dca0:	370c      	adds	r7, #12
    dca2:	46bd      	mov	sp, r7
    dca4:	bc80      	pop	{r7}
    dca6:	4770      	bx	lr

0000dca8 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    dca8:	b580      	push	{r7, lr}
    dcaa:	b082      	sub	sp, #8
    dcac:	af00      	add	r7, sp, #0
    dcae:	6078      	str	r0, [r7, #4]
    dcb0:	460b      	mov	r3, r1
    dcb2:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    dcb4:	687b      	ldr	r3, [r7, #4]
    dcb6:	691a      	ldr	r2, [r3, #16]
    dcb8:	687b      	ldr	r3, [r7, #4]
    dcba:	7b1b      	ldrb	r3, [r3, #12]
    dcbc:	4619      	mov	r1, r3
    dcbe:	4610      	mov	r0, r2
    dcc0:	4b0b      	ldr	r3, [pc, #44]	; (dcf0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    dcc2:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    dcc4:	687b      	ldr	r3, [r7, #4]
    dcc6:	691b      	ldr	r3, [r3, #16]
    dcc8:	1cf9      	adds	r1, r7, #3
    dcca:	2201      	movs	r2, #1
    dccc:	4618      	mov	r0, r3
    dcce:	4b09      	ldr	r3, [pc, #36]	; (dcf4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    dcd0:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    dcd2:	687b      	ldr	r3, [r7, #4]
    dcd4:	6918      	ldr	r0, [r3, #16]
    dcd6:	687b      	ldr	r3, [r7, #4]
    dcd8:	3304      	adds	r3, #4
    dcda:	2201      	movs	r2, #1
    dcdc:	4619      	mov	r1, r3
    dcde:	4b06      	ldr	r3, [pc, #24]	; (dcf8 <_ZN14MCP23008_Class12readRegisterEh+0x50>)
    dce0:	4798      	blx	r3

	return registerValue;
    dce2:	687b      	ldr	r3, [r7, #4]
    dce4:	791b      	ldrb	r3, [r3, #4]
}
    dce6:	4618      	mov	r0, r3
    dce8:	3708      	adds	r7, #8
    dcea:	46bd      	mov	sp, r7
    dcec:	bd80      	pop	{r7, pc}
    dcee:	bf00      	nop
    dcf0:	0000db69 	.word	0x0000db69
    dcf4:	0000db95 	.word	0x0000db95
    dcf8:	0000dbc1 	.word	0x0000dbc1

0000dcfc <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    dcfc:	b580      	push	{r7, lr}
    dcfe:	b082      	sub	sp, #8
    dd00:	af00      	add	r7, sp, #0
    dd02:	6078      	str	r0, [r7, #4]
	i2cClass->SetSlaveAddress(i2cAddress);
    dd04:	687b      	ldr	r3, [r7, #4]
    dd06:	691a      	ldr	r2, [r3, #16]
    dd08:	687b      	ldr	r3, [r7, #4]
    dd0a:	7b1b      	ldrb	r3, [r3, #12]
    dd0c:	4619      	mov	r1, r3
    dd0e:	4610      	mov	r0, r2
    dd10:	4b05      	ldr	r3, [pc, #20]	; (dd28 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x2c>)
    dd12:	4798      	blx	r3
	return readRegister(MCP23008_GPIOA);
    dd14:	2109      	movs	r1, #9
    dd16:	6878      	ldr	r0, [r7, #4]
    dd18:	4b04      	ldr	r3, [pc, #16]	; (dd2c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    dd1a:	4798      	blx	r3
    dd1c:	4603      	mov	r3, r0
}
    dd1e:	4618      	mov	r0, r3
    dd20:	3708      	adds	r7, #8
    dd22:	46bd      	mov	sp, r7
    dd24:	bd80      	pop	{r7, pc}
    dd26:	bf00      	nop
    dd28:	0000db69 	.word	0x0000db69
    dd2c:	0000dca9 	.word	0x0000dca9

0000dd30 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    dd30:	b580      	push	{r7, lr}
    dd32:	b084      	sub	sp, #16
    dd34:	af00      	add	r7, sp, #0
    dd36:	6078      	str	r0, [r7, #4]
    dd38:	460b      	mov	r3, r1
    dd3a:	70fb      	strb	r3, [r7, #3]
    dd3c:	4613      	mov	r3, r2
    dd3e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    dd40:	687b      	ldr	r3, [r7, #4]
    dd42:	691a      	ldr	r2, [r3, #16]
    dd44:	687b      	ldr	r3, [r7, #4]
    dd46:	7b1b      	ldrb	r3, [r3, #12]
    dd48:	4619      	mov	r1, r3
    dd4a:	4610      	mov	r0, r2
    dd4c:	4b09      	ldr	r3, [pc, #36]	; (dd74 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    dd4e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    dd50:	78fb      	ldrb	r3, [r7, #3]
    dd52:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    dd54:	78bb      	ldrb	r3, [r7, #2]
    dd56:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    dd58:	687b      	ldr	r3, [r7, #4]
    dd5a:	691b      	ldr	r3, [r3, #16]
    dd5c:	f107 010c 	add.w	r1, r7, #12
    dd60:	2202      	movs	r2, #2
    dd62:	4618      	mov	r0, r3
    dd64:	4b04      	ldr	r3, [pc, #16]	; (dd78 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    dd66:	4798      	blx	r3
    dd68:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    dd6a:	4618      	mov	r0, r3
    dd6c:	3710      	adds	r7, #16
    dd6e:	46bd      	mov	sp, r7
    dd70:	bd80      	pop	{r7, pc}
    dd72:	bf00      	nop
    dd74:	0000db69 	.word	0x0000db69
    dd78:	0000db95 	.word	0x0000db95

0000dd7c <_ZN14MCP23008_Class12SetPortInputEv>:
	writeRegister(MCP23008_GPIOA,v);
	return v;
}


void	MCP23008_Class::SetPortInput(void){
    dd7c:	b580      	push	{r7, lr}
    dd7e:	b084      	sub	sp, #16
    dd80:	af00      	add	r7, sp, #0
    dd82:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    dd84:	2300      	movs	r3, #0
    dd86:	73fb      	strb	r3, [r7, #15]
    dd88:	7bfb      	ldrb	r3, [r7, #15]
    dd8a:	2b07      	cmp	r3, #7
    dd8c:	dc0f      	bgt.n	ddae <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    dd8e:	7bfb      	ldrb	r3, [r7, #15]
    dd90:	2201      	movs	r2, #1
    dd92:	4619      	mov	r1, r3
    dd94:	6878      	ldr	r0, [r7, #4]
    dd96:	4b08      	ldr	r3, [pc, #32]	; (ddb8 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    dd98:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    dd9a:	7bfb      	ldrb	r3, [r7, #15]
    dd9c:	2201      	movs	r2, #1
    dd9e:	4619      	mov	r1, r3
    dda0:	6878      	ldr	r0, [r7, #4]
    dda2:	4b06      	ldr	r3, [pc, #24]	; (ddbc <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    dda4:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    dda6:	7bfb      	ldrb	r3, [r7, #15]
    dda8:	3301      	adds	r3, #1
    ddaa:	73fb      	strb	r3, [r7, #15]
    ddac:	e7ec      	b.n	dd88 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    ddae:	bf00      	nop
    ddb0:	3710      	adds	r7, #16
    ddb2:	46bd      	mov	sp, r7
    ddb4:	bd80      	pop	{r7, pc}
    ddb6:	bf00      	nop
    ddb8:	0000de81 	.word	0x0000de81
    ddbc:	0000df65 	.word	0x0000df65

0000ddc0 <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
    ddc0:	b580      	push	{r7, lr}
    ddc2:	b084      	sub	sp, #16
    ddc4:	af00      	add	r7, sp, #0
    ddc6:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    ddc8:	2300      	movs	r3, #0
    ddca:	73fb      	strb	r3, [r7, #15]
    ddcc:	7bfb      	ldrb	r3, [r7, #15]
    ddce:	2b07      	cmp	r3, #7
    ddd0:	dc09      	bgt.n	dde6 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    ddd2:	7bfb      	ldrb	r3, [r7, #15]
    ddd4:	2200      	movs	r2, #0
    ddd6:	4619      	mov	r1, r3
    ddd8:	6878      	ldr	r0, [r7, #4]
    ddda:	4b05      	ldr	r3, [pc, #20]	; (ddf0 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    dddc:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    ddde:	7bfb      	ldrb	r3, [r7, #15]
    dde0:	3301      	adds	r3, #1
    dde2:	73fb      	strb	r3, [r7, #15]
    dde4:	e7f2      	b.n	ddcc <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    dde6:	bf00      	nop
    dde8:	3710      	adds	r7, #16
    ddea:	46bd      	mov	sp, r7
    ddec:	bd80      	pop	{r7, pc}
    ddee:	bf00      	nop
    ddf0:	0000de81 	.word	0x0000de81

0000ddf4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    ddf4:	b580      	push	{r7, lr}
    ddf6:	b084      	sub	sp, #16
    ddf8:	af00      	add	r7, sp, #0
    ddfa:	6078      	str	r0, [r7, #4]
    ddfc:	4608      	mov	r0, r1
    ddfe:	4611      	mov	r1, r2
    de00:	461a      	mov	r2, r3
    de02:	4603      	mov	r3, r0
    de04:	70fb      	strb	r3, [r7, #3]
    de06:	460b      	mov	r3, r1
    de08:	70bb      	strb	r3, [r7, #2]
    de0a:	4613      	mov	r3, r2
    de0c:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    de0e:	787b      	ldrb	r3, [r7, #1]
    de10:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    de12:	78fb      	ldrb	r3, [r7, #3]
    de14:	4619      	mov	r1, r3
    de16:	6878      	ldr	r0, [r7, #4]
    de18:	4b16      	ldr	r3, [pc, #88]	; (de74 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    de1a:	4798      	blx	r3
    de1c:	4603      	mov	r3, r0
    de1e:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    de20:	7bfb      	ldrb	r3, [r7, #15]
    de22:	4619      	mov	r1, r3
    de24:	6878      	ldr	r0, [r7, #4]
    de26:	4b14      	ldr	r3, [pc, #80]	; (de78 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    de28:	4798      	blx	r3
    de2a:	4603      	mov	r3, r0
    de2c:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    de2e:	78bb      	ldrb	r3, [r7, #2]
    de30:	2b00      	cmp	r3, #0
    de32:	d009      	beq.n	de48 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    de34:	7bba      	ldrb	r2, [r7, #14]
    de36:	7b7b      	ldrb	r3, [r7, #13]
    de38:	4619      	mov	r1, r3
    de3a:	2301      	movs	r3, #1
    de3c:	408b      	lsls	r3, r1
    de3e:	b2db      	uxtb	r3, r3
    de40:	4313      	orrs	r3, r2
    de42:	b2db      	uxtb	r3, r3
    de44:	73bb      	strb	r3, [r7, #14]
    de46:	e00a      	b.n	de5e <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    de48:	7bba      	ldrb	r2, [r7, #14]
    de4a:	7b7b      	ldrb	r3, [r7, #13]
    de4c:	4619      	mov	r1, r3
    de4e:	2301      	movs	r3, #1
    de50:	408b      	lsls	r3, r1
    de52:	b2db      	uxtb	r3, r3
    de54:	43db      	mvns	r3, r3
    de56:	b2db      	uxtb	r3, r3
    de58:	4013      	ands	r3, r2
    de5a:	b2db      	uxtb	r3, r3
    de5c:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    de5e:	7bba      	ldrb	r2, [r7, #14]
    de60:	7bfb      	ldrb	r3, [r7, #15]
    de62:	4619      	mov	r1, r3
    de64:	6878      	ldr	r0, [r7, #4]
    de66:	4b05      	ldr	r3, [pc, #20]	; (de7c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    de68:	4798      	blx	r3
}
    de6a:	bf00      	nop
    de6c:	3710      	adds	r7, #16
    de6e:	46bd      	mov	sp, r7
    de70:	bd80      	pop	{r7, pc}
    de72:	bf00      	nop
    de74:	0000dc5b 	.word	0x0000dc5b
    de78:	0000dca9 	.word	0x0000dca9
    de7c:	0000dd31 	.word	0x0000dd31

0000de80 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    de80:	b590      	push	{r4, r7, lr}
    de82:	b085      	sub	sp, #20
    de84:	af02      	add	r7, sp, #8
    de86:	6078      	str	r0, [r7, #4]
    de88:	460b      	mov	r3, r1
    de8a:	70fb      	strb	r3, [r7, #3]
    de8c:	4613      	mov	r3, r2
    de8e:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    de90:	78bb      	ldrb	r3, [r7, #2]
    de92:	2b01      	cmp	r3, #1
    de94:	bf0c      	ite	eq
    de96:	2301      	moveq	r3, #1
    de98:	2300      	movne	r3, #0
    de9a:	b2db      	uxtb	r3, r3
    de9c:	461a      	mov	r2, r3
    de9e:	78f9      	ldrb	r1, [r7, #3]
    dea0:	2300      	movs	r3, #0
    dea2:	9300      	str	r3, [sp, #0]
    dea4:	2300      	movs	r3, #0
    dea6:	6878      	ldr	r0, [r7, #4]
    dea8:	4c02      	ldr	r4, [pc, #8]	; (deb4 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    deaa:	47a0      	blx	r4
}
    deac:	bf00      	nop
    deae:	370c      	adds	r7, #12
    deb0:	46bd      	mov	sp, r7
    deb2:	bd90      	pop	{r4, r7, pc}
    deb4:	0000ddf5 	.word	0x0000ddf5

0000deb8 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    deb8:	b590      	push	{r4, r7, lr}
    deba:	b085      	sub	sp, #20
    debc:	af00      	add	r7, sp, #0
    debe:	6078      	str	r0, [r7, #4]
    dec0:	460b      	mov	r3, r1
    dec2:	70fb      	strb	r3, [r7, #3]
    dec4:	4613      	mov	r3, r2
    dec6:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    dec8:	78fb      	ldrb	r3, [r7, #3]
    deca:	4619      	mov	r1, r3
    decc:	6878      	ldr	r0, [r7, #4]
    dece:	4b21      	ldr	r3, [pc, #132]	; (df54 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    ded0:	4798      	blx	r3
    ded2:	4603      	mov	r3, r0
    ded4:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    ded6:	78f9      	ldrb	r1, [r7, #3]
    ded8:	230a      	movs	r3, #10
    deda:	220a      	movs	r2, #10
    dedc:	6878      	ldr	r0, [r7, #4]
    dede:	4c1e      	ldr	r4, [pc, #120]	; (df58 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    dee0:	47a0      	blx	r4
    dee2:	4603      	mov	r3, r0
    dee4:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    dee6:	7bfb      	ldrb	r3, [r7, #15]
    dee8:	4619      	mov	r1, r3
    deea:	6878      	ldr	r0, [r7, #4]
    deec:	4b1b      	ldr	r3, [pc, #108]	; (df5c <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    deee:	4798      	blx	r3
    def0:	4603      	mov	r3, r0
    def2:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    def4:	78bb      	ldrb	r3, [r7, #2]
    def6:	2b00      	cmp	r3, #0
    def8:	d009      	beq.n	df0e <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    defa:	7bba      	ldrb	r2, [r7, #14]
    defc:	7b7b      	ldrb	r3, [r7, #13]
    defe:	4619      	mov	r1, r3
    df00:	2301      	movs	r3, #1
    df02:	408b      	lsls	r3, r1
    df04:	b2db      	uxtb	r3, r3
    df06:	4313      	orrs	r3, r2
    df08:	b2db      	uxtb	r3, r3
    df0a:	73bb      	strb	r3, [r7, #14]
    df0c:	e00a      	b.n	df24 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    df0e:	7bba      	ldrb	r2, [r7, #14]
    df10:	7b7b      	ldrb	r3, [r7, #13]
    df12:	4619      	mov	r1, r3
    df14:	2301      	movs	r3, #1
    df16:	408b      	lsls	r3, r1
    df18:	b2db      	uxtb	r3, r3
    df1a:	43db      	mvns	r3, r3
    df1c:	b2db      	uxtb	r3, r3
    df1e:	4013      	ands	r3, r2
    df20:	b2db      	uxtb	r3, r3
    df22:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    df24:	78f9      	ldrb	r1, [r7, #3]
    df26:	2309      	movs	r3, #9
    df28:	2209      	movs	r2, #9
    df2a:	6878      	ldr	r0, [r7, #4]
    df2c:	4c0a      	ldr	r4, [pc, #40]	; (df58 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    df2e:	47a0      	blx	r4
    df30:	4603      	mov	r3, r0
    df32:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    df34:	7bba      	ldrb	r2, [r7, #14]
    df36:	7bfb      	ldrb	r3, [r7, #15]
    df38:	4619      	mov	r1, r3
    df3a:	6878      	ldr	r0, [r7, #4]
    df3c:	4b08      	ldr	r3, [pc, #32]	; (df60 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    df3e:	4798      	blx	r3
    df40:	4603      	mov	r3, r0
    df42:	2b00      	cmp	r3, #0
    df44:	bf0c      	ite	eq
    df46:	2301      	moveq	r3, #1
    df48:	2300      	movne	r3, #0
    df4a:	b2db      	uxtb	r3, r3
}
    df4c:	4618      	mov	r0, r3
    df4e:	3714      	adds	r7, #20
    df50:	46bd      	mov	sp, r7
    df52:	bd90      	pop	{r4, r7, pc}
    df54:	0000dc5b 	.word	0x0000dc5b
    df58:	0000dc79 	.word	0x0000dc79
    df5c:	0000dca9 	.word	0x0000dca9
    df60:	0000dd31 	.word	0x0000dd31

0000df64 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    df64:	b590      	push	{r4, r7, lr}
    df66:	b085      	sub	sp, #20
    df68:	af02      	add	r7, sp, #8
    df6a:	6078      	str	r0, [r7, #4]
    df6c:	460b      	mov	r3, r1
    df6e:	70fb      	strb	r3, [r7, #3]
    df70:	4613      	mov	r3, r2
    df72:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    df74:	78ba      	ldrb	r2, [r7, #2]
    df76:	78f9      	ldrb	r1, [r7, #3]
    df78:	2306      	movs	r3, #6
    df7a:	9300      	str	r3, [sp, #0]
    df7c:	2306      	movs	r3, #6
    df7e:	6878      	ldr	r0, [r7, #4]
    df80:	4c02      	ldr	r4, [pc, #8]	; (df8c <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    df82:	47a0      	blx	r4
}
    df84:	bf00      	nop
    df86:	370c      	adds	r7, #12
    df88:	46bd      	mov	sp, r7
    df8a:	bd90      	pop	{r4, r7, pc}
    df8c:	0000ddf5 	.word	0x0000ddf5

0000df90 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    df90:	b480      	push	{r7}
    df92:	b085      	sub	sp, #20
    df94:	af00      	add	r7, sp, #0
    df96:	60f8      	str	r0, [r7, #12]
    df98:	460b      	mov	r3, r1
    df9a:	607a      	str	r2, [r7, #4]
    df9c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    df9e:	7afb      	ldrb	r3, [r7, #11]
    dfa0:	68fa      	ldr	r2, [r7, #12]
    dfa2:	01db      	lsls	r3, r3, #7
    dfa4:	4413      	add	r3, r2
    dfa6:	3318      	adds	r3, #24
    dfa8:	687a      	ldr	r2, [r7, #4]
    dfaa:	601a      	str	r2, [r3, #0]
}
    dfac:	bf00      	nop
    dfae:	3714      	adds	r7, #20
    dfb0:	46bd      	mov	sp, r7
    dfb2:	bc80      	pop	{r7}
    dfb4:	4770      	bx	lr

0000dfb6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    dfb6:	b480      	push	{r7}
    dfb8:	b085      	sub	sp, #20
    dfba:	af00      	add	r7, sp, #0
    dfbc:	60f8      	str	r0, [r7, #12]
    dfbe:	460b      	mov	r3, r1
    dfc0:	607a      	str	r2, [r7, #4]
    dfc2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    dfc4:	7afb      	ldrb	r3, [r7, #11]
    dfc6:	68fa      	ldr	r2, [r7, #12]
    dfc8:	01db      	lsls	r3, r3, #7
    dfca:	4413      	add	r3, r2
    dfcc:	3314      	adds	r3, #20
    dfce:	687a      	ldr	r2, [r7, #4]
    dfd0:	601a      	str	r2, [r3, #0]
}
    dfd2:	bf00      	nop
    dfd4:	3714      	adds	r7, #20
    dfd6:	46bd      	mov	sp, r7
    dfd8:	bc80      	pop	{r7}
    dfda:	4770      	bx	lr

0000dfdc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    dfdc:	b580      	push	{r7, lr}
    dfde:	b082      	sub	sp, #8
    dfe0:	af00      	add	r7, sp, #0
    dfe2:	4603      	mov	r3, r0
    dfe4:	6039      	str	r1, [r7, #0]
    dfe6:	71fb      	strb	r3, [r7, #7]
    dfe8:	4613      	mov	r3, r2
    dfea:	71bb      	strb	r3, [r7, #6]
	if (level) {
    dfec:	79bb      	ldrb	r3, [r7, #6]
    dfee:	2b00      	cmp	r3, #0
    dff0:	d006      	beq.n	e000 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    dff2:	79fb      	ldrb	r3, [r7, #7]
    dff4:	683a      	ldr	r2, [r7, #0]
    dff6:	4619      	mov	r1, r3
    dff8:	4806      	ldr	r0, [pc, #24]	; (e014 <_gpio_set_level+0x38>)
    dffa:	4b07      	ldr	r3, [pc, #28]	; (e018 <_gpio_set_level+0x3c>)
    dffc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    dffe:	e005      	b.n	e00c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e000:	79fb      	ldrb	r3, [r7, #7]
    e002:	683a      	ldr	r2, [r7, #0]
    e004:	4619      	mov	r1, r3
    e006:	4803      	ldr	r0, [pc, #12]	; (e014 <_gpio_set_level+0x38>)
    e008:	4b04      	ldr	r3, [pc, #16]	; (e01c <_gpio_set_level+0x40>)
    e00a:	4798      	blx	r3
}
    e00c:	bf00      	nop
    e00e:	3708      	adds	r7, #8
    e010:	46bd      	mov	sp, r7
    e012:	bd80      	pop	{r7, pc}
    e014:	41008000 	.word	0x41008000
    e018:	0000df91 	.word	0x0000df91
    e01c:	0000dfb7 	.word	0x0000dfb7

0000e020 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    e020:	b580      	push	{r7, lr}
    e022:	b082      	sub	sp, #8
    e024:	af00      	add	r7, sp, #0
    e026:	4603      	mov	r3, r0
    e028:	460a      	mov	r2, r1
    e02a:	71fb      	strb	r3, [r7, #7]
    e02c:	4613      	mov	r3, r2
    e02e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e030:	79fb      	ldrb	r3, [r7, #7]
    e032:	115b      	asrs	r3, r3, #5
    e034:	b2d8      	uxtb	r0, r3
    e036:	79fb      	ldrb	r3, [r7, #7]
    e038:	f003 031f 	and.w	r3, r3, #31
    e03c:	2201      	movs	r2, #1
    e03e:	fa02 f303 	lsl.w	r3, r2, r3
    e042:	79ba      	ldrb	r2, [r7, #6]
    e044:	4619      	mov	r1, r3
    e046:	4b03      	ldr	r3, [pc, #12]	; (e054 <gpio_set_pin_level+0x34>)
    e048:	4798      	blx	r3
}
    e04a:	bf00      	nop
    e04c:	3708      	adds	r7, #8
    e04e:	46bd      	mov	sp, r7
    e050:	bd80      	pop	{r7, pc}
    e052:	bf00      	nop
    e054:	0000dfdd 	.word	0x0000dfdd

0000e058 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    e058:	b580      	push	{r7, lr}
    e05a:	b082      	sub	sp, #8
    e05c:	af00      	add	r7, sp, #0
    e05e:	6078      	str	r0, [r7, #4]
    e060:	6039      	str	r1, [r7, #0]
    e062:	687b      	ldr	r3, [r7, #4]
    e064:	3318      	adds	r3, #24
    e066:	4618      	mov	r0, r3
    e068:	4b08      	ldr	r3, [pc, #32]	; (e08c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    e06a:	4798      	blx	r3
{
	appParameters=defaultParameters;
    e06c:	687b      	ldr	r3, [r7, #4]
    e06e:	4a08      	ldr	r2, [pc, #32]	; (e090 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    e070:	7812      	ldrb	r2, [r2, #0]
    e072:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    e074:	687b      	ldr	r3, [r7, #4]
    e076:	683a      	ldr	r2, [r7, #0]
    e078:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    e07a:	4b06      	ldr	r3, [pc, #24]	; (e094 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    e07c:	681a      	ldr	r2, [r3, #0]
    e07e:	687b      	ldr	r3, [r7, #4]
    e080:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    e082:	687b      	ldr	r3, [r7, #4]
    e084:	4618      	mov	r0, r3
    e086:	3708      	adds	r7, #8
    e088:	46bd      	mov	sp, r7
    e08a:	bd80      	pop	{r7, pc}
    e08c:	0000f71d 	.word	0x0000f71d
    e090:	000101d0 	.word	0x000101d0
    e094:	20000d50 	.word	0x20000d50

0000e098 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    e098:	b580      	push	{r7, lr}
    e09a:	b082      	sub	sp, #8
    e09c:	af00      	add	r7, sp, #0
    e09e:	6078      	str	r0, [r7, #4]
    e0a0:	687b      	ldr	r3, [r7, #4]
    e0a2:	3318      	adds	r3, #24
    e0a4:	4618      	mov	r0, r3
    e0a6:	4b03      	ldr	r3, [pc, #12]	; (e0b4 <_ZN16FlashMemoryClassD1Ev+0x1c>)
    e0a8:	4798      	blx	r3
{
} //~FlashMemoryClass
    e0aa:	687b      	ldr	r3, [r7, #4]
    e0ac:	4618      	mov	r0, r3
    e0ae:	3708      	adds	r7, #8
    e0b0:	46bd      	mov	sp, r7
    e0b2:	bd80      	pop	{r7, pc}
    e0b4:	0000f73d 	.word	0x0000f73d

0000e0b8 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
    e0b8:	b580      	push	{r7, lr}
    e0ba:	b082      	sub	sp, #8
    e0bc:	af00      	add	r7, sp, #0
    e0be:	6078      	str	r0, [r7, #4]
	garbage=spi.Enable();
    e0c0:	687b      	ldr	r3, [r7, #4]
    e0c2:	3318      	adds	r3, #24
    e0c4:	4618      	mov	r0, r3
    e0c6:	4b05      	ldr	r3, [pc, #20]	; (e0dc <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
    e0c8:	4798      	blx	r3
    e0ca:	4603      	mov	r3, r0
    e0cc:	461a      	mov	r2, r3
    e0ce:	687b      	ldr	r3, [r7, #4]
    e0d0:	609a      	str	r2, [r3, #8]
	
	
}
    e0d2:	bf00      	nop
    e0d4:	3708      	adds	r7, #8
    e0d6:	46bd      	mov	sp, r7
    e0d8:	bd80      	pop	{r7, pc}
    e0da:	bf00      	nop
    e0dc:	0000f751 	.word	0x0000f751

0000e0e0 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	spi.Read((uint8_t *)dest, (uint16_t)size);
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
    e0e0:	b580      	push	{r7, lr}
    e0e2:	b082      	sub	sp, #8
    e0e4:	af00      	add	r7, sp, #0
    e0e6:	6078      	str	r0, [r7, #4]
	garbage=0;
    e0e8:	687b      	ldr	r3, [r7, #4]
    e0ea:	2200      	movs	r2, #0
    e0ec:	609a      	str	r2, [r3, #8]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
    e0ee:	2100      	movs	r1, #0
    e0f0:	200f      	movs	r0, #15
    e0f2:	4b05      	ldr	r3, [pc, #20]	; (e108 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e0f4:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
    e0f6:	2101      	movs	r1, #1
    e0f8:	2013      	movs	r0, #19
    e0fa:	4b03      	ldr	r3, [pc, #12]	; (e108 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e0fc:	4798      	blx	r3
}
    e0fe:	bf00      	nop
    e100:	3708      	adds	r7, #8
    e102:	46bd      	mov	sp, r7
    e104:	bd80      	pop	{r7, pc}
    e106:	bf00      	nop
    e108:	0000e021 	.word	0x0000e021

0000e10c <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
    e10c:	b580      	push	{r7, lr}
    e10e:	b082      	sub	sp, #8
    e110:	af00      	add	r7, sp, #0
    e112:	6078      	str	r0, [r7, #4]
	garbage=0;
    e114:	687b      	ldr	r3, [r7, #4]
    e116:	2200      	movs	r2, #0
    e118:	609a      	str	r2, [r3, #8]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    e11a:	2101      	movs	r1, #1
    e11c:	200f      	movs	r0, #15
    e11e:	4b05      	ldr	r3, [pc, #20]	; (e134 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e120:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
    e122:	2101      	movs	r1, #1
    e124:	2013      	movs	r0, #19
    e126:	4b03      	ldr	r3, [pc, #12]	; (e134 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e128:	4798      	blx	r3
}
    e12a:	bf00      	nop
    e12c:	3708      	adds	r7, #8
    e12e:	46bd      	mov	sp, r7
    e130:	bd80      	pop	{r7, pc}
    e132:	bf00      	nop
    e134:	0000e021 	.word	0x0000e021

0000e138 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
    e138:	b580      	push	{r7, lr}
    e13a:	b082      	sub	sp, #8
    e13c:	af00      	add	r7, sp, #0
    e13e:	6078      	str	r0, [r7, #4]
    e140:	460b      	mov	r3, r1
    e142:	70fb      	strb	r3, [r7, #3]
	//WaitBusy();
	spi.Write(&byte,1);
    e144:	687b      	ldr	r3, [r7, #4]
    e146:	3318      	adds	r3, #24
    e148:	1cf9      	adds	r1, r7, #3
    e14a:	2201      	movs	r2, #1
    e14c:	4618      	mov	r0, r3
    e14e:	4b03      	ldr	r3, [pc, #12]	; (e15c <_ZN16FlashMemoryClass9Send_ByteEh+0x24>)
    e150:	4798      	blx	r3
	return byte;
    e152:	78fb      	ldrb	r3, [r7, #3]
}
    e154:	4618      	mov	r0, r3
    e156:	3708      	adds	r7, #8
    e158:	46bd      	mov	sp, r7
    e15a:	bd80      	pop	{r7, pc}
    e15c:	0000f78d 	.word	0x0000f78d

0000e160 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
    e160:	b580      	push	{r7, lr}
    e162:	b084      	sub	sp, #16
    e164:	af00      	add	r7, sp, #0
    e166:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.Read(&byte,1);
    e168:	687b      	ldr	r3, [r7, #4]
    e16a:	3318      	adds	r3, #24
    e16c:	f107 010f 	add.w	r1, r7, #15
    e170:	2201      	movs	r2, #1
    e172:	4618      	mov	r0, r3
    e174:	4b03      	ldr	r3, [pc, #12]	; (e184 <_ZN16FlashMemoryClass8Get_ByteEv+0x24>)
    e176:	4798      	blx	r3
	
	return byte;
    e178:	7bfb      	ldrb	r3, [r7, #15]
}
    e17a:	4618      	mov	r0, r3
    e17c:	3710      	adds	r7, #16
    e17e:	46bd      	mov	sp, r7
    e180:	bd80      	pop	{r7, pc}
    e182:	bf00      	nop
    e184:	0000f7d1 	.word	0x0000f7d1

0000e188 <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
    e188:	b580      	push	{r7, lr}
    e18a:	b082      	sub	sp, #8
    e18c:	af00      	add	r7, sp, #0
    e18e:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
    e190:	6878      	ldr	r0, [r7, #4]
    e192:	4b0d      	ldr	r3, [pc, #52]	; (e1c8 <_ZN16FlashMemoryClass4WRENEv+0x40>)
    e194:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
    e196:	2106      	movs	r1, #6
    e198:	6878      	ldr	r0, [r7, #4]
    e19a:	4b0c      	ldr	r3, [pc, #48]	; (e1cc <_ZN16FlashMemoryClass4WRENEv+0x44>)
    e19c:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
    e19e:	6878      	ldr	r0, [r7, #4]
    e1a0:	4b0b      	ldr	r3, [pc, #44]	; (e1d0 <_ZN16FlashMemoryClass4WRENEv+0x48>)
    e1a2:	4798      	blx	r3
		status=ReadStatusRegister();
    e1a4:	6878      	ldr	r0, [r7, #4]
    e1a6:	4b0b      	ldr	r3, [pc, #44]	; (e1d4 <_ZN16FlashMemoryClass4WRENEv+0x4c>)
    e1a8:	4798      	blx	r3
    e1aa:	4603      	mov	r3, r0
    e1ac:	461a      	mov	r2, r3
    e1ae:	687b      	ldr	r3, [r7, #4]
    e1b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	} while ((status&&(0x02))==0);
    e1b4:	687b      	ldr	r3, [r7, #4]
    e1b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e1ba:	2b00      	cmp	r3, #0
    e1bc:	d100      	bne.n	e1c0 <_ZN16FlashMemoryClass4WRENEv+0x38>
	do
    e1be:	e7e7      	b.n	e190 <_ZN16FlashMemoryClass4WRENEv+0x8>

}
    e1c0:	bf00      	nop
    e1c2:	3708      	adds	r7, #8
    e1c4:	46bd      	mov	sp, r7
    e1c6:	bd80      	pop	{r7, pc}
    e1c8:	0000e0e1 	.word	0x0000e0e1
    e1cc:	0000e139 	.word	0x0000e139
    e1d0:	0000e10d 	.word	0x0000e10d
    e1d4:	0000e3b5 	.word	0x0000e3b5

0000e1d8 <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
    e1d8:	b580      	push	{r7, lr}
    e1da:	b082      	sub	sp, #8
    e1dc:	af00      	add	r7, sp, #0
    e1de:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
    e1e0:	6878      	ldr	r0, [r7, #4]
    e1e2:	4b06      	ldr	r3, [pc, #24]	; (e1fc <_ZN16FlashMemoryClass4WRDIEv+0x24>)
    e1e4:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
    e1e6:	2104      	movs	r1, #4
    e1e8:	6878      	ldr	r0, [r7, #4]
    e1ea:	4b05      	ldr	r3, [pc, #20]	; (e200 <_ZN16FlashMemoryClass4WRDIEv+0x28>)
    e1ec:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
    e1ee:	6878      	ldr	r0, [r7, #4]
    e1f0:	4b04      	ldr	r3, [pc, #16]	; (e204 <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
    e1f2:	4798      	blx	r3
	
}
    e1f4:	bf00      	nop
    e1f6:	3708      	adds	r7, #8
    e1f8:	46bd      	mov	sp, r7
    e1fa:	bd80      	pop	{r7, pc}
    e1fc:	0000e0e1 	.word	0x0000e0e1
    e200:	0000e139 	.word	0x0000e139
    e204:	0000e10d 	.word	0x0000e10d

0000e208 <_ZN16FlashMemoryClass10eraseFlashEmm>:
		return *srcPtr;

	}
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
    e208:	b580      	push	{r7, lr}
    e20a:	b086      	sub	sp, #24
    e20c:	af00      	add	r7, sp, #0
    e20e:	60f8      	str	r0, [r7, #12]
    e210:	60b9      	str	r1, [r7, #8]
    e212:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
    e214:	687b      	ldr	r3, [r7, #4]
    e216:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
    e218:	68bb      	ldr	r3, [r7, #8]
    e21a:	613b      	str	r3, [r7, #16]
	flashOpen();
    e21c:	68f8      	ldr	r0, [r7, #12]
    e21e:	4b21      	ldr	r3, [pc, #132]	; (e2a4 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>)
    e220:	4798      	blx	r3
	while (eraseRemaining > 0)
    e222:	697b      	ldr	r3, [r7, #20]
    e224:	2b00      	cmp	r3, #0
    e226:	d035      	beq.n	e294 <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>
	{
	WREN();
    e228:	68f8      	ldr	r0, [r7, #12]
    e22a:	4b1f      	ldr	r3, [pc, #124]	; (e2a8 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa0>)
    e22c:	4798      	blx	r3
	if (eraseRemaining <= 4 * 1024)
    e22e:	697b      	ldr	r3, [r7, #20]
    e230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e234:	d806      	bhi.n	e244 <_ZN16FlashMemoryClass10eraseFlashEmm+0x3c>
		{
		Sector_Erase(eraseAddress);
    e236:	6939      	ldr	r1, [r7, #16]
    e238:	68f8      	ldr	r0, [r7, #12]
    e23a:	4b1c      	ldr	r3, [pc, #112]	; (e2ac <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e23c:	4798      	blx	r3
		eraseRemaining = 0;
    e23e:	2300      	movs	r3, #0
    e240:	617b      	str	r3, [r7, #20]
    e242:	e020      	b.n	e286 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}
	else if (eraseRemaining < 64 * 1024)
    e244:	697b      	ldr	r3, [r7, #20]
    e246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e24a:	d20c      	bcs.n	e266 <_ZN16FlashMemoryClass10eraseFlashEmm+0x5e>
		{
		Sector_Erase(eraseAddress);
    e24c:	6939      	ldr	r1, [r7, #16]
    e24e:	68f8      	ldr	r0, [r7, #12]
    e250:	4b16      	ldr	r3, [pc, #88]	; (e2ac <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e252:	4798      	blx	r3
		eraseAddress += (4 * 1024);
    e254:	693b      	ldr	r3, [r7, #16]
    e256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e25a:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (4 * 1024);
    e25c:	697b      	ldr	r3, [r7, #20]
    e25e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    e262:	617b      	str	r3, [r7, #20]
    e264:	e00f      	b.n	e286 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}

	else if (eraseRemaining >= 64 * 1024)
    e266:	697b      	ldr	r3, [r7, #20]
    e268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e26c:	d30b      	bcc.n	e286 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		{
		Block_Erase_64K(eraseAddress);
    e26e:	6939      	ldr	r1, [r7, #16]
    e270:	68f8      	ldr	r0, [r7, #12]
    e272:	4b0f      	ldr	r3, [pc, #60]	; (e2b0 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa8>)
    e274:	4798      	blx	r3
		eraseAddress += (64 * 1024);
    e276:	693b      	ldr	r3, [r7, #16]
    e278:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e27c:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (64 * 1024);
    e27e:	697b      	ldr	r3, [r7, #20]
    e280:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    e284:	617b      	str	r3, [r7, #20]
		Block_Erase_32K(eraseAddress);
		eraseAddress += (32 * 1024);
		eraseRemaining -= (32 * 1024);
		}
*/
	WaitBusy();
    e286:	68f8      	ldr	r0, [r7, #12]
    e288:	4b0a      	ldr	r3, [pc, #40]	; (e2b4 <_ZN16FlashMemoryClass10eraseFlashEmm+0xac>)
    e28a:	4798      	blx	r3
	WRDI();
    e28c:	68f8      	ldr	r0, [r7, #12]
    e28e:	4b0a      	ldr	r3, [pc, #40]	; (e2b8 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb0>)
    e290:	4798      	blx	r3
	while (eraseRemaining > 0)
    e292:	e7c6      	b.n	e222 <_ZN16FlashMemoryClass10eraseFlashEmm+0x1a>
	}
	flashClose();
    e294:	68f8      	ldr	r0, [r7, #12]
    e296:	4b09      	ldr	r3, [pc, #36]	; (e2bc <_ZN16FlashMemoryClass10eraseFlashEmm+0xb4>)
    e298:	4798      	blx	r3
}
    e29a:	bf00      	nop
    e29c:	3718      	adds	r7, #24
    e29e:	46bd      	mov	sp, r7
    e2a0:	bd80      	pop	{r7, pc}
    e2a2:	bf00      	nop
    e2a4:	0000e0b9 	.word	0x0000e0b9
    e2a8:	0000e189 	.word	0x0000e189
    e2ac:	0000e451 	.word	0x0000e451
    e2b0:	0000e2c1 	.word	0x0000e2c1
    e2b4:	0000e31d 	.word	0x0000e31d
    e2b8:	0000e1d9 	.word	0x0000e1d9
    e2bc:	0000e42d 	.word	0x0000e42d

0000e2c0 <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
    e2c0:	b580      	push	{r7, lr}
    e2c2:	b082      	sub	sp, #8
    e2c4:	af00      	add	r7, sp, #0
    e2c6:	6078      	str	r0, [r7, #4]
    e2c8:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
    e2ca:	6878      	ldr	r0, [r7, #4]
    e2cc:	4b10      	ldr	r3, [pc, #64]	; (e310 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x50>)
    e2ce:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
    e2d0:	21d8      	movs	r1, #216	; 0xd8
    e2d2:	6878      	ldr	r0, [r7, #4]
    e2d4:	4b0f      	ldr	r3, [pc, #60]	; (e314 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e2d6:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    e2d8:	683b      	ldr	r3, [r7, #0]
    e2da:	0c1b      	lsrs	r3, r3, #16
    e2dc:	b2db      	uxtb	r3, r3
    e2de:	4619      	mov	r1, r3
    e2e0:	6878      	ldr	r0, [r7, #4]
    e2e2:	4b0c      	ldr	r3, [pc, #48]	; (e314 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e2e4:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
    e2e6:	683b      	ldr	r3, [r7, #0]
    e2e8:	0a1b      	lsrs	r3, r3, #8
    e2ea:	b2db      	uxtb	r3, r3
    e2ec:	4619      	mov	r1, r3
    e2ee:	6878      	ldr	r0, [r7, #4]
    e2f0:	4b08      	ldr	r3, [pc, #32]	; (e314 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e2f2:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
    e2f4:	683b      	ldr	r3, [r7, #0]
    e2f6:	b2db      	uxtb	r3, r3
    e2f8:	4619      	mov	r1, r3
    e2fa:	6878      	ldr	r0, [r7, #4]
    e2fc:	4b05      	ldr	r3, [pc, #20]	; (e314 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e2fe:	4798      	blx	r3
		CE_High_Flash();				// disable device
    e300:	6878      	ldr	r0, [r7, #4]
    e302:	4b05      	ldr	r3, [pc, #20]	; (e318 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x58>)
    e304:	4798      	blx	r3
		
}
    e306:	bf00      	nop
    e308:	3708      	adds	r7, #8
    e30a:	46bd      	mov	sp, r7
    e30c:	bd80      	pop	{r7, pc}
    e30e:	bf00      	nop
    e310:	0000e0e1 	.word	0x0000e0e1
    e314:	0000e139 	.word	0x0000e139
    e318:	0000e10d 	.word	0x0000e10d

0000e31c <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
    e31c:	b580      	push	{r7, lr}
    e31e:	b082      	sub	sp, #8
    e320:	af00      	add	r7, sp, #0
    e322:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
    e324:	6878      	ldr	r0, [r7, #4]
    e326:	4b0f      	ldr	r3, [pc, #60]	; (e364 <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    e328:	4798      	blx	r3
    e32a:	4603      	mov	r3, r0
    e32c:	461a      	mov	r2, r3
    e32e:	687b      	ldr	r3, [r7, #4]
    e330:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    e334:	687b      	ldr	r3, [r7, #4]
    e336:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e33a:	f003 0301 	and.w	r3, r3, #1
    e33e:	2b00      	cmp	r3, #0
    e340:	d008      	beq.n	e354 <_ZN16FlashMemoryClass8WaitBusyEv+0x38>
			status = ReadStatusRegister();
    e342:	6878      	ldr	r0, [r7, #4]
    e344:	4b07      	ldr	r3, [pc, #28]	; (e364 <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    e346:	4798      	blx	r3
    e348:	4603      	mov	r3, r0
    e34a:	461a      	mov	r2, r3
    e34c:	687b      	ldr	r3, [r7, #4]
    e34e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    e352:	e7ef      	b.n	e334 <_ZN16FlashMemoryClass8WaitBusyEv+0x18>
		}
		
		return	status;
    e354:	687b      	ldr	r3, [r7, #4]
    e356:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    e35a:	4618      	mov	r0, r3
    e35c:	3708      	adds	r7, #8
    e35e:	46bd      	mov	sp, r7
    e360:	bd80      	pop	{r7, pc}
    e362:	bf00      	nop
    e364:	0000e3b5 	.word	0x0000e3b5

0000e368 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
    e368:	b580      	push	{r7, lr}
    e36a:	b082      	sub	sp, #8
    e36c:	af00      	add	r7, sp, #0
    e36e:	6078      	str	r0, [r7, #4]
	
	flashOpen();
    e370:	6878      	ldr	r0, [r7, #4]
    e372:	4b0d      	ldr	r3, [pc, #52]	; (e3a8 <_ZN16FlashMemoryClass7IsReadyEv+0x40>)
    e374:	4798      	blx	r3
	status = ReadStatusRegister();
    e376:	6878      	ldr	r0, [r7, #4]
    e378:	4b0c      	ldr	r3, [pc, #48]	; (e3ac <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
    e37a:	4798      	blx	r3
    e37c:	4603      	mov	r3, r0
    e37e:	461a      	mov	r2, r3
    e380:	687b      	ldr	r3, [r7, #4]
    e382:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	flashClose();
    e386:	6878      	ldr	r0, [r7, #4]
    e388:	4b09      	ldr	r3, [pc, #36]	; (e3b0 <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
    e38a:	4798      	blx	r3
	return	(status&0x01)==0;
    e38c:	687b      	ldr	r3, [r7, #4]
    e38e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e392:	f003 0301 	and.w	r3, r3, #1
    e396:	2b00      	cmp	r3, #0
    e398:	bf0c      	ite	eq
    e39a:	2301      	moveq	r3, #1
    e39c:	2300      	movne	r3, #0
    e39e:	b2db      	uxtb	r3, r3
}
    e3a0:	4618      	mov	r0, r3
    e3a2:	3708      	adds	r7, #8
    e3a4:	46bd      	mov	sp, r7
    e3a6:	bd80      	pop	{r7, pc}
    e3a8:	0000e0b9 	.word	0x0000e0b9
    e3ac:	0000e3b5 	.word	0x0000e3b5
    e3b0:	0000e42d 	.word	0x0000e42d

0000e3b4 <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
    e3b4:	b580      	push	{r7, lr}
    e3b6:	b082      	sub	sp, #8
    e3b8:	af00      	add	r7, sp, #0
    e3ba:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
    e3bc:	2105      	movs	r1, #5
    e3be:	6878      	ldr	r0, [r7, #4]
    e3c0:	4b06      	ldr	r3, [pc, #24]	; (e3dc <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x28>)
    e3c2:	4798      	blx	r3
    e3c4:	4603      	mov	r3, r0
    e3c6:	461a      	mov	r2, r3
    e3c8:	687b      	ldr	r3, [r7, #4]
    e3ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		return status;
    e3ce:	687b      	ldr	r3, [r7, #4]
    e3d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    e3d4:	4618      	mov	r0, r3
    e3d6:	3708      	adds	r7, #8
    e3d8:	46bd      	mov	sp, r7
    e3da:	bd80      	pop	{r7, pc}
    e3dc:	0000e3e1 	.word	0x0000e3e1

0000e3e0 <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
    e3e0:	b580      	push	{r7, lr}
    e3e2:	b084      	sub	sp, #16
    e3e4:	af00      	add	r7, sp, #0
    e3e6:	6078      	str	r0, [r7, #4]
    e3e8:	460b      	mov	r3, r1
    e3ea:	70fb      	strb	r3, [r7, #3]
	uint8_t b = 0;
    e3ec:	2300      	movs	r3, #0
    e3ee:	73fb      	strb	r3, [r7, #15]
	CE_Low_Flash();			// enable device
    e3f0:	6878      	ldr	r0, [r7, #4]
    e3f2:	4b0a      	ldr	r3, [pc, #40]	; (e41c <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x3c>)
    e3f4:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
    e3f6:	78fb      	ldrb	r3, [r7, #3]
    e3f8:	4619      	mov	r1, r3
    e3fa:	6878      	ldr	r0, [r7, #4]
    e3fc:	4b08      	ldr	r3, [pc, #32]	; (e420 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x40>)
    e3fe:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
    e400:	6878      	ldr	r0, [r7, #4]
    e402:	4b08      	ldr	r3, [pc, #32]	; (e424 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x44>)
    e404:	4798      	blx	r3
    e406:	4603      	mov	r3, r0
    e408:	73fb      	strb	r3, [r7, #15]
	CE_High_Flash();			// disable device
    e40a:	6878      	ldr	r0, [r7, #4]
    e40c:	4b06      	ldr	r3, [pc, #24]	; (e428 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x48>)
    e40e:	4798      	blx	r3
	return b;
    e410:	7bfb      	ldrb	r3, [r7, #15]
}
    e412:	4618      	mov	r0, r3
    e414:	3710      	adds	r7, #16
    e416:	46bd      	mov	sp, r7
    e418:	bd80      	pop	{r7, pc}
    e41a:	bf00      	nop
    e41c:	0000e0e1 	.word	0x0000e0e1
    e420:	0000e139 	.word	0x0000e139
    e424:	0000e161 	.word	0x0000e161
    e428:	0000e10d 	.word	0x0000e10d

0000e42c <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
    e42c:	b580      	push	{r7, lr}
    e42e:	b082      	sub	sp, #8
    e430:	af00      	add	r7, sp, #0
    e432:	6078      	str	r0, [r7, #4]
	garbage=0;
    e434:	687b      	ldr	r3, [r7, #4]
    e436:	2200      	movs	r2, #0
    e438:	609a      	str	r2, [r3, #8]
		spi.Disable();
    e43a:	687b      	ldr	r3, [r7, #4]
    e43c:	3318      	adds	r3, #24
    e43e:	4618      	mov	r0, r3
    e440:	4b02      	ldr	r3, [pc, #8]	; (e44c <_ZN16FlashMemoryClass10flashCloseEv+0x20>)
    e442:	4798      	blx	r3
	}
    e444:	bf00      	nop
    e446:	3708      	adds	r7, #8
    e448:	46bd      	mov	sp, r7
    e44a:	bd80      	pop	{r7, pc}
    e44c:	0000f815 	.word	0x0000f815

0000e450 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
    e450:	b580      	push	{r7, lr}
    e452:	b082      	sub	sp, #8
    e454:	af00      	add	r7, sp, #0
    e456:	6078      	str	r0, [r7, #4]
    e458:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
    e45a:	6878      	ldr	r0, [r7, #4]
    e45c:	4b10      	ldr	r3, [pc, #64]	; (e4a0 <_ZN16FlashMemoryClass12Sector_EraseEm+0x50>)
    e45e:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
    e460:	2120      	movs	r1, #32
    e462:	6878      	ldr	r0, [r7, #4]
    e464:	4b0f      	ldr	r3, [pc, #60]	; (e4a4 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e466:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    e468:	683b      	ldr	r3, [r7, #0]
    e46a:	0c1b      	lsrs	r3, r3, #16
    e46c:	b2db      	uxtb	r3, r3
    e46e:	4619      	mov	r1, r3
    e470:	6878      	ldr	r0, [r7, #4]
    e472:	4b0c      	ldr	r3, [pc, #48]	; (e4a4 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e474:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
    e476:	683b      	ldr	r3, [r7, #0]
    e478:	0a1b      	lsrs	r3, r3, #8
    e47a:	b2db      	uxtb	r3, r3
    e47c:	4619      	mov	r1, r3
    e47e:	6878      	ldr	r0, [r7, #4]
    e480:	4b08      	ldr	r3, [pc, #32]	; (e4a4 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e482:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
    e484:	683b      	ldr	r3, [r7, #0]
    e486:	b2db      	uxtb	r3, r3
    e488:	4619      	mov	r1, r3
    e48a:	6878      	ldr	r0, [r7, #4]
    e48c:	4b05      	ldr	r3, [pc, #20]	; (e4a4 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e48e:	4798      	blx	r3
	CE_High_Flash();				// disable device
    e490:	6878      	ldr	r0, [r7, #4]
    e492:	4b05      	ldr	r3, [pc, #20]	; (e4a8 <_ZN16FlashMemoryClass12Sector_EraseEm+0x58>)
    e494:	4798      	blx	r3
}
    e496:	bf00      	nop
    e498:	3708      	adds	r7, #8
    e49a:	46bd      	mov	sp, r7
    e49c:	bd80      	pop	{r7, pc}
    e49e:	bf00      	nop
    e4a0:	0000e0e1 	.word	0x0000e0e1
    e4a4:	0000e139 	.word	0x0000e139
    e4a8:	0000e10d 	.word	0x0000e10d

0000e4ac <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    e4ac:	b580      	push	{r7, lr}
    e4ae:	b086      	sub	sp, #24
    e4b0:	af00      	add	r7, sp, #0
    e4b2:	60f8      	str	r0, [r7, #12]
    e4b4:	60b9      	str	r1, [r7, #8]
    e4b6:	607a      	str	r2, [r7, #4]
    e4b8:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
    e4ba:	68f8      	ldr	r0, [r7, #12]
    e4bc:	4b2b      	ldr	r3, [pc, #172]	; (e56c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc0>)
    e4be:	4798      	blx	r3
    e4c0:	4603      	mov	r3, r0
    e4c2:	f083 0301 	eor.w	r3, r3, #1
    e4c6:	b2db      	uxtb	r3, r3
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d000      	beq.n	e4ce <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x22>
    e4cc:	e7f5      	b.n	e4ba <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
    e4ce:	68f8      	ldr	r0, [r7, #12]
    e4d0:	4b27      	ldr	r3, [pc, #156]	; (e570 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc4>)
    e4d2:	4798      	blx	r3
	WREN();
    e4d4:	68f8      	ldr	r0, [r7, #12]
    e4d6:	4b27      	ldr	r3, [pc, #156]	; (e574 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc8>)
    e4d8:	4798      	blx	r3
	CE_Low_Flash();
    e4da:	68f8      	ldr	r0, [r7, #12]
    e4dc:	4b26      	ldr	r3, [pc, #152]	; (e578 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xcc>)
    e4de:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
    e4e0:	68fb      	ldr	r3, [r7, #12]
    e4e2:	2202      	movs	r2, #2
    e4e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    e4e8:	687b      	ldr	r3, [r7, #4]
    e4ea:	0c1b      	lsrs	r3, r3, #16
    e4ec:	b2da      	uxtb	r2, r3
    e4ee:	68fb      	ldr	r3, [r7, #12]
    e4f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    e4f4:	687b      	ldr	r3, [r7, #4]
    e4f6:	0a1b      	lsrs	r3, r3, #8
    e4f8:	b2da      	uxtb	r2, r3
    e4fa:	68fb      	ldr	r3, [r7, #12]
    e4fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	localBuffer[3]=(uint8_t)(addr&0xFF);
    e500:	687b      	ldr	r3, [r7, #4]
    e502:	b2da      	uxtb	r2, r3
    e504:	68fb      	ldr	r3, [r7, #12]
    e506:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	for (uint32_t i = 4; i <(size)+4; i++)
    e50a:	2304      	movs	r3, #4
    e50c:	617b      	str	r3, [r7, #20]
    e50e:	683b      	ldr	r3, [r7, #0]
    e510:	1d1a      	adds	r2, r3, #4
    e512:	697b      	ldr	r3, [r7, #20]
    e514:	429a      	cmp	r2, r3
    e516:	d90e      	bls.n	e536 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8a>
	{
		localBuffer[i]=*p;
    e518:	68bb      	ldr	r3, [r7, #8]
    e51a:	7819      	ldrb	r1, [r3, #0]
    e51c:	68fa      	ldr	r2, [r7, #12]
    e51e:	697b      	ldr	r3, [r7, #20]
    e520:	4413      	add	r3, r2
    e522:	3334      	adds	r3, #52	; 0x34
    e524:	460a      	mov	r2, r1
    e526:	701a      	strb	r2, [r3, #0]
		p++;
    e528:	68bb      	ldr	r3, [r7, #8]
    e52a:	3301      	adds	r3, #1
    e52c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
    e52e:	697b      	ldr	r3, [r7, #20]
    e530:	3301      	adds	r3, #1
    e532:	617b      	str	r3, [r7, #20]
    e534:	e7eb      	b.n	e50e <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x62>
	}


	w=spi.Write(&localBuffer[0],size+4);
    e536:	68fb      	ldr	r3, [r7, #12]
    e538:	f103 0018 	add.w	r0, r3, #24
    e53c:	68fb      	ldr	r3, [r7, #12]
    e53e:	f103 0134 	add.w	r1, r3, #52	; 0x34
    e542:	683b      	ldr	r3, [r7, #0]
    e544:	3304      	adds	r3, #4
    e546:	461a      	mov	r2, r3
    e548:	4b0c      	ldr	r3, [pc, #48]	; (e57c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd0>)
    e54a:	4798      	blx	r3
    e54c:	4603      	mov	r3, r0
    e54e:	613b      	str	r3, [r7, #16]

	CE_High_Flash();
    e550:	68f8      	ldr	r0, [r7, #12]
    e552:	4b0b      	ldr	r3, [pc, #44]	; (e580 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
    e554:	4798      	blx	r3
	WRDI();
    e556:	68f8      	ldr	r0, [r7, #12]
    e558:	4b0a      	ldr	r3, [pc, #40]	; (e584 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
    e55a:	4798      	blx	r3
	flashClose();
    e55c:	68f8      	ldr	r0, [r7, #12]
    e55e:	4b0a      	ldr	r3, [pc, #40]	; (e588 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
    e560:	4798      	blx	r3
	return	w;
    e562:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    e564:	4618      	mov	r0, r3
    e566:	3718      	adds	r7, #24
    e568:	46bd      	mov	sp, r7
    e56a:	bd80      	pop	{r7, pc}
    e56c:	0000e369 	.word	0x0000e369
    e570:	0000e0b9 	.word	0x0000e0b9
    e574:	0000e189 	.word	0x0000e189
    e578:	0000e0e1 	.word	0x0000e0e1
    e57c:	0000f78d 	.word	0x0000f78d
    e580:	0000e10d 	.word	0x0000e10d
    e584:	0000e1d9 	.word	0x0000e1d9
    e588:	0000e42d 	.word	0x0000e42d

0000e58c <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    e58c:	b580      	push	{r7, lr}
    e58e:	b086      	sub	sp, #24
    e590:	af00      	add	r7, sp, #0
    e592:	60f8      	str	r0, [r7, #12]
    e594:	60b9      	str	r1, [r7, #8]
    e596:	607a      	str	r2, [r7, #4]
    e598:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
	while(!IsReady());
    e59a:	68f8      	ldr	r0, [r7, #12]
    e59c:	4b21      	ldr	r3, [pc, #132]	; (e624 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x98>)
    e59e:	4798      	blx	r3
    e5a0:	4603      	mov	r3, r0
    e5a2:	f083 0301 	eor.w	r3, r3, #1
    e5a6:	b2db      	uxtb	r3, r3
    e5a8:	2b00      	cmp	r3, #0
    e5aa:	d000      	beq.n	e5ae <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x22>
    e5ac:	e7f5      	b.n	e59a <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
    e5ae:	68f8      	ldr	r0, [r7, #12]
    e5b0:	4b1d      	ldr	r3, [pc, #116]	; (e628 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x9c>)
    e5b2:	4798      	blx	r3
	CE_Low_Flash();
    e5b4:	68f8      	ldr	r0, [r7, #12]
    e5b6:	4b1d      	ldr	r3, [pc, #116]	; (e62c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa0>)
    e5b8:	4798      	blx	r3
	instruction[0]=kFlashRead;
    e5ba:	68fb      	ldr	r3, [r7, #12]
    e5bc:	2203      	movs	r2, #3
    e5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    e5c2:	687b      	ldr	r3, [r7, #4]
    e5c4:	0c1b      	lsrs	r3, r3, #16
    e5c6:	b2da      	uxtb	r2, r3
    e5c8:	68fb      	ldr	r3, [r7, #12]
    e5ca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    e5ce:	687b      	ldr	r3, [r7, #4]
    e5d0:	0a1b      	lsrs	r3, r3, #8
    e5d2:	b2da      	uxtb	r2, r3
    e5d4:	68fb      	ldr	r3, [r7, #12]
    e5d6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	instruction[3]=(uint8_t)(addr&0xFF);
    e5da:	687b      	ldr	r3, [r7, #4]
    e5dc:	b2da      	uxtb	r2, r3
    e5de:	68fb      	ldr	r3, [r7, #12]
    e5e0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		
	uint32_t	r=spi.Write(instruction,4);
    e5e4:	68fb      	ldr	r3, [r7, #12]
    e5e6:	f103 0018 	add.w	r0, r3, #24
    e5ea:	68fb      	ldr	r3, [r7, #12]
    e5ec:	3348      	adds	r3, #72	; 0x48
    e5ee:	2204      	movs	r2, #4
    e5f0:	4619      	mov	r1, r3
    e5f2:	4b0f      	ldr	r3, [pc, #60]	; (e630 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
    e5f4:	4798      	blx	r3
    e5f6:	4603      	mov	r3, r0
    e5f8:	617b      	str	r3, [r7, #20]
	r=spi.Read(p,size);
    e5fa:	68fb      	ldr	r3, [r7, #12]
    e5fc:	3318      	adds	r3, #24
    e5fe:	683a      	ldr	r2, [r7, #0]
    e600:	68b9      	ldr	r1, [r7, #8]
    e602:	4618      	mov	r0, r3
    e604:	4b0b      	ldr	r3, [pc, #44]	; (e634 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
    e606:	4798      	blx	r3
    e608:	4603      	mov	r3, r0
    e60a:	617b      	str	r3, [r7, #20]
	CE_High_Flash();
    e60c:	68f8      	ldr	r0, [r7, #12]
    e60e:	4b0a      	ldr	r3, [pc, #40]	; (e638 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
    e610:	4798      	blx	r3
	flashClose();
    e612:	68f8      	ldr	r0, [r7, #12]
    e614:	4b09      	ldr	r3, [pc, #36]	; (e63c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
    e616:	4798      	blx	r3
	
	return	r;
    e618:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    e61a:	4618      	mov	r0, r3
    e61c:	3718      	adds	r7, #24
    e61e:	46bd      	mov	sp, r7
    e620:	bd80      	pop	{r7, pc}
    e622:	bf00      	nop
    e624:	0000e369 	.word	0x0000e369
    e628:	0000e0b9 	.word	0x0000e0b9
    e62c:	0000e0e1 	.word	0x0000e0e1
    e630:	0000f78d 	.word	0x0000f78d
    e634:	0000f7d1 	.word	0x0000f7d1
    e638:	0000e10d 	.word	0x0000e10d
    e63c:	0000e42d 	.word	0x0000e42d

0000e640 <_Z41__static_initialization_and_destruction_0ii>:
    e640:	b580      	push	{r7, lr}
    e642:	b082      	sub	sp, #8
    e644:	af00      	add	r7, sp, #0
    e646:	6078      	str	r0, [r7, #4]
    e648:	6039      	str	r1, [r7, #0]
    e64a:	687b      	ldr	r3, [r7, #4]
    e64c:	2b01      	cmp	r3, #1
    e64e:	d10d      	bne.n	e66c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e650:	683b      	ldr	r3, [r7, #0]
    e652:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e656:	4293      	cmp	r3, r2
    e658:	d108      	bne.n	e66c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e65a:	4906      	ldr	r1, [pc, #24]	; (e674 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e65c:	4806      	ldr	r0, [pc, #24]	; (e678 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e65e:	4b07      	ldr	r3, [pc, #28]	; (e67c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e660:	4798      	blx	r3
    e662:	4a07      	ldr	r2, [pc, #28]	; (e680 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e664:	4907      	ldr	r1, [pc, #28]	; (e684 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e666:	4804      	ldr	r0, [pc, #16]	; (e678 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e668:	4b07      	ldr	r3, [pc, #28]	; (e688 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e66a:	4798      	blx	r3
    e66c:	bf00      	nop
    e66e:	3708      	adds	r7, #8
    e670:	46bd      	mov	sp, r7
    e672:	bd80      	pop	{r7, pc}
    e674:	200010d8 	.word	0x200010d8
    e678:	20000d54 	.word	0x20000d54
    e67c:	0000e059 	.word	0x0000e059
    e680:	20000000 	.word	0x20000000
    e684:	0000e099 	.word	0x0000e099
    e688:	0000f8d5 	.word	0x0000f8d5

0000e68c <_GLOBAL__sub_I_flashLayout>:
    e68c:	b580      	push	{r7, lr}
    e68e:	af00      	add	r7, sp, #0
    e690:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e694:	2001      	movs	r0, #1
    e696:	4b01      	ldr	r3, [pc, #4]	; (e69c <_GLOBAL__sub_I_flashLayout+0x10>)
    e698:	4798      	blx	r3
    e69a:	bd80      	pop	{r7, pc}
    e69c:	0000e641 	.word	0x0000e641

0000e6a0 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    e6a0:	b480      	push	{r7}
    e6a2:	b083      	sub	sp, #12
    e6a4:	af00      	add	r7, sp, #0
    e6a6:	6078      	str	r0, [r7, #4]
    e6a8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e6aa:	687b      	ldr	r3, [r7, #4]
    e6ac:	683a      	ldr	r2, [r7, #0]
    e6ae:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    e6b0:	4a06      	ldr	r2, [pc, #24]	; (e6cc <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    e6b2:	687b      	ldr	r3, [r7, #4]
    e6b4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e6b6:	687b      	ldr	r3, [r7, #4]
    e6b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e6bc:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    e6be:	687b      	ldr	r3, [r7, #4]
    e6c0:	4618      	mov	r0, r3
    e6c2:	370c      	adds	r7, #12
    e6c4:	46bd      	mov	sp, r7
    e6c6:	bc80      	pop	{r7}
    e6c8:	4770      	bx	lr
    e6ca:	bf00      	nop
    e6cc:	20000da4 	.word	0x20000da4

0000e6d0 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    e6d0:	b480      	push	{r7}
    e6d2:	b083      	sub	sp, #12
    e6d4:	af00      	add	r7, sp, #0
    e6d6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e6d8:	687b      	ldr	r3, [r7, #4]
    e6da:	2200      	movs	r2, #0
    e6dc:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e6de:	687b      	ldr	r3, [r7, #4]
    e6e0:	4618      	mov	r0, r3
    e6e2:	370c      	adds	r7, #12
    e6e4:	46bd      	mov	sp, r7
    e6e6:	bc80      	pop	{r7}
    e6e8:	4770      	bx	lr
	...

0000e6ec <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e6ec:	b580      	push	{r7, lr}
    e6ee:	b086      	sub	sp, #24
    e6f0:	af00      	add	r7, sp, #0
    e6f2:	60f8      	str	r0, [r7, #12]
    e6f4:	60b9      	str	r1, [r7, #8]
    e6f6:	607a      	str	r2, [r7, #4]
    e6f8:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e6fa:	68f8      	ldr	r0, [r7, #12]
    e6fc:	4b0d      	ldr	r3, [pc, #52]	; (e734 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e6fe:	4798      	blx	r3
	task->interval = interval;
    e700:	68fb      	ldr	r3, [r7, #12]
    e702:	699b      	ldr	r3, [r3, #24]
    e704:	687a      	ldr	r2, [r7, #4]
    e706:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e708:	68fb      	ldr	r3, [r7, #12]
    e70a:	699b      	ldr	r3, [r3, #24]
    e70c:	68ba      	ldr	r2, [r7, #8]
    e70e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e710:	68fb      	ldr	r3, [r7, #12]
    e712:	699b      	ldr	r3, [r3, #24]
    e714:	78fa      	ldrb	r2, [r7, #3]
    e716:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e718:	68fb      	ldr	r3, [r7, #12]
    e71a:	68da      	ldr	r2, [r3, #12]
    e71c:	68fb      	ldr	r3, [r7, #12]
    e71e:	699b      	ldr	r3, [r3, #24]
    e720:	4619      	mov	r1, r3
    e722:	4610      	mov	r0, r2
    e724:	4b04      	ldr	r3, [pc, #16]	; (e738 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e726:	4798      	blx	r3
    e728:	6178      	str	r0, [r7, #20]
	
	return status;
    e72a:	697b      	ldr	r3, [r7, #20]
}
    e72c:	4618      	mov	r0, r3
    e72e:	3718      	adds	r7, #24
    e730:	46bd      	mov	sp, r7
    e732:	bd80      	pop	{r7, pc}
    e734:	0000e7b1 	.word	0x0000e7b1
    e738:	00002ded 	.word	0x00002ded

0000e73c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    e73c:	b580      	push	{r7, lr}
    e73e:	b086      	sub	sp, #24
    e740:	af00      	add	r7, sp, #0
    e742:	60f8      	str	r0, [r7, #12]
    e744:	60b9      	str	r1, [r7, #8]
    e746:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    e748:	687a      	ldr	r2, [r7, #4]
    e74a:	68b9      	ldr	r1, [r7, #8]
    e74c:	68f8      	ldr	r0, [r7, #12]
    e74e:	4b0c      	ldr	r3, [pc, #48]	; (e780 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    e750:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e752:	68fb      	ldr	r3, [r7, #12]
    e754:	68db      	ldr	r3, [r3, #12]
    e756:	681b      	ldr	r3, [r3, #0]
    e758:	699b      	ldr	r3, [r3, #24]
    e75a:	68fa      	ldr	r2, [r7, #12]
    e75c:	68d2      	ldr	r2, [r2, #12]
    e75e:	3204      	adds	r2, #4
    e760:	4610      	mov	r0, r2
    e762:	4798      	blx	r3
    e764:	4603      	mov	r3, r0
    e766:	2b00      	cmp	r3, #0
    e768:	d105      	bne.n	e776 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    e76a:	68fb      	ldr	r3, [r7, #12]
    e76c:	68db      	ldr	r3, [r3, #12]
    e76e:	4618      	mov	r0, r3
    e770:	4b04      	ldr	r3, [pc, #16]	; (e784 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    e772:	4798      	blx	r3
    e774:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    e776:	697b      	ldr	r3, [r7, #20]
}
    e778:	4618      	mov	r0, r3
    e77a:	3718      	adds	r7, #24
    e77c:	46bd      	mov	sp, r7
    e77e:	bd80      	pop	{r7, pc}
    e780:	0000e789 	.word	0x0000e789
    e784:	00002d19 	.word	0x00002d19

0000e788 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    e788:	b590      	push	{r4, r7, lr}
    e78a:	b087      	sub	sp, #28
    e78c:	af00      	add	r7, sp, #0
    e78e:	60f8      	str	r0, [r7, #12]
    e790:	60b9      	str	r1, [r7, #8]
    e792:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    e794:	2301      	movs	r3, #1
    e796:	687a      	ldr	r2, [r7, #4]
    e798:	68b9      	ldr	r1, [r7, #8]
    e79a:	68f8      	ldr	r0, [r7, #12]
    e79c:	4c03      	ldr	r4, [pc, #12]	; (e7ac <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    e79e:	47a0      	blx	r4
    e7a0:	6178      	str	r0, [r7, #20]
		return status;
    e7a2:	697b      	ldr	r3, [r7, #20]
}
    e7a4:	4618      	mov	r0, r3
    e7a6:	371c      	adds	r7, #28
    e7a8:	46bd      	mov	sp, r7
    e7aa:	bd90      	pop	{r4, r7, pc}
    e7ac:	0000e6ed 	.word	0x0000e6ed

0000e7b0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
		status=timer_start(timer_descr);
	}
	
	return status;
}
void	Timer_Class::ChooseAvailableTimerTask(void){
    e7b0:	b480      	push	{r7}
    e7b2:	b085      	sub	sp, #20
    e7b4:	af00      	add	r7, sp, #0
    e7b6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e7b8:	2300      	movs	r3, #0
    e7ba:	73fb      	strb	r3, [r7, #15]
    e7bc:	7bfb      	ldrb	r3, [r7, #15]
    e7be:	2b0f      	cmp	r3, #15
    e7c0:	dc1c      	bgt.n	e7fc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    e7c2:	7bfb      	ldrb	r3, [r7, #15]
    e7c4:	f003 030f 	and.w	r3, r3, #15
    e7c8:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    e7ca:	7bba      	ldrb	r2, [r7, #14]
    e7cc:	490f      	ldr	r1, [pc, #60]	; (e80c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    e7ce:	4613      	mov	r3, r2
    e7d0:	009b      	lsls	r3, r3, #2
    e7d2:	4413      	add	r3, r2
    e7d4:	009b      	lsls	r3, r3, #2
    e7d6:	440b      	add	r3, r1
    e7d8:	330c      	adds	r3, #12
    e7da:	681b      	ldr	r3, [r3, #0]
    e7dc:	2b00      	cmp	r3, #0
    e7de:	d109      	bne.n	e7f4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    e7e0:	7bba      	ldrb	r2, [r7, #14]
    e7e2:	4613      	mov	r3, r2
    e7e4:	009b      	lsls	r3, r3, #2
    e7e6:	4413      	add	r3, r2
    e7e8:	009b      	lsls	r3, r3, #2
    e7ea:	4a08      	ldr	r2, [pc, #32]	; (e80c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    e7ec:	441a      	add	r2, r3
    e7ee:	687b      	ldr	r3, [r7, #4]
    e7f0:	619a      	str	r2, [r3, #24]
			return;
    e7f2:	e006      	b.n	e802 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e7f4:	7bfb      	ldrb	r3, [r7, #15]
    e7f6:	3301      	adds	r3, #1
    e7f8:	73fb      	strb	r3, [r7, #15]
    e7fa:	e7df      	b.n	e7bc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    e7fc:	687b      	ldr	r3, [r7, #4]
    e7fe:	4a03      	ldr	r2, [pc, #12]	; (e80c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    e800:	619a      	str	r2, [r3, #24]

}
    e802:	3714      	adds	r7, #20
    e804:	46bd      	mov	sp, r7
    e806:	bc80      	pop	{r7}
    e808:	4770      	bx	lr
    e80a:	bf00      	nop
    e80c:	20000da8 	.word	0x20000da8

0000e810 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    e810:	b580      	push	{r7, lr}
    e812:	b082      	sub	sp, #8
    e814:	af00      	add	r7, sp, #0
    e816:	6078      	str	r0, [r7, #4]
    e818:	6039      	str	r1, [r7, #0]
    e81a:	687b      	ldr	r3, [r7, #4]
    e81c:	2b01      	cmp	r3, #1
    e81e:	d131      	bne.n	e884 <_Z41__static_initialization_and_destruction_0ii+0x74>
    e820:	683b      	ldr	r3, [r7, #0]
    e822:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e826:	4293      	cmp	r3, r2
    e828:	d12c      	bne.n	e884 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e82a:	4918      	ldr	r1, [pc, #96]	; (e88c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    e82c:	4818      	ldr	r0, [pc, #96]	; (e890 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    e82e:	4b19      	ldr	r3, [pc, #100]	; (e894 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e830:	4798      	blx	r3
    e832:	4a19      	ldr	r2, [pc, #100]	; (e898 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e834:	4919      	ldr	r1, [pc, #100]	; (e89c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e836:	4816      	ldr	r0, [pc, #88]	; (e890 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    e838:	4b19      	ldr	r3, [pc, #100]	; (e8a0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e83a:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    e83c:	4919      	ldr	r1, [pc, #100]	; (e8a4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    e83e:	481a      	ldr	r0, [pc, #104]	; (e8a8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    e840:	4b14      	ldr	r3, [pc, #80]	; (e894 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e842:	4798      	blx	r3
    e844:	4a14      	ldr	r2, [pc, #80]	; (e898 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e846:	4915      	ldr	r1, [pc, #84]	; (e89c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e848:	4817      	ldr	r0, [pc, #92]	; (e8a8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    e84a:	4b15      	ldr	r3, [pc, #84]	; (e8a0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e84c:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    e84e:	4917      	ldr	r1, [pc, #92]	; (e8ac <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    e850:	4817      	ldr	r0, [pc, #92]	; (e8b0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    e852:	4b10      	ldr	r3, [pc, #64]	; (e894 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e854:	4798      	blx	r3
    e856:	4a10      	ldr	r2, [pc, #64]	; (e898 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e858:	4910      	ldr	r1, [pc, #64]	; (e89c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e85a:	4815      	ldr	r0, [pc, #84]	; (e8b0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    e85c:	4b10      	ldr	r3, [pc, #64]	; (e8a0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e85e:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    e860:	4914      	ldr	r1, [pc, #80]	; (e8b4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    e862:	4815      	ldr	r0, [pc, #84]	; (e8b8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    e864:	4b0b      	ldr	r3, [pc, #44]	; (e894 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e866:	4798      	blx	r3
    e868:	4a0b      	ldr	r2, [pc, #44]	; (e898 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e86a:	490c      	ldr	r1, [pc, #48]	; (e89c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e86c:	4812      	ldr	r0, [pc, #72]	; (e8b8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    e86e:	4b0c      	ldr	r3, [pc, #48]	; (e8a0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e870:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    e872:	4912      	ldr	r1, [pc, #72]	; (e8bc <_Z41__static_initialization_and_destruction_0ii+0xac>)
    e874:	4812      	ldr	r0, [pc, #72]	; (e8c0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e876:	4b07      	ldr	r3, [pc, #28]	; (e894 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e878:	4798      	blx	r3
    e87a:	4a07      	ldr	r2, [pc, #28]	; (e898 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e87c:	4907      	ldr	r1, [pc, #28]	; (e89c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e87e:	4810      	ldr	r0, [pc, #64]	; (e8c0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e880:	4b07      	ldr	r3, [pc, #28]	; (e8a0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e882:	4798      	blx	r3
    e884:	bf00      	nop
    e886:	3708      	adds	r7, #8
    e888:	46bd      	mov	sp, r7
    e88a:	bd80      	pop	{r7, pc}
    e88c:	200010b8 	.word	0x200010b8
    e890:	20000eec 	.word	0x20000eec
    e894:	0000e6a1 	.word	0x0000e6a1
    e898:	20000000 	.word	0x20000000
    e89c:	0000e6d1 	.word	0x0000e6d1
    e8a0:	0000f8d5 	.word	0x0000f8d5
    e8a4:	2000112c 	.word	0x2000112c
    e8a8:	20000f08 	.word	0x20000f08
    e8ac:	20001230 	.word	0x20001230
    e8b0:	20000f24 	.word	0x20000f24
    e8b4:	2000114c 	.word	0x2000114c
    e8b8:	20000f40 	.word	0x20000f40
    e8bc:	200011b0 	.word	0x200011b0
    e8c0:	20000f5c 	.word	0x20000f5c

0000e8c4 <_GLOBAL__sub_I_ptrTimerClass>:
    e8c4:	b580      	push	{r7, lr}
    e8c6:	af00      	add	r7, sp, #0
    e8c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e8cc:	2001      	movs	r0, #1
    e8ce:	4b01      	ldr	r3, [pc, #4]	; (e8d4 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    e8d0:	4798      	blx	r3
    e8d2:	bd80      	pop	{r7, pc}
    e8d4:	0000e811 	.word	0x0000e811

0000e8d8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    e8d8:	b480      	push	{r7}
    e8da:	b083      	sub	sp, #12
    e8dc:	af00      	add	r7, sp, #0
    e8de:	6078      	str	r0, [r7, #4]
    e8e0:	4a05      	ldr	r2, [pc, #20]	; (e8f8 <_ZN5PrintC1Ev+0x20>)
    e8e2:	687b      	ldr	r3, [r7, #4]
    e8e4:	601a      	str	r2, [r3, #0]
    e8e6:	687b      	ldr	r3, [r7, #4]
    e8e8:	2200      	movs	r2, #0
    e8ea:	605a      	str	r2, [r3, #4]
    e8ec:	687b      	ldr	r3, [r7, #4]
    e8ee:	4618      	mov	r0, r3
    e8f0:	370c      	adds	r7, #12
    e8f2:	46bd      	mov	sp, r7
    e8f4:	bc80      	pop	{r7}
    e8f6:	4770      	bx	lr
    e8f8:	00010250 	.word	0x00010250

0000e8fc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    e8fc:	b480      	push	{r7}
    e8fe:	b083      	sub	sp, #12
    e900:	af00      	add	r7, sp, #0
    e902:	6078      	str	r0, [r7, #4]
    e904:	2300      	movs	r3, #0
    e906:	4618      	mov	r0, r3
    e908:	370c      	adds	r7, #12
    e90a:	46bd      	mov	sp, r7
    e90c:	bc80      	pop	{r7}
    e90e:	4770      	bx	lr

0000e910 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    e910:	b480      	push	{r7}
    e912:	b083      	sub	sp, #12
    e914:	af00      	add	r7, sp, #0
    e916:	6078      	str	r0, [r7, #4]
    e918:	bf00      	nop
    e91a:	370c      	adds	r7, #12
    e91c:	46bd      	mov	sp, r7
    e91e:	bc80      	pop	{r7}
    e920:	4770      	bx	lr
	...

0000e924 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    e924:	b580      	push	{r7, lr}
    e926:	b082      	sub	sp, #8
    e928:	af00      	add	r7, sp, #0
    e92a:	6078      	str	r0, [r7, #4]
    e92c:	687b      	ldr	r3, [r7, #4]
    e92e:	4618      	mov	r0, r3
    e930:	4b06      	ldr	r3, [pc, #24]	; (e94c <_ZN6StreamC1Ev+0x28>)
    e932:	4798      	blx	r3
    e934:	4a06      	ldr	r2, [pc, #24]	; (e950 <_ZN6StreamC1Ev+0x2c>)
    e936:	687b      	ldr	r3, [r7, #4]
    e938:	601a      	str	r2, [r3, #0]
    e93a:	687b      	ldr	r3, [r7, #4]
    e93c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e940:	609a      	str	r2, [r3, #8]
    e942:	687b      	ldr	r3, [r7, #4]
    e944:	4618      	mov	r0, r3
    e946:	3708      	adds	r7, #8
    e948:	46bd      	mov	sp, r7
    e94a:	bd80      	pop	{r7, pc}
    e94c:	0000e8d9 	.word	0x0000e8d9
    e950:	00010214 	.word	0x00010214

0000e954 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    e954:	b480      	push	{r7}
    e956:	b083      	sub	sp, #12
    e958:	af00      	add	r7, sp, #0
    e95a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    e95c:	4b06      	ldr	r3, [pc, #24]	; (e978 <_ZL10USBTimeoutPK10timer_task+0x24>)
    e95e:	681b      	ldr	r3, [r3, #0]
    e960:	2201      	movs	r2, #1
    e962:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    e964:	4b04      	ldr	r3, [pc, #16]	; (e978 <_ZL10USBTimeoutPK10timer_task+0x24>)
    e966:	681b      	ldr	r3, [r3, #0]
    e968:	2200      	movs	r2, #0
    e96a:	741a      	strb	r2, [r3, #16]
	
}
    e96c:	bf00      	nop
    e96e:	370c      	adds	r7, #12
    e970:	46bd      	mov	sp, r7
    e972:	bc80      	pop	{r7}
    e974:	4770      	bx	lr
    e976:	bf00      	nop
    e978:	20000f78 	.word	0x20000f78

0000e97c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e97c:	b480      	push	{r7}
    e97e:	b083      	sub	sp, #12
    e980:	af00      	add	r7, sp, #0
    e982:	4603      	mov	r3, r0
    e984:	603a      	str	r2, [r7, #0]
    e986:	71fb      	strb	r3, [r7, #7]
    e988:	460b      	mov	r3, r1
    e98a:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    e98c:	4b08      	ldr	r3, [pc, #32]	; (e9b0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e98e:	681b      	ldr	r3, [r3, #0]
    e990:	2201      	movs	r2, #1
    e992:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    e994:	4b06      	ldr	r3, [pc, #24]	; (e9b0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e996:	681b      	ldr	r3, [r3, #0]
    e998:	2201      	movs	r2, #1
    e99a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e99c:	4b04      	ldr	r3, [pc, #16]	; (e9b0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e99e:	681b      	ldr	r3, [r3, #0]
    e9a0:	2201      	movs	r2, #1
    e9a2:	741a      	strb	r2, [r3, #16]


	return false;
    e9a4:	2300      	movs	r3, #0
}
    e9a6:	4618      	mov	r0, r3
    e9a8:	370c      	adds	r7, #12
    e9aa:	46bd      	mov	sp, r7
    e9ac:	bc80      	pop	{r7}
    e9ae:	4770      	bx	lr
    e9b0:	20000f78 	.word	0x20000f78

0000e9b4 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e9b4:	b480      	push	{r7}
    e9b6:	b083      	sub	sp, #12
    e9b8:	af00      	add	r7, sp, #0
    e9ba:	4603      	mov	r3, r0
    e9bc:	603a      	str	r2, [r7, #0]
    e9be:	71fb      	strb	r3, [r7, #7]
    e9c0:	460b      	mov	r3, r1
    e9c2:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    e9c4:	4b08      	ldr	r3, [pc, #32]	; (e9e8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e9c6:	681b      	ldr	r3, [r3, #0]
    e9c8:	2201      	movs	r2, #1
    e9ca:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    e9cc:	4b06      	ldr	r3, [pc, #24]	; (e9e8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e9ce:	681b      	ldr	r3, [r3, #0]
    e9d0:	2201      	movs	r2, #1
    e9d2:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e9d4:	4b04      	ldr	r3, [pc, #16]	; (e9e8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e9d6:	681b      	ldr	r3, [r3, #0]
    e9d8:	2201      	movs	r2, #1
    e9da:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    e9dc:	2300      	movs	r3, #0
}
    e9de:	4618      	mov	r0, r3
    e9e0:	370c      	adds	r7, #12
    e9e2:	46bd      	mov	sp, r7
    e9e4:	bc80      	pop	{r7}
    e9e6:	4770      	bx	lr
    e9e8:	20000f78 	.word	0x20000f78

0000e9ec <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    e9ec:	b580      	push	{r7, lr}
    e9ee:	b082      	sub	sp, #8
    e9f0:	af00      	add	r7, sp, #0
    e9f2:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    e9f4:	793b      	ldrb	r3, [r7, #4]
    e9f6:	f003 0301 	and.w	r3, r3, #1
    e9fa:	b2db      	uxtb	r3, r3
    e9fc:	2b00      	cmp	r3, #0
    e9fe:	d013      	beq.n	ea28 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    ea00:	490c      	ldr	r1, [pc, #48]	; (ea34 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    ea02:	2000      	movs	r0, #0
    ea04:	4b0c      	ldr	r3, [pc, #48]	; (ea38 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ea06:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    ea08:	490c      	ldr	r1, [pc, #48]	; (ea3c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    ea0a:	2001      	movs	r0, #1
    ea0c:	4b0a      	ldr	r3, [pc, #40]	; (ea38 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ea0e:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    ea10:	4b0b      	ldr	r3, [pc, #44]	; (ea40 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ea12:	681b      	ldr	r3, [r3, #0]
    ea14:	2201      	movs	r2, #1
    ea16:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    ea18:	4b09      	ldr	r3, [pc, #36]	; (ea40 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ea1a:	681b      	ldr	r3, [r3, #0]
    ea1c:	2201      	movs	r2, #1
    ea1e:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    ea20:	4b07      	ldr	r3, [pc, #28]	; (ea40 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ea22:	681b      	ldr	r3, [r3, #0]
    ea24:	2201      	movs	r2, #1
    ea26:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    ea28:	2300      	movs	r3, #0
}
    ea2a:	4618      	mov	r0, r3
    ea2c:	3708      	adds	r7, #8
    ea2e:	46bd      	mov	sp, r7
    ea30:	bd80      	pop	{r7, pc}
    ea32:	bf00      	nop
    ea34:	0000e97d 	.word	0x0000e97d
    ea38:	0000ca99 	.word	0x0000ca99
    ea3c:	0000e9b5 	.word	0x0000e9b5
    ea40:	20000f78 	.word	0x20000f78

0000ea44 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    ea44:	b580      	push	{r7, lr}
    ea46:	b082      	sub	sp, #8
    ea48:	af00      	add	r7, sp, #0
    ea4a:	6078      	str	r0, [r7, #4]
    ea4c:	687b      	ldr	r3, [r7, #4]
    ea4e:	4618      	mov	r0, r3
    ea50:	4b0a      	ldr	r3, [pc, #40]	; (ea7c <_ZN9CDC_ClassC1Ev+0x38>)
    ea52:	4798      	blx	r3
    ea54:	687b      	ldr	r3, [r7, #4]
    ea56:	3310      	adds	r3, #16
    ea58:	4618      	mov	r0, r3
    ea5a:	4b09      	ldr	r3, [pc, #36]	; (ea80 <_ZN9CDC_ClassC1Ev+0x3c>)
    ea5c:	4798      	blx	r3
    ea5e:	4a09      	ldr	r2, [pc, #36]	; (ea84 <_ZN9CDC_ClassC1Ev+0x40>)
    ea60:	687b      	ldr	r3, [r7, #4]
    ea62:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    ea64:	687b      	ldr	r3, [r7, #4]
    ea66:	f04f 32ff 	mov.w	r2, #4294967295
    ea6a:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    ea6c:	4a06      	ldr	r2, [pc, #24]	; (ea88 <_ZN9CDC_ClassC1Ev+0x44>)
    ea6e:	687b      	ldr	r3, [r7, #4]
    ea70:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    ea72:	687b      	ldr	r3, [r7, #4]
    ea74:	4618      	mov	r0, r3
    ea76:	3708      	adds	r7, #8
    ea78:	46bd      	mov	sp, r7
    ea7a:	bd80      	pop	{r7, pc}
    ea7c:	0000e925 	.word	0x0000e925
    ea80:	0000f2a5 	.word	0x0000f2a5
    ea84:	000101e4 	.word	0x000101e4
    ea88:	20000f78 	.word	0x20000f78

0000ea8c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    ea8c:	b580      	push	{r7, lr}
    ea8e:	b082      	sub	sp, #8
    ea90:	af00      	add	r7, sp, #0
    ea92:	6078      	str	r0, [r7, #4]
    ea94:	4a06      	ldr	r2, [pc, #24]	; (eab0 <_ZN9CDC_ClassD1Ev+0x24>)
    ea96:	687b      	ldr	r3, [r7, #4]
    ea98:	601a      	str	r2, [r3, #0]
    ea9a:	687b      	ldr	r3, [r7, #4]
    ea9c:	3310      	adds	r3, #16
    ea9e:	4618      	mov	r0, r3
    eaa0:	4b04      	ldr	r3, [pc, #16]	; (eab4 <_ZN9CDC_ClassD1Ev+0x28>)
    eaa2:	4798      	blx	r3
{
} //~CDC_Class
    eaa4:	687b      	ldr	r3, [r7, #4]
    eaa6:	4618      	mov	r0, r3
    eaa8:	3708      	adds	r7, #8
    eaaa:	46bd      	mov	sp, r7
    eaac:	bd80      	pop	{r7, pc}
    eaae:	bf00      	nop
    eab0:	000101e4 	.word	0x000101e4
    eab4:	0000f2c5 	.word	0x0000f2c5

0000eab8 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    eab8:	b580      	push	{r7, lr}
    eaba:	b082      	sub	sp, #8
    eabc:	af00      	add	r7, sp, #0
    eabe:	6078      	str	r0, [r7, #4]
	
	OnInit();
    eac0:	687b      	ldr	r3, [r7, #4]
    eac2:	3310      	adds	r3, #16
    eac4:	4618      	mov	r0, r3
    eac6:	4b09      	ldr	r3, [pc, #36]	; (eaec <_ZN9CDC_Class4InitEv+0x34>)
    eac8:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    eaca:	4909      	ldr	r1, [pc, #36]	; (eaf0 <_ZN9CDC_Class4InitEv+0x38>)
    eacc:	2003      	movs	r0, #3
    eace:	4b09      	ldr	r3, [pc, #36]	; (eaf4 <_ZN9CDC_Class4InitEv+0x3c>)
    ead0:	4798      	blx	r3
	delay_ms(100);
    ead2:	2064      	movs	r0, #100	; 0x64
    ead4:	4b08      	ldr	r3, [pc, #32]	; (eaf8 <_ZN9CDC_Class4InitEv+0x40>)
    ead6:	4798      	blx	r3
		
	if (connected)
    ead8:	687b      	ldr	r3, [r7, #4]
    eada:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    eadc:	2064      	movs	r0, #100	; 0x64
    eade:	4b06      	ldr	r3, [pc, #24]	; (eaf8 <_ZN9CDC_Class4InitEv+0x40>)
    eae0:	4798      	blx	r3

	

}
    eae2:	bf00      	nop
    eae4:	3708      	adds	r7, #8
    eae6:	46bd      	mov	sp, r7
    eae8:	bd80      	pop	{r7, pc}
    eaea:	bf00      	nop
    eaec:	0000f2d9 	.word	0x0000f2d9
    eaf0:	0000e9ed 	.word	0x0000e9ed
    eaf4:	0000ca99 	.word	0x0000ca99
    eaf8:	00002251 	.word	0x00002251

0000eafc <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    eafc:	b580      	push	{r7, lr}
    eafe:	b082      	sub	sp, #8
    eb00:	af00      	add	r7, sp, #0
    eb02:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    eb04:	4b03      	ldr	r3, [pc, #12]	; (eb14 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    eb06:	4798      	blx	r3
    eb08:	4603      	mov	r3, r0
	
}
    eb0a:	4618      	mov	r0, r3
    eb0c:	3708      	adds	r7, #8
    eb0e:	46bd      	mov	sp, r7
    eb10:	bd80      	pop	{r7, pc}
    eb12:	bf00      	nop
    eb14:	0000cb11 	.word	0x0000cb11

0000eb18 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    eb18:	b580      	push	{r7, lr}
    eb1a:	b084      	sub	sp, #16
    eb1c:	af00      	add	r7, sp, #0
    eb1e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    eb20:	687b      	ldr	r3, [r7, #4]
    eb22:	699b      	ldr	r3, [r3, #24]
    eb24:	f1b3 3fff 	cmp.w	r3, #4294967295
    eb28:	bf14      	ite	ne
    eb2a:	2301      	movne	r3, #1
    eb2c:	2300      	moveq	r3, #0
    eb2e:	b2db      	uxtb	r3, r3
    eb30:	2b00      	cmp	r3, #0
    eb32:	d002      	beq.n	eb3a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    eb34:	687b      	ldr	r3, [r7, #4]
    eb36:	699b      	ldr	r3, [r3, #24]
    eb38:	e011      	b.n	eb5e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    eb3a:	687b      	ldr	r3, [r7, #4]
    eb3c:	681b      	ldr	r3, [r3, #0]
    eb3e:	331c      	adds	r3, #28
    eb40:	681b      	ldr	r3, [r3, #0]
    eb42:	f107 010f 	add.w	r1, r7, #15
    eb46:	2201      	movs	r2, #1
    eb48:	6878      	ldr	r0, [r7, #4]
    eb4a:	4798      	blx	r3
    eb4c:	4602      	mov	r2, r0
    eb4e:	687b      	ldr	r3, [r7, #4]
    eb50:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    eb52:	7bfb      	ldrb	r3, [r7, #15]
    eb54:	461a      	mov	r2, r3
    eb56:	687b      	ldr	r3, [r7, #4]
    eb58:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    eb5a:	687b      	ldr	r3, [r7, #4]
    eb5c:	699b      	ldr	r3, [r3, #24]
}
    eb5e:	4618      	mov	r0, r3
    eb60:	3710      	adds	r7, #16
    eb62:	46bd      	mov	sp, r7
    eb64:	bd80      	pop	{r7, pc}
	...

0000eb68 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    eb68:	b580      	push	{r7, lr}
    eb6a:	b086      	sub	sp, #24
    eb6c:	af00      	add	r7, sp, #0
    eb6e:	60f8      	str	r0, [r7, #12]
    eb70:	60b9      	str	r1, [r7, #8]
    eb72:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    eb74:	68fb      	ldr	r3, [r7, #12]
    eb76:	7c1b      	ldrb	r3, [r3, #16]
    eb78:	b2db      	uxtb	r3, r3
    eb7a:	2b00      	cmp	r3, #0
    eb7c:	d02e      	beq.n	ebdc <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    eb7e:	687a      	ldr	r2, [r7, #4]
    eb80:	4613      	mov	r3, r2
    eb82:	009b      	lsls	r3, r3, #2
    eb84:	4413      	add	r3, r2
    eb86:	005b      	lsls	r3, r3, #1
    eb88:	461a      	mov	r2, r3
    eb8a:	4918      	ldr	r1, [pc, #96]	; (ebec <_ZN9CDC_Class8readDataEPvl+0x84>)
    eb8c:	4818      	ldr	r0, [pc, #96]	; (ebf0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    eb8e:	4b19      	ldr	r3, [pc, #100]	; (ebf4 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    eb90:	4798      	blx	r3
		rxReady=false;
    eb92:	68fb      	ldr	r3, [r7, #12]
    eb94:	2200      	movs	r2, #0
    eb96:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    eb98:	687b      	ldr	r3, [r7, #4]
    eb9a:	4619      	mov	r1, r3
    eb9c:	68b8      	ldr	r0, [r7, #8]
    eb9e:	4b16      	ldr	r3, [pc, #88]	; (ebf8 <_ZN9CDC_Class8readDataEPvl+0x90>)
    eba0:	4798      	blx	r3
    eba2:	4603      	mov	r3, r0
    eba4:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    eba6:	68fb      	ldr	r3, [r7, #12]
    eba8:	7d5b      	ldrb	r3, [r3, #21]
    ebaa:	b2db      	uxtb	r3, r3
    ebac:	f083 0301 	eor.w	r3, r3, #1
    ebb0:	b2db      	uxtb	r3, r3
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d006      	beq.n	ebc4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    ebb6:	68fb      	ldr	r3, [r7, #12]
    ebb8:	7c1b      	ldrb	r3, [r3, #16]
    ebba:	b2db      	uxtb	r3, r3
    ebbc:	2b00      	cmp	r3, #0
    ebbe:	d001      	beq.n	ebc4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    ebc0:	2301      	movs	r3, #1
    ebc2:	e000      	b.n	ebc6 <_ZN9CDC_Class8readDataEPvl+0x5e>
    ebc4:	2300      	movs	r3, #0
    ebc6:	2b00      	cmp	r3, #0
    ebc8:	d000      	beq.n	ebcc <_ZN9CDC_Class8readDataEPvl+0x64>
    ebca:	e7ec      	b.n	eba6 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    ebcc:	4808      	ldr	r0, [pc, #32]	; (ebf0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ebce:	4b0b      	ldr	r3, [pc, #44]	; (ebfc <_ZN9CDC_Class8readDataEPvl+0x94>)
    ebd0:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ebd2:	4906      	ldr	r1, [pc, #24]	; (ebec <_ZN9CDC_Class8readDataEPvl+0x84>)
    ebd4:	4806      	ldr	r0, [pc, #24]	; (ebf0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ebd6:	4b0a      	ldr	r3, [pc, #40]	; (ec00 <_ZN9CDC_Class8readDataEPvl+0x98>)
    ebd8:	4798      	blx	r3
    ebda:	e001      	b.n	ebe0 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    ebdc:	2300      	movs	r3, #0
    ebde:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    ebe0:	7dfb      	ldrb	r3, [r7, #23]
}
    ebe2:	4618      	mov	r0, r3
    ebe4:	3718      	adds	r7, #24
    ebe6:	46bd      	mov	sp, r7
    ebe8:	bd80      	pop	{r7, pc}
    ebea:	bf00      	nop
    ebec:	0000e955 	.word	0x0000e955
    ebf0:	20001034 	.word	0x20001034
    ebf4:	0000f545 	.word	0x0000f545
    ebf8:	0000c9ed 	.word	0x0000c9ed
    ebfc:	0000f465 	.word	0x0000f465
    ec00:	0000f57d 	.word	0x0000f57d

0000ec04 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    ec04:	b580      	push	{r7, lr}
    ec06:	b086      	sub	sp, #24
    ec08:	af00      	add	r7, sp, #0
    ec0a:	60f8      	str	r0, [r7, #12]
    ec0c:	60b9      	str	r1, [r7, #8]
    ec0e:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    ec10:	68fb      	ldr	r3, [r7, #12]
    ec12:	2200      	movs	r2, #0
    ec14:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    ec16:	687b      	ldr	r3, [r7, #4]
    ec18:	4619      	mov	r1, r3
    ec1a:	68b8      	ldr	r0, [r7, #8]
    ec1c:	4b04      	ldr	r3, [pc, #16]	; (ec30 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    ec1e:	4798      	blx	r3
    ec20:	4603      	mov	r3, r0
    ec22:	617b      	str	r3, [r7, #20]
	return r;
    ec24:	697b      	ldr	r3, [r7, #20]
}
    ec26:	4618      	mov	r0, r3
    ec28:	3718      	adds	r7, #24
    ec2a:	46bd      	mov	sp, r7
    ec2c:	bd80      	pop	{r7, pc}
    ec2e:	bf00      	nop
    ec30:	0000c9ed 	.word	0x0000c9ed

0000ec34 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    ec34:	b580      	push	{r7, lr}
    ec36:	b084      	sub	sp, #16
    ec38:	af00      	add	r7, sp, #0
    ec3a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    ec3c:	687b      	ldr	r3, [r7, #4]
    ec3e:	2200      	movs	r2, #0
    ec40:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    ec42:	f107 030f 	add.w	r3, r7, #15
    ec46:	2101      	movs	r1, #1
    ec48:	4618      	mov	r0, r3
    ec4a:	4b08      	ldr	r3, [pc, #32]	; (ec6c <_ZN9CDC_Class4readEv+0x38>)
    ec4c:	4798      	blx	r3
	while(!rxReady);
    ec4e:	687b      	ldr	r3, [r7, #4]
    ec50:	7d5b      	ldrb	r3, [r3, #21]
    ec52:	b2db      	uxtb	r3, r3
    ec54:	f083 0301 	eor.w	r3, r3, #1
    ec58:	b2db      	uxtb	r3, r3
    ec5a:	2b00      	cmp	r3, #0
    ec5c:	d000      	beq.n	ec60 <_ZN9CDC_Class4readEv+0x2c>
    ec5e:	e7f6      	b.n	ec4e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    ec60:	7bfb      	ldrb	r3, [r7, #15]
}
    ec62:	4618      	mov	r0, r3
    ec64:	3710      	adds	r7, #16
    ec66:	46bd      	mov	sp, r7
    ec68:	bd80      	pop	{r7, pc}
    ec6a:	bf00      	nop
    ec6c:	0000c9ed 	.word	0x0000c9ed

0000ec70 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    ec70:	b580      	push	{r7, lr}
    ec72:	b082      	sub	sp, #8
    ec74:	af00      	add	r7, sp, #0
    ec76:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    ec78:	687b      	ldr	r3, [r7, #4]
    ec7a:	331c      	adds	r3, #28
    ec7c:	2140      	movs	r1, #64	; 0x40
    ec7e:	4618      	mov	r0, r3
    ec80:	4b02      	ldr	r3, [pc, #8]	; (ec8c <_ZN9CDC_Class5flushEv+0x1c>)
    ec82:	4798      	blx	r3
}
    ec84:	bf00      	nop
    ec86:	3708      	adds	r7, #8
    ec88:	46bd      	mov	sp, r7
    ec8a:	bd80      	pop	{r7, pc}
    ec8c:	0000ca31 	.word	0x0000ca31

0000ec90 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    ec90:	b580      	push	{r7, lr}
    ec92:	b082      	sub	sp, #8
    ec94:	af00      	add	r7, sp, #0
    ec96:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    ec98:	4b02      	ldr	r3, [pc, #8]	; (eca4 <_ZN9CDC_Class5clearEv+0x14>)
    ec9a:	4798      	blx	r3
}
    ec9c:	bf00      	nop
    ec9e:	3708      	adds	r7, #8
    eca0:	46bd      	mov	sp, r7
    eca2:	bd80      	pop	{r7, pc}
    eca4:	0000ca75 	.word	0x0000ca75

0000eca8 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    eca8:	b580      	push	{r7, lr}
    ecaa:	b082      	sub	sp, #8
    ecac:	af00      	add	r7, sp, #0
    ecae:	6078      	str	r0, [r7, #4]
    ecb0:	460b      	mov	r3, r1
    ecb2:	70fb      	strb	r3, [r7, #3]
	if (connected){
    ecb4:	687b      	ldr	r3, [r7, #4]
    ecb6:	7c1b      	ldrb	r3, [r3, #16]
    ecb8:	b2db      	uxtb	r3, r3
    ecba:	2b00      	cmp	r3, #0
    ecbc:	d012      	beq.n	ece4 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    ecbe:	687b      	ldr	r3, [r7, #4]
    ecc0:	7d1b      	ldrb	r3, [r3, #20]
    ecc2:	b2db      	uxtb	r3, r3
    ecc4:	f083 0301 	eor.w	r3, r3, #1
    ecc8:	b2db      	uxtb	r3, r3
    ecca:	2b00      	cmp	r3, #0
    eccc:	d000      	beq.n	ecd0 <_ZN9CDC_Class5writeEh+0x28>
    ecce:	e7f6      	b.n	ecbe <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    ecd0:	687b      	ldr	r3, [r7, #4]
    ecd2:	681b      	ldr	r3, [r3, #0]
    ecd4:	3324      	adds	r3, #36	; 0x24
    ecd6:	681b      	ldr	r3, [r3, #0]
    ecd8:	1cf9      	adds	r1, r7, #3
    ecda:	2201      	movs	r2, #1
    ecdc:	6878      	ldr	r0, [r7, #4]
    ecde:	4798      	blx	r3
    ece0:	4603      	mov	r3, r0
    ece2:	e000      	b.n	ece6 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    ece4:	2300      	movs	r3, #0
	}
		
}
    ece6:	4618      	mov	r0, r3
    ece8:	3708      	adds	r7, #8
    ecea:	46bd      	mov	sp, r7
    ecec:	bd80      	pop	{r7, pc}
	...

0000ecf0 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    ecf0:	b580      	push	{r7, lr}
    ecf2:	b086      	sub	sp, #24
    ecf4:	af00      	add	r7, sp, #0
    ecf6:	60f8      	str	r0, [r7, #12]
    ecf8:	60b9      	str	r1, [r7, #8]
    ecfa:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    ecfc:	68fb      	ldr	r3, [r7, #12]
    ecfe:	7c1b      	ldrb	r3, [r3, #16]
    ed00:	b2db      	uxtb	r3, r3
    ed02:	2b00      	cmp	r3, #0
    ed04:	d02f      	beq.n	ed66 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    ed06:	687a      	ldr	r2, [r7, #4]
    ed08:	4613      	mov	r3, r2
    ed0a:	009b      	lsls	r3, r3, #2
    ed0c:	4413      	add	r3, r2
    ed0e:	005b      	lsls	r3, r3, #1
    ed10:	461a      	mov	r2, r3
    ed12:	4917      	ldr	r1, [pc, #92]	; (ed70 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ed14:	4817      	ldr	r0, [pc, #92]	; (ed74 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ed16:	4b18      	ldr	r3, [pc, #96]	; (ed78 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    ed18:	4798      	blx	r3
		txReady=false;
    ed1a:	68fb      	ldr	r3, [r7, #12]
    ed1c:	2200      	movs	r2, #0
    ed1e:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    ed20:	687b      	ldr	r3, [r7, #4]
    ed22:	4619      	mov	r1, r3
    ed24:	68b8      	ldr	r0, [r7, #8]
    ed26:	4b15      	ldr	r3, [pc, #84]	; (ed7c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    ed28:	4798      	blx	r3
    ed2a:	4603      	mov	r3, r0
    ed2c:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    ed2e:	68fb      	ldr	r3, [r7, #12]
    ed30:	7d1b      	ldrb	r3, [r3, #20]
    ed32:	b2db      	uxtb	r3, r3
    ed34:	f083 0301 	eor.w	r3, r3, #1
    ed38:	b2db      	uxtb	r3, r3
    ed3a:	2b00      	cmp	r3, #0
    ed3c:	d006      	beq.n	ed4c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    ed3e:	68fb      	ldr	r3, [r7, #12]
    ed40:	7c1b      	ldrb	r3, [r3, #16]
    ed42:	b2db      	uxtb	r3, r3
    ed44:	2b00      	cmp	r3, #0
    ed46:	d001      	beq.n	ed4c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    ed48:	2301      	movs	r3, #1
    ed4a:	e000      	b.n	ed4e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    ed4c:	2300      	movs	r3, #0
    ed4e:	2b00      	cmp	r3, #0
    ed50:	d000      	beq.n	ed54 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    ed52:	e7ec      	b.n	ed2e <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    ed54:	4807      	ldr	r0, [pc, #28]	; (ed74 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ed56:	4b0a      	ldr	r3, [pc, #40]	; (ed80 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    ed58:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ed5a:	4905      	ldr	r1, [pc, #20]	; (ed70 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ed5c:	4805      	ldr	r0, [pc, #20]	; (ed74 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ed5e:	4b09      	ldr	r3, [pc, #36]	; (ed84 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    ed60:	4798      	blx	r3
		return r;
    ed62:	697b      	ldr	r3, [r7, #20]
    ed64:	e000      	b.n	ed68 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    ed66:	2300      	movs	r3, #0
	}
	

}
    ed68:	4618      	mov	r0, r3
    ed6a:	3718      	adds	r7, #24
    ed6c:	46bd      	mov	sp, r7
    ed6e:	bd80      	pop	{r7, pc}
    ed70:	0000e955 	.word	0x0000e955
    ed74:	20001034 	.word	0x20001034
    ed78:	0000f545 	.word	0x0000f545
    ed7c:	0000ca31 	.word	0x0000ca31
    ed80:	0000f465 	.word	0x0000f465
    ed84:	0000f57d 	.word	0x0000f57d

0000ed88 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    ed88:	b580      	push	{r7, lr}
    ed8a:	b086      	sub	sp, #24
    ed8c:	af00      	add	r7, sp, #0
    ed8e:	60f8      	str	r0, [r7, #12]
    ed90:	60b9      	str	r1, [r7, #8]
    ed92:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    ed94:	68fb      	ldr	r3, [r7, #12]
    ed96:	2200      	movs	r2, #0
    ed98:	751a      	strb	r2, [r3, #20]

 	if (connected){
    ed9a:	68fb      	ldr	r3, [r7, #12]
    ed9c:	7c1b      	ldrb	r3, [r3, #16]
    ed9e:	b2db      	uxtb	r3, r3
    eda0:	2b00      	cmp	r3, #0
    eda2:	d02a      	beq.n	edfa <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    eda4:	687a      	ldr	r2, [r7, #4]
    eda6:	4613      	mov	r3, r2
    eda8:	009b      	lsls	r3, r3, #2
    edaa:	4413      	add	r3, r2
    edac:	005b      	lsls	r3, r3, #1
    edae:	461a      	mov	r2, r3
    edb0:	4915      	ldr	r1, [pc, #84]	; (ee08 <_ZN9CDC_Class5writeEPKhj+0x80>)
    edb2:	4816      	ldr	r0, [pc, #88]	; (ee0c <_ZN9CDC_Class5writeEPKhj+0x84>)
    edb4:	4b16      	ldr	r3, [pc, #88]	; (ee10 <_ZN9CDC_Class5writeEPKhj+0x88>)
    edb6:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    edb8:	6879      	ldr	r1, [r7, #4]
    edba:	68b8      	ldr	r0, [r7, #8]
    edbc:	4b15      	ldr	r3, [pc, #84]	; (ee14 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    edbe:	4798      	blx	r3
    edc0:	4603      	mov	r3, r0
    edc2:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    edc4:	68fb      	ldr	r3, [r7, #12]
    edc6:	7d1b      	ldrb	r3, [r3, #20]
    edc8:	b2db      	uxtb	r3, r3
    edca:	f083 0301 	eor.w	r3, r3, #1
    edce:	b2db      	uxtb	r3, r3
    edd0:	2b00      	cmp	r3, #0
    edd2:	d006      	beq.n	ede2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    edd4:	68fb      	ldr	r3, [r7, #12]
    edd6:	7c1b      	ldrb	r3, [r3, #16]
    edd8:	b2db      	uxtb	r3, r3
    edda:	2b00      	cmp	r3, #0
    eddc:	d001      	beq.n	ede2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    edde:	2301      	movs	r3, #1
    ede0:	e000      	b.n	ede4 <_ZN9CDC_Class5writeEPKhj+0x5c>
    ede2:	2300      	movs	r3, #0
    ede4:	2b00      	cmp	r3, #0
    ede6:	d000      	beq.n	edea <_ZN9CDC_Class5writeEPKhj+0x62>
    ede8:	e7ec      	b.n	edc4 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    edea:	4808      	ldr	r0, [pc, #32]	; (ee0c <_ZN9CDC_Class5writeEPKhj+0x84>)
    edec:	4b0a      	ldr	r3, [pc, #40]	; (ee18 <_ZN9CDC_Class5writeEPKhj+0x90>)
    edee:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    edf0:	4905      	ldr	r1, [pc, #20]	; (ee08 <_ZN9CDC_Class5writeEPKhj+0x80>)
    edf2:	4806      	ldr	r0, [pc, #24]	; (ee0c <_ZN9CDC_Class5writeEPKhj+0x84>)
    edf4:	4b09      	ldr	r3, [pc, #36]	; (ee1c <_ZN9CDC_Class5writeEPKhj+0x94>)
    edf6:	4798      	blx	r3
    edf8:	e001      	b.n	edfe <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    edfa:	2300      	movs	r3, #0
    edfc:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    edfe:	697b      	ldr	r3, [r7, #20]
}
    ee00:	4618      	mov	r0, r3
    ee02:	3718      	adds	r7, #24
    ee04:	46bd      	mov	sp, r7
    ee06:	bd80      	pop	{r7, pc}
    ee08:	0000e955 	.word	0x0000e955
    ee0c:	20001034 	.word	0x20001034
    ee10:	0000f545 	.word	0x0000f545
    ee14:	0000ca31 	.word	0x0000ca31
    ee18:	0000f465 	.word	0x0000f465
    ee1c:	0000f57d 	.word	0x0000f57d

0000ee20 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    ee20:	b480      	push	{r7}
    ee22:	b083      	sub	sp, #12
    ee24:	af00      	add	r7, sp, #0
    ee26:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    ee28:	687b      	ldr	r3, [r7, #4]
    ee2a:	7d5b      	ldrb	r3, [r3, #21]
    ee2c:	b2db      	uxtb	r3, r3
    ee2e:	2b00      	cmp	r3, #0
    ee30:	d006      	beq.n	ee40 <_ZN9CDC_Class9availableEv+0x20>
    ee32:	687b      	ldr	r3, [r7, #4]
    ee34:	7d1b      	ldrb	r3, [r3, #20]
    ee36:	b2db      	uxtb	r3, r3
    ee38:	2b00      	cmp	r3, #0
    ee3a:	d001      	beq.n	ee40 <_ZN9CDC_Class9availableEv+0x20>
    ee3c:	2301      	movs	r3, #1
    ee3e:	e000      	b.n	ee42 <_ZN9CDC_Class9availableEv+0x22>
    ee40:	2300      	movs	r3, #0
    ee42:	2b00      	cmp	r3, #0
    ee44:	d001      	beq.n	ee4a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    ee46:	2301      	movs	r3, #1
    ee48:	e000      	b.n	ee4c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    ee4a:	2300      	movs	r3, #0
	}
	
}
    ee4c:	4618      	mov	r0, r3
    ee4e:	370c      	adds	r7, #12
    ee50:	46bd      	mov	sp, r7
    ee52:	bc80      	pop	{r7}
    ee54:	4770      	bx	lr
	...

0000ee58 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    ee58:	b580      	push	{r7, lr}
    ee5a:	b082      	sub	sp, #8
    ee5c:	af00      	add	r7, sp, #0
    ee5e:	6078      	str	r0, [r7, #4]
    ee60:	6039      	str	r1, [r7, #0]
    ee62:	687b      	ldr	r3, [r7, #4]
    ee64:	2b01      	cmp	r3, #1
    ee66:	d10c      	bne.n	ee82 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ee68:	683b      	ldr	r3, [r7, #0]
    ee6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ee6e:	4293      	cmp	r3, r2
    ee70:	d107      	bne.n	ee82 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ee72:	4806      	ldr	r0, [pc, #24]	; (ee8c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ee74:	4b06      	ldr	r3, [pc, #24]	; (ee90 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ee76:	4798      	blx	r3
    ee78:	4a06      	ldr	r2, [pc, #24]	; (ee94 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    ee7a:	4907      	ldr	r1, [pc, #28]	; (ee98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    ee7c:	4803      	ldr	r0, [pc, #12]	; (ee8c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ee7e:	4b07      	ldr	r3, [pc, #28]	; (ee9c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ee80:	4798      	blx	r3
    ee82:	bf00      	nop
    ee84:	3708      	adds	r7, #8
    ee86:	46bd      	mov	sp, r7
    ee88:	bd80      	pop	{r7, pc}
    ee8a:	bf00      	nop
    ee8c:	20000f7c 	.word	0x20000f7c
    ee90:	0000ea45 	.word	0x0000ea45
    ee94:	20000000 	.word	0x20000000
    ee98:	0000ea8d 	.word	0x0000ea8d
    ee9c:	0000f8d5 	.word	0x0000f8d5

0000eea0 <_GLOBAL__sub_I_ptrCDCClass>:
    eea0:	b580      	push	{r7, lr}
    eea2:	af00      	add	r7, sp, #0
    eea4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eea8:	2001      	movs	r0, #1
    eeaa:	4b01      	ldr	r3, [pc, #4]	; (eeb0 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    eeac:	4798      	blx	r3
    eeae:	bd80      	pop	{r7, pc}
    eeb0:	0000ee59 	.word	0x0000ee59

0000eeb4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    eeb4:	b590      	push	{r4, r7, lr}
    eeb6:	b083      	sub	sp, #12
    eeb8:	af00      	add	r7, sp, #0
    eeba:	6078      	str	r0, [r7, #4]
    eebc:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    eebe:	683b      	ldr	r3, [r7, #0]
    eec0:	2b00      	cmp	r3, #0
    eec2:	d101      	bne.n	eec8 <_ZN5Print5writeEPKc+0x14>
    eec4:	2300      	movs	r3, #0
    eec6:	e00c      	b.n	eee2 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    eec8:	687b      	ldr	r3, [r7, #4]
    eeca:	681b      	ldr	r3, [r3, #0]
    eecc:	3304      	adds	r3, #4
    eece:	681c      	ldr	r4, [r3, #0]
    eed0:	6838      	ldr	r0, [r7, #0]
    eed2:	4b06      	ldr	r3, [pc, #24]	; (eeec <_ZN5Print5writeEPKc+0x38>)
    eed4:	4798      	blx	r3
    eed6:	4603      	mov	r3, r0
    eed8:	461a      	mov	r2, r3
    eeda:	6839      	ldr	r1, [r7, #0]
    eedc:	6878      	ldr	r0, [r7, #4]
    eede:	47a0      	blx	r4
    eee0:	4603      	mov	r3, r0
    }
    eee2:	4618      	mov	r0, r3
    eee4:	370c      	adds	r7, #12
    eee6:	46bd      	mov	sp, r7
    eee8:	bd90      	pop	{r4, r7, pc}
    eeea:	bf00      	nop
    eeec:	0000fb41 	.word	0x0000fb41

0000eef0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    eef0:	b580      	push	{r7, lr}
    eef2:	b086      	sub	sp, #24
    eef4:	af00      	add	r7, sp, #0
    eef6:	60f8      	str	r0, [r7, #12]
    eef8:	60b9      	str	r1, [r7, #8]
    eefa:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    eefc:	2300      	movs	r3, #0
    eefe:	617b      	str	r3, [r7, #20]
  while (size--) {
    ef00:	687b      	ldr	r3, [r7, #4]
    ef02:	1e5a      	subs	r2, r3, #1
    ef04:	607a      	str	r2, [r7, #4]
    ef06:	2b00      	cmp	r3, #0
    ef08:	bf14      	ite	ne
    ef0a:	2301      	movne	r3, #1
    ef0c:	2300      	moveq	r3, #0
    ef0e:	b2db      	uxtb	r3, r3
    ef10:	2b00      	cmp	r3, #0
    ef12:	d016      	beq.n	ef42 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    ef14:	68fb      	ldr	r3, [r7, #12]
    ef16:	681b      	ldr	r3, [r3, #0]
    ef18:	681a      	ldr	r2, [r3, #0]
    ef1a:	68bb      	ldr	r3, [r7, #8]
    ef1c:	1c59      	adds	r1, r3, #1
    ef1e:	60b9      	str	r1, [r7, #8]
    ef20:	781b      	ldrb	r3, [r3, #0]
    ef22:	4619      	mov	r1, r3
    ef24:	68f8      	ldr	r0, [r7, #12]
    ef26:	4790      	blx	r2
    ef28:	4603      	mov	r3, r0
    ef2a:	2b00      	cmp	r3, #0
    ef2c:	bf14      	ite	ne
    ef2e:	2301      	movne	r3, #1
    ef30:	2300      	moveq	r3, #0
    ef32:	b2db      	uxtb	r3, r3
    ef34:	2b00      	cmp	r3, #0
    ef36:	d003      	beq.n	ef40 <_ZN5Print5writeEPKhj+0x50>
    ef38:	697b      	ldr	r3, [r7, #20]
    ef3a:	3301      	adds	r3, #1
    ef3c:	617b      	str	r3, [r7, #20]
  while (size--) {
    ef3e:	e7df      	b.n	ef00 <_ZN5Print5writeEPKhj+0x10>
    else break;
    ef40:	bf00      	nop
  }
  return n;
    ef42:	697b      	ldr	r3, [r7, #20]
}
    ef44:	4618      	mov	r0, r3
    ef46:	3718      	adds	r7, #24
    ef48:	46bd      	mov	sp, r7
    ef4a:	bd80      	pop	{r7, pc}

0000ef4c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    ef4c:	b580      	push	{r7, lr}
    ef4e:	b082      	sub	sp, #8
    ef50:	af00      	add	r7, sp, #0
    ef52:	6078      	str	r0, [r7, #4]
    ef54:	6039      	str	r1, [r7, #0]
  return write(str);
    ef56:	6839      	ldr	r1, [r7, #0]
    ef58:	6878      	ldr	r0, [r7, #4]
    ef5a:	4b03      	ldr	r3, [pc, #12]	; (ef68 <_ZN5Print5printEPKc+0x1c>)
    ef5c:	4798      	blx	r3
    ef5e:	4603      	mov	r3, r0
}
    ef60:	4618      	mov	r0, r3
    ef62:	3708      	adds	r7, #8
    ef64:	46bd      	mov	sp, r7
    ef66:	bd80      	pop	{r7, pc}
    ef68:	0000eeb5 	.word	0x0000eeb5

0000ef6c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    ef6c:	b580      	push	{r7, lr}
    ef6e:	b082      	sub	sp, #8
    ef70:	af00      	add	r7, sp, #0
    ef72:	6078      	str	r0, [r7, #4]
    ef74:	460b      	mov	r3, r1
    ef76:	70fb      	strb	r3, [r7, #3]
  return write(c);
    ef78:	687b      	ldr	r3, [r7, #4]
    ef7a:	681b      	ldr	r3, [r3, #0]
    ef7c:	681b      	ldr	r3, [r3, #0]
    ef7e:	78fa      	ldrb	r2, [r7, #3]
    ef80:	4611      	mov	r1, r2
    ef82:	6878      	ldr	r0, [r7, #4]
    ef84:	4798      	blx	r3
    ef86:	4603      	mov	r3, r0
}
    ef88:	4618      	mov	r0, r3
    ef8a:	3708      	adds	r7, #8
    ef8c:	46bd      	mov	sp, r7
    ef8e:	bd80      	pop	{r7, pc}

0000ef90 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    ef90:	b580      	push	{r7, lr}
    ef92:	b084      	sub	sp, #16
    ef94:	af00      	add	r7, sp, #0
    ef96:	60f8      	str	r0, [r7, #12]
    ef98:	460b      	mov	r3, r1
    ef9a:	607a      	str	r2, [r7, #4]
    ef9c:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    ef9e:	7afb      	ldrb	r3, [r7, #11]
    efa0:	687a      	ldr	r2, [r7, #4]
    efa2:	4619      	mov	r1, r3
    efa4:	68f8      	ldr	r0, [r7, #12]
    efa6:	4b03      	ldr	r3, [pc, #12]	; (efb4 <_ZN5Print5printEhi+0x24>)
    efa8:	4798      	blx	r3
    efaa:	4603      	mov	r3, r0
}
    efac:	4618      	mov	r0, r3
    efae:	3710      	adds	r7, #16
    efb0:	46bd      	mov	sp, r7
    efb2:	bd80      	pop	{r7, pc}
    efb4:	0000f065 	.word	0x0000f065

0000efb8 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    efb8:	b580      	push	{r7, lr}
    efba:	b084      	sub	sp, #16
    efbc:	af00      	add	r7, sp, #0
    efbe:	60f8      	str	r0, [r7, #12]
    efc0:	60b9      	str	r1, [r7, #8]
    efc2:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    efc4:	687a      	ldr	r2, [r7, #4]
    efc6:	68b9      	ldr	r1, [r7, #8]
    efc8:	68f8      	ldr	r0, [r7, #12]
    efca:	4b03      	ldr	r3, [pc, #12]	; (efd8 <_ZN5Print5printEii+0x20>)
    efcc:	4798      	blx	r3
    efce:	4603      	mov	r3, r0
}
    efd0:	4618      	mov	r0, r3
    efd2:	3710      	adds	r7, #16
    efd4:	46bd      	mov	sp, r7
    efd6:	bd80      	pop	{r7, pc}
    efd8:	0000efdd 	.word	0x0000efdd

0000efdc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    efdc:	b580      	push	{r7, lr}
    efde:	b086      	sub	sp, #24
    efe0:	af00      	add	r7, sp, #0
    efe2:	60f8      	str	r0, [r7, #12]
    efe4:	60b9      	str	r1, [r7, #8]
    efe6:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    efe8:	687b      	ldr	r3, [r7, #4]
    efea:	2b00      	cmp	r3, #0
    efec:	d109      	bne.n	f002 <_ZN5Print5printEli+0x26>
    return write(n);
    efee:	68fb      	ldr	r3, [r7, #12]
    eff0:	681b      	ldr	r3, [r3, #0]
    eff2:	681b      	ldr	r3, [r3, #0]
    eff4:	68ba      	ldr	r2, [r7, #8]
    eff6:	b2d2      	uxtb	r2, r2
    eff8:	4611      	mov	r1, r2
    effa:	68f8      	ldr	r0, [r7, #12]
    effc:	4798      	blx	r3
    effe:	4603      	mov	r3, r0
    f000:	e028      	b.n	f054 <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
    f002:	687b      	ldr	r3, [r7, #4]
    f004:	2b0a      	cmp	r3, #10
    f006:	d11d      	bne.n	f044 <_ZN5Print5printEli+0x68>
    if (n < 0) {
    f008:	68bb      	ldr	r3, [r7, #8]
    f00a:	2b00      	cmp	r3, #0
    f00c:	da12      	bge.n	f034 <_ZN5Print5printEli+0x58>
      int t = print('-');
    f00e:	212d      	movs	r1, #45	; 0x2d
    f010:	68f8      	ldr	r0, [r7, #12]
    f012:	4b12      	ldr	r3, [pc, #72]	; (f05c <_ZN5Print5printEli+0x80>)
    f014:	4798      	blx	r3
    f016:	4603      	mov	r3, r0
    f018:	617b      	str	r3, [r7, #20]
      n = -n;
    f01a:	68bb      	ldr	r3, [r7, #8]
    f01c:	425b      	negs	r3, r3
    f01e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    f020:	68bb      	ldr	r3, [r7, #8]
    f022:	220a      	movs	r2, #10
    f024:	4619      	mov	r1, r3
    f026:	68f8      	ldr	r0, [r7, #12]
    f028:	4b0d      	ldr	r3, [pc, #52]	; (f060 <_ZN5Print5printEli+0x84>)
    f02a:	4798      	blx	r3
    f02c:	4602      	mov	r2, r0
    f02e:	697b      	ldr	r3, [r7, #20]
    f030:	4413      	add	r3, r2
    f032:	e00f      	b.n	f054 <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
    f034:	68bb      	ldr	r3, [r7, #8]
    f036:	220a      	movs	r2, #10
    f038:	4619      	mov	r1, r3
    f03a:	68f8      	ldr	r0, [r7, #12]
    f03c:	4b08      	ldr	r3, [pc, #32]	; (f060 <_ZN5Print5printEli+0x84>)
    f03e:	4798      	blx	r3
    f040:	4603      	mov	r3, r0
    f042:	e007      	b.n	f054 <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
    f044:	68bb      	ldr	r3, [r7, #8]
    f046:	687a      	ldr	r2, [r7, #4]
    f048:	b2d2      	uxtb	r2, r2
    f04a:	4619      	mov	r1, r3
    f04c:	68f8      	ldr	r0, [r7, #12]
    f04e:	4b04      	ldr	r3, [pc, #16]	; (f060 <_ZN5Print5printEli+0x84>)
    f050:	4798      	blx	r3
    f052:	4603      	mov	r3, r0
  }
}
    f054:	4618      	mov	r0, r3
    f056:	3718      	adds	r7, #24
    f058:	46bd      	mov	sp, r7
    f05a:	bd80      	pop	{r7, pc}
    f05c:	0000ef6d 	.word	0x0000ef6d
    f060:	0000f0a9 	.word	0x0000f0a9

0000f064 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    f064:	b580      	push	{r7, lr}
    f066:	b084      	sub	sp, #16
    f068:	af00      	add	r7, sp, #0
    f06a:	60f8      	str	r0, [r7, #12]
    f06c:	60b9      	str	r1, [r7, #8]
    f06e:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    f070:	687b      	ldr	r3, [r7, #4]
    f072:	2b00      	cmp	r3, #0
    f074:	d109      	bne.n	f08a <_ZN5Print5printEmi+0x26>
    f076:	68fb      	ldr	r3, [r7, #12]
    f078:	681b      	ldr	r3, [r3, #0]
    f07a:	681b      	ldr	r3, [r3, #0]
    f07c:	68ba      	ldr	r2, [r7, #8]
    f07e:	b2d2      	uxtb	r2, r2
    f080:	4611      	mov	r1, r2
    f082:	68f8      	ldr	r0, [r7, #12]
    f084:	4798      	blx	r3
    f086:	4603      	mov	r3, r0
    f088:	e007      	b.n	f09a <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    f08a:	687b      	ldr	r3, [r7, #4]
    f08c:	b2db      	uxtb	r3, r3
    f08e:	461a      	mov	r2, r3
    f090:	68b9      	ldr	r1, [r7, #8]
    f092:	68f8      	ldr	r0, [r7, #12]
    f094:	4b03      	ldr	r3, [pc, #12]	; (f0a4 <_ZN5Print5printEmi+0x40>)
    f096:	4798      	blx	r3
    f098:	4603      	mov	r3, r0
}
    f09a:	4618      	mov	r0, r3
    f09c:	3710      	adds	r7, #16
    f09e:	46bd      	mov	sp, r7
    f0a0:	bd80      	pop	{r7, pc}
    f0a2:	bf00      	nop
    f0a4:	0000f0a9 	.word	0x0000f0a9

0000f0a8 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    f0a8:	b580      	push	{r7, lr}
    f0aa:	b08e      	sub	sp, #56	; 0x38
    f0ac:	af00      	add	r7, sp, #0
    f0ae:	60f8      	str	r0, [r7, #12]
    f0b0:	60b9      	str	r1, [r7, #8]
    f0b2:	4613      	mov	r3, r2
    f0b4:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    f0b6:	f107 0310 	add.w	r3, r7, #16
    f0ba:	3320      	adds	r3, #32
    f0bc:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    f0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f0c0:	2200      	movs	r2, #0
    f0c2:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    f0c4:	79fb      	ldrb	r3, [r7, #7]
    f0c6:	2b01      	cmp	r3, #1
    f0c8:	dc01      	bgt.n	f0ce <_ZN5Print11printNumberEmh+0x26>
    f0ca:	230a      	movs	r3, #10
    f0cc:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    f0ce:	79fa      	ldrb	r2, [r7, #7]
    f0d0:	68bb      	ldr	r3, [r7, #8]
    f0d2:	fbb3 f1f2 	udiv	r1, r3, r2
    f0d6:	fb02 f201 	mul.w	r2, r2, r1
    f0da:	1a9b      	subs	r3, r3, r2
    f0dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    f0e0:	79fb      	ldrb	r3, [r7, #7]
    f0e2:	68ba      	ldr	r2, [r7, #8]
    f0e4:	fbb2 f3f3 	udiv	r3, r2, r3
    f0e8:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    f0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f0ec:	3b01      	subs	r3, #1
    f0ee:	637b      	str	r3, [r7, #52]	; 0x34
    f0f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    f0f4:	2b09      	cmp	r3, #9
    f0f6:	dc04      	bgt.n	f102 <_ZN5Print11printNumberEmh+0x5a>
    f0f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    f0fc:	3330      	adds	r3, #48	; 0x30
    f0fe:	b2db      	uxtb	r3, r3
    f100:	e003      	b.n	f10a <_ZN5Print11printNumberEmh+0x62>
    f102:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    f106:	3337      	adds	r3, #55	; 0x37
    f108:	b2db      	uxtb	r3, r3
    f10a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f10c:	7013      	strb	r3, [r2, #0]
  } while(n);
    f10e:	68bb      	ldr	r3, [r7, #8]
    f110:	2b00      	cmp	r3, #0
    f112:	d000      	beq.n	f116 <_ZN5Print11printNumberEmh+0x6e>
  do {
    f114:	e7db      	b.n	f0ce <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    f116:	6b79      	ldr	r1, [r7, #52]	; 0x34
    f118:	68f8      	ldr	r0, [r7, #12]
    f11a:	4b03      	ldr	r3, [pc, #12]	; (f128 <_ZN5Print11printNumberEmh+0x80>)
    f11c:	4798      	blx	r3
    f11e:	4603      	mov	r3, r0
}
    f120:	4618      	mov	r0, r3
    f122:	3738      	adds	r7, #56	; 0x38
    f124:	46bd      	mov	sp, r7
    f126:	bd80      	pop	{r7, pc}
    f128:	0000eeb5 	.word	0x0000eeb5

0000f12c <hri_port_read_DIR_reg>:
{
    f12c:	b480      	push	{r7}
    f12e:	b083      	sub	sp, #12
    f130:	af00      	add	r7, sp, #0
    f132:	6078      	str	r0, [r7, #4]
    f134:	460b      	mov	r3, r1
    f136:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f138:	78fb      	ldrb	r3, [r7, #3]
    f13a:	687a      	ldr	r2, [r7, #4]
    f13c:	01db      	lsls	r3, r3, #7
    f13e:	4413      	add	r3, r2
    f140:	681b      	ldr	r3, [r3, #0]
}
    f142:	4618      	mov	r0, r3
    f144:	370c      	adds	r7, #12
    f146:	46bd      	mov	sp, r7
    f148:	bc80      	pop	{r7}
    f14a:	4770      	bx	lr

0000f14c <hri_port_read_OUT_reg>:
{
    f14c:	b480      	push	{r7}
    f14e:	b083      	sub	sp, #12
    f150:	af00      	add	r7, sp, #0
    f152:	6078      	str	r0, [r7, #4]
    f154:	460b      	mov	r3, r1
    f156:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f158:	78fb      	ldrb	r3, [r7, #3]
    f15a:	687a      	ldr	r2, [r7, #4]
    f15c:	01db      	lsls	r3, r3, #7
    f15e:	4413      	add	r3, r2
    f160:	3310      	adds	r3, #16
    f162:	681b      	ldr	r3, [r3, #0]
}
    f164:	4618      	mov	r0, r3
    f166:	370c      	adds	r7, #12
    f168:	46bd      	mov	sp, r7
    f16a:	bc80      	pop	{r7}
    f16c:	4770      	bx	lr

0000f16e <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f16e:	b480      	push	{r7}
    f170:	b083      	sub	sp, #12
    f172:	af00      	add	r7, sp, #0
    f174:	6078      	str	r0, [r7, #4]
    f176:	460b      	mov	r3, r1
    f178:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f17a:	78fb      	ldrb	r3, [r7, #3]
    f17c:	687a      	ldr	r2, [r7, #4]
    f17e:	01db      	lsls	r3, r3, #7
    f180:	4413      	add	r3, r2
    f182:	3320      	adds	r3, #32
    f184:	681b      	ldr	r3, [r3, #0]
}
    f186:	4618      	mov	r0, r3
    f188:	370c      	adds	r7, #12
    f18a:	46bd      	mov	sp, r7
    f18c:	bc80      	pop	{r7}
    f18e:	4770      	bx	lr

0000f190 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f190:	b580      	push	{r7, lr}
    f192:	b086      	sub	sp, #24
    f194:	af00      	add	r7, sp, #0
    f196:	4603      	mov	r3, r0
    f198:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f19a:	f107 030c 	add.w	r3, r7, #12
    f19e:	4618      	mov	r0, r3
    f1a0:	4b13      	ldr	r3, [pc, #76]	; (f1f0 <_gpio_get_level+0x60>)
    f1a2:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f1a4:	79fb      	ldrb	r3, [r7, #7]
    f1a6:	4619      	mov	r1, r3
    f1a8:	4812      	ldr	r0, [pc, #72]	; (f1f4 <_gpio_get_level+0x64>)
    f1aa:	4b13      	ldr	r3, [pc, #76]	; (f1f8 <_gpio_get_level+0x68>)
    f1ac:	4798      	blx	r3
    f1ae:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f1b0:	79fb      	ldrb	r3, [r7, #7]
    f1b2:	4619      	mov	r1, r3
    f1b4:	480f      	ldr	r0, [pc, #60]	; (f1f4 <_gpio_get_level+0x64>)
    f1b6:	4b11      	ldr	r3, [pc, #68]	; (f1fc <_gpio_get_level+0x6c>)
    f1b8:	4798      	blx	r3
    f1ba:	4602      	mov	r2, r0
    f1bc:	697b      	ldr	r3, [r7, #20]
    f1be:	43db      	mvns	r3, r3
    f1c0:	4013      	ands	r3, r2
    f1c2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f1c4:	79fb      	ldrb	r3, [r7, #7]
    f1c6:	4619      	mov	r1, r3
    f1c8:	480a      	ldr	r0, [pc, #40]	; (f1f4 <_gpio_get_level+0x64>)
    f1ca:	4b0d      	ldr	r3, [pc, #52]	; (f200 <_gpio_get_level+0x70>)
    f1cc:	4798      	blx	r3
    f1ce:	4602      	mov	r2, r0
    f1d0:	697b      	ldr	r3, [r7, #20]
    f1d2:	4013      	ands	r3, r2
    f1d4:	693a      	ldr	r2, [r7, #16]
    f1d6:	4313      	orrs	r3, r2
    f1d8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f1da:	f107 030c 	add.w	r3, r7, #12
    f1de:	4618      	mov	r0, r3
    f1e0:	4b08      	ldr	r3, [pc, #32]	; (f204 <_gpio_get_level+0x74>)
    f1e2:	4798      	blx	r3

	return tmp;
    f1e4:	693b      	ldr	r3, [r7, #16]
}
    f1e6:	4618      	mov	r0, r3
    f1e8:	3718      	adds	r7, #24
    f1ea:	46bd      	mov	sp, r7
    f1ec:	bd80      	pop	{r7, pc}
    f1ee:	bf00      	nop
    f1f0:	0000bc0d 	.word	0x0000bc0d
    f1f4:	41008000 	.word	0x41008000
    f1f8:	0000f12d 	.word	0x0000f12d
    f1fc:	0000f16f 	.word	0x0000f16f
    f200:	0000f14d 	.word	0x0000f14d
    f204:	0000bc33 	.word	0x0000bc33

0000f208 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f208:	b580      	push	{r7, lr}
    f20a:	b082      	sub	sp, #8
    f20c:	af00      	add	r7, sp, #0
    f20e:	4603      	mov	r3, r0
    f210:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f212:	79fb      	ldrb	r3, [r7, #7]
    f214:	115b      	asrs	r3, r3, #5
    f216:	b2db      	uxtb	r3, r3
    f218:	4618      	mov	r0, r3
    f21a:	4b09      	ldr	r3, [pc, #36]	; (f240 <gpio_get_pin_level+0x38>)
    f21c:	4798      	blx	r3
    f21e:	4601      	mov	r1, r0
    f220:	79fb      	ldrb	r3, [r7, #7]
    f222:	f003 031f 	and.w	r3, r3, #31
    f226:	2201      	movs	r2, #1
    f228:	fa02 f303 	lsl.w	r3, r2, r3
    f22c:	400b      	ands	r3, r1
    f22e:	2b00      	cmp	r3, #0
    f230:	bf14      	ite	ne
    f232:	2301      	movne	r3, #1
    f234:	2300      	moveq	r3, #0
    f236:	b2db      	uxtb	r3, r3
}
    f238:	4618      	mov	r0, r3
    f23a:	3708      	adds	r7, #8
    f23c:	46bd      	mov	sp, r7
    f23e:	bd80      	pop	{r7, pc}
    f240:	0000f191 	.word	0x0000f191

0000f244 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    f244:	b480      	push	{r7}
    f246:	b083      	sub	sp, #12
    f248:	af00      	add	r7, sp, #0
    f24a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    f24c:	4b06      	ldr	r3, [pc, #24]	; (f268 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f24e:	681b      	ldr	r3, [r3, #0]
    f250:	2201      	movs	r2, #1
    f252:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    f254:	4b04      	ldr	r3, [pc, #16]	; (f268 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f256:	681b      	ldr	r3, [r3, #0]
    f258:	2200      	movs	r2, #0
    f25a:	705a      	strb	r2, [r3, #1]
}
    f25c:	bf00      	nop
    f25e:	370c      	adds	r7, #12
    f260:	46bd      	mov	sp, r7
    f262:	bc80      	pop	{r7}
    f264:	4770      	bx	lr
    f266:	bf00      	nop
    f268:	20000fdc 	.word	0x20000fdc

0000f26c <_ZL10USBPluggedv>:

static void USBPlugged(void){
    f26c:	b580      	push	{r7, lr}
    f26e:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    f270:	2040      	movs	r0, #64	; 0x40
    f272:	4b0a      	ldr	r3, [pc, #40]	; (f29c <_ZL10USBPluggedv+0x30>)
    f274:	4798      	blx	r3
    f276:	4603      	mov	r3, r0
    f278:	2b00      	cmp	r3, #0
    f27a:	d004      	beq.n	f286 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    f27c:	4b08      	ldr	r3, [pc, #32]	; (f2a0 <_ZL10USBPluggedv+0x34>)
    f27e:	681b      	ldr	r3, [r3, #0]
    f280:	2201      	movs	r2, #1
    f282:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    f284:	e007      	b.n	f296 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    f286:	4b06      	ldr	r3, [pc, #24]	; (f2a0 <_ZL10USBPluggedv+0x34>)
    f288:	681b      	ldr	r3, [r3, #0]
    f28a:	2200      	movs	r2, #0
    f28c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    f28e:	4b04      	ldr	r3, [pc, #16]	; (f2a0 <_ZL10USBPluggedv+0x34>)
    f290:	681b      	ldr	r3, [r3, #0]
    f292:	2200      	movs	r2, #0
    f294:	701a      	strb	r2, [r3, #0]
}
    f296:	bf00      	nop
    f298:	bd80      	pop	{r7, pc}
    f29a:	bf00      	nop
    f29c:	0000f209 	.word	0x0000f209
    f2a0:	20000fdc 	.word	0x20000fdc

0000f2a4 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    f2a4:	b480      	push	{r7}
    f2a6:	b083      	sub	sp, #12
    f2a8:	af00      	add	r7, sp, #0
    f2aa:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    f2ac:	4a04      	ldr	r2, [pc, #16]	; (f2c0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    f2ae:	687b      	ldr	r3, [r7, #4]
    f2b0:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    f2b2:	687b      	ldr	r3, [r7, #4]
    f2b4:	4618      	mov	r0, r3
    f2b6:	370c      	adds	r7, #12
    f2b8:	46bd      	mov	sp, r7
    f2ba:	bc80      	pop	{r7}
    f2bc:	4770      	bx	lr
    f2be:	bf00      	nop
    f2c0:	20000fdc 	.word	0x20000fdc

0000f2c4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    f2c4:	b480      	push	{r7}
    f2c6:	b083      	sub	sp, #12
    f2c8:	af00      	add	r7, sp, #0
    f2ca:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    f2cc:	687b      	ldr	r3, [r7, #4]
    f2ce:	4618      	mov	r0, r3
    f2d0:	370c      	adds	r7, #12
    f2d2:	46bd      	mov	sp, r7
    f2d4:	bc80      	pop	{r7}
    f2d6:	4770      	bx	lr

0000f2d8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    f2d8:	b580      	push	{r7, lr}
    f2da:	b082      	sub	sp, #8
    f2dc:	af00      	add	r7, sp, #0
    f2de:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    f2e0:	491f      	ldr	r1, [pc, #124]	; (f360 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    f2e2:	2040      	movs	r0, #64	; 0x40
    f2e4:	4b1f      	ldr	r3, [pc, #124]	; (f364 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f2e6:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    f2e8:	481f      	ldr	r0, [pc, #124]	; (f368 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f2ea:	4b20      	ldr	r3, [pc, #128]	; (f36c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    f2ec:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    f2ee:	2040      	movs	r0, #64	; 0x40
    f2f0:	4b1f      	ldr	r3, [pc, #124]	; (f370 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    f2f2:	4798      	blx	r3
    f2f4:	4603      	mov	r3, r0
    f2f6:	461a      	mov	r2, r3
    f2f8:	687b      	ldr	r3, [r7, #4]
    f2fa:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    f2fc:	687b      	ldr	r3, [r7, #4]
    f2fe:	78db      	ldrb	r3, [r3, #3]
    f300:	2b00      	cmp	r3, #0
    f302:	d024      	beq.n	f34e <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    f304:	687b      	ldr	r3, [r7, #4]
    f306:	2200      	movs	r2, #0
    f308:	709a      	strb	r2, [r3, #2]
			plugged=true;
    f30a:	687b      	ldr	r3, [r7, #4]
    f30c:	2201      	movs	r2, #1
    f30e:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    f310:	f44f 7216 	mov.w	r2, #600	; 0x258
    f314:	4917      	ldr	r1, [pc, #92]	; (f374 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    f316:	4814      	ldr	r0, [pc, #80]	; (f368 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f318:	4b17      	ldr	r3, [pc, #92]	; (f378 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    f31a:	4798      	blx	r3
			usbTerminalTimer.Start();
    f31c:	4812      	ldr	r0, [pc, #72]	; (f368 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f31e:	4b17      	ldr	r3, [pc, #92]	; (f37c <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    f320:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    f322:	4817      	ldr	r0, [pc, #92]	; (f380 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    f324:	4b17      	ldr	r3, [pc, #92]	; (f384 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    f326:	4798      	blx	r3
    f328:	4603      	mov	r3, r0
    f32a:	f083 0301 	eor.w	r3, r3, #1
    f32e:	b2db      	uxtb	r3, r3
    f330:	2b00      	cmp	r3, #0
    f332:	d008      	beq.n	f346 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    f334:	687b      	ldr	r3, [r7, #4]
    f336:	789b      	ldrb	r3, [r3, #2]
    f338:	b2db      	uxtb	r3, r3
    f33a:	2b00      	cmp	r3, #0
    f33c:	d0f1      	beq.n	f322 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    f33e:	687b      	ldr	r3, [r7, #4]
    f340:	2200      	movs	r2, #0
    f342:	701a      	strb	r2, [r3, #0]
					return;
    f344:	e009      	b.n	f35a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    f346:	4808      	ldr	r0, [pc, #32]	; (f368 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f348:	4b0f      	ldr	r3, [pc, #60]	; (f388 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    f34a:	4798      	blx	r3
    f34c:	e005      	b.n	f35a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    f34e:	687b      	ldr	r3, [r7, #4]
    f350:	2200      	movs	r2, #0
    f352:	701a      	strb	r2, [r3, #0]
			plugged=false;
    f354:	687b      	ldr	r3, [r7, #4]
    f356:	2200      	movs	r2, #0
    f358:	705a      	strb	r2, [r3, #1]
		}
		
}
    f35a:	3708      	adds	r7, #8
    f35c:	46bd      	mov	sp, r7
    f35e:	bd80      	pop	{r7, pc}
    f360:	0000f26d 	.word	0x0000f26d
    f364:	000022e5 	.word	0x000022e5
    f368:	20001034 	.word	0x20001034
    f36c:	0000f409 	.word	0x0000f409
    f370:	0000f209 	.word	0x0000f209
    f374:	0000f245 	.word	0x0000f245
    f378:	0000f51d 	.word	0x0000f51d
    f37c:	0000f441 	.word	0x0000f441
    f380:	20000f7c 	.word	0x20000f7c
    f384:	0000eafd 	.word	0x0000eafd
    f388:	0000f465 	.word	0x0000f465

0000f38c <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    f38c:	b580      	push	{r7, lr}
    f38e:	b082      	sub	sp, #8
    f390:	af00      	add	r7, sp, #0
    f392:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    f394:	4b04      	ldr	r3, [pc, #16]	; (f3a8 <_ZL7task_cbPK10timer_task+0x1c>)
    f396:	681b      	ldr	r3, [r3, #0]
    f398:	4618      	mov	r0, r3
    f39a:	4b04      	ldr	r3, [pc, #16]	; (f3ac <_ZL7task_cbPK10timer_task+0x20>)
    f39c:	4798      	blx	r3
}
    f39e:	bf00      	nop
    f3a0:	3708      	adds	r7, #8
    f3a2:	46bd      	mov	sp, r7
    f3a4:	bd80      	pop	{r7, pc}
    f3a6:	bf00      	nop
    f3a8:	20000fe0 	.word	0x20000fe0
    f3ac:	0000f48d 	.word	0x0000f48d

0000f3b0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    f3b0:	b480      	push	{r7}
    f3b2:	b083      	sub	sp, #12
    f3b4:	af00      	add	r7, sp, #0
    f3b6:	6078      	str	r0, [r7, #4]
    f3b8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    f3ba:	687b      	ldr	r3, [r7, #4]
    f3bc:	683a      	ldr	r2, [r7, #0]
    f3be:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    f3c0:	4a08      	ldr	r2, [pc, #32]	; (f3e4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    f3c2:	687b      	ldr	r3, [r7, #4]
    f3c4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    f3c6:	687b      	ldr	r3, [r7, #4]
    f3c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f3cc:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    f3ce:	687b      	ldr	r3, [r7, #4]
    f3d0:	689b      	ldr	r3, [r3, #8]
    f3d2:	4a05      	ldr	r2, [pc, #20]	; (f3e8 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    f3d4:	60da      	str	r2, [r3, #12]
} //Timer_Class
    f3d6:	687b      	ldr	r3, [r7, #4]
    f3d8:	4618      	mov	r0, r3
    f3da:	370c      	adds	r7, #12
    f3dc:	46bd      	mov	sp, r7
    f3de:	bc80      	pop	{r7}
    f3e0:	4770      	bx	lr
    f3e2:	bf00      	nop
    f3e4:	20000fe0 	.word	0x20000fe0
    f3e8:	0000f38d 	.word	0x0000f38d

0000f3ec <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    f3ec:	b480      	push	{r7}
    f3ee:	b083      	sub	sp, #12
    f3f0:	af00      	add	r7, sp, #0
    f3f2:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    f3f4:	687b      	ldr	r3, [r7, #4]
    f3f6:	2200      	movs	r2, #0
    f3f8:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    f3fa:	687b      	ldr	r3, [r7, #4]
    f3fc:	4618      	mov	r0, r3
    f3fe:	370c      	adds	r7, #12
    f400:	46bd      	mov	sp, r7
    f402:	bc80      	pop	{r7}
    f404:	4770      	bx	lr
	...

0000f408 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    f408:	b580      	push	{r7, lr}
    f40a:	b082      	sub	sp, #8
    f40c:	af00      	add	r7, sp, #0
    f40e:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    f410:	687b      	ldr	r3, [r7, #4]
    f412:	2200      	movs	r2, #0
    f414:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    f416:	6878      	ldr	r0, [r7, #4]
    f418:	4b08      	ldr	r3, [pc, #32]	; (f43c <_ZN17TimerSerial_Class4InitEv+0x34>)
    f41a:	4798      	blx	r3
    f41c:	4603      	mov	r3, r0
    f41e:	2b00      	cmp	r3, #0
    f420:	bf0c      	ite	eq
    f422:	2301      	moveq	r3, #1
    f424:	2300      	movne	r3, #0
    f426:	b2da      	uxtb	r2, r3
    f428:	687b      	ldr	r3, [r7, #4]
    f42a:	709a      	strb	r2, [r3, #2]
	return isOK;
    f42c:	687b      	ldr	r3, [r7, #4]
    f42e:	789b      	ldrb	r3, [r3, #2]
    f430:	b2db      	uxtb	r3, r3
}
    f432:	4618      	mov	r0, r3
    f434:	3708      	adds	r7, #8
    f436:	46bd      	mov	sp, r7
    f438:	bd80      	pop	{r7, pc}
    f43a:	bf00      	nop
    f43c:	0000f441 	.word	0x0000f441

0000f440 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    f440:	b580      	push	{r7, lr}
    f442:	b084      	sub	sp, #16
    f444:	af00      	add	r7, sp, #0
    f446:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    f448:	687b      	ldr	r3, [r7, #4]
    f44a:	691b      	ldr	r3, [r3, #16]
    f44c:	4618      	mov	r0, r3
    f44e:	4b04      	ldr	r3, [pc, #16]	; (f460 <_ZN17TimerSerial_Class5StartEv+0x20>)
    f450:	4798      	blx	r3
    f452:	60f8      	str	r0, [r7, #12]
	return status;
    f454:	68fb      	ldr	r3, [r7, #12]
	
}
    f456:	4618      	mov	r0, r3
    f458:	3710      	adds	r7, #16
    f45a:	46bd      	mov	sp, r7
    f45c:	bd80      	pop	{r7, pc}
    f45e:	bf00      	nop
    f460:	00002d19 	.word	0x00002d19

0000f464 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    f464:	b580      	push	{r7, lr}
    f466:	b084      	sub	sp, #16
    f468:	af00      	add	r7, sp, #0
    f46a:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    f46c:	687b      	ldr	r3, [r7, #4]
    f46e:	691b      	ldr	r3, [r3, #16]
    f470:	4618      	mov	r0, r3
    f472:	4b05      	ldr	r3, [pc, #20]	; (f488 <_ZN17TimerSerial_Class4StopEv+0x24>)
    f474:	4798      	blx	r3
    f476:	60f8      	str	r0, [r7, #12]
	timeout=0;
    f478:	687b      	ldr	r3, [r7, #4]
    f47a:	2200      	movs	r2, #0
    f47c:	705a      	strb	r2, [r3, #1]
	return status;
    f47e:	68fb      	ldr	r3, [r7, #12]
}
    f480:	4618      	mov	r0, r3
    f482:	3710      	adds	r7, #16
    f484:	46bd      	mov	sp, r7
    f486:	bd80      	pop	{r7, pc}
    f488:	00002d81 	.word	0x00002d81

0000f48c <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    f48c:	b480      	push	{r7}
    f48e:	b083      	sub	sp, #12
    f490:	af00      	add	r7, sp, #0
    f492:	6078      	str	r0, [r7, #4]
	timeout=1;
    f494:	687b      	ldr	r3, [r7, #4]
    f496:	2201      	movs	r2, #1
    f498:	705a      	strb	r2, [r3, #1]
}
    f49a:	bf00      	nop
    f49c:	370c      	adds	r7, #12
    f49e:	46bd      	mov	sp, r7
    f4a0:	bc80      	pop	{r7}
    f4a2:	4770      	bx	lr

0000f4a4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    f4a4:	b580      	push	{r7, lr}
    f4a6:	b086      	sub	sp, #24
    f4a8:	af00      	add	r7, sp, #0
    f4aa:	60f8      	str	r0, [r7, #12]
    f4ac:	60b9      	str	r1, [r7, #8]
    f4ae:	607a      	str	r2, [r7, #4]
    f4b0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    f4b2:	68f8      	ldr	r0, [r7, #12]
    f4b4:	4b0d      	ldr	r3, [pc, #52]	; (f4ec <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    f4b6:	4798      	blx	r3
	task->interval = interval;
    f4b8:	68fb      	ldr	r3, [r7, #12]
    f4ba:	689b      	ldr	r3, [r3, #8]
    f4bc:	687a      	ldr	r2, [r7, #4]
    f4be:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    f4c0:	68fb      	ldr	r3, [r7, #12]
    f4c2:	689b      	ldr	r3, [r3, #8]
    f4c4:	68ba      	ldr	r2, [r7, #8]
    f4c6:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    f4c8:	68fb      	ldr	r3, [r7, #12]
    f4ca:	689b      	ldr	r3, [r3, #8]
    f4cc:	78fa      	ldrb	r2, [r7, #3]
    f4ce:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    f4d0:	68fb      	ldr	r3, [r7, #12]
    f4d2:	691a      	ldr	r2, [r3, #16]
    f4d4:	68fb      	ldr	r3, [r7, #12]
    f4d6:	689b      	ldr	r3, [r3, #8]
    f4d8:	4619      	mov	r1, r3
    f4da:	4610      	mov	r0, r2
    f4dc:	4b04      	ldr	r3, [pc, #16]	; (f4f0 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    f4de:	4798      	blx	r3
    f4e0:	6178      	str	r0, [r7, #20]
	
	return status;
    f4e2:	697b      	ldr	r3, [r7, #20]
}
    f4e4:	4618      	mov	r0, r3
    f4e6:	3718      	adds	r7, #24
    f4e8:	46bd      	mov	sp, r7
    f4ea:	bd80      	pop	{r7, pc}
    f4ec:	0000f5d5 	.word	0x0000f5d5
    f4f0:	00002ded 	.word	0x00002ded

0000f4f4 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    f4f4:	b590      	push	{r4, r7, lr}
    f4f6:	b087      	sub	sp, #28
    f4f8:	af00      	add	r7, sp, #0
    f4fa:	60f8      	str	r0, [r7, #12]
    f4fc:	60b9      	str	r1, [r7, #8]
    f4fe:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    f500:	2301      	movs	r3, #1
    f502:	687a      	ldr	r2, [r7, #4]
    f504:	68b9      	ldr	r1, [r7, #8]
    f506:	68f8      	ldr	r0, [r7, #12]
    f508:	4c03      	ldr	r4, [pc, #12]	; (f518 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
    f50a:	47a0      	blx	r4
    f50c:	6178      	str	r0, [r7, #20]
		return status;
    f50e:	697b      	ldr	r3, [r7, #20]
}
    f510:	4618      	mov	r0, r3
    f512:	371c      	adds	r7, #28
    f514:	46bd      	mov	sp, r7
    f516:	bd90      	pop	{r4, r7, pc}
    f518:	0000f4a5 	.word	0x0000f4a5

0000f51c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    f51c:	b590      	push	{r4, r7, lr}
    f51e:	b087      	sub	sp, #28
    f520:	af00      	add	r7, sp, #0
    f522:	60f8      	str	r0, [r7, #12]
    f524:	60b9      	str	r1, [r7, #8]
    f526:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f528:	2300      	movs	r3, #0
    f52a:	687a      	ldr	r2, [r7, #4]
    f52c:	68b9      	ldr	r1, [r7, #8]
    f52e:	68f8      	ldr	r0, [r7, #12]
    f530:	4c03      	ldr	r4, [pc, #12]	; (f540 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    f532:	47a0      	blx	r4
    f534:	6178      	str	r0, [r7, #20]
	return status;
    f536:	697b      	ldr	r3, [r7, #20]
}
    f538:	4618      	mov	r0, r3
    f53a:	371c      	adds	r7, #28
    f53c:	46bd      	mov	sp, r7
    f53e:	bd90      	pop	{r4, r7, pc}
    f540:	0000f4a5 	.word	0x0000f4a5

0000f544 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    f544:	b590      	push	{r4, r7, lr}
    f546:	b087      	sub	sp, #28
    f548:	af00      	add	r7, sp, #0
    f54a:	60f8      	str	r0, [r7, #12]
    f54c:	60b9      	str	r1, [r7, #8]
    f54e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f550:	2300      	movs	r3, #0
    f552:	687a      	ldr	r2, [r7, #4]
    f554:	68b9      	ldr	r1, [r7, #8]
    f556:	68f8      	ldr	r0, [r7, #12]
    f558:	4c06      	ldr	r4, [pc, #24]	; (f574 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    f55a:	47a0      	blx	r4
    f55c:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    f55e:	68fb      	ldr	r3, [r7, #12]
    f560:	691b      	ldr	r3, [r3, #16]
    f562:	4618      	mov	r0, r3
    f564:	4b04      	ldr	r3, [pc, #16]	; (f578 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    f566:	4798      	blx	r3
    f568:	6178      	str	r0, [r7, #20]
	return status;
    f56a:	697b      	ldr	r3, [r7, #20]
}
    f56c:	4618      	mov	r0, r3
    f56e:	371c      	adds	r7, #28
    f570:	46bd      	mov	sp, r7
    f572:	bd90      	pop	{r4, r7, pc}
    f574:	0000f4a5 	.word	0x0000f4a5
    f578:	00002d19 	.word	0x00002d19

0000f57c <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    f57c:	b580      	push	{r7, lr}
    f57e:	b082      	sub	sp, #8
    f580:	af00      	add	r7, sp, #0
    f582:	6078      	str	r0, [r7, #4]
    f584:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    f586:	6839      	ldr	r1, [r7, #0]
    f588:	6878      	ldr	r0, [r7, #4]
    f58a:	4b0f      	ldr	r3, [pc, #60]	; (f5c8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    f58c:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    f58e:	687b      	ldr	r3, [r7, #4]
    f590:	691b      	ldr	r3, [r3, #16]
    f592:	f103 0218 	add.w	r2, r3, #24
    f596:	687b      	ldr	r3, [r7, #4]
    f598:	689b      	ldr	r3, [r3, #8]
    f59a:	4619      	mov	r1, r3
    f59c:	4610      	mov	r0, r2
    f59e:	4b0b      	ldr	r3, [pc, #44]	; (f5cc <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    f5a0:	4798      	blx	r3
    f5a2:	4603      	mov	r3, r0
    f5a4:	2b00      	cmp	r3, #0
    f5a6:	d007      	beq.n	f5b8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    f5a8:	687b      	ldr	r3, [r7, #4]
    f5aa:	691a      	ldr	r2, [r3, #16]
    f5ac:	687b      	ldr	r3, [r7, #4]
    f5ae:	689b      	ldr	r3, [r3, #8]
    f5b0:	4619      	mov	r1, r3
    f5b2:	4610      	mov	r0, r2
    f5b4:	4b06      	ldr	r3, [pc, #24]	; (f5d0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    f5b6:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    f5b8:	687b      	ldr	r3, [r7, #4]
    f5ba:	689b      	ldr	r3, [r3, #8]
    f5bc:	2200      	movs	r2, #0
    f5be:	60da      	str	r2, [r3, #12]
}
    f5c0:	bf00      	nop
    f5c2:	3708      	adds	r7, #8
    f5c4:	46bd      	mov	sp, r7
    f5c6:	bd80      	pop	{r7, pc}
    f5c8:	0000f62d 	.word	0x0000f62d
    f5cc:	00003ad9 	.word	0x00003ad9
    f5d0:	00002ef1 	.word	0x00002ef1

0000f5d4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    f5d4:	b480      	push	{r7}
    f5d6:	b085      	sub	sp, #20
    f5d8:	af00      	add	r7, sp, #0
    f5da:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f5dc:	2300      	movs	r3, #0
    f5de:	73fb      	strb	r3, [r7, #15]
    f5e0:	7bfb      	ldrb	r3, [r7, #15]
    f5e2:	2b03      	cmp	r3, #3
    f5e4:	dc18      	bgt.n	f618 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    f5e6:	7bfa      	ldrb	r2, [r7, #15]
    f5e8:	490f      	ldr	r1, [pc, #60]	; (f628 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f5ea:	4613      	mov	r3, r2
    f5ec:	009b      	lsls	r3, r3, #2
    f5ee:	4413      	add	r3, r2
    f5f0:	009b      	lsls	r3, r3, #2
    f5f2:	440b      	add	r3, r1
    f5f4:	330c      	adds	r3, #12
    f5f6:	681b      	ldr	r3, [r3, #0]
    f5f8:	2b00      	cmp	r3, #0
    f5fa:	d109      	bne.n	f610 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    f5fc:	7bfa      	ldrb	r2, [r7, #15]
    f5fe:	4613      	mov	r3, r2
    f600:	009b      	lsls	r3, r3, #2
    f602:	4413      	add	r3, r2
    f604:	009b      	lsls	r3, r3, #2
    f606:	4a08      	ldr	r2, [pc, #32]	; (f628 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f608:	441a      	add	r2, r3
    f60a:	687b      	ldr	r3, [r7, #4]
    f60c:	609a      	str	r2, [r3, #8]
			return;
    f60e:	e006      	b.n	f61e <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f610:	7bfb      	ldrb	r3, [r7, #15]
    f612:	3301      	adds	r3, #1
    f614:	73fb      	strb	r3, [r7, #15]
    f616:	e7e3      	b.n	f5e0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    f618:	687b      	ldr	r3, [r7, #4]
    f61a:	4a03      	ldr	r2, [pc, #12]	; (f628 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f61c:	609a      	str	r2, [r3, #8]

}
    f61e:	3714      	adds	r7, #20
    f620:	46bd      	mov	sp, r7
    f622:	bc80      	pop	{r7}
    f624:	4770      	bx	lr
    f626:	bf00      	nop
    f628:	20000fe4 	.word	0x20000fe4

0000f62c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    f62c:	b480      	push	{r7}
    f62e:	b085      	sub	sp, #20
    f630:	af00      	add	r7, sp, #0
    f632:	6078      	str	r0, [r7, #4]
    f634:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f636:	2300      	movs	r3, #0
    f638:	73fb      	strb	r3, [r7, #15]
    f63a:	7bfb      	ldrb	r3, [r7, #15]
    f63c:	2b03      	cmp	r3, #3
    f63e:	dc19      	bgt.n	f674 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    f640:	7bfa      	ldrb	r2, [r7, #15]
    f642:	490e      	ldr	r1, [pc, #56]	; (f67c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    f644:	4613      	mov	r3, r2
    f646:	009b      	lsls	r3, r3, #2
    f648:	4413      	add	r3, r2
    f64a:	009b      	lsls	r3, r3, #2
    f64c:	440b      	add	r3, r1
    f64e:	330c      	adds	r3, #12
    f650:	681a      	ldr	r2, [r3, #0]
    f652:	683b      	ldr	r3, [r7, #0]
    f654:	429a      	cmp	r2, r3
    f656:	d109      	bne.n	f66c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    f658:	7bfa      	ldrb	r2, [r7, #15]
    f65a:	4613      	mov	r3, r2
    f65c:	009b      	lsls	r3, r3, #2
    f65e:	4413      	add	r3, r2
    f660:	009b      	lsls	r3, r3, #2
    f662:	4a06      	ldr	r2, [pc, #24]	; (f67c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    f664:	441a      	add	r2, r3
    f666:	687b      	ldr	r3, [r7, #4]
    f668:	609a      	str	r2, [r3, #8]
			return;
    f66a:	e003      	b.n	f674 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f66c:	7bfb      	ldrb	r3, [r7, #15]
    f66e:	3301      	adds	r3, #1
    f670:	73fb      	strb	r3, [r7, #15]
    f672:	e7e2      	b.n	f63a <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    f674:	3714      	adds	r7, #20
    f676:	46bd      	mov	sp, r7
    f678:	bc80      	pop	{r7}
    f67a:	4770      	bx	lr
    f67c:	20000fe4 	.word	0x20000fe4

0000f680 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f680:	b580      	push	{r7, lr}
    f682:	b082      	sub	sp, #8
    f684:	af00      	add	r7, sp, #0
    f686:	6078      	str	r0, [r7, #4]
    f688:	6039      	str	r1, [r7, #0]
    f68a:	687b      	ldr	r3, [r7, #4]
    f68c:	2b01      	cmp	r3, #1
    f68e:	d116      	bne.n	f6be <_Z41__static_initialization_and_destruction_0ii+0x3e>
    f690:	683b      	ldr	r3, [r7, #0]
    f692:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f696:	4293      	cmp	r3, r2
    f698:	d111      	bne.n	f6be <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    f69a:	490b      	ldr	r1, [pc, #44]	; (f6c8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    f69c:	480b      	ldr	r0, [pc, #44]	; (f6cc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f69e:	4b0c      	ldr	r3, [pc, #48]	; (f6d0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f6a0:	4798      	blx	r3
    f6a2:	4a0c      	ldr	r2, [pc, #48]	; (f6d4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f6a4:	490c      	ldr	r1, [pc, #48]	; (f6d8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f6a6:	4809      	ldr	r0, [pc, #36]	; (f6cc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f6a8:	4b0c      	ldr	r3, [pc, #48]	; (f6dc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f6aa:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f6ac:	490c      	ldr	r1, [pc, #48]	; (f6e0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f6ae:	480d      	ldr	r0, [pc, #52]	; (f6e4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f6b0:	4b07      	ldr	r3, [pc, #28]	; (f6d0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f6b2:	4798      	blx	r3
    f6b4:	4a07      	ldr	r2, [pc, #28]	; (f6d4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f6b6:	4908      	ldr	r1, [pc, #32]	; (f6d8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f6b8:	480a      	ldr	r0, [pc, #40]	; (f6e4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f6ba:	4b08      	ldr	r3, [pc, #32]	; (f6dc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f6bc:	4798      	blx	r3
    f6be:	bf00      	nop
    f6c0:	3708      	adds	r7, #8
    f6c2:	46bd      	mov	sp, r7
    f6c4:	bd80      	pop	{r7, pc}
    f6c6:	bf00      	nop
    f6c8:	200011d0 	.word	0x200011d0
    f6cc:	20001034 	.word	0x20001034
    f6d0:	0000f3b1 	.word	0x0000f3b1
    f6d4:	20000000 	.word	0x20000000
    f6d8:	0000f3ed 	.word	0x0000f3ed
    f6dc:	0000f8d5 	.word	0x0000f8d5
    f6e0:	20001108 	.word	0x20001108
    f6e4:	20001054 	.word	0x20001054

0000f6e8 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    f6e8:	b580      	push	{r7, lr}
    f6ea:	af00      	add	r7, sp, #0
    f6ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f6f0:	2001      	movs	r0, #1
    f6f2:	4b01      	ldr	r3, [pc, #4]	; (f6f8 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    f6f4:	4798      	blx	r3
    f6f6:	bd80      	pop	{r7, pc}
    f6f8:	0000f681 	.word	0x0000f681

0000f6fc <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    f6fc:	b480      	push	{r7}
    f6fe:	b083      	sub	sp, #12
    f700:	af00      	add	r7, sp, #0
    f702:	6078      	str	r0, [r7, #4]
    return (void *)0;
    f704:	2300      	movs	r3, #0
	}
    f706:	4618      	mov	r0, r3
    f708:	370c      	adds	r7, #12
    f70a:	46bd      	mov	sp, r7
    f70c:	bc80      	pop	{r7}
    f70e:	4770      	bx	lr

0000f710 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    f710:	b480      	push	{r7}
    f712:	af00      	add	r7, sp, #0
		}
    f714:	bf00      	nop
    f716:	46bd      	mov	sp, r7
    f718:	bc80      	pop	{r7}
    f71a:	4770      	bx	lr

0000f71c <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    f71c:	b480      	push	{r7}
    f71e:	b083      	sub	sp, #12
    f720:	af00      	add	r7, sp, #0
    f722:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    f724:	4a04      	ldr	r2, [pc, #16]	; (f738 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    f726:	687b      	ldr	r3, [r7, #4]
    f728:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    f72a:	687b      	ldr	r3, [r7, #4]
    f72c:	4618      	mov	r0, r3
    f72e:	370c      	adds	r7, #12
    f730:	46bd      	mov	sp, r7
    f732:	bc80      	pop	{r7}
    f734:	4770      	bx	lr
    f736:	bf00      	nop
    f738:	20001074 	.word	0x20001074

0000f73c <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    f73c:	b480      	push	{r7}
    f73e:	b083      	sub	sp, #12
    f740:	af00      	add	r7, sp, #0
    f742:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    f744:	687b      	ldr	r3, [r7, #4]
    f746:	4618      	mov	r0, r3
    f748:	370c      	adds	r7, #12
    f74a:	46bd      	mov	sp, r7
    f74c:	bc80      	pop	{r7}
    f74e:	4770      	bx	lr

0000f750 <_ZN13SPI_Syn_Class6EnableEv>:
	ptrSPISync=this;
	SPI=spiDesc;
}


int32_t SPI_Syn_Class::Enable(){
    f750:	b580      	push	{r7, lr}
    f752:	b082      	sub	sp, #8
    f754:	af00      	add	r7, sp, #0
    f756:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    f758:	687b      	ldr	r3, [r7, #4]
    f75a:	68da      	ldr	r2, [r3, #12]
    f75c:	687b      	ldr	r3, [r7, #4]
    f75e:	3310      	adds	r3, #16
    f760:	4619      	mov	r1, r3
    f762:	4610      	mov	r0, r2
    f764:	4b07      	ldr	r3, [pc, #28]	; (f784 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
    f766:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    f768:	687b      	ldr	r3, [r7, #4]
    f76a:	68db      	ldr	r3, [r3, #12]
    f76c:	4618      	mov	r0, r3
    f76e:	4b06      	ldr	r3, [pc, #24]	; (f788 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
    f770:	4798      	blx	r3
	ready=true;
    f772:	687b      	ldr	r3, [r7, #4]
    f774:	2201      	movs	r2, #1
    f776:	701a      	strb	r2, [r3, #0]
	return 0;
    f778:	2300      	movs	r3, #0
}
    f77a:	4618      	mov	r0, r3
    f77c:	3708      	adds	r7, #8
    f77e:	46bd      	mov	sp, r7
    f780:	bd80      	pop	{r7, pc}
    f782:	bf00      	nop
    f784:	00002c29 	.word	0x00002c29
    f788:	00002a9d 	.word	0x00002a9d

0000f78c <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
    f78c:	b580      	push	{r7, lr}
    f78e:	b086      	sub	sp, #24
    f790:	af00      	add	r7, sp, #0
    f792:	60f8      	str	r0, [r7, #12]
    f794:	60b9      	str	r1, [r7, #8]
    f796:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    f798:	68fb      	ldr	r3, [r7, #12]
    f79a:	2201      	movs	r2, #1
    f79c:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
    f79e:	68fb      	ldr	r3, [r7, #12]
    f7a0:	691b      	ldr	r3, [r3, #16]
    f7a2:	687a      	ldr	r2, [r7, #4]
    f7a4:	b292      	uxth	r2, r2
    f7a6:	68b9      	ldr	r1, [r7, #8]
    f7a8:	4618      	mov	r0, r3
    f7aa:	4b08      	ldr	r3, [pc, #32]	; (f7cc <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
    f7ac:	4798      	blx	r3
    f7ae:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    f7b0:	697b      	ldr	r3, [r7, #20]
    f7b2:	2b00      	cmp	r3, #0
    f7b4:	bf14      	ite	ne
    f7b6:	2301      	movne	r3, #1
    f7b8:	2300      	moveq	r3, #0
    f7ba:	b2da      	uxtb	r2, r3
    f7bc:	68fb      	ldr	r3, [r7, #12]
    f7be:	761a      	strb	r2, [r3, #24]
	 return w;
    f7c0:	697b      	ldr	r3, [r7, #20]
	
}
    f7c2:	4618      	mov	r0, r3
    f7c4:	3718      	adds	r7, #24
    f7c6:	46bd      	mov	sp, r7
    f7c8:	bd80      	pop	{r7, pc}
    f7ca:	bf00      	nop
    f7cc:	0000f835 	.word	0x0000f835

0000f7d0 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
    f7d0:	b580      	push	{r7, lr}
    f7d2:	b086      	sub	sp, #24
    f7d4:	af00      	add	r7, sp, #0
    f7d6:	60f8      	str	r0, [r7, #12]
    f7d8:	60b9      	str	r1, [r7, #8]
    f7da:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    f7dc:	68fb      	ldr	r3, [r7, #12]
    f7de:	2201      	movs	r2, #1
    f7e0:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
    f7e2:	68fb      	ldr	r3, [r7, #12]
    f7e4:	691b      	ldr	r3, [r3, #16]
    f7e6:	687a      	ldr	r2, [r7, #4]
    f7e8:	b292      	uxth	r2, r2
    f7ea:	68b9      	ldr	r1, [r7, #8]
    f7ec:	4618      	mov	r0, r3
    f7ee:	4b08      	ldr	r3, [pc, #32]	; (f810 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
    f7f0:	4798      	blx	r3
    f7f2:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    f7f4:	697b      	ldr	r3, [r7, #20]
    f7f6:	2b00      	cmp	r3, #0
    f7f8:	bf14      	ite	ne
    f7fa:	2301      	movne	r3, #1
    f7fc:	2300      	moveq	r3, #0
    f7fe:	b2da      	uxtb	r2, r3
    f800:	68fb      	ldr	r3, [r7, #12]
    f802:	765a      	strb	r2, [r3, #25]
	return  r;
    f804:	697b      	ldr	r3, [r7, #20]
}
    f806:	4618      	mov	r0, r3
    f808:	3718      	adds	r7, #24
    f80a:	46bd      	mov	sp, r7
    f80c:	bd80      	pop	{r7, pc}
    f80e:	bf00      	nop
    f810:	0000f885 	.word	0x0000f885

0000f814 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
    f814:	b580      	push	{r7, lr}
    f816:	b082      	sub	sp, #8
    f818:	af00      	add	r7, sp, #0
    f81a:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    f81c:	687b      	ldr	r3, [r7, #4]
    f81e:	68db      	ldr	r3, [r3, #12]
    f820:	4618      	mov	r0, r3
    f822:	4b03      	ldr	r3, [pc, #12]	; (f830 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
    f824:	4798      	blx	r3
	
}
    f826:	bf00      	nop
    f828:	3708      	adds	r7, #8
    f82a:	46bd      	mov	sp, r7
    f82c:	bd80      	pop	{r7, pc}
    f82e:	bf00      	nop
    f830:	00002ad9 	.word	0x00002ad9

0000f834 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    f834:	b580      	push	{r7, lr}
    f836:	b084      	sub	sp, #16
    f838:	af00      	add	r7, sp, #0
    f83a:	60f8      	str	r0, [r7, #12]
    f83c:	60b9      	str	r1, [r7, #8]
    f83e:	4613      	mov	r3, r2
    f840:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f842:	68fb      	ldr	r3, [r7, #12]
    f844:	2b00      	cmp	r3, #0
    f846:	d004      	beq.n	f852 <io_write+0x1e>
    f848:	68bb      	ldr	r3, [r7, #8]
    f84a:	2b00      	cmp	r3, #0
    f84c:	d001      	beq.n	f852 <io_write+0x1e>
    f84e:	2301      	movs	r3, #1
    f850:	e000      	b.n	f854 <io_write+0x20>
    f852:	2300      	movs	r3, #0
    f854:	f003 0301 	and.w	r3, r3, #1
    f858:	b2db      	uxtb	r3, r3
    f85a:	2234      	movs	r2, #52	; 0x34
    f85c:	4907      	ldr	r1, [pc, #28]	; (f87c <io_write+0x48>)
    f85e:	4618      	mov	r0, r3
    f860:	4b07      	ldr	r3, [pc, #28]	; (f880 <io_write+0x4c>)
    f862:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    f864:	68fb      	ldr	r3, [r7, #12]
    f866:	681b      	ldr	r3, [r3, #0]
    f868:	88fa      	ldrh	r2, [r7, #6]
    f86a:	68b9      	ldr	r1, [r7, #8]
    f86c:	68f8      	ldr	r0, [r7, #12]
    f86e:	4798      	blx	r3
    f870:	4603      	mov	r3, r0
}
    f872:	4618      	mov	r0, r3
    f874:	3710      	adds	r7, #16
    f876:	46bd      	mov	sp, r7
    f878:	bd80      	pop	{r7, pc}
    f87a:	bf00      	nop
    f87c:	00010260 	.word	0x00010260
    f880:	00003ab1 	.word	0x00003ab1

0000f884 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    f884:	b580      	push	{r7, lr}
    f886:	b084      	sub	sp, #16
    f888:	af00      	add	r7, sp, #0
    f88a:	60f8      	str	r0, [r7, #12]
    f88c:	60b9      	str	r1, [r7, #8]
    f88e:	4613      	mov	r3, r2
    f890:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f892:	68fb      	ldr	r3, [r7, #12]
    f894:	2b00      	cmp	r3, #0
    f896:	d004      	beq.n	f8a2 <io_read+0x1e>
    f898:	68bb      	ldr	r3, [r7, #8]
    f89a:	2b00      	cmp	r3, #0
    f89c:	d001      	beq.n	f8a2 <io_read+0x1e>
    f89e:	2301      	movs	r3, #1
    f8a0:	e000      	b.n	f8a4 <io_read+0x20>
    f8a2:	2300      	movs	r3, #0
    f8a4:	f003 0301 	and.w	r3, r3, #1
    f8a8:	b2db      	uxtb	r3, r3
    f8aa:	223d      	movs	r2, #61	; 0x3d
    f8ac:	4907      	ldr	r1, [pc, #28]	; (f8cc <io_read+0x48>)
    f8ae:	4618      	mov	r0, r3
    f8b0:	4b07      	ldr	r3, [pc, #28]	; (f8d0 <io_read+0x4c>)
    f8b2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    f8b4:	68fb      	ldr	r3, [r7, #12]
    f8b6:	685b      	ldr	r3, [r3, #4]
    f8b8:	88fa      	ldrh	r2, [r7, #6]
    f8ba:	68b9      	ldr	r1, [r7, #8]
    f8bc:	68f8      	ldr	r0, [r7, #12]
    f8be:	4798      	blx	r3
    f8c0:	4603      	mov	r3, r0
}
    f8c2:	4618      	mov	r0, r3
    f8c4:	3710      	adds	r7, #16
    f8c6:	46bd      	mov	sp, r7
    f8c8:	bd80      	pop	{r7, pc}
    f8ca:	bf00      	nop
    f8cc:	00010260 	.word	0x00010260
    f8d0:	00003ab1 	.word	0x00003ab1

0000f8d4 <__aeabi_atexit>:
    f8d4:	460b      	mov	r3, r1
    f8d6:	4601      	mov	r1, r0
    f8d8:	4618      	mov	r0, r3
    f8da:	f000 b801 	b.w	f8e0 <__cxa_atexit>
    f8de:	bf00      	nop

0000f8e0 <__cxa_atexit>:
    f8e0:	4613      	mov	r3, r2
    f8e2:	460a      	mov	r2, r1
    f8e4:	4601      	mov	r1, r0
    f8e6:	2002      	movs	r0, #2
    f8e8:	f000 b998 	b.w	fc1c <__register_exitproc>

0000f8ec <ffs>:
    f8ec:	b140      	cbz	r0, f900 <ffs+0x14>
    f8ee:	2300      	movs	r3, #0
    f8f0:	fa40 f103 	asr.w	r1, r0, r3
    f8f4:	1c5a      	adds	r2, r3, #1
    f8f6:	07c9      	lsls	r1, r1, #31
    f8f8:	4613      	mov	r3, r2
    f8fa:	d5f9      	bpl.n	f8f0 <ffs+0x4>
    f8fc:	4610      	mov	r0, r2
    f8fe:	4770      	bx	lr
    f900:	4602      	mov	r2, r0
    f902:	4610      	mov	r0, r2
    f904:	4770      	bx	lr
    f906:	bf00      	nop

0000f908 <__libc_init_array>:
    f908:	b570      	push	{r4, r5, r6, lr}
    f90a:	4e0f      	ldr	r6, [pc, #60]	; (f948 <__libc_init_array+0x40>)
    f90c:	4d0f      	ldr	r5, [pc, #60]	; (f94c <__libc_init_array+0x44>)
    f90e:	1b76      	subs	r6, r6, r5
    f910:	10b6      	asrs	r6, r6, #2
    f912:	bf18      	it	ne
    f914:	2400      	movne	r4, #0
    f916:	d005      	beq.n	f924 <__libc_init_array+0x1c>
    f918:	3401      	adds	r4, #1
    f91a:	f855 3b04 	ldr.w	r3, [r5], #4
    f91e:	4798      	blx	r3
    f920:	42a6      	cmp	r6, r4
    f922:	d1f9      	bne.n	f918 <__libc_init_array+0x10>
    f924:	4e0a      	ldr	r6, [pc, #40]	; (f950 <__libc_init_array+0x48>)
    f926:	4d0b      	ldr	r5, [pc, #44]	; (f954 <__libc_init_array+0x4c>)
    f928:	1b76      	subs	r6, r6, r5
    f92a:	f000 fca5 	bl	10278 <_init>
    f92e:	10b6      	asrs	r6, r6, #2
    f930:	bf18      	it	ne
    f932:	2400      	movne	r4, #0
    f934:	d006      	beq.n	f944 <__libc_init_array+0x3c>
    f936:	3401      	adds	r4, #1
    f938:	f855 3b04 	ldr.w	r3, [r5], #4
    f93c:	4798      	blx	r3
    f93e:	42a6      	cmp	r6, r4
    f940:	d1f9      	bne.n	f936 <__libc_init_array+0x2e>
    f942:	bd70      	pop	{r4, r5, r6, pc}
    f944:	bd70      	pop	{r4, r5, r6, pc}
    f946:	bf00      	nop
    f948:	00010284 	.word	0x00010284
    f94c:	00010284 	.word	0x00010284
    f950:	000102a4 	.word	0x000102a4
    f954:	00010284 	.word	0x00010284

0000f958 <memcpy>:
    f958:	4684      	mov	ip, r0
    f95a:	ea41 0300 	orr.w	r3, r1, r0
    f95e:	f013 0303 	ands.w	r3, r3, #3
    f962:	d16d      	bne.n	fa40 <memcpy+0xe8>
    f964:	3a40      	subs	r2, #64	; 0x40
    f966:	d341      	bcc.n	f9ec <memcpy+0x94>
    f968:	f851 3b04 	ldr.w	r3, [r1], #4
    f96c:	f840 3b04 	str.w	r3, [r0], #4
    f970:	f851 3b04 	ldr.w	r3, [r1], #4
    f974:	f840 3b04 	str.w	r3, [r0], #4
    f978:	f851 3b04 	ldr.w	r3, [r1], #4
    f97c:	f840 3b04 	str.w	r3, [r0], #4
    f980:	f851 3b04 	ldr.w	r3, [r1], #4
    f984:	f840 3b04 	str.w	r3, [r0], #4
    f988:	f851 3b04 	ldr.w	r3, [r1], #4
    f98c:	f840 3b04 	str.w	r3, [r0], #4
    f990:	f851 3b04 	ldr.w	r3, [r1], #4
    f994:	f840 3b04 	str.w	r3, [r0], #4
    f998:	f851 3b04 	ldr.w	r3, [r1], #4
    f99c:	f840 3b04 	str.w	r3, [r0], #4
    f9a0:	f851 3b04 	ldr.w	r3, [r1], #4
    f9a4:	f840 3b04 	str.w	r3, [r0], #4
    f9a8:	f851 3b04 	ldr.w	r3, [r1], #4
    f9ac:	f840 3b04 	str.w	r3, [r0], #4
    f9b0:	f851 3b04 	ldr.w	r3, [r1], #4
    f9b4:	f840 3b04 	str.w	r3, [r0], #4
    f9b8:	f851 3b04 	ldr.w	r3, [r1], #4
    f9bc:	f840 3b04 	str.w	r3, [r0], #4
    f9c0:	f851 3b04 	ldr.w	r3, [r1], #4
    f9c4:	f840 3b04 	str.w	r3, [r0], #4
    f9c8:	f851 3b04 	ldr.w	r3, [r1], #4
    f9cc:	f840 3b04 	str.w	r3, [r0], #4
    f9d0:	f851 3b04 	ldr.w	r3, [r1], #4
    f9d4:	f840 3b04 	str.w	r3, [r0], #4
    f9d8:	f851 3b04 	ldr.w	r3, [r1], #4
    f9dc:	f840 3b04 	str.w	r3, [r0], #4
    f9e0:	f851 3b04 	ldr.w	r3, [r1], #4
    f9e4:	f840 3b04 	str.w	r3, [r0], #4
    f9e8:	3a40      	subs	r2, #64	; 0x40
    f9ea:	d2bd      	bcs.n	f968 <memcpy+0x10>
    f9ec:	3230      	adds	r2, #48	; 0x30
    f9ee:	d311      	bcc.n	fa14 <memcpy+0xbc>
    f9f0:	f851 3b04 	ldr.w	r3, [r1], #4
    f9f4:	f840 3b04 	str.w	r3, [r0], #4
    f9f8:	f851 3b04 	ldr.w	r3, [r1], #4
    f9fc:	f840 3b04 	str.w	r3, [r0], #4
    fa00:	f851 3b04 	ldr.w	r3, [r1], #4
    fa04:	f840 3b04 	str.w	r3, [r0], #4
    fa08:	f851 3b04 	ldr.w	r3, [r1], #4
    fa0c:	f840 3b04 	str.w	r3, [r0], #4
    fa10:	3a10      	subs	r2, #16
    fa12:	d2ed      	bcs.n	f9f0 <memcpy+0x98>
    fa14:	320c      	adds	r2, #12
    fa16:	d305      	bcc.n	fa24 <memcpy+0xcc>
    fa18:	f851 3b04 	ldr.w	r3, [r1], #4
    fa1c:	f840 3b04 	str.w	r3, [r0], #4
    fa20:	3a04      	subs	r2, #4
    fa22:	d2f9      	bcs.n	fa18 <memcpy+0xc0>
    fa24:	3204      	adds	r2, #4
    fa26:	d008      	beq.n	fa3a <memcpy+0xe2>
    fa28:	07d2      	lsls	r2, r2, #31
    fa2a:	bf1c      	itt	ne
    fa2c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    fa30:	f800 3b01 	strbne.w	r3, [r0], #1
    fa34:	d301      	bcc.n	fa3a <memcpy+0xe2>
    fa36:	880b      	ldrh	r3, [r1, #0]
    fa38:	8003      	strh	r3, [r0, #0]
    fa3a:	4660      	mov	r0, ip
    fa3c:	4770      	bx	lr
    fa3e:	bf00      	nop
    fa40:	2a08      	cmp	r2, #8
    fa42:	d313      	bcc.n	fa6c <memcpy+0x114>
    fa44:	078b      	lsls	r3, r1, #30
    fa46:	d08d      	beq.n	f964 <memcpy+0xc>
    fa48:	f010 0303 	ands.w	r3, r0, #3
    fa4c:	d08a      	beq.n	f964 <memcpy+0xc>
    fa4e:	f1c3 0304 	rsb	r3, r3, #4
    fa52:	1ad2      	subs	r2, r2, r3
    fa54:	07db      	lsls	r3, r3, #31
    fa56:	bf1c      	itt	ne
    fa58:	f811 3b01 	ldrbne.w	r3, [r1], #1
    fa5c:	f800 3b01 	strbne.w	r3, [r0], #1
    fa60:	d380      	bcc.n	f964 <memcpy+0xc>
    fa62:	f831 3b02 	ldrh.w	r3, [r1], #2
    fa66:	f820 3b02 	strh.w	r3, [r0], #2
    fa6a:	e77b      	b.n	f964 <memcpy+0xc>
    fa6c:	3a04      	subs	r2, #4
    fa6e:	d3d9      	bcc.n	fa24 <memcpy+0xcc>
    fa70:	3a01      	subs	r2, #1
    fa72:	f811 3b01 	ldrb.w	r3, [r1], #1
    fa76:	f800 3b01 	strb.w	r3, [r0], #1
    fa7a:	d2f9      	bcs.n	fa70 <memcpy+0x118>
    fa7c:	780b      	ldrb	r3, [r1, #0]
    fa7e:	7003      	strb	r3, [r0, #0]
    fa80:	784b      	ldrb	r3, [r1, #1]
    fa82:	7043      	strb	r3, [r0, #1]
    fa84:	788b      	ldrb	r3, [r1, #2]
    fa86:	7083      	strb	r3, [r0, #2]
    fa88:	4660      	mov	r0, ip
    fa8a:	4770      	bx	lr

0000fa8c <memset>:
    fa8c:	b470      	push	{r4, r5, r6}
    fa8e:	0786      	lsls	r6, r0, #30
    fa90:	d046      	beq.n	fb20 <memset+0x94>
    fa92:	1e54      	subs	r4, r2, #1
    fa94:	2a00      	cmp	r2, #0
    fa96:	d041      	beq.n	fb1c <memset+0x90>
    fa98:	b2ca      	uxtb	r2, r1
    fa9a:	4603      	mov	r3, r0
    fa9c:	e002      	b.n	faa4 <memset+0x18>
    fa9e:	f114 34ff 	adds.w	r4, r4, #4294967295
    faa2:	d33b      	bcc.n	fb1c <memset+0x90>
    faa4:	f803 2b01 	strb.w	r2, [r3], #1
    faa8:	079d      	lsls	r5, r3, #30
    faaa:	d1f8      	bne.n	fa9e <memset+0x12>
    faac:	2c03      	cmp	r4, #3
    faae:	d92e      	bls.n	fb0e <memset+0x82>
    fab0:	b2cd      	uxtb	r5, r1
    fab2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    fab6:	2c0f      	cmp	r4, #15
    fab8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    fabc:	d919      	bls.n	faf2 <memset+0x66>
    fabe:	f103 0210 	add.w	r2, r3, #16
    fac2:	4626      	mov	r6, r4
    fac4:	3e10      	subs	r6, #16
    fac6:	2e0f      	cmp	r6, #15
    fac8:	f842 5c10 	str.w	r5, [r2, #-16]
    facc:	f842 5c0c 	str.w	r5, [r2, #-12]
    fad0:	f842 5c08 	str.w	r5, [r2, #-8]
    fad4:	f842 5c04 	str.w	r5, [r2, #-4]
    fad8:	f102 0210 	add.w	r2, r2, #16
    fadc:	d8f2      	bhi.n	fac4 <memset+0x38>
    fade:	f1a4 0210 	sub.w	r2, r4, #16
    fae2:	f022 020f 	bic.w	r2, r2, #15
    fae6:	f004 040f 	and.w	r4, r4, #15
    faea:	3210      	adds	r2, #16
    faec:	2c03      	cmp	r4, #3
    faee:	4413      	add	r3, r2
    faf0:	d90d      	bls.n	fb0e <memset+0x82>
    faf2:	461e      	mov	r6, r3
    faf4:	4622      	mov	r2, r4
    faf6:	3a04      	subs	r2, #4
    faf8:	2a03      	cmp	r2, #3
    fafa:	f846 5b04 	str.w	r5, [r6], #4
    fafe:	d8fa      	bhi.n	faf6 <memset+0x6a>
    fb00:	1f22      	subs	r2, r4, #4
    fb02:	f022 0203 	bic.w	r2, r2, #3
    fb06:	3204      	adds	r2, #4
    fb08:	4413      	add	r3, r2
    fb0a:	f004 0403 	and.w	r4, r4, #3
    fb0e:	b12c      	cbz	r4, fb1c <memset+0x90>
    fb10:	b2c9      	uxtb	r1, r1
    fb12:	441c      	add	r4, r3
    fb14:	f803 1b01 	strb.w	r1, [r3], #1
    fb18:	429c      	cmp	r4, r3
    fb1a:	d1fb      	bne.n	fb14 <memset+0x88>
    fb1c:	bc70      	pop	{r4, r5, r6}
    fb1e:	4770      	bx	lr
    fb20:	4614      	mov	r4, r2
    fb22:	4603      	mov	r3, r0
    fb24:	e7c2      	b.n	faac <memset+0x20>
    fb26:	bf00      	nop
	...

0000fb40 <strlen>:
    fb40:	f890 f000 	pld	[r0]
    fb44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    fb48:	f020 0107 	bic.w	r1, r0, #7
    fb4c:	f06f 0c00 	mvn.w	ip, #0
    fb50:	f010 0407 	ands.w	r4, r0, #7
    fb54:	f891 f020 	pld	[r1, #32]
    fb58:	f040 8049 	bne.w	fbee <strlen+0xae>
    fb5c:	f04f 0400 	mov.w	r4, #0
    fb60:	f06f 0007 	mvn.w	r0, #7
    fb64:	e9d1 2300 	ldrd	r2, r3, [r1]
    fb68:	f891 f040 	pld	[r1, #64]	; 0x40
    fb6c:	f100 0008 	add.w	r0, r0, #8
    fb70:	fa82 f24c 	uadd8	r2, r2, ip
    fb74:	faa4 f28c 	sel	r2, r4, ip
    fb78:	fa83 f34c 	uadd8	r3, r3, ip
    fb7c:	faa2 f38c 	sel	r3, r2, ip
    fb80:	bb4b      	cbnz	r3, fbd6 <strlen+0x96>
    fb82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    fb86:	fa82 f24c 	uadd8	r2, r2, ip
    fb8a:	f100 0008 	add.w	r0, r0, #8
    fb8e:	faa4 f28c 	sel	r2, r4, ip
    fb92:	fa83 f34c 	uadd8	r3, r3, ip
    fb96:	faa2 f38c 	sel	r3, r2, ip
    fb9a:	b9e3      	cbnz	r3, fbd6 <strlen+0x96>
    fb9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    fba0:	fa82 f24c 	uadd8	r2, r2, ip
    fba4:	f100 0008 	add.w	r0, r0, #8
    fba8:	faa4 f28c 	sel	r2, r4, ip
    fbac:	fa83 f34c 	uadd8	r3, r3, ip
    fbb0:	faa2 f38c 	sel	r3, r2, ip
    fbb4:	b97b      	cbnz	r3, fbd6 <strlen+0x96>
    fbb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    fbba:	f101 0120 	add.w	r1, r1, #32
    fbbe:	fa82 f24c 	uadd8	r2, r2, ip
    fbc2:	f100 0008 	add.w	r0, r0, #8
    fbc6:	faa4 f28c 	sel	r2, r4, ip
    fbca:	fa83 f34c 	uadd8	r3, r3, ip
    fbce:	faa2 f38c 	sel	r3, r2, ip
    fbd2:	2b00      	cmp	r3, #0
    fbd4:	d0c6      	beq.n	fb64 <strlen+0x24>
    fbd6:	2a00      	cmp	r2, #0
    fbd8:	bf04      	itt	eq
    fbda:	3004      	addeq	r0, #4
    fbdc:	461a      	moveq	r2, r3
    fbde:	ba12      	rev	r2, r2
    fbe0:	fab2 f282 	clz	r2, r2
    fbe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    fbe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    fbec:	4770      	bx	lr
    fbee:	e9d1 2300 	ldrd	r2, r3, [r1]
    fbf2:	f004 0503 	and.w	r5, r4, #3
    fbf6:	f1c4 0000 	rsb	r0, r4, #0
    fbfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    fbfe:	f014 0f04 	tst.w	r4, #4
    fc02:	f891 f040 	pld	[r1, #64]	; 0x40
    fc06:	fa0c f505 	lsl.w	r5, ip, r5
    fc0a:	ea62 0205 	orn	r2, r2, r5
    fc0e:	bf1c      	itt	ne
    fc10:	ea63 0305 	ornne	r3, r3, r5
    fc14:	4662      	movne	r2, ip
    fc16:	f04f 0400 	mov.w	r4, #0
    fc1a:	e7a9      	b.n	fb70 <strlen+0x30>

0000fc1c <__register_exitproc>:
    fc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fc20:	4d2c      	ldr	r5, [pc, #176]	; (fcd4 <__register_exitproc+0xb8>)
    fc22:	4606      	mov	r6, r0
    fc24:	6828      	ldr	r0, [r5, #0]
    fc26:	4698      	mov	r8, r3
    fc28:	460f      	mov	r7, r1
    fc2a:	4691      	mov	r9, r2
    fc2c:	f000 f882 	bl	fd34 <__retarget_lock_acquire_recursive>
    fc30:	4b29      	ldr	r3, [pc, #164]	; (fcd8 <__register_exitproc+0xbc>)
    fc32:	681c      	ldr	r4, [r3, #0]
    fc34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    fc38:	2b00      	cmp	r3, #0
    fc3a:	d03e      	beq.n	fcba <__register_exitproc+0x9e>
    fc3c:	685a      	ldr	r2, [r3, #4]
    fc3e:	2a1f      	cmp	r2, #31
    fc40:	dc1c      	bgt.n	fc7c <__register_exitproc+0x60>
    fc42:	f102 0e01 	add.w	lr, r2, #1
    fc46:	b176      	cbz	r6, fc66 <__register_exitproc+0x4a>
    fc48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    fc4c:	2401      	movs	r4, #1
    fc4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    fc52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    fc56:	4094      	lsls	r4, r2
    fc58:	4320      	orrs	r0, r4
    fc5a:	2e02      	cmp	r6, #2
    fc5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    fc60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    fc64:	d023      	beq.n	fcae <__register_exitproc+0x92>
    fc66:	3202      	adds	r2, #2
    fc68:	f8c3 e004 	str.w	lr, [r3, #4]
    fc6c:	6828      	ldr	r0, [r5, #0]
    fc6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    fc72:	f000 f861 	bl	fd38 <__retarget_lock_release_recursive>
    fc76:	2000      	movs	r0, #0
    fc78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fc7c:	4b17      	ldr	r3, [pc, #92]	; (fcdc <__register_exitproc+0xc0>)
    fc7e:	b30b      	cbz	r3, fcc4 <__register_exitproc+0xa8>
    fc80:	f44f 70c8 	mov.w	r0, #400	; 0x190
    fc84:	f7ff fd3a 	bl	f6fc <malloc>
    fc88:	4603      	mov	r3, r0
    fc8a:	b1d8      	cbz	r0, fcc4 <__register_exitproc+0xa8>
    fc8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    fc90:	6002      	str	r2, [r0, #0]
    fc92:	2100      	movs	r1, #0
    fc94:	6041      	str	r1, [r0, #4]
    fc96:	460a      	mov	r2, r1
    fc98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    fc9c:	f04f 0e01 	mov.w	lr, #1
    fca0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    fca4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    fca8:	2e00      	cmp	r6, #0
    fcaa:	d0dc      	beq.n	fc66 <__register_exitproc+0x4a>
    fcac:	e7cc      	b.n	fc48 <__register_exitproc+0x2c>
    fcae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    fcb2:	430c      	orrs	r4, r1
    fcb4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    fcb8:	e7d5      	b.n	fc66 <__register_exitproc+0x4a>
    fcba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    fcbe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    fcc2:	e7bb      	b.n	fc3c <__register_exitproc+0x20>
    fcc4:	6828      	ldr	r0, [r5, #0]
    fcc6:	f000 f837 	bl	fd38 <__retarget_lock_release_recursive>
    fcca:	f04f 30ff 	mov.w	r0, #4294967295
    fcce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fcd2:	bf00      	nop
    fcd4:	20000608 	.word	0x20000608
    fcd8:	00010274 	.word	0x00010274
    fcdc:	0000f6fd 	.word	0x0000f6fd

0000fce0 <register_fini>:
    fce0:	4b02      	ldr	r3, [pc, #8]	; (fcec <register_fini+0xc>)
    fce2:	b113      	cbz	r3, fcea <register_fini+0xa>
    fce4:	4802      	ldr	r0, [pc, #8]	; (fcf0 <register_fini+0x10>)
    fce6:	f000 b805 	b.w	fcf4 <atexit>
    fcea:	4770      	bx	lr
    fcec:	00000000 	.word	0x00000000
    fcf0:	0000fd01 	.word	0x0000fd01

0000fcf4 <atexit>:
    fcf4:	2300      	movs	r3, #0
    fcf6:	4601      	mov	r1, r0
    fcf8:	461a      	mov	r2, r3
    fcfa:	4618      	mov	r0, r3
    fcfc:	f7ff bf8e 	b.w	fc1c <__register_exitproc>

0000fd00 <__libc_fini_array>:
    fd00:	b538      	push	{r3, r4, r5, lr}
    fd02:	4c0a      	ldr	r4, [pc, #40]	; (fd2c <__libc_fini_array+0x2c>)
    fd04:	4d0a      	ldr	r5, [pc, #40]	; (fd30 <__libc_fini_array+0x30>)
    fd06:	1b64      	subs	r4, r4, r5
    fd08:	10a4      	asrs	r4, r4, #2
    fd0a:	d00a      	beq.n	fd22 <__libc_fini_array+0x22>
    fd0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    fd10:	3b01      	subs	r3, #1
    fd12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    fd16:	3c01      	subs	r4, #1
    fd18:	f855 3904 	ldr.w	r3, [r5], #-4
    fd1c:	4798      	blx	r3
    fd1e:	2c00      	cmp	r4, #0
    fd20:	d1f9      	bne.n	fd16 <__libc_fini_array+0x16>
    fd22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fd26:	f000 babd 	b.w	102a4 <_fini>
    fd2a:	bf00      	nop
    fd2c:	000102b4 	.word	0x000102b4
    fd30:	000102b0 	.word	0x000102b0

0000fd34 <__retarget_lock_acquire_recursive>:
    fd34:	4770      	bx	lr
    fd36:	bf00      	nop

0000fd38 <__retarget_lock_release_recursive>:
    fd38:	4770      	bx	lr
    fd3a:	bf00      	nop
    fd3c:	00000a0d 	.word	0x00000a0d
    fd40:	202a2a2a 	.word	0x202a2a2a
    fd44:	72617453 	.word	0x72617453
    fd48:	20705574 	.word	0x20705574
    fd4c:	6f676c41 	.word	0x6f676c41
    fd50:	68746972 	.word	0x68746972
    fd54:	206e656d 	.word	0x206e656d
    fd58:	74736554 	.word	0x74736554
    fd5c:	2a2a2a20 	.word	0x2a2a2a20
    fd60:	00000000 	.word	0x00000000
    fd64:	202a2a2a 	.word	0x202a2a2a
    fd68:	65746144 	.word	0x65746144
    fd6c:	0020203a 	.word	0x0020203a
    fd70:	2074634f 	.word	0x2074634f
    fd74:	32203832 	.word	0x32203832
    fd78:	00303230 	.word	0x00303230
    fd7c:	6d695420 	.word	0x6d695420
    fd80:	00203a65 	.word	0x00203a65
    fd84:	333a3131 	.word	0x333a3131
    fd88:	37333a31 	.word	0x37333a31
    fd8c:	00000000 	.word	0x00000000
    fd90:	62616e45 	.word	0x62616e45
    fd94:	676e696c 	.word	0x676e696c
    fd98:	61654820 	.word	0x61654820
    fd9c:	3a726574 	.word	0x3a726574
    fda0:	00000020 	.word	0x00000020
    fda4:	00092e20 	.word	0x00092e20
    fda8:	74616548 	.word	0x74616548
    fdac:	00207265 	.word	0x00207265
    fdb0:	61745320 	.word	0x61745320
    fdb4:	20737574 	.word	0x20737574
    fdb8:	0000003a 	.word	0x0000003a
    fdbc:	682f2e2e 	.word	0x682f2e2e
    fdc0:	702f6c70 	.word	0x702f6c70
    fdc4:	2f74726f 	.word	0x2f74726f
    fdc8:	5f6c7068 	.word	0x5f6c7068
    fdcc:	6f697067 	.word	0x6f697067
    fdd0:	7361625f 	.word	0x7361625f
    fdd4:	00682e65 	.word	0x00682e65
    fdd8:	682f2e2e 	.word	0x682f2e2e
    fddc:	692f6c61 	.word	0x692f6c61
    fde0:	756c636e 	.word	0x756c636e
    fde4:	682f6564 	.word	0x682f6564
    fde8:	775f6c61 	.word	0x775f6c61
    fdec:	682e7464 	.word	0x682e7464
    fdf0:	00000000 	.word	0x00000000
    fdf4:	682f2e2e 	.word	0x682f2e2e
    fdf8:	732f6c61 	.word	0x732f6c61
    fdfc:	682f6372 	.word	0x682f6372
    fe00:	635f6c61 	.word	0x635f6c61
    fe04:	6e656c61 	.word	0x6e656c61
    fe08:	2e726164 	.word	0x2e726164
    fe0c:	00000063 	.word	0x00000063
    fe10:	682f2e2e 	.word	0x682f2e2e
    fe14:	732f6c61 	.word	0x732f6c61
    fe18:	682f6372 	.word	0x682f6372
    fe1c:	635f6c61 	.word	0x635f6c61
    fe20:	615f6e61 	.word	0x615f6e61
    fe24:	636e7973 	.word	0x636e7973
    fe28:	0000632e 	.word	0x0000632e
    fe2c:	682f2e2e 	.word	0x682f2e2e
    fe30:	732f6c61 	.word	0x732f6c61
    fe34:	682f6372 	.word	0x682f6372
    fe38:	635f6c61 	.word	0x635f6c61
    fe3c:	735f6372 	.word	0x735f6372
    fe40:	2e636e79 	.word	0x2e636e79
    fe44:	00000063 	.word	0x00000063
    fe48:	682f2e2e 	.word	0x682f2e2e
    fe4c:	732f6c61 	.word	0x732f6c61
    fe50:	682f6372 	.word	0x682f6372
    fe54:	695f6c61 	.word	0x695f6c61
    fe58:	6d5f6332 	.word	0x6d5f6332
    fe5c:	7973615f 	.word	0x7973615f
    fe60:	632e636e 	.word	0x632e636e
    fe64:	00000000 	.word	0x00000000
    fe68:	682f2e2e 	.word	0x682f2e2e
    fe6c:	732f6c61 	.word	0x732f6c61
    fe70:	682f6372 	.word	0x682f6372
    fe74:	695f6c61 	.word	0x695f6c61
    fe78:	6d5f6332 	.word	0x6d5f6332
    fe7c:	6e79735f 	.word	0x6e79735f
    fe80:	00632e63 	.word	0x00632e63
    fe84:	682f2e2e 	.word	0x682f2e2e
    fe88:	732f6c61 	.word	0x732f6c61
    fe8c:	682f6372 	.word	0x682f6372
    fe90:	705f6c61 	.word	0x705f6c61
    fe94:	632e6d77 	.word	0x632e6d77
    fe98:	00000000 	.word	0x00000000
    fe9c:	682f2e2e 	.word	0x682f2e2e
    fea0:	732f6c61 	.word	0x732f6c61
    fea4:	682f6372 	.word	0x682f6372
    fea8:	715f6c61 	.word	0x715f6c61
    feac:	5f697073 	.word	0x5f697073
    feb0:	636e7973 	.word	0x636e7973
    feb4:	0000632e 	.word	0x0000632e
    feb8:	682f2e2e 	.word	0x682f2e2e
    febc:	732f6c61 	.word	0x732f6c61
    fec0:	682f6372 	.word	0x682f6372
    fec4:	735f6c61 	.word	0x735f6c61
    fec8:	6d5f6970 	.word	0x6d5f6970
    fecc:	6e79735f 	.word	0x6e79735f
    fed0:	00632e63 	.word	0x00632e63
    fed4:	682f2e2e 	.word	0x682f2e2e
    fed8:	732f6c61 	.word	0x732f6c61
    fedc:	682f6372 	.word	0x682f6372
    fee0:	745f6c61 	.word	0x745f6c61
    fee4:	72656d69 	.word	0x72656d69
    fee8:	0000632e 	.word	0x0000632e
    feec:	682f2e2e 	.word	0x682f2e2e
    fef0:	752f6c61 	.word	0x752f6c61
    fef4:	736c6974 	.word	0x736c6974
    fef8:	6372732f 	.word	0x6372732f
    fefc:	6974752f 	.word	0x6974752f
    ff00:	6c5f736c 	.word	0x6c5f736c
    ff04:	2e747369 	.word	0x2e747369
    ff08:	00000063 	.word	0x00000063

0000ff0c <_map>:
    ff0c:	00000000 00000040 00000003 00000003     ....@...........
    ff1c:	00000004 00000004 00000005 00000005     ................
    ff2c:	00000006 00000056 00000007 00000057     ....V.......W...
    ff3c:	00000008 00000028 00000009 00000029     ....(.......)...
    ff4c:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    ff5c:	632e6369 00000000                       ic.c....

0000ff64 <user_mux_confs>:
    ff64:	00020100 00000000 00000000 00000000     ................
	...

0000ffa8 <channel_confs>:
    ffa8:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000ffe8 <interrupt_cfg>:
	...
   10068:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   10078:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   10088:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   10098:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   100a8:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   100b8:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   100c8:	43000400 43000800 43000c00              ...C...C...C

000100d4 <sercomspi_regs>:
   100d4:	0020000c 00020000 00000000 01ff0001     .. .............
   100e4:	30000c04 02000000 00000000 ff00ef00     ...0............
   100f4:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   10104:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   10114:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   10124:	43001400 43001800                       ...C...C

0001012c <_usb_ep_cfgs>:
   1012c:	20000854 00000000 00000040 20000894     T.. ....@...... 
   1013c:	200008d4 00400040 20000914 20000954     ... @.@.... T.. 
   1014c:	00400040 20000994 200009d4 00400040     @.@.... ... @.@.
   1015c:	20000a14 20000a54 00400040 00000804     ... T.. @.@.....
   1016c:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1017c:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1018c:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1019c:	7361625f 00682e65                       _base.h.

000101a4 <n25q256a_interface>:
   101a4:	0000c04d 0000c0f1 0000c201 0000c3b9     M...............
   101b4:	0000c449 752f2e2e 642f6273 63697665     I...../usb/devic
   101c4:	73752f65 2e636462 00000063              e/usbdc.c...

000101d0 <defaultParameters>:
   101d0:	00000040                                @...

000101d4 <defaultPreferences>:
   101d4:	000000fa 00000032                       ....2...

000101dc <_ZTV9CDC_Class>:
	...
   101e4:	0000eca9 0000ed89 0000e8fd 0000ec71     ............q...
   101f4:	0000ee21 0000ec35 0000eb19 0000eb69     !...5.......i...
   10204:	0000ec91 0000ecf1                       ........

0001020c <_ZTV6Stream>:
	...
   10214:	0000f711 0000eef1 0000e8fd 0000e911     ................
   10224:	0000f711 0000f711 0000f711 2e257830     ............0x%.
   10234:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   10244:	0066766f                                ovf.

00010248 <_ZTV5Print>:
	...
   10250:	0000f711 0000eef1 0000e8fd 0000e911     ................
   10260:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   10270:	00632e6f                                o.c.

00010274 <_global_impure_ptr>:
   10274:	200001e0                                ... 

00010278 <_init>:
   10278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1027a:	bf00      	nop
   1027c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1027e:	bc08      	pop	{r3}
   10280:	469e      	mov	lr, r3
   10282:	4770      	bx	lr

00010284 <__init_array_start>:
   10284:	0000fce1 	.word	0x0000fce1

00010288 <__frame_dummy_init_array_entry>:
   10288:	00000289 000004fd 00000625 0000e68d     ........%.......
   10298:	0000e8c5 0000eea1 0000f6e9              ............

000102a4 <_fini>:
   102a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   102a6:	bf00      	nop
   102a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   102aa:	bc08      	pop	{r3}
   102ac:	469e      	mov	lr, r3
   102ae:	4770      	bx	lr

000102b0 <__fini_array_start>:
   102b0:	00000265 	.word	0x00000265
