
Event_Manager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010cd8  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00010cd8  00010cd8  00020cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  00010ce0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003063c  2**0
                  CONTENTS
  5 .bss          0000a220  20000640  00011320  0003063c  2**3
                  ALLOC
  6 .stack        00010000  2000a860  0001b540  0003063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0007de71  00000000  00000000  000306c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b165  00000000  00000000  000ae534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001d2d6  00000000  00000000  000b9699  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003390  00000000  00000000  000d696f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002fd8  00000000  00000000  000d9cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000510eb  00000000  00000000  000dccd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003ffac  00000000  00000000  0012ddc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013f786  00000000  00000000  0016dd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d4b0  00000000  00000000  002ad4f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 a8 01 20 a9 03 00 00 a5 03 00 00 a5 03 00 00     `.. ............
      10:	a5 03 00 00 a5 03 00 00 a5 03 00 00 00 00 00 00     ................
	...
      2c:	a5 03 00 00 a5 03 00 00 00 00 00 00 a5 03 00 00     ................
      3c:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
      4c:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
      5c:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
      6c:	59 61 00 00 01 4e 00 00 11 4e 00 00 a5 03 00 00     Ya...N...N......
      7c:	21 4e 00 00 31 4e 00 00 41 4e 00 00 51 4e 00 00     !N..1N..AN..QN..
      8c:	61 4e 00 00 71 4e 00 00 81 4e 00 00 a5 03 00 00     aN..qN...N......
      9c:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
      ac:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
      bc:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
      cc:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
      dc:	a5 03 00 00 a5 03 00 00 a5 03 00 00 00 00 00 00     ................
	...
      f4:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     104:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     114:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     124:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     134:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     144:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     154:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     164:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     174:	a5 03 00 00 a5 03 00 00 45 42 00 00 95 b0 00 00     ........EB......
     184:	a5 b0 00 00 b5 b0 00 00 c5 b0 00 00 a5 03 00 00     ................
     194:	d5 7a 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     .z..............
     1a4:	a5 03 00 00 a5 03 00 00 a5 03 00 00 f1 7a 00 00     .............z..
     1b4:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     1c4:	0d 7b 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     .{..............
     1d4:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     1e4:	a5 03 00 00 a5 03 00 00 91 87 00 00 a5 03 00 00     ................
     1f4:	ad 87 00 00 a5 03 00 00 c9 87 00 00 e5 87 00 00     ................
     204:	01 88 00 00 1d 88 00 00 a5 03 00 00 a5 03 00 00     ................
     214:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     224:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     234:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     244:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................
     254:	a5 03 00 00 a5 03 00 00 a5 03 00 00 a5 03 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000640 	.word	0x20000640
     280:	00000000 	.word	0x00000000
     284:	00010ce0 	.word	0x00010ce0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00010ce0 	.word	0x00010ce0
     2c4:	20000644 	.word	0x20000644
     2c8:	00010ce0 	.word	0x00010ce0
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN15DataLoger_ClassC1Ev>:


static uint8_t staticEventLogs[QSPI_ERBLK];

// default constructor
DataLoger_Class::DataLoger_Class()
     2d0:	b510      	push	{r4, lr}
     2d2:	4604      	mov	r4, r0
     2d4:	4b09      	ldr	r3, [pc, #36]	; (2fc <_ZN15DataLoger_ClassC1Ev+0x2c>)
     2d6:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
     2d8:	f44f 7200 	mov.w	r2, #512	; 0x200
     2dc:	2100      	movs	r1, #0
     2de:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
     2e2:	4b07      	ldr	r3, [pc, #28]	; (300 <_ZN15DataLoger_ClassC1Ev+0x30>)
     2e4:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
     2e6:	2300      	movs	r3, #0
     2e8:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
     2ec:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
{
	stackPointer=&staticEventLogs[0];
     2f0:	4b04      	ldr	r3, [pc, #16]	; (304 <_ZN15DataLoger_ClassC1Ev+0x34>)
     2f2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
} //DataLoger_Class
     2f6:	4620      	mov	r0, r4
     2f8:	bd10      	pop	{r4, pc}
     2fa:	bf00      	nop
     2fc:	0000dce9 	.word	0x0000dce9
     300:	00010441 	.word	0x00010441
     304:	2000065c 	.word	0x2000065c

00000308 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
     308:	b510      	push	{r4, lr}
     30a:	4604      	mov	r4, r0
     30c:	4b01      	ldr	r3, [pc, #4]	; (314 <_ZN15DataLoger_ClassD1Ev+0xc>)
     30e:	4798      	blx	r3
{
} //~DataLoger_Class
     310:	4620      	mov	r0, r4
     312:	bd10      	pop	{r4, pc}
     314:	0000dd25 	.word	0x0000dd25

00000318 <_ZN15DataLoger_Class13SetStackValueEm>:
	return 0;
}

void	DataLoger_Class::SetStackValue(uint32_t stk){
	
	if (stk==0)
     318:	460b      	mov	r3, r1
     31a:	b911      	cbnz	r1, 322 <_ZN15DataLoger_Class13SetStackValueEm+0xa>
	{
		stackPointer=&staticEventLogs[stk];
     31c:	4a02      	ldr	r2, [pc, #8]	; (328 <_ZN15DataLoger_Class13SetStackValueEm+0x10>)
     31e:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
	} 
	else
	{
	}
	stackValue=stk;
     322:	f8c0 34f0 	str.w	r3, [r0, #1264]	; 0x4f0
     326:	4770      	bx	lr
     328:	2000065c 	.word	0x2000065c

0000032c <_ZN15DataLoger_Class11IsStackFullEv>:
	stackValue+=sizeof(Event_Log_Entry);
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if (stackValue+(sizeof(Event_Log_Entry))>QSPI_ERBLK)
     32c:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
     330:	3040      	adds	r0, #64	; 0x40
	} 
	else
	{
		return false;
	}
     332:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
     336:	bf94      	ite	ls
     338:	2000      	movls	r0, #0
     33a:	2001      	movhi	r0, #1
     33c:	4770      	bx	lr
	...

00000340 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent){
     340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     342:	4605      	mov	r5, r0
     344:	460c      	mov	r4, r1
	if (IsStackFull())
     346:	4b13      	ldr	r3, [pc, #76]	; (394 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x54>)
     348:	4798      	blx	r3
     34a:	b9c0      	cbnz	r0, 37e <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x3e>
	memcpy(&stackPointer[stackValue],ent,sizeof(Event_Log_Entry));
     34c:	f8d5 3534 	ldr.w	r3, [r5, #1332]	; 0x534
     350:	f8d5 14f0 	ldr.w	r1, [r5, #1264]	; 0x4f0
     354:	4622      	mov	r2, r4
     356:	440b      	add	r3, r1
     358:	3440      	adds	r4, #64	; 0x40
     35a:	6817      	ldr	r7, [r2, #0]
     35c:	6856      	ldr	r6, [r2, #4]
     35e:	6890      	ldr	r0, [r2, #8]
     360:	68d1      	ldr	r1, [r2, #12]
     362:	601f      	str	r7, [r3, #0]
     364:	605e      	str	r6, [r3, #4]
     366:	6098      	str	r0, [r3, #8]
     368:	60d9      	str	r1, [r3, #12]
     36a:	3210      	adds	r2, #16
     36c:	3310      	adds	r3, #16
     36e:	42a2      	cmp	r2, r4
     370:	d1f3      	bne.n	35a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x1a>
	stackValue+=sizeof(Event_Log_Entry);
     372:	f8d5 04f0 	ldr.w	r0, [r5, #1264]	; 0x4f0
     376:	3040      	adds	r0, #64	; 0x40
     378:	f8c5 04f0 	str.w	r0, [r5, #1264]	; 0x4f0
}
     37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memory.SaveEventLog(staticEventLogs);
     37e:	4e06      	ldr	r6, [pc, #24]	; (398 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x58>)
     380:	4631      	mov	r1, r6
     382:	4806      	ldr	r0, [pc, #24]	; (39c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x5c>)
     384:	4b06      	ldr	r3, [pc, #24]	; (3a0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x60>)
     386:	4798      	blx	r3
		stackPointer=&staticEventLogs[stk];
     388:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
	stackValue=stk;
     38c:	2300      	movs	r3, #0
     38e:	f8c5 34f0 	str.w	r3, [r5, #1264]	; 0x4f0
     392:	e7db      	b.n	34c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0xc>
     394:	0000032d 	.word	0x0000032d
     398:	2000065c 	.word	0x2000065c
     39c:	200041d4 	.word	0x200041d4
     3a0:	0000fc95 	.word	0x0000fc95

000003a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     3a4:	e7fe      	b.n	3a4 <Dummy_Handler>
	...

000003a8 <Reset_Handler>:
{
     3a8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     3aa:	4b17      	ldr	r3, [pc, #92]	; (408 <Reset_Handler+0x60>)
     3ac:	4a17      	ldr	r2, [pc, #92]	; (40c <Reset_Handler+0x64>)
     3ae:	429a      	cmp	r2, r3
     3b0:	d010      	beq.n	3d4 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     3b2:	4b17      	ldr	r3, [pc, #92]	; (410 <Reset_Handler+0x68>)
     3b4:	4a14      	ldr	r2, [pc, #80]	; (408 <Reset_Handler+0x60>)
     3b6:	429a      	cmp	r2, r3
     3b8:	d20c      	bcs.n	3d4 <Reset_Handler+0x2c>
     3ba:	3b01      	subs	r3, #1
     3bc:	1a9b      	subs	r3, r3, r2
     3be:	f023 0303 	bic.w	r3, r3, #3
     3c2:	3304      	adds	r3, #4
     3c4:	4413      	add	r3, r2
     3c6:	4911      	ldr	r1, [pc, #68]	; (40c <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     3c8:	f851 0b04 	ldr.w	r0, [r1], #4
     3cc:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     3d0:	429a      	cmp	r2, r3
     3d2:	d1f9      	bne.n	3c8 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     3d4:	4b0f      	ldr	r3, [pc, #60]	; (414 <Reset_Handler+0x6c>)
     3d6:	4a10      	ldr	r2, [pc, #64]	; (418 <Reset_Handler+0x70>)
     3d8:	429a      	cmp	r2, r3
     3da:	d20a      	bcs.n	3f2 <Reset_Handler+0x4a>
     3dc:	3b01      	subs	r3, #1
     3de:	1a9b      	subs	r3, r3, r2
     3e0:	f023 0303 	bic.w	r3, r3, #3
     3e4:	3304      	adds	r3, #4
     3e6:	4413      	add	r3, r2
                *pDest++ = 0;
     3e8:	2100      	movs	r1, #0
     3ea:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     3ee:	4293      	cmp	r3, r2
     3f0:	d1fb      	bne.n	3ea <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     3f2:	4a0a      	ldr	r2, [pc, #40]	; (41c <Reset_Handler+0x74>)
     3f4:	4b0a      	ldr	r3, [pc, #40]	; (420 <Reset_Handler+0x78>)
     3f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     3fa:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     3fc:	4b09      	ldr	r3, [pc, #36]	; (424 <Reset_Handler+0x7c>)
     3fe:	4798      	blx	r3
        main();
     400:	4b09      	ldr	r3, [pc, #36]	; (428 <Reset_Handler+0x80>)
     402:	4798      	blx	r3
     404:	e7fe      	b.n	404 <Reset_Handler+0x5c>
     406:	bf00      	nop
     408:	20000000 	.word	0x20000000
     40c:	00010ce0 	.word	0x00010ce0
     410:	2000063c 	.word	0x2000063c
     414:	2000a860 	.word	0x2000a860
     418:	20000640 	.word	0x20000640
     41c:	e000ed00 	.word	0xe000ed00
     420:	00000000 	.word	0x00000000
     424:	000102bd 	.word	0x000102bd
     428:	00000709 	.word	0x00000709

0000042c <_ZN18Event_Logger_ClassD1Ev>:
{
	cal=&staticClock;
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
     42c:	b510      	push	{r4, lr}
     42e:	4604      	mov	r4, r0
     430:	4b06      	ldr	r3, [pc, #24]	; (44c <_ZN18Event_Logger_ClassD1Ev+0x20>)
     432:	f840 3bb4 	str.w	r3, [r0], #180
     436:	4b06      	ldr	r3, [pc, #24]	; (450 <_ZN18Event_Logger_ClassD1Ev+0x24>)
     438:	4798      	blx	r3
     43a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
     43e:	4b05      	ldr	r3, [pc, #20]	; (454 <_ZN18Event_Logger_ClassD1Ev+0x28>)
     440:	4798      	blx	r3
     442:	4620      	mov	r0, r4
     444:	4b04      	ldr	r3, [pc, #16]	; (458 <_ZN18Event_Logger_ClassD1Ev+0x2c>)
     446:	4798      	blx	r3
{
} //~Event_Logger_Class
     448:	4620      	mov	r0, r4
     44a:	bd10      	pop	{r4, pc}
     44c:	00010704 	.word	0x00010704
     450:	00000309 	.word	0x00000309
     454:	000006b7 	.word	0x000006b7
     458:	0000e151 	.word	0x0000e151

0000045c <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
     45c:	b510      	push	{r4, lr}
     45e:	4604      	mov	r4, r0
     460:	4b08      	ldr	r3, [pc, #32]	; (484 <_ZN18Event_Logger_ClassC1Ev+0x28>)
     462:	4798      	blx	r3
     464:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
     468:	4b07      	ldr	r3, [pc, #28]	; (488 <_ZN18Event_Logger_ClassC1Ev+0x2c>)
     46a:	4798      	blx	r3
     46c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
     470:	4b06      	ldr	r3, [pc, #24]	; (48c <_ZN18Event_Logger_ClassC1Ev+0x30>)
     472:	4798      	blx	r3
     474:	4b06      	ldr	r3, [pc, #24]	; (490 <_ZN18Event_Logger_ClassC1Ev+0x34>)
     476:	6023      	str	r3, [r4, #0]
	cal=&staticClock;
     478:	4b06      	ldr	r3, [pc, #24]	; (494 <_ZN18Event_Logger_ClassC1Ev+0x38>)
     47a:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
} //Event_Logger_Class
     47e:	4620      	mov	r0, r4
     480:	bd10      	pop	{r4, pc}
     482:	bf00      	nop
     484:	0000e0e1 	.word	0x0000e0e1
     488:	000006b5 	.word	0x000006b5
     48c:	000002d1 	.word	0x000002d1
     490:	00010704 	.word	0x00010704
     494:	20001660 	.word	0x20001660

00000498 <_ZN18Event_Logger_Class16MakeNullDateTimeEv>:
	stackLocalArray=0;
	SetStackValue(stackLocalArray);
}

void Event_Logger_Class::MakeNullDateTime(void){
	nullDateTime.date.year  = 0x0;
     498:	2300      	movs	r3, #0
     49a:	f8a0 3606 	strh.w	r3, [r0, #1542]	; 0x606
	nullDateTime.date.month = 0x0;
     49e:	f880 3605 	strb.w	r3, [r0, #1541]	; 0x605
	nullDateTime.date.day   = 0x0;
     4a2:	f880 3604 	strb.w	r3, [r0, #1540]	; 0x604

	nullDateTime.time.hour = 0x0;
     4a6:	f880 3602 	strb.w	r3, [r0, #1538]	; 0x602
	nullDateTime.time.min  = 0x0;
     4aa:	f880 3601 	strb.w	r3, [r0, #1537]	; 0x601
	nullDateTime.time.sec  = 0x0;
     4ae:	f880 3600 	strb.w	r3, [r0, #1536]	; 0x600
     4b2:	4770      	bx	lr

000004b4 <_ZN18Event_Logger_Class4InitEv>:
bool Event_Logger_Class::Init(void){
     4b4:	b510      	push	{r4, lr}
     4b6:	4604      	mov	r4, r0
	MakeNullDateTime();
     4b8:	4b08      	ldr	r3, [pc, #32]	; (4dc <_ZN18Event_Logger_Class4InitEv+0x28>)
     4ba:	4798      	blx	r3
	cal->Init(nullDateTime);
     4bc:	f504 63c0 	add.w	r3, r4, #1536	; 0x600
     4c0:	e893 0006 	ldmia.w	r3, {r1, r2}
     4c4:	f8d4 05ec 	ldr.w	r0, [r4, #1516]	; 0x5ec
     4c8:	4b05      	ldr	r3, [pc, #20]	; (4e0 <_ZN18Event_Logger_Class4InitEv+0x2c>)
     4ca:	4798      	blx	r3
	stackLocalArray=0;
     4cc:	2100      	movs	r1, #0
     4ce:	f8c4 16f4 	str.w	r1, [r4, #1780]	; 0x6f4
	SetStackValue(stackLocalArray);
     4d2:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
     4d6:	4b03      	ldr	r3, [pc, #12]	; (4e4 <_ZN18Event_Logger_Class4InitEv+0x30>)
     4d8:	4798      	blx	r3
}
     4da:	bd10      	pop	{r4, pc}
     4dc:	00000499 	.word	0x00000499
     4e0:	0000e179 	.word	0x0000e179
     4e4:	00000319 	.word	0x00000319

000004e8 <_ZN18Event_Logger_Class9SaveEventEPh>:
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
     4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4ea:	4605      	mov	r5, r0
     4ec:	460c      	mov	r4, r1
	
	cal->GetDateTime(&currentDateTime);
     4ee:	f8d0 05ec 	ldr.w	r0, [r0, #1516]	; 0x5ec
     4f2:	f505 67bf 	add.w	r7, r5, #1528	; 0x5f8
     4f6:	6803      	ldr	r3, [r0, #0]
     4f8:	681b      	ldr	r3, [r3, #0]
     4fa:	4639      	mov	r1, r7
     4fc:	4798      	blx	r3
	semiColonPosition=FindSemiColon(text);
     4fe:	f105 06b0 	add.w	r6, r5, #176	; 0xb0
     502:	4621      	mov	r1, r4
     504:	4630      	mov	r0, r6
     506:	4b1e      	ldr	r3, [pc, #120]	; (580 <_ZN18Event_Logger_Class9SaveEventEPh+0x98>)
     508:	4798      	blx	r3
     50a:	4602      	mov	r2, r0
     50c:	f885 06f0 	strb.w	r0, [r5, #1776]	; 0x6f0
	memcpy(&entry.code,text,(uint32_t)semiColonPosition);
     510:	4621      	mov	r1, r4
     512:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
     516:	4b1b      	ldr	r3, [pc, #108]	; (584 <_ZN18Event_Logger_Class9SaveEventEPh+0x9c>)
     518:	4798      	blx	r3

	ChopStringDescription(text);
     51a:	4621      	mov	r1, r4
     51c:	4630      	mov	r0, r6
     51e:	4b1a      	ldr	r3, [pc, #104]	; (588 <_ZN18Event_Logger_Class9SaveEventEPh+0xa0>)
     520:	4798      	blx	r3
	memcpy(&entry.description,&text[semiColonPosition],44);
     522:	f895 16f0 	ldrb.w	r1, [r5, #1776]	; 0x6f0
     526:	4421      	add	r1, r4
     528:	f205 63c4 	addw	r3, r5, #1732	; 0x6c4
     52c:	f101 0220 	add.w	r2, r1, #32
     530:	f8d1 e000 	ldr.w	lr, [r1]
     534:	684e      	ldr	r6, [r1, #4]
     536:	688c      	ldr	r4, [r1, #8]
     538:	68c8      	ldr	r0, [r1, #12]
     53a:	f8c3 e000 	str.w	lr, [r3]
     53e:	605e      	str	r6, [r3, #4]
     540:	609c      	str	r4, [r3, #8]
     542:	60d8      	str	r0, [r3, #12]
     544:	3110      	adds	r1, #16
     546:	3310      	adds	r3, #16
     548:	4291      	cmp	r1, r2
     54a:	d1f1      	bne.n	530 <_ZN18Event_Logger_Class9SaveEventEPh+0x48>
     54c:	680c      	ldr	r4, [r1, #0]
     54e:	6848      	ldr	r0, [r1, #4]
     550:	688a      	ldr	r2, [r1, #8]
     552:	601c      	str	r4, [r3, #0]
     554:	6058      	str	r0, [r3, #4]
     556:	609a      	str	r2, [r3, #8]
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
     558:	f8d5 05ec 	ldr.w	r0, [r5, #1516]	; 0x5ec
     55c:	6803      	ldr	r3, [r0, #0]
     55e:	685b      	ldr	r3, [r3, #4]
     560:	4639      	mov	r1, r7
     562:	4798      	blx	r3
     564:	f8c5 06f8 	str.w	r0, [r5, #1784]	; 0x6f8
	entry.timestamp=currentTimestamp;
     568:	f8c5 06b0 	str.w	r0, [r5, #1712]	; 0x6b0
	StackEventEntry(&entry);
     56c:	f505 61d6 	add.w	r1, r5, #1712	; 0x6b0
     570:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
     574:	4b05      	ldr	r3, [pc, #20]	; (58c <_ZN18Event_Logger_Class9SaveEventEPh+0xa4>)
     576:	4798      	blx	r3
	
	if (usb.IsEnabled())
     578:	4805      	ldr	r0, [pc, #20]	; (590 <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>)
     57a:	4b06      	ldr	r3, [pc, #24]	; (594 <_ZN18Event_Logger_Class9SaveEventEPh+0xac>)
     57c:	4798      	blx	r3
     57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     580:	000006d9 	.word	0x000006d9
     584:	0001030d 	.word	0x0001030d
     588:	000006b9 	.word	0x000006b9
     58c:	00000341 	.word	0x00000341
     590:	20002ef4 	.word	0x20002ef4
     594:	0000ef71 	.word	0x0000ef71

00000598 <_ZN18Event_Logger_Class9SaveEventEPKc>:
	else
	{
	}
}

void Event_Logger_Class::SaveEvent(char const * text){
     598:	b508      	push	{r3, lr}
	
	SaveEvent((uint8_t*)text);
     59a:	4b01      	ldr	r3, [pc, #4]	; (5a0 <_ZN18Event_Logger_Class9SaveEventEPKc+0x8>)
     59c:	4798      	blx	r3
     59e:	bd08      	pop	{r3, pc}
     5a0:	000004e9 	.word	0x000004e9

000005a4 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev>:
}

 Event_Logger_Class	logger;
     5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     5a8:	4c30      	ldr	r4, [pc, #192]	; (66c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xc8>)
     5aa:	f104 05b0 	add.w	r5, r4, #176	; 0xb0
     5ae:	4930      	ldr	r1, [pc, #192]	; (670 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xcc>)
     5b0:	4628      	mov	r0, r5
     5b2:	4f30      	ldr	r7, [pc, #192]	; (674 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xd0>)
     5b4:	47b8      	blx	r7
     5b6:	4e30      	ldr	r6, [pc, #192]	; (678 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xd4>)
     5b8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 6b0 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0x10c>
     5bc:	4632      	mov	r2, r6
     5be:	4641      	mov	r1, r8
     5c0:	4628      	mov	r0, r5
     5c2:	4d2e      	ldr	r5, [pc, #184]	; (67c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xd8>)
     5c4:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     5c6:	f104 09d0 	add.w	r9, r4, #208	; 0xd0
     5ca:	492d      	ldr	r1, [pc, #180]	; (680 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xdc>)
     5cc:	4648      	mov	r0, r9
     5ce:	47b8      	blx	r7
     5d0:	4632      	mov	r2, r6
     5d2:	4641      	mov	r1, r8
     5d4:	4648      	mov	r0, r9
     5d6:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     5d8:	f104 09f0 	add.w	r9, r4, #240	; 0xf0
     5dc:	4929      	ldr	r1, [pc, #164]	; (684 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xe0>)
     5de:	4648      	mov	r0, r9
     5e0:	47b8      	blx	r7
     5e2:	4632      	mov	r2, r6
     5e4:	4641      	mov	r1, r8
     5e6:	4648      	mov	r0, r9
     5e8:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     5ea:	f504 7988 	add.w	r9, r4, #272	; 0x110
     5ee:	4926      	ldr	r1, [pc, #152]	; (688 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xe4>)
     5f0:	4648      	mov	r0, r9
     5f2:	47b8      	blx	r7
     5f4:	4632      	mov	r2, r6
     5f6:	4641      	mov	r1, r8
     5f8:	4648      	mov	r0, r9
     5fa:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     5fc:	f504 7998 	add.w	r9, r4, #304	; 0x130
     600:	4922      	ldr	r1, [pc, #136]	; (68c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xe8>)
     602:	4648      	mov	r0, r9
     604:	47b8      	blx	r7
     606:	4632      	mov	r2, r6
     608:	4641      	mov	r1, r8
     60a:	4648      	mov	r0, r9
     60c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     60e:	f504 79a8 	add.w	r9, r4, #336	; 0x150
     612:	491f      	ldr	r1, [pc, #124]	; (690 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xec>)
     614:	4648      	mov	r0, r9
     616:	47b8      	blx	r7
     618:	4632      	mov	r2, r6
     61a:	4641      	mov	r1, r8
     61c:	4648      	mov	r0, r9
     61e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     620:	f504 79b8 	add.w	r9, r4, #368	; 0x170
     624:	491b      	ldr	r1, [pc, #108]	; (694 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xf0>)
     626:	4648      	mov	r0, r9
     628:	47b8      	blx	r7
     62a:	4632      	mov	r2, r6
     62c:	4641      	mov	r1, r8
     62e:	4648      	mov	r0, r9
     630:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     632:	f504 79c8 	add.w	r9, r4, #400	; 0x190
     636:	4918      	ldr	r1, [pc, #96]	; (698 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xf4>)
     638:	4648      	mov	r0, r9
     63a:	47b8      	blx	r7
     63c:	4632      	mov	r2, r6
     63e:	4641      	mov	r1, r8
     640:	4648      	mov	r0, r9
     642:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
     644:	4915      	ldr	r1, [pc, #84]	; (69c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xf8>)
     646:	4620      	mov	r0, r4
     648:	4b15      	ldr	r3, [pc, #84]	; (6a0 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xfc>)
     64a:	4798      	blx	r3
     64c:	4632      	mov	r2, r6
     64e:	4915      	ldr	r1, [pc, #84]	; (6a4 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0x100>)
     650:	4620      	mov	r0, r4
     652:	47a8      	blx	r5
 Event_Logger_Class	logger;
     654:	f504 74d8 	add.w	r4, r4, #432	; 0x1b0
     658:	4620      	mov	r0, r4
     65a:	4b13      	ldr	r3, [pc, #76]	; (6a8 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0x104>)
     65c:	4798      	blx	r3
     65e:	4632      	mov	r2, r6
     660:	4912      	ldr	r1, [pc, #72]	; (6ac <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0x108>)
     662:	4620      	mov	r0, r4
     664:	47a8      	blx	r5
     666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     66a:	bf00      	nop
     66c:	20001660 	.word	0x20001660
     670:	2000a5a8 	.word	0x2000a5a8
     674:	0000e86d 	.word	0x0000e86d
     678:	20000000 	.word	0x20000000
     67c:	00010289 	.word	0x00010289
     680:	2000a63c 	.word	0x2000a63c
     684:	2000a760 	.word	0x2000a760
     688:	2000a65c 	.word	0x2000a65c
     68c:	2000a720 	.word	0x2000a720
     690:	2000a740 	.word	0x2000a740
     694:	2000a618 	.word	0x2000a618
     698:	2000a6b8 	.word	0x2000a6b8
     69c:	2000a780 	.word	0x2000a780
     6a0:	0000e115 	.word	0x0000e115
     6a4:	0000e151 	.word	0x0000e151
     6a8:	0000045d 	.word	0x0000045d
     6ac:	0000042d 	.word	0x0000042d
     6b0:	0000e8a5 	.word	0x0000e8a5

000006b4 <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
     6b4:	4770      	bx	lr

000006b6 <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
     6b6:	4770      	bx	lr

000006b8 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:

void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
     6b8:	b538      	push	{r3, r4, r5, lr}
     6ba:	4605      	mov	r5, r0
     6bc:	460c      	mov	r4, r1
	//RemoveSpaces((char *)str);
	sizeText=strlen((char *)str);
     6be:	4608      	mov	r0, r1
     6c0:	4b04      	ldr	r3, [pc, #16]	; (6d4 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x1c>)
     6c2:	4798      	blx	r3
     6c4:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
     6c6:	b2c0      	uxtb	r0, r0
     6c8:	282c      	cmp	r0, #44	; 0x2c
	{
		str[44]='\0';
     6ca:	bfc4      	itt	gt
     6cc:	2300      	movgt	r3, #0
     6ce:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
     6d2:	bd38      	pop	{r3, r4, r5, pc}
     6d4:	00010501 	.word	0x00010501

000006d8 <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
	// incremented
	str[count] = '\0';
}

uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
     6d8:	b508      	push	{r3, lr}
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (int i = 0; strlen((char *)str); i++){
     6da:	780b      	ldrb	r3, [r1, #0]
     6dc:	b163      	cbz	r3, 6f8 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x20>
		if (str[i] == ':'){
     6de:	2b3a      	cmp	r3, #58	; 0x3a
     6e0:	bf18      	it	ne
     6e2:	2000      	movne	r0, #0
     6e4:	d006      	beq.n	6f4 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
	for (int i = 0; strlen((char *)str); i++){
     6e6:	3001      	adds	r0, #1
		if (str[i] == ':'){
     6e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
     6ec:	2b3a      	cmp	r3, #58	; 0x3a
     6ee:	d1fa      	bne.n	6e6 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xe>
			return i;
     6f0:	b2c0      	uxtb	r0, r0
     6f2:	bd08      	pop	{r3, pc}
	for (int i = 0; strlen((char *)str); i++){
     6f4:	2000      	movs	r0, #0
     6f6:	e7fb      	b.n	6f0 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
     6f8:	4608      	mov	r0, r1
		}
	}
	
	return strlen((char *)str);
     6fa:	4b02      	ldr	r3, [pc, #8]	; (704 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x2c>)
     6fc:	4798      	blx	r3
     6fe:	b2c0      	uxtb	r0, r0
}
     700:	bd08      	pop	{r3, pc}
     702:	bf00      	nop
     704:	00010501 	.word	0x00010501

00000708 <main>:
#include "main.h"
char  stringChar[16];
uint8_t status;

int main(void)
{
     708:	b570      	push	{r4, r5, r6, lr}
	atmel_start_init();
     70a:	4b21      	ldr	r3, [pc, #132]	; (790 <main+0x88>)
     70c:	4798      	blx	r3
	int counter=0;
	while(!heater.Init()){
     70e:	4e21      	ldr	r6, [pc, #132]	; (794 <main+0x8c>)
     710:	4d21      	ldr	r5, [pc, #132]	; (798 <main+0x90>)
		delay_ms(100);
     712:	4c22      	ldr	r4, [pc, #136]	; (79c <main+0x94>)
	while(!heater.Init()){
     714:	4630      	mov	r0, r6
     716:	47a8      	blx	r5
     718:	b938      	cbnz	r0, 72a <main+0x22>
		delay_ms(100);
     71a:	2064      	movs	r0, #100	; 0x64
     71c:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     71e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     722:	4b1f      	ldr	r3, [pc, #124]	; (7a0 <main+0x98>)
     724:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     728:	e7f4      	b.n	714 <main+0xc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     72a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     72e:	4b1c      	ldr	r3, [pc, #112]	; (7a0 <main+0x98>)
     730:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		gpio_toggle_pin_level(LED0);
	}
	gpio_set_pin_level(LED0,true);
	
	usb.Init();
     734:	481b      	ldr	r0, [pc, #108]	; (7a4 <main+0x9c>)
     736:	4b1c      	ldr	r3, [pc, #112]	; (7a8 <main+0xa0>)
     738:	4798      	blx	r3
	delay_ms(100);
     73a:	2064      	movs	r0, #100	; 0x64
     73c:	4b17      	ldr	r3, [pc, #92]	; (79c <main+0x94>)
     73e:	4798      	blx	r3
	
	logger.Init();
     740:	481a      	ldr	r0, [pc, #104]	; (7ac <main+0xa4>)
     742:	4b1b      	ldr	r3, [pc, #108]	; (7b0 <main+0xa8>)
     744:	4798      	blx	r3

	//usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	//usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	if (memory.Init())
     746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     74a:	481a      	ldr	r0, [pc, #104]	; (7b4 <main+0xac>)
     74c:	4b1a      	ldr	r3, [pc, #104]	; (7b8 <main+0xb0>)
     74e:	4798      	blx	r3
     750:	b9a8      	cbnz	r0, 77e <main+0x76>
			logger.SaveEvent("Info:Memory Started");
	}
	else
	{
	}
	delay_ms(1000);
     752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     756:	4b11      	ldr	r3, [pc, #68]	; (79c <main+0x94>)
     758:	4798      	blx	r3
	while(1){
		status=heater.ReadStatus();
     75a:	4e0e      	ldr	r6, [pc, #56]	; (794 <main+0x8c>)
     75c:	4d17      	ldr	r5, [pc, #92]	; (7bc <main+0xb4>)
     75e:	4c18      	ldr	r4, [pc, #96]	; (7c0 <main+0xb8>)
     760:	4630      	mov	r0, r6
     762:	47a8      	blx	r5
     764:	7020      	strb	r0, [r4, #0]
		if (status&0x01>0)
     766:	f010 0f01 	tst.w	r0, #1
		{
			logger.SaveEvent("Heater 1: is OK");
     76a:	bf14      	ite	ne
     76c:	4915      	ldrne	r1, [pc, #84]	; (7c4 <main+0xbc>)
		} 
		else
		{
			logger.SaveEvent("H1OV1: fail");
     76e:	4916      	ldreq	r1, [pc, #88]	; (7c8 <main+0xc0>)
     770:	480e      	ldr	r0, [pc, #56]	; (7ac <main+0xa4>)
     772:	4b16      	ldr	r3, [pc, #88]	; (7cc <main+0xc4>)
     774:	4798      	blx	r3
		}
		
		delay_ms(100);
     776:	2064      	movs	r0, #100	; 0x64
     778:	4b08      	ldr	r3, [pc, #32]	; (79c <main+0x94>)
     77a:	4798      	blx	r3
		status=heater.ReadStatus();
     77c:	e7f0      	b.n	760 <main+0x58>
		memory.WriteDefaultParameters();
     77e:	480d      	ldr	r0, [pc, #52]	; (7b4 <main+0xac>)
     780:	4b13      	ldr	r3, [pc, #76]	; (7d0 <main+0xc8>)
     782:	4798      	blx	r3
			logger.SaveEvent("Info:Memory Started");
     784:	4913      	ldr	r1, [pc, #76]	; (7d4 <main+0xcc>)
     786:	4809      	ldr	r0, [pc, #36]	; (7ac <main+0xa4>)
     788:	4b10      	ldr	r3, [pc, #64]	; (7cc <main+0xc4>)
     78a:	4798      	blx	r3
     78c:	e7e1      	b.n	752 <main+0x4a>
     78e:	bf00      	nop
     790:	000008d1 	.word	0x000008d1
     794:	200030ac 	.word	0x200030ac
     798:	0000f85d 	.word	0x0000f85d
     79c:	00002565 	.word	0x00002565
     7a0:	41008000 	.word	0x41008000
     7a4:	20002ef4 	.word	0x20002ef4
     7a8:	0000ef2d 	.word	0x0000ef2d
     7ac:	20001810 	.word	0x20001810
     7b0:	000004b5 	.word	0x000004b5
     7b4:	200041d4 	.word	0x200041d4
     7b8:	0000fc49 	.word	0x0000fc49
     7bc:	0000f95d 	.word	0x0000f95d
     7c0:	20001f10 	.word	0x20001f10
     7c4:	00010720 	.word	0x00010720
     7c8:	00010730 	.word	0x00010730
     7cc:	00000599 	.word	0x00000599
     7d0:	0000fb91 	.word	0x0000fb91
     7d4:	0001070c 	.word	0x0001070c

000007d8 <_GLOBAL__sub_I_stringChar>:
	}
}
     7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     7dc:	4c2c      	ldr	r4, [pc, #176]	; (890 <_GLOBAL__sub_I_stringChar+0xb8>)
     7de:	1d25      	adds	r5, r4, #4
     7e0:	492c      	ldr	r1, [pc, #176]	; (894 <_GLOBAL__sub_I_stringChar+0xbc>)
     7e2:	4628      	mov	r0, r5
     7e4:	4f2c      	ldr	r7, [pc, #176]	; (898 <_GLOBAL__sub_I_stringChar+0xc0>)
     7e6:	47b8      	blx	r7
     7e8:	4e2c      	ldr	r6, [pc, #176]	; (89c <_GLOBAL__sub_I_stringChar+0xc4>)
     7ea:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8cc <_GLOBAL__sub_I_stringChar+0xf4>
     7ee:	4632      	mov	r2, r6
     7f0:	4641      	mov	r1, r8
     7f2:	4628      	mov	r0, r5
     7f4:	4d2a      	ldr	r5, [pc, #168]	; (8a0 <_GLOBAL__sub_I_stringChar+0xc8>)
     7f6:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     7f8:	f104 0924 	add.w	r9, r4, #36	; 0x24
     7fc:	4929      	ldr	r1, [pc, #164]	; (8a4 <_GLOBAL__sub_I_stringChar+0xcc>)
     7fe:	4648      	mov	r0, r9
     800:	47b8      	blx	r7
     802:	4632      	mov	r2, r6
     804:	4641      	mov	r1, r8
     806:	4648      	mov	r0, r9
     808:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     80a:	f104 0944 	add.w	r9, r4, #68	; 0x44
     80e:	4926      	ldr	r1, [pc, #152]	; (8a8 <_GLOBAL__sub_I_stringChar+0xd0>)
     810:	4648      	mov	r0, r9
     812:	47b8      	blx	r7
     814:	4632      	mov	r2, r6
     816:	4641      	mov	r1, r8
     818:	4648      	mov	r0, r9
     81a:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     81c:	f104 0964 	add.w	r9, r4, #100	; 0x64
     820:	4922      	ldr	r1, [pc, #136]	; (8ac <_GLOBAL__sub_I_stringChar+0xd4>)
     822:	4648      	mov	r0, r9
     824:	47b8      	blx	r7
     826:	4632      	mov	r2, r6
     828:	4641      	mov	r1, r8
     82a:	4648      	mov	r0, r9
     82c:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     82e:	f104 0984 	add.w	r9, r4, #132	; 0x84
     832:	491f      	ldr	r1, [pc, #124]	; (8b0 <_GLOBAL__sub_I_stringChar+0xd8>)
     834:	4648      	mov	r0, r9
     836:	47b8      	blx	r7
     838:	4632      	mov	r2, r6
     83a:	4641      	mov	r1, r8
     83c:	4648      	mov	r0, r9
     83e:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     840:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
     844:	491b      	ldr	r1, [pc, #108]	; (8b4 <_GLOBAL__sub_I_stringChar+0xdc>)
     846:	4648      	mov	r0, r9
     848:	47b8      	blx	r7
     84a:	4632      	mov	r2, r6
     84c:	4641      	mov	r1, r8
     84e:	4648      	mov	r0, r9
     850:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     852:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
     856:	4918      	ldr	r1, [pc, #96]	; (8b8 <_GLOBAL__sub_I_stringChar+0xe0>)
     858:	4648      	mov	r0, r9
     85a:	47b8      	blx	r7
     85c:	4632      	mov	r2, r6
     85e:	4641      	mov	r1, r8
     860:	4648      	mov	r0, r9
     862:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     864:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
     868:	4914      	ldr	r1, [pc, #80]	; (8bc <_GLOBAL__sub_I_stringChar+0xe4>)
     86a:	4648      	mov	r0, r9
     86c:	47b8      	blx	r7
     86e:	4632      	mov	r2, r6
     870:	4641      	mov	r1, r8
     872:	4648      	mov	r0, r9
     874:	47a8      	blx	r5
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     876:	f504 7482 	add.w	r4, r4, #260	; 0x104
     87a:	4911      	ldr	r1, [pc, #68]	; (8c0 <_GLOBAL__sub_I_stringChar+0xe8>)
     87c:	4620      	mov	r0, r4
     87e:	4b11      	ldr	r3, [pc, #68]	; (8c4 <_GLOBAL__sub_I_stringChar+0xec>)
     880:	4798      	blx	r3
     882:	4632      	mov	r2, r6
     884:	4910      	ldr	r1, [pc, #64]	; (8c8 <_GLOBAL__sub_I_stringChar+0xf0>)
     886:	4620      	mov	r0, r4
     888:	47a8      	blx	r5
     88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     88e:	bf00      	nop
     890:	20001f10 	.word	0x20001f10
     894:	2000a5a8 	.word	0x2000a5a8
     898:	0000e86d 	.word	0x0000e86d
     89c:	20000000 	.word	0x20000000
     8a0:	00010289 	.word	0x00010289
     8a4:	2000a63c 	.word	0x2000a63c
     8a8:	2000a760 	.word	0x2000a760
     8ac:	2000a65c 	.word	0x2000a65c
     8b0:	2000a720 	.word	0x2000a720
     8b4:	2000a740 	.word	0x2000a740
     8b8:	2000a618 	.word	0x2000a618
     8bc:	2000a6b8 	.word	0x2000a6b8
     8c0:	2000a6d8 	.word	0x2000a6d8
     8c4:	0000d66d 	.word	0x0000d66d
     8c8:	0000d689 	.word	0x0000d689
     8cc:	0000e8a5 	.word	0x0000e8a5

000008d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     8d0:	b580      	push	{r7, lr}
     8d2:	af00      	add	r7, sp, #0
	system_init();
     8d4:	4b03      	ldr	r3, [pc, #12]	; (8e4 <atmel_start_init+0x14>)
     8d6:	4798      	blx	r3
	usb_init();
     8d8:	4b03      	ldr	r3, [pc, #12]	; (8e8 <atmel_start_init+0x18>)
     8da:	4798      	blx	r3
	spi_nor_flash_init();
     8dc:	4b03      	ldr	r3, [pc, #12]	; (8ec <atmel_start_init+0x1c>)
     8de:	4798      	blx	r3
}
     8e0:	bf00      	nop
     8e2:	bd80      	pop	{r7, pc}
     8e4:	00001cd1 	.word	0x00001cd1
     8e8:	0000b799 	.word	0x0000b799
     8ec:	0000b72d 	.word	0x0000b72d

000008f0 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     8f0:	b480      	push	{r7}
     8f2:	b085      	sub	sp, #20
     8f4:	af00      	add	r7, sp, #0
     8f6:	60f8      	str	r0, [r7, #12]
     8f8:	460b      	mov	r3, r1
     8fa:	607a      	str	r2, [r7, #4]
     8fc:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     8fe:	7afa      	ldrb	r2, [r7, #11]
     900:	68fb      	ldr	r3, [r7, #12]
     902:	3220      	adds	r2, #32
     904:	6879      	ldr	r1, [r7, #4]
     906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     90a:	bf00      	nop
     90c:	3714      	adds	r7, #20
     90e:	46bd      	mov	sp, r7
     910:	f85d 7b04 	ldr.w	r7, [sp], #4
     914:	4770      	bx	lr

00000916 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     916:	b480      	push	{r7}
     918:	b083      	sub	sp, #12
     91a:	af00      	add	r7, sp, #0
     91c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     91e:	687b      	ldr	r3, [r7, #4]
     920:	691b      	ldr	r3, [r3, #16]
     922:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     926:	687b      	ldr	r3, [r7, #4]
     928:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     92a:	bf00      	nop
     92c:	370c      	adds	r7, #12
     92e:	46bd      	mov	sp, r7
     930:	f85d 7b04 	ldr.w	r7, [sp], #4
     934:	4770      	bx	lr

00000936 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     936:	b480      	push	{r7}
     938:	b083      	sub	sp, #12
     93a:	af00      	add	r7, sp, #0
     93c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     93e:	687b      	ldr	r3, [r7, #4]
     940:	691b      	ldr	r3, [r3, #16]
     942:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     946:	687b      	ldr	r3, [r7, #4]
     948:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     94a:	bf00      	nop
     94c:	370c      	adds	r7, #12
     94e:	46bd      	mov	sp, r7
     950:	f85d 7b04 	ldr.w	r7, [sp], #4
     954:	4770      	bx	lr

00000956 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     956:	b480      	push	{r7}
     958:	b083      	sub	sp, #12
     95a:	af00      	add	r7, sp, #0
     95c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     95e:	687b      	ldr	r3, [r7, #4]
     960:	691b      	ldr	r3, [r3, #16]
     962:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     966:	687b      	ldr	r3, [r7, #4]
     968:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     96a:	bf00      	nop
     96c:	370c      	adds	r7, #12
     96e:	46bd      	mov	sp, r7
     970:	f85d 7b04 	ldr.w	r7, [sp], #4
     974:	4770      	bx	lr

00000976 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     976:	b480      	push	{r7}
     978:	b083      	sub	sp, #12
     97a:	af00      	add	r7, sp, #0
     97c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     97e:	687b      	ldr	r3, [r7, #4]
     980:	691b      	ldr	r3, [r3, #16]
     982:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     986:	687b      	ldr	r3, [r7, #4]
     988:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     98a:	bf00      	nop
     98c:	370c      	adds	r7, #12
     98e:	46bd      	mov	sp, r7
     990:	f85d 7b04 	ldr.w	r7, [sp], #4
     994:	4770      	bx	lr

00000996 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     996:	b480      	push	{r7}
     998:	b083      	sub	sp, #12
     99a:	af00      	add	r7, sp, #0
     99c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	695b      	ldr	r3, [r3, #20]
     9a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9aa:	bf00      	nop
     9ac:	370c      	adds	r7, #12
     9ae:	46bd      	mov	sp, r7
     9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b4:	4770      	bx	lr

000009b6 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     9b6:	b480      	push	{r7}
     9b8:	b083      	sub	sp, #12
     9ba:	af00      	add	r7, sp, #0
     9bc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     9be:	687b      	ldr	r3, [r7, #4]
     9c0:	695b      	ldr	r3, [r3, #20]
     9c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ca:	bf00      	nop
     9cc:	370c      	adds	r7, #12
     9ce:	46bd      	mov	sp, r7
     9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9d4:	4770      	bx	lr

000009d6 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     9d6:	b480      	push	{r7}
     9d8:	b083      	sub	sp, #12
     9da:	af00      	add	r7, sp, #0
     9dc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	695b      	ldr	r3, [r3, #20]
     9e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ea:	bf00      	nop
     9ec:	370c      	adds	r7, #12
     9ee:	46bd      	mov	sp, r7
     9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f4:	4770      	bx	lr

000009f6 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     9f6:	b480      	push	{r7}
     9f8:	b083      	sub	sp, #12
     9fa:	af00      	add	r7, sp, #0
     9fc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     9fe:	687b      	ldr	r3, [r7, #4]
     a00:	695b      	ldr	r3, [r3, #20]
     a02:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     a06:	687b      	ldr	r3, [r7, #4]
     a08:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a0a:	bf00      	nop
     a0c:	370c      	adds	r7, #12
     a0e:	46bd      	mov	sp, r7
     a10:	f85d 7b04 	ldr.w	r7, [sp], #4
     a14:	4770      	bx	lr

00000a16 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     a16:	b480      	push	{r7}
     a18:	b083      	sub	sp, #12
     a1a:	af00      	add	r7, sp, #0
     a1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	695b      	ldr	r3, [r3, #20]
     a22:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a2a:	bf00      	nop
     a2c:	370c      	adds	r7, #12
     a2e:	46bd      	mov	sp, r7
     a30:	f85d 7b04 	ldr.w	r7, [sp], #4
     a34:	4770      	bx	lr

00000a36 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     a36:	b480      	push	{r7}
     a38:	b083      	sub	sp, #12
     a3a:	af00      	add	r7, sp, #0
     a3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	699b      	ldr	r3, [r3, #24]
     a42:	f043 0201 	orr.w	r2, r3, #1
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a4a:	bf00      	nop
     a4c:	370c      	adds	r7, #12
     a4e:	46bd      	mov	sp, r7
     a50:	f85d 7b04 	ldr.w	r7, [sp], #4
     a54:	4770      	bx	lr

00000a56 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     a56:	b480      	push	{r7}
     a58:	b083      	sub	sp, #12
     a5a:	af00      	add	r7, sp, #0
     a5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	699b      	ldr	r3, [r3, #24]
     a62:	f043 0202 	orr.w	r2, r3, #2
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a6a:	bf00      	nop
     a6c:	370c      	adds	r7, #12
     a6e:	46bd      	mov	sp, r7
     a70:	f85d 7b04 	ldr.w	r7, [sp], #4
     a74:	4770      	bx	lr

00000a76 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     a76:	b480      	push	{r7}
     a78:	b083      	sub	sp, #12
     a7a:	af00      	add	r7, sp, #0
     a7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	699b      	ldr	r3, [r3, #24]
     a82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a8a:	bf00      	nop
     a8c:	370c      	adds	r7, #12
     a8e:	46bd      	mov	sp, r7
     a90:	f85d 7b04 	ldr.w	r7, [sp], #4
     a94:	4770      	bx	lr

00000a96 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     a96:	b480      	push	{r7}
     a98:	b083      	sub	sp, #12
     a9a:	af00      	add	r7, sp, #0
     a9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	699b      	ldr	r3, [r3, #24]
     aa2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     aa6:	687b      	ldr	r3, [r7, #4]
     aa8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aaa:	bf00      	nop
     aac:	370c      	adds	r7, #12
     aae:	46bd      	mov	sp, r7
     ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab4:	4770      	bx	lr

00000ab6 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     ab6:	b480      	push	{r7}
     ab8:	b083      	sub	sp, #12
     aba:	af00      	add	r7, sp, #0
     abc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	699b      	ldr	r3, [r3, #24]
     ac2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aca:	bf00      	nop
     acc:	370c      	adds	r7, #12
     ace:	46bd      	mov	sp, r7
     ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ad4:	4770      	bx	lr

00000ad6 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     ad6:	b480      	push	{r7}
     ad8:	b083      	sub	sp, #12
     ada:	af00      	add	r7, sp, #0
     adc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	699b      	ldr	r3, [r3, #24]
     ae2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     ae6:	687b      	ldr	r3, [r7, #4]
     ae8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aea:	bf00      	nop
     aec:	370c      	adds	r7, #12
     aee:	46bd      	mov	sp, r7
     af0:	f85d 7b04 	ldr.w	r7, [sp], #4
     af4:	4770      	bx	lr

00000af6 <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     af6:	b480      	push	{r7}
     af8:	b083      	sub	sp, #12
     afa:	af00      	add	r7, sp, #0
     afc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	69db      	ldr	r3, [r3, #28]
     b02:	f043 0208 	orr.w	r2, r3, #8
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b0a:	bf00      	nop
     b0c:	370c      	adds	r7, #12
     b0e:	46bd      	mov	sp, r7
     b10:	f85d 7b04 	ldr.w	r7, [sp], #4
     b14:	4770      	bx	lr

00000b16 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     b16:	b480      	push	{r7}
     b18:	b083      	sub	sp, #12
     b1a:	af00      	add	r7, sp, #0
     b1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	69db      	ldr	r3, [r3, #28]
     b22:	f043 0220 	orr.w	r2, r3, #32
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b2a:	bf00      	nop
     b2c:	370c      	adds	r7, #12
     b2e:	46bd      	mov	sp, r7
     b30:	f85d 7b04 	ldr.w	r7, [sp], #4
     b34:	4770      	bx	lr

00000b36 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     b36:	b480      	push	{r7}
     b38:	b083      	sub	sp, #12
     b3a:	af00      	add	r7, sp, #0
     b3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	69db      	ldr	r3, [r3, #28]
     b42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     b46:	687b      	ldr	r3, [r7, #4]
     b48:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b4a:	bf00      	nop
     b4c:	370c      	adds	r7, #12
     b4e:	46bd      	mov	sp, r7
     b50:	f85d 7b04 	ldr.w	r7, [sp], #4
     b54:	4770      	bx	lr

00000b56 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     b56:	b480      	push	{r7}
     b58:	b083      	sub	sp, #12
     b5a:	af00      	add	r7, sp, #0
     b5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	69db      	ldr	r3, [r3, #28]
     b62:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b6a:	bf00      	nop
     b6c:	370c      	adds	r7, #12
     b6e:	46bd      	mov	sp, r7
     b70:	f85d 7b04 	ldr.w	r7, [sp], #4
     b74:	4770      	bx	lr

00000b76 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     b76:	b480      	push	{r7}
     b78:	b083      	sub	sp, #12
     b7a:	af00      	add	r7, sp, #0
     b7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     b7e:	687b      	ldr	r3, [r7, #4]
     b80:	6a1b      	ldr	r3, [r3, #32]
     b82:	f043 0201 	orr.w	r2, r3, #1
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b8a:	bf00      	nop
     b8c:	370c      	adds	r7, #12
     b8e:	46bd      	mov	sp, r7
     b90:	f85d 7b04 	ldr.w	r7, [sp], #4
     b94:	4770      	bx	lr

00000b96 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     b96:	b480      	push	{r7}
     b98:	b083      	sub	sp, #12
     b9a:	af00      	add	r7, sp, #0
     b9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	6a1b      	ldr	r3, [r3, #32]
     ba2:	f043 0202 	orr.w	r2, r3, #2
     ba6:	687b      	ldr	r3, [r7, #4]
     ba8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     baa:	bf00      	nop
     bac:	370c      	adds	r7, #12
     bae:	46bd      	mov	sp, r7
     bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb4:	4770      	bx	lr

00000bb6 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     bb6:	b480      	push	{r7}
     bb8:	b083      	sub	sp, #12
     bba:	af00      	add	r7, sp, #0
     bbc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	6a1b      	ldr	r3, [r3, #32]
     bc2:	f043 0204 	orr.w	r2, r3, #4
     bc6:	687b      	ldr	r3, [r7, #4]
     bc8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bca:	bf00      	nop
     bcc:	370c      	adds	r7, #12
     bce:	46bd      	mov	sp, r7
     bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bd4:	4770      	bx	lr

00000bd6 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     bd6:	b480      	push	{r7}
     bd8:	b083      	sub	sp, #12
     bda:	af00      	add	r7, sp, #0
     bdc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     bde:	687b      	ldr	r3, [r7, #4]
     be0:	6a1b      	ldr	r3, [r3, #32]
     be2:	f043 0208 	orr.w	r2, r3, #8
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bea:	bf00      	nop
     bec:	370c      	adds	r7, #12
     bee:	46bd      	mov	sp, r7
     bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bf4:	4770      	bx	lr

00000bf6 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     bf6:	b480      	push	{r7}
     bf8:	b083      	sub	sp, #12
     bfa:	af00      	add	r7, sp, #0
     bfc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	6a1b      	ldr	r3, [r3, #32]
     c02:	f043 0220 	orr.w	r2, r3, #32
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c0a:	bf00      	nop
     c0c:	370c      	adds	r7, #12
     c0e:	46bd      	mov	sp, r7
     c10:	f85d 7b04 	ldr.w	r7, [sp], #4
     c14:	4770      	bx	lr

00000c16 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     c16:	b480      	push	{r7}
     c18:	b083      	sub	sp, #12
     c1a:	af00      	add	r7, sp, #0
     c1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	6a1b      	ldr	r3, [r3, #32]
     c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c2a:	bf00      	nop
     c2c:	370c      	adds	r7, #12
     c2e:	46bd      	mov	sp, r7
     c30:	f85d 7b04 	ldr.w	r7, [sp], #4
     c34:	4770      	bx	lr

00000c36 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     c36:	b480      	push	{r7}
     c38:	b085      	sub	sp, #20
     c3a:	af00      	add	r7, sp, #0
     c3c:	60f8      	str	r0, [r7, #12]
     c3e:	460b      	mov	r3, r1
     c40:	607a      	str	r2, [r7, #4]
     c42:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c44:	7afb      	ldrb	r3, [r7, #11]
     c46:	68fa      	ldr	r2, [r7, #12]
     c48:	01db      	lsls	r3, r3, #7
     c4a:	4413      	add	r3, r2
     c4c:	3308      	adds	r3, #8
     c4e:	687a      	ldr	r2, [r7, #4]
     c50:	601a      	str	r2, [r3, #0]
}
     c52:	bf00      	nop
     c54:	3714      	adds	r7, #20
     c56:	46bd      	mov	sp, r7
     c58:	f85d 7b04 	ldr.w	r7, [sp], #4
     c5c:	4770      	bx	lr

00000c5e <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     c5e:	b480      	push	{r7}
     c60:	b085      	sub	sp, #20
     c62:	af00      	add	r7, sp, #0
     c64:	60f8      	str	r0, [r7, #12]
     c66:	460b      	mov	r3, r1
     c68:	607a      	str	r2, [r7, #4]
     c6a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6c:	7afb      	ldrb	r3, [r7, #11]
     c6e:	68fa      	ldr	r2, [r7, #12]
     c70:	01db      	lsls	r3, r3, #7
     c72:	4413      	add	r3, r2
     c74:	3304      	adds	r3, #4
     c76:	687a      	ldr	r2, [r7, #4]
     c78:	601a      	str	r2, [r3, #0]
}
     c7a:	bf00      	nop
     c7c:	3714      	adds	r7, #20
     c7e:	46bd      	mov	sp, r7
     c80:	f85d 7b04 	ldr.w	r7, [sp], #4
     c84:	4770      	bx	lr

00000c86 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     c86:	b480      	push	{r7}
     c88:	b085      	sub	sp, #20
     c8a:	af00      	add	r7, sp, #0
     c8c:	60f8      	str	r0, [r7, #12]
     c8e:	460b      	mov	r3, r1
     c90:	607a      	str	r2, [r7, #4]
     c92:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c94:	7afb      	ldrb	r3, [r7, #11]
     c96:	68fa      	ldr	r2, [r7, #12]
     c98:	01db      	lsls	r3, r3, #7
     c9a:	4413      	add	r3, r2
     c9c:	3318      	adds	r3, #24
     c9e:	687a      	ldr	r2, [r7, #4]
     ca0:	601a      	str	r2, [r3, #0]
}
     ca2:	bf00      	nop
     ca4:	3714      	adds	r7, #20
     ca6:	46bd      	mov	sp, r7
     ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cac:	4770      	bx	lr

00000cae <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     cae:	b480      	push	{r7}
     cb0:	b085      	sub	sp, #20
     cb2:	af00      	add	r7, sp, #0
     cb4:	60f8      	str	r0, [r7, #12]
     cb6:	460b      	mov	r3, r1
     cb8:	607a      	str	r2, [r7, #4]
     cba:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cbc:	7afb      	ldrb	r3, [r7, #11]
     cbe:	68fa      	ldr	r2, [r7, #12]
     cc0:	01db      	lsls	r3, r3, #7
     cc2:	4413      	add	r3, r2
     cc4:	3314      	adds	r3, #20
     cc6:	687a      	ldr	r2, [r7, #4]
     cc8:	601a      	str	r2, [r3, #0]
}
     cca:	bf00      	nop
     ccc:	3714      	adds	r7, #20
     cce:	46bd      	mov	sp, r7
     cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
     cd4:	4770      	bx	lr

00000cd6 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     cd6:	b480      	push	{r7}
     cd8:	b085      	sub	sp, #20
     cda:	af00      	add	r7, sp, #0
     cdc:	6078      	str	r0, [r7, #4]
     cde:	4608      	mov	r0, r1
     ce0:	4611      	mov	r1, r2
     ce2:	461a      	mov	r2, r3
     ce4:	4603      	mov	r3, r0
     ce6:	70fb      	strb	r3, [r7, #3]
     ce8:	460b      	mov	r3, r1
     cea:	70bb      	strb	r3, [r7, #2]
     cec:	4613      	mov	r3, r2
     cee:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cf0:	78fa      	ldrb	r2, [r7, #3]
     cf2:	78bb      	ldrb	r3, [r7, #2]
     cf4:	6879      	ldr	r1, [r7, #4]
     cf6:	01d2      	lsls	r2, r2, #7
     cf8:	440a      	add	r2, r1
     cfa:	4413      	add	r3, r2
     cfc:	3330      	adds	r3, #48	; 0x30
     cfe:	781b      	ldrb	r3, [r3, #0]
     d00:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d02:	7bfb      	ldrb	r3, [r7, #15]
     d04:	f023 030f 	bic.w	r3, r3, #15
     d08:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     d0a:	787b      	ldrb	r3, [r7, #1]
     d0c:	f003 030f 	and.w	r3, r3, #15
     d10:	b2da      	uxtb	r2, r3
     d12:	7bfb      	ldrb	r3, [r7, #15]
     d14:	4313      	orrs	r3, r2
     d16:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d18:	78fa      	ldrb	r2, [r7, #3]
     d1a:	78bb      	ldrb	r3, [r7, #2]
     d1c:	6879      	ldr	r1, [r7, #4]
     d1e:	01d2      	lsls	r2, r2, #7
     d20:	440a      	add	r2, r1
     d22:	4413      	add	r3, r2
     d24:	3330      	adds	r3, #48	; 0x30
     d26:	7bfa      	ldrb	r2, [r7, #15]
     d28:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     d2a:	bf00      	nop
     d2c:	3714      	adds	r7, #20
     d2e:	46bd      	mov	sp, r7
     d30:	f85d 7b04 	ldr.w	r7, [sp], #4
     d34:	4770      	bx	lr

00000d36 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     d36:	b480      	push	{r7}
     d38:	b085      	sub	sp, #20
     d3a:	af00      	add	r7, sp, #0
     d3c:	6078      	str	r0, [r7, #4]
     d3e:	4608      	mov	r0, r1
     d40:	4611      	mov	r1, r2
     d42:	461a      	mov	r2, r3
     d44:	4603      	mov	r3, r0
     d46:	70fb      	strb	r3, [r7, #3]
     d48:	460b      	mov	r3, r1
     d4a:	70bb      	strb	r3, [r7, #2]
     d4c:	4613      	mov	r3, r2
     d4e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d50:	78fa      	ldrb	r2, [r7, #3]
     d52:	78bb      	ldrb	r3, [r7, #2]
     d54:	6879      	ldr	r1, [r7, #4]
     d56:	01d2      	lsls	r2, r2, #7
     d58:	440a      	add	r2, r1
     d5a:	4413      	add	r3, r2
     d5c:	3330      	adds	r3, #48	; 0x30
     d5e:	781b      	ldrb	r3, [r3, #0]
     d60:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d62:	7bfb      	ldrb	r3, [r7, #15]
     d64:	f003 030f 	and.w	r3, r3, #15
     d68:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     d6a:	787b      	ldrb	r3, [r7, #1]
     d6c:	011b      	lsls	r3, r3, #4
     d6e:	b2da      	uxtb	r2, r3
     d70:	7bfb      	ldrb	r3, [r7, #15]
     d72:	4313      	orrs	r3, r2
     d74:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d76:	78fa      	ldrb	r2, [r7, #3]
     d78:	78bb      	ldrb	r3, [r7, #2]
     d7a:	6879      	ldr	r1, [r7, #4]
     d7c:	01d2      	lsls	r2, r2, #7
     d7e:	440a      	add	r2, r1
     d80:	4413      	add	r3, r2
     d82:	3330      	adds	r3, #48	; 0x30
     d84:	7bfa      	ldrb	r2, [r7, #15]
     d86:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     d88:	bf00      	nop
     d8a:	3714      	adds	r7, #20
     d8c:	46bd      	mov	sp, r7
     d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
     d92:	4770      	bx	lr

00000d94 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     d94:	b480      	push	{r7}
     d96:	b085      	sub	sp, #20
     d98:	af00      	add	r7, sp, #0
     d9a:	6078      	str	r0, [r7, #4]
     d9c:	4608      	mov	r0, r1
     d9e:	4611      	mov	r1, r2
     da0:	461a      	mov	r2, r3
     da2:	4603      	mov	r3, r0
     da4:	70fb      	strb	r3, [r7, #3]
     da6:	460b      	mov	r3, r1
     da8:	70bb      	strb	r3, [r7, #2]
     daa:	4613      	mov	r3, r2
     dac:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dae:	78fa      	ldrb	r2, [r7, #3]
     db0:	78bb      	ldrb	r3, [r7, #2]
     db2:	6879      	ldr	r1, [r7, #4]
     db4:	01d2      	lsls	r2, r2, #7
     db6:	440a      	add	r2, r1
     db8:	4413      	add	r3, r2
     dba:	3340      	adds	r3, #64	; 0x40
     dbc:	781b      	ldrb	r3, [r3, #0]
     dbe:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     dc0:	7bfb      	ldrb	r3, [r7, #15]
     dc2:	f023 0301 	bic.w	r3, r3, #1
     dc6:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dc8:	787a      	ldrb	r2, [r7, #1]
     dca:	7bfb      	ldrb	r3, [r7, #15]
     dcc:	4313      	orrs	r3, r2
     dce:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dd0:	78fa      	ldrb	r2, [r7, #3]
     dd2:	78bb      	ldrb	r3, [r7, #2]
     dd4:	6879      	ldr	r1, [r7, #4]
     dd6:	01d2      	lsls	r2, r2, #7
     dd8:	440a      	add	r2, r1
     dda:	4413      	add	r3, r2
     ddc:	3340      	adds	r3, #64	; 0x40
     dde:	7bfa      	ldrb	r2, [r7, #15]
     de0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     de2:	bf00      	nop
     de4:	3714      	adds	r7, #20
     de6:	46bd      	mov	sp, r7
     de8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dec:	4770      	bx	lr

00000dee <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     dee:	b490      	push	{r4, r7}
     df0:	b082      	sub	sp, #8
     df2:	af00      	add	r7, sp, #0
     df4:	6078      	str	r0, [r7, #4]
     df6:	460b      	mov	r3, r1
     df8:	70fb      	strb	r3, [r7, #3]
     dfa:	4613      	mov	r3, r2
     dfc:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     dfe:	78fa      	ldrb	r2, [r7, #3]
     e00:	78bb      	ldrb	r3, [r7, #2]
     e02:	78f8      	ldrb	r0, [r7, #3]
     e04:	78b9      	ldrb	r1, [r7, #2]
     e06:	687c      	ldr	r4, [r7, #4]
     e08:	01c0      	lsls	r0, r0, #7
     e0a:	4420      	add	r0, r4
     e0c:	4401      	add	r1, r0
     e0e:	3140      	adds	r1, #64	; 0x40
     e10:	7809      	ldrb	r1, [r1, #0]
     e12:	b2c9      	uxtb	r1, r1
     e14:	f041 0104 	orr.w	r1, r1, #4
     e18:	b2c8      	uxtb	r0, r1
     e1a:	6879      	ldr	r1, [r7, #4]
     e1c:	01d2      	lsls	r2, r2, #7
     e1e:	440a      	add	r2, r1
     e20:	4413      	add	r3, r2
     e22:	3340      	adds	r3, #64	; 0x40
     e24:	4602      	mov	r2, r0
     e26:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e28:	bf00      	nop
     e2a:	3708      	adds	r7, #8
     e2c:	46bd      	mov	sp, r7
     e2e:	bc90      	pop	{r4, r7}
     e30:	4770      	bx	lr

00000e32 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     e32:	b490      	push	{r4, r7}
     e34:	b082      	sub	sp, #8
     e36:	af00      	add	r7, sp, #0
     e38:	6078      	str	r0, [r7, #4]
     e3a:	460b      	mov	r3, r1
     e3c:	70fb      	strb	r3, [r7, #3]
     e3e:	4613      	mov	r3, r2
     e40:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e42:	78fa      	ldrb	r2, [r7, #3]
     e44:	78bb      	ldrb	r3, [r7, #2]
     e46:	78f8      	ldrb	r0, [r7, #3]
     e48:	78b9      	ldrb	r1, [r7, #2]
     e4a:	687c      	ldr	r4, [r7, #4]
     e4c:	01c0      	lsls	r0, r0, #7
     e4e:	4420      	add	r0, r4
     e50:	4401      	add	r1, r0
     e52:	3140      	adds	r1, #64	; 0x40
     e54:	7809      	ldrb	r1, [r1, #0]
     e56:	b2c9      	uxtb	r1, r1
     e58:	f021 0104 	bic.w	r1, r1, #4
     e5c:	b2c8      	uxtb	r0, r1
     e5e:	6879      	ldr	r1, [r7, #4]
     e60:	01d2      	lsls	r2, r2, #7
     e62:	440a      	add	r2, r1
     e64:	4413      	add	r3, r2
     e66:	3340      	adds	r3, #64	; 0x40
     e68:	4602      	mov	r2, r0
     e6a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e6c:	bf00      	nop
     e6e:	3708      	adds	r7, #8
     e70:	46bd      	mov	sp, r7
     e72:	bc90      	pop	{r4, r7}
     e74:	4770      	bx	lr

00000e76 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     e76:	b480      	push	{r7}
     e78:	b085      	sub	sp, #20
     e7a:	af00      	add	r7, sp, #0
     e7c:	60f8      	str	r0, [r7, #12]
     e7e:	460b      	mov	r3, r1
     e80:	607a      	str	r2, [r7, #4]
     e82:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e84:	7afb      	ldrb	r3, [r7, #11]
     e86:	68fa      	ldr	r2, [r7, #12]
     e88:	01db      	lsls	r3, r3, #7
     e8a:	4413      	add	r3, r2
     e8c:	3328      	adds	r3, #40	; 0x28
     e8e:	687a      	ldr	r2, [r7, #4]
     e90:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e92:	bf00      	nop
     e94:	3714      	adds	r7, #20
     e96:	46bd      	mov	sp, r7
     e98:	f85d 7b04 	ldr.w	r7, [sp], #4
     e9c:	4770      	bx	lr
	...

00000ea0 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     ea0:	b580      	push	{r7, lr}
     ea2:	b082      	sub	sp, #8
     ea4:	af00      	add	r7, sp, #0
     ea6:	4603      	mov	r3, r0
     ea8:	6039      	str	r1, [r7, #0]
     eaa:	71fb      	strb	r3, [r7, #7]
     eac:	4613      	mov	r3, r2
     eae:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     eb0:	79bb      	ldrb	r3, [r7, #6]
     eb2:	2b01      	cmp	r3, #1
     eb4:	d01c      	beq.n	ef0 <_gpio_set_direction+0x50>
     eb6:	2b02      	cmp	r3, #2
     eb8:	d037      	beq.n	f2a <_gpio_set_direction+0x8a>
     eba:	2b00      	cmp	r3, #0
     ebc:	d14e      	bne.n	f5c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     ebe:	79fb      	ldrb	r3, [r7, #7]
     ec0:	683a      	ldr	r2, [r7, #0]
     ec2:	4619      	mov	r1, r3
     ec4:	482a      	ldr	r0, [pc, #168]	; (f70 <_gpio_set_direction+0xd0>)
     ec6:	4b2b      	ldr	r3, [pc, #172]	; (f74 <_gpio_set_direction+0xd4>)
     ec8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     eca:	683b      	ldr	r3, [r7, #0]
     ecc:	b29b      	uxth	r3, r3
     ece:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     ed2:	79fb      	ldrb	r3, [r7, #7]
     ed4:	4619      	mov	r1, r3
     ed6:	4826      	ldr	r0, [pc, #152]	; (f70 <_gpio_set_direction+0xd0>)
     ed8:	4b27      	ldr	r3, [pc, #156]	; (f78 <_gpio_set_direction+0xd8>)
     eda:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     edc:	683b      	ldr	r3, [r7, #0]
     ede:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     ee0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     ee4:	79fb      	ldrb	r3, [r7, #7]
     ee6:	4619      	mov	r1, r3
     ee8:	4821      	ldr	r0, [pc, #132]	; (f70 <_gpio_set_direction+0xd0>)
     eea:	4b23      	ldr	r3, [pc, #140]	; (f78 <_gpio_set_direction+0xd8>)
     eec:	4798      	blx	r3
		break;
     eee:	e03a      	b.n	f66 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     ef0:	79fb      	ldrb	r3, [r7, #7]
     ef2:	683a      	ldr	r2, [r7, #0]
     ef4:	4619      	mov	r1, r3
     ef6:	481e      	ldr	r0, [pc, #120]	; (f70 <_gpio_set_direction+0xd0>)
     ef8:	4b1e      	ldr	r3, [pc, #120]	; (f74 <_gpio_set_direction+0xd4>)
     efa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     efc:	683b      	ldr	r3, [r7, #0]
     efe:	b29b      	uxth	r3, r3
     f00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     f08:	79f9      	ldrb	r1, [r7, #7]
     f0a:	461a      	mov	r2, r3
     f0c:	4818      	ldr	r0, [pc, #96]	; (f70 <_gpio_set_direction+0xd0>)
     f0e:	4b1a      	ldr	r3, [pc, #104]	; (f78 <_gpio_set_direction+0xd8>)
     f10:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     f12:	683b      	ldr	r3, [r7, #0]
     f14:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     f16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     f1e:	79f9      	ldrb	r1, [r7, #7]
     f20:	461a      	mov	r2, r3
     f22:	4813      	ldr	r0, [pc, #76]	; (f70 <_gpio_set_direction+0xd0>)
     f24:	4b14      	ldr	r3, [pc, #80]	; (f78 <_gpio_set_direction+0xd8>)
     f26:	4798      	blx	r3
		break;
     f28:	e01d      	b.n	f66 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     f2a:	79fb      	ldrb	r3, [r7, #7]
     f2c:	683a      	ldr	r2, [r7, #0]
     f2e:	4619      	mov	r1, r3
     f30:	480f      	ldr	r0, [pc, #60]	; (f70 <_gpio_set_direction+0xd0>)
     f32:	4b12      	ldr	r3, [pc, #72]	; (f7c <_gpio_set_direction+0xdc>)
     f34:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     f36:	683b      	ldr	r3, [r7, #0]
     f38:	b29b      	uxth	r3, r3
     f3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     f3e:	79fb      	ldrb	r3, [r7, #7]
     f40:	4619      	mov	r1, r3
     f42:	480b      	ldr	r0, [pc, #44]	; (f70 <_gpio_set_direction+0xd0>)
     f44:	4b0c      	ldr	r3, [pc, #48]	; (f78 <_gpio_set_direction+0xd8>)
     f46:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     f48:	683b      	ldr	r3, [r7, #0]
     f4a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     f4c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     f50:	79fb      	ldrb	r3, [r7, #7]
     f52:	4619      	mov	r1, r3
     f54:	4806      	ldr	r0, [pc, #24]	; (f70 <_gpio_set_direction+0xd0>)
     f56:	4b08      	ldr	r3, [pc, #32]	; (f78 <_gpio_set_direction+0xd8>)
     f58:	4798      	blx	r3
		break;
     f5a:	e004      	b.n	f66 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     f5c:	2246      	movs	r2, #70	; 0x46
     f5e:	4908      	ldr	r1, [pc, #32]	; (f80 <_gpio_set_direction+0xe0>)
     f60:	2000      	movs	r0, #0
     f62:	4b08      	ldr	r3, [pc, #32]	; (f84 <_gpio_set_direction+0xe4>)
     f64:	4798      	blx	r3
	}
}
     f66:	bf00      	nop
     f68:	3708      	adds	r7, #8
     f6a:	46bd      	mov	sp, r7
     f6c:	bd80      	pop	{r7, pc}
     f6e:	bf00      	nop
     f70:	41008000 	.word	0x41008000
     f74:	00000c5f 	.word	0x00000c5f
     f78:	00000e77 	.word	0x00000e77
     f7c:	00000c37 	.word	0x00000c37
     f80:	0001073c 	.word	0x0001073c
     f84:	00003b01 	.word	0x00003b01

00000f88 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     f88:	b580      	push	{r7, lr}
     f8a:	b082      	sub	sp, #8
     f8c:	af00      	add	r7, sp, #0
     f8e:	4603      	mov	r3, r0
     f90:	6039      	str	r1, [r7, #0]
     f92:	71fb      	strb	r3, [r7, #7]
     f94:	4613      	mov	r3, r2
     f96:	71bb      	strb	r3, [r7, #6]
	if (level) {
     f98:	79bb      	ldrb	r3, [r7, #6]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d006      	beq.n	fac <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     f9e:	79fb      	ldrb	r3, [r7, #7]
     fa0:	683a      	ldr	r2, [r7, #0]
     fa2:	4619      	mov	r1, r3
     fa4:	4806      	ldr	r0, [pc, #24]	; (fc0 <_gpio_set_level+0x38>)
     fa6:	4b07      	ldr	r3, [pc, #28]	; (fc4 <_gpio_set_level+0x3c>)
     fa8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     faa:	e005      	b.n	fb8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     fac:	79fb      	ldrb	r3, [r7, #7]
     fae:	683a      	ldr	r2, [r7, #0]
     fb0:	4619      	mov	r1, r3
     fb2:	4803      	ldr	r0, [pc, #12]	; (fc0 <_gpio_set_level+0x38>)
     fb4:	4b04      	ldr	r3, [pc, #16]	; (fc8 <_gpio_set_level+0x40>)
     fb6:	4798      	blx	r3
}
     fb8:	bf00      	nop
     fba:	3708      	adds	r7, #8
     fbc:	46bd      	mov	sp, r7
     fbe:	bd80      	pop	{r7, pc}
     fc0:	41008000 	.word	0x41008000
     fc4:	00000c87 	.word	0x00000c87
     fc8:	00000caf 	.word	0x00000caf

00000fcc <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     fcc:	b580      	push	{r7, lr}
     fce:	b082      	sub	sp, #8
     fd0:	af00      	add	r7, sp, #0
     fd2:	4603      	mov	r3, r0
     fd4:	71fb      	strb	r3, [r7, #7]
     fd6:	460b      	mov	r3, r1
     fd8:	71bb      	strb	r3, [r7, #6]
     fda:	4613      	mov	r3, r2
     fdc:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     fde:	797b      	ldrb	r3, [r7, #5]
     fe0:	2b01      	cmp	r3, #1
     fe2:	d00a      	beq.n	ffa <_gpio_set_pin_pull_mode+0x2e>
     fe4:	2b02      	cmp	r3, #2
     fe6:	d01f      	beq.n	1028 <_gpio_set_pin_pull_mode+0x5c>
     fe8:	2b00      	cmp	r3, #0
     fea:	d134      	bne.n	1056 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     fec:	79ba      	ldrb	r2, [r7, #6]
     fee:	79fb      	ldrb	r3, [r7, #7]
     ff0:	4619      	mov	r1, r3
     ff2:	481e      	ldr	r0, [pc, #120]	; (106c <_gpio_set_pin_pull_mode+0xa0>)
     ff4:	4b1e      	ldr	r3, [pc, #120]	; (1070 <_gpio_set_pin_pull_mode+0xa4>)
     ff6:	4798      	blx	r3
		break;
     ff8:	e033      	b.n	1062 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     ffa:	79bb      	ldrb	r3, [r7, #6]
     ffc:	2201      	movs	r2, #1
     ffe:	409a      	lsls	r2, r3
    1000:	79fb      	ldrb	r3, [r7, #7]
    1002:	4619      	mov	r1, r3
    1004:	4819      	ldr	r0, [pc, #100]	; (106c <_gpio_set_pin_pull_mode+0xa0>)
    1006:	4b1b      	ldr	r3, [pc, #108]	; (1074 <_gpio_set_pin_pull_mode+0xa8>)
    1008:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    100a:	79ba      	ldrb	r2, [r7, #6]
    100c:	79fb      	ldrb	r3, [r7, #7]
    100e:	4619      	mov	r1, r3
    1010:	4816      	ldr	r0, [pc, #88]	; (106c <_gpio_set_pin_pull_mode+0xa0>)
    1012:	4b19      	ldr	r3, [pc, #100]	; (1078 <_gpio_set_pin_pull_mode+0xac>)
    1014:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1016:	79bb      	ldrb	r3, [r7, #6]
    1018:	2201      	movs	r2, #1
    101a:	409a      	lsls	r2, r3
    101c:	79fb      	ldrb	r3, [r7, #7]
    101e:	4619      	mov	r1, r3
    1020:	4812      	ldr	r0, [pc, #72]	; (106c <_gpio_set_pin_pull_mode+0xa0>)
    1022:	4b16      	ldr	r3, [pc, #88]	; (107c <_gpio_set_pin_pull_mode+0xb0>)
    1024:	4798      	blx	r3
		break;
    1026:	e01c      	b.n	1062 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1028:	79bb      	ldrb	r3, [r7, #6]
    102a:	2201      	movs	r2, #1
    102c:	409a      	lsls	r2, r3
    102e:	79fb      	ldrb	r3, [r7, #7]
    1030:	4619      	mov	r1, r3
    1032:	480e      	ldr	r0, [pc, #56]	; (106c <_gpio_set_pin_pull_mode+0xa0>)
    1034:	4b0f      	ldr	r3, [pc, #60]	; (1074 <_gpio_set_pin_pull_mode+0xa8>)
    1036:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1038:	79ba      	ldrb	r2, [r7, #6]
    103a:	79fb      	ldrb	r3, [r7, #7]
    103c:	4619      	mov	r1, r3
    103e:	480b      	ldr	r0, [pc, #44]	; (106c <_gpio_set_pin_pull_mode+0xa0>)
    1040:	4b0d      	ldr	r3, [pc, #52]	; (1078 <_gpio_set_pin_pull_mode+0xac>)
    1042:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1044:	79bb      	ldrb	r3, [r7, #6]
    1046:	2201      	movs	r2, #1
    1048:	409a      	lsls	r2, r3
    104a:	79fb      	ldrb	r3, [r7, #7]
    104c:	4619      	mov	r1, r3
    104e:	4807      	ldr	r0, [pc, #28]	; (106c <_gpio_set_pin_pull_mode+0xa0>)
    1050:	4b0b      	ldr	r3, [pc, #44]	; (1080 <_gpio_set_pin_pull_mode+0xb4>)
    1052:	4798      	blx	r3
		break;
    1054:	e005      	b.n	1062 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1056:	2289      	movs	r2, #137	; 0x89
    1058:	490a      	ldr	r1, [pc, #40]	; (1084 <_gpio_set_pin_pull_mode+0xb8>)
    105a:	2000      	movs	r0, #0
    105c:	4b0a      	ldr	r3, [pc, #40]	; (1088 <_gpio_set_pin_pull_mode+0xbc>)
    105e:	4798      	blx	r3
		break;
    1060:	bf00      	nop
	}
}
    1062:	bf00      	nop
    1064:	3708      	adds	r7, #8
    1066:	46bd      	mov	sp, r7
    1068:	bd80      	pop	{r7, pc}
    106a:	bf00      	nop
    106c:	41008000 	.word	0x41008000
    1070:	00000e33 	.word	0x00000e33
    1074:	00000c5f 	.word	0x00000c5f
    1078:	00000def 	.word	0x00000def
    107c:	00000c87 	.word	0x00000c87
    1080:	00000caf 	.word	0x00000caf
    1084:	0001073c 	.word	0x0001073c
    1088:	00003b01 	.word	0x00003b01

0000108c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    108c:	b590      	push	{r4, r7, lr}
    108e:	b085      	sub	sp, #20
    1090:	af00      	add	r7, sp, #0
    1092:	6078      	str	r0, [r7, #4]
    1094:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	095b      	lsrs	r3, r3, #5
    109a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    109c:	687b      	ldr	r3, [r7, #4]
    109e:	b2db      	uxtb	r3, r3
    10a0:	f003 031f 	and.w	r3, r3, #31
    10a4:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    10a6:	683b      	ldr	r3, [r7, #0]
    10a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    10ac:	d106      	bne.n	10bc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    10ae:	7bba      	ldrb	r2, [r7, #14]
    10b0:	7bf9      	ldrb	r1, [r7, #15]
    10b2:	2300      	movs	r3, #0
    10b4:	4812      	ldr	r0, [pc, #72]	; (1100 <_gpio_set_pin_function+0x74>)
    10b6:	4c13      	ldr	r4, [pc, #76]	; (1104 <_gpio_set_pin_function+0x78>)
    10b8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    10ba:	e01d      	b.n	10f8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    10bc:	7bba      	ldrb	r2, [r7, #14]
    10be:	7bf9      	ldrb	r1, [r7, #15]
    10c0:	2301      	movs	r3, #1
    10c2:	480f      	ldr	r0, [pc, #60]	; (1100 <_gpio_set_pin_function+0x74>)
    10c4:	4c0f      	ldr	r4, [pc, #60]	; (1104 <_gpio_set_pin_function+0x78>)
    10c6:	47a0      	blx	r4
		if (pin & 1) {
    10c8:	7bbb      	ldrb	r3, [r7, #14]
    10ca:	f003 0301 	and.w	r3, r3, #1
    10ce:	2b00      	cmp	r3, #0
    10d0:	d009      	beq.n	10e6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    10d2:	7bbb      	ldrb	r3, [r7, #14]
    10d4:	085b      	lsrs	r3, r3, #1
    10d6:	b2da      	uxtb	r2, r3
    10d8:	683b      	ldr	r3, [r7, #0]
    10da:	b2db      	uxtb	r3, r3
    10dc:	7bf9      	ldrb	r1, [r7, #15]
    10de:	4808      	ldr	r0, [pc, #32]	; (1100 <_gpio_set_pin_function+0x74>)
    10e0:	4c09      	ldr	r4, [pc, #36]	; (1108 <_gpio_set_pin_function+0x7c>)
    10e2:	47a0      	blx	r4
}
    10e4:	e008      	b.n	10f8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    10e6:	7bbb      	ldrb	r3, [r7, #14]
    10e8:	085b      	lsrs	r3, r3, #1
    10ea:	b2da      	uxtb	r2, r3
    10ec:	683b      	ldr	r3, [r7, #0]
    10ee:	b2db      	uxtb	r3, r3
    10f0:	7bf9      	ldrb	r1, [r7, #15]
    10f2:	4803      	ldr	r0, [pc, #12]	; (1100 <_gpio_set_pin_function+0x74>)
    10f4:	4c05      	ldr	r4, [pc, #20]	; (110c <_gpio_set_pin_function+0x80>)
    10f6:	47a0      	blx	r4
}
    10f8:	bf00      	nop
    10fa:	3714      	adds	r7, #20
    10fc:	46bd      	mov	sp, r7
    10fe:	bd90      	pop	{r4, r7, pc}
    1100:	41008000 	.word	0x41008000
    1104:	00000d95 	.word	0x00000d95
    1108:	00000d37 	.word	0x00000d37
    110c:	00000cd7 	.word	0x00000cd7

00001110 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1110:	b580      	push	{r7, lr}
    1112:	b082      	sub	sp, #8
    1114:	af00      	add	r7, sp, #0
    1116:	4603      	mov	r3, r0
    1118:	460a      	mov	r2, r1
    111a:	71fb      	strb	r3, [r7, #7]
    111c:	4613      	mov	r3, r2
    111e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1120:	79fb      	ldrb	r3, [r7, #7]
    1122:	095b      	lsrs	r3, r3, #5
    1124:	b2d8      	uxtb	r0, r3
    1126:	79fb      	ldrb	r3, [r7, #7]
    1128:	f003 031f 	and.w	r3, r3, #31
    112c:	b2db      	uxtb	r3, r3
    112e:	79ba      	ldrb	r2, [r7, #6]
    1130:	4619      	mov	r1, r3
    1132:	4b03      	ldr	r3, [pc, #12]	; (1140 <gpio_set_pin_pull_mode+0x30>)
    1134:	4798      	blx	r3
}
    1136:	bf00      	nop
    1138:	3708      	adds	r7, #8
    113a:	46bd      	mov	sp, r7
    113c:	bd80      	pop	{r7, pc}
    113e:	bf00      	nop
    1140:	00000fcd 	.word	0x00000fcd

00001144 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1144:	b580      	push	{r7, lr}
    1146:	b082      	sub	sp, #8
    1148:	af00      	add	r7, sp, #0
    114a:	6078      	str	r0, [r7, #4]
    114c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    114e:	6839      	ldr	r1, [r7, #0]
    1150:	6878      	ldr	r0, [r7, #4]
    1152:	4b03      	ldr	r3, [pc, #12]	; (1160 <gpio_set_pin_function+0x1c>)
    1154:	4798      	blx	r3
}
    1156:	bf00      	nop
    1158:	3708      	adds	r7, #8
    115a:	46bd      	mov	sp, r7
    115c:	bd80      	pop	{r7, pc}
    115e:	bf00      	nop
    1160:	0000108d 	.word	0x0000108d

00001164 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1164:	b580      	push	{r7, lr}
    1166:	b082      	sub	sp, #8
    1168:	af00      	add	r7, sp, #0
    116a:	4603      	mov	r3, r0
    116c:	460a      	mov	r2, r1
    116e:	71fb      	strb	r3, [r7, #7]
    1170:	4613      	mov	r3, r2
    1172:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1174:	79fb      	ldrb	r3, [r7, #7]
    1176:	095b      	lsrs	r3, r3, #5
    1178:	b2d8      	uxtb	r0, r3
    117a:	79fb      	ldrb	r3, [r7, #7]
    117c:	f003 031f 	and.w	r3, r3, #31
    1180:	2201      	movs	r2, #1
    1182:	fa02 f303 	lsl.w	r3, r2, r3
    1186:	79ba      	ldrb	r2, [r7, #6]
    1188:	4619      	mov	r1, r3
    118a:	4b03      	ldr	r3, [pc, #12]	; (1198 <gpio_set_pin_direction+0x34>)
    118c:	4798      	blx	r3
}
    118e:	bf00      	nop
    1190:	3708      	adds	r7, #8
    1192:	46bd      	mov	sp, r7
    1194:	bd80      	pop	{r7, pc}
    1196:	bf00      	nop
    1198:	00000ea1 	.word	0x00000ea1

0000119c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    119c:	b580      	push	{r7, lr}
    119e:	b082      	sub	sp, #8
    11a0:	af00      	add	r7, sp, #0
    11a2:	4603      	mov	r3, r0
    11a4:	460a      	mov	r2, r1
    11a6:	71fb      	strb	r3, [r7, #7]
    11a8:	4613      	mov	r3, r2
    11aa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    11ac:	79fb      	ldrb	r3, [r7, #7]
    11ae:	095b      	lsrs	r3, r3, #5
    11b0:	b2d8      	uxtb	r0, r3
    11b2:	79fb      	ldrb	r3, [r7, #7]
    11b4:	f003 031f 	and.w	r3, r3, #31
    11b8:	2201      	movs	r2, #1
    11ba:	fa02 f303 	lsl.w	r3, r2, r3
    11be:	79ba      	ldrb	r2, [r7, #6]
    11c0:	4619      	mov	r1, r3
    11c2:	4b03      	ldr	r3, [pc, #12]	; (11d0 <gpio_set_pin_level+0x34>)
    11c4:	4798      	blx	r3
}
    11c6:	bf00      	nop
    11c8:	3708      	adds	r7, #8
    11ca:	46bd      	mov	sp, r7
    11cc:	bd80      	pop	{r7, pc}
    11ce:	bf00      	nop
    11d0:	00000f89 	.word	0x00000f89

000011d4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    11d4:	b580      	push	{r7, lr}
    11d6:	af00      	add	r7, sp, #0
	_init_chip();
    11d8:	4b01      	ldr	r3, [pc, #4]	; (11e0 <init_mcu+0xc>)
    11da:	4798      	blx	r3
}
    11dc:	bf00      	nop
    11de:	bd80      	pop	{r7, pc}
    11e0:	0000470d 	.word	0x0000470d

000011e4 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    11e4:	b580      	push	{r7, lr}
    11e6:	b082      	sub	sp, #8
    11e8:	af00      	add	r7, sp, #0
    11ea:	6078      	str	r0, [r7, #4]
    11ec:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    11ee:	687b      	ldr	r3, [r7, #4]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d004      	beq.n	11fe <wdt_init+0x1a>
    11f4:	683b      	ldr	r3, [r7, #0]
    11f6:	2b00      	cmp	r3, #0
    11f8:	d001      	beq.n	11fe <wdt_init+0x1a>
    11fa:	2301      	movs	r3, #1
    11fc:	e000      	b.n	1200 <wdt_init+0x1c>
    11fe:	2300      	movs	r3, #0
    1200:	f003 0301 	and.w	r3, r3, #1
    1204:	b2db      	uxtb	r3, r3
    1206:	2248      	movs	r2, #72	; 0x48
    1208:	4907      	ldr	r1, [pc, #28]	; (1228 <wdt_init+0x44>)
    120a:	4618      	mov	r0, r3
    120c:	4b07      	ldr	r3, [pc, #28]	; (122c <wdt_init+0x48>)
    120e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1210:	687b      	ldr	r3, [r7, #4]
    1212:	683a      	ldr	r2, [r7, #0]
    1214:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	4618      	mov	r0, r3
    121a:	4b05      	ldr	r3, [pc, #20]	; (1230 <wdt_init+0x4c>)
    121c:	4798      	blx	r3
    121e:	4603      	mov	r3, r0
}
    1220:	4618      	mov	r0, r3
    1222:	3708      	adds	r7, #8
    1224:	46bd      	mov	sp, r7
    1226:	bd80      	pop	{r7, pc}
    1228:	00010758 	.word	0x00010758
    122c:	00003b01 	.word	0x00003b01
    1230:	0000b1d1 	.word	0x0000b1d1

00001234 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1234:	b580      	push	{r7, lr}
    1236:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1238:	4804      	ldr	r0, [pc, #16]	; (124c <CRC_CALC_init+0x18>)
    123a:	4b05      	ldr	r3, [pc, #20]	; (1250 <CRC_CALC_init+0x1c>)
    123c:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    123e:	4905      	ldr	r1, [pc, #20]	; (1254 <CRC_CALC_init+0x20>)
    1240:	4805      	ldr	r0, [pc, #20]	; (1258 <CRC_CALC_init+0x24>)
    1242:	4b06      	ldr	r3, [pc, #24]	; (125c <CRC_CALC_init+0x28>)
    1244:	4798      	blx	r3
}
    1246:	bf00      	nop
    1248:	bd80      	pop	{r7, pc}
    124a:	bf00      	nop
    124c:	40000800 	.word	0x40000800
    1250:	00000a57 	.word	0x00000a57
    1254:	41002000 	.word	0x41002000
    1258:	2000a7a4 	.word	0x2000a7a4
    125c:	000024e5 	.word	0x000024e5

00001260 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1260:	b580      	push	{r7, lr}
    1262:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1264:	2244      	movs	r2, #68	; 0x44
    1266:	2104      	movs	r1, #4
    1268:	483f      	ldr	r0, [pc, #252]	; (1368 <EXTERNAL_IRQ_0_init+0x108>)
    126a:	4b40      	ldr	r3, [pc, #256]	; (136c <EXTERNAL_IRQ_0_init+0x10c>)
    126c:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    126e:	4840      	ldr	r0, [pc, #256]	; (1370 <EXTERNAL_IRQ_0_init+0x110>)
    1270:	4b40      	ldr	r3, [pc, #256]	; (1374 <EXTERNAL_IRQ_0_init+0x114>)
    1272:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1274:	2101      	movs	r1, #1
    1276:	2040      	movs	r0, #64	; 0x40
    1278:	4b3f      	ldr	r3, [pc, #252]	; (1378 <EXTERNAL_IRQ_0_init+0x118>)
    127a:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    127c:	2100      	movs	r1, #0
    127e:	2040      	movs	r0, #64	; 0x40
    1280:	4b3e      	ldr	r3, [pc, #248]	; (137c <EXTERNAL_IRQ_0_init+0x11c>)
    1282:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1284:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1288:	2040      	movs	r0, #64	; 0x40
    128a:	4b3d      	ldr	r3, [pc, #244]	; (1380 <EXTERNAL_IRQ_0_init+0x120>)
    128c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    128e:	2101      	movs	r1, #1
    1290:	2021      	movs	r0, #33	; 0x21
    1292:	4b39      	ldr	r3, [pc, #228]	; (1378 <EXTERNAL_IRQ_0_init+0x118>)
    1294:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1296:	2100      	movs	r1, #0
    1298:	2021      	movs	r0, #33	; 0x21
    129a:	4b38      	ldr	r3, [pc, #224]	; (137c <EXTERNAL_IRQ_0_init+0x11c>)
    129c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    129e:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    12a2:	2021      	movs	r0, #33	; 0x21
    12a4:	4b36      	ldr	r3, [pc, #216]	; (1380 <EXTERNAL_IRQ_0_init+0x120>)
    12a6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    12a8:	2101      	movs	r1, #1
    12aa:	2003      	movs	r0, #3
    12ac:	4b32      	ldr	r3, [pc, #200]	; (1378 <EXTERNAL_IRQ_0_init+0x118>)
    12ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    12b0:	2102      	movs	r1, #2
    12b2:	2003      	movs	r0, #3
    12b4:	4b31      	ldr	r3, [pc, #196]	; (137c <EXTERNAL_IRQ_0_init+0x11c>)
    12b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    12b8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    12bc:	2003      	movs	r0, #3
    12be:	4b30      	ldr	r3, [pc, #192]	; (1380 <EXTERNAL_IRQ_0_init+0x120>)
    12c0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    12c2:	2101      	movs	r1, #1
    12c4:	2004      	movs	r0, #4
    12c6:	4b2c      	ldr	r3, [pc, #176]	; (1378 <EXTERNAL_IRQ_0_init+0x118>)
    12c8:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    12ca:	2102      	movs	r1, #2
    12cc:	2004      	movs	r0, #4
    12ce:	4b2b      	ldr	r3, [pc, #172]	; (137c <EXTERNAL_IRQ_0_init+0x11c>)
    12d0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    12d2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    12d6:	2004      	movs	r0, #4
    12d8:	4b29      	ldr	r3, [pc, #164]	; (1380 <EXTERNAL_IRQ_0_init+0x120>)
    12da:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    12dc:	2101      	movs	r1, #1
    12de:	2005      	movs	r0, #5
    12e0:	4b25      	ldr	r3, [pc, #148]	; (1378 <EXTERNAL_IRQ_0_init+0x118>)
    12e2:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    12e4:	2102      	movs	r1, #2
    12e6:	2005      	movs	r0, #5
    12e8:	4b24      	ldr	r3, [pc, #144]	; (137c <EXTERNAL_IRQ_0_init+0x11c>)
    12ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    12ec:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    12f0:	2005      	movs	r0, #5
    12f2:	4b23      	ldr	r3, [pc, #140]	; (1380 <EXTERNAL_IRQ_0_init+0x120>)
    12f4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    12f6:	2101      	movs	r1, #1
    12f8:	2056      	movs	r0, #86	; 0x56
    12fa:	4b1f      	ldr	r3, [pc, #124]	; (1378 <EXTERNAL_IRQ_0_init+0x118>)
    12fc:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    12fe:	2102      	movs	r1, #2
    1300:	2056      	movs	r0, #86	; 0x56
    1302:	4b1e      	ldr	r3, [pc, #120]	; (137c <EXTERNAL_IRQ_0_init+0x11c>)
    1304:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1306:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    130a:	2056      	movs	r0, #86	; 0x56
    130c:	4b1c      	ldr	r3, [pc, #112]	; (1380 <EXTERNAL_IRQ_0_init+0x120>)
    130e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1310:	2101      	movs	r1, #1
    1312:	2057      	movs	r0, #87	; 0x57
    1314:	4b18      	ldr	r3, [pc, #96]	; (1378 <EXTERNAL_IRQ_0_init+0x118>)
    1316:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1318:	2102      	movs	r1, #2
    131a:	2057      	movs	r0, #87	; 0x57
    131c:	4b17      	ldr	r3, [pc, #92]	; (137c <EXTERNAL_IRQ_0_init+0x11c>)
    131e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1320:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1324:	2057      	movs	r0, #87	; 0x57
    1326:	4b16      	ldr	r3, [pc, #88]	; (1380 <EXTERNAL_IRQ_0_init+0x120>)
    1328:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    132a:	2101      	movs	r1, #1
    132c:	2028      	movs	r0, #40	; 0x28
    132e:	4b12      	ldr	r3, [pc, #72]	; (1378 <EXTERNAL_IRQ_0_init+0x118>)
    1330:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1332:	2100      	movs	r1, #0
    1334:	2028      	movs	r0, #40	; 0x28
    1336:	4b11      	ldr	r3, [pc, #68]	; (137c <EXTERNAL_IRQ_0_init+0x11c>)
    1338:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    133a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    133e:	2028      	movs	r0, #40	; 0x28
    1340:	4b0f      	ldr	r3, [pc, #60]	; (1380 <EXTERNAL_IRQ_0_init+0x120>)
    1342:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1344:	2101      	movs	r1, #1
    1346:	2029      	movs	r0, #41	; 0x29
    1348:	4b0b      	ldr	r3, [pc, #44]	; (1378 <EXTERNAL_IRQ_0_init+0x118>)
    134a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    134c:	2100      	movs	r1, #0
    134e:	2029      	movs	r0, #41	; 0x29
    1350:	4b0a      	ldr	r3, [pc, #40]	; (137c <EXTERNAL_IRQ_0_init+0x11c>)
    1352:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1354:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1358:	2029      	movs	r0, #41	; 0x29
    135a:	4b09      	ldr	r3, [pc, #36]	; (1380 <EXTERNAL_IRQ_0_init+0x120>)
    135c:	4798      	blx	r3

	ext_irq_init();
    135e:	4b09      	ldr	r3, [pc, #36]	; (1384 <EXTERNAL_IRQ_0_init+0x124>)
    1360:	4798      	blx	r3
}
    1362:	bf00      	nop
    1364:	bd80      	pop	{r7, pc}
    1366:	bf00      	nop
    1368:	40001c00 	.word	0x40001c00
    136c:	000008f1 	.word	0x000008f1
    1370:	40000800 	.word	0x40000800
    1374:	000009d7 	.word	0x000009d7
    1378:	00001165 	.word	0x00001165
    137c:	00001111 	.word	0x00001111
    1380:	00001145 	.word	0x00001145
    1384:	000025ad 	.word	0x000025ad

00001388 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1388:	b580      	push	{r7, lr}
    138a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    138c:	2244      	movs	r2, #68	; 0x44
    138e:	210b      	movs	r1, #11
    1390:	4807      	ldr	r0, [pc, #28]	; (13b0 <EVENT_SYSTEM_0_init+0x28>)
    1392:	4b08      	ldr	r3, [pc, #32]	; (13b4 <EVENT_SYSTEM_0_init+0x2c>)
    1394:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1396:	2244      	movs	r2, #68	; 0x44
    1398:	210c      	movs	r1, #12
    139a:	4805      	ldr	r0, [pc, #20]	; (13b0 <EVENT_SYSTEM_0_init+0x28>)
    139c:	4b05      	ldr	r3, [pc, #20]	; (13b4 <EVENT_SYSTEM_0_init+0x2c>)
    139e:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    13a0:	4805      	ldr	r0, [pc, #20]	; (13b8 <EVENT_SYSTEM_0_init+0x30>)
    13a2:	4b06      	ldr	r3, [pc, #24]	; (13bc <EVENT_SYSTEM_0_init+0x34>)
    13a4:	4798      	blx	r3

	event_system_init();
    13a6:	4b06      	ldr	r3, [pc, #24]	; (13c0 <EVENT_SYSTEM_0_init+0x38>)
    13a8:	4798      	blx	r3
}
    13aa:	bf00      	nop
    13ac:	bd80      	pop	{r7, pc}
    13ae:	bf00      	nop
    13b0:	40001c00 	.word	0x40001c00
    13b4:	000008f1 	.word	0x000008f1
    13b8:	40000800 	.word	0x40000800
    13bc:	00000a77 	.word	0x00000a77
    13c0:	00002599 	.word	0x00002599

000013c4 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    13c4:	b580      	push	{r7, lr}
    13c6:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    13c8:	2101      	movs	r1, #1
    13ca:	202b      	movs	r0, #43	; 0x2b
    13cc:	4b2b      	ldr	r3, [pc, #172]	; (147c <QSPI_N25Q256_PORT_init+0xb8>)
    13ce:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    13d0:	2100      	movs	r1, #0
    13d2:	202b      	movs	r0, #43	; 0x2b
    13d4:	4b2a      	ldr	r3, [pc, #168]	; (1480 <QSPI_N25Q256_PORT_init+0xbc>)
    13d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    13d8:	492a      	ldr	r1, [pc, #168]	; (1484 <QSPI_N25Q256_PORT_init+0xc0>)
    13da:	202b      	movs	r0, #43	; 0x2b
    13dc:	4b2a      	ldr	r3, [pc, #168]	; (1488 <QSPI_N25Q256_PORT_init+0xc4>)
    13de:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    13e0:	2102      	movs	r1, #2
    13e2:	2008      	movs	r0, #8
    13e4:	4b25      	ldr	r3, [pc, #148]	; (147c <QSPI_N25Q256_PORT_init+0xb8>)
    13e6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    13e8:	2100      	movs	r1, #0
    13ea:	2008      	movs	r0, #8
    13ec:	4b27      	ldr	r3, [pc, #156]	; (148c <QSPI_N25Q256_PORT_init+0xc8>)
    13ee:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    13f0:	2100      	movs	r1, #0
    13f2:	2008      	movs	r0, #8
    13f4:	4b22      	ldr	r3, [pc, #136]	; (1480 <QSPI_N25Q256_PORT_init+0xbc>)
    13f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    13f8:	4925      	ldr	r1, [pc, #148]	; (1490 <QSPI_N25Q256_PORT_init+0xcc>)
    13fa:	2008      	movs	r0, #8
    13fc:	4b22      	ldr	r3, [pc, #136]	; (1488 <QSPI_N25Q256_PORT_init+0xc4>)
    13fe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1400:	2102      	movs	r1, #2
    1402:	2009      	movs	r0, #9
    1404:	4b1d      	ldr	r3, [pc, #116]	; (147c <QSPI_N25Q256_PORT_init+0xb8>)
    1406:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1408:	2100      	movs	r1, #0
    140a:	2009      	movs	r0, #9
    140c:	4b1f      	ldr	r3, [pc, #124]	; (148c <QSPI_N25Q256_PORT_init+0xc8>)
    140e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1410:	2100      	movs	r1, #0
    1412:	2009      	movs	r0, #9
    1414:	4b1a      	ldr	r3, [pc, #104]	; (1480 <QSPI_N25Q256_PORT_init+0xbc>)
    1416:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1418:	491e      	ldr	r1, [pc, #120]	; (1494 <QSPI_N25Q256_PORT_init+0xd0>)
    141a:	2009      	movs	r0, #9
    141c:	4b1a      	ldr	r3, [pc, #104]	; (1488 <QSPI_N25Q256_PORT_init+0xc4>)
    141e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1420:	2102      	movs	r1, #2
    1422:	200a      	movs	r0, #10
    1424:	4b15      	ldr	r3, [pc, #84]	; (147c <QSPI_N25Q256_PORT_init+0xb8>)
    1426:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1428:	2100      	movs	r1, #0
    142a:	200a      	movs	r0, #10
    142c:	4b17      	ldr	r3, [pc, #92]	; (148c <QSPI_N25Q256_PORT_init+0xc8>)
    142e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1430:	2100      	movs	r1, #0
    1432:	200a      	movs	r0, #10
    1434:	4b12      	ldr	r3, [pc, #72]	; (1480 <QSPI_N25Q256_PORT_init+0xbc>)
    1436:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1438:	4917      	ldr	r1, [pc, #92]	; (1498 <QSPI_N25Q256_PORT_init+0xd4>)
    143a:	200a      	movs	r0, #10
    143c:	4b12      	ldr	r3, [pc, #72]	; (1488 <QSPI_N25Q256_PORT_init+0xc4>)
    143e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1440:	2102      	movs	r1, #2
    1442:	200b      	movs	r0, #11
    1444:	4b0d      	ldr	r3, [pc, #52]	; (147c <QSPI_N25Q256_PORT_init+0xb8>)
    1446:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1448:	2100      	movs	r1, #0
    144a:	200b      	movs	r0, #11
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <QSPI_N25Q256_PORT_init+0xc8>)
    144e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1450:	2100      	movs	r1, #0
    1452:	200b      	movs	r0, #11
    1454:	4b0a      	ldr	r3, [pc, #40]	; (1480 <QSPI_N25Q256_PORT_init+0xbc>)
    1456:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1458:	4910      	ldr	r1, [pc, #64]	; (149c <QSPI_N25Q256_PORT_init+0xd8>)
    145a:	200b      	movs	r0, #11
    145c:	4b0a      	ldr	r3, [pc, #40]	; (1488 <QSPI_N25Q256_PORT_init+0xc4>)
    145e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1460:	2101      	movs	r1, #1
    1462:	202a      	movs	r0, #42	; 0x2a
    1464:	4b05      	ldr	r3, [pc, #20]	; (147c <QSPI_N25Q256_PORT_init+0xb8>)
    1466:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1468:	2100      	movs	r1, #0
    146a:	202a      	movs	r0, #42	; 0x2a
    146c:	4b04      	ldr	r3, [pc, #16]	; (1480 <QSPI_N25Q256_PORT_init+0xbc>)
    146e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1470:	490b      	ldr	r1, [pc, #44]	; (14a0 <QSPI_N25Q256_PORT_init+0xdc>)
    1472:	202a      	movs	r0, #42	; 0x2a
    1474:	4b04      	ldr	r3, [pc, #16]	; (1488 <QSPI_N25Q256_PORT_init+0xc4>)
    1476:	4798      	blx	r3
}
    1478:	bf00      	nop
    147a:	bd80      	pop	{r7, pc}
    147c:	00001165 	.word	0x00001165
    1480:	00001111 	.word	0x00001111
    1484:	002b0007 	.word	0x002b0007
    1488:	00001145 	.word	0x00001145
    148c:	0000119d 	.word	0x0000119d
    1490:	00080007 	.word	0x00080007
    1494:	00090007 	.word	0x00090007
    1498:	000a0007 	.word	0x000a0007
    149c:	000b0007 	.word	0x000b0007
    14a0:	002a0007 	.word	0x002a0007

000014a4 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    14a4:	b580      	push	{r7, lr}
    14a6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    14a8:	4805      	ldr	r0, [pc, #20]	; (14c0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    14aa:	4b06      	ldr	r3, [pc, #24]	; (14c4 <QSPI_N25Q256_CLOCK_init+0x20>)
    14ac:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    14ae:	4804      	ldr	r0, [pc, #16]	; (14c0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    14b0:	4b05      	ldr	r3, [pc, #20]	; (14c8 <QSPI_N25Q256_CLOCK_init+0x24>)
    14b2:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    14b4:	4802      	ldr	r0, [pc, #8]	; (14c0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    14b6:	4b05      	ldr	r3, [pc, #20]	; (14cc <QSPI_N25Q256_CLOCK_init+0x28>)
    14b8:	4798      	blx	r3
}
    14ba:	bf00      	nop
    14bc:	bd80      	pop	{r7, pc}
    14be:	bf00      	nop
    14c0:	40000800 	.word	0x40000800
    14c4:	00000937 	.word	0x00000937
    14c8:	00000977 	.word	0x00000977
    14cc:	00000b57 	.word	0x00000b57

000014d0 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    14d0:	b580      	push	{r7, lr}
    14d2:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    14d4:	4b04      	ldr	r3, [pc, #16]	; (14e8 <QSPI_N25Q256_init+0x18>)
    14d6:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    14d8:	4904      	ldr	r1, [pc, #16]	; (14ec <QSPI_N25Q256_init+0x1c>)
    14da:	4805      	ldr	r0, [pc, #20]	; (14f0 <QSPI_N25Q256_init+0x20>)
    14dc:	4b05      	ldr	r3, [pc, #20]	; (14f4 <QSPI_N25Q256_init+0x24>)
    14de:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    14e0:	4b05      	ldr	r3, [pc, #20]	; (14f8 <QSPI_N25Q256_init+0x28>)
    14e2:	4798      	blx	r3
}
    14e4:	bf00      	nop
    14e6:	bd80      	pop	{r7, pc}
    14e8:	000014a5 	.word	0x000014a5
    14ec:	42003400 	.word	0x42003400
    14f0:	2000a638 	.word	0x2000a638
    14f4:	00002a1d 	.word	0x00002a1d
    14f8:	000013c5 	.word	0x000013c5

000014fc <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    14fc:	b580      	push	{r7, lr}
    14fe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1500:	4802      	ldr	r0, [pc, #8]	; (150c <DATETIME_CLOCK_CLOCK_init+0x10>)
    1502:	4b03      	ldr	r3, [pc, #12]	; (1510 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1504:	4798      	blx	r3
}
    1506:	bf00      	nop
    1508:	bd80      	pop	{r7, pc}
    150a:	bf00      	nop
    150c:	40000800 	.word	0x40000800
    1510:	000009b7 	.word	0x000009b7

00001514 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1514:	b580      	push	{r7, lr}
    1516:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1518:	4b03      	ldr	r3, [pc, #12]	; (1528 <DATETIME_CLOCK_init+0x14>)
    151a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    151c:	4903      	ldr	r1, [pc, #12]	; (152c <DATETIME_CLOCK_init+0x18>)
    151e:	4804      	ldr	r0, [pc, #16]	; (1530 <DATETIME_CLOCK_init+0x1c>)
    1520:	4b04      	ldr	r3, [pc, #16]	; (1534 <DATETIME_CLOCK_init+0x20>)
    1522:	4798      	blx	r3
}
    1524:	bf00      	nop
    1526:	bd80      	pop	{r7, pc}
    1528:	000014fd 	.word	0x000014fd
    152c:	40002400 	.word	0x40002400
    1530:	2000a780 	.word	0x2000a780
    1534:	000021e9 	.word	0x000021e9

00001538 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1538:	b580      	push	{r7, lr}
    153a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    153c:	2101      	movs	r1, #1
    153e:	2010      	movs	r0, #16
    1540:	4b07      	ldr	r3, [pc, #28]	; (1560 <I2C_HEATERS_PORT_init+0x28>)
    1542:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1544:	4907      	ldr	r1, [pc, #28]	; (1564 <I2C_HEATERS_PORT_init+0x2c>)
    1546:	2010      	movs	r0, #16
    1548:	4b07      	ldr	r3, [pc, #28]	; (1568 <I2C_HEATERS_PORT_init+0x30>)
    154a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    154c:	2101      	movs	r1, #1
    154e:	2011      	movs	r0, #17
    1550:	4b03      	ldr	r3, [pc, #12]	; (1560 <I2C_HEATERS_PORT_init+0x28>)
    1552:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1554:	4905      	ldr	r1, [pc, #20]	; (156c <I2C_HEATERS_PORT_init+0x34>)
    1556:	2011      	movs	r0, #17
    1558:	4b03      	ldr	r3, [pc, #12]	; (1568 <I2C_HEATERS_PORT_init+0x30>)
    155a:	4798      	blx	r3
}
    155c:	bf00      	nop
    155e:	bd80      	pop	{r7, pc}
    1560:	00001111 	.word	0x00001111
    1564:	00100002 	.word	0x00100002
    1568:	00001145 	.word	0x00001145
    156c:	00110002 	.word	0x00110002

00001570 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1570:	b580      	push	{r7, lr}
    1572:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1574:	2242      	movs	r2, #66	; 0x42
    1576:	2108      	movs	r1, #8
    1578:	4806      	ldr	r0, [pc, #24]	; (1594 <I2C_HEATERS_CLOCK_init+0x24>)
    157a:	4b07      	ldr	r3, [pc, #28]	; (1598 <I2C_HEATERS_CLOCK_init+0x28>)
    157c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    157e:	224a      	movs	r2, #74	; 0x4a
    1580:	2103      	movs	r1, #3
    1582:	4804      	ldr	r0, [pc, #16]	; (1594 <I2C_HEATERS_CLOCK_init+0x24>)
    1584:	4b04      	ldr	r3, [pc, #16]	; (1598 <I2C_HEATERS_CLOCK_init+0x28>)
    1586:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1588:	4804      	ldr	r0, [pc, #16]	; (159c <I2C_HEATERS_CLOCK_init+0x2c>)
    158a:	4b05      	ldr	r3, [pc, #20]	; (15a0 <I2C_HEATERS_CLOCK_init+0x30>)
    158c:	4798      	blx	r3
}
    158e:	bf00      	nop
    1590:	bd80      	pop	{r7, pc}
    1592:	bf00      	nop
    1594:	40001c00 	.word	0x40001c00
    1598:	000008f1 	.word	0x000008f1
    159c:	40000800 	.word	0x40000800
    15a0:	000009f7 	.word	0x000009f7

000015a4 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    15a4:	b580      	push	{r7, lr}
    15a6:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    15a8:	4b04      	ldr	r3, [pc, #16]	; (15bc <I2C_HEATERS_init+0x18>)
    15aa:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    15ac:	4904      	ldr	r1, [pc, #16]	; (15c0 <I2C_HEATERS_init+0x1c>)
    15ae:	4805      	ldr	r0, [pc, #20]	; (15c4 <I2C_HEATERS_init+0x20>)
    15b0:	4b05      	ldr	r3, [pc, #20]	; (15c8 <I2C_HEATERS_init+0x24>)
    15b2:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    15b4:	4b05      	ldr	r3, [pc, #20]	; (15cc <I2C_HEATERS_init+0x28>)
    15b6:	4798      	blx	r3
}
    15b8:	bf00      	nop
    15ba:	bd80      	pop	{r7, pc}
    15bc:	00001571 	.word	0x00001571
    15c0:	40003400 	.word	0x40003400
    15c4:	2000a6d8 	.word	0x2000a6d8
    15c8:	00002875 	.word	0x00002875
    15cc:	00001539 	.word	0x00001539

000015d0 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    15d4:	2100      	movs	r1, #0
    15d6:	203b      	movs	r0, #59	; 0x3b
    15d8:	4b11      	ldr	r3, [pc, #68]	; (1620 <SPI_TEMP_PORT_init+0x50>)
    15da:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    15dc:	2102      	movs	r1, #2
    15de:	203b      	movs	r0, #59	; 0x3b
    15e0:	4b10      	ldr	r3, [pc, #64]	; (1624 <SPI_TEMP_PORT_init+0x54>)
    15e2:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    15e4:	4910      	ldr	r1, [pc, #64]	; (1628 <SPI_TEMP_PORT_init+0x58>)
    15e6:	203b      	movs	r0, #59	; 0x3b
    15e8:	4b10      	ldr	r3, [pc, #64]	; (162c <SPI_TEMP_PORT_init+0x5c>)
    15ea:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    15ec:	2100      	movs	r1, #0
    15ee:	203a      	movs	r0, #58	; 0x3a
    15f0:	4b0b      	ldr	r3, [pc, #44]	; (1620 <SPI_TEMP_PORT_init+0x50>)
    15f2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    15f4:	2102      	movs	r1, #2
    15f6:	203a      	movs	r0, #58	; 0x3a
    15f8:	4b0a      	ldr	r3, [pc, #40]	; (1624 <SPI_TEMP_PORT_init+0x54>)
    15fa:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    15fc:	490c      	ldr	r1, [pc, #48]	; (1630 <SPI_TEMP_PORT_init+0x60>)
    15fe:	203a      	movs	r0, #58	; 0x3a
    1600:	4b0a      	ldr	r3, [pc, #40]	; (162c <SPI_TEMP_PORT_init+0x5c>)
    1602:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1604:	2101      	movs	r1, #1
    1606:	203c      	movs	r0, #60	; 0x3c
    1608:	4b06      	ldr	r3, [pc, #24]	; (1624 <SPI_TEMP_PORT_init+0x54>)
    160a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    160c:	2100      	movs	r1, #0
    160e:	203c      	movs	r0, #60	; 0x3c
    1610:	4b08      	ldr	r3, [pc, #32]	; (1634 <SPI_TEMP_PORT_init+0x64>)
    1612:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1614:	4908      	ldr	r1, [pc, #32]	; (1638 <SPI_TEMP_PORT_init+0x68>)
    1616:	203c      	movs	r0, #60	; 0x3c
    1618:	4b04      	ldr	r3, [pc, #16]	; (162c <SPI_TEMP_PORT_init+0x5c>)
    161a:	4798      	blx	r3
}
    161c:	bf00      	nop
    161e:	bd80      	pop	{r7, pc}
    1620:	0000119d 	.word	0x0000119d
    1624:	00001165 	.word	0x00001165
    1628:	003b0003 	.word	0x003b0003
    162c:	00001145 	.word	0x00001145
    1630:	003a0003 	.word	0x003a0003
    1634:	00001111 	.word	0x00001111
    1638:	003c0003 	.word	0x003c0003

0000163c <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    163c:	b580      	push	{r7, lr}
    163e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1640:	2245      	movs	r2, #69	; 0x45
    1642:	2122      	movs	r1, #34	; 0x22
    1644:	4806      	ldr	r0, [pc, #24]	; (1660 <SPI_TEMP_CLOCK_init+0x24>)
    1646:	4b07      	ldr	r3, [pc, #28]	; (1664 <SPI_TEMP_CLOCK_init+0x28>)
    1648:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    164a:	224a      	movs	r2, #74	; 0x4a
    164c:	2103      	movs	r1, #3
    164e:	4804      	ldr	r0, [pc, #16]	; (1660 <SPI_TEMP_CLOCK_init+0x24>)
    1650:	4b04      	ldr	r3, [pc, #16]	; (1664 <SPI_TEMP_CLOCK_init+0x28>)
    1652:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1654:	4804      	ldr	r0, [pc, #16]	; (1668 <SPI_TEMP_CLOCK_init+0x2c>)
    1656:	4b05      	ldr	r3, [pc, #20]	; (166c <SPI_TEMP_CLOCK_init+0x30>)
    1658:	4798      	blx	r3
}
    165a:	bf00      	nop
    165c:	bd80      	pop	{r7, pc}
    165e:	bf00      	nop
    1660:	40001c00 	.word	0x40001c00
    1664:	000008f1 	.word	0x000008f1
    1668:	40000800 	.word	0x40000800
    166c:	00000b77 	.word	0x00000b77

00001670 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1670:	b580      	push	{r7, lr}
    1672:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1674:	4b05      	ldr	r3, [pc, #20]	; (168c <SPI_TEMP_init+0x1c>)
    1676:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1678:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    167c:	4804      	ldr	r0, [pc, #16]	; (1690 <SPI_TEMP_init+0x20>)
    167e:	4b05      	ldr	r3, [pc, #20]	; (1694 <SPI_TEMP_init+0x24>)
    1680:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1682:	4b05      	ldr	r3, [pc, #20]	; (1698 <SPI_TEMP_init+0x28>)
    1684:	4798      	blx	r3
}
    1686:	bf00      	nop
    1688:	bd80      	pop	{r7, pc}
    168a:	bf00      	nop
    168c:	0000163d 	.word	0x0000163d
    1690:	2000a5e0 	.word	0x2000a5e0
    1694:	00002b2d 	.word	0x00002b2d
    1698:	000015d1 	.word	0x000015d1

0000169c <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    169c:	b580      	push	{r7, lr}
    169e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    16a0:	2100      	movs	r1, #0
    16a2:	2017      	movs	r0, #23
    16a4:	4b07      	ldr	r3, [pc, #28]	; (16c4 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    16a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    16a8:	4907      	ldr	r1, [pc, #28]	; (16c8 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    16aa:	2017      	movs	r0, #23
    16ac:	4b07      	ldr	r3, [pc, #28]	; (16cc <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    16ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    16b0:	2100      	movs	r1, #0
    16b2:	2016      	movs	r0, #22
    16b4:	4b03      	ldr	r3, [pc, #12]	; (16c4 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    16b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    16b8:	4905      	ldr	r1, [pc, #20]	; (16d0 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    16ba:	2016      	movs	r0, #22
    16bc:	4b03      	ldr	r3, [pc, #12]	; (16cc <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    16be:	4798      	blx	r3
}
    16c0:	bf00      	nop
    16c2:	bd80      	pop	{r7, pc}
    16c4:	00001111 	.word	0x00001111
    16c8:	00170003 	.word	0x00170003
    16cc:	00001145 	.word	0x00001145
    16d0:	00160003 	.word	0x00160003

000016d4 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    16d4:	b580      	push	{r7, lr}
    16d6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16d8:	2244      	movs	r2, #68	; 0x44
    16da:	2123      	movs	r1, #35	; 0x23
    16dc:	4806      	ldr	r0, [pc, #24]	; (16f8 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    16de:	4b07      	ldr	r3, [pc, #28]	; (16fc <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    16e0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16e2:	224a      	movs	r2, #74	; 0x4a
    16e4:	2103      	movs	r1, #3
    16e6:	4804      	ldr	r0, [pc, #16]	; (16f8 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    16e8:	4b04      	ldr	r3, [pc, #16]	; (16fc <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    16ea:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    16ec:	4804      	ldr	r0, [pc, #16]	; (1700 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    16ee:	4b05      	ldr	r3, [pc, #20]	; (1704 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    16f0:	4798      	blx	r3
}
    16f2:	bf00      	nop
    16f4:	bd80      	pop	{r7, pc}
    16f6:	bf00      	nop
    16f8:	40001c00 	.word	0x40001c00
    16fc:	000008f1 	.word	0x000008f1
    1700:	40000800 	.word	0x40000800
    1704:	00000b97 	.word	0x00000b97

00001708 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1708:	b580      	push	{r7, lr}
    170a:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    170c:	4b04      	ldr	r3, [pc, #16]	; (1720 <I2C_FLAPPER_VALVE_init+0x18>)
    170e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1710:	4904      	ldr	r1, [pc, #16]	; (1724 <I2C_FLAPPER_VALVE_init+0x1c>)
    1712:	4805      	ldr	r0, [pc, #20]	; (1728 <I2C_FLAPPER_VALVE_init+0x20>)
    1714:	4b05      	ldr	r3, [pc, #20]	; (172c <I2C_FLAPPER_VALVE_init+0x24>)
    1716:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1718:	4b05      	ldr	r3, [pc, #20]	; (1730 <I2C_FLAPPER_VALVE_init+0x28>)
    171a:	4798      	blx	r3
}
    171c:	bf00      	nop
    171e:	bd80      	pop	{r7, pc}
    1720:	000016d5 	.word	0x000016d5
    1724:	43000400 	.word	0x43000400
    1728:	2000a67c 	.word	0x2000a67c
    172c:	00002875 	.word	0x00002875
    1730:	0000169d 	.word	0x0000169d

00001734 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1734:	b580      	push	{r7, lr}
    1736:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1738:	2100      	movs	r1, #0
    173a:	2044      	movs	r0, #68	; 0x44
    173c:	4b11      	ldr	r3, [pc, #68]	; (1784 <SPI_HI3593_PORT_init+0x50>)
    173e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1740:	2102      	movs	r1, #2
    1742:	2044      	movs	r0, #68	; 0x44
    1744:	4b10      	ldr	r3, [pc, #64]	; (1788 <SPI_HI3593_PORT_init+0x54>)
    1746:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1748:	4910      	ldr	r1, [pc, #64]	; (178c <SPI_HI3593_PORT_init+0x58>)
    174a:	2044      	movs	r0, #68	; 0x44
    174c:	4b10      	ldr	r3, [pc, #64]	; (1790 <SPI_HI3593_PORT_init+0x5c>)
    174e:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1750:	2100      	movs	r1, #0
    1752:	2045      	movs	r0, #69	; 0x45
    1754:	4b0b      	ldr	r3, [pc, #44]	; (1784 <SPI_HI3593_PORT_init+0x50>)
    1756:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1758:	2102      	movs	r1, #2
    175a:	2045      	movs	r0, #69	; 0x45
    175c:	4b0a      	ldr	r3, [pc, #40]	; (1788 <SPI_HI3593_PORT_init+0x54>)
    175e:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1760:	490c      	ldr	r1, [pc, #48]	; (1794 <SPI_HI3593_PORT_init+0x60>)
    1762:	2045      	movs	r0, #69	; 0x45
    1764:	4b0a      	ldr	r3, [pc, #40]	; (1790 <SPI_HI3593_PORT_init+0x5c>)
    1766:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1768:	2101      	movs	r1, #1
    176a:	2047      	movs	r0, #71	; 0x47
    176c:	4b06      	ldr	r3, [pc, #24]	; (1788 <SPI_HI3593_PORT_init+0x54>)
    176e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1770:	2100      	movs	r1, #0
    1772:	2047      	movs	r0, #71	; 0x47
    1774:	4b08      	ldr	r3, [pc, #32]	; (1798 <SPI_HI3593_PORT_init+0x64>)
    1776:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1778:	4908      	ldr	r1, [pc, #32]	; (179c <SPI_HI3593_PORT_init+0x68>)
    177a:	2047      	movs	r0, #71	; 0x47
    177c:	4b04      	ldr	r3, [pc, #16]	; (1790 <SPI_HI3593_PORT_init+0x5c>)
    177e:	4798      	blx	r3
}
    1780:	bf00      	nop
    1782:	bd80      	pop	{r7, pc}
    1784:	0000119d 	.word	0x0000119d
    1788:	00001165 	.word	0x00001165
    178c:	00440002 	.word	0x00440002
    1790:	00001145 	.word	0x00001145
    1794:	00450002 	.word	0x00450002
    1798:	00001111 	.word	0x00001111
    179c:	00470002 	.word	0x00470002

000017a0 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    17a0:	b580      	push	{r7, lr}
    17a2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17a4:	2242      	movs	r2, #66	; 0x42
    17a6:	2124      	movs	r1, #36	; 0x24
    17a8:	4806      	ldr	r0, [pc, #24]	; (17c4 <SPI_HI3593_CLOCK_init+0x24>)
    17aa:	4b07      	ldr	r3, [pc, #28]	; (17c8 <SPI_HI3593_CLOCK_init+0x28>)
    17ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17ae:	224a      	movs	r2, #74	; 0x4a
    17b0:	2103      	movs	r1, #3
    17b2:	4804      	ldr	r0, [pc, #16]	; (17c4 <SPI_HI3593_CLOCK_init+0x24>)
    17b4:	4b04      	ldr	r3, [pc, #16]	; (17c8 <SPI_HI3593_CLOCK_init+0x28>)
    17b6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    17b8:	4804      	ldr	r0, [pc, #16]	; (17cc <SPI_HI3593_CLOCK_init+0x2c>)
    17ba:	4b05      	ldr	r3, [pc, #20]	; (17d0 <SPI_HI3593_CLOCK_init+0x30>)
    17bc:	4798      	blx	r3
}
    17be:	bf00      	nop
    17c0:	bd80      	pop	{r7, pc}
    17c2:	bf00      	nop
    17c4:	40001c00 	.word	0x40001c00
    17c8:	000008f1 	.word	0x000008f1
    17cc:	40000800 	.word	0x40000800
    17d0:	00000bb7 	.word	0x00000bb7

000017d4 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    17d4:	b580      	push	{r7, lr}
    17d6:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    17d8:	4b04      	ldr	r3, [pc, #16]	; (17ec <SPI_HI3593_init+0x18>)
    17da:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    17dc:	4904      	ldr	r1, [pc, #16]	; (17f0 <SPI_HI3593_init+0x1c>)
    17de:	4805      	ldr	r0, [pc, #20]	; (17f4 <SPI_HI3593_init+0x20>)
    17e0:	4b05      	ldr	r3, [pc, #20]	; (17f8 <SPI_HI3593_init+0x24>)
    17e2:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    17e4:	4b05      	ldr	r3, [pc, #20]	; (17fc <SPI_HI3593_init+0x28>)
    17e6:	4798      	blx	r3
}
    17e8:	bf00      	nop
    17ea:	bd80      	pop	{r7, pc}
    17ec:	000017a1 	.word	0x000017a1
    17f0:	43000800 	.word	0x43000800
    17f4:	2000a5c8 	.word	0x2000a5c8
    17f8:	00002b2d 	.word	0x00002b2d
    17fc:	00001735 	.word	0x00001735

00001800 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1800:	b580      	push	{r7, lr}
    1802:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1804:	2100      	movs	r1, #0
    1806:	2068      	movs	r0, #104	; 0x68
    1808:	4b07      	ldr	r3, [pc, #28]	; (1828 <I2C_FANS_PORT_init+0x28>)
    180a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    180c:	4907      	ldr	r1, [pc, #28]	; (182c <I2C_FANS_PORT_init+0x2c>)
    180e:	2068      	movs	r0, #104	; 0x68
    1810:	4b07      	ldr	r3, [pc, #28]	; (1830 <I2C_FANS_PORT_init+0x30>)
    1812:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1814:	2100      	movs	r1, #0
    1816:	2069      	movs	r0, #105	; 0x69
    1818:	4b03      	ldr	r3, [pc, #12]	; (1828 <I2C_FANS_PORT_init+0x28>)
    181a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    181c:	4905      	ldr	r1, [pc, #20]	; (1834 <I2C_FANS_PORT_init+0x34>)
    181e:	2069      	movs	r0, #105	; 0x69
    1820:	4b03      	ldr	r3, [pc, #12]	; (1830 <I2C_FANS_PORT_init+0x30>)
    1822:	4798      	blx	r3
}
    1824:	bf00      	nop
    1826:	bd80      	pop	{r7, pc}
    1828:	00001111 	.word	0x00001111
    182c:	00680002 	.word	0x00680002
    1830:	00001145 	.word	0x00001145
    1834:	00690002 	.word	0x00690002

00001838 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1838:	b580      	push	{r7, lr}
    183a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    183c:	2244      	movs	r2, #68	; 0x44
    183e:	2125      	movs	r1, #37	; 0x25
    1840:	4806      	ldr	r0, [pc, #24]	; (185c <I2C_FANS_CLOCK_init+0x24>)
    1842:	4b07      	ldr	r3, [pc, #28]	; (1860 <I2C_FANS_CLOCK_init+0x28>)
    1844:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1846:	224a      	movs	r2, #74	; 0x4a
    1848:	2103      	movs	r1, #3
    184a:	4804      	ldr	r0, [pc, #16]	; (185c <I2C_FANS_CLOCK_init+0x24>)
    184c:	4b04      	ldr	r3, [pc, #16]	; (1860 <I2C_FANS_CLOCK_init+0x28>)
    184e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1850:	4804      	ldr	r0, [pc, #16]	; (1864 <I2C_FANS_CLOCK_init+0x2c>)
    1852:	4b05      	ldr	r3, [pc, #20]	; (1868 <I2C_FANS_CLOCK_init+0x30>)
    1854:	4798      	blx	r3
}
    1856:	bf00      	nop
    1858:	bd80      	pop	{r7, pc}
    185a:	bf00      	nop
    185c:	40001c00 	.word	0x40001c00
    1860:	000008f1 	.word	0x000008f1
    1864:	40000800 	.word	0x40000800
    1868:	00000bd7 	.word	0x00000bd7

0000186c <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    186c:	b580      	push	{r7, lr}
    186e:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1870:	4b04      	ldr	r3, [pc, #16]	; (1884 <I2C_FANS_init+0x18>)
    1872:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1874:	4904      	ldr	r1, [pc, #16]	; (1888 <I2C_FANS_init+0x1c>)
    1876:	4805      	ldr	r0, [pc, #20]	; (188c <I2C_FANS_init+0x20>)
    1878:	4b05      	ldr	r3, [pc, #20]	; (1890 <I2C_FANS_init+0x24>)
    187a:	4798      	blx	r3
	I2C_FANS_PORT_init();
    187c:	4b05      	ldr	r3, [pc, #20]	; (1894 <I2C_FANS_init+0x28>)
    187e:	4798      	blx	r3
}
    1880:	bf00      	nop
    1882:	bd80      	pop	{r7, pc}
    1884:	00001839 	.word	0x00001839
    1888:	43000c00 	.word	0x43000c00
    188c:	2000a5f8 	.word	0x2000a5f8
    1890:	00002875 	.word	0x00002875
    1894:	00001801 	.word	0x00001801

00001898 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1898:	b580      	push	{r7, lr}
    189a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    189c:	4808      	ldr	r0, [pc, #32]	; (18c0 <TIMER_USB_init+0x28>)
    189e:	4b09      	ldr	r3, [pc, #36]	; (18c4 <TIMER_USB_init+0x2c>)
    18a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18a2:	2243      	movs	r2, #67	; 0x43
    18a4:	2109      	movs	r1, #9
    18a6:	4808      	ldr	r0, [pc, #32]	; (18c8 <TIMER_USB_init+0x30>)
    18a8:	4b08      	ldr	r3, [pc, #32]	; (18cc <TIMER_USB_init+0x34>)
    18aa:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    18ac:	4b08      	ldr	r3, [pc, #32]	; (18d0 <TIMER_USB_init+0x38>)
    18ae:	4798      	blx	r3
    18b0:	4603      	mov	r3, r0
    18b2:	461a      	mov	r2, r3
    18b4:	4907      	ldr	r1, [pc, #28]	; (18d4 <TIMER_USB_init+0x3c>)
    18b6:	4808      	ldr	r0, [pc, #32]	; (18d8 <TIMER_USB_init+0x40>)
    18b8:	4b08      	ldr	r3, [pc, #32]	; (18dc <TIMER_USB_init+0x44>)
    18ba:	4798      	blx	r3
}
    18bc:	bf00      	nop
    18be:	bd80      	pop	{r7, pc}
    18c0:	40000800 	.word	0x40000800
    18c4:	00000a17 	.word	0x00000a17
    18c8:	40001c00 	.word	0x40001c00
    18cc:	000008f1 	.word	0x000008f1
    18d0:	00008669 	.word	0x00008669
    18d4:	40003800 	.word	0x40003800
    18d8:	2000a740 	.word	0x2000a740
    18dc:	00002cfd 	.word	0x00002cfd

000018e0 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    18e0:	b580      	push	{r7, lr}
    18e2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    18e4:	4808      	ldr	r0, [pc, #32]	; (1908 <TIMER_ARINC_init+0x28>)
    18e6:	4b09      	ldr	r3, [pc, #36]	; (190c <TIMER_ARINC_init+0x2c>)
    18e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18ea:	2244      	movs	r2, #68	; 0x44
    18ec:	211a      	movs	r1, #26
    18ee:	4808      	ldr	r0, [pc, #32]	; (1910 <TIMER_ARINC_init+0x30>)
    18f0:	4b08      	ldr	r3, [pc, #32]	; (1914 <TIMER_ARINC_init+0x34>)
    18f2:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    18f4:	4b08      	ldr	r3, [pc, #32]	; (1918 <TIMER_ARINC_init+0x38>)
    18f6:	4798      	blx	r3
    18f8:	4603      	mov	r3, r0
    18fa:	461a      	mov	r2, r3
    18fc:	4907      	ldr	r1, [pc, #28]	; (191c <TIMER_ARINC_init+0x3c>)
    18fe:	4808      	ldr	r0, [pc, #32]	; (1920 <TIMER_ARINC_init+0x40>)
    1900:	4b08      	ldr	r3, [pc, #32]	; (1924 <TIMER_ARINC_init+0x44>)
    1902:	4798      	blx	r3
}
    1904:	bf00      	nop
    1906:	bd80      	pop	{r7, pc}
    1908:	40000800 	.word	0x40000800
    190c:	00000ad7 	.word	0x00000ad7
    1910:	40001c00 	.word	0x40001c00
    1914:	000008f1 	.word	0x000008f1
    1918:	00008669 	.word	0x00008669
    191c:	4101a000 	.word	0x4101a000
    1920:	2000a720 	.word	0x2000a720
    1924:	00002cfd 	.word	0x00002cfd

00001928 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1928:	b580      	push	{r7, lr}
    192a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    192c:	4808      	ldr	r0, [pc, #32]	; (1950 <TIMER_MAINTENANCE_init+0x28>)
    192e:	4b09      	ldr	r3, [pc, #36]	; (1954 <TIMER_MAINTENANCE_init+0x2c>)
    1930:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1932:	2246      	movs	r2, #70	; 0x46
    1934:	211e      	movs	r1, #30
    1936:	4808      	ldr	r0, [pc, #32]	; (1958 <TIMER_MAINTENANCE_init+0x30>)
    1938:	4b08      	ldr	r3, [pc, #32]	; (195c <TIMER_MAINTENANCE_init+0x34>)
    193a:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    193c:	4b08      	ldr	r3, [pc, #32]	; (1960 <TIMER_MAINTENANCE_init+0x38>)
    193e:	4798      	blx	r3
    1940:	4603      	mov	r3, r0
    1942:	461a      	mov	r2, r3
    1944:	4907      	ldr	r1, [pc, #28]	; (1964 <TIMER_MAINTENANCE_init+0x3c>)
    1946:	4808      	ldr	r0, [pc, #32]	; (1968 <TIMER_MAINTENANCE_init+0x40>)
    1948:	4b08      	ldr	r3, [pc, #32]	; (196c <TIMER_MAINTENANCE_init+0x44>)
    194a:	4798      	blx	r3
}
    194c:	bf00      	nop
    194e:	bd80      	pop	{r7, pc}
    1950:	40000800 	.word	0x40000800
    1954:	00000b17 	.word	0x00000b17
    1958:	40001c00 	.word	0x40001c00
    195c:	000008f1 	.word	0x000008f1
    1960:	00008669 	.word	0x00008669
    1964:	42001400 	.word	0x42001400
    1968:	2000a618 	.word	0x2000a618
    196c:	00002cfd 	.word	0x00002cfd

00001970 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1970:	b580      	push	{r7, lr}
    1972:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1974:	4808      	ldr	r0, [pc, #32]	; (1998 <TIMER_INTERFACE_init+0x28>)
    1976:	4b09      	ldr	r3, [pc, #36]	; (199c <TIMER_INTERFACE_init+0x2c>)
    1978:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    197a:	2246      	movs	r2, #70	; 0x46
    197c:	211e      	movs	r1, #30
    197e:	4808      	ldr	r0, [pc, #32]	; (19a0 <TIMER_INTERFACE_init+0x30>)
    1980:	4b08      	ldr	r3, [pc, #32]	; (19a4 <TIMER_INTERFACE_init+0x34>)
    1982:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1984:	4b08      	ldr	r3, [pc, #32]	; (19a8 <TIMER_INTERFACE_init+0x38>)
    1986:	4798      	blx	r3
    1988:	4603      	mov	r3, r0
    198a:	461a      	mov	r2, r3
    198c:	4907      	ldr	r1, [pc, #28]	; (19ac <TIMER_INTERFACE_init+0x3c>)
    198e:	4808      	ldr	r0, [pc, #32]	; (19b0 <TIMER_INTERFACE_init+0x40>)
    1990:	4b08      	ldr	r3, [pc, #32]	; (19b4 <TIMER_INTERFACE_init+0x44>)
    1992:	4798      	blx	r3
}
    1994:	bf00      	nop
    1996:	bd80      	pop	{r7, pc}
    1998:	40000800 	.word	0x40000800
    199c:	00000b37 	.word	0x00000b37
    19a0:	40001c00 	.word	0x40001c00
    19a4:	000008f1 	.word	0x000008f1
    19a8:	00008669 	.word	0x00008669
    19ac:	42001800 	.word	0x42001800
    19b0:	2000a65c 	.word	0x2000a65c
    19b4:	00002cfd 	.word	0x00002cfd

000019b8 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    19b8:	b580      	push	{r7, lr}
    19ba:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    19bc:	4808      	ldr	r0, [pc, #32]	; (19e0 <TIMER_EVENT_init+0x28>)
    19be:	4b09      	ldr	r3, [pc, #36]	; (19e4 <TIMER_EVENT_init+0x2c>)
    19c0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19c2:	2246      	movs	r2, #70	; 0x46
    19c4:	2127      	movs	r1, #39	; 0x27
    19c6:	4808      	ldr	r0, [pc, #32]	; (19e8 <TIMER_EVENT_init+0x30>)
    19c8:	4b08      	ldr	r3, [pc, #32]	; (19ec <TIMER_EVENT_init+0x34>)
    19ca:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    19cc:	4b08      	ldr	r3, [pc, #32]	; (19f0 <TIMER_EVENT_init+0x38>)
    19ce:	4798      	blx	r3
    19d0:	4603      	mov	r3, r0
    19d2:	461a      	mov	r2, r3
    19d4:	4907      	ldr	r1, [pc, #28]	; (19f4 <TIMER_EVENT_init+0x3c>)
    19d6:	4808      	ldr	r0, [pc, #32]	; (19f8 <TIMER_EVENT_init+0x40>)
    19d8:	4b08      	ldr	r3, [pc, #32]	; (19fc <TIMER_EVENT_init+0x44>)
    19da:	4798      	blx	r3
}
    19dc:	bf00      	nop
    19de:	bd80      	pop	{r7, pc}
    19e0:	40000800 	.word	0x40000800
    19e4:	00000bf7 	.word	0x00000bf7
    19e8:	40001c00 	.word	0x40001c00
    19ec:	000008f1 	.word	0x000008f1
    19f0:	00008669 	.word	0x00008669
    19f4:	43001400 	.word	0x43001400
    19f8:	2000a63c 	.word	0x2000a63c
    19fc:	00002cfd 	.word	0x00002cfd

00001a00 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1a00:	b480      	push	{r7}
    1a02:	af00      	add	r7, sp, #0
}
    1a04:	bf00      	nop
    1a06:	46bd      	mov	sp, r7
    1a08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a0c:	4770      	bx	lr
	...

00001a10 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1a10:	b580      	push	{r7, lr}
    1a12:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1a14:	4804      	ldr	r0, [pc, #16]	; (1a28 <LIVE_PULSE_CLOCK_init+0x18>)
    1a16:	4b05      	ldr	r3, [pc, #20]	; (1a2c <LIVE_PULSE_CLOCK_init+0x1c>)
    1a18:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a1a:	2240      	movs	r2, #64	; 0x40
    1a1c:	2127      	movs	r1, #39	; 0x27
    1a1e:	4804      	ldr	r0, [pc, #16]	; (1a30 <LIVE_PULSE_CLOCK_init+0x20>)
    1a20:	4b04      	ldr	r3, [pc, #16]	; (1a34 <LIVE_PULSE_CLOCK_init+0x24>)
    1a22:	4798      	blx	r3
}
    1a24:	bf00      	nop
    1a26:	bd80      	pop	{r7, pc}
    1a28:	40000800 	.word	0x40000800
    1a2c:	00000c17 	.word	0x00000c17
    1a30:	40001c00 	.word	0x40001c00
    1a34:	000008f1 	.word	0x000008f1

00001a38 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1a38:	b580      	push	{r7, lr}
    1a3a:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1a3c:	4b06      	ldr	r3, [pc, #24]	; (1a58 <LIVE_PULSE_init+0x20>)
    1a3e:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1a40:	4b06      	ldr	r3, [pc, #24]	; (1a5c <LIVE_PULSE_init+0x24>)
    1a42:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1a44:	4b06      	ldr	r3, [pc, #24]	; (1a60 <LIVE_PULSE_init+0x28>)
    1a46:	4798      	blx	r3
    1a48:	4603      	mov	r3, r0
    1a4a:	461a      	mov	r2, r3
    1a4c:	4905      	ldr	r1, [pc, #20]	; (1a64 <LIVE_PULSE_init+0x2c>)
    1a4e:	4806      	ldr	r0, [pc, #24]	; (1a68 <LIVE_PULSE_init+0x30>)
    1a50:	4b06      	ldr	r3, [pc, #24]	; (1a6c <LIVE_PULSE_init+0x34>)
    1a52:	4798      	blx	r3
}
    1a54:	bf00      	nop
    1a56:	bd80      	pop	{r7, pc}
    1a58:	00001a11 	.word	0x00001a11
    1a5c:	00001a01 	.word	0x00001a01
    1a60:	0000867d 	.word	0x0000867d
    1a64:	43001800 	.word	0x43001800
    1a68:	2000a69c 	.word	0x2000a69c
    1a6c:	00002971 	.word	0x00002971

00001a70 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1a70:	b580      	push	{r7, lr}
    1a72:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1a74:	4804      	ldr	r0, [pc, #16]	; (1a88 <TIMER_HVAC_CLOCK_init+0x18>)
    1a76:	4b05      	ldr	r3, [pc, #20]	; (1a8c <TIMER_HVAC_CLOCK_init+0x1c>)
    1a78:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a7a:	2244      	movs	r2, #68	; 0x44
    1a7c:	2119      	movs	r1, #25
    1a7e:	4804      	ldr	r0, [pc, #16]	; (1a90 <TIMER_HVAC_CLOCK_init+0x20>)
    1a80:	4b04      	ldr	r3, [pc, #16]	; (1a94 <TIMER_HVAC_CLOCK_init+0x24>)
    1a82:	4798      	blx	r3
}
    1a84:	bf00      	nop
    1a86:	bd80      	pop	{r7, pc}
    1a88:	40000800 	.word	0x40000800
    1a8c:	00000a97 	.word	0x00000a97
    1a90:	40001c00 	.word	0x40001c00
    1a94:	000008f1 	.word	0x000008f1

00001a98 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1a98:	b580      	push	{r7, lr}
    1a9a:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1a9c:	4b05      	ldr	r3, [pc, #20]	; (1ab4 <TIMER_HVAC_init+0x1c>)
    1a9e:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1aa0:	4b05      	ldr	r3, [pc, #20]	; (1ab8 <TIMER_HVAC_init+0x20>)
    1aa2:	4798      	blx	r3
    1aa4:	4603      	mov	r3, r0
    1aa6:	461a      	mov	r2, r3
    1aa8:	4904      	ldr	r1, [pc, #16]	; (1abc <TIMER_HVAC_init+0x24>)
    1aaa:	4805      	ldr	r0, [pc, #20]	; (1ac0 <TIMER_HVAC_init+0x28>)
    1aac:	4b05      	ldr	r3, [pc, #20]	; (1ac4 <TIMER_HVAC_init+0x2c>)
    1aae:	4798      	blx	r3
}
    1ab0:	bf00      	nop
    1ab2:	bd80      	pop	{r7, pc}
    1ab4:	00001a71 	.word	0x00001a71
    1ab8:	00007a4d 	.word	0x00007a4d
    1abc:	41016000 	.word	0x41016000
    1ac0:	2000a760 	.word	0x2000a760
    1ac4:	00002cfd 	.word	0x00002cfd

00001ac8 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1ac8:	b580      	push	{r7, lr}
    1aca:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1acc:	4804      	ldr	r0, [pc, #16]	; (1ae0 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1ace:	4b05      	ldr	r3, [pc, #20]	; (1ae4 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1ad0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ad2:	2244      	movs	r2, #68	; 0x44
    1ad4:	2119      	movs	r1, #25
    1ad6:	4804      	ldr	r0, [pc, #16]	; (1ae8 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1ad8:	4b04      	ldr	r3, [pc, #16]	; (1aec <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1ada:	4798      	blx	r3
}
    1adc:	bf00      	nop
    1ade:	bd80      	pop	{r7, pc}
    1ae0:	40000800 	.word	0x40000800
    1ae4:	00000ab7 	.word	0x00000ab7
    1ae8:	40001c00 	.word	0x40001c00
    1aec:	000008f1 	.word	0x000008f1

00001af0 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1af0:	b580      	push	{r7, lr}
    1af2:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1af4:	4b05      	ldr	r3, [pc, #20]	; (1b0c <TIMER_TEMPERATURES_init+0x1c>)
    1af6:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1af8:	4b05      	ldr	r3, [pc, #20]	; (1b10 <TIMER_TEMPERATURES_init+0x20>)
    1afa:	4798      	blx	r3
    1afc:	4603      	mov	r3, r0
    1afe:	461a      	mov	r2, r3
    1b00:	4904      	ldr	r1, [pc, #16]	; (1b14 <TIMER_TEMPERATURES_init+0x24>)
    1b02:	4805      	ldr	r0, [pc, #20]	; (1b18 <TIMER_TEMPERATURES_init+0x28>)
    1b04:	4b05      	ldr	r3, [pc, #20]	; (1b1c <TIMER_TEMPERATURES_init+0x2c>)
    1b06:	4798      	blx	r3
}
    1b08:	bf00      	nop
    1b0a:	bd80      	pop	{r7, pc}
    1b0c:	00001ac9 	.word	0x00001ac9
    1b10:	00007a4d 	.word	0x00007a4d
    1b14:	41018000 	.word	0x41018000
    1b18:	2000a5a8 	.word	0x2000a5a8
    1b1c:	00002cfd 	.word	0x00002cfd

00001b20 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    1b24:	4804      	ldr	r0, [pc, #16]	; (1b38 <TIMER_CCU_CLOCK_init+0x18>)
    1b26:	4b05      	ldr	r3, [pc, #20]	; (1b3c <TIMER_CCU_CLOCK_init+0x1c>)
    1b28:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b2a:	2240      	movs	r2, #64	; 0x40
    1b2c:	211d      	movs	r1, #29
    1b2e:	4804      	ldr	r0, [pc, #16]	; (1b40 <TIMER_CCU_CLOCK_init+0x20>)
    1b30:	4b04      	ldr	r3, [pc, #16]	; (1b44 <TIMER_CCU_CLOCK_init+0x24>)
    1b32:	4798      	blx	r3
}
    1b34:	bf00      	nop
    1b36:	bd80      	pop	{r7, pc}
    1b38:	40000800 	.word	0x40000800
    1b3c:	00000af7 	.word	0x00000af7
    1b40:	40001c00 	.word	0x40001c00
    1b44:	000008f1 	.word	0x000008f1

00001b48 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    1b48:	b580      	push	{r7, lr}
    1b4a:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    1b4c:	4b05      	ldr	r3, [pc, #20]	; (1b64 <TIMER_CCU_init+0x1c>)
    1b4e:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    1b50:	4b05      	ldr	r3, [pc, #20]	; (1b68 <TIMER_CCU_init+0x20>)
    1b52:	4798      	blx	r3
    1b54:	4603      	mov	r3, r0
    1b56:	461a      	mov	r2, r3
    1b58:	4904      	ldr	r1, [pc, #16]	; (1b6c <TIMER_CCU_init+0x24>)
    1b5a:	4805      	ldr	r0, [pc, #20]	; (1b70 <TIMER_CCU_init+0x28>)
    1b5c:	4b05      	ldr	r3, [pc, #20]	; (1b74 <TIMER_CCU_init+0x2c>)
    1b5e:	4798      	blx	r3
}
    1b60:	bf00      	nop
    1b62:	bd80      	pop	{r7, pc}
    1b64:	00001b21 	.word	0x00001b21
    1b68:	00007a4d 	.word	0x00007a4d
    1b6c:	42000c00 	.word	0x42000c00
    1b70:	2000a6b8 	.word	0x2000a6b8
    1b74:	00002cfd 	.word	0x00002cfd

00001b78 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1b78:	b580      	push	{r7, lr}
    1b7a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1b7c:	2102      	movs	r1, #2
    1b7e:	2018      	movs	r0, #24
    1b80:	4b0f      	ldr	r3, [pc, #60]	; (1bc0 <CDCUSB_PORT_init+0x48>)
    1b82:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1b84:	2100      	movs	r1, #0
    1b86:	2018      	movs	r0, #24
    1b88:	4b0e      	ldr	r3, [pc, #56]	; (1bc4 <CDCUSB_PORT_init+0x4c>)
    1b8a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1b8c:	2100      	movs	r1, #0
    1b8e:	2018      	movs	r0, #24
    1b90:	4b0d      	ldr	r3, [pc, #52]	; (1bc8 <CDCUSB_PORT_init+0x50>)
    1b92:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1b94:	490d      	ldr	r1, [pc, #52]	; (1bcc <CDCUSB_PORT_init+0x54>)
    1b96:	2018      	movs	r0, #24
    1b98:	4b0d      	ldr	r3, [pc, #52]	; (1bd0 <CDCUSB_PORT_init+0x58>)
    1b9a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1b9c:	2102      	movs	r1, #2
    1b9e:	2019      	movs	r0, #25
    1ba0:	4b07      	ldr	r3, [pc, #28]	; (1bc0 <CDCUSB_PORT_init+0x48>)
    1ba2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1ba4:	2100      	movs	r1, #0
    1ba6:	2019      	movs	r0, #25
    1ba8:	4b06      	ldr	r3, [pc, #24]	; (1bc4 <CDCUSB_PORT_init+0x4c>)
    1baa:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1bac:	2100      	movs	r1, #0
    1bae:	2019      	movs	r0, #25
    1bb0:	4b05      	ldr	r3, [pc, #20]	; (1bc8 <CDCUSB_PORT_init+0x50>)
    1bb2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1bb4:	4907      	ldr	r1, [pc, #28]	; (1bd4 <CDCUSB_PORT_init+0x5c>)
    1bb6:	2019      	movs	r0, #25
    1bb8:	4b05      	ldr	r3, [pc, #20]	; (1bd0 <CDCUSB_PORT_init+0x58>)
    1bba:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1bbc:	bf00      	nop
    1bbe:	bd80      	pop	{r7, pc}
    1bc0:	00001165 	.word	0x00001165
    1bc4:	0000119d 	.word	0x0000119d
    1bc8:	00001111 	.word	0x00001111
    1bcc:	00180007 	.word	0x00180007
    1bd0:	00001145 	.word	0x00001145
    1bd4:	00190007 	.word	0x00190007

00001bd8 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1bd8:	b580      	push	{r7, lr}
    1bda:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1bdc:	2242      	movs	r2, #66	; 0x42
    1bde:	210a      	movs	r1, #10
    1be0:	4805      	ldr	r0, [pc, #20]	; (1bf8 <CDCUSB_CLOCK_init+0x20>)
    1be2:	4b06      	ldr	r3, [pc, #24]	; (1bfc <CDCUSB_CLOCK_init+0x24>)
    1be4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1be6:	4806      	ldr	r0, [pc, #24]	; (1c00 <CDCUSB_CLOCK_init+0x28>)
    1be8:	4b06      	ldr	r3, [pc, #24]	; (1c04 <CDCUSB_CLOCK_init+0x2c>)
    1bea:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1bec:	4804      	ldr	r0, [pc, #16]	; (1c00 <CDCUSB_CLOCK_init+0x28>)
    1bee:	4b06      	ldr	r3, [pc, #24]	; (1c08 <CDCUSB_CLOCK_init+0x30>)
    1bf0:	4798      	blx	r3
}
    1bf2:	bf00      	nop
    1bf4:	bd80      	pop	{r7, pc}
    1bf6:	bf00      	nop
    1bf8:	40001c00 	.word	0x40001c00
    1bfc:	000008f1 	.word	0x000008f1
    1c00:	40000800 	.word	0x40000800
    1c04:	00000917 	.word	0x00000917
    1c08:	00000a37 	.word	0x00000a37

00001c0c <CDCUSB_init>:

void CDCUSB_init(void)
{
    1c0c:	b580      	push	{r7, lr}
    1c0e:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1c10:	4b03      	ldr	r3, [pc, #12]	; (1c20 <CDCUSB_init+0x14>)
    1c12:	4798      	blx	r3
	usb_d_init();
    1c14:	4b03      	ldr	r3, [pc, #12]	; (1c24 <CDCUSB_init+0x18>)
    1c16:	4798      	blx	r3
	CDCUSB_PORT_init();
    1c18:	4b03      	ldr	r3, [pc, #12]	; (1c28 <CDCUSB_init+0x1c>)
    1c1a:	4798      	blx	r3
}
    1c1c:	bf00      	nop
    1c1e:	bd80      	pop	{r7, pc}
    1c20:	00001bd9 	.word	0x00001bd9
    1c24:	00003559 	.word	0x00003559
    1c28:	00001b79 	.word	0x00001b79

00001c2c <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1c30:	4802      	ldr	r0, [pc, #8]	; (1c3c <WATCHDOG_CLOCK_init+0x10>)
    1c32:	4b03      	ldr	r3, [pc, #12]	; (1c40 <WATCHDOG_CLOCK_init+0x14>)
    1c34:	4798      	blx	r3
}
    1c36:	bf00      	nop
    1c38:	bd80      	pop	{r7, pc}
    1c3a:	bf00      	nop
    1c3c:	40000800 	.word	0x40000800
    1c40:	00000997 	.word	0x00000997

00001c44 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1c44:	b580      	push	{r7, lr}
    1c46:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1c48:	4b03      	ldr	r3, [pc, #12]	; (1c58 <WATCHDOG_init+0x14>)
    1c4a:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1c4c:	4903      	ldr	r1, [pc, #12]	; (1c5c <WATCHDOG_init+0x18>)
    1c4e:	4804      	ldr	r0, [pc, #16]	; (1c60 <WATCHDOG_init+0x1c>)
    1c50:	4b04      	ldr	r3, [pc, #16]	; (1c64 <WATCHDOG_init+0x20>)
    1c52:	4798      	blx	r3
}
    1c54:	bf00      	nop
    1c56:	bd80      	pop	{r7, pc}
    1c58:	00001c2d 	.word	0x00001c2d
    1c5c:	40002000 	.word	0x40002000
    1c60:	2000a7a0 	.word	0x2000a7a0
    1c64:	000011e5 	.word	0x000011e5

00001c68 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1c68:	b580      	push	{r7, lr}
    1c6a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1c6c:	4904      	ldr	r1, [pc, #16]	; (1c80 <CAN_CCU_PORT_init+0x18>)
    1c6e:	202d      	movs	r0, #45	; 0x2d
    1c70:	4b04      	ldr	r3, [pc, #16]	; (1c84 <CAN_CCU_PORT_init+0x1c>)
    1c72:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1c74:	4904      	ldr	r1, [pc, #16]	; (1c88 <CAN_CCU_PORT_init+0x20>)
    1c76:	202c      	movs	r0, #44	; 0x2c
    1c78:	4b02      	ldr	r3, [pc, #8]	; (1c84 <CAN_CCU_PORT_init+0x1c>)
    1c7a:	4798      	blx	r3
}
    1c7c:	bf00      	nop
    1c7e:	bd80      	pop	{r7, pc}
    1c80:	002d0007 	.word	0x002d0007
    1c84:	00001145 	.word	0x00001145
    1c88:	002c0007 	.word	0x002c0007

00001c8c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1c8c:	b580      	push	{r7, lr}
    1c8e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1c90:	4807      	ldr	r0, [pc, #28]	; (1cb0 <CAN_CCU_init+0x24>)
    1c92:	4b08      	ldr	r3, [pc, #32]	; (1cb4 <CAN_CCU_init+0x28>)
    1c94:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c96:	2249      	movs	r2, #73	; 0x49
    1c98:	211c      	movs	r1, #28
    1c9a:	4807      	ldr	r0, [pc, #28]	; (1cb8 <CAN_CCU_init+0x2c>)
    1c9c:	4b07      	ldr	r3, [pc, #28]	; (1cbc <CAN_CCU_init+0x30>)
    1c9e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1ca0:	4907      	ldr	r1, [pc, #28]	; (1cc0 <CAN_CCU_init+0x34>)
    1ca2:	4808      	ldr	r0, [pc, #32]	; (1cc4 <CAN_CCU_init+0x38>)
    1ca4:	4b08      	ldr	r3, [pc, #32]	; (1cc8 <CAN_CCU_init+0x3c>)
    1ca6:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1ca8:	4b08      	ldr	r3, [pc, #32]	; (1ccc <CAN_CCU_init+0x40>)
    1caa:	4798      	blx	r3
}
    1cac:	bf00      	nop
    1cae:	bd80      	pop	{r7, pc}
    1cb0:	40000800 	.word	0x40000800
    1cb4:	00000957 	.word	0x00000957
    1cb8:	40001c00 	.word	0x40001c00
    1cbc:	000008f1 	.word	0x000008f1
    1cc0:	42000400 	.word	0x42000400
    1cc4:	2000a6f8 	.word	0x2000a6f8
    1cc8:	000023f9 	.word	0x000023f9
    1ccc:	00001c69 	.word	0x00001c69

00001cd0 <system_init>:

void system_init(void)
{
    1cd0:	b580      	push	{r7, lr}
    1cd2:	af00      	add	r7, sp, #0
	init_mcu();
    1cd4:	4b5f      	ldr	r3, [pc, #380]	; (1e54 <system_init+0x184>)
    1cd6:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1cd8:	2100      	movs	r1, #0
    1cda:	2007      	movs	r0, #7
    1cdc:	4b5e      	ldr	r3, [pc, #376]	; (1e58 <system_init+0x188>)
    1cde:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1ce0:	2102      	movs	r1, #2
    1ce2:	2007      	movs	r0, #7
    1ce4:	4b5d      	ldr	r3, [pc, #372]	; (1e5c <system_init+0x18c>)
    1ce6:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1ce8:	f04f 31ff 	mov.w	r1, #4294967295
    1cec:	2007      	movs	r0, #7
    1cee:	4b5c      	ldr	r3, [pc, #368]	; (1e60 <system_init+0x190>)
    1cf0:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1cf2:	2101      	movs	r1, #1
    1cf4:	200f      	movs	r0, #15
    1cf6:	4b58      	ldr	r3, [pc, #352]	; (1e58 <system_init+0x188>)
    1cf8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1cfa:	2102      	movs	r1, #2
    1cfc:	200f      	movs	r0, #15
    1cfe:	4b57      	ldr	r3, [pc, #348]	; (1e5c <system_init+0x18c>)
    1d00:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1d02:	f04f 31ff 	mov.w	r1, #4294967295
    1d06:	200f      	movs	r0, #15
    1d08:	4b55      	ldr	r3, [pc, #340]	; (1e60 <system_init+0x190>)
    1d0a:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1d0c:	2101      	movs	r1, #1
    1d0e:	2013      	movs	r0, #19
    1d10:	4b51      	ldr	r3, [pc, #324]	; (1e58 <system_init+0x188>)
    1d12:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1d14:	2102      	movs	r1, #2
    1d16:	2013      	movs	r0, #19
    1d18:	4b50      	ldr	r3, [pc, #320]	; (1e5c <system_init+0x18c>)
    1d1a:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1d1c:	f04f 31ff 	mov.w	r1, #4294967295
    1d20:	2013      	movs	r0, #19
    1d22:	4b4f      	ldr	r3, [pc, #316]	; (1e60 <system_init+0x190>)
    1d24:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1d26:	2101      	movs	r1, #1
    1d28:	201b      	movs	r0, #27
    1d2a:	4b4b      	ldr	r3, [pc, #300]	; (1e58 <system_init+0x188>)
    1d2c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1d2e:	2102      	movs	r1, #2
    1d30:	201b      	movs	r0, #27
    1d32:	4b4a      	ldr	r3, [pc, #296]	; (1e5c <system_init+0x18c>)
    1d34:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1d36:	f04f 31ff 	mov.w	r1, #4294967295
    1d3a:	201b      	movs	r0, #27
    1d3c:	4b48      	ldr	r3, [pc, #288]	; (1e60 <system_init+0x190>)
    1d3e:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1d40:	2101      	movs	r1, #1
    1d42:	2027      	movs	r0, #39	; 0x27
    1d44:	4b44      	ldr	r3, [pc, #272]	; (1e58 <system_init+0x188>)
    1d46:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1d48:	2102      	movs	r1, #2
    1d4a:	2027      	movs	r0, #39	; 0x27
    1d4c:	4b43      	ldr	r3, [pc, #268]	; (1e5c <system_init+0x18c>)
    1d4e:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1d50:	f04f 31ff 	mov.w	r1, #4294967295
    1d54:	2027      	movs	r0, #39	; 0x27
    1d56:	4b42      	ldr	r3, [pc, #264]	; (1e60 <system_init+0x190>)
    1d58:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1d5a:	2101      	movs	r1, #1
    1d5c:	203d      	movs	r0, #61	; 0x3d
    1d5e:	4b3e      	ldr	r3, [pc, #248]	; (1e58 <system_init+0x188>)
    1d60:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1d62:	2102      	movs	r1, #2
    1d64:	203d      	movs	r0, #61	; 0x3d
    1d66:	4b3d      	ldr	r3, [pc, #244]	; (1e5c <system_init+0x18c>)
    1d68:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1d6a:	f04f 31ff 	mov.w	r1, #4294967295
    1d6e:	203d      	movs	r0, #61	; 0x3d
    1d70:	4b3b      	ldr	r3, [pc, #236]	; (1e60 <system_init+0x190>)
    1d72:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1d74:	2101      	movs	r1, #1
    1d76:	203f      	movs	r0, #63	; 0x3f
    1d78:	4b38      	ldr	r3, [pc, #224]	; (1e5c <system_init+0x18c>)
    1d7a:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1d7c:	2101      	movs	r1, #1
    1d7e:	203f      	movs	r0, #63	; 0x3f
    1d80:	4b38      	ldr	r3, [pc, #224]	; (1e64 <system_init+0x194>)
    1d82:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1d84:	f04f 31ff 	mov.w	r1, #4294967295
    1d88:	203f      	movs	r0, #63	; 0x3f
    1d8a:	4b35      	ldr	r3, [pc, #212]	; (1e60 <system_init+0x190>)
    1d8c:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1d8e:	2100      	movs	r1, #0
    1d90:	204d      	movs	r0, #77	; 0x4d
    1d92:	4b31      	ldr	r3, [pc, #196]	; (1e58 <system_init+0x188>)
    1d94:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1d96:	2102      	movs	r1, #2
    1d98:	204d      	movs	r0, #77	; 0x4d
    1d9a:	4b30      	ldr	r3, [pc, #192]	; (1e5c <system_init+0x18c>)
    1d9c:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1d9e:	f04f 31ff 	mov.w	r1, #4294967295
    1da2:	204d      	movs	r0, #77	; 0x4d
    1da4:	4b2e      	ldr	r3, [pc, #184]	; (1e60 <system_init+0x190>)
    1da6:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1da8:	2101      	movs	r1, #1
    1daa:	204e      	movs	r0, #78	; 0x4e
    1dac:	4b2a      	ldr	r3, [pc, #168]	; (1e58 <system_init+0x188>)
    1dae:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1db0:	2102      	movs	r1, #2
    1db2:	204e      	movs	r0, #78	; 0x4e
    1db4:	4b29      	ldr	r3, [pc, #164]	; (1e5c <system_init+0x18c>)
    1db6:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1db8:	f04f 31ff 	mov.w	r1, #4294967295
    1dbc:	204e      	movs	r0, #78	; 0x4e
    1dbe:	4b28      	ldr	r3, [pc, #160]	; (1e60 <system_init+0x190>)
    1dc0:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1dc2:	2100      	movs	r1, #0
    1dc4:	204f      	movs	r0, #79	; 0x4f
    1dc6:	4b24      	ldr	r3, [pc, #144]	; (1e58 <system_init+0x188>)
    1dc8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1dca:	2102      	movs	r1, #2
    1dcc:	204f      	movs	r0, #79	; 0x4f
    1dce:	4b23      	ldr	r3, [pc, #140]	; (1e5c <system_init+0x18c>)
    1dd0:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1dd2:	f04f 31ff 	mov.w	r1, #4294967295
    1dd6:	204f      	movs	r0, #79	; 0x4f
    1dd8:	4b21      	ldr	r3, [pc, #132]	; (1e60 <system_init+0x190>)
    1dda:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1ddc:	2100      	movs	r1, #0
    1dde:	2052      	movs	r0, #82	; 0x52
    1de0:	4b1d      	ldr	r3, [pc, #116]	; (1e58 <system_init+0x188>)
    1de2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1de4:	2102      	movs	r1, #2
    1de6:	2052      	movs	r0, #82	; 0x52
    1de8:	4b1c      	ldr	r3, [pc, #112]	; (1e5c <system_init+0x18c>)
    1dea:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1dec:	f04f 31ff 	mov.w	r1, #4294967295
    1df0:	2052      	movs	r0, #82	; 0x52
    1df2:	4b1b      	ldr	r3, [pc, #108]	; (1e60 <system_init+0x190>)
    1df4:	4798      	blx	r3

	CRC_CALC_init();
    1df6:	4b1c      	ldr	r3, [pc, #112]	; (1e68 <system_init+0x198>)
    1df8:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1dfa:	4b1c      	ldr	r3, [pc, #112]	; (1e6c <system_init+0x19c>)
    1dfc:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1dfe:	4b1c      	ldr	r3, [pc, #112]	; (1e70 <system_init+0x1a0>)
    1e00:	4798      	blx	r3

	QSPI_N25Q256_init();
    1e02:	4b1c      	ldr	r3, [pc, #112]	; (1e74 <system_init+0x1a4>)
    1e04:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1e06:	4b1c      	ldr	r3, [pc, #112]	; (1e78 <system_init+0x1a8>)
    1e08:	4798      	blx	r3

	I2C_HEATERS_init();
    1e0a:	4b1c      	ldr	r3, [pc, #112]	; (1e7c <system_init+0x1ac>)
    1e0c:	4798      	blx	r3

	SPI_TEMP_init();
    1e0e:	4b1c      	ldr	r3, [pc, #112]	; (1e80 <system_init+0x1b0>)
    1e10:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1e12:	4b1c      	ldr	r3, [pc, #112]	; (1e84 <system_init+0x1b4>)
    1e14:	4798      	blx	r3

	SPI_HI3593_init();
    1e16:	4b1c      	ldr	r3, [pc, #112]	; (1e88 <system_init+0x1b8>)
    1e18:	4798      	blx	r3

	I2C_FANS_init();
    1e1a:	4b1c      	ldr	r3, [pc, #112]	; (1e8c <system_init+0x1bc>)
    1e1c:	4798      	blx	r3

	TIMER_USB_init();
    1e1e:	4b1c      	ldr	r3, [pc, #112]	; (1e90 <system_init+0x1c0>)
    1e20:	4798      	blx	r3
	TIMER_ARINC_init();
    1e22:	4b1c      	ldr	r3, [pc, #112]	; (1e94 <system_init+0x1c4>)
    1e24:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1e26:	4b1c      	ldr	r3, [pc, #112]	; (1e98 <system_init+0x1c8>)
    1e28:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1e2a:	4b1c      	ldr	r3, [pc, #112]	; (1e9c <system_init+0x1cc>)
    1e2c:	4798      	blx	r3
	TIMER_EVENT_init();
    1e2e:	4b1c      	ldr	r3, [pc, #112]	; (1ea0 <system_init+0x1d0>)
    1e30:	4798      	blx	r3
	LIVE_PULSE_init();
    1e32:	4b1c      	ldr	r3, [pc, #112]	; (1ea4 <system_init+0x1d4>)
    1e34:	4798      	blx	r3

	TIMER_HVAC_init();
    1e36:	4b1c      	ldr	r3, [pc, #112]	; (1ea8 <system_init+0x1d8>)
    1e38:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1e3a:	4b1c      	ldr	r3, [pc, #112]	; (1eac <system_init+0x1dc>)
    1e3c:	4798      	blx	r3

	TIMER_CCU_init();
    1e3e:	4b1c      	ldr	r3, [pc, #112]	; (1eb0 <system_init+0x1e0>)
    1e40:	4798      	blx	r3

	CDCUSB_init();
    1e42:	4b1c      	ldr	r3, [pc, #112]	; (1eb4 <system_init+0x1e4>)
    1e44:	4798      	blx	r3

	WATCHDOG_init();
    1e46:	4b1c      	ldr	r3, [pc, #112]	; (1eb8 <system_init+0x1e8>)
    1e48:	4798      	blx	r3
	CAN_CCU_init();
    1e4a:	4b1c      	ldr	r3, [pc, #112]	; (1ebc <system_init+0x1ec>)
    1e4c:	4798      	blx	r3
}
    1e4e:	bf00      	nop
    1e50:	bd80      	pop	{r7, pc}
    1e52:	bf00      	nop
    1e54:	000011d5 	.word	0x000011d5
    1e58:	0000119d 	.word	0x0000119d
    1e5c:	00001165 	.word	0x00001165
    1e60:	00001145 	.word	0x00001145
    1e64:	00001111 	.word	0x00001111
    1e68:	00001235 	.word	0x00001235
    1e6c:	00001261 	.word	0x00001261
    1e70:	00001389 	.word	0x00001389
    1e74:	000014d1 	.word	0x000014d1
    1e78:	00001515 	.word	0x00001515
    1e7c:	000015a5 	.word	0x000015a5
    1e80:	00001671 	.word	0x00001671
    1e84:	00001709 	.word	0x00001709
    1e88:	000017d5 	.word	0x000017d5
    1e8c:	0000186d 	.word	0x0000186d
    1e90:	00001899 	.word	0x00001899
    1e94:	000018e1 	.word	0x000018e1
    1e98:	00001929 	.word	0x00001929
    1e9c:	00001971 	.word	0x00001971
    1ea0:	000019b9 	.word	0x000019b9
    1ea4:	00001a39 	.word	0x00001a39
    1ea8:	00001a99 	.word	0x00001a99
    1eac:	00001af1 	.word	0x00001af1
    1eb0:	00001b49 	.word	0x00001b49
    1eb4:	00001c0d 	.word	0x00001c0d
    1eb8:	00001c45 	.word	0x00001c45
    1ebc:	00001c8d 	.word	0x00001c8d

00001ec0 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    1ec0:	b480      	push	{r7}
    1ec2:	b083      	sub	sp, #12
    1ec4:	af00      	add	r7, sp, #0
    1ec6:	4603      	mov	r3, r0
    1ec8:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    1eca:	88fb      	ldrh	r3, [r7, #6]
    1ecc:	f003 0303 	and.w	r3, r3, #3
    1ed0:	2b00      	cmp	r3, #0
    1ed2:	d001      	beq.n	1ed8 <leap_year+0x18>
		return false;
    1ed4:	2300      	movs	r3, #0
    1ed6:	e000      	b.n	1eda <leap_year+0x1a>
	} else {
		return true;
    1ed8:	2301      	movs	r3, #1
	}
}
    1eda:	4618      	mov	r0, r3
    1edc:	370c      	adds	r7, #12
    1ede:	46bd      	mov	sp, r7
    1ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ee4:	4770      	bx	lr
	...

00001ee8 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    1ee8:	b580      	push	{r7, lr}
    1eea:	b084      	sub	sp, #16
    1eec:	af00      	add	r7, sp, #0
    1eee:	6078      	str	r0, [r7, #4]
    1ef0:	460b      	mov	r3, r1
    1ef2:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    1ef4:	2300      	movs	r3, #0
    1ef6:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	b29b      	uxth	r3, r3
    1efc:	4618      	mov	r0, r3
    1efe:	4b2f      	ldr	r3, [pc, #188]	; (1fbc <get_secs_in_month+0xd4>)
    1f00:	4798      	blx	r3
    1f02:	4603      	mov	r3, r0
    1f04:	2b00      	cmp	r3, #0
    1f06:	d028      	beq.n	1f5a <get_secs_in_month+0x72>
		switch (month) {
    1f08:	78fb      	ldrb	r3, [r7, #3]
    1f0a:	3b01      	subs	r3, #1
    1f0c:	2b0b      	cmp	r3, #11
    1f0e:	d84c      	bhi.n	1faa <get_secs_in_month+0xc2>
    1f10:	a201      	add	r2, pc, #4	; (adr r2, 1f18 <get_secs_in_month+0x30>)
    1f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f16:	bf00      	nop
    1f18:	00001f49 	.word	0x00001f49
    1f1c:	00001f4f 	.word	0x00001f4f
    1f20:	00001f49 	.word	0x00001f49
    1f24:	00001f55 	.word	0x00001f55
    1f28:	00001f49 	.word	0x00001f49
    1f2c:	00001f55 	.word	0x00001f55
    1f30:	00001f49 	.word	0x00001f49
    1f34:	00001f49 	.word	0x00001f49
    1f38:	00001f55 	.word	0x00001f55
    1f3c:	00001f49 	.word	0x00001f49
    1f40:	00001f55 	.word	0x00001f55
    1f44:	00001f49 	.word	0x00001f49
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    1f48:	4b1d      	ldr	r3, [pc, #116]	; (1fc0 <get_secs_in_month+0xd8>)
    1f4a:	60fb      	str	r3, [r7, #12]
			break;
    1f4c:	e030      	b.n	1fb0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    1f4e:	4b1d      	ldr	r3, [pc, #116]	; (1fc4 <get_secs_in_month+0xdc>)
    1f50:	60fb      	str	r3, [r7, #12]
			break;
    1f52:	e02d      	b.n	1fb0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    1f54:	4b1c      	ldr	r3, [pc, #112]	; (1fc8 <get_secs_in_month+0xe0>)
    1f56:	60fb      	str	r3, [r7, #12]
			break;
    1f58:	e02a      	b.n	1fb0 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    1f5a:	78fb      	ldrb	r3, [r7, #3]
    1f5c:	3b01      	subs	r3, #1
    1f5e:	2b0b      	cmp	r3, #11
    1f60:	d825      	bhi.n	1fae <get_secs_in_month+0xc6>
    1f62:	a201      	add	r2, pc, #4	; (adr r2, 1f68 <get_secs_in_month+0x80>)
    1f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f68:	00001f99 	.word	0x00001f99
    1f6c:	00001f9f 	.word	0x00001f9f
    1f70:	00001f99 	.word	0x00001f99
    1f74:	00001fa5 	.word	0x00001fa5
    1f78:	00001f99 	.word	0x00001f99
    1f7c:	00001fa5 	.word	0x00001fa5
    1f80:	00001f99 	.word	0x00001f99
    1f84:	00001f99 	.word	0x00001f99
    1f88:	00001fa5 	.word	0x00001fa5
    1f8c:	00001f99 	.word	0x00001f99
    1f90:	00001fa5 	.word	0x00001fa5
    1f94:	00001f99 	.word	0x00001f99
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    1f98:	4b09      	ldr	r3, [pc, #36]	; (1fc0 <get_secs_in_month+0xd8>)
    1f9a:	60fb      	str	r3, [r7, #12]
			break;
    1f9c:	e008      	b.n	1fb0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    1f9e:	4b0b      	ldr	r3, [pc, #44]	; (1fcc <get_secs_in_month+0xe4>)
    1fa0:	60fb      	str	r3, [r7, #12]
			break;
    1fa2:	e005      	b.n	1fb0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    1fa4:	4b08      	ldr	r3, [pc, #32]	; (1fc8 <get_secs_in_month+0xe0>)
    1fa6:	60fb      	str	r3, [r7, #12]
			break;
    1fa8:	e002      	b.n	1fb0 <get_secs_in_month+0xc8>
			break;
    1faa:	bf00      	nop
    1fac:	e000      	b.n	1fb0 <get_secs_in_month+0xc8>
		default:
			break;
    1fae:	bf00      	nop
		}
	}

	return sec_in_month;
    1fb0:	68fb      	ldr	r3, [r7, #12]
}
    1fb2:	4618      	mov	r0, r3
    1fb4:	3710      	adds	r7, #16
    1fb6:	46bd      	mov	sp, r7
    1fb8:	bd80      	pop	{r7, pc}
    1fba:	bf00      	nop
    1fbc:	00001ec1 	.word	0x00001ec1
    1fc0:	0028de80 	.word	0x0028de80
    1fc4:	00263b80 	.word	0x00263b80
    1fc8:	00278d00 	.word	0x00278d00
    1fcc:	0024ea00 	.word	0x0024ea00

00001fd0 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	b08a      	sub	sp, #40	; 0x28
    1fd4:	af00      	add	r7, sp, #0
    1fd6:	60f8      	str	r0, [r7, #12]
    1fd8:	60b9      	str	r1, [r7, #8]
    1fda:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	699b      	ldr	r3, [r3, #24]
    1fe0:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    1fe2:	2301      	movs	r3, #1
    1fe4:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    1fe6:	2301      	movs	r3, #1
    1fe8:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    1fea:	2300      	movs	r3, #0
    1fec:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    1fee:	2300      	movs	r3, #0
    1ff0:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    1ff2:	68bb      	ldr	r3, [r7, #8]
    1ff4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    1ff6:	6a3b      	ldr	r3, [r7, #32]
    1ff8:	b29b      	uxth	r3, r3
    1ffa:	4618      	mov	r0, r3
    1ffc:	4b32      	ldr	r3, [pc, #200]	; (20c8 <convert_timestamp_to_datetime+0xf8>)
    1ffe:	4798      	blx	r3
    2000:	4603      	mov	r3, r0
    2002:	2b00      	cmp	r3, #0
    2004:	d001      	beq.n	200a <convert_timestamp_to_datetime+0x3a>
    2006:	4b31      	ldr	r3, [pc, #196]	; (20cc <convert_timestamp_to_datetime+0xfc>)
    2008:	e000      	b.n	200c <convert_timestamp_to_datetime+0x3c>
    200a:	4b31      	ldr	r3, [pc, #196]	; (20d0 <convert_timestamp_to_datetime+0x100>)
    200c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    200e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2010:	69bb      	ldr	r3, [r7, #24]
    2012:	429a      	cmp	r2, r3
    2014:	d307      	bcc.n	2026 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    2016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2018:	69bb      	ldr	r3, [r7, #24]
    201a:	1ad3      	subs	r3, r2, r3
    201c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    201e:	6a3b      	ldr	r3, [r7, #32]
    2020:	3301      	adds	r3, #1
    2022:	623b      	str	r3, [r7, #32]
    2024:	e7e7      	b.n	1ff6 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2026:	7ffb      	ldrb	r3, [r7, #31]
    2028:	4619      	mov	r1, r3
    202a:	6a38      	ldr	r0, [r7, #32]
    202c:	4b29      	ldr	r3, [pc, #164]	; (20d4 <convert_timestamp_to_datetime+0x104>)
    202e:	4798      	blx	r3
    2030:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    2032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2034:	697b      	ldr	r3, [r7, #20]
    2036:	429a      	cmp	r2, r3
    2038:	d307      	bcc.n	204a <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    203c:	697b      	ldr	r3, [r7, #20]
    203e:	1ad3      	subs	r3, r2, r3
    2040:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    2042:	7ffb      	ldrb	r3, [r7, #31]
    2044:	3301      	adds	r3, #1
    2046:	77fb      	strb	r3, [r7, #31]
    2048:	e7ed      	b.n	2026 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    204c:	4a22      	ldr	r2, [pc, #136]	; (20d8 <convert_timestamp_to_datetime+0x108>)
    204e:	4293      	cmp	r3, r2
    2050:	d909      	bls.n	2066 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    2052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2054:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    2058:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    205c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    205e:	7fbb      	ldrb	r3, [r7, #30]
    2060:	3301      	adds	r3, #1
    2062:	77bb      	strb	r3, [r7, #30]
    2064:	e7f1      	b.n	204a <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    2066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2068:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    206c:	d307      	bcc.n	207e <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2070:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    2074:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    2076:	7f7b      	ldrb	r3, [r7, #29]
    2078:	3301      	adds	r3, #1
    207a:	777b      	strb	r3, [r7, #29]
    207c:	e7f3      	b.n	2066 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2080:	2b3b      	cmp	r3, #59	; 0x3b
    2082:	d906      	bls.n	2092 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    2084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2086:	3b3c      	subs	r3, #60	; 0x3c
    2088:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    208a:	7f3b      	ldrb	r3, [r7, #28]
    208c:	3301      	adds	r3, #1
    208e:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    2090:	e7f5      	b.n	207e <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    2092:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    2094:	6a3b      	ldr	r3, [r7, #32]
    2096:	b29a      	uxth	r2, r3
    2098:	687b      	ldr	r3, [r7, #4]
    209a:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    209c:	687b      	ldr	r3, [r7, #4]
    209e:	7ffa      	ldrb	r2, [r7, #31]
    20a0:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    20a2:	687b      	ldr	r3, [r7, #4]
    20a4:	7fba      	ldrb	r2, [r7, #30]
    20a6:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    20a8:	687b      	ldr	r3, [r7, #4]
    20aa:	7f7a      	ldrb	r2, [r7, #29]
    20ac:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    20ae:	687b      	ldr	r3, [r7, #4]
    20b0:	7f3a      	ldrb	r2, [r7, #28]
    20b2:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    20b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20b6:	b2da      	uxtb	r2, r3
    20b8:	687b      	ldr	r3, [r7, #4]
    20ba:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    20bc:	2300      	movs	r3, #0
}
    20be:	4618      	mov	r0, r3
    20c0:	3728      	adds	r7, #40	; 0x28
    20c2:	46bd      	mov	sp, r7
    20c4:	bd80      	pop	{r7, pc}
    20c6:	bf00      	nop
    20c8:	00001ec1 	.word	0x00001ec1
    20cc:	01e28500 	.word	0x01e28500
    20d0:	01e13380 	.word	0x01e13380
    20d4:	00001ee9 	.word	0x00001ee9
    20d8:	0001517f 	.word	0x0001517f

000020dc <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    20dc:	b580      	push	{r7, lr}
    20de:	b086      	sub	sp, #24
    20e0:	af00      	add	r7, sp, #0
    20e2:	6078      	str	r0, [r7, #4]
    20e4:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    20e6:	2300      	movs	r3, #0
    20e8:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    20ea:	2300      	movs	r3, #0
    20ec:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    20ee:	683b      	ldr	r3, [r7, #0]
    20f0:	88db      	ldrh	r3, [r3, #6]
    20f2:	b2da      	uxtb	r2, r3
    20f4:	687b      	ldr	r3, [r7, #4]
    20f6:	699b      	ldr	r3, [r3, #24]
    20f8:	b2db      	uxtb	r3, r3
    20fa:	1ad3      	subs	r3, r2, r3
    20fc:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    20fe:	683b      	ldr	r3, [r7, #0]
    2100:	795b      	ldrb	r3, [r3, #5]
    2102:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    2104:	683b      	ldr	r3, [r7, #0]
    2106:	791b      	ldrb	r3, [r3, #4]
    2108:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    210a:	683b      	ldr	r3, [r7, #0]
    210c:	789b      	ldrb	r3, [r3, #2]
    210e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    2110:	683b      	ldr	r3, [r7, #0]
    2112:	785b      	ldrb	r3, [r3, #1]
    2114:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    2116:	683b      	ldr	r3, [r7, #0]
    2118:	781b      	ldrb	r3, [r3, #0]
    211a:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    211c:	2300      	movs	r3, #0
    211e:	613b      	str	r3, [r7, #16]
    2120:	e01a      	b.n	2158 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	699b      	ldr	r3, [r3, #24]
    2126:	b29a      	uxth	r2, r3
    2128:	693b      	ldr	r3, [r7, #16]
    212a:	b29b      	uxth	r3, r3
    212c:	4413      	add	r3, r2
    212e:	b29b      	uxth	r3, r3
    2130:	4618      	mov	r0, r3
    2132:	4b29      	ldr	r3, [pc, #164]	; (21d8 <convert_datetime_to_timestamp+0xfc>)
    2134:	4798      	blx	r3
    2136:	4603      	mov	r3, r0
    2138:	2b00      	cmp	r3, #0
    213a:	d006      	beq.n	214a <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    213c:	697b      	ldr	r3, [r7, #20]
    213e:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    2142:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    2146:	617b      	str	r3, [r7, #20]
    2148:	e003      	b.n	2152 <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    214a:	697a      	ldr	r2, [r7, #20]
    214c:	4b23      	ldr	r3, [pc, #140]	; (21dc <convert_datetime_to_timestamp+0x100>)
    214e:	4413      	add	r3, r2
    2150:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    2152:	693b      	ldr	r3, [r7, #16]
    2154:	3301      	adds	r3, #1
    2156:	613b      	str	r3, [r7, #16]
    2158:	7bfa      	ldrb	r2, [r7, #15]
    215a:	693b      	ldr	r3, [r7, #16]
    215c:	429a      	cmp	r2, r3
    215e:	d8e0      	bhi.n	2122 <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    2160:	2301      	movs	r3, #1
    2162:	613b      	str	r3, [r7, #16]
    2164:	e00f      	b.n	2186 <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    2166:	683b      	ldr	r3, [r7, #0]
    2168:	88db      	ldrh	r3, [r3, #6]
    216a:	461a      	mov	r2, r3
    216c:	693b      	ldr	r3, [r7, #16]
    216e:	b2db      	uxtb	r3, r3
    2170:	4619      	mov	r1, r3
    2172:	4610      	mov	r0, r2
    2174:	4b1a      	ldr	r3, [pc, #104]	; (21e0 <convert_datetime_to_timestamp+0x104>)
    2176:	4798      	blx	r3
    2178:	4602      	mov	r2, r0
    217a:	697b      	ldr	r3, [r7, #20]
    217c:	4413      	add	r3, r2
    217e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    2180:	693b      	ldr	r3, [r7, #16]
    2182:	3301      	adds	r3, #1
    2184:	613b      	str	r3, [r7, #16]
    2186:	7bba      	ldrb	r2, [r7, #14]
    2188:	693b      	ldr	r3, [r7, #16]
    218a:	429a      	cmp	r2, r3
    218c:	d8eb      	bhi.n	2166 <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    218e:	7b7b      	ldrb	r3, [r7, #13]
    2190:	3b01      	subs	r3, #1
    2192:	4a14      	ldr	r2, [pc, #80]	; (21e4 <convert_datetime_to_timestamp+0x108>)
    2194:	fb02 f303 	mul.w	r3, r2, r3
    2198:	461a      	mov	r2, r3
    219a:	697b      	ldr	r3, [r7, #20]
    219c:	4413      	add	r3, r2
    219e:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    21a0:	7b3b      	ldrb	r3, [r7, #12]
    21a2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    21a6:	fb02 f303 	mul.w	r3, r2, r3
    21aa:	461a      	mov	r2, r3
    21ac:	697b      	ldr	r3, [r7, #20]
    21ae:	4413      	add	r3, r2
    21b0:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    21b2:	7afa      	ldrb	r2, [r7, #11]
    21b4:	4613      	mov	r3, r2
    21b6:	011b      	lsls	r3, r3, #4
    21b8:	1a9b      	subs	r3, r3, r2
    21ba:	009b      	lsls	r3, r3, #2
    21bc:	461a      	mov	r2, r3
    21be:	697b      	ldr	r3, [r7, #20]
    21c0:	4413      	add	r3, r2
    21c2:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    21c4:	7abb      	ldrb	r3, [r7, #10]
    21c6:	697a      	ldr	r2, [r7, #20]
    21c8:	4413      	add	r3, r2
    21ca:	617b      	str	r3, [r7, #20]

	return tmp;
    21cc:	697b      	ldr	r3, [r7, #20]
}
    21ce:	4618      	mov	r0, r3
    21d0:	3718      	adds	r7, #24
    21d2:	46bd      	mov	sp, r7
    21d4:	bd80      	pop	{r7, pc}
    21d6:	bf00      	nop
    21d8:	00001ec1 	.word	0x00001ec1
    21dc:	01e13380 	.word	0x01e13380
    21e0:	00001ee9 	.word	0x00001ee9
    21e4:	00015180 	.word	0x00015180

000021e8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    21e8:	b580      	push	{r7, lr}
    21ea:	b084      	sub	sp, #16
    21ec:	af00      	add	r7, sp, #0
    21ee:	6078      	str	r0, [r7, #4]
    21f0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    21f2:	2300      	movs	r3, #0
    21f4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    21f6:	687b      	ldr	r3, [r7, #4]
    21f8:	2b00      	cmp	r3, #0
    21fa:	bf14      	ite	ne
    21fc:	2301      	movne	r3, #1
    21fe:	2300      	moveq	r3, #0
    2200:	b2db      	uxtb	r3, r3
    2202:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    2206:	4911      	ldr	r1, [pc, #68]	; (224c <calendar_init+0x64>)
    2208:	4618      	mov	r0, r3
    220a:	4b11      	ldr	r3, [pc, #68]	; (2250 <calendar_init+0x68>)
    220c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    220e:	687b      	ldr	r3, [r7, #4]
    2210:	681a      	ldr	r2, [r3, #0]
    2212:	683b      	ldr	r3, [r7, #0]
    2214:	429a      	cmp	r2, r3
    2216:	d101      	bne.n	221c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    2218:	2300      	movs	r3, #0
    221a:	e013      	b.n	2244 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    221c:	687b      	ldr	r3, [r7, #4]
    221e:	681b      	ldr	r3, [r3, #0]
    2220:	2b00      	cmp	r3, #0
    2222:	d002      	beq.n	222a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2224:	f06f 0311 	mvn.w	r3, #17
    2228:	e00c      	b.n	2244 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	683a      	ldr	r2, [r7, #0]
    222e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2230:	687b      	ldr	r3, [r7, #4]
    2232:	4618      	mov	r0, r3
    2234:	4b07      	ldr	r3, [pc, #28]	; (2254 <calendar_init+0x6c>)
    2236:	4798      	blx	r3
    2238:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    223a:	687b      	ldr	r3, [r7, #4]
    223c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2240:	619a      	str	r2, [r3, #24]

	return ret;
    2242:	68fb      	ldr	r3, [r7, #12]
}
    2244:	4618      	mov	r0, r3
    2246:	3710      	adds	r7, #16
    2248:	46bd      	mov	sp, r7
    224a:	bd80      	pop	{r7, pc}
    224c:	00010774 	.word	0x00010774
    2250:	00003b01 	.word	0x00003b01
    2254:	00005f35 	.word	0x00005f35

00002258 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    2258:	b580      	push	{r7, lr}
    225a:	b082      	sub	sp, #8
    225c:	af00      	add	r7, sp, #0
    225e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    2260:	687b      	ldr	r3, [r7, #4]
    2262:	2b00      	cmp	r3, #0
    2264:	bf14      	ite	ne
    2266:	2301      	movne	r3, #1
    2268:	2300      	moveq	r3, #0
    226a:	b2db      	uxtb	r3, r3
    226c:	f240 12e5 	movw	r2, #485	; 0x1e5
    2270:	4906      	ldr	r1, [pc, #24]	; (228c <calendar_enable+0x34>)
    2272:	4618      	mov	r0, r3
    2274:	4b06      	ldr	r3, [pc, #24]	; (2290 <calendar_enable+0x38>)
    2276:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	4618      	mov	r0, r3
    227c:	4b05      	ldr	r3, [pc, #20]	; (2294 <calendar_enable+0x3c>)
    227e:	4798      	blx	r3

	return ERR_NONE;
    2280:	2300      	movs	r3, #0
}
    2282:	4618      	mov	r0, r3
    2284:	3708      	adds	r7, #8
    2286:	46bd      	mov	sp, r7
    2288:	bd80      	pop	{r7, pc}
    228a:	bf00      	nop
    228c:	00010774 	.word	0x00010774
    2290:	00003b01 	.word	0x00003b01
    2294:	00005fed 	.word	0x00005fed

00002298 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    2298:	b580      	push	{r7, lr}
    229a:	b086      	sub	sp, #24
    229c:	af00      	add	r7, sp, #0
    229e:	6078      	str	r0, [r7, #4]
    22a0:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	2b00      	cmp	r3, #0
    22a6:	bf14      	ite	ne
    22a8:	2301      	movne	r3, #1
    22aa:	2300      	moveq	r3, #0
    22ac:	b2db      	uxtb	r3, r3
    22ae:	f44f 7203 	mov.w	r2, #524	; 0x20c
    22b2:	4915      	ldr	r1, [pc, #84]	; (2308 <calendar_set_time+0x70>)
    22b4:	4618      	mov	r0, r3
    22b6:	4b15      	ldr	r3, [pc, #84]	; (230c <calendar_set_time+0x74>)
    22b8:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	4618      	mov	r0, r3
    22be:	4b14      	ldr	r3, [pc, #80]	; (2310 <calendar_set_time+0x78>)
    22c0:	4798      	blx	r3
    22c2:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    22c4:	f107 0308 	add.w	r3, r7, #8
    22c8:	461a      	mov	r2, r3
    22ca:	6979      	ldr	r1, [r7, #20]
    22cc:	6878      	ldr	r0, [r7, #4]
    22ce:	4b11      	ldr	r3, [pc, #68]	; (2314 <calendar_set_time+0x7c>)
    22d0:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    22d2:	683b      	ldr	r3, [r7, #0]
    22d4:	781b      	ldrb	r3, [r3, #0]
    22d6:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    22d8:	683b      	ldr	r3, [r7, #0]
    22da:	785b      	ldrb	r3, [r3, #1]
    22dc:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    22de:	683b      	ldr	r3, [r7, #0]
    22e0:	789b      	ldrb	r3, [r3, #2]
    22e2:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    22e4:	f107 0308 	add.w	r3, r7, #8
    22e8:	4619      	mov	r1, r3
    22ea:	6878      	ldr	r0, [r7, #4]
    22ec:	4b0a      	ldr	r3, [pc, #40]	; (2318 <calendar_set_time+0x80>)
    22ee:	4798      	blx	r3
    22f0:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    22f2:	687b      	ldr	r3, [r7, #4]
    22f4:	6939      	ldr	r1, [r7, #16]
    22f6:	4618      	mov	r0, r3
    22f8:	4b08      	ldr	r3, [pc, #32]	; (231c <calendar_set_time+0x84>)
    22fa:	4798      	blx	r3

	return ERR_NONE;
    22fc:	2300      	movs	r3, #0
}
    22fe:	4618      	mov	r0, r3
    2300:	3718      	adds	r7, #24
    2302:	46bd      	mov	sp, r7
    2304:	bd80      	pop	{r7, pc}
    2306:	bf00      	nop
    2308:	00010774 	.word	0x00010774
    230c:	00003b01 	.word	0x00003b01
    2310:	00006089 	.word	0x00006089
    2314:	00001fd1 	.word	0x00001fd1
    2318:	000020dd 	.word	0x000020dd
    231c:	00006039 	.word	0x00006039

00002320 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    2320:	b580      	push	{r7, lr}
    2322:	b086      	sub	sp, #24
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    232a:	687b      	ldr	r3, [r7, #4]
    232c:	2b00      	cmp	r3, #0
    232e:	bf14      	ite	ne
    2330:	2301      	movne	r3, #1
    2332:	2300      	moveq	r3, #0
    2334:	b2db      	uxtb	r3, r3
    2336:	f44f 7209 	mov.w	r2, #548	; 0x224
    233a:	4915      	ldr	r1, [pc, #84]	; (2390 <calendar_set_date+0x70>)
    233c:	4618      	mov	r0, r3
    233e:	4b15      	ldr	r3, [pc, #84]	; (2394 <calendar_set_date+0x74>)
    2340:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    2342:	687b      	ldr	r3, [r7, #4]
    2344:	4618      	mov	r0, r3
    2346:	4b14      	ldr	r3, [pc, #80]	; (2398 <calendar_set_date+0x78>)
    2348:	4798      	blx	r3
    234a:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    234c:	f107 0308 	add.w	r3, r7, #8
    2350:	461a      	mov	r2, r3
    2352:	6979      	ldr	r1, [r7, #20]
    2354:	6878      	ldr	r0, [r7, #4]
    2356:	4b11      	ldr	r3, [pc, #68]	; (239c <calendar_set_date+0x7c>)
    2358:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    235a:	683b      	ldr	r3, [r7, #0]
    235c:	781b      	ldrb	r3, [r3, #0]
    235e:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    2360:	683b      	ldr	r3, [r7, #0]
    2362:	785b      	ldrb	r3, [r3, #1]
    2364:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    2366:	683b      	ldr	r3, [r7, #0]
    2368:	885b      	ldrh	r3, [r3, #2]
    236a:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    236c:	f107 0308 	add.w	r3, r7, #8
    2370:	4619      	mov	r1, r3
    2372:	6878      	ldr	r0, [r7, #4]
    2374:	4b0a      	ldr	r3, [pc, #40]	; (23a0 <calendar_set_date+0x80>)
    2376:	4798      	blx	r3
    2378:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	6939      	ldr	r1, [r7, #16]
    237e:	4618      	mov	r0, r3
    2380:	4b08      	ldr	r3, [pc, #32]	; (23a4 <calendar_set_date+0x84>)
    2382:	4798      	blx	r3

	return ERR_NONE;
    2384:	2300      	movs	r3, #0
}
    2386:	4618      	mov	r0, r3
    2388:	3718      	adds	r7, #24
    238a:	46bd      	mov	sp, r7
    238c:	bd80      	pop	{r7, pc}
    238e:	bf00      	nop
    2390:	00010774 	.word	0x00010774
    2394:	00003b01 	.word	0x00003b01
    2398:	00006089 	.word	0x00006089
    239c:	00001fd1 	.word	0x00001fd1
    23a0:	000020dd 	.word	0x000020dd
    23a4:	00006039 	.word	0x00006039

000023a8 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    23a8:	b580      	push	{r7, lr}
    23aa:	b084      	sub	sp, #16
    23ac:	af00      	add	r7, sp, #0
    23ae:	6078      	str	r0, [r7, #4]
    23b0:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    23b2:	687b      	ldr	r3, [r7, #4]
    23b4:	2b00      	cmp	r3, #0
    23b6:	bf14      	ite	ne
    23b8:	2301      	movne	r3, #1
    23ba:	2300      	moveq	r3, #0
    23bc:	b2db      	uxtb	r3, r3
    23be:	f240 223b 	movw	r2, #571	; 0x23b
    23c2:	4909      	ldr	r1, [pc, #36]	; (23e8 <calendar_get_date_time+0x40>)
    23c4:	4618      	mov	r0, r3
    23c6:	4b09      	ldr	r3, [pc, #36]	; (23ec <calendar_get_date_time+0x44>)
    23c8:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    23ca:	687b      	ldr	r3, [r7, #4]
    23cc:	4618      	mov	r0, r3
    23ce:	4b08      	ldr	r3, [pc, #32]	; (23f0 <calendar_get_date_time+0x48>)
    23d0:	4798      	blx	r3
    23d2:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    23d4:	683a      	ldr	r2, [r7, #0]
    23d6:	68f9      	ldr	r1, [r7, #12]
    23d8:	6878      	ldr	r0, [r7, #4]
    23da:	4b06      	ldr	r3, [pc, #24]	; (23f4 <calendar_get_date_time+0x4c>)
    23dc:	4798      	blx	r3

	return ERR_NONE;
    23de:	2300      	movs	r3, #0
}
    23e0:	4618      	mov	r0, r3
    23e2:	3710      	adds	r7, #16
    23e4:	46bd      	mov	sp, r7
    23e6:	bd80      	pop	{r7, pc}
    23e8:	00010774 	.word	0x00010774
    23ec:	00003b01 	.word	0x00003b01
    23f0:	00006089 	.word	0x00006089
    23f4:	00001fd1 	.word	0x00001fd1

000023f8 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    23f8:	b580      	push	{r7, lr}
    23fa:	b084      	sub	sp, #16
    23fc:	af00      	add	r7, sp, #0
    23fe:	6078      	str	r0, [r7, #4]
    2400:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    2402:	687b      	ldr	r3, [r7, #4]
    2404:	2b00      	cmp	r3, #0
    2406:	d004      	beq.n	2412 <can_async_init+0x1a>
    2408:	683b      	ldr	r3, [r7, #0]
    240a:	2b00      	cmp	r3, #0
    240c:	d001      	beq.n	2412 <can_async_init+0x1a>
    240e:	2301      	movs	r3, #1
    2410:	e000      	b.n	2414 <can_async_init+0x1c>
    2412:	2300      	movs	r3, #0
    2414:	f003 0301 	and.w	r3, r3, #1
    2418:	b2db      	uxtb	r3, r3
    241a:	2241      	movs	r2, #65	; 0x41
    241c:	490e      	ldr	r1, [pc, #56]	; (2458 <can_async_init+0x60>)
    241e:	4618      	mov	r0, r3
    2420:	4b0e      	ldr	r3, [pc, #56]	; (245c <can_async_init+0x64>)
    2422:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2424:	687b      	ldr	r3, [r7, #4]
    2426:	6839      	ldr	r1, [r7, #0]
    2428:	4618      	mov	r0, r3
    242a:	4b0d      	ldr	r3, [pc, #52]	; (2460 <can_async_init+0x68>)
    242c:	4798      	blx	r3
    242e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2430:	68fb      	ldr	r3, [r7, #12]
    2432:	2b00      	cmp	r3, #0
    2434:	d001      	beq.n	243a <can_async_init+0x42>
		return rc;
    2436:	68fb      	ldr	r3, [r7, #12]
    2438:	e009      	b.n	244e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    243a:	687b      	ldr	r3, [r7, #4]
    243c:	4a09      	ldr	r2, [pc, #36]	; (2464 <can_async_init+0x6c>)
    243e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2440:	687b      	ldr	r3, [r7, #4]
    2442:	4a09      	ldr	r2, [pc, #36]	; (2468 <can_async_init+0x70>)
    2444:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2446:	687b      	ldr	r3, [r7, #4]
    2448:	4a08      	ldr	r2, [pc, #32]	; (246c <can_async_init+0x74>)
    244a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    244c:	2300      	movs	r3, #0
}
    244e:	4618      	mov	r0, r3
    2450:	3710      	adds	r7, #16
    2452:	46bd      	mov	sp, r7
    2454:	bd80      	pop	{r7, pc}
    2456:	bf00      	nop
    2458:	00010790 	.word	0x00010790
    245c:	00003b01 	.word	0x00003b01
    2460:	0000405d 	.word	0x0000405d
    2464:	00002471 	.word	0x00002471
    2468:	00002495 	.word	0x00002495
    246c:	000024b9 	.word	0x000024b9

00002470 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2470:	b580      	push	{r7, lr}
    2472:	b084      	sub	sp, #16
    2474:	af00      	add	r7, sp, #0
    2476:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2478:	687b      	ldr	r3, [r7, #4]
    247a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    247c:	68fb      	ldr	r3, [r7, #12]
    247e:	69db      	ldr	r3, [r3, #28]
    2480:	2b00      	cmp	r3, #0
    2482:	d003      	beq.n	248c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2484:	68fb      	ldr	r3, [r7, #12]
    2486:	69db      	ldr	r3, [r3, #28]
    2488:	68f8      	ldr	r0, [r7, #12]
    248a:	4798      	blx	r3
	}
}
    248c:	bf00      	nop
    248e:	3710      	adds	r7, #16
    2490:	46bd      	mov	sp, r7
    2492:	bd80      	pop	{r7, pc}

00002494 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2494:	b580      	push	{r7, lr}
    2496:	b084      	sub	sp, #16
    2498:	af00      	add	r7, sp, #0
    249a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    249c:	687b      	ldr	r3, [r7, #4]
    249e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    24a0:	68fb      	ldr	r3, [r7, #12]
    24a2:	6a1b      	ldr	r3, [r3, #32]
    24a4:	2b00      	cmp	r3, #0
    24a6:	d003      	beq.n	24b0 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    24a8:	68fb      	ldr	r3, [r7, #12]
    24aa:	6a1b      	ldr	r3, [r3, #32]
    24ac:	68f8      	ldr	r0, [r7, #12]
    24ae:	4798      	blx	r3
	}
}
    24b0:	bf00      	nop
    24b2:	3710      	adds	r7, #16
    24b4:	46bd      	mov	sp, r7
    24b6:	bd80      	pop	{r7, pc}

000024b8 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    24b8:	b580      	push	{r7, lr}
    24ba:	b084      	sub	sp, #16
    24bc:	af00      	add	r7, sp, #0
    24be:	6078      	str	r0, [r7, #4]
    24c0:	460b      	mov	r3, r1
    24c2:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    24c4:	687b      	ldr	r3, [r7, #4]
    24c6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    24c8:	68fb      	ldr	r3, [r7, #12]
    24ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    24cc:	2b00      	cmp	r3, #0
    24ce:	d005      	beq.n	24dc <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    24d0:	68fb      	ldr	r3, [r7, #12]
    24d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    24d4:	78fa      	ldrb	r2, [r7, #3]
    24d6:	4611      	mov	r1, r2
    24d8:	68f8      	ldr	r0, [r7, #12]
    24da:	4798      	blx	r3
	}
}
    24dc:	bf00      	nop
    24de:	3710      	adds	r7, #16
    24e0:	46bd      	mov	sp, r7
    24e2:	bd80      	pop	{r7, pc}

000024e4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    24e4:	b580      	push	{r7, lr}
    24e6:	b082      	sub	sp, #8
    24e8:	af00      	add	r7, sp, #0
    24ea:	6078      	str	r0, [r7, #4]
    24ec:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	2b00      	cmp	r3, #0
    24f2:	d004      	beq.n	24fe <crc_sync_init+0x1a>
    24f4:	683b      	ldr	r3, [r7, #0]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d001      	beq.n	24fe <crc_sync_init+0x1a>
    24fa:	2301      	movs	r3, #1
    24fc:	e000      	b.n	2500 <crc_sync_init+0x1c>
    24fe:	2300      	movs	r3, #0
    2500:	f003 0301 	and.w	r3, r3, #1
    2504:	b2db      	uxtb	r3, r3
    2506:	222b      	movs	r2, #43	; 0x2b
    2508:	4906      	ldr	r1, [pc, #24]	; (2524 <crc_sync_init+0x40>)
    250a:	4618      	mov	r0, r3
    250c:	4b06      	ldr	r3, [pc, #24]	; (2528 <crc_sync_init+0x44>)
    250e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	6839      	ldr	r1, [r7, #0]
    2514:	4618      	mov	r0, r3
    2516:	4b05      	ldr	r3, [pc, #20]	; (252c <crc_sync_init+0x48>)
    2518:	4798      	blx	r3
    251a:	4603      	mov	r3, r0
}
    251c:	4618      	mov	r0, r3
    251e:	3708      	adds	r7, #8
    2520:	46bd      	mov	sp, r7
    2522:	bd80      	pop	{r7, pc}
    2524:	000107ac 	.word	0x000107ac
    2528:	00003b01 	.word	0x00003b01
    252c:	00004761 	.word	0x00004761

00002530 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2530:	b590      	push	{r4, r7, lr}
    2532:	b083      	sub	sp, #12
    2534:	af00      	add	r7, sp, #0
    2536:	4603      	mov	r3, r0
    2538:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    253a:	4b07      	ldr	r3, [pc, #28]	; (2558 <delay_us+0x28>)
    253c:	681c      	ldr	r4, [r3, #0]
    253e:	88fb      	ldrh	r3, [r7, #6]
    2540:	4618      	mov	r0, r3
    2542:	4b06      	ldr	r3, [pc, #24]	; (255c <delay_us+0x2c>)
    2544:	4798      	blx	r3
    2546:	4603      	mov	r3, r0
    2548:	4619      	mov	r1, r3
    254a:	4620      	mov	r0, r4
    254c:	4b04      	ldr	r3, [pc, #16]	; (2560 <delay_us+0x30>)
    254e:	4798      	blx	r3
}
    2550:	bf00      	nop
    2552:	370c      	adds	r7, #12
    2554:	46bd      	mov	sp, r7
    2556:	bd90      	pop	{r4, r7, pc}
    2558:	2000203c 	.word	0x2000203c
    255c:	000044b1 	.word	0x000044b1
    2560:	00004649 	.word	0x00004649

00002564 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2564:	b590      	push	{r4, r7, lr}
    2566:	b083      	sub	sp, #12
    2568:	af00      	add	r7, sp, #0
    256a:	4603      	mov	r3, r0
    256c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    256e:	4b07      	ldr	r3, [pc, #28]	; (258c <delay_ms+0x28>)
    2570:	681c      	ldr	r4, [r3, #0]
    2572:	88fb      	ldrh	r3, [r7, #6]
    2574:	4618      	mov	r0, r3
    2576:	4b06      	ldr	r3, [pc, #24]	; (2590 <delay_ms+0x2c>)
    2578:	4798      	blx	r3
    257a:	4603      	mov	r3, r0
    257c:	4619      	mov	r1, r3
    257e:	4620      	mov	r0, r4
    2580:	4b04      	ldr	r3, [pc, #16]	; (2594 <delay_ms+0x30>)
    2582:	4798      	blx	r3
}
    2584:	bf00      	nop
    2586:	370c      	adds	r7, #12
    2588:	46bd      	mov	sp, r7
    258a:	bd90      	pop	{r4, r7, pc}
    258c:	2000203c 	.word	0x2000203c
    2590:	0000461d 	.word	0x0000461d
    2594:	00004649 	.word	0x00004649

00002598 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2598:	b580      	push	{r7, lr}
    259a:	af00      	add	r7, sp, #0
	return _event_system_init();
    259c:	4b02      	ldr	r3, [pc, #8]	; (25a8 <event_system_init+0x10>)
    259e:	4798      	blx	r3
    25a0:	4603      	mov	r3, r0
}
    25a2:	4618      	mov	r0, r3
    25a4:	bd80      	pop	{r7, pc}
    25a6:	bf00      	nop
    25a8:	00004f1d 	.word	0x00004f1d

000025ac <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    25ac:	b580      	push	{r7, lr}
    25ae:	b082      	sub	sp, #8
    25b0:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    25b2:	2300      	movs	r3, #0
    25b4:	80fb      	strh	r3, [r7, #6]
    25b6:	e00e      	b.n	25d6 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    25b8:	88fb      	ldrh	r3, [r7, #6]
    25ba:	4a0c      	ldr	r2, [pc, #48]	; (25ec <ext_irq_init+0x40>)
    25bc:	00db      	lsls	r3, r3, #3
    25be:	4413      	add	r3, r2
    25c0:	f04f 32ff 	mov.w	r2, #4294967295
    25c4:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    25c6:	88fb      	ldrh	r3, [r7, #6]
    25c8:	4a08      	ldr	r2, [pc, #32]	; (25ec <ext_irq_init+0x40>)
    25ca:	2100      	movs	r1, #0
    25cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    25d0:	88fb      	ldrh	r3, [r7, #6]
    25d2:	3301      	adds	r3, #1
    25d4:	80fb      	strh	r3, [r7, #6]
    25d6:	88fb      	ldrh	r3, [r7, #6]
    25d8:	2b08      	cmp	r3, #8
    25da:	d9ed      	bls.n	25b8 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    25dc:	4804      	ldr	r0, [pc, #16]	; (25f0 <ext_irq_init+0x44>)
    25de:	4b05      	ldr	r3, [pc, #20]	; (25f4 <ext_irq_init+0x48>)
    25e0:	4798      	blx	r3
    25e2:	4603      	mov	r3, r0
}
    25e4:	4618      	mov	r0, r3
    25e6:	3708      	adds	r7, #8
    25e8:	46bd      	mov	sp, r7
    25ea:	bd80      	pop	{r7, pc}
    25ec:	20002040 	.word	0x20002040
    25f0:	00002751 	.word	0x00002751
    25f4:	00004aa1 	.word	0x00004aa1

000025f8 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    25f8:	b580      	push	{r7, lr}
    25fa:	b086      	sub	sp, #24
    25fc:	af00      	add	r7, sp, #0
    25fe:	6078      	str	r0, [r7, #4]
    2600:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2602:	2300      	movs	r3, #0
    2604:	75fb      	strb	r3, [r7, #23]
    2606:	2300      	movs	r3, #0
    2608:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    260a:	2300      	movs	r3, #0
    260c:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    260e:	e012      	b.n	2636 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2610:	7dfb      	ldrb	r3, [r7, #23]
    2612:	4a4d      	ldr	r2, [pc, #308]	; (2748 <ext_irq_register+0x150>)
    2614:	00db      	lsls	r3, r3, #3
    2616:	4413      	add	r3, r2
    2618:	685a      	ldr	r2, [r3, #4]
    261a:	687b      	ldr	r3, [r7, #4]
    261c:	429a      	cmp	r2, r3
    261e:	d107      	bne.n	2630 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2620:	7dfb      	ldrb	r3, [r7, #23]
    2622:	4949      	ldr	r1, [pc, #292]	; (2748 <ext_irq_register+0x150>)
    2624:	683a      	ldr	r2, [r7, #0]
    2626:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    262a:	2301      	movs	r3, #1
    262c:	757b      	strb	r3, [r7, #21]
			break;
    262e:	e005      	b.n	263c <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2630:	7dfb      	ldrb	r3, [r7, #23]
    2632:	3301      	adds	r3, #1
    2634:	75fb      	strb	r3, [r7, #23]
    2636:	7dfb      	ldrb	r3, [r7, #23]
    2638:	2b08      	cmp	r3, #8
    263a:	d9e9      	bls.n	2610 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    263c:	683b      	ldr	r3, [r7, #0]
    263e:	2b00      	cmp	r3, #0
    2640:	d10e      	bne.n	2660 <ext_irq_register+0x68>
		if (!found) {
    2642:	7d7b      	ldrb	r3, [r7, #21]
    2644:	f083 0301 	eor.w	r3, r3, #1
    2648:	b2db      	uxtb	r3, r3
    264a:	2b00      	cmp	r3, #0
    264c:	d002      	beq.n	2654 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    264e:	f06f 030c 	mvn.w	r3, #12
    2652:	e074      	b.n	273e <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2654:	2100      	movs	r1, #0
    2656:	6878      	ldr	r0, [r7, #4]
    2658:	4b3c      	ldr	r3, [pc, #240]	; (274c <ext_irq_register+0x154>)
    265a:	4798      	blx	r3
    265c:	4603      	mov	r3, r0
    265e:	e06e      	b.n	273e <ext_irq_register+0x146>
	}

	if (!found) {
    2660:	7d7b      	ldrb	r3, [r7, #21]
    2662:	f083 0301 	eor.w	r3, r3, #1
    2666:	b2db      	uxtb	r3, r3
    2668:	2b00      	cmp	r3, #0
    266a:	d05a      	beq.n	2722 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    266c:	2300      	movs	r3, #0
    266e:	75fb      	strb	r3, [r7, #23]
    2670:	e016      	b.n	26a0 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2672:	7dfb      	ldrb	r3, [r7, #23]
    2674:	4a34      	ldr	r2, [pc, #208]	; (2748 <ext_irq_register+0x150>)
    2676:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    267a:	2b00      	cmp	r3, #0
    267c:	d10d      	bne.n	269a <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    267e:	7dfb      	ldrb	r3, [r7, #23]
    2680:	4931      	ldr	r1, [pc, #196]	; (2748 <ext_irq_register+0x150>)
    2682:	683a      	ldr	r2, [r7, #0]
    2684:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2688:	7dfb      	ldrb	r3, [r7, #23]
    268a:	4a2f      	ldr	r2, [pc, #188]	; (2748 <ext_irq_register+0x150>)
    268c:	00db      	lsls	r3, r3, #3
    268e:	4413      	add	r3, r2
    2690:	687a      	ldr	r2, [r7, #4]
    2692:	605a      	str	r2, [r3, #4]
				found           = true;
    2694:	2301      	movs	r3, #1
    2696:	757b      	strb	r3, [r7, #21]
				break;
    2698:	e005      	b.n	26a6 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    269a:	7dfb      	ldrb	r3, [r7, #23]
    269c:	3301      	adds	r3, #1
    269e:	75fb      	strb	r3, [r7, #23]
    26a0:	7dfb      	ldrb	r3, [r7, #23]
    26a2:	2b08      	cmp	r3, #8
    26a4:	d9e5      	bls.n	2672 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    26a6:	e036      	b.n	2716 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    26a8:	7dfb      	ldrb	r3, [r7, #23]
    26aa:	4a27      	ldr	r2, [pc, #156]	; (2748 <ext_irq_register+0x150>)
    26ac:	00db      	lsls	r3, r3, #3
    26ae:	4413      	add	r3, r2
    26b0:	685a      	ldr	r2, [r3, #4]
    26b2:	7dbb      	ldrb	r3, [r7, #22]
    26b4:	4924      	ldr	r1, [pc, #144]	; (2748 <ext_irq_register+0x150>)
    26b6:	00db      	lsls	r3, r3, #3
    26b8:	440b      	add	r3, r1
    26ba:	685b      	ldr	r3, [r3, #4]
    26bc:	429a      	cmp	r2, r3
    26be:	d227      	bcs.n	2710 <ext_irq_register+0x118>
    26c0:	7dbb      	ldrb	r3, [r7, #22]
    26c2:	4a21      	ldr	r2, [pc, #132]	; (2748 <ext_irq_register+0x150>)
    26c4:	00db      	lsls	r3, r3, #3
    26c6:	4413      	add	r3, r2
    26c8:	685b      	ldr	r3, [r3, #4]
    26ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    26ce:	d01f      	beq.n	2710 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    26d0:	7dbb      	ldrb	r3, [r7, #22]
    26d2:	491d      	ldr	r1, [pc, #116]	; (2748 <ext_irq_register+0x150>)
    26d4:	f107 020c 	add.w	r2, r7, #12
    26d8:	00db      	lsls	r3, r3, #3
    26da:	440b      	add	r3, r1
    26dc:	e893 0003 	ldmia.w	r3, {r0, r1}
    26e0:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    26e4:	7dbb      	ldrb	r3, [r7, #22]
    26e6:	7dfa      	ldrb	r2, [r7, #23]
    26e8:	4817      	ldr	r0, [pc, #92]	; (2748 <ext_irq_register+0x150>)
    26ea:	4917      	ldr	r1, [pc, #92]	; (2748 <ext_irq_register+0x150>)
    26ec:	00db      	lsls	r3, r3, #3
    26ee:	4403      	add	r3, r0
    26f0:	00d2      	lsls	r2, r2, #3
    26f2:	440a      	add	r2, r1
    26f4:	e892 0003 	ldmia.w	r2, {r0, r1}
    26f8:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    26fc:	7dfb      	ldrb	r3, [r7, #23]
    26fe:	4a12      	ldr	r2, [pc, #72]	; (2748 <ext_irq_register+0x150>)
    2700:	00db      	lsls	r3, r3, #3
    2702:	4413      	add	r3, r2
    2704:	f107 020c 	add.w	r2, r7, #12
    2708:	e892 0003 	ldmia.w	r2, {r0, r1}
    270c:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2710:	7dbb      	ldrb	r3, [r7, #22]
    2712:	3301      	adds	r3, #1
    2714:	75bb      	strb	r3, [r7, #22]
    2716:	7dbb      	ldrb	r3, [r7, #22]
    2718:	2b08      	cmp	r3, #8
    271a:	d802      	bhi.n	2722 <ext_irq_register+0x12a>
    271c:	7dfb      	ldrb	r3, [r7, #23]
    271e:	2b08      	cmp	r3, #8
    2720:	d9c2      	bls.n	26a8 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2722:	7d7b      	ldrb	r3, [r7, #21]
    2724:	f083 0301 	eor.w	r3, r3, #1
    2728:	b2db      	uxtb	r3, r3
    272a:	2b00      	cmp	r3, #0
    272c:	d002      	beq.n	2734 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    272e:	f06f 030c 	mvn.w	r3, #12
    2732:	e004      	b.n	273e <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2734:	2101      	movs	r1, #1
    2736:	6878      	ldr	r0, [r7, #4]
    2738:	4b04      	ldr	r3, [pc, #16]	; (274c <ext_irq_register+0x154>)
    273a:	4798      	blx	r3
    273c:	4603      	mov	r3, r0
}
    273e:	4618      	mov	r0, r3
    2740:	3718      	adds	r7, #24
    2742:	46bd      	mov	sp, r7
    2744:	bd80      	pop	{r7, pc}
    2746:	bf00      	nop
    2748:	20002040 	.word	0x20002040
    274c:	00004c35 	.word	0x00004c35

00002750 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2750:	b580      	push	{r7, lr}
    2752:	b084      	sub	sp, #16
    2754:	af00      	add	r7, sp, #0
    2756:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2758:	2300      	movs	r3, #0
    275a:	73fb      	strb	r3, [r7, #15]
    275c:	2309      	movs	r3, #9
    275e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2760:	e02a      	b.n	27b8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2762:	7bba      	ldrb	r2, [r7, #14]
    2764:	7bfb      	ldrb	r3, [r7, #15]
    2766:	4413      	add	r3, r2
    2768:	105b      	asrs	r3, r3, #1
    276a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    276c:	7b7b      	ldrb	r3, [r7, #13]
    276e:	2b08      	cmp	r3, #8
    2770:	d827      	bhi.n	27c2 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2772:	7b7b      	ldrb	r3, [r7, #13]
    2774:	4a16      	ldr	r2, [pc, #88]	; (27d0 <process_ext_irq+0x80>)
    2776:	00db      	lsls	r3, r3, #3
    2778:	4413      	add	r3, r2
    277a:	685a      	ldr	r2, [r3, #4]
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	429a      	cmp	r2, r3
    2780:	d10b      	bne.n	279a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2782:	7b7b      	ldrb	r3, [r7, #13]
    2784:	4a12      	ldr	r2, [pc, #72]	; (27d0 <process_ext_irq+0x80>)
    2786:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    278a:	2b00      	cmp	r3, #0
    278c:	d01b      	beq.n	27c6 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    278e:	7b7b      	ldrb	r3, [r7, #13]
    2790:	4a0f      	ldr	r2, [pc, #60]	; (27d0 <process_ext_irq+0x80>)
    2792:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2796:	4798      	blx	r3
			}
			return;
    2798:	e015      	b.n	27c6 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    279a:	7b7b      	ldrb	r3, [r7, #13]
    279c:	4a0c      	ldr	r2, [pc, #48]	; (27d0 <process_ext_irq+0x80>)
    279e:	00db      	lsls	r3, r3, #3
    27a0:	4413      	add	r3, r2
    27a2:	685a      	ldr	r2, [r3, #4]
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	429a      	cmp	r2, r3
    27a8:	d203      	bcs.n	27b2 <process_ext_irq+0x62>
			lower = middle + 1;
    27aa:	7b7b      	ldrb	r3, [r7, #13]
    27ac:	3301      	adds	r3, #1
    27ae:	73fb      	strb	r3, [r7, #15]
    27b0:	e002      	b.n	27b8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    27b2:	7b7b      	ldrb	r3, [r7, #13]
    27b4:	3b01      	subs	r3, #1
    27b6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    27b8:	7bba      	ldrb	r2, [r7, #14]
    27ba:	7bfb      	ldrb	r3, [r7, #15]
    27bc:	429a      	cmp	r2, r3
    27be:	d2d0      	bcs.n	2762 <process_ext_irq+0x12>
    27c0:	e002      	b.n	27c8 <process_ext_irq+0x78>
			return;
    27c2:	bf00      	nop
    27c4:	e000      	b.n	27c8 <process_ext_irq+0x78>
			return;
    27c6:	bf00      	nop
		}
	}
}
    27c8:	3710      	adds	r7, #16
    27ca:	46bd      	mov	sp, r7
    27cc:	bd80      	pop	{r7, pc}
    27ce:	bf00      	nop
    27d0:	20002040 	.word	0x20002040

000027d4 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    27d4:	b580      	push	{r7, lr}
    27d6:	b08a      	sub	sp, #40	; 0x28
    27d8:	af00      	add	r7, sp, #0
    27da:	60f8      	str	r0, [r7, #12]
    27dc:	60b9      	str	r1, [r7, #8]
    27de:	4613      	mov	r3, r2
    27e0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    27e2:	68fb      	ldr	r3, [r7, #12]
    27e4:	3b14      	subs	r3, #20
    27e6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    27e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    27ea:	8b9b      	ldrh	r3, [r3, #28]
    27ec:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    27ee:	88fb      	ldrh	r3, [r7, #6]
    27f0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    27f2:	f248 0301 	movw	r3, #32769	; 0x8001
    27f6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    27f8:	68bb      	ldr	r3, [r7, #8]
    27fa:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    27fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    27fe:	f107 0214 	add.w	r2, r7, #20
    2802:	4611      	mov	r1, r2
    2804:	4618      	mov	r0, r3
    2806:	4b06      	ldr	r3, [pc, #24]	; (2820 <i2c_m_sync_read+0x4c>)
    2808:	4798      	blx	r3
    280a:	6238      	str	r0, [r7, #32]

	if (ret) {
    280c:	6a3b      	ldr	r3, [r7, #32]
    280e:	2b00      	cmp	r3, #0
    2810:	d001      	beq.n	2816 <i2c_m_sync_read+0x42>
		return ret;
    2812:	6a3b      	ldr	r3, [r7, #32]
    2814:	e000      	b.n	2818 <i2c_m_sync_read+0x44>
	}

	return n;
    2816:	88fb      	ldrh	r3, [r7, #6]
}
    2818:	4618      	mov	r0, r3
    281a:	3728      	adds	r7, #40	; 0x28
    281c:	46bd      	mov	sp, r7
    281e:	bd80      	pop	{r7, pc}
    2820:	00006cd9 	.word	0x00006cd9

00002824 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2824:	b580      	push	{r7, lr}
    2826:	b08a      	sub	sp, #40	; 0x28
    2828:	af00      	add	r7, sp, #0
    282a:	60f8      	str	r0, [r7, #12]
    282c:	60b9      	str	r1, [r7, #8]
    282e:	4613      	mov	r3, r2
    2830:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2832:	68fb      	ldr	r3, [r7, #12]
    2834:	3b14      	subs	r3, #20
    2836:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    283a:	8b9b      	ldrh	r3, [r3, #28]
    283c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    283e:	88fb      	ldrh	r3, [r7, #6]
    2840:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2846:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2848:	68bb      	ldr	r3, [r7, #8]
    284a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    284e:	f107 0214 	add.w	r2, r7, #20
    2852:	4611      	mov	r1, r2
    2854:	4618      	mov	r0, r3
    2856:	4b06      	ldr	r3, [pc, #24]	; (2870 <i2c_m_sync_write+0x4c>)
    2858:	4798      	blx	r3
    285a:	6238      	str	r0, [r7, #32]

	if (ret) {
    285c:	6a3b      	ldr	r3, [r7, #32]
    285e:	2b00      	cmp	r3, #0
    2860:	d001      	beq.n	2866 <i2c_m_sync_write+0x42>
		return ret;
    2862:	6a3b      	ldr	r3, [r7, #32]
    2864:	e000      	b.n	2868 <i2c_m_sync_write+0x44>
	}

	return n;
    2866:	88fb      	ldrh	r3, [r7, #6]
}
    2868:	4618      	mov	r0, r3
    286a:	3728      	adds	r7, #40	; 0x28
    286c:	46bd      	mov	sp, r7
    286e:	bd80      	pop	{r7, pc}
    2870:	00006cd9 	.word	0x00006cd9

00002874 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2874:	b580      	push	{r7, lr}
    2876:	b084      	sub	sp, #16
    2878:	af00      	add	r7, sp, #0
    287a:	6078      	str	r0, [r7, #4]
    287c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    287e:	687b      	ldr	r3, [r7, #4]
    2880:	2b00      	cmp	r3, #0
    2882:	bf14      	ite	ne
    2884:	2301      	movne	r3, #1
    2886:	2300      	moveq	r3, #0
    2888:	b2db      	uxtb	r3, r3
    288a:	225e      	movs	r2, #94	; 0x5e
    288c:	490c      	ldr	r1, [pc, #48]	; (28c0 <i2c_m_sync_init+0x4c>)
    288e:	4618      	mov	r0, r3
    2890:	4b0c      	ldr	r3, [pc, #48]	; (28c4 <i2c_m_sync_init+0x50>)
    2892:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	6839      	ldr	r1, [r7, #0]
    2898:	4618      	mov	r0, r3
    289a:	4b0b      	ldr	r3, [pc, #44]	; (28c8 <i2c_m_sync_init+0x54>)
    289c:	4798      	blx	r3
    289e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    28a0:	68fb      	ldr	r3, [r7, #12]
    28a2:	2b00      	cmp	r3, #0
    28a4:	d001      	beq.n	28aa <i2c_m_sync_init+0x36>
		return init_status;
    28a6:	68fb      	ldr	r3, [r7, #12]
    28a8:	e006      	b.n	28b8 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	4a07      	ldr	r2, [pc, #28]	; (28cc <i2c_m_sync_init+0x58>)
    28ae:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	4a07      	ldr	r2, [pc, #28]	; (28d0 <i2c_m_sync_init+0x5c>)
    28b4:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    28b6:	2300      	movs	r3, #0
}
    28b8:	4618      	mov	r0, r3
    28ba:	3710      	adds	r7, #16
    28bc:	46bd      	mov	sp, r7
    28be:	bd80      	pop	{r7, pc}
    28c0:	000107c8 	.word	0x000107c8
    28c4:	00003b01 	.word	0x00003b01
    28c8:	00006a79 	.word	0x00006a79
    28cc:	000027d5 	.word	0x000027d5
    28d0:	00002825 	.word	0x00002825

000028d4 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    28d4:	b580      	push	{r7, lr}
    28d6:	b082      	sub	sp, #8
    28d8:	af00      	add	r7, sp, #0
    28da:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    28dc:	687b      	ldr	r3, [r7, #4]
    28de:	4618      	mov	r0, r3
    28e0:	4b03      	ldr	r3, [pc, #12]	; (28f0 <i2c_m_sync_enable+0x1c>)
    28e2:	4798      	blx	r3
    28e4:	4603      	mov	r3, r0
}
    28e6:	4618      	mov	r0, r3
    28e8:	3708      	adds	r7, #8
    28ea:	46bd      	mov	sp, r7
    28ec:	bd80      	pop	{r7, pc}
    28ee:	bf00      	nop
    28f0:	00006ac1 	.word	0x00006ac1

000028f4 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    28f4:	b580      	push	{r7, lr}
    28f6:	b082      	sub	sp, #8
    28f8:	af00      	add	r7, sp, #0
    28fa:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    28fc:	687b      	ldr	r3, [r7, #4]
    28fe:	4618      	mov	r0, r3
    2900:	4b03      	ldr	r3, [pc, #12]	; (2910 <i2c_m_sync_disable+0x1c>)
    2902:	4798      	blx	r3
    2904:	4603      	mov	r3, r0
}
    2906:	4618      	mov	r0, r3
    2908:	3708      	adds	r7, #8
    290a:	46bd      	mov	sp, r7
    290c:	bd80      	pop	{r7, pc}
    290e:	bf00      	nop
    2910:	00006b01 	.word	0x00006b01

00002914 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2914:	b480      	push	{r7}
    2916:	b085      	sub	sp, #20
    2918:	af00      	add	r7, sp, #0
    291a:	60f8      	str	r0, [r7, #12]
    291c:	460b      	mov	r3, r1
    291e:	607a      	str	r2, [r7, #4]
    2920:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2922:	897b      	ldrh	r3, [r7, #10]
    2924:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2928:	b21a      	sxth	r2, r3
    292a:	687b      	ldr	r3, [r7, #4]
    292c:	b21b      	sxth	r3, r3
    292e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2932:	b21b      	sxth	r3, r3
    2934:	4313      	orrs	r3, r2
    2936:	b21b      	sxth	r3, r3
    2938:	b29a      	uxth	r2, r3
    293a:	68fb      	ldr	r3, [r7, #12]
    293c:	839a      	strh	r2, [r3, #28]
    293e:	68fb      	ldr	r3, [r7, #12]
    2940:	8b9b      	ldrh	r3, [r3, #28]
}
    2942:	4618      	mov	r0, r3
    2944:	3714      	adds	r7, #20
    2946:	46bd      	mov	sp, r7
    2948:	f85d 7b04 	ldr.w	r7, [sp], #4
    294c:	4770      	bx	lr

0000294e <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    294e:	b480      	push	{r7}
    2950:	b083      	sub	sp, #12
    2952:	af00      	add	r7, sp, #0
    2954:	6078      	str	r0, [r7, #4]
    2956:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	f103 0214 	add.w	r2, r3, #20
    295e:	683b      	ldr	r3, [r7, #0]
    2960:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2962:	2300      	movs	r3, #0
}
    2964:	4618      	mov	r0, r3
    2966:	370c      	adds	r7, #12
    2968:	46bd      	mov	sp, r7
    296a:	f85d 7b04 	ldr.w	r7, [sp], #4
    296e:	4770      	bx	lr

00002970 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2970:	b580      	push	{r7, lr}
    2972:	b084      	sub	sp, #16
    2974:	af00      	add	r7, sp, #0
    2976:	60f8      	str	r0, [r7, #12]
    2978:	60b9      	str	r1, [r7, #8]
    297a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    297c:	68fb      	ldr	r3, [r7, #12]
    297e:	2b00      	cmp	r3, #0
    2980:	d004      	beq.n	298c <pwm_init+0x1c>
    2982:	68bb      	ldr	r3, [r7, #8]
    2984:	2b00      	cmp	r3, #0
    2986:	d001      	beq.n	298c <pwm_init+0x1c>
    2988:	2301      	movs	r3, #1
    298a:	e000      	b.n	298e <pwm_init+0x1e>
    298c:	2300      	movs	r3, #0
    298e:	f003 0301 	and.w	r3, r3, #1
    2992:	b2db      	uxtb	r3, r3
    2994:	2233      	movs	r2, #51	; 0x33
    2996:	490a      	ldr	r1, [pc, #40]	; (29c0 <pwm_init+0x50>)
    2998:	4618      	mov	r0, r3
    299a:	4b0a      	ldr	r3, [pc, #40]	; (29c4 <pwm_init+0x54>)
    299c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    299e:	68fb      	ldr	r3, [r7, #12]
    29a0:	68b9      	ldr	r1, [r7, #8]
    29a2:	4618      	mov	r0, r3
    29a4:	4b08      	ldr	r3, [pc, #32]	; (29c8 <pwm_init+0x58>)
    29a6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    29a8:	68fb      	ldr	r3, [r7, #12]
    29aa:	4a08      	ldr	r2, [pc, #32]	; (29cc <pwm_init+0x5c>)
    29ac:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    29ae:	68fb      	ldr	r3, [r7, #12]
    29b0:	4a07      	ldr	r2, [pc, #28]	; (29d0 <pwm_init+0x60>)
    29b2:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    29b4:	2300      	movs	r3, #0
}
    29b6:	4618      	mov	r0, r3
    29b8:	3710      	adds	r7, #16
    29ba:	46bd      	mov	sp, r7
    29bc:	bd80      	pop	{r7, pc}
    29be:	bf00      	nop
    29c0:	000107e4 	.word	0x000107e4
    29c4:	00003b01 	.word	0x00003b01
    29c8:	00008299 	.word	0x00008299
    29cc:	000029d5 	.word	0x000029d5
    29d0:	000029f9 	.word	0x000029f9

000029d4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    29d4:	b580      	push	{r7, lr}
    29d6:	b084      	sub	sp, #16
    29d8:	af00      	add	r7, sp, #0
    29da:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    29e0:	68fb      	ldr	r3, [r7, #12]
    29e2:	695b      	ldr	r3, [r3, #20]
    29e4:	2b00      	cmp	r3, #0
    29e6:	d003      	beq.n	29f0 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    29e8:	68fb      	ldr	r3, [r7, #12]
    29ea:	695b      	ldr	r3, [r3, #20]
    29ec:	68f8      	ldr	r0, [r7, #12]
    29ee:	4798      	blx	r3
	}
}
    29f0:	bf00      	nop
    29f2:	3710      	adds	r7, #16
    29f4:	46bd      	mov	sp, r7
    29f6:	bd80      	pop	{r7, pc}

000029f8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    29f8:	b580      	push	{r7, lr}
    29fa:	b084      	sub	sp, #16
    29fc:	af00      	add	r7, sp, #0
    29fe:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	699b      	ldr	r3, [r3, #24]
    2a08:	2b00      	cmp	r3, #0
    2a0a:	d003      	beq.n	2a14 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2a0c:	68fb      	ldr	r3, [r7, #12]
    2a0e:	699b      	ldr	r3, [r3, #24]
    2a10:	68f8      	ldr	r0, [r7, #12]
    2a12:	4798      	blx	r3
	}
}
    2a14:	bf00      	nop
    2a16:	3710      	adds	r7, #16
    2a18:	46bd      	mov	sp, r7
    2a1a:	bd80      	pop	{r7, pc}

00002a1c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2a1c:	b580      	push	{r7, lr}
    2a1e:	b082      	sub	sp, #8
    2a20:	af00      	add	r7, sp, #0
    2a22:	6078      	str	r0, [r7, #4]
    2a24:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d004      	beq.n	2a36 <qspi_sync_init+0x1a>
    2a2c:	683b      	ldr	r3, [r7, #0]
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d001      	beq.n	2a36 <qspi_sync_init+0x1a>
    2a32:	2301      	movs	r3, #1
    2a34:	e000      	b.n	2a38 <qspi_sync_init+0x1c>
    2a36:	2300      	movs	r3, #0
    2a38:	f003 0301 	and.w	r3, r3, #1
    2a3c:	b2db      	uxtb	r3, r3
    2a3e:	2231      	movs	r2, #49	; 0x31
    2a40:	4906      	ldr	r1, [pc, #24]	; (2a5c <qspi_sync_init+0x40>)
    2a42:	4618      	mov	r0, r3
    2a44:	4b06      	ldr	r3, [pc, #24]	; (2a60 <qspi_sync_init+0x44>)
    2a46:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	6839      	ldr	r1, [r7, #0]
    2a4c:	4618      	mov	r0, r3
    2a4e:	4b05      	ldr	r3, [pc, #20]	; (2a64 <qspi_sync_init+0x48>)
    2a50:	4798      	blx	r3
    2a52:	4603      	mov	r3, r0
}
    2a54:	4618      	mov	r0, r3
    2a56:	3708      	adds	r7, #8
    2a58:	46bd      	mov	sp, r7
    2a5a:	bd80      	pop	{r7, pc}
    2a5c:	000107fc 	.word	0x000107fc
    2a60:	00003b01 	.word	0x00003b01
    2a64:	00005afd 	.word	0x00005afd

00002a68 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2a68:	b580      	push	{r7, lr}
    2a6a:	b082      	sub	sp, #8
    2a6c:	af00      	add	r7, sp, #0
    2a6e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	2b00      	cmp	r3, #0
    2a74:	bf14      	ite	ne
    2a76:	2301      	movne	r3, #1
    2a78:	2300      	moveq	r3, #0
    2a7a:	b2db      	uxtb	r3, r3
    2a7c:	223f      	movs	r2, #63	; 0x3f
    2a7e:	4906      	ldr	r1, [pc, #24]	; (2a98 <qspi_sync_enable+0x30>)
    2a80:	4618      	mov	r0, r3
    2a82:	4b06      	ldr	r3, [pc, #24]	; (2a9c <qspi_sync_enable+0x34>)
    2a84:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2a86:	687b      	ldr	r3, [r7, #4]
    2a88:	4618      	mov	r0, r3
    2a8a:	4b05      	ldr	r3, [pc, #20]	; (2aa0 <qspi_sync_enable+0x38>)
    2a8c:	4798      	blx	r3
    2a8e:	4603      	mov	r3, r0
}
    2a90:	4618      	mov	r0, r3
    2a92:	3708      	adds	r7, #8
    2a94:	46bd      	mov	sp, r7
    2a96:	bd80      	pop	{r7, pc}
    2a98:	000107fc 	.word	0x000107fc
    2a9c:	00003b01 	.word	0x00003b01
    2aa0:	00005b71 	.word	0x00005b71

00002aa4 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	b082      	sub	sp, #8
    2aa8:	af00      	add	r7, sp, #0
    2aaa:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2aac:	687b      	ldr	r3, [r7, #4]
    2aae:	2b00      	cmp	r3, #0
    2ab0:	bf14      	ite	ne
    2ab2:	2301      	movne	r3, #1
    2ab4:	2300      	moveq	r3, #0
    2ab6:	b2db      	uxtb	r3, r3
    2ab8:	2246      	movs	r2, #70	; 0x46
    2aba:	4906      	ldr	r1, [pc, #24]	; (2ad4 <qspi_sync_disable+0x30>)
    2abc:	4618      	mov	r0, r3
    2abe:	4b06      	ldr	r3, [pc, #24]	; (2ad8 <qspi_sync_disable+0x34>)
    2ac0:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	4618      	mov	r0, r3
    2ac6:	4b05      	ldr	r3, [pc, #20]	; (2adc <qspi_sync_disable+0x38>)
    2ac8:	4798      	blx	r3
    2aca:	4603      	mov	r3, r0
}
    2acc:	4618      	mov	r0, r3
    2ace:	3708      	adds	r7, #8
    2ad0:	46bd      	mov	sp, r7
    2ad2:	bd80      	pop	{r7, pc}
    2ad4:	000107fc 	.word	0x000107fc
    2ad8:	00003b01 	.word	0x00003b01
    2adc:	00005b95 	.word	0x00005b95

00002ae0 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	b082      	sub	sp, #8
    2ae4:	af00      	add	r7, sp, #0
    2ae6:	6078      	str	r0, [r7, #4]
    2ae8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2aea:	687b      	ldr	r3, [r7, #4]
    2aec:	2b00      	cmp	r3, #0
    2aee:	d004      	beq.n	2afa <qspi_sync_serial_run_command+0x1a>
    2af0:	683b      	ldr	r3, [r7, #0]
    2af2:	2b00      	cmp	r3, #0
    2af4:	d001      	beq.n	2afa <qspi_sync_serial_run_command+0x1a>
    2af6:	2301      	movs	r3, #1
    2af8:	e000      	b.n	2afc <qspi_sync_serial_run_command+0x1c>
    2afa:	2300      	movs	r3, #0
    2afc:	f003 0301 	and.w	r3, r3, #1
    2b00:	b2db      	uxtb	r3, r3
    2b02:	224d      	movs	r2, #77	; 0x4d
    2b04:	4906      	ldr	r1, [pc, #24]	; (2b20 <qspi_sync_serial_run_command+0x40>)
    2b06:	4618      	mov	r0, r3
    2b08:	4b06      	ldr	r3, [pc, #24]	; (2b24 <qspi_sync_serial_run_command+0x44>)
    2b0a:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2b0c:	687b      	ldr	r3, [r7, #4]
    2b0e:	6839      	ldr	r1, [r7, #0]
    2b10:	4618      	mov	r0, r3
    2b12:	4b05      	ldr	r3, [pc, #20]	; (2b28 <qspi_sync_serial_run_command+0x48>)
    2b14:	4798      	blx	r3
    2b16:	4603      	mov	r3, r0
}
    2b18:	4618      	mov	r0, r3
    2b1a:	3708      	adds	r7, #8
    2b1c:	46bd      	mov	sp, r7
    2b1e:	bd80      	pop	{r7, pc}
    2b20:	000107fc 	.word	0x000107fc
    2b24:	00003b01 	.word	0x00003b01
    2b28:	00005ce1 	.word	0x00005ce1

00002b2c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2b2c:	b580      	push	{r7, lr}
    2b2e:	b084      	sub	sp, #16
    2b30:	af00      	add	r7, sp, #0
    2b32:	6078      	str	r0, [r7, #4]
    2b34:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2b36:	2300      	movs	r3, #0
    2b38:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2b3a:	687b      	ldr	r3, [r7, #4]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d004      	beq.n	2b4a <spi_m_sync_init+0x1e>
    2b40:	683b      	ldr	r3, [r7, #0]
    2b42:	2b00      	cmp	r3, #0
    2b44:	d001      	beq.n	2b4a <spi_m_sync_init+0x1e>
    2b46:	2301      	movs	r3, #1
    2b48:	e000      	b.n	2b4c <spi_m_sync_init+0x20>
    2b4a:	2300      	movs	r3, #0
    2b4c:	f003 0301 	and.w	r3, r3, #1
    2b50:	b2db      	uxtb	r3, r3
    2b52:	2240      	movs	r2, #64	; 0x40
    2b54:	4910      	ldr	r1, [pc, #64]	; (2b98 <spi_m_sync_init+0x6c>)
    2b56:	4618      	mov	r0, r3
    2b58:	4b10      	ldr	r3, [pc, #64]	; (2b9c <spi_m_sync_init+0x70>)
    2b5a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	683a      	ldr	r2, [r7, #0]
    2b60:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	3304      	adds	r3, #4
    2b66:	6839      	ldr	r1, [r7, #0]
    2b68:	4618      	mov	r0, r3
    2b6a:	4b0d      	ldr	r3, [pc, #52]	; (2ba0 <spi_m_sync_init+0x74>)
    2b6c:	4798      	blx	r3
    2b6e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2b70:	68fb      	ldr	r3, [r7, #12]
    2b72:	2b00      	cmp	r3, #0
    2b74:	da01      	bge.n	2b7a <spi_m_sync_init+0x4e>
		return rc;
    2b76:	68fb      	ldr	r3, [r7, #12]
    2b78:	e00a      	b.n	2b90 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2b7a:	687b      	ldr	r3, [r7, #4]
    2b7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2b80:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2b82:	687b      	ldr	r3, [r7, #4]
    2b84:	4a07      	ldr	r2, [pc, #28]	; (2ba4 <spi_m_sync_init+0x78>)
    2b86:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2b88:	687b      	ldr	r3, [r7, #4]
    2b8a:	4a07      	ldr	r2, [pc, #28]	; (2ba8 <spi_m_sync_init+0x7c>)
    2b8c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2b8e:	2300      	movs	r3, #0
}
    2b90:	4618      	mov	r0, r3
    2b92:	3710      	adds	r7, #16
    2b94:	46bd      	mov	sp, r7
    2b96:	bd80      	pop	{r7, pc}
    2b98:	00010818 	.word	0x00010818
    2b9c:	00003b01 	.word	0x00003b01
    2ba0:	0000716d 	.word	0x0000716d
    2ba4:	00002bad 	.word	0x00002bad
    2ba8:	00002c05 	.word	0x00002c05

00002bac <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2bac:	b580      	push	{r7, lr}
    2bae:	b088      	sub	sp, #32
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	60f8      	str	r0, [r7, #12]
    2bb4:	60b9      	str	r1, [r7, #8]
    2bb6:	4613      	mov	r3, r2
    2bb8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2bba:	68fb      	ldr	r3, [r7, #12]
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	bf14      	ite	ne
    2bc0:	2301      	movne	r3, #1
    2bc2:	2300      	moveq	r3, #0
    2bc4:	b2db      	uxtb	r3, r3
    2bc6:	2287      	movs	r2, #135	; 0x87
    2bc8:	490b      	ldr	r1, [pc, #44]	; (2bf8 <_spi_m_sync_io_read+0x4c>)
    2bca:	4618      	mov	r0, r3
    2bcc:	4b0b      	ldr	r3, [pc, #44]	; (2bfc <_spi_m_sync_io_read+0x50>)
    2bce:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2bd0:	68fb      	ldr	r3, [r7, #12]
    2bd2:	3b0c      	subs	r3, #12
    2bd4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2bd6:	68bb      	ldr	r3, [r7, #8]
    2bd8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2bda:	2300      	movs	r3, #0
    2bdc:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2bde:	88fb      	ldrh	r3, [r7, #6]
    2be0:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2be2:	f107 0310 	add.w	r3, r7, #16
    2be6:	4619      	mov	r1, r3
    2be8:	69f8      	ldr	r0, [r7, #28]
    2bea:	4b05      	ldr	r3, [pc, #20]	; (2c00 <_spi_m_sync_io_read+0x54>)
    2bec:	4798      	blx	r3
    2bee:	4603      	mov	r3, r0
}
    2bf0:	4618      	mov	r0, r3
    2bf2:	3720      	adds	r7, #32
    2bf4:	46bd      	mov	sp, r7
    2bf6:	bd80      	pop	{r7, pc}
    2bf8:	00010818 	.word	0x00010818
    2bfc:	00003b01 	.word	0x00003b01
    2c00:	00002c5d 	.word	0x00002c5d

00002c04 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2c04:	b580      	push	{r7, lr}
    2c06:	b088      	sub	sp, #32
    2c08:	af00      	add	r7, sp, #0
    2c0a:	60f8      	str	r0, [r7, #12]
    2c0c:	60b9      	str	r1, [r7, #8]
    2c0e:	4613      	mov	r3, r2
    2c10:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2c12:	68fb      	ldr	r3, [r7, #12]
    2c14:	2b00      	cmp	r3, #0
    2c16:	bf14      	ite	ne
    2c18:	2301      	movne	r3, #1
    2c1a:	2300      	moveq	r3, #0
    2c1c:	b2db      	uxtb	r3, r3
    2c1e:	22a3      	movs	r2, #163	; 0xa3
    2c20:	490b      	ldr	r1, [pc, #44]	; (2c50 <_spi_m_sync_io_write+0x4c>)
    2c22:	4618      	mov	r0, r3
    2c24:	4b0b      	ldr	r3, [pc, #44]	; (2c54 <_spi_m_sync_io_write+0x50>)
    2c26:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2c28:	68fb      	ldr	r3, [r7, #12]
    2c2a:	3b0c      	subs	r3, #12
    2c2c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2c2e:	2300      	movs	r3, #0
    2c30:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2c32:	68bb      	ldr	r3, [r7, #8]
    2c34:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2c36:	88fb      	ldrh	r3, [r7, #6]
    2c38:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2c3a:	f107 0310 	add.w	r3, r7, #16
    2c3e:	4619      	mov	r1, r3
    2c40:	69f8      	ldr	r0, [r7, #28]
    2c42:	4b05      	ldr	r3, [pc, #20]	; (2c58 <_spi_m_sync_io_write+0x54>)
    2c44:	4798      	blx	r3
    2c46:	4603      	mov	r3, r0
}
    2c48:	4618      	mov	r0, r3
    2c4a:	3720      	adds	r7, #32
    2c4c:	46bd      	mov	sp, r7
    2c4e:	bd80      	pop	{r7, pc}
    2c50:	00010818 	.word	0x00010818
    2c54:	00003b01 	.word	0x00003b01
    2c58:	00002c5d 	.word	0x00002c5d

00002c5c <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2c5c:	b580      	push	{r7, lr}
    2c5e:	b086      	sub	sp, #24
    2c60:	af00      	add	r7, sp, #0
    2c62:	6078      	str	r0, [r7, #4]
    2c64:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	2b00      	cmp	r3, #0
    2c6a:	d004      	beq.n	2c76 <spi_m_sync_transfer+0x1a>
    2c6c:	683b      	ldr	r3, [r7, #0]
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d001      	beq.n	2c76 <spi_m_sync_transfer+0x1a>
    2c72:	2301      	movs	r3, #1
    2c74:	e000      	b.n	2c78 <spi_m_sync_transfer+0x1c>
    2c76:	2300      	movs	r3, #0
    2c78:	f003 0301 	and.w	r3, r3, #1
    2c7c:	b2db      	uxtb	r3, r3
    2c7e:	22b3      	movs	r2, #179	; 0xb3
    2c80:	490c      	ldr	r1, [pc, #48]	; (2cb4 <spi_m_sync_transfer+0x58>)
    2c82:	4618      	mov	r0, r3
    2c84:	4b0c      	ldr	r3, [pc, #48]	; (2cb8 <spi_m_sync_transfer+0x5c>)
    2c86:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2c88:	683b      	ldr	r3, [r7, #0]
    2c8a:	681b      	ldr	r3, [r3, #0]
    2c8c:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2c8e:	683b      	ldr	r3, [r7, #0]
    2c90:	685b      	ldr	r3, [r3, #4]
    2c92:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2c94:	683b      	ldr	r3, [r7, #0]
    2c96:	689b      	ldr	r3, [r3, #8]
    2c98:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2c9a:	687b      	ldr	r3, [r7, #4]
    2c9c:	3304      	adds	r3, #4
    2c9e:	f107 020c 	add.w	r2, r7, #12
    2ca2:	4611      	mov	r1, r2
    2ca4:	4618      	mov	r0, r3
    2ca6:	4b05      	ldr	r3, [pc, #20]	; (2cbc <spi_m_sync_transfer+0x60>)
    2ca8:	4798      	blx	r3
    2caa:	4603      	mov	r3, r0
}
    2cac:	4618      	mov	r0, r3
    2cae:	3718      	adds	r7, #24
    2cb0:	46bd      	mov	sp, r7
    2cb2:	bd80      	pop	{r7, pc}
    2cb4:	00010818 	.word	0x00010818
    2cb8:	00003b01 	.word	0x00003b01
    2cbc:	000073cd 	.word	0x000073cd

00002cc0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2cc0:	b480      	push	{r7}
    2cc2:	b083      	sub	sp, #12
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	681b      	ldr	r3, [r3, #0]
}
    2ccc:	4618      	mov	r0, r3
    2cce:	370c      	adds	r7, #12
    2cd0:	46bd      	mov	sp, r7
    2cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cd6:	4770      	bx	lr

00002cd8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2cd8:	b480      	push	{r7}
    2cda:	b083      	sub	sp, #12
    2cdc:	af00      	add	r7, sp, #0
    2cde:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2ce0:	687b      	ldr	r3, [r7, #4]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d002      	beq.n	2cec <list_get_next_element+0x14>
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	681b      	ldr	r3, [r3, #0]
    2cea:	e000      	b.n	2cee <list_get_next_element+0x16>
    2cec:	2300      	movs	r3, #0
}
    2cee:	4618      	mov	r0, r3
    2cf0:	370c      	adds	r7, #12
    2cf2:	46bd      	mov	sp, r7
    2cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cf8:	4770      	bx	lr
	...

00002cfc <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2cfc:	b580      	push	{r7, lr}
    2cfe:	b084      	sub	sp, #16
    2d00:	af00      	add	r7, sp, #0
    2d02:	60f8      	str	r0, [r7, #12]
    2d04:	60b9      	str	r1, [r7, #8]
    2d06:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2d08:	68fb      	ldr	r3, [r7, #12]
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	d007      	beq.n	2d1e <timer_init+0x22>
    2d0e:	68bb      	ldr	r3, [r7, #8]
    2d10:	2b00      	cmp	r3, #0
    2d12:	d004      	beq.n	2d1e <timer_init+0x22>
    2d14:	687b      	ldr	r3, [r7, #4]
    2d16:	2b00      	cmp	r3, #0
    2d18:	d001      	beq.n	2d1e <timer_init+0x22>
    2d1a:	2301      	movs	r3, #1
    2d1c:	e000      	b.n	2d20 <timer_init+0x24>
    2d1e:	2300      	movs	r3, #0
    2d20:	f003 0301 	and.w	r3, r3, #1
    2d24:	b2db      	uxtb	r3, r3
    2d26:	223b      	movs	r2, #59	; 0x3b
    2d28:	490c      	ldr	r1, [pc, #48]	; (2d5c <timer_init+0x60>)
    2d2a:	4618      	mov	r0, r3
    2d2c:	4b0c      	ldr	r3, [pc, #48]	; (2d60 <timer_init+0x64>)
    2d2e:	4798      	blx	r3
	descr->func = func;
    2d30:	68fb      	ldr	r3, [r7, #12]
    2d32:	687a      	ldr	r2, [r7, #4]
    2d34:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2d36:	68fb      	ldr	r3, [r7, #12]
    2d38:	681b      	ldr	r3, [r3, #0]
    2d3a:	681b      	ldr	r3, [r3, #0]
    2d3c:	68fa      	ldr	r2, [r7, #12]
    2d3e:	3204      	adds	r2, #4
    2d40:	68b9      	ldr	r1, [r7, #8]
    2d42:	4610      	mov	r0, r2
    2d44:	4798      	blx	r3
	descr->time                           = 0;
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	2200      	movs	r2, #0
    2d4a:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2d4c:	68fb      	ldr	r3, [r7, #12]
    2d4e:	4a05      	ldr	r2, [pc, #20]	; (2d64 <timer_init+0x68>)
    2d50:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2d52:	2300      	movs	r3, #0
}
    2d54:	4618      	mov	r0, r3
    2d56:	3710      	adds	r7, #16
    2d58:	46bd      	mov	sp, r7
    2d5a:	bd80      	pop	{r7, pc}
    2d5c:	00010834 	.word	0x00010834
    2d60:	00003b01 	.word	0x00003b01
    2d64:	000030ed 	.word	0x000030ed

00002d68 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2d68:	b580      	push	{r7, lr}
    2d6a:	b082      	sub	sp, #8
    2d6c:	af00      	add	r7, sp, #0
    2d6e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d005      	beq.n	2d82 <timer_start+0x1a>
    2d76:	687b      	ldr	r3, [r7, #4]
    2d78:	681b      	ldr	r3, [r3, #0]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d001      	beq.n	2d82 <timer_start+0x1a>
    2d7e:	2301      	movs	r3, #1
    2d80:	e000      	b.n	2d84 <timer_start+0x1c>
    2d82:	2300      	movs	r3, #0
    2d84:	f003 0301 	and.w	r3, r3, #1
    2d88:	b2db      	uxtb	r3, r3
    2d8a:	2254      	movs	r2, #84	; 0x54
    2d8c:	490e      	ldr	r1, [pc, #56]	; (2dc8 <timer_start+0x60>)
    2d8e:	4618      	mov	r0, r3
    2d90:	4b0e      	ldr	r3, [pc, #56]	; (2dcc <timer_start+0x64>)
    2d92:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2d94:	687b      	ldr	r3, [r7, #4]
    2d96:	681b      	ldr	r3, [r3, #0]
    2d98:	699b      	ldr	r3, [r3, #24]
    2d9a:	687a      	ldr	r2, [r7, #4]
    2d9c:	3204      	adds	r2, #4
    2d9e:	4610      	mov	r0, r2
    2da0:	4798      	blx	r3
    2da2:	4603      	mov	r3, r0
    2da4:	2b00      	cmp	r3, #0
    2da6:	d002      	beq.n	2dae <timer_start+0x46>
		return ERR_DENIED;
    2da8:	f06f 0310 	mvn.w	r3, #16
    2dac:	e007      	b.n	2dbe <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2dae:	687b      	ldr	r3, [r7, #4]
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	689b      	ldr	r3, [r3, #8]
    2db4:	687a      	ldr	r2, [r7, #4]
    2db6:	3204      	adds	r2, #4
    2db8:	4610      	mov	r0, r2
    2dba:	4798      	blx	r3

	return ERR_NONE;
    2dbc:	2300      	movs	r3, #0
}
    2dbe:	4618      	mov	r0, r3
    2dc0:	3708      	adds	r7, #8
    2dc2:	46bd      	mov	sp, r7
    2dc4:	bd80      	pop	{r7, pc}
    2dc6:	bf00      	nop
    2dc8:	00010834 	.word	0x00010834
    2dcc:	00003b01 	.word	0x00003b01

00002dd0 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2dd0:	b580      	push	{r7, lr}
    2dd2:	b082      	sub	sp, #8
    2dd4:	af00      	add	r7, sp, #0
    2dd6:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2dd8:	687b      	ldr	r3, [r7, #4]
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d005      	beq.n	2dea <timer_stop+0x1a>
    2dde:	687b      	ldr	r3, [r7, #4]
    2de0:	681b      	ldr	r3, [r3, #0]
    2de2:	2b00      	cmp	r3, #0
    2de4:	d001      	beq.n	2dea <timer_stop+0x1a>
    2de6:	2301      	movs	r3, #1
    2de8:	e000      	b.n	2dec <timer_stop+0x1c>
    2dea:	2300      	movs	r3, #0
    2dec:	f003 0301 	and.w	r3, r3, #1
    2df0:	b2db      	uxtb	r3, r3
    2df2:	2262      	movs	r2, #98	; 0x62
    2df4:	490f      	ldr	r1, [pc, #60]	; (2e34 <timer_stop+0x64>)
    2df6:	4618      	mov	r0, r3
    2df8:	4b0f      	ldr	r3, [pc, #60]	; (2e38 <timer_stop+0x68>)
    2dfa:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2dfc:	687b      	ldr	r3, [r7, #4]
    2dfe:	681b      	ldr	r3, [r3, #0]
    2e00:	699b      	ldr	r3, [r3, #24]
    2e02:	687a      	ldr	r2, [r7, #4]
    2e04:	3204      	adds	r2, #4
    2e06:	4610      	mov	r0, r2
    2e08:	4798      	blx	r3
    2e0a:	4603      	mov	r3, r0
    2e0c:	f083 0301 	eor.w	r3, r3, #1
    2e10:	b2db      	uxtb	r3, r3
    2e12:	2b00      	cmp	r3, #0
    2e14:	d002      	beq.n	2e1c <timer_stop+0x4c>
		return ERR_DENIED;
    2e16:	f06f 0310 	mvn.w	r3, #16
    2e1a:	e007      	b.n	2e2c <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2e1c:	687b      	ldr	r3, [r7, #4]
    2e1e:	681b      	ldr	r3, [r3, #0]
    2e20:	68db      	ldr	r3, [r3, #12]
    2e22:	687a      	ldr	r2, [r7, #4]
    2e24:	3204      	adds	r2, #4
    2e26:	4610      	mov	r0, r2
    2e28:	4798      	blx	r3

	return ERR_NONE;
    2e2a:	2300      	movs	r3, #0
}
    2e2c:	4618      	mov	r0, r3
    2e2e:	3708      	adds	r7, #8
    2e30:	46bd      	mov	sp, r7
    2e32:	bd80      	pop	{r7, pc}
    2e34:	00010834 	.word	0x00010834
    2e38:	00003b01 	.word	0x00003b01

00002e3c <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2e3c:	b580      	push	{r7, lr}
    2e3e:	b084      	sub	sp, #16
    2e40:	af00      	add	r7, sp, #0
    2e42:	6078      	str	r0, [r7, #4]
    2e44:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2e46:	687b      	ldr	r3, [r7, #4]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d008      	beq.n	2e5e <timer_add_task+0x22>
    2e4c:	683b      	ldr	r3, [r7, #0]
    2e4e:	2b00      	cmp	r3, #0
    2e50:	d005      	beq.n	2e5e <timer_add_task+0x22>
    2e52:	687b      	ldr	r3, [r7, #4]
    2e54:	681b      	ldr	r3, [r3, #0]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d001      	beq.n	2e5e <timer_add_task+0x22>
    2e5a:	2301      	movs	r3, #1
    2e5c:	e000      	b.n	2e60 <timer_add_task+0x24>
    2e5e:	2300      	movs	r3, #0
    2e60:	f003 0301 	and.w	r3, r3, #1
    2e64:	b2db      	uxtb	r3, r3
    2e66:	227b      	movs	r2, #123	; 0x7b
    2e68:	492f      	ldr	r1, [pc, #188]	; (2f28 <timer_add_task+0xec>)
    2e6a:	4618      	mov	r0, r3
    2e6c:	4b2f      	ldr	r3, [pc, #188]	; (2f2c <timer_add_task+0xf0>)
    2e6e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2e70:	687b      	ldr	r3, [r7, #4]
    2e72:	7f1b      	ldrb	r3, [r3, #28]
    2e74:	b2db      	uxtb	r3, r3
    2e76:	f043 0301 	orr.w	r3, r3, #1
    2e7a:	b2da      	uxtb	r2, r3
    2e7c:	687b      	ldr	r3, [r7, #4]
    2e7e:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2e80:	687b      	ldr	r3, [r7, #4]
    2e82:	3318      	adds	r3, #24
    2e84:	6839      	ldr	r1, [r7, #0]
    2e86:	4618      	mov	r0, r3
    2e88:	4b29      	ldr	r3, [pc, #164]	; (2f30 <timer_add_task+0xf4>)
    2e8a:	4798      	blx	r3
    2e8c:	4603      	mov	r3, r0
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d00f      	beq.n	2eb2 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	7f1b      	ldrb	r3, [r3, #28]
    2e96:	b2db      	uxtb	r3, r3
    2e98:	f023 0301 	bic.w	r3, r3, #1
    2e9c:	b2da      	uxtb	r2, r3
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2ea2:	2280      	movs	r2, #128	; 0x80
    2ea4:	4920      	ldr	r1, [pc, #128]	; (2f28 <timer_add_task+0xec>)
    2ea6:	2000      	movs	r0, #0
    2ea8:	4b20      	ldr	r3, [pc, #128]	; (2f2c <timer_add_task+0xf0>)
    2eaa:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2eac:	f06f 0311 	mvn.w	r3, #17
    2eb0:	e035      	b.n	2f1e <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2eb2:	687b      	ldr	r3, [r7, #4]
    2eb4:	695a      	ldr	r2, [r3, #20]
    2eb6:	683b      	ldr	r3, [r7, #0]
    2eb8:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	f103 0018 	add.w	r0, r3, #24
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	695b      	ldr	r3, [r3, #20]
    2ec4:	461a      	mov	r2, r3
    2ec6:	6839      	ldr	r1, [r7, #0]
    2ec8:	4b1a      	ldr	r3, [pc, #104]	; (2f34 <timer_add_task+0xf8>)
    2eca:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2ecc:	687b      	ldr	r3, [r7, #4]
    2ece:	7f1b      	ldrb	r3, [r3, #28]
    2ed0:	b2db      	uxtb	r3, r3
    2ed2:	f023 0301 	bic.w	r3, r3, #1
    2ed6:	b2da      	uxtb	r2, r3
    2ed8:	687b      	ldr	r3, [r7, #4]
    2eda:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2edc:	687b      	ldr	r3, [r7, #4]
    2ede:	7f1b      	ldrb	r3, [r3, #28]
    2ee0:	b2db      	uxtb	r3, r3
    2ee2:	f003 0302 	and.w	r3, r3, #2
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d018      	beq.n	2f1c <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2eea:	f107 030c 	add.w	r3, r7, #12
    2eee:	4618      	mov	r0, r3
    2ef0:	4b11      	ldr	r3, [pc, #68]	; (2f38 <timer_add_task+0xfc>)
    2ef2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	7f1b      	ldrb	r3, [r3, #28]
    2ef8:	b2db      	uxtb	r3, r3
    2efa:	f023 0302 	bic.w	r3, r3, #2
    2efe:	b2da      	uxtb	r2, r3
    2f00:	687b      	ldr	r3, [r7, #4]
    2f02:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2f04:	687b      	ldr	r3, [r7, #4]
    2f06:	681b      	ldr	r3, [r3, #0]
    2f08:	69db      	ldr	r3, [r3, #28]
    2f0a:	687a      	ldr	r2, [r7, #4]
    2f0c:	3204      	adds	r2, #4
    2f0e:	4610      	mov	r0, r2
    2f10:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2f12:	f107 030c 	add.w	r3, r7, #12
    2f16:	4618      	mov	r0, r3
    2f18:	4b08      	ldr	r3, [pc, #32]	; (2f3c <timer_add_task+0x100>)
    2f1a:	4798      	blx	r3
	}

	return ERR_NONE;
    2f1c:	2300      	movs	r3, #0
}
    2f1e:	4618      	mov	r0, r3
    2f20:	3710      	adds	r7, #16
    2f22:	46bd      	mov	sp, r7
    2f24:	bd80      	pop	{r7, pc}
    2f26:	bf00      	nop
    2f28:	00010834 	.word	0x00010834
    2f2c:	00003b01 	.word	0x00003b01
    2f30:	00003b29 	.word	0x00003b29
    2f34:	0000303d 	.word	0x0000303d
    2f38:	0000b7a9 	.word	0x0000b7a9
    2f3c:	0000b7cf 	.word	0x0000b7cf

00002f40 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2f40:	b580      	push	{r7, lr}
    2f42:	b084      	sub	sp, #16
    2f44:	af00      	add	r7, sp, #0
    2f46:	6078      	str	r0, [r7, #4]
    2f48:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2f4a:	687b      	ldr	r3, [r7, #4]
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d008      	beq.n	2f62 <timer_remove_task+0x22>
    2f50:	683b      	ldr	r3, [r7, #0]
    2f52:	2b00      	cmp	r3, #0
    2f54:	d005      	beq.n	2f62 <timer_remove_task+0x22>
    2f56:	687b      	ldr	r3, [r7, #4]
    2f58:	681b      	ldr	r3, [r3, #0]
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	d001      	beq.n	2f62 <timer_remove_task+0x22>
    2f5e:	2301      	movs	r3, #1
    2f60:	e000      	b.n	2f64 <timer_remove_task+0x24>
    2f62:	2300      	movs	r3, #0
    2f64:	f003 0301 	and.w	r3, r3, #1
    2f68:	b2db      	uxtb	r3, r3
    2f6a:	2296      	movs	r2, #150	; 0x96
    2f6c:	492d      	ldr	r1, [pc, #180]	; (3024 <timer_remove_task+0xe4>)
    2f6e:	4618      	mov	r0, r3
    2f70:	4b2d      	ldr	r3, [pc, #180]	; (3028 <timer_remove_task+0xe8>)
    2f72:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	7f1b      	ldrb	r3, [r3, #28]
    2f78:	b2db      	uxtb	r3, r3
    2f7a:	f043 0301 	orr.w	r3, r3, #1
    2f7e:	b2da      	uxtb	r2, r3
    2f80:	687b      	ldr	r3, [r7, #4]
    2f82:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	3318      	adds	r3, #24
    2f88:	6839      	ldr	r1, [r7, #0]
    2f8a:	4618      	mov	r0, r3
    2f8c:	4b27      	ldr	r3, [pc, #156]	; (302c <timer_remove_task+0xec>)
    2f8e:	4798      	blx	r3
    2f90:	4603      	mov	r3, r0
    2f92:	f083 0301 	eor.w	r3, r3, #1
    2f96:	b2db      	uxtb	r3, r3
    2f98:	2b00      	cmp	r3, #0
    2f9a:	d00f      	beq.n	2fbc <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2f9c:	687b      	ldr	r3, [r7, #4]
    2f9e:	7f1b      	ldrb	r3, [r3, #28]
    2fa0:	b2db      	uxtb	r3, r3
    2fa2:	f023 0301 	bic.w	r3, r3, #1
    2fa6:	b2da      	uxtb	r2, r3
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2fac:	229b      	movs	r2, #155	; 0x9b
    2fae:	491d      	ldr	r1, [pc, #116]	; (3024 <timer_remove_task+0xe4>)
    2fb0:	2000      	movs	r0, #0
    2fb2:	4b1d      	ldr	r3, [pc, #116]	; (3028 <timer_remove_task+0xe8>)
    2fb4:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2fb6:	f06f 0309 	mvn.w	r3, #9
    2fba:	e02e      	b.n	301a <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2fbc:	687b      	ldr	r3, [r7, #4]
    2fbe:	3318      	adds	r3, #24
    2fc0:	6839      	ldr	r1, [r7, #0]
    2fc2:	4618      	mov	r0, r3
    2fc4:	4b1a      	ldr	r3, [pc, #104]	; (3030 <timer_remove_task+0xf0>)
    2fc6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2fc8:	687b      	ldr	r3, [r7, #4]
    2fca:	7f1b      	ldrb	r3, [r3, #28]
    2fcc:	b2db      	uxtb	r3, r3
    2fce:	f023 0301 	bic.w	r3, r3, #1
    2fd2:	b2da      	uxtb	r2, r3
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2fd8:	687b      	ldr	r3, [r7, #4]
    2fda:	7f1b      	ldrb	r3, [r3, #28]
    2fdc:	b2db      	uxtb	r3, r3
    2fde:	f003 0302 	and.w	r3, r3, #2
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	d018      	beq.n	3018 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2fe6:	f107 030c 	add.w	r3, r7, #12
    2fea:	4618      	mov	r0, r3
    2fec:	4b11      	ldr	r3, [pc, #68]	; (3034 <timer_remove_task+0xf4>)
    2fee:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2ff0:	687b      	ldr	r3, [r7, #4]
    2ff2:	7f1b      	ldrb	r3, [r3, #28]
    2ff4:	b2db      	uxtb	r3, r3
    2ff6:	f023 0302 	bic.w	r3, r3, #2
    2ffa:	b2da      	uxtb	r2, r3
    2ffc:	687b      	ldr	r3, [r7, #4]
    2ffe:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	681b      	ldr	r3, [r3, #0]
    3004:	69db      	ldr	r3, [r3, #28]
    3006:	687a      	ldr	r2, [r7, #4]
    3008:	3204      	adds	r2, #4
    300a:	4610      	mov	r0, r2
    300c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    300e:	f107 030c 	add.w	r3, r7, #12
    3012:	4618      	mov	r0, r3
    3014:	4b08      	ldr	r3, [pc, #32]	; (3038 <timer_remove_task+0xf8>)
    3016:	4798      	blx	r3
	}

	return ERR_NONE;
    3018:	2300      	movs	r3, #0
}
    301a:	4618      	mov	r0, r3
    301c:	3710      	adds	r7, #16
    301e:	46bd      	mov	sp, r7
    3020:	bd80      	pop	{r7, pc}
    3022:	bf00      	nop
    3024:	00010834 	.word	0x00010834
    3028:	00003b01 	.word	0x00003b01
    302c:	00003b29 	.word	0x00003b29
    3030:	00003c8b 	.word	0x00003c8b
    3034:	0000b7a9 	.word	0x0000b7a9
    3038:	0000b7cf 	.word	0x0000b7cf

0000303c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    303c:	b580      	push	{r7, lr}
    303e:	b088      	sub	sp, #32
    3040:	af00      	add	r7, sp, #0
    3042:	60f8      	str	r0, [r7, #12]
    3044:	60b9      	str	r1, [r7, #8]
    3046:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    3048:	2300      	movs	r3, #0
    304a:	61bb      	str	r3, [r7, #24]
    304c:	68f8      	ldr	r0, [r7, #12]
    304e:	4b23      	ldr	r3, [pc, #140]	; (30dc <timer_add_timer_task+0xa0>)
    3050:	4798      	blx	r3
    3052:	6138      	str	r0, [r7, #16]

	if (!head) {
    3054:	693b      	ldr	r3, [r7, #16]
    3056:	2b00      	cmp	r3, #0
    3058:	d104      	bne.n	3064 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    305a:	68b9      	ldr	r1, [r7, #8]
    305c:	68f8      	ldr	r0, [r7, #12]
    305e:	4b20      	ldr	r3, [pc, #128]	; (30e0 <timer_add_timer_task+0xa4>)
    3060:	4798      	blx	r3
		return;
    3062:	e037      	b.n	30d4 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3064:	693b      	ldr	r3, [r7, #16]
    3066:	61fb      	str	r3, [r7, #28]
    3068:	e022      	b.n	30b0 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    306a:	69fb      	ldr	r3, [r7, #28]
    306c:	685a      	ldr	r2, [r3, #4]
    306e:	687b      	ldr	r3, [r7, #4]
    3070:	429a      	cmp	r2, r3
    3072:	d808      	bhi.n	3086 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    3074:	69fb      	ldr	r3, [r7, #28]
    3076:	689a      	ldr	r2, [r3, #8]
    3078:	69fb      	ldr	r3, [r7, #28]
    307a:	6859      	ldr	r1, [r3, #4]
    307c:	687b      	ldr	r3, [r7, #4]
    307e:	1acb      	subs	r3, r1, r3
    3080:	4413      	add	r3, r2
    3082:	617b      	str	r3, [r7, #20]
    3084:	e009      	b.n	309a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    3086:	69fb      	ldr	r3, [r7, #28]
    3088:	689a      	ldr	r2, [r3, #8]
    308a:	69fb      	ldr	r3, [r7, #28]
    308c:	685b      	ldr	r3, [r3, #4]
    308e:	441a      	add	r2, r3
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	425b      	negs	r3, r3
    3094:	4413      	add	r3, r2
    3096:	3301      	adds	r3, #1
    3098:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    309a:	68bb      	ldr	r3, [r7, #8]
    309c:	689a      	ldr	r2, [r3, #8]
    309e:	697b      	ldr	r3, [r7, #20]
    30a0:	429a      	cmp	r2, r3
    30a2:	d909      	bls.n	30b8 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    30a4:	69fb      	ldr	r3, [r7, #28]
    30a6:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    30a8:	69f8      	ldr	r0, [r7, #28]
    30aa:	4b0e      	ldr	r3, [pc, #56]	; (30e4 <timer_add_timer_task+0xa8>)
    30ac:	4798      	blx	r3
    30ae:	61f8      	str	r0, [r7, #28]
    30b0:	69fb      	ldr	r3, [r7, #28]
    30b2:	2b00      	cmp	r3, #0
    30b4:	d1d9      	bne.n	306a <timer_add_timer_task+0x2e>
    30b6:	e000      	b.n	30ba <timer_add_timer_task+0x7e>
			break;
    30b8:	bf00      	nop
	}

	if (it == head) {
    30ba:	69fa      	ldr	r2, [r7, #28]
    30bc:	693b      	ldr	r3, [r7, #16]
    30be:	429a      	cmp	r2, r3
    30c0:	d104      	bne.n	30cc <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    30c2:	68b9      	ldr	r1, [r7, #8]
    30c4:	68f8      	ldr	r0, [r7, #12]
    30c6:	4b06      	ldr	r3, [pc, #24]	; (30e0 <timer_add_timer_task+0xa4>)
    30c8:	4798      	blx	r3
    30ca:	e003      	b.n	30d4 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    30cc:	68b9      	ldr	r1, [r7, #8]
    30ce:	69b8      	ldr	r0, [r7, #24]
    30d0:	4b05      	ldr	r3, [pc, #20]	; (30e8 <timer_add_timer_task+0xac>)
    30d2:	4798      	blx	r3
	}
}
    30d4:	3720      	adds	r7, #32
    30d6:	46bd      	mov	sp, r7
    30d8:	bd80      	pop	{r7, pc}
    30da:	bf00      	nop
    30dc:	00002cc1 	.word	0x00002cc1
    30e0:	00003b61 	.word	0x00003b61
    30e4:	00002cd9 	.word	0x00002cd9
    30e8:	00003bb9 	.word	0x00003bb9

000030ec <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    30ec:	b580      	push	{r7, lr}
    30ee:	b086      	sub	sp, #24
    30f0:	af00      	add	r7, sp, #0
    30f2:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    30f4:	687b      	ldr	r3, [r7, #4]
    30f6:	3b04      	subs	r3, #4
    30f8:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    30fa:	693b      	ldr	r3, [r7, #16]
    30fc:	3318      	adds	r3, #24
    30fe:	4618      	mov	r0, r3
    3100:	4b27      	ldr	r3, [pc, #156]	; (31a0 <timer_process_counted+0xb4>)
    3102:	4798      	blx	r3
    3104:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    3106:	693b      	ldr	r3, [r7, #16]
    3108:	695b      	ldr	r3, [r3, #20]
    310a:	1c5a      	adds	r2, r3, #1
    310c:	693b      	ldr	r3, [r7, #16]
    310e:	615a      	str	r2, [r3, #20]
    3110:	693b      	ldr	r3, [r7, #16]
    3112:	695b      	ldr	r3, [r3, #20]
    3114:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    3116:	693b      	ldr	r3, [r7, #16]
    3118:	7f1b      	ldrb	r3, [r3, #28]
    311a:	b2db      	uxtb	r3, r3
    311c:	f003 0301 	and.w	r3, r3, #1
    3120:	2b00      	cmp	r3, #0
    3122:	d106      	bne.n	3132 <timer_process_counted+0x46>
    3124:	693b      	ldr	r3, [r7, #16]
    3126:	7f1b      	ldrb	r3, [r3, #28]
    3128:	b2db      	uxtb	r3, r3
    312a:	f003 0302 	and.w	r3, r3, #2
    312e:	2b00      	cmp	r3, #0
    3130:	d027      	beq.n	3182 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3132:	693b      	ldr	r3, [r7, #16]
    3134:	7f1b      	ldrb	r3, [r3, #28]
    3136:	b2db      	uxtb	r3, r3
    3138:	f043 0302 	orr.w	r3, r3, #2
    313c:	b2da      	uxtb	r2, r3
    313e:	693b      	ldr	r3, [r7, #16]
    3140:	771a      	strb	r2, [r3, #28]
		return;
    3142:	e029      	b.n	3198 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    3144:	697b      	ldr	r3, [r7, #20]
    3146:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    3148:	693b      	ldr	r3, [r7, #16]
    314a:	3318      	adds	r3, #24
    314c:	4618      	mov	r0, r3
    314e:	4b15      	ldr	r3, [pc, #84]	; (31a4 <timer_process_counted+0xb8>)
    3150:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3152:	68bb      	ldr	r3, [r7, #8]
    3154:	7c1b      	ldrb	r3, [r3, #16]
    3156:	2b01      	cmp	r3, #1
    3158:	d109      	bne.n	316e <timer_process_counted+0x82>
			tmp->time_label = time;
    315a:	68bb      	ldr	r3, [r7, #8]
    315c:	68fa      	ldr	r2, [r7, #12]
    315e:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3160:	693b      	ldr	r3, [r7, #16]
    3162:	3318      	adds	r3, #24
    3164:	68fa      	ldr	r2, [r7, #12]
    3166:	68b9      	ldr	r1, [r7, #8]
    3168:	4618      	mov	r0, r3
    316a:	4b0f      	ldr	r3, [pc, #60]	; (31a8 <timer_process_counted+0xbc>)
    316c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    316e:	693b      	ldr	r3, [r7, #16]
    3170:	3318      	adds	r3, #24
    3172:	4618      	mov	r0, r3
    3174:	4b0a      	ldr	r3, [pc, #40]	; (31a0 <timer_process_counted+0xb4>)
    3176:	4798      	blx	r3
    3178:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    317a:	68bb      	ldr	r3, [r7, #8]
    317c:	68db      	ldr	r3, [r3, #12]
    317e:	68b8      	ldr	r0, [r7, #8]
    3180:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3182:	697b      	ldr	r3, [r7, #20]
    3184:	2b00      	cmp	r3, #0
    3186:	d007      	beq.n	3198 <timer_process_counted+0xac>
    3188:	697b      	ldr	r3, [r7, #20]
    318a:	685b      	ldr	r3, [r3, #4]
    318c:	68fa      	ldr	r2, [r7, #12]
    318e:	1ad2      	subs	r2, r2, r3
    3190:	697b      	ldr	r3, [r7, #20]
    3192:	689b      	ldr	r3, [r3, #8]
    3194:	429a      	cmp	r2, r3
    3196:	d2d5      	bcs.n	3144 <timer_process_counted+0x58>
	}
}
    3198:	3718      	adds	r7, #24
    319a:	46bd      	mov	sp, r7
    319c:	bd80      	pop	{r7, pc}
    319e:	bf00      	nop
    31a0:	00002cc1 	.word	0x00002cc1
    31a4:	00003c59 	.word	0x00003c59
    31a8:	0000303d 	.word	0x0000303d

000031ac <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    31ac:	b480      	push	{r7}
    31ae:	b085      	sub	sp, #20
    31b0:	af00      	add	r7, sp, #0
    31b2:	4603      	mov	r3, r0
    31b4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    31b6:	2300      	movs	r3, #0
    31b8:	73fb      	strb	r3, [r7, #15]
    31ba:	e029      	b.n	3210 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    31bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31c0:	4a19      	ldr	r2, [pc, #100]	; (3228 <_usb_d_find_ep+0x7c>)
    31c2:	015b      	lsls	r3, r3, #5
    31c4:	4413      	add	r3, r2
    31c6:	3301      	adds	r3, #1
    31c8:	781b      	ldrb	r3, [r3, #0]
    31ca:	79fa      	ldrb	r2, [r7, #7]
    31cc:	429a      	cmp	r2, r3
    31ce:	d102      	bne.n	31d6 <_usb_d_find_ep+0x2a>
			return i;
    31d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31d4:	e022      	b.n	321c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    31d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31da:	4a13      	ldr	r2, [pc, #76]	; (3228 <_usb_d_find_ep+0x7c>)
    31dc:	015b      	lsls	r3, r3, #5
    31de:	4413      	add	r3, r2
    31e0:	781b      	ldrb	r3, [r3, #0]
    31e2:	2b00      	cmp	r3, #0
    31e4:	d10e      	bne.n	3204 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    31e6:	79fb      	ldrb	r3, [r7, #7]
    31e8:	f003 030f 	and.w	r3, r3, #15
    31ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    31f0:	490d      	ldr	r1, [pc, #52]	; (3228 <_usb_d_find_ep+0x7c>)
    31f2:	0152      	lsls	r2, r2, #5
    31f4:	440a      	add	r2, r1
    31f6:	3201      	adds	r2, #1
    31f8:	7812      	ldrb	r2, [r2, #0]
    31fa:	4293      	cmp	r3, r2
    31fc:	d102      	bne.n	3204 <_usb_d_find_ep+0x58>
			return i;
    31fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3202:	e00b      	b.n	321c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3204:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3208:	b2db      	uxtb	r3, r3
    320a:	3301      	adds	r3, #1
    320c:	b2db      	uxtb	r3, r3
    320e:	73fb      	strb	r3, [r7, #15]
    3210:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3214:	2b03      	cmp	r3, #3
    3216:	ddd1      	ble.n	31bc <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3218:	f04f 33ff 	mov.w	r3, #4294967295
}
    321c:	4618      	mov	r0, r3
    321e:	3714      	adds	r7, #20
    3220:	46bd      	mov	sp, r7
    3222:	f85d 7b04 	ldr.w	r7, [sp], #4
    3226:	4770      	bx	lr
    3228:	20002088 	.word	0x20002088

0000322c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    322c:	b580      	push	{r7, lr}
    322e:	b088      	sub	sp, #32
    3230:	af00      	add	r7, sp, #0
    3232:	60ba      	str	r2, [r7, #8]
    3234:	607b      	str	r3, [r7, #4]
    3236:	4603      	mov	r3, r0
    3238:	73fb      	strb	r3, [r7, #15]
    323a:	460b      	mov	r3, r1
    323c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    323e:	68bb      	ldr	r3, [r7, #8]
    3240:	617b      	str	r3, [r7, #20]
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	61bb      	str	r3, [r7, #24]
    3246:	7bbb      	ldrb	r3, [r7, #14]
    3248:	2b00      	cmp	r3, #0
    324a:	d004      	beq.n	3256 <_usb_d_trans+0x2a>
    324c:	7bfb      	ldrb	r3, [r7, #15]
    324e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3252:	b2db      	uxtb	r3, r3
    3254:	e003      	b.n	325e <_usb_d_trans+0x32>
    3256:	7bfb      	ldrb	r3, [r7, #15]
    3258:	f003 030f 	and.w	r3, r3, #15
    325c:	b2db      	uxtb	r3, r3
    325e:	773b      	strb	r3, [r7, #28]
    3260:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3264:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3266:	f107 0314 	add.w	r3, r7, #20
    326a:	4618      	mov	r0, r3
    326c:	4b03      	ldr	r3, [pc, #12]	; (327c <_usb_d_trans+0x50>)
    326e:	4798      	blx	r3
    3270:	4603      	mov	r3, r0
}
    3272:	4618      	mov	r0, r3
    3274:	3720      	adds	r7, #32
    3276:	46bd      	mov	sp, r7
    3278:	bd80      	pop	{r7, pc}
    327a:	bf00      	nop
    327c:	0000addd 	.word	0x0000addd

00003280 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3280:	b480      	push	{r7}
    3282:	b085      	sub	sp, #20
    3284:	af00      	add	r7, sp, #0
    3286:	60f8      	str	r0, [r7, #12]
    3288:	60b9      	str	r1, [r7, #8]
    328a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    328c:	2300      	movs	r3, #0
}
    328e:	4618      	mov	r0, r3
    3290:	3714      	adds	r7, #20
    3292:	46bd      	mov	sp, r7
    3294:	f85d 7b04 	ldr.w	r7, [sp], #4
    3298:	4770      	bx	lr
	...

0000329c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    329c:	b580      	push	{r7, lr}
    329e:	b086      	sub	sp, #24
    32a0:	af00      	add	r7, sp, #0
    32a2:	4603      	mov	r3, r0
    32a4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    32a6:	79fb      	ldrb	r3, [r7, #7]
    32a8:	4618      	mov	r0, r3
    32aa:	4b2a      	ldr	r3, [pc, #168]	; (3354 <usb_d_cb_trans_setup+0xb8>)
    32ac:	4798      	blx	r3
    32ae:	4603      	mov	r3, r0
    32b0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    32b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    32b6:	015b      	lsls	r3, r3, #5
    32b8:	4a27      	ldr	r2, [pc, #156]	; (3358 <usb_d_cb_trans_setup+0xbc>)
    32ba:	4413      	add	r3, r2
    32bc:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    32be:	693b      	ldr	r3, [r7, #16]
    32c0:	330c      	adds	r3, #12
    32c2:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    32c4:	79fb      	ldrb	r3, [r7, #7]
    32c6:	68f9      	ldr	r1, [r7, #12]
    32c8:	4618      	mov	r0, r3
    32ca:	4b24      	ldr	r3, [pc, #144]	; (335c <usb_d_cb_trans_setup+0xc0>)
    32cc:	4798      	blx	r3
    32ce:	4603      	mov	r3, r0
    32d0:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    32d2:	7afb      	ldrb	r3, [r7, #11]
    32d4:	2b08      	cmp	r3, #8
    32d6:	d00d      	beq.n	32f4 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    32d8:	79fb      	ldrb	r3, [r7, #7]
    32da:	2101      	movs	r1, #1
    32dc:	4618      	mov	r0, r3
    32de:	4b20      	ldr	r3, [pc, #128]	; (3360 <usb_d_cb_trans_setup+0xc4>)
    32e0:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    32e2:	79fb      	ldrb	r3, [r7, #7]
    32e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    32e8:	b2db      	uxtb	r3, r3
    32ea:	2101      	movs	r1, #1
    32ec:	4618      	mov	r0, r3
    32ee:	4b1c      	ldr	r3, [pc, #112]	; (3360 <usb_d_cb_trans_setup+0xc4>)
    32f0:	4798      	blx	r3
		return;
    32f2:	e02b      	b.n	334c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    32f4:	79fb      	ldrb	r3, [r7, #7]
    32f6:	2100      	movs	r1, #0
    32f8:	4618      	mov	r0, r3
    32fa:	4b19      	ldr	r3, [pc, #100]	; (3360 <usb_d_cb_trans_setup+0xc4>)
    32fc:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    32fe:	79fb      	ldrb	r3, [r7, #7]
    3300:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3304:	b2db      	uxtb	r3, r3
    3306:	2100      	movs	r1, #0
    3308:	4618      	mov	r0, r3
    330a:	4b15      	ldr	r3, [pc, #84]	; (3360 <usb_d_cb_trans_setup+0xc4>)
    330c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    330e:	693b      	ldr	r3, [r7, #16]
    3310:	2201      	movs	r2, #1
    3312:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3314:	693b      	ldr	r3, [r7, #16]
    3316:	695b      	ldr	r3, [r3, #20]
    3318:	79fa      	ldrb	r2, [r7, #7]
    331a:	68f9      	ldr	r1, [r7, #12]
    331c:	4610      	mov	r0, r2
    331e:	4798      	blx	r3
    3320:	4603      	mov	r3, r0
    3322:	f083 0301 	eor.w	r3, r3, #1
    3326:	b2db      	uxtb	r3, r3
    3328:	2b00      	cmp	r3, #0
    332a:	d00f      	beq.n	334c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    332c:	693b      	ldr	r3, [r7, #16]
    332e:	2205      	movs	r2, #5
    3330:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3332:	79fb      	ldrb	r3, [r7, #7]
    3334:	2101      	movs	r1, #1
    3336:	4618      	mov	r0, r3
    3338:	4b09      	ldr	r3, [pc, #36]	; (3360 <usb_d_cb_trans_setup+0xc4>)
    333a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    333c:	79fb      	ldrb	r3, [r7, #7]
    333e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3342:	b2db      	uxtb	r3, r3
    3344:	2101      	movs	r1, #1
    3346:	4618      	mov	r0, r3
    3348:	4b05      	ldr	r3, [pc, #20]	; (3360 <usb_d_cb_trans_setup+0xc4>)
    334a:	4798      	blx	r3
	}
}
    334c:	3718      	adds	r7, #24
    334e:	46bd      	mov	sp, r7
    3350:	bd80      	pop	{r7, pc}
    3352:	bf00      	nop
    3354:	000031ad 	.word	0x000031ad
    3358:	20002088 	.word	0x20002088
    335c:	0000ad35 	.word	0x0000ad35
    3360:	0000abad 	.word	0x0000abad

00003364 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3364:	b580      	push	{r7, lr}
    3366:	b084      	sub	sp, #16
    3368:	af00      	add	r7, sp, #0
    336a:	4603      	mov	r3, r0
    336c:	6039      	str	r1, [r7, #0]
    336e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3370:	79fb      	ldrb	r3, [r7, #7]
    3372:	4618      	mov	r0, r3
    3374:	4b0d      	ldr	r3, [pc, #52]	; (33ac <usb_d_cb_trans_more+0x48>)
    3376:	4798      	blx	r3
    3378:	4603      	mov	r3, r0
    337a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    337c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3380:	015b      	lsls	r3, r3, #5
    3382:	4a0b      	ldr	r2, [pc, #44]	; (33b0 <usb_d_cb_trans_more+0x4c>)
    3384:	4413      	add	r3, r2
    3386:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3388:	68bb      	ldr	r3, [r7, #8]
    338a:	789b      	ldrb	r3, [r3, #2]
    338c:	2b03      	cmp	r3, #3
    338e:	d107      	bne.n	33a0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3390:	68bb      	ldr	r3, [r7, #8]
    3392:	699b      	ldr	r3, [r3, #24]
    3394:	79fa      	ldrb	r2, [r7, #7]
    3396:	6839      	ldr	r1, [r7, #0]
    3398:	4610      	mov	r0, r2
    339a:	4798      	blx	r3
    339c:	4603      	mov	r3, r0
    339e:	e000      	b.n	33a2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    33a0:	2300      	movs	r3, #0
}
    33a2:	4618      	mov	r0, r3
    33a4:	3710      	adds	r7, #16
    33a6:	46bd      	mov	sp, r7
    33a8:	bd80      	pop	{r7, pc}
    33aa:	bf00      	nop
    33ac:	000031ad 	.word	0x000031ad
    33b0:	20002088 	.word	0x20002088

000033b4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    33b4:	b590      	push	{r4, r7, lr}
    33b6:	b087      	sub	sp, #28
    33b8:	af02      	add	r7, sp, #8
    33ba:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    33bc:	687b      	ldr	r3, [r7, #4]
    33be:	789b      	ldrb	r3, [r3, #2]
    33c0:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    33c2:	687b      	ldr	r3, [r7, #4]
    33c4:	7b1b      	ldrb	r3, [r3, #12]
    33c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    33ca:	2b00      	cmp	r3, #0
    33cc:	bf14      	ite	ne
    33ce:	2301      	movne	r3, #1
    33d0:	2300      	moveq	r3, #0
    33d2:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    33d4:	7bfb      	ldrb	r3, [r7, #15]
    33d6:	2b03      	cmp	r3, #3
    33d8:	d13a      	bne.n	3450 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    33da:	687b      	ldr	r3, [r7, #4]
    33dc:	69db      	ldr	r3, [r3, #28]
    33de:	687a      	ldr	r2, [r7, #4]
    33e0:	7850      	ldrb	r0, [r2, #1]
    33e2:	687a      	ldr	r2, [r7, #4]
    33e4:	320c      	adds	r2, #12
    33e6:	2101      	movs	r1, #1
    33e8:	4798      	blx	r3
    33ea:	4603      	mov	r3, r0
    33ec:	737b      	strb	r3, [r7, #13]
		if (err) {
    33ee:	7b7b      	ldrb	r3, [r7, #13]
    33f0:	2b00      	cmp	r3, #0
    33f2:	d015      	beq.n	3420 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    33f4:	687b      	ldr	r3, [r7, #4]
    33f6:	2205      	movs	r2, #5
    33f8:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    33fa:	687b      	ldr	r3, [r7, #4]
    33fc:	2202      	movs	r2, #2
    33fe:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3400:	7bbb      	ldrb	r3, [r7, #14]
    3402:	2b00      	cmp	r3, #0
    3404:	d002      	beq.n	340c <usb_d_ctrl_trans_done+0x58>
    3406:	687b      	ldr	r3, [r7, #4]
    3408:	785b      	ldrb	r3, [r3, #1]
    340a:	e004      	b.n	3416 <usb_d_ctrl_trans_done+0x62>
    340c:	687b      	ldr	r3, [r7, #4]
    340e:	785b      	ldrb	r3, [r3, #1]
    3410:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3414:	b2db      	uxtb	r3, r3
    3416:	2101      	movs	r1, #1
    3418:	4618      	mov	r0, r3
    341a:	4b15      	ldr	r3, [pc, #84]	; (3470 <usb_d_ctrl_trans_done+0xbc>)
    341c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    341e:	e022      	b.n	3466 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3420:	687b      	ldr	r3, [r7, #4]
    3422:	2204      	movs	r2, #4
    3424:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3426:	687b      	ldr	r3, [r7, #4]
    3428:	7858      	ldrb	r0, [r3, #1]
    342a:	7bbb      	ldrb	r3, [r7, #14]
    342c:	2b00      	cmp	r3, #0
    342e:	bf14      	ite	ne
    3430:	2301      	movne	r3, #1
    3432:	2300      	moveq	r3, #0
    3434:	b2db      	uxtb	r3, r3
    3436:	f083 0301 	eor.w	r3, r3, #1
    343a:	b2db      	uxtb	r3, r3
    343c:	f003 0301 	and.w	r3, r3, #1
    3440:	b2d9      	uxtb	r1, r3
    3442:	2301      	movs	r3, #1
    3444:	9300      	str	r3, [sp, #0]
    3446:	2300      	movs	r3, #0
    3448:	2200      	movs	r2, #0
    344a:	4c0a      	ldr	r4, [pc, #40]	; (3474 <usb_d_ctrl_trans_done+0xc0>)
    344c:	47a0      	blx	r4
}
    344e:	e00a      	b.n	3466 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3450:	687b      	ldr	r3, [r7, #4]
    3452:	69db      	ldr	r3, [r3, #28]
    3454:	687a      	ldr	r2, [r7, #4]
    3456:	7850      	ldrb	r0, [r2, #1]
    3458:	687a      	ldr	r2, [r7, #4]
    345a:	320c      	adds	r2, #12
    345c:	2100      	movs	r1, #0
    345e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3460:	687b      	ldr	r3, [r7, #4]
    3462:	2202      	movs	r2, #2
    3464:	709a      	strb	r2, [r3, #2]
}
    3466:	bf00      	nop
    3468:	3714      	adds	r7, #20
    346a:	46bd      	mov	sp, r7
    346c:	bd90      	pop	{r4, r7, pc}
    346e:	bf00      	nop
    3470:	0000abad 	.word	0x0000abad
    3474:	0000322d 	.word	0x0000322d

00003478 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3478:	b580      	push	{r7, lr}
    347a:	b086      	sub	sp, #24
    347c:	af00      	add	r7, sp, #0
    347e:	4603      	mov	r3, r0
    3480:	60b9      	str	r1, [r7, #8]
    3482:	607a      	str	r2, [r7, #4]
    3484:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3486:	7bfb      	ldrb	r3, [r7, #15]
    3488:	4618      	mov	r0, r3
    348a:	4b2f      	ldr	r3, [pc, #188]	; (3548 <_usb_d_cb_trans_done+0xd0>)
    348c:	4798      	blx	r3
    348e:	4603      	mov	r3, r0
    3490:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3492:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3496:	015b      	lsls	r3, r3, #5
    3498:	4a2c      	ldr	r2, [pc, #176]	; (354c <_usb_d_cb_trans_done+0xd4>)
    349a:	4413      	add	r3, r2
    349c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    349e:	68bb      	ldr	r3, [r7, #8]
    34a0:	2b00      	cmp	r3, #0
    34a2:	d10e      	bne.n	34c2 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    34a4:	693b      	ldr	r3, [r7, #16]
    34a6:	2200      	movs	r2, #0
    34a8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    34aa:	693b      	ldr	r3, [r7, #16]
    34ac:	781b      	ldrb	r3, [r3, #0]
    34ae:	2b00      	cmp	r3, #0
    34b0:	d103      	bne.n	34ba <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    34b2:	6938      	ldr	r0, [r7, #16]
    34b4:	4b26      	ldr	r3, [pc, #152]	; (3550 <_usb_d_cb_trans_done+0xd8>)
    34b6:	4798      	blx	r3
			return;
    34b8:	e043      	b.n	3542 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    34ba:	693b      	ldr	r3, [r7, #16]
    34bc:	2201      	movs	r2, #1
    34be:	709a      	strb	r2, [r3, #2]
    34c0:	e038      	b.n	3534 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    34c2:	68bb      	ldr	r3, [r7, #8]
    34c4:	2b01      	cmp	r3, #1
    34c6:	d113      	bne.n	34f0 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    34c8:	693b      	ldr	r3, [r7, #16]
    34ca:	2202      	movs	r2, #2
    34cc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    34ce:	693b      	ldr	r3, [r7, #16]
    34d0:	781b      	ldrb	r3, [r3, #0]
    34d2:	2b00      	cmp	r3, #0
    34d4:	d108      	bne.n	34e8 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    34d6:	693b      	ldr	r3, [r7, #16]
    34d8:	2202      	movs	r2, #2
    34da:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    34dc:	7bfb      	ldrb	r3, [r7, #15]
    34de:	2100      	movs	r1, #0
    34e0:	4618      	mov	r0, r3
    34e2:	4b1c      	ldr	r3, [pc, #112]	; (3554 <_usb_d_cb_trans_done+0xdc>)
    34e4:	4798      	blx	r3
    34e6:	e025      	b.n	3534 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    34e8:	693b      	ldr	r3, [r7, #16]
    34ea:	2205      	movs	r2, #5
    34ec:	709a      	strb	r2, [r3, #2]
    34ee:	e021      	b.n	3534 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    34f0:	68bb      	ldr	r3, [r7, #8]
    34f2:	2b02      	cmp	r3, #2
    34f4:	d10e      	bne.n	3514 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    34f6:	693b      	ldr	r3, [r7, #16]
    34f8:	2204      	movs	r2, #4
    34fa:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    34fc:	693b      	ldr	r3, [r7, #16]
    34fe:	781b      	ldrb	r3, [r3, #0]
    3500:	2b00      	cmp	r3, #0
    3502:	d103      	bne.n	350c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3504:	693b      	ldr	r3, [r7, #16]
    3506:	2202      	movs	r2, #2
    3508:	709a      	strb	r2, [r3, #2]
			return;
    350a:	e01a      	b.n	3542 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    350c:	693b      	ldr	r3, [r7, #16]
    350e:	2201      	movs	r2, #1
    3510:	709a      	strb	r2, [r3, #2]
    3512:	e00f      	b.n	3534 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3514:	68bb      	ldr	r3, [r7, #8]
    3516:	2b03      	cmp	r3, #3
    3518:	d106      	bne.n	3528 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    351a:	693b      	ldr	r3, [r7, #16]
    351c:	2200      	movs	r2, #0
    351e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3520:	693b      	ldr	r3, [r7, #16]
    3522:	2205      	movs	r2, #5
    3524:	70da      	strb	r2, [r3, #3]
    3526:	e005      	b.n	3534 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3528:	693b      	ldr	r3, [r7, #16]
    352a:	2206      	movs	r2, #6
    352c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    352e:	693b      	ldr	r3, [r7, #16]
    3530:	2206      	movs	r2, #6
    3532:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3534:	693b      	ldr	r3, [r7, #16]
    3536:	69db      	ldr	r3, [r3, #28]
    3538:	693a      	ldr	r2, [r7, #16]
    353a:	78d1      	ldrb	r1, [r2, #3]
    353c:	687a      	ldr	r2, [r7, #4]
    353e:	7bf8      	ldrb	r0, [r7, #15]
    3540:	4798      	blx	r3
}
    3542:	3718      	adds	r7, #24
    3544:	46bd      	mov	sp, r7
    3546:	bd80      	pop	{r7, pc}
    3548:	000031ad 	.word	0x000031ad
    354c:	20002088 	.word	0x20002088
    3550:	000033b5 	.word	0x000033b5
    3554:	0000abad 	.word	0x0000abad

00003558 <usb_d_init>:

int32_t usb_d_init(void)
{
    3558:	b580      	push	{r7, lr}
    355a:	b082      	sub	sp, #8
    355c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    355e:	4b21      	ldr	r3, [pc, #132]	; (35e4 <usb_d_init+0x8c>)
    3560:	4798      	blx	r3
    3562:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3564:	683b      	ldr	r3, [r7, #0]
    3566:	2b00      	cmp	r3, #0
    3568:	da01      	bge.n	356e <usb_d_init+0x16>
		return rc;
    356a:	683b      	ldr	r3, [r7, #0]
    356c:	e036      	b.n	35dc <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    356e:	2280      	movs	r2, #128	; 0x80
    3570:	2100      	movs	r1, #0
    3572:	481d      	ldr	r0, [pc, #116]	; (35e8 <usb_d_init+0x90>)
    3574:	4b1d      	ldr	r3, [pc, #116]	; (35ec <usb_d_init+0x94>)
    3576:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3578:	2300      	movs	r3, #0
    357a:	71fb      	strb	r3, [r7, #7]
    357c:	e01e      	b.n	35bc <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    357e:	79fb      	ldrb	r3, [r7, #7]
    3580:	4a19      	ldr	r2, [pc, #100]	; (35e8 <usb_d_init+0x90>)
    3582:	015b      	lsls	r3, r3, #5
    3584:	4413      	add	r3, r2
    3586:	3301      	adds	r3, #1
    3588:	22ff      	movs	r2, #255	; 0xff
    358a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    358c:	79fb      	ldrb	r3, [r7, #7]
    358e:	4a16      	ldr	r2, [pc, #88]	; (35e8 <usb_d_init+0x90>)
    3590:	015b      	lsls	r3, r3, #5
    3592:	4413      	add	r3, r2
    3594:	3314      	adds	r3, #20
    3596:	4a16      	ldr	r2, [pc, #88]	; (35f0 <usb_d_init+0x98>)
    3598:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    359a:	79fb      	ldrb	r3, [r7, #7]
    359c:	4a12      	ldr	r2, [pc, #72]	; (35e8 <usb_d_init+0x90>)
    359e:	015b      	lsls	r3, r3, #5
    35a0:	4413      	add	r3, r2
    35a2:	3318      	adds	r3, #24
    35a4:	4a12      	ldr	r2, [pc, #72]	; (35f0 <usb_d_init+0x98>)
    35a6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    35a8:	79fb      	ldrb	r3, [r7, #7]
    35aa:	4a0f      	ldr	r2, [pc, #60]	; (35e8 <usb_d_init+0x90>)
    35ac:	015b      	lsls	r3, r3, #5
    35ae:	4413      	add	r3, r2
    35b0:	331c      	adds	r3, #28
    35b2:	4a0f      	ldr	r2, [pc, #60]	; (35f0 <usb_d_init+0x98>)
    35b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    35b6:	79fb      	ldrb	r3, [r7, #7]
    35b8:	3301      	adds	r3, #1
    35ba:	71fb      	strb	r3, [r7, #7]
    35bc:	79fb      	ldrb	r3, [r7, #7]
    35be:	2b03      	cmp	r3, #3
    35c0:	d9dd      	bls.n	357e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    35c2:	490c      	ldr	r1, [pc, #48]	; (35f4 <usb_d_init+0x9c>)
    35c4:	2000      	movs	r0, #0
    35c6:	4b0c      	ldr	r3, [pc, #48]	; (35f8 <usb_d_init+0xa0>)
    35c8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    35ca:	490c      	ldr	r1, [pc, #48]	; (35fc <usb_d_init+0xa4>)
    35cc:	2001      	movs	r0, #1
    35ce:	4b0a      	ldr	r3, [pc, #40]	; (35f8 <usb_d_init+0xa0>)
    35d0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    35d2:	490b      	ldr	r1, [pc, #44]	; (3600 <usb_d_init+0xa8>)
    35d4:	2002      	movs	r0, #2
    35d6:	4b08      	ldr	r3, [pc, #32]	; (35f8 <usb_d_init+0xa0>)
    35d8:	4798      	blx	r3
	return ERR_NONE;
    35da:	2300      	movs	r3, #0
}
    35dc:	4618      	mov	r0, r3
    35de:	3708      	adds	r7, #8
    35e0:	46bd      	mov	sp, r7
    35e2:	bd80      	pop	{r7, pc}
    35e4:	0000a3f5 	.word	0x0000a3f5
    35e8:	20002088 	.word	0x20002088
    35ec:	00010441 	.word	0x00010441
    35f0:	00003281 	.word	0x00003281
    35f4:	0000329d 	.word	0x0000329d
    35f8:	0000b03d 	.word	0x0000b03d
    35fc:	00003365 	.word	0x00003365
    3600:	00003479 	.word	0x00003479

00003604 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3604:	b580      	push	{r7, lr}
    3606:	b082      	sub	sp, #8
    3608:	af00      	add	r7, sp, #0
    360a:	4603      	mov	r3, r0
    360c:	6039      	str	r1, [r7, #0]
    360e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3610:	79fb      	ldrb	r3, [r7, #7]
    3612:	6839      	ldr	r1, [r7, #0]
    3614:	4618      	mov	r0, r3
    3616:	4b03      	ldr	r3, [pc, #12]	; (3624 <usb_d_register_callback+0x20>)
    3618:	4798      	blx	r3
}
    361a:	bf00      	nop
    361c:	3708      	adds	r7, #8
    361e:	46bd      	mov	sp, r7
    3620:	bd80      	pop	{r7, pc}
    3622:	bf00      	nop
    3624:	0000aff5 	.word	0x0000aff5

00003628 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3628:	b580      	push	{r7, lr}
    362a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    362c:	4b02      	ldr	r3, [pc, #8]	; (3638 <usb_d_enable+0x10>)
    362e:	4798      	blx	r3
    3630:	4603      	mov	r3, r0
}
    3632:	4618      	mov	r0, r3
    3634:	bd80      	pop	{r7, pc}
    3636:	bf00      	nop
    3638:	0000a4e5 	.word	0x0000a4e5

0000363c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    363c:	b580      	push	{r7, lr}
    363e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3640:	4b01      	ldr	r3, [pc, #4]	; (3648 <usb_d_attach+0xc>)
    3642:	4798      	blx	r3
}
    3644:	bf00      	nop
    3646:	bd80      	pop	{r7, pc}
    3648:	0000a569 	.word	0x0000a569

0000364c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    364c:	b580      	push	{r7, lr}
    364e:	b082      	sub	sp, #8
    3650:	af00      	add	r7, sp, #0
    3652:	4603      	mov	r3, r0
    3654:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3656:	79fb      	ldrb	r3, [r7, #7]
    3658:	4618      	mov	r0, r3
    365a:	4b03      	ldr	r3, [pc, #12]	; (3668 <usb_d_set_address+0x1c>)
    365c:	4798      	blx	r3
}
    365e:	bf00      	nop
    3660:	3708      	adds	r7, #8
    3662:	46bd      	mov	sp, r7
    3664:	bd80      	pop	{r7, pc}
    3666:	bf00      	nop
    3668:	0000a57d 	.word	0x0000a57d

0000366c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    366c:	b580      	push	{r7, lr}
    366e:	b082      	sub	sp, #8
    3670:	af00      	add	r7, sp, #0
    3672:	4603      	mov	r3, r0
    3674:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3676:	79fb      	ldrb	r3, [r7, #7]
    3678:	b29b      	uxth	r3, r3
    367a:	461a      	mov	r2, r3
    367c:	2100      	movs	r1, #0
    367e:	2000      	movs	r0, #0
    3680:	4b03      	ldr	r3, [pc, #12]	; (3690 <usb_d_ep0_init+0x24>)
    3682:	4798      	blx	r3
    3684:	4603      	mov	r3, r0
}
    3686:	4618      	mov	r0, r3
    3688:	3708      	adds	r7, #8
    368a:	46bd      	mov	sp, r7
    368c:	bd80      	pop	{r7, pc}
    368e:	bf00      	nop
    3690:	00003695 	.word	0x00003695

00003694 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3694:	b580      	push	{r7, lr}
    3696:	b086      	sub	sp, #24
    3698:	af00      	add	r7, sp, #0
    369a:	4603      	mov	r3, r0
    369c:	71fb      	strb	r3, [r7, #7]
    369e:	460b      	mov	r3, r1
    36a0:	71bb      	strb	r3, [r7, #6]
    36a2:	4613      	mov	r3, r2
    36a4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    36a6:	79fb      	ldrb	r3, [r7, #7]
    36a8:	4618      	mov	r0, r3
    36aa:	4b1e      	ldr	r3, [pc, #120]	; (3724 <usb_d_ep_init+0x90>)
    36ac:	4798      	blx	r3
    36ae:	4603      	mov	r3, r0
    36b0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    36b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36b6:	015b      	lsls	r3, r3, #5
    36b8:	4a1b      	ldr	r2, [pc, #108]	; (3728 <usb_d_ep_init+0x94>)
    36ba:	4413      	add	r3, r2
    36bc:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    36be:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36c2:	2b00      	cmp	r3, #0
    36c4:	db02      	blt.n	36cc <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    36c6:	f06f 0313 	mvn.w	r3, #19
    36ca:	e027      	b.n	371c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    36cc:	20ff      	movs	r0, #255	; 0xff
    36ce:	4b15      	ldr	r3, [pc, #84]	; (3724 <usb_d_ep_init+0x90>)
    36d0:	4798      	blx	r3
    36d2:	4603      	mov	r3, r0
    36d4:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    36d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36da:	2b00      	cmp	r3, #0
    36dc:	da02      	bge.n	36e4 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    36de:	f06f 0314 	mvn.w	r3, #20
    36e2:	e01b      	b.n	371c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    36e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36e8:	015b      	lsls	r3, r3, #5
    36ea:	4a0f      	ldr	r2, [pc, #60]	; (3728 <usb_d_ep_init+0x94>)
    36ec:	4413      	add	r3, r2
    36ee:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    36f0:	88ba      	ldrh	r2, [r7, #4]
    36f2:	79b9      	ldrb	r1, [r7, #6]
    36f4:	79fb      	ldrb	r3, [r7, #7]
    36f6:	4618      	mov	r0, r3
    36f8:	4b0c      	ldr	r3, [pc, #48]	; (372c <usb_d_ep_init+0x98>)
    36fa:	4798      	blx	r3
    36fc:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    36fe:	68fb      	ldr	r3, [r7, #12]
    3700:	2b00      	cmp	r3, #0
    3702:	da01      	bge.n	3708 <usb_d_ep_init+0x74>
		return rc;
    3704:	68fb      	ldr	r3, [r7, #12]
    3706:	e009      	b.n	371c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3708:	693b      	ldr	r3, [r7, #16]
    370a:	79fa      	ldrb	r2, [r7, #7]
    370c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    370e:	79bb      	ldrb	r3, [r7, #6]
    3710:	f003 0303 	and.w	r3, r3, #3
    3714:	b2da      	uxtb	r2, r3
    3716:	693b      	ldr	r3, [r7, #16]
    3718:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    371a:	2300      	movs	r3, #0
}
    371c:	4618      	mov	r0, r3
    371e:	3718      	adds	r7, #24
    3720:	46bd      	mov	sp, r7
    3722:	bd80      	pop	{r7, pc}
    3724:	000031ad 	.word	0x000031ad
    3728:	20002088 	.word	0x20002088
    372c:	0000a61d 	.word	0x0000a61d

00003730 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3730:	b580      	push	{r7, lr}
    3732:	b084      	sub	sp, #16
    3734:	af00      	add	r7, sp, #0
    3736:	4603      	mov	r3, r0
    3738:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    373a:	79fb      	ldrb	r3, [r7, #7]
    373c:	4618      	mov	r0, r3
    373e:	4b0d      	ldr	r3, [pc, #52]	; (3774 <usb_d_ep_deinit+0x44>)
    3740:	4798      	blx	r3
    3742:	4603      	mov	r3, r0
    3744:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3746:	f997 300f 	ldrsb.w	r3, [r7, #15]
    374a:	015b      	lsls	r3, r3, #5
    374c:	4a0a      	ldr	r2, [pc, #40]	; (3778 <usb_d_ep_deinit+0x48>)
    374e:	4413      	add	r3, r2
    3750:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3752:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3756:	2b00      	cmp	r3, #0
    3758:	db07      	blt.n	376a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    375a:	79fb      	ldrb	r3, [r7, #7]
    375c:	4618      	mov	r0, r3
    375e:	4b07      	ldr	r3, [pc, #28]	; (377c <usb_d_ep_deinit+0x4c>)
    3760:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3762:	68bb      	ldr	r3, [r7, #8]
    3764:	22ff      	movs	r2, #255	; 0xff
    3766:	705a      	strb	r2, [r3, #1]
    3768:	e000      	b.n	376c <usb_d_ep_deinit+0x3c>
		return;
    376a:	bf00      	nop
}
    376c:	3710      	adds	r7, #16
    376e:	46bd      	mov	sp, r7
    3770:	bd80      	pop	{r7, pc}
    3772:	bf00      	nop
    3774:	000031ad 	.word	0x000031ad
    3778:	20002088 	.word	0x20002088
    377c:	0000a751 	.word	0x0000a751

00003780 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3780:	b580      	push	{r7, lr}
    3782:	b086      	sub	sp, #24
    3784:	af00      	add	r7, sp, #0
    3786:	4603      	mov	r3, r0
    3788:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    378a:	79fb      	ldrb	r3, [r7, #7]
    378c:	4618      	mov	r0, r3
    378e:	4b15      	ldr	r3, [pc, #84]	; (37e4 <usb_d_ep_enable+0x64>)
    3790:	4798      	blx	r3
    3792:	4603      	mov	r3, r0
    3794:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3796:	f997 3017 	ldrsb.w	r3, [r7, #23]
    379a:	015b      	lsls	r3, r3, #5
    379c:	4a12      	ldr	r2, [pc, #72]	; (37e8 <usb_d_ep_enable+0x68>)
    379e:	4413      	add	r3, r2
    37a0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    37a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37a6:	2b00      	cmp	r3, #0
    37a8:	da02      	bge.n	37b0 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    37aa:	f06f 0311 	mvn.w	r3, #17
    37ae:	e014      	b.n	37da <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    37b0:	693b      	ldr	r3, [r7, #16]
    37b2:	781b      	ldrb	r3, [r3, #0]
    37b4:	2b00      	cmp	r3, #0
    37b6:	d101      	bne.n	37bc <usb_d_ep_enable+0x3c>
    37b8:	2202      	movs	r2, #2
    37ba:	e000      	b.n	37be <usb_d_ep_enable+0x3e>
    37bc:	2201      	movs	r2, #1
    37be:	693b      	ldr	r3, [r7, #16]
    37c0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    37c2:	79fb      	ldrb	r3, [r7, #7]
    37c4:	4618      	mov	r0, r3
    37c6:	4b09      	ldr	r3, [pc, #36]	; (37ec <usb_d_ep_enable+0x6c>)
    37c8:	4798      	blx	r3
    37ca:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    37cc:	68fb      	ldr	r3, [r7, #12]
    37ce:	2b00      	cmp	r3, #0
    37d0:	da02      	bge.n	37d8 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    37d2:	693b      	ldr	r3, [r7, #16]
    37d4:	2200      	movs	r2, #0
    37d6:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    37d8:	68fb      	ldr	r3, [r7, #12]
}
    37da:	4618      	mov	r0, r3
    37dc:	3718      	adds	r7, #24
    37de:	46bd      	mov	sp, r7
    37e0:	bd80      	pop	{r7, pc}
    37e2:	bf00      	nop
    37e4:	000031ad 	.word	0x000031ad
    37e8:	20002088 	.word	0x20002088
    37ec:	0000a835 	.word	0x0000a835

000037f0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    37f0:	b590      	push	{r4, r7, lr}
    37f2:	b08d      	sub	sp, #52	; 0x34
    37f4:	af02      	add	r7, sp, #8
    37f6:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    37f8:	687b      	ldr	r3, [r7, #4]
    37fa:	7a1b      	ldrb	r3, [r3, #8]
    37fc:	4618      	mov	r0, r3
    37fe:	4b51      	ldr	r3, [pc, #324]	; (3944 <usb_d_ep_transfer+0x154>)
    3800:	4798      	blx	r3
    3802:	4603      	mov	r3, r0
    3804:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3806:	f997 301f 	ldrsb.w	r3, [r7, #31]
    380a:	015b      	lsls	r3, r3, #5
    380c:	4a4e      	ldr	r2, [pc, #312]	; (3948 <usb_d_ep_transfer+0x158>)
    380e:	4413      	add	r3, r2
    3810:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	7a1b      	ldrb	r3, [r3, #8]
    3816:	f003 0380 	and.w	r3, r3, #128	; 0x80
    381a:	2b00      	cmp	r3, #0
    381c:	bf14      	ite	ne
    381e:	2301      	movne	r3, #1
    3820:	2300      	moveq	r3, #0
    3822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3826:	687b      	ldr	r3, [r7, #4]
    3828:	7a5b      	ldrb	r3, [r3, #9]
    382a:	2b00      	cmp	r3, #0
    382c:	bf14      	ite	ne
    382e:	2301      	movne	r3, #1
    3830:	2300      	moveq	r3, #0
    3832:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3836:	687b      	ldr	r3, [r7, #4]
    3838:	685b      	ldr	r3, [r3, #4]
    383a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    383c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3840:	2b00      	cmp	r3, #0
    3842:	da02      	bge.n	384a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3844:	f06f 0311 	mvn.w	r3, #17
    3848:	e077      	b.n	393a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    384a:	f107 0308 	add.w	r3, r7, #8
    384e:	4618      	mov	r0, r3
    3850:	4b3e      	ldr	r3, [pc, #248]	; (394c <usb_d_ep_transfer+0x15c>)
    3852:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3854:	69bb      	ldr	r3, [r7, #24]
    3856:	789b      	ldrb	r3, [r3, #2]
    3858:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    385a:	7bfb      	ldrb	r3, [r7, #15]
    385c:	b2db      	uxtb	r3, r3
    385e:	2b01      	cmp	r3, #1
    3860:	d10c      	bne.n	387c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3862:	69bb      	ldr	r3, [r7, #24]
    3864:	2203      	movs	r2, #3
    3866:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3868:	f107 0308 	add.w	r3, r7, #8
    386c:	4618      	mov	r0, r3
    386e:	4b38      	ldr	r3, [pc, #224]	; (3950 <usb_d_ep_transfer+0x160>)
    3870:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3872:	69bb      	ldr	r3, [r7, #24]
    3874:	781b      	ldrb	r3, [r3, #0]
    3876:	2b00      	cmp	r3, #0
    3878:	d151      	bne.n	391e <usb_d_ep_transfer+0x12e>
    387a:	e017      	b.n	38ac <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    387c:	f107 0308 	add.w	r3, r7, #8
    3880:	4618      	mov	r0, r3
    3882:	4b33      	ldr	r3, [pc, #204]	; (3950 <usb_d_ep_transfer+0x160>)
    3884:	4798      	blx	r3
		switch (state) {
    3886:	7bfb      	ldrb	r3, [r7, #15]
    3888:	b2db      	uxtb	r3, r3
    388a:	2b05      	cmp	r3, #5
    388c:	d004      	beq.n	3898 <usb_d_ep_transfer+0xa8>
    388e:	2b06      	cmp	r3, #6
    3890:	d004      	beq.n	389c <usb_d_ep_transfer+0xac>
    3892:	2b00      	cmp	r3, #0
    3894:	d005      	beq.n	38a2 <usb_d_ep_transfer+0xb2>
    3896:	e007      	b.n	38a8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3898:	2302      	movs	r3, #2
    389a:	e04e      	b.n	393a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    389c:	f06f 030f 	mvn.w	r3, #15
    38a0:	e04b      	b.n	393a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    38a2:	f06f 0312 	mvn.w	r3, #18
    38a6:	e048      	b.n	393a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    38a8:	2301      	movs	r3, #1
    38aa:	e046      	b.n	393a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    38ac:	69bb      	ldr	r3, [r7, #24]
    38ae:	7c9b      	ldrb	r3, [r3, #18]
    38b0:	b29a      	uxth	r2, r3
    38b2:	69bb      	ldr	r3, [r7, #24]
    38b4:	7cdb      	ldrb	r3, [r3, #19]
    38b6:	b29b      	uxth	r3, r3
    38b8:	021b      	lsls	r3, r3, #8
    38ba:	b29b      	uxth	r3, r3
    38bc:	4413      	add	r3, r2
    38be:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    38c0:	8afb      	ldrh	r3, [r7, #22]
    38c2:	2b00      	cmp	r3, #0
    38c4:	d10b      	bne.n	38de <usb_d_ep_transfer+0xee>
			dir                 = true;
    38c6:	2301      	movs	r3, #1
    38c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    38cc:	2300      	movs	r3, #0
    38ce:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    38d0:	2301      	movs	r3, #1
    38d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    38d6:	69bb      	ldr	r3, [r7, #24]
    38d8:	2204      	movs	r2, #4
    38da:	709a      	strb	r2, [r3, #2]
    38dc:	e01f      	b.n	391e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    38de:	69bb      	ldr	r3, [r7, #24]
    38e0:	7b1b      	ldrb	r3, [r3, #12]
    38e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    38e6:	2b00      	cmp	r3, #0
    38e8:	bf14      	ite	ne
    38ea:	2301      	movne	r3, #1
    38ec:	2300      	moveq	r3, #0
    38ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    38f2:	8afa      	ldrh	r2, [r7, #22]
    38f4:	6a3b      	ldr	r3, [r7, #32]
    38f6:	429a      	cmp	r2, r3
    38f8:	d201      	bcs.n	38fe <usb_d_ep_transfer+0x10e>
				len = req_len;
    38fa:	8afb      	ldrh	r3, [r7, #22]
    38fc:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    38fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3902:	2b00      	cmp	r3, #0
    3904:	d008      	beq.n	3918 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3906:	8afa      	ldrh	r2, [r7, #22]
    3908:	6a3b      	ldr	r3, [r7, #32]
    390a:	429a      	cmp	r2, r3
    390c:	bf8c      	ite	hi
    390e:	2301      	movhi	r3, #1
    3910:	2300      	movls	r3, #0
    3912:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3916:	e002      	b.n	391e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3918:	2300      	movs	r3, #0
    391a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	7a18      	ldrb	r0, [r3, #8]
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	681a      	ldr	r2, [r3, #0]
    3926:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    392a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    392e:	9300      	str	r3, [sp, #0]
    3930:	6a3b      	ldr	r3, [r7, #32]
    3932:	4c08      	ldr	r4, [pc, #32]	; (3954 <usb_d_ep_transfer+0x164>)
    3934:	47a0      	blx	r4
    3936:	6138      	str	r0, [r7, #16]
	return rc;
    3938:	693b      	ldr	r3, [r7, #16]
}
    393a:	4618      	mov	r0, r3
    393c:	372c      	adds	r7, #44	; 0x2c
    393e:	46bd      	mov	sp, r7
    3940:	bd90      	pop	{r4, r7, pc}
    3942:	bf00      	nop
    3944:	000031ad 	.word	0x000031ad
    3948:	20002088 	.word	0x20002088
    394c:	0000b7a9 	.word	0x0000b7a9
    3950:	0000b7cf 	.word	0x0000b7cf
    3954:	0000322d 	.word	0x0000322d

00003958 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3958:	b580      	push	{r7, lr}
    395a:	b084      	sub	sp, #16
    395c:	af00      	add	r7, sp, #0
    395e:	4603      	mov	r3, r0
    3960:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3962:	79fb      	ldrb	r3, [r7, #7]
    3964:	4618      	mov	r0, r3
    3966:	4b0e      	ldr	r3, [pc, #56]	; (39a0 <usb_d_ep_abort+0x48>)
    3968:	4798      	blx	r3
    396a:	4603      	mov	r3, r0
    396c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    396e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3972:	015b      	lsls	r3, r3, #5
    3974:	4a0b      	ldr	r2, [pc, #44]	; (39a4 <usb_d_ep_abort+0x4c>)
    3976:	4413      	add	r3, r2
    3978:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    397a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    397e:	2b00      	cmp	r3, #0
    3980:	db0a      	blt.n	3998 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3982:	79fb      	ldrb	r3, [r7, #7]
    3984:	4618      	mov	r0, r3
    3986:	4b08      	ldr	r3, [pc, #32]	; (39a8 <usb_d_ep_abort+0x50>)
    3988:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    398a:	68bb      	ldr	r3, [r7, #8]
    398c:	2201      	movs	r2, #1
    398e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3990:	68bb      	ldr	r3, [r7, #8]
    3992:	2204      	movs	r2, #4
    3994:	70da      	strb	r2, [r3, #3]
    3996:	e000      	b.n	399a <usb_d_ep_abort+0x42>
		return;
    3998:	bf00      	nop
}
    399a:	3710      	adds	r7, #16
    399c:	46bd      	mov	sp, r7
    399e:	bd80      	pop	{r7, pc}
    39a0:	000031ad 	.word	0x000031ad
    39a4:	20002088 	.word	0x20002088
    39a8:	0000afa1 	.word	0x0000afa1

000039ac <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    39ac:	b580      	push	{r7, lr}
    39ae:	b086      	sub	sp, #24
    39b0:	af00      	add	r7, sp, #0
    39b2:	4603      	mov	r3, r0
    39b4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    39b6:	79fb      	ldrb	r3, [r7, #7]
    39b8:	4618      	mov	r0, r3
    39ba:	4b1a      	ldr	r3, [pc, #104]	; (3a24 <_usb_d_ep_halt_clr+0x78>)
    39bc:	4798      	blx	r3
    39be:	4603      	mov	r3, r0
    39c0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    39c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39c6:	015b      	lsls	r3, r3, #5
    39c8:	4a17      	ldr	r2, [pc, #92]	; (3a28 <_usb_d_ep_halt_clr+0x7c>)
    39ca:	4413      	add	r3, r2
    39cc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    39ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39d2:	2b00      	cmp	r3, #0
    39d4:	da02      	bge.n	39dc <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    39d6:	f06f 0311 	mvn.w	r3, #17
    39da:	e01f      	b.n	3a1c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    39dc:	79fb      	ldrb	r3, [r7, #7]
    39de:	2102      	movs	r1, #2
    39e0:	4618      	mov	r0, r3
    39e2:	4b12      	ldr	r3, [pc, #72]	; (3a2c <_usb_d_ep_halt_clr+0x80>)
    39e4:	4798      	blx	r3
    39e6:	4603      	mov	r3, r0
    39e8:	2b00      	cmp	r3, #0
    39ea:	d016      	beq.n	3a1a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    39ec:	79fb      	ldrb	r3, [r7, #7]
    39ee:	2100      	movs	r1, #0
    39f0:	4618      	mov	r0, r3
    39f2:	4b0e      	ldr	r3, [pc, #56]	; (3a2c <_usb_d_ep_halt_clr+0x80>)
    39f4:	4798      	blx	r3
    39f6:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    39f8:	68fb      	ldr	r3, [r7, #12]
    39fa:	2b00      	cmp	r3, #0
    39fc:	da01      	bge.n	3a02 <_usb_d_ep_halt_clr+0x56>
			return rc;
    39fe:	68fb      	ldr	r3, [r7, #12]
    3a00:	e00c      	b.n	3a1c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3a02:	693b      	ldr	r3, [r7, #16]
    3a04:	2201      	movs	r2, #1
    3a06:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3a08:	693b      	ldr	r3, [r7, #16]
    3a0a:	2203      	movs	r2, #3
    3a0c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3a0e:	693b      	ldr	r3, [r7, #16]
    3a10:	69db      	ldr	r3, [r3, #28]
    3a12:	79f8      	ldrb	r0, [r7, #7]
    3a14:	2200      	movs	r2, #0
    3a16:	2103      	movs	r1, #3
    3a18:	4798      	blx	r3
	}
	return ERR_NONE;
    3a1a:	2300      	movs	r3, #0
}
    3a1c:	4618      	mov	r0, r3
    3a1e:	3718      	adds	r7, #24
    3a20:	46bd      	mov	sp, r7
    3a22:	bd80      	pop	{r7, pc}
    3a24:	000031ad 	.word	0x000031ad
    3a28:	20002088 	.word	0x20002088
    3a2c:	0000abad 	.word	0x0000abad

00003a30 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3a30:	b580      	push	{r7, lr}
    3a32:	b082      	sub	sp, #8
    3a34:	af00      	add	r7, sp, #0
    3a36:	4603      	mov	r3, r0
    3a38:	460a      	mov	r2, r1
    3a3a:	71fb      	strb	r3, [r7, #7]
    3a3c:	4613      	mov	r3, r2
    3a3e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3a40:	79bb      	ldrb	r3, [r7, #6]
    3a42:	2b00      	cmp	r3, #0
    3a44:	d105      	bne.n	3a52 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3a46:	79fb      	ldrb	r3, [r7, #7]
    3a48:	4618      	mov	r0, r3
    3a4a:	4b0c      	ldr	r3, [pc, #48]	; (3a7c <usb_d_ep_halt+0x4c>)
    3a4c:	4798      	blx	r3
    3a4e:	4603      	mov	r3, r0
    3a50:	e00f      	b.n	3a72 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3a52:	79bb      	ldrb	r3, [r7, #6]
    3a54:	2b01      	cmp	r3, #1
    3a56:	d106      	bne.n	3a66 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3a58:	79fb      	ldrb	r3, [r7, #7]
    3a5a:	2101      	movs	r1, #1
    3a5c:	4618      	mov	r0, r3
    3a5e:	4b08      	ldr	r3, [pc, #32]	; (3a80 <usb_d_ep_halt+0x50>)
    3a60:	4798      	blx	r3
    3a62:	4603      	mov	r3, r0
    3a64:	e005      	b.n	3a72 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3a66:	79fb      	ldrb	r3, [r7, #7]
    3a68:	2102      	movs	r1, #2
    3a6a:	4618      	mov	r0, r3
    3a6c:	4b04      	ldr	r3, [pc, #16]	; (3a80 <usb_d_ep_halt+0x50>)
    3a6e:	4798      	blx	r3
    3a70:	4603      	mov	r3, r0
	}
}
    3a72:	4618      	mov	r0, r3
    3a74:	3708      	adds	r7, #8
    3a76:	46bd      	mov	sp, r7
    3a78:	bd80      	pop	{r7, pc}
    3a7a:	bf00      	nop
    3a7c:	000039ad 	.word	0x000039ad
    3a80:	0000abad 	.word	0x0000abad

00003a84 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3a84:	b580      	push	{r7, lr}
    3a86:	b086      	sub	sp, #24
    3a88:	af00      	add	r7, sp, #0
    3a8a:	4603      	mov	r3, r0
    3a8c:	603a      	str	r2, [r7, #0]
    3a8e:	71fb      	strb	r3, [r7, #7]
    3a90:	460b      	mov	r3, r1
    3a92:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a94:	79fb      	ldrb	r3, [r7, #7]
    3a96:	4618      	mov	r0, r3
    3a98:	4b16      	ldr	r3, [pc, #88]	; (3af4 <usb_d_ep_register_callback+0x70>)
    3a9a:	4798      	blx	r3
    3a9c:	4603      	mov	r3, r0
    3a9e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3aa4:	015b      	lsls	r3, r3, #5
    3aa6:	4a14      	ldr	r2, [pc, #80]	; (3af8 <usb_d_ep_register_callback+0x74>)
    3aa8:	4413      	add	r3, r2
    3aaa:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3aac:	683b      	ldr	r3, [r7, #0]
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d001      	beq.n	3ab6 <usb_d_ep_register_callback+0x32>
    3ab2:	683b      	ldr	r3, [r7, #0]
    3ab4:	e000      	b.n	3ab8 <usb_d_ep_register_callback+0x34>
    3ab6:	4b11      	ldr	r3, [pc, #68]	; (3afc <usb_d_ep_register_callback+0x78>)
    3ab8:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3abe:	2b00      	cmp	r3, #0
    3ac0:	db13      	blt.n	3aea <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3ac2:	79bb      	ldrb	r3, [r7, #6]
    3ac4:	2b01      	cmp	r3, #1
    3ac6:	d008      	beq.n	3ada <usb_d_ep_register_callback+0x56>
    3ac8:	2b02      	cmp	r3, #2
    3aca:	d00a      	beq.n	3ae2 <usb_d_ep_register_callback+0x5e>
    3acc:	2b00      	cmp	r3, #0
    3ace:	d000      	beq.n	3ad2 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3ad0:	e00c      	b.n	3aec <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3ad2:	693b      	ldr	r3, [r7, #16]
    3ad4:	68fa      	ldr	r2, [r7, #12]
    3ad6:	615a      	str	r2, [r3, #20]
		break;
    3ad8:	e008      	b.n	3aec <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3ada:	693b      	ldr	r3, [r7, #16]
    3adc:	68fa      	ldr	r2, [r7, #12]
    3ade:	619a      	str	r2, [r3, #24]
		break;
    3ae0:	e004      	b.n	3aec <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3ae2:	693b      	ldr	r3, [r7, #16]
    3ae4:	68fa      	ldr	r2, [r7, #12]
    3ae6:	61da      	str	r2, [r3, #28]
		break;
    3ae8:	e000      	b.n	3aec <usb_d_ep_register_callback+0x68>
		return;
    3aea:	bf00      	nop
	}
}
    3aec:	3718      	adds	r7, #24
    3aee:	46bd      	mov	sp, r7
    3af0:	bd80      	pop	{r7, pc}
    3af2:	bf00      	nop
    3af4:	000031ad 	.word	0x000031ad
    3af8:	20002088 	.word	0x20002088
    3afc:	00003281 	.word	0x00003281

00003b00 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3b00:	b480      	push	{r7}
    3b02:	b085      	sub	sp, #20
    3b04:	af00      	add	r7, sp, #0
    3b06:	4603      	mov	r3, r0
    3b08:	60b9      	str	r1, [r7, #8]
    3b0a:	607a      	str	r2, [r7, #4]
    3b0c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3b0e:	7bfb      	ldrb	r3, [r7, #15]
    3b10:	f083 0301 	eor.w	r3, r3, #1
    3b14:	b2db      	uxtb	r3, r3
    3b16:	2b00      	cmp	r3, #0
    3b18:	d000      	beq.n	3b1c <assert+0x1c>
		__asm("BKPT #0");
    3b1a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3b1c:	bf00      	nop
    3b1e:	3714      	adds	r7, #20
    3b20:	46bd      	mov	sp, r7
    3b22:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b26:	4770      	bx	lr

00003b28 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3b28:	b480      	push	{r7}
    3b2a:	b085      	sub	sp, #20
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	6078      	str	r0, [r7, #4]
    3b30:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3b32:	687b      	ldr	r3, [r7, #4]
    3b34:	681b      	ldr	r3, [r3, #0]
    3b36:	60fb      	str	r3, [r7, #12]
    3b38:	e008      	b.n	3b4c <is_list_element+0x24>
		if (it == element) {
    3b3a:	68fa      	ldr	r2, [r7, #12]
    3b3c:	683b      	ldr	r3, [r7, #0]
    3b3e:	429a      	cmp	r2, r3
    3b40:	d101      	bne.n	3b46 <is_list_element+0x1e>
			return true;
    3b42:	2301      	movs	r3, #1
    3b44:	e006      	b.n	3b54 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3b46:	68fb      	ldr	r3, [r7, #12]
    3b48:	681b      	ldr	r3, [r3, #0]
    3b4a:	60fb      	str	r3, [r7, #12]
    3b4c:	68fb      	ldr	r3, [r7, #12]
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d1f3      	bne.n	3b3a <is_list_element+0x12>
		}
	}

	return false;
    3b52:	2300      	movs	r3, #0
}
    3b54:	4618      	mov	r0, r3
    3b56:	3714      	adds	r7, #20
    3b58:	46bd      	mov	sp, r7
    3b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b5e:	4770      	bx	lr

00003b60 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3b60:	b580      	push	{r7, lr}
    3b62:	b082      	sub	sp, #8
    3b64:	af00      	add	r7, sp, #0
    3b66:	6078      	str	r0, [r7, #4]
    3b68:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3b6a:	6839      	ldr	r1, [r7, #0]
    3b6c:	6878      	ldr	r0, [r7, #4]
    3b6e:	4b0f      	ldr	r3, [pc, #60]	; (3bac <list_insert_as_head+0x4c>)
    3b70:	4798      	blx	r3
    3b72:	4603      	mov	r3, r0
    3b74:	2b00      	cmp	r3, #0
    3b76:	bf14      	ite	ne
    3b78:	2301      	movne	r3, #1
    3b7a:	2300      	moveq	r3, #0
    3b7c:	b2db      	uxtb	r3, r3
    3b7e:	f083 0301 	eor.w	r3, r3, #1
    3b82:	b2db      	uxtb	r3, r3
    3b84:	f003 0301 	and.w	r3, r3, #1
    3b88:	b2db      	uxtb	r3, r3
    3b8a:	2239      	movs	r2, #57	; 0x39
    3b8c:	4908      	ldr	r1, [pc, #32]	; (3bb0 <list_insert_as_head+0x50>)
    3b8e:	4618      	mov	r0, r3
    3b90:	4b08      	ldr	r3, [pc, #32]	; (3bb4 <list_insert_as_head+0x54>)
    3b92:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3b94:	687b      	ldr	r3, [r7, #4]
    3b96:	681a      	ldr	r2, [r3, #0]
    3b98:	683b      	ldr	r3, [r7, #0]
    3b9a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3b9c:	687b      	ldr	r3, [r7, #4]
    3b9e:	683a      	ldr	r2, [r7, #0]
    3ba0:	601a      	str	r2, [r3, #0]
}
    3ba2:	bf00      	nop
    3ba4:	3708      	adds	r7, #8
    3ba6:	46bd      	mov	sp, r7
    3ba8:	bd80      	pop	{r7, pc}
    3baa:	bf00      	nop
    3bac:	00003b29 	.word	0x00003b29
    3bb0:	0001084c 	.word	0x0001084c
    3bb4:	00003b01 	.word	0x00003b01

00003bb8 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3bb8:	b480      	push	{r7}
    3bba:	b083      	sub	sp, #12
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
    3bc0:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	681a      	ldr	r2, [r3, #0]
    3bc6:	683b      	ldr	r3, [r7, #0]
    3bc8:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3bca:	687b      	ldr	r3, [r7, #4]
    3bcc:	683a      	ldr	r2, [r7, #0]
    3bce:	601a      	str	r2, [r3, #0]
}
    3bd0:	bf00      	nop
    3bd2:	370c      	adds	r7, #12
    3bd4:	46bd      	mov	sp, r7
    3bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bda:	4770      	bx	lr

00003bdc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b084      	sub	sp, #16
    3be0:	af00      	add	r7, sp, #0
    3be2:	6078      	str	r0, [r7, #4]
    3be4:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3be6:	687b      	ldr	r3, [r7, #4]
    3be8:	681b      	ldr	r3, [r3, #0]
    3bea:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3bec:	6839      	ldr	r1, [r7, #0]
    3bee:	6878      	ldr	r0, [r7, #4]
    3bf0:	4b16      	ldr	r3, [pc, #88]	; (3c4c <list_insert_at_end+0x70>)
    3bf2:	4798      	blx	r3
    3bf4:	4603      	mov	r3, r0
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	bf14      	ite	ne
    3bfa:	2301      	movne	r3, #1
    3bfc:	2300      	moveq	r3, #0
    3bfe:	b2db      	uxtb	r3, r3
    3c00:	f083 0301 	eor.w	r3, r3, #1
    3c04:	b2db      	uxtb	r3, r3
    3c06:	f003 0301 	and.w	r3, r3, #1
    3c0a:	b2db      	uxtb	r3, r3
    3c0c:	224f      	movs	r2, #79	; 0x4f
    3c0e:	4910      	ldr	r1, [pc, #64]	; (3c50 <list_insert_at_end+0x74>)
    3c10:	4618      	mov	r0, r3
    3c12:	4b10      	ldr	r3, [pc, #64]	; (3c54 <list_insert_at_end+0x78>)
    3c14:	4798      	blx	r3

	if (!list->head) {
    3c16:	687b      	ldr	r3, [r7, #4]
    3c18:	681b      	ldr	r3, [r3, #0]
    3c1a:	2b00      	cmp	r3, #0
    3c1c:	d109      	bne.n	3c32 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3c1e:	687b      	ldr	r3, [r7, #4]
    3c20:	683a      	ldr	r2, [r7, #0]
    3c22:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3c24:	683b      	ldr	r3, [r7, #0]
    3c26:	2200      	movs	r2, #0
    3c28:	601a      	str	r2, [r3, #0]
		return;
    3c2a:	e00c      	b.n	3c46 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3c2c:	68fb      	ldr	r3, [r7, #12]
    3c2e:	681b      	ldr	r3, [r3, #0]
    3c30:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3c32:	68fb      	ldr	r3, [r7, #12]
    3c34:	681b      	ldr	r3, [r3, #0]
    3c36:	2b00      	cmp	r3, #0
    3c38:	d1f8      	bne.n	3c2c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3c3a:	68fb      	ldr	r3, [r7, #12]
    3c3c:	683a      	ldr	r2, [r7, #0]
    3c3e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3c40:	683b      	ldr	r3, [r7, #0]
    3c42:	2200      	movs	r2, #0
    3c44:	601a      	str	r2, [r3, #0]
}
    3c46:	3710      	adds	r7, #16
    3c48:	46bd      	mov	sp, r7
    3c4a:	bd80      	pop	{r7, pc}
    3c4c:	00003b29 	.word	0x00003b29
    3c50:	0001084c 	.word	0x0001084c
    3c54:	00003b01 	.word	0x00003b01

00003c58 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3c58:	b480      	push	{r7}
    3c5a:	b085      	sub	sp, #20
    3c5c:	af00      	add	r7, sp, #0
    3c5e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	681b      	ldr	r3, [r3, #0]
    3c64:	2b00      	cmp	r3, #0
    3c66:	d009      	beq.n	3c7c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	681b      	ldr	r3, [r3, #0]
    3c6c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3c6e:	687b      	ldr	r3, [r7, #4]
    3c70:	681b      	ldr	r3, [r3, #0]
    3c72:	681a      	ldr	r2, [r3, #0]
    3c74:	687b      	ldr	r3, [r7, #4]
    3c76:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3c78:	68fb      	ldr	r3, [r7, #12]
    3c7a:	e000      	b.n	3c7e <list_remove_head+0x26>
	}

	return NULL;
    3c7c:	2300      	movs	r3, #0
}
    3c7e:	4618      	mov	r0, r3
    3c80:	3714      	adds	r7, #20
    3c82:	46bd      	mov	sp, r7
    3c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c88:	4770      	bx	lr

00003c8a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3c8a:	b480      	push	{r7}
    3c8c:	b085      	sub	sp, #20
    3c8e:	af00      	add	r7, sp, #0
    3c90:	6078      	str	r0, [r7, #4]
    3c92:	6039      	str	r1, [r7, #0]
	if (!element) {
    3c94:	683b      	ldr	r3, [r7, #0]
    3c96:	2b00      	cmp	r3, #0
    3c98:	d101      	bne.n	3c9e <list_delete_element+0x14>
		return false;
    3c9a:	2300      	movs	r3, #0
    3c9c:	e024      	b.n	3ce8 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	681a      	ldr	r2, [r3, #0]
    3ca2:	683b      	ldr	r3, [r7, #0]
    3ca4:	429a      	cmp	r2, r3
    3ca6:	d106      	bne.n	3cb6 <list_delete_element+0x2c>
		list->head = list->head->next;
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	681b      	ldr	r3, [r3, #0]
    3cac:	681a      	ldr	r2, [r3, #0]
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	601a      	str	r2, [r3, #0]
		return true;
    3cb2:	2301      	movs	r3, #1
    3cb4:	e018      	b.n	3ce8 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	681b      	ldr	r3, [r3, #0]
    3cba:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3cbc:	e002      	b.n	3cc4 <list_delete_element+0x3a>
			it = it->next;
    3cbe:	68fb      	ldr	r3, [r7, #12]
    3cc0:	681b      	ldr	r3, [r3, #0]
    3cc2:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3cc4:	68fb      	ldr	r3, [r7, #12]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d004      	beq.n	3cd4 <list_delete_element+0x4a>
    3cca:	68fb      	ldr	r3, [r7, #12]
    3ccc:	681a      	ldr	r2, [r3, #0]
    3cce:	683b      	ldr	r3, [r7, #0]
    3cd0:	429a      	cmp	r2, r3
    3cd2:	d1f4      	bne.n	3cbe <list_delete_element+0x34>
		}
		if (it) {
    3cd4:	68fb      	ldr	r3, [r7, #12]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d005      	beq.n	3ce6 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3cda:	683b      	ldr	r3, [r7, #0]
    3cdc:	681a      	ldr	r2, [r3, #0]
    3cde:	68fb      	ldr	r3, [r7, #12]
    3ce0:	601a      	str	r2, [r3, #0]
			return true;
    3ce2:	2301      	movs	r3, #1
    3ce4:	e000      	b.n	3ce8 <list_delete_element+0x5e>
		}
	}

	return false;
    3ce6:	2300      	movs	r3, #0
}
    3ce8:	4618      	mov	r0, r3
    3cea:	3714      	adds	r7, #20
    3cec:	46bd      	mov	sp, r7
    3cee:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf2:	4770      	bx	lr

00003cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3cf4:	b480      	push	{r7}
    3cf6:	b083      	sub	sp, #12
    3cf8:	af00      	add	r7, sp, #0
    3cfa:	4603      	mov	r3, r0
    3cfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d02:	2b00      	cmp	r3, #0
    3d04:	db0b      	blt.n	3d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d06:	4909      	ldr	r1, [pc, #36]	; (3d2c <__NVIC_EnableIRQ+0x38>)
    3d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d0c:	095b      	lsrs	r3, r3, #5
    3d0e:	88fa      	ldrh	r2, [r7, #6]
    3d10:	f002 021f 	and.w	r2, r2, #31
    3d14:	2001      	movs	r0, #1
    3d16:	fa00 f202 	lsl.w	r2, r0, r2
    3d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3d1e:	bf00      	nop
    3d20:	370c      	adds	r7, #12
    3d22:	46bd      	mov	sp, r7
    3d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d28:	4770      	bx	lr
    3d2a:	bf00      	nop
    3d2c:	e000e100 	.word	0xe000e100

00003d30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3d30:	b480      	push	{r7}
    3d32:	b083      	sub	sp, #12
    3d34:	af00      	add	r7, sp, #0
    3d36:	4603      	mov	r3, r0
    3d38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d3e:	2b00      	cmp	r3, #0
    3d40:	db10      	blt.n	3d64 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d42:	490b      	ldr	r1, [pc, #44]	; (3d70 <__NVIC_DisableIRQ+0x40>)
    3d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d48:	095b      	lsrs	r3, r3, #5
    3d4a:	88fa      	ldrh	r2, [r7, #6]
    3d4c:	f002 021f 	and.w	r2, r2, #31
    3d50:	2001      	movs	r0, #1
    3d52:	fa00 f202 	lsl.w	r2, r0, r2
    3d56:	3320      	adds	r3, #32
    3d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d60:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3d64:	bf00      	nop
    3d66:	370c      	adds	r7, #12
    3d68:	46bd      	mov	sp, r7
    3d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d6e:	4770      	bx	lr
    3d70:	e000e100 	.word	0xe000e100

00003d74 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3d74:	b480      	push	{r7}
    3d76:	b083      	sub	sp, #12
    3d78:	af00      	add	r7, sp, #0
    3d7a:	4603      	mov	r3, r0
    3d7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d82:	2b00      	cmp	r3, #0
    3d84:	db0c      	blt.n	3da0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d86:	4909      	ldr	r1, [pc, #36]	; (3dac <__NVIC_ClearPendingIRQ+0x38>)
    3d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d8c:	095b      	lsrs	r3, r3, #5
    3d8e:	88fa      	ldrh	r2, [r7, #6]
    3d90:	f002 021f 	and.w	r2, r2, #31
    3d94:	2001      	movs	r0, #1
    3d96:	fa00 f202 	lsl.w	r2, r0, r2
    3d9a:	3360      	adds	r3, #96	; 0x60
    3d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3da0:	bf00      	nop
    3da2:	370c      	adds	r7, #12
    3da4:	46bd      	mov	sp, r7
    3da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3daa:	4770      	bx	lr
    3dac:	e000e100 	.word	0xe000e100

00003db0 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3db0:	b480      	push	{r7}
    3db2:	b083      	sub	sp, #12
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3dbc:	095b      	lsrs	r3, r3, #5
    3dbe:	f003 0301 	and.w	r3, r3, #1
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	bf14      	ite	ne
    3dc6:	2301      	movne	r3, #1
    3dc8:	2300      	moveq	r3, #0
    3dca:	b2db      	uxtb	r3, r3
}
    3dcc:	4618      	mov	r0, r3
    3dce:	370c      	adds	r7, #12
    3dd0:	46bd      	mov	sp, r7
    3dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd6:	4770      	bx	lr

00003dd8 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3dd8:	b480      	push	{r7}
    3dda:	b083      	sub	sp, #12
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
    3de0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3de2:	687b      	ldr	r3, [r7, #4]
    3de4:	683a      	ldr	r2, [r7, #0]
    3de6:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3de8:	bf00      	nop
    3dea:	370c      	adds	r7, #12
    3dec:	46bd      	mov	sp, r7
    3dee:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df2:	4770      	bx	lr

00003df4 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3df4:	b480      	push	{r7}
    3df6:	b083      	sub	sp, #12
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
    3dfc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3dfe:	687b      	ldr	r3, [r7, #4]
    3e00:	683a      	ldr	r2, [r7, #0]
    3e02:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e04:	bf00      	nop
    3e06:	370c      	adds	r7, #12
    3e08:	46bd      	mov	sp, r7
    3e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e0e:	4770      	bx	lr

00003e10 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3e10:	b480      	push	{r7}
    3e12:	b083      	sub	sp, #12
    3e14:	af00      	add	r7, sp, #0
    3e16:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	699b      	ldr	r3, [r3, #24]
    3e1c:	f043 0201 	orr.w	r2, r3, #1
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e24:	bf00      	nop
    3e26:	370c      	adds	r7, #12
    3e28:	46bd      	mov	sp, r7
    3e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2e:	4770      	bx	lr

00003e30 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3e30:	b480      	push	{r7}
    3e32:	b085      	sub	sp, #20
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	699b      	ldr	r3, [r3, #24]
    3e3c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3e3e:	68fb      	ldr	r3, [r7, #12]
    3e40:	f003 0301 	and.w	r3, r3, #1
    3e44:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3e46:	68fb      	ldr	r3, [r7, #12]
    3e48:	2b00      	cmp	r3, #0
    3e4a:	bf14      	ite	ne
    3e4c:	2301      	movne	r3, #1
    3e4e:	2300      	moveq	r3, #0
    3e50:	b2db      	uxtb	r3, r3
}
    3e52:	4618      	mov	r0, r3
    3e54:	3714      	adds	r7, #20
    3e56:	46bd      	mov	sp, r7
    3e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e5c:	4770      	bx	lr

00003e5e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3e5e:	b480      	push	{r7}
    3e60:	b083      	sub	sp, #12
    3e62:	af00      	add	r7, sp, #0
    3e64:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3e66:	687b      	ldr	r3, [r7, #4]
    3e68:	699b      	ldr	r3, [r3, #24]
    3e6a:	f023 0201 	bic.w	r2, r3, #1
    3e6e:	687b      	ldr	r3, [r7, #4]
    3e70:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e72:	bf00      	nop
    3e74:	370c      	adds	r7, #12
    3e76:	46bd      	mov	sp, r7
    3e78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e7c:	4770      	bx	lr

00003e7e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3e7e:	b480      	push	{r7}
    3e80:	b083      	sub	sp, #12
    3e82:	af00      	add	r7, sp, #0
    3e84:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3e86:	687b      	ldr	r3, [r7, #4]
    3e88:	699b      	ldr	r3, [r3, #24]
    3e8a:	f043 0202 	orr.w	r2, r3, #2
    3e8e:	687b      	ldr	r3, [r7, #4]
    3e90:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e92:	bf00      	nop
    3e94:	370c      	adds	r7, #12
    3e96:	46bd      	mov	sp, r7
    3e98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e9c:	4770      	bx	lr

00003e9e <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3e9e:	b480      	push	{r7}
    3ea0:	b083      	sub	sp, #12
    3ea2:	af00      	add	r7, sp, #0
    3ea4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	699b      	ldr	r3, [r3, #24]
    3eaa:	f023 0202 	bic.w	r2, r3, #2
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3eb2:	bf00      	nop
    3eb4:	370c      	adds	r7, #12
    3eb6:	46bd      	mov	sp, r7
    3eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ebc:	4770      	bx	lr

00003ebe <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3ebe:	b480      	push	{r7}
    3ec0:	b083      	sub	sp, #12
    3ec2:	af00      	add	r7, sp, #0
    3ec4:	6078      	str	r0, [r7, #4]
    3ec6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	699a      	ldr	r2, [r3, #24]
    3ecc:	683b      	ldr	r3, [r7, #0]
    3ece:	431a      	orrs	r2, r3
    3ed0:	687b      	ldr	r3, [r7, #4]
    3ed2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ed4:	bf00      	nop
    3ed6:	370c      	adds	r7, #12
    3ed8:	46bd      	mov	sp, r7
    3eda:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ede:	4770      	bx	lr

00003ee0 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3ee0:	b480      	push	{r7}
    3ee2:	b083      	sub	sp, #12
    3ee4:	af00      	add	r7, sp, #0
    3ee6:	6078      	str	r0, [r7, #4]
    3ee8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	683a      	ldr	r2, [r7, #0]
    3eee:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ef0:	bf00      	nop
    3ef2:	370c      	adds	r7, #12
    3ef4:	46bd      	mov	sp, r7
    3ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3efa:	4770      	bx	lr

00003efc <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3efc:	b480      	push	{r7}
    3efe:	b083      	sub	sp, #12
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
    3f04:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	683a      	ldr	r2, [r7, #0]
    3f0a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f0c:	bf00      	nop
    3f0e:	370c      	adds	r7, #12
    3f10:	46bd      	mov	sp, r7
    3f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f16:	4770      	bx	lr

00003f18 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3f18:	b480      	push	{r7}
    3f1a:	b083      	sub	sp, #12
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3f20:	687b      	ldr	r3, [r7, #4]
    3f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3f24:	4618      	mov	r0, r3
    3f26:	370c      	adds	r7, #12
    3f28:	46bd      	mov	sp, r7
    3f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f2e:	4770      	bx	lr

00003f30 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3f30:	b480      	push	{r7}
    3f32:	b083      	sub	sp, #12
    3f34:	af00      	add	r7, sp, #0
    3f36:	6078      	str	r0, [r7, #4]
    3f38:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	683a      	ldr	r2, [r7, #0]
    3f3e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f40:	bf00      	nop
    3f42:	370c      	adds	r7, #12
    3f44:	46bd      	mov	sp, r7
    3f46:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f4a:	4770      	bx	lr

00003f4c <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3f4c:	b480      	push	{r7}
    3f4e:	b083      	sub	sp, #12
    3f50:	af00      	add	r7, sp, #0
    3f52:	6078      	str	r0, [r7, #4]
    3f54:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3f56:	687b      	ldr	r3, [r7, #4]
    3f58:	683a      	ldr	r2, [r7, #0]
    3f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f5e:	bf00      	nop
    3f60:	370c      	adds	r7, #12
    3f62:	46bd      	mov	sp, r7
    3f64:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f68:	4770      	bx	lr

00003f6a <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3f6a:	b480      	push	{r7}
    3f6c:	b083      	sub	sp, #12
    3f6e:	af00      	add	r7, sp, #0
    3f70:	6078      	str	r0, [r7, #4]
    3f72:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	683a      	ldr	r2, [r7, #0]
    3f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f7c:	bf00      	nop
    3f7e:	370c      	adds	r7, #12
    3f80:	46bd      	mov	sp, r7
    3f82:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f86:	4770      	bx	lr

00003f88 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3f88:	b480      	push	{r7}
    3f8a:	b083      	sub	sp, #12
    3f8c:	af00      	add	r7, sp, #0
    3f8e:	6078      	str	r0, [r7, #4]
    3f90:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	683a      	ldr	r2, [r7, #0]
    3f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f9a:	bf00      	nop
    3f9c:	370c      	adds	r7, #12
    3f9e:	46bd      	mov	sp, r7
    3fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fa4:	4770      	bx	lr

00003fa6 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3fa6:	b480      	push	{r7}
    3fa8:	b083      	sub	sp, #12
    3faa:	af00      	add	r7, sp, #0
    3fac:	6078      	str	r0, [r7, #4]
    3fae:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3fb0:	687b      	ldr	r3, [r7, #4]
    3fb2:	683a      	ldr	r2, [r7, #0]
    3fb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fb8:	bf00      	nop
    3fba:	370c      	adds	r7, #12
    3fbc:	46bd      	mov	sp, r7
    3fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fc2:	4770      	bx	lr

00003fc4 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3fc4:	b480      	push	{r7}
    3fc6:	b083      	sub	sp, #12
    3fc8:	af00      	add	r7, sp, #0
    3fca:	6078      	str	r0, [r7, #4]
    3fcc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	683a      	ldr	r2, [r7, #0]
    3fd2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fd6:	bf00      	nop
    3fd8:	370c      	adds	r7, #12
    3fda:	46bd      	mov	sp, r7
    3fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fe0:	4770      	bx	lr

00003fe2 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3fe2:	b480      	push	{r7}
    3fe4:	b083      	sub	sp, #12
    3fe6:	af00      	add	r7, sp, #0
    3fe8:	6078      	str	r0, [r7, #4]
    3fea:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3fec:	687b      	ldr	r3, [r7, #4]
    3fee:	683a      	ldr	r2, [r7, #0]
    3ff0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ff4:	bf00      	nop
    3ff6:	370c      	adds	r7, #12
    3ff8:	46bd      	mov	sp, r7
    3ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ffe:	4770      	bx	lr

00004000 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    4000:	b480      	push	{r7}
    4002:	b083      	sub	sp, #12
    4004:	af00      	add	r7, sp, #0
    4006:	6078      	str	r0, [r7, #4]
    4008:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    400a:	687b      	ldr	r3, [r7, #4]
    400c:	683a      	ldr	r2, [r7, #0]
    400e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4012:	bf00      	nop
    4014:	370c      	adds	r7, #12
    4016:	46bd      	mov	sp, r7
    4018:	f85d 7b04 	ldr.w	r7, [sp], #4
    401c:	4770      	bx	lr

0000401e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    401e:	b480      	push	{r7}
    4020:	b083      	sub	sp, #12
    4022:	af00      	add	r7, sp, #0
    4024:	6078      	str	r0, [r7, #4]
    4026:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	683a      	ldr	r2, [r7, #0]
    402c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4030:	bf00      	nop
    4032:	370c      	adds	r7, #12
    4034:	46bd      	mov	sp, r7
    4036:	f85d 7b04 	ldr.w	r7, [sp], #4
    403a:	4770      	bx	lr

0000403c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    403c:	b480      	push	{r7}
    403e:	b083      	sub	sp, #12
    4040:	af00      	add	r7, sp, #0
    4042:	6078      	str	r0, [r7, #4]
    4044:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    4046:	687b      	ldr	r3, [r7, #4]
    4048:	683a      	ldr	r2, [r7, #0]
    404a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    404e:	bf00      	nop
    4050:	370c      	adds	r7, #12
    4052:	46bd      	mov	sp, r7
    4054:	f85d 7b04 	ldr.w	r7, [sp], #4
    4058:	4770      	bx	lr
	...

0000405c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    405c:	b580      	push	{r7, lr}
    405e:	b082      	sub	sp, #8
    4060:	af00      	add	r7, sp, #0
    4062:	6078      	str	r0, [r7, #4]
    4064:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    4066:	687b      	ldr	r3, [r7, #4]
    4068:	683a      	ldr	r2, [r7, #0]
    406a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    406c:	687b      	ldr	r3, [r7, #4]
    406e:	681b      	ldr	r3, [r3, #0]
    4070:	4618      	mov	r0, r3
    4072:	4b56      	ldr	r3, [pc, #344]	; (41cc <_can_async_init+0x170>)
    4074:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    4076:	bf00      	nop
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	681b      	ldr	r3, [r3, #0]
    407c:	4618      	mov	r0, r3
    407e:	4b54      	ldr	r3, [pc, #336]	; (41d0 <_can_async_init+0x174>)
    4080:	4798      	blx	r3
    4082:	4603      	mov	r3, r0
    4084:	f083 0301 	eor.w	r3, r3, #1
    4088:	b2db      	uxtb	r3, r3
    408a:	2b00      	cmp	r3, #0
    408c:	d1f4      	bne.n	4078 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    408e:	687b      	ldr	r3, [r7, #4]
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	4618      	mov	r0, r3
    4094:	4b4f      	ldr	r3, [pc, #316]	; (41d4 <_can_async_init+0x178>)
    4096:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    4098:	683b      	ldr	r3, [r7, #0]
    409a:	4a4f      	ldr	r2, [pc, #316]	; (41d8 <_can_async_init+0x17c>)
    409c:	4293      	cmp	r3, r2
    409e:	d17c      	bne.n	419a <_can_async_init+0x13e>
		_can1_dev    = dev;
    40a0:	4a4e      	ldr	r2, [pc, #312]	; (41dc <_can_async_init+0x180>)
    40a2:	687b      	ldr	r3, [r7, #4]
    40a4:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	4a4d      	ldr	r2, [pc, #308]	; (41e0 <_can_async_init+0x184>)
    40aa:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    40ac:	687b      	ldr	r3, [r7, #4]
    40ae:	681b      	ldr	r3, [r3, #0]
    40b0:	f44f 7100 	mov.w	r1, #512	; 0x200
    40b4:	4618      	mov	r0, r3
    40b6:	4b4b      	ldr	r3, [pc, #300]	; (41e4 <_can_async_init+0x188>)
    40b8:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    40ba:	687b      	ldr	r3, [r7, #4]
    40bc:	681b      	ldr	r3, [r3, #0]
    40be:	2102      	movs	r1, #2
    40c0:	4618      	mov	r0, r3
    40c2:	4b49      	ldr	r3, [pc, #292]	; (41e8 <_can_async_init+0x18c>)
    40c4:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	681b      	ldr	r3, [r3, #0]
    40ca:	f640 2103 	movw	r1, #2563	; 0xa03
    40ce:	4618      	mov	r0, r3
    40d0:	4b46      	ldr	r3, [pc, #280]	; (41ec <_can_async_init+0x190>)
    40d2:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	681b      	ldr	r3, [r3, #0]
    40d8:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    40dc:	4618      	mov	r0, r3
    40de:	4b44      	ldr	r3, [pc, #272]	; (41f0 <_can_async_init+0x194>)
    40e0:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	681a      	ldr	r2, [r3, #0]
    40e6:	4b43      	ldr	r3, [pc, #268]	; (41f4 <_can_async_init+0x198>)
    40e8:	b29b      	uxth	r3, r3
    40ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    40ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    40f2:	4619      	mov	r1, r3
    40f4:	4610      	mov	r0, r2
    40f6:	4b40      	ldr	r3, [pc, #256]	; (41f8 <_can_async_init+0x19c>)
    40f8:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	681b      	ldr	r3, [r3, #0]
    40fe:	2107      	movs	r1, #7
    4100:	4618      	mov	r0, r3
    4102:	4b3e      	ldr	r3, [pc, #248]	; (41fc <_can_async_init+0x1a0>)
    4104:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	681b      	ldr	r3, [r3, #0]
    410a:	2107      	movs	r1, #7
    410c:	4618      	mov	r0, r3
    410e:	4b3c      	ldr	r3, [pc, #240]	; (4200 <_can_async_init+0x1a4>)
    4110:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	681a      	ldr	r2, [r3, #0]
    4116:	4b3b      	ldr	r3, [pc, #236]	; (4204 <_can_async_init+0x1a8>)
    4118:	b29b      	uxth	r3, r3
    411a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    411e:	4619      	mov	r1, r3
    4120:	4610      	mov	r0, r2
    4122:	4b39      	ldr	r3, [pc, #228]	; (4208 <_can_async_init+0x1ac>)
    4124:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    4126:	687b      	ldr	r3, [r7, #4]
    4128:	681a      	ldr	r2, [r3, #0]
    412a:	4b38      	ldr	r3, [pc, #224]	; (420c <_can_async_init+0x1b0>)
    412c:	b29b      	uxth	r3, r3
    412e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4132:	4619      	mov	r1, r3
    4134:	4610      	mov	r0, r2
    4136:	4b36      	ldr	r3, [pc, #216]	; (4210 <_can_async_init+0x1b4>)
    4138:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    413a:	687b      	ldr	r3, [r7, #4]
    413c:	681b      	ldr	r3, [r3, #0]
    413e:	2108      	movs	r1, #8
    4140:	4618      	mov	r0, r3
    4142:	4b34      	ldr	r3, [pc, #208]	; (4214 <_can_async_init+0x1b8>)
    4144:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	681a      	ldr	r2, [r3, #0]
    414a:	4b33      	ldr	r3, [pc, #204]	; (4218 <_can_async_init+0x1bc>)
    414c:	b29b      	uxth	r3, r3
    414e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    4152:	4619      	mov	r1, r3
    4154:	4610      	mov	r0, r2
    4156:	4b31      	ldr	r3, [pc, #196]	; (421c <_can_async_init+0x1c0>)
    4158:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    415a:	687b      	ldr	r3, [r7, #4]
    415c:	681a      	ldr	r2, [r3, #0]
    415e:	4b30      	ldr	r3, [pc, #192]	; (4220 <_can_async_init+0x1c4>)
    4160:	b29b      	uxth	r3, r3
    4162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4166:	4619      	mov	r1, r3
    4168:	4610      	mov	r0, r2
    416a:	4b2e      	ldr	r3, [pc, #184]	; (4224 <_can_async_init+0x1c8>)
    416c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	681b      	ldr	r3, [r3, #0]
    4172:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    4176:	4618      	mov	r0, r3
    4178:	4b2b      	ldr	r3, [pc, #172]	; (4228 <_can_async_init+0x1cc>)
    417a:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    417c:	204f      	movs	r0, #79	; 0x4f
    417e:	4b2b      	ldr	r3, [pc, #172]	; (422c <_can_async_init+0x1d0>)
    4180:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    4182:	204f      	movs	r0, #79	; 0x4f
    4184:	4b2a      	ldr	r3, [pc, #168]	; (4230 <_can_async_init+0x1d4>)
    4186:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4188:	204f      	movs	r0, #79	; 0x4f
    418a:	4b2a      	ldr	r3, [pc, #168]	; (4234 <_can_async_init+0x1d8>)
    418c:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    418e:	687b      	ldr	r3, [r7, #4]
    4190:	681b      	ldr	r3, [r3, #0]
    4192:	2101      	movs	r1, #1
    4194:	4618      	mov	r0, r3
    4196:	4b28      	ldr	r3, [pc, #160]	; (4238 <_can_async_init+0x1dc>)
    4198:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    419a:	687b      	ldr	r3, [r7, #4]
    419c:	681b      	ldr	r3, [r3, #0]
    419e:	4618      	mov	r0, r3
    41a0:	4b26      	ldr	r3, [pc, #152]	; (423c <_can_async_init+0x1e0>)
    41a2:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	681b      	ldr	r3, [r3, #0]
    41a8:	4618      	mov	r0, r3
    41aa:	4b25      	ldr	r3, [pc, #148]	; (4240 <_can_async_init+0x1e4>)
    41ac:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    41ae:	bf00      	nop
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	681b      	ldr	r3, [r3, #0]
    41b4:	4618      	mov	r0, r3
    41b6:	4b06      	ldr	r3, [pc, #24]	; (41d0 <_can_async_init+0x174>)
    41b8:	4798      	blx	r3
    41ba:	4603      	mov	r3, r0
    41bc:	2b00      	cmp	r3, #0
    41be:	d1f7      	bne.n	41b0 <_can_async_init+0x154>
	};

	return ERR_NONE;
    41c0:	2300      	movs	r3, #0
}
    41c2:	4618      	mov	r0, r3
    41c4:	3708      	adds	r7, #8
    41c6:	46bd      	mov	sp, r7
    41c8:	bd80      	pop	{r7, pc}
    41ca:	bf00      	nop
    41cc:	00003e11 	.word	0x00003e11
    41d0:	00003e31 	.word	0x00003e31
    41d4:	00003e7f 	.word	0x00003e7f
    41d8:	42000400 	.word	0x42000400
    41dc:	200021a8 	.word	0x200021a8
    41e0:	20000004 	.word	0x20000004
    41e4:	00003ebf 	.word	0x00003ebf
    41e8:	00003dd9 	.word	0x00003dd9
    41ec:	00003ee1 	.word	0x00003ee1
    41f0:	00003df5 	.word	0x00003df5
    41f4:	2000a7f0 	.word	0x2000a7f0
    41f8:	00003fc5 	.word	0x00003fc5
    41fc:	00003fe3 	.word	0x00003fe3
    4200:	0000401f 	.word	0x0000401f
    4204:	2000a7a8 	.word	0x2000a7a8
    4208:	00004001 	.word	0x00004001
    420c:	20002108 	.word	0x20002108
    4210:	0000403d 	.word	0x0000403d
    4214:	00003f4d 	.word	0x00003f4d
    4218:	20002118 	.word	0x20002118
    421c:	00003f6b 	.word	0x00003f6b
    4220:	20002198 	.word	0x20002198
    4224:	00003f89 	.word	0x00003f89
    4228:	00003fa7 	.word	0x00003fa7
    422c:	00003d31 	.word	0x00003d31
    4230:	00003d75 	.word	0x00003d75
    4234:	00003cf5 	.word	0x00003cf5
    4238:	00003f31 	.word	0x00003f31
    423c:	00003e9f 	.word	0x00003e9f
    4240:	00003e5f 	.word	0x00003e5f

00004244 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    4244:	b590      	push	{r4, r7, lr}
    4246:	b083      	sub	sp, #12
    4248:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    424a:	4b2c      	ldr	r3, [pc, #176]	; (42fc <CAN1_Handler+0xb8>)
    424c:	681b      	ldr	r3, [r3, #0]
    424e:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4250:	687b      	ldr	r3, [r7, #4]
    4252:	681b      	ldr	r3, [r3, #0]
    4254:	4618      	mov	r0, r3
    4256:	4b2a      	ldr	r3, [pc, #168]	; (4300 <CAN1_Handler+0xbc>)
    4258:	4798      	blx	r3
    425a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    425c:	683b      	ldr	r3, [r7, #0]
    425e:	f003 0301 	and.w	r3, r3, #1
    4262:	2b00      	cmp	r3, #0
    4264:	d003      	beq.n	426e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	689b      	ldr	r3, [r3, #8]
    426a:	6878      	ldr	r0, [r7, #4]
    426c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    426e:	683b      	ldr	r3, [r7, #0]
    4270:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4274:	2b00      	cmp	r3, #0
    4276:	d003      	beq.n	4280 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	685b      	ldr	r3, [r3, #4]
    427c:	6878      	ldr	r0, [r7, #4]
    427e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4280:	683b      	ldr	r3, [r7, #0]
    4282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4286:	2b00      	cmp	r3, #0
    4288:	d004      	beq.n	4294 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	68db      	ldr	r3, [r3, #12]
    428e:	2103      	movs	r1, #3
    4290:	6878      	ldr	r0, [r7, #4]
    4292:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4294:	683b      	ldr	r3, [r7, #0]
    4296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    429a:	2b00      	cmp	r3, #0
    429c:	d004      	beq.n	42a8 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    429e:	687b      	ldr	r3, [r7, #4]
    42a0:	68db      	ldr	r3, [r3, #12]
    42a2:	2100      	movs	r1, #0
    42a4:	6878      	ldr	r0, [r7, #4]
    42a6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    42a8:	683b      	ldr	r3, [r7, #0]
    42aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    42ae:	2b00      	cmp	r3, #0
    42b0:	d00f      	beq.n	42d2 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    42b2:	687b      	ldr	r3, [r7, #4]
    42b4:	68dc      	ldr	r4, [r3, #12]
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	681b      	ldr	r3, [r3, #0]
    42ba:	4618      	mov	r0, r3
    42bc:	4b11      	ldr	r3, [pc, #68]	; (4304 <CAN1_Handler+0xc0>)
    42be:	4798      	blx	r3
    42c0:	4603      	mov	r3, r0
    42c2:	2b00      	cmp	r3, #0
    42c4:	d001      	beq.n	42ca <CAN1_Handler+0x86>
    42c6:	2302      	movs	r3, #2
    42c8:	e000      	b.n	42cc <CAN1_Handler+0x88>
    42ca:	2301      	movs	r3, #1
    42cc:	4619      	mov	r1, r3
    42ce:	6878      	ldr	r0, [r7, #4]
    42d0:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    42d2:	683b      	ldr	r3, [r7, #0]
    42d4:	f003 0308 	and.w	r3, r3, #8
    42d8:	2b00      	cmp	r3, #0
    42da:	d004      	beq.n	42e6 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	68db      	ldr	r3, [r3, #12]
    42e0:	2104      	movs	r1, #4
    42e2:	6878      	ldr	r0, [r7, #4]
    42e4:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    42e6:	687b      	ldr	r3, [r7, #4]
    42e8:	681b      	ldr	r3, [r3, #0]
    42ea:	6839      	ldr	r1, [r7, #0]
    42ec:	4618      	mov	r0, r3
    42ee:	4b06      	ldr	r3, [pc, #24]	; (4308 <CAN1_Handler+0xc4>)
    42f0:	4798      	blx	r3
}
    42f2:	bf00      	nop
    42f4:	370c      	adds	r7, #12
    42f6:	46bd      	mov	sp, r7
    42f8:	bd90      	pop	{r4, r7, pc}
    42fa:	bf00      	nop
    42fc:	200021a8 	.word	0x200021a8
    4300:	00003f19 	.word	0x00003f19
    4304:	00003db1 	.word	0x00003db1
    4308:	00003efd 	.word	0x00003efd

0000430c <__NVIC_SetPendingIRQ>:
{
    430c:	b480      	push	{r7}
    430e:	b083      	sub	sp, #12
    4310:	af00      	add	r7, sp, #0
    4312:	4603      	mov	r3, r0
    4314:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    431a:	2b00      	cmp	r3, #0
    431c:	db0c      	blt.n	4338 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    431e:	4909      	ldr	r1, [pc, #36]	; (4344 <__NVIC_SetPendingIRQ+0x38>)
    4320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4324:	095b      	lsrs	r3, r3, #5
    4326:	88fa      	ldrh	r2, [r7, #6]
    4328:	f002 021f 	and.w	r2, r2, #31
    432c:	2001      	movs	r0, #1
    432e:	fa00 f202 	lsl.w	r2, r0, r2
    4332:	3340      	adds	r3, #64	; 0x40
    4334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4338:	bf00      	nop
    433a:	370c      	adds	r7, #12
    433c:	46bd      	mov	sp, r7
    433e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4342:	4770      	bx	lr
    4344:	e000e100 	.word	0xe000e100

00004348 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4348:	b580      	push	{r7, lr}
    434a:	b082      	sub	sp, #8
    434c:	af00      	add	r7, sp, #0
    434e:	4603      	mov	r3, r0
    4350:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    4352:	79fb      	ldrb	r3, [r7, #7]
    4354:	b21b      	sxth	r3, r3
    4356:	4618      	mov	r0, r3
    4358:	4b02      	ldr	r3, [pc, #8]	; (4364 <_irq_set+0x1c>)
    435a:	4798      	blx	r3
}
    435c:	bf00      	nop
    435e:	3708      	adds	r7, #8
    4360:	46bd      	mov	sp, r7
    4362:	bd80      	pop	{r7, pc}
    4364:	0000430d 	.word	0x0000430d

00004368 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4368:	b480      	push	{r7}
    436a:	b083      	sub	sp, #12
    436c:	af00      	add	r7, sp, #0
    436e:	4603      	mov	r3, r0
    4370:	6039      	str	r1, [r7, #0]
    4372:	80fb      	strh	r3, [r7, #6]
    4374:	4613      	mov	r3, r2
    4376:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4378:	797b      	ldrb	r3, [r7, #5]
    437a:	3b04      	subs	r3, #4
    437c:	2b05      	cmp	r3, #5
    437e:	d86b      	bhi.n	4458 <_get_cycles_for_us_internal+0xf0>
    4380:	a201      	add	r2, pc, #4	; (adr r2, 4388 <_get_cycles_for_us_internal+0x20>)
    4382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4386:	bf00      	nop
    4388:	00004437 	.word	0x00004437
    438c:	00004417 	.word	0x00004417
    4390:	000043f9 	.word	0x000043f9
    4394:	000043db 	.word	0x000043db
    4398:	000043bd 	.word	0x000043bd
    439c:	000043a1 	.word	0x000043a1
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    43a0:	88fb      	ldrh	r3, [r7, #6]
    43a2:	683a      	ldr	r2, [r7, #0]
    43a4:	4935      	ldr	r1, [pc, #212]	; (447c <_get_cycles_for_us_internal+0x114>)
    43a6:	fba1 1202 	umull	r1, r2, r1, r2
    43aa:	0c92      	lsrs	r2, r2, #18
    43ac:	fb02 f303 	mul.w	r3, r2, r3
    43b0:	3302      	adds	r3, #2
    43b2:	4a33      	ldr	r2, [pc, #204]	; (4480 <_get_cycles_for_us_internal+0x118>)
    43b4:	fba2 2303 	umull	r2, r3, r2, r3
    43b8:	085b      	lsrs	r3, r3, #1
    43ba:	e059      	b.n	4470 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    43bc:	88fb      	ldrh	r3, [r7, #6]
    43be:	683a      	ldr	r2, [r7, #0]
    43c0:	0952      	lsrs	r2, r2, #5
    43c2:	4930      	ldr	r1, [pc, #192]	; (4484 <_get_cycles_for_us_internal+0x11c>)
    43c4:	fba1 1202 	umull	r1, r2, r1, r2
    43c8:	09d2      	lsrs	r2, r2, #7
    43ca:	fb02 f303 	mul.w	r3, r2, r3
    43ce:	331d      	adds	r3, #29
    43d0:	4a2d      	ldr	r2, [pc, #180]	; (4488 <_get_cycles_for_us_internal+0x120>)
    43d2:	fba2 2303 	umull	r2, r3, r2, r3
    43d6:	091b      	lsrs	r3, r3, #4
    43d8:	e04a      	b.n	4470 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    43da:	88fb      	ldrh	r3, [r7, #6]
    43dc:	683a      	ldr	r2, [r7, #0]
    43de:	492b      	ldr	r1, [pc, #172]	; (448c <_get_cycles_for_us_internal+0x124>)
    43e0:	fba1 1202 	umull	r1, r2, r1, r2
    43e4:	0b52      	lsrs	r2, r2, #13
    43e6:	fb02 f303 	mul.w	r3, r2, r3
    43ea:	f203 132b 	addw	r3, r3, #299	; 0x12b
    43ee:	4a28      	ldr	r2, [pc, #160]	; (4490 <_get_cycles_for_us_internal+0x128>)
    43f0:	fba2 2303 	umull	r2, r3, r2, r3
    43f4:	095b      	lsrs	r3, r3, #5
    43f6:	e03b      	b.n	4470 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    43f8:	88fb      	ldrh	r3, [r7, #6]
    43fa:	683a      	ldr	r2, [r7, #0]
    43fc:	4925      	ldr	r1, [pc, #148]	; (4494 <_get_cycles_for_us_internal+0x12c>)
    43fe:	fba1 1202 	umull	r1, r2, r1, r2
    4402:	0992      	lsrs	r2, r2, #6
    4404:	fb02 f303 	mul.w	r3, r2, r3
    4408:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    440c:	4a22      	ldr	r2, [pc, #136]	; (4498 <_get_cycles_for_us_internal+0x130>)
    440e:	fba2 2303 	umull	r2, r3, r2, r3
    4412:	099b      	lsrs	r3, r3, #6
    4414:	e02c      	b.n	4470 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4416:	88fb      	ldrh	r3, [r7, #6]
    4418:	683a      	ldr	r2, [r7, #0]
    441a:	4920      	ldr	r1, [pc, #128]	; (449c <_get_cycles_for_us_internal+0x134>)
    441c:	fba1 1202 	umull	r1, r2, r1, r2
    4420:	0952      	lsrs	r2, r2, #5
    4422:	fb02 f303 	mul.w	r3, r2, r3
    4426:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    442a:	332f      	adds	r3, #47	; 0x2f
    442c:	4a1c      	ldr	r2, [pc, #112]	; (44a0 <_get_cycles_for_us_internal+0x138>)
    442e:	fba2 2303 	umull	r2, r3, r2, r3
    4432:	0b5b      	lsrs	r3, r3, #13
    4434:	e01c      	b.n	4470 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    4436:	88fb      	ldrh	r3, [r7, #6]
    4438:	683a      	ldr	r2, [r7, #0]
    443a:	491a      	ldr	r1, [pc, #104]	; (44a4 <_get_cycles_for_us_internal+0x13c>)
    443c:	fba1 1202 	umull	r1, r2, r1, r2
    4440:	08d2      	lsrs	r2, r2, #3
    4442:	fb02 f303 	mul.w	r3, r2, r3
    4446:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    444a:	f203 33df 	addw	r3, r3, #991	; 0x3df
    444e:	4a16      	ldr	r2, [pc, #88]	; (44a8 <_get_cycles_for_us_internal+0x140>)
    4450:	fba2 2303 	umull	r2, r3, r2, r3
    4454:	0c5b      	lsrs	r3, r3, #17
    4456:	e00b      	b.n	4470 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4458:	88fb      	ldrh	r3, [r7, #6]
    445a:	683a      	ldr	r2, [r7, #0]
    445c:	fb02 f303 	mul.w	r3, r2, r3
    4460:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4464:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4468:	4a10      	ldr	r2, [pc, #64]	; (44ac <_get_cycles_for_us_internal+0x144>)
    446a:	fba2 2303 	umull	r2, r3, r2, r3
    446e:	0c9b      	lsrs	r3, r3, #18
	}
}
    4470:	4618      	mov	r0, r3
    4472:	370c      	adds	r7, #12
    4474:	46bd      	mov	sp, r7
    4476:	f85d 7b04 	ldr.w	r7, [sp], #4
    447a:	4770      	bx	lr
    447c:	431bde83 	.word	0x431bde83
    4480:	aaaaaaab 	.word	0xaaaaaaab
    4484:	0a7c5ac5 	.word	0x0a7c5ac5
    4488:	88888889 	.word	0x88888889
    448c:	d1b71759 	.word	0xd1b71759
    4490:	1b4e81b5 	.word	0x1b4e81b5
    4494:	10624dd3 	.word	0x10624dd3
    4498:	057619f1 	.word	0x057619f1
    449c:	51eb851f 	.word	0x51eb851f
    44a0:	45e7b273 	.word	0x45e7b273
    44a4:	cccccccd 	.word	0xcccccccd
    44a8:	6fd91d85 	.word	0x6fd91d85
    44ac:	165e9f81 	.word	0x165e9f81

000044b0 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    44b0:	b580      	push	{r7, lr}
    44b2:	b082      	sub	sp, #8
    44b4:	af00      	add	r7, sp, #0
    44b6:	4603      	mov	r3, r0
    44b8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    44ba:	88fb      	ldrh	r3, [r7, #6]
    44bc:	2209      	movs	r2, #9
    44be:	4904      	ldr	r1, [pc, #16]	; (44d0 <_get_cycles_for_us+0x20>)
    44c0:	4618      	mov	r0, r3
    44c2:	4b04      	ldr	r3, [pc, #16]	; (44d4 <_get_cycles_for_us+0x24>)
    44c4:	4798      	blx	r3
    44c6:	4603      	mov	r3, r0
}
    44c8:	4618      	mov	r0, r3
    44ca:	3708      	adds	r7, #8
    44cc:	46bd      	mov	sp, r7
    44ce:	bd80      	pop	{r7, pc}
    44d0:	07270e00 	.word	0x07270e00
    44d4:	00004369 	.word	0x00004369

000044d8 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    44d8:	b480      	push	{r7}
    44da:	b083      	sub	sp, #12
    44dc:	af00      	add	r7, sp, #0
    44de:	4603      	mov	r3, r0
    44e0:	6039      	str	r1, [r7, #0]
    44e2:	80fb      	strh	r3, [r7, #6]
    44e4:	4613      	mov	r3, r2
    44e6:	717b      	strb	r3, [r7, #5]
	switch (power) {
    44e8:	797b      	ldrb	r3, [r7, #5]
    44ea:	3b04      	subs	r3, #4
    44ec:	2b05      	cmp	r3, #5
    44ee:	d870      	bhi.n	45d2 <_get_cycles_for_ms_internal+0xfa>
    44f0:	a201      	add	r2, pc, #4	; (adr r2, 44f8 <_get_cycles_for_ms_internal+0x20>)
    44f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    44f6:	bf00      	nop
    44f8:	000045b5 	.word	0x000045b5
    44fc:	00004599 	.word	0x00004599
    4500:	0000457d 	.word	0x0000457d
    4504:	00004559 	.word	0x00004559
    4508:	00004535 	.word	0x00004535
    450c:	00004511 	.word	0x00004511
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4510:	88fb      	ldrh	r3, [r7, #6]
    4512:	683a      	ldr	r2, [r7, #0]
    4514:	4937      	ldr	r1, [pc, #220]	; (45f4 <_get_cycles_for_ms_internal+0x11c>)
    4516:	fba1 1202 	umull	r1, r2, r1, r2
    451a:	0c92      	lsrs	r2, r2, #18
    451c:	fb02 f303 	mul.w	r3, r2, r3
    4520:	3302      	adds	r3, #2
    4522:	4a35      	ldr	r2, [pc, #212]	; (45f8 <_get_cycles_for_ms_internal+0x120>)
    4524:	fba2 2303 	umull	r2, r3, r2, r3
    4528:	085b      	lsrs	r3, r3, #1
    452a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    452e:	fb02 f303 	mul.w	r3, r2, r3
    4532:	e058      	b.n	45e6 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4534:	88fb      	ldrh	r3, [r7, #6]
    4536:	683a      	ldr	r2, [r7, #0]
    4538:	0952      	lsrs	r2, r2, #5
    453a:	4930      	ldr	r1, [pc, #192]	; (45fc <_get_cycles_for_ms_internal+0x124>)
    453c:	fba1 1202 	umull	r1, r2, r1, r2
    4540:	09d2      	lsrs	r2, r2, #7
    4542:	fb02 f303 	mul.w	r3, r2, r3
    4546:	3302      	adds	r3, #2
    4548:	4a2b      	ldr	r2, [pc, #172]	; (45f8 <_get_cycles_for_ms_internal+0x120>)
    454a:	fba2 2303 	umull	r2, r3, r2, r3
    454e:	085b      	lsrs	r3, r3, #1
    4550:	2264      	movs	r2, #100	; 0x64
    4552:	fb02 f303 	mul.w	r3, r2, r3
    4556:	e046      	b.n	45e6 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4558:	88fb      	ldrh	r3, [r7, #6]
    455a:	683a      	ldr	r2, [r7, #0]
    455c:	4928      	ldr	r1, [pc, #160]	; (4600 <_get_cycles_for_ms_internal+0x128>)
    455e:	fba1 1202 	umull	r1, r2, r1, r2
    4562:	0b52      	lsrs	r2, r2, #13
    4564:	fb02 f303 	mul.w	r3, r2, r3
    4568:	3302      	adds	r3, #2
    456a:	4a23      	ldr	r2, [pc, #140]	; (45f8 <_get_cycles_for_ms_internal+0x120>)
    456c:	fba2 2303 	umull	r2, r3, r2, r3
    4570:	085a      	lsrs	r2, r3, #1
    4572:	4613      	mov	r3, r2
    4574:	009b      	lsls	r3, r3, #2
    4576:	4413      	add	r3, r2
    4578:	005b      	lsls	r3, r3, #1
    457a:	e034      	b.n	45e6 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    457c:	88fb      	ldrh	r3, [r7, #6]
    457e:	683a      	ldr	r2, [r7, #0]
    4580:	4920      	ldr	r1, [pc, #128]	; (4604 <_get_cycles_for_ms_internal+0x12c>)
    4582:	fba1 1202 	umull	r1, r2, r1, r2
    4586:	0992      	lsrs	r2, r2, #6
    4588:	fb02 f303 	mul.w	r3, r2, r3
    458c:	3302      	adds	r3, #2
    458e:	4a1a      	ldr	r2, [pc, #104]	; (45f8 <_get_cycles_for_ms_internal+0x120>)
    4590:	fba2 2303 	umull	r2, r3, r2, r3
    4594:	085b      	lsrs	r3, r3, #1
    4596:	e026      	b.n	45e6 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4598:	88fb      	ldrh	r3, [r7, #6]
    459a:	683a      	ldr	r2, [r7, #0]
    459c:	491a      	ldr	r1, [pc, #104]	; (4608 <_get_cycles_for_ms_internal+0x130>)
    459e:	fba1 1202 	umull	r1, r2, r1, r2
    45a2:	0952      	lsrs	r2, r2, #5
    45a4:	fb02 f303 	mul.w	r3, r2, r3
    45a8:	331d      	adds	r3, #29
    45aa:	4a18      	ldr	r2, [pc, #96]	; (460c <_get_cycles_for_ms_internal+0x134>)
    45ac:	fba2 2303 	umull	r2, r3, r2, r3
    45b0:	091b      	lsrs	r3, r3, #4
    45b2:	e018      	b.n	45e6 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    45b4:	88fb      	ldrh	r3, [r7, #6]
    45b6:	683a      	ldr	r2, [r7, #0]
    45b8:	4915      	ldr	r1, [pc, #84]	; (4610 <_get_cycles_for_ms_internal+0x138>)
    45ba:	fba1 1202 	umull	r1, r2, r1, r2
    45be:	08d2      	lsrs	r2, r2, #3
    45c0:	fb02 f303 	mul.w	r3, r2, r3
    45c4:	f203 132b 	addw	r3, r3, #299	; 0x12b
    45c8:	4a12      	ldr	r2, [pc, #72]	; (4614 <_get_cycles_for_ms_internal+0x13c>)
    45ca:	fba2 2303 	umull	r2, r3, r2, r3
    45ce:	095b      	lsrs	r3, r3, #5
    45d0:	e009      	b.n	45e6 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    45d2:	88fb      	ldrh	r3, [r7, #6]
    45d4:	683a      	ldr	r2, [r7, #0]
    45d6:	fb02 f303 	mul.w	r3, r2, r3
    45da:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    45de:	4a0e      	ldr	r2, [pc, #56]	; (4618 <_get_cycles_for_ms_internal+0x140>)
    45e0:	fba2 2303 	umull	r2, r3, r2, r3
    45e4:	099b      	lsrs	r3, r3, #6
	}
}
    45e6:	4618      	mov	r0, r3
    45e8:	370c      	adds	r7, #12
    45ea:	46bd      	mov	sp, r7
    45ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    45f0:	4770      	bx	lr
    45f2:	bf00      	nop
    45f4:	431bde83 	.word	0x431bde83
    45f8:	aaaaaaab 	.word	0xaaaaaaab
    45fc:	0a7c5ac5 	.word	0x0a7c5ac5
    4600:	d1b71759 	.word	0xd1b71759
    4604:	10624dd3 	.word	0x10624dd3
    4608:	51eb851f 	.word	0x51eb851f
    460c:	88888889 	.word	0x88888889
    4610:	cccccccd 	.word	0xcccccccd
    4614:	1b4e81b5 	.word	0x1b4e81b5
    4618:	057619f1 	.word	0x057619f1

0000461c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    461c:	b580      	push	{r7, lr}
    461e:	b082      	sub	sp, #8
    4620:	af00      	add	r7, sp, #0
    4622:	4603      	mov	r3, r0
    4624:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4626:	88fb      	ldrh	r3, [r7, #6]
    4628:	2209      	movs	r2, #9
    462a:	4904      	ldr	r1, [pc, #16]	; (463c <_get_cycles_for_ms+0x20>)
    462c:	4618      	mov	r0, r3
    462e:	4b04      	ldr	r3, [pc, #16]	; (4640 <_get_cycles_for_ms+0x24>)
    4630:	4798      	blx	r3
    4632:	4603      	mov	r3, r0
}
    4634:	4618      	mov	r0, r3
    4636:	3708      	adds	r7, #8
    4638:	46bd      	mov	sp, r7
    463a:	bd80      	pop	{r7, pc}
    463c:	07270e00 	.word	0x07270e00
    4640:	000044d9 	.word	0x000044d9
    4644:	00000000 	.word	0x00000000

00004648 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4648:	b480      	push	{r7}
    464a:	b083      	sub	sp, #12
    464c:	af00      	add	r7, sp, #0
    464e:	6078      	str	r0, [r7, #4]
    4650:	6039      	str	r1, [r7, #0]
    4652:	bf00      	nop
    4654:	f3af 8000 	nop.w

00004658 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4658:	3901      	subs	r1, #1
    465a:	d8fd      	bhi.n	4658 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    465c:	bf00      	nop
    465e:	370c      	adds	r7, #12
    4660:	46bd      	mov	sp, r7
    4662:	f85d 7b04 	ldr.w	r7, [sp], #4
    4666:	4770      	bx	lr

00004668 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4668:	b480      	push	{r7}
    466a:	b083      	sub	sp, #12
    466c:	af00      	add	r7, sp, #0
    466e:	6078      	str	r0, [r7, #4]
    4670:	460b      	mov	r3, r1
    4672:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	881b      	ldrh	r3, [r3, #0]
    4678:	b29a      	uxth	r2, r3
    467a:	887b      	ldrh	r3, [r7, #2]
    467c:	021b      	lsls	r3, r3, #8
    467e:	b29b      	uxth	r3, r3
    4680:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4684:	b29b      	uxth	r3, r3
    4686:	4313      	orrs	r3, r2
    4688:	b29a      	uxth	r2, r3
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    468e:	bf00      	nop
    4690:	370c      	adds	r7, #12
    4692:	46bd      	mov	sp, r7
    4694:	f85d 7b04 	ldr.w	r7, [sp], #4
    4698:	4770      	bx	lr

0000469a <hri_port_set_EVCTRL_reg>:
{
    469a:	b480      	push	{r7}
    469c:	b085      	sub	sp, #20
    469e:	af00      	add	r7, sp, #0
    46a0:	60f8      	str	r0, [r7, #12]
    46a2:	460b      	mov	r3, r1
    46a4:	607a      	str	r2, [r7, #4]
    46a6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    46a8:	7afb      	ldrb	r3, [r7, #11]
    46aa:	7afa      	ldrb	r2, [r7, #11]
    46ac:	68f9      	ldr	r1, [r7, #12]
    46ae:	01d2      	lsls	r2, r2, #7
    46b0:	440a      	add	r2, r1
    46b2:	322c      	adds	r2, #44	; 0x2c
    46b4:	6811      	ldr	r1, [r2, #0]
    46b6:	687a      	ldr	r2, [r7, #4]
    46b8:	430a      	orrs	r2, r1
    46ba:	68f9      	ldr	r1, [r7, #12]
    46bc:	01db      	lsls	r3, r3, #7
    46be:	440b      	add	r3, r1
    46c0:	332c      	adds	r3, #44	; 0x2c
    46c2:	601a      	str	r2, [r3, #0]
}
    46c4:	bf00      	nop
    46c6:	3714      	adds	r7, #20
    46c8:	46bd      	mov	sp, r7
    46ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ce:	4770      	bx	lr

000046d0 <_port_event_init>:

static inline void _port_event_init()
{
    46d0:	b580      	push	{r7, lr}
    46d2:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    46d4:	2200      	movs	r2, #0
    46d6:	2100      	movs	r1, #0
    46d8:	480a      	ldr	r0, [pc, #40]	; (4704 <_port_event_init+0x34>)
    46da:	4b0b      	ldr	r3, [pc, #44]	; (4708 <_port_event_init+0x38>)
    46dc:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    46de:	2200      	movs	r2, #0
    46e0:	2101      	movs	r1, #1
    46e2:	4808      	ldr	r0, [pc, #32]	; (4704 <_port_event_init+0x34>)
    46e4:	4b08      	ldr	r3, [pc, #32]	; (4708 <_port_event_init+0x38>)
    46e6:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    46e8:	f64e 72ef 	movw	r2, #61423	; 0xefef
    46ec:	2102      	movs	r1, #2
    46ee:	4805      	ldr	r0, [pc, #20]	; (4704 <_port_event_init+0x34>)
    46f0:	4b05      	ldr	r3, [pc, #20]	; (4708 <_port_event_init+0x38>)
    46f2:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    46f4:	2200      	movs	r2, #0
    46f6:	2103      	movs	r1, #3
    46f8:	4802      	ldr	r0, [pc, #8]	; (4704 <_port_event_init+0x34>)
    46fa:	4b03      	ldr	r3, [pc, #12]	; (4708 <_port_event_init+0x38>)
    46fc:	4798      	blx	r3
}
    46fe:	bf00      	nop
    4700:	bd80      	pop	{r7, pc}
    4702:	bf00      	nop
    4704:	41008000 	.word	0x41008000
    4708:	0000469b 	.word	0x0000469b

0000470c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    470c:	b580      	push	{r7, lr}
    470e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4710:	2104      	movs	r1, #4
    4712:	480b      	ldr	r0, [pc, #44]	; (4740 <_init_chip+0x34>)
    4714:	4b0b      	ldr	r3, [pc, #44]	; (4744 <_init_chip+0x38>)
    4716:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4718:	4b0b      	ldr	r3, [pc, #44]	; (4748 <_init_chip+0x3c>)
    471a:	4798      	blx	r3
	_oscctrl_init_sources();
    471c:	4b0b      	ldr	r3, [pc, #44]	; (474c <_init_chip+0x40>)
    471e:	4798      	blx	r3
	_mclk_init();
    4720:	4b0b      	ldr	r3, [pc, #44]	; (4750 <_init_chip+0x44>)
    4722:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4724:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4728:	4b0a      	ldr	r3, [pc, #40]	; (4754 <_init_chip+0x48>)
    472a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    472c:	4b0a      	ldr	r3, [pc, #40]	; (4758 <_init_chip+0x4c>)
    472e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4730:	f640 30df 	movw	r0, #3039	; 0xbdf
    4734:	4b07      	ldr	r3, [pc, #28]	; (4754 <_init_chip+0x48>)
    4736:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4738:	4b08      	ldr	r3, [pc, #32]	; (475c <_init_chip+0x50>)
    473a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    473c:	bf00      	nop
    473e:	bd80      	pop	{r7, pc}
    4740:	41004000 	.word	0x41004000
    4744:	00004669 	.word	0x00004669
    4748:	00005235 	.word	0x00005235
    474c:	000056fd 	.word	0x000056fd
    4750:	00005155 	.word	0x00005155
    4754:	00004ffd 	.word	0x00004ffd
    4758:	0000573d 	.word	0x0000573d
    475c:	000046d1 	.word	0x000046d1

00004760 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4760:	b480      	push	{r7}
    4762:	b083      	sub	sp, #12
    4764:	af00      	add	r7, sp, #0
    4766:	6078      	str	r0, [r7, #4]
    4768:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    476a:	687b      	ldr	r3, [r7, #4]
    476c:	683a      	ldr	r2, [r7, #0]
    476e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4770:	2300      	movs	r3, #0
}
    4772:	4618      	mov	r0, r3
    4774:	370c      	adds	r7, #12
    4776:	46bd      	mov	sp, r7
    4778:	f85d 7b04 	ldr.w	r7, [sp], #4
    477c:	4770      	bx	lr
	...

00004780 <__NVIC_EnableIRQ>:
{
    4780:	b480      	push	{r7}
    4782:	b083      	sub	sp, #12
    4784:	af00      	add	r7, sp, #0
    4786:	4603      	mov	r3, r0
    4788:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    478a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    478e:	2b00      	cmp	r3, #0
    4790:	db0b      	blt.n	47aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4792:	4909      	ldr	r1, [pc, #36]	; (47b8 <__NVIC_EnableIRQ+0x38>)
    4794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4798:	095b      	lsrs	r3, r3, #5
    479a:	88fa      	ldrh	r2, [r7, #6]
    479c:	f002 021f 	and.w	r2, r2, #31
    47a0:	2001      	movs	r0, #1
    47a2:	fa00 f202 	lsl.w	r2, r0, r2
    47a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47aa:	bf00      	nop
    47ac:	370c      	adds	r7, #12
    47ae:	46bd      	mov	sp, r7
    47b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b4:	4770      	bx	lr
    47b6:	bf00      	nop
    47b8:	e000e100 	.word	0xe000e100

000047bc <__NVIC_DisableIRQ>:
{
    47bc:	b480      	push	{r7}
    47be:	b083      	sub	sp, #12
    47c0:	af00      	add	r7, sp, #0
    47c2:	4603      	mov	r3, r0
    47c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    47c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    47ca:	2b00      	cmp	r3, #0
    47cc:	db10      	blt.n	47f0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    47ce:	490b      	ldr	r1, [pc, #44]	; (47fc <__NVIC_DisableIRQ+0x40>)
    47d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    47d4:	095b      	lsrs	r3, r3, #5
    47d6:	88fa      	ldrh	r2, [r7, #6]
    47d8:	f002 021f 	and.w	r2, r2, #31
    47dc:	2001      	movs	r0, #1
    47de:	fa00 f202 	lsl.w	r2, r0, r2
    47e2:	3320      	adds	r3, #32
    47e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    47e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    47ec:	f3bf 8f6f 	isb	sy
}
    47f0:	bf00      	nop
    47f2:	370c      	adds	r7, #12
    47f4:	46bd      	mov	sp, r7
    47f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    47fa:	4770      	bx	lr
    47fc:	e000e100 	.word	0xe000e100

00004800 <__NVIC_ClearPendingIRQ>:
{
    4800:	b480      	push	{r7}
    4802:	b083      	sub	sp, #12
    4804:	af00      	add	r7, sp, #0
    4806:	4603      	mov	r3, r0
    4808:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    480a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    480e:	2b00      	cmp	r3, #0
    4810:	db0c      	blt.n	482c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4812:	4909      	ldr	r1, [pc, #36]	; (4838 <__NVIC_ClearPendingIRQ+0x38>)
    4814:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4818:	095b      	lsrs	r3, r3, #5
    481a:	88fa      	ldrh	r2, [r7, #6]
    481c:	f002 021f 	and.w	r2, r2, #31
    4820:	2001      	movs	r0, #1
    4822:	fa00 f202 	lsl.w	r2, r0, r2
    4826:	3360      	adds	r3, #96	; 0x60
    4828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    482c:	bf00      	nop
    482e:	370c      	adds	r7, #12
    4830:	46bd      	mov	sp, r7
    4832:	f85d 7b04 	ldr.w	r7, [sp], #4
    4836:	4770      	bx	lr
    4838:	e000e100 	.word	0xe000e100

0000483c <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    483c:	b480      	push	{r7}
    483e:	b083      	sub	sp, #12
    4840:	af00      	add	r7, sp, #0
    4842:	6078      	str	r0, [r7, #4]
    4844:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4846:	bf00      	nop
    4848:	687b      	ldr	r3, [r7, #4]
    484a:	685a      	ldr	r2, [r3, #4]
    484c:	683b      	ldr	r3, [r7, #0]
    484e:	4013      	ands	r3, r2
    4850:	2b00      	cmp	r3, #0
    4852:	d1f9      	bne.n	4848 <hri_eic_wait_for_sync+0xc>
	};
}
    4854:	bf00      	nop
    4856:	370c      	adds	r7, #12
    4858:	46bd      	mov	sp, r7
    485a:	f85d 7b04 	ldr.w	r7, [sp], #4
    485e:	4770      	bx	lr

00004860 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4860:	b480      	push	{r7}
    4862:	b083      	sub	sp, #12
    4864:	af00      	add	r7, sp, #0
    4866:	6078      	str	r0, [r7, #4]
    4868:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    486a:	687b      	ldr	r3, [r7, #4]
    486c:	685a      	ldr	r2, [r3, #4]
    486e:	683b      	ldr	r3, [r7, #0]
    4870:	4013      	ands	r3, r2
    4872:	2b00      	cmp	r3, #0
    4874:	bf14      	ite	ne
    4876:	2301      	movne	r3, #1
    4878:	2300      	moveq	r3, #0
    487a:	b2db      	uxtb	r3, r3
}
    487c:	4618      	mov	r0, r3
    487e:	370c      	adds	r7, #12
    4880:	46bd      	mov	sp, r7
    4882:	f85d 7b04 	ldr.w	r7, [sp], #4
    4886:	4770      	bx	lr

00004888 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4888:	b480      	push	{r7}
    488a:	b083      	sub	sp, #12
    488c:	af00      	add	r7, sp, #0
    488e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4890:	687b      	ldr	r3, [r7, #4]
    4892:	695b      	ldr	r3, [r3, #20]
}
    4894:	4618      	mov	r0, r3
    4896:	370c      	adds	r7, #12
    4898:	46bd      	mov	sp, r7
    489a:	f85d 7b04 	ldr.w	r7, [sp], #4
    489e:	4770      	bx	lr

000048a0 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    48a0:	b480      	push	{r7}
    48a2:	b083      	sub	sp, #12
    48a4:	af00      	add	r7, sp, #0
    48a6:	6078      	str	r0, [r7, #4]
    48a8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	683a      	ldr	r2, [r7, #0]
    48ae:	615a      	str	r2, [r3, #20]
}
    48b0:	bf00      	nop
    48b2:	370c      	adds	r7, #12
    48b4:	46bd      	mov	sp, r7
    48b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    48ba:	4770      	bx	lr

000048bc <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    48bc:	b480      	push	{r7}
    48be:	b083      	sub	sp, #12
    48c0:	af00      	add	r7, sp, #0
    48c2:	6078      	str	r0, [r7, #4]
    48c4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    48c6:	687b      	ldr	r3, [r7, #4]
    48c8:	683a      	ldr	r2, [r7, #0]
    48ca:	611a      	str	r2, [r3, #16]
}
    48cc:	bf00      	nop
    48ce:	370c      	adds	r7, #12
    48d0:	46bd      	mov	sp, r7
    48d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    48d6:	4770      	bx	lr

000048d8 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    48d8:	b480      	push	{r7}
    48da:	b083      	sub	sp, #12
    48dc:	af00      	add	r7, sp, #0
    48de:	6078      	str	r0, [r7, #4]
    48e0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    48e2:	687b      	ldr	r3, [r7, #4]
    48e4:	683a      	ldr	r2, [r7, #0]
    48e6:	60da      	str	r2, [r3, #12]
}
    48e8:	bf00      	nop
    48ea:	370c      	adds	r7, #12
    48ec:	46bd      	mov	sp, r7
    48ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    48f2:	4770      	bx	lr

000048f4 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    48f4:	b580      	push	{r7, lr}
    48f6:	b082      	sub	sp, #8
    48f8:	af00      	add	r7, sp, #0
    48fa:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    48fc:	687b      	ldr	r3, [r7, #4]
    48fe:	781b      	ldrb	r3, [r3, #0]
    4900:	b2db      	uxtb	r3, r3
    4902:	f043 0302 	orr.w	r3, r3, #2
    4906:	b2da      	uxtb	r2, r3
    4908:	687b      	ldr	r3, [r7, #4]
    490a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    490c:	2103      	movs	r1, #3
    490e:	6878      	ldr	r0, [r7, #4]
    4910:	4b02      	ldr	r3, [pc, #8]	; (491c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4912:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4914:	bf00      	nop
    4916:	3708      	adds	r7, #8
    4918:	46bd      	mov	sp, r7
    491a:	bd80      	pop	{r7, pc}
    491c:	0000483d 	.word	0x0000483d

00004920 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4920:	b580      	push	{r7, lr}
    4922:	b082      	sub	sp, #8
    4924:	af00      	add	r7, sp, #0
    4926:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4928:	687b      	ldr	r3, [r7, #4]
    492a:	781b      	ldrb	r3, [r3, #0]
    492c:	b2db      	uxtb	r3, r3
    492e:	f023 0302 	bic.w	r3, r3, #2
    4932:	b2da      	uxtb	r2, r3
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4938:	2103      	movs	r1, #3
    493a:	6878      	ldr	r0, [r7, #4]
    493c:	4b02      	ldr	r3, [pc, #8]	; (4948 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    493e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4940:	bf00      	nop
    4942:	3708      	adds	r7, #8
    4944:	46bd      	mov	sp, r7
    4946:	bd80      	pop	{r7, pc}
    4948:	0000483d 	.word	0x0000483d

0000494c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    494c:	b580      	push	{r7, lr}
    494e:	b084      	sub	sp, #16
    4950:	af00      	add	r7, sp, #0
    4952:	6078      	str	r0, [r7, #4]
    4954:	460b      	mov	r3, r1
    4956:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4958:	687b      	ldr	r3, [r7, #4]
    495a:	781b      	ldrb	r3, [r3, #0]
    495c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    495e:	7bfb      	ldrb	r3, [r7, #15]
    4960:	f023 0310 	bic.w	r3, r3, #16
    4964:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4966:	78fb      	ldrb	r3, [r7, #3]
    4968:	011b      	lsls	r3, r3, #4
    496a:	b25a      	sxtb	r2, r3
    496c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4970:	4313      	orrs	r3, r2
    4972:	b25b      	sxtb	r3, r3
    4974:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4976:	687b      	ldr	r3, [r7, #4]
    4978:	7bfa      	ldrb	r2, [r7, #15]
    497a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    497c:	2103      	movs	r1, #3
    497e:	6878      	ldr	r0, [r7, #4]
    4980:	4b02      	ldr	r3, [pc, #8]	; (498c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4982:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4984:	bf00      	nop
    4986:	3710      	adds	r7, #16
    4988:	46bd      	mov	sp, r7
    498a:	bd80      	pop	{r7, pc}
    498c:	0000483d 	.word	0x0000483d

00004990 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4990:	b580      	push	{r7, lr}
    4992:	b084      	sub	sp, #16
    4994:	af00      	add	r7, sp, #0
    4996:	6078      	str	r0, [r7, #4]
    4998:	460b      	mov	r3, r1
    499a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    499c:	2103      	movs	r1, #3
    499e:	6878      	ldr	r0, [r7, #4]
    49a0:	4b06      	ldr	r3, [pc, #24]	; (49bc <hri_eic_get_CTRLA_reg+0x2c>)
    49a2:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    49a4:	687b      	ldr	r3, [r7, #4]
    49a6:	781b      	ldrb	r3, [r3, #0]
    49a8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    49aa:	7bfa      	ldrb	r2, [r7, #15]
    49ac:	78fb      	ldrb	r3, [r7, #3]
    49ae:	4013      	ands	r3, r2
    49b0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    49b2:	7bfb      	ldrb	r3, [r7, #15]
}
    49b4:	4618      	mov	r0, r3
    49b6:	3710      	adds	r7, #16
    49b8:	46bd      	mov	sp, r7
    49ba:	bd80      	pop	{r7, pc}
    49bc:	0000483d 	.word	0x0000483d

000049c0 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    49c0:	b580      	push	{r7, lr}
    49c2:	b082      	sub	sp, #8
    49c4:	af00      	add	r7, sp, #0
    49c6:	6078      	str	r0, [r7, #4]
    49c8:	460b      	mov	r3, r1
    49ca:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    49cc:	687b      	ldr	r3, [r7, #4]
    49ce:	78fa      	ldrb	r2, [r7, #3]
    49d0:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    49d2:	2103      	movs	r1, #3
    49d4:	6878      	ldr	r0, [r7, #4]
    49d6:	4b03      	ldr	r3, [pc, #12]	; (49e4 <hri_eic_write_CTRLA_reg+0x24>)
    49d8:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    49da:	bf00      	nop
    49dc:	3708      	adds	r7, #8
    49de:	46bd      	mov	sp, r7
    49e0:	bd80      	pop	{r7, pc}
    49e2:	bf00      	nop
    49e4:	0000483d 	.word	0x0000483d

000049e8 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    49e8:	b480      	push	{r7}
    49ea:	b083      	sub	sp, #12
    49ec:	af00      	add	r7, sp, #0
    49ee:	6078      	str	r0, [r7, #4]
    49f0:	460b      	mov	r3, r1
    49f2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    49f4:	687b      	ldr	r3, [r7, #4]
    49f6:	78fa      	ldrb	r2, [r7, #3]
    49f8:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    49fa:	bf00      	nop
    49fc:	370c      	adds	r7, #12
    49fe:	46bd      	mov	sp, r7
    4a00:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a04:	4770      	bx	lr

00004a06 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4a06:	b480      	push	{r7}
    4a08:	b083      	sub	sp, #12
    4a0a:	af00      	add	r7, sp, #0
    4a0c:	6078      	str	r0, [r7, #4]
    4a0e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	683a      	ldr	r2, [r7, #0]
    4a14:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a16:	bf00      	nop
    4a18:	370c      	adds	r7, #12
    4a1a:	46bd      	mov	sp, r7
    4a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a20:	4770      	bx	lr

00004a22 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4a22:	b480      	push	{r7}
    4a24:	b083      	sub	sp, #12
    4a26:	af00      	add	r7, sp, #0
    4a28:	6078      	str	r0, [r7, #4]
    4a2a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	683a      	ldr	r2, [r7, #0]
    4a30:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a32:	bf00      	nop
    4a34:	370c      	adds	r7, #12
    4a36:	46bd      	mov	sp, r7
    4a38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a3c:	4770      	bx	lr

00004a3e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4a3e:	b480      	push	{r7}
    4a40:	b085      	sub	sp, #20
    4a42:	af00      	add	r7, sp, #0
    4a44:	60f8      	str	r0, [r7, #12]
    4a46:	460b      	mov	r3, r1
    4a48:	607a      	str	r2, [r7, #4]
    4a4a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4a4c:	7afb      	ldrb	r3, [r7, #11]
    4a4e:	68fa      	ldr	r2, [r7, #12]
    4a50:	3306      	adds	r3, #6
    4a52:	009b      	lsls	r3, r3, #2
    4a54:	4413      	add	r3, r2
    4a56:	687a      	ldr	r2, [r7, #4]
    4a58:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a5a:	bf00      	nop
    4a5c:	3714      	adds	r7, #20
    4a5e:	46bd      	mov	sp, r7
    4a60:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a64:	4770      	bx	lr

00004a66 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4a66:	b480      	push	{r7}
    4a68:	b083      	sub	sp, #12
    4a6a:	af00      	add	r7, sp, #0
    4a6c:	6078      	str	r0, [r7, #4]
    4a6e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4a70:	687b      	ldr	r3, [r7, #4]
    4a72:	683a      	ldr	r2, [r7, #0]
    4a74:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a76:	bf00      	nop
    4a78:	370c      	adds	r7, #12
    4a7a:	46bd      	mov	sp, r7
    4a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a80:	4770      	bx	lr

00004a82 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4a82:	b480      	push	{r7}
    4a84:	b083      	sub	sp, #12
    4a86:	af00      	add	r7, sp, #0
    4a88:	6078      	str	r0, [r7, #4]
    4a8a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4a8c:	687b      	ldr	r3, [r7, #4]
    4a8e:	683a      	ldr	r2, [r7, #0]
    4a90:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a92:	bf00      	nop
    4a94:	370c      	adds	r7, #12
    4a96:	46bd      	mov	sp, r7
    4a98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a9c:	4770      	bx	lr
	...

00004aa0 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4aa0:	b580      	push	{r7, lr}
    4aa2:	b082      	sub	sp, #8
    4aa4:	af00      	add	r7, sp, #0
    4aa6:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4aa8:	2101      	movs	r1, #1
    4aaa:	484f      	ldr	r0, [pc, #316]	; (4be8 <_ext_irq_init+0x148>)
    4aac:	4b4f      	ldr	r3, [pc, #316]	; (4bec <_ext_irq_init+0x14c>)
    4aae:	4798      	blx	r3
    4ab0:	4603      	mov	r3, r0
    4ab2:	f083 0301 	eor.w	r3, r3, #1
    4ab6:	b2db      	uxtb	r3, r3
    4ab8:	2b00      	cmp	r3, #0
    4aba:	d011      	beq.n	4ae0 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4abc:	2102      	movs	r1, #2
    4abe:	484a      	ldr	r0, [pc, #296]	; (4be8 <_ext_irq_init+0x148>)
    4ac0:	4b4b      	ldr	r3, [pc, #300]	; (4bf0 <_ext_irq_init+0x150>)
    4ac2:	4798      	blx	r3
    4ac4:	4603      	mov	r3, r0
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d006      	beq.n	4ad8 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4aca:	4847      	ldr	r0, [pc, #284]	; (4be8 <_ext_irq_init+0x148>)
    4acc:	4b49      	ldr	r3, [pc, #292]	; (4bf4 <_ext_irq_init+0x154>)
    4ace:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4ad0:	2102      	movs	r1, #2
    4ad2:	4845      	ldr	r0, [pc, #276]	; (4be8 <_ext_irq_init+0x148>)
    4ad4:	4b48      	ldr	r3, [pc, #288]	; (4bf8 <_ext_irq_init+0x158>)
    4ad6:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4ad8:	2101      	movs	r1, #1
    4ada:	4843      	ldr	r0, [pc, #268]	; (4be8 <_ext_irq_init+0x148>)
    4adc:	4b47      	ldr	r3, [pc, #284]	; (4bfc <_ext_irq_init+0x15c>)
    4ade:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4ae0:	2101      	movs	r1, #1
    4ae2:	4841      	ldr	r0, [pc, #260]	; (4be8 <_ext_irq_init+0x148>)
    4ae4:	4b44      	ldr	r3, [pc, #272]	; (4bf8 <_ext_irq_init+0x158>)
    4ae6:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4ae8:	2100      	movs	r1, #0
    4aea:	483f      	ldr	r0, [pc, #252]	; (4be8 <_ext_irq_init+0x148>)
    4aec:	4b44      	ldr	r3, [pc, #272]	; (4c00 <_ext_irq_init+0x160>)
    4aee:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4af0:	2100      	movs	r1, #0
    4af2:	483d      	ldr	r0, [pc, #244]	; (4be8 <_ext_irq_init+0x148>)
    4af4:	4b43      	ldr	r3, [pc, #268]	; (4c04 <_ext_irq_init+0x164>)
    4af6:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4af8:	2100      	movs	r1, #0
    4afa:	483b      	ldr	r0, [pc, #236]	; (4be8 <_ext_irq_init+0x148>)
    4afc:	4b42      	ldr	r3, [pc, #264]	; (4c08 <_ext_irq_init+0x168>)
    4afe:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4b00:	f240 31bb 	movw	r1, #955	; 0x3bb
    4b04:	4838      	ldr	r0, [pc, #224]	; (4be8 <_ext_irq_init+0x148>)
    4b06:	4b41      	ldr	r3, [pc, #260]	; (4c0c <_ext_irq_init+0x16c>)
    4b08:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4b0a:	f240 313b 	movw	r1, #827	; 0x33b
    4b0e:	4836      	ldr	r0, [pc, #216]	; (4be8 <_ext_irq_init+0x148>)
    4b10:	4b3f      	ldr	r3, [pc, #252]	; (4c10 <_ext_irq_init+0x170>)
    4b12:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4b14:	2100      	movs	r1, #0
    4b16:	4834      	ldr	r0, [pc, #208]	; (4be8 <_ext_irq_init+0x148>)
    4b18:	4b3e      	ldr	r3, [pc, #248]	; (4c14 <_ext_irq_init+0x174>)
    4b1a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4b1c:	4a3e      	ldr	r2, [pc, #248]	; (4c18 <_ext_irq_init+0x178>)
    4b1e:	2100      	movs	r1, #0
    4b20:	4831      	ldr	r0, [pc, #196]	; (4be8 <_ext_irq_init+0x148>)
    4b22:	4b3e      	ldr	r3, [pc, #248]	; (4c1c <_ext_irq_init+0x17c>)
    4b24:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4b26:	2211      	movs	r2, #17
    4b28:	2101      	movs	r1, #1
    4b2a:	482f      	ldr	r0, [pc, #188]	; (4be8 <_ext_irq_init+0x148>)
    4b2c:	4b3b      	ldr	r3, [pc, #236]	; (4c1c <_ext_irq_init+0x17c>)
    4b2e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4b30:	482d      	ldr	r0, [pc, #180]	; (4be8 <_ext_irq_init+0x148>)
    4b32:	4b3b      	ldr	r3, [pc, #236]	; (4c20 <_ext_irq_init+0x180>)
    4b34:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4b36:	200c      	movs	r0, #12
    4b38:	4b3a      	ldr	r3, [pc, #232]	; (4c24 <_ext_irq_init+0x184>)
    4b3a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4b3c:	200c      	movs	r0, #12
    4b3e:	4b3a      	ldr	r3, [pc, #232]	; (4c28 <_ext_irq_init+0x188>)
    4b40:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4b42:	200c      	movs	r0, #12
    4b44:	4b39      	ldr	r3, [pc, #228]	; (4c2c <_ext_irq_init+0x18c>)
    4b46:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4b48:	200d      	movs	r0, #13
    4b4a:	4b36      	ldr	r3, [pc, #216]	; (4c24 <_ext_irq_init+0x184>)
    4b4c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4b4e:	200d      	movs	r0, #13
    4b50:	4b35      	ldr	r3, [pc, #212]	; (4c28 <_ext_irq_init+0x188>)
    4b52:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    4b54:	200d      	movs	r0, #13
    4b56:	4b35      	ldr	r3, [pc, #212]	; (4c2c <_ext_irq_init+0x18c>)
    4b58:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4b5a:	200f      	movs	r0, #15
    4b5c:	4b31      	ldr	r3, [pc, #196]	; (4c24 <_ext_irq_init+0x184>)
    4b5e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4b60:	200f      	movs	r0, #15
    4b62:	4b31      	ldr	r3, [pc, #196]	; (4c28 <_ext_irq_init+0x188>)
    4b64:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4b66:	200f      	movs	r0, #15
    4b68:	4b30      	ldr	r3, [pc, #192]	; (4c2c <_ext_irq_init+0x18c>)
    4b6a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4b6c:	2010      	movs	r0, #16
    4b6e:	4b2d      	ldr	r3, [pc, #180]	; (4c24 <_ext_irq_init+0x184>)
    4b70:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4b72:	2010      	movs	r0, #16
    4b74:	4b2c      	ldr	r3, [pc, #176]	; (4c28 <_ext_irq_init+0x188>)
    4b76:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4b78:	2010      	movs	r0, #16
    4b7a:	4b2c      	ldr	r3, [pc, #176]	; (4c2c <_ext_irq_init+0x18c>)
    4b7c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4b7e:	2011      	movs	r0, #17
    4b80:	4b28      	ldr	r3, [pc, #160]	; (4c24 <_ext_irq_init+0x184>)
    4b82:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4b84:	2011      	movs	r0, #17
    4b86:	4b28      	ldr	r3, [pc, #160]	; (4c28 <_ext_irq_init+0x188>)
    4b88:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4b8a:	2011      	movs	r0, #17
    4b8c:	4b27      	ldr	r3, [pc, #156]	; (4c2c <_ext_irq_init+0x18c>)
    4b8e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4b90:	2012      	movs	r0, #18
    4b92:	4b24      	ldr	r3, [pc, #144]	; (4c24 <_ext_irq_init+0x184>)
    4b94:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4b96:	2012      	movs	r0, #18
    4b98:	4b23      	ldr	r3, [pc, #140]	; (4c28 <_ext_irq_init+0x188>)
    4b9a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4b9c:	2012      	movs	r0, #18
    4b9e:	4b23      	ldr	r3, [pc, #140]	; (4c2c <_ext_irq_init+0x18c>)
    4ba0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4ba2:	2013      	movs	r0, #19
    4ba4:	4b1f      	ldr	r3, [pc, #124]	; (4c24 <_ext_irq_init+0x184>)
    4ba6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4ba8:	2013      	movs	r0, #19
    4baa:	4b1f      	ldr	r3, [pc, #124]	; (4c28 <_ext_irq_init+0x188>)
    4bac:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4bae:	2013      	movs	r0, #19
    4bb0:	4b1e      	ldr	r3, [pc, #120]	; (4c2c <_ext_irq_init+0x18c>)
    4bb2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4bb4:	2014      	movs	r0, #20
    4bb6:	4b1b      	ldr	r3, [pc, #108]	; (4c24 <_ext_irq_init+0x184>)
    4bb8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4bba:	2014      	movs	r0, #20
    4bbc:	4b1a      	ldr	r3, [pc, #104]	; (4c28 <_ext_irq_init+0x188>)
    4bbe:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4bc0:	2014      	movs	r0, #20
    4bc2:	4b1a      	ldr	r3, [pc, #104]	; (4c2c <_ext_irq_init+0x18c>)
    4bc4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4bc6:	2015      	movs	r0, #21
    4bc8:	4b16      	ldr	r3, [pc, #88]	; (4c24 <_ext_irq_init+0x184>)
    4bca:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4bcc:	2015      	movs	r0, #21
    4bce:	4b16      	ldr	r3, [pc, #88]	; (4c28 <_ext_irq_init+0x188>)
    4bd0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4bd2:	2015      	movs	r0, #21
    4bd4:	4b15      	ldr	r3, [pc, #84]	; (4c2c <_ext_irq_init+0x18c>)
    4bd6:	4798      	blx	r3

	callback = cb;
    4bd8:	4a15      	ldr	r2, [pc, #84]	; (4c30 <_ext_irq_init+0x190>)
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4bde:	2300      	movs	r3, #0
}
    4be0:	4618      	mov	r0, r3
    4be2:	3708      	adds	r7, #8
    4be4:	46bd      	mov	sp, r7
    4be6:	bd80      	pop	{r7, pc}
    4be8:	40002800 	.word	0x40002800
    4bec:	00004861 	.word	0x00004861
    4bf0:	00004991 	.word	0x00004991
    4bf4:	00004921 	.word	0x00004921
    4bf8:	0000483d 	.word	0x0000483d
    4bfc:	000049c1 	.word	0x000049c1
    4c00:	0000494d 	.word	0x0000494d
    4c04:	000049e9 	.word	0x000049e9
    4c08:	00004a07 	.word	0x00004a07
    4c0c:	00004a23 	.word	0x00004a23
    4c10:	00004a67 	.word	0x00004a67
    4c14:	00004a83 	.word	0x00004a83
    4c18:	90999013 	.word	0x90999013
    4c1c:	00004a3f 	.word	0x00004a3f
    4c20:	000048f5 	.word	0x000048f5
    4c24:	000047bd 	.word	0x000047bd
    4c28:	00004801 	.word	0x00004801
    4c2c:	00004781 	.word	0x00004781
    4c30:	200021ac 	.word	0x200021ac

00004c34 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4c34:	b580      	push	{r7, lr}
    4c36:	b084      	sub	sp, #16
    4c38:	af00      	add	r7, sp, #0
    4c3a:	6078      	str	r0, [r7, #4]
    4c3c:	460b      	mov	r3, r1
    4c3e:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4c40:	23ff      	movs	r3, #255	; 0xff
    4c42:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4c44:	2300      	movs	r3, #0
    4c46:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4c48:	e010      	b.n	4c6c <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4c4a:	7bbb      	ldrb	r3, [r7, #14]
    4c4c:	4a1c      	ldr	r2, [pc, #112]	; (4cc0 <_ext_irq_enable+0x8c>)
    4c4e:	00db      	lsls	r3, r3, #3
    4c50:	4413      	add	r3, r2
    4c52:	685a      	ldr	r2, [r3, #4]
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	429a      	cmp	r2, r3
    4c58:	d105      	bne.n	4c66 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4c5a:	7bbb      	ldrb	r3, [r7, #14]
    4c5c:	4a18      	ldr	r2, [pc, #96]	; (4cc0 <_ext_irq_enable+0x8c>)
    4c5e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4c62:	73fb      	strb	r3, [r7, #15]
			break;
    4c64:	e005      	b.n	4c72 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4c66:	7bbb      	ldrb	r3, [r7, #14]
    4c68:	3301      	adds	r3, #1
    4c6a:	73bb      	strb	r3, [r7, #14]
    4c6c:	7bbb      	ldrb	r3, [r7, #14]
    4c6e:	2b08      	cmp	r3, #8
    4c70:	d9eb      	bls.n	4c4a <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4c72:	7bfb      	ldrb	r3, [r7, #15]
    4c74:	2bff      	cmp	r3, #255	; 0xff
    4c76:	d102      	bne.n	4c7e <_ext_irq_enable+0x4a>
		return -1;
    4c78:	f04f 33ff 	mov.w	r3, #4294967295
    4c7c:	e01c      	b.n	4cb8 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4c7e:	78fb      	ldrb	r3, [r7, #3]
    4c80:	2b00      	cmp	r3, #0
    4c82:	d008      	beq.n	4c96 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4c84:	7bfb      	ldrb	r3, [r7, #15]
    4c86:	2201      	movs	r2, #1
    4c88:	fa02 f303 	lsl.w	r3, r2, r3
    4c8c:	4619      	mov	r1, r3
    4c8e:	480d      	ldr	r0, [pc, #52]	; (4cc4 <_ext_irq_enable+0x90>)
    4c90:	4b0d      	ldr	r3, [pc, #52]	; (4cc8 <_ext_irq_enable+0x94>)
    4c92:	4798      	blx	r3
    4c94:	e00f      	b.n	4cb6 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4c96:	7bfb      	ldrb	r3, [r7, #15]
    4c98:	2201      	movs	r2, #1
    4c9a:	fa02 f303 	lsl.w	r3, r2, r3
    4c9e:	4619      	mov	r1, r3
    4ca0:	4808      	ldr	r0, [pc, #32]	; (4cc4 <_ext_irq_enable+0x90>)
    4ca2:	4b0a      	ldr	r3, [pc, #40]	; (4ccc <_ext_irq_enable+0x98>)
    4ca4:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4ca6:	7bfb      	ldrb	r3, [r7, #15]
    4ca8:	2201      	movs	r2, #1
    4caa:	fa02 f303 	lsl.w	r3, r2, r3
    4cae:	4619      	mov	r1, r3
    4cb0:	4804      	ldr	r0, [pc, #16]	; (4cc4 <_ext_irq_enable+0x90>)
    4cb2:	4b07      	ldr	r3, [pc, #28]	; (4cd0 <_ext_irq_enable+0x9c>)
    4cb4:	4798      	blx	r3
	}

	return ERR_NONE;
    4cb6:	2300      	movs	r3, #0
}
    4cb8:	4618      	mov	r0, r3
    4cba:	3710      	adds	r7, #16
    4cbc:	46bd      	mov	sp, r7
    4cbe:	bd80      	pop	{r7, pc}
    4cc0:	0001086c 	.word	0x0001086c
    4cc4:	40002800 	.word	0x40002800
    4cc8:	000048bd 	.word	0x000048bd
    4ccc:	000048d9 	.word	0x000048d9
    4cd0:	000048a1 	.word	0x000048a1

00004cd4 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b084      	sub	sp, #16
    4cd8:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4cda:	4841      	ldr	r0, [pc, #260]	; (4de0 <_ext_irq_handler+0x10c>)
    4cdc:	4b41      	ldr	r3, [pc, #260]	; (4de4 <_ext_irq_handler+0x110>)
    4cde:	4798      	blx	r3
    4ce0:	4603      	mov	r3, r0
    4ce2:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4ce4:	f04f 33ff 	mov.w	r3, #4294967295
    4ce8:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4cea:	683b      	ldr	r3, [r7, #0]
    4cec:	4619      	mov	r1, r3
    4cee:	483c      	ldr	r0, [pc, #240]	; (4de0 <_ext_irq_handler+0x10c>)
    4cf0:	4b3d      	ldr	r3, [pc, #244]	; (4de8 <_ext_irq_handler+0x114>)
    4cf2:	4798      	blx	r3

	ASSERT(callback);
    4cf4:	4b3d      	ldr	r3, [pc, #244]	; (4dec <_ext_irq_handler+0x118>)
    4cf6:	681b      	ldr	r3, [r3, #0]
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	bf14      	ite	ne
    4cfc:	2301      	movne	r3, #1
    4cfe:	2300      	moveq	r3, #0
    4d00:	b2db      	uxtb	r3, r3
    4d02:	f44f 7284 	mov.w	r2, #264	; 0x108
    4d06:	493a      	ldr	r1, [pc, #232]	; (4df0 <_ext_irq_handler+0x11c>)
    4d08:	4618      	mov	r0, r3
    4d0a:	4b3a      	ldr	r3, [pc, #232]	; (4df4 <_ext_irq_handler+0x120>)
    4d0c:	4798      	blx	r3

	while (flags) {
    4d0e:	e060      	b.n	4dd2 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4d10:	683b      	ldr	r3, [r7, #0]
    4d12:	4618      	mov	r0, r3
    4d14:	4b38      	ldr	r3, [pc, #224]	; (4df8 <_ext_irq_handler+0x124>)
    4d16:	4798      	blx	r3
    4d18:	4603      	mov	r3, r0
    4d1a:	b2db      	uxtb	r3, r3
    4d1c:	3b01      	subs	r3, #1
    4d1e:	b2db      	uxtb	r3, r3
    4d20:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4d22:	e047      	b.n	4db4 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4d24:	2300      	movs	r3, #0
    4d26:	71fb      	strb	r3, [r7, #7]
    4d28:	2309      	movs	r3, #9
    4d2a:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4d2c:	e024      	b.n	4d78 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4d2e:	79ba      	ldrb	r2, [r7, #6]
    4d30:	79fb      	ldrb	r3, [r7, #7]
    4d32:	4413      	add	r3, r2
    4d34:	105b      	asrs	r3, r3, #1
    4d36:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4d38:	797b      	ldrb	r3, [r7, #5]
    4d3a:	4a30      	ldr	r2, [pc, #192]	; (4dfc <_ext_irq_handler+0x128>)
    4d3c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4d40:	461a      	mov	r2, r3
    4d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4d46:	429a      	cmp	r2, r3
    4d48:	d106      	bne.n	4d58 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4d4a:	797b      	ldrb	r3, [r7, #5]
    4d4c:	4a2b      	ldr	r2, [pc, #172]	; (4dfc <_ext_irq_handler+0x128>)
    4d4e:	00db      	lsls	r3, r3, #3
    4d50:	4413      	add	r3, r2
    4d52:	685b      	ldr	r3, [r3, #4]
    4d54:	60bb      	str	r3, [r7, #8]
					break;
    4d56:	e013      	b.n	4d80 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4d58:	797b      	ldrb	r3, [r7, #5]
    4d5a:	4a28      	ldr	r2, [pc, #160]	; (4dfc <_ext_irq_handler+0x128>)
    4d5c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4d60:	461a      	mov	r2, r3
    4d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4d66:	429a      	cmp	r2, r3
    4d68:	da03      	bge.n	4d72 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4d6a:	797b      	ldrb	r3, [r7, #5]
    4d6c:	3301      	adds	r3, #1
    4d6e:	71fb      	strb	r3, [r7, #7]
    4d70:	e002      	b.n	4d78 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4d72:	797b      	ldrb	r3, [r7, #5]
    4d74:	3b01      	subs	r3, #1
    4d76:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4d78:	79ba      	ldrb	r2, [r7, #6]
    4d7a:	79fb      	ldrb	r3, [r7, #7]
    4d7c:	429a      	cmp	r2, r3
    4d7e:	d2d6      	bcs.n	4d2e <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4d80:	68bb      	ldr	r3, [r7, #8]
    4d82:	f1b3 3fff 	cmp.w	r3, #4294967295
    4d86:	d003      	beq.n	4d90 <_ext_irq_handler+0xbc>
				callback(pin);
    4d88:	4b18      	ldr	r3, [pc, #96]	; (4dec <_ext_irq_handler+0x118>)
    4d8a:	681b      	ldr	r3, [r3, #0]
    4d8c:	68b8      	ldr	r0, [r7, #8]
    4d8e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4d94:	2201      	movs	r2, #1
    4d96:	fa02 f303 	lsl.w	r3, r2, r3
    4d9a:	43da      	mvns	r2, r3
    4d9c:	683b      	ldr	r3, [r7, #0]
    4d9e:	4013      	ands	r3, r2
    4da0:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4da2:	683b      	ldr	r3, [r7, #0]
    4da4:	4618      	mov	r0, r3
    4da6:	4b14      	ldr	r3, [pc, #80]	; (4df8 <_ext_irq_handler+0x124>)
    4da8:	4798      	blx	r3
    4daa:	4603      	mov	r3, r0
    4dac:	b2db      	uxtb	r3, r3
    4dae:	3b01      	subs	r3, #1
    4db0:	b2db      	uxtb	r3, r3
    4db2:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4db8:	f1b3 3fff 	cmp.w	r3, #4294967295
    4dbc:	d1b2      	bne.n	4d24 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4dbe:	4808      	ldr	r0, [pc, #32]	; (4de0 <_ext_irq_handler+0x10c>)
    4dc0:	4b08      	ldr	r3, [pc, #32]	; (4de4 <_ext_irq_handler+0x110>)
    4dc2:	4798      	blx	r3
    4dc4:	4603      	mov	r3, r0
    4dc6:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4dc8:	683b      	ldr	r3, [r7, #0]
    4dca:	4619      	mov	r1, r3
    4dcc:	4804      	ldr	r0, [pc, #16]	; (4de0 <_ext_irq_handler+0x10c>)
    4dce:	4b06      	ldr	r3, [pc, #24]	; (4de8 <_ext_irq_handler+0x114>)
    4dd0:	4798      	blx	r3
	while (flags) {
    4dd2:	683b      	ldr	r3, [r7, #0]
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d19b      	bne.n	4d10 <_ext_irq_handler+0x3c>
	}
}
    4dd8:	bf00      	nop
    4dda:	3710      	adds	r7, #16
    4ddc:	46bd      	mov	sp, r7
    4dde:	bd80      	pop	{r7, pc}
    4de0:	40002800 	.word	0x40002800
    4de4:	00004889 	.word	0x00004889
    4de8:	000048a1 	.word	0x000048a1
    4dec:	200021ac 	.word	0x200021ac
    4df0:	000108b4 	.word	0x000108b4
    4df4:	00003b01 	.word	0x00003b01
    4df8:	000102a1 	.word	0x000102a1
    4dfc:	0001086c 	.word	0x0001086c

00004e00 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4e00:	b580      	push	{r7, lr}
    4e02:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e04:	4b01      	ldr	r3, [pc, #4]	; (4e0c <EIC_0_Handler+0xc>)
    4e06:	4798      	blx	r3
} /**
    4e08:	bf00      	nop
    4e0a:	bd80      	pop	{r7, pc}
    4e0c:	00004cd5 	.word	0x00004cd5

00004e10 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4e10:	b580      	push	{r7, lr}
    4e12:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e14:	4b01      	ldr	r3, [pc, #4]	; (4e1c <EIC_1_Handler+0xc>)
    4e16:	4798      	blx	r3
} /**
    4e18:	bf00      	nop
    4e1a:	bd80      	pop	{r7, pc}
    4e1c:	00004cd5 	.word	0x00004cd5

00004e20 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4e20:	b580      	push	{r7, lr}
    4e22:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e24:	4b01      	ldr	r3, [pc, #4]	; (4e2c <EIC_3_Handler+0xc>)
    4e26:	4798      	blx	r3
} /**
    4e28:	bf00      	nop
    4e2a:	bd80      	pop	{r7, pc}
    4e2c:	00004cd5 	.word	0x00004cd5

00004e30 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4e30:	b580      	push	{r7, lr}
    4e32:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e34:	4b01      	ldr	r3, [pc, #4]	; (4e3c <EIC_4_Handler+0xc>)
    4e36:	4798      	blx	r3
} /**
    4e38:	bf00      	nop
    4e3a:	bd80      	pop	{r7, pc}
    4e3c:	00004cd5 	.word	0x00004cd5

00004e40 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4e40:	b580      	push	{r7, lr}
    4e42:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e44:	4b01      	ldr	r3, [pc, #4]	; (4e4c <EIC_5_Handler+0xc>)
    4e46:	4798      	blx	r3
} /**
    4e48:	bf00      	nop
    4e4a:	bd80      	pop	{r7, pc}
    4e4c:	00004cd5 	.word	0x00004cd5

00004e50 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4e50:	b580      	push	{r7, lr}
    4e52:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e54:	4b01      	ldr	r3, [pc, #4]	; (4e5c <EIC_6_Handler+0xc>)
    4e56:	4798      	blx	r3
} /**
    4e58:	bf00      	nop
    4e5a:	bd80      	pop	{r7, pc}
    4e5c:	00004cd5 	.word	0x00004cd5

00004e60 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4e60:	b580      	push	{r7, lr}
    4e62:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e64:	4b01      	ldr	r3, [pc, #4]	; (4e6c <EIC_7_Handler+0xc>)
    4e66:	4798      	blx	r3
} /**
    4e68:	bf00      	nop
    4e6a:	bd80      	pop	{r7, pc}
    4e6c:	00004cd5 	.word	0x00004cd5

00004e70 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4e70:	b580      	push	{r7, lr}
    4e72:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e74:	4b01      	ldr	r3, [pc, #4]	; (4e7c <EIC_8_Handler+0xc>)
    4e76:	4798      	blx	r3
} /**
    4e78:	bf00      	nop
    4e7a:	bd80      	pop	{r7, pc}
    4e7c:	00004cd5 	.word	0x00004cd5

00004e80 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4e80:	b580      	push	{r7, lr}
    4e82:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e84:	4b01      	ldr	r3, [pc, #4]	; (4e8c <EIC_9_Handler+0xc>)
    4e86:	4798      	blx	r3
}
    4e88:	bf00      	nop
    4e8a:	bd80      	pop	{r7, pc}
    4e8c:	00004cd5 	.word	0x00004cd5

00004e90 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4e90:	b480      	push	{r7}
    4e92:	b085      	sub	sp, #20
    4e94:	af00      	add	r7, sp, #0
    4e96:	60f8      	str	r0, [r7, #12]
    4e98:	460b      	mov	r3, r1
    4e9a:	607a      	str	r2, [r7, #4]
    4e9c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4e9e:	7afa      	ldrb	r2, [r7, #11]
    4ea0:	68fb      	ldr	r3, [r7, #12]
    4ea2:	3248      	adds	r2, #72	; 0x48
    4ea4:	6879      	ldr	r1, [r7, #4]
    4ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4eaa:	bf00      	nop
    4eac:	3714      	adds	r7, #20
    4eae:	46bd      	mov	sp, r7
    4eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eb4:	4770      	bx	lr

00004eb6 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4eb6:	b480      	push	{r7}
    4eb8:	b083      	sub	sp, #12
    4eba:	af00      	add	r7, sp, #0
    4ebc:	6078      	str	r0, [r7, #4]
    4ebe:	460b      	mov	r3, r1
    4ec0:	70fb      	strb	r3, [r7, #3]
    4ec2:	4613      	mov	r3, r2
    4ec4:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4ec6:	78fb      	ldrb	r3, [r7, #3]
    4ec8:	687a      	ldr	r2, [r7, #4]
    4eca:	3304      	adds	r3, #4
    4ecc:	00db      	lsls	r3, r3, #3
    4ece:	4413      	add	r3, r2
    4ed0:	78ba      	ldrb	r2, [r7, #2]
    4ed2:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4ed4:	78fb      	ldrb	r3, [r7, #3]
    4ed6:	78ba      	ldrb	r2, [r7, #2]
    4ed8:	43d2      	mvns	r2, r2
    4eda:	b2d1      	uxtb	r1, r2
    4edc:	687a      	ldr	r2, [r7, #4]
    4ede:	3304      	adds	r3, #4
    4ee0:	00db      	lsls	r3, r3, #3
    4ee2:	4413      	add	r3, r2
    4ee4:	460a      	mov	r2, r1
    4ee6:	711a      	strb	r2, [r3, #4]
}
    4ee8:	bf00      	nop
    4eea:	370c      	adds	r7, #12
    4eec:	46bd      	mov	sp, r7
    4eee:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ef2:	4770      	bx	lr

00004ef4 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4ef4:	b480      	push	{r7}
    4ef6:	b085      	sub	sp, #20
    4ef8:	af00      	add	r7, sp, #0
    4efa:	60f8      	str	r0, [r7, #12]
    4efc:	460b      	mov	r3, r1
    4efe:	607a      	str	r2, [r7, #4]
    4f00:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4f02:	7afa      	ldrb	r2, [r7, #11]
    4f04:	68fb      	ldr	r3, [r7, #12]
    4f06:	3204      	adds	r2, #4
    4f08:	6879      	ldr	r1, [r7, #4]
    4f0a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4f0e:	bf00      	nop
    4f10:	3714      	adds	r7, #20
    4f12:	46bd      	mov	sp, r7
    4f14:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f18:	4770      	bx	lr
	...

00004f1c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4f1c:	b580      	push	{r7, lr}
    4f1e:	b082      	sub	sp, #8
    4f20:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4f22:	2300      	movs	r3, #0
    4f24:	71fb      	strb	r3, [r7, #7]
    4f26:	e00b      	b.n	4f40 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4f28:	79fb      	ldrb	r3, [r7, #7]
    4f2a:	4a18      	ldr	r2, [pc, #96]	; (4f8c <_event_system_init+0x70>)
    4f2c:	5cd3      	ldrb	r3, [r2, r3]
    4f2e:	461a      	mov	r2, r3
    4f30:	79fb      	ldrb	r3, [r7, #7]
    4f32:	4619      	mov	r1, r3
    4f34:	4816      	ldr	r0, [pc, #88]	; (4f90 <_event_system_init+0x74>)
    4f36:	4b17      	ldr	r3, [pc, #92]	; (4f94 <_event_system_init+0x78>)
    4f38:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4f3a:	79fb      	ldrb	r3, [r7, #7]
    4f3c:	3301      	adds	r3, #1
    4f3e:	71fb      	strb	r3, [r7, #7]
    4f40:	79fb      	ldrb	r3, [r7, #7]
    4f42:	2b42      	cmp	r3, #66	; 0x42
    4f44:	d9f0      	bls.n	4f28 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4f46:	2300      	movs	r3, #0
    4f48:	71fb      	strb	r3, [r7, #7]
    4f4a:	e016      	b.n	4f7a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4f4c:	79fb      	ldrb	r3, [r7, #7]
    4f4e:	4a12      	ldr	r2, [pc, #72]	; (4f98 <_event_system_init+0x7c>)
    4f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4f54:	461a      	mov	r2, r3
    4f56:	79fb      	ldrb	r3, [r7, #7]
    4f58:	4619      	mov	r1, r3
    4f5a:	480d      	ldr	r0, [pc, #52]	; (4f90 <_event_system_init+0x74>)
    4f5c:	4b0f      	ldr	r3, [pc, #60]	; (4f9c <_event_system_init+0x80>)
    4f5e:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4f60:	79fb      	ldrb	r3, [r7, #7]
    4f62:	4a0f      	ldr	r2, [pc, #60]	; (4fa0 <_event_system_init+0x84>)
    4f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4f68:	b2da      	uxtb	r2, r3
    4f6a:	79fb      	ldrb	r3, [r7, #7]
    4f6c:	4619      	mov	r1, r3
    4f6e:	4808      	ldr	r0, [pc, #32]	; (4f90 <_event_system_init+0x74>)
    4f70:	4b0c      	ldr	r3, [pc, #48]	; (4fa4 <_event_system_init+0x88>)
    4f72:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4f74:	79fb      	ldrb	r3, [r7, #7]
    4f76:	3301      	adds	r3, #1
    4f78:	71fb      	strb	r3, [r7, #7]
    4f7a:	79fb      	ldrb	r3, [r7, #7]
    4f7c:	2b1f      	cmp	r3, #31
    4f7e:	d9e5      	bls.n	4f4c <_event_system_init+0x30>
	}

	return ERR_NONE;
    4f80:	2300      	movs	r3, #0
}
    4f82:	4618      	mov	r0, r3
    4f84:	3708      	adds	r7, #8
    4f86:	46bd      	mov	sp, r7
    4f88:	bd80      	pop	{r7, pc}
    4f8a:	bf00      	nop
    4f8c:	000108cc 	.word	0x000108cc
    4f90:	4100e000 	.word	0x4100e000
    4f94:	00004e91 	.word	0x00004e91
    4f98:	00010910 	.word	0x00010910
    4f9c:	00004ef5 	.word	0x00004ef5
    4fa0:	00010950 	.word	0x00010950
    4fa4:	00004eb7 	.word	0x00004eb7

00004fa8 <hri_gclk_wait_for_sync>:
{
    4fa8:	b480      	push	{r7}
    4faa:	b083      	sub	sp, #12
    4fac:	af00      	add	r7, sp, #0
    4fae:	6078      	str	r0, [r7, #4]
    4fb0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4fb2:	bf00      	nop
    4fb4:	687b      	ldr	r3, [r7, #4]
    4fb6:	685a      	ldr	r2, [r3, #4]
    4fb8:	683b      	ldr	r3, [r7, #0]
    4fba:	4013      	ands	r3, r2
    4fbc:	2b00      	cmp	r3, #0
    4fbe:	d1f9      	bne.n	4fb4 <hri_gclk_wait_for_sync+0xc>
}
    4fc0:	bf00      	nop
    4fc2:	370c      	adds	r7, #12
    4fc4:	46bd      	mov	sp, r7
    4fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fca:	4770      	bx	lr

00004fcc <hri_gclk_write_GENCTRL_reg>:
{
    4fcc:	b580      	push	{r7, lr}
    4fce:	b084      	sub	sp, #16
    4fd0:	af00      	add	r7, sp, #0
    4fd2:	60f8      	str	r0, [r7, #12]
    4fd4:	460b      	mov	r3, r1
    4fd6:	607a      	str	r2, [r7, #4]
    4fd8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4fda:	7afa      	ldrb	r2, [r7, #11]
    4fdc:	68fb      	ldr	r3, [r7, #12]
    4fde:	3208      	adds	r2, #8
    4fe0:	6879      	ldr	r1, [r7, #4]
    4fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4fe6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4fea:	68f8      	ldr	r0, [r7, #12]
    4fec:	4b02      	ldr	r3, [pc, #8]	; (4ff8 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4fee:	4798      	blx	r3
}
    4ff0:	bf00      	nop
    4ff2:	3710      	adds	r7, #16
    4ff4:	46bd      	mov	sp, r7
    4ff6:	bd80      	pop	{r7, pc}
    4ff8:	00004fa9 	.word	0x00004fa9

00004ffc <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4ffc:	b580      	push	{r7, lr}
    4ffe:	b082      	sub	sp, #8
    5000:	af00      	add	r7, sp, #0
    5002:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    5004:	687b      	ldr	r3, [r7, #4]
    5006:	f003 0301 	and.w	r3, r3, #1
    500a:	2b00      	cmp	r3, #0
    500c:	d004      	beq.n	5018 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    500e:	4a3b      	ldr	r2, [pc, #236]	; (50fc <_gclk_init_generators_by_fref+0x100>)
    5010:	2100      	movs	r1, #0
    5012:	483b      	ldr	r0, [pc, #236]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    5014:	4b3b      	ldr	r3, [pc, #236]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    5016:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5018:	687b      	ldr	r3, [r7, #4]
    501a:	f003 0302 	and.w	r3, r3, #2
    501e:	2b00      	cmp	r3, #0
    5020:	d004      	beq.n	502c <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    5022:	4a39      	ldr	r2, [pc, #228]	; (5108 <_gclk_init_generators_by_fref+0x10c>)
    5024:	2101      	movs	r1, #1
    5026:	4836      	ldr	r0, [pc, #216]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    5028:	4b36      	ldr	r3, [pc, #216]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    502a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	f003 0304 	and.w	r3, r3, #4
    5032:	2b00      	cmp	r3, #0
    5034:	d004      	beq.n	5040 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    5036:	4a35      	ldr	r2, [pc, #212]	; (510c <_gclk_init_generators_by_fref+0x110>)
    5038:	2102      	movs	r1, #2
    503a:	4831      	ldr	r0, [pc, #196]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    503c:	4b31      	ldr	r3, [pc, #196]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    503e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	f003 0308 	and.w	r3, r3, #8
    5046:	2b00      	cmp	r3, #0
    5048:	d004      	beq.n	5054 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    504a:	4a31      	ldr	r2, [pc, #196]	; (5110 <_gclk_init_generators_by_fref+0x114>)
    504c:	2103      	movs	r1, #3
    504e:	482c      	ldr	r0, [pc, #176]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    5050:	4b2c      	ldr	r3, [pc, #176]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    5052:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    5054:	687b      	ldr	r3, [r7, #4]
    5056:	f003 0310 	and.w	r3, r3, #16
    505a:	2b00      	cmp	r3, #0
    505c:	d004      	beq.n	5068 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    505e:	4a2d      	ldr	r2, [pc, #180]	; (5114 <_gclk_init_generators_by_fref+0x118>)
    5060:	2104      	movs	r1, #4
    5062:	4827      	ldr	r0, [pc, #156]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    5064:	4b27      	ldr	r3, [pc, #156]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    5066:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	f003 0320 	and.w	r3, r3, #32
    506e:	2b00      	cmp	r3, #0
    5070:	d004      	beq.n	507c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    5072:	4a29      	ldr	r2, [pc, #164]	; (5118 <_gclk_init_generators_by_fref+0x11c>)
    5074:	2105      	movs	r1, #5
    5076:	4822      	ldr	r0, [pc, #136]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    5078:	4b22      	ldr	r3, [pc, #136]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    507a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    507c:	687b      	ldr	r3, [r7, #4]
    507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5082:	2b00      	cmp	r3, #0
    5084:	d004      	beq.n	5090 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    5086:	4a25      	ldr	r2, [pc, #148]	; (511c <_gclk_init_generators_by_fref+0x120>)
    5088:	2106      	movs	r1, #6
    508a:	481d      	ldr	r0, [pc, #116]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    508c:	4b1d      	ldr	r3, [pc, #116]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    508e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5090:	687b      	ldr	r3, [r7, #4]
    5092:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5096:	2b00      	cmp	r3, #0
    5098:	d004      	beq.n	50a4 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    509a:	4a21      	ldr	r2, [pc, #132]	; (5120 <_gclk_init_generators_by_fref+0x124>)
    509c:	2107      	movs	r1, #7
    509e:	4818      	ldr	r0, [pc, #96]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    50a0:	4b18      	ldr	r3, [pc, #96]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    50a2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    50a4:	687b      	ldr	r3, [r7, #4]
    50a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    50aa:	2b00      	cmp	r3, #0
    50ac:	d004      	beq.n	50b8 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    50ae:	4a1d      	ldr	r2, [pc, #116]	; (5124 <_gclk_init_generators_by_fref+0x128>)
    50b0:	2108      	movs	r1, #8
    50b2:	4813      	ldr	r0, [pc, #76]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    50b4:	4b13      	ldr	r3, [pc, #76]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    50b6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    50b8:	687b      	ldr	r3, [r7, #4]
    50ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
    50be:	2b00      	cmp	r3, #0
    50c0:	d004      	beq.n	50cc <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    50c2:	4a19      	ldr	r2, [pc, #100]	; (5128 <_gclk_init_generators_by_fref+0x12c>)
    50c4:	2109      	movs	r1, #9
    50c6:	480e      	ldr	r0, [pc, #56]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    50c8:	4b0e      	ldr	r3, [pc, #56]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    50ca:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    50cc:	687b      	ldr	r3, [r7, #4]
    50ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    50d2:	2b00      	cmp	r3, #0
    50d4:	d004      	beq.n	50e0 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    50d6:	4a15      	ldr	r2, [pc, #84]	; (512c <_gclk_init_generators_by_fref+0x130>)
    50d8:	210a      	movs	r1, #10
    50da:	4809      	ldr	r0, [pc, #36]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    50dc:	4b09      	ldr	r3, [pc, #36]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    50de:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    50e0:	687b      	ldr	r3, [r7, #4]
    50e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    50e6:	2b00      	cmp	r3, #0
    50e8:	d004      	beq.n	50f4 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    50ea:	4a11      	ldr	r2, [pc, #68]	; (5130 <_gclk_init_generators_by_fref+0x134>)
    50ec:	210b      	movs	r1, #11
    50ee:	4804      	ldr	r0, [pc, #16]	; (5100 <_gclk_init_generators_by_fref+0x104>)
    50f0:	4b04      	ldr	r3, [pc, #16]	; (5104 <_gclk_init_generators_by_fref+0x108>)
    50f2:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    50f4:	bf00      	nop
    50f6:	3708      	adds	r7, #8
    50f8:	46bd      	mov	sp, r7
    50fa:	bd80      	pop	{r7, pc}
    50fc:	00010107 	.word	0x00010107
    5100:	40001c00 	.word	0x40001c00
    5104:	00004fcd 	.word	0x00004fcd
    5108:	00010907 	.word	0x00010907
    510c:	00010906 	.word	0x00010906
    5110:	00020908 	.word	0x00020908
    5114:	00010901 	.word	0x00010901
    5118:	00062901 	.word	0x00062901
    511c:	000c2901 	.word	0x000c2901
    5120:	00082908 	.word	0x00082908
    5124:	00032901 	.word	0x00032901
    5128:	00011908 	.word	0x00011908
    512c:	00010905 	.word	0x00010905
    5130:	00041905 	.word	0x00041905

00005134 <hri_mclk_write_CPUDIV_reg>:
{
    5134:	b480      	push	{r7}
    5136:	b083      	sub	sp, #12
    5138:	af00      	add	r7, sp, #0
    513a:	6078      	str	r0, [r7, #4]
    513c:	460b      	mov	r3, r1
    513e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5140:	687b      	ldr	r3, [r7, #4]
    5142:	78fa      	ldrb	r2, [r7, #3]
    5144:	715a      	strb	r2, [r3, #5]
}
    5146:	bf00      	nop
    5148:	370c      	adds	r7, #12
    514a:	46bd      	mov	sp, r7
    514c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5150:	4770      	bx	lr
	...

00005154 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    5154:	b580      	push	{r7, lr}
    5156:	b082      	sub	sp, #8
    5158:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    515a:	4b05      	ldr	r3, [pc, #20]	; (5170 <_mclk_init+0x1c>)
    515c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    515e:	2101      	movs	r1, #1
    5160:	6878      	ldr	r0, [r7, #4]
    5162:	4b04      	ldr	r3, [pc, #16]	; (5174 <_mclk_init+0x20>)
    5164:	4798      	blx	r3
}
    5166:	bf00      	nop
    5168:	3708      	adds	r7, #8
    516a:	46bd      	mov	sp, r7
    516c:	bd80      	pop	{r7, pc}
    516e:	bf00      	nop
    5170:	40000800 	.word	0x40000800
    5174:	00005135 	.word	0x00005135

00005178 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5178:	b480      	push	{r7}
    517a:	b083      	sub	sp, #12
    517c:	af00      	add	r7, sp, #0
    517e:	6078      	str	r0, [r7, #4]
    5180:	460b      	mov	r3, r1
    5182:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5184:	687b      	ldr	r3, [r7, #4]
    5186:	78fa      	ldrb	r2, [r7, #3]
    5188:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    518a:	bf00      	nop
    518c:	370c      	adds	r7, #12
    518e:	46bd      	mov	sp, r7
    5190:	f85d 7b04 	ldr.w	r7, [sp], #4
    5194:	4770      	bx	lr

00005196 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    5196:	b480      	push	{r7}
    5198:	b083      	sub	sp, #12
    519a:	af00      	add	r7, sp, #0
    519c:	6078      	str	r0, [r7, #4]
    519e:	460b      	mov	r3, r1
    51a0:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    51a2:	687b      	ldr	r3, [r7, #4]
    51a4:	887a      	ldrh	r2, [r7, #2]
    51a6:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    51a8:	bf00      	nop
    51aa:	370c      	adds	r7, #12
    51ac:	46bd      	mov	sp, r7
    51ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    51b2:	4770      	bx	lr

000051b4 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    51b4:	b480      	push	{r7}
    51b6:	b083      	sub	sp, #12
    51b8:	af00      	add	r7, sp, #0
    51ba:	6078      	str	r0, [r7, #4]
    51bc:	460b      	mov	r3, r1
    51be:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    51c0:	687b      	ldr	r3, [r7, #4]
    51c2:	78fa      	ldrb	r2, [r7, #3]
    51c4:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    51c6:	bf00      	nop
    51c8:	370c      	adds	r7, #12
    51ca:	46bd      	mov	sp, r7
    51cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    51d0:	4770      	bx	lr

000051d2 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    51d2:	b480      	push	{r7}
    51d4:	b083      	sub	sp, #12
    51d6:	af00      	add	r7, sp, #0
    51d8:	6078      	str	r0, [r7, #4]
    51da:	460b      	mov	r3, r1
    51dc:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    51de:	687b      	ldr	r3, [r7, #4]
    51e0:	78fa      	ldrb	r2, [r7, #3]
    51e2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    51e4:	bf00      	nop
    51e6:	370c      	adds	r7, #12
    51e8:	46bd      	mov	sp, r7
    51ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ee:	4770      	bx	lr

000051f0 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    51f0:	b480      	push	{r7}
    51f2:	b085      	sub	sp, #20
    51f4:	af00      	add	r7, sp, #0
    51f6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    51f8:	687b      	ldr	r3, [r7, #4]
    51fa:	69db      	ldr	r3, [r3, #28]
    51fc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    51fe:	68fb      	ldr	r3, [r7, #12]
    5200:	0a1b      	lsrs	r3, r3, #8
    5202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5206:	60fb      	str	r3, [r7, #12]
	return tmp;
    5208:	68fb      	ldr	r3, [r7, #12]
}
    520a:	4618      	mov	r0, r3
    520c:	3714      	adds	r7, #20
    520e:	46bd      	mov	sp, r7
    5210:	f85d 7b04 	ldr.w	r7, [sp], #4
    5214:	4770      	bx	lr

00005216 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    5216:	b480      	push	{r7}
    5218:	b083      	sub	sp, #12
    521a:	af00      	add	r7, sp, #0
    521c:	6078      	str	r0, [r7, #4]
    521e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5220:	687b      	ldr	r3, [r7, #4]
    5222:	683a      	ldr	r2, [r7, #0]
    5224:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5226:	bf00      	nop
    5228:	370c      	adds	r7, #12
    522a:	46bd      	mov	sp, r7
    522c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5230:	4770      	bx	lr
	...

00005234 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    5234:	b580      	push	{r7, lr}
    5236:	b082      	sub	sp, #8
    5238:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    523a:	4b13      	ldr	r3, [pc, #76]	; (5288 <_osc32kctrl_init_sources+0x54>)
    523c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    523e:	2300      	movs	r3, #0
    5240:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    5242:	f242 018e 	movw	r1, #8334	; 0x208e
    5246:	6878      	ldr	r0, [r7, #4]
    5248:	4b10      	ldr	r3, [pc, #64]	; (528c <_osc32kctrl_init_sources+0x58>)
    524a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    524c:	2100      	movs	r1, #0
    524e:	6878      	ldr	r0, [r7, #4]
    5250:	4b0f      	ldr	r3, [pc, #60]	; (5290 <_osc32kctrl_init_sources+0x5c>)
    5252:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5254:	2100      	movs	r1, #0
    5256:	6878      	ldr	r0, [r7, #4]
    5258:	4b0e      	ldr	r3, [pc, #56]	; (5294 <_osc32kctrl_init_sources+0x60>)
    525a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    525c:	6878      	ldr	r0, [r7, #4]
    525e:	4b0e      	ldr	r3, [pc, #56]	; (5298 <_osc32kctrl_init_sources+0x64>)
    5260:	4798      	blx	r3
    5262:	4603      	mov	r3, r0
    5264:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5266:	887b      	ldrh	r3, [r7, #2]
    5268:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    526a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    526e:	4619      	mov	r1, r3
    5270:	6878      	ldr	r0, [r7, #4]
    5272:	4b0a      	ldr	r3, [pc, #40]	; (529c <_osc32kctrl_init_sources+0x68>)
    5274:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    5276:	2100      	movs	r1, #0
    5278:	6878      	ldr	r0, [r7, #4]
    527a:	4b09      	ldr	r3, [pc, #36]	; (52a0 <_osc32kctrl_init_sources+0x6c>)
    527c:	4798      	blx	r3
	(void)calib;
}
    527e:	bf00      	nop
    5280:	3708      	adds	r7, #8
    5282:	46bd      	mov	sp, r7
    5284:	bd80      	pop	{r7, pc}
    5286:	bf00      	nop
    5288:	40001400 	.word	0x40001400
    528c:	00005197 	.word	0x00005197
    5290:	000051b5 	.word	0x000051b5
    5294:	000051d3 	.word	0x000051d3
    5298:	000051f1 	.word	0x000051f1
    529c:	00005217 	.word	0x00005217
    52a0:	00005179 	.word	0x00005179

000052a4 <hri_gclk_wait_for_sync>:
{
    52a4:	b480      	push	{r7}
    52a6:	b083      	sub	sp, #12
    52a8:	af00      	add	r7, sp, #0
    52aa:	6078      	str	r0, [r7, #4]
    52ac:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    52ae:	bf00      	nop
    52b0:	687b      	ldr	r3, [r7, #4]
    52b2:	685a      	ldr	r2, [r3, #4]
    52b4:	683b      	ldr	r3, [r7, #0]
    52b6:	4013      	ands	r3, r2
    52b8:	2b00      	cmp	r3, #0
    52ba:	d1f9      	bne.n	52b0 <hri_gclk_wait_for_sync+0xc>
}
    52bc:	bf00      	nop
    52be:	370c      	adds	r7, #12
    52c0:	46bd      	mov	sp, r7
    52c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    52c6:	4770      	bx	lr

000052c8 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    52c8:	b480      	push	{r7}
    52ca:	b083      	sub	sp, #12
    52cc:	af00      	add	r7, sp, #0
    52ce:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    52d0:	687b      	ldr	r3, [r7, #4]
    52d2:	685b      	ldr	r3, [r3, #4]
    52d4:	089b      	lsrs	r3, r3, #2
    52d6:	f003 0301 	and.w	r3, r3, #1
    52da:	2b00      	cmp	r3, #0
    52dc:	bf14      	ite	ne
    52de:	2301      	movne	r3, #1
    52e0:	2300      	moveq	r3, #0
    52e2:	b2db      	uxtb	r3, r3
}
    52e4:	4618      	mov	r0, r3
    52e6:	370c      	adds	r7, #12
    52e8:	46bd      	mov	sp, r7
    52ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ee:	4770      	bx	lr

000052f0 <hri_gclk_read_SYNCBUSY_reg>:
{
    52f0:	b480      	push	{r7}
    52f2:	b083      	sub	sp, #12
    52f4:	af00      	add	r7, sp, #0
    52f6:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    52f8:	687b      	ldr	r3, [r7, #4]
    52fa:	685b      	ldr	r3, [r3, #4]
}
    52fc:	4618      	mov	r0, r3
    52fe:	370c      	adds	r7, #12
    5300:	46bd      	mov	sp, r7
    5302:	f85d 7b04 	ldr.w	r7, [sp], #4
    5306:	4770      	bx	lr

00005308 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5308:	b580      	push	{r7, lr}
    530a:	b086      	sub	sp, #24
    530c:	af00      	add	r7, sp, #0
    530e:	60f8      	str	r0, [r7, #12]
    5310:	460b      	mov	r3, r1
    5312:	607a      	str	r2, [r7, #4]
    5314:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5316:	7afa      	ldrb	r2, [r7, #11]
    5318:	68fb      	ldr	r3, [r7, #12]
    531a:	3208      	adds	r2, #8
    531c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5320:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5322:	697b      	ldr	r3, [r7, #20]
    5324:	f023 030f 	bic.w	r3, r3, #15
    5328:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    532a:	687b      	ldr	r3, [r7, #4]
    532c:	f003 030f 	and.w	r3, r3, #15
    5330:	697a      	ldr	r2, [r7, #20]
    5332:	4313      	orrs	r3, r2
    5334:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5336:	7afa      	ldrb	r2, [r7, #11]
    5338:	68fb      	ldr	r3, [r7, #12]
    533a:	3208      	adds	r2, #8
    533c:	6979      	ldr	r1, [r7, #20]
    533e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5342:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5346:	68f8      	ldr	r0, [r7, #12]
    5348:	4b02      	ldr	r3, [pc, #8]	; (5354 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    534a:	4798      	blx	r3
}
    534c:	bf00      	nop
    534e:	3718      	adds	r7, #24
    5350:	46bd      	mov	sp, r7
    5352:	bd80      	pop	{r7, pc}
    5354:	000052a5 	.word	0x000052a5

00005358 <hri_gclk_write_PCHCTRL_reg>:
{
    5358:	b480      	push	{r7}
    535a:	b085      	sub	sp, #20
    535c:	af00      	add	r7, sp, #0
    535e:	60f8      	str	r0, [r7, #12]
    5360:	460b      	mov	r3, r1
    5362:	607a      	str	r2, [r7, #4]
    5364:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5366:	7afa      	ldrb	r2, [r7, #11]
    5368:	68fb      	ldr	r3, [r7, #12]
    536a:	3220      	adds	r2, #32
    536c:	6879      	ldr	r1, [r7, #4]
    536e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5372:	bf00      	nop
    5374:	3714      	adds	r7, #20
    5376:	46bd      	mov	sp, r7
    5378:	f85d 7b04 	ldr.w	r7, [sp], #4
    537c:	4770      	bx	lr

0000537e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    537e:	b480      	push	{r7}
    5380:	b085      	sub	sp, #20
    5382:	af00      	add	r7, sp, #0
    5384:	60f8      	str	r0, [r7, #12]
    5386:	460b      	mov	r3, r1
    5388:	607a      	str	r2, [r7, #4]
    538a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    538c:	bf00      	nop
    538e:	7afa      	ldrb	r2, [r7, #11]
    5390:	68f9      	ldr	r1, [r7, #12]
    5392:	4613      	mov	r3, r2
    5394:	009b      	lsls	r3, r3, #2
    5396:	4413      	add	r3, r2
    5398:	009b      	lsls	r3, r3, #2
    539a:	440b      	add	r3, r1
    539c:	333c      	adds	r3, #60	; 0x3c
    539e:	681a      	ldr	r2, [r3, #0]
    53a0:	687b      	ldr	r3, [r7, #4]
    53a2:	4013      	ands	r3, r2
    53a4:	2b00      	cmp	r3, #0
    53a6:	d1f2      	bne.n	538e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    53a8:	bf00      	nop
    53aa:	3714      	adds	r7, #20
    53ac:	46bd      	mov	sp, r7
    53ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    53b2:	4770      	bx	lr

000053b4 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    53b4:	b480      	push	{r7}
    53b6:	b083      	sub	sp, #12
    53b8:	af00      	add	r7, sp, #0
    53ba:	6078      	str	r0, [r7, #4]
    53bc:	460b      	mov	r3, r1
    53be:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    53c0:	78fa      	ldrb	r2, [r7, #3]
    53c2:	6879      	ldr	r1, [r7, #4]
    53c4:	4613      	mov	r3, r2
    53c6:	009b      	lsls	r3, r3, #2
    53c8:	4413      	add	r3, r2
    53ca:	009b      	lsls	r3, r3, #2
    53cc:	440b      	add	r3, r1
    53ce:	3340      	adds	r3, #64	; 0x40
    53d0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    53d2:	f003 0301 	and.w	r3, r3, #1
    53d6:	2b00      	cmp	r3, #0
    53d8:	bf14      	ite	ne
    53da:	2301      	movne	r3, #1
    53dc:	2300      	moveq	r3, #0
    53de:	b2db      	uxtb	r3, r3
}
    53e0:	4618      	mov	r0, r3
    53e2:	370c      	adds	r7, #12
    53e4:	46bd      	mov	sp, r7
    53e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53ea:	4770      	bx	lr

000053ec <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    53ec:	b480      	push	{r7}
    53ee:	b083      	sub	sp, #12
    53f0:	af00      	add	r7, sp, #0
    53f2:	6078      	str	r0, [r7, #4]
    53f4:	460b      	mov	r3, r1
    53f6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    53f8:	78fa      	ldrb	r2, [r7, #3]
    53fa:	6879      	ldr	r1, [r7, #4]
    53fc:	4613      	mov	r3, r2
    53fe:	009b      	lsls	r3, r3, #2
    5400:	4413      	add	r3, r2
    5402:	009b      	lsls	r3, r3, #2
    5404:	440b      	add	r3, r1
    5406:	3340      	adds	r3, #64	; 0x40
    5408:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    540a:	085b      	lsrs	r3, r3, #1
    540c:	f003 0301 	and.w	r3, r3, #1
    5410:	2b00      	cmp	r3, #0
    5412:	bf14      	ite	ne
    5414:	2301      	movne	r3, #1
    5416:	2300      	moveq	r3, #0
    5418:	b2db      	uxtb	r3, r3
}
    541a:	4618      	mov	r0, r3
    541c:	370c      	adds	r7, #12
    541e:	46bd      	mov	sp, r7
    5420:	f85d 7b04 	ldr.w	r7, [sp], #4
    5424:	4770      	bx	lr
	...

00005428 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5428:	b580      	push	{r7, lr}
    542a:	b082      	sub	sp, #8
    542c:	af00      	add	r7, sp, #0
    542e:	6078      	str	r0, [r7, #4]
    5430:	460b      	mov	r3, r1
    5432:	70fb      	strb	r3, [r7, #3]
    5434:	4613      	mov	r3, r2
    5436:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5438:	78fa      	ldrb	r2, [r7, #3]
    543a:	6879      	ldr	r1, [r7, #4]
    543c:	4613      	mov	r3, r2
    543e:	009b      	lsls	r3, r3, #2
    5440:	4413      	add	r3, r2
    5442:	009b      	lsls	r3, r3, #2
    5444:	440b      	add	r3, r1
    5446:	3330      	adds	r3, #48	; 0x30
    5448:	78ba      	ldrb	r2, [r7, #2]
    544a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    544c:	78fb      	ldrb	r3, [r7, #3]
    544e:	2202      	movs	r2, #2
    5450:	4619      	mov	r1, r3
    5452:	6878      	ldr	r0, [r7, #4]
    5454:	4b02      	ldr	r3, [pc, #8]	; (5460 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5456:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5458:	bf00      	nop
    545a:	3708      	adds	r7, #8
    545c:	46bd      	mov	sp, r7
    545e:	bd80      	pop	{r7, pc}
    5460:	0000537f 	.word	0x0000537f

00005464 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5464:	b580      	push	{r7, lr}
    5466:	b084      	sub	sp, #16
    5468:	af00      	add	r7, sp, #0
    546a:	60f8      	str	r0, [r7, #12]
    546c:	460b      	mov	r3, r1
    546e:	607a      	str	r2, [r7, #4]
    5470:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5472:	7afa      	ldrb	r2, [r7, #11]
    5474:	68f9      	ldr	r1, [r7, #12]
    5476:	4613      	mov	r3, r2
    5478:	009b      	lsls	r3, r3, #2
    547a:	4413      	add	r3, r2
    547c:	009b      	lsls	r3, r3, #2
    547e:	440b      	add	r3, r1
    5480:	3334      	adds	r3, #52	; 0x34
    5482:	687a      	ldr	r2, [r7, #4]
    5484:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5486:	7afb      	ldrb	r3, [r7, #11]
    5488:	2206      	movs	r2, #6
    548a:	4619      	mov	r1, r3
    548c:	68f8      	ldr	r0, [r7, #12]
    548e:	4b03      	ldr	r3, [pc, #12]	; (549c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5490:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5492:	bf00      	nop
    5494:	3710      	adds	r7, #16
    5496:	46bd      	mov	sp, r7
    5498:	bd80      	pop	{r7, pc}
    549a:	bf00      	nop
    549c:	0000537f 	.word	0x0000537f

000054a0 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    54a0:	b480      	push	{r7}
    54a2:	b085      	sub	sp, #20
    54a4:	af00      	add	r7, sp, #0
    54a6:	60f8      	str	r0, [r7, #12]
    54a8:	460b      	mov	r3, r1
    54aa:	607a      	str	r2, [r7, #4]
    54ac:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    54ae:	7afa      	ldrb	r2, [r7, #11]
    54b0:	68f9      	ldr	r1, [r7, #12]
    54b2:	4613      	mov	r3, r2
    54b4:	009b      	lsls	r3, r3, #2
    54b6:	4413      	add	r3, r2
    54b8:	009b      	lsls	r3, r3, #2
    54ba:	440b      	add	r3, r1
    54bc:	3338      	adds	r3, #56	; 0x38
    54be:	687a      	ldr	r2, [r7, #4]
    54c0:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    54c2:	bf00      	nop
    54c4:	3714      	adds	r7, #20
    54c6:	46bd      	mov	sp, r7
    54c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    54cc:	4770      	bx	lr

000054ce <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    54ce:	b480      	push	{r7}
    54d0:	b083      	sub	sp, #12
    54d2:	af00      	add	r7, sp, #0
    54d4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	691b      	ldr	r3, [r3, #16]
    54da:	085b      	lsrs	r3, r3, #1
    54dc:	f003 0301 	and.w	r3, r3, #1
    54e0:	2b00      	cmp	r3, #0
    54e2:	bf14      	ite	ne
    54e4:	2301      	movne	r3, #1
    54e6:	2300      	moveq	r3, #0
    54e8:	b2db      	uxtb	r3, r3
}
    54ea:	4618      	mov	r0, r3
    54ec:	370c      	adds	r7, #12
    54ee:	46bd      	mov	sp, r7
    54f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    54f4:	4770      	bx	lr

000054f6 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    54f6:	b480      	push	{r7}
    54f8:	b083      	sub	sp, #12
    54fa:	af00      	add	r7, sp, #0
    54fc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    54fe:	687b      	ldr	r3, [r7, #4]
    5500:	691b      	ldr	r3, [r3, #16]
    5502:	0a1b      	lsrs	r3, r3, #8
    5504:	f003 0301 	and.w	r3, r3, #1
    5508:	2b00      	cmp	r3, #0
    550a:	bf14      	ite	ne
    550c:	2301      	movne	r3, #1
    550e:	2300      	moveq	r3, #0
    5510:	b2db      	uxtb	r3, r3
}
    5512:	4618      	mov	r0, r3
    5514:	370c      	adds	r7, #12
    5516:	46bd      	mov	sp, r7
    5518:	f85d 7b04 	ldr.w	r7, [sp], #4
    551c:	4770      	bx	lr

0000551e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    551e:	b480      	push	{r7}
    5520:	b085      	sub	sp, #20
    5522:	af00      	add	r7, sp, #0
    5524:	6078      	str	r0, [r7, #4]
    5526:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5528:	687b      	ldr	r3, [r7, #4]
    552a:	691b      	ldr	r3, [r3, #16]
    552c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    552e:	68fa      	ldr	r2, [r7, #12]
    5530:	683b      	ldr	r3, [r7, #0]
    5532:	4013      	ands	r3, r2
    5534:	60fb      	str	r3, [r7, #12]
	return tmp;
    5536:	68fb      	ldr	r3, [r7, #12]
}
    5538:	4618      	mov	r0, r3
    553a:	3714      	adds	r7, #20
    553c:	46bd      	mov	sp, r7
    553e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5542:	4770      	bx	lr

00005544 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5544:	b480      	push	{r7}
    5546:	b085      	sub	sp, #20
    5548:	af00      	add	r7, sp, #0
    554a:	60f8      	str	r0, [r7, #12]
    554c:	460b      	mov	r3, r1
    554e:	607a      	str	r2, [r7, #4]
    5550:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5552:	7afb      	ldrb	r3, [r7, #11]
    5554:	68fa      	ldr	r2, [r7, #12]
    5556:	3304      	adds	r3, #4
    5558:	009b      	lsls	r3, r3, #2
    555a:	4413      	add	r3, r2
    555c:	687a      	ldr	r2, [r7, #4]
    555e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5560:	bf00      	nop
    5562:	3714      	adds	r7, #20
    5564:	46bd      	mov	sp, r7
    5566:	f85d 7b04 	ldr.w	r7, [sp], #4
    556a:	4770      	bx	lr

0000556c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    556c:	b480      	push	{r7}
    556e:	b083      	sub	sp, #12
    5570:	af00      	add	r7, sp, #0
    5572:	6078      	str	r0, [r7, #4]
    5574:	460b      	mov	r3, r1
    5576:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	78fa      	ldrb	r2, [r7, #3]
    557c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    557e:	bf00      	nop
    5580:	370c      	adds	r7, #12
    5582:	46bd      	mov	sp, r7
    5584:	f85d 7b04 	ldr.w	r7, [sp], #4
    5588:	4770      	bx	lr

0000558a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    558a:	b480      	push	{r7}
    558c:	b085      	sub	sp, #20
    558e:	af00      	add	r7, sp, #0
    5590:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5592:	687b      	ldr	r3, [r7, #4]
    5594:	f893 3020 	ldrb.w	r3, [r3, #32]
    5598:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    559a:	7bfb      	ldrb	r3, [r7, #15]
    559c:	f003 0301 	and.w	r3, r3, #1
    55a0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    55a2:	7bfb      	ldrb	r3, [r7, #15]
    55a4:	2b00      	cmp	r3, #0
    55a6:	bf14      	ite	ne
    55a8:	2301      	movne	r3, #1
    55aa:	2300      	moveq	r3, #0
    55ac:	b2db      	uxtb	r3, r3
}
    55ae:	4618      	mov	r0, r3
    55b0:	3714      	adds	r7, #20
    55b2:	46bd      	mov	sp, r7
    55b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    55b8:	4770      	bx	lr

000055ba <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    55ba:	b480      	push	{r7}
    55bc:	b083      	sub	sp, #12
    55be:	af00      	add	r7, sp, #0
    55c0:	6078      	str	r0, [r7, #4]
    55c2:	460b      	mov	r3, r1
    55c4:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    55c6:	687b      	ldr	r3, [r7, #4]
    55c8:	78fa      	ldrb	r2, [r7, #3]
    55ca:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    55ce:	bf00      	nop
    55d0:	370c      	adds	r7, #12
    55d2:	46bd      	mov	sp, r7
    55d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    55d8:	4770      	bx	lr

000055da <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    55da:	b480      	push	{r7}
    55dc:	b083      	sub	sp, #12
    55de:	af00      	add	r7, sp, #0
    55e0:	6078      	str	r0, [r7, #4]
    55e2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    55e4:	687b      	ldr	r3, [r7, #4]
    55e6:	683a      	ldr	r2, [r7, #0]
    55e8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    55ea:	bf00      	nop
    55ec:	370c      	adds	r7, #12
    55ee:	46bd      	mov	sp, r7
    55f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    55f4:	4770      	bx	lr

000055f6 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    55f6:	b480      	push	{r7}
    55f8:	b083      	sub	sp, #12
    55fa:	af00      	add	r7, sp, #0
    55fc:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    55fe:	687b      	ldr	r3, [r7, #4]
    5600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5602:	4618      	mov	r0, r3
    5604:	370c      	adds	r7, #12
    5606:	46bd      	mov	sp, r7
    5608:	f85d 7b04 	ldr.w	r7, [sp], #4
    560c:	4770      	bx	lr

0000560e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    560e:	b480      	push	{r7}
    5610:	b083      	sub	sp, #12
    5612:	af00      	add	r7, sp, #0
    5614:	6078      	str	r0, [r7, #4]
    5616:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	683a      	ldr	r2, [r7, #0]
    561c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    561e:	bf00      	nop
    5620:	370c      	adds	r7, #12
    5622:	46bd      	mov	sp, r7
    5624:	f85d 7b04 	ldr.w	r7, [sp], #4
    5628:	4770      	bx	lr

0000562a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    562a:	b480      	push	{r7}
    562c:	b085      	sub	sp, #20
    562e:	af00      	add	r7, sp, #0
    5630:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5632:	687b      	ldr	r3, [r7, #4]
    5634:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5638:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    563a:	7bfb      	ldrb	r3, [r7, #15]
    563c:	085b      	lsrs	r3, r3, #1
    563e:	b2db      	uxtb	r3, r3
    5640:	f003 0301 	and.w	r3, r3, #1
    5644:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5646:	7bfb      	ldrb	r3, [r7, #15]
    5648:	2b00      	cmp	r3, #0
    564a:	bf14      	ite	ne
    564c:	2301      	movne	r3, #1
    564e:	2300      	moveq	r3, #0
    5650:	b2db      	uxtb	r3, r3
}
    5652:	4618      	mov	r0, r3
    5654:	3714      	adds	r7, #20
    5656:	46bd      	mov	sp, r7
    5658:	f85d 7b04 	ldr.w	r7, [sp], #4
    565c:	4770      	bx	lr

0000565e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    565e:	b480      	push	{r7}
    5660:	b085      	sub	sp, #20
    5662:	af00      	add	r7, sp, #0
    5664:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    566c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    566e:	7bfb      	ldrb	r3, [r7, #15]
    5670:	089b      	lsrs	r3, r3, #2
    5672:	b2db      	uxtb	r3, r3
    5674:	f003 0301 	and.w	r3, r3, #1
    5678:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    567a:	7bfb      	ldrb	r3, [r7, #15]
    567c:	2b00      	cmp	r3, #0
    567e:	bf14      	ite	ne
    5680:	2301      	movne	r3, #1
    5682:	2300      	moveq	r3, #0
    5684:	b2db      	uxtb	r3, r3
}
    5686:	4618      	mov	r0, r3
    5688:	3714      	adds	r7, #20
    568a:	46bd      	mov	sp, r7
    568c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5690:	4770      	bx	lr

00005692 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5692:	b480      	push	{r7}
    5694:	b085      	sub	sp, #20
    5696:	af00      	add	r7, sp, #0
    5698:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    569a:	687b      	ldr	r3, [r7, #4]
    569c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    56a0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    56a2:	7bfb      	ldrb	r3, [r7, #15]
    56a4:	08db      	lsrs	r3, r3, #3
    56a6:	b2db      	uxtb	r3, r3
    56a8:	f003 0301 	and.w	r3, r3, #1
    56ac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    56ae:	7bfb      	ldrb	r3, [r7, #15]
    56b0:	2b00      	cmp	r3, #0
    56b2:	bf14      	ite	ne
    56b4:	2301      	movne	r3, #1
    56b6:	2300      	moveq	r3, #0
    56b8:	b2db      	uxtb	r3, r3
}
    56ba:	4618      	mov	r0, r3
    56bc:	3714      	adds	r7, #20
    56be:	46bd      	mov	sp, r7
    56c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    56c4:	4770      	bx	lr

000056c6 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    56c6:	b480      	push	{r7}
    56c8:	b085      	sub	sp, #20
    56ca:	af00      	add	r7, sp, #0
    56cc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    56d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    56d6:	7bfb      	ldrb	r3, [r7, #15]
    56d8:	091b      	lsrs	r3, r3, #4
    56da:	b2db      	uxtb	r3, r3
    56dc:	f003 0301 	and.w	r3, r3, #1
    56e0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    56e2:	7bfb      	ldrb	r3, [r7, #15]
    56e4:	2b00      	cmp	r3, #0
    56e6:	bf14      	ite	ne
    56e8:	2301      	movne	r3, #1
    56ea:	2300      	moveq	r3, #0
    56ec:	b2db      	uxtb	r3, r3
}
    56ee:	4618      	mov	r0, r3
    56f0:	3714      	adds	r7, #20
    56f2:	46bd      	mov	sp, r7
    56f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    56f8:	4770      	bx	lr
	...

000056fc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    56fc:	b580      	push	{r7, lr}
    56fe:	b082      	sub	sp, #8
    5700:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5702:	4b0a      	ldr	r3, [pc, #40]	; (572c <_oscctrl_init_sources+0x30>)
    5704:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5706:	4a0a      	ldr	r2, [pc, #40]	; (5730 <_oscctrl_init_sources+0x34>)
    5708:	2101      	movs	r1, #1
    570a:	6878      	ldr	r0, [r7, #4]
    570c:	4b09      	ldr	r3, [pc, #36]	; (5734 <_oscctrl_init_sources+0x38>)
    570e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5710:	bf00      	nop
    5712:	6878      	ldr	r0, [r7, #4]
    5714:	4b08      	ldr	r3, [pc, #32]	; (5738 <_oscctrl_init_sources+0x3c>)
    5716:	4798      	blx	r3
    5718:	4603      	mov	r3, r0
    571a:	f083 0301 	eor.w	r3, r3, #1
    571e:	b2db      	uxtb	r3, r3
    5720:	2b00      	cmp	r3, #0
    5722:	d1f6      	bne.n	5712 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5724:	bf00      	nop
    5726:	3708      	adds	r7, #8
    5728:	46bd      	mov	sp, r7
    572a:	bd80      	pop	{r7, pc}
    572c:	40001000 	.word	0x40001000
    5730:	03002646 	.word	0x03002646
    5734:	00005545 	.word	0x00005545
    5738:	000054cf 	.word	0x000054cf

0000573c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    573c:	b580      	push	{r7, lr}
    573e:	b084      	sub	sp, #16
    5740:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5742:	4b6b      	ldr	r3, [pc, #428]	; (58f0 <_oscctrl_init_referenced_generators+0x1b4>)
    5744:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5746:	2204      	movs	r2, #4
    5748:	2100      	movs	r1, #0
    574a:	486a      	ldr	r0, [pc, #424]	; (58f4 <_oscctrl_init_referenced_generators+0x1b8>)
    574c:	4b6a      	ldr	r3, [pc, #424]	; (58f8 <_oscctrl_init_referenced_generators+0x1bc>)
    574e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5750:	bf00      	nop
    5752:	4868      	ldr	r0, [pc, #416]	; (58f4 <_oscctrl_init_referenced_generators+0x1b8>)
    5754:	4b69      	ldr	r3, [pc, #420]	; (58fc <_oscctrl_init_referenced_generators+0x1c0>)
    5756:	4798      	blx	r3
    5758:	4603      	mov	r3, r0
    575a:	2b00      	cmp	r3, #0
    575c:	d1f9      	bne.n	5752 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    575e:	2100      	movs	r1, #0
    5760:	68f8      	ldr	r0, [r7, #12]
    5762:	4b67      	ldr	r3, [pc, #412]	; (5900 <_oscctrl_init_referenced_generators+0x1c4>)
    5764:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5766:	4967      	ldr	r1, [pc, #412]	; (5904 <_oscctrl_init_referenced_generators+0x1c8>)
    5768:	68f8      	ldr	r0, [r7, #12]
    576a:	4b67      	ldr	r3, [pc, #412]	; (5908 <_oscctrl_init_referenced_generators+0x1cc>)
    576c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    576e:	bf00      	nop
    5770:	68f8      	ldr	r0, [r7, #12]
    5772:	4b66      	ldr	r3, [pc, #408]	; (590c <_oscctrl_init_referenced_generators+0x1d0>)
    5774:	4798      	blx	r3
    5776:	4603      	mov	r3, r0
    5778:	2b00      	cmp	r3, #0
    577a:	d1f9      	bne.n	5770 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    577c:	2100      	movs	r1, #0
    577e:	68f8      	ldr	r0, [r7, #12]
    5780:	4b63      	ldr	r3, [pc, #396]	; (5910 <_oscctrl_init_referenced_generators+0x1d4>)
    5782:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5784:	bf00      	nop
    5786:	68f8      	ldr	r0, [r7, #12]
    5788:	4b62      	ldr	r3, [pc, #392]	; (5914 <_oscctrl_init_referenced_generators+0x1d8>)
    578a:	4798      	blx	r3
    578c:	4603      	mov	r3, r0
    578e:	2b00      	cmp	r3, #0
    5790:	d1f9      	bne.n	5786 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5792:	2302      	movs	r3, #2
    5794:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5796:	7afb      	ldrb	r3, [r7, #11]
    5798:	4619      	mov	r1, r3
    579a:	68f8      	ldr	r0, [r7, #12]
    579c:	4b58      	ldr	r3, [pc, #352]	; (5900 <_oscctrl_init_referenced_generators+0x1c4>)
    579e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    57a0:	bf00      	nop
    57a2:	68f8      	ldr	r0, [r7, #12]
    57a4:	4b5c      	ldr	r3, [pc, #368]	; (5918 <_oscctrl_init_referenced_generators+0x1dc>)
    57a6:	4798      	blx	r3
    57a8:	4603      	mov	r3, r0
    57aa:	2b00      	cmp	r3, #0
    57ac:	d1f9      	bne.n	57a2 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    57ae:	68f8      	ldr	r0, [r7, #12]
    57b0:	4b5a      	ldr	r3, [pc, #360]	; (591c <_oscctrl_init_referenced_generators+0x1e0>)
    57b2:	4798      	blx	r3
    57b4:	4603      	mov	r3, r0
    57b6:	4619      	mov	r1, r3
    57b8:	68f8      	ldr	r0, [r7, #12]
    57ba:	4b59      	ldr	r3, [pc, #356]	; (5920 <_oscctrl_init_referenced_generators+0x1e4>)
    57bc:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    57be:	bf00      	nop
    57c0:	68f8      	ldr	r0, [r7, #12]
    57c2:	4b58      	ldr	r3, [pc, #352]	; (5924 <_oscctrl_init_referenced_generators+0x1e8>)
    57c4:	4798      	blx	r3
    57c6:	4603      	mov	r3, r0
    57c8:	2b00      	cmp	r3, #0
    57ca:	d1f9      	bne.n	57c0 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    57cc:	2319      	movs	r3, #25
    57ce:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    57d0:	7afb      	ldrb	r3, [r7, #11]
    57d2:	4619      	mov	r1, r3
    57d4:	68f8      	ldr	r0, [r7, #12]
    57d6:	4b4e      	ldr	r3, [pc, #312]	; (5910 <_oscctrl_init_referenced_generators+0x1d4>)
    57d8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    57da:	bf00      	nop
    57dc:	68f8      	ldr	r0, [r7, #12]
    57de:	4b4d      	ldr	r3, [pc, #308]	; (5914 <_oscctrl_init_referenced_generators+0x1d8>)
    57e0:	4798      	blx	r3
    57e2:	4603      	mov	r3, r0
    57e4:	2b00      	cmp	r3, #0
    57e6:	d1f9      	bne.n	57dc <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    57e8:	2245      	movs	r2, #69	; 0x45
    57ea:	2101      	movs	r1, #1
    57ec:	4841      	ldr	r0, [pc, #260]	; (58f4 <_oscctrl_init_referenced_generators+0x1b8>)
    57ee:	4b4e      	ldr	r3, [pc, #312]	; (5928 <_oscctrl_init_referenced_generators+0x1ec>)
    57f0:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    57f2:	223b      	movs	r2, #59	; 0x3b
    57f4:	2100      	movs	r1, #0
    57f6:	68f8      	ldr	r0, [r7, #12]
    57f8:	4b4c      	ldr	r3, [pc, #304]	; (592c <_oscctrl_init_referenced_generators+0x1f0>)
    57fa:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    57fc:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5800:	2100      	movs	r1, #0
    5802:	68f8      	ldr	r0, [r7, #12]
    5804:	4b4a      	ldr	r3, [pc, #296]	; (5930 <_oscctrl_init_referenced_generators+0x1f4>)
    5806:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5808:	2242      	movs	r2, #66	; 0x42
    580a:	2100      	movs	r1, #0
    580c:	68f8      	ldr	r0, [r7, #12]
    580e:	4b49      	ldr	r3, [pc, #292]	; (5934 <_oscctrl_init_referenced_generators+0x1f8>)
    5810:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5812:	4a49      	ldr	r2, [pc, #292]	; (5938 <_oscctrl_init_referenced_generators+0x1fc>)
    5814:	2101      	movs	r1, #1
    5816:	68f8      	ldr	r0, [r7, #12]
    5818:	4b44      	ldr	r3, [pc, #272]	; (592c <_oscctrl_init_referenced_generators+0x1f0>)
    581a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    581c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5820:	2101      	movs	r1, #1
    5822:	68f8      	ldr	r0, [r7, #12]
    5824:	4b42      	ldr	r3, [pc, #264]	; (5930 <_oscctrl_init_referenced_generators+0x1f4>)
    5826:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5828:	2202      	movs	r2, #2
    582a:	2101      	movs	r1, #1
    582c:	68f8      	ldr	r0, [r7, #12]
    582e:	4b41      	ldr	r3, [pc, #260]	; (5934 <_oscctrl_init_referenced_generators+0x1f8>)
    5830:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5832:	68f8      	ldr	r0, [r7, #12]
    5834:	4b41      	ldr	r3, [pc, #260]	; (593c <_oscctrl_init_referenced_generators+0x200>)
    5836:	4798      	blx	r3
    5838:	4603      	mov	r3, r0
    583a:	2b00      	cmp	r3, #0
    583c:	d00c      	beq.n	5858 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    583e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5842:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5844:	bf00      	nop
    5846:	6879      	ldr	r1, [r7, #4]
    5848:	68f8      	ldr	r0, [r7, #12]
    584a:	4b3d      	ldr	r3, [pc, #244]	; (5940 <_oscctrl_init_referenced_generators+0x204>)
    584c:	4798      	blx	r3
    584e:	4602      	mov	r2, r0
    5850:	687b      	ldr	r3, [r7, #4]
    5852:	429a      	cmp	r2, r3
    5854:	d1f7      	bne.n	5846 <_oscctrl_init_referenced_generators+0x10a>
    5856:	e009      	b.n	586c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5858:	bf00      	nop
    585a:	68f8      	ldr	r0, [r7, #12]
    585c:	4b39      	ldr	r3, [pc, #228]	; (5944 <_oscctrl_init_referenced_generators+0x208>)
    585e:	4798      	blx	r3
    5860:	4603      	mov	r3, r0
    5862:	f083 0301 	eor.w	r3, r3, #1
    5866:	b2db      	uxtb	r3, r3
    5868:	2b00      	cmp	r3, #0
    586a:	d1f6      	bne.n	585a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    586c:	bf00      	nop
    586e:	2100      	movs	r1, #0
    5870:	68f8      	ldr	r0, [r7, #12]
    5872:	4b35      	ldr	r3, [pc, #212]	; (5948 <_oscctrl_init_referenced_generators+0x20c>)
    5874:	4798      	blx	r3
    5876:	4603      	mov	r3, r0
    5878:	f083 0301 	eor.w	r3, r3, #1
    587c:	b2db      	uxtb	r3, r3
    587e:	2b00      	cmp	r3, #0
    5880:	d009      	beq.n	5896 <_oscctrl_init_referenced_generators+0x15a>
    5882:	2100      	movs	r1, #0
    5884:	68f8      	ldr	r0, [r7, #12]
    5886:	4b31      	ldr	r3, [pc, #196]	; (594c <_oscctrl_init_referenced_generators+0x210>)
    5888:	4798      	blx	r3
    588a:	4603      	mov	r3, r0
    588c:	f083 0301 	eor.w	r3, r3, #1
    5890:	b2db      	uxtb	r3, r3
    5892:	2b00      	cmp	r3, #0
    5894:	d1eb      	bne.n	586e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5896:	bf00      	nop
    5898:	2101      	movs	r1, #1
    589a:	68f8      	ldr	r0, [r7, #12]
    589c:	4b2a      	ldr	r3, [pc, #168]	; (5948 <_oscctrl_init_referenced_generators+0x20c>)
    589e:	4798      	blx	r3
    58a0:	4603      	mov	r3, r0
    58a2:	f083 0301 	eor.w	r3, r3, #1
    58a6:	b2db      	uxtb	r3, r3
    58a8:	2b00      	cmp	r3, #0
    58aa:	d009      	beq.n	58c0 <_oscctrl_init_referenced_generators+0x184>
    58ac:	2101      	movs	r1, #1
    58ae:	68f8      	ldr	r0, [r7, #12]
    58b0:	4b26      	ldr	r3, [pc, #152]	; (594c <_oscctrl_init_referenced_generators+0x210>)
    58b2:	4798      	blx	r3
    58b4:	4603      	mov	r3, r0
    58b6:	f083 0301 	eor.w	r3, r3, #1
    58ba:	b2db      	uxtb	r3, r3
    58bc:	2b00      	cmp	r3, #0
    58be:	d1eb      	bne.n	5898 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    58c0:	bf00      	nop
    58c2:	480c      	ldr	r0, [pc, #48]	; (58f4 <_oscctrl_init_referenced_generators+0x1b8>)
    58c4:	4b22      	ldr	r3, [pc, #136]	; (5950 <_oscctrl_init_referenced_generators+0x214>)
    58c6:	4798      	blx	r3
    58c8:	4603      	mov	r3, r0
    58ca:	2b00      	cmp	r3, #0
    58cc:	d1f9      	bne.n	58c2 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    58ce:	2207      	movs	r2, #7
    58d0:	2100      	movs	r1, #0
    58d2:	4808      	ldr	r0, [pc, #32]	; (58f4 <_oscctrl_init_referenced_generators+0x1b8>)
    58d4:	4b08      	ldr	r3, [pc, #32]	; (58f8 <_oscctrl_init_referenced_generators+0x1bc>)
    58d6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    58d8:	bf00      	nop
    58da:	4806      	ldr	r0, [pc, #24]	; (58f4 <_oscctrl_init_referenced_generators+0x1b8>)
    58dc:	4b07      	ldr	r3, [pc, #28]	; (58fc <_oscctrl_init_referenced_generators+0x1c0>)
    58de:	4798      	blx	r3
    58e0:	4603      	mov	r3, r0
    58e2:	2b00      	cmp	r3, #0
    58e4:	d1f9      	bne.n	58da <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    58e6:	bf00      	nop
    58e8:	3710      	adds	r7, #16
    58ea:	46bd      	mov	sp, r7
    58ec:	bd80      	pop	{r7, pc}
    58ee:	bf00      	nop
    58f0:	40001000 	.word	0x40001000
    58f4:	40001c00 	.word	0x40001c00
    58f8:	00005309 	.word	0x00005309
    58fc:	000052c9 	.word	0x000052c9
    5900:	0000556d 	.word	0x0000556d
    5904:	0401bb80 	.word	0x0401bb80
    5908:	0000560f 	.word	0x0000560f
    590c:	000056c7 	.word	0x000056c7
    5910:	000055bb 	.word	0x000055bb
    5914:	0000565f 	.word	0x0000565f
    5918:	0000562b 	.word	0x0000562b
    591c:	000055f7 	.word	0x000055f7
    5920:	000055db 	.word	0x000055db
    5924:	00005693 	.word	0x00005693
    5928:	00005359 	.word	0x00005359
    592c:	00005465 	.word	0x00005465
    5930:	000054a1 	.word	0x000054a1
    5934:	00005429 	.word	0x00005429
    5938:	000407a0 	.word	0x000407a0
    593c:	0000558b 	.word	0x0000558b
    5940:	0000551f 	.word	0x0000551f
    5944:	000054f7 	.word	0x000054f7
    5948:	000053b5 	.word	0x000053b5
    594c:	000053ed 	.word	0x000053ed
    5950:	000052f1 	.word	0x000052f1

00005954 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5954:	b480      	push	{r7}
    5956:	b083      	sub	sp, #12
    5958:	af00      	add	r7, sp, #0
    595a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    595c:	687b      	ldr	r3, [r7, #4]
    595e:	69db      	ldr	r3, [r3, #28]
    5960:	0a9b      	lsrs	r3, r3, #10
    5962:	f003 0301 	and.w	r3, r3, #1
    5966:	2b00      	cmp	r3, #0
    5968:	bf14      	ite	ne
    596a:	2301      	movne	r3, #1
    596c:	2300      	moveq	r3, #0
    596e:	b2db      	uxtb	r3, r3
}
    5970:	4618      	mov	r0, r3
    5972:	370c      	adds	r7, #12
    5974:	46bd      	mov	sp, r7
    5976:	f85d 7b04 	ldr.w	r7, [sp], #4
    597a:	4770      	bx	lr

0000597c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    597c:	b480      	push	{r7}
    597e:	b083      	sub	sp, #12
    5980:	af00      	add	r7, sp, #0
    5982:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5984:	687b      	ldr	r3, [r7, #4]
    5986:	f44f 6280 	mov.w	r2, #1024	; 0x400
    598a:	61da      	str	r2, [r3, #28]
}
    598c:	bf00      	nop
    598e:	370c      	adds	r7, #12
    5990:	46bd      	mov	sp, r7
    5992:	f85d 7b04 	ldr.w	r7, [sp], #4
    5996:	4770      	bx	lr

00005998 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5998:	b480      	push	{r7}
    599a:	b083      	sub	sp, #12
    599c:	af00      	add	r7, sp, #0
    599e:	6078      	str	r0, [r7, #4]
    59a0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	683a      	ldr	r2, [r7, #0]
    59a6:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    59a8:	bf00      	nop
    59aa:	370c      	adds	r7, #12
    59ac:	46bd      	mov	sp, r7
    59ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b2:	4770      	bx	lr

000059b4 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    59b4:	b480      	push	{r7}
    59b6:	b083      	sub	sp, #12
    59b8:	af00      	add	r7, sp, #0
    59ba:	6078      	str	r0, [r7, #4]
    59bc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    59be:	687b      	ldr	r3, [r7, #4]
    59c0:	683a      	ldr	r2, [r7, #0]
    59c2:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    59c4:	bf00      	nop
    59c6:	370c      	adds	r7, #12
    59c8:	46bd      	mov	sp, r7
    59ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ce:	4770      	bx	lr

000059d0 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    59d0:	b480      	push	{r7}
    59d2:	b083      	sub	sp, #12
    59d4:	af00      	add	r7, sp, #0
    59d6:	6078      	str	r0, [r7, #4]
    59d8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    59da:	687b      	ldr	r3, [r7, #4]
    59dc:	683a      	ldr	r2, [r7, #0]
    59de:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    59e0:	bf00      	nop
    59e2:	370c      	adds	r7, #12
    59e4:	46bd      	mov	sp, r7
    59e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ea:	4770      	bx	lr

000059ec <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    59ec:	b480      	push	{r7}
    59ee:	b083      	sub	sp, #12
    59f0:	af00      	add	r7, sp, #0
    59f2:	6078      	str	r0, [r7, #4]
    59f4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    59f6:	687b      	ldr	r3, [r7, #4]
    59f8:	683a      	ldr	r2, [r7, #0]
    59fa:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    59fc:	bf00      	nop
    59fe:	370c      	adds	r7, #12
    5a00:	46bd      	mov	sp, r7
    5a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a06:	4770      	bx	lr

00005a08 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5a08:	b480      	push	{r7}
    5a0a:	b085      	sub	sp, #20
    5a0c:	af00      	add	r7, sp, #0
    5a0e:	6078      	str	r0, [r7, #4]
    5a10:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5a12:	687b      	ldr	r3, [r7, #4]
    5a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5a16:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5a18:	68fb      	ldr	r3, [r7, #12]
    5a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5a1e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5a20:	683b      	ldr	r3, [r7, #0]
    5a22:	b2db      	uxtb	r3, r3
    5a24:	68fa      	ldr	r2, [r7, #12]
    5a26:	4313      	orrs	r3, r2
    5a28:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	68fa      	ldr	r2, [r7, #12]
    5a2e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5a30:	bf00      	nop
    5a32:	3714      	adds	r7, #20
    5a34:	46bd      	mov	sp, r7
    5a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a3a:	4770      	bx	lr

00005a3c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5a3c:	b480      	push	{r7}
    5a3e:	b085      	sub	sp, #20
    5a40:	af00      	add	r7, sp, #0
    5a42:	6078      	str	r0, [r7, #4]
    5a44:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5a46:	687b      	ldr	r3, [r7, #4]
    5a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5a4a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5a4c:	68fb      	ldr	r3, [r7, #12]
    5a4e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5a52:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5a54:	683b      	ldr	r3, [r7, #0]
    5a56:	041b      	lsls	r3, r3, #16
    5a58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5a5c:	68fa      	ldr	r2, [r7, #12]
    5a5e:	4313      	orrs	r3, r2
    5a60:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5a62:	687b      	ldr	r3, [r7, #4]
    5a64:	68fa      	ldr	r2, [r7, #12]
    5a66:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5a68:	bf00      	nop
    5a6a:	3714      	adds	r7, #20
    5a6c:	46bd      	mov	sp, r7
    5a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a72:	4770      	bx	lr

00005a74 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5a74:	b480      	push	{r7}
    5a76:	b083      	sub	sp, #12
    5a78:	af00      	add	r7, sp, #0
    5a7a:	6078      	str	r0, [r7, #4]
    5a7c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	683a      	ldr	r2, [r7, #0]
    5a82:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5a84:	bf00      	nop
    5a86:	370c      	adds	r7, #12
    5a88:	46bd      	mov	sp, r7
    5a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a8e:	4770      	bx	lr

00005a90 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5a90:	b480      	push	{r7}
    5a92:	b083      	sub	sp, #12
    5a94:	af00      	add	r7, sp, #0
    5a96:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5a98:	687b      	ldr	r3, [r7, #4]
    5a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5a9c:	4618      	mov	r0, r3
    5a9e:	370c      	adds	r7, #12
    5aa0:	46bd      	mov	sp, r7
    5aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa6:	4770      	bx	lr

00005aa8 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5aa8:	b480      	push	{r7}
    5aaa:	b085      	sub	sp, #20
    5aac:	af00      	add	r7, sp, #0
    5aae:	60f8      	str	r0, [r7, #12]
    5ab0:	60b9      	str	r1, [r7, #8]
    5ab2:	607a      	str	r2, [r7, #4]
	while (count--) {
    5ab4:	e007      	b.n	5ac6 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5ab6:	68fb      	ldr	r3, [r7, #12]
    5ab8:	1c5a      	adds	r2, r3, #1
    5aba:	60fa      	str	r2, [r7, #12]
    5abc:	68ba      	ldr	r2, [r7, #8]
    5abe:	1c51      	adds	r1, r2, #1
    5ac0:	60b9      	str	r1, [r7, #8]
    5ac2:	7812      	ldrb	r2, [r2, #0]
    5ac4:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5ac6:	687b      	ldr	r3, [r7, #4]
    5ac8:	1e5a      	subs	r2, r3, #1
    5aca:	607a      	str	r2, [r7, #4]
    5acc:	2b00      	cmp	r3, #0
    5ace:	d1f2      	bne.n	5ab6 <_qspi_memcpy+0xe>
	}
}
    5ad0:	bf00      	nop
    5ad2:	3714      	adds	r7, #20
    5ad4:	46bd      	mov	sp, r7
    5ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ada:	4770      	bx	lr

00005adc <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5adc:	b580      	push	{r7, lr}
    5ade:	b082      	sub	sp, #8
    5ae0:	af00      	add	r7, sp, #0
    5ae2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5ae4:	4903      	ldr	r1, [pc, #12]	; (5af4 <_qspi_end_transfer+0x18>)
    5ae6:	6878      	ldr	r0, [r7, #4]
    5ae8:	4b03      	ldr	r3, [pc, #12]	; (5af8 <_qspi_end_transfer+0x1c>)
    5aea:	4798      	blx	r3
}
    5aec:	bf00      	nop
    5aee:	3708      	adds	r7, #8
    5af0:	46bd      	mov	sp, r7
    5af2:	bd80      	pop	{r7, pc}
    5af4:	01000002 	.word	0x01000002
    5af8:	00005999 	.word	0x00005999

00005afc <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5afc:	b580      	push	{r7, lr}
    5afe:	b082      	sub	sp, #8
    5b00:	af00      	add	r7, sp, #0
    5b02:	6078      	str	r0, [r7, #4]
    5b04:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5b06:	687b      	ldr	r3, [r7, #4]
    5b08:	2b00      	cmp	r3, #0
    5b0a:	d004      	beq.n	5b16 <_qspi_sync_init+0x1a>
    5b0c:	683b      	ldr	r3, [r7, #0]
    5b0e:	2b00      	cmp	r3, #0
    5b10:	d001      	beq.n	5b16 <_qspi_sync_init+0x1a>
    5b12:	2301      	movs	r3, #1
    5b14:	e000      	b.n	5b18 <_qspi_sync_init+0x1c>
    5b16:	2300      	movs	r3, #0
    5b18:	f003 0301 	and.w	r3, r3, #1
    5b1c:	b2db      	uxtb	r3, r3
    5b1e:	2240      	movs	r2, #64	; 0x40
    5b20:	490c      	ldr	r1, [pc, #48]	; (5b54 <_qspi_sync_init+0x58>)
    5b22:	4618      	mov	r0, r3
    5b24:	4b0c      	ldr	r3, [pc, #48]	; (5b58 <_qspi_sync_init+0x5c>)
    5b26:	4798      	blx	r3
	dev->prvt = hw;
    5b28:	687b      	ldr	r3, [r7, #4]
    5b2a:	683a      	ldr	r2, [r7, #0]
    5b2c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5b2e:	687b      	ldr	r3, [r7, #4]
    5b30:	681b      	ldr	r3, [r3, #0]
    5b32:	2101      	movs	r1, #1
    5b34:	4618      	mov	r0, r3
    5b36:	4b09      	ldr	r3, [pc, #36]	; (5b5c <_qspi_sync_init+0x60>)
    5b38:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5b3a:	4909      	ldr	r1, [pc, #36]	; (5b60 <_qspi_sync_init+0x64>)
    5b3c:	6838      	ldr	r0, [r7, #0]
    5b3e:	4b09      	ldr	r3, [pc, #36]	; (5b64 <_qspi_sync_init+0x68>)
    5b40:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5b42:	4909      	ldr	r1, [pc, #36]	; (5b68 <_qspi_sync_init+0x6c>)
    5b44:	6838      	ldr	r0, [r7, #0]
    5b46:	4b09      	ldr	r3, [pc, #36]	; (5b6c <_qspi_sync_init+0x70>)
    5b48:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5b4a:	2300      	movs	r3, #0
}
    5b4c:	4618      	mov	r0, r3
    5b4e:	3708      	adds	r7, #8
    5b50:	46bd      	mov	sp, r7
    5b52:	bd80      	pop	{r7, pc}
    5b54:	000109d0 	.word	0x000109d0
    5b58:	00003b01 	.word	0x00003b01
    5b5c:	00005999 	.word	0x00005999
    5b60:	06000011 	.word	0x06000011
    5b64:	000059b5 	.word	0x000059b5
    5b68:	00241300 	.word	0x00241300
    5b6c:	000059d1 	.word	0x000059d1

00005b70 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5b70:	b580      	push	{r7, lr}
    5b72:	b082      	sub	sp, #8
    5b74:	af00      	add	r7, sp, #0
    5b76:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5b78:	687b      	ldr	r3, [r7, #4]
    5b7a:	681b      	ldr	r3, [r3, #0]
    5b7c:	2102      	movs	r1, #2
    5b7e:	4618      	mov	r0, r3
    5b80:	4b03      	ldr	r3, [pc, #12]	; (5b90 <_qspi_sync_enable+0x20>)
    5b82:	4798      	blx	r3
	return ERR_NONE;
    5b84:	2300      	movs	r3, #0
}
    5b86:	4618      	mov	r0, r3
    5b88:	3708      	adds	r7, #8
    5b8a:	46bd      	mov	sp, r7
    5b8c:	bd80      	pop	{r7, pc}
    5b8e:	bf00      	nop
    5b90:	00005999 	.word	0x00005999

00005b94 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5b94:	b580      	push	{r7, lr}
    5b96:	b082      	sub	sp, #8
    5b98:	af00      	add	r7, sp, #0
    5b9a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5b9c:	687b      	ldr	r3, [r7, #4]
    5b9e:	681b      	ldr	r3, [r3, #0]
    5ba0:	2100      	movs	r1, #0
    5ba2:	4618      	mov	r0, r3
    5ba4:	4b03      	ldr	r3, [pc, #12]	; (5bb4 <_qspi_sync_disable+0x20>)
    5ba6:	4798      	blx	r3
	return ERR_NONE;
    5ba8:	2300      	movs	r3, #0
}
    5baa:	4618      	mov	r0, r3
    5bac:	3708      	adds	r7, #8
    5bae:	46bd      	mov	sp, r7
    5bb0:	bd80      	pop	{r7, pc}
    5bb2:	bf00      	nop
    5bb4:	00005999 	.word	0x00005999

00005bb8 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5bb8:	b580      	push	{r7, lr}
    5bba:	b084      	sub	sp, #16
    5bbc:	af00      	add	r7, sp, #0
    5bbe:	6078      	str	r0, [r7, #4]
    5bc0:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5bc2:	687b      	ldr	r3, [r7, #4]
    5bc4:	681b      	ldr	r3, [r3, #0]
    5bc6:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5bc8:	683b      	ldr	r3, [r7, #0]
    5bca:	781b      	ldrb	r3, [r3, #0]
    5bcc:	f003 0320 	and.w	r3, r3, #32
    5bd0:	b2db      	uxtb	r3, r3
    5bd2:	2b00      	cmp	r3, #0
    5bd4:	d005      	beq.n	5be2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5bd6:	683b      	ldr	r3, [r7, #0]
    5bd8:	689b      	ldr	r3, [r3, #8]
    5bda:	4619      	mov	r1, r3
    5bdc:	68f8      	ldr	r0, [r7, #12]
    5bde:	4b13      	ldr	r3, [pc, #76]	; (5c2c <_qspi_sync_command_set_ifr+0x74>)
    5be0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5be2:	683b      	ldr	r3, [r7, #0]
    5be4:	781b      	ldrb	r3, [r3, #0]
    5be6:	f003 0310 	and.w	r3, r3, #16
    5bea:	b2db      	uxtb	r3, r3
    5bec:	2b00      	cmp	r3, #0
    5bee:	d005      	beq.n	5bfc <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5bf0:	683b      	ldr	r3, [r7, #0]
    5bf2:	791b      	ldrb	r3, [r3, #4]
    5bf4:	4619      	mov	r1, r3
    5bf6:	68f8      	ldr	r0, [r7, #12]
    5bf8:	4b0d      	ldr	r3, [pc, #52]	; (5c30 <_qspi_sync_command_set_ifr+0x78>)
    5bfa:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5bfc:	683b      	ldr	r3, [r7, #0]
    5bfe:	781b      	ldrb	r3, [r3, #0]
    5c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5c04:	b2db      	uxtb	r3, r3
    5c06:	2b00      	cmp	r3, #0
    5c08:	d005      	beq.n	5c16 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5c0a:	683b      	ldr	r3, [r7, #0]
    5c0c:	795b      	ldrb	r3, [r3, #5]
    5c0e:	4619      	mov	r1, r3
    5c10:	68f8      	ldr	r0, [r7, #12]
    5c12:	4b08      	ldr	r3, [pc, #32]	; (5c34 <_qspi_sync_command_set_ifr+0x7c>)
    5c14:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5c16:	683b      	ldr	r3, [r7, #0]
    5c18:	681b      	ldr	r3, [r3, #0]
    5c1a:	4619      	mov	r1, r3
    5c1c:	68f8      	ldr	r0, [r7, #12]
    5c1e:	4b06      	ldr	r3, [pc, #24]	; (5c38 <_qspi_sync_command_set_ifr+0x80>)
    5c20:	4798      	blx	r3
}
    5c22:	bf00      	nop
    5c24:	3710      	adds	r7, #16
    5c26:	46bd      	mov	sp, r7
    5c28:	bd80      	pop	{r7, pc}
    5c2a:	bf00      	nop
    5c2c:	000059ed 	.word	0x000059ed
    5c30:	00005a09 	.word	0x00005a09
    5c34:	00005a3d 	.word	0x00005a3d
    5c38:	00005a75 	.word	0x00005a75

00005c3c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5c3c:	b580      	push	{r7, lr}
    5c3e:	b084      	sub	sp, #16
    5c40:	af00      	add	r7, sp, #0
    5c42:	6078      	str	r0, [r7, #4]
    5c44:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5c46:	687b      	ldr	r3, [r7, #4]
    5c48:	681b      	ldr	r3, [r3, #0]
    5c4a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5c4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5c50:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5c52:	683b      	ldr	r3, [r7, #0]
    5c54:	781b      	ldrb	r3, [r3, #0]
    5c56:	f003 0320 	and.w	r3, r3, #32
    5c5a:	b2db      	uxtb	r3, r3
    5c5c:	2b00      	cmp	r3, #0
    5c5e:	d004      	beq.n	5c6a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5c60:	683b      	ldr	r3, [r7, #0]
    5c62:	689b      	ldr	r3, [r3, #8]
    5c64:	68fa      	ldr	r2, [r7, #12]
    5c66:	4413      	add	r3, r2
    5c68:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5c6a:	68b8      	ldr	r0, [r7, #8]
    5c6c:	4b18      	ldr	r3, [pc, #96]	; (5cd0 <_qspi_sync_run_transfer+0x94>)
    5c6e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5c70:	683b      	ldr	r3, [r7, #0]
    5c72:	691b      	ldr	r3, [r3, #16]
    5c74:	2b00      	cmp	r3, #0
    5c76:	d103      	bne.n	5c80 <_qspi_sync_run_transfer+0x44>
    5c78:	683b      	ldr	r3, [r7, #0]
    5c7a:	695b      	ldr	r3, [r3, #20]
    5c7c:	2b00      	cmp	r3, #0
    5c7e:	d001      	beq.n	5c84 <_qspi_sync_run_transfer+0x48>
    5c80:	2301      	movs	r3, #1
    5c82:	e000      	b.n	5c86 <_qspi_sync_run_transfer+0x4a>
    5c84:	2300      	movs	r3, #0
    5c86:	f003 0301 	and.w	r3, r3, #1
    5c8a:	b2db      	uxtb	r3, r3
    5c8c:	2282      	movs	r2, #130	; 0x82
    5c8e:	4911      	ldr	r1, [pc, #68]	; (5cd4 <_qspi_sync_run_transfer+0x98>)
    5c90:	4618      	mov	r0, r3
    5c92:	4b11      	ldr	r3, [pc, #68]	; (5cd8 <_qspi_sync_run_transfer+0x9c>)
    5c94:	4798      	blx	r3

	if (cmd->tx_buf) {
    5c96:	683b      	ldr	r3, [r7, #0]
    5c98:	691b      	ldr	r3, [r3, #16]
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d008      	beq.n	5cb0 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5c9e:	683b      	ldr	r3, [r7, #0]
    5ca0:	6919      	ldr	r1, [r3, #16]
    5ca2:	683b      	ldr	r3, [r7, #0]
    5ca4:	68db      	ldr	r3, [r3, #12]
    5ca6:	461a      	mov	r2, r3
    5ca8:	68f8      	ldr	r0, [r7, #12]
    5caa:	4b0c      	ldr	r3, [pc, #48]	; (5cdc <_qspi_sync_run_transfer+0xa0>)
    5cac:	4798      	blx	r3
    5cae:	e007      	b.n	5cc0 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5cb0:	683b      	ldr	r3, [r7, #0]
    5cb2:	6958      	ldr	r0, [r3, #20]
    5cb4:	683b      	ldr	r3, [r7, #0]
    5cb6:	68db      	ldr	r3, [r3, #12]
    5cb8:	461a      	mov	r2, r3
    5cba:	68f9      	ldr	r1, [r7, #12]
    5cbc:	4b07      	ldr	r3, [pc, #28]	; (5cdc <_qspi_sync_run_transfer+0xa0>)
    5cbe:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5cc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5cc4:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5cc8:	bf00      	nop
    5cca:	3710      	adds	r7, #16
    5ccc:	46bd      	mov	sp, r7
    5cce:	bd80      	pop	{r7, pc}
    5cd0:	00005a91 	.word	0x00005a91
    5cd4:	000109d0 	.word	0x000109d0
    5cd8:	00003b01 	.word	0x00003b01
    5cdc:	00005aa9 	.word	0x00005aa9

00005ce0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5ce0:	b580      	push	{r7, lr}
    5ce2:	b082      	sub	sp, #8
    5ce4:	af00      	add	r7, sp, #0
    5ce6:	6078      	str	r0, [r7, #4]
    5ce8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5cea:	6839      	ldr	r1, [r7, #0]
    5cec:	6878      	ldr	r0, [r7, #4]
    5cee:	4b14      	ldr	r3, [pc, #80]	; (5d40 <_qspi_sync_serial_run_command+0x60>)
    5cf0:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5cf2:	683b      	ldr	r3, [r7, #0]
    5cf4:	781b      	ldrb	r3, [r3, #0]
    5cf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5cfa:	b2db      	uxtb	r3, r3
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	d003      	beq.n	5d08 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5d00:	6839      	ldr	r1, [r7, #0]
    5d02:	6878      	ldr	r0, [r7, #4]
    5d04:	4b0f      	ldr	r3, [pc, #60]	; (5d44 <_qspi_sync_serial_run_command+0x64>)
    5d06:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5d08:	687b      	ldr	r3, [r7, #4]
    5d0a:	681b      	ldr	r3, [r3, #0]
    5d0c:	4618      	mov	r0, r3
    5d0e:	4b0e      	ldr	r3, [pc, #56]	; (5d48 <_qspi_sync_serial_run_command+0x68>)
    5d10:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5d12:	bf00      	nop
    5d14:	687b      	ldr	r3, [r7, #4]
    5d16:	681b      	ldr	r3, [r3, #0]
    5d18:	4618      	mov	r0, r3
    5d1a:	4b0c      	ldr	r3, [pc, #48]	; (5d4c <_qspi_sync_serial_run_command+0x6c>)
    5d1c:	4798      	blx	r3
    5d1e:	4603      	mov	r3, r0
    5d20:	f083 0301 	eor.w	r3, r3, #1
    5d24:	b2db      	uxtb	r3, r3
    5d26:	2b00      	cmp	r3, #0
    5d28:	d1f4      	bne.n	5d14 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5d2a:	687b      	ldr	r3, [r7, #4]
    5d2c:	681b      	ldr	r3, [r3, #0]
    5d2e:	4618      	mov	r0, r3
    5d30:	4b07      	ldr	r3, [pc, #28]	; (5d50 <_qspi_sync_serial_run_command+0x70>)
    5d32:	4798      	blx	r3
	return ERR_NONE;
    5d34:	2300      	movs	r3, #0
}
    5d36:	4618      	mov	r0, r3
    5d38:	3708      	adds	r7, #8
    5d3a:	46bd      	mov	sp, r7
    5d3c:	bd80      	pop	{r7, pc}
    5d3e:	bf00      	nop
    5d40:	00005bb9 	.word	0x00005bb9
    5d44:	00005c3d 	.word	0x00005c3d
    5d48:	00005add 	.word	0x00005add
    5d4c:	00005955 	.word	0x00005955
    5d50:	0000597d 	.word	0x0000597d

00005d54 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5d54:	b480      	push	{r7}
    5d56:	b083      	sub	sp, #12
    5d58:	af00      	add	r7, sp, #0
    5d5a:	6078      	str	r0, [r7, #4]
    5d5c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5d5e:	bf00      	nop
    5d60:	687b      	ldr	r3, [r7, #4]
    5d62:	691a      	ldr	r2, [r3, #16]
    5d64:	683b      	ldr	r3, [r7, #0]
    5d66:	4013      	ands	r3, r2
    5d68:	2b00      	cmp	r3, #0
    5d6a:	d1f9      	bne.n	5d60 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5d6c:	bf00      	nop
    5d6e:	370c      	adds	r7, #12
    5d70:	46bd      	mov	sp, r7
    5d72:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d76:	4770      	bx	lr

00005d78 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5d78:	b480      	push	{r7}
    5d7a:	b083      	sub	sp, #12
    5d7c:	af00      	add	r7, sp, #0
    5d7e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5d80:	687b      	ldr	r3, [r7, #4]
    5d82:	f44f 7280 	mov.w	r2, #256	; 0x100
    5d86:	819a      	strh	r2, [r3, #12]
}
    5d88:	bf00      	nop
    5d8a:	370c      	adds	r7, #12
    5d8c:	46bd      	mov	sp, r7
    5d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d92:	4770      	bx	lr

00005d94 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5d94:	b480      	push	{r7}
    5d96:	b083      	sub	sp, #12
    5d98:	af00      	add	r7, sp, #0
    5d9a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5d9c:	687b      	ldr	r3, [r7, #4]
    5d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5da2:	819a      	strh	r2, [r3, #12]
}
    5da4:	bf00      	nop
    5da6:	370c      	adds	r7, #12
    5da8:	46bd      	mov	sp, r7
    5daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dae:	4770      	bx	lr

00005db0 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5db0:	b480      	push	{r7}
    5db2:	b083      	sub	sp, #12
    5db4:	af00      	add	r7, sp, #0
    5db6:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5db8:	687b      	ldr	r3, [r7, #4]
    5dba:	899b      	ldrh	r3, [r3, #12]
    5dbc:	b29b      	uxth	r3, r3
}
    5dbe:	4618      	mov	r0, r3
    5dc0:	370c      	adds	r7, #12
    5dc2:	46bd      	mov	sp, r7
    5dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dc8:	4770      	bx	lr

00005dca <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5dca:	b480      	push	{r7}
    5dcc:	b083      	sub	sp, #12
    5dce:	af00      	add	r7, sp, #0
    5dd0:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5dd2:	687b      	ldr	r3, [r7, #4]
    5dd4:	895b      	ldrh	r3, [r3, #10]
    5dd6:	b29b      	uxth	r3, r3
}
    5dd8:	4618      	mov	r0, r3
    5dda:	370c      	adds	r7, #12
    5ddc:	46bd      	mov	sp, r7
    5dde:	f85d 7b04 	ldr.w	r7, [sp], #4
    5de2:	4770      	bx	lr

00005de4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5de4:	b580      	push	{r7, lr}
    5de6:	b082      	sub	sp, #8
    5de8:	af00      	add	r7, sp, #0
    5dea:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5dec:	687b      	ldr	r3, [r7, #4]
    5dee:	881b      	ldrh	r3, [r3, #0]
    5df0:	b29b      	uxth	r3, r3
    5df2:	f043 0301 	orr.w	r3, r3, #1
    5df6:	b29a      	uxth	r2, r3
    5df8:	687b      	ldr	r3, [r7, #4]
    5dfa:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5dfc:	2101      	movs	r1, #1
    5dfe:	6878      	ldr	r0, [r7, #4]
    5e00:	4b02      	ldr	r3, [pc, #8]	; (5e0c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5e02:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5e04:	bf00      	nop
    5e06:	3708      	adds	r7, #8
    5e08:	46bd      	mov	sp, r7
    5e0a:	bd80      	pop	{r7, pc}
    5e0c:	00005d55 	.word	0x00005d55

00005e10 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5e10:	b580      	push	{r7, lr}
    5e12:	b082      	sub	sp, #8
    5e14:	af00      	add	r7, sp, #0
    5e16:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    5e18:	687b      	ldr	r3, [r7, #4]
    5e1a:	881b      	ldrh	r3, [r3, #0]
    5e1c:	b29b      	uxth	r3, r3
    5e1e:	f043 0302 	orr.w	r3, r3, #2
    5e22:	b29a      	uxth	r2, r3
    5e24:	687b      	ldr	r3, [r7, #4]
    5e26:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5e28:	f248 0103 	movw	r1, #32771	; 0x8003
    5e2c:	6878      	ldr	r0, [r7, #4]
    5e2e:	4b03      	ldr	r3, [pc, #12]	; (5e3c <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    5e30:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5e32:	bf00      	nop
    5e34:	3708      	adds	r7, #8
    5e36:	46bd      	mov	sp, r7
    5e38:	bd80      	pop	{r7, pc}
    5e3a:	bf00      	nop
    5e3c:	00005d55 	.word	0x00005d55

00005e40 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5e40:	b580      	push	{r7, lr}
    5e42:	b084      	sub	sp, #16
    5e44:	af00      	add	r7, sp, #0
    5e46:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5e48:	f248 0103 	movw	r1, #32771	; 0x8003
    5e4c:	6878      	ldr	r0, [r7, #4]
    5e4e:	4b0a      	ldr	r3, [pc, #40]	; (5e78 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5e50:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5e52:	687b      	ldr	r3, [r7, #4]
    5e54:	881b      	ldrh	r3, [r3, #0]
    5e56:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5e58:	89fb      	ldrh	r3, [r7, #14]
    5e5a:	085b      	lsrs	r3, r3, #1
    5e5c:	b29b      	uxth	r3, r3
    5e5e:	f003 0301 	and.w	r3, r3, #1
    5e62:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5e64:	89fb      	ldrh	r3, [r7, #14]
    5e66:	2b00      	cmp	r3, #0
    5e68:	bf14      	ite	ne
    5e6a:	2301      	movne	r3, #1
    5e6c:	2300      	moveq	r3, #0
    5e6e:	b2db      	uxtb	r3, r3
}
    5e70:	4618      	mov	r0, r3
    5e72:	3710      	adds	r7, #16
    5e74:	46bd      	mov	sp, r7
    5e76:	bd80      	pop	{r7, pc}
    5e78:	00005d55 	.word	0x00005d55

00005e7c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5e7c:	b580      	push	{r7, lr}
    5e7e:	b082      	sub	sp, #8
    5e80:	af00      	add	r7, sp, #0
    5e82:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5e84:	687b      	ldr	r3, [r7, #4]
    5e86:	881b      	ldrh	r3, [r3, #0]
    5e88:	b29b      	uxth	r3, r3
    5e8a:	f023 0302 	bic.w	r3, r3, #2
    5e8e:	b29a      	uxth	r2, r3
    5e90:	687b      	ldr	r3, [r7, #4]
    5e92:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5e94:	f248 0103 	movw	r1, #32771	; 0x8003
    5e98:	6878      	ldr	r0, [r7, #4]
    5e9a:	4b03      	ldr	r3, [pc, #12]	; (5ea8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5e9c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5e9e:	bf00      	nop
    5ea0:	3708      	adds	r7, #8
    5ea2:	46bd      	mov	sp, r7
    5ea4:	bd80      	pop	{r7, pc}
    5ea6:	bf00      	nop
    5ea8:	00005d55 	.word	0x00005d55

00005eac <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5eac:	b580      	push	{r7, lr}
    5eae:	b082      	sub	sp, #8
    5eb0:	af00      	add	r7, sp, #0
    5eb2:	6078      	str	r0, [r7, #4]
    5eb4:	460b      	mov	r3, r1
    5eb6:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5eb8:	687b      	ldr	r3, [r7, #4]
    5eba:	887a      	ldrh	r2, [r7, #2]
    5ebc:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5ebe:	f248 0103 	movw	r1, #32771	; 0x8003
    5ec2:	6878      	ldr	r0, [r7, #4]
    5ec4:	4b02      	ldr	r3, [pc, #8]	; (5ed0 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5ec6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5ec8:	bf00      	nop
    5eca:	3708      	adds	r7, #8
    5ecc:	46bd      	mov	sp, r7
    5ece:	bd80      	pop	{r7, pc}
    5ed0:	00005d55 	.word	0x00005d55

00005ed4 <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    5ed4:	b580      	push	{r7, lr}
    5ed6:	b082      	sub	sp, #8
    5ed8:	af00      	add	r7, sp, #0
    5eda:	6078      	str	r0, [r7, #4]
    5edc:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    5ede:	687b      	ldr	r3, [r7, #4]
    5ee0:	683a      	ldr	r2, [r7, #0]
    5ee2:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    5ee4:	2108      	movs	r1, #8
    5ee6:	6878      	ldr	r0, [r7, #4]
    5ee8:	4b02      	ldr	r3, [pc, #8]	; (5ef4 <hri_rtcmode0_write_COUNT_reg+0x20>)
    5eea:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5eec:	bf00      	nop
    5eee:	3708      	adds	r7, #8
    5ef0:	46bd      	mov	sp, r7
    5ef2:	bd80      	pop	{r7, pc}
    5ef4:	00005d55 	.word	0x00005d55

00005ef8 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    5ef8:	b580      	push	{r7, lr}
    5efa:	b082      	sub	sp, #8
    5efc:	af00      	add	r7, sp, #0
    5efe:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    5f00:	2108      	movs	r1, #8
    5f02:	6878      	ldr	r0, [r7, #4]
    5f04:	4b03      	ldr	r3, [pc, #12]	; (5f14 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    5f06:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	699b      	ldr	r3, [r3, #24]
}
    5f0c:	4618      	mov	r0, r3
    5f0e:	3708      	adds	r7, #8
    5f10:	46bd      	mov	sp, r7
    5f12:	bd80      	pop	{r7, pc}
    5f14:	00005d55 	.word	0x00005d55

00005f18 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5f18:	b480      	push	{r7}
    5f1a:	b083      	sub	sp, #12
    5f1c:	af00      	add	r7, sp, #0
    5f1e:	6078      	str	r0, [r7, #4]
    5f20:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5f22:	687b      	ldr	r3, [r7, #4]
    5f24:	683a      	ldr	r2, [r7, #0]
    5f26:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5f28:	bf00      	nop
    5f2a:	370c      	adds	r7, #12
    5f2c:	46bd      	mov	sp, r7
    5f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f32:	4770      	bx	lr

00005f34 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5f34:	b580      	push	{r7, lr}
    5f36:	b082      	sub	sp, #8
    5f38:	af00      	add	r7, sp, #0
    5f3a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	2b00      	cmp	r3, #0
    5f40:	d005      	beq.n	5f4e <_calendar_init+0x1a>
    5f42:	687b      	ldr	r3, [r7, #4]
    5f44:	681b      	ldr	r3, [r3, #0]
    5f46:	2b00      	cmp	r3, #0
    5f48:	d001      	beq.n	5f4e <_calendar_init+0x1a>
    5f4a:	2301      	movs	r3, #1
    5f4c:	e000      	b.n	5f50 <_calendar_init+0x1c>
    5f4e:	2300      	movs	r3, #0
    5f50:	f003 0301 	and.w	r3, r3, #1
    5f54:	b2db      	uxtb	r3, r3
    5f56:	222f      	movs	r2, #47	; 0x2f
    5f58:	491b      	ldr	r1, [pc, #108]	; (5fc8 <_calendar_init+0x94>)
    5f5a:	4618      	mov	r0, r3
    5f5c:	4b1b      	ldr	r3, [pc, #108]	; (5fcc <_calendar_init+0x98>)
    5f5e:	4798      	blx	r3

	_rtc_dev = dev;
    5f60:	4a1b      	ldr	r2, [pc, #108]	; (5fd0 <_calendar_init+0x9c>)
    5f62:	687b      	ldr	r3, [r7, #4]
    5f64:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	681b      	ldr	r3, [r3, #0]
    5f6a:	4618      	mov	r0, r3
    5f6c:	4b19      	ldr	r3, [pc, #100]	; (5fd4 <_calendar_init+0xa0>)
    5f6e:	4798      	blx	r3
    5f70:	4603      	mov	r3, r0
    5f72:	2b00      	cmp	r3, #0
    5f74:	d00a      	beq.n	5f8c <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5f76:	687b      	ldr	r3, [r7, #4]
    5f78:	681b      	ldr	r3, [r3, #0]
    5f7a:	4618      	mov	r0, r3
    5f7c:	4b16      	ldr	r3, [pc, #88]	; (5fd8 <_calendar_init+0xa4>)
    5f7e:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5f80:	687b      	ldr	r3, [r7, #4]
    5f82:	681b      	ldr	r3, [r3, #0]
    5f84:	2102      	movs	r1, #2
    5f86:	4618      	mov	r0, r3
    5f88:	4b14      	ldr	r3, [pc, #80]	; (5fdc <_calendar_init+0xa8>)
    5f8a:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5f8c:	687b      	ldr	r3, [r7, #4]
    5f8e:	681b      	ldr	r3, [r3, #0]
    5f90:	4618      	mov	r0, r3
    5f92:	4b13      	ldr	r3, [pc, #76]	; (5fe0 <_calendar_init+0xac>)
    5f94:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	681b      	ldr	r3, [r3, #0]
    5f9a:	2101      	movs	r1, #1
    5f9c:	4618      	mov	r0, r3
    5f9e:	4b0f      	ldr	r3, [pc, #60]	; (5fdc <_calendar_init+0xa8>)
    5fa0:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5fa2:	687b      	ldr	r3, [r7, #4]
    5fa4:	681b      	ldr	r3, [r3, #0]
    5fa6:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5faa:	4618      	mov	r0, r3
    5fac:	4b0d      	ldr	r3, [pc, #52]	; (5fe4 <_calendar_init+0xb0>)
    5fae:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5fb4:	2100      	movs	r1, #0
    5fb6:	4618      	mov	r0, r3
    5fb8:	4b0b      	ldr	r3, [pc, #44]	; (5fe8 <_calendar_init+0xb4>)
    5fba:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5fbc:	2300      	movs	r3, #0
}
    5fbe:	4618      	mov	r0, r3
    5fc0:	3708      	adds	r7, #8
    5fc2:	46bd      	mov	sp, r7
    5fc4:	bd80      	pop	{r7, pc}
    5fc6:	bf00      	nop
    5fc8:	000109e8 	.word	0x000109e8
    5fcc:	00003b01 	.word	0x00003b01
    5fd0:	200021b0 	.word	0x200021b0
    5fd4:	00005e41 	.word	0x00005e41
    5fd8:	00005e7d 	.word	0x00005e7d
    5fdc:	00005d55 	.word	0x00005d55
    5fe0:	00005de5 	.word	0x00005de5
    5fe4:	00005ead 	.word	0x00005ead
    5fe8:	00005f19 	.word	0x00005f19

00005fec <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    5fec:	b580      	push	{r7, lr}
    5fee:	b082      	sub	sp, #8
    5ff0:	af00      	add	r7, sp, #0
    5ff2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5ff4:	687b      	ldr	r3, [r7, #4]
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	d005      	beq.n	6006 <_calendar_enable+0x1a>
    5ffa:	687b      	ldr	r3, [r7, #4]
    5ffc:	681b      	ldr	r3, [r3, #0]
    5ffe:	2b00      	cmp	r3, #0
    6000:	d001      	beq.n	6006 <_calendar_enable+0x1a>
    6002:	2301      	movs	r3, #1
    6004:	e000      	b.n	6008 <_calendar_enable+0x1c>
    6006:	2300      	movs	r3, #0
    6008:	f003 0301 	and.w	r3, r3, #1
    600c:	b2db      	uxtb	r3, r3
    600e:	2275      	movs	r2, #117	; 0x75
    6010:	4906      	ldr	r1, [pc, #24]	; (602c <_calendar_enable+0x40>)
    6012:	4618      	mov	r0, r3
    6014:	4b06      	ldr	r3, [pc, #24]	; (6030 <_calendar_enable+0x44>)
    6016:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	681b      	ldr	r3, [r3, #0]
    601c:	4618      	mov	r0, r3
    601e:	4b05      	ldr	r3, [pc, #20]	; (6034 <_calendar_enable+0x48>)
    6020:	4798      	blx	r3

	return ERR_NONE;
    6022:	2300      	movs	r3, #0
}
    6024:	4618      	mov	r0, r3
    6026:	3708      	adds	r7, #8
    6028:	46bd      	mov	sp, r7
    602a:	bd80      	pop	{r7, pc}
    602c:	000109e8 	.word	0x000109e8
    6030:	00003b01 	.word	0x00003b01
    6034:	00005e11 	.word	0x00005e11

00006038 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    6038:	b580      	push	{r7, lr}
    603a:	b082      	sub	sp, #8
    603c:	af00      	add	r7, sp, #0
    603e:	6078      	str	r0, [r7, #4]
    6040:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    6042:	687b      	ldr	r3, [r7, #4]
    6044:	2b00      	cmp	r3, #0
    6046:	d005      	beq.n	6054 <_calendar_set_counter+0x1c>
    6048:	687b      	ldr	r3, [r7, #4]
    604a:	681b      	ldr	r3, [r3, #0]
    604c:	2b00      	cmp	r3, #0
    604e:	d001      	beq.n	6054 <_calendar_set_counter+0x1c>
    6050:	2301      	movs	r3, #1
    6052:	e000      	b.n	6056 <_calendar_set_counter+0x1e>
    6054:	2300      	movs	r3, #0
    6056:	f003 0301 	and.w	r3, r3, #1
    605a:	b2db      	uxtb	r3, r3
    605c:	228d      	movs	r2, #141	; 0x8d
    605e:	4907      	ldr	r1, [pc, #28]	; (607c <_calendar_set_counter+0x44>)
    6060:	4618      	mov	r0, r3
    6062:	4b07      	ldr	r3, [pc, #28]	; (6080 <_calendar_set_counter+0x48>)
    6064:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    6066:	687b      	ldr	r3, [r7, #4]
    6068:	681b      	ldr	r3, [r3, #0]
    606a:	6839      	ldr	r1, [r7, #0]
    606c:	4618      	mov	r0, r3
    606e:	4b05      	ldr	r3, [pc, #20]	; (6084 <_calendar_set_counter+0x4c>)
    6070:	4798      	blx	r3

	return ERR_NONE;
    6072:	2300      	movs	r3, #0
}
    6074:	4618      	mov	r0, r3
    6076:	3708      	adds	r7, #8
    6078:	46bd      	mov	sp, r7
    607a:	bd80      	pop	{r7, pc}
    607c:	000109e8 	.word	0x000109e8
    6080:	00003b01 	.word	0x00003b01
    6084:	00005ed5 	.word	0x00005ed5

00006088 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    6088:	b580      	push	{r7, lr}
    608a:	b082      	sub	sp, #8
    608c:	af00      	add	r7, sp, #0
    608e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	2b00      	cmp	r3, #0
    6094:	d005      	beq.n	60a2 <_calendar_get_counter+0x1a>
    6096:	687b      	ldr	r3, [r7, #4]
    6098:	681b      	ldr	r3, [r3, #0]
    609a:	2b00      	cmp	r3, #0
    609c:	d001      	beq.n	60a2 <_calendar_get_counter+0x1a>
    609e:	2301      	movs	r3, #1
    60a0:	e000      	b.n	60a4 <_calendar_get_counter+0x1c>
    60a2:	2300      	movs	r3, #0
    60a4:	f003 0301 	and.w	r3, r3, #1
    60a8:	b2db      	uxtb	r3, r3
    60aa:	2299      	movs	r2, #153	; 0x99
    60ac:	4906      	ldr	r1, [pc, #24]	; (60c8 <_calendar_get_counter+0x40>)
    60ae:	4618      	mov	r0, r3
    60b0:	4b06      	ldr	r3, [pc, #24]	; (60cc <_calendar_get_counter+0x44>)
    60b2:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    60b4:	687b      	ldr	r3, [r7, #4]
    60b6:	681b      	ldr	r3, [r3, #0]
    60b8:	4618      	mov	r0, r3
    60ba:	4b05      	ldr	r3, [pc, #20]	; (60d0 <_calendar_get_counter+0x48>)
    60bc:	4798      	blx	r3
    60be:	4603      	mov	r3, r0
}
    60c0:	4618      	mov	r0, r3
    60c2:	3708      	adds	r7, #8
    60c4:	46bd      	mov	sp, r7
    60c6:	bd80      	pop	{r7, pc}
    60c8:	000109e8 	.word	0x000109e8
    60cc:	00003b01 	.word	0x00003b01
    60d0:	00005ef9 	.word	0x00005ef9

000060d4 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    60d4:	b580      	push	{r7, lr}
    60d6:	b084      	sub	sp, #16
    60d8:	af00      	add	r7, sp, #0
    60da:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	681b      	ldr	r3, [r3, #0]
    60e0:	4618      	mov	r0, r3
    60e2:	4b19      	ldr	r3, [pc, #100]	; (6148 <_rtc_interrupt_handler+0x74>)
    60e4:	4798      	blx	r3
    60e6:	4603      	mov	r3, r0
    60e8:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    60ea:	687b      	ldr	r3, [r7, #4]
    60ec:	681b      	ldr	r3, [r3, #0]
    60ee:	4618      	mov	r0, r3
    60f0:	4b16      	ldr	r3, [pc, #88]	; (614c <_rtc_interrupt_handler+0x78>)
    60f2:	4798      	blx	r3
    60f4:	4603      	mov	r3, r0
    60f6:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    60f8:	89fa      	ldrh	r2, [r7, #14]
    60fa:	89bb      	ldrh	r3, [r7, #12]
    60fc:	4013      	ands	r3, r2
    60fe:	b29b      	uxth	r3, r3
    6100:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6104:	2b00      	cmp	r3, #0
    6106:	d009      	beq.n	611c <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    6108:	687b      	ldr	r3, [r7, #4]
    610a:	685b      	ldr	r3, [r3, #4]
    610c:	6878      	ldr	r0, [r7, #4]
    610e:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    6110:	687b      	ldr	r3, [r7, #4]
    6112:	681b      	ldr	r3, [r3, #0]
    6114:	4618      	mov	r0, r3
    6116:	4b0e      	ldr	r3, [pc, #56]	; (6150 <_rtc_interrupt_handler+0x7c>)
    6118:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    611a:	e010      	b.n	613e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    611c:	89fa      	ldrh	r2, [r7, #14]
    611e:	89bb      	ldrh	r3, [r7, #12]
    6120:	4013      	ands	r3, r2
    6122:	b29b      	uxth	r3, r3
    6124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6128:	2b00      	cmp	r3, #0
    612a:	d008      	beq.n	613e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    612c:	687b      	ldr	r3, [r7, #4]
    612e:	689b      	ldr	r3, [r3, #8]
    6130:	6878      	ldr	r0, [r7, #4]
    6132:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    6134:	687b      	ldr	r3, [r7, #4]
    6136:	681b      	ldr	r3, [r3, #0]
    6138:	4618      	mov	r0, r3
    613a:	4b06      	ldr	r3, [pc, #24]	; (6154 <_rtc_interrupt_handler+0x80>)
    613c:	4798      	blx	r3
}
    613e:	bf00      	nop
    6140:	3710      	adds	r7, #16
    6142:	46bd      	mov	sp, r7
    6144:	bd80      	pop	{r7, pc}
    6146:	bf00      	nop
    6148:	00005db1 	.word	0x00005db1
    614c:	00005dcb 	.word	0x00005dcb
    6150:	00005d79 	.word	0x00005d79
    6154:	00005d95 	.word	0x00005d95

00006158 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6158:	b580      	push	{r7, lr}
    615a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    615c:	4b03      	ldr	r3, [pc, #12]	; (616c <RTC_Handler+0x14>)
    615e:	681b      	ldr	r3, [r3, #0]
    6160:	4618      	mov	r0, r3
    6162:	4b03      	ldr	r3, [pc, #12]	; (6170 <RTC_Handler+0x18>)
    6164:	4798      	blx	r3
}
    6166:	bf00      	nop
    6168:	bd80      	pop	{r7, pc}
    616a:	bf00      	nop
    616c:	200021b0 	.word	0x200021b0
    6170:	000060d5 	.word	0x000060d5

00006174 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6174:	b480      	push	{r7}
    6176:	b083      	sub	sp, #12
    6178:	af00      	add	r7, sp, #0
    617a:	6078      	str	r0, [r7, #4]
    617c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    617e:	bf00      	nop
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	69da      	ldr	r2, [r3, #28]
    6184:	683b      	ldr	r3, [r7, #0]
    6186:	4013      	ands	r3, r2
    6188:	2b00      	cmp	r3, #0
    618a:	d1f9      	bne.n	6180 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    618c:	bf00      	nop
    618e:	370c      	adds	r7, #12
    6190:	46bd      	mov	sp, r7
    6192:	f85d 7b04 	ldr.w	r7, [sp], #4
    6196:	4770      	bx	lr

00006198 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6198:	b480      	push	{r7}
    619a:	b083      	sub	sp, #12
    619c:	af00      	add	r7, sp, #0
    619e:	6078      	str	r0, [r7, #4]
    61a0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	69da      	ldr	r2, [r3, #28]
    61a6:	683b      	ldr	r3, [r7, #0]
    61a8:	4013      	ands	r3, r2
    61aa:	2b00      	cmp	r3, #0
    61ac:	bf14      	ite	ne
    61ae:	2301      	movne	r3, #1
    61b0:	2300      	moveq	r3, #0
    61b2:	b2db      	uxtb	r3, r3
}
    61b4:	4618      	mov	r0, r3
    61b6:	370c      	adds	r7, #12
    61b8:	46bd      	mov	sp, r7
    61ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    61be:	4770      	bx	lr

000061c0 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    61c0:	b480      	push	{r7}
    61c2:	b083      	sub	sp, #12
    61c4:	af00      	add	r7, sp, #0
    61c6:	6078      	str	r0, [r7, #4]
    61c8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    61ca:	bf00      	nop
    61cc:	687b      	ldr	r3, [r7, #4]
    61ce:	69da      	ldr	r2, [r3, #28]
    61d0:	683b      	ldr	r3, [r7, #0]
    61d2:	4013      	ands	r3, r2
    61d4:	2b00      	cmp	r3, #0
    61d6:	d1f9      	bne.n	61cc <hri_sercomspi_wait_for_sync+0xc>
	};
}
    61d8:	bf00      	nop
    61da:	370c      	adds	r7, #12
    61dc:	46bd      	mov	sp, r7
    61de:	f85d 7b04 	ldr.w	r7, [sp], #4
    61e2:	4770      	bx	lr

000061e4 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    61e4:	b480      	push	{r7}
    61e6:	b083      	sub	sp, #12
    61e8:	af00      	add	r7, sp, #0
    61ea:	6078      	str	r0, [r7, #4]
    61ec:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    61ee:	687b      	ldr	r3, [r7, #4]
    61f0:	69da      	ldr	r2, [r3, #28]
    61f2:	683b      	ldr	r3, [r7, #0]
    61f4:	4013      	ands	r3, r2
    61f6:	2b00      	cmp	r3, #0
    61f8:	bf14      	ite	ne
    61fa:	2301      	movne	r3, #1
    61fc:	2300      	moveq	r3, #0
    61fe:	b2db      	uxtb	r3, r3
}
    6200:	4618      	mov	r0, r3
    6202:	370c      	adds	r7, #12
    6204:	46bd      	mov	sp, r7
    6206:	f85d 7b04 	ldr.w	r7, [sp], #4
    620a:	4770      	bx	lr

0000620c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    620c:	b480      	push	{r7}
    620e:	b083      	sub	sp, #12
    6210:	af00      	add	r7, sp, #0
    6212:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6214:	687b      	ldr	r3, [r7, #4]
    6216:	2201      	movs	r2, #1
    6218:	761a      	strb	r2, [r3, #24]
}
    621a:	bf00      	nop
    621c:	370c      	adds	r7, #12
    621e:	46bd      	mov	sp, r7
    6220:	f85d 7b04 	ldr.w	r7, [sp], #4
    6224:	4770      	bx	lr

00006226 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    6226:	b480      	push	{r7}
    6228:	b083      	sub	sp, #12
    622a:	af00      	add	r7, sp, #0
    622c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    622e:	687b      	ldr	r3, [r7, #4]
    6230:	2202      	movs	r2, #2
    6232:	761a      	strb	r2, [r3, #24]
}
    6234:	bf00      	nop
    6236:	370c      	adds	r7, #12
    6238:	46bd      	mov	sp, r7
    623a:	f85d 7b04 	ldr.w	r7, [sp], #4
    623e:	4770      	bx	lr

00006240 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    6240:	b480      	push	{r7}
    6242:	b083      	sub	sp, #12
    6244:	af00      	add	r7, sp, #0
    6246:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	7e1b      	ldrb	r3, [r3, #24]
    624c:	b2db      	uxtb	r3, r3
}
    624e:	4618      	mov	r0, r3
    6250:	370c      	adds	r7, #12
    6252:	46bd      	mov	sp, r7
    6254:	f85d 7b04 	ldr.w	r7, [sp], #4
    6258:	4770      	bx	lr

0000625a <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    625a:	b480      	push	{r7}
    625c:	b085      	sub	sp, #20
    625e:	af00      	add	r7, sp, #0
    6260:	6078      	str	r0, [r7, #4]
    6262:	460b      	mov	r3, r1
    6264:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    6266:	687b      	ldr	r3, [r7, #4]
    6268:	7e1b      	ldrb	r3, [r3, #24]
    626a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    626c:	7bfa      	ldrb	r2, [r7, #15]
    626e:	78fb      	ldrb	r3, [r7, #3]
    6270:	4013      	ands	r3, r2
    6272:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6274:	7bfb      	ldrb	r3, [r7, #15]
}
    6276:	4618      	mov	r0, r3
    6278:	3714      	adds	r7, #20
    627a:	46bd      	mov	sp, r7
    627c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6280:	4770      	bx	lr

00006282 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6282:	b480      	push	{r7}
    6284:	b083      	sub	sp, #12
    6286:	af00      	add	r7, sp, #0
    6288:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    628a:	687b      	ldr	r3, [r7, #4]
    628c:	7e1b      	ldrb	r3, [r3, #24]
    628e:	b2db      	uxtb	r3, r3
}
    6290:	4618      	mov	r0, r3
    6292:	370c      	adds	r7, #12
    6294:	46bd      	mov	sp, r7
    6296:	f85d 7b04 	ldr.w	r7, [sp], #4
    629a:	4770      	bx	lr

0000629c <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    629c:	b480      	push	{r7}
    629e:	b083      	sub	sp, #12
    62a0:	af00      	add	r7, sp, #0
    62a2:	6078      	str	r0, [r7, #4]
    62a4:	460b      	mov	r3, r1
    62a6:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    62a8:	687b      	ldr	r3, [r7, #4]
    62aa:	78fa      	ldrb	r2, [r7, #3]
    62ac:	761a      	strb	r2, [r3, #24]
}
    62ae:	bf00      	nop
    62b0:	370c      	adds	r7, #12
    62b2:	46bd      	mov	sp, r7
    62b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    62b8:	4770      	bx	lr
	...

000062bc <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    62bc:	b580      	push	{r7, lr}
    62be:	b082      	sub	sp, #8
    62c0:	af00      	add	r7, sp, #0
    62c2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	681b      	ldr	r3, [r3, #0]
    62c8:	f043 0202 	orr.w	r2, r3, #2
    62cc:	687b      	ldr	r3, [r7, #4]
    62ce:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    62d0:	2103      	movs	r1, #3
    62d2:	6878      	ldr	r0, [r7, #4]
    62d4:	4b02      	ldr	r3, [pc, #8]	; (62e0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    62d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62d8:	bf00      	nop
    62da:	3708      	adds	r7, #8
    62dc:	46bd      	mov	sp, r7
    62de:	bd80      	pop	{r7, pc}
    62e0:	00006175 	.word	0x00006175

000062e4 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    62e4:	b580      	push	{r7, lr}
    62e6:	b082      	sub	sp, #8
    62e8:	af00      	add	r7, sp, #0
    62ea:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    62ec:	687b      	ldr	r3, [r7, #4]
    62ee:	681b      	ldr	r3, [r3, #0]
    62f0:	f023 0202 	bic.w	r2, r3, #2
    62f4:	687b      	ldr	r3, [r7, #4]
    62f6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    62f8:	2103      	movs	r1, #3
    62fa:	6878      	ldr	r0, [r7, #4]
    62fc:	4b02      	ldr	r3, [pc, #8]	; (6308 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    62fe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6300:	bf00      	nop
    6302:	3708      	adds	r7, #8
    6304:	46bd      	mov	sp, r7
    6306:	bd80      	pop	{r7, pc}
    6308:	00006175 	.word	0x00006175

0000630c <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    630c:	b480      	push	{r7}
    630e:	b085      	sub	sp, #20
    6310:	af00      	add	r7, sp, #0
    6312:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6314:	687b      	ldr	r3, [r7, #4]
    6316:	681b      	ldr	r3, [r3, #0]
    6318:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    631a:	68fb      	ldr	r3, [r7, #12]
    631c:	0edb      	lsrs	r3, r3, #27
    631e:	f003 0301 	and.w	r3, r3, #1
    6322:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6324:	68fb      	ldr	r3, [r7, #12]
    6326:	2b00      	cmp	r3, #0
    6328:	bf14      	ite	ne
    632a:	2301      	movne	r3, #1
    632c:	2300      	moveq	r3, #0
    632e:	b2db      	uxtb	r3, r3
}
    6330:	4618      	mov	r0, r3
    6332:	3714      	adds	r7, #20
    6334:	46bd      	mov	sp, r7
    6336:	f85d 7b04 	ldr.w	r7, [sp], #4
    633a:	4770      	bx	lr

0000633c <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    633c:	b580      	push	{r7, lr}
    633e:	b084      	sub	sp, #16
    6340:	af00      	add	r7, sp, #0
    6342:	6078      	str	r0, [r7, #4]
    6344:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6346:	2103      	movs	r1, #3
    6348:	6878      	ldr	r0, [r7, #4]
    634a:	4b07      	ldr	r3, [pc, #28]	; (6368 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    634c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	681b      	ldr	r3, [r3, #0]
    6352:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6354:	68fa      	ldr	r2, [r7, #12]
    6356:	683b      	ldr	r3, [r7, #0]
    6358:	4013      	ands	r3, r2
    635a:	60fb      	str	r3, [r7, #12]
	return tmp;
    635c:	68fb      	ldr	r3, [r7, #12]
}
    635e:	4618      	mov	r0, r3
    6360:	3710      	adds	r7, #16
    6362:	46bd      	mov	sp, r7
    6364:	bd80      	pop	{r7, pc}
    6366:	bf00      	nop
    6368:	00006175 	.word	0x00006175

0000636c <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    636c:	b580      	push	{r7, lr}
    636e:	b082      	sub	sp, #8
    6370:	af00      	add	r7, sp, #0
    6372:	6078      	str	r0, [r7, #4]
    6374:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6376:	687b      	ldr	r3, [r7, #4]
    6378:	683a      	ldr	r2, [r7, #0]
    637a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    637c:	2103      	movs	r1, #3
    637e:	6878      	ldr	r0, [r7, #4]
    6380:	4b02      	ldr	r3, [pc, #8]	; (638c <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6382:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6384:	bf00      	nop
    6386:	3708      	adds	r7, #8
    6388:	46bd      	mov	sp, r7
    638a:	bd80      	pop	{r7, pc}
    638c:	00006175 	.word	0x00006175

00006390 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6390:	b580      	push	{r7, lr}
    6392:	b084      	sub	sp, #16
    6394:	af00      	add	r7, sp, #0
    6396:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6398:	2103      	movs	r1, #3
    639a:	6878      	ldr	r0, [r7, #4]
    639c:	4b09      	ldr	r3, [pc, #36]	; (63c4 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    639e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    63a0:	687b      	ldr	r3, [r7, #4]
    63a2:	681b      	ldr	r3, [r3, #0]
    63a4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    63a6:	68fb      	ldr	r3, [r7, #12]
    63a8:	085b      	lsrs	r3, r3, #1
    63aa:	f003 0301 	and.w	r3, r3, #1
    63ae:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    63b0:	68fb      	ldr	r3, [r7, #12]
    63b2:	2b00      	cmp	r3, #0
    63b4:	bf14      	ite	ne
    63b6:	2301      	movne	r3, #1
    63b8:	2300      	moveq	r3, #0
    63ba:	b2db      	uxtb	r3, r3
}
    63bc:	4618      	mov	r0, r3
    63be:	3710      	adds	r7, #16
    63c0:	46bd      	mov	sp, r7
    63c2:	bd80      	pop	{r7, pc}
    63c4:	000061c1 	.word	0x000061c1

000063c8 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    63c8:	b580      	push	{r7, lr}
    63ca:	b082      	sub	sp, #8
    63cc:	af00      	add	r7, sp, #0
    63ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    63d0:	687b      	ldr	r3, [r7, #4]
    63d2:	681b      	ldr	r3, [r3, #0]
    63d4:	f023 0202 	bic.w	r2, r3, #2
    63d8:	687b      	ldr	r3, [r7, #4]
    63da:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    63dc:	2103      	movs	r1, #3
    63de:	6878      	ldr	r0, [r7, #4]
    63e0:	4b02      	ldr	r3, [pc, #8]	; (63ec <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    63e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63e4:	bf00      	nop
    63e6:	3708      	adds	r7, #8
    63e8:	46bd      	mov	sp, r7
    63ea:	bd80      	pop	{r7, pc}
    63ec:	000061c1 	.word	0x000061c1

000063f0 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    63f0:	b580      	push	{r7, lr}
    63f2:	b084      	sub	sp, #16
    63f4:	af00      	add	r7, sp, #0
    63f6:	6078      	str	r0, [r7, #4]
    63f8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    63fa:	2103      	movs	r1, #3
    63fc:	6878      	ldr	r0, [r7, #4]
    63fe:	4b07      	ldr	r3, [pc, #28]	; (641c <hri_sercomspi_get_CTRLA_reg+0x2c>)
    6400:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6402:	687b      	ldr	r3, [r7, #4]
    6404:	681b      	ldr	r3, [r3, #0]
    6406:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6408:	68fa      	ldr	r2, [r7, #12]
    640a:	683b      	ldr	r3, [r7, #0]
    640c:	4013      	ands	r3, r2
    640e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6410:	68fb      	ldr	r3, [r7, #12]
}
    6412:	4618      	mov	r0, r3
    6414:	3710      	adds	r7, #16
    6416:	46bd      	mov	sp, r7
    6418:	bd80      	pop	{r7, pc}
    641a:	bf00      	nop
    641c:	000061c1 	.word	0x000061c1

00006420 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6420:	b580      	push	{r7, lr}
    6422:	b082      	sub	sp, #8
    6424:	af00      	add	r7, sp, #0
    6426:	6078      	str	r0, [r7, #4]
    6428:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    642a:	687b      	ldr	r3, [r7, #4]
    642c:	683a      	ldr	r2, [r7, #0]
    642e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6430:	2103      	movs	r1, #3
    6432:	6878      	ldr	r0, [r7, #4]
    6434:	4b02      	ldr	r3, [pc, #8]	; (6440 <hri_sercomspi_write_CTRLA_reg+0x20>)
    6436:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6438:	bf00      	nop
    643a:	3708      	adds	r7, #8
    643c:	46bd      	mov	sp, r7
    643e:	bd80      	pop	{r7, pc}
    6440:	000061c1 	.word	0x000061c1

00006444 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6444:	b580      	push	{r7, lr}
    6446:	b082      	sub	sp, #8
    6448:	af00      	add	r7, sp, #0
    644a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    644c:	687b      	ldr	r3, [r7, #4]
    644e:	685b      	ldr	r3, [r3, #4]
    6450:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6454:	687b      	ldr	r3, [r7, #4]
    6456:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6458:	2104      	movs	r1, #4
    645a:	6878      	ldr	r0, [r7, #4]
    645c:	4b02      	ldr	r3, [pc, #8]	; (6468 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    645e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6460:	bf00      	nop
    6462:	3708      	adds	r7, #8
    6464:	46bd      	mov	sp, r7
    6466:	bd80      	pop	{r7, pc}
    6468:	00006175 	.word	0x00006175

0000646c <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    646c:	b580      	push	{r7, lr}
    646e:	b082      	sub	sp, #8
    6470:	af00      	add	r7, sp, #0
    6472:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6474:	687b      	ldr	r3, [r7, #4]
    6476:	685b      	ldr	r3, [r3, #4]
    6478:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    647c:	687b      	ldr	r3, [r7, #4]
    647e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6480:	2104      	movs	r1, #4
    6482:	6878      	ldr	r0, [r7, #4]
    6484:	4b02      	ldr	r3, [pc, #8]	; (6490 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6486:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6488:	bf00      	nop
    648a:	3708      	adds	r7, #8
    648c:	46bd      	mov	sp, r7
    648e:	bd80      	pop	{r7, pc}
    6490:	00006175 	.word	0x00006175

00006494 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6494:	b580      	push	{r7, lr}
    6496:	b082      	sub	sp, #8
    6498:	af00      	add	r7, sp, #0
    649a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    649c:	687b      	ldr	r3, [r7, #4]
    649e:	685b      	ldr	r3, [r3, #4]
    64a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    64a4:	687b      	ldr	r3, [r7, #4]
    64a6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    64a8:	2104      	movs	r1, #4
    64aa:	6878      	ldr	r0, [r7, #4]
    64ac:	4b02      	ldr	r3, [pc, #8]	; (64b8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    64ae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64b0:	bf00      	nop
    64b2:	3708      	adds	r7, #8
    64b4:	46bd      	mov	sp, r7
    64b6:	bd80      	pop	{r7, pc}
    64b8:	00006175 	.word	0x00006175

000064bc <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    64bc:	b580      	push	{r7, lr}
    64be:	b082      	sub	sp, #8
    64c0:	af00      	add	r7, sp, #0
    64c2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    64c4:	687b      	ldr	r3, [r7, #4]
    64c6:	685b      	ldr	r3, [r3, #4]
    64c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    64cc:	687b      	ldr	r3, [r7, #4]
    64ce:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    64d0:	2104      	movs	r1, #4
    64d2:	6878      	ldr	r0, [r7, #4]
    64d4:	4b02      	ldr	r3, [pc, #8]	; (64e0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    64d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64d8:	bf00      	nop
    64da:	3708      	adds	r7, #8
    64dc:	46bd      	mov	sp, r7
    64de:	bd80      	pop	{r7, pc}
    64e0:	00006175 	.word	0x00006175

000064e4 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    64e4:	b580      	push	{r7, lr}
    64e6:	b082      	sub	sp, #8
    64e8:	af00      	add	r7, sp, #0
    64ea:	6078      	str	r0, [r7, #4]
    64ec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    64ee:	687b      	ldr	r3, [r7, #4]
    64f0:	685a      	ldr	r2, [r3, #4]
    64f2:	683b      	ldr	r3, [r7, #0]
    64f4:	041b      	lsls	r3, r3, #16
    64f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    64fa:	431a      	orrs	r2, r3
    64fc:	687b      	ldr	r3, [r7, #4]
    64fe:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6500:	2104      	movs	r1, #4
    6502:	6878      	ldr	r0, [r7, #4]
    6504:	4b02      	ldr	r3, [pc, #8]	; (6510 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    6506:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6508:	bf00      	nop
    650a:	3708      	adds	r7, #8
    650c:	46bd      	mov	sp, r7
    650e:	bd80      	pop	{r7, pc}
    6510:	00006175 	.word	0x00006175

00006514 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6514:	b580      	push	{r7, lr}
    6516:	b082      	sub	sp, #8
    6518:	af00      	add	r7, sp, #0
    651a:	6078      	str	r0, [r7, #4]
    651c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    651e:	687b      	ldr	r3, [r7, #4]
    6520:	683a      	ldr	r2, [r7, #0]
    6522:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6524:	2104      	movs	r1, #4
    6526:	6878      	ldr	r0, [r7, #4]
    6528:	4b02      	ldr	r3, [pc, #8]	; (6534 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    652a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    652c:	bf00      	nop
    652e:	3708      	adds	r7, #8
    6530:	46bd      	mov	sp, r7
    6532:	bd80      	pop	{r7, pc}
    6534:	00006175 	.word	0x00006175

00006538 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6538:	b580      	push	{r7, lr}
    653a:	b082      	sub	sp, #8
    653c:	af00      	add	r7, sp, #0
    653e:	6078      	str	r0, [r7, #4]
    6540:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6542:	687b      	ldr	r3, [r7, #4]
    6544:	683a      	ldr	r2, [r7, #0]
    6546:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6548:	2117      	movs	r1, #23
    654a:	6878      	ldr	r0, [r7, #4]
    654c:	4b02      	ldr	r3, [pc, #8]	; (6558 <hri_sercomspi_write_CTRLB_reg+0x20>)
    654e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6550:	bf00      	nop
    6552:	3708      	adds	r7, #8
    6554:	46bd      	mov	sp, r7
    6556:	bd80      	pop	{r7, pc}
    6558:	000061c1 	.word	0x000061c1

0000655c <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    655c:	b480      	push	{r7}
    655e:	b083      	sub	sp, #12
    6560:	af00      	add	r7, sp, #0
    6562:	6078      	str	r0, [r7, #4]
    6564:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6566:	687b      	ldr	r3, [r7, #4]
    6568:	683a      	ldr	r2, [r7, #0]
    656a:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    656c:	bf00      	nop
    656e:	370c      	adds	r7, #12
    6570:	46bd      	mov	sp, r7
    6572:	f85d 7b04 	ldr.w	r7, [sp], #4
    6576:	4770      	bx	lr

00006578 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6578:	b480      	push	{r7}
    657a:	b083      	sub	sp, #12
    657c:	af00      	add	r7, sp, #0
    657e:	6078      	str	r0, [r7, #4]
    6580:	460b      	mov	r3, r1
    6582:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6584:	687b      	ldr	r3, [r7, #4]
    6586:	78fa      	ldrb	r2, [r7, #3]
    6588:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    658a:	bf00      	nop
    658c:	370c      	adds	r7, #12
    658e:	46bd      	mov	sp, r7
    6590:	f85d 7b04 	ldr.w	r7, [sp], #4
    6594:	4770      	bx	lr
	...

00006598 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6598:	b580      	push	{r7, lr}
    659a:	b084      	sub	sp, #16
    659c:	af00      	add	r7, sp, #0
    659e:	6078      	str	r0, [r7, #4]
    65a0:	460b      	mov	r3, r1
    65a2:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    65a4:	687b      	ldr	r3, [r7, #4]
    65a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    65a8:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    65aa:	68fb      	ldr	r3, [r7, #12]
    65ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    65b0:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    65b2:	78fb      	ldrb	r3, [r7, #3]
    65b4:	039b      	lsls	r3, r3, #14
    65b6:	461a      	mov	r2, r3
    65b8:	68fb      	ldr	r3, [r7, #12]
    65ba:	4313      	orrs	r3, r2
    65bc:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    65be:	687b      	ldr	r3, [r7, #4]
    65c0:	68fa      	ldr	r2, [r7, #12]
    65c2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    65c4:	2104      	movs	r1, #4
    65c6:	6878      	ldr	r0, [r7, #4]
    65c8:	4b02      	ldr	r3, [pc, #8]	; (65d4 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    65ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65cc:	bf00      	nop
    65ce:	3710      	adds	r7, #16
    65d0:	46bd      	mov	sp, r7
    65d2:	bd80      	pop	{r7, pc}
    65d4:	00006175 	.word	0x00006175

000065d8 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    65d8:	b580      	push	{r7, lr}
    65da:	b082      	sub	sp, #8
    65dc:	af00      	add	r7, sp, #0
    65de:	6078      	str	r0, [r7, #4]
    65e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    65e2:	687b      	ldr	r3, [r7, #4]
    65e4:	683a      	ldr	r2, [r7, #0]
    65e6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    65e8:	2104      	movs	r1, #4
    65ea:	6878      	ldr	r0, [r7, #4]
    65ec:	4b02      	ldr	r3, [pc, #8]	; (65f8 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    65ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65f0:	bf00      	nop
    65f2:	3708      	adds	r7, #8
    65f4:	46bd      	mov	sp, r7
    65f6:	bd80      	pop	{r7, pc}
    65f8:	00006175 	.word	0x00006175

000065fc <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    65fc:	b580      	push	{r7, lr}
    65fe:	b082      	sub	sp, #8
    6600:	af00      	add	r7, sp, #0
    6602:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6604:	2104      	movs	r1, #4
    6606:	6878      	ldr	r0, [r7, #4]
    6608:	4b03      	ldr	r3, [pc, #12]	; (6618 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    660a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    660c:	687b      	ldr	r3, [r7, #4]
    660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6610:	4618      	mov	r0, r3
    6612:	3708      	adds	r7, #8
    6614:	46bd      	mov	sp, r7
    6616:	bd80      	pop	{r7, pc}
    6618:	00006175 	.word	0x00006175

0000661c <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    661c:	b480      	push	{r7}
    661e:	b083      	sub	sp, #12
    6620:	af00      	add	r7, sp, #0
    6622:	6078      	str	r0, [r7, #4]
    6624:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6626:	687b      	ldr	r3, [r7, #4]
    6628:	683a      	ldr	r2, [r7, #0]
    662a:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    662c:	bf00      	nop
    662e:	370c      	adds	r7, #12
    6630:	46bd      	mov	sp, r7
    6632:	f85d 7b04 	ldr.w	r7, [sp], #4
    6636:	4770      	bx	lr

00006638 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6638:	b580      	push	{r7, lr}
    663a:	b082      	sub	sp, #8
    663c:	af00      	add	r7, sp, #0
    663e:	6078      	str	r0, [r7, #4]
    6640:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6642:	687b      	ldr	r3, [r7, #4]
    6644:	683a      	ldr	r2, [r7, #0]
    6646:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6648:	2104      	movs	r1, #4
    664a:	6878      	ldr	r0, [r7, #4]
    664c:	4b02      	ldr	r3, [pc, #8]	; (6658 <hri_sercomi2cm_write_DATA_reg+0x20>)
    664e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6650:	bf00      	nop
    6652:	3708      	adds	r7, #8
    6654:	46bd      	mov	sp, r7
    6656:	bd80      	pop	{r7, pc}
    6658:	00006175 	.word	0x00006175

0000665c <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    665c:	b580      	push	{r7, lr}
    665e:	b082      	sub	sp, #8
    6660:	af00      	add	r7, sp, #0
    6662:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6664:	2104      	movs	r1, #4
    6666:	6878      	ldr	r0, [r7, #4]
    6668:	4b03      	ldr	r3, [pc, #12]	; (6678 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    666a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    666c:	687b      	ldr	r3, [r7, #4]
    666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6670:	4618      	mov	r0, r3
    6672:	3708      	adds	r7, #8
    6674:	46bd      	mov	sp, r7
    6676:	bd80      	pop	{r7, pc}
    6678:	00006175 	.word	0x00006175

0000667c <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    667c:	b480      	push	{r7}
    667e:	b083      	sub	sp, #12
    6680:	af00      	add	r7, sp, #0
    6682:	6078      	str	r0, [r7, #4]
    6684:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6686:	687b      	ldr	r3, [r7, #4]
    6688:	683a      	ldr	r2, [r7, #0]
    668a:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    668c:	bf00      	nop
    668e:	370c      	adds	r7, #12
    6690:	46bd      	mov	sp, r7
    6692:	f85d 7b04 	ldr.w	r7, [sp], #4
    6696:	4770      	bx	lr

00006698 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6698:	b480      	push	{r7}
    669a:	b083      	sub	sp, #12
    669c:	af00      	add	r7, sp, #0
    669e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    66a0:	687b      	ldr	r3, [r7, #4]
    66a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    66a4:	4618      	mov	r0, r3
    66a6:	370c      	adds	r7, #12
    66a8:	46bd      	mov	sp, r7
    66aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    66ae:	4770      	bx	lr

000066b0 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    66b0:	b480      	push	{r7}
    66b2:	b083      	sub	sp, #12
    66b4:	af00      	add	r7, sp, #0
    66b6:	6078      	str	r0, [r7, #4]
    66b8:	460b      	mov	r3, r1
    66ba:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    66bc:	687b      	ldr	r3, [r7, #4]
    66be:	78fa      	ldrb	r2, [r7, #3]
    66c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66c4:	bf00      	nop
    66c6:	370c      	adds	r7, #12
    66c8:	46bd      	mov	sp, r7
    66ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    66ce:	4770      	bx	lr

000066d0 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    66d0:	b480      	push	{r7}
    66d2:	b083      	sub	sp, #12
    66d4:	af00      	add	r7, sp, #0
    66d6:	6078      	str	r0, [r7, #4]
    66d8:	460b      	mov	r3, r1
    66da:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    66dc:	687b      	ldr	r3, [r7, #4]
    66de:	887a      	ldrh	r2, [r7, #2]
    66e0:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66e2:	bf00      	nop
    66e4:	370c      	adds	r7, #12
    66e6:	46bd      	mov	sp, r7
    66e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    66ec:	4770      	bx	lr
	...

000066f0 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    66f0:	b580      	push	{r7, lr}
    66f2:	b082      	sub	sp, #8
    66f4:	af00      	add	r7, sp, #0
    66f6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    66f8:	2104      	movs	r1, #4
    66fa:	6878      	ldr	r0, [r7, #4]
    66fc:	4b06      	ldr	r3, [pc, #24]	; (6718 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    66fe:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6700:	687b      	ldr	r3, [r7, #4]
    6702:	8b5b      	ldrh	r3, [r3, #26]
    6704:	b29b      	uxth	r3, r3
    6706:	091b      	lsrs	r3, r3, #4
    6708:	b29b      	uxth	r3, r3
    670a:	f003 0303 	and.w	r3, r3, #3
    670e:	b29b      	uxth	r3, r3
}
    6710:	4618      	mov	r0, r3
    6712:	3708      	adds	r7, #8
    6714:	46bd      	mov	sp, r7
    6716:	bd80      	pop	{r7, pc}
    6718:	00006175 	.word	0x00006175

0000671c <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    671c:	b580      	push	{r7, lr}
    671e:	b082      	sub	sp, #8
    6720:	af00      	add	r7, sp, #0
    6722:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6724:	2104      	movs	r1, #4
    6726:	6878      	ldr	r0, [r7, #4]
    6728:	4b04      	ldr	r3, [pc, #16]	; (673c <hri_sercomi2cm_read_STATUS_reg+0x20>)
    672a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    672c:	687b      	ldr	r3, [r7, #4]
    672e:	8b5b      	ldrh	r3, [r3, #26]
    6730:	b29b      	uxth	r3, r3
}
    6732:	4618      	mov	r0, r3
    6734:	3708      	adds	r7, #8
    6736:	46bd      	mov	sp, r7
    6738:	bd80      	pop	{r7, pc}
    673a:	bf00      	nop
    673c:	00006175 	.word	0x00006175

00006740 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6740:	b580      	push	{r7, lr}
    6742:	b082      	sub	sp, #8
    6744:	af00      	add	r7, sp, #0
    6746:	6078      	str	r0, [r7, #4]
    6748:	460b      	mov	r3, r1
    674a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	887a      	ldrh	r2, [r7, #2]
    6750:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6752:	2104      	movs	r1, #4
    6754:	6878      	ldr	r0, [r7, #4]
    6756:	4b03      	ldr	r3, [pc, #12]	; (6764 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6758:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    675a:	bf00      	nop
    675c:	3708      	adds	r7, #8
    675e:	46bd      	mov	sp, r7
    6760:	bd80      	pop	{r7, pc}
    6762:	bf00      	nop
    6764:	00006175 	.word	0x00006175

00006768 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6768:	b4b0      	push	{r4, r5, r7}
    676a:	b08d      	sub	sp, #52	; 0x34
    676c:	af00      	add	r7, sp, #0
    676e:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6770:	4b13      	ldr	r3, [pc, #76]	; (67c0 <_sercom_get_hardware_index+0x58>)
    6772:	f107 040c 	add.w	r4, r7, #12
    6776:	461d      	mov	r5, r3
    6778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    677a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    677c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6784:	2300      	movs	r3, #0
    6786:	62fb      	str	r3, [r7, #44]	; 0x2c
    6788:	e010      	b.n	67ac <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    678c:	009b      	lsls	r3, r3, #2
    678e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6792:	4413      	add	r3, r2
    6794:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6798:	461a      	mov	r2, r3
    679a:	687b      	ldr	r3, [r7, #4]
    679c:	429a      	cmp	r2, r3
    679e:	d102      	bne.n	67a6 <_sercom_get_hardware_index+0x3e>
			return i;
    67a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    67a2:	b2db      	uxtb	r3, r3
    67a4:	e006      	b.n	67b4 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    67a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    67a8:	3301      	adds	r3, #1
    67aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    67ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    67ae:	2b07      	cmp	r3, #7
    67b0:	d9eb      	bls.n	678a <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    67b2:	2300      	movs	r3, #0
}
    67b4:	4618      	mov	r0, r3
    67b6:	3734      	adds	r7, #52	; 0x34
    67b8:	46bd      	mov	sp, r7
    67ba:	bcb0      	pop	{r4, r5, r7}
    67bc:	4770      	bx	lr
    67be:	bf00      	nop
    67c0:	00010a1c 	.word	0x00010a1c

000067c4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    67c4:	b580      	push	{r7, lr}
    67c6:	b084      	sub	sp, #16
    67c8:	af00      	add	r7, sp, #0
    67ca:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    67cc:	6878      	ldr	r0, [r7, #4]
    67ce:	4b13      	ldr	r3, [pc, #76]	; (681c <_get_i2cm_index+0x58>)
    67d0:	4798      	blx	r3
    67d2:	4603      	mov	r3, r0
    67d4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    67d6:	2300      	movs	r3, #0
    67d8:	73fb      	strb	r3, [r7, #15]
    67da:	e010      	b.n	67fe <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    67dc:	7bfa      	ldrb	r2, [r7, #15]
    67de:	4910      	ldr	r1, [pc, #64]	; (6820 <_get_i2cm_index+0x5c>)
    67e0:	4613      	mov	r3, r2
    67e2:	005b      	lsls	r3, r3, #1
    67e4:	4413      	add	r3, r2
    67e6:	00db      	lsls	r3, r3, #3
    67e8:	440b      	add	r3, r1
    67ea:	781b      	ldrb	r3, [r3, #0]
    67ec:	7bba      	ldrb	r2, [r7, #14]
    67ee:	429a      	cmp	r2, r3
    67f0:	d102      	bne.n	67f8 <_get_i2cm_index+0x34>
			return i;
    67f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    67f6:	e00d      	b.n	6814 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    67f8:	7bfb      	ldrb	r3, [r7, #15]
    67fa:	3301      	adds	r3, #1
    67fc:	73fb      	strb	r3, [r7, #15]
    67fe:	7bfb      	ldrb	r3, [r7, #15]
    6800:	2b02      	cmp	r3, #2
    6802:	d9eb      	bls.n	67dc <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6804:	f240 32a6 	movw	r2, #934	; 0x3a6
    6808:	4906      	ldr	r1, [pc, #24]	; (6824 <_get_i2cm_index+0x60>)
    680a:	2000      	movs	r0, #0
    680c:	4b06      	ldr	r3, [pc, #24]	; (6828 <_get_i2cm_index+0x64>)
    680e:	4798      	blx	r3
	return -1;
    6810:	f04f 33ff 	mov.w	r3, #4294967295
}
    6814:	4618      	mov	r0, r3
    6816:	3710      	adds	r7, #16
    6818:	46bd      	mov	sp, r7
    681a:	bd80      	pop	{r7, pc}
    681c:	00006769 	.word	0x00006769
    6820:	20000018 	.word	0x20000018
    6824:	00010a00 	.word	0x00010a00
    6828:	00003b01 	.word	0x00003b01

0000682c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    682c:	b580      	push	{r7, lr}
    682e:	b082      	sub	sp, #8
    6830:	af00      	add	r7, sp, #0
    6832:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6834:	2103      	movs	r1, #3
    6836:	6878      	ldr	r0, [r7, #4]
    6838:	4b02      	ldr	r3, [pc, #8]	; (6844 <_sercom_i2c_send_stop+0x18>)
    683a:	4798      	blx	r3
}
    683c:	bf00      	nop
    683e:	3708      	adds	r7, #8
    6840:	46bd      	mov	sp, r7
    6842:	bd80      	pop	{r7, pc}
    6844:	000064e5 	.word	0x000064e5

00006848 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6848:	b590      	push	{r4, r7, lr}
    684a:	b087      	sub	sp, #28
    684c:	af00      	add	r7, sp, #0
    684e:	60f8      	str	r0, [r7, #12]
    6850:	60b9      	str	r1, [r7, #8]
    6852:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6854:	68f8      	ldr	r0, [r7, #12]
    6856:	4b7d      	ldr	r3, [pc, #500]	; (6a4c <_sercom_i2c_sync_analyse_flags+0x204>)
    6858:	4798      	blx	r3
    685a:	4603      	mov	r3, r0
    685c:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    685e:	68f8      	ldr	r0, [r7, #12]
    6860:	4b7b      	ldr	r3, [pc, #492]	; (6a50 <_sercom_i2c_sync_analyse_flags+0x208>)
    6862:	4798      	blx	r3
    6864:	4603      	mov	r3, r0
    6866:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6868:	68bb      	ldr	r3, [r7, #8]
    686a:	f003 0301 	and.w	r3, r3, #1
    686e:	2b00      	cmp	r3, #0
    6870:	f000 8095 	beq.w	699e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6874:	8a7b      	ldrh	r3, [r7, #18]
    6876:	f003 0302 	and.w	r3, r3, #2
    687a:	2b00      	cmp	r3, #0
    687c:	d01d      	beq.n	68ba <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    687e:	68f8      	ldr	r0, [r7, #12]
    6880:	4b74      	ldr	r3, [pc, #464]	; (6a54 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6882:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6884:	687b      	ldr	r3, [r7, #4]
    6886:	885b      	ldrh	r3, [r3, #2]
    6888:	b29b      	uxth	r3, r3
    688a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    688e:	b29a      	uxth	r2, r3
    6890:	687b      	ldr	r3, [r7, #4]
    6892:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6894:	687b      	ldr	r3, [r7, #4]
    6896:	885b      	ldrh	r3, [r3, #2]
    6898:	b29b      	uxth	r3, r3
    689a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    689e:	b29a      	uxth	r2, r3
    68a0:	687b      	ldr	r3, [r7, #4]
    68a2:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    68a4:	8a7b      	ldrh	r3, [r7, #18]
    68a6:	f003 0301 	and.w	r3, r3, #1
    68aa:	2b00      	cmp	r3, #0
    68ac:	d002      	beq.n	68b4 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    68ae:	f06f 0304 	mvn.w	r3, #4
    68b2:	e0c6      	b.n	6a42 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    68b4:	f06f 0303 	mvn.w	r3, #3
    68b8:	e0c3      	b.n	6a42 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    68ba:	8a7b      	ldrh	r3, [r7, #18]
    68bc:	f003 0304 	and.w	r3, r3, #4
    68c0:	2b00      	cmp	r3, #0
    68c2:	d01f      	beq.n	6904 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    68c4:	687b      	ldr	r3, [r7, #4]
    68c6:	685b      	ldr	r3, [r3, #4]
    68c8:	2b00      	cmp	r3, #0
    68ca:	dd07      	ble.n	68dc <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    68cc:	687b      	ldr	r3, [r7, #4]
    68ce:	885b      	ldrh	r3, [r3, #2]
    68d0:	b29b      	uxth	r3, r3
    68d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    68d6:	b29a      	uxth	r2, r3
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	885b      	ldrh	r3, [r3, #2]
    68e0:	b29b      	uxth	r3, r3
    68e2:	b21b      	sxth	r3, r3
    68e4:	2b00      	cmp	r3, #0
    68e6:	da02      	bge.n	68ee <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    68e8:	68f8      	ldr	r0, [r7, #12]
    68ea:	4b5b      	ldr	r3, [pc, #364]	; (6a58 <_sercom_i2c_sync_analyse_flags+0x210>)
    68ec:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    68ee:	687b      	ldr	r3, [r7, #4]
    68f0:	885b      	ldrh	r3, [r3, #2]
    68f2:	b29b      	uxth	r3, r3
    68f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    68f8:	b29a      	uxth	r2, r3
    68fa:	687b      	ldr	r3, [r7, #4]
    68fc:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    68fe:	f06f 0301 	mvn.w	r3, #1
    6902:	e09e      	b.n	6a42 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6904:	687b      	ldr	r3, [r7, #4]
    6906:	885b      	ldrh	r3, [r3, #2]
    6908:	b29b      	uxth	r3, r3
    690a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    690e:	2b00      	cmp	r3, #0
    6910:	d01c      	beq.n	694c <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6912:	687b      	ldr	r3, [r7, #4]
    6914:	881b      	ldrh	r3, [r3, #0]
    6916:	121b      	asrs	r3, r3, #8
    6918:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    691a:	f003 0406 	and.w	r4, r3, #6
    691e:	68f8      	ldr	r0, [r7, #12]
    6920:	4b4e      	ldr	r3, [pc, #312]	; (6a5c <_sercom_i2c_sync_analyse_flags+0x214>)
    6922:	4798      	blx	r3
    6924:	4603      	mov	r3, r0
    6926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    692a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    692c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6930:	4619      	mov	r1, r3
    6932:	68f8      	ldr	r0, [r7, #12]
    6934:	4b4a      	ldr	r3, [pc, #296]	; (6a60 <_sercom_i2c_sync_analyse_flags+0x218>)
    6936:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6938:	687b      	ldr	r3, [r7, #4]
    693a:	885b      	ldrh	r3, [r3, #2]
    693c:	b29b      	uxth	r3, r3
    693e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6942:	b29a      	uxth	r2, r3
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6948:	2300      	movs	r3, #0
    694a:	e07a      	b.n	6a42 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    694c:	687b      	ldr	r3, [r7, #4]
    694e:	685b      	ldr	r3, [r3, #4]
    6950:	2b00      	cmp	r3, #0
    6952:	d111      	bne.n	6978 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6954:	687b      	ldr	r3, [r7, #4]
    6956:	885b      	ldrh	r3, [r3, #2]
    6958:	b29b      	uxth	r3, r3
    695a:	b21b      	sxth	r3, r3
    695c:	2b00      	cmp	r3, #0
    695e:	da02      	bge.n	6966 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6960:	68f8      	ldr	r0, [r7, #12]
    6962:	4b3d      	ldr	r3, [pc, #244]	; (6a58 <_sercom_i2c_sync_analyse_flags+0x210>)
    6964:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6966:	687b      	ldr	r3, [r7, #4]
    6968:	885b      	ldrh	r3, [r3, #2]
    696a:	b29b      	uxth	r3, r3
    696c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6970:	b29a      	uxth	r2, r3
    6972:	687b      	ldr	r3, [r7, #4]
    6974:	805a      	strh	r2, [r3, #2]
    6976:	e010      	b.n	699a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6978:	687b      	ldr	r3, [r7, #4]
    697a:	689b      	ldr	r3, [r3, #8]
    697c:	781b      	ldrb	r3, [r3, #0]
    697e:	4619      	mov	r1, r3
    6980:	68f8      	ldr	r0, [r7, #12]
    6982:	4b38      	ldr	r3, [pc, #224]	; (6a64 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6984:	4798      	blx	r3
				msg->buffer++;
    6986:	687b      	ldr	r3, [r7, #4]
    6988:	689b      	ldr	r3, [r3, #8]
    698a:	1c5a      	adds	r2, r3, #1
    698c:	687b      	ldr	r3, [r7, #4]
    698e:	609a      	str	r2, [r3, #8]
				msg->len--;
    6990:	687b      	ldr	r3, [r7, #4]
    6992:	685b      	ldr	r3, [r3, #4]
    6994:	1e5a      	subs	r2, r3, #1
    6996:	687b      	ldr	r3, [r7, #4]
    6998:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    699a:	2300      	movs	r3, #0
    699c:	e051      	b.n	6a42 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    699e:	68bb      	ldr	r3, [r7, #8]
    69a0:	f003 0302 	and.w	r3, r3, #2
    69a4:	2b00      	cmp	r3, #0
    69a6:	d04b      	beq.n	6a40 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	685b      	ldr	r3, [r3, #4]
    69ac:	2b00      	cmp	r3, #0
    69ae:	d041      	beq.n	6a34 <_sercom_i2c_sync_analyse_flags+0x1ec>
    69b0:	8a7b      	ldrh	r3, [r7, #18]
    69b2:	f003 0304 	and.w	r3, r3, #4
    69b6:	2b00      	cmp	r3, #0
    69b8:	d13c      	bne.n	6a34 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    69ba:	687b      	ldr	r3, [r7, #4]
    69bc:	685b      	ldr	r3, [r3, #4]
    69be:	1e5a      	subs	r2, r3, #1
    69c0:	687b      	ldr	r3, [r7, #4]
    69c2:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    69c4:	687b      	ldr	r3, [r7, #4]
    69c6:	685b      	ldr	r3, [r3, #4]
    69c8:	2b00      	cmp	r3, #0
    69ca:	d102      	bne.n	69d2 <_sercom_i2c_sync_analyse_flags+0x18a>
    69cc:	697b      	ldr	r3, [r7, #20]
    69ce:	2b00      	cmp	r3, #0
    69d0:	d006      	beq.n	69e0 <_sercom_i2c_sync_analyse_flags+0x198>
    69d2:	687b      	ldr	r3, [r7, #4]
    69d4:	685b      	ldr	r3, [r3, #4]
    69d6:	2b01      	cmp	r3, #1
    69d8:	d105      	bne.n	69e6 <_sercom_i2c_sync_analyse_flags+0x19e>
    69da:	697b      	ldr	r3, [r7, #20]
    69dc:	2b00      	cmp	r3, #0
    69de:	d002      	beq.n	69e6 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    69e0:	68f8      	ldr	r0, [r7, #12]
    69e2:	4b21      	ldr	r3, [pc, #132]	; (6a68 <_sercom_i2c_sync_analyse_flags+0x220>)
    69e4:	4798      	blx	r3
			}

			if (msg->len == 0) {
    69e6:	687b      	ldr	r3, [r7, #4]
    69e8:	685b      	ldr	r3, [r3, #4]
    69ea:	2b00      	cmp	r3, #0
    69ec:	d113      	bne.n	6a16 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    69ee:	687b      	ldr	r3, [r7, #4]
    69f0:	885b      	ldrh	r3, [r3, #2]
    69f2:	b29b      	uxth	r3, r3
    69f4:	b21b      	sxth	r3, r3
    69f6:	2b00      	cmp	r3, #0
    69f8:	da05      	bge.n	6a06 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    69fa:	68f8      	ldr	r0, [r7, #12]
    69fc:	4b1b      	ldr	r3, [pc, #108]	; (6a6c <_sercom_i2c_sync_analyse_flags+0x224>)
    69fe:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6a00:	68f8      	ldr	r0, [r7, #12]
    6a02:	4b15      	ldr	r3, [pc, #84]	; (6a58 <_sercom_i2c_sync_analyse_flags+0x210>)
    6a04:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6a06:	687b      	ldr	r3, [r7, #4]
    6a08:	885b      	ldrh	r3, [r3, #2]
    6a0a:	b29b      	uxth	r3, r3
    6a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a10:	b29a      	uxth	r2, r3
    6a12:	687b      	ldr	r3, [r7, #4]
    6a14:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6a16:	687b      	ldr	r3, [r7, #4]
    6a18:	689c      	ldr	r4, [r3, #8]
    6a1a:	1c62      	adds	r2, r4, #1
    6a1c:	687b      	ldr	r3, [r7, #4]
    6a1e:	609a      	str	r2, [r3, #8]
    6a20:	68f8      	ldr	r0, [r7, #12]
    6a22:	4b13      	ldr	r3, [pc, #76]	; (6a70 <_sercom_i2c_sync_analyse_flags+0x228>)
    6a24:	4798      	blx	r3
    6a26:	4603      	mov	r3, r0
    6a28:	b2db      	uxtb	r3, r3
    6a2a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6a2c:	68f8      	ldr	r0, [r7, #12]
    6a2e:	4b11      	ldr	r3, [pc, #68]	; (6a74 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6a30:	4798      	blx	r3
    6a32:	e005      	b.n	6a40 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6a34:	68f8      	ldr	r0, [r7, #12]
    6a36:	4b0f      	ldr	r3, [pc, #60]	; (6a74 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6a38:	4798      	blx	r3
			return I2C_NACK;
    6a3a:	f06f 0301 	mvn.w	r3, #1
    6a3e:	e000      	b.n	6a42 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6a40:	2300      	movs	r3, #0
}
    6a42:	4618      	mov	r0, r3
    6a44:	371c      	adds	r7, #28
    6a46:	46bd      	mov	sp, r7
    6a48:	bd90      	pop	{r4, r7, pc}
    6a4a:	bf00      	nop
    6a4c:	0000630d 	.word	0x0000630d
    6a50:	0000671d 	.word	0x0000671d
    6a54:	0000620d 	.word	0x0000620d
    6a58:	0000682d 	.word	0x0000682d
    6a5c:	000065fd 	.word	0x000065fd
    6a60:	000065d9 	.word	0x000065d9
    6a64:	00006639 	.word	0x00006639
    6a68:	00006495 	.word	0x00006495
    6a6c:	0000646d 	.word	0x0000646d
    6a70:	0000665d 	.word	0x0000665d
    6a74:	00006227 	.word	0x00006227

00006a78 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6a78:	b580      	push	{r7, lr}
    6a7a:	b082      	sub	sp, #8
    6a7c:	af00      	add	r7, sp, #0
    6a7e:	6078      	str	r0, [r7, #4]
    6a80:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6a82:	687b      	ldr	r3, [r7, #4]
    6a84:	2b00      	cmp	r3, #0
    6a86:	bf14      	ite	ne
    6a88:	2301      	movne	r3, #1
    6a8a:	2300      	moveq	r3, #0
    6a8c:	b2db      	uxtb	r3, r3
    6a8e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6a92:	4908      	ldr	r1, [pc, #32]	; (6ab4 <_i2c_m_sync_init+0x3c>)
    6a94:	4618      	mov	r0, r3
    6a96:	4b08      	ldr	r3, [pc, #32]	; (6ab8 <_i2c_m_sync_init+0x40>)
    6a98:	4798      	blx	r3

	i2c_dev->hw = hw;
    6a9a:	687b      	ldr	r3, [r7, #4]
    6a9c:	683a      	ldr	r2, [r7, #0]
    6a9e:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6aa0:	687b      	ldr	r3, [r7, #4]
    6aa2:	6839      	ldr	r1, [r7, #0]
    6aa4:	4618      	mov	r0, r3
    6aa6:	4b05      	ldr	r3, [pc, #20]	; (6abc <_i2c_m_sync_init+0x44>)
    6aa8:	4798      	blx	r3
    6aaa:	4603      	mov	r3, r0
}
    6aac:	4618      	mov	r0, r3
    6aae:	3708      	adds	r7, #8
    6ab0:	46bd      	mov	sp, r7
    6ab2:	bd80      	pop	{r7, pc}
    6ab4:	00010a00 	.word	0x00010a00
    6ab8:	00003b01 	.word	0x00003b01
    6abc:	00006e91 	.word	0x00006e91

00006ac0 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6ac0:	b580      	push	{r7, lr}
    6ac2:	b082      	sub	sp, #8
    6ac4:	af00      	add	r7, sp, #0
    6ac6:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6ac8:	687b      	ldr	r3, [r7, #4]
    6aca:	2b00      	cmp	r3, #0
    6acc:	bf14      	ite	ne
    6ace:	2301      	movne	r3, #1
    6ad0:	2300      	moveq	r3, #0
    6ad2:	b2db      	uxtb	r3, r3
    6ad4:	f240 5235 	movw	r2, #1333	; 0x535
    6ad8:	4906      	ldr	r1, [pc, #24]	; (6af4 <_i2c_m_sync_enable+0x34>)
    6ada:	4618      	mov	r0, r3
    6adc:	4b06      	ldr	r3, [pc, #24]	; (6af8 <_i2c_m_sync_enable+0x38>)
    6ade:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6ae0:	687b      	ldr	r3, [r7, #4]
    6ae2:	691b      	ldr	r3, [r3, #16]
    6ae4:	4618      	mov	r0, r3
    6ae6:	4b05      	ldr	r3, [pc, #20]	; (6afc <_i2c_m_sync_enable+0x3c>)
    6ae8:	4798      	blx	r3
    6aea:	4603      	mov	r3, r0
}
    6aec:	4618      	mov	r0, r3
    6aee:	3708      	adds	r7, #8
    6af0:	46bd      	mov	sp, r7
    6af2:	bd80      	pop	{r7, pc}
    6af4:	00010a00 	.word	0x00010a00
    6af8:	00003b01 	.word	0x00003b01
    6afc:	00006e05 	.word	0x00006e05

00006b00 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    6b00:	b580      	push	{r7, lr}
    6b02:	b084      	sub	sp, #16
    6b04:	af00      	add	r7, sp, #0
    6b06:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    6b08:	687b      	ldr	r3, [r7, #4]
    6b0a:	691b      	ldr	r3, [r3, #16]
    6b0c:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6b0e:	687b      	ldr	r3, [r7, #4]
    6b10:	2b00      	cmp	r3, #0
    6b12:	bf14      	ite	ne
    6b14:	2301      	movne	r3, #1
    6b16:	2300      	moveq	r3, #0
    6b18:	b2db      	uxtb	r3, r3
    6b1a:	f240 5243 	movw	r2, #1347	; 0x543
    6b1e:	490c      	ldr	r1, [pc, #48]	; (6b50 <_i2c_m_sync_disable+0x50>)
    6b20:	4618      	mov	r0, r3
    6b22:	4b0c      	ldr	r3, [pc, #48]	; (6b54 <_i2c_m_sync_disable+0x54>)
    6b24:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6b26:	687b      	ldr	r3, [r7, #4]
    6b28:	691b      	ldr	r3, [r3, #16]
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	bf14      	ite	ne
    6b2e:	2301      	movne	r3, #1
    6b30:	2300      	moveq	r3, #0
    6b32:	b2db      	uxtb	r3, r3
    6b34:	f240 5244 	movw	r2, #1348	; 0x544
    6b38:	4905      	ldr	r1, [pc, #20]	; (6b50 <_i2c_m_sync_disable+0x50>)
    6b3a:	4618      	mov	r0, r3
    6b3c:	4b05      	ldr	r3, [pc, #20]	; (6b54 <_i2c_m_sync_disable+0x54>)
    6b3e:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6b40:	68f8      	ldr	r0, [r7, #12]
    6b42:	4b05      	ldr	r3, [pc, #20]	; (6b58 <_i2c_m_sync_disable+0x58>)
    6b44:	4798      	blx	r3

	return ERR_NONE;
    6b46:	2300      	movs	r3, #0
}
    6b48:	4618      	mov	r0, r3
    6b4a:	3710      	adds	r7, #16
    6b4c:	46bd      	mov	sp, r7
    6b4e:	bd80      	pop	{r7, pc}
    6b50:	00010a00 	.word	0x00010a00
    6b54:	00003b01 	.word	0x00003b01
    6b58:	000062e5 	.word	0x000062e5

00006b5c <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6b5c:	b580      	push	{r7, lr}
    6b5e:	b084      	sub	sp, #16
    6b60:	af00      	add	r7, sp, #0
    6b62:	6078      	str	r0, [r7, #4]
    6b64:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6b6a:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6b6c:	687b      	ldr	r3, [r7, #4]
    6b6e:	691b      	ldr	r3, [r3, #16]
    6b70:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6b72:	68b8      	ldr	r0, [r7, #8]
    6b74:	4b0f      	ldr	r3, [pc, #60]	; (6bb4 <_sercom_i2c_sync_wait_bus+0x58>)
    6b76:	4798      	blx	r3
    6b78:	4603      	mov	r3, r0
    6b7a:	461a      	mov	r2, r3
    6b7c:	683b      	ldr	r3, [r7, #0]
    6b7e:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6b80:	68fb      	ldr	r3, [r7, #12]
    6b82:	1e5a      	subs	r2, r3, #1
    6b84:	60fa      	str	r2, [r7, #12]
    6b86:	2b00      	cmp	r3, #0
    6b88:	d102      	bne.n	6b90 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6b8a:	f06f 0304 	mvn.w	r3, #4
    6b8e:	e00c      	b.n	6baa <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6b90:	683b      	ldr	r3, [r7, #0]
    6b92:	681b      	ldr	r3, [r3, #0]
    6b94:	f003 0301 	and.w	r3, r3, #1
    6b98:	2b00      	cmp	r3, #0
    6b9a:	d105      	bne.n	6ba8 <_sercom_i2c_sync_wait_bus+0x4c>
    6b9c:	683b      	ldr	r3, [r7, #0]
    6b9e:	681b      	ldr	r3, [r3, #0]
    6ba0:	f003 0302 	and.w	r3, r3, #2
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d0e4      	beq.n	6b72 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6ba8:	2300      	movs	r3, #0
}
    6baa:	4618      	mov	r0, r3
    6bac:	3710      	adds	r7, #16
    6bae:	46bd      	mov	sp, r7
    6bb0:	bd80      	pop	{r7, pc}
    6bb2:	bf00      	nop
    6bb4:	00006241 	.word	0x00006241

00006bb8 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6bb8:	b590      	push	{r4, r7, lr}
    6bba:	b087      	sub	sp, #28
    6bbc:	af00      	add	r7, sp, #0
    6bbe:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6bc0:	687b      	ldr	r3, [r7, #4]
    6bc2:	691b      	ldr	r3, [r3, #16]
    6bc4:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6bc6:	687b      	ldr	r3, [r7, #4]
    6bc8:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6bca:	6978      	ldr	r0, [r7, #20]
    6bcc:	4b39      	ldr	r3, [pc, #228]	; (6cb4 <_sercom_i2c_sync_send_address+0xfc>)
    6bce:	4798      	blx	r3
    6bd0:	4603      	mov	r3, r0
    6bd2:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6bd4:	687b      	ldr	r3, [r7, #4]
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	bf14      	ite	ne
    6bda:	2301      	movne	r3, #1
    6bdc:	2300      	moveq	r3, #0
    6bde:	b2db      	uxtb	r3, r3
    6be0:	f240 52a5 	movw	r2, #1445	; 0x5a5
    6be4:	4934      	ldr	r1, [pc, #208]	; (6cb8 <_sercom_i2c_sync_send_address+0x100>)
    6be6:	4618      	mov	r0, r3
    6be8:	4b34      	ldr	r3, [pc, #208]	; (6cbc <_sercom_i2c_sync_send_address+0x104>)
    6bea:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6bec:	693b      	ldr	r3, [r7, #16]
    6bee:	685b      	ldr	r3, [r3, #4]
    6bf0:	2b01      	cmp	r3, #1
    6bf2:	d106      	bne.n	6c02 <_sercom_i2c_sync_send_address+0x4a>
    6bf4:	68fb      	ldr	r3, [r7, #12]
    6bf6:	2b00      	cmp	r3, #0
    6bf8:	d003      	beq.n	6c02 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6bfa:	6978      	ldr	r0, [r7, #20]
    6bfc:	4b30      	ldr	r3, [pc, #192]	; (6cc0 <_sercom_i2c_sync_send_address+0x108>)
    6bfe:	4798      	blx	r3
    6c00:	e002      	b.n	6c08 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6c02:	6978      	ldr	r0, [r7, #20]
    6c04:	4b2f      	ldr	r3, [pc, #188]	; (6cc4 <_sercom_i2c_sync_send_address+0x10c>)
    6c06:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6c08:	693b      	ldr	r3, [r7, #16]
    6c0a:	881b      	ldrh	r3, [r3, #0]
    6c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6c10:	2b00      	cmp	r3, #0
    6c12:	d022      	beq.n	6c5a <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6c14:	693b      	ldr	r3, [r7, #16]
    6c16:	885b      	ldrh	r3, [r3, #2]
    6c18:	b29b      	uxth	r3, r3
    6c1a:	f003 0301 	and.w	r3, r3, #1
    6c1e:	2b00      	cmp	r3, #0
    6c20:	d007      	beq.n	6c32 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6c22:	693b      	ldr	r3, [r7, #16]
    6c24:	885b      	ldrh	r3, [r3, #2]
    6c26:	b29b      	uxth	r3, r3
    6c28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6c2c:	b29a      	uxth	r2, r3
    6c2e:	693b      	ldr	r3, [r7, #16]
    6c30:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6c32:	693b      	ldr	r3, [r7, #16]
    6c34:	881b      	ldrh	r3, [r3, #0]
    6c36:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6c38:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6c3c:	401c      	ands	r4, r3
    6c3e:	6978      	ldr	r0, [r7, #20]
    6c40:	4b21      	ldr	r3, [pc, #132]	; (6cc8 <_sercom_i2c_sync_send_address+0x110>)
    6c42:	4798      	blx	r3
    6c44:	4603      	mov	r3, r0
    6c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6c4a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6c50:	4619      	mov	r1, r3
    6c52:	6978      	ldr	r0, [r7, #20]
    6c54:	4b1d      	ldr	r3, [pc, #116]	; (6ccc <_sercom_i2c_sync_send_address+0x114>)
    6c56:	4798      	blx	r3
    6c58:	e01a      	b.n	6c90 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6c5a:	693b      	ldr	r3, [r7, #16]
    6c5c:	881b      	ldrh	r3, [r3, #0]
    6c5e:	005b      	lsls	r3, r3, #1
    6c60:	b2db      	uxtb	r3, r3
    6c62:	693a      	ldr	r2, [r7, #16]
    6c64:	8852      	ldrh	r2, [r2, #2]
    6c66:	b292      	uxth	r2, r2
    6c68:	f002 0201 	and.w	r2, r2, #1
    6c6c:	2a00      	cmp	r2, #0
    6c6e:	bf14      	ite	ne
    6c70:	2201      	movne	r2, #1
    6c72:	2200      	moveq	r2, #0
    6c74:	b2d2      	uxtb	r2, r2
    6c76:	4313      	orrs	r3, r2
    6c78:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6c7a:	6978      	ldr	r0, [r7, #20]
    6c7c:	4b12      	ldr	r3, [pc, #72]	; (6cc8 <_sercom_i2c_sync_send_address+0x110>)
    6c7e:	4798      	blx	r3
    6c80:	4603      	mov	r3, r0
    6c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6c86:	4323      	orrs	r3, r4
    6c88:	4619      	mov	r1, r3
    6c8a:	6978      	ldr	r0, [r7, #20]
    6c8c:	4b0f      	ldr	r3, [pc, #60]	; (6ccc <_sercom_i2c_sync_send_address+0x114>)
    6c8e:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6c90:	f107 0308 	add.w	r3, r7, #8
    6c94:	4619      	mov	r1, r3
    6c96:	6878      	ldr	r0, [r7, #4]
    6c98:	4b0d      	ldr	r3, [pc, #52]	; (6cd0 <_sercom_i2c_sync_send_address+0x118>)
    6c9a:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6c9c:	68bb      	ldr	r3, [r7, #8]
    6c9e:	693a      	ldr	r2, [r7, #16]
    6ca0:	4619      	mov	r1, r3
    6ca2:	6978      	ldr	r0, [r7, #20]
    6ca4:	4b0b      	ldr	r3, [pc, #44]	; (6cd4 <_sercom_i2c_sync_send_address+0x11c>)
    6ca6:	4798      	blx	r3
    6ca8:	4603      	mov	r3, r0
}
    6caa:	4618      	mov	r0, r3
    6cac:	371c      	adds	r7, #28
    6cae:	46bd      	mov	sp, r7
    6cb0:	bd90      	pop	{r4, r7, pc}
    6cb2:	bf00      	nop
    6cb4:	0000630d 	.word	0x0000630d
    6cb8:	00010a00 	.word	0x00010a00
    6cbc:	00003b01 	.word	0x00003b01
    6cc0:	00006495 	.word	0x00006495
    6cc4:	000064bd 	.word	0x000064bd
    6cc8:	000065fd 	.word	0x000065fd
    6ccc:	000065d9 	.word	0x000065d9
    6cd0:	00006b5d 	.word	0x00006b5d
    6cd4:	00006849 	.word	0x00006849

00006cd8 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    6cd8:	b580      	push	{r7, lr}
    6cda:	b086      	sub	sp, #24
    6cdc:	af00      	add	r7, sp, #0
    6cde:	6078      	str	r0, [r7, #4]
    6ce0:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    6ce2:	687b      	ldr	r3, [r7, #4]
    6ce4:	691b      	ldr	r3, [r3, #16]
    6ce6:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	2b00      	cmp	r3, #0
    6cec:	bf14      	ite	ne
    6cee:	2301      	movne	r3, #1
    6cf0:	2300      	moveq	r3, #0
    6cf2:	b2db      	uxtb	r3, r3
    6cf4:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    6cf8:	493b      	ldr	r1, [pc, #236]	; (6de8 <_i2c_m_sync_transfer+0x110>)
    6cfa:	4618      	mov	r0, r3
    6cfc:	4b3b      	ldr	r3, [pc, #236]	; (6dec <_i2c_m_sync_transfer+0x114>)
    6cfe:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6d00:	687b      	ldr	r3, [r7, #4]
    6d02:	691b      	ldr	r3, [r3, #16]
    6d04:	2b00      	cmp	r3, #0
    6d06:	bf14      	ite	ne
    6d08:	2301      	movne	r3, #1
    6d0a:	2300      	moveq	r3, #0
    6d0c:	b2db      	uxtb	r3, r3
    6d0e:	f240 52d1 	movw	r2, #1489	; 0x5d1
    6d12:	4935      	ldr	r1, [pc, #212]	; (6de8 <_i2c_m_sync_transfer+0x110>)
    6d14:	4618      	mov	r0, r3
    6d16:	4b35      	ldr	r3, [pc, #212]	; (6dec <_i2c_m_sync_transfer+0x114>)
    6d18:	4798      	blx	r3
	ASSERT(msg);
    6d1a:	683b      	ldr	r3, [r7, #0]
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	bf14      	ite	ne
    6d20:	2301      	movne	r3, #1
    6d22:	2300      	moveq	r3, #0
    6d24:	b2db      	uxtb	r3, r3
    6d26:	f240 52d2 	movw	r2, #1490	; 0x5d2
    6d2a:	492f      	ldr	r1, [pc, #188]	; (6de8 <_i2c_m_sync_transfer+0x110>)
    6d2c:	4618      	mov	r0, r3
    6d2e:	4b2f      	ldr	r3, [pc, #188]	; (6dec <_i2c_m_sync_transfer+0x114>)
    6d30:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6d32:	687b      	ldr	r3, [r7, #4]
    6d34:	885b      	ldrh	r3, [r3, #2]
    6d36:	b29b      	uxth	r3, r3
    6d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	d002      	beq.n	6d46 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6d40:	f06f 0305 	mvn.w	r3, #5
    6d44:	e04c      	b.n	6de0 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6d46:	683b      	ldr	r3, [r7, #0]
    6d48:	885b      	ldrh	r3, [r3, #2]
    6d4a:	b29b      	uxth	r3, r3
    6d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6d50:	b29a      	uxth	r2, r3
    6d52:	683b      	ldr	r3, [r7, #0]
    6d54:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6d56:	687b      	ldr	r3, [r7, #4]
    6d58:	683a      	ldr	r2, [r7, #0]
    6d5a:	ca07      	ldmia	r2, {r0, r1, r2}
    6d5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6d60:	6938      	ldr	r0, [r7, #16]
    6d62:	4b23      	ldr	r3, [pc, #140]	; (6df0 <_i2c_m_sync_transfer+0x118>)
    6d64:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6d66:	6878      	ldr	r0, [r7, #4]
    6d68:	4b22      	ldr	r3, [pc, #136]	; (6df4 <_i2c_m_sync_transfer+0x11c>)
    6d6a:	4798      	blx	r3
    6d6c:	6178      	str	r0, [r7, #20]

	if (ret) {
    6d6e:	697b      	ldr	r3, [r7, #20]
    6d70:	2b00      	cmp	r3, #0
    6d72:	d02d      	beq.n	6dd0 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6d74:	687b      	ldr	r3, [r7, #4]
    6d76:	885b      	ldrh	r3, [r3, #2]
    6d78:	b29b      	uxth	r3, r3
    6d7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d7e:	b29a      	uxth	r2, r3
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	805a      	strh	r2, [r3, #2]

		return ret;
    6d84:	697b      	ldr	r3, [r7, #20]
    6d86:	e02b      	b.n	6de0 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6d88:	f107 030c 	add.w	r3, r7, #12
    6d8c:	4619      	mov	r1, r3
    6d8e:	6878      	ldr	r0, [r7, #4]
    6d90:	4b19      	ldr	r3, [pc, #100]	; (6df8 <_i2c_m_sync_transfer+0x120>)
    6d92:	4798      	blx	r3
    6d94:	6178      	str	r0, [r7, #20]

		if (ret) {
    6d96:	697b      	ldr	r3, [r7, #20]
    6d98:	2b00      	cmp	r3, #0
    6d9a:	d012      	beq.n	6dc2 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6d9c:	683b      	ldr	r3, [r7, #0]
    6d9e:	885b      	ldrh	r3, [r3, #2]
    6da0:	b29b      	uxth	r3, r3
    6da2:	b21b      	sxth	r3, r3
    6da4:	2b00      	cmp	r3, #0
    6da6:	da02      	bge.n	6dae <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6da8:	6938      	ldr	r0, [r7, #16]
    6daa:	4b14      	ldr	r3, [pc, #80]	; (6dfc <_i2c_m_sync_transfer+0x124>)
    6dac:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6dae:	687b      	ldr	r3, [r7, #4]
    6db0:	885b      	ldrh	r3, [r3, #2]
    6db2:	b29b      	uxth	r3, r3
    6db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6db8:	b29a      	uxth	r2, r3
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	805a      	strh	r2, [r3, #2]

			return ret;
    6dbe:	697b      	ldr	r3, [r7, #20]
    6dc0:	e00e      	b.n	6de0 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6dc2:	68fb      	ldr	r3, [r7, #12]
    6dc4:	687a      	ldr	r2, [r7, #4]
    6dc6:	4619      	mov	r1, r3
    6dc8:	6938      	ldr	r0, [r7, #16]
    6dca:	4b0d      	ldr	r3, [pc, #52]	; (6e00 <_i2c_m_sync_transfer+0x128>)
    6dcc:	4798      	blx	r3
    6dce:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6dd0:	687b      	ldr	r3, [r7, #4]
    6dd2:	885b      	ldrh	r3, [r3, #2]
    6dd4:	b29b      	uxth	r3, r3
    6dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6dda:	2b00      	cmp	r3, #0
    6ddc:	d1d4      	bne.n	6d88 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6dde:	697b      	ldr	r3, [r7, #20]
}
    6de0:	4618      	mov	r0, r3
    6de2:	3718      	adds	r7, #24
    6de4:	46bd      	mov	sp, r7
    6de6:	bd80      	pop	{r7, pc}
    6de8:	00010a00 	.word	0x00010a00
    6dec:	00003b01 	.word	0x00003b01
    6df0:	00006445 	.word	0x00006445
    6df4:	00006bb9 	.word	0x00006bb9
    6df8:	00006b5d 	.word	0x00006b5d
    6dfc:	0000682d 	.word	0x0000682d
    6e00:	00006849 	.word	0x00006849

00006e04 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    6e04:	b580      	push	{r7, lr}
    6e06:	b084      	sub	sp, #16
    6e08:	af00      	add	r7, sp, #0
    6e0a:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    6e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6e10:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    6e12:	2304      	movs	r3, #4
    6e14:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    6e16:	687b      	ldr	r3, [r7, #4]
    6e18:	2b00      	cmp	r3, #0
    6e1a:	bf14      	ite	ne
    6e1c:	2301      	movne	r3, #1
    6e1e:	2300      	moveq	r3, #0
    6e20:	b2db      	uxtb	r3, r3
    6e22:	f240 6205 	movw	r2, #1541	; 0x605
    6e26:	4915      	ldr	r1, [pc, #84]	; (6e7c <_i2c_m_enable_implementation+0x78>)
    6e28:	4618      	mov	r0, r3
    6e2a:	4b15      	ldr	r3, [pc, #84]	; (6e80 <_i2c_m_enable_implementation+0x7c>)
    6e2c:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    6e2e:	6878      	ldr	r0, [r7, #4]
    6e30:	4b14      	ldr	r3, [pc, #80]	; (6e84 <_i2c_m_enable_implementation+0x80>)
    6e32:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6e34:	e016      	b.n	6e64 <_i2c_m_enable_implementation+0x60>
		timeout--;
    6e36:	68fb      	ldr	r3, [r7, #12]
    6e38:	3b01      	subs	r3, #1
    6e3a:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    6e3c:	68fb      	ldr	r3, [r7, #12]
    6e3e:	2b00      	cmp	r3, #0
    6e40:	dc10      	bgt.n	6e64 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6e42:	68bb      	ldr	r3, [r7, #8]
    6e44:	3b01      	subs	r3, #1
    6e46:	60bb      	str	r3, [r7, #8]
    6e48:	68bb      	ldr	r3, [r7, #8]
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	d007      	beq.n	6e5e <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    6e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6e52:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6e54:	2110      	movs	r1, #16
    6e56:	6878      	ldr	r0, [r7, #4]
    6e58:	4b0b      	ldr	r3, [pc, #44]	; (6e88 <_i2c_m_enable_implementation+0x84>)
    6e5a:	4798      	blx	r3
    6e5c:	e002      	b.n	6e64 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    6e5e:	f06f 0305 	mvn.w	r3, #5
    6e62:	e006      	b.n	6e72 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6e64:	6878      	ldr	r0, [r7, #4]
    6e66:	4b09      	ldr	r3, [pc, #36]	; (6e8c <_i2c_m_enable_implementation+0x88>)
    6e68:	4798      	blx	r3
    6e6a:	4603      	mov	r3, r0
    6e6c:	2b01      	cmp	r3, #1
    6e6e:	d1e2      	bne.n	6e36 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6e70:	2300      	movs	r3, #0
}
    6e72:	4618      	mov	r0, r3
    6e74:	3710      	adds	r7, #16
    6e76:	46bd      	mov	sp, r7
    6e78:	bd80      	pop	{r7, pc}
    6e7a:	bf00      	nop
    6e7c:	00010a00 	.word	0x00010a00
    6e80:	00003b01 	.word	0x00003b01
    6e84:	000062bd 	.word	0x000062bd
    6e88:	00006741 	.word	0x00006741
    6e8c:	000066f1 	.word	0x000066f1

00006e90 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6e90:	b580      	push	{r7, lr}
    6e92:	b084      	sub	sp, #16
    6e94:	af00      	add	r7, sp, #0
    6e96:	6078      	str	r0, [r7, #4]
    6e98:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6e9a:	6838      	ldr	r0, [r7, #0]
    6e9c:	4b42      	ldr	r3, [pc, #264]	; (6fa8 <_i2c_m_sync_init_impl+0x118>)
    6e9e:	4798      	blx	r3
    6ea0:	4603      	mov	r3, r0
    6ea2:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6ea4:	2101      	movs	r1, #1
    6ea6:	6838      	ldr	r0, [r7, #0]
    6ea8:	4b40      	ldr	r3, [pc, #256]	; (6fac <_i2c_m_sync_init_impl+0x11c>)
    6eaa:	4798      	blx	r3
    6eac:	4603      	mov	r3, r0
    6eae:	f083 0301 	eor.w	r3, r3, #1
    6eb2:	b2db      	uxtb	r3, r3
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d020      	beq.n	6efa <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6eb8:	7bfa      	ldrb	r2, [r7, #15]
    6eba:	493d      	ldr	r1, [pc, #244]	; (6fb0 <_i2c_m_sync_init_impl+0x120>)
    6ebc:	4613      	mov	r3, r2
    6ebe:	005b      	lsls	r3, r3, #1
    6ec0:	4413      	add	r3, r2
    6ec2:	00db      	lsls	r3, r3, #3
    6ec4:	440b      	add	r3, r1
    6ec6:	3304      	adds	r3, #4
    6ec8:	681b      	ldr	r3, [r3, #0]
    6eca:	f003 031c 	and.w	r3, r3, #28
    6ece:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6ed0:	2102      	movs	r1, #2
    6ed2:	6838      	ldr	r0, [r7, #0]
    6ed4:	4b37      	ldr	r3, [pc, #220]	; (6fb4 <_i2c_m_sync_init_impl+0x124>)
    6ed6:	4798      	blx	r3
    6ed8:	4603      	mov	r3, r0
    6eda:	2b00      	cmp	r3, #0
    6edc:	d006      	beq.n	6eec <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6ede:	6838      	ldr	r0, [r7, #0]
    6ee0:	4b35      	ldr	r3, [pc, #212]	; (6fb8 <_i2c_m_sync_init_impl+0x128>)
    6ee2:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6ee4:	2102      	movs	r1, #2
    6ee6:	6838      	ldr	r0, [r7, #0]
    6ee8:	4b34      	ldr	r3, [pc, #208]	; (6fbc <_i2c_m_sync_init_impl+0x12c>)
    6eea:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6eec:	68bb      	ldr	r3, [r7, #8]
    6eee:	f043 0301 	orr.w	r3, r3, #1
    6ef2:	4619      	mov	r1, r3
    6ef4:	6838      	ldr	r0, [r7, #0]
    6ef6:	4b32      	ldr	r3, [pc, #200]	; (6fc0 <_i2c_m_sync_init_impl+0x130>)
    6ef8:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6efa:	2101      	movs	r1, #1
    6efc:	6838      	ldr	r0, [r7, #0]
    6efe:	4b2f      	ldr	r3, [pc, #188]	; (6fbc <_i2c_m_sync_init_impl+0x12c>)
    6f00:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6f02:	7bfa      	ldrb	r2, [r7, #15]
    6f04:	492a      	ldr	r1, [pc, #168]	; (6fb0 <_i2c_m_sync_init_impl+0x120>)
    6f06:	4613      	mov	r3, r2
    6f08:	005b      	lsls	r3, r3, #1
    6f0a:	4413      	add	r3, r2
    6f0c:	00db      	lsls	r3, r3, #3
    6f0e:	440b      	add	r3, r1
    6f10:	3304      	adds	r3, #4
    6f12:	681b      	ldr	r3, [r3, #0]
    6f14:	4619      	mov	r1, r3
    6f16:	6838      	ldr	r0, [r7, #0]
    6f18:	4b29      	ldr	r3, [pc, #164]	; (6fc0 <_i2c_m_sync_init_impl+0x130>)
    6f1a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6f1c:	7bfa      	ldrb	r2, [r7, #15]
    6f1e:	4924      	ldr	r1, [pc, #144]	; (6fb0 <_i2c_m_sync_init_impl+0x120>)
    6f20:	4613      	mov	r3, r2
    6f22:	005b      	lsls	r3, r3, #1
    6f24:	4413      	add	r3, r2
    6f26:	00db      	lsls	r3, r3, #3
    6f28:	440b      	add	r3, r1
    6f2a:	3308      	adds	r3, #8
    6f2c:	681b      	ldr	r3, [r3, #0]
    6f2e:	4619      	mov	r1, r3
    6f30:	6838      	ldr	r0, [r7, #0]
    6f32:	4b24      	ldr	r3, [pc, #144]	; (6fc4 <_i2c_m_sync_init_impl+0x134>)
    6f34:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6f36:	7bfa      	ldrb	r2, [r7, #15]
    6f38:	491d      	ldr	r1, [pc, #116]	; (6fb0 <_i2c_m_sync_init_impl+0x120>)
    6f3a:	4613      	mov	r3, r2
    6f3c:	005b      	lsls	r3, r3, #1
    6f3e:	4413      	add	r3, r2
    6f40:	00db      	lsls	r3, r3, #3
    6f42:	440b      	add	r3, r1
    6f44:	330c      	adds	r3, #12
    6f46:	681b      	ldr	r3, [r3, #0]
    6f48:	4619      	mov	r1, r3
    6f4a:	6838      	ldr	r0, [r7, #0]
    6f4c:	4b1e      	ldr	r3, [pc, #120]	; (6fc8 <_i2c_m_sync_init_impl+0x138>)
    6f4e:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6f50:	7bfa      	ldrb	r2, [r7, #15]
    6f52:	4917      	ldr	r1, [pc, #92]	; (6fb0 <_i2c_m_sync_init_impl+0x120>)
    6f54:	4613      	mov	r3, r2
    6f56:	005b      	lsls	r3, r3, #1
    6f58:	4413      	add	r3, r2
    6f5a:	00db      	lsls	r3, r3, #3
    6f5c:	440b      	add	r3, r1
    6f5e:	3304      	adds	r3, #4
    6f60:	681b      	ldr	r3, [r3, #0]
    6f62:	0e1b      	lsrs	r3, r3, #24
    6f64:	b29b      	uxth	r3, r3
    6f66:	f003 0303 	and.w	r3, r3, #3
    6f6a:	b29a      	uxth	r2, r3
    6f6c:	687b      	ldr	r3, [r7, #4]
    6f6e:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6f70:	687b      	ldr	r3, [r7, #4]
    6f72:	899b      	ldrh	r3, [r3, #12]
    6f74:	2b01      	cmp	r3, #1
    6f76:	bf8c      	ite	hi
    6f78:	2301      	movhi	r3, #1
    6f7a:	2300      	movls	r3, #0
    6f7c:	b2db      	uxtb	r3, r3
    6f7e:	4619      	mov	r1, r3
    6f80:	6838      	ldr	r0, [r7, #0]
    6f82:	4b12      	ldr	r3, [pc, #72]	; (6fcc <_i2c_m_sync_init_impl+0x13c>)
    6f84:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6f86:	7bfa      	ldrb	r2, [r7, #15]
    6f88:	4909      	ldr	r1, [pc, #36]	; (6fb0 <_i2c_m_sync_init_impl+0x120>)
    6f8a:	4613      	mov	r3, r2
    6f8c:	005b      	lsls	r3, r3, #1
    6f8e:	4413      	add	r3, r2
    6f90:	00db      	lsls	r3, r3, #3
    6f92:	440b      	add	r3, r1
    6f94:	3312      	adds	r3, #18
    6f96:	881a      	ldrh	r2, [r3, #0]
    6f98:	687b      	ldr	r3, [r7, #4]
    6f9a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6f9c:	2300      	movs	r3, #0
}
    6f9e:	4618      	mov	r0, r3
    6fa0:	3710      	adds	r7, #16
    6fa2:	46bd      	mov	sp, r7
    6fa4:	bd80      	pop	{r7, pc}
    6fa6:	bf00      	nop
    6fa8:	000067c5 	.word	0x000067c5
    6fac:	00006199 	.word	0x00006199
    6fb0:	20000018 	.word	0x20000018
    6fb4:	0000633d 	.word	0x0000633d
    6fb8:	000062e5 	.word	0x000062e5
    6fbc:	00006175 	.word	0x00006175
    6fc0:	0000636d 	.word	0x0000636d
    6fc4:	00006515 	.word	0x00006515
    6fc8:	0000655d 	.word	0x0000655d
    6fcc:	00006599 	.word	0x00006599

00006fd0 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6fd0:	b580      	push	{r7, lr}
    6fd2:	b082      	sub	sp, #8
    6fd4:	af00      	add	r7, sp, #0
    6fd6:	6078      	str	r0, [r7, #4]
    6fd8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6fda:	687b      	ldr	r3, [r7, #4]
    6fdc:	2b00      	cmp	r3, #0
    6fde:	d004      	beq.n	6fea <_spi_load_regs_master+0x1a>
    6fe0:	683b      	ldr	r3, [r7, #0]
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d001      	beq.n	6fea <_spi_load_regs_master+0x1a>
    6fe6:	2301      	movs	r3, #1
    6fe8:	e000      	b.n	6fec <_spi_load_regs_master+0x1c>
    6fea:	2300      	movs	r3, #0
    6fec:	f003 0301 	and.w	r3, r3, #1
    6ff0:	b2db      	uxtb	r3, r3
    6ff2:	f640 1209 	movw	r2, #2313	; 0x909
    6ff6:	4915      	ldr	r1, [pc, #84]	; (704c <_spi_load_regs_master+0x7c>)
    6ff8:	4618      	mov	r0, r3
    6ffa:	4b15      	ldr	r3, [pc, #84]	; (7050 <_spi_load_regs_master+0x80>)
    6ffc:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6ffe:	683b      	ldr	r3, [r7, #0]
    7000:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7002:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7006:	f023 0301 	bic.w	r3, r3, #1
    700a:	4619      	mov	r1, r3
    700c:	6878      	ldr	r0, [r7, #4]
    700e:	4b11      	ldr	r3, [pc, #68]	; (7054 <_spi_load_regs_master+0x84>)
    7010:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    7012:	683b      	ldr	r3, [r7, #0]
    7014:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    7016:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    701a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    701e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7022:	4619      	mov	r1, r3
    7024:	6878      	ldr	r0, [r7, #4]
    7026:	4b0c      	ldr	r3, [pc, #48]	; (7058 <_spi_load_regs_master+0x88>)
    7028:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    702a:	683b      	ldr	r3, [r7, #0]
    702c:	7b1b      	ldrb	r3, [r3, #12]
    702e:	4619      	mov	r1, r3
    7030:	6878      	ldr	r0, [r7, #4]
    7032:	4b0a      	ldr	r3, [pc, #40]	; (705c <_spi_load_regs_master+0x8c>)
    7034:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7036:	683b      	ldr	r3, [r7, #0]
    7038:	7b5b      	ldrb	r3, [r3, #13]
    703a:	4619      	mov	r1, r3
    703c:	6878      	ldr	r0, [r7, #4]
    703e:	4b08      	ldr	r3, [pc, #32]	; (7060 <_spi_load_regs_master+0x90>)
    7040:	4798      	blx	r3
}
    7042:	bf00      	nop
    7044:	3708      	adds	r7, #8
    7046:	46bd      	mov	sp, r7
    7048:	bd80      	pop	{r7, pc}
    704a:	bf00      	nop
    704c:	00010a00 	.word	0x00010a00
    7050:	00003b01 	.word	0x00003b01
    7054:	00006421 	.word	0x00006421
    7058:	00006539 	.word	0x00006539
    705c:	00006579 	.word	0x00006579
    7060:	000066b1 	.word	0x000066b1

00007064 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7064:	b580      	push	{r7, lr}
    7066:	b082      	sub	sp, #8
    7068:	af00      	add	r7, sp, #0
    706a:	6078      	str	r0, [r7, #4]
    706c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    706e:	687b      	ldr	r3, [r7, #4]
    7070:	2b00      	cmp	r3, #0
    7072:	d004      	beq.n	707e <_spi_load_regs_slave+0x1a>
    7074:	683b      	ldr	r3, [r7, #0]
    7076:	2b00      	cmp	r3, #0
    7078:	d001      	beq.n	707e <_spi_load_regs_slave+0x1a>
    707a:	2301      	movs	r3, #1
    707c:	e000      	b.n	7080 <_spi_load_regs_slave+0x1c>
    707e:	2300      	movs	r3, #0
    7080:	f003 0301 	and.w	r3, r3, #1
    7084:	b2db      	uxtb	r3, r3
    7086:	f640 121d 	movw	r2, #2333	; 0x91d
    708a:	491a      	ldr	r1, [pc, #104]	; (70f4 <_spi_load_regs_slave+0x90>)
    708c:	4618      	mov	r0, r3
    708e:	4b1a      	ldr	r3, [pc, #104]	; (70f8 <_spi_load_regs_slave+0x94>)
    7090:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7092:	683b      	ldr	r3, [r7, #0]
    7094:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7096:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    709a:	f023 0301 	bic.w	r3, r3, #1
    709e:	4619      	mov	r1, r3
    70a0:	6878      	ldr	r0, [r7, #4]
    70a2:	4b16      	ldr	r3, [pc, #88]	; (70fc <_spi_load_regs_slave+0x98>)
    70a4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    70a6:	683b      	ldr	r3, [r7, #0]
    70a8:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    70aa:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    70ae:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    70b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    70b6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    70ba:	4619      	mov	r1, r3
    70bc:	6878      	ldr	r0, [r7, #4]
    70be:	4b10      	ldr	r3, [pc, #64]	; (7100 <_spi_load_regs_slave+0x9c>)
    70c0:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    70c2:	683b      	ldr	r3, [r7, #0]
    70c4:	689b      	ldr	r3, [r3, #8]
    70c6:	4619      	mov	r1, r3
    70c8:	6878      	ldr	r0, [r7, #4]
    70ca:	4b0e      	ldr	r3, [pc, #56]	; (7104 <_spi_load_regs_slave+0xa0>)
    70cc:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    70ce:	683b      	ldr	r3, [r7, #0]
    70d0:	7b5b      	ldrb	r3, [r3, #13]
    70d2:	4619      	mov	r1, r3
    70d4:	6878      	ldr	r0, [r7, #4]
    70d6:	4b0c      	ldr	r3, [pc, #48]	; (7108 <_spi_load_regs_slave+0xa4>)
    70d8:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    70da:	bf00      	nop
    70dc:	f04f 31ff 	mov.w	r1, #4294967295
    70e0:	6878      	ldr	r0, [r7, #4]
    70e2:	4b0a      	ldr	r3, [pc, #40]	; (710c <_spi_load_regs_slave+0xa8>)
    70e4:	4798      	blx	r3
    70e6:	4603      	mov	r3, r0
    70e8:	2b00      	cmp	r3, #0
    70ea:	d1f7      	bne.n	70dc <_spi_load_regs_slave+0x78>
		;
}
    70ec:	bf00      	nop
    70ee:	3708      	adds	r7, #8
    70f0:	46bd      	mov	sp, r7
    70f2:	bd80      	pop	{r7, pc}
    70f4:	00010a00 	.word	0x00010a00
    70f8:	00003b01 	.word	0x00003b01
    70fc:	00006421 	.word	0x00006421
    7100:	00006539 	.word	0x00006539
    7104:	0000661d 	.word	0x0000661d
    7108:	000066b1 	.word	0x000066b1
    710c:	000061e5 	.word	0x000061e5

00007110 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7110:	b580      	push	{r7, lr}
    7112:	b084      	sub	sp, #16
    7114:	af00      	add	r7, sp, #0
    7116:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7118:	687b      	ldr	r3, [r7, #4]
    711a:	4618      	mov	r0, r3
    711c:	4b11      	ldr	r3, [pc, #68]	; (7164 <_spi_get_regs+0x54>)
    711e:	4798      	blx	r3
    7120:	4603      	mov	r3, r0
    7122:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7124:	2300      	movs	r3, #0
    7126:	73fb      	strb	r3, [r7, #15]
    7128:	e014      	b.n	7154 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    712a:	7bfa      	ldrb	r2, [r7, #15]
    712c:	490e      	ldr	r1, [pc, #56]	; (7168 <_spi_get_regs+0x58>)
    712e:	4613      	mov	r3, r2
    7130:	011b      	lsls	r3, r3, #4
    7132:	4413      	add	r3, r2
    7134:	440b      	add	r3, r1
    7136:	3310      	adds	r3, #16
    7138:	781b      	ldrb	r3, [r3, #0]
    713a:	7bba      	ldrb	r2, [r7, #14]
    713c:	429a      	cmp	r2, r3
    713e:	d106      	bne.n	714e <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7140:	7bfa      	ldrb	r2, [r7, #15]
    7142:	4613      	mov	r3, r2
    7144:	011b      	lsls	r3, r3, #4
    7146:	4413      	add	r3, r2
    7148:	4a07      	ldr	r2, [pc, #28]	; (7168 <_spi_get_regs+0x58>)
    714a:	4413      	add	r3, r2
    714c:	e006      	b.n	715c <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    714e:	7bfb      	ldrb	r3, [r7, #15]
    7150:	3301      	adds	r3, #1
    7152:	73fb      	strb	r3, [r7, #15]
    7154:	7bfb      	ldrb	r3, [r7, #15]
    7156:	2b01      	cmp	r3, #1
    7158:	d9e7      	bls.n	712a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    715a:	2300      	movs	r3, #0
}
    715c:	4618      	mov	r0, r3
    715e:	3710      	adds	r7, #16
    7160:	46bd      	mov	sp, r7
    7162:	bd80      	pop	{r7, pc}
    7164:	00006769 	.word	0x00006769
    7168:	00010a3c 	.word	0x00010a3c

0000716c <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    716c:	b580      	push	{r7, lr}
    716e:	b084      	sub	sp, #16
    7170:	af00      	add	r7, sp, #0
    7172:	6078      	str	r0, [r7, #4]
    7174:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    7176:	683b      	ldr	r3, [r7, #0]
    7178:	4618      	mov	r0, r3
    717a:	4b35      	ldr	r3, [pc, #212]	; (7250 <_spi_m_sync_init+0xe4>)
    717c:	4798      	blx	r3
    717e:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7180:	687b      	ldr	r3, [r7, #4]
    7182:	2b00      	cmp	r3, #0
    7184:	d004      	beq.n	7190 <_spi_m_sync_init+0x24>
    7186:	683b      	ldr	r3, [r7, #0]
    7188:	2b00      	cmp	r3, #0
    718a:	d001      	beq.n	7190 <_spi_m_sync_init+0x24>
    718c:	2301      	movs	r3, #1
    718e:	e000      	b.n	7192 <_spi_m_sync_init+0x26>
    7190:	2300      	movs	r3, #0
    7192:	f003 0301 	and.w	r3, r3, #1
    7196:	b2db      	uxtb	r3, r3
    7198:	f640 123f 	movw	r2, #2367	; 0x93f
    719c:	492d      	ldr	r1, [pc, #180]	; (7254 <_spi_m_sync_init+0xe8>)
    719e:	4618      	mov	r0, r3
    71a0:	4b2d      	ldr	r3, [pc, #180]	; (7258 <_spi_m_sync_init+0xec>)
    71a2:	4798      	blx	r3

	if (regs == NULL) {
    71a4:	68fb      	ldr	r3, [r7, #12]
    71a6:	2b00      	cmp	r3, #0
    71a8:	d102      	bne.n	71b0 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    71aa:	f06f 030c 	mvn.w	r3, #12
    71ae:	e04a      	b.n	7246 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    71b0:	2101      	movs	r1, #1
    71b2:	6838      	ldr	r0, [r7, #0]
    71b4:	4b29      	ldr	r3, [pc, #164]	; (725c <_spi_m_sync_init+0xf0>)
    71b6:	4798      	blx	r3
    71b8:	4603      	mov	r3, r0
    71ba:	f083 0301 	eor.w	r3, r3, #1
    71be:	b2db      	uxtb	r3, r3
    71c0:	2b00      	cmp	r3, #0
    71c2:	d019      	beq.n	71f8 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    71c4:	68fb      	ldr	r3, [r7, #12]
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	f003 031c 	and.w	r3, r3, #28
    71cc:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    71ce:	2102      	movs	r1, #2
    71d0:	6838      	ldr	r0, [r7, #0]
    71d2:	4b23      	ldr	r3, [pc, #140]	; (7260 <_spi_m_sync_init+0xf4>)
    71d4:	4798      	blx	r3
    71d6:	4603      	mov	r3, r0
    71d8:	2b00      	cmp	r3, #0
    71da:	d006      	beq.n	71ea <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    71dc:	6838      	ldr	r0, [r7, #0]
    71de:	4b21      	ldr	r3, [pc, #132]	; (7264 <_spi_m_sync_init+0xf8>)
    71e0:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    71e2:	2102      	movs	r1, #2
    71e4:	6838      	ldr	r0, [r7, #0]
    71e6:	4b20      	ldr	r3, [pc, #128]	; (7268 <_spi_m_sync_init+0xfc>)
    71e8:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    71ea:	68bb      	ldr	r3, [r7, #8]
    71ec:	f043 0301 	orr.w	r3, r3, #1
    71f0:	4619      	mov	r1, r3
    71f2:	6838      	ldr	r0, [r7, #0]
    71f4:	4b1d      	ldr	r3, [pc, #116]	; (726c <_spi_m_sync_init+0x100>)
    71f6:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    71f8:	2101      	movs	r1, #1
    71fa:	6838      	ldr	r0, [r7, #0]
    71fc:	4b1a      	ldr	r3, [pc, #104]	; (7268 <_spi_m_sync_init+0xfc>)
    71fe:	4798      	blx	r3

	dev->prvt = hw;
    7200:	687b      	ldr	r3, [r7, #4]
    7202:	683a      	ldr	r2, [r7, #0]
    7204:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7206:	68fb      	ldr	r3, [r7, #12]
    7208:	681b      	ldr	r3, [r3, #0]
    720a:	f003 031c 	and.w	r3, r3, #28
    720e:	2b08      	cmp	r3, #8
    7210:	d104      	bne.n	721c <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7212:	68f9      	ldr	r1, [r7, #12]
    7214:	6838      	ldr	r0, [r7, #0]
    7216:	4b16      	ldr	r3, [pc, #88]	; (7270 <_spi_m_sync_init+0x104>)
    7218:	4798      	blx	r3
    721a:	e003      	b.n	7224 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    721c:	68f9      	ldr	r1, [r7, #12]
    721e:	6838      	ldr	r0, [r7, #0]
    7220:	4b14      	ldr	r3, [pc, #80]	; (7274 <_spi_m_sync_init+0x108>)
    7222:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7224:	68fb      	ldr	r3, [r7, #12]
    7226:	685b      	ldr	r3, [r3, #4]
    7228:	f003 0307 	and.w	r3, r3, #7
    722c:	2b00      	cmp	r3, #0
    722e:	d101      	bne.n	7234 <_spi_m_sync_init+0xc8>
    7230:	2201      	movs	r2, #1
    7232:	e000      	b.n	7236 <_spi_m_sync_init+0xca>
    7234:	2202      	movs	r2, #2
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    723a:	68fb      	ldr	r3, [r7, #12]
    723c:	89db      	ldrh	r3, [r3, #14]
    723e:	b29a      	uxth	r2, r3
    7240:	687b      	ldr	r3, [r7, #4]
    7242:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    7244:	2300      	movs	r3, #0
}
    7246:	4618      	mov	r0, r3
    7248:	3710      	adds	r7, #16
    724a:	46bd      	mov	sp, r7
    724c:	bd80      	pop	{r7, pc}
    724e:	bf00      	nop
    7250:	00007111 	.word	0x00007111
    7254:	00010a00 	.word	0x00010a00
    7258:	00003b01 	.word	0x00003b01
    725c:	000061e5 	.word	0x000061e5
    7260:	000063f1 	.word	0x000063f1
    7264:	000063c9 	.word	0x000063c9
    7268:	000061c1 	.word	0x000061c1
    726c:	00006421 	.word	0x00006421
    7270:	00007065 	.word	0x00007065
    7274:	00006fd1 	.word	0x00006fd1

00007278 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    7278:	b580      	push	{r7, lr}
    727a:	b082      	sub	sp, #8
    727c:	af00      	add	r7, sp, #0
    727e:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7280:	bf00      	nop
    7282:	2103      	movs	r1, #3
    7284:	6878      	ldr	r0, [r7, #4]
    7286:	4b06      	ldr	r3, [pc, #24]	; (72a0 <_spi_wait_bus_idle+0x28>)
    7288:	4798      	blx	r3
    728a:	4603      	mov	r3, r0
    728c:	2b00      	cmp	r3, #0
    728e:	d0f8      	beq.n	7282 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7290:	2103      	movs	r1, #3
    7292:	6878      	ldr	r0, [r7, #4]
    7294:	4b03      	ldr	r3, [pc, #12]	; (72a4 <_spi_wait_bus_idle+0x2c>)
    7296:	4798      	blx	r3
}
    7298:	bf00      	nop
    729a:	3708      	adds	r7, #8
    729c:	46bd      	mov	sp, r7
    729e:	bd80      	pop	{r7, pc}
    72a0:	0000625b 	.word	0x0000625b
    72a4:	0000629d 	.word	0x0000629d

000072a8 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    72a8:	b580      	push	{r7, lr}
    72aa:	b086      	sub	sp, #24
    72ac:	af00      	add	r7, sp, #0
    72ae:	60f8      	str	r0, [r7, #12]
    72b0:	60b9      	str	r1, [r7, #8]
    72b2:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    72b4:	68bb      	ldr	r3, [r7, #8]
    72b6:	f003 0304 	and.w	r3, r3, #4
    72ba:	2b00      	cmp	r3, #0
    72bc:	d101      	bne.n	72c2 <_spi_rx_check_and_receive+0x1a>
		return false;
    72be:	2300      	movs	r3, #0
    72c0:	e022      	b.n	7308 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    72c2:	68f8      	ldr	r0, [r7, #12]
    72c4:	4b12      	ldr	r3, [pc, #72]	; (7310 <_spi_rx_check_and_receive+0x68>)
    72c6:	4798      	blx	r3
    72c8:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    72ca:	687b      	ldr	r3, [r7, #4]
    72cc:	685b      	ldr	r3, [r3, #4]
    72ce:	2b00      	cmp	r3, #0
    72d0:	d014      	beq.n	72fc <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    72d2:	687b      	ldr	r3, [r7, #4]
    72d4:	685b      	ldr	r3, [r3, #4]
    72d6:	1c59      	adds	r1, r3, #1
    72d8:	687a      	ldr	r2, [r7, #4]
    72da:	6051      	str	r1, [r2, #4]
    72dc:	697a      	ldr	r2, [r7, #20]
    72de:	b2d2      	uxtb	r2, r2
    72e0:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    72e2:	687b      	ldr	r3, [r7, #4]
    72e4:	7c1b      	ldrb	r3, [r3, #16]
    72e6:	2b01      	cmp	r3, #1
    72e8:	d908      	bls.n	72fc <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    72ea:	687b      	ldr	r3, [r7, #4]
    72ec:	685b      	ldr	r3, [r3, #4]
    72ee:	1c59      	adds	r1, r3, #1
    72f0:	687a      	ldr	r2, [r7, #4]
    72f2:	6051      	str	r1, [r2, #4]
    72f4:	697a      	ldr	r2, [r7, #20]
    72f6:	0a12      	lsrs	r2, r2, #8
    72f8:	b2d2      	uxtb	r2, r2
    72fa:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    72fc:	687b      	ldr	r3, [r7, #4]
    72fe:	68db      	ldr	r3, [r3, #12]
    7300:	1c5a      	adds	r2, r3, #1
    7302:	687b      	ldr	r3, [r7, #4]
    7304:	60da      	str	r2, [r3, #12]

	return true;
    7306:	2301      	movs	r3, #1
}
    7308:	4618      	mov	r0, r3
    730a:	3718      	adds	r7, #24
    730c:	46bd      	mov	sp, r7
    730e:	bd80      	pop	{r7, pc}
    7310:	00006699 	.word	0x00006699

00007314 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7314:	b580      	push	{r7, lr}
    7316:	b086      	sub	sp, #24
    7318:	af00      	add	r7, sp, #0
    731a:	60f8      	str	r0, [r7, #12]
    731c:	60b9      	str	r1, [r7, #8]
    731e:	607a      	str	r2, [r7, #4]
    7320:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7322:	68bb      	ldr	r3, [r7, #8]
    7324:	f003 0301 	and.w	r3, r3, #1
    7328:	2b00      	cmp	r3, #0
    732a:	d028      	beq.n	737e <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    732c:	687b      	ldr	r3, [r7, #4]
    732e:	681b      	ldr	r3, [r3, #0]
    7330:	2b00      	cmp	r3, #0
    7332:	d018      	beq.n	7366 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	681b      	ldr	r3, [r3, #0]
    7338:	1c59      	adds	r1, r3, #1
    733a:	687a      	ldr	r2, [r7, #4]
    733c:	6011      	str	r1, [r2, #0]
    733e:	781b      	ldrb	r3, [r3, #0]
    7340:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7342:	687b      	ldr	r3, [r7, #4]
    7344:	7c1b      	ldrb	r3, [r3, #16]
    7346:	2b01      	cmp	r3, #1
    7348:	d90f      	bls.n	736a <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    734a:	687b      	ldr	r3, [r7, #4]
    734c:	681b      	ldr	r3, [r3, #0]
    734e:	781b      	ldrb	r3, [r3, #0]
    7350:	021b      	lsls	r3, r3, #8
    7352:	461a      	mov	r2, r3
    7354:	697b      	ldr	r3, [r7, #20]
    7356:	4313      	orrs	r3, r2
    7358:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    735a:	687b      	ldr	r3, [r7, #4]
    735c:	681b      	ldr	r3, [r3, #0]
    735e:	1c5a      	adds	r2, r3, #1
    7360:	687b      	ldr	r3, [r7, #4]
    7362:	601a      	str	r2, [r3, #0]
    7364:	e001      	b.n	736a <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7366:	887b      	ldrh	r3, [r7, #2]
    7368:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    736a:	687b      	ldr	r3, [r7, #4]
    736c:	689b      	ldr	r3, [r3, #8]
    736e:	1c5a      	adds	r2, r3, #1
    7370:	687b      	ldr	r3, [r7, #4]
    7372:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7374:	6979      	ldr	r1, [r7, #20]
    7376:	68f8      	ldr	r0, [r7, #12]
    7378:	4b03      	ldr	r3, [pc, #12]	; (7388 <_spi_tx_check_and_send+0x74>)
    737a:	4798      	blx	r3
    737c:	e000      	b.n	7380 <_spi_tx_check_and_send+0x6c>
		return;
    737e:	bf00      	nop
}
    7380:	3718      	adds	r7, #24
    7382:	46bd      	mov	sp, r7
    7384:	bd80      	pop	{r7, pc}
    7386:	bf00      	nop
    7388:	0000667d 	.word	0x0000667d

0000738c <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    738c:	b580      	push	{r7, lr}
    738e:	b082      	sub	sp, #8
    7390:	af00      	add	r7, sp, #0
    7392:	6078      	str	r0, [r7, #4]
    7394:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    7396:	687b      	ldr	r3, [r7, #4]
    7398:	f003 0380 	and.w	r3, r3, #128	; 0x80
    739c:	2b00      	cmp	r3, #0
    739e:	d00b      	beq.n	73b8 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    73a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    73a4:	6838      	ldr	r0, [r7, #0]
    73a6:	4b07      	ldr	r3, [pc, #28]	; (73c4 <_spi_err_check+0x38>)
    73a8:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    73aa:	2180      	movs	r1, #128	; 0x80
    73ac:	6838      	ldr	r0, [r7, #0]
    73ae:	4b06      	ldr	r3, [pc, #24]	; (73c8 <_spi_err_check+0x3c>)
    73b0:	4798      	blx	r3
		return ERR_OVERFLOW;
    73b2:	f06f 0312 	mvn.w	r3, #18
    73b6:	e000      	b.n	73ba <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    73b8:	2300      	movs	r3, #0
}
    73ba:	4618      	mov	r0, r3
    73bc:	3708      	adds	r7, #8
    73be:	46bd      	mov	sp, r7
    73c0:	bd80      	pop	{r7, pc}
    73c2:	bf00      	nop
    73c4:	000066d1 	.word	0x000066d1
    73c8:	0000629d 	.word	0x0000629d

000073cc <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    73cc:	b590      	push	{r4, r7, lr}
    73ce:	b08b      	sub	sp, #44	; 0x2c
    73d0:	af00      	add	r7, sp, #0
    73d2:	6078      	str	r0, [r7, #4]
    73d4:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    73d6:	687b      	ldr	r3, [r7, #4]
    73d8:	681b      	ldr	r3, [r3, #0]
    73da:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    73dc:	2300      	movs	r3, #0
    73de:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    73e0:	683b      	ldr	r3, [r7, #0]
    73e2:	681b      	ldr	r3, [r3, #0]
    73e4:	60bb      	str	r3, [r7, #8]
    73e6:	683b      	ldr	r3, [r7, #0]
    73e8:	685b      	ldr	r3, [r3, #4]
    73ea:	60fb      	str	r3, [r7, #12]
    73ec:	2300      	movs	r3, #0
    73ee:	613b      	str	r3, [r7, #16]
    73f0:	2300      	movs	r3, #0
    73f2:	617b      	str	r3, [r7, #20]
    73f4:	687b      	ldr	r3, [r7, #4]
    73f6:	791b      	ldrb	r3, [r3, #4]
    73f8:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    73fa:	687b      	ldr	r3, [r7, #4]
    73fc:	2b00      	cmp	r3, #0
    73fe:	d004      	beq.n	740a <_spi_m_sync_trans+0x3e>
    7400:	6a3b      	ldr	r3, [r7, #32]
    7402:	2b00      	cmp	r3, #0
    7404:	d001      	beq.n	740a <_spi_m_sync_trans+0x3e>
    7406:	2301      	movs	r3, #1
    7408:	e000      	b.n	740c <_spi_m_sync_trans+0x40>
    740a:	2300      	movs	r3, #0
    740c:	f003 0301 	and.w	r3, r3, #1
    7410:	b2db      	uxtb	r3, r3
    7412:	f640 22a3 	movw	r2, #2723	; 0xaa3
    7416:	492b      	ldr	r1, [pc, #172]	; (74c4 <_spi_m_sync_trans+0xf8>)
    7418:	4618      	mov	r0, r3
    741a:	4b2b      	ldr	r3, [pc, #172]	; (74c8 <_spi_m_sync_trans+0xfc>)
    741c:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    741e:	2107      	movs	r1, #7
    7420:	6a38      	ldr	r0, [r7, #32]
    7422:	4b2a      	ldr	r3, [pc, #168]	; (74cc <_spi_m_sync_trans+0x100>)
    7424:	4798      	blx	r3
    7426:	4603      	mov	r3, r0
    7428:	2b00      	cmp	r3, #0
    742a:	d002      	beq.n	7432 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    742c:	f06f 0303 	mvn.w	r3, #3
    7430:	e043      	b.n	74ba <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7432:	6a38      	ldr	r0, [r7, #32]
    7434:	4b26      	ldr	r3, [pc, #152]	; (74d0 <_spi_m_sync_trans+0x104>)
    7436:	4798      	blx	r3
    7438:	4603      	mov	r3, r0
    743a:	f083 0301 	eor.w	r3, r3, #1
    743e:	b2db      	uxtb	r3, r3
    7440:	2b00      	cmp	r3, #0
    7442:	d002      	beq.n	744a <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7444:	f06f 0313 	mvn.w	r3, #19
    7448:	e037      	b.n	74ba <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    744a:	6a38      	ldr	r0, [r7, #32]
    744c:	4b21      	ldr	r3, [pc, #132]	; (74d4 <_spi_m_sync_trans+0x108>)
    744e:	4798      	blx	r3
    7450:	4603      	mov	r3, r0
    7452:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7454:	f107 0308 	add.w	r3, r7, #8
    7458:	461a      	mov	r2, r3
    745a:	69f9      	ldr	r1, [r7, #28]
    745c:	6a38      	ldr	r0, [r7, #32]
    745e:	4b1e      	ldr	r3, [pc, #120]	; (74d8 <_spi_m_sync_trans+0x10c>)
    7460:	4798      	blx	r3
    7462:	4603      	mov	r3, r0
    7464:	f083 0301 	eor.w	r3, r3, #1
    7468:	b2db      	uxtb	r3, r3
    746a:	2b00      	cmp	r3, #0
    746c:	d00b      	beq.n	7486 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    746e:	697a      	ldr	r2, [r7, #20]
    7470:	693b      	ldr	r3, [r7, #16]
    7472:	429a      	cmp	r2, r3
    7474:	d307      	bcc.n	7486 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7476:	687b      	ldr	r3, [r7, #4]
    7478:	88db      	ldrh	r3, [r3, #6]
    747a:	f107 0208 	add.w	r2, r7, #8
    747e:	69f9      	ldr	r1, [r7, #28]
    7480:	6a38      	ldr	r0, [r7, #32]
    7482:	4c16      	ldr	r4, [pc, #88]	; (74dc <_spi_m_sync_trans+0x110>)
    7484:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7486:	6a39      	ldr	r1, [r7, #32]
    7488:	69f8      	ldr	r0, [r7, #28]
    748a:	4b15      	ldr	r3, [pc, #84]	; (74e0 <_spi_m_sync_trans+0x114>)
    748c:	4798      	blx	r3
    748e:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7492:	2b00      	cmp	r3, #0
    7494:	db0c      	blt.n	74b0 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7496:	693a      	ldr	r2, [r7, #16]
    7498:	683b      	ldr	r3, [r7, #0]
    749a:	689b      	ldr	r3, [r3, #8]
    749c:	429a      	cmp	r2, r3
    749e:	d3d4      	bcc.n	744a <_spi_m_sync_trans+0x7e>
    74a0:	697a      	ldr	r2, [r7, #20]
    74a2:	683b      	ldr	r3, [r7, #0]
    74a4:	689b      	ldr	r3, [r3, #8]
    74a6:	429a      	cmp	r2, r3
    74a8:	d3cf      	bcc.n	744a <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    74aa:	693b      	ldr	r3, [r7, #16]
    74ac:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    74ae:	e000      	b.n	74b2 <_spi_m_sync_trans+0xe6>
			break;
    74b0:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    74b2:	6a38      	ldr	r0, [r7, #32]
    74b4:	4b0b      	ldr	r3, [pc, #44]	; (74e4 <_spi_m_sync_trans+0x118>)
    74b6:	4798      	blx	r3

	return rc;
    74b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    74ba:	4618      	mov	r0, r3
    74bc:	372c      	adds	r7, #44	; 0x2c
    74be:	46bd      	mov	sp, r7
    74c0:	bd90      	pop	{r4, r7, pc}
    74c2:	bf00      	nop
    74c4:	00010a00 	.word	0x00010a00
    74c8:	00003b01 	.word	0x00003b01
    74cc:	000061e5 	.word	0x000061e5
    74d0:	00006391 	.word	0x00006391
    74d4:	00006283 	.word	0x00006283
    74d8:	000072a9 	.word	0x000072a9
    74dc:	00007315 	.word	0x00007315
    74e0:	0000738d 	.word	0x0000738d
    74e4:	00007279 	.word	0x00007279

000074e8 <__NVIC_EnableIRQ>:
{
    74e8:	b480      	push	{r7}
    74ea:	b083      	sub	sp, #12
    74ec:	af00      	add	r7, sp, #0
    74ee:	4603      	mov	r3, r0
    74f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    74f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74f6:	2b00      	cmp	r3, #0
    74f8:	db0b      	blt.n	7512 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74fa:	4909      	ldr	r1, [pc, #36]	; (7520 <__NVIC_EnableIRQ+0x38>)
    74fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7500:	095b      	lsrs	r3, r3, #5
    7502:	88fa      	ldrh	r2, [r7, #6]
    7504:	f002 021f 	and.w	r2, r2, #31
    7508:	2001      	movs	r0, #1
    750a:	fa00 f202 	lsl.w	r2, r0, r2
    750e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7512:	bf00      	nop
    7514:	370c      	adds	r7, #12
    7516:	46bd      	mov	sp, r7
    7518:	f85d 7b04 	ldr.w	r7, [sp], #4
    751c:	4770      	bx	lr
    751e:	bf00      	nop
    7520:	e000e100 	.word	0xe000e100

00007524 <__NVIC_DisableIRQ>:
{
    7524:	b480      	push	{r7}
    7526:	b083      	sub	sp, #12
    7528:	af00      	add	r7, sp, #0
    752a:	4603      	mov	r3, r0
    752c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    752e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7532:	2b00      	cmp	r3, #0
    7534:	db10      	blt.n	7558 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7536:	490b      	ldr	r1, [pc, #44]	; (7564 <__NVIC_DisableIRQ+0x40>)
    7538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    753c:	095b      	lsrs	r3, r3, #5
    753e:	88fa      	ldrh	r2, [r7, #6]
    7540:	f002 021f 	and.w	r2, r2, #31
    7544:	2001      	movs	r0, #1
    7546:	fa00 f202 	lsl.w	r2, r0, r2
    754a:	3320      	adds	r3, #32
    754c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7550:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7554:	f3bf 8f6f 	isb	sy
}
    7558:	bf00      	nop
    755a:	370c      	adds	r7, #12
    755c:	46bd      	mov	sp, r7
    755e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7562:	4770      	bx	lr
    7564:	e000e100 	.word	0xe000e100

00007568 <__NVIC_ClearPendingIRQ>:
{
    7568:	b480      	push	{r7}
    756a:	b083      	sub	sp, #12
    756c:	af00      	add	r7, sp, #0
    756e:	4603      	mov	r3, r0
    7570:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7576:	2b00      	cmp	r3, #0
    7578:	db0c      	blt.n	7594 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    757a:	4909      	ldr	r1, [pc, #36]	; (75a0 <__NVIC_ClearPendingIRQ+0x38>)
    757c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7580:	095b      	lsrs	r3, r3, #5
    7582:	88fa      	ldrh	r2, [r7, #6]
    7584:	f002 021f 	and.w	r2, r2, #31
    7588:	2001      	movs	r0, #1
    758a:	fa00 f202 	lsl.w	r2, r0, r2
    758e:	3360      	adds	r3, #96	; 0x60
    7590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7594:	bf00      	nop
    7596:	370c      	adds	r7, #12
    7598:	46bd      	mov	sp, r7
    759a:	f85d 7b04 	ldr.w	r7, [sp], #4
    759e:	4770      	bx	lr
    75a0:	e000e100 	.word	0xe000e100

000075a4 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    75a4:	b480      	push	{r7}
    75a6:	b083      	sub	sp, #12
    75a8:	af00      	add	r7, sp, #0
    75aa:	6078      	str	r0, [r7, #4]
    75ac:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    75ae:	bf00      	nop
    75b0:	687b      	ldr	r3, [r7, #4]
    75b2:	689a      	ldr	r2, [r3, #8]
    75b4:	683b      	ldr	r3, [r7, #0]
    75b6:	4013      	ands	r3, r2
    75b8:	2b00      	cmp	r3, #0
    75ba:	d1f9      	bne.n	75b0 <hri_tcc_wait_for_sync+0xc>
	};
}
    75bc:	bf00      	nop
    75be:	370c      	adds	r7, #12
    75c0:	46bd      	mov	sp, r7
    75c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    75c6:	4770      	bx	lr

000075c8 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    75c8:	b480      	push	{r7}
    75ca:	b083      	sub	sp, #12
    75cc:	af00      	add	r7, sp, #0
    75ce:	6078      	str	r0, [r7, #4]
    75d0:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	689a      	ldr	r2, [r3, #8]
    75d6:	683b      	ldr	r3, [r7, #0]
    75d8:	4013      	ands	r3, r2
    75da:	2b00      	cmp	r3, #0
    75dc:	bf14      	ite	ne
    75de:	2301      	movne	r3, #1
    75e0:	2300      	moveq	r3, #0
    75e2:	b2db      	uxtb	r3, r3
}
    75e4:	4618      	mov	r0, r3
    75e6:	370c      	adds	r7, #12
    75e8:	46bd      	mov	sp, r7
    75ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    75ee:	4770      	bx	lr

000075f0 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    75f0:	b480      	push	{r7}
    75f2:	b083      	sub	sp, #12
    75f4:	af00      	add	r7, sp, #0
    75f6:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    75f8:	687b      	ldr	r3, [r7, #4]
    75fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    75fc:	f003 0301 	and.w	r3, r3, #1
    7600:	2b00      	cmp	r3, #0
    7602:	bf14      	ite	ne
    7604:	2301      	movne	r3, #1
    7606:	2300      	moveq	r3, #0
    7608:	b2db      	uxtb	r3, r3
}
    760a:	4618      	mov	r0, r3
    760c:	370c      	adds	r7, #12
    760e:	46bd      	mov	sp, r7
    7610:	f85d 7b04 	ldr.w	r7, [sp], #4
    7614:	4770      	bx	lr

00007616 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7616:	b480      	push	{r7}
    7618:	b083      	sub	sp, #12
    761a:	af00      	add	r7, sp, #0
    761c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    761e:	687b      	ldr	r3, [r7, #4]
    7620:	2201      	movs	r2, #1
    7622:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7624:	bf00      	nop
    7626:	370c      	adds	r7, #12
    7628:	46bd      	mov	sp, r7
    762a:	f85d 7b04 	ldr.w	r7, [sp], #4
    762e:	4770      	bx	lr

00007630 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7630:	b480      	push	{r7}
    7632:	b083      	sub	sp, #12
    7634:	af00      	add	r7, sp, #0
    7636:	6078      	str	r0, [r7, #4]
    7638:	460b      	mov	r3, r1
    763a:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    763c:	687b      	ldr	r3, [r7, #4]
    763e:	78fa      	ldrb	r2, [r7, #3]
    7640:	715a      	strb	r2, [r3, #5]
}
    7642:	bf00      	nop
    7644:	370c      	adds	r7, #12
    7646:	46bd      	mov	sp, r7
    7648:	f85d 7b04 	ldr.w	r7, [sp], #4
    764c:	4770      	bx	lr

0000764e <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    764e:	b480      	push	{r7}
    7650:	b083      	sub	sp, #12
    7652:	af00      	add	r7, sp, #0
    7654:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7656:	687b      	ldr	r3, [r7, #4]
    7658:	2201      	movs	r2, #1
    765a:	629a      	str	r2, [r3, #40]	; 0x28
}
    765c:	bf00      	nop
    765e:	370c      	adds	r7, #12
    7660:	46bd      	mov	sp, r7
    7662:	f85d 7b04 	ldr.w	r7, [sp], #4
    7666:	4770      	bx	lr

00007668 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7668:	b580      	push	{r7, lr}
    766a:	b082      	sub	sp, #8
    766c:	af00      	add	r7, sp, #0
    766e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7670:	687b      	ldr	r3, [r7, #4]
    7672:	681b      	ldr	r3, [r3, #0]
    7674:	f043 0201 	orr.w	r2, r3, #1
    7678:	687b      	ldr	r3, [r7, #4]
    767a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    767c:	2101      	movs	r1, #1
    767e:	6878      	ldr	r0, [r7, #4]
    7680:	4b02      	ldr	r3, [pc, #8]	; (768c <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7682:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7684:	bf00      	nop
    7686:	3708      	adds	r7, #8
    7688:	46bd      	mov	sp, r7
    768a:	bd80      	pop	{r7, pc}
    768c:	000075a5 	.word	0x000075a5

00007690 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7690:	b580      	push	{r7, lr}
    7692:	b082      	sub	sp, #8
    7694:	af00      	add	r7, sp, #0
    7696:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7698:	687b      	ldr	r3, [r7, #4]
    769a:	681b      	ldr	r3, [r3, #0]
    769c:	f043 0202 	orr.w	r2, r3, #2
    76a0:	687b      	ldr	r3, [r7, #4]
    76a2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    76a4:	2103      	movs	r1, #3
    76a6:	6878      	ldr	r0, [r7, #4]
    76a8:	4b02      	ldr	r3, [pc, #8]	; (76b4 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    76aa:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    76ac:	bf00      	nop
    76ae:	3708      	adds	r7, #8
    76b0:	46bd      	mov	sp, r7
    76b2:	bd80      	pop	{r7, pc}
    76b4:	000075a5 	.word	0x000075a5

000076b8 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    76b8:	b580      	push	{r7, lr}
    76ba:	b084      	sub	sp, #16
    76bc:	af00      	add	r7, sp, #0
    76be:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    76c0:	2103      	movs	r1, #3
    76c2:	6878      	ldr	r0, [r7, #4]
    76c4:	4b09      	ldr	r3, [pc, #36]	; (76ec <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    76c6:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    76c8:	687b      	ldr	r3, [r7, #4]
    76ca:	681b      	ldr	r3, [r3, #0]
    76cc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    76ce:	68fb      	ldr	r3, [r7, #12]
    76d0:	085b      	lsrs	r3, r3, #1
    76d2:	f003 0301 	and.w	r3, r3, #1
    76d6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    76d8:	68fb      	ldr	r3, [r7, #12]
    76da:	2b00      	cmp	r3, #0
    76dc:	bf14      	ite	ne
    76de:	2301      	movne	r3, #1
    76e0:	2300      	moveq	r3, #0
    76e2:	b2db      	uxtb	r3, r3
}
    76e4:	4618      	mov	r0, r3
    76e6:	3710      	adds	r7, #16
    76e8:	46bd      	mov	sp, r7
    76ea:	bd80      	pop	{r7, pc}
    76ec:	000075a5 	.word	0x000075a5

000076f0 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    76f0:	b580      	push	{r7, lr}
    76f2:	b082      	sub	sp, #8
    76f4:	af00      	add	r7, sp, #0
    76f6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    76f8:	687b      	ldr	r3, [r7, #4]
    76fa:	681b      	ldr	r3, [r3, #0]
    76fc:	f023 0202 	bic.w	r2, r3, #2
    7700:	687b      	ldr	r3, [r7, #4]
    7702:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7704:	2103      	movs	r1, #3
    7706:	6878      	ldr	r0, [r7, #4]
    7708:	4b02      	ldr	r3, [pc, #8]	; (7714 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    770a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    770c:	bf00      	nop
    770e:	3708      	adds	r7, #8
    7710:	46bd      	mov	sp, r7
    7712:	bd80      	pop	{r7, pc}
    7714:	000075a5 	.word	0x000075a5

00007718 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7718:	b580      	push	{r7, lr}
    771a:	b084      	sub	sp, #16
    771c:	af00      	add	r7, sp, #0
    771e:	6078      	str	r0, [r7, #4]
    7720:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7722:	2103      	movs	r1, #3
    7724:	6878      	ldr	r0, [r7, #4]
    7726:	4b07      	ldr	r3, [pc, #28]	; (7744 <hri_tcc_get_CTRLA_reg+0x2c>)
    7728:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    772a:	687b      	ldr	r3, [r7, #4]
    772c:	681b      	ldr	r3, [r3, #0]
    772e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7730:	68fa      	ldr	r2, [r7, #12]
    7732:	683b      	ldr	r3, [r7, #0]
    7734:	4013      	ands	r3, r2
    7736:	60fb      	str	r3, [r7, #12]
	return tmp;
    7738:	68fb      	ldr	r3, [r7, #12]
}
    773a:	4618      	mov	r0, r3
    773c:	3710      	adds	r7, #16
    773e:	46bd      	mov	sp, r7
    7740:	bd80      	pop	{r7, pc}
    7742:	bf00      	nop
    7744:	000075a5 	.word	0x000075a5

00007748 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7748:	b580      	push	{r7, lr}
    774a:	b082      	sub	sp, #8
    774c:	af00      	add	r7, sp, #0
    774e:	6078      	str	r0, [r7, #4]
    7750:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7752:	687b      	ldr	r3, [r7, #4]
    7754:	683a      	ldr	r2, [r7, #0]
    7756:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7758:	2103      	movs	r1, #3
    775a:	6878      	ldr	r0, [r7, #4]
    775c:	4b02      	ldr	r3, [pc, #8]	; (7768 <hri_tcc_write_CTRLA_reg+0x20>)
    775e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7760:	bf00      	nop
    7762:	3708      	adds	r7, #8
    7764:	46bd      	mov	sp, r7
    7766:	bd80      	pop	{r7, pc}
    7768:	000075a5 	.word	0x000075a5

0000776c <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    776c:	b480      	push	{r7}
    776e:	b083      	sub	sp, #12
    7770:	af00      	add	r7, sp, #0
    7772:	6078      	str	r0, [r7, #4]
    7774:	460b      	mov	r3, r1
    7776:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7778:	687b      	ldr	r3, [r7, #4]
    777a:	78fa      	ldrb	r2, [r7, #3]
    777c:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    777e:	bf00      	nop
    7780:	370c      	adds	r7, #12
    7782:	46bd      	mov	sp, r7
    7784:	f85d 7b04 	ldr.w	r7, [sp], #4
    7788:	4770      	bx	lr

0000778a <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    778a:	b480      	push	{r7}
    778c:	b083      	sub	sp, #12
    778e:	af00      	add	r7, sp, #0
    7790:	6078      	str	r0, [r7, #4]
    7792:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7794:	687b      	ldr	r3, [r7, #4]
    7796:	683a      	ldr	r2, [r7, #0]
    7798:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    779a:	bf00      	nop
    779c:	370c      	adds	r7, #12
    779e:	46bd      	mov	sp, r7
    77a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    77a4:	4770      	bx	lr
	...

000077a8 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    77a8:	b580      	push	{r7, lr}
    77aa:	b082      	sub	sp, #8
    77ac:	af00      	add	r7, sp, #0
    77ae:	6078      	str	r0, [r7, #4]
    77b0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    77b2:	687b      	ldr	r3, [r7, #4]
    77b4:	683a      	ldr	r2, [r7, #0]
    77b6:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    77b8:	2180      	movs	r1, #128	; 0x80
    77ba:	6878      	ldr	r0, [r7, #4]
    77bc:	4b02      	ldr	r3, [pc, #8]	; (77c8 <hri_tcc_write_PER_reg+0x20>)
    77be:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    77c0:	bf00      	nop
    77c2:	3708      	adds	r7, #8
    77c4:	46bd      	mov	sp, r7
    77c6:	bd80      	pop	{r7, pc}
    77c8:	000075a5 	.word	0x000075a5

000077cc <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    77cc:	b580      	push	{r7, lr}
    77ce:	b082      	sub	sp, #8
    77d0:	af00      	add	r7, sp, #0
    77d2:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    77d4:	2180      	movs	r1, #128	; 0x80
    77d6:	6878      	ldr	r0, [r7, #4]
    77d8:	4b03      	ldr	r3, [pc, #12]	; (77e8 <hri_tcc_read_PER_reg+0x1c>)
    77da:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    77dc:	687b      	ldr	r3, [r7, #4]
    77de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    77e0:	4618      	mov	r0, r3
    77e2:	3708      	adds	r7, #8
    77e4:	46bd      	mov	sp, r7
    77e6:	bd80      	pop	{r7, pc}
    77e8:	000075a5 	.word	0x000075a5

000077ec <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    77ec:	b480      	push	{r7}
    77ee:	b083      	sub	sp, #12
    77f0:	af00      	add	r7, sp, #0
    77f2:	6078      	str	r0, [r7, #4]
    77f4:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	4a0c      	ldr	r2, [pc, #48]	; (782c <_tcc_init_irq_param+0x40>)
    77fa:	4293      	cmp	r3, r2
    77fc:	d102      	bne.n	7804 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    77fe:	4a0c      	ldr	r2, [pc, #48]	; (7830 <_tcc_init_irq_param+0x44>)
    7800:	683b      	ldr	r3, [r7, #0]
    7802:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7804:	687b      	ldr	r3, [r7, #4]
    7806:	4a0b      	ldr	r2, [pc, #44]	; (7834 <_tcc_init_irq_param+0x48>)
    7808:	4293      	cmp	r3, r2
    780a:	d102      	bne.n	7812 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    780c:	4a0a      	ldr	r2, [pc, #40]	; (7838 <_tcc_init_irq_param+0x4c>)
    780e:	683b      	ldr	r3, [r7, #0]
    7810:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    7812:	687b      	ldr	r3, [r7, #4]
    7814:	4a09      	ldr	r2, [pc, #36]	; (783c <_tcc_init_irq_param+0x50>)
    7816:	4293      	cmp	r3, r2
    7818:	d102      	bne.n	7820 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    781a:	4a09      	ldr	r2, [pc, #36]	; (7840 <_tcc_init_irq_param+0x54>)
    781c:	683b      	ldr	r3, [r7, #0]
    781e:	6013      	str	r3, [r2, #0]
	}
}
    7820:	bf00      	nop
    7822:	370c      	adds	r7, #12
    7824:	46bd      	mov	sp, r7
    7826:	f85d 7b04 	ldr.w	r7, [sp], #4
    782a:	4770      	bx	lr
    782c:	41016000 	.word	0x41016000
    7830:	200021b4 	.word	0x200021b4
    7834:	41018000 	.word	0x41018000
    7838:	200021b8 	.word	0x200021b8
    783c:	42000c00 	.word	0x42000c00
    7840:	200021bc 	.word	0x200021bc

00007844 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7844:	b580      	push	{r7, lr}
    7846:	b084      	sub	sp, #16
    7848:	af00      	add	r7, sp, #0
    784a:	6078      	str	r0, [r7, #4]
    784c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    784e:	6838      	ldr	r0, [r7, #0]
    7850:	4b33      	ldr	r3, [pc, #204]	; (7920 <_tcc_timer_init+0xdc>)
    7852:	4798      	blx	r3
    7854:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7856:	68fb      	ldr	r3, [r7, #12]
    7858:	2b00      	cmp	r3, #0
    785a:	d102      	bne.n	7862 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    785c:	f06f 0309 	mvn.w	r3, #9
    7860:	e05a      	b.n	7918 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7862:	687b      	ldr	r3, [r7, #4]
    7864:	683a      	ldr	r2, [r7, #0]
    7866:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7868:	2101      	movs	r1, #1
    786a:	6838      	ldr	r0, [r7, #0]
    786c:	4b2d      	ldr	r3, [pc, #180]	; (7924 <_tcc_timer_init+0xe0>)
    786e:	4798      	blx	r3
    7870:	4603      	mov	r3, r0
    7872:	f083 0301 	eor.w	r3, r3, #1
    7876:	b2db      	uxtb	r3, r3
    7878:	2b00      	cmp	r3, #0
    787a:	d011      	beq.n	78a0 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    787c:	2102      	movs	r1, #2
    787e:	6838      	ldr	r0, [r7, #0]
    7880:	4b29      	ldr	r3, [pc, #164]	; (7928 <_tcc_timer_init+0xe4>)
    7882:	4798      	blx	r3
    7884:	4603      	mov	r3, r0
    7886:	2b00      	cmp	r3, #0
    7888:	d006      	beq.n	7898 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    788a:	6838      	ldr	r0, [r7, #0]
    788c:	4b27      	ldr	r3, [pc, #156]	; (792c <_tcc_timer_init+0xe8>)
    788e:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7890:	2102      	movs	r1, #2
    7892:	6838      	ldr	r0, [r7, #0]
    7894:	4b26      	ldr	r3, [pc, #152]	; (7930 <_tcc_timer_init+0xec>)
    7896:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7898:	2101      	movs	r1, #1
    789a:	6838      	ldr	r0, [r7, #0]
    789c:	4b25      	ldr	r3, [pc, #148]	; (7934 <_tcc_timer_init+0xf0>)
    789e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    78a0:	2101      	movs	r1, #1
    78a2:	6838      	ldr	r0, [r7, #0]
    78a4:	4b22      	ldr	r3, [pc, #136]	; (7930 <_tcc_timer_init+0xec>)
    78a6:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    78a8:	68fb      	ldr	r3, [r7, #12]
    78aa:	689b      	ldr	r3, [r3, #8]
    78ac:	4619      	mov	r1, r3
    78ae:	6838      	ldr	r0, [r7, #0]
    78b0:	4b20      	ldr	r3, [pc, #128]	; (7934 <_tcc_timer_init+0xf0>)
    78b2:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    78b4:	68fb      	ldr	r3, [r7, #12]
    78b6:	7b1b      	ldrb	r3, [r3, #12]
    78b8:	4619      	mov	r1, r3
    78ba:	6838      	ldr	r0, [r7, #0]
    78bc:	4b1e      	ldr	r3, [pc, #120]	; (7938 <_tcc_timer_init+0xf4>)
    78be:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    78c0:	68fb      	ldr	r3, [r7, #12]
    78c2:	7b5b      	ldrb	r3, [r3, #13]
    78c4:	4619      	mov	r1, r3
    78c6:	6838      	ldr	r0, [r7, #0]
    78c8:	4b1c      	ldr	r3, [pc, #112]	; (793c <_tcc_timer_init+0xf8>)
    78ca:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    78cc:	68fb      	ldr	r3, [r7, #12]
    78ce:	691b      	ldr	r3, [r3, #16]
    78d0:	4619      	mov	r1, r3
    78d2:	6838      	ldr	r0, [r7, #0]
    78d4:	4b1a      	ldr	r3, [pc, #104]	; (7940 <_tcc_timer_init+0xfc>)
    78d6:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    78d8:	68fb      	ldr	r3, [r7, #12]
    78da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    78dc:	4619      	mov	r1, r3
    78de:	6838      	ldr	r0, [r7, #0]
    78e0:	4b18      	ldr	r3, [pc, #96]	; (7944 <_tcc_timer_init+0x100>)
    78e2:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    78e4:	6838      	ldr	r0, [r7, #0]
    78e6:	4b18      	ldr	r3, [pc, #96]	; (7948 <_tcc_timer_init+0x104>)
    78e8:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    78ea:	6879      	ldr	r1, [r7, #4]
    78ec:	6838      	ldr	r0, [r7, #0]
    78ee:	4b17      	ldr	r3, [pc, #92]	; (794c <_tcc_timer_init+0x108>)
    78f0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    78f2:	68fb      	ldr	r3, [r7, #12]
    78f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    78f8:	4618      	mov	r0, r3
    78fa:	4b15      	ldr	r3, [pc, #84]	; (7950 <_tcc_timer_init+0x10c>)
    78fc:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    78fe:	68fb      	ldr	r3, [r7, #12]
    7900:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7904:	4618      	mov	r0, r3
    7906:	4b13      	ldr	r3, [pc, #76]	; (7954 <_tcc_timer_init+0x110>)
    7908:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    790a:	68fb      	ldr	r3, [r7, #12]
    790c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7910:	4618      	mov	r0, r3
    7912:	4b11      	ldr	r3, [pc, #68]	; (7958 <_tcc_timer_init+0x114>)
    7914:	4798      	blx	r3

	return ERR_NONE;
    7916:	2300      	movs	r3, #0
}
    7918:	4618      	mov	r0, r3
    791a:	3710      	adds	r7, #16
    791c:	46bd      	mov	sp, r7
    791e:	bd80      	pop	{r7, pc}
    7920:	00007b29 	.word	0x00007b29
    7924:	000075c9 	.word	0x000075c9
    7928:	00007719 	.word	0x00007719
    792c:	000076f1 	.word	0x000076f1
    7930:	000075a5 	.word	0x000075a5
    7934:	00007749 	.word	0x00007749
    7938:	00007631 	.word	0x00007631
    793c:	0000776d 	.word	0x0000776d
    7940:	0000778b 	.word	0x0000778b
    7944:	000077a9 	.word	0x000077a9
    7948:	0000764f 	.word	0x0000764f
    794c:	000077ed 	.word	0x000077ed
    7950:	00007525 	.word	0x00007525
    7954:	00007569 	.word	0x00007569
    7958:	000074e9 	.word	0x000074e9

0000795c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    795c:	b580      	push	{r7, lr}
    795e:	b084      	sub	sp, #16
    7960:	af00      	add	r7, sp, #0
    7962:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7964:	687b      	ldr	r3, [r7, #4]
    7966:	68db      	ldr	r3, [r3, #12]
    7968:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    796a:	68f8      	ldr	r0, [r7, #12]
    796c:	4b0a      	ldr	r3, [pc, #40]	; (7998 <_tcc_timer_deinit+0x3c>)
    796e:	4798      	blx	r3
    7970:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7972:	68bb      	ldr	r3, [r7, #8]
    7974:	2b00      	cmp	r3, #0
    7976:	d00b      	beq.n	7990 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7978:	68bb      	ldr	r3, [r7, #8]
    797a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    797e:	4618      	mov	r0, r3
    7980:	4b06      	ldr	r3, [pc, #24]	; (799c <_tcc_timer_deinit+0x40>)
    7982:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7984:	68f8      	ldr	r0, [r7, #12]
    7986:	4b06      	ldr	r3, [pc, #24]	; (79a0 <_tcc_timer_deinit+0x44>)
    7988:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    798a:	68f8      	ldr	r0, [r7, #12]
    798c:	4b05      	ldr	r3, [pc, #20]	; (79a4 <_tcc_timer_deinit+0x48>)
    798e:	4798      	blx	r3
	}
}
    7990:	bf00      	nop
    7992:	3710      	adds	r7, #16
    7994:	46bd      	mov	sp, r7
    7996:	bd80      	pop	{r7, pc}
    7998:	00007b29 	.word	0x00007b29
    799c:	00007525 	.word	0x00007525
    79a0:	000076f1 	.word	0x000076f1
    79a4:	00007669 	.word	0x00007669

000079a8 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    79a8:	b580      	push	{r7, lr}
    79aa:	b082      	sub	sp, #8
    79ac:	af00      	add	r7, sp, #0
    79ae:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	68db      	ldr	r3, [r3, #12]
    79b4:	4618      	mov	r0, r3
    79b6:	4b03      	ldr	r3, [pc, #12]	; (79c4 <_tcc_timer_start+0x1c>)
    79b8:	4798      	blx	r3
}
    79ba:	bf00      	nop
    79bc:	3708      	adds	r7, #8
    79be:	46bd      	mov	sp, r7
    79c0:	bd80      	pop	{r7, pc}
    79c2:	bf00      	nop
    79c4:	00007691 	.word	0x00007691

000079c8 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    79c8:	b580      	push	{r7, lr}
    79ca:	b082      	sub	sp, #8
    79cc:	af00      	add	r7, sp, #0
    79ce:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    79d0:	687b      	ldr	r3, [r7, #4]
    79d2:	68db      	ldr	r3, [r3, #12]
    79d4:	4618      	mov	r0, r3
    79d6:	4b03      	ldr	r3, [pc, #12]	; (79e4 <_tcc_timer_stop+0x1c>)
    79d8:	4798      	blx	r3
}
    79da:	bf00      	nop
    79dc:	3708      	adds	r7, #8
    79de:	46bd      	mov	sp, r7
    79e0:	bd80      	pop	{r7, pc}
    79e2:	bf00      	nop
    79e4:	000076f1 	.word	0x000076f1

000079e8 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    79e8:	b580      	push	{r7, lr}
    79ea:	b082      	sub	sp, #8
    79ec:	af00      	add	r7, sp, #0
    79ee:	6078      	str	r0, [r7, #4]
    79f0:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    79f2:	687b      	ldr	r3, [r7, #4]
    79f4:	68db      	ldr	r3, [r3, #12]
    79f6:	6839      	ldr	r1, [r7, #0]
    79f8:	4618      	mov	r0, r3
    79fa:	4b03      	ldr	r3, [pc, #12]	; (7a08 <_tcc_timer_set_period+0x20>)
    79fc:	4798      	blx	r3
}
    79fe:	bf00      	nop
    7a00:	3708      	adds	r7, #8
    7a02:	46bd      	mov	sp, r7
    7a04:	bd80      	pop	{r7, pc}
    7a06:	bf00      	nop
    7a08:	000077a9 	.word	0x000077a9

00007a0c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7a0c:	b580      	push	{r7, lr}
    7a0e:	b082      	sub	sp, #8
    7a10:	af00      	add	r7, sp, #0
    7a12:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7a14:	687b      	ldr	r3, [r7, #4]
    7a16:	68db      	ldr	r3, [r3, #12]
    7a18:	4618      	mov	r0, r3
    7a1a:	4b03      	ldr	r3, [pc, #12]	; (7a28 <_tcc_timer_get_period+0x1c>)
    7a1c:	4798      	blx	r3
    7a1e:	4603      	mov	r3, r0
}
    7a20:	4618      	mov	r0, r3
    7a22:	3708      	adds	r7, #8
    7a24:	46bd      	mov	sp, r7
    7a26:	bd80      	pop	{r7, pc}
    7a28:	000077cd 	.word	0x000077cd

00007a2c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7a2c:	b580      	push	{r7, lr}
    7a2e:	b082      	sub	sp, #8
    7a30:	af00      	add	r7, sp, #0
    7a32:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7a34:	687b      	ldr	r3, [r7, #4]
    7a36:	68db      	ldr	r3, [r3, #12]
    7a38:	4618      	mov	r0, r3
    7a3a:	4b03      	ldr	r3, [pc, #12]	; (7a48 <_tcc_timer_is_started+0x1c>)
    7a3c:	4798      	blx	r3
    7a3e:	4603      	mov	r3, r0
}
    7a40:	4618      	mov	r0, r3
    7a42:	3708      	adds	r7, #8
    7a44:	46bd      	mov	sp, r7
    7a46:	bd80      	pop	{r7, pc}
    7a48:	000076b9 	.word	0x000076b9

00007a4c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7a4c:	b480      	push	{r7}
    7a4e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7a50:	4b02      	ldr	r3, [pc, #8]	; (7a5c <_tcc_get_timer+0x10>)
}
    7a52:	4618      	mov	r0, r3
    7a54:	46bd      	mov	sp, r7
    7a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a5a:	4770      	bx	lr
    7a5c:	200000f0 	.word	0x200000f0

00007a60 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7a60:	b580      	push	{r7, lr}
    7a62:	b084      	sub	sp, #16
    7a64:	af00      	add	r7, sp, #0
    7a66:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7a68:	687b      	ldr	r3, [r7, #4]
    7a6a:	68db      	ldr	r3, [r3, #12]
    7a6c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7a6e:	68f8      	ldr	r0, [r7, #12]
    7a70:	4b08      	ldr	r3, [pc, #32]	; (7a94 <_tcc_timer_set_irq+0x34>)
    7a72:	4798      	blx	r3
    7a74:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7a76:	68bb      	ldr	r3, [r7, #8]
    7a78:	2b00      	cmp	r3, #0
    7a7a:	d006      	beq.n	7a8a <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7a7c:	68bb      	ldr	r3, [r7, #8]
    7a7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7a82:	b2db      	uxtb	r3, r3
    7a84:	4618      	mov	r0, r3
    7a86:	4b04      	ldr	r3, [pc, #16]	; (7a98 <_tcc_timer_set_irq+0x38>)
    7a88:	4798      	blx	r3
	}
}
    7a8a:	bf00      	nop
    7a8c:	3710      	adds	r7, #16
    7a8e:	46bd      	mov	sp, r7
    7a90:	bd80      	pop	{r7, pc}
    7a92:	bf00      	nop
    7a94:	00007b29 	.word	0x00007b29
    7a98:	00004349 	.word	0x00004349

00007a9c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7a9c:	b580      	push	{r7, lr}
    7a9e:	b084      	sub	sp, #16
    7aa0:	af00      	add	r7, sp, #0
    7aa2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7aa4:	687b      	ldr	r3, [r7, #4]
    7aa6:	68db      	ldr	r3, [r3, #12]
    7aa8:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7aaa:	68f8      	ldr	r0, [r7, #12]
    7aac:	4b07      	ldr	r3, [pc, #28]	; (7acc <tcc_interrupt_handler+0x30>)
    7aae:	4798      	blx	r3
    7ab0:	4603      	mov	r3, r0
    7ab2:	2b00      	cmp	r3, #0
    7ab4:	d006      	beq.n	7ac4 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7ab6:	68f8      	ldr	r0, [r7, #12]
    7ab8:	4b05      	ldr	r3, [pc, #20]	; (7ad0 <tcc_interrupt_handler+0x34>)
    7aba:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7abc:	687b      	ldr	r3, [r7, #4]
    7abe:	681b      	ldr	r3, [r3, #0]
    7ac0:	6878      	ldr	r0, [r7, #4]
    7ac2:	4798      	blx	r3
	}
}
    7ac4:	bf00      	nop
    7ac6:	3710      	adds	r7, #16
    7ac8:	46bd      	mov	sp, r7
    7aca:	bd80      	pop	{r7, pc}
    7acc:	000075f1 	.word	0x000075f1
    7ad0:	00007617 	.word	0x00007617

00007ad4 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7ad4:	b580      	push	{r7, lr}
    7ad6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7ad8:	4b03      	ldr	r3, [pc, #12]	; (7ae8 <TCC0_0_Handler+0x14>)
    7ada:	681b      	ldr	r3, [r3, #0]
    7adc:	4618      	mov	r0, r3
    7ade:	4b03      	ldr	r3, [pc, #12]	; (7aec <TCC0_0_Handler+0x18>)
    7ae0:	4798      	blx	r3
}
    7ae2:	bf00      	nop
    7ae4:	bd80      	pop	{r7, pc}
    7ae6:	bf00      	nop
    7ae8:	200021b4 	.word	0x200021b4
    7aec:	00007a9d 	.word	0x00007a9d

00007af0 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7af0:	b580      	push	{r7, lr}
    7af2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7af4:	4b03      	ldr	r3, [pc, #12]	; (7b04 <TCC1_0_Handler+0x14>)
    7af6:	681b      	ldr	r3, [r3, #0]
    7af8:	4618      	mov	r0, r3
    7afa:	4b03      	ldr	r3, [pc, #12]	; (7b08 <TCC1_0_Handler+0x18>)
    7afc:	4798      	blx	r3
}
    7afe:	bf00      	nop
    7b00:	bd80      	pop	{r7, pc}
    7b02:	bf00      	nop
    7b04:	200021b8 	.word	0x200021b8
    7b08:	00007a9d 	.word	0x00007a9d

00007b0c <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    7b0c:	b580      	push	{r7, lr}
    7b0e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    7b10:	4b03      	ldr	r3, [pc, #12]	; (7b20 <TCC2_0_Handler+0x14>)
    7b12:	681b      	ldr	r3, [r3, #0]
    7b14:	4618      	mov	r0, r3
    7b16:	4b03      	ldr	r3, [pc, #12]	; (7b24 <TCC2_0_Handler+0x18>)
    7b18:	4798      	blx	r3
}
    7b1a:	bf00      	nop
    7b1c:	bd80      	pop	{r7, pc}
    7b1e:	bf00      	nop
    7b20:	200021bc 	.word	0x200021bc
    7b24:	00007a9d 	.word	0x00007a9d

00007b28 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7b28:	b480      	push	{r7}
    7b2a:	b085      	sub	sp, #20
    7b2c:	af00      	add	r7, sp, #0
    7b2e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7b30:	2300      	movs	r3, #0
    7b32:	73fb      	strb	r3, [r7, #15]
    7b34:	e015      	b.n	7b62 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    7b36:	7bfa      	ldrb	r2, [r7, #15]
    7b38:	490f      	ldr	r1, [pc, #60]	; (7b78 <_get_tcc_cfg+0x50>)
    7b3a:	4613      	mov	r3, r2
    7b3c:	005b      	lsls	r3, r3, #1
    7b3e:	4413      	add	r3, r2
    7b40:	011b      	lsls	r3, r3, #4
    7b42:	440b      	add	r3, r1
    7b44:	681a      	ldr	r2, [r3, #0]
    7b46:	687b      	ldr	r3, [r7, #4]
    7b48:	429a      	cmp	r2, r3
    7b4a:	d107      	bne.n	7b5c <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7b4c:	7bfa      	ldrb	r2, [r7, #15]
    7b4e:	4613      	mov	r3, r2
    7b50:	005b      	lsls	r3, r3, #1
    7b52:	4413      	add	r3, r2
    7b54:	011b      	lsls	r3, r3, #4
    7b56:	4a08      	ldr	r2, [pc, #32]	; (7b78 <_get_tcc_cfg+0x50>)
    7b58:	4413      	add	r3, r2
    7b5a:	e006      	b.n	7b6a <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7b5c:	7bfb      	ldrb	r3, [r7, #15]
    7b5e:	3301      	adds	r3, #1
    7b60:	73fb      	strb	r3, [r7, #15]
    7b62:	7bfb      	ldrb	r3, [r7, #15]
    7b64:	2b02      	cmp	r3, #2
    7b66:	d9e6      	bls.n	7b36 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7b68:	2300      	movs	r3, #0
}
    7b6a:	4618      	mov	r0, r3
    7b6c:	3714      	adds	r7, #20
    7b6e:	46bd      	mov	sp, r7
    7b70:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b74:	4770      	bx	lr
    7b76:	bf00      	nop
    7b78:	20000060 	.word	0x20000060

00007b7c <__NVIC_EnableIRQ>:
{
    7b7c:	b480      	push	{r7}
    7b7e:	b083      	sub	sp, #12
    7b80:	af00      	add	r7, sp, #0
    7b82:	4603      	mov	r3, r0
    7b84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b8a:	2b00      	cmp	r3, #0
    7b8c:	db0b      	blt.n	7ba6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7b8e:	4909      	ldr	r1, [pc, #36]	; (7bb4 <__NVIC_EnableIRQ+0x38>)
    7b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b94:	095b      	lsrs	r3, r3, #5
    7b96:	88fa      	ldrh	r2, [r7, #6]
    7b98:	f002 021f 	and.w	r2, r2, #31
    7b9c:	2001      	movs	r0, #1
    7b9e:	fa00 f202 	lsl.w	r2, r0, r2
    7ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7ba6:	bf00      	nop
    7ba8:	370c      	adds	r7, #12
    7baa:	46bd      	mov	sp, r7
    7bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bb0:	4770      	bx	lr
    7bb2:	bf00      	nop
    7bb4:	e000e100 	.word	0xe000e100

00007bb8 <__NVIC_DisableIRQ>:
{
    7bb8:	b480      	push	{r7}
    7bba:	b083      	sub	sp, #12
    7bbc:	af00      	add	r7, sp, #0
    7bbe:	4603      	mov	r3, r0
    7bc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bc6:	2b00      	cmp	r3, #0
    7bc8:	db10      	blt.n	7bec <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7bca:	490b      	ldr	r1, [pc, #44]	; (7bf8 <__NVIC_DisableIRQ+0x40>)
    7bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bd0:	095b      	lsrs	r3, r3, #5
    7bd2:	88fa      	ldrh	r2, [r7, #6]
    7bd4:	f002 021f 	and.w	r2, r2, #31
    7bd8:	2001      	movs	r0, #1
    7bda:	fa00 f202 	lsl.w	r2, r0, r2
    7bde:	3320      	adds	r3, #32
    7be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7be4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7be8:	f3bf 8f6f 	isb	sy
}
    7bec:	bf00      	nop
    7bee:	370c      	adds	r7, #12
    7bf0:	46bd      	mov	sp, r7
    7bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bf6:	4770      	bx	lr
    7bf8:	e000e100 	.word	0xe000e100

00007bfc <__NVIC_ClearPendingIRQ>:
{
    7bfc:	b480      	push	{r7}
    7bfe:	b083      	sub	sp, #12
    7c00:	af00      	add	r7, sp, #0
    7c02:	4603      	mov	r3, r0
    7c04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c0a:	2b00      	cmp	r3, #0
    7c0c:	db0c      	blt.n	7c28 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c0e:	4909      	ldr	r1, [pc, #36]	; (7c34 <__NVIC_ClearPendingIRQ+0x38>)
    7c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c14:	095b      	lsrs	r3, r3, #5
    7c16:	88fa      	ldrh	r2, [r7, #6]
    7c18:	f002 021f 	and.w	r2, r2, #31
    7c1c:	2001      	movs	r0, #1
    7c1e:	fa00 f202 	lsl.w	r2, r0, r2
    7c22:	3360      	adds	r3, #96	; 0x60
    7c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c28:	bf00      	nop
    7c2a:	370c      	adds	r7, #12
    7c2c:	46bd      	mov	sp, r7
    7c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c32:	4770      	bx	lr
    7c34:	e000e100 	.word	0xe000e100

00007c38 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7c38:	b480      	push	{r7}
    7c3a:	b083      	sub	sp, #12
    7c3c:	af00      	add	r7, sp, #0
    7c3e:	6078      	str	r0, [r7, #4]
    7c40:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7c42:	bf00      	nop
    7c44:	687b      	ldr	r3, [r7, #4]
    7c46:	691a      	ldr	r2, [r3, #16]
    7c48:	683b      	ldr	r3, [r7, #0]
    7c4a:	4013      	ands	r3, r2
    7c4c:	2b00      	cmp	r3, #0
    7c4e:	d1f9      	bne.n	7c44 <hri_tc_wait_for_sync+0xc>
	};
}
    7c50:	bf00      	nop
    7c52:	370c      	adds	r7, #12
    7c54:	46bd      	mov	sp, r7
    7c56:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c5a:	4770      	bx	lr

00007c5c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7c5c:	b480      	push	{r7}
    7c5e:	b083      	sub	sp, #12
    7c60:	af00      	add	r7, sp, #0
    7c62:	6078      	str	r0, [r7, #4]
    7c64:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7c66:	687b      	ldr	r3, [r7, #4]
    7c68:	691a      	ldr	r2, [r3, #16]
    7c6a:	683b      	ldr	r3, [r7, #0]
    7c6c:	4013      	ands	r3, r2
    7c6e:	2b00      	cmp	r3, #0
    7c70:	bf14      	ite	ne
    7c72:	2301      	movne	r3, #1
    7c74:	2300      	moveq	r3, #0
    7c76:	b2db      	uxtb	r3, r3
}
    7c78:	4618      	mov	r0, r3
    7c7a:	370c      	adds	r7, #12
    7c7c:	46bd      	mov	sp, r7
    7c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c82:	4770      	bx	lr

00007c84 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7c84:	b480      	push	{r7}
    7c86:	b083      	sub	sp, #12
    7c88:	af00      	add	r7, sp, #0
    7c8a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7c8c:	687b      	ldr	r3, [r7, #4]
    7c8e:	7a9b      	ldrb	r3, [r3, #10]
    7c90:	b2db      	uxtb	r3, r3
    7c92:	f003 0301 	and.w	r3, r3, #1
    7c96:	2b00      	cmp	r3, #0
    7c98:	bf14      	ite	ne
    7c9a:	2301      	movne	r3, #1
    7c9c:	2300      	moveq	r3, #0
    7c9e:	b2db      	uxtb	r3, r3
}
    7ca0:	4618      	mov	r0, r3
    7ca2:	370c      	adds	r7, #12
    7ca4:	46bd      	mov	sp, r7
    7ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7caa:	4770      	bx	lr

00007cac <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7cac:	b480      	push	{r7}
    7cae:	b083      	sub	sp, #12
    7cb0:	af00      	add	r7, sp, #0
    7cb2:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7cb4:	687b      	ldr	r3, [r7, #4]
    7cb6:	2201      	movs	r2, #1
    7cb8:	729a      	strb	r2, [r3, #10]
}
    7cba:	bf00      	nop
    7cbc:	370c      	adds	r7, #12
    7cbe:	46bd      	mov	sp, r7
    7cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cc4:	4770      	bx	lr

00007cc6 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7cc6:	b480      	push	{r7}
    7cc8:	b083      	sub	sp, #12
    7cca:	af00      	add	r7, sp, #0
    7ccc:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7cce:	687b      	ldr	r3, [r7, #4]
    7cd0:	2202      	movs	r2, #2
    7cd2:	729a      	strb	r2, [r3, #10]
}
    7cd4:	bf00      	nop
    7cd6:	370c      	adds	r7, #12
    7cd8:	46bd      	mov	sp, r7
    7cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cde:	4770      	bx	lr

00007ce0 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7ce0:	b480      	push	{r7}
    7ce2:	b083      	sub	sp, #12
    7ce4:	af00      	add	r7, sp, #0
    7ce6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7ce8:	687b      	ldr	r3, [r7, #4]
    7cea:	2201      	movs	r2, #1
    7cec:	725a      	strb	r2, [r3, #9]
}
    7cee:	bf00      	nop
    7cf0:	370c      	adds	r7, #12
    7cf2:	46bd      	mov	sp, r7
    7cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cf8:	4770      	bx	lr

00007cfa <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7cfa:	b480      	push	{r7}
    7cfc:	b083      	sub	sp, #12
    7cfe:	af00      	add	r7, sp, #0
    7d00:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	7a5b      	ldrb	r3, [r3, #9]
    7d06:	b2db      	uxtb	r3, r3
    7d08:	085b      	lsrs	r3, r3, #1
    7d0a:	f003 0301 	and.w	r3, r3, #1
    7d0e:	2b00      	cmp	r3, #0
    7d10:	bf14      	ite	ne
    7d12:	2301      	movne	r3, #1
    7d14:	2300      	moveq	r3, #0
    7d16:	b2db      	uxtb	r3, r3
}
    7d18:	4618      	mov	r0, r3
    7d1a:	370c      	adds	r7, #12
    7d1c:	46bd      	mov	sp, r7
    7d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d22:	4770      	bx	lr

00007d24 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7d24:	b580      	push	{r7, lr}
    7d26:	b082      	sub	sp, #8
    7d28:	af00      	add	r7, sp, #0
    7d2a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7d2c:	687b      	ldr	r3, [r7, #4]
    7d2e:	681b      	ldr	r3, [r3, #0]
    7d30:	f043 0201 	orr.w	r2, r3, #1
    7d34:	687b      	ldr	r3, [r7, #4]
    7d36:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7d38:	2101      	movs	r1, #1
    7d3a:	6878      	ldr	r0, [r7, #4]
    7d3c:	4b02      	ldr	r3, [pc, #8]	; (7d48 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7d3e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7d40:	bf00      	nop
    7d42:	3708      	adds	r7, #8
    7d44:	46bd      	mov	sp, r7
    7d46:	bd80      	pop	{r7, pc}
    7d48:	00007c39 	.word	0x00007c39

00007d4c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7d4c:	b580      	push	{r7, lr}
    7d4e:	b082      	sub	sp, #8
    7d50:	af00      	add	r7, sp, #0
    7d52:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7d54:	687b      	ldr	r3, [r7, #4]
    7d56:	681b      	ldr	r3, [r3, #0]
    7d58:	f043 0202 	orr.w	r2, r3, #2
    7d5c:	687b      	ldr	r3, [r7, #4]
    7d5e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7d60:	2103      	movs	r1, #3
    7d62:	6878      	ldr	r0, [r7, #4]
    7d64:	4b02      	ldr	r3, [pc, #8]	; (7d70 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7d66:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7d68:	bf00      	nop
    7d6a:	3708      	adds	r7, #8
    7d6c:	46bd      	mov	sp, r7
    7d6e:	bd80      	pop	{r7, pc}
    7d70:	00007c39 	.word	0x00007c39

00007d74 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7d74:	b580      	push	{r7, lr}
    7d76:	b084      	sub	sp, #16
    7d78:	af00      	add	r7, sp, #0
    7d7a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7d7c:	2103      	movs	r1, #3
    7d7e:	6878      	ldr	r0, [r7, #4]
    7d80:	4b09      	ldr	r3, [pc, #36]	; (7da8 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7d82:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7d84:	687b      	ldr	r3, [r7, #4]
    7d86:	681b      	ldr	r3, [r3, #0]
    7d88:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7d8a:	68fb      	ldr	r3, [r7, #12]
    7d8c:	085b      	lsrs	r3, r3, #1
    7d8e:	f003 0301 	and.w	r3, r3, #1
    7d92:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7d94:	68fb      	ldr	r3, [r7, #12]
    7d96:	2b00      	cmp	r3, #0
    7d98:	bf14      	ite	ne
    7d9a:	2301      	movne	r3, #1
    7d9c:	2300      	moveq	r3, #0
    7d9e:	b2db      	uxtb	r3, r3
}
    7da0:	4618      	mov	r0, r3
    7da2:	3710      	adds	r7, #16
    7da4:	46bd      	mov	sp, r7
    7da6:	bd80      	pop	{r7, pc}
    7da8:	00007c39 	.word	0x00007c39

00007dac <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7dac:	b580      	push	{r7, lr}
    7dae:	b082      	sub	sp, #8
    7db0:	af00      	add	r7, sp, #0
    7db2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7db4:	687b      	ldr	r3, [r7, #4]
    7db6:	681b      	ldr	r3, [r3, #0]
    7db8:	f023 0202 	bic.w	r2, r3, #2
    7dbc:	687b      	ldr	r3, [r7, #4]
    7dbe:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7dc0:	2103      	movs	r1, #3
    7dc2:	6878      	ldr	r0, [r7, #4]
    7dc4:	4b02      	ldr	r3, [pc, #8]	; (7dd0 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7dc6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7dc8:	bf00      	nop
    7dca:	3708      	adds	r7, #8
    7dcc:	46bd      	mov	sp, r7
    7dce:	bd80      	pop	{r7, pc}
    7dd0:	00007c39 	.word	0x00007c39

00007dd4 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7dd4:	b480      	push	{r7}
    7dd6:	b085      	sub	sp, #20
    7dd8:	af00      	add	r7, sp, #0
    7dda:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7ddc:	687b      	ldr	r3, [r7, #4]
    7dde:	681b      	ldr	r3, [r3, #0]
    7de0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7de2:	68fb      	ldr	r3, [r7, #12]
    7de4:	089b      	lsrs	r3, r3, #2
    7de6:	f003 0303 	and.w	r3, r3, #3
    7dea:	60fb      	str	r3, [r7, #12]
	return tmp;
    7dec:	68fb      	ldr	r3, [r7, #12]
}
    7dee:	4618      	mov	r0, r3
    7df0:	3714      	adds	r7, #20
    7df2:	46bd      	mov	sp, r7
    7df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7df8:	4770      	bx	lr
	...

00007dfc <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7dfc:	b580      	push	{r7, lr}
    7dfe:	b084      	sub	sp, #16
    7e00:	af00      	add	r7, sp, #0
    7e02:	6078      	str	r0, [r7, #4]
    7e04:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7e06:	2103      	movs	r1, #3
    7e08:	6878      	ldr	r0, [r7, #4]
    7e0a:	4b07      	ldr	r3, [pc, #28]	; (7e28 <hri_tc_get_CTRLA_reg+0x2c>)
    7e0c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	681b      	ldr	r3, [r3, #0]
    7e12:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7e14:	68fa      	ldr	r2, [r7, #12]
    7e16:	683b      	ldr	r3, [r7, #0]
    7e18:	4013      	ands	r3, r2
    7e1a:	60fb      	str	r3, [r7, #12]
	return tmp;
    7e1c:	68fb      	ldr	r3, [r7, #12]
}
    7e1e:	4618      	mov	r0, r3
    7e20:	3710      	adds	r7, #16
    7e22:	46bd      	mov	sp, r7
    7e24:	bd80      	pop	{r7, pc}
    7e26:	bf00      	nop
    7e28:	00007c39 	.word	0x00007c39

00007e2c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7e2c:	b580      	push	{r7, lr}
    7e2e:	b082      	sub	sp, #8
    7e30:	af00      	add	r7, sp, #0
    7e32:	6078      	str	r0, [r7, #4]
    7e34:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7e36:	687b      	ldr	r3, [r7, #4]
    7e38:	683a      	ldr	r2, [r7, #0]
    7e3a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7e3c:	2103      	movs	r1, #3
    7e3e:	6878      	ldr	r0, [r7, #4]
    7e40:	4b02      	ldr	r3, [pc, #8]	; (7e4c <hri_tc_write_CTRLA_reg+0x20>)
    7e42:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7e44:	bf00      	nop
    7e46:	3708      	adds	r7, #8
    7e48:	46bd      	mov	sp, r7
    7e4a:	bd80      	pop	{r7, pc}
    7e4c:	00007c39 	.word	0x00007c39

00007e50 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7e50:	b480      	push	{r7}
    7e52:	b083      	sub	sp, #12
    7e54:	af00      	add	r7, sp, #0
    7e56:	6078      	str	r0, [r7, #4]
    7e58:	460b      	mov	r3, r1
    7e5a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7e5c:	687b      	ldr	r3, [r7, #4]
    7e5e:	887a      	ldrh	r2, [r7, #2]
    7e60:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7e62:	bf00      	nop
    7e64:	370c      	adds	r7, #12
    7e66:	46bd      	mov	sp, r7
    7e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e6c:	4770      	bx	lr

00007e6e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7e6e:	b480      	push	{r7}
    7e70:	b083      	sub	sp, #12
    7e72:	af00      	add	r7, sp, #0
    7e74:	6078      	str	r0, [r7, #4]
    7e76:	460b      	mov	r3, r1
    7e78:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7e7a:	687b      	ldr	r3, [r7, #4]
    7e7c:	78fa      	ldrb	r2, [r7, #3]
    7e7e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7e80:	bf00      	nop
    7e82:	370c      	adds	r7, #12
    7e84:	46bd      	mov	sp, r7
    7e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e8a:	4770      	bx	lr

00007e8c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7e8c:	b480      	push	{r7}
    7e8e:	b083      	sub	sp, #12
    7e90:	af00      	add	r7, sp, #0
    7e92:	6078      	str	r0, [r7, #4]
    7e94:	460b      	mov	r3, r1
    7e96:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7e98:	687b      	ldr	r3, [r7, #4]
    7e9a:	78fa      	ldrb	r2, [r7, #3]
    7e9c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7e9e:	bf00      	nop
    7ea0:	370c      	adds	r7, #12
    7ea2:	46bd      	mov	sp, r7
    7ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ea8:	4770      	bx	lr
	...

00007eac <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7eac:	b580      	push	{r7, lr}
    7eae:	b082      	sub	sp, #8
    7eb0:	af00      	add	r7, sp, #0
    7eb2:	6078      	str	r0, [r7, #4]
    7eb4:	460b      	mov	r3, r1
    7eb6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7eb8:	687b      	ldr	r3, [r7, #4]
    7eba:	78fa      	ldrb	r2, [r7, #3]
    7ebc:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7ebe:	2120      	movs	r1, #32
    7ec0:	6878      	ldr	r0, [r7, #4]
    7ec2:	4b03      	ldr	r3, [pc, #12]	; (7ed0 <hri_tccount8_write_PER_reg+0x24>)
    7ec4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ec6:	bf00      	nop
    7ec8:	3708      	adds	r7, #8
    7eca:	46bd      	mov	sp, r7
    7ecc:	bd80      	pop	{r7, pc}
    7ece:	bf00      	nop
    7ed0:	00007c39 	.word	0x00007c39

00007ed4 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7ed4:	b580      	push	{r7, lr}
    7ed6:	b082      	sub	sp, #8
    7ed8:	af00      	add	r7, sp, #0
    7eda:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7edc:	2120      	movs	r1, #32
    7ede:	6878      	ldr	r0, [r7, #4]
    7ee0:	4b04      	ldr	r3, [pc, #16]	; (7ef4 <hri_tccount8_read_PER_reg+0x20>)
    7ee2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7ee4:	687b      	ldr	r3, [r7, #4]
    7ee6:	7edb      	ldrb	r3, [r3, #27]
    7ee8:	b2db      	uxtb	r3, r3
}
    7eea:	4618      	mov	r0, r3
    7eec:	3708      	adds	r7, #8
    7eee:	46bd      	mov	sp, r7
    7ef0:	bd80      	pop	{r7, pc}
    7ef2:	bf00      	nop
    7ef4:	00007c39 	.word	0x00007c39

00007ef8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7ef8:	b580      	push	{r7, lr}
    7efa:	b082      	sub	sp, #8
    7efc:	af00      	add	r7, sp, #0
    7efe:	6078      	str	r0, [r7, #4]
    7f00:	460b      	mov	r3, r1
    7f02:	70fb      	strb	r3, [r7, #3]
    7f04:	4613      	mov	r3, r2
    7f06:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7f08:	78fb      	ldrb	r3, [r7, #3]
    7f0a:	687a      	ldr	r2, [r7, #4]
    7f0c:	4413      	add	r3, r2
    7f0e:	78ba      	ldrb	r2, [r7, #2]
    7f10:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7f12:	21c0      	movs	r1, #192	; 0xc0
    7f14:	6878      	ldr	r0, [r7, #4]
    7f16:	4b03      	ldr	r3, [pc, #12]	; (7f24 <hri_tccount8_write_CC_reg+0x2c>)
    7f18:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7f1a:	bf00      	nop
    7f1c:	3708      	adds	r7, #8
    7f1e:	46bd      	mov	sp, r7
    7f20:	bd80      	pop	{r7, pc}
    7f22:	bf00      	nop
    7f24:	00007c39 	.word	0x00007c39

00007f28 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7f28:	b580      	push	{r7, lr}
    7f2a:	b082      	sub	sp, #8
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	6078      	str	r0, [r7, #4]
    7f30:	460b      	mov	r3, r1
    7f32:	70fb      	strb	r3, [r7, #3]
    7f34:	4613      	mov	r3, r2
    7f36:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7f38:	78fb      	ldrb	r3, [r7, #3]
    7f3a:	687a      	ldr	r2, [r7, #4]
    7f3c:	330c      	adds	r3, #12
    7f3e:	005b      	lsls	r3, r3, #1
    7f40:	4413      	add	r3, r2
    7f42:	883a      	ldrh	r2, [r7, #0]
    7f44:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7f46:	21c0      	movs	r1, #192	; 0xc0
    7f48:	6878      	ldr	r0, [r7, #4]
    7f4a:	4b03      	ldr	r3, [pc, #12]	; (7f58 <hri_tccount16_write_CC_reg+0x30>)
    7f4c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7f4e:	bf00      	nop
    7f50:	3708      	adds	r7, #8
    7f52:	46bd      	mov	sp, r7
    7f54:	bd80      	pop	{r7, pc}
    7f56:	bf00      	nop
    7f58:	00007c39 	.word	0x00007c39

00007f5c <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7f5c:	b580      	push	{r7, lr}
    7f5e:	b082      	sub	sp, #8
    7f60:	af00      	add	r7, sp, #0
    7f62:	6078      	str	r0, [r7, #4]
    7f64:	460b      	mov	r3, r1
    7f66:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7f68:	21c0      	movs	r1, #192	; 0xc0
    7f6a:	6878      	ldr	r0, [r7, #4]
    7f6c:	4b06      	ldr	r3, [pc, #24]	; (7f88 <hri_tccount16_read_CC_reg+0x2c>)
    7f6e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7f70:	78fb      	ldrb	r3, [r7, #3]
    7f72:	687a      	ldr	r2, [r7, #4]
    7f74:	330c      	adds	r3, #12
    7f76:	005b      	lsls	r3, r3, #1
    7f78:	4413      	add	r3, r2
    7f7a:	889b      	ldrh	r3, [r3, #4]
    7f7c:	b29b      	uxth	r3, r3
}
    7f7e:	4618      	mov	r0, r3
    7f80:	3708      	adds	r7, #8
    7f82:	46bd      	mov	sp, r7
    7f84:	bd80      	pop	{r7, pc}
    7f86:	bf00      	nop
    7f88:	00007c39 	.word	0x00007c39

00007f8c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7f8c:	b580      	push	{r7, lr}
    7f8e:	b084      	sub	sp, #16
    7f90:	af00      	add	r7, sp, #0
    7f92:	60f8      	str	r0, [r7, #12]
    7f94:	460b      	mov	r3, r1
    7f96:	607a      	str	r2, [r7, #4]
    7f98:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7f9a:	7afb      	ldrb	r3, [r7, #11]
    7f9c:	68fa      	ldr	r2, [r7, #12]
    7f9e:	3306      	adds	r3, #6
    7fa0:	009b      	lsls	r3, r3, #2
    7fa2:	4413      	add	r3, r2
    7fa4:	687a      	ldr	r2, [r7, #4]
    7fa6:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7fa8:	21c0      	movs	r1, #192	; 0xc0
    7faa:	68f8      	ldr	r0, [r7, #12]
    7fac:	4b02      	ldr	r3, [pc, #8]	; (7fb8 <hri_tccount32_write_CC_reg+0x2c>)
    7fae:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7fb0:	bf00      	nop
    7fb2:	3710      	adds	r7, #16
    7fb4:	46bd      	mov	sp, r7
    7fb6:	bd80      	pop	{r7, pc}
    7fb8:	00007c39 	.word	0x00007c39

00007fbc <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7fbc:	b580      	push	{r7, lr}
    7fbe:	b082      	sub	sp, #8
    7fc0:	af00      	add	r7, sp, #0
    7fc2:	6078      	str	r0, [r7, #4]
    7fc4:	460b      	mov	r3, r1
    7fc6:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7fc8:	21c0      	movs	r1, #192	; 0xc0
    7fca:	6878      	ldr	r0, [r7, #4]
    7fcc:	4b05      	ldr	r3, [pc, #20]	; (7fe4 <hri_tccount32_read_CC_reg+0x28>)
    7fce:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7fd0:	78fb      	ldrb	r3, [r7, #3]
    7fd2:	687a      	ldr	r2, [r7, #4]
    7fd4:	3306      	adds	r3, #6
    7fd6:	009b      	lsls	r3, r3, #2
    7fd8:	4413      	add	r3, r2
    7fda:	685b      	ldr	r3, [r3, #4]
}
    7fdc:	4618      	mov	r0, r3
    7fde:	3708      	adds	r7, #8
    7fe0:	46bd      	mov	sp, r7
    7fe2:	bd80      	pop	{r7, pc}
    7fe4:	00007c39 	.word	0x00007c39

00007fe8 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7fe8:	b580      	push	{r7, lr}
    7fea:	b084      	sub	sp, #16
    7fec:	af00      	add	r7, sp, #0
    7fee:	6078      	str	r0, [r7, #4]
    7ff0:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7ff2:	6838      	ldr	r0, [r7, #0]
    7ff4:	4b93      	ldr	r3, [pc, #588]	; (8244 <_tc_timer_init+0x25c>)
    7ff6:	4798      	blx	r3
    7ff8:	4603      	mov	r3, r0
    7ffa:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	683a      	ldr	r2, [r7, #0]
    8000:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    8002:	22a4      	movs	r2, #164	; 0xa4
    8004:	4990      	ldr	r1, [pc, #576]	; (8248 <_tc_timer_init+0x260>)
    8006:	2001      	movs	r0, #1
    8008:	4b90      	ldr	r3, [pc, #576]	; (824c <_tc_timer_init+0x264>)
    800a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    800c:	2101      	movs	r1, #1
    800e:	6838      	ldr	r0, [r7, #0]
    8010:	4b8f      	ldr	r3, [pc, #572]	; (8250 <_tc_timer_init+0x268>)
    8012:	4798      	blx	r3
    8014:	4603      	mov	r3, r0
    8016:	f083 0301 	eor.w	r3, r3, #1
    801a:	b2db      	uxtb	r3, r3
    801c:	2b00      	cmp	r3, #0
    801e:	d011      	beq.n	8044 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8020:	2102      	movs	r1, #2
    8022:	6838      	ldr	r0, [r7, #0]
    8024:	4b8b      	ldr	r3, [pc, #556]	; (8254 <_tc_timer_init+0x26c>)
    8026:	4798      	blx	r3
    8028:	4603      	mov	r3, r0
    802a:	2b00      	cmp	r3, #0
    802c:	d006      	beq.n	803c <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    802e:	6838      	ldr	r0, [r7, #0]
    8030:	4b89      	ldr	r3, [pc, #548]	; (8258 <_tc_timer_init+0x270>)
    8032:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8034:	2102      	movs	r1, #2
    8036:	6838      	ldr	r0, [r7, #0]
    8038:	4b88      	ldr	r3, [pc, #544]	; (825c <_tc_timer_init+0x274>)
    803a:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    803c:	2101      	movs	r1, #1
    803e:	6838      	ldr	r0, [r7, #0]
    8040:	4b87      	ldr	r3, [pc, #540]	; (8260 <_tc_timer_init+0x278>)
    8042:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8044:	2101      	movs	r1, #1
    8046:	6838      	ldr	r0, [r7, #0]
    8048:	4b84      	ldr	r3, [pc, #528]	; (825c <_tc_timer_init+0x274>)
    804a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    804c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8050:	4984      	ldr	r1, [pc, #528]	; (8264 <_tc_timer_init+0x27c>)
    8052:	4613      	mov	r3, r2
    8054:	009b      	lsls	r3, r3, #2
    8056:	4413      	add	r3, r2
    8058:	009b      	lsls	r3, r3, #2
    805a:	440b      	add	r3, r1
    805c:	3304      	adds	r3, #4
    805e:	681b      	ldr	r3, [r3, #0]
    8060:	4619      	mov	r1, r3
    8062:	6838      	ldr	r0, [r7, #0]
    8064:	4b7e      	ldr	r3, [pc, #504]	; (8260 <_tc_timer_init+0x278>)
    8066:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8068:	f997 200f 	ldrsb.w	r2, [r7, #15]
    806c:	497d      	ldr	r1, [pc, #500]	; (8264 <_tc_timer_init+0x27c>)
    806e:	4613      	mov	r3, r2
    8070:	009b      	lsls	r3, r3, #2
    8072:	4413      	add	r3, r2
    8074:	009b      	lsls	r3, r3, #2
    8076:	440b      	add	r3, r1
    8078:	330a      	adds	r3, #10
    807a:	781b      	ldrb	r3, [r3, #0]
    807c:	4619      	mov	r1, r3
    807e:	6838      	ldr	r0, [r7, #0]
    8080:	4b79      	ldr	r3, [pc, #484]	; (8268 <_tc_timer_init+0x280>)
    8082:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8084:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8088:	4976      	ldr	r1, [pc, #472]	; (8264 <_tc_timer_init+0x27c>)
    808a:	4613      	mov	r3, r2
    808c:	009b      	lsls	r3, r3, #2
    808e:	4413      	add	r3, r2
    8090:	009b      	lsls	r3, r3, #2
    8092:	440b      	add	r3, r1
    8094:	3308      	adds	r3, #8
    8096:	881b      	ldrh	r3, [r3, #0]
    8098:	4619      	mov	r1, r3
    809a:	6838      	ldr	r0, [r7, #0]
    809c:	4b73      	ldr	r3, [pc, #460]	; (826c <_tc_timer_init+0x284>)
    809e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    80a0:	2101      	movs	r1, #1
    80a2:	6838      	ldr	r0, [r7, #0]
    80a4:	4b72      	ldr	r3, [pc, #456]	; (8270 <_tc_timer_init+0x288>)
    80a6:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    80a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80ac:	496d      	ldr	r1, [pc, #436]	; (8264 <_tc_timer_init+0x27c>)
    80ae:	4613      	mov	r3, r2
    80b0:	009b      	lsls	r3, r3, #2
    80b2:	4413      	add	r3, r2
    80b4:	009b      	lsls	r3, r3, #2
    80b6:	440b      	add	r3, r1
    80b8:	3304      	adds	r3, #4
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	f003 030c 	and.w	r3, r3, #12
    80c0:	2b08      	cmp	r3, #8
    80c2:	d11e      	bne.n	8102 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    80c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80c8:	4966      	ldr	r1, [pc, #408]	; (8264 <_tc_timer_init+0x27c>)
    80ca:	4613      	mov	r3, r2
    80cc:	009b      	lsls	r3, r3, #2
    80ce:	4413      	add	r3, r2
    80d0:	009b      	lsls	r3, r3, #2
    80d2:	440b      	add	r3, r1
    80d4:	330c      	adds	r3, #12
    80d6:	681b      	ldr	r3, [r3, #0]
    80d8:	461a      	mov	r2, r3
    80da:	2100      	movs	r1, #0
    80dc:	6838      	ldr	r0, [r7, #0]
    80de:	4b65      	ldr	r3, [pc, #404]	; (8274 <_tc_timer_init+0x28c>)
    80e0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    80e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80e6:	495f      	ldr	r1, [pc, #380]	; (8264 <_tc_timer_init+0x27c>)
    80e8:	4613      	mov	r3, r2
    80ea:	009b      	lsls	r3, r3, #2
    80ec:	4413      	add	r3, r2
    80ee:	009b      	lsls	r3, r3, #2
    80f0:	440b      	add	r3, r1
    80f2:	3310      	adds	r3, #16
    80f4:	681b      	ldr	r3, [r3, #0]
    80f6:	461a      	mov	r2, r3
    80f8:	2101      	movs	r1, #1
    80fa:	6838      	ldr	r0, [r7, #0]
    80fc:	4b5d      	ldr	r3, [pc, #372]	; (8274 <_tc_timer_init+0x28c>)
    80fe:	4798      	blx	r3
    8100:	e06a      	b.n	81d8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8102:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8106:	4957      	ldr	r1, [pc, #348]	; (8264 <_tc_timer_init+0x27c>)
    8108:	4613      	mov	r3, r2
    810a:	009b      	lsls	r3, r3, #2
    810c:	4413      	add	r3, r2
    810e:	009b      	lsls	r3, r3, #2
    8110:	440b      	add	r3, r1
    8112:	3304      	adds	r3, #4
    8114:	681b      	ldr	r3, [r3, #0]
    8116:	f003 030c 	and.w	r3, r3, #12
    811a:	2b00      	cmp	r3, #0
    811c:	d120      	bne.n	8160 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    811e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8122:	4950      	ldr	r1, [pc, #320]	; (8264 <_tc_timer_init+0x27c>)
    8124:	4613      	mov	r3, r2
    8126:	009b      	lsls	r3, r3, #2
    8128:	4413      	add	r3, r2
    812a:	009b      	lsls	r3, r3, #2
    812c:	440b      	add	r3, r1
    812e:	330c      	adds	r3, #12
    8130:	681b      	ldr	r3, [r3, #0]
    8132:	b29b      	uxth	r3, r3
    8134:	461a      	mov	r2, r3
    8136:	2100      	movs	r1, #0
    8138:	6838      	ldr	r0, [r7, #0]
    813a:	4b4f      	ldr	r3, [pc, #316]	; (8278 <_tc_timer_init+0x290>)
    813c:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    813e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8142:	4948      	ldr	r1, [pc, #288]	; (8264 <_tc_timer_init+0x27c>)
    8144:	4613      	mov	r3, r2
    8146:	009b      	lsls	r3, r3, #2
    8148:	4413      	add	r3, r2
    814a:	009b      	lsls	r3, r3, #2
    814c:	440b      	add	r3, r1
    814e:	3310      	adds	r3, #16
    8150:	681b      	ldr	r3, [r3, #0]
    8152:	b29b      	uxth	r3, r3
    8154:	461a      	mov	r2, r3
    8156:	2101      	movs	r1, #1
    8158:	6838      	ldr	r0, [r7, #0]
    815a:	4b47      	ldr	r3, [pc, #284]	; (8278 <_tc_timer_init+0x290>)
    815c:	4798      	blx	r3
    815e:	e03b      	b.n	81d8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8160:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8164:	493f      	ldr	r1, [pc, #252]	; (8264 <_tc_timer_init+0x27c>)
    8166:	4613      	mov	r3, r2
    8168:	009b      	lsls	r3, r3, #2
    816a:	4413      	add	r3, r2
    816c:	009b      	lsls	r3, r3, #2
    816e:	440b      	add	r3, r1
    8170:	3304      	adds	r3, #4
    8172:	681b      	ldr	r3, [r3, #0]
    8174:	f003 030c 	and.w	r3, r3, #12
    8178:	2b04      	cmp	r3, #4
    817a:	d12d      	bne.n	81d8 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    817c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8180:	4938      	ldr	r1, [pc, #224]	; (8264 <_tc_timer_init+0x27c>)
    8182:	4613      	mov	r3, r2
    8184:	009b      	lsls	r3, r3, #2
    8186:	4413      	add	r3, r2
    8188:	009b      	lsls	r3, r3, #2
    818a:	440b      	add	r3, r1
    818c:	330c      	adds	r3, #12
    818e:	681b      	ldr	r3, [r3, #0]
    8190:	b2db      	uxtb	r3, r3
    8192:	461a      	mov	r2, r3
    8194:	2100      	movs	r1, #0
    8196:	6838      	ldr	r0, [r7, #0]
    8198:	4b38      	ldr	r3, [pc, #224]	; (827c <_tc_timer_init+0x294>)
    819a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    819c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    81a0:	4930      	ldr	r1, [pc, #192]	; (8264 <_tc_timer_init+0x27c>)
    81a2:	4613      	mov	r3, r2
    81a4:	009b      	lsls	r3, r3, #2
    81a6:	4413      	add	r3, r2
    81a8:	009b      	lsls	r3, r3, #2
    81aa:	440b      	add	r3, r1
    81ac:	3310      	adds	r3, #16
    81ae:	681b      	ldr	r3, [r3, #0]
    81b0:	b2db      	uxtb	r3, r3
    81b2:	461a      	mov	r2, r3
    81b4:	2101      	movs	r1, #1
    81b6:	6838      	ldr	r0, [r7, #0]
    81b8:	4b30      	ldr	r3, [pc, #192]	; (827c <_tc_timer_init+0x294>)
    81ba:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    81bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    81c0:	4928      	ldr	r1, [pc, #160]	; (8264 <_tc_timer_init+0x27c>)
    81c2:	4613      	mov	r3, r2
    81c4:	009b      	lsls	r3, r3, #2
    81c6:	4413      	add	r3, r2
    81c8:	009b      	lsls	r3, r3, #2
    81ca:	440b      	add	r3, r1
    81cc:	330b      	adds	r3, #11
    81ce:	781b      	ldrb	r3, [r3, #0]
    81d0:	4619      	mov	r1, r3
    81d2:	6838      	ldr	r0, [r7, #0]
    81d4:	4b2a      	ldr	r3, [pc, #168]	; (8280 <_tc_timer_init+0x298>)
    81d6:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    81d8:	6838      	ldr	r0, [r7, #0]
    81da:	4b2a      	ldr	r3, [pc, #168]	; (8284 <_tc_timer_init+0x29c>)
    81dc:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    81de:	6879      	ldr	r1, [r7, #4]
    81e0:	6838      	ldr	r0, [r7, #0]
    81e2:	4b29      	ldr	r3, [pc, #164]	; (8288 <_tc_timer_init+0x2a0>)
    81e4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    81e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    81ea:	491e      	ldr	r1, [pc, #120]	; (8264 <_tc_timer_init+0x27c>)
    81ec:	4613      	mov	r3, r2
    81ee:	009b      	lsls	r3, r3, #2
    81f0:	4413      	add	r3, r2
    81f2:	009b      	lsls	r3, r3, #2
    81f4:	440b      	add	r3, r1
    81f6:	3302      	adds	r3, #2
    81f8:	f9b3 3000 	ldrsh.w	r3, [r3]
    81fc:	4618      	mov	r0, r3
    81fe:	4b23      	ldr	r3, [pc, #140]	; (828c <_tc_timer_init+0x2a4>)
    8200:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8202:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8206:	4917      	ldr	r1, [pc, #92]	; (8264 <_tc_timer_init+0x27c>)
    8208:	4613      	mov	r3, r2
    820a:	009b      	lsls	r3, r3, #2
    820c:	4413      	add	r3, r2
    820e:	009b      	lsls	r3, r3, #2
    8210:	440b      	add	r3, r1
    8212:	3302      	adds	r3, #2
    8214:	f9b3 3000 	ldrsh.w	r3, [r3]
    8218:	4618      	mov	r0, r3
    821a:	4b1d      	ldr	r3, [pc, #116]	; (8290 <_tc_timer_init+0x2a8>)
    821c:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    821e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8222:	4910      	ldr	r1, [pc, #64]	; (8264 <_tc_timer_init+0x27c>)
    8224:	4613      	mov	r3, r2
    8226:	009b      	lsls	r3, r3, #2
    8228:	4413      	add	r3, r2
    822a:	009b      	lsls	r3, r3, #2
    822c:	440b      	add	r3, r1
    822e:	3302      	adds	r3, #2
    8230:	f9b3 3000 	ldrsh.w	r3, [r3]
    8234:	4618      	mov	r0, r3
    8236:	4b17      	ldr	r3, [pc, #92]	; (8294 <_tc_timer_init+0x2ac>)
    8238:	4798      	blx	r3

	return ERR_NONE;
    823a:	2300      	movs	r3, #0
}
    823c:	4618      	mov	r0, r3
    823e:	3710      	adds	r7, #16
    8240:	46bd      	mov	sp, r7
    8242:	bd80      	pop	{r7, pc}
    8244:	00008839 	.word	0x00008839
    8248:	00010a60 	.word	0x00010a60
    824c:	00003b01 	.word	0x00003b01
    8250:	00007c5d 	.word	0x00007c5d
    8254:	00007dfd 	.word	0x00007dfd
    8258:	00007dad 	.word	0x00007dad
    825c:	00007c39 	.word	0x00007c39
    8260:	00007e2d 	.word	0x00007e2d
    8264:	20000110 	.word	0x20000110
    8268:	00007e8d 	.word	0x00007e8d
    826c:	00007e51 	.word	0x00007e51
    8270:	00007e6f 	.word	0x00007e6f
    8274:	00007f8d 	.word	0x00007f8d
    8278:	00007f29 	.word	0x00007f29
    827c:	00007ef9 	.word	0x00007ef9
    8280:	00007ead 	.word	0x00007ead
    8284:	00007ce1 	.word	0x00007ce1
    8288:	000088a1 	.word	0x000088a1
    828c:	00007bb9 	.word	0x00007bb9
    8290:	00007bfd 	.word	0x00007bfd
    8294:	00007b7d 	.word	0x00007b7d

00008298 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    8298:	b580      	push	{r7, lr}
    829a:	b084      	sub	sp, #16
    829c:	af00      	add	r7, sp, #0
    829e:	6078      	str	r0, [r7, #4]
    82a0:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    82a2:	6838      	ldr	r0, [r7, #0]
    82a4:	4b73      	ldr	r3, [pc, #460]	; (8474 <_pwm_init+0x1dc>)
    82a6:	4798      	blx	r3
    82a8:	4603      	mov	r3, r0
    82aa:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    82ac:	687b      	ldr	r3, [r7, #4]
    82ae:	683a      	ldr	r2, [r7, #0]
    82b0:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    82b2:	2101      	movs	r1, #1
    82b4:	6838      	ldr	r0, [r7, #0]
    82b6:	4b70      	ldr	r3, [pc, #448]	; (8478 <_pwm_init+0x1e0>)
    82b8:	4798      	blx	r3
    82ba:	4603      	mov	r3, r0
    82bc:	f083 0301 	eor.w	r3, r3, #1
    82c0:	b2db      	uxtb	r3, r3
    82c2:	2b00      	cmp	r3, #0
    82c4:	d011      	beq.n	82ea <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    82c6:	2102      	movs	r1, #2
    82c8:	6838      	ldr	r0, [r7, #0]
    82ca:	4b6c      	ldr	r3, [pc, #432]	; (847c <_pwm_init+0x1e4>)
    82cc:	4798      	blx	r3
    82ce:	4603      	mov	r3, r0
    82d0:	2b00      	cmp	r3, #0
    82d2:	d006      	beq.n	82e2 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    82d4:	6838      	ldr	r0, [r7, #0]
    82d6:	4b6a      	ldr	r3, [pc, #424]	; (8480 <_pwm_init+0x1e8>)
    82d8:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    82da:	2102      	movs	r1, #2
    82dc:	6838      	ldr	r0, [r7, #0]
    82de:	4b69      	ldr	r3, [pc, #420]	; (8484 <_pwm_init+0x1ec>)
    82e0:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    82e2:	2101      	movs	r1, #1
    82e4:	6838      	ldr	r0, [r7, #0]
    82e6:	4b68      	ldr	r3, [pc, #416]	; (8488 <_pwm_init+0x1f0>)
    82e8:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    82ea:	2101      	movs	r1, #1
    82ec:	6838      	ldr	r0, [r7, #0]
    82ee:	4b65      	ldr	r3, [pc, #404]	; (8484 <_pwm_init+0x1ec>)
    82f0:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    82f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82f6:	4965      	ldr	r1, [pc, #404]	; (848c <_pwm_init+0x1f4>)
    82f8:	4613      	mov	r3, r2
    82fa:	009b      	lsls	r3, r3, #2
    82fc:	4413      	add	r3, r2
    82fe:	009b      	lsls	r3, r3, #2
    8300:	440b      	add	r3, r1
    8302:	3304      	adds	r3, #4
    8304:	681b      	ldr	r3, [r3, #0]
    8306:	4619      	mov	r1, r3
    8308:	6838      	ldr	r0, [r7, #0]
    830a:	4b5f      	ldr	r3, [pc, #380]	; (8488 <_pwm_init+0x1f0>)
    830c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    830e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8312:	495e      	ldr	r1, [pc, #376]	; (848c <_pwm_init+0x1f4>)
    8314:	4613      	mov	r3, r2
    8316:	009b      	lsls	r3, r3, #2
    8318:	4413      	add	r3, r2
    831a:	009b      	lsls	r3, r3, #2
    831c:	440b      	add	r3, r1
    831e:	330a      	adds	r3, #10
    8320:	781b      	ldrb	r3, [r3, #0]
    8322:	4619      	mov	r1, r3
    8324:	6838      	ldr	r0, [r7, #0]
    8326:	4b5a      	ldr	r3, [pc, #360]	; (8490 <_pwm_init+0x1f8>)
    8328:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    832a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    832e:	4957      	ldr	r1, [pc, #348]	; (848c <_pwm_init+0x1f4>)
    8330:	4613      	mov	r3, r2
    8332:	009b      	lsls	r3, r3, #2
    8334:	4413      	add	r3, r2
    8336:	009b      	lsls	r3, r3, #2
    8338:	440b      	add	r3, r1
    833a:	3308      	adds	r3, #8
    833c:	881b      	ldrh	r3, [r3, #0]
    833e:	4619      	mov	r1, r3
    8340:	6838      	ldr	r0, [r7, #0]
    8342:	4b54      	ldr	r3, [pc, #336]	; (8494 <_pwm_init+0x1fc>)
    8344:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    8346:	2103      	movs	r1, #3
    8348:	6838      	ldr	r0, [r7, #0]
    834a:	4b53      	ldr	r3, [pc, #332]	; (8498 <_pwm_init+0x200>)
    834c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    834e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8352:	494e      	ldr	r1, [pc, #312]	; (848c <_pwm_init+0x1f4>)
    8354:	4613      	mov	r3, r2
    8356:	009b      	lsls	r3, r3, #2
    8358:	4413      	add	r3, r2
    835a:	009b      	lsls	r3, r3, #2
    835c:	440b      	add	r3, r1
    835e:	3304      	adds	r3, #4
    8360:	681b      	ldr	r3, [r3, #0]
    8362:	f003 030c 	and.w	r3, r3, #12
    8366:	2b08      	cmp	r3, #8
    8368:	d11e      	bne.n	83a8 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    836a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    836e:	4947      	ldr	r1, [pc, #284]	; (848c <_pwm_init+0x1f4>)
    8370:	4613      	mov	r3, r2
    8372:	009b      	lsls	r3, r3, #2
    8374:	4413      	add	r3, r2
    8376:	009b      	lsls	r3, r3, #2
    8378:	440b      	add	r3, r1
    837a:	330c      	adds	r3, #12
    837c:	681b      	ldr	r3, [r3, #0]
    837e:	461a      	mov	r2, r3
    8380:	2100      	movs	r1, #0
    8382:	6838      	ldr	r0, [r7, #0]
    8384:	4b45      	ldr	r3, [pc, #276]	; (849c <_pwm_init+0x204>)
    8386:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8388:	f997 200f 	ldrsb.w	r2, [r7, #15]
    838c:	493f      	ldr	r1, [pc, #252]	; (848c <_pwm_init+0x1f4>)
    838e:	4613      	mov	r3, r2
    8390:	009b      	lsls	r3, r3, #2
    8392:	4413      	add	r3, r2
    8394:	009b      	lsls	r3, r3, #2
    8396:	440b      	add	r3, r1
    8398:	3310      	adds	r3, #16
    839a:	681b      	ldr	r3, [r3, #0]
    839c:	461a      	mov	r2, r3
    839e:	2101      	movs	r1, #1
    83a0:	6838      	ldr	r0, [r7, #0]
    83a2:	4b3e      	ldr	r3, [pc, #248]	; (849c <_pwm_init+0x204>)
    83a4:	4798      	blx	r3
    83a6:	e031      	b.n	840c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    83a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83ac:	4937      	ldr	r1, [pc, #220]	; (848c <_pwm_init+0x1f4>)
    83ae:	4613      	mov	r3, r2
    83b0:	009b      	lsls	r3, r3, #2
    83b2:	4413      	add	r3, r2
    83b4:	009b      	lsls	r3, r3, #2
    83b6:	440b      	add	r3, r1
    83b8:	3304      	adds	r3, #4
    83ba:	681b      	ldr	r3, [r3, #0]
    83bc:	f003 030c 	and.w	r3, r3, #12
    83c0:	2b00      	cmp	r3, #0
    83c2:	d120      	bne.n	8406 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    83c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83c8:	4930      	ldr	r1, [pc, #192]	; (848c <_pwm_init+0x1f4>)
    83ca:	4613      	mov	r3, r2
    83cc:	009b      	lsls	r3, r3, #2
    83ce:	4413      	add	r3, r2
    83d0:	009b      	lsls	r3, r3, #2
    83d2:	440b      	add	r3, r1
    83d4:	330c      	adds	r3, #12
    83d6:	681b      	ldr	r3, [r3, #0]
    83d8:	b29b      	uxth	r3, r3
    83da:	461a      	mov	r2, r3
    83dc:	2100      	movs	r1, #0
    83de:	6838      	ldr	r0, [r7, #0]
    83e0:	4b2f      	ldr	r3, [pc, #188]	; (84a0 <_pwm_init+0x208>)
    83e2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    83e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83e8:	4928      	ldr	r1, [pc, #160]	; (848c <_pwm_init+0x1f4>)
    83ea:	4613      	mov	r3, r2
    83ec:	009b      	lsls	r3, r3, #2
    83ee:	4413      	add	r3, r2
    83f0:	009b      	lsls	r3, r3, #2
    83f2:	440b      	add	r3, r1
    83f4:	3310      	adds	r3, #16
    83f6:	681b      	ldr	r3, [r3, #0]
    83f8:	b29b      	uxth	r3, r3
    83fa:	461a      	mov	r2, r3
    83fc:	2101      	movs	r1, #1
    83fe:	6838      	ldr	r0, [r7, #0]
    8400:	4b27      	ldr	r3, [pc, #156]	; (84a0 <_pwm_init+0x208>)
    8402:	4798      	blx	r3
    8404:	e002      	b.n	840c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    8406:	f04f 33ff 	mov.w	r3, #4294967295
    840a:	e02e      	b.n	846a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    840c:	6879      	ldr	r1, [r7, #4]
    840e:	6838      	ldr	r0, [r7, #0]
    8410:	4b24      	ldr	r3, [pc, #144]	; (84a4 <_pwm_init+0x20c>)
    8412:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8414:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8418:	491c      	ldr	r1, [pc, #112]	; (848c <_pwm_init+0x1f4>)
    841a:	4613      	mov	r3, r2
    841c:	009b      	lsls	r3, r3, #2
    841e:	4413      	add	r3, r2
    8420:	009b      	lsls	r3, r3, #2
    8422:	440b      	add	r3, r1
    8424:	3302      	adds	r3, #2
    8426:	f9b3 3000 	ldrsh.w	r3, [r3]
    842a:	4618      	mov	r0, r3
    842c:	4b1e      	ldr	r3, [pc, #120]	; (84a8 <_pwm_init+0x210>)
    842e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8430:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8434:	4915      	ldr	r1, [pc, #84]	; (848c <_pwm_init+0x1f4>)
    8436:	4613      	mov	r3, r2
    8438:	009b      	lsls	r3, r3, #2
    843a:	4413      	add	r3, r2
    843c:	009b      	lsls	r3, r3, #2
    843e:	440b      	add	r3, r1
    8440:	3302      	adds	r3, #2
    8442:	f9b3 3000 	ldrsh.w	r3, [r3]
    8446:	4618      	mov	r0, r3
    8448:	4b18      	ldr	r3, [pc, #96]	; (84ac <_pwm_init+0x214>)
    844a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    844c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8450:	490e      	ldr	r1, [pc, #56]	; (848c <_pwm_init+0x1f4>)
    8452:	4613      	mov	r3, r2
    8454:	009b      	lsls	r3, r3, #2
    8456:	4413      	add	r3, r2
    8458:	009b      	lsls	r3, r3, #2
    845a:	440b      	add	r3, r1
    845c:	3302      	adds	r3, #2
    845e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8462:	4618      	mov	r0, r3
    8464:	4b12      	ldr	r3, [pc, #72]	; (84b0 <_pwm_init+0x218>)
    8466:	4798      	blx	r3

	return 0;
    8468:	2300      	movs	r3, #0
}
    846a:	4618      	mov	r0, r3
    846c:	3710      	adds	r7, #16
    846e:	46bd      	mov	sp, r7
    8470:	bd80      	pop	{r7, pc}
    8472:	bf00      	nop
    8474:	00008839 	.word	0x00008839
    8478:	00007c5d 	.word	0x00007c5d
    847c:	00007dfd 	.word	0x00007dfd
    8480:	00007dad 	.word	0x00007dad
    8484:	00007c39 	.word	0x00007c39
    8488:	00007e2d 	.word	0x00007e2d
    848c:	20000110 	.word	0x20000110
    8490:	00007e8d 	.word	0x00007e8d
    8494:	00007e51 	.word	0x00007e51
    8498:	00007e6f 	.word	0x00007e6f
    849c:	00007f8d 	.word	0x00007f8d
    84a0:	00007f29 	.word	0x00007f29
    84a4:	000088a1 	.word	0x000088a1
    84a8:	00007bb9 	.word	0x00007bb9
    84ac:	00007bfd 	.word	0x00007bfd
    84b0:	00007b7d 	.word	0x00007b7d

000084b4 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    84b4:	b580      	push	{r7, lr}
    84b6:	b084      	sub	sp, #16
    84b8:	af00      	add	r7, sp, #0
    84ba:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    84bc:	687b      	ldr	r3, [r7, #4]
    84be:	68db      	ldr	r3, [r3, #12]
    84c0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    84c2:	68f8      	ldr	r0, [r7, #12]
    84c4:	4b10      	ldr	r3, [pc, #64]	; (8508 <_tc_timer_deinit+0x54>)
    84c6:	4798      	blx	r3
    84c8:	4603      	mov	r3, r0
    84ca:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    84cc:	22f9      	movs	r2, #249	; 0xf9
    84ce:	490f      	ldr	r1, [pc, #60]	; (850c <_tc_timer_deinit+0x58>)
    84d0:	2001      	movs	r0, #1
    84d2:	4b0f      	ldr	r3, [pc, #60]	; (8510 <_tc_timer_deinit+0x5c>)
    84d4:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    84d6:	f997 200b 	ldrsb.w	r2, [r7, #11]
    84da:	490e      	ldr	r1, [pc, #56]	; (8514 <_tc_timer_deinit+0x60>)
    84dc:	4613      	mov	r3, r2
    84de:	009b      	lsls	r3, r3, #2
    84e0:	4413      	add	r3, r2
    84e2:	009b      	lsls	r3, r3, #2
    84e4:	440b      	add	r3, r1
    84e6:	3302      	adds	r3, #2
    84e8:	f9b3 3000 	ldrsh.w	r3, [r3]
    84ec:	4618      	mov	r0, r3
    84ee:	4b0a      	ldr	r3, [pc, #40]	; (8518 <_tc_timer_deinit+0x64>)
    84f0:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    84f2:	68f8      	ldr	r0, [r7, #12]
    84f4:	4b09      	ldr	r3, [pc, #36]	; (851c <_tc_timer_deinit+0x68>)
    84f6:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    84f8:	68f8      	ldr	r0, [r7, #12]
    84fa:	4b09      	ldr	r3, [pc, #36]	; (8520 <_tc_timer_deinit+0x6c>)
    84fc:	4798      	blx	r3
}
    84fe:	bf00      	nop
    8500:	3710      	adds	r7, #16
    8502:	46bd      	mov	sp, r7
    8504:	bd80      	pop	{r7, pc}
    8506:	bf00      	nop
    8508:	00008839 	.word	0x00008839
    850c:	00010a60 	.word	0x00010a60
    8510:	00003b01 	.word	0x00003b01
    8514:	20000110 	.word	0x20000110
    8518:	00007bb9 	.word	0x00007bb9
    851c:	00007dad 	.word	0x00007dad
    8520:	00007d25 	.word	0x00007d25

00008524 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8524:	b580      	push	{r7, lr}
    8526:	b082      	sub	sp, #8
    8528:	af00      	add	r7, sp, #0
    852a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    852c:	687b      	ldr	r3, [r7, #4]
    852e:	68db      	ldr	r3, [r3, #12]
    8530:	4618      	mov	r0, r3
    8532:	4b03      	ldr	r3, [pc, #12]	; (8540 <_tc_timer_start+0x1c>)
    8534:	4798      	blx	r3
}
    8536:	bf00      	nop
    8538:	3708      	adds	r7, #8
    853a:	46bd      	mov	sp, r7
    853c:	bd80      	pop	{r7, pc}
    853e:	bf00      	nop
    8540:	00007d4d 	.word	0x00007d4d

00008544 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8544:	b580      	push	{r7, lr}
    8546:	b082      	sub	sp, #8
    8548:	af00      	add	r7, sp, #0
    854a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    854c:	687b      	ldr	r3, [r7, #4]
    854e:	68db      	ldr	r3, [r3, #12]
    8550:	4618      	mov	r0, r3
    8552:	4b03      	ldr	r3, [pc, #12]	; (8560 <_tc_timer_stop+0x1c>)
    8554:	4798      	blx	r3
}
    8556:	bf00      	nop
    8558:	3708      	adds	r7, #8
    855a:	46bd      	mov	sp, r7
    855c:	bd80      	pop	{r7, pc}
    855e:	bf00      	nop
    8560:	00007dad 	.word	0x00007dad

00008564 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8564:	b580      	push	{r7, lr}
    8566:	b084      	sub	sp, #16
    8568:	af00      	add	r7, sp, #0
    856a:	6078      	str	r0, [r7, #4]
    856c:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    856e:	687b      	ldr	r3, [r7, #4]
    8570:	68db      	ldr	r3, [r3, #12]
    8572:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8574:	68f8      	ldr	r0, [r7, #12]
    8576:	4b14      	ldr	r3, [pc, #80]	; (85c8 <_tc_timer_set_period+0x64>)
    8578:	4798      	blx	r3
    857a:	4603      	mov	r3, r0
    857c:	2b02      	cmp	r3, #2
    857e:	d105      	bne.n	858c <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8580:	683a      	ldr	r2, [r7, #0]
    8582:	2100      	movs	r1, #0
    8584:	68f8      	ldr	r0, [r7, #12]
    8586:	4b11      	ldr	r3, [pc, #68]	; (85cc <_tc_timer_set_period+0x68>)
    8588:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    858a:	e019      	b.n	85c0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    858c:	68f8      	ldr	r0, [r7, #12]
    858e:	4b0e      	ldr	r3, [pc, #56]	; (85c8 <_tc_timer_set_period+0x64>)
    8590:	4798      	blx	r3
    8592:	4603      	mov	r3, r0
    8594:	2b00      	cmp	r3, #0
    8596:	d107      	bne.n	85a8 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8598:	683b      	ldr	r3, [r7, #0]
    859a:	b29b      	uxth	r3, r3
    859c:	461a      	mov	r2, r3
    859e:	2100      	movs	r1, #0
    85a0:	68f8      	ldr	r0, [r7, #12]
    85a2:	4b0b      	ldr	r3, [pc, #44]	; (85d0 <_tc_timer_set_period+0x6c>)
    85a4:	4798      	blx	r3
}
    85a6:	e00b      	b.n	85c0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    85a8:	68f8      	ldr	r0, [r7, #12]
    85aa:	4b07      	ldr	r3, [pc, #28]	; (85c8 <_tc_timer_set_period+0x64>)
    85ac:	4798      	blx	r3
    85ae:	4603      	mov	r3, r0
    85b0:	2b01      	cmp	r3, #1
    85b2:	d105      	bne.n	85c0 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    85b4:	683b      	ldr	r3, [r7, #0]
    85b6:	b2db      	uxtb	r3, r3
    85b8:	4619      	mov	r1, r3
    85ba:	68f8      	ldr	r0, [r7, #12]
    85bc:	4b05      	ldr	r3, [pc, #20]	; (85d4 <_tc_timer_set_period+0x70>)
    85be:	4798      	blx	r3
}
    85c0:	bf00      	nop
    85c2:	3710      	adds	r7, #16
    85c4:	46bd      	mov	sp, r7
    85c6:	bd80      	pop	{r7, pc}
    85c8:	00007dd5 	.word	0x00007dd5
    85cc:	00007f8d 	.word	0x00007f8d
    85d0:	00007f29 	.word	0x00007f29
    85d4:	00007ead 	.word	0x00007ead

000085d8 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    85d8:	b580      	push	{r7, lr}
    85da:	b084      	sub	sp, #16
    85dc:	af00      	add	r7, sp, #0
    85de:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    85e0:	687b      	ldr	r3, [r7, #4]
    85e2:	68db      	ldr	r3, [r3, #12]
    85e4:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    85e6:	68f8      	ldr	r0, [r7, #12]
    85e8:	4b13      	ldr	r3, [pc, #76]	; (8638 <_tc_timer_get_period+0x60>)
    85ea:	4798      	blx	r3
    85ec:	4603      	mov	r3, r0
    85ee:	2b02      	cmp	r3, #2
    85f0:	d105      	bne.n	85fe <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    85f2:	2100      	movs	r1, #0
    85f4:	68f8      	ldr	r0, [r7, #12]
    85f6:	4b11      	ldr	r3, [pc, #68]	; (863c <_tc_timer_get_period+0x64>)
    85f8:	4798      	blx	r3
    85fa:	4603      	mov	r3, r0
    85fc:	e017      	b.n	862e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    85fe:	68f8      	ldr	r0, [r7, #12]
    8600:	4b0d      	ldr	r3, [pc, #52]	; (8638 <_tc_timer_get_period+0x60>)
    8602:	4798      	blx	r3
    8604:	4603      	mov	r3, r0
    8606:	2b00      	cmp	r3, #0
    8608:	d105      	bne.n	8616 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    860a:	2100      	movs	r1, #0
    860c:	68f8      	ldr	r0, [r7, #12]
    860e:	4b0c      	ldr	r3, [pc, #48]	; (8640 <_tc_timer_get_period+0x68>)
    8610:	4798      	blx	r3
    8612:	4603      	mov	r3, r0
    8614:	e00b      	b.n	862e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8616:	68f8      	ldr	r0, [r7, #12]
    8618:	4b07      	ldr	r3, [pc, #28]	; (8638 <_tc_timer_get_period+0x60>)
    861a:	4798      	blx	r3
    861c:	4603      	mov	r3, r0
    861e:	2b01      	cmp	r3, #1
    8620:	d104      	bne.n	862c <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8622:	68f8      	ldr	r0, [r7, #12]
    8624:	4b07      	ldr	r3, [pc, #28]	; (8644 <_tc_timer_get_period+0x6c>)
    8626:	4798      	blx	r3
    8628:	4603      	mov	r3, r0
    862a:	e000      	b.n	862e <_tc_timer_get_period+0x56>
	}

	return 0;
    862c:	2300      	movs	r3, #0
}
    862e:	4618      	mov	r0, r3
    8630:	3710      	adds	r7, #16
    8632:	46bd      	mov	sp, r7
    8634:	bd80      	pop	{r7, pc}
    8636:	bf00      	nop
    8638:	00007dd5 	.word	0x00007dd5
    863c:	00007fbd 	.word	0x00007fbd
    8640:	00007f5d 	.word	0x00007f5d
    8644:	00007ed5 	.word	0x00007ed5

00008648 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8648:	b580      	push	{r7, lr}
    864a:	b082      	sub	sp, #8
    864c:	af00      	add	r7, sp, #0
    864e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8650:	687b      	ldr	r3, [r7, #4]
    8652:	68db      	ldr	r3, [r3, #12]
    8654:	4618      	mov	r0, r3
    8656:	4b03      	ldr	r3, [pc, #12]	; (8664 <_tc_timer_is_started+0x1c>)
    8658:	4798      	blx	r3
    865a:	4603      	mov	r3, r0
}
    865c:	4618      	mov	r0, r3
    865e:	3708      	adds	r7, #8
    8660:	46bd      	mov	sp, r7
    8662:	bd80      	pop	{r7, pc}
    8664:	00007d75 	.word	0x00007d75

00008668 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8668:	b480      	push	{r7}
    866a:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    866c:	4b02      	ldr	r3, [pc, #8]	; (8678 <_tc_get_timer+0x10>)
}
    866e:	4618      	mov	r0, r3
    8670:	46bd      	mov	sp, r7
    8672:	f85d 7b04 	ldr.w	r7, [sp], #4
    8676:	4770      	bx	lr
    8678:	20000188 	.word	0x20000188

0000867c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    867c:	b480      	push	{r7}
    867e:	af00      	add	r7, sp, #0
	return NULL;
    8680:	2300      	movs	r3, #0
}
    8682:	4618      	mov	r0, r3
    8684:	46bd      	mov	sp, r7
    8686:	f85d 7b04 	ldr.w	r7, [sp], #4
    868a:	4770      	bx	lr

0000868c <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    868c:	b580      	push	{r7, lr}
    868e:	b084      	sub	sp, #16
    8690:	af00      	add	r7, sp, #0
    8692:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8694:	687b      	ldr	r3, [r7, #4]
    8696:	68db      	ldr	r3, [r3, #12]
    8698:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    869a:	68f8      	ldr	r0, [r7, #12]
    869c:	4b0e      	ldr	r3, [pc, #56]	; (86d8 <_tc_timer_set_irq+0x4c>)
    869e:	4798      	blx	r3
    86a0:	4603      	mov	r3, r0
    86a2:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    86a4:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    86a8:	490c      	ldr	r1, [pc, #48]	; (86dc <_tc_timer_set_irq+0x50>)
    86aa:	2001      	movs	r0, #1
    86ac:	4b0c      	ldr	r3, [pc, #48]	; (86e0 <_tc_timer_set_irq+0x54>)
    86ae:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    86b0:	f997 200b 	ldrsb.w	r2, [r7, #11]
    86b4:	490b      	ldr	r1, [pc, #44]	; (86e4 <_tc_timer_set_irq+0x58>)
    86b6:	4613      	mov	r3, r2
    86b8:	009b      	lsls	r3, r3, #2
    86ba:	4413      	add	r3, r2
    86bc:	009b      	lsls	r3, r3, #2
    86be:	440b      	add	r3, r1
    86c0:	3302      	adds	r3, #2
    86c2:	f9b3 3000 	ldrsh.w	r3, [r3]
    86c6:	b2db      	uxtb	r3, r3
    86c8:	4618      	mov	r0, r3
    86ca:	4b07      	ldr	r3, [pc, #28]	; (86e8 <_tc_timer_set_irq+0x5c>)
    86cc:	4798      	blx	r3
}
    86ce:	bf00      	nop
    86d0:	3710      	adds	r7, #16
    86d2:	46bd      	mov	sp, r7
    86d4:	bd80      	pop	{r7, pc}
    86d6:	bf00      	nop
    86d8:	00008839 	.word	0x00008839
    86dc:	00010a60 	.word	0x00010a60
    86e0:	00003b01 	.word	0x00003b01
    86e4:	20000110 	.word	0x20000110
    86e8:	00004349 	.word	0x00004349

000086ec <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    86ec:	b580      	push	{r7, lr}
    86ee:	b084      	sub	sp, #16
    86f0:	af00      	add	r7, sp, #0
    86f2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    86f4:	687b      	ldr	r3, [r7, #4]
    86f6:	68db      	ldr	r3, [r3, #12]
    86f8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    86fa:	68f8      	ldr	r0, [r7, #12]
    86fc:	4b07      	ldr	r3, [pc, #28]	; (871c <tc_interrupt_handler+0x30>)
    86fe:	4798      	blx	r3
    8700:	4603      	mov	r3, r0
    8702:	2b00      	cmp	r3, #0
    8704:	d006      	beq.n	8714 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8706:	68f8      	ldr	r0, [r7, #12]
    8708:	4b05      	ldr	r3, [pc, #20]	; (8720 <tc_interrupt_handler+0x34>)
    870a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    870c:	687b      	ldr	r3, [r7, #4]
    870e:	681b      	ldr	r3, [r3, #0]
    8710:	6878      	ldr	r0, [r7, #4]
    8712:	4798      	blx	r3
	}
}
    8714:	bf00      	nop
    8716:	3710      	adds	r7, #16
    8718:	46bd      	mov	sp, r7
    871a:	bd80      	pop	{r7, pc}
    871c:	00007c85 	.word	0x00007c85
    8720:	00007cad 	.word	0x00007cad

00008724 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8724:	b580      	push	{r7, lr}
    8726:	b084      	sub	sp, #16
    8728:	af00      	add	r7, sp, #0
    872a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    872c:	687b      	ldr	r3, [r7, #4]
    872e:	691b      	ldr	r3, [r3, #16]
    8730:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8732:	68f8      	ldr	r0, [r7, #12]
    8734:	4b12      	ldr	r3, [pc, #72]	; (8780 <tc_pwm_interrupt_handler+0x5c>)
    8736:	4798      	blx	r3
    8738:	4603      	mov	r3, r0
    873a:	2b00      	cmp	r3, #0
    873c:	d00a      	beq.n	8754 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    873e:	68f8      	ldr	r0, [r7, #12]
    8740:	4b10      	ldr	r3, [pc, #64]	; (8784 <tc_pwm_interrupt_handler+0x60>)
    8742:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8744:	687b      	ldr	r3, [r7, #4]
    8746:	681b      	ldr	r3, [r3, #0]
    8748:	2b00      	cmp	r3, #0
    874a:	d003      	beq.n	8754 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    874c:	687b      	ldr	r3, [r7, #4]
    874e:	681b      	ldr	r3, [r3, #0]
    8750:	6878      	ldr	r0, [r7, #4]
    8752:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8754:	68f8      	ldr	r0, [r7, #12]
    8756:	4b0c      	ldr	r3, [pc, #48]	; (8788 <tc_pwm_interrupt_handler+0x64>)
    8758:	4798      	blx	r3
    875a:	4603      	mov	r3, r0
    875c:	2b00      	cmp	r3, #0
    875e:	d00a      	beq.n	8776 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8760:	68f8      	ldr	r0, [r7, #12]
    8762:	4b0a      	ldr	r3, [pc, #40]	; (878c <tc_pwm_interrupt_handler+0x68>)
    8764:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8766:	687b      	ldr	r3, [r7, #4]
    8768:	685b      	ldr	r3, [r3, #4]
    876a:	2b00      	cmp	r3, #0
    876c:	d003      	beq.n	8776 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    876e:	687b      	ldr	r3, [r7, #4]
    8770:	685b      	ldr	r3, [r3, #4]
    8772:	6878      	ldr	r0, [r7, #4]
    8774:	4798      	blx	r3
		}
	}
}
    8776:	bf00      	nop
    8778:	3710      	adds	r7, #16
    877a:	46bd      	mov	sp, r7
    877c:	bd80      	pop	{r7, pc}
    877e:	bf00      	nop
    8780:	00007c85 	.word	0x00007c85
    8784:	00007cad 	.word	0x00007cad
    8788:	00007cfb 	.word	0x00007cfb
    878c:	00007cc7 	.word	0x00007cc7

00008790 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8790:	b580      	push	{r7, lr}
    8792:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8794:	4b03      	ldr	r3, [pc, #12]	; (87a4 <TC0_Handler+0x14>)
    8796:	681b      	ldr	r3, [r3, #0]
    8798:	4618      	mov	r0, r3
    879a:	4b03      	ldr	r3, [pc, #12]	; (87a8 <TC0_Handler+0x18>)
    879c:	4798      	blx	r3
}
    879e:	bf00      	nop
    87a0:	bd80      	pop	{r7, pc}
    87a2:	bf00      	nop
    87a4:	200021c0 	.word	0x200021c0
    87a8:	000086ed 	.word	0x000086ed

000087ac <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    87ac:	b580      	push	{r7, lr}
    87ae:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    87b0:	4b03      	ldr	r3, [pc, #12]	; (87c0 <TC2_Handler+0x14>)
    87b2:	681b      	ldr	r3, [r3, #0]
    87b4:	4618      	mov	r0, r3
    87b6:	4b03      	ldr	r3, [pc, #12]	; (87c4 <TC2_Handler+0x18>)
    87b8:	4798      	blx	r3
}
    87ba:	bf00      	nop
    87bc:	bd80      	pop	{r7, pc}
    87be:	bf00      	nop
    87c0:	200021c4 	.word	0x200021c4
    87c4:	000086ed 	.word	0x000086ed

000087c8 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    87c8:	b580      	push	{r7, lr}
    87ca:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    87cc:	4b03      	ldr	r3, [pc, #12]	; (87dc <TC4_Handler+0x14>)
    87ce:	681b      	ldr	r3, [r3, #0]
    87d0:	4618      	mov	r0, r3
    87d2:	4b03      	ldr	r3, [pc, #12]	; (87e0 <TC4_Handler+0x18>)
    87d4:	4798      	blx	r3
}
    87d6:	bf00      	nop
    87d8:	bd80      	pop	{r7, pc}
    87da:	bf00      	nop
    87dc:	200021c8 	.word	0x200021c8
    87e0:	000086ed 	.word	0x000086ed

000087e4 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    87e4:	b580      	push	{r7, lr}
    87e6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    87e8:	4b03      	ldr	r3, [pc, #12]	; (87f8 <TC5_Handler+0x14>)
    87ea:	681b      	ldr	r3, [r3, #0]
    87ec:	4618      	mov	r0, r3
    87ee:	4b03      	ldr	r3, [pc, #12]	; (87fc <TC5_Handler+0x18>)
    87f0:	4798      	blx	r3
}
    87f2:	bf00      	nop
    87f4:	bd80      	pop	{r7, pc}
    87f6:	bf00      	nop
    87f8:	200021cc 	.word	0x200021cc
    87fc:	000086ed 	.word	0x000086ed

00008800 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8800:	b580      	push	{r7, lr}
    8802:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8804:	4b03      	ldr	r3, [pc, #12]	; (8814 <TC6_Handler+0x14>)
    8806:	681b      	ldr	r3, [r3, #0]
    8808:	4618      	mov	r0, r3
    880a:	4b03      	ldr	r3, [pc, #12]	; (8818 <TC6_Handler+0x18>)
    880c:	4798      	blx	r3
}
    880e:	bf00      	nop
    8810:	bd80      	pop	{r7, pc}
    8812:	bf00      	nop
    8814:	200021d0 	.word	0x200021d0
    8818:	000086ed 	.word	0x000086ed

0000881c <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    881c:	b580      	push	{r7, lr}
    881e:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8820:	4b03      	ldr	r3, [pc, #12]	; (8830 <TC7_Handler+0x14>)
    8822:	681b      	ldr	r3, [r3, #0]
    8824:	4618      	mov	r0, r3
    8826:	4b03      	ldr	r3, [pc, #12]	; (8834 <TC7_Handler+0x18>)
    8828:	4798      	blx	r3
}
    882a:	bf00      	nop
    882c:	bd80      	pop	{r7, pc}
    882e:	bf00      	nop
    8830:	200021d4 	.word	0x200021d4
    8834:	00008725 	.word	0x00008725

00008838 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8838:	b580      	push	{r7, lr}
    883a:	b084      	sub	sp, #16
    883c:	af00      	add	r7, sp, #0
    883e:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8840:	6878      	ldr	r0, [r7, #4]
    8842:	4b13      	ldr	r3, [pc, #76]	; (8890 <get_tc_index+0x58>)
    8844:	4798      	blx	r3
    8846:	4603      	mov	r3, r0
    8848:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    884a:	2300      	movs	r3, #0
    884c:	73fb      	strb	r3, [r7, #15]
    884e:	e010      	b.n	8872 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8850:	7bfa      	ldrb	r2, [r7, #15]
    8852:	4910      	ldr	r1, [pc, #64]	; (8894 <get_tc_index+0x5c>)
    8854:	4613      	mov	r3, r2
    8856:	009b      	lsls	r3, r3, #2
    8858:	4413      	add	r3, r2
    885a:	009b      	lsls	r3, r3, #2
    885c:	440b      	add	r3, r1
    885e:	781b      	ldrb	r3, [r3, #0]
    8860:	7bba      	ldrb	r2, [r7, #14]
    8862:	429a      	cmp	r2, r3
    8864:	d102      	bne.n	886c <get_tc_index+0x34>
			return i;
    8866:	f997 300f 	ldrsb.w	r3, [r7, #15]
    886a:	e00d      	b.n	8888 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    886c:	7bfb      	ldrb	r3, [r7, #15]
    886e:	3301      	adds	r3, #1
    8870:	73fb      	strb	r3, [r7, #15]
    8872:	7bfb      	ldrb	r3, [r7, #15]
    8874:	2b05      	cmp	r3, #5
    8876:	d9eb      	bls.n	8850 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8878:	f240 221d 	movw	r2, #541	; 0x21d
    887c:	4906      	ldr	r1, [pc, #24]	; (8898 <get_tc_index+0x60>)
    887e:	2000      	movs	r0, #0
    8880:	4b06      	ldr	r3, [pc, #24]	; (889c <get_tc_index+0x64>)
    8882:	4798      	blx	r3
	return -1;
    8884:	f04f 33ff 	mov.w	r3, #4294967295
}
    8888:	4618      	mov	r0, r3
    888a:	3710      	adds	r7, #16
    888c:	46bd      	mov	sp, r7
    888e:	bd80      	pop	{r7, pc}
    8890:	0000893d 	.word	0x0000893d
    8894:	20000110 	.word	0x20000110
    8898:	00010a60 	.word	0x00010a60
    889c:	00003b01 	.word	0x00003b01

000088a0 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    88a0:	b480      	push	{r7}
    88a2:	b083      	sub	sp, #12
    88a4:	af00      	add	r7, sp, #0
    88a6:	6078      	str	r0, [r7, #4]
    88a8:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    88aa:	687b      	ldr	r3, [r7, #4]
    88ac:	4a17      	ldr	r2, [pc, #92]	; (890c <_tc_init_irq_param+0x6c>)
    88ae:	4293      	cmp	r3, r2
    88b0:	d102      	bne.n	88b8 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    88b2:	4a17      	ldr	r2, [pc, #92]	; (8910 <_tc_init_irq_param+0x70>)
    88b4:	683b      	ldr	r3, [r7, #0]
    88b6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    88b8:	687b      	ldr	r3, [r7, #4]
    88ba:	4a16      	ldr	r2, [pc, #88]	; (8914 <_tc_init_irq_param+0x74>)
    88bc:	4293      	cmp	r3, r2
    88be:	d102      	bne.n	88c6 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    88c0:	4a15      	ldr	r2, [pc, #84]	; (8918 <_tc_init_irq_param+0x78>)
    88c2:	683b      	ldr	r3, [r7, #0]
    88c4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    88c6:	687b      	ldr	r3, [r7, #4]
    88c8:	4a14      	ldr	r2, [pc, #80]	; (891c <_tc_init_irq_param+0x7c>)
    88ca:	4293      	cmp	r3, r2
    88cc:	d102      	bne.n	88d4 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    88ce:	4a14      	ldr	r2, [pc, #80]	; (8920 <_tc_init_irq_param+0x80>)
    88d0:	683b      	ldr	r3, [r7, #0]
    88d2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    88d4:	687b      	ldr	r3, [r7, #4]
    88d6:	4a13      	ldr	r2, [pc, #76]	; (8924 <_tc_init_irq_param+0x84>)
    88d8:	4293      	cmp	r3, r2
    88da:	d102      	bne.n	88e2 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    88dc:	4a12      	ldr	r2, [pc, #72]	; (8928 <_tc_init_irq_param+0x88>)
    88de:	683b      	ldr	r3, [r7, #0]
    88e0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    88e2:	687b      	ldr	r3, [r7, #4]
    88e4:	4a11      	ldr	r2, [pc, #68]	; (892c <_tc_init_irq_param+0x8c>)
    88e6:	4293      	cmp	r3, r2
    88e8:	d102      	bne.n	88f0 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    88ea:	4a11      	ldr	r2, [pc, #68]	; (8930 <_tc_init_irq_param+0x90>)
    88ec:	683b      	ldr	r3, [r7, #0]
    88ee:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	4a10      	ldr	r2, [pc, #64]	; (8934 <_tc_init_irq_param+0x94>)
    88f4:	4293      	cmp	r3, r2
    88f6:	d102      	bne.n	88fe <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    88f8:	4a0f      	ldr	r2, [pc, #60]	; (8938 <_tc_init_irq_param+0x98>)
    88fa:	683b      	ldr	r3, [r7, #0]
    88fc:	6013      	str	r3, [r2, #0]
	}
}
    88fe:	bf00      	nop
    8900:	370c      	adds	r7, #12
    8902:	46bd      	mov	sp, r7
    8904:	f85d 7b04 	ldr.w	r7, [sp], #4
    8908:	4770      	bx	lr
    890a:	bf00      	nop
    890c:	40003800 	.word	0x40003800
    8910:	200021c0 	.word	0x200021c0
    8914:	4101a000 	.word	0x4101a000
    8918:	200021c4 	.word	0x200021c4
    891c:	42001400 	.word	0x42001400
    8920:	200021c8 	.word	0x200021c8
    8924:	42001800 	.word	0x42001800
    8928:	200021cc 	.word	0x200021cc
    892c:	43001400 	.word	0x43001400
    8930:	200021d0 	.word	0x200021d0
    8934:	43001800 	.word	0x43001800
    8938:	200021d4 	.word	0x200021d4

0000893c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    893c:	b4b0      	push	{r4, r5, r7}
    893e:	b08d      	sub	sp, #52	; 0x34
    8940:	af00      	add	r7, sp, #0
    8942:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8944:	4b13      	ldr	r3, [pc, #76]	; (8994 <_get_hardware_offset+0x58>)
    8946:	f107 040c 	add.w	r4, r7, #12
    894a:	461d      	mov	r5, r3
    894c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    894e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8950:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8958:	2300      	movs	r3, #0
    895a:	62fb      	str	r3, [r7, #44]	; 0x2c
    895c:	e010      	b.n	8980 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    895e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8960:	009b      	lsls	r3, r3, #2
    8962:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8966:	4413      	add	r3, r2
    8968:	f853 3c24 	ldr.w	r3, [r3, #-36]
    896c:	461a      	mov	r2, r3
    896e:	687b      	ldr	r3, [r7, #4]
    8970:	429a      	cmp	r2, r3
    8972:	d102      	bne.n	897a <_get_hardware_offset+0x3e>
			return i;
    8974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8976:	b2db      	uxtb	r3, r3
    8978:	e006      	b.n	8988 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    897a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    897c:	3301      	adds	r3, #1
    897e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8982:	2b07      	cmp	r3, #7
    8984:	d9eb      	bls.n	895e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8986:	2300      	movs	r3, #0
}
    8988:	4618      	mov	r0, r3
    898a:	3734      	adds	r7, #52	; 0x34
    898c:	46bd      	mov	sp, r7
    898e:	bcb0      	pop	{r4, r5, r7}
    8990:	4770      	bx	lr
    8992:	bf00      	nop
    8994:	00010a74 	.word	0x00010a74

00008998 <__NVIC_EnableIRQ>:
{
    8998:	b480      	push	{r7}
    899a:	b083      	sub	sp, #12
    899c:	af00      	add	r7, sp, #0
    899e:	4603      	mov	r3, r0
    89a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    89a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    89a6:	2b00      	cmp	r3, #0
    89a8:	db0b      	blt.n	89c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    89aa:	4909      	ldr	r1, [pc, #36]	; (89d0 <__NVIC_EnableIRQ+0x38>)
    89ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    89b0:	095b      	lsrs	r3, r3, #5
    89b2:	88fa      	ldrh	r2, [r7, #6]
    89b4:	f002 021f 	and.w	r2, r2, #31
    89b8:	2001      	movs	r0, #1
    89ba:	fa00 f202 	lsl.w	r2, r0, r2
    89be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    89c2:	bf00      	nop
    89c4:	370c      	adds	r7, #12
    89c6:	46bd      	mov	sp, r7
    89c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    89cc:	4770      	bx	lr
    89ce:	bf00      	nop
    89d0:	e000e100 	.word	0xe000e100

000089d4 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    89d4:	b480      	push	{r7}
    89d6:	b087      	sub	sp, #28
    89d8:	af00      	add	r7, sp, #0
    89da:	60f8      	str	r0, [r7, #12]
    89dc:	460b      	mov	r3, r1
    89de:	607a      	str	r2, [r7, #4]
    89e0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    89e2:	7afa      	ldrb	r2, [r7, #11]
    89e4:	68f9      	ldr	r1, [r7, #12]
    89e6:	4613      	mov	r3, r2
    89e8:	009b      	lsls	r3, r3, #2
    89ea:	4413      	add	r3, r2
    89ec:	009b      	lsls	r3, r3, #2
    89ee:	440b      	add	r3, r1
    89f0:	3340      	adds	r3, #64	; 0x40
    89f2:	681b      	ldr	r3, [r3, #0]
    89f4:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    89f6:	697a      	ldr	r2, [r7, #20]
    89f8:	687b      	ldr	r3, [r7, #4]
    89fa:	4013      	ands	r3, r2
    89fc:	617b      	str	r3, [r7, #20]
	return tmp;
    89fe:	697b      	ldr	r3, [r7, #20]
}
    8a00:	4618      	mov	r0, r3
    8a02:	371c      	adds	r7, #28
    8a04:	46bd      	mov	sp, r7
    8a06:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a0a:	4770      	bx	lr

00008a0c <hri_oscctrl_get_STATUS_reg>:
{
    8a0c:	b480      	push	{r7}
    8a0e:	b085      	sub	sp, #20
    8a10:	af00      	add	r7, sp, #0
    8a12:	6078      	str	r0, [r7, #4]
    8a14:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8a16:	687b      	ldr	r3, [r7, #4]
    8a18:	691b      	ldr	r3, [r3, #16]
    8a1a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8a1c:	68fa      	ldr	r2, [r7, #12]
    8a1e:	683b      	ldr	r3, [r7, #0]
    8a20:	4013      	ands	r3, r2
    8a22:	60fb      	str	r3, [r7, #12]
	return tmp;
    8a24:	68fb      	ldr	r3, [r7, #12]
}
    8a26:	4618      	mov	r0, r3
    8a28:	3714      	adds	r7, #20
    8a2a:	46bd      	mov	sp, r7
    8a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a30:	4770      	bx	lr

00008a32 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8a32:	b480      	push	{r7}
    8a34:	b085      	sub	sp, #20
    8a36:	af00      	add	r7, sp, #0
    8a38:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8a3a:	687b      	ldr	r3, [r7, #4]
    8a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
    8a40:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8a42:	7bfb      	ldrb	r3, [r7, #15]
    8a44:	f003 0301 	and.w	r3, r3, #1
    8a48:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8a4a:	7bfb      	ldrb	r3, [r7, #15]
    8a4c:	2b00      	cmp	r3, #0
    8a4e:	bf14      	ite	ne
    8a50:	2301      	movne	r3, #1
    8a52:	2300      	moveq	r3, #0
    8a54:	b2db      	uxtb	r3, r3
}
    8a56:	4618      	mov	r0, r3
    8a58:	3714      	adds	r7, #20
    8a5a:	46bd      	mov	sp, r7
    8a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a60:	4770      	bx	lr

00008a62 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8a62:	b480      	push	{r7}
    8a64:	b083      	sub	sp, #12
    8a66:	af00      	add	r7, sp, #0
    8a68:	6078      	str	r0, [r7, #4]
    8a6a:	460b      	mov	r3, r1
    8a6c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8a6e:	bf00      	nop
    8a70:	687b      	ldr	r3, [r7, #4]
    8a72:	789b      	ldrb	r3, [r3, #2]
    8a74:	b2da      	uxtb	r2, r3
    8a76:	78fb      	ldrb	r3, [r7, #3]
    8a78:	4013      	ands	r3, r2
    8a7a:	b2db      	uxtb	r3, r3
    8a7c:	2b00      	cmp	r3, #0
    8a7e:	d1f7      	bne.n	8a70 <hri_usb_wait_for_sync+0xe>
	};
}
    8a80:	bf00      	nop
    8a82:	370c      	adds	r7, #12
    8a84:	46bd      	mov	sp, r7
    8a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a8a:	4770      	bx	lr

00008a8c <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8a8c:	b480      	push	{r7}
    8a8e:	b083      	sub	sp, #12
    8a90:	af00      	add	r7, sp, #0
    8a92:	6078      	str	r0, [r7, #4]
    8a94:	460b      	mov	r3, r1
    8a96:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8a98:	687b      	ldr	r3, [r7, #4]
    8a9a:	789b      	ldrb	r3, [r3, #2]
    8a9c:	b2da      	uxtb	r2, r3
    8a9e:	78fb      	ldrb	r3, [r7, #3]
    8aa0:	4013      	ands	r3, r2
    8aa2:	b2db      	uxtb	r3, r3
    8aa4:	2b00      	cmp	r3, #0
    8aa6:	bf14      	ite	ne
    8aa8:	2301      	movne	r3, #1
    8aaa:	2300      	moveq	r3, #0
    8aac:	b2db      	uxtb	r3, r3
}
    8aae:	4618      	mov	r0, r3
    8ab0:	370c      	adds	r7, #12
    8ab2:	46bd      	mov	sp, r7
    8ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ab8:	4770      	bx	lr

00008aba <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8aba:	b480      	push	{r7}
    8abc:	b085      	sub	sp, #20
    8abe:	af00      	add	r7, sp, #0
    8ac0:	6078      	str	r0, [r7, #4]
    8ac2:	460b      	mov	r3, r1
    8ac4:	70fb      	strb	r3, [r7, #3]
    8ac6:	4613      	mov	r3, r2
    8ac8:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8aca:	78fb      	ldrb	r3, [r7, #3]
    8acc:	687a      	ldr	r2, [r7, #4]
    8ace:	3308      	adds	r3, #8
    8ad0:	015b      	lsls	r3, r3, #5
    8ad2:	4413      	add	r3, r2
    8ad4:	3307      	adds	r3, #7
    8ad6:	781b      	ldrb	r3, [r3, #0]
    8ad8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8ada:	7bfa      	ldrb	r2, [r7, #15]
    8adc:	78bb      	ldrb	r3, [r7, #2]
    8ade:	4013      	ands	r3, r2
    8ae0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8ae2:	7bfb      	ldrb	r3, [r7, #15]
}
    8ae4:	4618      	mov	r0, r3
    8ae6:	3714      	adds	r7, #20
    8ae8:	46bd      	mov	sp, r7
    8aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aee:	4770      	bx	lr

00008af0 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8af0:	b480      	push	{r7}
    8af2:	b083      	sub	sp, #12
    8af4:	af00      	add	r7, sp, #0
    8af6:	6078      	str	r0, [r7, #4]
    8af8:	460b      	mov	r3, r1
    8afa:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8afc:	78fb      	ldrb	r3, [r7, #3]
    8afe:	687a      	ldr	r2, [r7, #4]
    8b00:	3308      	adds	r3, #8
    8b02:	015b      	lsls	r3, r3, #5
    8b04:	4413      	add	r3, r2
    8b06:	3307      	adds	r3, #7
    8b08:	781b      	ldrb	r3, [r3, #0]
    8b0a:	b2db      	uxtb	r3, r3
}
    8b0c:	4618      	mov	r0, r3
    8b0e:	370c      	adds	r7, #12
    8b10:	46bd      	mov	sp, r7
    8b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b16:	4770      	bx	lr

00008b18 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8b18:	b480      	push	{r7}
    8b1a:	b083      	sub	sp, #12
    8b1c:	af00      	add	r7, sp, #0
    8b1e:	6078      	str	r0, [r7, #4]
    8b20:	460b      	mov	r3, r1
    8b22:	70fb      	strb	r3, [r7, #3]
    8b24:	4613      	mov	r3, r2
    8b26:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8b28:	78fb      	ldrb	r3, [r7, #3]
    8b2a:	687a      	ldr	r2, [r7, #4]
    8b2c:	3308      	adds	r3, #8
    8b2e:	015b      	lsls	r3, r3, #5
    8b30:	4413      	add	r3, r2
    8b32:	3307      	adds	r3, #7
    8b34:	78ba      	ldrb	r2, [r7, #2]
    8b36:	701a      	strb	r2, [r3, #0]
}
    8b38:	bf00      	nop
    8b3a:	370c      	adds	r7, #12
    8b3c:	46bd      	mov	sp, r7
    8b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b42:	4770      	bx	lr

00008b44 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8b44:	b480      	push	{r7}
    8b46:	b083      	sub	sp, #12
    8b48:	af00      	add	r7, sp, #0
    8b4a:	6078      	str	r0, [r7, #4]
    8b4c:	460b      	mov	r3, r1
    8b4e:	70fb      	strb	r3, [r7, #3]
    8b50:	4613      	mov	r3, r2
    8b52:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8b54:	78fb      	ldrb	r3, [r7, #3]
    8b56:	687a      	ldr	r2, [r7, #4]
    8b58:	3308      	adds	r3, #8
    8b5a:	015b      	lsls	r3, r3, #5
    8b5c:	4413      	add	r3, r2
    8b5e:	3305      	adds	r3, #5
    8b60:	78ba      	ldrb	r2, [r7, #2]
    8b62:	701a      	strb	r2, [r3, #0]
}
    8b64:	bf00      	nop
    8b66:	370c      	adds	r7, #12
    8b68:	46bd      	mov	sp, r7
    8b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b6e:	4770      	bx	lr

00008b70 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8b70:	b480      	push	{r7}
    8b72:	b083      	sub	sp, #12
    8b74:	af00      	add	r7, sp, #0
    8b76:	6078      	str	r0, [r7, #4]
    8b78:	460b      	mov	r3, r1
    8b7a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8b7c:	78fb      	ldrb	r3, [r7, #3]
    8b7e:	687a      	ldr	r2, [r7, #4]
    8b80:	3308      	adds	r3, #8
    8b82:	015b      	lsls	r3, r3, #5
    8b84:	4413      	add	r3, r2
    8b86:	3306      	adds	r3, #6
    8b88:	781b      	ldrb	r3, [r3, #0]
    8b8a:	b2db      	uxtb	r3, r3
}
    8b8c:	4618      	mov	r0, r3
    8b8e:	370c      	adds	r7, #12
    8b90:	46bd      	mov	sp, r7
    8b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b96:	4770      	bx	lr

00008b98 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8b98:	b480      	push	{r7}
    8b9a:	b083      	sub	sp, #12
    8b9c:	af00      	add	r7, sp, #0
    8b9e:	6078      	str	r0, [r7, #4]
    8ba0:	460b      	mov	r3, r1
    8ba2:	70fb      	strb	r3, [r7, #3]
    8ba4:	4613      	mov	r3, r2
    8ba6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8ba8:	78fb      	ldrb	r3, [r7, #3]
    8baa:	687a      	ldr	r2, [r7, #4]
    8bac:	3308      	adds	r3, #8
    8bae:	015b      	lsls	r3, r3, #5
    8bb0:	4413      	add	r3, r2
    8bb2:	3304      	adds	r3, #4
    8bb4:	78ba      	ldrb	r2, [r7, #2]
    8bb6:	701a      	strb	r2, [r3, #0]
}
    8bb8:	bf00      	nop
    8bba:	370c      	adds	r7, #12
    8bbc:	46bd      	mov	sp, r7
    8bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bc2:	4770      	bx	lr

00008bc4 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8bc4:	b480      	push	{r7}
    8bc6:	b083      	sub	sp, #12
    8bc8:	af00      	add	r7, sp, #0
    8bca:	6078      	str	r0, [r7, #4]
    8bcc:	460b      	mov	r3, r1
    8bce:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8bd0:	78fb      	ldrb	r3, [r7, #3]
    8bd2:	687a      	ldr	r2, [r7, #4]
    8bd4:	015b      	lsls	r3, r3, #5
    8bd6:	4413      	add	r3, r2
    8bd8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8bdc:	2210      	movs	r2, #16
    8bde:	701a      	strb	r2, [r3, #0]
}
    8be0:	bf00      	nop
    8be2:	370c      	adds	r7, #12
    8be4:	46bd      	mov	sp, r7
    8be6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bea:	4770      	bx	lr

00008bec <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8bec:	b480      	push	{r7}
    8bee:	b083      	sub	sp, #12
    8bf0:	af00      	add	r7, sp, #0
    8bf2:	6078      	str	r0, [r7, #4]
    8bf4:	460b      	mov	r3, r1
    8bf6:	70fb      	strb	r3, [r7, #3]
    8bf8:	4613      	mov	r3, r2
    8bfa:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8bfc:	78fb      	ldrb	r3, [r7, #3]
    8bfe:	687a      	ldr	r2, [r7, #4]
    8c00:	015b      	lsls	r3, r3, #5
    8c02:	4413      	add	r3, r2
    8c04:	f203 1309 	addw	r3, r3, #265	; 0x109
    8c08:	78ba      	ldrb	r2, [r7, #2]
    8c0a:	701a      	strb	r2, [r3, #0]
}
    8c0c:	bf00      	nop
    8c0e:	370c      	adds	r7, #12
    8c10:	46bd      	mov	sp, r7
    8c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c16:	4770      	bx	lr

00008c18 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8c18:	b480      	push	{r7}
    8c1a:	b083      	sub	sp, #12
    8c1c:	af00      	add	r7, sp, #0
    8c1e:	6078      	str	r0, [r7, #4]
    8c20:	460b      	mov	r3, r1
    8c22:	70fb      	strb	r3, [r7, #3]
    8c24:	4613      	mov	r3, r2
    8c26:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8c28:	78fb      	ldrb	r3, [r7, #3]
    8c2a:	687a      	ldr	r2, [r7, #4]
    8c2c:	015b      	lsls	r3, r3, #5
    8c2e:	4413      	add	r3, r2
    8c30:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8c34:	78ba      	ldrb	r2, [r7, #2]
    8c36:	701a      	strb	r2, [r3, #0]
}
    8c38:	bf00      	nop
    8c3a:	370c      	adds	r7, #12
    8c3c:	46bd      	mov	sp, r7
    8c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c42:	4770      	bx	lr

00008c44 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8c44:	b480      	push	{r7}
    8c46:	b085      	sub	sp, #20
    8c48:	af00      	add	r7, sp, #0
    8c4a:	6078      	str	r0, [r7, #4]
    8c4c:	460b      	mov	r3, r1
    8c4e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8c50:	78fb      	ldrb	r3, [r7, #3]
    8c52:	687a      	ldr	r2, [r7, #4]
    8c54:	3308      	adds	r3, #8
    8c56:	015b      	lsls	r3, r3, #5
    8c58:	4413      	add	r3, r2
    8c5a:	781b      	ldrb	r3, [r3, #0]
    8c5c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8c5e:	7bfb      	ldrb	r3, [r7, #15]
    8c60:	f003 0307 	and.w	r3, r3, #7
    8c64:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8c66:	7bfb      	ldrb	r3, [r7, #15]
}
    8c68:	4618      	mov	r0, r3
    8c6a:	3714      	adds	r7, #20
    8c6c:	46bd      	mov	sp, r7
    8c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c72:	4770      	bx	lr

00008c74 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8c74:	b480      	push	{r7}
    8c76:	b085      	sub	sp, #20
    8c78:	af00      	add	r7, sp, #0
    8c7a:	6078      	str	r0, [r7, #4]
    8c7c:	460b      	mov	r3, r1
    8c7e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8c80:	78fb      	ldrb	r3, [r7, #3]
    8c82:	687a      	ldr	r2, [r7, #4]
    8c84:	3308      	adds	r3, #8
    8c86:	015b      	lsls	r3, r3, #5
    8c88:	4413      	add	r3, r2
    8c8a:	781b      	ldrb	r3, [r3, #0]
    8c8c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8c8e:	7bfb      	ldrb	r3, [r7, #15]
    8c90:	091b      	lsrs	r3, r3, #4
    8c92:	b2db      	uxtb	r3, r3
    8c94:	f003 0307 	and.w	r3, r3, #7
    8c98:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8c9a:	7bfb      	ldrb	r3, [r7, #15]
}
    8c9c:	4618      	mov	r0, r3
    8c9e:	3714      	adds	r7, #20
    8ca0:	46bd      	mov	sp, r7
    8ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ca6:	4770      	bx	lr

00008ca8 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8ca8:	b480      	push	{r7}
    8caa:	b083      	sub	sp, #12
    8cac:	af00      	add	r7, sp, #0
    8cae:	6078      	str	r0, [r7, #4]
    8cb0:	460b      	mov	r3, r1
    8cb2:	70fb      	strb	r3, [r7, #3]
    8cb4:	4613      	mov	r3, r2
    8cb6:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8cb8:	78fb      	ldrb	r3, [r7, #3]
    8cba:	687a      	ldr	r2, [r7, #4]
    8cbc:	3308      	adds	r3, #8
    8cbe:	015b      	lsls	r3, r3, #5
    8cc0:	4413      	add	r3, r2
    8cc2:	78ba      	ldrb	r2, [r7, #2]
    8cc4:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8cc6:	bf00      	nop
    8cc8:	370c      	adds	r7, #12
    8cca:	46bd      	mov	sp, r7
    8ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cd0:	4770      	bx	lr

00008cd2 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8cd2:	b480      	push	{r7}
    8cd4:	b083      	sub	sp, #12
    8cd6:	af00      	add	r7, sp, #0
    8cd8:	6078      	str	r0, [r7, #4]
    8cda:	460b      	mov	r3, r1
    8cdc:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8cde:	78fb      	ldrb	r3, [r7, #3]
    8ce0:	687a      	ldr	r2, [r7, #4]
    8ce2:	3308      	adds	r3, #8
    8ce4:	015b      	lsls	r3, r3, #5
    8ce6:	4413      	add	r3, r2
    8ce8:	781b      	ldrb	r3, [r3, #0]
    8cea:	b2db      	uxtb	r3, r3
}
    8cec:	4618      	mov	r0, r3
    8cee:	370c      	adds	r7, #12
    8cf0:	46bd      	mov	sp, r7
    8cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cf6:	4770      	bx	lr

00008cf8 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8cf8:	b480      	push	{r7}
    8cfa:	b083      	sub	sp, #12
    8cfc:	af00      	add	r7, sp, #0
    8cfe:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8d00:	687b      	ldr	r3, [r7, #4]
    8d02:	8b9b      	ldrh	r3, [r3, #28]
    8d04:	b29b      	uxth	r3, r3
}
    8d06:	4618      	mov	r0, r3
    8d08:	370c      	adds	r7, #12
    8d0a:	46bd      	mov	sp, r7
    8d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d10:	4770      	bx	lr

00008d12 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8d12:	b480      	push	{r7}
    8d14:	b083      	sub	sp, #12
    8d16:	af00      	add	r7, sp, #0
    8d18:	6078      	str	r0, [r7, #4]
    8d1a:	460b      	mov	r3, r1
    8d1c:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8d1e:	687b      	ldr	r3, [r7, #4]
    8d20:	887a      	ldrh	r2, [r7, #2]
    8d22:	839a      	strh	r2, [r3, #28]
}
    8d24:	bf00      	nop
    8d26:	370c      	adds	r7, #12
    8d28:	46bd      	mov	sp, r7
    8d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d2e:	4770      	bx	lr

00008d30 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8d30:	b480      	push	{r7}
    8d32:	b083      	sub	sp, #12
    8d34:	af00      	add	r7, sp, #0
    8d36:	6078      	str	r0, [r7, #4]
    8d38:	460b      	mov	r3, r1
    8d3a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8d3c:	687b      	ldr	r3, [r7, #4]
    8d3e:	887a      	ldrh	r2, [r7, #2]
    8d40:	831a      	strh	r2, [r3, #24]
}
    8d42:	bf00      	nop
    8d44:	370c      	adds	r7, #12
    8d46:	46bd      	mov	sp, r7
    8d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d4c:	4770      	bx	lr

00008d4e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8d4e:	b480      	push	{r7}
    8d50:	b083      	sub	sp, #12
    8d52:	af00      	add	r7, sp, #0
    8d54:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8d56:	687b      	ldr	r3, [r7, #4]
    8d58:	8b1b      	ldrh	r3, [r3, #24]
    8d5a:	b29b      	uxth	r3, r3
}
    8d5c:	4618      	mov	r0, r3
    8d5e:	370c      	adds	r7, #12
    8d60:	46bd      	mov	sp, r7
    8d62:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d66:	4770      	bx	lr

00008d68 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8d68:	b480      	push	{r7}
    8d6a:	b083      	sub	sp, #12
    8d6c:	af00      	add	r7, sp, #0
    8d6e:	6078      	str	r0, [r7, #4]
    8d70:	460b      	mov	r3, r1
    8d72:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8d74:	687b      	ldr	r3, [r7, #4]
    8d76:	887a      	ldrh	r2, [r7, #2]
    8d78:	829a      	strh	r2, [r3, #20]
}
    8d7a:	bf00      	nop
    8d7c:	370c      	adds	r7, #12
    8d7e:	46bd      	mov	sp, r7
    8d80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d84:	4770      	bx	lr

00008d86 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8d86:	b480      	push	{r7}
    8d88:	b085      	sub	sp, #20
    8d8a:	af00      	add	r7, sp, #0
    8d8c:	6078      	str	r0, [r7, #4]
    8d8e:	460b      	mov	r3, r1
    8d90:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8d92:	687b      	ldr	r3, [r7, #4]
    8d94:	789b      	ldrb	r3, [r3, #2]
    8d96:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8d98:	7bfa      	ldrb	r2, [r7, #15]
    8d9a:	78fb      	ldrb	r3, [r7, #3]
    8d9c:	4013      	ands	r3, r2
    8d9e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8da0:	7bfb      	ldrb	r3, [r7, #15]
}
    8da2:	4618      	mov	r0, r3
    8da4:	3714      	adds	r7, #20
    8da6:	46bd      	mov	sp, r7
    8da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dac:	4770      	bx	lr
	...

00008db0 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8db0:	b580      	push	{r7, lr}
    8db2:	b082      	sub	sp, #8
    8db4:	af00      	add	r7, sp, #0
    8db6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8db8:	687b      	ldr	r3, [r7, #4]
    8dba:	781b      	ldrb	r3, [r3, #0]
    8dbc:	b2db      	uxtb	r3, r3
    8dbe:	f023 0302 	bic.w	r3, r3, #2
    8dc2:	b2da      	uxtb	r2, r3
    8dc4:	687b      	ldr	r3, [r7, #4]
    8dc6:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8dc8:	2103      	movs	r1, #3
    8dca:	6878      	ldr	r0, [r7, #4]
    8dcc:	4b02      	ldr	r3, [pc, #8]	; (8dd8 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8dce:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8dd0:	bf00      	nop
    8dd2:	3708      	adds	r7, #8
    8dd4:	46bd      	mov	sp, r7
    8dd6:	bd80      	pop	{r7, pc}
    8dd8:	00008a63 	.word	0x00008a63

00008ddc <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8ddc:	b580      	push	{r7, lr}
    8dde:	b084      	sub	sp, #16
    8de0:	af00      	add	r7, sp, #0
    8de2:	6078      	str	r0, [r7, #4]
    8de4:	460b      	mov	r3, r1
    8de6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8de8:	2103      	movs	r1, #3
    8dea:	6878      	ldr	r0, [r7, #4]
    8dec:	4b06      	ldr	r3, [pc, #24]	; (8e08 <hri_usb_get_CTRLA_reg+0x2c>)
    8dee:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	781b      	ldrb	r3, [r3, #0]
    8df4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8df6:	7bfa      	ldrb	r2, [r7, #15]
    8df8:	78fb      	ldrb	r3, [r7, #3]
    8dfa:	4013      	ands	r3, r2
    8dfc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8dfe:	7bfb      	ldrb	r3, [r7, #15]
}
    8e00:	4618      	mov	r0, r3
    8e02:	3710      	adds	r7, #16
    8e04:	46bd      	mov	sp, r7
    8e06:	bd80      	pop	{r7, pc}
    8e08:	00008a63 	.word	0x00008a63

00008e0c <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8e0c:	b580      	push	{r7, lr}
    8e0e:	b082      	sub	sp, #8
    8e10:	af00      	add	r7, sp, #0
    8e12:	6078      	str	r0, [r7, #4]
    8e14:	460b      	mov	r3, r1
    8e16:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8e18:	687b      	ldr	r3, [r7, #4]
    8e1a:	78fa      	ldrb	r2, [r7, #3]
    8e1c:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8e1e:	2103      	movs	r1, #3
    8e20:	6878      	ldr	r0, [r7, #4]
    8e22:	4b03      	ldr	r3, [pc, #12]	; (8e30 <hri_usb_write_CTRLA_reg+0x24>)
    8e24:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8e26:	bf00      	nop
    8e28:	3708      	adds	r7, #8
    8e2a:	46bd      	mov	sp, r7
    8e2c:	bd80      	pop	{r7, pc}
    8e2e:	bf00      	nop
    8e30:	00008a63 	.word	0x00008a63

00008e34 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8e34:	b580      	push	{r7, lr}
    8e36:	b082      	sub	sp, #8
    8e38:	af00      	add	r7, sp, #0
    8e3a:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8e3c:	2103      	movs	r1, #3
    8e3e:	6878      	ldr	r0, [r7, #4]
    8e40:	4b04      	ldr	r3, [pc, #16]	; (8e54 <hri_usb_read_CTRLA_reg+0x20>)
    8e42:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8e44:	687b      	ldr	r3, [r7, #4]
    8e46:	781b      	ldrb	r3, [r3, #0]
    8e48:	b2db      	uxtb	r3, r3
}
    8e4a:	4618      	mov	r0, r3
    8e4c:	3708      	adds	r7, #8
    8e4e:	46bd      	mov	sp, r7
    8e50:	bd80      	pop	{r7, pc}
    8e52:	bf00      	nop
    8e54:	00008a63 	.word	0x00008a63

00008e58 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8e58:	b480      	push	{r7}
    8e5a:	b083      	sub	sp, #12
    8e5c:	af00      	add	r7, sp, #0
    8e5e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8e60:	687b      	ldr	r3, [r7, #4]
    8e62:	891b      	ldrh	r3, [r3, #8]
    8e64:	b29b      	uxth	r3, r3
    8e66:	f023 0301 	bic.w	r3, r3, #1
    8e6a:	b29a      	uxth	r2, r3
    8e6c:	687b      	ldr	r3, [r7, #4]
    8e6e:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8e70:	bf00      	nop
    8e72:	370c      	adds	r7, #12
    8e74:	46bd      	mov	sp, r7
    8e76:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e7a:	4770      	bx	lr

00008e7c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8e7c:	b480      	push	{r7}
    8e7e:	b083      	sub	sp, #12
    8e80:	af00      	add	r7, sp, #0
    8e82:	6078      	str	r0, [r7, #4]
    8e84:	460b      	mov	r3, r1
    8e86:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8e88:	687b      	ldr	r3, [r7, #4]
    8e8a:	887a      	ldrh	r2, [r7, #2]
    8e8c:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8e8e:	bf00      	nop
    8e90:	370c      	adds	r7, #12
    8e92:	46bd      	mov	sp, r7
    8e94:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e98:	4770      	bx	lr

00008e9a <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8e9a:	b480      	push	{r7}
    8e9c:	b083      	sub	sp, #12
    8e9e:	af00      	add	r7, sp, #0
    8ea0:	6078      	str	r0, [r7, #4]
    8ea2:	460b      	mov	r3, r1
    8ea4:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8ea6:	687b      	ldr	r3, [r7, #4]
    8ea8:	78fa      	ldrb	r2, [r7, #3]
    8eaa:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8eac:	bf00      	nop
    8eae:	370c      	adds	r7, #12
    8eb0:	46bd      	mov	sp, r7
    8eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eb6:	4770      	bx	lr

00008eb8 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8eb8:	b480      	push	{r7}
    8eba:	b083      	sub	sp, #12
    8ebc:	af00      	add	r7, sp, #0
    8ebe:	6078      	str	r0, [r7, #4]
    8ec0:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8ec2:	687b      	ldr	r3, [r7, #4]
    8ec4:	683a      	ldr	r2, [r7, #0]
    8ec6:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8ec8:	bf00      	nop
    8eca:	370c      	adds	r7, #12
    8ecc:	46bd      	mov	sp, r7
    8ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ed2:	4770      	bx	lr

00008ed4 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8ed4:	b480      	push	{r7}
    8ed6:	b083      	sub	sp, #12
    8ed8:	af00      	add	r7, sp, #0
    8eda:	6078      	str	r0, [r7, #4]
    8edc:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8ede:	2300      	movs	r3, #0
}
    8ee0:	4618      	mov	r0, r3
    8ee2:	370c      	adds	r7, #12
    8ee4:	46bd      	mov	sp, r7
    8ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eea:	4770      	bx	lr

00008eec <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8eec:	b480      	push	{r7}
    8eee:	b085      	sub	sp, #20
    8ef0:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8ef2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ef6:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8ef8:	4b28      	ldr	r3, [pc, #160]	; (8f9c <_usb_load_calib+0xb0>)
    8efa:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8efc:	f003 031f 	and.w	r3, r3, #31
    8f00:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8f02:	4b26      	ldr	r3, [pc, #152]	; (8f9c <_usb_load_calib+0xb0>)
    8f04:	681b      	ldr	r3, [r3, #0]
    8f06:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8f08:	f003 031f 	and.w	r3, r3, #31
    8f0c:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8f0e:	4b23      	ldr	r3, [pc, #140]	; (8f9c <_usb_load_calib+0xb0>)
    8f10:	681b      	ldr	r3, [r3, #0]
    8f12:	0a9b      	lsrs	r3, r3, #10
    8f14:	f003 0307 	and.w	r3, r3, #7
    8f18:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8f1a:	68fb      	ldr	r3, [r7, #12]
    8f1c:	2b00      	cmp	r3, #0
    8f1e:	d002      	beq.n	8f26 <_usb_load_calib+0x3a>
    8f20:	68fb      	ldr	r3, [r7, #12]
    8f22:	2b1f      	cmp	r3, #31
    8f24:	d101      	bne.n	8f2a <_usb_load_calib+0x3e>
		pad_transn = 9;
    8f26:	2309      	movs	r3, #9
    8f28:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8f2a:	68bb      	ldr	r3, [r7, #8]
    8f2c:	2b00      	cmp	r3, #0
    8f2e:	d002      	beq.n	8f36 <_usb_load_calib+0x4a>
    8f30:	68bb      	ldr	r3, [r7, #8]
    8f32:	2b1f      	cmp	r3, #31
    8f34:	d101      	bne.n	8f3a <_usb_load_calib+0x4e>
		pad_transp = 25;
    8f36:	2319      	movs	r3, #25
    8f38:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8f3a:	687b      	ldr	r3, [r7, #4]
    8f3c:	2b00      	cmp	r3, #0
    8f3e:	d002      	beq.n	8f46 <_usb_load_calib+0x5a>
    8f40:	687b      	ldr	r3, [r7, #4]
    8f42:	2b07      	cmp	r3, #7
    8f44:	d101      	bne.n	8f4a <_usb_load_calib+0x5e>
		pad_trim = 6;
    8f46:	2306      	movs	r3, #6
    8f48:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8f4a:	68fb      	ldr	r3, [r7, #12]
    8f4c:	b29b      	uxth	r3, r3
    8f4e:	019b      	lsls	r3, r3, #6
    8f50:	b29b      	uxth	r3, r3
    8f52:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8f56:	b29a      	uxth	r2, r3
    8f58:	68bb      	ldr	r3, [r7, #8]
    8f5a:	b29b      	uxth	r3, r3
    8f5c:	f003 031f 	and.w	r3, r3, #31
    8f60:	b29b      	uxth	r3, r3
    8f62:	4313      	orrs	r3, r2
    8f64:	b29a      	uxth	r2, r3
    8f66:	687b      	ldr	r3, [r7, #4]
    8f68:	b29b      	uxth	r3, r3
    8f6a:	031b      	lsls	r3, r3, #12
    8f6c:	b29b      	uxth	r3, r3
    8f6e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8f72:	b29b      	uxth	r3, r3
    8f74:	4313      	orrs	r3, r2
    8f76:	b29a      	uxth	r2, r3
    8f78:	683b      	ldr	r3, [r7, #0]
    8f7a:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8f7c:	683a      	ldr	r2, [r7, #0]
    8f7e:	78d3      	ldrb	r3, [r2, #3]
    8f80:	f043 0303 	orr.w	r3, r3, #3
    8f84:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8f86:	683a      	ldr	r2, [r7, #0]
    8f88:	78d3      	ldrb	r3, [r2, #3]
    8f8a:	f043 030c 	orr.w	r3, r3, #12
    8f8e:	70d3      	strb	r3, [r2, #3]
}
    8f90:	bf00      	nop
    8f92:	3714      	adds	r7, #20
    8f94:	46bd      	mov	sp, r7
    8f96:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f9a:	4770      	bx	lr
    8f9c:	00800084 	.word	0x00800084

00008fa0 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8fa0:	b580      	push	{r7, lr}
    8fa2:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8fa4:	bf00      	nop
    8fa6:	2203      	movs	r2, #3
    8fa8:	2100      	movs	r1, #0
    8faa:	4804      	ldr	r0, [pc, #16]	; (8fbc <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8fac:	4b04      	ldr	r3, [pc, #16]	; (8fc0 <_usb_d_dev_wait_dpll_rdy+0x20>)
    8fae:	4798      	blx	r3
    8fb0:	4603      	mov	r3, r0
    8fb2:	2b03      	cmp	r3, #3
    8fb4:	d1f7      	bne.n	8fa6 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8fb6:	bf00      	nop
    8fb8:	bd80      	pop	{r7, pc}
    8fba:	bf00      	nop
    8fbc:	40001000 	.word	0x40001000
    8fc0:	000089d5 	.word	0x000089d5

00008fc4 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8fc4:	b580      	push	{r7, lr}
    8fc6:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8fc8:	480e      	ldr	r0, [pc, #56]	; (9004 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8fca:	4b0f      	ldr	r3, [pc, #60]	; (9008 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8fcc:	4798      	blx	r3
    8fce:	4603      	mov	r3, r0
    8fd0:	2b00      	cmp	r3, #0
    8fd2:	d00a      	beq.n	8fea <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8fd4:	bf00      	nop
    8fd6:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8fda:	480a      	ldr	r0, [pc, #40]	; (9004 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8fdc:	4b0b      	ldr	r3, [pc, #44]	; (900c <_usb_d_dev_wait_dfll_rdy+0x48>)
    8fde:	4798      	blx	r3
    8fe0:	4603      	mov	r3, r0
    8fe2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8fe6:	d1f6      	bne.n	8fd6 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8fe8:	e009      	b.n	8ffe <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8fea:	bf00      	nop
    8fec:	f44f 7180 	mov.w	r1, #256	; 0x100
    8ff0:	4804      	ldr	r0, [pc, #16]	; (9004 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8ff2:	4b06      	ldr	r3, [pc, #24]	; (900c <_usb_d_dev_wait_dfll_rdy+0x48>)
    8ff4:	4798      	blx	r3
    8ff6:	4603      	mov	r3, r0
    8ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8ffc:	d1f6      	bne.n	8fec <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8ffe:	bf00      	nop
    9000:	bd80      	pop	{r7, pc}
    9002:	bf00      	nop
    9004:	40001000 	.word	0x40001000
    9008:	00008a33 	.word	0x00008a33
    900c:	00008a0d 	.word	0x00008a0d

00009010 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    9010:	b580      	push	{r7, lr}
    9012:	b082      	sub	sp, #8
    9014:	af00      	add	r7, sp, #0
    9016:	4603      	mov	r3, r0
    9018:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    901a:	79fb      	ldrb	r3, [r7, #7]
    901c:	2b00      	cmp	r3, #0
    901e:	d102      	bne.n	9026 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9020:	4b05      	ldr	r3, [pc, #20]	; (9038 <_usb_d_dev_wait_clk_rdy+0x28>)
    9022:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    9024:	e004      	b.n	9030 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    9026:	79fb      	ldrb	r3, [r7, #7]
    9028:	2b01      	cmp	r3, #1
    902a:	d101      	bne.n	9030 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    902c:	4b03      	ldr	r3, [pc, #12]	; (903c <_usb_d_dev_wait_clk_rdy+0x2c>)
    902e:	4798      	blx	r3
}
    9030:	bf00      	nop
    9032:	3708      	adds	r7, #8
    9034:	46bd      	mov	sp, r7
    9036:	bd80      	pop	{r7, pc}
    9038:	00008fc5 	.word	0x00008fc5
    903c:	00008fa1 	.word	0x00008fa1

00009040 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9040:	b580      	push	{r7, lr}
    9042:	b082      	sub	sp, #8
    9044:	af00      	add	r7, sp, #0
    9046:	4603      	mov	r3, r0
    9048:	6039      	str	r1, [r7, #0]
    904a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    904c:	683b      	ldr	r3, [r7, #0]
    904e:	b2da      	uxtb	r2, r3
    9050:	79fb      	ldrb	r3, [r7, #7]
    9052:	4619      	mov	r1, r3
    9054:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9058:	4b02      	ldr	r3, [pc, #8]	; (9064 <_usbd_ep_int_ack+0x24>)
    905a:	4798      	blx	r3
}
    905c:	bf00      	nop
    905e:	3708      	adds	r7, #8
    9060:	46bd      	mov	sp, r7
    9062:	bd80      	pop	{r7, pc}
    9064:	00008b19 	.word	0x00008b19

00009068 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    9068:	b580      	push	{r7, lr}
    906a:	b082      	sub	sp, #8
    906c:	af00      	add	r7, sp, #0
    906e:	4603      	mov	r3, r0
    9070:	6039      	str	r1, [r7, #0]
    9072:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9074:	683b      	ldr	r3, [r7, #0]
    9076:	b2da      	uxtb	r2, r3
    9078:	79fb      	ldrb	r3, [r7, #7]
    907a:	4619      	mov	r1, r3
    907c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9080:	4b02      	ldr	r3, [pc, #8]	; (908c <_usbd_ep_int_en+0x24>)
    9082:	4798      	blx	r3
}
    9084:	bf00      	nop
    9086:	3708      	adds	r7, #8
    9088:	46bd      	mov	sp, r7
    908a:	bd80      	pop	{r7, pc}
    908c:	00008bed 	.word	0x00008bed

00009090 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    9090:	b580      	push	{r7, lr}
    9092:	b082      	sub	sp, #8
    9094:	af00      	add	r7, sp, #0
    9096:	4603      	mov	r3, r0
    9098:	6039      	str	r1, [r7, #0]
    909a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    909c:	683b      	ldr	r3, [r7, #0]
    909e:	b2da      	uxtb	r2, r3
    90a0:	79fb      	ldrb	r3, [r7, #7]
    90a2:	4619      	mov	r1, r3
    90a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90a8:	4b02      	ldr	r3, [pc, #8]	; (90b4 <_usbd_ep_int_dis+0x24>)
    90aa:	4798      	blx	r3
}
    90ac:	bf00      	nop
    90ae:	3708      	adds	r7, #8
    90b0:	46bd      	mov	sp, r7
    90b2:	bd80      	pop	{r7, pc}
    90b4:	00008c19 	.word	0x00008c19

000090b8 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    90b8:	b580      	push	{r7, lr}
    90ba:	b082      	sub	sp, #8
    90bc:	af00      	add	r7, sp, #0
    90be:	4603      	mov	r3, r0
    90c0:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    90c2:	79fb      	ldrb	r3, [r7, #7]
    90c4:	4619      	mov	r1, r3
    90c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90ca:	4b06      	ldr	r3, [pc, #24]	; (90e4 <_usbd_ep_is_ctrl+0x2c>)
    90cc:	4798      	blx	r3
    90ce:	4603      	mov	r3, r0
    90d0:	2b11      	cmp	r3, #17
    90d2:	bf0c      	ite	eq
    90d4:	2301      	moveq	r3, #1
    90d6:	2300      	movne	r3, #0
    90d8:	b2db      	uxtb	r3, r3
}
    90da:	4618      	mov	r0, r3
    90dc:	3708      	adds	r7, #8
    90de:	46bd      	mov	sp, r7
    90e0:	bd80      	pop	{r7, pc}
    90e2:	bf00      	nop
    90e4:	00008cd3 	.word	0x00008cd3

000090e8 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    90e8:	b580      	push	{r7, lr}
    90ea:	b082      	sub	sp, #8
    90ec:	af00      	add	r7, sp, #0
    90ee:	4603      	mov	r3, r0
    90f0:	71fb      	strb	r3, [r7, #7]
    90f2:	460b      	mov	r3, r1
    90f4:	71bb      	strb	r3, [r7, #6]
    90f6:	4613      	mov	r3, r2
    90f8:	717b      	strb	r3, [r7, #5]
	if (st) {
    90fa:	797b      	ldrb	r3, [r7, #5]
    90fc:	2b00      	cmp	r3, #0
    90fe:	d00b      	beq.n	9118 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9100:	79bb      	ldrb	r3, [r7, #6]
    9102:	2210      	movs	r2, #16
    9104:	fa02 f303 	lsl.w	r3, r2, r3
    9108:	b2da      	uxtb	r2, r3
    910a:	79fb      	ldrb	r3, [r7, #7]
    910c:	4619      	mov	r1, r3
    910e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9112:	4b09      	ldr	r3, [pc, #36]	; (9138 <_usbd_ep_set_stall+0x50>)
    9114:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    9116:	e00a      	b.n	912e <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9118:	79bb      	ldrb	r3, [r7, #6]
    911a:	2210      	movs	r2, #16
    911c:	fa02 f303 	lsl.w	r3, r2, r3
    9120:	b2da      	uxtb	r2, r3
    9122:	79fb      	ldrb	r3, [r7, #7]
    9124:	4619      	mov	r1, r3
    9126:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    912a:	4b04      	ldr	r3, [pc, #16]	; (913c <_usbd_ep_set_stall+0x54>)
    912c:	4798      	blx	r3
}
    912e:	bf00      	nop
    9130:	3708      	adds	r7, #8
    9132:	46bd      	mov	sp, r7
    9134:	bd80      	pop	{r7, pc}
    9136:	bf00      	nop
    9138:	00008b45 	.word	0x00008b45
    913c:	00008b99 	.word	0x00008b99

00009140 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9140:	b580      	push	{r7, lr}
    9142:	b084      	sub	sp, #16
    9144:	af00      	add	r7, sp, #0
    9146:	4603      	mov	r3, r0
    9148:	460a      	mov	r2, r1
    914a:	71fb      	strb	r3, [r7, #7]
    914c:	4613      	mov	r3, r2
    914e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9150:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9154:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9156:	79fb      	ldrb	r3, [r7, #7]
    9158:	4619      	mov	r1, r3
    915a:	68f8      	ldr	r0, [r7, #12]
    915c:	4b08      	ldr	r3, [pc, #32]	; (9180 <_usbd_ep_is_stalled+0x40>)
    915e:	4798      	blx	r3
    9160:	4603      	mov	r3, r0
    9162:	4619      	mov	r1, r3
    9164:	79bb      	ldrb	r3, [r7, #6]
    9166:	2210      	movs	r2, #16
    9168:	fa02 f303 	lsl.w	r3, r2, r3
    916c:	400b      	ands	r3, r1
    916e:	2b00      	cmp	r3, #0
    9170:	bf14      	ite	ne
    9172:	2301      	movne	r3, #1
    9174:	2300      	moveq	r3, #0
    9176:	b2db      	uxtb	r3, r3
}
    9178:	4618      	mov	r0, r3
    917a:	3710      	adds	r7, #16
    917c:	46bd      	mov	sp, r7
    917e:	bd80      	pop	{r7, pc}
    9180:	00008b71 	.word	0x00008b71

00009184 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    9184:	b580      	push	{r7, lr}
    9186:	b084      	sub	sp, #16
    9188:	af00      	add	r7, sp, #0
    918a:	4603      	mov	r3, r0
    918c:	460a      	mov	r2, r1
    918e:	71fb      	strb	r3, [r7, #7]
    9190:	4613      	mov	r3, r2
    9192:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9194:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9198:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    919a:	79fb      	ldrb	r3, [r7, #7]
    919c:	4619      	mov	r1, r3
    919e:	68f8      	ldr	r0, [r7, #12]
    91a0:	4b08      	ldr	r3, [pc, #32]	; (91c4 <_usbd_ep_is_stall_sent+0x40>)
    91a2:	4798      	blx	r3
    91a4:	4603      	mov	r3, r0
    91a6:	4619      	mov	r1, r3
    91a8:	79bb      	ldrb	r3, [r7, #6]
    91aa:	2220      	movs	r2, #32
    91ac:	fa02 f303 	lsl.w	r3, r2, r3
    91b0:	400b      	ands	r3, r1
    91b2:	2b00      	cmp	r3, #0
    91b4:	bf14      	ite	ne
    91b6:	2301      	movne	r3, #1
    91b8:	2300      	moveq	r3, #0
    91ba:	b2db      	uxtb	r3, r3
}
    91bc:	4618      	mov	r0, r3
    91be:	3710      	adds	r7, #16
    91c0:	46bd      	mov	sp, r7
    91c2:	bd80      	pop	{r7, pc}
    91c4:	00008af1 	.word	0x00008af1

000091c8 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    91c8:	b580      	push	{r7, lr}
    91ca:	b082      	sub	sp, #8
    91cc:	af00      	add	r7, sp, #0
    91ce:	4603      	mov	r3, r0
    91d0:	460a      	mov	r2, r1
    91d2:	71fb      	strb	r3, [r7, #7]
    91d4:	4613      	mov	r3, r2
    91d6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    91d8:	79bb      	ldrb	r3, [r7, #6]
    91da:	2220      	movs	r2, #32
    91dc:	409a      	lsls	r2, r3
    91de:	79fb      	ldrb	r3, [r7, #7]
    91e0:	4611      	mov	r1, r2
    91e2:	4618      	mov	r0, r3
    91e4:	4b02      	ldr	r3, [pc, #8]	; (91f0 <_usbd_ep_ack_stall+0x28>)
    91e6:	4798      	blx	r3
}
    91e8:	bf00      	nop
    91ea:	3708      	adds	r7, #8
    91ec:	46bd      	mov	sp, r7
    91ee:	bd80      	pop	{r7, pc}
    91f0:	00009041 	.word	0x00009041

000091f4 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    91f4:	b580      	push	{r7, lr}
    91f6:	b082      	sub	sp, #8
    91f8:	af00      	add	r7, sp, #0
    91fa:	4603      	mov	r3, r0
    91fc:	71fb      	strb	r3, [r7, #7]
    91fe:	460b      	mov	r3, r1
    9200:	71bb      	strb	r3, [r7, #6]
    9202:	4613      	mov	r3, r2
    9204:	717b      	strb	r3, [r7, #5]
	if (en) {
    9206:	797b      	ldrb	r3, [r7, #5]
    9208:	2b00      	cmp	r3, #0
    920a:	d008      	beq.n	921e <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    920c:	79bb      	ldrb	r3, [r7, #6]
    920e:	2220      	movs	r2, #32
    9210:	409a      	lsls	r2, r3
    9212:	79fb      	ldrb	r3, [r7, #7]
    9214:	4611      	mov	r1, r2
    9216:	4618      	mov	r0, r3
    9218:	4b07      	ldr	r3, [pc, #28]	; (9238 <_usbd_ep_int_stall_en+0x44>)
    921a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    921c:	e007      	b.n	922e <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    921e:	79bb      	ldrb	r3, [r7, #6]
    9220:	2220      	movs	r2, #32
    9222:	409a      	lsls	r2, r3
    9224:	79fb      	ldrb	r3, [r7, #7]
    9226:	4611      	mov	r1, r2
    9228:	4618      	mov	r0, r3
    922a:	4b04      	ldr	r3, [pc, #16]	; (923c <_usbd_ep_int_stall_en+0x48>)
    922c:	4798      	blx	r3
}
    922e:	bf00      	nop
    9230:	3708      	adds	r7, #8
    9232:	46bd      	mov	sp, r7
    9234:	bd80      	pop	{r7, pc}
    9236:	bf00      	nop
    9238:	00009069 	.word	0x00009069
    923c:	00009091 	.word	0x00009091

00009240 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9240:	b580      	push	{r7, lr}
    9242:	b082      	sub	sp, #8
    9244:	af00      	add	r7, sp, #0
    9246:	4603      	mov	r3, r0
    9248:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    924a:	79fb      	ldrb	r3, [r7, #7]
    924c:	4619      	mov	r1, r3
    924e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9252:	4b03      	ldr	r3, [pc, #12]	; (9260 <_usbd_ep_stop_setup+0x20>)
    9254:	4798      	blx	r3
}
    9256:	bf00      	nop
    9258:	3708      	adds	r7, #8
    925a:	46bd      	mov	sp, r7
    925c:	bd80      	pop	{r7, pc}
    925e:	bf00      	nop
    9260:	00008bc5 	.word	0x00008bc5

00009264 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9264:	b580      	push	{r7, lr}
    9266:	b082      	sub	sp, #8
    9268:	af00      	add	r7, sp, #0
    926a:	4603      	mov	r3, r0
    926c:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    926e:	79fb      	ldrb	r3, [r7, #7]
    9270:	2210      	movs	r2, #16
    9272:	4619      	mov	r1, r3
    9274:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9278:	4b05      	ldr	r3, [pc, #20]	; (9290 <_usbd_ep_is_setup+0x2c>)
    927a:	4798      	blx	r3
    927c:	4603      	mov	r3, r0
    927e:	2b00      	cmp	r3, #0
    9280:	bf14      	ite	ne
    9282:	2301      	movne	r3, #1
    9284:	2300      	moveq	r3, #0
    9286:	b2db      	uxtb	r3, r3
}
    9288:	4618      	mov	r0, r3
    928a:	3708      	adds	r7, #8
    928c:	46bd      	mov	sp, r7
    928e:	bd80      	pop	{r7, pc}
    9290:	00008abb 	.word	0x00008abb

00009294 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    9294:	b580      	push	{r7, lr}
    9296:	b082      	sub	sp, #8
    9298:	af00      	add	r7, sp, #0
    929a:	4603      	mov	r3, r0
    929c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    929e:	79fb      	ldrb	r3, [r7, #7]
    92a0:	2110      	movs	r1, #16
    92a2:	4618      	mov	r0, r3
    92a4:	4b02      	ldr	r3, [pc, #8]	; (92b0 <_usbd_ep_ack_setup+0x1c>)
    92a6:	4798      	blx	r3
}
    92a8:	bf00      	nop
    92aa:	3708      	adds	r7, #8
    92ac:	46bd      	mov	sp, r7
    92ae:	bd80      	pop	{r7, pc}
    92b0:	00009041 	.word	0x00009041

000092b4 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    92b4:	b580      	push	{r7, lr}
    92b6:	b082      	sub	sp, #8
    92b8:	af00      	add	r7, sp, #0
    92ba:	4603      	mov	r3, r0
    92bc:	71fb      	strb	r3, [r7, #7]
    92be:	460b      	mov	r3, r1
    92c0:	71bb      	strb	r3, [r7, #6]
    92c2:	4613      	mov	r3, r2
    92c4:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    92c6:	797b      	ldrb	r3, [r7, #5]
    92c8:	2b00      	cmp	r3, #0
    92ca:	d00b      	beq.n	92e4 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    92cc:	79bb      	ldrb	r3, [r7, #6]
    92ce:	2201      	movs	r2, #1
    92d0:	fa02 f303 	lsl.w	r3, r2, r3
    92d4:	b2da      	uxtb	r2, r3
    92d6:	79fb      	ldrb	r3, [r7, #7]
    92d8:	4619      	mov	r1, r3
    92da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92de:	4b09      	ldr	r3, [pc, #36]	; (9304 <_usbd_ep_set_toggle+0x50>)
    92e0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    92e2:	e00a      	b.n	92fa <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    92e4:	79bb      	ldrb	r3, [r7, #6]
    92e6:	2201      	movs	r2, #1
    92e8:	fa02 f303 	lsl.w	r3, r2, r3
    92ec:	b2da      	uxtb	r2, r3
    92ee:	79fb      	ldrb	r3, [r7, #7]
    92f0:	4619      	mov	r1, r3
    92f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92f6:	4b04      	ldr	r3, [pc, #16]	; (9308 <_usbd_ep_set_toggle+0x54>)
    92f8:	4798      	blx	r3
}
    92fa:	bf00      	nop
    92fc:	3708      	adds	r7, #8
    92fe:	46bd      	mov	sp, r7
    9300:	bd80      	pop	{r7, pc}
    9302:	bf00      	nop
    9304:	00008b45 	.word	0x00008b45
    9308:	00008b99 	.word	0x00008b99

0000930c <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    930c:	b580      	push	{r7, lr}
    930e:	b082      	sub	sp, #8
    9310:	af00      	add	r7, sp, #0
    9312:	4603      	mov	r3, r0
    9314:	460a      	mov	r2, r1
    9316:	71fb      	strb	r3, [r7, #7]
    9318:	4613      	mov	r3, r2
    931a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    931c:	79bb      	ldrb	r3, [r7, #6]
    931e:	2201      	movs	r2, #1
    9320:	409a      	lsls	r2, r3
    9322:	79fb      	ldrb	r3, [r7, #7]
    9324:	4611      	mov	r1, r2
    9326:	4618      	mov	r0, r3
    9328:	4b02      	ldr	r3, [pc, #8]	; (9334 <_usbd_ep_ack_io_cpt+0x28>)
    932a:	4798      	blx	r3
}
    932c:	bf00      	nop
    932e:	3708      	adds	r7, #8
    9330:	46bd      	mov	sp, r7
    9332:	bd80      	pop	{r7, pc}
    9334:	00009041 	.word	0x00009041

00009338 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9338:	b480      	push	{r7}
    933a:	b085      	sub	sp, #20
    933c:	af00      	add	r7, sp, #0
    933e:	4603      	mov	r3, r0
    9340:	603a      	str	r2, [r7, #0]
    9342:	71fb      	strb	r3, [r7, #7]
    9344:	460b      	mov	r3, r1
    9346:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9348:	79fa      	ldrb	r2, [r7, #7]
    934a:	79bb      	ldrb	r3, [r7, #6]
    934c:	0052      	lsls	r2, r2, #1
    934e:	4413      	add	r3, r2
    9350:	011b      	lsls	r3, r3, #4
    9352:	4a06      	ldr	r2, [pc, #24]	; (936c <_usbd_ep_set_buf+0x34>)
    9354:	4413      	add	r3, r2
    9356:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    9358:	68fb      	ldr	r3, [r7, #12]
    935a:	683a      	ldr	r2, [r7, #0]
    935c:	601a      	str	r2, [r3, #0]
}
    935e:	bf00      	nop
    9360:	3714      	adds	r7, #20
    9362:	46bd      	mov	sp, r7
    9364:	f85d 7b04 	ldr.w	r7, [sp], #4
    9368:	4770      	bx	lr
    936a:	bf00      	nop
    936c:	200024e0 	.word	0x200024e0

00009370 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9370:	b480      	push	{r7}
    9372:	b085      	sub	sp, #20
    9374:	af00      	add	r7, sp, #0
    9376:	4603      	mov	r3, r0
    9378:	71fb      	strb	r3, [r7, #7]
    937a:	460b      	mov	r3, r1
    937c:	71bb      	strb	r3, [r7, #6]
    937e:	4613      	mov	r3, r2
    9380:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9382:	79fa      	ldrb	r2, [r7, #7]
    9384:	79bb      	ldrb	r3, [r7, #6]
    9386:	0052      	lsls	r2, r2, #1
    9388:	4413      	add	r3, r2
    938a:	011b      	lsls	r3, r3, #4
    938c:	4a08      	ldr	r2, [pc, #32]	; (93b0 <_usbd_ep_set_in_count+0x40>)
    938e:	4413      	add	r3, r2
    9390:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9392:	88bb      	ldrh	r3, [r7, #4]
    9394:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9398:	b299      	uxth	r1, r3
    939a:	68fa      	ldr	r2, [r7, #12]
    939c:	6853      	ldr	r3, [r2, #4]
    939e:	f361 339b 	bfi	r3, r1, #14, #14
    93a2:	6053      	str	r3, [r2, #4]
}
    93a4:	bf00      	nop
    93a6:	3714      	adds	r7, #20
    93a8:	46bd      	mov	sp, r7
    93aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    93ae:	4770      	bx	lr
    93b0:	200024e0 	.word	0x200024e0

000093b4 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    93b4:	b480      	push	{r7}
    93b6:	b085      	sub	sp, #20
    93b8:	af00      	add	r7, sp, #0
    93ba:	4603      	mov	r3, r0
    93bc:	71fb      	strb	r3, [r7, #7]
    93be:	460b      	mov	r3, r1
    93c0:	71bb      	strb	r3, [r7, #6]
    93c2:	4613      	mov	r3, r2
    93c4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    93c6:	79fa      	ldrb	r2, [r7, #7]
    93c8:	79bb      	ldrb	r3, [r7, #6]
    93ca:	0052      	lsls	r2, r2, #1
    93cc:	4413      	add	r3, r2
    93ce:	011b      	lsls	r3, r3, #4
    93d0:	4a08      	ldr	r2, [pc, #32]	; (93f4 <_usbd_ep_set_in_size+0x40>)
    93d2:	4413      	add	r3, r2
    93d4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    93d6:	88bb      	ldrh	r3, [r7, #4]
    93d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    93dc:	b299      	uxth	r1, r3
    93de:	68fa      	ldr	r2, [r7, #12]
    93e0:	6853      	ldr	r3, [r2, #4]
    93e2:	f361 030d 	bfi	r3, r1, #0, #14
    93e6:	6053      	str	r3, [r2, #4]
}
    93e8:	bf00      	nop
    93ea:	3714      	adds	r7, #20
    93ec:	46bd      	mov	sp, r7
    93ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    93f2:	4770      	bx	lr
    93f4:	200024e0 	.word	0x200024e0

000093f8 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    93f8:	b480      	push	{r7}
    93fa:	b085      	sub	sp, #20
    93fc:	af00      	add	r7, sp, #0
    93fe:	4603      	mov	r3, r0
    9400:	71fb      	strb	r3, [r7, #7]
    9402:	460b      	mov	r3, r1
    9404:	71bb      	strb	r3, [r7, #6]
    9406:	4613      	mov	r3, r2
    9408:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    940a:	79fa      	ldrb	r2, [r7, #7]
    940c:	79bb      	ldrb	r3, [r7, #6]
    940e:	0052      	lsls	r2, r2, #1
    9410:	4413      	add	r3, r2
    9412:	011b      	lsls	r3, r3, #4
    9414:	4a08      	ldr	r2, [pc, #32]	; (9438 <_usbd_ep_set_out_count+0x40>)
    9416:	4413      	add	r3, r2
    9418:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    941a:	88bb      	ldrh	r3, [r7, #4]
    941c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9420:	b299      	uxth	r1, r3
    9422:	68fa      	ldr	r2, [r7, #12]
    9424:	6853      	ldr	r3, [r2, #4]
    9426:	f361 030d 	bfi	r3, r1, #0, #14
    942a:	6053      	str	r3, [r2, #4]
}
    942c:	bf00      	nop
    942e:	3714      	adds	r7, #20
    9430:	46bd      	mov	sp, r7
    9432:	f85d 7b04 	ldr.w	r7, [sp], #4
    9436:	4770      	bx	lr
    9438:	200024e0 	.word	0x200024e0

0000943c <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    943c:	b480      	push	{r7}
    943e:	b085      	sub	sp, #20
    9440:	af00      	add	r7, sp, #0
    9442:	4603      	mov	r3, r0
    9444:	71fb      	strb	r3, [r7, #7]
    9446:	460b      	mov	r3, r1
    9448:	71bb      	strb	r3, [r7, #6]
    944a:	4613      	mov	r3, r2
    944c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    944e:	79fa      	ldrb	r2, [r7, #7]
    9450:	79bb      	ldrb	r3, [r7, #6]
    9452:	0052      	lsls	r2, r2, #1
    9454:	4413      	add	r3, r2
    9456:	011b      	lsls	r3, r3, #4
    9458:	4a08      	ldr	r2, [pc, #32]	; (947c <_usbd_ep_set_out_size+0x40>)
    945a:	4413      	add	r3, r2
    945c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    945e:	88bb      	ldrh	r3, [r7, #4]
    9460:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9464:	b299      	uxth	r1, r3
    9466:	68fa      	ldr	r2, [r7, #12]
    9468:	6853      	ldr	r3, [r2, #4]
    946a:	f361 339b 	bfi	r3, r1, #14, #14
    946e:	6053      	str	r3, [r2, #4]
}
    9470:	bf00      	nop
    9472:	3714      	adds	r7, #20
    9474:	46bd      	mov	sp, r7
    9476:	f85d 7b04 	ldr.w	r7, [sp], #4
    947a:	4770      	bx	lr
    947c:	200024e0 	.word	0x200024e0

00009480 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9480:	b580      	push	{r7, lr}
    9482:	b084      	sub	sp, #16
    9484:	af00      	add	r7, sp, #0
    9486:	60ba      	str	r2, [r7, #8]
    9488:	607b      	str	r3, [r7, #4]
    948a:	4603      	mov	r3, r0
    948c:	73fb      	strb	r3, [r7, #15]
    948e:	460b      	mov	r3, r1
    9490:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9492:	68bb      	ldr	r3, [r7, #8]
    9494:	b29a      	uxth	r2, r3
    9496:	7bb9      	ldrb	r1, [r7, #14]
    9498:	7bfb      	ldrb	r3, [r7, #15]
    949a:	4618      	mov	r0, r3
    949c:	4b06      	ldr	r3, [pc, #24]	; (94b8 <_usbd_ep_set_in_trans+0x38>)
    949e:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    94a0:	687b      	ldr	r3, [r7, #4]
    94a2:	b29a      	uxth	r2, r3
    94a4:	7bb9      	ldrb	r1, [r7, #14]
    94a6:	7bfb      	ldrb	r3, [r7, #15]
    94a8:	4618      	mov	r0, r3
    94aa:	4b04      	ldr	r3, [pc, #16]	; (94bc <_usbd_ep_set_in_trans+0x3c>)
    94ac:	4798      	blx	r3
}
    94ae:	bf00      	nop
    94b0:	3710      	adds	r7, #16
    94b2:	46bd      	mov	sp, r7
    94b4:	bd80      	pop	{r7, pc}
    94b6:	bf00      	nop
    94b8:	000093b5 	.word	0x000093b5
    94bc:	00009371 	.word	0x00009371

000094c0 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    94c0:	b580      	push	{r7, lr}
    94c2:	b084      	sub	sp, #16
    94c4:	af00      	add	r7, sp, #0
    94c6:	60ba      	str	r2, [r7, #8]
    94c8:	607b      	str	r3, [r7, #4]
    94ca:	4603      	mov	r3, r0
    94cc:	73fb      	strb	r3, [r7, #15]
    94ce:	460b      	mov	r3, r1
    94d0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    94d2:	68bb      	ldr	r3, [r7, #8]
    94d4:	b29a      	uxth	r2, r3
    94d6:	7bb9      	ldrb	r1, [r7, #14]
    94d8:	7bfb      	ldrb	r3, [r7, #15]
    94da:	4618      	mov	r0, r3
    94dc:	4b06      	ldr	r3, [pc, #24]	; (94f8 <_usbd_ep_set_out_trans+0x38>)
    94de:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    94e0:	687b      	ldr	r3, [r7, #4]
    94e2:	b29a      	uxth	r2, r3
    94e4:	7bb9      	ldrb	r1, [r7, #14]
    94e6:	7bfb      	ldrb	r3, [r7, #15]
    94e8:	4618      	mov	r0, r3
    94ea:	4b04      	ldr	r3, [pc, #16]	; (94fc <_usbd_ep_set_out_trans+0x3c>)
    94ec:	4798      	blx	r3
}
    94ee:	bf00      	nop
    94f0:	3710      	adds	r7, #16
    94f2:	46bd      	mov	sp, r7
    94f4:	bd80      	pop	{r7, pc}
    94f6:	bf00      	nop
    94f8:	0000943d 	.word	0x0000943d
    94fc:	000093f9 	.word	0x000093f9

00009500 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9500:	b480      	push	{r7}
    9502:	b085      	sub	sp, #20
    9504:	af00      	add	r7, sp, #0
    9506:	4603      	mov	r3, r0
    9508:	460a      	mov	r2, r1
    950a:	71fb      	strb	r3, [r7, #7]
    950c:	4613      	mov	r3, r2
    950e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9510:	79fa      	ldrb	r2, [r7, #7]
    9512:	79bb      	ldrb	r3, [r7, #6]
    9514:	0052      	lsls	r2, r2, #1
    9516:	4413      	add	r3, r2
    9518:	011b      	lsls	r3, r3, #4
    951a:	4a06      	ldr	r2, [pc, #24]	; (9534 <_usbd_ep_clear_bank_status+0x34>)
    951c:	4413      	add	r3, r2
    951e:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9520:	68fb      	ldr	r3, [r7, #12]
    9522:	2200      	movs	r2, #0
    9524:	729a      	strb	r2, [r3, #10]
}
    9526:	bf00      	nop
    9528:	3714      	adds	r7, #20
    952a:	46bd      	mov	sp, r7
    952c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9530:	4770      	bx	lr
    9532:	bf00      	nop
    9534:	200024e0 	.word	0x200024e0

00009538 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9538:	b580      	push	{r7, lr}
    953a:	b082      	sub	sp, #8
    953c:	af00      	add	r7, sp, #0
    953e:	4603      	mov	r3, r0
    9540:	71fb      	strb	r3, [r7, #7]
    9542:	460b      	mov	r3, r1
    9544:	71bb      	strb	r3, [r7, #6]
    9546:	4613      	mov	r3, r2
    9548:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    954a:	797b      	ldrb	r3, [r7, #5]
    954c:	2b00      	cmp	r3, #0
    954e:	d00b      	beq.n	9568 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9550:	79bb      	ldrb	r3, [r7, #6]
    9552:	2240      	movs	r2, #64	; 0x40
    9554:	fa02 f303 	lsl.w	r3, r2, r3
    9558:	b2da      	uxtb	r2, r3
    955a:	79fb      	ldrb	r3, [r7, #7]
    955c:	4619      	mov	r1, r3
    955e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9562:	4b09      	ldr	r3, [pc, #36]	; (9588 <_usbd_ep_set_in_rdy+0x50>)
    9564:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9566:	e00a      	b.n	957e <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9568:	79bb      	ldrb	r3, [r7, #6]
    956a:	2240      	movs	r2, #64	; 0x40
    956c:	fa02 f303 	lsl.w	r3, r2, r3
    9570:	b2da      	uxtb	r2, r3
    9572:	79fb      	ldrb	r3, [r7, #7]
    9574:	4619      	mov	r1, r3
    9576:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    957a:	4b04      	ldr	r3, [pc, #16]	; (958c <_usbd_ep_set_in_rdy+0x54>)
    957c:	4798      	blx	r3
}
    957e:	bf00      	nop
    9580:	3708      	adds	r7, #8
    9582:	46bd      	mov	sp, r7
    9584:	bd80      	pop	{r7, pc}
    9586:	bf00      	nop
    9588:	00008b45 	.word	0x00008b45
    958c:	00008b99 	.word	0x00008b99

00009590 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9590:	b580      	push	{r7, lr}
    9592:	b082      	sub	sp, #8
    9594:	af00      	add	r7, sp, #0
    9596:	4603      	mov	r3, r0
    9598:	71fb      	strb	r3, [r7, #7]
    959a:	460b      	mov	r3, r1
    959c:	71bb      	strb	r3, [r7, #6]
    959e:	4613      	mov	r3, r2
    95a0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    95a2:	797b      	ldrb	r3, [r7, #5]
    95a4:	2b00      	cmp	r3, #0
    95a6:	d00b      	beq.n	95c0 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    95a8:	79bb      	ldrb	r3, [r7, #6]
    95aa:	2240      	movs	r2, #64	; 0x40
    95ac:	fa02 f303 	lsl.w	r3, r2, r3
    95b0:	b2da      	uxtb	r2, r3
    95b2:	79fb      	ldrb	r3, [r7, #7]
    95b4:	4619      	mov	r1, r3
    95b6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95ba:	4b09      	ldr	r3, [pc, #36]	; (95e0 <_usbd_ep_set_out_rdy+0x50>)
    95bc:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    95be:	e00a      	b.n	95d6 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    95c0:	79bb      	ldrb	r3, [r7, #6]
    95c2:	2240      	movs	r2, #64	; 0x40
    95c4:	fa02 f303 	lsl.w	r3, r2, r3
    95c8:	b2da      	uxtb	r2, r3
    95ca:	79fb      	ldrb	r3, [r7, #7]
    95cc:	4619      	mov	r1, r3
    95ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95d2:	4b04      	ldr	r3, [pc, #16]	; (95e4 <_usbd_ep_set_out_rdy+0x54>)
    95d4:	4798      	blx	r3
}
    95d6:	bf00      	nop
    95d8:	3708      	adds	r7, #8
    95da:	46bd      	mov	sp, r7
    95dc:	bd80      	pop	{r7, pc}
    95de:	bf00      	nop
    95e0:	00008b99 	.word	0x00008b99
    95e4:	00008b45 	.word	0x00008b45

000095e8 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    95e8:	b480      	push	{r7}
    95ea:	b083      	sub	sp, #12
    95ec:	af00      	add	r7, sp, #0
    95ee:	4603      	mov	r3, r0
    95f0:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    95f2:	88fb      	ldrh	r3, [r7, #6]
    95f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    95f8:	d820      	bhi.n	963c <_usbd_ep_pcksize_size+0x54>
    95fa:	88fb      	ldrh	r3, [r7, #6]
    95fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9600:	d81a      	bhi.n	9638 <_usbd_ep_pcksize_size+0x50>
    9602:	88fb      	ldrh	r3, [r7, #6]
    9604:	2b80      	cmp	r3, #128	; 0x80
    9606:	d815      	bhi.n	9634 <_usbd_ep_pcksize_size+0x4c>
    9608:	88fb      	ldrh	r3, [r7, #6]
    960a:	2b40      	cmp	r3, #64	; 0x40
    960c:	d810      	bhi.n	9630 <_usbd_ep_pcksize_size+0x48>
    960e:	88fb      	ldrh	r3, [r7, #6]
    9610:	2b20      	cmp	r3, #32
    9612:	d80b      	bhi.n	962c <_usbd_ep_pcksize_size+0x44>
    9614:	88fb      	ldrh	r3, [r7, #6]
    9616:	2b10      	cmp	r3, #16
    9618:	d806      	bhi.n	9628 <_usbd_ep_pcksize_size+0x40>
    961a:	88fb      	ldrh	r3, [r7, #6]
    961c:	2b08      	cmp	r3, #8
    961e:	bf8c      	ite	hi
    9620:	2301      	movhi	r3, #1
    9622:	2300      	movls	r3, #0
    9624:	b2db      	uxtb	r3, r3
    9626:	e00a      	b.n	963e <_usbd_ep_pcksize_size+0x56>
    9628:	2302      	movs	r3, #2
    962a:	e008      	b.n	963e <_usbd_ep_pcksize_size+0x56>
    962c:	2303      	movs	r3, #3
    962e:	e006      	b.n	963e <_usbd_ep_pcksize_size+0x56>
    9630:	2304      	movs	r3, #4
    9632:	e004      	b.n	963e <_usbd_ep_pcksize_size+0x56>
    9634:	2305      	movs	r3, #5
    9636:	e002      	b.n	963e <_usbd_ep_pcksize_size+0x56>
    9638:	2306      	movs	r3, #6
    963a:	e000      	b.n	963e <_usbd_ep_pcksize_size+0x56>
    963c:	2307      	movs	r3, #7
}
    963e:	4618      	mov	r0, r3
    9640:	370c      	adds	r7, #12
    9642:	46bd      	mov	sp, r7
    9644:	f85d 7b04 	ldr.w	r7, [sp], #4
    9648:	4770      	bx	lr
	...

0000964c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    964c:	b480      	push	{r7}
    964e:	b085      	sub	sp, #20
    9650:	af00      	add	r7, sp, #0
    9652:	4603      	mov	r3, r0
    9654:	460a      	mov	r2, r1
    9656:	71fb      	strb	r3, [r7, #7]
    9658:	4613      	mov	r3, r2
    965a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    965c:	79fb      	ldrb	r3, [r7, #7]
    965e:	2b00      	cmp	r3, #0
    9660:	d008      	beq.n	9674 <_usb_d_dev_ept+0x28>
    9662:	79bb      	ldrb	r3, [r7, #6]
    9664:	2b00      	cmp	r3, #0
    9666:	d003      	beq.n	9670 <_usb_d_dev_ept+0x24>
    9668:	79fb      	ldrb	r3, [r7, #7]
    966a:	3304      	adds	r3, #4
    966c:	b2db      	uxtb	r3, r3
    966e:	e002      	b.n	9676 <_usb_d_dev_ept+0x2a>
    9670:	79fb      	ldrb	r3, [r7, #7]
    9672:	e000      	b.n	9676 <_usb_d_dev_ept+0x2a>
    9674:	2300      	movs	r3, #0
    9676:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9678:	7bfa      	ldrb	r2, [r7, #15]
    967a:	4613      	mov	r3, r2
    967c:	009b      	lsls	r3, r3, #2
    967e:	4413      	add	r3, r2
    9680:	009b      	lsls	r3, r3, #2
    9682:	3310      	adds	r3, #16
    9684:	4a04      	ldr	r2, [pc, #16]	; (9698 <_usb_d_dev_ept+0x4c>)
    9686:	4413      	add	r3, r2
    9688:	3304      	adds	r3, #4
}
    968a:	4618      	mov	r0, r3
    968c:	3714      	adds	r7, #20
    968e:	46bd      	mov	sp, r7
    9690:	f85d 7b04 	ldr.w	r7, [sp], #4
    9694:	4770      	bx	lr
    9696:	bf00      	nop
    9698:	20002418 	.word	0x20002418

0000969c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    969c:	b580      	push	{r7, lr}
    969e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    96a0:	2104      	movs	r1, #4
    96a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96a6:	4b03      	ldr	r3, [pc, #12]	; (96b4 <_usb_d_dev_sof+0x18>)
    96a8:	4798      	blx	r3
	dev_inst.callbacks.sof();
    96aa:	4b03      	ldr	r3, [pc, #12]	; (96b8 <_usb_d_dev_sof+0x1c>)
    96ac:	681b      	ldr	r3, [r3, #0]
    96ae:	4798      	blx	r3
}
    96b0:	bf00      	nop
    96b2:	bd80      	pop	{r7, pc}
    96b4:	00008d13 	.word	0x00008d13
    96b8:	20002418 	.word	0x20002418

000096bc <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    96bc:	b580      	push	{r7, lr}
    96be:	b084      	sub	sp, #16
    96c0:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    96c2:	2300      	movs	r3, #0
    96c4:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    96c6:	f240 2101 	movw	r1, #513	; 0x201
    96ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96ce:	4b1a      	ldr	r3, [pc, #104]	; (9738 <_usb_d_dev_lpmsusp+0x7c>)
    96d0:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    96d2:	f240 2101 	movw	r1, #513	; 0x201
    96d6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96da:	4b18      	ldr	r3, [pc, #96]	; (973c <_usb_d_dev_lpmsusp+0x80>)
    96dc:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    96de:	2170      	movs	r1, #112	; 0x70
    96e0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    96e4:	4b16      	ldr	r3, [pc, #88]	; (9740 <_usb_d_dev_lpmsusp+0x84>)
    96e6:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    96e8:	2300      	movs	r3, #0
    96ea:	73fb      	strb	r3, [r7, #15]
    96ec:	e018      	b.n	9720 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    96ee:	7bfb      	ldrb	r3, [r7, #15]
    96f0:	015b      	lsls	r3, r3, #5
    96f2:	4a14      	ldr	r2, [pc, #80]	; (9744 <_usb_d_dev_lpmsusp+0x88>)
    96f4:	4413      	add	r3, r2
    96f6:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    96f8:	687b      	ldr	r3, [r7, #4]
    96fa:	891b      	ldrh	r3, [r3, #8]
    96fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9700:	b2db      	uxtb	r3, r3
    9702:	2b03      	cmp	r3, #3
    9704:	d109      	bne.n	971a <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9706:	687b      	ldr	r3, [r7, #4]
    9708:	891b      	ldrh	r3, [r3, #8]
    970a:	f3c3 130a 	ubfx	r3, r3, #4, #11
    970e:	b29b      	uxth	r3, r3
    9710:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9712:	687b      	ldr	r3, [r7, #4]
    9714:	2200      	movs	r2, #0
    9716:	811a      	strh	r2, [r3, #8]
			break;
    9718:	e005      	b.n	9726 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    971a:	7bfb      	ldrb	r3, [r7, #15]
    971c:	3301      	adds	r3, #1
    971e:	73fb      	strb	r3, [r7, #15]
    9720:	7bfb      	ldrb	r3, [r7, #15]
    9722:	2b03      	cmp	r3, #3
    9724:	d9e3      	bls.n	96ee <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9726:	4b08      	ldr	r3, [pc, #32]	; (9748 <_usb_d_dev_lpmsusp+0x8c>)
    9728:	685b      	ldr	r3, [r3, #4]
    972a:	68b9      	ldr	r1, [r7, #8]
    972c:	2003      	movs	r0, #3
    972e:	4798      	blx	r3
}
    9730:	bf00      	nop
    9732:	3710      	adds	r7, #16
    9734:	46bd      	mov	sp, r7
    9736:	bd80      	pop	{r7, pc}
    9738:	00008d13 	.word	0x00008d13
    973c:	00008d69 	.word	0x00008d69
    9740:	00008d31 	.word	0x00008d31
    9744:	200024e0 	.word	0x200024e0
    9748:	20002418 	.word	0x20002418

0000974c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    974c:	b580      	push	{r7, lr}
    974e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9750:	2180      	movs	r1, #128	; 0x80
    9752:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9756:	4b04      	ldr	r3, [pc, #16]	; (9768 <_usb_d_dev_ramerr+0x1c>)
    9758:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    975a:	4b04      	ldr	r3, [pc, #16]	; (976c <_usb_d_dev_ramerr+0x20>)
    975c:	685b      	ldr	r3, [r3, #4]
    975e:	2100      	movs	r1, #0
    9760:	2005      	movs	r0, #5
    9762:	4798      	blx	r3
}
    9764:	bf00      	nop
    9766:	bd80      	pop	{r7, pc}
    9768:	00008d13 	.word	0x00008d13
    976c:	20002418 	.word	0x20002418

00009770 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9770:	b580      	push	{r7, lr}
    9772:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9774:	2170      	movs	r1, #112	; 0x70
    9776:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    977a:	4b0b      	ldr	r3, [pc, #44]	; (97a8 <_usb_d_dev_wakeup+0x38>)
    977c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    977e:	2170      	movs	r1, #112	; 0x70
    9780:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9784:	4b09      	ldr	r3, [pc, #36]	; (97ac <_usb_d_dev_wakeup+0x3c>)
    9786:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9788:	f240 2101 	movw	r1, #513	; 0x201
    978c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9790:	4b07      	ldr	r3, [pc, #28]	; (97b0 <_usb_d_dev_wakeup+0x40>)
    9792:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9794:	2000      	movs	r0, #0
    9796:	4b07      	ldr	r3, [pc, #28]	; (97b4 <_usb_d_dev_wakeup+0x44>)
    9798:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    979a:	4b07      	ldr	r3, [pc, #28]	; (97b8 <_usb_d_dev_wakeup+0x48>)
    979c:	685b      	ldr	r3, [r3, #4]
    979e:	2100      	movs	r1, #0
    97a0:	2002      	movs	r0, #2
    97a2:	4798      	blx	r3
}
    97a4:	bf00      	nop
    97a6:	bd80      	pop	{r7, pc}
    97a8:	00008d13 	.word	0x00008d13
    97ac:	00008d69 	.word	0x00008d69
    97b0:	00008d31 	.word	0x00008d31
    97b4:	00009011 	.word	0x00009011
    97b8:	20002418 	.word	0x20002418

000097bc <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    97bc:	b580      	push	{r7, lr}
    97be:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    97c0:	2200      	movs	r2, #0
    97c2:	2100      	movs	r1, #0
    97c4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97c8:	4b0d      	ldr	r3, [pc, #52]	; (9800 <_usb_d_dev_reset+0x44>)
    97ca:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    97cc:	2108      	movs	r1, #8
    97ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97d2:	4b0c      	ldr	r3, [pc, #48]	; (9804 <_usb_d_dev_reset+0x48>)
    97d4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    97d6:	2170      	movs	r1, #112	; 0x70
    97d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97dc:	4b0a      	ldr	r3, [pc, #40]	; (9808 <_usb_d_dev_reset+0x4c>)
    97de:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    97e0:	f240 2101 	movw	r1, #513	; 0x201
    97e4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97e8:	4b08      	ldr	r3, [pc, #32]	; (980c <_usb_d_dev_reset+0x50>)
    97ea:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    97ec:	4b08      	ldr	r3, [pc, #32]	; (9810 <_usb_d_dev_reset+0x54>)
    97ee:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    97f0:	4b08      	ldr	r3, [pc, #32]	; (9814 <_usb_d_dev_reset+0x58>)
    97f2:	685b      	ldr	r3, [r3, #4]
    97f4:	2100      	movs	r1, #0
    97f6:	2001      	movs	r0, #1
    97f8:	4798      	blx	r3
}
    97fa:	bf00      	nop
    97fc:	bd80      	pop	{r7, pc}
    97fe:	bf00      	nop
    9800:	00008ca9 	.word	0x00008ca9
    9804:	00008d13 	.word	0x00008d13
    9808:	00008d69 	.word	0x00008d69
    980c:	00008d31 	.word	0x00008d31
    9810:	0000a379 	.word	0x0000a379
    9814:	20002418 	.word	0x20002418

00009818 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9818:	b580      	push	{r7, lr}
    981a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    981c:	f240 2101 	movw	r1, #513	; 0x201
    9820:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9824:	4b09      	ldr	r3, [pc, #36]	; (984c <_usb_d_dev_suspend+0x34>)
    9826:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9828:	f240 2101 	movw	r1, #513	; 0x201
    982c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9830:	4b07      	ldr	r3, [pc, #28]	; (9850 <_usb_d_dev_suspend+0x38>)
    9832:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9834:	2170      	movs	r1, #112	; 0x70
    9836:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    983a:	4b06      	ldr	r3, [pc, #24]	; (9854 <_usb_d_dev_suspend+0x3c>)
    983c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    983e:	4b06      	ldr	r3, [pc, #24]	; (9858 <_usb_d_dev_suspend+0x40>)
    9840:	685b      	ldr	r3, [r3, #4]
    9842:	2100      	movs	r1, #0
    9844:	2004      	movs	r0, #4
    9846:	4798      	blx	r3
}
    9848:	bf00      	nop
    984a:	bd80      	pop	{r7, pc}
    984c:	00008d13 	.word	0x00008d13
    9850:	00008d69 	.word	0x00008d69
    9854:	00008d31 	.word	0x00008d31
    9858:	20002418 	.word	0x20002418

0000985c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    985c:	b580      	push	{r7, lr}
    985e:	b082      	sub	sp, #8
    9860:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9862:	2301      	movs	r3, #1
    9864:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9866:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    986a:	4b22      	ldr	r3, [pc, #136]	; (98f4 <_usb_d_dev_handle_nep+0x98>)
    986c:	4798      	blx	r3
    986e:	4603      	mov	r3, r0
    9870:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9872:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9876:	4b20      	ldr	r3, [pc, #128]	; (98f8 <_usb_d_dev_handle_nep+0x9c>)
    9878:	4798      	blx	r3
    987a:	4603      	mov	r3, r0
    987c:	461a      	mov	r2, r3
    987e:	88bb      	ldrh	r3, [r7, #4]
    9880:	4013      	ands	r3, r2
    9882:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9884:	88bb      	ldrh	r3, [r7, #4]
    9886:	f003 0304 	and.w	r3, r3, #4
    988a:	2b00      	cmp	r3, #0
    988c:	d003      	beq.n	9896 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    988e:	4b1b      	ldr	r3, [pc, #108]	; (98fc <_usb_d_dev_handle_nep+0xa0>)
    9890:	4798      	blx	r3
		return true;
    9892:	2301      	movs	r3, #1
    9894:	e02a      	b.n	98ec <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9896:	88bb      	ldrh	r3, [r7, #4]
    9898:	f403 7300 	and.w	r3, r3, #512	; 0x200
    989c:	2b00      	cmp	r3, #0
    989e:	d002      	beq.n	98a6 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    98a0:	4b17      	ldr	r3, [pc, #92]	; (9900 <_usb_d_dev_handle_nep+0xa4>)
    98a2:	4798      	blx	r3
    98a4:	e021      	b.n	98ea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    98a6:	88bb      	ldrh	r3, [r7, #4]
    98a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    98ac:	2b00      	cmp	r3, #0
    98ae:	d002      	beq.n	98b6 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    98b0:	4b14      	ldr	r3, [pc, #80]	; (9904 <_usb_d_dev_handle_nep+0xa8>)
    98b2:	4798      	blx	r3
    98b4:	e019      	b.n	98ea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    98b6:	88bb      	ldrh	r3, [r7, #4]
    98b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    98bc:	2b00      	cmp	r3, #0
    98be:	d002      	beq.n	98c6 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    98c0:	4b11      	ldr	r3, [pc, #68]	; (9908 <_usb_d_dev_handle_nep+0xac>)
    98c2:	4798      	blx	r3
    98c4:	e011      	b.n	98ea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    98c6:	88bb      	ldrh	r3, [r7, #4]
    98c8:	f003 0308 	and.w	r3, r3, #8
    98cc:	2b00      	cmp	r3, #0
    98ce:	d002      	beq.n	98d6 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    98d0:	4b0e      	ldr	r3, [pc, #56]	; (990c <_usb_d_dev_handle_nep+0xb0>)
    98d2:	4798      	blx	r3
    98d4:	e009      	b.n	98ea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    98d6:	88bb      	ldrh	r3, [r7, #4]
    98d8:	f003 0301 	and.w	r3, r3, #1
    98dc:	2b00      	cmp	r3, #0
    98de:	d002      	beq.n	98e6 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    98e0:	4b0b      	ldr	r3, [pc, #44]	; (9910 <_usb_d_dev_handle_nep+0xb4>)
    98e2:	4798      	blx	r3
    98e4:	e001      	b.n	98ea <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    98e6:	2300      	movs	r3, #0
    98e8:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    98ea:	79fb      	ldrb	r3, [r7, #7]
}
    98ec:	4618      	mov	r0, r3
    98ee:	3708      	adds	r7, #8
    98f0:	46bd      	mov	sp, r7
    98f2:	bd80      	pop	{r7, pc}
    98f4:	00008cf9 	.word	0x00008cf9
    98f8:	00008d4f 	.word	0x00008d4f
    98fc:	0000969d 	.word	0x0000969d
    9900:	000096bd 	.word	0x000096bd
    9904:	0000974d 	.word	0x0000974d
    9908:	00009771 	.word	0x00009771
    990c:	000097bd 	.word	0x000097bd
    9910:	00009819 	.word	0x00009819

00009914 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9914:	b590      	push	{r4, r7, lr}
    9916:	b089      	sub	sp, #36	; 0x24
    9918:	af00      	add	r7, sp, #0
    991a:	6078      	str	r0, [r7, #4]
    991c:	460b      	mov	r3, r1
    991e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9920:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9924:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9926:	687b      	ldr	r3, [r7, #4]
    9928:	7c9b      	ldrb	r3, [r3, #18]
    992a:	f003 030f 	and.w	r3, r3, #15
    992e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9930:	7dfb      	ldrb	r3, [r7, #23]
    9932:	015b      	lsls	r3, r3, #5
    9934:	4a73      	ldr	r2, [pc, #460]	; (9b04 <_usb_d_dev_in_next+0x1f0>)
    9936:	4413      	add	r3, r2
    9938:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    993a:	78fb      	ldrb	r3, [r7, #3]
    993c:	2b00      	cmp	r3, #0
    993e:	d006      	beq.n	994e <_usb_d_dev_in_next+0x3a>
    9940:	693b      	ldr	r3, [r7, #16]
    9942:	3310      	adds	r3, #16
    9944:	685b      	ldr	r3, [r3, #4]
    9946:	f3c3 030d 	ubfx	r3, r3, #0, #14
    994a:	b29b      	uxth	r3, r3
    994c:	e000      	b.n	9950 <_usb_d_dev_in_next+0x3c>
    994e:	2300      	movs	r3, #0
    9950:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9952:	687b      	ldr	r3, [r7, #4]
    9954:	8a1b      	ldrh	r3, [r3, #16]
    9956:	f240 32ff 	movw	r2, #1023	; 0x3ff
    995a:	4293      	cmp	r3, r2
    995c:	d103      	bne.n	9966 <_usb_d_dev_in_next+0x52>
    995e:	687b      	ldr	r3, [r7, #4]
    9960:	8a1b      	ldrh	r3, [r3, #16]
    9962:	b21b      	sxth	r3, r3
    9964:	e004      	b.n	9970 <_usb_d_dev_in_next+0x5c>
    9966:	687b      	ldr	r3, [r7, #4]
    9968:	8a1b      	ldrh	r3, [r3, #16]
    996a:	3b01      	subs	r3, #1
    996c:	b29b      	uxth	r3, r3
    996e:	b21b      	sxth	r3, r3
    9970:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9974:	4013      	ands	r3, r2
    9976:	b21b      	sxth	r3, r3
    9978:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    997a:	2300      	movs	r3, #0
    997c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    997e:	687b      	ldr	r3, [r7, #4]
    9980:	7cdb      	ldrb	r3, [r3, #19]
    9982:	f003 0307 	and.w	r3, r3, #7
    9986:	b2db      	uxtb	r3, r3
    9988:	2b01      	cmp	r3, #1
    998a:	bf0c      	ite	eq
    998c:	2301      	moveq	r3, #1
    998e:	2300      	movne	r3, #0
    9990:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9992:	78fb      	ldrb	r3, [r7, #3]
    9994:	2b00      	cmp	r3, #0
    9996:	d004      	beq.n	99a2 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9998:	7dfb      	ldrb	r3, [r7, #23]
    999a:	2101      	movs	r1, #1
    999c:	4618      	mov	r0, r3
    999e:	4b5a      	ldr	r3, [pc, #360]	; (9b08 <_usb_d_dev_in_next+0x1f4>)
    99a0:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    99a2:	687b      	ldr	r3, [r7, #4]
    99a4:	689a      	ldr	r2, [r3, #8]
    99a6:	89fb      	ldrh	r3, [r7, #14]
    99a8:	441a      	add	r2, r3
    99aa:	687b      	ldr	r3, [r7, #4]
    99ac:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    99ae:	687b      	ldr	r3, [r7, #4]
    99b0:	689a      	ldr	r2, [r3, #8]
    99b2:	687b      	ldr	r3, [r7, #4]
    99b4:	685b      	ldr	r3, [r3, #4]
    99b6:	429a      	cmp	r2, r3
    99b8:	d243      	bcs.n	9a42 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    99ba:	687b      	ldr	r3, [r7, #4]
    99bc:	685b      	ldr	r3, [r3, #4]
    99be:	b29a      	uxth	r2, r3
    99c0:	687b      	ldr	r3, [r7, #4]
    99c2:	689b      	ldr	r3, [r3, #8]
    99c4:	b29b      	uxth	r3, r3
    99c6:	1ad3      	subs	r3, r2, r3
    99c8:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    99ca:	687b      	ldr	r3, [r7, #4]
    99cc:	7cdb      	ldrb	r3, [r3, #19]
    99ce:	f003 0320 	and.w	r3, r3, #32
    99d2:	b2db      	uxtb	r3, r3
    99d4:	2b00      	cmp	r3, #0
    99d6:	d01b      	beq.n	9a10 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    99d8:	687b      	ldr	r3, [r7, #4]
    99da:	8a1b      	ldrh	r3, [r3, #16]
    99dc:	8bfa      	ldrh	r2, [r7, #30]
    99de:	429a      	cmp	r2, r3
    99e0:	d902      	bls.n	99e8 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    99e2:	687b      	ldr	r3, [r7, #4]
    99e4:	8a1b      	ldrh	r3, [r3, #16]
    99e6:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    99e8:	687b      	ldr	r3, [r7, #4]
    99ea:	68d8      	ldr	r0, [r3, #12]
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	681a      	ldr	r2, [r3, #0]
    99f0:	687b      	ldr	r3, [r7, #4]
    99f2:	689b      	ldr	r3, [r3, #8]
    99f4:	4413      	add	r3, r2
    99f6:	8bfa      	ldrh	r2, [r7, #30]
    99f8:	4619      	mov	r1, r3
    99fa:	4b44      	ldr	r3, [pc, #272]	; (9b0c <_usb_d_dev_in_next+0x1f8>)
    99fc:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    99fe:	687b      	ldr	r3, [r7, #4]
    9a00:	68db      	ldr	r3, [r3, #12]
    9a02:	461a      	mov	r2, r3
    9a04:	7dfb      	ldrb	r3, [r7, #23]
    9a06:	2101      	movs	r1, #1
    9a08:	4618      	mov	r0, r3
    9a0a:	4b41      	ldr	r3, [pc, #260]	; (9b10 <_usb_d_dev_in_next+0x1fc>)
    9a0c:	4798      	blx	r3
    9a0e:	e011      	b.n	9a34 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9a10:	8bfb      	ldrh	r3, [r7, #30]
    9a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9a16:	d902      	bls.n	9a1e <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9a1c:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9a1e:	687b      	ldr	r3, [r7, #4]
    9a20:	681a      	ldr	r2, [r3, #0]
    9a22:	687b      	ldr	r3, [r7, #4]
    9a24:	689b      	ldr	r3, [r3, #8]
    9a26:	4413      	add	r3, r2
    9a28:	461a      	mov	r2, r3
    9a2a:	7dfb      	ldrb	r3, [r7, #23]
    9a2c:	2101      	movs	r1, #1
    9a2e:	4618      	mov	r0, r3
    9a30:	4b37      	ldr	r3, [pc, #220]	; (9b10 <_usb_d_dev_in_next+0x1fc>)
    9a32:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9a34:	8bfa      	ldrh	r2, [r7, #30]
    9a36:	7df8      	ldrb	r0, [r7, #23]
    9a38:	2300      	movs	r3, #0
    9a3a:	2101      	movs	r1, #1
    9a3c:	4c35      	ldr	r4, [pc, #212]	; (9b14 <_usb_d_dev_in_next+0x200>)
    9a3e:	47a0      	blx	r4
		goto _in_tx_exec;
    9a40:	e041      	b.n	9ac6 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9a42:	687b      	ldr	r3, [r7, #4]
    9a44:	7cdb      	ldrb	r3, [r3, #19]
    9a46:	f003 0310 	and.w	r3, r3, #16
    9a4a:	b2db      	uxtb	r3, r3
    9a4c:	2b00      	cmp	r3, #0
    9a4e:	d00b      	beq.n	9a68 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9a50:	687a      	ldr	r2, [r7, #4]
    9a52:	7cd3      	ldrb	r3, [r2, #19]
    9a54:	f36f 1304 	bfc	r3, #4, #1
    9a58:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9a5a:	7df8      	ldrb	r0, [r7, #23]
    9a5c:	2300      	movs	r3, #0
    9a5e:	2200      	movs	r2, #0
    9a60:	2101      	movs	r1, #1
    9a62:	4c2c      	ldr	r4, [pc, #176]	; (9b14 <_usb_d_dev_in_next+0x200>)
    9a64:	47a0      	blx	r4
		goto _in_tx_exec;
    9a66:	e02e      	b.n	9ac6 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9a68:	7afb      	ldrb	r3, [r7, #11]
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	d006      	beq.n	9a7c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9a6e:	7dfb      	ldrb	r3, [r7, #23]
    9a70:	224b      	movs	r2, #75	; 0x4b
    9a72:	4619      	mov	r1, r3
    9a74:	69b8      	ldr	r0, [r7, #24]
    9a76:	4b28      	ldr	r3, [pc, #160]	; (9b18 <_usb_d_dev_in_next+0x204>)
    9a78:	4798      	blx	r3
    9a7a:	e005      	b.n	9a88 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9a7c:	7dfb      	ldrb	r3, [r7, #23]
    9a7e:	224a      	movs	r2, #74	; 0x4a
    9a80:	4619      	mov	r1, r3
    9a82:	69b8      	ldr	r0, [r7, #24]
    9a84:	4b24      	ldr	r3, [pc, #144]	; (9b18 <_usb_d_dev_in_next+0x204>)
    9a86:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9a88:	687b      	ldr	r3, [r7, #4]
    9a8a:	8a1b      	ldrh	r3, [r3, #16]
    9a8c:	89ba      	ldrh	r2, [r7, #12]
    9a8e:	429a      	cmp	r2, r3
    9a90:	d114      	bne.n	9abc <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9a92:	687a      	ldr	r2, [r7, #4]
    9a94:	7cd3      	ldrb	r3, [r2, #19]
    9a96:	f36f 1386 	bfc	r3, #6, #1
    9a9a:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9a9c:	4b1f      	ldr	r3, [pc, #124]	; (9b1c <_usb_d_dev_in_next+0x208>)
    9a9e:	68db      	ldr	r3, [r3, #12]
    9aa0:	687a      	ldr	r2, [r7, #4]
    9aa2:	7c90      	ldrb	r0, [r2, #18]
    9aa4:	687a      	ldr	r2, [r7, #4]
    9aa6:	6892      	ldr	r2, [r2, #8]
    9aa8:	4611      	mov	r1, r2
    9aaa:	4798      	blx	r3
    9aac:	4603      	mov	r3, r0
    9aae:	2b00      	cmp	r3, #0
    9ab0:	d124      	bne.n	9afc <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9ab2:	687a      	ldr	r2, [r7, #4]
    9ab4:	7cd3      	ldrb	r3, [r2, #19]
    9ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9aba:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9abc:	2100      	movs	r1, #0
    9abe:	6878      	ldr	r0, [r7, #4]
    9ac0:	4b17      	ldr	r3, [pc, #92]	; (9b20 <_usb_d_dev_in_next+0x20c>)
    9ac2:	4798      	blx	r3
	return;
    9ac4:	e01b      	b.n	9afe <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9ac6:	78fb      	ldrb	r3, [r7, #3]
    9ac8:	f083 0301 	eor.w	r3, r3, #1
    9acc:	b2db      	uxtb	r3, r3
    9ace:	2b00      	cmp	r3, #0
    9ad0:	d00d      	beq.n	9aee <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9ad2:	7afb      	ldrb	r3, [r7, #11]
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	d002      	beq.n	9ade <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9ad8:	234e      	movs	r3, #78	; 0x4e
    9ada:	777b      	strb	r3, [r7, #29]
    9adc:	e001      	b.n	9ae2 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9ade:	234a      	movs	r3, #74	; 0x4a
    9ae0:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9ae2:	7f7a      	ldrb	r2, [r7, #29]
    9ae4:	7dfb      	ldrb	r3, [r7, #23]
    9ae6:	4619      	mov	r1, r3
    9ae8:	69b8      	ldr	r0, [r7, #24]
    9aea:	4b0e      	ldr	r3, [pc, #56]	; (9b24 <_usb_d_dev_in_next+0x210>)
    9aec:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9aee:	7dfb      	ldrb	r3, [r7, #23]
    9af0:	2201      	movs	r2, #1
    9af2:	2101      	movs	r1, #1
    9af4:	4618      	mov	r0, r3
    9af6:	4b0c      	ldr	r3, [pc, #48]	; (9b28 <_usb_d_dev_in_next+0x214>)
    9af8:	4798      	blx	r3
    9afa:	e000      	b.n	9afe <_usb_d_dev_in_next+0x1ea>
			return;
    9afc:	bf00      	nop
}
    9afe:	3724      	adds	r7, #36	; 0x24
    9b00:	46bd      	mov	sp, r7
    9b02:	bd90      	pop	{r4, r7, pc}
    9b04:	200024e0 	.word	0x200024e0
    9b08:	0000930d 	.word	0x0000930d
    9b0c:	0001030d 	.word	0x0001030d
    9b10:	00009339 	.word	0x00009339
    9b14:	00009481 	.word	0x00009481
    9b18:	00008c19 	.word	0x00008c19
    9b1c:	20002418 	.word	0x20002418
    9b20:	0000ac3d 	.word	0x0000ac3d
    9b24:	00008bed 	.word	0x00008bed
    9b28:	00009539 	.word	0x00009539

00009b2c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9b2c:	b590      	push	{r4, r7, lr}
    9b2e:	b08b      	sub	sp, #44	; 0x2c
    9b30:	af00      	add	r7, sp, #0
    9b32:	6078      	str	r0, [r7, #4]
    9b34:	460b      	mov	r3, r1
    9b36:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9b38:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9b3c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    9b3e:	687b      	ldr	r3, [r7, #4]
    9b40:	7c9b      	ldrb	r3, [r3, #18]
    9b42:	f003 030f 	and.w	r3, r3, #15
    9b46:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9b48:	7ffb      	ldrb	r3, [r7, #31]
    9b4a:	015b      	lsls	r3, r3, #5
    9b4c:	4a94      	ldr	r2, [pc, #592]	; (9da0 <_usb_d_dev_out_next+0x274>)
    9b4e:	4413      	add	r3, r2
    9b50:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9b52:	78fb      	ldrb	r3, [r7, #3]
    9b54:	2b00      	cmp	r3, #0
    9b56:	d005      	beq.n	9b64 <_usb_d_dev_out_next+0x38>
    9b58:	69bb      	ldr	r3, [r7, #24]
    9b5a:	685b      	ldr	r3, [r3, #4]
    9b5c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9b60:	b29b      	uxth	r3, r3
    9b62:	e000      	b.n	9b66 <_usb_d_dev_out_next+0x3a>
    9b64:	2300      	movs	r3, #0
    9b66:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9b68:	78fb      	ldrb	r3, [r7, #3]
    9b6a:	2b00      	cmp	r3, #0
    9b6c:	d005      	beq.n	9b7a <_usb_d_dev_out_next+0x4e>
    9b6e:	69bb      	ldr	r3, [r7, #24]
    9b70:	685b      	ldr	r3, [r3, #4]
    9b72:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9b76:	b29b      	uxth	r3, r3
    9b78:	e000      	b.n	9b7c <_usb_d_dev_out_next+0x50>
    9b7a:	2300      	movs	r3, #0
    9b7c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9b7e:	687b      	ldr	r3, [r7, #4]
    9b80:	8a1b      	ldrh	r3, [r3, #16]
    9b82:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9b86:	4293      	cmp	r3, r2
    9b88:	d004      	beq.n	9b94 <_usb_d_dev_out_next+0x68>
    9b8a:	687b      	ldr	r3, [r7, #4]
    9b8c:	8a1b      	ldrh	r3, [r3, #16]
    9b8e:	3b01      	subs	r3, #1
    9b90:	b29b      	uxth	r3, r3
    9b92:	e001      	b.n	9b98 <_usb_d_dev_out_next+0x6c>
    9b94:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9b98:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9b9a:	8aba      	ldrh	r2, [r7, #20]
    9b9c:	8a7b      	ldrh	r3, [r7, #18]
    9b9e:	4013      	ands	r3, r2
    9ba0:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9ba2:	687b      	ldr	r3, [r7, #4]
    9ba4:	7cdb      	ldrb	r3, [r3, #19]
    9ba6:	f003 0307 	and.w	r3, r3, #7
    9baa:	b2db      	uxtb	r3, r3
    9bac:	2b01      	cmp	r3, #1
    9bae:	bf0c      	ite	eq
    9bb0:	2301      	moveq	r3, #1
    9bb2:	2300      	movne	r3, #0
    9bb4:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9bb6:	78fb      	ldrb	r3, [r7, #3]
    9bb8:	2b00      	cmp	r3, #0
    9bba:	d004      	beq.n	9bc6 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9bbc:	7ffb      	ldrb	r3, [r7, #31]
    9bbe:	2100      	movs	r1, #0
    9bc0:	4618      	mov	r0, r3
    9bc2:	4b78      	ldr	r3, [pc, #480]	; (9da4 <_usb_d_dev_out_next+0x278>)
    9bc4:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9bc6:	687b      	ldr	r3, [r7, #4]
    9bc8:	7cdb      	ldrb	r3, [r3, #19]
    9bca:	f003 0320 	and.w	r3, r3, #32
    9bce:	b2db      	uxtb	r3, r3
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d01c      	beq.n	9c0e <_usb_d_dev_out_next+0xe2>
    9bd4:	687b      	ldr	r3, [r7, #4]
    9bd6:	685b      	ldr	r3, [r3, #4]
    9bd8:	2b00      	cmp	r3, #0
    9bda:	d018      	beq.n	9c0e <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9bdc:	687b      	ldr	r3, [r7, #4]
    9bde:	685b      	ldr	r3, [r3, #4]
    9be0:	b29a      	uxth	r2, r3
    9be2:	687b      	ldr	r3, [r7, #4]
    9be4:	689b      	ldr	r3, [r3, #8]
    9be6:	b29b      	uxth	r3, r3
    9be8:	1ad3      	subs	r3, r2, r3
    9bea:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9bec:	687b      	ldr	r3, [r7, #4]
    9bee:	681a      	ldr	r2, [r3, #0]
    9bf0:	687b      	ldr	r3, [r7, #4]
    9bf2:	689b      	ldr	r3, [r3, #8]
    9bf4:	18d0      	adds	r0, r2, r3
    9bf6:	687b      	ldr	r3, [r7, #4]
    9bf8:	68d9      	ldr	r1, [r3, #12]
    9bfa:	89ba      	ldrh	r2, [r7, #12]
    9bfc:	8a3b      	ldrh	r3, [r7, #16]
    9bfe:	429a      	cmp	r2, r3
    9c00:	d901      	bls.n	9c06 <_usb_d_dev_out_next+0xda>
    9c02:	8a3b      	ldrh	r3, [r7, #16]
    9c04:	e000      	b.n	9c08 <_usb_d_dev_out_next+0xdc>
    9c06:	89bb      	ldrh	r3, [r7, #12]
    9c08:	461a      	mov	r2, r3
    9c0a:	4b67      	ldr	r3, [pc, #412]	; (9da8 <_usb_d_dev_out_next+0x27c>)
    9c0c:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9c0e:	687b      	ldr	r3, [r7, #4]
    9c10:	685b      	ldr	r3, [r3, #4]
    9c12:	2b00      	cmp	r3, #0
    9c14:	d121      	bne.n	9c5a <_usb_d_dev_out_next+0x12e>
    9c16:	687b      	ldr	r3, [r7, #4]
    9c18:	7cdb      	ldrb	r3, [r3, #19]
    9c1a:	f003 0310 	and.w	r3, r3, #16
    9c1e:	b2db      	uxtb	r3, r3
    9c20:	2b00      	cmp	r3, #0
    9c22:	d01a      	beq.n	9c5a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9c24:	687a      	ldr	r2, [r7, #4]
    9c26:	7cd3      	ldrb	r3, [r2, #19]
    9c28:	f36f 1304 	bfc	r3, #4, #1
    9c2c:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    9c2e:	687a      	ldr	r2, [r7, #4]
    9c30:	7cd3      	ldrb	r3, [r2, #19]
    9c32:	f043 0320 	orr.w	r3, r3, #32
    9c36:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9c38:	687b      	ldr	r3, [r7, #4]
    9c3a:	68db      	ldr	r3, [r3, #12]
    9c3c:	461a      	mov	r2, r3
    9c3e:	7ffb      	ldrb	r3, [r7, #31]
    9c40:	2100      	movs	r1, #0
    9c42:	4618      	mov	r0, r3
    9c44:	4b59      	ldr	r3, [pc, #356]	; (9dac <_usb_d_dev_out_next+0x280>)
    9c46:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9c48:	687b      	ldr	r3, [r7, #4]
    9c4a:	8a1b      	ldrh	r3, [r3, #16]
    9c4c:	461a      	mov	r2, r3
    9c4e:	7ff8      	ldrb	r0, [r7, #31]
    9c50:	2300      	movs	r3, #0
    9c52:	2100      	movs	r1, #0
    9c54:	4c56      	ldr	r4, [pc, #344]	; (9db0 <_usb_d_dev_out_next+0x284>)
    9c56:	47a0      	blx	r4
		goto _out_rx_exec;
    9c58:	e090      	b.n	9d7c <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9c5a:	78fb      	ldrb	r3, [r7, #3]
    9c5c:	2b00      	cmp	r3, #0
    9c5e:	d010      	beq.n	9c82 <_usb_d_dev_out_next+0x156>
    9c60:	687b      	ldr	r3, [r7, #4]
    9c62:	8a1b      	ldrh	r3, [r3, #16]
    9c64:	8a3a      	ldrh	r2, [r7, #16]
    9c66:	429a      	cmp	r2, r3
    9c68:	d20b      	bcs.n	9c82 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9c6a:	687a      	ldr	r2, [r7, #4]
    9c6c:	7cd3      	ldrb	r3, [r2, #19]
    9c6e:	f36f 1304 	bfc	r3, #4, #1
    9c72:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9c74:	687b      	ldr	r3, [r7, #4]
    9c76:	689a      	ldr	r2, [r3, #8]
    9c78:	8abb      	ldrh	r3, [r7, #20]
    9c7a:	441a      	add	r2, r3
    9c7c:	687b      	ldr	r3, [r7, #4]
    9c7e:	609a      	str	r2, [r3, #8]
    9c80:	e05c      	b.n	9d3c <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9c82:	687b      	ldr	r3, [r7, #4]
    9c84:	689a      	ldr	r2, [r3, #8]
    9c86:	8afb      	ldrh	r3, [r7, #22]
    9c88:	441a      	add	r2, r3
    9c8a:	687b      	ldr	r3, [r7, #4]
    9c8c:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    9c8e:	687b      	ldr	r3, [r7, #4]
    9c90:	689a      	ldr	r2, [r3, #8]
    9c92:	687b      	ldr	r3, [r7, #4]
    9c94:	685b      	ldr	r3, [r3, #4]
    9c96:	429a      	cmp	r2, r3
    9c98:	d250      	bcs.n	9d3c <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9c9a:	687b      	ldr	r3, [r7, #4]
    9c9c:	685b      	ldr	r3, [r3, #4]
    9c9e:	b29a      	uxth	r2, r3
    9ca0:	687b      	ldr	r3, [r7, #4]
    9ca2:	689b      	ldr	r3, [r3, #8]
    9ca4:	b29b      	uxth	r3, r3
    9ca6:	1ad3      	subs	r3, r2, r3
    9ca8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9caa:	687b      	ldr	r3, [r7, #4]
    9cac:	7cdb      	ldrb	r3, [r3, #19]
    9cae:	f003 0320 	and.w	r3, r3, #32
    9cb2:	b2db      	uxtb	r3, r3
    9cb4:	2b00      	cmp	r3, #0
    9cb6:	d010      	beq.n	9cda <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9cb8:	687b      	ldr	r3, [r7, #4]
    9cba:	8a1b      	ldrh	r3, [r3, #16]
    9cbc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9cbe:	429a      	cmp	r2, r3
    9cc0:	d902      	bls.n	9cc8 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9cc2:	687b      	ldr	r3, [r7, #4]
    9cc4:	8a1b      	ldrh	r3, [r3, #16]
    9cc6:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9cc8:	687b      	ldr	r3, [r7, #4]
    9cca:	68db      	ldr	r3, [r3, #12]
    9ccc:	461a      	mov	r2, r3
    9cce:	7ffb      	ldrb	r3, [r7, #31]
    9cd0:	2100      	movs	r1, #0
    9cd2:	4618      	mov	r0, r3
    9cd4:	4b35      	ldr	r3, [pc, #212]	; (9dac <_usb_d_dev_out_next+0x280>)
    9cd6:	4798      	blx	r3
    9cd8:	e029      	b.n	9d2e <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9cda:	687b      	ldr	r3, [r7, #4]
    9cdc:	8a1b      	ldrh	r3, [r3, #16]
    9cde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9ce0:	429a      	cmp	r2, r3
    9ce2:	d90f      	bls.n	9d04 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9ce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9cea:	d903      	bls.n	9cf4 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9cf0:	84fb      	strh	r3, [r7, #38]	; 0x26
    9cf2:	e011      	b.n	9d18 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9cf4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9cf6:	8a7b      	ldrh	r3, [r7, #18]
    9cf8:	4013      	ands	r3, r2
    9cfa:	b29b      	uxth	r3, r3
    9cfc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9cfe:	1ad3      	subs	r3, r2, r3
    9d00:	84fb      	strh	r3, [r7, #38]	; 0x26
    9d02:	e009      	b.n	9d18 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9d04:	687b      	ldr	r3, [r7, #4]
    9d06:	8a1b      	ldrh	r3, [r3, #16]
    9d08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9d0a:	429a      	cmp	r2, r3
    9d0c:	d204      	bcs.n	9d18 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9d0e:	687a      	ldr	r2, [r7, #4]
    9d10:	7cd3      	ldrb	r3, [r2, #19]
    9d12:	f043 0320 	orr.w	r3, r3, #32
    9d16:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9d18:	687b      	ldr	r3, [r7, #4]
    9d1a:	681a      	ldr	r2, [r3, #0]
    9d1c:	687b      	ldr	r3, [r7, #4]
    9d1e:	689b      	ldr	r3, [r3, #8]
    9d20:	4413      	add	r3, r2
    9d22:	461a      	mov	r2, r3
    9d24:	7ffb      	ldrb	r3, [r7, #31]
    9d26:	2100      	movs	r1, #0
    9d28:	4618      	mov	r0, r3
    9d2a:	4b20      	ldr	r3, [pc, #128]	; (9dac <_usb_d_dev_out_next+0x280>)
    9d2c:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9d2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9d30:	7ff8      	ldrb	r0, [r7, #31]
    9d32:	2300      	movs	r3, #0
    9d34:	2100      	movs	r1, #0
    9d36:	4c1e      	ldr	r4, [pc, #120]	; (9db0 <_usb_d_dev_out_next+0x284>)
    9d38:	47a0      	blx	r4
			goto _out_rx_exec;
    9d3a:	e01f      	b.n	9d7c <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9d3c:	7bfb      	ldrb	r3, [r7, #15]
    9d3e:	2b00      	cmp	r3, #0
    9d40:	d006      	beq.n	9d50 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9d42:	7ffb      	ldrb	r3, [r7, #31]
    9d44:	222d      	movs	r2, #45	; 0x2d
    9d46:	4619      	mov	r1, r3
    9d48:	6a38      	ldr	r0, [r7, #32]
    9d4a:	4b1a      	ldr	r3, [pc, #104]	; (9db4 <_usb_d_dev_out_next+0x288>)
    9d4c:	4798      	blx	r3
    9d4e:	e005      	b.n	9d5c <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9d50:	7ffb      	ldrb	r3, [r7, #31]
    9d52:	2225      	movs	r2, #37	; 0x25
    9d54:	4619      	mov	r1, r3
    9d56:	6a38      	ldr	r0, [r7, #32]
    9d58:	4b16      	ldr	r3, [pc, #88]	; (9db4 <_usb_d_dev_out_next+0x288>)
    9d5a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9d5c:	7ffb      	ldrb	r3, [r7, #31]
    9d5e:	2b00      	cmp	r3, #0
    9d60:	d107      	bne.n	9d72 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9d62:	687b      	ldr	r3, [r7, #4]
    9d64:	68db      	ldr	r3, [r3, #12]
    9d66:	461a      	mov	r2, r3
    9d68:	7ffb      	ldrb	r3, [r7, #31]
    9d6a:	2100      	movs	r1, #0
    9d6c:	4618      	mov	r0, r3
    9d6e:	4b0f      	ldr	r3, [pc, #60]	; (9dac <_usb_d_dev_out_next+0x280>)
    9d70:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9d72:	2100      	movs	r1, #0
    9d74:	6878      	ldr	r0, [r7, #4]
    9d76:	4b10      	ldr	r3, [pc, #64]	; (9db8 <_usb_d_dev_out_next+0x28c>)
    9d78:	4798      	blx	r3
	return;
    9d7a:	e031      	b.n	9de0 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9d7c:	78fb      	ldrb	r3, [r7, #3]
    9d7e:	f083 0301 	eor.w	r3, r3, #1
    9d82:	b2db      	uxtb	r3, r3
    9d84:	2b00      	cmp	r3, #0
    9d86:	d025      	beq.n	9dd4 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9d88:	7bfb      	ldrb	r3, [r7, #15]
    9d8a:	2b00      	cmp	r3, #0
    9d8c:	d018      	beq.n	9dc0 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9d8e:	7ffb      	ldrb	r3, [r7, #31]
    9d90:	2101      	movs	r1, #1
    9d92:	4618      	mov	r0, r3
    9d94:	4b09      	ldr	r3, [pc, #36]	; (9dbc <_usb_d_dev_out_next+0x290>)
    9d96:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9d98:	232d      	movs	r3, #45	; 0x2d
    9d9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9d9e:	e012      	b.n	9dc6 <_usb_d_dev_out_next+0x29a>
    9da0:	200024e0 	.word	0x200024e0
    9da4:	0000930d 	.word	0x0000930d
    9da8:	0001030d 	.word	0x0001030d
    9dac:	00009339 	.word	0x00009339
    9db0:	000094c1 	.word	0x000094c1
    9db4:	00008c19 	.word	0x00008c19
    9db8:	0000ac3d 	.word	0x0000ac3d
    9dbc:	00009501 	.word	0x00009501
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9dc0:	2325      	movs	r3, #37	; 0x25
    9dc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9dc6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9dca:	7ffb      	ldrb	r3, [r7, #31]
    9dcc:	4619      	mov	r1, r3
    9dce:	6a38      	ldr	r0, [r7, #32]
    9dd0:	4b05      	ldr	r3, [pc, #20]	; (9de8 <_usb_d_dev_out_next+0x2bc>)
    9dd2:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9dd4:	7ffb      	ldrb	r3, [r7, #31]
    9dd6:	2201      	movs	r2, #1
    9dd8:	2100      	movs	r1, #0
    9dda:	4618      	mov	r0, r3
    9ddc:	4b03      	ldr	r3, [pc, #12]	; (9dec <_usb_d_dev_out_next+0x2c0>)
    9dde:	4798      	blx	r3
}
    9de0:	372c      	adds	r7, #44	; 0x2c
    9de2:	46bd      	mov	sp, r7
    9de4:	bd90      	pop	{r4, r7, pc}
    9de6:	bf00      	nop
    9de8:	00008bed 	.word	0x00008bed
    9dec:	00009591 	.word	0x00009591

00009df0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9df0:	b580      	push	{r7, lr}
    9df2:	b084      	sub	sp, #16
    9df4:	af00      	add	r7, sp, #0
    9df6:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9df8:	687b      	ldr	r3, [r7, #4]
    9dfa:	7c9b      	ldrb	r3, [r3, #18]
    9dfc:	f003 030f 	and.w	r3, r3, #15
    9e00:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9e02:	687b      	ldr	r3, [r7, #4]
    9e04:	7cdb      	ldrb	r3, [r3, #19]
    9e06:	f003 0307 	and.w	r3, r3, #7
    9e0a:	b2db      	uxtb	r3, r3
    9e0c:	2b01      	cmp	r3, #1
    9e0e:	bf0c      	ite	eq
    9e10:	2301      	moveq	r3, #1
    9e12:	2300      	movne	r3, #0
    9e14:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9e16:	7bbb      	ldrb	r3, [r7, #14]
    9e18:	f083 0301 	eor.w	r3, r3, #1
    9e1c:	b2db      	uxtb	r3, r3
    9e1e:	2b00      	cmp	r3, #0
    9e20:	d008      	beq.n	9e34 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9e22:	7bfb      	ldrb	r3, [r7, #15]
    9e24:	4618      	mov	r0, r3
    9e26:	4b20      	ldr	r3, [pc, #128]	; (9ea8 <_usb_d_dev_handle_setup+0xb8>)
    9e28:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9e2a:	7bfb      	ldrb	r3, [r7, #15]
    9e2c:	4618      	mov	r0, r3
    9e2e:	4b1f      	ldr	r3, [pc, #124]	; (9eac <_usb_d_dev_handle_setup+0xbc>)
    9e30:	4798      	blx	r3
		return;
    9e32:	e036      	b.n	9ea2 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9e34:	687b      	ldr	r3, [r7, #4]
    9e36:	7cdb      	ldrb	r3, [r3, #19]
    9e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e3c:	b2db      	uxtb	r3, r3
    9e3e:	2b00      	cmp	r3, #0
    9e40:	d010      	beq.n	9e64 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9e42:	687a      	ldr	r2, [r7, #4]
    9e44:	7cd3      	ldrb	r3, [r2, #19]
    9e46:	f36f 1386 	bfc	r3, #6, #1
    9e4a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9e4c:	7bfb      	ldrb	r3, [r7, #15]
    9e4e:	2200      	movs	r2, #0
    9e50:	2101      	movs	r1, #1
    9e52:	4618      	mov	r0, r3
    9e54:	4b16      	ldr	r3, [pc, #88]	; (9eb0 <_usb_d_dev_handle_setup+0xc0>)
    9e56:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9e58:	7bfb      	ldrb	r3, [r7, #15]
    9e5a:	2200      	movs	r2, #0
    9e5c:	2100      	movs	r1, #0
    9e5e:	4618      	mov	r0, r3
    9e60:	4b14      	ldr	r3, [pc, #80]	; (9eb4 <_usb_d_dev_handle_setup+0xc4>)
    9e62:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9e64:	687a      	ldr	r2, [r7, #4]
    9e66:	7cd3      	ldrb	r3, [r2, #19]
    9e68:	f36f 03c3 	bfc	r3, #3, #1
    9e6c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9e6e:	7bfb      	ldrb	r3, [r7, #15]
    9e70:	2100      	movs	r1, #0
    9e72:	4618      	mov	r0, r3
    9e74:	4b10      	ldr	r3, [pc, #64]	; (9eb8 <_usb_d_dev_handle_setup+0xc8>)
    9e76:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9e78:	7bfb      	ldrb	r3, [r7, #15]
    9e7a:	2101      	movs	r1, #1
    9e7c:	4618      	mov	r0, r3
    9e7e:	4b0e      	ldr	r3, [pc, #56]	; (9eb8 <_usb_d_dev_handle_setup+0xc8>)
    9e80:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9e82:	7bfb      	ldrb	r3, [r7, #15]
    9e84:	216f      	movs	r1, #111	; 0x6f
    9e86:	4618      	mov	r0, r3
    9e88:	4b0c      	ldr	r3, [pc, #48]	; (9ebc <_usb_d_dev_handle_setup+0xcc>)
    9e8a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9e8c:	7bfb      	ldrb	r3, [r7, #15]
    9e8e:	216f      	movs	r1, #111	; 0x6f
    9e90:	4618      	mov	r0, r3
    9e92:	4b0b      	ldr	r3, [pc, #44]	; (9ec0 <_usb_d_dev_handle_setup+0xd0>)
    9e94:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9e96:	4b0b      	ldr	r3, [pc, #44]	; (9ec4 <_usb_d_dev_handle_setup+0xd4>)
    9e98:	689b      	ldr	r3, [r3, #8]
    9e9a:	687a      	ldr	r2, [r7, #4]
    9e9c:	7c92      	ldrb	r2, [r2, #18]
    9e9e:	4610      	mov	r0, r2
    9ea0:	4798      	blx	r3
}
    9ea2:	3710      	adds	r7, #16
    9ea4:	46bd      	mov	sp, r7
    9ea6:	bd80      	pop	{r7, pc}
    9ea8:	00009295 	.word	0x00009295
    9eac:	00009241 	.word	0x00009241
    9eb0:	00009539 	.word	0x00009539
    9eb4:	00009591 	.word	0x00009591
    9eb8:	00009501 	.word	0x00009501
    9ebc:	00009041 	.word	0x00009041
    9ec0:	00009091 	.word	0x00009091
    9ec4:	20002418 	.word	0x20002418

00009ec8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9ec8:	b580      	push	{r7, lr}
    9eca:	b084      	sub	sp, #16
    9ecc:	af00      	add	r7, sp, #0
    9ece:	6078      	str	r0, [r7, #4]
    9ed0:	460b      	mov	r3, r1
    9ed2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ed4:	687b      	ldr	r3, [r7, #4]
    9ed6:	7c9b      	ldrb	r3, [r3, #18]
    9ed8:	f003 030f 	and.w	r3, r3, #15
    9edc:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9ede:	78f9      	ldrb	r1, [r7, #3]
    9ee0:	7bfb      	ldrb	r3, [r7, #15]
    9ee2:	2200      	movs	r2, #0
    9ee4:	4618      	mov	r0, r3
    9ee6:	4b07      	ldr	r3, [pc, #28]	; (9f04 <_usb_d_dev_handle_stall+0x3c>)
    9ee8:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9eea:	4b07      	ldr	r3, [pc, #28]	; (9f08 <_usb_d_dev_handle_stall+0x40>)
    9eec:	691b      	ldr	r3, [r3, #16]
    9eee:	687a      	ldr	r2, [r7, #4]
    9ef0:	7c90      	ldrb	r0, [r2, #18]
    9ef2:	687a      	ldr	r2, [r7, #4]
    9ef4:	6892      	ldr	r2, [r2, #8]
    9ef6:	2101      	movs	r1, #1
    9ef8:	4798      	blx	r3
}
    9efa:	bf00      	nop
    9efc:	3710      	adds	r7, #16
    9efe:	46bd      	mov	sp, r7
    9f00:	bd80      	pop	{r7, pc}
    9f02:	bf00      	nop
    9f04:	000091f5 	.word	0x000091f5
    9f08:	20002418 	.word	0x20002418

00009f0c <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9f0c:	b580      	push	{r7, lr}
    9f0e:	b088      	sub	sp, #32
    9f10:	af00      	add	r7, sp, #0
    9f12:	6078      	str	r0, [r7, #4]
    9f14:	460b      	mov	r3, r1
    9f16:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9f18:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f1c:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9f1e:	687b      	ldr	r3, [r7, #4]
    9f20:	7c9b      	ldrb	r3, [r3, #18]
    9f22:	f003 030f 	and.w	r3, r3, #15
    9f26:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9f28:	4b61      	ldr	r3, [pc, #388]	; (a0b0 <_usb_d_dev_handle_trfail+0x1a4>)
    9f2a:	881b      	ldrh	r3, [r3, #0]
    9f2c:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9f2e:	7efb      	ldrb	r3, [r7, #27]
    9f30:	015b      	lsls	r3, r3, #5
    9f32:	4a60      	ldr	r2, [pc, #384]	; (a0b4 <_usb_d_dev_handle_trfail+0x1a8>)
    9f34:	4413      	add	r3, r2
    9f36:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9f38:	78fb      	ldrb	r3, [r7, #3]
    9f3a:	2b00      	cmp	r3, #0
    9f3c:	d006      	beq.n	9f4c <_usb_d_dev_handle_trfail+0x40>
    9f3e:	7efb      	ldrb	r3, [r7, #27]
    9f40:	4619      	mov	r1, r3
    9f42:	69f8      	ldr	r0, [r7, #28]
    9f44:	4b5c      	ldr	r3, [pc, #368]	; (a0b8 <_usb_d_dev_handle_trfail+0x1ac>)
    9f46:	4798      	blx	r3
    9f48:	4603      	mov	r3, r0
    9f4a:	e005      	b.n	9f58 <_usb_d_dev_handle_trfail+0x4c>
    9f4c:	7efb      	ldrb	r3, [r7, #27]
    9f4e:	4619      	mov	r1, r3
    9f50:	69f8      	ldr	r0, [r7, #28]
    9f52:	4b5a      	ldr	r3, [pc, #360]	; (a0bc <_usb_d_dev_handle_trfail+0x1b0>)
    9f54:	4798      	blx	r3
    9f56:	4603      	mov	r3, r0
    9f58:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9f5a:	687b      	ldr	r3, [r7, #4]
    9f5c:	7cdb      	ldrb	r3, [r3, #19]
    9f5e:	f003 0307 	and.w	r3, r3, #7
    9f62:	b2db      	uxtb	r3, r3
    9f64:	2b01      	cmp	r3, #1
    9f66:	bf0c      	ite	eq
    9f68:	2301      	moveq	r3, #1
    9f6a:	2300      	movne	r3, #0
    9f6c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9f6e:	78fb      	ldrb	r3, [r7, #3]
    9f70:	011b      	lsls	r3, r3, #4
    9f72:	697a      	ldr	r2, [r7, #20]
    9f74:	4413      	add	r3, r2
    9f76:	7a9b      	ldrb	r3, [r3, #10]
    9f78:	b2db      	uxtb	r3, r3
    9f7a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9f7c:	7cfb      	ldrb	r3, [r7, #19]
    9f7e:	2b02      	cmp	r3, #2
    9f80:	d12f      	bne.n	9fe2 <_usb_d_dev_handle_trfail+0xd6>
    9f82:	7b3b      	ldrb	r3, [r7, #12]
    9f84:	f003 0301 	and.w	r3, r3, #1
    9f88:	b2db      	uxtb	r3, r3
    9f8a:	2b00      	cmp	r3, #0
    9f8c:	d029      	beq.n	9fe2 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9f8e:	78fb      	ldrb	r3, [r7, #3]
    9f90:	011b      	lsls	r3, r3, #4
    9f92:	697a      	ldr	r2, [r7, #20]
    9f94:	441a      	add	r2, r3
    9f96:	7a93      	ldrb	r3, [r2, #10]
    9f98:	f36f 0300 	bfc	r3, #0, #1
    9f9c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9f9e:	78fb      	ldrb	r3, [r7, #3]
    9fa0:	f107 0220 	add.w	r2, r7, #32
    9fa4:	4413      	add	r3, r2
    9fa6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9faa:	7efb      	ldrb	r3, [r7, #27]
    9fac:	4619      	mov	r1, r3
    9fae:	69f8      	ldr	r0, [r7, #28]
    9fb0:	4b43      	ldr	r3, [pc, #268]	; (a0c0 <_usb_d_dev_handle_trfail+0x1b4>)
    9fb2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9fb4:	78fb      	ldrb	r3, [r7, #3]
    9fb6:	f107 0220 	add.w	r2, r7, #32
    9fba:	4413      	add	r3, r2
    9fbc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9fc0:	7efb      	ldrb	r3, [r7, #27]
    9fc2:	4619      	mov	r1, r3
    9fc4:	69f8      	ldr	r0, [r7, #28]
    9fc6:	4b3f      	ldr	r3, [pc, #252]	; (a0c4 <_usb_d_dev_handle_trfail+0x1b8>)
    9fc8:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9fca:	78fb      	ldrb	r3, [r7, #3]
    9fcc:	2b00      	cmp	r3, #0
    9fce:	bf14      	ite	ne
    9fd0:	2301      	movne	r3, #1
    9fd2:	2300      	moveq	r3, #0
    9fd4:	b2db      	uxtb	r3, r3
    9fd6:	2204      	movs	r2, #4
    9fd8:	4619      	mov	r1, r3
    9fda:	6878      	ldr	r0, [r7, #4]
    9fdc:	4b3a      	ldr	r3, [pc, #232]	; (a0c8 <_usb_d_dev_handle_trfail+0x1bc>)
    9fde:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9fe0:	e062      	b.n	a0a8 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9fe2:	7b3b      	ldrb	r3, [r7, #12]
    9fe4:	f003 0302 	and.w	r3, r3, #2
    9fe8:	b2db      	uxtb	r3, r3
    9fea:	2b00      	cmp	r3, #0
    9fec:	d040      	beq.n	a070 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9fee:	78fb      	ldrb	r3, [r7, #3]
    9ff0:	011b      	lsls	r3, r3, #4
    9ff2:	697a      	ldr	r2, [r7, #20]
    9ff4:	441a      	add	r2, r3
    9ff6:	7a93      	ldrb	r3, [r2, #10]
    9ff8:	f36f 0341 	bfc	r3, #1, #1
    9ffc:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9ffe:	78fb      	ldrb	r3, [r7, #3]
    a000:	f107 0220 	add.w	r2, r7, #32
    a004:	4413      	add	r3, r2
    a006:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a00a:	7efb      	ldrb	r3, [r7, #27]
    a00c:	4619      	mov	r1, r3
    a00e:	69f8      	ldr	r0, [r7, #28]
    a010:	4b2b      	ldr	r3, [pc, #172]	; (a0c0 <_usb_d_dev_handle_trfail+0x1b4>)
    a012:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a014:	78fb      	ldrb	r3, [r7, #3]
    a016:	f107 0220 	add.w	r2, r7, #32
    a01a:	4413      	add	r3, r2
    a01c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a020:	7efb      	ldrb	r3, [r7, #27]
    a022:	4619      	mov	r1, r3
    a024:	69f8      	ldr	r0, [r7, #28]
    a026:	4b27      	ldr	r3, [pc, #156]	; (a0c4 <_usb_d_dev_handle_trfail+0x1b8>)
    a028:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a02a:	7cbb      	ldrb	r3, [r7, #18]
    a02c:	2b00      	cmp	r3, #0
    a02e:	d03b      	beq.n	a0a8 <_usb_d_dev_handle_trfail+0x19c>
    a030:	687b      	ldr	r3, [r7, #4]
    a032:	7cdb      	ldrb	r3, [r3, #19]
    a034:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a038:	b2db      	uxtb	r3, r3
    a03a:	2b00      	cmp	r3, #0
    a03c:	d034      	beq.n	a0a8 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a03e:	687b      	ldr	r3, [r7, #4]
    a040:	7cdb      	ldrb	r3, [r3, #19]
    a042:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a046:	b2db      	uxtb	r3, r3
    a048:	461a      	mov	r2, r3
    a04a:	78fb      	ldrb	r3, [r7, #3]
    a04c:	4293      	cmp	r3, r2
    a04e:	d02b      	beq.n	a0a8 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a050:	687b      	ldr	r3, [r7, #4]
    a052:	7cdb      	ldrb	r3, [r3, #19]
    a054:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a058:	b2db      	uxtb	r3, r3
    a05a:	2b00      	cmp	r3, #0
    a05c:	bf14      	ite	ne
    a05e:	2301      	movne	r3, #1
    a060:	2300      	moveq	r3, #0
    a062:	b2db      	uxtb	r3, r3
    a064:	2200      	movs	r2, #0
    a066:	4619      	mov	r1, r3
    a068:	6878      	ldr	r0, [r7, #4]
    a06a:	4b17      	ldr	r3, [pc, #92]	; (a0c8 <_usb_d_dev_handle_trfail+0x1bc>)
    a06c:	4798      	blx	r3
}
    a06e:	e01b      	b.n	a0a8 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a070:	78fa      	ldrb	r2, [r7, #3]
    a072:	7efb      	ldrb	r3, [r7, #27]
    a074:	4611      	mov	r1, r2
    a076:	4618      	mov	r0, r3
    a078:	4b14      	ldr	r3, [pc, #80]	; (a0cc <_usb_d_dev_handle_trfail+0x1c0>)
    a07a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a07c:	78fb      	ldrb	r3, [r7, #3]
    a07e:	f107 0220 	add.w	r2, r7, #32
    a082:	4413      	add	r3, r2
    a084:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a088:	7efb      	ldrb	r3, [r7, #27]
    a08a:	4619      	mov	r1, r3
    a08c:	69f8      	ldr	r0, [r7, #28]
    a08e:	4b0c      	ldr	r3, [pc, #48]	; (a0c0 <_usb_d_dev_handle_trfail+0x1b4>)
    a090:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a092:	78fb      	ldrb	r3, [r7, #3]
    a094:	f107 0220 	add.w	r2, r7, #32
    a098:	4413      	add	r3, r2
    a09a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a09e:	7efb      	ldrb	r3, [r7, #27]
    a0a0:	4619      	mov	r1, r3
    a0a2:	69f8      	ldr	r0, [r7, #28]
    a0a4:	4b07      	ldr	r3, [pc, #28]	; (a0c4 <_usb_d_dev_handle_trfail+0x1b8>)
    a0a6:	4798      	blx	r3
}
    a0a8:	bf00      	nop
    a0aa:	3720      	adds	r7, #32
    a0ac:	46bd      	mov	sp, r7
    a0ae:	bd80      	pop	{r7, pc}
    a0b0:	00010ad0 	.word	0x00010ad0
    a0b4:	200024e0 	.word	0x200024e0
    a0b8:	00008c75 	.word	0x00008c75
    a0bc:	00008c45 	.word	0x00008c45
    a0c0:	00008b19 	.word	0x00008b19
    a0c4:	00008c19 	.word	0x00008c19
    a0c8:	0000ac85 	.word	0x0000ac85
    a0cc:	00009501 	.word	0x00009501

0000a0d0 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a0d0:	b580      	push	{r7, lr}
    a0d2:	b082      	sub	sp, #8
    a0d4:	af00      	add	r7, sp, #0
    a0d6:	6078      	str	r0, [r7, #4]
    a0d8:	460b      	mov	r3, r1
    a0da:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a0dc:	78fb      	ldrb	r3, [r7, #3]
    a0de:	f003 0310 	and.w	r3, r3, #16
    a0e2:	2b00      	cmp	r3, #0
    a0e4:	d003      	beq.n	a0ee <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a0e6:	6878      	ldr	r0, [r7, #4]
    a0e8:	4b0c      	ldr	r3, [pc, #48]	; (a11c <_usb_d_dev_trans_setup_isr+0x4c>)
    a0ea:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a0ec:	e012      	b.n	a114 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a0ee:	78fb      	ldrb	r3, [r7, #3]
    a0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a0f4:	2b00      	cmp	r3, #0
    a0f6:	d004      	beq.n	a102 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a0f8:	2101      	movs	r1, #1
    a0fa:	6878      	ldr	r0, [r7, #4]
    a0fc:	4b08      	ldr	r3, [pc, #32]	; (a120 <_usb_d_dev_trans_setup_isr+0x50>)
    a0fe:	4798      	blx	r3
}
    a100:	e008      	b.n	a114 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a102:	78fb      	ldrb	r3, [r7, #3]
    a104:	f003 0320 	and.w	r3, r3, #32
    a108:	2b00      	cmp	r3, #0
    a10a:	d003      	beq.n	a114 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a10c:	2100      	movs	r1, #0
    a10e:	6878      	ldr	r0, [r7, #4]
    a110:	4b03      	ldr	r3, [pc, #12]	; (a120 <_usb_d_dev_trans_setup_isr+0x50>)
    a112:	4798      	blx	r3
}
    a114:	bf00      	nop
    a116:	3708      	adds	r7, #8
    a118:	46bd      	mov	sp, r7
    a11a:	bd80      	pop	{r7, pc}
    a11c:	00009df1 	.word	0x00009df1
    a120:	00009ec9 	.word	0x00009ec9

0000a124 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a124:	b580      	push	{r7, lr}
    a126:	b082      	sub	sp, #8
    a128:	af00      	add	r7, sp, #0
    a12a:	6078      	str	r0, [r7, #4]
    a12c:	460b      	mov	r3, r1
    a12e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a130:	78fb      	ldrb	r3, [r7, #3]
    a132:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a136:	2b00      	cmp	r3, #0
    a138:	d004      	beq.n	a144 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a13a:	2101      	movs	r1, #1
    a13c:	6878      	ldr	r0, [r7, #4]
    a13e:	4b1a      	ldr	r3, [pc, #104]	; (a1a8 <_usb_d_dev_trans_in_isr+0x84>)
    a140:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a142:	e02c      	b.n	a19e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a144:	78fb      	ldrb	r3, [r7, #3]
    a146:	f003 0308 	and.w	r3, r3, #8
    a14a:	2b00      	cmp	r3, #0
    a14c:	d004      	beq.n	a158 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a14e:	2101      	movs	r1, #1
    a150:	6878      	ldr	r0, [r7, #4]
    a152:	4b16      	ldr	r3, [pc, #88]	; (a1ac <_usb_d_dev_trans_in_isr+0x88>)
    a154:	4798      	blx	r3
}
    a156:	e022      	b.n	a19e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a158:	78fb      	ldrb	r3, [r7, #3]
    a15a:	f003 0302 	and.w	r3, r3, #2
    a15e:	2b00      	cmp	r3, #0
    a160:	d004      	beq.n	a16c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a162:	2101      	movs	r1, #1
    a164:	6878      	ldr	r0, [r7, #4]
    a166:	4b12      	ldr	r3, [pc, #72]	; (a1b0 <_usb_d_dev_trans_in_isr+0x8c>)
    a168:	4798      	blx	r3
}
    a16a:	e018      	b.n	a19e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a16c:	687b      	ldr	r3, [r7, #4]
    a16e:	7cdb      	ldrb	r3, [r3, #19]
    a170:	f003 0307 	and.w	r3, r3, #7
    a174:	b2db      	uxtb	r3, r3
    a176:	2b01      	cmp	r3, #1
    a178:	d111      	bne.n	a19e <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a17a:	78fb      	ldrb	r3, [r7, #3]
    a17c:	f003 0304 	and.w	r3, r3, #4
    a180:	2b00      	cmp	r3, #0
    a182:	d004      	beq.n	a18e <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a184:	2100      	movs	r1, #0
    a186:	6878      	ldr	r0, [r7, #4]
    a188:	4b08      	ldr	r3, [pc, #32]	; (a1ac <_usb_d_dev_trans_in_isr+0x88>)
    a18a:	4798      	blx	r3
}
    a18c:	e007      	b.n	a19e <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a18e:	78fb      	ldrb	r3, [r7, #3]
    a190:	f003 0310 	and.w	r3, r3, #16
    a194:	2b00      	cmp	r3, #0
    a196:	d002      	beq.n	a19e <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a198:	6878      	ldr	r0, [r7, #4]
    a19a:	4b06      	ldr	r3, [pc, #24]	; (a1b4 <_usb_d_dev_trans_in_isr+0x90>)
    a19c:	4798      	blx	r3
}
    a19e:	bf00      	nop
    a1a0:	3708      	adds	r7, #8
    a1a2:	46bd      	mov	sp, r7
    a1a4:	bd80      	pop	{r7, pc}
    a1a6:	bf00      	nop
    a1a8:	00009ec9 	.word	0x00009ec9
    a1ac:	00009f0d 	.word	0x00009f0d
    a1b0:	00009915 	.word	0x00009915
    a1b4:	00009df1 	.word	0x00009df1

0000a1b8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a1b8:	b580      	push	{r7, lr}
    a1ba:	b082      	sub	sp, #8
    a1bc:	af00      	add	r7, sp, #0
    a1be:	6078      	str	r0, [r7, #4]
    a1c0:	460b      	mov	r3, r1
    a1c2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a1c4:	78fb      	ldrb	r3, [r7, #3]
    a1c6:	f003 0320 	and.w	r3, r3, #32
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	d004      	beq.n	a1d8 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a1ce:	2100      	movs	r1, #0
    a1d0:	6878      	ldr	r0, [r7, #4]
    a1d2:	4b1a      	ldr	r3, [pc, #104]	; (a23c <_usb_d_dev_trans_out_isr+0x84>)
    a1d4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a1d6:	e02c      	b.n	a232 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a1d8:	78fb      	ldrb	r3, [r7, #3]
    a1da:	f003 0304 	and.w	r3, r3, #4
    a1de:	2b00      	cmp	r3, #0
    a1e0:	d004      	beq.n	a1ec <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a1e2:	2100      	movs	r1, #0
    a1e4:	6878      	ldr	r0, [r7, #4]
    a1e6:	4b16      	ldr	r3, [pc, #88]	; (a240 <_usb_d_dev_trans_out_isr+0x88>)
    a1e8:	4798      	blx	r3
}
    a1ea:	e022      	b.n	a232 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a1ec:	78fb      	ldrb	r3, [r7, #3]
    a1ee:	f003 0301 	and.w	r3, r3, #1
    a1f2:	2b00      	cmp	r3, #0
    a1f4:	d004      	beq.n	a200 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a1f6:	2101      	movs	r1, #1
    a1f8:	6878      	ldr	r0, [r7, #4]
    a1fa:	4b12      	ldr	r3, [pc, #72]	; (a244 <_usb_d_dev_trans_out_isr+0x8c>)
    a1fc:	4798      	blx	r3
}
    a1fe:	e018      	b.n	a232 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a200:	687b      	ldr	r3, [r7, #4]
    a202:	7cdb      	ldrb	r3, [r3, #19]
    a204:	f003 0307 	and.w	r3, r3, #7
    a208:	b2db      	uxtb	r3, r3
    a20a:	2b01      	cmp	r3, #1
    a20c:	d111      	bne.n	a232 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a20e:	78fb      	ldrb	r3, [r7, #3]
    a210:	f003 0308 	and.w	r3, r3, #8
    a214:	2b00      	cmp	r3, #0
    a216:	d004      	beq.n	a222 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a218:	2101      	movs	r1, #1
    a21a:	6878      	ldr	r0, [r7, #4]
    a21c:	4b08      	ldr	r3, [pc, #32]	; (a240 <_usb_d_dev_trans_out_isr+0x88>)
    a21e:	4798      	blx	r3
}
    a220:	e007      	b.n	a232 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a222:	78fb      	ldrb	r3, [r7, #3]
    a224:	f003 0310 	and.w	r3, r3, #16
    a228:	2b00      	cmp	r3, #0
    a22a:	d002      	beq.n	a232 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a22c:	6878      	ldr	r0, [r7, #4]
    a22e:	4b06      	ldr	r3, [pc, #24]	; (a248 <_usb_d_dev_trans_out_isr+0x90>)
    a230:	4798      	blx	r3
}
    a232:	bf00      	nop
    a234:	3708      	adds	r7, #8
    a236:	46bd      	mov	sp, r7
    a238:	bd80      	pop	{r7, pc}
    a23a:	bf00      	nop
    a23c:	00009ec9 	.word	0x00009ec9
    a240:	00009f0d 	.word	0x00009f0d
    a244:	00009b2d 	.word	0x00009b2d
    a248:	00009df1 	.word	0x00009df1

0000a24c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a24c:	b580      	push	{r7, lr}
    a24e:	b084      	sub	sp, #16
    a250:	af00      	add	r7, sp, #0
    a252:	6078      	str	r0, [r7, #4]
    a254:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a256:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a25a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a25c:	683b      	ldr	r3, [r7, #0]
    a25e:	7c9b      	ldrb	r3, [r3, #18]
    a260:	f003 030f 	and.w	r3, r3, #15
    a264:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a266:	7afb      	ldrb	r3, [r7, #11]
    a268:	2201      	movs	r2, #1
    a26a:	409a      	lsls	r2, r3
    a26c:	687b      	ldr	r3, [r7, #4]
    a26e:	4013      	ands	r3, r2
    a270:	2b00      	cmp	r3, #0
    a272:	d03d      	beq.n	a2f0 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a274:	7afb      	ldrb	r3, [r7, #11]
    a276:	68fa      	ldr	r2, [r7, #12]
    a278:	3308      	adds	r3, #8
    a27a:	015b      	lsls	r3, r3, #5
    a27c:	4413      	add	r3, r2
    a27e:	3307      	adds	r3, #7
    a280:	781b      	ldrb	r3, [r3, #0]
    a282:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a284:	7afb      	ldrb	r3, [r7, #11]
    a286:	68fa      	ldr	r2, [r7, #12]
    a288:	015b      	lsls	r3, r3, #5
    a28a:	4413      	add	r3, r2
    a28c:	f203 1309 	addw	r3, r3, #265	; 0x109
    a290:	781b      	ldrb	r3, [r3, #0]
    a292:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a294:	7aba      	ldrb	r2, [r7, #10]
    a296:	7a7b      	ldrb	r3, [r7, #9]
    a298:	4013      	ands	r3, r2
    a29a:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a29c:	7abb      	ldrb	r3, [r7, #10]
    a29e:	2b00      	cmp	r3, #0
    a2a0:	d027      	beq.n	a2f2 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a2a2:	683b      	ldr	r3, [r7, #0]
    a2a4:	7cdb      	ldrb	r3, [r3, #19]
    a2a6:	f003 0307 	and.w	r3, r3, #7
    a2aa:	b2db      	uxtb	r3, r3
    a2ac:	2b01      	cmp	r3, #1
    a2ae:	d10c      	bne.n	a2ca <_usb_d_dev_handle_eps+0x7e>
    a2b0:	683b      	ldr	r3, [r7, #0]
    a2b2:	7cdb      	ldrb	r3, [r3, #19]
    a2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a2b8:	b2db      	uxtb	r3, r3
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	d105      	bne.n	a2ca <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a2be:	7abb      	ldrb	r3, [r7, #10]
    a2c0:	4619      	mov	r1, r3
    a2c2:	6838      	ldr	r0, [r7, #0]
    a2c4:	4b0c      	ldr	r3, [pc, #48]	; (a2f8 <_usb_d_dev_handle_eps+0xac>)
    a2c6:	4798      	blx	r3
    a2c8:	e013      	b.n	a2f2 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a2ca:	683b      	ldr	r3, [r7, #0]
    a2cc:	7cdb      	ldrb	r3, [r3, #19]
    a2ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a2d2:	b2db      	uxtb	r3, r3
    a2d4:	2b00      	cmp	r3, #0
    a2d6:	d005      	beq.n	a2e4 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a2d8:	7abb      	ldrb	r3, [r7, #10]
    a2da:	4619      	mov	r1, r3
    a2dc:	6838      	ldr	r0, [r7, #0]
    a2de:	4b07      	ldr	r3, [pc, #28]	; (a2fc <_usb_d_dev_handle_eps+0xb0>)
    a2e0:	4798      	blx	r3
    a2e2:	e006      	b.n	a2f2 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a2e4:	7abb      	ldrb	r3, [r7, #10]
    a2e6:	4619      	mov	r1, r3
    a2e8:	6838      	ldr	r0, [r7, #0]
    a2ea:	4b05      	ldr	r3, [pc, #20]	; (a300 <_usb_d_dev_handle_eps+0xb4>)
    a2ec:	4798      	blx	r3
    a2ee:	e000      	b.n	a2f2 <_usb_d_dev_handle_eps+0xa6>
		return;
    a2f0:	bf00      	nop
		}
	}
}
    a2f2:	3710      	adds	r7, #16
    a2f4:	46bd      	mov	sp, r7
    a2f6:	bd80      	pop	{r7, pc}
    a2f8:	0000a0d1 	.word	0x0000a0d1
    a2fc:	0000a125 	.word	0x0000a125
    a300:	0000a1b9 	.word	0x0000a1b9

0000a304 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a304:	b580      	push	{r7, lr}
    a306:	b084      	sub	sp, #16
    a308:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a30a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a30e:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a310:	68bb      	ldr	r3, [r7, #8]
    a312:	8c1b      	ldrh	r3, [r3, #32]
    a314:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a316:	88fb      	ldrh	r3, [r7, #6]
    a318:	2b00      	cmp	r3, #0
    a31a:	d104      	bne.n	a326 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a31c:	4b13      	ldr	r3, [pc, #76]	; (a36c <_usb_d_dev_handler+0x68>)
    a31e:	4798      	blx	r3
    a320:	4603      	mov	r3, r0
    a322:	2b00      	cmp	r3, #0
    a324:	d11e      	bne.n	a364 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a326:	2300      	movs	r3, #0
    a328:	73fb      	strb	r3, [r7, #15]
    a32a:	e017      	b.n	a35c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a32c:	7bfa      	ldrb	r2, [r7, #15]
    a32e:	4613      	mov	r3, r2
    a330:	009b      	lsls	r3, r3, #2
    a332:	4413      	add	r3, r2
    a334:	009b      	lsls	r3, r3, #2
    a336:	3310      	adds	r3, #16
    a338:	4a0d      	ldr	r2, [pc, #52]	; (a370 <_usb_d_dev_handler+0x6c>)
    a33a:	4413      	add	r3, r2
    a33c:	3304      	adds	r3, #4
    a33e:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a340:	683b      	ldr	r3, [r7, #0]
    a342:	7c9b      	ldrb	r3, [r3, #18]
    a344:	2bff      	cmp	r3, #255	; 0xff
    a346:	d005      	beq.n	a354 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a348:	88fb      	ldrh	r3, [r7, #6]
    a34a:	6839      	ldr	r1, [r7, #0]
    a34c:	4618      	mov	r0, r3
    a34e:	4b09      	ldr	r3, [pc, #36]	; (a374 <_usb_d_dev_handler+0x70>)
    a350:	4798      	blx	r3
    a352:	e000      	b.n	a356 <_usb_d_dev_handler+0x52>
			continue;
    a354:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a356:	7bfb      	ldrb	r3, [r7, #15]
    a358:	3301      	adds	r3, #1
    a35a:	73fb      	strb	r3, [r7, #15]
    a35c:	7bfb      	ldrb	r3, [r7, #15]
    a35e:	2b08      	cmp	r3, #8
    a360:	d9e4      	bls.n	a32c <_usb_d_dev_handler+0x28>
    a362:	e000      	b.n	a366 <_usb_d_dev_handler+0x62>
			return;
    a364:	bf00      	nop
	}
}
    a366:	3710      	adds	r7, #16
    a368:	46bd      	mov	sp, r7
    a36a:	bd80      	pop	{r7, pc}
    a36c:	0000985d 	.word	0x0000985d
    a370:	20002418 	.word	0x20002418
    a374:	0000a24d 	.word	0x0000a24d

0000a378 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a378:	b580      	push	{r7, lr}
    a37a:	b082      	sub	sp, #8
    a37c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a37e:	2300      	movs	r3, #0
    a380:	71fb      	strb	r3, [r7, #7]
    a382:	e023      	b.n	a3cc <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a384:	79fa      	ldrb	r2, [r7, #7]
    a386:	4613      	mov	r3, r2
    a388:	009b      	lsls	r3, r3, #2
    a38a:	4413      	add	r3, r2
    a38c:	009b      	lsls	r3, r3, #2
    a38e:	3310      	adds	r3, #16
    a390:	4a14      	ldr	r2, [pc, #80]	; (a3e4 <_usb_d_dev_reset_epts+0x6c>)
    a392:	4413      	add	r3, r2
    a394:	3304      	adds	r3, #4
    a396:	2103      	movs	r1, #3
    a398:	4618      	mov	r0, r3
    a39a:	4b13      	ldr	r3, [pc, #76]	; (a3e8 <_usb_d_dev_reset_epts+0x70>)
    a39c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a39e:	79fa      	ldrb	r2, [r7, #7]
    a3a0:	4910      	ldr	r1, [pc, #64]	; (a3e4 <_usb_d_dev_reset_epts+0x6c>)
    a3a2:	4613      	mov	r3, r2
    a3a4:	009b      	lsls	r3, r3, #2
    a3a6:	4413      	add	r3, r2
    a3a8:	009b      	lsls	r3, r3, #2
    a3aa:	440b      	add	r3, r1
    a3ac:	3326      	adds	r3, #38	; 0x26
    a3ae:	22ff      	movs	r2, #255	; 0xff
    a3b0:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a3b2:	79fa      	ldrb	r2, [r7, #7]
    a3b4:	490b      	ldr	r1, [pc, #44]	; (a3e4 <_usb_d_dev_reset_epts+0x6c>)
    a3b6:	4613      	mov	r3, r2
    a3b8:	009b      	lsls	r3, r3, #2
    a3ba:	4413      	add	r3, r2
    a3bc:	009b      	lsls	r3, r3, #2
    a3be:	440b      	add	r3, r1
    a3c0:	3327      	adds	r3, #39	; 0x27
    a3c2:	2200      	movs	r2, #0
    a3c4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a3c6:	79fb      	ldrb	r3, [r7, #7]
    a3c8:	3301      	adds	r3, #1
    a3ca:	71fb      	strb	r3, [r7, #7]
    a3cc:	79fb      	ldrb	r3, [r7, #7]
    a3ce:	2b08      	cmp	r3, #8
    a3d0:	d9d8      	bls.n	a384 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a3d2:	22a0      	movs	r2, #160	; 0xa0
    a3d4:	2100      	movs	r1, #0
    a3d6:	4805      	ldr	r0, [pc, #20]	; (a3ec <_usb_d_dev_reset_epts+0x74>)
    a3d8:	4b05      	ldr	r3, [pc, #20]	; (a3f0 <_usb_d_dev_reset_epts+0x78>)
    a3da:	4798      	blx	r3
}
    a3dc:	bf00      	nop
    a3de:	3708      	adds	r7, #8
    a3e0:	46bd      	mov	sp, r7
    a3e2:	bd80      	pop	{r7, pc}
    a3e4:	20002418 	.word	0x20002418
    a3e8:	0000ac3d 	.word	0x0000ac3d
    a3ec:	200024e0 	.word	0x200024e0
    a3f0:	00010441 	.word	0x00010441

0000a3f4 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a3f4:	b580      	push	{r7, lr}
    a3f6:	b084      	sub	sp, #16
    a3f8:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a3fa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a3fe:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a400:	2301      	movs	r3, #1
    a402:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a404:	2304      	movs	r3, #4
    a406:	713b      	strb	r3, [r7, #4]
    a408:	2300      	movs	r3, #0
    a40a:	717b      	strb	r3, [r7, #5]
    a40c:	2300      	movs	r3, #0
    a40e:	71bb      	strb	r3, [r7, #6]
    a410:	2300      	movs	r3, #0
    a412:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a414:	2101      	movs	r1, #1
    a416:	68f8      	ldr	r0, [r7, #12]
    a418:	4b26      	ldr	r3, [pc, #152]	; (a4b4 <_usb_d_dev_init+0xc0>)
    a41a:	4798      	blx	r3
    a41c:	4603      	mov	r3, r0
    a41e:	f083 0301 	eor.w	r3, r3, #1
    a422:	b2db      	uxtb	r3, r3
    a424:	2b00      	cmp	r3, #0
    a426:	d011      	beq.n	a44c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a428:	2102      	movs	r1, #2
    a42a:	68f8      	ldr	r0, [r7, #12]
    a42c:	4b22      	ldr	r3, [pc, #136]	; (a4b8 <_usb_d_dev_init+0xc4>)
    a42e:	4798      	blx	r3
    a430:	4603      	mov	r3, r0
    a432:	2b00      	cmp	r3, #0
    a434:	d006      	beq.n	a444 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a436:	68f8      	ldr	r0, [r7, #12]
    a438:	4b20      	ldr	r3, [pc, #128]	; (a4bc <_usb_d_dev_init+0xc8>)
    a43a:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a43c:	2102      	movs	r1, #2
    a43e:	68f8      	ldr	r0, [r7, #12]
    a440:	4b1f      	ldr	r3, [pc, #124]	; (a4c0 <_usb_d_dev_init+0xcc>)
    a442:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a444:	2101      	movs	r1, #1
    a446:	68f8      	ldr	r0, [r7, #12]
    a448:	4b1e      	ldr	r3, [pc, #120]	; (a4c4 <_usb_d_dev_init+0xd0>)
    a44a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a44c:	2101      	movs	r1, #1
    a44e:	68f8      	ldr	r0, [r7, #12]
    a450:	4b1b      	ldr	r3, [pc, #108]	; (a4c0 <_usb_d_dev_init+0xcc>)
    a452:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a454:	4b1c      	ldr	r3, [pc, #112]	; (a4c8 <_usb_d_dev_init+0xd4>)
    a456:	4a1d      	ldr	r2, [pc, #116]	; (a4cc <_usb_d_dev_init+0xd8>)
    a458:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a45a:	4b1b      	ldr	r3, [pc, #108]	; (a4c8 <_usb_d_dev_init+0xd4>)
    a45c:	4a1b      	ldr	r2, [pc, #108]	; (a4cc <_usb_d_dev_init+0xd8>)
    a45e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a460:	4b19      	ldr	r3, [pc, #100]	; (a4c8 <_usb_d_dev_init+0xd4>)
    a462:	4a1a      	ldr	r2, [pc, #104]	; (a4cc <_usb_d_dev_init+0xd8>)
    a464:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a466:	4b18      	ldr	r3, [pc, #96]	; (a4c8 <_usb_d_dev_init+0xd4>)
    a468:	4a18      	ldr	r2, [pc, #96]	; (a4cc <_usb_d_dev_init+0xd8>)
    a46a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a46c:	4b16      	ldr	r3, [pc, #88]	; (a4c8 <_usb_d_dev_init+0xd4>)
    a46e:	4a17      	ldr	r2, [pc, #92]	; (a4cc <_usb_d_dev_init+0xd8>)
    a470:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a472:	4b17      	ldr	r3, [pc, #92]	; (a4d0 <_usb_d_dev_init+0xdc>)
    a474:	4798      	blx	r3

	_usb_load_calib();
    a476:	4b17      	ldr	r3, [pc, #92]	; (a4d4 <_usb_d_dev_init+0xe0>)
    a478:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a47a:	2104      	movs	r1, #4
    a47c:	68f8      	ldr	r0, [r7, #12]
    a47e:	4b11      	ldr	r3, [pc, #68]	; (a4c4 <_usb_d_dev_init+0xd0>)
    a480:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a482:	4b15      	ldr	r3, [pc, #84]	; (a4d8 <_usb_d_dev_init+0xe4>)
    a484:	4619      	mov	r1, r3
    a486:	68f8      	ldr	r0, [r7, #12]
    a488:	4b14      	ldr	r3, [pc, #80]	; (a4dc <_usb_d_dev_init+0xe8>)
    a48a:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a48c:	7afb      	ldrb	r3, [r7, #11]
    a48e:	f107 0210 	add.w	r2, r7, #16
    a492:	4413      	add	r3, r2
    a494:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a498:	f043 0301 	orr.w	r3, r3, #1
    a49c:	b2db      	uxtb	r3, r3
    a49e:	b29b      	uxth	r3, r3
    a4a0:	4619      	mov	r1, r3
    a4a2:	68f8      	ldr	r0, [r7, #12]
    a4a4:	4b0e      	ldr	r3, [pc, #56]	; (a4e0 <_usb_d_dev_init+0xec>)
    a4a6:	4798      	blx	r3

	return ERR_NONE;
    a4a8:	2300      	movs	r3, #0
}
    a4aa:	4618      	mov	r0, r3
    a4ac:	3710      	adds	r7, #16
    a4ae:	46bd      	mov	sp, r7
    a4b0:	bd80      	pop	{r7, pc}
    a4b2:	bf00      	nop
    a4b4:	00008a8d 	.word	0x00008a8d
    a4b8:	00008ddd 	.word	0x00008ddd
    a4bc:	00008db1 	.word	0x00008db1
    a4c0:	00008a63 	.word	0x00008a63
    a4c4:	00008e0d 	.word	0x00008e0d
    a4c8:	20002418 	.word	0x20002418
    a4cc:	00008ed5 	.word	0x00008ed5
    a4d0:	0000a379 	.word	0x0000a379
    a4d4:	00008eed 	.word	0x00008eed
    a4d8:	200024e0 	.word	0x200024e0
    a4dc:	00008eb9 	.word	0x00008eb9
    a4e0:	00008e7d 	.word	0x00008e7d

0000a4e4 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a4e4:	b580      	push	{r7, lr}
    a4e6:	b082      	sub	sp, #8
    a4e8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a4ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a4ee:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a4f0:	2103      	movs	r1, #3
    a4f2:	6878      	ldr	r0, [r7, #4]
    a4f4:	4b17      	ldr	r3, [pc, #92]	; (a554 <_usb_d_dev_enable+0x70>)
    a4f6:	4798      	blx	r3
    a4f8:	4603      	mov	r3, r0
    a4fa:	2b00      	cmp	r3, #0
    a4fc:	d002      	beq.n	a504 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a4fe:	f06f 0310 	mvn.w	r3, #16
    a502:	e023      	b.n	a54c <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a504:	6878      	ldr	r0, [r7, #4]
    a506:	4b14      	ldr	r3, [pc, #80]	; (a558 <_usb_d_dev_enable+0x74>)
    a508:	4798      	blx	r3
    a50a:	4603      	mov	r3, r0
    a50c:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a50e:	78fb      	ldrb	r3, [r7, #3]
    a510:	f003 0302 	and.w	r3, r3, #2
    a514:	2b00      	cmp	r3, #0
    a516:	d107      	bne.n	a528 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a518:	78fb      	ldrb	r3, [r7, #3]
    a51a:	f043 0302 	orr.w	r3, r3, #2
    a51e:	b2db      	uxtb	r3, r3
    a520:	4619      	mov	r1, r3
    a522:	6878      	ldr	r0, [r7, #4]
    a524:	4b0d      	ldr	r3, [pc, #52]	; (a55c <_usb_d_dev_enable+0x78>)
    a526:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a528:	2050      	movs	r0, #80	; 0x50
    a52a:	4b0d      	ldr	r3, [pc, #52]	; (a560 <_usb_d_dev_enable+0x7c>)
    a52c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a52e:	2051      	movs	r0, #81	; 0x51
    a530:	4b0b      	ldr	r3, [pc, #44]	; (a560 <_usb_d_dev_enable+0x7c>)
    a532:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a534:	2052      	movs	r0, #82	; 0x52
    a536:	4b0a      	ldr	r3, [pc, #40]	; (a560 <_usb_d_dev_enable+0x7c>)
    a538:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a53a:	2053      	movs	r0, #83	; 0x53
    a53c:	4b08      	ldr	r3, [pc, #32]	; (a560 <_usb_d_dev_enable+0x7c>)
    a53e:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a540:	f240 218d 	movw	r1, #653	; 0x28d
    a544:	6878      	ldr	r0, [r7, #4]
    a546:	4b07      	ldr	r3, [pc, #28]	; (a564 <_usb_d_dev_enable+0x80>)
    a548:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a54a:	2300      	movs	r3, #0
}
    a54c:	4618      	mov	r0, r3
    a54e:	3708      	adds	r7, #8
    a550:	46bd      	mov	sp, r7
    a552:	bd80      	pop	{r7, pc}
    a554:	00008d87 	.word	0x00008d87
    a558:	00008e35 	.word	0x00008e35
    a55c:	00008e0d 	.word	0x00008e0d
    a560:	00008999 	.word	0x00008999
    a564:	00008d31 	.word	0x00008d31

0000a568 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a568:	b580      	push	{r7, lr}
    a56a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a56c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a570:	4b01      	ldr	r3, [pc, #4]	; (a578 <_usb_d_dev_attach+0x10>)
    a572:	4798      	blx	r3
}
    a574:	bf00      	nop
    a576:	bd80      	pop	{r7, pc}
    a578:	00008e59 	.word	0x00008e59

0000a57c <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a57c:	b580      	push	{r7, lr}
    a57e:	b082      	sub	sp, #8
    a580:	af00      	add	r7, sp, #0
    a582:	4603      	mov	r3, r0
    a584:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a586:	79fb      	ldrb	r3, [r7, #7]
    a588:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a58c:	b2db      	uxtb	r3, r3
    a58e:	4619      	mov	r1, r3
    a590:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a594:	4b02      	ldr	r3, [pc, #8]	; (a5a0 <_usb_d_dev_set_address+0x24>)
    a596:	4798      	blx	r3
}
    a598:	bf00      	nop
    a59a:	3708      	adds	r7, #8
    a59c:	46bd      	mov	sp, r7
    a59e:	bd80      	pop	{r7, pc}
    a5a0:	00008e9b 	.word	0x00008e9b

0000a5a4 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a5a4:	b590      	push	{r4, r7, lr}
    a5a6:	b085      	sub	sp, #20
    a5a8:	af00      	add	r7, sp, #0
    a5aa:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a5ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a5b0:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a5b2:	687b      	ldr	r3, [r7, #4]
    a5b4:	7c9b      	ldrb	r3, [r3, #18]
    a5b6:	f003 030f 	and.w	r3, r3, #15
    a5ba:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a5bc:	687b      	ldr	r3, [r7, #4]
    a5be:	68db      	ldr	r3, [r3, #12]
    a5c0:	461a      	mov	r2, r3
    a5c2:	7afb      	ldrb	r3, [r7, #11]
    a5c4:	2100      	movs	r1, #0
    a5c6:	4618      	mov	r0, r3
    a5c8:	4b0f      	ldr	r3, [pc, #60]	; (a608 <_usb_d_dev_trans_setup+0x64>)
    a5ca:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a5cc:	687b      	ldr	r3, [r7, #4]
    a5ce:	8a1b      	ldrh	r3, [r3, #16]
    a5d0:	461a      	mov	r2, r3
    a5d2:	7af8      	ldrb	r0, [r7, #11]
    a5d4:	2300      	movs	r3, #0
    a5d6:	2100      	movs	r1, #0
    a5d8:	4c0c      	ldr	r4, [pc, #48]	; (a60c <_usb_d_dev_trans_setup+0x68>)
    a5da:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a5dc:	7afb      	ldrb	r3, [r7, #11]
    a5de:	22b0      	movs	r2, #176	; 0xb0
    a5e0:	4619      	mov	r1, r3
    a5e2:	68f8      	ldr	r0, [r7, #12]
    a5e4:	4b0a      	ldr	r3, [pc, #40]	; (a610 <_usb_d_dev_trans_setup+0x6c>)
    a5e6:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a5e8:	7afb      	ldrb	r3, [r7, #11]
    a5ea:	2200      	movs	r2, #0
    a5ec:	2100      	movs	r1, #0
    a5ee:	4618      	mov	r0, r3
    a5f0:	4b08      	ldr	r3, [pc, #32]	; (a614 <_usb_d_dev_trans_setup+0x70>)
    a5f2:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a5f4:	7afb      	ldrb	r3, [r7, #11]
    a5f6:	2210      	movs	r2, #16
    a5f8:	4619      	mov	r1, r3
    a5fa:	68f8      	ldr	r0, [r7, #12]
    a5fc:	4b06      	ldr	r3, [pc, #24]	; (a618 <_usb_d_dev_trans_setup+0x74>)
    a5fe:	4798      	blx	r3
}
    a600:	bf00      	nop
    a602:	3714      	adds	r7, #20
    a604:	46bd      	mov	sp, r7
    a606:	bd90      	pop	{r4, r7, pc}
    a608:	00009339 	.word	0x00009339
    a60c:	000094c1 	.word	0x000094c1
    a610:	00008b99 	.word	0x00008b99
    a614:	00009591 	.word	0x00009591
    a618:	00008bed 	.word	0x00008bed

0000a61c <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a61c:	b580      	push	{r7, lr}
    a61e:	b088      	sub	sp, #32
    a620:	af00      	add	r7, sp, #0
    a622:	4603      	mov	r3, r0
    a624:	71fb      	strb	r3, [r7, #7]
    a626:	460b      	mov	r3, r1
    a628:	71bb      	strb	r3, [r7, #6]
    a62a:	4613      	mov	r3, r2
    a62c:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a62e:	79fb      	ldrb	r3, [r7, #7]
    a630:	f003 030f 	and.w	r3, r3, #15
    a634:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a636:	79fb      	ldrb	r3, [r7, #7]
    a638:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a63c:	2b00      	cmp	r3, #0
    a63e:	bf14      	ite	ne
    a640:	2301      	movne	r3, #1
    a642:	2300      	moveq	r3, #0
    a644:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a646:	7fba      	ldrb	r2, [r7, #30]
    a648:	7ffb      	ldrb	r3, [r7, #31]
    a64a:	4611      	mov	r1, r2
    a64c:	4618      	mov	r0, r3
    a64e:	4b3e      	ldr	r3, [pc, #248]	; (a748 <_usb_d_dev_ep_init+0x12c>)
    a650:	4798      	blx	r3
    a652:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a654:	79bb      	ldrb	r3, [r7, #6]
    a656:	f003 0303 	and.w	r3, r3, #3
    a65a:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a65c:	7ffa      	ldrb	r2, [r7, #31]
    a65e:	4613      	mov	r3, r2
    a660:	005b      	lsls	r3, r3, #1
    a662:	4413      	add	r3, r2
    a664:	009b      	lsls	r3, r3, #2
    a666:	4a39      	ldr	r2, [pc, #228]	; (a74c <_usb_d_dev_ep_init+0x130>)
    a668:	4413      	add	r3, r2
    a66a:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a66c:	7ffb      	ldrb	r3, [r7, #31]
    a66e:	2b04      	cmp	r3, #4
    a670:	d902      	bls.n	a678 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a672:	f06f 0311 	mvn.w	r3, #17
    a676:	e063      	b.n	a740 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a678:	69bb      	ldr	r3, [r7, #24]
    a67a:	7c9b      	ldrb	r3, [r3, #18]
    a67c:	2bff      	cmp	r3, #255	; 0xff
    a67e:	d002      	beq.n	a686 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a680:	f06f 0313 	mvn.w	r3, #19
    a684:	e05c      	b.n	a740 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a686:	7dfb      	ldrb	r3, [r7, #23]
    a688:	2b00      	cmp	r3, #0
    a68a:	d11f      	bne.n	a6cc <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a68c:	7fbb      	ldrb	r3, [r7, #30]
    a68e:	2b00      	cmp	r3, #0
    a690:	bf14      	ite	ne
    a692:	2301      	movne	r3, #1
    a694:	2300      	moveq	r3, #0
    a696:	b2db      	uxtb	r3, r3
    a698:	f083 0301 	eor.w	r3, r3, #1
    a69c:	b2db      	uxtb	r3, r3
    a69e:	f003 0301 	and.w	r3, r3, #1
    a6a2:	b2da      	uxtb	r2, r3
    a6a4:	7ffb      	ldrb	r3, [r7, #31]
    a6a6:	4611      	mov	r1, r2
    a6a8:	4618      	mov	r0, r3
    a6aa:	4b27      	ldr	r3, [pc, #156]	; (a748 <_usb_d_dev_ep_init+0x12c>)
    a6ac:	4798      	blx	r3
    a6ae:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a6b0:	68fb      	ldr	r3, [r7, #12]
    a6b2:	7c9b      	ldrb	r3, [r3, #18]
    a6b4:	2bff      	cmp	r3, #255	; 0xff
    a6b6:	d002      	beq.n	a6be <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a6b8:	f06f 0313 	mvn.w	r3, #19
    a6bc:	e040      	b.n	a740 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a6be:	693b      	ldr	r3, [r7, #16]
    a6c0:	681b      	ldr	r3, [r3, #0]
    a6c2:	2b00      	cmp	r3, #0
    a6c4:	d102      	bne.n	a6cc <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a6c6:	f06f 0312 	mvn.w	r3, #18
    a6ca:	e039      	b.n	a740 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a6cc:	7fbb      	ldrb	r3, [r7, #30]
    a6ce:	2b00      	cmp	r3, #0
    a6d0:	d007      	beq.n	a6e2 <_usb_d_dev_ep_init+0xc6>
    a6d2:	693b      	ldr	r3, [r7, #16]
    a6d4:	685b      	ldr	r3, [r3, #4]
    a6d6:	2b00      	cmp	r3, #0
    a6d8:	bf14      	ite	ne
    a6da:	2301      	movne	r3, #1
    a6dc:	2300      	moveq	r3, #0
    a6de:	b2db      	uxtb	r3, r3
    a6e0:	e006      	b.n	a6f0 <_usb_d_dev_ep_init+0xd4>
    a6e2:	693b      	ldr	r3, [r7, #16]
    a6e4:	681b      	ldr	r3, [r3, #0]
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	bf14      	ite	ne
    a6ea:	2301      	movne	r3, #1
    a6ec:	2300      	moveq	r3, #0
    a6ee:	b2db      	uxtb	r3, r3
    a6f0:	2b00      	cmp	r3, #0
    a6f2:	d00f      	beq.n	a714 <_usb_d_dev_ep_init+0xf8>
    a6f4:	7fbb      	ldrb	r3, [r7, #30]
    a6f6:	2b00      	cmp	r3, #0
    a6f8:	d003      	beq.n	a702 <_usb_d_dev_ep_init+0xe6>
    a6fa:	693b      	ldr	r3, [r7, #16]
    a6fc:	895b      	ldrh	r3, [r3, #10]
    a6fe:	461a      	mov	r2, r3
    a700:	e002      	b.n	a708 <_usb_d_dev_ep_init+0xec>
    a702:	693b      	ldr	r3, [r7, #16]
    a704:	891b      	ldrh	r3, [r3, #8]
    a706:	461a      	mov	r2, r3
    a708:	88bb      	ldrh	r3, [r7, #4]
    a70a:	429a      	cmp	r2, r3
    a70c:	da02      	bge.n	a714 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a70e:	f06f 0312 	mvn.w	r3, #18
    a712:	e015      	b.n	a740 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a714:	7fbb      	ldrb	r3, [r7, #30]
    a716:	2b00      	cmp	r3, #0
    a718:	d002      	beq.n	a720 <_usb_d_dev_ep_init+0x104>
    a71a:	693b      	ldr	r3, [r7, #16]
    a71c:	685b      	ldr	r3, [r3, #4]
    a71e:	e001      	b.n	a724 <_usb_d_dev_ep_init+0x108>
    a720:	693b      	ldr	r3, [r7, #16]
    a722:	681b      	ldr	r3, [r3, #0]
    a724:	69ba      	ldr	r2, [r7, #24]
    a726:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a728:	69bb      	ldr	r3, [r7, #24]
    a72a:	88ba      	ldrh	r2, [r7, #4]
    a72c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a72e:	7dfb      	ldrb	r3, [r7, #23]
    a730:	3301      	adds	r3, #1
    a732:	b2da      	uxtb	r2, r3
    a734:	69bb      	ldr	r3, [r7, #24]
    a736:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a738:	69bb      	ldr	r3, [r7, #24]
    a73a:	79fa      	ldrb	r2, [r7, #7]
    a73c:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a73e:	2300      	movs	r3, #0
}
    a740:	4618      	mov	r0, r3
    a742:	3720      	adds	r7, #32
    a744:	46bd      	mov	sp, r7
    a746:	bd80      	pop	{r7, pc}
    a748:	0000964d 	.word	0x0000964d
    a74c:	00010a94 	.word	0x00010a94

0000a750 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a750:	b580      	push	{r7, lr}
    a752:	b086      	sub	sp, #24
    a754:	af00      	add	r7, sp, #0
    a756:	4603      	mov	r3, r0
    a758:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a75a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a75e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a760:	79fb      	ldrb	r3, [r7, #7]
    a762:	f003 030f 	and.w	r3, r3, #15
    a766:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a768:	79fb      	ldrb	r3, [r7, #7]
    a76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a76e:	2b00      	cmp	r3, #0
    a770:	bf14      	ite	ne
    a772:	2301      	movne	r3, #1
    a774:	2300      	moveq	r3, #0
    a776:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a778:	7cba      	ldrb	r2, [r7, #18]
    a77a:	7cfb      	ldrb	r3, [r7, #19]
    a77c:	4611      	mov	r1, r2
    a77e:	4618      	mov	r0, r3
    a780:	4b2a      	ldr	r3, [pc, #168]	; (a82c <_usb_d_dev_ep_deinit+0xdc>)
    a782:	4798      	blx	r3
    a784:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a786:	7cfb      	ldrb	r3, [r7, #19]
    a788:	2b04      	cmp	r3, #4
    a78a:	d84a      	bhi.n	a822 <_usb_d_dev_ep_deinit+0xd2>
    a78c:	68fb      	ldr	r3, [r7, #12]
    a78e:	7c9b      	ldrb	r3, [r3, #18]
    a790:	2bff      	cmp	r3, #255	; 0xff
    a792:	d046      	beq.n	a822 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a794:	7cbb      	ldrb	r3, [r7, #18]
    a796:	2203      	movs	r2, #3
    a798:	4619      	mov	r1, r3
    a79a:	68f8      	ldr	r0, [r7, #12]
    a79c:	4b24      	ldr	r3, [pc, #144]	; (a830 <_usb_d_dev_ep_deinit+0xe0>)
    a79e:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a7a0:	68fb      	ldr	r3, [r7, #12]
    a7a2:	7cdb      	ldrb	r3, [r3, #19]
    a7a4:	f003 0307 	and.w	r3, r3, #7
    a7a8:	b2db      	uxtb	r3, r3
    a7aa:	2b01      	cmp	r3, #1
    a7ac:	d107      	bne.n	a7be <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a7ae:	79fb      	ldrb	r3, [r7, #7]
    a7b0:	697a      	ldr	r2, [r7, #20]
    a7b2:	3308      	adds	r3, #8
    a7b4:	015b      	lsls	r3, r3, #5
    a7b6:	4413      	add	r3, r2
    a7b8:	2200      	movs	r2, #0
    a7ba:	701a      	strb	r2, [r3, #0]
    a7bc:	e02a      	b.n	a814 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a7be:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a7c2:	2b00      	cmp	r3, #0
    a7c4:	da15      	bge.n	a7f2 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a7c6:	79fb      	ldrb	r3, [r7, #7]
    a7c8:	f003 030f 	and.w	r3, r3, #15
    a7cc:	79fa      	ldrb	r2, [r7, #7]
    a7ce:	f002 020f 	and.w	r2, r2, #15
    a7d2:	6979      	ldr	r1, [r7, #20]
    a7d4:	3208      	adds	r2, #8
    a7d6:	0152      	lsls	r2, r2, #5
    a7d8:	440a      	add	r2, r1
    a7da:	7812      	ldrb	r2, [r2, #0]
    a7dc:	b2d2      	uxtb	r2, r2
    a7de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a7e2:	b2d1      	uxtb	r1, r2
    a7e4:	697a      	ldr	r2, [r7, #20]
    a7e6:	3308      	adds	r3, #8
    a7e8:	015b      	lsls	r3, r3, #5
    a7ea:	4413      	add	r3, r2
    a7ec:	460a      	mov	r2, r1
    a7ee:	701a      	strb	r2, [r3, #0]
    a7f0:	e010      	b.n	a814 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a7f2:	79fb      	ldrb	r3, [r7, #7]
    a7f4:	79fa      	ldrb	r2, [r7, #7]
    a7f6:	6979      	ldr	r1, [r7, #20]
    a7f8:	3208      	adds	r2, #8
    a7fa:	0152      	lsls	r2, r2, #5
    a7fc:	440a      	add	r2, r1
    a7fe:	7812      	ldrb	r2, [r2, #0]
    a800:	b2d2      	uxtb	r2, r2
    a802:	f022 0207 	bic.w	r2, r2, #7
    a806:	b2d1      	uxtb	r1, r2
    a808:	697a      	ldr	r2, [r7, #20]
    a80a:	3308      	adds	r3, #8
    a80c:	015b      	lsls	r3, r3, #5
    a80e:	4413      	add	r3, r2
    a810:	460a      	mov	r2, r1
    a812:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a814:	68fb      	ldr	r3, [r7, #12]
    a816:	2200      	movs	r2, #0
    a818:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a81a:	68fb      	ldr	r3, [r7, #12]
    a81c:	22ff      	movs	r2, #255	; 0xff
    a81e:	749a      	strb	r2, [r3, #18]
    a820:	e000      	b.n	a824 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a822:	bf00      	nop
}
    a824:	3718      	adds	r7, #24
    a826:	46bd      	mov	sp, r7
    a828:	bd80      	pop	{r7, pc}
    a82a:	bf00      	nop
    a82c:	0000964d 	.word	0x0000964d
    a830:	0000ac85 	.word	0x0000ac85

0000a834 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a834:	b5b0      	push	{r4, r5, r7, lr}
    a836:	b088      	sub	sp, #32
    a838:	af00      	add	r7, sp, #0
    a83a:	4603      	mov	r3, r0
    a83c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a83e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a842:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a844:	79fb      	ldrb	r3, [r7, #7]
    a846:	f003 030f 	and.w	r3, r3, #15
    a84a:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a84c:	79fb      	ldrb	r3, [r7, #7]
    a84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a852:	2b00      	cmp	r3, #0
    a854:	bf14      	ite	ne
    a856:	2301      	movne	r3, #1
    a858:	2300      	moveq	r3, #0
    a85a:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a85c:	7eba      	ldrb	r2, [r7, #26]
    a85e:	7efb      	ldrb	r3, [r7, #27]
    a860:	4611      	mov	r1, r2
    a862:	4618      	mov	r0, r3
    a864:	4b70      	ldr	r3, [pc, #448]	; (aa28 <_usb_d_dev_ep_enable+0x1f4>)
    a866:	4798      	blx	r3
    a868:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a86a:	7efb      	ldrb	r3, [r7, #27]
    a86c:	4619      	mov	r1, r3
    a86e:	69f8      	ldr	r0, [r7, #28]
    a870:	4b6e      	ldr	r3, [pc, #440]	; (aa2c <_usb_d_dev_ep_enable+0x1f8>)
    a872:	4798      	blx	r3
    a874:	4603      	mov	r3, r0
    a876:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a878:	7efb      	ldrb	r3, [r7, #27]
    a87a:	2b04      	cmp	r3, #4
    a87c:	d803      	bhi.n	a886 <_usb_d_dev_ep_enable+0x52>
    a87e:	697b      	ldr	r3, [r7, #20]
    a880:	7c9b      	ldrb	r3, [r3, #18]
    a882:	2bff      	cmp	r3, #255	; 0xff
    a884:	d102      	bne.n	a88c <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a886:	f06f 0311 	mvn.w	r3, #17
    a88a:	e0c8      	b.n	aa1e <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a88c:	7efb      	ldrb	r3, [r7, #27]
    a88e:	015b      	lsls	r3, r3, #5
    a890:	4a67      	ldr	r2, [pc, #412]	; (aa30 <_usb_d_dev_ep_enable+0x1fc>)
    a892:	4413      	add	r3, r2
    a894:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a896:	697b      	ldr	r3, [r7, #20]
    a898:	7cdb      	ldrb	r3, [r3, #19]
    a89a:	f003 0307 	and.w	r3, r3, #7
    a89e:	b2db      	uxtb	r3, r3
    a8a0:	2b01      	cmp	r3, #1
    a8a2:	d14b      	bne.n	a93c <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a8a4:	7cfb      	ldrb	r3, [r7, #19]
    a8a6:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a8aa:	2b00      	cmp	r3, #0
    a8ac:	d002      	beq.n	a8b4 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a8ae:	f06f 0313 	mvn.w	r3, #19
    a8b2:	e0b4      	b.n	aa1e <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a8b4:	7efb      	ldrb	r3, [r7, #27]
    a8b6:	2211      	movs	r2, #17
    a8b8:	4619      	mov	r1, r3
    a8ba:	69f8      	ldr	r0, [r7, #28]
    a8bc:	4b5d      	ldr	r3, [pc, #372]	; (aa34 <_usb_d_dev_ep_enable+0x200>)
    a8be:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a8c0:	697b      	ldr	r3, [r7, #20]
    a8c2:	8a1b      	ldrh	r3, [r3, #16]
    a8c4:	039b      	lsls	r3, r3, #14
    a8c6:	4c5c      	ldr	r4, [pc, #368]	; (aa38 <_usb_d_dev_ep_enable+0x204>)
    a8c8:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a8ca:	697b      	ldr	r3, [r7, #20]
    a8cc:	8a1b      	ldrh	r3, [r3, #16]
    a8ce:	4618      	mov	r0, r3
    a8d0:	4b5a      	ldr	r3, [pc, #360]	; (aa3c <_usb_d_dev_ep_enable+0x208>)
    a8d2:	4798      	blx	r3
    a8d4:	4603      	mov	r3, r0
    a8d6:	071b      	lsls	r3, r3, #28
    a8d8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a8dc:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a8e0:	68fb      	ldr	r3, [r7, #12]
    a8e2:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a8e4:	68fb      	ldr	r3, [r7, #12]
    a8e6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a8ea:	697b      	ldr	r3, [r7, #20]
    a8ec:	8a1b      	ldrh	r3, [r3, #16]
    a8ee:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a8f2:	697b      	ldr	r3, [r7, #20]
    a8f4:	8a1b      	ldrh	r3, [r3, #16]
    a8f6:	4618      	mov	r0, r3
    a8f8:	4b50      	ldr	r3, [pc, #320]	; (aa3c <_usb_d_dev_ep_enable+0x208>)
    a8fa:	4798      	blx	r3
    a8fc:	4603      	mov	r3, r0
    a8fe:	071b      	lsls	r3, r3, #28
    a900:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a904:	432b      	orrs	r3, r5
    a906:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a908:	7efb      	ldrb	r3, [r7, #27]
    a90a:	2200      	movs	r2, #0
    a90c:	2100      	movs	r1, #0
    a90e:	4618      	mov	r0, r3
    a910:	4b4b      	ldr	r3, [pc, #300]	; (aa40 <_usb_d_dev_ep_enable+0x20c>)
    a912:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a914:	7efb      	ldrb	r3, [r7, #27]
    a916:	2200      	movs	r2, #0
    a918:	2101      	movs	r1, #1
    a91a:	4618      	mov	r0, r3
    a91c:	4b49      	ldr	r3, [pc, #292]	; (aa44 <_usb_d_dev_ep_enable+0x210>)
    a91e:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a920:	7efb      	ldrb	r3, [r7, #27]
    a922:	2100      	movs	r1, #0
    a924:	4618      	mov	r0, r3
    a926:	4b48      	ldr	r3, [pc, #288]	; (aa48 <_usb_d_dev_ep_enable+0x214>)
    a928:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a92a:	7efb      	ldrb	r3, [r7, #27]
    a92c:	2101      	movs	r1, #1
    a92e:	4618      	mov	r0, r3
    a930:	4b45      	ldr	r3, [pc, #276]	; (aa48 <_usb_d_dev_ep_enable+0x214>)
    a932:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a934:	6978      	ldr	r0, [r7, #20]
    a936:	4b45      	ldr	r3, [pc, #276]	; (aa4c <_usb_d_dev_ep_enable+0x218>)
    a938:	4798      	blx	r3
    a93a:	e06f      	b.n	aa1c <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a93c:	7ebb      	ldrb	r3, [r7, #26]
    a93e:	2b00      	cmp	r3, #0
    a940:	d038      	beq.n	a9b4 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a942:	7cfb      	ldrb	r3, [r7, #19]
    a944:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a948:	2b00      	cmp	r3, #0
    a94a:	d002      	beq.n	a952 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a94c:	f06f 0313 	mvn.w	r3, #19
    a950:	e065      	b.n	aa1e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a952:	697b      	ldr	r3, [r7, #20]
    a954:	7cdb      	ldrb	r3, [r3, #19]
    a956:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a95a:	b2db      	uxtb	r3, r3
    a95c:	011b      	lsls	r3, r3, #4
    a95e:	b2db      	uxtb	r3, r3
    a960:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a964:	b2da      	uxtb	r2, r3
    a966:	7cfb      	ldrb	r3, [r7, #19]
    a968:	4313      	orrs	r3, r2
    a96a:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a96c:	7cfa      	ldrb	r2, [r7, #19]
    a96e:	7efb      	ldrb	r3, [r7, #27]
    a970:	4619      	mov	r1, r3
    a972:	69f8      	ldr	r0, [r7, #28]
    a974:	4b2f      	ldr	r3, [pc, #188]	; (aa34 <_usb_d_dev_ep_enable+0x200>)
    a976:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a978:	68fb      	ldr	r3, [r7, #12]
    a97a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a97e:	697b      	ldr	r3, [r7, #20]
    a980:	8a1b      	ldrh	r3, [r3, #16]
    a982:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a986:	697b      	ldr	r3, [r7, #20]
    a988:	8a1b      	ldrh	r3, [r3, #16]
    a98a:	4618      	mov	r0, r3
    a98c:	4b2b      	ldr	r3, [pc, #172]	; (aa3c <_usb_d_dev_ep_enable+0x208>)
    a98e:	4798      	blx	r3
    a990:	4603      	mov	r3, r0
    a992:	071b      	lsls	r3, r3, #28
    a994:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a998:	432b      	orrs	r3, r5
    a99a:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a99c:	7efb      	ldrb	r3, [r7, #27]
    a99e:	2200      	movs	r2, #0
    a9a0:	2101      	movs	r1, #1
    a9a2:	4618      	mov	r0, r3
    a9a4:	4b27      	ldr	r3, [pc, #156]	; (aa44 <_usb_d_dev_ep_enable+0x210>)
    a9a6:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a9a8:	7efb      	ldrb	r3, [r7, #27]
    a9aa:	2101      	movs	r1, #1
    a9ac:	4618      	mov	r0, r3
    a9ae:	4b26      	ldr	r3, [pc, #152]	; (aa48 <_usb_d_dev_ep_enable+0x214>)
    a9b0:	4798      	blx	r3
    a9b2:	e033      	b.n	aa1c <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a9b4:	7cfb      	ldrb	r3, [r7, #19]
    a9b6:	f003 0307 	and.w	r3, r3, #7
    a9ba:	2b00      	cmp	r3, #0
    a9bc:	d002      	beq.n	a9c4 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a9be:	f06f 0313 	mvn.w	r3, #19
    a9c2:	e02c      	b.n	aa1e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a9c4:	697b      	ldr	r3, [r7, #20]
    a9c6:	7cdb      	ldrb	r3, [r3, #19]
    a9c8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a9cc:	b2db      	uxtb	r3, r3
    a9ce:	461a      	mov	r2, r3
    a9d0:	7cfb      	ldrb	r3, [r7, #19]
    a9d2:	4313      	orrs	r3, r2
    a9d4:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a9d6:	7cfa      	ldrb	r2, [r7, #19]
    a9d8:	7efb      	ldrb	r3, [r7, #27]
    a9da:	4619      	mov	r1, r3
    a9dc:	69f8      	ldr	r0, [r7, #28]
    a9de:	4b15      	ldr	r3, [pc, #84]	; (aa34 <_usb_d_dev_ep_enable+0x200>)
    a9e0:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a9e2:	697b      	ldr	r3, [r7, #20]
    a9e4:	8a1b      	ldrh	r3, [r3, #16]
    a9e6:	039b      	lsls	r3, r3, #14
    a9e8:	4c13      	ldr	r4, [pc, #76]	; (aa38 <_usb_d_dev_ep_enable+0x204>)
    a9ea:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a9ec:	697b      	ldr	r3, [r7, #20]
    a9ee:	8a1b      	ldrh	r3, [r3, #16]
    a9f0:	4618      	mov	r0, r3
    a9f2:	4b12      	ldr	r3, [pc, #72]	; (aa3c <_usb_d_dev_ep_enable+0x208>)
    a9f4:	4798      	blx	r3
    a9f6:	4603      	mov	r3, r0
    a9f8:	071b      	lsls	r3, r3, #28
    a9fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a9fe:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aa02:	68fb      	ldr	r3, [r7, #12]
    aa04:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    aa06:	7efb      	ldrb	r3, [r7, #27]
    aa08:	2200      	movs	r2, #0
    aa0a:	2100      	movs	r1, #0
    aa0c:	4618      	mov	r0, r3
    aa0e:	4b0c      	ldr	r3, [pc, #48]	; (aa40 <_usb_d_dev_ep_enable+0x20c>)
    aa10:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    aa12:	7efb      	ldrb	r3, [r7, #27]
    aa14:	2100      	movs	r1, #0
    aa16:	4618      	mov	r0, r3
    aa18:	4b0b      	ldr	r3, [pc, #44]	; (aa48 <_usb_d_dev_ep_enable+0x214>)
    aa1a:	4798      	blx	r3
	}

	return USB_OK;
    aa1c:	2300      	movs	r3, #0
}
    aa1e:	4618      	mov	r0, r3
    aa20:	3720      	adds	r7, #32
    aa22:	46bd      	mov	sp, r7
    aa24:	bdb0      	pop	{r4, r5, r7, pc}
    aa26:	bf00      	nop
    aa28:	0000964d 	.word	0x0000964d
    aa2c:	00008cd3 	.word	0x00008cd3
    aa30:	200024e0 	.word	0x200024e0
    aa34:	00008ca9 	.word	0x00008ca9
    aa38:	0fffc000 	.word	0x0fffc000
    aa3c:	000095e9 	.word	0x000095e9
    aa40:	00009591 	.word	0x00009591
    aa44:	00009539 	.word	0x00009539
    aa48:	00009501 	.word	0x00009501
    aa4c:	0000a5a5 	.word	0x0000a5a5

0000aa50 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    aa50:	b580      	push	{r7, lr}
    aa52:	b084      	sub	sp, #16
    aa54:	af00      	add	r7, sp, #0
    aa56:	6078      	str	r0, [r7, #4]
    aa58:	460b      	mov	r3, r1
    aa5a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aa5c:	687b      	ldr	r3, [r7, #4]
    aa5e:	7c9b      	ldrb	r3, [r3, #18]
    aa60:	f003 030f 	and.w	r3, r3, #15
    aa64:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    aa66:	78fa      	ldrb	r2, [r7, #3]
    aa68:	7bfb      	ldrb	r3, [r7, #15]
    aa6a:	4611      	mov	r1, r2
    aa6c:	4618      	mov	r0, r3
    aa6e:	4b03      	ldr	r3, [pc, #12]	; (aa7c <_usb_d_dev_ep_stall_get+0x2c>)
    aa70:	4798      	blx	r3
    aa72:	4603      	mov	r3, r0
}
    aa74:	4618      	mov	r0, r3
    aa76:	3710      	adds	r7, #16
    aa78:	46bd      	mov	sp, r7
    aa7a:	bd80      	pop	{r7, pc}
    aa7c:	00009141 	.word	0x00009141

0000aa80 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    aa80:	b580      	push	{r7, lr}
    aa82:	b084      	sub	sp, #16
    aa84:	af00      	add	r7, sp, #0
    aa86:	6078      	str	r0, [r7, #4]
    aa88:	460b      	mov	r3, r1
    aa8a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aa8c:	687b      	ldr	r3, [r7, #4]
    aa8e:	7c9b      	ldrb	r3, [r3, #18]
    aa90:	f003 030f 	and.w	r3, r3, #15
    aa94:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    aa96:	78f9      	ldrb	r1, [r7, #3]
    aa98:	7bfb      	ldrb	r3, [r7, #15]
    aa9a:	2201      	movs	r2, #1
    aa9c:	4618      	mov	r0, r3
    aa9e:	4b0a      	ldr	r3, [pc, #40]	; (aac8 <_usb_d_dev_ep_stall_set+0x48>)
    aaa0:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    aaa2:	78fb      	ldrb	r3, [r7, #3]
    aaa4:	2220      	movs	r2, #32
    aaa6:	409a      	lsls	r2, r3
    aaa8:	7bfb      	ldrb	r3, [r7, #15]
    aaaa:	4611      	mov	r1, r2
    aaac:	4618      	mov	r0, r3
    aaae:	4b07      	ldr	r3, [pc, #28]	; (aacc <_usb_d_dev_ep_stall_set+0x4c>)
    aab0:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    aab2:	687a      	ldr	r2, [r7, #4]
    aab4:	7cd3      	ldrb	r3, [r2, #19]
    aab6:	f043 0308 	orr.w	r3, r3, #8
    aaba:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    aabc:	2300      	movs	r3, #0
}
    aabe:	4618      	mov	r0, r3
    aac0:	3710      	adds	r7, #16
    aac2:	46bd      	mov	sp, r7
    aac4:	bd80      	pop	{r7, pc}
    aac6:	bf00      	nop
    aac8:	000090e9 	.word	0x000090e9
    aacc:	00009069 	.word	0x00009069

0000aad0 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    aad0:	b580      	push	{r7, lr}
    aad2:	b084      	sub	sp, #16
    aad4:	af00      	add	r7, sp, #0
    aad6:	6078      	str	r0, [r7, #4]
    aad8:	460b      	mov	r3, r1
    aada:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    aadc:	687b      	ldr	r3, [r7, #4]
    aade:	7c9b      	ldrb	r3, [r3, #18]
    aae0:	f003 030f 	and.w	r3, r3, #15
    aae4:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    aae6:	78fa      	ldrb	r2, [r7, #3]
    aae8:	7bfb      	ldrb	r3, [r7, #15]
    aaea:	4611      	mov	r1, r2
    aaec:	4618      	mov	r0, r3
    aaee:	4b28      	ldr	r3, [pc, #160]	; (ab90 <_usb_d_dev_ep_stall_clr+0xc0>)
    aaf0:	4798      	blx	r3
    aaf2:	4603      	mov	r3, r0
    aaf4:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    aaf6:	7bbb      	ldrb	r3, [r7, #14]
    aaf8:	f083 0301 	eor.w	r3, r3, #1
    aafc:	b2db      	uxtb	r3, r3
    aafe:	2b00      	cmp	r3, #0
    ab00:	d001      	beq.n	ab06 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    ab02:	2300      	movs	r3, #0
    ab04:	e040      	b.n	ab88 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    ab06:	78f9      	ldrb	r1, [r7, #3]
    ab08:	7bfb      	ldrb	r3, [r7, #15]
    ab0a:	2200      	movs	r2, #0
    ab0c:	4618      	mov	r0, r3
    ab0e:	4b21      	ldr	r3, [pc, #132]	; (ab94 <_usb_d_dev_ep_stall_clr+0xc4>)
    ab10:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    ab12:	78fb      	ldrb	r3, [r7, #3]
    ab14:	2220      	movs	r2, #32
    ab16:	409a      	lsls	r2, r3
    ab18:	7bfb      	ldrb	r3, [r7, #15]
    ab1a:	4611      	mov	r1, r2
    ab1c:	4618      	mov	r0, r3
    ab1e:	4b1e      	ldr	r3, [pc, #120]	; (ab98 <_usb_d_dev_ep_stall_clr+0xc8>)
    ab20:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    ab22:	78fa      	ldrb	r2, [r7, #3]
    ab24:	7bfb      	ldrb	r3, [r7, #15]
    ab26:	4611      	mov	r1, r2
    ab28:	4618      	mov	r0, r3
    ab2a:	4b1c      	ldr	r3, [pc, #112]	; (ab9c <_usb_d_dev_ep_stall_clr+0xcc>)
    ab2c:	4798      	blx	r3
    ab2e:	4603      	mov	r3, r0
    ab30:	2b00      	cmp	r3, #0
    ab32:	d00b      	beq.n	ab4c <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    ab34:	78fa      	ldrb	r2, [r7, #3]
    ab36:	7bfb      	ldrb	r3, [r7, #15]
    ab38:	4611      	mov	r1, r2
    ab3a:	4618      	mov	r0, r3
    ab3c:	4b18      	ldr	r3, [pc, #96]	; (aba0 <_usb_d_dev_ep_stall_clr+0xd0>)
    ab3e:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    ab40:	78f9      	ldrb	r1, [r7, #3]
    ab42:	7bfb      	ldrb	r3, [r7, #15]
    ab44:	2200      	movs	r2, #0
    ab46:	4618      	mov	r0, r3
    ab48:	4b16      	ldr	r3, [pc, #88]	; (aba4 <_usb_d_dev_ep_stall_clr+0xd4>)
    ab4a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ab4c:	687b      	ldr	r3, [r7, #4]
    ab4e:	7cdb      	ldrb	r3, [r3, #19]
    ab50:	f003 0307 	and.w	r3, r3, #7
    ab54:	b2db      	uxtb	r3, r3
    ab56:	2b01      	cmp	r3, #1
    ab58:	d110      	bne.n	ab7c <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    ab5a:	7bfb      	ldrb	r3, [r7, #15]
    ab5c:	4619      	mov	r1, r3
    ab5e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ab62:	4b11      	ldr	r3, [pc, #68]	; (aba8 <_usb_d_dev_ep_stall_clr+0xd8>)
    ab64:	4798      	blx	r3
    ab66:	4603      	mov	r3, r0
    ab68:	f003 0330 	and.w	r3, r3, #48	; 0x30
    ab6c:	2b00      	cmp	r3, #0
    ab6e:	d10a      	bne.n	ab86 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    ab70:	687a      	ldr	r2, [r7, #4]
    ab72:	7cd3      	ldrb	r3, [r2, #19]
    ab74:	f36f 03c3 	bfc	r3, #3, #1
    ab78:	74d3      	strb	r3, [r2, #19]
    ab7a:	e004      	b.n	ab86 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    ab7c:	687a      	ldr	r2, [r7, #4]
    ab7e:	7cd3      	ldrb	r3, [r2, #19]
    ab80:	f36f 03c3 	bfc	r3, #3, #1
    ab84:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    ab86:	2300      	movs	r3, #0
}
    ab88:	4618      	mov	r0, r3
    ab8a:	3710      	adds	r7, #16
    ab8c:	46bd      	mov	sp, r7
    ab8e:	bd80      	pop	{r7, pc}
    ab90:	00009141 	.word	0x00009141
    ab94:	000090e9 	.word	0x000090e9
    ab98:	00009091 	.word	0x00009091
    ab9c:	00009185 	.word	0x00009185
    aba0:	000091c9 	.word	0x000091c9
    aba4:	000092b5 	.word	0x000092b5
    aba8:	00008b71 	.word	0x00008b71

0000abac <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    abac:	b580      	push	{r7, lr}
    abae:	b086      	sub	sp, #24
    abb0:	af00      	add	r7, sp, #0
    abb2:	4603      	mov	r3, r0
    abb4:	460a      	mov	r2, r1
    abb6:	71fb      	strb	r3, [r7, #7]
    abb8:	4613      	mov	r3, r2
    abba:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    abbc:	79fb      	ldrb	r3, [r7, #7]
    abbe:	f003 030f 	and.w	r3, r3, #15
    abc2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    abc4:	79fb      	ldrb	r3, [r7, #7]
    abc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    abca:	2b00      	cmp	r3, #0
    abcc:	bf14      	ite	ne
    abce:	2301      	movne	r3, #1
    abd0:	2300      	moveq	r3, #0
    abd2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    abd4:	7cba      	ldrb	r2, [r7, #18]
    abd6:	7cfb      	ldrb	r3, [r7, #19]
    abd8:	4611      	mov	r1, r2
    abda:	4618      	mov	r0, r3
    abdc:	4b13      	ldr	r3, [pc, #76]	; (ac2c <_usb_d_dev_ep_stall+0x80>)
    abde:	4798      	blx	r3
    abe0:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    abe2:	7cfb      	ldrb	r3, [r7, #19]
    abe4:	2b04      	cmp	r3, #4
    abe6:	d902      	bls.n	abee <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    abe8:	f06f 0311 	mvn.w	r3, #17
    abec:	e01a      	b.n	ac24 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    abee:	79bb      	ldrb	r3, [r7, #6]
    abf0:	2b01      	cmp	r3, #1
    abf2:	d106      	bne.n	ac02 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    abf4:	7cbb      	ldrb	r3, [r7, #18]
    abf6:	4619      	mov	r1, r3
    abf8:	68f8      	ldr	r0, [r7, #12]
    abfa:	4b0d      	ldr	r3, [pc, #52]	; (ac30 <_usb_d_dev_ep_stall+0x84>)
    abfc:	4798      	blx	r3
    abfe:	6178      	str	r0, [r7, #20]
    ac00:	e00f      	b.n	ac22 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    ac02:	79bb      	ldrb	r3, [r7, #6]
    ac04:	2b00      	cmp	r3, #0
    ac06:	d106      	bne.n	ac16 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    ac08:	7cbb      	ldrb	r3, [r7, #18]
    ac0a:	4619      	mov	r1, r3
    ac0c:	68f8      	ldr	r0, [r7, #12]
    ac0e:	4b09      	ldr	r3, [pc, #36]	; (ac34 <_usb_d_dev_ep_stall+0x88>)
    ac10:	4798      	blx	r3
    ac12:	6178      	str	r0, [r7, #20]
    ac14:	e005      	b.n	ac22 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    ac16:	7cbb      	ldrb	r3, [r7, #18]
    ac18:	4619      	mov	r1, r3
    ac1a:	68f8      	ldr	r0, [r7, #12]
    ac1c:	4b06      	ldr	r3, [pc, #24]	; (ac38 <_usb_d_dev_ep_stall+0x8c>)
    ac1e:	4798      	blx	r3
    ac20:	6178      	str	r0, [r7, #20]
	}
	return rc;
    ac22:	697b      	ldr	r3, [r7, #20]
}
    ac24:	4618      	mov	r0, r3
    ac26:	3718      	adds	r7, #24
    ac28:	46bd      	mov	sp, r7
    ac2a:	bd80      	pop	{r7, pc}
    ac2c:	0000964d 	.word	0x0000964d
    ac30:	0000aa81 	.word	0x0000aa81
    ac34:	0000aad1 	.word	0x0000aad1
    ac38:	0000aa51 	.word	0x0000aa51

0000ac3c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    ac3c:	b580      	push	{r7, lr}
    ac3e:	b082      	sub	sp, #8
    ac40:	af00      	add	r7, sp, #0
    ac42:	6078      	str	r0, [r7, #4]
    ac44:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	7c9b      	ldrb	r3, [r3, #18]
    ac4a:	2bff      	cmp	r3, #255	; 0xff
    ac4c:	d014      	beq.n	ac78 <_usb_d_dev_trans_done+0x3c>
    ac4e:	687b      	ldr	r3, [r7, #4]
    ac50:	7cdb      	ldrb	r3, [r3, #19]
    ac52:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ac56:	b2db      	uxtb	r3, r3
    ac58:	2b00      	cmp	r3, #0
    ac5a:	d00d      	beq.n	ac78 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    ac5c:	687a      	ldr	r2, [r7, #4]
    ac5e:	7cd3      	ldrb	r3, [r2, #19]
    ac60:	f36f 1386 	bfc	r3, #6, #1
    ac64:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    ac66:	4b06      	ldr	r3, [pc, #24]	; (ac80 <_usb_d_dev_trans_done+0x44>)
    ac68:	691b      	ldr	r3, [r3, #16]
    ac6a:	687a      	ldr	r2, [r7, #4]
    ac6c:	7c90      	ldrb	r0, [r2, #18]
    ac6e:	687a      	ldr	r2, [r7, #4]
    ac70:	6892      	ldr	r2, [r2, #8]
    ac72:	6839      	ldr	r1, [r7, #0]
    ac74:	4798      	blx	r3
    ac76:	e000      	b.n	ac7a <_usb_d_dev_trans_done+0x3e>
		return;
    ac78:	bf00      	nop
}
    ac7a:	3708      	adds	r7, #8
    ac7c:	46bd      	mov	sp, r7
    ac7e:	bd80      	pop	{r7, pc}
    ac80:	20002418 	.word	0x20002418

0000ac84 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    ac84:	b580      	push	{r7, lr}
    ac86:	b086      	sub	sp, #24
    ac88:	af00      	add	r7, sp, #0
    ac8a:	60f8      	str	r0, [r7, #12]
    ac8c:	460b      	mov	r3, r1
    ac8e:	607a      	str	r2, [r7, #4]
    ac90:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ac92:	68fb      	ldr	r3, [r7, #12]
    ac94:	7c9b      	ldrb	r3, [r3, #18]
    ac96:	f003 030f 	and.w	r3, r3, #15
    ac9a:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    ac9c:	4b1f      	ldr	r3, [pc, #124]	; (ad1c <_usb_d_dev_trans_stop+0x98>)
    ac9e:	881b      	ldrh	r3, [r3, #0]
    aca0:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    aca2:	68fb      	ldr	r3, [r7, #12]
    aca4:	7c9b      	ldrb	r3, [r3, #18]
    aca6:	2bff      	cmp	r3, #255	; 0xff
    aca8:	d033      	beq.n	ad12 <_usb_d_dev_trans_stop+0x8e>
    acaa:	68fb      	ldr	r3, [r7, #12]
    acac:	7cdb      	ldrb	r3, [r3, #19]
    acae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    acb2:	b2db      	uxtb	r3, r3
    acb4:	2b00      	cmp	r3, #0
    acb6:	d02c      	beq.n	ad12 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    acb8:	7afb      	ldrb	r3, [r7, #11]
    acba:	2b00      	cmp	r3, #0
    acbc:	d006      	beq.n	accc <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    acbe:	7dfb      	ldrb	r3, [r7, #23]
    acc0:	2200      	movs	r2, #0
    acc2:	2101      	movs	r1, #1
    acc4:	4618      	mov	r0, r3
    acc6:	4b16      	ldr	r3, [pc, #88]	; (ad20 <_usb_d_dev_trans_stop+0x9c>)
    acc8:	4798      	blx	r3
    acca:	e005      	b.n	acd8 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    accc:	7dfb      	ldrb	r3, [r7, #23]
    acce:	2200      	movs	r2, #0
    acd0:	2100      	movs	r1, #0
    acd2:	4618      	mov	r0, r3
    acd4:	4b13      	ldr	r3, [pc, #76]	; (ad24 <_usb_d_dev_trans_stop+0xa0>)
    acd6:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    acd8:	7afb      	ldrb	r3, [r7, #11]
    acda:	f107 0218 	add.w	r2, r7, #24
    acde:	4413      	add	r3, r2
    ace0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    ace4:	461a      	mov	r2, r3
    ace6:	7dfb      	ldrb	r3, [r7, #23]
    ace8:	4611      	mov	r1, r2
    acea:	4618      	mov	r0, r3
    acec:	4b0e      	ldr	r3, [pc, #56]	; (ad28 <_usb_d_dev_trans_stop+0xa4>)
    acee:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    acf0:	7afb      	ldrb	r3, [r7, #11]
    acf2:	f107 0218 	add.w	r2, r7, #24
    acf6:	4413      	add	r3, r2
    acf8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    acfc:	461a      	mov	r2, r3
    acfe:	7dfb      	ldrb	r3, [r7, #23]
    ad00:	4611      	mov	r1, r2
    ad02:	4618      	mov	r0, r3
    ad04:	4b09      	ldr	r3, [pc, #36]	; (ad2c <_usb_d_dev_trans_stop+0xa8>)
    ad06:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    ad08:	6879      	ldr	r1, [r7, #4]
    ad0a:	68f8      	ldr	r0, [r7, #12]
    ad0c:	4b08      	ldr	r3, [pc, #32]	; (ad30 <_usb_d_dev_trans_stop+0xac>)
    ad0e:	4798      	blx	r3
    ad10:	e000      	b.n	ad14 <_usb_d_dev_trans_stop+0x90>
		return;
    ad12:	bf00      	nop
}
    ad14:	3718      	adds	r7, #24
    ad16:	46bd      	mov	sp, r7
    ad18:	bd80      	pop	{r7, pc}
    ad1a:	bf00      	nop
    ad1c:	00010ad4 	.word	0x00010ad4
    ad20:	00009539 	.word	0x00009539
    ad24:	00009591 	.word	0x00009591
    ad28:	00009041 	.word	0x00009041
    ad2c:	00009091 	.word	0x00009091
    ad30:	0000ac3d 	.word	0x0000ac3d

0000ad34 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    ad34:	b580      	push	{r7, lr}
    ad36:	b086      	sub	sp, #24
    ad38:	af00      	add	r7, sp, #0
    ad3a:	4603      	mov	r3, r0
    ad3c:	6039      	str	r1, [r7, #0]
    ad3e:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    ad40:	79fb      	ldrb	r3, [r7, #7]
    ad42:	f003 030f 	and.w	r3, r3, #15
    ad46:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    ad48:	7dfb      	ldrb	r3, [r7, #23]
    ad4a:	015b      	lsls	r3, r3, #5
    ad4c:	4a1e      	ldr	r2, [pc, #120]	; (adc8 <_usb_d_dev_ep_read_req+0x94>)
    ad4e:	4413      	add	r3, r2
    ad50:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    ad52:	693b      	ldr	r3, [r7, #16]
    ad54:	681b      	ldr	r3, [r3, #0]
    ad56:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    ad58:	693b      	ldr	r3, [r7, #16]
    ad5a:	685b      	ldr	r3, [r3, #4]
    ad5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ad60:	b29b      	uxth	r3, r3
    ad62:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    ad64:	7dfb      	ldrb	r3, [r7, #23]
    ad66:	2b04      	cmp	r3, #4
    ad68:	d802      	bhi.n	ad70 <_usb_d_dev_ep_read_req+0x3c>
    ad6a:	683b      	ldr	r3, [r7, #0]
    ad6c:	2b00      	cmp	r3, #0
    ad6e:	d102      	bne.n	ad76 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    ad70:	f06f 0311 	mvn.w	r3, #17
    ad74:	e023      	b.n	adbe <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    ad76:	7dfb      	ldrb	r3, [r7, #23]
    ad78:	4618      	mov	r0, r3
    ad7a:	4b14      	ldr	r3, [pc, #80]	; (adcc <_usb_d_dev_ep_read_req+0x98>)
    ad7c:	4798      	blx	r3
    ad7e:	4603      	mov	r3, r0
    ad80:	f083 0301 	eor.w	r3, r3, #1
    ad84:	b2db      	uxtb	r3, r3
    ad86:	2b00      	cmp	r3, #0
    ad88:	d002      	beq.n	ad90 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    ad8a:	f06f 0312 	mvn.w	r3, #18
    ad8e:	e016      	b.n	adbe <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    ad90:	7dfb      	ldrb	r3, [r7, #23]
    ad92:	4618      	mov	r0, r3
    ad94:	4b0e      	ldr	r3, [pc, #56]	; (add0 <_usb_d_dev_ep_read_req+0x9c>)
    ad96:	4798      	blx	r3
    ad98:	4603      	mov	r3, r0
    ad9a:	f083 0301 	eor.w	r3, r3, #1
    ad9e:	b2db      	uxtb	r3, r3
    ada0:	2b00      	cmp	r3, #0
    ada2:	d001      	beq.n	ada8 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    ada4:	2300      	movs	r3, #0
    ada6:	e00a      	b.n	adbe <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    ada8:	68fb      	ldr	r3, [r7, #12]
    adaa:	2208      	movs	r2, #8
    adac:	4619      	mov	r1, r3
    adae:	6838      	ldr	r0, [r7, #0]
    adb0:	4b08      	ldr	r3, [pc, #32]	; (add4 <_usb_d_dev_ep_read_req+0xa0>)
    adb2:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    adb4:	7dfb      	ldrb	r3, [r7, #23]
    adb6:	4618      	mov	r0, r3
    adb8:	4b07      	ldr	r3, [pc, #28]	; (add8 <_usb_d_dev_ep_read_req+0xa4>)
    adba:	4798      	blx	r3

	return bytes;
    adbc:	897b      	ldrh	r3, [r7, #10]
}
    adbe:	4618      	mov	r0, r3
    adc0:	3718      	adds	r7, #24
    adc2:	46bd      	mov	sp, r7
    adc4:	bd80      	pop	{r7, pc}
    adc6:	bf00      	nop
    adc8:	200024e0 	.word	0x200024e0
    adcc:	000090b9 	.word	0x000090b9
    add0:	00009265 	.word	0x00009265
    add4:	0001030d 	.word	0x0001030d
    add8:	00009295 	.word	0x00009295

0000addc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    addc:	b580      	push	{r7, lr}
    adde:	b086      	sub	sp, #24
    ade0:	af00      	add	r7, sp, #0
    ade2:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ade4:	687b      	ldr	r3, [r7, #4]
    ade6:	7a1b      	ldrb	r3, [r3, #8]
    ade8:	f003 030f 	and.w	r3, r3, #15
    adec:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    adee:	687b      	ldr	r3, [r7, #4]
    adf0:	7a1b      	ldrb	r3, [r3, #8]
    adf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    adf6:	2b00      	cmp	r3, #0
    adf8:	bf14      	ite	ne
    adfa:	2301      	movne	r3, #1
    adfc:	2300      	moveq	r3, #0
    adfe:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ae00:	7d7a      	ldrb	r2, [r7, #21]
    ae02:	7dbb      	ldrb	r3, [r7, #22]
    ae04:	4611      	mov	r1, r2
    ae06:	4618      	mov	r0, r3
    ae08:	4b5f      	ldr	r3, [pc, #380]	; (af88 <_usb_d_dev_ep_trans+0x1ac>)
    ae0a:	4798      	blx	r3
    ae0c:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ae0e:	693b      	ldr	r3, [r7, #16]
    ae10:	8a1b      	ldrh	r3, [r3, #16]
    ae12:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ae16:	4293      	cmp	r3, r2
    ae18:	d004      	beq.n	ae24 <_usb_d_dev_ep_trans+0x48>
    ae1a:	693b      	ldr	r3, [r7, #16]
    ae1c:	8a1b      	ldrh	r3, [r3, #16]
    ae1e:	3b01      	subs	r3, #1
    ae20:	b29b      	uxth	r3, r3
    ae22:	e001      	b.n	ae28 <_usb_d_dev_ep_trans+0x4c>
    ae24:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ae28:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    ae2a:	687b      	ldr	r3, [r7, #4]
    ae2c:	685a      	ldr	r2, [r3, #4]
    ae2e:	89fb      	ldrh	r3, [r7, #14]
    ae30:	4013      	ands	r3, r2
    ae32:	2b00      	cmp	r3, #0
    ae34:	bf14      	ite	ne
    ae36:	2301      	movne	r3, #1
    ae38:	2300      	moveq	r3, #0
    ae3a:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    ae3c:	2300      	movs	r3, #0
    ae3e:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ae40:	7dbb      	ldrb	r3, [r7, #22]
    ae42:	2b04      	cmp	r3, #4
    ae44:	d902      	bls.n	ae4c <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    ae46:	f06f 0311 	mvn.w	r3, #17
    ae4a:	e098      	b.n	af7e <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    ae4c:	687b      	ldr	r3, [r7, #4]
    ae4e:	681b      	ldr	r3, [r3, #0]
    ae50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ae54:	d31a      	bcc.n	ae8c <_usb_d_dev_ep_trans+0xb0>
    ae56:	687b      	ldr	r3, [r7, #4]
    ae58:	681b      	ldr	r3, [r3, #0]
    ae5a:	461a      	mov	r2, r3
    ae5c:	687b      	ldr	r3, [r7, #4]
    ae5e:	685b      	ldr	r3, [r3, #4]
    ae60:	4413      	add	r3, r2
    ae62:	4a4a      	ldr	r2, [pc, #296]	; (af8c <_usb_d_dev_ep_trans+0x1b0>)
    ae64:	4293      	cmp	r3, r2
    ae66:	d811      	bhi.n	ae8c <_usb_d_dev_ep_trans+0xb0>
    ae68:	687b      	ldr	r3, [r7, #4]
    ae6a:	681b      	ldr	r3, [r3, #0]
    ae6c:	f003 0303 	and.w	r3, r3, #3
    ae70:	2b00      	cmp	r3, #0
    ae72:	d10b      	bne.n	ae8c <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    ae74:	7d7b      	ldrb	r3, [r7, #21]
    ae76:	f083 0301 	eor.w	r3, r3, #1
    ae7a:	b2db      	uxtb	r3, r3
    ae7c:	2b00      	cmp	r3, #0
    ae7e:	d00e      	beq.n	ae9e <_usb_d_dev_ep_trans+0xc2>
    ae80:	687b      	ldr	r3, [r7, #4]
    ae82:	685b      	ldr	r3, [r3, #4]
    ae84:	693a      	ldr	r2, [r7, #16]
    ae86:	8a12      	ldrh	r2, [r2, #16]
    ae88:	4293      	cmp	r3, r2
    ae8a:	d208      	bcs.n	ae9e <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    ae8c:	693b      	ldr	r3, [r7, #16]
    ae8e:	68db      	ldr	r3, [r3, #12]
    ae90:	2b00      	cmp	r3, #0
    ae92:	d102      	bne.n	ae9a <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    ae94:	f06f 0312 	mvn.w	r3, #18
    ae98:	e071      	b.n	af7e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    ae9a:	2301      	movs	r3, #1
    ae9c:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    ae9e:	7d7b      	ldrb	r3, [r7, #21]
    aea0:	f083 0301 	eor.w	r3, r3, #1
    aea4:	b2db      	uxtb	r3, r3
    aea6:	2b00      	cmp	r3, #0
    aea8:	d009      	beq.n	aebe <_usb_d_dev_ep_trans+0xe2>
    aeaa:	7b7b      	ldrb	r3, [r7, #13]
    aeac:	2b00      	cmp	r3, #0
    aeae:	d006      	beq.n	aebe <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    aeb0:	693b      	ldr	r3, [r7, #16]
    aeb2:	68db      	ldr	r3, [r3, #12]
    aeb4:	2b00      	cmp	r3, #0
    aeb6:	d102      	bne.n	aebe <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    aeb8:	f06f 0311 	mvn.w	r3, #17
    aebc:	e05f      	b.n	af7e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    aebe:	693b      	ldr	r3, [r7, #16]
    aec0:	7cdb      	ldrb	r3, [r3, #19]
    aec2:	f003 0308 	and.w	r3, r3, #8
    aec6:	b2db      	uxtb	r3, r3
    aec8:	2b00      	cmp	r3, #0
    aeca:	d001      	beq.n	aed0 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    aecc:	2302      	movs	r3, #2
    aece:	e056      	b.n	af7e <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    aed0:	f107 0308 	add.w	r3, r7, #8
    aed4:	4618      	mov	r0, r3
    aed6:	4b2e      	ldr	r3, [pc, #184]	; (af90 <_usb_d_dev_ep_trans+0x1b4>)
    aed8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    aeda:	693b      	ldr	r3, [r7, #16]
    aedc:	7cdb      	ldrb	r3, [r3, #19]
    aede:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aee2:	b2db      	uxtb	r3, r3
    aee4:	2b00      	cmp	r3, #0
    aee6:	d006      	beq.n	aef6 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    aee8:	f107 0308 	add.w	r3, r7, #8
    aeec:	4618      	mov	r0, r3
    aeee:	4b29      	ldr	r3, [pc, #164]	; (af94 <_usb_d_dev_ep_trans+0x1b8>)
    aef0:	4798      	blx	r3
		return USB_BUSY;
    aef2:	2301      	movs	r3, #1
    aef4:	e043      	b.n	af7e <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    aef6:	693a      	ldr	r2, [r7, #16]
    aef8:	7cd3      	ldrb	r3, [r2, #19]
    aefa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aefe:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    af00:	f107 0308 	add.w	r3, r7, #8
    af04:	4618      	mov	r0, r3
    af06:	4b23      	ldr	r3, [pc, #140]	; (af94 <_usb_d_dev_ep_trans+0x1b8>)
    af08:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    af0a:	687b      	ldr	r3, [r7, #4]
    af0c:	681a      	ldr	r2, [r3, #0]
    af0e:	693b      	ldr	r3, [r7, #16]
    af10:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    af12:	687b      	ldr	r3, [r7, #4]
    af14:	685a      	ldr	r2, [r3, #4]
    af16:	693b      	ldr	r3, [r7, #16]
    af18:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    af1a:	693b      	ldr	r3, [r7, #16]
    af1c:	2200      	movs	r2, #0
    af1e:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    af20:	693a      	ldr	r2, [r7, #16]
    af22:	7cd3      	ldrb	r3, [r2, #19]
    af24:	7d79      	ldrb	r1, [r7, #21]
    af26:	f361 13c7 	bfi	r3, r1, #7, #1
    af2a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    af2c:	693a      	ldr	r2, [r7, #16]
    af2e:	7cd3      	ldrb	r3, [r2, #19]
    af30:	7df9      	ldrb	r1, [r7, #23]
    af32:	f361 1345 	bfi	r3, r1, #5, #1
    af36:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    af38:	687b      	ldr	r3, [r7, #4]
    af3a:	7a5b      	ldrb	r3, [r3, #9]
    af3c:	2b00      	cmp	r3, #0
    af3e:	d007      	beq.n	af50 <_usb_d_dev_ep_trans+0x174>
    af40:	7b7b      	ldrb	r3, [r7, #13]
    af42:	f083 0301 	eor.w	r3, r3, #1
    af46:	b2db      	uxtb	r3, r3
    af48:	2b00      	cmp	r3, #0
    af4a:	d001      	beq.n	af50 <_usb_d_dev_ep_trans+0x174>
    af4c:	2301      	movs	r3, #1
    af4e:	e000      	b.n	af52 <_usb_d_dev_ep_trans+0x176>
    af50:	2300      	movs	r3, #0
    af52:	b2db      	uxtb	r3, r3
    af54:	f003 0301 	and.w	r3, r3, #1
    af58:	b2d9      	uxtb	r1, r3
    af5a:	693a      	ldr	r2, [r7, #16]
    af5c:	7cd3      	ldrb	r3, [r2, #19]
    af5e:	f361 1304 	bfi	r3, r1, #4, #1
    af62:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    af64:	7d7b      	ldrb	r3, [r7, #21]
    af66:	2b00      	cmp	r3, #0
    af68:	d004      	beq.n	af74 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    af6a:	2100      	movs	r1, #0
    af6c:	6938      	ldr	r0, [r7, #16]
    af6e:	4b0a      	ldr	r3, [pc, #40]	; (af98 <_usb_d_dev_ep_trans+0x1bc>)
    af70:	4798      	blx	r3
    af72:	e003      	b.n	af7c <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    af74:	2100      	movs	r1, #0
    af76:	6938      	ldr	r0, [r7, #16]
    af78:	4b08      	ldr	r3, [pc, #32]	; (af9c <_usb_d_dev_ep_trans+0x1c0>)
    af7a:	4798      	blx	r3
	}

	return ERR_NONE;
    af7c:	2300      	movs	r3, #0
}
    af7e:	4618      	mov	r0, r3
    af80:	3718      	adds	r7, #24
    af82:	46bd      	mov	sp, r7
    af84:	bd80      	pop	{r7, pc}
    af86:	bf00      	nop
    af88:	0000964d 	.word	0x0000964d
    af8c:	20041fff 	.word	0x20041fff
    af90:	0000b7a9 	.word	0x0000b7a9
    af94:	0000b7cf 	.word	0x0000b7cf
    af98:	00009915 	.word	0x00009915
    af9c:	00009b2d 	.word	0x00009b2d

0000afa0 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    afa0:	b580      	push	{r7, lr}
    afa2:	b084      	sub	sp, #16
    afa4:	af00      	add	r7, sp, #0
    afa6:	4603      	mov	r3, r0
    afa8:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    afaa:	79fb      	ldrb	r3, [r7, #7]
    afac:	f003 030f 	and.w	r3, r3, #15
    afb0:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    afb2:	79fb      	ldrb	r3, [r7, #7]
    afb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    afb8:	2b00      	cmp	r3, #0
    afba:	bf14      	ite	ne
    afbc:	2301      	movne	r3, #1
    afbe:	2300      	moveq	r3, #0
    afc0:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    afc2:	7bba      	ldrb	r2, [r7, #14]
    afc4:	7bfb      	ldrb	r3, [r7, #15]
    afc6:	4611      	mov	r1, r2
    afc8:	4618      	mov	r0, r3
    afca:	4b08      	ldr	r3, [pc, #32]	; (afec <_usb_d_dev_ep_abort+0x4c>)
    afcc:	4798      	blx	r3
    afce:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    afd0:	7bfb      	ldrb	r3, [r7, #15]
    afd2:	2b04      	cmp	r3, #4
    afd4:	d806      	bhi.n	afe4 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    afd6:	7bbb      	ldrb	r3, [r7, #14]
    afd8:	2202      	movs	r2, #2
    afda:	4619      	mov	r1, r3
    afdc:	68b8      	ldr	r0, [r7, #8]
    afde:	4b04      	ldr	r3, [pc, #16]	; (aff0 <_usb_d_dev_ep_abort+0x50>)
    afe0:	4798      	blx	r3
    afe2:	e000      	b.n	afe6 <_usb_d_dev_ep_abort+0x46>
		return;
    afe4:	bf00      	nop
}
    afe6:	3710      	adds	r7, #16
    afe8:	46bd      	mov	sp, r7
    afea:	bd80      	pop	{r7, pc}
    afec:	0000964d 	.word	0x0000964d
    aff0:	0000ac85 	.word	0x0000ac85

0000aff4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    aff4:	b480      	push	{r7}
    aff6:	b085      	sub	sp, #20
    aff8:	af00      	add	r7, sp, #0
    affa:	4603      	mov	r3, r0
    affc:	6039      	str	r1, [r7, #0]
    affe:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b000:	683b      	ldr	r3, [r7, #0]
    b002:	2b00      	cmp	r3, #0
    b004:	d001      	beq.n	b00a <_usb_d_dev_register_callback+0x16>
    b006:	683b      	ldr	r3, [r7, #0]
    b008:	e000      	b.n	b00c <_usb_d_dev_register_callback+0x18>
    b00a:	4b0a      	ldr	r3, [pc, #40]	; (b034 <_usb_d_dev_register_callback+0x40>)
    b00c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b00e:	79fb      	ldrb	r3, [r7, #7]
    b010:	2b01      	cmp	r3, #1
    b012:	d103      	bne.n	b01c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b014:	4a08      	ldr	r2, [pc, #32]	; (b038 <_usb_d_dev_register_callback+0x44>)
    b016:	68fb      	ldr	r3, [r7, #12]
    b018:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b01a:	e005      	b.n	b028 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b01c:	79fb      	ldrb	r3, [r7, #7]
    b01e:	2b00      	cmp	r3, #0
    b020:	d102      	bne.n	b028 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b022:	4a05      	ldr	r2, [pc, #20]	; (b038 <_usb_d_dev_register_callback+0x44>)
    b024:	68fb      	ldr	r3, [r7, #12]
    b026:	6013      	str	r3, [r2, #0]
}
    b028:	bf00      	nop
    b02a:	3714      	adds	r7, #20
    b02c:	46bd      	mov	sp, r7
    b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b032:	4770      	bx	lr
    b034:	00008ed5 	.word	0x00008ed5
    b038:	20002418 	.word	0x20002418

0000b03c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b03c:	b480      	push	{r7}
    b03e:	b085      	sub	sp, #20
    b040:	af00      	add	r7, sp, #0
    b042:	4603      	mov	r3, r0
    b044:	6039      	str	r1, [r7, #0]
    b046:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b048:	683b      	ldr	r3, [r7, #0]
    b04a:	2b00      	cmp	r3, #0
    b04c:	d001      	beq.n	b052 <_usb_d_dev_register_ep_callback+0x16>
    b04e:	683b      	ldr	r3, [r7, #0]
    b050:	e000      	b.n	b054 <_usb_d_dev_register_ep_callback+0x18>
    b052:	4b0e      	ldr	r3, [pc, #56]	; (b08c <_usb_d_dev_register_ep_callback+0x50>)
    b054:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b056:	79fb      	ldrb	r3, [r7, #7]
    b058:	2b00      	cmp	r3, #0
    b05a:	d103      	bne.n	b064 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b05c:	4a0c      	ldr	r2, [pc, #48]	; (b090 <_usb_d_dev_register_ep_callback+0x54>)
    b05e:	68fb      	ldr	r3, [r7, #12]
    b060:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b062:	e00c      	b.n	b07e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b064:	79fb      	ldrb	r3, [r7, #7]
    b066:	2b01      	cmp	r3, #1
    b068:	d103      	bne.n	b072 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b06a:	4a09      	ldr	r2, [pc, #36]	; (b090 <_usb_d_dev_register_ep_callback+0x54>)
    b06c:	68fb      	ldr	r3, [r7, #12]
    b06e:	60d3      	str	r3, [r2, #12]
}
    b070:	e005      	b.n	b07e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b072:	79fb      	ldrb	r3, [r7, #7]
    b074:	2b02      	cmp	r3, #2
    b076:	d102      	bne.n	b07e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b078:	4a05      	ldr	r2, [pc, #20]	; (b090 <_usb_d_dev_register_ep_callback+0x54>)
    b07a:	68fb      	ldr	r3, [r7, #12]
    b07c:	6113      	str	r3, [r2, #16]
}
    b07e:	bf00      	nop
    b080:	3714      	adds	r7, #20
    b082:	46bd      	mov	sp, r7
    b084:	f85d 7b04 	ldr.w	r7, [sp], #4
    b088:	4770      	bx	lr
    b08a:	bf00      	nop
    b08c:	00008ed5 	.word	0x00008ed5
    b090:	20002418 	.word	0x20002418

0000b094 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b094:	b580      	push	{r7, lr}
    b096:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b098:	4b01      	ldr	r3, [pc, #4]	; (b0a0 <USB_0_Handler+0xc>)
    b09a:	4798      	blx	r3
}
    b09c:	bf00      	nop
    b09e:	bd80      	pop	{r7, pc}
    b0a0:	0000a305 	.word	0x0000a305

0000b0a4 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b0a4:	b580      	push	{r7, lr}
    b0a6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b0a8:	4b01      	ldr	r3, [pc, #4]	; (b0b0 <USB_1_Handler+0xc>)
    b0aa:	4798      	blx	r3
}
    b0ac:	bf00      	nop
    b0ae:	bd80      	pop	{r7, pc}
    b0b0:	0000a305 	.word	0x0000a305

0000b0b4 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b0b4:	b580      	push	{r7, lr}
    b0b6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b0b8:	4b01      	ldr	r3, [pc, #4]	; (b0c0 <USB_2_Handler+0xc>)
    b0ba:	4798      	blx	r3
}
    b0bc:	bf00      	nop
    b0be:	bd80      	pop	{r7, pc}
    b0c0:	0000a305 	.word	0x0000a305

0000b0c4 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b0c4:	b580      	push	{r7, lr}
    b0c6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b0c8:	4b01      	ldr	r3, [pc, #4]	; (b0d0 <USB_3_Handler+0xc>)
    b0ca:	4798      	blx	r3
}
    b0cc:	bf00      	nop
    b0ce:	bd80      	pop	{r7, pc}
    b0d0:	0000a305 	.word	0x0000a305

0000b0d4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b0d4:	b480      	push	{r7}
    b0d6:	b083      	sub	sp, #12
    b0d8:	af00      	add	r7, sp, #0
    b0da:	6078      	str	r0, [r7, #4]
    b0dc:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b0de:	bf00      	nop
    b0e0:	687b      	ldr	r3, [r7, #4]
    b0e2:	689a      	ldr	r2, [r3, #8]
    b0e4:	683b      	ldr	r3, [r7, #0]
    b0e6:	4013      	ands	r3, r2
    b0e8:	2b00      	cmp	r3, #0
    b0ea:	d1f9      	bne.n	b0e0 <hri_wdt_wait_for_sync+0xc>
	};
}
    b0ec:	bf00      	nop
    b0ee:	370c      	adds	r7, #12
    b0f0:	46bd      	mov	sp, r7
    b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0f6:	4770      	bx	lr

0000b0f8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b0f8:	b580      	push	{r7, lr}
    b0fa:	b084      	sub	sp, #16
    b0fc:	af00      	add	r7, sp, #0
    b0fe:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b100:	210e      	movs	r1, #14
    b102:	6878      	ldr	r0, [r7, #4]
    b104:	4b0a      	ldr	r3, [pc, #40]	; (b130 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b106:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b108:	687b      	ldr	r3, [r7, #4]
    b10a:	781b      	ldrb	r3, [r3, #0]
    b10c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b10e:	7bfb      	ldrb	r3, [r7, #15]
    b110:	085b      	lsrs	r3, r3, #1
    b112:	b2db      	uxtb	r3, r3
    b114:	f003 0301 	and.w	r3, r3, #1
    b118:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b11a:	7bfb      	ldrb	r3, [r7, #15]
    b11c:	2b00      	cmp	r3, #0
    b11e:	bf14      	ite	ne
    b120:	2301      	movne	r3, #1
    b122:	2300      	moveq	r3, #0
    b124:	b2db      	uxtb	r3, r3
}
    b126:	4618      	mov	r0, r3
    b128:	3710      	adds	r7, #16
    b12a:	46bd      	mov	sp, r7
    b12c:	bd80      	pop	{r7, pc}
    b12e:	bf00      	nop
    b130:	0000b0d5 	.word	0x0000b0d5

0000b134 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b134:	b580      	push	{r7, lr}
    b136:	b082      	sub	sp, #8
    b138:	af00      	add	r7, sp, #0
    b13a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b13c:	687b      	ldr	r3, [r7, #4]
    b13e:	781b      	ldrb	r3, [r3, #0]
    b140:	b2db      	uxtb	r3, r3
    b142:	f023 0304 	bic.w	r3, r3, #4
    b146:	b2da      	uxtb	r2, r3
    b148:	687b      	ldr	r3, [r7, #4]
    b14a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b14c:	210e      	movs	r1, #14
    b14e:	6878      	ldr	r0, [r7, #4]
    b150:	4b02      	ldr	r3, [pc, #8]	; (b15c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b152:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b154:	bf00      	nop
    b156:	3708      	adds	r7, #8
    b158:	46bd      	mov	sp, r7
    b15a:	bd80      	pop	{r7, pc}
    b15c:	0000b0d5 	.word	0x0000b0d5

0000b160 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b160:	b580      	push	{r7, lr}
    b162:	b084      	sub	sp, #16
    b164:	af00      	add	r7, sp, #0
    b166:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b168:	210e      	movs	r1, #14
    b16a:	6878      	ldr	r0, [r7, #4]
    b16c:	4b08      	ldr	r3, [pc, #32]	; (b190 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b16e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b170:	687b      	ldr	r3, [r7, #4]
    b172:	781b      	ldrb	r3, [r3, #0]
    b174:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b176:	7bfb      	ldrb	r3, [r7, #15]
    b178:	09db      	lsrs	r3, r3, #7
    b17a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b17c:	7bfb      	ldrb	r3, [r7, #15]
    b17e:	2b00      	cmp	r3, #0
    b180:	bf14      	ite	ne
    b182:	2301      	movne	r3, #1
    b184:	2300      	moveq	r3, #0
    b186:	b2db      	uxtb	r3, r3
}
    b188:	4618      	mov	r0, r3
    b18a:	3710      	adds	r7, #16
    b18c:	46bd      	mov	sp, r7
    b18e:	bd80      	pop	{r7, pc}
    b190:	0000b0d5 	.word	0x0000b0d5

0000b194 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b194:	b480      	push	{r7}
    b196:	b085      	sub	sp, #20
    b198:	af00      	add	r7, sp, #0
    b19a:	6078      	str	r0, [r7, #4]
    b19c:	460b      	mov	r3, r1
    b19e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b1a0:	687b      	ldr	r3, [r7, #4]
    b1a2:	785b      	ldrb	r3, [r3, #1]
    b1a4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b1a6:	7bfb      	ldrb	r3, [r7, #15]
    b1a8:	f023 030f 	bic.w	r3, r3, #15
    b1ac:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b1ae:	78fb      	ldrb	r3, [r7, #3]
    b1b0:	f003 030f 	and.w	r3, r3, #15
    b1b4:	b2da      	uxtb	r2, r3
    b1b6:	7bfb      	ldrb	r3, [r7, #15]
    b1b8:	4313      	orrs	r3, r2
    b1ba:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b1bc:	687b      	ldr	r3, [r7, #4]
    b1be:	7bfa      	ldrb	r2, [r7, #15]
    b1c0:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b1c2:	bf00      	nop
    b1c4:	3714      	adds	r7, #20
    b1c6:	46bd      	mov	sp, r7
    b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1cc:	4770      	bx	lr
	...

0000b1d0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b1d0:	b580      	push	{r7, lr}
    b1d2:	b082      	sub	sp, #8
    b1d4:	af00      	add	r7, sp, #0
    b1d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b1d8:	687b      	ldr	r3, [r7, #4]
    b1da:	2b00      	cmp	r3, #0
    b1dc:	d005      	beq.n	b1ea <_wdt_init+0x1a>
    b1de:	687b      	ldr	r3, [r7, #4]
    b1e0:	681b      	ldr	r3, [r3, #0]
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	d001      	beq.n	b1ea <_wdt_init+0x1a>
    b1e6:	2301      	movs	r3, #1
    b1e8:	e000      	b.n	b1ec <_wdt_init+0x1c>
    b1ea:	2300      	movs	r3, #0
    b1ec:	f003 0301 	and.w	r3, r3, #1
    b1f0:	b2db      	uxtb	r3, r3
    b1f2:	2250      	movs	r2, #80	; 0x50
    b1f4:	4913      	ldr	r1, [pc, #76]	; (b244 <_wdt_init+0x74>)
    b1f6:	4618      	mov	r0, r3
    b1f8:	4b13      	ldr	r3, [pc, #76]	; (b248 <_wdt_init+0x78>)
    b1fa:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b1fc:	687b      	ldr	r3, [r7, #4]
    b1fe:	681b      	ldr	r3, [r3, #0]
    b200:	4618      	mov	r0, r3
    b202:	4b12      	ldr	r3, [pc, #72]	; (b24c <_wdt_init+0x7c>)
    b204:	4798      	blx	r3
    b206:	4603      	mov	r3, r0
    b208:	2b00      	cmp	r3, #0
    b20a:	d107      	bne.n	b21c <_wdt_init+0x4c>
    b20c:	687b      	ldr	r3, [r7, #4]
    b20e:	681b      	ldr	r3, [r3, #0]
    b210:	4618      	mov	r0, r3
    b212:	4b0f      	ldr	r3, [pc, #60]	; (b250 <_wdt_init+0x80>)
    b214:	4798      	blx	r3
    b216:	4603      	mov	r3, r0
    b218:	2b00      	cmp	r3, #0
    b21a:	d002      	beq.n	b222 <_wdt_init+0x52>
		return ERR_DENIED;
    b21c:	f06f 0310 	mvn.w	r3, #16
    b220:	e00b      	b.n	b23a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b222:	687b      	ldr	r3, [r7, #4]
    b224:	681b      	ldr	r3, [r3, #0]
    b226:	4618      	mov	r0, r3
    b228:	4b0a      	ldr	r3, [pc, #40]	; (b254 <_wdt_init+0x84>)
    b22a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b22c:	687b      	ldr	r3, [r7, #4]
    b22e:	681b      	ldr	r3, [r3, #0]
    b230:	210b      	movs	r1, #11
    b232:	4618      	mov	r0, r3
    b234:	4b08      	ldr	r3, [pc, #32]	; (b258 <_wdt_init+0x88>)
    b236:	4798      	blx	r3
	}

	return ERR_NONE;
    b238:	2300      	movs	r3, #0
}
    b23a:	4618      	mov	r0, r3
    b23c:	3708      	adds	r7, #8
    b23e:	46bd      	mov	sp, r7
    b240:	bd80      	pop	{r7, pc}
    b242:	bf00      	nop
    b244:	00010ad8 	.word	0x00010ad8
    b248:	00003b01 	.word	0x00003b01
    b24c:	0000b161 	.word	0x0000b161
    b250:	0000b0f9 	.word	0x0000b0f9
    b254:	0000b135 	.word	0x0000b135
    b258:	0000b195 	.word	0x0000b195

0000b25c <hri_port_set_DIR_reg>:
{
    b25c:	b480      	push	{r7}
    b25e:	b085      	sub	sp, #20
    b260:	af00      	add	r7, sp, #0
    b262:	60f8      	str	r0, [r7, #12]
    b264:	460b      	mov	r3, r1
    b266:	607a      	str	r2, [r7, #4]
    b268:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b26a:	7afb      	ldrb	r3, [r7, #11]
    b26c:	68fa      	ldr	r2, [r7, #12]
    b26e:	01db      	lsls	r3, r3, #7
    b270:	4413      	add	r3, r2
    b272:	3308      	adds	r3, #8
    b274:	687a      	ldr	r2, [r7, #4]
    b276:	601a      	str	r2, [r3, #0]
}
    b278:	bf00      	nop
    b27a:	3714      	adds	r7, #20
    b27c:	46bd      	mov	sp, r7
    b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b282:	4770      	bx	lr

0000b284 <hri_port_clear_DIR_reg>:
{
    b284:	b480      	push	{r7}
    b286:	b085      	sub	sp, #20
    b288:	af00      	add	r7, sp, #0
    b28a:	60f8      	str	r0, [r7, #12]
    b28c:	460b      	mov	r3, r1
    b28e:	607a      	str	r2, [r7, #4]
    b290:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b292:	7afb      	ldrb	r3, [r7, #11]
    b294:	68fa      	ldr	r2, [r7, #12]
    b296:	01db      	lsls	r3, r3, #7
    b298:	4413      	add	r3, r2
    b29a:	3304      	adds	r3, #4
    b29c:	687a      	ldr	r2, [r7, #4]
    b29e:	601a      	str	r2, [r3, #0]
}
    b2a0:	bf00      	nop
    b2a2:	3714      	adds	r7, #20
    b2a4:	46bd      	mov	sp, r7
    b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2aa:	4770      	bx	lr

0000b2ac <hri_port_set_OUT_reg>:
{
    b2ac:	b480      	push	{r7}
    b2ae:	b085      	sub	sp, #20
    b2b0:	af00      	add	r7, sp, #0
    b2b2:	60f8      	str	r0, [r7, #12]
    b2b4:	460b      	mov	r3, r1
    b2b6:	607a      	str	r2, [r7, #4]
    b2b8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b2ba:	7afb      	ldrb	r3, [r7, #11]
    b2bc:	68fa      	ldr	r2, [r7, #12]
    b2be:	01db      	lsls	r3, r3, #7
    b2c0:	4413      	add	r3, r2
    b2c2:	3318      	adds	r3, #24
    b2c4:	687a      	ldr	r2, [r7, #4]
    b2c6:	601a      	str	r2, [r3, #0]
}
    b2c8:	bf00      	nop
    b2ca:	3714      	adds	r7, #20
    b2cc:	46bd      	mov	sp, r7
    b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2d2:	4770      	bx	lr

0000b2d4 <hri_port_clear_OUT_reg>:
{
    b2d4:	b480      	push	{r7}
    b2d6:	b085      	sub	sp, #20
    b2d8:	af00      	add	r7, sp, #0
    b2da:	60f8      	str	r0, [r7, #12]
    b2dc:	460b      	mov	r3, r1
    b2de:	607a      	str	r2, [r7, #4]
    b2e0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b2e2:	7afb      	ldrb	r3, [r7, #11]
    b2e4:	68fa      	ldr	r2, [r7, #12]
    b2e6:	01db      	lsls	r3, r3, #7
    b2e8:	4413      	add	r3, r2
    b2ea:	3314      	adds	r3, #20
    b2ec:	687a      	ldr	r2, [r7, #4]
    b2ee:	601a      	str	r2, [r3, #0]
}
    b2f0:	bf00      	nop
    b2f2:	3714      	adds	r7, #20
    b2f4:	46bd      	mov	sp, r7
    b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2fa:	4770      	bx	lr

0000b2fc <hri_port_write_PMUX_PMUXE_bf>:
{
    b2fc:	b480      	push	{r7}
    b2fe:	b085      	sub	sp, #20
    b300:	af00      	add	r7, sp, #0
    b302:	6078      	str	r0, [r7, #4]
    b304:	4608      	mov	r0, r1
    b306:	4611      	mov	r1, r2
    b308:	461a      	mov	r2, r3
    b30a:	4603      	mov	r3, r0
    b30c:	70fb      	strb	r3, [r7, #3]
    b30e:	460b      	mov	r3, r1
    b310:	70bb      	strb	r3, [r7, #2]
    b312:	4613      	mov	r3, r2
    b314:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b316:	78fa      	ldrb	r2, [r7, #3]
    b318:	78bb      	ldrb	r3, [r7, #2]
    b31a:	6879      	ldr	r1, [r7, #4]
    b31c:	01d2      	lsls	r2, r2, #7
    b31e:	440a      	add	r2, r1
    b320:	4413      	add	r3, r2
    b322:	3330      	adds	r3, #48	; 0x30
    b324:	781b      	ldrb	r3, [r3, #0]
    b326:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b328:	7bfb      	ldrb	r3, [r7, #15]
    b32a:	f023 030f 	bic.w	r3, r3, #15
    b32e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b330:	787b      	ldrb	r3, [r7, #1]
    b332:	f003 030f 	and.w	r3, r3, #15
    b336:	b2da      	uxtb	r2, r3
    b338:	7bfb      	ldrb	r3, [r7, #15]
    b33a:	4313      	orrs	r3, r2
    b33c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b33e:	78fa      	ldrb	r2, [r7, #3]
    b340:	78bb      	ldrb	r3, [r7, #2]
    b342:	6879      	ldr	r1, [r7, #4]
    b344:	01d2      	lsls	r2, r2, #7
    b346:	440a      	add	r2, r1
    b348:	4413      	add	r3, r2
    b34a:	3330      	adds	r3, #48	; 0x30
    b34c:	7bfa      	ldrb	r2, [r7, #15]
    b34e:	701a      	strb	r2, [r3, #0]
}
    b350:	bf00      	nop
    b352:	3714      	adds	r7, #20
    b354:	46bd      	mov	sp, r7
    b356:	f85d 7b04 	ldr.w	r7, [sp], #4
    b35a:	4770      	bx	lr

0000b35c <hri_port_write_PMUX_PMUXO_bf>:
{
    b35c:	b480      	push	{r7}
    b35e:	b085      	sub	sp, #20
    b360:	af00      	add	r7, sp, #0
    b362:	6078      	str	r0, [r7, #4]
    b364:	4608      	mov	r0, r1
    b366:	4611      	mov	r1, r2
    b368:	461a      	mov	r2, r3
    b36a:	4603      	mov	r3, r0
    b36c:	70fb      	strb	r3, [r7, #3]
    b36e:	460b      	mov	r3, r1
    b370:	70bb      	strb	r3, [r7, #2]
    b372:	4613      	mov	r3, r2
    b374:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b376:	78fa      	ldrb	r2, [r7, #3]
    b378:	78bb      	ldrb	r3, [r7, #2]
    b37a:	6879      	ldr	r1, [r7, #4]
    b37c:	01d2      	lsls	r2, r2, #7
    b37e:	440a      	add	r2, r1
    b380:	4413      	add	r3, r2
    b382:	3330      	adds	r3, #48	; 0x30
    b384:	781b      	ldrb	r3, [r3, #0]
    b386:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b388:	7bfb      	ldrb	r3, [r7, #15]
    b38a:	f003 030f 	and.w	r3, r3, #15
    b38e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b390:	787b      	ldrb	r3, [r7, #1]
    b392:	011b      	lsls	r3, r3, #4
    b394:	b2da      	uxtb	r2, r3
    b396:	7bfb      	ldrb	r3, [r7, #15]
    b398:	4313      	orrs	r3, r2
    b39a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b39c:	78fa      	ldrb	r2, [r7, #3]
    b39e:	78bb      	ldrb	r3, [r7, #2]
    b3a0:	6879      	ldr	r1, [r7, #4]
    b3a2:	01d2      	lsls	r2, r2, #7
    b3a4:	440a      	add	r2, r1
    b3a6:	4413      	add	r3, r2
    b3a8:	3330      	adds	r3, #48	; 0x30
    b3aa:	7bfa      	ldrb	r2, [r7, #15]
    b3ac:	701a      	strb	r2, [r3, #0]
}
    b3ae:	bf00      	nop
    b3b0:	3714      	adds	r7, #20
    b3b2:	46bd      	mov	sp, r7
    b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3b8:	4770      	bx	lr

0000b3ba <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b3ba:	b480      	push	{r7}
    b3bc:	b085      	sub	sp, #20
    b3be:	af00      	add	r7, sp, #0
    b3c0:	6078      	str	r0, [r7, #4]
    b3c2:	4608      	mov	r0, r1
    b3c4:	4611      	mov	r1, r2
    b3c6:	461a      	mov	r2, r3
    b3c8:	4603      	mov	r3, r0
    b3ca:	70fb      	strb	r3, [r7, #3]
    b3cc:	460b      	mov	r3, r1
    b3ce:	70bb      	strb	r3, [r7, #2]
    b3d0:	4613      	mov	r3, r2
    b3d2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b3d4:	78fa      	ldrb	r2, [r7, #3]
    b3d6:	78bb      	ldrb	r3, [r7, #2]
    b3d8:	6879      	ldr	r1, [r7, #4]
    b3da:	01d2      	lsls	r2, r2, #7
    b3dc:	440a      	add	r2, r1
    b3de:	4413      	add	r3, r2
    b3e0:	3340      	adds	r3, #64	; 0x40
    b3e2:	781b      	ldrb	r3, [r3, #0]
    b3e4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b3e6:	7bfb      	ldrb	r3, [r7, #15]
    b3e8:	f023 0301 	bic.w	r3, r3, #1
    b3ec:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b3ee:	787a      	ldrb	r2, [r7, #1]
    b3f0:	7bfb      	ldrb	r3, [r7, #15]
    b3f2:	4313      	orrs	r3, r2
    b3f4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b3f6:	78fa      	ldrb	r2, [r7, #3]
    b3f8:	78bb      	ldrb	r3, [r7, #2]
    b3fa:	6879      	ldr	r1, [r7, #4]
    b3fc:	01d2      	lsls	r2, r2, #7
    b3fe:	440a      	add	r2, r1
    b400:	4413      	add	r3, r2
    b402:	3340      	adds	r3, #64	; 0x40
    b404:	7bfa      	ldrb	r2, [r7, #15]
    b406:	701a      	strb	r2, [r3, #0]
}
    b408:	bf00      	nop
    b40a:	3714      	adds	r7, #20
    b40c:	46bd      	mov	sp, r7
    b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b412:	4770      	bx	lr

0000b414 <hri_port_write_WRCONFIG_reg>:
{
    b414:	b480      	push	{r7}
    b416:	b085      	sub	sp, #20
    b418:	af00      	add	r7, sp, #0
    b41a:	60f8      	str	r0, [r7, #12]
    b41c:	460b      	mov	r3, r1
    b41e:	607a      	str	r2, [r7, #4]
    b420:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b422:	7afb      	ldrb	r3, [r7, #11]
    b424:	68fa      	ldr	r2, [r7, #12]
    b426:	01db      	lsls	r3, r3, #7
    b428:	4413      	add	r3, r2
    b42a:	3328      	adds	r3, #40	; 0x28
    b42c:	687a      	ldr	r2, [r7, #4]
    b42e:	601a      	str	r2, [r3, #0]
}
    b430:	bf00      	nop
    b432:	3714      	adds	r7, #20
    b434:	46bd      	mov	sp, r7
    b436:	f85d 7b04 	ldr.w	r7, [sp], #4
    b43a:	4770      	bx	lr

0000b43c <_gpio_set_direction>:
{
    b43c:	b580      	push	{r7, lr}
    b43e:	b082      	sub	sp, #8
    b440:	af00      	add	r7, sp, #0
    b442:	4603      	mov	r3, r0
    b444:	6039      	str	r1, [r7, #0]
    b446:	71fb      	strb	r3, [r7, #7]
    b448:	4613      	mov	r3, r2
    b44a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b44c:	79bb      	ldrb	r3, [r7, #6]
    b44e:	2b01      	cmp	r3, #1
    b450:	d01c      	beq.n	b48c <_gpio_set_direction+0x50>
    b452:	2b02      	cmp	r3, #2
    b454:	d037      	beq.n	b4c6 <_gpio_set_direction+0x8a>
    b456:	2b00      	cmp	r3, #0
    b458:	d14e      	bne.n	b4f8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b45a:	79fb      	ldrb	r3, [r7, #7]
    b45c:	683a      	ldr	r2, [r7, #0]
    b45e:	4619      	mov	r1, r3
    b460:	482a      	ldr	r0, [pc, #168]	; (b50c <_gpio_set_direction+0xd0>)
    b462:	4b2b      	ldr	r3, [pc, #172]	; (b510 <_gpio_set_direction+0xd4>)
    b464:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b466:	683b      	ldr	r3, [r7, #0]
    b468:	b29b      	uxth	r3, r3
    b46a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b46e:	79fb      	ldrb	r3, [r7, #7]
    b470:	4619      	mov	r1, r3
    b472:	4826      	ldr	r0, [pc, #152]	; (b50c <_gpio_set_direction+0xd0>)
    b474:	4b27      	ldr	r3, [pc, #156]	; (b514 <_gpio_set_direction+0xd8>)
    b476:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b478:	683b      	ldr	r3, [r7, #0]
    b47a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b47c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b480:	79fb      	ldrb	r3, [r7, #7]
    b482:	4619      	mov	r1, r3
    b484:	4821      	ldr	r0, [pc, #132]	; (b50c <_gpio_set_direction+0xd0>)
    b486:	4b23      	ldr	r3, [pc, #140]	; (b514 <_gpio_set_direction+0xd8>)
    b488:	4798      	blx	r3
		break;
    b48a:	e03a      	b.n	b502 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b48c:	79fb      	ldrb	r3, [r7, #7]
    b48e:	683a      	ldr	r2, [r7, #0]
    b490:	4619      	mov	r1, r3
    b492:	481e      	ldr	r0, [pc, #120]	; (b50c <_gpio_set_direction+0xd0>)
    b494:	4b1e      	ldr	r3, [pc, #120]	; (b510 <_gpio_set_direction+0xd4>)
    b496:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b498:	683b      	ldr	r3, [r7, #0]
    b49a:	b29b      	uxth	r3, r3
    b49c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b4a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b4a4:	79f9      	ldrb	r1, [r7, #7]
    b4a6:	461a      	mov	r2, r3
    b4a8:	4818      	ldr	r0, [pc, #96]	; (b50c <_gpio_set_direction+0xd0>)
    b4aa:	4b1a      	ldr	r3, [pc, #104]	; (b514 <_gpio_set_direction+0xd8>)
    b4ac:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b4ae:	683b      	ldr	r3, [r7, #0]
    b4b0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b4b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b4b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b4ba:	79f9      	ldrb	r1, [r7, #7]
    b4bc:	461a      	mov	r2, r3
    b4be:	4813      	ldr	r0, [pc, #76]	; (b50c <_gpio_set_direction+0xd0>)
    b4c0:	4b14      	ldr	r3, [pc, #80]	; (b514 <_gpio_set_direction+0xd8>)
    b4c2:	4798      	blx	r3
		break;
    b4c4:	e01d      	b.n	b502 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b4c6:	79fb      	ldrb	r3, [r7, #7]
    b4c8:	683a      	ldr	r2, [r7, #0]
    b4ca:	4619      	mov	r1, r3
    b4cc:	480f      	ldr	r0, [pc, #60]	; (b50c <_gpio_set_direction+0xd0>)
    b4ce:	4b12      	ldr	r3, [pc, #72]	; (b518 <_gpio_set_direction+0xdc>)
    b4d0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b4d2:	683b      	ldr	r3, [r7, #0]
    b4d4:	b29b      	uxth	r3, r3
    b4d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b4da:	79fb      	ldrb	r3, [r7, #7]
    b4dc:	4619      	mov	r1, r3
    b4de:	480b      	ldr	r0, [pc, #44]	; (b50c <_gpio_set_direction+0xd0>)
    b4e0:	4b0c      	ldr	r3, [pc, #48]	; (b514 <_gpio_set_direction+0xd8>)
    b4e2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b4e4:	683b      	ldr	r3, [r7, #0]
    b4e6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b4e8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b4ec:	79fb      	ldrb	r3, [r7, #7]
    b4ee:	4619      	mov	r1, r3
    b4f0:	4806      	ldr	r0, [pc, #24]	; (b50c <_gpio_set_direction+0xd0>)
    b4f2:	4b08      	ldr	r3, [pc, #32]	; (b514 <_gpio_set_direction+0xd8>)
    b4f4:	4798      	blx	r3
		break;
    b4f6:	e004      	b.n	b502 <_gpio_set_direction+0xc6>
		ASSERT(false);
    b4f8:	2246      	movs	r2, #70	; 0x46
    b4fa:	4908      	ldr	r1, [pc, #32]	; (b51c <_gpio_set_direction+0xe0>)
    b4fc:	2000      	movs	r0, #0
    b4fe:	4b08      	ldr	r3, [pc, #32]	; (b520 <_gpio_set_direction+0xe4>)
    b500:	4798      	blx	r3
}
    b502:	bf00      	nop
    b504:	3708      	adds	r7, #8
    b506:	46bd      	mov	sp, r7
    b508:	bd80      	pop	{r7, pc}
    b50a:	bf00      	nop
    b50c:	41008000 	.word	0x41008000
    b510:	0000b285 	.word	0x0000b285
    b514:	0000b415 	.word	0x0000b415
    b518:	0000b25d 	.word	0x0000b25d
    b51c:	00010af0 	.word	0x00010af0
    b520:	00003b01 	.word	0x00003b01

0000b524 <_gpio_set_level>:
{
    b524:	b580      	push	{r7, lr}
    b526:	b082      	sub	sp, #8
    b528:	af00      	add	r7, sp, #0
    b52a:	4603      	mov	r3, r0
    b52c:	6039      	str	r1, [r7, #0]
    b52e:	71fb      	strb	r3, [r7, #7]
    b530:	4613      	mov	r3, r2
    b532:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b534:	79bb      	ldrb	r3, [r7, #6]
    b536:	2b00      	cmp	r3, #0
    b538:	d006      	beq.n	b548 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b53a:	79fb      	ldrb	r3, [r7, #7]
    b53c:	683a      	ldr	r2, [r7, #0]
    b53e:	4619      	mov	r1, r3
    b540:	4806      	ldr	r0, [pc, #24]	; (b55c <_gpio_set_level+0x38>)
    b542:	4b07      	ldr	r3, [pc, #28]	; (b560 <_gpio_set_level+0x3c>)
    b544:	4798      	blx	r3
}
    b546:	e005      	b.n	b554 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b548:	79fb      	ldrb	r3, [r7, #7]
    b54a:	683a      	ldr	r2, [r7, #0]
    b54c:	4619      	mov	r1, r3
    b54e:	4803      	ldr	r0, [pc, #12]	; (b55c <_gpio_set_level+0x38>)
    b550:	4b04      	ldr	r3, [pc, #16]	; (b564 <_gpio_set_level+0x40>)
    b552:	4798      	blx	r3
}
    b554:	bf00      	nop
    b556:	3708      	adds	r7, #8
    b558:	46bd      	mov	sp, r7
    b55a:	bd80      	pop	{r7, pc}
    b55c:	41008000 	.word	0x41008000
    b560:	0000b2ad 	.word	0x0000b2ad
    b564:	0000b2d5 	.word	0x0000b2d5

0000b568 <_gpio_set_pin_function>:
{
    b568:	b590      	push	{r4, r7, lr}
    b56a:	b085      	sub	sp, #20
    b56c:	af00      	add	r7, sp, #0
    b56e:	6078      	str	r0, [r7, #4]
    b570:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b572:	687b      	ldr	r3, [r7, #4]
    b574:	095b      	lsrs	r3, r3, #5
    b576:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b578:	687b      	ldr	r3, [r7, #4]
    b57a:	b2db      	uxtb	r3, r3
    b57c:	f003 031f 	and.w	r3, r3, #31
    b580:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b582:	683b      	ldr	r3, [r7, #0]
    b584:	f1b3 3fff 	cmp.w	r3, #4294967295
    b588:	d106      	bne.n	b598 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b58a:	7bba      	ldrb	r2, [r7, #14]
    b58c:	7bf9      	ldrb	r1, [r7, #15]
    b58e:	2300      	movs	r3, #0
    b590:	4812      	ldr	r0, [pc, #72]	; (b5dc <_gpio_set_pin_function+0x74>)
    b592:	4c13      	ldr	r4, [pc, #76]	; (b5e0 <_gpio_set_pin_function+0x78>)
    b594:	47a0      	blx	r4
}
    b596:	e01d      	b.n	b5d4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b598:	7bba      	ldrb	r2, [r7, #14]
    b59a:	7bf9      	ldrb	r1, [r7, #15]
    b59c:	2301      	movs	r3, #1
    b59e:	480f      	ldr	r0, [pc, #60]	; (b5dc <_gpio_set_pin_function+0x74>)
    b5a0:	4c0f      	ldr	r4, [pc, #60]	; (b5e0 <_gpio_set_pin_function+0x78>)
    b5a2:	47a0      	blx	r4
		if (pin & 1) {
    b5a4:	7bbb      	ldrb	r3, [r7, #14]
    b5a6:	f003 0301 	and.w	r3, r3, #1
    b5aa:	2b00      	cmp	r3, #0
    b5ac:	d009      	beq.n	b5c2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b5ae:	7bbb      	ldrb	r3, [r7, #14]
    b5b0:	085b      	lsrs	r3, r3, #1
    b5b2:	b2da      	uxtb	r2, r3
    b5b4:	683b      	ldr	r3, [r7, #0]
    b5b6:	b2db      	uxtb	r3, r3
    b5b8:	7bf9      	ldrb	r1, [r7, #15]
    b5ba:	4808      	ldr	r0, [pc, #32]	; (b5dc <_gpio_set_pin_function+0x74>)
    b5bc:	4c09      	ldr	r4, [pc, #36]	; (b5e4 <_gpio_set_pin_function+0x7c>)
    b5be:	47a0      	blx	r4
}
    b5c0:	e008      	b.n	b5d4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b5c2:	7bbb      	ldrb	r3, [r7, #14]
    b5c4:	085b      	lsrs	r3, r3, #1
    b5c6:	b2da      	uxtb	r2, r3
    b5c8:	683b      	ldr	r3, [r7, #0]
    b5ca:	b2db      	uxtb	r3, r3
    b5cc:	7bf9      	ldrb	r1, [r7, #15]
    b5ce:	4803      	ldr	r0, [pc, #12]	; (b5dc <_gpio_set_pin_function+0x74>)
    b5d0:	4c05      	ldr	r4, [pc, #20]	; (b5e8 <_gpio_set_pin_function+0x80>)
    b5d2:	47a0      	blx	r4
}
    b5d4:	bf00      	nop
    b5d6:	3714      	adds	r7, #20
    b5d8:	46bd      	mov	sp, r7
    b5da:	bd90      	pop	{r4, r7, pc}
    b5dc:	41008000 	.word	0x41008000
    b5e0:	0000b3bb 	.word	0x0000b3bb
    b5e4:	0000b35d 	.word	0x0000b35d
    b5e8:	0000b2fd 	.word	0x0000b2fd

0000b5ec <gpio_set_pin_function>:
{
    b5ec:	b580      	push	{r7, lr}
    b5ee:	b082      	sub	sp, #8
    b5f0:	af00      	add	r7, sp, #0
    b5f2:	6078      	str	r0, [r7, #4]
    b5f4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b5f6:	6839      	ldr	r1, [r7, #0]
    b5f8:	6878      	ldr	r0, [r7, #4]
    b5fa:	4b03      	ldr	r3, [pc, #12]	; (b608 <gpio_set_pin_function+0x1c>)
    b5fc:	4798      	blx	r3
}
    b5fe:	bf00      	nop
    b600:	3708      	adds	r7, #8
    b602:	46bd      	mov	sp, r7
    b604:	bd80      	pop	{r7, pc}
    b606:	bf00      	nop
    b608:	0000b569 	.word	0x0000b569

0000b60c <gpio_set_pin_direction>:
{
    b60c:	b580      	push	{r7, lr}
    b60e:	b082      	sub	sp, #8
    b610:	af00      	add	r7, sp, #0
    b612:	4603      	mov	r3, r0
    b614:	460a      	mov	r2, r1
    b616:	71fb      	strb	r3, [r7, #7]
    b618:	4613      	mov	r3, r2
    b61a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b61c:	79fb      	ldrb	r3, [r7, #7]
    b61e:	095b      	lsrs	r3, r3, #5
    b620:	b2d8      	uxtb	r0, r3
    b622:	79fb      	ldrb	r3, [r7, #7]
    b624:	f003 031f 	and.w	r3, r3, #31
    b628:	2201      	movs	r2, #1
    b62a:	fa02 f303 	lsl.w	r3, r2, r3
    b62e:	79ba      	ldrb	r2, [r7, #6]
    b630:	4619      	mov	r1, r3
    b632:	4b03      	ldr	r3, [pc, #12]	; (b640 <gpio_set_pin_direction+0x34>)
    b634:	4798      	blx	r3
}
    b636:	bf00      	nop
    b638:	3708      	adds	r7, #8
    b63a:	46bd      	mov	sp, r7
    b63c:	bd80      	pop	{r7, pc}
    b63e:	bf00      	nop
    b640:	0000b43d 	.word	0x0000b43d

0000b644 <gpio_set_pin_level>:
{
    b644:	b580      	push	{r7, lr}
    b646:	b082      	sub	sp, #8
    b648:	af00      	add	r7, sp, #0
    b64a:	4603      	mov	r3, r0
    b64c:	460a      	mov	r2, r1
    b64e:	71fb      	strb	r3, [r7, #7]
    b650:	4613      	mov	r3, r2
    b652:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b654:	79fb      	ldrb	r3, [r7, #7]
    b656:	095b      	lsrs	r3, r3, #5
    b658:	b2d8      	uxtb	r0, r3
    b65a:	79fb      	ldrb	r3, [r7, #7]
    b65c:	f003 031f 	and.w	r3, r3, #31
    b660:	2201      	movs	r2, #1
    b662:	fa02 f303 	lsl.w	r3, r2, r3
    b666:	79ba      	ldrb	r2, [r7, #6]
    b668:	4619      	mov	r1, r3
    b66a:	4b03      	ldr	r3, [pc, #12]	; (b678 <gpio_set_pin_level+0x34>)
    b66c:	4798      	blx	r3
}
    b66e:	bf00      	nop
    b670:	3708      	adds	r7, #8
    b672:	46bd      	mov	sp, r7
    b674:	bd80      	pop	{r7, pc}
    b676:	bf00      	nop
    b678:	0000b525 	.word	0x0000b525

0000b67c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b67c:	b580      	push	{r7, lr}
    b67e:	b082      	sub	sp, #8
    b680:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b682:	2100      	movs	r1, #0
    b684:	2008      	movs	r0, #8
    b686:	4b24      	ldr	r3, [pc, #144]	; (b718 <QSPI_N25Q256_exit_xip+0x9c>)
    b688:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b68a:	2100      	movs	r1, #0
    b68c:	202b      	movs	r0, #43	; 0x2b
    b68e:	4b22      	ldr	r3, [pc, #136]	; (b718 <QSPI_N25Q256_exit_xip+0x9c>)
    b690:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b692:	2100      	movs	r1, #0
    b694:	202a      	movs	r0, #42	; 0x2a
    b696:	4b20      	ldr	r3, [pc, #128]	; (b718 <QSPI_N25Q256_exit_xip+0x9c>)
    b698:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b69a:	2102      	movs	r1, #2
    b69c:	2008      	movs	r0, #8
    b69e:	4b1f      	ldr	r3, [pc, #124]	; (b71c <QSPI_N25Q256_exit_xip+0xa0>)
    b6a0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b6a2:	2102      	movs	r1, #2
    b6a4:	202b      	movs	r0, #43	; 0x2b
    b6a6:	4b1d      	ldr	r3, [pc, #116]	; (b71c <QSPI_N25Q256_exit_xip+0xa0>)
    b6a8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b6aa:	2102      	movs	r1, #2
    b6ac:	202a      	movs	r0, #42	; 0x2a
    b6ae:	4b1b      	ldr	r3, [pc, #108]	; (b71c <QSPI_N25Q256_exit_xip+0xa0>)
    b6b0:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b6b2:	2101      	movs	r1, #1
    b6b4:	2008      	movs	r0, #8
    b6b6:	4b1a      	ldr	r3, [pc, #104]	; (b720 <QSPI_N25Q256_exit_xip+0xa4>)
    b6b8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b6ba:	2100      	movs	r1, #0
    b6bc:	202b      	movs	r0, #43	; 0x2b
    b6be:	4b18      	ldr	r3, [pc, #96]	; (b720 <QSPI_N25Q256_exit_xip+0xa4>)
    b6c0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b6c2:	2100      	movs	r1, #0
    b6c4:	202a      	movs	r0, #42	; 0x2a
    b6c6:	4b16      	ldr	r3, [pc, #88]	; (b720 <QSPI_N25Q256_exit_xip+0xa4>)
    b6c8:	4798      	blx	r3

	delay_us(1);
    b6ca:	2001      	movs	r0, #1
    b6cc:	4b15      	ldr	r3, [pc, #84]	; (b724 <QSPI_N25Q256_exit_xip+0xa8>)
    b6ce:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b6d0:	2300      	movs	r3, #0
    b6d2:	607b      	str	r3, [r7, #4]
    b6d4:	e010      	b.n	b6f8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b6d6:	2101      	movs	r1, #1
    b6d8:	202a      	movs	r0, #42	; 0x2a
    b6da:	4b11      	ldr	r3, [pc, #68]	; (b720 <QSPI_N25Q256_exit_xip+0xa4>)
    b6dc:	4798      	blx	r3
		delay_us(1);
    b6de:	2001      	movs	r0, #1
    b6e0:	4b10      	ldr	r3, [pc, #64]	; (b724 <QSPI_N25Q256_exit_xip+0xa8>)
    b6e2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b6e4:	2100      	movs	r1, #0
    b6e6:	202a      	movs	r0, #42	; 0x2a
    b6e8:	4b0d      	ldr	r3, [pc, #52]	; (b720 <QSPI_N25Q256_exit_xip+0xa4>)
    b6ea:	4798      	blx	r3
		delay_us(1);
    b6ec:	2001      	movs	r0, #1
    b6ee:	4b0d      	ldr	r3, [pc, #52]	; (b724 <QSPI_N25Q256_exit_xip+0xa8>)
    b6f0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b6f2:	687b      	ldr	r3, [r7, #4]
    b6f4:	3301      	adds	r3, #1
    b6f6:	607b      	str	r3, [r7, #4]
    b6f8:	687b      	ldr	r3, [r7, #4]
    b6fa:	2b06      	cmp	r3, #6
    b6fc:	ddeb      	ble.n	b6d6 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b6fe:	2101      	movs	r1, #1
    b700:	202b      	movs	r0, #43	; 0x2b
    b702:	4b07      	ldr	r3, [pc, #28]	; (b720 <QSPI_N25Q256_exit_xip+0xa4>)
    b704:	4798      	blx	r3
	delay_us(1);
    b706:	2001      	movs	r0, #1
    b708:	4b06      	ldr	r3, [pc, #24]	; (b724 <QSPI_N25Q256_exit_xip+0xa8>)
    b70a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b70c:	4b06      	ldr	r3, [pc, #24]	; (b728 <QSPI_N25Q256_exit_xip+0xac>)
    b70e:	4798      	blx	r3
}
    b710:	bf00      	nop
    b712:	3708      	adds	r7, #8
    b714:	46bd      	mov	sp, r7
    b716:	bd80      	pop	{r7, pc}
    b718:	0000b5ed 	.word	0x0000b5ed
    b71c:	0000b60d 	.word	0x0000b60d
    b720:	0000b645 	.word	0x0000b645
    b724:	00002531 	.word	0x00002531
    b728:	000013c5 	.word	0x000013c5

0000b72c <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b72c:	b598      	push	{r3, r4, r7, lr}
    b72e:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b730:	4806      	ldr	r0, [pc, #24]	; (b74c <spi_nor_flash_init+0x20>)
    b732:	4b07      	ldr	r3, [pc, #28]	; (b750 <spi_nor_flash_init+0x24>)
    b734:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b736:	2300      	movs	r3, #0
    b738:	4a06      	ldr	r2, [pc, #24]	; (b754 <spi_nor_flash_init+0x28>)
    b73a:	4904      	ldr	r1, [pc, #16]	; (b74c <spi_nor_flash_init+0x20>)
    b73c:	4806      	ldr	r0, [pc, #24]	; (b758 <spi_nor_flash_init+0x2c>)
    b73e:	4c07      	ldr	r4, [pc, #28]	; (b75c <spi_nor_flash_init+0x30>)
    b740:	47a0      	blx	r4
    b742:	4602      	mov	r2, r0
    b744:	4b06      	ldr	r3, [pc, #24]	; (b760 <spi_nor_flash_init+0x34>)
    b746:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b748:	bf00      	nop
    b74a:	bd98      	pop	{r3, r4, r7, pc}
    b74c:	2000a638 	.word	0x2000a638
    b750:	00002a69 	.word	0x00002a69
    b754:	0000b67d 	.word	0x0000b67d
    b758:	20002580 	.word	0x20002580
    b75c:	0000bb99 	.word	0x0000bb99
    b760:	2000a838 	.word	0x2000a838

0000b764 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b764:	b580      	push	{r7, lr}
    b766:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b768:	4805      	ldr	r0, [pc, #20]	; (b780 <cdc_device_acm_init+0x1c>)
    b76a:	4b06      	ldr	r3, [pc, #24]	; (b784 <cdc_device_acm_init+0x20>)
    b76c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b76e:	4b06      	ldr	r3, [pc, #24]	; (b788 <cdc_device_acm_init+0x24>)
    b770:	4798      	blx	r3

	usbdc_start(single_desc);
    b772:	4806      	ldr	r0, [pc, #24]	; (b78c <cdc_device_acm_init+0x28>)
    b774:	4b06      	ldr	r3, [pc, #24]	; (b790 <cdc_device_acm_init+0x2c>)
    b776:	4798      	blx	r3
	usbdc_attach();
    b778:	4b06      	ldr	r3, [pc, #24]	; (b794 <cdc_device_acm_init+0x30>)
    b77a:	4798      	blx	r3
}
    b77c:	bf00      	nop
    b77e:	bd80      	pop	{r7, pc}
    b780:	200025d0 	.word	0x200025d0
    b784:	0000d2c1 	.word	0x0000d2c1
    b788:	0000c539 	.word	0x0000c539
    b78c:	20000200 	.word	0x20000200
    b790:	0000d35d 	.word	0x0000d35d
    b794:	0000d3ad 	.word	0x0000d3ad

0000b798 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b798:	b580      	push	{r7, lr}
    b79a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b79c:	4b01      	ldr	r3, [pc, #4]	; (b7a4 <usb_init+0xc>)
    b79e:	4798      	blx	r3
}
    b7a0:	bf00      	nop
    b7a2:	bd80      	pop	{r7, pc}
    b7a4:	0000b765 	.word	0x0000b765

0000b7a8 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b7a8:	b480      	push	{r7}
    b7aa:	b085      	sub	sp, #20
    b7ac:	af00      	add	r7, sp, #0
    b7ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b7b0:	f3ef 8310 	mrs	r3, PRIMASK
    b7b4:	60fb      	str	r3, [r7, #12]
  return(result);
    b7b6:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b7b8:	687b      	ldr	r3, [r7, #4]
    b7ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b7bc:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b7be:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b7c2:	bf00      	nop
    b7c4:	3714      	adds	r7, #20
    b7c6:	46bd      	mov	sp, r7
    b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7cc:	4770      	bx	lr

0000b7ce <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b7ce:	b480      	push	{r7}
    b7d0:	b085      	sub	sp, #20
    b7d2:	af00      	add	r7, sp, #0
    b7d4:	6078      	str	r0, [r7, #4]
    b7d6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b7da:	687b      	ldr	r3, [r7, #4]
    b7dc:	681b      	ldr	r3, [r3, #0]
    b7de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b7e0:	68fb      	ldr	r3, [r7, #12]
    b7e2:	f383 8810 	msr	PRIMASK, r3
}
    b7e6:	bf00      	nop
    b7e8:	3714      	adds	r7, #20
    b7ea:	46bd      	mov	sp, r7
    b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7f0:	4770      	bx	lr
	...

0000b7f4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b7f4:	b580      	push	{r7, lr}
    b7f6:	b08c      	sub	sp, #48	; 0x30
    b7f8:	af00      	add	r7, sp, #0
    b7fa:	6078      	str	r0, [r7, #4]
    b7fc:	460b      	mov	r3, r1
    b7fe:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b800:	687b      	ldr	r3, [r7, #4]
    b802:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b804:	687b      	ldr	r3, [r7, #4]
    b806:	681b      	ldr	r3, [r3, #0]
    b808:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b80a:	f107 030c 	add.w	r3, r7, #12
    b80e:	2200      	movs	r2, #0
    b810:	601a      	str	r2, [r3, #0]
    b812:	605a      	str	r2, [r3, #4]
    b814:	609a      	str	r2, [r3, #8]
    b816:	60da      	str	r2, [r3, #12]
    b818:	611a      	str	r2, [r3, #16]
    b81a:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b81e:	7b1b      	ldrb	r3, [r3, #12]
    b820:	2b00      	cmp	r3, #0
    b822:	d001      	beq.n	b828 <n25q256a_xip_confirm+0x34>
    b824:	2206      	movs	r2, #6
    b826:	e000      	b.n	b82a <n25q256a_xip_confirm+0x36>
    b828:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b82a:	7b3b      	ldrb	r3, [r7, #12]
    b82c:	f362 0302 	bfi	r3, r2, #0, #3
    b830:	733b      	strb	r3, [r7, #12]
    b832:	7b3b      	ldrb	r3, [r7, #12]
    b834:	f043 0310 	orr.w	r3, r3, #16
    b838:	733b      	strb	r3, [r7, #12]
    b83a:	7b3b      	ldrb	r3, [r7, #12]
    b83c:	f043 0320 	orr.w	r3, r3, #32
    b840:	733b      	strb	r3, [r7, #12]
    b842:	7b3b      	ldrb	r3, [r7, #12]
    b844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b848:	733b      	strb	r3, [r7, #12]
    b84a:	7b3b      	ldrb	r3, [r7, #12]
    b84c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b850:	733b      	strb	r3, [r7, #12]
    b852:	7b7b      	ldrb	r3, [r7, #13]
    b854:	f043 0303 	orr.w	r3, r3, #3
    b858:	737b      	strb	r3, [r7, #13]
    b85a:	7b7b      	ldrb	r3, [r7, #13]
    b85c:	2201      	movs	r2, #1
    b85e:	f362 1305 	bfi	r3, r2, #4, #2
    b862:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b866:	7b1b      	ldrb	r3, [r3, #12]
    b868:	2b00      	cmp	r3, #0
    b86a:	d001      	beq.n	b870 <n25q256a_xip_confirm+0x7c>
    b86c:	2208      	movs	r2, #8
    b86e:	e000      	b.n	b872 <n25q256a_xip_confirm+0x7e>
    b870:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b872:	7bbb      	ldrb	r3, [r7, #14]
    b874:	f362 0304 	bfi	r3, r2, #0, #5
    b878:	73bb      	strb	r3, [r7, #14]
    b87a:	230b      	movs	r3, #11
    b87c:	743b      	strb	r3, [r7, #16]
    b87e:	78fb      	ldrb	r3, [r7, #3]
    b880:	2b00      	cmp	r3, #0
    b882:	d001      	beq.n	b888 <n25q256a_xip_confirm+0x94>
    b884:	2300      	movs	r3, #0
    b886:	e000      	b.n	b88a <n25q256a_xip_confirm+0x96>
    b888:	23ff      	movs	r3, #255	; 0xff
    b88a:	747b      	strb	r3, [r7, #17]
    b88c:	2301      	movs	r3, #1
    b88e:	61bb      	str	r3, [r7, #24]
    b890:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b894:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b896:	f107 030c 	add.w	r3, r7, #12
    b89a:	4619      	mov	r1, r3
    b89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b89e:	4b07      	ldr	r3, [pc, #28]	; (b8bc <n25q256a_xip_confirm+0xc8>)
    b8a0:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b8a2:	78fb      	ldrb	r3, [r7, #3]
    b8a4:	2b00      	cmp	r3, #0
    b8a6:	d001      	beq.n	b8ac <n25q256a_xip_confirm+0xb8>
    b8a8:	2202      	movs	r2, #2
    b8aa:	e000      	b.n	b8ae <n25q256a_xip_confirm+0xba>
    b8ac:	2201      	movs	r2, #1
    b8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b8b0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b8b2:	2300      	movs	r3, #0
}
    b8b4:	4618      	mov	r0, r3
    b8b6:	3730      	adds	r7, #48	; 0x30
    b8b8:	46bd      	mov	sp, r7
    b8ba:	bd80      	pop	{r7, pc}
    b8bc:	00002ae1 	.word	0x00002ae1

0000b8c0 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b8c0:	b580      	push	{r7, lr}
    b8c2:	b08c      	sub	sp, #48	; 0x30
    b8c4:	af00      	add	r7, sp, #0
    b8c6:	6078      	str	r0, [r7, #4]
    b8c8:	460b      	mov	r3, r1
    b8ca:	70fb      	strb	r3, [r7, #3]
    b8cc:	4613      	mov	r3, r2
    b8ce:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b8d0:	2300      	movs	r3, #0
    b8d2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b8d4:	687b      	ldr	r3, [r7, #4]
    b8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b8d8:	687b      	ldr	r3, [r7, #4]
    b8da:	681b      	ldr	r3, [r3, #0]
    b8dc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b8de:	f107 030c 	add.w	r3, r7, #12
    b8e2:	2200      	movs	r2, #0
    b8e4:	601a      	str	r2, [r3, #0]
    b8e6:	605a      	str	r2, [r3, #4]
    b8e8:	609a      	str	r2, [r3, #8]
    b8ea:	60da      	str	r2, [r3, #12]
    b8ec:	611a      	str	r2, [r3, #16]
    b8ee:	615a      	str	r2, [r3, #20]
    b8f0:	78fb      	ldrb	r3, [r7, #3]
    b8f2:	f003 0307 	and.w	r3, r3, #7
    b8f6:	b2da      	uxtb	r2, r3
    b8f8:	7b3b      	ldrb	r3, [r7, #12]
    b8fa:	f362 0302 	bfi	r3, r2, #0, #3
    b8fe:	733b      	strb	r3, [r7, #12]
    b900:	7b3b      	ldrb	r3, [r7, #12]
    b902:	f043 0310 	orr.w	r3, r3, #16
    b906:	733b      	strb	r3, [r7, #12]
    b908:	7b3b      	ldrb	r3, [r7, #12]
    b90a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b90e:	733b      	strb	r3, [r7, #12]
    b910:	78bb      	ldrb	r3, [r7, #2]
    b912:	743b      	strb	r3, [r7, #16]
    b914:	2301      	movs	r3, #1
    b916:	61bb      	str	r3, [r7, #24]
    b918:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b91c:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b920:	7b5b      	ldrb	r3, [r3, #13]
    b922:	2b00      	cmp	r3, #0
    b924:	d003      	beq.n	b92e <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b926:	2100      	movs	r1, #0
    b928:	6878      	ldr	r0, [r7, #4]
    b92a:	4b0a      	ldr	r3, [pc, #40]	; (b954 <n25q256a_read_reg+0x94>)
    b92c:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b92e:	f107 030c 	add.w	r3, r7, #12
    b932:	4619      	mov	r1, r3
    b934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b936:	4b08      	ldr	r3, [pc, #32]	; (b958 <n25q256a_read_reg+0x98>)
    b938:	4798      	blx	r3
	if (n25q->xip_mode) {
    b93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b93c:	7b5b      	ldrb	r3, [r3, #13]
    b93e:	2b00      	cmp	r3, #0
    b940:	d003      	beq.n	b94a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b942:	2101      	movs	r1, #1
    b944:	6878      	ldr	r0, [r7, #4]
    b946:	4b03      	ldr	r3, [pc, #12]	; (b954 <n25q256a_read_reg+0x94>)
    b948:	4798      	blx	r3
	}
	return status;
    b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b94c:	4618      	mov	r0, r3
    b94e:	3730      	adds	r7, #48	; 0x30
    b950:	46bd      	mov	sp, r7
    b952:	bd80      	pop	{r7, pc}
    b954:	0000b7f5 	.word	0x0000b7f5
    b958:	00002ae1 	.word	0x00002ae1

0000b95c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b95c:	b580      	push	{r7, lr}
    b95e:	b08c      	sub	sp, #48	; 0x30
    b960:	af00      	add	r7, sp, #0
    b962:	60f8      	str	r0, [r7, #12]
    b964:	607b      	str	r3, [r7, #4]
    b966:	460b      	mov	r3, r1
    b968:	72fb      	strb	r3, [r7, #11]
    b96a:	4613      	mov	r3, r2
    b96c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b96e:	68fb      	ldr	r3, [r7, #12]
    b970:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b972:	68fb      	ldr	r3, [r7, #12]
    b974:	681b      	ldr	r3, [r3, #0]
    b976:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b978:	f107 0310 	add.w	r3, r7, #16
    b97c:	2200      	movs	r2, #0
    b97e:	601a      	str	r2, [r3, #0]
    b980:	605a      	str	r2, [r3, #4]
    b982:	609a      	str	r2, [r3, #8]
    b984:	60da      	str	r2, [r3, #12]
    b986:	611a      	str	r2, [r3, #16]
    b988:	615a      	str	r2, [r3, #20]
    b98a:	7afb      	ldrb	r3, [r7, #11]
    b98c:	f003 0307 	and.w	r3, r3, #7
    b990:	b2da      	uxtb	r2, r3
    b992:	7c3b      	ldrb	r3, [r7, #16]
    b994:	f362 0302 	bfi	r3, r2, #0, #3
    b998:	743b      	strb	r3, [r7, #16]
    b99a:	7c3b      	ldrb	r3, [r7, #16]
    b99c:	f043 0310 	orr.w	r3, r3, #16
    b9a0:	743b      	strb	r3, [r7, #16]
    b9a2:	7c3b      	ldrb	r3, [r7, #16]
    b9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b9a8:	743b      	strb	r3, [r7, #16]
    b9aa:	7c7b      	ldrb	r3, [r7, #17]
    b9ac:	2202      	movs	r2, #2
    b9ae:	f362 1305 	bfi	r3, r2, #4, #2
    b9b2:	747b      	strb	r3, [r7, #17]
    b9b4:	7abb      	ldrb	r3, [r7, #10]
    b9b6:	753b      	strb	r3, [r7, #20]
    b9b8:	2301      	movs	r3, #1
    b9ba:	61fb      	str	r3, [r7, #28]
    b9bc:	1d3b      	adds	r3, r7, #4
    b9be:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b9c2:	7b5b      	ldrb	r3, [r3, #13]
    b9c4:	2b00      	cmp	r3, #0
    b9c6:	d003      	beq.n	b9d0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b9c8:	2100      	movs	r1, #0
    b9ca:	68f8      	ldr	r0, [r7, #12]
    b9cc:	4b09      	ldr	r3, [pc, #36]	; (b9f4 <n25q256a_write_reg+0x98>)
    b9ce:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b9d0:	f107 0310 	add.w	r3, r7, #16
    b9d4:	4619      	mov	r1, r3
    b9d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b9d8:	4b07      	ldr	r3, [pc, #28]	; (b9f8 <n25q256a_write_reg+0x9c>)
    b9da:	4798      	blx	r3
	if (n25q->xip_mode) {
    b9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b9de:	7b5b      	ldrb	r3, [r3, #13]
    b9e0:	2b00      	cmp	r3, #0
    b9e2:	d003      	beq.n	b9ec <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b9e4:	2101      	movs	r1, #1
    b9e6:	68f8      	ldr	r0, [r7, #12]
    b9e8:	4b02      	ldr	r3, [pc, #8]	; (b9f4 <n25q256a_write_reg+0x98>)
    b9ea:	4798      	blx	r3
	}
}
    b9ec:	bf00      	nop
    b9ee:	3730      	adds	r7, #48	; 0x30
    b9f0:	46bd      	mov	sp, r7
    b9f2:	bd80      	pop	{r7, pc}
    b9f4:	0000b7f5 	.word	0x0000b7f5
    b9f8:	00002ae1 	.word	0x00002ae1

0000b9fc <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b9fc:	b580      	push	{r7, lr}
    b9fe:	b090      	sub	sp, #64	; 0x40
    ba00:	af00      	add	r7, sp, #0
    ba02:	6078      	str	r0, [r7, #4]
    ba04:	460b      	mov	r3, r1
    ba06:	70fb      	strb	r3, [r7, #3]
    ba08:	4613      	mov	r3, r2
    ba0a:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ba0c:	687b      	ldr	r3, [r7, #4]
    ba0e:	681b      	ldr	r3, [r3, #0]
    ba10:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    ba12:	78bb      	ldrb	r3, [r7, #2]
    ba14:	2b00      	cmp	r3, #0
    ba16:	d001      	beq.n	ba1c <n25q256a_write_enable+0x20>
    ba18:	2306      	movs	r3, #6
    ba1a:	e000      	b.n	ba1e <n25q256a_write_enable+0x22>
    ba1c:	2304      	movs	r3, #4
    ba1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    ba22:	f107 0320 	add.w	r3, r7, #32
    ba26:	2200      	movs	r2, #0
    ba28:	601a      	str	r2, [r3, #0]
    ba2a:	605a      	str	r2, [r3, #4]
    ba2c:	609a      	str	r2, [r3, #8]
    ba2e:	60da      	str	r2, [r3, #12]
    ba30:	611a      	str	r2, [r3, #16]
    ba32:	615a      	str	r2, [r3, #20]
    ba34:	78fb      	ldrb	r3, [r7, #3]
    ba36:	f003 0307 	and.w	r3, r3, #7
    ba3a:	b2da      	uxtb	r2, r3
    ba3c:	f897 3020 	ldrb.w	r3, [r7, #32]
    ba40:	f362 0302 	bfi	r3, r2, #0, #3
    ba44:	f887 3020 	strb.w	r3, [r7, #32]
    ba48:	f897 3020 	ldrb.w	r3, [r7, #32]
    ba4c:	f043 0310 	orr.w	r3, r3, #16
    ba50:	f887 3020 	strb.w	r3, [r7, #32]
    ba54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    ba58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    ba5c:	f107 0308 	add.w	r3, r7, #8
    ba60:	2200      	movs	r2, #0
    ba62:	601a      	str	r2, [r3, #0]
    ba64:	605a      	str	r2, [r3, #4]
    ba66:	609a      	str	r2, [r3, #8]
    ba68:	60da      	str	r2, [r3, #12]
    ba6a:	611a      	str	r2, [r3, #16]
    ba6c:	615a      	str	r2, [r3, #20]
    ba6e:	78fb      	ldrb	r3, [r7, #3]
    ba70:	f003 0307 	and.w	r3, r3, #7
    ba74:	b2da      	uxtb	r2, r3
    ba76:	7a3b      	ldrb	r3, [r7, #8]
    ba78:	f362 0302 	bfi	r3, r2, #0, #3
    ba7c:	723b      	strb	r3, [r7, #8]
    ba7e:	7a3b      	ldrb	r3, [r7, #8]
    ba80:	f043 0310 	orr.w	r3, r3, #16
    ba84:	723b      	strb	r3, [r7, #8]
    ba86:	7a3b      	ldrb	r3, [r7, #8]
    ba88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ba8c:	723b      	strb	r3, [r7, #8]
    ba8e:	2305      	movs	r3, #5
    ba90:	733b      	strb	r3, [r7, #12]
    ba92:	2301      	movs	r3, #1
    ba94:	617b      	str	r3, [r7, #20]
    ba96:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    ba9a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    ba9c:	f107 0320 	add.w	r3, r7, #32
    baa0:	4619      	mov	r1, r3
    baa2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    baa4:	4b08      	ldr	r3, [pc, #32]	; (bac8 <n25q256a_write_enable+0xcc>)
    baa6:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    baa8:	f107 0308 	add.w	r3, r7, #8
    baac:	4619      	mov	r1, r3
    baae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bab0:	4b05      	ldr	r3, [pc, #20]	; (bac8 <n25q256a_write_enable+0xcc>)
    bab2:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    bab4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    bab8:	f003 0302 	and.w	r3, r3, #2
    babc:	2b00      	cmp	r3, #0
    babe:	d0ed      	beq.n	ba9c <n25q256a_write_enable+0xa0>
}
    bac0:	bf00      	nop
    bac2:	3740      	adds	r7, #64	; 0x40
    bac4:	46bd      	mov	sp, r7
    bac6:	bd80      	pop	{r7, pc}
    bac8:	00002ae1 	.word	0x00002ae1

0000bacc <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    bacc:	b590      	push	{r4, r7, lr}
    bace:	b087      	sub	sp, #28
    bad0:	af00      	add	r7, sp, #0
    bad2:	6078      	str	r0, [r7, #4]
    bad4:	460b      	mov	r3, r1
    bad6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    bad8:	687b      	ldr	r3, [r7, #4]
    bada:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    badc:	68fb      	ldr	r3, [r7, #12]
    bade:	7b1b      	ldrb	r3, [r3, #12]
    bae0:	2b00      	cmp	r3, #0
    bae2:	d001      	beq.n	bae8 <n25q256a_switch_mode+0x1c>
    bae4:	2306      	movs	r3, #6
    bae6:	e000      	b.n	baea <n25q256a_switch_mode+0x1e>
    bae8:	2300      	movs	r3, #0
    baea:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    baec:	7afb      	ldrb	r3, [r7, #11]
    baee:	2265      	movs	r2, #101	; 0x65
    baf0:	4619      	mov	r1, r3
    baf2:	6878      	ldr	r0, [r7, #4]
    baf4:	4b25      	ldr	r3, [pc, #148]	; (bb8c <n25q256a_switch_mode+0xc0>)
    baf6:	4798      	blx	r3
    baf8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    bafa:	2300      	movs	r3, #0
    bafc:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    bafe:	68fb      	ldr	r3, [r7, #12]
    bb00:	7b1b      	ldrb	r3, [r3, #12]
    bb02:	78fa      	ldrb	r2, [r7, #3]
    bb04:	429a      	cmp	r2, r3
    bb06:	d03d      	beq.n	bb84 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    bb08:	78fb      	ldrb	r3, [r7, #3]
    bb0a:	2b00      	cmp	r3, #0
    bb0c:	d00b      	beq.n	bb26 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    bb0e:	697b      	ldr	r3, [r7, #20]
    bb10:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bb14:	2b00      	cmp	r3, #0
    bb16:	d011      	beq.n	bb3c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    bb18:	697b      	ldr	r3, [r7, #20]
    bb1a:	f003 031f 	and.w	r3, r3, #31
    bb1e:	617b      	str	r3, [r7, #20]
			modify = 1;
    bb20:	2301      	movs	r3, #1
    bb22:	74fb      	strb	r3, [r7, #19]
    bb24:	e00a      	b.n	bb3c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    bb26:	697b      	ldr	r3, [r7, #20]
    bb28:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bb2c:	2b00      	cmp	r3, #0
    bb2e:	d105      	bne.n	bb3c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    bb30:	697b      	ldr	r3, [r7, #20]
    bb32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    bb36:	617b      	str	r3, [r7, #20]
			modify = 1;
    bb38:	2301      	movs	r3, #1
    bb3a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    bb3c:	7cfb      	ldrb	r3, [r7, #19]
    bb3e:	2b00      	cmp	r3, #0
    bb40:	d021      	beq.n	bb86 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    bb42:	68fb      	ldr	r3, [r7, #12]
    bb44:	78fa      	ldrb	r2, [r7, #3]
    bb46:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    bb48:	7afb      	ldrb	r3, [r7, #11]
    bb4a:	2201      	movs	r2, #1
    bb4c:	4619      	mov	r1, r3
    bb4e:	6878      	ldr	r0, [r7, #4]
    bb50:	4b0f      	ldr	r3, [pc, #60]	; (bb90 <n25q256a_switch_mode+0xc4>)
    bb52:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    bb54:	7af9      	ldrb	r1, [r7, #11]
    bb56:	697b      	ldr	r3, [r7, #20]
    bb58:	2261      	movs	r2, #97	; 0x61
    bb5a:	6878      	ldr	r0, [r7, #4]
    bb5c:	4c0d      	ldr	r4, [pc, #52]	; (bb94 <n25q256a_switch_mode+0xc8>)
    bb5e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bb60:	78fb      	ldrb	r3, [r7, #3]
    bb62:	2b00      	cmp	r3, #0
    bb64:	d001      	beq.n	bb6a <n25q256a_switch_mode+0x9e>
    bb66:	2306      	movs	r3, #6
    bb68:	e000      	b.n	bb6c <n25q256a_switch_mode+0xa0>
    bb6a:	2300      	movs	r3, #0
    bb6c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bb6e:	7afb      	ldrb	r3, [r7, #11]
    bb70:	2265      	movs	r2, #101	; 0x65
    bb72:	4619      	mov	r1, r3
    bb74:	6878      	ldr	r0, [r7, #4]
    bb76:	4b05      	ldr	r3, [pc, #20]	; (bb8c <n25q256a_switch_mode+0xc0>)
    bb78:	4798      	blx	r3
    bb7a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    bb7c:	68fb      	ldr	r3, [r7, #12]
    bb7e:	78fa      	ldrb	r2, [r7, #3]
    bb80:	731a      	strb	r2, [r3, #12]
    bb82:	e000      	b.n	bb86 <n25q256a_switch_mode+0xba>
		return;
    bb84:	bf00      	nop
	}
}
    bb86:	371c      	adds	r7, #28
    bb88:	46bd      	mov	sp, r7
    bb8a:	bd90      	pop	{r4, r7, pc}
    bb8c:	0000b8c1 	.word	0x0000b8c1
    bb90:	0000b9fd 	.word	0x0000b9fd
    bb94:	0000b95d 	.word	0x0000b95d

0000bb98 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    bb98:	b580      	push	{r7, lr}
    bb9a:	b086      	sub	sp, #24
    bb9c:	af00      	add	r7, sp, #0
    bb9e:	60f8      	str	r0, [r7, #12]
    bba0:	60b9      	str	r1, [r7, #8]
    bba2:	607a      	str	r2, [r7, #4]
    bba4:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    bba6:	68fb      	ldr	r3, [r7, #12]
    bba8:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    bbaa:	4a0c      	ldr	r2, [pc, #48]	; (bbdc <n25q256a_construct+0x44>)
    bbac:	68b9      	ldr	r1, [r7, #8]
    bbae:	68f8      	ldr	r0, [r7, #12]
    bbb0:	4b0b      	ldr	r3, [pc, #44]	; (bbe0 <n25q256a_construct+0x48>)
    bbb2:	4798      	blx	r3
	n25q->quad_mode    = 0;
    bbb4:	697b      	ldr	r3, [r7, #20]
    bbb6:	2200      	movs	r2, #0
    bbb8:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    bbba:	697b      	ldr	r3, [r7, #20]
    bbbc:	2200      	movs	r2, #0
    bbbe:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    bbc0:	697b      	ldr	r3, [r7, #20]
    bbc2:	687a      	ldr	r2, [r7, #4]
    bbc4:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    bbc6:	78fb      	ldrb	r3, [r7, #3]
    bbc8:	4619      	mov	r1, r3
    bbca:	68f8      	ldr	r0, [r7, #12]
    bbcc:	4b05      	ldr	r3, [pc, #20]	; (bbe4 <n25q256a_construct+0x4c>)
    bbce:	4798      	blx	r3
	return me;
    bbd0:	68fb      	ldr	r3, [r7, #12]
}
    bbd2:	4618      	mov	r0, r3
    bbd4:	3718      	adds	r7, #24
    bbd6:	46bd      	mov	sp, r7
    bbd8:	bd80      	pop	{r7, pc}
    bbda:	bf00      	nop
    bbdc:	00010b0c 	.word	0x00010b0c
    bbe0:	0000c075 	.word	0x0000c075
    bbe4:	0000bacd 	.word	0x0000bacd

0000bbe8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    bbe8:	b580      	push	{r7, lr}
    bbea:	b08c      	sub	sp, #48	; 0x30
    bbec:	af00      	add	r7, sp, #0
    bbee:	60f8      	str	r0, [r7, #12]
    bbf0:	60b9      	str	r1, [r7, #8]
    bbf2:	607a      	str	r2, [r7, #4]
    bbf4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bbf6:	68fb      	ldr	r3, [r7, #12]
    bbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bbfa:	68fb      	ldr	r3, [r7, #12]
    bbfc:	681b      	ldr	r3, [r3, #0]
    bbfe:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    bc00:	f107 0310 	add.w	r3, r7, #16
    bc04:	2200      	movs	r2, #0
    bc06:	601a      	str	r2, [r3, #0]
    bc08:	605a      	str	r2, [r3, #4]
    bc0a:	609a      	str	r2, [r3, #8]
    bc0c:	60da      	str	r2, [r3, #12]
    bc0e:	611a      	str	r2, [r3, #16]
    bc10:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc14:	7b1b      	ldrb	r3, [r3, #12]
    bc16:	2b00      	cmp	r3, #0
    bc18:	d001      	beq.n	bc1e <n25q256a_read+0x36>
    bc1a:	2206      	movs	r2, #6
    bc1c:	e000      	b.n	bc20 <n25q256a_read+0x38>
    bc1e:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    bc20:	7c3b      	ldrb	r3, [r7, #16]
    bc22:	f362 0302 	bfi	r3, r2, #0, #3
    bc26:	743b      	strb	r3, [r7, #16]
    bc28:	7c3b      	ldrb	r3, [r7, #16]
    bc2a:	f043 0310 	orr.w	r3, r3, #16
    bc2e:	743b      	strb	r3, [r7, #16]
    bc30:	7c3b      	ldrb	r3, [r7, #16]
    bc32:	f043 0320 	orr.w	r3, r3, #32
    bc36:	743b      	strb	r3, [r7, #16]
    bc38:	7c3b      	ldrb	r3, [r7, #16]
    bc3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bc3e:	743b      	strb	r3, [r7, #16]
    bc40:	7c7b      	ldrb	r3, [r7, #17]
    bc42:	2201      	movs	r2, #1
    bc44:	f362 1305 	bfi	r3, r2, #4, #2
    bc48:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    bc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc4c:	7b1b      	ldrb	r3, [r3, #12]
    bc4e:	2b00      	cmp	r3, #0
    bc50:	d001      	beq.n	bc56 <n25q256a_read+0x6e>
    bc52:	220a      	movs	r2, #10
    bc54:	e000      	b.n	bc58 <n25q256a_read+0x70>
    bc56:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    bc58:	7cbb      	ldrb	r3, [r7, #18]
    bc5a:	f362 0304 	bfi	r3, r2, #0, #5
    bc5e:	74bb      	strb	r3, [r7, #18]
    bc60:	230b      	movs	r3, #11
    bc62:	753b      	strb	r3, [r7, #20]
    bc64:	687b      	ldr	r3, [r7, #4]
    bc66:	61bb      	str	r3, [r7, #24]
    bc68:	683b      	ldr	r3, [r7, #0]
    bc6a:	61fb      	str	r3, [r7, #28]
    bc6c:	68bb      	ldr	r3, [r7, #8]
    bc6e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    bc70:	f107 0310 	add.w	r3, r7, #16
    bc74:	4619      	mov	r1, r3
    bc76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bc78:	4b03      	ldr	r3, [pc, #12]	; (bc88 <n25q256a_read+0xa0>)
    bc7a:	4798      	blx	r3
	return ERR_NONE;
    bc7c:	2300      	movs	r3, #0
}
    bc7e:	4618      	mov	r0, r3
    bc80:	3730      	adds	r7, #48	; 0x30
    bc82:	46bd      	mov	sp, r7
    bc84:	bd80      	pop	{r7, pc}
    bc86:	bf00      	nop
    bc88:	00002ae1 	.word	0x00002ae1

0000bc8c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    bc8c:	b580      	push	{r7, lr}
    bc8e:	b08c      	sub	sp, #48	; 0x30
    bc90:	af00      	add	r7, sp, #0
    bc92:	60f8      	str	r0, [r7, #12]
    bc94:	60b9      	str	r1, [r7, #8]
    bc96:	607a      	str	r2, [r7, #4]
    bc98:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bc9a:	68fb      	ldr	r3, [r7, #12]
    bc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bc9e:	68fb      	ldr	r3, [r7, #12]
    bca0:	681b      	ldr	r3, [r3, #0]
    bca2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    bca4:	f107 0310 	add.w	r3, r7, #16
    bca8:	2200      	movs	r2, #0
    bcaa:	601a      	str	r2, [r3, #0]
    bcac:	605a      	str	r2, [r3, #4]
    bcae:	609a      	str	r2, [r3, #8]
    bcb0:	60da      	str	r2, [r3, #12]
    bcb2:	611a      	str	r2, [r3, #16]
    bcb4:	615a      	str	r2, [r3, #20]
    bcb6:	7c3b      	ldrb	r3, [r7, #16]
    bcb8:	f043 0310 	orr.w	r3, r3, #16
    bcbc:	743b      	strb	r3, [r7, #16]
    bcbe:	7c3b      	ldrb	r3, [r7, #16]
    bcc0:	f043 0320 	orr.w	r3, r3, #32
    bcc4:	743b      	strb	r3, [r7, #16]
    bcc6:	7c3b      	ldrb	r3, [r7, #16]
    bcc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bccc:	743b      	strb	r3, [r7, #16]
    bcce:	7c7b      	ldrb	r3, [r7, #17]
    bcd0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    bcd4:	747b      	strb	r3, [r7, #17]
    bcd6:	2302      	movs	r3, #2
    bcd8:	753b      	strb	r3, [r7, #20]
    bcda:	687b      	ldr	r3, [r7, #4]
    bcdc:	61bb      	str	r3, [r7, #24]
    bcde:	683b      	ldr	r3, [r7, #0]
    bce0:	61fb      	str	r3, [r7, #28]
    bce2:	68bb      	ldr	r3, [r7, #8]
    bce4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bce8:	7b1b      	ldrb	r3, [r3, #12]
    bcea:	2b00      	cmp	r3, #0
    bcec:	d001      	beq.n	bcf2 <n25q256a_write+0x66>
    bcee:	2206      	movs	r2, #6
    bcf0:	e000      	b.n	bcf4 <n25q256a_write+0x68>
    bcf2:	2200      	movs	r2, #0
    bcf4:	7c3b      	ldrb	r3, [r7, #16]
    bcf6:	f362 0302 	bfi	r3, r2, #0, #3
    bcfa:	743b      	strb	r3, [r7, #16]
	while (length) {
    bcfc:	e035      	b.n	bd6a <n25q256a_write+0xde>
		cmd.address = address;
    bcfe:	687b      	ldr	r3, [r7, #4]
    bd00:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    bd02:	683b      	ldr	r3, [r7, #0]
    bd04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    bd08:	d802      	bhi.n	bd10 <n25q256a_write+0x84>
			cmd.buf_len = length;
    bd0a:	683b      	ldr	r3, [r7, #0]
    bd0c:	61fb      	str	r3, [r7, #28]
    bd0e:	e002      	b.n	bd16 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    bd10:	f44f 7380 	mov.w	r3, #256	; 0x100
    bd14:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bd16:	7c3b      	ldrb	r3, [r7, #16]
    bd18:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bd1c:	b2db      	uxtb	r3, r3
    bd1e:	2201      	movs	r2, #1
    bd20:	4619      	mov	r1, r3
    bd22:	68f8      	ldr	r0, [r7, #12]
    bd24:	4b19      	ldr	r3, [pc, #100]	; (bd8c <n25q256a_write+0x100>)
    bd26:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    bd28:	f107 0310 	add.w	r3, r7, #16
    bd2c:	4619      	mov	r1, r3
    bd2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bd30:	4b17      	ldr	r3, [pc, #92]	; (bd90 <n25q256a_write+0x104>)
    bd32:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bd34:	bf00      	nop
    bd36:	7c3b      	ldrb	r3, [r7, #16]
    bd38:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bd3c:	b2db      	uxtb	r3, r3
    bd3e:	2270      	movs	r2, #112	; 0x70
    bd40:	4619      	mov	r1, r3
    bd42:	68f8      	ldr	r0, [r7, #12]
    bd44:	4b13      	ldr	r3, [pc, #76]	; (bd94 <n25q256a_write+0x108>)
    bd46:	4798      	blx	r3
    bd48:	4603      	mov	r3, r0
    bd4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bd4e:	2b00      	cmp	r3, #0
    bd50:	d0f1      	beq.n	bd36 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    bd52:	6a3a      	ldr	r2, [r7, #32]
    bd54:	69fb      	ldr	r3, [r7, #28]
    bd56:	4413      	add	r3, r2
    bd58:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    bd5a:	69fb      	ldr	r3, [r7, #28]
    bd5c:	683a      	ldr	r2, [r7, #0]
    bd5e:	1ad3      	subs	r3, r2, r3
    bd60:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    bd62:	69fb      	ldr	r3, [r7, #28]
    bd64:	687a      	ldr	r2, [r7, #4]
    bd66:	4413      	add	r3, r2
    bd68:	607b      	str	r3, [r7, #4]
	while (length) {
    bd6a:	683b      	ldr	r3, [r7, #0]
    bd6c:	2b00      	cmp	r3, #0
    bd6e:	d1c6      	bne.n	bcfe <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    bd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd72:	7b5b      	ldrb	r3, [r3, #13]
    bd74:	2b00      	cmp	r3, #0
    bd76:	d003      	beq.n	bd80 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    bd78:	2101      	movs	r1, #1
    bd7a:	68f8      	ldr	r0, [r7, #12]
    bd7c:	4b06      	ldr	r3, [pc, #24]	; (bd98 <n25q256a_write+0x10c>)
    bd7e:	4798      	blx	r3
	}
	return ERR_NONE;
    bd80:	2300      	movs	r3, #0
}
    bd82:	4618      	mov	r0, r3
    bd84:	3730      	adds	r7, #48	; 0x30
    bd86:	46bd      	mov	sp, r7
    bd88:	bd80      	pop	{r7, pc}
    bd8a:	bf00      	nop
    bd8c:	0000b9fd 	.word	0x0000b9fd
    bd90:	00002ae1 	.word	0x00002ae1
    bd94:	0000b8c1 	.word	0x0000b8c1
    bd98:	0000b7f5 	.word	0x0000b7f5

0000bd9c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    bd9c:	b580      	push	{r7, lr}
    bd9e:	b090      	sub	sp, #64	; 0x40
    bda0:	af00      	add	r7, sp, #0
    bda2:	60f8      	str	r0, [r7, #12]
    bda4:	60b9      	str	r1, [r7, #8]
    bda6:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bda8:	68fb      	ldr	r3, [r7, #12]
    bdaa:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bdac:	68fb      	ldr	r3, [r7, #12]
    bdae:	681b      	ldr	r3, [r3, #0]
    bdb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    bdb2:	f107 0314 	add.w	r3, r7, #20
    bdb6:	2200      	movs	r2, #0
    bdb8:	601a      	str	r2, [r3, #0]
    bdba:	605a      	str	r2, [r3, #4]
    bdbc:	609a      	str	r2, [r3, #8]
    bdbe:	60da      	str	r2, [r3, #12]
    bdc0:	611a      	str	r2, [r3, #16]
    bdc2:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bdc6:	7b1b      	ldrb	r3, [r3, #12]
    bdc8:	2b00      	cmp	r3, #0
    bdca:	d001      	beq.n	bdd0 <n25q256a_erase+0x34>
    bdcc:	2206      	movs	r2, #6
    bdce:	e000      	b.n	bdd2 <n25q256a_erase+0x36>
    bdd0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    bdd2:	7d3b      	ldrb	r3, [r7, #20]
    bdd4:	f362 0302 	bfi	r3, r2, #0, #3
    bdd8:	753b      	strb	r3, [r7, #20]
    bdda:	7d3b      	ldrb	r3, [r7, #20]
    bddc:	f043 0310 	orr.w	r3, r3, #16
    bde0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    bde2:	687b      	ldr	r3, [r7, #4]
    bde4:	4a56      	ldr	r2, [pc, #344]	; (bf40 <n25q256a_erase+0x1a4>)
    bde6:	4293      	cmp	r3, r2
    bde8:	bf94      	ite	ls
    bdea:	2301      	movls	r3, #1
    bdec:	2300      	movhi	r3, #0
    bdee:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    bdf0:	7d3b      	ldrb	r3, [r7, #20]
    bdf2:	f362 1345 	bfi	r3, r2, #5, #1
    bdf6:	753b      	strb	r3, [r7, #20]
    bdf8:	7d7b      	ldrb	r3, [r7, #21]
    bdfa:	2202      	movs	r2, #2
    bdfc:	f362 1305 	bfi	r3, r2, #4, #2
    be00:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    be02:	68bb      	ldr	r3, [r7, #8]
    be04:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    be06:	687b      	ldr	r3, [r7, #4]
    be08:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    be0a:	2300      	movs	r3, #0
    be0c:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    be0e:	687b      	ldr	r3, [r7, #4]
    be10:	f3c3 030b 	ubfx	r3, r3, #0, #12
    be14:	2b00      	cmp	r3, #0
    be16:	d104      	bne.n	be22 <n25q256a_erase+0x86>
    be18:	68bb      	ldr	r3, [r7, #8]
    be1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    be1e:	2b00      	cmp	r3, #0
    be20:	d002      	beq.n	be28 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    be22:	f06f 030c 	mvn.w	r3, #12
    be26:	e087      	b.n	bf38 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    be28:	687b      	ldr	r3, [r7, #4]
    be2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    be2e:	d368      	bcc.n	bf02 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    be30:	23c7      	movs	r3, #199	; 0xc7
    be32:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    be34:	7d3b      	ldrb	r3, [r7, #20]
    be36:	f3c3 0302 	ubfx	r3, r3, #0, #3
    be3a:	b2db      	uxtb	r3, r3
    be3c:	2201      	movs	r2, #1
    be3e:	4619      	mov	r1, r3
    be40:	68f8      	ldr	r0, [r7, #12]
    be42:	4b40      	ldr	r3, [pc, #256]	; (bf44 <n25q256a_erase+0x1a8>)
    be44:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    be46:	f107 0314 	add.w	r3, r7, #20
    be4a:	4619      	mov	r1, r3
    be4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    be4e:	4b3e      	ldr	r3, [pc, #248]	; (bf48 <n25q256a_erase+0x1ac>)
    be50:	4798      	blx	r3
    be52:	e059      	b.n	bf08 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    be54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    be56:	b29b      	uxth	r3, r3
    be58:	2b00      	cmp	r3, #0
    be5a:	d11f      	bne.n	be9c <n25q256a_erase+0x100>
    be5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    be5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    be62:	d31b      	bcc.n	be9c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    be64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    be66:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    be68:	23d8      	movs	r3, #216	; 0xd8
    be6a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    be6c:	7d3b      	ldrb	r3, [r7, #20]
    be6e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    be72:	b2db      	uxtb	r3, r3
    be74:	2201      	movs	r2, #1
    be76:	4619      	mov	r1, r3
    be78:	68f8      	ldr	r0, [r7, #12]
    be7a:	4b32      	ldr	r3, [pc, #200]	; (bf44 <n25q256a_erase+0x1a8>)
    be7c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    be7e:	f107 0314 	add.w	r3, r7, #20
    be82:	4619      	mov	r1, r3
    be84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    be86:	4b30      	ldr	r3, [pc, #192]	; (bf48 <n25q256a_erase+0x1ac>)
    be88:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    be8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    be8c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    be90:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    be92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    be94:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    be98:	63bb      	str	r3, [r7, #56]	; 0x38
    be9a:	e023      	b.n	bee4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    be9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    be9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    bea2:	d31b      	bcc.n	bedc <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    bea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bea6:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    bea8:	2320      	movs	r3, #32
    beaa:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    beac:	7d3b      	ldrb	r3, [r7, #20]
    beae:	f3c3 0302 	ubfx	r3, r3, #0, #3
    beb2:	b2db      	uxtb	r3, r3
    beb4:	2201      	movs	r2, #1
    beb6:	4619      	mov	r1, r3
    beb8:	68f8      	ldr	r0, [r7, #12]
    beba:	4b22      	ldr	r3, [pc, #136]	; (bf44 <n25q256a_erase+0x1a8>)
    bebc:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bebe:	f107 0314 	add.w	r3, r7, #20
    bec2:	4619      	mov	r1, r3
    bec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bec6:	4b20      	ldr	r3, [pc, #128]	; (bf48 <n25q256a_erase+0x1ac>)
    bec8:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    beca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    becc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bed0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    bed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bed4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bed8:	63bb      	str	r3, [r7, #56]	; 0x38
    beda:	e003      	b.n	bee4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    bedc:	f06f 030c 	mvn.w	r3, #12
    bee0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    bee2:	e011      	b.n	bf08 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bee4:	bf00      	nop
    bee6:	7d3b      	ldrb	r3, [r7, #20]
    bee8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    beec:	b2db      	uxtb	r3, r3
    beee:	2270      	movs	r2, #112	; 0x70
    bef0:	4619      	mov	r1, r3
    bef2:	68f8      	ldr	r0, [r7, #12]
    bef4:	4b15      	ldr	r3, [pc, #84]	; (bf4c <n25q256a_erase+0x1b0>)
    bef6:	4798      	blx	r3
    bef8:	4603      	mov	r3, r0
    befa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    befe:	2b00      	cmp	r3, #0
    bf00:	d0f1      	beq.n	bee6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    bf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bf04:	2b00      	cmp	r3, #0
    bf06:	d1a5      	bne.n	be54 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bf08:	bf00      	nop
    bf0a:	7d3b      	ldrb	r3, [r7, #20]
    bf0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bf10:	b2db      	uxtb	r3, r3
    bf12:	2270      	movs	r2, #112	; 0x70
    bf14:	4619      	mov	r1, r3
    bf16:	68f8      	ldr	r0, [r7, #12]
    bf18:	4b0c      	ldr	r3, [pc, #48]	; (bf4c <n25q256a_erase+0x1b0>)
    bf1a:	4798      	blx	r3
    bf1c:	4603      	mov	r3, r0
    bf1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bf22:	2b00      	cmp	r3, #0
    bf24:	d0f1      	beq.n	bf0a <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bf28:	7b5b      	ldrb	r3, [r3, #13]
    bf2a:	2b00      	cmp	r3, #0
    bf2c:	d003      	beq.n	bf36 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    bf2e:	2101      	movs	r1, #1
    bf30:	68f8      	ldr	r0, [r7, #12]
    bf32:	4b07      	ldr	r3, [pc, #28]	; (bf50 <n25q256a_erase+0x1b4>)
    bf34:	4798      	blx	r3
	}
	return rc;
    bf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    bf38:	4618      	mov	r0, r3
    bf3a:	3740      	adds	r7, #64	; 0x40
    bf3c:	46bd      	mov	sp, r7
    bf3e:	bd80      	pop	{r7, pc}
    bf40:	001fffff 	.word	0x001fffff
    bf44:	0000b9fd 	.word	0x0000b9fd
    bf48:	00002ae1 	.word	0x00002ae1
    bf4c:	0000b8c1 	.word	0x0000b8c1
    bf50:	0000b7f5 	.word	0x0000b7f5

0000bf54 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    bf54:	b590      	push	{r4, r7, lr}
    bf56:	b085      	sub	sp, #20
    bf58:	af00      	add	r7, sp, #0
    bf5a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    bf5c:	687b      	ldr	r3, [r7, #4]
    bf5e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bf60:	68fb      	ldr	r3, [r7, #12]
    bf62:	7b1b      	ldrb	r3, [r3, #12]
    bf64:	2b00      	cmp	r3, #0
    bf66:	d001      	beq.n	bf6c <n25q256a_enable_xip+0x18>
    bf68:	2306      	movs	r3, #6
    bf6a:	e000      	b.n	bf6e <n25q256a_enable_xip+0x1a>
    bf6c:	2300      	movs	r3, #0
    bf6e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    bf70:	68fb      	ldr	r3, [r7, #12]
    bf72:	7b5b      	ldrb	r3, [r3, #13]
    bf74:	2b00      	cmp	r3, #0
    bf76:	d129      	bne.n	bfcc <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bf78:	7afb      	ldrb	r3, [r7, #11]
    bf7a:	2285      	movs	r2, #133	; 0x85
    bf7c:	4619      	mov	r1, r3
    bf7e:	6878      	ldr	r0, [r7, #4]
    bf80:	4b15      	ldr	r3, [pc, #84]	; (bfd8 <n25q256a_enable_xip+0x84>)
    bf82:	4798      	blx	r3
    bf84:	4603      	mov	r3, r0
    bf86:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    bf88:	7abb      	ldrb	r3, [r7, #10]
    bf8a:	f003 0308 	and.w	r3, r3, #8
    bf8e:	2b00      	cmp	r3, #0
    bf90:	d015      	beq.n	bfbe <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    bf92:	7abb      	ldrb	r3, [r7, #10]
    bf94:	f023 0308 	bic.w	r3, r3, #8
    bf98:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    bf9a:	7abb      	ldrb	r3, [r7, #10]
    bf9c:	7af9      	ldrb	r1, [r7, #11]
    bf9e:	2281      	movs	r2, #129	; 0x81
    bfa0:	6878      	ldr	r0, [r7, #4]
    bfa2:	4c0e      	ldr	r4, [pc, #56]	; (bfdc <n25q256a_enable_xip+0x88>)
    bfa4:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bfa6:	bf00      	nop
    bfa8:	7afb      	ldrb	r3, [r7, #11]
    bfaa:	2270      	movs	r2, #112	; 0x70
    bfac:	4619      	mov	r1, r3
    bfae:	6878      	ldr	r0, [r7, #4]
    bfb0:	4b09      	ldr	r3, [pc, #36]	; (bfd8 <n25q256a_enable_xip+0x84>)
    bfb2:	4798      	blx	r3
    bfb4:	4603      	mov	r3, r0
    bfb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bfba:	2b00      	cmp	r3, #0
    bfbc:	d0f4      	beq.n	bfa8 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    bfbe:	68fb      	ldr	r3, [r7, #12]
    bfc0:	2201      	movs	r2, #1
    bfc2:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    bfc4:	2101      	movs	r1, #1
    bfc6:	6878      	ldr	r0, [r7, #4]
    bfc8:	4b05      	ldr	r3, [pc, #20]	; (bfe0 <n25q256a_enable_xip+0x8c>)
    bfca:	4798      	blx	r3
	}
	return ERR_NONE;
    bfcc:	2300      	movs	r3, #0
}
    bfce:	4618      	mov	r0, r3
    bfd0:	3714      	adds	r7, #20
    bfd2:	46bd      	mov	sp, r7
    bfd4:	bd90      	pop	{r4, r7, pc}
    bfd6:	bf00      	nop
    bfd8:	0000b8c1 	.word	0x0000b8c1
    bfdc:	0000b95d 	.word	0x0000b95d
    bfe0:	0000b7f5 	.word	0x0000b7f5

0000bfe4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    bfe4:	b580      	push	{r7, lr}
    bfe6:	b086      	sub	sp, #24
    bfe8:	af00      	add	r7, sp, #0
    bfea:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bfec:	687b      	ldr	r3, [r7, #4]
    bfee:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bff0:	687b      	ldr	r3, [r7, #4]
    bff2:	681b      	ldr	r3, [r3, #0]
    bff4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bff6:	697b      	ldr	r3, [r7, #20]
    bff8:	7b1b      	ldrb	r3, [r3, #12]
    bffa:	2b00      	cmp	r3, #0
    bffc:	d001      	beq.n	c002 <n25q256a_disable_xip+0x1e>
    bffe:	2306      	movs	r3, #6
    c000:	e000      	b.n	c004 <n25q256a_disable_xip+0x20>
    c002:	2300      	movs	r3, #0
    c004:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c006:	2100      	movs	r1, #0
    c008:	6878      	ldr	r0, [r7, #4]
    c00a:	4b15      	ldr	r3, [pc, #84]	; (c060 <n25q256a_disable_xip+0x7c>)
    c00c:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c00e:	7bfb      	ldrb	r3, [r7, #15]
    c010:	2285      	movs	r2, #133	; 0x85
    c012:	4619      	mov	r1, r3
    c014:	6878      	ldr	r0, [r7, #4]
    c016:	4b13      	ldr	r3, [pc, #76]	; (c064 <n25q256a_disable_xip+0x80>)
    c018:	4798      	blx	r3
    c01a:	4603      	mov	r3, r0
    c01c:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c01e:	7bbb      	ldrb	r3, [r7, #14]
    c020:	f003 0308 	and.w	r3, r3, #8
    c024:	2b00      	cmp	r3, #0
    c026:	d113      	bne.n	c050 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c028:	697b      	ldr	r3, [r7, #20]
    c02a:	689b      	ldr	r3, [r3, #8]
    c02c:	2b00      	cmp	r3, #0
    c02e:	d00f      	beq.n	c050 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c030:	693b      	ldr	r3, [r7, #16]
    c032:	681b      	ldr	r3, [r3, #0]
    c034:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c036:	6938      	ldr	r0, [r7, #16]
    c038:	4b0b      	ldr	r3, [pc, #44]	; (c068 <n25q256a_disable_xip+0x84>)
    c03a:	4798      	blx	r3
			n25q->pin_exit_xip();
    c03c:	697b      	ldr	r3, [r7, #20]
    c03e:	689b      	ldr	r3, [r3, #8]
    c040:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c042:	68b9      	ldr	r1, [r7, #8]
    c044:	6938      	ldr	r0, [r7, #16]
    c046:	4b09      	ldr	r3, [pc, #36]	; (c06c <n25q256a_disable_xip+0x88>)
    c048:	4798      	blx	r3
			qspi_sync_enable(descr);
    c04a:	6938      	ldr	r0, [r7, #16]
    c04c:	4b08      	ldr	r3, [pc, #32]	; (c070 <n25q256a_disable_xip+0x8c>)
    c04e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c050:	697b      	ldr	r3, [r7, #20]
    c052:	2200      	movs	r2, #0
    c054:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c056:	2300      	movs	r3, #0
}
    c058:	4618      	mov	r0, r3
    c05a:	3718      	adds	r7, #24
    c05c:	46bd      	mov	sp, r7
    c05e:	bd80      	pop	{r7, pc}
    c060:	0000b7f5 	.word	0x0000b7f5
    c064:	0000b8c1 	.word	0x0000b8c1
    c068:	00002aa5 	.word	0x00002aa5
    c06c:	00002a1d 	.word	0x00002a1d
    c070:	00002a69 	.word	0x00002a69

0000c074 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c074:	b480      	push	{r7}
    c076:	b085      	sub	sp, #20
    c078:	af00      	add	r7, sp, #0
    c07a:	60f8      	str	r0, [r7, #12]
    c07c:	60b9      	str	r1, [r7, #8]
    c07e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c080:	68fb      	ldr	r3, [r7, #12]
    c082:	68ba      	ldr	r2, [r7, #8]
    c084:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c086:	68fb      	ldr	r3, [r7, #12]
    c088:	687a      	ldr	r2, [r7, #4]
    c08a:	605a      	str	r2, [r3, #4]

	return me;
    c08c:	68fb      	ldr	r3, [r7, #12]
}
    c08e:	4618      	mov	r0, r3
    c090:	3714      	adds	r7, #20
    c092:	46bd      	mov	sp, r7
    c094:	f85d 7b04 	ldr.w	r7, [sp], #4
    c098:	4770      	bx	lr

0000c09a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c09a:	b480      	push	{r7}
    c09c:	b083      	sub	sp, #12
    c09e:	af00      	add	r7, sp, #0
    c0a0:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c0a2:	687b      	ldr	r3, [r7, #4]
    c0a4:	781b      	ldrb	r3, [r3, #0]
    c0a6:	b29a      	uxth	r2, r3
    c0a8:	687b      	ldr	r3, [r7, #4]
    c0aa:	3301      	adds	r3, #1
    c0ac:	781b      	ldrb	r3, [r3, #0]
    c0ae:	b29b      	uxth	r3, r3
    c0b0:	021b      	lsls	r3, r3, #8
    c0b2:	b29b      	uxth	r3, r3
    c0b4:	4413      	add	r3, r2
    c0b6:	b29b      	uxth	r3, r3
}
    c0b8:	4618      	mov	r0, r3
    c0ba:	370c      	adds	r7, #12
    c0bc:	46bd      	mov	sp, r7
    c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0c2:	4770      	bx	lr

0000c0c4 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c0c4:	b480      	push	{r7}
    c0c6:	b083      	sub	sp, #12
    c0c8:	af00      	add	r7, sp, #0
    c0ca:	6078      	str	r0, [r7, #4]
	return desc[0];
    c0cc:	687b      	ldr	r3, [r7, #4]
    c0ce:	781b      	ldrb	r3, [r3, #0]
}
    c0d0:	4618      	mov	r0, r3
    c0d2:	370c      	adds	r7, #12
    c0d4:	46bd      	mov	sp, r7
    c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0da:	4770      	bx	lr

0000c0dc <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c0dc:	b580      	push	{r7, lr}
    c0de:	b082      	sub	sp, #8
    c0e0:	af00      	add	r7, sp, #0
    c0e2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c0e4:	6878      	ldr	r0, [r7, #4]
    c0e6:	4b05      	ldr	r3, [pc, #20]	; (c0fc <usb_desc_next+0x20>)
    c0e8:	4798      	blx	r3
    c0ea:	4603      	mov	r3, r0
    c0ec:	461a      	mov	r2, r3
    c0ee:	687b      	ldr	r3, [r7, #4]
    c0f0:	4413      	add	r3, r2
}
    c0f2:	4618      	mov	r0, r3
    c0f4:	3708      	adds	r7, #8
    c0f6:	46bd      	mov	sp, r7
    c0f8:	bd80      	pop	{r7, pc}
    c0fa:	bf00      	nop
    c0fc:	0000c0c5 	.word	0x0000c0c5

0000c100 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c100:	b580      	push	{r7, lr}
    c102:	b08c      	sub	sp, #48	; 0x30
    c104:	af00      	add	r7, sp, #0
    c106:	6078      	str	r0, [r7, #4]
    c108:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c10a:	687b      	ldr	r3, [r7, #4]
    c10c:	689b      	ldr	r3, [r3, #8]
    c10e:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c110:	683b      	ldr	r3, [r7, #0]
    c112:	681b      	ldr	r3, [r3, #0]
    c114:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c116:	2300      	movs	r3, #0
    c118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c11c:	e08f      	b.n	c23e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c120:	2b00      	cmp	r3, #0
    c122:	d102      	bne.n	c12a <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c124:	f06f 0309 	mvn.w	r3, #9
    c128:	e092      	b.n	c250 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c12c:	789b      	ldrb	r3, [r3, #2]
    c12e:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c132:	795b      	ldrb	r3, [r3, #5]
    c134:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c136:	7c7b      	ldrb	r3, [r7, #17]
    c138:	2b02      	cmp	r3, #2
    c13a:	d002      	beq.n	c142 <cdcdf_acm_enable+0x42>
    c13c:	7c7b      	ldrb	r3, [r7, #17]
    c13e:	2b0a      	cmp	r3, #10
    c140:	d121      	bne.n	c186 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c146:	6a3a      	ldr	r2, [r7, #32]
    c148:	5cd2      	ldrb	r2, [r2, r3]
    c14a:	7bbb      	ldrb	r3, [r7, #14]
    c14c:	429a      	cmp	r2, r3
    c14e:	d102      	bne.n	c156 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c150:	f06f 0311 	mvn.w	r3, #17
    c154:	e07c      	b.n	c250 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c15a:	6a3a      	ldr	r2, [r7, #32]
    c15c:	5cd3      	ldrb	r3, [r2, r3]
    c15e:	2bff      	cmp	r3, #255	; 0xff
    c160:	d002      	beq.n	c168 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c162:	f06f 031b 	mvn.w	r3, #27
    c166:	e073      	b.n	c250 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c16c:	7bb9      	ldrb	r1, [r7, #14]
    c16e:	6a3a      	ldr	r2, [r7, #32]
    c170:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c172:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c174:	683b      	ldr	r3, [r7, #0]
    c176:	685b      	ldr	r3, [r3, #4]
    c178:	2205      	movs	r2, #5
    c17a:	4619      	mov	r1, r3
    c17c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c17e:	4b36      	ldr	r3, [pc, #216]	; (c258 <cdcdf_acm_enable+0x158>)
    c180:	4798      	blx	r3
    c182:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c184:	e047      	b.n	c216 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c186:	f06f 0309 	mvn.w	r3, #9
    c18a:	e061      	b.n	c250 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c18e:	789b      	ldrb	r3, [r3, #2]
    c190:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c192:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c194:	78db      	ldrb	r3, [r3, #3]
    c196:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c19a:	3304      	adds	r3, #4
    c19c:	4618      	mov	r0, r3
    c19e:	4b2f      	ldr	r3, [pc, #188]	; (c25c <cdcdf_acm_enable+0x15c>)
    c1a0:	4798      	blx	r3
    c1a2:	4603      	mov	r3, r0
    c1a4:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c1a6:	7ebb      	ldrb	r3, [r7, #26]
    c1a8:	7ef9      	ldrb	r1, [r7, #27]
    c1aa:	8bba      	ldrh	r2, [r7, #28]
    c1ac:	4618      	mov	r0, r3
    c1ae:	4b2c      	ldr	r3, [pc, #176]	; (c260 <cdcdf_acm_enable+0x160>)
    c1b0:	4798      	blx	r3
    c1b2:	4603      	mov	r3, r0
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d002      	beq.n	c1be <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c1b8:	f06f 0313 	mvn.w	r3, #19
    c1bc:	e048      	b.n	c250 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c1be:	7ebb      	ldrb	r3, [r7, #26]
    c1c0:	b25b      	sxtb	r3, r3
    c1c2:	2b00      	cmp	r3, #0
    c1c4:	da0f      	bge.n	c1e6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c1c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c1ca:	7eb9      	ldrb	r1, [r7, #26]
    c1cc:	6a3a      	ldr	r2, [r7, #32]
    c1ce:	4413      	add	r3, r2
    c1d0:	460a      	mov	r2, r1
    c1d2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c1d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c1d8:	6a3a      	ldr	r2, [r7, #32]
    c1da:	4413      	add	r3, r2
    c1dc:	789b      	ldrb	r3, [r3, #2]
    c1de:	4618      	mov	r0, r3
    c1e0:	4b20      	ldr	r3, [pc, #128]	; (c264 <cdcdf_acm_enable+0x164>)
    c1e2:	4798      	blx	r3
    c1e4:	e007      	b.n	c1f6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c1e6:	7eba      	ldrb	r2, [r7, #26]
    c1e8:	6a3b      	ldr	r3, [r7, #32]
    c1ea:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c1ec:	6a3b      	ldr	r3, [r7, #32]
    c1ee:	791b      	ldrb	r3, [r3, #4]
    c1f0:	4618      	mov	r0, r3
    c1f2:	4b1c      	ldr	r3, [pc, #112]	; (c264 <cdcdf_acm_enable+0x164>)
    c1f4:	4798      	blx	r3
			}
			desc->sod = ep;
    c1f6:	683b      	ldr	r3, [r7, #0]
    c1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c1fa:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c1fc:	683b      	ldr	r3, [r7, #0]
    c1fe:	681b      	ldr	r3, [r3, #0]
    c200:	4618      	mov	r0, r3
    c202:	4b19      	ldr	r3, [pc, #100]	; (c268 <cdcdf_acm_enable+0x168>)
    c204:	4798      	blx	r3
    c206:	4602      	mov	r2, r0
    c208:	683b      	ldr	r3, [r7, #0]
    c20a:	685b      	ldr	r3, [r3, #4]
    c20c:	4619      	mov	r1, r3
    c20e:	4610      	mov	r0, r2
    c210:	4b16      	ldr	r3, [pc, #88]	; (c26c <cdcdf_acm_enable+0x16c>)
    c212:	4798      	blx	r3
    c214:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c218:	2b00      	cmp	r3, #0
    c21a:	d1b7      	bne.n	c18c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c21c:	683b      	ldr	r3, [r7, #0]
    c21e:	681b      	ldr	r3, [r3, #0]
    c220:	4618      	mov	r0, r3
    c222:	4b11      	ldr	r3, [pc, #68]	; (c268 <cdcdf_acm_enable+0x168>)
    c224:	4798      	blx	r3
    c226:	683b      	ldr	r3, [r7, #0]
    c228:	685b      	ldr	r3, [r3, #4]
    c22a:	2204      	movs	r2, #4
    c22c:	4619      	mov	r1, r3
    c22e:	4b0a      	ldr	r3, [pc, #40]	; (c258 <cdcdf_acm_enable+0x158>)
    c230:	4798      	blx	r3
    c232:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c238:	3301      	adds	r3, #1
    c23a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c23e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c242:	2b01      	cmp	r3, #1
    c244:	f67f af6b 	bls.w	c11e <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c248:	4b09      	ldr	r3, [pc, #36]	; (c270 <cdcdf_acm_enable+0x170>)
    c24a:	2201      	movs	r2, #1
    c24c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c24e:	2300      	movs	r3, #0
}
    c250:	4618      	mov	r0, r3
    c252:	3730      	adds	r7, #48	; 0x30
    c254:	46bd      	mov	sp, r7
    c256:	bd80      	pop	{r7, pc}
    c258:	0000d4c1 	.word	0x0000d4c1
    c25c:	0000c09b 	.word	0x0000c09b
    c260:	00003695 	.word	0x00003695
    c264:	00003781 	.word	0x00003781
    c268:	0000c0dd 	.word	0x0000c0dd
    c26c:	0000d51d 	.word	0x0000d51d
    c270:	2000261c 	.word	0x2000261c

0000c274 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c274:	b580      	push	{r7, lr}
    c276:	b088      	sub	sp, #32
    c278:	af00      	add	r7, sp, #0
    c27a:	6078      	str	r0, [r7, #4]
    c27c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c27e:	687b      	ldr	r3, [r7, #4]
    c280:	689b      	ldr	r3, [r3, #8]
    c282:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c284:	683b      	ldr	r3, [r7, #0]
    c286:	2b00      	cmp	r3, #0
    c288:	d00c      	beq.n	c2a4 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c28a:	683b      	ldr	r3, [r7, #0]
    c28c:	681b      	ldr	r3, [r3, #0]
    c28e:	795b      	ldrb	r3, [r3, #5]
    c290:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c292:	7c7b      	ldrb	r3, [r7, #17]
    c294:	2b02      	cmp	r3, #2
    c296:	d005      	beq.n	c2a4 <cdcdf_acm_disable+0x30>
    c298:	7c7b      	ldrb	r3, [r7, #17]
    c29a:	2b0a      	cmp	r3, #10
    c29c:	d002      	beq.n	c2a4 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c29e:	f06f 0309 	mvn.w	r3, #9
    c2a2:	e035      	b.n	c310 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c2a4:	2300      	movs	r3, #0
    c2a6:	77fb      	strb	r3, [r7, #31]
    c2a8:	e01f      	b.n	c2ea <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c2aa:	7ffb      	ldrb	r3, [r7, #31]
    c2ac:	69ba      	ldr	r2, [r7, #24]
    c2ae:	5cd3      	ldrb	r3, [r2, r3]
    c2b0:	2bff      	cmp	r3, #255	; 0xff
    c2b2:	d016      	beq.n	c2e2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c2b4:	7ffb      	ldrb	r3, [r7, #31]
    c2b6:	69ba      	ldr	r2, [r7, #24]
    c2b8:	21ff      	movs	r1, #255	; 0xff
    c2ba:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c2bc:	7ffb      	ldrb	r3, [r7, #31]
    c2be:	69ba      	ldr	r2, [r7, #24]
    c2c0:	4413      	add	r3, r2
    c2c2:	789b      	ldrb	r3, [r3, #2]
    c2c4:	2bff      	cmp	r3, #255	; 0xff
    c2c6:	d00d      	beq.n	c2e4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c2c8:	7ffb      	ldrb	r3, [r7, #31]
    c2ca:	69ba      	ldr	r2, [r7, #24]
    c2cc:	4413      	add	r3, r2
    c2ce:	789b      	ldrb	r3, [r3, #2]
    c2d0:	4618      	mov	r0, r3
    c2d2:	4b11      	ldr	r3, [pc, #68]	; (c318 <cdcdf_acm_disable+0xa4>)
    c2d4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c2d6:	7ffb      	ldrb	r3, [r7, #31]
    c2d8:	69ba      	ldr	r2, [r7, #24]
    c2da:	4413      	add	r3, r2
    c2dc:	22ff      	movs	r2, #255	; 0xff
    c2de:	709a      	strb	r2, [r3, #2]
    c2e0:	e000      	b.n	c2e4 <cdcdf_acm_disable+0x70>
			continue;
    c2e2:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c2e4:	7ffb      	ldrb	r3, [r7, #31]
    c2e6:	3301      	adds	r3, #1
    c2e8:	77fb      	strb	r3, [r7, #31]
    c2ea:	7ffb      	ldrb	r3, [r7, #31]
    c2ec:	2b01      	cmp	r3, #1
    c2ee:	d9dc      	bls.n	c2aa <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c2f0:	69bb      	ldr	r3, [r7, #24]
    c2f2:	791b      	ldrb	r3, [r3, #4]
    c2f4:	2bff      	cmp	r3, #255	; 0xff
    c2f6:	d007      	beq.n	c308 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c2f8:	69bb      	ldr	r3, [r7, #24]
    c2fa:	791b      	ldrb	r3, [r3, #4]
    c2fc:	4618      	mov	r0, r3
    c2fe:	4b06      	ldr	r3, [pc, #24]	; (c318 <cdcdf_acm_disable+0xa4>)
    c300:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c302:	69bb      	ldr	r3, [r7, #24]
    c304:	22ff      	movs	r2, #255	; 0xff
    c306:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c308:	4b04      	ldr	r3, [pc, #16]	; (c31c <cdcdf_acm_disable+0xa8>)
    c30a:	2200      	movs	r2, #0
    c30c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c30e:	2300      	movs	r3, #0
}
    c310:	4618      	mov	r0, r3
    c312:	3720      	adds	r7, #32
    c314:	46bd      	mov	sp, r7
    c316:	bd80      	pop	{r7, pc}
    c318:	00003731 	.word	0x00003731
    c31c:	2000261c 	.word	0x2000261c

0000c320 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c320:	b580      	push	{r7, lr}
    c322:	b084      	sub	sp, #16
    c324:	af00      	add	r7, sp, #0
    c326:	60f8      	str	r0, [r7, #12]
    c328:	460b      	mov	r3, r1
    c32a:	607a      	str	r2, [r7, #4]
    c32c:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c32e:	7afb      	ldrb	r3, [r7, #11]
    c330:	2b01      	cmp	r3, #1
    c332:	d009      	beq.n	c348 <cdcdf_acm_ctrl+0x28>
    c334:	2b02      	cmp	r3, #2
    c336:	d00d      	beq.n	c354 <cdcdf_acm_ctrl+0x34>
    c338:	2b00      	cmp	r3, #0
    c33a:	d10e      	bne.n	c35a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c33c:	6879      	ldr	r1, [r7, #4]
    c33e:	68f8      	ldr	r0, [r7, #12]
    c340:	4b09      	ldr	r3, [pc, #36]	; (c368 <cdcdf_acm_ctrl+0x48>)
    c342:	4798      	blx	r3
    c344:	4603      	mov	r3, r0
    c346:	e00a      	b.n	c35e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c348:	6879      	ldr	r1, [r7, #4]
    c34a:	68f8      	ldr	r0, [r7, #12]
    c34c:	4b07      	ldr	r3, [pc, #28]	; (c36c <cdcdf_acm_ctrl+0x4c>)
    c34e:	4798      	blx	r3
    c350:	4603      	mov	r3, r0
    c352:	e004      	b.n	c35e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c354:	f06f 031a 	mvn.w	r3, #26
    c358:	e001      	b.n	c35e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c35a:	f06f 030c 	mvn.w	r3, #12
	}
}
    c35e:	4618      	mov	r0, r3
    c360:	3710      	adds	r7, #16
    c362:	46bd      	mov	sp, r7
    c364:	bd80      	pop	{r7, pc}
    c366:	bf00      	nop
    c368:	0000c101 	.word	0x0000c101
    c36c:	0000c275 	.word	0x0000c275

0000c370 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c370:	b590      	push	{r4, r7, lr}
    c372:	b087      	sub	sp, #28
    c374:	af00      	add	r7, sp, #0
    c376:	4603      	mov	r3, r0
    c378:	6039      	str	r1, [r7, #0]
    c37a:	71fb      	strb	r3, [r7, #7]
    c37c:	4613      	mov	r3, r2
    c37e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c380:	683b      	ldr	r3, [r7, #0]
    c382:	799a      	ldrb	r2, [r3, #6]
    c384:	79db      	ldrb	r3, [r3, #7]
    c386:	021b      	lsls	r3, r3, #8
    c388:	4313      	orrs	r3, r2
    c38a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c38c:	4b2b      	ldr	r3, [pc, #172]	; (c43c <cdcdf_acm_set_req+0xcc>)
    c38e:	4798      	blx	r3
    c390:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c392:	683b      	ldr	r3, [r7, #0]
    c394:	785b      	ldrb	r3, [r3, #1]
    c396:	2b20      	cmp	r3, #32
    c398:	d002      	beq.n	c3a0 <cdcdf_acm_set_req+0x30>
    c39a:	2b22      	cmp	r3, #34	; 0x22
    c39c:	d034      	beq.n	c408 <cdcdf_acm_set_req+0x98>
    c39e:	e046      	b.n	c42e <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c3a0:	8afb      	ldrh	r3, [r7, #22]
    c3a2:	2b07      	cmp	r3, #7
    c3a4:	d002      	beq.n	c3ac <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c3a6:	f04f 33ff 	mov.w	r3, #4294967295
    c3aa:	e042      	b.n	c432 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c3ac:	79bb      	ldrb	r3, [r7, #6]
    c3ae:	2b00      	cmp	r3, #0
    c3b0:	d107      	bne.n	c3c2 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c3b2:	8afa      	ldrh	r2, [r7, #22]
    c3b4:	79f8      	ldrb	r0, [r7, #7]
    c3b6:	2300      	movs	r3, #0
    c3b8:	6939      	ldr	r1, [r7, #16]
    c3ba:	4c21      	ldr	r4, [pc, #132]	; (c440 <cdcdf_acm_set_req+0xd0>)
    c3bc:	47a0      	blx	r4
    c3be:	4603      	mov	r3, r0
    c3c0:	e037      	b.n	c432 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c3c2:	693a      	ldr	r2, [r7, #16]
    c3c4:	f107 0308 	add.w	r3, r7, #8
    c3c8:	6810      	ldr	r0, [r2, #0]
    c3ca:	6018      	str	r0, [r3, #0]
    c3cc:	8891      	ldrh	r1, [r2, #4]
    c3ce:	7992      	ldrb	r2, [r2, #6]
    c3d0:	8099      	strh	r1, [r3, #4]
    c3d2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c3d4:	4b1b      	ldr	r3, [pc, #108]	; (c444 <cdcdf_acm_set_req+0xd4>)
    c3d6:	681b      	ldr	r3, [r3, #0]
    c3d8:	2b00      	cmp	r3, #0
    c3da:	d008      	beq.n	c3ee <cdcdf_acm_set_req+0x7e>
    c3dc:	4b19      	ldr	r3, [pc, #100]	; (c444 <cdcdf_acm_set_req+0xd4>)
    c3de:	681b      	ldr	r3, [r3, #0]
    c3e0:	f107 0208 	add.w	r2, r7, #8
    c3e4:	4610      	mov	r0, r2
    c3e6:	4798      	blx	r3
    c3e8:	4603      	mov	r3, r0
    c3ea:	2b00      	cmp	r3, #0
    c3ec:	d00a      	beq.n	c404 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c3ee:	4b16      	ldr	r3, [pc, #88]	; (c448 <cdcdf_acm_set_req+0xd8>)
    c3f0:	f107 0208 	add.w	r2, r7, #8
    c3f4:	e892 0003 	ldmia.w	r2, {r0, r1}
    c3f8:	6018      	str	r0, [r3, #0]
    c3fa:	3304      	adds	r3, #4
    c3fc:	8019      	strh	r1, [r3, #0]
    c3fe:	3302      	adds	r3, #2
    c400:	0c0a      	lsrs	r2, r1, #16
    c402:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c404:	2300      	movs	r3, #0
    c406:	e014      	b.n	c432 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c408:	2300      	movs	r3, #0
    c40a:	2200      	movs	r2, #0
    c40c:	2100      	movs	r1, #0
    c40e:	2000      	movs	r0, #0
    c410:	4c0b      	ldr	r4, [pc, #44]	; (c440 <cdcdf_acm_set_req+0xd0>)
    c412:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c414:	4b0d      	ldr	r3, [pc, #52]	; (c44c <cdcdf_acm_set_req+0xdc>)
    c416:	681b      	ldr	r3, [r3, #0]
    c418:	2b00      	cmp	r3, #0
    c41a:	d006      	beq.n	c42a <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c41c:	4b0b      	ldr	r3, [pc, #44]	; (c44c <cdcdf_acm_set_req+0xdc>)
    c41e:	681b      	ldr	r3, [r3, #0]
    c420:	683a      	ldr	r2, [r7, #0]
    c422:	8852      	ldrh	r2, [r2, #2]
    c424:	b292      	uxth	r2, r2
    c426:	4610      	mov	r0, r2
    c428:	4798      	blx	r3
		}
		return ERR_NONE;
    c42a:	2300      	movs	r3, #0
    c42c:	e001      	b.n	c432 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c42e:	f06f 030c 	mvn.w	r3, #12
	}
}
    c432:	4618      	mov	r0, r3
    c434:	371c      	adds	r7, #28
    c436:	46bd      	mov	sp, r7
    c438:	bd90      	pop	{r4, r7, pc}
    c43a:	bf00      	nop
    c43c:	0000d3bd 	.word	0x0000d3bd
    c440:	0000d231 	.word	0x0000d231
    c444:	20002630 	.word	0x20002630
    c448:	20002624 	.word	0x20002624
    c44c:	2000262c 	.word	0x2000262c

0000c450 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c450:	b590      	push	{r4, r7, lr}
    c452:	b085      	sub	sp, #20
    c454:	af00      	add	r7, sp, #0
    c456:	4603      	mov	r3, r0
    c458:	6039      	str	r1, [r7, #0]
    c45a:	71fb      	strb	r3, [r7, #7]
    c45c:	4613      	mov	r3, r2
    c45e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c460:	683b      	ldr	r3, [r7, #0]
    c462:	799a      	ldrb	r2, [r3, #6]
    c464:	79db      	ldrb	r3, [r3, #7]
    c466:	021b      	lsls	r3, r3, #8
    c468:	4313      	orrs	r3, r2
    c46a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c46c:	79bb      	ldrb	r3, [r7, #6]
    c46e:	2b01      	cmp	r3, #1
    c470:	d101      	bne.n	c476 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c472:	2300      	movs	r3, #0
    c474:	e013      	b.n	c49e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c476:	683b      	ldr	r3, [r7, #0]
    c478:	785b      	ldrb	r3, [r3, #1]
    c47a:	2b21      	cmp	r3, #33	; 0x21
    c47c:	d10d      	bne.n	c49a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c47e:	89fb      	ldrh	r3, [r7, #14]
    c480:	2b07      	cmp	r3, #7
    c482:	d002      	beq.n	c48a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c484:	f04f 33ff 	mov.w	r3, #4294967295
    c488:	e009      	b.n	c49e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c48a:	89fa      	ldrh	r2, [r7, #14]
    c48c:	79f8      	ldrb	r0, [r7, #7]
    c48e:	2300      	movs	r3, #0
    c490:	4905      	ldr	r1, [pc, #20]	; (c4a8 <cdcdf_acm_get_req+0x58>)
    c492:	4c06      	ldr	r4, [pc, #24]	; (c4ac <cdcdf_acm_get_req+0x5c>)
    c494:	47a0      	blx	r4
    c496:	4603      	mov	r3, r0
    c498:	e001      	b.n	c49e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c49a:	f06f 030c 	mvn.w	r3, #12
	}
}
    c49e:	4618      	mov	r0, r3
    c4a0:	3714      	adds	r7, #20
    c4a2:	46bd      	mov	sp, r7
    c4a4:	bd90      	pop	{r4, r7, pc}
    c4a6:	bf00      	nop
    c4a8:	20002624 	.word	0x20002624
    c4ac:	0000d231 	.word	0x0000d231

0000c4b0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c4b0:	b580      	push	{r7, lr}
    c4b2:	b082      	sub	sp, #8
    c4b4:	af00      	add	r7, sp, #0
    c4b6:	4603      	mov	r3, r0
    c4b8:	6039      	str	r1, [r7, #0]
    c4ba:	71fb      	strb	r3, [r7, #7]
    c4bc:	4613      	mov	r3, r2
    c4be:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c4c0:	683b      	ldr	r3, [r7, #0]
    c4c2:	781b      	ldrb	r3, [r3, #0]
    c4c4:	095b      	lsrs	r3, r3, #5
    c4c6:	b2db      	uxtb	r3, r3
    c4c8:	f003 0303 	and.w	r3, r3, #3
    c4cc:	2b01      	cmp	r3, #1
    c4ce:	d002      	beq.n	c4d6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c4d0:	f06f 0309 	mvn.w	r3, #9
    c4d4:	e026      	b.n	c524 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c4d6:	683b      	ldr	r3, [r7, #0]
    c4d8:	889b      	ldrh	r3, [r3, #4]
    c4da:	b29a      	uxth	r2, r3
    c4dc:	4b13      	ldr	r3, [pc, #76]	; (c52c <cdcdf_acm_req+0x7c>)
    c4de:	781b      	ldrb	r3, [r3, #0]
    c4e0:	b29b      	uxth	r3, r3
    c4e2:	429a      	cmp	r2, r3
    c4e4:	d007      	beq.n	c4f6 <cdcdf_acm_req+0x46>
    c4e6:	683b      	ldr	r3, [r7, #0]
    c4e8:	889b      	ldrh	r3, [r3, #4]
    c4ea:	b29a      	uxth	r2, r3
    c4ec:	4b0f      	ldr	r3, [pc, #60]	; (c52c <cdcdf_acm_req+0x7c>)
    c4ee:	785b      	ldrb	r3, [r3, #1]
    c4f0:	b29b      	uxth	r3, r3
    c4f2:	429a      	cmp	r2, r3
    c4f4:	d114      	bne.n	c520 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c4f6:	683b      	ldr	r3, [r7, #0]
    c4f8:	781b      	ldrb	r3, [r3, #0]
    c4fa:	b25b      	sxtb	r3, r3
    c4fc:	2b00      	cmp	r3, #0
    c4fe:	da07      	bge.n	c510 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c500:	79ba      	ldrb	r2, [r7, #6]
    c502:	79fb      	ldrb	r3, [r7, #7]
    c504:	6839      	ldr	r1, [r7, #0]
    c506:	4618      	mov	r0, r3
    c508:	4b09      	ldr	r3, [pc, #36]	; (c530 <cdcdf_acm_req+0x80>)
    c50a:	4798      	blx	r3
    c50c:	4603      	mov	r3, r0
    c50e:	e009      	b.n	c524 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c510:	79ba      	ldrb	r2, [r7, #6]
    c512:	79fb      	ldrb	r3, [r7, #7]
    c514:	6839      	ldr	r1, [r7, #0]
    c516:	4618      	mov	r0, r3
    c518:	4b06      	ldr	r3, [pc, #24]	; (c534 <cdcdf_acm_req+0x84>)
    c51a:	4798      	blx	r3
    c51c:	4603      	mov	r3, r0
    c51e:	e001      	b.n	c524 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c520:	f06f 0309 	mvn.w	r3, #9
	}
}
    c524:	4618      	mov	r0, r3
    c526:	3708      	adds	r7, #8
    c528:	46bd      	mov	sp, r7
    c52a:	bd80      	pop	{r7, pc}
    c52c:	2000261c 	.word	0x2000261c
    c530:	0000c451 	.word	0x0000c451
    c534:	0000c371 	.word	0x0000c371

0000c538 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c538:	b580      	push	{r7, lr}
    c53a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c53c:	4b0b      	ldr	r3, [pc, #44]	; (c56c <cdcdf_acm_init+0x34>)
    c53e:	4798      	blx	r3
    c540:	4603      	mov	r3, r0
    c542:	2b01      	cmp	r3, #1
    c544:	d902      	bls.n	c54c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c546:	f06f 0310 	mvn.w	r3, #16
    c54a:	e00d      	b.n	c568 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c54c:	4b08      	ldr	r3, [pc, #32]	; (c570 <cdcdf_acm_init+0x38>)
    c54e:	4a09      	ldr	r2, [pc, #36]	; (c574 <cdcdf_acm_init+0x3c>)
    c550:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c552:	4b07      	ldr	r3, [pc, #28]	; (c570 <cdcdf_acm_init+0x38>)
    c554:	4a08      	ldr	r2, [pc, #32]	; (c578 <cdcdf_acm_init+0x40>)
    c556:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c558:	4805      	ldr	r0, [pc, #20]	; (c570 <cdcdf_acm_init+0x38>)
    c55a:	4b08      	ldr	r3, [pc, #32]	; (c57c <cdcdf_acm_init+0x44>)
    c55c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c55e:	4908      	ldr	r1, [pc, #32]	; (c580 <cdcdf_acm_init+0x48>)
    c560:	2001      	movs	r0, #1
    c562:	4b08      	ldr	r3, [pc, #32]	; (c584 <cdcdf_acm_init+0x4c>)
    c564:	4798      	blx	r3
	return ERR_NONE;
    c566:	2300      	movs	r3, #0
}
    c568:	4618      	mov	r0, r3
    c56a:	bd80      	pop	{r7, pc}
    c56c:	0000d3d5 	.word	0x0000d3d5
    c570:	20002610 	.word	0x20002610
    c574:	0000c321 	.word	0x0000c321
    c578:	2000261c 	.word	0x2000261c
    c57c:	0000d33d 	.word	0x0000d33d
    c580:	20000208 	.word	0x20000208
    c584:	0000d26d 	.word	0x0000d26d

0000c588 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c588:	b590      	push	{r4, r7, lr}
    c58a:	b083      	sub	sp, #12
    c58c:	af00      	add	r7, sp, #0
    c58e:	6078      	str	r0, [r7, #4]
    c590:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c592:	4b0b      	ldr	r3, [pc, #44]	; (c5c0 <cdcdf_acm_read+0x38>)
    c594:	4798      	blx	r3
    c596:	4603      	mov	r3, r0
    c598:	f083 0301 	eor.w	r3, r3, #1
    c59c:	b2db      	uxtb	r3, r3
    c59e:	2b00      	cmp	r3, #0
    c5a0:	d002      	beq.n	c5a8 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c5a2:	f06f 0310 	mvn.w	r3, #16
    c5a6:	e007      	b.n	c5b8 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c5a8:	4b06      	ldr	r3, [pc, #24]	; (c5c4 <cdcdf_acm_read+0x3c>)
    c5aa:	7918      	ldrb	r0, [r3, #4]
    c5ac:	2300      	movs	r3, #0
    c5ae:	683a      	ldr	r2, [r7, #0]
    c5b0:	6879      	ldr	r1, [r7, #4]
    c5b2:	4c05      	ldr	r4, [pc, #20]	; (c5c8 <cdcdf_acm_read+0x40>)
    c5b4:	47a0      	blx	r4
    c5b6:	4603      	mov	r3, r0
}
    c5b8:	4618      	mov	r0, r3
    c5ba:	370c      	adds	r7, #12
    c5bc:	46bd      	mov	sp, r7
    c5be:	bd90      	pop	{r4, r7, pc}
    c5c0:	0000c6ad 	.word	0x0000c6ad
    c5c4:	2000261c 	.word	0x2000261c
    c5c8:	0000d231 	.word	0x0000d231

0000c5cc <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c5cc:	b590      	push	{r4, r7, lr}
    c5ce:	b083      	sub	sp, #12
    c5d0:	af00      	add	r7, sp, #0
    c5d2:	6078      	str	r0, [r7, #4]
    c5d4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c5d6:	4b0b      	ldr	r3, [pc, #44]	; (c604 <cdcdf_acm_write+0x38>)
    c5d8:	4798      	blx	r3
    c5da:	4603      	mov	r3, r0
    c5dc:	f083 0301 	eor.w	r3, r3, #1
    c5e0:	b2db      	uxtb	r3, r3
    c5e2:	2b00      	cmp	r3, #0
    c5e4:	d002      	beq.n	c5ec <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c5e6:	f06f 0310 	mvn.w	r3, #16
    c5ea:	e007      	b.n	c5fc <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c5ec:	4b06      	ldr	r3, [pc, #24]	; (c608 <cdcdf_acm_write+0x3c>)
    c5ee:	78d8      	ldrb	r0, [r3, #3]
    c5f0:	2301      	movs	r3, #1
    c5f2:	683a      	ldr	r2, [r7, #0]
    c5f4:	6879      	ldr	r1, [r7, #4]
    c5f6:	4c05      	ldr	r4, [pc, #20]	; (c60c <cdcdf_acm_write+0x40>)
    c5f8:	47a0      	blx	r4
    c5fa:	4603      	mov	r3, r0
}
    c5fc:	4618      	mov	r0, r3
    c5fe:	370c      	adds	r7, #12
    c600:	46bd      	mov	sp, r7
    c602:	bd90      	pop	{r4, r7, pc}
    c604:	0000c6ad 	.word	0x0000c6ad
    c608:	2000261c 	.word	0x2000261c
    c60c:	0000d231 	.word	0x0000d231

0000c610 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c610:	b580      	push	{r7, lr}
    c612:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c614:	4b05      	ldr	r3, [pc, #20]	; (c62c <cdcdf_acm_stop_xfer+0x1c>)
    c616:	78db      	ldrb	r3, [r3, #3]
    c618:	4618      	mov	r0, r3
    c61a:	4b05      	ldr	r3, [pc, #20]	; (c630 <cdcdf_acm_stop_xfer+0x20>)
    c61c:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c61e:	4b03      	ldr	r3, [pc, #12]	; (c62c <cdcdf_acm_stop_xfer+0x1c>)
    c620:	791b      	ldrb	r3, [r3, #4]
    c622:	4618      	mov	r0, r3
    c624:	4b02      	ldr	r3, [pc, #8]	; (c630 <cdcdf_acm_stop_xfer+0x20>)
    c626:	4798      	blx	r3
}
    c628:	bf00      	nop
    c62a:	bd80      	pop	{r7, pc}
    c62c:	2000261c 	.word	0x2000261c
    c630:	00003959 	.word	0x00003959

0000c634 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c634:	b580      	push	{r7, lr}
    c636:	b082      	sub	sp, #8
    c638:	af00      	add	r7, sp, #0
    c63a:	4603      	mov	r3, r0
    c63c:	6039      	str	r1, [r7, #0]
    c63e:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c640:	79fb      	ldrb	r3, [r7, #7]
    c642:	2b03      	cmp	r3, #3
    c644:	d822      	bhi.n	c68c <cdcdf_acm_register_callback+0x58>
    c646:	a201      	add	r2, pc, #4	; (adr r2, c64c <cdcdf_acm_register_callback+0x18>)
    c648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c64c:	0000c65d 	.word	0x0000c65d
    c650:	0000c66d 	.word	0x0000c66d
    c654:	0000c67d 	.word	0x0000c67d
    c658:	0000c685 	.word	0x0000c685
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c65c:	4b0f      	ldr	r3, [pc, #60]	; (c69c <cdcdf_acm_register_callback+0x68>)
    c65e:	791b      	ldrb	r3, [r3, #4]
    c660:	683a      	ldr	r2, [r7, #0]
    c662:	2102      	movs	r1, #2
    c664:	4618      	mov	r0, r3
    c666:	4b0e      	ldr	r3, [pc, #56]	; (c6a0 <cdcdf_acm_register_callback+0x6c>)
    c668:	4798      	blx	r3
		break;
    c66a:	e012      	b.n	c692 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c66c:	4b0b      	ldr	r3, [pc, #44]	; (c69c <cdcdf_acm_register_callback+0x68>)
    c66e:	78db      	ldrb	r3, [r3, #3]
    c670:	683a      	ldr	r2, [r7, #0]
    c672:	2102      	movs	r1, #2
    c674:	4618      	mov	r0, r3
    c676:	4b0a      	ldr	r3, [pc, #40]	; (c6a0 <cdcdf_acm_register_callback+0x6c>)
    c678:	4798      	blx	r3
		break;
    c67a:	e00a      	b.n	c692 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c67c:	4a09      	ldr	r2, [pc, #36]	; (c6a4 <cdcdf_acm_register_callback+0x70>)
    c67e:	683b      	ldr	r3, [r7, #0]
    c680:	6013      	str	r3, [r2, #0]
		break;
    c682:	e006      	b.n	c692 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c684:	4a08      	ldr	r2, [pc, #32]	; (c6a8 <cdcdf_acm_register_callback+0x74>)
    c686:	683b      	ldr	r3, [r7, #0]
    c688:	6013      	str	r3, [r2, #0]
		break;
    c68a:	e002      	b.n	c692 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c68c:	f06f 030c 	mvn.w	r3, #12
    c690:	e000      	b.n	c694 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c692:	2300      	movs	r3, #0
}
    c694:	4618      	mov	r0, r3
    c696:	3708      	adds	r7, #8
    c698:	46bd      	mov	sp, r7
    c69a:	bd80      	pop	{r7, pc}
    c69c:	2000261c 	.word	0x2000261c
    c6a0:	00003a85 	.word	0x00003a85
    c6a4:	20002630 	.word	0x20002630
    c6a8:	2000262c 	.word	0x2000262c

0000c6ac <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c6ac:	b480      	push	{r7}
    c6ae:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c6b0:	4b03      	ldr	r3, [pc, #12]	; (c6c0 <cdcdf_acm_is_enabled+0x14>)
    c6b2:	795b      	ldrb	r3, [r3, #5]
}
    c6b4:	4618      	mov	r0, r3
    c6b6:	46bd      	mov	sp, r7
    c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6bc:	4770      	bx	lr
    c6be:	bf00      	nop
    c6c0:	2000261c 	.word	0x2000261c

0000c6c4 <usb_get_u16>:
{
    c6c4:	b480      	push	{r7}
    c6c6:	b083      	sub	sp, #12
    c6c8:	af00      	add	r7, sp, #0
    c6ca:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c6cc:	687b      	ldr	r3, [r7, #4]
    c6ce:	781b      	ldrb	r3, [r3, #0]
    c6d0:	b29a      	uxth	r2, r3
    c6d2:	687b      	ldr	r3, [r7, #4]
    c6d4:	3301      	adds	r3, #1
    c6d6:	781b      	ldrb	r3, [r3, #0]
    c6d8:	b29b      	uxth	r3, r3
    c6da:	021b      	lsls	r3, r3, #8
    c6dc:	b29b      	uxth	r3, r3
    c6de:	4413      	add	r3, r2
    c6e0:	b29b      	uxth	r3, r3
}
    c6e2:	4618      	mov	r0, r3
    c6e4:	370c      	adds	r7, #12
    c6e6:	46bd      	mov	sp, r7
    c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6ec:	4770      	bx	lr

0000c6ee <usb_desc_len>:
{
    c6ee:	b480      	push	{r7}
    c6f0:	b083      	sub	sp, #12
    c6f2:	af00      	add	r7, sp, #0
    c6f4:	6078      	str	r0, [r7, #4]
	return desc[0];
    c6f6:	687b      	ldr	r3, [r7, #4]
    c6f8:	781b      	ldrb	r3, [r3, #0]
}
    c6fa:	4618      	mov	r0, r3
    c6fc:	370c      	adds	r7, #12
    c6fe:	46bd      	mov	sp, r7
    c700:	f85d 7b04 	ldr.w	r7, [sp], #4
    c704:	4770      	bx	lr
	...

0000c708 <usb_desc_next>:
{
    c708:	b580      	push	{r7, lr}
    c70a:	b082      	sub	sp, #8
    c70c:	af00      	add	r7, sp, #0
    c70e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c710:	6878      	ldr	r0, [r7, #4]
    c712:	4b05      	ldr	r3, [pc, #20]	; (c728 <usb_desc_next+0x20>)
    c714:	4798      	blx	r3
    c716:	4603      	mov	r3, r0
    c718:	461a      	mov	r2, r3
    c71a:	687b      	ldr	r3, [r7, #4]
    c71c:	4413      	add	r3, r2
}
    c71e:	4618      	mov	r0, r3
    c720:	3708      	adds	r7, #8
    c722:	46bd      	mov	sp, r7
    c724:	bd80      	pop	{r7, pc}
    c726:	bf00      	nop
    c728:	0000c6ef 	.word	0x0000c6ef

0000c72c <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c72c:	b580      	push	{r7, lr}
    c72e:	b082      	sub	sp, #8
    c730:	af00      	add	r7, sp, #0
    c732:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c734:	687b      	ldr	r3, [r7, #4]
    c736:	3302      	adds	r3, #2
    c738:	4618      	mov	r0, r3
    c73a:	4b03      	ldr	r3, [pc, #12]	; (c748 <usb_cfg_desc_total_len+0x1c>)
    c73c:	4798      	blx	r3
    c73e:	4603      	mov	r3, r0
}
    c740:	4618      	mov	r0, r3
    c742:	3708      	adds	r7, #8
    c744:	46bd      	mov	sp, r7
    c746:	bd80      	pop	{r7, pc}
    c748:	0000c6c5 	.word	0x0000c6c5

0000c74c <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c74c:	b590      	push	{r4, r7, lr}
    c74e:	b085      	sub	sp, #20
    c750:	af00      	add	r7, sp, #0
    c752:	4603      	mov	r3, r0
    c754:	6039      	str	r1, [r7, #0]
    c756:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c758:	2300      	movs	r3, #0
    c75a:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c75c:	683b      	ldr	r3, [r7, #0]
    c75e:	799a      	ldrb	r2, [r3, #6]
    c760:	79db      	ldrb	r3, [r3, #7]
    c762:	021b      	lsls	r3, r3, #8
    c764:	4313      	orrs	r3, r2
    c766:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c768:	897b      	ldrh	r3, [r7, #10]
    c76a:	2b12      	cmp	r3, #18
    c76c:	d901      	bls.n	c772 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c76e:	2312      	movs	r3, #18
    c770:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c772:	68fb      	ldr	r3, [r7, #12]
    c774:	2b00      	cmp	r3, #0
    c776:	d10a      	bne.n	c78e <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c778:	4b0f      	ldr	r3, [pc, #60]	; (c7b8 <usbdc_get_dev_desc+0x6c>)
    c77a:	681b      	ldr	r3, [r3, #0]
    c77c:	6818      	ldr	r0, [r3, #0]
    c77e:	4b0e      	ldr	r3, [pc, #56]	; (c7b8 <usbdc_get_dev_desc+0x6c>)
    c780:	681b      	ldr	r3, [r3, #0]
    c782:	685b      	ldr	r3, [r3, #4]
    c784:	2201      	movs	r2, #1
    c786:	4619      	mov	r1, r3
    c788:	4b0c      	ldr	r3, [pc, #48]	; (c7bc <usbdc_get_dev_desc+0x70>)
    c78a:	4798      	blx	r3
    c78c:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c78e:	68fb      	ldr	r3, [r7, #12]
    c790:	2b00      	cmp	r3, #0
    c792:	d101      	bne.n	c798 <usbdc_get_dev_desc+0x4c>
		return false;
    c794:	2300      	movs	r3, #0
    c796:	e00b      	b.n	c7b0 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c798:	897a      	ldrh	r2, [r7, #10]
    c79a:	79f8      	ldrb	r0, [r7, #7]
    c79c:	2300      	movs	r3, #0
    c79e:	68f9      	ldr	r1, [r7, #12]
    c7a0:	4c07      	ldr	r4, [pc, #28]	; (c7c0 <usbdc_get_dev_desc+0x74>)
    c7a2:	47a0      	blx	r4
    c7a4:	4603      	mov	r3, r0
    c7a6:	2b00      	cmp	r3, #0
    c7a8:	d001      	beq.n	c7ae <usbdc_get_dev_desc+0x62>
		return false;
    c7aa:	2300      	movs	r3, #0
    c7ac:	e000      	b.n	c7b0 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c7ae:	2301      	movs	r3, #1
}
    c7b0:	4618      	mov	r0, r3
    c7b2:	3714      	adds	r7, #20
    c7b4:	46bd      	mov	sp, r7
    c7b6:	bd90      	pop	{r4, r7, pc}
    c7b8:	20002634 	.word	0x20002634
    c7bc:	0000d4c1 	.word	0x0000d4c1
    c7c0:	0000d231 	.word	0x0000d231

0000c7c4 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c7c4:	b590      	push	{r4, r7, lr}
    c7c6:	b087      	sub	sp, #28
    c7c8:	af00      	add	r7, sp, #0
    c7ca:	4603      	mov	r3, r0
    c7cc:	6039      	str	r1, [r7, #0]
    c7ce:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c7d0:	2300      	movs	r3, #0
    c7d2:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c7d4:	683b      	ldr	r3, [r7, #0]
    c7d6:	799a      	ldrb	r2, [r3, #6]
    c7d8:	79db      	ldrb	r3, [r3, #7]
    c7da:	021b      	lsls	r3, r3, #8
    c7dc:	4313      	orrs	r3, r2
    c7de:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c7e0:	683b      	ldr	r3, [r7, #0]
    c7e2:	885b      	ldrh	r3, [r3, #2]
    c7e4:	b29b      	uxth	r3, r3
    c7e6:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c7e8:	8a7a      	ldrh	r2, [r7, #18]
    c7ea:	4b1e      	ldr	r3, [pc, #120]	; (c864 <usbdc_get_cfg_desc+0xa0>)
    c7ec:	7f1b      	ldrb	r3, [r3, #28]
    c7ee:	3b01      	subs	r3, #1
    c7f0:	4013      	ands	r3, r2
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	bf0c      	ite	eq
    c7f6:	2301      	moveq	r3, #1
    c7f8:	2300      	movne	r3, #0
    c7fa:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c7fc:	697b      	ldr	r3, [r7, #20]
    c7fe:	2b00      	cmp	r3, #0
    c800:	d10c      	bne.n	c81c <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c802:	4b18      	ldr	r3, [pc, #96]	; (c864 <usbdc_get_cfg_desc+0xa0>)
    c804:	681b      	ldr	r3, [r3, #0]
    c806:	6818      	ldr	r0, [r3, #0]
    c808:	4b16      	ldr	r3, [pc, #88]	; (c864 <usbdc_get_cfg_desc+0xa0>)
    c80a:	681b      	ldr	r3, [r3, #0]
    c80c:	6859      	ldr	r1, [r3, #4]
    c80e:	7c3b      	ldrb	r3, [r7, #16]
    c810:	3301      	adds	r3, #1
    c812:	b2db      	uxtb	r3, r3
    c814:	461a      	mov	r2, r3
    c816:	4b14      	ldr	r3, [pc, #80]	; (c868 <usbdc_get_cfg_desc+0xa4>)
    c818:	4798      	blx	r3
    c81a:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c81c:	697b      	ldr	r3, [r7, #20]
    c81e:	2b00      	cmp	r3, #0
    c820:	d101      	bne.n	c826 <usbdc_get_cfg_desc+0x62>
		return false;
    c822:	2300      	movs	r3, #0
    c824:	e019      	b.n	c85a <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c826:	6978      	ldr	r0, [r7, #20]
    c828:	4b10      	ldr	r3, [pc, #64]	; (c86c <usbdc_get_cfg_desc+0xa8>)
    c82a:	4798      	blx	r3
    c82c:	4603      	mov	r3, r0
    c82e:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c830:	8a7a      	ldrh	r2, [r7, #18]
    c832:	89fb      	ldrh	r3, [r7, #14]
    c834:	429a      	cmp	r2, r3
    c836:	d802      	bhi.n	c83e <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c838:	2300      	movs	r3, #0
    c83a:	747b      	strb	r3, [r7, #17]
    c83c:	e001      	b.n	c842 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c83e:	89fb      	ldrh	r3, [r7, #14]
    c840:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c842:	8a7a      	ldrh	r2, [r7, #18]
    c844:	7c7b      	ldrb	r3, [r7, #17]
    c846:	79f8      	ldrb	r0, [r7, #7]
    c848:	6979      	ldr	r1, [r7, #20]
    c84a:	4c09      	ldr	r4, [pc, #36]	; (c870 <usbdc_get_cfg_desc+0xac>)
    c84c:	47a0      	blx	r4
    c84e:	4603      	mov	r3, r0
    c850:	2b00      	cmp	r3, #0
    c852:	d001      	beq.n	c858 <usbdc_get_cfg_desc+0x94>
		return false;
    c854:	2300      	movs	r3, #0
    c856:	e000      	b.n	c85a <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c858:	2301      	movs	r3, #1
}
    c85a:	4618      	mov	r0, r3
    c85c:	371c      	adds	r7, #28
    c85e:	46bd      	mov	sp, r7
    c860:	bd90      	pop	{r4, r7, pc}
    c862:	bf00      	nop
    c864:	20002634 	.word	0x20002634
    c868:	0000d581 	.word	0x0000d581
    c86c:	0000c72d 	.word	0x0000c72d
    c870:	0000d231 	.word	0x0000d231

0000c874 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c874:	b590      	push	{r4, r7, lr}
    c876:	b085      	sub	sp, #20
    c878:	af00      	add	r7, sp, #0
    c87a:	4603      	mov	r3, r0
    c87c:	6039      	str	r1, [r7, #0]
    c87e:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c880:	683b      	ldr	r3, [r7, #0]
    c882:	799a      	ldrb	r2, [r3, #6]
    c884:	79db      	ldrb	r3, [r3, #7]
    c886:	021b      	lsls	r3, r3, #8
    c888:	4313      	orrs	r3, r2
    c88a:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c88c:	683b      	ldr	r3, [r7, #0]
    c88e:	885b      	ldrh	r3, [r3, #2]
    c890:	b29b      	uxth	r3, r3
    c892:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c894:	89fa      	ldrh	r2, [r7, #14]
    c896:	4b1a      	ldr	r3, [pc, #104]	; (c900 <usbdc_get_str_desc+0x8c>)
    c898:	7f1b      	ldrb	r3, [r3, #28]
    c89a:	3b01      	subs	r3, #1
    c89c:	4013      	ands	r3, r2
    c89e:	2b00      	cmp	r3, #0
    c8a0:	bf0c      	ite	eq
    c8a2:	2301      	moveq	r3, #1
    c8a4:	2300      	movne	r3, #0
    c8a6:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c8a8:	4b15      	ldr	r3, [pc, #84]	; (c900 <usbdc_get_str_desc+0x8c>)
    c8aa:	681b      	ldr	r3, [r3, #0]
    c8ac:	6818      	ldr	r0, [r3, #0]
    c8ae:	4b14      	ldr	r3, [pc, #80]	; (c900 <usbdc_get_str_desc+0x8c>)
    c8b0:	681b      	ldr	r3, [r3, #0]
    c8b2:	685b      	ldr	r3, [r3, #4]
    c8b4:	7b3a      	ldrb	r2, [r7, #12]
    c8b6:	4619      	mov	r1, r3
    c8b8:	4b12      	ldr	r3, [pc, #72]	; (c904 <usbdc_get_str_desc+0x90>)
    c8ba:	4798      	blx	r3
    c8bc:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c8be:	68bb      	ldr	r3, [r7, #8]
    c8c0:	2b00      	cmp	r3, #0
    c8c2:	d101      	bne.n	c8c8 <usbdc_get_str_desc+0x54>
		return false;
    c8c4:	2300      	movs	r3, #0
    c8c6:	e017      	b.n	c8f8 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c8c8:	68bb      	ldr	r3, [r7, #8]
    c8ca:	781b      	ldrb	r3, [r3, #0]
    c8cc:	b29b      	uxth	r3, r3
    c8ce:	89fa      	ldrh	r2, [r7, #14]
    c8d0:	429a      	cmp	r2, r3
    c8d2:	d802      	bhi.n	c8da <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c8d4:	2300      	movs	r3, #0
    c8d6:	737b      	strb	r3, [r7, #13]
    c8d8:	e002      	b.n	c8e0 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c8da:	68bb      	ldr	r3, [r7, #8]
    c8dc:	781b      	ldrb	r3, [r3, #0]
    c8de:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c8e0:	89fa      	ldrh	r2, [r7, #14]
    c8e2:	7b7b      	ldrb	r3, [r7, #13]
    c8e4:	79f8      	ldrb	r0, [r7, #7]
    c8e6:	68b9      	ldr	r1, [r7, #8]
    c8e8:	4c07      	ldr	r4, [pc, #28]	; (c908 <usbdc_get_str_desc+0x94>)
    c8ea:	47a0      	blx	r4
    c8ec:	4603      	mov	r3, r0
    c8ee:	2b00      	cmp	r3, #0
    c8f0:	d001      	beq.n	c8f6 <usbdc_get_str_desc+0x82>
		return false;
    c8f2:	2300      	movs	r3, #0
    c8f4:	e000      	b.n	c8f8 <usbdc_get_str_desc+0x84>
	}
	return true;
    c8f6:	2301      	movs	r3, #1
}
    c8f8:	4618      	mov	r0, r3
    c8fa:	3714      	adds	r7, #20
    c8fc:	46bd      	mov	sp, r7
    c8fe:	bd90      	pop	{r4, r7, pc}
    c900:	20002634 	.word	0x20002634
    c904:	0000d5f9 	.word	0x0000d5f9
    c908:	0000d231 	.word	0x0000d231

0000c90c <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c90c:	b580      	push	{r7, lr}
    c90e:	b084      	sub	sp, #16
    c910:	af00      	add	r7, sp, #0
    c912:	4603      	mov	r3, r0
    c914:	6039      	str	r1, [r7, #0]
    c916:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c918:	683b      	ldr	r3, [r7, #0]
    c91a:	885b      	ldrh	r3, [r3, #2]
    c91c:	b29b      	uxth	r3, r3
    c91e:	0a1b      	lsrs	r3, r3, #8
    c920:	b29b      	uxth	r3, r3
    c922:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c924:	7bfb      	ldrb	r3, [r7, #15]
    c926:	2b02      	cmp	r3, #2
    c928:	d00d      	beq.n	c946 <usbdc_get_desc_req+0x3a>
    c92a:	2b03      	cmp	r3, #3
    c92c:	d012      	beq.n	c954 <usbdc_get_desc_req+0x48>
    c92e:	2b01      	cmp	r3, #1
    c930:	d002      	beq.n	c938 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c932:	bf00      	nop
	}
	return false;
    c934:	2300      	movs	r3, #0
    c936:	e013      	b.n	c960 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c938:	79fb      	ldrb	r3, [r7, #7]
    c93a:	6839      	ldr	r1, [r7, #0]
    c93c:	4618      	mov	r0, r3
    c93e:	4b0a      	ldr	r3, [pc, #40]	; (c968 <usbdc_get_desc_req+0x5c>)
    c940:	4798      	blx	r3
    c942:	4603      	mov	r3, r0
    c944:	e00c      	b.n	c960 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c946:	79fb      	ldrb	r3, [r7, #7]
    c948:	6839      	ldr	r1, [r7, #0]
    c94a:	4618      	mov	r0, r3
    c94c:	4b07      	ldr	r3, [pc, #28]	; (c96c <usbdc_get_desc_req+0x60>)
    c94e:	4798      	blx	r3
    c950:	4603      	mov	r3, r0
    c952:	e005      	b.n	c960 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c954:	79fb      	ldrb	r3, [r7, #7]
    c956:	6839      	ldr	r1, [r7, #0]
    c958:	4618      	mov	r0, r3
    c95a:	4b05      	ldr	r3, [pc, #20]	; (c970 <usbdc_get_desc_req+0x64>)
    c95c:	4798      	blx	r3
    c95e:	4603      	mov	r3, r0
}
    c960:	4618      	mov	r0, r3
    c962:	3710      	adds	r7, #16
    c964:	46bd      	mov	sp, r7
    c966:	bd80      	pop	{r7, pc}
    c968:	0000c74d 	.word	0x0000c74d
    c96c:	0000c7c5 	.word	0x0000c7c5
    c970:	0000c875 	.word	0x0000c875

0000c974 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c974:	b590      	push	{r4, r7, lr}
    c976:	b085      	sub	sp, #20
    c978:	af00      	add	r7, sp, #0
    c97a:	4603      	mov	r3, r0
    c97c:	6039      	str	r1, [r7, #0]
    c97e:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c980:	683b      	ldr	r3, [r7, #0]
    c982:	781b      	ldrb	r3, [r3, #0]
    c984:	f003 031f 	and.w	r3, r3, #31
    c988:	2b00      	cmp	r3, #0
    c98a:	db1b      	blt.n	c9c4 <usbdc_get_status_req+0x50>
    c98c:	2b01      	cmp	r3, #1
    c98e:	dd02      	ble.n	c996 <usbdc_get_status_req+0x22>
    c990:	2b02      	cmp	r3, #2
    c992:	d003      	beq.n	c99c <usbdc_get_status_req+0x28>
    c994:	e016      	b.n	c9c4 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c996:	2300      	movs	r3, #0
    c998:	60fb      	str	r3, [r7, #12]
		break;
    c99a:	e015      	b.n	c9c8 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c99c:	683b      	ldr	r3, [r7, #0]
    c99e:	889b      	ldrh	r3, [r3, #4]
    c9a0:	b29b      	uxth	r3, r3
    c9a2:	b2db      	uxtb	r3, r3
    c9a4:	2102      	movs	r1, #2
    c9a6:	4618      	mov	r0, r3
    c9a8:	4b0f      	ldr	r3, [pc, #60]	; (c9e8 <usbdc_get_status_req+0x74>)
    c9aa:	4798      	blx	r3
    c9ac:	4603      	mov	r3, r0
    c9ae:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c9b0:	68fb      	ldr	r3, [r7, #12]
    c9b2:	2b00      	cmp	r3, #0
    c9b4:	da01      	bge.n	c9ba <usbdc_get_status_req+0x46>
			return false;
    c9b6:	2300      	movs	r3, #0
    c9b8:	e012      	b.n	c9e0 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c9ba:	68fb      	ldr	r3, [r7, #12]
    c9bc:	f003 0301 	and.w	r3, r3, #1
    c9c0:	60fb      	str	r3, [r7, #12]
		break;
    c9c2:	e001      	b.n	c9c8 <usbdc_get_status_req+0x54>
	default:
		return false;
    c9c4:	2300      	movs	r3, #0
    c9c6:	e00b      	b.n	c9e0 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c9c8:	4b08      	ldr	r3, [pc, #32]	; (c9ec <usbdc_get_status_req+0x78>)
    c9ca:	695b      	ldr	r3, [r3, #20]
    c9cc:	89ba      	ldrh	r2, [r7, #12]
    c9ce:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c9d0:	4b06      	ldr	r3, [pc, #24]	; (c9ec <usbdc_get_status_req+0x78>)
    c9d2:	6959      	ldr	r1, [r3, #20]
    c9d4:	79f8      	ldrb	r0, [r7, #7]
    c9d6:	2300      	movs	r3, #0
    c9d8:	2202      	movs	r2, #2
    c9da:	4c05      	ldr	r4, [pc, #20]	; (c9f0 <usbdc_get_status_req+0x7c>)
    c9dc:	47a0      	blx	r4
	return true;
    c9de:	2301      	movs	r3, #1
}
    c9e0:	4618      	mov	r0, r3
    c9e2:	3714      	adds	r7, #20
    c9e4:	46bd      	mov	sp, r7
    c9e6:	bd90      	pop	{r4, r7, pc}
    c9e8:	00003a31 	.word	0x00003a31
    c9ec:	20002634 	.word	0x20002634
    c9f0:	0000d231 	.word	0x0000d231

0000c9f4 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c9f4:	b590      	push	{r4, r7, lr}
    c9f6:	b085      	sub	sp, #20
    c9f8:	af00      	add	r7, sp, #0
    c9fa:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c9fc:	4b1f      	ldr	r3, [pc, #124]	; (ca7c <usbdc_get_interface+0x88>)
    c9fe:	691b      	ldr	r3, [r3, #16]
    ca00:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    ca02:	4b1e      	ldr	r3, [pc, #120]	; (ca7c <usbdc_get_interface+0x88>)
    ca04:	7f5b      	ldrb	r3, [r3, #29]
    ca06:	461a      	mov	r2, r3
    ca08:	687b      	ldr	r3, [r7, #4]
    ca0a:	889b      	ldrh	r3, [r3, #4]
    ca0c:	b29b      	uxth	r3, r3
    ca0e:	fa42 f303 	asr.w	r3, r2, r3
    ca12:	f003 0301 	and.w	r3, r3, #1
    ca16:	2b00      	cmp	r3, #0
    ca18:	d128      	bne.n	ca6c <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    ca1a:	4b18      	ldr	r3, [pc, #96]	; (ca7c <usbdc_get_interface+0x88>)
    ca1c:	695b      	ldr	r3, [r3, #20]
    ca1e:	2200      	movs	r2, #0
    ca20:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ca22:	4b16      	ldr	r3, [pc, #88]	; (ca7c <usbdc_get_interface+0x88>)
    ca24:	6959      	ldr	r1, [r3, #20]
    ca26:	2300      	movs	r3, #0
    ca28:	2201      	movs	r2, #1
    ca2a:	2000      	movs	r0, #0
    ca2c:	4c14      	ldr	r4, [pc, #80]	; (ca80 <usbdc_get_interface+0x8c>)
    ca2e:	47a0      	blx	r4
		return true;
    ca30:	2301      	movs	r3, #1
    ca32:	e01f      	b.n	ca74 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    ca34:	68fb      	ldr	r3, [r7, #12]
    ca36:	685b      	ldr	r3, [r3, #4]
    ca38:	687a      	ldr	r2, [r7, #4]
    ca3a:	2102      	movs	r1, #2
    ca3c:	68f8      	ldr	r0, [r7, #12]
    ca3e:	4798      	blx	r3
    ca40:	60b8      	str	r0, [r7, #8]
    ca42:	68bb      	ldr	r3, [r7, #8]
    ca44:	2b00      	cmp	r3, #0
    ca46:	da03      	bge.n	ca50 <usbdc_get_interface+0x5c>
			func = func->next;
    ca48:	68fb      	ldr	r3, [r7, #12]
    ca4a:	681b      	ldr	r3, [r3, #0]
    ca4c:	60fb      	str	r3, [r7, #12]
    ca4e:	e00d      	b.n	ca6c <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    ca50:	4b0a      	ldr	r3, [pc, #40]	; (ca7c <usbdc_get_interface+0x88>)
    ca52:	695b      	ldr	r3, [r3, #20]
    ca54:	68ba      	ldr	r2, [r7, #8]
    ca56:	b2d2      	uxtb	r2, r2
    ca58:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ca5a:	4b08      	ldr	r3, [pc, #32]	; (ca7c <usbdc_get_interface+0x88>)
    ca5c:	6959      	ldr	r1, [r3, #20]
    ca5e:	2300      	movs	r3, #0
    ca60:	2201      	movs	r2, #1
    ca62:	2000      	movs	r0, #0
    ca64:	4c06      	ldr	r4, [pc, #24]	; (ca80 <usbdc_get_interface+0x8c>)
    ca66:	47a0      	blx	r4
			return true;
    ca68:	2301      	movs	r3, #1
    ca6a:	e003      	b.n	ca74 <usbdc_get_interface+0x80>
	while (NULL != func) {
    ca6c:	68fb      	ldr	r3, [r7, #12]
    ca6e:	2b00      	cmp	r3, #0
    ca70:	d1e0      	bne.n	ca34 <usbdc_get_interface+0x40>
		}
	}
	return false;
    ca72:	2300      	movs	r3, #0
}
    ca74:	4618      	mov	r0, r3
    ca76:	3714      	adds	r7, #20
    ca78:	46bd      	mov	sp, r7
    ca7a:	bd90      	pop	{r4, r7, pc}
    ca7c:	20002634 	.word	0x20002634
    ca80:	0000d231 	.word	0x0000d231

0000ca84 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    ca84:	b590      	push	{r4, r7, lr}
    ca86:	b083      	sub	sp, #12
    ca88:	af00      	add	r7, sp, #0
    ca8a:	4603      	mov	r3, r0
    ca8c:	6039      	str	r1, [r7, #0]
    ca8e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ca90:	683b      	ldr	r3, [r7, #0]
    ca92:	785b      	ldrb	r3, [r3, #1]
    ca94:	2b0a      	cmp	r3, #10
    ca96:	d83a      	bhi.n	cb0e <usbdc_get_req+0x8a>
    ca98:	a201      	add	r2, pc, #4	; (adr r2, caa0 <usbdc_get_req+0x1c>)
    ca9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ca9e:	bf00      	nop
    caa0:	0000caf7 	.word	0x0000caf7
    caa4:	0000cb0f 	.word	0x0000cb0f
    caa8:	0000cb0f 	.word	0x0000cb0f
    caac:	0000cb0f 	.word	0x0000cb0f
    cab0:	0000cb0f 	.word	0x0000cb0f
    cab4:	0000cb0f 	.word	0x0000cb0f
    cab8:	0000cacd 	.word	0x0000cacd
    cabc:	0000cb0f 	.word	0x0000cb0f
    cac0:	0000cadb 	.word	0x0000cadb
    cac4:	0000cb0f 	.word	0x0000cb0f
    cac8:	0000cb05 	.word	0x0000cb05
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    cacc:	79fb      	ldrb	r3, [r7, #7]
    cace:	6839      	ldr	r1, [r7, #0]
    cad0:	4618      	mov	r0, r3
    cad2:	4b11      	ldr	r3, [pc, #68]	; (cb18 <usbdc_get_req+0x94>)
    cad4:	4798      	blx	r3
    cad6:	4603      	mov	r3, r0
    cad8:	e01a      	b.n	cb10 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    cada:	4b10      	ldr	r3, [pc, #64]	; (cb1c <usbdc_get_req+0x98>)
    cadc:	695b      	ldr	r3, [r3, #20]
    cade:	4a0f      	ldr	r2, [pc, #60]	; (cb1c <usbdc_get_req+0x98>)
    cae0:	7ed2      	ldrb	r2, [r2, #27]
    cae2:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    cae4:	4b0d      	ldr	r3, [pc, #52]	; (cb1c <usbdc_get_req+0x98>)
    cae6:	6959      	ldr	r1, [r3, #20]
    cae8:	79f8      	ldrb	r0, [r7, #7]
    caea:	2300      	movs	r3, #0
    caec:	2201      	movs	r2, #1
    caee:	4c0c      	ldr	r4, [pc, #48]	; (cb20 <usbdc_get_req+0x9c>)
    caf0:	47a0      	blx	r4
		return true;
    caf2:	2301      	movs	r3, #1
    caf4:	e00c      	b.n	cb10 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    caf6:	79fb      	ldrb	r3, [r7, #7]
    caf8:	6839      	ldr	r1, [r7, #0]
    cafa:	4618      	mov	r0, r3
    cafc:	4b09      	ldr	r3, [pc, #36]	; (cb24 <usbdc_get_req+0xa0>)
    cafe:	4798      	blx	r3
    cb00:	4603      	mov	r3, r0
    cb02:	e005      	b.n	cb10 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    cb04:	6838      	ldr	r0, [r7, #0]
    cb06:	4b08      	ldr	r3, [pc, #32]	; (cb28 <usbdc_get_req+0xa4>)
    cb08:	4798      	blx	r3
    cb0a:	4603      	mov	r3, r0
    cb0c:	e000      	b.n	cb10 <usbdc_get_req+0x8c>
	default:
		return false;
    cb0e:	2300      	movs	r3, #0
	}
}
    cb10:	4618      	mov	r0, r3
    cb12:	370c      	adds	r7, #12
    cb14:	46bd      	mov	sp, r7
    cb16:	bd90      	pop	{r4, r7, pc}
    cb18:	0000c90d 	.word	0x0000c90d
    cb1c:	20002634 	.word	0x20002634
    cb20:	0000d231 	.word	0x0000d231
    cb24:	0000c975 	.word	0x0000c975
    cb28:	0000c9f5 	.word	0x0000c9f5

0000cb2c <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cb2c:	b590      	push	{r4, r7, lr}
    cb2e:	b083      	sub	sp, #12
    cb30:	af00      	add	r7, sp, #0
    cb32:	4603      	mov	r3, r0
    cb34:	6039      	str	r1, [r7, #0]
    cb36:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cb38:	683b      	ldr	r3, [r7, #0]
    cb3a:	781b      	ldrb	r3, [r3, #0]
    cb3c:	f003 031f 	and.w	r3, r3, #31
    cb40:	2b02      	cmp	r3, #2
    cb42:	d116      	bne.n	cb72 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    cb44:	683b      	ldr	r3, [r7, #0]
    cb46:	88db      	ldrh	r3, [r3, #6]
    cb48:	b29b      	uxth	r3, r3
    cb4a:	2b00      	cmp	r3, #0
    cb4c:	d001      	beq.n	cb52 <usbdc_clear_ftr_req+0x26>
			return false;
    cb4e:	2300      	movs	r3, #0
    cb50:	e010      	b.n	cb74 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    cb52:	683b      	ldr	r3, [r7, #0]
    cb54:	889b      	ldrh	r3, [r3, #4]
    cb56:	b29b      	uxth	r3, r3
    cb58:	b2db      	uxtb	r3, r3
    cb5a:	2100      	movs	r1, #0
    cb5c:	4618      	mov	r0, r3
    cb5e:	4b07      	ldr	r3, [pc, #28]	; (cb7c <usbdc_clear_ftr_req+0x50>)
    cb60:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    cb62:	79f8      	ldrb	r0, [r7, #7]
    cb64:	2301      	movs	r3, #1
    cb66:	2200      	movs	r2, #0
    cb68:	2100      	movs	r1, #0
    cb6a:	4c05      	ldr	r4, [pc, #20]	; (cb80 <usbdc_clear_ftr_req+0x54>)
    cb6c:	47a0      	blx	r4
		return true;
    cb6e:	2301      	movs	r3, #1
    cb70:	e000      	b.n	cb74 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    cb72:	2300      	movs	r3, #0
	}
}
    cb74:	4618      	mov	r0, r3
    cb76:	370c      	adds	r7, #12
    cb78:	46bd      	mov	sp, r7
    cb7a:	bd90      	pop	{r4, r7, pc}
    cb7c:	00003a31 	.word	0x00003a31
    cb80:	0000d231 	.word	0x0000d231

0000cb84 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cb84:	b590      	push	{r4, r7, lr}
    cb86:	b083      	sub	sp, #12
    cb88:	af00      	add	r7, sp, #0
    cb8a:	4603      	mov	r3, r0
    cb8c:	6039      	str	r1, [r7, #0]
    cb8e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cb90:	683b      	ldr	r3, [r7, #0]
    cb92:	781b      	ldrb	r3, [r3, #0]
    cb94:	f003 031f 	and.w	r3, r3, #31
    cb98:	2b02      	cmp	r3, #2
    cb9a:	d116      	bne.n	cbca <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    cb9c:	683b      	ldr	r3, [r7, #0]
    cb9e:	88db      	ldrh	r3, [r3, #6]
    cba0:	b29b      	uxth	r3, r3
    cba2:	2b00      	cmp	r3, #0
    cba4:	d001      	beq.n	cbaa <usbdc_set_ftr_req+0x26>
			return false;
    cba6:	2300      	movs	r3, #0
    cba8:	e010      	b.n	cbcc <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    cbaa:	683b      	ldr	r3, [r7, #0]
    cbac:	889b      	ldrh	r3, [r3, #4]
    cbae:	b29b      	uxth	r3, r3
    cbb0:	b2db      	uxtb	r3, r3
    cbb2:	2101      	movs	r1, #1
    cbb4:	4618      	mov	r0, r3
    cbb6:	4b07      	ldr	r3, [pc, #28]	; (cbd4 <usbdc_set_ftr_req+0x50>)
    cbb8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    cbba:	79f8      	ldrb	r0, [r7, #7]
    cbbc:	2301      	movs	r3, #1
    cbbe:	2200      	movs	r2, #0
    cbc0:	2100      	movs	r1, #0
    cbc2:	4c05      	ldr	r4, [pc, #20]	; (cbd8 <usbdc_set_ftr_req+0x54>)
    cbc4:	47a0      	blx	r4
		return true;
    cbc6:	2301      	movs	r3, #1
    cbc8:	e000      	b.n	cbcc <usbdc_set_ftr_req+0x48>
	default:
		return false;
    cbca:	2300      	movs	r3, #0
	}
}
    cbcc:	4618      	mov	r0, r3
    cbce:	370c      	adds	r7, #12
    cbd0:	46bd      	mov	sp, r7
    cbd2:	bd90      	pop	{r4, r7, pc}
    cbd4:	00003a31 	.word	0x00003a31
    cbd8:	0000d231 	.word	0x0000d231

0000cbdc <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    cbdc:	b580      	push	{r7, lr}
    cbde:	b082      	sub	sp, #8
    cbe0:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cbe2:	4b0a      	ldr	r3, [pc, #40]	; (cc0c <usbdc_unconfig+0x30>)
    cbe4:	691b      	ldr	r3, [r3, #16]
    cbe6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    cbe8:	e008      	b.n	cbfc <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    cbea:	687b      	ldr	r3, [r7, #4]
    cbec:	685b      	ldr	r3, [r3, #4]
    cbee:	2200      	movs	r2, #0
    cbf0:	2101      	movs	r1, #1
    cbf2:	6878      	ldr	r0, [r7, #4]
    cbf4:	4798      	blx	r3
		func = func->next;
    cbf6:	687b      	ldr	r3, [r7, #4]
    cbf8:	681b      	ldr	r3, [r3, #0]
    cbfa:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    cbfc:	687b      	ldr	r3, [r7, #4]
    cbfe:	2b00      	cmp	r3, #0
    cc00:	d1f3      	bne.n	cbea <usbdc_unconfig+0xe>
	}
}
    cc02:	bf00      	nop
    cc04:	3708      	adds	r7, #8
    cc06:	46bd      	mov	sp, r7
    cc08:	bd80      	pop	{r7, pc}
    cc0a:	bf00      	nop
    cc0c:	20002634 	.word	0x20002634

0000cc10 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    cc10:	b580      	push	{r7, lr}
    cc12:	b088      	sub	sp, #32
    cc14:	af00      	add	r7, sp, #0
    cc16:	4603      	mov	r3, r0
    cc18:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    cc1a:	2300      	movs	r3, #0
    cc1c:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    cc1e:	23ff      	movs	r3, #255	; 0xff
    cc20:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    cc22:	79fb      	ldrb	r3, [r7, #7]
    cc24:	2b00      	cmp	r3, #0
    cc26:	d103      	bne.n	cc30 <usbdc_set_config+0x20>
		usbdc_unconfig();
    cc28:	4b2e      	ldr	r3, [pc, #184]	; (cce4 <usbdc_set_config+0xd4>)
    cc2a:	4798      	blx	r3
		return true;
    cc2c:	2301      	movs	r3, #1
    cc2e:	e055      	b.n	ccdc <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cc30:	69bb      	ldr	r3, [r7, #24]
    cc32:	2b00      	cmp	r3, #0
    cc34:	d10a      	bne.n	cc4c <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    cc36:	4b2c      	ldr	r3, [pc, #176]	; (cce8 <usbdc_set_config+0xd8>)
    cc38:	681b      	ldr	r3, [r3, #0]
    cc3a:	6818      	ldr	r0, [r3, #0]
    cc3c:	4b2a      	ldr	r3, [pc, #168]	; (cce8 <usbdc_set_config+0xd8>)
    cc3e:	681b      	ldr	r3, [r3, #0]
    cc40:	685b      	ldr	r3, [r3, #4]
    cc42:	79fa      	ldrb	r2, [r7, #7]
    cc44:	4619      	mov	r1, r3
    cc46:	4b29      	ldr	r3, [pc, #164]	; (ccec <usbdc_set_config+0xdc>)
    cc48:	4798      	blx	r3
    cc4a:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    cc4c:	69bb      	ldr	r3, [r7, #24]
    cc4e:	2b00      	cmp	r3, #0
    cc50:	d101      	bne.n	cc56 <usbdc_set_config+0x46>
		return false;
    cc52:	2300      	movs	r3, #0
    cc54:	e042      	b.n	ccdc <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    cc56:	69b8      	ldr	r0, [r7, #24]
    cc58:	4b25      	ldr	r3, [pc, #148]	; (ccf0 <usbdc_set_config+0xe0>)
    cc5a:	4798      	blx	r3
    cc5c:	4603      	mov	r3, r0
    cc5e:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    cc60:	8abb      	ldrh	r3, [r7, #20]
    cc62:	69ba      	ldr	r2, [r7, #24]
    cc64:	4413      	add	r3, r2
    cc66:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    cc68:	693b      	ldr	r3, [r7, #16]
    cc6a:	2204      	movs	r2, #4
    cc6c:	4619      	mov	r1, r3
    cc6e:	69b8      	ldr	r0, [r7, #24]
    cc70:	4b20      	ldr	r3, [pc, #128]	; (ccf4 <usbdc_set_config+0xe4>)
    cc72:	4798      	blx	r3
    cc74:	4603      	mov	r3, r0
    cc76:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    cc78:	e02c      	b.n	ccd4 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    cc7a:	68fb      	ldr	r3, [r7, #12]
    cc7c:	3302      	adds	r3, #2
    cc7e:	781b      	ldrb	r3, [r3, #0]
    cc80:	7dfa      	ldrb	r2, [r7, #23]
    cc82:	429a      	cmp	r2, r3
    cc84:	d018      	beq.n	ccb8 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    cc86:	68fb      	ldr	r3, [r7, #12]
    cc88:	789b      	ldrb	r3, [r3, #2]
    cc8a:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    cc8c:	4b16      	ldr	r3, [pc, #88]	; (cce8 <usbdc_set_config+0xd8>)
    cc8e:	691b      	ldr	r3, [r3, #16]
    cc90:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    cc92:	e00c      	b.n	ccae <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    cc94:	69fb      	ldr	r3, [r7, #28]
    cc96:	685b      	ldr	r3, [r3, #4]
    cc98:	f107 020c 	add.w	r2, r7, #12
    cc9c:	2100      	movs	r1, #0
    cc9e:	69f8      	ldr	r0, [r7, #28]
    cca0:	4798      	blx	r3
    cca2:	4603      	mov	r3, r0
    cca4:	2b00      	cmp	r3, #0
    cca6:	d006      	beq.n	ccb6 <usbdc_set_config+0xa6>
					func = func->next;
    cca8:	69fb      	ldr	r3, [r7, #28]
    ccaa:	681b      	ldr	r3, [r3, #0]
    ccac:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    ccae:	69fb      	ldr	r3, [r7, #28]
    ccb0:	2b00      	cmp	r3, #0
    ccb2:	d1ef      	bne.n	cc94 <usbdc_set_config+0x84>
    ccb4:	e000      	b.n	ccb8 <usbdc_set_config+0xa8>
				} else {
					break;
    ccb6:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    ccb8:	68fb      	ldr	r3, [r7, #12]
    ccba:	4618      	mov	r0, r3
    ccbc:	4b0e      	ldr	r3, [pc, #56]	; (ccf8 <usbdc_set_config+0xe8>)
    ccbe:	4798      	blx	r3
    ccc0:	4603      	mov	r3, r0
    ccc2:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ccc4:	68fb      	ldr	r3, [r7, #12]
    ccc6:	6939      	ldr	r1, [r7, #16]
    ccc8:	2204      	movs	r2, #4
    ccca:	4618      	mov	r0, r3
    cccc:	4b09      	ldr	r3, [pc, #36]	; (ccf4 <usbdc_set_config+0xe4>)
    ccce:	4798      	blx	r3
    ccd0:	4603      	mov	r3, r0
    ccd2:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    ccd4:	68fb      	ldr	r3, [r7, #12]
    ccd6:	2b00      	cmp	r3, #0
    ccd8:	d1cf      	bne.n	cc7a <usbdc_set_config+0x6a>
	}
	return true;
    ccda:	2301      	movs	r3, #1
}
    ccdc:	4618      	mov	r0, r3
    ccde:	3720      	adds	r7, #32
    cce0:	46bd      	mov	sp, r7
    cce2:	bd80      	pop	{r7, pc}
    cce4:	0000cbdd 	.word	0x0000cbdd
    cce8:	20002634 	.word	0x20002634
    ccec:	0000d581 	.word	0x0000d581
    ccf0:	0000c72d 	.word	0x0000c72d
    ccf4:	0000d4c1 	.word	0x0000d4c1
    ccf8:	0000c709 	.word	0x0000c709

0000ccfc <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    ccfc:	b580      	push	{r7, lr}
    ccfe:	b082      	sub	sp, #8
    cd00:	af00      	add	r7, sp, #0
    cd02:	4603      	mov	r3, r0
    cd04:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    cd06:	79fb      	ldrb	r3, [r7, #7]
    cd08:	4618      	mov	r0, r3
    cd0a:	4b03      	ldr	r3, [pc, #12]	; (cd18 <usbdc_set_address+0x1c>)
    cd0c:	4798      	blx	r3
}
    cd0e:	bf00      	nop
    cd10:	3708      	adds	r7, #8
    cd12:	46bd      	mov	sp, r7
    cd14:	bd80      	pop	{r7, pc}
    cd16:	bf00      	nop
    cd18:	0000364d 	.word	0x0000364d

0000cd1c <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    cd1c:	b590      	push	{r4, r7, lr}
    cd1e:	b087      	sub	sp, #28
    cd20:	af00      	add	r7, sp, #0
    cd22:	4603      	mov	r3, r0
    cd24:	460a      	mov	r2, r1
    cd26:	80fb      	strh	r3, [r7, #6]
    cd28:	4613      	mov	r3, r2
    cd2a:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    cd2c:	2300      	movs	r3, #0
    cd2e:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    cd30:	693b      	ldr	r3, [r7, #16]
    cd32:	2b00      	cmp	r3, #0
    cd34:	d10b      	bne.n	cd4e <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    cd36:	4b43      	ldr	r3, [pc, #268]	; (ce44 <usbdc_set_interface+0x128>)
    cd38:	681b      	ldr	r3, [r3, #0]
    cd3a:	6818      	ldr	r0, [r3, #0]
    cd3c:	4b41      	ldr	r3, [pc, #260]	; (ce44 <usbdc_set_interface+0x128>)
    cd3e:	681b      	ldr	r3, [r3, #0]
    cd40:	6859      	ldr	r1, [r3, #4]
    cd42:	4b40      	ldr	r3, [pc, #256]	; (ce44 <usbdc_set_interface+0x128>)
    cd44:	7edb      	ldrb	r3, [r3, #27]
    cd46:	461a      	mov	r2, r3
    cd48:	4b3f      	ldr	r3, [pc, #252]	; (ce48 <usbdc_set_interface+0x12c>)
    cd4a:	4798      	blx	r3
    cd4c:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    cd4e:	693b      	ldr	r3, [r7, #16]
    cd50:	2b00      	cmp	r3, #0
    cd52:	d101      	bne.n	cd58 <usbdc_set_interface+0x3c>
		return false;
    cd54:	2300      	movs	r3, #0
    cd56:	e071      	b.n	ce3c <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    cd58:	693b      	ldr	r3, [r7, #16]
    cd5a:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    cd5c:	6938      	ldr	r0, [r7, #16]
    cd5e:	4b3b      	ldr	r3, [pc, #236]	; (ce4c <usbdc_set_interface+0x130>)
    cd60:	4798      	blx	r3
    cd62:	4603      	mov	r3, r0
    cd64:	461a      	mov	r2, r3
    cd66:	693b      	ldr	r3, [r7, #16]
    cd68:	4413      	add	r3, r2
    cd6a:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    cd6c:	68bb      	ldr	r3, [r7, #8]
    cd6e:	68f9      	ldr	r1, [r7, #12]
    cd70:	2204      	movs	r2, #4
    cd72:	4618      	mov	r0, r3
    cd74:	4b36      	ldr	r3, [pc, #216]	; (ce50 <usbdc_set_interface+0x134>)
    cd76:	4798      	blx	r3
    cd78:	6138      	str	r0, [r7, #16]
    cd7a:	693b      	ldr	r3, [r7, #16]
    cd7c:	2b00      	cmp	r3, #0
    cd7e:	d113      	bne.n	cda8 <usbdc_set_interface+0x8c>
		return false;
    cd80:	2300      	movs	r3, #0
    cd82:	e05b      	b.n	ce3c <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    cd84:	68bb      	ldr	r3, [r7, #8]
    cd86:	4618      	mov	r0, r3
    cd88:	4b32      	ldr	r3, [pc, #200]	; (ce54 <usbdc_set_interface+0x138>)
    cd8a:	4798      	blx	r3
    cd8c:	4603      	mov	r3, r0
    cd8e:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cd90:	68bb      	ldr	r3, [r7, #8]
    cd92:	68f9      	ldr	r1, [r7, #12]
    cd94:	2204      	movs	r2, #4
    cd96:	4618      	mov	r0, r3
    cd98:	4b2d      	ldr	r3, [pc, #180]	; (ce50 <usbdc_set_interface+0x134>)
    cd9a:	4798      	blx	r3
    cd9c:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    cd9e:	693b      	ldr	r3, [r7, #16]
    cda0:	2b00      	cmp	r3, #0
    cda2:	d101      	bne.n	cda8 <usbdc_set_interface+0x8c>
			return false;
    cda4:	2300      	movs	r3, #0
    cda6:	e049      	b.n	ce3c <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    cda8:	693b      	ldr	r3, [r7, #16]
    cdaa:	3302      	adds	r3, #2
    cdac:	781b      	ldrb	r3, [r3, #0]
    cdae:	b29b      	uxth	r3, r3
    cdb0:	88ba      	ldrh	r2, [r7, #4]
    cdb2:	429a      	cmp	r2, r3
    cdb4:	d1e6      	bne.n	cd84 <usbdc_set_interface+0x68>
    cdb6:	693b      	ldr	r3, [r7, #16]
    cdb8:	3303      	adds	r3, #3
    cdba:	781b      	ldrb	r3, [r3, #0]
    cdbc:	b29b      	uxth	r3, r3
    cdbe:	88fa      	ldrh	r2, [r7, #6]
    cdc0:	429a      	cmp	r2, r3
    cdc2:	d1df      	bne.n	cd84 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    cdc4:	693b      	ldr	r3, [r7, #16]
    cdc6:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    cdc8:	4b1e      	ldr	r3, [pc, #120]	; (ce44 <usbdc_set_interface+0x128>)
    cdca:	691b      	ldr	r3, [r3, #16]
    cdcc:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    cdce:	e031      	b.n	ce34 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    cdd0:	697b      	ldr	r3, [r7, #20]
    cdd2:	685b      	ldr	r3, [r3, #4]
    cdd4:	f107 0208 	add.w	r2, r7, #8
    cdd8:	2101      	movs	r1, #1
    cdda:	6978      	ldr	r0, [r7, #20]
    cddc:	4798      	blx	r3
    cdde:	4603      	mov	r3, r0
    cde0:	2b00      	cmp	r3, #0
    cde2:	d003      	beq.n	cdec <usbdc_set_interface+0xd0>
			func = func->next;
    cde4:	697b      	ldr	r3, [r7, #20]
    cde6:	681b      	ldr	r3, [r3, #0]
    cde8:	617b      	str	r3, [r7, #20]
    cdea:	e023      	b.n	ce34 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    cdec:	697b      	ldr	r3, [r7, #20]
    cdee:	685b      	ldr	r3, [r3, #4]
    cdf0:	f107 0208 	add.w	r2, r7, #8
    cdf4:	2100      	movs	r1, #0
    cdf6:	6978      	ldr	r0, [r7, #20]
    cdf8:	4798      	blx	r3
    cdfa:	4603      	mov	r3, r0
    cdfc:	2b00      	cmp	r3, #0
    cdfe:	d117      	bne.n	ce30 <usbdc_set_interface+0x114>
			if (alt_set) {
    ce00:	88fb      	ldrh	r3, [r7, #6]
    ce02:	2b00      	cmp	r3, #0
    ce04:	d00c      	beq.n	ce20 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    ce06:	4b0f      	ldr	r3, [pc, #60]	; (ce44 <usbdc_set_interface+0x128>)
    ce08:	7f5b      	ldrb	r3, [r3, #29]
    ce0a:	b25a      	sxtb	r2, r3
    ce0c:	88bb      	ldrh	r3, [r7, #4]
    ce0e:	2101      	movs	r1, #1
    ce10:	fa01 f303 	lsl.w	r3, r1, r3
    ce14:	b25b      	sxtb	r3, r3
    ce16:	4313      	orrs	r3, r2
    ce18:	b25b      	sxtb	r3, r3
    ce1a:	b2da      	uxtb	r2, r3
    ce1c:	4b09      	ldr	r3, [pc, #36]	; (ce44 <usbdc_set_interface+0x128>)
    ce1e:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    ce20:	2300      	movs	r3, #0
    ce22:	2200      	movs	r2, #0
    ce24:	2100      	movs	r1, #0
    ce26:	2000      	movs	r0, #0
    ce28:	4c0b      	ldr	r4, [pc, #44]	; (ce58 <usbdc_set_interface+0x13c>)
    ce2a:	47a0      	blx	r4
			return true;
    ce2c:	2301      	movs	r3, #1
    ce2e:	e005      	b.n	ce3c <usbdc_set_interface+0x120>
		} else {
			return false;
    ce30:	2300      	movs	r3, #0
    ce32:	e003      	b.n	ce3c <usbdc_set_interface+0x120>
	while (NULL != func) {
    ce34:	697b      	ldr	r3, [r7, #20]
    ce36:	2b00      	cmp	r3, #0
    ce38:	d1ca      	bne.n	cdd0 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    ce3a:	2300      	movs	r3, #0
}
    ce3c:	4618      	mov	r0, r3
    ce3e:	371c      	adds	r7, #28
    ce40:	46bd      	mov	sp, r7
    ce42:	bd90      	pop	{r4, r7, pc}
    ce44:	20002634 	.word	0x20002634
    ce48:	0000d581 	.word	0x0000d581
    ce4c:	0000c72d 	.word	0x0000c72d
    ce50:	0000d4c1 	.word	0x0000d4c1
    ce54:	0000c709 	.word	0x0000c709
    ce58:	0000d231 	.word	0x0000d231

0000ce5c <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    ce5c:	b590      	push	{r4, r7, lr}
    ce5e:	b083      	sub	sp, #12
    ce60:	af00      	add	r7, sp, #0
    ce62:	4603      	mov	r3, r0
    ce64:	6039      	str	r1, [r7, #0]
    ce66:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ce68:	683b      	ldr	r3, [r7, #0]
    ce6a:	785b      	ldrb	r3, [r3, #1]
    ce6c:	3b01      	subs	r3, #1
    ce6e:	2b0a      	cmp	r3, #10
    ce70:	d85b      	bhi.n	cf2a <usbdc_set_req+0xce>
    ce72:	a201      	add	r2, pc, #4	; (adr r2, ce78 <usbdc_set_req+0x1c>)
    ce74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce78:	0000cef7 	.word	0x0000cef7
    ce7c:	0000cf2b 	.word	0x0000cf2b
    ce80:	0000cf05 	.word	0x0000cf05
    ce84:	0000cf2b 	.word	0x0000cf2b
    ce88:	0000cea5 	.word	0x0000cea5
    ce8c:	0000cf2b 	.word	0x0000cf2b
    ce90:	0000cf2b 	.word	0x0000cf2b
    ce94:	0000cf2b 	.word	0x0000cf2b
    ce98:	0000cebf 	.word	0x0000cebf
    ce9c:	0000cf2b 	.word	0x0000cf2b
    cea0:	0000cf13 	.word	0x0000cf13
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cea4:	79f8      	ldrb	r0, [r7, #7]
    cea6:	2301      	movs	r3, #1
    cea8:	2200      	movs	r2, #0
    ceaa:	2100      	movs	r1, #0
    ceac:	4c21      	ldr	r4, [pc, #132]	; (cf34 <usbdc_set_req+0xd8>)
    ceae:	47a0      	blx	r4
    ceb0:	4603      	mov	r3, r0
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	bf0c      	ite	eq
    ceb6:	2301      	moveq	r3, #1
    ceb8:	2300      	movne	r3, #0
    ceba:	b2db      	uxtb	r3, r3
    cebc:	e036      	b.n	cf2c <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    cebe:	683b      	ldr	r3, [r7, #0]
    cec0:	885b      	ldrh	r3, [r3, #2]
    cec2:	b29b      	uxth	r3, r3
    cec4:	b2db      	uxtb	r3, r3
    cec6:	4618      	mov	r0, r3
    cec8:	4b1b      	ldr	r3, [pc, #108]	; (cf38 <usbdc_set_req+0xdc>)
    ceca:	4798      	blx	r3
    cecc:	4603      	mov	r3, r0
    cece:	f083 0301 	eor.w	r3, r3, #1
    ced2:	b2db      	uxtb	r3, r3
    ced4:	2b00      	cmp	r3, #0
    ced6:	d001      	beq.n	cedc <usbdc_set_req+0x80>
			return false;
    ced8:	2300      	movs	r3, #0
    ceda:	e027      	b.n	cf2c <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cedc:	79f8      	ldrb	r0, [r7, #7]
    cede:	2301      	movs	r3, #1
    cee0:	2200      	movs	r2, #0
    cee2:	2100      	movs	r1, #0
    cee4:	4c13      	ldr	r4, [pc, #76]	; (cf34 <usbdc_set_req+0xd8>)
    cee6:	47a0      	blx	r4
    cee8:	4603      	mov	r3, r0
    ceea:	2b00      	cmp	r3, #0
    ceec:	bf0c      	ite	eq
    ceee:	2301      	moveq	r3, #1
    cef0:	2300      	movne	r3, #0
    cef2:	b2db      	uxtb	r3, r3
    cef4:	e01a      	b.n	cf2c <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    cef6:	79fb      	ldrb	r3, [r7, #7]
    cef8:	6839      	ldr	r1, [r7, #0]
    cefa:	4618      	mov	r0, r3
    cefc:	4b0f      	ldr	r3, [pc, #60]	; (cf3c <usbdc_set_req+0xe0>)
    cefe:	4798      	blx	r3
    cf00:	4603      	mov	r3, r0
    cf02:	e013      	b.n	cf2c <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    cf04:	79fb      	ldrb	r3, [r7, #7]
    cf06:	6839      	ldr	r1, [r7, #0]
    cf08:	4618      	mov	r0, r3
    cf0a:	4b0d      	ldr	r3, [pc, #52]	; (cf40 <usbdc_set_req+0xe4>)
    cf0c:	4798      	blx	r3
    cf0e:	4603      	mov	r3, r0
    cf10:	e00c      	b.n	cf2c <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    cf12:	683b      	ldr	r3, [r7, #0]
    cf14:	885b      	ldrh	r3, [r3, #2]
    cf16:	b29a      	uxth	r2, r3
    cf18:	683b      	ldr	r3, [r7, #0]
    cf1a:	889b      	ldrh	r3, [r3, #4]
    cf1c:	b29b      	uxth	r3, r3
    cf1e:	4619      	mov	r1, r3
    cf20:	4610      	mov	r0, r2
    cf22:	4b08      	ldr	r3, [pc, #32]	; (cf44 <usbdc_set_req+0xe8>)
    cf24:	4798      	blx	r3
    cf26:	4603      	mov	r3, r0
    cf28:	e000      	b.n	cf2c <usbdc_set_req+0xd0>
	default:
		return false;
    cf2a:	2300      	movs	r3, #0
	}
}
    cf2c:	4618      	mov	r0, r3
    cf2e:	370c      	adds	r7, #12
    cf30:	46bd      	mov	sp, r7
    cf32:	bd90      	pop	{r4, r7, pc}
    cf34:	0000d231 	.word	0x0000d231
    cf38:	0000cc11 	.word	0x0000cc11
    cf3c:	0000cb2d 	.word	0x0000cb2d
    cf40:	0000cb85 	.word	0x0000cb85
    cf44:	0000cd1d 	.word	0x0000cd1d

0000cf48 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    cf48:	b580      	push	{r7, lr}
    cf4a:	b082      	sub	sp, #8
    cf4c:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cf4e:	4b0a      	ldr	r3, [pc, #40]	; (cf78 <usbdc_sof_notify+0x30>)
    cf50:	685b      	ldr	r3, [r3, #4]
    cf52:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    cf54:	e009      	b.n	cf6a <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    cf56:	687b      	ldr	r3, [r7, #4]
    cf58:	685b      	ldr	r3, [r3, #4]
    cf5a:	2b00      	cmp	r3, #0
    cf5c:	d002      	beq.n	cf64 <usbdc_sof_notify+0x1c>
			sof->cb();
    cf5e:	687b      	ldr	r3, [r7, #4]
    cf60:	685b      	ldr	r3, [r3, #4]
    cf62:	4798      	blx	r3
		}
		sof = sof->next;
    cf64:	687b      	ldr	r3, [r7, #4]
    cf66:	681b      	ldr	r3, [r3, #0]
    cf68:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    cf6a:	687b      	ldr	r3, [r7, #4]
    cf6c:	2b00      	cmp	r3, #0
    cf6e:	d1f2      	bne.n	cf56 <usbdc_sof_notify+0xe>
	}
}
    cf70:	bf00      	nop
    cf72:	3708      	adds	r7, #8
    cf74:	46bd      	mov	sp, r7
    cf76:	bd80      	pop	{r7, pc}
    cf78:	20002634 	.word	0x20002634

0000cf7c <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    cf7c:	b580      	push	{r7, lr}
    cf7e:	b084      	sub	sp, #16
    cf80:	af00      	add	r7, sp, #0
    cf82:	4603      	mov	r3, r0
    cf84:	6039      	str	r1, [r7, #0]
    cf86:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cf88:	4b0b      	ldr	r3, [pc, #44]	; (cfb8 <usbdc_change_notify+0x3c>)
    cf8a:	68db      	ldr	r3, [r3, #12]
    cf8c:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    cf8e:	e00c      	b.n	cfaa <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    cf90:	68fb      	ldr	r3, [r7, #12]
    cf92:	685b      	ldr	r3, [r3, #4]
    cf94:	2b00      	cmp	r3, #0
    cf96:	d005      	beq.n	cfa4 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    cf98:	68fb      	ldr	r3, [r7, #12]
    cf9a:	685b      	ldr	r3, [r3, #4]
    cf9c:	79fa      	ldrb	r2, [r7, #7]
    cf9e:	6839      	ldr	r1, [r7, #0]
    cfa0:	4610      	mov	r0, r2
    cfa2:	4798      	blx	r3
		}
		cg = cg->next;
    cfa4:	68fb      	ldr	r3, [r7, #12]
    cfa6:	681b      	ldr	r3, [r3, #0]
    cfa8:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    cfaa:	68fb      	ldr	r3, [r7, #12]
    cfac:	2b00      	cmp	r3, #0
    cfae:	d1ef      	bne.n	cf90 <usbdc_change_notify+0x14>
	}
}
    cfb0:	bf00      	nop
    cfb2:	3710      	adds	r7, #16
    cfb4:	46bd      	mov	sp, r7
    cfb6:	bd80      	pop	{r7, pc}
    cfb8:	20002634 	.word	0x20002634

0000cfbc <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cfbc:	b580      	push	{r7, lr}
    cfbe:	b084      	sub	sp, #16
    cfc0:	af00      	add	r7, sp, #0
    cfc2:	4603      	mov	r3, r0
    cfc4:	6039      	str	r1, [r7, #0]
    cfc6:	71fb      	strb	r3, [r7, #7]
    cfc8:	4613      	mov	r3, r2
    cfca:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    cfcc:	4b12      	ldr	r3, [pc, #72]	; (d018 <usbdc_request_handler+0x5c>)
    cfce:	689b      	ldr	r3, [r3, #8]
    cfd0:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    cfd2:	e019      	b.n	d008 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    cfd4:	68fb      	ldr	r3, [r7, #12]
    cfd6:	685b      	ldr	r3, [r3, #4]
    cfd8:	2b00      	cmp	r3, #0
    cfda:	d012      	beq.n	d002 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    cfdc:	68fb      	ldr	r3, [r7, #12]
    cfde:	685b      	ldr	r3, [r3, #4]
    cfe0:	79ba      	ldrb	r2, [r7, #6]
    cfe2:	79f8      	ldrb	r0, [r7, #7]
    cfe4:	6839      	ldr	r1, [r7, #0]
    cfe6:	4798      	blx	r3
    cfe8:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    cfea:	68bb      	ldr	r3, [r7, #8]
    cfec:	2b00      	cmp	r3, #0
    cfee:	d101      	bne.n	cff4 <usbdc_request_handler+0x38>
				return true;
    cff0:	2301      	movs	r3, #1
    cff2:	e00d      	b.n	d010 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    cff4:	68bb      	ldr	r3, [r7, #8]
    cff6:	f113 0f0a 	cmn.w	r3, #10
    cffa:	d002      	beq.n	d002 <usbdc_request_handler+0x46>
				return -1;
    cffc:	f04f 33ff 	mov.w	r3, #4294967295
    d000:	e006      	b.n	d010 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d002:	68fb      	ldr	r3, [r7, #12]
    d004:	681b      	ldr	r3, [r3, #0]
    d006:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d008:	68fb      	ldr	r3, [r7, #12]
    d00a:	2b00      	cmp	r3, #0
    d00c:	d1e2      	bne.n	cfd4 <usbdc_request_handler+0x18>
	}
	return false;
    d00e:	2300      	movs	r3, #0
}
    d010:	4618      	mov	r0, r3
    d012:	3710      	adds	r7, #16
    d014:	46bd      	mov	sp, r7
    d016:	bd80      	pop	{r7, pc}
    d018:	20002634 	.word	0x20002634

0000d01c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d01c:	b580      	push	{r7, lr}
    d01e:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d020:	4b01      	ldr	r3, [pc, #4]	; (d028 <usbd_sof_cb+0xc>)
    d022:	4798      	blx	r3
}
    d024:	bf00      	nop
    d026:	bd80      	pop	{r7, pc}
    d028:	0000cf49 	.word	0x0000cf49

0000d02c <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d02c:	b580      	push	{r7, lr}
    d02e:	b082      	sub	sp, #8
    d030:	af00      	add	r7, sp, #0
    d032:	4603      	mov	r3, r0
    d034:	6039      	str	r1, [r7, #0]
    d036:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d038:	79fb      	ldrb	r3, [r7, #7]
    d03a:	2200      	movs	r2, #0
    d03c:	6839      	ldr	r1, [r7, #0]
    d03e:	4618      	mov	r0, r3
    d040:	4b14      	ldr	r3, [pc, #80]	; (d094 <usbdc_cb_ctl_req+0x68>)
    d042:	4798      	blx	r3
    d044:	4603      	mov	r3, r0
    d046:	f1b3 3fff 	cmp.w	r3, #4294967295
    d04a:	d00b      	beq.n	d064 <usbdc_cb_ctl_req+0x38>
    d04c:	2b01      	cmp	r3, #1
    d04e:	d007      	beq.n	d060 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d050:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d052:	683b      	ldr	r3, [r7, #0]
    d054:	781b      	ldrb	r3, [r3, #0]
    d056:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d05a:	2b00      	cmp	r3, #0
    d05c:	d007      	beq.n	d06e <usbdc_cb_ctl_req+0x42>
    d05e:	e003      	b.n	d068 <usbdc_cb_ctl_req+0x3c>
		return true;
    d060:	2301      	movs	r3, #1
    d062:	e013      	b.n	d08c <usbdc_cb_ctl_req+0x60>
		return false;
    d064:	2300      	movs	r3, #0
    d066:	e011      	b.n	d08c <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d068:	2b80      	cmp	r3, #128	; 0x80
    d06a:	d007      	beq.n	d07c <usbdc_cb_ctl_req+0x50>
    d06c:	e00d      	b.n	d08a <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d06e:	79fb      	ldrb	r3, [r7, #7]
    d070:	6839      	ldr	r1, [r7, #0]
    d072:	4618      	mov	r0, r3
    d074:	4b08      	ldr	r3, [pc, #32]	; (d098 <usbdc_cb_ctl_req+0x6c>)
    d076:	4798      	blx	r3
    d078:	4603      	mov	r3, r0
    d07a:	e007      	b.n	d08c <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d07c:	79fb      	ldrb	r3, [r7, #7]
    d07e:	6839      	ldr	r1, [r7, #0]
    d080:	4618      	mov	r0, r3
    d082:	4b06      	ldr	r3, [pc, #24]	; (d09c <usbdc_cb_ctl_req+0x70>)
    d084:	4798      	blx	r3
    d086:	4603      	mov	r3, r0
    d088:	e000      	b.n	d08c <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d08a:	2300      	movs	r3, #0
	}
}
    d08c:	4618      	mov	r0, r3
    d08e:	3708      	adds	r7, #8
    d090:	46bd      	mov	sp, r7
    d092:	bd80      	pop	{r7, pc}
    d094:	0000cfbd 	.word	0x0000cfbd
    d098:	0000ce5d 	.word	0x0000ce5d
    d09c:	0000ca85 	.word	0x0000ca85

0000d0a0 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d0a0:	b580      	push	{r7, lr}
    d0a2:	b082      	sub	sp, #8
    d0a4:	af00      	add	r7, sp, #0
    d0a6:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d0a8:	687b      	ldr	r3, [r7, #4]
    d0aa:	781b      	ldrb	r3, [r3, #0]
    d0ac:	2b00      	cmp	r3, #0
    d0ae:	d135      	bne.n	d11c <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d0b0:	687b      	ldr	r3, [r7, #4]
    d0b2:	785b      	ldrb	r3, [r3, #1]
    d0b4:	2b05      	cmp	r3, #5
    d0b6:	d019      	beq.n	d0ec <usbdc_ctrl_status_end+0x4c>
    d0b8:	2b09      	cmp	r3, #9
    d0ba:	d000      	beq.n	d0be <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d0bc:	e02f      	b.n	d11e <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d0be:	687b      	ldr	r3, [r7, #4]
    d0c0:	885b      	ldrh	r3, [r3, #2]
    d0c2:	b29b      	uxth	r3, r3
    d0c4:	b2da      	uxtb	r2, r3
    d0c6:	4b17      	ldr	r3, [pc, #92]	; (d124 <usbdc_ctrl_status_end+0x84>)
    d0c8:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d0ca:	687b      	ldr	r3, [r7, #4]
    d0cc:	885b      	ldrh	r3, [r3, #2]
    d0ce:	b29b      	uxth	r3, r3
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	d001      	beq.n	d0d8 <usbdc_ctrl_status_end+0x38>
    d0d4:	2204      	movs	r2, #4
    d0d6:	e000      	b.n	d0da <usbdc_ctrl_status_end+0x3a>
    d0d8:	2203      	movs	r2, #3
    d0da:	4b12      	ldr	r3, [pc, #72]	; (d124 <usbdc_ctrl_status_end+0x84>)
    d0dc:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d0de:	4b11      	ldr	r3, [pc, #68]	; (d124 <usbdc_ctrl_status_end+0x84>)
    d0e0:	7e9b      	ldrb	r3, [r3, #26]
    d0e2:	4619      	mov	r1, r3
    d0e4:	2001      	movs	r0, #1
    d0e6:	4b10      	ldr	r3, [pc, #64]	; (d128 <usbdc_ctrl_status_end+0x88>)
    d0e8:	4798      	blx	r3
		break;
    d0ea:	e018      	b.n	d11e <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d0ec:	687b      	ldr	r3, [r7, #4]
    d0ee:	885b      	ldrh	r3, [r3, #2]
    d0f0:	b29b      	uxth	r3, r3
    d0f2:	b2db      	uxtb	r3, r3
    d0f4:	4618      	mov	r0, r3
    d0f6:	4b0d      	ldr	r3, [pc, #52]	; (d12c <usbdc_ctrl_status_end+0x8c>)
    d0f8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d0fa:	687b      	ldr	r3, [r7, #4]
    d0fc:	885b      	ldrh	r3, [r3, #2]
    d0fe:	b29b      	uxth	r3, r3
    d100:	2b00      	cmp	r3, #0
    d102:	d001      	beq.n	d108 <usbdc_ctrl_status_end+0x68>
    d104:	2203      	movs	r2, #3
    d106:	e000      	b.n	d10a <usbdc_ctrl_status_end+0x6a>
    d108:	2202      	movs	r2, #2
    d10a:	4b06      	ldr	r3, [pc, #24]	; (d124 <usbdc_ctrl_status_end+0x84>)
    d10c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d10e:	4b05      	ldr	r3, [pc, #20]	; (d124 <usbdc_ctrl_status_end+0x84>)
    d110:	7e9b      	ldrb	r3, [r3, #26]
    d112:	4619      	mov	r1, r3
    d114:	2001      	movs	r0, #1
    d116:	4b04      	ldr	r3, [pc, #16]	; (d128 <usbdc_ctrl_status_end+0x88>)
    d118:	4798      	blx	r3
		break;
    d11a:	e000      	b.n	d11e <usbdc_ctrl_status_end+0x7e>
		return;
    d11c:	bf00      	nop
	}
}
    d11e:	3708      	adds	r7, #8
    d120:	46bd      	mov	sp, r7
    d122:	bd80      	pop	{r7, pc}
    d124:	20002634 	.word	0x20002634
    d128:	0000cf7d 	.word	0x0000cf7d
    d12c:	0000ccfd 	.word	0x0000ccfd

0000d130 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d130:	b580      	push	{r7, lr}
    d132:	b082      	sub	sp, #8
    d134:	af00      	add	r7, sp, #0
    d136:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d138:	2201      	movs	r2, #1
    d13a:	6879      	ldr	r1, [r7, #4]
    d13c:	2000      	movs	r0, #0
    d13e:	4b03      	ldr	r3, [pc, #12]	; (d14c <usbdc_ctrl_data_end+0x1c>)
    d140:	4798      	blx	r3
	return false;
    d142:	2300      	movs	r3, #0
}
    d144:	4618      	mov	r0, r3
    d146:	3708      	adds	r7, #8
    d148:	46bd      	mov	sp, r7
    d14a:	bd80      	pop	{r7, pc}
    d14c:	0000cfbd 	.word	0x0000cfbd

0000d150 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d150:	b580      	push	{r7, lr}
    d152:	b082      	sub	sp, #8
    d154:	af00      	add	r7, sp, #0
    d156:	4603      	mov	r3, r0
    d158:	603a      	str	r2, [r7, #0]
    d15a:	71fb      	strb	r3, [r7, #7]
    d15c:	460b      	mov	r3, r1
    d15e:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d160:	79bb      	ldrb	r3, [r7, #6]
    d162:	2b00      	cmp	r3, #0
    d164:	d002      	beq.n	d16c <usbdc_cb_ctl_done+0x1c>
    d166:	2b01      	cmp	r3, #1
    d168:	d004      	beq.n	d174 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d16a:	e008      	b.n	d17e <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d16c:	6838      	ldr	r0, [r7, #0]
    d16e:	4b06      	ldr	r3, [pc, #24]	; (d188 <usbdc_cb_ctl_done+0x38>)
    d170:	4798      	blx	r3
		break;
    d172:	e004      	b.n	d17e <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d174:	6838      	ldr	r0, [r7, #0]
    d176:	4b05      	ldr	r3, [pc, #20]	; (d18c <usbdc_cb_ctl_done+0x3c>)
    d178:	4798      	blx	r3
    d17a:	4603      	mov	r3, r0
    d17c:	e000      	b.n	d180 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d17e:	2300      	movs	r3, #0
}
    d180:	4618      	mov	r0, r3
    d182:	3708      	adds	r7, #8
    d184:	46bd      	mov	sp, r7
    d186:	bd80      	pop	{r7, pc}
    d188:	0000d0a1 	.word	0x0000d0a1
    d18c:	0000d131 	.word	0x0000d131

0000d190 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d190:	b580      	push	{r7, lr}
    d192:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d194:	4b10      	ldr	r3, [pc, #64]	; (d1d8 <usbdc_reset+0x48>)
    d196:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d198:	4b10      	ldr	r3, [pc, #64]	; (d1dc <usbdc_reset+0x4c>)
    d19a:	2202      	movs	r2, #2
    d19c:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d19e:	4b0f      	ldr	r3, [pc, #60]	; (d1dc <usbdc_reset+0x4c>)
    d1a0:	2200      	movs	r2, #0
    d1a2:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d1a4:	4b0d      	ldr	r3, [pc, #52]	; (d1dc <usbdc_reset+0x4c>)
    d1a6:	2200      	movs	r2, #0
    d1a8:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d1aa:	2000      	movs	r0, #0
    d1ac:	4b0c      	ldr	r3, [pc, #48]	; (d1e0 <usbdc_reset+0x50>)
    d1ae:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d1b0:	4b0a      	ldr	r3, [pc, #40]	; (d1dc <usbdc_reset+0x4c>)
    d1b2:	7f1b      	ldrb	r3, [r3, #28]
    d1b4:	4618      	mov	r0, r3
    d1b6:	4b0b      	ldr	r3, [pc, #44]	; (d1e4 <usbdc_reset+0x54>)
    d1b8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d1ba:	4a0b      	ldr	r2, [pc, #44]	; (d1e8 <usbdc_reset+0x58>)
    d1bc:	2100      	movs	r1, #0
    d1be:	2000      	movs	r0, #0
    d1c0:	4b0a      	ldr	r3, [pc, #40]	; (d1ec <usbdc_reset+0x5c>)
    d1c2:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d1c4:	4a0a      	ldr	r2, [pc, #40]	; (d1f0 <usbdc_reset+0x60>)
    d1c6:	2102      	movs	r1, #2
    d1c8:	2000      	movs	r0, #0
    d1ca:	4b08      	ldr	r3, [pc, #32]	; (d1ec <usbdc_reset+0x5c>)
    d1cc:	4798      	blx	r3
	usb_d_ep_enable(0);
    d1ce:	2000      	movs	r0, #0
    d1d0:	4b08      	ldr	r3, [pc, #32]	; (d1f4 <usbdc_reset+0x64>)
    d1d2:	4798      	blx	r3
}
    d1d4:	bf00      	nop
    d1d6:	bd80      	pop	{r7, pc}
    d1d8:	0000cbdd 	.word	0x0000cbdd
    d1dc:	20002634 	.word	0x20002634
    d1e0:	00003731 	.word	0x00003731
    d1e4:	0000366d 	.word	0x0000366d
    d1e8:	0000d02d 	.word	0x0000d02d
    d1ec:	00003a85 	.word	0x00003a85
    d1f0:	0000d151 	.word	0x0000d151
    d1f4:	00003781 	.word	0x00003781

0000d1f8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d1f8:	b580      	push	{r7, lr}
    d1fa:	b082      	sub	sp, #8
    d1fc:	af00      	add	r7, sp, #0
    d1fe:	4603      	mov	r3, r0
    d200:	6039      	str	r1, [r7, #0]
    d202:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d204:	79fb      	ldrb	r3, [r7, #7]
    d206:	2b00      	cmp	r3, #0
    d208:	d002      	beq.n	d210 <usbd_event_cb+0x18>
    d20a:	2b01      	cmp	r3, #1
    d20c:	d005      	beq.n	d21a <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d20e:	e007      	b.n	d220 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d210:	6839      	ldr	r1, [r7, #0]
    d212:	2000      	movs	r0, #0
    d214:	4b04      	ldr	r3, [pc, #16]	; (d228 <usbd_event_cb+0x30>)
    d216:	4798      	blx	r3
		break;
    d218:	e002      	b.n	d220 <usbd_event_cb+0x28>
		usbdc_reset();
    d21a:	4b04      	ldr	r3, [pc, #16]	; (d22c <usbd_event_cb+0x34>)
    d21c:	4798      	blx	r3
		break;
    d21e:	bf00      	nop
	}
}
    d220:	bf00      	nop
    d222:	3708      	adds	r7, #8
    d224:	46bd      	mov	sp, r7
    d226:	bd80      	pop	{r7, pc}
    d228:	0000cf7d 	.word	0x0000cf7d
    d22c:	0000d191 	.word	0x0000d191

0000d230 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d230:	b580      	push	{r7, lr}
    d232:	b088      	sub	sp, #32
    d234:	af00      	add	r7, sp, #0
    d236:	60b9      	str	r1, [r7, #8]
    d238:	607a      	str	r2, [r7, #4]
    d23a:	461a      	mov	r2, r3
    d23c:	4603      	mov	r3, r0
    d23e:	73fb      	strb	r3, [r7, #15]
    d240:	4613      	mov	r3, r2
    d242:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d244:	68bb      	ldr	r3, [r7, #8]
    d246:	617b      	str	r3, [r7, #20]
    d248:	687b      	ldr	r3, [r7, #4]
    d24a:	61bb      	str	r3, [r7, #24]
    d24c:	7bfb      	ldrb	r3, [r7, #15]
    d24e:	773b      	strb	r3, [r7, #28]
    d250:	7bbb      	ldrb	r3, [r7, #14]
    d252:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d254:	f107 0314 	add.w	r3, r7, #20
    d258:	4618      	mov	r0, r3
    d25a:	4b03      	ldr	r3, [pc, #12]	; (d268 <usbdc_xfer+0x38>)
    d25c:	4798      	blx	r3
    d25e:	4603      	mov	r3, r0
}
    d260:	4618      	mov	r0, r3
    d262:	3720      	adds	r7, #32
    d264:	46bd      	mov	sp, r7
    d266:	bd80      	pop	{r7, pc}
    d268:	000037f1 	.word	0x000037f1

0000d26c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d26c:	b580      	push	{r7, lr}
    d26e:	b082      	sub	sp, #8
    d270:	af00      	add	r7, sp, #0
    d272:	4603      	mov	r3, r0
    d274:	6039      	str	r1, [r7, #0]
    d276:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d278:	79fb      	ldrb	r3, [r7, #7]
    d27a:	2b01      	cmp	r3, #1
    d27c:	d009      	beq.n	d292 <usbdc_register_handler+0x26>
    d27e:	2b02      	cmp	r3, #2
    d280:	d00c      	beq.n	d29c <usbdc_register_handler+0x30>
    d282:	2b00      	cmp	r3, #0
    d284:	d000      	beq.n	d288 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d286:	e00e      	b.n	d2a6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d288:	6839      	ldr	r1, [r7, #0]
    d28a:	4809      	ldr	r0, [pc, #36]	; (d2b0 <usbdc_register_handler+0x44>)
    d28c:	4b09      	ldr	r3, [pc, #36]	; (d2b4 <usbdc_register_handler+0x48>)
    d28e:	4798      	blx	r3
		break;
    d290:	e009      	b.n	d2a6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d292:	6839      	ldr	r1, [r7, #0]
    d294:	4808      	ldr	r0, [pc, #32]	; (d2b8 <usbdc_register_handler+0x4c>)
    d296:	4b07      	ldr	r3, [pc, #28]	; (d2b4 <usbdc_register_handler+0x48>)
    d298:	4798      	blx	r3
		break;
    d29a:	e004      	b.n	d2a6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d29c:	6839      	ldr	r1, [r7, #0]
    d29e:	4807      	ldr	r0, [pc, #28]	; (d2bc <usbdc_register_handler+0x50>)
    d2a0:	4b04      	ldr	r3, [pc, #16]	; (d2b4 <usbdc_register_handler+0x48>)
    d2a2:	4798      	blx	r3
		break;
    d2a4:	bf00      	nop
	}
}
    d2a6:	bf00      	nop
    d2a8:	3708      	adds	r7, #8
    d2aa:	46bd      	mov	sp, r7
    d2ac:	bd80      	pop	{r7, pc}
    d2ae:	bf00      	nop
    d2b0:	20002638 	.word	0x20002638
    d2b4:	00003bdd 	.word	0x00003bdd
    d2b8:	2000263c 	.word	0x2000263c
    d2bc:	20002640 	.word	0x20002640

0000d2c0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d2c0:	b580      	push	{r7, lr}
    d2c2:	b084      	sub	sp, #16
    d2c4:	af00      	add	r7, sp, #0
    d2c6:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d2c8:	687b      	ldr	r3, [r7, #4]
    d2ca:	2b00      	cmp	r3, #0
    d2cc:	bf14      	ite	ne
    d2ce:	2301      	movne	r3, #1
    d2d0:	2300      	moveq	r3, #0
    d2d2:	b2db      	uxtb	r3, r3
    d2d4:	f240 3255 	movw	r2, #853	; 0x355
    d2d8:	4910      	ldr	r1, [pc, #64]	; (d31c <usbdc_init+0x5c>)
    d2da:	4618      	mov	r0, r3
    d2dc:	4b10      	ldr	r3, [pc, #64]	; (d320 <usbdc_init+0x60>)
    d2de:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d2e0:	4b10      	ldr	r3, [pc, #64]	; (d324 <usbdc_init+0x64>)
    d2e2:	4798      	blx	r3
    d2e4:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d2e6:	68fb      	ldr	r3, [r7, #12]
    d2e8:	2b00      	cmp	r3, #0
    d2ea:	da01      	bge.n	d2f0 <usbdc_init+0x30>
		return rc;
    d2ec:	68fb      	ldr	r3, [r7, #12]
    d2ee:	e010      	b.n	d312 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d2f0:	2220      	movs	r2, #32
    d2f2:	2100      	movs	r1, #0
    d2f4:	480c      	ldr	r0, [pc, #48]	; (d328 <usbdc_init+0x68>)
    d2f6:	4b0d      	ldr	r3, [pc, #52]	; (d32c <usbdc_init+0x6c>)
    d2f8:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d2fa:	4a0b      	ldr	r2, [pc, #44]	; (d328 <usbdc_init+0x68>)
    d2fc:	687b      	ldr	r3, [r7, #4]
    d2fe:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d300:	490b      	ldr	r1, [pc, #44]	; (d330 <usbdc_init+0x70>)
    d302:	2000      	movs	r0, #0
    d304:	4b0b      	ldr	r3, [pc, #44]	; (d334 <usbdc_init+0x74>)
    d306:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d308:	490b      	ldr	r1, [pc, #44]	; (d338 <usbdc_init+0x78>)
    d30a:	2001      	movs	r0, #1
    d30c:	4b09      	ldr	r3, [pc, #36]	; (d334 <usbdc_init+0x74>)
    d30e:	4798      	blx	r3

	return 0;
    d310:	2300      	movs	r3, #0
}
    d312:	4618      	mov	r0, r3
    d314:	3710      	adds	r7, #16
    d316:	46bd      	mov	sp, r7
    d318:	bd80      	pop	{r7, pc}
    d31a:	bf00      	nop
    d31c:	00010b20 	.word	0x00010b20
    d320:	00003b01 	.word	0x00003b01
    d324:	00003559 	.word	0x00003559
    d328:	20002634 	.word	0x20002634
    d32c:	00010441 	.word	0x00010441
    d330:	0000d01d 	.word	0x0000d01d
    d334:	00003605 	.word	0x00003605
    d338:	0000d1f9 	.word	0x0000d1f9

0000d33c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d33c:	b580      	push	{r7, lr}
    d33e:	b082      	sub	sp, #8
    d340:	af00      	add	r7, sp, #0
    d342:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d344:	6879      	ldr	r1, [r7, #4]
    d346:	4803      	ldr	r0, [pc, #12]	; (d354 <usbdc_register_function+0x18>)
    d348:	4b03      	ldr	r3, [pc, #12]	; (d358 <usbdc_register_function+0x1c>)
    d34a:	4798      	blx	r3
}
    d34c:	bf00      	nop
    d34e:	3708      	adds	r7, #8
    d350:	46bd      	mov	sp, r7
    d352:	bd80      	pop	{r7, pc}
    d354:	20002644 	.word	0x20002644
    d358:	00003bdd 	.word	0x00003bdd

0000d35c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d35c:	b580      	push	{r7, lr}
    d35e:	b082      	sub	sp, #8
    d360:	af00      	add	r7, sp, #0
    d362:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d364:	4b0f      	ldr	r3, [pc, #60]	; (d3a4 <usbdc_start+0x48>)
    d366:	7e9b      	ldrb	r3, [r3, #26]
    d368:	2b00      	cmp	r3, #0
    d36a:	d002      	beq.n	d372 <usbdc_start+0x16>
		return ERR_BUSY;
    d36c:	f06f 0303 	mvn.w	r3, #3
    d370:	e013      	b.n	d39a <usbdc_start+0x3e>
	}

	if (desces) {
    d372:	687b      	ldr	r3, [r7, #4]
    d374:	2b00      	cmp	r3, #0
    d376:	d00e      	beq.n	d396 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d378:	4a0a      	ldr	r2, [pc, #40]	; (d3a4 <usbdc_start+0x48>)
    d37a:	687b      	ldr	r3, [r7, #4]
    d37c:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d37e:	687b      	ldr	r3, [r7, #4]
    d380:	681b      	ldr	r3, [r3, #0]
    d382:	79da      	ldrb	r2, [r3, #7]
    d384:	4b07      	ldr	r3, [pc, #28]	; (d3a4 <usbdc_start+0x48>)
    d386:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d388:	4b06      	ldr	r3, [pc, #24]	; (d3a4 <usbdc_start+0x48>)
    d38a:	2201      	movs	r2, #1
    d38c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d38e:	4b06      	ldr	r3, [pc, #24]	; (d3a8 <usbdc_start+0x4c>)
    d390:	4798      	blx	r3
	return ERR_NONE;
    d392:	2300      	movs	r3, #0
    d394:	e001      	b.n	d39a <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d396:	f06f 0308 	mvn.w	r3, #8
}
    d39a:	4618      	mov	r0, r3
    d39c:	3708      	adds	r7, #8
    d39e:	46bd      	mov	sp, r7
    d3a0:	bd80      	pop	{r7, pc}
    d3a2:	bf00      	nop
    d3a4:	20002634 	.word	0x20002634
    d3a8:	00003629 	.word	0x00003629

0000d3ac <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d3ac:	b580      	push	{r7, lr}
    d3ae:	af00      	add	r7, sp, #0
	usb_d_attach();
    d3b0:	4b01      	ldr	r3, [pc, #4]	; (d3b8 <usbdc_attach+0xc>)
    d3b2:	4798      	blx	r3
}
    d3b4:	bf00      	nop
    d3b6:	bd80      	pop	{r7, pc}
    d3b8:	0000363d 	.word	0x0000363d

0000d3bc <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d3bc:	b480      	push	{r7}
    d3be:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d3c0:	4b03      	ldr	r3, [pc, #12]	; (d3d0 <usbdc_get_ctrl_buffer+0x14>)
    d3c2:	695b      	ldr	r3, [r3, #20]
}
    d3c4:	4618      	mov	r0, r3
    d3c6:	46bd      	mov	sp, r7
    d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d3cc:	4770      	bx	lr
    d3ce:	bf00      	nop
    d3d0:	20002634 	.word	0x20002634

0000d3d4 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d3d4:	b480      	push	{r7}
    d3d6:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d3d8:	4b07      	ldr	r3, [pc, #28]	; (d3f8 <usbdc_get_state+0x24>)
    d3da:	7e9b      	ldrb	r3, [r3, #26]
    d3dc:	f003 0310 	and.w	r3, r3, #16
    d3e0:	2b00      	cmp	r3, #0
    d3e2:	d001      	beq.n	d3e8 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d3e4:	2310      	movs	r3, #16
    d3e6:	e001      	b.n	d3ec <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d3e8:	4b03      	ldr	r3, [pc, #12]	; (d3f8 <usbdc_get_state+0x24>)
    d3ea:	7e9b      	ldrb	r3, [r3, #26]
}
    d3ec:	4618      	mov	r0, r3
    d3ee:	46bd      	mov	sp, r7
    d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d3f4:	4770      	bx	lr
    d3f6:	bf00      	nop
    d3f8:	20002634 	.word	0x20002634

0000d3fc <usb_get_u16>:
{
    d3fc:	b480      	push	{r7}
    d3fe:	b083      	sub	sp, #12
    d400:	af00      	add	r7, sp, #0
    d402:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d404:	687b      	ldr	r3, [r7, #4]
    d406:	781b      	ldrb	r3, [r3, #0]
    d408:	b29a      	uxth	r2, r3
    d40a:	687b      	ldr	r3, [r7, #4]
    d40c:	3301      	adds	r3, #1
    d40e:	781b      	ldrb	r3, [r3, #0]
    d410:	b29b      	uxth	r3, r3
    d412:	021b      	lsls	r3, r3, #8
    d414:	b29b      	uxth	r3, r3
    d416:	4413      	add	r3, r2
    d418:	b29b      	uxth	r3, r3
}
    d41a:	4618      	mov	r0, r3
    d41c:	370c      	adds	r7, #12
    d41e:	46bd      	mov	sp, r7
    d420:	f85d 7b04 	ldr.w	r7, [sp], #4
    d424:	4770      	bx	lr

0000d426 <usb_desc_len>:
{
    d426:	b480      	push	{r7}
    d428:	b083      	sub	sp, #12
    d42a:	af00      	add	r7, sp, #0
    d42c:	6078      	str	r0, [r7, #4]
	return desc[0];
    d42e:	687b      	ldr	r3, [r7, #4]
    d430:	781b      	ldrb	r3, [r3, #0]
}
    d432:	4618      	mov	r0, r3
    d434:	370c      	adds	r7, #12
    d436:	46bd      	mov	sp, r7
    d438:	f85d 7b04 	ldr.w	r7, [sp], #4
    d43c:	4770      	bx	lr

0000d43e <usb_desc_type>:
{
    d43e:	b480      	push	{r7}
    d440:	b083      	sub	sp, #12
    d442:	af00      	add	r7, sp, #0
    d444:	6078      	str	r0, [r7, #4]
	return desc[1];
    d446:	687b      	ldr	r3, [r7, #4]
    d448:	3301      	adds	r3, #1
    d44a:	781b      	ldrb	r3, [r3, #0]
}
    d44c:	4618      	mov	r0, r3
    d44e:	370c      	adds	r7, #12
    d450:	46bd      	mov	sp, r7
    d452:	f85d 7b04 	ldr.w	r7, [sp], #4
    d456:	4770      	bx	lr

0000d458 <usb_desc_next>:
{
    d458:	b580      	push	{r7, lr}
    d45a:	b082      	sub	sp, #8
    d45c:	af00      	add	r7, sp, #0
    d45e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d460:	6878      	ldr	r0, [r7, #4]
    d462:	4b05      	ldr	r3, [pc, #20]	; (d478 <usb_desc_next+0x20>)
    d464:	4798      	blx	r3
    d466:	4603      	mov	r3, r0
    d468:	461a      	mov	r2, r3
    d46a:	687b      	ldr	r3, [r7, #4]
    d46c:	4413      	add	r3, r2
}
    d46e:	4618      	mov	r0, r3
    d470:	3708      	adds	r7, #8
    d472:	46bd      	mov	sp, r7
    d474:	bd80      	pop	{r7, pc}
    d476:	bf00      	nop
    d478:	0000d427 	.word	0x0000d427

0000d47c <usb_cfg_desc_total_len>:
{
    d47c:	b580      	push	{r7, lr}
    d47e:	b082      	sub	sp, #8
    d480:	af00      	add	r7, sp, #0
    d482:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d484:	687b      	ldr	r3, [r7, #4]
    d486:	3302      	adds	r3, #2
    d488:	4618      	mov	r0, r3
    d48a:	4b03      	ldr	r3, [pc, #12]	; (d498 <usb_cfg_desc_total_len+0x1c>)
    d48c:	4798      	blx	r3
    d48e:	4603      	mov	r3, r0
}
    d490:	4618      	mov	r0, r3
    d492:	3708      	adds	r7, #8
    d494:	46bd      	mov	sp, r7
    d496:	bd80      	pop	{r7, pc}
    d498:	0000d3fd 	.word	0x0000d3fd

0000d49c <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d49c:	b580      	push	{r7, lr}
    d49e:	b082      	sub	sp, #8
    d4a0:	af00      	add	r7, sp, #0
    d4a2:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d4a4:	6878      	ldr	r0, [r7, #4]
    d4a6:	4b05      	ldr	r3, [pc, #20]	; (d4bc <usb_cfg_desc_next+0x20>)
    d4a8:	4798      	blx	r3
    d4aa:	4603      	mov	r3, r0
    d4ac:	461a      	mov	r2, r3
    d4ae:	687b      	ldr	r3, [r7, #4]
    d4b0:	4413      	add	r3, r2
}
    d4b2:	4618      	mov	r0, r3
    d4b4:	3708      	adds	r7, #8
    d4b6:	46bd      	mov	sp, r7
    d4b8:	bd80      	pop	{r7, pc}
    d4ba:	bf00      	nop
    d4bc:	0000d47d 	.word	0x0000d47d

0000d4c0 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d4c0:	b580      	push	{r7, lr}
    d4c2:	b084      	sub	sp, #16
    d4c4:	af00      	add	r7, sp, #0
    d4c6:	60f8      	str	r0, [r7, #12]
    d4c8:	60b9      	str	r1, [r7, #8]
    d4ca:	4613      	mov	r3, r2
    d4cc:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d4ce:	e015      	b.n	d4fc <usb_find_desc+0x3c>
		_desc_len_check();
    d4d0:	68f8      	ldr	r0, [r7, #12]
    d4d2:	4b0f      	ldr	r3, [pc, #60]	; (d510 <usb_find_desc+0x50>)
    d4d4:	4798      	blx	r3
    d4d6:	4603      	mov	r3, r0
    d4d8:	2b01      	cmp	r3, #1
    d4da:	d801      	bhi.n	d4e0 <usb_find_desc+0x20>
    d4dc:	2300      	movs	r3, #0
    d4de:	e012      	b.n	d506 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d4e0:	68f8      	ldr	r0, [r7, #12]
    d4e2:	4b0c      	ldr	r3, [pc, #48]	; (d514 <usb_find_desc+0x54>)
    d4e4:	4798      	blx	r3
    d4e6:	4603      	mov	r3, r0
    d4e8:	461a      	mov	r2, r3
    d4ea:	79fb      	ldrb	r3, [r7, #7]
    d4ec:	4293      	cmp	r3, r2
    d4ee:	d101      	bne.n	d4f4 <usb_find_desc+0x34>
			return desc;
    d4f0:	68fb      	ldr	r3, [r7, #12]
    d4f2:	e008      	b.n	d506 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d4f4:	68f8      	ldr	r0, [r7, #12]
    d4f6:	4b08      	ldr	r3, [pc, #32]	; (d518 <usb_find_desc+0x58>)
    d4f8:	4798      	blx	r3
    d4fa:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d4fc:	68fa      	ldr	r2, [r7, #12]
    d4fe:	68bb      	ldr	r3, [r7, #8]
    d500:	429a      	cmp	r2, r3
    d502:	d3e5      	bcc.n	d4d0 <usb_find_desc+0x10>
	}
	return NULL;
    d504:	2300      	movs	r3, #0
}
    d506:	4618      	mov	r0, r3
    d508:	3710      	adds	r7, #16
    d50a:	46bd      	mov	sp, r7
    d50c:	bd80      	pop	{r7, pc}
    d50e:	bf00      	nop
    d510:	0000d427 	.word	0x0000d427
    d514:	0000d43f 	.word	0x0000d43f
    d518:	0000d459 	.word	0x0000d459

0000d51c <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d51c:	b580      	push	{r7, lr}
    d51e:	b082      	sub	sp, #8
    d520:	af00      	add	r7, sp, #0
    d522:	6078      	str	r0, [r7, #4]
    d524:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d526:	e019      	b.n	d55c <usb_find_ep_desc+0x40>
		_desc_len_check();
    d528:	6878      	ldr	r0, [r7, #4]
    d52a:	4b12      	ldr	r3, [pc, #72]	; (d574 <usb_find_ep_desc+0x58>)
    d52c:	4798      	blx	r3
    d52e:	4603      	mov	r3, r0
    d530:	2b01      	cmp	r3, #1
    d532:	d801      	bhi.n	d538 <usb_find_ep_desc+0x1c>
    d534:	2300      	movs	r3, #0
    d536:	e018      	b.n	d56a <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d538:	6878      	ldr	r0, [r7, #4]
    d53a:	4b0f      	ldr	r3, [pc, #60]	; (d578 <usb_find_ep_desc+0x5c>)
    d53c:	4798      	blx	r3
    d53e:	4603      	mov	r3, r0
    d540:	2b04      	cmp	r3, #4
    d542:	d010      	beq.n	d566 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d544:	6878      	ldr	r0, [r7, #4]
    d546:	4b0c      	ldr	r3, [pc, #48]	; (d578 <usb_find_ep_desc+0x5c>)
    d548:	4798      	blx	r3
    d54a:	4603      	mov	r3, r0
    d54c:	2b05      	cmp	r3, #5
    d54e:	d101      	bne.n	d554 <usb_find_ep_desc+0x38>
			return desc;
    d550:	687b      	ldr	r3, [r7, #4]
    d552:	e00a      	b.n	d56a <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d554:	6878      	ldr	r0, [r7, #4]
    d556:	4b09      	ldr	r3, [pc, #36]	; (d57c <usb_find_ep_desc+0x60>)
    d558:	4798      	blx	r3
    d55a:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d55c:	687a      	ldr	r2, [r7, #4]
    d55e:	683b      	ldr	r3, [r7, #0]
    d560:	429a      	cmp	r2, r3
    d562:	d3e1      	bcc.n	d528 <usb_find_ep_desc+0xc>
    d564:	e000      	b.n	d568 <usb_find_ep_desc+0x4c>
			break;
    d566:	bf00      	nop
	}
	return NULL;
    d568:	2300      	movs	r3, #0
}
    d56a:	4618      	mov	r0, r3
    d56c:	3708      	adds	r7, #8
    d56e:	46bd      	mov	sp, r7
    d570:	bd80      	pop	{r7, pc}
    d572:	bf00      	nop
    d574:	0000d427 	.word	0x0000d427
    d578:	0000d43f 	.word	0x0000d43f
    d57c:	0000d459 	.word	0x0000d459

0000d580 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d580:	b580      	push	{r7, lr}
    d582:	b084      	sub	sp, #16
    d584:	af00      	add	r7, sp, #0
    d586:	60f8      	str	r0, [r7, #12]
    d588:	60b9      	str	r1, [r7, #8]
    d58a:	4613      	mov	r3, r2
    d58c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d58e:	2202      	movs	r2, #2
    d590:	68b9      	ldr	r1, [r7, #8]
    d592:	68f8      	ldr	r0, [r7, #12]
    d594:	4b15      	ldr	r3, [pc, #84]	; (d5ec <usb_find_cfg_desc+0x6c>)
    d596:	4798      	blx	r3
    d598:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d59a:	68fb      	ldr	r3, [r7, #12]
    d59c:	2b00      	cmp	r3, #0
    d59e:	d11a      	bne.n	d5d6 <usb_find_cfg_desc+0x56>
		return NULL;
    d5a0:	2300      	movs	r3, #0
    d5a2:	e01f      	b.n	d5e4 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d5a4:	68f8      	ldr	r0, [r7, #12]
    d5a6:	4b12      	ldr	r3, [pc, #72]	; (d5f0 <usb_find_cfg_desc+0x70>)
    d5a8:	4798      	blx	r3
    d5aa:	4603      	mov	r3, r0
    d5ac:	2b01      	cmp	r3, #1
    d5ae:	d801      	bhi.n	d5b4 <usb_find_cfg_desc+0x34>
    d5b0:	2300      	movs	r3, #0
    d5b2:	e017      	b.n	d5e4 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d5b4:	68fb      	ldr	r3, [r7, #12]
    d5b6:	3301      	adds	r3, #1
    d5b8:	781b      	ldrb	r3, [r3, #0]
    d5ba:	2b02      	cmp	r3, #2
    d5bc:	d110      	bne.n	d5e0 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d5be:	68fb      	ldr	r3, [r7, #12]
    d5c0:	3305      	adds	r3, #5
    d5c2:	781b      	ldrb	r3, [r3, #0]
    d5c4:	79fa      	ldrb	r2, [r7, #7]
    d5c6:	429a      	cmp	r2, r3
    d5c8:	d101      	bne.n	d5ce <usb_find_cfg_desc+0x4e>
			return desc;
    d5ca:	68fb      	ldr	r3, [r7, #12]
    d5cc:	e00a      	b.n	d5e4 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d5ce:	68f8      	ldr	r0, [r7, #12]
    d5d0:	4b08      	ldr	r3, [pc, #32]	; (d5f4 <usb_find_cfg_desc+0x74>)
    d5d2:	4798      	blx	r3
    d5d4:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d5d6:	68fa      	ldr	r2, [r7, #12]
    d5d8:	68bb      	ldr	r3, [r7, #8]
    d5da:	429a      	cmp	r2, r3
    d5dc:	d3e2      	bcc.n	d5a4 <usb_find_cfg_desc+0x24>
    d5de:	e000      	b.n	d5e2 <usb_find_cfg_desc+0x62>
			break;
    d5e0:	bf00      	nop
	}
	return NULL;
    d5e2:	2300      	movs	r3, #0
}
    d5e4:	4618      	mov	r0, r3
    d5e6:	3710      	adds	r7, #16
    d5e8:	46bd      	mov	sp, r7
    d5ea:	bd80      	pop	{r7, pc}
    d5ec:	0000d4c1 	.word	0x0000d4c1
    d5f0:	0000d427 	.word	0x0000d427
    d5f4:	0000d49d 	.word	0x0000d49d

0000d5f8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d5f8:	b580      	push	{r7, lr}
    d5fa:	b086      	sub	sp, #24
    d5fc:	af00      	add	r7, sp, #0
    d5fe:	60f8      	str	r0, [r7, #12]
    d600:	60b9      	str	r1, [r7, #8]
    d602:	4613      	mov	r3, r2
    d604:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d606:	2300      	movs	r3, #0
    d608:	75fb      	strb	r3, [r7, #23]
    d60a:	e020      	b.n	d64e <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d60c:	2203      	movs	r2, #3
    d60e:	68b9      	ldr	r1, [r7, #8]
    d610:	68f8      	ldr	r0, [r7, #12]
    d612:	4b13      	ldr	r3, [pc, #76]	; (d660 <usb_find_str_desc+0x68>)
    d614:	4798      	blx	r3
    d616:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d618:	68fb      	ldr	r3, [r7, #12]
    d61a:	2b00      	cmp	r3, #0
    d61c:	d015      	beq.n	d64a <usb_find_str_desc+0x52>
			_desc_len_check();
    d61e:	68f8      	ldr	r0, [r7, #12]
    d620:	4b10      	ldr	r3, [pc, #64]	; (d664 <usb_find_str_desc+0x6c>)
    d622:	4798      	blx	r3
    d624:	4603      	mov	r3, r0
    d626:	2b01      	cmp	r3, #1
    d628:	d801      	bhi.n	d62e <usb_find_str_desc+0x36>
    d62a:	2300      	movs	r3, #0
    d62c:	e014      	b.n	d658 <usb_find_str_desc+0x60>
			if (i == str_index) {
    d62e:	7dfa      	ldrb	r2, [r7, #23]
    d630:	79fb      	ldrb	r3, [r7, #7]
    d632:	429a      	cmp	r2, r3
    d634:	d101      	bne.n	d63a <usb_find_str_desc+0x42>
				return desc;
    d636:	68fb      	ldr	r3, [r7, #12]
    d638:	e00e      	b.n	d658 <usb_find_str_desc+0x60>
			}
			i++;
    d63a:	7dfb      	ldrb	r3, [r7, #23]
    d63c:	3301      	adds	r3, #1
    d63e:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d640:	68f8      	ldr	r0, [r7, #12]
    d642:	4b09      	ldr	r3, [pc, #36]	; (d668 <usb_find_str_desc+0x70>)
    d644:	4798      	blx	r3
    d646:	60f8      	str	r0, [r7, #12]
    d648:	e001      	b.n	d64e <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d64a:	2300      	movs	r3, #0
    d64c:	e004      	b.n	d658 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d64e:	68fa      	ldr	r2, [r7, #12]
    d650:	68bb      	ldr	r3, [r7, #8]
    d652:	429a      	cmp	r2, r3
    d654:	d3da      	bcc.n	d60c <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d656:	2300      	movs	r3, #0
}
    d658:	4618      	mov	r0, r3
    d65a:	3718      	adds	r7, #24
    d65c:	46bd      	mov	sp, r7
    d65e:	bd80      	pop	{r7, pc}
    d660:	0000d4c1 	.word	0x0000d4c1
    d664:	0000d427 	.word	0x0000d427
    d668:	0000d459 	.word	0x0000d459

0000d66c <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    d66c:	b480      	push	{r7}
    d66e:	b083      	sub	sp, #12
    d670:	af00      	add	r7, sp, #0
    d672:	6078      	str	r0, [r7, #4]
    d674:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    d676:	687b      	ldr	r3, [r7, #4]
    d678:	683a      	ldr	r2, [r7, #0]
    d67a:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    d67c:	687b      	ldr	r3, [r7, #4]
    d67e:	4618      	mov	r0, r3
    d680:	370c      	adds	r7, #12
    d682:	46bd      	mov	sp, r7
    d684:	bc80      	pop	{r7}
    d686:	4770      	bx	lr

0000d688 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    d688:	b480      	push	{r7}
    d68a:	b083      	sub	sp, #12
    d68c:	af00      	add	r7, sp, #0
    d68e:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    d690:	687b      	ldr	r3, [r7, #4]
    d692:	4618      	mov	r0, r3
    d694:	370c      	adds	r7, #12
    d696:	46bd      	mov	sp, r7
    d698:	bc80      	pop	{r7}
    d69a:	4770      	bx	lr

0000d69c <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    d69c:	b580      	push	{r7, lr}
    d69e:	b082      	sub	sp, #8
    d6a0:	af00      	add	r7, sp, #0
    d6a2:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    d6a4:	687b      	ldr	r3, [r7, #4]
    d6a6:	4a23      	ldr	r2, [pc, #140]	; (d734 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d6a8:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    d6aa:	687b      	ldr	r3, [r7, #4]
    d6ac:	4a21      	ldr	r2, [pc, #132]	; (d734 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d6ae:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    d6b0:	687b      	ldr	r3, [r7, #4]
    d6b2:	691a      	ldr	r2, [r3, #16]
    d6b4:	687b      	ldr	r3, [r7, #4]
    d6b6:	330c      	adds	r3, #12
    d6b8:	4619      	mov	r1, r3
    d6ba:	4610      	mov	r0, r2
    d6bc:	4b1e      	ldr	r3, [pc, #120]	; (d738 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    d6be:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d6c0:	687b      	ldr	r3, [r7, #4]
    d6c2:	691b      	ldr	r3, [r3, #16]
    d6c4:	4618      	mov	r0, r3
    d6c6:	4b1d      	ldr	r3, [pc, #116]	; (d73c <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d6c8:	4798      	blx	r3
    d6ca:	4603      	mov	r3, r0
    d6cc:	b2da      	uxtb	r2, r3
    d6ce:	687b      	ldr	r3, [r7, #4]
    d6d0:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    d6d2:	687b      	ldr	r3, [r7, #4]
    d6d4:	7d1b      	ldrb	r3, [r3, #20]
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	bf0c      	ite	eq
    d6da:	2301      	moveq	r3, #1
    d6dc:	2300      	movne	r3, #0
    d6de:	b2da      	uxtb	r2, r3
    d6e0:	687b      	ldr	r3, [r7, #4]
    d6e2:	725a      	strb	r2, [r3, #9]
	if (isOK)
    d6e4:	687b      	ldr	r3, [r7, #4]
    d6e6:	7a5b      	ldrb	r3, [r3, #9]
    d6e8:	b2db      	uxtb	r3, r3
    d6ea:	2b00      	cmp	r3, #0
    d6ec:	d116      	bne.n	d71c <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    d6ee:	687b      	ldr	r3, [r7, #4]
    d6f0:	691b      	ldr	r3, [r3, #16]
    d6f2:	4618      	mov	r0, r3
    d6f4:	4b12      	ldr	r3, [pc, #72]	; (d740 <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    d6f6:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d6f8:	687b      	ldr	r3, [r7, #4]
    d6fa:	691b      	ldr	r3, [r3, #16]
    d6fc:	4618      	mov	r0, r3
    d6fe:	4b0f      	ldr	r3, [pc, #60]	; (d73c <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d700:	4798      	blx	r3
    d702:	4603      	mov	r3, r0
    d704:	b2da      	uxtb	r2, r3
    d706:	687b      	ldr	r3, [r7, #4]
    d708:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    d70a:	687b      	ldr	r3, [r7, #4]
    d70c:	7d1b      	ldrb	r3, [r3, #20]
    d70e:	2b00      	cmp	r3, #0
    d710:	bf0c      	ite	eq
    d712:	2301      	moveq	r3, #1
    d714:	2300      	movne	r3, #0
    d716:	b2da      	uxtb	r2, r3
    d718:	687b      	ldr	r3, [r7, #4]
    d71a:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    d71c:	687b      	ldr	r3, [r7, #4]
    d71e:	7a5b      	ldrb	r3, [r3, #9]
    d720:	b2da      	uxtb	r2, r3
    d722:	687b      	ldr	r3, [r7, #4]
    d724:	721a      	strb	r2, [r3, #8]
	return isOK;
    d726:	687b      	ldr	r3, [r7, #4]
    d728:	7a5b      	ldrb	r3, [r3, #9]
    d72a:	b2db      	uxtb	r3, r3
	
}
    d72c:	4618      	mov	r0, r3
    d72e:	3708      	adds	r7, #8
    d730:	46bd      	mov	sp, r7
    d732:	bd80      	pop	{r7, pc}
    d734:	2000266c 	.word	0x2000266c
    d738:	0000294f 	.word	0x0000294f
    d73c:	000028d5 	.word	0x000028d5
    d740:	000028f5 	.word	0x000028f5

0000d744 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    d744:	b580      	push	{r7, lr}
    d746:	b082      	sub	sp, #8
    d748:	af00      	add	r7, sp, #0
    d74a:	6078      	str	r0, [r7, #4]
    d74c:	460b      	mov	r3, r1
    d74e:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    d750:	687b      	ldr	r3, [r7, #4]
    d752:	691b      	ldr	r3, [r3, #16]
    d754:	78fa      	ldrb	r2, [r7, #3]
    d756:	b211      	sxth	r1, r2
    d758:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d75c:	4618      	mov	r0, r3
    d75e:	4b03      	ldr	r3, [pc, #12]	; (d76c <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    d760:	4798      	blx	r3
    d762:	4603      	mov	r3, r0
}
    d764:	4618      	mov	r0, r3
    d766:	3708      	adds	r7, #8
    d768:	46bd      	mov	sp, r7
    d76a:	bd80      	pop	{r7, pc}
    d76c:	00002915 	.word	0x00002915

0000d770 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    d770:	b580      	push	{r7, lr}
    d772:	b086      	sub	sp, #24
    d774:	af00      	add	r7, sp, #0
    d776:	60f8      	str	r0, [r7, #12]
    d778:	60b9      	str	r1, [r7, #8]
    d77a:	4613      	mov	r3, r2
    d77c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    d77e:	68fb      	ldr	r3, [r7, #12]
    d780:	68db      	ldr	r3, [r3, #12]
    d782:	88fa      	ldrh	r2, [r7, #6]
    d784:	68b9      	ldr	r1, [r7, #8]
    d786:	4618      	mov	r0, r3
    d788:	4b03      	ldr	r3, [pc, #12]	; (d798 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    d78a:	4798      	blx	r3
    d78c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    d78e:	697b      	ldr	r3, [r7, #20]
}
    d790:	4618      	mov	r0, r3
    d792:	3718      	adds	r7, #24
    d794:	46bd      	mov	sp, r7
    d796:	bd80      	pop	{r7, pc}
    d798:	0000fde5 	.word	0x0000fde5

0000d79c <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    d79c:	b580      	push	{r7, lr}
    d79e:	b086      	sub	sp, #24
    d7a0:	af00      	add	r7, sp, #0
    d7a2:	60f8      	str	r0, [r7, #12]
    d7a4:	60b9      	str	r1, [r7, #8]
    d7a6:	4613      	mov	r3, r2
    d7a8:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    d7aa:	68fb      	ldr	r3, [r7, #12]
    d7ac:	68db      	ldr	r3, [r3, #12]
    d7ae:	88fa      	ldrh	r2, [r7, #6]
    d7b0:	68b9      	ldr	r1, [r7, #8]
    d7b2:	4618      	mov	r0, r3
    d7b4:	4b03      	ldr	r3, [pc, #12]	; (d7c4 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    d7b6:	4798      	blx	r3
    d7b8:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    d7ba:	697b      	ldr	r3, [r7, #20]
}
    d7bc:	4618      	mov	r0, r3
    d7be:	3718      	adds	r7, #24
    d7c0:	46bd      	mov	sp, r7
    d7c2:	bd80      	pop	{r7, pc}
    d7c4:	0000fe35 	.word	0x0000fe35

0000d7c8 <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    d7c8:	b580      	push	{r7, lr}
    d7ca:	b082      	sub	sp, #8
    d7cc:	af00      	add	r7, sp, #0
    d7ce:	6078      	str	r0, [r7, #4]
    d7d0:	6039      	str	r1, [r7, #0]
    d7d2:	687b      	ldr	r3, [r7, #4]
    d7d4:	2b01      	cmp	r3, #1
    d7d6:	d10d      	bne.n	d7f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d7d8:	683b      	ldr	r3, [r7, #0]
    d7da:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d7de:	4293      	cmp	r3, r2
    d7e0:	d108      	bne.n	d7f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    d7e2:	4906      	ldr	r1, [pc, #24]	; (d7fc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d7e4:	4806      	ldr	r0, [pc, #24]	; (d800 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d7e6:	4b07      	ldr	r3, [pc, #28]	; (d804 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d7e8:	4798      	blx	r3
    d7ea:	4a07      	ldr	r2, [pc, #28]	; (d808 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d7ec:	4907      	ldr	r1, [pc, #28]	; (d80c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d7ee:	4804      	ldr	r0, [pc, #16]	; (d800 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d7f0:	4b07      	ldr	r3, [pc, #28]	; (d810 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d7f2:	4798      	blx	r3
    d7f4:	bf00      	nop
    d7f6:	3708      	adds	r7, #8
    d7f8:	46bd      	mov	sp, r7
    d7fa:	bd80      	pop	{r7, pc}
    d7fc:	2000a6d8 	.word	0x2000a6d8
    d800:	20002654 	.word	0x20002654
    d804:	0000d66d 	.word	0x0000d66d
    d808:	20000000 	.word	0x20000000
    d80c:	0000d689 	.word	0x0000d689
    d810:	00010289 	.word	0x00010289

0000d814 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    d814:	b580      	push	{r7, lr}
    d816:	af00      	add	r7, sp, #0
    d818:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d81c:	2001      	movs	r0, #1
    d81e:	4b01      	ldr	r3, [pc, #4]	; (d824 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    d820:	4798      	blx	r3
    d822:	bd80      	pop	{r7, pc}
    d824:	0000d7c9 	.word	0x0000d7c9

0000d828 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    d828:	b480      	push	{r7}
    d82a:	b085      	sub	sp, #20
    d82c:	af00      	add	r7, sp, #0
    d82e:	60f8      	str	r0, [r7, #12]
    d830:	460b      	mov	r3, r1
    d832:	607a      	str	r2, [r7, #4]
    d834:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    d836:	7afb      	ldrb	r3, [r7, #11]
    d838:	68fa      	ldr	r2, [r7, #12]
    d83a:	01db      	lsls	r3, r3, #7
    d83c:	4413      	add	r3, r2
    d83e:	3308      	adds	r3, #8
    d840:	687a      	ldr	r2, [r7, #4]
    d842:	601a      	str	r2, [r3, #0]
}
    d844:	bf00      	nop
    d846:	3714      	adds	r7, #20
    d848:	46bd      	mov	sp, r7
    d84a:	bc80      	pop	{r7}
    d84c:	4770      	bx	lr

0000d84e <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    d84e:	b480      	push	{r7}
    d850:	b085      	sub	sp, #20
    d852:	af00      	add	r7, sp, #0
    d854:	60f8      	str	r0, [r7, #12]
    d856:	460b      	mov	r3, r1
    d858:	607a      	str	r2, [r7, #4]
    d85a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    d85c:	7afb      	ldrb	r3, [r7, #11]
    d85e:	68fa      	ldr	r2, [r7, #12]
    d860:	01db      	lsls	r3, r3, #7
    d862:	4413      	add	r3, r2
    d864:	3304      	adds	r3, #4
    d866:	687a      	ldr	r2, [r7, #4]
    d868:	601a      	str	r2, [r3, #0]
}
    d86a:	bf00      	nop
    d86c:	3714      	adds	r7, #20
    d86e:	46bd      	mov	sp, r7
    d870:	bc80      	pop	{r7}
    d872:	4770      	bx	lr

0000d874 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    d874:	b480      	push	{r7}
    d876:	b085      	sub	sp, #20
    d878:	af00      	add	r7, sp, #0
    d87a:	60f8      	str	r0, [r7, #12]
    d87c:	460b      	mov	r3, r1
    d87e:	607a      	str	r2, [r7, #4]
    d880:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    d882:	7afb      	ldrb	r3, [r7, #11]
    d884:	68fa      	ldr	r2, [r7, #12]
    d886:	01db      	lsls	r3, r3, #7
    d888:	4413      	add	r3, r2
    d88a:	3318      	adds	r3, #24
    d88c:	687a      	ldr	r2, [r7, #4]
    d88e:	601a      	str	r2, [r3, #0]
}
    d890:	bf00      	nop
    d892:	3714      	adds	r7, #20
    d894:	46bd      	mov	sp, r7
    d896:	bc80      	pop	{r7}
    d898:	4770      	bx	lr

0000d89a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    d89a:	b480      	push	{r7}
    d89c:	b085      	sub	sp, #20
    d89e:	af00      	add	r7, sp, #0
    d8a0:	60f8      	str	r0, [r7, #12]
    d8a2:	460b      	mov	r3, r1
    d8a4:	607a      	str	r2, [r7, #4]
    d8a6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    d8a8:	7afb      	ldrb	r3, [r7, #11]
    d8aa:	68fa      	ldr	r2, [r7, #12]
    d8ac:	01db      	lsls	r3, r3, #7
    d8ae:	4413      	add	r3, r2
    d8b0:	3314      	adds	r3, #20
    d8b2:	687a      	ldr	r2, [r7, #4]
    d8b4:	601a      	str	r2, [r3, #0]
}
    d8b6:	bf00      	nop
    d8b8:	3714      	adds	r7, #20
    d8ba:	46bd      	mov	sp, r7
    d8bc:	bc80      	pop	{r7}
    d8be:	4770      	bx	lr

0000d8c0 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    d8c0:	b480      	push	{r7}
    d8c2:	b085      	sub	sp, #20
    d8c4:	af00      	add	r7, sp, #0
    d8c6:	6078      	str	r0, [r7, #4]
    d8c8:	4608      	mov	r0, r1
    d8ca:	4611      	mov	r1, r2
    d8cc:	461a      	mov	r2, r3
    d8ce:	4603      	mov	r3, r0
    d8d0:	70fb      	strb	r3, [r7, #3]
    d8d2:	460b      	mov	r3, r1
    d8d4:	70bb      	strb	r3, [r7, #2]
    d8d6:	4613      	mov	r3, r2
    d8d8:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    d8da:	78fa      	ldrb	r2, [r7, #3]
    d8dc:	78bb      	ldrb	r3, [r7, #2]
    d8de:	6879      	ldr	r1, [r7, #4]
    d8e0:	01d2      	lsls	r2, r2, #7
    d8e2:	440a      	add	r2, r1
    d8e4:	4413      	add	r3, r2
    d8e6:	3330      	adds	r3, #48	; 0x30
    d8e8:	781b      	ldrb	r3, [r3, #0]
    d8ea:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    d8ec:	7bfb      	ldrb	r3, [r7, #15]
    d8ee:	f023 030f 	bic.w	r3, r3, #15
    d8f2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    d8f4:	787b      	ldrb	r3, [r7, #1]
    d8f6:	f003 030f 	and.w	r3, r3, #15
    d8fa:	b2da      	uxtb	r2, r3
    d8fc:	7bfb      	ldrb	r3, [r7, #15]
    d8fe:	4313      	orrs	r3, r2
    d900:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    d902:	78fa      	ldrb	r2, [r7, #3]
    d904:	78bb      	ldrb	r3, [r7, #2]
    d906:	6879      	ldr	r1, [r7, #4]
    d908:	01d2      	lsls	r2, r2, #7
    d90a:	440a      	add	r2, r1
    d90c:	4413      	add	r3, r2
    d90e:	3330      	adds	r3, #48	; 0x30
    d910:	7bfa      	ldrb	r2, [r7, #15]
    d912:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    d914:	bf00      	nop
    d916:	3714      	adds	r7, #20
    d918:	46bd      	mov	sp, r7
    d91a:	bc80      	pop	{r7}
    d91c:	4770      	bx	lr

0000d91e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    d91e:	b480      	push	{r7}
    d920:	b085      	sub	sp, #20
    d922:	af00      	add	r7, sp, #0
    d924:	6078      	str	r0, [r7, #4]
    d926:	4608      	mov	r0, r1
    d928:	4611      	mov	r1, r2
    d92a:	461a      	mov	r2, r3
    d92c:	4603      	mov	r3, r0
    d92e:	70fb      	strb	r3, [r7, #3]
    d930:	460b      	mov	r3, r1
    d932:	70bb      	strb	r3, [r7, #2]
    d934:	4613      	mov	r3, r2
    d936:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    d938:	78fa      	ldrb	r2, [r7, #3]
    d93a:	78bb      	ldrb	r3, [r7, #2]
    d93c:	6879      	ldr	r1, [r7, #4]
    d93e:	01d2      	lsls	r2, r2, #7
    d940:	440a      	add	r2, r1
    d942:	4413      	add	r3, r2
    d944:	3330      	adds	r3, #48	; 0x30
    d946:	781b      	ldrb	r3, [r3, #0]
    d948:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    d94a:	7bfb      	ldrb	r3, [r7, #15]
    d94c:	f003 030f 	and.w	r3, r3, #15
    d950:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    d952:	787b      	ldrb	r3, [r7, #1]
    d954:	011b      	lsls	r3, r3, #4
    d956:	b2da      	uxtb	r2, r3
    d958:	7bfb      	ldrb	r3, [r7, #15]
    d95a:	4313      	orrs	r3, r2
    d95c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    d95e:	78fa      	ldrb	r2, [r7, #3]
    d960:	78bb      	ldrb	r3, [r7, #2]
    d962:	6879      	ldr	r1, [r7, #4]
    d964:	01d2      	lsls	r2, r2, #7
    d966:	440a      	add	r2, r1
    d968:	4413      	add	r3, r2
    d96a:	3330      	adds	r3, #48	; 0x30
    d96c:	7bfa      	ldrb	r2, [r7, #15]
    d96e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    d970:	bf00      	nop
    d972:	3714      	adds	r7, #20
    d974:	46bd      	mov	sp, r7
    d976:	bc80      	pop	{r7}
    d978:	4770      	bx	lr

0000d97a <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    d97a:	b480      	push	{r7}
    d97c:	b085      	sub	sp, #20
    d97e:	af00      	add	r7, sp, #0
    d980:	6078      	str	r0, [r7, #4]
    d982:	4608      	mov	r0, r1
    d984:	4611      	mov	r1, r2
    d986:	461a      	mov	r2, r3
    d988:	4603      	mov	r3, r0
    d98a:	70fb      	strb	r3, [r7, #3]
    d98c:	460b      	mov	r3, r1
    d98e:	70bb      	strb	r3, [r7, #2]
    d990:	4613      	mov	r3, r2
    d992:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    d994:	78fa      	ldrb	r2, [r7, #3]
    d996:	78bb      	ldrb	r3, [r7, #2]
    d998:	6879      	ldr	r1, [r7, #4]
    d99a:	01d2      	lsls	r2, r2, #7
    d99c:	440a      	add	r2, r1
    d99e:	4413      	add	r3, r2
    d9a0:	3340      	adds	r3, #64	; 0x40
    d9a2:	781b      	ldrb	r3, [r3, #0]
    d9a4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    d9a6:	7bfb      	ldrb	r3, [r7, #15]
    d9a8:	f023 0301 	bic.w	r3, r3, #1
    d9ac:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    d9ae:	787a      	ldrb	r2, [r7, #1]
    d9b0:	7bfb      	ldrb	r3, [r7, #15]
    d9b2:	4313      	orrs	r3, r2
    d9b4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    d9b6:	78fa      	ldrb	r2, [r7, #3]
    d9b8:	78bb      	ldrb	r3, [r7, #2]
    d9ba:	6879      	ldr	r1, [r7, #4]
    d9bc:	01d2      	lsls	r2, r2, #7
    d9be:	440a      	add	r2, r1
    d9c0:	4413      	add	r3, r2
    d9c2:	3340      	adds	r3, #64	; 0x40
    d9c4:	7bfa      	ldrb	r2, [r7, #15]
    d9c6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    d9c8:	bf00      	nop
    d9ca:	3714      	adds	r7, #20
    d9cc:	46bd      	mov	sp, r7
    d9ce:	bc80      	pop	{r7}
    d9d0:	4770      	bx	lr

0000d9d2 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    d9d2:	b480      	push	{r7}
    d9d4:	b085      	sub	sp, #20
    d9d6:	af00      	add	r7, sp, #0
    d9d8:	60f8      	str	r0, [r7, #12]
    d9da:	460b      	mov	r3, r1
    d9dc:	607a      	str	r2, [r7, #4]
    d9de:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    d9e0:	7afb      	ldrb	r3, [r7, #11]
    d9e2:	68fa      	ldr	r2, [r7, #12]
    d9e4:	01db      	lsls	r3, r3, #7
    d9e6:	4413      	add	r3, r2
    d9e8:	3328      	adds	r3, #40	; 0x28
    d9ea:	687a      	ldr	r2, [r7, #4]
    d9ec:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    d9ee:	bf00      	nop
    d9f0:	3714      	adds	r7, #20
    d9f2:	46bd      	mov	sp, r7
    d9f4:	bc80      	pop	{r7}
    d9f6:	4770      	bx	lr

0000d9f8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    d9f8:	b580      	push	{r7, lr}
    d9fa:	b082      	sub	sp, #8
    d9fc:	af00      	add	r7, sp, #0
    d9fe:	4603      	mov	r3, r0
    da00:	6039      	str	r1, [r7, #0]
    da02:	71fb      	strb	r3, [r7, #7]
    da04:	4613      	mov	r3, r2
    da06:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    da08:	79bb      	ldrb	r3, [r7, #6]
    da0a:	2b01      	cmp	r3, #1
    da0c:	d01c      	beq.n	da48 <_gpio_set_direction+0x50>
    da0e:	2b02      	cmp	r3, #2
    da10:	d037      	beq.n	da82 <_gpio_set_direction+0x8a>
    da12:	2b00      	cmp	r3, #0
    da14:	d14e      	bne.n	dab4 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    da16:	79fb      	ldrb	r3, [r7, #7]
    da18:	683a      	ldr	r2, [r7, #0]
    da1a:	4619      	mov	r1, r3
    da1c:	482a      	ldr	r0, [pc, #168]	; (dac8 <_gpio_set_direction+0xd0>)
    da1e:	4b2b      	ldr	r3, [pc, #172]	; (dacc <_gpio_set_direction+0xd4>)
    da20:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    da22:	683b      	ldr	r3, [r7, #0]
    da24:	b29b      	uxth	r3, r3
    da26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    da2a:	79fb      	ldrb	r3, [r7, #7]
    da2c:	4619      	mov	r1, r3
    da2e:	4826      	ldr	r0, [pc, #152]	; (dac8 <_gpio_set_direction+0xd0>)
    da30:	4b27      	ldr	r3, [pc, #156]	; (dad0 <_gpio_set_direction+0xd8>)
    da32:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    da34:	683b      	ldr	r3, [r7, #0]
    da36:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    da38:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    da3c:	79fb      	ldrb	r3, [r7, #7]
    da3e:	4619      	mov	r1, r3
    da40:	4821      	ldr	r0, [pc, #132]	; (dac8 <_gpio_set_direction+0xd0>)
    da42:	4b23      	ldr	r3, [pc, #140]	; (dad0 <_gpio_set_direction+0xd8>)
    da44:	4798      	blx	r3
		break;
    da46:	e03a      	b.n	dabe <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    da48:	79fb      	ldrb	r3, [r7, #7]
    da4a:	683a      	ldr	r2, [r7, #0]
    da4c:	4619      	mov	r1, r3
    da4e:	481e      	ldr	r0, [pc, #120]	; (dac8 <_gpio_set_direction+0xd0>)
    da50:	4b1e      	ldr	r3, [pc, #120]	; (dacc <_gpio_set_direction+0xd4>)
    da52:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    da54:	683b      	ldr	r3, [r7, #0]
    da56:	b29b      	uxth	r3, r3
    da58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    da5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    da60:	79f9      	ldrb	r1, [r7, #7]
    da62:	461a      	mov	r2, r3
    da64:	4818      	ldr	r0, [pc, #96]	; (dac8 <_gpio_set_direction+0xd0>)
    da66:	4b1a      	ldr	r3, [pc, #104]	; (dad0 <_gpio_set_direction+0xd8>)
    da68:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    da6a:	683b      	ldr	r3, [r7, #0]
    da6c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    da6e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    da72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
    da76:	79f9      	ldrb	r1, [r7, #7]
    da78:	461a      	mov	r2, r3
    da7a:	4813      	ldr	r0, [pc, #76]	; (dac8 <_gpio_set_direction+0xd0>)
    da7c:	4b14      	ldr	r3, [pc, #80]	; (dad0 <_gpio_set_direction+0xd8>)
    da7e:	4798      	blx	r3
		break;
    da80:	e01d      	b.n	dabe <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    da82:	79fb      	ldrb	r3, [r7, #7]
    da84:	683a      	ldr	r2, [r7, #0]
    da86:	4619      	mov	r1, r3
    da88:	480f      	ldr	r0, [pc, #60]	; (dac8 <_gpio_set_direction+0xd0>)
    da8a:	4b12      	ldr	r3, [pc, #72]	; (dad4 <_gpio_set_direction+0xdc>)
    da8c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    da8e:	683b      	ldr	r3, [r7, #0]
    da90:	b29b      	uxth	r3, r3
    da92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    da96:	79fb      	ldrb	r3, [r7, #7]
    da98:	4619      	mov	r1, r3
    da9a:	480b      	ldr	r0, [pc, #44]	; (dac8 <_gpio_set_direction+0xd0>)
    da9c:	4b0c      	ldr	r3, [pc, #48]	; (dad0 <_gpio_set_direction+0xd8>)
    da9e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    daa0:	683b      	ldr	r3, [r7, #0]
    daa2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    daa4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    daa8:	79fb      	ldrb	r3, [r7, #7]
    daaa:	4619      	mov	r1, r3
    daac:	4806      	ldr	r0, [pc, #24]	; (dac8 <_gpio_set_direction+0xd0>)
    daae:	4b08      	ldr	r3, [pc, #32]	; (dad0 <_gpio_set_direction+0xd8>)
    dab0:	4798      	blx	r3
		break;
    dab2:	e004      	b.n	dabe <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    dab4:	2246      	movs	r2, #70	; 0x46
    dab6:	4908      	ldr	r1, [pc, #32]	; (dad8 <_gpio_set_direction+0xe0>)
    dab8:	2000      	movs	r0, #0
    daba:	4b08      	ldr	r3, [pc, #32]	; (dadc <_gpio_set_direction+0xe4>)
    dabc:	4798      	blx	r3
	}
}
    dabe:	bf00      	nop
    dac0:	3708      	adds	r7, #8
    dac2:	46bd      	mov	sp, r7
    dac4:	bd80      	pop	{r7, pc}
    dac6:	bf00      	nop
    dac8:	41008000 	.word	0x41008000
    dacc:	0000d84f 	.word	0x0000d84f
    dad0:	0000d9d3 	.word	0x0000d9d3
    dad4:	0000d829 	.word	0x0000d829
    dad8:	00010b38 	.word	0x00010b38
    dadc:	00003b01 	.word	0x00003b01

0000dae0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    dae0:	b580      	push	{r7, lr}
    dae2:	b082      	sub	sp, #8
    dae4:	af00      	add	r7, sp, #0
    dae6:	4603      	mov	r3, r0
    dae8:	6039      	str	r1, [r7, #0]
    daea:	71fb      	strb	r3, [r7, #7]
    daec:	4613      	mov	r3, r2
    daee:	71bb      	strb	r3, [r7, #6]
	if (level) {
    daf0:	79bb      	ldrb	r3, [r7, #6]
    daf2:	2b00      	cmp	r3, #0
    daf4:	d006      	beq.n	db04 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    daf6:	79fb      	ldrb	r3, [r7, #7]
    daf8:	683a      	ldr	r2, [r7, #0]
    dafa:	4619      	mov	r1, r3
    dafc:	4806      	ldr	r0, [pc, #24]	; (db18 <_gpio_set_level+0x38>)
    dafe:	4b07      	ldr	r3, [pc, #28]	; (db1c <_gpio_set_level+0x3c>)
    db00:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    db02:	e005      	b.n	db10 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    db04:	79fb      	ldrb	r3, [r7, #7]
    db06:	683a      	ldr	r2, [r7, #0]
    db08:	4619      	mov	r1, r3
    db0a:	4803      	ldr	r0, [pc, #12]	; (db18 <_gpio_set_level+0x38>)
    db0c:	4b04      	ldr	r3, [pc, #16]	; (db20 <_gpio_set_level+0x40>)
    db0e:	4798      	blx	r3
}
    db10:	bf00      	nop
    db12:	3708      	adds	r7, #8
    db14:	46bd      	mov	sp, r7
    db16:	bd80      	pop	{r7, pc}
    db18:	41008000 	.word	0x41008000
    db1c:	0000d875 	.word	0x0000d875
    db20:	0000d89b 	.word	0x0000d89b

0000db24 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    db24:	b590      	push	{r4, r7, lr}
    db26:	b085      	sub	sp, #20
    db28:	af00      	add	r7, sp, #0
    db2a:	6078      	str	r0, [r7, #4]
    db2c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    db2e:	687b      	ldr	r3, [r7, #4]
    db30:	095b      	lsrs	r3, r3, #5
    db32:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    db34:	687b      	ldr	r3, [r7, #4]
    db36:	b2db      	uxtb	r3, r3
    db38:	f003 031f 	and.w	r3, r3, #31
    db3c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    db3e:	683b      	ldr	r3, [r7, #0]
    db40:	f1b3 3fff 	cmp.w	r3, #4294967295
    db44:	d106      	bne.n	db54 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    db46:	7bba      	ldrb	r2, [r7, #14]
    db48:	7bf9      	ldrb	r1, [r7, #15]
    db4a:	2300      	movs	r3, #0
    db4c:	4812      	ldr	r0, [pc, #72]	; (db98 <_gpio_set_pin_function+0x74>)
    db4e:	4c13      	ldr	r4, [pc, #76]	; (db9c <_gpio_set_pin_function+0x78>)
    db50:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    db52:	e01d      	b.n	db90 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    db54:	7bba      	ldrb	r2, [r7, #14]
    db56:	7bf9      	ldrb	r1, [r7, #15]
    db58:	2301      	movs	r3, #1
    db5a:	480f      	ldr	r0, [pc, #60]	; (db98 <_gpio_set_pin_function+0x74>)
    db5c:	4c0f      	ldr	r4, [pc, #60]	; (db9c <_gpio_set_pin_function+0x78>)
    db5e:	47a0      	blx	r4
		if (pin & 1) {
    db60:	7bbb      	ldrb	r3, [r7, #14]
    db62:	f003 0301 	and.w	r3, r3, #1
    db66:	2b00      	cmp	r3, #0
    db68:	d009      	beq.n	db7e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    db6a:	7bbb      	ldrb	r3, [r7, #14]
    db6c:	105b      	asrs	r3, r3, #1
    db6e:	b2da      	uxtb	r2, r3
    db70:	683b      	ldr	r3, [r7, #0]
    db72:	b2db      	uxtb	r3, r3
    db74:	7bf9      	ldrb	r1, [r7, #15]
    db76:	4808      	ldr	r0, [pc, #32]	; (db98 <_gpio_set_pin_function+0x74>)
    db78:	4c09      	ldr	r4, [pc, #36]	; (dba0 <_gpio_set_pin_function+0x7c>)
    db7a:	47a0      	blx	r4
}
    db7c:	e008      	b.n	db90 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    db7e:	7bbb      	ldrb	r3, [r7, #14]
    db80:	105b      	asrs	r3, r3, #1
    db82:	b2da      	uxtb	r2, r3
    db84:	683b      	ldr	r3, [r7, #0]
    db86:	b2db      	uxtb	r3, r3
    db88:	7bf9      	ldrb	r1, [r7, #15]
    db8a:	4803      	ldr	r0, [pc, #12]	; (db98 <_gpio_set_pin_function+0x74>)
    db8c:	4c05      	ldr	r4, [pc, #20]	; (dba4 <_gpio_set_pin_function+0x80>)
    db8e:	47a0      	blx	r4
}
    db90:	bf00      	nop
    db92:	3714      	adds	r7, #20
    db94:	46bd      	mov	sp, r7
    db96:	bd90      	pop	{r4, r7, pc}
    db98:	41008000 	.word	0x41008000
    db9c:	0000d97b 	.word	0x0000d97b
    dba0:	0000d91f 	.word	0x0000d91f
    dba4:	0000d8c1 	.word	0x0000d8c1

0000dba8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    dba8:	b580      	push	{r7, lr}
    dbaa:	b082      	sub	sp, #8
    dbac:	af00      	add	r7, sp, #0
    dbae:	6078      	str	r0, [r7, #4]
    dbb0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    dbb2:	6839      	ldr	r1, [r7, #0]
    dbb4:	6878      	ldr	r0, [r7, #4]
    dbb6:	4b03      	ldr	r3, [pc, #12]	; (dbc4 <gpio_set_pin_function+0x1c>)
    dbb8:	4798      	blx	r3
}
    dbba:	bf00      	nop
    dbbc:	3708      	adds	r7, #8
    dbbe:	46bd      	mov	sp, r7
    dbc0:	bd80      	pop	{r7, pc}
    dbc2:	bf00      	nop
    dbc4:	0000db25 	.word	0x0000db25

0000dbc8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    dbc8:	b580      	push	{r7, lr}
    dbca:	b082      	sub	sp, #8
    dbcc:	af00      	add	r7, sp, #0
    dbce:	4603      	mov	r3, r0
    dbd0:	460a      	mov	r2, r1
    dbd2:	71fb      	strb	r3, [r7, #7]
    dbd4:	4613      	mov	r3, r2
    dbd6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    dbd8:	79fb      	ldrb	r3, [r7, #7]
    dbda:	115b      	asrs	r3, r3, #5
    dbdc:	b2d8      	uxtb	r0, r3
    dbde:	79fb      	ldrb	r3, [r7, #7]
    dbe0:	f003 031f 	and.w	r3, r3, #31
    dbe4:	2201      	movs	r2, #1
    dbe6:	fa02 f303 	lsl.w	r3, r2, r3
    dbea:	79ba      	ldrb	r2, [r7, #6]
    dbec:	4619      	mov	r1, r3
    dbee:	4b03      	ldr	r3, [pc, #12]	; (dbfc <gpio_set_pin_direction+0x34>)
    dbf0:	4798      	blx	r3
}
    dbf2:	bf00      	nop
    dbf4:	3708      	adds	r7, #8
    dbf6:	46bd      	mov	sp, r7
    dbf8:	bd80      	pop	{r7, pc}
    dbfa:	bf00      	nop
    dbfc:	0000d9f9 	.word	0x0000d9f9

0000dc00 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    dc00:	b580      	push	{r7, lr}
    dc02:	b082      	sub	sp, #8
    dc04:	af00      	add	r7, sp, #0
    dc06:	4603      	mov	r3, r0
    dc08:	460a      	mov	r2, r1
    dc0a:	71fb      	strb	r3, [r7, #7]
    dc0c:	4613      	mov	r3, r2
    dc0e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    dc10:	79fb      	ldrb	r3, [r7, #7]
    dc12:	115b      	asrs	r3, r3, #5
    dc14:	b2d8      	uxtb	r0, r3
    dc16:	79fb      	ldrb	r3, [r7, #7]
    dc18:	f003 031f 	and.w	r3, r3, #31
    dc1c:	2201      	movs	r2, #1
    dc1e:	fa02 f303 	lsl.w	r3, r2, r3
    dc22:	79ba      	ldrb	r2, [r7, #6]
    dc24:	4619      	mov	r1, r3
    dc26:	4b03      	ldr	r3, [pc, #12]	; (dc34 <gpio_set_pin_level+0x34>)
    dc28:	4798      	blx	r3
}
    dc2a:	bf00      	nop
    dc2c:	3708      	adds	r7, #8
    dc2e:	46bd      	mov	sp, r7
    dc30:	bd80      	pop	{r7, pc}
    dc32:	bf00      	nop
    dc34:	0000dae1 	.word	0x0000dae1

0000dc38 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
    dc38:	b580      	push	{r7, lr}
    dc3a:	b082      	sub	sp, #8
    dc3c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    dc3e:	2100      	movs	r1, #0
    dc40:	2008      	movs	r0, #8
    dc42:	4b24      	ldr	r3, [pc, #144]	; (dcd4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    dc44:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    dc46:	2100      	movs	r1, #0
    dc48:	202b      	movs	r0, #43	; 0x2b
    dc4a:	4b22      	ldr	r3, [pc, #136]	; (dcd4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    dc4c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    dc4e:	2100      	movs	r1, #0
    dc50:	202a      	movs	r0, #42	; 0x2a
    dc52:	4b20      	ldr	r3, [pc, #128]	; (dcd4 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    dc54:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    dc56:	2102      	movs	r1, #2
    dc58:	2008      	movs	r0, #8
    dc5a:	4b1f      	ldr	r3, [pc, #124]	; (dcd8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    dc5c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    dc5e:	2102      	movs	r1, #2
    dc60:	202b      	movs	r0, #43	; 0x2b
    dc62:	4b1d      	ldr	r3, [pc, #116]	; (dcd8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    dc64:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    dc66:	2102      	movs	r1, #2
    dc68:	202a      	movs	r0, #42	; 0x2a
    dc6a:	4b1b      	ldr	r3, [pc, #108]	; (dcd8 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    dc6c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    dc6e:	2101      	movs	r1, #1
    dc70:	2008      	movs	r0, #8
    dc72:	4b1a      	ldr	r3, [pc, #104]	; (dcdc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    dc74:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    dc76:	2100      	movs	r1, #0
    dc78:	202b      	movs	r0, #43	; 0x2b
    dc7a:	4b18      	ldr	r3, [pc, #96]	; (dcdc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    dc7c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    dc7e:	2100      	movs	r1, #0
    dc80:	202a      	movs	r0, #42	; 0x2a
    dc82:	4b16      	ldr	r3, [pc, #88]	; (dcdc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    dc84:	4798      	blx	r3

	delay_us(1);
    dc86:	2001      	movs	r0, #1
    dc88:	4b15      	ldr	r3, [pc, #84]	; (dce0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    dc8a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    dc8c:	2300      	movs	r3, #0
    dc8e:	607b      	str	r3, [r7, #4]
    dc90:	687b      	ldr	r3, [r7, #4]
    dc92:	2b06      	cmp	r3, #6
    dc94:	dc11      	bgt.n	dcba <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
    dc96:	2101      	movs	r1, #1
    dc98:	202a      	movs	r0, #42	; 0x2a
    dc9a:	4b10      	ldr	r3, [pc, #64]	; (dcdc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    dc9c:	4798      	blx	r3
		delay_us(1);
    dc9e:	2001      	movs	r0, #1
    dca0:	4b0f      	ldr	r3, [pc, #60]	; (dce0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    dca2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    dca4:	2100      	movs	r1, #0
    dca6:	202a      	movs	r0, #42	; 0x2a
    dca8:	4b0c      	ldr	r3, [pc, #48]	; (dcdc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    dcaa:	4798      	blx	r3
		delay_us(1);
    dcac:	2001      	movs	r0, #1
    dcae:	4b0c      	ldr	r3, [pc, #48]	; (dce0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    dcb0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    dcb2:	687b      	ldr	r3, [r7, #4]
    dcb4:	3301      	adds	r3, #1
    dcb6:	607b      	str	r3, [r7, #4]
    dcb8:	e7ea      	b.n	dc90 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
    dcba:	2101      	movs	r1, #1
    dcbc:	202b      	movs	r0, #43	; 0x2b
    dcbe:	4b07      	ldr	r3, [pc, #28]	; (dcdc <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    dcc0:	4798      	blx	r3
	delay_us(1);
    dcc2:	2001      	movs	r0, #1
    dcc4:	4b06      	ldr	r3, [pc, #24]	; (dce0 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    dcc6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    dcc8:	4b06      	ldr	r3, [pc, #24]	; (dce4 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
    dcca:	4798      	blx	r3
}
    dccc:	bf00      	nop
    dcce:	3708      	adds	r7, #8
    dcd0:	46bd      	mov	sp, r7
    dcd2:	bd80      	pop	{r7, pc}
    dcd4:	0000dba9 	.word	0x0000dba9
    dcd8:	0000dbc9 	.word	0x0000dbc9
    dcdc:	0000dc01 	.word	0x0000dc01
    dce0:	00002531 	.word	0x00002531
    dce4:	000013c5 	.word	0x000013c5

0000dce8 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
    dce8:	b480      	push	{r7}
    dcea:	b083      	sub	sp, #12
    dcec:	af00      	add	r7, sp, #0
    dcee:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
    dcf0:	687b      	ldr	r3, [r7, #4]
    dcf2:	4618      	mov	r0, r3
    dcf4:	370c      	adds	r7, #12
    dcf6:	46bd      	mov	sp, r7
    dcf8:	bc80      	pop	{r7}
    dcfa:	4770      	bx	lr

0000dcfc <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    dcfc:	b480      	push	{r7}
    dcfe:	b083      	sub	sp, #12
    dd00:	af00      	add	r7, sp, #0
    dd02:	6078      	str	r0, [r7, #4]
    dd04:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    dd06:	687b      	ldr	r3, [r7, #4]
    dd08:	683a      	ldr	r2, [r7, #0]
    dd0a:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    dd0c:	687b      	ldr	r3, [r7, #4]
    dd0e:	4a04      	ldr	r2, [pc, #16]	; (dd20 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    dd10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    dd14:	687b      	ldr	r3, [r7, #4]
    dd16:	4618      	mov	r0, r3
    dd18:	370c      	adds	r7, #12
    dd1a:	46bd      	mov	sp, r7
    dd1c:	bc80      	pop	{r7}
    dd1e:	4770      	bx	lr
    dd20:	001fff00 	.word	0x001fff00

0000dd24 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    dd24:	b480      	push	{r7}
    dd26:	b083      	sub	sp, #12
    dd28:	af00      	add	r7, sp, #0
    dd2a:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    dd2c:	687b      	ldr	r3, [r7, #4]
    dd2e:	4618      	mov	r0, r3
    dd30:	370c      	adds	r7, #12
    dd32:	46bd      	mov	sp, r7
    dd34:	bc80      	pop	{r7}
    dd36:	4770      	bx	lr

0000dd38 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
    dd38:	b580      	push	{r7, lr}
    dd3a:	b082      	sub	sp, #8
    dd3c:	af00      	add	r7, sp, #0
    dd3e:	6078      	str	r0, [r7, #4]
	xferDone=false;
    dd40:	687b      	ldr	r3, [r7, #4]
    dd42:	2200      	movs	r2, #0
    dd44:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
    dd46:	6878      	ldr	r0, [r7, #4]
    dd48:	4b04      	ldr	r3, [pc, #16]	; (dd5c <_ZN13N25Q256_Class4InitEv+0x24>)
    dd4a:	4798      	blx	r3
	return SelfTest();
    dd4c:	6878      	ldr	r0, [r7, #4]
    dd4e:	4b04      	ldr	r3, [pc, #16]	; (dd60 <_ZN13N25Q256_Class4InitEv+0x28>)
    dd50:	4798      	blx	r3
    dd52:	4603      	mov	r3, r0
}
    dd54:	4618      	mov	r0, r3
    dd56:	3708      	adds	r7, #8
    dd58:	46bd      	mov	sp, r7
    dd5a:	bd80      	pop	{r7, pc}
    dd5c:	0000dd65 	.word	0x0000dd65
    dd60:	0000df01 	.word	0x0000df01

0000dd64 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
    dd64:	b590      	push	{r4, r7, lr}
    dd66:	b083      	sub	sp, #12
    dd68:	af00      	add	r7, sp, #0
    dd6a:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
    dd6c:	687b      	ldr	r3, [r7, #4]
    dd6e:	685b      	ldr	r3, [r3, #4]
    dd70:	4618      	mov	r0, r3
    dd72:	4b08      	ldr	r3, [pc, #32]	; (dd94 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
    dd74:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    dd76:	687b      	ldr	r3, [r7, #4]
    dd78:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
    dd7a:	2300      	movs	r3, #0
    dd7c:	4a06      	ldr	r2, [pc, #24]	; (dd98 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
    dd7e:	4807      	ldr	r0, [pc, #28]	; (dd9c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
    dd80:	4c07      	ldr	r4, [pc, #28]	; (dda0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
    dd82:	47a0      	blx	r4
    dd84:	4602      	mov	r2, r0
    dd86:	687b      	ldr	r3, [r7, #4]
    dd88:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
    dd8c:	bf00      	nop
    dd8e:	370c      	adds	r7, #12
    dd90:	46bd      	mov	sp, r7
    dd92:	bd90      	pop	{r4, r7, pc}
    dd94:	00002a69 	.word	0x00002a69
    dd98:	0000dc39 	.word	0x0000dc39
    dd9c:	200026f0 	.word	0x200026f0
    dda0:	0000bb99 	.word	0x0000bb99

0000dda4 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
    dda4:	b580      	push	{r7, lr}
    dda6:	b084      	sub	sp, #16
    dda8:	af00      	add	r7, sp, #0
    ddaa:	6078      	str	r0, [r7, #4]
    ddac:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
    ddae:	687b      	ldr	r3, [r7, #4]
    ddb0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    ddb4:	685b      	ldr	r3, [r3, #4]
    ddb6:	689b      	ldr	r3, [r3, #8]
    ddb8:	687a      	ldr	r2, [r7, #4]
    ddba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
    ddbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    ddc2:	6839      	ldr	r1, [r7, #0]
    ddc4:	4798      	blx	r3
    ddc6:	4603      	mov	r3, r0
    ddc8:	60fb      	str	r3, [r7, #12]
	return	e;
    ddca:	68fb      	ldr	r3, [r7, #12]
}
    ddcc:	4618      	mov	r0, r3
    ddce:	3710      	adds	r7, #16
    ddd0:	46bd      	mov	sp, r7
    ddd2:	bd80      	pop	{r7, pc}

0000ddd4 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    ddd4:	b590      	push	{r4, r7, lr}
    ddd6:	b087      	sub	sp, #28
    ddd8:	af00      	add	r7, sp, #0
    ddda:	60f8      	str	r0, [r7, #12]
    dddc:	60b9      	str	r1, [r7, #8]
    ddde:	607a      	str	r2, [r7, #4]
    dde0:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
    dde2:	68fb      	ldr	r3, [r7, #12]
    dde4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    dde8:	685b      	ldr	r3, [r3, #4]
    ddea:	685c      	ldr	r4, [r3, #4]
    ddec:	68fb      	ldr	r3, [r7, #12]
    ddee:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    ddf2:	683b      	ldr	r3, [r7, #0]
    ddf4:	687a      	ldr	r2, [r7, #4]
    ddf6:	68b9      	ldr	r1, [r7, #8]
    ddf8:	47a0      	blx	r4
    ddfa:	4603      	mov	r3, r0
    ddfc:	617b      	str	r3, [r7, #20]
	return	w;
    ddfe:	697b      	ldr	r3, [r7, #20]
}
    de00:	4618      	mov	r0, r3
    de02:	371c      	adds	r7, #28
    de04:	46bd      	mov	sp, r7
    de06:	bd90      	pop	{r4, r7, pc}

0000de08 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    de08:	b590      	push	{r4, r7, lr}
    de0a:	b087      	sub	sp, #28
    de0c:	af00      	add	r7, sp, #0
    de0e:	60f8      	str	r0, [r7, #12]
    de10:	60b9      	str	r1, [r7, #8]
    de12:	607a      	str	r2, [r7, #4]
    de14:	603b      	str	r3, [r7, #0]
	xferDone=false;
    de16:	68fb      	ldr	r3, [r7, #12]
    de18:	2200      	movs	r2, #0
    de1a:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
    de1c:	68fb      	ldr	r3, [r7, #12]
    de1e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    de22:	685b      	ldr	r3, [r3, #4]
    de24:	681c      	ldr	r4, [r3, #0]
    de26:	68fb      	ldr	r3, [r7, #12]
    de28:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    de2c:	683b      	ldr	r3, [r7, #0]
    de2e:	687a      	ldr	r2, [r7, #4]
    de30:	68b9      	ldr	r1, [r7, #8]
    de32:	47a0      	blx	r4
    de34:	4603      	mov	r3, r0
    de36:	617b      	str	r3, [r7, #20]
	return	r;
    de38:	697b      	ldr	r3, [r7, #20]
}
    de3a:	4618      	mov	r0, r3
    de3c:	371c      	adds	r7, #28
    de3e:	46bd      	mov	sp, r7
    de40:	bd90      	pop	{r4, r7, pc}
	...

0000de44 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
    de44:	b580      	push	{r7, lr}
    de46:	b082      	sub	sp, #8
    de48:	af00      	add	r7, sp, #0
    de4a:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
    de4c:	687a      	ldr	r2, [r7, #4]
    de4e:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    de52:	f043 0310 	orr.w	r3, r3, #16
    de56:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
    de5a:	687a      	ldr	r2, [r7, #4]
    de5c:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    de60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    de64:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
    de68:	687a      	ldr	r2, [r7, #4]
    de6a:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
    de6e:	f36f 1305 	bfc	r3, #4, #2
    de72:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
    de76:	687b      	ldr	r3, [r7, #4]
    de78:	2205      	movs	r2, #5
    de7a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
    de7e:	687b      	ldr	r3, [r7, #4]
    de80:	2201      	movs	r2, #1
    de82:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
    de86:	687b      	ldr	r3, [r7, #4]
    de88:	f203 2212 	addw	r2, r3, #530	; 0x212
    de8c:	687b      	ldr	r3, [r7, #4]
    de8e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
    de92:	687b      	ldr	r3, [r7, #4]
    de94:	685a      	ldr	r2, [r3, #4]
    de96:	687b      	ldr	r3, [r7, #4]
    de98:	f503 7305 	add.w	r3, r3, #532	; 0x214
    de9c:	4619      	mov	r1, r3
    de9e:	4610      	mov	r0, r2
    dea0:	4b04      	ldr	r3, [pc, #16]	; (deb4 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
    dea2:	4798      	blx	r3
		return status;
    dea4:	687b      	ldr	r3, [r7, #4]
    dea6:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
    deaa:	4618      	mov	r0, r3
    deac:	3708      	adds	r7, #8
    deae:	46bd      	mov	sp, r7
    deb0:	bd80      	pop	{r7, pc}
    deb2:	bf00      	nop
    deb4:	00002ae1 	.word	0x00002ae1

0000deb8 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
    deb8:	b580      	push	{r7, lr}
    deba:	b082      	sub	sp, #8
    debc:	af00      	add	r7, sp, #0
    debe:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
    dec0:	6878      	ldr	r0, [r7, #4]
    dec2:	4b0e      	ldr	r3, [pc, #56]	; (defc <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
    dec4:	4798      	blx	r3
    dec6:	4603      	mov	r3, r0
    dec8:	461a      	mov	r2, r3
    deca:	687b      	ldr	r3, [r7, #4]
    decc:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
    ded0:	687b      	ldr	r3, [r7, #4]
    ded2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    ded6:	f003 0301 	and.w	r3, r3, #1
    deda:	2b00      	cmp	r3, #0
    dedc:	d000      	beq.n	dee0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
    dede:	e7ef      	b.n	dec0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
    dee0:	687b      	ldr	r3, [r7, #4]
    dee2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    dee6:	f003 0301 	and.w	r3, r3, #1
    deea:	2b00      	cmp	r3, #0
    deec:	bf0c      	ite	eq
    deee:	2301      	moveq	r3, #1
    def0:	2300      	movne	r3, #0
    def2:	b2db      	uxtb	r3, r3
}
    def4:	4618      	mov	r0, r3
    def6:	3708      	adds	r7, #8
    def8:	46bd      	mov	sp, r7
    defa:	bd80      	pop	{r7, pc}
    defc:	0000de45 	.word	0x0000de45

0000df00 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
    df00:	b590      	push	{r4, r7, lr}
    df02:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    df06:	b085      	sub	sp, #20
    df08:	af00      	add	r7, sp, #0
    df0a:	f107 0310 	add.w	r3, r7, #16
    df0e:	3b0c      	subs	r3, #12
    df10:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
    df12:	f107 0310 	add.w	r3, r7, #16
    df16:	3b0c      	subs	r3, #12
    df18:	681b      	ldr	r3, [r3, #0]
    df1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    df1e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
    df22:	f107 0310 	add.w	r3, r7, #16
    df26:	3b0c      	subs	r3, #12
    df28:	681b      	ldr	r3, [r3, #0]
    df2a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    df2e:	f107 0110 	add.w	r1, r7, #16
    df32:	3904      	subs	r1, #4
    df34:	f107 0010 	add.w	r0, r7, #16
    df38:	380c      	subs	r0, #12
    df3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    df3e:	6800      	ldr	r0, [r0, #0]
    df40:	4c4b      	ldr	r4, [pc, #300]	; (e070 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
    df42:	47a0      	blx	r4
	WaitOnBusy();
    df44:	f107 0310 	add.w	r3, r7, #16
    df48:	3b0c      	subs	r3, #12
    df4a:	6818      	ldr	r0, [r3, #0]
    df4c:	4b49      	ldr	r3, [pc, #292]	; (e074 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
    df4e:	4798      	blx	r3
	Erase(currentAddress);
    df50:	f107 0310 	add.w	r3, r7, #16
    df54:	3b0c      	subs	r3, #12
    df56:	681b      	ldr	r3, [r3, #0]
    df58:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    df5c:	f107 0310 	add.w	r3, r7, #16
    df60:	3b0c      	subs	r3, #12
    df62:	4611      	mov	r1, r2
    df64:	6818      	ldr	r0, [r3, #0]
    df66:	4b44      	ldr	r3, [pc, #272]	; (e078 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
    df68:	4798      	blx	r3
	WaitOnBusy();
    df6a:	f107 0310 	add.w	r3, r7, #16
    df6e:	3b0c      	subs	r3, #12
    df70:	6818      	ldr	r0, [r3, #0]
    df72:	4b40      	ldr	r3, [pc, #256]	; (e074 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
    df74:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
    df76:	f107 0310 	add.w	r3, r7, #16
    df7a:	3b0c      	subs	r3, #12
    df7c:	681b      	ldr	r3, [r3, #0]
    df7e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    df82:	f107 0110 	add.w	r1, r7, #16
    df86:	3904      	subs	r1, #4
    df88:	f107 0010 	add.w	r0, r7, #16
    df8c:	380c      	subs	r0, #12
    df8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    df92:	6800      	ldr	r0, [r0, #0]
    df94:	4c39      	ldr	r4, [pc, #228]	; (e07c <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
    df96:	47a0      	blx	r4
	WaitOnBusy();
    df98:	f107 0310 	add.w	r3, r7, #16
    df9c:	3b0c      	subs	r3, #12
    df9e:	6818      	ldr	r0, [r3, #0]
    dfa0:	4b34      	ldr	r3, [pc, #208]	; (e074 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
    dfa2:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
    dfa4:	f107 0310 	add.w	r3, r7, #16
    dfa8:	3b0c      	subs	r3, #12
    dfaa:	681b      	ldr	r3, [r3, #0]
    dfac:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    dfb0:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
    dfb4:	f101 0110 	add.w	r1, r1, #16
    dfb8:	3904      	subs	r1, #4
    dfba:	f107 0010 	add.w	r0, r7, #16
    dfbe:	380c      	subs	r0, #12
    dfc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    dfc4:	6800      	ldr	r0, [r0, #0]
    dfc6:	4c2a      	ldr	r4, [pc, #168]	; (e070 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
    dfc8:	47a0      	blx	r4
	WaitOnBusy();
    dfca:	f107 0310 	add.w	r3, r7, #16
    dfce:	3b0c      	subs	r3, #12
    dfd0:	6818      	ldr	r0, [r3, #0]
    dfd2:	4b28      	ldr	r3, [pc, #160]	; (e074 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
    dfd4:	4798      	blx	r3
	isOK	 = true;
    dfd6:	f107 0310 	add.w	r3, r7, #16
    dfda:	3b0c      	subs	r3, #12
    dfdc:	681b      	ldr	r3, [r3, #0]
    dfde:	2201      	movs	r2, #1
    dfe0:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
    dfe4:	2300      	movs	r3, #0
    dfe6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    dfea:	f102 020c 	add.w	r2, r2, #12
    dfee:	6013      	str	r3, [r2, #0]
    dff0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    dff4:	f103 030c 	add.w	r3, r3, #12
    dff8:	681b      	ldr	r3, [r3, #0]
    dffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    dffe:	da2b      	bge.n	e058 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
    e000:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
    e004:	f103 0310 	add.w	r3, r3, #16
    e008:	3b04      	subs	r3, #4
    e00a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    e00e:	f102 020c 	add.w	r2, r2, #12
    e012:	6812      	ldr	r2, [r2, #0]
    e014:	4413      	add	r3, r2
    e016:	781a      	ldrb	r2, [r3, #0]
    e018:	f107 0310 	add.w	r3, r7, #16
    e01c:	3b04      	subs	r3, #4
    e01e:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
    e022:	f101 010c 	add.w	r1, r1, #12
    e026:	6809      	ldr	r1, [r1, #0]
    e028:	440b      	add	r3, r1
    e02a:	781b      	ldrb	r3, [r3, #0]
    e02c:	429a      	cmp	r2, r3
    e02e:	d007      	beq.n	e040 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
    e030:	f107 0310 	add.w	r3, r7, #16
    e034:	3b0c      	subs	r3, #12
    e036:	681b      	ldr	r3, [r3, #0]
    e038:	2200      	movs	r2, #0
    e03a:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
    e03e:	e00b      	b.n	e058 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
    e040:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    e044:	f103 030c 	add.w	r3, r3, #12
    e048:	681b      	ldr	r3, [r3, #0]
    e04a:	3301      	adds	r3, #1
    e04c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    e050:	f102 020c 	add.w	r2, r2, #12
    e054:	6013      	str	r3, [r2, #0]
    e056:	e7cb      	b.n	dff0 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
    e058:	f107 0310 	add.w	r3, r7, #16
    e05c:	3b0c      	subs	r3, #12
    e05e:	681b      	ldr	r3, [r3, #0]
    e060:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
    e064:	4618      	mov	r0, r3
    e066:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
    e06a:	3714      	adds	r7, #20
    e06c:	46bd      	mov	sp, r7
    e06e:	bd90      	pop	{r4, r7, pc}
    e070:	0000de09 	.word	0x0000de09
    e074:	0000deb9 	.word	0x0000deb9
    e078:	0000dda5 	.word	0x0000dda5
    e07c:	0000ddd5 	.word	0x0000ddd5

0000e080 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
    e080:	b580      	push	{r7, lr}
    e082:	b082      	sub	sp, #8
    e084:	af00      	add	r7, sp, #0
    e086:	6078      	str	r0, [r7, #4]
    e088:	6039      	str	r1, [r7, #0]
    e08a:	687b      	ldr	r3, [r7, #4]
    e08c:	2b01      	cmp	r3, #1
    e08e:	d10d      	bne.n	e0ac <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e090:	683b      	ldr	r3, [r7, #0]
    e092:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e096:	4293      	cmp	r3, r2
    e098:	d108      	bne.n	e0ac <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e09a:	4906      	ldr	r1, [pc, #24]	; (e0b4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e09c:	4806      	ldr	r0, [pc, #24]	; (e0b8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e09e:	4b07      	ldr	r3, [pc, #28]	; (e0bc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e0a0:	4798      	blx	r3
    e0a2:	4a07      	ldr	r2, [pc, #28]	; (e0c0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e0a4:	4907      	ldr	r1, [pc, #28]	; (e0c4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e0a6:	4804      	ldr	r0, [pc, #16]	; (e0b8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e0a8:	4b07      	ldr	r3, [pc, #28]	; (e0c8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e0aa:	4798      	blx	r3
    e0ac:	bf00      	nop
    e0ae:	3708      	adds	r7, #8
    e0b0:	46bd      	mov	sp, r7
    e0b2:	bd80      	pop	{r7, pc}
    e0b4:	2000a638 	.word	0x2000a638
    e0b8:	20002700 	.word	0x20002700
    e0bc:	0000dcfd 	.word	0x0000dcfd
    e0c0:	20000000 	.word	0x20000000
    e0c4:	0000dd25 	.word	0x0000dd25
    e0c8:	00010289 	.word	0x00010289

0000e0cc <_GLOBAL__sub_I_ptrN25Q256Class>:
    e0cc:	b580      	push	{r7, lr}
    e0ce:	af00      	add	r7, sp, #0
    e0d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e0d4:	2001      	movs	r0, #1
    e0d6:	4b01      	ldr	r3, [pc, #4]	; (e0dc <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    e0d8:	4798      	blx	r3
    e0da:	bd80      	pop	{r7, pc}
    e0dc:	0000e081 	.word	0x0000e081

0000e0e0 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
    e0e0:	b580      	push	{r7, lr}
    e0e2:	b082      	sub	sp, #8
    e0e4:	af00      	add	r7, sp, #0
    e0e6:	6078      	str	r0, [r7, #4]
    e0e8:	687b      	ldr	r3, [r7, #4]
    e0ea:	4618      	mov	r0, r3
    e0ec:	4b06      	ldr	r3, [pc, #24]	; (e108 <_ZN14Calendar_ClassC1Ev+0x28>)
    e0ee:	4798      	blx	r3
    e0f0:	4a06      	ldr	r2, [pc, #24]	; (e10c <_ZN14Calendar_ClassC1Ev+0x2c>)
    e0f2:	687b      	ldr	r3, [r7, #4]
    e0f4:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
    e0f6:	4a06      	ldr	r2, [pc, #24]	; (e110 <_ZN14Calendar_ClassC1Ev+0x30>)
    e0f8:	687b      	ldr	r3, [r7, #4]
    e0fa:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    e0fc:	687b      	ldr	r3, [r7, #4]
    e0fe:	4618      	mov	r0, r3
    e100:	3708      	adds	r7, #8
    e102:	46bd      	mov	sp, r7
    e104:	bd80      	pop	{r7, pc}
    e106:	bf00      	nop
    e108:	0000e82d 	.word	0x0000e82d
    e10c:	00010b84 	.word	0x00010b84
    e110:	20002930 	.word	0x20002930

0000e114 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    e114:	b580      	push	{r7, lr}
    e116:	b082      	sub	sp, #8
    e118:	af00      	add	r7, sp, #0
    e11a:	6078      	str	r0, [r7, #4]
    e11c:	6039      	str	r1, [r7, #0]
    e11e:	687b      	ldr	r3, [r7, #4]
    e120:	4618      	mov	r0, r3
    e122:	4b08      	ldr	r3, [pc, #32]	; (e144 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    e124:	4798      	blx	r3
    e126:	4a08      	ldr	r2, [pc, #32]	; (e148 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    e128:	687b      	ldr	r3, [r7, #4]
    e12a:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    e12c:	687b      	ldr	r3, [r7, #4]
    e12e:	683a      	ldr	r2, [r7, #0]
    e130:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
    e134:	4a05      	ldr	r2, [pc, #20]	; (e14c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    e136:	687b      	ldr	r3, [r7, #4]
    e138:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    e13a:	687b      	ldr	r3, [r7, #4]
    e13c:	4618      	mov	r0, r3
    e13e:	3708      	adds	r7, #8
    e140:	46bd      	mov	sp, r7
    e142:	bd80      	pop	{r7, pc}
    e144:	0000e82d 	.word	0x0000e82d
    e148:	00010b84 	.word	0x00010b84
    e14c:	20002930 	.word	0x20002930

0000e150 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    e150:	b580      	push	{r7, lr}
    e152:	b082      	sub	sp, #8
    e154:	af00      	add	r7, sp, #0
    e156:	6078      	str	r0, [r7, #4]
    e158:	4a05      	ldr	r2, [pc, #20]	; (e170 <_ZN14Calendar_ClassD1Ev+0x20>)
    e15a:	687b      	ldr	r3, [r7, #4]
    e15c:	601a      	str	r2, [r3, #0]
    e15e:	687b      	ldr	r3, [r7, #4]
    e160:	4618      	mov	r0, r3
    e162:	4b04      	ldr	r3, [pc, #16]	; (e174 <_ZN14Calendar_ClassD1Ev+0x24>)
    e164:	4798      	blx	r3
{
} //~Calendar_Class
    e166:	687b      	ldr	r3, [r7, #4]
    e168:	4618      	mov	r0, r3
    e16a:	3708      	adds	r7, #8
    e16c:	46bd      	mov	sp, r7
    e16e:	bd80      	pop	{r7, pc}
    e170:	00010b84 	.word	0x00010b84
    e174:	0000e84d 	.word	0x0000e84d

0000e178 <_ZN14Calendar_Class4InitE18calendar_date_time>:
	SaveCurrentDateTime();
	
}


bool	Calendar_Class::Init(calendar_date_time dt_memory){
    e178:	b580      	push	{r7, lr}
    e17a:	b084      	sub	sp, #16
    e17c:	af00      	add	r7, sp, #0
    e17e:	60f8      	str	r0, [r7, #12]
    e180:	1d3b      	adds	r3, r7, #4
    e182:	e883 0006 	stmia.w	r3, {r1, r2}

	calendar_enable(ptrCalendar);
    e186:	68fb      	ldr	r3, [r7, #12]
    e188:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    e18c:	4618      	mov	r0, r3
    e18e:	4b4c      	ldr	r3, [pc, #304]	; (e2c0 <_ZN14Calendar_Class4InitE18calendar_date_time+0x148>)
    e190:	4798      	blx	r3
	
	InitReferenceDates();
    e192:	68f8      	ldr	r0, [r7, #12]
    e194:	4b4b      	ldr	r3, [pc, #300]	; (e2c4 <_ZN14Calendar_Class4InitE18calendar_date_time+0x14c>)
    e196:	4798      	blx	r3
	lastDateTime=dt_memory;
    e198:	68fb      	ldr	r3, [r7, #12]
    e19a:	3360      	adds	r3, #96	; 0x60
    e19c:	1d3a      	adds	r2, r7, #4
    e19e:	e892 0003 	ldmia.w	r2, {r0, r1}
    e1a2:	e883 0003 	stmia.w	r3, {r0, r1}
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
    e1a6:	68fb      	ldr	r3, [r7, #12]
    e1a8:	681b      	ldr	r3, [r3, #0]
    e1aa:	3304      	adds	r3, #4
    e1ac:	681b      	ldr	r3, [r3, #0]
    e1ae:	68fa      	ldr	r2, [r7, #12]
    e1b0:	3260      	adds	r2, #96	; 0x60
    e1b2:	4611      	mov	r1, r2
    e1b4:	68f8      	ldr	r0, [r7, #12]
    e1b6:	4798      	blx	r3
    e1b8:	4602      	mov	r2, r0
    e1ba:	68fb      	ldr	r3, [r7, #12]
    e1bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
    e1c0:	68fb      	ldr	r3, [r7, #12]
    e1c2:	681b      	ldr	r3, [r3, #0]
    e1c4:	3304      	adds	r3, #4
    e1c6:	681b      	ldr	r3, [r3, #0]
    e1c8:	68fa      	ldr	r2, [r7, #12]
    e1ca:	326c      	adds	r2, #108	; 0x6c
    e1cc:	4611      	mov	r1, r2
    e1ce:	68f8      	ldr	r0, [r7, #12]
    e1d0:	4798      	blx	r3
    e1d2:	4602      	mov	r2, r0
    e1d4:	68fb      	ldr	r3, [r7, #12]
    e1d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
    e1da:	68fb      	ldr	r3, [r7, #12]
    e1dc:	681b      	ldr	r3, [r3, #0]
    e1de:	3304      	adds	r3, #4
    e1e0:	681b      	ldr	r3, [r3, #0]
    e1e2:	68fa      	ldr	r2, [r7, #12]
    e1e4:	327c      	adds	r2, #124	; 0x7c
    e1e6:	4611      	mov	r1, r2
    e1e8:	68f8      	ldr	r0, [r7, #12]
    e1ea:	4798      	blx	r3
    e1ec:	4602      	mov	r2, r0
    e1ee:	68fb      	ldr	r3, [r7, #12]
    e1f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
    e1f4:	68fb      	ldr	r3, [r7, #12]
    e1f6:	681b      	ldr	r3, [r3, #0]
    e1f8:	3304      	adds	r3, #4
    e1fa:	681b      	ldr	r3, [r3, #0]
    e1fc:	68fa      	ldr	r2, [r7, #12]
    e1fe:	3284      	adds	r2, #132	; 0x84
    e200:	4611      	mov	r1, r2
    e202:	68f8      	ldr	r0, [r7, #12]
    e204:	4798      	blx	r3
    e206:	4602      	mov	r2, r0
    e208:	68fb      	ldr	r3, [r7, #12]
    e20a:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
    e20c:	68f8      	ldr	r0, [r7, #12]
    e20e:	4b2e      	ldr	r3, [pc, #184]	; (e2c8 <_ZN14Calendar_Class4InitE18calendar_date_time+0x150>)
    e210:	4798      	blx	r3
	compilationTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
    e212:	68fb      	ldr	r3, [r7, #12]
    e214:	681b      	ldr	r3, [r3, #0]
    e216:	3304      	adds	r3, #4
    e218:	681b      	ldr	r3, [r3, #0]
    e21a:	68fa      	ldr	r2, [r7, #12]
    e21c:	3274      	adds	r2, #116	; 0x74
    e21e:	4611      	mov	r1, r2
    e220:	68f8      	ldr	r0, [r7, #12]
    e222:	4798      	blx	r3
    e224:	4602      	mov	r2, r0
    e226:	68fb      	ldr	r3, [r7, #12]
    e228:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
    e22c:	68fb      	ldr	r3, [r7, #12]
    e22e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    e232:	68fb      	ldr	r3, [r7, #12]
    e234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    e238:	429a      	cmp	r2, r3
    e23a:	d80e      	bhi.n	e25a <_ZN14Calendar_Class4InitE18calendar_date_time+0xe2>
    e23c:	68fb      	ldr	r3, [r7, #12]
    e23e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    e242:	68fb      	ldr	r3, [r7, #12]
    e244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    e248:	429a      	cmp	r2, r3
    e24a:	d006      	beq.n	e25a <_ZN14Calendar_Class4InitE18calendar_date_time+0xe2>
    e24c:	68fb      	ldr	r3, [r7, #12]
    e24e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    e252:	68fb      	ldr	r3, [r7, #12]
    e254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e256:	429a      	cmp	r2, r3
    e258:	d106      	bne.n	e268 <_ZN14Calendar_Class4InitE18calendar_date_time+0xf0>
	{
		SetDateTime(&compilationDateTime);
    e25a:	68fb      	ldr	r3, [r7, #12]
    e25c:	3374      	adds	r3, #116	; 0x74
    e25e:	4619      	mov	r1, r3
    e260:	68f8      	ldr	r0, [r7, #12]
    e262:	4b1a      	ldr	r3, [pc, #104]	; (e2cc <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
    e264:	4798      	blx	r3
    e266:	e022      	b.n	e2ae <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
	}
	else
	{
		if (lastTimestamp<compilationTimestamp)
    e268:	68fb      	ldr	r3, [r7, #12]
    e26a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    e26e:	68fb      	ldr	r3, [r7, #12]
    e270:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    e274:	429a      	cmp	r2, r3
    e276:	d206      	bcs.n	e286 <_ZN14Calendar_Class4InitE18calendar_date_time+0x10e>
		{
			SetDateTime(&compilationDateTime);
    e278:	68fb      	ldr	r3, [r7, #12]
    e27a:	3374      	adds	r3, #116	; 0x74
    e27c:	4619      	mov	r1, r3
    e27e:	68f8      	ldr	r0, [r7, #12]
    e280:	4b12      	ldr	r3, [pc, #72]	; (e2cc <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
    e282:	4798      	blx	r3
    e284:	e013      	b.n	e2ae <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
    e286:	68fb      	ldr	r3, [r7, #12]
    e288:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    e28c:	68fb      	ldr	r3, [r7, #12]
    e28e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e290:	429a      	cmp	r2, r3
    e292:	d106      	bne.n	e2a2 <_ZN14Calendar_Class4InitE18calendar_date_time+0x12a>
			{
				SetDateTime(&compilationDateTime);
    e294:	68fb      	ldr	r3, [r7, #12]
    e296:	3374      	adds	r3, #116	; 0x74
    e298:	4619      	mov	r1, r3
    e29a:	68f8      	ldr	r0, [r7, #12]
    e29c:	4b0b      	ldr	r3, [pc, #44]	; (e2cc <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
    e29e:	4798      	blx	r3
    e2a0:	e005      	b.n	e2ae <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
			}
			else
			{
				SetDateTime(&lastDateTime);
    e2a2:	68fb      	ldr	r3, [r7, #12]
    e2a4:	3360      	adds	r3, #96	; 0x60
    e2a6:	4619      	mov	r1, r3
    e2a8:	68f8      	ldr	r0, [r7, #12]
    e2aa:	4b08      	ldr	r3, [pc, #32]	; (e2cc <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
    e2ac:	4798      	blx	r3
			}
			
		}
	}
	enlapsedTime=false;
    e2ae:	68fb      	ldr	r3, [r7, #12]
    e2b0:	2200      	movs	r2, #0
    e2b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	
	return true;
    e2b6:	2301      	movs	r3, #1
}
    e2b8:	4618      	mov	r0, r3
    e2ba:	3710      	adds	r7, #16
    e2bc:	46bd      	mov	sp, r7
    e2be:	bd80      	pop	{r7, pc}
    e2c0:	00002259 	.word	0x00002259
    e2c4:	0000e2d1 	.word	0x0000e2d1
    e2c8:	0000e379 	.word	0x0000e379
    e2cc:	0000e57d 	.word	0x0000e57d

0000e2d0 <_ZN14Calendar_Class18InitReferenceDatesEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitReferenceDates(void){
    e2d0:	b480      	push	{r7}
    e2d2:	b083      	sub	sp, #12
    e2d4:	af00      	add	r7, sp, #0
    e2d6:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
    e2d8:	687b      	ldr	r3, [r7, #4]
    e2da:	f640 0202 	movw	r2, #2050	; 0x802
    e2de:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
    e2e2:	687b      	ldr	r3, [r7, #4]
    e2e4:	220c      	movs	r2, #12
    e2e6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
    e2ea:	687b      	ldr	r3, [r7, #4]
    e2ec:	221f      	movs	r2, #31
    e2ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
    e2f2:	687b      	ldr	r3, [r7, #4]
    e2f4:	220c      	movs	r2, #12
    e2f6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
    e2fa:	687b      	ldr	r3, [r7, #4]
    e2fc:	223b      	movs	r2, #59	; 0x3b
    e2fe:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
    e302:	687b      	ldr	r3, [r7, #4]
    e304:	223b      	movs	r2, #59	; 0x3b
    e306:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
    e30a:	687b      	ldr	r3, [r7, #4]
    e30c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e310:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
    e314:	687b      	ldr	r3, [r7, #4]
    e316:	22ff      	movs	r2, #255	; 0xff
    e318:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
    e31c:	687b      	ldr	r3, [r7, #4]
    e31e:	22ff      	movs	r2, #255	; 0xff
    e320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
    e324:	687b      	ldr	r3, [r7, #4]
    e326:	22ff      	movs	r2, #255	; 0xff
    e328:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
    e32c:	687b      	ldr	r3, [r7, #4]
    e32e:	22ff      	movs	r2, #255	; 0xff
    e330:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
    e334:	687b      	ldr	r3, [r7, #4]
    e336:	22ff      	movs	r2, #255	; 0xff
    e338:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
    e33c:	687b      	ldr	r3, [r7, #4]
    e33e:	2200      	movs	r2, #0
    e340:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
    e344:	687b      	ldr	r3, [r7, #4]
    e346:	2200      	movs	r2, #0
    e348:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
    e34c:	687b      	ldr	r3, [r7, #4]
    e34e:	2200      	movs	r2, #0
    e350:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
    e354:	687b      	ldr	r3, [r7, #4]
    e356:	2200      	movs	r2, #0
    e358:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
    e35c:	687b      	ldr	r3, [r7, #4]
    e35e:	2200      	movs	r2, #0
    e360:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
    e364:	687b      	ldr	r3, [r7, #4]
    e366:	2200      	movs	r2, #0
    e368:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
    e36c:	bf00      	nop
    e36e:	370c      	adds	r7, #12
    e370:	46bd      	mov	sp, r7
    e372:	bc80      	pop	{r7}
    e374:	4770      	bx	lr
	...

0000e378 <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
    e378:	b480      	push	{r7}
    e37a:	b083      	sub	sp, #12
    e37c:	af00      	add	r7, sp, #0
    e37e:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
    e380:	2332      	movs	r3, #50	; 0x32
    e382:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e386:	4613      	mov	r3, r2
    e388:	009b      	lsls	r3, r3, #2
    e38a:	4413      	add	r3, r2
    e38c:	005b      	lsls	r3, r3, #1
    e38e:	461a      	mov	r2, r3
    e390:	2330      	movs	r3, #48	; 0x30
    e392:	3b30      	subs	r3, #48	; 0x30
    e394:	441a      	add	r2, r3
    e396:	4613      	mov	r3, r2
    e398:	009b      	lsls	r3, r3, #2
    e39a:	4413      	add	r3, r2
    e39c:	005b      	lsls	r3, r3, #1
    e39e:	461a      	mov	r2, r3
    e3a0:	2332      	movs	r3, #50	; 0x32
    e3a2:	3b30      	subs	r3, #48	; 0x30
    e3a4:	4413      	add	r3, r2
    e3a6:	b29b      	uxth	r3, r3
    e3a8:	461a      	mov	r2, r3
    e3aa:	0092      	lsls	r2, r2, #2
    e3ac:	4413      	add	r3, r2
    e3ae:	005b      	lsls	r3, r3, #1
    e3b0:	b29a      	uxth	r2, r3
    e3b2:	2331      	movs	r3, #49	; 0x31
    e3b4:	b29b      	uxth	r3, r3
    e3b6:	4413      	add	r3, r2
    e3b8:	b29b      	uxth	r3, r3
    e3ba:	3b30      	subs	r3, #48	; 0x30
    e3bc:	b29a      	uxth	r2, r3
    e3be:	687b      	ldr	r3, [r7, #4]
    e3c0:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
    e3c4:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    e3c6:	2b6e      	cmp	r3, #110	; 0x6e
    e3c8:	d106      	bne.n	e3d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
    e3ca:	2361      	movs	r3, #97	; 0x61
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    e3cc:	2b61      	cmp	r3, #97	; 0x61
    e3ce:	d101      	bne.n	e3d4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
    e3d0:	2301      	movs	r3, #1
    e3d2:	e02f      	b.n	e434 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    e3d4:	2306      	movs	r3, #6
    e3d6:	e02d      	b.n	e434 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
    e3d8:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    e3da:	2b62      	cmp	r3, #98	; 0x62
    e3dc:	d029      	beq.n	e432 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
    e3de:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    e3e0:	2b72      	cmp	r3, #114	; 0x72
    e3e2:	d106      	bne.n	e3f2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
    e3e4:	234a      	movs	r3, #74	; 0x4a
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    e3e6:	2b4d      	cmp	r3, #77	; 0x4d
    e3e8:	d101      	bne.n	e3ee <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
    e3ea:	2303      	movs	r3, #3
    e3ec:	e022      	b.n	e434 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    e3ee:	2304      	movs	r3, #4
    e3f0:	e020      	b.n	e434 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
    e3f2:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    e3f4:	2b79      	cmp	r3, #121	; 0x79
    e3f6:	d01a      	beq.n	e42e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
    e3f8:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    e3fa:	2b6c      	cmp	r3, #108	; 0x6c
    e3fc:	d015      	beq.n	e42a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
    e3fe:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    e400:	2b67      	cmp	r3, #103	; 0x67
    e402:	d010      	beq.n	e426 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
    e404:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    e406:	2b70      	cmp	r3, #112	; 0x70
    e408:	d00b      	beq.n	e422 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
    e40a:	236e      	movs	r3, #110	; 0x6e
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
    e40c:	2b74      	cmp	r3, #116	; 0x74
    e40e:	d006      	beq.n	e41e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
    e410:	236e      	movs	r3, #110	; 0x6e
    e412:	2b76      	cmp	r3, #118	; 0x76
    e414:	d101      	bne.n	e41a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
    e416:	230b      	movs	r3, #11
    e418:	e00c      	b.n	e434 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    e41a:	230c      	movs	r3, #12
    e41c:	e00a      	b.n	e434 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    e41e:	230a      	movs	r3, #10
    e420:	e008      	b.n	e434 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    e422:	2309      	movs	r3, #9
    e424:	e006      	b.n	e434 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    e426:	2308      	movs	r3, #8
    e428:	e004      	b.n	e434 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    e42a:	2307      	movs	r3, #7
    e42c:	e002      	b.n	e434 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    e42e:	2305      	movs	r3, #5
    e430:	e000      	b.n	e434 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
    e432:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
    e434:	687a      	ldr	r2, [r7, #4]
    e436:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
    e43a:	2332      	movs	r3, #50	; 0x32
    e43c:	2b20      	cmp	r3, #32
    e43e:	d008      	beq.n	e452 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
    e440:	2332      	movs	r3, #50	; 0x32
    e442:	3b30      	subs	r3, #48	; 0x30
    e444:	b2db      	uxtb	r3, r3
    e446:	461a      	mov	r2, r3
    e448:	0092      	lsls	r2, r2, #2
    e44a:	4413      	add	r3, r2
    e44c:	005b      	lsls	r3, r3, #1
    e44e:	b2db      	uxtb	r3, r3
    e450:	e000      	b.n	e454 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
    e452:	2300      	movs	r3, #0
    e454:	2235      	movs	r2, #53	; 0x35
    e456:	4413      	add	r3, r2
    e458:	b2db      	uxtb	r3, r3
    e45a:	3b30      	subs	r3, #48	; 0x30
    e45c:	b2da      	uxtb	r2, r3
    e45e:	687b      	ldr	r3, [r7, #4]
    e460:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
    e464:	2331      	movs	r3, #49	; 0x31
    e466:	3b30      	subs	r3, #48	; 0x30
    e468:	b2db      	uxtb	r3, r3
    e46a:	461a      	mov	r2, r3
    e46c:	0092      	lsls	r2, r2, #2
    e46e:	4413      	add	r3, r2
    e470:	005b      	lsls	r3, r3, #1
    e472:	b2db      	uxtb	r3, r3
    e474:	2237      	movs	r2, #55	; 0x37
    e476:	4413      	add	r3, r2
    e478:	b2db      	uxtb	r3, r3
    e47a:	3b30      	subs	r3, #48	; 0x30
    e47c:	b2da      	uxtb	r2, r3
    e47e:	687b      	ldr	r3, [r7, #4]
    e480:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
    e484:	2332      	movs	r3, #50	; 0x32
    e486:	3b30      	subs	r3, #48	; 0x30
    e488:	b2db      	uxtb	r3, r3
    e48a:	461a      	mov	r2, r3
    e48c:	0092      	lsls	r2, r2, #2
    e48e:	4413      	add	r3, r2
    e490:	005b      	lsls	r3, r3, #1
    e492:	b2db      	uxtb	r3, r3
    e494:	2233      	movs	r2, #51	; 0x33
    e496:	4413      	add	r3, r2
    e498:	b2db      	uxtb	r3, r3
    e49a:	3b30      	subs	r3, #48	; 0x30
    e49c:	b2da      	uxtb	r2, r3
    e49e:	687b      	ldr	r3, [r7, #4]
    e4a0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
    e4a4:	2331      	movs	r3, #49	; 0x31
    e4a6:	3b30      	subs	r3, #48	; 0x30
    e4a8:	b2db      	uxtb	r3, r3
    e4aa:	461a      	mov	r2, r3
    e4ac:	0092      	lsls	r2, r2, #2
    e4ae:	4413      	add	r3, r2
    e4b0:	005b      	lsls	r3, r3, #1
    e4b2:	b2db      	uxtb	r3, r3
    e4b4:	2230      	movs	r2, #48	; 0x30
    e4b6:	4413      	add	r3, r2
    e4b8:	b2db      	uxtb	r3, r3
    e4ba:	3b30      	subs	r3, #48	; 0x30
    e4bc:	b2da      	uxtb	r2, r3
    e4be:	687b      	ldr	r3, [r7, #4]
    e4c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		compiled_time=__TIME__;
    e4c4:	687b      	ldr	r3, [r7, #4]
    e4c6:	4a04      	ldr	r2, [pc, #16]	; (e4d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x160>)
    e4c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}
    e4cc:	bf00      	nop
    e4ce:	370c      	adds	r7, #12
    e4d0:	46bd      	mov	sp, r7
    e4d2:	bc80      	pop	{r7}
    e4d4:	4770      	bx	lr
    e4d6:	bf00      	nop
    e4d8:	00010b70 	.word	0x00010b70

0000e4dc <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    e4dc:	b580      	push	{r7, lr}
    e4de:	b082      	sub	sp, #8
    e4e0:	af00      	add	r7, sp, #0
    e4e2:	6078      	str	r0, [r7, #4]
    e4e4:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    e4e6:	687b      	ldr	r3, [r7, #4]
    e4e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    e4ec:	6839      	ldr	r1, [r7, #0]
    e4ee:	4618      	mov	r0, r3
    e4f0:	4b03      	ldr	r3, [pc, #12]	; (e500 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    e4f2:	4798      	blx	r3
    e4f4:	4603      	mov	r3, r0
}
    e4f6:	4618      	mov	r0, r3
    e4f8:	3708      	adds	r7, #8
    e4fa:	46bd      	mov	sp, r7
    e4fc:	bd80      	pop	{r7, pc}
    e4fe:	bf00      	nop
    e500:	000023a9 	.word	0x000023a9

0000e504 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    e504:	b480      	push	{r7}
    e506:	b083      	sub	sp, #12
    e508:	af00      	add	r7, sp, #0
    e50a:	6078      	str	r0, [r7, #4]
    e50c:	460b      	mov	r3, r1
    e50e:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    e510:	887b      	ldrh	r3, [r7, #2]
    e512:	f003 0303 	and.w	r3, r3, #3
    e516:	2b00      	cmp	r3, #0
    e518:	d001      	beq.n	e51e <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    e51a:	2300      	movs	r3, #0
    e51c:	e000      	b.n	e520 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    e51e:	2301      	movs	r3, #1
	}
}
    e520:	4618      	mov	r0, r3
    e522:	370c      	adds	r7, #12
    e524:	46bd      	mov	sp, r7
    e526:	bc80      	pop	{r7}
    e528:	4770      	bx	lr
	...

0000e52c <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
    e52c:	b580      	push	{r7, lr}
    e52e:	b082      	sub	sp, #8
    e530:	af00      	add	r7, sp, #0
    e532:	6078      	str	r0, [r7, #4]
    e534:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
    e536:	687b      	ldr	r3, [r7, #4]
    e538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    e53c:	6839      	ldr	r1, [r7, #0]
    e53e:	4618      	mov	r0, r3
    e540:	4b03      	ldr	r3, [pc, #12]	; (e550 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
    e542:	4798      	blx	r3
    e544:	4603      	mov	r3, r0
}
    e546:	4618      	mov	r0, r3
    e548:	3708      	adds	r7, #8
    e54a:	46bd      	mov	sp, r7
    e54c:	bd80      	pop	{r7, pc}
    e54e:	bf00      	nop
    e550:	00002299 	.word	0x00002299

0000e554 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
    e554:	b580      	push	{r7, lr}
    e556:	b082      	sub	sp, #8
    e558:	af00      	add	r7, sp, #0
    e55a:	6078      	str	r0, [r7, #4]
    e55c:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
    e55e:	687b      	ldr	r3, [r7, #4]
    e560:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    e564:	6839      	ldr	r1, [r7, #0]
    e566:	4618      	mov	r0, r3
    e568:	4b03      	ldr	r3, [pc, #12]	; (e578 <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
    e56a:	4798      	blx	r3
    e56c:	4603      	mov	r3, r0
}
    e56e:	4618      	mov	r0, r3
    e570:	3708      	adds	r7, #8
    e572:	46bd      	mov	sp, r7
    e574:	bd80      	pop	{r7, pc}
    e576:	bf00      	nop
    e578:	00002321 	.word	0x00002321

0000e57c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
    e57c:	b580      	push	{r7, lr}
    e57e:	b084      	sub	sp, #16
    e580:	af00      	add	r7, sp, #0
    e582:	6078      	str	r0, [r7, #4]
    e584:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
    e586:	683a      	ldr	r2, [r7, #0]
    e588:	f107 030c 	add.w	r3, r7, #12
    e58c:	3204      	adds	r2, #4
    e58e:	6810      	ldr	r0, [r2, #0]
    e590:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
    e592:	f107 030c 	add.w	r3, r7, #12
    e596:	4619      	mov	r1, r3
    e598:	6878      	ldr	r0, [r7, #4]
    e59a:	4b0a      	ldr	r3, [pc, #40]	; (e5c4 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
    e59c:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
    e59e:	683a      	ldr	r2, [r7, #0]
    e5a0:	f107 0308 	add.w	r3, r7, #8
    e5a4:	8811      	ldrh	r1, [r2, #0]
    e5a6:	7892      	ldrb	r2, [r2, #2]
    e5a8:	8019      	strh	r1, [r3, #0]
    e5aa:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
    e5ac:	f107 0308 	add.w	r3, r7, #8
    e5b0:	4619      	mov	r1, r3
    e5b2:	6878      	ldr	r0, [r7, #4]
    e5b4:	4b04      	ldr	r3, [pc, #16]	; (e5c8 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
    e5b6:	4798      	blx	r3
    e5b8:	4603      	mov	r3, r0
			
}
    e5ba:	4618      	mov	r0, r3
    e5bc:	3710      	adds	r7, #16
    e5be:	46bd      	mov	sp, r7
    e5c0:	bd80      	pop	{r7, pc}
    e5c2:	bf00      	nop
    e5c4:	0000e555 	.word	0x0000e555
    e5c8:	0000e52d 	.word	0x0000e52d

0000e5cc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    e5cc:	b580      	push	{r7, lr}
    e5ce:	b086      	sub	sp, #24
    e5d0:	af00      	add	r7, sp, #0
    e5d2:	6078      	str	r0, [r7, #4]
    e5d4:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    e5d6:	2300      	movs	r3, #0
    e5d8:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    e5da:	2300      	movs	r3, #0
    e5dc:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    e5de:	683b      	ldr	r3, [r7, #0]
    e5e0:	88db      	ldrh	r3, [r3, #6]
    e5e2:	b2da      	uxtb	r2, r3
    e5e4:	687b      	ldr	r3, [r7, #4]
    e5e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    e5ea:	699b      	ldr	r3, [r3, #24]
    e5ec:	b2db      	uxtb	r3, r3
    e5ee:	1ad3      	subs	r3, r2, r3
    e5f0:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    e5f2:	683b      	ldr	r3, [r7, #0]
    e5f4:	795b      	ldrb	r3, [r3, #5]
    e5f6:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    e5f8:	683b      	ldr	r3, [r7, #0]
    e5fa:	791b      	ldrb	r3, [r3, #4]
    e5fc:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    e5fe:	683b      	ldr	r3, [r7, #0]
    e600:	789b      	ldrb	r3, [r3, #2]
    e602:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    e604:	683b      	ldr	r3, [r7, #0]
    e606:	785b      	ldrb	r3, [r3, #1]
    e608:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    e60a:	683b      	ldr	r3, [r7, #0]
    e60c:	781b      	ldrb	r3, [r3, #0]
    e60e:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    e610:	2300      	movs	r3, #0
    e612:	613b      	str	r3, [r7, #16]
    e614:	7bfa      	ldrb	r2, [r7, #15]
    e616:	693b      	ldr	r3, [r7, #16]
    e618:	429a      	cmp	r2, r3
    e61a:	d91e      	bls.n	e65a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    e61c:	687b      	ldr	r3, [r7, #4]
    e61e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    e622:	699b      	ldr	r3, [r3, #24]
    e624:	b29a      	uxth	r2, r3
    e626:	693b      	ldr	r3, [r7, #16]
    e628:	b29b      	uxth	r3, r3
    e62a:	4413      	add	r3, r2
    e62c:	b29b      	uxth	r3, r3
    e62e:	4619      	mov	r1, r3
    e630:	6878      	ldr	r0, [r7, #4]
    e632:	4b27      	ldr	r3, [pc, #156]	; (e6d0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    e634:	4798      	blx	r3
    e636:	4603      	mov	r3, r0
    e638:	2b00      	cmp	r3, #0
    e63a:	d006      	beq.n	e64a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    e63c:	697b      	ldr	r3, [r7, #20]
    e63e:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    e642:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    e646:	617b      	str	r3, [r7, #20]
    e648:	e003      	b.n	e652 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    e64a:	697a      	ldr	r2, [r7, #20]
    e64c:	4b21      	ldr	r3, [pc, #132]	; (e6d4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    e64e:	4413      	add	r3, r2
    e650:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    e652:	693b      	ldr	r3, [r7, #16]
    e654:	3301      	adds	r3, #1
    e656:	613b      	str	r3, [r7, #16]
    e658:	e7dc      	b.n	e614 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    e65a:	2301      	movs	r3, #1
    e65c:	613b      	str	r3, [r7, #16]
    e65e:	7bba      	ldrb	r2, [r7, #14]
    e660:	693b      	ldr	r3, [r7, #16]
    e662:	429a      	cmp	r2, r3
    e664:	d910      	bls.n	e688 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    e666:	683b      	ldr	r3, [r7, #0]
    e668:	88db      	ldrh	r3, [r3, #6]
    e66a:	4619      	mov	r1, r3
    e66c:	693b      	ldr	r3, [r7, #16]
    e66e:	b2db      	uxtb	r3, r3
    e670:	461a      	mov	r2, r3
    e672:	6878      	ldr	r0, [r7, #4]
    e674:	4b18      	ldr	r3, [pc, #96]	; (e6d8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    e676:	4798      	blx	r3
    e678:	4602      	mov	r2, r0
    e67a:	697b      	ldr	r3, [r7, #20]
    e67c:	4413      	add	r3, r2
    e67e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    e680:	693b      	ldr	r3, [r7, #16]
    e682:	3301      	adds	r3, #1
    e684:	613b      	str	r3, [r7, #16]
    e686:	e7ea      	b.n	e65e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    e688:	7b7b      	ldrb	r3, [r7, #13]
    e68a:	3b01      	subs	r3, #1
    e68c:	4a13      	ldr	r2, [pc, #76]	; (e6dc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    e68e:	fb02 f303 	mul.w	r3, r2, r3
    e692:	461a      	mov	r2, r3
    e694:	697b      	ldr	r3, [r7, #20]
    e696:	4413      	add	r3, r2
    e698:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    e69a:	7b3b      	ldrb	r3, [r7, #12]
    e69c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    e6a0:	fb02 f303 	mul.w	r3, r2, r3
    e6a4:	461a      	mov	r2, r3
    e6a6:	697b      	ldr	r3, [r7, #20]
    e6a8:	4413      	add	r3, r2
    e6aa:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    e6ac:	7afa      	ldrb	r2, [r7, #11]
    e6ae:	4613      	mov	r3, r2
    e6b0:	011b      	lsls	r3, r3, #4
    e6b2:	1a9b      	subs	r3, r3, r2
    e6b4:	009b      	lsls	r3, r3, #2
    e6b6:	461a      	mov	r2, r3
    e6b8:	697b      	ldr	r3, [r7, #20]
    e6ba:	4413      	add	r3, r2
    e6bc:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    e6be:	7abb      	ldrb	r3, [r7, #10]
    e6c0:	697a      	ldr	r2, [r7, #20]
    e6c2:	4413      	add	r3, r2
    e6c4:	617b      	str	r3, [r7, #20]

	return tmp;
    e6c6:	697b      	ldr	r3, [r7, #20]
}
    e6c8:	4618      	mov	r0, r3
    e6ca:	3718      	adds	r7, #24
    e6cc:	46bd      	mov	sp, r7
    e6ce:	bd80      	pop	{r7, pc}
    e6d0:	0000e505 	.word	0x0000e505
    e6d4:	01e13380 	.word	0x01e13380
    e6d8:	0000e6e1 	.word	0x0000e6e1
    e6dc:	00015180 	.word	0x00015180

0000e6e0 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    e6e0:	b580      	push	{r7, lr}
    e6e2:	b086      	sub	sp, #24
    e6e4:	af00      	add	r7, sp, #0
    e6e6:	60f8      	str	r0, [r7, #12]
    e6e8:	60b9      	str	r1, [r7, #8]
    e6ea:	4613      	mov	r3, r2
    e6ec:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    e6ee:	2300      	movs	r3, #0
    e6f0:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    e6f2:	68bb      	ldr	r3, [r7, #8]
    e6f4:	b29b      	uxth	r3, r3
    e6f6:	4619      	mov	r1, r3
    e6f8:	68f8      	ldr	r0, [r7, #12]
    e6fa:	4b2f      	ldr	r3, [pc, #188]	; (e7b8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    e6fc:	4798      	blx	r3
    e6fe:	4603      	mov	r3, r0
    e700:	2b00      	cmp	r3, #0
    e702:	d028      	beq.n	e756 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    e704:	79fb      	ldrb	r3, [r7, #7]
    e706:	3b01      	subs	r3, #1
    e708:	2b0b      	cmp	r3, #11
    e70a:	d84c      	bhi.n	e7a6 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    e70c:	a201      	add	r2, pc, #4	; (adr r2, e714 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    e70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e712:	bf00      	nop
    e714:	0000e745 	.word	0x0000e745
    e718:	0000e74b 	.word	0x0000e74b
    e71c:	0000e745 	.word	0x0000e745
    e720:	0000e751 	.word	0x0000e751
    e724:	0000e745 	.word	0x0000e745
    e728:	0000e751 	.word	0x0000e751
    e72c:	0000e745 	.word	0x0000e745
    e730:	0000e745 	.word	0x0000e745
    e734:	0000e751 	.word	0x0000e751
    e738:	0000e745 	.word	0x0000e745
    e73c:	0000e751 	.word	0x0000e751
    e740:	0000e745 	.word	0x0000e745
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    e744:	4b1d      	ldr	r3, [pc, #116]	; (e7bc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    e746:	617b      	str	r3, [r7, #20]
			break;
    e748:	e030      	b.n	e7ac <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    e74a:	4b1d      	ldr	r3, [pc, #116]	; (e7c0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    e74c:	617b      	str	r3, [r7, #20]
			break;
    e74e:	e02d      	b.n	e7ac <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    e750:	4b1c      	ldr	r3, [pc, #112]	; (e7c4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    e752:	617b      	str	r3, [r7, #20]
			break;
    e754:	e02a      	b.n	e7ac <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    e756:	79fb      	ldrb	r3, [r7, #7]
    e758:	3b01      	subs	r3, #1
    e75a:	2b0b      	cmp	r3, #11
    e75c:	d825      	bhi.n	e7aa <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    e75e:	a201      	add	r2, pc, #4	; (adr r2, e764 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    e760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e764:	0000e795 	.word	0x0000e795
    e768:	0000e79b 	.word	0x0000e79b
    e76c:	0000e795 	.word	0x0000e795
    e770:	0000e7a1 	.word	0x0000e7a1
    e774:	0000e795 	.word	0x0000e795
    e778:	0000e7a1 	.word	0x0000e7a1
    e77c:	0000e795 	.word	0x0000e795
    e780:	0000e795 	.word	0x0000e795
    e784:	0000e7a1 	.word	0x0000e7a1
    e788:	0000e795 	.word	0x0000e795
    e78c:	0000e7a1 	.word	0x0000e7a1
    e790:	0000e795 	.word	0x0000e795
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    e794:	4b09      	ldr	r3, [pc, #36]	; (e7bc <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    e796:	617b      	str	r3, [r7, #20]
			break;
    e798:	e008      	b.n	e7ac <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    e79a:	4b0b      	ldr	r3, [pc, #44]	; (e7c8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    e79c:	617b      	str	r3, [r7, #20]
			break;
    e79e:	e005      	b.n	e7ac <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    e7a0:	4b08      	ldr	r3, [pc, #32]	; (e7c4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    e7a2:	617b      	str	r3, [r7, #20]
			break;
    e7a4:	e002      	b.n	e7ac <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    e7a6:	bf00      	nop
    e7a8:	e000      	b.n	e7ac <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    e7aa:	bf00      	nop
		}
	}

	return sec_in_month;
    e7ac:	697b      	ldr	r3, [r7, #20]
}
    e7ae:	4618      	mov	r0, r3
    e7b0:	3718      	adds	r7, #24
    e7b2:	46bd      	mov	sp, r7
    e7b4:	bd80      	pop	{r7, pc}
    e7b6:	bf00      	nop
    e7b8:	0000e505 	.word	0x0000e505
    e7bc:	0028de80 	.word	0x0028de80
    e7c0:	00263b80 	.word	0x00263b80
    e7c4:	00278d00 	.word	0x00278d00
    e7c8:	0024ea00 	.word	0x0024ea00

0000e7cc <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

    e7cc:	b580      	push	{r7, lr}
    e7ce:	b082      	sub	sp, #8
    e7d0:	af00      	add	r7, sp, #0
    e7d2:	6078      	str	r0, [r7, #4]
    e7d4:	6039      	str	r1, [r7, #0]
    e7d6:	687b      	ldr	r3, [r7, #4]
    e7d8:	2b01      	cmp	r3, #1
    e7da:	d10d      	bne.n	e7f8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e7dc:	683b      	ldr	r3, [r7, #0]
    e7de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e7e2:	4293      	cmp	r3, r2
    e7e4:	d108      	bne.n	e7f8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e7e6:	4906      	ldr	r1, [pc, #24]	; (e800 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e7e8:	4806      	ldr	r0, [pc, #24]	; (e804 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e7ea:	4b07      	ldr	r3, [pc, #28]	; (e808 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e7ec:	4798      	blx	r3
    e7ee:	4a07      	ldr	r2, [pc, #28]	; (e80c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e7f0:	4907      	ldr	r1, [pc, #28]	; (e810 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e7f2:	4804      	ldr	r0, [pc, #16]	; (e804 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e7f4:	4b07      	ldr	r3, [pc, #28]	; (e814 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e7f6:	4798      	blx	r3
    e7f8:	bf00      	nop
    e7fa:	3708      	adds	r7, #8
    e7fc:	46bd      	mov	sp, r7
    e7fe:	bd80      	pop	{r7, pc}
    e800:	2000a780 	.word	0x2000a780
    e804:	20002938 	.word	0x20002938
    e808:	0000e115 	.word	0x0000e115
    e80c:	20000000 	.word	0x20000000
    e810:	0000e151 	.word	0x0000e151
    e814:	00010289 	.word	0x00010289

0000e818 <_GLOBAL__sub_I_ptrCalendarClass>:
    e818:	b580      	push	{r7, lr}
    e81a:	af00      	add	r7, sp, #0
    e81c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e820:	2001      	movs	r0, #1
    e822:	4b01      	ldr	r3, [pc, #4]	; (e828 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    e824:	4798      	blx	r3
    e826:	bd80      	pop	{r7, pc}
    e828:	0000e7cd 	.word	0x0000e7cd

0000e82c <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
    e82c:	b480      	push	{r7}
    e82e:	b083      	sub	sp, #12
    e830:	af00      	add	r7, sp, #0
    e832:	6078      	str	r0, [r7, #4]
    e834:	4a04      	ldr	r2, [pc, #16]	; (e848 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    e836:	687b      	ldr	r3, [r7, #4]
    e838:	601a      	str	r2, [r3, #0]
{
} //~D
    e83a:	687b      	ldr	r3, [r7, #4]
    e83c:	4618      	mov	r0, r3
    e83e:	370c      	adds	r7, #12
    e840:	46bd      	mov	sp, r7
    e842:	bc80      	pop	{r7}
    e844:	4770      	bx	lr
    e846:	bf00      	nop
    e848:	00010b94 	.word	0x00010b94

0000e84c <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    e84c:	b480      	push	{r7}
    e84e:	b083      	sub	sp, #12
    e850:	af00      	add	r7, sp, #0
    e852:	6078      	str	r0, [r7, #4]
    e854:	4a04      	ldr	r2, [pc, #16]	; (e868 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    e856:	687b      	ldr	r3, [r7, #4]
    e858:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    e85a:	687b      	ldr	r3, [r7, #4]
    e85c:	4618      	mov	r0, r3
    e85e:	370c      	adds	r7, #12
    e860:	46bd      	mov	sp, r7
    e862:	bc80      	pop	{r7}
    e864:	4770      	bx	lr
    e866:	bf00      	nop
    e868:	00010b94 	.word	0x00010b94

0000e86c <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    e86c:	b480      	push	{r7}
    e86e:	b083      	sub	sp, #12
    e870:	af00      	add	r7, sp, #0
    e872:	6078      	str	r0, [r7, #4]
    e874:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e876:	687b      	ldr	r3, [r7, #4]
    e878:	683a      	ldr	r2, [r7, #0]
    e87a:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    e87c:	687b      	ldr	r3, [r7, #4]
    e87e:	68db      	ldr	r3, [r3, #12]
    e880:	2200      	movs	r2, #0
    e882:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    e884:	4a06      	ldr	r2, [pc, #24]	; (e8a0 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    e886:	687b      	ldr	r3, [r7, #4]
    e888:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e88a:	687b      	ldr	r3, [r7, #4]
    e88c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e890:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    e892:	687b      	ldr	r3, [r7, #4]
    e894:	4618      	mov	r0, r3
    e896:	370c      	adds	r7, #12
    e898:	46bd      	mov	sp, r7
    e89a:	bc80      	pop	{r7}
    e89c:	4770      	bx	lr
    e89e:	bf00      	nop
    e8a0:	20002ae8 	.word	0x20002ae8

0000e8a4 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    e8a4:	b480      	push	{r7}
    e8a6:	b083      	sub	sp, #12
    e8a8:	af00      	add	r7, sp, #0
    e8aa:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e8ac:	687b      	ldr	r3, [r7, #4]
    e8ae:	2200      	movs	r2, #0
    e8b0:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e8b2:	687b      	ldr	r3, [r7, #4]
    e8b4:	4618      	mov	r0, r3
    e8b6:	370c      	adds	r7, #12
    e8b8:	46bd      	mov	sp, r7
    e8ba:	bc80      	pop	{r7}
    e8bc:	4770      	bx	lr
	...

0000e8c0 <_ZL9InitArrayv>:


static void InitArray(){
    e8c0:	b480      	push	{r7}
    e8c2:	b083      	sub	sp, #12
    e8c4:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    e8c6:	2301      	movs	r3, #1
    e8c8:	607b      	str	r3, [r7, #4]
    e8ca:	687b      	ldr	r3, [r7, #4]
    e8cc:	2b1f      	cmp	r3, #31
    e8ce:	dc34      	bgt.n	e93a <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    e8d0:	491e      	ldr	r1, [pc, #120]	; (e94c <_ZL9InitArrayv+0x8c>)
    e8d2:	687a      	ldr	r2, [r7, #4]
    e8d4:	4613      	mov	r3, r2
    e8d6:	009b      	lsls	r3, r3, #2
    e8d8:	4413      	add	r3, r2
    e8da:	009b      	lsls	r3, r3, #2
    e8dc:	440b      	add	r3, r1
    e8de:	2200      	movs	r2, #0
    e8e0:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    e8e2:	491a      	ldr	r1, [pc, #104]	; (e94c <_ZL9InitArrayv+0x8c>)
    e8e4:	687a      	ldr	r2, [r7, #4]
    e8e6:	4613      	mov	r3, r2
    e8e8:	009b      	lsls	r3, r3, #2
    e8ea:	4413      	add	r3, r2
    e8ec:	009b      	lsls	r3, r3, #2
    e8ee:	440b      	add	r3, r1
    e8f0:	330c      	adds	r3, #12
    e8f2:	2200      	movs	r2, #0
    e8f4:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    e8f6:	687b      	ldr	r3, [r7, #4]
    e8f8:	1e5a      	subs	r2, r3, #1
    e8fa:	6879      	ldr	r1, [r7, #4]
    e8fc:	460b      	mov	r3, r1
    e8fe:	009b      	lsls	r3, r3, #2
    e900:	440b      	add	r3, r1
    e902:	009b      	lsls	r3, r3, #2
    e904:	4911      	ldr	r1, [pc, #68]	; (e94c <_ZL9InitArrayv+0x8c>)
    e906:	4419      	add	r1, r3
    e908:	4810      	ldr	r0, [pc, #64]	; (e94c <_ZL9InitArrayv+0x8c>)
    e90a:	4613      	mov	r3, r2
    e90c:	009b      	lsls	r3, r3, #2
    e90e:	4413      	add	r3, r2
    e910:	009b      	lsls	r3, r3, #2
    e912:	4403      	add	r3, r0
    e914:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    e916:	4a0e      	ldr	r2, [pc, #56]	; (e950 <_ZL9InitArrayv+0x90>)
    e918:	687b      	ldr	r3, [r7, #4]
    e91a:	2100      	movs	r1, #0
    e91c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    e920:	687b      	ldr	r3, [r7, #4]
    e922:	3b01      	subs	r3, #1
    e924:	687a      	ldr	r2, [r7, #4]
    e926:	0092      	lsls	r2, r2, #2
    e928:	4909      	ldr	r1, [pc, #36]	; (e950 <_ZL9InitArrayv+0x90>)
    e92a:	440a      	add	r2, r1
    e92c:	4908      	ldr	r1, [pc, #32]	; (e950 <_ZL9InitArrayv+0x90>)
    e92e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    e932:	687b      	ldr	r3, [r7, #4]
    e934:	3301      	adds	r3, #1
    e936:	607b      	str	r3, [r7, #4]
    e938:	e7c7      	b.n	e8ca <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    e93a:	4b06      	ldr	r3, [pc, #24]	; (e954 <_ZL9InitArrayv+0x94>)
    e93c:	2201      	movs	r2, #1
    e93e:	701a      	strb	r2, [r3, #0]
		
}
    e940:	bf00      	nop
    e942:	370c      	adds	r7, #12
    e944:	46bd      	mov	sp, r7
    e946:	bc80      	pop	{r7}
    e948:	4770      	bx	lr
    e94a:	bf00      	nop
    e94c:	20002aec 	.word	0x20002aec
    e950:	20002d6c 	.word	0x20002d6c
    e954:	20002dec 	.word	0x20002dec

0000e958 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    e958:	b580      	push	{r7, lr}
    e95a:	b082      	sub	sp, #8
    e95c:	af00      	add	r7, sp, #0
    e95e:	6078      	str	r0, [r7, #4]
	ticks=0;
    e960:	687b      	ldr	r3, [r7, #4]
    e962:	2200      	movs	r2, #0
    e964:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    e966:	4b0d      	ldr	r3, [pc, #52]	; (e99c <_ZN11Timer_Class4InitEv+0x44>)
    e968:	781b      	ldrb	r3, [r3, #0]
    e96a:	f083 0301 	eor.w	r3, r3, #1
    e96e:	b2db      	uxtb	r3, r3
    e970:	2b00      	cmp	r3, #0
    e972:	d001      	beq.n	e978 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    e974:	4b0a      	ldr	r3, [pc, #40]	; (e9a0 <_ZN11Timer_Class4InitEv+0x48>)
    e976:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    e978:	6878      	ldr	r0, [r7, #4]
    e97a:	4b0a      	ldr	r3, [pc, #40]	; (e9a4 <_ZN11Timer_Class4InitEv+0x4c>)
    e97c:	4798      	blx	r3
    e97e:	4603      	mov	r3, r0
    e980:	2b00      	cmp	r3, #0
    e982:	bf0c      	ite	eq
    e984:	2301      	moveq	r3, #1
    e986:	2300      	movne	r3, #0
    e988:	b2da      	uxtb	r2, r3
    e98a:	687b      	ldr	r3, [r7, #4]
    e98c:	709a      	strb	r2, [r3, #2]
	return isOK;
    e98e:	687b      	ldr	r3, [r7, #4]
    e990:	789b      	ldrb	r3, [r3, #2]
    e992:	b2db      	uxtb	r3, r3
}
    e994:	4618      	mov	r0, r3
    e996:	3708      	adds	r7, #8
    e998:	46bd      	mov	sp, r7
    e99a:	bd80      	pop	{r7, pc}
    e99c:	20002dec 	.word	0x20002dec
    e9a0:	0000e8c1 	.word	0x0000e8c1
    e9a4:	0000e9a9 	.word	0x0000e9a9

0000e9a8 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    e9a8:	b580      	push	{r7, lr}
    e9aa:	b084      	sub	sp, #16
    e9ac:	af00      	add	r7, sp, #0
    e9ae:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e9b0:	687b      	ldr	r3, [r7, #4]
    e9b2:	68db      	ldr	r3, [r3, #12]
    e9b4:	4618      	mov	r0, r3
    e9b6:	4b04      	ldr	r3, [pc, #16]	; (e9c8 <_ZN11Timer_Class5StartEv+0x20>)
    e9b8:	4798      	blx	r3
    e9ba:	60f8      	str	r0, [r7, #12]
	return status;
    e9bc:	68fb      	ldr	r3, [r7, #12]
	
}
    e9be:	4618      	mov	r0, r3
    e9c0:	3710      	adds	r7, #16
    e9c2:	46bd      	mov	sp, r7
    e9c4:	bd80      	pop	{r7, pc}
    e9c6:	bf00      	nop
    e9c8:	00002d69 	.word	0x00002d69

0000e9cc <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    e9cc:	b580      	push	{r7, lr}
    e9ce:	b084      	sub	sp, #16
    e9d0:	af00      	add	r7, sp, #0
    e9d2:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e9d4:	687b      	ldr	r3, [r7, #4]
    e9d6:	68db      	ldr	r3, [r3, #12]
    e9d8:	4618      	mov	r0, r3
    e9da:	4b05      	ldr	r3, [pc, #20]	; (e9f0 <_ZN11Timer_Class4StopEv+0x24>)
    e9dc:	4798      	blx	r3
    e9de:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e9e0:	687b      	ldr	r3, [r7, #4]
    e9e2:	2200      	movs	r2, #0
    e9e4:	705a      	strb	r2, [r3, #1]
	return status;
    e9e6:	68fb      	ldr	r3, [r7, #12]
}
    e9e8:	4618      	mov	r0, r3
    e9ea:	3710      	adds	r7, #16
    e9ec:	46bd      	mov	sp, r7
    e9ee:	bd80      	pop	{r7, pc}
    e9f0:	00002dd1 	.word	0x00002dd1

0000e9f4 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e9f4:	b580      	push	{r7, lr}
    e9f6:	b086      	sub	sp, #24
    e9f8:	af00      	add	r7, sp, #0
    e9fa:	60f8      	str	r0, [r7, #12]
    e9fc:	60b9      	str	r1, [r7, #8]
    e9fe:	607a      	str	r2, [r7, #4]
    ea00:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    ea02:	68b9      	ldr	r1, [r7, #8]
    ea04:	68f8      	ldr	r0, [r7, #12]
    ea06:	4b0e      	ldr	r3, [pc, #56]	; (ea40 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    ea08:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    ea0a:	68fb      	ldr	r3, [r7, #12]
    ea0c:	699b      	ldr	r3, [r3, #24]
    ea0e:	687a      	ldr	r2, [r7, #4]
    ea10:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    ea12:	68fb      	ldr	r3, [r7, #12]
    ea14:	699b      	ldr	r3, [r3, #24]
    ea16:	68ba      	ldr	r2, [r7, #8]
    ea18:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    ea1a:	68fb      	ldr	r3, [r7, #12]
    ea1c:	699b      	ldr	r3, [r3, #24]
    ea1e:	78fa      	ldrb	r2, [r7, #3]
    ea20:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    ea22:	68fb      	ldr	r3, [r7, #12]
    ea24:	68da      	ldr	r2, [r3, #12]
    ea26:	68fb      	ldr	r3, [r7, #12]
    ea28:	699b      	ldr	r3, [r3, #24]
    ea2a:	4619      	mov	r1, r3
    ea2c:	4610      	mov	r0, r2
    ea2e:	4b05      	ldr	r3, [pc, #20]	; (ea44 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    ea30:	4798      	blx	r3
    ea32:	6178      	str	r0, [r7, #20]
	
	return status;
    ea34:	697b      	ldr	r3, [r7, #20]
}
    ea36:	4618      	mov	r0, r3
    ea38:	3718      	adds	r7, #24
    ea3a:	46bd      	mov	sp, r7
    ea3c:	bd80      	pop	{r7, pc}
    ea3e:	bf00      	nop
    ea40:	0000eb5d 	.word	0x0000eb5d
    ea44:	00002e3d 	.word	0x00002e3d

0000ea48 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    ea48:	b580      	push	{r7, lr}
    ea4a:	b082      	sub	sp, #8
    ea4c:	af00      	add	r7, sp, #0
    ea4e:	6078      	str	r0, [r7, #4]
    ea50:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    ea52:	6839      	ldr	r1, [r7, #0]
    ea54:	6878      	ldr	r0, [r7, #4]
    ea56:	4b0f      	ldr	r3, [pc, #60]	; (ea94 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    ea58:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    ea5a:	687b      	ldr	r3, [r7, #4]
    ea5c:	68db      	ldr	r3, [r3, #12]
    ea5e:	f103 0218 	add.w	r2, r3, #24
    ea62:	687b      	ldr	r3, [r7, #4]
    ea64:	699b      	ldr	r3, [r3, #24]
    ea66:	4619      	mov	r1, r3
    ea68:	4610      	mov	r0, r2
    ea6a:	4b0b      	ldr	r3, [pc, #44]	; (ea98 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    ea6c:	4798      	blx	r3
    ea6e:	4603      	mov	r3, r0
    ea70:	2b00      	cmp	r3, #0
    ea72:	d007      	beq.n	ea84 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    ea74:	687b      	ldr	r3, [r7, #4]
    ea76:	68da      	ldr	r2, [r3, #12]
    ea78:	687b      	ldr	r3, [r7, #4]
    ea7a:	699b      	ldr	r3, [r3, #24]
    ea7c:	4619      	mov	r1, r3
    ea7e:	4610      	mov	r0, r2
    ea80:	4b06      	ldr	r3, [pc, #24]	; (ea9c <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    ea82:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    ea84:	687b      	ldr	r3, [r7, #4]
    ea86:	699b      	ldr	r3, [r3, #24]
    ea88:	2200      	movs	r2, #0
    ea8a:	60da      	str	r2, [r3, #12]
}
    ea8c:	bf00      	nop
    ea8e:	3708      	adds	r7, #8
    ea90:	46bd      	mov	sp, r7
    ea92:	bd80      	pop	{r7, pc}
    ea94:	0000ebdd 	.word	0x0000ebdd
    ea98:	00003b29 	.word	0x00003b29
    ea9c:	00002f41 	.word	0x00002f41

0000eaa0 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    eaa0:	b590      	push	{r4, r7, lr}
    eaa2:	b087      	sub	sp, #28
    eaa4:	af00      	add	r7, sp, #0
    eaa6:	60f8      	str	r0, [r7, #12]
    eaa8:	60b9      	str	r1, [r7, #8]
    eaaa:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    eaac:	2300      	movs	r3, #0
    eaae:	687a      	ldr	r2, [r7, #4]
    eab0:	68b9      	ldr	r1, [r7, #8]
    eab2:	68f8      	ldr	r0, [r7, #12]
    eab4:	4c0c      	ldr	r4, [pc, #48]	; (eae8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    eab6:	47a0      	blx	r4
    eab8:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    eaba:	68fb      	ldr	r3, [r7, #12]
    eabc:	68db      	ldr	r3, [r3, #12]
    eabe:	681b      	ldr	r3, [r3, #0]
    eac0:	699b      	ldr	r3, [r3, #24]
    eac2:	68fa      	ldr	r2, [r7, #12]
    eac4:	68d2      	ldr	r2, [r2, #12]
    eac6:	3204      	adds	r2, #4
    eac8:	4610      	mov	r0, r2
    eaca:	4798      	blx	r3
    eacc:	4603      	mov	r3, r0
    eace:	2b00      	cmp	r3, #0
    ead0:	d105      	bne.n	eade <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    ead2:	68fb      	ldr	r3, [r7, #12]
    ead4:	68db      	ldr	r3, [r3, #12]
    ead6:	4618      	mov	r0, r3
    ead8:	4b04      	ldr	r3, [pc, #16]	; (eaec <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    eada:	4798      	blx	r3
    eadc:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    eade:	697b      	ldr	r3, [r7, #20]
}
    eae0:	4618      	mov	r0, r3
    eae2:	371c      	adds	r7, #28
    eae4:	46bd      	mov	sp, r7
    eae6:	bd90      	pop	{r4, r7, pc}
    eae8:	0000e9f5 	.word	0x0000e9f5
    eaec:	00002d69 	.word	0x00002d69

0000eaf0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    eaf0:	b480      	push	{r7}
    eaf2:	b085      	sub	sp, #20
    eaf4:	af00      	add	r7, sp, #0
    eaf6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    eaf8:	2300      	movs	r3, #0
    eafa:	73fb      	strb	r3, [r7, #15]
    eafc:	7bfb      	ldrb	r3, [r7, #15]
    eafe:	2b1f      	cmp	r3, #31
    eb00:	dc23      	bgt.n	eb4a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    eb02:	687b      	ldr	r3, [r7, #4]
    eb04:	7f1a      	ldrb	r2, [r3, #28]
    eb06:	7bfb      	ldrb	r3, [r7, #15]
    eb08:	4413      	add	r3, r2
    eb0a:	b2db      	uxtb	r3, r3
    eb0c:	f003 031f 	and.w	r3, r3, #31
    eb10:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    eb12:	7bba      	ldrb	r2, [r7, #14]
    eb14:	4910      	ldr	r1, [pc, #64]	; (eb58 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    eb16:	4613      	mov	r3, r2
    eb18:	009b      	lsls	r3, r3, #2
    eb1a:	4413      	add	r3, r2
    eb1c:	009b      	lsls	r3, r3, #2
    eb1e:	440b      	add	r3, r1
    eb20:	330c      	adds	r3, #12
    eb22:	681b      	ldr	r3, [r3, #0]
    eb24:	2b00      	cmp	r3, #0
    eb26:	d10c      	bne.n	eb42 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    eb28:	7bba      	ldrb	r2, [r7, #14]
    eb2a:	4613      	mov	r3, r2
    eb2c:	009b      	lsls	r3, r3, #2
    eb2e:	4413      	add	r3, r2
    eb30:	009b      	lsls	r3, r3, #2
    eb32:	4a09      	ldr	r2, [pc, #36]	; (eb58 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    eb34:	441a      	add	r2, r3
    eb36:	687b      	ldr	r3, [r7, #4]
    eb38:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    eb3a:	687b      	ldr	r3, [r7, #4]
    eb3c:	7bba      	ldrb	r2, [r7, #14]
    eb3e:	771a      	strb	r2, [r3, #28]
			return;
    eb40:	e006      	b.n	eb50 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    eb42:	7bfb      	ldrb	r3, [r7, #15]
    eb44:	3301      	adds	r3, #1
    eb46:	73fb      	strb	r3, [r7, #15]
    eb48:	e7d8      	b.n	eafc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    eb4a:	687b      	ldr	r3, [r7, #4]
    eb4c:	4a02      	ldr	r2, [pc, #8]	; (eb58 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    eb4e:	619a      	str	r2, [r3, #24]

}
    eb50:	3714      	adds	r7, #20
    eb52:	46bd      	mov	sp, r7
    eb54:	bc80      	pop	{r7}
    eb56:	4770      	bx	lr
    eb58:	20002aec 	.word	0x20002aec

0000eb5c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    eb5c:	b580      	push	{r7, lr}
    eb5e:	b084      	sub	sp, #16
    eb60:	af00      	add	r7, sp, #0
    eb62:	6078      	str	r0, [r7, #4]
    eb64:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    eb66:	2300      	movs	r3, #0
    eb68:	73fb      	strb	r3, [r7, #15]
    eb6a:	7bfb      	ldrb	r3, [r7, #15]
    eb6c:	2b1f      	cmp	r3, #31
    eb6e:	dc28      	bgt.n	ebc2 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    eb70:	687b      	ldr	r3, [r7, #4]
    eb72:	7f1a      	ldrb	r2, [r3, #28]
    eb74:	7bfb      	ldrb	r3, [r7, #15]
    eb76:	4413      	add	r3, r2
    eb78:	b2db      	uxtb	r3, r3
    eb7a:	f003 031f 	and.w	r3, r3, #31
    eb7e:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    eb80:	7bba      	ldrb	r2, [r7, #14]
    eb82:	4913      	ldr	r1, [pc, #76]	; (ebd0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    eb84:	4613      	mov	r3, r2
    eb86:	009b      	lsls	r3, r3, #2
    eb88:	4413      	add	r3, r2
    eb8a:	009b      	lsls	r3, r3, #2
    eb8c:	440b      	add	r3, r1
    eb8e:	330c      	adds	r3, #12
    eb90:	681a      	ldr	r2, [r3, #0]
    eb92:	683b      	ldr	r3, [r7, #0]
    eb94:	429a      	cmp	r2, r3
    eb96:	d110      	bne.n	ebba <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    eb98:	6839      	ldr	r1, [r7, #0]
    eb9a:	6878      	ldr	r0, [r7, #4]
    eb9c:	4b0d      	ldr	r3, [pc, #52]	; (ebd4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    eb9e:	4798      	blx	r3
			task=&taskArray[j];
    eba0:	7bba      	ldrb	r2, [r7, #14]
    eba2:	4613      	mov	r3, r2
    eba4:	009b      	lsls	r3, r3, #2
    eba6:	4413      	add	r3, r2
    eba8:	009b      	lsls	r3, r3, #2
    ebaa:	4a09      	ldr	r2, [pc, #36]	; (ebd0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    ebac:	441a      	add	r2, r3
    ebae:	687b      	ldr	r3, [r7, #4]
    ebb0:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    ebb2:	687b      	ldr	r3, [r7, #4]
    ebb4:	7bba      	ldrb	r2, [r7, #14]
    ebb6:	771a      	strb	r2, [r3, #28]
			return;
    ebb8:	e006      	b.n	ebc8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ebba:	7bfb      	ldrb	r3, [r7, #15]
    ebbc:	3301      	adds	r3, #1
    ebbe:	73fb      	strb	r3, [r7, #15]
    ebc0:	e7d3      	b.n	eb6a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    ebc2:	6878      	ldr	r0, [r7, #4]
    ebc4:	4b04      	ldr	r3, [pc, #16]	; (ebd8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    ebc6:	4798      	blx	r3
	//task=&taskArray[0];

}
    ebc8:	3710      	adds	r7, #16
    ebca:	46bd      	mov	sp, r7
    ebcc:	bd80      	pop	{r7, pc}
    ebce:	bf00      	nop
    ebd0:	20002aec 	.word	0x20002aec
    ebd4:	0000ea49 	.word	0x0000ea49
    ebd8:	0000eaf1 	.word	0x0000eaf1

0000ebdc <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    ebdc:	b480      	push	{r7}
    ebde:	b085      	sub	sp, #20
    ebe0:	af00      	add	r7, sp, #0
    ebe2:	6078      	str	r0, [r7, #4]
    ebe4:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ebe6:	2300      	movs	r3, #0
    ebe8:	73fb      	strb	r3, [r7, #15]
    ebea:	7bfb      	ldrb	r3, [r7, #15]
    ebec:	2b1f      	cmp	r3, #31
    ebee:	dc19      	bgt.n	ec24 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    ebf0:	7bfa      	ldrb	r2, [r7, #15]
    ebf2:	490f      	ldr	r1, [pc, #60]	; (ec30 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    ebf4:	4613      	mov	r3, r2
    ebf6:	009b      	lsls	r3, r3, #2
    ebf8:	4413      	add	r3, r2
    ebfa:	009b      	lsls	r3, r3, #2
    ebfc:	440b      	add	r3, r1
    ebfe:	330c      	adds	r3, #12
    ec00:	681a      	ldr	r2, [r3, #0]
    ec02:	683b      	ldr	r3, [r7, #0]
    ec04:	429a      	cmp	r2, r3
    ec06:	d109      	bne.n	ec1c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    ec08:	7bfa      	ldrb	r2, [r7, #15]
    ec0a:	4613      	mov	r3, r2
    ec0c:	009b      	lsls	r3, r3, #2
    ec0e:	4413      	add	r3, r2
    ec10:	009b      	lsls	r3, r3, #2
    ec12:	4a07      	ldr	r2, [pc, #28]	; (ec30 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    ec14:	441a      	add	r2, r3
    ec16:	687b      	ldr	r3, [r7, #4]
    ec18:	619a      	str	r2, [r3, #24]
			return;
    ec1a:	e004      	b.n	ec26 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    ec1c:	7bfb      	ldrb	r3, [r7, #15]
    ec1e:	3301      	adds	r3, #1
    ec20:	73fb      	strb	r3, [r7, #15]
    ec22:	e7e2      	b.n	ebea <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    ec24:	bf00      	nop
}
    ec26:	3714      	adds	r7, #20
    ec28:	46bd      	mov	sp, r7
    ec2a:	bc80      	pop	{r7}
    ec2c:	4770      	bx	lr
    ec2e:	bf00      	nop
    ec30:	20002aec 	.word	0x20002aec

0000ec34 <_Z41__static_initialization_and_destruction_0ii>:
    ec34:	b580      	push	{r7, lr}
    ec36:	b082      	sub	sp, #8
    ec38:	af00      	add	r7, sp, #0
    ec3a:	6078      	str	r0, [r7, #4]
    ec3c:	6039      	str	r1, [r7, #0]
    ec3e:	687b      	ldr	r3, [r7, #4]
    ec40:	2b01      	cmp	r3, #1
    ec42:	d14c      	bne.n	ecde <_Z41__static_initialization_and_destruction_0ii+0xaa>
    ec44:	683b      	ldr	r3, [r7, #0]
    ec46:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ec4a:	4293      	cmp	r3, r2
    ec4c:	d147      	bne.n	ecde <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ec4e:	4926      	ldr	r1, [pc, #152]	; (ece8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ec50:	4826      	ldr	r0, [pc, #152]	; (ecec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ec52:	4b27      	ldr	r3, [pc, #156]	; (ecf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ec54:	4798      	blx	r3
    ec56:	4a27      	ldr	r2, [pc, #156]	; (ecf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ec58:	4927      	ldr	r1, [pc, #156]	; (ecf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ec5a:	4824      	ldr	r0, [pc, #144]	; (ecec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ec5c:	4b27      	ldr	r3, [pc, #156]	; (ecfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ec5e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    ec60:	4927      	ldr	r1, [pc, #156]	; (ed00 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ec62:	4828      	ldr	r0, [pc, #160]	; (ed04 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ec64:	4b22      	ldr	r3, [pc, #136]	; (ecf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ec66:	4798      	blx	r3
    ec68:	4a22      	ldr	r2, [pc, #136]	; (ecf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ec6a:	4923      	ldr	r1, [pc, #140]	; (ecf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ec6c:	4825      	ldr	r0, [pc, #148]	; (ed04 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ec6e:	4b23      	ldr	r3, [pc, #140]	; (ecfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ec70:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    ec72:	4925      	ldr	r1, [pc, #148]	; (ed08 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ec74:	4825      	ldr	r0, [pc, #148]	; (ed0c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ec76:	4b1e      	ldr	r3, [pc, #120]	; (ecf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ec78:	4798      	blx	r3
    ec7a:	4a1e      	ldr	r2, [pc, #120]	; (ecf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ec7c:	491e      	ldr	r1, [pc, #120]	; (ecf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ec7e:	4823      	ldr	r0, [pc, #140]	; (ed0c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ec80:	4b1e      	ldr	r3, [pc, #120]	; (ecfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ec82:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    ec84:	4922      	ldr	r1, [pc, #136]	; (ed10 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    ec86:	4823      	ldr	r0, [pc, #140]	; (ed14 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ec88:	4b19      	ldr	r3, [pc, #100]	; (ecf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ec8a:	4798      	blx	r3
    ec8c:	4a19      	ldr	r2, [pc, #100]	; (ecf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ec8e:	491a      	ldr	r1, [pc, #104]	; (ecf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ec90:	4820      	ldr	r0, [pc, #128]	; (ed14 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ec92:	4b1a      	ldr	r3, [pc, #104]	; (ecfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ec94:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    ec96:	4920      	ldr	r1, [pc, #128]	; (ed18 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    ec98:	4820      	ldr	r0, [pc, #128]	; (ed1c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ec9a:	4b15      	ldr	r3, [pc, #84]	; (ecf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ec9c:	4798      	blx	r3
    ec9e:	4a15      	ldr	r2, [pc, #84]	; (ecf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eca0:	4915      	ldr	r1, [pc, #84]	; (ecf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eca2:	481e      	ldr	r0, [pc, #120]	; (ed1c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    eca4:	4b15      	ldr	r3, [pc, #84]	; (ecfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eca6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    eca8:	491d      	ldr	r1, [pc, #116]	; (ed20 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    ecaa:	481e      	ldr	r0, [pc, #120]	; (ed24 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ecac:	4b10      	ldr	r3, [pc, #64]	; (ecf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ecae:	4798      	blx	r3
    ecb0:	4a10      	ldr	r2, [pc, #64]	; (ecf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ecb2:	4911      	ldr	r1, [pc, #68]	; (ecf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ecb4:	481b      	ldr	r0, [pc, #108]	; (ed24 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ecb6:	4b11      	ldr	r3, [pc, #68]	; (ecfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ecb8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    ecba:	491b      	ldr	r1, [pc, #108]	; (ed28 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    ecbc:	481b      	ldr	r0, [pc, #108]	; (ed2c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ecbe:	4b0c      	ldr	r3, [pc, #48]	; (ecf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ecc0:	4798      	blx	r3
    ecc2:	4a0c      	ldr	r2, [pc, #48]	; (ecf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ecc4:	490c      	ldr	r1, [pc, #48]	; (ecf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ecc6:	4819      	ldr	r0, [pc, #100]	; (ed2c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ecc8:	4b0c      	ldr	r3, [pc, #48]	; (ecfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ecca:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    eccc:	4918      	ldr	r1, [pc, #96]	; (ed30 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    ecce:	4819      	ldr	r0, [pc, #100]	; (ed34 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ecd0:	4b07      	ldr	r3, [pc, #28]	; (ecf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ecd2:	4798      	blx	r3
    ecd4:	4a07      	ldr	r2, [pc, #28]	; (ecf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ecd6:	4908      	ldr	r1, [pc, #32]	; (ecf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ecd8:	4816      	ldr	r0, [pc, #88]	; (ed34 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ecda:	4b08      	ldr	r3, [pc, #32]	; (ecfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ecdc:	4798      	blx	r3
    ecde:	bf00      	nop
    ece0:	3708      	adds	r7, #8
    ece2:	46bd      	mov	sp, r7
    ece4:	bd80      	pop	{r7, pc}
    ece6:	bf00      	nop
    ece8:	2000a5a8 	.word	0x2000a5a8
    ecec:	200029e8 	.word	0x200029e8
    ecf0:	0000e86d 	.word	0x0000e86d
    ecf4:	20000000 	.word	0x20000000
    ecf8:	0000e8a5 	.word	0x0000e8a5
    ecfc:	00010289 	.word	0x00010289
    ed00:	2000a63c 	.word	0x2000a63c
    ed04:	20002a08 	.word	0x20002a08
    ed08:	2000a760 	.word	0x2000a760
    ed0c:	20002a28 	.word	0x20002a28
    ed10:	2000a65c 	.word	0x2000a65c
    ed14:	20002a48 	.word	0x20002a48
    ed18:	2000a720 	.word	0x2000a720
    ed1c:	20002a68 	.word	0x20002a68
    ed20:	2000a740 	.word	0x2000a740
    ed24:	20002a88 	.word	0x20002a88
    ed28:	2000a618 	.word	0x2000a618
    ed2c:	20002aa8 	.word	0x20002aa8
    ed30:	2000a6b8 	.word	0x2000a6b8
    ed34:	20002ac8 	.word	0x20002ac8

0000ed38 <_GLOBAL__sub_I_ptrTimerClass>:
    ed38:	b580      	push	{r7, lr}
    ed3a:	af00      	add	r7, sp, #0
    ed3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ed40:	2001      	movs	r0, #1
    ed42:	4b01      	ldr	r3, [pc, #4]	; (ed48 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    ed44:	4798      	blx	r3
    ed46:	bd80      	pop	{r7, pc}
    ed48:	0000ec35 	.word	0x0000ec35

0000ed4c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    ed4c:	b480      	push	{r7}
    ed4e:	b083      	sub	sp, #12
    ed50:	af00      	add	r7, sp, #0
    ed52:	6078      	str	r0, [r7, #4]
    ed54:	4a05      	ldr	r2, [pc, #20]	; (ed6c <_ZN5PrintC1Ev+0x20>)
    ed56:	687b      	ldr	r3, [r7, #4]
    ed58:	601a      	str	r2, [r3, #0]
    ed5a:	687b      	ldr	r3, [r7, #4]
    ed5c:	2200      	movs	r2, #0
    ed5e:	605a      	str	r2, [r3, #4]
    ed60:	687b      	ldr	r3, [r7, #4]
    ed62:	4618      	mov	r0, r3
    ed64:	370c      	adds	r7, #12
    ed66:	46bd      	mov	sp, r7
    ed68:	bc80      	pop	{r7}
    ed6a:	4770      	bx	lr
    ed6c:	00010c10 	.word	0x00010c10

0000ed70 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    ed70:	b480      	push	{r7}
    ed72:	b083      	sub	sp, #12
    ed74:	af00      	add	r7, sp, #0
    ed76:	6078      	str	r0, [r7, #4]
    ed78:	2300      	movs	r3, #0
    ed7a:	4618      	mov	r0, r3
    ed7c:	370c      	adds	r7, #12
    ed7e:	46bd      	mov	sp, r7
    ed80:	bc80      	pop	{r7}
    ed82:	4770      	bx	lr

0000ed84 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    ed84:	b480      	push	{r7}
    ed86:	b083      	sub	sp, #12
    ed88:	af00      	add	r7, sp, #0
    ed8a:	6078      	str	r0, [r7, #4]
    ed8c:	bf00      	nop
    ed8e:	370c      	adds	r7, #12
    ed90:	46bd      	mov	sp, r7
    ed92:	bc80      	pop	{r7}
    ed94:	4770      	bx	lr
	...

0000ed98 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    ed98:	b580      	push	{r7, lr}
    ed9a:	b082      	sub	sp, #8
    ed9c:	af00      	add	r7, sp, #0
    ed9e:	6078      	str	r0, [r7, #4]
    eda0:	687b      	ldr	r3, [r7, #4]
    eda2:	4618      	mov	r0, r3
    eda4:	4b06      	ldr	r3, [pc, #24]	; (edc0 <_ZN6StreamC1Ev+0x28>)
    eda6:	4798      	blx	r3
    eda8:	4a06      	ldr	r2, [pc, #24]	; (edc4 <_ZN6StreamC1Ev+0x2c>)
    edaa:	687b      	ldr	r3, [r7, #4]
    edac:	601a      	str	r2, [r3, #0]
    edae:	687b      	ldr	r3, [r7, #4]
    edb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    edb4:	609a      	str	r2, [r3, #8]
    edb6:	687b      	ldr	r3, [r7, #4]
    edb8:	4618      	mov	r0, r3
    edba:	3708      	adds	r7, #8
    edbc:	46bd      	mov	sp, r7
    edbe:	bd80      	pop	{r7, pc}
    edc0:	0000ed4d 	.word	0x0000ed4d
    edc4:	00010bd4 	.word	0x00010bd4

0000edc8 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    edc8:	b480      	push	{r7}
    edca:	b083      	sub	sp, #12
    edcc:	af00      	add	r7, sp, #0
    edce:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    edd0:	4b06      	ldr	r3, [pc, #24]	; (edec <_ZL10USBTimeoutPK10timer_task+0x24>)
    edd2:	681b      	ldr	r3, [r3, #0]
    edd4:	2201      	movs	r2, #1
    edd6:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    edd8:	4b04      	ldr	r3, [pc, #16]	; (edec <_ZL10USBTimeoutPK10timer_task+0x24>)
    edda:	681b      	ldr	r3, [r3, #0]
    eddc:	2200      	movs	r2, #0
    edde:	741a      	strb	r2, [r3, #16]
	
}
    ede0:	bf00      	nop
    ede2:	370c      	adds	r7, #12
    ede4:	46bd      	mov	sp, r7
    ede6:	bc80      	pop	{r7}
    ede8:	4770      	bx	lr
    edea:	bf00      	nop
    edec:	20002ef0 	.word	0x20002ef0

0000edf0 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    edf0:	b480      	push	{r7}
    edf2:	b083      	sub	sp, #12
    edf4:	af00      	add	r7, sp, #0
    edf6:	4603      	mov	r3, r0
    edf8:	603a      	str	r2, [r7, #0]
    edfa:	71fb      	strb	r3, [r7, #7]
    edfc:	460b      	mov	r3, r1
    edfe:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    ee00:	4b08      	ldr	r3, [pc, #32]	; (ee24 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ee02:	681b      	ldr	r3, [r3, #0]
    ee04:	2201      	movs	r2, #1
    ee06:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    ee08:	4b06      	ldr	r3, [pc, #24]	; (ee24 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ee0a:	681b      	ldr	r3, [r3, #0]
    ee0c:	2201      	movs	r2, #1
    ee0e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ee10:	4b04      	ldr	r3, [pc, #16]	; (ee24 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ee12:	681b      	ldr	r3, [r3, #0]
    ee14:	2201      	movs	r2, #1
    ee16:	741a      	strb	r2, [r3, #16]


	return false;
    ee18:	2300      	movs	r3, #0
}
    ee1a:	4618      	mov	r0, r3
    ee1c:	370c      	adds	r7, #12
    ee1e:	46bd      	mov	sp, r7
    ee20:	bc80      	pop	{r7}
    ee22:	4770      	bx	lr
    ee24:	20002ef0 	.word	0x20002ef0

0000ee28 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ee28:	b480      	push	{r7}
    ee2a:	b083      	sub	sp, #12
    ee2c:	af00      	add	r7, sp, #0
    ee2e:	4603      	mov	r3, r0
    ee30:	603a      	str	r2, [r7, #0]
    ee32:	71fb      	strb	r3, [r7, #7]
    ee34:	460b      	mov	r3, r1
    ee36:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    ee38:	4b08      	ldr	r3, [pc, #32]	; (ee5c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ee3a:	681b      	ldr	r3, [r3, #0]
    ee3c:	2201      	movs	r2, #1
    ee3e:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    ee40:	4b06      	ldr	r3, [pc, #24]	; (ee5c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ee42:	681b      	ldr	r3, [r3, #0]
    ee44:	2201      	movs	r2, #1
    ee46:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ee48:	4b04      	ldr	r3, [pc, #16]	; (ee5c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    ee4a:	681b      	ldr	r3, [r3, #0]
    ee4c:	2201      	movs	r2, #1
    ee4e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    ee50:	2300      	movs	r3, #0
}
    ee52:	4618      	mov	r0, r3
    ee54:	370c      	adds	r7, #12
    ee56:	46bd      	mov	sp, r7
    ee58:	bc80      	pop	{r7}
    ee5a:	4770      	bx	lr
    ee5c:	20002ef0 	.word	0x20002ef0

0000ee60 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    ee60:	b580      	push	{r7, lr}
    ee62:	b082      	sub	sp, #8
    ee64:	af00      	add	r7, sp, #0
    ee66:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    ee68:	793b      	ldrb	r3, [r7, #4]
    ee6a:	f003 0301 	and.w	r3, r3, #1
    ee6e:	b2db      	uxtb	r3, r3
    ee70:	2b00      	cmp	r3, #0
    ee72:	d013      	beq.n	ee9c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    ee74:	490c      	ldr	r1, [pc, #48]	; (eea8 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    ee76:	2000      	movs	r0, #0
    ee78:	4b0c      	ldr	r3, [pc, #48]	; (eeac <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ee7a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    ee7c:	490c      	ldr	r1, [pc, #48]	; (eeb0 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    ee7e:	2001      	movs	r0, #1
    ee80:	4b0a      	ldr	r3, [pc, #40]	; (eeac <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    ee82:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    ee84:	4b0b      	ldr	r3, [pc, #44]	; (eeb4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ee86:	681b      	ldr	r3, [r3, #0]
    ee88:	2201      	movs	r2, #1
    ee8a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    ee8c:	4b09      	ldr	r3, [pc, #36]	; (eeb4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ee8e:	681b      	ldr	r3, [r3, #0]
    ee90:	2201      	movs	r2, #1
    ee92:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    ee94:	4b07      	ldr	r3, [pc, #28]	; (eeb4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    ee96:	681b      	ldr	r3, [r3, #0]
    ee98:	2201      	movs	r2, #1
    ee9a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    ee9c:	2300      	movs	r3, #0
}
    ee9e:	4618      	mov	r0, r3
    eea0:	3708      	adds	r7, #8
    eea2:	46bd      	mov	sp, r7
    eea4:	bd80      	pop	{r7, pc}
    eea6:	bf00      	nop
    eea8:	0000edf1 	.word	0x0000edf1
    eeac:	0000c635 	.word	0x0000c635
    eeb0:	0000ee29 	.word	0x0000ee29
    eeb4:	20002ef0 	.word	0x20002ef0

0000eeb8 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    eeb8:	b580      	push	{r7, lr}
    eeba:	b082      	sub	sp, #8
    eebc:	af00      	add	r7, sp, #0
    eebe:	6078      	str	r0, [r7, #4]
    eec0:	687b      	ldr	r3, [r7, #4]
    eec2:	4618      	mov	r0, r3
    eec4:	4b0a      	ldr	r3, [pc, #40]	; (eef0 <_ZN9CDC_ClassC1Ev+0x38>)
    eec6:	4798      	blx	r3
    eec8:	687b      	ldr	r3, [r7, #4]
    eeca:	3310      	adds	r3, #16
    eecc:	4618      	mov	r0, r3
    eece:	4b09      	ldr	r3, [pc, #36]	; (eef4 <_ZN9CDC_ClassC1Ev+0x3c>)
    eed0:	4798      	blx	r3
    eed2:	4a09      	ldr	r2, [pc, #36]	; (eef8 <_ZN9CDC_ClassC1Ev+0x40>)
    eed4:	687b      	ldr	r3, [r7, #4]
    eed6:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    eed8:	687b      	ldr	r3, [r7, #4]
    eeda:	f04f 32ff 	mov.w	r2, #4294967295
    eede:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    eee0:	4a06      	ldr	r2, [pc, #24]	; (eefc <_ZN9CDC_ClassC1Ev+0x44>)
    eee2:	687b      	ldr	r3, [r7, #4]
    eee4:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    eee6:	687b      	ldr	r3, [r7, #4]
    eee8:	4618      	mov	r0, r3
    eeea:	3708      	adds	r7, #8
    eeec:	46bd      	mov	sp, r7
    eeee:	bd80      	pop	{r7, pc}
    eef0:	0000ed99 	.word	0x0000ed99
    eef4:	0000f601 	.word	0x0000f601
    eef8:	00010ba4 	.word	0x00010ba4
    eefc:	20002ef0 	.word	0x20002ef0

0000ef00 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    ef00:	b580      	push	{r7, lr}
    ef02:	b082      	sub	sp, #8
    ef04:	af00      	add	r7, sp, #0
    ef06:	6078      	str	r0, [r7, #4]
    ef08:	4a06      	ldr	r2, [pc, #24]	; (ef24 <_ZN9CDC_ClassD1Ev+0x24>)
    ef0a:	687b      	ldr	r3, [r7, #4]
    ef0c:	601a      	str	r2, [r3, #0]
    ef0e:	687b      	ldr	r3, [r7, #4]
    ef10:	3310      	adds	r3, #16
    ef12:	4618      	mov	r0, r3
    ef14:	4b04      	ldr	r3, [pc, #16]	; (ef28 <_ZN9CDC_ClassD1Ev+0x28>)
    ef16:	4798      	blx	r3
{
} //~CDC_Class
    ef18:	687b      	ldr	r3, [r7, #4]
    ef1a:	4618      	mov	r0, r3
    ef1c:	3708      	adds	r7, #8
    ef1e:	46bd      	mov	sp, r7
    ef20:	bd80      	pop	{r7, pc}
    ef22:	bf00      	nop
    ef24:	00010ba4 	.word	0x00010ba4
    ef28:	0000f621 	.word	0x0000f621

0000ef2c <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    ef2c:	b580      	push	{r7, lr}
    ef2e:	b082      	sub	sp, #8
    ef30:	af00      	add	r7, sp, #0
    ef32:	6078      	str	r0, [r7, #4]
	
	OnInit();
    ef34:	687b      	ldr	r3, [r7, #4]
    ef36:	3310      	adds	r3, #16
    ef38:	4618      	mov	r0, r3
    ef3a:	4b09      	ldr	r3, [pc, #36]	; (ef60 <_ZN9CDC_Class4InitEv+0x34>)
    ef3c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    ef3e:	4909      	ldr	r1, [pc, #36]	; (ef64 <_ZN9CDC_Class4InitEv+0x38>)
    ef40:	2003      	movs	r0, #3
    ef42:	4b09      	ldr	r3, [pc, #36]	; (ef68 <_ZN9CDC_Class4InitEv+0x3c>)
    ef44:	4798      	blx	r3
	delay_ms(100);
    ef46:	2064      	movs	r0, #100	; 0x64
    ef48:	4b08      	ldr	r3, [pc, #32]	; (ef6c <_ZN9CDC_Class4InitEv+0x40>)
    ef4a:	4798      	blx	r3
		
	if (connected)
    ef4c:	687b      	ldr	r3, [r7, #4]
    ef4e:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    ef50:	2064      	movs	r0, #100	; 0x64
    ef52:	4b06      	ldr	r3, [pc, #24]	; (ef6c <_ZN9CDC_Class4InitEv+0x40>)
    ef54:	4798      	blx	r3

	

}
    ef56:	bf00      	nop
    ef58:	3708      	adds	r7, #8
    ef5a:	46bd      	mov	sp, r7
    ef5c:	bd80      	pop	{r7, pc}
    ef5e:	bf00      	nop
    ef60:	0000f635 	.word	0x0000f635
    ef64:	0000ee61 	.word	0x0000ee61
    ef68:	0000c635 	.word	0x0000c635
    ef6c:	00002565 	.word	0x00002565

0000ef70 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    ef70:	b580      	push	{r7, lr}
    ef72:	b082      	sub	sp, #8
    ef74:	af00      	add	r7, sp, #0
    ef76:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    ef78:	4b03      	ldr	r3, [pc, #12]	; (ef88 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    ef7a:	4798      	blx	r3
    ef7c:	4603      	mov	r3, r0
	
}
    ef7e:	4618      	mov	r0, r3
    ef80:	3708      	adds	r7, #8
    ef82:	46bd      	mov	sp, r7
    ef84:	bd80      	pop	{r7, pc}
    ef86:	bf00      	nop
    ef88:	0000c6ad 	.word	0x0000c6ad

0000ef8c <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    ef8c:	b580      	push	{r7, lr}
    ef8e:	b084      	sub	sp, #16
    ef90:	af00      	add	r7, sp, #0
    ef92:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    ef94:	687b      	ldr	r3, [r7, #4]
    ef96:	699b      	ldr	r3, [r3, #24]
    ef98:	f1b3 3fff 	cmp.w	r3, #4294967295
    ef9c:	bf14      	ite	ne
    ef9e:	2301      	movne	r3, #1
    efa0:	2300      	moveq	r3, #0
    efa2:	b2db      	uxtb	r3, r3
    efa4:	2b00      	cmp	r3, #0
    efa6:	d002      	beq.n	efae <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    efa8:	687b      	ldr	r3, [r7, #4]
    efaa:	699b      	ldr	r3, [r3, #24]
    efac:	e011      	b.n	efd2 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    efae:	687b      	ldr	r3, [r7, #4]
    efb0:	681b      	ldr	r3, [r3, #0]
    efb2:	331c      	adds	r3, #28
    efb4:	681b      	ldr	r3, [r3, #0]
    efb6:	f107 010f 	add.w	r1, r7, #15
    efba:	2201      	movs	r2, #1
    efbc:	6878      	ldr	r0, [r7, #4]
    efbe:	4798      	blx	r3
    efc0:	4602      	mov	r2, r0
    efc2:	687b      	ldr	r3, [r7, #4]
    efc4:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    efc6:	7bfb      	ldrb	r3, [r7, #15]
    efc8:	461a      	mov	r2, r3
    efca:	687b      	ldr	r3, [r7, #4]
    efcc:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    efce:	687b      	ldr	r3, [r7, #4]
    efd0:	699b      	ldr	r3, [r3, #24]
}
    efd2:	4618      	mov	r0, r3
    efd4:	3710      	adds	r7, #16
    efd6:	46bd      	mov	sp, r7
    efd8:	bd80      	pop	{r7, pc}
	...

0000efdc <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    efdc:	b580      	push	{r7, lr}
    efde:	b086      	sub	sp, #24
    efe0:	af00      	add	r7, sp, #0
    efe2:	60f8      	str	r0, [r7, #12]
    efe4:	60b9      	str	r1, [r7, #8]
    efe6:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    efe8:	68fb      	ldr	r3, [r7, #12]
    efea:	7c1b      	ldrb	r3, [r3, #16]
    efec:	b2db      	uxtb	r3, r3
    efee:	2b00      	cmp	r3, #0
    eff0:	d02e      	beq.n	f050 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    eff2:	687a      	ldr	r2, [r7, #4]
    eff4:	4613      	mov	r3, r2
    eff6:	009b      	lsls	r3, r3, #2
    eff8:	4413      	add	r3, r2
    effa:	005b      	lsls	r3, r3, #1
    effc:	461a      	mov	r2, r3
    effe:	4918      	ldr	r1, [pc, #96]	; (f060 <_ZN9CDC_Class8readDataEPvl+0x84>)
    f000:	4818      	ldr	r0, [pc, #96]	; (f064 <_ZN9CDC_Class8readDataEPvl+0x88>)
    f002:	4b19      	ldr	r3, [pc, #100]	; (f068 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    f004:	4798      	blx	r3
		rxReady=false;
    f006:	68fb      	ldr	r3, [r7, #12]
    f008:	2200      	movs	r2, #0
    f00a:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    f00c:	687b      	ldr	r3, [r7, #4]
    f00e:	4619      	mov	r1, r3
    f010:	68b8      	ldr	r0, [r7, #8]
    f012:	4b16      	ldr	r3, [pc, #88]	; (f06c <_ZN9CDC_Class8readDataEPvl+0x90>)
    f014:	4798      	blx	r3
    f016:	4603      	mov	r3, r0
    f018:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    f01a:	68fb      	ldr	r3, [r7, #12]
    f01c:	7d5b      	ldrb	r3, [r3, #21]
    f01e:	b2db      	uxtb	r3, r3
    f020:	f083 0301 	eor.w	r3, r3, #1
    f024:	b2db      	uxtb	r3, r3
    f026:	2b00      	cmp	r3, #0
    f028:	d006      	beq.n	f038 <_ZN9CDC_Class8readDataEPvl+0x5c>
    f02a:	68fb      	ldr	r3, [r7, #12]
    f02c:	7c1b      	ldrb	r3, [r3, #16]
    f02e:	b2db      	uxtb	r3, r3
    f030:	2b00      	cmp	r3, #0
    f032:	d001      	beq.n	f038 <_ZN9CDC_Class8readDataEPvl+0x5c>
    f034:	2301      	movs	r3, #1
    f036:	e000      	b.n	f03a <_ZN9CDC_Class8readDataEPvl+0x5e>
    f038:	2300      	movs	r3, #0
    f03a:	2b00      	cmp	r3, #0
    f03c:	d000      	beq.n	f040 <_ZN9CDC_Class8readDataEPvl+0x64>
    f03e:	e7ec      	b.n	f01a <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    f040:	4808      	ldr	r0, [pc, #32]	; (f064 <_ZN9CDC_Class8readDataEPvl+0x88>)
    f042:	4b0b      	ldr	r3, [pc, #44]	; (f070 <_ZN9CDC_Class8readDataEPvl+0x94>)
    f044:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f046:	4906      	ldr	r1, [pc, #24]	; (f060 <_ZN9CDC_Class8readDataEPvl+0x84>)
    f048:	4806      	ldr	r0, [pc, #24]	; (f064 <_ZN9CDC_Class8readDataEPvl+0x88>)
    f04a:	4b0a      	ldr	r3, [pc, #40]	; (f074 <_ZN9CDC_Class8readDataEPvl+0x98>)
    f04c:	4798      	blx	r3
    f04e:	e001      	b.n	f054 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    f050:	2300      	movs	r3, #0
    f052:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    f054:	7dfb      	ldrb	r3, [r7, #23]
}
    f056:	4618      	mov	r0, r3
    f058:	3718      	adds	r7, #24
    f05a:	46bd      	mov	sp, r7
    f05c:	bd80      	pop	{r7, pc}
    f05e:	bf00      	nop
    f060:	0000edc9 	.word	0x0000edc9
    f064:	20002e90 	.word	0x20002e90
    f068:	0000eaa1 	.word	0x0000eaa1
    f06c:	0000c589 	.word	0x0000c589
    f070:	0000e9cd 	.word	0x0000e9cd
    f074:	0000ea49 	.word	0x0000ea49

0000f078 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    f078:	b580      	push	{r7, lr}
    f07a:	b084      	sub	sp, #16
    f07c:	af00      	add	r7, sp, #0
    f07e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    f080:	687b      	ldr	r3, [r7, #4]
    f082:	2200      	movs	r2, #0
    f084:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    f086:	f107 030f 	add.w	r3, r7, #15
    f08a:	2101      	movs	r1, #1
    f08c:	4618      	mov	r0, r3
    f08e:	4b08      	ldr	r3, [pc, #32]	; (f0b0 <_ZN9CDC_Class4readEv+0x38>)
    f090:	4798      	blx	r3
	while(!rxReady);
    f092:	687b      	ldr	r3, [r7, #4]
    f094:	7d5b      	ldrb	r3, [r3, #21]
    f096:	b2db      	uxtb	r3, r3
    f098:	f083 0301 	eor.w	r3, r3, #1
    f09c:	b2db      	uxtb	r3, r3
    f09e:	2b00      	cmp	r3, #0
    f0a0:	d000      	beq.n	f0a4 <_ZN9CDC_Class4readEv+0x2c>
    f0a2:	e7f6      	b.n	f092 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    f0a4:	7bfb      	ldrb	r3, [r7, #15]
}
    f0a6:	4618      	mov	r0, r3
    f0a8:	3710      	adds	r7, #16
    f0aa:	46bd      	mov	sp, r7
    f0ac:	bd80      	pop	{r7, pc}
    f0ae:	bf00      	nop
    f0b0:	0000c589 	.word	0x0000c589

0000f0b4 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    f0b4:	b580      	push	{r7, lr}
    f0b6:	b082      	sub	sp, #8
    f0b8:	af00      	add	r7, sp, #0
    f0ba:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    f0bc:	687b      	ldr	r3, [r7, #4]
    f0be:	331c      	adds	r3, #28
    f0c0:	2140      	movs	r1, #64	; 0x40
    f0c2:	4618      	mov	r0, r3
    f0c4:	4b02      	ldr	r3, [pc, #8]	; (f0d0 <_ZN9CDC_Class5flushEv+0x1c>)
    f0c6:	4798      	blx	r3
}
    f0c8:	bf00      	nop
    f0ca:	3708      	adds	r7, #8
    f0cc:	46bd      	mov	sp, r7
    f0ce:	bd80      	pop	{r7, pc}
    f0d0:	0000c5cd 	.word	0x0000c5cd

0000f0d4 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    f0d4:	b580      	push	{r7, lr}
    f0d6:	b082      	sub	sp, #8
    f0d8:	af00      	add	r7, sp, #0
    f0da:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    f0dc:	4b02      	ldr	r3, [pc, #8]	; (f0e8 <_ZN9CDC_Class5clearEv+0x14>)
    f0de:	4798      	blx	r3
}
    f0e0:	bf00      	nop
    f0e2:	3708      	adds	r7, #8
    f0e4:	46bd      	mov	sp, r7
    f0e6:	bd80      	pop	{r7, pc}
    f0e8:	0000c611 	.word	0x0000c611

0000f0ec <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    f0ec:	b580      	push	{r7, lr}
    f0ee:	b082      	sub	sp, #8
    f0f0:	af00      	add	r7, sp, #0
    f0f2:	6078      	str	r0, [r7, #4]
    f0f4:	460b      	mov	r3, r1
    f0f6:	70fb      	strb	r3, [r7, #3]
	if (connected){
    f0f8:	687b      	ldr	r3, [r7, #4]
    f0fa:	7c1b      	ldrb	r3, [r3, #16]
    f0fc:	b2db      	uxtb	r3, r3
    f0fe:	2b00      	cmp	r3, #0
    f100:	d012      	beq.n	f128 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    f102:	687b      	ldr	r3, [r7, #4]
    f104:	7d1b      	ldrb	r3, [r3, #20]
    f106:	b2db      	uxtb	r3, r3
    f108:	f083 0301 	eor.w	r3, r3, #1
    f10c:	b2db      	uxtb	r3, r3
    f10e:	2b00      	cmp	r3, #0
    f110:	d000      	beq.n	f114 <_ZN9CDC_Class5writeEh+0x28>
    f112:	e7f6      	b.n	f102 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    f114:	687b      	ldr	r3, [r7, #4]
    f116:	681b      	ldr	r3, [r3, #0]
    f118:	3324      	adds	r3, #36	; 0x24
    f11a:	681b      	ldr	r3, [r3, #0]
    f11c:	1cf9      	adds	r1, r7, #3
    f11e:	2201      	movs	r2, #1
    f120:	6878      	ldr	r0, [r7, #4]
    f122:	4798      	blx	r3
    f124:	4603      	mov	r3, r0
    f126:	e000      	b.n	f12a <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    f128:	2300      	movs	r3, #0
	}
		
}
    f12a:	4618      	mov	r0, r3
    f12c:	3708      	adds	r7, #8
    f12e:	46bd      	mov	sp, r7
    f130:	bd80      	pop	{r7, pc}
	...

0000f134 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    f134:	b580      	push	{r7, lr}
    f136:	b086      	sub	sp, #24
    f138:	af00      	add	r7, sp, #0
    f13a:	60f8      	str	r0, [r7, #12]
    f13c:	60b9      	str	r1, [r7, #8]
    f13e:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    f140:	68fb      	ldr	r3, [r7, #12]
    f142:	7c1b      	ldrb	r3, [r3, #16]
    f144:	b2db      	uxtb	r3, r3
    f146:	2b00      	cmp	r3, #0
    f148:	d02f      	beq.n	f1aa <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f14a:	687a      	ldr	r2, [r7, #4]
    f14c:	4613      	mov	r3, r2
    f14e:	009b      	lsls	r3, r3, #2
    f150:	4413      	add	r3, r2
    f152:	005b      	lsls	r3, r3, #1
    f154:	461a      	mov	r2, r3
    f156:	4917      	ldr	r1, [pc, #92]	; (f1b4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f158:	4817      	ldr	r0, [pc, #92]	; (f1b8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f15a:	4b18      	ldr	r3, [pc, #96]	; (f1bc <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    f15c:	4798      	blx	r3
		txReady=false;
    f15e:	68fb      	ldr	r3, [r7, #12]
    f160:	2200      	movs	r2, #0
    f162:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f164:	687b      	ldr	r3, [r7, #4]
    f166:	4619      	mov	r1, r3
    f168:	68b8      	ldr	r0, [r7, #8]
    f16a:	4b15      	ldr	r3, [pc, #84]	; (f1c0 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    f16c:	4798      	blx	r3
    f16e:	4603      	mov	r3, r0
    f170:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    f172:	68fb      	ldr	r3, [r7, #12]
    f174:	7d1b      	ldrb	r3, [r3, #20]
    f176:	b2db      	uxtb	r3, r3
    f178:	f083 0301 	eor.w	r3, r3, #1
    f17c:	b2db      	uxtb	r3, r3
    f17e:	2b00      	cmp	r3, #0
    f180:	d006      	beq.n	f190 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f182:	68fb      	ldr	r3, [r7, #12]
    f184:	7c1b      	ldrb	r3, [r3, #16]
    f186:	b2db      	uxtb	r3, r3
    f188:	2b00      	cmp	r3, #0
    f18a:	d001      	beq.n	f190 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    f18c:	2301      	movs	r3, #1
    f18e:	e000      	b.n	f192 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    f190:	2300      	movs	r3, #0
    f192:	2b00      	cmp	r3, #0
    f194:	d000      	beq.n	f198 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    f196:	e7ec      	b.n	f172 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    f198:	4807      	ldr	r0, [pc, #28]	; (f1b8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f19a:	4b0a      	ldr	r3, [pc, #40]	; (f1c4 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    f19c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f19e:	4905      	ldr	r1, [pc, #20]	; (f1b4 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    f1a0:	4805      	ldr	r0, [pc, #20]	; (f1b8 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    f1a2:	4b09      	ldr	r3, [pc, #36]	; (f1c8 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    f1a4:	4798      	blx	r3
		return r;
    f1a6:	697b      	ldr	r3, [r7, #20]
    f1a8:	e000      	b.n	f1ac <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    f1aa:	2300      	movs	r3, #0
	}
	

}
    f1ac:	4618      	mov	r0, r3
    f1ae:	3718      	adds	r7, #24
    f1b0:	46bd      	mov	sp, r7
    f1b2:	bd80      	pop	{r7, pc}
    f1b4:	0000edc9 	.word	0x0000edc9
    f1b8:	20002e90 	.word	0x20002e90
    f1bc:	0000eaa1 	.word	0x0000eaa1
    f1c0:	0000c5cd 	.word	0x0000c5cd
    f1c4:	0000e9cd 	.word	0x0000e9cd
    f1c8:	0000ea49 	.word	0x0000ea49

0000f1cc <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    f1cc:	b580      	push	{r7, lr}
    f1ce:	b086      	sub	sp, #24
    f1d0:	af00      	add	r7, sp, #0
    f1d2:	60f8      	str	r0, [r7, #12]
    f1d4:	60b9      	str	r1, [r7, #8]
    f1d6:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    f1d8:	68fb      	ldr	r3, [r7, #12]
    f1da:	2200      	movs	r2, #0
    f1dc:	751a      	strb	r2, [r3, #20]

 	if (connected){
    f1de:	68fb      	ldr	r3, [r7, #12]
    f1e0:	7c1b      	ldrb	r3, [r3, #16]
    f1e2:	b2db      	uxtb	r3, r3
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	d02a      	beq.n	f23e <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    f1e8:	687a      	ldr	r2, [r7, #4]
    f1ea:	4613      	mov	r3, r2
    f1ec:	009b      	lsls	r3, r3, #2
    f1ee:	4413      	add	r3, r2
    f1f0:	005b      	lsls	r3, r3, #1
    f1f2:	461a      	mov	r2, r3
    f1f4:	4915      	ldr	r1, [pc, #84]	; (f24c <_ZN9CDC_Class5writeEPKhj+0x80>)
    f1f6:	4816      	ldr	r0, [pc, #88]	; (f250 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f1f8:	4b16      	ldr	r3, [pc, #88]	; (f254 <_ZN9CDC_Class5writeEPKhj+0x88>)
    f1fa:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    f1fc:	6879      	ldr	r1, [r7, #4]
    f1fe:	68b8      	ldr	r0, [r7, #8]
    f200:	4b15      	ldr	r3, [pc, #84]	; (f258 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    f202:	4798      	blx	r3
    f204:	4603      	mov	r3, r0
    f206:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    f208:	68fb      	ldr	r3, [r7, #12]
    f20a:	7d1b      	ldrb	r3, [r3, #20]
    f20c:	b2db      	uxtb	r3, r3
    f20e:	f083 0301 	eor.w	r3, r3, #1
    f212:	b2db      	uxtb	r3, r3
    f214:	2b00      	cmp	r3, #0
    f216:	d006      	beq.n	f226 <_ZN9CDC_Class5writeEPKhj+0x5a>
    f218:	68fb      	ldr	r3, [r7, #12]
    f21a:	7c1b      	ldrb	r3, [r3, #16]
    f21c:	b2db      	uxtb	r3, r3
    f21e:	2b00      	cmp	r3, #0
    f220:	d001      	beq.n	f226 <_ZN9CDC_Class5writeEPKhj+0x5a>
    f222:	2301      	movs	r3, #1
    f224:	e000      	b.n	f228 <_ZN9CDC_Class5writeEPKhj+0x5c>
    f226:	2300      	movs	r3, #0
    f228:	2b00      	cmp	r3, #0
    f22a:	d000      	beq.n	f22e <_ZN9CDC_Class5writeEPKhj+0x62>
    f22c:	e7ec      	b.n	f208 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    f22e:	4808      	ldr	r0, [pc, #32]	; (f250 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f230:	4b0a      	ldr	r3, [pc, #40]	; (f25c <_ZN9CDC_Class5writeEPKhj+0x90>)
    f232:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    f234:	4905      	ldr	r1, [pc, #20]	; (f24c <_ZN9CDC_Class5writeEPKhj+0x80>)
    f236:	4806      	ldr	r0, [pc, #24]	; (f250 <_ZN9CDC_Class5writeEPKhj+0x84>)
    f238:	4b09      	ldr	r3, [pc, #36]	; (f260 <_ZN9CDC_Class5writeEPKhj+0x94>)
    f23a:	4798      	blx	r3
    f23c:	e001      	b.n	f242 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    f23e:	2300      	movs	r3, #0
    f240:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    f242:	697b      	ldr	r3, [r7, #20]
}
    f244:	4618      	mov	r0, r3
    f246:	3718      	adds	r7, #24
    f248:	46bd      	mov	sp, r7
    f24a:	bd80      	pop	{r7, pc}
    f24c:	0000edc9 	.word	0x0000edc9
    f250:	20002e90 	.word	0x20002e90
    f254:	0000eaa1 	.word	0x0000eaa1
    f258:	0000c5cd 	.word	0x0000c5cd
    f25c:	0000e9cd 	.word	0x0000e9cd
    f260:	0000ea49 	.word	0x0000ea49

0000f264 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    f264:	b480      	push	{r7}
    f266:	b083      	sub	sp, #12
    f268:	af00      	add	r7, sp, #0
    f26a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    f26c:	687b      	ldr	r3, [r7, #4]
    f26e:	7d5b      	ldrb	r3, [r3, #21]
    f270:	b2db      	uxtb	r3, r3
    f272:	2b00      	cmp	r3, #0
    f274:	d006      	beq.n	f284 <_ZN9CDC_Class9availableEv+0x20>
    f276:	687b      	ldr	r3, [r7, #4]
    f278:	7d1b      	ldrb	r3, [r3, #20]
    f27a:	b2db      	uxtb	r3, r3
    f27c:	2b00      	cmp	r3, #0
    f27e:	d001      	beq.n	f284 <_ZN9CDC_Class9availableEv+0x20>
    f280:	2301      	movs	r3, #1
    f282:	e000      	b.n	f286 <_ZN9CDC_Class9availableEv+0x22>
    f284:	2300      	movs	r3, #0
    f286:	2b00      	cmp	r3, #0
    f288:	d001      	beq.n	f28e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    f28a:	2301      	movs	r3, #1
    f28c:	e000      	b.n	f290 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    f28e:	2300      	movs	r3, #0
	}
	
}
    f290:	4618      	mov	r0, r3
    f292:	370c      	adds	r7, #12
    f294:	46bd      	mov	sp, r7
    f296:	bc80      	pop	{r7}
    f298:	4770      	bx	lr
	...

0000f29c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    f29c:	b580      	push	{r7, lr}
    f29e:	b082      	sub	sp, #8
    f2a0:	af00      	add	r7, sp, #0
    f2a2:	6078      	str	r0, [r7, #4]
    f2a4:	6039      	str	r1, [r7, #0]
    f2a6:	687b      	ldr	r3, [r7, #4]
    f2a8:	2b01      	cmp	r3, #1
    f2aa:	d154      	bne.n	f356 <_Z41__static_initialization_and_destruction_0ii+0xba>
    f2ac:	683b      	ldr	r3, [r7, #0]
    f2ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f2b2:	4293      	cmp	r3, r2
    f2b4:	d14f      	bne.n	f356 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f2b6:	492a      	ldr	r1, [pc, #168]	; (f360 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f2b8:	482a      	ldr	r0, [pc, #168]	; (f364 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f2ba:	4b2b      	ldr	r3, [pc, #172]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f2bc:	4798      	blx	r3
    f2be:	4a2b      	ldr	r2, [pc, #172]	; (f36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f2c0:	492b      	ldr	r1, [pc, #172]	; (f370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f2c2:	4828      	ldr	r0, [pc, #160]	; (f364 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f2c4:	4b2b      	ldr	r3, [pc, #172]	; (f374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f2c6:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f2c8:	492b      	ldr	r1, [pc, #172]	; (f378 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f2ca:	482c      	ldr	r0, [pc, #176]	; (f37c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f2cc:	4b26      	ldr	r3, [pc, #152]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f2ce:	4798      	blx	r3
    f2d0:	4a26      	ldr	r2, [pc, #152]	; (f36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f2d2:	4927      	ldr	r1, [pc, #156]	; (f370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f2d4:	4829      	ldr	r0, [pc, #164]	; (f37c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f2d6:	4b27      	ldr	r3, [pc, #156]	; (f374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f2d8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f2da:	4929      	ldr	r1, [pc, #164]	; (f380 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f2dc:	4829      	ldr	r0, [pc, #164]	; (f384 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2de:	4b22      	ldr	r3, [pc, #136]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f2e0:	4798      	blx	r3
    f2e2:	4a22      	ldr	r2, [pc, #136]	; (f36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f2e4:	4922      	ldr	r1, [pc, #136]	; (f370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f2e6:	4827      	ldr	r0, [pc, #156]	; (f384 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2e8:	4b22      	ldr	r3, [pc, #136]	; (f374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f2ea:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f2ec:	4926      	ldr	r1, [pc, #152]	; (f388 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f2ee:	4827      	ldr	r0, [pc, #156]	; (f38c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f2f0:	4b1d      	ldr	r3, [pc, #116]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f2f2:	4798      	blx	r3
    f2f4:	4a1d      	ldr	r2, [pc, #116]	; (f36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f2f6:	491e      	ldr	r1, [pc, #120]	; (f370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f2f8:	4824      	ldr	r0, [pc, #144]	; (f38c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f2fa:	4b1e      	ldr	r3, [pc, #120]	; (f374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f2fc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f2fe:	4924      	ldr	r1, [pc, #144]	; (f390 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f300:	4824      	ldr	r0, [pc, #144]	; (f394 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f302:	4b19      	ldr	r3, [pc, #100]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f304:	4798      	blx	r3
    f306:	4a19      	ldr	r2, [pc, #100]	; (f36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f308:	4919      	ldr	r1, [pc, #100]	; (f370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f30a:	4822      	ldr	r0, [pc, #136]	; (f394 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f30c:	4b19      	ldr	r3, [pc, #100]	; (f374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f30e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f310:	4921      	ldr	r1, [pc, #132]	; (f398 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f312:	4822      	ldr	r0, [pc, #136]	; (f39c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f314:	4b14      	ldr	r3, [pc, #80]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f316:	4798      	blx	r3
    f318:	4a14      	ldr	r2, [pc, #80]	; (f36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f31a:	4915      	ldr	r1, [pc, #84]	; (f370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f31c:	481f      	ldr	r0, [pc, #124]	; (f39c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f31e:	4b15      	ldr	r3, [pc, #84]	; (f374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f320:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f322:	491f      	ldr	r1, [pc, #124]	; (f3a0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f324:	481f      	ldr	r0, [pc, #124]	; (f3a4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f326:	4b10      	ldr	r3, [pc, #64]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f328:	4798      	blx	r3
    f32a:	4a10      	ldr	r2, [pc, #64]	; (f36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f32c:	4910      	ldr	r1, [pc, #64]	; (f370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f32e:	481d      	ldr	r0, [pc, #116]	; (f3a4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f330:	4b10      	ldr	r3, [pc, #64]	; (f374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f332:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f334:	491c      	ldr	r1, [pc, #112]	; (f3a8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f336:	481d      	ldr	r0, [pc, #116]	; (f3ac <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f338:	4b0b      	ldr	r3, [pc, #44]	; (f368 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f33a:	4798      	blx	r3
    f33c:	4a0b      	ldr	r2, [pc, #44]	; (f36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f33e:	490c      	ldr	r1, [pc, #48]	; (f370 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f340:	481a      	ldr	r0, [pc, #104]	; (f3ac <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f342:	4b0c      	ldr	r3, [pc, #48]	; (f374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f344:	4798      	blx	r3
    f346:	481a      	ldr	r0, [pc, #104]	; (f3b0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f348:	4b1a      	ldr	r3, [pc, #104]	; (f3b4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f34a:	4798      	blx	r3
    f34c:	4a07      	ldr	r2, [pc, #28]	; (f36c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f34e:	491a      	ldr	r1, [pc, #104]	; (f3b8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f350:	4817      	ldr	r0, [pc, #92]	; (f3b0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f352:	4b08      	ldr	r3, [pc, #32]	; (f374 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f354:	4798      	blx	r3
    f356:	bf00      	nop
    f358:	3708      	adds	r7, #8
    f35a:	46bd      	mov	sp, r7
    f35c:	bd80      	pop	{r7, pc}
    f35e:	bf00      	nop
    f360:	2000a5a8 	.word	0x2000a5a8
    f364:	20002df0 	.word	0x20002df0
    f368:	0000e86d 	.word	0x0000e86d
    f36c:	20000000 	.word	0x20000000
    f370:	0000e8a5 	.word	0x0000e8a5
    f374:	00010289 	.word	0x00010289
    f378:	2000a63c 	.word	0x2000a63c
    f37c:	20002e10 	.word	0x20002e10
    f380:	2000a760 	.word	0x2000a760
    f384:	20002e30 	.word	0x20002e30
    f388:	2000a65c 	.word	0x2000a65c
    f38c:	20002e50 	.word	0x20002e50
    f390:	2000a720 	.word	0x2000a720
    f394:	20002e70 	.word	0x20002e70
    f398:	2000a740 	.word	0x2000a740
    f39c:	20002e90 	.word	0x20002e90
    f3a0:	2000a618 	.word	0x2000a618
    f3a4:	20002eb0 	.word	0x20002eb0
    f3a8:	2000a6b8 	.word	0x2000a6b8
    f3ac:	20002ed0 	.word	0x20002ed0
    f3b0:	20002ef4 	.word	0x20002ef4
    f3b4:	0000eeb9 	.word	0x0000eeb9
    f3b8:	0000ef01 	.word	0x0000ef01

0000f3bc <_GLOBAL__sub_I_ptrCDCClass>:
    f3bc:	b580      	push	{r7, lr}
    f3be:	af00      	add	r7, sp, #0
    f3c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f3c4:	2001      	movs	r0, #1
    f3c6:	4b01      	ldr	r3, [pc, #4]	; (f3cc <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    f3c8:	4798      	blx	r3
    f3ca:	bd80      	pop	{r7, pc}
    f3cc:	0000f29d 	.word	0x0000f29d

0000f3d0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    f3d0:	b590      	push	{r4, r7, lr}
    f3d2:	b083      	sub	sp, #12
    f3d4:	af00      	add	r7, sp, #0
    f3d6:	6078      	str	r0, [r7, #4]
    f3d8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    f3da:	683b      	ldr	r3, [r7, #0]
    f3dc:	2b00      	cmp	r3, #0
    f3de:	d101      	bne.n	f3e4 <_ZN5Print5writeEPKc+0x14>
    f3e0:	2300      	movs	r3, #0
    f3e2:	e00c      	b.n	f3fe <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    f3e4:	687b      	ldr	r3, [r7, #4]
    f3e6:	681b      	ldr	r3, [r3, #0]
    f3e8:	3304      	adds	r3, #4
    f3ea:	681c      	ldr	r4, [r3, #0]
    f3ec:	6838      	ldr	r0, [r7, #0]
    f3ee:	4b06      	ldr	r3, [pc, #24]	; (f408 <_ZN5Print5writeEPKc+0x38>)
    f3f0:	4798      	blx	r3
    f3f2:	4603      	mov	r3, r0
    f3f4:	461a      	mov	r2, r3
    f3f6:	6839      	ldr	r1, [r7, #0]
    f3f8:	6878      	ldr	r0, [r7, #4]
    f3fa:	47a0      	blx	r4
    f3fc:	4603      	mov	r3, r0
    }
    f3fe:	4618      	mov	r0, r3
    f400:	370c      	adds	r7, #12
    f402:	46bd      	mov	sp, r7
    f404:	bd90      	pop	{r4, r7, pc}
    f406:	bf00      	nop
    f408:	00010501 	.word	0x00010501

0000f40c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    f40c:	b580      	push	{r7, lr}
    f40e:	b086      	sub	sp, #24
    f410:	af00      	add	r7, sp, #0
    f412:	60f8      	str	r0, [r7, #12]
    f414:	60b9      	str	r1, [r7, #8]
    f416:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    f418:	2300      	movs	r3, #0
    f41a:	617b      	str	r3, [r7, #20]
  while (size--) {
    f41c:	687b      	ldr	r3, [r7, #4]
    f41e:	1e5a      	subs	r2, r3, #1
    f420:	607a      	str	r2, [r7, #4]
    f422:	2b00      	cmp	r3, #0
    f424:	bf14      	ite	ne
    f426:	2301      	movne	r3, #1
    f428:	2300      	moveq	r3, #0
    f42a:	b2db      	uxtb	r3, r3
    f42c:	2b00      	cmp	r3, #0
    f42e:	d016      	beq.n	f45e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    f430:	68fb      	ldr	r3, [r7, #12]
    f432:	681b      	ldr	r3, [r3, #0]
    f434:	681a      	ldr	r2, [r3, #0]
    f436:	68bb      	ldr	r3, [r7, #8]
    f438:	1c59      	adds	r1, r3, #1
    f43a:	60b9      	str	r1, [r7, #8]
    f43c:	781b      	ldrb	r3, [r3, #0]
    f43e:	4619      	mov	r1, r3
    f440:	68f8      	ldr	r0, [r7, #12]
    f442:	4790      	blx	r2
    f444:	4603      	mov	r3, r0
    f446:	2b00      	cmp	r3, #0
    f448:	bf14      	ite	ne
    f44a:	2301      	movne	r3, #1
    f44c:	2300      	moveq	r3, #0
    f44e:	b2db      	uxtb	r3, r3
    f450:	2b00      	cmp	r3, #0
    f452:	d003      	beq.n	f45c <_ZN5Print5writeEPKhj+0x50>
    f454:	697b      	ldr	r3, [r7, #20]
    f456:	3301      	adds	r3, #1
    f458:	617b      	str	r3, [r7, #20]
  while (size--) {
    f45a:	e7df      	b.n	f41c <_ZN5Print5writeEPKhj+0x10>
    else break;
    f45c:	bf00      	nop
  }
  return n;
    f45e:	697b      	ldr	r3, [r7, #20]
}
    f460:	4618      	mov	r0, r3
    f462:	3718      	adds	r7, #24
    f464:	46bd      	mov	sp, r7
    f466:	bd80      	pop	{r7, pc}

0000f468 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    f468:	b580      	push	{r7, lr}
    f46a:	b082      	sub	sp, #8
    f46c:	af00      	add	r7, sp, #0
    f46e:	6078      	str	r0, [r7, #4]
    f470:	6039      	str	r1, [r7, #0]
  return write(str);
    f472:	6839      	ldr	r1, [r7, #0]
    f474:	6878      	ldr	r0, [r7, #4]
    f476:	4b03      	ldr	r3, [pc, #12]	; (f484 <_ZN5Print5printEPKc+0x1c>)
    f478:	4798      	blx	r3
    f47a:	4603      	mov	r3, r0
}
    f47c:	4618      	mov	r0, r3
    f47e:	3708      	adds	r7, #8
    f480:	46bd      	mov	sp, r7
    f482:	bd80      	pop	{r7, pc}
    f484:	0000f3d1 	.word	0x0000f3d1

0000f488 <hri_port_read_DIR_reg>:
{
    f488:	b480      	push	{r7}
    f48a:	b083      	sub	sp, #12
    f48c:	af00      	add	r7, sp, #0
    f48e:	6078      	str	r0, [r7, #4]
    f490:	460b      	mov	r3, r1
    f492:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f494:	78fb      	ldrb	r3, [r7, #3]
    f496:	687a      	ldr	r2, [r7, #4]
    f498:	01db      	lsls	r3, r3, #7
    f49a:	4413      	add	r3, r2
    f49c:	681b      	ldr	r3, [r3, #0]
}
    f49e:	4618      	mov	r0, r3
    f4a0:	370c      	adds	r7, #12
    f4a2:	46bd      	mov	sp, r7
    f4a4:	bc80      	pop	{r7}
    f4a6:	4770      	bx	lr

0000f4a8 <hri_port_read_OUT_reg>:
{
    f4a8:	b480      	push	{r7}
    f4aa:	b083      	sub	sp, #12
    f4ac:	af00      	add	r7, sp, #0
    f4ae:	6078      	str	r0, [r7, #4]
    f4b0:	460b      	mov	r3, r1
    f4b2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f4b4:	78fb      	ldrb	r3, [r7, #3]
    f4b6:	687a      	ldr	r2, [r7, #4]
    f4b8:	01db      	lsls	r3, r3, #7
    f4ba:	4413      	add	r3, r2
    f4bc:	3310      	adds	r3, #16
    f4be:	681b      	ldr	r3, [r3, #0]
}
    f4c0:	4618      	mov	r0, r3
    f4c2:	370c      	adds	r7, #12
    f4c4:	46bd      	mov	sp, r7
    f4c6:	bc80      	pop	{r7}
    f4c8:	4770      	bx	lr

0000f4ca <hri_port_read_IN_reg>:
{
    f4ca:	b480      	push	{r7}
    f4cc:	b083      	sub	sp, #12
    f4ce:	af00      	add	r7, sp, #0
    f4d0:	6078      	str	r0, [r7, #4]
    f4d2:	460b      	mov	r3, r1
    f4d4:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f4d6:	78fb      	ldrb	r3, [r7, #3]
    f4d8:	687a      	ldr	r2, [r7, #4]
    f4da:	01db      	lsls	r3, r3, #7
    f4dc:	4413      	add	r3, r2
    f4de:	3320      	adds	r3, #32
    f4e0:	681b      	ldr	r3, [r3, #0]
}
    f4e2:	4618      	mov	r0, r3
    f4e4:	370c      	adds	r7, #12
    f4e6:	46bd      	mov	sp, r7
    f4e8:	bc80      	pop	{r7}
    f4ea:	4770      	bx	lr

0000f4ec <_gpio_get_level>:
{
    f4ec:	b580      	push	{r7, lr}
    f4ee:	b086      	sub	sp, #24
    f4f0:	af00      	add	r7, sp, #0
    f4f2:	4603      	mov	r3, r0
    f4f4:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
    f4f6:	f107 030c 	add.w	r3, r7, #12
    f4fa:	4618      	mov	r0, r3
    f4fc:	4b13      	ldr	r3, [pc, #76]	; (f54c <_gpio_get_level+0x60>)
    f4fe:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f500:	79fb      	ldrb	r3, [r7, #7]
    f502:	4619      	mov	r1, r3
    f504:	4812      	ldr	r0, [pc, #72]	; (f550 <_gpio_get_level+0x64>)
    f506:	4b13      	ldr	r3, [pc, #76]	; (f554 <_gpio_get_level+0x68>)
    f508:	4798      	blx	r3
    f50a:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f50c:	79fb      	ldrb	r3, [r7, #7]
    f50e:	4619      	mov	r1, r3
    f510:	480f      	ldr	r0, [pc, #60]	; (f550 <_gpio_get_level+0x64>)
    f512:	4b11      	ldr	r3, [pc, #68]	; (f558 <_gpio_get_level+0x6c>)
    f514:	4798      	blx	r3
    f516:	4602      	mov	r2, r0
    f518:	697b      	ldr	r3, [r7, #20]
    f51a:	43db      	mvns	r3, r3
    f51c:	4013      	ands	r3, r2
    f51e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f520:	79fb      	ldrb	r3, [r7, #7]
    f522:	4619      	mov	r1, r3
    f524:	480a      	ldr	r0, [pc, #40]	; (f550 <_gpio_get_level+0x64>)
    f526:	4b0d      	ldr	r3, [pc, #52]	; (f55c <_gpio_get_level+0x70>)
    f528:	4798      	blx	r3
    f52a:	4602      	mov	r2, r0
    f52c:	697b      	ldr	r3, [r7, #20]
    f52e:	4013      	ands	r3, r2
    f530:	693a      	ldr	r2, [r7, #16]
    f532:	4313      	orrs	r3, r2
    f534:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    f536:	f107 030c 	add.w	r3, r7, #12
    f53a:	4618      	mov	r0, r3
    f53c:	4b08      	ldr	r3, [pc, #32]	; (f560 <_gpio_get_level+0x74>)
    f53e:	4798      	blx	r3
	return tmp;
    f540:	693b      	ldr	r3, [r7, #16]
}
    f542:	4618      	mov	r0, r3
    f544:	3718      	adds	r7, #24
    f546:	46bd      	mov	sp, r7
    f548:	bd80      	pop	{r7, pc}
    f54a:	bf00      	nop
    f54c:	0000b7a9 	.word	0x0000b7a9
    f550:	41008000 	.word	0x41008000
    f554:	0000f489 	.word	0x0000f489
    f558:	0000f4cb 	.word	0x0000f4cb
    f55c:	0000f4a9 	.word	0x0000f4a9
    f560:	0000b7cf 	.word	0x0000b7cf

0000f564 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f564:	b580      	push	{r7, lr}
    f566:	b082      	sub	sp, #8
    f568:	af00      	add	r7, sp, #0
    f56a:	4603      	mov	r3, r0
    f56c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f56e:	79fb      	ldrb	r3, [r7, #7]
    f570:	115b      	asrs	r3, r3, #5
    f572:	b2db      	uxtb	r3, r3
    f574:	4618      	mov	r0, r3
    f576:	4b09      	ldr	r3, [pc, #36]	; (f59c <gpio_get_pin_level+0x38>)
    f578:	4798      	blx	r3
    f57a:	4601      	mov	r1, r0
    f57c:	79fb      	ldrb	r3, [r7, #7]
    f57e:	f003 031f 	and.w	r3, r3, #31
    f582:	2201      	movs	r2, #1
    f584:	fa02 f303 	lsl.w	r3, r2, r3
    f588:	400b      	ands	r3, r1
    f58a:	2b00      	cmp	r3, #0
    f58c:	bf14      	ite	ne
    f58e:	2301      	movne	r3, #1
    f590:	2300      	moveq	r3, #0
    f592:	b2db      	uxtb	r3, r3
}
    f594:	4618      	mov	r0, r3
    f596:	3708      	adds	r7, #8
    f598:	46bd      	mov	sp, r7
    f59a:	bd80      	pop	{r7, pc}
    f59c:	0000f4ed 	.word	0x0000f4ed

0000f5a0 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    f5a0:	b480      	push	{r7}
    f5a2:	b083      	sub	sp, #12
    f5a4:	af00      	add	r7, sp, #0
    f5a6:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    f5a8:	4b06      	ldr	r3, [pc, #24]	; (f5c4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f5aa:	681b      	ldr	r3, [r3, #0]
    f5ac:	2201      	movs	r2, #1
    f5ae:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    f5b0:	4b04      	ldr	r3, [pc, #16]	; (f5c4 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f5b2:	681b      	ldr	r3, [r3, #0]
    f5b4:	2200      	movs	r2, #0
    f5b6:	705a      	strb	r2, [r3, #1]
}
    f5b8:	bf00      	nop
    f5ba:	370c      	adds	r7, #12
    f5bc:	46bd      	mov	sp, r7
    f5be:	bc80      	pop	{r7}
    f5c0:	4770      	bx	lr
    f5c2:	bf00      	nop
    f5c4:	20003054 	.word	0x20003054

0000f5c8 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    f5c8:	b580      	push	{r7, lr}
    f5ca:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    f5cc:	2040      	movs	r0, #64	; 0x40
    f5ce:	4b0a      	ldr	r3, [pc, #40]	; (f5f8 <_ZL10USBPluggedv+0x30>)
    f5d0:	4798      	blx	r3
    f5d2:	4603      	mov	r3, r0
    f5d4:	2b00      	cmp	r3, #0
    f5d6:	d004      	beq.n	f5e2 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    f5d8:	4b08      	ldr	r3, [pc, #32]	; (f5fc <_ZL10USBPluggedv+0x34>)
    f5da:	681b      	ldr	r3, [r3, #0]
    f5dc:	2201      	movs	r2, #1
    f5de:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    f5e0:	e007      	b.n	f5f2 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    f5e2:	4b06      	ldr	r3, [pc, #24]	; (f5fc <_ZL10USBPluggedv+0x34>)
    f5e4:	681b      	ldr	r3, [r3, #0]
    f5e6:	2200      	movs	r2, #0
    f5e8:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    f5ea:	4b04      	ldr	r3, [pc, #16]	; (f5fc <_ZL10USBPluggedv+0x34>)
    f5ec:	681b      	ldr	r3, [r3, #0]
    f5ee:	2200      	movs	r2, #0
    f5f0:	701a      	strb	r2, [r3, #0]
}
    f5f2:	bf00      	nop
    f5f4:	bd80      	pop	{r7, pc}
    f5f6:	bf00      	nop
    f5f8:	0000f565 	.word	0x0000f565
    f5fc:	20003054 	.word	0x20003054

0000f600 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    f600:	b480      	push	{r7}
    f602:	b083      	sub	sp, #12
    f604:	af00      	add	r7, sp, #0
    f606:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    f608:	4a04      	ldr	r2, [pc, #16]	; (f61c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    f60a:	687b      	ldr	r3, [r7, #4]
    f60c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    f60e:	687b      	ldr	r3, [r7, #4]
    f610:	4618      	mov	r0, r3
    f612:	370c      	adds	r7, #12
    f614:	46bd      	mov	sp, r7
    f616:	bc80      	pop	{r7}
    f618:	4770      	bx	lr
    f61a:	bf00      	nop
    f61c:	20003054 	.word	0x20003054

0000f620 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    f620:	b480      	push	{r7}
    f622:	b083      	sub	sp, #12
    f624:	af00      	add	r7, sp, #0
    f626:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    f628:	687b      	ldr	r3, [r7, #4]
    f62a:	4618      	mov	r0, r3
    f62c:	370c      	adds	r7, #12
    f62e:	46bd      	mov	sp, r7
    f630:	bc80      	pop	{r7}
    f632:	4770      	bx	lr

0000f634 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    f634:	b580      	push	{r7, lr}
    f636:	b082      	sub	sp, #8
    f638:	af00      	add	r7, sp, #0
    f63a:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    f63c:	491e      	ldr	r1, [pc, #120]	; (f6b8 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    f63e:	2040      	movs	r0, #64	; 0x40
    f640:	4b1e      	ldr	r3, [pc, #120]	; (f6bc <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    f642:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    f644:	481e      	ldr	r0, [pc, #120]	; (f6c0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f646:	4b1f      	ldr	r3, [pc, #124]	; (f6c4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f648:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    f64a:	2040      	movs	r0, #64	; 0x40
    f64c:	4b1e      	ldr	r3, [pc, #120]	; (f6c8 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    f64e:	4798      	blx	r3
    f650:	4603      	mov	r3, r0
    f652:	461a      	mov	r2, r3
    f654:	687b      	ldr	r3, [r7, #4]
    f656:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    f658:	687b      	ldr	r3, [r7, #4]
    f65a:	78db      	ldrb	r3, [r3, #3]
    f65c:	2b00      	cmp	r3, #0
    f65e:	d021      	beq.n	f6a4 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    f660:	687b      	ldr	r3, [r7, #4]
    f662:	2200      	movs	r2, #0
    f664:	709a      	strb	r2, [r3, #2]
			plugged=true;
    f666:	687b      	ldr	r3, [r7, #4]
    f668:	2201      	movs	r2, #1
    f66a:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    f66c:	f44f 7216 	mov.w	r2, #600	; 0x258
    f670:	4916      	ldr	r1, [pc, #88]	; (f6cc <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    f672:	4813      	ldr	r0, [pc, #76]	; (f6c0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f674:	4b16      	ldr	r3, [pc, #88]	; (f6d0 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    f676:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    f678:	4816      	ldr	r0, [pc, #88]	; (f6d4 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    f67a:	4b17      	ldr	r3, [pc, #92]	; (f6d8 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    f67c:	4798      	blx	r3
    f67e:	4603      	mov	r3, r0
    f680:	f083 0301 	eor.w	r3, r3, #1
    f684:	b2db      	uxtb	r3, r3
    f686:	2b00      	cmp	r3, #0
    f688:	d008      	beq.n	f69c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    f68a:	687b      	ldr	r3, [r7, #4]
    f68c:	789b      	ldrb	r3, [r3, #2]
    f68e:	b2db      	uxtb	r3, r3
    f690:	2b00      	cmp	r3, #0
    f692:	d0f1      	beq.n	f678 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    f694:	687b      	ldr	r3, [r7, #4]
    f696:	2200      	movs	r2, #0
    f698:	701a      	strb	r2, [r3, #0]
					return;
    f69a:	e009      	b.n	f6b0 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    f69c:	4808      	ldr	r0, [pc, #32]	; (f6c0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f69e:	4b0f      	ldr	r3, [pc, #60]	; (f6dc <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    f6a0:	4798      	blx	r3
    f6a2:	e005      	b.n	f6b0 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    f6a4:	687b      	ldr	r3, [r7, #4]
    f6a6:	2200      	movs	r2, #0
    f6a8:	701a      	strb	r2, [r3, #0]
			plugged=false;
    f6aa:	687b      	ldr	r3, [r7, #4]
    f6ac:	2200      	movs	r2, #0
    f6ae:	705a      	strb	r2, [r3, #1]
		}
		
}
    f6b0:	3708      	adds	r7, #8
    f6b2:	46bd      	mov	sp, r7
    f6b4:	bd80      	pop	{r7, pc}
    f6b6:	bf00      	nop
    f6b8:	0000f5c9 	.word	0x0000f5c9
    f6bc:	000025f9 	.word	0x000025f9
    f6c0:	20002ff4 	.word	0x20002ff4
    f6c4:	0000e959 	.word	0x0000e959
    f6c8:	0000f565 	.word	0x0000f565
    f6cc:	0000f5a1 	.word	0x0000f5a1
    f6d0:	0000eaa1 	.word	0x0000eaa1
    f6d4:	20002ef4 	.word	0x20002ef4
    f6d8:	0000ef71 	.word	0x0000ef71
    f6dc:	0000e9cd 	.word	0x0000e9cd

0000f6e0 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    f6e0:	b580      	push	{r7, lr}
    f6e2:	b082      	sub	sp, #8
    f6e4:	af00      	add	r7, sp, #0
    f6e6:	6078      	str	r0, [r7, #4]
    f6e8:	6039      	str	r1, [r7, #0]
    f6ea:	687b      	ldr	r3, [r7, #4]
    f6ec:	2b01      	cmp	r3, #1
    f6ee:	d14c      	bne.n	f78a <_Z41__static_initialization_and_destruction_0ii+0xaa>
    f6f0:	683b      	ldr	r3, [r7, #0]
    f6f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f6f6:	4293      	cmp	r3, r2
    f6f8:	d147      	bne.n	f78a <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f6fa:	4926      	ldr	r1, [pc, #152]	; (f794 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    f6fc:	4826      	ldr	r0, [pc, #152]	; (f798 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    f6fe:	4b27      	ldr	r3, [pc, #156]	; (f79c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f700:	4798      	blx	r3
    f702:	4a27      	ldr	r2, [pc, #156]	; (f7a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f704:	4927      	ldr	r1, [pc, #156]	; (f7a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f706:	4824      	ldr	r0, [pc, #144]	; (f798 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    f708:	4b27      	ldr	r3, [pc, #156]	; (f7a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f70a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f70c:	4927      	ldr	r1, [pc, #156]	; (f7ac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    f70e:	4828      	ldr	r0, [pc, #160]	; (f7b0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f710:	4b22      	ldr	r3, [pc, #136]	; (f79c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f712:	4798      	blx	r3
    f714:	4a22      	ldr	r2, [pc, #136]	; (f7a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f716:	4923      	ldr	r1, [pc, #140]	; (f7a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f718:	4825      	ldr	r0, [pc, #148]	; (f7b0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    f71a:	4b23      	ldr	r3, [pc, #140]	; (f7a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f71c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f71e:	4925      	ldr	r1, [pc, #148]	; (f7b4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f720:	4825      	ldr	r0, [pc, #148]	; (f7b8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f722:	4b1e      	ldr	r3, [pc, #120]	; (f79c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f724:	4798      	blx	r3
    f726:	4a1e      	ldr	r2, [pc, #120]	; (f7a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f728:	491e      	ldr	r1, [pc, #120]	; (f7a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f72a:	4823      	ldr	r0, [pc, #140]	; (f7b8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f72c:	4b1e      	ldr	r3, [pc, #120]	; (f7a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f72e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f730:	4922      	ldr	r1, [pc, #136]	; (f7bc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f732:	4823      	ldr	r0, [pc, #140]	; (f7c0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f734:	4b19      	ldr	r3, [pc, #100]	; (f79c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f736:	4798      	blx	r3
    f738:	4a19      	ldr	r2, [pc, #100]	; (f7a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f73a:	491a      	ldr	r1, [pc, #104]	; (f7a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f73c:	4820      	ldr	r0, [pc, #128]	; (f7c0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f73e:	4b1a      	ldr	r3, [pc, #104]	; (f7a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f740:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f742:	4920      	ldr	r1, [pc, #128]	; (f7c4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f744:	4820      	ldr	r0, [pc, #128]	; (f7c8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f746:	4b15      	ldr	r3, [pc, #84]	; (f79c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f748:	4798      	blx	r3
    f74a:	4a15      	ldr	r2, [pc, #84]	; (f7a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f74c:	4915      	ldr	r1, [pc, #84]	; (f7a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f74e:	481e      	ldr	r0, [pc, #120]	; (f7c8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f750:	4b15      	ldr	r3, [pc, #84]	; (f7a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f752:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f754:	491d      	ldr	r1, [pc, #116]	; (f7cc <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f756:	481e      	ldr	r0, [pc, #120]	; (f7d0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f758:	4b10      	ldr	r3, [pc, #64]	; (f79c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f75a:	4798      	blx	r3
    f75c:	4a10      	ldr	r2, [pc, #64]	; (f7a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f75e:	4911      	ldr	r1, [pc, #68]	; (f7a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f760:	481b      	ldr	r0, [pc, #108]	; (f7d0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f762:	4b11      	ldr	r3, [pc, #68]	; (f7a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f764:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f766:	491b      	ldr	r1, [pc, #108]	; (f7d4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f768:	481b      	ldr	r0, [pc, #108]	; (f7d8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f76a:	4b0c      	ldr	r3, [pc, #48]	; (f79c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f76c:	4798      	blx	r3
    f76e:	4a0c      	ldr	r2, [pc, #48]	; (f7a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f770:	490c      	ldr	r1, [pc, #48]	; (f7a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f772:	4819      	ldr	r0, [pc, #100]	; (f7d8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f774:	4b0c      	ldr	r3, [pc, #48]	; (f7a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f776:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f778:	4918      	ldr	r1, [pc, #96]	; (f7dc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f77a:	4819      	ldr	r0, [pc, #100]	; (f7e0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f77c:	4b07      	ldr	r3, [pc, #28]	; (f79c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    f77e:	4798      	blx	r3
    f780:	4a07      	ldr	r2, [pc, #28]	; (f7a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    f782:	4908      	ldr	r1, [pc, #32]	; (f7a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    f784:	4816      	ldr	r0, [pc, #88]	; (f7e0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f786:	4b08      	ldr	r3, [pc, #32]	; (f7a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    f788:	4798      	blx	r3
    f78a:	bf00      	nop
    f78c:	3708      	adds	r7, #8
    f78e:	46bd      	mov	sp, r7
    f790:	bd80      	pop	{r7, pc}
    f792:	bf00      	nop
    f794:	2000a5a8 	.word	0x2000a5a8
    f798:	20002f54 	.word	0x20002f54
    f79c:	0000e86d 	.word	0x0000e86d
    f7a0:	20000000 	.word	0x20000000
    f7a4:	0000e8a5 	.word	0x0000e8a5
    f7a8:	00010289 	.word	0x00010289
    f7ac:	2000a63c 	.word	0x2000a63c
    f7b0:	20002f74 	.word	0x20002f74
    f7b4:	2000a760 	.word	0x2000a760
    f7b8:	20002f94 	.word	0x20002f94
    f7bc:	2000a65c 	.word	0x2000a65c
    f7c0:	20002fb4 	.word	0x20002fb4
    f7c4:	2000a720 	.word	0x2000a720
    f7c8:	20002fd4 	.word	0x20002fd4
    f7cc:	2000a740 	.word	0x2000a740
    f7d0:	20002ff4 	.word	0x20002ff4
    f7d4:	2000a618 	.word	0x2000a618
    f7d8:	20003014 	.word	0x20003014
    f7dc:	2000a6b8 	.word	0x2000a6b8
    f7e0:	20003034 	.word	0x20003034

0000f7e4 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    f7e4:	b580      	push	{r7, lr}
    f7e6:	af00      	add	r7, sp, #0
    f7e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f7ec:	2001      	movs	r0, #1
    f7ee:	4b01      	ldr	r3, [pc, #4]	; (f7f4 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    f7f0:	4798      	blx	r3
    f7f2:	bd80      	pop	{r7, pc}
    f7f4:	0000f6e1 	.word	0x0000f6e1

0000f7f8 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    f7f8:	b480      	push	{r7}
    f7fa:	b083      	sub	sp, #12
    f7fc:	af00      	add	r7, sp, #0
    f7fe:	6078      	str	r0, [r7, #4]
    return (void *)0;
    f800:	2300      	movs	r3, #0
	}
    f802:	4618      	mov	r0, r3
    f804:	370c      	adds	r7, #12
    f806:	46bd      	mov	sp, r7
    f808:	bc80      	pop	{r7}
    f80a:	4770      	bx	lr

0000f80c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    f80c:	b480      	push	{r7}
    f80e:	af00      	add	r7, sp, #0
		}
    f810:	bf00      	nop
    f812:	46bd      	mov	sp, r7
    f814:	bc80      	pop	{r7}
    f816:	4770      	bx	lr

0000f818 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
    f818:	b480      	push	{r7}
    f81a:	b083      	sub	sp, #12
    f81c:	af00      	add	r7, sp, #0
    f81e:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
    f820:	4a07      	ldr	r2, [pc, #28]	; (f840 <_ZN18SingleHeater_ClassC1Ev+0x28>)
    f822:	687b      	ldr	r3, [r7, #4]
    f824:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
    f826:	687b      	ldr	r3, [r7, #4]
    f828:	4a06      	ldr	r2, [pc, #24]	; (f844 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
    f82a:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
    f82c:	687b      	ldr	r3, [r7, #4]
    f82e:	2200      	movs	r2, #0
    f830:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
    f832:	687b      	ldr	r3, [r7, #4]
    f834:	4618      	mov	r0, r3
    f836:	370c      	adds	r7, #12
    f838:	46bd      	mov	sp, r7
    f83a:	bc80      	pop	{r7}
    f83c:	4770      	bx	lr
    f83e:	bf00      	nop
    f840:	20003070 	.word	0x20003070
    f844:	20003058 	.word	0x20003058

0000f848 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
    f848:	b480      	push	{r7}
    f84a:	b083      	sub	sp, #12
    f84c:	af00      	add	r7, sp, #0
    f84e:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
    f850:	687b      	ldr	r3, [r7, #4]
    f852:	4618      	mov	r0, r3
    f854:	370c      	adds	r7, #12
    f856:	46bd      	mov	sp, r7
    f858:	bc80      	pop	{r7}
    f85a:	4770      	bx	lr

0000f85c <_ZN18SingleHeater_Class4InitEv>:
static void	HeaterStatusChanged(void){
	
	ptrSingleHeaterClass->heaterStatusChanged=true;
}

bool SingleHeater_Class::Init(void){
    f85c:	b580      	push	{r7, lr}
    f85e:	b082      	sub	sp, #8
    f860:	af00      	add	r7, sp, #0
    f862:	6078      	str	r0, [r7, #4]
	heater_id=0;
    f864:	687b      	ldr	r3, [r7, #4]
    f866:	2200      	movs	r2, #0
    f868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		i2c->Init();
    f86c:	687b      	ldr	r3, [r7, #4]
    f86e:	699b      	ldr	r3, [r3, #24]
    f870:	4618      	mov	r0, r3
    f872:	4b15      	ldr	r3, [pc, #84]	; (f8c8 <_ZN18SingleHeater_Class4InitEv+0x6c>)
    f874:	4798      	blx	r3
		if (i2c->isOK)
    f876:	687b      	ldr	r3, [r7, #4]
    f878:	699b      	ldr	r3, [r3, #24]
    f87a:	7a5b      	ldrb	r3, [r3, #9]
    f87c:	b2db      	uxtb	r3, r3
    f87e:	2b00      	cmp	r3, #0
    f880:	d014      	beq.n	f8ac <_ZN18SingleHeater_Class4InitEv+0x50>
		{
			
			//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
			InitExpanderArray();
    f882:	6878      	ldr	r0, [r7, #4]
    f884:	4b11      	ldr	r3, [pc, #68]	; (f8cc <_ZN18SingleHeater_Class4InitEv+0x70>)
    f886:	4798      	blx	r3
			expanders[0]->SetPortInput();
    f888:	687b      	ldr	r3, [r7, #4]
    f88a:	68db      	ldr	r3, [r3, #12]
    f88c:	4618      	mov	r0, r3
    f88e:	4b10      	ldr	r3, [pc, #64]	; (f8d0 <_ZN18SingleHeater_Class4InitEv+0x74>)
    f890:	4798      	blx	r3
			expanders[1]->SetPortOutput();
    f892:	687b      	ldr	r3, [r7, #4]
    f894:	691b      	ldr	r3, [r3, #16]
    f896:	4618      	mov	r0, r3
    f898:	4b0e      	ldr	r3, [pc, #56]	; (f8d4 <_ZN18SingleHeater_Class4InitEv+0x78>)
    f89a:	4798      	blx	r3
			isOK=SelfTest();
    f89c:	6878      	ldr	r0, [r7, #4]
    f89e:	4b0e      	ldr	r3, [pc, #56]	; (f8d8 <_ZN18SingleHeater_Class4InitEv+0x7c>)
    f8a0:	4798      	blx	r3
    f8a2:	4603      	mov	r3, r0
    f8a4:	461a      	mov	r2, r3
    f8a6:	687b      	ldr	r3, [r7, #4]
    f8a8:	701a      	strb	r2, [r3, #0]
    f8aa:	e000      	b.n	f8ae <_ZN18SingleHeater_Class4InitEv+0x52>
		}
		else
		{
			asm("nop");
    f8ac:	bf00      	nop
		}
		isOK=i2c->isOK;
    f8ae:	687b      	ldr	r3, [r7, #4]
    f8b0:	699b      	ldr	r3, [r3, #24]
    f8b2:	7a5b      	ldrb	r3, [r3, #9]
    f8b4:	b2da      	uxtb	r2, r3
    f8b6:	687b      	ldr	r3, [r7, #4]
    f8b8:	701a      	strb	r2, [r3, #0]
		return isOK;
    f8ba:	687b      	ldr	r3, [r7, #4]
    f8bc:	781b      	ldrb	r3, [r3, #0]
    f8be:	b2db      	uxtb	r3, r3
}
    f8c0:	4618      	mov	r0, r3
    f8c2:	3708      	adds	r7, #8
    f8c4:	46bd      	mov	sp, r7
    f8c6:	bd80      	pop	{r7, pc}
    f8c8:	0000d69d 	.word	0x0000d69d
    f8cc:	0000f8dd 	.word	0x0000f8dd
    f8d0:	00010015 	.word	0x00010015
    f8d4:	00010059 	.word	0x00010059
    f8d8:	0000fa39 	.word	0x0000fa39

0000f8dc <_ZN18SingleHeater_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
}

uint8_t SingleHeater_Class::InitExpanderArray(void){
    f8dc:	b580      	push	{r7, lr}
    f8de:	b084      	sub	sp, #16
    f8e0:	af00      	add	r7, sp, #0
    f8e2:	6078      	str	r0, [r7, #4]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
    f8e4:	2300      	movs	r3, #0
    f8e6:	60fb      	str	r3, [r7, #12]
    f8e8:	68fb      	ldr	r3, [r7, #12]
    f8ea:	2b01      	cmp	r3, #1
    f8ec:	dc2d      	bgt.n	f94a <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x6e>
	{
		expanders[i]=&expandersStatic[i];
    f8ee:	68fa      	ldr	r2, [r7, #12]
    f8f0:	4613      	mov	r3, r2
    f8f2:	00db      	lsls	r3, r3, #3
    f8f4:	1a9b      	subs	r3, r3, r2
    f8f6:	009b      	lsls	r3, r3, #2
    f8f8:	4a16      	ldr	r2, [pc, #88]	; (f954 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x78>)
    f8fa:	441a      	add	r2, r3
    f8fc:	6879      	ldr	r1, [r7, #4]
    f8fe:	68fb      	ldr	r3, [r7, #12]
    f900:	3302      	adds	r3, #2
    f902:	009b      	lsls	r3, r3, #2
    f904:	440b      	add	r3, r1
    f906:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
    f908:	687a      	ldr	r2, [r7, #4]
    f90a:	68fb      	ldr	r3, [r7, #12]
    f90c:	3302      	adds	r3, #2
    f90e:	009b      	lsls	r3, r3, #2
    f910:	4413      	add	r3, r2
    f912:	685a      	ldr	r2, [r3, #4]
    f914:	687b      	ldr	r3, [r7, #4]
    f916:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
    f918:	687b      	ldr	r3, [r7, #4]
    f91a:	6958      	ldr	r0, [r3, #20]
    f91c:	68fb      	ldr	r3, [r7, #12]
    f91e:	b2da      	uxtb	r2, r3
    f920:	687b      	ldr	r3, [r7, #4]
    f922:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f926:	005b      	lsls	r3, r3, #1
    f928:	b2db      	uxtb	r3, r3
    f92a:	4313      	orrs	r3, r2
    f92c:	b2db      	uxtb	r3, r3
    f92e:	f043 0320 	orr.w	r3, r3, #32
    f932:	b2db      	uxtb	r3, r3
    f934:	b25b      	sxtb	r3, r3
    f936:	b2d9      	uxtb	r1, r3
    f938:	687b      	ldr	r3, [r7, #4]
    f93a:	699b      	ldr	r3, [r3, #24]
    f93c:	461a      	mov	r2, r3
    f93e:	4b06      	ldr	r3, [pc, #24]	; (f958 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x7c>)
    f940:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
    f942:	68fb      	ldr	r3, [r7, #12]
    f944:	3301      	adds	r3, #1
    f946:	60fb      	str	r3, [r7, #12]
    f948:	e7ce      	b.n	f8e8 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0xc>
	}
	
}
    f94a:	bf00      	nop
    f94c:	4618      	mov	r0, r3
    f94e:	3710      	adds	r7, #16
    f950:	46bd      	mov	sp, r7
    f952:	bd80      	pop	{r7, pc}
    f954:	20003074 	.word	0x20003074
    f958:	0000fead 	.word	0x0000fead

0000f95c <_ZN18SingleHeater_Class10ReadStatusEv>:
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
	}
	
}

uint8_t	SingleHeater_Class::ReadStatus(void){
    f95c:	b580      	push	{r7, lr}
    f95e:	b084      	sub	sp, #16
    f960:	af00      	add	r7, sp, #0
    f962:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
    f964:	687b      	ldr	r3, [r7, #4]
    f966:	68db      	ldr	r3, [r3, #12]
    f968:	4618      	mov	r0, r3
    f96a:	4b16      	ldr	r3, [pc, #88]	; (f9c4 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
    f96c:	4798      	blx	r3
    f96e:	4603      	mov	r3, r0
    f970:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
    f972:	7bbb      	ldrb	r3, [r7, #14]
    f974:	f003 0301 	and.w	r3, r3, #1
    f978:	2b00      	cmp	r3, #0
    f97a:	bf14      	ite	ne
    f97c:	2301      	movne	r3, #1
    f97e:	2300      	moveq	r3, #0
    f980:	b2da      	uxtb	r2, r3
    f982:	687b      	ldr	r3, [r7, #4]
    f984:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
    f986:	2300      	movs	r3, #0
    f988:	73fb      	strb	r3, [r7, #15]
    f98a:	7bfb      	ldrb	r3, [r7, #15]
    f98c:	2b03      	cmp	r3, #3
    f98e:	dc14      	bgt.n	f9ba <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
    f990:	7bfb      	ldrb	r3, [r7, #15]
    f992:	7bb9      	ldrb	r1, [r7, #14]
    f994:	7bfa      	ldrb	r2, [r7, #15]
    f996:	3201      	adds	r2, #1
    f998:	fa41 f202 	asr.w	r2, r1, r2
    f99c:	f002 0201 	and.w	r2, r2, #1
    f9a0:	2a00      	cmp	r2, #0
    f9a2:	bf14      	ite	ne
    f9a4:	2201      	movne	r2, #1
    f9a6:	2200      	moveq	r2, #0
    f9a8:	b2d1      	uxtb	r1, r2
    f9aa:	687a      	ldr	r2, [r7, #4]
    f9ac:	4413      	add	r3, r2
    f9ae:	460a      	mov	r2, r1
    f9b0:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
    f9b2:	7bfb      	ldrb	r3, [r7, #15]
    f9b4:	3301      	adds	r3, #1
    f9b6:	73fb      	strb	r3, [r7, #15]
    f9b8:	e7e7      	b.n	f98a <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
    f9ba:	7bbb      	ldrb	r3, [r7, #14]
}
    f9bc:	4618      	mov	r0, r3
    f9be:	3710      	adds	r7, #16
    f9c0:	46bd      	mov	sp, r7
    f9c2:	bd80      	pop	{r7, pc}
    f9c4:	0000ff91 	.word	0x0000ff91

0000f9c8 <_ZN18SingleHeater_Class11EnableIndexEh>:
	{
		enables[i]=!(r&(0x01<<i));
	}
	return r;
}
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
    f9c8:	b580      	push	{r7, lr}
    f9ca:	b082      	sub	sp, #8
    f9cc:	af00      	add	r7, sp, #0
    f9ce:	6078      	str	r0, [r7, #4]
    f9d0:	460b      	mov	r3, r1
    f9d2:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
    f9d4:	687b      	ldr	r3, [r7, #4]
    f9d6:	691b      	ldr	r3, [r3, #16]
    f9d8:	78f9      	ldrb	r1, [r7, #3]
    f9da:	2200      	movs	r2, #0
    f9dc:	4618      	mov	r0, r3
    f9de:	4b06      	ldr	r3, [pc, #24]	; (f9f8 <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
    f9e0:	4798      	blx	r3
    f9e2:	4603      	mov	r3, r0
    f9e4:	461a      	mov	r2, r3
    f9e6:	687b      	ldr	r3, [r7, #4]
    f9e8:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
    f9ea:	687b      	ldr	r3, [r7, #4]
    f9ec:	7adb      	ldrb	r3, [r3, #11]
}
    f9ee:	4618      	mov	r0, r3
    f9f0:	3708      	adds	r7, #8
    f9f2:	46bd      	mov	sp, r7
    f9f4:	bd80      	pop	{r7, pc}
    f9f6:	bf00      	nop
    f9f8:	00010151 	.word	0x00010151

0000f9fc <_ZN18SingleHeater_Class12DisableIndexEh>:
	{
		DisableIndex(i);
	}
}

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
    f9fc:	b580      	push	{r7, lr}
    f9fe:	b082      	sub	sp, #8
    fa00:	af00      	add	r7, sp, #0
    fa02:	6078      	str	r0, [r7, #4]
    fa04:	460b      	mov	r3, r1
    fa06:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
    fa08:	687b      	ldr	r3, [r7, #4]
    fa0a:	691b      	ldr	r3, [r3, #16]
    fa0c:	78f9      	ldrb	r1, [r7, #3]
    fa0e:	2201      	movs	r2, #1
    fa10:	4618      	mov	r0, r3
    fa12:	4b08      	ldr	r3, [pc, #32]	; (fa34 <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
    fa14:	4798      	blx	r3
    fa16:	4603      	mov	r3, r0
    fa18:	2b00      	cmp	r3, #0
    fa1a:	d001      	beq.n	fa20 <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
    fa1c:	2200      	movs	r2, #0
    fa1e:	e000      	b.n	fa22 <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
    fa20:	2201      	movs	r2, #1
    fa22:	687b      	ldr	r3, [r7, #4]
    fa24:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
    fa26:	687b      	ldr	r3, [r7, #4]
    fa28:	7adb      	ldrb	r3, [r3, #11]
}
    fa2a:	4618      	mov	r0, r3
    fa2c:	3708      	adds	r7, #8
    fa2e:	46bd      	mov	sp, r7
    fa30:	bd80      	pop	{r7, pc}
    fa32:	bf00      	nop
    fa34:	00010151 	.word	0x00010151

0000fa38 <_ZN18SingleHeater_Class8SelfTestEv>:
	}
	return powerLevel;
}


bool SingleHeater_Class::SelfTest(void){
    fa38:	b580      	push	{r7, lr}
    fa3a:	b084      	sub	sp, #16
    fa3c:	af00      	add	r7, sp, #0
    fa3e:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
    fa40:	2300      	movs	r3, #0
    fa42:	73bb      	strb	r3, [r7, #14]
    fa44:	7bbb      	ldrb	r3, [r7, #14]
    fa46:	2b03      	cmp	r3, #3
    fa48:	dc1f      	bgt.n	fa8a <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
		EnableIndex(i);
    fa4a:	7bbb      	ldrb	r3, [r7, #14]
    fa4c:	4619      	mov	r1, r3
    fa4e:	6878      	ldr	r0, [r7, #4]
    fa50:	4b10      	ldr	r3, [pc, #64]	; (fa94 <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
    fa52:	4798      	blx	r3
		delay_ms(100);
    fa54:	2064      	movs	r0, #100	; 0x64
    fa56:	4b10      	ldr	r3, [pc, #64]	; (fa98 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
    fa58:	4798      	blx	r3
		DisableIndex(i);
    fa5a:	7bbb      	ldrb	r3, [r7, #14]
    fa5c:	4619      	mov	r1, r3
    fa5e:	6878      	ldr	r0, [r7, #4]
    fa60:	4b0e      	ldr	r3, [pc, #56]	; (fa9c <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
    fa62:	4798      	blx	r3
		ReadStatus();
    fa64:	6878      	ldr	r0, [r7, #4]
    fa66:	4b0e      	ldr	r3, [pc, #56]	; (faa0 <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
    fa68:	4798      	blx	r3
		if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
    fa6a:	7bbb      	ldrb	r3, [r7, #14]
    fa6c:	687a      	ldr	r2, [r7, #4]
    fa6e:	4413      	add	r3, r2
    fa70:	78db      	ldrb	r3, [r3, #3]
    fa72:	2b00      	cmp	r3, #0
    fa74:	d002      	beq.n	fa7c <_ZN18SingleHeater_Class8SelfTestEv+0x44>
		{
			result=true;
    fa76:	2301      	movs	r3, #1
    fa78:	73fb      	strb	r3, [r7, #15]
    fa7a:	e002      	b.n	fa82 <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
		} 
		else
		{
			result=false;
    fa7c:	2300      	movs	r3, #0
    fa7e:	73fb      	strb	r3, [r7, #15]
			break;
    fa80:	e003      	b.n	fa8a <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
    fa82:	7bbb      	ldrb	r3, [r7, #14]
    fa84:	3301      	adds	r3, #1
    fa86:	73bb      	strb	r3, [r7, #14]
    fa88:	e7dc      	b.n	fa44 <_ZN18SingleHeater_Class8SelfTestEv+0xc>
		}
			
			
	}
	
	return result;
    fa8a:	7bfb      	ldrb	r3, [r7, #15]
}
    fa8c:	4618      	mov	r0, r3
    fa8e:	3710      	adds	r7, #16
    fa90:	46bd      	mov	sp, r7
    fa92:	bd80      	pop	{r7, pc}
    fa94:	0000f9c9 	.word	0x0000f9c9
    fa98:	00002565 	.word	0x00002565
    fa9c:	0000f9fd 	.word	0x0000f9fd
    faa0:	0000f95d 	.word	0x0000f95d

0000faa4 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    faa4:	b590      	push	{r4, r7, lr}
    faa6:	b083      	sub	sp, #12
    faa8:	af00      	add	r7, sp, #0
    faaa:	6078      	str	r0, [r7, #4]
    faac:	4c05      	ldr	r4, [pc, #20]	; (fac4 <__tcf_0+0x20>)
    faae:	4b06      	ldr	r3, [pc, #24]	; (fac8 <__tcf_0+0x24>)
    fab0:	429c      	cmp	r4, r3
    fab2:	d004      	beq.n	fabe <__tcf_0+0x1a>
    fab4:	3c1c      	subs	r4, #28
    fab6:	4620      	mov	r0, r4
    fab8:	4b04      	ldr	r3, [pc, #16]	; (facc <__tcf_0+0x28>)
    faba:	4798      	blx	r3
    fabc:	e7f7      	b.n	faae <__tcf_0+0xa>
    fabe:	370c      	adds	r7, #12
    fac0:	46bd      	mov	sp, r7
    fac2:	bd90      	pop	{r4, r7, pc}
    fac4:	200030ac 	.word	0x200030ac
    fac8:	20003074 	.word	0x20003074
    facc:	0000fe99 	.word	0x0000fe99

0000fad0 <_Z41__static_initialization_and_destruction_0ii>:

    fad0:	b5b0      	push	{r4, r5, r7, lr}
    fad2:	b082      	sub	sp, #8
    fad4:	af00      	add	r7, sp, #0
    fad6:	6078      	str	r0, [r7, #4]
    fad8:	6039      	str	r1, [r7, #0]
    fada:	687b      	ldr	r3, [r7, #4]
    fadc:	2b01      	cmp	r3, #1
    fade:	d125      	bne.n	fb2c <_Z41__static_initialization_and_destruction_0ii+0x5c>
    fae0:	683b      	ldr	r3, [r7, #0]
    fae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fae6:	4293      	cmp	r3, r2
    fae8:	d120      	bne.n	fb2c <_Z41__static_initialization_and_destruction_0ii+0x5c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    faea:	4912      	ldr	r1, [pc, #72]	; (fb34 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    faec:	4812      	ldr	r0, [pc, #72]	; (fb38 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    faee:	4b13      	ldr	r3, [pc, #76]	; (fb3c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    faf0:	4798      	blx	r3
    faf2:	4a13      	ldr	r2, [pc, #76]	; (fb40 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    faf4:	4913      	ldr	r1, [pc, #76]	; (fb44 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    faf6:	4810      	ldr	r0, [pc, #64]	; (fb38 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    faf8:	4b13      	ldr	r3, [pc, #76]	; (fb48 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    fafa:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
    fafc:	4b13      	ldr	r3, [pc, #76]	; (fb4c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    fafe:	2401      	movs	r4, #1
    fb00:	461d      	mov	r5, r3
    fb02:	2c00      	cmp	r4, #0
    fb04:	db05      	blt.n	fb12 <_Z41__static_initialization_and_destruction_0ii+0x42>
    fb06:	4628      	mov	r0, r5
    fb08:	4b11      	ldr	r3, [pc, #68]	; (fb50 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    fb0a:	4798      	blx	r3
    fb0c:	351c      	adds	r5, #28
    fb0e:	3c01      	subs	r4, #1
    fb10:	e7f7      	b.n	fb02 <_Z41__static_initialization_and_destruction_0ii+0x32>
    fb12:	4a0b      	ldr	r2, [pc, #44]	; (fb40 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    fb14:	490f      	ldr	r1, [pc, #60]	; (fb54 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    fb16:	2000      	movs	r0, #0
    fb18:	4b0b      	ldr	r3, [pc, #44]	; (fb48 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    fb1a:	4798      	blx	r3
    fb1c:	480e      	ldr	r0, [pc, #56]	; (fb58 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    fb1e:	4b0f      	ldr	r3, [pc, #60]	; (fb5c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    fb20:	4798      	blx	r3
    fb22:	4a07      	ldr	r2, [pc, #28]	; (fb40 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    fb24:	490e      	ldr	r1, [pc, #56]	; (fb60 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    fb26:	480c      	ldr	r0, [pc, #48]	; (fb58 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    fb28:	4b07      	ldr	r3, [pc, #28]	; (fb48 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    fb2a:	4798      	blx	r3
    fb2c:	bf00      	nop
    fb2e:	3708      	adds	r7, #8
    fb30:	46bd      	mov	sp, r7
    fb32:	bdb0      	pop	{r4, r5, r7, pc}
    fb34:	2000a6d8 	.word	0x2000a6d8
    fb38:	20003058 	.word	0x20003058
    fb3c:	0000d66d 	.word	0x0000d66d
    fb40:	20000000 	.word	0x20000000
    fb44:	0000d689 	.word	0x0000d689
    fb48:	00010289 	.word	0x00010289
    fb4c:	20003074 	.word	0x20003074
    fb50:	0000fe85 	.word	0x0000fe85
    fb54:	0000faa5 	.word	0x0000faa5
    fb58:	200030ac 	.word	0x200030ac
    fb5c:	0000f819 	.word	0x0000f819
    fb60:	0000f849 	.word	0x0000f849

0000fb64 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
    fb64:	b580      	push	{r7, lr}
    fb66:	af00      	add	r7, sp, #0
    fb68:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fb6c:	2001      	movs	r0, #1
    fb6e:	4b01      	ldr	r3, [pc, #4]	; (fb74 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
    fb70:	4798      	blx	r3
    fb72:	bd80      	pop	{r7, pc}
    fb74:	0000fad1 	.word	0x0000fad1

0000fb78 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
    fb78:	4770      	bx	lr

0000fb7a <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
    fb7a:	4770      	bx	lr

0000fb7c <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    fb7c:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    fb7e:	2302      	movs	r3, #2
    fb80:	4801      	ldr	r0, [pc, #4]	; (fb88 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
    fb82:	4c02      	ldr	r4, [pc, #8]	; (fb8c <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
    fb84:	47a0      	blx	r4
	return	w;
}
    fb86:	bd10      	pop	{r4, pc}
    fb88:	20002700 	.word	0x20002700
    fb8c:	0000ddd5 	.word	0x0000ddd5

0000fb90 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    fb90:	b500      	push	{lr}
    fb92:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
    fb94:	4b07      	ldr	r3, [pc, #28]	; (fbb4 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
    fb96:	881b      	ldrh	r3, [r3, #0]
    fb98:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    fb9c:	4b06      	ldr	r3, [pc, #24]	; (fbb8 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
    fb9e:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
    fba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    fba4:	3202      	adds	r2, #2
    fba6:	a901      	add	r1, sp, #4
    fba8:	4b04      	ldr	r3, [pc, #16]	; (fbbc <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
    fbaa:	4798      	blx	r3
	return	w;
}
    fbac:	b003      	add	sp, #12
    fbae:	f85d fb04 	ldr.w	pc, [sp], #4
    fbb2:	bf00      	nop
    fbb4:	00010c78 	.word	0x00010c78
    fbb8:	200030d0 	.word	0x200030d0
    fbbc:	0000fb7d 	.word	0x0000fb7d

0000fbc0 <_ZN17MemoryFlash_ClassD1Ev>:
	initiated=false;
	
} //MemoryManagment_Class



    fbc0:	b510      	push	{r4, lr}
    fbc2:	4604      	mov	r4, r0
    fbc4:	30b8      	adds	r0, #184	; 0xb8
    fbc6:	4b03      	ldr	r3, [pc, #12]	; (fbd4 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
    fbc8:	4798      	blx	r3
    fbca:	4620      	mov	r0, r4
    fbcc:	4b02      	ldr	r3, [pc, #8]	; (fbd8 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
    fbce:	4798      	blx	r3
// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
    fbd0:	4620      	mov	r0, r4
    fbd2:	bd10      	pop	{r4, pc}
    fbd4:	0000fde3 	.word	0x0000fde3
    fbd8:	0000fb7b 	.word	0x0000fb7b

0000fbdc <_ZN17MemoryFlash_ClassC1Ev>:
// default constructor
    fbdc:	b538      	push	{r3, r4, r5, lr}
    fbde:	4604      	mov	r4, r0
    fbe0:	4b14      	ldr	r3, [pc, #80]	; (fc34 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
    fbe2:	4798      	blx	r3
    fbe4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fbe8:	4b13      	ldr	r3, [pc, #76]	; (fc38 <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
    fbea:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    fbec:	f44f 7500 	mov.w	r5, #512	; 0x200
    fbf0:	462a      	mov	r2, r5
    fbf2:	2100      	movs	r1, #0
    fbf4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    fbf8:	4b10      	ldr	r3, [pc, #64]	; (fc3c <_ZN17MemoryFlash_ClassC1Ev+0x60>)
    fbfa:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    fbfc:	2300      	movs	r3, #0
    fbfe:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
    fc02:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
    fc06:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
{
    fc0a:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	_currentAddress=0;
    fc0e:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	head=512;
    fc12:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	tail=0;
    fc16:	4a0a      	ldr	r2, [pc, #40]	; (fc40 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
    fc18:	f246 33b4 	movw	r3, #25524	; 0x63b4
    fc1c:	50e2      	str	r2, [r4, r3]
	
    fc1e:	4b09      	ldr	r3, [pc, #36]	; (fc44 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
    fc20:	681b      	ldr	r3, [r3, #0]
    fc22:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
    fc26:	332c      	adds	r3, #44	; 0x2c
    fc28:	f246 32b8 	movw	r2, #25528	; 0x63b8
    fc2c:	50a3      	str	r3, [r4, r2]
	initiated=false;
    fc2e:	4620      	mov	r0, r4
    fc30:	bd38      	pop	{r3, r4, r5, pc}
    fc32:	bf00      	nop
    fc34:	0000fb79 	.word	0x0000fb79
    fc38:	0000fde1 	.word	0x0000fde1
    fc3c:	00010441 	.word	0x00010441
    fc40:	200030d4 	.word	0x200030d4
    fc44:	200030d0 	.word	0x200030d0

0000fc48 <_ZN17MemoryFlash_Class4InitEm>:
{
} //~MemoryManagment_Class
    fc48:	b538      	push	{r3, r4, r5, lr}

    fc4a:	480b      	ldr	r0, [pc, #44]	; (fc78 <_ZN17MemoryFlash_Class4InitEm+0x30>)
    fc4c:	4b0b      	ldr	r3, [pc, #44]	; (fc7c <_ZN17MemoryFlash_Class4InitEm+0x34>)
    fc4e:	4798      	blx	r3
    fc50:	b948      	cbnz	r0, fc66 <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
    fc52:	4d0b      	ldr	r5, [pc, #44]	; (fc80 <_ZN17MemoryFlash_Class4InitEm+0x38>)
    fc54:	490b      	ldr	r1, [pc, #44]	; (fc84 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    fc56:	4628      	mov	r0, r5
    fc58:	4c0b      	ldr	r4, [pc, #44]	; (fc88 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    fc5a:	47a0      	blx	r4
    fc5c:	490b      	ldr	r1, [pc, #44]	; (fc8c <_ZN17MemoryFlash_Class4InitEm+0x44>)
    fc5e:	4628      	mov	r0, r5
    fc60:	47a0      	blx	r4
			//usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
		} 
		else
		{
			logger.SaveEvent("Flash Memory SelfTest FAILED");
			initiated=false;
    fc62:	2001      	movs	r0, #1
    fc64:	bd38      	pop	{r3, r4, r5, pc}
    fc66:	4d06      	ldr	r5, [pc, #24]	; (fc80 <_ZN17MemoryFlash_Class4InitEm+0x38>)
    fc68:	4909      	ldr	r1, [pc, #36]	; (fc90 <_ZN17MemoryFlash_Class4InitEm+0x48>)
    fc6a:	4628      	mov	r0, r5
    fc6c:	4c06      	ldr	r4, [pc, #24]	; (fc88 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    fc6e:	47a0      	blx	r4
    fc70:	4906      	ldr	r1, [pc, #24]	; (fc8c <_ZN17MemoryFlash_Class4InitEm+0x44>)
    fc72:	4628      	mov	r0, r5
    fc74:	47a0      	blx	r4
    fc76:	e7f4      	b.n	fc62 <_ZN17MemoryFlash_Class4InitEm+0x1a>
    fc78:	20002700 	.word	0x20002700
    fc7c:	0000dd39 	.word	0x0000dd39
    fc80:	20002ef4 	.word	0x20002ef4
    fc84:	00010c44 	.word	0x00010c44
    fc88:	0000f469 	.word	0x0000f469
    fc8c:	00010c40 	.word	0x00010c40
    fc90:	00010c20 	.word	0x00010c20

0000fc94 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
	  if (r==0)
	  {
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
		  qspiFlash.Erase(add);
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
    fc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc96:	4604      	mov	r4, r0
    fc98:	460e      	mov	r6, r1
		  return	w;
	  }

    fc9a:	f246 33b8 	movw	r3, #25528	; 0x63b8
    fc9e:	58c3      	ldr	r3, [r0, r3]
    fca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    fca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    fca8:	d907      	bls.n	fcba <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x26>
	  return	r;
  }
    fcaa:	4b0d      	ldr	r3, [pc, #52]	; (fce0 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x4c>)
    fcac:	681b      	ldr	r3, [r3, #0]
    fcae:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
    fcb2:	332c      	adds	r3, #44	; 0x2c
   uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
    fcb4:	f246 32b8 	movw	r2, #25528	; 0x63b8
    fcb8:	5083      	str	r3, [r0, r2]
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
			   stackpointerEventloger=addRef;
		   } 
    fcba:	f246 35b8 	movw	r5, #25528	; 0x63b8
    fcbe:	5961      	ldr	r1, [r4, r5]
    fcc0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    fcc4:	5161      	str	r1, [r4, r5]
		   else
    fcc6:	4f07      	ldr	r7, [pc, #28]	; (fce4 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x50>)
    fcc8:	4638      	mov	r0, r7
    fcca:	4b07      	ldr	r3, [pc, #28]	; (fce8 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x54>)
    fccc:	4798      	blx	r3
		   {
    fcce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    fcd2:	5962      	ldr	r2, [r4, r5]
    fcd4:	4631      	mov	r1, r6
    fcd6:	4638      	mov	r0, r7
    fcd8:	4c04      	ldr	r4, [pc, #16]	; (fcec <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x58>)
    fcda:	47a0      	blx	r4
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
    fcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fcde:	bf00      	nop
    fce0:	200030d0 	.word	0x200030d0
    fce4:	20002700 	.word	0x20002700
    fce8:	0000dda5 	.word	0x0000dda5
    fcec:	0000ddd5 	.word	0x0000ddd5

0000fcf0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
	  w=SaveCRCAppState(crc32);
	  return	w;
  }
uint32_t	MemoryFlash_Class::SaveCRCAppState(uint32_t crc){
// 	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
// 	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
    fcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    fcf4:	4c2b      	ldr	r4, [pc, #172]	; (fda4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
    fcf6:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
    fcfa:	492b      	ldr	r1, [pc, #172]	; (fda8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
    fcfc:	4628      	mov	r0, r5
    fcfe:	4f2b      	ldr	r7, [pc, #172]	; (fdac <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
    fd00:	47b8      	blx	r7
    fd02:	4e2b      	ldr	r6, [pc, #172]	; (fdb0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
    fd04:	f8df 80d4 	ldr.w	r8, [pc, #212]	; fddc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
    fd08:	4632      	mov	r2, r6
    fd0a:	4641      	mov	r1, r8
    fd0c:	4628      	mov	r0, r5
    fd0e:	4d29      	ldr	r5, [pc, #164]	; (fdb4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
    fd10:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    fd12:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
    fd16:	4928      	ldr	r1, [pc, #160]	; (fdb8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
    fd18:	4648      	mov	r0, r9
    fd1a:	47b8      	blx	r7
    fd1c:	4632      	mov	r2, r6
    fd1e:	4641      	mov	r1, r8
    fd20:	4648      	mov	r0, r9
    fd22:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    fd24:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
    fd28:	4924      	ldr	r1, [pc, #144]	; (fdbc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
    fd2a:	4648      	mov	r0, r9
    fd2c:	47b8      	blx	r7
    fd2e:	4632      	mov	r2, r6
    fd30:	4641      	mov	r1, r8
    fd32:	4648      	mov	r0, r9
    fd34:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    fd36:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
    fd3a:	4921      	ldr	r1, [pc, #132]	; (fdc0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
    fd3c:	4648      	mov	r0, r9
    fd3e:	47b8      	blx	r7
    fd40:	4632      	mov	r2, r6
    fd42:	4641      	mov	r1, r8
    fd44:	4648      	mov	r0, r9
    fd46:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    fd48:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
    fd4c:	491d      	ldr	r1, [pc, #116]	; (fdc4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
    fd4e:	4648      	mov	r0, r9
    fd50:	47b8      	blx	r7
    fd52:	4632      	mov	r2, r6
    fd54:	4641      	mov	r1, r8
    fd56:	4648      	mov	r0, r9
    fd58:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    fd5a:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
    fd5e:	491a      	ldr	r1, [pc, #104]	; (fdc8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
    fd60:	4648      	mov	r0, r9
    fd62:	47b8      	blx	r7
    fd64:	4632      	mov	r2, r6
    fd66:	4641      	mov	r1, r8
    fd68:	4648      	mov	r0, r9
    fd6a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    fd6c:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
    fd70:	4916      	ldr	r1, [pc, #88]	; (fdcc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
    fd72:	4648      	mov	r0, r9
    fd74:	47b8      	blx	r7
    fd76:	4632      	mov	r2, r6
    fd78:	4641      	mov	r1, r8
    fd7a:	4648      	mov	r0, r9
    fd7c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    fd7e:	f1a4 0918 	sub.w	r9, r4, #24
    fd82:	4913      	ldr	r1, [pc, #76]	; (fdd0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
    fd84:	4648      	mov	r0, r9
    fd86:	47b8      	blx	r7
    fd88:	4632      	mov	r2, r6
    fd8a:	4641      	mov	r1, r8
    fd8c:	4648      	mov	r0, r9
    fd8e:	47a8      	blx	r5
    fd90:	3408      	adds	r4, #8
    fd92:	4620      	mov	r0, r4
    fd94:	4b0f      	ldr	r3, [pc, #60]	; (fdd4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
    fd96:	4798      	blx	r3
    fd98:	4632      	mov	r2, r6
    fd9a:	490f      	ldr	r1, [pc, #60]	; (fdd8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
    fd9c:	4620      	mov	r0, r4
    fd9e:	47a8      	blx	r5
    fda0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fda4:	200041cc 	.word	0x200041cc
    fda8:	2000a5a8 	.word	0x2000a5a8
    fdac:	0000e86d 	.word	0x0000e86d
    fdb0:	20000000 	.word	0x20000000
    fdb4:	00010289 	.word	0x00010289
    fdb8:	2000a63c 	.word	0x2000a63c
    fdbc:	2000a760 	.word	0x2000a760
    fdc0:	2000a65c 	.word	0x2000a65c
    fdc4:	2000a720 	.word	0x2000a720
    fdc8:	2000a740 	.word	0x2000a740
    fdcc:	2000a618 	.word	0x2000a618
    fdd0:	2000a6b8 	.word	0x2000a6b8
    fdd4:	0000fbdd 	.word	0x0000fbdd
    fdd8:	0000fbc1 	.word	0x0000fbc1
    fddc:	0000e8a5 	.word	0x0000e8a5

0000fde0 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
    fde0:	4770      	bx	lr

0000fde2 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
    fde2:	4770      	bx	lr

0000fde4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    fde4:	b580      	push	{r7, lr}
    fde6:	b084      	sub	sp, #16
    fde8:	af00      	add	r7, sp, #0
    fdea:	60f8      	str	r0, [r7, #12]
    fdec:	60b9      	str	r1, [r7, #8]
    fdee:	4613      	mov	r3, r2
    fdf0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    fdf2:	68fb      	ldr	r3, [r7, #12]
    fdf4:	2b00      	cmp	r3, #0
    fdf6:	d004      	beq.n	fe02 <io_write+0x1e>
    fdf8:	68bb      	ldr	r3, [r7, #8]
    fdfa:	2b00      	cmp	r3, #0
    fdfc:	d001      	beq.n	fe02 <io_write+0x1e>
    fdfe:	2301      	movs	r3, #1
    fe00:	e000      	b.n	fe04 <io_write+0x20>
    fe02:	2300      	movs	r3, #0
    fe04:	f003 0301 	and.w	r3, r3, #1
    fe08:	b2db      	uxtb	r3, r3
    fe0a:	2234      	movs	r2, #52	; 0x34
    fe0c:	4907      	ldr	r1, [pc, #28]	; (fe2c <io_write+0x48>)
    fe0e:	4618      	mov	r0, r3
    fe10:	4b07      	ldr	r3, [pc, #28]	; (fe30 <io_write+0x4c>)
    fe12:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    fe14:	68fb      	ldr	r3, [r7, #12]
    fe16:	681b      	ldr	r3, [r3, #0]
    fe18:	88fa      	ldrh	r2, [r7, #6]
    fe1a:	68b9      	ldr	r1, [r7, #8]
    fe1c:	68f8      	ldr	r0, [r7, #12]
    fe1e:	4798      	blx	r3
    fe20:	4603      	mov	r3, r0
}
    fe22:	4618      	mov	r0, r3
    fe24:	3710      	adds	r7, #16
    fe26:	46bd      	mov	sp, r7
    fe28:	bd80      	pop	{r7, pc}
    fe2a:	bf00      	nop
    fe2c:	00010c64 	.word	0x00010c64
    fe30:	00003b01 	.word	0x00003b01

0000fe34 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    fe34:	b580      	push	{r7, lr}
    fe36:	b084      	sub	sp, #16
    fe38:	af00      	add	r7, sp, #0
    fe3a:	60f8      	str	r0, [r7, #12]
    fe3c:	60b9      	str	r1, [r7, #8]
    fe3e:	4613      	mov	r3, r2
    fe40:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    fe42:	68fb      	ldr	r3, [r7, #12]
    fe44:	2b00      	cmp	r3, #0
    fe46:	d004      	beq.n	fe52 <io_read+0x1e>
    fe48:	68bb      	ldr	r3, [r7, #8]
    fe4a:	2b00      	cmp	r3, #0
    fe4c:	d001      	beq.n	fe52 <io_read+0x1e>
    fe4e:	2301      	movs	r3, #1
    fe50:	e000      	b.n	fe54 <io_read+0x20>
    fe52:	2300      	movs	r3, #0
    fe54:	f003 0301 	and.w	r3, r3, #1
    fe58:	b2db      	uxtb	r3, r3
    fe5a:	223d      	movs	r2, #61	; 0x3d
    fe5c:	4907      	ldr	r1, [pc, #28]	; (fe7c <io_read+0x48>)
    fe5e:	4618      	mov	r0, r3
    fe60:	4b07      	ldr	r3, [pc, #28]	; (fe80 <io_read+0x4c>)
    fe62:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    fe64:	68fb      	ldr	r3, [r7, #12]
    fe66:	685b      	ldr	r3, [r3, #4]
    fe68:	88fa      	ldrh	r2, [r7, #6]
    fe6a:	68b9      	ldr	r1, [r7, #8]
    fe6c:	68f8      	ldr	r0, [r7, #12]
    fe6e:	4798      	blx	r3
    fe70:	4603      	mov	r3, r0
}
    fe72:	4618      	mov	r0, r3
    fe74:	3710      	adds	r7, #16
    fe76:	46bd      	mov	sp, r7
    fe78:	bd80      	pop	{r7, pc}
    fe7a:	bf00      	nop
    fe7c:	00010c64 	.word	0x00010c64
    fe80:	00003b01 	.word	0x00003b01

0000fe84 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    fe84:	b480      	push	{r7}
    fe86:	b083      	sub	sp, #12
    fe88:	af00      	add	r7, sp, #0
    fe8a:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    fe8c:	687b      	ldr	r3, [r7, #4]
    fe8e:	4618      	mov	r0, r3
    fe90:	370c      	adds	r7, #12
    fe92:	46bd      	mov	sp, r7
    fe94:	bc80      	pop	{r7}
    fe96:	4770      	bx	lr

0000fe98 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    fe98:	b480      	push	{r7}
    fe9a:	b083      	sub	sp, #12
    fe9c:	af00      	add	r7, sp, #0
    fe9e:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    fea0:	687b      	ldr	r3, [r7, #4]
    fea2:	4618      	mov	r0, r3
    fea4:	370c      	adds	r7, #12
    fea6:	46bd      	mov	sp, r7
    fea8:	bc80      	pop	{r7}
    feaa:	4770      	bx	lr

0000feac <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    feac:	b480      	push	{r7}
    feae:	b085      	sub	sp, #20
    feb0:	af00      	add	r7, sp, #0
    feb2:	60f8      	str	r0, [r7, #12]
    feb4:	460b      	mov	r3, r1
    feb6:	607a      	str	r2, [r7, #4]
    feb8:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    feba:	687b      	ldr	r3, [r7, #4]
    febc:	681a      	ldr	r2, [r3, #0]
    febe:	68fb      	ldr	r3, [r7, #12]
    fec0:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    fec2:	687b      	ldr	r3, [r7, #4]
    fec4:	685a      	ldr	r2, [r3, #4]
    fec6:	68fb      	ldr	r3, [r7, #12]
    fec8:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    feca:	68fb      	ldr	r3, [r7, #12]
    fecc:	7afa      	ldrb	r2, [r7, #11]
    fece:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    fed0:	68fb      	ldr	r3, [r7, #12]
    fed2:	687a      	ldr	r2, [r7, #4]
    fed4:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    fed6:	68fb      	ldr	r3, [r7, #12]
    fed8:	68db      	ldr	r3, [r3, #12]
    feda:	7a5b      	ldrb	r3, [r3, #9]
    fedc:	b2da      	uxtb	r2, r3
    fede:	68fb      	ldr	r3, [r7, #12]
    fee0:	719a      	strb	r2, [r3, #6]
	return isOK;
    fee2:	68fb      	ldr	r3, [r7, #12]
    fee4:	799b      	ldrb	r3, [r3, #6]
    fee6:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    fee8:	4618      	mov	r0, r3
    feea:	3714      	adds	r7, #20
    feec:	46bd      	mov	sp, r7
    feee:	bc80      	pop	{r7}
    fef0:	4770      	bx	lr

0000fef2 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    fef2:	b480      	push	{r7}
    fef4:	b083      	sub	sp, #12
    fef6:	af00      	add	r7, sp, #0
    fef8:	6078      	str	r0, [r7, #4]
    fefa:	460b      	mov	r3, r1
    fefc:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    fefe:	78fb      	ldrb	r3, [r7, #3]
    ff00:	f003 0307 	and.w	r3, r3, #7
    ff04:	b2db      	uxtb	r3, r3
}
    ff06:	4618      	mov	r0, r3
    ff08:	370c      	adds	r7, #12
    ff0a:	46bd      	mov	sp, r7
    ff0c:	bc80      	pop	{r7}
    ff0e:	4770      	bx	lr

0000ff10 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    ff10:	b480      	push	{r7}
    ff12:	b083      	sub	sp, #12
    ff14:	af00      	add	r7, sp, #0
    ff16:	6078      	str	r0, [r7, #4]
    ff18:	4608      	mov	r0, r1
    ff1a:	4611      	mov	r1, r2
    ff1c:	461a      	mov	r2, r3
    ff1e:	4603      	mov	r3, r0
    ff20:	70fb      	strb	r3, [r7, #3]
    ff22:	460b      	mov	r3, r1
    ff24:	70bb      	strb	r3, [r7, #2]
    ff26:	4613      	mov	r3, r2
    ff28:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    ff2a:	78fb      	ldrb	r3, [r7, #3]
    ff2c:	2b07      	cmp	r3, #7
    ff2e:	dc01      	bgt.n	ff34 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    ff30:	78bb      	ldrb	r3, [r7, #2]
    ff32:	e000      	b.n	ff36 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    ff34:	787b      	ldrb	r3, [r7, #1]
}
    ff36:	4618      	mov	r0, r3
    ff38:	370c      	adds	r7, #12
    ff3a:	46bd      	mov	sp, r7
    ff3c:	bc80      	pop	{r7}
    ff3e:	4770      	bx	lr

0000ff40 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    ff40:	b580      	push	{r7, lr}
    ff42:	b082      	sub	sp, #8
    ff44:	af00      	add	r7, sp, #0
    ff46:	6078      	str	r0, [r7, #4]
    ff48:	460b      	mov	r3, r1
    ff4a:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    ff4c:	687b      	ldr	r3, [r7, #4]
    ff4e:	68da      	ldr	r2, [r3, #12]
    ff50:	687b      	ldr	r3, [r7, #4]
    ff52:	7a1b      	ldrb	r3, [r3, #8]
    ff54:	4619      	mov	r1, r3
    ff56:	4610      	mov	r0, r2
    ff58:	4b0a      	ldr	r3, [pc, #40]	; (ff84 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    ff5a:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    ff5c:	687b      	ldr	r3, [r7, #4]
    ff5e:	68db      	ldr	r3, [r3, #12]
    ff60:	1cf9      	adds	r1, r7, #3
    ff62:	2201      	movs	r2, #1
    ff64:	4618      	mov	r0, r3
    ff66:	4b08      	ldr	r3, [pc, #32]	; (ff88 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    ff68:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    ff6a:	687b      	ldr	r3, [r7, #4]
    ff6c:	68db      	ldr	r3, [r3, #12]
    ff6e:	6879      	ldr	r1, [r7, #4]
    ff70:	2201      	movs	r2, #1
    ff72:	4618      	mov	r0, r3
    ff74:	4b05      	ldr	r3, [pc, #20]	; (ff8c <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    ff76:	4798      	blx	r3

	return registerValue;
    ff78:	687b      	ldr	r3, [r7, #4]
    ff7a:	781b      	ldrb	r3, [r3, #0]
}
    ff7c:	4618      	mov	r0, r3
    ff7e:	3708      	adds	r7, #8
    ff80:	46bd      	mov	sp, r7
    ff82:	bd80      	pop	{r7, pc}
    ff84:	0000d745 	.word	0x0000d745
    ff88:	0000d771 	.word	0x0000d771
    ff8c:	0000d79d 	.word	0x0000d79d

0000ff90 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    ff90:	b580      	push	{r7, lr}
    ff92:	b084      	sub	sp, #16
    ff94:	af00      	add	r7, sp, #0
    ff96:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    ff98:	687b      	ldr	r3, [r7, #4]
    ff9a:	68da      	ldr	r2, [r3, #12]
    ff9c:	687b      	ldr	r3, [r7, #4]
    ff9e:	7a1b      	ldrb	r3, [r3, #8]
    ffa0:	4619      	mov	r1, r3
    ffa2:	4610      	mov	r0, r2
    ffa4:	4b06      	ldr	r3, [pc, #24]	; (ffc0 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    ffa6:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    ffa8:	2109      	movs	r1, #9
    ffaa:	6878      	ldr	r0, [r7, #4]
    ffac:	4b05      	ldr	r3, [pc, #20]	; (ffc4 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    ffae:	4798      	blx	r3
    ffb0:	4603      	mov	r3, r0
    ffb2:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    ffb4:	7bfb      	ldrb	r3, [r7, #15]
}
    ffb6:	4618      	mov	r0, r3
    ffb8:	3710      	adds	r7, #16
    ffba:	46bd      	mov	sp, r7
    ffbc:	bd80      	pop	{r7, pc}
    ffbe:	bf00      	nop
    ffc0:	0000d745 	.word	0x0000d745
    ffc4:	0000ff41 	.word	0x0000ff41

0000ffc8 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    ffc8:	b580      	push	{r7, lr}
    ffca:	b084      	sub	sp, #16
    ffcc:	af00      	add	r7, sp, #0
    ffce:	6078      	str	r0, [r7, #4]
    ffd0:	460b      	mov	r3, r1
    ffd2:	70fb      	strb	r3, [r7, #3]
    ffd4:	4613      	mov	r3, r2
    ffd6:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    ffd8:	687b      	ldr	r3, [r7, #4]
    ffda:	68da      	ldr	r2, [r3, #12]
    ffdc:	687b      	ldr	r3, [r7, #4]
    ffde:	7a1b      	ldrb	r3, [r3, #8]
    ffe0:	4619      	mov	r1, r3
    ffe2:	4610      	mov	r0, r2
    ffe4:	4b09      	ldr	r3, [pc, #36]	; (1000c <STACK_SIZE+0xc>)
    ffe6:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    ffe8:	78fb      	ldrb	r3, [r7, #3]
    ffea:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    ffec:	78bb      	ldrb	r3, [r7, #2]
    ffee:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    fff0:	687b      	ldr	r3, [r7, #4]
    fff2:	68db      	ldr	r3, [r3, #12]
    fff4:	f107 010c 	add.w	r1, r7, #12
    fff8:	2202      	movs	r2, #2
    fffa:	4618      	mov	r0, r3
    fffc:	4b04      	ldr	r3, [pc, #16]	; (10010 <STACK_SIZE+0x10>)
    fffe:	4798      	blx	r3
   10000:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   10002:	4618      	mov	r0, r3
   10004:	3710      	adds	r7, #16
   10006:	46bd      	mov	sp, r7
   10008:	bd80      	pop	{r7, pc}
   1000a:	bf00      	nop
   1000c:	0000d745 	.word	0x0000d745
   10010:	0000d771 	.word	0x0000d771

00010014 <_ZN14MCP23008_Class12SetPortInputEv>:
	//i2cClass->Irq_Enable();
	return v;
}


void	MCP23008_Class::SetPortInput(void){
   10014:	b580      	push	{r7, lr}
   10016:	b084      	sub	sp, #16
   10018:	af00      	add	r7, sp, #0
   1001a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   1001c:	2300      	movs	r3, #0
   1001e:	73fb      	strb	r3, [r7, #15]
   10020:	7bfb      	ldrb	r3, [r7, #15]
   10022:	2b07      	cmp	r3, #7
   10024:	dc0f      	bgt.n	10046 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
   10026:	7bfb      	ldrb	r3, [r7, #15]
   10028:	2201      	movs	r2, #1
   1002a:	4619      	mov	r1, r3
   1002c:	6878      	ldr	r0, [r7, #4]
   1002e:	4b08      	ldr	r3, [pc, #32]	; (10050 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
   10030:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   10032:	7bfb      	ldrb	r3, [r7, #15]
   10034:	2201      	movs	r2, #1
   10036:	4619      	mov	r1, r3
   10038:	6878      	ldr	r0, [r7, #4]
   1003a:	4b06      	ldr	r3, [pc, #24]	; (10054 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
   1003c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   1003e:	7bfb      	ldrb	r3, [r7, #15]
   10040:	3301      	adds	r3, #1
   10042:	73fb      	strb	r3, [r7, #15]
   10044:	e7ec      	b.n	10020 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
   10046:	bf00      	nop
   10048:	3710      	adds	r7, #16
   1004a:	46bd      	mov	sp, r7
   1004c:	bd80      	pop	{r7, pc}
   1004e:	bf00      	nop
   10050:	00010119 	.word	0x00010119
   10054:	000101fd 	.word	0x000101fd

00010058 <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
   10058:	b580      	push	{r7, lr}
   1005a:	b084      	sub	sp, #16
   1005c:	af00      	add	r7, sp, #0
   1005e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   10060:	2300      	movs	r3, #0
   10062:	73fb      	strb	r3, [r7, #15]
   10064:	7bfb      	ldrb	r3, [r7, #15]
   10066:	2b07      	cmp	r3, #7
   10068:	dc09      	bgt.n	1007e <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   1006a:	7bfb      	ldrb	r3, [r7, #15]
   1006c:	2200      	movs	r2, #0
   1006e:	4619      	mov	r1, r3
   10070:	6878      	ldr	r0, [r7, #4]
   10072:	4b05      	ldr	r3, [pc, #20]	; (10088 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   10074:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   10076:	7bfb      	ldrb	r3, [r7, #15]
   10078:	3301      	adds	r3, #1
   1007a:	73fb      	strb	r3, [r7, #15]
   1007c:	e7f2      	b.n	10064 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   1007e:	bf00      	nop
   10080:	3710      	adds	r7, #16
   10082:	46bd      	mov	sp, r7
   10084:	bd80      	pop	{r7, pc}
   10086:	bf00      	nop
   10088:	00010119 	.word	0x00010119

0001008c <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   1008c:	b580      	push	{r7, lr}
   1008e:	b084      	sub	sp, #16
   10090:	af00      	add	r7, sp, #0
   10092:	6078      	str	r0, [r7, #4]
   10094:	4608      	mov	r0, r1
   10096:	4611      	mov	r1, r2
   10098:	461a      	mov	r2, r3
   1009a:	4603      	mov	r3, r0
   1009c:	70fb      	strb	r3, [r7, #3]
   1009e:	460b      	mov	r3, r1
   100a0:	70bb      	strb	r3, [r7, #2]
   100a2:	4613      	mov	r3, r2
   100a4:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   100a6:	787b      	ldrb	r3, [r7, #1]
   100a8:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   100aa:	78fb      	ldrb	r3, [r7, #3]
   100ac:	4619      	mov	r1, r3
   100ae:	6878      	ldr	r0, [r7, #4]
   100b0:	4b16      	ldr	r3, [pc, #88]	; (1010c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   100b2:	4798      	blx	r3
   100b4:	4603      	mov	r3, r0
   100b6:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   100b8:	7bfb      	ldrb	r3, [r7, #15]
   100ba:	4619      	mov	r1, r3
   100bc:	6878      	ldr	r0, [r7, #4]
   100be:	4b14      	ldr	r3, [pc, #80]	; (10110 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   100c0:	4798      	blx	r3
   100c2:	4603      	mov	r3, r0
   100c4:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   100c6:	78bb      	ldrb	r3, [r7, #2]
   100c8:	2b00      	cmp	r3, #0
   100ca:	d009      	beq.n	100e0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   100cc:	7bba      	ldrb	r2, [r7, #14]
   100ce:	7b7b      	ldrb	r3, [r7, #13]
   100d0:	4619      	mov	r1, r3
   100d2:	2301      	movs	r3, #1
   100d4:	408b      	lsls	r3, r1
   100d6:	b2db      	uxtb	r3, r3
   100d8:	4313      	orrs	r3, r2
   100da:	b2db      	uxtb	r3, r3
   100dc:	73bb      	strb	r3, [r7, #14]
   100de:	e00a      	b.n	100f6 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   100e0:	7bba      	ldrb	r2, [r7, #14]
   100e2:	7b7b      	ldrb	r3, [r7, #13]
   100e4:	4619      	mov	r1, r3
   100e6:	2301      	movs	r3, #1
   100e8:	408b      	lsls	r3, r1
   100ea:	b2db      	uxtb	r3, r3
   100ec:	43db      	mvns	r3, r3
   100ee:	b2db      	uxtb	r3, r3
   100f0:	4013      	ands	r3, r2
   100f2:	b2db      	uxtb	r3, r3
   100f4:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   100f6:	7bba      	ldrb	r2, [r7, #14]
   100f8:	7bfb      	ldrb	r3, [r7, #15]
   100fa:	4619      	mov	r1, r3
   100fc:	6878      	ldr	r0, [r7, #4]
   100fe:	4b05      	ldr	r3, [pc, #20]	; (10114 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   10100:	4798      	blx	r3
}
   10102:	bf00      	nop
   10104:	3710      	adds	r7, #16
   10106:	46bd      	mov	sp, r7
   10108:	bd80      	pop	{r7, pc}
   1010a:	bf00      	nop
   1010c:	0000fef3 	.word	0x0000fef3
   10110:	0000ff41 	.word	0x0000ff41
   10114:	0000ffc9 	.word	0x0000ffc9

00010118 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   10118:	b590      	push	{r4, r7, lr}
   1011a:	b085      	sub	sp, #20
   1011c:	af02      	add	r7, sp, #8
   1011e:	6078      	str	r0, [r7, #4]
   10120:	460b      	mov	r3, r1
   10122:	70fb      	strb	r3, [r7, #3]
   10124:	4613      	mov	r3, r2
   10126:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   10128:	78bb      	ldrb	r3, [r7, #2]
   1012a:	2b01      	cmp	r3, #1
   1012c:	bf0c      	ite	eq
   1012e:	2301      	moveq	r3, #1
   10130:	2300      	movne	r3, #0
   10132:	b2db      	uxtb	r3, r3
   10134:	461a      	mov	r2, r3
   10136:	78f9      	ldrb	r1, [r7, #3]
   10138:	2300      	movs	r3, #0
   1013a:	9300      	str	r3, [sp, #0]
   1013c:	2300      	movs	r3, #0
   1013e:	6878      	ldr	r0, [r7, #4]
   10140:	4c02      	ldr	r4, [pc, #8]	; (1014c <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   10142:	47a0      	blx	r4
}
   10144:	bf00      	nop
   10146:	370c      	adds	r7, #12
   10148:	46bd      	mov	sp, r7
   1014a:	bd90      	pop	{r4, r7, pc}
   1014c:	0001008d 	.word	0x0001008d

00010150 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   10150:	b590      	push	{r4, r7, lr}
   10152:	b085      	sub	sp, #20
   10154:	af00      	add	r7, sp, #0
   10156:	6078      	str	r0, [r7, #4]
   10158:	460b      	mov	r3, r1
   1015a:	70fb      	strb	r3, [r7, #3]
   1015c:	4613      	mov	r3, r2
   1015e:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   10160:	78fb      	ldrb	r3, [r7, #3]
   10162:	4619      	mov	r1, r3
   10164:	6878      	ldr	r0, [r7, #4]
   10166:	4b21      	ldr	r3, [pc, #132]	; (101ec <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   10168:	4798      	blx	r3
   1016a:	4603      	mov	r3, r0
   1016c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   1016e:	78f9      	ldrb	r1, [r7, #3]
   10170:	230a      	movs	r3, #10
   10172:	220a      	movs	r2, #10
   10174:	6878      	ldr	r0, [r7, #4]
   10176:	4c1e      	ldr	r4, [pc, #120]	; (101f0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   10178:	47a0      	blx	r4
   1017a:	4603      	mov	r3, r0
   1017c:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   1017e:	7bfb      	ldrb	r3, [r7, #15]
   10180:	4619      	mov	r1, r3
   10182:	6878      	ldr	r0, [r7, #4]
   10184:	4b1b      	ldr	r3, [pc, #108]	; (101f4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   10186:	4798      	blx	r3
   10188:	4603      	mov	r3, r0
   1018a:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   1018c:	78bb      	ldrb	r3, [r7, #2]
   1018e:	2b00      	cmp	r3, #0
   10190:	d009      	beq.n	101a6 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   10192:	7bba      	ldrb	r2, [r7, #14]
   10194:	7b7b      	ldrb	r3, [r7, #13]
   10196:	4619      	mov	r1, r3
   10198:	2301      	movs	r3, #1
   1019a:	408b      	lsls	r3, r1
   1019c:	b2db      	uxtb	r3, r3
   1019e:	4313      	orrs	r3, r2
   101a0:	b2db      	uxtb	r3, r3
   101a2:	73bb      	strb	r3, [r7, #14]
   101a4:	e00a      	b.n	101bc <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   101a6:	7bba      	ldrb	r2, [r7, #14]
   101a8:	7b7b      	ldrb	r3, [r7, #13]
   101aa:	4619      	mov	r1, r3
   101ac:	2301      	movs	r3, #1
   101ae:	408b      	lsls	r3, r1
   101b0:	b2db      	uxtb	r3, r3
   101b2:	43db      	mvns	r3, r3
   101b4:	b2db      	uxtb	r3, r3
   101b6:	4013      	ands	r3, r2
   101b8:	b2db      	uxtb	r3, r3
   101ba:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   101bc:	78f9      	ldrb	r1, [r7, #3]
   101be:	2309      	movs	r3, #9
   101c0:	2209      	movs	r2, #9
   101c2:	6878      	ldr	r0, [r7, #4]
   101c4:	4c0a      	ldr	r4, [pc, #40]	; (101f0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   101c6:	47a0      	blx	r4
   101c8:	4603      	mov	r3, r0
   101ca:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   101cc:	7bba      	ldrb	r2, [r7, #14]
   101ce:	7bfb      	ldrb	r3, [r7, #15]
   101d0:	4619      	mov	r1, r3
   101d2:	6878      	ldr	r0, [r7, #4]
   101d4:	4b08      	ldr	r3, [pc, #32]	; (101f8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   101d6:	4798      	blx	r3
   101d8:	4603      	mov	r3, r0
   101da:	2b00      	cmp	r3, #0
   101dc:	bf0c      	ite	eq
   101de:	2301      	moveq	r3, #1
   101e0:	2300      	movne	r3, #0
   101e2:	b2db      	uxtb	r3, r3
}
   101e4:	4618      	mov	r0, r3
   101e6:	3714      	adds	r7, #20
   101e8:	46bd      	mov	sp, r7
   101ea:	bd90      	pop	{r4, r7, pc}
   101ec:	0000fef3 	.word	0x0000fef3
   101f0:	0000ff11 	.word	0x0000ff11
   101f4:	0000ff41 	.word	0x0000ff41
   101f8:	0000ffc9 	.word	0x0000ffc9

000101fc <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   101fc:	b590      	push	{r4, r7, lr}
   101fe:	b085      	sub	sp, #20
   10200:	af02      	add	r7, sp, #8
   10202:	6078      	str	r0, [r7, #4]
   10204:	460b      	mov	r3, r1
   10206:	70fb      	strb	r3, [r7, #3]
   10208:	4613      	mov	r3, r2
   1020a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   1020c:	78ba      	ldrb	r2, [r7, #2]
   1020e:	78f9      	ldrb	r1, [r7, #3]
   10210:	2306      	movs	r3, #6
   10212:	9300      	str	r3, [sp, #0]
   10214:	2306      	movs	r3, #6
   10216:	6878      	ldr	r0, [r7, #4]
   10218:	4c02      	ldr	r4, [pc, #8]	; (10224 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   1021a:	47a0      	blx	r4
}
   1021c:	bf00      	nop
   1021e:	370c      	adds	r7, #12
   10220:	46bd      	mov	sp, r7
   10222:	bd90      	pop	{r4, r7, pc}
   10224:	0001008d 	.word	0x0001008d

00010228 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
   10228:	b580      	push	{r7, lr}
   1022a:	b082      	sub	sp, #8
   1022c:	af00      	add	r7, sp, #0
   1022e:	6078      	str	r0, [r7, #4]
   10230:	6039      	str	r1, [r7, #0]
   10232:	687b      	ldr	r3, [r7, #4]
   10234:	2b01      	cmp	r3, #1
   10236:	d10d      	bne.n	10254 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10238:	683b      	ldr	r3, [r7, #0]
   1023a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1023e:	4293      	cmp	r3, r2
   10240:	d108      	bne.n	10254 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10242:	4906      	ldr	r1, [pc, #24]	; (1025c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10244:	4806      	ldr	r0, [pc, #24]	; (10260 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10246:	4b07      	ldr	r3, [pc, #28]	; (10264 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10248:	4798      	blx	r3
   1024a:	4a07      	ldr	r2, [pc, #28]	; (10268 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1024c:	4907      	ldr	r1, [pc, #28]	; (1026c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1024e:	4804      	ldr	r0, [pc, #16]	; (10260 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10250:	4b07      	ldr	r3, [pc, #28]	; (10270 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   10252:	4798      	blx	r3
   10254:	bf00      	nop
   10256:	3708      	adds	r7, #8
   10258:	46bd      	mov	sp, r7
   1025a:	bd80      	pop	{r7, pc}
   1025c:	2000a6d8 	.word	0x2000a6d8
   10260:	2000a590 	.word	0x2000a590
   10264:	0000d66d 	.word	0x0000d66d
   10268:	20000000 	.word	0x20000000
   1026c:	0000d689 	.word	0x0000d689
   10270:	00010289 	.word	0x00010289

00010274 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
   10274:	b580      	push	{r7, lr}
   10276:	af00      	add	r7, sp, #0
   10278:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1027c:	2001      	movs	r0, #1
   1027e:	4b01      	ldr	r3, [pc, #4]	; (10284 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
   10280:	4798      	blx	r3
   10282:	bd80      	pop	{r7, pc}
   10284:	00010229 	.word	0x00010229

00010288 <__aeabi_atexit>:
   10288:	460b      	mov	r3, r1
   1028a:	4601      	mov	r1, r0
   1028c:	4618      	mov	r0, r3
   1028e:	f000 b801 	b.w	10294 <__cxa_atexit>
   10292:	bf00      	nop

00010294 <__cxa_atexit>:
   10294:	4613      	mov	r3, r2
   10296:	460a      	mov	r2, r1
   10298:	4601      	mov	r1, r0
   1029a:	2002      	movs	r0, #2
   1029c:	f000 b99e 	b.w	105dc <__register_exitproc>

000102a0 <ffs>:
   102a0:	b140      	cbz	r0, 102b4 <ffs+0x14>
   102a2:	2300      	movs	r3, #0
   102a4:	fa40 f103 	asr.w	r1, r0, r3
   102a8:	1c5a      	adds	r2, r3, #1
   102aa:	07c9      	lsls	r1, r1, #31
   102ac:	4613      	mov	r3, r2
   102ae:	d5f9      	bpl.n	102a4 <ffs+0x4>
   102b0:	4610      	mov	r0, r2
   102b2:	4770      	bx	lr
   102b4:	4602      	mov	r2, r0
   102b6:	4610      	mov	r0, r2
   102b8:	4770      	bx	lr
   102ba:	bf00      	nop

000102bc <__libc_init_array>:
   102bc:	b570      	push	{r4, r5, r6, lr}
   102be:	4e0f      	ldr	r6, [pc, #60]	; (102fc <__libc_init_array+0x40>)
   102c0:	4d0f      	ldr	r5, [pc, #60]	; (10300 <__libc_init_array+0x44>)
   102c2:	1b76      	subs	r6, r6, r5
   102c4:	10b6      	asrs	r6, r6, #2
   102c6:	bf18      	it	ne
   102c8:	2400      	movne	r4, #0
   102ca:	d005      	beq.n	102d8 <__libc_init_array+0x1c>
   102cc:	3401      	adds	r4, #1
   102ce:	f855 3b04 	ldr.w	r3, [r5], #4
   102d2:	4798      	blx	r3
   102d4:	42a6      	cmp	r6, r4
   102d6:	d1f9      	bne.n	102cc <__libc_init_array+0x10>
   102d8:	4e0a      	ldr	r6, [pc, #40]	; (10304 <__libc_init_array+0x48>)
   102da:	4d0b      	ldr	r5, [pc, #44]	; (10308 <__libc_init_array+0x4c>)
   102dc:	1b76      	subs	r6, r6, r5
   102de:	f000 fcd3 	bl	10c88 <_init>
   102e2:	10b6      	asrs	r6, r6, #2
   102e4:	bf18      	it	ne
   102e6:	2400      	movne	r4, #0
   102e8:	d006      	beq.n	102f8 <__libc_init_array+0x3c>
   102ea:	3401      	adds	r4, #1
   102ec:	f855 3b04 	ldr.w	r3, [r5], #4
   102f0:	4798      	blx	r3
   102f2:	42a6      	cmp	r6, r4
   102f4:	d1f9      	bne.n	102ea <__libc_init_array+0x2e>
   102f6:	bd70      	pop	{r4, r5, r6, pc}
   102f8:	bd70      	pop	{r4, r5, r6, pc}
   102fa:	bf00      	nop
   102fc:	00010c94 	.word	0x00010c94
   10300:	00010c94 	.word	0x00010c94
   10304:	00010cc8 	.word	0x00010cc8
   10308:	00010c94 	.word	0x00010c94

0001030c <memcpy>:
   1030c:	4684      	mov	ip, r0
   1030e:	ea41 0300 	orr.w	r3, r1, r0
   10312:	f013 0303 	ands.w	r3, r3, #3
   10316:	d16d      	bne.n	103f4 <memcpy+0xe8>
   10318:	3a40      	subs	r2, #64	; 0x40
   1031a:	d341      	bcc.n	103a0 <memcpy+0x94>
   1031c:	f851 3b04 	ldr.w	r3, [r1], #4
   10320:	f840 3b04 	str.w	r3, [r0], #4
   10324:	f851 3b04 	ldr.w	r3, [r1], #4
   10328:	f840 3b04 	str.w	r3, [r0], #4
   1032c:	f851 3b04 	ldr.w	r3, [r1], #4
   10330:	f840 3b04 	str.w	r3, [r0], #4
   10334:	f851 3b04 	ldr.w	r3, [r1], #4
   10338:	f840 3b04 	str.w	r3, [r0], #4
   1033c:	f851 3b04 	ldr.w	r3, [r1], #4
   10340:	f840 3b04 	str.w	r3, [r0], #4
   10344:	f851 3b04 	ldr.w	r3, [r1], #4
   10348:	f840 3b04 	str.w	r3, [r0], #4
   1034c:	f851 3b04 	ldr.w	r3, [r1], #4
   10350:	f840 3b04 	str.w	r3, [r0], #4
   10354:	f851 3b04 	ldr.w	r3, [r1], #4
   10358:	f840 3b04 	str.w	r3, [r0], #4
   1035c:	f851 3b04 	ldr.w	r3, [r1], #4
   10360:	f840 3b04 	str.w	r3, [r0], #4
   10364:	f851 3b04 	ldr.w	r3, [r1], #4
   10368:	f840 3b04 	str.w	r3, [r0], #4
   1036c:	f851 3b04 	ldr.w	r3, [r1], #4
   10370:	f840 3b04 	str.w	r3, [r0], #4
   10374:	f851 3b04 	ldr.w	r3, [r1], #4
   10378:	f840 3b04 	str.w	r3, [r0], #4
   1037c:	f851 3b04 	ldr.w	r3, [r1], #4
   10380:	f840 3b04 	str.w	r3, [r0], #4
   10384:	f851 3b04 	ldr.w	r3, [r1], #4
   10388:	f840 3b04 	str.w	r3, [r0], #4
   1038c:	f851 3b04 	ldr.w	r3, [r1], #4
   10390:	f840 3b04 	str.w	r3, [r0], #4
   10394:	f851 3b04 	ldr.w	r3, [r1], #4
   10398:	f840 3b04 	str.w	r3, [r0], #4
   1039c:	3a40      	subs	r2, #64	; 0x40
   1039e:	d2bd      	bcs.n	1031c <memcpy+0x10>
   103a0:	3230      	adds	r2, #48	; 0x30
   103a2:	d311      	bcc.n	103c8 <memcpy+0xbc>
   103a4:	f851 3b04 	ldr.w	r3, [r1], #4
   103a8:	f840 3b04 	str.w	r3, [r0], #4
   103ac:	f851 3b04 	ldr.w	r3, [r1], #4
   103b0:	f840 3b04 	str.w	r3, [r0], #4
   103b4:	f851 3b04 	ldr.w	r3, [r1], #4
   103b8:	f840 3b04 	str.w	r3, [r0], #4
   103bc:	f851 3b04 	ldr.w	r3, [r1], #4
   103c0:	f840 3b04 	str.w	r3, [r0], #4
   103c4:	3a10      	subs	r2, #16
   103c6:	d2ed      	bcs.n	103a4 <memcpy+0x98>
   103c8:	320c      	adds	r2, #12
   103ca:	d305      	bcc.n	103d8 <memcpy+0xcc>
   103cc:	f851 3b04 	ldr.w	r3, [r1], #4
   103d0:	f840 3b04 	str.w	r3, [r0], #4
   103d4:	3a04      	subs	r2, #4
   103d6:	d2f9      	bcs.n	103cc <memcpy+0xc0>
   103d8:	3204      	adds	r2, #4
   103da:	d008      	beq.n	103ee <memcpy+0xe2>
   103dc:	07d2      	lsls	r2, r2, #31
   103de:	bf1c      	itt	ne
   103e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   103e4:	f800 3b01 	strbne.w	r3, [r0], #1
   103e8:	d301      	bcc.n	103ee <memcpy+0xe2>
   103ea:	880b      	ldrh	r3, [r1, #0]
   103ec:	8003      	strh	r3, [r0, #0]
   103ee:	4660      	mov	r0, ip
   103f0:	4770      	bx	lr
   103f2:	bf00      	nop
   103f4:	2a08      	cmp	r2, #8
   103f6:	d313      	bcc.n	10420 <memcpy+0x114>
   103f8:	078b      	lsls	r3, r1, #30
   103fa:	d08d      	beq.n	10318 <memcpy+0xc>
   103fc:	f010 0303 	ands.w	r3, r0, #3
   10400:	d08a      	beq.n	10318 <memcpy+0xc>
   10402:	f1c3 0304 	rsb	r3, r3, #4
   10406:	1ad2      	subs	r2, r2, r3
   10408:	07db      	lsls	r3, r3, #31
   1040a:	bf1c      	itt	ne
   1040c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10410:	f800 3b01 	strbne.w	r3, [r0], #1
   10414:	d380      	bcc.n	10318 <memcpy+0xc>
   10416:	f831 3b02 	ldrh.w	r3, [r1], #2
   1041a:	f820 3b02 	strh.w	r3, [r0], #2
   1041e:	e77b      	b.n	10318 <memcpy+0xc>
   10420:	3a04      	subs	r2, #4
   10422:	d3d9      	bcc.n	103d8 <memcpy+0xcc>
   10424:	3a01      	subs	r2, #1
   10426:	f811 3b01 	ldrb.w	r3, [r1], #1
   1042a:	f800 3b01 	strb.w	r3, [r0], #1
   1042e:	d2f9      	bcs.n	10424 <memcpy+0x118>
   10430:	780b      	ldrb	r3, [r1, #0]
   10432:	7003      	strb	r3, [r0, #0]
   10434:	784b      	ldrb	r3, [r1, #1]
   10436:	7043      	strb	r3, [r0, #1]
   10438:	788b      	ldrb	r3, [r1, #2]
   1043a:	7083      	strb	r3, [r0, #2]
   1043c:	4660      	mov	r0, ip
   1043e:	4770      	bx	lr

00010440 <memset>:
   10440:	b470      	push	{r4, r5, r6}
   10442:	0786      	lsls	r6, r0, #30
   10444:	d046      	beq.n	104d4 <memset+0x94>
   10446:	1e54      	subs	r4, r2, #1
   10448:	2a00      	cmp	r2, #0
   1044a:	d041      	beq.n	104d0 <memset+0x90>
   1044c:	b2ca      	uxtb	r2, r1
   1044e:	4603      	mov	r3, r0
   10450:	e002      	b.n	10458 <memset+0x18>
   10452:	f114 34ff 	adds.w	r4, r4, #4294967295
   10456:	d33b      	bcc.n	104d0 <memset+0x90>
   10458:	f803 2b01 	strb.w	r2, [r3], #1
   1045c:	079d      	lsls	r5, r3, #30
   1045e:	d1f8      	bne.n	10452 <memset+0x12>
   10460:	2c03      	cmp	r4, #3
   10462:	d92e      	bls.n	104c2 <memset+0x82>
   10464:	b2cd      	uxtb	r5, r1
   10466:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1046a:	2c0f      	cmp	r4, #15
   1046c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10470:	d919      	bls.n	104a6 <memset+0x66>
   10472:	f103 0210 	add.w	r2, r3, #16
   10476:	4626      	mov	r6, r4
   10478:	3e10      	subs	r6, #16
   1047a:	2e0f      	cmp	r6, #15
   1047c:	f842 5c10 	str.w	r5, [r2, #-16]
   10480:	f842 5c0c 	str.w	r5, [r2, #-12]
   10484:	f842 5c08 	str.w	r5, [r2, #-8]
   10488:	f842 5c04 	str.w	r5, [r2, #-4]
   1048c:	f102 0210 	add.w	r2, r2, #16
   10490:	d8f2      	bhi.n	10478 <memset+0x38>
   10492:	f1a4 0210 	sub.w	r2, r4, #16
   10496:	f022 020f 	bic.w	r2, r2, #15
   1049a:	f004 040f 	and.w	r4, r4, #15
   1049e:	3210      	adds	r2, #16
   104a0:	2c03      	cmp	r4, #3
   104a2:	4413      	add	r3, r2
   104a4:	d90d      	bls.n	104c2 <memset+0x82>
   104a6:	461e      	mov	r6, r3
   104a8:	4622      	mov	r2, r4
   104aa:	3a04      	subs	r2, #4
   104ac:	2a03      	cmp	r2, #3
   104ae:	f846 5b04 	str.w	r5, [r6], #4
   104b2:	d8fa      	bhi.n	104aa <memset+0x6a>
   104b4:	1f22      	subs	r2, r4, #4
   104b6:	f022 0203 	bic.w	r2, r2, #3
   104ba:	3204      	adds	r2, #4
   104bc:	4413      	add	r3, r2
   104be:	f004 0403 	and.w	r4, r4, #3
   104c2:	b12c      	cbz	r4, 104d0 <memset+0x90>
   104c4:	b2c9      	uxtb	r1, r1
   104c6:	441c      	add	r4, r3
   104c8:	f803 1b01 	strb.w	r1, [r3], #1
   104cc:	429c      	cmp	r4, r3
   104ce:	d1fb      	bne.n	104c8 <memset+0x88>
   104d0:	bc70      	pop	{r4, r5, r6}
   104d2:	4770      	bx	lr
   104d4:	4614      	mov	r4, r2
   104d6:	4603      	mov	r3, r0
   104d8:	e7c2      	b.n	10460 <memset+0x20>
   104da:	bf00      	nop
	...

00010500 <strlen>:
   10500:	f890 f000 	pld	[r0]
   10504:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   10508:	f020 0107 	bic.w	r1, r0, #7
   1050c:	f06f 0c00 	mvn.w	ip, #0
   10510:	f010 0407 	ands.w	r4, r0, #7
   10514:	f891 f020 	pld	[r1, #32]
   10518:	f040 8049 	bne.w	105ae <strlen+0xae>
   1051c:	f04f 0400 	mov.w	r4, #0
   10520:	f06f 0007 	mvn.w	r0, #7
   10524:	e9d1 2300 	ldrd	r2, r3, [r1]
   10528:	f891 f040 	pld	[r1, #64]	; 0x40
   1052c:	f100 0008 	add.w	r0, r0, #8
   10530:	fa82 f24c 	uadd8	r2, r2, ip
   10534:	faa4 f28c 	sel	r2, r4, ip
   10538:	fa83 f34c 	uadd8	r3, r3, ip
   1053c:	faa2 f38c 	sel	r3, r2, ip
   10540:	bb4b      	cbnz	r3, 10596 <strlen+0x96>
   10542:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10546:	fa82 f24c 	uadd8	r2, r2, ip
   1054a:	f100 0008 	add.w	r0, r0, #8
   1054e:	faa4 f28c 	sel	r2, r4, ip
   10552:	fa83 f34c 	uadd8	r3, r3, ip
   10556:	faa2 f38c 	sel	r3, r2, ip
   1055a:	b9e3      	cbnz	r3, 10596 <strlen+0x96>
   1055c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10560:	fa82 f24c 	uadd8	r2, r2, ip
   10564:	f100 0008 	add.w	r0, r0, #8
   10568:	faa4 f28c 	sel	r2, r4, ip
   1056c:	fa83 f34c 	uadd8	r3, r3, ip
   10570:	faa2 f38c 	sel	r3, r2, ip
   10574:	b97b      	cbnz	r3, 10596 <strlen+0x96>
   10576:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1057a:	f101 0120 	add.w	r1, r1, #32
   1057e:	fa82 f24c 	uadd8	r2, r2, ip
   10582:	f100 0008 	add.w	r0, r0, #8
   10586:	faa4 f28c 	sel	r2, r4, ip
   1058a:	fa83 f34c 	uadd8	r3, r3, ip
   1058e:	faa2 f38c 	sel	r3, r2, ip
   10592:	2b00      	cmp	r3, #0
   10594:	d0c6      	beq.n	10524 <strlen+0x24>
   10596:	2a00      	cmp	r2, #0
   10598:	bf04      	itt	eq
   1059a:	3004      	addeq	r0, #4
   1059c:	461a      	moveq	r2, r3
   1059e:	ba12      	rev	r2, r2
   105a0:	fab2 f282 	clz	r2, r2
   105a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   105a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   105ac:	4770      	bx	lr
   105ae:	e9d1 2300 	ldrd	r2, r3, [r1]
   105b2:	f004 0503 	and.w	r5, r4, #3
   105b6:	f1c4 0000 	rsb	r0, r4, #0
   105ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   105be:	f014 0f04 	tst.w	r4, #4
   105c2:	f891 f040 	pld	[r1, #64]	; 0x40
   105c6:	fa0c f505 	lsl.w	r5, ip, r5
   105ca:	ea62 0205 	orn	r2, r2, r5
   105ce:	bf1c      	itt	ne
   105d0:	ea63 0305 	ornne	r3, r3, r5
   105d4:	4662      	movne	r2, ip
   105d6:	f04f 0400 	mov.w	r4, #0
   105da:	e7a9      	b.n	10530 <strlen+0x30>

000105dc <__register_exitproc>:
   105dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   105e0:	4d2c      	ldr	r5, [pc, #176]	; (10694 <__register_exitproc+0xb8>)
   105e2:	4606      	mov	r6, r0
   105e4:	6828      	ldr	r0, [r5, #0]
   105e6:	4698      	mov	r8, r3
   105e8:	460f      	mov	r7, r1
   105ea:	4691      	mov	r9, r2
   105ec:	f000 f882 	bl	106f4 <__retarget_lock_acquire_recursive>
   105f0:	4b29      	ldr	r3, [pc, #164]	; (10698 <__register_exitproc+0xbc>)
   105f2:	681c      	ldr	r4, [r3, #0]
   105f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   105f8:	2b00      	cmp	r3, #0
   105fa:	d03e      	beq.n	1067a <__register_exitproc+0x9e>
   105fc:	685a      	ldr	r2, [r3, #4]
   105fe:	2a1f      	cmp	r2, #31
   10600:	dc1c      	bgt.n	1063c <__register_exitproc+0x60>
   10602:	f102 0e01 	add.w	lr, r2, #1
   10606:	b176      	cbz	r6, 10626 <__register_exitproc+0x4a>
   10608:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1060c:	2401      	movs	r4, #1
   1060e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10612:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10616:	4094      	lsls	r4, r2
   10618:	4320      	orrs	r0, r4
   1061a:	2e02      	cmp	r6, #2
   1061c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   10620:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10624:	d023      	beq.n	1066e <__register_exitproc+0x92>
   10626:	3202      	adds	r2, #2
   10628:	f8c3 e004 	str.w	lr, [r3, #4]
   1062c:	6828      	ldr	r0, [r5, #0]
   1062e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   10632:	f000 f861 	bl	106f8 <__retarget_lock_release_recursive>
   10636:	2000      	movs	r0, #0
   10638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1063c:	4b17      	ldr	r3, [pc, #92]	; (1069c <__register_exitproc+0xc0>)
   1063e:	b30b      	cbz	r3, 10684 <__register_exitproc+0xa8>
   10640:	f44f 70c8 	mov.w	r0, #400	; 0x190
   10644:	f7ff f8d8 	bl	f7f8 <malloc>
   10648:	4603      	mov	r3, r0
   1064a:	b1d8      	cbz	r0, 10684 <__register_exitproc+0xa8>
   1064c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   10650:	6002      	str	r2, [r0, #0]
   10652:	2100      	movs	r1, #0
   10654:	6041      	str	r1, [r0, #4]
   10656:	460a      	mov	r2, r1
   10658:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1065c:	f04f 0e01 	mov.w	lr, #1
   10660:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   10664:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   10668:	2e00      	cmp	r6, #0
   1066a:	d0dc      	beq.n	10626 <__register_exitproc+0x4a>
   1066c:	e7cc      	b.n	10608 <__register_exitproc+0x2c>
   1066e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   10672:	430c      	orrs	r4, r1
   10674:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   10678:	e7d5      	b.n	10626 <__register_exitproc+0x4a>
   1067a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1067e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   10682:	e7bb      	b.n	105fc <__register_exitproc+0x20>
   10684:	6828      	ldr	r0, [r5, #0]
   10686:	f000 f837 	bl	106f8 <__retarget_lock_release_recursive>
   1068a:	f04f 30ff 	mov.w	r0, #4294967295
   1068e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10692:	bf00      	nop
   10694:	20000638 	.word	0x20000638
   10698:	00010c84 	.word	0x00010c84
   1069c:	0000f7f9 	.word	0x0000f7f9

000106a0 <register_fini>:
   106a0:	4b02      	ldr	r3, [pc, #8]	; (106ac <register_fini+0xc>)
   106a2:	b113      	cbz	r3, 106aa <register_fini+0xa>
   106a4:	4802      	ldr	r0, [pc, #8]	; (106b0 <register_fini+0x10>)
   106a6:	f000 b805 	b.w	106b4 <atexit>
   106aa:	4770      	bx	lr
   106ac:	00000000 	.word	0x00000000
   106b0:	000106c1 	.word	0x000106c1

000106b4 <atexit>:
   106b4:	2300      	movs	r3, #0
   106b6:	4601      	mov	r1, r0
   106b8:	461a      	mov	r2, r3
   106ba:	4618      	mov	r0, r3
   106bc:	f7ff bf8e 	b.w	105dc <__register_exitproc>

000106c0 <__libc_fini_array>:
   106c0:	b538      	push	{r3, r4, r5, lr}
   106c2:	4c0a      	ldr	r4, [pc, #40]	; (106ec <__libc_fini_array+0x2c>)
   106c4:	4d0a      	ldr	r5, [pc, #40]	; (106f0 <__libc_fini_array+0x30>)
   106c6:	1b64      	subs	r4, r4, r5
   106c8:	10a4      	asrs	r4, r4, #2
   106ca:	d00a      	beq.n	106e2 <__libc_fini_array+0x22>
   106cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   106d0:	3b01      	subs	r3, #1
   106d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   106d6:	3c01      	subs	r4, #1
   106d8:	f855 3904 	ldr.w	r3, [r5], #-4
   106dc:	4798      	blx	r3
   106de:	2c00      	cmp	r4, #0
   106e0:	d1f9      	bne.n	106d6 <__libc_fini_array+0x16>
   106e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   106e6:	f000 baef 	b.w	10cc8 <_fini>
   106ea:	bf00      	nop
   106ec:	00010cd8 	.word	0x00010cd8
   106f0:	00010cd4 	.word	0x00010cd4

000106f4 <__retarget_lock_acquire_recursive>:
   106f4:	4770      	bx	lr
   106f6:	bf00      	nop

000106f8 <__retarget_lock_release_recursive>:
   106f8:	4770      	bx	lr
   106fa:	bf00      	nop

000106fc <_ZTV18Event_Logger_Class>:
	...
   10704:	e4dd 0000 e5cd 0000 6e49 6f66 4d3a 6d65     ........Info:Mem
   10714:	726f 2079 7453 7261 6574 0064 6548 7461     ory Started.Heat
   10724:	7265 3120 203a 7369 4f20 004b 3148 564f     er 1: is OK.H1OV
   10734:	3a31 6620 6961 006c 2e2e 682f 6c70 702f     1: fail.../hpl/p
   10744:	726f 2f74 7068 5f6c 7067 6f69 625f 7361     ort/hpl_gpio_bas
   10754:	2e65 0068 2e2e 682f 6c61 692f 636e 756c     e.h.../hal/inclu
   10764:	6564 682f 6c61 775f 7464 682e 0000 0000     de/hal_wdt.h....
   10774:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   10784:	6c61 6e65 6164 2e72 0063 0000 2e2e 682f     alendar.c...../h
   10794:	6c61 732f 6372 682f 6c61 635f 6e61 615f     al/src/hal_can_a
   107a4:	7973 636e 632e 0000 2e2e 682f 6c61 732f     sync.c..../hal/s
   107b4:	6372 682f 6c61 635f 6372 735f 6e79 2e63     rc/hal_crc_sync.
   107c4:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
   107d4:	6c61 695f 6332 6d5f 735f 6e79 2e63 0063     al_i2c_m_sync.c.
   107e4:	2e2e 682f 6c61 732f 6372 682f 6c61 705f     ../hal/src/hal_p
   107f4:	6d77 632e 0000 0000 2e2e 682f 6c61 732f     wm.c....../hal/s
   10804:	6372 682f 6c61 715f 7073 5f69 7973 636e     rc/hal_qspi_sync
   10814:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   10824:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
   10834:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
   10844:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
   10854:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
   10864:	7369 2e74 0063 0000                         ist.c...

0001086c <_map>:
   1086c:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
   1087c:	0003 0000 0003 0000 0004 0000 0004 0000     ................
   1088c:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   1089c:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
   108ac:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
   108bc:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

000108cc <user_mux_confs>:
   108cc:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

00010910 <channel_confs>:
   10910:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

00010950 <interrupt_cfg>:
	...
   109d0:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   109e0:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   109f0:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   10a00:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   10a10:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   10a20:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   10a30:	0400 4300 0800 4300 0c00 4300               ...C...C...C

00010a3c <sercomspi_regs>:
   10a3c:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
   10a4c:	0c04 3000 0000 0200 0000 0000 1700 ff00     ...0............
   10a5c:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   10a6c:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   10a7c:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   10a8c:	1400 4300 1800 4300                         ...C...C

00010a94 <_usb_ep_cfgs>:
   10a94:	21d8 2000 0000 0000 0040 0000 2218 2000     .!. ....@....". 
   10aa4:	2258 2000 0040 0040 2298 2000 22d8 2000     X". @.@..". .". 
   10ab4:	0040 0040 2318 2000 2358 2000 0040 0040     @.@..#. X#. @.@.
   10ac4:	2398 2000 23d8 2000 0040 0040 0804 0000     .#. .#. @.@.....
   10ad4:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   10ae4:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   10af4:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   10b04:	625f 7361 2e65 0068                         _base.h.

00010b0c <n25q256a_interface>:
   10b0c:	bbe9 0000 bc8d 0000 bd9d 0000 bf55 0000     ............U...
   10b1c:	bfe5 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
   10b2c:	2f65 7375 6462 2e63 0063 0000 2e2e 2e2f     e/usbdc.c...../.
   10b3c:	2f2e 2e2e 412f 554c 445f 6972 6576 2f72     ./../ALU_Driver/
   10b4c:	4c41 5f55 7244 7669 7265 682f 6c70 702f     ALU_Driver/hpl/p
   10b5c:	726f 2f74 7068 5f6c 7067 6f69 625f 7361     ort/hpl_gpio_bas
   10b6c:	2e65 0068 3731 323a 3a33 3031 0000 0000     e.h.17:23:10....

00010b7c <_ZTV14Calendar_Class>:
	...
   10b84:	e4dd 0000 e5cd 0000                         ........

00010b8c <_ZTV17DateTimeLog_Class>:
	...
   10b94:	f80d 0000 f80d 0000                         ........

00010b9c <_ZTV9CDC_Class>:
	...
   10ba4:	f0ed 0000 f1cd 0000 ed71 0000 f0b5 0000     ........q.......
   10bb4:	f265 0000 f079 0000 ef8d 0000 efdd 0000     e...y...........
   10bc4:	f0d5 0000 f135 0000                         ....5...

00010bcc <_ZTV6Stream>:
	...
   10bd4:	f80d 0000 f40d 0000 ed71 0000 ed85 0000     ........q.......
   10be4:	f80d 0000 f80d 0000 f80d 0000 7830 2e25     ............0x%.
   10bf4:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   10c04:	766f 0066                                   ovf.

00010c08 <_ZTV5Print>:
	...
   10c10:	f80d 0000 f40d 0000 ed71 0000 ed85 0000     ........q.......
   10c20:	6c46 7361 2068 654d 6f6d 7972 5320 6c65     Flash Memory Sel
   10c30:	5466 7365 2074 4150 5353 4445 0000 0000     fTest PASSED....
   10c40:	0a0d 0000 6c46 7361 2068 654d 6f6d 7972     ....Flash Memory
   10c50:	5320 6c65 5466 7365 2074 4146 4c49 4445      SelfTest FAILED
   10c60:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   10c70:	6c61 695f 2e6f 0063                         al_io.c.

00010c78 <defaultParameters>:
   10c78:	4020 0000                                    @..

00010c7c <defaultPreferences>:
   10c7c:	00fa 0000 0032 0000                         ....2...

00010c84 <_global_impure_ptr>:
   10c84:	0210 2000                                   ... 

00010c88 <_init>:
   10c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c8a:	bf00      	nop
   10c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10c8e:	bc08      	pop	{r3}
   10c90:	469e      	mov	lr, r3
   10c92:	4770      	bx	lr

00010c94 <__init_array_start>:
   10c94:	000106a1 	.word	0x000106a1

00010c98 <__frame_dummy_init_array_entry>:
   10c98:	00000289 000005a5 000007d9 0000d815     ................
   10ca8:	0000e0cd 0000e819 0000ed39 0000f3bd     ........9.......
   10cb8:	0000f7e5 0000fb65 0000fcf1 00010275     ....e.......u...

00010cc8 <_fini>:
   10cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10cca:	bf00      	nop
   10ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10cce:	bc08      	pop	{r3}
   10cd0:	469e      	mov	lr, r3
   10cd2:	4770      	bx	lr

00010cd4 <__fini_array_start>:
   10cd4:	00000265 	.word	0x00000265
