
Event_Manager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f920  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f920  0000f920  0001f920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  0000f928  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002060c  2**0
                  CONTENTS
  5 .bss          00009ff0  20000610  0000ff38  0002060c  2**3
                  ALLOC
  6 .stack        00010000  2000a600  00019f28  0002060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000762d7  00000000  00000000  00020693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a4c4  00000000  00000000  0009696a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001bc12  00000000  00000000  000a0e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000030f8  00000000  00000000  000bca40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002d70  00000000  00000000  000bfb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004eab9  00000000  00000000  000c28a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003b69f  00000000  00000000  00111361  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013dabf  00000000  00000000  0014ca00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c9dc  00000000  00000000  0028a4c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 a6 01 20 99 03 00 00 95 03 00 00 95 03 00 00     ... ............
      10:	95 03 00 00 95 03 00 00 95 03 00 00 00 00 00 00     ................
	...
      2c:	95 03 00 00 95 03 00 00 00 00 00 00 95 03 00 00     ................
      3c:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
      4c:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
      5c:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
      6c:	69 5c 00 00 19 4a 00 00 29 4a 00 00 95 03 00 00     i\...J..)J......
      7c:	39 4a 00 00 49 4a 00 00 59 4a 00 00 69 4a 00 00     9J..IJ..YJ..iJ..
      8c:	79 4a 00 00 89 4a 00 00 99 4a 00 00 95 03 00 00     yJ...J...J......
      9c:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
      ac:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
      bc:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
      cc:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
      dc:	95 03 00 00 95 03 00 00 95 03 00 00 00 00 00 00     ................
	...
      f4:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     104:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     114:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     124:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     134:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     144:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     154:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     164:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     174:	95 03 00 00 95 03 00 00 61 3e 00 00 d1 a9 00 00     ........a>......
     184:	e1 a9 00 00 f1 a9 00 00 01 aa 00 00 95 03 00 00     ................
     194:	2d 74 00 00 95 03 00 00 95 03 00 00 95 03 00 00     -t..............
     1a4:	95 03 00 00 95 03 00 00 95 03 00 00 49 74 00 00     ............It..
     1b4:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     1c4:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     1d4:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     1e4:	95 03 00 00 95 03 00 00 cd 80 00 00 95 03 00 00     ................
     1f4:	e9 80 00 00 95 03 00 00 05 81 00 00 21 81 00 00     ............!...
     204:	3d 81 00 00 59 81 00 00 95 03 00 00 95 03 00 00     =...Y...........
     214:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     224:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     234:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     244:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................
     254:	95 03 00 00 95 03 00 00 95 03 00 00 95 03 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000610 	.word	0x20000610
     280:	00000000 	.word	0x00000000
     284:	0000f928 	.word	0x0000f928

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f928 	.word	0x0000f928
     2c4:	20000614 	.word	0x20000614
     2c8:	0000f928 	.word	0x0000f928
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN15DataLoger_ClassC1Ev>:


static uint8_t staticEventLogs[QSPI_ERBLK];

// default constructor
DataLoger_Class::DataLoger_Class()
     2d0:	b510      	push	{r4, lr}
     2d2:	4604      	mov	r4, r0
     2d4:	4b09      	ldr	r3, [pc, #36]	; (2fc <_ZN15DataLoger_ClassC1Ev+0x2c>)
     2d6:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
     2d8:	f44f 7200 	mov.w	r2, #512	; 0x200
     2dc:	2100      	movs	r1, #0
     2de:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
     2e2:	4b07      	ldr	r3, [pc, #28]	; (300 <_ZN15DataLoger_ClassC1Ev+0x30>)
     2e4:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
     2e6:	2300      	movs	r3, #0
     2e8:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
     2ec:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
{
	stackPointer=&staticEventLogs[0];
     2f0:	4b04      	ldr	r3, [pc, #16]	; (304 <_ZN15DataLoger_ClassC1Ev+0x34>)
     2f2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
} //DataLoger_Class
     2f6:	4620      	mov	r0, r4
     2f8:	bd10      	pop	{r4, pc}
     2fa:	bf00      	nop
     2fc:	0000d579 	.word	0x0000d579
     300:	0000f0a5 	.word	0x0000f0a5
     304:	2000062c 	.word	0x2000062c

00000308 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
     308:	b510      	push	{r4, lr}
     30a:	4604      	mov	r4, r0
     30c:	4b01      	ldr	r3, [pc, #4]	; (314 <_ZN15DataLoger_ClassD1Ev+0xc>)
     30e:	4798      	blx	r3
{
} //~DataLoger_Class
     310:	4620      	mov	r0, r4
     312:	bd10      	pop	{r4, pc}
     314:	0000d5b5 	.word	0x0000d5b5

00000318 <_ZN15DataLoger_Class11IsStackFullEv>:
	stackValue+=sizeof(Event_Log_Entry);
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if ((stackPointer+(sizeof(Event_Log_Entry))>&staticEventLogs[QSPI_ERBLK-1]))
     318:	f8d0 3534 	ldr.w	r3, [r0, #1332]	; 0x534
     31c:	3340      	adds	r3, #64	; 0x40
	} 
	else
	{
		return false;
	}
     31e:	4803      	ldr	r0, [pc, #12]	; (32c <_ZN15DataLoger_Class11IsStackFullEv+0x14>)
     320:	4283      	cmp	r3, r0
     322:	bf94      	ite	ls
     324:	2000      	movls	r0, #0
     326:	2001      	movhi	r0, #1
     328:	4770      	bx	lr
     32a:	bf00      	nop
     32c:	2000162b 	.word	0x2000162b

00000330 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent){
     330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     332:	4605      	mov	r5, r0
     334:	460c      	mov	r4, r1
	if (IsStackFull())
     336:	4b13      	ldr	r3, [pc, #76]	; (384 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x54>)
     338:	4798      	blx	r3
     33a:	b9c0      	cbnz	r0, 36e <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x3e>
	memcpy(&stackPointer[stackValue],ent,sizeof(Event_Log_Entry));
     33c:	f8d5 3534 	ldr.w	r3, [r5, #1332]	; 0x534
     340:	f8d5 14f0 	ldr.w	r1, [r5, #1264]	; 0x4f0
     344:	4622      	mov	r2, r4
     346:	440b      	add	r3, r1
     348:	3440      	adds	r4, #64	; 0x40
     34a:	6817      	ldr	r7, [r2, #0]
     34c:	6856      	ldr	r6, [r2, #4]
     34e:	6890      	ldr	r0, [r2, #8]
     350:	68d1      	ldr	r1, [r2, #12]
     352:	601f      	str	r7, [r3, #0]
     354:	605e      	str	r6, [r3, #4]
     356:	6098      	str	r0, [r3, #8]
     358:	60d9      	str	r1, [r3, #12]
     35a:	3210      	adds	r2, #16
     35c:	3310      	adds	r3, #16
     35e:	42a2      	cmp	r2, r4
     360:	d1f3      	bne.n	34a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x1a>
	stackValue+=sizeof(Event_Log_Entry);
     362:	f8d5 04f0 	ldr.w	r0, [r5, #1264]	; 0x4f0
     366:	3040      	adds	r0, #64	; 0x40
     368:	f8c5 04f0 	str.w	r0, [r5, #1264]	; 0x4f0
}
     36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memory.SaveEventLog(&staticEventLogs[0]);
     36e:	4e06      	ldr	r6, [pc, #24]	; (388 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x58>)
     370:	4631      	mov	r1, r6
     372:	4806      	ldr	r0, [pc, #24]	; (38c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x5c>)
     374:	4b06      	ldr	r3, [pc, #24]	; (390 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0x60>)
     376:	4798      	blx	r3
		stackPointer=&staticEventLogs[stk];
     378:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
	stackValue=stk;
     37c:	2300      	movs	r3, #0
     37e:	f8c5 34f0 	str.w	r3, [r5, #1264]	; 0x4f0
     382:	e7db      	b.n	33c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entry+0xc>
     384:	00000319 	.word	0x00000319
     388:	2000062c 	.word	0x2000062c
     38c:	20003fac 	.word	0x20003fac
     390:	0000edc5 	.word	0x0000edc5

00000394 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     394:	e7fe      	b.n	394 <Dummy_Handler>
	...

00000398 <Reset_Handler>:
{
     398:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     39a:	4b17      	ldr	r3, [pc, #92]	; (3f8 <Reset_Handler+0x60>)
     39c:	4a17      	ldr	r2, [pc, #92]	; (3fc <Reset_Handler+0x64>)
     39e:	429a      	cmp	r2, r3
     3a0:	d010      	beq.n	3c4 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     3a2:	4b17      	ldr	r3, [pc, #92]	; (400 <Reset_Handler+0x68>)
     3a4:	4a14      	ldr	r2, [pc, #80]	; (3f8 <Reset_Handler+0x60>)
     3a6:	429a      	cmp	r2, r3
     3a8:	d20c      	bcs.n	3c4 <Reset_Handler+0x2c>
     3aa:	3b01      	subs	r3, #1
     3ac:	1a9b      	subs	r3, r3, r2
     3ae:	f023 0303 	bic.w	r3, r3, #3
     3b2:	3304      	adds	r3, #4
     3b4:	4413      	add	r3, r2
     3b6:	4911      	ldr	r1, [pc, #68]	; (3fc <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     3b8:	f851 0b04 	ldr.w	r0, [r1], #4
     3bc:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     3c0:	429a      	cmp	r2, r3
     3c2:	d1f9      	bne.n	3b8 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     3c4:	4b0f      	ldr	r3, [pc, #60]	; (404 <Reset_Handler+0x6c>)
     3c6:	4a10      	ldr	r2, [pc, #64]	; (408 <Reset_Handler+0x70>)
     3c8:	429a      	cmp	r2, r3
     3ca:	d20a      	bcs.n	3e2 <Reset_Handler+0x4a>
     3cc:	3b01      	subs	r3, #1
     3ce:	1a9b      	subs	r3, r3, r2
     3d0:	f023 0303 	bic.w	r3, r3, #3
     3d4:	3304      	adds	r3, #4
     3d6:	4413      	add	r3, r2
                *pDest++ = 0;
     3d8:	2100      	movs	r1, #0
     3da:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     3de:	4293      	cmp	r3, r2
     3e0:	d1fb      	bne.n	3da <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     3e2:	4a0a      	ldr	r2, [pc, #40]	; (40c <Reset_Handler+0x74>)
     3e4:	4b0a      	ldr	r3, [pc, #40]	; (410 <Reset_Handler+0x78>)
     3e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     3ea:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     3ec:	4b09      	ldr	r3, [pc, #36]	; (414 <Reset_Handler+0x7c>)
     3ee:	4798      	blx	r3
        main();
     3f0:	4b09      	ldr	r3, [pc, #36]	; (418 <Reset_Handler+0x80>)
     3f2:	4798      	blx	r3
     3f4:	e7fe      	b.n	3f4 <Reset_Handler+0x5c>
     3f6:	bf00      	nop
     3f8:	20000000 	.word	0x20000000
     3fc:	0000f928 	.word	0x0000f928
     400:	2000060c 	.word	0x2000060c
     404:	2000a600 	.word	0x2000a600
     408:	20000610 	.word	0x20000610
     40c:	e000ed00 	.word	0xe000ed00
     410:	00000000 	.word	0x00000000
     414:	0000ef21 	.word	0x0000ef21
     418:	000006bd 	.word	0x000006bd

0000041c <_ZN18Event_Logger_ClassD1Ev>:
{
	cal=&staticClock;
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
     41c:	b510      	push	{r4, lr}
     41e:	4604      	mov	r4, r0
     420:	4b06      	ldr	r3, [pc, #24]	; (43c <_ZN18Event_Logger_ClassD1Ev+0x20>)
     422:	f840 3bb0 	str.w	r3, [r0], #176
     426:	4b06      	ldr	r3, [pc, #24]	; (440 <_ZN18Event_Logger_ClassD1Ev+0x24>)
     428:	4798      	blx	r3
     42a:	f104 00ac 	add.w	r0, r4, #172	; 0xac
     42e:	4b05      	ldr	r3, [pc, #20]	; (444 <_ZN18Event_Logger_ClassD1Ev+0x28>)
     430:	4798      	blx	r3
     432:	4620      	mov	r0, r4
     434:	4b04      	ldr	r3, [pc, #16]	; (448 <_ZN18Event_Logger_ClassD1Ev+0x2c>)
     436:	4798      	blx	r3
{
} //~Event_Logger_Class
     438:	4620      	mov	r0, r4
     43a:	bd10      	pop	{r4, pc}
     43c:	0000f344 	.word	0x0000f344
     440:	00000309 	.word	0x00000309
     444:	0000063f 	.word	0x0000063f
     448:	0000d9e1 	.word	0x0000d9e1

0000044c <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
     44c:	b510      	push	{r4, lr}
     44e:	4604      	mov	r4, r0
     450:	4b08      	ldr	r3, [pc, #32]	; (474 <_ZN18Event_Logger_ClassC1Ev+0x28>)
     452:	4798      	blx	r3
     454:	f104 00ac 	add.w	r0, r4, #172	; 0xac
     458:	4b07      	ldr	r3, [pc, #28]	; (478 <_ZN18Event_Logger_ClassC1Ev+0x2c>)
     45a:	4798      	blx	r3
     45c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
     460:	4b06      	ldr	r3, [pc, #24]	; (47c <_ZN18Event_Logger_ClassC1Ev+0x30>)
     462:	4798      	blx	r3
     464:	4b06      	ldr	r3, [pc, #24]	; (480 <_ZN18Event_Logger_ClassC1Ev+0x34>)
     466:	6023      	str	r3, [r4, #0]
	cal=&staticClock;
     468:	4b06      	ldr	r3, [pc, #24]	; (484 <_ZN18Event_Logger_ClassC1Ev+0x38>)
     46a:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
} //Event_Logger_Class
     46e:	4620      	mov	r0, r4
     470:	bd10      	pop	{r4, pc}
     472:	bf00      	nop
     474:	0000d971 	.word	0x0000d971
     478:	0000063d 	.word	0x0000063d
     47c:	000002d1 	.word	0x000002d1
     480:	0000f344 	.word	0x0000f344
     484:	20001630 	.word	0x20001630

00000488 <_ZN18Event_Logger_Class9SaveEventEPh>:
	nullDateTime.time.hour = 0x0;
	nullDateTime.time.min  = 0x0;
	nullDateTime.time.sec  = 0x0;
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
     488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     48a:	4604      	mov	r4, r0
     48c:	460d      	mov	r5, r1
	
	GetDateTime(&currentDateTime);
     48e:	f200 57f4 	addw	r7, r0, #1524	; 0x5f4
     492:	4606      	mov	r6, r0
     494:	f856 3bac 	ldr.w	r3, [r6], #172
     498:	681b      	ldr	r3, [r3, #0]
     49a:	4639      	mov	r1, r7
     49c:	4798      	blx	r3
	semiColonPosition=FindSemiColon(text);
     49e:	4629      	mov	r1, r5
     4a0:	4630      	mov	r0, r6
     4a2:	4b21      	ldr	r3, [pc, #132]	; (528 <_ZN18Event_Logger_Class9SaveEventEPh+0xa0>)
     4a4:	4798      	blx	r3
     4a6:	4602      	mov	r2, r0
     4a8:	f884 06ec 	strb.w	r0, [r4, #1772]	; 0x6ec
	memcpy(&entry.code,text,(uint32_t)semiColonPosition);
     4ac:	4629      	mov	r1, r5
     4ae:	f504 60d6 	add.w	r0, r4, #1712	; 0x6b0
     4b2:	4b1e      	ldr	r3, [pc, #120]	; (52c <_ZN18Event_Logger_Class9SaveEventEPh+0xa4>)
     4b4:	4798      	blx	r3

	ChopStringDescription(text);
     4b6:	4629      	mov	r1, r5
     4b8:	4630      	mov	r0, r6
     4ba:	4b1d      	ldr	r3, [pc, #116]	; (530 <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>)
     4bc:	4798      	blx	r3
	memcpy(&entry.description,&text[semiColonPosition],44);
     4be:	f894 36ec 	ldrb.w	r3, [r4, #1772]	; 0x6ec
     4c2:	442b      	add	r3, r5
     4c4:	f504 62d8 	add.w	r2, r4, #1728	; 0x6c0
     4c8:	f103 0120 	add.w	r1, r3, #32
     4cc:	f8d3 c000 	ldr.w	ip, [r3]
     4d0:	f8d3 e004 	ldr.w	lr, [r3, #4]
     4d4:	689e      	ldr	r6, [r3, #8]
     4d6:	68d8      	ldr	r0, [r3, #12]
     4d8:	f8c2 c000 	str.w	ip, [r2]
     4dc:	f8c2 e004 	str.w	lr, [r2, #4]
     4e0:	6096      	str	r6, [r2, #8]
     4e2:	60d0      	str	r0, [r2, #12]
     4e4:	3310      	adds	r3, #16
     4e6:	3210      	adds	r2, #16
     4e8:	428b      	cmp	r3, r1
     4ea:	d1ef      	bne.n	4cc <_ZN18Event_Logger_Class9SaveEventEPh+0x44>
     4ec:	6818      	ldr	r0, [r3, #0]
     4ee:	6859      	ldr	r1, [r3, #4]
     4f0:	689b      	ldr	r3, [r3, #8]
     4f2:	6010      	str	r0, [r2, #0]
     4f4:	6051      	str	r1, [r2, #4]
     4f6:	6093      	str	r3, [r2, #8]
	currentTimestamp=convert_datetime_to_timestamp(&currentDateTime);
     4f8:	6823      	ldr	r3, [r4, #0]
     4fa:	685b      	ldr	r3, [r3, #4]
     4fc:	4639      	mov	r1, r7
     4fe:	4620      	mov	r0, r4
     500:	4798      	blx	r3
     502:	f8c4 06f4 	str.w	r0, [r4, #1780]	; 0x6f4
	entry.timestamp=currentTimestamp;
     506:	f8c4 06ac 	str.w	r0, [r4, #1708]	; 0x6ac
	StackEventEntry(&entry);
     50a:	f204 61ac 	addw	r1, r4, #1708	; 0x6ac
     50e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
     512:	4b08      	ldr	r3, [pc, #32]	; (534 <_ZN18Event_Logger_Class9SaveEventEPh+0xac>)
     514:	4798      	blx	r3
	
	if (usb.IsEnabled())
     516:	4808      	ldr	r0, [pc, #32]	; (538 <_ZN18Event_Logger_Class9SaveEventEPh+0xb0>)
     518:	4b08      	ldr	r3, [pc, #32]	; (53c <_ZN18Event_Logger_Class9SaveEventEPh+0xb4>)
     51a:	4798      	blx	r3
     51c:	b118      	cbz	r0, 526 <_ZN18Event_Logger_Class9SaveEventEPh+0x9e>
	{
	
		usb.println((char *)text);
     51e:	4629      	mov	r1, r5
     520:	4805      	ldr	r0, [pc, #20]	; (538 <_ZN18Event_Logger_Class9SaveEventEPh+0xb0>)
     522:	4b07      	ldr	r3, [pc, #28]	; (540 <_ZN18Event_Logger_Class9SaveEventEPh+0xb8>)
     524:	4798      	blx	r3
     526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     528:	0000068d 	.word	0x0000068d
     52c:	0000ef71 	.word	0x0000ef71
     530:	00000665 	.word	0x00000665
     534:	00000331 	.word	0x00000331
     538:	20002d84 	.word	0x20002d84
     53c:	0000e3e1 	.word	0x0000e3e1
     540:	0000e901 	.word	0x0000e901

00000544 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev>:
	else
	{
	}
}

 Event_Logger_Class	logger;
     544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     548:	4c2b      	ldr	r4, [pc, #172]	; (5f8 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xb4>)
     54a:	f104 05b0 	add.w	r5, r4, #176	; 0xb0
     54e:	492b      	ldr	r1, [pc, #172]	; (5fc <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xb8>)
     550:	4628      	mov	r0, r5
     552:	4f2b      	ldr	r7, [pc, #172]	; (600 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xbc>)
     554:	47b8      	blx	r7
     556:	4e2b      	ldr	r6, [pc, #172]	; (604 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xc0>)
     558:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 638 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xf4>
     55c:	4632      	mov	r2, r6
     55e:	4641      	mov	r1, r8
     560:	4628      	mov	r0, r5
     562:	4d29      	ldr	r5, [pc, #164]	; (608 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xc4>)
     564:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     566:	f104 09d0 	add.w	r9, r4, #208	; 0xd0
     56a:	4928      	ldr	r1, [pc, #160]	; (60c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xc8>)
     56c:	4648      	mov	r0, r9
     56e:	47b8      	blx	r7
     570:	4632      	mov	r2, r6
     572:	4641      	mov	r1, r8
     574:	4648      	mov	r0, r9
     576:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     578:	f104 09f0 	add.w	r9, r4, #240	; 0xf0
     57c:	4924      	ldr	r1, [pc, #144]	; (610 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xcc>)
     57e:	4648      	mov	r0, r9
     580:	47b8      	blx	r7
     582:	4632      	mov	r2, r6
     584:	4641      	mov	r1, r8
     586:	4648      	mov	r0, r9
     588:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     58a:	f504 7988 	add.w	r9, r4, #272	; 0x110
     58e:	4921      	ldr	r1, [pc, #132]	; (614 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xd0>)
     590:	4648      	mov	r0, r9
     592:	47b8      	blx	r7
     594:	4632      	mov	r2, r6
     596:	4641      	mov	r1, r8
     598:	4648      	mov	r0, r9
     59a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     59c:	f504 7998 	add.w	r9, r4, #304	; 0x130
     5a0:	491d      	ldr	r1, [pc, #116]	; (618 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xd4>)
     5a2:	4648      	mov	r0, r9
     5a4:	47b8      	blx	r7
     5a6:	4632      	mov	r2, r6
     5a8:	4641      	mov	r1, r8
     5aa:	4648      	mov	r0, r9
     5ac:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     5ae:	f504 79a8 	add.w	r9, r4, #336	; 0x150
     5b2:	491a      	ldr	r1, [pc, #104]	; (61c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xd8>)
     5b4:	4648      	mov	r0, r9
     5b6:	47b8      	blx	r7
     5b8:	4632      	mov	r2, r6
     5ba:	4641      	mov	r1, r8
     5bc:	4648      	mov	r0, r9
     5be:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     5c0:	f504 79b8 	add.w	r9, r4, #368	; 0x170
     5c4:	4916      	ldr	r1, [pc, #88]	; (620 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xdc>)
     5c6:	4648      	mov	r0, r9
     5c8:	47b8      	blx	r7
     5ca:	4632      	mov	r2, r6
     5cc:	4641      	mov	r1, r8
     5ce:	4648      	mov	r0, r9
     5d0:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
     5d2:	4914      	ldr	r1, [pc, #80]	; (624 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xe0>)
     5d4:	4620      	mov	r0, r4
     5d6:	4b14      	ldr	r3, [pc, #80]	; (628 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xe4>)
     5d8:	4798      	blx	r3
     5da:	4632      	mov	r2, r6
     5dc:	4913      	ldr	r1, [pc, #76]	; (62c <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xe8>)
     5de:	4620      	mov	r0, r4
     5e0:	47a8      	blx	r5
 Event_Logger_Class	logger;
     5e2:	f504 74c8 	add.w	r4, r4, #400	; 0x190
     5e6:	4620      	mov	r0, r4
     5e8:	4b11      	ldr	r3, [pc, #68]	; (630 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xec>)
     5ea:	4798      	blx	r3
     5ec:	4632      	mov	r2, r6
     5ee:	4911      	ldr	r1, [pc, #68]	; (634 <_GLOBAL__sub_I__ZN18Event_Logger_ClassC2Ev+0xf0>)
     5f0:	4620      	mov	r0, r4
     5f2:	47a8      	blx	r5
     5f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     5f8:	20001630 	.word	0x20001630
     5fc:	2000a368 	.word	0x2000a368
     600:	0000dcf9 	.word	0x0000dcf9
     604:	20000000 	.word	0x20000000
     608:	0000eeed 	.word	0x0000eeed
     60c:	2000a3fc 	.word	0x2000a3fc
     610:	2000a500 	.word	0x2000a500
     614:	2000a41c 	.word	0x2000a41c
     618:	2000a4c0 	.word	0x2000a4c0
     61c:	2000a4e0 	.word	0x2000a4e0
     620:	2000a3d8 	.word	0x2000a3d8
     624:	2000a520 	.word	0x2000a520
     628:	0000d9a5 	.word	0x0000d9a5
     62c:	0000d9e1 	.word	0x0000d9e1
     630:	0000044d 	.word	0x0000044d
     634:	0000041d 	.word	0x0000041d
     638:	0000dd31 	.word	0x0000dd31

0000063c <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
     63c:	4770      	bx	lr

0000063e <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
     63e:	4770      	bx	lr

00000640 <_ZN19Event_Logger_Struct12RemoveSpacesEPc>:
	// To keep track of non-space character count
	int count = 0;
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (int i = 0; str[i]; i++){
     640:	780b      	ldrb	r3, [r1, #0]
     642:	b163      	cbz	r3, 65e <_ZN19Event_Logger_Struct12RemoveSpacesEPc+0x1e>
     644:	4608      	mov	r0, r1
     646:	2200      	movs	r2, #0
		if (str[i] != ' '){
     648:	2b20      	cmp	r3, #32
			str[count++] = str[i]; // here count is
     64a:	bf1c      	itt	ne
     64c:	548b      	strbne	r3, [r1, r2]
     64e:	3201      	addne	r2, #1
	for (int i = 0; str[i]; i++){
     650:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     654:	2b00      	cmp	r3, #0
     656:	d1f7      	bne.n	648 <_ZN19Event_Logger_Struct12RemoveSpacesEPc+0x8>
		}
	}
	

	// incremented
	str[count] = '\0';
     658:	2300      	movs	r3, #0
     65a:	548b      	strb	r3, [r1, r2]
     65c:	4770      	bx	lr
	int count = 0;
     65e:	2200      	movs	r2, #0
     660:	e7fa      	b.n	658 <_ZN19Event_Logger_Struct12RemoveSpacesEPc+0x18>
	...

00000664 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:
void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
     664:	b538      	push	{r3, r4, r5, lr}
     666:	4605      	mov	r5, r0
     668:	460c      	mov	r4, r1
	RemoveSpaces((char *)str);
     66a:	4b06      	ldr	r3, [pc, #24]	; (684 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x20>)
     66c:	4798      	blx	r3
	sizeText=strlen((char *)str);
     66e:	4620      	mov	r0, r4
     670:	4b05      	ldr	r3, [pc, #20]	; (688 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x24>)
     672:	4798      	blx	r3
     674:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
     676:	b2c0      	uxtb	r0, r0
     678:	282c      	cmp	r0, #44	; 0x2c
		str[44]='\0';
     67a:	bfc4      	itt	gt
     67c:	2300      	movgt	r3, #0
     67e:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
     682:	bd38      	pop	{r3, r4, r5, pc}
     684:	00000641 	.word	0x00000641
     688:	0000f141 	.word	0x0000f141

0000068c <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
}

uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
     68c:	b508      	push	{r3, lr}
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (int i = 0; strlen((char *)str); i++){
     68e:	780b      	ldrb	r3, [r1, #0]
     690:	b163      	cbz	r3, 6ac <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x20>
		if (str[i] == ':'){
     692:	2b3a      	cmp	r3, #58	; 0x3a
     694:	bf18      	it	ne
     696:	2000      	movne	r0, #0
     698:	d006      	beq.n	6a8 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
	for (int i = 0; strlen((char *)str); i++){
     69a:	3001      	adds	r0, #1
		if (str[i] == ':'){
     69c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
     6a0:	2b3a      	cmp	r3, #58	; 0x3a
     6a2:	d1fa      	bne.n	69a <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xe>
			return i;
     6a4:	b2c0      	uxtb	r0, r0
     6a6:	bd08      	pop	{r3, pc}
	for (int i = 0; strlen((char *)str); i++){
     6a8:	2000      	movs	r0, #0
     6aa:	e7fb      	b.n	6a4 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
     6ac:	4608      	mov	r0, r1
		}
	}
	
	return strlen((char *)str);
     6ae:	4b02      	ldr	r3, [pc, #8]	; (6b8 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x2c>)
     6b0:	4798      	blx	r3
     6b2:	b2c0      	uxtb	r0, r0
}
     6b4:	bd08      	pop	{r3, pc}
     6b6:	bf00      	nop
     6b8:	0000f141 	.word	0x0000f141

000006bc <main>:

#include "main.h"
char  stringChar[16];

int main(void)
{
     6bc:	b570      	push	{r4, r5, r6, lr}
	atmel_start_init();
     6be:	4b25      	ldr	r3, [pc, #148]	; (754 <main+0x98>)
     6c0:	4798      	blx	r3
	int counter=0;
	
	usb.Init();
     6c2:	4c25      	ldr	r4, [pc, #148]	; (758 <main+0x9c>)
     6c4:	4620      	mov	r0, r4
     6c6:	4b25      	ldr	r3, [pc, #148]	; (75c <main+0xa0>)
     6c8:	4798      	blx	r3
	delay_ms(100);
     6ca:	2064      	movs	r0, #100	; 0x64
     6cc:	4b24      	ldr	r3, [pc, #144]	; (760 <main+0xa4>)
     6ce:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     6d0:	4e24      	ldr	r6, [pc, #144]	; (764 <main+0xa8>)
     6d2:	4631      	mov	r1, r6
     6d4:	4620      	mov	r0, r4
     6d6:	4d24      	ldr	r5, [pc, #144]	; (768 <main+0xac>)
     6d8:	47a8      	blx	r5
     6da:	4631      	mov	r1, r6
     6dc:	4620      	mov	r0, r4
     6de:	47a8      	blx	r5
     6e0:	4922      	ldr	r1, [pc, #136]	; (76c <main+0xb0>)
     6e2:	4620      	mov	r0, r4
     6e4:	47a8      	blx	r5
     6e6:	4631      	mov	r1, r6
     6e8:	4620      	mov	r0, r4
     6ea:	47a8      	blx	r5
     6ec:	4920      	ldr	r1, [pc, #128]	; (770 <main+0xb4>)
     6ee:	4620      	mov	r0, r4
     6f0:	47a8      	blx	r5
     6f2:	4920      	ldr	r1, [pc, #128]	; (774 <main+0xb8>)
     6f4:	4620      	mov	r0, r4
     6f6:	47a8      	blx	r5
     6f8:	491f      	ldr	r1, [pc, #124]	; (778 <main+0xbc>)
     6fa:	4620      	mov	r0, r4
     6fc:	47a8      	blx	r5
     6fe:	491f      	ldr	r1, [pc, #124]	; (77c <main+0xc0>)
     700:	4620      	mov	r0, r4
     702:	47a8      	blx	r5
     704:	4631      	mov	r1, r6
     706:	4620      	mov	r0, r4
     708:	47a8      	blx	r5
     70a:	4631      	mov	r1, r6
     70c:	4620      	mov	r0, r4
     70e:	47a8      	blx	r5

	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	if (memory.Init())
     710:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     714:	481a      	ldr	r0, [pc, #104]	; (780 <main+0xc4>)
     716:	4b1b      	ldr	r3, [pc, #108]	; (784 <main+0xc8>)
     718:	4798      	blx	r3
     71a:	b998      	cbnz	r0, 744 <main+0x88>
			logger.SaveEvent((uint8_t*)"Info:Memory Started");
	}
	else
	{
	}
	delay_ms(1000);
     71c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     720:	4b0f      	ldr	r3, [pc, #60]	; (760 <main+0xa4>)
     722:	4798      	blx	r3
	while(1){
		char	*str=&stringChar[0];
		itoa(counter,str,10);
     724:	4c18      	ldr	r4, [pc, #96]	; (788 <main+0xcc>)
     726:	4e19      	ldr	r6, [pc, #100]	; (78c <main+0xd0>)
		logger.SaveEvent((uint8_t*)str);
     728:	4d19      	ldr	r5, [pc, #100]	; (790 <main+0xd4>)
		itoa(counter,str,10);
     72a:	220a      	movs	r2, #10
     72c:	4621      	mov	r1, r4
     72e:	2000      	movs	r0, #0
     730:	47b0      	blx	r6
		logger.SaveEvent((uint8_t*)str);
     732:	4621      	mov	r1, r4
     734:	4628      	mov	r0, r5
     736:	4b17      	ldr	r3, [pc, #92]	; (794 <main+0xd8>)
     738:	4798      	blx	r3
		delay_ms(1000);
     73a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     73e:	4b08      	ldr	r3, [pc, #32]	; (760 <main+0xa4>)
     740:	4798      	blx	r3
     742:	e7f2      	b.n	72a <main+0x6e>
		memory.WriteDefaultParameters();
     744:	480e      	ldr	r0, [pc, #56]	; (780 <main+0xc4>)
     746:	4b14      	ldr	r3, [pc, #80]	; (798 <main+0xdc>)
     748:	4798      	blx	r3
			logger.SaveEvent((uint8_t*)"Info:Memory Started");
     74a:	4914      	ldr	r1, [pc, #80]	; (79c <main+0xe0>)
     74c:	4810      	ldr	r0, [pc, #64]	; (790 <main+0xd4>)
     74e:	4b11      	ldr	r3, [pc, #68]	; (794 <main+0xd8>)
     750:	4798      	blx	r3
     752:	e7e3      	b.n	71c <main+0x60>
     754:	00000861 	.word	0x00000861
     758:	20002d84 	.word	0x20002d84
     75c:	0000e39d 	.word	0x0000e39d
     760:	00002219 	.word	0x00002219
     764:	0000f34c 	.word	0x0000f34c
     768:	0000e8bd 	.word	0x0000e8bd
     76c:	0000f350 	.word	0x0000f350
     770:	0000f374 	.word	0x0000f374
     774:	0000f380 	.word	0x0000f380
     778:	0000f38c 	.word	0x0000f38c
     77c:	0000f394 	.word	0x0000f394
     780:	20003fac 	.word	0x20003fac
     784:	0000ed79 	.word	0x0000ed79
     788:	20001eb8 	.word	0x20001eb8
     78c:	0000cfa9 	.word	0x0000cfa9
     790:	200017c0 	.word	0x200017c0
     794:	00000489 	.word	0x00000489
     798:	0000ecc1 	.word	0x0000ecc1
     79c:	0000f3a0 	.word	0x0000f3a0

000007a0 <_GLOBAL__sub_I_stringChar>:
	}
}
     7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     7a4:	4c22      	ldr	r4, [pc, #136]	; (830 <_GLOBAL__sub_I_stringChar+0x90>)
     7a6:	f104 0510 	add.w	r5, r4, #16
     7aa:	4922      	ldr	r1, [pc, #136]	; (834 <_GLOBAL__sub_I_stringChar+0x94>)
     7ac:	4628      	mov	r0, r5
     7ae:	4e22      	ldr	r6, [pc, #136]	; (838 <_GLOBAL__sub_I_stringChar+0x98>)
     7b0:	47b0      	blx	r6
     7b2:	4f22      	ldr	r7, [pc, #136]	; (83c <_GLOBAL__sub_I_stringChar+0x9c>)
     7b4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 85c <_GLOBAL__sub_I_stringChar+0xbc>
     7b8:	463a      	mov	r2, r7
     7ba:	4641      	mov	r1, r8
     7bc:	4628      	mov	r0, r5
     7be:	4d20      	ldr	r5, [pc, #128]	; (840 <_GLOBAL__sub_I_stringChar+0xa0>)
     7c0:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     7c2:	f104 0930 	add.w	r9, r4, #48	; 0x30
     7c6:	491f      	ldr	r1, [pc, #124]	; (844 <_GLOBAL__sub_I_stringChar+0xa4>)
     7c8:	4648      	mov	r0, r9
     7ca:	47b0      	blx	r6
     7cc:	463a      	mov	r2, r7
     7ce:	4641      	mov	r1, r8
     7d0:	4648      	mov	r0, r9
     7d2:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     7d4:	f104 0950 	add.w	r9, r4, #80	; 0x50
     7d8:	491b      	ldr	r1, [pc, #108]	; (848 <_GLOBAL__sub_I_stringChar+0xa8>)
     7da:	4648      	mov	r0, r9
     7dc:	47b0      	blx	r6
     7de:	463a      	mov	r2, r7
     7e0:	4641      	mov	r1, r8
     7e2:	4648      	mov	r0, r9
     7e4:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     7e6:	f104 0970 	add.w	r9, r4, #112	; 0x70
     7ea:	4918      	ldr	r1, [pc, #96]	; (84c <_GLOBAL__sub_I_stringChar+0xac>)
     7ec:	4648      	mov	r0, r9
     7ee:	47b0      	blx	r6
     7f0:	463a      	mov	r2, r7
     7f2:	4641      	mov	r1, r8
     7f4:	4648      	mov	r0, r9
     7f6:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     7f8:	f104 0990 	add.w	r9, r4, #144	; 0x90
     7fc:	4914      	ldr	r1, [pc, #80]	; (850 <_GLOBAL__sub_I_stringChar+0xb0>)
     7fe:	4648      	mov	r0, r9
     800:	47b0      	blx	r6
     802:	463a      	mov	r2, r7
     804:	4641      	mov	r1, r8
     806:	4648      	mov	r0, r9
     808:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     80a:	f104 09b0 	add.w	r9, r4, #176	; 0xb0
     80e:	4911      	ldr	r1, [pc, #68]	; (854 <_GLOBAL__sub_I_stringChar+0xb4>)
     810:	4648      	mov	r0, r9
     812:	47b0      	blx	r6
     814:	463a      	mov	r2, r7
     816:	4641      	mov	r1, r8
     818:	4648      	mov	r0, r9
     81a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     81c:	34d0      	adds	r4, #208	; 0xd0
     81e:	490e      	ldr	r1, [pc, #56]	; (858 <_GLOBAL__sub_I_stringChar+0xb8>)
     820:	4620      	mov	r0, r4
     822:	47b0      	blx	r6
     824:	463a      	mov	r2, r7
     826:	4641      	mov	r1, r8
     828:	4620      	mov	r0, r4
     82a:	47a8      	blx	r5
     82c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     830:	20001eb8 	.word	0x20001eb8
     834:	2000a368 	.word	0x2000a368
     838:	0000dcf9 	.word	0x0000dcf9
     83c:	20000000 	.word	0x20000000
     840:	0000eeed 	.word	0x0000eeed
     844:	2000a3fc 	.word	0x2000a3fc
     848:	2000a500 	.word	0x2000a500
     84c:	2000a41c 	.word	0x2000a41c
     850:	2000a4c0 	.word	0x2000a4c0
     854:	2000a4e0 	.word	0x2000a4e0
     858:	2000a3d8 	.word	0x2000a3d8
     85c:	0000dd31 	.word	0x0000dd31

00000860 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     860:	b580      	push	{r7, lr}
     862:	af00      	add	r7, sp, #0
	system_init();
     864:	4b03      	ldr	r3, [pc, #12]	; (874 <atmel_start_init+0x14>)
     866:	4798      	blx	r3
	usb_init();
     868:	4b03      	ldr	r3, [pc, #12]	; (878 <atmel_start_init+0x18>)
     86a:	4798      	blx	r3
	spi_nor_flash_init();
     86c:	4b03      	ldr	r3, [pc, #12]	; (87c <atmel_start_init+0x1c>)
     86e:	4798      	blx	r3
}
     870:	bf00      	nop
     872:	bd80      	pop	{r7, pc}
     874:	00001be9 	.word	0x00001be9
     878:	0000b0d5 	.word	0x0000b0d5
     87c:	0000b069 	.word	0x0000b069

00000880 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     880:	b480      	push	{r7}
     882:	b085      	sub	sp, #20
     884:	af00      	add	r7, sp, #0
     886:	60f8      	str	r0, [r7, #12]
     888:	460b      	mov	r3, r1
     88a:	607a      	str	r2, [r7, #4]
     88c:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     88e:	7afa      	ldrb	r2, [r7, #11]
     890:	68fb      	ldr	r3, [r7, #12]
     892:	3220      	adds	r2, #32
     894:	6879      	ldr	r1, [r7, #4]
     896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     89a:	bf00      	nop
     89c:	3714      	adds	r7, #20
     89e:	46bd      	mov	sp, r7
     8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8a4:	4770      	bx	lr

000008a6 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     8a6:	b480      	push	{r7}
     8a8:	b083      	sub	sp, #12
     8aa:	af00      	add	r7, sp, #0
     8ac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	691b      	ldr	r3, [r3, #16]
     8b2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     8b6:	687b      	ldr	r3, [r7, #4]
     8b8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8ba:	bf00      	nop
     8bc:	370c      	adds	r7, #12
     8be:	46bd      	mov	sp, r7
     8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8c4:	4770      	bx	lr

000008c6 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     8c6:	b480      	push	{r7}
     8c8:	b083      	sub	sp, #12
     8ca:	af00      	add	r7, sp, #0
     8cc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     8ce:	687b      	ldr	r3, [r7, #4]
     8d0:	691b      	ldr	r3, [r3, #16]
     8d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     8d6:	687b      	ldr	r3, [r7, #4]
     8d8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8da:	bf00      	nop
     8dc:	370c      	adds	r7, #12
     8de:	46bd      	mov	sp, r7
     8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8e4:	4770      	bx	lr

000008e6 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     8e6:	b480      	push	{r7}
     8e8:	b083      	sub	sp, #12
     8ea:	af00      	add	r7, sp, #0
     8ec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	691b      	ldr	r3, [r3, #16]
     8f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     8f6:	687b      	ldr	r3, [r7, #4]
     8f8:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8fa:	bf00      	nop
     8fc:	370c      	adds	r7, #12
     8fe:	46bd      	mov	sp, r7
     900:	f85d 7b04 	ldr.w	r7, [sp], #4
     904:	4770      	bx	lr

00000906 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     906:	b480      	push	{r7}
     908:	b083      	sub	sp, #12
     90a:	af00      	add	r7, sp, #0
     90c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     90e:	687b      	ldr	r3, [r7, #4]
     910:	691b      	ldr	r3, [r3, #16]
     912:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     916:	687b      	ldr	r3, [r7, #4]
     918:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     91a:	bf00      	nop
     91c:	370c      	adds	r7, #12
     91e:	46bd      	mov	sp, r7
     920:	f85d 7b04 	ldr.w	r7, [sp], #4
     924:	4770      	bx	lr

00000926 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     926:	b480      	push	{r7}
     928:	b083      	sub	sp, #12
     92a:	af00      	add	r7, sp, #0
     92c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     92e:	687b      	ldr	r3, [r7, #4]
     930:	695b      	ldr	r3, [r3, #20]
     932:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     936:	687b      	ldr	r3, [r7, #4]
     938:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     93a:	bf00      	nop
     93c:	370c      	adds	r7, #12
     93e:	46bd      	mov	sp, r7
     940:	f85d 7b04 	ldr.w	r7, [sp], #4
     944:	4770      	bx	lr

00000946 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     946:	b480      	push	{r7}
     948:	b083      	sub	sp, #12
     94a:	af00      	add	r7, sp, #0
     94c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     94e:	687b      	ldr	r3, [r7, #4]
     950:	695b      	ldr	r3, [r3, #20]
     952:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     956:	687b      	ldr	r3, [r7, #4]
     958:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     95a:	bf00      	nop
     95c:	370c      	adds	r7, #12
     95e:	46bd      	mov	sp, r7
     960:	f85d 7b04 	ldr.w	r7, [sp], #4
     964:	4770      	bx	lr

00000966 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     966:	b480      	push	{r7}
     968:	b083      	sub	sp, #12
     96a:	af00      	add	r7, sp, #0
     96c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     96e:	687b      	ldr	r3, [r7, #4]
     970:	695b      	ldr	r3, [r3, #20]
     972:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     976:	687b      	ldr	r3, [r7, #4]
     978:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     97a:	bf00      	nop
     97c:	370c      	adds	r7, #12
     97e:	46bd      	mov	sp, r7
     980:	f85d 7b04 	ldr.w	r7, [sp], #4
     984:	4770      	bx	lr

00000986 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     986:	b480      	push	{r7}
     988:	b083      	sub	sp, #12
     98a:	af00      	add	r7, sp, #0
     98c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     98e:	687b      	ldr	r3, [r7, #4]
     990:	695b      	ldr	r3, [r3, #20]
     992:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     996:	687b      	ldr	r3, [r7, #4]
     998:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     99a:	bf00      	nop
     99c:	370c      	adds	r7, #12
     99e:	46bd      	mov	sp, r7
     9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9a4:	4770      	bx	lr

000009a6 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     9a6:	b480      	push	{r7}
     9a8:	b083      	sub	sp, #12
     9aa:	af00      	add	r7, sp, #0
     9ac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     9ae:	687b      	ldr	r3, [r7, #4]
     9b0:	695b      	ldr	r3, [r3, #20]
     9b2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ba:	bf00      	nop
     9bc:	370c      	adds	r7, #12
     9be:	46bd      	mov	sp, r7
     9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9c4:	4770      	bx	lr

000009c6 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     9c6:	b480      	push	{r7}
     9c8:	b083      	sub	sp, #12
     9ca:	af00      	add	r7, sp, #0
     9cc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	699b      	ldr	r3, [r3, #24]
     9d2:	f043 0201 	orr.w	r2, r3, #1
     9d6:	687b      	ldr	r3, [r7, #4]
     9d8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9da:	bf00      	nop
     9dc:	370c      	adds	r7, #12
     9de:	46bd      	mov	sp, r7
     9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9e4:	4770      	bx	lr

000009e6 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     9e6:	b480      	push	{r7}
     9e8:	b083      	sub	sp, #12
     9ea:	af00      	add	r7, sp, #0
     9ec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	699b      	ldr	r3, [r3, #24]
     9f2:	f043 0202 	orr.w	r2, r3, #2
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9fa:	bf00      	nop
     9fc:	370c      	adds	r7, #12
     9fe:	46bd      	mov	sp, r7
     a00:	f85d 7b04 	ldr.w	r7, [sp], #4
     a04:	4770      	bx	lr

00000a06 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     a06:	b480      	push	{r7}
     a08:	b083      	sub	sp, #12
     a0a:	af00      	add	r7, sp, #0
     a0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     a0e:	687b      	ldr	r3, [r7, #4]
     a10:	699b      	ldr	r3, [r3, #24]
     a12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a1a:	bf00      	nop
     a1c:	370c      	adds	r7, #12
     a1e:	46bd      	mov	sp, r7
     a20:	f85d 7b04 	ldr.w	r7, [sp], #4
     a24:	4770      	bx	lr

00000a26 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     a26:	b480      	push	{r7}
     a28:	b083      	sub	sp, #12
     a2a:	af00      	add	r7, sp, #0
     a2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	699b      	ldr	r3, [r3, #24]
     a32:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a3a:	bf00      	nop
     a3c:	370c      	adds	r7, #12
     a3e:	46bd      	mov	sp, r7
     a40:	f85d 7b04 	ldr.w	r7, [sp], #4
     a44:	4770      	bx	lr

00000a46 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     a46:	b480      	push	{r7}
     a48:	b083      	sub	sp, #12
     a4a:	af00      	add	r7, sp, #0
     a4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	699b      	ldr	r3, [r3, #24]
     a52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a5a:	bf00      	nop
     a5c:	370c      	adds	r7, #12
     a5e:	46bd      	mov	sp, r7
     a60:	f85d 7b04 	ldr.w	r7, [sp], #4
     a64:	4770      	bx	lr

00000a66 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     a66:	b480      	push	{r7}
     a68:	b083      	sub	sp, #12
     a6a:	af00      	add	r7, sp, #0
     a6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	699b      	ldr	r3, [r3, #24]
     a72:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     a76:	687b      	ldr	r3, [r7, #4]
     a78:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a7a:	bf00      	nop
     a7c:	370c      	adds	r7, #12
     a7e:	46bd      	mov	sp, r7
     a80:	f85d 7b04 	ldr.w	r7, [sp], #4
     a84:	4770      	bx	lr

00000a86 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     a86:	b480      	push	{r7}
     a88:	b083      	sub	sp, #12
     a8a:	af00      	add	r7, sp, #0
     a8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	69db      	ldr	r3, [r3, #28]
     a92:	f043 0220 	orr.w	r2, r3, #32
     a96:	687b      	ldr	r3, [r7, #4]
     a98:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a9a:	bf00      	nop
     a9c:	370c      	adds	r7, #12
     a9e:	46bd      	mov	sp, r7
     aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
     aa4:	4770      	bx	lr

00000aa6 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     aa6:	b480      	push	{r7}
     aa8:	b083      	sub	sp, #12
     aaa:	af00      	add	r7, sp, #0
     aac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	69db      	ldr	r3, [r3, #28]
     ab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aba:	bf00      	nop
     abc:	370c      	adds	r7, #12
     abe:	46bd      	mov	sp, r7
     ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ac4:	4770      	bx	lr

00000ac6 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     ac6:	b480      	push	{r7}
     ac8:	b083      	sub	sp, #12
     aca:	af00      	add	r7, sp, #0
     acc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     ace:	687b      	ldr	r3, [r7, #4]
     ad0:	69db      	ldr	r3, [r3, #28]
     ad2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ada:	bf00      	nop
     adc:	370c      	adds	r7, #12
     ade:	46bd      	mov	sp, r7
     ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ae4:	4770      	bx	lr

00000ae6 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     ae6:	b480      	push	{r7}
     ae8:	b083      	sub	sp, #12
     aea:	af00      	add	r7, sp, #0
     aec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     aee:	687b      	ldr	r3, [r7, #4]
     af0:	6a1b      	ldr	r3, [r3, #32]
     af2:	f043 0201 	orr.w	r2, r3, #1
     af6:	687b      	ldr	r3, [r7, #4]
     af8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     afa:	bf00      	nop
     afc:	370c      	adds	r7, #12
     afe:	46bd      	mov	sp, r7
     b00:	f85d 7b04 	ldr.w	r7, [sp], #4
     b04:	4770      	bx	lr

00000b06 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     b06:	b480      	push	{r7}
     b08:	b083      	sub	sp, #12
     b0a:	af00      	add	r7, sp, #0
     b0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	6a1b      	ldr	r3, [r3, #32]
     b12:	f043 0202 	orr.w	r2, r3, #2
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b1a:	bf00      	nop
     b1c:	370c      	adds	r7, #12
     b1e:	46bd      	mov	sp, r7
     b20:	f85d 7b04 	ldr.w	r7, [sp], #4
     b24:	4770      	bx	lr

00000b26 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     b26:	b480      	push	{r7}
     b28:	b083      	sub	sp, #12
     b2a:	af00      	add	r7, sp, #0
     b2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b2e:	687b      	ldr	r3, [r7, #4]
     b30:	6a1b      	ldr	r3, [r3, #32]
     b32:	f043 0204 	orr.w	r2, r3, #4
     b36:	687b      	ldr	r3, [r7, #4]
     b38:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b3a:	bf00      	nop
     b3c:	370c      	adds	r7, #12
     b3e:	46bd      	mov	sp, r7
     b40:	f85d 7b04 	ldr.w	r7, [sp], #4
     b44:	4770      	bx	lr

00000b46 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     b46:	b480      	push	{r7}
     b48:	b083      	sub	sp, #12
     b4a:	af00      	add	r7, sp, #0
     b4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	6a1b      	ldr	r3, [r3, #32]
     b52:	f043 0208 	orr.w	r2, r3, #8
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b5a:	bf00      	nop
     b5c:	370c      	adds	r7, #12
     b5e:	46bd      	mov	sp, r7
     b60:	f85d 7b04 	ldr.w	r7, [sp], #4
     b64:	4770      	bx	lr

00000b66 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     b66:	b480      	push	{r7}
     b68:	b083      	sub	sp, #12
     b6a:	af00      	add	r7, sp, #0
     b6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     b6e:	687b      	ldr	r3, [r7, #4]
     b70:	6a1b      	ldr	r3, [r3, #32]
     b72:	f043 0220 	orr.w	r2, r3, #32
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b7a:	bf00      	nop
     b7c:	370c      	adds	r7, #12
     b7e:	46bd      	mov	sp, r7
     b80:	f85d 7b04 	ldr.w	r7, [sp], #4
     b84:	4770      	bx	lr

00000b86 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     b86:	b480      	push	{r7}
     b88:	b083      	sub	sp, #12
     b8a:	af00      	add	r7, sp, #0
     b8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     b8e:	687b      	ldr	r3, [r7, #4]
     b90:	6a1b      	ldr	r3, [r3, #32]
     b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b9a:	bf00      	nop
     b9c:	370c      	adds	r7, #12
     b9e:	46bd      	mov	sp, r7
     ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ba4:	4770      	bx	lr

00000ba6 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     ba6:	b480      	push	{r7}
     ba8:	b085      	sub	sp, #20
     baa:	af00      	add	r7, sp, #0
     bac:	60f8      	str	r0, [r7, #12]
     bae:	460b      	mov	r3, r1
     bb0:	607a      	str	r2, [r7, #4]
     bb2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bb4:	7afb      	ldrb	r3, [r7, #11]
     bb6:	68fa      	ldr	r2, [r7, #12]
     bb8:	01db      	lsls	r3, r3, #7
     bba:	4413      	add	r3, r2
     bbc:	3308      	adds	r3, #8
     bbe:	687a      	ldr	r2, [r7, #4]
     bc0:	601a      	str	r2, [r3, #0]
}
     bc2:	bf00      	nop
     bc4:	3714      	adds	r7, #20
     bc6:	46bd      	mov	sp, r7
     bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bcc:	4770      	bx	lr

00000bce <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     bce:	b480      	push	{r7}
     bd0:	b085      	sub	sp, #20
     bd2:	af00      	add	r7, sp, #0
     bd4:	60f8      	str	r0, [r7, #12]
     bd6:	460b      	mov	r3, r1
     bd8:	607a      	str	r2, [r7, #4]
     bda:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     bdc:	7afb      	ldrb	r3, [r7, #11]
     bde:	68fa      	ldr	r2, [r7, #12]
     be0:	01db      	lsls	r3, r3, #7
     be2:	4413      	add	r3, r2
     be4:	3304      	adds	r3, #4
     be6:	687a      	ldr	r2, [r7, #4]
     be8:	601a      	str	r2, [r3, #0]
}
     bea:	bf00      	nop
     bec:	3714      	adds	r7, #20
     bee:	46bd      	mov	sp, r7
     bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bf4:	4770      	bx	lr

00000bf6 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     bf6:	b480      	push	{r7}
     bf8:	b085      	sub	sp, #20
     bfa:	af00      	add	r7, sp, #0
     bfc:	60f8      	str	r0, [r7, #12]
     bfe:	460b      	mov	r3, r1
     c00:	607a      	str	r2, [r7, #4]
     c02:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c04:	7afb      	ldrb	r3, [r7, #11]
     c06:	68fa      	ldr	r2, [r7, #12]
     c08:	01db      	lsls	r3, r3, #7
     c0a:	4413      	add	r3, r2
     c0c:	3318      	adds	r3, #24
     c0e:	687a      	ldr	r2, [r7, #4]
     c10:	601a      	str	r2, [r3, #0]
}
     c12:	bf00      	nop
     c14:	3714      	adds	r7, #20
     c16:	46bd      	mov	sp, r7
     c18:	f85d 7b04 	ldr.w	r7, [sp], #4
     c1c:	4770      	bx	lr

00000c1e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     c1e:	b480      	push	{r7}
     c20:	b085      	sub	sp, #20
     c22:	af00      	add	r7, sp, #0
     c24:	60f8      	str	r0, [r7, #12]
     c26:	460b      	mov	r3, r1
     c28:	607a      	str	r2, [r7, #4]
     c2a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c2c:	7afb      	ldrb	r3, [r7, #11]
     c2e:	68fa      	ldr	r2, [r7, #12]
     c30:	01db      	lsls	r3, r3, #7
     c32:	4413      	add	r3, r2
     c34:	3314      	adds	r3, #20
     c36:	687a      	ldr	r2, [r7, #4]
     c38:	601a      	str	r2, [r3, #0]
}
     c3a:	bf00      	nop
     c3c:	3714      	adds	r7, #20
     c3e:	46bd      	mov	sp, r7
     c40:	f85d 7b04 	ldr.w	r7, [sp], #4
     c44:	4770      	bx	lr

00000c46 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     c46:	b480      	push	{r7}
     c48:	b085      	sub	sp, #20
     c4a:	af00      	add	r7, sp, #0
     c4c:	6078      	str	r0, [r7, #4]
     c4e:	4608      	mov	r0, r1
     c50:	4611      	mov	r1, r2
     c52:	461a      	mov	r2, r3
     c54:	4603      	mov	r3, r0
     c56:	70fb      	strb	r3, [r7, #3]
     c58:	460b      	mov	r3, r1
     c5a:	70bb      	strb	r3, [r7, #2]
     c5c:	4613      	mov	r3, r2
     c5e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c60:	78fa      	ldrb	r2, [r7, #3]
     c62:	78bb      	ldrb	r3, [r7, #2]
     c64:	6879      	ldr	r1, [r7, #4]
     c66:	01d2      	lsls	r2, r2, #7
     c68:	440a      	add	r2, r1
     c6a:	4413      	add	r3, r2
     c6c:	3330      	adds	r3, #48	; 0x30
     c6e:	781b      	ldrb	r3, [r3, #0]
     c70:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c72:	7bfb      	ldrb	r3, [r7, #15]
     c74:	f023 030f 	bic.w	r3, r3, #15
     c78:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     c7a:	787b      	ldrb	r3, [r7, #1]
     c7c:	f003 030f 	and.w	r3, r3, #15
     c80:	b2da      	uxtb	r2, r3
     c82:	7bfb      	ldrb	r3, [r7, #15]
     c84:	4313      	orrs	r3, r2
     c86:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c88:	78fa      	ldrb	r2, [r7, #3]
     c8a:	78bb      	ldrb	r3, [r7, #2]
     c8c:	6879      	ldr	r1, [r7, #4]
     c8e:	01d2      	lsls	r2, r2, #7
     c90:	440a      	add	r2, r1
     c92:	4413      	add	r3, r2
     c94:	3330      	adds	r3, #48	; 0x30
     c96:	7bfa      	ldrb	r2, [r7, #15]
     c98:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c9a:	bf00      	nop
     c9c:	3714      	adds	r7, #20
     c9e:	46bd      	mov	sp, r7
     ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ca4:	4770      	bx	lr

00000ca6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     ca6:	b480      	push	{r7}
     ca8:	b085      	sub	sp, #20
     caa:	af00      	add	r7, sp, #0
     cac:	6078      	str	r0, [r7, #4]
     cae:	4608      	mov	r0, r1
     cb0:	4611      	mov	r1, r2
     cb2:	461a      	mov	r2, r3
     cb4:	4603      	mov	r3, r0
     cb6:	70fb      	strb	r3, [r7, #3]
     cb8:	460b      	mov	r3, r1
     cba:	70bb      	strb	r3, [r7, #2]
     cbc:	4613      	mov	r3, r2
     cbe:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cc0:	78fa      	ldrb	r2, [r7, #3]
     cc2:	78bb      	ldrb	r3, [r7, #2]
     cc4:	6879      	ldr	r1, [r7, #4]
     cc6:	01d2      	lsls	r2, r2, #7
     cc8:	440a      	add	r2, r1
     cca:	4413      	add	r3, r2
     ccc:	3330      	adds	r3, #48	; 0x30
     cce:	781b      	ldrb	r3, [r3, #0]
     cd0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     cd2:	7bfb      	ldrb	r3, [r7, #15]
     cd4:	f003 030f 	and.w	r3, r3, #15
     cd8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     cda:	787b      	ldrb	r3, [r7, #1]
     cdc:	011b      	lsls	r3, r3, #4
     cde:	b2da      	uxtb	r2, r3
     ce0:	7bfb      	ldrb	r3, [r7, #15]
     ce2:	4313      	orrs	r3, r2
     ce4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ce6:	78fa      	ldrb	r2, [r7, #3]
     ce8:	78bb      	ldrb	r3, [r7, #2]
     cea:	6879      	ldr	r1, [r7, #4]
     cec:	01d2      	lsls	r2, r2, #7
     cee:	440a      	add	r2, r1
     cf0:	4413      	add	r3, r2
     cf2:	3330      	adds	r3, #48	; 0x30
     cf4:	7bfa      	ldrb	r2, [r7, #15]
     cf6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     cf8:	bf00      	nop
     cfa:	3714      	adds	r7, #20
     cfc:	46bd      	mov	sp, r7
     cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
     d02:	4770      	bx	lr

00000d04 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     d04:	b480      	push	{r7}
     d06:	b085      	sub	sp, #20
     d08:	af00      	add	r7, sp, #0
     d0a:	6078      	str	r0, [r7, #4]
     d0c:	4608      	mov	r0, r1
     d0e:	4611      	mov	r1, r2
     d10:	461a      	mov	r2, r3
     d12:	4603      	mov	r3, r0
     d14:	70fb      	strb	r3, [r7, #3]
     d16:	460b      	mov	r3, r1
     d18:	70bb      	strb	r3, [r7, #2]
     d1a:	4613      	mov	r3, r2
     d1c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d1e:	78fa      	ldrb	r2, [r7, #3]
     d20:	78bb      	ldrb	r3, [r7, #2]
     d22:	6879      	ldr	r1, [r7, #4]
     d24:	01d2      	lsls	r2, r2, #7
     d26:	440a      	add	r2, r1
     d28:	4413      	add	r3, r2
     d2a:	3340      	adds	r3, #64	; 0x40
     d2c:	781b      	ldrb	r3, [r3, #0]
     d2e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d30:	7bfb      	ldrb	r3, [r7, #15]
     d32:	f023 0301 	bic.w	r3, r3, #1
     d36:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d38:	787a      	ldrb	r2, [r7, #1]
     d3a:	7bfb      	ldrb	r3, [r7, #15]
     d3c:	4313      	orrs	r3, r2
     d3e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d40:	78fa      	ldrb	r2, [r7, #3]
     d42:	78bb      	ldrb	r3, [r7, #2]
     d44:	6879      	ldr	r1, [r7, #4]
     d46:	01d2      	lsls	r2, r2, #7
     d48:	440a      	add	r2, r1
     d4a:	4413      	add	r3, r2
     d4c:	3340      	adds	r3, #64	; 0x40
     d4e:	7bfa      	ldrb	r2, [r7, #15]
     d50:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     d52:	bf00      	nop
     d54:	3714      	adds	r7, #20
     d56:	46bd      	mov	sp, r7
     d58:	f85d 7b04 	ldr.w	r7, [sp], #4
     d5c:	4770      	bx	lr

00000d5e <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     d5e:	b490      	push	{r4, r7}
     d60:	b082      	sub	sp, #8
     d62:	af00      	add	r7, sp, #0
     d64:	6078      	str	r0, [r7, #4]
     d66:	460b      	mov	r3, r1
     d68:	70fb      	strb	r3, [r7, #3]
     d6a:	4613      	mov	r3, r2
     d6c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d6e:	78fa      	ldrb	r2, [r7, #3]
     d70:	78bb      	ldrb	r3, [r7, #2]
     d72:	78f8      	ldrb	r0, [r7, #3]
     d74:	78b9      	ldrb	r1, [r7, #2]
     d76:	687c      	ldr	r4, [r7, #4]
     d78:	01c0      	lsls	r0, r0, #7
     d7a:	4420      	add	r0, r4
     d7c:	4401      	add	r1, r0
     d7e:	3140      	adds	r1, #64	; 0x40
     d80:	7809      	ldrb	r1, [r1, #0]
     d82:	b2c9      	uxtb	r1, r1
     d84:	f041 0104 	orr.w	r1, r1, #4
     d88:	b2c8      	uxtb	r0, r1
     d8a:	6879      	ldr	r1, [r7, #4]
     d8c:	01d2      	lsls	r2, r2, #7
     d8e:	440a      	add	r2, r1
     d90:	4413      	add	r3, r2
     d92:	3340      	adds	r3, #64	; 0x40
     d94:	4602      	mov	r2, r0
     d96:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     d98:	bf00      	nop
     d9a:	3708      	adds	r7, #8
     d9c:	46bd      	mov	sp, r7
     d9e:	bc90      	pop	{r4, r7}
     da0:	4770      	bx	lr

00000da2 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     da2:	b490      	push	{r4, r7}
     da4:	b082      	sub	sp, #8
     da6:	af00      	add	r7, sp, #0
     da8:	6078      	str	r0, [r7, #4]
     daa:	460b      	mov	r3, r1
     dac:	70fb      	strb	r3, [r7, #3]
     dae:	4613      	mov	r3, r2
     db0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     db2:	78fa      	ldrb	r2, [r7, #3]
     db4:	78bb      	ldrb	r3, [r7, #2]
     db6:	78f8      	ldrb	r0, [r7, #3]
     db8:	78b9      	ldrb	r1, [r7, #2]
     dba:	687c      	ldr	r4, [r7, #4]
     dbc:	01c0      	lsls	r0, r0, #7
     dbe:	4420      	add	r0, r4
     dc0:	4401      	add	r1, r0
     dc2:	3140      	adds	r1, #64	; 0x40
     dc4:	7809      	ldrb	r1, [r1, #0]
     dc6:	b2c9      	uxtb	r1, r1
     dc8:	f021 0104 	bic.w	r1, r1, #4
     dcc:	b2c8      	uxtb	r0, r1
     dce:	6879      	ldr	r1, [r7, #4]
     dd0:	01d2      	lsls	r2, r2, #7
     dd2:	440a      	add	r2, r1
     dd4:	4413      	add	r3, r2
     dd6:	3340      	adds	r3, #64	; 0x40
     dd8:	4602      	mov	r2, r0
     dda:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ddc:	bf00      	nop
     dde:	3708      	adds	r7, #8
     de0:	46bd      	mov	sp, r7
     de2:	bc90      	pop	{r4, r7}
     de4:	4770      	bx	lr

00000de6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     de6:	b480      	push	{r7}
     de8:	b085      	sub	sp, #20
     dea:	af00      	add	r7, sp, #0
     dec:	60f8      	str	r0, [r7, #12]
     dee:	460b      	mov	r3, r1
     df0:	607a      	str	r2, [r7, #4]
     df2:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     df4:	7afb      	ldrb	r3, [r7, #11]
     df6:	68fa      	ldr	r2, [r7, #12]
     df8:	01db      	lsls	r3, r3, #7
     dfa:	4413      	add	r3, r2
     dfc:	3328      	adds	r3, #40	; 0x28
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e02:	bf00      	nop
     e04:	3714      	adds	r7, #20
     e06:	46bd      	mov	sp, r7
     e08:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0c:	4770      	bx	lr
	...

00000e10 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     e10:	b580      	push	{r7, lr}
     e12:	b082      	sub	sp, #8
     e14:	af00      	add	r7, sp, #0
     e16:	4603      	mov	r3, r0
     e18:	6039      	str	r1, [r7, #0]
     e1a:	71fb      	strb	r3, [r7, #7]
     e1c:	4613      	mov	r3, r2
     e1e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     e20:	79bb      	ldrb	r3, [r7, #6]
     e22:	2b01      	cmp	r3, #1
     e24:	d01c      	beq.n	e60 <_gpio_set_direction+0x50>
     e26:	2b02      	cmp	r3, #2
     e28:	d037      	beq.n	e9a <_gpio_set_direction+0x8a>
     e2a:	2b00      	cmp	r3, #0
     e2c:	d14e      	bne.n	ecc <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     e2e:	79fb      	ldrb	r3, [r7, #7]
     e30:	683a      	ldr	r2, [r7, #0]
     e32:	4619      	mov	r1, r3
     e34:	482a      	ldr	r0, [pc, #168]	; (ee0 <_gpio_set_direction+0xd0>)
     e36:	4b2b      	ldr	r3, [pc, #172]	; (ee4 <_gpio_set_direction+0xd4>)
     e38:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     e3a:	683b      	ldr	r3, [r7, #0]
     e3c:	b29b      	uxth	r3, r3
     e3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     e42:	79fb      	ldrb	r3, [r7, #7]
     e44:	4619      	mov	r1, r3
     e46:	4826      	ldr	r0, [pc, #152]	; (ee0 <_gpio_set_direction+0xd0>)
     e48:	4b27      	ldr	r3, [pc, #156]	; (ee8 <_gpio_set_direction+0xd8>)
     e4a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     e4c:	683b      	ldr	r3, [r7, #0]
     e4e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     e50:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     e54:	79fb      	ldrb	r3, [r7, #7]
     e56:	4619      	mov	r1, r3
     e58:	4821      	ldr	r0, [pc, #132]	; (ee0 <_gpio_set_direction+0xd0>)
     e5a:	4b23      	ldr	r3, [pc, #140]	; (ee8 <_gpio_set_direction+0xd8>)
     e5c:	4798      	blx	r3
		break;
     e5e:	e03a      	b.n	ed6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     e60:	79fb      	ldrb	r3, [r7, #7]
     e62:	683a      	ldr	r2, [r7, #0]
     e64:	4619      	mov	r1, r3
     e66:	481e      	ldr	r0, [pc, #120]	; (ee0 <_gpio_set_direction+0xd0>)
     e68:	4b1e      	ldr	r3, [pc, #120]	; (ee4 <_gpio_set_direction+0xd4>)
     e6a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     e6c:	683b      	ldr	r3, [r7, #0]
     e6e:	b29b      	uxth	r3, r3
     e70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     e78:	79f9      	ldrb	r1, [r7, #7]
     e7a:	461a      	mov	r2, r3
     e7c:	4818      	ldr	r0, [pc, #96]	; (ee0 <_gpio_set_direction+0xd0>)
     e7e:	4b1a      	ldr	r3, [pc, #104]	; (ee8 <_gpio_set_direction+0xd8>)
     e80:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     e82:	683b      	ldr	r3, [r7, #0]
     e84:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     e86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     e8e:	79f9      	ldrb	r1, [r7, #7]
     e90:	461a      	mov	r2, r3
     e92:	4813      	ldr	r0, [pc, #76]	; (ee0 <_gpio_set_direction+0xd0>)
     e94:	4b14      	ldr	r3, [pc, #80]	; (ee8 <_gpio_set_direction+0xd8>)
     e96:	4798      	blx	r3
		break;
     e98:	e01d      	b.n	ed6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     e9a:	79fb      	ldrb	r3, [r7, #7]
     e9c:	683a      	ldr	r2, [r7, #0]
     e9e:	4619      	mov	r1, r3
     ea0:	480f      	ldr	r0, [pc, #60]	; (ee0 <_gpio_set_direction+0xd0>)
     ea2:	4b12      	ldr	r3, [pc, #72]	; (eec <_gpio_set_direction+0xdc>)
     ea4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     ea6:	683b      	ldr	r3, [r7, #0]
     ea8:	b29b      	uxth	r3, r3
     eaa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     eae:	79fb      	ldrb	r3, [r7, #7]
     eb0:	4619      	mov	r1, r3
     eb2:	480b      	ldr	r0, [pc, #44]	; (ee0 <_gpio_set_direction+0xd0>)
     eb4:	4b0c      	ldr	r3, [pc, #48]	; (ee8 <_gpio_set_direction+0xd8>)
     eb6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     eb8:	683b      	ldr	r3, [r7, #0]
     eba:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     ebc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     ec0:	79fb      	ldrb	r3, [r7, #7]
     ec2:	4619      	mov	r1, r3
     ec4:	4806      	ldr	r0, [pc, #24]	; (ee0 <_gpio_set_direction+0xd0>)
     ec6:	4b08      	ldr	r3, [pc, #32]	; (ee8 <_gpio_set_direction+0xd8>)
     ec8:	4798      	blx	r3
		break;
     eca:	e004      	b.n	ed6 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     ecc:	2246      	movs	r2, #70	; 0x46
     ece:	4908      	ldr	r1, [pc, #32]	; (ef0 <_gpio_set_direction+0xe0>)
     ed0:	2000      	movs	r0, #0
     ed2:	4b08      	ldr	r3, [pc, #32]	; (ef4 <_gpio_set_direction+0xe4>)
     ed4:	4798      	blx	r3
	}
}
     ed6:	bf00      	nop
     ed8:	3708      	adds	r7, #8
     eda:	46bd      	mov	sp, r7
     edc:	bd80      	pop	{r7, pc}
     ede:	bf00      	nop
     ee0:	41008000 	.word	0x41008000
     ee4:	00000bcf 	.word	0x00000bcf
     ee8:	00000de7 	.word	0x00000de7
     eec:	00000ba7 	.word	0x00000ba7
     ef0:	0000f3b4 	.word	0x0000f3b4
     ef4:	00003719 	.word	0x00003719

00000ef8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     ef8:	b580      	push	{r7, lr}
     efa:	b082      	sub	sp, #8
     efc:	af00      	add	r7, sp, #0
     efe:	4603      	mov	r3, r0
     f00:	6039      	str	r1, [r7, #0]
     f02:	71fb      	strb	r3, [r7, #7]
     f04:	4613      	mov	r3, r2
     f06:	71bb      	strb	r3, [r7, #6]
	if (level) {
     f08:	79bb      	ldrb	r3, [r7, #6]
     f0a:	2b00      	cmp	r3, #0
     f0c:	d006      	beq.n	f1c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     f0e:	79fb      	ldrb	r3, [r7, #7]
     f10:	683a      	ldr	r2, [r7, #0]
     f12:	4619      	mov	r1, r3
     f14:	4806      	ldr	r0, [pc, #24]	; (f30 <_gpio_set_level+0x38>)
     f16:	4b07      	ldr	r3, [pc, #28]	; (f34 <_gpio_set_level+0x3c>)
     f18:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     f1a:	e005      	b.n	f28 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     f1c:	79fb      	ldrb	r3, [r7, #7]
     f1e:	683a      	ldr	r2, [r7, #0]
     f20:	4619      	mov	r1, r3
     f22:	4803      	ldr	r0, [pc, #12]	; (f30 <_gpio_set_level+0x38>)
     f24:	4b04      	ldr	r3, [pc, #16]	; (f38 <_gpio_set_level+0x40>)
     f26:	4798      	blx	r3
}
     f28:	bf00      	nop
     f2a:	3708      	adds	r7, #8
     f2c:	46bd      	mov	sp, r7
     f2e:	bd80      	pop	{r7, pc}
     f30:	41008000 	.word	0x41008000
     f34:	00000bf7 	.word	0x00000bf7
     f38:	00000c1f 	.word	0x00000c1f

00000f3c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     f3c:	b580      	push	{r7, lr}
     f3e:	b082      	sub	sp, #8
     f40:	af00      	add	r7, sp, #0
     f42:	4603      	mov	r3, r0
     f44:	71fb      	strb	r3, [r7, #7]
     f46:	460b      	mov	r3, r1
     f48:	71bb      	strb	r3, [r7, #6]
     f4a:	4613      	mov	r3, r2
     f4c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     f4e:	797b      	ldrb	r3, [r7, #5]
     f50:	2b01      	cmp	r3, #1
     f52:	d00a      	beq.n	f6a <_gpio_set_pin_pull_mode+0x2e>
     f54:	2b02      	cmp	r3, #2
     f56:	d01f      	beq.n	f98 <_gpio_set_pin_pull_mode+0x5c>
     f58:	2b00      	cmp	r3, #0
     f5a:	d134      	bne.n	fc6 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     f5c:	79ba      	ldrb	r2, [r7, #6]
     f5e:	79fb      	ldrb	r3, [r7, #7]
     f60:	4619      	mov	r1, r3
     f62:	481e      	ldr	r0, [pc, #120]	; (fdc <_gpio_set_pin_pull_mode+0xa0>)
     f64:	4b1e      	ldr	r3, [pc, #120]	; (fe0 <_gpio_set_pin_pull_mode+0xa4>)
     f66:	4798      	blx	r3
		break;
     f68:	e033      	b.n	fd2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     f6a:	79bb      	ldrb	r3, [r7, #6]
     f6c:	2201      	movs	r2, #1
     f6e:	409a      	lsls	r2, r3
     f70:	79fb      	ldrb	r3, [r7, #7]
     f72:	4619      	mov	r1, r3
     f74:	4819      	ldr	r0, [pc, #100]	; (fdc <_gpio_set_pin_pull_mode+0xa0>)
     f76:	4b1b      	ldr	r3, [pc, #108]	; (fe4 <_gpio_set_pin_pull_mode+0xa8>)
     f78:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     f7a:	79ba      	ldrb	r2, [r7, #6]
     f7c:	79fb      	ldrb	r3, [r7, #7]
     f7e:	4619      	mov	r1, r3
     f80:	4816      	ldr	r0, [pc, #88]	; (fdc <_gpio_set_pin_pull_mode+0xa0>)
     f82:	4b19      	ldr	r3, [pc, #100]	; (fe8 <_gpio_set_pin_pull_mode+0xac>)
     f84:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     f86:	79bb      	ldrb	r3, [r7, #6]
     f88:	2201      	movs	r2, #1
     f8a:	409a      	lsls	r2, r3
     f8c:	79fb      	ldrb	r3, [r7, #7]
     f8e:	4619      	mov	r1, r3
     f90:	4812      	ldr	r0, [pc, #72]	; (fdc <_gpio_set_pin_pull_mode+0xa0>)
     f92:	4b16      	ldr	r3, [pc, #88]	; (fec <_gpio_set_pin_pull_mode+0xb0>)
     f94:	4798      	blx	r3
		break;
     f96:	e01c      	b.n	fd2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     f98:	79bb      	ldrb	r3, [r7, #6]
     f9a:	2201      	movs	r2, #1
     f9c:	409a      	lsls	r2, r3
     f9e:	79fb      	ldrb	r3, [r7, #7]
     fa0:	4619      	mov	r1, r3
     fa2:	480e      	ldr	r0, [pc, #56]	; (fdc <_gpio_set_pin_pull_mode+0xa0>)
     fa4:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <_gpio_set_pin_pull_mode+0xa8>)
     fa6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     fa8:	79ba      	ldrb	r2, [r7, #6]
     faa:	79fb      	ldrb	r3, [r7, #7]
     fac:	4619      	mov	r1, r3
     fae:	480b      	ldr	r0, [pc, #44]	; (fdc <_gpio_set_pin_pull_mode+0xa0>)
     fb0:	4b0d      	ldr	r3, [pc, #52]	; (fe8 <_gpio_set_pin_pull_mode+0xac>)
     fb2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     fb4:	79bb      	ldrb	r3, [r7, #6]
     fb6:	2201      	movs	r2, #1
     fb8:	409a      	lsls	r2, r3
     fba:	79fb      	ldrb	r3, [r7, #7]
     fbc:	4619      	mov	r1, r3
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <_gpio_set_pin_pull_mode+0xa0>)
     fc0:	4b0b      	ldr	r3, [pc, #44]	; (ff0 <_gpio_set_pin_pull_mode+0xb4>)
     fc2:	4798      	blx	r3
		break;
     fc4:	e005      	b.n	fd2 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     fc6:	2289      	movs	r2, #137	; 0x89
     fc8:	490a      	ldr	r1, [pc, #40]	; (ff4 <_gpio_set_pin_pull_mode+0xb8>)
     fca:	2000      	movs	r0, #0
     fcc:	4b0a      	ldr	r3, [pc, #40]	; (ff8 <_gpio_set_pin_pull_mode+0xbc>)
     fce:	4798      	blx	r3
		break;
     fd0:	bf00      	nop
	}
}
     fd2:	bf00      	nop
     fd4:	3708      	adds	r7, #8
     fd6:	46bd      	mov	sp, r7
     fd8:	bd80      	pop	{r7, pc}
     fda:	bf00      	nop
     fdc:	41008000 	.word	0x41008000
     fe0:	00000da3 	.word	0x00000da3
     fe4:	00000bcf 	.word	0x00000bcf
     fe8:	00000d5f 	.word	0x00000d5f
     fec:	00000bf7 	.word	0x00000bf7
     ff0:	00000c1f 	.word	0x00000c1f
     ff4:	0000f3b4 	.word	0x0000f3b4
     ff8:	00003719 	.word	0x00003719

00000ffc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     ffc:	b590      	push	{r4, r7, lr}
     ffe:	b085      	sub	sp, #20
    1000:	af00      	add	r7, sp, #0
    1002:	6078      	str	r0, [r7, #4]
    1004:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1006:	687b      	ldr	r3, [r7, #4]
    1008:	095b      	lsrs	r3, r3, #5
    100a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	b2db      	uxtb	r3, r3
    1010:	f003 031f 	and.w	r3, r3, #31
    1014:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1016:	683b      	ldr	r3, [r7, #0]
    1018:	f1b3 3fff 	cmp.w	r3, #4294967295
    101c:	d106      	bne.n	102c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    101e:	7bba      	ldrb	r2, [r7, #14]
    1020:	7bf9      	ldrb	r1, [r7, #15]
    1022:	2300      	movs	r3, #0
    1024:	4812      	ldr	r0, [pc, #72]	; (1070 <_gpio_set_pin_function+0x74>)
    1026:	4c13      	ldr	r4, [pc, #76]	; (1074 <_gpio_set_pin_function+0x78>)
    1028:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    102a:	e01d      	b.n	1068 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    102c:	7bba      	ldrb	r2, [r7, #14]
    102e:	7bf9      	ldrb	r1, [r7, #15]
    1030:	2301      	movs	r3, #1
    1032:	480f      	ldr	r0, [pc, #60]	; (1070 <_gpio_set_pin_function+0x74>)
    1034:	4c0f      	ldr	r4, [pc, #60]	; (1074 <_gpio_set_pin_function+0x78>)
    1036:	47a0      	blx	r4
		if (pin & 1) {
    1038:	7bbb      	ldrb	r3, [r7, #14]
    103a:	f003 0301 	and.w	r3, r3, #1
    103e:	2b00      	cmp	r3, #0
    1040:	d009      	beq.n	1056 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1042:	7bbb      	ldrb	r3, [r7, #14]
    1044:	085b      	lsrs	r3, r3, #1
    1046:	b2da      	uxtb	r2, r3
    1048:	683b      	ldr	r3, [r7, #0]
    104a:	b2db      	uxtb	r3, r3
    104c:	7bf9      	ldrb	r1, [r7, #15]
    104e:	4808      	ldr	r0, [pc, #32]	; (1070 <_gpio_set_pin_function+0x74>)
    1050:	4c09      	ldr	r4, [pc, #36]	; (1078 <_gpio_set_pin_function+0x7c>)
    1052:	47a0      	blx	r4
}
    1054:	e008      	b.n	1068 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1056:	7bbb      	ldrb	r3, [r7, #14]
    1058:	085b      	lsrs	r3, r3, #1
    105a:	b2da      	uxtb	r2, r3
    105c:	683b      	ldr	r3, [r7, #0]
    105e:	b2db      	uxtb	r3, r3
    1060:	7bf9      	ldrb	r1, [r7, #15]
    1062:	4803      	ldr	r0, [pc, #12]	; (1070 <_gpio_set_pin_function+0x74>)
    1064:	4c05      	ldr	r4, [pc, #20]	; (107c <_gpio_set_pin_function+0x80>)
    1066:	47a0      	blx	r4
}
    1068:	bf00      	nop
    106a:	3714      	adds	r7, #20
    106c:	46bd      	mov	sp, r7
    106e:	bd90      	pop	{r4, r7, pc}
    1070:	41008000 	.word	0x41008000
    1074:	00000d05 	.word	0x00000d05
    1078:	00000ca7 	.word	0x00000ca7
    107c:	00000c47 	.word	0x00000c47

00001080 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1080:	b580      	push	{r7, lr}
    1082:	b082      	sub	sp, #8
    1084:	af00      	add	r7, sp, #0
    1086:	4603      	mov	r3, r0
    1088:	460a      	mov	r2, r1
    108a:	71fb      	strb	r3, [r7, #7]
    108c:	4613      	mov	r3, r2
    108e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1090:	79fb      	ldrb	r3, [r7, #7]
    1092:	095b      	lsrs	r3, r3, #5
    1094:	b2d8      	uxtb	r0, r3
    1096:	79fb      	ldrb	r3, [r7, #7]
    1098:	f003 031f 	and.w	r3, r3, #31
    109c:	b2db      	uxtb	r3, r3
    109e:	79ba      	ldrb	r2, [r7, #6]
    10a0:	4619      	mov	r1, r3
    10a2:	4b03      	ldr	r3, [pc, #12]	; (10b0 <gpio_set_pin_pull_mode+0x30>)
    10a4:	4798      	blx	r3
}
    10a6:	bf00      	nop
    10a8:	3708      	adds	r7, #8
    10aa:	46bd      	mov	sp, r7
    10ac:	bd80      	pop	{r7, pc}
    10ae:	bf00      	nop
    10b0:	00000f3d 	.word	0x00000f3d

000010b4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    10b4:	b580      	push	{r7, lr}
    10b6:	b082      	sub	sp, #8
    10b8:	af00      	add	r7, sp, #0
    10ba:	6078      	str	r0, [r7, #4]
    10bc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    10be:	6839      	ldr	r1, [r7, #0]
    10c0:	6878      	ldr	r0, [r7, #4]
    10c2:	4b03      	ldr	r3, [pc, #12]	; (10d0 <gpio_set_pin_function+0x1c>)
    10c4:	4798      	blx	r3
}
    10c6:	bf00      	nop
    10c8:	3708      	adds	r7, #8
    10ca:	46bd      	mov	sp, r7
    10cc:	bd80      	pop	{r7, pc}
    10ce:	bf00      	nop
    10d0:	00000ffd 	.word	0x00000ffd

000010d4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    10d4:	b580      	push	{r7, lr}
    10d6:	b082      	sub	sp, #8
    10d8:	af00      	add	r7, sp, #0
    10da:	4603      	mov	r3, r0
    10dc:	460a      	mov	r2, r1
    10de:	71fb      	strb	r3, [r7, #7]
    10e0:	4613      	mov	r3, r2
    10e2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    10e4:	79fb      	ldrb	r3, [r7, #7]
    10e6:	095b      	lsrs	r3, r3, #5
    10e8:	b2d8      	uxtb	r0, r3
    10ea:	79fb      	ldrb	r3, [r7, #7]
    10ec:	f003 031f 	and.w	r3, r3, #31
    10f0:	2201      	movs	r2, #1
    10f2:	fa02 f303 	lsl.w	r3, r2, r3
    10f6:	79ba      	ldrb	r2, [r7, #6]
    10f8:	4619      	mov	r1, r3
    10fa:	4b03      	ldr	r3, [pc, #12]	; (1108 <gpio_set_pin_direction+0x34>)
    10fc:	4798      	blx	r3
}
    10fe:	bf00      	nop
    1100:	3708      	adds	r7, #8
    1102:	46bd      	mov	sp, r7
    1104:	bd80      	pop	{r7, pc}
    1106:	bf00      	nop
    1108:	00000e11 	.word	0x00000e11

0000110c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    110c:	b580      	push	{r7, lr}
    110e:	b082      	sub	sp, #8
    1110:	af00      	add	r7, sp, #0
    1112:	4603      	mov	r3, r0
    1114:	460a      	mov	r2, r1
    1116:	71fb      	strb	r3, [r7, #7]
    1118:	4613      	mov	r3, r2
    111a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    111c:	79fb      	ldrb	r3, [r7, #7]
    111e:	095b      	lsrs	r3, r3, #5
    1120:	b2d8      	uxtb	r0, r3
    1122:	79fb      	ldrb	r3, [r7, #7]
    1124:	f003 031f 	and.w	r3, r3, #31
    1128:	2201      	movs	r2, #1
    112a:	fa02 f303 	lsl.w	r3, r2, r3
    112e:	79ba      	ldrb	r2, [r7, #6]
    1130:	4619      	mov	r1, r3
    1132:	4b03      	ldr	r3, [pc, #12]	; (1140 <gpio_set_pin_level+0x34>)
    1134:	4798      	blx	r3
}
    1136:	bf00      	nop
    1138:	3708      	adds	r7, #8
    113a:	46bd      	mov	sp, r7
    113c:	bd80      	pop	{r7, pc}
    113e:	bf00      	nop
    1140:	00000ef9 	.word	0x00000ef9

00001144 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1144:	b580      	push	{r7, lr}
    1146:	af00      	add	r7, sp, #0
	_init_chip();
    1148:	4b01      	ldr	r3, [pc, #4]	; (1150 <init_mcu+0xc>)
    114a:	4798      	blx	r3
}
    114c:	bf00      	nop
    114e:	bd80      	pop	{r7, pc}
    1150:	00004325 	.word	0x00004325

00001154 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1154:	b580      	push	{r7, lr}
    1156:	b082      	sub	sp, #8
    1158:	af00      	add	r7, sp, #0
    115a:	6078      	str	r0, [r7, #4]
    115c:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    115e:	687b      	ldr	r3, [r7, #4]
    1160:	2b00      	cmp	r3, #0
    1162:	d004      	beq.n	116e <wdt_init+0x1a>
    1164:	683b      	ldr	r3, [r7, #0]
    1166:	2b00      	cmp	r3, #0
    1168:	d001      	beq.n	116e <wdt_init+0x1a>
    116a:	2301      	movs	r3, #1
    116c:	e000      	b.n	1170 <wdt_init+0x1c>
    116e:	2300      	movs	r3, #0
    1170:	f003 0301 	and.w	r3, r3, #1
    1174:	b2db      	uxtb	r3, r3
    1176:	2248      	movs	r2, #72	; 0x48
    1178:	4907      	ldr	r1, [pc, #28]	; (1198 <wdt_init+0x44>)
    117a:	4618      	mov	r0, r3
    117c:	4b07      	ldr	r3, [pc, #28]	; (119c <wdt_init+0x48>)
    117e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1180:	687b      	ldr	r3, [r7, #4]
    1182:	683a      	ldr	r2, [r7, #0]
    1184:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	4618      	mov	r0, r3
    118a:	4b05      	ldr	r3, [pc, #20]	; (11a0 <wdt_init+0x4c>)
    118c:	4798      	blx	r3
    118e:	4603      	mov	r3, r0
}
    1190:	4618      	mov	r0, r3
    1192:	3708      	adds	r7, #8
    1194:	46bd      	mov	sp, r7
    1196:	bd80      	pop	{r7, pc}
    1198:	0000f3d0 	.word	0x0000f3d0
    119c:	00003719 	.word	0x00003719
    11a0:	0000ab0d 	.word	0x0000ab0d

000011a4 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    11a4:	b580      	push	{r7, lr}
    11a6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    11a8:	4804      	ldr	r0, [pc, #16]	; (11bc <CRC_CALC_init+0x18>)
    11aa:	4b05      	ldr	r3, [pc, #20]	; (11c0 <CRC_CALC_init+0x1c>)
    11ac:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    11ae:	4905      	ldr	r1, [pc, #20]	; (11c4 <CRC_CALC_init+0x20>)
    11b0:	4805      	ldr	r0, [pc, #20]	; (11c8 <CRC_CALC_init+0x24>)
    11b2:	4b06      	ldr	r3, [pc, #24]	; (11cc <CRC_CALC_init+0x28>)
    11b4:	4798      	blx	r3
}
    11b6:	bf00      	nop
    11b8:	bd80      	pop	{r7, pc}
    11ba:	bf00      	nop
    11bc:	40000800 	.word	0x40000800
    11c0:	000009e7 	.word	0x000009e7
    11c4:	41002000 	.word	0x41002000
    11c8:	2000a544 	.word	0x2000a544
    11cc:	00002199 	.word	0x00002199

000011d0 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    11d0:	b580      	push	{r7, lr}
    11d2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11d4:	2244      	movs	r2, #68	; 0x44
    11d6:	2104      	movs	r1, #4
    11d8:	483f      	ldr	r0, [pc, #252]	; (12d8 <EXTERNAL_IRQ_0_init+0x108>)
    11da:	4b40      	ldr	r3, [pc, #256]	; (12dc <EXTERNAL_IRQ_0_init+0x10c>)
    11dc:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    11de:	4840      	ldr	r0, [pc, #256]	; (12e0 <EXTERNAL_IRQ_0_init+0x110>)
    11e0:	4b40      	ldr	r3, [pc, #256]	; (12e4 <EXTERNAL_IRQ_0_init+0x114>)
    11e2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    11e4:	2101      	movs	r1, #1
    11e6:	2040      	movs	r0, #64	; 0x40
    11e8:	4b3f      	ldr	r3, [pc, #252]	; (12e8 <EXTERNAL_IRQ_0_init+0x118>)
    11ea:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    11ec:	2100      	movs	r1, #0
    11ee:	2040      	movs	r0, #64	; 0x40
    11f0:	4b3e      	ldr	r3, [pc, #248]	; (12ec <EXTERNAL_IRQ_0_init+0x11c>)
    11f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    11f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    11f8:	2040      	movs	r0, #64	; 0x40
    11fa:	4b3d      	ldr	r3, [pc, #244]	; (12f0 <EXTERNAL_IRQ_0_init+0x120>)
    11fc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    11fe:	2101      	movs	r1, #1
    1200:	2021      	movs	r0, #33	; 0x21
    1202:	4b39      	ldr	r3, [pc, #228]	; (12e8 <EXTERNAL_IRQ_0_init+0x118>)
    1204:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1206:	2100      	movs	r1, #0
    1208:	2021      	movs	r0, #33	; 0x21
    120a:	4b38      	ldr	r3, [pc, #224]	; (12ec <EXTERNAL_IRQ_0_init+0x11c>)
    120c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    120e:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1212:	2021      	movs	r0, #33	; 0x21
    1214:	4b36      	ldr	r3, [pc, #216]	; (12f0 <EXTERNAL_IRQ_0_init+0x120>)
    1216:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1218:	2101      	movs	r1, #1
    121a:	2003      	movs	r0, #3
    121c:	4b32      	ldr	r3, [pc, #200]	; (12e8 <EXTERNAL_IRQ_0_init+0x118>)
    121e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1220:	2102      	movs	r1, #2
    1222:	2003      	movs	r0, #3
    1224:	4b31      	ldr	r3, [pc, #196]	; (12ec <EXTERNAL_IRQ_0_init+0x11c>)
    1226:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1228:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    122c:	2003      	movs	r0, #3
    122e:	4b30      	ldr	r3, [pc, #192]	; (12f0 <EXTERNAL_IRQ_0_init+0x120>)
    1230:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1232:	2101      	movs	r1, #1
    1234:	2004      	movs	r0, #4
    1236:	4b2c      	ldr	r3, [pc, #176]	; (12e8 <EXTERNAL_IRQ_0_init+0x118>)
    1238:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    123a:	2102      	movs	r1, #2
    123c:	2004      	movs	r0, #4
    123e:	4b2b      	ldr	r3, [pc, #172]	; (12ec <EXTERNAL_IRQ_0_init+0x11c>)
    1240:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1242:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1246:	2004      	movs	r0, #4
    1248:	4b29      	ldr	r3, [pc, #164]	; (12f0 <EXTERNAL_IRQ_0_init+0x120>)
    124a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    124c:	2101      	movs	r1, #1
    124e:	2005      	movs	r0, #5
    1250:	4b25      	ldr	r3, [pc, #148]	; (12e8 <EXTERNAL_IRQ_0_init+0x118>)
    1252:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1254:	2102      	movs	r1, #2
    1256:	2005      	movs	r0, #5
    1258:	4b24      	ldr	r3, [pc, #144]	; (12ec <EXTERNAL_IRQ_0_init+0x11c>)
    125a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    125c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1260:	2005      	movs	r0, #5
    1262:	4b23      	ldr	r3, [pc, #140]	; (12f0 <EXTERNAL_IRQ_0_init+0x120>)
    1264:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1266:	2101      	movs	r1, #1
    1268:	2056      	movs	r0, #86	; 0x56
    126a:	4b1f      	ldr	r3, [pc, #124]	; (12e8 <EXTERNAL_IRQ_0_init+0x118>)
    126c:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    126e:	2102      	movs	r1, #2
    1270:	2056      	movs	r0, #86	; 0x56
    1272:	4b1e      	ldr	r3, [pc, #120]	; (12ec <EXTERNAL_IRQ_0_init+0x11c>)
    1274:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1276:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    127a:	2056      	movs	r0, #86	; 0x56
    127c:	4b1c      	ldr	r3, [pc, #112]	; (12f0 <EXTERNAL_IRQ_0_init+0x120>)
    127e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1280:	2101      	movs	r1, #1
    1282:	2057      	movs	r0, #87	; 0x57
    1284:	4b18      	ldr	r3, [pc, #96]	; (12e8 <EXTERNAL_IRQ_0_init+0x118>)
    1286:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1288:	2102      	movs	r1, #2
    128a:	2057      	movs	r0, #87	; 0x57
    128c:	4b17      	ldr	r3, [pc, #92]	; (12ec <EXTERNAL_IRQ_0_init+0x11c>)
    128e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1290:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1294:	2057      	movs	r0, #87	; 0x57
    1296:	4b16      	ldr	r3, [pc, #88]	; (12f0 <EXTERNAL_IRQ_0_init+0x120>)
    1298:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    129a:	2101      	movs	r1, #1
    129c:	2028      	movs	r0, #40	; 0x28
    129e:	4b12      	ldr	r3, [pc, #72]	; (12e8 <EXTERNAL_IRQ_0_init+0x118>)
    12a0:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    12a2:	2100      	movs	r1, #0
    12a4:	2028      	movs	r0, #40	; 0x28
    12a6:	4b11      	ldr	r3, [pc, #68]	; (12ec <EXTERNAL_IRQ_0_init+0x11c>)
    12a8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    12aa:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    12ae:	2028      	movs	r0, #40	; 0x28
    12b0:	4b0f      	ldr	r3, [pc, #60]	; (12f0 <EXTERNAL_IRQ_0_init+0x120>)
    12b2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    12b4:	2101      	movs	r1, #1
    12b6:	2029      	movs	r0, #41	; 0x29
    12b8:	4b0b      	ldr	r3, [pc, #44]	; (12e8 <EXTERNAL_IRQ_0_init+0x118>)
    12ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    12bc:	2100      	movs	r1, #0
    12be:	2029      	movs	r0, #41	; 0x29
    12c0:	4b0a      	ldr	r3, [pc, #40]	; (12ec <EXTERNAL_IRQ_0_init+0x11c>)
    12c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    12c4:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    12c8:	2029      	movs	r0, #41	; 0x29
    12ca:	4b09      	ldr	r3, [pc, #36]	; (12f0 <EXTERNAL_IRQ_0_init+0x120>)
    12cc:	4798      	blx	r3

	ext_irq_init();
    12ce:	4b09      	ldr	r3, [pc, #36]	; (12f4 <EXTERNAL_IRQ_0_init+0x124>)
    12d0:	4798      	blx	r3
}
    12d2:	bf00      	nop
    12d4:	bd80      	pop	{r7, pc}
    12d6:	bf00      	nop
    12d8:	40001c00 	.word	0x40001c00
    12dc:	00000881 	.word	0x00000881
    12e0:	40000800 	.word	0x40000800
    12e4:	00000967 	.word	0x00000967
    12e8:	000010d5 	.word	0x000010d5
    12ec:	00001081 	.word	0x00001081
    12f0:	000010b5 	.word	0x000010b5
    12f4:	00002261 	.word	0x00002261

000012f8 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    12f8:	b580      	push	{r7, lr}
    12fa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12fc:	2244      	movs	r2, #68	; 0x44
    12fe:	210b      	movs	r1, #11
    1300:	4807      	ldr	r0, [pc, #28]	; (1320 <EVENT_SYSTEM_0_init+0x28>)
    1302:	4b08      	ldr	r3, [pc, #32]	; (1324 <EVENT_SYSTEM_0_init+0x2c>)
    1304:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1306:	2244      	movs	r2, #68	; 0x44
    1308:	210c      	movs	r1, #12
    130a:	4805      	ldr	r0, [pc, #20]	; (1320 <EVENT_SYSTEM_0_init+0x28>)
    130c:	4b05      	ldr	r3, [pc, #20]	; (1324 <EVENT_SYSTEM_0_init+0x2c>)
    130e:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1310:	4805      	ldr	r0, [pc, #20]	; (1328 <EVENT_SYSTEM_0_init+0x30>)
    1312:	4b06      	ldr	r3, [pc, #24]	; (132c <EVENT_SYSTEM_0_init+0x34>)
    1314:	4798      	blx	r3

	event_system_init();
    1316:	4b06      	ldr	r3, [pc, #24]	; (1330 <EVENT_SYSTEM_0_init+0x38>)
    1318:	4798      	blx	r3
}
    131a:	bf00      	nop
    131c:	bd80      	pop	{r7, pc}
    131e:	bf00      	nop
    1320:	40001c00 	.word	0x40001c00
    1324:	00000881 	.word	0x00000881
    1328:	40000800 	.word	0x40000800
    132c:	00000a07 	.word	0x00000a07
    1330:	0000224d 	.word	0x0000224d

00001334 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1334:	b580      	push	{r7, lr}
    1336:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1338:	2101      	movs	r1, #1
    133a:	202b      	movs	r0, #43	; 0x2b
    133c:	4b2b      	ldr	r3, [pc, #172]	; (13ec <QSPI_N25Q256_PORT_init+0xb8>)
    133e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1340:	2100      	movs	r1, #0
    1342:	202b      	movs	r0, #43	; 0x2b
    1344:	4b2a      	ldr	r3, [pc, #168]	; (13f0 <QSPI_N25Q256_PORT_init+0xbc>)
    1346:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1348:	492a      	ldr	r1, [pc, #168]	; (13f4 <QSPI_N25Q256_PORT_init+0xc0>)
    134a:	202b      	movs	r0, #43	; 0x2b
    134c:	4b2a      	ldr	r3, [pc, #168]	; (13f8 <QSPI_N25Q256_PORT_init+0xc4>)
    134e:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1350:	2102      	movs	r1, #2
    1352:	2008      	movs	r0, #8
    1354:	4b25      	ldr	r3, [pc, #148]	; (13ec <QSPI_N25Q256_PORT_init+0xb8>)
    1356:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1358:	2100      	movs	r1, #0
    135a:	2008      	movs	r0, #8
    135c:	4b27      	ldr	r3, [pc, #156]	; (13fc <QSPI_N25Q256_PORT_init+0xc8>)
    135e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1360:	2100      	movs	r1, #0
    1362:	2008      	movs	r0, #8
    1364:	4b22      	ldr	r3, [pc, #136]	; (13f0 <QSPI_N25Q256_PORT_init+0xbc>)
    1366:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1368:	4925      	ldr	r1, [pc, #148]	; (1400 <QSPI_N25Q256_PORT_init+0xcc>)
    136a:	2008      	movs	r0, #8
    136c:	4b22      	ldr	r3, [pc, #136]	; (13f8 <QSPI_N25Q256_PORT_init+0xc4>)
    136e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1370:	2102      	movs	r1, #2
    1372:	2009      	movs	r0, #9
    1374:	4b1d      	ldr	r3, [pc, #116]	; (13ec <QSPI_N25Q256_PORT_init+0xb8>)
    1376:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1378:	2100      	movs	r1, #0
    137a:	2009      	movs	r0, #9
    137c:	4b1f      	ldr	r3, [pc, #124]	; (13fc <QSPI_N25Q256_PORT_init+0xc8>)
    137e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1380:	2100      	movs	r1, #0
    1382:	2009      	movs	r0, #9
    1384:	4b1a      	ldr	r3, [pc, #104]	; (13f0 <QSPI_N25Q256_PORT_init+0xbc>)
    1386:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1388:	491e      	ldr	r1, [pc, #120]	; (1404 <QSPI_N25Q256_PORT_init+0xd0>)
    138a:	2009      	movs	r0, #9
    138c:	4b1a      	ldr	r3, [pc, #104]	; (13f8 <QSPI_N25Q256_PORT_init+0xc4>)
    138e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1390:	2102      	movs	r1, #2
    1392:	200a      	movs	r0, #10
    1394:	4b15      	ldr	r3, [pc, #84]	; (13ec <QSPI_N25Q256_PORT_init+0xb8>)
    1396:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1398:	2100      	movs	r1, #0
    139a:	200a      	movs	r0, #10
    139c:	4b17      	ldr	r3, [pc, #92]	; (13fc <QSPI_N25Q256_PORT_init+0xc8>)
    139e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    13a0:	2100      	movs	r1, #0
    13a2:	200a      	movs	r0, #10
    13a4:	4b12      	ldr	r3, [pc, #72]	; (13f0 <QSPI_N25Q256_PORT_init+0xbc>)
    13a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    13a8:	4917      	ldr	r1, [pc, #92]	; (1408 <QSPI_N25Q256_PORT_init+0xd4>)
    13aa:	200a      	movs	r0, #10
    13ac:	4b12      	ldr	r3, [pc, #72]	; (13f8 <QSPI_N25Q256_PORT_init+0xc4>)
    13ae:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    13b0:	2102      	movs	r1, #2
    13b2:	200b      	movs	r0, #11
    13b4:	4b0d      	ldr	r3, [pc, #52]	; (13ec <QSPI_N25Q256_PORT_init+0xb8>)
    13b6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    13b8:	2100      	movs	r1, #0
    13ba:	200b      	movs	r0, #11
    13bc:	4b0f      	ldr	r3, [pc, #60]	; (13fc <QSPI_N25Q256_PORT_init+0xc8>)
    13be:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    13c0:	2100      	movs	r1, #0
    13c2:	200b      	movs	r0, #11
    13c4:	4b0a      	ldr	r3, [pc, #40]	; (13f0 <QSPI_N25Q256_PORT_init+0xbc>)
    13c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    13c8:	4910      	ldr	r1, [pc, #64]	; (140c <QSPI_N25Q256_PORT_init+0xd8>)
    13ca:	200b      	movs	r0, #11
    13cc:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <QSPI_N25Q256_PORT_init+0xc4>)
    13ce:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    13d0:	2101      	movs	r1, #1
    13d2:	202a      	movs	r0, #42	; 0x2a
    13d4:	4b05      	ldr	r3, [pc, #20]	; (13ec <QSPI_N25Q256_PORT_init+0xb8>)
    13d6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    13d8:	2100      	movs	r1, #0
    13da:	202a      	movs	r0, #42	; 0x2a
    13dc:	4b04      	ldr	r3, [pc, #16]	; (13f0 <QSPI_N25Q256_PORT_init+0xbc>)
    13de:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    13e0:	490b      	ldr	r1, [pc, #44]	; (1410 <QSPI_N25Q256_PORT_init+0xdc>)
    13e2:	202a      	movs	r0, #42	; 0x2a
    13e4:	4b04      	ldr	r3, [pc, #16]	; (13f8 <QSPI_N25Q256_PORT_init+0xc4>)
    13e6:	4798      	blx	r3
}
    13e8:	bf00      	nop
    13ea:	bd80      	pop	{r7, pc}
    13ec:	000010d5 	.word	0x000010d5
    13f0:	00001081 	.word	0x00001081
    13f4:	002b0007 	.word	0x002b0007
    13f8:	000010b5 	.word	0x000010b5
    13fc:	0000110d 	.word	0x0000110d
    1400:	00080007 	.word	0x00080007
    1404:	00090007 	.word	0x00090007
    1408:	000a0007 	.word	0x000a0007
    140c:	000b0007 	.word	0x000b0007
    1410:	002a0007 	.word	0x002a0007

00001414 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1414:	b580      	push	{r7, lr}
    1416:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1418:	4805      	ldr	r0, [pc, #20]	; (1430 <QSPI_N25Q256_CLOCK_init+0x1c>)
    141a:	4b06      	ldr	r3, [pc, #24]	; (1434 <QSPI_N25Q256_CLOCK_init+0x20>)
    141c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    141e:	4804      	ldr	r0, [pc, #16]	; (1430 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1420:	4b05      	ldr	r3, [pc, #20]	; (1438 <QSPI_N25Q256_CLOCK_init+0x24>)
    1422:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1424:	4802      	ldr	r0, [pc, #8]	; (1430 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1426:	4b05      	ldr	r3, [pc, #20]	; (143c <QSPI_N25Q256_CLOCK_init+0x28>)
    1428:	4798      	blx	r3
}
    142a:	bf00      	nop
    142c:	bd80      	pop	{r7, pc}
    142e:	bf00      	nop
    1430:	40000800 	.word	0x40000800
    1434:	000008c7 	.word	0x000008c7
    1438:	00000907 	.word	0x00000907
    143c:	00000ac7 	.word	0x00000ac7

00001440 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1440:	b580      	push	{r7, lr}
    1442:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1444:	4b04      	ldr	r3, [pc, #16]	; (1458 <QSPI_N25Q256_init+0x18>)
    1446:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1448:	4904      	ldr	r1, [pc, #16]	; (145c <QSPI_N25Q256_init+0x1c>)
    144a:	4805      	ldr	r0, [pc, #20]	; (1460 <QSPI_N25Q256_init+0x20>)
    144c:	4b05      	ldr	r3, [pc, #20]	; (1464 <QSPI_N25Q256_init+0x24>)
    144e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1450:	4b05      	ldr	r3, [pc, #20]	; (1468 <QSPI_N25Q256_init+0x28>)
    1452:	4798      	blx	r3
}
    1454:	bf00      	nop
    1456:	bd80      	pop	{r7, pc}
    1458:	00001415 	.word	0x00001415
    145c:	42003400 	.word	0x42003400
    1460:	2000a3f8 	.word	0x2000a3f8
    1464:	00002635 	.word	0x00002635
    1468:	00001335 	.word	0x00001335

0000146c <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    146c:	b580      	push	{r7, lr}
    146e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1470:	4802      	ldr	r0, [pc, #8]	; (147c <DATETIME_CLOCK_CLOCK_init+0x10>)
    1472:	4b03      	ldr	r3, [pc, #12]	; (1480 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1474:	4798      	blx	r3
}
    1476:	bf00      	nop
    1478:	bd80      	pop	{r7, pc}
    147a:	bf00      	nop
    147c:	40000800 	.word	0x40000800
    1480:	00000947 	.word	0x00000947

00001484 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1484:	b580      	push	{r7, lr}
    1486:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1488:	4b03      	ldr	r3, [pc, #12]	; (1498 <DATETIME_CLOCK_init+0x14>)
    148a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    148c:	4903      	ldr	r1, [pc, #12]	; (149c <DATETIME_CLOCK_init+0x18>)
    148e:	4804      	ldr	r0, [pc, #16]	; (14a0 <DATETIME_CLOCK_init+0x1c>)
    1490:	4b04      	ldr	r3, [pc, #16]	; (14a4 <DATETIME_CLOCK_init+0x20>)
    1492:	4798      	blx	r3
}
    1494:	bf00      	nop
    1496:	bd80      	pop	{r7, pc}
    1498:	0000146d 	.word	0x0000146d
    149c:	40002400 	.word	0x40002400
    14a0:	2000a520 	.word	0x2000a520
    14a4:	00001fed 	.word	0x00001fed

000014a8 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    14a8:	b580      	push	{r7, lr}
    14aa:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    14ac:	2101      	movs	r1, #1
    14ae:	2010      	movs	r0, #16
    14b0:	4b07      	ldr	r3, [pc, #28]	; (14d0 <I2C_HEATERS_PORT_init+0x28>)
    14b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    14b4:	4907      	ldr	r1, [pc, #28]	; (14d4 <I2C_HEATERS_PORT_init+0x2c>)
    14b6:	2010      	movs	r0, #16
    14b8:	4b07      	ldr	r3, [pc, #28]	; (14d8 <I2C_HEATERS_PORT_init+0x30>)
    14ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    14bc:	2101      	movs	r1, #1
    14be:	2011      	movs	r0, #17
    14c0:	4b03      	ldr	r3, [pc, #12]	; (14d0 <I2C_HEATERS_PORT_init+0x28>)
    14c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    14c4:	4905      	ldr	r1, [pc, #20]	; (14dc <I2C_HEATERS_PORT_init+0x34>)
    14c6:	2011      	movs	r0, #17
    14c8:	4b03      	ldr	r3, [pc, #12]	; (14d8 <I2C_HEATERS_PORT_init+0x30>)
    14ca:	4798      	blx	r3
}
    14cc:	bf00      	nop
    14ce:	bd80      	pop	{r7, pc}
    14d0:	00001081 	.word	0x00001081
    14d4:	00100002 	.word	0x00100002
    14d8:	000010b5 	.word	0x000010b5
    14dc:	00110002 	.word	0x00110002

000014e0 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    14e0:	b580      	push	{r7, lr}
    14e2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14e4:	2242      	movs	r2, #66	; 0x42
    14e6:	2108      	movs	r1, #8
    14e8:	4806      	ldr	r0, [pc, #24]	; (1504 <I2C_HEATERS_CLOCK_init+0x24>)
    14ea:	4b07      	ldr	r3, [pc, #28]	; (1508 <I2C_HEATERS_CLOCK_init+0x28>)
    14ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14ee:	224a      	movs	r2, #74	; 0x4a
    14f0:	2103      	movs	r1, #3
    14f2:	4804      	ldr	r0, [pc, #16]	; (1504 <I2C_HEATERS_CLOCK_init+0x24>)
    14f4:	4b04      	ldr	r3, [pc, #16]	; (1508 <I2C_HEATERS_CLOCK_init+0x28>)
    14f6:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    14f8:	4804      	ldr	r0, [pc, #16]	; (150c <I2C_HEATERS_CLOCK_init+0x2c>)
    14fa:	4b05      	ldr	r3, [pc, #20]	; (1510 <I2C_HEATERS_CLOCK_init+0x30>)
    14fc:	4798      	blx	r3
}
    14fe:	bf00      	nop
    1500:	bd80      	pop	{r7, pc}
    1502:	bf00      	nop
    1504:	40001c00 	.word	0x40001c00
    1508:	00000881 	.word	0x00000881
    150c:	40000800 	.word	0x40000800
    1510:	00000987 	.word	0x00000987

00001514 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1514:	b580      	push	{r7, lr}
    1516:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1518:	4b04      	ldr	r3, [pc, #16]	; (152c <I2C_HEATERS_init+0x18>)
    151a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    151c:	4904      	ldr	r1, [pc, #16]	; (1530 <I2C_HEATERS_init+0x1c>)
    151e:	4805      	ldr	r0, [pc, #20]	; (1534 <I2C_HEATERS_init+0x20>)
    1520:	4b05      	ldr	r3, [pc, #20]	; (1538 <I2C_HEATERS_init+0x24>)
    1522:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1524:	4b05      	ldr	r3, [pc, #20]	; (153c <I2C_HEATERS_init+0x28>)
    1526:	4798      	blx	r3
}
    1528:	bf00      	nop
    152a:	bd80      	pop	{r7, pc}
    152c:	000014e1 	.word	0x000014e1
    1530:	40003400 	.word	0x40003400
    1534:	2000a478 	.word	0x2000a478
    1538:	00002529 	.word	0x00002529
    153c:	000014a9 	.word	0x000014a9

00001540 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1540:	b580      	push	{r7, lr}
    1542:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1544:	2100      	movs	r1, #0
    1546:	203b      	movs	r0, #59	; 0x3b
    1548:	4b11      	ldr	r3, [pc, #68]	; (1590 <SPI_TEMP_PORT_init+0x50>)
    154a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    154c:	2102      	movs	r1, #2
    154e:	203b      	movs	r0, #59	; 0x3b
    1550:	4b10      	ldr	r3, [pc, #64]	; (1594 <SPI_TEMP_PORT_init+0x54>)
    1552:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1554:	4910      	ldr	r1, [pc, #64]	; (1598 <SPI_TEMP_PORT_init+0x58>)
    1556:	203b      	movs	r0, #59	; 0x3b
    1558:	4b10      	ldr	r3, [pc, #64]	; (159c <SPI_TEMP_PORT_init+0x5c>)
    155a:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    155c:	2100      	movs	r1, #0
    155e:	203a      	movs	r0, #58	; 0x3a
    1560:	4b0b      	ldr	r3, [pc, #44]	; (1590 <SPI_TEMP_PORT_init+0x50>)
    1562:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1564:	2102      	movs	r1, #2
    1566:	203a      	movs	r0, #58	; 0x3a
    1568:	4b0a      	ldr	r3, [pc, #40]	; (1594 <SPI_TEMP_PORT_init+0x54>)
    156a:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    156c:	490c      	ldr	r1, [pc, #48]	; (15a0 <SPI_TEMP_PORT_init+0x60>)
    156e:	203a      	movs	r0, #58	; 0x3a
    1570:	4b0a      	ldr	r3, [pc, #40]	; (159c <SPI_TEMP_PORT_init+0x5c>)
    1572:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1574:	2101      	movs	r1, #1
    1576:	203c      	movs	r0, #60	; 0x3c
    1578:	4b06      	ldr	r3, [pc, #24]	; (1594 <SPI_TEMP_PORT_init+0x54>)
    157a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    157c:	2100      	movs	r1, #0
    157e:	203c      	movs	r0, #60	; 0x3c
    1580:	4b08      	ldr	r3, [pc, #32]	; (15a4 <SPI_TEMP_PORT_init+0x64>)
    1582:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1584:	4908      	ldr	r1, [pc, #32]	; (15a8 <SPI_TEMP_PORT_init+0x68>)
    1586:	203c      	movs	r0, #60	; 0x3c
    1588:	4b04      	ldr	r3, [pc, #16]	; (159c <SPI_TEMP_PORT_init+0x5c>)
    158a:	4798      	blx	r3
}
    158c:	bf00      	nop
    158e:	bd80      	pop	{r7, pc}
    1590:	0000110d 	.word	0x0000110d
    1594:	000010d5 	.word	0x000010d5
    1598:	003b0003 	.word	0x003b0003
    159c:	000010b5 	.word	0x000010b5
    15a0:	003a0003 	.word	0x003a0003
    15a4:	00001081 	.word	0x00001081
    15a8:	003c0003 	.word	0x003c0003

000015ac <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    15ac:	b580      	push	{r7, lr}
    15ae:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15b0:	2245      	movs	r2, #69	; 0x45
    15b2:	2122      	movs	r1, #34	; 0x22
    15b4:	4806      	ldr	r0, [pc, #24]	; (15d0 <SPI_TEMP_CLOCK_init+0x24>)
    15b6:	4b07      	ldr	r3, [pc, #28]	; (15d4 <SPI_TEMP_CLOCK_init+0x28>)
    15b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15ba:	224a      	movs	r2, #74	; 0x4a
    15bc:	2103      	movs	r1, #3
    15be:	4804      	ldr	r0, [pc, #16]	; (15d0 <SPI_TEMP_CLOCK_init+0x24>)
    15c0:	4b04      	ldr	r3, [pc, #16]	; (15d4 <SPI_TEMP_CLOCK_init+0x28>)
    15c2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    15c4:	4804      	ldr	r0, [pc, #16]	; (15d8 <SPI_TEMP_CLOCK_init+0x2c>)
    15c6:	4b05      	ldr	r3, [pc, #20]	; (15dc <SPI_TEMP_CLOCK_init+0x30>)
    15c8:	4798      	blx	r3
}
    15ca:	bf00      	nop
    15cc:	bd80      	pop	{r7, pc}
    15ce:	bf00      	nop
    15d0:	40001c00 	.word	0x40001c00
    15d4:	00000881 	.word	0x00000881
    15d8:	40000800 	.word	0x40000800
    15dc:	00000ae7 	.word	0x00000ae7

000015e0 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    15e0:	b580      	push	{r7, lr}
    15e2:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    15e4:	4b05      	ldr	r3, [pc, #20]	; (15fc <SPI_TEMP_init+0x1c>)
    15e6:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    15e8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    15ec:	4804      	ldr	r0, [pc, #16]	; (1600 <SPI_TEMP_init+0x20>)
    15ee:	4b05      	ldr	r3, [pc, #20]	; (1604 <SPI_TEMP_init+0x24>)
    15f0:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    15f2:	4b05      	ldr	r3, [pc, #20]	; (1608 <SPI_TEMP_init+0x28>)
    15f4:	4798      	blx	r3
}
    15f6:	bf00      	nop
    15f8:	bd80      	pop	{r7, pc}
    15fa:	bf00      	nop
    15fc:	000015ad 	.word	0x000015ad
    1600:	2000a3a0 	.word	0x2000a3a0
    1604:	00002745 	.word	0x00002745
    1608:	00001541 	.word	0x00001541

0000160c <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    160c:	b580      	push	{r7, lr}
    160e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1610:	2100      	movs	r1, #0
    1612:	2017      	movs	r0, #23
    1614:	4b07      	ldr	r3, [pc, #28]	; (1634 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1616:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1618:	4907      	ldr	r1, [pc, #28]	; (1638 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    161a:	2017      	movs	r0, #23
    161c:	4b07      	ldr	r3, [pc, #28]	; (163c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    161e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1620:	2100      	movs	r1, #0
    1622:	2016      	movs	r0, #22
    1624:	4b03      	ldr	r3, [pc, #12]	; (1634 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1626:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1628:	4905      	ldr	r1, [pc, #20]	; (1640 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    162a:	2016      	movs	r0, #22
    162c:	4b03      	ldr	r3, [pc, #12]	; (163c <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    162e:	4798      	blx	r3
}
    1630:	bf00      	nop
    1632:	bd80      	pop	{r7, pc}
    1634:	00001081 	.word	0x00001081
    1638:	00170003 	.word	0x00170003
    163c:	000010b5 	.word	0x000010b5
    1640:	00160003 	.word	0x00160003

00001644 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    1644:	b580      	push	{r7, lr}
    1646:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1648:	2244      	movs	r2, #68	; 0x44
    164a:	2123      	movs	r1, #35	; 0x23
    164c:	4806      	ldr	r0, [pc, #24]	; (1668 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    164e:	4b07      	ldr	r3, [pc, #28]	; (166c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1650:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1652:	224a      	movs	r2, #74	; 0x4a
    1654:	2103      	movs	r1, #3
    1656:	4804      	ldr	r0, [pc, #16]	; (1668 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1658:	4b04      	ldr	r3, [pc, #16]	; (166c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    165a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    165c:	4804      	ldr	r0, [pc, #16]	; (1670 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    165e:	4b05      	ldr	r3, [pc, #20]	; (1674 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1660:	4798      	blx	r3
}
    1662:	bf00      	nop
    1664:	bd80      	pop	{r7, pc}
    1666:	bf00      	nop
    1668:	40001c00 	.word	0x40001c00
    166c:	00000881 	.word	0x00000881
    1670:	40000800 	.word	0x40000800
    1674:	00000b07 	.word	0x00000b07

00001678 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1678:	b580      	push	{r7, lr}
    167a:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    167c:	4b04      	ldr	r3, [pc, #16]	; (1690 <I2C_FLAPPER_VALVE_init+0x18>)
    167e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1680:	4904      	ldr	r1, [pc, #16]	; (1694 <I2C_FLAPPER_VALVE_init+0x1c>)
    1682:	4805      	ldr	r0, [pc, #20]	; (1698 <I2C_FLAPPER_VALVE_init+0x20>)
    1684:	4b05      	ldr	r3, [pc, #20]	; (169c <I2C_FLAPPER_VALVE_init+0x24>)
    1686:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1688:	4b05      	ldr	r3, [pc, #20]	; (16a0 <I2C_FLAPPER_VALVE_init+0x28>)
    168a:	4798      	blx	r3
}
    168c:	bf00      	nop
    168e:	bd80      	pop	{r7, pc}
    1690:	00001645 	.word	0x00001645
    1694:	43000400 	.word	0x43000400
    1698:	2000a43c 	.word	0x2000a43c
    169c:	00002529 	.word	0x00002529
    16a0:	0000160d 	.word	0x0000160d

000016a4 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    16a4:	b580      	push	{r7, lr}
    16a6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    16a8:	2100      	movs	r1, #0
    16aa:	2044      	movs	r0, #68	; 0x44
    16ac:	4b11      	ldr	r3, [pc, #68]	; (16f4 <SPI_HI3593_PORT_init+0x50>)
    16ae:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    16b0:	2102      	movs	r1, #2
    16b2:	2044      	movs	r0, #68	; 0x44
    16b4:	4b10      	ldr	r3, [pc, #64]	; (16f8 <SPI_HI3593_PORT_init+0x54>)
    16b6:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    16b8:	4910      	ldr	r1, [pc, #64]	; (16fc <SPI_HI3593_PORT_init+0x58>)
    16ba:	2044      	movs	r0, #68	; 0x44
    16bc:	4b10      	ldr	r3, [pc, #64]	; (1700 <SPI_HI3593_PORT_init+0x5c>)
    16be:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    16c0:	2100      	movs	r1, #0
    16c2:	2045      	movs	r0, #69	; 0x45
    16c4:	4b0b      	ldr	r3, [pc, #44]	; (16f4 <SPI_HI3593_PORT_init+0x50>)
    16c6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    16c8:	2102      	movs	r1, #2
    16ca:	2045      	movs	r0, #69	; 0x45
    16cc:	4b0a      	ldr	r3, [pc, #40]	; (16f8 <SPI_HI3593_PORT_init+0x54>)
    16ce:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    16d0:	490c      	ldr	r1, [pc, #48]	; (1704 <SPI_HI3593_PORT_init+0x60>)
    16d2:	2045      	movs	r0, #69	; 0x45
    16d4:	4b0a      	ldr	r3, [pc, #40]	; (1700 <SPI_HI3593_PORT_init+0x5c>)
    16d6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    16d8:	2101      	movs	r1, #1
    16da:	2047      	movs	r0, #71	; 0x47
    16dc:	4b06      	ldr	r3, [pc, #24]	; (16f8 <SPI_HI3593_PORT_init+0x54>)
    16de:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    16e0:	2100      	movs	r1, #0
    16e2:	2047      	movs	r0, #71	; 0x47
    16e4:	4b08      	ldr	r3, [pc, #32]	; (1708 <SPI_HI3593_PORT_init+0x64>)
    16e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    16e8:	4908      	ldr	r1, [pc, #32]	; (170c <SPI_HI3593_PORT_init+0x68>)
    16ea:	2047      	movs	r0, #71	; 0x47
    16ec:	4b04      	ldr	r3, [pc, #16]	; (1700 <SPI_HI3593_PORT_init+0x5c>)
    16ee:	4798      	blx	r3
}
    16f0:	bf00      	nop
    16f2:	bd80      	pop	{r7, pc}
    16f4:	0000110d 	.word	0x0000110d
    16f8:	000010d5 	.word	0x000010d5
    16fc:	00440002 	.word	0x00440002
    1700:	000010b5 	.word	0x000010b5
    1704:	00450002 	.word	0x00450002
    1708:	00001081 	.word	0x00001081
    170c:	00470002 	.word	0x00470002

00001710 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1710:	b580      	push	{r7, lr}
    1712:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1714:	2242      	movs	r2, #66	; 0x42
    1716:	2124      	movs	r1, #36	; 0x24
    1718:	4806      	ldr	r0, [pc, #24]	; (1734 <SPI_HI3593_CLOCK_init+0x24>)
    171a:	4b07      	ldr	r3, [pc, #28]	; (1738 <SPI_HI3593_CLOCK_init+0x28>)
    171c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    171e:	224a      	movs	r2, #74	; 0x4a
    1720:	2103      	movs	r1, #3
    1722:	4804      	ldr	r0, [pc, #16]	; (1734 <SPI_HI3593_CLOCK_init+0x24>)
    1724:	4b04      	ldr	r3, [pc, #16]	; (1738 <SPI_HI3593_CLOCK_init+0x28>)
    1726:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1728:	4804      	ldr	r0, [pc, #16]	; (173c <SPI_HI3593_CLOCK_init+0x2c>)
    172a:	4b05      	ldr	r3, [pc, #20]	; (1740 <SPI_HI3593_CLOCK_init+0x30>)
    172c:	4798      	blx	r3
}
    172e:	bf00      	nop
    1730:	bd80      	pop	{r7, pc}
    1732:	bf00      	nop
    1734:	40001c00 	.word	0x40001c00
    1738:	00000881 	.word	0x00000881
    173c:	40000800 	.word	0x40000800
    1740:	00000b27 	.word	0x00000b27

00001744 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1744:	b580      	push	{r7, lr}
    1746:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1748:	4b04      	ldr	r3, [pc, #16]	; (175c <SPI_HI3593_init+0x18>)
    174a:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    174c:	4904      	ldr	r1, [pc, #16]	; (1760 <SPI_HI3593_init+0x1c>)
    174e:	4805      	ldr	r0, [pc, #20]	; (1764 <SPI_HI3593_init+0x20>)
    1750:	4b05      	ldr	r3, [pc, #20]	; (1768 <SPI_HI3593_init+0x24>)
    1752:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1754:	4b05      	ldr	r3, [pc, #20]	; (176c <SPI_HI3593_init+0x28>)
    1756:	4798      	blx	r3
}
    1758:	bf00      	nop
    175a:	bd80      	pop	{r7, pc}
    175c:	00001711 	.word	0x00001711
    1760:	43000800 	.word	0x43000800
    1764:	2000a388 	.word	0x2000a388
    1768:	00002745 	.word	0x00002745
    176c:	000016a5 	.word	0x000016a5

00001770 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1770:	b580      	push	{r7, lr}
    1772:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1774:	2100      	movs	r1, #0
    1776:	2068      	movs	r0, #104	; 0x68
    1778:	4b07      	ldr	r3, [pc, #28]	; (1798 <I2C_FANS_PORT_init+0x28>)
    177a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    177c:	4907      	ldr	r1, [pc, #28]	; (179c <I2C_FANS_PORT_init+0x2c>)
    177e:	2068      	movs	r0, #104	; 0x68
    1780:	4b07      	ldr	r3, [pc, #28]	; (17a0 <I2C_FANS_PORT_init+0x30>)
    1782:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1784:	2100      	movs	r1, #0
    1786:	2069      	movs	r0, #105	; 0x69
    1788:	4b03      	ldr	r3, [pc, #12]	; (1798 <I2C_FANS_PORT_init+0x28>)
    178a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    178c:	4905      	ldr	r1, [pc, #20]	; (17a4 <I2C_FANS_PORT_init+0x34>)
    178e:	2069      	movs	r0, #105	; 0x69
    1790:	4b03      	ldr	r3, [pc, #12]	; (17a0 <I2C_FANS_PORT_init+0x30>)
    1792:	4798      	blx	r3
}
    1794:	bf00      	nop
    1796:	bd80      	pop	{r7, pc}
    1798:	00001081 	.word	0x00001081
    179c:	00680002 	.word	0x00680002
    17a0:	000010b5 	.word	0x000010b5
    17a4:	00690002 	.word	0x00690002

000017a8 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    17a8:	b580      	push	{r7, lr}
    17aa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17ac:	2244      	movs	r2, #68	; 0x44
    17ae:	2125      	movs	r1, #37	; 0x25
    17b0:	4806      	ldr	r0, [pc, #24]	; (17cc <I2C_FANS_CLOCK_init+0x24>)
    17b2:	4b07      	ldr	r3, [pc, #28]	; (17d0 <I2C_FANS_CLOCK_init+0x28>)
    17b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17b6:	224a      	movs	r2, #74	; 0x4a
    17b8:	2103      	movs	r1, #3
    17ba:	4804      	ldr	r0, [pc, #16]	; (17cc <I2C_FANS_CLOCK_init+0x24>)
    17bc:	4b04      	ldr	r3, [pc, #16]	; (17d0 <I2C_FANS_CLOCK_init+0x28>)
    17be:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    17c0:	4804      	ldr	r0, [pc, #16]	; (17d4 <I2C_FANS_CLOCK_init+0x2c>)
    17c2:	4b05      	ldr	r3, [pc, #20]	; (17d8 <I2C_FANS_CLOCK_init+0x30>)
    17c4:	4798      	blx	r3
}
    17c6:	bf00      	nop
    17c8:	bd80      	pop	{r7, pc}
    17ca:	bf00      	nop
    17cc:	40001c00 	.word	0x40001c00
    17d0:	00000881 	.word	0x00000881
    17d4:	40000800 	.word	0x40000800
    17d8:	00000b47 	.word	0x00000b47

000017dc <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    17dc:	b580      	push	{r7, lr}
    17de:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    17e0:	4b04      	ldr	r3, [pc, #16]	; (17f4 <I2C_FANS_init+0x18>)
    17e2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    17e4:	4904      	ldr	r1, [pc, #16]	; (17f8 <I2C_FANS_init+0x1c>)
    17e6:	4805      	ldr	r0, [pc, #20]	; (17fc <I2C_FANS_init+0x20>)
    17e8:	4b05      	ldr	r3, [pc, #20]	; (1800 <I2C_FANS_init+0x24>)
    17ea:	4798      	blx	r3
	I2C_FANS_PORT_init();
    17ec:	4b05      	ldr	r3, [pc, #20]	; (1804 <I2C_FANS_init+0x28>)
    17ee:	4798      	blx	r3
}
    17f0:	bf00      	nop
    17f2:	bd80      	pop	{r7, pc}
    17f4:	000017a9 	.word	0x000017a9
    17f8:	43000c00 	.word	0x43000c00
    17fc:	2000a3b8 	.word	0x2000a3b8
    1800:	00002529 	.word	0x00002529
    1804:	00001771 	.word	0x00001771

00001808 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1808:	b580      	push	{r7, lr}
    180a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    180c:	4808      	ldr	r0, [pc, #32]	; (1830 <TIMER_USB_init+0x28>)
    180e:	4b09      	ldr	r3, [pc, #36]	; (1834 <TIMER_USB_init+0x2c>)
    1810:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1812:	2243      	movs	r2, #67	; 0x43
    1814:	2109      	movs	r1, #9
    1816:	4808      	ldr	r0, [pc, #32]	; (1838 <TIMER_USB_init+0x30>)
    1818:	4b08      	ldr	r3, [pc, #32]	; (183c <TIMER_USB_init+0x34>)
    181a:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    181c:	4b08      	ldr	r3, [pc, #32]	; (1840 <TIMER_USB_init+0x38>)
    181e:	4798      	blx	r3
    1820:	4603      	mov	r3, r0
    1822:	461a      	mov	r2, r3
    1824:	4907      	ldr	r1, [pc, #28]	; (1844 <TIMER_USB_init+0x3c>)
    1826:	4808      	ldr	r0, [pc, #32]	; (1848 <TIMER_USB_init+0x40>)
    1828:	4b08      	ldr	r3, [pc, #32]	; (184c <TIMER_USB_init+0x44>)
    182a:	4798      	blx	r3
}
    182c:	bf00      	nop
    182e:	bd80      	pop	{r7, pc}
    1830:	40000800 	.word	0x40000800
    1834:	000009a7 	.word	0x000009a7
    1838:	40001c00 	.word	0x40001c00
    183c:	00000881 	.word	0x00000881
    1840:	00007fa5 	.word	0x00007fa5
    1844:	40003800 	.word	0x40003800
    1848:	2000a4e0 	.word	0x2000a4e0
    184c:	00002915 	.word	0x00002915

00001850 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1850:	b580      	push	{r7, lr}
    1852:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1854:	4808      	ldr	r0, [pc, #32]	; (1878 <TIMER_ARINC_init+0x28>)
    1856:	4b09      	ldr	r3, [pc, #36]	; (187c <TIMER_ARINC_init+0x2c>)
    1858:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    185a:	2244      	movs	r2, #68	; 0x44
    185c:	211a      	movs	r1, #26
    185e:	4808      	ldr	r0, [pc, #32]	; (1880 <TIMER_ARINC_init+0x30>)
    1860:	4b08      	ldr	r3, [pc, #32]	; (1884 <TIMER_ARINC_init+0x34>)
    1862:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1864:	4b08      	ldr	r3, [pc, #32]	; (1888 <TIMER_ARINC_init+0x38>)
    1866:	4798      	blx	r3
    1868:	4603      	mov	r3, r0
    186a:	461a      	mov	r2, r3
    186c:	4907      	ldr	r1, [pc, #28]	; (188c <TIMER_ARINC_init+0x3c>)
    186e:	4808      	ldr	r0, [pc, #32]	; (1890 <TIMER_ARINC_init+0x40>)
    1870:	4b08      	ldr	r3, [pc, #32]	; (1894 <TIMER_ARINC_init+0x44>)
    1872:	4798      	blx	r3
}
    1874:	bf00      	nop
    1876:	bd80      	pop	{r7, pc}
    1878:	40000800 	.word	0x40000800
    187c:	00000a67 	.word	0x00000a67
    1880:	40001c00 	.word	0x40001c00
    1884:	00000881 	.word	0x00000881
    1888:	00007fa5 	.word	0x00007fa5
    188c:	4101a000 	.word	0x4101a000
    1890:	2000a4c0 	.word	0x2000a4c0
    1894:	00002915 	.word	0x00002915

00001898 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1898:	b580      	push	{r7, lr}
    189a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    189c:	4808      	ldr	r0, [pc, #32]	; (18c0 <TIMER_MAINTENANCE_init+0x28>)
    189e:	4b09      	ldr	r3, [pc, #36]	; (18c4 <TIMER_MAINTENANCE_init+0x2c>)
    18a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18a2:	2246      	movs	r2, #70	; 0x46
    18a4:	211e      	movs	r1, #30
    18a6:	4808      	ldr	r0, [pc, #32]	; (18c8 <TIMER_MAINTENANCE_init+0x30>)
    18a8:	4b08      	ldr	r3, [pc, #32]	; (18cc <TIMER_MAINTENANCE_init+0x34>)
    18aa:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    18ac:	4b08      	ldr	r3, [pc, #32]	; (18d0 <TIMER_MAINTENANCE_init+0x38>)
    18ae:	4798      	blx	r3
    18b0:	4603      	mov	r3, r0
    18b2:	461a      	mov	r2, r3
    18b4:	4907      	ldr	r1, [pc, #28]	; (18d4 <TIMER_MAINTENANCE_init+0x3c>)
    18b6:	4808      	ldr	r0, [pc, #32]	; (18d8 <TIMER_MAINTENANCE_init+0x40>)
    18b8:	4b08      	ldr	r3, [pc, #32]	; (18dc <TIMER_MAINTENANCE_init+0x44>)
    18ba:	4798      	blx	r3
}
    18bc:	bf00      	nop
    18be:	bd80      	pop	{r7, pc}
    18c0:	40000800 	.word	0x40000800
    18c4:	00000a87 	.word	0x00000a87
    18c8:	40001c00 	.word	0x40001c00
    18cc:	00000881 	.word	0x00000881
    18d0:	00007fa5 	.word	0x00007fa5
    18d4:	42001400 	.word	0x42001400
    18d8:	2000a3d8 	.word	0x2000a3d8
    18dc:	00002915 	.word	0x00002915

000018e0 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    18e0:	b580      	push	{r7, lr}
    18e2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    18e4:	4808      	ldr	r0, [pc, #32]	; (1908 <TIMER_INTERFACE_init+0x28>)
    18e6:	4b09      	ldr	r3, [pc, #36]	; (190c <TIMER_INTERFACE_init+0x2c>)
    18e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18ea:	2246      	movs	r2, #70	; 0x46
    18ec:	211e      	movs	r1, #30
    18ee:	4808      	ldr	r0, [pc, #32]	; (1910 <TIMER_INTERFACE_init+0x30>)
    18f0:	4b08      	ldr	r3, [pc, #32]	; (1914 <TIMER_INTERFACE_init+0x34>)
    18f2:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    18f4:	4b08      	ldr	r3, [pc, #32]	; (1918 <TIMER_INTERFACE_init+0x38>)
    18f6:	4798      	blx	r3
    18f8:	4603      	mov	r3, r0
    18fa:	461a      	mov	r2, r3
    18fc:	4907      	ldr	r1, [pc, #28]	; (191c <TIMER_INTERFACE_init+0x3c>)
    18fe:	4808      	ldr	r0, [pc, #32]	; (1920 <TIMER_INTERFACE_init+0x40>)
    1900:	4b08      	ldr	r3, [pc, #32]	; (1924 <TIMER_INTERFACE_init+0x44>)
    1902:	4798      	blx	r3
}
    1904:	bf00      	nop
    1906:	bd80      	pop	{r7, pc}
    1908:	40000800 	.word	0x40000800
    190c:	00000aa7 	.word	0x00000aa7
    1910:	40001c00 	.word	0x40001c00
    1914:	00000881 	.word	0x00000881
    1918:	00007fa5 	.word	0x00007fa5
    191c:	42001800 	.word	0x42001800
    1920:	2000a41c 	.word	0x2000a41c
    1924:	00002915 	.word	0x00002915

00001928 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1928:	b580      	push	{r7, lr}
    192a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    192c:	4808      	ldr	r0, [pc, #32]	; (1950 <TIMER_EVENT_init+0x28>)
    192e:	4b09      	ldr	r3, [pc, #36]	; (1954 <TIMER_EVENT_init+0x2c>)
    1930:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1932:	2246      	movs	r2, #70	; 0x46
    1934:	2127      	movs	r1, #39	; 0x27
    1936:	4808      	ldr	r0, [pc, #32]	; (1958 <TIMER_EVENT_init+0x30>)
    1938:	4b08      	ldr	r3, [pc, #32]	; (195c <TIMER_EVENT_init+0x34>)
    193a:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    193c:	4b08      	ldr	r3, [pc, #32]	; (1960 <TIMER_EVENT_init+0x38>)
    193e:	4798      	blx	r3
    1940:	4603      	mov	r3, r0
    1942:	461a      	mov	r2, r3
    1944:	4907      	ldr	r1, [pc, #28]	; (1964 <TIMER_EVENT_init+0x3c>)
    1946:	4808      	ldr	r0, [pc, #32]	; (1968 <TIMER_EVENT_init+0x40>)
    1948:	4b08      	ldr	r3, [pc, #32]	; (196c <TIMER_EVENT_init+0x44>)
    194a:	4798      	blx	r3
}
    194c:	bf00      	nop
    194e:	bd80      	pop	{r7, pc}
    1950:	40000800 	.word	0x40000800
    1954:	00000b67 	.word	0x00000b67
    1958:	40001c00 	.word	0x40001c00
    195c:	00000881 	.word	0x00000881
    1960:	00007fa5 	.word	0x00007fa5
    1964:	43001400 	.word	0x43001400
    1968:	2000a3fc 	.word	0x2000a3fc
    196c:	00002915 	.word	0x00002915

00001970 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1970:	b480      	push	{r7}
    1972:	af00      	add	r7, sp, #0
}
    1974:	bf00      	nop
    1976:	46bd      	mov	sp, r7
    1978:	f85d 7b04 	ldr.w	r7, [sp], #4
    197c:	4770      	bx	lr
	...

00001980 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1980:	b580      	push	{r7, lr}
    1982:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1984:	4804      	ldr	r0, [pc, #16]	; (1998 <LIVE_PULSE_CLOCK_init+0x18>)
    1986:	4b05      	ldr	r3, [pc, #20]	; (199c <LIVE_PULSE_CLOCK_init+0x1c>)
    1988:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    198a:	2240      	movs	r2, #64	; 0x40
    198c:	2127      	movs	r1, #39	; 0x27
    198e:	4804      	ldr	r0, [pc, #16]	; (19a0 <LIVE_PULSE_CLOCK_init+0x20>)
    1990:	4b04      	ldr	r3, [pc, #16]	; (19a4 <LIVE_PULSE_CLOCK_init+0x24>)
    1992:	4798      	blx	r3
}
    1994:	bf00      	nop
    1996:	bd80      	pop	{r7, pc}
    1998:	40000800 	.word	0x40000800
    199c:	00000b87 	.word	0x00000b87
    19a0:	40001c00 	.word	0x40001c00
    19a4:	00000881 	.word	0x00000881

000019a8 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    19a8:	b580      	push	{r7, lr}
    19aa:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    19ac:	4b06      	ldr	r3, [pc, #24]	; (19c8 <LIVE_PULSE_init+0x20>)
    19ae:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    19b0:	4b06      	ldr	r3, [pc, #24]	; (19cc <LIVE_PULSE_init+0x24>)
    19b2:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    19b4:	4b06      	ldr	r3, [pc, #24]	; (19d0 <LIVE_PULSE_init+0x28>)
    19b6:	4798      	blx	r3
    19b8:	4603      	mov	r3, r0
    19ba:	461a      	mov	r2, r3
    19bc:	4905      	ldr	r1, [pc, #20]	; (19d4 <LIVE_PULSE_init+0x2c>)
    19be:	4806      	ldr	r0, [pc, #24]	; (19d8 <LIVE_PULSE_init+0x30>)
    19c0:	4b06      	ldr	r3, [pc, #24]	; (19dc <LIVE_PULSE_init+0x34>)
    19c2:	4798      	blx	r3
}
    19c4:	bf00      	nop
    19c6:	bd80      	pop	{r7, pc}
    19c8:	00001981 	.word	0x00001981
    19cc:	00001971 	.word	0x00001971
    19d0:	00007fb9 	.word	0x00007fb9
    19d4:	43001800 	.word	0x43001800
    19d8:	2000a45c 	.word	0x2000a45c
    19dc:	00002589 	.word	0x00002589

000019e0 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    19e0:	b580      	push	{r7, lr}
    19e2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    19e4:	4804      	ldr	r0, [pc, #16]	; (19f8 <TIMER_HVAC_CLOCK_init+0x18>)
    19e6:	4b05      	ldr	r3, [pc, #20]	; (19fc <TIMER_HVAC_CLOCK_init+0x1c>)
    19e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19ea:	2244      	movs	r2, #68	; 0x44
    19ec:	2119      	movs	r1, #25
    19ee:	4804      	ldr	r0, [pc, #16]	; (1a00 <TIMER_HVAC_CLOCK_init+0x20>)
    19f0:	4b04      	ldr	r3, [pc, #16]	; (1a04 <TIMER_HVAC_CLOCK_init+0x24>)
    19f2:	4798      	blx	r3
}
    19f4:	bf00      	nop
    19f6:	bd80      	pop	{r7, pc}
    19f8:	40000800 	.word	0x40000800
    19fc:	00000a27 	.word	0x00000a27
    1a00:	40001c00 	.word	0x40001c00
    1a04:	00000881 	.word	0x00000881

00001a08 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1a08:	b580      	push	{r7, lr}
    1a0a:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1a0c:	4b05      	ldr	r3, [pc, #20]	; (1a24 <TIMER_HVAC_init+0x1c>)
    1a0e:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1a10:	4b05      	ldr	r3, [pc, #20]	; (1a28 <TIMER_HVAC_init+0x20>)
    1a12:	4798      	blx	r3
    1a14:	4603      	mov	r3, r0
    1a16:	461a      	mov	r2, r3
    1a18:	4904      	ldr	r1, [pc, #16]	; (1a2c <TIMER_HVAC_init+0x24>)
    1a1a:	4805      	ldr	r0, [pc, #20]	; (1a30 <TIMER_HVAC_init+0x28>)
    1a1c:	4b05      	ldr	r3, [pc, #20]	; (1a34 <TIMER_HVAC_init+0x2c>)
    1a1e:	4798      	blx	r3
}
    1a20:	bf00      	nop
    1a22:	bd80      	pop	{r7, pc}
    1a24:	000019e1 	.word	0x000019e1
    1a28:	000073a5 	.word	0x000073a5
    1a2c:	41016000 	.word	0x41016000
    1a30:	2000a500 	.word	0x2000a500
    1a34:	00002915 	.word	0x00002915

00001a38 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1a38:	b580      	push	{r7, lr}
    1a3a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1a3c:	4804      	ldr	r0, [pc, #16]	; (1a50 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1a3e:	4b05      	ldr	r3, [pc, #20]	; (1a54 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1a40:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a42:	2244      	movs	r2, #68	; 0x44
    1a44:	2119      	movs	r1, #25
    1a46:	4804      	ldr	r0, [pc, #16]	; (1a58 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1a48:	4b04      	ldr	r3, [pc, #16]	; (1a5c <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1a4a:	4798      	blx	r3
}
    1a4c:	bf00      	nop
    1a4e:	bd80      	pop	{r7, pc}
    1a50:	40000800 	.word	0x40000800
    1a54:	00000a47 	.word	0x00000a47
    1a58:	40001c00 	.word	0x40001c00
    1a5c:	00000881 	.word	0x00000881

00001a60 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1a60:	b580      	push	{r7, lr}
    1a62:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1a64:	4b05      	ldr	r3, [pc, #20]	; (1a7c <TIMER_TEMPERATURES_init+0x1c>)
    1a66:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1a68:	4b05      	ldr	r3, [pc, #20]	; (1a80 <TIMER_TEMPERATURES_init+0x20>)
    1a6a:	4798      	blx	r3
    1a6c:	4603      	mov	r3, r0
    1a6e:	461a      	mov	r2, r3
    1a70:	4904      	ldr	r1, [pc, #16]	; (1a84 <TIMER_TEMPERATURES_init+0x24>)
    1a72:	4805      	ldr	r0, [pc, #20]	; (1a88 <TIMER_TEMPERATURES_init+0x28>)
    1a74:	4b05      	ldr	r3, [pc, #20]	; (1a8c <TIMER_TEMPERATURES_init+0x2c>)
    1a76:	4798      	blx	r3
}
    1a78:	bf00      	nop
    1a7a:	bd80      	pop	{r7, pc}
    1a7c:	00001a39 	.word	0x00001a39
    1a80:	000073a5 	.word	0x000073a5
    1a84:	41018000 	.word	0x41018000
    1a88:	2000a368 	.word	0x2000a368
    1a8c:	00002915 	.word	0x00002915

00001a90 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1a90:	b580      	push	{r7, lr}
    1a92:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1a94:	2102      	movs	r1, #2
    1a96:	2018      	movs	r0, #24
    1a98:	4b0f      	ldr	r3, [pc, #60]	; (1ad8 <CDCUSB_PORT_init+0x48>)
    1a9a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1a9c:	2100      	movs	r1, #0
    1a9e:	2018      	movs	r0, #24
    1aa0:	4b0e      	ldr	r3, [pc, #56]	; (1adc <CDCUSB_PORT_init+0x4c>)
    1aa2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1aa4:	2100      	movs	r1, #0
    1aa6:	2018      	movs	r0, #24
    1aa8:	4b0d      	ldr	r3, [pc, #52]	; (1ae0 <CDCUSB_PORT_init+0x50>)
    1aaa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1aac:	490d      	ldr	r1, [pc, #52]	; (1ae4 <CDCUSB_PORT_init+0x54>)
    1aae:	2018      	movs	r0, #24
    1ab0:	4b0d      	ldr	r3, [pc, #52]	; (1ae8 <CDCUSB_PORT_init+0x58>)
    1ab2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1ab4:	2102      	movs	r1, #2
    1ab6:	2019      	movs	r0, #25
    1ab8:	4b07      	ldr	r3, [pc, #28]	; (1ad8 <CDCUSB_PORT_init+0x48>)
    1aba:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1abc:	2100      	movs	r1, #0
    1abe:	2019      	movs	r0, #25
    1ac0:	4b06      	ldr	r3, [pc, #24]	; (1adc <CDCUSB_PORT_init+0x4c>)
    1ac2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1ac4:	2100      	movs	r1, #0
    1ac6:	2019      	movs	r0, #25
    1ac8:	4b05      	ldr	r3, [pc, #20]	; (1ae0 <CDCUSB_PORT_init+0x50>)
    1aca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1acc:	4907      	ldr	r1, [pc, #28]	; (1aec <CDCUSB_PORT_init+0x5c>)
    1ace:	2019      	movs	r0, #25
    1ad0:	4b05      	ldr	r3, [pc, #20]	; (1ae8 <CDCUSB_PORT_init+0x58>)
    1ad2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1ad4:	bf00      	nop
    1ad6:	bd80      	pop	{r7, pc}
    1ad8:	000010d5 	.word	0x000010d5
    1adc:	0000110d 	.word	0x0000110d
    1ae0:	00001081 	.word	0x00001081
    1ae4:	00180007 	.word	0x00180007
    1ae8:	000010b5 	.word	0x000010b5
    1aec:	00190007 	.word	0x00190007

00001af0 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1af0:	b580      	push	{r7, lr}
    1af2:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1af4:	2242      	movs	r2, #66	; 0x42
    1af6:	210a      	movs	r1, #10
    1af8:	4805      	ldr	r0, [pc, #20]	; (1b10 <CDCUSB_CLOCK_init+0x20>)
    1afa:	4b06      	ldr	r3, [pc, #24]	; (1b14 <CDCUSB_CLOCK_init+0x24>)
    1afc:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1afe:	4806      	ldr	r0, [pc, #24]	; (1b18 <CDCUSB_CLOCK_init+0x28>)
    1b00:	4b06      	ldr	r3, [pc, #24]	; (1b1c <CDCUSB_CLOCK_init+0x2c>)
    1b02:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1b04:	4804      	ldr	r0, [pc, #16]	; (1b18 <CDCUSB_CLOCK_init+0x28>)
    1b06:	4b06      	ldr	r3, [pc, #24]	; (1b20 <CDCUSB_CLOCK_init+0x30>)
    1b08:	4798      	blx	r3
}
    1b0a:	bf00      	nop
    1b0c:	bd80      	pop	{r7, pc}
    1b0e:	bf00      	nop
    1b10:	40001c00 	.word	0x40001c00
    1b14:	00000881 	.word	0x00000881
    1b18:	40000800 	.word	0x40000800
    1b1c:	000008a7 	.word	0x000008a7
    1b20:	000009c7 	.word	0x000009c7

00001b24 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1b24:	b580      	push	{r7, lr}
    1b26:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1b28:	4b03      	ldr	r3, [pc, #12]	; (1b38 <CDCUSB_init+0x14>)
    1b2a:	4798      	blx	r3
	usb_d_init();
    1b2c:	4b03      	ldr	r3, [pc, #12]	; (1b3c <CDCUSB_init+0x18>)
    1b2e:	4798      	blx	r3
	CDCUSB_PORT_init();
    1b30:	4b03      	ldr	r3, [pc, #12]	; (1b40 <CDCUSB_init+0x1c>)
    1b32:	4798      	blx	r3
}
    1b34:	bf00      	nop
    1b36:	bd80      	pop	{r7, pc}
    1b38:	00001af1 	.word	0x00001af1
    1b3c:	00003171 	.word	0x00003171
    1b40:	00001a91 	.word	0x00001a91

00001b44 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1b44:	b580      	push	{r7, lr}
    1b46:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1b48:	4802      	ldr	r0, [pc, #8]	; (1b54 <WATCHDOG_CLOCK_init+0x10>)
    1b4a:	4b03      	ldr	r3, [pc, #12]	; (1b58 <WATCHDOG_CLOCK_init+0x14>)
    1b4c:	4798      	blx	r3
}
    1b4e:	bf00      	nop
    1b50:	bd80      	pop	{r7, pc}
    1b52:	bf00      	nop
    1b54:	40000800 	.word	0x40000800
    1b58:	00000927 	.word	0x00000927

00001b5c <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1b5c:	b580      	push	{r7, lr}
    1b5e:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1b60:	4b03      	ldr	r3, [pc, #12]	; (1b70 <WATCHDOG_init+0x14>)
    1b62:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1b64:	4903      	ldr	r1, [pc, #12]	; (1b74 <WATCHDOG_init+0x18>)
    1b66:	4804      	ldr	r0, [pc, #16]	; (1b78 <WATCHDOG_init+0x1c>)
    1b68:	4b04      	ldr	r3, [pc, #16]	; (1b7c <WATCHDOG_init+0x20>)
    1b6a:	4798      	blx	r3
}
    1b6c:	bf00      	nop
    1b6e:	bd80      	pop	{r7, pc}
    1b70:	00001b45 	.word	0x00001b45
    1b74:	40002000 	.word	0x40002000
    1b78:	2000a540 	.word	0x2000a540
    1b7c:	00001155 	.word	0x00001155

00001b80 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1b80:	b580      	push	{r7, lr}
    1b82:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1b84:	4904      	ldr	r1, [pc, #16]	; (1b98 <CAN_CCU_PORT_init+0x18>)
    1b86:	202d      	movs	r0, #45	; 0x2d
    1b88:	4b04      	ldr	r3, [pc, #16]	; (1b9c <CAN_CCU_PORT_init+0x1c>)
    1b8a:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1b8c:	4904      	ldr	r1, [pc, #16]	; (1ba0 <CAN_CCU_PORT_init+0x20>)
    1b8e:	202c      	movs	r0, #44	; 0x2c
    1b90:	4b02      	ldr	r3, [pc, #8]	; (1b9c <CAN_CCU_PORT_init+0x1c>)
    1b92:	4798      	blx	r3
}
    1b94:	bf00      	nop
    1b96:	bd80      	pop	{r7, pc}
    1b98:	002d0007 	.word	0x002d0007
    1b9c:	000010b5 	.word	0x000010b5
    1ba0:	002c0007 	.word	0x002c0007

00001ba4 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1ba4:	b580      	push	{r7, lr}
    1ba6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1ba8:	4807      	ldr	r0, [pc, #28]	; (1bc8 <CAN_CCU_init+0x24>)
    1baa:	4b08      	ldr	r3, [pc, #32]	; (1bcc <CAN_CCU_init+0x28>)
    1bac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bae:	2243      	movs	r2, #67	; 0x43
    1bb0:	211c      	movs	r1, #28
    1bb2:	4807      	ldr	r0, [pc, #28]	; (1bd0 <CAN_CCU_init+0x2c>)
    1bb4:	4b07      	ldr	r3, [pc, #28]	; (1bd4 <CAN_CCU_init+0x30>)
    1bb6:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1bb8:	4907      	ldr	r1, [pc, #28]	; (1bd8 <CAN_CCU_init+0x34>)
    1bba:	4808      	ldr	r0, [pc, #32]	; (1bdc <CAN_CCU_init+0x38>)
    1bbc:	4b08      	ldr	r3, [pc, #32]	; (1be0 <CAN_CCU_init+0x3c>)
    1bbe:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1bc0:	4b08      	ldr	r3, [pc, #32]	; (1be4 <CAN_CCU_init+0x40>)
    1bc2:	4798      	blx	r3
}
    1bc4:	bf00      	nop
    1bc6:	bd80      	pop	{r7, pc}
    1bc8:	40000800 	.word	0x40000800
    1bcc:	000008e7 	.word	0x000008e7
    1bd0:	40001c00 	.word	0x40001c00
    1bd4:	00000881 	.word	0x00000881
    1bd8:	42000400 	.word	0x42000400
    1bdc:	2000a498 	.word	0x2000a498
    1be0:	000020ad 	.word	0x000020ad
    1be4:	00001b81 	.word	0x00001b81

00001be8 <system_init>:

void system_init(void)
{
    1be8:	b580      	push	{r7, lr}
    1bea:	af00      	add	r7, sp, #0
	init_mcu();
    1bec:	4b5e      	ldr	r3, [pc, #376]	; (1d68 <system_init+0x180>)
    1bee:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1bf0:	2100      	movs	r1, #0
    1bf2:	2007      	movs	r0, #7
    1bf4:	4b5d      	ldr	r3, [pc, #372]	; (1d6c <system_init+0x184>)
    1bf6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1bf8:	2102      	movs	r1, #2
    1bfa:	2007      	movs	r0, #7
    1bfc:	4b5c      	ldr	r3, [pc, #368]	; (1d70 <system_init+0x188>)
    1bfe:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1c00:	f04f 31ff 	mov.w	r1, #4294967295
    1c04:	2007      	movs	r0, #7
    1c06:	4b5b      	ldr	r3, [pc, #364]	; (1d74 <system_init+0x18c>)
    1c08:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1c0a:	2101      	movs	r1, #1
    1c0c:	200f      	movs	r0, #15
    1c0e:	4b57      	ldr	r3, [pc, #348]	; (1d6c <system_init+0x184>)
    1c10:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1c12:	2102      	movs	r1, #2
    1c14:	200f      	movs	r0, #15
    1c16:	4b56      	ldr	r3, [pc, #344]	; (1d70 <system_init+0x188>)
    1c18:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1c1a:	f04f 31ff 	mov.w	r1, #4294967295
    1c1e:	200f      	movs	r0, #15
    1c20:	4b54      	ldr	r3, [pc, #336]	; (1d74 <system_init+0x18c>)
    1c22:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1c24:	2101      	movs	r1, #1
    1c26:	2013      	movs	r0, #19
    1c28:	4b50      	ldr	r3, [pc, #320]	; (1d6c <system_init+0x184>)
    1c2a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1c2c:	2102      	movs	r1, #2
    1c2e:	2013      	movs	r0, #19
    1c30:	4b4f      	ldr	r3, [pc, #316]	; (1d70 <system_init+0x188>)
    1c32:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1c34:	f04f 31ff 	mov.w	r1, #4294967295
    1c38:	2013      	movs	r0, #19
    1c3a:	4b4e      	ldr	r3, [pc, #312]	; (1d74 <system_init+0x18c>)
    1c3c:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1c3e:	2101      	movs	r1, #1
    1c40:	201b      	movs	r0, #27
    1c42:	4b4a      	ldr	r3, [pc, #296]	; (1d6c <system_init+0x184>)
    1c44:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1c46:	2102      	movs	r1, #2
    1c48:	201b      	movs	r0, #27
    1c4a:	4b49      	ldr	r3, [pc, #292]	; (1d70 <system_init+0x188>)
    1c4c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1c4e:	f04f 31ff 	mov.w	r1, #4294967295
    1c52:	201b      	movs	r0, #27
    1c54:	4b47      	ldr	r3, [pc, #284]	; (1d74 <system_init+0x18c>)
    1c56:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1c58:	2101      	movs	r1, #1
    1c5a:	2027      	movs	r0, #39	; 0x27
    1c5c:	4b43      	ldr	r3, [pc, #268]	; (1d6c <system_init+0x184>)
    1c5e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1c60:	2102      	movs	r1, #2
    1c62:	2027      	movs	r0, #39	; 0x27
    1c64:	4b42      	ldr	r3, [pc, #264]	; (1d70 <system_init+0x188>)
    1c66:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1c68:	f04f 31ff 	mov.w	r1, #4294967295
    1c6c:	2027      	movs	r0, #39	; 0x27
    1c6e:	4b41      	ldr	r3, [pc, #260]	; (1d74 <system_init+0x18c>)
    1c70:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1c72:	2101      	movs	r1, #1
    1c74:	203d      	movs	r0, #61	; 0x3d
    1c76:	4b3d      	ldr	r3, [pc, #244]	; (1d6c <system_init+0x184>)
    1c78:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1c7a:	2102      	movs	r1, #2
    1c7c:	203d      	movs	r0, #61	; 0x3d
    1c7e:	4b3c      	ldr	r3, [pc, #240]	; (1d70 <system_init+0x188>)
    1c80:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1c82:	f04f 31ff 	mov.w	r1, #4294967295
    1c86:	203d      	movs	r0, #61	; 0x3d
    1c88:	4b3a      	ldr	r3, [pc, #232]	; (1d74 <system_init+0x18c>)
    1c8a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1c8c:	2101      	movs	r1, #1
    1c8e:	203f      	movs	r0, #63	; 0x3f
    1c90:	4b37      	ldr	r3, [pc, #220]	; (1d70 <system_init+0x188>)
    1c92:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1c94:	2101      	movs	r1, #1
    1c96:	203f      	movs	r0, #63	; 0x3f
    1c98:	4b37      	ldr	r3, [pc, #220]	; (1d78 <system_init+0x190>)
    1c9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1c9c:	f04f 31ff 	mov.w	r1, #4294967295
    1ca0:	203f      	movs	r0, #63	; 0x3f
    1ca2:	4b34      	ldr	r3, [pc, #208]	; (1d74 <system_init+0x18c>)
    1ca4:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1ca6:	2100      	movs	r1, #0
    1ca8:	204d      	movs	r0, #77	; 0x4d
    1caa:	4b30      	ldr	r3, [pc, #192]	; (1d6c <system_init+0x184>)
    1cac:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1cae:	2102      	movs	r1, #2
    1cb0:	204d      	movs	r0, #77	; 0x4d
    1cb2:	4b2f      	ldr	r3, [pc, #188]	; (1d70 <system_init+0x188>)
    1cb4:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1cb6:	f04f 31ff 	mov.w	r1, #4294967295
    1cba:	204d      	movs	r0, #77	; 0x4d
    1cbc:	4b2d      	ldr	r3, [pc, #180]	; (1d74 <system_init+0x18c>)
    1cbe:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1cc0:	2101      	movs	r1, #1
    1cc2:	204e      	movs	r0, #78	; 0x4e
    1cc4:	4b29      	ldr	r3, [pc, #164]	; (1d6c <system_init+0x184>)
    1cc6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1cc8:	2102      	movs	r1, #2
    1cca:	204e      	movs	r0, #78	; 0x4e
    1ccc:	4b28      	ldr	r3, [pc, #160]	; (1d70 <system_init+0x188>)
    1cce:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1cd0:	f04f 31ff 	mov.w	r1, #4294967295
    1cd4:	204e      	movs	r0, #78	; 0x4e
    1cd6:	4b27      	ldr	r3, [pc, #156]	; (1d74 <system_init+0x18c>)
    1cd8:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1cda:	2100      	movs	r1, #0
    1cdc:	204f      	movs	r0, #79	; 0x4f
    1cde:	4b23      	ldr	r3, [pc, #140]	; (1d6c <system_init+0x184>)
    1ce0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1ce2:	2102      	movs	r1, #2
    1ce4:	204f      	movs	r0, #79	; 0x4f
    1ce6:	4b22      	ldr	r3, [pc, #136]	; (1d70 <system_init+0x188>)
    1ce8:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1cea:	f04f 31ff 	mov.w	r1, #4294967295
    1cee:	204f      	movs	r0, #79	; 0x4f
    1cf0:	4b20      	ldr	r3, [pc, #128]	; (1d74 <system_init+0x18c>)
    1cf2:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1cf4:	2100      	movs	r1, #0
    1cf6:	2052      	movs	r0, #82	; 0x52
    1cf8:	4b1c      	ldr	r3, [pc, #112]	; (1d6c <system_init+0x184>)
    1cfa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1cfc:	2102      	movs	r1, #2
    1cfe:	2052      	movs	r0, #82	; 0x52
    1d00:	4b1b      	ldr	r3, [pc, #108]	; (1d70 <system_init+0x188>)
    1d02:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1d04:	f04f 31ff 	mov.w	r1, #4294967295
    1d08:	2052      	movs	r0, #82	; 0x52
    1d0a:	4b1a      	ldr	r3, [pc, #104]	; (1d74 <system_init+0x18c>)
    1d0c:	4798      	blx	r3

	CRC_CALC_init();
    1d0e:	4b1b      	ldr	r3, [pc, #108]	; (1d7c <system_init+0x194>)
    1d10:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1d12:	4b1b      	ldr	r3, [pc, #108]	; (1d80 <system_init+0x198>)
    1d14:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1d16:	4b1b      	ldr	r3, [pc, #108]	; (1d84 <system_init+0x19c>)
    1d18:	4798      	blx	r3

	QSPI_N25Q256_init();
    1d1a:	4b1b      	ldr	r3, [pc, #108]	; (1d88 <system_init+0x1a0>)
    1d1c:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1d1e:	4b1b      	ldr	r3, [pc, #108]	; (1d8c <system_init+0x1a4>)
    1d20:	4798      	blx	r3

	I2C_HEATERS_init();
    1d22:	4b1b      	ldr	r3, [pc, #108]	; (1d90 <system_init+0x1a8>)
    1d24:	4798      	blx	r3

	SPI_TEMP_init();
    1d26:	4b1b      	ldr	r3, [pc, #108]	; (1d94 <system_init+0x1ac>)
    1d28:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1d2a:	4b1b      	ldr	r3, [pc, #108]	; (1d98 <system_init+0x1b0>)
    1d2c:	4798      	blx	r3

	SPI_HI3593_init();
    1d2e:	4b1b      	ldr	r3, [pc, #108]	; (1d9c <system_init+0x1b4>)
    1d30:	4798      	blx	r3

	I2C_FANS_init();
    1d32:	4b1b      	ldr	r3, [pc, #108]	; (1da0 <system_init+0x1b8>)
    1d34:	4798      	blx	r3

	TIMER_USB_init();
    1d36:	4b1b      	ldr	r3, [pc, #108]	; (1da4 <system_init+0x1bc>)
    1d38:	4798      	blx	r3
	TIMER_ARINC_init();
    1d3a:	4b1b      	ldr	r3, [pc, #108]	; (1da8 <system_init+0x1c0>)
    1d3c:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1d3e:	4b1b      	ldr	r3, [pc, #108]	; (1dac <system_init+0x1c4>)
    1d40:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1d42:	4b1b      	ldr	r3, [pc, #108]	; (1db0 <system_init+0x1c8>)
    1d44:	4798      	blx	r3
	TIMER_EVENT_init();
    1d46:	4b1b      	ldr	r3, [pc, #108]	; (1db4 <system_init+0x1cc>)
    1d48:	4798      	blx	r3
	LIVE_PULSE_init();
    1d4a:	4b1b      	ldr	r3, [pc, #108]	; (1db8 <system_init+0x1d0>)
    1d4c:	4798      	blx	r3

	TIMER_HVAC_init();
    1d4e:	4b1b      	ldr	r3, [pc, #108]	; (1dbc <system_init+0x1d4>)
    1d50:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1d52:	4b1b      	ldr	r3, [pc, #108]	; (1dc0 <system_init+0x1d8>)
    1d54:	4798      	blx	r3

	CDCUSB_init();
    1d56:	4b1b      	ldr	r3, [pc, #108]	; (1dc4 <system_init+0x1dc>)
    1d58:	4798      	blx	r3

	WATCHDOG_init();
    1d5a:	4b1b      	ldr	r3, [pc, #108]	; (1dc8 <system_init+0x1e0>)
    1d5c:	4798      	blx	r3
	CAN_CCU_init();
    1d5e:	4b1b      	ldr	r3, [pc, #108]	; (1dcc <system_init+0x1e4>)
    1d60:	4798      	blx	r3
}
    1d62:	bf00      	nop
    1d64:	bd80      	pop	{r7, pc}
    1d66:	bf00      	nop
    1d68:	00001145 	.word	0x00001145
    1d6c:	0000110d 	.word	0x0000110d
    1d70:	000010d5 	.word	0x000010d5
    1d74:	000010b5 	.word	0x000010b5
    1d78:	00001081 	.word	0x00001081
    1d7c:	000011a5 	.word	0x000011a5
    1d80:	000011d1 	.word	0x000011d1
    1d84:	000012f9 	.word	0x000012f9
    1d88:	00001441 	.word	0x00001441
    1d8c:	00001485 	.word	0x00001485
    1d90:	00001515 	.word	0x00001515
    1d94:	000015e1 	.word	0x000015e1
    1d98:	00001679 	.word	0x00001679
    1d9c:	00001745 	.word	0x00001745
    1da0:	000017dd 	.word	0x000017dd
    1da4:	00001809 	.word	0x00001809
    1da8:	00001851 	.word	0x00001851
    1dac:	00001899 	.word	0x00001899
    1db0:	000018e1 	.word	0x000018e1
    1db4:	00001929 	.word	0x00001929
    1db8:	000019a9 	.word	0x000019a9
    1dbc:	00001a09 	.word	0x00001a09
    1dc0:	00001a61 	.word	0x00001a61
    1dc4:	00001b25 	.word	0x00001b25
    1dc8:	00001b5d 	.word	0x00001b5d
    1dcc:	00001ba5 	.word	0x00001ba5

00001dd0 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    1dd0:	b480      	push	{r7}
    1dd2:	b083      	sub	sp, #12
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	4603      	mov	r3, r0
    1dd8:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    1dda:	88fb      	ldrh	r3, [r7, #6]
    1ddc:	f003 0303 	and.w	r3, r3, #3
    1de0:	2b00      	cmp	r3, #0
    1de2:	d001      	beq.n	1de8 <leap_year+0x18>
		return false;
    1de4:	2300      	movs	r3, #0
    1de6:	e000      	b.n	1dea <leap_year+0x1a>
	} else {
		return true;
    1de8:	2301      	movs	r3, #1
	}
}
    1dea:	4618      	mov	r0, r3
    1dec:	370c      	adds	r7, #12
    1dee:	46bd      	mov	sp, r7
    1df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1df4:	4770      	bx	lr
	...

00001df8 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    1df8:	b580      	push	{r7, lr}
    1dfa:	b084      	sub	sp, #16
    1dfc:	af00      	add	r7, sp, #0
    1dfe:	6078      	str	r0, [r7, #4]
    1e00:	460b      	mov	r3, r1
    1e02:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    1e04:	2300      	movs	r3, #0
    1e06:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	b29b      	uxth	r3, r3
    1e0c:	4618      	mov	r0, r3
    1e0e:	4b2f      	ldr	r3, [pc, #188]	; (1ecc <get_secs_in_month+0xd4>)
    1e10:	4798      	blx	r3
    1e12:	4603      	mov	r3, r0
    1e14:	2b00      	cmp	r3, #0
    1e16:	d028      	beq.n	1e6a <get_secs_in_month+0x72>
		switch (month) {
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	3b01      	subs	r3, #1
    1e1c:	2b0b      	cmp	r3, #11
    1e1e:	d84c      	bhi.n	1eba <get_secs_in_month+0xc2>
    1e20:	a201      	add	r2, pc, #4	; (adr r2, 1e28 <get_secs_in_month+0x30>)
    1e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1e26:	bf00      	nop
    1e28:	00001e59 	.word	0x00001e59
    1e2c:	00001e5f 	.word	0x00001e5f
    1e30:	00001e59 	.word	0x00001e59
    1e34:	00001e65 	.word	0x00001e65
    1e38:	00001e59 	.word	0x00001e59
    1e3c:	00001e65 	.word	0x00001e65
    1e40:	00001e59 	.word	0x00001e59
    1e44:	00001e59 	.word	0x00001e59
    1e48:	00001e65 	.word	0x00001e65
    1e4c:	00001e59 	.word	0x00001e59
    1e50:	00001e65 	.word	0x00001e65
    1e54:	00001e59 	.word	0x00001e59
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    1e58:	4b1d      	ldr	r3, [pc, #116]	; (1ed0 <get_secs_in_month+0xd8>)
    1e5a:	60fb      	str	r3, [r7, #12]
			break;
    1e5c:	e030      	b.n	1ec0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    1e5e:	4b1d      	ldr	r3, [pc, #116]	; (1ed4 <get_secs_in_month+0xdc>)
    1e60:	60fb      	str	r3, [r7, #12]
			break;
    1e62:	e02d      	b.n	1ec0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    1e64:	4b1c      	ldr	r3, [pc, #112]	; (1ed8 <get_secs_in_month+0xe0>)
    1e66:	60fb      	str	r3, [r7, #12]
			break;
    1e68:	e02a      	b.n	1ec0 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    1e6a:	78fb      	ldrb	r3, [r7, #3]
    1e6c:	3b01      	subs	r3, #1
    1e6e:	2b0b      	cmp	r3, #11
    1e70:	d825      	bhi.n	1ebe <get_secs_in_month+0xc6>
    1e72:	a201      	add	r2, pc, #4	; (adr r2, 1e78 <get_secs_in_month+0x80>)
    1e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1e78:	00001ea9 	.word	0x00001ea9
    1e7c:	00001eaf 	.word	0x00001eaf
    1e80:	00001ea9 	.word	0x00001ea9
    1e84:	00001eb5 	.word	0x00001eb5
    1e88:	00001ea9 	.word	0x00001ea9
    1e8c:	00001eb5 	.word	0x00001eb5
    1e90:	00001ea9 	.word	0x00001ea9
    1e94:	00001ea9 	.word	0x00001ea9
    1e98:	00001eb5 	.word	0x00001eb5
    1e9c:	00001ea9 	.word	0x00001ea9
    1ea0:	00001eb5 	.word	0x00001eb5
    1ea4:	00001ea9 	.word	0x00001ea9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    1ea8:	4b09      	ldr	r3, [pc, #36]	; (1ed0 <get_secs_in_month+0xd8>)
    1eaa:	60fb      	str	r3, [r7, #12]
			break;
    1eac:	e008      	b.n	1ec0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    1eae:	4b0b      	ldr	r3, [pc, #44]	; (1edc <get_secs_in_month+0xe4>)
    1eb0:	60fb      	str	r3, [r7, #12]
			break;
    1eb2:	e005      	b.n	1ec0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    1eb4:	4b08      	ldr	r3, [pc, #32]	; (1ed8 <get_secs_in_month+0xe0>)
    1eb6:	60fb      	str	r3, [r7, #12]
			break;
    1eb8:	e002      	b.n	1ec0 <get_secs_in_month+0xc8>
			break;
    1eba:	bf00      	nop
    1ebc:	e000      	b.n	1ec0 <get_secs_in_month+0xc8>
		default:
			break;
    1ebe:	bf00      	nop
		}
	}

	return sec_in_month;
    1ec0:	68fb      	ldr	r3, [r7, #12]
}
    1ec2:	4618      	mov	r0, r3
    1ec4:	3710      	adds	r7, #16
    1ec6:	46bd      	mov	sp, r7
    1ec8:	bd80      	pop	{r7, pc}
    1eca:	bf00      	nop
    1ecc:	00001dd1 	.word	0x00001dd1
    1ed0:	0028de80 	.word	0x0028de80
    1ed4:	00263b80 	.word	0x00263b80
    1ed8:	00278d00 	.word	0x00278d00
    1edc:	0024ea00 	.word	0x0024ea00

00001ee0 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b08a      	sub	sp, #40	; 0x28
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	60f8      	str	r0, [r7, #12]
    1ee8:	60b9      	str	r1, [r7, #8]
    1eea:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    1eec:	68fb      	ldr	r3, [r7, #12]
    1eee:	699b      	ldr	r3, [r3, #24]
    1ef0:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    1ef2:	2301      	movs	r3, #1
    1ef4:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    1ef6:	2301      	movs	r3, #1
    1ef8:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    1efa:	2300      	movs	r3, #0
    1efc:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    1efe:	2300      	movs	r3, #0
    1f00:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    1f02:	68bb      	ldr	r3, [r7, #8]
    1f04:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    1f06:	6a3b      	ldr	r3, [r7, #32]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	4618      	mov	r0, r3
    1f0c:	4b32      	ldr	r3, [pc, #200]	; (1fd8 <convert_timestamp_to_datetime+0xf8>)
    1f0e:	4798      	blx	r3
    1f10:	4603      	mov	r3, r0
    1f12:	2b00      	cmp	r3, #0
    1f14:	d001      	beq.n	1f1a <convert_timestamp_to_datetime+0x3a>
    1f16:	4b31      	ldr	r3, [pc, #196]	; (1fdc <convert_timestamp_to_datetime+0xfc>)
    1f18:	e000      	b.n	1f1c <convert_timestamp_to_datetime+0x3c>
    1f1a:	4b31      	ldr	r3, [pc, #196]	; (1fe0 <convert_timestamp_to_datetime+0x100>)
    1f1c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    1f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1f20:	69bb      	ldr	r3, [r7, #24]
    1f22:	429a      	cmp	r2, r3
    1f24:	d307      	bcc.n	1f36 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    1f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1f28:	69bb      	ldr	r3, [r7, #24]
    1f2a:	1ad3      	subs	r3, r2, r3
    1f2c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    1f2e:	6a3b      	ldr	r3, [r7, #32]
    1f30:	3301      	adds	r3, #1
    1f32:	623b      	str	r3, [r7, #32]
    1f34:	e7e7      	b.n	1f06 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    1f36:	7ffb      	ldrb	r3, [r7, #31]
    1f38:	4619      	mov	r1, r3
    1f3a:	6a38      	ldr	r0, [r7, #32]
    1f3c:	4b29      	ldr	r3, [pc, #164]	; (1fe4 <convert_timestamp_to_datetime+0x104>)
    1f3e:	4798      	blx	r3
    1f40:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    1f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1f44:	697b      	ldr	r3, [r7, #20]
    1f46:	429a      	cmp	r2, r3
    1f48:	d307      	bcc.n	1f5a <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    1f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1f4c:	697b      	ldr	r3, [r7, #20]
    1f4e:	1ad3      	subs	r3, r2, r3
    1f50:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    1f52:	7ffb      	ldrb	r3, [r7, #31]
    1f54:	3301      	adds	r3, #1
    1f56:	77fb      	strb	r3, [r7, #31]
    1f58:	e7ed      	b.n	1f36 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    1f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f5c:	4a22      	ldr	r2, [pc, #136]	; (1fe8 <convert_timestamp_to_datetime+0x108>)
    1f5e:	4293      	cmp	r3, r2
    1f60:	d909      	bls.n	1f76 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    1f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f64:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    1f68:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    1f6c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    1f6e:	7fbb      	ldrb	r3, [r7, #30]
    1f70:	3301      	adds	r3, #1
    1f72:	77bb      	strb	r3, [r7, #30]
    1f74:	e7f1      	b.n	1f5a <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    1f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f78:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    1f7c:	d307      	bcc.n	1f8e <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    1f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f80:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    1f84:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    1f86:	7f7b      	ldrb	r3, [r7, #29]
    1f88:	3301      	adds	r3, #1
    1f8a:	777b      	strb	r3, [r7, #29]
    1f8c:	e7f3      	b.n	1f76 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    1f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f90:	2b3b      	cmp	r3, #59	; 0x3b
    1f92:	d906      	bls.n	1fa2 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    1f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f96:	3b3c      	subs	r3, #60	; 0x3c
    1f98:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    1f9a:	7f3b      	ldrb	r3, [r7, #28]
    1f9c:	3301      	adds	r3, #1
    1f9e:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    1fa0:	e7f5      	b.n	1f8e <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    1fa2:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    1fa4:	6a3b      	ldr	r3, [r7, #32]
    1fa6:	b29a      	uxth	r2, r3
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    1fac:	687b      	ldr	r3, [r7, #4]
    1fae:	7ffa      	ldrb	r2, [r7, #31]
    1fb0:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    1fb2:	687b      	ldr	r3, [r7, #4]
    1fb4:	7fba      	ldrb	r2, [r7, #30]
    1fb6:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	7f7a      	ldrb	r2, [r7, #29]
    1fbc:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	7f3a      	ldrb	r2, [r7, #28]
    1fc2:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    1fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1fc6:	b2da      	uxtb	r2, r3
    1fc8:	687b      	ldr	r3, [r7, #4]
    1fca:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    1fcc:	2300      	movs	r3, #0
}
    1fce:	4618      	mov	r0, r3
    1fd0:	3728      	adds	r7, #40	; 0x28
    1fd2:	46bd      	mov	sp, r7
    1fd4:	bd80      	pop	{r7, pc}
    1fd6:	bf00      	nop
    1fd8:	00001dd1 	.word	0x00001dd1
    1fdc:	01e28500 	.word	0x01e28500
    1fe0:	01e13380 	.word	0x01e13380
    1fe4:	00001df9 	.word	0x00001df9
    1fe8:	0001517f 	.word	0x0001517f

00001fec <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	6078      	str	r0, [r7, #4]
    1ff4:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1ff6:	2300      	movs	r3, #0
    1ff8:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1ffa:	687b      	ldr	r3, [r7, #4]
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	bf14      	ite	ne
    2000:	2301      	movne	r3, #1
    2002:	2300      	moveq	r3, #0
    2004:	b2db      	uxtb	r3, r3
    2006:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    200a:	4911      	ldr	r1, [pc, #68]	; (2050 <calendar_init+0x64>)
    200c:	4618      	mov	r0, r3
    200e:	4b11      	ldr	r3, [pc, #68]	; (2054 <calendar_init+0x68>)
    2010:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    2012:	687b      	ldr	r3, [r7, #4]
    2014:	681a      	ldr	r2, [r3, #0]
    2016:	683b      	ldr	r3, [r7, #0]
    2018:	429a      	cmp	r2, r3
    201a:	d101      	bne.n	2020 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    201c:	2300      	movs	r3, #0
    201e:	e013      	b.n	2048 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2020:	687b      	ldr	r3, [r7, #4]
    2022:	681b      	ldr	r3, [r3, #0]
    2024:	2b00      	cmp	r3, #0
    2026:	d002      	beq.n	202e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2028:	f06f 0311 	mvn.w	r3, #17
    202c:	e00c      	b.n	2048 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    202e:	687b      	ldr	r3, [r7, #4]
    2030:	683a      	ldr	r2, [r7, #0]
    2032:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2034:	687b      	ldr	r3, [r7, #4]
    2036:	4618      	mov	r0, r3
    2038:	4b07      	ldr	r3, [pc, #28]	; (2058 <calendar_init+0x6c>)
    203a:	4798      	blx	r3
    203c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    203e:	687b      	ldr	r3, [r7, #4]
    2040:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2044:	619a      	str	r2, [r3, #24]

	return ret;
    2046:	68fb      	ldr	r3, [r7, #12]
}
    2048:	4618      	mov	r0, r3
    204a:	3710      	adds	r7, #16
    204c:	46bd      	mov	sp, r7
    204e:	bd80      	pop	{r7, pc}
    2050:	0000f3ec 	.word	0x0000f3ec
    2054:	00003719 	.word	0x00003719
    2058:	00005ae1 	.word	0x00005ae1

0000205c <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    205c:	b580      	push	{r7, lr}
    205e:	b084      	sub	sp, #16
    2060:	af00      	add	r7, sp, #0
    2062:	6078      	str	r0, [r7, #4]
    2064:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	2b00      	cmp	r3, #0
    206a:	bf14      	ite	ne
    206c:	2301      	movne	r3, #1
    206e:	2300      	moveq	r3, #0
    2070:	b2db      	uxtb	r3, r3
    2072:	f240 223b 	movw	r2, #571	; 0x23b
    2076:	4909      	ldr	r1, [pc, #36]	; (209c <calendar_get_date_time+0x40>)
    2078:	4618      	mov	r0, r3
    207a:	4b09      	ldr	r3, [pc, #36]	; (20a0 <calendar_get_date_time+0x44>)
    207c:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	4618      	mov	r0, r3
    2082:	4b08      	ldr	r3, [pc, #32]	; (20a4 <calendar_get_date_time+0x48>)
    2084:	4798      	blx	r3
    2086:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    2088:	683a      	ldr	r2, [r7, #0]
    208a:	68f9      	ldr	r1, [r7, #12]
    208c:	6878      	ldr	r0, [r7, #4]
    208e:	4b06      	ldr	r3, [pc, #24]	; (20a8 <calendar_get_date_time+0x4c>)
    2090:	4798      	blx	r3

	return ERR_NONE;
    2092:	2300      	movs	r3, #0
}
    2094:	4618      	mov	r0, r3
    2096:	3710      	adds	r7, #16
    2098:	46bd      	mov	sp, r7
    209a:	bd80      	pop	{r7, pc}
    209c:	0000f3ec 	.word	0x0000f3ec
    20a0:	00003719 	.word	0x00003719
    20a4:	00005b99 	.word	0x00005b99
    20a8:	00001ee1 	.word	0x00001ee1

000020ac <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    20ac:	b580      	push	{r7, lr}
    20ae:	b084      	sub	sp, #16
    20b0:	af00      	add	r7, sp, #0
    20b2:	6078      	str	r0, [r7, #4]
    20b4:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    20b6:	687b      	ldr	r3, [r7, #4]
    20b8:	2b00      	cmp	r3, #0
    20ba:	d004      	beq.n	20c6 <can_async_init+0x1a>
    20bc:	683b      	ldr	r3, [r7, #0]
    20be:	2b00      	cmp	r3, #0
    20c0:	d001      	beq.n	20c6 <can_async_init+0x1a>
    20c2:	2301      	movs	r3, #1
    20c4:	e000      	b.n	20c8 <can_async_init+0x1c>
    20c6:	2300      	movs	r3, #0
    20c8:	f003 0301 	and.w	r3, r3, #1
    20cc:	b2db      	uxtb	r3, r3
    20ce:	2241      	movs	r2, #65	; 0x41
    20d0:	490e      	ldr	r1, [pc, #56]	; (210c <can_async_init+0x60>)
    20d2:	4618      	mov	r0, r3
    20d4:	4b0e      	ldr	r3, [pc, #56]	; (2110 <can_async_init+0x64>)
    20d6:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	6839      	ldr	r1, [r7, #0]
    20dc:	4618      	mov	r0, r3
    20de:	4b0d      	ldr	r3, [pc, #52]	; (2114 <can_async_init+0x68>)
    20e0:	4798      	blx	r3
    20e2:	60f8      	str	r0, [r7, #12]
	if (rc) {
    20e4:	68fb      	ldr	r3, [r7, #12]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d001      	beq.n	20ee <can_async_init+0x42>
		return rc;
    20ea:	68fb      	ldr	r3, [r7, #12]
    20ec:	e009      	b.n	2102 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	4a09      	ldr	r2, [pc, #36]	; (2118 <can_async_init+0x6c>)
    20f2:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    20f4:	687b      	ldr	r3, [r7, #4]
    20f6:	4a09      	ldr	r2, [pc, #36]	; (211c <can_async_init+0x70>)
    20f8:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	4a08      	ldr	r2, [pc, #32]	; (2120 <can_async_init+0x74>)
    20fe:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2100:	2300      	movs	r3, #0
}
    2102:	4618      	mov	r0, r3
    2104:	3710      	adds	r7, #16
    2106:	46bd      	mov	sp, r7
    2108:	bd80      	pop	{r7, pc}
    210a:	bf00      	nop
    210c:	0000f408 	.word	0x0000f408
    2110:	00003719 	.word	0x00003719
    2114:	00003c75 	.word	0x00003c75
    2118:	00002125 	.word	0x00002125
    211c:	00002149 	.word	0x00002149
    2120:	0000216d 	.word	0x0000216d

00002124 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2124:	b580      	push	{r7, lr}
    2126:	b084      	sub	sp, #16
    2128:	af00      	add	r7, sp, #0
    212a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    212c:	687b      	ldr	r3, [r7, #4]
    212e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2130:	68fb      	ldr	r3, [r7, #12]
    2132:	69db      	ldr	r3, [r3, #28]
    2134:	2b00      	cmp	r3, #0
    2136:	d003      	beq.n	2140 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2138:	68fb      	ldr	r3, [r7, #12]
    213a:	69db      	ldr	r3, [r3, #28]
    213c:	68f8      	ldr	r0, [r7, #12]
    213e:	4798      	blx	r3
	}
}
    2140:	bf00      	nop
    2142:	3710      	adds	r7, #16
    2144:	46bd      	mov	sp, r7
    2146:	bd80      	pop	{r7, pc}

00002148 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2148:	b580      	push	{r7, lr}
    214a:	b084      	sub	sp, #16
    214c:	af00      	add	r7, sp, #0
    214e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2150:	687b      	ldr	r3, [r7, #4]
    2152:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2154:	68fb      	ldr	r3, [r7, #12]
    2156:	6a1b      	ldr	r3, [r3, #32]
    2158:	2b00      	cmp	r3, #0
    215a:	d003      	beq.n	2164 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    215c:	68fb      	ldr	r3, [r7, #12]
    215e:	6a1b      	ldr	r3, [r3, #32]
    2160:	68f8      	ldr	r0, [r7, #12]
    2162:	4798      	blx	r3
	}
}
    2164:	bf00      	nop
    2166:	3710      	adds	r7, #16
    2168:	46bd      	mov	sp, r7
    216a:	bd80      	pop	{r7, pc}

0000216c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    216c:	b580      	push	{r7, lr}
    216e:	b084      	sub	sp, #16
    2170:	af00      	add	r7, sp, #0
    2172:	6078      	str	r0, [r7, #4]
    2174:	460b      	mov	r3, r1
    2176:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2178:	687b      	ldr	r3, [r7, #4]
    217a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    217c:	68fb      	ldr	r3, [r7, #12]
    217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2180:	2b00      	cmp	r3, #0
    2182:	d005      	beq.n	2190 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2184:	68fb      	ldr	r3, [r7, #12]
    2186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2188:	78fa      	ldrb	r2, [r7, #3]
    218a:	4611      	mov	r1, r2
    218c:	68f8      	ldr	r0, [r7, #12]
    218e:	4798      	blx	r3
	}
}
    2190:	bf00      	nop
    2192:	3710      	adds	r7, #16
    2194:	46bd      	mov	sp, r7
    2196:	bd80      	pop	{r7, pc}

00002198 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2198:	b580      	push	{r7, lr}
    219a:	b082      	sub	sp, #8
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
    21a0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d004      	beq.n	21b2 <crc_sync_init+0x1a>
    21a8:	683b      	ldr	r3, [r7, #0]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d001      	beq.n	21b2 <crc_sync_init+0x1a>
    21ae:	2301      	movs	r3, #1
    21b0:	e000      	b.n	21b4 <crc_sync_init+0x1c>
    21b2:	2300      	movs	r3, #0
    21b4:	f003 0301 	and.w	r3, r3, #1
    21b8:	b2db      	uxtb	r3, r3
    21ba:	222b      	movs	r2, #43	; 0x2b
    21bc:	4906      	ldr	r1, [pc, #24]	; (21d8 <crc_sync_init+0x40>)
    21be:	4618      	mov	r0, r3
    21c0:	4b06      	ldr	r3, [pc, #24]	; (21dc <crc_sync_init+0x44>)
    21c2:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    21c4:	687b      	ldr	r3, [r7, #4]
    21c6:	6839      	ldr	r1, [r7, #0]
    21c8:	4618      	mov	r0, r3
    21ca:	4b05      	ldr	r3, [pc, #20]	; (21e0 <crc_sync_init+0x48>)
    21cc:	4798      	blx	r3
    21ce:	4603      	mov	r3, r0
}
    21d0:	4618      	mov	r0, r3
    21d2:	3708      	adds	r7, #8
    21d4:	46bd      	mov	sp, r7
    21d6:	bd80      	pop	{r7, pc}
    21d8:	0000f424 	.word	0x0000f424
    21dc:	00003719 	.word	0x00003719
    21e0:	00004379 	.word	0x00004379

000021e4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    21e4:	b590      	push	{r4, r7, lr}
    21e6:	b083      	sub	sp, #12
    21e8:	af00      	add	r7, sp, #0
    21ea:	4603      	mov	r3, r0
    21ec:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    21ee:	4b07      	ldr	r3, [pc, #28]	; (220c <delay_us+0x28>)
    21f0:	681c      	ldr	r4, [r3, #0]
    21f2:	88fb      	ldrh	r3, [r7, #6]
    21f4:	4618      	mov	r0, r3
    21f6:	4b06      	ldr	r3, [pc, #24]	; (2210 <delay_us+0x2c>)
    21f8:	4798      	blx	r3
    21fa:	4603      	mov	r3, r0
    21fc:	4619      	mov	r1, r3
    21fe:	4620      	mov	r0, r4
    2200:	4b04      	ldr	r3, [pc, #16]	; (2214 <delay_us+0x30>)
    2202:	4798      	blx	r3
}
    2204:	bf00      	nop
    2206:	370c      	adds	r7, #12
    2208:	46bd      	mov	sp, r7
    220a:	bd90      	pop	{r4, r7, pc}
    220c:	20001fa8 	.word	0x20001fa8
    2210:	000040cd 	.word	0x000040cd
    2214:	00004261 	.word	0x00004261

00002218 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2218:	b590      	push	{r4, r7, lr}
    221a:	b083      	sub	sp, #12
    221c:	af00      	add	r7, sp, #0
    221e:	4603      	mov	r3, r0
    2220:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2222:	4b07      	ldr	r3, [pc, #28]	; (2240 <delay_ms+0x28>)
    2224:	681c      	ldr	r4, [r3, #0]
    2226:	88fb      	ldrh	r3, [r7, #6]
    2228:	4618      	mov	r0, r3
    222a:	4b06      	ldr	r3, [pc, #24]	; (2244 <delay_ms+0x2c>)
    222c:	4798      	blx	r3
    222e:	4603      	mov	r3, r0
    2230:	4619      	mov	r1, r3
    2232:	4620      	mov	r0, r4
    2234:	4b04      	ldr	r3, [pc, #16]	; (2248 <delay_ms+0x30>)
    2236:	4798      	blx	r3
}
    2238:	bf00      	nop
    223a:	370c      	adds	r7, #12
    223c:	46bd      	mov	sp, r7
    223e:	bd90      	pop	{r4, r7, pc}
    2240:	20001fa8 	.word	0x20001fa8
    2244:	00004239 	.word	0x00004239
    2248:	00004261 	.word	0x00004261

0000224c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    224c:	b580      	push	{r7, lr}
    224e:	af00      	add	r7, sp, #0
	return _event_system_init();
    2250:	4b02      	ldr	r3, [pc, #8]	; (225c <event_system_init+0x10>)
    2252:	4798      	blx	r3
    2254:	4603      	mov	r3, r0
}
    2256:	4618      	mov	r0, r3
    2258:	bd80      	pop	{r7, pc}
    225a:	bf00      	nop
    225c:	00004b35 	.word	0x00004b35

00002260 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2260:	b580      	push	{r7, lr}
    2262:	b082      	sub	sp, #8
    2264:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2266:	2300      	movs	r3, #0
    2268:	80fb      	strh	r3, [r7, #6]
    226a:	e00e      	b.n	228a <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    226c:	88fb      	ldrh	r3, [r7, #6]
    226e:	4a0c      	ldr	r2, [pc, #48]	; (22a0 <ext_irq_init+0x40>)
    2270:	00db      	lsls	r3, r3, #3
    2272:	4413      	add	r3, r2
    2274:	f04f 32ff 	mov.w	r2, #4294967295
    2278:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    227a:	88fb      	ldrh	r3, [r7, #6]
    227c:	4a08      	ldr	r2, [pc, #32]	; (22a0 <ext_irq_init+0x40>)
    227e:	2100      	movs	r1, #0
    2280:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2284:	88fb      	ldrh	r3, [r7, #6]
    2286:	3301      	adds	r3, #1
    2288:	80fb      	strh	r3, [r7, #6]
    228a:	88fb      	ldrh	r3, [r7, #6]
    228c:	2b08      	cmp	r3, #8
    228e:	d9ed      	bls.n	226c <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2290:	4804      	ldr	r0, [pc, #16]	; (22a4 <ext_irq_init+0x44>)
    2292:	4b05      	ldr	r3, [pc, #20]	; (22a8 <ext_irq_init+0x48>)
    2294:	4798      	blx	r3
    2296:	4603      	mov	r3, r0
}
    2298:	4618      	mov	r0, r3
    229a:	3708      	adds	r7, #8
    229c:	46bd      	mov	sp, r7
    229e:	bd80      	pop	{r7, pc}
    22a0:	20001fac 	.word	0x20001fac
    22a4:	00002405 	.word	0x00002405
    22a8:	000046b9 	.word	0x000046b9

000022ac <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    22ac:	b580      	push	{r7, lr}
    22ae:	b086      	sub	sp, #24
    22b0:	af00      	add	r7, sp, #0
    22b2:	6078      	str	r0, [r7, #4]
    22b4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    22b6:	2300      	movs	r3, #0
    22b8:	75fb      	strb	r3, [r7, #23]
    22ba:	2300      	movs	r3, #0
    22bc:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    22be:	2300      	movs	r3, #0
    22c0:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    22c2:	e012      	b.n	22ea <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    22c4:	7dfb      	ldrb	r3, [r7, #23]
    22c6:	4a4d      	ldr	r2, [pc, #308]	; (23fc <ext_irq_register+0x150>)
    22c8:	00db      	lsls	r3, r3, #3
    22ca:	4413      	add	r3, r2
    22cc:	685a      	ldr	r2, [r3, #4]
    22ce:	687b      	ldr	r3, [r7, #4]
    22d0:	429a      	cmp	r2, r3
    22d2:	d107      	bne.n	22e4 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    22d4:	7dfb      	ldrb	r3, [r7, #23]
    22d6:	4949      	ldr	r1, [pc, #292]	; (23fc <ext_irq_register+0x150>)
    22d8:	683a      	ldr	r2, [r7, #0]
    22da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    22de:	2301      	movs	r3, #1
    22e0:	757b      	strb	r3, [r7, #21]
			break;
    22e2:	e005      	b.n	22f0 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    22e4:	7dfb      	ldrb	r3, [r7, #23]
    22e6:	3301      	adds	r3, #1
    22e8:	75fb      	strb	r3, [r7, #23]
    22ea:	7dfb      	ldrb	r3, [r7, #23]
    22ec:	2b08      	cmp	r3, #8
    22ee:	d9e9      	bls.n	22c4 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    22f0:	683b      	ldr	r3, [r7, #0]
    22f2:	2b00      	cmp	r3, #0
    22f4:	d10e      	bne.n	2314 <ext_irq_register+0x68>
		if (!found) {
    22f6:	7d7b      	ldrb	r3, [r7, #21]
    22f8:	f083 0301 	eor.w	r3, r3, #1
    22fc:	b2db      	uxtb	r3, r3
    22fe:	2b00      	cmp	r3, #0
    2300:	d002      	beq.n	2308 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    2302:	f06f 030c 	mvn.w	r3, #12
    2306:	e074      	b.n	23f2 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2308:	2100      	movs	r1, #0
    230a:	6878      	ldr	r0, [r7, #4]
    230c:	4b3c      	ldr	r3, [pc, #240]	; (2400 <ext_irq_register+0x154>)
    230e:	4798      	blx	r3
    2310:	4603      	mov	r3, r0
    2312:	e06e      	b.n	23f2 <ext_irq_register+0x146>
	}

	if (!found) {
    2314:	7d7b      	ldrb	r3, [r7, #21]
    2316:	f083 0301 	eor.w	r3, r3, #1
    231a:	b2db      	uxtb	r3, r3
    231c:	2b00      	cmp	r3, #0
    231e:	d05a      	beq.n	23d6 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2320:	2300      	movs	r3, #0
    2322:	75fb      	strb	r3, [r7, #23]
    2324:	e016      	b.n	2354 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2326:	7dfb      	ldrb	r3, [r7, #23]
    2328:	4a34      	ldr	r2, [pc, #208]	; (23fc <ext_irq_register+0x150>)
    232a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    232e:	2b00      	cmp	r3, #0
    2330:	d10d      	bne.n	234e <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2332:	7dfb      	ldrb	r3, [r7, #23]
    2334:	4931      	ldr	r1, [pc, #196]	; (23fc <ext_irq_register+0x150>)
    2336:	683a      	ldr	r2, [r7, #0]
    2338:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    233c:	7dfb      	ldrb	r3, [r7, #23]
    233e:	4a2f      	ldr	r2, [pc, #188]	; (23fc <ext_irq_register+0x150>)
    2340:	00db      	lsls	r3, r3, #3
    2342:	4413      	add	r3, r2
    2344:	687a      	ldr	r2, [r7, #4]
    2346:	605a      	str	r2, [r3, #4]
				found           = true;
    2348:	2301      	movs	r3, #1
    234a:	757b      	strb	r3, [r7, #21]
				break;
    234c:	e005      	b.n	235a <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    234e:	7dfb      	ldrb	r3, [r7, #23]
    2350:	3301      	adds	r3, #1
    2352:	75fb      	strb	r3, [r7, #23]
    2354:	7dfb      	ldrb	r3, [r7, #23]
    2356:	2b08      	cmp	r3, #8
    2358:	d9e5      	bls.n	2326 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    235a:	e036      	b.n	23ca <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    235c:	7dfb      	ldrb	r3, [r7, #23]
    235e:	4a27      	ldr	r2, [pc, #156]	; (23fc <ext_irq_register+0x150>)
    2360:	00db      	lsls	r3, r3, #3
    2362:	4413      	add	r3, r2
    2364:	685a      	ldr	r2, [r3, #4]
    2366:	7dbb      	ldrb	r3, [r7, #22]
    2368:	4924      	ldr	r1, [pc, #144]	; (23fc <ext_irq_register+0x150>)
    236a:	00db      	lsls	r3, r3, #3
    236c:	440b      	add	r3, r1
    236e:	685b      	ldr	r3, [r3, #4]
    2370:	429a      	cmp	r2, r3
    2372:	d227      	bcs.n	23c4 <ext_irq_register+0x118>
    2374:	7dbb      	ldrb	r3, [r7, #22]
    2376:	4a21      	ldr	r2, [pc, #132]	; (23fc <ext_irq_register+0x150>)
    2378:	00db      	lsls	r3, r3, #3
    237a:	4413      	add	r3, r2
    237c:	685b      	ldr	r3, [r3, #4]
    237e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2382:	d01f      	beq.n	23c4 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2384:	7dbb      	ldrb	r3, [r7, #22]
    2386:	491d      	ldr	r1, [pc, #116]	; (23fc <ext_irq_register+0x150>)
    2388:	f107 020c 	add.w	r2, r7, #12
    238c:	00db      	lsls	r3, r3, #3
    238e:	440b      	add	r3, r1
    2390:	e893 0003 	ldmia.w	r3, {r0, r1}
    2394:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2398:	7dbb      	ldrb	r3, [r7, #22]
    239a:	7dfa      	ldrb	r2, [r7, #23]
    239c:	4817      	ldr	r0, [pc, #92]	; (23fc <ext_irq_register+0x150>)
    239e:	4917      	ldr	r1, [pc, #92]	; (23fc <ext_irq_register+0x150>)
    23a0:	00db      	lsls	r3, r3, #3
    23a2:	4403      	add	r3, r0
    23a4:	00d2      	lsls	r2, r2, #3
    23a6:	440a      	add	r2, r1
    23a8:	e892 0003 	ldmia.w	r2, {r0, r1}
    23ac:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    23b0:	7dfb      	ldrb	r3, [r7, #23]
    23b2:	4a12      	ldr	r2, [pc, #72]	; (23fc <ext_irq_register+0x150>)
    23b4:	00db      	lsls	r3, r3, #3
    23b6:	4413      	add	r3, r2
    23b8:	f107 020c 	add.w	r2, r7, #12
    23bc:	e892 0003 	ldmia.w	r2, {r0, r1}
    23c0:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    23c4:	7dbb      	ldrb	r3, [r7, #22]
    23c6:	3301      	adds	r3, #1
    23c8:	75bb      	strb	r3, [r7, #22]
    23ca:	7dbb      	ldrb	r3, [r7, #22]
    23cc:	2b08      	cmp	r3, #8
    23ce:	d802      	bhi.n	23d6 <ext_irq_register+0x12a>
    23d0:	7dfb      	ldrb	r3, [r7, #23]
    23d2:	2b08      	cmp	r3, #8
    23d4:	d9c2      	bls.n	235c <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    23d6:	7d7b      	ldrb	r3, [r7, #21]
    23d8:	f083 0301 	eor.w	r3, r3, #1
    23dc:	b2db      	uxtb	r3, r3
    23de:	2b00      	cmp	r3, #0
    23e0:	d002      	beq.n	23e8 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    23e2:	f06f 030c 	mvn.w	r3, #12
    23e6:	e004      	b.n	23f2 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    23e8:	2101      	movs	r1, #1
    23ea:	6878      	ldr	r0, [r7, #4]
    23ec:	4b04      	ldr	r3, [pc, #16]	; (2400 <ext_irq_register+0x154>)
    23ee:	4798      	blx	r3
    23f0:	4603      	mov	r3, r0
}
    23f2:	4618      	mov	r0, r3
    23f4:	3718      	adds	r7, #24
    23f6:	46bd      	mov	sp, r7
    23f8:	bd80      	pop	{r7, pc}
    23fa:	bf00      	nop
    23fc:	20001fac 	.word	0x20001fac
    2400:	0000484d 	.word	0x0000484d

00002404 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2404:	b580      	push	{r7, lr}
    2406:	b084      	sub	sp, #16
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    240c:	2300      	movs	r3, #0
    240e:	73fb      	strb	r3, [r7, #15]
    2410:	2309      	movs	r3, #9
    2412:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2414:	e02a      	b.n	246c <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2416:	7bba      	ldrb	r2, [r7, #14]
    2418:	7bfb      	ldrb	r3, [r7, #15]
    241a:	4413      	add	r3, r2
    241c:	105b      	asrs	r3, r3, #1
    241e:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2420:	7b7b      	ldrb	r3, [r7, #13]
    2422:	2b08      	cmp	r3, #8
    2424:	d827      	bhi.n	2476 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2426:	7b7b      	ldrb	r3, [r7, #13]
    2428:	4a16      	ldr	r2, [pc, #88]	; (2484 <process_ext_irq+0x80>)
    242a:	00db      	lsls	r3, r3, #3
    242c:	4413      	add	r3, r2
    242e:	685a      	ldr	r2, [r3, #4]
    2430:	687b      	ldr	r3, [r7, #4]
    2432:	429a      	cmp	r2, r3
    2434:	d10b      	bne.n	244e <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2436:	7b7b      	ldrb	r3, [r7, #13]
    2438:	4a12      	ldr	r2, [pc, #72]	; (2484 <process_ext_irq+0x80>)
    243a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    243e:	2b00      	cmp	r3, #0
    2440:	d01b      	beq.n	247a <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    2442:	7b7b      	ldrb	r3, [r7, #13]
    2444:	4a0f      	ldr	r2, [pc, #60]	; (2484 <process_ext_irq+0x80>)
    2446:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    244a:	4798      	blx	r3
			}
			return;
    244c:	e015      	b.n	247a <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    244e:	7b7b      	ldrb	r3, [r7, #13]
    2450:	4a0c      	ldr	r2, [pc, #48]	; (2484 <process_ext_irq+0x80>)
    2452:	00db      	lsls	r3, r3, #3
    2454:	4413      	add	r3, r2
    2456:	685a      	ldr	r2, [r3, #4]
    2458:	687b      	ldr	r3, [r7, #4]
    245a:	429a      	cmp	r2, r3
    245c:	d203      	bcs.n	2466 <process_ext_irq+0x62>
			lower = middle + 1;
    245e:	7b7b      	ldrb	r3, [r7, #13]
    2460:	3301      	adds	r3, #1
    2462:	73fb      	strb	r3, [r7, #15]
    2464:	e002      	b.n	246c <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2466:	7b7b      	ldrb	r3, [r7, #13]
    2468:	3b01      	subs	r3, #1
    246a:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    246c:	7bba      	ldrb	r2, [r7, #14]
    246e:	7bfb      	ldrb	r3, [r7, #15]
    2470:	429a      	cmp	r2, r3
    2472:	d2d0      	bcs.n	2416 <process_ext_irq+0x12>
    2474:	e002      	b.n	247c <process_ext_irq+0x78>
			return;
    2476:	bf00      	nop
    2478:	e000      	b.n	247c <process_ext_irq+0x78>
			return;
    247a:	bf00      	nop
		}
	}
}
    247c:	3710      	adds	r7, #16
    247e:	46bd      	mov	sp, r7
    2480:	bd80      	pop	{r7, pc}
    2482:	bf00      	nop
    2484:	20001fac 	.word	0x20001fac

00002488 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2488:	b580      	push	{r7, lr}
    248a:	b08a      	sub	sp, #40	; 0x28
    248c:	af00      	add	r7, sp, #0
    248e:	60f8      	str	r0, [r7, #12]
    2490:	60b9      	str	r1, [r7, #8]
    2492:	4613      	mov	r3, r2
    2494:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2496:	68fb      	ldr	r3, [r7, #12]
    2498:	3b14      	subs	r3, #20
    249a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    249e:	8b9b      	ldrh	r3, [r3, #28]
    24a0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    24a2:	88fb      	ldrh	r3, [r7, #6]
    24a4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    24a6:	f248 0301 	movw	r3, #32769	; 0x8001
    24aa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    24ac:	68bb      	ldr	r3, [r7, #8]
    24ae:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    24b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24b2:	f107 0214 	add.w	r2, r7, #20
    24b6:	4611      	mov	r1, r2
    24b8:	4618      	mov	r0, r3
    24ba:	4b06      	ldr	r3, [pc, #24]	; (24d4 <i2c_m_sync_read+0x4c>)
    24bc:	4798      	blx	r3
    24be:	6238      	str	r0, [r7, #32]

	if (ret) {
    24c0:	6a3b      	ldr	r3, [r7, #32]
    24c2:	2b00      	cmp	r3, #0
    24c4:	d001      	beq.n	24ca <i2c_m_sync_read+0x42>
		return ret;
    24c6:	6a3b      	ldr	r3, [r7, #32]
    24c8:	e000      	b.n	24cc <i2c_m_sync_read+0x44>
	}

	return n;
    24ca:	88fb      	ldrh	r3, [r7, #6]
}
    24cc:	4618      	mov	r0, r3
    24ce:	3728      	adds	r7, #40	; 0x28
    24d0:	46bd      	mov	sp, r7
    24d2:	bd80      	pop	{r7, pc}
    24d4:	000066d1 	.word	0x000066d1

000024d8 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    24d8:	b580      	push	{r7, lr}
    24da:	b08a      	sub	sp, #40	; 0x28
    24dc:	af00      	add	r7, sp, #0
    24de:	60f8      	str	r0, [r7, #12]
    24e0:	60b9      	str	r1, [r7, #8]
    24e2:	4613      	mov	r3, r2
    24e4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    24e6:	68fb      	ldr	r3, [r7, #12]
    24e8:	3b14      	subs	r3, #20
    24ea:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    24ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24ee:	8b9b      	ldrh	r3, [r3, #28]
    24f0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    24f2:	88fb      	ldrh	r3, [r7, #6]
    24f4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    24f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    24fa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    24fc:	68bb      	ldr	r3, [r7, #8]
    24fe:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2502:	f107 0214 	add.w	r2, r7, #20
    2506:	4611      	mov	r1, r2
    2508:	4618      	mov	r0, r3
    250a:	4b06      	ldr	r3, [pc, #24]	; (2524 <i2c_m_sync_write+0x4c>)
    250c:	4798      	blx	r3
    250e:	6238      	str	r0, [r7, #32]

	if (ret) {
    2510:	6a3b      	ldr	r3, [r7, #32]
    2512:	2b00      	cmp	r3, #0
    2514:	d001      	beq.n	251a <i2c_m_sync_write+0x42>
		return ret;
    2516:	6a3b      	ldr	r3, [r7, #32]
    2518:	e000      	b.n	251c <i2c_m_sync_write+0x44>
	}

	return n;
    251a:	88fb      	ldrh	r3, [r7, #6]
}
    251c:	4618      	mov	r0, r3
    251e:	3728      	adds	r7, #40	; 0x28
    2520:	46bd      	mov	sp, r7
    2522:	bd80      	pop	{r7, pc}
    2524:	000066d1 	.word	0x000066d1

00002528 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2528:	b580      	push	{r7, lr}
    252a:	b084      	sub	sp, #16
    252c:	af00      	add	r7, sp, #0
    252e:	6078      	str	r0, [r7, #4]
    2530:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2532:	687b      	ldr	r3, [r7, #4]
    2534:	2b00      	cmp	r3, #0
    2536:	bf14      	ite	ne
    2538:	2301      	movne	r3, #1
    253a:	2300      	moveq	r3, #0
    253c:	b2db      	uxtb	r3, r3
    253e:	225e      	movs	r2, #94	; 0x5e
    2540:	490c      	ldr	r1, [pc, #48]	; (2574 <i2c_m_sync_init+0x4c>)
    2542:	4618      	mov	r0, r3
    2544:	4b0c      	ldr	r3, [pc, #48]	; (2578 <i2c_m_sync_init+0x50>)
    2546:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	6839      	ldr	r1, [r7, #0]
    254c:	4618      	mov	r0, r3
    254e:	4b0b      	ldr	r3, [pc, #44]	; (257c <i2c_m_sync_init+0x54>)
    2550:	4798      	blx	r3
    2552:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2554:	68fb      	ldr	r3, [r7, #12]
    2556:	2b00      	cmp	r3, #0
    2558:	d001      	beq.n	255e <i2c_m_sync_init+0x36>
		return init_status;
    255a:	68fb      	ldr	r3, [r7, #12]
    255c:	e006      	b.n	256c <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    255e:	687b      	ldr	r3, [r7, #4]
    2560:	4a07      	ldr	r2, [pc, #28]	; (2580 <i2c_m_sync_init+0x58>)
    2562:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2564:	687b      	ldr	r3, [r7, #4]
    2566:	4a07      	ldr	r2, [pc, #28]	; (2584 <i2c_m_sync_init+0x5c>)
    2568:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    256a:	2300      	movs	r3, #0
}
    256c:	4618      	mov	r0, r3
    256e:	3710      	adds	r7, #16
    2570:	46bd      	mov	sp, r7
    2572:	bd80      	pop	{r7, pc}
    2574:	0000f440 	.word	0x0000f440
    2578:	00003719 	.word	0x00003719
    257c:	0000650d 	.word	0x0000650d
    2580:	00002489 	.word	0x00002489
    2584:	000024d9 	.word	0x000024d9

00002588 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2588:	b580      	push	{r7, lr}
    258a:	b084      	sub	sp, #16
    258c:	af00      	add	r7, sp, #0
    258e:	60f8      	str	r0, [r7, #12]
    2590:	60b9      	str	r1, [r7, #8]
    2592:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2594:	68fb      	ldr	r3, [r7, #12]
    2596:	2b00      	cmp	r3, #0
    2598:	d004      	beq.n	25a4 <pwm_init+0x1c>
    259a:	68bb      	ldr	r3, [r7, #8]
    259c:	2b00      	cmp	r3, #0
    259e:	d001      	beq.n	25a4 <pwm_init+0x1c>
    25a0:	2301      	movs	r3, #1
    25a2:	e000      	b.n	25a6 <pwm_init+0x1e>
    25a4:	2300      	movs	r3, #0
    25a6:	f003 0301 	and.w	r3, r3, #1
    25aa:	b2db      	uxtb	r3, r3
    25ac:	2233      	movs	r2, #51	; 0x33
    25ae:	490a      	ldr	r1, [pc, #40]	; (25d8 <pwm_init+0x50>)
    25b0:	4618      	mov	r0, r3
    25b2:	4b0a      	ldr	r3, [pc, #40]	; (25dc <pwm_init+0x54>)
    25b4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    25b6:	68fb      	ldr	r3, [r7, #12]
    25b8:	68b9      	ldr	r1, [r7, #8]
    25ba:	4618      	mov	r0, r3
    25bc:	4b08      	ldr	r3, [pc, #32]	; (25e0 <pwm_init+0x58>)
    25be:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    25c0:	68fb      	ldr	r3, [r7, #12]
    25c2:	4a08      	ldr	r2, [pc, #32]	; (25e4 <pwm_init+0x5c>)
    25c4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    25c6:	68fb      	ldr	r3, [r7, #12]
    25c8:	4a07      	ldr	r2, [pc, #28]	; (25e8 <pwm_init+0x60>)
    25ca:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    25cc:	2300      	movs	r3, #0
}
    25ce:	4618      	mov	r0, r3
    25d0:	3710      	adds	r7, #16
    25d2:	46bd      	mov	sp, r7
    25d4:	bd80      	pop	{r7, pc}
    25d6:	bf00      	nop
    25d8:	0000f45c 	.word	0x0000f45c
    25dc:	00003719 	.word	0x00003719
    25e0:	00007bd5 	.word	0x00007bd5
    25e4:	000025ed 	.word	0x000025ed
    25e8:	00002611 	.word	0x00002611

000025ec <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    25ec:	b580      	push	{r7, lr}
    25ee:	b084      	sub	sp, #16
    25f0:	af00      	add	r7, sp, #0
    25f2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    25f4:	687b      	ldr	r3, [r7, #4]
    25f6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    25f8:	68fb      	ldr	r3, [r7, #12]
    25fa:	695b      	ldr	r3, [r3, #20]
    25fc:	2b00      	cmp	r3, #0
    25fe:	d003      	beq.n	2608 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2600:	68fb      	ldr	r3, [r7, #12]
    2602:	695b      	ldr	r3, [r3, #20]
    2604:	68f8      	ldr	r0, [r7, #12]
    2606:	4798      	blx	r3
	}
}
    2608:	bf00      	nop
    260a:	3710      	adds	r7, #16
    260c:	46bd      	mov	sp, r7
    260e:	bd80      	pop	{r7, pc}

00002610 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2610:	b580      	push	{r7, lr}
    2612:	b084      	sub	sp, #16
    2614:	af00      	add	r7, sp, #0
    2616:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2618:	687b      	ldr	r3, [r7, #4]
    261a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    261c:	68fb      	ldr	r3, [r7, #12]
    261e:	699b      	ldr	r3, [r3, #24]
    2620:	2b00      	cmp	r3, #0
    2622:	d003      	beq.n	262c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2624:	68fb      	ldr	r3, [r7, #12]
    2626:	699b      	ldr	r3, [r3, #24]
    2628:	68f8      	ldr	r0, [r7, #12]
    262a:	4798      	blx	r3
	}
}
    262c:	bf00      	nop
    262e:	3710      	adds	r7, #16
    2630:	46bd      	mov	sp, r7
    2632:	bd80      	pop	{r7, pc}

00002634 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2634:	b580      	push	{r7, lr}
    2636:	b082      	sub	sp, #8
    2638:	af00      	add	r7, sp, #0
    263a:	6078      	str	r0, [r7, #4]
    263c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    263e:	687b      	ldr	r3, [r7, #4]
    2640:	2b00      	cmp	r3, #0
    2642:	d004      	beq.n	264e <qspi_sync_init+0x1a>
    2644:	683b      	ldr	r3, [r7, #0]
    2646:	2b00      	cmp	r3, #0
    2648:	d001      	beq.n	264e <qspi_sync_init+0x1a>
    264a:	2301      	movs	r3, #1
    264c:	e000      	b.n	2650 <qspi_sync_init+0x1c>
    264e:	2300      	movs	r3, #0
    2650:	f003 0301 	and.w	r3, r3, #1
    2654:	b2db      	uxtb	r3, r3
    2656:	2231      	movs	r2, #49	; 0x31
    2658:	4906      	ldr	r1, [pc, #24]	; (2674 <qspi_sync_init+0x40>)
    265a:	4618      	mov	r0, r3
    265c:	4b06      	ldr	r3, [pc, #24]	; (2678 <qspi_sync_init+0x44>)
    265e:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2660:	687b      	ldr	r3, [r7, #4]
    2662:	6839      	ldr	r1, [r7, #0]
    2664:	4618      	mov	r0, r3
    2666:	4b05      	ldr	r3, [pc, #20]	; (267c <qspi_sync_init+0x48>)
    2668:	4798      	blx	r3
    266a:	4603      	mov	r3, r0
}
    266c:	4618      	mov	r0, r3
    266e:	3708      	adds	r7, #8
    2670:	46bd      	mov	sp, r7
    2672:	bd80      	pop	{r7, pc}
    2674:	0000f474 	.word	0x0000f474
    2678:	00003719 	.word	0x00003719
    267c:	000056fd 	.word	0x000056fd

00002680 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2680:	b580      	push	{r7, lr}
    2682:	b082      	sub	sp, #8
    2684:	af00      	add	r7, sp, #0
    2686:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	2b00      	cmp	r3, #0
    268c:	bf14      	ite	ne
    268e:	2301      	movne	r3, #1
    2690:	2300      	moveq	r3, #0
    2692:	b2db      	uxtb	r3, r3
    2694:	223f      	movs	r2, #63	; 0x3f
    2696:	4906      	ldr	r1, [pc, #24]	; (26b0 <qspi_sync_enable+0x30>)
    2698:	4618      	mov	r0, r3
    269a:	4b06      	ldr	r3, [pc, #24]	; (26b4 <qspi_sync_enable+0x34>)
    269c:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    269e:	687b      	ldr	r3, [r7, #4]
    26a0:	4618      	mov	r0, r3
    26a2:	4b05      	ldr	r3, [pc, #20]	; (26b8 <qspi_sync_enable+0x38>)
    26a4:	4798      	blx	r3
    26a6:	4603      	mov	r3, r0
}
    26a8:	4618      	mov	r0, r3
    26aa:	3708      	adds	r7, #8
    26ac:	46bd      	mov	sp, r7
    26ae:	bd80      	pop	{r7, pc}
    26b0:	0000f474 	.word	0x0000f474
    26b4:	00003719 	.word	0x00003719
    26b8:	00005771 	.word	0x00005771

000026bc <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    26bc:	b580      	push	{r7, lr}
    26be:	b082      	sub	sp, #8
    26c0:	af00      	add	r7, sp, #0
    26c2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    26c4:	687b      	ldr	r3, [r7, #4]
    26c6:	2b00      	cmp	r3, #0
    26c8:	bf14      	ite	ne
    26ca:	2301      	movne	r3, #1
    26cc:	2300      	moveq	r3, #0
    26ce:	b2db      	uxtb	r3, r3
    26d0:	2246      	movs	r2, #70	; 0x46
    26d2:	4906      	ldr	r1, [pc, #24]	; (26ec <qspi_sync_disable+0x30>)
    26d4:	4618      	mov	r0, r3
    26d6:	4b06      	ldr	r3, [pc, #24]	; (26f0 <qspi_sync_disable+0x34>)
    26d8:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    26da:	687b      	ldr	r3, [r7, #4]
    26dc:	4618      	mov	r0, r3
    26de:	4b05      	ldr	r3, [pc, #20]	; (26f4 <qspi_sync_disable+0x38>)
    26e0:	4798      	blx	r3
    26e2:	4603      	mov	r3, r0
}
    26e4:	4618      	mov	r0, r3
    26e6:	3708      	adds	r7, #8
    26e8:	46bd      	mov	sp, r7
    26ea:	bd80      	pop	{r7, pc}
    26ec:	0000f474 	.word	0x0000f474
    26f0:	00003719 	.word	0x00003719
    26f4:	00005795 	.word	0x00005795

000026f8 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    26f8:	b580      	push	{r7, lr}
    26fa:	b082      	sub	sp, #8
    26fc:	af00      	add	r7, sp, #0
    26fe:	6078      	str	r0, [r7, #4]
    2700:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	2b00      	cmp	r3, #0
    2706:	d004      	beq.n	2712 <qspi_sync_serial_run_command+0x1a>
    2708:	683b      	ldr	r3, [r7, #0]
    270a:	2b00      	cmp	r3, #0
    270c:	d001      	beq.n	2712 <qspi_sync_serial_run_command+0x1a>
    270e:	2301      	movs	r3, #1
    2710:	e000      	b.n	2714 <qspi_sync_serial_run_command+0x1c>
    2712:	2300      	movs	r3, #0
    2714:	f003 0301 	and.w	r3, r3, #1
    2718:	b2db      	uxtb	r3, r3
    271a:	224d      	movs	r2, #77	; 0x4d
    271c:	4906      	ldr	r1, [pc, #24]	; (2738 <qspi_sync_serial_run_command+0x40>)
    271e:	4618      	mov	r0, r3
    2720:	4b06      	ldr	r3, [pc, #24]	; (273c <qspi_sync_serial_run_command+0x44>)
    2722:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	6839      	ldr	r1, [r7, #0]
    2728:	4618      	mov	r0, r3
    272a:	4b05      	ldr	r3, [pc, #20]	; (2740 <qspi_sync_serial_run_command+0x48>)
    272c:	4798      	blx	r3
    272e:	4603      	mov	r3, r0
}
    2730:	4618      	mov	r0, r3
    2732:	3708      	adds	r7, #8
    2734:	46bd      	mov	sp, r7
    2736:	bd80      	pop	{r7, pc}
    2738:	0000f474 	.word	0x0000f474
    273c:	00003719 	.word	0x00003719
    2740:	000058e1 	.word	0x000058e1

00002744 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2744:	b580      	push	{r7, lr}
    2746:	b084      	sub	sp, #16
    2748:	af00      	add	r7, sp, #0
    274a:	6078      	str	r0, [r7, #4]
    274c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    274e:	2300      	movs	r3, #0
    2750:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	2b00      	cmp	r3, #0
    2756:	d004      	beq.n	2762 <spi_m_sync_init+0x1e>
    2758:	683b      	ldr	r3, [r7, #0]
    275a:	2b00      	cmp	r3, #0
    275c:	d001      	beq.n	2762 <spi_m_sync_init+0x1e>
    275e:	2301      	movs	r3, #1
    2760:	e000      	b.n	2764 <spi_m_sync_init+0x20>
    2762:	2300      	movs	r3, #0
    2764:	f003 0301 	and.w	r3, r3, #1
    2768:	b2db      	uxtb	r3, r3
    276a:	2240      	movs	r2, #64	; 0x40
    276c:	4910      	ldr	r1, [pc, #64]	; (27b0 <spi_m_sync_init+0x6c>)
    276e:	4618      	mov	r0, r3
    2770:	4b10      	ldr	r3, [pc, #64]	; (27b4 <spi_m_sync_init+0x70>)
    2772:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	683a      	ldr	r2, [r7, #0]
    2778:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	3304      	adds	r3, #4
    277e:	6839      	ldr	r1, [r7, #0]
    2780:	4618      	mov	r0, r3
    2782:	4b0d      	ldr	r3, [pc, #52]	; (27b8 <spi_m_sync_init+0x74>)
    2784:	4798      	blx	r3
    2786:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2788:	68fb      	ldr	r3, [r7, #12]
    278a:	2b00      	cmp	r3, #0
    278c:	da01      	bge.n	2792 <spi_m_sync_init+0x4e>
		return rc;
    278e:	68fb      	ldr	r3, [r7, #12]
    2790:	e00a      	b.n	27a8 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2792:	687b      	ldr	r3, [r7, #4]
    2794:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2798:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    279a:	687b      	ldr	r3, [r7, #4]
    279c:	4a07      	ldr	r2, [pc, #28]	; (27bc <spi_m_sync_init+0x78>)
    279e:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    27a0:	687b      	ldr	r3, [r7, #4]
    27a2:	4a07      	ldr	r2, [pc, #28]	; (27c0 <spi_m_sync_init+0x7c>)
    27a4:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    27a6:	2300      	movs	r3, #0
}
    27a8:	4618      	mov	r0, r3
    27aa:	3710      	adds	r7, #16
    27ac:	46bd      	mov	sp, r7
    27ae:	bd80      	pop	{r7, pc}
    27b0:	0000f490 	.word	0x0000f490
    27b4:	00003719 	.word	0x00003719
    27b8:	00006ad9 	.word	0x00006ad9
    27bc:	000027c5 	.word	0x000027c5
    27c0:	0000281d 	.word	0x0000281d

000027c4 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    27c4:	b580      	push	{r7, lr}
    27c6:	b088      	sub	sp, #32
    27c8:	af00      	add	r7, sp, #0
    27ca:	60f8      	str	r0, [r7, #12]
    27cc:	60b9      	str	r1, [r7, #8]
    27ce:	4613      	mov	r3, r2
    27d0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    27d2:	68fb      	ldr	r3, [r7, #12]
    27d4:	2b00      	cmp	r3, #0
    27d6:	bf14      	ite	ne
    27d8:	2301      	movne	r3, #1
    27da:	2300      	moveq	r3, #0
    27dc:	b2db      	uxtb	r3, r3
    27de:	2287      	movs	r2, #135	; 0x87
    27e0:	490b      	ldr	r1, [pc, #44]	; (2810 <_spi_m_sync_io_read+0x4c>)
    27e2:	4618      	mov	r0, r3
    27e4:	4b0b      	ldr	r3, [pc, #44]	; (2814 <_spi_m_sync_io_read+0x50>)
    27e6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    27e8:	68fb      	ldr	r3, [r7, #12]
    27ea:	3b0c      	subs	r3, #12
    27ec:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    27ee:	68bb      	ldr	r3, [r7, #8]
    27f0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    27f2:	2300      	movs	r3, #0
    27f4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    27f6:	88fb      	ldrh	r3, [r7, #6]
    27f8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    27fa:	f107 0310 	add.w	r3, r7, #16
    27fe:	4619      	mov	r1, r3
    2800:	69f8      	ldr	r0, [r7, #28]
    2802:	4b05      	ldr	r3, [pc, #20]	; (2818 <_spi_m_sync_io_read+0x54>)
    2804:	4798      	blx	r3
    2806:	4603      	mov	r3, r0
}
    2808:	4618      	mov	r0, r3
    280a:	3720      	adds	r7, #32
    280c:	46bd      	mov	sp, r7
    280e:	bd80      	pop	{r7, pc}
    2810:	0000f490 	.word	0x0000f490
    2814:	00003719 	.word	0x00003719
    2818:	00002875 	.word	0x00002875

0000281c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    281c:	b580      	push	{r7, lr}
    281e:	b088      	sub	sp, #32
    2820:	af00      	add	r7, sp, #0
    2822:	60f8      	str	r0, [r7, #12]
    2824:	60b9      	str	r1, [r7, #8]
    2826:	4613      	mov	r3, r2
    2828:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    282a:	68fb      	ldr	r3, [r7, #12]
    282c:	2b00      	cmp	r3, #0
    282e:	bf14      	ite	ne
    2830:	2301      	movne	r3, #1
    2832:	2300      	moveq	r3, #0
    2834:	b2db      	uxtb	r3, r3
    2836:	22a3      	movs	r2, #163	; 0xa3
    2838:	490b      	ldr	r1, [pc, #44]	; (2868 <_spi_m_sync_io_write+0x4c>)
    283a:	4618      	mov	r0, r3
    283c:	4b0b      	ldr	r3, [pc, #44]	; (286c <_spi_m_sync_io_write+0x50>)
    283e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2840:	68fb      	ldr	r3, [r7, #12]
    2842:	3b0c      	subs	r3, #12
    2844:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2846:	2300      	movs	r3, #0
    2848:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    284a:	68bb      	ldr	r3, [r7, #8]
    284c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    284e:	88fb      	ldrh	r3, [r7, #6]
    2850:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2852:	f107 0310 	add.w	r3, r7, #16
    2856:	4619      	mov	r1, r3
    2858:	69f8      	ldr	r0, [r7, #28]
    285a:	4b05      	ldr	r3, [pc, #20]	; (2870 <_spi_m_sync_io_write+0x54>)
    285c:	4798      	blx	r3
    285e:	4603      	mov	r3, r0
}
    2860:	4618      	mov	r0, r3
    2862:	3720      	adds	r7, #32
    2864:	46bd      	mov	sp, r7
    2866:	bd80      	pop	{r7, pc}
    2868:	0000f490 	.word	0x0000f490
    286c:	00003719 	.word	0x00003719
    2870:	00002875 	.word	0x00002875

00002874 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2874:	b580      	push	{r7, lr}
    2876:	b086      	sub	sp, #24
    2878:	af00      	add	r7, sp, #0
    287a:	6078      	str	r0, [r7, #4]
    287c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    287e:	687b      	ldr	r3, [r7, #4]
    2880:	2b00      	cmp	r3, #0
    2882:	d004      	beq.n	288e <spi_m_sync_transfer+0x1a>
    2884:	683b      	ldr	r3, [r7, #0]
    2886:	2b00      	cmp	r3, #0
    2888:	d001      	beq.n	288e <spi_m_sync_transfer+0x1a>
    288a:	2301      	movs	r3, #1
    288c:	e000      	b.n	2890 <spi_m_sync_transfer+0x1c>
    288e:	2300      	movs	r3, #0
    2890:	f003 0301 	and.w	r3, r3, #1
    2894:	b2db      	uxtb	r3, r3
    2896:	22b3      	movs	r2, #179	; 0xb3
    2898:	490c      	ldr	r1, [pc, #48]	; (28cc <spi_m_sync_transfer+0x58>)
    289a:	4618      	mov	r0, r3
    289c:	4b0c      	ldr	r3, [pc, #48]	; (28d0 <spi_m_sync_transfer+0x5c>)
    289e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    28a0:	683b      	ldr	r3, [r7, #0]
    28a2:	681b      	ldr	r3, [r3, #0]
    28a4:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    28a6:	683b      	ldr	r3, [r7, #0]
    28a8:	685b      	ldr	r3, [r3, #4]
    28aa:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    28ac:	683b      	ldr	r3, [r7, #0]
    28ae:	689b      	ldr	r3, [r3, #8]
    28b0:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    28b2:	687b      	ldr	r3, [r7, #4]
    28b4:	3304      	adds	r3, #4
    28b6:	f107 020c 	add.w	r2, r7, #12
    28ba:	4611      	mov	r1, r2
    28bc:	4618      	mov	r0, r3
    28be:	4b05      	ldr	r3, [pc, #20]	; (28d4 <spi_m_sync_transfer+0x60>)
    28c0:	4798      	blx	r3
    28c2:	4603      	mov	r3, r0
}
    28c4:	4618      	mov	r0, r3
    28c6:	3718      	adds	r7, #24
    28c8:	46bd      	mov	sp, r7
    28ca:	bd80      	pop	{r7, pc}
    28cc:	0000f490 	.word	0x0000f490
    28d0:	00003719 	.word	0x00003719
    28d4:	00006d39 	.word	0x00006d39

000028d8 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    28d8:	b480      	push	{r7}
    28da:	b083      	sub	sp, #12
    28dc:	af00      	add	r7, sp, #0
    28de:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	681b      	ldr	r3, [r3, #0]
}
    28e4:	4618      	mov	r0, r3
    28e6:	370c      	adds	r7, #12
    28e8:	46bd      	mov	sp, r7
    28ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    28ee:	4770      	bx	lr

000028f0 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    28f0:	b480      	push	{r7}
    28f2:	b083      	sub	sp, #12
    28f4:	af00      	add	r7, sp, #0
    28f6:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    28f8:	687b      	ldr	r3, [r7, #4]
    28fa:	2b00      	cmp	r3, #0
    28fc:	d002      	beq.n	2904 <list_get_next_element+0x14>
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	681b      	ldr	r3, [r3, #0]
    2902:	e000      	b.n	2906 <list_get_next_element+0x16>
    2904:	2300      	movs	r3, #0
}
    2906:	4618      	mov	r0, r3
    2908:	370c      	adds	r7, #12
    290a:	46bd      	mov	sp, r7
    290c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2910:	4770      	bx	lr
	...

00002914 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2914:	b580      	push	{r7, lr}
    2916:	b084      	sub	sp, #16
    2918:	af00      	add	r7, sp, #0
    291a:	60f8      	str	r0, [r7, #12]
    291c:	60b9      	str	r1, [r7, #8]
    291e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2920:	68fb      	ldr	r3, [r7, #12]
    2922:	2b00      	cmp	r3, #0
    2924:	d007      	beq.n	2936 <timer_init+0x22>
    2926:	68bb      	ldr	r3, [r7, #8]
    2928:	2b00      	cmp	r3, #0
    292a:	d004      	beq.n	2936 <timer_init+0x22>
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	2b00      	cmp	r3, #0
    2930:	d001      	beq.n	2936 <timer_init+0x22>
    2932:	2301      	movs	r3, #1
    2934:	e000      	b.n	2938 <timer_init+0x24>
    2936:	2300      	movs	r3, #0
    2938:	f003 0301 	and.w	r3, r3, #1
    293c:	b2db      	uxtb	r3, r3
    293e:	223b      	movs	r2, #59	; 0x3b
    2940:	490c      	ldr	r1, [pc, #48]	; (2974 <timer_init+0x60>)
    2942:	4618      	mov	r0, r3
    2944:	4b0c      	ldr	r3, [pc, #48]	; (2978 <timer_init+0x64>)
    2946:	4798      	blx	r3
	descr->func = func;
    2948:	68fb      	ldr	r3, [r7, #12]
    294a:	687a      	ldr	r2, [r7, #4]
    294c:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    294e:	68fb      	ldr	r3, [r7, #12]
    2950:	681b      	ldr	r3, [r3, #0]
    2952:	681b      	ldr	r3, [r3, #0]
    2954:	68fa      	ldr	r2, [r7, #12]
    2956:	3204      	adds	r2, #4
    2958:	68b9      	ldr	r1, [r7, #8]
    295a:	4610      	mov	r0, r2
    295c:	4798      	blx	r3
	descr->time                           = 0;
    295e:	68fb      	ldr	r3, [r7, #12]
    2960:	2200      	movs	r2, #0
    2962:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2964:	68fb      	ldr	r3, [r7, #12]
    2966:	4a05      	ldr	r2, [pc, #20]	; (297c <timer_init+0x68>)
    2968:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    296a:	2300      	movs	r3, #0
}
    296c:	4618      	mov	r0, r3
    296e:	3710      	adds	r7, #16
    2970:	46bd      	mov	sp, r7
    2972:	bd80      	pop	{r7, pc}
    2974:	0000f4ac 	.word	0x0000f4ac
    2978:	00003719 	.word	0x00003719
    297c:	00002d05 	.word	0x00002d05

00002980 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2980:	b580      	push	{r7, lr}
    2982:	b082      	sub	sp, #8
    2984:	af00      	add	r7, sp, #0
    2986:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2988:	687b      	ldr	r3, [r7, #4]
    298a:	2b00      	cmp	r3, #0
    298c:	d005      	beq.n	299a <timer_start+0x1a>
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	2b00      	cmp	r3, #0
    2994:	d001      	beq.n	299a <timer_start+0x1a>
    2996:	2301      	movs	r3, #1
    2998:	e000      	b.n	299c <timer_start+0x1c>
    299a:	2300      	movs	r3, #0
    299c:	f003 0301 	and.w	r3, r3, #1
    29a0:	b2db      	uxtb	r3, r3
    29a2:	2254      	movs	r2, #84	; 0x54
    29a4:	490e      	ldr	r1, [pc, #56]	; (29e0 <timer_start+0x60>)
    29a6:	4618      	mov	r0, r3
    29a8:	4b0e      	ldr	r3, [pc, #56]	; (29e4 <timer_start+0x64>)
    29aa:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	681b      	ldr	r3, [r3, #0]
    29b0:	699b      	ldr	r3, [r3, #24]
    29b2:	687a      	ldr	r2, [r7, #4]
    29b4:	3204      	adds	r2, #4
    29b6:	4610      	mov	r0, r2
    29b8:	4798      	blx	r3
    29ba:	4603      	mov	r3, r0
    29bc:	2b00      	cmp	r3, #0
    29be:	d002      	beq.n	29c6 <timer_start+0x46>
		return ERR_DENIED;
    29c0:	f06f 0310 	mvn.w	r3, #16
    29c4:	e007      	b.n	29d6 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    29c6:	687b      	ldr	r3, [r7, #4]
    29c8:	681b      	ldr	r3, [r3, #0]
    29ca:	689b      	ldr	r3, [r3, #8]
    29cc:	687a      	ldr	r2, [r7, #4]
    29ce:	3204      	adds	r2, #4
    29d0:	4610      	mov	r0, r2
    29d2:	4798      	blx	r3

	return ERR_NONE;
    29d4:	2300      	movs	r3, #0
}
    29d6:	4618      	mov	r0, r3
    29d8:	3708      	adds	r7, #8
    29da:	46bd      	mov	sp, r7
    29dc:	bd80      	pop	{r7, pc}
    29de:	bf00      	nop
    29e0:	0000f4ac 	.word	0x0000f4ac
    29e4:	00003719 	.word	0x00003719

000029e8 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    29e8:	b580      	push	{r7, lr}
    29ea:	b082      	sub	sp, #8
    29ec:	af00      	add	r7, sp, #0
    29ee:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    29f0:	687b      	ldr	r3, [r7, #4]
    29f2:	2b00      	cmp	r3, #0
    29f4:	d005      	beq.n	2a02 <timer_stop+0x1a>
    29f6:	687b      	ldr	r3, [r7, #4]
    29f8:	681b      	ldr	r3, [r3, #0]
    29fa:	2b00      	cmp	r3, #0
    29fc:	d001      	beq.n	2a02 <timer_stop+0x1a>
    29fe:	2301      	movs	r3, #1
    2a00:	e000      	b.n	2a04 <timer_stop+0x1c>
    2a02:	2300      	movs	r3, #0
    2a04:	f003 0301 	and.w	r3, r3, #1
    2a08:	b2db      	uxtb	r3, r3
    2a0a:	2262      	movs	r2, #98	; 0x62
    2a0c:	490f      	ldr	r1, [pc, #60]	; (2a4c <timer_stop+0x64>)
    2a0e:	4618      	mov	r0, r3
    2a10:	4b0f      	ldr	r3, [pc, #60]	; (2a50 <timer_stop+0x68>)
    2a12:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2a14:	687b      	ldr	r3, [r7, #4]
    2a16:	681b      	ldr	r3, [r3, #0]
    2a18:	699b      	ldr	r3, [r3, #24]
    2a1a:	687a      	ldr	r2, [r7, #4]
    2a1c:	3204      	adds	r2, #4
    2a1e:	4610      	mov	r0, r2
    2a20:	4798      	blx	r3
    2a22:	4603      	mov	r3, r0
    2a24:	f083 0301 	eor.w	r3, r3, #1
    2a28:	b2db      	uxtb	r3, r3
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d002      	beq.n	2a34 <timer_stop+0x4c>
		return ERR_DENIED;
    2a2e:	f06f 0310 	mvn.w	r3, #16
    2a32:	e007      	b.n	2a44 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	681b      	ldr	r3, [r3, #0]
    2a38:	68db      	ldr	r3, [r3, #12]
    2a3a:	687a      	ldr	r2, [r7, #4]
    2a3c:	3204      	adds	r2, #4
    2a3e:	4610      	mov	r0, r2
    2a40:	4798      	blx	r3

	return ERR_NONE;
    2a42:	2300      	movs	r3, #0
}
    2a44:	4618      	mov	r0, r3
    2a46:	3708      	adds	r7, #8
    2a48:	46bd      	mov	sp, r7
    2a4a:	bd80      	pop	{r7, pc}
    2a4c:	0000f4ac 	.word	0x0000f4ac
    2a50:	00003719 	.word	0x00003719

00002a54 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2a54:	b580      	push	{r7, lr}
    2a56:	b084      	sub	sp, #16
    2a58:	af00      	add	r7, sp, #0
    2a5a:	6078      	str	r0, [r7, #4]
    2a5c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2a5e:	687b      	ldr	r3, [r7, #4]
    2a60:	2b00      	cmp	r3, #0
    2a62:	d008      	beq.n	2a76 <timer_add_task+0x22>
    2a64:	683b      	ldr	r3, [r7, #0]
    2a66:	2b00      	cmp	r3, #0
    2a68:	d005      	beq.n	2a76 <timer_add_task+0x22>
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	681b      	ldr	r3, [r3, #0]
    2a6e:	2b00      	cmp	r3, #0
    2a70:	d001      	beq.n	2a76 <timer_add_task+0x22>
    2a72:	2301      	movs	r3, #1
    2a74:	e000      	b.n	2a78 <timer_add_task+0x24>
    2a76:	2300      	movs	r3, #0
    2a78:	f003 0301 	and.w	r3, r3, #1
    2a7c:	b2db      	uxtb	r3, r3
    2a7e:	227b      	movs	r2, #123	; 0x7b
    2a80:	492f      	ldr	r1, [pc, #188]	; (2b40 <timer_add_task+0xec>)
    2a82:	4618      	mov	r0, r3
    2a84:	4b2f      	ldr	r3, [pc, #188]	; (2b44 <timer_add_task+0xf0>)
    2a86:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2a88:	687b      	ldr	r3, [r7, #4]
    2a8a:	7f1b      	ldrb	r3, [r3, #28]
    2a8c:	b2db      	uxtb	r3, r3
    2a8e:	f043 0301 	orr.w	r3, r3, #1
    2a92:	b2da      	uxtb	r2, r3
    2a94:	687b      	ldr	r3, [r7, #4]
    2a96:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	3318      	adds	r3, #24
    2a9c:	6839      	ldr	r1, [r7, #0]
    2a9e:	4618      	mov	r0, r3
    2aa0:	4b29      	ldr	r3, [pc, #164]	; (2b48 <timer_add_task+0xf4>)
    2aa2:	4798      	blx	r3
    2aa4:	4603      	mov	r3, r0
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d00f      	beq.n	2aca <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2aaa:	687b      	ldr	r3, [r7, #4]
    2aac:	7f1b      	ldrb	r3, [r3, #28]
    2aae:	b2db      	uxtb	r3, r3
    2ab0:	f023 0301 	bic.w	r3, r3, #1
    2ab4:	b2da      	uxtb	r2, r3
    2ab6:	687b      	ldr	r3, [r7, #4]
    2ab8:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2aba:	2280      	movs	r2, #128	; 0x80
    2abc:	4920      	ldr	r1, [pc, #128]	; (2b40 <timer_add_task+0xec>)
    2abe:	2000      	movs	r0, #0
    2ac0:	4b20      	ldr	r3, [pc, #128]	; (2b44 <timer_add_task+0xf0>)
    2ac2:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2ac4:	f06f 0311 	mvn.w	r3, #17
    2ac8:	e035      	b.n	2b36 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	695a      	ldr	r2, [r3, #20]
    2ace:	683b      	ldr	r3, [r7, #0]
    2ad0:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	f103 0018 	add.w	r0, r3, #24
    2ad8:	687b      	ldr	r3, [r7, #4]
    2ada:	695b      	ldr	r3, [r3, #20]
    2adc:	461a      	mov	r2, r3
    2ade:	6839      	ldr	r1, [r7, #0]
    2ae0:	4b1a      	ldr	r3, [pc, #104]	; (2b4c <timer_add_task+0xf8>)
    2ae2:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2ae4:	687b      	ldr	r3, [r7, #4]
    2ae6:	7f1b      	ldrb	r3, [r3, #28]
    2ae8:	b2db      	uxtb	r3, r3
    2aea:	f023 0301 	bic.w	r3, r3, #1
    2aee:	b2da      	uxtb	r2, r3
    2af0:	687b      	ldr	r3, [r7, #4]
    2af2:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	7f1b      	ldrb	r3, [r3, #28]
    2af8:	b2db      	uxtb	r3, r3
    2afa:	f003 0302 	and.w	r3, r3, #2
    2afe:	2b00      	cmp	r3, #0
    2b00:	d018      	beq.n	2b34 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2b02:	f107 030c 	add.w	r3, r7, #12
    2b06:	4618      	mov	r0, r3
    2b08:	4b11      	ldr	r3, [pc, #68]	; (2b50 <timer_add_task+0xfc>)
    2b0a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2b0c:	687b      	ldr	r3, [r7, #4]
    2b0e:	7f1b      	ldrb	r3, [r3, #28]
    2b10:	b2db      	uxtb	r3, r3
    2b12:	f023 0302 	bic.w	r3, r3, #2
    2b16:	b2da      	uxtb	r2, r3
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2b1c:	687b      	ldr	r3, [r7, #4]
    2b1e:	681b      	ldr	r3, [r3, #0]
    2b20:	69db      	ldr	r3, [r3, #28]
    2b22:	687a      	ldr	r2, [r7, #4]
    2b24:	3204      	adds	r2, #4
    2b26:	4610      	mov	r0, r2
    2b28:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2b2a:	f107 030c 	add.w	r3, r7, #12
    2b2e:	4618      	mov	r0, r3
    2b30:	4b08      	ldr	r3, [pc, #32]	; (2b54 <timer_add_task+0x100>)
    2b32:	4798      	blx	r3
	}

	return ERR_NONE;
    2b34:	2300      	movs	r3, #0
}
    2b36:	4618      	mov	r0, r3
    2b38:	3710      	adds	r7, #16
    2b3a:	46bd      	mov	sp, r7
    2b3c:	bd80      	pop	{r7, pc}
    2b3e:	bf00      	nop
    2b40:	0000f4ac 	.word	0x0000f4ac
    2b44:	00003719 	.word	0x00003719
    2b48:	00003741 	.word	0x00003741
    2b4c:	00002c55 	.word	0x00002c55
    2b50:	0000b0e5 	.word	0x0000b0e5
    2b54:	0000b10b 	.word	0x0000b10b

00002b58 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2b58:	b580      	push	{r7, lr}
    2b5a:	b084      	sub	sp, #16
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	6078      	str	r0, [r7, #4]
    2b60:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	2b00      	cmp	r3, #0
    2b66:	d008      	beq.n	2b7a <timer_remove_task+0x22>
    2b68:	683b      	ldr	r3, [r7, #0]
    2b6a:	2b00      	cmp	r3, #0
    2b6c:	d005      	beq.n	2b7a <timer_remove_task+0x22>
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	681b      	ldr	r3, [r3, #0]
    2b72:	2b00      	cmp	r3, #0
    2b74:	d001      	beq.n	2b7a <timer_remove_task+0x22>
    2b76:	2301      	movs	r3, #1
    2b78:	e000      	b.n	2b7c <timer_remove_task+0x24>
    2b7a:	2300      	movs	r3, #0
    2b7c:	f003 0301 	and.w	r3, r3, #1
    2b80:	b2db      	uxtb	r3, r3
    2b82:	2296      	movs	r2, #150	; 0x96
    2b84:	492d      	ldr	r1, [pc, #180]	; (2c3c <timer_remove_task+0xe4>)
    2b86:	4618      	mov	r0, r3
    2b88:	4b2d      	ldr	r3, [pc, #180]	; (2c40 <timer_remove_task+0xe8>)
    2b8a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2b8c:	687b      	ldr	r3, [r7, #4]
    2b8e:	7f1b      	ldrb	r3, [r3, #28]
    2b90:	b2db      	uxtb	r3, r3
    2b92:	f043 0301 	orr.w	r3, r3, #1
    2b96:	b2da      	uxtb	r2, r3
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	3318      	adds	r3, #24
    2ba0:	6839      	ldr	r1, [r7, #0]
    2ba2:	4618      	mov	r0, r3
    2ba4:	4b27      	ldr	r3, [pc, #156]	; (2c44 <timer_remove_task+0xec>)
    2ba6:	4798      	blx	r3
    2ba8:	4603      	mov	r3, r0
    2baa:	f083 0301 	eor.w	r3, r3, #1
    2bae:	b2db      	uxtb	r3, r3
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d00f      	beq.n	2bd4 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2bb4:	687b      	ldr	r3, [r7, #4]
    2bb6:	7f1b      	ldrb	r3, [r3, #28]
    2bb8:	b2db      	uxtb	r3, r3
    2bba:	f023 0301 	bic.w	r3, r3, #1
    2bbe:	b2da      	uxtb	r2, r3
    2bc0:	687b      	ldr	r3, [r7, #4]
    2bc2:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2bc4:	229b      	movs	r2, #155	; 0x9b
    2bc6:	491d      	ldr	r1, [pc, #116]	; (2c3c <timer_remove_task+0xe4>)
    2bc8:	2000      	movs	r0, #0
    2bca:	4b1d      	ldr	r3, [pc, #116]	; (2c40 <timer_remove_task+0xe8>)
    2bcc:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2bce:	f06f 0309 	mvn.w	r3, #9
    2bd2:	e02e      	b.n	2c32 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2bd4:	687b      	ldr	r3, [r7, #4]
    2bd6:	3318      	adds	r3, #24
    2bd8:	6839      	ldr	r1, [r7, #0]
    2bda:	4618      	mov	r0, r3
    2bdc:	4b1a      	ldr	r3, [pc, #104]	; (2c48 <timer_remove_task+0xf0>)
    2bde:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2be0:	687b      	ldr	r3, [r7, #4]
    2be2:	7f1b      	ldrb	r3, [r3, #28]
    2be4:	b2db      	uxtb	r3, r3
    2be6:	f023 0301 	bic.w	r3, r3, #1
    2bea:	b2da      	uxtb	r2, r3
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2bf0:	687b      	ldr	r3, [r7, #4]
    2bf2:	7f1b      	ldrb	r3, [r3, #28]
    2bf4:	b2db      	uxtb	r3, r3
    2bf6:	f003 0302 	and.w	r3, r3, #2
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d018      	beq.n	2c30 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2bfe:	f107 030c 	add.w	r3, r7, #12
    2c02:	4618      	mov	r0, r3
    2c04:	4b11      	ldr	r3, [pc, #68]	; (2c4c <timer_remove_task+0xf4>)
    2c06:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2c08:	687b      	ldr	r3, [r7, #4]
    2c0a:	7f1b      	ldrb	r3, [r3, #28]
    2c0c:	b2db      	uxtb	r3, r3
    2c0e:	f023 0302 	bic.w	r3, r3, #2
    2c12:	b2da      	uxtb	r2, r3
    2c14:	687b      	ldr	r3, [r7, #4]
    2c16:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2c18:	687b      	ldr	r3, [r7, #4]
    2c1a:	681b      	ldr	r3, [r3, #0]
    2c1c:	69db      	ldr	r3, [r3, #28]
    2c1e:	687a      	ldr	r2, [r7, #4]
    2c20:	3204      	adds	r2, #4
    2c22:	4610      	mov	r0, r2
    2c24:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2c26:	f107 030c 	add.w	r3, r7, #12
    2c2a:	4618      	mov	r0, r3
    2c2c:	4b08      	ldr	r3, [pc, #32]	; (2c50 <timer_remove_task+0xf8>)
    2c2e:	4798      	blx	r3
	}

	return ERR_NONE;
    2c30:	2300      	movs	r3, #0
}
    2c32:	4618      	mov	r0, r3
    2c34:	3710      	adds	r7, #16
    2c36:	46bd      	mov	sp, r7
    2c38:	bd80      	pop	{r7, pc}
    2c3a:	bf00      	nop
    2c3c:	0000f4ac 	.word	0x0000f4ac
    2c40:	00003719 	.word	0x00003719
    2c44:	00003741 	.word	0x00003741
    2c48:	000038a3 	.word	0x000038a3
    2c4c:	0000b0e5 	.word	0x0000b0e5
    2c50:	0000b10b 	.word	0x0000b10b

00002c54 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2c54:	b580      	push	{r7, lr}
    2c56:	b088      	sub	sp, #32
    2c58:	af00      	add	r7, sp, #0
    2c5a:	60f8      	str	r0, [r7, #12]
    2c5c:	60b9      	str	r1, [r7, #8]
    2c5e:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2c60:	2300      	movs	r3, #0
    2c62:	61bb      	str	r3, [r7, #24]
    2c64:	68f8      	ldr	r0, [r7, #12]
    2c66:	4b23      	ldr	r3, [pc, #140]	; (2cf4 <timer_add_timer_task+0xa0>)
    2c68:	4798      	blx	r3
    2c6a:	6138      	str	r0, [r7, #16]

	if (!head) {
    2c6c:	693b      	ldr	r3, [r7, #16]
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d104      	bne.n	2c7c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2c72:	68b9      	ldr	r1, [r7, #8]
    2c74:	68f8      	ldr	r0, [r7, #12]
    2c76:	4b20      	ldr	r3, [pc, #128]	; (2cf8 <timer_add_timer_task+0xa4>)
    2c78:	4798      	blx	r3
		return;
    2c7a:	e037      	b.n	2cec <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2c7c:	693b      	ldr	r3, [r7, #16]
    2c7e:	61fb      	str	r3, [r7, #28]
    2c80:	e022      	b.n	2cc8 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2c82:	69fb      	ldr	r3, [r7, #28]
    2c84:	685a      	ldr	r2, [r3, #4]
    2c86:	687b      	ldr	r3, [r7, #4]
    2c88:	429a      	cmp	r2, r3
    2c8a:	d808      	bhi.n	2c9e <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2c8c:	69fb      	ldr	r3, [r7, #28]
    2c8e:	689a      	ldr	r2, [r3, #8]
    2c90:	69fb      	ldr	r3, [r7, #28]
    2c92:	6859      	ldr	r1, [r3, #4]
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	1acb      	subs	r3, r1, r3
    2c98:	4413      	add	r3, r2
    2c9a:	617b      	str	r3, [r7, #20]
    2c9c:	e009      	b.n	2cb2 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2c9e:	69fb      	ldr	r3, [r7, #28]
    2ca0:	689a      	ldr	r2, [r3, #8]
    2ca2:	69fb      	ldr	r3, [r7, #28]
    2ca4:	685b      	ldr	r3, [r3, #4]
    2ca6:	441a      	add	r2, r3
    2ca8:	687b      	ldr	r3, [r7, #4]
    2caa:	425b      	negs	r3, r3
    2cac:	4413      	add	r3, r2
    2cae:	3301      	adds	r3, #1
    2cb0:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2cb2:	68bb      	ldr	r3, [r7, #8]
    2cb4:	689a      	ldr	r2, [r3, #8]
    2cb6:	697b      	ldr	r3, [r7, #20]
    2cb8:	429a      	cmp	r2, r3
    2cba:	d909      	bls.n	2cd0 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2cbc:	69fb      	ldr	r3, [r7, #28]
    2cbe:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2cc0:	69f8      	ldr	r0, [r7, #28]
    2cc2:	4b0e      	ldr	r3, [pc, #56]	; (2cfc <timer_add_timer_task+0xa8>)
    2cc4:	4798      	blx	r3
    2cc6:	61f8      	str	r0, [r7, #28]
    2cc8:	69fb      	ldr	r3, [r7, #28]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d1d9      	bne.n	2c82 <timer_add_timer_task+0x2e>
    2cce:	e000      	b.n	2cd2 <timer_add_timer_task+0x7e>
			break;
    2cd0:	bf00      	nop
	}

	if (it == head) {
    2cd2:	69fa      	ldr	r2, [r7, #28]
    2cd4:	693b      	ldr	r3, [r7, #16]
    2cd6:	429a      	cmp	r2, r3
    2cd8:	d104      	bne.n	2ce4 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2cda:	68b9      	ldr	r1, [r7, #8]
    2cdc:	68f8      	ldr	r0, [r7, #12]
    2cde:	4b06      	ldr	r3, [pc, #24]	; (2cf8 <timer_add_timer_task+0xa4>)
    2ce0:	4798      	blx	r3
    2ce2:	e003      	b.n	2cec <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2ce4:	68b9      	ldr	r1, [r7, #8]
    2ce6:	69b8      	ldr	r0, [r7, #24]
    2ce8:	4b05      	ldr	r3, [pc, #20]	; (2d00 <timer_add_timer_task+0xac>)
    2cea:	4798      	blx	r3
	}
}
    2cec:	3720      	adds	r7, #32
    2cee:	46bd      	mov	sp, r7
    2cf0:	bd80      	pop	{r7, pc}
    2cf2:	bf00      	nop
    2cf4:	000028d9 	.word	0x000028d9
    2cf8:	00003779 	.word	0x00003779
    2cfc:	000028f1 	.word	0x000028f1
    2d00:	000037d1 	.word	0x000037d1

00002d04 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2d04:	b580      	push	{r7, lr}
    2d06:	b086      	sub	sp, #24
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2d0c:	687b      	ldr	r3, [r7, #4]
    2d0e:	3b04      	subs	r3, #4
    2d10:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2d12:	693b      	ldr	r3, [r7, #16]
    2d14:	3318      	adds	r3, #24
    2d16:	4618      	mov	r0, r3
    2d18:	4b27      	ldr	r3, [pc, #156]	; (2db8 <timer_process_counted+0xb4>)
    2d1a:	4798      	blx	r3
    2d1c:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2d1e:	693b      	ldr	r3, [r7, #16]
    2d20:	695b      	ldr	r3, [r3, #20]
    2d22:	1c5a      	adds	r2, r3, #1
    2d24:	693b      	ldr	r3, [r7, #16]
    2d26:	615a      	str	r2, [r3, #20]
    2d28:	693b      	ldr	r3, [r7, #16]
    2d2a:	695b      	ldr	r3, [r3, #20]
    2d2c:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2d2e:	693b      	ldr	r3, [r7, #16]
    2d30:	7f1b      	ldrb	r3, [r3, #28]
    2d32:	b2db      	uxtb	r3, r3
    2d34:	f003 0301 	and.w	r3, r3, #1
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d106      	bne.n	2d4a <timer_process_counted+0x46>
    2d3c:	693b      	ldr	r3, [r7, #16]
    2d3e:	7f1b      	ldrb	r3, [r3, #28]
    2d40:	b2db      	uxtb	r3, r3
    2d42:	f003 0302 	and.w	r3, r3, #2
    2d46:	2b00      	cmp	r3, #0
    2d48:	d027      	beq.n	2d9a <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2d4a:	693b      	ldr	r3, [r7, #16]
    2d4c:	7f1b      	ldrb	r3, [r3, #28]
    2d4e:	b2db      	uxtb	r3, r3
    2d50:	f043 0302 	orr.w	r3, r3, #2
    2d54:	b2da      	uxtb	r2, r3
    2d56:	693b      	ldr	r3, [r7, #16]
    2d58:	771a      	strb	r2, [r3, #28]
		return;
    2d5a:	e029      	b.n	2db0 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2d5c:	697b      	ldr	r3, [r7, #20]
    2d5e:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2d60:	693b      	ldr	r3, [r7, #16]
    2d62:	3318      	adds	r3, #24
    2d64:	4618      	mov	r0, r3
    2d66:	4b15      	ldr	r3, [pc, #84]	; (2dbc <timer_process_counted+0xb8>)
    2d68:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2d6a:	68bb      	ldr	r3, [r7, #8]
    2d6c:	7c1b      	ldrb	r3, [r3, #16]
    2d6e:	2b01      	cmp	r3, #1
    2d70:	d109      	bne.n	2d86 <timer_process_counted+0x82>
			tmp->time_label = time;
    2d72:	68bb      	ldr	r3, [r7, #8]
    2d74:	68fa      	ldr	r2, [r7, #12]
    2d76:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2d78:	693b      	ldr	r3, [r7, #16]
    2d7a:	3318      	adds	r3, #24
    2d7c:	68fa      	ldr	r2, [r7, #12]
    2d7e:	68b9      	ldr	r1, [r7, #8]
    2d80:	4618      	mov	r0, r3
    2d82:	4b0f      	ldr	r3, [pc, #60]	; (2dc0 <timer_process_counted+0xbc>)
    2d84:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2d86:	693b      	ldr	r3, [r7, #16]
    2d88:	3318      	adds	r3, #24
    2d8a:	4618      	mov	r0, r3
    2d8c:	4b0a      	ldr	r3, [pc, #40]	; (2db8 <timer_process_counted+0xb4>)
    2d8e:	4798      	blx	r3
    2d90:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2d92:	68bb      	ldr	r3, [r7, #8]
    2d94:	68db      	ldr	r3, [r3, #12]
    2d96:	68b8      	ldr	r0, [r7, #8]
    2d98:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2d9a:	697b      	ldr	r3, [r7, #20]
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d007      	beq.n	2db0 <timer_process_counted+0xac>
    2da0:	697b      	ldr	r3, [r7, #20]
    2da2:	685b      	ldr	r3, [r3, #4]
    2da4:	68fa      	ldr	r2, [r7, #12]
    2da6:	1ad2      	subs	r2, r2, r3
    2da8:	697b      	ldr	r3, [r7, #20]
    2daa:	689b      	ldr	r3, [r3, #8]
    2dac:	429a      	cmp	r2, r3
    2dae:	d2d5      	bcs.n	2d5c <timer_process_counted+0x58>
	}
}
    2db0:	3718      	adds	r7, #24
    2db2:	46bd      	mov	sp, r7
    2db4:	bd80      	pop	{r7, pc}
    2db6:	bf00      	nop
    2db8:	000028d9 	.word	0x000028d9
    2dbc:	00003871 	.word	0x00003871
    2dc0:	00002c55 	.word	0x00002c55

00002dc4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2dc4:	b480      	push	{r7}
    2dc6:	b085      	sub	sp, #20
    2dc8:	af00      	add	r7, sp, #0
    2dca:	4603      	mov	r3, r0
    2dcc:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2dce:	2300      	movs	r3, #0
    2dd0:	73fb      	strb	r3, [r7, #15]
    2dd2:	e029      	b.n	2e28 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2dd8:	4a19      	ldr	r2, [pc, #100]	; (2e40 <_usb_d_find_ep+0x7c>)
    2dda:	015b      	lsls	r3, r3, #5
    2ddc:	4413      	add	r3, r2
    2dde:	3301      	adds	r3, #1
    2de0:	781b      	ldrb	r3, [r3, #0]
    2de2:	79fa      	ldrb	r2, [r7, #7]
    2de4:	429a      	cmp	r2, r3
    2de6:	d102      	bne.n	2dee <_usb_d_find_ep+0x2a>
			return i;
    2de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2dec:	e022      	b.n	2e34 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2df2:	4a13      	ldr	r2, [pc, #76]	; (2e40 <_usb_d_find_ep+0x7c>)
    2df4:	015b      	lsls	r3, r3, #5
    2df6:	4413      	add	r3, r2
    2df8:	781b      	ldrb	r3, [r3, #0]
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d10e      	bne.n	2e1c <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2dfe:	79fb      	ldrb	r3, [r7, #7]
    2e00:	f003 030f 	and.w	r3, r3, #15
    2e04:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2e08:	490d      	ldr	r1, [pc, #52]	; (2e40 <_usb_d_find_ep+0x7c>)
    2e0a:	0152      	lsls	r2, r2, #5
    2e0c:	440a      	add	r2, r1
    2e0e:	3201      	adds	r2, #1
    2e10:	7812      	ldrb	r2, [r2, #0]
    2e12:	4293      	cmp	r3, r2
    2e14:	d102      	bne.n	2e1c <_usb_d_find_ep+0x58>
			return i;
    2e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2e1a:	e00b      	b.n	2e34 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2e20:	b2db      	uxtb	r3, r3
    2e22:	3301      	adds	r3, #1
    2e24:	b2db      	uxtb	r3, r3
    2e26:	73fb      	strb	r3, [r7, #15]
    2e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2e2c:	2b03      	cmp	r3, #3
    2e2e:	ddd1      	ble.n	2dd4 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2e30:	f04f 33ff 	mov.w	r3, #4294967295
}
    2e34:	4618      	mov	r0, r3
    2e36:	3714      	adds	r7, #20
    2e38:	46bd      	mov	sp, r7
    2e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e3e:	4770      	bx	lr
    2e40:	20001ff4 	.word	0x20001ff4

00002e44 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2e44:	b580      	push	{r7, lr}
    2e46:	b088      	sub	sp, #32
    2e48:	af00      	add	r7, sp, #0
    2e4a:	60ba      	str	r2, [r7, #8]
    2e4c:	607b      	str	r3, [r7, #4]
    2e4e:	4603      	mov	r3, r0
    2e50:	73fb      	strb	r3, [r7, #15]
    2e52:	460b      	mov	r3, r1
    2e54:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2e56:	68bb      	ldr	r3, [r7, #8]
    2e58:	617b      	str	r3, [r7, #20]
    2e5a:	687b      	ldr	r3, [r7, #4]
    2e5c:	61bb      	str	r3, [r7, #24]
    2e5e:	7bbb      	ldrb	r3, [r7, #14]
    2e60:	2b00      	cmp	r3, #0
    2e62:	d004      	beq.n	2e6e <_usb_d_trans+0x2a>
    2e64:	7bfb      	ldrb	r3, [r7, #15]
    2e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2e6a:	b2db      	uxtb	r3, r3
    2e6c:	e003      	b.n	2e76 <_usb_d_trans+0x32>
    2e6e:	7bfb      	ldrb	r3, [r7, #15]
    2e70:	f003 030f 	and.w	r3, r3, #15
    2e74:	b2db      	uxtb	r3, r3
    2e76:	773b      	strb	r3, [r7, #28]
    2e78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2e7c:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2e7e:	f107 0314 	add.w	r3, r7, #20
    2e82:	4618      	mov	r0, r3
    2e84:	4b03      	ldr	r3, [pc, #12]	; (2e94 <_usb_d_trans+0x50>)
    2e86:	4798      	blx	r3
    2e88:	4603      	mov	r3, r0
}
    2e8a:	4618      	mov	r0, r3
    2e8c:	3720      	adds	r7, #32
    2e8e:	46bd      	mov	sp, r7
    2e90:	bd80      	pop	{r7, pc}
    2e92:	bf00      	nop
    2e94:	0000a719 	.word	0x0000a719

00002e98 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2e98:	b480      	push	{r7}
    2e9a:	b085      	sub	sp, #20
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	60f8      	str	r0, [r7, #12]
    2ea0:	60b9      	str	r1, [r7, #8]
    2ea2:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2ea4:	2300      	movs	r3, #0
}
    2ea6:	4618      	mov	r0, r3
    2ea8:	3714      	adds	r7, #20
    2eaa:	46bd      	mov	sp, r7
    2eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    2eb0:	4770      	bx	lr
	...

00002eb4 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2eb4:	b580      	push	{r7, lr}
    2eb6:	b086      	sub	sp, #24
    2eb8:	af00      	add	r7, sp, #0
    2eba:	4603      	mov	r3, r0
    2ebc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2ebe:	79fb      	ldrb	r3, [r7, #7]
    2ec0:	4618      	mov	r0, r3
    2ec2:	4b2a      	ldr	r3, [pc, #168]	; (2f6c <usb_d_cb_trans_setup+0xb8>)
    2ec4:	4798      	blx	r3
    2ec6:	4603      	mov	r3, r0
    2ec8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2eca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ece:	015b      	lsls	r3, r3, #5
    2ed0:	4a27      	ldr	r2, [pc, #156]	; (2f70 <usb_d_cb_trans_setup+0xbc>)
    2ed2:	4413      	add	r3, r2
    2ed4:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2ed6:	693b      	ldr	r3, [r7, #16]
    2ed8:	330c      	adds	r3, #12
    2eda:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2edc:	79fb      	ldrb	r3, [r7, #7]
    2ede:	68f9      	ldr	r1, [r7, #12]
    2ee0:	4618      	mov	r0, r3
    2ee2:	4b24      	ldr	r3, [pc, #144]	; (2f74 <usb_d_cb_trans_setup+0xc0>)
    2ee4:	4798      	blx	r3
    2ee6:	4603      	mov	r3, r0
    2ee8:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2eea:	7afb      	ldrb	r3, [r7, #11]
    2eec:	2b08      	cmp	r3, #8
    2eee:	d00d      	beq.n	2f0c <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2ef0:	79fb      	ldrb	r3, [r7, #7]
    2ef2:	2101      	movs	r1, #1
    2ef4:	4618      	mov	r0, r3
    2ef6:	4b20      	ldr	r3, [pc, #128]	; (2f78 <usb_d_cb_trans_setup+0xc4>)
    2ef8:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2efa:	79fb      	ldrb	r3, [r7, #7]
    2efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f00:	b2db      	uxtb	r3, r3
    2f02:	2101      	movs	r1, #1
    2f04:	4618      	mov	r0, r3
    2f06:	4b1c      	ldr	r3, [pc, #112]	; (2f78 <usb_d_cb_trans_setup+0xc4>)
    2f08:	4798      	blx	r3
		return;
    2f0a:	e02b      	b.n	2f64 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2f0c:	79fb      	ldrb	r3, [r7, #7]
    2f0e:	2100      	movs	r1, #0
    2f10:	4618      	mov	r0, r3
    2f12:	4b19      	ldr	r3, [pc, #100]	; (2f78 <usb_d_cb_trans_setup+0xc4>)
    2f14:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2f16:	79fb      	ldrb	r3, [r7, #7]
    2f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f1c:	b2db      	uxtb	r3, r3
    2f1e:	2100      	movs	r1, #0
    2f20:	4618      	mov	r0, r3
    2f22:	4b15      	ldr	r3, [pc, #84]	; (2f78 <usb_d_cb_trans_setup+0xc4>)
    2f24:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2f26:	693b      	ldr	r3, [r7, #16]
    2f28:	2201      	movs	r2, #1
    2f2a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2f2c:	693b      	ldr	r3, [r7, #16]
    2f2e:	695b      	ldr	r3, [r3, #20]
    2f30:	79fa      	ldrb	r2, [r7, #7]
    2f32:	68f9      	ldr	r1, [r7, #12]
    2f34:	4610      	mov	r0, r2
    2f36:	4798      	blx	r3
    2f38:	4603      	mov	r3, r0
    2f3a:	f083 0301 	eor.w	r3, r3, #1
    2f3e:	b2db      	uxtb	r3, r3
    2f40:	2b00      	cmp	r3, #0
    2f42:	d00f      	beq.n	2f64 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2f44:	693b      	ldr	r3, [r7, #16]
    2f46:	2205      	movs	r2, #5
    2f48:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2f4a:	79fb      	ldrb	r3, [r7, #7]
    2f4c:	2101      	movs	r1, #1
    2f4e:	4618      	mov	r0, r3
    2f50:	4b09      	ldr	r3, [pc, #36]	; (2f78 <usb_d_cb_trans_setup+0xc4>)
    2f52:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2f54:	79fb      	ldrb	r3, [r7, #7]
    2f56:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f5a:	b2db      	uxtb	r3, r3
    2f5c:	2101      	movs	r1, #1
    2f5e:	4618      	mov	r0, r3
    2f60:	4b05      	ldr	r3, [pc, #20]	; (2f78 <usb_d_cb_trans_setup+0xc4>)
    2f62:	4798      	blx	r3
	}
}
    2f64:	3718      	adds	r7, #24
    2f66:	46bd      	mov	sp, r7
    2f68:	bd80      	pop	{r7, pc}
    2f6a:	bf00      	nop
    2f6c:	00002dc5 	.word	0x00002dc5
    2f70:	20001ff4 	.word	0x20001ff4
    2f74:	0000a671 	.word	0x0000a671
    2f78:	0000a4e9 	.word	0x0000a4e9

00002f7c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b084      	sub	sp, #16
    2f80:	af00      	add	r7, sp, #0
    2f82:	4603      	mov	r3, r0
    2f84:	6039      	str	r1, [r7, #0]
    2f86:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f88:	79fb      	ldrb	r3, [r7, #7]
    2f8a:	4618      	mov	r0, r3
    2f8c:	4b0d      	ldr	r3, [pc, #52]	; (2fc4 <usb_d_cb_trans_more+0x48>)
    2f8e:	4798      	blx	r3
    2f90:	4603      	mov	r3, r0
    2f92:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2f98:	015b      	lsls	r3, r3, #5
    2f9a:	4a0b      	ldr	r2, [pc, #44]	; (2fc8 <usb_d_cb_trans_more+0x4c>)
    2f9c:	4413      	add	r3, r2
    2f9e:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2fa0:	68bb      	ldr	r3, [r7, #8]
    2fa2:	789b      	ldrb	r3, [r3, #2]
    2fa4:	2b03      	cmp	r3, #3
    2fa6:	d107      	bne.n	2fb8 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2fa8:	68bb      	ldr	r3, [r7, #8]
    2faa:	699b      	ldr	r3, [r3, #24]
    2fac:	79fa      	ldrb	r2, [r7, #7]
    2fae:	6839      	ldr	r1, [r7, #0]
    2fb0:	4610      	mov	r0, r2
    2fb2:	4798      	blx	r3
    2fb4:	4603      	mov	r3, r0
    2fb6:	e000      	b.n	2fba <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2fb8:	2300      	movs	r3, #0
}
    2fba:	4618      	mov	r0, r3
    2fbc:	3710      	adds	r7, #16
    2fbe:	46bd      	mov	sp, r7
    2fc0:	bd80      	pop	{r7, pc}
    2fc2:	bf00      	nop
    2fc4:	00002dc5 	.word	0x00002dc5
    2fc8:	20001ff4 	.word	0x20001ff4

00002fcc <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2fcc:	b590      	push	{r4, r7, lr}
    2fce:	b087      	sub	sp, #28
    2fd0:	af02      	add	r7, sp, #8
    2fd2:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	789b      	ldrb	r3, [r3, #2]
    2fd8:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2fda:	687b      	ldr	r3, [r7, #4]
    2fdc:	7b1b      	ldrb	r3, [r3, #12]
    2fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	bf14      	ite	ne
    2fe6:	2301      	movne	r3, #1
    2fe8:	2300      	moveq	r3, #0
    2fea:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2fec:	7bfb      	ldrb	r3, [r7, #15]
    2fee:	2b03      	cmp	r3, #3
    2ff0:	d13a      	bne.n	3068 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	69db      	ldr	r3, [r3, #28]
    2ff6:	687a      	ldr	r2, [r7, #4]
    2ff8:	7850      	ldrb	r0, [r2, #1]
    2ffa:	687a      	ldr	r2, [r7, #4]
    2ffc:	320c      	adds	r2, #12
    2ffe:	2101      	movs	r1, #1
    3000:	4798      	blx	r3
    3002:	4603      	mov	r3, r0
    3004:	737b      	strb	r3, [r7, #13]
		if (err) {
    3006:	7b7b      	ldrb	r3, [r7, #13]
    3008:	2b00      	cmp	r3, #0
    300a:	d015      	beq.n	3038 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	2205      	movs	r2, #5
    3010:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    3012:	687b      	ldr	r3, [r7, #4]
    3014:	2202      	movs	r2, #2
    3016:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3018:	7bbb      	ldrb	r3, [r7, #14]
    301a:	2b00      	cmp	r3, #0
    301c:	d002      	beq.n	3024 <usb_d_ctrl_trans_done+0x58>
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	785b      	ldrb	r3, [r3, #1]
    3022:	e004      	b.n	302e <usb_d_ctrl_trans_done+0x62>
    3024:	687b      	ldr	r3, [r7, #4]
    3026:	785b      	ldrb	r3, [r3, #1]
    3028:	f063 037f 	orn	r3, r3, #127	; 0x7f
    302c:	b2db      	uxtb	r3, r3
    302e:	2101      	movs	r1, #1
    3030:	4618      	mov	r0, r3
    3032:	4b15      	ldr	r3, [pc, #84]	; (3088 <usb_d_ctrl_trans_done+0xbc>)
    3034:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    3036:	e022      	b.n	307e <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	2204      	movs	r2, #4
    303c:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    303e:	687b      	ldr	r3, [r7, #4]
    3040:	7858      	ldrb	r0, [r3, #1]
    3042:	7bbb      	ldrb	r3, [r7, #14]
    3044:	2b00      	cmp	r3, #0
    3046:	bf14      	ite	ne
    3048:	2301      	movne	r3, #1
    304a:	2300      	moveq	r3, #0
    304c:	b2db      	uxtb	r3, r3
    304e:	f083 0301 	eor.w	r3, r3, #1
    3052:	b2db      	uxtb	r3, r3
    3054:	f003 0301 	and.w	r3, r3, #1
    3058:	b2d9      	uxtb	r1, r3
    305a:	2301      	movs	r3, #1
    305c:	9300      	str	r3, [sp, #0]
    305e:	2300      	movs	r3, #0
    3060:	2200      	movs	r2, #0
    3062:	4c0a      	ldr	r4, [pc, #40]	; (308c <usb_d_ctrl_trans_done+0xc0>)
    3064:	47a0      	blx	r4
}
    3066:	e00a      	b.n	307e <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3068:	687b      	ldr	r3, [r7, #4]
    306a:	69db      	ldr	r3, [r3, #28]
    306c:	687a      	ldr	r2, [r7, #4]
    306e:	7850      	ldrb	r0, [r2, #1]
    3070:	687a      	ldr	r2, [r7, #4]
    3072:	320c      	adds	r2, #12
    3074:	2100      	movs	r1, #0
    3076:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3078:	687b      	ldr	r3, [r7, #4]
    307a:	2202      	movs	r2, #2
    307c:	709a      	strb	r2, [r3, #2]
}
    307e:	bf00      	nop
    3080:	3714      	adds	r7, #20
    3082:	46bd      	mov	sp, r7
    3084:	bd90      	pop	{r4, r7, pc}
    3086:	bf00      	nop
    3088:	0000a4e9 	.word	0x0000a4e9
    308c:	00002e45 	.word	0x00002e45

00003090 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3090:	b580      	push	{r7, lr}
    3092:	b086      	sub	sp, #24
    3094:	af00      	add	r7, sp, #0
    3096:	4603      	mov	r3, r0
    3098:	60b9      	str	r1, [r7, #8]
    309a:	607a      	str	r2, [r7, #4]
    309c:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    309e:	7bfb      	ldrb	r3, [r7, #15]
    30a0:	4618      	mov	r0, r3
    30a2:	4b2f      	ldr	r3, [pc, #188]	; (3160 <_usb_d_cb_trans_done+0xd0>)
    30a4:	4798      	blx	r3
    30a6:	4603      	mov	r3, r0
    30a8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    30aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30ae:	015b      	lsls	r3, r3, #5
    30b0:	4a2c      	ldr	r2, [pc, #176]	; (3164 <_usb_d_cb_trans_done+0xd4>)
    30b2:	4413      	add	r3, r2
    30b4:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    30b6:	68bb      	ldr	r3, [r7, #8]
    30b8:	2b00      	cmp	r3, #0
    30ba:	d10e      	bne.n	30da <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    30bc:	693b      	ldr	r3, [r7, #16]
    30be:	2200      	movs	r2, #0
    30c0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    30c2:	693b      	ldr	r3, [r7, #16]
    30c4:	781b      	ldrb	r3, [r3, #0]
    30c6:	2b00      	cmp	r3, #0
    30c8:	d103      	bne.n	30d2 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    30ca:	6938      	ldr	r0, [r7, #16]
    30cc:	4b26      	ldr	r3, [pc, #152]	; (3168 <_usb_d_cb_trans_done+0xd8>)
    30ce:	4798      	blx	r3
			return;
    30d0:	e043      	b.n	315a <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    30d2:	693b      	ldr	r3, [r7, #16]
    30d4:	2201      	movs	r2, #1
    30d6:	709a      	strb	r2, [r3, #2]
    30d8:	e038      	b.n	314c <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    30da:	68bb      	ldr	r3, [r7, #8]
    30dc:	2b01      	cmp	r3, #1
    30de:	d113      	bne.n	3108 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    30e0:	693b      	ldr	r3, [r7, #16]
    30e2:	2202      	movs	r2, #2
    30e4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    30e6:	693b      	ldr	r3, [r7, #16]
    30e8:	781b      	ldrb	r3, [r3, #0]
    30ea:	2b00      	cmp	r3, #0
    30ec:	d108      	bne.n	3100 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    30ee:	693b      	ldr	r3, [r7, #16]
    30f0:	2202      	movs	r2, #2
    30f2:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    30f4:	7bfb      	ldrb	r3, [r7, #15]
    30f6:	2100      	movs	r1, #0
    30f8:	4618      	mov	r0, r3
    30fa:	4b1c      	ldr	r3, [pc, #112]	; (316c <_usb_d_cb_trans_done+0xdc>)
    30fc:	4798      	blx	r3
    30fe:	e025      	b.n	314c <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3100:	693b      	ldr	r3, [r7, #16]
    3102:	2205      	movs	r2, #5
    3104:	709a      	strb	r2, [r3, #2]
    3106:	e021      	b.n	314c <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3108:	68bb      	ldr	r3, [r7, #8]
    310a:	2b02      	cmp	r3, #2
    310c:	d10e      	bne.n	312c <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    310e:	693b      	ldr	r3, [r7, #16]
    3110:	2204      	movs	r2, #4
    3112:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3114:	693b      	ldr	r3, [r7, #16]
    3116:	781b      	ldrb	r3, [r3, #0]
    3118:	2b00      	cmp	r3, #0
    311a:	d103      	bne.n	3124 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    311c:	693b      	ldr	r3, [r7, #16]
    311e:	2202      	movs	r2, #2
    3120:	709a      	strb	r2, [r3, #2]
			return;
    3122:	e01a      	b.n	315a <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3124:	693b      	ldr	r3, [r7, #16]
    3126:	2201      	movs	r2, #1
    3128:	709a      	strb	r2, [r3, #2]
    312a:	e00f      	b.n	314c <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    312c:	68bb      	ldr	r3, [r7, #8]
    312e:	2b03      	cmp	r3, #3
    3130:	d106      	bne.n	3140 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3132:	693b      	ldr	r3, [r7, #16]
    3134:	2200      	movs	r2, #0
    3136:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3138:	693b      	ldr	r3, [r7, #16]
    313a:	2205      	movs	r2, #5
    313c:	70da      	strb	r2, [r3, #3]
    313e:	e005      	b.n	314c <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3140:	693b      	ldr	r3, [r7, #16]
    3142:	2206      	movs	r2, #6
    3144:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3146:	693b      	ldr	r3, [r7, #16]
    3148:	2206      	movs	r2, #6
    314a:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    314c:	693b      	ldr	r3, [r7, #16]
    314e:	69db      	ldr	r3, [r3, #28]
    3150:	693a      	ldr	r2, [r7, #16]
    3152:	78d1      	ldrb	r1, [r2, #3]
    3154:	687a      	ldr	r2, [r7, #4]
    3156:	7bf8      	ldrb	r0, [r7, #15]
    3158:	4798      	blx	r3
}
    315a:	3718      	adds	r7, #24
    315c:	46bd      	mov	sp, r7
    315e:	bd80      	pop	{r7, pc}
    3160:	00002dc5 	.word	0x00002dc5
    3164:	20001ff4 	.word	0x20001ff4
    3168:	00002fcd 	.word	0x00002fcd
    316c:	0000a4e9 	.word	0x0000a4e9

00003170 <usb_d_init>:

int32_t usb_d_init(void)
{
    3170:	b580      	push	{r7, lr}
    3172:	b082      	sub	sp, #8
    3174:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3176:	4b21      	ldr	r3, [pc, #132]	; (31fc <usb_d_init+0x8c>)
    3178:	4798      	blx	r3
    317a:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    317c:	683b      	ldr	r3, [r7, #0]
    317e:	2b00      	cmp	r3, #0
    3180:	da01      	bge.n	3186 <usb_d_init+0x16>
		return rc;
    3182:	683b      	ldr	r3, [r7, #0]
    3184:	e036      	b.n	31f4 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3186:	2280      	movs	r2, #128	; 0x80
    3188:	2100      	movs	r1, #0
    318a:	481d      	ldr	r0, [pc, #116]	; (3200 <usb_d_init+0x90>)
    318c:	4b1d      	ldr	r3, [pc, #116]	; (3204 <usb_d_init+0x94>)
    318e:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3190:	2300      	movs	r3, #0
    3192:	71fb      	strb	r3, [r7, #7]
    3194:	e01e      	b.n	31d4 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3196:	79fb      	ldrb	r3, [r7, #7]
    3198:	4a19      	ldr	r2, [pc, #100]	; (3200 <usb_d_init+0x90>)
    319a:	015b      	lsls	r3, r3, #5
    319c:	4413      	add	r3, r2
    319e:	3301      	adds	r3, #1
    31a0:	22ff      	movs	r2, #255	; 0xff
    31a2:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    31a4:	79fb      	ldrb	r3, [r7, #7]
    31a6:	4a16      	ldr	r2, [pc, #88]	; (3200 <usb_d_init+0x90>)
    31a8:	015b      	lsls	r3, r3, #5
    31aa:	4413      	add	r3, r2
    31ac:	3314      	adds	r3, #20
    31ae:	4a16      	ldr	r2, [pc, #88]	; (3208 <usb_d_init+0x98>)
    31b0:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    31b2:	79fb      	ldrb	r3, [r7, #7]
    31b4:	4a12      	ldr	r2, [pc, #72]	; (3200 <usb_d_init+0x90>)
    31b6:	015b      	lsls	r3, r3, #5
    31b8:	4413      	add	r3, r2
    31ba:	3318      	adds	r3, #24
    31bc:	4a12      	ldr	r2, [pc, #72]	; (3208 <usb_d_init+0x98>)
    31be:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    31c0:	79fb      	ldrb	r3, [r7, #7]
    31c2:	4a0f      	ldr	r2, [pc, #60]	; (3200 <usb_d_init+0x90>)
    31c4:	015b      	lsls	r3, r3, #5
    31c6:	4413      	add	r3, r2
    31c8:	331c      	adds	r3, #28
    31ca:	4a0f      	ldr	r2, [pc, #60]	; (3208 <usb_d_init+0x98>)
    31cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    31ce:	79fb      	ldrb	r3, [r7, #7]
    31d0:	3301      	adds	r3, #1
    31d2:	71fb      	strb	r3, [r7, #7]
    31d4:	79fb      	ldrb	r3, [r7, #7]
    31d6:	2b03      	cmp	r3, #3
    31d8:	d9dd      	bls.n	3196 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    31da:	490c      	ldr	r1, [pc, #48]	; (320c <usb_d_init+0x9c>)
    31dc:	2000      	movs	r0, #0
    31de:	4b0c      	ldr	r3, [pc, #48]	; (3210 <usb_d_init+0xa0>)
    31e0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    31e2:	490c      	ldr	r1, [pc, #48]	; (3214 <usb_d_init+0xa4>)
    31e4:	2001      	movs	r0, #1
    31e6:	4b0a      	ldr	r3, [pc, #40]	; (3210 <usb_d_init+0xa0>)
    31e8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    31ea:	490b      	ldr	r1, [pc, #44]	; (3218 <usb_d_init+0xa8>)
    31ec:	2002      	movs	r0, #2
    31ee:	4b08      	ldr	r3, [pc, #32]	; (3210 <usb_d_init+0xa0>)
    31f0:	4798      	blx	r3
	return ERR_NONE;
    31f2:	2300      	movs	r3, #0
}
    31f4:	4618      	mov	r0, r3
    31f6:	3708      	adds	r7, #8
    31f8:	46bd      	mov	sp, r7
    31fa:	bd80      	pop	{r7, pc}
    31fc:	00009d31 	.word	0x00009d31
    3200:	20001ff4 	.word	0x20001ff4
    3204:	0000f0a5 	.word	0x0000f0a5
    3208:	00002e99 	.word	0x00002e99
    320c:	00002eb5 	.word	0x00002eb5
    3210:	0000a979 	.word	0x0000a979
    3214:	00002f7d 	.word	0x00002f7d
    3218:	00003091 	.word	0x00003091

0000321c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    321c:	b580      	push	{r7, lr}
    321e:	b082      	sub	sp, #8
    3220:	af00      	add	r7, sp, #0
    3222:	4603      	mov	r3, r0
    3224:	6039      	str	r1, [r7, #0]
    3226:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3228:	79fb      	ldrb	r3, [r7, #7]
    322a:	6839      	ldr	r1, [r7, #0]
    322c:	4618      	mov	r0, r3
    322e:	4b03      	ldr	r3, [pc, #12]	; (323c <usb_d_register_callback+0x20>)
    3230:	4798      	blx	r3
}
    3232:	bf00      	nop
    3234:	3708      	adds	r7, #8
    3236:	46bd      	mov	sp, r7
    3238:	bd80      	pop	{r7, pc}
    323a:	bf00      	nop
    323c:	0000a931 	.word	0x0000a931

00003240 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3240:	b580      	push	{r7, lr}
    3242:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3244:	4b02      	ldr	r3, [pc, #8]	; (3250 <usb_d_enable+0x10>)
    3246:	4798      	blx	r3
    3248:	4603      	mov	r3, r0
}
    324a:	4618      	mov	r0, r3
    324c:	bd80      	pop	{r7, pc}
    324e:	bf00      	nop
    3250:	00009e21 	.word	0x00009e21

00003254 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3254:	b580      	push	{r7, lr}
    3256:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3258:	4b01      	ldr	r3, [pc, #4]	; (3260 <usb_d_attach+0xc>)
    325a:	4798      	blx	r3
}
    325c:	bf00      	nop
    325e:	bd80      	pop	{r7, pc}
    3260:	00009ea5 	.word	0x00009ea5

00003264 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3264:	b580      	push	{r7, lr}
    3266:	b082      	sub	sp, #8
    3268:	af00      	add	r7, sp, #0
    326a:	4603      	mov	r3, r0
    326c:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    326e:	79fb      	ldrb	r3, [r7, #7]
    3270:	4618      	mov	r0, r3
    3272:	4b03      	ldr	r3, [pc, #12]	; (3280 <usb_d_set_address+0x1c>)
    3274:	4798      	blx	r3
}
    3276:	bf00      	nop
    3278:	3708      	adds	r7, #8
    327a:	46bd      	mov	sp, r7
    327c:	bd80      	pop	{r7, pc}
    327e:	bf00      	nop
    3280:	00009eb9 	.word	0x00009eb9

00003284 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3284:	b580      	push	{r7, lr}
    3286:	b082      	sub	sp, #8
    3288:	af00      	add	r7, sp, #0
    328a:	4603      	mov	r3, r0
    328c:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    328e:	79fb      	ldrb	r3, [r7, #7]
    3290:	b29b      	uxth	r3, r3
    3292:	461a      	mov	r2, r3
    3294:	2100      	movs	r1, #0
    3296:	2000      	movs	r0, #0
    3298:	4b03      	ldr	r3, [pc, #12]	; (32a8 <usb_d_ep0_init+0x24>)
    329a:	4798      	blx	r3
    329c:	4603      	mov	r3, r0
}
    329e:	4618      	mov	r0, r3
    32a0:	3708      	adds	r7, #8
    32a2:	46bd      	mov	sp, r7
    32a4:	bd80      	pop	{r7, pc}
    32a6:	bf00      	nop
    32a8:	000032ad 	.word	0x000032ad

000032ac <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    32ac:	b580      	push	{r7, lr}
    32ae:	b086      	sub	sp, #24
    32b0:	af00      	add	r7, sp, #0
    32b2:	4603      	mov	r3, r0
    32b4:	71fb      	strb	r3, [r7, #7]
    32b6:	460b      	mov	r3, r1
    32b8:	71bb      	strb	r3, [r7, #6]
    32ba:	4613      	mov	r3, r2
    32bc:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    32be:	79fb      	ldrb	r3, [r7, #7]
    32c0:	4618      	mov	r0, r3
    32c2:	4b1e      	ldr	r3, [pc, #120]	; (333c <usb_d_ep_init+0x90>)
    32c4:	4798      	blx	r3
    32c6:	4603      	mov	r3, r0
    32c8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    32ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    32ce:	015b      	lsls	r3, r3, #5
    32d0:	4a1b      	ldr	r2, [pc, #108]	; (3340 <usb_d_ep_init+0x94>)
    32d2:	4413      	add	r3, r2
    32d4:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    32d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    32da:	2b00      	cmp	r3, #0
    32dc:	db02      	blt.n	32e4 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    32de:	f06f 0313 	mvn.w	r3, #19
    32e2:	e027      	b.n	3334 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    32e4:	20ff      	movs	r0, #255	; 0xff
    32e6:	4b15      	ldr	r3, [pc, #84]	; (333c <usb_d_ep_init+0x90>)
    32e8:	4798      	blx	r3
    32ea:	4603      	mov	r3, r0
    32ec:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    32ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
    32f2:	2b00      	cmp	r3, #0
    32f4:	da02      	bge.n	32fc <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    32f6:	f06f 0314 	mvn.w	r3, #20
    32fa:	e01b      	b.n	3334 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    32fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3300:	015b      	lsls	r3, r3, #5
    3302:	4a0f      	ldr	r2, [pc, #60]	; (3340 <usb_d_ep_init+0x94>)
    3304:	4413      	add	r3, r2
    3306:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3308:	88ba      	ldrh	r2, [r7, #4]
    330a:	79b9      	ldrb	r1, [r7, #6]
    330c:	79fb      	ldrb	r3, [r7, #7]
    330e:	4618      	mov	r0, r3
    3310:	4b0c      	ldr	r3, [pc, #48]	; (3344 <usb_d_ep_init+0x98>)
    3312:	4798      	blx	r3
    3314:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3316:	68fb      	ldr	r3, [r7, #12]
    3318:	2b00      	cmp	r3, #0
    331a:	da01      	bge.n	3320 <usb_d_ep_init+0x74>
		return rc;
    331c:	68fb      	ldr	r3, [r7, #12]
    331e:	e009      	b.n	3334 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3320:	693b      	ldr	r3, [r7, #16]
    3322:	79fa      	ldrb	r2, [r7, #7]
    3324:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3326:	79bb      	ldrb	r3, [r7, #6]
    3328:	f003 0303 	and.w	r3, r3, #3
    332c:	b2da      	uxtb	r2, r3
    332e:	693b      	ldr	r3, [r7, #16]
    3330:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3332:	2300      	movs	r3, #0
}
    3334:	4618      	mov	r0, r3
    3336:	3718      	adds	r7, #24
    3338:	46bd      	mov	sp, r7
    333a:	bd80      	pop	{r7, pc}
    333c:	00002dc5 	.word	0x00002dc5
    3340:	20001ff4 	.word	0x20001ff4
    3344:	00009f59 	.word	0x00009f59

00003348 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3348:	b580      	push	{r7, lr}
    334a:	b084      	sub	sp, #16
    334c:	af00      	add	r7, sp, #0
    334e:	4603      	mov	r3, r0
    3350:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3352:	79fb      	ldrb	r3, [r7, #7]
    3354:	4618      	mov	r0, r3
    3356:	4b0d      	ldr	r3, [pc, #52]	; (338c <usb_d_ep_deinit+0x44>)
    3358:	4798      	blx	r3
    335a:	4603      	mov	r3, r0
    335c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    335e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3362:	015b      	lsls	r3, r3, #5
    3364:	4a0a      	ldr	r2, [pc, #40]	; (3390 <usb_d_ep_deinit+0x48>)
    3366:	4413      	add	r3, r2
    3368:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    336e:	2b00      	cmp	r3, #0
    3370:	db07      	blt.n	3382 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3372:	79fb      	ldrb	r3, [r7, #7]
    3374:	4618      	mov	r0, r3
    3376:	4b07      	ldr	r3, [pc, #28]	; (3394 <usb_d_ep_deinit+0x4c>)
    3378:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    337a:	68bb      	ldr	r3, [r7, #8]
    337c:	22ff      	movs	r2, #255	; 0xff
    337e:	705a      	strb	r2, [r3, #1]
    3380:	e000      	b.n	3384 <usb_d_ep_deinit+0x3c>
		return;
    3382:	bf00      	nop
}
    3384:	3710      	adds	r7, #16
    3386:	46bd      	mov	sp, r7
    3388:	bd80      	pop	{r7, pc}
    338a:	bf00      	nop
    338c:	00002dc5 	.word	0x00002dc5
    3390:	20001ff4 	.word	0x20001ff4
    3394:	0000a08d 	.word	0x0000a08d

00003398 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3398:	b580      	push	{r7, lr}
    339a:	b086      	sub	sp, #24
    339c:	af00      	add	r7, sp, #0
    339e:	4603      	mov	r3, r0
    33a0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    33a2:	79fb      	ldrb	r3, [r7, #7]
    33a4:	4618      	mov	r0, r3
    33a6:	4b15      	ldr	r3, [pc, #84]	; (33fc <usb_d_ep_enable+0x64>)
    33a8:	4798      	blx	r3
    33aa:	4603      	mov	r3, r0
    33ac:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    33ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33b2:	015b      	lsls	r3, r3, #5
    33b4:	4a12      	ldr	r2, [pc, #72]	; (3400 <usb_d_ep_enable+0x68>)
    33b6:	4413      	add	r3, r2
    33b8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    33ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33be:	2b00      	cmp	r3, #0
    33c0:	da02      	bge.n	33c8 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    33c2:	f06f 0311 	mvn.w	r3, #17
    33c6:	e014      	b.n	33f2 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    33c8:	693b      	ldr	r3, [r7, #16]
    33ca:	781b      	ldrb	r3, [r3, #0]
    33cc:	2b00      	cmp	r3, #0
    33ce:	d101      	bne.n	33d4 <usb_d_ep_enable+0x3c>
    33d0:	2202      	movs	r2, #2
    33d2:	e000      	b.n	33d6 <usb_d_ep_enable+0x3e>
    33d4:	2201      	movs	r2, #1
    33d6:	693b      	ldr	r3, [r7, #16]
    33d8:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    33da:	79fb      	ldrb	r3, [r7, #7]
    33dc:	4618      	mov	r0, r3
    33de:	4b09      	ldr	r3, [pc, #36]	; (3404 <usb_d_ep_enable+0x6c>)
    33e0:	4798      	blx	r3
    33e2:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    33e4:	68fb      	ldr	r3, [r7, #12]
    33e6:	2b00      	cmp	r3, #0
    33e8:	da02      	bge.n	33f0 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    33ea:	693b      	ldr	r3, [r7, #16]
    33ec:	2200      	movs	r2, #0
    33ee:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    33f0:	68fb      	ldr	r3, [r7, #12]
}
    33f2:	4618      	mov	r0, r3
    33f4:	3718      	adds	r7, #24
    33f6:	46bd      	mov	sp, r7
    33f8:	bd80      	pop	{r7, pc}
    33fa:	bf00      	nop
    33fc:	00002dc5 	.word	0x00002dc5
    3400:	20001ff4 	.word	0x20001ff4
    3404:	0000a171 	.word	0x0000a171

00003408 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3408:	b590      	push	{r4, r7, lr}
    340a:	b08d      	sub	sp, #52	; 0x34
    340c:	af02      	add	r7, sp, #8
    340e:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3410:	687b      	ldr	r3, [r7, #4]
    3412:	7a1b      	ldrb	r3, [r3, #8]
    3414:	4618      	mov	r0, r3
    3416:	4b51      	ldr	r3, [pc, #324]	; (355c <usb_d_ep_transfer+0x154>)
    3418:	4798      	blx	r3
    341a:	4603      	mov	r3, r0
    341c:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    341e:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3422:	015b      	lsls	r3, r3, #5
    3424:	4a4e      	ldr	r2, [pc, #312]	; (3560 <usb_d_ep_transfer+0x158>)
    3426:	4413      	add	r3, r2
    3428:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    342a:	687b      	ldr	r3, [r7, #4]
    342c:	7a1b      	ldrb	r3, [r3, #8]
    342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3432:	2b00      	cmp	r3, #0
    3434:	bf14      	ite	ne
    3436:	2301      	movne	r3, #1
    3438:	2300      	moveq	r3, #0
    343a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	7a5b      	ldrb	r3, [r3, #9]
    3442:	2b00      	cmp	r3, #0
    3444:	bf14      	ite	ne
    3446:	2301      	movne	r3, #1
    3448:	2300      	moveq	r3, #0
    344a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	685b      	ldr	r3, [r3, #4]
    3452:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3454:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3458:	2b00      	cmp	r3, #0
    345a:	da02      	bge.n	3462 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    345c:	f06f 0311 	mvn.w	r3, #17
    3460:	e077      	b.n	3552 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3462:	f107 0308 	add.w	r3, r7, #8
    3466:	4618      	mov	r0, r3
    3468:	4b3e      	ldr	r3, [pc, #248]	; (3564 <usb_d_ep_transfer+0x15c>)
    346a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    346c:	69bb      	ldr	r3, [r7, #24]
    346e:	789b      	ldrb	r3, [r3, #2]
    3470:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3472:	7bfb      	ldrb	r3, [r7, #15]
    3474:	b2db      	uxtb	r3, r3
    3476:	2b01      	cmp	r3, #1
    3478:	d10c      	bne.n	3494 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    347a:	69bb      	ldr	r3, [r7, #24]
    347c:	2203      	movs	r2, #3
    347e:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3480:	f107 0308 	add.w	r3, r7, #8
    3484:	4618      	mov	r0, r3
    3486:	4b38      	ldr	r3, [pc, #224]	; (3568 <usb_d_ep_transfer+0x160>)
    3488:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    348a:	69bb      	ldr	r3, [r7, #24]
    348c:	781b      	ldrb	r3, [r3, #0]
    348e:	2b00      	cmp	r3, #0
    3490:	d151      	bne.n	3536 <usb_d_ep_transfer+0x12e>
    3492:	e017      	b.n	34c4 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3494:	f107 0308 	add.w	r3, r7, #8
    3498:	4618      	mov	r0, r3
    349a:	4b33      	ldr	r3, [pc, #204]	; (3568 <usb_d_ep_transfer+0x160>)
    349c:	4798      	blx	r3
		switch (state) {
    349e:	7bfb      	ldrb	r3, [r7, #15]
    34a0:	b2db      	uxtb	r3, r3
    34a2:	2b05      	cmp	r3, #5
    34a4:	d004      	beq.n	34b0 <usb_d_ep_transfer+0xa8>
    34a6:	2b06      	cmp	r3, #6
    34a8:	d004      	beq.n	34b4 <usb_d_ep_transfer+0xac>
    34aa:	2b00      	cmp	r3, #0
    34ac:	d005      	beq.n	34ba <usb_d_ep_transfer+0xb2>
    34ae:	e007      	b.n	34c0 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    34b0:	2302      	movs	r3, #2
    34b2:	e04e      	b.n	3552 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    34b4:	f06f 030f 	mvn.w	r3, #15
    34b8:	e04b      	b.n	3552 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    34ba:	f06f 0312 	mvn.w	r3, #18
    34be:	e048      	b.n	3552 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    34c0:	2301      	movs	r3, #1
    34c2:	e046      	b.n	3552 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    34c4:	69bb      	ldr	r3, [r7, #24]
    34c6:	7c9b      	ldrb	r3, [r3, #18]
    34c8:	b29a      	uxth	r2, r3
    34ca:	69bb      	ldr	r3, [r7, #24]
    34cc:	7cdb      	ldrb	r3, [r3, #19]
    34ce:	b29b      	uxth	r3, r3
    34d0:	021b      	lsls	r3, r3, #8
    34d2:	b29b      	uxth	r3, r3
    34d4:	4413      	add	r3, r2
    34d6:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    34d8:	8afb      	ldrh	r3, [r7, #22]
    34da:	2b00      	cmp	r3, #0
    34dc:	d10b      	bne.n	34f6 <usb_d_ep_transfer+0xee>
			dir                 = true;
    34de:	2301      	movs	r3, #1
    34e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    34e4:	2300      	movs	r3, #0
    34e6:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    34e8:	2301      	movs	r3, #1
    34ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    34ee:	69bb      	ldr	r3, [r7, #24]
    34f0:	2204      	movs	r2, #4
    34f2:	709a      	strb	r2, [r3, #2]
    34f4:	e01f      	b.n	3536 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    34f6:	69bb      	ldr	r3, [r7, #24]
    34f8:	7b1b      	ldrb	r3, [r3, #12]
    34fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    34fe:	2b00      	cmp	r3, #0
    3500:	bf14      	ite	ne
    3502:	2301      	movne	r3, #1
    3504:	2300      	moveq	r3, #0
    3506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    350a:	8afa      	ldrh	r2, [r7, #22]
    350c:	6a3b      	ldr	r3, [r7, #32]
    350e:	429a      	cmp	r2, r3
    3510:	d201      	bcs.n	3516 <usb_d_ep_transfer+0x10e>
				len = req_len;
    3512:	8afb      	ldrh	r3, [r7, #22]
    3514:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    351a:	2b00      	cmp	r3, #0
    351c:	d008      	beq.n	3530 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    351e:	8afa      	ldrh	r2, [r7, #22]
    3520:	6a3b      	ldr	r3, [r7, #32]
    3522:	429a      	cmp	r2, r3
    3524:	bf8c      	ite	hi
    3526:	2301      	movhi	r3, #1
    3528:	2300      	movls	r3, #0
    352a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    352e:	e002      	b.n	3536 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3530:	2300      	movs	r3, #0
    3532:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3536:	687b      	ldr	r3, [r7, #4]
    3538:	7a18      	ldrb	r0, [r3, #8]
    353a:	687b      	ldr	r3, [r7, #4]
    353c:	681a      	ldr	r2, [r3, #0]
    353e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3542:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3546:	9300      	str	r3, [sp, #0]
    3548:	6a3b      	ldr	r3, [r7, #32]
    354a:	4c08      	ldr	r4, [pc, #32]	; (356c <usb_d_ep_transfer+0x164>)
    354c:	47a0      	blx	r4
    354e:	6138      	str	r0, [r7, #16]
	return rc;
    3550:	693b      	ldr	r3, [r7, #16]
}
    3552:	4618      	mov	r0, r3
    3554:	372c      	adds	r7, #44	; 0x2c
    3556:	46bd      	mov	sp, r7
    3558:	bd90      	pop	{r4, r7, pc}
    355a:	bf00      	nop
    355c:	00002dc5 	.word	0x00002dc5
    3560:	20001ff4 	.word	0x20001ff4
    3564:	0000b0e5 	.word	0x0000b0e5
    3568:	0000b10b 	.word	0x0000b10b
    356c:	00002e45 	.word	0x00002e45

00003570 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3570:	b580      	push	{r7, lr}
    3572:	b084      	sub	sp, #16
    3574:	af00      	add	r7, sp, #0
    3576:	4603      	mov	r3, r0
    3578:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    357a:	79fb      	ldrb	r3, [r7, #7]
    357c:	4618      	mov	r0, r3
    357e:	4b0e      	ldr	r3, [pc, #56]	; (35b8 <usb_d_ep_abort+0x48>)
    3580:	4798      	blx	r3
    3582:	4603      	mov	r3, r0
    3584:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3586:	f997 300f 	ldrsb.w	r3, [r7, #15]
    358a:	015b      	lsls	r3, r3, #5
    358c:	4a0b      	ldr	r2, [pc, #44]	; (35bc <usb_d_ep_abort+0x4c>)
    358e:	4413      	add	r3, r2
    3590:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3592:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3596:	2b00      	cmp	r3, #0
    3598:	db0a      	blt.n	35b0 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    359a:	79fb      	ldrb	r3, [r7, #7]
    359c:	4618      	mov	r0, r3
    359e:	4b08      	ldr	r3, [pc, #32]	; (35c0 <usb_d_ep_abort+0x50>)
    35a0:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    35a2:	68bb      	ldr	r3, [r7, #8]
    35a4:	2201      	movs	r2, #1
    35a6:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    35a8:	68bb      	ldr	r3, [r7, #8]
    35aa:	2204      	movs	r2, #4
    35ac:	70da      	strb	r2, [r3, #3]
    35ae:	e000      	b.n	35b2 <usb_d_ep_abort+0x42>
		return;
    35b0:	bf00      	nop
}
    35b2:	3710      	adds	r7, #16
    35b4:	46bd      	mov	sp, r7
    35b6:	bd80      	pop	{r7, pc}
    35b8:	00002dc5 	.word	0x00002dc5
    35bc:	20001ff4 	.word	0x20001ff4
    35c0:	0000a8dd 	.word	0x0000a8dd

000035c4 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    35c4:	b580      	push	{r7, lr}
    35c6:	b086      	sub	sp, #24
    35c8:	af00      	add	r7, sp, #0
    35ca:	4603      	mov	r3, r0
    35cc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    35ce:	79fb      	ldrb	r3, [r7, #7]
    35d0:	4618      	mov	r0, r3
    35d2:	4b1a      	ldr	r3, [pc, #104]	; (363c <_usb_d_ep_halt_clr+0x78>)
    35d4:	4798      	blx	r3
    35d6:	4603      	mov	r3, r0
    35d8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    35da:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35de:	015b      	lsls	r3, r3, #5
    35e0:	4a17      	ldr	r2, [pc, #92]	; (3640 <_usb_d_ep_halt_clr+0x7c>)
    35e2:	4413      	add	r3, r2
    35e4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    35e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35ea:	2b00      	cmp	r3, #0
    35ec:	da02      	bge.n	35f4 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    35ee:	f06f 0311 	mvn.w	r3, #17
    35f2:	e01f      	b.n	3634 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    35f4:	79fb      	ldrb	r3, [r7, #7]
    35f6:	2102      	movs	r1, #2
    35f8:	4618      	mov	r0, r3
    35fa:	4b12      	ldr	r3, [pc, #72]	; (3644 <_usb_d_ep_halt_clr+0x80>)
    35fc:	4798      	blx	r3
    35fe:	4603      	mov	r3, r0
    3600:	2b00      	cmp	r3, #0
    3602:	d016      	beq.n	3632 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3604:	79fb      	ldrb	r3, [r7, #7]
    3606:	2100      	movs	r1, #0
    3608:	4618      	mov	r0, r3
    360a:	4b0e      	ldr	r3, [pc, #56]	; (3644 <_usb_d_ep_halt_clr+0x80>)
    360c:	4798      	blx	r3
    360e:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3610:	68fb      	ldr	r3, [r7, #12]
    3612:	2b00      	cmp	r3, #0
    3614:	da01      	bge.n	361a <_usb_d_ep_halt_clr+0x56>
			return rc;
    3616:	68fb      	ldr	r3, [r7, #12]
    3618:	e00c      	b.n	3634 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    361a:	693b      	ldr	r3, [r7, #16]
    361c:	2201      	movs	r2, #1
    361e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3620:	693b      	ldr	r3, [r7, #16]
    3622:	2203      	movs	r2, #3
    3624:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3626:	693b      	ldr	r3, [r7, #16]
    3628:	69db      	ldr	r3, [r3, #28]
    362a:	79f8      	ldrb	r0, [r7, #7]
    362c:	2200      	movs	r2, #0
    362e:	2103      	movs	r1, #3
    3630:	4798      	blx	r3
	}
	return ERR_NONE;
    3632:	2300      	movs	r3, #0
}
    3634:	4618      	mov	r0, r3
    3636:	3718      	adds	r7, #24
    3638:	46bd      	mov	sp, r7
    363a:	bd80      	pop	{r7, pc}
    363c:	00002dc5 	.word	0x00002dc5
    3640:	20001ff4 	.word	0x20001ff4
    3644:	0000a4e9 	.word	0x0000a4e9

00003648 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3648:	b580      	push	{r7, lr}
    364a:	b082      	sub	sp, #8
    364c:	af00      	add	r7, sp, #0
    364e:	4603      	mov	r3, r0
    3650:	460a      	mov	r2, r1
    3652:	71fb      	strb	r3, [r7, #7]
    3654:	4613      	mov	r3, r2
    3656:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3658:	79bb      	ldrb	r3, [r7, #6]
    365a:	2b00      	cmp	r3, #0
    365c:	d105      	bne.n	366a <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    365e:	79fb      	ldrb	r3, [r7, #7]
    3660:	4618      	mov	r0, r3
    3662:	4b0c      	ldr	r3, [pc, #48]	; (3694 <usb_d_ep_halt+0x4c>)
    3664:	4798      	blx	r3
    3666:	4603      	mov	r3, r0
    3668:	e00f      	b.n	368a <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    366a:	79bb      	ldrb	r3, [r7, #6]
    366c:	2b01      	cmp	r3, #1
    366e:	d106      	bne.n	367e <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3670:	79fb      	ldrb	r3, [r7, #7]
    3672:	2101      	movs	r1, #1
    3674:	4618      	mov	r0, r3
    3676:	4b08      	ldr	r3, [pc, #32]	; (3698 <usb_d_ep_halt+0x50>)
    3678:	4798      	blx	r3
    367a:	4603      	mov	r3, r0
    367c:	e005      	b.n	368a <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    367e:	79fb      	ldrb	r3, [r7, #7]
    3680:	2102      	movs	r1, #2
    3682:	4618      	mov	r0, r3
    3684:	4b04      	ldr	r3, [pc, #16]	; (3698 <usb_d_ep_halt+0x50>)
    3686:	4798      	blx	r3
    3688:	4603      	mov	r3, r0
	}
}
    368a:	4618      	mov	r0, r3
    368c:	3708      	adds	r7, #8
    368e:	46bd      	mov	sp, r7
    3690:	bd80      	pop	{r7, pc}
    3692:	bf00      	nop
    3694:	000035c5 	.word	0x000035c5
    3698:	0000a4e9 	.word	0x0000a4e9

0000369c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    369c:	b580      	push	{r7, lr}
    369e:	b086      	sub	sp, #24
    36a0:	af00      	add	r7, sp, #0
    36a2:	4603      	mov	r3, r0
    36a4:	603a      	str	r2, [r7, #0]
    36a6:	71fb      	strb	r3, [r7, #7]
    36a8:	460b      	mov	r3, r1
    36aa:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    36ac:	79fb      	ldrb	r3, [r7, #7]
    36ae:	4618      	mov	r0, r3
    36b0:	4b16      	ldr	r3, [pc, #88]	; (370c <usb_d_ep_register_callback+0x70>)
    36b2:	4798      	blx	r3
    36b4:	4603      	mov	r3, r0
    36b6:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    36b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36bc:	015b      	lsls	r3, r3, #5
    36be:	4a14      	ldr	r2, [pc, #80]	; (3710 <usb_d_ep_register_callback+0x74>)
    36c0:	4413      	add	r3, r2
    36c2:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    36c4:	683b      	ldr	r3, [r7, #0]
    36c6:	2b00      	cmp	r3, #0
    36c8:	d001      	beq.n	36ce <usb_d_ep_register_callback+0x32>
    36ca:	683b      	ldr	r3, [r7, #0]
    36cc:	e000      	b.n	36d0 <usb_d_ep_register_callback+0x34>
    36ce:	4b11      	ldr	r3, [pc, #68]	; (3714 <usb_d_ep_register_callback+0x78>)
    36d0:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    36d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36d6:	2b00      	cmp	r3, #0
    36d8:	db13      	blt.n	3702 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    36da:	79bb      	ldrb	r3, [r7, #6]
    36dc:	2b01      	cmp	r3, #1
    36de:	d008      	beq.n	36f2 <usb_d_ep_register_callback+0x56>
    36e0:	2b02      	cmp	r3, #2
    36e2:	d00a      	beq.n	36fa <usb_d_ep_register_callback+0x5e>
    36e4:	2b00      	cmp	r3, #0
    36e6:	d000      	beq.n	36ea <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    36e8:	e00c      	b.n	3704 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    36ea:	693b      	ldr	r3, [r7, #16]
    36ec:	68fa      	ldr	r2, [r7, #12]
    36ee:	615a      	str	r2, [r3, #20]
		break;
    36f0:	e008      	b.n	3704 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    36f2:	693b      	ldr	r3, [r7, #16]
    36f4:	68fa      	ldr	r2, [r7, #12]
    36f6:	619a      	str	r2, [r3, #24]
		break;
    36f8:	e004      	b.n	3704 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    36fa:	693b      	ldr	r3, [r7, #16]
    36fc:	68fa      	ldr	r2, [r7, #12]
    36fe:	61da      	str	r2, [r3, #28]
		break;
    3700:	e000      	b.n	3704 <usb_d_ep_register_callback+0x68>
		return;
    3702:	bf00      	nop
	}
}
    3704:	3718      	adds	r7, #24
    3706:	46bd      	mov	sp, r7
    3708:	bd80      	pop	{r7, pc}
    370a:	bf00      	nop
    370c:	00002dc5 	.word	0x00002dc5
    3710:	20001ff4 	.word	0x20001ff4
    3714:	00002e99 	.word	0x00002e99

00003718 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3718:	b480      	push	{r7}
    371a:	b085      	sub	sp, #20
    371c:	af00      	add	r7, sp, #0
    371e:	4603      	mov	r3, r0
    3720:	60b9      	str	r1, [r7, #8]
    3722:	607a      	str	r2, [r7, #4]
    3724:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3726:	7bfb      	ldrb	r3, [r7, #15]
    3728:	f083 0301 	eor.w	r3, r3, #1
    372c:	b2db      	uxtb	r3, r3
    372e:	2b00      	cmp	r3, #0
    3730:	d000      	beq.n	3734 <assert+0x1c>
		__asm("BKPT #0");
    3732:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3734:	bf00      	nop
    3736:	3714      	adds	r7, #20
    3738:	46bd      	mov	sp, r7
    373a:	f85d 7b04 	ldr.w	r7, [sp], #4
    373e:	4770      	bx	lr

00003740 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3740:	b480      	push	{r7}
    3742:	b085      	sub	sp, #20
    3744:	af00      	add	r7, sp, #0
    3746:	6078      	str	r0, [r7, #4]
    3748:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    374a:	687b      	ldr	r3, [r7, #4]
    374c:	681b      	ldr	r3, [r3, #0]
    374e:	60fb      	str	r3, [r7, #12]
    3750:	e008      	b.n	3764 <is_list_element+0x24>
		if (it == element) {
    3752:	68fa      	ldr	r2, [r7, #12]
    3754:	683b      	ldr	r3, [r7, #0]
    3756:	429a      	cmp	r2, r3
    3758:	d101      	bne.n	375e <is_list_element+0x1e>
			return true;
    375a:	2301      	movs	r3, #1
    375c:	e006      	b.n	376c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    375e:	68fb      	ldr	r3, [r7, #12]
    3760:	681b      	ldr	r3, [r3, #0]
    3762:	60fb      	str	r3, [r7, #12]
    3764:	68fb      	ldr	r3, [r7, #12]
    3766:	2b00      	cmp	r3, #0
    3768:	d1f3      	bne.n	3752 <is_list_element+0x12>
		}
	}

	return false;
    376a:	2300      	movs	r3, #0
}
    376c:	4618      	mov	r0, r3
    376e:	3714      	adds	r7, #20
    3770:	46bd      	mov	sp, r7
    3772:	f85d 7b04 	ldr.w	r7, [sp], #4
    3776:	4770      	bx	lr

00003778 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3778:	b580      	push	{r7, lr}
    377a:	b082      	sub	sp, #8
    377c:	af00      	add	r7, sp, #0
    377e:	6078      	str	r0, [r7, #4]
    3780:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3782:	6839      	ldr	r1, [r7, #0]
    3784:	6878      	ldr	r0, [r7, #4]
    3786:	4b0f      	ldr	r3, [pc, #60]	; (37c4 <list_insert_as_head+0x4c>)
    3788:	4798      	blx	r3
    378a:	4603      	mov	r3, r0
    378c:	2b00      	cmp	r3, #0
    378e:	bf14      	ite	ne
    3790:	2301      	movne	r3, #1
    3792:	2300      	moveq	r3, #0
    3794:	b2db      	uxtb	r3, r3
    3796:	f083 0301 	eor.w	r3, r3, #1
    379a:	b2db      	uxtb	r3, r3
    379c:	f003 0301 	and.w	r3, r3, #1
    37a0:	b2db      	uxtb	r3, r3
    37a2:	2239      	movs	r2, #57	; 0x39
    37a4:	4908      	ldr	r1, [pc, #32]	; (37c8 <list_insert_as_head+0x50>)
    37a6:	4618      	mov	r0, r3
    37a8:	4b08      	ldr	r3, [pc, #32]	; (37cc <list_insert_as_head+0x54>)
    37aa:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    37ac:	687b      	ldr	r3, [r7, #4]
    37ae:	681a      	ldr	r2, [r3, #0]
    37b0:	683b      	ldr	r3, [r7, #0]
    37b2:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    37b4:	687b      	ldr	r3, [r7, #4]
    37b6:	683a      	ldr	r2, [r7, #0]
    37b8:	601a      	str	r2, [r3, #0]
}
    37ba:	bf00      	nop
    37bc:	3708      	adds	r7, #8
    37be:	46bd      	mov	sp, r7
    37c0:	bd80      	pop	{r7, pc}
    37c2:	bf00      	nop
    37c4:	00003741 	.word	0x00003741
    37c8:	0000f4c4 	.word	0x0000f4c4
    37cc:	00003719 	.word	0x00003719

000037d0 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    37d0:	b480      	push	{r7}
    37d2:	b083      	sub	sp, #12
    37d4:	af00      	add	r7, sp, #0
    37d6:	6078      	str	r0, [r7, #4]
    37d8:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    37da:	687b      	ldr	r3, [r7, #4]
    37dc:	681a      	ldr	r2, [r3, #0]
    37de:	683b      	ldr	r3, [r7, #0]
    37e0:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    37e2:	687b      	ldr	r3, [r7, #4]
    37e4:	683a      	ldr	r2, [r7, #0]
    37e6:	601a      	str	r2, [r3, #0]
}
    37e8:	bf00      	nop
    37ea:	370c      	adds	r7, #12
    37ec:	46bd      	mov	sp, r7
    37ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    37f2:	4770      	bx	lr

000037f4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    37f4:	b580      	push	{r7, lr}
    37f6:	b084      	sub	sp, #16
    37f8:	af00      	add	r7, sp, #0
    37fa:	6078      	str	r0, [r7, #4]
    37fc:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    37fe:	687b      	ldr	r3, [r7, #4]
    3800:	681b      	ldr	r3, [r3, #0]
    3802:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3804:	6839      	ldr	r1, [r7, #0]
    3806:	6878      	ldr	r0, [r7, #4]
    3808:	4b16      	ldr	r3, [pc, #88]	; (3864 <list_insert_at_end+0x70>)
    380a:	4798      	blx	r3
    380c:	4603      	mov	r3, r0
    380e:	2b00      	cmp	r3, #0
    3810:	bf14      	ite	ne
    3812:	2301      	movne	r3, #1
    3814:	2300      	moveq	r3, #0
    3816:	b2db      	uxtb	r3, r3
    3818:	f083 0301 	eor.w	r3, r3, #1
    381c:	b2db      	uxtb	r3, r3
    381e:	f003 0301 	and.w	r3, r3, #1
    3822:	b2db      	uxtb	r3, r3
    3824:	224f      	movs	r2, #79	; 0x4f
    3826:	4910      	ldr	r1, [pc, #64]	; (3868 <list_insert_at_end+0x74>)
    3828:	4618      	mov	r0, r3
    382a:	4b10      	ldr	r3, [pc, #64]	; (386c <list_insert_at_end+0x78>)
    382c:	4798      	blx	r3

	if (!list->head) {
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	681b      	ldr	r3, [r3, #0]
    3832:	2b00      	cmp	r3, #0
    3834:	d109      	bne.n	384a <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3836:	687b      	ldr	r3, [r7, #4]
    3838:	683a      	ldr	r2, [r7, #0]
    383a:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    383c:	683b      	ldr	r3, [r7, #0]
    383e:	2200      	movs	r2, #0
    3840:	601a      	str	r2, [r3, #0]
		return;
    3842:	e00c      	b.n	385e <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3844:	68fb      	ldr	r3, [r7, #12]
    3846:	681b      	ldr	r3, [r3, #0]
    3848:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    384a:	68fb      	ldr	r3, [r7, #12]
    384c:	681b      	ldr	r3, [r3, #0]
    384e:	2b00      	cmp	r3, #0
    3850:	d1f8      	bne.n	3844 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3852:	68fb      	ldr	r3, [r7, #12]
    3854:	683a      	ldr	r2, [r7, #0]
    3856:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3858:	683b      	ldr	r3, [r7, #0]
    385a:	2200      	movs	r2, #0
    385c:	601a      	str	r2, [r3, #0]
}
    385e:	3710      	adds	r7, #16
    3860:	46bd      	mov	sp, r7
    3862:	bd80      	pop	{r7, pc}
    3864:	00003741 	.word	0x00003741
    3868:	0000f4c4 	.word	0x0000f4c4
    386c:	00003719 	.word	0x00003719

00003870 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3870:	b480      	push	{r7}
    3872:	b085      	sub	sp, #20
    3874:	af00      	add	r7, sp, #0
    3876:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3878:	687b      	ldr	r3, [r7, #4]
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	2b00      	cmp	r3, #0
    387e:	d009      	beq.n	3894 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3880:	687b      	ldr	r3, [r7, #4]
    3882:	681b      	ldr	r3, [r3, #0]
    3884:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3886:	687b      	ldr	r3, [r7, #4]
    3888:	681b      	ldr	r3, [r3, #0]
    388a:	681a      	ldr	r2, [r3, #0]
    388c:	687b      	ldr	r3, [r7, #4]
    388e:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3890:	68fb      	ldr	r3, [r7, #12]
    3892:	e000      	b.n	3896 <list_remove_head+0x26>
	}

	return NULL;
    3894:	2300      	movs	r3, #0
}
    3896:	4618      	mov	r0, r3
    3898:	3714      	adds	r7, #20
    389a:	46bd      	mov	sp, r7
    389c:	f85d 7b04 	ldr.w	r7, [sp], #4
    38a0:	4770      	bx	lr

000038a2 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    38a2:	b480      	push	{r7}
    38a4:	b085      	sub	sp, #20
    38a6:	af00      	add	r7, sp, #0
    38a8:	6078      	str	r0, [r7, #4]
    38aa:	6039      	str	r1, [r7, #0]
	if (!element) {
    38ac:	683b      	ldr	r3, [r7, #0]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d101      	bne.n	38b6 <list_delete_element+0x14>
		return false;
    38b2:	2300      	movs	r3, #0
    38b4:	e024      	b.n	3900 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    38b6:	687b      	ldr	r3, [r7, #4]
    38b8:	681a      	ldr	r2, [r3, #0]
    38ba:	683b      	ldr	r3, [r7, #0]
    38bc:	429a      	cmp	r2, r3
    38be:	d106      	bne.n	38ce <list_delete_element+0x2c>
		list->head = list->head->next;
    38c0:	687b      	ldr	r3, [r7, #4]
    38c2:	681b      	ldr	r3, [r3, #0]
    38c4:	681a      	ldr	r2, [r3, #0]
    38c6:	687b      	ldr	r3, [r7, #4]
    38c8:	601a      	str	r2, [r3, #0]
		return true;
    38ca:	2301      	movs	r3, #1
    38cc:	e018      	b.n	3900 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    38ce:	687b      	ldr	r3, [r7, #4]
    38d0:	681b      	ldr	r3, [r3, #0]
    38d2:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    38d4:	e002      	b.n	38dc <list_delete_element+0x3a>
			it = it->next;
    38d6:	68fb      	ldr	r3, [r7, #12]
    38d8:	681b      	ldr	r3, [r3, #0]
    38da:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    38dc:	68fb      	ldr	r3, [r7, #12]
    38de:	2b00      	cmp	r3, #0
    38e0:	d004      	beq.n	38ec <list_delete_element+0x4a>
    38e2:	68fb      	ldr	r3, [r7, #12]
    38e4:	681a      	ldr	r2, [r3, #0]
    38e6:	683b      	ldr	r3, [r7, #0]
    38e8:	429a      	cmp	r2, r3
    38ea:	d1f4      	bne.n	38d6 <list_delete_element+0x34>
		}
		if (it) {
    38ec:	68fb      	ldr	r3, [r7, #12]
    38ee:	2b00      	cmp	r3, #0
    38f0:	d005      	beq.n	38fe <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    38f2:	683b      	ldr	r3, [r7, #0]
    38f4:	681a      	ldr	r2, [r3, #0]
    38f6:	68fb      	ldr	r3, [r7, #12]
    38f8:	601a      	str	r2, [r3, #0]
			return true;
    38fa:	2301      	movs	r3, #1
    38fc:	e000      	b.n	3900 <list_delete_element+0x5e>
		}
	}

	return false;
    38fe:	2300      	movs	r3, #0
}
    3900:	4618      	mov	r0, r3
    3902:	3714      	adds	r7, #20
    3904:	46bd      	mov	sp, r7
    3906:	f85d 7b04 	ldr.w	r7, [sp], #4
    390a:	4770      	bx	lr

0000390c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    390c:	b480      	push	{r7}
    390e:	b083      	sub	sp, #12
    3910:	af00      	add	r7, sp, #0
    3912:	4603      	mov	r3, r0
    3914:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    391a:	2b00      	cmp	r3, #0
    391c:	db0b      	blt.n	3936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    391e:	4909      	ldr	r1, [pc, #36]	; (3944 <__NVIC_EnableIRQ+0x38>)
    3920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3924:	095b      	lsrs	r3, r3, #5
    3926:	88fa      	ldrh	r2, [r7, #6]
    3928:	f002 021f 	and.w	r2, r2, #31
    392c:	2001      	movs	r0, #1
    392e:	fa00 f202 	lsl.w	r2, r0, r2
    3932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3936:	bf00      	nop
    3938:	370c      	adds	r7, #12
    393a:	46bd      	mov	sp, r7
    393c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3940:	4770      	bx	lr
    3942:	bf00      	nop
    3944:	e000e100 	.word	0xe000e100

00003948 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3948:	b480      	push	{r7}
    394a:	b083      	sub	sp, #12
    394c:	af00      	add	r7, sp, #0
    394e:	4603      	mov	r3, r0
    3950:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3956:	2b00      	cmp	r3, #0
    3958:	db10      	blt.n	397c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    395a:	490b      	ldr	r1, [pc, #44]	; (3988 <__NVIC_DisableIRQ+0x40>)
    395c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3960:	095b      	lsrs	r3, r3, #5
    3962:	88fa      	ldrh	r2, [r7, #6]
    3964:	f002 021f 	and.w	r2, r2, #31
    3968:	2001      	movs	r0, #1
    396a:	fa00 f202 	lsl.w	r2, r0, r2
    396e:	3320      	adds	r3, #32
    3970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3974:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3978:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    397c:	bf00      	nop
    397e:	370c      	adds	r7, #12
    3980:	46bd      	mov	sp, r7
    3982:	f85d 7b04 	ldr.w	r7, [sp], #4
    3986:	4770      	bx	lr
    3988:	e000e100 	.word	0xe000e100

0000398c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    398c:	b480      	push	{r7}
    398e:	b083      	sub	sp, #12
    3990:	af00      	add	r7, sp, #0
    3992:	4603      	mov	r3, r0
    3994:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    399a:	2b00      	cmp	r3, #0
    399c:	db0c      	blt.n	39b8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    399e:	4909      	ldr	r1, [pc, #36]	; (39c4 <__NVIC_ClearPendingIRQ+0x38>)
    39a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    39a4:	095b      	lsrs	r3, r3, #5
    39a6:	88fa      	ldrh	r2, [r7, #6]
    39a8:	f002 021f 	and.w	r2, r2, #31
    39ac:	2001      	movs	r0, #1
    39ae:	fa00 f202 	lsl.w	r2, r0, r2
    39b2:	3360      	adds	r3, #96	; 0x60
    39b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    39b8:	bf00      	nop
    39ba:	370c      	adds	r7, #12
    39bc:	46bd      	mov	sp, r7
    39be:	f85d 7b04 	ldr.w	r7, [sp], #4
    39c2:	4770      	bx	lr
    39c4:	e000e100 	.word	0xe000e100

000039c8 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    39c8:	b480      	push	{r7}
    39ca:	b083      	sub	sp, #12
    39cc:	af00      	add	r7, sp, #0
    39ce:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    39d0:	687b      	ldr	r3, [r7, #4]
    39d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    39d4:	095b      	lsrs	r3, r3, #5
    39d6:	f003 0301 	and.w	r3, r3, #1
    39da:	2b00      	cmp	r3, #0
    39dc:	bf14      	ite	ne
    39de:	2301      	movne	r3, #1
    39e0:	2300      	moveq	r3, #0
    39e2:	b2db      	uxtb	r3, r3
}
    39e4:	4618      	mov	r0, r3
    39e6:	370c      	adds	r7, #12
    39e8:	46bd      	mov	sp, r7
    39ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ee:	4770      	bx	lr

000039f0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    39f0:	b480      	push	{r7}
    39f2:	b083      	sub	sp, #12
    39f4:	af00      	add	r7, sp, #0
    39f6:	6078      	str	r0, [r7, #4]
    39f8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    39fa:	687b      	ldr	r3, [r7, #4]
    39fc:	683a      	ldr	r2, [r7, #0]
    39fe:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a00:	bf00      	nop
    3a02:	370c      	adds	r7, #12
    3a04:	46bd      	mov	sp, r7
    3a06:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a0a:	4770      	bx	lr

00003a0c <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3a0c:	b480      	push	{r7}
    3a0e:	b083      	sub	sp, #12
    3a10:	af00      	add	r7, sp, #0
    3a12:	6078      	str	r0, [r7, #4]
    3a14:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	683a      	ldr	r2, [r7, #0]
    3a1a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a1c:	bf00      	nop
    3a1e:	370c      	adds	r7, #12
    3a20:	46bd      	mov	sp, r7
    3a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a26:	4770      	bx	lr

00003a28 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3a28:	b480      	push	{r7}
    3a2a:	b083      	sub	sp, #12
    3a2c:	af00      	add	r7, sp, #0
    3a2e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3a30:	687b      	ldr	r3, [r7, #4]
    3a32:	699b      	ldr	r3, [r3, #24]
    3a34:	f043 0201 	orr.w	r2, r3, #1
    3a38:	687b      	ldr	r3, [r7, #4]
    3a3a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a3c:	bf00      	nop
    3a3e:	370c      	adds	r7, #12
    3a40:	46bd      	mov	sp, r7
    3a42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a46:	4770      	bx	lr

00003a48 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3a48:	b480      	push	{r7}
    3a4a:	b085      	sub	sp, #20
    3a4c:	af00      	add	r7, sp, #0
    3a4e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	699b      	ldr	r3, [r3, #24]
    3a54:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3a56:	68fb      	ldr	r3, [r7, #12]
    3a58:	f003 0301 	and.w	r3, r3, #1
    3a5c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3a5e:	68fb      	ldr	r3, [r7, #12]
    3a60:	2b00      	cmp	r3, #0
    3a62:	bf14      	ite	ne
    3a64:	2301      	movne	r3, #1
    3a66:	2300      	moveq	r3, #0
    3a68:	b2db      	uxtb	r3, r3
}
    3a6a:	4618      	mov	r0, r3
    3a6c:	3714      	adds	r7, #20
    3a6e:	46bd      	mov	sp, r7
    3a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a74:	4770      	bx	lr

00003a76 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3a76:	b480      	push	{r7}
    3a78:	b083      	sub	sp, #12
    3a7a:	af00      	add	r7, sp, #0
    3a7c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	699b      	ldr	r3, [r3, #24]
    3a82:	f023 0201 	bic.w	r2, r3, #1
    3a86:	687b      	ldr	r3, [r7, #4]
    3a88:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a8a:	bf00      	nop
    3a8c:	370c      	adds	r7, #12
    3a8e:	46bd      	mov	sp, r7
    3a90:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a94:	4770      	bx	lr

00003a96 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3a96:	b480      	push	{r7}
    3a98:	b083      	sub	sp, #12
    3a9a:	af00      	add	r7, sp, #0
    3a9c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	699b      	ldr	r3, [r3, #24]
    3aa2:	f043 0202 	orr.w	r2, r3, #2
    3aa6:	687b      	ldr	r3, [r7, #4]
    3aa8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3aaa:	bf00      	nop
    3aac:	370c      	adds	r7, #12
    3aae:	46bd      	mov	sp, r7
    3ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ab4:	4770      	bx	lr

00003ab6 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3ab6:	b480      	push	{r7}
    3ab8:	b083      	sub	sp, #12
    3aba:	af00      	add	r7, sp, #0
    3abc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	699b      	ldr	r3, [r3, #24]
    3ac2:	f023 0202 	bic.w	r2, r3, #2
    3ac6:	687b      	ldr	r3, [r7, #4]
    3ac8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3aca:	bf00      	nop
    3acc:	370c      	adds	r7, #12
    3ace:	46bd      	mov	sp, r7
    3ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ad4:	4770      	bx	lr

00003ad6 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3ad6:	b480      	push	{r7}
    3ad8:	b083      	sub	sp, #12
    3ada:	af00      	add	r7, sp, #0
    3adc:	6078      	str	r0, [r7, #4]
    3ade:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3ae0:	687b      	ldr	r3, [r7, #4]
    3ae2:	699a      	ldr	r2, [r3, #24]
    3ae4:	683b      	ldr	r3, [r7, #0]
    3ae6:	431a      	orrs	r2, r3
    3ae8:	687b      	ldr	r3, [r7, #4]
    3aea:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3aec:	bf00      	nop
    3aee:	370c      	adds	r7, #12
    3af0:	46bd      	mov	sp, r7
    3af2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3af6:	4770      	bx	lr

00003af8 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3af8:	b480      	push	{r7}
    3afa:	b083      	sub	sp, #12
    3afc:	af00      	add	r7, sp, #0
    3afe:	6078      	str	r0, [r7, #4]
    3b00:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	683a      	ldr	r2, [r7, #0]
    3b06:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b08:	bf00      	nop
    3b0a:	370c      	adds	r7, #12
    3b0c:	46bd      	mov	sp, r7
    3b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b12:	4770      	bx	lr

00003b14 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3b14:	b480      	push	{r7}
    3b16:	b083      	sub	sp, #12
    3b18:	af00      	add	r7, sp, #0
    3b1a:	6078      	str	r0, [r7, #4]
    3b1c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	683a      	ldr	r2, [r7, #0]
    3b22:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b24:	bf00      	nop
    3b26:	370c      	adds	r7, #12
    3b28:	46bd      	mov	sp, r7
    3b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b2e:	4770      	bx	lr

00003b30 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3b30:	b480      	push	{r7}
    3b32:	b083      	sub	sp, #12
    3b34:	af00      	add	r7, sp, #0
    3b36:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3b38:	687b      	ldr	r3, [r7, #4]
    3b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3b3c:	4618      	mov	r0, r3
    3b3e:	370c      	adds	r7, #12
    3b40:	46bd      	mov	sp, r7
    3b42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b46:	4770      	bx	lr

00003b48 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3b48:	b480      	push	{r7}
    3b4a:	b083      	sub	sp, #12
    3b4c:	af00      	add	r7, sp, #0
    3b4e:	6078      	str	r0, [r7, #4]
    3b50:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3b52:	687b      	ldr	r3, [r7, #4]
    3b54:	683a      	ldr	r2, [r7, #0]
    3b56:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b58:	bf00      	nop
    3b5a:	370c      	adds	r7, #12
    3b5c:	46bd      	mov	sp, r7
    3b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b62:	4770      	bx	lr

00003b64 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3b64:	b480      	push	{r7}
    3b66:	b083      	sub	sp, #12
    3b68:	af00      	add	r7, sp, #0
    3b6a:	6078      	str	r0, [r7, #4]
    3b6c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3b6e:	687b      	ldr	r3, [r7, #4]
    3b70:	683a      	ldr	r2, [r7, #0]
    3b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b76:	bf00      	nop
    3b78:	370c      	adds	r7, #12
    3b7a:	46bd      	mov	sp, r7
    3b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b80:	4770      	bx	lr

00003b82 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3b82:	b480      	push	{r7}
    3b84:	b083      	sub	sp, #12
    3b86:	af00      	add	r7, sp, #0
    3b88:	6078      	str	r0, [r7, #4]
    3b8a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3b8c:	687b      	ldr	r3, [r7, #4]
    3b8e:	683a      	ldr	r2, [r7, #0]
    3b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b94:	bf00      	nop
    3b96:	370c      	adds	r7, #12
    3b98:	46bd      	mov	sp, r7
    3b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b9e:	4770      	bx	lr

00003ba0 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3ba0:	b480      	push	{r7}
    3ba2:	b083      	sub	sp, #12
    3ba4:	af00      	add	r7, sp, #0
    3ba6:	6078      	str	r0, [r7, #4]
    3ba8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3baa:	687b      	ldr	r3, [r7, #4]
    3bac:	683a      	ldr	r2, [r7, #0]
    3bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bb2:	bf00      	nop
    3bb4:	370c      	adds	r7, #12
    3bb6:	46bd      	mov	sp, r7
    3bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bbc:	4770      	bx	lr

00003bbe <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3bbe:	b480      	push	{r7}
    3bc0:	b083      	sub	sp, #12
    3bc2:	af00      	add	r7, sp, #0
    3bc4:	6078      	str	r0, [r7, #4]
    3bc6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3bc8:	687b      	ldr	r3, [r7, #4]
    3bca:	683a      	ldr	r2, [r7, #0]
    3bcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bd0:	bf00      	nop
    3bd2:	370c      	adds	r7, #12
    3bd4:	46bd      	mov	sp, r7
    3bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bda:	4770      	bx	lr

00003bdc <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3bdc:	b480      	push	{r7}
    3bde:	b083      	sub	sp, #12
    3be0:	af00      	add	r7, sp, #0
    3be2:	6078      	str	r0, [r7, #4]
    3be4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3be6:	687b      	ldr	r3, [r7, #4]
    3be8:	683a      	ldr	r2, [r7, #0]
    3bea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bee:	bf00      	nop
    3bf0:	370c      	adds	r7, #12
    3bf2:	46bd      	mov	sp, r7
    3bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bf8:	4770      	bx	lr

00003bfa <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3bfa:	b480      	push	{r7}
    3bfc:	b083      	sub	sp, #12
    3bfe:	af00      	add	r7, sp, #0
    3c00:	6078      	str	r0, [r7, #4]
    3c02:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3c04:	687b      	ldr	r3, [r7, #4]
    3c06:	683a      	ldr	r2, [r7, #0]
    3c08:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c0c:	bf00      	nop
    3c0e:	370c      	adds	r7, #12
    3c10:	46bd      	mov	sp, r7
    3c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c16:	4770      	bx	lr

00003c18 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3c18:	b480      	push	{r7}
    3c1a:	b083      	sub	sp, #12
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	6078      	str	r0, [r7, #4]
    3c20:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	683a      	ldr	r2, [r7, #0]
    3c26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c2a:	bf00      	nop
    3c2c:	370c      	adds	r7, #12
    3c2e:	46bd      	mov	sp, r7
    3c30:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c34:	4770      	bx	lr

00003c36 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3c36:	b480      	push	{r7}
    3c38:	b083      	sub	sp, #12
    3c3a:	af00      	add	r7, sp, #0
    3c3c:	6078      	str	r0, [r7, #4]
    3c3e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3c40:	687b      	ldr	r3, [r7, #4]
    3c42:	683a      	ldr	r2, [r7, #0]
    3c44:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c48:	bf00      	nop
    3c4a:	370c      	adds	r7, #12
    3c4c:	46bd      	mov	sp, r7
    3c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c52:	4770      	bx	lr

00003c54 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3c54:	b480      	push	{r7}
    3c56:	b083      	sub	sp, #12
    3c58:	af00      	add	r7, sp, #0
    3c5a:	6078      	str	r0, [r7, #4]
    3c5c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3c5e:	687b      	ldr	r3, [r7, #4]
    3c60:	683a      	ldr	r2, [r7, #0]
    3c62:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c66:	bf00      	nop
    3c68:	370c      	adds	r7, #12
    3c6a:	46bd      	mov	sp, r7
    3c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c70:	4770      	bx	lr
	...

00003c74 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3c74:	b580      	push	{r7, lr}
    3c76:	b082      	sub	sp, #8
    3c78:	af00      	add	r7, sp, #0
    3c7a:	6078      	str	r0, [r7, #4]
    3c7c:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	683a      	ldr	r2, [r7, #0]
    3c82:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	681b      	ldr	r3, [r3, #0]
    3c88:	4618      	mov	r0, r3
    3c8a:	4b55      	ldr	r3, [pc, #340]	; (3de0 <_can_async_init+0x16c>)
    3c8c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3c8e:	bf00      	nop
    3c90:	687b      	ldr	r3, [r7, #4]
    3c92:	681b      	ldr	r3, [r3, #0]
    3c94:	4618      	mov	r0, r3
    3c96:	4b53      	ldr	r3, [pc, #332]	; (3de4 <_can_async_init+0x170>)
    3c98:	4798      	blx	r3
    3c9a:	4603      	mov	r3, r0
    3c9c:	f083 0301 	eor.w	r3, r3, #1
    3ca0:	b2db      	uxtb	r3, r3
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d1f4      	bne.n	3c90 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3ca6:	687b      	ldr	r3, [r7, #4]
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	4618      	mov	r0, r3
    3cac:	4b4e      	ldr	r3, [pc, #312]	; (3de8 <_can_async_init+0x174>)
    3cae:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3cb0:	683b      	ldr	r3, [r7, #0]
    3cb2:	4a4e      	ldr	r2, [pc, #312]	; (3dec <_can_async_init+0x178>)
    3cb4:	4293      	cmp	r3, r2
    3cb6:	d17a      	bne.n	3dae <_can_async_init+0x13a>
		_can1_dev    = dev;
    3cb8:	4a4d      	ldr	r2, [pc, #308]	; (3df0 <_can_async_init+0x17c>)
    3cba:	687b      	ldr	r3, [r7, #4]
    3cbc:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3cbe:	687b      	ldr	r3, [r7, #4]
    3cc0:	4a4c      	ldr	r2, [pc, #304]	; (3df4 <_can_async_init+0x180>)
    3cc2:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	681b      	ldr	r3, [r3, #0]
    3cc8:	f44f 7140 	mov.w	r1, #768	; 0x300
    3ccc:	4618      	mov	r0, r3
    3cce:	4b4a      	ldr	r3, [pc, #296]	; (3df8 <_can_async_init+0x184>)
    3cd0:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3cd2:	687b      	ldr	r3, [r7, #4]
    3cd4:	681b      	ldr	r3, [r3, #0]
    3cd6:	2102      	movs	r1, #2
    3cd8:	4618      	mov	r0, r3
    3cda:	4b48      	ldr	r3, [pc, #288]	; (3dfc <_can_async_init+0x188>)
    3cdc:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	681b      	ldr	r3, [r3, #0]
    3ce2:	4947      	ldr	r1, [pc, #284]	; (3e00 <_can_async_init+0x18c>)
    3ce4:	4618      	mov	r0, r3
    3ce6:	4b47      	ldr	r3, [pc, #284]	; (3e04 <_can_async_init+0x190>)
    3ce8:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3cea:	687b      	ldr	r3, [r7, #4]
    3cec:	681b      	ldr	r3, [r3, #0]
    3cee:	4946      	ldr	r1, [pc, #280]	; (3e08 <_can_async_init+0x194>)
    3cf0:	4618      	mov	r0, r3
    3cf2:	4b46      	ldr	r3, [pc, #280]	; (3e0c <_can_async_init+0x198>)
    3cf4:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3cf6:	687b      	ldr	r3, [r7, #4]
    3cf8:	681a      	ldr	r2, [r3, #0]
    3cfa:	4b45      	ldr	r3, [pc, #276]	; (3e10 <_can_async_init+0x19c>)
    3cfc:	b29b      	uxth	r3, r3
    3cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3d06:	4619      	mov	r1, r3
    3d08:	4610      	mov	r0, r2
    3d0a:	4b42      	ldr	r3, [pc, #264]	; (3e14 <_can_async_init+0x1a0>)
    3d0c:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3d0e:	687b      	ldr	r3, [r7, #4]
    3d10:	681b      	ldr	r3, [r3, #0]
    3d12:	2107      	movs	r1, #7
    3d14:	4618      	mov	r0, r3
    3d16:	4b40      	ldr	r3, [pc, #256]	; (3e18 <_can_async_init+0x1a4>)
    3d18:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	681b      	ldr	r3, [r3, #0]
    3d1e:	2107      	movs	r1, #7
    3d20:	4618      	mov	r0, r3
    3d22:	4b3e      	ldr	r3, [pc, #248]	; (3e1c <_can_async_init+0x1a8>)
    3d24:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3d26:	687b      	ldr	r3, [r7, #4]
    3d28:	681a      	ldr	r2, [r3, #0]
    3d2a:	4b3d      	ldr	r3, [pc, #244]	; (3e20 <_can_async_init+0x1ac>)
    3d2c:	b29b      	uxth	r3, r3
    3d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3d32:	4619      	mov	r1, r3
    3d34:	4610      	mov	r0, r2
    3d36:	4b3b      	ldr	r3, [pc, #236]	; (3e24 <_can_async_init+0x1b0>)
    3d38:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3d3a:	687b      	ldr	r3, [r7, #4]
    3d3c:	681a      	ldr	r2, [r3, #0]
    3d3e:	4b3a      	ldr	r3, [pc, #232]	; (3e28 <_can_async_init+0x1b4>)
    3d40:	b29b      	uxth	r3, r3
    3d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3d46:	4619      	mov	r1, r3
    3d48:	4610      	mov	r0, r2
    3d4a:	4b38      	ldr	r3, [pc, #224]	; (3e2c <_can_async_init+0x1b8>)
    3d4c:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3d4e:	687b      	ldr	r3, [r7, #4]
    3d50:	681b      	ldr	r3, [r3, #0]
    3d52:	2108      	movs	r1, #8
    3d54:	4618      	mov	r0, r3
    3d56:	4b36      	ldr	r3, [pc, #216]	; (3e30 <_can_async_init+0x1bc>)
    3d58:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3d5a:	687b      	ldr	r3, [r7, #4]
    3d5c:	681a      	ldr	r2, [r3, #0]
    3d5e:	4b35      	ldr	r3, [pc, #212]	; (3e34 <_can_async_init+0x1c0>)
    3d60:	b29b      	uxth	r3, r3
    3d62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3d66:	4619      	mov	r1, r3
    3d68:	4610      	mov	r0, r2
    3d6a:	4b33      	ldr	r3, [pc, #204]	; (3e38 <_can_async_init+0x1c4>)
    3d6c:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	681a      	ldr	r2, [r3, #0]
    3d72:	4b32      	ldr	r3, [pc, #200]	; (3e3c <_can_async_init+0x1c8>)
    3d74:	b29b      	uxth	r3, r3
    3d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3d7a:	4619      	mov	r1, r3
    3d7c:	4610      	mov	r0, r2
    3d7e:	4b30      	ldr	r3, [pc, #192]	; (3e40 <_can_async_init+0x1cc>)
    3d80:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	681b      	ldr	r3, [r3, #0]
    3d86:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3d8a:	4618      	mov	r0, r3
    3d8c:	4b2d      	ldr	r3, [pc, #180]	; (3e44 <_can_async_init+0x1d0>)
    3d8e:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3d90:	204f      	movs	r0, #79	; 0x4f
    3d92:	4b2d      	ldr	r3, [pc, #180]	; (3e48 <_can_async_init+0x1d4>)
    3d94:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3d96:	204f      	movs	r0, #79	; 0x4f
    3d98:	4b2c      	ldr	r3, [pc, #176]	; (3e4c <_can_async_init+0x1d8>)
    3d9a:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3d9c:	204f      	movs	r0, #79	; 0x4f
    3d9e:	4b2c      	ldr	r3, [pc, #176]	; (3e50 <_can_async_init+0x1dc>)
    3da0:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3da2:	687b      	ldr	r3, [r7, #4]
    3da4:	681b      	ldr	r3, [r3, #0]
    3da6:	2101      	movs	r1, #1
    3da8:	4618      	mov	r0, r3
    3daa:	4b2a      	ldr	r3, [pc, #168]	; (3e54 <_can_async_init+0x1e0>)
    3dac:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3dae:	687b      	ldr	r3, [r7, #4]
    3db0:	681b      	ldr	r3, [r3, #0]
    3db2:	4618      	mov	r0, r3
    3db4:	4b28      	ldr	r3, [pc, #160]	; (3e58 <_can_async_init+0x1e4>)
    3db6:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	681b      	ldr	r3, [r3, #0]
    3dbc:	4618      	mov	r0, r3
    3dbe:	4b27      	ldr	r3, [pc, #156]	; (3e5c <_can_async_init+0x1e8>)
    3dc0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3dc2:	bf00      	nop
    3dc4:	687b      	ldr	r3, [r7, #4]
    3dc6:	681b      	ldr	r3, [r3, #0]
    3dc8:	4618      	mov	r0, r3
    3dca:	4b06      	ldr	r3, [pc, #24]	; (3de4 <_can_async_init+0x170>)
    3dcc:	4798      	blx	r3
    3dce:	4603      	mov	r3, r0
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	d1f7      	bne.n	3dc4 <_can_async_init+0x150>
	};

	return ERR_NONE;
    3dd4:	2300      	movs	r3, #0
}
    3dd6:	4618      	mov	r0, r3
    3dd8:	3708      	adds	r7, #8
    3dda:	46bd      	mov	sp, r7
    3ddc:	bd80      	pop	{r7, pc}
    3dde:	bf00      	nop
    3de0:	00003a29 	.word	0x00003a29
    3de4:	00003a49 	.word	0x00003a49
    3de8:	00003a97 	.word	0x00003a97
    3dec:	42000400 	.word	0x42000400
    3df0:	20002114 	.word	0x20002114
    3df4:	20000004 	.word	0x20000004
    3df8:	00003ad7 	.word	0x00003ad7
    3dfc:	000039f1 	.word	0x000039f1
    3e00:	00010c01 	.word	0x00010c01
    3e04:	00003af9 	.word	0x00003af9
    3e08:	00010c10 	.word	0x00010c10
    3e0c:	00003a0d 	.word	0x00003a0d
    3e10:	2000a590 	.word	0x2000a590
    3e14:	00003bdd 	.word	0x00003bdd
    3e18:	00003bfb 	.word	0x00003bfb
    3e1c:	00003c37 	.word	0x00003c37
    3e20:	2000a548 	.word	0x2000a548
    3e24:	00003c19 	.word	0x00003c19
    3e28:	20002074 	.word	0x20002074
    3e2c:	00003c55 	.word	0x00003c55
    3e30:	00003b65 	.word	0x00003b65
    3e34:	20002084 	.word	0x20002084
    3e38:	00003b83 	.word	0x00003b83
    3e3c:	20002104 	.word	0x20002104
    3e40:	00003ba1 	.word	0x00003ba1
    3e44:	00003bbf 	.word	0x00003bbf
    3e48:	00003949 	.word	0x00003949
    3e4c:	0000398d 	.word	0x0000398d
    3e50:	0000390d 	.word	0x0000390d
    3e54:	00003b49 	.word	0x00003b49
    3e58:	00003ab7 	.word	0x00003ab7
    3e5c:	00003a77 	.word	0x00003a77

00003e60 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3e60:	b590      	push	{r4, r7, lr}
    3e62:	b083      	sub	sp, #12
    3e64:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3e66:	4b2c      	ldr	r3, [pc, #176]	; (3f18 <CAN1_Handler+0xb8>)
    3e68:	681b      	ldr	r3, [r3, #0]
    3e6a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3e6c:	687b      	ldr	r3, [r7, #4]
    3e6e:	681b      	ldr	r3, [r3, #0]
    3e70:	4618      	mov	r0, r3
    3e72:	4b2a      	ldr	r3, [pc, #168]	; (3f1c <CAN1_Handler+0xbc>)
    3e74:	4798      	blx	r3
    3e76:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3e78:	683b      	ldr	r3, [r7, #0]
    3e7a:	f003 0301 	and.w	r3, r3, #1
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d003      	beq.n	3e8a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3e82:	687b      	ldr	r3, [r7, #4]
    3e84:	689b      	ldr	r3, [r3, #8]
    3e86:	6878      	ldr	r0, [r7, #4]
    3e88:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3e8a:	683b      	ldr	r3, [r7, #0]
    3e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3e90:	2b00      	cmp	r3, #0
    3e92:	d003      	beq.n	3e9c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	685b      	ldr	r3, [r3, #4]
    3e98:	6878      	ldr	r0, [r7, #4]
    3e9a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3e9c:	683b      	ldr	r3, [r7, #0]
    3e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d004      	beq.n	3eb0 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	68db      	ldr	r3, [r3, #12]
    3eaa:	2103      	movs	r1, #3
    3eac:	6878      	ldr	r0, [r7, #4]
    3eae:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3eb0:	683b      	ldr	r3, [r7, #0]
    3eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	d004      	beq.n	3ec4 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	68db      	ldr	r3, [r3, #12]
    3ebe:	2100      	movs	r1, #0
    3ec0:	6878      	ldr	r0, [r7, #4]
    3ec2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3ec4:	683b      	ldr	r3, [r7, #0]
    3ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d00f      	beq.n	3eee <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	68dc      	ldr	r4, [r3, #12]
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	681b      	ldr	r3, [r3, #0]
    3ed6:	4618      	mov	r0, r3
    3ed8:	4b11      	ldr	r3, [pc, #68]	; (3f20 <CAN1_Handler+0xc0>)
    3eda:	4798      	blx	r3
    3edc:	4603      	mov	r3, r0
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d001      	beq.n	3ee6 <CAN1_Handler+0x86>
    3ee2:	2302      	movs	r3, #2
    3ee4:	e000      	b.n	3ee8 <CAN1_Handler+0x88>
    3ee6:	2301      	movs	r3, #1
    3ee8:	4619      	mov	r1, r3
    3eea:	6878      	ldr	r0, [r7, #4]
    3eec:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3eee:	683b      	ldr	r3, [r7, #0]
    3ef0:	f003 0308 	and.w	r3, r3, #8
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d004      	beq.n	3f02 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3ef8:	687b      	ldr	r3, [r7, #4]
    3efa:	68db      	ldr	r3, [r3, #12]
    3efc:	2104      	movs	r1, #4
    3efe:	6878      	ldr	r0, [r7, #4]
    3f00:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	681b      	ldr	r3, [r3, #0]
    3f06:	6839      	ldr	r1, [r7, #0]
    3f08:	4618      	mov	r0, r3
    3f0a:	4b06      	ldr	r3, [pc, #24]	; (3f24 <CAN1_Handler+0xc4>)
    3f0c:	4798      	blx	r3
}
    3f0e:	bf00      	nop
    3f10:	370c      	adds	r7, #12
    3f12:	46bd      	mov	sp, r7
    3f14:	bd90      	pop	{r4, r7, pc}
    3f16:	bf00      	nop
    3f18:	20002114 	.word	0x20002114
    3f1c:	00003b31 	.word	0x00003b31
    3f20:	000039c9 	.word	0x000039c9
    3f24:	00003b15 	.word	0x00003b15

00003f28 <__NVIC_SetPendingIRQ>:
{
    3f28:	b480      	push	{r7}
    3f2a:	b083      	sub	sp, #12
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	4603      	mov	r3, r0
    3f30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f36:	2b00      	cmp	r3, #0
    3f38:	db0c      	blt.n	3f54 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f3a:	4909      	ldr	r1, [pc, #36]	; (3f60 <__NVIC_SetPendingIRQ+0x38>)
    3f3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f40:	095b      	lsrs	r3, r3, #5
    3f42:	88fa      	ldrh	r2, [r7, #6]
    3f44:	f002 021f 	and.w	r2, r2, #31
    3f48:	2001      	movs	r0, #1
    3f4a:	fa00 f202 	lsl.w	r2, r0, r2
    3f4e:	3340      	adds	r3, #64	; 0x40
    3f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3f54:	bf00      	nop
    3f56:	370c      	adds	r7, #12
    3f58:	46bd      	mov	sp, r7
    3f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f5e:	4770      	bx	lr
    3f60:	e000e100 	.word	0xe000e100

00003f64 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b082      	sub	sp, #8
    3f68:	af00      	add	r7, sp, #0
    3f6a:	4603      	mov	r3, r0
    3f6c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3f6e:	79fb      	ldrb	r3, [r7, #7]
    3f70:	b21b      	sxth	r3, r3
    3f72:	4618      	mov	r0, r3
    3f74:	4b02      	ldr	r3, [pc, #8]	; (3f80 <_irq_set+0x1c>)
    3f76:	4798      	blx	r3
}
    3f78:	bf00      	nop
    3f7a:	3708      	adds	r7, #8
    3f7c:	46bd      	mov	sp, r7
    3f7e:	bd80      	pop	{r7, pc}
    3f80:	00003f29 	.word	0x00003f29

00003f84 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3f84:	b480      	push	{r7}
    3f86:	b083      	sub	sp, #12
    3f88:	af00      	add	r7, sp, #0
    3f8a:	4603      	mov	r3, r0
    3f8c:	6039      	str	r1, [r7, #0]
    3f8e:	80fb      	strh	r3, [r7, #6]
    3f90:	4613      	mov	r3, r2
    3f92:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3f94:	797b      	ldrb	r3, [r7, #5]
    3f96:	3b04      	subs	r3, #4
    3f98:	2b05      	cmp	r3, #5
    3f9a:	d86b      	bhi.n	4074 <_get_cycles_for_us_internal+0xf0>
    3f9c:	a201      	add	r2, pc, #4	; (adr r2, 3fa4 <_get_cycles_for_us_internal+0x20>)
    3f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3fa2:	bf00      	nop
    3fa4:	00004053 	.word	0x00004053
    3fa8:	00004033 	.word	0x00004033
    3fac:	00004015 	.word	0x00004015
    3fb0:	00003ff7 	.word	0x00003ff7
    3fb4:	00003fd9 	.word	0x00003fd9
    3fb8:	00003fbd 	.word	0x00003fbd
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3fbc:	88fb      	ldrh	r3, [r7, #6]
    3fbe:	683a      	ldr	r2, [r7, #0]
    3fc0:	4935      	ldr	r1, [pc, #212]	; (4098 <_get_cycles_for_us_internal+0x114>)
    3fc2:	fba1 1202 	umull	r1, r2, r1, r2
    3fc6:	0c92      	lsrs	r2, r2, #18
    3fc8:	fb02 f303 	mul.w	r3, r2, r3
    3fcc:	3302      	adds	r3, #2
    3fce:	4a33      	ldr	r2, [pc, #204]	; (409c <_get_cycles_for_us_internal+0x118>)
    3fd0:	fba2 2303 	umull	r2, r3, r2, r3
    3fd4:	085b      	lsrs	r3, r3, #1
    3fd6:	e059      	b.n	408c <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3fd8:	88fb      	ldrh	r3, [r7, #6]
    3fda:	683a      	ldr	r2, [r7, #0]
    3fdc:	0952      	lsrs	r2, r2, #5
    3fde:	4930      	ldr	r1, [pc, #192]	; (40a0 <_get_cycles_for_us_internal+0x11c>)
    3fe0:	fba1 1202 	umull	r1, r2, r1, r2
    3fe4:	09d2      	lsrs	r2, r2, #7
    3fe6:	fb02 f303 	mul.w	r3, r2, r3
    3fea:	331d      	adds	r3, #29
    3fec:	4a2d      	ldr	r2, [pc, #180]	; (40a4 <_get_cycles_for_us_internal+0x120>)
    3fee:	fba2 2303 	umull	r2, r3, r2, r3
    3ff2:	091b      	lsrs	r3, r3, #4
    3ff4:	e04a      	b.n	408c <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3ff6:	88fb      	ldrh	r3, [r7, #6]
    3ff8:	683a      	ldr	r2, [r7, #0]
    3ffa:	492b      	ldr	r1, [pc, #172]	; (40a8 <_get_cycles_for_us_internal+0x124>)
    3ffc:	fba1 1202 	umull	r1, r2, r1, r2
    4000:	0b52      	lsrs	r2, r2, #13
    4002:	fb02 f303 	mul.w	r3, r2, r3
    4006:	f203 132b 	addw	r3, r3, #299	; 0x12b
    400a:	4a28      	ldr	r2, [pc, #160]	; (40ac <_get_cycles_for_us_internal+0x128>)
    400c:	fba2 2303 	umull	r2, r3, r2, r3
    4010:	095b      	lsrs	r3, r3, #5
    4012:	e03b      	b.n	408c <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4014:	88fb      	ldrh	r3, [r7, #6]
    4016:	683a      	ldr	r2, [r7, #0]
    4018:	4925      	ldr	r1, [pc, #148]	; (40b0 <_get_cycles_for_us_internal+0x12c>)
    401a:	fba1 1202 	umull	r1, r2, r1, r2
    401e:	0992      	lsrs	r2, r2, #6
    4020:	fb02 f303 	mul.w	r3, r2, r3
    4024:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4028:	4a22      	ldr	r2, [pc, #136]	; (40b4 <_get_cycles_for_us_internal+0x130>)
    402a:	fba2 2303 	umull	r2, r3, r2, r3
    402e:	099b      	lsrs	r3, r3, #6
    4030:	e02c      	b.n	408c <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4032:	88fb      	ldrh	r3, [r7, #6]
    4034:	683a      	ldr	r2, [r7, #0]
    4036:	4920      	ldr	r1, [pc, #128]	; (40b8 <_get_cycles_for_us_internal+0x134>)
    4038:	fba1 1202 	umull	r1, r2, r1, r2
    403c:	0952      	lsrs	r2, r2, #5
    403e:	fb02 f303 	mul.w	r3, r2, r3
    4042:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4046:	332f      	adds	r3, #47	; 0x2f
    4048:	4a1c      	ldr	r2, [pc, #112]	; (40bc <_get_cycles_for_us_internal+0x138>)
    404a:	fba2 2303 	umull	r2, r3, r2, r3
    404e:	0b5b      	lsrs	r3, r3, #13
    4050:	e01c      	b.n	408c <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    4052:	88fb      	ldrh	r3, [r7, #6]
    4054:	683a      	ldr	r2, [r7, #0]
    4056:	491a      	ldr	r1, [pc, #104]	; (40c0 <_get_cycles_for_us_internal+0x13c>)
    4058:	fba1 1202 	umull	r1, r2, r1, r2
    405c:	08d2      	lsrs	r2, r2, #3
    405e:	fb02 f303 	mul.w	r3, r2, r3
    4062:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4066:	f203 33df 	addw	r3, r3, #991	; 0x3df
    406a:	4a16      	ldr	r2, [pc, #88]	; (40c4 <_get_cycles_for_us_internal+0x140>)
    406c:	fba2 2303 	umull	r2, r3, r2, r3
    4070:	0c5b      	lsrs	r3, r3, #17
    4072:	e00b      	b.n	408c <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4074:	88fb      	ldrh	r3, [r7, #6]
    4076:	683a      	ldr	r2, [r7, #0]
    4078:	fb02 f303 	mul.w	r3, r2, r3
    407c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4080:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4084:	4a10      	ldr	r2, [pc, #64]	; (40c8 <_get_cycles_for_us_internal+0x144>)
    4086:	fba2 2303 	umull	r2, r3, r2, r3
    408a:	0c9b      	lsrs	r3, r3, #18
	}
}
    408c:	4618      	mov	r0, r3
    408e:	370c      	adds	r7, #12
    4090:	46bd      	mov	sp, r7
    4092:	f85d 7b04 	ldr.w	r7, [sp], #4
    4096:	4770      	bx	lr
    4098:	431bde83 	.word	0x431bde83
    409c:	aaaaaaab 	.word	0xaaaaaaab
    40a0:	0a7c5ac5 	.word	0x0a7c5ac5
    40a4:	88888889 	.word	0x88888889
    40a8:	d1b71759 	.word	0xd1b71759
    40ac:	1b4e81b5 	.word	0x1b4e81b5
    40b0:	10624dd3 	.word	0x10624dd3
    40b4:	057619f1 	.word	0x057619f1
    40b8:	51eb851f 	.word	0x51eb851f
    40bc:	45e7b273 	.word	0x45e7b273
    40c0:	cccccccd 	.word	0xcccccccd
    40c4:	6fd91d85 	.word	0x6fd91d85
    40c8:	165e9f81 	.word	0x165e9f81

000040cc <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b082      	sub	sp, #8
    40d0:	af00      	add	r7, sp, #0
    40d2:	4603      	mov	r3, r0
    40d4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    40d6:	88fb      	ldrh	r3, [r7, #6]
    40d8:	2209      	movs	r2, #9
    40da:	4904      	ldr	r1, [pc, #16]	; (40ec <_get_cycles_for_us+0x20>)
    40dc:	4618      	mov	r0, r3
    40de:	4b04      	ldr	r3, [pc, #16]	; (40f0 <_get_cycles_for_us+0x24>)
    40e0:	4798      	blx	r3
    40e2:	4603      	mov	r3, r0
}
    40e4:	4618      	mov	r0, r3
    40e6:	3708      	adds	r7, #8
    40e8:	46bd      	mov	sp, r7
    40ea:	bd80      	pop	{r7, pc}
    40ec:	07270e00 	.word	0x07270e00
    40f0:	00003f85 	.word	0x00003f85

000040f4 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    40f4:	b480      	push	{r7}
    40f6:	b083      	sub	sp, #12
    40f8:	af00      	add	r7, sp, #0
    40fa:	4603      	mov	r3, r0
    40fc:	6039      	str	r1, [r7, #0]
    40fe:	80fb      	strh	r3, [r7, #6]
    4100:	4613      	mov	r3, r2
    4102:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4104:	797b      	ldrb	r3, [r7, #5]
    4106:	3b04      	subs	r3, #4
    4108:	2b05      	cmp	r3, #5
    410a:	d870      	bhi.n	41ee <_get_cycles_for_ms_internal+0xfa>
    410c:	a201      	add	r2, pc, #4	; (adr r2, 4114 <_get_cycles_for_ms_internal+0x20>)
    410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4112:	bf00      	nop
    4114:	000041d1 	.word	0x000041d1
    4118:	000041b5 	.word	0x000041b5
    411c:	00004199 	.word	0x00004199
    4120:	00004175 	.word	0x00004175
    4124:	00004151 	.word	0x00004151
    4128:	0000412d 	.word	0x0000412d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    412c:	88fb      	ldrh	r3, [r7, #6]
    412e:	683a      	ldr	r2, [r7, #0]
    4130:	4937      	ldr	r1, [pc, #220]	; (4210 <_get_cycles_for_ms_internal+0x11c>)
    4132:	fba1 1202 	umull	r1, r2, r1, r2
    4136:	0c92      	lsrs	r2, r2, #18
    4138:	fb02 f303 	mul.w	r3, r2, r3
    413c:	3302      	adds	r3, #2
    413e:	4a35      	ldr	r2, [pc, #212]	; (4214 <_get_cycles_for_ms_internal+0x120>)
    4140:	fba2 2303 	umull	r2, r3, r2, r3
    4144:	085b      	lsrs	r3, r3, #1
    4146:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    414a:	fb02 f303 	mul.w	r3, r2, r3
    414e:	e058      	b.n	4202 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4150:	88fb      	ldrh	r3, [r7, #6]
    4152:	683a      	ldr	r2, [r7, #0]
    4154:	0952      	lsrs	r2, r2, #5
    4156:	4930      	ldr	r1, [pc, #192]	; (4218 <_get_cycles_for_ms_internal+0x124>)
    4158:	fba1 1202 	umull	r1, r2, r1, r2
    415c:	09d2      	lsrs	r2, r2, #7
    415e:	fb02 f303 	mul.w	r3, r2, r3
    4162:	3302      	adds	r3, #2
    4164:	4a2b      	ldr	r2, [pc, #172]	; (4214 <_get_cycles_for_ms_internal+0x120>)
    4166:	fba2 2303 	umull	r2, r3, r2, r3
    416a:	085b      	lsrs	r3, r3, #1
    416c:	2264      	movs	r2, #100	; 0x64
    416e:	fb02 f303 	mul.w	r3, r2, r3
    4172:	e046      	b.n	4202 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4174:	88fb      	ldrh	r3, [r7, #6]
    4176:	683a      	ldr	r2, [r7, #0]
    4178:	4928      	ldr	r1, [pc, #160]	; (421c <_get_cycles_for_ms_internal+0x128>)
    417a:	fba1 1202 	umull	r1, r2, r1, r2
    417e:	0b52      	lsrs	r2, r2, #13
    4180:	fb02 f303 	mul.w	r3, r2, r3
    4184:	3302      	adds	r3, #2
    4186:	4a23      	ldr	r2, [pc, #140]	; (4214 <_get_cycles_for_ms_internal+0x120>)
    4188:	fba2 2303 	umull	r2, r3, r2, r3
    418c:	085a      	lsrs	r2, r3, #1
    418e:	4613      	mov	r3, r2
    4190:	009b      	lsls	r3, r3, #2
    4192:	4413      	add	r3, r2
    4194:	005b      	lsls	r3, r3, #1
    4196:	e034      	b.n	4202 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4198:	88fb      	ldrh	r3, [r7, #6]
    419a:	683a      	ldr	r2, [r7, #0]
    419c:	4920      	ldr	r1, [pc, #128]	; (4220 <_get_cycles_for_ms_internal+0x12c>)
    419e:	fba1 1202 	umull	r1, r2, r1, r2
    41a2:	0992      	lsrs	r2, r2, #6
    41a4:	fb02 f303 	mul.w	r3, r2, r3
    41a8:	3302      	adds	r3, #2
    41aa:	4a1a      	ldr	r2, [pc, #104]	; (4214 <_get_cycles_for_ms_internal+0x120>)
    41ac:	fba2 2303 	umull	r2, r3, r2, r3
    41b0:	085b      	lsrs	r3, r3, #1
    41b2:	e026      	b.n	4202 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    41b4:	88fb      	ldrh	r3, [r7, #6]
    41b6:	683a      	ldr	r2, [r7, #0]
    41b8:	491a      	ldr	r1, [pc, #104]	; (4224 <_get_cycles_for_ms_internal+0x130>)
    41ba:	fba1 1202 	umull	r1, r2, r1, r2
    41be:	0952      	lsrs	r2, r2, #5
    41c0:	fb02 f303 	mul.w	r3, r2, r3
    41c4:	331d      	adds	r3, #29
    41c6:	4a18      	ldr	r2, [pc, #96]	; (4228 <_get_cycles_for_ms_internal+0x134>)
    41c8:	fba2 2303 	umull	r2, r3, r2, r3
    41cc:	091b      	lsrs	r3, r3, #4
    41ce:	e018      	b.n	4202 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    41d0:	88fb      	ldrh	r3, [r7, #6]
    41d2:	683a      	ldr	r2, [r7, #0]
    41d4:	4915      	ldr	r1, [pc, #84]	; (422c <_get_cycles_for_ms_internal+0x138>)
    41d6:	fba1 1202 	umull	r1, r2, r1, r2
    41da:	08d2      	lsrs	r2, r2, #3
    41dc:	fb02 f303 	mul.w	r3, r2, r3
    41e0:	f203 132b 	addw	r3, r3, #299	; 0x12b
    41e4:	4a12      	ldr	r2, [pc, #72]	; (4230 <_get_cycles_for_ms_internal+0x13c>)
    41e6:	fba2 2303 	umull	r2, r3, r2, r3
    41ea:	095b      	lsrs	r3, r3, #5
    41ec:	e009      	b.n	4202 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    41ee:	88fb      	ldrh	r3, [r7, #6]
    41f0:	683a      	ldr	r2, [r7, #0]
    41f2:	fb02 f303 	mul.w	r3, r2, r3
    41f6:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    41fa:	4a0e      	ldr	r2, [pc, #56]	; (4234 <_get_cycles_for_ms_internal+0x140>)
    41fc:	fba2 2303 	umull	r2, r3, r2, r3
    4200:	099b      	lsrs	r3, r3, #6
	}
}
    4202:	4618      	mov	r0, r3
    4204:	370c      	adds	r7, #12
    4206:	46bd      	mov	sp, r7
    4208:	f85d 7b04 	ldr.w	r7, [sp], #4
    420c:	4770      	bx	lr
    420e:	bf00      	nop
    4210:	431bde83 	.word	0x431bde83
    4214:	aaaaaaab 	.word	0xaaaaaaab
    4218:	0a7c5ac5 	.word	0x0a7c5ac5
    421c:	d1b71759 	.word	0xd1b71759
    4220:	10624dd3 	.word	0x10624dd3
    4224:	51eb851f 	.word	0x51eb851f
    4228:	88888889 	.word	0x88888889
    422c:	cccccccd 	.word	0xcccccccd
    4230:	1b4e81b5 	.word	0x1b4e81b5
    4234:	057619f1 	.word	0x057619f1

00004238 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4238:	b580      	push	{r7, lr}
    423a:	b082      	sub	sp, #8
    423c:	af00      	add	r7, sp, #0
    423e:	4603      	mov	r3, r0
    4240:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4242:	88fb      	ldrh	r3, [r7, #6]
    4244:	2209      	movs	r2, #9
    4246:	4904      	ldr	r1, [pc, #16]	; (4258 <_get_cycles_for_ms+0x20>)
    4248:	4618      	mov	r0, r3
    424a:	4b04      	ldr	r3, [pc, #16]	; (425c <_get_cycles_for_ms+0x24>)
    424c:	4798      	blx	r3
    424e:	4603      	mov	r3, r0
}
    4250:	4618      	mov	r0, r3
    4252:	3708      	adds	r7, #8
    4254:	46bd      	mov	sp, r7
    4256:	bd80      	pop	{r7, pc}
    4258:	07270e00 	.word	0x07270e00
    425c:	000040f5 	.word	0x000040f5

00004260 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4260:	b480      	push	{r7}
    4262:	b083      	sub	sp, #12
    4264:	af00      	add	r7, sp, #0
    4266:	6078      	str	r0, [r7, #4]
    4268:	6039      	str	r1, [r7, #0]
    426a:	bf00      	nop
    426c:	f3af 8000 	nop.w

00004270 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4270:	3901      	subs	r1, #1
    4272:	d8fd      	bhi.n	4270 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4274:	bf00      	nop
    4276:	370c      	adds	r7, #12
    4278:	46bd      	mov	sp, r7
    427a:	f85d 7b04 	ldr.w	r7, [sp], #4
    427e:	4770      	bx	lr

00004280 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4280:	b480      	push	{r7}
    4282:	b083      	sub	sp, #12
    4284:	af00      	add	r7, sp, #0
    4286:	6078      	str	r0, [r7, #4]
    4288:	460b      	mov	r3, r1
    428a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    428c:	687b      	ldr	r3, [r7, #4]
    428e:	881b      	ldrh	r3, [r3, #0]
    4290:	b29a      	uxth	r2, r3
    4292:	887b      	ldrh	r3, [r7, #2]
    4294:	021b      	lsls	r3, r3, #8
    4296:	b29b      	uxth	r3, r3
    4298:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    429c:	b29b      	uxth	r3, r3
    429e:	4313      	orrs	r3, r2
    42a0:	b29a      	uxth	r2, r3
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    42a6:	bf00      	nop
    42a8:	370c      	adds	r7, #12
    42aa:	46bd      	mov	sp, r7
    42ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    42b0:	4770      	bx	lr

000042b2 <hri_port_set_EVCTRL_reg>:
{
    42b2:	b480      	push	{r7}
    42b4:	b085      	sub	sp, #20
    42b6:	af00      	add	r7, sp, #0
    42b8:	60f8      	str	r0, [r7, #12]
    42ba:	460b      	mov	r3, r1
    42bc:	607a      	str	r2, [r7, #4]
    42be:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    42c0:	7afb      	ldrb	r3, [r7, #11]
    42c2:	7afa      	ldrb	r2, [r7, #11]
    42c4:	68f9      	ldr	r1, [r7, #12]
    42c6:	01d2      	lsls	r2, r2, #7
    42c8:	440a      	add	r2, r1
    42ca:	322c      	adds	r2, #44	; 0x2c
    42cc:	6811      	ldr	r1, [r2, #0]
    42ce:	687a      	ldr	r2, [r7, #4]
    42d0:	430a      	orrs	r2, r1
    42d2:	68f9      	ldr	r1, [r7, #12]
    42d4:	01db      	lsls	r3, r3, #7
    42d6:	440b      	add	r3, r1
    42d8:	332c      	adds	r3, #44	; 0x2c
    42da:	601a      	str	r2, [r3, #0]
}
    42dc:	bf00      	nop
    42de:	3714      	adds	r7, #20
    42e0:	46bd      	mov	sp, r7
    42e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e6:	4770      	bx	lr

000042e8 <_port_event_init>:

static inline void _port_event_init()
{
    42e8:	b580      	push	{r7, lr}
    42ea:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    42ec:	2200      	movs	r2, #0
    42ee:	2100      	movs	r1, #0
    42f0:	480a      	ldr	r0, [pc, #40]	; (431c <_port_event_init+0x34>)
    42f2:	4b0b      	ldr	r3, [pc, #44]	; (4320 <_port_event_init+0x38>)
    42f4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    42f6:	2200      	movs	r2, #0
    42f8:	2101      	movs	r1, #1
    42fa:	4808      	ldr	r0, [pc, #32]	; (431c <_port_event_init+0x34>)
    42fc:	4b08      	ldr	r3, [pc, #32]	; (4320 <_port_event_init+0x38>)
    42fe:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4300:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4304:	2102      	movs	r1, #2
    4306:	4805      	ldr	r0, [pc, #20]	; (431c <_port_event_init+0x34>)
    4308:	4b05      	ldr	r3, [pc, #20]	; (4320 <_port_event_init+0x38>)
    430a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    430c:	2200      	movs	r2, #0
    430e:	2103      	movs	r1, #3
    4310:	4802      	ldr	r0, [pc, #8]	; (431c <_port_event_init+0x34>)
    4312:	4b03      	ldr	r3, [pc, #12]	; (4320 <_port_event_init+0x38>)
    4314:	4798      	blx	r3
}
    4316:	bf00      	nop
    4318:	bd80      	pop	{r7, pc}
    431a:	bf00      	nop
    431c:	41008000 	.word	0x41008000
    4320:	000042b3 	.word	0x000042b3

00004324 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4324:	b580      	push	{r7, lr}
    4326:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4328:	2104      	movs	r1, #4
    432a:	480b      	ldr	r0, [pc, #44]	; (4358 <_init_chip+0x34>)
    432c:	4b0b      	ldr	r3, [pc, #44]	; (435c <_init_chip+0x38>)
    432e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4330:	4b0b      	ldr	r3, [pc, #44]	; (4360 <_init_chip+0x3c>)
    4332:	4798      	blx	r3
	_oscctrl_init_sources();
    4334:	4b0b      	ldr	r3, [pc, #44]	; (4364 <_init_chip+0x40>)
    4336:	4798      	blx	r3
	_mclk_init();
    4338:	4b0b      	ldr	r3, [pc, #44]	; (4368 <_init_chip+0x44>)
    433a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    433c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4340:	4b0a      	ldr	r3, [pc, #40]	; (436c <_init_chip+0x48>)
    4342:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4344:	4b0a      	ldr	r3, [pc, #40]	; (4370 <_init_chip+0x4c>)
    4346:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4348:	f640 30df 	movw	r0, #3039	; 0xbdf
    434c:	4b07      	ldr	r3, [pc, #28]	; (436c <_init_chip+0x48>)
    434e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4350:	4b08      	ldr	r3, [pc, #32]	; (4374 <_init_chip+0x50>)
    4352:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4354:	bf00      	nop
    4356:	bd80      	pop	{r7, pc}
    4358:	41004000 	.word	0x41004000
    435c:	00004281 	.word	0x00004281
    4360:	00004e35 	.word	0x00004e35
    4364:	000052fd 	.word	0x000052fd
    4368:	00004d55 	.word	0x00004d55
    436c:	00004c15 	.word	0x00004c15
    4370:	0000533d 	.word	0x0000533d
    4374:	000042e9 	.word	0x000042e9

00004378 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4378:	b480      	push	{r7}
    437a:	b083      	sub	sp, #12
    437c:	af00      	add	r7, sp, #0
    437e:	6078      	str	r0, [r7, #4]
    4380:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	683a      	ldr	r2, [r7, #0]
    4386:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4388:	2300      	movs	r3, #0
}
    438a:	4618      	mov	r0, r3
    438c:	370c      	adds	r7, #12
    438e:	46bd      	mov	sp, r7
    4390:	f85d 7b04 	ldr.w	r7, [sp], #4
    4394:	4770      	bx	lr
	...

00004398 <__NVIC_EnableIRQ>:
{
    4398:	b480      	push	{r7}
    439a:	b083      	sub	sp, #12
    439c:	af00      	add	r7, sp, #0
    439e:	4603      	mov	r3, r0
    43a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    43a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43a6:	2b00      	cmp	r3, #0
    43a8:	db0b      	blt.n	43c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    43aa:	4909      	ldr	r1, [pc, #36]	; (43d0 <__NVIC_EnableIRQ+0x38>)
    43ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43b0:	095b      	lsrs	r3, r3, #5
    43b2:	88fa      	ldrh	r2, [r7, #6]
    43b4:	f002 021f 	and.w	r2, r2, #31
    43b8:	2001      	movs	r0, #1
    43ba:	fa00 f202 	lsl.w	r2, r0, r2
    43be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    43c2:	bf00      	nop
    43c4:	370c      	adds	r7, #12
    43c6:	46bd      	mov	sp, r7
    43c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    43cc:	4770      	bx	lr
    43ce:	bf00      	nop
    43d0:	e000e100 	.word	0xe000e100

000043d4 <__NVIC_DisableIRQ>:
{
    43d4:	b480      	push	{r7}
    43d6:	b083      	sub	sp, #12
    43d8:	af00      	add	r7, sp, #0
    43da:	4603      	mov	r3, r0
    43dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    43de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43e2:	2b00      	cmp	r3, #0
    43e4:	db10      	blt.n	4408 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    43e6:	490b      	ldr	r1, [pc, #44]	; (4414 <__NVIC_DisableIRQ+0x40>)
    43e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43ec:	095b      	lsrs	r3, r3, #5
    43ee:	88fa      	ldrh	r2, [r7, #6]
    43f0:	f002 021f 	and.w	r2, r2, #31
    43f4:	2001      	movs	r0, #1
    43f6:	fa00 f202 	lsl.w	r2, r0, r2
    43fa:	3320      	adds	r3, #32
    43fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4400:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4404:	f3bf 8f6f 	isb	sy
}
    4408:	bf00      	nop
    440a:	370c      	adds	r7, #12
    440c:	46bd      	mov	sp, r7
    440e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4412:	4770      	bx	lr
    4414:	e000e100 	.word	0xe000e100

00004418 <__NVIC_ClearPendingIRQ>:
{
    4418:	b480      	push	{r7}
    441a:	b083      	sub	sp, #12
    441c:	af00      	add	r7, sp, #0
    441e:	4603      	mov	r3, r0
    4420:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4426:	2b00      	cmp	r3, #0
    4428:	db0c      	blt.n	4444 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    442a:	4909      	ldr	r1, [pc, #36]	; (4450 <__NVIC_ClearPendingIRQ+0x38>)
    442c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4430:	095b      	lsrs	r3, r3, #5
    4432:	88fa      	ldrh	r2, [r7, #6]
    4434:	f002 021f 	and.w	r2, r2, #31
    4438:	2001      	movs	r0, #1
    443a:	fa00 f202 	lsl.w	r2, r0, r2
    443e:	3360      	adds	r3, #96	; 0x60
    4440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4444:	bf00      	nop
    4446:	370c      	adds	r7, #12
    4448:	46bd      	mov	sp, r7
    444a:	f85d 7b04 	ldr.w	r7, [sp], #4
    444e:	4770      	bx	lr
    4450:	e000e100 	.word	0xe000e100

00004454 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4454:	b480      	push	{r7}
    4456:	b083      	sub	sp, #12
    4458:	af00      	add	r7, sp, #0
    445a:	6078      	str	r0, [r7, #4]
    445c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    445e:	bf00      	nop
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	685a      	ldr	r2, [r3, #4]
    4464:	683b      	ldr	r3, [r7, #0]
    4466:	4013      	ands	r3, r2
    4468:	2b00      	cmp	r3, #0
    446a:	d1f9      	bne.n	4460 <hri_eic_wait_for_sync+0xc>
	};
}
    446c:	bf00      	nop
    446e:	370c      	adds	r7, #12
    4470:	46bd      	mov	sp, r7
    4472:	f85d 7b04 	ldr.w	r7, [sp], #4
    4476:	4770      	bx	lr

00004478 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4478:	b480      	push	{r7}
    447a:	b083      	sub	sp, #12
    447c:	af00      	add	r7, sp, #0
    447e:	6078      	str	r0, [r7, #4]
    4480:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4482:	687b      	ldr	r3, [r7, #4]
    4484:	685a      	ldr	r2, [r3, #4]
    4486:	683b      	ldr	r3, [r7, #0]
    4488:	4013      	ands	r3, r2
    448a:	2b00      	cmp	r3, #0
    448c:	bf14      	ite	ne
    448e:	2301      	movne	r3, #1
    4490:	2300      	moveq	r3, #0
    4492:	b2db      	uxtb	r3, r3
}
    4494:	4618      	mov	r0, r3
    4496:	370c      	adds	r7, #12
    4498:	46bd      	mov	sp, r7
    449a:	f85d 7b04 	ldr.w	r7, [sp], #4
    449e:	4770      	bx	lr

000044a0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    44a0:	b480      	push	{r7}
    44a2:	b083      	sub	sp, #12
    44a4:	af00      	add	r7, sp, #0
    44a6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	695b      	ldr	r3, [r3, #20]
}
    44ac:	4618      	mov	r0, r3
    44ae:	370c      	adds	r7, #12
    44b0:	46bd      	mov	sp, r7
    44b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    44b6:	4770      	bx	lr

000044b8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    44b8:	b480      	push	{r7}
    44ba:	b083      	sub	sp, #12
    44bc:	af00      	add	r7, sp, #0
    44be:	6078      	str	r0, [r7, #4]
    44c0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    44c2:	687b      	ldr	r3, [r7, #4]
    44c4:	683a      	ldr	r2, [r7, #0]
    44c6:	615a      	str	r2, [r3, #20]
}
    44c8:	bf00      	nop
    44ca:	370c      	adds	r7, #12
    44cc:	46bd      	mov	sp, r7
    44ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    44d2:	4770      	bx	lr

000044d4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    44d4:	b480      	push	{r7}
    44d6:	b083      	sub	sp, #12
    44d8:	af00      	add	r7, sp, #0
    44da:	6078      	str	r0, [r7, #4]
    44dc:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	683a      	ldr	r2, [r7, #0]
    44e2:	611a      	str	r2, [r3, #16]
}
    44e4:	bf00      	nop
    44e6:	370c      	adds	r7, #12
    44e8:	46bd      	mov	sp, r7
    44ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ee:	4770      	bx	lr

000044f0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    44f0:	b480      	push	{r7}
    44f2:	b083      	sub	sp, #12
    44f4:	af00      	add	r7, sp, #0
    44f6:	6078      	str	r0, [r7, #4]
    44f8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    44fa:	687b      	ldr	r3, [r7, #4]
    44fc:	683a      	ldr	r2, [r7, #0]
    44fe:	60da      	str	r2, [r3, #12]
}
    4500:	bf00      	nop
    4502:	370c      	adds	r7, #12
    4504:	46bd      	mov	sp, r7
    4506:	f85d 7b04 	ldr.w	r7, [sp], #4
    450a:	4770      	bx	lr

0000450c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    450c:	b580      	push	{r7, lr}
    450e:	b082      	sub	sp, #8
    4510:	af00      	add	r7, sp, #0
    4512:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4514:	687b      	ldr	r3, [r7, #4]
    4516:	781b      	ldrb	r3, [r3, #0]
    4518:	b2db      	uxtb	r3, r3
    451a:	f043 0302 	orr.w	r3, r3, #2
    451e:	b2da      	uxtb	r2, r3
    4520:	687b      	ldr	r3, [r7, #4]
    4522:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4524:	2103      	movs	r1, #3
    4526:	6878      	ldr	r0, [r7, #4]
    4528:	4b02      	ldr	r3, [pc, #8]	; (4534 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    452a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    452c:	bf00      	nop
    452e:	3708      	adds	r7, #8
    4530:	46bd      	mov	sp, r7
    4532:	bd80      	pop	{r7, pc}
    4534:	00004455 	.word	0x00004455

00004538 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4538:	b580      	push	{r7, lr}
    453a:	b082      	sub	sp, #8
    453c:	af00      	add	r7, sp, #0
    453e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	781b      	ldrb	r3, [r3, #0]
    4544:	b2db      	uxtb	r3, r3
    4546:	f023 0302 	bic.w	r3, r3, #2
    454a:	b2da      	uxtb	r2, r3
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4550:	2103      	movs	r1, #3
    4552:	6878      	ldr	r0, [r7, #4]
    4554:	4b02      	ldr	r3, [pc, #8]	; (4560 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4556:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4558:	bf00      	nop
    455a:	3708      	adds	r7, #8
    455c:	46bd      	mov	sp, r7
    455e:	bd80      	pop	{r7, pc}
    4560:	00004455 	.word	0x00004455

00004564 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4564:	b580      	push	{r7, lr}
    4566:	b084      	sub	sp, #16
    4568:	af00      	add	r7, sp, #0
    456a:	6078      	str	r0, [r7, #4]
    456c:	460b      	mov	r3, r1
    456e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4570:	687b      	ldr	r3, [r7, #4]
    4572:	781b      	ldrb	r3, [r3, #0]
    4574:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4576:	7bfb      	ldrb	r3, [r7, #15]
    4578:	f023 0310 	bic.w	r3, r3, #16
    457c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    457e:	78fb      	ldrb	r3, [r7, #3]
    4580:	011b      	lsls	r3, r3, #4
    4582:	b25a      	sxtb	r2, r3
    4584:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4588:	4313      	orrs	r3, r2
    458a:	b25b      	sxtb	r3, r3
    458c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    458e:	687b      	ldr	r3, [r7, #4]
    4590:	7bfa      	ldrb	r2, [r7, #15]
    4592:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4594:	2103      	movs	r1, #3
    4596:	6878      	ldr	r0, [r7, #4]
    4598:	4b02      	ldr	r3, [pc, #8]	; (45a4 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    459a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    459c:	bf00      	nop
    459e:	3710      	adds	r7, #16
    45a0:	46bd      	mov	sp, r7
    45a2:	bd80      	pop	{r7, pc}
    45a4:	00004455 	.word	0x00004455

000045a8 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    45a8:	b580      	push	{r7, lr}
    45aa:	b084      	sub	sp, #16
    45ac:	af00      	add	r7, sp, #0
    45ae:	6078      	str	r0, [r7, #4]
    45b0:	460b      	mov	r3, r1
    45b2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    45b4:	2103      	movs	r1, #3
    45b6:	6878      	ldr	r0, [r7, #4]
    45b8:	4b06      	ldr	r3, [pc, #24]	; (45d4 <hri_eic_get_CTRLA_reg+0x2c>)
    45ba:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    45bc:	687b      	ldr	r3, [r7, #4]
    45be:	781b      	ldrb	r3, [r3, #0]
    45c0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    45c2:	7bfa      	ldrb	r2, [r7, #15]
    45c4:	78fb      	ldrb	r3, [r7, #3]
    45c6:	4013      	ands	r3, r2
    45c8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    45ca:	7bfb      	ldrb	r3, [r7, #15]
}
    45cc:	4618      	mov	r0, r3
    45ce:	3710      	adds	r7, #16
    45d0:	46bd      	mov	sp, r7
    45d2:	bd80      	pop	{r7, pc}
    45d4:	00004455 	.word	0x00004455

000045d8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    45d8:	b580      	push	{r7, lr}
    45da:	b082      	sub	sp, #8
    45dc:	af00      	add	r7, sp, #0
    45de:	6078      	str	r0, [r7, #4]
    45e0:	460b      	mov	r3, r1
    45e2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    45e4:	687b      	ldr	r3, [r7, #4]
    45e6:	78fa      	ldrb	r2, [r7, #3]
    45e8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    45ea:	2103      	movs	r1, #3
    45ec:	6878      	ldr	r0, [r7, #4]
    45ee:	4b03      	ldr	r3, [pc, #12]	; (45fc <hri_eic_write_CTRLA_reg+0x24>)
    45f0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    45f2:	bf00      	nop
    45f4:	3708      	adds	r7, #8
    45f6:	46bd      	mov	sp, r7
    45f8:	bd80      	pop	{r7, pc}
    45fa:	bf00      	nop
    45fc:	00004455 	.word	0x00004455

00004600 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4600:	b480      	push	{r7}
    4602:	b083      	sub	sp, #12
    4604:	af00      	add	r7, sp, #0
    4606:	6078      	str	r0, [r7, #4]
    4608:	460b      	mov	r3, r1
    460a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    460c:	687b      	ldr	r3, [r7, #4]
    460e:	78fa      	ldrb	r2, [r7, #3]
    4610:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4612:	bf00      	nop
    4614:	370c      	adds	r7, #12
    4616:	46bd      	mov	sp, r7
    4618:	f85d 7b04 	ldr.w	r7, [sp], #4
    461c:	4770      	bx	lr

0000461e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    461e:	b480      	push	{r7}
    4620:	b083      	sub	sp, #12
    4622:	af00      	add	r7, sp, #0
    4624:	6078      	str	r0, [r7, #4]
    4626:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4628:	687b      	ldr	r3, [r7, #4]
    462a:	683a      	ldr	r2, [r7, #0]
    462c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    462e:	bf00      	nop
    4630:	370c      	adds	r7, #12
    4632:	46bd      	mov	sp, r7
    4634:	f85d 7b04 	ldr.w	r7, [sp], #4
    4638:	4770      	bx	lr

0000463a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    463a:	b480      	push	{r7}
    463c:	b083      	sub	sp, #12
    463e:	af00      	add	r7, sp, #0
    4640:	6078      	str	r0, [r7, #4]
    4642:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	683a      	ldr	r2, [r7, #0]
    4648:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    464a:	bf00      	nop
    464c:	370c      	adds	r7, #12
    464e:	46bd      	mov	sp, r7
    4650:	f85d 7b04 	ldr.w	r7, [sp], #4
    4654:	4770      	bx	lr

00004656 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4656:	b480      	push	{r7}
    4658:	b085      	sub	sp, #20
    465a:	af00      	add	r7, sp, #0
    465c:	60f8      	str	r0, [r7, #12]
    465e:	460b      	mov	r3, r1
    4660:	607a      	str	r2, [r7, #4]
    4662:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4664:	7afb      	ldrb	r3, [r7, #11]
    4666:	68fa      	ldr	r2, [r7, #12]
    4668:	3306      	adds	r3, #6
    466a:	009b      	lsls	r3, r3, #2
    466c:	4413      	add	r3, r2
    466e:	687a      	ldr	r2, [r7, #4]
    4670:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4672:	bf00      	nop
    4674:	3714      	adds	r7, #20
    4676:	46bd      	mov	sp, r7
    4678:	f85d 7b04 	ldr.w	r7, [sp], #4
    467c:	4770      	bx	lr

0000467e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    467e:	b480      	push	{r7}
    4680:	b083      	sub	sp, #12
    4682:	af00      	add	r7, sp, #0
    4684:	6078      	str	r0, [r7, #4]
    4686:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4688:	687b      	ldr	r3, [r7, #4]
    468a:	683a      	ldr	r2, [r7, #0]
    468c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    468e:	bf00      	nop
    4690:	370c      	adds	r7, #12
    4692:	46bd      	mov	sp, r7
    4694:	f85d 7b04 	ldr.w	r7, [sp], #4
    4698:	4770      	bx	lr

0000469a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    469a:	b480      	push	{r7}
    469c:	b083      	sub	sp, #12
    469e:	af00      	add	r7, sp, #0
    46a0:	6078      	str	r0, [r7, #4]
    46a2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    46a4:	687b      	ldr	r3, [r7, #4]
    46a6:	683a      	ldr	r2, [r7, #0]
    46a8:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    46aa:	bf00      	nop
    46ac:	370c      	adds	r7, #12
    46ae:	46bd      	mov	sp, r7
    46b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    46b4:	4770      	bx	lr
	...

000046b8 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    46b8:	b580      	push	{r7, lr}
    46ba:	b082      	sub	sp, #8
    46bc:	af00      	add	r7, sp, #0
    46be:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    46c0:	2101      	movs	r1, #1
    46c2:	484f      	ldr	r0, [pc, #316]	; (4800 <_ext_irq_init+0x148>)
    46c4:	4b4f      	ldr	r3, [pc, #316]	; (4804 <_ext_irq_init+0x14c>)
    46c6:	4798      	blx	r3
    46c8:	4603      	mov	r3, r0
    46ca:	f083 0301 	eor.w	r3, r3, #1
    46ce:	b2db      	uxtb	r3, r3
    46d0:	2b00      	cmp	r3, #0
    46d2:	d011      	beq.n	46f8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    46d4:	2102      	movs	r1, #2
    46d6:	484a      	ldr	r0, [pc, #296]	; (4800 <_ext_irq_init+0x148>)
    46d8:	4b4b      	ldr	r3, [pc, #300]	; (4808 <_ext_irq_init+0x150>)
    46da:	4798      	blx	r3
    46dc:	4603      	mov	r3, r0
    46de:	2b00      	cmp	r3, #0
    46e0:	d006      	beq.n	46f0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    46e2:	4847      	ldr	r0, [pc, #284]	; (4800 <_ext_irq_init+0x148>)
    46e4:	4b49      	ldr	r3, [pc, #292]	; (480c <_ext_irq_init+0x154>)
    46e6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    46e8:	2102      	movs	r1, #2
    46ea:	4845      	ldr	r0, [pc, #276]	; (4800 <_ext_irq_init+0x148>)
    46ec:	4b48      	ldr	r3, [pc, #288]	; (4810 <_ext_irq_init+0x158>)
    46ee:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    46f0:	2101      	movs	r1, #1
    46f2:	4843      	ldr	r0, [pc, #268]	; (4800 <_ext_irq_init+0x148>)
    46f4:	4b47      	ldr	r3, [pc, #284]	; (4814 <_ext_irq_init+0x15c>)
    46f6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    46f8:	2101      	movs	r1, #1
    46fa:	4841      	ldr	r0, [pc, #260]	; (4800 <_ext_irq_init+0x148>)
    46fc:	4b44      	ldr	r3, [pc, #272]	; (4810 <_ext_irq_init+0x158>)
    46fe:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4700:	2100      	movs	r1, #0
    4702:	483f      	ldr	r0, [pc, #252]	; (4800 <_ext_irq_init+0x148>)
    4704:	4b44      	ldr	r3, [pc, #272]	; (4818 <_ext_irq_init+0x160>)
    4706:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4708:	2100      	movs	r1, #0
    470a:	483d      	ldr	r0, [pc, #244]	; (4800 <_ext_irq_init+0x148>)
    470c:	4b43      	ldr	r3, [pc, #268]	; (481c <_ext_irq_init+0x164>)
    470e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4710:	2100      	movs	r1, #0
    4712:	483b      	ldr	r0, [pc, #236]	; (4800 <_ext_irq_init+0x148>)
    4714:	4b42      	ldr	r3, [pc, #264]	; (4820 <_ext_irq_init+0x168>)
    4716:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4718:	f240 31bb 	movw	r1, #955	; 0x3bb
    471c:	4838      	ldr	r0, [pc, #224]	; (4800 <_ext_irq_init+0x148>)
    471e:	4b41      	ldr	r3, [pc, #260]	; (4824 <_ext_irq_init+0x16c>)
    4720:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4722:	f240 313b 	movw	r1, #827	; 0x33b
    4726:	4836      	ldr	r0, [pc, #216]	; (4800 <_ext_irq_init+0x148>)
    4728:	4b3f      	ldr	r3, [pc, #252]	; (4828 <_ext_irq_init+0x170>)
    472a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    472c:	2100      	movs	r1, #0
    472e:	4834      	ldr	r0, [pc, #208]	; (4800 <_ext_irq_init+0x148>)
    4730:	4b3e      	ldr	r3, [pc, #248]	; (482c <_ext_irq_init+0x174>)
    4732:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4734:	4a3e      	ldr	r2, [pc, #248]	; (4830 <_ext_irq_init+0x178>)
    4736:	2100      	movs	r1, #0
    4738:	4831      	ldr	r0, [pc, #196]	; (4800 <_ext_irq_init+0x148>)
    473a:	4b3e      	ldr	r3, [pc, #248]	; (4834 <_ext_irq_init+0x17c>)
    473c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    473e:	2211      	movs	r2, #17
    4740:	2101      	movs	r1, #1
    4742:	482f      	ldr	r0, [pc, #188]	; (4800 <_ext_irq_init+0x148>)
    4744:	4b3b      	ldr	r3, [pc, #236]	; (4834 <_ext_irq_init+0x17c>)
    4746:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4748:	482d      	ldr	r0, [pc, #180]	; (4800 <_ext_irq_init+0x148>)
    474a:	4b3b      	ldr	r3, [pc, #236]	; (4838 <_ext_irq_init+0x180>)
    474c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    474e:	200c      	movs	r0, #12
    4750:	4b3a      	ldr	r3, [pc, #232]	; (483c <_ext_irq_init+0x184>)
    4752:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4754:	200c      	movs	r0, #12
    4756:	4b3a      	ldr	r3, [pc, #232]	; (4840 <_ext_irq_init+0x188>)
    4758:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    475a:	200c      	movs	r0, #12
    475c:	4b39      	ldr	r3, [pc, #228]	; (4844 <_ext_irq_init+0x18c>)
    475e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4760:	200d      	movs	r0, #13
    4762:	4b36      	ldr	r3, [pc, #216]	; (483c <_ext_irq_init+0x184>)
    4764:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4766:	200d      	movs	r0, #13
    4768:	4b35      	ldr	r3, [pc, #212]	; (4840 <_ext_irq_init+0x188>)
    476a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    476c:	200d      	movs	r0, #13
    476e:	4b35      	ldr	r3, [pc, #212]	; (4844 <_ext_irq_init+0x18c>)
    4770:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4772:	200f      	movs	r0, #15
    4774:	4b31      	ldr	r3, [pc, #196]	; (483c <_ext_irq_init+0x184>)
    4776:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4778:	200f      	movs	r0, #15
    477a:	4b31      	ldr	r3, [pc, #196]	; (4840 <_ext_irq_init+0x188>)
    477c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    477e:	200f      	movs	r0, #15
    4780:	4b30      	ldr	r3, [pc, #192]	; (4844 <_ext_irq_init+0x18c>)
    4782:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4784:	2010      	movs	r0, #16
    4786:	4b2d      	ldr	r3, [pc, #180]	; (483c <_ext_irq_init+0x184>)
    4788:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    478a:	2010      	movs	r0, #16
    478c:	4b2c      	ldr	r3, [pc, #176]	; (4840 <_ext_irq_init+0x188>)
    478e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4790:	2010      	movs	r0, #16
    4792:	4b2c      	ldr	r3, [pc, #176]	; (4844 <_ext_irq_init+0x18c>)
    4794:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4796:	2011      	movs	r0, #17
    4798:	4b28      	ldr	r3, [pc, #160]	; (483c <_ext_irq_init+0x184>)
    479a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    479c:	2011      	movs	r0, #17
    479e:	4b28      	ldr	r3, [pc, #160]	; (4840 <_ext_irq_init+0x188>)
    47a0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    47a2:	2011      	movs	r0, #17
    47a4:	4b27      	ldr	r3, [pc, #156]	; (4844 <_ext_irq_init+0x18c>)
    47a6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    47a8:	2012      	movs	r0, #18
    47aa:	4b24      	ldr	r3, [pc, #144]	; (483c <_ext_irq_init+0x184>)
    47ac:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    47ae:	2012      	movs	r0, #18
    47b0:	4b23      	ldr	r3, [pc, #140]	; (4840 <_ext_irq_init+0x188>)
    47b2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    47b4:	2012      	movs	r0, #18
    47b6:	4b23      	ldr	r3, [pc, #140]	; (4844 <_ext_irq_init+0x18c>)
    47b8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    47ba:	2013      	movs	r0, #19
    47bc:	4b1f      	ldr	r3, [pc, #124]	; (483c <_ext_irq_init+0x184>)
    47be:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    47c0:	2013      	movs	r0, #19
    47c2:	4b1f      	ldr	r3, [pc, #124]	; (4840 <_ext_irq_init+0x188>)
    47c4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    47c6:	2013      	movs	r0, #19
    47c8:	4b1e      	ldr	r3, [pc, #120]	; (4844 <_ext_irq_init+0x18c>)
    47ca:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    47cc:	2014      	movs	r0, #20
    47ce:	4b1b      	ldr	r3, [pc, #108]	; (483c <_ext_irq_init+0x184>)
    47d0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    47d2:	2014      	movs	r0, #20
    47d4:	4b1a      	ldr	r3, [pc, #104]	; (4840 <_ext_irq_init+0x188>)
    47d6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    47d8:	2014      	movs	r0, #20
    47da:	4b1a      	ldr	r3, [pc, #104]	; (4844 <_ext_irq_init+0x18c>)
    47dc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    47de:	2015      	movs	r0, #21
    47e0:	4b16      	ldr	r3, [pc, #88]	; (483c <_ext_irq_init+0x184>)
    47e2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    47e4:	2015      	movs	r0, #21
    47e6:	4b16      	ldr	r3, [pc, #88]	; (4840 <_ext_irq_init+0x188>)
    47e8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    47ea:	2015      	movs	r0, #21
    47ec:	4b15      	ldr	r3, [pc, #84]	; (4844 <_ext_irq_init+0x18c>)
    47ee:	4798      	blx	r3

	callback = cb;
    47f0:	4a15      	ldr	r2, [pc, #84]	; (4848 <_ext_irq_init+0x190>)
    47f2:	687b      	ldr	r3, [r7, #4]
    47f4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    47f6:	2300      	movs	r3, #0
}
    47f8:	4618      	mov	r0, r3
    47fa:	3708      	adds	r7, #8
    47fc:	46bd      	mov	sp, r7
    47fe:	bd80      	pop	{r7, pc}
    4800:	40002800 	.word	0x40002800
    4804:	00004479 	.word	0x00004479
    4808:	000045a9 	.word	0x000045a9
    480c:	00004539 	.word	0x00004539
    4810:	00004455 	.word	0x00004455
    4814:	000045d9 	.word	0x000045d9
    4818:	00004565 	.word	0x00004565
    481c:	00004601 	.word	0x00004601
    4820:	0000461f 	.word	0x0000461f
    4824:	0000463b 	.word	0x0000463b
    4828:	0000467f 	.word	0x0000467f
    482c:	0000469b 	.word	0x0000469b
    4830:	90999013 	.word	0x90999013
    4834:	00004657 	.word	0x00004657
    4838:	0000450d 	.word	0x0000450d
    483c:	000043d5 	.word	0x000043d5
    4840:	00004419 	.word	0x00004419
    4844:	00004399 	.word	0x00004399
    4848:	20002118 	.word	0x20002118

0000484c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    484c:	b580      	push	{r7, lr}
    484e:	b084      	sub	sp, #16
    4850:	af00      	add	r7, sp, #0
    4852:	6078      	str	r0, [r7, #4]
    4854:	460b      	mov	r3, r1
    4856:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4858:	23ff      	movs	r3, #255	; 0xff
    485a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    485c:	2300      	movs	r3, #0
    485e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4860:	e010      	b.n	4884 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4862:	7bbb      	ldrb	r3, [r7, #14]
    4864:	4a1c      	ldr	r2, [pc, #112]	; (48d8 <_ext_irq_enable+0x8c>)
    4866:	00db      	lsls	r3, r3, #3
    4868:	4413      	add	r3, r2
    486a:	685a      	ldr	r2, [r3, #4]
    486c:	687b      	ldr	r3, [r7, #4]
    486e:	429a      	cmp	r2, r3
    4870:	d105      	bne.n	487e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4872:	7bbb      	ldrb	r3, [r7, #14]
    4874:	4a18      	ldr	r2, [pc, #96]	; (48d8 <_ext_irq_enable+0x8c>)
    4876:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    487a:	73fb      	strb	r3, [r7, #15]
			break;
    487c:	e005      	b.n	488a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    487e:	7bbb      	ldrb	r3, [r7, #14]
    4880:	3301      	adds	r3, #1
    4882:	73bb      	strb	r3, [r7, #14]
    4884:	7bbb      	ldrb	r3, [r7, #14]
    4886:	2b08      	cmp	r3, #8
    4888:	d9eb      	bls.n	4862 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    488a:	7bfb      	ldrb	r3, [r7, #15]
    488c:	2bff      	cmp	r3, #255	; 0xff
    488e:	d102      	bne.n	4896 <_ext_irq_enable+0x4a>
		return -1;
    4890:	f04f 33ff 	mov.w	r3, #4294967295
    4894:	e01c      	b.n	48d0 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4896:	78fb      	ldrb	r3, [r7, #3]
    4898:	2b00      	cmp	r3, #0
    489a:	d008      	beq.n	48ae <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    489c:	7bfb      	ldrb	r3, [r7, #15]
    489e:	2201      	movs	r2, #1
    48a0:	fa02 f303 	lsl.w	r3, r2, r3
    48a4:	4619      	mov	r1, r3
    48a6:	480d      	ldr	r0, [pc, #52]	; (48dc <_ext_irq_enable+0x90>)
    48a8:	4b0d      	ldr	r3, [pc, #52]	; (48e0 <_ext_irq_enable+0x94>)
    48aa:	4798      	blx	r3
    48ac:	e00f      	b.n	48ce <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    48ae:	7bfb      	ldrb	r3, [r7, #15]
    48b0:	2201      	movs	r2, #1
    48b2:	fa02 f303 	lsl.w	r3, r2, r3
    48b6:	4619      	mov	r1, r3
    48b8:	4808      	ldr	r0, [pc, #32]	; (48dc <_ext_irq_enable+0x90>)
    48ba:	4b0a      	ldr	r3, [pc, #40]	; (48e4 <_ext_irq_enable+0x98>)
    48bc:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    48be:	7bfb      	ldrb	r3, [r7, #15]
    48c0:	2201      	movs	r2, #1
    48c2:	fa02 f303 	lsl.w	r3, r2, r3
    48c6:	4619      	mov	r1, r3
    48c8:	4804      	ldr	r0, [pc, #16]	; (48dc <_ext_irq_enable+0x90>)
    48ca:	4b07      	ldr	r3, [pc, #28]	; (48e8 <_ext_irq_enable+0x9c>)
    48cc:	4798      	blx	r3
	}

	return ERR_NONE;
    48ce:	2300      	movs	r3, #0
}
    48d0:	4618      	mov	r0, r3
    48d2:	3710      	adds	r7, #16
    48d4:	46bd      	mov	sp, r7
    48d6:	bd80      	pop	{r7, pc}
    48d8:	0000f4e4 	.word	0x0000f4e4
    48dc:	40002800 	.word	0x40002800
    48e0:	000044d5 	.word	0x000044d5
    48e4:	000044f1 	.word	0x000044f1
    48e8:	000044b9 	.word	0x000044b9

000048ec <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b084      	sub	sp, #16
    48f0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    48f2:	4841      	ldr	r0, [pc, #260]	; (49f8 <_ext_irq_handler+0x10c>)
    48f4:	4b41      	ldr	r3, [pc, #260]	; (49fc <_ext_irq_handler+0x110>)
    48f6:	4798      	blx	r3
    48f8:	4603      	mov	r3, r0
    48fa:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    48fc:	f04f 33ff 	mov.w	r3, #4294967295
    4900:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4902:	683b      	ldr	r3, [r7, #0]
    4904:	4619      	mov	r1, r3
    4906:	483c      	ldr	r0, [pc, #240]	; (49f8 <_ext_irq_handler+0x10c>)
    4908:	4b3d      	ldr	r3, [pc, #244]	; (4a00 <_ext_irq_handler+0x114>)
    490a:	4798      	blx	r3

	ASSERT(callback);
    490c:	4b3d      	ldr	r3, [pc, #244]	; (4a04 <_ext_irq_handler+0x118>)
    490e:	681b      	ldr	r3, [r3, #0]
    4910:	2b00      	cmp	r3, #0
    4912:	bf14      	ite	ne
    4914:	2301      	movne	r3, #1
    4916:	2300      	moveq	r3, #0
    4918:	b2db      	uxtb	r3, r3
    491a:	f44f 7284 	mov.w	r2, #264	; 0x108
    491e:	493a      	ldr	r1, [pc, #232]	; (4a08 <_ext_irq_handler+0x11c>)
    4920:	4618      	mov	r0, r3
    4922:	4b3a      	ldr	r3, [pc, #232]	; (4a0c <_ext_irq_handler+0x120>)
    4924:	4798      	blx	r3

	while (flags) {
    4926:	e060      	b.n	49ea <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4928:	683b      	ldr	r3, [r7, #0]
    492a:	4618      	mov	r0, r3
    492c:	4b38      	ldr	r3, [pc, #224]	; (4a10 <_ext_irq_handler+0x124>)
    492e:	4798      	blx	r3
    4930:	4603      	mov	r3, r0
    4932:	b2db      	uxtb	r3, r3
    4934:	3b01      	subs	r3, #1
    4936:	b2db      	uxtb	r3, r3
    4938:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    493a:	e047      	b.n	49cc <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    493c:	2300      	movs	r3, #0
    493e:	71fb      	strb	r3, [r7, #7]
    4940:	2309      	movs	r3, #9
    4942:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4944:	e024      	b.n	4990 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4946:	79ba      	ldrb	r2, [r7, #6]
    4948:	79fb      	ldrb	r3, [r7, #7]
    494a:	4413      	add	r3, r2
    494c:	105b      	asrs	r3, r3, #1
    494e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4950:	797b      	ldrb	r3, [r7, #5]
    4952:	4a30      	ldr	r2, [pc, #192]	; (4a14 <_ext_irq_handler+0x128>)
    4954:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4958:	461a      	mov	r2, r3
    495a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    495e:	429a      	cmp	r2, r3
    4960:	d106      	bne.n	4970 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4962:	797b      	ldrb	r3, [r7, #5]
    4964:	4a2b      	ldr	r2, [pc, #172]	; (4a14 <_ext_irq_handler+0x128>)
    4966:	00db      	lsls	r3, r3, #3
    4968:	4413      	add	r3, r2
    496a:	685b      	ldr	r3, [r3, #4]
    496c:	60bb      	str	r3, [r7, #8]
					break;
    496e:	e013      	b.n	4998 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4970:	797b      	ldrb	r3, [r7, #5]
    4972:	4a28      	ldr	r2, [pc, #160]	; (4a14 <_ext_irq_handler+0x128>)
    4974:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4978:	461a      	mov	r2, r3
    497a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    497e:	429a      	cmp	r2, r3
    4980:	da03      	bge.n	498a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4982:	797b      	ldrb	r3, [r7, #5]
    4984:	3301      	adds	r3, #1
    4986:	71fb      	strb	r3, [r7, #7]
    4988:	e002      	b.n	4990 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    498a:	797b      	ldrb	r3, [r7, #5]
    498c:	3b01      	subs	r3, #1
    498e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4990:	79ba      	ldrb	r2, [r7, #6]
    4992:	79fb      	ldrb	r3, [r7, #7]
    4994:	429a      	cmp	r2, r3
    4996:	d2d6      	bcs.n	4946 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4998:	68bb      	ldr	r3, [r7, #8]
    499a:	f1b3 3fff 	cmp.w	r3, #4294967295
    499e:	d003      	beq.n	49a8 <_ext_irq_handler+0xbc>
				callback(pin);
    49a0:	4b18      	ldr	r3, [pc, #96]	; (4a04 <_ext_irq_handler+0x118>)
    49a2:	681b      	ldr	r3, [r3, #0]
    49a4:	68b8      	ldr	r0, [r7, #8]
    49a6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    49a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    49ac:	2201      	movs	r2, #1
    49ae:	fa02 f303 	lsl.w	r3, r2, r3
    49b2:	43da      	mvns	r2, r3
    49b4:	683b      	ldr	r3, [r7, #0]
    49b6:	4013      	ands	r3, r2
    49b8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    49ba:	683b      	ldr	r3, [r7, #0]
    49bc:	4618      	mov	r0, r3
    49be:	4b14      	ldr	r3, [pc, #80]	; (4a10 <_ext_irq_handler+0x124>)
    49c0:	4798      	blx	r3
    49c2:	4603      	mov	r3, r0
    49c4:	b2db      	uxtb	r3, r3
    49c6:	3b01      	subs	r3, #1
    49c8:	b2db      	uxtb	r3, r3
    49ca:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    49cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    49d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    49d4:	d1b2      	bne.n	493c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    49d6:	4808      	ldr	r0, [pc, #32]	; (49f8 <_ext_irq_handler+0x10c>)
    49d8:	4b08      	ldr	r3, [pc, #32]	; (49fc <_ext_irq_handler+0x110>)
    49da:	4798      	blx	r3
    49dc:	4603      	mov	r3, r0
    49de:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    49e0:	683b      	ldr	r3, [r7, #0]
    49e2:	4619      	mov	r1, r3
    49e4:	4804      	ldr	r0, [pc, #16]	; (49f8 <_ext_irq_handler+0x10c>)
    49e6:	4b06      	ldr	r3, [pc, #24]	; (4a00 <_ext_irq_handler+0x114>)
    49e8:	4798      	blx	r3
	while (flags) {
    49ea:	683b      	ldr	r3, [r7, #0]
    49ec:	2b00      	cmp	r3, #0
    49ee:	d19b      	bne.n	4928 <_ext_irq_handler+0x3c>
	}
}
    49f0:	bf00      	nop
    49f2:	3710      	adds	r7, #16
    49f4:	46bd      	mov	sp, r7
    49f6:	bd80      	pop	{r7, pc}
    49f8:	40002800 	.word	0x40002800
    49fc:	000044a1 	.word	0x000044a1
    4a00:	000044b9 	.word	0x000044b9
    4a04:	20002118 	.word	0x20002118
    4a08:	0000f52c 	.word	0x0000f52c
    4a0c:	00003719 	.word	0x00003719
    4a10:	0000ef05 	.word	0x0000ef05
    4a14:	0000f4e4 	.word	0x0000f4e4

00004a18 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4a18:	b580      	push	{r7, lr}
    4a1a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a1c:	4b01      	ldr	r3, [pc, #4]	; (4a24 <EIC_0_Handler+0xc>)
    4a1e:	4798      	blx	r3
} /**
    4a20:	bf00      	nop
    4a22:	bd80      	pop	{r7, pc}
    4a24:	000048ed 	.word	0x000048ed

00004a28 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4a28:	b580      	push	{r7, lr}
    4a2a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a2c:	4b01      	ldr	r3, [pc, #4]	; (4a34 <EIC_1_Handler+0xc>)
    4a2e:	4798      	blx	r3
} /**
    4a30:	bf00      	nop
    4a32:	bd80      	pop	{r7, pc}
    4a34:	000048ed 	.word	0x000048ed

00004a38 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4a38:	b580      	push	{r7, lr}
    4a3a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a3c:	4b01      	ldr	r3, [pc, #4]	; (4a44 <EIC_3_Handler+0xc>)
    4a3e:	4798      	blx	r3
} /**
    4a40:	bf00      	nop
    4a42:	bd80      	pop	{r7, pc}
    4a44:	000048ed 	.word	0x000048ed

00004a48 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4a48:	b580      	push	{r7, lr}
    4a4a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a4c:	4b01      	ldr	r3, [pc, #4]	; (4a54 <EIC_4_Handler+0xc>)
    4a4e:	4798      	blx	r3
} /**
    4a50:	bf00      	nop
    4a52:	bd80      	pop	{r7, pc}
    4a54:	000048ed 	.word	0x000048ed

00004a58 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4a58:	b580      	push	{r7, lr}
    4a5a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a5c:	4b01      	ldr	r3, [pc, #4]	; (4a64 <EIC_5_Handler+0xc>)
    4a5e:	4798      	blx	r3
} /**
    4a60:	bf00      	nop
    4a62:	bd80      	pop	{r7, pc}
    4a64:	000048ed 	.word	0x000048ed

00004a68 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4a68:	b580      	push	{r7, lr}
    4a6a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a6c:	4b01      	ldr	r3, [pc, #4]	; (4a74 <EIC_6_Handler+0xc>)
    4a6e:	4798      	blx	r3
} /**
    4a70:	bf00      	nop
    4a72:	bd80      	pop	{r7, pc}
    4a74:	000048ed 	.word	0x000048ed

00004a78 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4a78:	b580      	push	{r7, lr}
    4a7a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a7c:	4b01      	ldr	r3, [pc, #4]	; (4a84 <EIC_7_Handler+0xc>)
    4a7e:	4798      	blx	r3
} /**
    4a80:	bf00      	nop
    4a82:	bd80      	pop	{r7, pc}
    4a84:	000048ed 	.word	0x000048ed

00004a88 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4a88:	b580      	push	{r7, lr}
    4a8a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a8c:	4b01      	ldr	r3, [pc, #4]	; (4a94 <EIC_8_Handler+0xc>)
    4a8e:	4798      	blx	r3
} /**
    4a90:	bf00      	nop
    4a92:	bd80      	pop	{r7, pc}
    4a94:	000048ed 	.word	0x000048ed

00004a98 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4a98:	b580      	push	{r7, lr}
    4a9a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a9c:	4b01      	ldr	r3, [pc, #4]	; (4aa4 <EIC_9_Handler+0xc>)
    4a9e:	4798      	blx	r3
}
    4aa0:	bf00      	nop
    4aa2:	bd80      	pop	{r7, pc}
    4aa4:	000048ed 	.word	0x000048ed

00004aa8 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4aa8:	b480      	push	{r7}
    4aaa:	b085      	sub	sp, #20
    4aac:	af00      	add	r7, sp, #0
    4aae:	60f8      	str	r0, [r7, #12]
    4ab0:	460b      	mov	r3, r1
    4ab2:	607a      	str	r2, [r7, #4]
    4ab4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4ab6:	7afa      	ldrb	r2, [r7, #11]
    4ab8:	68fb      	ldr	r3, [r7, #12]
    4aba:	3248      	adds	r2, #72	; 0x48
    4abc:	6879      	ldr	r1, [r7, #4]
    4abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4ac2:	bf00      	nop
    4ac4:	3714      	adds	r7, #20
    4ac6:	46bd      	mov	sp, r7
    4ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4acc:	4770      	bx	lr

00004ace <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4ace:	b480      	push	{r7}
    4ad0:	b083      	sub	sp, #12
    4ad2:	af00      	add	r7, sp, #0
    4ad4:	6078      	str	r0, [r7, #4]
    4ad6:	460b      	mov	r3, r1
    4ad8:	70fb      	strb	r3, [r7, #3]
    4ada:	4613      	mov	r3, r2
    4adc:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4ade:	78fb      	ldrb	r3, [r7, #3]
    4ae0:	687a      	ldr	r2, [r7, #4]
    4ae2:	3304      	adds	r3, #4
    4ae4:	00db      	lsls	r3, r3, #3
    4ae6:	4413      	add	r3, r2
    4ae8:	78ba      	ldrb	r2, [r7, #2]
    4aea:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4aec:	78fb      	ldrb	r3, [r7, #3]
    4aee:	78ba      	ldrb	r2, [r7, #2]
    4af0:	43d2      	mvns	r2, r2
    4af2:	b2d1      	uxtb	r1, r2
    4af4:	687a      	ldr	r2, [r7, #4]
    4af6:	3304      	adds	r3, #4
    4af8:	00db      	lsls	r3, r3, #3
    4afa:	4413      	add	r3, r2
    4afc:	460a      	mov	r2, r1
    4afe:	711a      	strb	r2, [r3, #4]
}
    4b00:	bf00      	nop
    4b02:	370c      	adds	r7, #12
    4b04:	46bd      	mov	sp, r7
    4b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b0a:	4770      	bx	lr

00004b0c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4b0c:	b480      	push	{r7}
    4b0e:	b085      	sub	sp, #20
    4b10:	af00      	add	r7, sp, #0
    4b12:	60f8      	str	r0, [r7, #12]
    4b14:	460b      	mov	r3, r1
    4b16:	607a      	str	r2, [r7, #4]
    4b18:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4b1a:	7afa      	ldrb	r2, [r7, #11]
    4b1c:	68fb      	ldr	r3, [r7, #12]
    4b1e:	3204      	adds	r2, #4
    4b20:	6879      	ldr	r1, [r7, #4]
    4b22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4b26:	bf00      	nop
    4b28:	3714      	adds	r7, #20
    4b2a:	46bd      	mov	sp, r7
    4b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b30:	4770      	bx	lr
	...

00004b34 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4b34:	b580      	push	{r7, lr}
    4b36:	b082      	sub	sp, #8
    4b38:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4b3a:	2300      	movs	r3, #0
    4b3c:	71fb      	strb	r3, [r7, #7]
    4b3e:	e00b      	b.n	4b58 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4b40:	79fb      	ldrb	r3, [r7, #7]
    4b42:	4a18      	ldr	r2, [pc, #96]	; (4ba4 <_event_system_init+0x70>)
    4b44:	5cd3      	ldrb	r3, [r2, r3]
    4b46:	461a      	mov	r2, r3
    4b48:	79fb      	ldrb	r3, [r7, #7]
    4b4a:	4619      	mov	r1, r3
    4b4c:	4816      	ldr	r0, [pc, #88]	; (4ba8 <_event_system_init+0x74>)
    4b4e:	4b17      	ldr	r3, [pc, #92]	; (4bac <_event_system_init+0x78>)
    4b50:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4b52:	79fb      	ldrb	r3, [r7, #7]
    4b54:	3301      	adds	r3, #1
    4b56:	71fb      	strb	r3, [r7, #7]
    4b58:	79fb      	ldrb	r3, [r7, #7]
    4b5a:	2b42      	cmp	r3, #66	; 0x42
    4b5c:	d9f0      	bls.n	4b40 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4b5e:	2300      	movs	r3, #0
    4b60:	71fb      	strb	r3, [r7, #7]
    4b62:	e016      	b.n	4b92 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4b64:	79fb      	ldrb	r3, [r7, #7]
    4b66:	4a12      	ldr	r2, [pc, #72]	; (4bb0 <_event_system_init+0x7c>)
    4b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4b6c:	461a      	mov	r2, r3
    4b6e:	79fb      	ldrb	r3, [r7, #7]
    4b70:	4619      	mov	r1, r3
    4b72:	480d      	ldr	r0, [pc, #52]	; (4ba8 <_event_system_init+0x74>)
    4b74:	4b0f      	ldr	r3, [pc, #60]	; (4bb4 <_event_system_init+0x80>)
    4b76:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4b78:	79fb      	ldrb	r3, [r7, #7]
    4b7a:	4a0f      	ldr	r2, [pc, #60]	; (4bb8 <_event_system_init+0x84>)
    4b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4b80:	b2da      	uxtb	r2, r3
    4b82:	79fb      	ldrb	r3, [r7, #7]
    4b84:	4619      	mov	r1, r3
    4b86:	4808      	ldr	r0, [pc, #32]	; (4ba8 <_event_system_init+0x74>)
    4b88:	4b0c      	ldr	r3, [pc, #48]	; (4bbc <_event_system_init+0x88>)
    4b8a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4b8c:	79fb      	ldrb	r3, [r7, #7]
    4b8e:	3301      	adds	r3, #1
    4b90:	71fb      	strb	r3, [r7, #7]
    4b92:	79fb      	ldrb	r3, [r7, #7]
    4b94:	2b1f      	cmp	r3, #31
    4b96:	d9e5      	bls.n	4b64 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4b98:	2300      	movs	r3, #0
}
    4b9a:	4618      	mov	r0, r3
    4b9c:	3708      	adds	r7, #8
    4b9e:	46bd      	mov	sp, r7
    4ba0:	bd80      	pop	{r7, pc}
    4ba2:	bf00      	nop
    4ba4:	0000f544 	.word	0x0000f544
    4ba8:	4100e000 	.word	0x4100e000
    4bac:	00004aa9 	.word	0x00004aa9
    4bb0:	0000f588 	.word	0x0000f588
    4bb4:	00004b0d 	.word	0x00004b0d
    4bb8:	0000f5c8 	.word	0x0000f5c8
    4bbc:	00004acf 	.word	0x00004acf

00004bc0 <hri_gclk_wait_for_sync>:
{
    4bc0:	b480      	push	{r7}
    4bc2:	b083      	sub	sp, #12
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	6078      	str	r0, [r7, #4]
    4bc8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4bca:	bf00      	nop
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	685a      	ldr	r2, [r3, #4]
    4bd0:	683b      	ldr	r3, [r7, #0]
    4bd2:	4013      	ands	r3, r2
    4bd4:	2b00      	cmp	r3, #0
    4bd6:	d1f9      	bne.n	4bcc <hri_gclk_wait_for_sync+0xc>
}
    4bd8:	bf00      	nop
    4bda:	370c      	adds	r7, #12
    4bdc:	46bd      	mov	sp, r7
    4bde:	f85d 7b04 	ldr.w	r7, [sp], #4
    4be2:	4770      	bx	lr

00004be4 <hri_gclk_write_GENCTRL_reg>:
{
    4be4:	b580      	push	{r7, lr}
    4be6:	b084      	sub	sp, #16
    4be8:	af00      	add	r7, sp, #0
    4bea:	60f8      	str	r0, [r7, #12]
    4bec:	460b      	mov	r3, r1
    4bee:	607a      	str	r2, [r7, #4]
    4bf0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4bf2:	7afa      	ldrb	r2, [r7, #11]
    4bf4:	68fb      	ldr	r3, [r7, #12]
    4bf6:	3208      	adds	r2, #8
    4bf8:	6879      	ldr	r1, [r7, #4]
    4bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4bfe:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4c02:	68f8      	ldr	r0, [r7, #12]
    4c04:	4b02      	ldr	r3, [pc, #8]	; (4c10 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4c06:	4798      	blx	r3
}
    4c08:	bf00      	nop
    4c0a:	3710      	adds	r7, #16
    4c0c:	46bd      	mov	sp, r7
    4c0e:	bd80      	pop	{r7, pc}
    4c10:	00004bc1 	.word	0x00004bc1

00004c14 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4c14:	b580      	push	{r7, lr}
    4c16:	b082      	sub	sp, #8
    4c18:	af00      	add	r7, sp, #0
    4c1a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4c1c:	687b      	ldr	r3, [r7, #4]
    4c1e:	f003 0301 	and.w	r3, r3, #1
    4c22:	2b00      	cmp	r3, #0
    4c24:	d004      	beq.n	4c30 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4c26:	4a36      	ldr	r2, [pc, #216]	; (4d00 <_gclk_init_generators_by_fref+0xec>)
    4c28:	2100      	movs	r1, #0
    4c2a:	4836      	ldr	r0, [pc, #216]	; (4d04 <_gclk_init_generators_by_fref+0xf0>)
    4c2c:	4b36      	ldr	r3, [pc, #216]	; (4d08 <_gclk_init_generators_by_fref+0xf4>)
    4c2e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4c30:	687b      	ldr	r3, [r7, #4]
    4c32:	f003 0302 	and.w	r3, r3, #2
    4c36:	2b00      	cmp	r3, #0
    4c38:	d004      	beq.n	4c44 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4c3a:	4a34      	ldr	r2, [pc, #208]	; (4d0c <_gclk_init_generators_by_fref+0xf8>)
    4c3c:	2101      	movs	r1, #1
    4c3e:	4831      	ldr	r0, [pc, #196]	; (4d04 <_gclk_init_generators_by_fref+0xf0>)
    4c40:	4b31      	ldr	r3, [pc, #196]	; (4d08 <_gclk_init_generators_by_fref+0xf4>)
    4c42:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4c44:	687b      	ldr	r3, [r7, #4]
    4c46:	f003 0304 	and.w	r3, r3, #4
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d004      	beq.n	4c58 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4c4e:	4a30      	ldr	r2, [pc, #192]	; (4d10 <_gclk_init_generators_by_fref+0xfc>)
    4c50:	2102      	movs	r1, #2
    4c52:	482c      	ldr	r0, [pc, #176]	; (4d04 <_gclk_init_generators_by_fref+0xf0>)
    4c54:	4b2c      	ldr	r3, [pc, #176]	; (4d08 <_gclk_init_generators_by_fref+0xf4>)
    4c56:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	f003 0308 	and.w	r3, r3, #8
    4c5e:	2b00      	cmp	r3, #0
    4c60:	d004      	beq.n	4c6c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4c62:	4a2c      	ldr	r2, [pc, #176]	; (4d14 <_gclk_init_generators_by_fref+0x100>)
    4c64:	2103      	movs	r1, #3
    4c66:	4827      	ldr	r0, [pc, #156]	; (4d04 <_gclk_init_generators_by_fref+0xf0>)
    4c68:	4b27      	ldr	r3, [pc, #156]	; (4d08 <_gclk_init_generators_by_fref+0xf4>)
    4c6a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4c6c:	687b      	ldr	r3, [r7, #4]
    4c6e:	f003 0310 	and.w	r3, r3, #16
    4c72:	2b00      	cmp	r3, #0
    4c74:	d004      	beq.n	4c80 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4c76:	4a28      	ldr	r2, [pc, #160]	; (4d18 <_gclk_init_generators_by_fref+0x104>)
    4c78:	2104      	movs	r1, #4
    4c7a:	4822      	ldr	r0, [pc, #136]	; (4d04 <_gclk_init_generators_by_fref+0xf0>)
    4c7c:	4b22      	ldr	r3, [pc, #136]	; (4d08 <_gclk_init_generators_by_fref+0xf4>)
    4c7e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4c80:	687b      	ldr	r3, [r7, #4]
    4c82:	f003 0320 	and.w	r3, r3, #32
    4c86:	2b00      	cmp	r3, #0
    4c88:	d004      	beq.n	4c94 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4c8a:	4a24      	ldr	r2, [pc, #144]	; (4d1c <_gclk_init_generators_by_fref+0x108>)
    4c8c:	2105      	movs	r1, #5
    4c8e:	481d      	ldr	r0, [pc, #116]	; (4d04 <_gclk_init_generators_by_fref+0xf0>)
    4c90:	4b1d      	ldr	r3, [pc, #116]	; (4d08 <_gclk_init_generators_by_fref+0xf4>)
    4c92:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4c94:	687b      	ldr	r3, [r7, #4]
    4c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d004      	beq.n	4ca8 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4c9e:	4a20      	ldr	r2, [pc, #128]	; (4d20 <_gclk_init_generators_by_fref+0x10c>)
    4ca0:	2106      	movs	r1, #6
    4ca2:	4818      	ldr	r0, [pc, #96]	; (4d04 <_gclk_init_generators_by_fref+0xf0>)
    4ca4:	4b18      	ldr	r3, [pc, #96]	; (4d08 <_gclk_init_generators_by_fref+0xf4>)
    4ca6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4ca8:	687b      	ldr	r3, [r7, #4]
    4caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d004      	beq.n	4cbc <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4cb2:	4a1c      	ldr	r2, [pc, #112]	; (4d24 <_gclk_init_generators_by_fref+0x110>)
    4cb4:	2107      	movs	r1, #7
    4cb6:	4813      	ldr	r0, [pc, #76]	; (4d04 <_gclk_init_generators_by_fref+0xf0>)
    4cb8:	4b13      	ldr	r3, [pc, #76]	; (4d08 <_gclk_init_generators_by_fref+0xf4>)
    4cba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4cbc:	687b      	ldr	r3, [r7, #4]
    4cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d004      	beq.n	4cd0 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4cc6:	4a18      	ldr	r2, [pc, #96]	; (4d28 <_gclk_init_generators_by_fref+0x114>)
    4cc8:	2108      	movs	r1, #8
    4cca:	480e      	ldr	r0, [pc, #56]	; (4d04 <_gclk_init_generators_by_fref+0xf0>)
    4ccc:	4b0e      	ldr	r3, [pc, #56]	; (4d08 <_gclk_init_generators_by_fref+0xf4>)
    4cce:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d004      	beq.n	4ce4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4cda:	4a14      	ldr	r2, [pc, #80]	; (4d2c <_gclk_init_generators_by_fref+0x118>)
    4cdc:	210a      	movs	r1, #10
    4cde:	4809      	ldr	r0, [pc, #36]	; (4d04 <_gclk_init_generators_by_fref+0xf0>)
    4ce0:	4b09      	ldr	r3, [pc, #36]	; (4d08 <_gclk_init_generators_by_fref+0xf4>)
    4ce2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4ce4:	687b      	ldr	r3, [r7, #4]
    4ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4cea:	2b00      	cmp	r3, #0
    4cec:	d004      	beq.n	4cf8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4cee:	4a10      	ldr	r2, [pc, #64]	; (4d30 <_gclk_init_generators_by_fref+0x11c>)
    4cf0:	210b      	movs	r1, #11
    4cf2:	4804      	ldr	r0, [pc, #16]	; (4d04 <_gclk_init_generators_by_fref+0xf0>)
    4cf4:	4b04      	ldr	r3, [pc, #16]	; (4d08 <_gclk_init_generators_by_fref+0xf4>)
    4cf6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4cf8:	bf00      	nop
    4cfa:	3708      	adds	r7, #8
    4cfc:	46bd      	mov	sp, r7
    4cfe:	bd80      	pop	{r7, pc}
    4d00:	00010107 	.word	0x00010107
    4d04:	40001c00 	.word	0x40001c00
    4d08:	00004be5 	.word	0x00004be5
    4d0c:	00010907 	.word	0x00010907
    4d10:	00010906 	.word	0x00010906
    4d14:	00020908 	.word	0x00020908
    4d18:	00010901 	.word	0x00010901
    4d1c:	00062901 	.word	0x00062901
    4d20:	000c2901 	.word	0x000c2901
    4d24:	00082908 	.word	0x00082908
    4d28:	00032901 	.word	0x00032901
    4d2c:	00010905 	.word	0x00010905
    4d30:	00041905 	.word	0x00041905

00004d34 <hri_mclk_write_CPUDIV_reg>:
{
    4d34:	b480      	push	{r7}
    4d36:	b083      	sub	sp, #12
    4d38:	af00      	add	r7, sp, #0
    4d3a:	6078      	str	r0, [r7, #4]
    4d3c:	460b      	mov	r3, r1
    4d3e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4d40:	687b      	ldr	r3, [r7, #4]
    4d42:	78fa      	ldrb	r2, [r7, #3]
    4d44:	715a      	strb	r2, [r3, #5]
}
    4d46:	bf00      	nop
    4d48:	370c      	adds	r7, #12
    4d4a:	46bd      	mov	sp, r7
    4d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d50:	4770      	bx	lr
	...

00004d54 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4d54:	b580      	push	{r7, lr}
    4d56:	b082      	sub	sp, #8
    4d58:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4d5a:	4b05      	ldr	r3, [pc, #20]	; (4d70 <_mclk_init+0x1c>)
    4d5c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4d5e:	2101      	movs	r1, #1
    4d60:	6878      	ldr	r0, [r7, #4]
    4d62:	4b04      	ldr	r3, [pc, #16]	; (4d74 <_mclk_init+0x20>)
    4d64:	4798      	blx	r3
}
    4d66:	bf00      	nop
    4d68:	3708      	adds	r7, #8
    4d6a:	46bd      	mov	sp, r7
    4d6c:	bd80      	pop	{r7, pc}
    4d6e:	bf00      	nop
    4d70:	40000800 	.word	0x40000800
    4d74:	00004d35 	.word	0x00004d35

00004d78 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4d78:	b480      	push	{r7}
    4d7a:	b083      	sub	sp, #12
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
    4d80:	460b      	mov	r3, r1
    4d82:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4d84:	687b      	ldr	r3, [r7, #4]
    4d86:	78fa      	ldrb	r2, [r7, #3]
    4d88:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4d8a:	bf00      	nop
    4d8c:	370c      	adds	r7, #12
    4d8e:	46bd      	mov	sp, r7
    4d90:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d94:	4770      	bx	lr

00004d96 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4d96:	b480      	push	{r7}
    4d98:	b083      	sub	sp, #12
    4d9a:	af00      	add	r7, sp, #0
    4d9c:	6078      	str	r0, [r7, #4]
    4d9e:	460b      	mov	r3, r1
    4da0:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	887a      	ldrh	r2, [r7, #2]
    4da6:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4da8:	bf00      	nop
    4daa:	370c      	adds	r7, #12
    4dac:	46bd      	mov	sp, r7
    4dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    4db2:	4770      	bx	lr

00004db4 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4db4:	b480      	push	{r7}
    4db6:	b083      	sub	sp, #12
    4db8:	af00      	add	r7, sp, #0
    4dba:	6078      	str	r0, [r7, #4]
    4dbc:	460b      	mov	r3, r1
    4dbe:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4dc0:	687b      	ldr	r3, [r7, #4]
    4dc2:	78fa      	ldrb	r2, [r7, #3]
    4dc4:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4dc6:	bf00      	nop
    4dc8:	370c      	adds	r7, #12
    4dca:	46bd      	mov	sp, r7
    4dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dd0:	4770      	bx	lr

00004dd2 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4dd2:	b480      	push	{r7}
    4dd4:	b083      	sub	sp, #12
    4dd6:	af00      	add	r7, sp, #0
    4dd8:	6078      	str	r0, [r7, #4]
    4dda:	460b      	mov	r3, r1
    4ddc:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4dde:	687b      	ldr	r3, [r7, #4]
    4de0:	78fa      	ldrb	r2, [r7, #3]
    4de2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4de4:	bf00      	nop
    4de6:	370c      	adds	r7, #12
    4de8:	46bd      	mov	sp, r7
    4dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dee:	4770      	bx	lr

00004df0 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4df0:	b480      	push	{r7}
    4df2:	b085      	sub	sp, #20
    4df4:	af00      	add	r7, sp, #0
    4df6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	69db      	ldr	r3, [r3, #28]
    4dfc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4dfe:	68fb      	ldr	r3, [r7, #12]
    4e00:	0a1b      	lsrs	r3, r3, #8
    4e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e06:	60fb      	str	r3, [r7, #12]
	return tmp;
    4e08:	68fb      	ldr	r3, [r7, #12]
}
    4e0a:	4618      	mov	r0, r3
    4e0c:	3714      	adds	r7, #20
    4e0e:	46bd      	mov	sp, r7
    4e10:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e14:	4770      	bx	lr

00004e16 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4e16:	b480      	push	{r7}
    4e18:	b083      	sub	sp, #12
    4e1a:	af00      	add	r7, sp, #0
    4e1c:	6078      	str	r0, [r7, #4]
    4e1e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	683a      	ldr	r2, [r7, #0]
    4e24:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e26:	bf00      	nop
    4e28:	370c      	adds	r7, #12
    4e2a:	46bd      	mov	sp, r7
    4e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e30:	4770      	bx	lr
	...

00004e34 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4e34:	b580      	push	{r7, lr}
    4e36:	b082      	sub	sp, #8
    4e38:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4e3a:	4b13      	ldr	r3, [pc, #76]	; (4e88 <_osc32kctrl_init_sources+0x54>)
    4e3c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4e3e:	2300      	movs	r3, #0
    4e40:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4e42:	f242 018e 	movw	r1, #8334	; 0x208e
    4e46:	6878      	ldr	r0, [r7, #4]
    4e48:	4b10      	ldr	r3, [pc, #64]	; (4e8c <_osc32kctrl_init_sources+0x58>)
    4e4a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4e4c:	2100      	movs	r1, #0
    4e4e:	6878      	ldr	r0, [r7, #4]
    4e50:	4b0f      	ldr	r3, [pc, #60]	; (4e90 <_osc32kctrl_init_sources+0x5c>)
    4e52:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4e54:	2100      	movs	r1, #0
    4e56:	6878      	ldr	r0, [r7, #4]
    4e58:	4b0e      	ldr	r3, [pc, #56]	; (4e94 <_osc32kctrl_init_sources+0x60>)
    4e5a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4e5c:	6878      	ldr	r0, [r7, #4]
    4e5e:	4b0e      	ldr	r3, [pc, #56]	; (4e98 <_osc32kctrl_init_sources+0x64>)
    4e60:	4798      	blx	r3
    4e62:	4603      	mov	r3, r0
    4e64:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4e66:	887b      	ldrh	r3, [r7, #2]
    4e68:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4e6a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4e6e:	4619      	mov	r1, r3
    4e70:	6878      	ldr	r0, [r7, #4]
    4e72:	4b0a      	ldr	r3, [pc, #40]	; (4e9c <_osc32kctrl_init_sources+0x68>)
    4e74:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4e76:	2100      	movs	r1, #0
    4e78:	6878      	ldr	r0, [r7, #4]
    4e7a:	4b09      	ldr	r3, [pc, #36]	; (4ea0 <_osc32kctrl_init_sources+0x6c>)
    4e7c:	4798      	blx	r3
	(void)calib;
}
    4e7e:	bf00      	nop
    4e80:	3708      	adds	r7, #8
    4e82:	46bd      	mov	sp, r7
    4e84:	bd80      	pop	{r7, pc}
    4e86:	bf00      	nop
    4e88:	40001400 	.word	0x40001400
    4e8c:	00004d97 	.word	0x00004d97
    4e90:	00004db5 	.word	0x00004db5
    4e94:	00004dd3 	.word	0x00004dd3
    4e98:	00004df1 	.word	0x00004df1
    4e9c:	00004e17 	.word	0x00004e17
    4ea0:	00004d79 	.word	0x00004d79

00004ea4 <hri_gclk_wait_for_sync>:
{
    4ea4:	b480      	push	{r7}
    4ea6:	b083      	sub	sp, #12
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
    4eac:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4eae:	bf00      	nop
    4eb0:	687b      	ldr	r3, [r7, #4]
    4eb2:	685a      	ldr	r2, [r3, #4]
    4eb4:	683b      	ldr	r3, [r7, #0]
    4eb6:	4013      	ands	r3, r2
    4eb8:	2b00      	cmp	r3, #0
    4eba:	d1f9      	bne.n	4eb0 <hri_gclk_wait_for_sync+0xc>
}
    4ebc:	bf00      	nop
    4ebe:	370c      	adds	r7, #12
    4ec0:	46bd      	mov	sp, r7
    4ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ec6:	4770      	bx	lr

00004ec8 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4ec8:	b480      	push	{r7}
    4eca:	b083      	sub	sp, #12
    4ecc:	af00      	add	r7, sp, #0
    4ece:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	685b      	ldr	r3, [r3, #4]
    4ed4:	089b      	lsrs	r3, r3, #2
    4ed6:	f003 0301 	and.w	r3, r3, #1
    4eda:	2b00      	cmp	r3, #0
    4edc:	bf14      	ite	ne
    4ede:	2301      	movne	r3, #1
    4ee0:	2300      	moveq	r3, #0
    4ee2:	b2db      	uxtb	r3, r3
}
    4ee4:	4618      	mov	r0, r3
    4ee6:	370c      	adds	r7, #12
    4ee8:	46bd      	mov	sp, r7
    4eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eee:	4770      	bx	lr

00004ef0 <hri_gclk_read_SYNCBUSY_reg>:
{
    4ef0:	b480      	push	{r7}
    4ef2:	b083      	sub	sp, #12
    4ef4:	af00      	add	r7, sp, #0
    4ef6:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4ef8:	687b      	ldr	r3, [r7, #4]
    4efa:	685b      	ldr	r3, [r3, #4]
}
    4efc:	4618      	mov	r0, r3
    4efe:	370c      	adds	r7, #12
    4f00:	46bd      	mov	sp, r7
    4f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f06:	4770      	bx	lr

00004f08 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4f08:	b580      	push	{r7, lr}
    4f0a:	b086      	sub	sp, #24
    4f0c:	af00      	add	r7, sp, #0
    4f0e:	60f8      	str	r0, [r7, #12]
    4f10:	460b      	mov	r3, r1
    4f12:	607a      	str	r2, [r7, #4]
    4f14:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4f16:	7afa      	ldrb	r2, [r7, #11]
    4f18:	68fb      	ldr	r3, [r7, #12]
    4f1a:	3208      	adds	r2, #8
    4f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f20:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4f22:	697b      	ldr	r3, [r7, #20]
    4f24:	f023 030f 	bic.w	r3, r3, #15
    4f28:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4f2a:	687b      	ldr	r3, [r7, #4]
    4f2c:	f003 030f 	and.w	r3, r3, #15
    4f30:	697a      	ldr	r2, [r7, #20]
    4f32:	4313      	orrs	r3, r2
    4f34:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4f36:	7afa      	ldrb	r2, [r7, #11]
    4f38:	68fb      	ldr	r3, [r7, #12]
    4f3a:	3208      	adds	r2, #8
    4f3c:	6979      	ldr	r1, [r7, #20]
    4f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4f42:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4f46:	68f8      	ldr	r0, [r7, #12]
    4f48:	4b02      	ldr	r3, [pc, #8]	; (4f54 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4f4a:	4798      	blx	r3
}
    4f4c:	bf00      	nop
    4f4e:	3718      	adds	r7, #24
    4f50:	46bd      	mov	sp, r7
    4f52:	bd80      	pop	{r7, pc}
    4f54:	00004ea5 	.word	0x00004ea5

00004f58 <hri_gclk_write_PCHCTRL_reg>:
{
    4f58:	b480      	push	{r7}
    4f5a:	b085      	sub	sp, #20
    4f5c:	af00      	add	r7, sp, #0
    4f5e:	60f8      	str	r0, [r7, #12]
    4f60:	460b      	mov	r3, r1
    4f62:	607a      	str	r2, [r7, #4]
    4f64:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4f66:	7afa      	ldrb	r2, [r7, #11]
    4f68:	68fb      	ldr	r3, [r7, #12]
    4f6a:	3220      	adds	r2, #32
    4f6c:	6879      	ldr	r1, [r7, #4]
    4f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4f72:	bf00      	nop
    4f74:	3714      	adds	r7, #20
    4f76:	46bd      	mov	sp, r7
    4f78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f7c:	4770      	bx	lr

00004f7e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4f7e:	b480      	push	{r7}
    4f80:	b085      	sub	sp, #20
    4f82:	af00      	add	r7, sp, #0
    4f84:	60f8      	str	r0, [r7, #12]
    4f86:	460b      	mov	r3, r1
    4f88:	607a      	str	r2, [r7, #4]
    4f8a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4f8c:	bf00      	nop
    4f8e:	7afa      	ldrb	r2, [r7, #11]
    4f90:	68f9      	ldr	r1, [r7, #12]
    4f92:	4613      	mov	r3, r2
    4f94:	009b      	lsls	r3, r3, #2
    4f96:	4413      	add	r3, r2
    4f98:	009b      	lsls	r3, r3, #2
    4f9a:	440b      	add	r3, r1
    4f9c:	333c      	adds	r3, #60	; 0x3c
    4f9e:	681a      	ldr	r2, [r3, #0]
    4fa0:	687b      	ldr	r3, [r7, #4]
    4fa2:	4013      	ands	r3, r2
    4fa4:	2b00      	cmp	r3, #0
    4fa6:	d1f2      	bne.n	4f8e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4fa8:	bf00      	nop
    4faa:	3714      	adds	r7, #20
    4fac:	46bd      	mov	sp, r7
    4fae:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fb2:	4770      	bx	lr

00004fb4 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4fb4:	b480      	push	{r7}
    4fb6:	b083      	sub	sp, #12
    4fb8:	af00      	add	r7, sp, #0
    4fba:	6078      	str	r0, [r7, #4]
    4fbc:	460b      	mov	r3, r1
    4fbe:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4fc0:	78fa      	ldrb	r2, [r7, #3]
    4fc2:	6879      	ldr	r1, [r7, #4]
    4fc4:	4613      	mov	r3, r2
    4fc6:	009b      	lsls	r3, r3, #2
    4fc8:	4413      	add	r3, r2
    4fca:	009b      	lsls	r3, r3, #2
    4fcc:	440b      	add	r3, r1
    4fce:	3340      	adds	r3, #64	; 0x40
    4fd0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4fd2:	f003 0301 	and.w	r3, r3, #1
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	bf14      	ite	ne
    4fda:	2301      	movne	r3, #1
    4fdc:	2300      	moveq	r3, #0
    4fde:	b2db      	uxtb	r3, r3
}
    4fe0:	4618      	mov	r0, r3
    4fe2:	370c      	adds	r7, #12
    4fe4:	46bd      	mov	sp, r7
    4fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fea:	4770      	bx	lr

00004fec <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4fec:	b480      	push	{r7}
    4fee:	b083      	sub	sp, #12
    4ff0:	af00      	add	r7, sp, #0
    4ff2:	6078      	str	r0, [r7, #4]
    4ff4:	460b      	mov	r3, r1
    4ff6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4ff8:	78fa      	ldrb	r2, [r7, #3]
    4ffa:	6879      	ldr	r1, [r7, #4]
    4ffc:	4613      	mov	r3, r2
    4ffe:	009b      	lsls	r3, r3, #2
    5000:	4413      	add	r3, r2
    5002:	009b      	lsls	r3, r3, #2
    5004:	440b      	add	r3, r1
    5006:	3340      	adds	r3, #64	; 0x40
    5008:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    500a:	085b      	lsrs	r3, r3, #1
    500c:	f003 0301 	and.w	r3, r3, #1
    5010:	2b00      	cmp	r3, #0
    5012:	bf14      	ite	ne
    5014:	2301      	movne	r3, #1
    5016:	2300      	moveq	r3, #0
    5018:	b2db      	uxtb	r3, r3
}
    501a:	4618      	mov	r0, r3
    501c:	370c      	adds	r7, #12
    501e:	46bd      	mov	sp, r7
    5020:	f85d 7b04 	ldr.w	r7, [sp], #4
    5024:	4770      	bx	lr
	...

00005028 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5028:	b580      	push	{r7, lr}
    502a:	b082      	sub	sp, #8
    502c:	af00      	add	r7, sp, #0
    502e:	6078      	str	r0, [r7, #4]
    5030:	460b      	mov	r3, r1
    5032:	70fb      	strb	r3, [r7, #3]
    5034:	4613      	mov	r3, r2
    5036:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5038:	78fa      	ldrb	r2, [r7, #3]
    503a:	6879      	ldr	r1, [r7, #4]
    503c:	4613      	mov	r3, r2
    503e:	009b      	lsls	r3, r3, #2
    5040:	4413      	add	r3, r2
    5042:	009b      	lsls	r3, r3, #2
    5044:	440b      	add	r3, r1
    5046:	3330      	adds	r3, #48	; 0x30
    5048:	78ba      	ldrb	r2, [r7, #2]
    504a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    504c:	78fb      	ldrb	r3, [r7, #3]
    504e:	2202      	movs	r2, #2
    5050:	4619      	mov	r1, r3
    5052:	6878      	ldr	r0, [r7, #4]
    5054:	4b02      	ldr	r3, [pc, #8]	; (5060 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5056:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5058:	bf00      	nop
    505a:	3708      	adds	r7, #8
    505c:	46bd      	mov	sp, r7
    505e:	bd80      	pop	{r7, pc}
    5060:	00004f7f 	.word	0x00004f7f

00005064 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5064:	b580      	push	{r7, lr}
    5066:	b084      	sub	sp, #16
    5068:	af00      	add	r7, sp, #0
    506a:	60f8      	str	r0, [r7, #12]
    506c:	460b      	mov	r3, r1
    506e:	607a      	str	r2, [r7, #4]
    5070:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5072:	7afa      	ldrb	r2, [r7, #11]
    5074:	68f9      	ldr	r1, [r7, #12]
    5076:	4613      	mov	r3, r2
    5078:	009b      	lsls	r3, r3, #2
    507a:	4413      	add	r3, r2
    507c:	009b      	lsls	r3, r3, #2
    507e:	440b      	add	r3, r1
    5080:	3334      	adds	r3, #52	; 0x34
    5082:	687a      	ldr	r2, [r7, #4]
    5084:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5086:	7afb      	ldrb	r3, [r7, #11]
    5088:	2206      	movs	r2, #6
    508a:	4619      	mov	r1, r3
    508c:	68f8      	ldr	r0, [r7, #12]
    508e:	4b03      	ldr	r3, [pc, #12]	; (509c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5090:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5092:	bf00      	nop
    5094:	3710      	adds	r7, #16
    5096:	46bd      	mov	sp, r7
    5098:	bd80      	pop	{r7, pc}
    509a:	bf00      	nop
    509c:	00004f7f 	.word	0x00004f7f

000050a0 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    50a0:	b480      	push	{r7}
    50a2:	b085      	sub	sp, #20
    50a4:	af00      	add	r7, sp, #0
    50a6:	60f8      	str	r0, [r7, #12]
    50a8:	460b      	mov	r3, r1
    50aa:	607a      	str	r2, [r7, #4]
    50ac:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    50ae:	7afa      	ldrb	r2, [r7, #11]
    50b0:	68f9      	ldr	r1, [r7, #12]
    50b2:	4613      	mov	r3, r2
    50b4:	009b      	lsls	r3, r3, #2
    50b6:	4413      	add	r3, r2
    50b8:	009b      	lsls	r3, r3, #2
    50ba:	440b      	add	r3, r1
    50bc:	3338      	adds	r3, #56	; 0x38
    50be:	687a      	ldr	r2, [r7, #4]
    50c0:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    50c2:	bf00      	nop
    50c4:	3714      	adds	r7, #20
    50c6:	46bd      	mov	sp, r7
    50c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    50cc:	4770      	bx	lr

000050ce <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    50ce:	b480      	push	{r7}
    50d0:	b083      	sub	sp, #12
    50d2:	af00      	add	r7, sp, #0
    50d4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    50d6:	687b      	ldr	r3, [r7, #4]
    50d8:	691b      	ldr	r3, [r3, #16]
    50da:	085b      	lsrs	r3, r3, #1
    50dc:	f003 0301 	and.w	r3, r3, #1
    50e0:	2b00      	cmp	r3, #0
    50e2:	bf14      	ite	ne
    50e4:	2301      	movne	r3, #1
    50e6:	2300      	moveq	r3, #0
    50e8:	b2db      	uxtb	r3, r3
}
    50ea:	4618      	mov	r0, r3
    50ec:	370c      	adds	r7, #12
    50ee:	46bd      	mov	sp, r7
    50f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    50f4:	4770      	bx	lr

000050f6 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    50f6:	b480      	push	{r7}
    50f8:	b083      	sub	sp, #12
    50fa:	af00      	add	r7, sp, #0
    50fc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    50fe:	687b      	ldr	r3, [r7, #4]
    5100:	691b      	ldr	r3, [r3, #16]
    5102:	0a1b      	lsrs	r3, r3, #8
    5104:	f003 0301 	and.w	r3, r3, #1
    5108:	2b00      	cmp	r3, #0
    510a:	bf14      	ite	ne
    510c:	2301      	movne	r3, #1
    510e:	2300      	moveq	r3, #0
    5110:	b2db      	uxtb	r3, r3
}
    5112:	4618      	mov	r0, r3
    5114:	370c      	adds	r7, #12
    5116:	46bd      	mov	sp, r7
    5118:	f85d 7b04 	ldr.w	r7, [sp], #4
    511c:	4770      	bx	lr

0000511e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    511e:	b480      	push	{r7}
    5120:	b085      	sub	sp, #20
    5122:	af00      	add	r7, sp, #0
    5124:	6078      	str	r0, [r7, #4]
    5126:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5128:	687b      	ldr	r3, [r7, #4]
    512a:	691b      	ldr	r3, [r3, #16]
    512c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    512e:	68fa      	ldr	r2, [r7, #12]
    5130:	683b      	ldr	r3, [r7, #0]
    5132:	4013      	ands	r3, r2
    5134:	60fb      	str	r3, [r7, #12]
	return tmp;
    5136:	68fb      	ldr	r3, [r7, #12]
}
    5138:	4618      	mov	r0, r3
    513a:	3714      	adds	r7, #20
    513c:	46bd      	mov	sp, r7
    513e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5142:	4770      	bx	lr

00005144 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5144:	b480      	push	{r7}
    5146:	b085      	sub	sp, #20
    5148:	af00      	add	r7, sp, #0
    514a:	60f8      	str	r0, [r7, #12]
    514c:	460b      	mov	r3, r1
    514e:	607a      	str	r2, [r7, #4]
    5150:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5152:	7afb      	ldrb	r3, [r7, #11]
    5154:	68fa      	ldr	r2, [r7, #12]
    5156:	3304      	adds	r3, #4
    5158:	009b      	lsls	r3, r3, #2
    515a:	4413      	add	r3, r2
    515c:	687a      	ldr	r2, [r7, #4]
    515e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5160:	bf00      	nop
    5162:	3714      	adds	r7, #20
    5164:	46bd      	mov	sp, r7
    5166:	f85d 7b04 	ldr.w	r7, [sp], #4
    516a:	4770      	bx	lr

0000516c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    516c:	b480      	push	{r7}
    516e:	b083      	sub	sp, #12
    5170:	af00      	add	r7, sp, #0
    5172:	6078      	str	r0, [r7, #4]
    5174:	460b      	mov	r3, r1
    5176:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5178:	687b      	ldr	r3, [r7, #4]
    517a:	78fa      	ldrb	r2, [r7, #3]
    517c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    517e:	bf00      	nop
    5180:	370c      	adds	r7, #12
    5182:	46bd      	mov	sp, r7
    5184:	f85d 7b04 	ldr.w	r7, [sp], #4
    5188:	4770      	bx	lr

0000518a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    518a:	b480      	push	{r7}
    518c:	b085      	sub	sp, #20
    518e:	af00      	add	r7, sp, #0
    5190:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5192:	687b      	ldr	r3, [r7, #4]
    5194:	f893 3020 	ldrb.w	r3, [r3, #32]
    5198:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    519a:	7bfb      	ldrb	r3, [r7, #15]
    519c:	f003 0301 	and.w	r3, r3, #1
    51a0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    51a2:	7bfb      	ldrb	r3, [r7, #15]
    51a4:	2b00      	cmp	r3, #0
    51a6:	bf14      	ite	ne
    51a8:	2301      	movne	r3, #1
    51aa:	2300      	moveq	r3, #0
    51ac:	b2db      	uxtb	r3, r3
}
    51ae:	4618      	mov	r0, r3
    51b0:	3714      	adds	r7, #20
    51b2:	46bd      	mov	sp, r7
    51b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51b8:	4770      	bx	lr

000051ba <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    51ba:	b480      	push	{r7}
    51bc:	b083      	sub	sp, #12
    51be:	af00      	add	r7, sp, #0
    51c0:	6078      	str	r0, [r7, #4]
    51c2:	460b      	mov	r3, r1
    51c4:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    51c6:	687b      	ldr	r3, [r7, #4]
    51c8:	78fa      	ldrb	r2, [r7, #3]
    51ca:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51ce:	bf00      	nop
    51d0:	370c      	adds	r7, #12
    51d2:	46bd      	mov	sp, r7
    51d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51d8:	4770      	bx	lr

000051da <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    51da:	b480      	push	{r7}
    51dc:	b083      	sub	sp, #12
    51de:	af00      	add	r7, sp, #0
    51e0:	6078      	str	r0, [r7, #4]
    51e2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	683a      	ldr	r2, [r7, #0]
    51e8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51ea:	bf00      	nop
    51ec:	370c      	adds	r7, #12
    51ee:	46bd      	mov	sp, r7
    51f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    51f4:	4770      	bx	lr

000051f6 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    51f6:	b480      	push	{r7}
    51f8:	b083      	sub	sp, #12
    51fa:	af00      	add	r7, sp, #0
    51fc:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    51fe:	687b      	ldr	r3, [r7, #4]
    5200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5202:	4618      	mov	r0, r3
    5204:	370c      	adds	r7, #12
    5206:	46bd      	mov	sp, r7
    5208:	f85d 7b04 	ldr.w	r7, [sp], #4
    520c:	4770      	bx	lr

0000520e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    520e:	b480      	push	{r7}
    5210:	b083      	sub	sp, #12
    5212:	af00      	add	r7, sp, #0
    5214:	6078      	str	r0, [r7, #4]
    5216:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	683a      	ldr	r2, [r7, #0]
    521c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    521e:	bf00      	nop
    5220:	370c      	adds	r7, #12
    5222:	46bd      	mov	sp, r7
    5224:	f85d 7b04 	ldr.w	r7, [sp], #4
    5228:	4770      	bx	lr

0000522a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    522a:	b480      	push	{r7}
    522c:	b085      	sub	sp, #20
    522e:	af00      	add	r7, sp, #0
    5230:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5232:	687b      	ldr	r3, [r7, #4]
    5234:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5238:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    523a:	7bfb      	ldrb	r3, [r7, #15]
    523c:	085b      	lsrs	r3, r3, #1
    523e:	b2db      	uxtb	r3, r3
    5240:	f003 0301 	and.w	r3, r3, #1
    5244:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5246:	7bfb      	ldrb	r3, [r7, #15]
    5248:	2b00      	cmp	r3, #0
    524a:	bf14      	ite	ne
    524c:	2301      	movne	r3, #1
    524e:	2300      	moveq	r3, #0
    5250:	b2db      	uxtb	r3, r3
}
    5252:	4618      	mov	r0, r3
    5254:	3714      	adds	r7, #20
    5256:	46bd      	mov	sp, r7
    5258:	f85d 7b04 	ldr.w	r7, [sp], #4
    525c:	4770      	bx	lr

0000525e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    525e:	b480      	push	{r7}
    5260:	b085      	sub	sp, #20
    5262:	af00      	add	r7, sp, #0
    5264:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5266:	687b      	ldr	r3, [r7, #4]
    5268:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    526c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    526e:	7bfb      	ldrb	r3, [r7, #15]
    5270:	089b      	lsrs	r3, r3, #2
    5272:	b2db      	uxtb	r3, r3
    5274:	f003 0301 	and.w	r3, r3, #1
    5278:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    527a:	7bfb      	ldrb	r3, [r7, #15]
    527c:	2b00      	cmp	r3, #0
    527e:	bf14      	ite	ne
    5280:	2301      	movne	r3, #1
    5282:	2300      	moveq	r3, #0
    5284:	b2db      	uxtb	r3, r3
}
    5286:	4618      	mov	r0, r3
    5288:	3714      	adds	r7, #20
    528a:	46bd      	mov	sp, r7
    528c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5290:	4770      	bx	lr

00005292 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5292:	b480      	push	{r7}
    5294:	b085      	sub	sp, #20
    5296:	af00      	add	r7, sp, #0
    5298:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    529a:	687b      	ldr	r3, [r7, #4]
    529c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    52a0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    52a2:	7bfb      	ldrb	r3, [r7, #15]
    52a4:	08db      	lsrs	r3, r3, #3
    52a6:	b2db      	uxtb	r3, r3
    52a8:	f003 0301 	and.w	r3, r3, #1
    52ac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    52ae:	7bfb      	ldrb	r3, [r7, #15]
    52b0:	2b00      	cmp	r3, #0
    52b2:	bf14      	ite	ne
    52b4:	2301      	movne	r3, #1
    52b6:	2300      	moveq	r3, #0
    52b8:	b2db      	uxtb	r3, r3
}
    52ba:	4618      	mov	r0, r3
    52bc:	3714      	adds	r7, #20
    52be:	46bd      	mov	sp, r7
    52c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    52c4:	4770      	bx	lr

000052c6 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    52c6:	b480      	push	{r7}
    52c8:	b085      	sub	sp, #20
    52ca:	af00      	add	r7, sp, #0
    52cc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    52ce:	687b      	ldr	r3, [r7, #4]
    52d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    52d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    52d6:	7bfb      	ldrb	r3, [r7, #15]
    52d8:	091b      	lsrs	r3, r3, #4
    52da:	b2db      	uxtb	r3, r3
    52dc:	f003 0301 	and.w	r3, r3, #1
    52e0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    52e2:	7bfb      	ldrb	r3, [r7, #15]
    52e4:	2b00      	cmp	r3, #0
    52e6:	bf14      	ite	ne
    52e8:	2301      	movne	r3, #1
    52ea:	2300      	moveq	r3, #0
    52ec:	b2db      	uxtb	r3, r3
}
    52ee:	4618      	mov	r0, r3
    52f0:	3714      	adds	r7, #20
    52f2:	46bd      	mov	sp, r7
    52f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    52f8:	4770      	bx	lr
	...

000052fc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    52fc:	b580      	push	{r7, lr}
    52fe:	b082      	sub	sp, #8
    5300:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5302:	4b0a      	ldr	r3, [pc, #40]	; (532c <_oscctrl_init_sources+0x30>)
    5304:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5306:	4a0a      	ldr	r2, [pc, #40]	; (5330 <_oscctrl_init_sources+0x34>)
    5308:	2101      	movs	r1, #1
    530a:	6878      	ldr	r0, [r7, #4]
    530c:	4b09      	ldr	r3, [pc, #36]	; (5334 <_oscctrl_init_sources+0x38>)
    530e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5310:	bf00      	nop
    5312:	6878      	ldr	r0, [r7, #4]
    5314:	4b08      	ldr	r3, [pc, #32]	; (5338 <_oscctrl_init_sources+0x3c>)
    5316:	4798      	blx	r3
    5318:	4603      	mov	r3, r0
    531a:	f083 0301 	eor.w	r3, r3, #1
    531e:	b2db      	uxtb	r3, r3
    5320:	2b00      	cmp	r3, #0
    5322:	d1f6      	bne.n	5312 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5324:	bf00      	nop
    5326:	3708      	adds	r7, #8
    5328:	46bd      	mov	sp, r7
    532a:	bd80      	pop	{r7, pc}
    532c:	40001000 	.word	0x40001000
    5330:	03002646 	.word	0x03002646
    5334:	00005145 	.word	0x00005145
    5338:	000050cf 	.word	0x000050cf

0000533c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    533c:	b580      	push	{r7, lr}
    533e:	b084      	sub	sp, #16
    5340:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5342:	4b6b      	ldr	r3, [pc, #428]	; (54f0 <_oscctrl_init_referenced_generators+0x1b4>)
    5344:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5346:	2204      	movs	r2, #4
    5348:	2100      	movs	r1, #0
    534a:	486a      	ldr	r0, [pc, #424]	; (54f4 <_oscctrl_init_referenced_generators+0x1b8>)
    534c:	4b6a      	ldr	r3, [pc, #424]	; (54f8 <_oscctrl_init_referenced_generators+0x1bc>)
    534e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5350:	bf00      	nop
    5352:	4868      	ldr	r0, [pc, #416]	; (54f4 <_oscctrl_init_referenced_generators+0x1b8>)
    5354:	4b69      	ldr	r3, [pc, #420]	; (54fc <_oscctrl_init_referenced_generators+0x1c0>)
    5356:	4798      	blx	r3
    5358:	4603      	mov	r3, r0
    535a:	2b00      	cmp	r3, #0
    535c:	d1f9      	bne.n	5352 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    535e:	2100      	movs	r1, #0
    5360:	68f8      	ldr	r0, [r7, #12]
    5362:	4b67      	ldr	r3, [pc, #412]	; (5500 <_oscctrl_init_referenced_generators+0x1c4>)
    5364:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5366:	4967      	ldr	r1, [pc, #412]	; (5504 <_oscctrl_init_referenced_generators+0x1c8>)
    5368:	68f8      	ldr	r0, [r7, #12]
    536a:	4b67      	ldr	r3, [pc, #412]	; (5508 <_oscctrl_init_referenced_generators+0x1cc>)
    536c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    536e:	bf00      	nop
    5370:	68f8      	ldr	r0, [r7, #12]
    5372:	4b66      	ldr	r3, [pc, #408]	; (550c <_oscctrl_init_referenced_generators+0x1d0>)
    5374:	4798      	blx	r3
    5376:	4603      	mov	r3, r0
    5378:	2b00      	cmp	r3, #0
    537a:	d1f9      	bne.n	5370 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    537c:	2100      	movs	r1, #0
    537e:	68f8      	ldr	r0, [r7, #12]
    5380:	4b63      	ldr	r3, [pc, #396]	; (5510 <_oscctrl_init_referenced_generators+0x1d4>)
    5382:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5384:	bf00      	nop
    5386:	68f8      	ldr	r0, [r7, #12]
    5388:	4b62      	ldr	r3, [pc, #392]	; (5514 <_oscctrl_init_referenced_generators+0x1d8>)
    538a:	4798      	blx	r3
    538c:	4603      	mov	r3, r0
    538e:	2b00      	cmp	r3, #0
    5390:	d1f9      	bne.n	5386 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5392:	2302      	movs	r3, #2
    5394:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5396:	7afb      	ldrb	r3, [r7, #11]
    5398:	4619      	mov	r1, r3
    539a:	68f8      	ldr	r0, [r7, #12]
    539c:	4b58      	ldr	r3, [pc, #352]	; (5500 <_oscctrl_init_referenced_generators+0x1c4>)
    539e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    53a0:	bf00      	nop
    53a2:	68f8      	ldr	r0, [r7, #12]
    53a4:	4b5c      	ldr	r3, [pc, #368]	; (5518 <_oscctrl_init_referenced_generators+0x1dc>)
    53a6:	4798      	blx	r3
    53a8:	4603      	mov	r3, r0
    53aa:	2b00      	cmp	r3, #0
    53ac:	d1f9      	bne.n	53a2 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    53ae:	68f8      	ldr	r0, [r7, #12]
    53b0:	4b5a      	ldr	r3, [pc, #360]	; (551c <_oscctrl_init_referenced_generators+0x1e0>)
    53b2:	4798      	blx	r3
    53b4:	4603      	mov	r3, r0
    53b6:	4619      	mov	r1, r3
    53b8:	68f8      	ldr	r0, [r7, #12]
    53ba:	4b59      	ldr	r3, [pc, #356]	; (5520 <_oscctrl_init_referenced_generators+0x1e4>)
    53bc:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    53be:	bf00      	nop
    53c0:	68f8      	ldr	r0, [r7, #12]
    53c2:	4b58      	ldr	r3, [pc, #352]	; (5524 <_oscctrl_init_referenced_generators+0x1e8>)
    53c4:	4798      	blx	r3
    53c6:	4603      	mov	r3, r0
    53c8:	2b00      	cmp	r3, #0
    53ca:	d1f9      	bne.n	53c0 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    53cc:	2319      	movs	r3, #25
    53ce:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    53d0:	7afb      	ldrb	r3, [r7, #11]
    53d2:	4619      	mov	r1, r3
    53d4:	68f8      	ldr	r0, [r7, #12]
    53d6:	4b4e      	ldr	r3, [pc, #312]	; (5510 <_oscctrl_init_referenced_generators+0x1d4>)
    53d8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    53da:	bf00      	nop
    53dc:	68f8      	ldr	r0, [r7, #12]
    53de:	4b4d      	ldr	r3, [pc, #308]	; (5514 <_oscctrl_init_referenced_generators+0x1d8>)
    53e0:	4798      	blx	r3
    53e2:	4603      	mov	r3, r0
    53e4:	2b00      	cmp	r3, #0
    53e6:	d1f9      	bne.n	53dc <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    53e8:	2245      	movs	r2, #69	; 0x45
    53ea:	2101      	movs	r1, #1
    53ec:	4841      	ldr	r0, [pc, #260]	; (54f4 <_oscctrl_init_referenced_generators+0x1b8>)
    53ee:	4b4e      	ldr	r3, [pc, #312]	; (5528 <_oscctrl_init_referenced_generators+0x1ec>)
    53f0:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    53f2:	223b      	movs	r2, #59	; 0x3b
    53f4:	2100      	movs	r1, #0
    53f6:	68f8      	ldr	r0, [r7, #12]
    53f8:	4b4c      	ldr	r3, [pc, #304]	; (552c <_oscctrl_init_referenced_generators+0x1f0>)
    53fa:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    53fc:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5400:	2100      	movs	r1, #0
    5402:	68f8      	ldr	r0, [r7, #12]
    5404:	4b4a      	ldr	r3, [pc, #296]	; (5530 <_oscctrl_init_referenced_generators+0x1f4>)
    5406:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5408:	2242      	movs	r2, #66	; 0x42
    540a:	2100      	movs	r1, #0
    540c:	68f8      	ldr	r0, [r7, #12]
    540e:	4b49      	ldr	r3, [pc, #292]	; (5534 <_oscctrl_init_referenced_generators+0x1f8>)
    5410:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5412:	4a49      	ldr	r2, [pc, #292]	; (5538 <_oscctrl_init_referenced_generators+0x1fc>)
    5414:	2101      	movs	r1, #1
    5416:	68f8      	ldr	r0, [r7, #12]
    5418:	4b44      	ldr	r3, [pc, #272]	; (552c <_oscctrl_init_referenced_generators+0x1f0>)
    541a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    541c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5420:	2101      	movs	r1, #1
    5422:	68f8      	ldr	r0, [r7, #12]
    5424:	4b42      	ldr	r3, [pc, #264]	; (5530 <_oscctrl_init_referenced_generators+0x1f4>)
    5426:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5428:	2202      	movs	r2, #2
    542a:	2101      	movs	r1, #1
    542c:	68f8      	ldr	r0, [r7, #12]
    542e:	4b41      	ldr	r3, [pc, #260]	; (5534 <_oscctrl_init_referenced_generators+0x1f8>)
    5430:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5432:	68f8      	ldr	r0, [r7, #12]
    5434:	4b41      	ldr	r3, [pc, #260]	; (553c <_oscctrl_init_referenced_generators+0x200>)
    5436:	4798      	blx	r3
    5438:	4603      	mov	r3, r0
    543a:	2b00      	cmp	r3, #0
    543c:	d00c      	beq.n	5458 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    543e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5442:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5444:	bf00      	nop
    5446:	6879      	ldr	r1, [r7, #4]
    5448:	68f8      	ldr	r0, [r7, #12]
    544a:	4b3d      	ldr	r3, [pc, #244]	; (5540 <_oscctrl_init_referenced_generators+0x204>)
    544c:	4798      	blx	r3
    544e:	4602      	mov	r2, r0
    5450:	687b      	ldr	r3, [r7, #4]
    5452:	429a      	cmp	r2, r3
    5454:	d1f7      	bne.n	5446 <_oscctrl_init_referenced_generators+0x10a>
    5456:	e009      	b.n	546c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5458:	bf00      	nop
    545a:	68f8      	ldr	r0, [r7, #12]
    545c:	4b39      	ldr	r3, [pc, #228]	; (5544 <_oscctrl_init_referenced_generators+0x208>)
    545e:	4798      	blx	r3
    5460:	4603      	mov	r3, r0
    5462:	f083 0301 	eor.w	r3, r3, #1
    5466:	b2db      	uxtb	r3, r3
    5468:	2b00      	cmp	r3, #0
    546a:	d1f6      	bne.n	545a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    546c:	bf00      	nop
    546e:	2100      	movs	r1, #0
    5470:	68f8      	ldr	r0, [r7, #12]
    5472:	4b35      	ldr	r3, [pc, #212]	; (5548 <_oscctrl_init_referenced_generators+0x20c>)
    5474:	4798      	blx	r3
    5476:	4603      	mov	r3, r0
    5478:	f083 0301 	eor.w	r3, r3, #1
    547c:	b2db      	uxtb	r3, r3
    547e:	2b00      	cmp	r3, #0
    5480:	d009      	beq.n	5496 <_oscctrl_init_referenced_generators+0x15a>
    5482:	2100      	movs	r1, #0
    5484:	68f8      	ldr	r0, [r7, #12]
    5486:	4b31      	ldr	r3, [pc, #196]	; (554c <_oscctrl_init_referenced_generators+0x210>)
    5488:	4798      	blx	r3
    548a:	4603      	mov	r3, r0
    548c:	f083 0301 	eor.w	r3, r3, #1
    5490:	b2db      	uxtb	r3, r3
    5492:	2b00      	cmp	r3, #0
    5494:	d1eb      	bne.n	546e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5496:	bf00      	nop
    5498:	2101      	movs	r1, #1
    549a:	68f8      	ldr	r0, [r7, #12]
    549c:	4b2a      	ldr	r3, [pc, #168]	; (5548 <_oscctrl_init_referenced_generators+0x20c>)
    549e:	4798      	blx	r3
    54a0:	4603      	mov	r3, r0
    54a2:	f083 0301 	eor.w	r3, r3, #1
    54a6:	b2db      	uxtb	r3, r3
    54a8:	2b00      	cmp	r3, #0
    54aa:	d009      	beq.n	54c0 <_oscctrl_init_referenced_generators+0x184>
    54ac:	2101      	movs	r1, #1
    54ae:	68f8      	ldr	r0, [r7, #12]
    54b0:	4b26      	ldr	r3, [pc, #152]	; (554c <_oscctrl_init_referenced_generators+0x210>)
    54b2:	4798      	blx	r3
    54b4:	4603      	mov	r3, r0
    54b6:	f083 0301 	eor.w	r3, r3, #1
    54ba:	b2db      	uxtb	r3, r3
    54bc:	2b00      	cmp	r3, #0
    54be:	d1eb      	bne.n	5498 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    54c0:	bf00      	nop
    54c2:	480c      	ldr	r0, [pc, #48]	; (54f4 <_oscctrl_init_referenced_generators+0x1b8>)
    54c4:	4b22      	ldr	r3, [pc, #136]	; (5550 <_oscctrl_init_referenced_generators+0x214>)
    54c6:	4798      	blx	r3
    54c8:	4603      	mov	r3, r0
    54ca:	2b00      	cmp	r3, #0
    54cc:	d1f9      	bne.n	54c2 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    54ce:	2207      	movs	r2, #7
    54d0:	2100      	movs	r1, #0
    54d2:	4808      	ldr	r0, [pc, #32]	; (54f4 <_oscctrl_init_referenced_generators+0x1b8>)
    54d4:	4b08      	ldr	r3, [pc, #32]	; (54f8 <_oscctrl_init_referenced_generators+0x1bc>)
    54d6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    54d8:	bf00      	nop
    54da:	4806      	ldr	r0, [pc, #24]	; (54f4 <_oscctrl_init_referenced_generators+0x1b8>)
    54dc:	4b07      	ldr	r3, [pc, #28]	; (54fc <_oscctrl_init_referenced_generators+0x1c0>)
    54de:	4798      	blx	r3
    54e0:	4603      	mov	r3, r0
    54e2:	2b00      	cmp	r3, #0
    54e4:	d1f9      	bne.n	54da <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    54e6:	bf00      	nop
    54e8:	3710      	adds	r7, #16
    54ea:	46bd      	mov	sp, r7
    54ec:	bd80      	pop	{r7, pc}
    54ee:	bf00      	nop
    54f0:	40001000 	.word	0x40001000
    54f4:	40001c00 	.word	0x40001c00
    54f8:	00004f09 	.word	0x00004f09
    54fc:	00004ec9 	.word	0x00004ec9
    5500:	0000516d 	.word	0x0000516d
    5504:	0401bb80 	.word	0x0401bb80
    5508:	0000520f 	.word	0x0000520f
    550c:	000052c7 	.word	0x000052c7
    5510:	000051bb 	.word	0x000051bb
    5514:	0000525f 	.word	0x0000525f
    5518:	0000522b 	.word	0x0000522b
    551c:	000051f7 	.word	0x000051f7
    5520:	000051db 	.word	0x000051db
    5524:	00005293 	.word	0x00005293
    5528:	00004f59 	.word	0x00004f59
    552c:	00005065 	.word	0x00005065
    5530:	000050a1 	.word	0x000050a1
    5534:	00005029 	.word	0x00005029
    5538:	000407a0 	.word	0x000407a0
    553c:	0000518b 	.word	0x0000518b
    5540:	0000511f 	.word	0x0000511f
    5544:	000050f7 	.word	0x000050f7
    5548:	00004fb5 	.word	0x00004fb5
    554c:	00004fed 	.word	0x00004fed
    5550:	00004ef1 	.word	0x00004ef1

00005554 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5554:	b480      	push	{r7}
    5556:	b083      	sub	sp, #12
    5558:	af00      	add	r7, sp, #0
    555a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    555c:	687b      	ldr	r3, [r7, #4]
    555e:	69db      	ldr	r3, [r3, #28]
    5560:	0a9b      	lsrs	r3, r3, #10
    5562:	f003 0301 	and.w	r3, r3, #1
    5566:	2b00      	cmp	r3, #0
    5568:	bf14      	ite	ne
    556a:	2301      	movne	r3, #1
    556c:	2300      	moveq	r3, #0
    556e:	b2db      	uxtb	r3, r3
}
    5570:	4618      	mov	r0, r3
    5572:	370c      	adds	r7, #12
    5574:	46bd      	mov	sp, r7
    5576:	f85d 7b04 	ldr.w	r7, [sp], #4
    557a:	4770      	bx	lr

0000557c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    557c:	b480      	push	{r7}
    557e:	b083      	sub	sp, #12
    5580:	af00      	add	r7, sp, #0
    5582:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5584:	687b      	ldr	r3, [r7, #4]
    5586:	f44f 6280 	mov.w	r2, #1024	; 0x400
    558a:	61da      	str	r2, [r3, #28]
}
    558c:	bf00      	nop
    558e:	370c      	adds	r7, #12
    5590:	46bd      	mov	sp, r7
    5592:	f85d 7b04 	ldr.w	r7, [sp], #4
    5596:	4770      	bx	lr

00005598 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5598:	b480      	push	{r7}
    559a:	b083      	sub	sp, #12
    559c:	af00      	add	r7, sp, #0
    559e:	6078      	str	r0, [r7, #4]
    55a0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    55a2:	687b      	ldr	r3, [r7, #4]
    55a4:	683a      	ldr	r2, [r7, #0]
    55a6:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    55a8:	bf00      	nop
    55aa:	370c      	adds	r7, #12
    55ac:	46bd      	mov	sp, r7
    55ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    55b2:	4770      	bx	lr

000055b4 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    55b4:	b480      	push	{r7}
    55b6:	b083      	sub	sp, #12
    55b8:	af00      	add	r7, sp, #0
    55ba:	6078      	str	r0, [r7, #4]
    55bc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    55be:	687b      	ldr	r3, [r7, #4]
    55c0:	683a      	ldr	r2, [r7, #0]
    55c2:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    55c4:	bf00      	nop
    55c6:	370c      	adds	r7, #12
    55c8:	46bd      	mov	sp, r7
    55ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ce:	4770      	bx	lr

000055d0 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    55d0:	b480      	push	{r7}
    55d2:	b083      	sub	sp, #12
    55d4:	af00      	add	r7, sp, #0
    55d6:	6078      	str	r0, [r7, #4]
    55d8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    55da:	687b      	ldr	r3, [r7, #4]
    55dc:	683a      	ldr	r2, [r7, #0]
    55de:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    55e0:	bf00      	nop
    55e2:	370c      	adds	r7, #12
    55e4:	46bd      	mov	sp, r7
    55e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ea:	4770      	bx	lr

000055ec <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    55ec:	b480      	push	{r7}
    55ee:	b083      	sub	sp, #12
    55f0:	af00      	add	r7, sp, #0
    55f2:	6078      	str	r0, [r7, #4]
    55f4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    55f6:	687b      	ldr	r3, [r7, #4]
    55f8:	683a      	ldr	r2, [r7, #0]
    55fa:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    55fc:	bf00      	nop
    55fe:	370c      	adds	r7, #12
    5600:	46bd      	mov	sp, r7
    5602:	f85d 7b04 	ldr.w	r7, [sp], #4
    5606:	4770      	bx	lr

00005608 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5608:	b480      	push	{r7}
    560a:	b085      	sub	sp, #20
    560c:	af00      	add	r7, sp, #0
    560e:	6078      	str	r0, [r7, #4]
    5610:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5612:	687b      	ldr	r3, [r7, #4]
    5614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5616:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5618:	68fb      	ldr	r3, [r7, #12]
    561a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    561e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5620:	683b      	ldr	r3, [r7, #0]
    5622:	b2db      	uxtb	r3, r3
    5624:	68fa      	ldr	r2, [r7, #12]
    5626:	4313      	orrs	r3, r2
    5628:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    562a:	687b      	ldr	r3, [r7, #4]
    562c:	68fa      	ldr	r2, [r7, #12]
    562e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5630:	bf00      	nop
    5632:	3714      	adds	r7, #20
    5634:	46bd      	mov	sp, r7
    5636:	f85d 7b04 	ldr.w	r7, [sp], #4
    563a:	4770      	bx	lr

0000563c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    563c:	b480      	push	{r7}
    563e:	b085      	sub	sp, #20
    5640:	af00      	add	r7, sp, #0
    5642:	6078      	str	r0, [r7, #4]
    5644:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5646:	687b      	ldr	r3, [r7, #4]
    5648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    564a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    564c:	68fb      	ldr	r3, [r7, #12]
    564e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5652:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5654:	683b      	ldr	r3, [r7, #0]
    5656:	041b      	lsls	r3, r3, #16
    5658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    565c:	68fa      	ldr	r2, [r7, #12]
    565e:	4313      	orrs	r3, r2
    5660:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5662:	687b      	ldr	r3, [r7, #4]
    5664:	68fa      	ldr	r2, [r7, #12]
    5666:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5668:	bf00      	nop
    566a:	3714      	adds	r7, #20
    566c:	46bd      	mov	sp, r7
    566e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5672:	4770      	bx	lr

00005674 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5674:	b480      	push	{r7}
    5676:	b083      	sub	sp, #12
    5678:	af00      	add	r7, sp, #0
    567a:	6078      	str	r0, [r7, #4]
    567c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    567e:	687b      	ldr	r3, [r7, #4]
    5680:	683a      	ldr	r2, [r7, #0]
    5682:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5684:	bf00      	nop
    5686:	370c      	adds	r7, #12
    5688:	46bd      	mov	sp, r7
    568a:	f85d 7b04 	ldr.w	r7, [sp], #4
    568e:	4770      	bx	lr

00005690 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5690:	b480      	push	{r7}
    5692:	b083      	sub	sp, #12
    5694:	af00      	add	r7, sp, #0
    5696:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5698:	687b      	ldr	r3, [r7, #4]
    569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    569c:	4618      	mov	r0, r3
    569e:	370c      	adds	r7, #12
    56a0:	46bd      	mov	sp, r7
    56a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    56a6:	4770      	bx	lr

000056a8 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    56a8:	b480      	push	{r7}
    56aa:	b085      	sub	sp, #20
    56ac:	af00      	add	r7, sp, #0
    56ae:	60f8      	str	r0, [r7, #12]
    56b0:	60b9      	str	r1, [r7, #8]
    56b2:	607a      	str	r2, [r7, #4]
	while (count--) {
    56b4:	e007      	b.n	56c6 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    56b6:	68fb      	ldr	r3, [r7, #12]
    56b8:	1c5a      	adds	r2, r3, #1
    56ba:	60fa      	str	r2, [r7, #12]
    56bc:	68ba      	ldr	r2, [r7, #8]
    56be:	1c51      	adds	r1, r2, #1
    56c0:	60b9      	str	r1, [r7, #8]
    56c2:	7812      	ldrb	r2, [r2, #0]
    56c4:	701a      	strb	r2, [r3, #0]
	while (count--) {
    56c6:	687b      	ldr	r3, [r7, #4]
    56c8:	1e5a      	subs	r2, r3, #1
    56ca:	607a      	str	r2, [r7, #4]
    56cc:	2b00      	cmp	r3, #0
    56ce:	d1f2      	bne.n	56b6 <_qspi_memcpy+0xe>
	}
}
    56d0:	bf00      	nop
    56d2:	3714      	adds	r7, #20
    56d4:	46bd      	mov	sp, r7
    56d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56da:	4770      	bx	lr

000056dc <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    56dc:	b580      	push	{r7, lr}
    56de:	b082      	sub	sp, #8
    56e0:	af00      	add	r7, sp, #0
    56e2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    56e4:	4903      	ldr	r1, [pc, #12]	; (56f4 <_qspi_end_transfer+0x18>)
    56e6:	6878      	ldr	r0, [r7, #4]
    56e8:	4b03      	ldr	r3, [pc, #12]	; (56f8 <_qspi_end_transfer+0x1c>)
    56ea:	4798      	blx	r3
}
    56ec:	bf00      	nop
    56ee:	3708      	adds	r7, #8
    56f0:	46bd      	mov	sp, r7
    56f2:	bd80      	pop	{r7, pc}
    56f4:	01000002 	.word	0x01000002
    56f8:	00005599 	.word	0x00005599

000056fc <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    56fc:	b580      	push	{r7, lr}
    56fe:	b082      	sub	sp, #8
    5700:	af00      	add	r7, sp, #0
    5702:	6078      	str	r0, [r7, #4]
    5704:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5706:	687b      	ldr	r3, [r7, #4]
    5708:	2b00      	cmp	r3, #0
    570a:	d004      	beq.n	5716 <_qspi_sync_init+0x1a>
    570c:	683b      	ldr	r3, [r7, #0]
    570e:	2b00      	cmp	r3, #0
    5710:	d001      	beq.n	5716 <_qspi_sync_init+0x1a>
    5712:	2301      	movs	r3, #1
    5714:	e000      	b.n	5718 <_qspi_sync_init+0x1c>
    5716:	2300      	movs	r3, #0
    5718:	f003 0301 	and.w	r3, r3, #1
    571c:	b2db      	uxtb	r3, r3
    571e:	2240      	movs	r2, #64	; 0x40
    5720:	490c      	ldr	r1, [pc, #48]	; (5754 <_qspi_sync_init+0x58>)
    5722:	4618      	mov	r0, r3
    5724:	4b0c      	ldr	r3, [pc, #48]	; (5758 <_qspi_sync_init+0x5c>)
    5726:	4798      	blx	r3
	dev->prvt = hw;
    5728:	687b      	ldr	r3, [r7, #4]
    572a:	683a      	ldr	r2, [r7, #0]
    572c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    572e:	687b      	ldr	r3, [r7, #4]
    5730:	681b      	ldr	r3, [r3, #0]
    5732:	2101      	movs	r1, #1
    5734:	4618      	mov	r0, r3
    5736:	4b09      	ldr	r3, [pc, #36]	; (575c <_qspi_sync_init+0x60>)
    5738:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    573a:	4909      	ldr	r1, [pc, #36]	; (5760 <_qspi_sync_init+0x64>)
    573c:	6838      	ldr	r0, [r7, #0]
    573e:	4b09      	ldr	r3, [pc, #36]	; (5764 <_qspi_sync_init+0x68>)
    5740:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5742:	4909      	ldr	r1, [pc, #36]	; (5768 <_qspi_sync_init+0x6c>)
    5744:	6838      	ldr	r0, [r7, #0]
    5746:	4b09      	ldr	r3, [pc, #36]	; (576c <_qspi_sync_init+0x70>)
    5748:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    574a:	2300      	movs	r3, #0
}
    574c:	4618      	mov	r0, r3
    574e:	3708      	adds	r7, #8
    5750:	46bd      	mov	sp, r7
    5752:	bd80      	pop	{r7, pc}
    5754:	0000f648 	.word	0x0000f648
    5758:	00003719 	.word	0x00003719
    575c:	00005599 	.word	0x00005599
    5760:	06000011 	.word	0x06000011
    5764:	000055b5 	.word	0x000055b5
    5768:	00241300 	.word	0x00241300
    576c:	000055d1 	.word	0x000055d1

00005770 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5770:	b580      	push	{r7, lr}
    5772:	b082      	sub	sp, #8
    5774:	af00      	add	r7, sp, #0
    5776:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5778:	687b      	ldr	r3, [r7, #4]
    577a:	681b      	ldr	r3, [r3, #0]
    577c:	2102      	movs	r1, #2
    577e:	4618      	mov	r0, r3
    5780:	4b03      	ldr	r3, [pc, #12]	; (5790 <_qspi_sync_enable+0x20>)
    5782:	4798      	blx	r3
	return ERR_NONE;
    5784:	2300      	movs	r3, #0
}
    5786:	4618      	mov	r0, r3
    5788:	3708      	adds	r7, #8
    578a:	46bd      	mov	sp, r7
    578c:	bd80      	pop	{r7, pc}
    578e:	bf00      	nop
    5790:	00005599 	.word	0x00005599

00005794 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5794:	b580      	push	{r7, lr}
    5796:	b082      	sub	sp, #8
    5798:	af00      	add	r7, sp, #0
    579a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    579c:	687b      	ldr	r3, [r7, #4]
    579e:	681b      	ldr	r3, [r3, #0]
    57a0:	2100      	movs	r1, #0
    57a2:	4618      	mov	r0, r3
    57a4:	4b03      	ldr	r3, [pc, #12]	; (57b4 <_qspi_sync_disable+0x20>)
    57a6:	4798      	blx	r3
	return ERR_NONE;
    57a8:	2300      	movs	r3, #0
}
    57aa:	4618      	mov	r0, r3
    57ac:	3708      	adds	r7, #8
    57ae:	46bd      	mov	sp, r7
    57b0:	bd80      	pop	{r7, pc}
    57b2:	bf00      	nop
    57b4:	00005599 	.word	0x00005599

000057b8 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    57b8:	b580      	push	{r7, lr}
    57ba:	b084      	sub	sp, #16
    57bc:	af00      	add	r7, sp, #0
    57be:	6078      	str	r0, [r7, #4]
    57c0:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    57c2:	687b      	ldr	r3, [r7, #4]
    57c4:	681b      	ldr	r3, [r3, #0]
    57c6:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    57c8:	683b      	ldr	r3, [r7, #0]
    57ca:	781b      	ldrb	r3, [r3, #0]
    57cc:	f003 0320 	and.w	r3, r3, #32
    57d0:	b2db      	uxtb	r3, r3
    57d2:	2b00      	cmp	r3, #0
    57d4:	d005      	beq.n	57e2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    57d6:	683b      	ldr	r3, [r7, #0]
    57d8:	689b      	ldr	r3, [r3, #8]
    57da:	4619      	mov	r1, r3
    57dc:	68f8      	ldr	r0, [r7, #12]
    57de:	4b13      	ldr	r3, [pc, #76]	; (582c <_qspi_sync_command_set_ifr+0x74>)
    57e0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    57e2:	683b      	ldr	r3, [r7, #0]
    57e4:	781b      	ldrb	r3, [r3, #0]
    57e6:	f003 0310 	and.w	r3, r3, #16
    57ea:	b2db      	uxtb	r3, r3
    57ec:	2b00      	cmp	r3, #0
    57ee:	d005      	beq.n	57fc <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    57f0:	683b      	ldr	r3, [r7, #0]
    57f2:	791b      	ldrb	r3, [r3, #4]
    57f4:	4619      	mov	r1, r3
    57f6:	68f8      	ldr	r0, [r7, #12]
    57f8:	4b0d      	ldr	r3, [pc, #52]	; (5830 <_qspi_sync_command_set_ifr+0x78>)
    57fa:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    57fc:	683b      	ldr	r3, [r7, #0]
    57fe:	781b      	ldrb	r3, [r3, #0]
    5800:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5804:	b2db      	uxtb	r3, r3
    5806:	2b00      	cmp	r3, #0
    5808:	d005      	beq.n	5816 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    580a:	683b      	ldr	r3, [r7, #0]
    580c:	795b      	ldrb	r3, [r3, #5]
    580e:	4619      	mov	r1, r3
    5810:	68f8      	ldr	r0, [r7, #12]
    5812:	4b08      	ldr	r3, [pc, #32]	; (5834 <_qspi_sync_command_set_ifr+0x7c>)
    5814:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5816:	683b      	ldr	r3, [r7, #0]
    5818:	681b      	ldr	r3, [r3, #0]
    581a:	4619      	mov	r1, r3
    581c:	68f8      	ldr	r0, [r7, #12]
    581e:	4b06      	ldr	r3, [pc, #24]	; (5838 <_qspi_sync_command_set_ifr+0x80>)
    5820:	4798      	blx	r3
}
    5822:	bf00      	nop
    5824:	3710      	adds	r7, #16
    5826:	46bd      	mov	sp, r7
    5828:	bd80      	pop	{r7, pc}
    582a:	bf00      	nop
    582c:	000055ed 	.word	0x000055ed
    5830:	00005609 	.word	0x00005609
    5834:	0000563d 	.word	0x0000563d
    5838:	00005675 	.word	0x00005675

0000583c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    583c:	b580      	push	{r7, lr}
    583e:	b084      	sub	sp, #16
    5840:	af00      	add	r7, sp, #0
    5842:	6078      	str	r0, [r7, #4]
    5844:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5846:	687b      	ldr	r3, [r7, #4]
    5848:	681b      	ldr	r3, [r3, #0]
    584a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    584c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5850:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5852:	683b      	ldr	r3, [r7, #0]
    5854:	781b      	ldrb	r3, [r3, #0]
    5856:	f003 0320 	and.w	r3, r3, #32
    585a:	b2db      	uxtb	r3, r3
    585c:	2b00      	cmp	r3, #0
    585e:	d004      	beq.n	586a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5860:	683b      	ldr	r3, [r7, #0]
    5862:	689b      	ldr	r3, [r3, #8]
    5864:	68fa      	ldr	r2, [r7, #12]
    5866:	4413      	add	r3, r2
    5868:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    586a:	68b8      	ldr	r0, [r7, #8]
    586c:	4b18      	ldr	r3, [pc, #96]	; (58d0 <_qspi_sync_run_transfer+0x94>)
    586e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5870:	683b      	ldr	r3, [r7, #0]
    5872:	691b      	ldr	r3, [r3, #16]
    5874:	2b00      	cmp	r3, #0
    5876:	d103      	bne.n	5880 <_qspi_sync_run_transfer+0x44>
    5878:	683b      	ldr	r3, [r7, #0]
    587a:	695b      	ldr	r3, [r3, #20]
    587c:	2b00      	cmp	r3, #0
    587e:	d001      	beq.n	5884 <_qspi_sync_run_transfer+0x48>
    5880:	2301      	movs	r3, #1
    5882:	e000      	b.n	5886 <_qspi_sync_run_transfer+0x4a>
    5884:	2300      	movs	r3, #0
    5886:	f003 0301 	and.w	r3, r3, #1
    588a:	b2db      	uxtb	r3, r3
    588c:	2282      	movs	r2, #130	; 0x82
    588e:	4911      	ldr	r1, [pc, #68]	; (58d4 <_qspi_sync_run_transfer+0x98>)
    5890:	4618      	mov	r0, r3
    5892:	4b11      	ldr	r3, [pc, #68]	; (58d8 <_qspi_sync_run_transfer+0x9c>)
    5894:	4798      	blx	r3

	if (cmd->tx_buf) {
    5896:	683b      	ldr	r3, [r7, #0]
    5898:	691b      	ldr	r3, [r3, #16]
    589a:	2b00      	cmp	r3, #0
    589c:	d008      	beq.n	58b0 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    589e:	683b      	ldr	r3, [r7, #0]
    58a0:	6919      	ldr	r1, [r3, #16]
    58a2:	683b      	ldr	r3, [r7, #0]
    58a4:	68db      	ldr	r3, [r3, #12]
    58a6:	461a      	mov	r2, r3
    58a8:	68f8      	ldr	r0, [r7, #12]
    58aa:	4b0c      	ldr	r3, [pc, #48]	; (58dc <_qspi_sync_run_transfer+0xa0>)
    58ac:	4798      	blx	r3
    58ae:	e007      	b.n	58c0 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    58b0:	683b      	ldr	r3, [r7, #0]
    58b2:	6958      	ldr	r0, [r3, #20]
    58b4:	683b      	ldr	r3, [r7, #0]
    58b6:	68db      	ldr	r3, [r3, #12]
    58b8:	461a      	mov	r2, r3
    58ba:	68f9      	ldr	r1, [r7, #12]
    58bc:	4b07      	ldr	r3, [pc, #28]	; (58dc <_qspi_sync_run_transfer+0xa0>)
    58be:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    58c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    58c4:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    58c8:	bf00      	nop
    58ca:	3710      	adds	r7, #16
    58cc:	46bd      	mov	sp, r7
    58ce:	bd80      	pop	{r7, pc}
    58d0:	00005691 	.word	0x00005691
    58d4:	0000f648 	.word	0x0000f648
    58d8:	00003719 	.word	0x00003719
    58dc:	000056a9 	.word	0x000056a9

000058e0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    58e0:	b580      	push	{r7, lr}
    58e2:	b082      	sub	sp, #8
    58e4:	af00      	add	r7, sp, #0
    58e6:	6078      	str	r0, [r7, #4]
    58e8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    58ea:	6839      	ldr	r1, [r7, #0]
    58ec:	6878      	ldr	r0, [r7, #4]
    58ee:	4b14      	ldr	r3, [pc, #80]	; (5940 <_qspi_sync_serial_run_command+0x60>)
    58f0:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    58f2:	683b      	ldr	r3, [r7, #0]
    58f4:	781b      	ldrb	r3, [r3, #0]
    58f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    58fa:	b2db      	uxtb	r3, r3
    58fc:	2b00      	cmp	r3, #0
    58fe:	d003      	beq.n	5908 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5900:	6839      	ldr	r1, [r7, #0]
    5902:	6878      	ldr	r0, [r7, #4]
    5904:	4b0f      	ldr	r3, [pc, #60]	; (5944 <_qspi_sync_serial_run_command+0x64>)
    5906:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5908:	687b      	ldr	r3, [r7, #4]
    590a:	681b      	ldr	r3, [r3, #0]
    590c:	4618      	mov	r0, r3
    590e:	4b0e      	ldr	r3, [pc, #56]	; (5948 <_qspi_sync_serial_run_command+0x68>)
    5910:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5912:	bf00      	nop
    5914:	687b      	ldr	r3, [r7, #4]
    5916:	681b      	ldr	r3, [r3, #0]
    5918:	4618      	mov	r0, r3
    591a:	4b0c      	ldr	r3, [pc, #48]	; (594c <_qspi_sync_serial_run_command+0x6c>)
    591c:	4798      	blx	r3
    591e:	4603      	mov	r3, r0
    5920:	f083 0301 	eor.w	r3, r3, #1
    5924:	b2db      	uxtb	r3, r3
    5926:	2b00      	cmp	r3, #0
    5928:	d1f4      	bne.n	5914 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    592a:	687b      	ldr	r3, [r7, #4]
    592c:	681b      	ldr	r3, [r3, #0]
    592e:	4618      	mov	r0, r3
    5930:	4b07      	ldr	r3, [pc, #28]	; (5950 <_qspi_sync_serial_run_command+0x70>)
    5932:	4798      	blx	r3
	return ERR_NONE;
    5934:	2300      	movs	r3, #0
}
    5936:	4618      	mov	r0, r3
    5938:	3708      	adds	r7, #8
    593a:	46bd      	mov	sp, r7
    593c:	bd80      	pop	{r7, pc}
    593e:	bf00      	nop
    5940:	000057b9 	.word	0x000057b9
    5944:	0000583d 	.word	0x0000583d
    5948:	000056dd 	.word	0x000056dd
    594c:	00005555 	.word	0x00005555
    5950:	0000557d 	.word	0x0000557d

00005954 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5954:	b480      	push	{r7}
    5956:	b083      	sub	sp, #12
    5958:	af00      	add	r7, sp, #0
    595a:	6078      	str	r0, [r7, #4]
    595c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    595e:	bf00      	nop
    5960:	687b      	ldr	r3, [r7, #4]
    5962:	691a      	ldr	r2, [r3, #16]
    5964:	683b      	ldr	r3, [r7, #0]
    5966:	4013      	ands	r3, r2
    5968:	2b00      	cmp	r3, #0
    596a:	d1f9      	bne.n	5960 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    596c:	bf00      	nop
    596e:	370c      	adds	r7, #12
    5970:	46bd      	mov	sp, r7
    5972:	f85d 7b04 	ldr.w	r7, [sp], #4
    5976:	4770      	bx	lr

00005978 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5978:	b480      	push	{r7}
    597a:	b083      	sub	sp, #12
    597c:	af00      	add	r7, sp, #0
    597e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5980:	687b      	ldr	r3, [r7, #4]
    5982:	f44f 7280 	mov.w	r2, #256	; 0x100
    5986:	819a      	strh	r2, [r3, #12]
}
    5988:	bf00      	nop
    598a:	370c      	adds	r7, #12
    598c:	46bd      	mov	sp, r7
    598e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5992:	4770      	bx	lr

00005994 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5994:	b480      	push	{r7}
    5996:	b083      	sub	sp, #12
    5998:	af00      	add	r7, sp, #0
    599a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    599c:	687b      	ldr	r3, [r7, #4]
    599e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    59a2:	819a      	strh	r2, [r3, #12]
}
    59a4:	bf00      	nop
    59a6:	370c      	adds	r7, #12
    59a8:	46bd      	mov	sp, r7
    59aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ae:	4770      	bx	lr

000059b0 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    59b0:	b480      	push	{r7}
    59b2:	b083      	sub	sp, #12
    59b4:	af00      	add	r7, sp, #0
    59b6:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    59b8:	687b      	ldr	r3, [r7, #4]
    59ba:	899b      	ldrh	r3, [r3, #12]
    59bc:	b29b      	uxth	r3, r3
}
    59be:	4618      	mov	r0, r3
    59c0:	370c      	adds	r7, #12
    59c2:	46bd      	mov	sp, r7
    59c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59c8:	4770      	bx	lr

000059ca <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    59ca:	b480      	push	{r7}
    59cc:	b083      	sub	sp, #12
    59ce:	af00      	add	r7, sp, #0
    59d0:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    59d2:	687b      	ldr	r3, [r7, #4]
    59d4:	895b      	ldrh	r3, [r3, #10]
    59d6:	b29b      	uxth	r3, r3
}
    59d8:	4618      	mov	r0, r3
    59da:	370c      	adds	r7, #12
    59dc:	46bd      	mov	sp, r7
    59de:	f85d 7b04 	ldr.w	r7, [sp], #4
    59e2:	4770      	bx	lr

000059e4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    59e4:	b580      	push	{r7, lr}
    59e6:	b082      	sub	sp, #8
    59e8:	af00      	add	r7, sp, #0
    59ea:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    59ec:	687b      	ldr	r3, [r7, #4]
    59ee:	881b      	ldrh	r3, [r3, #0]
    59f0:	b29b      	uxth	r3, r3
    59f2:	f043 0301 	orr.w	r3, r3, #1
    59f6:	b29a      	uxth	r2, r3
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    59fc:	2101      	movs	r1, #1
    59fe:	6878      	ldr	r0, [r7, #4]
    5a00:	4b02      	ldr	r3, [pc, #8]	; (5a0c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5a02:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5a04:	bf00      	nop
    5a06:	3708      	adds	r7, #8
    5a08:	46bd      	mov	sp, r7
    5a0a:	bd80      	pop	{r7, pc}
    5a0c:	00005955 	.word	0x00005955

00005a10 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5a10:	b580      	push	{r7, lr}
    5a12:	b084      	sub	sp, #16
    5a14:	af00      	add	r7, sp, #0
    5a16:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5a18:	f248 0103 	movw	r1, #32771	; 0x8003
    5a1c:	6878      	ldr	r0, [r7, #4]
    5a1e:	4b0a      	ldr	r3, [pc, #40]	; (5a48 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5a20:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5a22:	687b      	ldr	r3, [r7, #4]
    5a24:	881b      	ldrh	r3, [r3, #0]
    5a26:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5a28:	89fb      	ldrh	r3, [r7, #14]
    5a2a:	085b      	lsrs	r3, r3, #1
    5a2c:	b29b      	uxth	r3, r3
    5a2e:	f003 0301 	and.w	r3, r3, #1
    5a32:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5a34:	89fb      	ldrh	r3, [r7, #14]
    5a36:	2b00      	cmp	r3, #0
    5a38:	bf14      	ite	ne
    5a3a:	2301      	movne	r3, #1
    5a3c:	2300      	moveq	r3, #0
    5a3e:	b2db      	uxtb	r3, r3
}
    5a40:	4618      	mov	r0, r3
    5a42:	3710      	adds	r7, #16
    5a44:	46bd      	mov	sp, r7
    5a46:	bd80      	pop	{r7, pc}
    5a48:	00005955 	.word	0x00005955

00005a4c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5a4c:	b580      	push	{r7, lr}
    5a4e:	b082      	sub	sp, #8
    5a50:	af00      	add	r7, sp, #0
    5a52:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5a54:	687b      	ldr	r3, [r7, #4]
    5a56:	881b      	ldrh	r3, [r3, #0]
    5a58:	b29b      	uxth	r3, r3
    5a5a:	f023 0302 	bic.w	r3, r3, #2
    5a5e:	b29a      	uxth	r2, r3
    5a60:	687b      	ldr	r3, [r7, #4]
    5a62:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5a64:	f248 0103 	movw	r1, #32771	; 0x8003
    5a68:	6878      	ldr	r0, [r7, #4]
    5a6a:	4b03      	ldr	r3, [pc, #12]	; (5a78 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5a6c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5a6e:	bf00      	nop
    5a70:	3708      	adds	r7, #8
    5a72:	46bd      	mov	sp, r7
    5a74:	bd80      	pop	{r7, pc}
    5a76:	bf00      	nop
    5a78:	00005955 	.word	0x00005955

00005a7c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5a7c:	b580      	push	{r7, lr}
    5a7e:	b082      	sub	sp, #8
    5a80:	af00      	add	r7, sp, #0
    5a82:	6078      	str	r0, [r7, #4]
    5a84:	460b      	mov	r3, r1
    5a86:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5a88:	687b      	ldr	r3, [r7, #4]
    5a8a:	887a      	ldrh	r2, [r7, #2]
    5a8c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5a8e:	f248 0103 	movw	r1, #32771	; 0x8003
    5a92:	6878      	ldr	r0, [r7, #4]
    5a94:	4b02      	ldr	r3, [pc, #8]	; (5aa0 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5a96:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5a98:	bf00      	nop
    5a9a:	3708      	adds	r7, #8
    5a9c:	46bd      	mov	sp, r7
    5a9e:	bd80      	pop	{r7, pc}
    5aa0:	00005955 	.word	0x00005955

00005aa4 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    5aa4:	b580      	push	{r7, lr}
    5aa6:	b082      	sub	sp, #8
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    5aac:	2108      	movs	r1, #8
    5aae:	6878      	ldr	r0, [r7, #4]
    5ab0:	4b03      	ldr	r3, [pc, #12]	; (5ac0 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    5ab2:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    5ab4:	687b      	ldr	r3, [r7, #4]
    5ab6:	699b      	ldr	r3, [r3, #24]
}
    5ab8:	4618      	mov	r0, r3
    5aba:	3708      	adds	r7, #8
    5abc:	46bd      	mov	sp, r7
    5abe:	bd80      	pop	{r7, pc}
    5ac0:	00005955 	.word	0x00005955

00005ac4 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5ac4:	b480      	push	{r7}
    5ac6:	b083      	sub	sp, #12
    5ac8:	af00      	add	r7, sp, #0
    5aca:	6078      	str	r0, [r7, #4]
    5acc:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5ace:	687b      	ldr	r3, [r7, #4]
    5ad0:	683a      	ldr	r2, [r7, #0]
    5ad2:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5ad4:	bf00      	nop
    5ad6:	370c      	adds	r7, #12
    5ad8:	46bd      	mov	sp, r7
    5ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ade:	4770      	bx	lr

00005ae0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5ae0:	b580      	push	{r7, lr}
    5ae2:	b082      	sub	sp, #8
    5ae4:	af00      	add	r7, sp, #0
    5ae6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5ae8:	687b      	ldr	r3, [r7, #4]
    5aea:	2b00      	cmp	r3, #0
    5aec:	d005      	beq.n	5afa <_calendar_init+0x1a>
    5aee:	687b      	ldr	r3, [r7, #4]
    5af0:	681b      	ldr	r3, [r3, #0]
    5af2:	2b00      	cmp	r3, #0
    5af4:	d001      	beq.n	5afa <_calendar_init+0x1a>
    5af6:	2301      	movs	r3, #1
    5af8:	e000      	b.n	5afc <_calendar_init+0x1c>
    5afa:	2300      	movs	r3, #0
    5afc:	f003 0301 	and.w	r3, r3, #1
    5b00:	b2db      	uxtb	r3, r3
    5b02:	222f      	movs	r2, #47	; 0x2f
    5b04:	491b      	ldr	r1, [pc, #108]	; (5b74 <_calendar_init+0x94>)
    5b06:	4618      	mov	r0, r3
    5b08:	4b1b      	ldr	r3, [pc, #108]	; (5b78 <_calendar_init+0x98>)
    5b0a:	4798      	blx	r3

	_rtc_dev = dev;
    5b0c:	4a1b      	ldr	r2, [pc, #108]	; (5b7c <_calendar_init+0x9c>)
    5b0e:	687b      	ldr	r3, [r7, #4]
    5b10:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5b12:	687b      	ldr	r3, [r7, #4]
    5b14:	681b      	ldr	r3, [r3, #0]
    5b16:	4618      	mov	r0, r3
    5b18:	4b19      	ldr	r3, [pc, #100]	; (5b80 <_calendar_init+0xa0>)
    5b1a:	4798      	blx	r3
    5b1c:	4603      	mov	r3, r0
    5b1e:	2b00      	cmp	r3, #0
    5b20:	d00a      	beq.n	5b38 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5b22:	687b      	ldr	r3, [r7, #4]
    5b24:	681b      	ldr	r3, [r3, #0]
    5b26:	4618      	mov	r0, r3
    5b28:	4b16      	ldr	r3, [pc, #88]	; (5b84 <_calendar_init+0xa4>)
    5b2a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5b2c:	687b      	ldr	r3, [r7, #4]
    5b2e:	681b      	ldr	r3, [r3, #0]
    5b30:	2102      	movs	r1, #2
    5b32:	4618      	mov	r0, r3
    5b34:	4b14      	ldr	r3, [pc, #80]	; (5b88 <_calendar_init+0xa8>)
    5b36:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5b38:	687b      	ldr	r3, [r7, #4]
    5b3a:	681b      	ldr	r3, [r3, #0]
    5b3c:	4618      	mov	r0, r3
    5b3e:	4b13      	ldr	r3, [pc, #76]	; (5b8c <_calendar_init+0xac>)
    5b40:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	681b      	ldr	r3, [r3, #0]
    5b46:	2101      	movs	r1, #1
    5b48:	4618      	mov	r0, r3
    5b4a:	4b0f      	ldr	r3, [pc, #60]	; (5b88 <_calendar_init+0xa8>)
    5b4c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5b4e:	687b      	ldr	r3, [r7, #4]
    5b50:	681b      	ldr	r3, [r3, #0]
    5b52:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5b56:	4618      	mov	r0, r3
    5b58:	4b0d      	ldr	r3, [pc, #52]	; (5b90 <_calendar_init+0xb0>)
    5b5a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5b5c:	687b      	ldr	r3, [r7, #4]
    5b5e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5b60:	2100      	movs	r1, #0
    5b62:	4618      	mov	r0, r3
    5b64:	4b0b      	ldr	r3, [pc, #44]	; (5b94 <_calendar_init+0xb4>)
    5b66:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5b68:	2300      	movs	r3, #0
}
    5b6a:	4618      	mov	r0, r3
    5b6c:	3708      	adds	r7, #8
    5b6e:	46bd      	mov	sp, r7
    5b70:	bd80      	pop	{r7, pc}
    5b72:	bf00      	nop
    5b74:	0000f660 	.word	0x0000f660
    5b78:	00003719 	.word	0x00003719
    5b7c:	2000211c 	.word	0x2000211c
    5b80:	00005a11 	.word	0x00005a11
    5b84:	00005a4d 	.word	0x00005a4d
    5b88:	00005955 	.word	0x00005955
    5b8c:	000059e5 	.word	0x000059e5
    5b90:	00005a7d 	.word	0x00005a7d
    5b94:	00005ac5 	.word	0x00005ac5

00005b98 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    5b98:	b580      	push	{r7, lr}
    5b9a:	b082      	sub	sp, #8
    5b9c:	af00      	add	r7, sp, #0
    5b9e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	2b00      	cmp	r3, #0
    5ba4:	d005      	beq.n	5bb2 <_calendar_get_counter+0x1a>
    5ba6:	687b      	ldr	r3, [r7, #4]
    5ba8:	681b      	ldr	r3, [r3, #0]
    5baa:	2b00      	cmp	r3, #0
    5bac:	d001      	beq.n	5bb2 <_calendar_get_counter+0x1a>
    5bae:	2301      	movs	r3, #1
    5bb0:	e000      	b.n	5bb4 <_calendar_get_counter+0x1c>
    5bb2:	2300      	movs	r3, #0
    5bb4:	f003 0301 	and.w	r3, r3, #1
    5bb8:	b2db      	uxtb	r3, r3
    5bba:	2299      	movs	r2, #153	; 0x99
    5bbc:	4906      	ldr	r1, [pc, #24]	; (5bd8 <_calendar_get_counter+0x40>)
    5bbe:	4618      	mov	r0, r3
    5bc0:	4b06      	ldr	r3, [pc, #24]	; (5bdc <_calendar_get_counter+0x44>)
    5bc2:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    5bc4:	687b      	ldr	r3, [r7, #4]
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	4618      	mov	r0, r3
    5bca:	4b05      	ldr	r3, [pc, #20]	; (5be0 <_calendar_get_counter+0x48>)
    5bcc:	4798      	blx	r3
    5bce:	4603      	mov	r3, r0
}
    5bd0:	4618      	mov	r0, r3
    5bd2:	3708      	adds	r7, #8
    5bd4:	46bd      	mov	sp, r7
    5bd6:	bd80      	pop	{r7, pc}
    5bd8:	0000f660 	.word	0x0000f660
    5bdc:	00003719 	.word	0x00003719
    5be0:	00005aa5 	.word	0x00005aa5

00005be4 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5be4:	b580      	push	{r7, lr}
    5be6:	b084      	sub	sp, #16
    5be8:	af00      	add	r7, sp, #0
    5bea:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5bec:	687b      	ldr	r3, [r7, #4]
    5bee:	681b      	ldr	r3, [r3, #0]
    5bf0:	4618      	mov	r0, r3
    5bf2:	4b19      	ldr	r3, [pc, #100]	; (5c58 <_rtc_interrupt_handler+0x74>)
    5bf4:	4798      	blx	r3
    5bf6:	4603      	mov	r3, r0
    5bf8:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5bfa:	687b      	ldr	r3, [r7, #4]
    5bfc:	681b      	ldr	r3, [r3, #0]
    5bfe:	4618      	mov	r0, r3
    5c00:	4b16      	ldr	r3, [pc, #88]	; (5c5c <_rtc_interrupt_handler+0x78>)
    5c02:	4798      	blx	r3
    5c04:	4603      	mov	r3, r0
    5c06:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5c08:	89fa      	ldrh	r2, [r7, #14]
    5c0a:	89bb      	ldrh	r3, [r7, #12]
    5c0c:	4013      	ands	r3, r2
    5c0e:	b29b      	uxth	r3, r3
    5c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5c14:	2b00      	cmp	r3, #0
    5c16:	d009      	beq.n	5c2c <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	685b      	ldr	r3, [r3, #4]
    5c1c:	6878      	ldr	r0, [r7, #4]
    5c1e:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5c20:	687b      	ldr	r3, [r7, #4]
    5c22:	681b      	ldr	r3, [r3, #0]
    5c24:	4618      	mov	r0, r3
    5c26:	4b0e      	ldr	r3, [pc, #56]	; (5c60 <_rtc_interrupt_handler+0x7c>)
    5c28:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5c2a:	e010      	b.n	5c4e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5c2c:	89fa      	ldrh	r2, [r7, #14]
    5c2e:	89bb      	ldrh	r3, [r7, #12]
    5c30:	4013      	ands	r3, r2
    5c32:	b29b      	uxth	r3, r3
    5c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d008      	beq.n	5c4e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5c3c:	687b      	ldr	r3, [r7, #4]
    5c3e:	689b      	ldr	r3, [r3, #8]
    5c40:	6878      	ldr	r0, [r7, #4]
    5c42:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5c44:	687b      	ldr	r3, [r7, #4]
    5c46:	681b      	ldr	r3, [r3, #0]
    5c48:	4618      	mov	r0, r3
    5c4a:	4b06      	ldr	r3, [pc, #24]	; (5c64 <_rtc_interrupt_handler+0x80>)
    5c4c:	4798      	blx	r3
}
    5c4e:	bf00      	nop
    5c50:	3710      	adds	r7, #16
    5c52:	46bd      	mov	sp, r7
    5c54:	bd80      	pop	{r7, pc}
    5c56:	bf00      	nop
    5c58:	000059b1 	.word	0x000059b1
    5c5c:	000059cb 	.word	0x000059cb
    5c60:	00005979 	.word	0x00005979
    5c64:	00005995 	.word	0x00005995

00005c68 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5c68:	b580      	push	{r7, lr}
    5c6a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5c6c:	4b03      	ldr	r3, [pc, #12]	; (5c7c <RTC_Handler+0x14>)
    5c6e:	681b      	ldr	r3, [r3, #0]
    5c70:	4618      	mov	r0, r3
    5c72:	4b03      	ldr	r3, [pc, #12]	; (5c80 <RTC_Handler+0x18>)
    5c74:	4798      	blx	r3
}
    5c76:	bf00      	nop
    5c78:	bd80      	pop	{r7, pc}
    5c7a:	bf00      	nop
    5c7c:	2000211c 	.word	0x2000211c
    5c80:	00005be5 	.word	0x00005be5

00005c84 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5c84:	b480      	push	{r7}
    5c86:	b083      	sub	sp, #12
    5c88:	af00      	add	r7, sp, #0
    5c8a:	6078      	str	r0, [r7, #4]
    5c8c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5c8e:	bf00      	nop
    5c90:	687b      	ldr	r3, [r7, #4]
    5c92:	69da      	ldr	r2, [r3, #28]
    5c94:	683b      	ldr	r3, [r7, #0]
    5c96:	4013      	ands	r3, r2
    5c98:	2b00      	cmp	r3, #0
    5c9a:	d1f9      	bne.n	5c90 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5c9c:	bf00      	nop
    5c9e:	370c      	adds	r7, #12
    5ca0:	46bd      	mov	sp, r7
    5ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ca6:	4770      	bx	lr

00005ca8 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5ca8:	b480      	push	{r7}
    5caa:	b083      	sub	sp, #12
    5cac:	af00      	add	r7, sp, #0
    5cae:	6078      	str	r0, [r7, #4]
    5cb0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5cb2:	687b      	ldr	r3, [r7, #4]
    5cb4:	69da      	ldr	r2, [r3, #28]
    5cb6:	683b      	ldr	r3, [r7, #0]
    5cb8:	4013      	ands	r3, r2
    5cba:	2b00      	cmp	r3, #0
    5cbc:	bf14      	ite	ne
    5cbe:	2301      	movne	r3, #1
    5cc0:	2300      	moveq	r3, #0
    5cc2:	b2db      	uxtb	r3, r3
}
    5cc4:	4618      	mov	r0, r3
    5cc6:	370c      	adds	r7, #12
    5cc8:	46bd      	mov	sp, r7
    5cca:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cce:	4770      	bx	lr

00005cd0 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5cd0:	b480      	push	{r7}
    5cd2:	b083      	sub	sp, #12
    5cd4:	af00      	add	r7, sp, #0
    5cd6:	6078      	str	r0, [r7, #4]
    5cd8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5cda:	bf00      	nop
    5cdc:	687b      	ldr	r3, [r7, #4]
    5cde:	69da      	ldr	r2, [r3, #28]
    5ce0:	683b      	ldr	r3, [r7, #0]
    5ce2:	4013      	ands	r3, r2
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d1f9      	bne.n	5cdc <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5ce8:	bf00      	nop
    5cea:	370c      	adds	r7, #12
    5cec:	46bd      	mov	sp, r7
    5cee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cf2:	4770      	bx	lr

00005cf4 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5cf4:	b480      	push	{r7}
    5cf6:	b083      	sub	sp, #12
    5cf8:	af00      	add	r7, sp, #0
    5cfa:	6078      	str	r0, [r7, #4]
    5cfc:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5cfe:	687b      	ldr	r3, [r7, #4]
    5d00:	69da      	ldr	r2, [r3, #28]
    5d02:	683b      	ldr	r3, [r7, #0]
    5d04:	4013      	ands	r3, r2
    5d06:	2b00      	cmp	r3, #0
    5d08:	bf14      	ite	ne
    5d0a:	2301      	movne	r3, #1
    5d0c:	2300      	moveq	r3, #0
    5d0e:	b2db      	uxtb	r3, r3
}
    5d10:	4618      	mov	r0, r3
    5d12:	370c      	adds	r7, #12
    5d14:	46bd      	mov	sp, r7
    5d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d1a:	4770      	bx	lr

00005d1c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5d1c:	b480      	push	{r7}
    5d1e:	b083      	sub	sp, #12
    5d20:	af00      	add	r7, sp, #0
    5d22:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5d24:	687b      	ldr	r3, [r7, #4]
    5d26:	2201      	movs	r2, #1
    5d28:	761a      	strb	r2, [r3, #24]
}
    5d2a:	bf00      	nop
    5d2c:	370c      	adds	r7, #12
    5d2e:	46bd      	mov	sp, r7
    5d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d34:	4770      	bx	lr

00005d36 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5d36:	b480      	push	{r7}
    5d38:	b083      	sub	sp, #12
    5d3a:	af00      	add	r7, sp, #0
    5d3c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5d3e:	687b      	ldr	r3, [r7, #4]
    5d40:	2202      	movs	r2, #2
    5d42:	761a      	strb	r2, [r3, #24]
}
    5d44:	bf00      	nop
    5d46:	370c      	adds	r7, #12
    5d48:	46bd      	mov	sp, r7
    5d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d4e:	4770      	bx	lr

00005d50 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5d50:	b480      	push	{r7}
    5d52:	b083      	sub	sp, #12
    5d54:	af00      	add	r7, sp, #0
    5d56:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5d58:	687b      	ldr	r3, [r7, #4]
    5d5a:	7e1b      	ldrb	r3, [r3, #24]
    5d5c:	b2db      	uxtb	r3, r3
}
    5d5e:	4618      	mov	r0, r3
    5d60:	370c      	adds	r7, #12
    5d62:	46bd      	mov	sp, r7
    5d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d68:	4770      	bx	lr

00005d6a <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5d6a:	b480      	push	{r7}
    5d6c:	b085      	sub	sp, #20
    5d6e:	af00      	add	r7, sp, #0
    5d70:	6078      	str	r0, [r7, #4]
    5d72:	460b      	mov	r3, r1
    5d74:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5d76:	687b      	ldr	r3, [r7, #4]
    5d78:	7e1b      	ldrb	r3, [r3, #24]
    5d7a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5d7c:	7bfa      	ldrb	r2, [r7, #15]
    5d7e:	78fb      	ldrb	r3, [r7, #3]
    5d80:	4013      	ands	r3, r2
    5d82:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5d84:	7bfb      	ldrb	r3, [r7, #15]
}
    5d86:	4618      	mov	r0, r3
    5d88:	3714      	adds	r7, #20
    5d8a:	46bd      	mov	sp, r7
    5d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d90:	4770      	bx	lr

00005d92 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5d92:	b480      	push	{r7}
    5d94:	b083      	sub	sp, #12
    5d96:	af00      	add	r7, sp, #0
    5d98:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	7e1b      	ldrb	r3, [r3, #24]
    5d9e:	b2db      	uxtb	r3, r3
}
    5da0:	4618      	mov	r0, r3
    5da2:	370c      	adds	r7, #12
    5da4:	46bd      	mov	sp, r7
    5da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5daa:	4770      	bx	lr

00005dac <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5dac:	b480      	push	{r7}
    5dae:	b083      	sub	sp, #12
    5db0:	af00      	add	r7, sp, #0
    5db2:	6078      	str	r0, [r7, #4]
    5db4:	460b      	mov	r3, r1
    5db6:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5db8:	687b      	ldr	r3, [r7, #4]
    5dba:	78fa      	ldrb	r2, [r7, #3]
    5dbc:	761a      	strb	r2, [r3, #24]
}
    5dbe:	bf00      	nop
    5dc0:	370c      	adds	r7, #12
    5dc2:	46bd      	mov	sp, r7
    5dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dc8:	4770      	bx	lr
	...

00005dcc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5dcc:	b580      	push	{r7, lr}
    5dce:	b082      	sub	sp, #8
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5dd4:	687b      	ldr	r3, [r7, #4]
    5dd6:	681b      	ldr	r3, [r3, #0]
    5dd8:	f023 0202 	bic.w	r2, r3, #2
    5ddc:	687b      	ldr	r3, [r7, #4]
    5dde:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5de0:	2103      	movs	r1, #3
    5de2:	6878      	ldr	r0, [r7, #4]
    5de4:	4b02      	ldr	r3, [pc, #8]	; (5df0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5de6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5de8:	bf00      	nop
    5dea:	3708      	adds	r7, #8
    5dec:	46bd      	mov	sp, r7
    5dee:	bd80      	pop	{r7, pc}
    5df0:	00005c85 	.word	0x00005c85

00005df4 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5df4:	b480      	push	{r7}
    5df6:	b085      	sub	sp, #20
    5df8:	af00      	add	r7, sp, #0
    5dfa:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5dfc:	687b      	ldr	r3, [r7, #4]
    5dfe:	681b      	ldr	r3, [r3, #0]
    5e00:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5e02:	68fb      	ldr	r3, [r7, #12]
    5e04:	0edb      	lsrs	r3, r3, #27
    5e06:	f003 0301 	and.w	r3, r3, #1
    5e0a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5e0c:	68fb      	ldr	r3, [r7, #12]
    5e0e:	2b00      	cmp	r3, #0
    5e10:	bf14      	ite	ne
    5e12:	2301      	movne	r3, #1
    5e14:	2300      	moveq	r3, #0
    5e16:	b2db      	uxtb	r3, r3
}
    5e18:	4618      	mov	r0, r3
    5e1a:	3714      	adds	r7, #20
    5e1c:	46bd      	mov	sp, r7
    5e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e22:	4770      	bx	lr

00005e24 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5e24:	b580      	push	{r7, lr}
    5e26:	b084      	sub	sp, #16
    5e28:	af00      	add	r7, sp, #0
    5e2a:	6078      	str	r0, [r7, #4]
    5e2c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5e2e:	2103      	movs	r1, #3
    5e30:	6878      	ldr	r0, [r7, #4]
    5e32:	4b07      	ldr	r3, [pc, #28]	; (5e50 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5e34:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5e36:	687b      	ldr	r3, [r7, #4]
    5e38:	681b      	ldr	r3, [r3, #0]
    5e3a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5e3c:	68fa      	ldr	r2, [r7, #12]
    5e3e:	683b      	ldr	r3, [r7, #0]
    5e40:	4013      	ands	r3, r2
    5e42:	60fb      	str	r3, [r7, #12]
	return tmp;
    5e44:	68fb      	ldr	r3, [r7, #12]
}
    5e46:	4618      	mov	r0, r3
    5e48:	3710      	adds	r7, #16
    5e4a:	46bd      	mov	sp, r7
    5e4c:	bd80      	pop	{r7, pc}
    5e4e:	bf00      	nop
    5e50:	00005c85 	.word	0x00005c85

00005e54 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5e54:	b580      	push	{r7, lr}
    5e56:	b082      	sub	sp, #8
    5e58:	af00      	add	r7, sp, #0
    5e5a:	6078      	str	r0, [r7, #4]
    5e5c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5e5e:	687b      	ldr	r3, [r7, #4]
    5e60:	683a      	ldr	r2, [r7, #0]
    5e62:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5e64:	2103      	movs	r1, #3
    5e66:	6878      	ldr	r0, [r7, #4]
    5e68:	4b02      	ldr	r3, [pc, #8]	; (5e74 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5e6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e6c:	bf00      	nop
    5e6e:	3708      	adds	r7, #8
    5e70:	46bd      	mov	sp, r7
    5e72:	bd80      	pop	{r7, pc}
    5e74:	00005c85 	.word	0x00005c85

00005e78 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5e78:	b580      	push	{r7, lr}
    5e7a:	b084      	sub	sp, #16
    5e7c:	af00      	add	r7, sp, #0
    5e7e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5e80:	2103      	movs	r1, #3
    5e82:	6878      	ldr	r0, [r7, #4]
    5e84:	4b09      	ldr	r3, [pc, #36]	; (5eac <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5e86:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5e88:	687b      	ldr	r3, [r7, #4]
    5e8a:	681b      	ldr	r3, [r3, #0]
    5e8c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5e8e:	68fb      	ldr	r3, [r7, #12]
    5e90:	085b      	lsrs	r3, r3, #1
    5e92:	f003 0301 	and.w	r3, r3, #1
    5e96:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5e98:	68fb      	ldr	r3, [r7, #12]
    5e9a:	2b00      	cmp	r3, #0
    5e9c:	bf14      	ite	ne
    5e9e:	2301      	movne	r3, #1
    5ea0:	2300      	moveq	r3, #0
    5ea2:	b2db      	uxtb	r3, r3
}
    5ea4:	4618      	mov	r0, r3
    5ea6:	3710      	adds	r7, #16
    5ea8:	46bd      	mov	sp, r7
    5eaa:	bd80      	pop	{r7, pc}
    5eac:	00005cd1 	.word	0x00005cd1

00005eb0 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5eb0:	b580      	push	{r7, lr}
    5eb2:	b082      	sub	sp, #8
    5eb4:	af00      	add	r7, sp, #0
    5eb6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5eb8:	687b      	ldr	r3, [r7, #4]
    5eba:	681b      	ldr	r3, [r3, #0]
    5ebc:	f023 0202 	bic.w	r2, r3, #2
    5ec0:	687b      	ldr	r3, [r7, #4]
    5ec2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5ec4:	2103      	movs	r1, #3
    5ec6:	6878      	ldr	r0, [r7, #4]
    5ec8:	4b02      	ldr	r3, [pc, #8]	; (5ed4 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5eca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ecc:	bf00      	nop
    5ece:	3708      	adds	r7, #8
    5ed0:	46bd      	mov	sp, r7
    5ed2:	bd80      	pop	{r7, pc}
    5ed4:	00005cd1 	.word	0x00005cd1

00005ed8 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5ed8:	b580      	push	{r7, lr}
    5eda:	b084      	sub	sp, #16
    5edc:	af00      	add	r7, sp, #0
    5ede:	6078      	str	r0, [r7, #4]
    5ee0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5ee2:	2103      	movs	r1, #3
    5ee4:	6878      	ldr	r0, [r7, #4]
    5ee6:	4b07      	ldr	r3, [pc, #28]	; (5f04 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5ee8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5eea:	687b      	ldr	r3, [r7, #4]
    5eec:	681b      	ldr	r3, [r3, #0]
    5eee:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5ef0:	68fa      	ldr	r2, [r7, #12]
    5ef2:	683b      	ldr	r3, [r7, #0]
    5ef4:	4013      	ands	r3, r2
    5ef6:	60fb      	str	r3, [r7, #12]
	return tmp;
    5ef8:	68fb      	ldr	r3, [r7, #12]
}
    5efa:	4618      	mov	r0, r3
    5efc:	3710      	adds	r7, #16
    5efe:	46bd      	mov	sp, r7
    5f00:	bd80      	pop	{r7, pc}
    5f02:	bf00      	nop
    5f04:	00005cd1 	.word	0x00005cd1

00005f08 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5f08:	b580      	push	{r7, lr}
    5f0a:	b082      	sub	sp, #8
    5f0c:	af00      	add	r7, sp, #0
    5f0e:	6078      	str	r0, [r7, #4]
    5f10:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5f12:	687b      	ldr	r3, [r7, #4]
    5f14:	683a      	ldr	r2, [r7, #0]
    5f16:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5f18:	2103      	movs	r1, #3
    5f1a:	6878      	ldr	r0, [r7, #4]
    5f1c:	4b02      	ldr	r3, [pc, #8]	; (5f28 <hri_sercomspi_write_CTRLA_reg+0x20>)
    5f1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f20:	bf00      	nop
    5f22:	3708      	adds	r7, #8
    5f24:	46bd      	mov	sp, r7
    5f26:	bd80      	pop	{r7, pc}
    5f28:	00005cd1 	.word	0x00005cd1

00005f2c <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5f2c:	b580      	push	{r7, lr}
    5f2e:	b082      	sub	sp, #8
    5f30:	af00      	add	r7, sp, #0
    5f32:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5f34:	687b      	ldr	r3, [r7, #4]
    5f36:	685b      	ldr	r3, [r3, #4]
    5f38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f40:	2104      	movs	r1, #4
    5f42:	6878      	ldr	r0, [r7, #4]
    5f44:	4b02      	ldr	r3, [pc, #8]	; (5f50 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5f46:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f48:	bf00      	nop
    5f4a:	3708      	adds	r7, #8
    5f4c:	46bd      	mov	sp, r7
    5f4e:	bd80      	pop	{r7, pc}
    5f50:	00005c85 	.word	0x00005c85

00005f54 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5f54:	b580      	push	{r7, lr}
    5f56:	b082      	sub	sp, #8
    5f58:	af00      	add	r7, sp, #0
    5f5a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5f5c:	687b      	ldr	r3, [r7, #4]
    5f5e:	685b      	ldr	r3, [r3, #4]
    5f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5f64:	687b      	ldr	r3, [r7, #4]
    5f66:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f68:	2104      	movs	r1, #4
    5f6a:	6878      	ldr	r0, [r7, #4]
    5f6c:	4b02      	ldr	r3, [pc, #8]	; (5f78 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5f6e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f70:	bf00      	nop
    5f72:	3708      	adds	r7, #8
    5f74:	46bd      	mov	sp, r7
    5f76:	bd80      	pop	{r7, pc}
    5f78:	00005c85 	.word	0x00005c85

00005f7c <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5f7c:	b580      	push	{r7, lr}
    5f7e:	b082      	sub	sp, #8
    5f80:	af00      	add	r7, sp, #0
    5f82:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	685b      	ldr	r3, [r3, #4]
    5f88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5f8c:	687b      	ldr	r3, [r7, #4]
    5f8e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f90:	2104      	movs	r1, #4
    5f92:	6878      	ldr	r0, [r7, #4]
    5f94:	4b02      	ldr	r3, [pc, #8]	; (5fa0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5f96:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f98:	bf00      	nop
    5f9a:	3708      	adds	r7, #8
    5f9c:	46bd      	mov	sp, r7
    5f9e:	bd80      	pop	{r7, pc}
    5fa0:	00005c85 	.word	0x00005c85

00005fa4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5fa4:	b580      	push	{r7, lr}
    5fa6:	b082      	sub	sp, #8
    5fa8:	af00      	add	r7, sp, #0
    5faa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5fac:	687b      	ldr	r3, [r7, #4]
    5fae:	685b      	ldr	r3, [r3, #4]
    5fb0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5fb4:	687b      	ldr	r3, [r7, #4]
    5fb6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5fb8:	2104      	movs	r1, #4
    5fba:	6878      	ldr	r0, [r7, #4]
    5fbc:	4b02      	ldr	r3, [pc, #8]	; (5fc8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5fbe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fc0:	bf00      	nop
    5fc2:	3708      	adds	r7, #8
    5fc4:	46bd      	mov	sp, r7
    5fc6:	bd80      	pop	{r7, pc}
    5fc8:	00005c85 	.word	0x00005c85

00005fcc <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5fcc:	b580      	push	{r7, lr}
    5fce:	b082      	sub	sp, #8
    5fd0:	af00      	add	r7, sp, #0
    5fd2:	6078      	str	r0, [r7, #4]
    5fd4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	685a      	ldr	r2, [r3, #4]
    5fda:	683b      	ldr	r3, [r7, #0]
    5fdc:	041b      	lsls	r3, r3, #16
    5fde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5fe2:	431a      	orrs	r2, r3
    5fe4:	687b      	ldr	r3, [r7, #4]
    5fe6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5fe8:	2104      	movs	r1, #4
    5fea:	6878      	ldr	r0, [r7, #4]
    5fec:	4b02      	ldr	r3, [pc, #8]	; (5ff8 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5fee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ff0:	bf00      	nop
    5ff2:	3708      	adds	r7, #8
    5ff4:	46bd      	mov	sp, r7
    5ff6:	bd80      	pop	{r7, pc}
    5ff8:	00005c85 	.word	0x00005c85

00005ffc <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5ffc:	b580      	push	{r7, lr}
    5ffe:	b082      	sub	sp, #8
    6000:	af00      	add	r7, sp, #0
    6002:	6078      	str	r0, [r7, #4]
    6004:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6006:	687b      	ldr	r3, [r7, #4]
    6008:	683a      	ldr	r2, [r7, #0]
    600a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    600c:	2104      	movs	r1, #4
    600e:	6878      	ldr	r0, [r7, #4]
    6010:	4b02      	ldr	r3, [pc, #8]	; (601c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    6012:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6014:	bf00      	nop
    6016:	3708      	adds	r7, #8
    6018:	46bd      	mov	sp, r7
    601a:	bd80      	pop	{r7, pc}
    601c:	00005c85 	.word	0x00005c85

00006020 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6020:	b580      	push	{r7, lr}
    6022:	b082      	sub	sp, #8
    6024:	af00      	add	r7, sp, #0
    6026:	6078      	str	r0, [r7, #4]
    6028:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    602a:	687b      	ldr	r3, [r7, #4]
    602c:	683a      	ldr	r2, [r7, #0]
    602e:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6030:	2117      	movs	r1, #23
    6032:	6878      	ldr	r0, [r7, #4]
    6034:	4b02      	ldr	r3, [pc, #8]	; (6040 <hri_sercomspi_write_CTRLB_reg+0x20>)
    6036:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6038:	bf00      	nop
    603a:	3708      	adds	r7, #8
    603c:	46bd      	mov	sp, r7
    603e:	bd80      	pop	{r7, pc}
    6040:	00005cd1 	.word	0x00005cd1

00006044 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6044:	b480      	push	{r7}
    6046:	b083      	sub	sp, #12
    6048:	af00      	add	r7, sp, #0
    604a:	6078      	str	r0, [r7, #4]
    604c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    604e:	687b      	ldr	r3, [r7, #4]
    6050:	683a      	ldr	r2, [r7, #0]
    6052:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6054:	bf00      	nop
    6056:	370c      	adds	r7, #12
    6058:	46bd      	mov	sp, r7
    605a:	f85d 7b04 	ldr.w	r7, [sp], #4
    605e:	4770      	bx	lr

00006060 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6060:	b480      	push	{r7}
    6062:	b083      	sub	sp, #12
    6064:	af00      	add	r7, sp, #0
    6066:	6078      	str	r0, [r7, #4]
    6068:	460b      	mov	r3, r1
    606a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    606c:	687b      	ldr	r3, [r7, #4]
    606e:	78fa      	ldrb	r2, [r7, #3]
    6070:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6072:	bf00      	nop
    6074:	370c      	adds	r7, #12
    6076:	46bd      	mov	sp, r7
    6078:	f85d 7b04 	ldr.w	r7, [sp], #4
    607c:	4770      	bx	lr
	...

00006080 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6080:	b580      	push	{r7, lr}
    6082:	b084      	sub	sp, #16
    6084:	af00      	add	r7, sp, #0
    6086:	6078      	str	r0, [r7, #4]
    6088:	460b      	mov	r3, r1
    608a:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    608c:	687b      	ldr	r3, [r7, #4]
    608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6090:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6092:	68fb      	ldr	r3, [r7, #12]
    6094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6098:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    609a:	78fb      	ldrb	r3, [r7, #3]
    609c:	039b      	lsls	r3, r3, #14
    609e:	461a      	mov	r2, r3
    60a0:	68fb      	ldr	r3, [r7, #12]
    60a2:	4313      	orrs	r3, r2
    60a4:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    60a6:	687b      	ldr	r3, [r7, #4]
    60a8:	68fa      	ldr	r2, [r7, #12]
    60aa:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60ac:	2104      	movs	r1, #4
    60ae:	6878      	ldr	r0, [r7, #4]
    60b0:	4b02      	ldr	r3, [pc, #8]	; (60bc <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    60b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60b4:	bf00      	nop
    60b6:	3710      	adds	r7, #16
    60b8:	46bd      	mov	sp, r7
    60ba:	bd80      	pop	{r7, pc}
    60bc:	00005c85 	.word	0x00005c85

000060c0 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    60c0:	b580      	push	{r7, lr}
    60c2:	b082      	sub	sp, #8
    60c4:	af00      	add	r7, sp, #0
    60c6:	6078      	str	r0, [r7, #4]
    60c8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    60ca:	687b      	ldr	r3, [r7, #4]
    60cc:	683a      	ldr	r2, [r7, #0]
    60ce:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60d0:	2104      	movs	r1, #4
    60d2:	6878      	ldr	r0, [r7, #4]
    60d4:	4b02      	ldr	r3, [pc, #8]	; (60e0 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    60d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60d8:	bf00      	nop
    60da:	3708      	adds	r7, #8
    60dc:	46bd      	mov	sp, r7
    60de:	bd80      	pop	{r7, pc}
    60e0:	00005c85 	.word	0x00005c85

000060e4 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    60e4:	b580      	push	{r7, lr}
    60e6:	b082      	sub	sp, #8
    60e8:	af00      	add	r7, sp, #0
    60ea:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60ec:	2104      	movs	r1, #4
    60ee:	6878      	ldr	r0, [r7, #4]
    60f0:	4b03      	ldr	r3, [pc, #12]	; (6100 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    60f2:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    60f8:	4618      	mov	r0, r3
    60fa:	3708      	adds	r7, #8
    60fc:	46bd      	mov	sp, r7
    60fe:	bd80      	pop	{r7, pc}
    6100:	00005c85 	.word	0x00005c85

00006104 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6104:	b480      	push	{r7}
    6106:	b083      	sub	sp, #12
    6108:	af00      	add	r7, sp, #0
    610a:	6078      	str	r0, [r7, #4]
    610c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    610e:	687b      	ldr	r3, [r7, #4]
    6110:	683a      	ldr	r2, [r7, #0]
    6112:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6114:	bf00      	nop
    6116:	370c      	adds	r7, #12
    6118:	46bd      	mov	sp, r7
    611a:	f85d 7b04 	ldr.w	r7, [sp], #4
    611e:	4770      	bx	lr

00006120 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6120:	b580      	push	{r7, lr}
    6122:	b082      	sub	sp, #8
    6124:	af00      	add	r7, sp, #0
    6126:	6078      	str	r0, [r7, #4]
    6128:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    612a:	687b      	ldr	r3, [r7, #4]
    612c:	683a      	ldr	r2, [r7, #0]
    612e:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6130:	2104      	movs	r1, #4
    6132:	6878      	ldr	r0, [r7, #4]
    6134:	4b02      	ldr	r3, [pc, #8]	; (6140 <hri_sercomi2cm_write_DATA_reg+0x20>)
    6136:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6138:	bf00      	nop
    613a:	3708      	adds	r7, #8
    613c:	46bd      	mov	sp, r7
    613e:	bd80      	pop	{r7, pc}
    6140:	00005c85 	.word	0x00005c85

00006144 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6144:	b580      	push	{r7, lr}
    6146:	b082      	sub	sp, #8
    6148:	af00      	add	r7, sp, #0
    614a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    614c:	2104      	movs	r1, #4
    614e:	6878      	ldr	r0, [r7, #4]
    6150:	4b03      	ldr	r3, [pc, #12]	; (6160 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6152:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6158:	4618      	mov	r0, r3
    615a:	3708      	adds	r7, #8
    615c:	46bd      	mov	sp, r7
    615e:	bd80      	pop	{r7, pc}
    6160:	00005c85 	.word	0x00005c85

00006164 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6164:	b480      	push	{r7}
    6166:	b083      	sub	sp, #12
    6168:	af00      	add	r7, sp, #0
    616a:	6078      	str	r0, [r7, #4]
    616c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    616e:	687b      	ldr	r3, [r7, #4]
    6170:	683a      	ldr	r2, [r7, #0]
    6172:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6174:	bf00      	nop
    6176:	370c      	adds	r7, #12
    6178:	46bd      	mov	sp, r7
    617a:	f85d 7b04 	ldr.w	r7, [sp], #4
    617e:	4770      	bx	lr

00006180 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6180:	b480      	push	{r7}
    6182:	b083      	sub	sp, #12
    6184:	af00      	add	r7, sp, #0
    6186:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    618c:	4618      	mov	r0, r3
    618e:	370c      	adds	r7, #12
    6190:	46bd      	mov	sp, r7
    6192:	f85d 7b04 	ldr.w	r7, [sp], #4
    6196:	4770      	bx	lr

00006198 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6198:	b480      	push	{r7}
    619a:	b083      	sub	sp, #12
    619c:	af00      	add	r7, sp, #0
    619e:	6078      	str	r0, [r7, #4]
    61a0:	460b      	mov	r3, r1
    61a2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	78fa      	ldrb	r2, [r7, #3]
    61a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61ac:	bf00      	nop
    61ae:	370c      	adds	r7, #12
    61b0:	46bd      	mov	sp, r7
    61b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    61b6:	4770      	bx	lr

000061b8 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    61b8:	b480      	push	{r7}
    61ba:	b083      	sub	sp, #12
    61bc:	af00      	add	r7, sp, #0
    61be:	6078      	str	r0, [r7, #4]
    61c0:	460b      	mov	r3, r1
    61c2:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    61c4:	687b      	ldr	r3, [r7, #4]
    61c6:	887a      	ldrh	r2, [r7, #2]
    61c8:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61ca:	bf00      	nop
    61cc:	370c      	adds	r7, #12
    61ce:	46bd      	mov	sp, r7
    61d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    61d4:	4770      	bx	lr
	...

000061d8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    61d8:	b580      	push	{r7, lr}
    61da:	b082      	sub	sp, #8
    61dc:	af00      	add	r7, sp, #0
    61de:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61e0:	2104      	movs	r1, #4
    61e2:	6878      	ldr	r0, [r7, #4]
    61e4:	4b04      	ldr	r3, [pc, #16]	; (61f8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    61e6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	8b5b      	ldrh	r3, [r3, #26]
    61ec:	b29b      	uxth	r3, r3
}
    61ee:	4618      	mov	r0, r3
    61f0:	3708      	adds	r7, #8
    61f2:	46bd      	mov	sp, r7
    61f4:	bd80      	pop	{r7, pc}
    61f6:	bf00      	nop
    61f8:	00005c85 	.word	0x00005c85

000061fc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    61fc:	b4b0      	push	{r4, r5, r7}
    61fe:	b08d      	sub	sp, #52	; 0x34
    6200:	af00      	add	r7, sp, #0
    6202:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6204:	4b13      	ldr	r3, [pc, #76]	; (6254 <_sercom_get_hardware_index+0x58>)
    6206:	f107 040c 	add.w	r4, r7, #12
    620a:	461d      	mov	r5, r3
    620c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    620e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6210:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6218:	2300      	movs	r3, #0
    621a:	62fb      	str	r3, [r7, #44]	; 0x2c
    621c:	e010      	b.n	6240 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6220:	009b      	lsls	r3, r3, #2
    6222:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6226:	4413      	add	r3, r2
    6228:	f853 3c24 	ldr.w	r3, [r3, #-36]
    622c:	461a      	mov	r2, r3
    622e:	687b      	ldr	r3, [r7, #4]
    6230:	429a      	cmp	r2, r3
    6232:	d102      	bne.n	623a <_sercom_get_hardware_index+0x3e>
			return i;
    6234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6236:	b2db      	uxtb	r3, r3
    6238:	e006      	b.n	6248 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    623c:	3301      	adds	r3, #1
    623e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6242:	2b07      	cmp	r3, #7
    6244:	d9eb      	bls.n	621e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6246:	2300      	movs	r3, #0
}
    6248:	4618      	mov	r0, r3
    624a:	3734      	adds	r7, #52	; 0x34
    624c:	46bd      	mov	sp, r7
    624e:	bcb0      	pop	{r4, r5, r7}
    6250:	4770      	bx	lr
    6252:	bf00      	nop
    6254:	0000f694 	.word	0x0000f694

00006258 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6258:	b580      	push	{r7, lr}
    625a:	b084      	sub	sp, #16
    625c:	af00      	add	r7, sp, #0
    625e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6260:	6878      	ldr	r0, [r7, #4]
    6262:	4b13      	ldr	r3, [pc, #76]	; (62b0 <_get_i2cm_index+0x58>)
    6264:	4798      	blx	r3
    6266:	4603      	mov	r3, r0
    6268:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    626a:	2300      	movs	r3, #0
    626c:	73fb      	strb	r3, [r7, #15]
    626e:	e010      	b.n	6292 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6270:	7bfa      	ldrb	r2, [r7, #15]
    6272:	4910      	ldr	r1, [pc, #64]	; (62b4 <_get_i2cm_index+0x5c>)
    6274:	4613      	mov	r3, r2
    6276:	005b      	lsls	r3, r3, #1
    6278:	4413      	add	r3, r2
    627a:	00db      	lsls	r3, r3, #3
    627c:	440b      	add	r3, r1
    627e:	781b      	ldrb	r3, [r3, #0]
    6280:	7bba      	ldrb	r2, [r7, #14]
    6282:	429a      	cmp	r2, r3
    6284:	d102      	bne.n	628c <_get_i2cm_index+0x34>
			return i;
    6286:	f997 300f 	ldrsb.w	r3, [r7, #15]
    628a:	e00d      	b.n	62a8 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    628c:	7bfb      	ldrb	r3, [r7, #15]
    628e:	3301      	adds	r3, #1
    6290:	73fb      	strb	r3, [r7, #15]
    6292:	7bfb      	ldrb	r3, [r7, #15]
    6294:	2b02      	cmp	r3, #2
    6296:	d9eb      	bls.n	6270 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6298:	f240 32a6 	movw	r2, #934	; 0x3a6
    629c:	4906      	ldr	r1, [pc, #24]	; (62b8 <_get_i2cm_index+0x60>)
    629e:	2000      	movs	r0, #0
    62a0:	4b06      	ldr	r3, [pc, #24]	; (62bc <_get_i2cm_index+0x64>)
    62a2:	4798      	blx	r3
	return -1;
    62a4:	f04f 33ff 	mov.w	r3, #4294967295
}
    62a8:	4618      	mov	r0, r3
    62aa:	3710      	adds	r7, #16
    62ac:	46bd      	mov	sp, r7
    62ae:	bd80      	pop	{r7, pc}
    62b0:	000061fd 	.word	0x000061fd
    62b4:	20000018 	.word	0x20000018
    62b8:	0000f678 	.word	0x0000f678
    62bc:	00003719 	.word	0x00003719

000062c0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    62c0:	b580      	push	{r7, lr}
    62c2:	b082      	sub	sp, #8
    62c4:	af00      	add	r7, sp, #0
    62c6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    62c8:	2103      	movs	r1, #3
    62ca:	6878      	ldr	r0, [r7, #4]
    62cc:	4b02      	ldr	r3, [pc, #8]	; (62d8 <_sercom_i2c_send_stop+0x18>)
    62ce:	4798      	blx	r3
}
    62d0:	bf00      	nop
    62d2:	3708      	adds	r7, #8
    62d4:	46bd      	mov	sp, r7
    62d6:	bd80      	pop	{r7, pc}
    62d8:	00005fcd 	.word	0x00005fcd

000062dc <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    62dc:	b590      	push	{r4, r7, lr}
    62de:	b087      	sub	sp, #28
    62e0:	af00      	add	r7, sp, #0
    62e2:	60f8      	str	r0, [r7, #12]
    62e4:	60b9      	str	r1, [r7, #8]
    62e6:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    62e8:	68f8      	ldr	r0, [r7, #12]
    62ea:	4b7d      	ldr	r3, [pc, #500]	; (64e0 <_sercom_i2c_sync_analyse_flags+0x204>)
    62ec:	4798      	blx	r3
    62ee:	4603      	mov	r3, r0
    62f0:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    62f2:	68f8      	ldr	r0, [r7, #12]
    62f4:	4b7b      	ldr	r3, [pc, #492]	; (64e4 <_sercom_i2c_sync_analyse_flags+0x208>)
    62f6:	4798      	blx	r3
    62f8:	4603      	mov	r3, r0
    62fa:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    62fc:	68bb      	ldr	r3, [r7, #8]
    62fe:	f003 0301 	and.w	r3, r3, #1
    6302:	2b00      	cmp	r3, #0
    6304:	f000 8095 	beq.w	6432 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6308:	8a7b      	ldrh	r3, [r7, #18]
    630a:	f003 0302 	and.w	r3, r3, #2
    630e:	2b00      	cmp	r3, #0
    6310:	d01d      	beq.n	634e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6312:	68f8      	ldr	r0, [r7, #12]
    6314:	4b74      	ldr	r3, [pc, #464]	; (64e8 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6316:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	885b      	ldrh	r3, [r3, #2]
    631c:	b29b      	uxth	r3, r3
    631e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6322:	b29a      	uxth	r2, r3
    6324:	687b      	ldr	r3, [r7, #4]
    6326:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6328:	687b      	ldr	r3, [r7, #4]
    632a:	885b      	ldrh	r3, [r3, #2]
    632c:	b29b      	uxth	r3, r3
    632e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6332:	b29a      	uxth	r2, r3
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6338:	8a7b      	ldrh	r3, [r7, #18]
    633a:	f003 0301 	and.w	r3, r3, #1
    633e:	2b00      	cmp	r3, #0
    6340:	d002      	beq.n	6348 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6342:	f06f 0304 	mvn.w	r3, #4
    6346:	e0c6      	b.n	64d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6348:	f06f 0303 	mvn.w	r3, #3
    634c:	e0c3      	b.n	64d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    634e:	8a7b      	ldrh	r3, [r7, #18]
    6350:	f003 0304 	and.w	r3, r3, #4
    6354:	2b00      	cmp	r3, #0
    6356:	d01f      	beq.n	6398 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6358:	687b      	ldr	r3, [r7, #4]
    635a:	685b      	ldr	r3, [r3, #4]
    635c:	2b00      	cmp	r3, #0
    635e:	dd07      	ble.n	6370 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	885b      	ldrh	r3, [r3, #2]
    6364:	b29b      	uxth	r3, r3
    6366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    636a:	b29a      	uxth	r2, r3
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6370:	687b      	ldr	r3, [r7, #4]
    6372:	885b      	ldrh	r3, [r3, #2]
    6374:	b29b      	uxth	r3, r3
    6376:	b21b      	sxth	r3, r3
    6378:	2b00      	cmp	r3, #0
    637a:	da02      	bge.n	6382 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    637c:	68f8      	ldr	r0, [r7, #12]
    637e:	4b5b      	ldr	r3, [pc, #364]	; (64ec <_sercom_i2c_sync_analyse_flags+0x210>)
    6380:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6382:	687b      	ldr	r3, [r7, #4]
    6384:	885b      	ldrh	r3, [r3, #2]
    6386:	b29b      	uxth	r3, r3
    6388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    638c:	b29a      	uxth	r2, r3
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6392:	f06f 0301 	mvn.w	r3, #1
    6396:	e09e      	b.n	64d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6398:	687b      	ldr	r3, [r7, #4]
    639a:	885b      	ldrh	r3, [r3, #2]
    639c:	b29b      	uxth	r3, r3
    639e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    63a2:	2b00      	cmp	r3, #0
    63a4:	d01c      	beq.n	63e0 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    63a6:	687b      	ldr	r3, [r7, #4]
    63a8:	881b      	ldrh	r3, [r3, #0]
    63aa:	121b      	asrs	r3, r3, #8
    63ac:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    63ae:	f003 0406 	and.w	r4, r3, #6
    63b2:	68f8      	ldr	r0, [r7, #12]
    63b4:	4b4e      	ldr	r3, [pc, #312]	; (64f0 <_sercom_i2c_sync_analyse_flags+0x214>)
    63b6:	4798      	blx	r3
    63b8:	4603      	mov	r3, r0
    63ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    63be:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    63c0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    63c4:	4619      	mov	r1, r3
    63c6:	68f8      	ldr	r0, [r7, #12]
    63c8:	4b4a      	ldr	r3, [pc, #296]	; (64f4 <_sercom_i2c_sync_analyse_flags+0x218>)
    63ca:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    63cc:	687b      	ldr	r3, [r7, #4]
    63ce:	885b      	ldrh	r3, [r3, #2]
    63d0:	b29b      	uxth	r3, r3
    63d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    63d6:	b29a      	uxth	r2, r3
    63d8:	687b      	ldr	r3, [r7, #4]
    63da:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    63dc:	2300      	movs	r3, #0
    63de:	e07a      	b.n	64d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    63e0:	687b      	ldr	r3, [r7, #4]
    63e2:	685b      	ldr	r3, [r3, #4]
    63e4:	2b00      	cmp	r3, #0
    63e6:	d111      	bne.n	640c <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    63e8:	687b      	ldr	r3, [r7, #4]
    63ea:	885b      	ldrh	r3, [r3, #2]
    63ec:	b29b      	uxth	r3, r3
    63ee:	b21b      	sxth	r3, r3
    63f0:	2b00      	cmp	r3, #0
    63f2:	da02      	bge.n	63fa <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    63f4:	68f8      	ldr	r0, [r7, #12]
    63f6:	4b3d      	ldr	r3, [pc, #244]	; (64ec <_sercom_i2c_sync_analyse_flags+0x210>)
    63f8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    63fa:	687b      	ldr	r3, [r7, #4]
    63fc:	885b      	ldrh	r3, [r3, #2]
    63fe:	b29b      	uxth	r3, r3
    6400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6404:	b29a      	uxth	r2, r3
    6406:	687b      	ldr	r3, [r7, #4]
    6408:	805a      	strh	r2, [r3, #2]
    640a:	e010      	b.n	642e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    640c:	687b      	ldr	r3, [r7, #4]
    640e:	689b      	ldr	r3, [r3, #8]
    6410:	781b      	ldrb	r3, [r3, #0]
    6412:	4619      	mov	r1, r3
    6414:	68f8      	ldr	r0, [r7, #12]
    6416:	4b38      	ldr	r3, [pc, #224]	; (64f8 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6418:	4798      	blx	r3
				msg->buffer++;
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	689b      	ldr	r3, [r3, #8]
    641e:	1c5a      	adds	r2, r3, #1
    6420:	687b      	ldr	r3, [r7, #4]
    6422:	609a      	str	r2, [r3, #8]
				msg->len--;
    6424:	687b      	ldr	r3, [r7, #4]
    6426:	685b      	ldr	r3, [r3, #4]
    6428:	1e5a      	subs	r2, r3, #1
    642a:	687b      	ldr	r3, [r7, #4]
    642c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    642e:	2300      	movs	r3, #0
    6430:	e051      	b.n	64d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6432:	68bb      	ldr	r3, [r7, #8]
    6434:	f003 0302 	and.w	r3, r3, #2
    6438:	2b00      	cmp	r3, #0
    643a:	d04b      	beq.n	64d4 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    643c:	687b      	ldr	r3, [r7, #4]
    643e:	685b      	ldr	r3, [r3, #4]
    6440:	2b00      	cmp	r3, #0
    6442:	d041      	beq.n	64c8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6444:	8a7b      	ldrh	r3, [r7, #18]
    6446:	f003 0304 	and.w	r3, r3, #4
    644a:	2b00      	cmp	r3, #0
    644c:	d13c      	bne.n	64c8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    644e:	687b      	ldr	r3, [r7, #4]
    6450:	685b      	ldr	r3, [r3, #4]
    6452:	1e5a      	subs	r2, r3, #1
    6454:	687b      	ldr	r3, [r7, #4]
    6456:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6458:	687b      	ldr	r3, [r7, #4]
    645a:	685b      	ldr	r3, [r3, #4]
    645c:	2b00      	cmp	r3, #0
    645e:	d102      	bne.n	6466 <_sercom_i2c_sync_analyse_flags+0x18a>
    6460:	697b      	ldr	r3, [r7, #20]
    6462:	2b00      	cmp	r3, #0
    6464:	d006      	beq.n	6474 <_sercom_i2c_sync_analyse_flags+0x198>
    6466:	687b      	ldr	r3, [r7, #4]
    6468:	685b      	ldr	r3, [r3, #4]
    646a:	2b01      	cmp	r3, #1
    646c:	d105      	bne.n	647a <_sercom_i2c_sync_analyse_flags+0x19e>
    646e:	697b      	ldr	r3, [r7, #20]
    6470:	2b00      	cmp	r3, #0
    6472:	d002      	beq.n	647a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6474:	68f8      	ldr	r0, [r7, #12]
    6476:	4b21      	ldr	r3, [pc, #132]	; (64fc <_sercom_i2c_sync_analyse_flags+0x220>)
    6478:	4798      	blx	r3
			}

			if (msg->len == 0) {
    647a:	687b      	ldr	r3, [r7, #4]
    647c:	685b      	ldr	r3, [r3, #4]
    647e:	2b00      	cmp	r3, #0
    6480:	d113      	bne.n	64aa <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6482:	687b      	ldr	r3, [r7, #4]
    6484:	885b      	ldrh	r3, [r3, #2]
    6486:	b29b      	uxth	r3, r3
    6488:	b21b      	sxth	r3, r3
    648a:	2b00      	cmp	r3, #0
    648c:	da05      	bge.n	649a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    648e:	68f8      	ldr	r0, [r7, #12]
    6490:	4b1b      	ldr	r3, [pc, #108]	; (6500 <_sercom_i2c_sync_analyse_flags+0x224>)
    6492:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6494:	68f8      	ldr	r0, [r7, #12]
    6496:	4b15      	ldr	r3, [pc, #84]	; (64ec <_sercom_i2c_sync_analyse_flags+0x210>)
    6498:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    649a:	687b      	ldr	r3, [r7, #4]
    649c:	885b      	ldrh	r3, [r3, #2]
    649e:	b29b      	uxth	r3, r3
    64a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    64a4:	b29a      	uxth	r2, r3
    64a6:	687b      	ldr	r3, [r7, #4]
    64a8:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    64aa:	687b      	ldr	r3, [r7, #4]
    64ac:	689c      	ldr	r4, [r3, #8]
    64ae:	1c62      	adds	r2, r4, #1
    64b0:	687b      	ldr	r3, [r7, #4]
    64b2:	609a      	str	r2, [r3, #8]
    64b4:	68f8      	ldr	r0, [r7, #12]
    64b6:	4b13      	ldr	r3, [pc, #76]	; (6504 <_sercom_i2c_sync_analyse_flags+0x228>)
    64b8:	4798      	blx	r3
    64ba:	4603      	mov	r3, r0
    64bc:	b2db      	uxtb	r3, r3
    64be:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    64c0:	68f8      	ldr	r0, [r7, #12]
    64c2:	4b11      	ldr	r3, [pc, #68]	; (6508 <_sercom_i2c_sync_analyse_flags+0x22c>)
    64c4:	4798      	blx	r3
    64c6:	e005      	b.n	64d4 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    64c8:	68f8      	ldr	r0, [r7, #12]
    64ca:	4b0f      	ldr	r3, [pc, #60]	; (6508 <_sercom_i2c_sync_analyse_flags+0x22c>)
    64cc:	4798      	blx	r3
			return I2C_NACK;
    64ce:	f06f 0301 	mvn.w	r3, #1
    64d2:	e000      	b.n	64d6 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    64d4:	2300      	movs	r3, #0
}
    64d6:	4618      	mov	r0, r3
    64d8:	371c      	adds	r7, #28
    64da:	46bd      	mov	sp, r7
    64dc:	bd90      	pop	{r4, r7, pc}
    64de:	bf00      	nop
    64e0:	00005df5 	.word	0x00005df5
    64e4:	000061d9 	.word	0x000061d9
    64e8:	00005d1d 	.word	0x00005d1d
    64ec:	000062c1 	.word	0x000062c1
    64f0:	000060e5 	.word	0x000060e5
    64f4:	000060c1 	.word	0x000060c1
    64f8:	00006121 	.word	0x00006121
    64fc:	00005f7d 	.word	0x00005f7d
    6500:	00005f55 	.word	0x00005f55
    6504:	00006145 	.word	0x00006145
    6508:	00005d37 	.word	0x00005d37

0000650c <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    650c:	b580      	push	{r7, lr}
    650e:	b082      	sub	sp, #8
    6510:	af00      	add	r7, sp, #0
    6512:	6078      	str	r0, [r7, #4]
    6514:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6516:	687b      	ldr	r3, [r7, #4]
    6518:	2b00      	cmp	r3, #0
    651a:	bf14      	ite	ne
    651c:	2301      	movne	r3, #1
    651e:	2300      	moveq	r3, #0
    6520:	b2db      	uxtb	r3, r3
    6522:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6526:	4908      	ldr	r1, [pc, #32]	; (6548 <_i2c_m_sync_init+0x3c>)
    6528:	4618      	mov	r0, r3
    652a:	4b08      	ldr	r3, [pc, #32]	; (654c <_i2c_m_sync_init+0x40>)
    652c:	4798      	blx	r3

	i2c_dev->hw = hw;
    652e:	687b      	ldr	r3, [r7, #4]
    6530:	683a      	ldr	r2, [r7, #0]
    6532:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6534:	687b      	ldr	r3, [r7, #4]
    6536:	6839      	ldr	r1, [r7, #0]
    6538:	4618      	mov	r0, r3
    653a:	4b05      	ldr	r3, [pc, #20]	; (6550 <_i2c_m_sync_init+0x44>)
    653c:	4798      	blx	r3
    653e:	4603      	mov	r3, r0
}
    6540:	4618      	mov	r0, r3
    6542:	3708      	adds	r7, #8
    6544:	46bd      	mov	sp, r7
    6546:	bd80      	pop	{r7, pc}
    6548:	0000f678 	.word	0x0000f678
    654c:	00003719 	.word	0x00003719
    6550:	000067fd 	.word	0x000067fd

00006554 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6554:	b580      	push	{r7, lr}
    6556:	b084      	sub	sp, #16
    6558:	af00      	add	r7, sp, #0
    655a:	6078      	str	r0, [r7, #4]
    655c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    655e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6562:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6564:	687b      	ldr	r3, [r7, #4]
    6566:	691b      	ldr	r3, [r3, #16]
    6568:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    656a:	68b8      	ldr	r0, [r7, #8]
    656c:	4b0f      	ldr	r3, [pc, #60]	; (65ac <_sercom_i2c_sync_wait_bus+0x58>)
    656e:	4798      	blx	r3
    6570:	4603      	mov	r3, r0
    6572:	461a      	mov	r2, r3
    6574:	683b      	ldr	r3, [r7, #0]
    6576:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6578:	68fb      	ldr	r3, [r7, #12]
    657a:	1e5a      	subs	r2, r3, #1
    657c:	60fa      	str	r2, [r7, #12]
    657e:	2b00      	cmp	r3, #0
    6580:	d102      	bne.n	6588 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6582:	f06f 0304 	mvn.w	r3, #4
    6586:	e00c      	b.n	65a2 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6588:	683b      	ldr	r3, [r7, #0]
    658a:	681b      	ldr	r3, [r3, #0]
    658c:	f003 0301 	and.w	r3, r3, #1
    6590:	2b00      	cmp	r3, #0
    6592:	d105      	bne.n	65a0 <_sercom_i2c_sync_wait_bus+0x4c>
    6594:	683b      	ldr	r3, [r7, #0]
    6596:	681b      	ldr	r3, [r3, #0]
    6598:	f003 0302 	and.w	r3, r3, #2
    659c:	2b00      	cmp	r3, #0
    659e:	d0e4      	beq.n	656a <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    65a0:	2300      	movs	r3, #0
}
    65a2:	4618      	mov	r0, r3
    65a4:	3710      	adds	r7, #16
    65a6:	46bd      	mov	sp, r7
    65a8:	bd80      	pop	{r7, pc}
    65aa:	bf00      	nop
    65ac:	00005d51 	.word	0x00005d51

000065b0 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    65b0:	b590      	push	{r4, r7, lr}
    65b2:	b087      	sub	sp, #28
    65b4:	af00      	add	r7, sp, #0
    65b6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    65b8:	687b      	ldr	r3, [r7, #4]
    65ba:	691b      	ldr	r3, [r3, #16]
    65bc:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    65be:	687b      	ldr	r3, [r7, #4]
    65c0:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    65c2:	6978      	ldr	r0, [r7, #20]
    65c4:	4b39      	ldr	r3, [pc, #228]	; (66ac <_sercom_i2c_sync_send_address+0xfc>)
    65c6:	4798      	blx	r3
    65c8:	4603      	mov	r3, r0
    65ca:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    65cc:	687b      	ldr	r3, [r7, #4]
    65ce:	2b00      	cmp	r3, #0
    65d0:	bf14      	ite	ne
    65d2:	2301      	movne	r3, #1
    65d4:	2300      	moveq	r3, #0
    65d6:	b2db      	uxtb	r3, r3
    65d8:	f240 52a5 	movw	r2, #1445	; 0x5a5
    65dc:	4934      	ldr	r1, [pc, #208]	; (66b0 <_sercom_i2c_sync_send_address+0x100>)
    65de:	4618      	mov	r0, r3
    65e0:	4b34      	ldr	r3, [pc, #208]	; (66b4 <_sercom_i2c_sync_send_address+0x104>)
    65e2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    65e4:	693b      	ldr	r3, [r7, #16]
    65e6:	685b      	ldr	r3, [r3, #4]
    65e8:	2b01      	cmp	r3, #1
    65ea:	d106      	bne.n	65fa <_sercom_i2c_sync_send_address+0x4a>
    65ec:	68fb      	ldr	r3, [r7, #12]
    65ee:	2b00      	cmp	r3, #0
    65f0:	d003      	beq.n	65fa <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    65f2:	6978      	ldr	r0, [r7, #20]
    65f4:	4b30      	ldr	r3, [pc, #192]	; (66b8 <_sercom_i2c_sync_send_address+0x108>)
    65f6:	4798      	blx	r3
    65f8:	e002      	b.n	6600 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    65fa:	6978      	ldr	r0, [r7, #20]
    65fc:	4b2f      	ldr	r3, [pc, #188]	; (66bc <_sercom_i2c_sync_send_address+0x10c>)
    65fe:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6600:	693b      	ldr	r3, [r7, #16]
    6602:	881b      	ldrh	r3, [r3, #0]
    6604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6608:	2b00      	cmp	r3, #0
    660a:	d022      	beq.n	6652 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    660c:	693b      	ldr	r3, [r7, #16]
    660e:	885b      	ldrh	r3, [r3, #2]
    6610:	b29b      	uxth	r3, r3
    6612:	f003 0301 	and.w	r3, r3, #1
    6616:	2b00      	cmp	r3, #0
    6618:	d007      	beq.n	662a <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    661a:	693b      	ldr	r3, [r7, #16]
    661c:	885b      	ldrh	r3, [r3, #2]
    661e:	b29b      	uxth	r3, r3
    6620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6624:	b29a      	uxth	r2, r3
    6626:	693b      	ldr	r3, [r7, #16]
    6628:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    662a:	693b      	ldr	r3, [r7, #16]
    662c:	881b      	ldrh	r3, [r3, #0]
    662e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6630:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6634:	401c      	ands	r4, r3
    6636:	6978      	ldr	r0, [r7, #20]
    6638:	4b21      	ldr	r3, [pc, #132]	; (66c0 <_sercom_i2c_sync_send_address+0x110>)
    663a:	4798      	blx	r3
    663c:	4603      	mov	r3, r0
    663e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6642:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6648:	4619      	mov	r1, r3
    664a:	6978      	ldr	r0, [r7, #20]
    664c:	4b1d      	ldr	r3, [pc, #116]	; (66c4 <_sercom_i2c_sync_send_address+0x114>)
    664e:	4798      	blx	r3
    6650:	e01a      	b.n	6688 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6652:	693b      	ldr	r3, [r7, #16]
    6654:	881b      	ldrh	r3, [r3, #0]
    6656:	005b      	lsls	r3, r3, #1
    6658:	b2db      	uxtb	r3, r3
    665a:	693a      	ldr	r2, [r7, #16]
    665c:	8852      	ldrh	r2, [r2, #2]
    665e:	b292      	uxth	r2, r2
    6660:	f002 0201 	and.w	r2, r2, #1
    6664:	2a00      	cmp	r2, #0
    6666:	bf14      	ite	ne
    6668:	2201      	movne	r2, #1
    666a:	2200      	moveq	r2, #0
    666c:	b2d2      	uxtb	r2, r2
    666e:	4313      	orrs	r3, r2
    6670:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6672:	6978      	ldr	r0, [r7, #20]
    6674:	4b12      	ldr	r3, [pc, #72]	; (66c0 <_sercom_i2c_sync_send_address+0x110>)
    6676:	4798      	blx	r3
    6678:	4603      	mov	r3, r0
    667a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    667e:	4323      	orrs	r3, r4
    6680:	4619      	mov	r1, r3
    6682:	6978      	ldr	r0, [r7, #20]
    6684:	4b0f      	ldr	r3, [pc, #60]	; (66c4 <_sercom_i2c_sync_send_address+0x114>)
    6686:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6688:	f107 0308 	add.w	r3, r7, #8
    668c:	4619      	mov	r1, r3
    668e:	6878      	ldr	r0, [r7, #4]
    6690:	4b0d      	ldr	r3, [pc, #52]	; (66c8 <_sercom_i2c_sync_send_address+0x118>)
    6692:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6694:	68bb      	ldr	r3, [r7, #8]
    6696:	693a      	ldr	r2, [r7, #16]
    6698:	4619      	mov	r1, r3
    669a:	6978      	ldr	r0, [r7, #20]
    669c:	4b0b      	ldr	r3, [pc, #44]	; (66cc <_sercom_i2c_sync_send_address+0x11c>)
    669e:	4798      	blx	r3
    66a0:	4603      	mov	r3, r0
}
    66a2:	4618      	mov	r0, r3
    66a4:	371c      	adds	r7, #28
    66a6:	46bd      	mov	sp, r7
    66a8:	bd90      	pop	{r4, r7, pc}
    66aa:	bf00      	nop
    66ac:	00005df5 	.word	0x00005df5
    66b0:	0000f678 	.word	0x0000f678
    66b4:	00003719 	.word	0x00003719
    66b8:	00005f7d 	.word	0x00005f7d
    66bc:	00005fa5 	.word	0x00005fa5
    66c0:	000060e5 	.word	0x000060e5
    66c4:	000060c1 	.word	0x000060c1
    66c8:	00006555 	.word	0x00006555
    66cc:	000062dd 	.word	0x000062dd

000066d0 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    66d0:	b580      	push	{r7, lr}
    66d2:	b086      	sub	sp, #24
    66d4:	af00      	add	r7, sp, #0
    66d6:	6078      	str	r0, [r7, #4]
    66d8:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	691b      	ldr	r3, [r3, #16]
    66de:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	2b00      	cmp	r3, #0
    66e4:	bf14      	ite	ne
    66e6:	2301      	movne	r3, #1
    66e8:	2300      	moveq	r3, #0
    66ea:	b2db      	uxtb	r3, r3
    66ec:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    66f0:	493b      	ldr	r1, [pc, #236]	; (67e0 <_i2c_m_sync_transfer+0x110>)
    66f2:	4618      	mov	r0, r3
    66f4:	4b3b      	ldr	r3, [pc, #236]	; (67e4 <_i2c_m_sync_transfer+0x114>)
    66f6:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    66f8:	687b      	ldr	r3, [r7, #4]
    66fa:	691b      	ldr	r3, [r3, #16]
    66fc:	2b00      	cmp	r3, #0
    66fe:	bf14      	ite	ne
    6700:	2301      	movne	r3, #1
    6702:	2300      	moveq	r3, #0
    6704:	b2db      	uxtb	r3, r3
    6706:	f240 52d1 	movw	r2, #1489	; 0x5d1
    670a:	4935      	ldr	r1, [pc, #212]	; (67e0 <_i2c_m_sync_transfer+0x110>)
    670c:	4618      	mov	r0, r3
    670e:	4b35      	ldr	r3, [pc, #212]	; (67e4 <_i2c_m_sync_transfer+0x114>)
    6710:	4798      	blx	r3
	ASSERT(msg);
    6712:	683b      	ldr	r3, [r7, #0]
    6714:	2b00      	cmp	r3, #0
    6716:	bf14      	ite	ne
    6718:	2301      	movne	r3, #1
    671a:	2300      	moveq	r3, #0
    671c:	b2db      	uxtb	r3, r3
    671e:	f240 52d2 	movw	r2, #1490	; 0x5d2
    6722:	492f      	ldr	r1, [pc, #188]	; (67e0 <_i2c_m_sync_transfer+0x110>)
    6724:	4618      	mov	r0, r3
    6726:	4b2f      	ldr	r3, [pc, #188]	; (67e4 <_i2c_m_sync_transfer+0x114>)
    6728:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    672a:	687b      	ldr	r3, [r7, #4]
    672c:	885b      	ldrh	r3, [r3, #2]
    672e:	b29b      	uxth	r3, r3
    6730:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6734:	2b00      	cmp	r3, #0
    6736:	d002      	beq.n	673e <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6738:	f06f 0305 	mvn.w	r3, #5
    673c:	e04c      	b.n	67d8 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    673e:	683b      	ldr	r3, [r7, #0]
    6740:	885b      	ldrh	r3, [r3, #2]
    6742:	b29b      	uxth	r3, r3
    6744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6748:	b29a      	uxth	r2, r3
    674a:	683b      	ldr	r3, [r7, #0]
    674c:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    674e:	687b      	ldr	r3, [r7, #4]
    6750:	683a      	ldr	r2, [r7, #0]
    6752:	ca07      	ldmia	r2, {r0, r1, r2}
    6754:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6758:	6938      	ldr	r0, [r7, #16]
    675a:	4b23      	ldr	r3, [pc, #140]	; (67e8 <_i2c_m_sync_transfer+0x118>)
    675c:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    675e:	6878      	ldr	r0, [r7, #4]
    6760:	4b22      	ldr	r3, [pc, #136]	; (67ec <_i2c_m_sync_transfer+0x11c>)
    6762:	4798      	blx	r3
    6764:	6178      	str	r0, [r7, #20]

	if (ret) {
    6766:	697b      	ldr	r3, [r7, #20]
    6768:	2b00      	cmp	r3, #0
    676a:	d02d      	beq.n	67c8 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    676c:	687b      	ldr	r3, [r7, #4]
    676e:	885b      	ldrh	r3, [r3, #2]
    6770:	b29b      	uxth	r3, r3
    6772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6776:	b29a      	uxth	r2, r3
    6778:	687b      	ldr	r3, [r7, #4]
    677a:	805a      	strh	r2, [r3, #2]

		return ret;
    677c:	697b      	ldr	r3, [r7, #20]
    677e:	e02b      	b.n	67d8 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6780:	f107 030c 	add.w	r3, r7, #12
    6784:	4619      	mov	r1, r3
    6786:	6878      	ldr	r0, [r7, #4]
    6788:	4b19      	ldr	r3, [pc, #100]	; (67f0 <_i2c_m_sync_transfer+0x120>)
    678a:	4798      	blx	r3
    678c:	6178      	str	r0, [r7, #20]

		if (ret) {
    678e:	697b      	ldr	r3, [r7, #20]
    6790:	2b00      	cmp	r3, #0
    6792:	d012      	beq.n	67ba <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6794:	683b      	ldr	r3, [r7, #0]
    6796:	885b      	ldrh	r3, [r3, #2]
    6798:	b29b      	uxth	r3, r3
    679a:	b21b      	sxth	r3, r3
    679c:	2b00      	cmp	r3, #0
    679e:	da02      	bge.n	67a6 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    67a0:	6938      	ldr	r0, [r7, #16]
    67a2:	4b14      	ldr	r3, [pc, #80]	; (67f4 <_i2c_m_sync_transfer+0x124>)
    67a4:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    67a6:	687b      	ldr	r3, [r7, #4]
    67a8:	885b      	ldrh	r3, [r3, #2]
    67aa:	b29b      	uxth	r3, r3
    67ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    67b0:	b29a      	uxth	r2, r3
    67b2:	687b      	ldr	r3, [r7, #4]
    67b4:	805a      	strh	r2, [r3, #2]

			return ret;
    67b6:	697b      	ldr	r3, [r7, #20]
    67b8:	e00e      	b.n	67d8 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    67ba:	68fb      	ldr	r3, [r7, #12]
    67bc:	687a      	ldr	r2, [r7, #4]
    67be:	4619      	mov	r1, r3
    67c0:	6938      	ldr	r0, [r7, #16]
    67c2:	4b0d      	ldr	r3, [pc, #52]	; (67f8 <_i2c_m_sync_transfer+0x128>)
    67c4:	4798      	blx	r3
    67c6:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    67c8:	687b      	ldr	r3, [r7, #4]
    67ca:	885b      	ldrh	r3, [r3, #2]
    67cc:	b29b      	uxth	r3, r3
    67ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
    67d2:	2b00      	cmp	r3, #0
    67d4:	d1d4      	bne.n	6780 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    67d6:	697b      	ldr	r3, [r7, #20]
}
    67d8:	4618      	mov	r0, r3
    67da:	3718      	adds	r7, #24
    67dc:	46bd      	mov	sp, r7
    67de:	bd80      	pop	{r7, pc}
    67e0:	0000f678 	.word	0x0000f678
    67e4:	00003719 	.word	0x00003719
    67e8:	00005f2d 	.word	0x00005f2d
    67ec:	000065b1 	.word	0x000065b1
    67f0:	00006555 	.word	0x00006555
    67f4:	000062c1 	.word	0x000062c1
    67f8:	000062dd 	.word	0x000062dd

000067fc <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    67fc:	b580      	push	{r7, lr}
    67fe:	b084      	sub	sp, #16
    6800:	af00      	add	r7, sp, #0
    6802:	6078      	str	r0, [r7, #4]
    6804:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6806:	6838      	ldr	r0, [r7, #0]
    6808:	4b42      	ldr	r3, [pc, #264]	; (6914 <_i2c_m_sync_init_impl+0x118>)
    680a:	4798      	blx	r3
    680c:	4603      	mov	r3, r0
    680e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6810:	2101      	movs	r1, #1
    6812:	6838      	ldr	r0, [r7, #0]
    6814:	4b40      	ldr	r3, [pc, #256]	; (6918 <_i2c_m_sync_init_impl+0x11c>)
    6816:	4798      	blx	r3
    6818:	4603      	mov	r3, r0
    681a:	f083 0301 	eor.w	r3, r3, #1
    681e:	b2db      	uxtb	r3, r3
    6820:	2b00      	cmp	r3, #0
    6822:	d020      	beq.n	6866 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6824:	7bfa      	ldrb	r2, [r7, #15]
    6826:	493d      	ldr	r1, [pc, #244]	; (691c <_i2c_m_sync_init_impl+0x120>)
    6828:	4613      	mov	r3, r2
    682a:	005b      	lsls	r3, r3, #1
    682c:	4413      	add	r3, r2
    682e:	00db      	lsls	r3, r3, #3
    6830:	440b      	add	r3, r1
    6832:	3304      	adds	r3, #4
    6834:	681b      	ldr	r3, [r3, #0]
    6836:	f003 031c 	and.w	r3, r3, #28
    683a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    683c:	2102      	movs	r1, #2
    683e:	6838      	ldr	r0, [r7, #0]
    6840:	4b37      	ldr	r3, [pc, #220]	; (6920 <_i2c_m_sync_init_impl+0x124>)
    6842:	4798      	blx	r3
    6844:	4603      	mov	r3, r0
    6846:	2b00      	cmp	r3, #0
    6848:	d006      	beq.n	6858 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    684a:	6838      	ldr	r0, [r7, #0]
    684c:	4b35      	ldr	r3, [pc, #212]	; (6924 <_i2c_m_sync_init_impl+0x128>)
    684e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6850:	2102      	movs	r1, #2
    6852:	6838      	ldr	r0, [r7, #0]
    6854:	4b34      	ldr	r3, [pc, #208]	; (6928 <_i2c_m_sync_init_impl+0x12c>)
    6856:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6858:	68bb      	ldr	r3, [r7, #8]
    685a:	f043 0301 	orr.w	r3, r3, #1
    685e:	4619      	mov	r1, r3
    6860:	6838      	ldr	r0, [r7, #0]
    6862:	4b32      	ldr	r3, [pc, #200]	; (692c <_i2c_m_sync_init_impl+0x130>)
    6864:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6866:	2101      	movs	r1, #1
    6868:	6838      	ldr	r0, [r7, #0]
    686a:	4b2f      	ldr	r3, [pc, #188]	; (6928 <_i2c_m_sync_init_impl+0x12c>)
    686c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    686e:	7bfa      	ldrb	r2, [r7, #15]
    6870:	492a      	ldr	r1, [pc, #168]	; (691c <_i2c_m_sync_init_impl+0x120>)
    6872:	4613      	mov	r3, r2
    6874:	005b      	lsls	r3, r3, #1
    6876:	4413      	add	r3, r2
    6878:	00db      	lsls	r3, r3, #3
    687a:	440b      	add	r3, r1
    687c:	3304      	adds	r3, #4
    687e:	681b      	ldr	r3, [r3, #0]
    6880:	4619      	mov	r1, r3
    6882:	6838      	ldr	r0, [r7, #0]
    6884:	4b29      	ldr	r3, [pc, #164]	; (692c <_i2c_m_sync_init_impl+0x130>)
    6886:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6888:	7bfa      	ldrb	r2, [r7, #15]
    688a:	4924      	ldr	r1, [pc, #144]	; (691c <_i2c_m_sync_init_impl+0x120>)
    688c:	4613      	mov	r3, r2
    688e:	005b      	lsls	r3, r3, #1
    6890:	4413      	add	r3, r2
    6892:	00db      	lsls	r3, r3, #3
    6894:	440b      	add	r3, r1
    6896:	3308      	adds	r3, #8
    6898:	681b      	ldr	r3, [r3, #0]
    689a:	4619      	mov	r1, r3
    689c:	6838      	ldr	r0, [r7, #0]
    689e:	4b24      	ldr	r3, [pc, #144]	; (6930 <_i2c_m_sync_init_impl+0x134>)
    68a0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    68a2:	7bfa      	ldrb	r2, [r7, #15]
    68a4:	491d      	ldr	r1, [pc, #116]	; (691c <_i2c_m_sync_init_impl+0x120>)
    68a6:	4613      	mov	r3, r2
    68a8:	005b      	lsls	r3, r3, #1
    68aa:	4413      	add	r3, r2
    68ac:	00db      	lsls	r3, r3, #3
    68ae:	440b      	add	r3, r1
    68b0:	330c      	adds	r3, #12
    68b2:	681b      	ldr	r3, [r3, #0]
    68b4:	4619      	mov	r1, r3
    68b6:	6838      	ldr	r0, [r7, #0]
    68b8:	4b1e      	ldr	r3, [pc, #120]	; (6934 <_i2c_m_sync_init_impl+0x138>)
    68ba:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    68bc:	7bfa      	ldrb	r2, [r7, #15]
    68be:	4917      	ldr	r1, [pc, #92]	; (691c <_i2c_m_sync_init_impl+0x120>)
    68c0:	4613      	mov	r3, r2
    68c2:	005b      	lsls	r3, r3, #1
    68c4:	4413      	add	r3, r2
    68c6:	00db      	lsls	r3, r3, #3
    68c8:	440b      	add	r3, r1
    68ca:	3304      	adds	r3, #4
    68cc:	681b      	ldr	r3, [r3, #0]
    68ce:	0e1b      	lsrs	r3, r3, #24
    68d0:	b29b      	uxth	r3, r3
    68d2:	f003 0303 	and.w	r3, r3, #3
    68d6:	b29a      	uxth	r2, r3
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	899b      	ldrh	r3, [r3, #12]
    68e0:	2b01      	cmp	r3, #1
    68e2:	bf8c      	ite	hi
    68e4:	2301      	movhi	r3, #1
    68e6:	2300      	movls	r3, #0
    68e8:	b2db      	uxtb	r3, r3
    68ea:	4619      	mov	r1, r3
    68ec:	6838      	ldr	r0, [r7, #0]
    68ee:	4b12      	ldr	r3, [pc, #72]	; (6938 <_i2c_m_sync_init_impl+0x13c>)
    68f0:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    68f2:	7bfa      	ldrb	r2, [r7, #15]
    68f4:	4909      	ldr	r1, [pc, #36]	; (691c <_i2c_m_sync_init_impl+0x120>)
    68f6:	4613      	mov	r3, r2
    68f8:	005b      	lsls	r3, r3, #1
    68fa:	4413      	add	r3, r2
    68fc:	00db      	lsls	r3, r3, #3
    68fe:	440b      	add	r3, r1
    6900:	3312      	adds	r3, #18
    6902:	881a      	ldrh	r2, [r3, #0]
    6904:	687b      	ldr	r3, [r7, #4]
    6906:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6908:	2300      	movs	r3, #0
}
    690a:	4618      	mov	r0, r3
    690c:	3710      	adds	r7, #16
    690e:	46bd      	mov	sp, r7
    6910:	bd80      	pop	{r7, pc}
    6912:	bf00      	nop
    6914:	00006259 	.word	0x00006259
    6918:	00005ca9 	.word	0x00005ca9
    691c:	20000018 	.word	0x20000018
    6920:	00005e25 	.word	0x00005e25
    6924:	00005dcd 	.word	0x00005dcd
    6928:	00005c85 	.word	0x00005c85
    692c:	00005e55 	.word	0x00005e55
    6930:	00005ffd 	.word	0x00005ffd
    6934:	00006045 	.word	0x00006045
    6938:	00006081 	.word	0x00006081

0000693c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    693c:	b580      	push	{r7, lr}
    693e:	b082      	sub	sp, #8
    6940:	af00      	add	r7, sp, #0
    6942:	6078      	str	r0, [r7, #4]
    6944:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6946:	687b      	ldr	r3, [r7, #4]
    6948:	2b00      	cmp	r3, #0
    694a:	d004      	beq.n	6956 <_spi_load_regs_master+0x1a>
    694c:	683b      	ldr	r3, [r7, #0]
    694e:	2b00      	cmp	r3, #0
    6950:	d001      	beq.n	6956 <_spi_load_regs_master+0x1a>
    6952:	2301      	movs	r3, #1
    6954:	e000      	b.n	6958 <_spi_load_regs_master+0x1c>
    6956:	2300      	movs	r3, #0
    6958:	f003 0301 	and.w	r3, r3, #1
    695c:	b2db      	uxtb	r3, r3
    695e:	f640 1209 	movw	r2, #2313	; 0x909
    6962:	4915      	ldr	r1, [pc, #84]	; (69b8 <_spi_load_regs_master+0x7c>)
    6964:	4618      	mov	r0, r3
    6966:	4b15      	ldr	r3, [pc, #84]	; (69bc <_spi_load_regs_master+0x80>)
    6968:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    696a:	683b      	ldr	r3, [r7, #0]
    696c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    696e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6972:	f023 0301 	bic.w	r3, r3, #1
    6976:	4619      	mov	r1, r3
    6978:	6878      	ldr	r0, [r7, #4]
    697a:	4b11      	ldr	r3, [pc, #68]	; (69c0 <_spi_load_regs_master+0x84>)
    697c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    697e:	683b      	ldr	r3, [r7, #0]
    6980:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6982:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6986:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    698a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    698e:	4619      	mov	r1, r3
    6990:	6878      	ldr	r0, [r7, #4]
    6992:	4b0c      	ldr	r3, [pc, #48]	; (69c4 <_spi_load_regs_master+0x88>)
    6994:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6996:	683b      	ldr	r3, [r7, #0]
    6998:	7b1b      	ldrb	r3, [r3, #12]
    699a:	4619      	mov	r1, r3
    699c:	6878      	ldr	r0, [r7, #4]
    699e:	4b0a      	ldr	r3, [pc, #40]	; (69c8 <_spi_load_regs_master+0x8c>)
    69a0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    69a2:	683b      	ldr	r3, [r7, #0]
    69a4:	7b5b      	ldrb	r3, [r3, #13]
    69a6:	4619      	mov	r1, r3
    69a8:	6878      	ldr	r0, [r7, #4]
    69aa:	4b08      	ldr	r3, [pc, #32]	; (69cc <_spi_load_regs_master+0x90>)
    69ac:	4798      	blx	r3
}
    69ae:	bf00      	nop
    69b0:	3708      	adds	r7, #8
    69b2:	46bd      	mov	sp, r7
    69b4:	bd80      	pop	{r7, pc}
    69b6:	bf00      	nop
    69b8:	0000f678 	.word	0x0000f678
    69bc:	00003719 	.word	0x00003719
    69c0:	00005f09 	.word	0x00005f09
    69c4:	00006021 	.word	0x00006021
    69c8:	00006061 	.word	0x00006061
    69cc:	00006199 	.word	0x00006199

000069d0 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    69d0:	b580      	push	{r7, lr}
    69d2:	b082      	sub	sp, #8
    69d4:	af00      	add	r7, sp, #0
    69d6:	6078      	str	r0, [r7, #4]
    69d8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    69da:	687b      	ldr	r3, [r7, #4]
    69dc:	2b00      	cmp	r3, #0
    69de:	d004      	beq.n	69ea <_spi_load_regs_slave+0x1a>
    69e0:	683b      	ldr	r3, [r7, #0]
    69e2:	2b00      	cmp	r3, #0
    69e4:	d001      	beq.n	69ea <_spi_load_regs_slave+0x1a>
    69e6:	2301      	movs	r3, #1
    69e8:	e000      	b.n	69ec <_spi_load_regs_slave+0x1c>
    69ea:	2300      	movs	r3, #0
    69ec:	f003 0301 	and.w	r3, r3, #1
    69f0:	b2db      	uxtb	r3, r3
    69f2:	f640 121d 	movw	r2, #2333	; 0x91d
    69f6:	491a      	ldr	r1, [pc, #104]	; (6a60 <_spi_load_regs_slave+0x90>)
    69f8:	4618      	mov	r0, r3
    69fa:	4b1a      	ldr	r3, [pc, #104]	; (6a64 <_spi_load_regs_slave+0x94>)
    69fc:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    69fe:	683b      	ldr	r3, [r7, #0]
    6a00:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6a02:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6a06:	f023 0301 	bic.w	r3, r3, #1
    6a0a:	4619      	mov	r1, r3
    6a0c:	6878      	ldr	r0, [r7, #4]
    6a0e:	4b16      	ldr	r3, [pc, #88]	; (6a68 <_spi_load_regs_slave+0x98>)
    6a10:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6a12:	683b      	ldr	r3, [r7, #0]
    6a14:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6a16:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6a1a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6a22:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6a26:	4619      	mov	r1, r3
    6a28:	6878      	ldr	r0, [r7, #4]
    6a2a:	4b10      	ldr	r3, [pc, #64]	; (6a6c <_spi_load_regs_slave+0x9c>)
    6a2c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6a2e:	683b      	ldr	r3, [r7, #0]
    6a30:	689b      	ldr	r3, [r3, #8]
    6a32:	4619      	mov	r1, r3
    6a34:	6878      	ldr	r0, [r7, #4]
    6a36:	4b0e      	ldr	r3, [pc, #56]	; (6a70 <_spi_load_regs_slave+0xa0>)
    6a38:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6a3a:	683b      	ldr	r3, [r7, #0]
    6a3c:	7b5b      	ldrb	r3, [r3, #13]
    6a3e:	4619      	mov	r1, r3
    6a40:	6878      	ldr	r0, [r7, #4]
    6a42:	4b0c      	ldr	r3, [pc, #48]	; (6a74 <_spi_load_regs_slave+0xa4>)
    6a44:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6a46:	bf00      	nop
    6a48:	f04f 31ff 	mov.w	r1, #4294967295
    6a4c:	6878      	ldr	r0, [r7, #4]
    6a4e:	4b0a      	ldr	r3, [pc, #40]	; (6a78 <_spi_load_regs_slave+0xa8>)
    6a50:	4798      	blx	r3
    6a52:	4603      	mov	r3, r0
    6a54:	2b00      	cmp	r3, #0
    6a56:	d1f7      	bne.n	6a48 <_spi_load_regs_slave+0x78>
		;
}
    6a58:	bf00      	nop
    6a5a:	3708      	adds	r7, #8
    6a5c:	46bd      	mov	sp, r7
    6a5e:	bd80      	pop	{r7, pc}
    6a60:	0000f678 	.word	0x0000f678
    6a64:	00003719 	.word	0x00003719
    6a68:	00005f09 	.word	0x00005f09
    6a6c:	00006021 	.word	0x00006021
    6a70:	00006105 	.word	0x00006105
    6a74:	00006199 	.word	0x00006199
    6a78:	00005cf5 	.word	0x00005cf5

00006a7c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6a7c:	b580      	push	{r7, lr}
    6a7e:	b084      	sub	sp, #16
    6a80:	af00      	add	r7, sp, #0
    6a82:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6a84:	687b      	ldr	r3, [r7, #4]
    6a86:	4618      	mov	r0, r3
    6a88:	4b11      	ldr	r3, [pc, #68]	; (6ad0 <_spi_get_regs+0x54>)
    6a8a:	4798      	blx	r3
    6a8c:	4603      	mov	r3, r0
    6a8e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6a90:	2300      	movs	r3, #0
    6a92:	73fb      	strb	r3, [r7, #15]
    6a94:	e014      	b.n	6ac0 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6a96:	7bfa      	ldrb	r2, [r7, #15]
    6a98:	490e      	ldr	r1, [pc, #56]	; (6ad4 <_spi_get_regs+0x58>)
    6a9a:	4613      	mov	r3, r2
    6a9c:	011b      	lsls	r3, r3, #4
    6a9e:	4413      	add	r3, r2
    6aa0:	440b      	add	r3, r1
    6aa2:	3310      	adds	r3, #16
    6aa4:	781b      	ldrb	r3, [r3, #0]
    6aa6:	7bba      	ldrb	r2, [r7, #14]
    6aa8:	429a      	cmp	r2, r3
    6aaa:	d106      	bne.n	6aba <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6aac:	7bfa      	ldrb	r2, [r7, #15]
    6aae:	4613      	mov	r3, r2
    6ab0:	011b      	lsls	r3, r3, #4
    6ab2:	4413      	add	r3, r2
    6ab4:	4a07      	ldr	r2, [pc, #28]	; (6ad4 <_spi_get_regs+0x58>)
    6ab6:	4413      	add	r3, r2
    6ab8:	e006      	b.n	6ac8 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6aba:	7bfb      	ldrb	r3, [r7, #15]
    6abc:	3301      	adds	r3, #1
    6abe:	73fb      	strb	r3, [r7, #15]
    6ac0:	7bfb      	ldrb	r3, [r7, #15]
    6ac2:	2b01      	cmp	r3, #1
    6ac4:	d9e7      	bls.n	6a96 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6ac6:	2300      	movs	r3, #0
}
    6ac8:	4618      	mov	r0, r3
    6aca:	3710      	adds	r7, #16
    6acc:	46bd      	mov	sp, r7
    6ace:	bd80      	pop	{r7, pc}
    6ad0:	000061fd 	.word	0x000061fd
    6ad4:	0000f6b4 	.word	0x0000f6b4

00006ad8 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6ad8:	b580      	push	{r7, lr}
    6ada:	b084      	sub	sp, #16
    6adc:	af00      	add	r7, sp, #0
    6ade:	6078      	str	r0, [r7, #4]
    6ae0:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6ae2:	683b      	ldr	r3, [r7, #0]
    6ae4:	4618      	mov	r0, r3
    6ae6:	4b35      	ldr	r3, [pc, #212]	; (6bbc <_spi_m_sync_init+0xe4>)
    6ae8:	4798      	blx	r3
    6aea:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6aec:	687b      	ldr	r3, [r7, #4]
    6aee:	2b00      	cmp	r3, #0
    6af0:	d004      	beq.n	6afc <_spi_m_sync_init+0x24>
    6af2:	683b      	ldr	r3, [r7, #0]
    6af4:	2b00      	cmp	r3, #0
    6af6:	d001      	beq.n	6afc <_spi_m_sync_init+0x24>
    6af8:	2301      	movs	r3, #1
    6afa:	e000      	b.n	6afe <_spi_m_sync_init+0x26>
    6afc:	2300      	movs	r3, #0
    6afe:	f003 0301 	and.w	r3, r3, #1
    6b02:	b2db      	uxtb	r3, r3
    6b04:	f640 123f 	movw	r2, #2367	; 0x93f
    6b08:	492d      	ldr	r1, [pc, #180]	; (6bc0 <_spi_m_sync_init+0xe8>)
    6b0a:	4618      	mov	r0, r3
    6b0c:	4b2d      	ldr	r3, [pc, #180]	; (6bc4 <_spi_m_sync_init+0xec>)
    6b0e:	4798      	blx	r3

	if (regs == NULL) {
    6b10:	68fb      	ldr	r3, [r7, #12]
    6b12:	2b00      	cmp	r3, #0
    6b14:	d102      	bne.n	6b1c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6b16:	f06f 030c 	mvn.w	r3, #12
    6b1a:	e04a      	b.n	6bb2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6b1c:	2101      	movs	r1, #1
    6b1e:	6838      	ldr	r0, [r7, #0]
    6b20:	4b29      	ldr	r3, [pc, #164]	; (6bc8 <_spi_m_sync_init+0xf0>)
    6b22:	4798      	blx	r3
    6b24:	4603      	mov	r3, r0
    6b26:	f083 0301 	eor.w	r3, r3, #1
    6b2a:	b2db      	uxtb	r3, r3
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	d019      	beq.n	6b64 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6b30:	68fb      	ldr	r3, [r7, #12]
    6b32:	681b      	ldr	r3, [r3, #0]
    6b34:	f003 031c 	and.w	r3, r3, #28
    6b38:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6b3a:	2102      	movs	r1, #2
    6b3c:	6838      	ldr	r0, [r7, #0]
    6b3e:	4b23      	ldr	r3, [pc, #140]	; (6bcc <_spi_m_sync_init+0xf4>)
    6b40:	4798      	blx	r3
    6b42:	4603      	mov	r3, r0
    6b44:	2b00      	cmp	r3, #0
    6b46:	d006      	beq.n	6b56 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6b48:	6838      	ldr	r0, [r7, #0]
    6b4a:	4b21      	ldr	r3, [pc, #132]	; (6bd0 <_spi_m_sync_init+0xf8>)
    6b4c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6b4e:	2102      	movs	r1, #2
    6b50:	6838      	ldr	r0, [r7, #0]
    6b52:	4b20      	ldr	r3, [pc, #128]	; (6bd4 <_spi_m_sync_init+0xfc>)
    6b54:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6b56:	68bb      	ldr	r3, [r7, #8]
    6b58:	f043 0301 	orr.w	r3, r3, #1
    6b5c:	4619      	mov	r1, r3
    6b5e:	6838      	ldr	r0, [r7, #0]
    6b60:	4b1d      	ldr	r3, [pc, #116]	; (6bd8 <_spi_m_sync_init+0x100>)
    6b62:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6b64:	2101      	movs	r1, #1
    6b66:	6838      	ldr	r0, [r7, #0]
    6b68:	4b1a      	ldr	r3, [pc, #104]	; (6bd4 <_spi_m_sync_init+0xfc>)
    6b6a:	4798      	blx	r3

	dev->prvt = hw;
    6b6c:	687b      	ldr	r3, [r7, #4]
    6b6e:	683a      	ldr	r2, [r7, #0]
    6b70:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6b72:	68fb      	ldr	r3, [r7, #12]
    6b74:	681b      	ldr	r3, [r3, #0]
    6b76:	f003 031c 	and.w	r3, r3, #28
    6b7a:	2b08      	cmp	r3, #8
    6b7c:	d104      	bne.n	6b88 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6b7e:	68f9      	ldr	r1, [r7, #12]
    6b80:	6838      	ldr	r0, [r7, #0]
    6b82:	4b16      	ldr	r3, [pc, #88]	; (6bdc <_spi_m_sync_init+0x104>)
    6b84:	4798      	blx	r3
    6b86:	e003      	b.n	6b90 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6b88:	68f9      	ldr	r1, [r7, #12]
    6b8a:	6838      	ldr	r0, [r7, #0]
    6b8c:	4b14      	ldr	r3, [pc, #80]	; (6be0 <_spi_m_sync_init+0x108>)
    6b8e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6b90:	68fb      	ldr	r3, [r7, #12]
    6b92:	685b      	ldr	r3, [r3, #4]
    6b94:	f003 0307 	and.w	r3, r3, #7
    6b98:	2b00      	cmp	r3, #0
    6b9a:	d101      	bne.n	6ba0 <_spi_m_sync_init+0xc8>
    6b9c:	2201      	movs	r2, #1
    6b9e:	e000      	b.n	6ba2 <_spi_m_sync_init+0xca>
    6ba0:	2202      	movs	r2, #2
    6ba2:	687b      	ldr	r3, [r7, #4]
    6ba4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6ba6:	68fb      	ldr	r3, [r7, #12]
    6ba8:	89db      	ldrh	r3, [r3, #14]
    6baa:	b29a      	uxth	r2, r3
    6bac:	687b      	ldr	r3, [r7, #4]
    6bae:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6bb0:	2300      	movs	r3, #0
}
    6bb2:	4618      	mov	r0, r3
    6bb4:	3710      	adds	r7, #16
    6bb6:	46bd      	mov	sp, r7
    6bb8:	bd80      	pop	{r7, pc}
    6bba:	bf00      	nop
    6bbc:	00006a7d 	.word	0x00006a7d
    6bc0:	0000f678 	.word	0x0000f678
    6bc4:	00003719 	.word	0x00003719
    6bc8:	00005cf5 	.word	0x00005cf5
    6bcc:	00005ed9 	.word	0x00005ed9
    6bd0:	00005eb1 	.word	0x00005eb1
    6bd4:	00005cd1 	.word	0x00005cd1
    6bd8:	00005f09 	.word	0x00005f09
    6bdc:	000069d1 	.word	0x000069d1
    6be0:	0000693d 	.word	0x0000693d

00006be4 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6be4:	b580      	push	{r7, lr}
    6be6:	b082      	sub	sp, #8
    6be8:	af00      	add	r7, sp, #0
    6bea:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6bec:	bf00      	nop
    6bee:	2103      	movs	r1, #3
    6bf0:	6878      	ldr	r0, [r7, #4]
    6bf2:	4b06      	ldr	r3, [pc, #24]	; (6c0c <_spi_wait_bus_idle+0x28>)
    6bf4:	4798      	blx	r3
    6bf6:	4603      	mov	r3, r0
    6bf8:	2b00      	cmp	r3, #0
    6bfa:	d0f8      	beq.n	6bee <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6bfc:	2103      	movs	r1, #3
    6bfe:	6878      	ldr	r0, [r7, #4]
    6c00:	4b03      	ldr	r3, [pc, #12]	; (6c10 <_spi_wait_bus_idle+0x2c>)
    6c02:	4798      	blx	r3
}
    6c04:	bf00      	nop
    6c06:	3708      	adds	r7, #8
    6c08:	46bd      	mov	sp, r7
    6c0a:	bd80      	pop	{r7, pc}
    6c0c:	00005d6b 	.word	0x00005d6b
    6c10:	00005dad 	.word	0x00005dad

00006c14 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6c14:	b580      	push	{r7, lr}
    6c16:	b086      	sub	sp, #24
    6c18:	af00      	add	r7, sp, #0
    6c1a:	60f8      	str	r0, [r7, #12]
    6c1c:	60b9      	str	r1, [r7, #8]
    6c1e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6c20:	68bb      	ldr	r3, [r7, #8]
    6c22:	f003 0304 	and.w	r3, r3, #4
    6c26:	2b00      	cmp	r3, #0
    6c28:	d101      	bne.n	6c2e <_spi_rx_check_and_receive+0x1a>
		return false;
    6c2a:	2300      	movs	r3, #0
    6c2c:	e022      	b.n	6c74 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6c2e:	68f8      	ldr	r0, [r7, #12]
    6c30:	4b12      	ldr	r3, [pc, #72]	; (6c7c <_spi_rx_check_and_receive+0x68>)
    6c32:	4798      	blx	r3
    6c34:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6c36:	687b      	ldr	r3, [r7, #4]
    6c38:	685b      	ldr	r3, [r3, #4]
    6c3a:	2b00      	cmp	r3, #0
    6c3c:	d014      	beq.n	6c68 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6c3e:	687b      	ldr	r3, [r7, #4]
    6c40:	685b      	ldr	r3, [r3, #4]
    6c42:	1c59      	adds	r1, r3, #1
    6c44:	687a      	ldr	r2, [r7, #4]
    6c46:	6051      	str	r1, [r2, #4]
    6c48:	697a      	ldr	r2, [r7, #20]
    6c4a:	b2d2      	uxtb	r2, r2
    6c4c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6c4e:	687b      	ldr	r3, [r7, #4]
    6c50:	7c1b      	ldrb	r3, [r3, #16]
    6c52:	2b01      	cmp	r3, #1
    6c54:	d908      	bls.n	6c68 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6c56:	687b      	ldr	r3, [r7, #4]
    6c58:	685b      	ldr	r3, [r3, #4]
    6c5a:	1c59      	adds	r1, r3, #1
    6c5c:	687a      	ldr	r2, [r7, #4]
    6c5e:	6051      	str	r1, [r2, #4]
    6c60:	697a      	ldr	r2, [r7, #20]
    6c62:	0a12      	lsrs	r2, r2, #8
    6c64:	b2d2      	uxtb	r2, r2
    6c66:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6c68:	687b      	ldr	r3, [r7, #4]
    6c6a:	68db      	ldr	r3, [r3, #12]
    6c6c:	1c5a      	adds	r2, r3, #1
    6c6e:	687b      	ldr	r3, [r7, #4]
    6c70:	60da      	str	r2, [r3, #12]

	return true;
    6c72:	2301      	movs	r3, #1
}
    6c74:	4618      	mov	r0, r3
    6c76:	3718      	adds	r7, #24
    6c78:	46bd      	mov	sp, r7
    6c7a:	bd80      	pop	{r7, pc}
    6c7c:	00006181 	.word	0x00006181

00006c80 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6c80:	b580      	push	{r7, lr}
    6c82:	b086      	sub	sp, #24
    6c84:	af00      	add	r7, sp, #0
    6c86:	60f8      	str	r0, [r7, #12]
    6c88:	60b9      	str	r1, [r7, #8]
    6c8a:	607a      	str	r2, [r7, #4]
    6c8c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6c8e:	68bb      	ldr	r3, [r7, #8]
    6c90:	f003 0301 	and.w	r3, r3, #1
    6c94:	2b00      	cmp	r3, #0
    6c96:	d028      	beq.n	6cea <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6c98:	687b      	ldr	r3, [r7, #4]
    6c9a:	681b      	ldr	r3, [r3, #0]
    6c9c:	2b00      	cmp	r3, #0
    6c9e:	d018      	beq.n	6cd2 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6ca0:	687b      	ldr	r3, [r7, #4]
    6ca2:	681b      	ldr	r3, [r3, #0]
    6ca4:	1c59      	adds	r1, r3, #1
    6ca6:	687a      	ldr	r2, [r7, #4]
    6ca8:	6011      	str	r1, [r2, #0]
    6caa:	781b      	ldrb	r3, [r3, #0]
    6cac:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6cae:	687b      	ldr	r3, [r7, #4]
    6cb0:	7c1b      	ldrb	r3, [r3, #16]
    6cb2:	2b01      	cmp	r3, #1
    6cb4:	d90f      	bls.n	6cd6 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6cb6:	687b      	ldr	r3, [r7, #4]
    6cb8:	681b      	ldr	r3, [r3, #0]
    6cba:	781b      	ldrb	r3, [r3, #0]
    6cbc:	021b      	lsls	r3, r3, #8
    6cbe:	461a      	mov	r2, r3
    6cc0:	697b      	ldr	r3, [r7, #20]
    6cc2:	4313      	orrs	r3, r2
    6cc4:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	681b      	ldr	r3, [r3, #0]
    6cca:	1c5a      	adds	r2, r3, #1
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	601a      	str	r2, [r3, #0]
    6cd0:	e001      	b.n	6cd6 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6cd2:	887b      	ldrh	r3, [r7, #2]
    6cd4:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6cd6:	687b      	ldr	r3, [r7, #4]
    6cd8:	689b      	ldr	r3, [r3, #8]
    6cda:	1c5a      	adds	r2, r3, #1
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6ce0:	6979      	ldr	r1, [r7, #20]
    6ce2:	68f8      	ldr	r0, [r7, #12]
    6ce4:	4b03      	ldr	r3, [pc, #12]	; (6cf4 <_spi_tx_check_and_send+0x74>)
    6ce6:	4798      	blx	r3
    6ce8:	e000      	b.n	6cec <_spi_tx_check_and_send+0x6c>
		return;
    6cea:	bf00      	nop
}
    6cec:	3718      	adds	r7, #24
    6cee:	46bd      	mov	sp, r7
    6cf0:	bd80      	pop	{r7, pc}
    6cf2:	bf00      	nop
    6cf4:	00006165 	.word	0x00006165

00006cf8 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6cf8:	b580      	push	{r7, lr}
    6cfa:	b082      	sub	sp, #8
    6cfc:	af00      	add	r7, sp, #0
    6cfe:	6078      	str	r0, [r7, #4]
    6d00:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6d02:	687b      	ldr	r3, [r7, #4]
    6d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6d08:	2b00      	cmp	r3, #0
    6d0a:	d00b      	beq.n	6d24 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6d0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6d10:	6838      	ldr	r0, [r7, #0]
    6d12:	4b07      	ldr	r3, [pc, #28]	; (6d30 <_spi_err_check+0x38>)
    6d14:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6d16:	2180      	movs	r1, #128	; 0x80
    6d18:	6838      	ldr	r0, [r7, #0]
    6d1a:	4b06      	ldr	r3, [pc, #24]	; (6d34 <_spi_err_check+0x3c>)
    6d1c:	4798      	blx	r3
		return ERR_OVERFLOW;
    6d1e:	f06f 0312 	mvn.w	r3, #18
    6d22:	e000      	b.n	6d26 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6d24:	2300      	movs	r3, #0
}
    6d26:	4618      	mov	r0, r3
    6d28:	3708      	adds	r7, #8
    6d2a:	46bd      	mov	sp, r7
    6d2c:	bd80      	pop	{r7, pc}
    6d2e:	bf00      	nop
    6d30:	000061b9 	.word	0x000061b9
    6d34:	00005dad 	.word	0x00005dad

00006d38 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6d38:	b590      	push	{r4, r7, lr}
    6d3a:	b08b      	sub	sp, #44	; 0x2c
    6d3c:	af00      	add	r7, sp, #0
    6d3e:	6078      	str	r0, [r7, #4]
    6d40:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6d42:	687b      	ldr	r3, [r7, #4]
    6d44:	681b      	ldr	r3, [r3, #0]
    6d46:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6d48:	2300      	movs	r3, #0
    6d4a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6d4c:	683b      	ldr	r3, [r7, #0]
    6d4e:	681b      	ldr	r3, [r3, #0]
    6d50:	60bb      	str	r3, [r7, #8]
    6d52:	683b      	ldr	r3, [r7, #0]
    6d54:	685b      	ldr	r3, [r3, #4]
    6d56:	60fb      	str	r3, [r7, #12]
    6d58:	2300      	movs	r3, #0
    6d5a:	613b      	str	r3, [r7, #16]
    6d5c:	2300      	movs	r3, #0
    6d5e:	617b      	str	r3, [r7, #20]
    6d60:	687b      	ldr	r3, [r7, #4]
    6d62:	791b      	ldrb	r3, [r3, #4]
    6d64:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6d66:	687b      	ldr	r3, [r7, #4]
    6d68:	2b00      	cmp	r3, #0
    6d6a:	d004      	beq.n	6d76 <_spi_m_sync_trans+0x3e>
    6d6c:	6a3b      	ldr	r3, [r7, #32]
    6d6e:	2b00      	cmp	r3, #0
    6d70:	d001      	beq.n	6d76 <_spi_m_sync_trans+0x3e>
    6d72:	2301      	movs	r3, #1
    6d74:	e000      	b.n	6d78 <_spi_m_sync_trans+0x40>
    6d76:	2300      	movs	r3, #0
    6d78:	f003 0301 	and.w	r3, r3, #1
    6d7c:	b2db      	uxtb	r3, r3
    6d7e:	f640 22a3 	movw	r2, #2723	; 0xaa3
    6d82:	492b      	ldr	r1, [pc, #172]	; (6e30 <_spi_m_sync_trans+0xf8>)
    6d84:	4618      	mov	r0, r3
    6d86:	4b2b      	ldr	r3, [pc, #172]	; (6e34 <_spi_m_sync_trans+0xfc>)
    6d88:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6d8a:	2107      	movs	r1, #7
    6d8c:	6a38      	ldr	r0, [r7, #32]
    6d8e:	4b2a      	ldr	r3, [pc, #168]	; (6e38 <_spi_m_sync_trans+0x100>)
    6d90:	4798      	blx	r3
    6d92:	4603      	mov	r3, r0
    6d94:	2b00      	cmp	r3, #0
    6d96:	d002      	beq.n	6d9e <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6d98:	f06f 0303 	mvn.w	r3, #3
    6d9c:	e043      	b.n	6e26 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6d9e:	6a38      	ldr	r0, [r7, #32]
    6da0:	4b26      	ldr	r3, [pc, #152]	; (6e3c <_spi_m_sync_trans+0x104>)
    6da2:	4798      	blx	r3
    6da4:	4603      	mov	r3, r0
    6da6:	f083 0301 	eor.w	r3, r3, #1
    6daa:	b2db      	uxtb	r3, r3
    6dac:	2b00      	cmp	r3, #0
    6dae:	d002      	beq.n	6db6 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6db0:	f06f 0313 	mvn.w	r3, #19
    6db4:	e037      	b.n	6e26 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6db6:	6a38      	ldr	r0, [r7, #32]
    6db8:	4b21      	ldr	r3, [pc, #132]	; (6e40 <_spi_m_sync_trans+0x108>)
    6dba:	4798      	blx	r3
    6dbc:	4603      	mov	r3, r0
    6dbe:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6dc0:	f107 0308 	add.w	r3, r7, #8
    6dc4:	461a      	mov	r2, r3
    6dc6:	69f9      	ldr	r1, [r7, #28]
    6dc8:	6a38      	ldr	r0, [r7, #32]
    6dca:	4b1e      	ldr	r3, [pc, #120]	; (6e44 <_spi_m_sync_trans+0x10c>)
    6dcc:	4798      	blx	r3
    6dce:	4603      	mov	r3, r0
    6dd0:	f083 0301 	eor.w	r3, r3, #1
    6dd4:	b2db      	uxtb	r3, r3
    6dd6:	2b00      	cmp	r3, #0
    6dd8:	d00b      	beq.n	6df2 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6dda:	697a      	ldr	r2, [r7, #20]
    6ddc:	693b      	ldr	r3, [r7, #16]
    6dde:	429a      	cmp	r2, r3
    6de0:	d307      	bcc.n	6df2 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6de2:	687b      	ldr	r3, [r7, #4]
    6de4:	88db      	ldrh	r3, [r3, #6]
    6de6:	f107 0208 	add.w	r2, r7, #8
    6dea:	69f9      	ldr	r1, [r7, #28]
    6dec:	6a38      	ldr	r0, [r7, #32]
    6dee:	4c16      	ldr	r4, [pc, #88]	; (6e48 <_spi_m_sync_trans+0x110>)
    6df0:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6df2:	6a39      	ldr	r1, [r7, #32]
    6df4:	69f8      	ldr	r0, [r7, #28]
    6df6:	4b15      	ldr	r3, [pc, #84]	; (6e4c <_spi_m_sync_trans+0x114>)
    6df8:	4798      	blx	r3
    6dfa:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6dfe:	2b00      	cmp	r3, #0
    6e00:	db0c      	blt.n	6e1c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6e02:	693a      	ldr	r2, [r7, #16]
    6e04:	683b      	ldr	r3, [r7, #0]
    6e06:	689b      	ldr	r3, [r3, #8]
    6e08:	429a      	cmp	r2, r3
    6e0a:	d3d4      	bcc.n	6db6 <_spi_m_sync_trans+0x7e>
    6e0c:	697a      	ldr	r2, [r7, #20]
    6e0e:	683b      	ldr	r3, [r7, #0]
    6e10:	689b      	ldr	r3, [r3, #8]
    6e12:	429a      	cmp	r2, r3
    6e14:	d3cf      	bcc.n	6db6 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6e16:	693b      	ldr	r3, [r7, #16]
    6e18:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6e1a:	e000      	b.n	6e1e <_spi_m_sync_trans+0xe6>
			break;
    6e1c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6e1e:	6a38      	ldr	r0, [r7, #32]
    6e20:	4b0b      	ldr	r3, [pc, #44]	; (6e50 <_spi_m_sync_trans+0x118>)
    6e22:	4798      	blx	r3

	return rc;
    6e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6e26:	4618      	mov	r0, r3
    6e28:	372c      	adds	r7, #44	; 0x2c
    6e2a:	46bd      	mov	sp, r7
    6e2c:	bd90      	pop	{r4, r7, pc}
    6e2e:	bf00      	nop
    6e30:	0000f678 	.word	0x0000f678
    6e34:	00003719 	.word	0x00003719
    6e38:	00005cf5 	.word	0x00005cf5
    6e3c:	00005e79 	.word	0x00005e79
    6e40:	00005d93 	.word	0x00005d93
    6e44:	00006c15 	.word	0x00006c15
    6e48:	00006c81 	.word	0x00006c81
    6e4c:	00006cf9 	.word	0x00006cf9
    6e50:	00006be5 	.word	0x00006be5

00006e54 <__NVIC_EnableIRQ>:
{
    6e54:	b480      	push	{r7}
    6e56:	b083      	sub	sp, #12
    6e58:	af00      	add	r7, sp, #0
    6e5a:	4603      	mov	r3, r0
    6e5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6e62:	2b00      	cmp	r3, #0
    6e64:	db0b      	blt.n	6e7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e66:	4909      	ldr	r1, [pc, #36]	; (6e8c <__NVIC_EnableIRQ+0x38>)
    6e68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6e6c:	095b      	lsrs	r3, r3, #5
    6e6e:	88fa      	ldrh	r2, [r7, #6]
    6e70:	f002 021f 	and.w	r2, r2, #31
    6e74:	2001      	movs	r0, #1
    6e76:	fa00 f202 	lsl.w	r2, r0, r2
    6e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e7e:	bf00      	nop
    6e80:	370c      	adds	r7, #12
    6e82:	46bd      	mov	sp, r7
    6e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e88:	4770      	bx	lr
    6e8a:	bf00      	nop
    6e8c:	e000e100 	.word	0xe000e100

00006e90 <__NVIC_DisableIRQ>:
{
    6e90:	b480      	push	{r7}
    6e92:	b083      	sub	sp, #12
    6e94:	af00      	add	r7, sp, #0
    6e96:	4603      	mov	r3, r0
    6e98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6e9e:	2b00      	cmp	r3, #0
    6ea0:	db10      	blt.n	6ec4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ea2:	490b      	ldr	r1, [pc, #44]	; (6ed0 <__NVIC_DisableIRQ+0x40>)
    6ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6ea8:	095b      	lsrs	r3, r3, #5
    6eaa:	88fa      	ldrh	r2, [r7, #6]
    6eac:	f002 021f 	and.w	r2, r2, #31
    6eb0:	2001      	movs	r0, #1
    6eb2:	fa00 f202 	lsl.w	r2, r0, r2
    6eb6:	3320      	adds	r3, #32
    6eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6ebc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6ec0:	f3bf 8f6f 	isb	sy
}
    6ec4:	bf00      	nop
    6ec6:	370c      	adds	r7, #12
    6ec8:	46bd      	mov	sp, r7
    6eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ece:	4770      	bx	lr
    6ed0:	e000e100 	.word	0xe000e100

00006ed4 <__NVIC_ClearPendingIRQ>:
{
    6ed4:	b480      	push	{r7}
    6ed6:	b083      	sub	sp, #12
    6ed8:	af00      	add	r7, sp, #0
    6eda:	4603      	mov	r3, r0
    6edc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6ee2:	2b00      	cmp	r3, #0
    6ee4:	db0c      	blt.n	6f00 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ee6:	4909      	ldr	r1, [pc, #36]	; (6f0c <__NVIC_ClearPendingIRQ+0x38>)
    6ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6eec:	095b      	lsrs	r3, r3, #5
    6eee:	88fa      	ldrh	r2, [r7, #6]
    6ef0:	f002 021f 	and.w	r2, r2, #31
    6ef4:	2001      	movs	r0, #1
    6ef6:	fa00 f202 	lsl.w	r2, r0, r2
    6efa:	3360      	adds	r3, #96	; 0x60
    6efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f00:	bf00      	nop
    6f02:	370c      	adds	r7, #12
    6f04:	46bd      	mov	sp, r7
    6f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f0a:	4770      	bx	lr
    6f0c:	e000e100 	.word	0xe000e100

00006f10 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6f10:	b480      	push	{r7}
    6f12:	b083      	sub	sp, #12
    6f14:	af00      	add	r7, sp, #0
    6f16:	6078      	str	r0, [r7, #4]
    6f18:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    6f1a:	bf00      	nop
    6f1c:	687b      	ldr	r3, [r7, #4]
    6f1e:	689a      	ldr	r2, [r3, #8]
    6f20:	683b      	ldr	r3, [r7, #0]
    6f22:	4013      	ands	r3, r2
    6f24:	2b00      	cmp	r3, #0
    6f26:	d1f9      	bne.n	6f1c <hri_tcc_wait_for_sync+0xc>
	};
}
    6f28:	bf00      	nop
    6f2a:	370c      	adds	r7, #12
    6f2c:	46bd      	mov	sp, r7
    6f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f32:	4770      	bx	lr

00006f34 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6f34:	b480      	push	{r7}
    6f36:	b083      	sub	sp, #12
    6f38:	af00      	add	r7, sp, #0
    6f3a:	6078      	str	r0, [r7, #4]
    6f3c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    6f3e:	687b      	ldr	r3, [r7, #4]
    6f40:	689a      	ldr	r2, [r3, #8]
    6f42:	683b      	ldr	r3, [r7, #0]
    6f44:	4013      	ands	r3, r2
    6f46:	2b00      	cmp	r3, #0
    6f48:	bf14      	ite	ne
    6f4a:	2301      	movne	r3, #1
    6f4c:	2300      	moveq	r3, #0
    6f4e:	b2db      	uxtb	r3, r3
}
    6f50:	4618      	mov	r0, r3
    6f52:	370c      	adds	r7, #12
    6f54:	46bd      	mov	sp, r7
    6f56:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f5a:	4770      	bx	lr

00006f5c <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    6f5c:	b480      	push	{r7}
    6f5e:	b083      	sub	sp, #12
    6f60:	af00      	add	r7, sp, #0
    6f62:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    6f64:	687b      	ldr	r3, [r7, #4]
    6f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6f68:	f003 0301 	and.w	r3, r3, #1
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	bf14      	ite	ne
    6f70:	2301      	movne	r3, #1
    6f72:	2300      	moveq	r3, #0
    6f74:	b2db      	uxtb	r3, r3
}
    6f76:	4618      	mov	r0, r3
    6f78:	370c      	adds	r7, #12
    6f7a:	46bd      	mov	sp, r7
    6f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f80:	4770      	bx	lr

00006f82 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    6f82:	b480      	push	{r7}
    6f84:	b083      	sub	sp, #12
    6f86:	af00      	add	r7, sp, #0
    6f88:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    6f8a:	687b      	ldr	r3, [r7, #4]
    6f8c:	2201      	movs	r2, #1
    6f8e:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6f90:	bf00      	nop
    6f92:	370c      	adds	r7, #12
    6f94:	46bd      	mov	sp, r7
    6f96:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f9a:	4770      	bx	lr

00006f9c <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    6f9c:	b480      	push	{r7}
    6f9e:	b083      	sub	sp, #12
    6fa0:	af00      	add	r7, sp, #0
    6fa2:	6078      	str	r0, [r7, #4]
    6fa4:	460b      	mov	r3, r1
    6fa6:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    6fa8:	687b      	ldr	r3, [r7, #4]
    6faa:	78fa      	ldrb	r2, [r7, #3]
    6fac:	715a      	strb	r2, [r3, #5]
}
    6fae:	bf00      	nop
    6fb0:	370c      	adds	r7, #12
    6fb2:	46bd      	mov	sp, r7
    6fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fb8:	4770      	bx	lr

00006fba <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    6fba:	b480      	push	{r7}
    6fbc:	b083      	sub	sp, #12
    6fbe:	af00      	add	r7, sp, #0
    6fc0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	2201      	movs	r2, #1
    6fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
    6fc8:	bf00      	nop
    6fca:	370c      	adds	r7, #12
    6fcc:	46bd      	mov	sp, r7
    6fce:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fd2:	4770      	bx	lr

00006fd4 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    6fd4:	b580      	push	{r7, lr}
    6fd6:	b082      	sub	sp, #8
    6fd8:	af00      	add	r7, sp, #0
    6fda:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    6fdc:	687b      	ldr	r3, [r7, #4]
    6fde:	681b      	ldr	r3, [r3, #0]
    6fe0:	f043 0201 	orr.w	r2, r3, #1
    6fe4:	687b      	ldr	r3, [r7, #4]
    6fe6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6fe8:	2101      	movs	r1, #1
    6fea:	6878      	ldr	r0, [r7, #4]
    6fec:	4b02      	ldr	r3, [pc, #8]	; (6ff8 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    6fee:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6ff0:	bf00      	nop
    6ff2:	3708      	adds	r7, #8
    6ff4:	46bd      	mov	sp, r7
    6ff6:	bd80      	pop	{r7, pc}
    6ff8:	00006f11 	.word	0x00006f11

00006ffc <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6ffc:	b580      	push	{r7, lr}
    6ffe:	b082      	sub	sp, #8
    7000:	af00      	add	r7, sp, #0
    7002:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7004:	687b      	ldr	r3, [r7, #4]
    7006:	681b      	ldr	r3, [r3, #0]
    7008:	f043 0202 	orr.w	r2, r3, #2
    700c:	687b      	ldr	r3, [r7, #4]
    700e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7010:	2103      	movs	r1, #3
    7012:	6878      	ldr	r0, [r7, #4]
    7014:	4b02      	ldr	r3, [pc, #8]	; (7020 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7016:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7018:	bf00      	nop
    701a:	3708      	adds	r7, #8
    701c:	46bd      	mov	sp, r7
    701e:	bd80      	pop	{r7, pc}
    7020:	00006f11 	.word	0x00006f11

00007024 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7024:	b580      	push	{r7, lr}
    7026:	b084      	sub	sp, #16
    7028:	af00      	add	r7, sp, #0
    702a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    702c:	2103      	movs	r1, #3
    702e:	6878      	ldr	r0, [r7, #4]
    7030:	4b09      	ldr	r3, [pc, #36]	; (7058 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7032:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7034:	687b      	ldr	r3, [r7, #4]
    7036:	681b      	ldr	r3, [r3, #0]
    7038:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    703a:	68fb      	ldr	r3, [r7, #12]
    703c:	085b      	lsrs	r3, r3, #1
    703e:	f003 0301 	and.w	r3, r3, #1
    7042:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7044:	68fb      	ldr	r3, [r7, #12]
    7046:	2b00      	cmp	r3, #0
    7048:	bf14      	ite	ne
    704a:	2301      	movne	r3, #1
    704c:	2300      	moveq	r3, #0
    704e:	b2db      	uxtb	r3, r3
}
    7050:	4618      	mov	r0, r3
    7052:	3710      	adds	r7, #16
    7054:	46bd      	mov	sp, r7
    7056:	bd80      	pop	{r7, pc}
    7058:	00006f11 	.word	0x00006f11

0000705c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    705c:	b580      	push	{r7, lr}
    705e:	b082      	sub	sp, #8
    7060:	af00      	add	r7, sp, #0
    7062:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7064:	687b      	ldr	r3, [r7, #4]
    7066:	681b      	ldr	r3, [r3, #0]
    7068:	f023 0202 	bic.w	r2, r3, #2
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7070:	2103      	movs	r1, #3
    7072:	6878      	ldr	r0, [r7, #4]
    7074:	4b02      	ldr	r3, [pc, #8]	; (7080 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7076:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7078:	bf00      	nop
    707a:	3708      	adds	r7, #8
    707c:	46bd      	mov	sp, r7
    707e:	bd80      	pop	{r7, pc}
    7080:	00006f11 	.word	0x00006f11

00007084 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7084:	b580      	push	{r7, lr}
    7086:	b084      	sub	sp, #16
    7088:	af00      	add	r7, sp, #0
    708a:	6078      	str	r0, [r7, #4]
    708c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    708e:	2103      	movs	r1, #3
    7090:	6878      	ldr	r0, [r7, #4]
    7092:	4b07      	ldr	r3, [pc, #28]	; (70b0 <hri_tcc_get_CTRLA_reg+0x2c>)
    7094:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7096:	687b      	ldr	r3, [r7, #4]
    7098:	681b      	ldr	r3, [r3, #0]
    709a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    709c:	68fa      	ldr	r2, [r7, #12]
    709e:	683b      	ldr	r3, [r7, #0]
    70a0:	4013      	ands	r3, r2
    70a2:	60fb      	str	r3, [r7, #12]
	return tmp;
    70a4:	68fb      	ldr	r3, [r7, #12]
}
    70a6:	4618      	mov	r0, r3
    70a8:	3710      	adds	r7, #16
    70aa:	46bd      	mov	sp, r7
    70ac:	bd80      	pop	{r7, pc}
    70ae:	bf00      	nop
    70b0:	00006f11 	.word	0x00006f11

000070b4 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    70b4:	b580      	push	{r7, lr}
    70b6:	b082      	sub	sp, #8
    70b8:	af00      	add	r7, sp, #0
    70ba:	6078      	str	r0, [r7, #4]
    70bc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    70be:	687b      	ldr	r3, [r7, #4]
    70c0:	683a      	ldr	r2, [r7, #0]
    70c2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    70c4:	2103      	movs	r1, #3
    70c6:	6878      	ldr	r0, [r7, #4]
    70c8:	4b02      	ldr	r3, [pc, #8]	; (70d4 <hri_tcc_write_CTRLA_reg+0x20>)
    70ca:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    70cc:	bf00      	nop
    70ce:	3708      	adds	r7, #8
    70d0:	46bd      	mov	sp, r7
    70d2:	bd80      	pop	{r7, pc}
    70d4:	00006f11 	.word	0x00006f11

000070d8 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    70d8:	b480      	push	{r7}
    70da:	b083      	sub	sp, #12
    70dc:	af00      	add	r7, sp, #0
    70de:	6078      	str	r0, [r7, #4]
    70e0:	460b      	mov	r3, r1
    70e2:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	78fa      	ldrb	r2, [r7, #3]
    70e8:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    70ea:	bf00      	nop
    70ec:	370c      	adds	r7, #12
    70ee:	46bd      	mov	sp, r7
    70f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    70f4:	4770      	bx	lr

000070f6 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    70f6:	b480      	push	{r7}
    70f8:	b083      	sub	sp, #12
    70fa:	af00      	add	r7, sp, #0
    70fc:	6078      	str	r0, [r7, #4]
    70fe:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7100:	687b      	ldr	r3, [r7, #4]
    7102:	683a      	ldr	r2, [r7, #0]
    7104:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7106:	bf00      	nop
    7108:	370c      	adds	r7, #12
    710a:	46bd      	mov	sp, r7
    710c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7110:	4770      	bx	lr
	...

00007114 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7114:	b580      	push	{r7, lr}
    7116:	b082      	sub	sp, #8
    7118:	af00      	add	r7, sp, #0
    711a:	6078      	str	r0, [r7, #4]
    711c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    711e:	687b      	ldr	r3, [r7, #4]
    7120:	683a      	ldr	r2, [r7, #0]
    7122:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7124:	2180      	movs	r1, #128	; 0x80
    7126:	6878      	ldr	r0, [r7, #4]
    7128:	4b02      	ldr	r3, [pc, #8]	; (7134 <hri_tcc_write_PER_reg+0x20>)
    712a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    712c:	bf00      	nop
    712e:	3708      	adds	r7, #8
    7130:	46bd      	mov	sp, r7
    7132:	bd80      	pop	{r7, pc}
    7134:	00006f11 	.word	0x00006f11

00007138 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7138:	b580      	push	{r7, lr}
    713a:	b082      	sub	sp, #8
    713c:	af00      	add	r7, sp, #0
    713e:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7140:	2180      	movs	r1, #128	; 0x80
    7142:	6878      	ldr	r0, [r7, #4]
    7144:	4b03      	ldr	r3, [pc, #12]	; (7154 <hri_tcc_read_PER_reg+0x1c>)
    7146:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7148:	687b      	ldr	r3, [r7, #4]
    714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    714c:	4618      	mov	r0, r3
    714e:	3708      	adds	r7, #8
    7150:	46bd      	mov	sp, r7
    7152:	bd80      	pop	{r7, pc}
    7154:	00006f11 	.word	0x00006f11

00007158 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7158:	b480      	push	{r7}
    715a:	b083      	sub	sp, #12
    715c:	af00      	add	r7, sp, #0
    715e:	6078      	str	r0, [r7, #4]
    7160:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7162:	687b      	ldr	r3, [r7, #4]
    7164:	4a09      	ldr	r2, [pc, #36]	; (718c <_tcc_init_irq_param+0x34>)
    7166:	4293      	cmp	r3, r2
    7168:	d102      	bne.n	7170 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    716a:	4a09      	ldr	r2, [pc, #36]	; (7190 <_tcc_init_irq_param+0x38>)
    716c:	683b      	ldr	r3, [r7, #0]
    716e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7170:	687b      	ldr	r3, [r7, #4]
    7172:	4a08      	ldr	r2, [pc, #32]	; (7194 <_tcc_init_irq_param+0x3c>)
    7174:	4293      	cmp	r3, r2
    7176:	d102      	bne.n	717e <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7178:	4a07      	ldr	r2, [pc, #28]	; (7198 <_tcc_init_irq_param+0x40>)
    717a:	683b      	ldr	r3, [r7, #0]
    717c:	6013      	str	r3, [r2, #0]
	}
}
    717e:	bf00      	nop
    7180:	370c      	adds	r7, #12
    7182:	46bd      	mov	sp, r7
    7184:	f85d 7b04 	ldr.w	r7, [sp], #4
    7188:	4770      	bx	lr
    718a:	bf00      	nop
    718c:	41016000 	.word	0x41016000
    7190:	20002120 	.word	0x20002120
    7194:	41018000 	.word	0x41018000
    7198:	20002124 	.word	0x20002124

0000719c <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    719c:	b580      	push	{r7, lr}
    719e:	b084      	sub	sp, #16
    71a0:	af00      	add	r7, sp, #0
    71a2:	6078      	str	r0, [r7, #4]
    71a4:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    71a6:	6838      	ldr	r0, [r7, #0]
    71a8:	4b33      	ldr	r3, [pc, #204]	; (7278 <_tcc_timer_init+0xdc>)
    71aa:	4798      	blx	r3
    71ac:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    71ae:	68fb      	ldr	r3, [r7, #12]
    71b0:	2b00      	cmp	r3, #0
    71b2:	d102      	bne.n	71ba <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    71b4:	f06f 0309 	mvn.w	r3, #9
    71b8:	e05a      	b.n	7270 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    71ba:	687b      	ldr	r3, [r7, #4]
    71bc:	683a      	ldr	r2, [r7, #0]
    71be:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    71c0:	2101      	movs	r1, #1
    71c2:	6838      	ldr	r0, [r7, #0]
    71c4:	4b2d      	ldr	r3, [pc, #180]	; (727c <_tcc_timer_init+0xe0>)
    71c6:	4798      	blx	r3
    71c8:	4603      	mov	r3, r0
    71ca:	f083 0301 	eor.w	r3, r3, #1
    71ce:	b2db      	uxtb	r3, r3
    71d0:	2b00      	cmp	r3, #0
    71d2:	d011      	beq.n	71f8 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    71d4:	2102      	movs	r1, #2
    71d6:	6838      	ldr	r0, [r7, #0]
    71d8:	4b29      	ldr	r3, [pc, #164]	; (7280 <_tcc_timer_init+0xe4>)
    71da:	4798      	blx	r3
    71dc:	4603      	mov	r3, r0
    71de:	2b00      	cmp	r3, #0
    71e0:	d006      	beq.n	71f0 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    71e2:	6838      	ldr	r0, [r7, #0]
    71e4:	4b27      	ldr	r3, [pc, #156]	; (7284 <_tcc_timer_init+0xe8>)
    71e6:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    71e8:	2102      	movs	r1, #2
    71ea:	6838      	ldr	r0, [r7, #0]
    71ec:	4b26      	ldr	r3, [pc, #152]	; (7288 <_tcc_timer_init+0xec>)
    71ee:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    71f0:	2101      	movs	r1, #1
    71f2:	6838      	ldr	r0, [r7, #0]
    71f4:	4b25      	ldr	r3, [pc, #148]	; (728c <_tcc_timer_init+0xf0>)
    71f6:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    71f8:	2101      	movs	r1, #1
    71fa:	6838      	ldr	r0, [r7, #0]
    71fc:	4b22      	ldr	r3, [pc, #136]	; (7288 <_tcc_timer_init+0xec>)
    71fe:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7200:	68fb      	ldr	r3, [r7, #12]
    7202:	689b      	ldr	r3, [r3, #8]
    7204:	4619      	mov	r1, r3
    7206:	6838      	ldr	r0, [r7, #0]
    7208:	4b20      	ldr	r3, [pc, #128]	; (728c <_tcc_timer_init+0xf0>)
    720a:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    720c:	68fb      	ldr	r3, [r7, #12]
    720e:	7b1b      	ldrb	r3, [r3, #12]
    7210:	4619      	mov	r1, r3
    7212:	6838      	ldr	r0, [r7, #0]
    7214:	4b1e      	ldr	r3, [pc, #120]	; (7290 <_tcc_timer_init+0xf4>)
    7216:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7218:	68fb      	ldr	r3, [r7, #12]
    721a:	7b5b      	ldrb	r3, [r3, #13]
    721c:	4619      	mov	r1, r3
    721e:	6838      	ldr	r0, [r7, #0]
    7220:	4b1c      	ldr	r3, [pc, #112]	; (7294 <_tcc_timer_init+0xf8>)
    7222:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7224:	68fb      	ldr	r3, [r7, #12]
    7226:	691b      	ldr	r3, [r3, #16]
    7228:	4619      	mov	r1, r3
    722a:	6838      	ldr	r0, [r7, #0]
    722c:	4b1a      	ldr	r3, [pc, #104]	; (7298 <_tcc_timer_init+0xfc>)
    722e:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7230:	68fb      	ldr	r3, [r7, #12]
    7232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7234:	4619      	mov	r1, r3
    7236:	6838      	ldr	r0, [r7, #0]
    7238:	4b18      	ldr	r3, [pc, #96]	; (729c <_tcc_timer_init+0x100>)
    723a:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    723c:	6838      	ldr	r0, [r7, #0]
    723e:	4b18      	ldr	r3, [pc, #96]	; (72a0 <_tcc_timer_init+0x104>)
    7240:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7242:	6879      	ldr	r1, [r7, #4]
    7244:	6838      	ldr	r0, [r7, #0]
    7246:	4b17      	ldr	r3, [pc, #92]	; (72a4 <_tcc_timer_init+0x108>)
    7248:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    724a:	68fb      	ldr	r3, [r7, #12]
    724c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7250:	4618      	mov	r0, r3
    7252:	4b15      	ldr	r3, [pc, #84]	; (72a8 <_tcc_timer_init+0x10c>)
    7254:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7256:	68fb      	ldr	r3, [r7, #12]
    7258:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    725c:	4618      	mov	r0, r3
    725e:	4b13      	ldr	r3, [pc, #76]	; (72ac <_tcc_timer_init+0x110>)
    7260:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7262:	68fb      	ldr	r3, [r7, #12]
    7264:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7268:	4618      	mov	r0, r3
    726a:	4b11      	ldr	r3, [pc, #68]	; (72b0 <_tcc_timer_init+0x114>)
    726c:	4798      	blx	r3

	return ERR_NONE;
    726e:	2300      	movs	r3, #0
}
    7270:	4618      	mov	r0, r3
    7272:	3710      	adds	r7, #16
    7274:	46bd      	mov	sp, r7
    7276:	bd80      	pop	{r7, pc}
    7278:	00007465 	.word	0x00007465
    727c:	00006f35 	.word	0x00006f35
    7280:	00007085 	.word	0x00007085
    7284:	0000705d 	.word	0x0000705d
    7288:	00006f11 	.word	0x00006f11
    728c:	000070b5 	.word	0x000070b5
    7290:	00006f9d 	.word	0x00006f9d
    7294:	000070d9 	.word	0x000070d9
    7298:	000070f7 	.word	0x000070f7
    729c:	00007115 	.word	0x00007115
    72a0:	00006fbb 	.word	0x00006fbb
    72a4:	00007159 	.word	0x00007159
    72a8:	00006e91 	.word	0x00006e91
    72ac:	00006ed5 	.word	0x00006ed5
    72b0:	00006e55 	.word	0x00006e55

000072b4 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    72b4:	b580      	push	{r7, lr}
    72b6:	b084      	sub	sp, #16
    72b8:	af00      	add	r7, sp, #0
    72ba:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    72bc:	687b      	ldr	r3, [r7, #4]
    72be:	68db      	ldr	r3, [r3, #12]
    72c0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    72c2:	68f8      	ldr	r0, [r7, #12]
    72c4:	4b0a      	ldr	r3, [pc, #40]	; (72f0 <_tcc_timer_deinit+0x3c>)
    72c6:	4798      	blx	r3
    72c8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    72ca:	68bb      	ldr	r3, [r7, #8]
    72cc:	2b00      	cmp	r3, #0
    72ce:	d00b      	beq.n	72e8 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    72d0:	68bb      	ldr	r3, [r7, #8]
    72d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    72d6:	4618      	mov	r0, r3
    72d8:	4b06      	ldr	r3, [pc, #24]	; (72f4 <_tcc_timer_deinit+0x40>)
    72da:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    72dc:	68f8      	ldr	r0, [r7, #12]
    72de:	4b06      	ldr	r3, [pc, #24]	; (72f8 <_tcc_timer_deinit+0x44>)
    72e0:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    72e2:	68f8      	ldr	r0, [r7, #12]
    72e4:	4b05      	ldr	r3, [pc, #20]	; (72fc <_tcc_timer_deinit+0x48>)
    72e6:	4798      	blx	r3
	}
}
    72e8:	bf00      	nop
    72ea:	3710      	adds	r7, #16
    72ec:	46bd      	mov	sp, r7
    72ee:	bd80      	pop	{r7, pc}
    72f0:	00007465 	.word	0x00007465
    72f4:	00006e91 	.word	0x00006e91
    72f8:	0000705d 	.word	0x0000705d
    72fc:	00006fd5 	.word	0x00006fd5

00007300 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7300:	b580      	push	{r7, lr}
    7302:	b082      	sub	sp, #8
    7304:	af00      	add	r7, sp, #0
    7306:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	68db      	ldr	r3, [r3, #12]
    730c:	4618      	mov	r0, r3
    730e:	4b03      	ldr	r3, [pc, #12]	; (731c <_tcc_timer_start+0x1c>)
    7310:	4798      	blx	r3
}
    7312:	bf00      	nop
    7314:	3708      	adds	r7, #8
    7316:	46bd      	mov	sp, r7
    7318:	bd80      	pop	{r7, pc}
    731a:	bf00      	nop
    731c:	00006ffd 	.word	0x00006ffd

00007320 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7320:	b580      	push	{r7, lr}
    7322:	b082      	sub	sp, #8
    7324:	af00      	add	r7, sp, #0
    7326:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7328:	687b      	ldr	r3, [r7, #4]
    732a:	68db      	ldr	r3, [r3, #12]
    732c:	4618      	mov	r0, r3
    732e:	4b03      	ldr	r3, [pc, #12]	; (733c <_tcc_timer_stop+0x1c>)
    7330:	4798      	blx	r3
}
    7332:	bf00      	nop
    7334:	3708      	adds	r7, #8
    7336:	46bd      	mov	sp, r7
    7338:	bd80      	pop	{r7, pc}
    733a:	bf00      	nop
    733c:	0000705d 	.word	0x0000705d

00007340 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7340:	b580      	push	{r7, lr}
    7342:	b082      	sub	sp, #8
    7344:	af00      	add	r7, sp, #0
    7346:	6078      	str	r0, [r7, #4]
    7348:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    734a:	687b      	ldr	r3, [r7, #4]
    734c:	68db      	ldr	r3, [r3, #12]
    734e:	6839      	ldr	r1, [r7, #0]
    7350:	4618      	mov	r0, r3
    7352:	4b03      	ldr	r3, [pc, #12]	; (7360 <_tcc_timer_set_period+0x20>)
    7354:	4798      	blx	r3
}
    7356:	bf00      	nop
    7358:	3708      	adds	r7, #8
    735a:	46bd      	mov	sp, r7
    735c:	bd80      	pop	{r7, pc}
    735e:	bf00      	nop
    7360:	00007115 	.word	0x00007115

00007364 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7364:	b580      	push	{r7, lr}
    7366:	b082      	sub	sp, #8
    7368:	af00      	add	r7, sp, #0
    736a:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    736c:	687b      	ldr	r3, [r7, #4]
    736e:	68db      	ldr	r3, [r3, #12]
    7370:	4618      	mov	r0, r3
    7372:	4b03      	ldr	r3, [pc, #12]	; (7380 <_tcc_timer_get_period+0x1c>)
    7374:	4798      	blx	r3
    7376:	4603      	mov	r3, r0
}
    7378:	4618      	mov	r0, r3
    737a:	3708      	adds	r7, #8
    737c:	46bd      	mov	sp, r7
    737e:	bd80      	pop	{r7, pc}
    7380:	00007139 	.word	0x00007139

00007384 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7384:	b580      	push	{r7, lr}
    7386:	b082      	sub	sp, #8
    7388:	af00      	add	r7, sp, #0
    738a:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    738c:	687b      	ldr	r3, [r7, #4]
    738e:	68db      	ldr	r3, [r3, #12]
    7390:	4618      	mov	r0, r3
    7392:	4b03      	ldr	r3, [pc, #12]	; (73a0 <_tcc_timer_is_started+0x1c>)
    7394:	4798      	blx	r3
    7396:	4603      	mov	r3, r0
}
    7398:	4618      	mov	r0, r3
    739a:	3708      	adds	r7, #8
    739c:	46bd      	mov	sp, r7
    739e:	bd80      	pop	{r7, pc}
    73a0:	00007025 	.word	0x00007025

000073a4 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    73a4:	b480      	push	{r7}
    73a6:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    73a8:	4b02      	ldr	r3, [pc, #8]	; (73b4 <_tcc_get_timer+0x10>)
}
    73aa:	4618      	mov	r0, r3
    73ac:	46bd      	mov	sp, r7
    73ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    73b2:	4770      	bx	lr
    73b4:	200000c0 	.word	0x200000c0

000073b8 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    73b8:	b580      	push	{r7, lr}
    73ba:	b084      	sub	sp, #16
    73bc:	af00      	add	r7, sp, #0
    73be:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    73c0:	687b      	ldr	r3, [r7, #4]
    73c2:	68db      	ldr	r3, [r3, #12]
    73c4:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    73c6:	68f8      	ldr	r0, [r7, #12]
    73c8:	4b08      	ldr	r3, [pc, #32]	; (73ec <_tcc_timer_set_irq+0x34>)
    73ca:	4798      	blx	r3
    73cc:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    73ce:	68bb      	ldr	r3, [r7, #8]
    73d0:	2b00      	cmp	r3, #0
    73d2:	d006      	beq.n	73e2 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    73d4:	68bb      	ldr	r3, [r7, #8]
    73d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    73da:	b2db      	uxtb	r3, r3
    73dc:	4618      	mov	r0, r3
    73de:	4b04      	ldr	r3, [pc, #16]	; (73f0 <_tcc_timer_set_irq+0x38>)
    73e0:	4798      	blx	r3
	}
}
    73e2:	bf00      	nop
    73e4:	3710      	adds	r7, #16
    73e6:	46bd      	mov	sp, r7
    73e8:	bd80      	pop	{r7, pc}
    73ea:	bf00      	nop
    73ec:	00007465 	.word	0x00007465
    73f0:	00003f65 	.word	0x00003f65

000073f4 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    73f4:	b580      	push	{r7, lr}
    73f6:	b084      	sub	sp, #16
    73f8:	af00      	add	r7, sp, #0
    73fa:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    73fc:	687b      	ldr	r3, [r7, #4]
    73fe:	68db      	ldr	r3, [r3, #12]
    7400:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7402:	68f8      	ldr	r0, [r7, #12]
    7404:	4b07      	ldr	r3, [pc, #28]	; (7424 <tcc_interrupt_handler+0x30>)
    7406:	4798      	blx	r3
    7408:	4603      	mov	r3, r0
    740a:	2b00      	cmp	r3, #0
    740c:	d006      	beq.n	741c <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    740e:	68f8      	ldr	r0, [r7, #12]
    7410:	4b05      	ldr	r3, [pc, #20]	; (7428 <tcc_interrupt_handler+0x34>)
    7412:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	681b      	ldr	r3, [r3, #0]
    7418:	6878      	ldr	r0, [r7, #4]
    741a:	4798      	blx	r3
	}
}
    741c:	bf00      	nop
    741e:	3710      	adds	r7, #16
    7420:	46bd      	mov	sp, r7
    7422:	bd80      	pop	{r7, pc}
    7424:	00006f5d 	.word	0x00006f5d
    7428:	00006f83 	.word	0x00006f83

0000742c <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    742c:	b580      	push	{r7, lr}
    742e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7430:	4b03      	ldr	r3, [pc, #12]	; (7440 <TCC0_0_Handler+0x14>)
    7432:	681b      	ldr	r3, [r3, #0]
    7434:	4618      	mov	r0, r3
    7436:	4b03      	ldr	r3, [pc, #12]	; (7444 <TCC0_0_Handler+0x18>)
    7438:	4798      	blx	r3
}
    743a:	bf00      	nop
    743c:	bd80      	pop	{r7, pc}
    743e:	bf00      	nop
    7440:	20002120 	.word	0x20002120
    7444:	000073f5 	.word	0x000073f5

00007448 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7448:	b580      	push	{r7, lr}
    744a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    744c:	4b03      	ldr	r3, [pc, #12]	; (745c <TCC1_0_Handler+0x14>)
    744e:	681b      	ldr	r3, [r3, #0]
    7450:	4618      	mov	r0, r3
    7452:	4b03      	ldr	r3, [pc, #12]	; (7460 <TCC1_0_Handler+0x18>)
    7454:	4798      	blx	r3
}
    7456:	bf00      	nop
    7458:	bd80      	pop	{r7, pc}
    745a:	bf00      	nop
    745c:	20002124 	.word	0x20002124
    7460:	000073f5 	.word	0x000073f5

00007464 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7464:	b480      	push	{r7}
    7466:	b085      	sub	sp, #20
    7468:	af00      	add	r7, sp, #0
    746a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    746c:	2300      	movs	r3, #0
    746e:	73fb      	strb	r3, [r7, #15]
    7470:	e015      	b.n	749e <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    7472:	7bfa      	ldrb	r2, [r7, #15]
    7474:	490f      	ldr	r1, [pc, #60]	; (74b4 <_get_tcc_cfg+0x50>)
    7476:	4613      	mov	r3, r2
    7478:	005b      	lsls	r3, r3, #1
    747a:	4413      	add	r3, r2
    747c:	011b      	lsls	r3, r3, #4
    747e:	440b      	add	r3, r1
    7480:	681a      	ldr	r2, [r3, #0]
    7482:	687b      	ldr	r3, [r7, #4]
    7484:	429a      	cmp	r2, r3
    7486:	d107      	bne.n	7498 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7488:	7bfa      	ldrb	r2, [r7, #15]
    748a:	4613      	mov	r3, r2
    748c:	005b      	lsls	r3, r3, #1
    748e:	4413      	add	r3, r2
    7490:	011b      	lsls	r3, r3, #4
    7492:	4a08      	ldr	r2, [pc, #32]	; (74b4 <_get_tcc_cfg+0x50>)
    7494:	4413      	add	r3, r2
    7496:	e006      	b.n	74a6 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7498:	7bfb      	ldrb	r3, [r7, #15]
    749a:	3301      	adds	r3, #1
    749c:	73fb      	strb	r3, [r7, #15]
    749e:	7bfb      	ldrb	r3, [r7, #15]
    74a0:	2b01      	cmp	r3, #1
    74a2:	d9e6      	bls.n	7472 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    74a4:	2300      	movs	r3, #0
}
    74a6:	4618      	mov	r0, r3
    74a8:	3714      	adds	r7, #20
    74aa:	46bd      	mov	sp, r7
    74ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    74b0:	4770      	bx	lr
    74b2:	bf00      	nop
    74b4:	20000060 	.word	0x20000060

000074b8 <__NVIC_EnableIRQ>:
{
    74b8:	b480      	push	{r7}
    74ba:	b083      	sub	sp, #12
    74bc:	af00      	add	r7, sp, #0
    74be:	4603      	mov	r3, r0
    74c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    74c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74c6:	2b00      	cmp	r3, #0
    74c8:	db0b      	blt.n	74e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    74ca:	4909      	ldr	r1, [pc, #36]	; (74f0 <__NVIC_EnableIRQ+0x38>)
    74cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    74d0:	095b      	lsrs	r3, r3, #5
    74d2:	88fa      	ldrh	r2, [r7, #6]
    74d4:	f002 021f 	and.w	r2, r2, #31
    74d8:	2001      	movs	r0, #1
    74da:	fa00 f202 	lsl.w	r2, r0, r2
    74de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    74e2:	bf00      	nop
    74e4:	370c      	adds	r7, #12
    74e6:	46bd      	mov	sp, r7
    74e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ec:	4770      	bx	lr
    74ee:	bf00      	nop
    74f0:	e000e100 	.word	0xe000e100

000074f4 <__NVIC_DisableIRQ>:
{
    74f4:	b480      	push	{r7}
    74f6:	b083      	sub	sp, #12
    74f8:	af00      	add	r7, sp, #0
    74fa:	4603      	mov	r3, r0
    74fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    74fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7502:	2b00      	cmp	r3, #0
    7504:	db10      	blt.n	7528 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7506:	490b      	ldr	r1, [pc, #44]	; (7534 <__NVIC_DisableIRQ+0x40>)
    7508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    750c:	095b      	lsrs	r3, r3, #5
    750e:	88fa      	ldrh	r2, [r7, #6]
    7510:	f002 021f 	and.w	r2, r2, #31
    7514:	2001      	movs	r0, #1
    7516:	fa00 f202 	lsl.w	r2, r0, r2
    751a:	3320      	adds	r3, #32
    751c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7520:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7524:	f3bf 8f6f 	isb	sy
}
    7528:	bf00      	nop
    752a:	370c      	adds	r7, #12
    752c:	46bd      	mov	sp, r7
    752e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7532:	4770      	bx	lr
    7534:	e000e100 	.word	0xe000e100

00007538 <__NVIC_ClearPendingIRQ>:
{
    7538:	b480      	push	{r7}
    753a:	b083      	sub	sp, #12
    753c:	af00      	add	r7, sp, #0
    753e:	4603      	mov	r3, r0
    7540:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7546:	2b00      	cmp	r3, #0
    7548:	db0c      	blt.n	7564 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    754a:	4909      	ldr	r1, [pc, #36]	; (7570 <__NVIC_ClearPendingIRQ+0x38>)
    754c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7550:	095b      	lsrs	r3, r3, #5
    7552:	88fa      	ldrh	r2, [r7, #6]
    7554:	f002 021f 	and.w	r2, r2, #31
    7558:	2001      	movs	r0, #1
    755a:	fa00 f202 	lsl.w	r2, r0, r2
    755e:	3360      	adds	r3, #96	; 0x60
    7560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7564:	bf00      	nop
    7566:	370c      	adds	r7, #12
    7568:	46bd      	mov	sp, r7
    756a:	f85d 7b04 	ldr.w	r7, [sp], #4
    756e:	4770      	bx	lr
    7570:	e000e100 	.word	0xe000e100

00007574 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7574:	b480      	push	{r7}
    7576:	b083      	sub	sp, #12
    7578:	af00      	add	r7, sp, #0
    757a:	6078      	str	r0, [r7, #4]
    757c:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    757e:	bf00      	nop
    7580:	687b      	ldr	r3, [r7, #4]
    7582:	691a      	ldr	r2, [r3, #16]
    7584:	683b      	ldr	r3, [r7, #0]
    7586:	4013      	ands	r3, r2
    7588:	2b00      	cmp	r3, #0
    758a:	d1f9      	bne.n	7580 <hri_tc_wait_for_sync+0xc>
	};
}
    758c:	bf00      	nop
    758e:	370c      	adds	r7, #12
    7590:	46bd      	mov	sp, r7
    7592:	f85d 7b04 	ldr.w	r7, [sp], #4
    7596:	4770      	bx	lr

00007598 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7598:	b480      	push	{r7}
    759a:	b083      	sub	sp, #12
    759c:	af00      	add	r7, sp, #0
    759e:	6078      	str	r0, [r7, #4]
    75a0:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    75a2:	687b      	ldr	r3, [r7, #4]
    75a4:	691a      	ldr	r2, [r3, #16]
    75a6:	683b      	ldr	r3, [r7, #0]
    75a8:	4013      	ands	r3, r2
    75aa:	2b00      	cmp	r3, #0
    75ac:	bf14      	ite	ne
    75ae:	2301      	movne	r3, #1
    75b0:	2300      	moveq	r3, #0
    75b2:	b2db      	uxtb	r3, r3
}
    75b4:	4618      	mov	r0, r3
    75b6:	370c      	adds	r7, #12
    75b8:	46bd      	mov	sp, r7
    75ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    75be:	4770      	bx	lr

000075c0 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    75c0:	b480      	push	{r7}
    75c2:	b083      	sub	sp, #12
    75c4:	af00      	add	r7, sp, #0
    75c6:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    75c8:	687b      	ldr	r3, [r7, #4]
    75ca:	7a9b      	ldrb	r3, [r3, #10]
    75cc:	b2db      	uxtb	r3, r3
    75ce:	f003 0301 	and.w	r3, r3, #1
    75d2:	2b00      	cmp	r3, #0
    75d4:	bf14      	ite	ne
    75d6:	2301      	movne	r3, #1
    75d8:	2300      	moveq	r3, #0
    75da:	b2db      	uxtb	r3, r3
}
    75dc:	4618      	mov	r0, r3
    75de:	370c      	adds	r7, #12
    75e0:	46bd      	mov	sp, r7
    75e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    75e6:	4770      	bx	lr

000075e8 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    75e8:	b480      	push	{r7}
    75ea:	b083      	sub	sp, #12
    75ec:	af00      	add	r7, sp, #0
    75ee:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    75f0:	687b      	ldr	r3, [r7, #4]
    75f2:	2201      	movs	r2, #1
    75f4:	729a      	strb	r2, [r3, #10]
}
    75f6:	bf00      	nop
    75f8:	370c      	adds	r7, #12
    75fa:	46bd      	mov	sp, r7
    75fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7600:	4770      	bx	lr

00007602 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7602:	b480      	push	{r7}
    7604:	b083      	sub	sp, #12
    7606:	af00      	add	r7, sp, #0
    7608:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    760a:	687b      	ldr	r3, [r7, #4]
    760c:	2202      	movs	r2, #2
    760e:	729a      	strb	r2, [r3, #10]
}
    7610:	bf00      	nop
    7612:	370c      	adds	r7, #12
    7614:	46bd      	mov	sp, r7
    7616:	f85d 7b04 	ldr.w	r7, [sp], #4
    761a:	4770      	bx	lr

0000761c <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    761c:	b480      	push	{r7}
    761e:	b083      	sub	sp, #12
    7620:	af00      	add	r7, sp, #0
    7622:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	2201      	movs	r2, #1
    7628:	725a      	strb	r2, [r3, #9]
}
    762a:	bf00      	nop
    762c:	370c      	adds	r7, #12
    762e:	46bd      	mov	sp, r7
    7630:	f85d 7b04 	ldr.w	r7, [sp], #4
    7634:	4770      	bx	lr

00007636 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7636:	b480      	push	{r7}
    7638:	b083      	sub	sp, #12
    763a:	af00      	add	r7, sp, #0
    763c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    763e:	687b      	ldr	r3, [r7, #4]
    7640:	7a5b      	ldrb	r3, [r3, #9]
    7642:	b2db      	uxtb	r3, r3
    7644:	085b      	lsrs	r3, r3, #1
    7646:	f003 0301 	and.w	r3, r3, #1
    764a:	2b00      	cmp	r3, #0
    764c:	bf14      	ite	ne
    764e:	2301      	movne	r3, #1
    7650:	2300      	moveq	r3, #0
    7652:	b2db      	uxtb	r3, r3
}
    7654:	4618      	mov	r0, r3
    7656:	370c      	adds	r7, #12
    7658:	46bd      	mov	sp, r7
    765a:	f85d 7b04 	ldr.w	r7, [sp], #4
    765e:	4770      	bx	lr

00007660 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7660:	b580      	push	{r7, lr}
    7662:	b082      	sub	sp, #8
    7664:	af00      	add	r7, sp, #0
    7666:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7668:	687b      	ldr	r3, [r7, #4]
    766a:	681b      	ldr	r3, [r3, #0]
    766c:	f043 0201 	orr.w	r2, r3, #1
    7670:	687b      	ldr	r3, [r7, #4]
    7672:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7674:	2101      	movs	r1, #1
    7676:	6878      	ldr	r0, [r7, #4]
    7678:	4b02      	ldr	r3, [pc, #8]	; (7684 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    767a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    767c:	bf00      	nop
    767e:	3708      	adds	r7, #8
    7680:	46bd      	mov	sp, r7
    7682:	bd80      	pop	{r7, pc}
    7684:	00007575 	.word	0x00007575

00007688 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7688:	b580      	push	{r7, lr}
    768a:	b082      	sub	sp, #8
    768c:	af00      	add	r7, sp, #0
    768e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7690:	687b      	ldr	r3, [r7, #4]
    7692:	681b      	ldr	r3, [r3, #0]
    7694:	f043 0202 	orr.w	r2, r3, #2
    7698:	687b      	ldr	r3, [r7, #4]
    769a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    769c:	2103      	movs	r1, #3
    769e:	6878      	ldr	r0, [r7, #4]
    76a0:	4b02      	ldr	r3, [pc, #8]	; (76ac <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    76a2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    76a4:	bf00      	nop
    76a6:	3708      	adds	r7, #8
    76a8:	46bd      	mov	sp, r7
    76aa:	bd80      	pop	{r7, pc}
    76ac:	00007575 	.word	0x00007575

000076b0 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    76b0:	b580      	push	{r7, lr}
    76b2:	b084      	sub	sp, #16
    76b4:	af00      	add	r7, sp, #0
    76b6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    76b8:	2103      	movs	r1, #3
    76ba:	6878      	ldr	r0, [r7, #4]
    76bc:	4b09      	ldr	r3, [pc, #36]	; (76e4 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    76be:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    76c0:	687b      	ldr	r3, [r7, #4]
    76c2:	681b      	ldr	r3, [r3, #0]
    76c4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    76c6:	68fb      	ldr	r3, [r7, #12]
    76c8:	085b      	lsrs	r3, r3, #1
    76ca:	f003 0301 	and.w	r3, r3, #1
    76ce:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    76d0:	68fb      	ldr	r3, [r7, #12]
    76d2:	2b00      	cmp	r3, #0
    76d4:	bf14      	ite	ne
    76d6:	2301      	movne	r3, #1
    76d8:	2300      	moveq	r3, #0
    76da:	b2db      	uxtb	r3, r3
}
    76dc:	4618      	mov	r0, r3
    76de:	3710      	adds	r7, #16
    76e0:	46bd      	mov	sp, r7
    76e2:	bd80      	pop	{r7, pc}
    76e4:	00007575 	.word	0x00007575

000076e8 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    76e8:	b580      	push	{r7, lr}
    76ea:	b082      	sub	sp, #8
    76ec:	af00      	add	r7, sp, #0
    76ee:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    76f0:	687b      	ldr	r3, [r7, #4]
    76f2:	681b      	ldr	r3, [r3, #0]
    76f4:	f023 0202 	bic.w	r2, r3, #2
    76f8:	687b      	ldr	r3, [r7, #4]
    76fa:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    76fc:	2103      	movs	r1, #3
    76fe:	6878      	ldr	r0, [r7, #4]
    7700:	4b02      	ldr	r3, [pc, #8]	; (770c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7702:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7704:	bf00      	nop
    7706:	3708      	adds	r7, #8
    7708:	46bd      	mov	sp, r7
    770a:	bd80      	pop	{r7, pc}
    770c:	00007575 	.word	0x00007575

00007710 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7710:	b480      	push	{r7}
    7712:	b085      	sub	sp, #20
    7714:	af00      	add	r7, sp, #0
    7716:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7718:	687b      	ldr	r3, [r7, #4]
    771a:	681b      	ldr	r3, [r3, #0]
    771c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    771e:	68fb      	ldr	r3, [r7, #12]
    7720:	089b      	lsrs	r3, r3, #2
    7722:	f003 0303 	and.w	r3, r3, #3
    7726:	60fb      	str	r3, [r7, #12]
	return tmp;
    7728:	68fb      	ldr	r3, [r7, #12]
}
    772a:	4618      	mov	r0, r3
    772c:	3714      	adds	r7, #20
    772e:	46bd      	mov	sp, r7
    7730:	f85d 7b04 	ldr.w	r7, [sp], #4
    7734:	4770      	bx	lr
	...

00007738 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7738:	b580      	push	{r7, lr}
    773a:	b084      	sub	sp, #16
    773c:	af00      	add	r7, sp, #0
    773e:	6078      	str	r0, [r7, #4]
    7740:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7742:	2103      	movs	r1, #3
    7744:	6878      	ldr	r0, [r7, #4]
    7746:	4b07      	ldr	r3, [pc, #28]	; (7764 <hri_tc_get_CTRLA_reg+0x2c>)
    7748:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    774a:	687b      	ldr	r3, [r7, #4]
    774c:	681b      	ldr	r3, [r3, #0]
    774e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7750:	68fa      	ldr	r2, [r7, #12]
    7752:	683b      	ldr	r3, [r7, #0]
    7754:	4013      	ands	r3, r2
    7756:	60fb      	str	r3, [r7, #12]
	return tmp;
    7758:	68fb      	ldr	r3, [r7, #12]
}
    775a:	4618      	mov	r0, r3
    775c:	3710      	adds	r7, #16
    775e:	46bd      	mov	sp, r7
    7760:	bd80      	pop	{r7, pc}
    7762:	bf00      	nop
    7764:	00007575 	.word	0x00007575

00007768 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7768:	b580      	push	{r7, lr}
    776a:	b082      	sub	sp, #8
    776c:	af00      	add	r7, sp, #0
    776e:	6078      	str	r0, [r7, #4]
    7770:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7772:	687b      	ldr	r3, [r7, #4]
    7774:	683a      	ldr	r2, [r7, #0]
    7776:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7778:	2103      	movs	r1, #3
    777a:	6878      	ldr	r0, [r7, #4]
    777c:	4b02      	ldr	r3, [pc, #8]	; (7788 <hri_tc_write_CTRLA_reg+0x20>)
    777e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7780:	bf00      	nop
    7782:	3708      	adds	r7, #8
    7784:	46bd      	mov	sp, r7
    7786:	bd80      	pop	{r7, pc}
    7788:	00007575 	.word	0x00007575

0000778c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    778c:	b480      	push	{r7}
    778e:	b083      	sub	sp, #12
    7790:	af00      	add	r7, sp, #0
    7792:	6078      	str	r0, [r7, #4]
    7794:	460b      	mov	r3, r1
    7796:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7798:	687b      	ldr	r3, [r7, #4]
    779a:	887a      	ldrh	r2, [r7, #2]
    779c:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    779e:	bf00      	nop
    77a0:	370c      	adds	r7, #12
    77a2:	46bd      	mov	sp, r7
    77a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    77a8:	4770      	bx	lr

000077aa <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    77aa:	b480      	push	{r7}
    77ac:	b083      	sub	sp, #12
    77ae:	af00      	add	r7, sp, #0
    77b0:	6078      	str	r0, [r7, #4]
    77b2:	460b      	mov	r3, r1
    77b4:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    77b6:	687b      	ldr	r3, [r7, #4]
    77b8:	78fa      	ldrb	r2, [r7, #3]
    77ba:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    77bc:	bf00      	nop
    77be:	370c      	adds	r7, #12
    77c0:	46bd      	mov	sp, r7
    77c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    77c6:	4770      	bx	lr

000077c8 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    77c8:	b480      	push	{r7}
    77ca:	b083      	sub	sp, #12
    77cc:	af00      	add	r7, sp, #0
    77ce:	6078      	str	r0, [r7, #4]
    77d0:	460b      	mov	r3, r1
    77d2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    77d4:	687b      	ldr	r3, [r7, #4]
    77d6:	78fa      	ldrb	r2, [r7, #3]
    77d8:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    77da:	bf00      	nop
    77dc:	370c      	adds	r7, #12
    77de:	46bd      	mov	sp, r7
    77e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    77e4:	4770      	bx	lr
	...

000077e8 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    77e8:	b580      	push	{r7, lr}
    77ea:	b082      	sub	sp, #8
    77ec:	af00      	add	r7, sp, #0
    77ee:	6078      	str	r0, [r7, #4]
    77f0:	460b      	mov	r3, r1
    77f2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    77f4:	687b      	ldr	r3, [r7, #4]
    77f6:	78fa      	ldrb	r2, [r7, #3]
    77f8:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    77fa:	2120      	movs	r1, #32
    77fc:	6878      	ldr	r0, [r7, #4]
    77fe:	4b03      	ldr	r3, [pc, #12]	; (780c <hri_tccount8_write_PER_reg+0x24>)
    7800:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7802:	bf00      	nop
    7804:	3708      	adds	r7, #8
    7806:	46bd      	mov	sp, r7
    7808:	bd80      	pop	{r7, pc}
    780a:	bf00      	nop
    780c:	00007575 	.word	0x00007575

00007810 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7810:	b580      	push	{r7, lr}
    7812:	b082      	sub	sp, #8
    7814:	af00      	add	r7, sp, #0
    7816:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7818:	2120      	movs	r1, #32
    781a:	6878      	ldr	r0, [r7, #4]
    781c:	4b04      	ldr	r3, [pc, #16]	; (7830 <hri_tccount8_read_PER_reg+0x20>)
    781e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7820:	687b      	ldr	r3, [r7, #4]
    7822:	7edb      	ldrb	r3, [r3, #27]
    7824:	b2db      	uxtb	r3, r3
}
    7826:	4618      	mov	r0, r3
    7828:	3708      	adds	r7, #8
    782a:	46bd      	mov	sp, r7
    782c:	bd80      	pop	{r7, pc}
    782e:	bf00      	nop
    7830:	00007575 	.word	0x00007575

00007834 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7834:	b580      	push	{r7, lr}
    7836:	b082      	sub	sp, #8
    7838:	af00      	add	r7, sp, #0
    783a:	6078      	str	r0, [r7, #4]
    783c:	460b      	mov	r3, r1
    783e:	70fb      	strb	r3, [r7, #3]
    7840:	4613      	mov	r3, r2
    7842:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7844:	78fb      	ldrb	r3, [r7, #3]
    7846:	687a      	ldr	r2, [r7, #4]
    7848:	4413      	add	r3, r2
    784a:	78ba      	ldrb	r2, [r7, #2]
    784c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    784e:	21c0      	movs	r1, #192	; 0xc0
    7850:	6878      	ldr	r0, [r7, #4]
    7852:	4b03      	ldr	r3, [pc, #12]	; (7860 <hri_tccount8_write_CC_reg+0x2c>)
    7854:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7856:	bf00      	nop
    7858:	3708      	adds	r7, #8
    785a:	46bd      	mov	sp, r7
    785c:	bd80      	pop	{r7, pc}
    785e:	bf00      	nop
    7860:	00007575 	.word	0x00007575

00007864 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7864:	b580      	push	{r7, lr}
    7866:	b082      	sub	sp, #8
    7868:	af00      	add	r7, sp, #0
    786a:	6078      	str	r0, [r7, #4]
    786c:	460b      	mov	r3, r1
    786e:	70fb      	strb	r3, [r7, #3]
    7870:	4613      	mov	r3, r2
    7872:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7874:	78fb      	ldrb	r3, [r7, #3]
    7876:	687a      	ldr	r2, [r7, #4]
    7878:	330c      	adds	r3, #12
    787a:	005b      	lsls	r3, r3, #1
    787c:	4413      	add	r3, r2
    787e:	883a      	ldrh	r2, [r7, #0]
    7880:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7882:	21c0      	movs	r1, #192	; 0xc0
    7884:	6878      	ldr	r0, [r7, #4]
    7886:	4b03      	ldr	r3, [pc, #12]	; (7894 <hri_tccount16_write_CC_reg+0x30>)
    7888:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    788a:	bf00      	nop
    788c:	3708      	adds	r7, #8
    788e:	46bd      	mov	sp, r7
    7890:	bd80      	pop	{r7, pc}
    7892:	bf00      	nop
    7894:	00007575 	.word	0x00007575

00007898 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7898:	b580      	push	{r7, lr}
    789a:	b082      	sub	sp, #8
    789c:	af00      	add	r7, sp, #0
    789e:	6078      	str	r0, [r7, #4]
    78a0:	460b      	mov	r3, r1
    78a2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    78a4:	21c0      	movs	r1, #192	; 0xc0
    78a6:	6878      	ldr	r0, [r7, #4]
    78a8:	4b06      	ldr	r3, [pc, #24]	; (78c4 <hri_tccount16_read_CC_reg+0x2c>)
    78aa:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    78ac:	78fb      	ldrb	r3, [r7, #3]
    78ae:	687a      	ldr	r2, [r7, #4]
    78b0:	330c      	adds	r3, #12
    78b2:	005b      	lsls	r3, r3, #1
    78b4:	4413      	add	r3, r2
    78b6:	889b      	ldrh	r3, [r3, #4]
    78b8:	b29b      	uxth	r3, r3
}
    78ba:	4618      	mov	r0, r3
    78bc:	3708      	adds	r7, #8
    78be:	46bd      	mov	sp, r7
    78c0:	bd80      	pop	{r7, pc}
    78c2:	bf00      	nop
    78c4:	00007575 	.word	0x00007575

000078c8 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    78c8:	b580      	push	{r7, lr}
    78ca:	b084      	sub	sp, #16
    78cc:	af00      	add	r7, sp, #0
    78ce:	60f8      	str	r0, [r7, #12]
    78d0:	460b      	mov	r3, r1
    78d2:	607a      	str	r2, [r7, #4]
    78d4:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    78d6:	7afb      	ldrb	r3, [r7, #11]
    78d8:	68fa      	ldr	r2, [r7, #12]
    78da:	3306      	adds	r3, #6
    78dc:	009b      	lsls	r3, r3, #2
    78de:	4413      	add	r3, r2
    78e0:	687a      	ldr	r2, [r7, #4]
    78e2:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    78e4:	21c0      	movs	r1, #192	; 0xc0
    78e6:	68f8      	ldr	r0, [r7, #12]
    78e8:	4b02      	ldr	r3, [pc, #8]	; (78f4 <hri_tccount32_write_CC_reg+0x2c>)
    78ea:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    78ec:	bf00      	nop
    78ee:	3710      	adds	r7, #16
    78f0:	46bd      	mov	sp, r7
    78f2:	bd80      	pop	{r7, pc}
    78f4:	00007575 	.word	0x00007575

000078f8 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    78f8:	b580      	push	{r7, lr}
    78fa:	b082      	sub	sp, #8
    78fc:	af00      	add	r7, sp, #0
    78fe:	6078      	str	r0, [r7, #4]
    7900:	460b      	mov	r3, r1
    7902:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7904:	21c0      	movs	r1, #192	; 0xc0
    7906:	6878      	ldr	r0, [r7, #4]
    7908:	4b05      	ldr	r3, [pc, #20]	; (7920 <hri_tccount32_read_CC_reg+0x28>)
    790a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    790c:	78fb      	ldrb	r3, [r7, #3]
    790e:	687a      	ldr	r2, [r7, #4]
    7910:	3306      	adds	r3, #6
    7912:	009b      	lsls	r3, r3, #2
    7914:	4413      	add	r3, r2
    7916:	685b      	ldr	r3, [r3, #4]
}
    7918:	4618      	mov	r0, r3
    791a:	3708      	adds	r7, #8
    791c:	46bd      	mov	sp, r7
    791e:	bd80      	pop	{r7, pc}
    7920:	00007575 	.word	0x00007575

00007924 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7924:	b580      	push	{r7, lr}
    7926:	b084      	sub	sp, #16
    7928:	af00      	add	r7, sp, #0
    792a:	6078      	str	r0, [r7, #4]
    792c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    792e:	6838      	ldr	r0, [r7, #0]
    7930:	4b93      	ldr	r3, [pc, #588]	; (7b80 <_tc_timer_init+0x25c>)
    7932:	4798      	blx	r3
    7934:	4603      	mov	r3, r0
    7936:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7938:	687b      	ldr	r3, [r7, #4]
    793a:	683a      	ldr	r2, [r7, #0]
    793c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    793e:	22a4      	movs	r2, #164	; 0xa4
    7940:	4990      	ldr	r1, [pc, #576]	; (7b84 <_tc_timer_init+0x260>)
    7942:	2001      	movs	r0, #1
    7944:	4b90      	ldr	r3, [pc, #576]	; (7b88 <_tc_timer_init+0x264>)
    7946:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7948:	2101      	movs	r1, #1
    794a:	6838      	ldr	r0, [r7, #0]
    794c:	4b8f      	ldr	r3, [pc, #572]	; (7b8c <_tc_timer_init+0x268>)
    794e:	4798      	blx	r3
    7950:	4603      	mov	r3, r0
    7952:	f083 0301 	eor.w	r3, r3, #1
    7956:	b2db      	uxtb	r3, r3
    7958:	2b00      	cmp	r3, #0
    795a:	d011      	beq.n	7980 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    795c:	2102      	movs	r1, #2
    795e:	6838      	ldr	r0, [r7, #0]
    7960:	4b8b      	ldr	r3, [pc, #556]	; (7b90 <_tc_timer_init+0x26c>)
    7962:	4798      	blx	r3
    7964:	4603      	mov	r3, r0
    7966:	2b00      	cmp	r3, #0
    7968:	d006      	beq.n	7978 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    796a:	6838      	ldr	r0, [r7, #0]
    796c:	4b89      	ldr	r3, [pc, #548]	; (7b94 <_tc_timer_init+0x270>)
    796e:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7970:	2102      	movs	r1, #2
    7972:	6838      	ldr	r0, [r7, #0]
    7974:	4b88      	ldr	r3, [pc, #544]	; (7b98 <_tc_timer_init+0x274>)
    7976:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7978:	2101      	movs	r1, #1
    797a:	6838      	ldr	r0, [r7, #0]
    797c:	4b87      	ldr	r3, [pc, #540]	; (7b9c <_tc_timer_init+0x278>)
    797e:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7980:	2101      	movs	r1, #1
    7982:	6838      	ldr	r0, [r7, #0]
    7984:	4b84      	ldr	r3, [pc, #528]	; (7b98 <_tc_timer_init+0x274>)
    7986:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7988:	f997 200f 	ldrsb.w	r2, [r7, #15]
    798c:	4984      	ldr	r1, [pc, #528]	; (7ba0 <_tc_timer_init+0x27c>)
    798e:	4613      	mov	r3, r2
    7990:	009b      	lsls	r3, r3, #2
    7992:	4413      	add	r3, r2
    7994:	009b      	lsls	r3, r3, #2
    7996:	440b      	add	r3, r1
    7998:	3304      	adds	r3, #4
    799a:	681b      	ldr	r3, [r3, #0]
    799c:	4619      	mov	r1, r3
    799e:	6838      	ldr	r0, [r7, #0]
    79a0:	4b7e      	ldr	r3, [pc, #504]	; (7b9c <_tc_timer_init+0x278>)
    79a2:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    79a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79a8:	497d      	ldr	r1, [pc, #500]	; (7ba0 <_tc_timer_init+0x27c>)
    79aa:	4613      	mov	r3, r2
    79ac:	009b      	lsls	r3, r3, #2
    79ae:	4413      	add	r3, r2
    79b0:	009b      	lsls	r3, r3, #2
    79b2:	440b      	add	r3, r1
    79b4:	330a      	adds	r3, #10
    79b6:	781b      	ldrb	r3, [r3, #0]
    79b8:	4619      	mov	r1, r3
    79ba:	6838      	ldr	r0, [r7, #0]
    79bc:	4b79      	ldr	r3, [pc, #484]	; (7ba4 <_tc_timer_init+0x280>)
    79be:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    79c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79c4:	4976      	ldr	r1, [pc, #472]	; (7ba0 <_tc_timer_init+0x27c>)
    79c6:	4613      	mov	r3, r2
    79c8:	009b      	lsls	r3, r3, #2
    79ca:	4413      	add	r3, r2
    79cc:	009b      	lsls	r3, r3, #2
    79ce:	440b      	add	r3, r1
    79d0:	3308      	adds	r3, #8
    79d2:	881b      	ldrh	r3, [r3, #0]
    79d4:	4619      	mov	r1, r3
    79d6:	6838      	ldr	r0, [r7, #0]
    79d8:	4b73      	ldr	r3, [pc, #460]	; (7ba8 <_tc_timer_init+0x284>)
    79da:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    79dc:	2101      	movs	r1, #1
    79de:	6838      	ldr	r0, [r7, #0]
    79e0:	4b72      	ldr	r3, [pc, #456]	; (7bac <_tc_timer_init+0x288>)
    79e2:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    79e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    79e8:	496d      	ldr	r1, [pc, #436]	; (7ba0 <_tc_timer_init+0x27c>)
    79ea:	4613      	mov	r3, r2
    79ec:	009b      	lsls	r3, r3, #2
    79ee:	4413      	add	r3, r2
    79f0:	009b      	lsls	r3, r3, #2
    79f2:	440b      	add	r3, r1
    79f4:	3304      	adds	r3, #4
    79f6:	681b      	ldr	r3, [r3, #0]
    79f8:	f003 030c 	and.w	r3, r3, #12
    79fc:	2b08      	cmp	r3, #8
    79fe:	d11e      	bne.n	7a3e <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7a00:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a04:	4966      	ldr	r1, [pc, #408]	; (7ba0 <_tc_timer_init+0x27c>)
    7a06:	4613      	mov	r3, r2
    7a08:	009b      	lsls	r3, r3, #2
    7a0a:	4413      	add	r3, r2
    7a0c:	009b      	lsls	r3, r3, #2
    7a0e:	440b      	add	r3, r1
    7a10:	330c      	adds	r3, #12
    7a12:	681b      	ldr	r3, [r3, #0]
    7a14:	461a      	mov	r2, r3
    7a16:	2100      	movs	r1, #0
    7a18:	6838      	ldr	r0, [r7, #0]
    7a1a:	4b65      	ldr	r3, [pc, #404]	; (7bb0 <_tc_timer_init+0x28c>)
    7a1c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7a1e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a22:	495f      	ldr	r1, [pc, #380]	; (7ba0 <_tc_timer_init+0x27c>)
    7a24:	4613      	mov	r3, r2
    7a26:	009b      	lsls	r3, r3, #2
    7a28:	4413      	add	r3, r2
    7a2a:	009b      	lsls	r3, r3, #2
    7a2c:	440b      	add	r3, r1
    7a2e:	3310      	adds	r3, #16
    7a30:	681b      	ldr	r3, [r3, #0]
    7a32:	461a      	mov	r2, r3
    7a34:	2101      	movs	r1, #1
    7a36:	6838      	ldr	r0, [r7, #0]
    7a38:	4b5d      	ldr	r3, [pc, #372]	; (7bb0 <_tc_timer_init+0x28c>)
    7a3a:	4798      	blx	r3
    7a3c:	e06a      	b.n	7b14 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7a3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a42:	4957      	ldr	r1, [pc, #348]	; (7ba0 <_tc_timer_init+0x27c>)
    7a44:	4613      	mov	r3, r2
    7a46:	009b      	lsls	r3, r3, #2
    7a48:	4413      	add	r3, r2
    7a4a:	009b      	lsls	r3, r3, #2
    7a4c:	440b      	add	r3, r1
    7a4e:	3304      	adds	r3, #4
    7a50:	681b      	ldr	r3, [r3, #0]
    7a52:	f003 030c 	and.w	r3, r3, #12
    7a56:	2b00      	cmp	r3, #0
    7a58:	d120      	bne.n	7a9c <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7a5a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a5e:	4950      	ldr	r1, [pc, #320]	; (7ba0 <_tc_timer_init+0x27c>)
    7a60:	4613      	mov	r3, r2
    7a62:	009b      	lsls	r3, r3, #2
    7a64:	4413      	add	r3, r2
    7a66:	009b      	lsls	r3, r3, #2
    7a68:	440b      	add	r3, r1
    7a6a:	330c      	adds	r3, #12
    7a6c:	681b      	ldr	r3, [r3, #0]
    7a6e:	b29b      	uxth	r3, r3
    7a70:	461a      	mov	r2, r3
    7a72:	2100      	movs	r1, #0
    7a74:	6838      	ldr	r0, [r7, #0]
    7a76:	4b4f      	ldr	r3, [pc, #316]	; (7bb4 <_tc_timer_init+0x290>)
    7a78:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7a7a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a7e:	4948      	ldr	r1, [pc, #288]	; (7ba0 <_tc_timer_init+0x27c>)
    7a80:	4613      	mov	r3, r2
    7a82:	009b      	lsls	r3, r3, #2
    7a84:	4413      	add	r3, r2
    7a86:	009b      	lsls	r3, r3, #2
    7a88:	440b      	add	r3, r1
    7a8a:	3310      	adds	r3, #16
    7a8c:	681b      	ldr	r3, [r3, #0]
    7a8e:	b29b      	uxth	r3, r3
    7a90:	461a      	mov	r2, r3
    7a92:	2101      	movs	r1, #1
    7a94:	6838      	ldr	r0, [r7, #0]
    7a96:	4b47      	ldr	r3, [pc, #284]	; (7bb4 <_tc_timer_init+0x290>)
    7a98:	4798      	blx	r3
    7a9a:	e03b      	b.n	7b14 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7a9c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7aa0:	493f      	ldr	r1, [pc, #252]	; (7ba0 <_tc_timer_init+0x27c>)
    7aa2:	4613      	mov	r3, r2
    7aa4:	009b      	lsls	r3, r3, #2
    7aa6:	4413      	add	r3, r2
    7aa8:	009b      	lsls	r3, r3, #2
    7aaa:	440b      	add	r3, r1
    7aac:	3304      	adds	r3, #4
    7aae:	681b      	ldr	r3, [r3, #0]
    7ab0:	f003 030c 	and.w	r3, r3, #12
    7ab4:	2b04      	cmp	r3, #4
    7ab6:	d12d      	bne.n	7b14 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7ab8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7abc:	4938      	ldr	r1, [pc, #224]	; (7ba0 <_tc_timer_init+0x27c>)
    7abe:	4613      	mov	r3, r2
    7ac0:	009b      	lsls	r3, r3, #2
    7ac2:	4413      	add	r3, r2
    7ac4:	009b      	lsls	r3, r3, #2
    7ac6:	440b      	add	r3, r1
    7ac8:	330c      	adds	r3, #12
    7aca:	681b      	ldr	r3, [r3, #0]
    7acc:	b2db      	uxtb	r3, r3
    7ace:	461a      	mov	r2, r3
    7ad0:	2100      	movs	r1, #0
    7ad2:	6838      	ldr	r0, [r7, #0]
    7ad4:	4b38      	ldr	r3, [pc, #224]	; (7bb8 <_tc_timer_init+0x294>)
    7ad6:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7ad8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7adc:	4930      	ldr	r1, [pc, #192]	; (7ba0 <_tc_timer_init+0x27c>)
    7ade:	4613      	mov	r3, r2
    7ae0:	009b      	lsls	r3, r3, #2
    7ae2:	4413      	add	r3, r2
    7ae4:	009b      	lsls	r3, r3, #2
    7ae6:	440b      	add	r3, r1
    7ae8:	3310      	adds	r3, #16
    7aea:	681b      	ldr	r3, [r3, #0]
    7aec:	b2db      	uxtb	r3, r3
    7aee:	461a      	mov	r2, r3
    7af0:	2101      	movs	r1, #1
    7af2:	6838      	ldr	r0, [r7, #0]
    7af4:	4b30      	ldr	r3, [pc, #192]	; (7bb8 <_tc_timer_init+0x294>)
    7af6:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7af8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7afc:	4928      	ldr	r1, [pc, #160]	; (7ba0 <_tc_timer_init+0x27c>)
    7afe:	4613      	mov	r3, r2
    7b00:	009b      	lsls	r3, r3, #2
    7b02:	4413      	add	r3, r2
    7b04:	009b      	lsls	r3, r3, #2
    7b06:	440b      	add	r3, r1
    7b08:	330b      	adds	r3, #11
    7b0a:	781b      	ldrb	r3, [r3, #0]
    7b0c:	4619      	mov	r1, r3
    7b0e:	6838      	ldr	r0, [r7, #0]
    7b10:	4b2a      	ldr	r3, [pc, #168]	; (7bbc <_tc_timer_init+0x298>)
    7b12:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7b14:	6838      	ldr	r0, [r7, #0]
    7b16:	4b2a      	ldr	r3, [pc, #168]	; (7bc0 <_tc_timer_init+0x29c>)
    7b18:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7b1a:	6879      	ldr	r1, [r7, #4]
    7b1c:	6838      	ldr	r0, [r7, #0]
    7b1e:	4b29      	ldr	r3, [pc, #164]	; (7bc4 <_tc_timer_init+0x2a0>)
    7b20:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7b22:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b26:	491e      	ldr	r1, [pc, #120]	; (7ba0 <_tc_timer_init+0x27c>)
    7b28:	4613      	mov	r3, r2
    7b2a:	009b      	lsls	r3, r3, #2
    7b2c:	4413      	add	r3, r2
    7b2e:	009b      	lsls	r3, r3, #2
    7b30:	440b      	add	r3, r1
    7b32:	3302      	adds	r3, #2
    7b34:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b38:	4618      	mov	r0, r3
    7b3a:	4b23      	ldr	r3, [pc, #140]	; (7bc8 <_tc_timer_init+0x2a4>)
    7b3c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7b3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b42:	4917      	ldr	r1, [pc, #92]	; (7ba0 <_tc_timer_init+0x27c>)
    7b44:	4613      	mov	r3, r2
    7b46:	009b      	lsls	r3, r3, #2
    7b48:	4413      	add	r3, r2
    7b4a:	009b      	lsls	r3, r3, #2
    7b4c:	440b      	add	r3, r1
    7b4e:	3302      	adds	r3, #2
    7b50:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b54:	4618      	mov	r0, r3
    7b56:	4b1d      	ldr	r3, [pc, #116]	; (7bcc <_tc_timer_init+0x2a8>)
    7b58:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7b5a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b5e:	4910      	ldr	r1, [pc, #64]	; (7ba0 <_tc_timer_init+0x27c>)
    7b60:	4613      	mov	r3, r2
    7b62:	009b      	lsls	r3, r3, #2
    7b64:	4413      	add	r3, r2
    7b66:	009b      	lsls	r3, r3, #2
    7b68:	440b      	add	r3, r1
    7b6a:	3302      	adds	r3, #2
    7b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b70:	4618      	mov	r0, r3
    7b72:	4b17      	ldr	r3, [pc, #92]	; (7bd0 <_tc_timer_init+0x2ac>)
    7b74:	4798      	blx	r3

	return ERR_NONE;
    7b76:	2300      	movs	r3, #0
}
    7b78:	4618      	mov	r0, r3
    7b7a:	3710      	adds	r7, #16
    7b7c:	46bd      	mov	sp, r7
    7b7e:	bd80      	pop	{r7, pc}
    7b80:	00008175 	.word	0x00008175
    7b84:	0000f6d8 	.word	0x0000f6d8
    7b88:	00003719 	.word	0x00003719
    7b8c:	00007599 	.word	0x00007599
    7b90:	00007739 	.word	0x00007739
    7b94:	000076e9 	.word	0x000076e9
    7b98:	00007575 	.word	0x00007575
    7b9c:	00007769 	.word	0x00007769
    7ba0:	200000e0 	.word	0x200000e0
    7ba4:	000077c9 	.word	0x000077c9
    7ba8:	0000778d 	.word	0x0000778d
    7bac:	000077ab 	.word	0x000077ab
    7bb0:	000078c9 	.word	0x000078c9
    7bb4:	00007865 	.word	0x00007865
    7bb8:	00007835 	.word	0x00007835
    7bbc:	000077e9 	.word	0x000077e9
    7bc0:	0000761d 	.word	0x0000761d
    7bc4:	000081dd 	.word	0x000081dd
    7bc8:	000074f5 	.word	0x000074f5
    7bcc:	00007539 	.word	0x00007539
    7bd0:	000074b9 	.word	0x000074b9

00007bd4 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7bd4:	b580      	push	{r7, lr}
    7bd6:	b084      	sub	sp, #16
    7bd8:	af00      	add	r7, sp, #0
    7bda:	6078      	str	r0, [r7, #4]
    7bdc:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7bde:	6838      	ldr	r0, [r7, #0]
    7be0:	4b73      	ldr	r3, [pc, #460]	; (7db0 <_pwm_init+0x1dc>)
    7be2:	4798      	blx	r3
    7be4:	4603      	mov	r3, r0
    7be6:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7be8:	687b      	ldr	r3, [r7, #4]
    7bea:	683a      	ldr	r2, [r7, #0]
    7bec:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7bee:	2101      	movs	r1, #1
    7bf0:	6838      	ldr	r0, [r7, #0]
    7bf2:	4b70      	ldr	r3, [pc, #448]	; (7db4 <_pwm_init+0x1e0>)
    7bf4:	4798      	blx	r3
    7bf6:	4603      	mov	r3, r0
    7bf8:	f083 0301 	eor.w	r3, r3, #1
    7bfc:	b2db      	uxtb	r3, r3
    7bfe:	2b00      	cmp	r3, #0
    7c00:	d011      	beq.n	7c26 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7c02:	2102      	movs	r1, #2
    7c04:	6838      	ldr	r0, [r7, #0]
    7c06:	4b6c      	ldr	r3, [pc, #432]	; (7db8 <_pwm_init+0x1e4>)
    7c08:	4798      	blx	r3
    7c0a:	4603      	mov	r3, r0
    7c0c:	2b00      	cmp	r3, #0
    7c0e:	d006      	beq.n	7c1e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7c10:	6838      	ldr	r0, [r7, #0]
    7c12:	4b6a      	ldr	r3, [pc, #424]	; (7dbc <_pwm_init+0x1e8>)
    7c14:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7c16:	2102      	movs	r1, #2
    7c18:	6838      	ldr	r0, [r7, #0]
    7c1a:	4b69      	ldr	r3, [pc, #420]	; (7dc0 <_pwm_init+0x1ec>)
    7c1c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7c1e:	2101      	movs	r1, #1
    7c20:	6838      	ldr	r0, [r7, #0]
    7c22:	4b68      	ldr	r3, [pc, #416]	; (7dc4 <_pwm_init+0x1f0>)
    7c24:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7c26:	2101      	movs	r1, #1
    7c28:	6838      	ldr	r0, [r7, #0]
    7c2a:	4b65      	ldr	r3, [pc, #404]	; (7dc0 <_pwm_init+0x1ec>)
    7c2c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7c2e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c32:	4965      	ldr	r1, [pc, #404]	; (7dc8 <_pwm_init+0x1f4>)
    7c34:	4613      	mov	r3, r2
    7c36:	009b      	lsls	r3, r3, #2
    7c38:	4413      	add	r3, r2
    7c3a:	009b      	lsls	r3, r3, #2
    7c3c:	440b      	add	r3, r1
    7c3e:	3304      	adds	r3, #4
    7c40:	681b      	ldr	r3, [r3, #0]
    7c42:	4619      	mov	r1, r3
    7c44:	6838      	ldr	r0, [r7, #0]
    7c46:	4b5f      	ldr	r3, [pc, #380]	; (7dc4 <_pwm_init+0x1f0>)
    7c48:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7c4a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c4e:	495e      	ldr	r1, [pc, #376]	; (7dc8 <_pwm_init+0x1f4>)
    7c50:	4613      	mov	r3, r2
    7c52:	009b      	lsls	r3, r3, #2
    7c54:	4413      	add	r3, r2
    7c56:	009b      	lsls	r3, r3, #2
    7c58:	440b      	add	r3, r1
    7c5a:	330a      	adds	r3, #10
    7c5c:	781b      	ldrb	r3, [r3, #0]
    7c5e:	4619      	mov	r1, r3
    7c60:	6838      	ldr	r0, [r7, #0]
    7c62:	4b5a      	ldr	r3, [pc, #360]	; (7dcc <_pwm_init+0x1f8>)
    7c64:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7c66:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c6a:	4957      	ldr	r1, [pc, #348]	; (7dc8 <_pwm_init+0x1f4>)
    7c6c:	4613      	mov	r3, r2
    7c6e:	009b      	lsls	r3, r3, #2
    7c70:	4413      	add	r3, r2
    7c72:	009b      	lsls	r3, r3, #2
    7c74:	440b      	add	r3, r1
    7c76:	3308      	adds	r3, #8
    7c78:	881b      	ldrh	r3, [r3, #0]
    7c7a:	4619      	mov	r1, r3
    7c7c:	6838      	ldr	r0, [r7, #0]
    7c7e:	4b54      	ldr	r3, [pc, #336]	; (7dd0 <_pwm_init+0x1fc>)
    7c80:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7c82:	2103      	movs	r1, #3
    7c84:	6838      	ldr	r0, [r7, #0]
    7c86:	4b53      	ldr	r3, [pc, #332]	; (7dd4 <_pwm_init+0x200>)
    7c88:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7c8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c8e:	494e      	ldr	r1, [pc, #312]	; (7dc8 <_pwm_init+0x1f4>)
    7c90:	4613      	mov	r3, r2
    7c92:	009b      	lsls	r3, r3, #2
    7c94:	4413      	add	r3, r2
    7c96:	009b      	lsls	r3, r3, #2
    7c98:	440b      	add	r3, r1
    7c9a:	3304      	adds	r3, #4
    7c9c:	681b      	ldr	r3, [r3, #0]
    7c9e:	f003 030c 	and.w	r3, r3, #12
    7ca2:	2b08      	cmp	r3, #8
    7ca4:	d11e      	bne.n	7ce4 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7ca6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7caa:	4947      	ldr	r1, [pc, #284]	; (7dc8 <_pwm_init+0x1f4>)
    7cac:	4613      	mov	r3, r2
    7cae:	009b      	lsls	r3, r3, #2
    7cb0:	4413      	add	r3, r2
    7cb2:	009b      	lsls	r3, r3, #2
    7cb4:	440b      	add	r3, r1
    7cb6:	330c      	adds	r3, #12
    7cb8:	681b      	ldr	r3, [r3, #0]
    7cba:	461a      	mov	r2, r3
    7cbc:	2100      	movs	r1, #0
    7cbe:	6838      	ldr	r0, [r7, #0]
    7cc0:	4b45      	ldr	r3, [pc, #276]	; (7dd8 <_pwm_init+0x204>)
    7cc2:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7cc4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cc8:	493f      	ldr	r1, [pc, #252]	; (7dc8 <_pwm_init+0x1f4>)
    7cca:	4613      	mov	r3, r2
    7ccc:	009b      	lsls	r3, r3, #2
    7cce:	4413      	add	r3, r2
    7cd0:	009b      	lsls	r3, r3, #2
    7cd2:	440b      	add	r3, r1
    7cd4:	3310      	adds	r3, #16
    7cd6:	681b      	ldr	r3, [r3, #0]
    7cd8:	461a      	mov	r2, r3
    7cda:	2101      	movs	r1, #1
    7cdc:	6838      	ldr	r0, [r7, #0]
    7cde:	4b3e      	ldr	r3, [pc, #248]	; (7dd8 <_pwm_init+0x204>)
    7ce0:	4798      	blx	r3
    7ce2:	e031      	b.n	7d48 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7ce4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ce8:	4937      	ldr	r1, [pc, #220]	; (7dc8 <_pwm_init+0x1f4>)
    7cea:	4613      	mov	r3, r2
    7cec:	009b      	lsls	r3, r3, #2
    7cee:	4413      	add	r3, r2
    7cf0:	009b      	lsls	r3, r3, #2
    7cf2:	440b      	add	r3, r1
    7cf4:	3304      	adds	r3, #4
    7cf6:	681b      	ldr	r3, [r3, #0]
    7cf8:	f003 030c 	and.w	r3, r3, #12
    7cfc:	2b00      	cmp	r3, #0
    7cfe:	d120      	bne.n	7d42 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7d00:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d04:	4930      	ldr	r1, [pc, #192]	; (7dc8 <_pwm_init+0x1f4>)
    7d06:	4613      	mov	r3, r2
    7d08:	009b      	lsls	r3, r3, #2
    7d0a:	4413      	add	r3, r2
    7d0c:	009b      	lsls	r3, r3, #2
    7d0e:	440b      	add	r3, r1
    7d10:	330c      	adds	r3, #12
    7d12:	681b      	ldr	r3, [r3, #0]
    7d14:	b29b      	uxth	r3, r3
    7d16:	461a      	mov	r2, r3
    7d18:	2100      	movs	r1, #0
    7d1a:	6838      	ldr	r0, [r7, #0]
    7d1c:	4b2f      	ldr	r3, [pc, #188]	; (7ddc <_pwm_init+0x208>)
    7d1e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7d20:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d24:	4928      	ldr	r1, [pc, #160]	; (7dc8 <_pwm_init+0x1f4>)
    7d26:	4613      	mov	r3, r2
    7d28:	009b      	lsls	r3, r3, #2
    7d2a:	4413      	add	r3, r2
    7d2c:	009b      	lsls	r3, r3, #2
    7d2e:	440b      	add	r3, r1
    7d30:	3310      	adds	r3, #16
    7d32:	681b      	ldr	r3, [r3, #0]
    7d34:	b29b      	uxth	r3, r3
    7d36:	461a      	mov	r2, r3
    7d38:	2101      	movs	r1, #1
    7d3a:	6838      	ldr	r0, [r7, #0]
    7d3c:	4b27      	ldr	r3, [pc, #156]	; (7ddc <_pwm_init+0x208>)
    7d3e:	4798      	blx	r3
    7d40:	e002      	b.n	7d48 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7d42:	f04f 33ff 	mov.w	r3, #4294967295
    7d46:	e02e      	b.n	7da6 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7d48:	6879      	ldr	r1, [r7, #4]
    7d4a:	6838      	ldr	r0, [r7, #0]
    7d4c:	4b24      	ldr	r3, [pc, #144]	; (7de0 <_pwm_init+0x20c>)
    7d4e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7d50:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d54:	491c      	ldr	r1, [pc, #112]	; (7dc8 <_pwm_init+0x1f4>)
    7d56:	4613      	mov	r3, r2
    7d58:	009b      	lsls	r3, r3, #2
    7d5a:	4413      	add	r3, r2
    7d5c:	009b      	lsls	r3, r3, #2
    7d5e:	440b      	add	r3, r1
    7d60:	3302      	adds	r3, #2
    7d62:	f9b3 3000 	ldrsh.w	r3, [r3]
    7d66:	4618      	mov	r0, r3
    7d68:	4b1e      	ldr	r3, [pc, #120]	; (7de4 <_pwm_init+0x210>)
    7d6a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7d6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d70:	4915      	ldr	r1, [pc, #84]	; (7dc8 <_pwm_init+0x1f4>)
    7d72:	4613      	mov	r3, r2
    7d74:	009b      	lsls	r3, r3, #2
    7d76:	4413      	add	r3, r2
    7d78:	009b      	lsls	r3, r3, #2
    7d7a:	440b      	add	r3, r1
    7d7c:	3302      	adds	r3, #2
    7d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
    7d82:	4618      	mov	r0, r3
    7d84:	4b18      	ldr	r3, [pc, #96]	; (7de8 <_pwm_init+0x214>)
    7d86:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7d88:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d8c:	490e      	ldr	r1, [pc, #56]	; (7dc8 <_pwm_init+0x1f4>)
    7d8e:	4613      	mov	r3, r2
    7d90:	009b      	lsls	r3, r3, #2
    7d92:	4413      	add	r3, r2
    7d94:	009b      	lsls	r3, r3, #2
    7d96:	440b      	add	r3, r1
    7d98:	3302      	adds	r3, #2
    7d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
    7d9e:	4618      	mov	r0, r3
    7da0:	4b12      	ldr	r3, [pc, #72]	; (7dec <_pwm_init+0x218>)
    7da2:	4798      	blx	r3

	return 0;
    7da4:	2300      	movs	r3, #0
}
    7da6:	4618      	mov	r0, r3
    7da8:	3710      	adds	r7, #16
    7daa:	46bd      	mov	sp, r7
    7dac:	bd80      	pop	{r7, pc}
    7dae:	bf00      	nop
    7db0:	00008175 	.word	0x00008175
    7db4:	00007599 	.word	0x00007599
    7db8:	00007739 	.word	0x00007739
    7dbc:	000076e9 	.word	0x000076e9
    7dc0:	00007575 	.word	0x00007575
    7dc4:	00007769 	.word	0x00007769
    7dc8:	200000e0 	.word	0x200000e0
    7dcc:	000077c9 	.word	0x000077c9
    7dd0:	0000778d 	.word	0x0000778d
    7dd4:	000077ab 	.word	0x000077ab
    7dd8:	000078c9 	.word	0x000078c9
    7ddc:	00007865 	.word	0x00007865
    7de0:	000081dd 	.word	0x000081dd
    7de4:	000074f5 	.word	0x000074f5
    7de8:	00007539 	.word	0x00007539
    7dec:	000074b9 	.word	0x000074b9

00007df0 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    7df0:	b580      	push	{r7, lr}
    7df2:	b084      	sub	sp, #16
    7df4:	af00      	add	r7, sp, #0
    7df6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7df8:	687b      	ldr	r3, [r7, #4]
    7dfa:	68db      	ldr	r3, [r3, #12]
    7dfc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7dfe:	68f8      	ldr	r0, [r7, #12]
    7e00:	4b10      	ldr	r3, [pc, #64]	; (7e44 <_tc_timer_deinit+0x54>)
    7e02:	4798      	blx	r3
    7e04:	4603      	mov	r3, r0
    7e06:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7e08:	22f9      	movs	r2, #249	; 0xf9
    7e0a:	490f      	ldr	r1, [pc, #60]	; (7e48 <_tc_timer_deinit+0x58>)
    7e0c:	2001      	movs	r0, #1
    7e0e:	4b0f      	ldr	r3, [pc, #60]	; (7e4c <_tc_timer_deinit+0x5c>)
    7e10:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    7e12:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7e16:	490e      	ldr	r1, [pc, #56]	; (7e50 <_tc_timer_deinit+0x60>)
    7e18:	4613      	mov	r3, r2
    7e1a:	009b      	lsls	r3, r3, #2
    7e1c:	4413      	add	r3, r2
    7e1e:	009b      	lsls	r3, r3, #2
    7e20:	440b      	add	r3, r1
    7e22:	3302      	adds	r3, #2
    7e24:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e28:	4618      	mov	r0, r3
    7e2a:	4b0a      	ldr	r3, [pc, #40]	; (7e54 <_tc_timer_deinit+0x64>)
    7e2c:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7e2e:	68f8      	ldr	r0, [r7, #12]
    7e30:	4b09      	ldr	r3, [pc, #36]	; (7e58 <_tc_timer_deinit+0x68>)
    7e32:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    7e34:	68f8      	ldr	r0, [r7, #12]
    7e36:	4b09      	ldr	r3, [pc, #36]	; (7e5c <_tc_timer_deinit+0x6c>)
    7e38:	4798      	blx	r3
}
    7e3a:	bf00      	nop
    7e3c:	3710      	adds	r7, #16
    7e3e:	46bd      	mov	sp, r7
    7e40:	bd80      	pop	{r7, pc}
    7e42:	bf00      	nop
    7e44:	00008175 	.word	0x00008175
    7e48:	0000f6d8 	.word	0x0000f6d8
    7e4c:	00003719 	.word	0x00003719
    7e50:	200000e0 	.word	0x200000e0
    7e54:	000074f5 	.word	0x000074f5
    7e58:	000076e9 	.word	0x000076e9
    7e5c:	00007661 	.word	0x00007661

00007e60 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    7e60:	b580      	push	{r7, lr}
    7e62:	b082      	sub	sp, #8
    7e64:	af00      	add	r7, sp, #0
    7e66:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7e68:	687b      	ldr	r3, [r7, #4]
    7e6a:	68db      	ldr	r3, [r3, #12]
    7e6c:	4618      	mov	r0, r3
    7e6e:	4b03      	ldr	r3, [pc, #12]	; (7e7c <_tc_timer_start+0x1c>)
    7e70:	4798      	blx	r3
}
    7e72:	bf00      	nop
    7e74:	3708      	adds	r7, #8
    7e76:	46bd      	mov	sp, r7
    7e78:	bd80      	pop	{r7, pc}
    7e7a:	bf00      	nop
    7e7c:	00007689 	.word	0x00007689

00007e80 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7e80:	b580      	push	{r7, lr}
    7e82:	b082      	sub	sp, #8
    7e84:	af00      	add	r7, sp, #0
    7e86:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	68db      	ldr	r3, [r3, #12]
    7e8c:	4618      	mov	r0, r3
    7e8e:	4b03      	ldr	r3, [pc, #12]	; (7e9c <_tc_timer_stop+0x1c>)
    7e90:	4798      	blx	r3
}
    7e92:	bf00      	nop
    7e94:	3708      	adds	r7, #8
    7e96:	46bd      	mov	sp, r7
    7e98:	bd80      	pop	{r7, pc}
    7e9a:	bf00      	nop
    7e9c:	000076e9 	.word	0x000076e9

00007ea0 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7ea0:	b580      	push	{r7, lr}
    7ea2:	b084      	sub	sp, #16
    7ea4:	af00      	add	r7, sp, #0
    7ea6:	6078      	str	r0, [r7, #4]
    7ea8:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    7eaa:	687b      	ldr	r3, [r7, #4]
    7eac:	68db      	ldr	r3, [r3, #12]
    7eae:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7eb0:	68f8      	ldr	r0, [r7, #12]
    7eb2:	4b14      	ldr	r3, [pc, #80]	; (7f04 <_tc_timer_set_period+0x64>)
    7eb4:	4798      	blx	r3
    7eb6:	4603      	mov	r3, r0
    7eb8:	2b02      	cmp	r3, #2
    7eba:	d105      	bne.n	7ec8 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    7ebc:	683a      	ldr	r2, [r7, #0]
    7ebe:	2100      	movs	r1, #0
    7ec0:	68f8      	ldr	r0, [r7, #12]
    7ec2:	4b11      	ldr	r3, [pc, #68]	; (7f08 <_tc_timer_set_period+0x68>)
    7ec4:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    7ec6:	e019      	b.n	7efc <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7ec8:	68f8      	ldr	r0, [r7, #12]
    7eca:	4b0e      	ldr	r3, [pc, #56]	; (7f04 <_tc_timer_set_period+0x64>)
    7ecc:	4798      	blx	r3
    7ece:	4603      	mov	r3, r0
    7ed0:	2b00      	cmp	r3, #0
    7ed2:	d107      	bne.n	7ee4 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7ed4:	683b      	ldr	r3, [r7, #0]
    7ed6:	b29b      	uxth	r3, r3
    7ed8:	461a      	mov	r2, r3
    7eda:	2100      	movs	r1, #0
    7edc:	68f8      	ldr	r0, [r7, #12]
    7ede:	4b0b      	ldr	r3, [pc, #44]	; (7f0c <_tc_timer_set_period+0x6c>)
    7ee0:	4798      	blx	r3
}
    7ee2:	e00b      	b.n	7efc <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7ee4:	68f8      	ldr	r0, [r7, #12]
    7ee6:	4b07      	ldr	r3, [pc, #28]	; (7f04 <_tc_timer_set_period+0x64>)
    7ee8:	4798      	blx	r3
    7eea:	4603      	mov	r3, r0
    7eec:	2b01      	cmp	r3, #1
    7eee:	d105      	bne.n	7efc <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7ef0:	683b      	ldr	r3, [r7, #0]
    7ef2:	b2db      	uxtb	r3, r3
    7ef4:	4619      	mov	r1, r3
    7ef6:	68f8      	ldr	r0, [r7, #12]
    7ef8:	4b05      	ldr	r3, [pc, #20]	; (7f10 <_tc_timer_set_period+0x70>)
    7efa:	4798      	blx	r3
}
    7efc:	bf00      	nop
    7efe:	3710      	adds	r7, #16
    7f00:	46bd      	mov	sp, r7
    7f02:	bd80      	pop	{r7, pc}
    7f04:	00007711 	.word	0x00007711
    7f08:	000078c9 	.word	0x000078c9
    7f0c:	00007865 	.word	0x00007865
    7f10:	000077e9 	.word	0x000077e9

00007f14 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    7f14:	b580      	push	{r7, lr}
    7f16:	b084      	sub	sp, #16
    7f18:	af00      	add	r7, sp, #0
    7f1a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7f1c:	687b      	ldr	r3, [r7, #4]
    7f1e:	68db      	ldr	r3, [r3, #12]
    7f20:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7f22:	68f8      	ldr	r0, [r7, #12]
    7f24:	4b13      	ldr	r3, [pc, #76]	; (7f74 <_tc_timer_get_period+0x60>)
    7f26:	4798      	blx	r3
    7f28:	4603      	mov	r3, r0
    7f2a:	2b02      	cmp	r3, #2
    7f2c:	d105      	bne.n	7f3a <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    7f2e:	2100      	movs	r1, #0
    7f30:	68f8      	ldr	r0, [r7, #12]
    7f32:	4b11      	ldr	r3, [pc, #68]	; (7f78 <_tc_timer_get_period+0x64>)
    7f34:	4798      	blx	r3
    7f36:	4603      	mov	r3, r0
    7f38:	e017      	b.n	7f6a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7f3a:	68f8      	ldr	r0, [r7, #12]
    7f3c:	4b0d      	ldr	r3, [pc, #52]	; (7f74 <_tc_timer_get_period+0x60>)
    7f3e:	4798      	blx	r3
    7f40:	4603      	mov	r3, r0
    7f42:	2b00      	cmp	r3, #0
    7f44:	d105      	bne.n	7f52 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    7f46:	2100      	movs	r1, #0
    7f48:	68f8      	ldr	r0, [r7, #12]
    7f4a:	4b0c      	ldr	r3, [pc, #48]	; (7f7c <_tc_timer_get_period+0x68>)
    7f4c:	4798      	blx	r3
    7f4e:	4603      	mov	r3, r0
    7f50:	e00b      	b.n	7f6a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7f52:	68f8      	ldr	r0, [r7, #12]
    7f54:	4b07      	ldr	r3, [pc, #28]	; (7f74 <_tc_timer_get_period+0x60>)
    7f56:	4798      	blx	r3
    7f58:	4603      	mov	r3, r0
    7f5a:	2b01      	cmp	r3, #1
    7f5c:	d104      	bne.n	7f68 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    7f5e:	68f8      	ldr	r0, [r7, #12]
    7f60:	4b07      	ldr	r3, [pc, #28]	; (7f80 <_tc_timer_get_period+0x6c>)
    7f62:	4798      	blx	r3
    7f64:	4603      	mov	r3, r0
    7f66:	e000      	b.n	7f6a <_tc_timer_get_period+0x56>
	}

	return 0;
    7f68:	2300      	movs	r3, #0
}
    7f6a:	4618      	mov	r0, r3
    7f6c:	3710      	adds	r7, #16
    7f6e:	46bd      	mov	sp, r7
    7f70:	bd80      	pop	{r7, pc}
    7f72:	bf00      	nop
    7f74:	00007711 	.word	0x00007711
    7f78:	000078f9 	.word	0x000078f9
    7f7c:	00007899 	.word	0x00007899
    7f80:	00007811 	.word	0x00007811

00007f84 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    7f84:	b580      	push	{r7, lr}
    7f86:	b082      	sub	sp, #8
    7f88:	af00      	add	r7, sp, #0
    7f8a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7f8c:	687b      	ldr	r3, [r7, #4]
    7f8e:	68db      	ldr	r3, [r3, #12]
    7f90:	4618      	mov	r0, r3
    7f92:	4b03      	ldr	r3, [pc, #12]	; (7fa0 <_tc_timer_is_started+0x1c>)
    7f94:	4798      	blx	r3
    7f96:	4603      	mov	r3, r0
}
    7f98:	4618      	mov	r0, r3
    7f9a:	3708      	adds	r7, #8
    7f9c:	46bd      	mov	sp, r7
    7f9e:	bd80      	pop	{r7, pc}
    7fa0:	000076b1 	.word	0x000076b1

00007fa4 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7fa4:	b480      	push	{r7}
    7fa6:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    7fa8:	4b02      	ldr	r3, [pc, #8]	; (7fb4 <_tc_get_timer+0x10>)
}
    7faa:	4618      	mov	r0, r3
    7fac:	46bd      	mov	sp, r7
    7fae:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fb2:	4770      	bx	lr
    7fb4:	20000158 	.word	0x20000158

00007fb8 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7fb8:	b480      	push	{r7}
    7fba:	af00      	add	r7, sp, #0
	return NULL;
    7fbc:	2300      	movs	r3, #0
}
    7fbe:	4618      	mov	r0, r3
    7fc0:	46bd      	mov	sp, r7
    7fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fc6:	4770      	bx	lr

00007fc8 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    7fc8:	b580      	push	{r7, lr}
    7fca:	b084      	sub	sp, #16
    7fcc:	af00      	add	r7, sp, #0
    7fce:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7fd0:	687b      	ldr	r3, [r7, #4]
    7fd2:	68db      	ldr	r3, [r3, #12]
    7fd4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7fd6:	68f8      	ldr	r0, [r7, #12]
    7fd8:	4b0e      	ldr	r3, [pc, #56]	; (8014 <_tc_timer_set_irq+0x4c>)
    7fda:	4798      	blx	r3
    7fdc:	4603      	mov	r3, r0
    7fde:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7fe0:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    7fe4:	490c      	ldr	r1, [pc, #48]	; (8018 <_tc_timer_set_irq+0x50>)
    7fe6:	2001      	movs	r0, #1
    7fe8:	4b0c      	ldr	r3, [pc, #48]	; (801c <_tc_timer_set_irq+0x54>)
    7fea:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    7fec:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7ff0:	490b      	ldr	r1, [pc, #44]	; (8020 <_tc_timer_set_irq+0x58>)
    7ff2:	4613      	mov	r3, r2
    7ff4:	009b      	lsls	r3, r3, #2
    7ff6:	4413      	add	r3, r2
    7ff8:	009b      	lsls	r3, r3, #2
    7ffa:	440b      	add	r3, r1
    7ffc:	3302      	adds	r3, #2
    7ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
    8002:	b2db      	uxtb	r3, r3
    8004:	4618      	mov	r0, r3
    8006:	4b07      	ldr	r3, [pc, #28]	; (8024 <_tc_timer_set_irq+0x5c>)
    8008:	4798      	blx	r3
}
    800a:	bf00      	nop
    800c:	3710      	adds	r7, #16
    800e:	46bd      	mov	sp, r7
    8010:	bd80      	pop	{r7, pc}
    8012:	bf00      	nop
    8014:	00008175 	.word	0x00008175
    8018:	0000f6d8 	.word	0x0000f6d8
    801c:	00003719 	.word	0x00003719
    8020:	200000e0 	.word	0x200000e0
    8024:	00003f65 	.word	0x00003f65

00008028 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8028:	b580      	push	{r7, lr}
    802a:	b084      	sub	sp, #16
    802c:	af00      	add	r7, sp, #0
    802e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8030:	687b      	ldr	r3, [r7, #4]
    8032:	68db      	ldr	r3, [r3, #12]
    8034:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8036:	68f8      	ldr	r0, [r7, #12]
    8038:	4b07      	ldr	r3, [pc, #28]	; (8058 <tc_interrupt_handler+0x30>)
    803a:	4798      	blx	r3
    803c:	4603      	mov	r3, r0
    803e:	2b00      	cmp	r3, #0
    8040:	d006      	beq.n	8050 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8042:	68f8      	ldr	r0, [r7, #12]
    8044:	4b05      	ldr	r3, [pc, #20]	; (805c <tc_interrupt_handler+0x34>)
    8046:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8048:	687b      	ldr	r3, [r7, #4]
    804a:	681b      	ldr	r3, [r3, #0]
    804c:	6878      	ldr	r0, [r7, #4]
    804e:	4798      	blx	r3
	}
}
    8050:	bf00      	nop
    8052:	3710      	adds	r7, #16
    8054:	46bd      	mov	sp, r7
    8056:	bd80      	pop	{r7, pc}
    8058:	000075c1 	.word	0x000075c1
    805c:	000075e9 	.word	0x000075e9

00008060 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8060:	b580      	push	{r7, lr}
    8062:	b084      	sub	sp, #16
    8064:	af00      	add	r7, sp, #0
    8066:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	691b      	ldr	r3, [r3, #16]
    806c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    806e:	68f8      	ldr	r0, [r7, #12]
    8070:	4b12      	ldr	r3, [pc, #72]	; (80bc <tc_pwm_interrupt_handler+0x5c>)
    8072:	4798      	blx	r3
    8074:	4603      	mov	r3, r0
    8076:	2b00      	cmp	r3, #0
    8078:	d00a      	beq.n	8090 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    807a:	68f8      	ldr	r0, [r7, #12]
    807c:	4b10      	ldr	r3, [pc, #64]	; (80c0 <tc_pwm_interrupt_handler+0x60>)
    807e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8080:	687b      	ldr	r3, [r7, #4]
    8082:	681b      	ldr	r3, [r3, #0]
    8084:	2b00      	cmp	r3, #0
    8086:	d003      	beq.n	8090 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8088:	687b      	ldr	r3, [r7, #4]
    808a:	681b      	ldr	r3, [r3, #0]
    808c:	6878      	ldr	r0, [r7, #4]
    808e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8090:	68f8      	ldr	r0, [r7, #12]
    8092:	4b0c      	ldr	r3, [pc, #48]	; (80c4 <tc_pwm_interrupt_handler+0x64>)
    8094:	4798      	blx	r3
    8096:	4603      	mov	r3, r0
    8098:	2b00      	cmp	r3, #0
    809a:	d00a      	beq.n	80b2 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    809c:	68f8      	ldr	r0, [r7, #12]
    809e:	4b0a      	ldr	r3, [pc, #40]	; (80c8 <tc_pwm_interrupt_handler+0x68>)
    80a0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    80a2:	687b      	ldr	r3, [r7, #4]
    80a4:	685b      	ldr	r3, [r3, #4]
    80a6:	2b00      	cmp	r3, #0
    80a8:	d003      	beq.n	80b2 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    80aa:	687b      	ldr	r3, [r7, #4]
    80ac:	685b      	ldr	r3, [r3, #4]
    80ae:	6878      	ldr	r0, [r7, #4]
    80b0:	4798      	blx	r3
		}
	}
}
    80b2:	bf00      	nop
    80b4:	3710      	adds	r7, #16
    80b6:	46bd      	mov	sp, r7
    80b8:	bd80      	pop	{r7, pc}
    80ba:	bf00      	nop
    80bc:	000075c1 	.word	0x000075c1
    80c0:	000075e9 	.word	0x000075e9
    80c4:	00007637 	.word	0x00007637
    80c8:	00007603 	.word	0x00007603

000080cc <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    80cc:	b580      	push	{r7, lr}
    80ce:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    80d0:	4b03      	ldr	r3, [pc, #12]	; (80e0 <TC0_Handler+0x14>)
    80d2:	681b      	ldr	r3, [r3, #0]
    80d4:	4618      	mov	r0, r3
    80d6:	4b03      	ldr	r3, [pc, #12]	; (80e4 <TC0_Handler+0x18>)
    80d8:	4798      	blx	r3
}
    80da:	bf00      	nop
    80dc:	bd80      	pop	{r7, pc}
    80de:	bf00      	nop
    80e0:	20002128 	.word	0x20002128
    80e4:	00008029 	.word	0x00008029

000080e8 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    80e8:	b580      	push	{r7, lr}
    80ea:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    80ec:	4b03      	ldr	r3, [pc, #12]	; (80fc <TC2_Handler+0x14>)
    80ee:	681b      	ldr	r3, [r3, #0]
    80f0:	4618      	mov	r0, r3
    80f2:	4b03      	ldr	r3, [pc, #12]	; (8100 <TC2_Handler+0x18>)
    80f4:	4798      	blx	r3
}
    80f6:	bf00      	nop
    80f8:	bd80      	pop	{r7, pc}
    80fa:	bf00      	nop
    80fc:	2000212c 	.word	0x2000212c
    8100:	00008029 	.word	0x00008029

00008104 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8104:	b580      	push	{r7, lr}
    8106:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8108:	4b03      	ldr	r3, [pc, #12]	; (8118 <TC4_Handler+0x14>)
    810a:	681b      	ldr	r3, [r3, #0]
    810c:	4618      	mov	r0, r3
    810e:	4b03      	ldr	r3, [pc, #12]	; (811c <TC4_Handler+0x18>)
    8110:	4798      	blx	r3
}
    8112:	bf00      	nop
    8114:	bd80      	pop	{r7, pc}
    8116:	bf00      	nop
    8118:	20002130 	.word	0x20002130
    811c:	00008029 	.word	0x00008029

00008120 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8120:	b580      	push	{r7, lr}
    8122:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8124:	4b03      	ldr	r3, [pc, #12]	; (8134 <TC5_Handler+0x14>)
    8126:	681b      	ldr	r3, [r3, #0]
    8128:	4618      	mov	r0, r3
    812a:	4b03      	ldr	r3, [pc, #12]	; (8138 <TC5_Handler+0x18>)
    812c:	4798      	blx	r3
}
    812e:	bf00      	nop
    8130:	bd80      	pop	{r7, pc}
    8132:	bf00      	nop
    8134:	20002134 	.word	0x20002134
    8138:	00008029 	.word	0x00008029

0000813c <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    813c:	b580      	push	{r7, lr}
    813e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8140:	4b03      	ldr	r3, [pc, #12]	; (8150 <TC6_Handler+0x14>)
    8142:	681b      	ldr	r3, [r3, #0]
    8144:	4618      	mov	r0, r3
    8146:	4b03      	ldr	r3, [pc, #12]	; (8154 <TC6_Handler+0x18>)
    8148:	4798      	blx	r3
}
    814a:	bf00      	nop
    814c:	bd80      	pop	{r7, pc}
    814e:	bf00      	nop
    8150:	20002138 	.word	0x20002138
    8154:	00008029 	.word	0x00008029

00008158 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8158:	b580      	push	{r7, lr}
    815a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    815c:	4b03      	ldr	r3, [pc, #12]	; (816c <TC7_Handler+0x14>)
    815e:	681b      	ldr	r3, [r3, #0]
    8160:	4618      	mov	r0, r3
    8162:	4b03      	ldr	r3, [pc, #12]	; (8170 <TC7_Handler+0x18>)
    8164:	4798      	blx	r3
}
    8166:	bf00      	nop
    8168:	bd80      	pop	{r7, pc}
    816a:	bf00      	nop
    816c:	2000213c 	.word	0x2000213c
    8170:	00008061 	.word	0x00008061

00008174 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8174:	b580      	push	{r7, lr}
    8176:	b084      	sub	sp, #16
    8178:	af00      	add	r7, sp, #0
    817a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    817c:	6878      	ldr	r0, [r7, #4]
    817e:	4b13      	ldr	r3, [pc, #76]	; (81cc <get_tc_index+0x58>)
    8180:	4798      	blx	r3
    8182:	4603      	mov	r3, r0
    8184:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8186:	2300      	movs	r3, #0
    8188:	73fb      	strb	r3, [r7, #15]
    818a:	e010      	b.n	81ae <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    818c:	7bfa      	ldrb	r2, [r7, #15]
    818e:	4910      	ldr	r1, [pc, #64]	; (81d0 <get_tc_index+0x5c>)
    8190:	4613      	mov	r3, r2
    8192:	009b      	lsls	r3, r3, #2
    8194:	4413      	add	r3, r2
    8196:	009b      	lsls	r3, r3, #2
    8198:	440b      	add	r3, r1
    819a:	781b      	ldrb	r3, [r3, #0]
    819c:	7bba      	ldrb	r2, [r7, #14]
    819e:	429a      	cmp	r2, r3
    81a0:	d102      	bne.n	81a8 <get_tc_index+0x34>
			return i;
    81a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    81a6:	e00d      	b.n	81c4 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    81a8:	7bfb      	ldrb	r3, [r7, #15]
    81aa:	3301      	adds	r3, #1
    81ac:	73fb      	strb	r3, [r7, #15]
    81ae:	7bfb      	ldrb	r3, [r7, #15]
    81b0:	2b05      	cmp	r3, #5
    81b2:	d9eb      	bls.n	818c <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    81b4:	f240 221d 	movw	r2, #541	; 0x21d
    81b8:	4906      	ldr	r1, [pc, #24]	; (81d4 <get_tc_index+0x60>)
    81ba:	2000      	movs	r0, #0
    81bc:	4b06      	ldr	r3, [pc, #24]	; (81d8 <get_tc_index+0x64>)
    81be:	4798      	blx	r3
	return -1;
    81c0:	f04f 33ff 	mov.w	r3, #4294967295
}
    81c4:	4618      	mov	r0, r3
    81c6:	3710      	adds	r7, #16
    81c8:	46bd      	mov	sp, r7
    81ca:	bd80      	pop	{r7, pc}
    81cc:	00008279 	.word	0x00008279
    81d0:	200000e0 	.word	0x200000e0
    81d4:	0000f6d8 	.word	0x0000f6d8
    81d8:	00003719 	.word	0x00003719

000081dc <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    81dc:	b480      	push	{r7}
    81de:	b083      	sub	sp, #12
    81e0:	af00      	add	r7, sp, #0
    81e2:	6078      	str	r0, [r7, #4]
    81e4:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    81e6:	687b      	ldr	r3, [r7, #4]
    81e8:	4a17      	ldr	r2, [pc, #92]	; (8248 <_tc_init_irq_param+0x6c>)
    81ea:	4293      	cmp	r3, r2
    81ec:	d102      	bne.n	81f4 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    81ee:	4a17      	ldr	r2, [pc, #92]	; (824c <_tc_init_irq_param+0x70>)
    81f0:	683b      	ldr	r3, [r7, #0]
    81f2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    81f4:	687b      	ldr	r3, [r7, #4]
    81f6:	4a16      	ldr	r2, [pc, #88]	; (8250 <_tc_init_irq_param+0x74>)
    81f8:	4293      	cmp	r3, r2
    81fa:	d102      	bne.n	8202 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    81fc:	4a15      	ldr	r2, [pc, #84]	; (8254 <_tc_init_irq_param+0x78>)
    81fe:	683b      	ldr	r3, [r7, #0]
    8200:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8202:	687b      	ldr	r3, [r7, #4]
    8204:	4a14      	ldr	r2, [pc, #80]	; (8258 <_tc_init_irq_param+0x7c>)
    8206:	4293      	cmp	r3, r2
    8208:	d102      	bne.n	8210 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    820a:	4a14      	ldr	r2, [pc, #80]	; (825c <_tc_init_irq_param+0x80>)
    820c:	683b      	ldr	r3, [r7, #0]
    820e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8210:	687b      	ldr	r3, [r7, #4]
    8212:	4a13      	ldr	r2, [pc, #76]	; (8260 <_tc_init_irq_param+0x84>)
    8214:	4293      	cmp	r3, r2
    8216:	d102      	bne.n	821e <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8218:	4a12      	ldr	r2, [pc, #72]	; (8264 <_tc_init_irq_param+0x88>)
    821a:	683b      	ldr	r3, [r7, #0]
    821c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    821e:	687b      	ldr	r3, [r7, #4]
    8220:	4a11      	ldr	r2, [pc, #68]	; (8268 <_tc_init_irq_param+0x8c>)
    8222:	4293      	cmp	r3, r2
    8224:	d102      	bne.n	822c <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8226:	4a11      	ldr	r2, [pc, #68]	; (826c <_tc_init_irq_param+0x90>)
    8228:	683b      	ldr	r3, [r7, #0]
    822a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    822c:	687b      	ldr	r3, [r7, #4]
    822e:	4a10      	ldr	r2, [pc, #64]	; (8270 <_tc_init_irq_param+0x94>)
    8230:	4293      	cmp	r3, r2
    8232:	d102      	bne.n	823a <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8234:	4a0f      	ldr	r2, [pc, #60]	; (8274 <_tc_init_irq_param+0x98>)
    8236:	683b      	ldr	r3, [r7, #0]
    8238:	6013      	str	r3, [r2, #0]
	}
}
    823a:	bf00      	nop
    823c:	370c      	adds	r7, #12
    823e:	46bd      	mov	sp, r7
    8240:	f85d 7b04 	ldr.w	r7, [sp], #4
    8244:	4770      	bx	lr
    8246:	bf00      	nop
    8248:	40003800 	.word	0x40003800
    824c:	20002128 	.word	0x20002128
    8250:	4101a000 	.word	0x4101a000
    8254:	2000212c 	.word	0x2000212c
    8258:	42001400 	.word	0x42001400
    825c:	20002130 	.word	0x20002130
    8260:	42001800 	.word	0x42001800
    8264:	20002134 	.word	0x20002134
    8268:	43001400 	.word	0x43001400
    826c:	20002138 	.word	0x20002138
    8270:	43001800 	.word	0x43001800
    8274:	2000213c 	.word	0x2000213c

00008278 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8278:	b4b0      	push	{r4, r5, r7}
    827a:	b08d      	sub	sp, #52	; 0x34
    827c:	af00      	add	r7, sp, #0
    827e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8280:	4b13      	ldr	r3, [pc, #76]	; (82d0 <_get_hardware_offset+0x58>)
    8282:	f107 040c 	add.w	r4, r7, #12
    8286:	461d      	mov	r5, r3
    8288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    828a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    828c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8294:	2300      	movs	r3, #0
    8296:	62fb      	str	r3, [r7, #44]	; 0x2c
    8298:	e010      	b.n	82bc <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    829a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    829c:	009b      	lsls	r3, r3, #2
    829e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    82a2:	4413      	add	r3, r2
    82a4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    82a8:	461a      	mov	r2, r3
    82aa:	687b      	ldr	r3, [r7, #4]
    82ac:	429a      	cmp	r2, r3
    82ae:	d102      	bne.n	82b6 <_get_hardware_offset+0x3e>
			return i;
    82b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82b2:	b2db      	uxtb	r3, r3
    82b4:	e006      	b.n	82c4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    82b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82b8:	3301      	adds	r3, #1
    82ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    82bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82be:	2b07      	cmp	r3, #7
    82c0:	d9eb      	bls.n	829a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    82c2:	2300      	movs	r3, #0
}
    82c4:	4618      	mov	r0, r3
    82c6:	3734      	adds	r7, #52	; 0x34
    82c8:	46bd      	mov	sp, r7
    82ca:	bcb0      	pop	{r4, r5, r7}
    82cc:	4770      	bx	lr
    82ce:	bf00      	nop
    82d0:	0000f6ec 	.word	0x0000f6ec

000082d4 <__NVIC_EnableIRQ>:
{
    82d4:	b480      	push	{r7}
    82d6:	b083      	sub	sp, #12
    82d8:	af00      	add	r7, sp, #0
    82da:	4603      	mov	r3, r0
    82dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    82de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82e2:	2b00      	cmp	r3, #0
    82e4:	db0b      	blt.n	82fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82e6:	4909      	ldr	r1, [pc, #36]	; (830c <__NVIC_EnableIRQ+0x38>)
    82e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    82ec:	095b      	lsrs	r3, r3, #5
    82ee:	88fa      	ldrh	r2, [r7, #6]
    82f0:	f002 021f 	and.w	r2, r2, #31
    82f4:	2001      	movs	r0, #1
    82f6:	fa00 f202 	lsl.w	r2, r0, r2
    82fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    82fe:	bf00      	nop
    8300:	370c      	adds	r7, #12
    8302:	46bd      	mov	sp, r7
    8304:	f85d 7b04 	ldr.w	r7, [sp], #4
    8308:	4770      	bx	lr
    830a:	bf00      	nop
    830c:	e000e100 	.word	0xe000e100

00008310 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8310:	b480      	push	{r7}
    8312:	b087      	sub	sp, #28
    8314:	af00      	add	r7, sp, #0
    8316:	60f8      	str	r0, [r7, #12]
    8318:	460b      	mov	r3, r1
    831a:	607a      	str	r2, [r7, #4]
    831c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    831e:	7afa      	ldrb	r2, [r7, #11]
    8320:	68f9      	ldr	r1, [r7, #12]
    8322:	4613      	mov	r3, r2
    8324:	009b      	lsls	r3, r3, #2
    8326:	4413      	add	r3, r2
    8328:	009b      	lsls	r3, r3, #2
    832a:	440b      	add	r3, r1
    832c:	3340      	adds	r3, #64	; 0x40
    832e:	681b      	ldr	r3, [r3, #0]
    8330:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8332:	697a      	ldr	r2, [r7, #20]
    8334:	687b      	ldr	r3, [r7, #4]
    8336:	4013      	ands	r3, r2
    8338:	617b      	str	r3, [r7, #20]
	return tmp;
    833a:	697b      	ldr	r3, [r7, #20]
}
    833c:	4618      	mov	r0, r3
    833e:	371c      	adds	r7, #28
    8340:	46bd      	mov	sp, r7
    8342:	f85d 7b04 	ldr.w	r7, [sp], #4
    8346:	4770      	bx	lr

00008348 <hri_oscctrl_get_STATUS_reg>:
{
    8348:	b480      	push	{r7}
    834a:	b085      	sub	sp, #20
    834c:	af00      	add	r7, sp, #0
    834e:	6078      	str	r0, [r7, #4]
    8350:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8352:	687b      	ldr	r3, [r7, #4]
    8354:	691b      	ldr	r3, [r3, #16]
    8356:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8358:	68fa      	ldr	r2, [r7, #12]
    835a:	683b      	ldr	r3, [r7, #0]
    835c:	4013      	ands	r3, r2
    835e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8360:	68fb      	ldr	r3, [r7, #12]
}
    8362:	4618      	mov	r0, r3
    8364:	3714      	adds	r7, #20
    8366:	46bd      	mov	sp, r7
    8368:	f85d 7b04 	ldr.w	r7, [sp], #4
    836c:	4770      	bx	lr

0000836e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    836e:	b480      	push	{r7}
    8370:	b085      	sub	sp, #20
    8372:	af00      	add	r7, sp, #0
    8374:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8376:	687b      	ldr	r3, [r7, #4]
    8378:	f893 3020 	ldrb.w	r3, [r3, #32]
    837c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    837e:	7bfb      	ldrb	r3, [r7, #15]
    8380:	f003 0301 	and.w	r3, r3, #1
    8384:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8386:	7bfb      	ldrb	r3, [r7, #15]
    8388:	2b00      	cmp	r3, #0
    838a:	bf14      	ite	ne
    838c:	2301      	movne	r3, #1
    838e:	2300      	moveq	r3, #0
    8390:	b2db      	uxtb	r3, r3
}
    8392:	4618      	mov	r0, r3
    8394:	3714      	adds	r7, #20
    8396:	46bd      	mov	sp, r7
    8398:	f85d 7b04 	ldr.w	r7, [sp], #4
    839c:	4770      	bx	lr

0000839e <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    839e:	b480      	push	{r7}
    83a0:	b083      	sub	sp, #12
    83a2:	af00      	add	r7, sp, #0
    83a4:	6078      	str	r0, [r7, #4]
    83a6:	460b      	mov	r3, r1
    83a8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    83aa:	bf00      	nop
    83ac:	687b      	ldr	r3, [r7, #4]
    83ae:	789b      	ldrb	r3, [r3, #2]
    83b0:	b2da      	uxtb	r2, r3
    83b2:	78fb      	ldrb	r3, [r7, #3]
    83b4:	4013      	ands	r3, r2
    83b6:	b2db      	uxtb	r3, r3
    83b8:	2b00      	cmp	r3, #0
    83ba:	d1f7      	bne.n	83ac <hri_usb_wait_for_sync+0xe>
	};
}
    83bc:	bf00      	nop
    83be:	370c      	adds	r7, #12
    83c0:	46bd      	mov	sp, r7
    83c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83c6:	4770      	bx	lr

000083c8 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    83c8:	b480      	push	{r7}
    83ca:	b083      	sub	sp, #12
    83cc:	af00      	add	r7, sp, #0
    83ce:	6078      	str	r0, [r7, #4]
    83d0:	460b      	mov	r3, r1
    83d2:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    83d4:	687b      	ldr	r3, [r7, #4]
    83d6:	789b      	ldrb	r3, [r3, #2]
    83d8:	b2da      	uxtb	r2, r3
    83da:	78fb      	ldrb	r3, [r7, #3]
    83dc:	4013      	ands	r3, r2
    83de:	b2db      	uxtb	r3, r3
    83e0:	2b00      	cmp	r3, #0
    83e2:	bf14      	ite	ne
    83e4:	2301      	movne	r3, #1
    83e6:	2300      	moveq	r3, #0
    83e8:	b2db      	uxtb	r3, r3
}
    83ea:	4618      	mov	r0, r3
    83ec:	370c      	adds	r7, #12
    83ee:	46bd      	mov	sp, r7
    83f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    83f4:	4770      	bx	lr

000083f6 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    83f6:	b480      	push	{r7}
    83f8:	b085      	sub	sp, #20
    83fa:	af00      	add	r7, sp, #0
    83fc:	6078      	str	r0, [r7, #4]
    83fe:	460b      	mov	r3, r1
    8400:	70fb      	strb	r3, [r7, #3]
    8402:	4613      	mov	r3, r2
    8404:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8406:	78fb      	ldrb	r3, [r7, #3]
    8408:	687a      	ldr	r2, [r7, #4]
    840a:	3308      	adds	r3, #8
    840c:	015b      	lsls	r3, r3, #5
    840e:	4413      	add	r3, r2
    8410:	3307      	adds	r3, #7
    8412:	781b      	ldrb	r3, [r3, #0]
    8414:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8416:	7bfa      	ldrb	r2, [r7, #15]
    8418:	78bb      	ldrb	r3, [r7, #2]
    841a:	4013      	ands	r3, r2
    841c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    841e:	7bfb      	ldrb	r3, [r7, #15]
}
    8420:	4618      	mov	r0, r3
    8422:	3714      	adds	r7, #20
    8424:	46bd      	mov	sp, r7
    8426:	f85d 7b04 	ldr.w	r7, [sp], #4
    842a:	4770      	bx	lr

0000842c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    842c:	b480      	push	{r7}
    842e:	b083      	sub	sp, #12
    8430:	af00      	add	r7, sp, #0
    8432:	6078      	str	r0, [r7, #4]
    8434:	460b      	mov	r3, r1
    8436:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8438:	78fb      	ldrb	r3, [r7, #3]
    843a:	687a      	ldr	r2, [r7, #4]
    843c:	3308      	adds	r3, #8
    843e:	015b      	lsls	r3, r3, #5
    8440:	4413      	add	r3, r2
    8442:	3307      	adds	r3, #7
    8444:	781b      	ldrb	r3, [r3, #0]
    8446:	b2db      	uxtb	r3, r3
}
    8448:	4618      	mov	r0, r3
    844a:	370c      	adds	r7, #12
    844c:	46bd      	mov	sp, r7
    844e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8452:	4770      	bx	lr

00008454 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8454:	b480      	push	{r7}
    8456:	b083      	sub	sp, #12
    8458:	af00      	add	r7, sp, #0
    845a:	6078      	str	r0, [r7, #4]
    845c:	460b      	mov	r3, r1
    845e:	70fb      	strb	r3, [r7, #3]
    8460:	4613      	mov	r3, r2
    8462:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8464:	78fb      	ldrb	r3, [r7, #3]
    8466:	687a      	ldr	r2, [r7, #4]
    8468:	3308      	adds	r3, #8
    846a:	015b      	lsls	r3, r3, #5
    846c:	4413      	add	r3, r2
    846e:	3307      	adds	r3, #7
    8470:	78ba      	ldrb	r2, [r7, #2]
    8472:	701a      	strb	r2, [r3, #0]
}
    8474:	bf00      	nop
    8476:	370c      	adds	r7, #12
    8478:	46bd      	mov	sp, r7
    847a:	f85d 7b04 	ldr.w	r7, [sp], #4
    847e:	4770      	bx	lr

00008480 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8480:	b480      	push	{r7}
    8482:	b083      	sub	sp, #12
    8484:	af00      	add	r7, sp, #0
    8486:	6078      	str	r0, [r7, #4]
    8488:	460b      	mov	r3, r1
    848a:	70fb      	strb	r3, [r7, #3]
    848c:	4613      	mov	r3, r2
    848e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8490:	78fb      	ldrb	r3, [r7, #3]
    8492:	687a      	ldr	r2, [r7, #4]
    8494:	3308      	adds	r3, #8
    8496:	015b      	lsls	r3, r3, #5
    8498:	4413      	add	r3, r2
    849a:	3305      	adds	r3, #5
    849c:	78ba      	ldrb	r2, [r7, #2]
    849e:	701a      	strb	r2, [r3, #0]
}
    84a0:	bf00      	nop
    84a2:	370c      	adds	r7, #12
    84a4:	46bd      	mov	sp, r7
    84a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    84aa:	4770      	bx	lr

000084ac <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    84ac:	b480      	push	{r7}
    84ae:	b083      	sub	sp, #12
    84b0:	af00      	add	r7, sp, #0
    84b2:	6078      	str	r0, [r7, #4]
    84b4:	460b      	mov	r3, r1
    84b6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    84b8:	78fb      	ldrb	r3, [r7, #3]
    84ba:	687a      	ldr	r2, [r7, #4]
    84bc:	3308      	adds	r3, #8
    84be:	015b      	lsls	r3, r3, #5
    84c0:	4413      	add	r3, r2
    84c2:	3306      	adds	r3, #6
    84c4:	781b      	ldrb	r3, [r3, #0]
    84c6:	b2db      	uxtb	r3, r3
}
    84c8:	4618      	mov	r0, r3
    84ca:	370c      	adds	r7, #12
    84cc:	46bd      	mov	sp, r7
    84ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    84d2:	4770      	bx	lr

000084d4 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    84d4:	b480      	push	{r7}
    84d6:	b083      	sub	sp, #12
    84d8:	af00      	add	r7, sp, #0
    84da:	6078      	str	r0, [r7, #4]
    84dc:	460b      	mov	r3, r1
    84de:	70fb      	strb	r3, [r7, #3]
    84e0:	4613      	mov	r3, r2
    84e2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    84e4:	78fb      	ldrb	r3, [r7, #3]
    84e6:	687a      	ldr	r2, [r7, #4]
    84e8:	3308      	adds	r3, #8
    84ea:	015b      	lsls	r3, r3, #5
    84ec:	4413      	add	r3, r2
    84ee:	3304      	adds	r3, #4
    84f0:	78ba      	ldrb	r2, [r7, #2]
    84f2:	701a      	strb	r2, [r3, #0]
}
    84f4:	bf00      	nop
    84f6:	370c      	adds	r7, #12
    84f8:	46bd      	mov	sp, r7
    84fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    84fe:	4770      	bx	lr

00008500 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8500:	b480      	push	{r7}
    8502:	b083      	sub	sp, #12
    8504:	af00      	add	r7, sp, #0
    8506:	6078      	str	r0, [r7, #4]
    8508:	460b      	mov	r3, r1
    850a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    850c:	78fb      	ldrb	r3, [r7, #3]
    850e:	687a      	ldr	r2, [r7, #4]
    8510:	015b      	lsls	r3, r3, #5
    8512:	4413      	add	r3, r2
    8514:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8518:	2210      	movs	r2, #16
    851a:	701a      	strb	r2, [r3, #0]
}
    851c:	bf00      	nop
    851e:	370c      	adds	r7, #12
    8520:	46bd      	mov	sp, r7
    8522:	f85d 7b04 	ldr.w	r7, [sp], #4
    8526:	4770      	bx	lr

00008528 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8528:	b480      	push	{r7}
    852a:	b083      	sub	sp, #12
    852c:	af00      	add	r7, sp, #0
    852e:	6078      	str	r0, [r7, #4]
    8530:	460b      	mov	r3, r1
    8532:	70fb      	strb	r3, [r7, #3]
    8534:	4613      	mov	r3, r2
    8536:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8538:	78fb      	ldrb	r3, [r7, #3]
    853a:	687a      	ldr	r2, [r7, #4]
    853c:	015b      	lsls	r3, r3, #5
    853e:	4413      	add	r3, r2
    8540:	f203 1309 	addw	r3, r3, #265	; 0x109
    8544:	78ba      	ldrb	r2, [r7, #2]
    8546:	701a      	strb	r2, [r3, #0]
}
    8548:	bf00      	nop
    854a:	370c      	adds	r7, #12
    854c:	46bd      	mov	sp, r7
    854e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8552:	4770      	bx	lr

00008554 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8554:	b480      	push	{r7}
    8556:	b083      	sub	sp, #12
    8558:	af00      	add	r7, sp, #0
    855a:	6078      	str	r0, [r7, #4]
    855c:	460b      	mov	r3, r1
    855e:	70fb      	strb	r3, [r7, #3]
    8560:	4613      	mov	r3, r2
    8562:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8564:	78fb      	ldrb	r3, [r7, #3]
    8566:	687a      	ldr	r2, [r7, #4]
    8568:	015b      	lsls	r3, r3, #5
    856a:	4413      	add	r3, r2
    856c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8570:	78ba      	ldrb	r2, [r7, #2]
    8572:	701a      	strb	r2, [r3, #0]
}
    8574:	bf00      	nop
    8576:	370c      	adds	r7, #12
    8578:	46bd      	mov	sp, r7
    857a:	f85d 7b04 	ldr.w	r7, [sp], #4
    857e:	4770      	bx	lr

00008580 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8580:	b480      	push	{r7}
    8582:	b085      	sub	sp, #20
    8584:	af00      	add	r7, sp, #0
    8586:	6078      	str	r0, [r7, #4]
    8588:	460b      	mov	r3, r1
    858a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    858c:	78fb      	ldrb	r3, [r7, #3]
    858e:	687a      	ldr	r2, [r7, #4]
    8590:	3308      	adds	r3, #8
    8592:	015b      	lsls	r3, r3, #5
    8594:	4413      	add	r3, r2
    8596:	781b      	ldrb	r3, [r3, #0]
    8598:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    859a:	7bfb      	ldrb	r3, [r7, #15]
    859c:	f003 0307 	and.w	r3, r3, #7
    85a0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    85a2:	7bfb      	ldrb	r3, [r7, #15]
}
    85a4:	4618      	mov	r0, r3
    85a6:	3714      	adds	r7, #20
    85a8:	46bd      	mov	sp, r7
    85aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ae:	4770      	bx	lr

000085b0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    85b0:	b480      	push	{r7}
    85b2:	b085      	sub	sp, #20
    85b4:	af00      	add	r7, sp, #0
    85b6:	6078      	str	r0, [r7, #4]
    85b8:	460b      	mov	r3, r1
    85ba:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    85bc:	78fb      	ldrb	r3, [r7, #3]
    85be:	687a      	ldr	r2, [r7, #4]
    85c0:	3308      	adds	r3, #8
    85c2:	015b      	lsls	r3, r3, #5
    85c4:	4413      	add	r3, r2
    85c6:	781b      	ldrb	r3, [r3, #0]
    85c8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    85ca:	7bfb      	ldrb	r3, [r7, #15]
    85cc:	091b      	lsrs	r3, r3, #4
    85ce:	b2db      	uxtb	r3, r3
    85d0:	f003 0307 	and.w	r3, r3, #7
    85d4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    85d6:	7bfb      	ldrb	r3, [r7, #15]
}
    85d8:	4618      	mov	r0, r3
    85da:	3714      	adds	r7, #20
    85dc:	46bd      	mov	sp, r7
    85de:	f85d 7b04 	ldr.w	r7, [sp], #4
    85e2:	4770      	bx	lr

000085e4 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    85e4:	b480      	push	{r7}
    85e6:	b083      	sub	sp, #12
    85e8:	af00      	add	r7, sp, #0
    85ea:	6078      	str	r0, [r7, #4]
    85ec:	460b      	mov	r3, r1
    85ee:	70fb      	strb	r3, [r7, #3]
    85f0:	4613      	mov	r3, r2
    85f2:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    85f4:	78fb      	ldrb	r3, [r7, #3]
    85f6:	687a      	ldr	r2, [r7, #4]
    85f8:	3308      	adds	r3, #8
    85fa:	015b      	lsls	r3, r3, #5
    85fc:	4413      	add	r3, r2
    85fe:	78ba      	ldrb	r2, [r7, #2]
    8600:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8602:	bf00      	nop
    8604:	370c      	adds	r7, #12
    8606:	46bd      	mov	sp, r7
    8608:	f85d 7b04 	ldr.w	r7, [sp], #4
    860c:	4770      	bx	lr

0000860e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    860e:	b480      	push	{r7}
    8610:	b083      	sub	sp, #12
    8612:	af00      	add	r7, sp, #0
    8614:	6078      	str	r0, [r7, #4]
    8616:	460b      	mov	r3, r1
    8618:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    861a:	78fb      	ldrb	r3, [r7, #3]
    861c:	687a      	ldr	r2, [r7, #4]
    861e:	3308      	adds	r3, #8
    8620:	015b      	lsls	r3, r3, #5
    8622:	4413      	add	r3, r2
    8624:	781b      	ldrb	r3, [r3, #0]
    8626:	b2db      	uxtb	r3, r3
}
    8628:	4618      	mov	r0, r3
    862a:	370c      	adds	r7, #12
    862c:	46bd      	mov	sp, r7
    862e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8632:	4770      	bx	lr

00008634 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8634:	b480      	push	{r7}
    8636:	b083      	sub	sp, #12
    8638:	af00      	add	r7, sp, #0
    863a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    863c:	687b      	ldr	r3, [r7, #4]
    863e:	8b9b      	ldrh	r3, [r3, #28]
    8640:	b29b      	uxth	r3, r3
}
    8642:	4618      	mov	r0, r3
    8644:	370c      	adds	r7, #12
    8646:	46bd      	mov	sp, r7
    8648:	f85d 7b04 	ldr.w	r7, [sp], #4
    864c:	4770      	bx	lr

0000864e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    864e:	b480      	push	{r7}
    8650:	b083      	sub	sp, #12
    8652:	af00      	add	r7, sp, #0
    8654:	6078      	str	r0, [r7, #4]
    8656:	460b      	mov	r3, r1
    8658:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    865a:	687b      	ldr	r3, [r7, #4]
    865c:	887a      	ldrh	r2, [r7, #2]
    865e:	839a      	strh	r2, [r3, #28]
}
    8660:	bf00      	nop
    8662:	370c      	adds	r7, #12
    8664:	46bd      	mov	sp, r7
    8666:	f85d 7b04 	ldr.w	r7, [sp], #4
    866a:	4770      	bx	lr

0000866c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    866c:	b480      	push	{r7}
    866e:	b083      	sub	sp, #12
    8670:	af00      	add	r7, sp, #0
    8672:	6078      	str	r0, [r7, #4]
    8674:	460b      	mov	r3, r1
    8676:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8678:	687b      	ldr	r3, [r7, #4]
    867a:	887a      	ldrh	r2, [r7, #2]
    867c:	831a      	strh	r2, [r3, #24]
}
    867e:	bf00      	nop
    8680:	370c      	adds	r7, #12
    8682:	46bd      	mov	sp, r7
    8684:	f85d 7b04 	ldr.w	r7, [sp], #4
    8688:	4770      	bx	lr

0000868a <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    868a:	b480      	push	{r7}
    868c:	b083      	sub	sp, #12
    868e:	af00      	add	r7, sp, #0
    8690:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8692:	687b      	ldr	r3, [r7, #4]
    8694:	8b1b      	ldrh	r3, [r3, #24]
    8696:	b29b      	uxth	r3, r3
}
    8698:	4618      	mov	r0, r3
    869a:	370c      	adds	r7, #12
    869c:	46bd      	mov	sp, r7
    869e:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a2:	4770      	bx	lr

000086a4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    86a4:	b480      	push	{r7}
    86a6:	b083      	sub	sp, #12
    86a8:	af00      	add	r7, sp, #0
    86aa:	6078      	str	r0, [r7, #4]
    86ac:	460b      	mov	r3, r1
    86ae:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    86b0:	687b      	ldr	r3, [r7, #4]
    86b2:	887a      	ldrh	r2, [r7, #2]
    86b4:	829a      	strh	r2, [r3, #20]
}
    86b6:	bf00      	nop
    86b8:	370c      	adds	r7, #12
    86ba:	46bd      	mov	sp, r7
    86bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    86c0:	4770      	bx	lr

000086c2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    86c2:	b480      	push	{r7}
    86c4:	b085      	sub	sp, #20
    86c6:	af00      	add	r7, sp, #0
    86c8:	6078      	str	r0, [r7, #4]
    86ca:	460b      	mov	r3, r1
    86cc:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    86ce:	687b      	ldr	r3, [r7, #4]
    86d0:	789b      	ldrb	r3, [r3, #2]
    86d2:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    86d4:	7bfa      	ldrb	r2, [r7, #15]
    86d6:	78fb      	ldrb	r3, [r7, #3]
    86d8:	4013      	ands	r3, r2
    86da:	73fb      	strb	r3, [r7, #15]
	return tmp;
    86dc:	7bfb      	ldrb	r3, [r7, #15]
}
    86de:	4618      	mov	r0, r3
    86e0:	3714      	adds	r7, #20
    86e2:	46bd      	mov	sp, r7
    86e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    86e8:	4770      	bx	lr
	...

000086ec <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    86ec:	b580      	push	{r7, lr}
    86ee:	b082      	sub	sp, #8
    86f0:	af00      	add	r7, sp, #0
    86f2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    86f4:	687b      	ldr	r3, [r7, #4]
    86f6:	781b      	ldrb	r3, [r3, #0]
    86f8:	b2db      	uxtb	r3, r3
    86fa:	f023 0302 	bic.w	r3, r3, #2
    86fe:	b2da      	uxtb	r2, r3
    8700:	687b      	ldr	r3, [r7, #4]
    8702:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8704:	2103      	movs	r1, #3
    8706:	6878      	ldr	r0, [r7, #4]
    8708:	4b02      	ldr	r3, [pc, #8]	; (8714 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    870a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    870c:	bf00      	nop
    870e:	3708      	adds	r7, #8
    8710:	46bd      	mov	sp, r7
    8712:	bd80      	pop	{r7, pc}
    8714:	0000839f 	.word	0x0000839f

00008718 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8718:	b580      	push	{r7, lr}
    871a:	b084      	sub	sp, #16
    871c:	af00      	add	r7, sp, #0
    871e:	6078      	str	r0, [r7, #4]
    8720:	460b      	mov	r3, r1
    8722:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8724:	2103      	movs	r1, #3
    8726:	6878      	ldr	r0, [r7, #4]
    8728:	4b06      	ldr	r3, [pc, #24]	; (8744 <hri_usb_get_CTRLA_reg+0x2c>)
    872a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    872c:	687b      	ldr	r3, [r7, #4]
    872e:	781b      	ldrb	r3, [r3, #0]
    8730:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8732:	7bfa      	ldrb	r2, [r7, #15]
    8734:	78fb      	ldrb	r3, [r7, #3]
    8736:	4013      	ands	r3, r2
    8738:	73fb      	strb	r3, [r7, #15]
	return tmp;
    873a:	7bfb      	ldrb	r3, [r7, #15]
}
    873c:	4618      	mov	r0, r3
    873e:	3710      	adds	r7, #16
    8740:	46bd      	mov	sp, r7
    8742:	bd80      	pop	{r7, pc}
    8744:	0000839f 	.word	0x0000839f

00008748 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8748:	b580      	push	{r7, lr}
    874a:	b082      	sub	sp, #8
    874c:	af00      	add	r7, sp, #0
    874e:	6078      	str	r0, [r7, #4]
    8750:	460b      	mov	r3, r1
    8752:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8754:	687b      	ldr	r3, [r7, #4]
    8756:	78fa      	ldrb	r2, [r7, #3]
    8758:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    875a:	2103      	movs	r1, #3
    875c:	6878      	ldr	r0, [r7, #4]
    875e:	4b03      	ldr	r3, [pc, #12]	; (876c <hri_usb_write_CTRLA_reg+0x24>)
    8760:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8762:	bf00      	nop
    8764:	3708      	adds	r7, #8
    8766:	46bd      	mov	sp, r7
    8768:	bd80      	pop	{r7, pc}
    876a:	bf00      	nop
    876c:	0000839f 	.word	0x0000839f

00008770 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8770:	b580      	push	{r7, lr}
    8772:	b082      	sub	sp, #8
    8774:	af00      	add	r7, sp, #0
    8776:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8778:	2103      	movs	r1, #3
    877a:	6878      	ldr	r0, [r7, #4]
    877c:	4b04      	ldr	r3, [pc, #16]	; (8790 <hri_usb_read_CTRLA_reg+0x20>)
    877e:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8780:	687b      	ldr	r3, [r7, #4]
    8782:	781b      	ldrb	r3, [r3, #0]
    8784:	b2db      	uxtb	r3, r3
}
    8786:	4618      	mov	r0, r3
    8788:	3708      	adds	r7, #8
    878a:	46bd      	mov	sp, r7
    878c:	bd80      	pop	{r7, pc}
    878e:	bf00      	nop
    8790:	0000839f 	.word	0x0000839f

00008794 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8794:	b480      	push	{r7}
    8796:	b083      	sub	sp, #12
    8798:	af00      	add	r7, sp, #0
    879a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    879c:	687b      	ldr	r3, [r7, #4]
    879e:	891b      	ldrh	r3, [r3, #8]
    87a0:	b29b      	uxth	r3, r3
    87a2:	f023 0301 	bic.w	r3, r3, #1
    87a6:	b29a      	uxth	r2, r3
    87a8:	687b      	ldr	r3, [r7, #4]
    87aa:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    87ac:	bf00      	nop
    87ae:	370c      	adds	r7, #12
    87b0:	46bd      	mov	sp, r7
    87b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    87b6:	4770      	bx	lr

000087b8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    87b8:	b480      	push	{r7}
    87ba:	b083      	sub	sp, #12
    87bc:	af00      	add	r7, sp, #0
    87be:	6078      	str	r0, [r7, #4]
    87c0:	460b      	mov	r3, r1
    87c2:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    87c4:	687b      	ldr	r3, [r7, #4]
    87c6:	887a      	ldrh	r2, [r7, #2]
    87c8:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    87ca:	bf00      	nop
    87cc:	370c      	adds	r7, #12
    87ce:	46bd      	mov	sp, r7
    87d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    87d4:	4770      	bx	lr

000087d6 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    87d6:	b480      	push	{r7}
    87d8:	b083      	sub	sp, #12
    87da:	af00      	add	r7, sp, #0
    87dc:	6078      	str	r0, [r7, #4]
    87de:	460b      	mov	r3, r1
    87e0:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    87e2:	687b      	ldr	r3, [r7, #4]
    87e4:	78fa      	ldrb	r2, [r7, #3]
    87e6:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    87e8:	bf00      	nop
    87ea:	370c      	adds	r7, #12
    87ec:	46bd      	mov	sp, r7
    87ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    87f2:	4770      	bx	lr

000087f4 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    87f4:	b480      	push	{r7}
    87f6:	b083      	sub	sp, #12
    87f8:	af00      	add	r7, sp, #0
    87fa:	6078      	str	r0, [r7, #4]
    87fc:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    87fe:	687b      	ldr	r3, [r7, #4]
    8800:	683a      	ldr	r2, [r7, #0]
    8802:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8804:	bf00      	nop
    8806:	370c      	adds	r7, #12
    8808:	46bd      	mov	sp, r7
    880a:	f85d 7b04 	ldr.w	r7, [sp], #4
    880e:	4770      	bx	lr

00008810 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8810:	b480      	push	{r7}
    8812:	b083      	sub	sp, #12
    8814:	af00      	add	r7, sp, #0
    8816:	6078      	str	r0, [r7, #4]
    8818:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    881a:	2300      	movs	r3, #0
}
    881c:	4618      	mov	r0, r3
    881e:	370c      	adds	r7, #12
    8820:	46bd      	mov	sp, r7
    8822:	f85d 7b04 	ldr.w	r7, [sp], #4
    8826:	4770      	bx	lr

00008828 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8828:	b480      	push	{r7}
    882a:	b085      	sub	sp, #20
    882c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    882e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8832:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8834:	4b28      	ldr	r3, [pc, #160]	; (88d8 <_usb_load_calib+0xb0>)
    8836:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8838:	f003 031f 	and.w	r3, r3, #31
    883c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    883e:	4b26      	ldr	r3, [pc, #152]	; (88d8 <_usb_load_calib+0xb0>)
    8840:	681b      	ldr	r3, [r3, #0]
    8842:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8844:	f003 031f 	and.w	r3, r3, #31
    8848:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    884a:	4b23      	ldr	r3, [pc, #140]	; (88d8 <_usb_load_calib+0xb0>)
    884c:	681b      	ldr	r3, [r3, #0]
    884e:	0a9b      	lsrs	r3, r3, #10
    8850:	f003 0307 	and.w	r3, r3, #7
    8854:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8856:	68fb      	ldr	r3, [r7, #12]
    8858:	2b00      	cmp	r3, #0
    885a:	d002      	beq.n	8862 <_usb_load_calib+0x3a>
    885c:	68fb      	ldr	r3, [r7, #12]
    885e:	2b1f      	cmp	r3, #31
    8860:	d101      	bne.n	8866 <_usb_load_calib+0x3e>
		pad_transn = 9;
    8862:	2309      	movs	r3, #9
    8864:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8866:	68bb      	ldr	r3, [r7, #8]
    8868:	2b00      	cmp	r3, #0
    886a:	d002      	beq.n	8872 <_usb_load_calib+0x4a>
    886c:	68bb      	ldr	r3, [r7, #8]
    886e:	2b1f      	cmp	r3, #31
    8870:	d101      	bne.n	8876 <_usb_load_calib+0x4e>
		pad_transp = 25;
    8872:	2319      	movs	r3, #25
    8874:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8876:	687b      	ldr	r3, [r7, #4]
    8878:	2b00      	cmp	r3, #0
    887a:	d002      	beq.n	8882 <_usb_load_calib+0x5a>
    887c:	687b      	ldr	r3, [r7, #4]
    887e:	2b07      	cmp	r3, #7
    8880:	d101      	bne.n	8886 <_usb_load_calib+0x5e>
		pad_trim = 6;
    8882:	2306      	movs	r3, #6
    8884:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8886:	68fb      	ldr	r3, [r7, #12]
    8888:	b29b      	uxth	r3, r3
    888a:	019b      	lsls	r3, r3, #6
    888c:	b29b      	uxth	r3, r3
    888e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8892:	b29a      	uxth	r2, r3
    8894:	68bb      	ldr	r3, [r7, #8]
    8896:	b29b      	uxth	r3, r3
    8898:	f003 031f 	and.w	r3, r3, #31
    889c:	b29b      	uxth	r3, r3
    889e:	4313      	orrs	r3, r2
    88a0:	b29a      	uxth	r2, r3
    88a2:	687b      	ldr	r3, [r7, #4]
    88a4:	b29b      	uxth	r3, r3
    88a6:	031b      	lsls	r3, r3, #12
    88a8:	b29b      	uxth	r3, r3
    88aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    88ae:	b29b      	uxth	r3, r3
    88b0:	4313      	orrs	r3, r2
    88b2:	b29a      	uxth	r2, r3
    88b4:	683b      	ldr	r3, [r7, #0]
    88b6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    88b8:	683a      	ldr	r2, [r7, #0]
    88ba:	78d3      	ldrb	r3, [r2, #3]
    88bc:	f043 0303 	orr.w	r3, r3, #3
    88c0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    88c2:	683a      	ldr	r2, [r7, #0]
    88c4:	78d3      	ldrb	r3, [r2, #3]
    88c6:	f043 030c 	orr.w	r3, r3, #12
    88ca:	70d3      	strb	r3, [r2, #3]
}
    88cc:	bf00      	nop
    88ce:	3714      	adds	r7, #20
    88d0:	46bd      	mov	sp, r7
    88d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88d6:	4770      	bx	lr
    88d8:	00800084 	.word	0x00800084

000088dc <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    88dc:	b580      	push	{r7, lr}
    88de:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    88e0:	bf00      	nop
    88e2:	2203      	movs	r2, #3
    88e4:	2100      	movs	r1, #0
    88e6:	4804      	ldr	r0, [pc, #16]	; (88f8 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    88e8:	4b04      	ldr	r3, [pc, #16]	; (88fc <_usb_d_dev_wait_dpll_rdy+0x20>)
    88ea:	4798      	blx	r3
    88ec:	4603      	mov	r3, r0
    88ee:	2b03      	cmp	r3, #3
    88f0:	d1f7      	bne.n	88e2 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    88f2:	bf00      	nop
    88f4:	bd80      	pop	{r7, pc}
    88f6:	bf00      	nop
    88f8:	40001000 	.word	0x40001000
    88fc:	00008311 	.word	0x00008311

00008900 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8900:	b580      	push	{r7, lr}
    8902:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8904:	480e      	ldr	r0, [pc, #56]	; (8940 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8906:	4b0f      	ldr	r3, [pc, #60]	; (8944 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8908:	4798      	blx	r3
    890a:	4603      	mov	r3, r0
    890c:	2b00      	cmp	r3, #0
    890e:	d00a      	beq.n	8926 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8910:	bf00      	nop
    8912:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8916:	480a      	ldr	r0, [pc, #40]	; (8940 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8918:	4b0b      	ldr	r3, [pc, #44]	; (8948 <_usb_d_dev_wait_dfll_rdy+0x48>)
    891a:	4798      	blx	r3
    891c:	4603      	mov	r3, r0
    891e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8922:	d1f6      	bne.n	8912 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8924:	e009      	b.n	893a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8926:	bf00      	nop
    8928:	f44f 7180 	mov.w	r1, #256	; 0x100
    892c:	4804      	ldr	r0, [pc, #16]	; (8940 <_usb_d_dev_wait_dfll_rdy+0x40>)
    892e:	4b06      	ldr	r3, [pc, #24]	; (8948 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8930:	4798      	blx	r3
    8932:	4603      	mov	r3, r0
    8934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8938:	d1f6      	bne.n	8928 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    893a:	bf00      	nop
    893c:	bd80      	pop	{r7, pc}
    893e:	bf00      	nop
    8940:	40001000 	.word	0x40001000
    8944:	0000836f 	.word	0x0000836f
    8948:	00008349 	.word	0x00008349

0000894c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    894c:	b580      	push	{r7, lr}
    894e:	b082      	sub	sp, #8
    8950:	af00      	add	r7, sp, #0
    8952:	4603      	mov	r3, r0
    8954:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8956:	79fb      	ldrb	r3, [r7, #7]
    8958:	2b00      	cmp	r3, #0
    895a:	d102      	bne.n	8962 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    895c:	4b05      	ldr	r3, [pc, #20]	; (8974 <_usb_d_dev_wait_clk_rdy+0x28>)
    895e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8960:	e004      	b.n	896c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8962:	79fb      	ldrb	r3, [r7, #7]
    8964:	2b01      	cmp	r3, #1
    8966:	d101      	bne.n	896c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8968:	4b03      	ldr	r3, [pc, #12]	; (8978 <_usb_d_dev_wait_clk_rdy+0x2c>)
    896a:	4798      	blx	r3
}
    896c:	bf00      	nop
    896e:	3708      	adds	r7, #8
    8970:	46bd      	mov	sp, r7
    8972:	bd80      	pop	{r7, pc}
    8974:	00008901 	.word	0x00008901
    8978:	000088dd 	.word	0x000088dd

0000897c <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    897c:	b580      	push	{r7, lr}
    897e:	b082      	sub	sp, #8
    8980:	af00      	add	r7, sp, #0
    8982:	4603      	mov	r3, r0
    8984:	6039      	str	r1, [r7, #0]
    8986:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8988:	683b      	ldr	r3, [r7, #0]
    898a:	b2da      	uxtb	r2, r3
    898c:	79fb      	ldrb	r3, [r7, #7]
    898e:	4619      	mov	r1, r3
    8990:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8994:	4b02      	ldr	r3, [pc, #8]	; (89a0 <_usbd_ep_int_ack+0x24>)
    8996:	4798      	blx	r3
}
    8998:	bf00      	nop
    899a:	3708      	adds	r7, #8
    899c:	46bd      	mov	sp, r7
    899e:	bd80      	pop	{r7, pc}
    89a0:	00008455 	.word	0x00008455

000089a4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    89a4:	b580      	push	{r7, lr}
    89a6:	b082      	sub	sp, #8
    89a8:	af00      	add	r7, sp, #0
    89aa:	4603      	mov	r3, r0
    89ac:	6039      	str	r1, [r7, #0]
    89ae:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    89b0:	683b      	ldr	r3, [r7, #0]
    89b2:	b2da      	uxtb	r2, r3
    89b4:	79fb      	ldrb	r3, [r7, #7]
    89b6:	4619      	mov	r1, r3
    89b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89bc:	4b02      	ldr	r3, [pc, #8]	; (89c8 <_usbd_ep_int_en+0x24>)
    89be:	4798      	blx	r3
}
    89c0:	bf00      	nop
    89c2:	3708      	adds	r7, #8
    89c4:	46bd      	mov	sp, r7
    89c6:	bd80      	pop	{r7, pc}
    89c8:	00008529 	.word	0x00008529

000089cc <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    89cc:	b580      	push	{r7, lr}
    89ce:	b082      	sub	sp, #8
    89d0:	af00      	add	r7, sp, #0
    89d2:	4603      	mov	r3, r0
    89d4:	6039      	str	r1, [r7, #0]
    89d6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    89d8:	683b      	ldr	r3, [r7, #0]
    89da:	b2da      	uxtb	r2, r3
    89dc:	79fb      	ldrb	r3, [r7, #7]
    89de:	4619      	mov	r1, r3
    89e0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89e4:	4b02      	ldr	r3, [pc, #8]	; (89f0 <_usbd_ep_int_dis+0x24>)
    89e6:	4798      	blx	r3
}
    89e8:	bf00      	nop
    89ea:	3708      	adds	r7, #8
    89ec:	46bd      	mov	sp, r7
    89ee:	bd80      	pop	{r7, pc}
    89f0:	00008555 	.word	0x00008555

000089f4 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    89f4:	b580      	push	{r7, lr}
    89f6:	b082      	sub	sp, #8
    89f8:	af00      	add	r7, sp, #0
    89fa:	4603      	mov	r3, r0
    89fc:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    89fe:	79fb      	ldrb	r3, [r7, #7]
    8a00:	4619      	mov	r1, r3
    8a02:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a06:	4b06      	ldr	r3, [pc, #24]	; (8a20 <_usbd_ep_is_ctrl+0x2c>)
    8a08:	4798      	blx	r3
    8a0a:	4603      	mov	r3, r0
    8a0c:	2b11      	cmp	r3, #17
    8a0e:	bf0c      	ite	eq
    8a10:	2301      	moveq	r3, #1
    8a12:	2300      	movne	r3, #0
    8a14:	b2db      	uxtb	r3, r3
}
    8a16:	4618      	mov	r0, r3
    8a18:	3708      	adds	r7, #8
    8a1a:	46bd      	mov	sp, r7
    8a1c:	bd80      	pop	{r7, pc}
    8a1e:	bf00      	nop
    8a20:	0000860f 	.word	0x0000860f

00008a24 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8a24:	b580      	push	{r7, lr}
    8a26:	b082      	sub	sp, #8
    8a28:	af00      	add	r7, sp, #0
    8a2a:	4603      	mov	r3, r0
    8a2c:	71fb      	strb	r3, [r7, #7]
    8a2e:	460b      	mov	r3, r1
    8a30:	71bb      	strb	r3, [r7, #6]
    8a32:	4613      	mov	r3, r2
    8a34:	717b      	strb	r3, [r7, #5]
	if (st) {
    8a36:	797b      	ldrb	r3, [r7, #5]
    8a38:	2b00      	cmp	r3, #0
    8a3a:	d00b      	beq.n	8a54 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8a3c:	79bb      	ldrb	r3, [r7, #6]
    8a3e:	2210      	movs	r2, #16
    8a40:	fa02 f303 	lsl.w	r3, r2, r3
    8a44:	b2da      	uxtb	r2, r3
    8a46:	79fb      	ldrb	r3, [r7, #7]
    8a48:	4619      	mov	r1, r3
    8a4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a4e:	4b09      	ldr	r3, [pc, #36]	; (8a74 <_usbd_ep_set_stall+0x50>)
    8a50:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8a52:	e00a      	b.n	8a6a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8a54:	79bb      	ldrb	r3, [r7, #6]
    8a56:	2210      	movs	r2, #16
    8a58:	fa02 f303 	lsl.w	r3, r2, r3
    8a5c:	b2da      	uxtb	r2, r3
    8a5e:	79fb      	ldrb	r3, [r7, #7]
    8a60:	4619      	mov	r1, r3
    8a62:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a66:	4b04      	ldr	r3, [pc, #16]	; (8a78 <_usbd_ep_set_stall+0x54>)
    8a68:	4798      	blx	r3
}
    8a6a:	bf00      	nop
    8a6c:	3708      	adds	r7, #8
    8a6e:	46bd      	mov	sp, r7
    8a70:	bd80      	pop	{r7, pc}
    8a72:	bf00      	nop
    8a74:	00008481 	.word	0x00008481
    8a78:	000084d5 	.word	0x000084d5

00008a7c <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8a7c:	b580      	push	{r7, lr}
    8a7e:	b084      	sub	sp, #16
    8a80:	af00      	add	r7, sp, #0
    8a82:	4603      	mov	r3, r0
    8a84:	460a      	mov	r2, r1
    8a86:	71fb      	strb	r3, [r7, #7]
    8a88:	4613      	mov	r3, r2
    8a8a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8a8c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8a90:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8a92:	79fb      	ldrb	r3, [r7, #7]
    8a94:	4619      	mov	r1, r3
    8a96:	68f8      	ldr	r0, [r7, #12]
    8a98:	4b08      	ldr	r3, [pc, #32]	; (8abc <_usbd_ep_is_stalled+0x40>)
    8a9a:	4798      	blx	r3
    8a9c:	4603      	mov	r3, r0
    8a9e:	4619      	mov	r1, r3
    8aa0:	79bb      	ldrb	r3, [r7, #6]
    8aa2:	2210      	movs	r2, #16
    8aa4:	fa02 f303 	lsl.w	r3, r2, r3
    8aa8:	400b      	ands	r3, r1
    8aaa:	2b00      	cmp	r3, #0
    8aac:	bf14      	ite	ne
    8aae:	2301      	movne	r3, #1
    8ab0:	2300      	moveq	r3, #0
    8ab2:	b2db      	uxtb	r3, r3
}
    8ab4:	4618      	mov	r0, r3
    8ab6:	3710      	adds	r7, #16
    8ab8:	46bd      	mov	sp, r7
    8aba:	bd80      	pop	{r7, pc}
    8abc:	000084ad 	.word	0x000084ad

00008ac0 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8ac0:	b580      	push	{r7, lr}
    8ac2:	b084      	sub	sp, #16
    8ac4:	af00      	add	r7, sp, #0
    8ac6:	4603      	mov	r3, r0
    8ac8:	460a      	mov	r2, r1
    8aca:	71fb      	strb	r3, [r7, #7]
    8acc:	4613      	mov	r3, r2
    8ace:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8ad0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ad4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8ad6:	79fb      	ldrb	r3, [r7, #7]
    8ad8:	4619      	mov	r1, r3
    8ada:	68f8      	ldr	r0, [r7, #12]
    8adc:	4b08      	ldr	r3, [pc, #32]	; (8b00 <_usbd_ep_is_stall_sent+0x40>)
    8ade:	4798      	blx	r3
    8ae0:	4603      	mov	r3, r0
    8ae2:	4619      	mov	r1, r3
    8ae4:	79bb      	ldrb	r3, [r7, #6]
    8ae6:	2220      	movs	r2, #32
    8ae8:	fa02 f303 	lsl.w	r3, r2, r3
    8aec:	400b      	ands	r3, r1
    8aee:	2b00      	cmp	r3, #0
    8af0:	bf14      	ite	ne
    8af2:	2301      	movne	r3, #1
    8af4:	2300      	moveq	r3, #0
    8af6:	b2db      	uxtb	r3, r3
}
    8af8:	4618      	mov	r0, r3
    8afa:	3710      	adds	r7, #16
    8afc:	46bd      	mov	sp, r7
    8afe:	bd80      	pop	{r7, pc}
    8b00:	0000842d 	.word	0x0000842d

00008b04 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8b04:	b580      	push	{r7, lr}
    8b06:	b082      	sub	sp, #8
    8b08:	af00      	add	r7, sp, #0
    8b0a:	4603      	mov	r3, r0
    8b0c:	460a      	mov	r2, r1
    8b0e:	71fb      	strb	r3, [r7, #7]
    8b10:	4613      	mov	r3, r2
    8b12:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8b14:	79bb      	ldrb	r3, [r7, #6]
    8b16:	2220      	movs	r2, #32
    8b18:	409a      	lsls	r2, r3
    8b1a:	79fb      	ldrb	r3, [r7, #7]
    8b1c:	4611      	mov	r1, r2
    8b1e:	4618      	mov	r0, r3
    8b20:	4b02      	ldr	r3, [pc, #8]	; (8b2c <_usbd_ep_ack_stall+0x28>)
    8b22:	4798      	blx	r3
}
    8b24:	bf00      	nop
    8b26:	3708      	adds	r7, #8
    8b28:	46bd      	mov	sp, r7
    8b2a:	bd80      	pop	{r7, pc}
    8b2c:	0000897d 	.word	0x0000897d

00008b30 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8b30:	b580      	push	{r7, lr}
    8b32:	b082      	sub	sp, #8
    8b34:	af00      	add	r7, sp, #0
    8b36:	4603      	mov	r3, r0
    8b38:	71fb      	strb	r3, [r7, #7]
    8b3a:	460b      	mov	r3, r1
    8b3c:	71bb      	strb	r3, [r7, #6]
    8b3e:	4613      	mov	r3, r2
    8b40:	717b      	strb	r3, [r7, #5]
	if (en) {
    8b42:	797b      	ldrb	r3, [r7, #5]
    8b44:	2b00      	cmp	r3, #0
    8b46:	d008      	beq.n	8b5a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8b48:	79bb      	ldrb	r3, [r7, #6]
    8b4a:	2220      	movs	r2, #32
    8b4c:	409a      	lsls	r2, r3
    8b4e:	79fb      	ldrb	r3, [r7, #7]
    8b50:	4611      	mov	r1, r2
    8b52:	4618      	mov	r0, r3
    8b54:	4b07      	ldr	r3, [pc, #28]	; (8b74 <_usbd_ep_int_stall_en+0x44>)
    8b56:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8b58:	e007      	b.n	8b6a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8b5a:	79bb      	ldrb	r3, [r7, #6]
    8b5c:	2220      	movs	r2, #32
    8b5e:	409a      	lsls	r2, r3
    8b60:	79fb      	ldrb	r3, [r7, #7]
    8b62:	4611      	mov	r1, r2
    8b64:	4618      	mov	r0, r3
    8b66:	4b04      	ldr	r3, [pc, #16]	; (8b78 <_usbd_ep_int_stall_en+0x48>)
    8b68:	4798      	blx	r3
}
    8b6a:	bf00      	nop
    8b6c:	3708      	adds	r7, #8
    8b6e:	46bd      	mov	sp, r7
    8b70:	bd80      	pop	{r7, pc}
    8b72:	bf00      	nop
    8b74:	000089a5 	.word	0x000089a5
    8b78:	000089cd 	.word	0x000089cd

00008b7c <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8b7c:	b580      	push	{r7, lr}
    8b7e:	b082      	sub	sp, #8
    8b80:	af00      	add	r7, sp, #0
    8b82:	4603      	mov	r3, r0
    8b84:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8b86:	79fb      	ldrb	r3, [r7, #7]
    8b88:	4619      	mov	r1, r3
    8b8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b8e:	4b03      	ldr	r3, [pc, #12]	; (8b9c <_usbd_ep_stop_setup+0x20>)
    8b90:	4798      	blx	r3
}
    8b92:	bf00      	nop
    8b94:	3708      	adds	r7, #8
    8b96:	46bd      	mov	sp, r7
    8b98:	bd80      	pop	{r7, pc}
    8b9a:	bf00      	nop
    8b9c:	00008501 	.word	0x00008501

00008ba0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8ba0:	b580      	push	{r7, lr}
    8ba2:	b082      	sub	sp, #8
    8ba4:	af00      	add	r7, sp, #0
    8ba6:	4603      	mov	r3, r0
    8ba8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8baa:	79fb      	ldrb	r3, [r7, #7]
    8bac:	2210      	movs	r2, #16
    8bae:	4619      	mov	r1, r3
    8bb0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8bb4:	4b05      	ldr	r3, [pc, #20]	; (8bcc <_usbd_ep_is_setup+0x2c>)
    8bb6:	4798      	blx	r3
    8bb8:	4603      	mov	r3, r0
    8bba:	2b00      	cmp	r3, #0
    8bbc:	bf14      	ite	ne
    8bbe:	2301      	movne	r3, #1
    8bc0:	2300      	moveq	r3, #0
    8bc2:	b2db      	uxtb	r3, r3
}
    8bc4:	4618      	mov	r0, r3
    8bc6:	3708      	adds	r7, #8
    8bc8:	46bd      	mov	sp, r7
    8bca:	bd80      	pop	{r7, pc}
    8bcc:	000083f7 	.word	0x000083f7

00008bd0 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8bd0:	b580      	push	{r7, lr}
    8bd2:	b082      	sub	sp, #8
    8bd4:	af00      	add	r7, sp, #0
    8bd6:	4603      	mov	r3, r0
    8bd8:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8bda:	79fb      	ldrb	r3, [r7, #7]
    8bdc:	2110      	movs	r1, #16
    8bde:	4618      	mov	r0, r3
    8be0:	4b02      	ldr	r3, [pc, #8]	; (8bec <_usbd_ep_ack_setup+0x1c>)
    8be2:	4798      	blx	r3
}
    8be4:	bf00      	nop
    8be6:	3708      	adds	r7, #8
    8be8:	46bd      	mov	sp, r7
    8bea:	bd80      	pop	{r7, pc}
    8bec:	0000897d 	.word	0x0000897d

00008bf0 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8bf0:	b580      	push	{r7, lr}
    8bf2:	b082      	sub	sp, #8
    8bf4:	af00      	add	r7, sp, #0
    8bf6:	4603      	mov	r3, r0
    8bf8:	71fb      	strb	r3, [r7, #7]
    8bfa:	460b      	mov	r3, r1
    8bfc:	71bb      	strb	r3, [r7, #6]
    8bfe:	4613      	mov	r3, r2
    8c00:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8c02:	797b      	ldrb	r3, [r7, #5]
    8c04:	2b00      	cmp	r3, #0
    8c06:	d00b      	beq.n	8c20 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8c08:	79bb      	ldrb	r3, [r7, #6]
    8c0a:	2201      	movs	r2, #1
    8c0c:	fa02 f303 	lsl.w	r3, r2, r3
    8c10:	b2da      	uxtb	r2, r3
    8c12:	79fb      	ldrb	r3, [r7, #7]
    8c14:	4619      	mov	r1, r3
    8c16:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c1a:	4b09      	ldr	r3, [pc, #36]	; (8c40 <_usbd_ep_set_toggle+0x50>)
    8c1c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8c1e:	e00a      	b.n	8c36 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8c20:	79bb      	ldrb	r3, [r7, #6]
    8c22:	2201      	movs	r2, #1
    8c24:	fa02 f303 	lsl.w	r3, r2, r3
    8c28:	b2da      	uxtb	r2, r3
    8c2a:	79fb      	ldrb	r3, [r7, #7]
    8c2c:	4619      	mov	r1, r3
    8c2e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c32:	4b04      	ldr	r3, [pc, #16]	; (8c44 <_usbd_ep_set_toggle+0x54>)
    8c34:	4798      	blx	r3
}
    8c36:	bf00      	nop
    8c38:	3708      	adds	r7, #8
    8c3a:	46bd      	mov	sp, r7
    8c3c:	bd80      	pop	{r7, pc}
    8c3e:	bf00      	nop
    8c40:	00008481 	.word	0x00008481
    8c44:	000084d5 	.word	0x000084d5

00008c48 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8c48:	b580      	push	{r7, lr}
    8c4a:	b082      	sub	sp, #8
    8c4c:	af00      	add	r7, sp, #0
    8c4e:	4603      	mov	r3, r0
    8c50:	460a      	mov	r2, r1
    8c52:	71fb      	strb	r3, [r7, #7]
    8c54:	4613      	mov	r3, r2
    8c56:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8c58:	79bb      	ldrb	r3, [r7, #6]
    8c5a:	2201      	movs	r2, #1
    8c5c:	409a      	lsls	r2, r3
    8c5e:	79fb      	ldrb	r3, [r7, #7]
    8c60:	4611      	mov	r1, r2
    8c62:	4618      	mov	r0, r3
    8c64:	4b02      	ldr	r3, [pc, #8]	; (8c70 <_usbd_ep_ack_io_cpt+0x28>)
    8c66:	4798      	blx	r3
}
    8c68:	bf00      	nop
    8c6a:	3708      	adds	r7, #8
    8c6c:	46bd      	mov	sp, r7
    8c6e:	bd80      	pop	{r7, pc}
    8c70:	0000897d 	.word	0x0000897d

00008c74 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8c74:	b480      	push	{r7}
    8c76:	b085      	sub	sp, #20
    8c78:	af00      	add	r7, sp, #0
    8c7a:	4603      	mov	r3, r0
    8c7c:	603a      	str	r2, [r7, #0]
    8c7e:	71fb      	strb	r3, [r7, #7]
    8c80:	460b      	mov	r3, r1
    8c82:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8c84:	79fa      	ldrb	r2, [r7, #7]
    8c86:	79bb      	ldrb	r3, [r7, #6]
    8c88:	0052      	lsls	r2, r2, #1
    8c8a:	4413      	add	r3, r2
    8c8c:	011b      	lsls	r3, r3, #4
    8c8e:	4a06      	ldr	r2, [pc, #24]	; (8ca8 <_usbd_ep_set_buf+0x34>)
    8c90:	4413      	add	r3, r2
    8c92:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8c94:	68fb      	ldr	r3, [r7, #12]
    8c96:	683a      	ldr	r2, [r7, #0]
    8c98:	601a      	str	r2, [r3, #0]
}
    8c9a:	bf00      	nop
    8c9c:	3714      	adds	r7, #20
    8c9e:	46bd      	mov	sp, r7
    8ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ca4:	4770      	bx	lr
    8ca6:	bf00      	nop
    8ca8:	20002448 	.word	0x20002448

00008cac <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8cac:	b480      	push	{r7}
    8cae:	b085      	sub	sp, #20
    8cb0:	af00      	add	r7, sp, #0
    8cb2:	4603      	mov	r3, r0
    8cb4:	71fb      	strb	r3, [r7, #7]
    8cb6:	460b      	mov	r3, r1
    8cb8:	71bb      	strb	r3, [r7, #6]
    8cba:	4613      	mov	r3, r2
    8cbc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8cbe:	79fa      	ldrb	r2, [r7, #7]
    8cc0:	79bb      	ldrb	r3, [r7, #6]
    8cc2:	0052      	lsls	r2, r2, #1
    8cc4:	4413      	add	r3, r2
    8cc6:	011b      	lsls	r3, r3, #4
    8cc8:	4a08      	ldr	r2, [pc, #32]	; (8cec <_usbd_ep_set_in_count+0x40>)
    8cca:	4413      	add	r3, r2
    8ccc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8cce:	88bb      	ldrh	r3, [r7, #4]
    8cd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8cd4:	b299      	uxth	r1, r3
    8cd6:	68fa      	ldr	r2, [r7, #12]
    8cd8:	6853      	ldr	r3, [r2, #4]
    8cda:	f361 339b 	bfi	r3, r1, #14, #14
    8cde:	6053      	str	r3, [r2, #4]
}
    8ce0:	bf00      	nop
    8ce2:	3714      	adds	r7, #20
    8ce4:	46bd      	mov	sp, r7
    8ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cea:	4770      	bx	lr
    8cec:	20002448 	.word	0x20002448

00008cf0 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8cf0:	b480      	push	{r7}
    8cf2:	b085      	sub	sp, #20
    8cf4:	af00      	add	r7, sp, #0
    8cf6:	4603      	mov	r3, r0
    8cf8:	71fb      	strb	r3, [r7, #7]
    8cfa:	460b      	mov	r3, r1
    8cfc:	71bb      	strb	r3, [r7, #6]
    8cfe:	4613      	mov	r3, r2
    8d00:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d02:	79fa      	ldrb	r2, [r7, #7]
    8d04:	79bb      	ldrb	r3, [r7, #6]
    8d06:	0052      	lsls	r2, r2, #1
    8d08:	4413      	add	r3, r2
    8d0a:	011b      	lsls	r3, r3, #4
    8d0c:	4a08      	ldr	r2, [pc, #32]	; (8d30 <_usbd_ep_set_in_size+0x40>)
    8d0e:	4413      	add	r3, r2
    8d10:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8d12:	88bb      	ldrh	r3, [r7, #4]
    8d14:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8d18:	b299      	uxth	r1, r3
    8d1a:	68fa      	ldr	r2, [r7, #12]
    8d1c:	6853      	ldr	r3, [r2, #4]
    8d1e:	f361 030d 	bfi	r3, r1, #0, #14
    8d22:	6053      	str	r3, [r2, #4]
}
    8d24:	bf00      	nop
    8d26:	3714      	adds	r7, #20
    8d28:	46bd      	mov	sp, r7
    8d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d2e:	4770      	bx	lr
    8d30:	20002448 	.word	0x20002448

00008d34 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8d34:	b480      	push	{r7}
    8d36:	b085      	sub	sp, #20
    8d38:	af00      	add	r7, sp, #0
    8d3a:	4603      	mov	r3, r0
    8d3c:	71fb      	strb	r3, [r7, #7]
    8d3e:	460b      	mov	r3, r1
    8d40:	71bb      	strb	r3, [r7, #6]
    8d42:	4613      	mov	r3, r2
    8d44:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d46:	79fa      	ldrb	r2, [r7, #7]
    8d48:	79bb      	ldrb	r3, [r7, #6]
    8d4a:	0052      	lsls	r2, r2, #1
    8d4c:	4413      	add	r3, r2
    8d4e:	011b      	lsls	r3, r3, #4
    8d50:	4a08      	ldr	r2, [pc, #32]	; (8d74 <_usbd_ep_set_out_count+0x40>)
    8d52:	4413      	add	r3, r2
    8d54:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8d56:	88bb      	ldrh	r3, [r7, #4]
    8d58:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8d5c:	b299      	uxth	r1, r3
    8d5e:	68fa      	ldr	r2, [r7, #12]
    8d60:	6853      	ldr	r3, [r2, #4]
    8d62:	f361 030d 	bfi	r3, r1, #0, #14
    8d66:	6053      	str	r3, [r2, #4]
}
    8d68:	bf00      	nop
    8d6a:	3714      	adds	r7, #20
    8d6c:	46bd      	mov	sp, r7
    8d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d72:	4770      	bx	lr
    8d74:	20002448 	.word	0x20002448

00008d78 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8d78:	b480      	push	{r7}
    8d7a:	b085      	sub	sp, #20
    8d7c:	af00      	add	r7, sp, #0
    8d7e:	4603      	mov	r3, r0
    8d80:	71fb      	strb	r3, [r7, #7]
    8d82:	460b      	mov	r3, r1
    8d84:	71bb      	strb	r3, [r7, #6]
    8d86:	4613      	mov	r3, r2
    8d88:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d8a:	79fa      	ldrb	r2, [r7, #7]
    8d8c:	79bb      	ldrb	r3, [r7, #6]
    8d8e:	0052      	lsls	r2, r2, #1
    8d90:	4413      	add	r3, r2
    8d92:	011b      	lsls	r3, r3, #4
    8d94:	4a08      	ldr	r2, [pc, #32]	; (8db8 <_usbd_ep_set_out_size+0x40>)
    8d96:	4413      	add	r3, r2
    8d98:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8d9a:	88bb      	ldrh	r3, [r7, #4]
    8d9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8da0:	b299      	uxth	r1, r3
    8da2:	68fa      	ldr	r2, [r7, #12]
    8da4:	6853      	ldr	r3, [r2, #4]
    8da6:	f361 339b 	bfi	r3, r1, #14, #14
    8daa:	6053      	str	r3, [r2, #4]
}
    8dac:	bf00      	nop
    8dae:	3714      	adds	r7, #20
    8db0:	46bd      	mov	sp, r7
    8db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8db6:	4770      	bx	lr
    8db8:	20002448 	.word	0x20002448

00008dbc <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8dbc:	b580      	push	{r7, lr}
    8dbe:	b084      	sub	sp, #16
    8dc0:	af00      	add	r7, sp, #0
    8dc2:	60ba      	str	r2, [r7, #8]
    8dc4:	607b      	str	r3, [r7, #4]
    8dc6:	4603      	mov	r3, r0
    8dc8:	73fb      	strb	r3, [r7, #15]
    8dca:	460b      	mov	r3, r1
    8dcc:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8dce:	68bb      	ldr	r3, [r7, #8]
    8dd0:	b29a      	uxth	r2, r3
    8dd2:	7bb9      	ldrb	r1, [r7, #14]
    8dd4:	7bfb      	ldrb	r3, [r7, #15]
    8dd6:	4618      	mov	r0, r3
    8dd8:	4b06      	ldr	r3, [pc, #24]	; (8df4 <_usbd_ep_set_in_trans+0x38>)
    8dda:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8ddc:	687b      	ldr	r3, [r7, #4]
    8dde:	b29a      	uxth	r2, r3
    8de0:	7bb9      	ldrb	r1, [r7, #14]
    8de2:	7bfb      	ldrb	r3, [r7, #15]
    8de4:	4618      	mov	r0, r3
    8de6:	4b04      	ldr	r3, [pc, #16]	; (8df8 <_usbd_ep_set_in_trans+0x3c>)
    8de8:	4798      	blx	r3
}
    8dea:	bf00      	nop
    8dec:	3710      	adds	r7, #16
    8dee:	46bd      	mov	sp, r7
    8df0:	bd80      	pop	{r7, pc}
    8df2:	bf00      	nop
    8df4:	00008cf1 	.word	0x00008cf1
    8df8:	00008cad 	.word	0x00008cad

00008dfc <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8dfc:	b580      	push	{r7, lr}
    8dfe:	b084      	sub	sp, #16
    8e00:	af00      	add	r7, sp, #0
    8e02:	60ba      	str	r2, [r7, #8]
    8e04:	607b      	str	r3, [r7, #4]
    8e06:	4603      	mov	r3, r0
    8e08:	73fb      	strb	r3, [r7, #15]
    8e0a:	460b      	mov	r3, r1
    8e0c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8e0e:	68bb      	ldr	r3, [r7, #8]
    8e10:	b29a      	uxth	r2, r3
    8e12:	7bb9      	ldrb	r1, [r7, #14]
    8e14:	7bfb      	ldrb	r3, [r7, #15]
    8e16:	4618      	mov	r0, r3
    8e18:	4b06      	ldr	r3, [pc, #24]	; (8e34 <_usbd_ep_set_out_trans+0x38>)
    8e1a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8e1c:	687b      	ldr	r3, [r7, #4]
    8e1e:	b29a      	uxth	r2, r3
    8e20:	7bb9      	ldrb	r1, [r7, #14]
    8e22:	7bfb      	ldrb	r3, [r7, #15]
    8e24:	4618      	mov	r0, r3
    8e26:	4b04      	ldr	r3, [pc, #16]	; (8e38 <_usbd_ep_set_out_trans+0x3c>)
    8e28:	4798      	blx	r3
}
    8e2a:	bf00      	nop
    8e2c:	3710      	adds	r7, #16
    8e2e:	46bd      	mov	sp, r7
    8e30:	bd80      	pop	{r7, pc}
    8e32:	bf00      	nop
    8e34:	00008d79 	.word	0x00008d79
    8e38:	00008d35 	.word	0x00008d35

00008e3c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8e3c:	b480      	push	{r7}
    8e3e:	b085      	sub	sp, #20
    8e40:	af00      	add	r7, sp, #0
    8e42:	4603      	mov	r3, r0
    8e44:	460a      	mov	r2, r1
    8e46:	71fb      	strb	r3, [r7, #7]
    8e48:	4613      	mov	r3, r2
    8e4a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e4c:	79fa      	ldrb	r2, [r7, #7]
    8e4e:	79bb      	ldrb	r3, [r7, #6]
    8e50:	0052      	lsls	r2, r2, #1
    8e52:	4413      	add	r3, r2
    8e54:	011b      	lsls	r3, r3, #4
    8e56:	4a06      	ldr	r2, [pc, #24]	; (8e70 <_usbd_ep_clear_bank_status+0x34>)
    8e58:	4413      	add	r3, r2
    8e5a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8e5c:	68fb      	ldr	r3, [r7, #12]
    8e5e:	2200      	movs	r2, #0
    8e60:	729a      	strb	r2, [r3, #10]
}
    8e62:	bf00      	nop
    8e64:	3714      	adds	r7, #20
    8e66:	46bd      	mov	sp, r7
    8e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e6c:	4770      	bx	lr
    8e6e:	bf00      	nop
    8e70:	20002448 	.word	0x20002448

00008e74 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8e74:	b580      	push	{r7, lr}
    8e76:	b082      	sub	sp, #8
    8e78:	af00      	add	r7, sp, #0
    8e7a:	4603      	mov	r3, r0
    8e7c:	71fb      	strb	r3, [r7, #7]
    8e7e:	460b      	mov	r3, r1
    8e80:	71bb      	strb	r3, [r7, #6]
    8e82:	4613      	mov	r3, r2
    8e84:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8e86:	797b      	ldrb	r3, [r7, #5]
    8e88:	2b00      	cmp	r3, #0
    8e8a:	d00b      	beq.n	8ea4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8e8c:	79bb      	ldrb	r3, [r7, #6]
    8e8e:	2240      	movs	r2, #64	; 0x40
    8e90:	fa02 f303 	lsl.w	r3, r2, r3
    8e94:	b2da      	uxtb	r2, r3
    8e96:	79fb      	ldrb	r3, [r7, #7]
    8e98:	4619      	mov	r1, r3
    8e9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e9e:	4b09      	ldr	r3, [pc, #36]	; (8ec4 <_usbd_ep_set_in_rdy+0x50>)
    8ea0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8ea2:	e00a      	b.n	8eba <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8ea4:	79bb      	ldrb	r3, [r7, #6]
    8ea6:	2240      	movs	r2, #64	; 0x40
    8ea8:	fa02 f303 	lsl.w	r3, r2, r3
    8eac:	b2da      	uxtb	r2, r3
    8eae:	79fb      	ldrb	r3, [r7, #7]
    8eb0:	4619      	mov	r1, r3
    8eb2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8eb6:	4b04      	ldr	r3, [pc, #16]	; (8ec8 <_usbd_ep_set_in_rdy+0x54>)
    8eb8:	4798      	blx	r3
}
    8eba:	bf00      	nop
    8ebc:	3708      	adds	r7, #8
    8ebe:	46bd      	mov	sp, r7
    8ec0:	bd80      	pop	{r7, pc}
    8ec2:	bf00      	nop
    8ec4:	00008481 	.word	0x00008481
    8ec8:	000084d5 	.word	0x000084d5

00008ecc <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8ecc:	b580      	push	{r7, lr}
    8ece:	b082      	sub	sp, #8
    8ed0:	af00      	add	r7, sp, #0
    8ed2:	4603      	mov	r3, r0
    8ed4:	71fb      	strb	r3, [r7, #7]
    8ed6:	460b      	mov	r3, r1
    8ed8:	71bb      	strb	r3, [r7, #6]
    8eda:	4613      	mov	r3, r2
    8edc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8ede:	797b      	ldrb	r3, [r7, #5]
    8ee0:	2b00      	cmp	r3, #0
    8ee2:	d00b      	beq.n	8efc <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8ee4:	79bb      	ldrb	r3, [r7, #6]
    8ee6:	2240      	movs	r2, #64	; 0x40
    8ee8:	fa02 f303 	lsl.w	r3, r2, r3
    8eec:	b2da      	uxtb	r2, r3
    8eee:	79fb      	ldrb	r3, [r7, #7]
    8ef0:	4619      	mov	r1, r3
    8ef2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ef6:	4b09      	ldr	r3, [pc, #36]	; (8f1c <_usbd_ep_set_out_rdy+0x50>)
    8ef8:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8efa:	e00a      	b.n	8f12 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8efc:	79bb      	ldrb	r3, [r7, #6]
    8efe:	2240      	movs	r2, #64	; 0x40
    8f00:	fa02 f303 	lsl.w	r3, r2, r3
    8f04:	b2da      	uxtb	r2, r3
    8f06:	79fb      	ldrb	r3, [r7, #7]
    8f08:	4619      	mov	r1, r3
    8f0a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f0e:	4b04      	ldr	r3, [pc, #16]	; (8f20 <_usbd_ep_set_out_rdy+0x54>)
    8f10:	4798      	blx	r3
}
    8f12:	bf00      	nop
    8f14:	3708      	adds	r7, #8
    8f16:	46bd      	mov	sp, r7
    8f18:	bd80      	pop	{r7, pc}
    8f1a:	bf00      	nop
    8f1c:	000084d5 	.word	0x000084d5
    8f20:	00008481 	.word	0x00008481

00008f24 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8f24:	b480      	push	{r7}
    8f26:	b083      	sub	sp, #12
    8f28:	af00      	add	r7, sp, #0
    8f2a:	4603      	mov	r3, r0
    8f2c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8f2e:	88fb      	ldrh	r3, [r7, #6]
    8f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8f34:	d820      	bhi.n	8f78 <_usbd_ep_pcksize_size+0x54>
    8f36:	88fb      	ldrh	r3, [r7, #6]
    8f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8f3c:	d81a      	bhi.n	8f74 <_usbd_ep_pcksize_size+0x50>
    8f3e:	88fb      	ldrh	r3, [r7, #6]
    8f40:	2b80      	cmp	r3, #128	; 0x80
    8f42:	d815      	bhi.n	8f70 <_usbd_ep_pcksize_size+0x4c>
    8f44:	88fb      	ldrh	r3, [r7, #6]
    8f46:	2b40      	cmp	r3, #64	; 0x40
    8f48:	d810      	bhi.n	8f6c <_usbd_ep_pcksize_size+0x48>
    8f4a:	88fb      	ldrh	r3, [r7, #6]
    8f4c:	2b20      	cmp	r3, #32
    8f4e:	d80b      	bhi.n	8f68 <_usbd_ep_pcksize_size+0x44>
    8f50:	88fb      	ldrh	r3, [r7, #6]
    8f52:	2b10      	cmp	r3, #16
    8f54:	d806      	bhi.n	8f64 <_usbd_ep_pcksize_size+0x40>
    8f56:	88fb      	ldrh	r3, [r7, #6]
    8f58:	2b08      	cmp	r3, #8
    8f5a:	bf8c      	ite	hi
    8f5c:	2301      	movhi	r3, #1
    8f5e:	2300      	movls	r3, #0
    8f60:	b2db      	uxtb	r3, r3
    8f62:	e00a      	b.n	8f7a <_usbd_ep_pcksize_size+0x56>
    8f64:	2302      	movs	r3, #2
    8f66:	e008      	b.n	8f7a <_usbd_ep_pcksize_size+0x56>
    8f68:	2303      	movs	r3, #3
    8f6a:	e006      	b.n	8f7a <_usbd_ep_pcksize_size+0x56>
    8f6c:	2304      	movs	r3, #4
    8f6e:	e004      	b.n	8f7a <_usbd_ep_pcksize_size+0x56>
    8f70:	2305      	movs	r3, #5
    8f72:	e002      	b.n	8f7a <_usbd_ep_pcksize_size+0x56>
    8f74:	2306      	movs	r3, #6
    8f76:	e000      	b.n	8f7a <_usbd_ep_pcksize_size+0x56>
    8f78:	2307      	movs	r3, #7
}
    8f7a:	4618      	mov	r0, r3
    8f7c:	370c      	adds	r7, #12
    8f7e:	46bd      	mov	sp, r7
    8f80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f84:	4770      	bx	lr
	...

00008f88 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8f88:	b480      	push	{r7}
    8f8a:	b085      	sub	sp, #20
    8f8c:	af00      	add	r7, sp, #0
    8f8e:	4603      	mov	r3, r0
    8f90:	460a      	mov	r2, r1
    8f92:	71fb      	strb	r3, [r7, #7]
    8f94:	4613      	mov	r3, r2
    8f96:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8f98:	79fb      	ldrb	r3, [r7, #7]
    8f9a:	2b00      	cmp	r3, #0
    8f9c:	d008      	beq.n	8fb0 <_usb_d_dev_ept+0x28>
    8f9e:	79bb      	ldrb	r3, [r7, #6]
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d003      	beq.n	8fac <_usb_d_dev_ept+0x24>
    8fa4:	79fb      	ldrb	r3, [r7, #7]
    8fa6:	3304      	adds	r3, #4
    8fa8:	b2db      	uxtb	r3, r3
    8faa:	e002      	b.n	8fb2 <_usb_d_dev_ept+0x2a>
    8fac:	79fb      	ldrb	r3, [r7, #7]
    8fae:	e000      	b.n	8fb2 <_usb_d_dev_ept+0x2a>
    8fb0:	2300      	movs	r3, #0
    8fb2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    8fb4:	7bfa      	ldrb	r2, [r7, #15]
    8fb6:	4613      	mov	r3, r2
    8fb8:	009b      	lsls	r3, r3, #2
    8fba:	4413      	add	r3, r2
    8fbc:	009b      	lsls	r3, r3, #2
    8fbe:	3310      	adds	r3, #16
    8fc0:	4a04      	ldr	r2, [pc, #16]	; (8fd4 <_usb_d_dev_ept+0x4c>)
    8fc2:	4413      	add	r3, r2
    8fc4:	3304      	adds	r3, #4
}
    8fc6:	4618      	mov	r0, r3
    8fc8:	3714      	adds	r7, #20
    8fca:	46bd      	mov	sp, r7
    8fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fd0:	4770      	bx	lr
    8fd2:	bf00      	nop
    8fd4:	20002380 	.word	0x20002380

00008fd8 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8fd8:	b580      	push	{r7, lr}
    8fda:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    8fdc:	2104      	movs	r1, #4
    8fde:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fe2:	4b03      	ldr	r3, [pc, #12]	; (8ff0 <_usb_d_dev_sof+0x18>)
    8fe4:	4798      	blx	r3
	dev_inst.callbacks.sof();
    8fe6:	4b03      	ldr	r3, [pc, #12]	; (8ff4 <_usb_d_dev_sof+0x1c>)
    8fe8:	681b      	ldr	r3, [r3, #0]
    8fea:	4798      	blx	r3
}
    8fec:	bf00      	nop
    8fee:	bd80      	pop	{r7, pc}
    8ff0:	0000864f 	.word	0x0000864f
    8ff4:	20002380 	.word	0x20002380

00008ff8 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8ff8:	b580      	push	{r7, lr}
    8ffa:	b084      	sub	sp, #16
    8ffc:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    8ffe:	2300      	movs	r3, #0
    9000:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9002:	f240 2101 	movw	r1, #513	; 0x201
    9006:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    900a:	4b1a      	ldr	r3, [pc, #104]	; (9074 <_usb_d_dev_lpmsusp+0x7c>)
    900c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    900e:	f240 2101 	movw	r1, #513	; 0x201
    9012:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9016:	4b18      	ldr	r3, [pc, #96]	; (9078 <_usb_d_dev_lpmsusp+0x80>)
    9018:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    901a:	2170      	movs	r1, #112	; 0x70
    901c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9020:	4b16      	ldr	r3, [pc, #88]	; (907c <_usb_d_dev_lpmsusp+0x84>)
    9022:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9024:	2300      	movs	r3, #0
    9026:	73fb      	strb	r3, [r7, #15]
    9028:	e018      	b.n	905c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    902a:	7bfb      	ldrb	r3, [r7, #15]
    902c:	015b      	lsls	r3, r3, #5
    902e:	4a14      	ldr	r2, [pc, #80]	; (9080 <_usb_d_dev_lpmsusp+0x88>)
    9030:	4413      	add	r3, r2
    9032:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9034:	687b      	ldr	r3, [r7, #4]
    9036:	891b      	ldrh	r3, [r3, #8]
    9038:	f3c3 0303 	ubfx	r3, r3, #0, #4
    903c:	b2db      	uxtb	r3, r3
    903e:	2b03      	cmp	r3, #3
    9040:	d109      	bne.n	9056 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9042:	687b      	ldr	r3, [r7, #4]
    9044:	891b      	ldrh	r3, [r3, #8]
    9046:	f3c3 130a 	ubfx	r3, r3, #4, #11
    904a:	b29b      	uxth	r3, r3
    904c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    904e:	687b      	ldr	r3, [r7, #4]
    9050:	2200      	movs	r2, #0
    9052:	811a      	strh	r2, [r3, #8]
			break;
    9054:	e005      	b.n	9062 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9056:	7bfb      	ldrb	r3, [r7, #15]
    9058:	3301      	adds	r3, #1
    905a:	73fb      	strb	r3, [r7, #15]
    905c:	7bfb      	ldrb	r3, [r7, #15]
    905e:	2b03      	cmp	r3, #3
    9060:	d9e3      	bls.n	902a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9062:	4b08      	ldr	r3, [pc, #32]	; (9084 <_usb_d_dev_lpmsusp+0x8c>)
    9064:	685b      	ldr	r3, [r3, #4]
    9066:	68b9      	ldr	r1, [r7, #8]
    9068:	2003      	movs	r0, #3
    906a:	4798      	blx	r3
}
    906c:	bf00      	nop
    906e:	3710      	adds	r7, #16
    9070:	46bd      	mov	sp, r7
    9072:	bd80      	pop	{r7, pc}
    9074:	0000864f 	.word	0x0000864f
    9078:	000086a5 	.word	0x000086a5
    907c:	0000866d 	.word	0x0000866d
    9080:	20002448 	.word	0x20002448
    9084:	20002380 	.word	0x20002380

00009088 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9088:	b580      	push	{r7, lr}
    908a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    908c:	2180      	movs	r1, #128	; 0x80
    908e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9092:	4b04      	ldr	r3, [pc, #16]	; (90a4 <_usb_d_dev_ramerr+0x1c>)
    9094:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9096:	4b04      	ldr	r3, [pc, #16]	; (90a8 <_usb_d_dev_ramerr+0x20>)
    9098:	685b      	ldr	r3, [r3, #4]
    909a:	2100      	movs	r1, #0
    909c:	2005      	movs	r0, #5
    909e:	4798      	blx	r3
}
    90a0:	bf00      	nop
    90a2:	bd80      	pop	{r7, pc}
    90a4:	0000864f 	.word	0x0000864f
    90a8:	20002380 	.word	0x20002380

000090ac <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    90ac:	b580      	push	{r7, lr}
    90ae:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    90b0:	2170      	movs	r1, #112	; 0x70
    90b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90b6:	4b0b      	ldr	r3, [pc, #44]	; (90e4 <_usb_d_dev_wakeup+0x38>)
    90b8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    90ba:	2170      	movs	r1, #112	; 0x70
    90bc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90c0:	4b09      	ldr	r3, [pc, #36]	; (90e8 <_usb_d_dev_wakeup+0x3c>)
    90c2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    90c4:	f240 2101 	movw	r1, #513	; 0x201
    90c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90cc:	4b07      	ldr	r3, [pc, #28]	; (90ec <_usb_d_dev_wakeup+0x40>)
    90ce:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    90d0:	2000      	movs	r0, #0
    90d2:	4b07      	ldr	r3, [pc, #28]	; (90f0 <_usb_d_dev_wakeup+0x44>)
    90d4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    90d6:	4b07      	ldr	r3, [pc, #28]	; (90f4 <_usb_d_dev_wakeup+0x48>)
    90d8:	685b      	ldr	r3, [r3, #4]
    90da:	2100      	movs	r1, #0
    90dc:	2002      	movs	r0, #2
    90de:	4798      	blx	r3
}
    90e0:	bf00      	nop
    90e2:	bd80      	pop	{r7, pc}
    90e4:	0000864f 	.word	0x0000864f
    90e8:	000086a5 	.word	0x000086a5
    90ec:	0000866d 	.word	0x0000866d
    90f0:	0000894d 	.word	0x0000894d
    90f4:	20002380 	.word	0x20002380

000090f8 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    90f8:	b580      	push	{r7, lr}
    90fa:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    90fc:	2200      	movs	r2, #0
    90fe:	2100      	movs	r1, #0
    9100:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9104:	4b0d      	ldr	r3, [pc, #52]	; (913c <_usb_d_dev_reset+0x44>)
    9106:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9108:	2108      	movs	r1, #8
    910a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    910e:	4b0c      	ldr	r3, [pc, #48]	; (9140 <_usb_d_dev_reset+0x48>)
    9110:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9112:	2170      	movs	r1, #112	; 0x70
    9114:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9118:	4b0a      	ldr	r3, [pc, #40]	; (9144 <_usb_d_dev_reset+0x4c>)
    911a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    911c:	f240 2101 	movw	r1, #513	; 0x201
    9120:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9124:	4b08      	ldr	r3, [pc, #32]	; (9148 <_usb_d_dev_reset+0x50>)
    9126:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9128:	4b08      	ldr	r3, [pc, #32]	; (914c <_usb_d_dev_reset+0x54>)
    912a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    912c:	4b08      	ldr	r3, [pc, #32]	; (9150 <_usb_d_dev_reset+0x58>)
    912e:	685b      	ldr	r3, [r3, #4]
    9130:	2100      	movs	r1, #0
    9132:	2001      	movs	r0, #1
    9134:	4798      	blx	r3
}
    9136:	bf00      	nop
    9138:	bd80      	pop	{r7, pc}
    913a:	bf00      	nop
    913c:	000085e5 	.word	0x000085e5
    9140:	0000864f 	.word	0x0000864f
    9144:	000086a5 	.word	0x000086a5
    9148:	0000866d 	.word	0x0000866d
    914c:	00009cb5 	.word	0x00009cb5
    9150:	20002380 	.word	0x20002380

00009154 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9154:	b580      	push	{r7, lr}
    9156:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9158:	f240 2101 	movw	r1, #513	; 0x201
    915c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9160:	4b09      	ldr	r3, [pc, #36]	; (9188 <_usb_d_dev_suspend+0x34>)
    9162:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9164:	f240 2101 	movw	r1, #513	; 0x201
    9168:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    916c:	4b07      	ldr	r3, [pc, #28]	; (918c <_usb_d_dev_suspend+0x38>)
    916e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9170:	2170      	movs	r1, #112	; 0x70
    9172:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9176:	4b06      	ldr	r3, [pc, #24]	; (9190 <_usb_d_dev_suspend+0x3c>)
    9178:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    917a:	4b06      	ldr	r3, [pc, #24]	; (9194 <_usb_d_dev_suspend+0x40>)
    917c:	685b      	ldr	r3, [r3, #4]
    917e:	2100      	movs	r1, #0
    9180:	2004      	movs	r0, #4
    9182:	4798      	blx	r3
}
    9184:	bf00      	nop
    9186:	bd80      	pop	{r7, pc}
    9188:	0000864f 	.word	0x0000864f
    918c:	000086a5 	.word	0x000086a5
    9190:	0000866d 	.word	0x0000866d
    9194:	20002380 	.word	0x20002380

00009198 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9198:	b580      	push	{r7, lr}
    919a:	b082      	sub	sp, #8
    919c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    919e:	2301      	movs	r3, #1
    91a0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    91a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91a6:	4b22      	ldr	r3, [pc, #136]	; (9230 <_usb_d_dev_handle_nep+0x98>)
    91a8:	4798      	blx	r3
    91aa:	4603      	mov	r3, r0
    91ac:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    91ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91b2:	4b20      	ldr	r3, [pc, #128]	; (9234 <_usb_d_dev_handle_nep+0x9c>)
    91b4:	4798      	blx	r3
    91b6:	4603      	mov	r3, r0
    91b8:	461a      	mov	r2, r3
    91ba:	88bb      	ldrh	r3, [r7, #4]
    91bc:	4013      	ands	r3, r2
    91be:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    91c0:	88bb      	ldrh	r3, [r7, #4]
    91c2:	f003 0304 	and.w	r3, r3, #4
    91c6:	2b00      	cmp	r3, #0
    91c8:	d003      	beq.n	91d2 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    91ca:	4b1b      	ldr	r3, [pc, #108]	; (9238 <_usb_d_dev_handle_nep+0xa0>)
    91cc:	4798      	blx	r3
		return true;
    91ce:	2301      	movs	r3, #1
    91d0:	e02a      	b.n	9228 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    91d2:	88bb      	ldrh	r3, [r7, #4]
    91d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    91d8:	2b00      	cmp	r3, #0
    91da:	d002      	beq.n	91e2 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    91dc:	4b17      	ldr	r3, [pc, #92]	; (923c <_usb_d_dev_handle_nep+0xa4>)
    91de:	4798      	blx	r3
    91e0:	e021      	b.n	9226 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    91e2:	88bb      	ldrh	r3, [r7, #4]
    91e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    91e8:	2b00      	cmp	r3, #0
    91ea:	d002      	beq.n	91f2 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    91ec:	4b14      	ldr	r3, [pc, #80]	; (9240 <_usb_d_dev_handle_nep+0xa8>)
    91ee:	4798      	blx	r3
    91f0:	e019      	b.n	9226 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    91f2:	88bb      	ldrh	r3, [r7, #4]
    91f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    91f8:	2b00      	cmp	r3, #0
    91fa:	d002      	beq.n	9202 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    91fc:	4b11      	ldr	r3, [pc, #68]	; (9244 <_usb_d_dev_handle_nep+0xac>)
    91fe:	4798      	blx	r3
    9200:	e011      	b.n	9226 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9202:	88bb      	ldrh	r3, [r7, #4]
    9204:	f003 0308 	and.w	r3, r3, #8
    9208:	2b00      	cmp	r3, #0
    920a:	d002      	beq.n	9212 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    920c:	4b0e      	ldr	r3, [pc, #56]	; (9248 <_usb_d_dev_handle_nep+0xb0>)
    920e:	4798      	blx	r3
    9210:	e009      	b.n	9226 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9212:	88bb      	ldrh	r3, [r7, #4]
    9214:	f003 0301 	and.w	r3, r3, #1
    9218:	2b00      	cmp	r3, #0
    921a:	d002      	beq.n	9222 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    921c:	4b0b      	ldr	r3, [pc, #44]	; (924c <_usb_d_dev_handle_nep+0xb4>)
    921e:	4798      	blx	r3
    9220:	e001      	b.n	9226 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9222:	2300      	movs	r3, #0
    9224:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9226:	79fb      	ldrb	r3, [r7, #7]
}
    9228:	4618      	mov	r0, r3
    922a:	3708      	adds	r7, #8
    922c:	46bd      	mov	sp, r7
    922e:	bd80      	pop	{r7, pc}
    9230:	00008635 	.word	0x00008635
    9234:	0000868b 	.word	0x0000868b
    9238:	00008fd9 	.word	0x00008fd9
    923c:	00008ff9 	.word	0x00008ff9
    9240:	00009089 	.word	0x00009089
    9244:	000090ad 	.word	0x000090ad
    9248:	000090f9 	.word	0x000090f9
    924c:	00009155 	.word	0x00009155

00009250 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9250:	b590      	push	{r4, r7, lr}
    9252:	b089      	sub	sp, #36	; 0x24
    9254:	af00      	add	r7, sp, #0
    9256:	6078      	str	r0, [r7, #4]
    9258:	460b      	mov	r3, r1
    925a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    925c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9260:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9262:	687b      	ldr	r3, [r7, #4]
    9264:	7c9b      	ldrb	r3, [r3, #18]
    9266:	f003 030f 	and.w	r3, r3, #15
    926a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    926c:	7dfb      	ldrb	r3, [r7, #23]
    926e:	015b      	lsls	r3, r3, #5
    9270:	4a73      	ldr	r2, [pc, #460]	; (9440 <_usb_d_dev_in_next+0x1f0>)
    9272:	4413      	add	r3, r2
    9274:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9276:	78fb      	ldrb	r3, [r7, #3]
    9278:	2b00      	cmp	r3, #0
    927a:	d006      	beq.n	928a <_usb_d_dev_in_next+0x3a>
    927c:	693b      	ldr	r3, [r7, #16]
    927e:	3310      	adds	r3, #16
    9280:	685b      	ldr	r3, [r3, #4]
    9282:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9286:	b29b      	uxth	r3, r3
    9288:	e000      	b.n	928c <_usb_d_dev_in_next+0x3c>
    928a:	2300      	movs	r3, #0
    928c:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    928e:	687b      	ldr	r3, [r7, #4]
    9290:	8a1b      	ldrh	r3, [r3, #16]
    9292:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9296:	4293      	cmp	r3, r2
    9298:	d103      	bne.n	92a2 <_usb_d_dev_in_next+0x52>
    929a:	687b      	ldr	r3, [r7, #4]
    929c:	8a1b      	ldrh	r3, [r3, #16]
    929e:	b21b      	sxth	r3, r3
    92a0:	e004      	b.n	92ac <_usb_d_dev_in_next+0x5c>
    92a2:	687b      	ldr	r3, [r7, #4]
    92a4:	8a1b      	ldrh	r3, [r3, #16]
    92a6:	3b01      	subs	r3, #1
    92a8:	b29b      	uxth	r3, r3
    92aa:	b21b      	sxth	r3, r3
    92ac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    92b0:	4013      	ands	r3, r2
    92b2:	b21b      	sxth	r3, r3
    92b4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    92b6:	2300      	movs	r3, #0
    92b8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    92ba:	687b      	ldr	r3, [r7, #4]
    92bc:	7cdb      	ldrb	r3, [r3, #19]
    92be:	f003 0307 	and.w	r3, r3, #7
    92c2:	b2db      	uxtb	r3, r3
    92c4:	2b01      	cmp	r3, #1
    92c6:	bf0c      	ite	eq
    92c8:	2301      	moveq	r3, #1
    92ca:	2300      	movne	r3, #0
    92cc:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    92ce:	78fb      	ldrb	r3, [r7, #3]
    92d0:	2b00      	cmp	r3, #0
    92d2:	d004      	beq.n	92de <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    92d4:	7dfb      	ldrb	r3, [r7, #23]
    92d6:	2101      	movs	r1, #1
    92d8:	4618      	mov	r0, r3
    92da:	4b5a      	ldr	r3, [pc, #360]	; (9444 <_usb_d_dev_in_next+0x1f4>)
    92dc:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    92de:	687b      	ldr	r3, [r7, #4]
    92e0:	689a      	ldr	r2, [r3, #8]
    92e2:	89fb      	ldrh	r3, [r7, #14]
    92e4:	441a      	add	r2, r3
    92e6:	687b      	ldr	r3, [r7, #4]
    92e8:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    92ea:	687b      	ldr	r3, [r7, #4]
    92ec:	689a      	ldr	r2, [r3, #8]
    92ee:	687b      	ldr	r3, [r7, #4]
    92f0:	685b      	ldr	r3, [r3, #4]
    92f2:	429a      	cmp	r2, r3
    92f4:	d243      	bcs.n	937e <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    92f6:	687b      	ldr	r3, [r7, #4]
    92f8:	685b      	ldr	r3, [r3, #4]
    92fa:	b29a      	uxth	r2, r3
    92fc:	687b      	ldr	r3, [r7, #4]
    92fe:	689b      	ldr	r3, [r3, #8]
    9300:	b29b      	uxth	r3, r3
    9302:	1ad3      	subs	r3, r2, r3
    9304:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9306:	687b      	ldr	r3, [r7, #4]
    9308:	7cdb      	ldrb	r3, [r3, #19]
    930a:	f003 0320 	and.w	r3, r3, #32
    930e:	b2db      	uxtb	r3, r3
    9310:	2b00      	cmp	r3, #0
    9312:	d01b      	beq.n	934c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9314:	687b      	ldr	r3, [r7, #4]
    9316:	8a1b      	ldrh	r3, [r3, #16]
    9318:	8bfa      	ldrh	r2, [r7, #30]
    931a:	429a      	cmp	r2, r3
    931c:	d902      	bls.n	9324 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    931e:	687b      	ldr	r3, [r7, #4]
    9320:	8a1b      	ldrh	r3, [r3, #16]
    9322:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9324:	687b      	ldr	r3, [r7, #4]
    9326:	68d8      	ldr	r0, [r3, #12]
    9328:	687b      	ldr	r3, [r7, #4]
    932a:	681a      	ldr	r2, [r3, #0]
    932c:	687b      	ldr	r3, [r7, #4]
    932e:	689b      	ldr	r3, [r3, #8]
    9330:	4413      	add	r3, r2
    9332:	8bfa      	ldrh	r2, [r7, #30]
    9334:	4619      	mov	r1, r3
    9336:	4b44      	ldr	r3, [pc, #272]	; (9448 <_usb_d_dev_in_next+0x1f8>)
    9338:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    933a:	687b      	ldr	r3, [r7, #4]
    933c:	68db      	ldr	r3, [r3, #12]
    933e:	461a      	mov	r2, r3
    9340:	7dfb      	ldrb	r3, [r7, #23]
    9342:	2101      	movs	r1, #1
    9344:	4618      	mov	r0, r3
    9346:	4b41      	ldr	r3, [pc, #260]	; (944c <_usb_d_dev_in_next+0x1fc>)
    9348:	4798      	blx	r3
    934a:	e011      	b.n	9370 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    934c:	8bfb      	ldrh	r3, [r7, #30]
    934e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9352:	d902      	bls.n	935a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9358:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    935a:	687b      	ldr	r3, [r7, #4]
    935c:	681a      	ldr	r2, [r3, #0]
    935e:	687b      	ldr	r3, [r7, #4]
    9360:	689b      	ldr	r3, [r3, #8]
    9362:	4413      	add	r3, r2
    9364:	461a      	mov	r2, r3
    9366:	7dfb      	ldrb	r3, [r7, #23]
    9368:	2101      	movs	r1, #1
    936a:	4618      	mov	r0, r3
    936c:	4b37      	ldr	r3, [pc, #220]	; (944c <_usb_d_dev_in_next+0x1fc>)
    936e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9370:	8bfa      	ldrh	r2, [r7, #30]
    9372:	7df8      	ldrb	r0, [r7, #23]
    9374:	2300      	movs	r3, #0
    9376:	2101      	movs	r1, #1
    9378:	4c35      	ldr	r4, [pc, #212]	; (9450 <_usb_d_dev_in_next+0x200>)
    937a:	47a0      	blx	r4
		goto _in_tx_exec;
    937c:	e041      	b.n	9402 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    937e:	687b      	ldr	r3, [r7, #4]
    9380:	7cdb      	ldrb	r3, [r3, #19]
    9382:	f003 0310 	and.w	r3, r3, #16
    9386:	b2db      	uxtb	r3, r3
    9388:	2b00      	cmp	r3, #0
    938a:	d00b      	beq.n	93a4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    938c:	687a      	ldr	r2, [r7, #4]
    938e:	7cd3      	ldrb	r3, [r2, #19]
    9390:	f36f 1304 	bfc	r3, #4, #1
    9394:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9396:	7df8      	ldrb	r0, [r7, #23]
    9398:	2300      	movs	r3, #0
    939a:	2200      	movs	r2, #0
    939c:	2101      	movs	r1, #1
    939e:	4c2c      	ldr	r4, [pc, #176]	; (9450 <_usb_d_dev_in_next+0x200>)
    93a0:	47a0      	blx	r4
		goto _in_tx_exec;
    93a2:	e02e      	b.n	9402 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    93a4:	7afb      	ldrb	r3, [r7, #11]
    93a6:	2b00      	cmp	r3, #0
    93a8:	d006      	beq.n	93b8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    93aa:	7dfb      	ldrb	r3, [r7, #23]
    93ac:	224b      	movs	r2, #75	; 0x4b
    93ae:	4619      	mov	r1, r3
    93b0:	69b8      	ldr	r0, [r7, #24]
    93b2:	4b28      	ldr	r3, [pc, #160]	; (9454 <_usb_d_dev_in_next+0x204>)
    93b4:	4798      	blx	r3
    93b6:	e005      	b.n	93c4 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    93b8:	7dfb      	ldrb	r3, [r7, #23]
    93ba:	224a      	movs	r2, #74	; 0x4a
    93bc:	4619      	mov	r1, r3
    93be:	69b8      	ldr	r0, [r7, #24]
    93c0:	4b24      	ldr	r3, [pc, #144]	; (9454 <_usb_d_dev_in_next+0x204>)
    93c2:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    93c4:	687b      	ldr	r3, [r7, #4]
    93c6:	8a1b      	ldrh	r3, [r3, #16]
    93c8:	89ba      	ldrh	r2, [r7, #12]
    93ca:	429a      	cmp	r2, r3
    93cc:	d114      	bne.n	93f8 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    93ce:	687a      	ldr	r2, [r7, #4]
    93d0:	7cd3      	ldrb	r3, [r2, #19]
    93d2:	f36f 1386 	bfc	r3, #6, #1
    93d6:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    93d8:	4b1f      	ldr	r3, [pc, #124]	; (9458 <_usb_d_dev_in_next+0x208>)
    93da:	68db      	ldr	r3, [r3, #12]
    93dc:	687a      	ldr	r2, [r7, #4]
    93de:	7c90      	ldrb	r0, [r2, #18]
    93e0:	687a      	ldr	r2, [r7, #4]
    93e2:	6892      	ldr	r2, [r2, #8]
    93e4:	4611      	mov	r1, r2
    93e6:	4798      	blx	r3
    93e8:	4603      	mov	r3, r0
    93ea:	2b00      	cmp	r3, #0
    93ec:	d124      	bne.n	9438 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    93ee:	687a      	ldr	r2, [r7, #4]
    93f0:	7cd3      	ldrb	r3, [r2, #19]
    93f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    93f6:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    93f8:	2100      	movs	r1, #0
    93fa:	6878      	ldr	r0, [r7, #4]
    93fc:	4b17      	ldr	r3, [pc, #92]	; (945c <_usb_d_dev_in_next+0x20c>)
    93fe:	4798      	blx	r3
	return;
    9400:	e01b      	b.n	943a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9402:	78fb      	ldrb	r3, [r7, #3]
    9404:	f083 0301 	eor.w	r3, r3, #1
    9408:	b2db      	uxtb	r3, r3
    940a:	2b00      	cmp	r3, #0
    940c:	d00d      	beq.n	942a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    940e:	7afb      	ldrb	r3, [r7, #11]
    9410:	2b00      	cmp	r3, #0
    9412:	d002      	beq.n	941a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9414:	234e      	movs	r3, #78	; 0x4e
    9416:	777b      	strb	r3, [r7, #29]
    9418:	e001      	b.n	941e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    941a:	234a      	movs	r3, #74	; 0x4a
    941c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    941e:	7f7a      	ldrb	r2, [r7, #29]
    9420:	7dfb      	ldrb	r3, [r7, #23]
    9422:	4619      	mov	r1, r3
    9424:	69b8      	ldr	r0, [r7, #24]
    9426:	4b0e      	ldr	r3, [pc, #56]	; (9460 <_usb_d_dev_in_next+0x210>)
    9428:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    942a:	7dfb      	ldrb	r3, [r7, #23]
    942c:	2201      	movs	r2, #1
    942e:	2101      	movs	r1, #1
    9430:	4618      	mov	r0, r3
    9432:	4b0c      	ldr	r3, [pc, #48]	; (9464 <_usb_d_dev_in_next+0x214>)
    9434:	4798      	blx	r3
    9436:	e000      	b.n	943a <_usb_d_dev_in_next+0x1ea>
			return;
    9438:	bf00      	nop
}
    943a:	3724      	adds	r7, #36	; 0x24
    943c:	46bd      	mov	sp, r7
    943e:	bd90      	pop	{r4, r7, pc}
    9440:	20002448 	.word	0x20002448
    9444:	00008c49 	.word	0x00008c49
    9448:	0000ef71 	.word	0x0000ef71
    944c:	00008c75 	.word	0x00008c75
    9450:	00008dbd 	.word	0x00008dbd
    9454:	00008555 	.word	0x00008555
    9458:	20002380 	.word	0x20002380
    945c:	0000a579 	.word	0x0000a579
    9460:	00008529 	.word	0x00008529
    9464:	00008e75 	.word	0x00008e75

00009468 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9468:	b590      	push	{r4, r7, lr}
    946a:	b08b      	sub	sp, #44	; 0x2c
    946c:	af00      	add	r7, sp, #0
    946e:	6078      	str	r0, [r7, #4]
    9470:	460b      	mov	r3, r1
    9472:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9474:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9478:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    947a:	687b      	ldr	r3, [r7, #4]
    947c:	7c9b      	ldrb	r3, [r3, #18]
    947e:	f003 030f 	and.w	r3, r3, #15
    9482:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9484:	7ffb      	ldrb	r3, [r7, #31]
    9486:	015b      	lsls	r3, r3, #5
    9488:	4a94      	ldr	r2, [pc, #592]	; (96dc <_usb_d_dev_out_next+0x274>)
    948a:	4413      	add	r3, r2
    948c:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    948e:	78fb      	ldrb	r3, [r7, #3]
    9490:	2b00      	cmp	r3, #0
    9492:	d005      	beq.n	94a0 <_usb_d_dev_out_next+0x38>
    9494:	69bb      	ldr	r3, [r7, #24]
    9496:	685b      	ldr	r3, [r3, #4]
    9498:	f3c3 338d 	ubfx	r3, r3, #14, #14
    949c:	b29b      	uxth	r3, r3
    949e:	e000      	b.n	94a2 <_usb_d_dev_out_next+0x3a>
    94a0:	2300      	movs	r3, #0
    94a2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    94a4:	78fb      	ldrb	r3, [r7, #3]
    94a6:	2b00      	cmp	r3, #0
    94a8:	d005      	beq.n	94b6 <_usb_d_dev_out_next+0x4e>
    94aa:	69bb      	ldr	r3, [r7, #24]
    94ac:	685b      	ldr	r3, [r3, #4]
    94ae:	f3c3 030d 	ubfx	r3, r3, #0, #14
    94b2:	b29b      	uxth	r3, r3
    94b4:	e000      	b.n	94b8 <_usb_d_dev_out_next+0x50>
    94b6:	2300      	movs	r3, #0
    94b8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    94ba:	687b      	ldr	r3, [r7, #4]
    94bc:	8a1b      	ldrh	r3, [r3, #16]
    94be:	f240 32ff 	movw	r2, #1023	; 0x3ff
    94c2:	4293      	cmp	r3, r2
    94c4:	d004      	beq.n	94d0 <_usb_d_dev_out_next+0x68>
    94c6:	687b      	ldr	r3, [r7, #4]
    94c8:	8a1b      	ldrh	r3, [r3, #16]
    94ca:	3b01      	subs	r3, #1
    94cc:	b29b      	uxth	r3, r3
    94ce:	e001      	b.n	94d4 <_usb_d_dev_out_next+0x6c>
    94d0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    94d4:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    94d6:	8aba      	ldrh	r2, [r7, #20]
    94d8:	8a7b      	ldrh	r3, [r7, #18]
    94da:	4013      	ands	r3, r2
    94dc:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    94de:	687b      	ldr	r3, [r7, #4]
    94e0:	7cdb      	ldrb	r3, [r3, #19]
    94e2:	f003 0307 	and.w	r3, r3, #7
    94e6:	b2db      	uxtb	r3, r3
    94e8:	2b01      	cmp	r3, #1
    94ea:	bf0c      	ite	eq
    94ec:	2301      	moveq	r3, #1
    94ee:	2300      	movne	r3, #0
    94f0:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    94f2:	78fb      	ldrb	r3, [r7, #3]
    94f4:	2b00      	cmp	r3, #0
    94f6:	d004      	beq.n	9502 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    94f8:	7ffb      	ldrb	r3, [r7, #31]
    94fa:	2100      	movs	r1, #0
    94fc:	4618      	mov	r0, r3
    94fe:	4b78      	ldr	r3, [pc, #480]	; (96e0 <_usb_d_dev_out_next+0x278>)
    9500:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9502:	687b      	ldr	r3, [r7, #4]
    9504:	7cdb      	ldrb	r3, [r3, #19]
    9506:	f003 0320 	and.w	r3, r3, #32
    950a:	b2db      	uxtb	r3, r3
    950c:	2b00      	cmp	r3, #0
    950e:	d01c      	beq.n	954a <_usb_d_dev_out_next+0xe2>
    9510:	687b      	ldr	r3, [r7, #4]
    9512:	685b      	ldr	r3, [r3, #4]
    9514:	2b00      	cmp	r3, #0
    9516:	d018      	beq.n	954a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9518:	687b      	ldr	r3, [r7, #4]
    951a:	685b      	ldr	r3, [r3, #4]
    951c:	b29a      	uxth	r2, r3
    951e:	687b      	ldr	r3, [r7, #4]
    9520:	689b      	ldr	r3, [r3, #8]
    9522:	b29b      	uxth	r3, r3
    9524:	1ad3      	subs	r3, r2, r3
    9526:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9528:	687b      	ldr	r3, [r7, #4]
    952a:	681a      	ldr	r2, [r3, #0]
    952c:	687b      	ldr	r3, [r7, #4]
    952e:	689b      	ldr	r3, [r3, #8]
    9530:	18d0      	adds	r0, r2, r3
    9532:	687b      	ldr	r3, [r7, #4]
    9534:	68d9      	ldr	r1, [r3, #12]
    9536:	89ba      	ldrh	r2, [r7, #12]
    9538:	8a3b      	ldrh	r3, [r7, #16]
    953a:	429a      	cmp	r2, r3
    953c:	d901      	bls.n	9542 <_usb_d_dev_out_next+0xda>
    953e:	8a3b      	ldrh	r3, [r7, #16]
    9540:	e000      	b.n	9544 <_usb_d_dev_out_next+0xdc>
    9542:	89bb      	ldrh	r3, [r7, #12]
    9544:	461a      	mov	r2, r3
    9546:	4b67      	ldr	r3, [pc, #412]	; (96e4 <_usb_d_dev_out_next+0x27c>)
    9548:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    954a:	687b      	ldr	r3, [r7, #4]
    954c:	685b      	ldr	r3, [r3, #4]
    954e:	2b00      	cmp	r3, #0
    9550:	d121      	bne.n	9596 <_usb_d_dev_out_next+0x12e>
    9552:	687b      	ldr	r3, [r7, #4]
    9554:	7cdb      	ldrb	r3, [r3, #19]
    9556:	f003 0310 	and.w	r3, r3, #16
    955a:	b2db      	uxtb	r3, r3
    955c:	2b00      	cmp	r3, #0
    955e:	d01a      	beq.n	9596 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9560:	687a      	ldr	r2, [r7, #4]
    9562:	7cd3      	ldrb	r3, [r2, #19]
    9564:	f36f 1304 	bfc	r3, #4, #1
    9568:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    956a:	687a      	ldr	r2, [r7, #4]
    956c:	7cd3      	ldrb	r3, [r2, #19]
    956e:	f043 0320 	orr.w	r3, r3, #32
    9572:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9574:	687b      	ldr	r3, [r7, #4]
    9576:	68db      	ldr	r3, [r3, #12]
    9578:	461a      	mov	r2, r3
    957a:	7ffb      	ldrb	r3, [r7, #31]
    957c:	2100      	movs	r1, #0
    957e:	4618      	mov	r0, r3
    9580:	4b59      	ldr	r3, [pc, #356]	; (96e8 <_usb_d_dev_out_next+0x280>)
    9582:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9584:	687b      	ldr	r3, [r7, #4]
    9586:	8a1b      	ldrh	r3, [r3, #16]
    9588:	461a      	mov	r2, r3
    958a:	7ff8      	ldrb	r0, [r7, #31]
    958c:	2300      	movs	r3, #0
    958e:	2100      	movs	r1, #0
    9590:	4c56      	ldr	r4, [pc, #344]	; (96ec <_usb_d_dev_out_next+0x284>)
    9592:	47a0      	blx	r4
		goto _out_rx_exec;
    9594:	e090      	b.n	96b8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9596:	78fb      	ldrb	r3, [r7, #3]
    9598:	2b00      	cmp	r3, #0
    959a:	d010      	beq.n	95be <_usb_d_dev_out_next+0x156>
    959c:	687b      	ldr	r3, [r7, #4]
    959e:	8a1b      	ldrh	r3, [r3, #16]
    95a0:	8a3a      	ldrh	r2, [r7, #16]
    95a2:	429a      	cmp	r2, r3
    95a4:	d20b      	bcs.n	95be <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    95a6:	687a      	ldr	r2, [r7, #4]
    95a8:	7cd3      	ldrb	r3, [r2, #19]
    95aa:	f36f 1304 	bfc	r3, #4, #1
    95ae:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    95b0:	687b      	ldr	r3, [r7, #4]
    95b2:	689a      	ldr	r2, [r3, #8]
    95b4:	8abb      	ldrh	r3, [r7, #20]
    95b6:	441a      	add	r2, r3
    95b8:	687b      	ldr	r3, [r7, #4]
    95ba:	609a      	str	r2, [r3, #8]
    95bc:	e05c      	b.n	9678 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    95be:	687b      	ldr	r3, [r7, #4]
    95c0:	689a      	ldr	r2, [r3, #8]
    95c2:	8afb      	ldrh	r3, [r7, #22]
    95c4:	441a      	add	r2, r3
    95c6:	687b      	ldr	r3, [r7, #4]
    95c8:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    95ca:	687b      	ldr	r3, [r7, #4]
    95cc:	689a      	ldr	r2, [r3, #8]
    95ce:	687b      	ldr	r3, [r7, #4]
    95d0:	685b      	ldr	r3, [r3, #4]
    95d2:	429a      	cmp	r2, r3
    95d4:	d250      	bcs.n	9678 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    95d6:	687b      	ldr	r3, [r7, #4]
    95d8:	685b      	ldr	r3, [r3, #4]
    95da:	b29a      	uxth	r2, r3
    95dc:	687b      	ldr	r3, [r7, #4]
    95de:	689b      	ldr	r3, [r3, #8]
    95e0:	b29b      	uxth	r3, r3
    95e2:	1ad3      	subs	r3, r2, r3
    95e4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    95e6:	687b      	ldr	r3, [r7, #4]
    95e8:	7cdb      	ldrb	r3, [r3, #19]
    95ea:	f003 0320 	and.w	r3, r3, #32
    95ee:	b2db      	uxtb	r3, r3
    95f0:	2b00      	cmp	r3, #0
    95f2:	d010      	beq.n	9616 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    95f4:	687b      	ldr	r3, [r7, #4]
    95f6:	8a1b      	ldrh	r3, [r3, #16]
    95f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    95fa:	429a      	cmp	r2, r3
    95fc:	d902      	bls.n	9604 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    95fe:	687b      	ldr	r3, [r7, #4]
    9600:	8a1b      	ldrh	r3, [r3, #16]
    9602:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9604:	687b      	ldr	r3, [r7, #4]
    9606:	68db      	ldr	r3, [r3, #12]
    9608:	461a      	mov	r2, r3
    960a:	7ffb      	ldrb	r3, [r7, #31]
    960c:	2100      	movs	r1, #0
    960e:	4618      	mov	r0, r3
    9610:	4b35      	ldr	r3, [pc, #212]	; (96e8 <_usb_d_dev_out_next+0x280>)
    9612:	4798      	blx	r3
    9614:	e029      	b.n	966a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9616:	687b      	ldr	r3, [r7, #4]
    9618:	8a1b      	ldrh	r3, [r3, #16]
    961a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    961c:	429a      	cmp	r2, r3
    961e:	d90f      	bls.n	9640 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9620:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9626:	d903      	bls.n	9630 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    962c:	84fb      	strh	r3, [r7, #38]	; 0x26
    962e:	e011      	b.n	9654 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9630:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9632:	8a7b      	ldrh	r3, [r7, #18]
    9634:	4013      	ands	r3, r2
    9636:	b29b      	uxth	r3, r3
    9638:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    963a:	1ad3      	subs	r3, r2, r3
    963c:	84fb      	strh	r3, [r7, #38]	; 0x26
    963e:	e009      	b.n	9654 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9640:	687b      	ldr	r3, [r7, #4]
    9642:	8a1b      	ldrh	r3, [r3, #16]
    9644:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9646:	429a      	cmp	r2, r3
    9648:	d204      	bcs.n	9654 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    964a:	687a      	ldr	r2, [r7, #4]
    964c:	7cd3      	ldrb	r3, [r2, #19]
    964e:	f043 0320 	orr.w	r3, r3, #32
    9652:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	681a      	ldr	r2, [r3, #0]
    9658:	687b      	ldr	r3, [r7, #4]
    965a:	689b      	ldr	r3, [r3, #8]
    965c:	4413      	add	r3, r2
    965e:	461a      	mov	r2, r3
    9660:	7ffb      	ldrb	r3, [r7, #31]
    9662:	2100      	movs	r1, #0
    9664:	4618      	mov	r0, r3
    9666:	4b20      	ldr	r3, [pc, #128]	; (96e8 <_usb_d_dev_out_next+0x280>)
    9668:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    966a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    966c:	7ff8      	ldrb	r0, [r7, #31]
    966e:	2300      	movs	r3, #0
    9670:	2100      	movs	r1, #0
    9672:	4c1e      	ldr	r4, [pc, #120]	; (96ec <_usb_d_dev_out_next+0x284>)
    9674:	47a0      	blx	r4
			goto _out_rx_exec;
    9676:	e01f      	b.n	96b8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9678:	7bfb      	ldrb	r3, [r7, #15]
    967a:	2b00      	cmp	r3, #0
    967c:	d006      	beq.n	968c <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    967e:	7ffb      	ldrb	r3, [r7, #31]
    9680:	222d      	movs	r2, #45	; 0x2d
    9682:	4619      	mov	r1, r3
    9684:	6a38      	ldr	r0, [r7, #32]
    9686:	4b1a      	ldr	r3, [pc, #104]	; (96f0 <_usb_d_dev_out_next+0x288>)
    9688:	4798      	blx	r3
    968a:	e005      	b.n	9698 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    968c:	7ffb      	ldrb	r3, [r7, #31]
    968e:	2225      	movs	r2, #37	; 0x25
    9690:	4619      	mov	r1, r3
    9692:	6a38      	ldr	r0, [r7, #32]
    9694:	4b16      	ldr	r3, [pc, #88]	; (96f0 <_usb_d_dev_out_next+0x288>)
    9696:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9698:	7ffb      	ldrb	r3, [r7, #31]
    969a:	2b00      	cmp	r3, #0
    969c:	d107      	bne.n	96ae <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    969e:	687b      	ldr	r3, [r7, #4]
    96a0:	68db      	ldr	r3, [r3, #12]
    96a2:	461a      	mov	r2, r3
    96a4:	7ffb      	ldrb	r3, [r7, #31]
    96a6:	2100      	movs	r1, #0
    96a8:	4618      	mov	r0, r3
    96aa:	4b0f      	ldr	r3, [pc, #60]	; (96e8 <_usb_d_dev_out_next+0x280>)
    96ac:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    96ae:	2100      	movs	r1, #0
    96b0:	6878      	ldr	r0, [r7, #4]
    96b2:	4b10      	ldr	r3, [pc, #64]	; (96f4 <_usb_d_dev_out_next+0x28c>)
    96b4:	4798      	blx	r3
	return;
    96b6:	e031      	b.n	971c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    96b8:	78fb      	ldrb	r3, [r7, #3]
    96ba:	f083 0301 	eor.w	r3, r3, #1
    96be:	b2db      	uxtb	r3, r3
    96c0:	2b00      	cmp	r3, #0
    96c2:	d025      	beq.n	9710 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    96c4:	7bfb      	ldrb	r3, [r7, #15]
    96c6:	2b00      	cmp	r3, #0
    96c8:	d018      	beq.n	96fc <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    96ca:	7ffb      	ldrb	r3, [r7, #31]
    96cc:	2101      	movs	r1, #1
    96ce:	4618      	mov	r0, r3
    96d0:	4b09      	ldr	r3, [pc, #36]	; (96f8 <_usb_d_dev_out_next+0x290>)
    96d2:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    96d4:	232d      	movs	r3, #45	; 0x2d
    96d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    96da:	e012      	b.n	9702 <_usb_d_dev_out_next+0x29a>
    96dc:	20002448 	.word	0x20002448
    96e0:	00008c49 	.word	0x00008c49
    96e4:	0000ef71 	.word	0x0000ef71
    96e8:	00008c75 	.word	0x00008c75
    96ec:	00008dfd 	.word	0x00008dfd
    96f0:	00008555 	.word	0x00008555
    96f4:	0000a579 	.word	0x0000a579
    96f8:	00008e3d 	.word	0x00008e3d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    96fc:	2325      	movs	r3, #37	; 0x25
    96fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9702:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9706:	7ffb      	ldrb	r3, [r7, #31]
    9708:	4619      	mov	r1, r3
    970a:	6a38      	ldr	r0, [r7, #32]
    970c:	4b05      	ldr	r3, [pc, #20]	; (9724 <_usb_d_dev_out_next+0x2bc>)
    970e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9710:	7ffb      	ldrb	r3, [r7, #31]
    9712:	2201      	movs	r2, #1
    9714:	2100      	movs	r1, #0
    9716:	4618      	mov	r0, r3
    9718:	4b03      	ldr	r3, [pc, #12]	; (9728 <_usb_d_dev_out_next+0x2c0>)
    971a:	4798      	blx	r3
}
    971c:	372c      	adds	r7, #44	; 0x2c
    971e:	46bd      	mov	sp, r7
    9720:	bd90      	pop	{r4, r7, pc}
    9722:	bf00      	nop
    9724:	00008529 	.word	0x00008529
    9728:	00008ecd 	.word	0x00008ecd

0000972c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    972c:	b580      	push	{r7, lr}
    972e:	b084      	sub	sp, #16
    9730:	af00      	add	r7, sp, #0
    9732:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9734:	687b      	ldr	r3, [r7, #4]
    9736:	7c9b      	ldrb	r3, [r3, #18]
    9738:	f003 030f 	and.w	r3, r3, #15
    973c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    973e:	687b      	ldr	r3, [r7, #4]
    9740:	7cdb      	ldrb	r3, [r3, #19]
    9742:	f003 0307 	and.w	r3, r3, #7
    9746:	b2db      	uxtb	r3, r3
    9748:	2b01      	cmp	r3, #1
    974a:	bf0c      	ite	eq
    974c:	2301      	moveq	r3, #1
    974e:	2300      	movne	r3, #0
    9750:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9752:	7bbb      	ldrb	r3, [r7, #14]
    9754:	f083 0301 	eor.w	r3, r3, #1
    9758:	b2db      	uxtb	r3, r3
    975a:	2b00      	cmp	r3, #0
    975c:	d008      	beq.n	9770 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    975e:	7bfb      	ldrb	r3, [r7, #15]
    9760:	4618      	mov	r0, r3
    9762:	4b20      	ldr	r3, [pc, #128]	; (97e4 <_usb_d_dev_handle_setup+0xb8>)
    9764:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9766:	7bfb      	ldrb	r3, [r7, #15]
    9768:	4618      	mov	r0, r3
    976a:	4b1f      	ldr	r3, [pc, #124]	; (97e8 <_usb_d_dev_handle_setup+0xbc>)
    976c:	4798      	blx	r3
		return;
    976e:	e036      	b.n	97de <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9770:	687b      	ldr	r3, [r7, #4]
    9772:	7cdb      	ldrb	r3, [r3, #19]
    9774:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9778:	b2db      	uxtb	r3, r3
    977a:	2b00      	cmp	r3, #0
    977c:	d010      	beq.n	97a0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    977e:	687a      	ldr	r2, [r7, #4]
    9780:	7cd3      	ldrb	r3, [r2, #19]
    9782:	f36f 1386 	bfc	r3, #6, #1
    9786:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9788:	7bfb      	ldrb	r3, [r7, #15]
    978a:	2200      	movs	r2, #0
    978c:	2101      	movs	r1, #1
    978e:	4618      	mov	r0, r3
    9790:	4b16      	ldr	r3, [pc, #88]	; (97ec <_usb_d_dev_handle_setup+0xc0>)
    9792:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9794:	7bfb      	ldrb	r3, [r7, #15]
    9796:	2200      	movs	r2, #0
    9798:	2100      	movs	r1, #0
    979a:	4618      	mov	r0, r3
    979c:	4b14      	ldr	r3, [pc, #80]	; (97f0 <_usb_d_dev_handle_setup+0xc4>)
    979e:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    97a0:	687a      	ldr	r2, [r7, #4]
    97a2:	7cd3      	ldrb	r3, [r2, #19]
    97a4:	f36f 03c3 	bfc	r3, #3, #1
    97a8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    97aa:	7bfb      	ldrb	r3, [r7, #15]
    97ac:	2100      	movs	r1, #0
    97ae:	4618      	mov	r0, r3
    97b0:	4b10      	ldr	r3, [pc, #64]	; (97f4 <_usb_d_dev_handle_setup+0xc8>)
    97b2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    97b4:	7bfb      	ldrb	r3, [r7, #15]
    97b6:	2101      	movs	r1, #1
    97b8:	4618      	mov	r0, r3
    97ba:	4b0e      	ldr	r3, [pc, #56]	; (97f4 <_usb_d_dev_handle_setup+0xc8>)
    97bc:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    97be:	7bfb      	ldrb	r3, [r7, #15]
    97c0:	216f      	movs	r1, #111	; 0x6f
    97c2:	4618      	mov	r0, r3
    97c4:	4b0c      	ldr	r3, [pc, #48]	; (97f8 <_usb_d_dev_handle_setup+0xcc>)
    97c6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    97c8:	7bfb      	ldrb	r3, [r7, #15]
    97ca:	216f      	movs	r1, #111	; 0x6f
    97cc:	4618      	mov	r0, r3
    97ce:	4b0b      	ldr	r3, [pc, #44]	; (97fc <_usb_d_dev_handle_setup+0xd0>)
    97d0:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    97d2:	4b0b      	ldr	r3, [pc, #44]	; (9800 <_usb_d_dev_handle_setup+0xd4>)
    97d4:	689b      	ldr	r3, [r3, #8]
    97d6:	687a      	ldr	r2, [r7, #4]
    97d8:	7c92      	ldrb	r2, [r2, #18]
    97da:	4610      	mov	r0, r2
    97dc:	4798      	blx	r3
}
    97de:	3710      	adds	r7, #16
    97e0:	46bd      	mov	sp, r7
    97e2:	bd80      	pop	{r7, pc}
    97e4:	00008bd1 	.word	0x00008bd1
    97e8:	00008b7d 	.word	0x00008b7d
    97ec:	00008e75 	.word	0x00008e75
    97f0:	00008ecd 	.word	0x00008ecd
    97f4:	00008e3d 	.word	0x00008e3d
    97f8:	0000897d 	.word	0x0000897d
    97fc:	000089cd 	.word	0x000089cd
    9800:	20002380 	.word	0x20002380

00009804 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9804:	b580      	push	{r7, lr}
    9806:	b084      	sub	sp, #16
    9808:	af00      	add	r7, sp, #0
    980a:	6078      	str	r0, [r7, #4]
    980c:	460b      	mov	r3, r1
    980e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9810:	687b      	ldr	r3, [r7, #4]
    9812:	7c9b      	ldrb	r3, [r3, #18]
    9814:	f003 030f 	and.w	r3, r3, #15
    9818:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    981a:	78f9      	ldrb	r1, [r7, #3]
    981c:	7bfb      	ldrb	r3, [r7, #15]
    981e:	2200      	movs	r2, #0
    9820:	4618      	mov	r0, r3
    9822:	4b07      	ldr	r3, [pc, #28]	; (9840 <_usb_d_dev_handle_stall+0x3c>)
    9824:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9826:	4b07      	ldr	r3, [pc, #28]	; (9844 <_usb_d_dev_handle_stall+0x40>)
    9828:	691b      	ldr	r3, [r3, #16]
    982a:	687a      	ldr	r2, [r7, #4]
    982c:	7c90      	ldrb	r0, [r2, #18]
    982e:	687a      	ldr	r2, [r7, #4]
    9830:	6892      	ldr	r2, [r2, #8]
    9832:	2101      	movs	r1, #1
    9834:	4798      	blx	r3
}
    9836:	bf00      	nop
    9838:	3710      	adds	r7, #16
    983a:	46bd      	mov	sp, r7
    983c:	bd80      	pop	{r7, pc}
    983e:	bf00      	nop
    9840:	00008b31 	.word	0x00008b31
    9844:	20002380 	.word	0x20002380

00009848 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9848:	b580      	push	{r7, lr}
    984a:	b088      	sub	sp, #32
    984c:	af00      	add	r7, sp, #0
    984e:	6078      	str	r0, [r7, #4]
    9850:	460b      	mov	r3, r1
    9852:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9854:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9858:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    985a:	687b      	ldr	r3, [r7, #4]
    985c:	7c9b      	ldrb	r3, [r3, #18]
    985e:	f003 030f 	and.w	r3, r3, #15
    9862:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9864:	4b61      	ldr	r3, [pc, #388]	; (99ec <_usb_d_dev_handle_trfail+0x1a4>)
    9866:	881b      	ldrh	r3, [r3, #0]
    9868:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    986a:	7efb      	ldrb	r3, [r7, #27]
    986c:	015b      	lsls	r3, r3, #5
    986e:	4a60      	ldr	r2, [pc, #384]	; (99f0 <_usb_d_dev_handle_trfail+0x1a8>)
    9870:	4413      	add	r3, r2
    9872:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9874:	78fb      	ldrb	r3, [r7, #3]
    9876:	2b00      	cmp	r3, #0
    9878:	d006      	beq.n	9888 <_usb_d_dev_handle_trfail+0x40>
    987a:	7efb      	ldrb	r3, [r7, #27]
    987c:	4619      	mov	r1, r3
    987e:	69f8      	ldr	r0, [r7, #28]
    9880:	4b5c      	ldr	r3, [pc, #368]	; (99f4 <_usb_d_dev_handle_trfail+0x1ac>)
    9882:	4798      	blx	r3
    9884:	4603      	mov	r3, r0
    9886:	e005      	b.n	9894 <_usb_d_dev_handle_trfail+0x4c>
    9888:	7efb      	ldrb	r3, [r7, #27]
    988a:	4619      	mov	r1, r3
    988c:	69f8      	ldr	r0, [r7, #28]
    988e:	4b5a      	ldr	r3, [pc, #360]	; (99f8 <_usb_d_dev_handle_trfail+0x1b0>)
    9890:	4798      	blx	r3
    9892:	4603      	mov	r3, r0
    9894:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9896:	687b      	ldr	r3, [r7, #4]
    9898:	7cdb      	ldrb	r3, [r3, #19]
    989a:	f003 0307 	and.w	r3, r3, #7
    989e:	b2db      	uxtb	r3, r3
    98a0:	2b01      	cmp	r3, #1
    98a2:	bf0c      	ite	eq
    98a4:	2301      	moveq	r3, #1
    98a6:	2300      	movne	r3, #0
    98a8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    98aa:	78fb      	ldrb	r3, [r7, #3]
    98ac:	011b      	lsls	r3, r3, #4
    98ae:	697a      	ldr	r2, [r7, #20]
    98b0:	4413      	add	r3, r2
    98b2:	7a9b      	ldrb	r3, [r3, #10]
    98b4:	b2db      	uxtb	r3, r3
    98b6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    98b8:	7cfb      	ldrb	r3, [r7, #19]
    98ba:	2b02      	cmp	r3, #2
    98bc:	d12f      	bne.n	991e <_usb_d_dev_handle_trfail+0xd6>
    98be:	7b3b      	ldrb	r3, [r7, #12]
    98c0:	f003 0301 	and.w	r3, r3, #1
    98c4:	b2db      	uxtb	r3, r3
    98c6:	2b00      	cmp	r3, #0
    98c8:	d029      	beq.n	991e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    98ca:	78fb      	ldrb	r3, [r7, #3]
    98cc:	011b      	lsls	r3, r3, #4
    98ce:	697a      	ldr	r2, [r7, #20]
    98d0:	441a      	add	r2, r3
    98d2:	7a93      	ldrb	r3, [r2, #10]
    98d4:	f36f 0300 	bfc	r3, #0, #1
    98d8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    98da:	78fb      	ldrb	r3, [r7, #3]
    98dc:	f107 0220 	add.w	r2, r7, #32
    98e0:	4413      	add	r3, r2
    98e2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    98e6:	7efb      	ldrb	r3, [r7, #27]
    98e8:	4619      	mov	r1, r3
    98ea:	69f8      	ldr	r0, [r7, #28]
    98ec:	4b43      	ldr	r3, [pc, #268]	; (99fc <_usb_d_dev_handle_trfail+0x1b4>)
    98ee:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    98f0:	78fb      	ldrb	r3, [r7, #3]
    98f2:	f107 0220 	add.w	r2, r7, #32
    98f6:	4413      	add	r3, r2
    98f8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    98fc:	7efb      	ldrb	r3, [r7, #27]
    98fe:	4619      	mov	r1, r3
    9900:	69f8      	ldr	r0, [r7, #28]
    9902:	4b3f      	ldr	r3, [pc, #252]	; (9a00 <_usb_d_dev_handle_trfail+0x1b8>)
    9904:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9906:	78fb      	ldrb	r3, [r7, #3]
    9908:	2b00      	cmp	r3, #0
    990a:	bf14      	ite	ne
    990c:	2301      	movne	r3, #1
    990e:	2300      	moveq	r3, #0
    9910:	b2db      	uxtb	r3, r3
    9912:	2204      	movs	r2, #4
    9914:	4619      	mov	r1, r3
    9916:	6878      	ldr	r0, [r7, #4]
    9918:	4b3a      	ldr	r3, [pc, #232]	; (9a04 <_usb_d_dev_handle_trfail+0x1bc>)
    991a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    991c:	e062      	b.n	99e4 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    991e:	7b3b      	ldrb	r3, [r7, #12]
    9920:	f003 0302 	and.w	r3, r3, #2
    9924:	b2db      	uxtb	r3, r3
    9926:	2b00      	cmp	r3, #0
    9928:	d040      	beq.n	99ac <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    992a:	78fb      	ldrb	r3, [r7, #3]
    992c:	011b      	lsls	r3, r3, #4
    992e:	697a      	ldr	r2, [r7, #20]
    9930:	441a      	add	r2, r3
    9932:	7a93      	ldrb	r3, [r2, #10]
    9934:	f36f 0341 	bfc	r3, #1, #1
    9938:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    993a:	78fb      	ldrb	r3, [r7, #3]
    993c:	f107 0220 	add.w	r2, r7, #32
    9940:	4413      	add	r3, r2
    9942:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9946:	7efb      	ldrb	r3, [r7, #27]
    9948:	4619      	mov	r1, r3
    994a:	69f8      	ldr	r0, [r7, #28]
    994c:	4b2b      	ldr	r3, [pc, #172]	; (99fc <_usb_d_dev_handle_trfail+0x1b4>)
    994e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9950:	78fb      	ldrb	r3, [r7, #3]
    9952:	f107 0220 	add.w	r2, r7, #32
    9956:	4413      	add	r3, r2
    9958:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    995c:	7efb      	ldrb	r3, [r7, #27]
    995e:	4619      	mov	r1, r3
    9960:	69f8      	ldr	r0, [r7, #28]
    9962:	4b27      	ldr	r3, [pc, #156]	; (9a00 <_usb_d_dev_handle_trfail+0x1b8>)
    9964:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9966:	7cbb      	ldrb	r3, [r7, #18]
    9968:	2b00      	cmp	r3, #0
    996a:	d03b      	beq.n	99e4 <_usb_d_dev_handle_trfail+0x19c>
    996c:	687b      	ldr	r3, [r7, #4]
    996e:	7cdb      	ldrb	r3, [r3, #19]
    9970:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9974:	b2db      	uxtb	r3, r3
    9976:	2b00      	cmp	r3, #0
    9978:	d034      	beq.n	99e4 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    997a:	687b      	ldr	r3, [r7, #4]
    997c:	7cdb      	ldrb	r3, [r3, #19]
    997e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9982:	b2db      	uxtb	r3, r3
    9984:	461a      	mov	r2, r3
    9986:	78fb      	ldrb	r3, [r7, #3]
    9988:	4293      	cmp	r3, r2
    998a:	d02b      	beq.n	99e4 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    998c:	687b      	ldr	r3, [r7, #4]
    998e:	7cdb      	ldrb	r3, [r3, #19]
    9990:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9994:	b2db      	uxtb	r3, r3
    9996:	2b00      	cmp	r3, #0
    9998:	bf14      	ite	ne
    999a:	2301      	movne	r3, #1
    999c:	2300      	moveq	r3, #0
    999e:	b2db      	uxtb	r3, r3
    99a0:	2200      	movs	r2, #0
    99a2:	4619      	mov	r1, r3
    99a4:	6878      	ldr	r0, [r7, #4]
    99a6:	4b17      	ldr	r3, [pc, #92]	; (9a04 <_usb_d_dev_handle_trfail+0x1bc>)
    99a8:	4798      	blx	r3
}
    99aa:	e01b      	b.n	99e4 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    99ac:	78fa      	ldrb	r2, [r7, #3]
    99ae:	7efb      	ldrb	r3, [r7, #27]
    99b0:	4611      	mov	r1, r2
    99b2:	4618      	mov	r0, r3
    99b4:	4b14      	ldr	r3, [pc, #80]	; (9a08 <_usb_d_dev_handle_trfail+0x1c0>)
    99b6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    99b8:	78fb      	ldrb	r3, [r7, #3]
    99ba:	f107 0220 	add.w	r2, r7, #32
    99be:	4413      	add	r3, r2
    99c0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    99c4:	7efb      	ldrb	r3, [r7, #27]
    99c6:	4619      	mov	r1, r3
    99c8:	69f8      	ldr	r0, [r7, #28]
    99ca:	4b0c      	ldr	r3, [pc, #48]	; (99fc <_usb_d_dev_handle_trfail+0x1b4>)
    99cc:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    99ce:	78fb      	ldrb	r3, [r7, #3]
    99d0:	f107 0220 	add.w	r2, r7, #32
    99d4:	4413      	add	r3, r2
    99d6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    99da:	7efb      	ldrb	r3, [r7, #27]
    99dc:	4619      	mov	r1, r3
    99de:	69f8      	ldr	r0, [r7, #28]
    99e0:	4b07      	ldr	r3, [pc, #28]	; (9a00 <_usb_d_dev_handle_trfail+0x1b8>)
    99e2:	4798      	blx	r3
}
    99e4:	bf00      	nop
    99e6:	3720      	adds	r7, #32
    99e8:	46bd      	mov	sp, r7
    99ea:	bd80      	pop	{r7, pc}
    99ec:	0000f748 	.word	0x0000f748
    99f0:	20002448 	.word	0x20002448
    99f4:	000085b1 	.word	0x000085b1
    99f8:	00008581 	.word	0x00008581
    99fc:	00008455 	.word	0x00008455
    9a00:	00008555 	.word	0x00008555
    9a04:	0000a5c1 	.word	0x0000a5c1
    9a08:	00008e3d 	.word	0x00008e3d

00009a0c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9a0c:	b580      	push	{r7, lr}
    9a0e:	b082      	sub	sp, #8
    9a10:	af00      	add	r7, sp, #0
    9a12:	6078      	str	r0, [r7, #4]
    9a14:	460b      	mov	r3, r1
    9a16:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9a18:	78fb      	ldrb	r3, [r7, #3]
    9a1a:	f003 0310 	and.w	r3, r3, #16
    9a1e:	2b00      	cmp	r3, #0
    9a20:	d003      	beq.n	9a2a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9a22:	6878      	ldr	r0, [r7, #4]
    9a24:	4b0c      	ldr	r3, [pc, #48]	; (9a58 <_usb_d_dev_trans_setup_isr+0x4c>)
    9a26:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9a28:	e012      	b.n	9a50 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9a2a:	78fb      	ldrb	r3, [r7, #3]
    9a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9a30:	2b00      	cmp	r3, #0
    9a32:	d004      	beq.n	9a3e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9a34:	2101      	movs	r1, #1
    9a36:	6878      	ldr	r0, [r7, #4]
    9a38:	4b08      	ldr	r3, [pc, #32]	; (9a5c <_usb_d_dev_trans_setup_isr+0x50>)
    9a3a:	4798      	blx	r3
}
    9a3c:	e008      	b.n	9a50 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9a3e:	78fb      	ldrb	r3, [r7, #3]
    9a40:	f003 0320 	and.w	r3, r3, #32
    9a44:	2b00      	cmp	r3, #0
    9a46:	d003      	beq.n	9a50 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9a48:	2100      	movs	r1, #0
    9a4a:	6878      	ldr	r0, [r7, #4]
    9a4c:	4b03      	ldr	r3, [pc, #12]	; (9a5c <_usb_d_dev_trans_setup_isr+0x50>)
    9a4e:	4798      	blx	r3
}
    9a50:	bf00      	nop
    9a52:	3708      	adds	r7, #8
    9a54:	46bd      	mov	sp, r7
    9a56:	bd80      	pop	{r7, pc}
    9a58:	0000972d 	.word	0x0000972d
    9a5c:	00009805 	.word	0x00009805

00009a60 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9a60:	b580      	push	{r7, lr}
    9a62:	b082      	sub	sp, #8
    9a64:	af00      	add	r7, sp, #0
    9a66:	6078      	str	r0, [r7, #4]
    9a68:	460b      	mov	r3, r1
    9a6a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9a6c:	78fb      	ldrb	r3, [r7, #3]
    9a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9a72:	2b00      	cmp	r3, #0
    9a74:	d004      	beq.n	9a80 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9a76:	2101      	movs	r1, #1
    9a78:	6878      	ldr	r0, [r7, #4]
    9a7a:	4b1a      	ldr	r3, [pc, #104]	; (9ae4 <_usb_d_dev_trans_in_isr+0x84>)
    9a7c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9a7e:	e02c      	b.n	9ada <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9a80:	78fb      	ldrb	r3, [r7, #3]
    9a82:	f003 0308 	and.w	r3, r3, #8
    9a86:	2b00      	cmp	r3, #0
    9a88:	d004      	beq.n	9a94 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9a8a:	2101      	movs	r1, #1
    9a8c:	6878      	ldr	r0, [r7, #4]
    9a8e:	4b16      	ldr	r3, [pc, #88]	; (9ae8 <_usb_d_dev_trans_in_isr+0x88>)
    9a90:	4798      	blx	r3
}
    9a92:	e022      	b.n	9ada <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9a94:	78fb      	ldrb	r3, [r7, #3]
    9a96:	f003 0302 	and.w	r3, r3, #2
    9a9a:	2b00      	cmp	r3, #0
    9a9c:	d004      	beq.n	9aa8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9a9e:	2101      	movs	r1, #1
    9aa0:	6878      	ldr	r0, [r7, #4]
    9aa2:	4b12      	ldr	r3, [pc, #72]	; (9aec <_usb_d_dev_trans_in_isr+0x8c>)
    9aa4:	4798      	blx	r3
}
    9aa6:	e018      	b.n	9ada <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9aa8:	687b      	ldr	r3, [r7, #4]
    9aaa:	7cdb      	ldrb	r3, [r3, #19]
    9aac:	f003 0307 	and.w	r3, r3, #7
    9ab0:	b2db      	uxtb	r3, r3
    9ab2:	2b01      	cmp	r3, #1
    9ab4:	d111      	bne.n	9ada <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9ab6:	78fb      	ldrb	r3, [r7, #3]
    9ab8:	f003 0304 	and.w	r3, r3, #4
    9abc:	2b00      	cmp	r3, #0
    9abe:	d004      	beq.n	9aca <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9ac0:	2100      	movs	r1, #0
    9ac2:	6878      	ldr	r0, [r7, #4]
    9ac4:	4b08      	ldr	r3, [pc, #32]	; (9ae8 <_usb_d_dev_trans_in_isr+0x88>)
    9ac6:	4798      	blx	r3
}
    9ac8:	e007      	b.n	9ada <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9aca:	78fb      	ldrb	r3, [r7, #3]
    9acc:	f003 0310 	and.w	r3, r3, #16
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	d002      	beq.n	9ada <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9ad4:	6878      	ldr	r0, [r7, #4]
    9ad6:	4b06      	ldr	r3, [pc, #24]	; (9af0 <_usb_d_dev_trans_in_isr+0x90>)
    9ad8:	4798      	blx	r3
}
    9ada:	bf00      	nop
    9adc:	3708      	adds	r7, #8
    9ade:	46bd      	mov	sp, r7
    9ae0:	bd80      	pop	{r7, pc}
    9ae2:	bf00      	nop
    9ae4:	00009805 	.word	0x00009805
    9ae8:	00009849 	.word	0x00009849
    9aec:	00009251 	.word	0x00009251
    9af0:	0000972d 	.word	0x0000972d

00009af4 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9af4:	b580      	push	{r7, lr}
    9af6:	b082      	sub	sp, #8
    9af8:	af00      	add	r7, sp, #0
    9afa:	6078      	str	r0, [r7, #4]
    9afc:	460b      	mov	r3, r1
    9afe:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9b00:	78fb      	ldrb	r3, [r7, #3]
    9b02:	f003 0320 	and.w	r3, r3, #32
    9b06:	2b00      	cmp	r3, #0
    9b08:	d004      	beq.n	9b14 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9b0a:	2100      	movs	r1, #0
    9b0c:	6878      	ldr	r0, [r7, #4]
    9b0e:	4b1a      	ldr	r3, [pc, #104]	; (9b78 <_usb_d_dev_trans_out_isr+0x84>)
    9b10:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9b12:	e02c      	b.n	9b6e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9b14:	78fb      	ldrb	r3, [r7, #3]
    9b16:	f003 0304 	and.w	r3, r3, #4
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	d004      	beq.n	9b28 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9b1e:	2100      	movs	r1, #0
    9b20:	6878      	ldr	r0, [r7, #4]
    9b22:	4b16      	ldr	r3, [pc, #88]	; (9b7c <_usb_d_dev_trans_out_isr+0x88>)
    9b24:	4798      	blx	r3
}
    9b26:	e022      	b.n	9b6e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9b28:	78fb      	ldrb	r3, [r7, #3]
    9b2a:	f003 0301 	and.w	r3, r3, #1
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d004      	beq.n	9b3c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9b32:	2101      	movs	r1, #1
    9b34:	6878      	ldr	r0, [r7, #4]
    9b36:	4b12      	ldr	r3, [pc, #72]	; (9b80 <_usb_d_dev_trans_out_isr+0x8c>)
    9b38:	4798      	blx	r3
}
    9b3a:	e018      	b.n	9b6e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9b3c:	687b      	ldr	r3, [r7, #4]
    9b3e:	7cdb      	ldrb	r3, [r3, #19]
    9b40:	f003 0307 	and.w	r3, r3, #7
    9b44:	b2db      	uxtb	r3, r3
    9b46:	2b01      	cmp	r3, #1
    9b48:	d111      	bne.n	9b6e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9b4a:	78fb      	ldrb	r3, [r7, #3]
    9b4c:	f003 0308 	and.w	r3, r3, #8
    9b50:	2b00      	cmp	r3, #0
    9b52:	d004      	beq.n	9b5e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9b54:	2101      	movs	r1, #1
    9b56:	6878      	ldr	r0, [r7, #4]
    9b58:	4b08      	ldr	r3, [pc, #32]	; (9b7c <_usb_d_dev_trans_out_isr+0x88>)
    9b5a:	4798      	blx	r3
}
    9b5c:	e007      	b.n	9b6e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9b5e:	78fb      	ldrb	r3, [r7, #3]
    9b60:	f003 0310 	and.w	r3, r3, #16
    9b64:	2b00      	cmp	r3, #0
    9b66:	d002      	beq.n	9b6e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9b68:	6878      	ldr	r0, [r7, #4]
    9b6a:	4b06      	ldr	r3, [pc, #24]	; (9b84 <_usb_d_dev_trans_out_isr+0x90>)
    9b6c:	4798      	blx	r3
}
    9b6e:	bf00      	nop
    9b70:	3708      	adds	r7, #8
    9b72:	46bd      	mov	sp, r7
    9b74:	bd80      	pop	{r7, pc}
    9b76:	bf00      	nop
    9b78:	00009805 	.word	0x00009805
    9b7c:	00009849 	.word	0x00009849
    9b80:	00009469 	.word	0x00009469
    9b84:	0000972d 	.word	0x0000972d

00009b88 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9b88:	b580      	push	{r7, lr}
    9b8a:	b084      	sub	sp, #16
    9b8c:	af00      	add	r7, sp, #0
    9b8e:	6078      	str	r0, [r7, #4]
    9b90:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9b92:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9b96:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9b98:	683b      	ldr	r3, [r7, #0]
    9b9a:	7c9b      	ldrb	r3, [r3, #18]
    9b9c:	f003 030f 	and.w	r3, r3, #15
    9ba0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9ba2:	7afb      	ldrb	r3, [r7, #11]
    9ba4:	2201      	movs	r2, #1
    9ba6:	409a      	lsls	r2, r3
    9ba8:	687b      	ldr	r3, [r7, #4]
    9baa:	4013      	ands	r3, r2
    9bac:	2b00      	cmp	r3, #0
    9bae:	d03d      	beq.n	9c2c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9bb0:	7afb      	ldrb	r3, [r7, #11]
    9bb2:	68fa      	ldr	r2, [r7, #12]
    9bb4:	3308      	adds	r3, #8
    9bb6:	015b      	lsls	r3, r3, #5
    9bb8:	4413      	add	r3, r2
    9bba:	3307      	adds	r3, #7
    9bbc:	781b      	ldrb	r3, [r3, #0]
    9bbe:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9bc0:	7afb      	ldrb	r3, [r7, #11]
    9bc2:	68fa      	ldr	r2, [r7, #12]
    9bc4:	015b      	lsls	r3, r3, #5
    9bc6:	4413      	add	r3, r2
    9bc8:	f203 1309 	addw	r3, r3, #265	; 0x109
    9bcc:	781b      	ldrb	r3, [r3, #0]
    9bce:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9bd0:	7aba      	ldrb	r2, [r7, #10]
    9bd2:	7a7b      	ldrb	r3, [r7, #9]
    9bd4:	4013      	ands	r3, r2
    9bd6:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9bd8:	7abb      	ldrb	r3, [r7, #10]
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d027      	beq.n	9c2e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9bde:	683b      	ldr	r3, [r7, #0]
    9be0:	7cdb      	ldrb	r3, [r3, #19]
    9be2:	f003 0307 	and.w	r3, r3, #7
    9be6:	b2db      	uxtb	r3, r3
    9be8:	2b01      	cmp	r3, #1
    9bea:	d10c      	bne.n	9c06 <_usb_d_dev_handle_eps+0x7e>
    9bec:	683b      	ldr	r3, [r7, #0]
    9bee:	7cdb      	ldrb	r3, [r3, #19]
    9bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9bf4:	b2db      	uxtb	r3, r3
    9bf6:	2b00      	cmp	r3, #0
    9bf8:	d105      	bne.n	9c06 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9bfa:	7abb      	ldrb	r3, [r7, #10]
    9bfc:	4619      	mov	r1, r3
    9bfe:	6838      	ldr	r0, [r7, #0]
    9c00:	4b0c      	ldr	r3, [pc, #48]	; (9c34 <_usb_d_dev_handle_eps+0xac>)
    9c02:	4798      	blx	r3
    9c04:	e013      	b.n	9c2e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9c06:	683b      	ldr	r3, [r7, #0]
    9c08:	7cdb      	ldrb	r3, [r3, #19]
    9c0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9c0e:	b2db      	uxtb	r3, r3
    9c10:	2b00      	cmp	r3, #0
    9c12:	d005      	beq.n	9c20 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9c14:	7abb      	ldrb	r3, [r7, #10]
    9c16:	4619      	mov	r1, r3
    9c18:	6838      	ldr	r0, [r7, #0]
    9c1a:	4b07      	ldr	r3, [pc, #28]	; (9c38 <_usb_d_dev_handle_eps+0xb0>)
    9c1c:	4798      	blx	r3
    9c1e:	e006      	b.n	9c2e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9c20:	7abb      	ldrb	r3, [r7, #10]
    9c22:	4619      	mov	r1, r3
    9c24:	6838      	ldr	r0, [r7, #0]
    9c26:	4b05      	ldr	r3, [pc, #20]	; (9c3c <_usb_d_dev_handle_eps+0xb4>)
    9c28:	4798      	blx	r3
    9c2a:	e000      	b.n	9c2e <_usb_d_dev_handle_eps+0xa6>
		return;
    9c2c:	bf00      	nop
		}
	}
}
    9c2e:	3710      	adds	r7, #16
    9c30:	46bd      	mov	sp, r7
    9c32:	bd80      	pop	{r7, pc}
    9c34:	00009a0d 	.word	0x00009a0d
    9c38:	00009a61 	.word	0x00009a61
    9c3c:	00009af5 	.word	0x00009af5

00009c40 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9c40:	b580      	push	{r7, lr}
    9c42:	b084      	sub	sp, #16
    9c44:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9c46:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c4a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9c4c:	68bb      	ldr	r3, [r7, #8]
    9c4e:	8c1b      	ldrh	r3, [r3, #32]
    9c50:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9c52:	88fb      	ldrh	r3, [r7, #6]
    9c54:	2b00      	cmp	r3, #0
    9c56:	d104      	bne.n	9c62 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9c58:	4b13      	ldr	r3, [pc, #76]	; (9ca8 <_usb_d_dev_handler+0x68>)
    9c5a:	4798      	blx	r3
    9c5c:	4603      	mov	r3, r0
    9c5e:	2b00      	cmp	r3, #0
    9c60:	d11e      	bne.n	9ca0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9c62:	2300      	movs	r3, #0
    9c64:	73fb      	strb	r3, [r7, #15]
    9c66:	e017      	b.n	9c98 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9c68:	7bfa      	ldrb	r2, [r7, #15]
    9c6a:	4613      	mov	r3, r2
    9c6c:	009b      	lsls	r3, r3, #2
    9c6e:	4413      	add	r3, r2
    9c70:	009b      	lsls	r3, r3, #2
    9c72:	3310      	adds	r3, #16
    9c74:	4a0d      	ldr	r2, [pc, #52]	; (9cac <_usb_d_dev_handler+0x6c>)
    9c76:	4413      	add	r3, r2
    9c78:	3304      	adds	r3, #4
    9c7a:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9c7c:	683b      	ldr	r3, [r7, #0]
    9c7e:	7c9b      	ldrb	r3, [r3, #18]
    9c80:	2bff      	cmp	r3, #255	; 0xff
    9c82:	d005      	beq.n	9c90 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9c84:	88fb      	ldrh	r3, [r7, #6]
    9c86:	6839      	ldr	r1, [r7, #0]
    9c88:	4618      	mov	r0, r3
    9c8a:	4b09      	ldr	r3, [pc, #36]	; (9cb0 <_usb_d_dev_handler+0x70>)
    9c8c:	4798      	blx	r3
    9c8e:	e000      	b.n	9c92 <_usb_d_dev_handler+0x52>
			continue;
    9c90:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9c92:	7bfb      	ldrb	r3, [r7, #15]
    9c94:	3301      	adds	r3, #1
    9c96:	73fb      	strb	r3, [r7, #15]
    9c98:	7bfb      	ldrb	r3, [r7, #15]
    9c9a:	2b08      	cmp	r3, #8
    9c9c:	d9e4      	bls.n	9c68 <_usb_d_dev_handler+0x28>
    9c9e:	e000      	b.n	9ca2 <_usb_d_dev_handler+0x62>
			return;
    9ca0:	bf00      	nop
	}
}
    9ca2:	3710      	adds	r7, #16
    9ca4:	46bd      	mov	sp, r7
    9ca6:	bd80      	pop	{r7, pc}
    9ca8:	00009199 	.word	0x00009199
    9cac:	20002380 	.word	0x20002380
    9cb0:	00009b89 	.word	0x00009b89

00009cb4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9cb4:	b580      	push	{r7, lr}
    9cb6:	b082      	sub	sp, #8
    9cb8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9cba:	2300      	movs	r3, #0
    9cbc:	71fb      	strb	r3, [r7, #7]
    9cbe:	e023      	b.n	9d08 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9cc0:	79fa      	ldrb	r2, [r7, #7]
    9cc2:	4613      	mov	r3, r2
    9cc4:	009b      	lsls	r3, r3, #2
    9cc6:	4413      	add	r3, r2
    9cc8:	009b      	lsls	r3, r3, #2
    9cca:	3310      	adds	r3, #16
    9ccc:	4a14      	ldr	r2, [pc, #80]	; (9d20 <_usb_d_dev_reset_epts+0x6c>)
    9cce:	4413      	add	r3, r2
    9cd0:	3304      	adds	r3, #4
    9cd2:	2103      	movs	r1, #3
    9cd4:	4618      	mov	r0, r3
    9cd6:	4b13      	ldr	r3, [pc, #76]	; (9d24 <_usb_d_dev_reset_epts+0x70>)
    9cd8:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9cda:	79fa      	ldrb	r2, [r7, #7]
    9cdc:	4910      	ldr	r1, [pc, #64]	; (9d20 <_usb_d_dev_reset_epts+0x6c>)
    9cde:	4613      	mov	r3, r2
    9ce0:	009b      	lsls	r3, r3, #2
    9ce2:	4413      	add	r3, r2
    9ce4:	009b      	lsls	r3, r3, #2
    9ce6:	440b      	add	r3, r1
    9ce8:	3326      	adds	r3, #38	; 0x26
    9cea:	22ff      	movs	r2, #255	; 0xff
    9cec:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9cee:	79fa      	ldrb	r2, [r7, #7]
    9cf0:	490b      	ldr	r1, [pc, #44]	; (9d20 <_usb_d_dev_reset_epts+0x6c>)
    9cf2:	4613      	mov	r3, r2
    9cf4:	009b      	lsls	r3, r3, #2
    9cf6:	4413      	add	r3, r2
    9cf8:	009b      	lsls	r3, r3, #2
    9cfa:	440b      	add	r3, r1
    9cfc:	3327      	adds	r3, #39	; 0x27
    9cfe:	2200      	movs	r2, #0
    9d00:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9d02:	79fb      	ldrb	r3, [r7, #7]
    9d04:	3301      	adds	r3, #1
    9d06:	71fb      	strb	r3, [r7, #7]
    9d08:	79fb      	ldrb	r3, [r7, #7]
    9d0a:	2b08      	cmp	r3, #8
    9d0c:	d9d8      	bls.n	9cc0 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9d0e:	22a0      	movs	r2, #160	; 0xa0
    9d10:	2100      	movs	r1, #0
    9d12:	4805      	ldr	r0, [pc, #20]	; (9d28 <_usb_d_dev_reset_epts+0x74>)
    9d14:	4b05      	ldr	r3, [pc, #20]	; (9d2c <_usb_d_dev_reset_epts+0x78>)
    9d16:	4798      	blx	r3
}
    9d18:	bf00      	nop
    9d1a:	3708      	adds	r7, #8
    9d1c:	46bd      	mov	sp, r7
    9d1e:	bd80      	pop	{r7, pc}
    9d20:	20002380 	.word	0x20002380
    9d24:	0000a579 	.word	0x0000a579
    9d28:	20002448 	.word	0x20002448
    9d2c:	0000f0a5 	.word	0x0000f0a5

00009d30 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9d30:	b580      	push	{r7, lr}
    9d32:	b084      	sub	sp, #16
    9d34:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9d36:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d3a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9d3c:	2301      	movs	r3, #1
    9d3e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9d40:	2304      	movs	r3, #4
    9d42:	713b      	strb	r3, [r7, #4]
    9d44:	2300      	movs	r3, #0
    9d46:	717b      	strb	r3, [r7, #5]
    9d48:	2300      	movs	r3, #0
    9d4a:	71bb      	strb	r3, [r7, #6]
    9d4c:	2300      	movs	r3, #0
    9d4e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9d50:	2101      	movs	r1, #1
    9d52:	68f8      	ldr	r0, [r7, #12]
    9d54:	4b26      	ldr	r3, [pc, #152]	; (9df0 <_usb_d_dev_init+0xc0>)
    9d56:	4798      	blx	r3
    9d58:	4603      	mov	r3, r0
    9d5a:	f083 0301 	eor.w	r3, r3, #1
    9d5e:	b2db      	uxtb	r3, r3
    9d60:	2b00      	cmp	r3, #0
    9d62:	d011      	beq.n	9d88 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9d64:	2102      	movs	r1, #2
    9d66:	68f8      	ldr	r0, [r7, #12]
    9d68:	4b22      	ldr	r3, [pc, #136]	; (9df4 <_usb_d_dev_init+0xc4>)
    9d6a:	4798      	blx	r3
    9d6c:	4603      	mov	r3, r0
    9d6e:	2b00      	cmp	r3, #0
    9d70:	d006      	beq.n	9d80 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9d72:	68f8      	ldr	r0, [r7, #12]
    9d74:	4b20      	ldr	r3, [pc, #128]	; (9df8 <_usb_d_dev_init+0xc8>)
    9d76:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9d78:	2102      	movs	r1, #2
    9d7a:	68f8      	ldr	r0, [r7, #12]
    9d7c:	4b1f      	ldr	r3, [pc, #124]	; (9dfc <_usb_d_dev_init+0xcc>)
    9d7e:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9d80:	2101      	movs	r1, #1
    9d82:	68f8      	ldr	r0, [r7, #12]
    9d84:	4b1e      	ldr	r3, [pc, #120]	; (9e00 <_usb_d_dev_init+0xd0>)
    9d86:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9d88:	2101      	movs	r1, #1
    9d8a:	68f8      	ldr	r0, [r7, #12]
    9d8c:	4b1b      	ldr	r3, [pc, #108]	; (9dfc <_usb_d_dev_init+0xcc>)
    9d8e:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9d90:	4b1c      	ldr	r3, [pc, #112]	; (9e04 <_usb_d_dev_init+0xd4>)
    9d92:	4a1d      	ldr	r2, [pc, #116]	; (9e08 <_usb_d_dev_init+0xd8>)
    9d94:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9d96:	4b1b      	ldr	r3, [pc, #108]	; (9e04 <_usb_d_dev_init+0xd4>)
    9d98:	4a1b      	ldr	r2, [pc, #108]	; (9e08 <_usb_d_dev_init+0xd8>)
    9d9a:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9d9c:	4b19      	ldr	r3, [pc, #100]	; (9e04 <_usb_d_dev_init+0xd4>)
    9d9e:	4a1a      	ldr	r2, [pc, #104]	; (9e08 <_usb_d_dev_init+0xd8>)
    9da0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9da2:	4b18      	ldr	r3, [pc, #96]	; (9e04 <_usb_d_dev_init+0xd4>)
    9da4:	4a18      	ldr	r2, [pc, #96]	; (9e08 <_usb_d_dev_init+0xd8>)
    9da6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9da8:	4b16      	ldr	r3, [pc, #88]	; (9e04 <_usb_d_dev_init+0xd4>)
    9daa:	4a17      	ldr	r2, [pc, #92]	; (9e08 <_usb_d_dev_init+0xd8>)
    9dac:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9dae:	4b17      	ldr	r3, [pc, #92]	; (9e0c <_usb_d_dev_init+0xdc>)
    9db0:	4798      	blx	r3

	_usb_load_calib();
    9db2:	4b17      	ldr	r3, [pc, #92]	; (9e10 <_usb_d_dev_init+0xe0>)
    9db4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9db6:	2104      	movs	r1, #4
    9db8:	68f8      	ldr	r0, [r7, #12]
    9dba:	4b11      	ldr	r3, [pc, #68]	; (9e00 <_usb_d_dev_init+0xd0>)
    9dbc:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9dbe:	4b15      	ldr	r3, [pc, #84]	; (9e14 <_usb_d_dev_init+0xe4>)
    9dc0:	4619      	mov	r1, r3
    9dc2:	68f8      	ldr	r0, [r7, #12]
    9dc4:	4b14      	ldr	r3, [pc, #80]	; (9e18 <_usb_d_dev_init+0xe8>)
    9dc6:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9dc8:	7afb      	ldrb	r3, [r7, #11]
    9dca:	f107 0210 	add.w	r2, r7, #16
    9dce:	4413      	add	r3, r2
    9dd0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9dd4:	f043 0301 	orr.w	r3, r3, #1
    9dd8:	b2db      	uxtb	r3, r3
    9dda:	b29b      	uxth	r3, r3
    9ddc:	4619      	mov	r1, r3
    9dde:	68f8      	ldr	r0, [r7, #12]
    9de0:	4b0e      	ldr	r3, [pc, #56]	; (9e1c <_usb_d_dev_init+0xec>)
    9de2:	4798      	blx	r3

	return ERR_NONE;
    9de4:	2300      	movs	r3, #0
}
    9de6:	4618      	mov	r0, r3
    9de8:	3710      	adds	r7, #16
    9dea:	46bd      	mov	sp, r7
    9dec:	bd80      	pop	{r7, pc}
    9dee:	bf00      	nop
    9df0:	000083c9 	.word	0x000083c9
    9df4:	00008719 	.word	0x00008719
    9df8:	000086ed 	.word	0x000086ed
    9dfc:	0000839f 	.word	0x0000839f
    9e00:	00008749 	.word	0x00008749
    9e04:	20002380 	.word	0x20002380
    9e08:	00008811 	.word	0x00008811
    9e0c:	00009cb5 	.word	0x00009cb5
    9e10:	00008829 	.word	0x00008829
    9e14:	20002448 	.word	0x20002448
    9e18:	000087f5 	.word	0x000087f5
    9e1c:	000087b9 	.word	0x000087b9

00009e20 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9e20:	b580      	push	{r7, lr}
    9e22:	b082      	sub	sp, #8
    9e24:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9e26:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e2a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9e2c:	2103      	movs	r1, #3
    9e2e:	6878      	ldr	r0, [r7, #4]
    9e30:	4b17      	ldr	r3, [pc, #92]	; (9e90 <_usb_d_dev_enable+0x70>)
    9e32:	4798      	blx	r3
    9e34:	4603      	mov	r3, r0
    9e36:	2b00      	cmp	r3, #0
    9e38:	d002      	beq.n	9e40 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9e3a:	f06f 0310 	mvn.w	r3, #16
    9e3e:	e023      	b.n	9e88 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9e40:	6878      	ldr	r0, [r7, #4]
    9e42:	4b14      	ldr	r3, [pc, #80]	; (9e94 <_usb_d_dev_enable+0x74>)
    9e44:	4798      	blx	r3
    9e46:	4603      	mov	r3, r0
    9e48:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9e4a:	78fb      	ldrb	r3, [r7, #3]
    9e4c:	f003 0302 	and.w	r3, r3, #2
    9e50:	2b00      	cmp	r3, #0
    9e52:	d107      	bne.n	9e64 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9e54:	78fb      	ldrb	r3, [r7, #3]
    9e56:	f043 0302 	orr.w	r3, r3, #2
    9e5a:	b2db      	uxtb	r3, r3
    9e5c:	4619      	mov	r1, r3
    9e5e:	6878      	ldr	r0, [r7, #4]
    9e60:	4b0d      	ldr	r3, [pc, #52]	; (9e98 <_usb_d_dev_enable+0x78>)
    9e62:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9e64:	2050      	movs	r0, #80	; 0x50
    9e66:	4b0d      	ldr	r3, [pc, #52]	; (9e9c <_usb_d_dev_enable+0x7c>)
    9e68:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9e6a:	2051      	movs	r0, #81	; 0x51
    9e6c:	4b0b      	ldr	r3, [pc, #44]	; (9e9c <_usb_d_dev_enable+0x7c>)
    9e6e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9e70:	2052      	movs	r0, #82	; 0x52
    9e72:	4b0a      	ldr	r3, [pc, #40]	; (9e9c <_usb_d_dev_enable+0x7c>)
    9e74:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9e76:	2053      	movs	r0, #83	; 0x53
    9e78:	4b08      	ldr	r3, [pc, #32]	; (9e9c <_usb_d_dev_enable+0x7c>)
    9e7a:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9e7c:	f240 218d 	movw	r1, #653	; 0x28d
    9e80:	6878      	ldr	r0, [r7, #4]
    9e82:	4b07      	ldr	r3, [pc, #28]	; (9ea0 <_usb_d_dev_enable+0x80>)
    9e84:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9e86:	2300      	movs	r3, #0
}
    9e88:	4618      	mov	r0, r3
    9e8a:	3708      	adds	r7, #8
    9e8c:	46bd      	mov	sp, r7
    9e8e:	bd80      	pop	{r7, pc}
    9e90:	000086c3 	.word	0x000086c3
    9e94:	00008771 	.word	0x00008771
    9e98:	00008749 	.word	0x00008749
    9e9c:	000082d5 	.word	0x000082d5
    9ea0:	0000866d 	.word	0x0000866d

00009ea4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9ea4:	b580      	push	{r7, lr}
    9ea6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9ea8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9eac:	4b01      	ldr	r3, [pc, #4]	; (9eb4 <_usb_d_dev_attach+0x10>)
    9eae:	4798      	blx	r3
}
    9eb0:	bf00      	nop
    9eb2:	bd80      	pop	{r7, pc}
    9eb4:	00008795 	.word	0x00008795

00009eb8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9eb8:	b580      	push	{r7, lr}
    9eba:	b082      	sub	sp, #8
    9ebc:	af00      	add	r7, sp, #0
    9ebe:	4603      	mov	r3, r0
    9ec0:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9ec2:	79fb      	ldrb	r3, [r7, #7]
    9ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9ec8:	b2db      	uxtb	r3, r3
    9eca:	4619      	mov	r1, r3
    9ecc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ed0:	4b02      	ldr	r3, [pc, #8]	; (9edc <_usb_d_dev_set_address+0x24>)
    9ed2:	4798      	blx	r3
}
    9ed4:	bf00      	nop
    9ed6:	3708      	adds	r7, #8
    9ed8:	46bd      	mov	sp, r7
    9eda:	bd80      	pop	{r7, pc}
    9edc:	000087d7 	.word	0x000087d7

00009ee0 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9ee0:	b590      	push	{r4, r7, lr}
    9ee2:	b085      	sub	sp, #20
    9ee4:	af00      	add	r7, sp, #0
    9ee6:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9ee8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9eec:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9eee:	687b      	ldr	r3, [r7, #4]
    9ef0:	7c9b      	ldrb	r3, [r3, #18]
    9ef2:	f003 030f 	and.w	r3, r3, #15
    9ef6:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9ef8:	687b      	ldr	r3, [r7, #4]
    9efa:	68db      	ldr	r3, [r3, #12]
    9efc:	461a      	mov	r2, r3
    9efe:	7afb      	ldrb	r3, [r7, #11]
    9f00:	2100      	movs	r1, #0
    9f02:	4618      	mov	r0, r3
    9f04:	4b0f      	ldr	r3, [pc, #60]	; (9f44 <_usb_d_dev_trans_setup+0x64>)
    9f06:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9f08:	687b      	ldr	r3, [r7, #4]
    9f0a:	8a1b      	ldrh	r3, [r3, #16]
    9f0c:	461a      	mov	r2, r3
    9f0e:	7af8      	ldrb	r0, [r7, #11]
    9f10:	2300      	movs	r3, #0
    9f12:	2100      	movs	r1, #0
    9f14:	4c0c      	ldr	r4, [pc, #48]	; (9f48 <_usb_d_dev_trans_setup+0x68>)
    9f16:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9f18:	7afb      	ldrb	r3, [r7, #11]
    9f1a:	22b0      	movs	r2, #176	; 0xb0
    9f1c:	4619      	mov	r1, r3
    9f1e:	68f8      	ldr	r0, [r7, #12]
    9f20:	4b0a      	ldr	r3, [pc, #40]	; (9f4c <_usb_d_dev_trans_setup+0x6c>)
    9f22:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9f24:	7afb      	ldrb	r3, [r7, #11]
    9f26:	2200      	movs	r2, #0
    9f28:	2100      	movs	r1, #0
    9f2a:	4618      	mov	r0, r3
    9f2c:	4b08      	ldr	r3, [pc, #32]	; (9f50 <_usb_d_dev_trans_setup+0x70>)
    9f2e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9f30:	7afb      	ldrb	r3, [r7, #11]
    9f32:	2210      	movs	r2, #16
    9f34:	4619      	mov	r1, r3
    9f36:	68f8      	ldr	r0, [r7, #12]
    9f38:	4b06      	ldr	r3, [pc, #24]	; (9f54 <_usb_d_dev_trans_setup+0x74>)
    9f3a:	4798      	blx	r3
}
    9f3c:	bf00      	nop
    9f3e:	3714      	adds	r7, #20
    9f40:	46bd      	mov	sp, r7
    9f42:	bd90      	pop	{r4, r7, pc}
    9f44:	00008c75 	.word	0x00008c75
    9f48:	00008dfd 	.word	0x00008dfd
    9f4c:	000084d5 	.word	0x000084d5
    9f50:	00008ecd 	.word	0x00008ecd
    9f54:	00008529 	.word	0x00008529

00009f58 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9f58:	b580      	push	{r7, lr}
    9f5a:	b088      	sub	sp, #32
    9f5c:	af00      	add	r7, sp, #0
    9f5e:	4603      	mov	r3, r0
    9f60:	71fb      	strb	r3, [r7, #7]
    9f62:	460b      	mov	r3, r1
    9f64:	71bb      	strb	r3, [r7, #6]
    9f66:	4613      	mov	r3, r2
    9f68:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9f6a:	79fb      	ldrb	r3, [r7, #7]
    9f6c:	f003 030f 	and.w	r3, r3, #15
    9f70:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    9f72:	79fb      	ldrb	r3, [r7, #7]
    9f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9f78:	2b00      	cmp	r3, #0
    9f7a:	bf14      	ite	ne
    9f7c:	2301      	movne	r3, #1
    9f7e:	2300      	moveq	r3, #0
    9f80:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9f82:	7fba      	ldrb	r2, [r7, #30]
    9f84:	7ffb      	ldrb	r3, [r7, #31]
    9f86:	4611      	mov	r1, r2
    9f88:	4618      	mov	r0, r3
    9f8a:	4b3e      	ldr	r3, [pc, #248]	; (a084 <_usb_d_dev_ep_init+0x12c>)
    9f8c:	4798      	blx	r3
    9f8e:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9f90:	79bb      	ldrb	r3, [r7, #6]
    9f92:	f003 0303 	and.w	r3, r3, #3
    9f96:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9f98:	7ffa      	ldrb	r2, [r7, #31]
    9f9a:	4613      	mov	r3, r2
    9f9c:	005b      	lsls	r3, r3, #1
    9f9e:	4413      	add	r3, r2
    9fa0:	009b      	lsls	r3, r3, #2
    9fa2:	4a39      	ldr	r2, [pc, #228]	; (a088 <_usb_d_dev_ep_init+0x130>)
    9fa4:	4413      	add	r3, r2
    9fa6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    9fa8:	7ffb      	ldrb	r3, [r7, #31]
    9faa:	2b04      	cmp	r3, #4
    9fac:	d902      	bls.n	9fb4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    9fae:	f06f 0311 	mvn.w	r3, #17
    9fb2:	e063      	b.n	a07c <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    9fb4:	69bb      	ldr	r3, [r7, #24]
    9fb6:	7c9b      	ldrb	r3, [r3, #18]
    9fb8:	2bff      	cmp	r3, #255	; 0xff
    9fba:	d002      	beq.n	9fc2 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    9fbc:	f06f 0313 	mvn.w	r3, #19
    9fc0:	e05c      	b.n	a07c <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9fc2:	7dfb      	ldrb	r3, [r7, #23]
    9fc4:	2b00      	cmp	r3, #0
    9fc6:	d11f      	bne.n	a008 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    9fc8:	7fbb      	ldrb	r3, [r7, #30]
    9fca:	2b00      	cmp	r3, #0
    9fcc:	bf14      	ite	ne
    9fce:	2301      	movne	r3, #1
    9fd0:	2300      	moveq	r3, #0
    9fd2:	b2db      	uxtb	r3, r3
    9fd4:	f083 0301 	eor.w	r3, r3, #1
    9fd8:	b2db      	uxtb	r3, r3
    9fda:	f003 0301 	and.w	r3, r3, #1
    9fde:	b2da      	uxtb	r2, r3
    9fe0:	7ffb      	ldrb	r3, [r7, #31]
    9fe2:	4611      	mov	r1, r2
    9fe4:	4618      	mov	r0, r3
    9fe6:	4b27      	ldr	r3, [pc, #156]	; (a084 <_usb_d_dev_ep_init+0x12c>)
    9fe8:	4798      	blx	r3
    9fea:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    9fec:	68fb      	ldr	r3, [r7, #12]
    9fee:	7c9b      	ldrb	r3, [r3, #18]
    9ff0:	2bff      	cmp	r3, #255	; 0xff
    9ff2:	d002      	beq.n	9ffa <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    9ff4:	f06f 0313 	mvn.w	r3, #19
    9ff8:	e040      	b.n	a07c <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9ffa:	693b      	ldr	r3, [r7, #16]
    9ffc:	681b      	ldr	r3, [r3, #0]
    9ffe:	2b00      	cmp	r3, #0
    a000:	d102      	bne.n	a008 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a002:	f06f 0312 	mvn.w	r3, #18
    a006:	e039      	b.n	a07c <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a008:	7fbb      	ldrb	r3, [r7, #30]
    a00a:	2b00      	cmp	r3, #0
    a00c:	d007      	beq.n	a01e <_usb_d_dev_ep_init+0xc6>
    a00e:	693b      	ldr	r3, [r7, #16]
    a010:	685b      	ldr	r3, [r3, #4]
    a012:	2b00      	cmp	r3, #0
    a014:	bf14      	ite	ne
    a016:	2301      	movne	r3, #1
    a018:	2300      	moveq	r3, #0
    a01a:	b2db      	uxtb	r3, r3
    a01c:	e006      	b.n	a02c <_usb_d_dev_ep_init+0xd4>
    a01e:	693b      	ldr	r3, [r7, #16]
    a020:	681b      	ldr	r3, [r3, #0]
    a022:	2b00      	cmp	r3, #0
    a024:	bf14      	ite	ne
    a026:	2301      	movne	r3, #1
    a028:	2300      	moveq	r3, #0
    a02a:	b2db      	uxtb	r3, r3
    a02c:	2b00      	cmp	r3, #0
    a02e:	d00f      	beq.n	a050 <_usb_d_dev_ep_init+0xf8>
    a030:	7fbb      	ldrb	r3, [r7, #30]
    a032:	2b00      	cmp	r3, #0
    a034:	d003      	beq.n	a03e <_usb_d_dev_ep_init+0xe6>
    a036:	693b      	ldr	r3, [r7, #16]
    a038:	895b      	ldrh	r3, [r3, #10]
    a03a:	461a      	mov	r2, r3
    a03c:	e002      	b.n	a044 <_usb_d_dev_ep_init+0xec>
    a03e:	693b      	ldr	r3, [r7, #16]
    a040:	891b      	ldrh	r3, [r3, #8]
    a042:	461a      	mov	r2, r3
    a044:	88bb      	ldrh	r3, [r7, #4]
    a046:	429a      	cmp	r2, r3
    a048:	da02      	bge.n	a050 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a04a:	f06f 0312 	mvn.w	r3, #18
    a04e:	e015      	b.n	a07c <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a050:	7fbb      	ldrb	r3, [r7, #30]
    a052:	2b00      	cmp	r3, #0
    a054:	d002      	beq.n	a05c <_usb_d_dev_ep_init+0x104>
    a056:	693b      	ldr	r3, [r7, #16]
    a058:	685b      	ldr	r3, [r3, #4]
    a05a:	e001      	b.n	a060 <_usb_d_dev_ep_init+0x108>
    a05c:	693b      	ldr	r3, [r7, #16]
    a05e:	681b      	ldr	r3, [r3, #0]
    a060:	69ba      	ldr	r2, [r7, #24]
    a062:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a064:	69bb      	ldr	r3, [r7, #24]
    a066:	88ba      	ldrh	r2, [r7, #4]
    a068:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a06a:	7dfb      	ldrb	r3, [r7, #23]
    a06c:	3301      	adds	r3, #1
    a06e:	b2da      	uxtb	r2, r3
    a070:	69bb      	ldr	r3, [r7, #24]
    a072:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a074:	69bb      	ldr	r3, [r7, #24]
    a076:	79fa      	ldrb	r2, [r7, #7]
    a078:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a07a:	2300      	movs	r3, #0
}
    a07c:	4618      	mov	r0, r3
    a07e:	3720      	adds	r7, #32
    a080:	46bd      	mov	sp, r7
    a082:	bd80      	pop	{r7, pc}
    a084:	00008f89 	.word	0x00008f89
    a088:	0000f70c 	.word	0x0000f70c

0000a08c <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a08c:	b580      	push	{r7, lr}
    a08e:	b086      	sub	sp, #24
    a090:	af00      	add	r7, sp, #0
    a092:	4603      	mov	r3, r0
    a094:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a096:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a09a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a09c:	79fb      	ldrb	r3, [r7, #7]
    a09e:	f003 030f 	and.w	r3, r3, #15
    a0a2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a0a4:	79fb      	ldrb	r3, [r7, #7]
    a0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a0aa:	2b00      	cmp	r3, #0
    a0ac:	bf14      	ite	ne
    a0ae:	2301      	movne	r3, #1
    a0b0:	2300      	moveq	r3, #0
    a0b2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a0b4:	7cba      	ldrb	r2, [r7, #18]
    a0b6:	7cfb      	ldrb	r3, [r7, #19]
    a0b8:	4611      	mov	r1, r2
    a0ba:	4618      	mov	r0, r3
    a0bc:	4b2a      	ldr	r3, [pc, #168]	; (a168 <_usb_d_dev_ep_deinit+0xdc>)
    a0be:	4798      	blx	r3
    a0c0:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a0c2:	7cfb      	ldrb	r3, [r7, #19]
    a0c4:	2b04      	cmp	r3, #4
    a0c6:	d84a      	bhi.n	a15e <_usb_d_dev_ep_deinit+0xd2>
    a0c8:	68fb      	ldr	r3, [r7, #12]
    a0ca:	7c9b      	ldrb	r3, [r3, #18]
    a0cc:	2bff      	cmp	r3, #255	; 0xff
    a0ce:	d046      	beq.n	a15e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a0d0:	7cbb      	ldrb	r3, [r7, #18]
    a0d2:	2203      	movs	r2, #3
    a0d4:	4619      	mov	r1, r3
    a0d6:	68f8      	ldr	r0, [r7, #12]
    a0d8:	4b24      	ldr	r3, [pc, #144]	; (a16c <_usb_d_dev_ep_deinit+0xe0>)
    a0da:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a0dc:	68fb      	ldr	r3, [r7, #12]
    a0de:	7cdb      	ldrb	r3, [r3, #19]
    a0e0:	f003 0307 	and.w	r3, r3, #7
    a0e4:	b2db      	uxtb	r3, r3
    a0e6:	2b01      	cmp	r3, #1
    a0e8:	d107      	bne.n	a0fa <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a0ea:	79fb      	ldrb	r3, [r7, #7]
    a0ec:	697a      	ldr	r2, [r7, #20]
    a0ee:	3308      	adds	r3, #8
    a0f0:	015b      	lsls	r3, r3, #5
    a0f2:	4413      	add	r3, r2
    a0f4:	2200      	movs	r2, #0
    a0f6:	701a      	strb	r2, [r3, #0]
    a0f8:	e02a      	b.n	a150 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a0fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a0fe:	2b00      	cmp	r3, #0
    a100:	da15      	bge.n	a12e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a102:	79fb      	ldrb	r3, [r7, #7]
    a104:	f003 030f 	and.w	r3, r3, #15
    a108:	79fa      	ldrb	r2, [r7, #7]
    a10a:	f002 020f 	and.w	r2, r2, #15
    a10e:	6979      	ldr	r1, [r7, #20]
    a110:	3208      	adds	r2, #8
    a112:	0152      	lsls	r2, r2, #5
    a114:	440a      	add	r2, r1
    a116:	7812      	ldrb	r2, [r2, #0]
    a118:	b2d2      	uxtb	r2, r2
    a11a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a11e:	b2d1      	uxtb	r1, r2
    a120:	697a      	ldr	r2, [r7, #20]
    a122:	3308      	adds	r3, #8
    a124:	015b      	lsls	r3, r3, #5
    a126:	4413      	add	r3, r2
    a128:	460a      	mov	r2, r1
    a12a:	701a      	strb	r2, [r3, #0]
    a12c:	e010      	b.n	a150 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a12e:	79fb      	ldrb	r3, [r7, #7]
    a130:	79fa      	ldrb	r2, [r7, #7]
    a132:	6979      	ldr	r1, [r7, #20]
    a134:	3208      	adds	r2, #8
    a136:	0152      	lsls	r2, r2, #5
    a138:	440a      	add	r2, r1
    a13a:	7812      	ldrb	r2, [r2, #0]
    a13c:	b2d2      	uxtb	r2, r2
    a13e:	f022 0207 	bic.w	r2, r2, #7
    a142:	b2d1      	uxtb	r1, r2
    a144:	697a      	ldr	r2, [r7, #20]
    a146:	3308      	adds	r3, #8
    a148:	015b      	lsls	r3, r3, #5
    a14a:	4413      	add	r3, r2
    a14c:	460a      	mov	r2, r1
    a14e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a150:	68fb      	ldr	r3, [r7, #12]
    a152:	2200      	movs	r2, #0
    a154:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a156:	68fb      	ldr	r3, [r7, #12]
    a158:	22ff      	movs	r2, #255	; 0xff
    a15a:	749a      	strb	r2, [r3, #18]
    a15c:	e000      	b.n	a160 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a15e:	bf00      	nop
}
    a160:	3718      	adds	r7, #24
    a162:	46bd      	mov	sp, r7
    a164:	bd80      	pop	{r7, pc}
    a166:	bf00      	nop
    a168:	00008f89 	.word	0x00008f89
    a16c:	0000a5c1 	.word	0x0000a5c1

0000a170 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a170:	b5b0      	push	{r4, r5, r7, lr}
    a172:	b088      	sub	sp, #32
    a174:	af00      	add	r7, sp, #0
    a176:	4603      	mov	r3, r0
    a178:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a17a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a17e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a180:	79fb      	ldrb	r3, [r7, #7]
    a182:	f003 030f 	and.w	r3, r3, #15
    a186:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a188:	79fb      	ldrb	r3, [r7, #7]
    a18a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a18e:	2b00      	cmp	r3, #0
    a190:	bf14      	ite	ne
    a192:	2301      	movne	r3, #1
    a194:	2300      	moveq	r3, #0
    a196:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a198:	7eba      	ldrb	r2, [r7, #26]
    a19a:	7efb      	ldrb	r3, [r7, #27]
    a19c:	4611      	mov	r1, r2
    a19e:	4618      	mov	r0, r3
    a1a0:	4b70      	ldr	r3, [pc, #448]	; (a364 <_usb_d_dev_ep_enable+0x1f4>)
    a1a2:	4798      	blx	r3
    a1a4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a1a6:	7efb      	ldrb	r3, [r7, #27]
    a1a8:	4619      	mov	r1, r3
    a1aa:	69f8      	ldr	r0, [r7, #28]
    a1ac:	4b6e      	ldr	r3, [pc, #440]	; (a368 <_usb_d_dev_ep_enable+0x1f8>)
    a1ae:	4798      	blx	r3
    a1b0:	4603      	mov	r3, r0
    a1b2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a1b4:	7efb      	ldrb	r3, [r7, #27]
    a1b6:	2b04      	cmp	r3, #4
    a1b8:	d803      	bhi.n	a1c2 <_usb_d_dev_ep_enable+0x52>
    a1ba:	697b      	ldr	r3, [r7, #20]
    a1bc:	7c9b      	ldrb	r3, [r3, #18]
    a1be:	2bff      	cmp	r3, #255	; 0xff
    a1c0:	d102      	bne.n	a1c8 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a1c2:	f06f 0311 	mvn.w	r3, #17
    a1c6:	e0c8      	b.n	a35a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a1c8:	7efb      	ldrb	r3, [r7, #27]
    a1ca:	015b      	lsls	r3, r3, #5
    a1cc:	4a67      	ldr	r2, [pc, #412]	; (a36c <_usb_d_dev_ep_enable+0x1fc>)
    a1ce:	4413      	add	r3, r2
    a1d0:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a1d2:	697b      	ldr	r3, [r7, #20]
    a1d4:	7cdb      	ldrb	r3, [r3, #19]
    a1d6:	f003 0307 	and.w	r3, r3, #7
    a1da:	b2db      	uxtb	r3, r3
    a1dc:	2b01      	cmp	r3, #1
    a1de:	d14b      	bne.n	a278 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a1e0:	7cfb      	ldrb	r3, [r7, #19]
    a1e2:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a1e6:	2b00      	cmp	r3, #0
    a1e8:	d002      	beq.n	a1f0 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a1ea:	f06f 0313 	mvn.w	r3, #19
    a1ee:	e0b4      	b.n	a35a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a1f0:	7efb      	ldrb	r3, [r7, #27]
    a1f2:	2211      	movs	r2, #17
    a1f4:	4619      	mov	r1, r3
    a1f6:	69f8      	ldr	r0, [r7, #28]
    a1f8:	4b5d      	ldr	r3, [pc, #372]	; (a370 <_usb_d_dev_ep_enable+0x200>)
    a1fa:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a1fc:	697b      	ldr	r3, [r7, #20]
    a1fe:	8a1b      	ldrh	r3, [r3, #16]
    a200:	039b      	lsls	r3, r3, #14
    a202:	4c5c      	ldr	r4, [pc, #368]	; (a374 <_usb_d_dev_ep_enable+0x204>)
    a204:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a206:	697b      	ldr	r3, [r7, #20]
    a208:	8a1b      	ldrh	r3, [r3, #16]
    a20a:	4618      	mov	r0, r3
    a20c:	4b5a      	ldr	r3, [pc, #360]	; (a378 <_usb_d_dev_ep_enable+0x208>)
    a20e:	4798      	blx	r3
    a210:	4603      	mov	r3, r0
    a212:	071b      	lsls	r3, r3, #28
    a214:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a218:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a21c:	68fb      	ldr	r3, [r7, #12]
    a21e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a220:	68fb      	ldr	r3, [r7, #12]
    a222:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a226:	697b      	ldr	r3, [r7, #20]
    a228:	8a1b      	ldrh	r3, [r3, #16]
    a22a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a22e:	697b      	ldr	r3, [r7, #20]
    a230:	8a1b      	ldrh	r3, [r3, #16]
    a232:	4618      	mov	r0, r3
    a234:	4b50      	ldr	r3, [pc, #320]	; (a378 <_usb_d_dev_ep_enable+0x208>)
    a236:	4798      	blx	r3
    a238:	4603      	mov	r3, r0
    a23a:	071b      	lsls	r3, r3, #28
    a23c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a240:	432b      	orrs	r3, r5
    a242:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a244:	7efb      	ldrb	r3, [r7, #27]
    a246:	2200      	movs	r2, #0
    a248:	2100      	movs	r1, #0
    a24a:	4618      	mov	r0, r3
    a24c:	4b4b      	ldr	r3, [pc, #300]	; (a37c <_usb_d_dev_ep_enable+0x20c>)
    a24e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a250:	7efb      	ldrb	r3, [r7, #27]
    a252:	2200      	movs	r2, #0
    a254:	2101      	movs	r1, #1
    a256:	4618      	mov	r0, r3
    a258:	4b49      	ldr	r3, [pc, #292]	; (a380 <_usb_d_dev_ep_enable+0x210>)
    a25a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a25c:	7efb      	ldrb	r3, [r7, #27]
    a25e:	2100      	movs	r1, #0
    a260:	4618      	mov	r0, r3
    a262:	4b48      	ldr	r3, [pc, #288]	; (a384 <_usb_d_dev_ep_enable+0x214>)
    a264:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a266:	7efb      	ldrb	r3, [r7, #27]
    a268:	2101      	movs	r1, #1
    a26a:	4618      	mov	r0, r3
    a26c:	4b45      	ldr	r3, [pc, #276]	; (a384 <_usb_d_dev_ep_enable+0x214>)
    a26e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a270:	6978      	ldr	r0, [r7, #20]
    a272:	4b45      	ldr	r3, [pc, #276]	; (a388 <_usb_d_dev_ep_enable+0x218>)
    a274:	4798      	blx	r3
    a276:	e06f      	b.n	a358 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a278:	7ebb      	ldrb	r3, [r7, #26]
    a27a:	2b00      	cmp	r3, #0
    a27c:	d038      	beq.n	a2f0 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a27e:	7cfb      	ldrb	r3, [r7, #19]
    a280:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a284:	2b00      	cmp	r3, #0
    a286:	d002      	beq.n	a28e <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a288:	f06f 0313 	mvn.w	r3, #19
    a28c:	e065      	b.n	a35a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a28e:	697b      	ldr	r3, [r7, #20]
    a290:	7cdb      	ldrb	r3, [r3, #19]
    a292:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a296:	b2db      	uxtb	r3, r3
    a298:	011b      	lsls	r3, r3, #4
    a29a:	b2db      	uxtb	r3, r3
    a29c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a2a0:	b2da      	uxtb	r2, r3
    a2a2:	7cfb      	ldrb	r3, [r7, #19]
    a2a4:	4313      	orrs	r3, r2
    a2a6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a2a8:	7cfa      	ldrb	r2, [r7, #19]
    a2aa:	7efb      	ldrb	r3, [r7, #27]
    a2ac:	4619      	mov	r1, r3
    a2ae:	69f8      	ldr	r0, [r7, #28]
    a2b0:	4b2f      	ldr	r3, [pc, #188]	; (a370 <_usb_d_dev_ep_enable+0x200>)
    a2b2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a2b4:	68fb      	ldr	r3, [r7, #12]
    a2b6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a2ba:	697b      	ldr	r3, [r7, #20]
    a2bc:	8a1b      	ldrh	r3, [r3, #16]
    a2be:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a2c2:	697b      	ldr	r3, [r7, #20]
    a2c4:	8a1b      	ldrh	r3, [r3, #16]
    a2c6:	4618      	mov	r0, r3
    a2c8:	4b2b      	ldr	r3, [pc, #172]	; (a378 <_usb_d_dev_ep_enable+0x208>)
    a2ca:	4798      	blx	r3
    a2cc:	4603      	mov	r3, r0
    a2ce:	071b      	lsls	r3, r3, #28
    a2d0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a2d4:	432b      	orrs	r3, r5
    a2d6:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a2d8:	7efb      	ldrb	r3, [r7, #27]
    a2da:	2200      	movs	r2, #0
    a2dc:	2101      	movs	r1, #1
    a2de:	4618      	mov	r0, r3
    a2e0:	4b27      	ldr	r3, [pc, #156]	; (a380 <_usb_d_dev_ep_enable+0x210>)
    a2e2:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a2e4:	7efb      	ldrb	r3, [r7, #27]
    a2e6:	2101      	movs	r1, #1
    a2e8:	4618      	mov	r0, r3
    a2ea:	4b26      	ldr	r3, [pc, #152]	; (a384 <_usb_d_dev_ep_enable+0x214>)
    a2ec:	4798      	blx	r3
    a2ee:	e033      	b.n	a358 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a2f0:	7cfb      	ldrb	r3, [r7, #19]
    a2f2:	f003 0307 	and.w	r3, r3, #7
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	d002      	beq.n	a300 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a2fa:	f06f 0313 	mvn.w	r3, #19
    a2fe:	e02c      	b.n	a35a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a300:	697b      	ldr	r3, [r7, #20]
    a302:	7cdb      	ldrb	r3, [r3, #19]
    a304:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a308:	b2db      	uxtb	r3, r3
    a30a:	461a      	mov	r2, r3
    a30c:	7cfb      	ldrb	r3, [r7, #19]
    a30e:	4313      	orrs	r3, r2
    a310:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a312:	7cfa      	ldrb	r2, [r7, #19]
    a314:	7efb      	ldrb	r3, [r7, #27]
    a316:	4619      	mov	r1, r3
    a318:	69f8      	ldr	r0, [r7, #28]
    a31a:	4b15      	ldr	r3, [pc, #84]	; (a370 <_usb_d_dev_ep_enable+0x200>)
    a31c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a31e:	697b      	ldr	r3, [r7, #20]
    a320:	8a1b      	ldrh	r3, [r3, #16]
    a322:	039b      	lsls	r3, r3, #14
    a324:	4c13      	ldr	r4, [pc, #76]	; (a374 <_usb_d_dev_ep_enable+0x204>)
    a326:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a328:	697b      	ldr	r3, [r7, #20]
    a32a:	8a1b      	ldrh	r3, [r3, #16]
    a32c:	4618      	mov	r0, r3
    a32e:	4b12      	ldr	r3, [pc, #72]	; (a378 <_usb_d_dev_ep_enable+0x208>)
    a330:	4798      	blx	r3
    a332:	4603      	mov	r3, r0
    a334:	071b      	lsls	r3, r3, #28
    a336:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a33a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a33e:	68fb      	ldr	r3, [r7, #12]
    a340:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a342:	7efb      	ldrb	r3, [r7, #27]
    a344:	2200      	movs	r2, #0
    a346:	2100      	movs	r1, #0
    a348:	4618      	mov	r0, r3
    a34a:	4b0c      	ldr	r3, [pc, #48]	; (a37c <_usb_d_dev_ep_enable+0x20c>)
    a34c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a34e:	7efb      	ldrb	r3, [r7, #27]
    a350:	2100      	movs	r1, #0
    a352:	4618      	mov	r0, r3
    a354:	4b0b      	ldr	r3, [pc, #44]	; (a384 <_usb_d_dev_ep_enable+0x214>)
    a356:	4798      	blx	r3
	}

	return USB_OK;
    a358:	2300      	movs	r3, #0
}
    a35a:	4618      	mov	r0, r3
    a35c:	3720      	adds	r7, #32
    a35e:	46bd      	mov	sp, r7
    a360:	bdb0      	pop	{r4, r5, r7, pc}
    a362:	bf00      	nop
    a364:	00008f89 	.word	0x00008f89
    a368:	0000860f 	.word	0x0000860f
    a36c:	20002448 	.word	0x20002448
    a370:	000085e5 	.word	0x000085e5
    a374:	0fffc000 	.word	0x0fffc000
    a378:	00008f25 	.word	0x00008f25
    a37c:	00008ecd 	.word	0x00008ecd
    a380:	00008e75 	.word	0x00008e75
    a384:	00008e3d 	.word	0x00008e3d
    a388:	00009ee1 	.word	0x00009ee1

0000a38c <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a38c:	b580      	push	{r7, lr}
    a38e:	b084      	sub	sp, #16
    a390:	af00      	add	r7, sp, #0
    a392:	6078      	str	r0, [r7, #4]
    a394:	460b      	mov	r3, r1
    a396:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a398:	687b      	ldr	r3, [r7, #4]
    a39a:	7c9b      	ldrb	r3, [r3, #18]
    a39c:	f003 030f 	and.w	r3, r3, #15
    a3a0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a3a2:	78fa      	ldrb	r2, [r7, #3]
    a3a4:	7bfb      	ldrb	r3, [r7, #15]
    a3a6:	4611      	mov	r1, r2
    a3a8:	4618      	mov	r0, r3
    a3aa:	4b03      	ldr	r3, [pc, #12]	; (a3b8 <_usb_d_dev_ep_stall_get+0x2c>)
    a3ac:	4798      	blx	r3
    a3ae:	4603      	mov	r3, r0
}
    a3b0:	4618      	mov	r0, r3
    a3b2:	3710      	adds	r7, #16
    a3b4:	46bd      	mov	sp, r7
    a3b6:	bd80      	pop	{r7, pc}
    a3b8:	00008a7d 	.word	0x00008a7d

0000a3bc <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a3bc:	b580      	push	{r7, lr}
    a3be:	b084      	sub	sp, #16
    a3c0:	af00      	add	r7, sp, #0
    a3c2:	6078      	str	r0, [r7, #4]
    a3c4:	460b      	mov	r3, r1
    a3c6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a3c8:	687b      	ldr	r3, [r7, #4]
    a3ca:	7c9b      	ldrb	r3, [r3, #18]
    a3cc:	f003 030f 	and.w	r3, r3, #15
    a3d0:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a3d2:	78f9      	ldrb	r1, [r7, #3]
    a3d4:	7bfb      	ldrb	r3, [r7, #15]
    a3d6:	2201      	movs	r2, #1
    a3d8:	4618      	mov	r0, r3
    a3da:	4b0a      	ldr	r3, [pc, #40]	; (a404 <_usb_d_dev_ep_stall_set+0x48>)
    a3dc:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a3de:	78fb      	ldrb	r3, [r7, #3]
    a3e0:	2220      	movs	r2, #32
    a3e2:	409a      	lsls	r2, r3
    a3e4:	7bfb      	ldrb	r3, [r7, #15]
    a3e6:	4611      	mov	r1, r2
    a3e8:	4618      	mov	r0, r3
    a3ea:	4b07      	ldr	r3, [pc, #28]	; (a408 <_usb_d_dev_ep_stall_set+0x4c>)
    a3ec:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a3ee:	687a      	ldr	r2, [r7, #4]
    a3f0:	7cd3      	ldrb	r3, [r2, #19]
    a3f2:	f043 0308 	orr.w	r3, r3, #8
    a3f6:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a3f8:	2300      	movs	r3, #0
}
    a3fa:	4618      	mov	r0, r3
    a3fc:	3710      	adds	r7, #16
    a3fe:	46bd      	mov	sp, r7
    a400:	bd80      	pop	{r7, pc}
    a402:	bf00      	nop
    a404:	00008a25 	.word	0x00008a25
    a408:	000089a5 	.word	0x000089a5

0000a40c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a40c:	b580      	push	{r7, lr}
    a40e:	b084      	sub	sp, #16
    a410:	af00      	add	r7, sp, #0
    a412:	6078      	str	r0, [r7, #4]
    a414:	460b      	mov	r3, r1
    a416:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a418:	687b      	ldr	r3, [r7, #4]
    a41a:	7c9b      	ldrb	r3, [r3, #18]
    a41c:	f003 030f 	and.w	r3, r3, #15
    a420:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a422:	78fa      	ldrb	r2, [r7, #3]
    a424:	7bfb      	ldrb	r3, [r7, #15]
    a426:	4611      	mov	r1, r2
    a428:	4618      	mov	r0, r3
    a42a:	4b28      	ldr	r3, [pc, #160]	; (a4cc <_usb_d_dev_ep_stall_clr+0xc0>)
    a42c:	4798      	blx	r3
    a42e:	4603      	mov	r3, r0
    a430:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a432:	7bbb      	ldrb	r3, [r7, #14]
    a434:	f083 0301 	eor.w	r3, r3, #1
    a438:	b2db      	uxtb	r3, r3
    a43a:	2b00      	cmp	r3, #0
    a43c:	d001      	beq.n	a442 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a43e:	2300      	movs	r3, #0
    a440:	e040      	b.n	a4c4 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a442:	78f9      	ldrb	r1, [r7, #3]
    a444:	7bfb      	ldrb	r3, [r7, #15]
    a446:	2200      	movs	r2, #0
    a448:	4618      	mov	r0, r3
    a44a:	4b21      	ldr	r3, [pc, #132]	; (a4d0 <_usb_d_dev_ep_stall_clr+0xc4>)
    a44c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a44e:	78fb      	ldrb	r3, [r7, #3]
    a450:	2220      	movs	r2, #32
    a452:	409a      	lsls	r2, r3
    a454:	7bfb      	ldrb	r3, [r7, #15]
    a456:	4611      	mov	r1, r2
    a458:	4618      	mov	r0, r3
    a45a:	4b1e      	ldr	r3, [pc, #120]	; (a4d4 <_usb_d_dev_ep_stall_clr+0xc8>)
    a45c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a45e:	78fa      	ldrb	r2, [r7, #3]
    a460:	7bfb      	ldrb	r3, [r7, #15]
    a462:	4611      	mov	r1, r2
    a464:	4618      	mov	r0, r3
    a466:	4b1c      	ldr	r3, [pc, #112]	; (a4d8 <_usb_d_dev_ep_stall_clr+0xcc>)
    a468:	4798      	blx	r3
    a46a:	4603      	mov	r3, r0
    a46c:	2b00      	cmp	r3, #0
    a46e:	d00b      	beq.n	a488 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a470:	78fa      	ldrb	r2, [r7, #3]
    a472:	7bfb      	ldrb	r3, [r7, #15]
    a474:	4611      	mov	r1, r2
    a476:	4618      	mov	r0, r3
    a478:	4b18      	ldr	r3, [pc, #96]	; (a4dc <_usb_d_dev_ep_stall_clr+0xd0>)
    a47a:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a47c:	78f9      	ldrb	r1, [r7, #3]
    a47e:	7bfb      	ldrb	r3, [r7, #15]
    a480:	2200      	movs	r2, #0
    a482:	4618      	mov	r0, r3
    a484:	4b16      	ldr	r3, [pc, #88]	; (a4e0 <_usb_d_dev_ep_stall_clr+0xd4>)
    a486:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a488:	687b      	ldr	r3, [r7, #4]
    a48a:	7cdb      	ldrb	r3, [r3, #19]
    a48c:	f003 0307 	and.w	r3, r3, #7
    a490:	b2db      	uxtb	r3, r3
    a492:	2b01      	cmp	r3, #1
    a494:	d110      	bne.n	a4b8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a496:	7bfb      	ldrb	r3, [r7, #15]
    a498:	4619      	mov	r1, r3
    a49a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a49e:	4b11      	ldr	r3, [pc, #68]	; (a4e4 <_usb_d_dev_ep_stall_clr+0xd8>)
    a4a0:	4798      	blx	r3
    a4a2:	4603      	mov	r3, r0
    a4a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a4a8:	2b00      	cmp	r3, #0
    a4aa:	d10a      	bne.n	a4c2 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a4ac:	687a      	ldr	r2, [r7, #4]
    a4ae:	7cd3      	ldrb	r3, [r2, #19]
    a4b0:	f36f 03c3 	bfc	r3, #3, #1
    a4b4:	74d3      	strb	r3, [r2, #19]
    a4b6:	e004      	b.n	a4c2 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a4b8:	687a      	ldr	r2, [r7, #4]
    a4ba:	7cd3      	ldrb	r3, [r2, #19]
    a4bc:	f36f 03c3 	bfc	r3, #3, #1
    a4c0:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a4c2:	2300      	movs	r3, #0
}
    a4c4:	4618      	mov	r0, r3
    a4c6:	3710      	adds	r7, #16
    a4c8:	46bd      	mov	sp, r7
    a4ca:	bd80      	pop	{r7, pc}
    a4cc:	00008a7d 	.word	0x00008a7d
    a4d0:	00008a25 	.word	0x00008a25
    a4d4:	000089cd 	.word	0x000089cd
    a4d8:	00008ac1 	.word	0x00008ac1
    a4dc:	00008b05 	.word	0x00008b05
    a4e0:	00008bf1 	.word	0x00008bf1
    a4e4:	000084ad 	.word	0x000084ad

0000a4e8 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a4e8:	b580      	push	{r7, lr}
    a4ea:	b086      	sub	sp, #24
    a4ec:	af00      	add	r7, sp, #0
    a4ee:	4603      	mov	r3, r0
    a4f0:	460a      	mov	r2, r1
    a4f2:	71fb      	strb	r3, [r7, #7]
    a4f4:	4613      	mov	r3, r2
    a4f6:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a4f8:	79fb      	ldrb	r3, [r7, #7]
    a4fa:	f003 030f 	and.w	r3, r3, #15
    a4fe:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a500:	79fb      	ldrb	r3, [r7, #7]
    a502:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a506:	2b00      	cmp	r3, #0
    a508:	bf14      	ite	ne
    a50a:	2301      	movne	r3, #1
    a50c:	2300      	moveq	r3, #0
    a50e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a510:	7cba      	ldrb	r2, [r7, #18]
    a512:	7cfb      	ldrb	r3, [r7, #19]
    a514:	4611      	mov	r1, r2
    a516:	4618      	mov	r0, r3
    a518:	4b13      	ldr	r3, [pc, #76]	; (a568 <_usb_d_dev_ep_stall+0x80>)
    a51a:	4798      	blx	r3
    a51c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a51e:	7cfb      	ldrb	r3, [r7, #19]
    a520:	2b04      	cmp	r3, #4
    a522:	d902      	bls.n	a52a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a524:	f06f 0311 	mvn.w	r3, #17
    a528:	e01a      	b.n	a560 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a52a:	79bb      	ldrb	r3, [r7, #6]
    a52c:	2b01      	cmp	r3, #1
    a52e:	d106      	bne.n	a53e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a530:	7cbb      	ldrb	r3, [r7, #18]
    a532:	4619      	mov	r1, r3
    a534:	68f8      	ldr	r0, [r7, #12]
    a536:	4b0d      	ldr	r3, [pc, #52]	; (a56c <_usb_d_dev_ep_stall+0x84>)
    a538:	4798      	blx	r3
    a53a:	6178      	str	r0, [r7, #20]
    a53c:	e00f      	b.n	a55e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a53e:	79bb      	ldrb	r3, [r7, #6]
    a540:	2b00      	cmp	r3, #0
    a542:	d106      	bne.n	a552 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a544:	7cbb      	ldrb	r3, [r7, #18]
    a546:	4619      	mov	r1, r3
    a548:	68f8      	ldr	r0, [r7, #12]
    a54a:	4b09      	ldr	r3, [pc, #36]	; (a570 <_usb_d_dev_ep_stall+0x88>)
    a54c:	4798      	blx	r3
    a54e:	6178      	str	r0, [r7, #20]
    a550:	e005      	b.n	a55e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a552:	7cbb      	ldrb	r3, [r7, #18]
    a554:	4619      	mov	r1, r3
    a556:	68f8      	ldr	r0, [r7, #12]
    a558:	4b06      	ldr	r3, [pc, #24]	; (a574 <_usb_d_dev_ep_stall+0x8c>)
    a55a:	4798      	blx	r3
    a55c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a55e:	697b      	ldr	r3, [r7, #20]
}
    a560:	4618      	mov	r0, r3
    a562:	3718      	adds	r7, #24
    a564:	46bd      	mov	sp, r7
    a566:	bd80      	pop	{r7, pc}
    a568:	00008f89 	.word	0x00008f89
    a56c:	0000a3bd 	.word	0x0000a3bd
    a570:	0000a40d 	.word	0x0000a40d
    a574:	0000a38d 	.word	0x0000a38d

0000a578 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a578:	b580      	push	{r7, lr}
    a57a:	b082      	sub	sp, #8
    a57c:	af00      	add	r7, sp, #0
    a57e:	6078      	str	r0, [r7, #4]
    a580:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a582:	687b      	ldr	r3, [r7, #4]
    a584:	7c9b      	ldrb	r3, [r3, #18]
    a586:	2bff      	cmp	r3, #255	; 0xff
    a588:	d014      	beq.n	a5b4 <_usb_d_dev_trans_done+0x3c>
    a58a:	687b      	ldr	r3, [r7, #4]
    a58c:	7cdb      	ldrb	r3, [r3, #19]
    a58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a592:	b2db      	uxtb	r3, r3
    a594:	2b00      	cmp	r3, #0
    a596:	d00d      	beq.n	a5b4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a598:	687a      	ldr	r2, [r7, #4]
    a59a:	7cd3      	ldrb	r3, [r2, #19]
    a59c:	f36f 1386 	bfc	r3, #6, #1
    a5a0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a5a2:	4b06      	ldr	r3, [pc, #24]	; (a5bc <_usb_d_dev_trans_done+0x44>)
    a5a4:	691b      	ldr	r3, [r3, #16]
    a5a6:	687a      	ldr	r2, [r7, #4]
    a5a8:	7c90      	ldrb	r0, [r2, #18]
    a5aa:	687a      	ldr	r2, [r7, #4]
    a5ac:	6892      	ldr	r2, [r2, #8]
    a5ae:	6839      	ldr	r1, [r7, #0]
    a5b0:	4798      	blx	r3
    a5b2:	e000      	b.n	a5b6 <_usb_d_dev_trans_done+0x3e>
		return;
    a5b4:	bf00      	nop
}
    a5b6:	3708      	adds	r7, #8
    a5b8:	46bd      	mov	sp, r7
    a5ba:	bd80      	pop	{r7, pc}
    a5bc:	20002380 	.word	0x20002380

0000a5c0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a5c0:	b580      	push	{r7, lr}
    a5c2:	b086      	sub	sp, #24
    a5c4:	af00      	add	r7, sp, #0
    a5c6:	60f8      	str	r0, [r7, #12]
    a5c8:	460b      	mov	r3, r1
    a5ca:	607a      	str	r2, [r7, #4]
    a5cc:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a5ce:	68fb      	ldr	r3, [r7, #12]
    a5d0:	7c9b      	ldrb	r3, [r3, #18]
    a5d2:	f003 030f 	and.w	r3, r3, #15
    a5d6:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a5d8:	4b1f      	ldr	r3, [pc, #124]	; (a658 <_usb_d_dev_trans_stop+0x98>)
    a5da:	881b      	ldrh	r3, [r3, #0]
    a5dc:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a5de:	68fb      	ldr	r3, [r7, #12]
    a5e0:	7c9b      	ldrb	r3, [r3, #18]
    a5e2:	2bff      	cmp	r3, #255	; 0xff
    a5e4:	d033      	beq.n	a64e <_usb_d_dev_trans_stop+0x8e>
    a5e6:	68fb      	ldr	r3, [r7, #12]
    a5e8:	7cdb      	ldrb	r3, [r3, #19]
    a5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a5ee:	b2db      	uxtb	r3, r3
    a5f0:	2b00      	cmp	r3, #0
    a5f2:	d02c      	beq.n	a64e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a5f4:	7afb      	ldrb	r3, [r7, #11]
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	d006      	beq.n	a608 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a5fa:	7dfb      	ldrb	r3, [r7, #23]
    a5fc:	2200      	movs	r2, #0
    a5fe:	2101      	movs	r1, #1
    a600:	4618      	mov	r0, r3
    a602:	4b16      	ldr	r3, [pc, #88]	; (a65c <_usb_d_dev_trans_stop+0x9c>)
    a604:	4798      	blx	r3
    a606:	e005      	b.n	a614 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a608:	7dfb      	ldrb	r3, [r7, #23]
    a60a:	2200      	movs	r2, #0
    a60c:	2100      	movs	r1, #0
    a60e:	4618      	mov	r0, r3
    a610:	4b13      	ldr	r3, [pc, #76]	; (a660 <_usb_d_dev_trans_stop+0xa0>)
    a612:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a614:	7afb      	ldrb	r3, [r7, #11]
    a616:	f107 0218 	add.w	r2, r7, #24
    a61a:	4413      	add	r3, r2
    a61c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a620:	461a      	mov	r2, r3
    a622:	7dfb      	ldrb	r3, [r7, #23]
    a624:	4611      	mov	r1, r2
    a626:	4618      	mov	r0, r3
    a628:	4b0e      	ldr	r3, [pc, #56]	; (a664 <_usb_d_dev_trans_stop+0xa4>)
    a62a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a62c:	7afb      	ldrb	r3, [r7, #11]
    a62e:	f107 0218 	add.w	r2, r7, #24
    a632:	4413      	add	r3, r2
    a634:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a638:	461a      	mov	r2, r3
    a63a:	7dfb      	ldrb	r3, [r7, #23]
    a63c:	4611      	mov	r1, r2
    a63e:	4618      	mov	r0, r3
    a640:	4b09      	ldr	r3, [pc, #36]	; (a668 <_usb_d_dev_trans_stop+0xa8>)
    a642:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a644:	6879      	ldr	r1, [r7, #4]
    a646:	68f8      	ldr	r0, [r7, #12]
    a648:	4b08      	ldr	r3, [pc, #32]	; (a66c <_usb_d_dev_trans_stop+0xac>)
    a64a:	4798      	blx	r3
    a64c:	e000      	b.n	a650 <_usb_d_dev_trans_stop+0x90>
		return;
    a64e:	bf00      	nop
}
    a650:	3718      	adds	r7, #24
    a652:	46bd      	mov	sp, r7
    a654:	bd80      	pop	{r7, pc}
    a656:	bf00      	nop
    a658:	0000f74c 	.word	0x0000f74c
    a65c:	00008e75 	.word	0x00008e75
    a660:	00008ecd 	.word	0x00008ecd
    a664:	0000897d 	.word	0x0000897d
    a668:	000089cd 	.word	0x000089cd
    a66c:	0000a579 	.word	0x0000a579

0000a670 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a670:	b580      	push	{r7, lr}
    a672:	b086      	sub	sp, #24
    a674:	af00      	add	r7, sp, #0
    a676:	4603      	mov	r3, r0
    a678:	6039      	str	r1, [r7, #0]
    a67a:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a67c:	79fb      	ldrb	r3, [r7, #7]
    a67e:	f003 030f 	and.w	r3, r3, #15
    a682:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a684:	7dfb      	ldrb	r3, [r7, #23]
    a686:	015b      	lsls	r3, r3, #5
    a688:	4a1e      	ldr	r2, [pc, #120]	; (a704 <_usb_d_dev_ep_read_req+0x94>)
    a68a:	4413      	add	r3, r2
    a68c:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a68e:	693b      	ldr	r3, [r7, #16]
    a690:	681b      	ldr	r3, [r3, #0]
    a692:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a694:	693b      	ldr	r3, [r7, #16]
    a696:	685b      	ldr	r3, [r3, #4]
    a698:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a69c:	b29b      	uxth	r3, r3
    a69e:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a6a0:	7dfb      	ldrb	r3, [r7, #23]
    a6a2:	2b04      	cmp	r3, #4
    a6a4:	d802      	bhi.n	a6ac <_usb_d_dev_ep_read_req+0x3c>
    a6a6:	683b      	ldr	r3, [r7, #0]
    a6a8:	2b00      	cmp	r3, #0
    a6aa:	d102      	bne.n	a6b2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a6ac:	f06f 0311 	mvn.w	r3, #17
    a6b0:	e023      	b.n	a6fa <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a6b2:	7dfb      	ldrb	r3, [r7, #23]
    a6b4:	4618      	mov	r0, r3
    a6b6:	4b14      	ldr	r3, [pc, #80]	; (a708 <_usb_d_dev_ep_read_req+0x98>)
    a6b8:	4798      	blx	r3
    a6ba:	4603      	mov	r3, r0
    a6bc:	f083 0301 	eor.w	r3, r3, #1
    a6c0:	b2db      	uxtb	r3, r3
    a6c2:	2b00      	cmp	r3, #0
    a6c4:	d002      	beq.n	a6cc <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a6c6:	f06f 0312 	mvn.w	r3, #18
    a6ca:	e016      	b.n	a6fa <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a6cc:	7dfb      	ldrb	r3, [r7, #23]
    a6ce:	4618      	mov	r0, r3
    a6d0:	4b0e      	ldr	r3, [pc, #56]	; (a70c <_usb_d_dev_ep_read_req+0x9c>)
    a6d2:	4798      	blx	r3
    a6d4:	4603      	mov	r3, r0
    a6d6:	f083 0301 	eor.w	r3, r3, #1
    a6da:	b2db      	uxtb	r3, r3
    a6dc:	2b00      	cmp	r3, #0
    a6de:	d001      	beq.n	a6e4 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a6e0:	2300      	movs	r3, #0
    a6e2:	e00a      	b.n	a6fa <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a6e4:	68fb      	ldr	r3, [r7, #12]
    a6e6:	2208      	movs	r2, #8
    a6e8:	4619      	mov	r1, r3
    a6ea:	6838      	ldr	r0, [r7, #0]
    a6ec:	4b08      	ldr	r3, [pc, #32]	; (a710 <_usb_d_dev_ep_read_req+0xa0>)
    a6ee:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a6f0:	7dfb      	ldrb	r3, [r7, #23]
    a6f2:	4618      	mov	r0, r3
    a6f4:	4b07      	ldr	r3, [pc, #28]	; (a714 <_usb_d_dev_ep_read_req+0xa4>)
    a6f6:	4798      	blx	r3

	return bytes;
    a6f8:	897b      	ldrh	r3, [r7, #10]
}
    a6fa:	4618      	mov	r0, r3
    a6fc:	3718      	adds	r7, #24
    a6fe:	46bd      	mov	sp, r7
    a700:	bd80      	pop	{r7, pc}
    a702:	bf00      	nop
    a704:	20002448 	.word	0x20002448
    a708:	000089f5 	.word	0x000089f5
    a70c:	00008ba1 	.word	0x00008ba1
    a710:	0000ef71 	.word	0x0000ef71
    a714:	00008bd1 	.word	0x00008bd1

0000a718 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a718:	b580      	push	{r7, lr}
    a71a:	b086      	sub	sp, #24
    a71c:	af00      	add	r7, sp, #0
    a71e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a720:	687b      	ldr	r3, [r7, #4]
    a722:	7a1b      	ldrb	r3, [r3, #8]
    a724:	f003 030f 	and.w	r3, r3, #15
    a728:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a72a:	687b      	ldr	r3, [r7, #4]
    a72c:	7a1b      	ldrb	r3, [r3, #8]
    a72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a732:	2b00      	cmp	r3, #0
    a734:	bf14      	ite	ne
    a736:	2301      	movne	r3, #1
    a738:	2300      	moveq	r3, #0
    a73a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a73c:	7d7a      	ldrb	r2, [r7, #21]
    a73e:	7dbb      	ldrb	r3, [r7, #22]
    a740:	4611      	mov	r1, r2
    a742:	4618      	mov	r0, r3
    a744:	4b5f      	ldr	r3, [pc, #380]	; (a8c4 <_usb_d_dev_ep_trans+0x1ac>)
    a746:	4798      	blx	r3
    a748:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a74a:	693b      	ldr	r3, [r7, #16]
    a74c:	8a1b      	ldrh	r3, [r3, #16]
    a74e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a752:	4293      	cmp	r3, r2
    a754:	d004      	beq.n	a760 <_usb_d_dev_ep_trans+0x48>
    a756:	693b      	ldr	r3, [r7, #16]
    a758:	8a1b      	ldrh	r3, [r3, #16]
    a75a:	3b01      	subs	r3, #1
    a75c:	b29b      	uxth	r3, r3
    a75e:	e001      	b.n	a764 <_usb_d_dev_ep_trans+0x4c>
    a760:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a764:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a766:	687b      	ldr	r3, [r7, #4]
    a768:	685a      	ldr	r2, [r3, #4]
    a76a:	89fb      	ldrh	r3, [r7, #14]
    a76c:	4013      	ands	r3, r2
    a76e:	2b00      	cmp	r3, #0
    a770:	bf14      	ite	ne
    a772:	2301      	movne	r3, #1
    a774:	2300      	moveq	r3, #0
    a776:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a778:	2300      	movs	r3, #0
    a77a:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a77c:	7dbb      	ldrb	r3, [r7, #22]
    a77e:	2b04      	cmp	r3, #4
    a780:	d902      	bls.n	a788 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a782:	f06f 0311 	mvn.w	r3, #17
    a786:	e098      	b.n	a8ba <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a788:	687b      	ldr	r3, [r7, #4]
    a78a:	681b      	ldr	r3, [r3, #0]
    a78c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a790:	d31a      	bcc.n	a7c8 <_usb_d_dev_ep_trans+0xb0>
    a792:	687b      	ldr	r3, [r7, #4]
    a794:	681b      	ldr	r3, [r3, #0]
    a796:	461a      	mov	r2, r3
    a798:	687b      	ldr	r3, [r7, #4]
    a79a:	685b      	ldr	r3, [r3, #4]
    a79c:	4413      	add	r3, r2
    a79e:	4a4a      	ldr	r2, [pc, #296]	; (a8c8 <_usb_d_dev_ep_trans+0x1b0>)
    a7a0:	4293      	cmp	r3, r2
    a7a2:	d811      	bhi.n	a7c8 <_usb_d_dev_ep_trans+0xb0>
    a7a4:	687b      	ldr	r3, [r7, #4]
    a7a6:	681b      	ldr	r3, [r3, #0]
    a7a8:	f003 0303 	and.w	r3, r3, #3
    a7ac:	2b00      	cmp	r3, #0
    a7ae:	d10b      	bne.n	a7c8 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a7b0:	7d7b      	ldrb	r3, [r7, #21]
    a7b2:	f083 0301 	eor.w	r3, r3, #1
    a7b6:	b2db      	uxtb	r3, r3
    a7b8:	2b00      	cmp	r3, #0
    a7ba:	d00e      	beq.n	a7da <_usb_d_dev_ep_trans+0xc2>
    a7bc:	687b      	ldr	r3, [r7, #4]
    a7be:	685b      	ldr	r3, [r3, #4]
    a7c0:	693a      	ldr	r2, [r7, #16]
    a7c2:	8a12      	ldrh	r2, [r2, #16]
    a7c4:	4293      	cmp	r3, r2
    a7c6:	d208      	bcs.n	a7da <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a7c8:	693b      	ldr	r3, [r7, #16]
    a7ca:	68db      	ldr	r3, [r3, #12]
    a7cc:	2b00      	cmp	r3, #0
    a7ce:	d102      	bne.n	a7d6 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a7d0:	f06f 0312 	mvn.w	r3, #18
    a7d4:	e071      	b.n	a8ba <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a7d6:	2301      	movs	r3, #1
    a7d8:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a7da:	7d7b      	ldrb	r3, [r7, #21]
    a7dc:	f083 0301 	eor.w	r3, r3, #1
    a7e0:	b2db      	uxtb	r3, r3
    a7e2:	2b00      	cmp	r3, #0
    a7e4:	d009      	beq.n	a7fa <_usb_d_dev_ep_trans+0xe2>
    a7e6:	7b7b      	ldrb	r3, [r7, #13]
    a7e8:	2b00      	cmp	r3, #0
    a7ea:	d006      	beq.n	a7fa <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a7ec:	693b      	ldr	r3, [r7, #16]
    a7ee:	68db      	ldr	r3, [r3, #12]
    a7f0:	2b00      	cmp	r3, #0
    a7f2:	d102      	bne.n	a7fa <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a7f4:	f06f 0311 	mvn.w	r3, #17
    a7f8:	e05f      	b.n	a8ba <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a7fa:	693b      	ldr	r3, [r7, #16]
    a7fc:	7cdb      	ldrb	r3, [r3, #19]
    a7fe:	f003 0308 	and.w	r3, r3, #8
    a802:	b2db      	uxtb	r3, r3
    a804:	2b00      	cmp	r3, #0
    a806:	d001      	beq.n	a80c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a808:	2302      	movs	r3, #2
    a80a:	e056      	b.n	a8ba <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a80c:	f107 0308 	add.w	r3, r7, #8
    a810:	4618      	mov	r0, r3
    a812:	4b2e      	ldr	r3, [pc, #184]	; (a8cc <_usb_d_dev_ep_trans+0x1b4>)
    a814:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a816:	693b      	ldr	r3, [r7, #16]
    a818:	7cdb      	ldrb	r3, [r3, #19]
    a81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a81e:	b2db      	uxtb	r3, r3
    a820:	2b00      	cmp	r3, #0
    a822:	d006      	beq.n	a832 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a824:	f107 0308 	add.w	r3, r7, #8
    a828:	4618      	mov	r0, r3
    a82a:	4b29      	ldr	r3, [pc, #164]	; (a8d0 <_usb_d_dev_ep_trans+0x1b8>)
    a82c:	4798      	blx	r3
		return USB_BUSY;
    a82e:	2301      	movs	r3, #1
    a830:	e043      	b.n	a8ba <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a832:	693a      	ldr	r2, [r7, #16]
    a834:	7cd3      	ldrb	r3, [r2, #19]
    a836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a83a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a83c:	f107 0308 	add.w	r3, r7, #8
    a840:	4618      	mov	r0, r3
    a842:	4b23      	ldr	r3, [pc, #140]	; (a8d0 <_usb_d_dev_ep_trans+0x1b8>)
    a844:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a846:	687b      	ldr	r3, [r7, #4]
    a848:	681a      	ldr	r2, [r3, #0]
    a84a:	693b      	ldr	r3, [r7, #16]
    a84c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a84e:	687b      	ldr	r3, [r7, #4]
    a850:	685a      	ldr	r2, [r3, #4]
    a852:	693b      	ldr	r3, [r7, #16]
    a854:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a856:	693b      	ldr	r3, [r7, #16]
    a858:	2200      	movs	r2, #0
    a85a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a85c:	693a      	ldr	r2, [r7, #16]
    a85e:	7cd3      	ldrb	r3, [r2, #19]
    a860:	7d79      	ldrb	r1, [r7, #21]
    a862:	f361 13c7 	bfi	r3, r1, #7, #1
    a866:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a868:	693a      	ldr	r2, [r7, #16]
    a86a:	7cd3      	ldrb	r3, [r2, #19]
    a86c:	7df9      	ldrb	r1, [r7, #23]
    a86e:	f361 1345 	bfi	r3, r1, #5, #1
    a872:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a874:	687b      	ldr	r3, [r7, #4]
    a876:	7a5b      	ldrb	r3, [r3, #9]
    a878:	2b00      	cmp	r3, #0
    a87a:	d007      	beq.n	a88c <_usb_d_dev_ep_trans+0x174>
    a87c:	7b7b      	ldrb	r3, [r7, #13]
    a87e:	f083 0301 	eor.w	r3, r3, #1
    a882:	b2db      	uxtb	r3, r3
    a884:	2b00      	cmp	r3, #0
    a886:	d001      	beq.n	a88c <_usb_d_dev_ep_trans+0x174>
    a888:	2301      	movs	r3, #1
    a88a:	e000      	b.n	a88e <_usb_d_dev_ep_trans+0x176>
    a88c:	2300      	movs	r3, #0
    a88e:	b2db      	uxtb	r3, r3
    a890:	f003 0301 	and.w	r3, r3, #1
    a894:	b2d9      	uxtb	r1, r3
    a896:	693a      	ldr	r2, [r7, #16]
    a898:	7cd3      	ldrb	r3, [r2, #19]
    a89a:	f361 1304 	bfi	r3, r1, #4, #1
    a89e:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a8a0:	7d7b      	ldrb	r3, [r7, #21]
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	d004      	beq.n	a8b0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a8a6:	2100      	movs	r1, #0
    a8a8:	6938      	ldr	r0, [r7, #16]
    a8aa:	4b0a      	ldr	r3, [pc, #40]	; (a8d4 <_usb_d_dev_ep_trans+0x1bc>)
    a8ac:	4798      	blx	r3
    a8ae:	e003      	b.n	a8b8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a8b0:	2100      	movs	r1, #0
    a8b2:	6938      	ldr	r0, [r7, #16]
    a8b4:	4b08      	ldr	r3, [pc, #32]	; (a8d8 <_usb_d_dev_ep_trans+0x1c0>)
    a8b6:	4798      	blx	r3
	}

	return ERR_NONE;
    a8b8:	2300      	movs	r3, #0
}
    a8ba:	4618      	mov	r0, r3
    a8bc:	3718      	adds	r7, #24
    a8be:	46bd      	mov	sp, r7
    a8c0:	bd80      	pop	{r7, pc}
    a8c2:	bf00      	nop
    a8c4:	00008f89 	.word	0x00008f89
    a8c8:	20041fff 	.word	0x20041fff
    a8cc:	0000b0e5 	.word	0x0000b0e5
    a8d0:	0000b10b 	.word	0x0000b10b
    a8d4:	00009251 	.word	0x00009251
    a8d8:	00009469 	.word	0x00009469

0000a8dc <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    a8dc:	b580      	push	{r7, lr}
    a8de:	b084      	sub	sp, #16
    a8e0:	af00      	add	r7, sp, #0
    a8e2:	4603      	mov	r3, r0
    a8e4:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    a8e6:	79fb      	ldrb	r3, [r7, #7]
    a8e8:	f003 030f 	and.w	r3, r3, #15
    a8ec:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    a8ee:	79fb      	ldrb	r3, [r7, #7]
    a8f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a8f4:	2b00      	cmp	r3, #0
    a8f6:	bf14      	ite	ne
    a8f8:	2301      	movne	r3, #1
    a8fa:	2300      	moveq	r3, #0
    a8fc:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a8fe:	7bba      	ldrb	r2, [r7, #14]
    a900:	7bfb      	ldrb	r3, [r7, #15]
    a902:	4611      	mov	r1, r2
    a904:	4618      	mov	r0, r3
    a906:	4b08      	ldr	r3, [pc, #32]	; (a928 <_usb_d_dev_ep_abort+0x4c>)
    a908:	4798      	blx	r3
    a90a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    a90c:	7bfb      	ldrb	r3, [r7, #15]
    a90e:	2b04      	cmp	r3, #4
    a910:	d806      	bhi.n	a920 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    a912:	7bbb      	ldrb	r3, [r7, #14]
    a914:	2202      	movs	r2, #2
    a916:	4619      	mov	r1, r3
    a918:	68b8      	ldr	r0, [r7, #8]
    a91a:	4b04      	ldr	r3, [pc, #16]	; (a92c <_usb_d_dev_ep_abort+0x50>)
    a91c:	4798      	blx	r3
    a91e:	e000      	b.n	a922 <_usb_d_dev_ep_abort+0x46>
		return;
    a920:	bf00      	nop
}
    a922:	3710      	adds	r7, #16
    a924:	46bd      	mov	sp, r7
    a926:	bd80      	pop	{r7, pc}
    a928:	00008f89 	.word	0x00008f89
    a92c:	0000a5c1 	.word	0x0000a5c1

0000a930 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a930:	b480      	push	{r7}
    a932:	b085      	sub	sp, #20
    a934:	af00      	add	r7, sp, #0
    a936:	4603      	mov	r3, r0
    a938:	6039      	str	r1, [r7, #0]
    a93a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a93c:	683b      	ldr	r3, [r7, #0]
    a93e:	2b00      	cmp	r3, #0
    a940:	d001      	beq.n	a946 <_usb_d_dev_register_callback+0x16>
    a942:	683b      	ldr	r3, [r7, #0]
    a944:	e000      	b.n	a948 <_usb_d_dev_register_callback+0x18>
    a946:	4b0a      	ldr	r3, [pc, #40]	; (a970 <_usb_d_dev_register_callback+0x40>)
    a948:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a94a:	79fb      	ldrb	r3, [r7, #7]
    a94c:	2b01      	cmp	r3, #1
    a94e:	d103      	bne.n	a958 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a950:	4a08      	ldr	r2, [pc, #32]	; (a974 <_usb_d_dev_register_callback+0x44>)
    a952:	68fb      	ldr	r3, [r7, #12]
    a954:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a956:	e005      	b.n	a964 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a958:	79fb      	ldrb	r3, [r7, #7]
    a95a:	2b00      	cmp	r3, #0
    a95c:	d102      	bne.n	a964 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a95e:	4a05      	ldr	r2, [pc, #20]	; (a974 <_usb_d_dev_register_callback+0x44>)
    a960:	68fb      	ldr	r3, [r7, #12]
    a962:	6013      	str	r3, [r2, #0]
}
    a964:	bf00      	nop
    a966:	3714      	adds	r7, #20
    a968:	46bd      	mov	sp, r7
    a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a96e:	4770      	bx	lr
    a970:	00008811 	.word	0x00008811
    a974:	20002380 	.word	0x20002380

0000a978 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a978:	b480      	push	{r7}
    a97a:	b085      	sub	sp, #20
    a97c:	af00      	add	r7, sp, #0
    a97e:	4603      	mov	r3, r0
    a980:	6039      	str	r1, [r7, #0]
    a982:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a984:	683b      	ldr	r3, [r7, #0]
    a986:	2b00      	cmp	r3, #0
    a988:	d001      	beq.n	a98e <_usb_d_dev_register_ep_callback+0x16>
    a98a:	683b      	ldr	r3, [r7, #0]
    a98c:	e000      	b.n	a990 <_usb_d_dev_register_ep_callback+0x18>
    a98e:	4b0e      	ldr	r3, [pc, #56]	; (a9c8 <_usb_d_dev_register_ep_callback+0x50>)
    a990:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a992:	79fb      	ldrb	r3, [r7, #7]
    a994:	2b00      	cmp	r3, #0
    a996:	d103      	bne.n	a9a0 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a998:	4a0c      	ldr	r2, [pc, #48]	; (a9cc <_usb_d_dev_register_ep_callback+0x54>)
    a99a:	68fb      	ldr	r3, [r7, #12]
    a99c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a99e:	e00c      	b.n	a9ba <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a9a0:	79fb      	ldrb	r3, [r7, #7]
    a9a2:	2b01      	cmp	r3, #1
    a9a4:	d103      	bne.n	a9ae <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a9a6:	4a09      	ldr	r2, [pc, #36]	; (a9cc <_usb_d_dev_register_ep_callback+0x54>)
    a9a8:	68fb      	ldr	r3, [r7, #12]
    a9aa:	60d3      	str	r3, [r2, #12]
}
    a9ac:	e005      	b.n	a9ba <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a9ae:	79fb      	ldrb	r3, [r7, #7]
    a9b0:	2b02      	cmp	r3, #2
    a9b2:	d102      	bne.n	a9ba <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a9b4:	4a05      	ldr	r2, [pc, #20]	; (a9cc <_usb_d_dev_register_ep_callback+0x54>)
    a9b6:	68fb      	ldr	r3, [r7, #12]
    a9b8:	6113      	str	r3, [r2, #16]
}
    a9ba:	bf00      	nop
    a9bc:	3714      	adds	r7, #20
    a9be:	46bd      	mov	sp, r7
    a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9c4:	4770      	bx	lr
    a9c6:	bf00      	nop
    a9c8:	00008811 	.word	0x00008811
    a9cc:	20002380 	.word	0x20002380

0000a9d0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a9d0:	b580      	push	{r7, lr}
    a9d2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a9d4:	4b01      	ldr	r3, [pc, #4]	; (a9dc <USB_0_Handler+0xc>)
    a9d6:	4798      	blx	r3
}
    a9d8:	bf00      	nop
    a9da:	bd80      	pop	{r7, pc}
    a9dc:	00009c41 	.word	0x00009c41

0000a9e0 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a9e0:	b580      	push	{r7, lr}
    a9e2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a9e4:	4b01      	ldr	r3, [pc, #4]	; (a9ec <USB_1_Handler+0xc>)
    a9e6:	4798      	blx	r3
}
    a9e8:	bf00      	nop
    a9ea:	bd80      	pop	{r7, pc}
    a9ec:	00009c41 	.word	0x00009c41

0000a9f0 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a9f0:	b580      	push	{r7, lr}
    a9f2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a9f4:	4b01      	ldr	r3, [pc, #4]	; (a9fc <USB_2_Handler+0xc>)
    a9f6:	4798      	blx	r3
}
    a9f8:	bf00      	nop
    a9fa:	bd80      	pop	{r7, pc}
    a9fc:	00009c41 	.word	0x00009c41

0000aa00 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    aa00:	b580      	push	{r7, lr}
    aa02:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aa04:	4b01      	ldr	r3, [pc, #4]	; (aa0c <USB_3_Handler+0xc>)
    aa06:	4798      	blx	r3
}
    aa08:	bf00      	nop
    aa0a:	bd80      	pop	{r7, pc}
    aa0c:	00009c41 	.word	0x00009c41

0000aa10 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    aa10:	b480      	push	{r7}
    aa12:	b083      	sub	sp, #12
    aa14:	af00      	add	r7, sp, #0
    aa16:	6078      	str	r0, [r7, #4]
    aa18:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    aa1a:	bf00      	nop
    aa1c:	687b      	ldr	r3, [r7, #4]
    aa1e:	689a      	ldr	r2, [r3, #8]
    aa20:	683b      	ldr	r3, [r7, #0]
    aa22:	4013      	ands	r3, r2
    aa24:	2b00      	cmp	r3, #0
    aa26:	d1f9      	bne.n	aa1c <hri_wdt_wait_for_sync+0xc>
	};
}
    aa28:	bf00      	nop
    aa2a:	370c      	adds	r7, #12
    aa2c:	46bd      	mov	sp, r7
    aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa32:	4770      	bx	lr

0000aa34 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    aa34:	b580      	push	{r7, lr}
    aa36:	b084      	sub	sp, #16
    aa38:	af00      	add	r7, sp, #0
    aa3a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aa3c:	210e      	movs	r1, #14
    aa3e:	6878      	ldr	r0, [r7, #4]
    aa40:	4b0a      	ldr	r3, [pc, #40]	; (aa6c <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    aa42:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    aa44:	687b      	ldr	r3, [r7, #4]
    aa46:	781b      	ldrb	r3, [r3, #0]
    aa48:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    aa4a:	7bfb      	ldrb	r3, [r7, #15]
    aa4c:	085b      	lsrs	r3, r3, #1
    aa4e:	b2db      	uxtb	r3, r3
    aa50:	f003 0301 	and.w	r3, r3, #1
    aa54:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    aa56:	7bfb      	ldrb	r3, [r7, #15]
    aa58:	2b00      	cmp	r3, #0
    aa5a:	bf14      	ite	ne
    aa5c:	2301      	movne	r3, #1
    aa5e:	2300      	moveq	r3, #0
    aa60:	b2db      	uxtb	r3, r3
}
    aa62:	4618      	mov	r0, r3
    aa64:	3710      	adds	r7, #16
    aa66:	46bd      	mov	sp, r7
    aa68:	bd80      	pop	{r7, pc}
    aa6a:	bf00      	nop
    aa6c:	0000aa11 	.word	0x0000aa11

0000aa70 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    aa70:	b580      	push	{r7, lr}
    aa72:	b082      	sub	sp, #8
    aa74:	af00      	add	r7, sp, #0
    aa76:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    aa78:	687b      	ldr	r3, [r7, #4]
    aa7a:	781b      	ldrb	r3, [r3, #0]
    aa7c:	b2db      	uxtb	r3, r3
    aa7e:	f023 0304 	bic.w	r3, r3, #4
    aa82:	b2da      	uxtb	r2, r3
    aa84:	687b      	ldr	r3, [r7, #4]
    aa86:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aa88:	210e      	movs	r1, #14
    aa8a:	6878      	ldr	r0, [r7, #4]
    aa8c:	4b02      	ldr	r3, [pc, #8]	; (aa98 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    aa8e:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    aa90:	bf00      	nop
    aa92:	3708      	adds	r7, #8
    aa94:	46bd      	mov	sp, r7
    aa96:	bd80      	pop	{r7, pc}
    aa98:	0000aa11 	.word	0x0000aa11

0000aa9c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    aa9c:	b580      	push	{r7, lr}
    aa9e:	b084      	sub	sp, #16
    aaa0:	af00      	add	r7, sp, #0
    aaa2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aaa4:	210e      	movs	r1, #14
    aaa6:	6878      	ldr	r0, [r7, #4]
    aaa8:	4b08      	ldr	r3, [pc, #32]	; (aacc <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    aaaa:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    aaac:	687b      	ldr	r3, [r7, #4]
    aaae:	781b      	ldrb	r3, [r3, #0]
    aab0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    aab2:	7bfb      	ldrb	r3, [r7, #15]
    aab4:	09db      	lsrs	r3, r3, #7
    aab6:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    aab8:	7bfb      	ldrb	r3, [r7, #15]
    aaba:	2b00      	cmp	r3, #0
    aabc:	bf14      	ite	ne
    aabe:	2301      	movne	r3, #1
    aac0:	2300      	moveq	r3, #0
    aac2:	b2db      	uxtb	r3, r3
}
    aac4:	4618      	mov	r0, r3
    aac6:	3710      	adds	r7, #16
    aac8:	46bd      	mov	sp, r7
    aaca:	bd80      	pop	{r7, pc}
    aacc:	0000aa11 	.word	0x0000aa11

0000aad0 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    aad0:	b480      	push	{r7}
    aad2:	b085      	sub	sp, #20
    aad4:	af00      	add	r7, sp, #0
    aad6:	6078      	str	r0, [r7, #4]
    aad8:	460b      	mov	r3, r1
    aada:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    aadc:	687b      	ldr	r3, [r7, #4]
    aade:	785b      	ldrb	r3, [r3, #1]
    aae0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    aae2:	7bfb      	ldrb	r3, [r7, #15]
    aae4:	f023 030f 	bic.w	r3, r3, #15
    aae8:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    aaea:	78fb      	ldrb	r3, [r7, #3]
    aaec:	f003 030f 	and.w	r3, r3, #15
    aaf0:	b2da      	uxtb	r2, r3
    aaf2:	7bfb      	ldrb	r3, [r7, #15]
    aaf4:	4313      	orrs	r3, r2
    aaf6:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    aaf8:	687b      	ldr	r3, [r7, #4]
    aafa:	7bfa      	ldrb	r2, [r7, #15]
    aafc:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    aafe:	bf00      	nop
    ab00:	3714      	adds	r7, #20
    ab02:	46bd      	mov	sp, r7
    ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab08:	4770      	bx	lr
	...

0000ab0c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    ab0c:	b580      	push	{r7, lr}
    ab0e:	b082      	sub	sp, #8
    ab10:	af00      	add	r7, sp, #0
    ab12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ab14:	687b      	ldr	r3, [r7, #4]
    ab16:	2b00      	cmp	r3, #0
    ab18:	d005      	beq.n	ab26 <_wdt_init+0x1a>
    ab1a:	687b      	ldr	r3, [r7, #4]
    ab1c:	681b      	ldr	r3, [r3, #0]
    ab1e:	2b00      	cmp	r3, #0
    ab20:	d001      	beq.n	ab26 <_wdt_init+0x1a>
    ab22:	2301      	movs	r3, #1
    ab24:	e000      	b.n	ab28 <_wdt_init+0x1c>
    ab26:	2300      	movs	r3, #0
    ab28:	f003 0301 	and.w	r3, r3, #1
    ab2c:	b2db      	uxtb	r3, r3
    ab2e:	2250      	movs	r2, #80	; 0x50
    ab30:	4913      	ldr	r1, [pc, #76]	; (ab80 <_wdt_init+0x74>)
    ab32:	4618      	mov	r0, r3
    ab34:	4b13      	ldr	r3, [pc, #76]	; (ab84 <_wdt_init+0x78>)
    ab36:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ab38:	687b      	ldr	r3, [r7, #4]
    ab3a:	681b      	ldr	r3, [r3, #0]
    ab3c:	4618      	mov	r0, r3
    ab3e:	4b12      	ldr	r3, [pc, #72]	; (ab88 <_wdt_init+0x7c>)
    ab40:	4798      	blx	r3
    ab42:	4603      	mov	r3, r0
    ab44:	2b00      	cmp	r3, #0
    ab46:	d107      	bne.n	ab58 <_wdt_init+0x4c>
    ab48:	687b      	ldr	r3, [r7, #4]
    ab4a:	681b      	ldr	r3, [r3, #0]
    ab4c:	4618      	mov	r0, r3
    ab4e:	4b0f      	ldr	r3, [pc, #60]	; (ab8c <_wdt_init+0x80>)
    ab50:	4798      	blx	r3
    ab52:	4603      	mov	r3, r0
    ab54:	2b00      	cmp	r3, #0
    ab56:	d002      	beq.n	ab5e <_wdt_init+0x52>
		return ERR_DENIED;
    ab58:	f06f 0310 	mvn.w	r3, #16
    ab5c:	e00b      	b.n	ab76 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    ab5e:	687b      	ldr	r3, [r7, #4]
    ab60:	681b      	ldr	r3, [r3, #0]
    ab62:	4618      	mov	r0, r3
    ab64:	4b0a      	ldr	r3, [pc, #40]	; (ab90 <_wdt_init+0x84>)
    ab66:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ab68:	687b      	ldr	r3, [r7, #4]
    ab6a:	681b      	ldr	r3, [r3, #0]
    ab6c:	210b      	movs	r1, #11
    ab6e:	4618      	mov	r0, r3
    ab70:	4b08      	ldr	r3, [pc, #32]	; (ab94 <_wdt_init+0x88>)
    ab72:	4798      	blx	r3
	}

	return ERR_NONE;
    ab74:	2300      	movs	r3, #0
}
    ab76:	4618      	mov	r0, r3
    ab78:	3708      	adds	r7, #8
    ab7a:	46bd      	mov	sp, r7
    ab7c:	bd80      	pop	{r7, pc}
    ab7e:	bf00      	nop
    ab80:	0000f750 	.word	0x0000f750
    ab84:	00003719 	.word	0x00003719
    ab88:	0000aa9d 	.word	0x0000aa9d
    ab8c:	0000aa35 	.word	0x0000aa35
    ab90:	0000aa71 	.word	0x0000aa71
    ab94:	0000aad1 	.word	0x0000aad1

0000ab98 <hri_port_set_DIR_reg>:
{
    ab98:	b480      	push	{r7}
    ab9a:	b085      	sub	sp, #20
    ab9c:	af00      	add	r7, sp, #0
    ab9e:	60f8      	str	r0, [r7, #12]
    aba0:	460b      	mov	r3, r1
    aba2:	607a      	str	r2, [r7, #4]
    aba4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    aba6:	7afb      	ldrb	r3, [r7, #11]
    aba8:	68fa      	ldr	r2, [r7, #12]
    abaa:	01db      	lsls	r3, r3, #7
    abac:	4413      	add	r3, r2
    abae:	3308      	adds	r3, #8
    abb0:	687a      	ldr	r2, [r7, #4]
    abb2:	601a      	str	r2, [r3, #0]
}
    abb4:	bf00      	nop
    abb6:	3714      	adds	r7, #20
    abb8:	46bd      	mov	sp, r7
    abba:	f85d 7b04 	ldr.w	r7, [sp], #4
    abbe:	4770      	bx	lr

0000abc0 <hri_port_clear_DIR_reg>:
{
    abc0:	b480      	push	{r7}
    abc2:	b085      	sub	sp, #20
    abc4:	af00      	add	r7, sp, #0
    abc6:	60f8      	str	r0, [r7, #12]
    abc8:	460b      	mov	r3, r1
    abca:	607a      	str	r2, [r7, #4]
    abcc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    abce:	7afb      	ldrb	r3, [r7, #11]
    abd0:	68fa      	ldr	r2, [r7, #12]
    abd2:	01db      	lsls	r3, r3, #7
    abd4:	4413      	add	r3, r2
    abd6:	3304      	adds	r3, #4
    abd8:	687a      	ldr	r2, [r7, #4]
    abda:	601a      	str	r2, [r3, #0]
}
    abdc:	bf00      	nop
    abde:	3714      	adds	r7, #20
    abe0:	46bd      	mov	sp, r7
    abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    abe6:	4770      	bx	lr

0000abe8 <hri_port_set_OUT_reg>:
{
    abe8:	b480      	push	{r7}
    abea:	b085      	sub	sp, #20
    abec:	af00      	add	r7, sp, #0
    abee:	60f8      	str	r0, [r7, #12]
    abf0:	460b      	mov	r3, r1
    abf2:	607a      	str	r2, [r7, #4]
    abf4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    abf6:	7afb      	ldrb	r3, [r7, #11]
    abf8:	68fa      	ldr	r2, [r7, #12]
    abfa:	01db      	lsls	r3, r3, #7
    abfc:	4413      	add	r3, r2
    abfe:	3318      	adds	r3, #24
    ac00:	687a      	ldr	r2, [r7, #4]
    ac02:	601a      	str	r2, [r3, #0]
}
    ac04:	bf00      	nop
    ac06:	3714      	adds	r7, #20
    ac08:	46bd      	mov	sp, r7
    ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac0e:	4770      	bx	lr

0000ac10 <hri_port_clear_OUT_reg>:
{
    ac10:	b480      	push	{r7}
    ac12:	b085      	sub	sp, #20
    ac14:	af00      	add	r7, sp, #0
    ac16:	60f8      	str	r0, [r7, #12]
    ac18:	460b      	mov	r3, r1
    ac1a:	607a      	str	r2, [r7, #4]
    ac1c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ac1e:	7afb      	ldrb	r3, [r7, #11]
    ac20:	68fa      	ldr	r2, [r7, #12]
    ac22:	01db      	lsls	r3, r3, #7
    ac24:	4413      	add	r3, r2
    ac26:	3314      	adds	r3, #20
    ac28:	687a      	ldr	r2, [r7, #4]
    ac2a:	601a      	str	r2, [r3, #0]
}
    ac2c:	bf00      	nop
    ac2e:	3714      	adds	r7, #20
    ac30:	46bd      	mov	sp, r7
    ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac36:	4770      	bx	lr

0000ac38 <hri_port_write_PMUX_PMUXE_bf>:
{
    ac38:	b480      	push	{r7}
    ac3a:	b085      	sub	sp, #20
    ac3c:	af00      	add	r7, sp, #0
    ac3e:	6078      	str	r0, [r7, #4]
    ac40:	4608      	mov	r0, r1
    ac42:	4611      	mov	r1, r2
    ac44:	461a      	mov	r2, r3
    ac46:	4603      	mov	r3, r0
    ac48:	70fb      	strb	r3, [r7, #3]
    ac4a:	460b      	mov	r3, r1
    ac4c:	70bb      	strb	r3, [r7, #2]
    ac4e:	4613      	mov	r3, r2
    ac50:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ac52:	78fa      	ldrb	r2, [r7, #3]
    ac54:	78bb      	ldrb	r3, [r7, #2]
    ac56:	6879      	ldr	r1, [r7, #4]
    ac58:	01d2      	lsls	r2, r2, #7
    ac5a:	440a      	add	r2, r1
    ac5c:	4413      	add	r3, r2
    ac5e:	3330      	adds	r3, #48	; 0x30
    ac60:	781b      	ldrb	r3, [r3, #0]
    ac62:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ac64:	7bfb      	ldrb	r3, [r7, #15]
    ac66:	f023 030f 	bic.w	r3, r3, #15
    ac6a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ac6c:	787b      	ldrb	r3, [r7, #1]
    ac6e:	f003 030f 	and.w	r3, r3, #15
    ac72:	b2da      	uxtb	r2, r3
    ac74:	7bfb      	ldrb	r3, [r7, #15]
    ac76:	4313      	orrs	r3, r2
    ac78:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ac7a:	78fa      	ldrb	r2, [r7, #3]
    ac7c:	78bb      	ldrb	r3, [r7, #2]
    ac7e:	6879      	ldr	r1, [r7, #4]
    ac80:	01d2      	lsls	r2, r2, #7
    ac82:	440a      	add	r2, r1
    ac84:	4413      	add	r3, r2
    ac86:	3330      	adds	r3, #48	; 0x30
    ac88:	7bfa      	ldrb	r2, [r7, #15]
    ac8a:	701a      	strb	r2, [r3, #0]
}
    ac8c:	bf00      	nop
    ac8e:	3714      	adds	r7, #20
    ac90:	46bd      	mov	sp, r7
    ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac96:	4770      	bx	lr

0000ac98 <hri_port_write_PMUX_PMUXO_bf>:
{
    ac98:	b480      	push	{r7}
    ac9a:	b085      	sub	sp, #20
    ac9c:	af00      	add	r7, sp, #0
    ac9e:	6078      	str	r0, [r7, #4]
    aca0:	4608      	mov	r0, r1
    aca2:	4611      	mov	r1, r2
    aca4:	461a      	mov	r2, r3
    aca6:	4603      	mov	r3, r0
    aca8:	70fb      	strb	r3, [r7, #3]
    acaa:	460b      	mov	r3, r1
    acac:	70bb      	strb	r3, [r7, #2]
    acae:	4613      	mov	r3, r2
    acb0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    acb2:	78fa      	ldrb	r2, [r7, #3]
    acb4:	78bb      	ldrb	r3, [r7, #2]
    acb6:	6879      	ldr	r1, [r7, #4]
    acb8:	01d2      	lsls	r2, r2, #7
    acba:	440a      	add	r2, r1
    acbc:	4413      	add	r3, r2
    acbe:	3330      	adds	r3, #48	; 0x30
    acc0:	781b      	ldrb	r3, [r3, #0]
    acc2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    acc4:	7bfb      	ldrb	r3, [r7, #15]
    acc6:	f003 030f 	and.w	r3, r3, #15
    acca:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    accc:	787b      	ldrb	r3, [r7, #1]
    acce:	011b      	lsls	r3, r3, #4
    acd0:	b2da      	uxtb	r2, r3
    acd2:	7bfb      	ldrb	r3, [r7, #15]
    acd4:	4313      	orrs	r3, r2
    acd6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    acd8:	78fa      	ldrb	r2, [r7, #3]
    acda:	78bb      	ldrb	r3, [r7, #2]
    acdc:	6879      	ldr	r1, [r7, #4]
    acde:	01d2      	lsls	r2, r2, #7
    ace0:	440a      	add	r2, r1
    ace2:	4413      	add	r3, r2
    ace4:	3330      	adds	r3, #48	; 0x30
    ace6:	7bfa      	ldrb	r2, [r7, #15]
    ace8:	701a      	strb	r2, [r3, #0]
}
    acea:	bf00      	nop
    acec:	3714      	adds	r7, #20
    acee:	46bd      	mov	sp, r7
    acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    acf4:	4770      	bx	lr

0000acf6 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    acf6:	b480      	push	{r7}
    acf8:	b085      	sub	sp, #20
    acfa:	af00      	add	r7, sp, #0
    acfc:	6078      	str	r0, [r7, #4]
    acfe:	4608      	mov	r0, r1
    ad00:	4611      	mov	r1, r2
    ad02:	461a      	mov	r2, r3
    ad04:	4603      	mov	r3, r0
    ad06:	70fb      	strb	r3, [r7, #3]
    ad08:	460b      	mov	r3, r1
    ad0a:	70bb      	strb	r3, [r7, #2]
    ad0c:	4613      	mov	r3, r2
    ad0e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ad10:	78fa      	ldrb	r2, [r7, #3]
    ad12:	78bb      	ldrb	r3, [r7, #2]
    ad14:	6879      	ldr	r1, [r7, #4]
    ad16:	01d2      	lsls	r2, r2, #7
    ad18:	440a      	add	r2, r1
    ad1a:	4413      	add	r3, r2
    ad1c:	3340      	adds	r3, #64	; 0x40
    ad1e:	781b      	ldrb	r3, [r3, #0]
    ad20:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    ad22:	7bfb      	ldrb	r3, [r7, #15]
    ad24:	f023 0301 	bic.w	r3, r3, #1
    ad28:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    ad2a:	787a      	ldrb	r2, [r7, #1]
    ad2c:	7bfb      	ldrb	r3, [r7, #15]
    ad2e:	4313      	orrs	r3, r2
    ad30:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ad32:	78fa      	ldrb	r2, [r7, #3]
    ad34:	78bb      	ldrb	r3, [r7, #2]
    ad36:	6879      	ldr	r1, [r7, #4]
    ad38:	01d2      	lsls	r2, r2, #7
    ad3a:	440a      	add	r2, r1
    ad3c:	4413      	add	r3, r2
    ad3e:	3340      	adds	r3, #64	; 0x40
    ad40:	7bfa      	ldrb	r2, [r7, #15]
    ad42:	701a      	strb	r2, [r3, #0]
}
    ad44:	bf00      	nop
    ad46:	3714      	adds	r7, #20
    ad48:	46bd      	mov	sp, r7
    ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad4e:	4770      	bx	lr

0000ad50 <hri_port_write_WRCONFIG_reg>:
{
    ad50:	b480      	push	{r7}
    ad52:	b085      	sub	sp, #20
    ad54:	af00      	add	r7, sp, #0
    ad56:	60f8      	str	r0, [r7, #12]
    ad58:	460b      	mov	r3, r1
    ad5a:	607a      	str	r2, [r7, #4]
    ad5c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    ad5e:	7afb      	ldrb	r3, [r7, #11]
    ad60:	68fa      	ldr	r2, [r7, #12]
    ad62:	01db      	lsls	r3, r3, #7
    ad64:	4413      	add	r3, r2
    ad66:	3328      	adds	r3, #40	; 0x28
    ad68:	687a      	ldr	r2, [r7, #4]
    ad6a:	601a      	str	r2, [r3, #0]
}
    ad6c:	bf00      	nop
    ad6e:	3714      	adds	r7, #20
    ad70:	46bd      	mov	sp, r7
    ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad76:	4770      	bx	lr

0000ad78 <_gpio_set_direction>:
{
    ad78:	b580      	push	{r7, lr}
    ad7a:	b082      	sub	sp, #8
    ad7c:	af00      	add	r7, sp, #0
    ad7e:	4603      	mov	r3, r0
    ad80:	6039      	str	r1, [r7, #0]
    ad82:	71fb      	strb	r3, [r7, #7]
    ad84:	4613      	mov	r3, r2
    ad86:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ad88:	79bb      	ldrb	r3, [r7, #6]
    ad8a:	2b01      	cmp	r3, #1
    ad8c:	d01c      	beq.n	adc8 <_gpio_set_direction+0x50>
    ad8e:	2b02      	cmp	r3, #2
    ad90:	d037      	beq.n	ae02 <_gpio_set_direction+0x8a>
    ad92:	2b00      	cmp	r3, #0
    ad94:	d14e      	bne.n	ae34 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ad96:	79fb      	ldrb	r3, [r7, #7]
    ad98:	683a      	ldr	r2, [r7, #0]
    ad9a:	4619      	mov	r1, r3
    ad9c:	482a      	ldr	r0, [pc, #168]	; (ae48 <_gpio_set_direction+0xd0>)
    ad9e:	4b2b      	ldr	r3, [pc, #172]	; (ae4c <_gpio_set_direction+0xd4>)
    ada0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ada2:	683b      	ldr	r3, [r7, #0]
    ada4:	b29b      	uxth	r3, r3
    ada6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    adaa:	79fb      	ldrb	r3, [r7, #7]
    adac:	4619      	mov	r1, r3
    adae:	4826      	ldr	r0, [pc, #152]	; (ae48 <_gpio_set_direction+0xd0>)
    adb0:	4b27      	ldr	r3, [pc, #156]	; (ae50 <_gpio_set_direction+0xd8>)
    adb2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    adb4:	683b      	ldr	r3, [r7, #0]
    adb6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    adb8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    adbc:	79fb      	ldrb	r3, [r7, #7]
    adbe:	4619      	mov	r1, r3
    adc0:	4821      	ldr	r0, [pc, #132]	; (ae48 <_gpio_set_direction+0xd0>)
    adc2:	4b23      	ldr	r3, [pc, #140]	; (ae50 <_gpio_set_direction+0xd8>)
    adc4:	4798      	blx	r3
		break;
    adc6:	e03a      	b.n	ae3e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    adc8:	79fb      	ldrb	r3, [r7, #7]
    adca:	683a      	ldr	r2, [r7, #0]
    adcc:	4619      	mov	r1, r3
    adce:	481e      	ldr	r0, [pc, #120]	; (ae48 <_gpio_set_direction+0xd0>)
    add0:	4b1e      	ldr	r3, [pc, #120]	; (ae4c <_gpio_set_direction+0xd4>)
    add2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    add4:	683b      	ldr	r3, [r7, #0]
    add6:	b29b      	uxth	r3, r3
    add8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    addc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ade0:	79f9      	ldrb	r1, [r7, #7]
    ade2:	461a      	mov	r2, r3
    ade4:	4818      	ldr	r0, [pc, #96]	; (ae48 <_gpio_set_direction+0xd0>)
    ade6:	4b1a      	ldr	r3, [pc, #104]	; (ae50 <_gpio_set_direction+0xd8>)
    ade8:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    adea:	683b      	ldr	r3, [r7, #0]
    adec:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    adee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    adf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    adf6:	79f9      	ldrb	r1, [r7, #7]
    adf8:	461a      	mov	r2, r3
    adfa:	4813      	ldr	r0, [pc, #76]	; (ae48 <_gpio_set_direction+0xd0>)
    adfc:	4b14      	ldr	r3, [pc, #80]	; (ae50 <_gpio_set_direction+0xd8>)
    adfe:	4798      	blx	r3
		break;
    ae00:	e01d      	b.n	ae3e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ae02:	79fb      	ldrb	r3, [r7, #7]
    ae04:	683a      	ldr	r2, [r7, #0]
    ae06:	4619      	mov	r1, r3
    ae08:	480f      	ldr	r0, [pc, #60]	; (ae48 <_gpio_set_direction+0xd0>)
    ae0a:	4b12      	ldr	r3, [pc, #72]	; (ae54 <_gpio_set_direction+0xdc>)
    ae0c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ae0e:	683b      	ldr	r3, [r7, #0]
    ae10:	b29b      	uxth	r3, r3
    ae12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ae16:	79fb      	ldrb	r3, [r7, #7]
    ae18:	4619      	mov	r1, r3
    ae1a:	480b      	ldr	r0, [pc, #44]	; (ae48 <_gpio_set_direction+0xd0>)
    ae1c:	4b0c      	ldr	r3, [pc, #48]	; (ae50 <_gpio_set_direction+0xd8>)
    ae1e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ae20:	683b      	ldr	r3, [r7, #0]
    ae22:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ae24:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ae28:	79fb      	ldrb	r3, [r7, #7]
    ae2a:	4619      	mov	r1, r3
    ae2c:	4806      	ldr	r0, [pc, #24]	; (ae48 <_gpio_set_direction+0xd0>)
    ae2e:	4b08      	ldr	r3, [pc, #32]	; (ae50 <_gpio_set_direction+0xd8>)
    ae30:	4798      	blx	r3
		break;
    ae32:	e004      	b.n	ae3e <_gpio_set_direction+0xc6>
		ASSERT(false);
    ae34:	2246      	movs	r2, #70	; 0x46
    ae36:	4908      	ldr	r1, [pc, #32]	; (ae58 <_gpio_set_direction+0xe0>)
    ae38:	2000      	movs	r0, #0
    ae3a:	4b08      	ldr	r3, [pc, #32]	; (ae5c <_gpio_set_direction+0xe4>)
    ae3c:	4798      	blx	r3
}
    ae3e:	bf00      	nop
    ae40:	3708      	adds	r7, #8
    ae42:	46bd      	mov	sp, r7
    ae44:	bd80      	pop	{r7, pc}
    ae46:	bf00      	nop
    ae48:	41008000 	.word	0x41008000
    ae4c:	0000abc1 	.word	0x0000abc1
    ae50:	0000ad51 	.word	0x0000ad51
    ae54:	0000ab99 	.word	0x0000ab99
    ae58:	0000f768 	.word	0x0000f768
    ae5c:	00003719 	.word	0x00003719

0000ae60 <_gpio_set_level>:
{
    ae60:	b580      	push	{r7, lr}
    ae62:	b082      	sub	sp, #8
    ae64:	af00      	add	r7, sp, #0
    ae66:	4603      	mov	r3, r0
    ae68:	6039      	str	r1, [r7, #0]
    ae6a:	71fb      	strb	r3, [r7, #7]
    ae6c:	4613      	mov	r3, r2
    ae6e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ae70:	79bb      	ldrb	r3, [r7, #6]
    ae72:	2b00      	cmp	r3, #0
    ae74:	d006      	beq.n	ae84 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ae76:	79fb      	ldrb	r3, [r7, #7]
    ae78:	683a      	ldr	r2, [r7, #0]
    ae7a:	4619      	mov	r1, r3
    ae7c:	4806      	ldr	r0, [pc, #24]	; (ae98 <_gpio_set_level+0x38>)
    ae7e:	4b07      	ldr	r3, [pc, #28]	; (ae9c <_gpio_set_level+0x3c>)
    ae80:	4798      	blx	r3
}
    ae82:	e005      	b.n	ae90 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ae84:	79fb      	ldrb	r3, [r7, #7]
    ae86:	683a      	ldr	r2, [r7, #0]
    ae88:	4619      	mov	r1, r3
    ae8a:	4803      	ldr	r0, [pc, #12]	; (ae98 <_gpio_set_level+0x38>)
    ae8c:	4b04      	ldr	r3, [pc, #16]	; (aea0 <_gpio_set_level+0x40>)
    ae8e:	4798      	blx	r3
}
    ae90:	bf00      	nop
    ae92:	3708      	adds	r7, #8
    ae94:	46bd      	mov	sp, r7
    ae96:	bd80      	pop	{r7, pc}
    ae98:	41008000 	.word	0x41008000
    ae9c:	0000abe9 	.word	0x0000abe9
    aea0:	0000ac11 	.word	0x0000ac11

0000aea4 <_gpio_set_pin_function>:
{
    aea4:	b590      	push	{r4, r7, lr}
    aea6:	b085      	sub	sp, #20
    aea8:	af00      	add	r7, sp, #0
    aeaa:	6078      	str	r0, [r7, #4]
    aeac:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    aeae:	687b      	ldr	r3, [r7, #4]
    aeb0:	095b      	lsrs	r3, r3, #5
    aeb2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    aeb4:	687b      	ldr	r3, [r7, #4]
    aeb6:	b2db      	uxtb	r3, r3
    aeb8:	f003 031f 	and.w	r3, r3, #31
    aebc:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    aebe:	683b      	ldr	r3, [r7, #0]
    aec0:	f1b3 3fff 	cmp.w	r3, #4294967295
    aec4:	d106      	bne.n	aed4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    aec6:	7bba      	ldrb	r2, [r7, #14]
    aec8:	7bf9      	ldrb	r1, [r7, #15]
    aeca:	2300      	movs	r3, #0
    aecc:	4812      	ldr	r0, [pc, #72]	; (af18 <_gpio_set_pin_function+0x74>)
    aece:	4c13      	ldr	r4, [pc, #76]	; (af1c <_gpio_set_pin_function+0x78>)
    aed0:	47a0      	blx	r4
}
    aed2:	e01d      	b.n	af10 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    aed4:	7bba      	ldrb	r2, [r7, #14]
    aed6:	7bf9      	ldrb	r1, [r7, #15]
    aed8:	2301      	movs	r3, #1
    aeda:	480f      	ldr	r0, [pc, #60]	; (af18 <_gpio_set_pin_function+0x74>)
    aedc:	4c0f      	ldr	r4, [pc, #60]	; (af1c <_gpio_set_pin_function+0x78>)
    aede:	47a0      	blx	r4
		if (pin & 1) {
    aee0:	7bbb      	ldrb	r3, [r7, #14]
    aee2:	f003 0301 	and.w	r3, r3, #1
    aee6:	2b00      	cmp	r3, #0
    aee8:	d009      	beq.n	aefe <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    aeea:	7bbb      	ldrb	r3, [r7, #14]
    aeec:	085b      	lsrs	r3, r3, #1
    aeee:	b2da      	uxtb	r2, r3
    aef0:	683b      	ldr	r3, [r7, #0]
    aef2:	b2db      	uxtb	r3, r3
    aef4:	7bf9      	ldrb	r1, [r7, #15]
    aef6:	4808      	ldr	r0, [pc, #32]	; (af18 <_gpio_set_pin_function+0x74>)
    aef8:	4c09      	ldr	r4, [pc, #36]	; (af20 <_gpio_set_pin_function+0x7c>)
    aefa:	47a0      	blx	r4
}
    aefc:	e008      	b.n	af10 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    aefe:	7bbb      	ldrb	r3, [r7, #14]
    af00:	085b      	lsrs	r3, r3, #1
    af02:	b2da      	uxtb	r2, r3
    af04:	683b      	ldr	r3, [r7, #0]
    af06:	b2db      	uxtb	r3, r3
    af08:	7bf9      	ldrb	r1, [r7, #15]
    af0a:	4803      	ldr	r0, [pc, #12]	; (af18 <_gpio_set_pin_function+0x74>)
    af0c:	4c05      	ldr	r4, [pc, #20]	; (af24 <_gpio_set_pin_function+0x80>)
    af0e:	47a0      	blx	r4
}
    af10:	bf00      	nop
    af12:	3714      	adds	r7, #20
    af14:	46bd      	mov	sp, r7
    af16:	bd90      	pop	{r4, r7, pc}
    af18:	41008000 	.word	0x41008000
    af1c:	0000acf7 	.word	0x0000acf7
    af20:	0000ac99 	.word	0x0000ac99
    af24:	0000ac39 	.word	0x0000ac39

0000af28 <gpio_set_pin_function>:
{
    af28:	b580      	push	{r7, lr}
    af2a:	b082      	sub	sp, #8
    af2c:	af00      	add	r7, sp, #0
    af2e:	6078      	str	r0, [r7, #4]
    af30:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    af32:	6839      	ldr	r1, [r7, #0]
    af34:	6878      	ldr	r0, [r7, #4]
    af36:	4b03      	ldr	r3, [pc, #12]	; (af44 <gpio_set_pin_function+0x1c>)
    af38:	4798      	blx	r3
}
    af3a:	bf00      	nop
    af3c:	3708      	adds	r7, #8
    af3e:	46bd      	mov	sp, r7
    af40:	bd80      	pop	{r7, pc}
    af42:	bf00      	nop
    af44:	0000aea5 	.word	0x0000aea5

0000af48 <gpio_set_pin_direction>:
{
    af48:	b580      	push	{r7, lr}
    af4a:	b082      	sub	sp, #8
    af4c:	af00      	add	r7, sp, #0
    af4e:	4603      	mov	r3, r0
    af50:	460a      	mov	r2, r1
    af52:	71fb      	strb	r3, [r7, #7]
    af54:	4613      	mov	r3, r2
    af56:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    af58:	79fb      	ldrb	r3, [r7, #7]
    af5a:	095b      	lsrs	r3, r3, #5
    af5c:	b2d8      	uxtb	r0, r3
    af5e:	79fb      	ldrb	r3, [r7, #7]
    af60:	f003 031f 	and.w	r3, r3, #31
    af64:	2201      	movs	r2, #1
    af66:	fa02 f303 	lsl.w	r3, r2, r3
    af6a:	79ba      	ldrb	r2, [r7, #6]
    af6c:	4619      	mov	r1, r3
    af6e:	4b03      	ldr	r3, [pc, #12]	; (af7c <gpio_set_pin_direction+0x34>)
    af70:	4798      	blx	r3
}
    af72:	bf00      	nop
    af74:	3708      	adds	r7, #8
    af76:	46bd      	mov	sp, r7
    af78:	bd80      	pop	{r7, pc}
    af7a:	bf00      	nop
    af7c:	0000ad79 	.word	0x0000ad79

0000af80 <gpio_set_pin_level>:
{
    af80:	b580      	push	{r7, lr}
    af82:	b082      	sub	sp, #8
    af84:	af00      	add	r7, sp, #0
    af86:	4603      	mov	r3, r0
    af88:	460a      	mov	r2, r1
    af8a:	71fb      	strb	r3, [r7, #7]
    af8c:	4613      	mov	r3, r2
    af8e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    af90:	79fb      	ldrb	r3, [r7, #7]
    af92:	095b      	lsrs	r3, r3, #5
    af94:	b2d8      	uxtb	r0, r3
    af96:	79fb      	ldrb	r3, [r7, #7]
    af98:	f003 031f 	and.w	r3, r3, #31
    af9c:	2201      	movs	r2, #1
    af9e:	fa02 f303 	lsl.w	r3, r2, r3
    afa2:	79ba      	ldrb	r2, [r7, #6]
    afa4:	4619      	mov	r1, r3
    afa6:	4b03      	ldr	r3, [pc, #12]	; (afb4 <gpio_set_pin_level+0x34>)
    afa8:	4798      	blx	r3
}
    afaa:	bf00      	nop
    afac:	3708      	adds	r7, #8
    afae:	46bd      	mov	sp, r7
    afb0:	bd80      	pop	{r7, pc}
    afb2:	bf00      	nop
    afb4:	0000ae61 	.word	0x0000ae61

0000afb8 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    afb8:	b580      	push	{r7, lr}
    afba:	b082      	sub	sp, #8
    afbc:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    afbe:	2100      	movs	r1, #0
    afc0:	2008      	movs	r0, #8
    afc2:	4b24      	ldr	r3, [pc, #144]	; (b054 <QSPI_N25Q256_exit_xip+0x9c>)
    afc4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    afc6:	2100      	movs	r1, #0
    afc8:	202b      	movs	r0, #43	; 0x2b
    afca:	4b22      	ldr	r3, [pc, #136]	; (b054 <QSPI_N25Q256_exit_xip+0x9c>)
    afcc:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    afce:	2100      	movs	r1, #0
    afd0:	202a      	movs	r0, #42	; 0x2a
    afd2:	4b20      	ldr	r3, [pc, #128]	; (b054 <QSPI_N25Q256_exit_xip+0x9c>)
    afd4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    afd6:	2102      	movs	r1, #2
    afd8:	2008      	movs	r0, #8
    afda:	4b1f      	ldr	r3, [pc, #124]	; (b058 <QSPI_N25Q256_exit_xip+0xa0>)
    afdc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    afde:	2102      	movs	r1, #2
    afe0:	202b      	movs	r0, #43	; 0x2b
    afe2:	4b1d      	ldr	r3, [pc, #116]	; (b058 <QSPI_N25Q256_exit_xip+0xa0>)
    afe4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    afe6:	2102      	movs	r1, #2
    afe8:	202a      	movs	r0, #42	; 0x2a
    afea:	4b1b      	ldr	r3, [pc, #108]	; (b058 <QSPI_N25Q256_exit_xip+0xa0>)
    afec:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    afee:	2101      	movs	r1, #1
    aff0:	2008      	movs	r0, #8
    aff2:	4b1a      	ldr	r3, [pc, #104]	; (b05c <QSPI_N25Q256_exit_xip+0xa4>)
    aff4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    aff6:	2100      	movs	r1, #0
    aff8:	202b      	movs	r0, #43	; 0x2b
    affa:	4b18      	ldr	r3, [pc, #96]	; (b05c <QSPI_N25Q256_exit_xip+0xa4>)
    affc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    affe:	2100      	movs	r1, #0
    b000:	202a      	movs	r0, #42	; 0x2a
    b002:	4b16      	ldr	r3, [pc, #88]	; (b05c <QSPI_N25Q256_exit_xip+0xa4>)
    b004:	4798      	blx	r3

	delay_us(1);
    b006:	2001      	movs	r0, #1
    b008:	4b15      	ldr	r3, [pc, #84]	; (b060 <QSPI_N25Q256_exit_xip+0xa8>)
    b00a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b00c:	2300      	movs	r3, #0
    b00e:	607b      	str	r3, [r7, #4]
    b010:	e010      	b.n	b034 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b012:	2101      	movs	r1, #1
    b014:	202a      	movs	r0, #42	; 0x2a
    b016:	4b11      	ldr	r3, [pc, #68]	; (b05c <QSPI_N25Q256_exit_xip+0xa4>)
    b018:	4798      	blx	r3
		delay_us(1);
    b01a:	2001      	movs	r0, #1
    b01c:	4b10      	ldr	r3, [pc, #64]	; (b060 <QSPI_N25Q256_exit_xip+0xa8>)
    b01e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b020:	2100      	movs	r1, #0
    b022:	202a      	movs	r0, #42	; 0x2a
    b024:	4b0d      	ldr	r3, [pc, #52]	; (b05c <QSPI_N25Q256_exit_xip+0xa4>)
    b026:	4798      	blx	r3
		delay_us(1);
    b028:	2001      	movs	r0, #1
    b02a:	4b0d      	ldr	r3, [pc, #52]	; (b060 <QSPI_N25Q256_exit_xip+0xa8>)
    b02c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b02e:	687b      	ldr	r3, [r7, #4]
    b030:	3301      	adds	r3, #1
    b032:	607b      	str	r3, [r7, #4]
    b034:	687b      	ldr	r3, [r7, #4]
    b036:	2b06      	cmp	r3, #6
    b038:	ddeb      	ble.n	b012 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b03a:	2101      	movs	r1, #1
    b03c:	202b      	movs	r0, #43	; 0x2b
    b03e:	4b07      	ldr	r3, [pc, #28]	; (b05c <QSPI_N25Q256_exit_xip+0xa4>)
    b040:	4798      	blx	r3
	delay_us(1);
    b042:	2001      	movs	r0, #1
    b044:	4b06      	ldr	r3, [pc, #24]	; (b060 <QSPI_N25Q256_exit_xip+0xa8>)
    b046:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b048:	4b06      	ldr	r3, [pc, #24]	; (b064 <QSPI_N25Q256_exit_xip+0xac>)
    b04a:	4798      	blx	r3
}
    b04c:	bf00      	nop
    b04e:	3708      	adds	r7, #8
    b050:	46bd      	mov	sp, r7
    b052:	bd80      	pop	{r7, pc}
    b054:	0000af29 	.word	0x0000af29
    b058:	0000af49 	.word	0x0000af49
    b05c:	0000af81 	.word	0x0000af81
    b060:	000021e5 	.word	0x000021e5
    b064:	00001335 	.word	0x00001335

0000b068 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b068:	b598      	push	{r3, r4, r7, lr}
    b06a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b06c:	4806      	ldr	r0, [pc, #24]	; (b088 <spi_nor_flash_init+0x20>)
    b06e:	4b07      	ldr	r3, [pc, #28]	; (b08c <spi_nor_flash_init+0x24>)
    b070:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b072:	2300      	movs	r3, #0
    b074:	4a06      	ldr	r2, [pc, #24]	; (b090 <spi_nor_flash_init+0x28>)
    b076:	4904      	ldr	r1, [pc, #16]	; (b088 <spi_nor_flash_init+0x20>)
    b078:	4806      	ldr	r0, [pc, #24]	; (b094 <spi_nor_flash_init+0x2c>)
    b07a:	4c07      	ldr	r4, [pc, #28]	; (b098 <spi_nor_flash_init+0x30>)
    b07c:	47a0      	blx	r4
    b07e:	4602      	mov	r2, r0
    b080:	4b06      	ldr	r3, [pc, #24]	; (b09c <spi_nor_flash_init+0x34>)
    b082:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b084:	bf00      	nop
    b086:	bd98      	pop	{r3, r4, r7, pc}
    b088:	2000a3f8 	.word	0x2000a3f8
    b08c:	00002681 	.word	0x00002681
    b090:	0000afb9 	.word	0x0000afb9
    b094:	200024e8 	.word	0x200024e8
    b098:	0000b4d5 	.word	0x0000b4d5
    b09c:	2000a5d8 	.word	0x2000a5d8

0000b0a0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b0a0:	b580      	push	{r7, lr}
    b0a2:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b0a4:	4805      	ldr	r0, [pc, #20]	; (b0bc <cdc_device_acm_init+0x1c>)
    b0a6:	4b06      	ldr	r3, [pc, #24]	; (b0c0 <cdc_device_acm_init+0x20>)
    b0a8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b0aa:	4b06      	ldr	r3, [pc, #24]	; (b0c4 <cdc_device_acm_init+0x24>)
    b0ac:	4798      	blx	r3

	usbdc_start(single_desc);
    b0ae:	4806      	ldr	r0, [pc, #24]	; (b0c8 <cdc_device_acm_init+0x28>)
    b0b0:	4b06      	ldr	r3, [pc, #24]	; (b0cc <cdc_device_acm_init+0x2c>)
    b0b2:	4798      	blx	r3
	usbdc_attach();
    b0b4:	4b06      	ldr	r3, [pc, #24]	; (b0d0 <cdc_device_acm_init+0x30>)
    b0b6:	4798      	blx	r3
}
    b0b8:	bf00      	nop
    b0ba:	bd80      	pop	{r7, pc}
    b0bc:	20002538 	.word	0x20002538
    b0c0:	0000cbfd 	.word	0x0000cbfd
    b0c4:	0000be75 	.word	0x0000be75
    b0c8:	200001d0 	.word	0x200001d0
    b0cc:	0000cc99 	.word	0x0000cc99
    b0d0:	0000cce9 	.word	0x0000cce9

0000b0d4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b0d4:	b580      	push	{r7, lr}
    b0d6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b0d8:	4b01      	ldr	r3, [pc, #4]	; (b0e0 <usb_init+0xc>)
    b0da:	4798      	blx	r3
}
    b0dc:	bf00      	nop
    b0de:	bd80      	pop	{r7, pc}
    b0e0:	0000b0a1 	.word	0x0000b0a1

0000b0e4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b0e4:	b480      	push	{r7}
    b0e6:	b085      	sub	sp, #20
    b0e8:	af00      	add	r7, sp, #0
    b0ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b0ec:	f3ef 8310 	mrs	r3, PRIMASK
    b0f0:	60fb      	str	r3, [r7, #12]
  return(result);
    b0f2:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b0f4:	687b      	ldr	r3, [r7, #4]
    b0f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b0f8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b0fa:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b0fe:	bf00      	nop
    b100:	3714      	adds	r7, #20
    b102:	46bd      	mov	sp, r7
    b104:	f85d 7b04 	ldr.w	r7, [sp], #4
    b108:	4770      	bx	lr

0000b10a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b10a:	b480      	push	{r7}
    b10c:	b085      	sub	sp, #20
    b10e:	af00      	add	r7, sp, #0
    b110:	6078      	str	r0, [r7, #4]
    b112:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b116:	687b      	ldr	r3, [r7, #4]
    b118:	681b      	ldr	r3, [r3, #0]
    b11a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b11c:	68fb      	ldr	r3, [r7, #12]
    b11e:	f383 8810 	msr	PRIMASK, r3
}
    b122:	bf00      	nop
    b124:	3714      	adds	r7, #20
    b126:	46bd      	mov	sp, r7
    b128:	f85d 7b04 	ldr.w	r7, [sp], #4
    b12c:	4770      	bx	lr
	...

0000b130 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b130:	b580      	push	{r7, lr}
    b132:	b08c      	sub	sp, #48	; 0x30
    b134:	af00      	add	r7, sp, #0
    b136:	6078      	str	r0, [r7, #4]
    b138:	460b      	mov	r3, r1
    b13a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b13c:	687b      	ldr	r3, [r7, #4]
    b13e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b140:	687b      	ldr	r3, [r7, #4]
    b142:	681b      	ldr	r3, [r3, #0]
    b144:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b146:	f107 030c 	add.w	r3, r7, #12
    b14a:	2200      	movs	r2, #0
    b14c:	601a      	str	r2, [r3, #0]
    b14e:	605a      	str	r2, [r3, #4]
    b150:	609a      	str	r2, [r3, #8]
    b152:	60da      	str	r2, [r3, #12]
    b154:	611a      	str	r2, [r3, #16]
    b156:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b15a:	7b1b      	ldrb	r3, [r3, #12]
    b15c:	2b00      	cmp	r3, #0
    b15e:	d001      	beq.n	b164 <n25q256a_xip_confirm+0x34>
    b160:	2206      	movs	r2, #6
    b162:	e000      	b.n	b166 <n25q256a_xip_confirm+0x36>
    b164:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b166:	7b3b      	ldrb	r3, [r7, #12]
    b168:	f362 0302 	bfi	r3, r2, #0, #3
    b16c:	733b      	strb	r3, [r7, #12]
    b16e:	7b3b      	ldrb	r3, [r7, #12]
    b170:	f043 0310 	orr.w	r3, r3, #16
    b174:	733b      	strb	r3, [r7, #12]
    b176:	7b3b      	ldrb	r3, [r7, #12]
    b178:	f043 0320 	orr.w	r3, r3, #32
    b17c:	733b      	strb	r3, [r7, #12]
    b17e:	7b3b      	ldrb	r3, [r7, #12]
    b180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b184:	733b      	strb	r3, [r7, #12]
    b186:	7b3b      	ldrb	r3, [r7, #12]
    b188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b18c:	733b      	strb	r3, [r7, #12]
    b18e:	7b7b      	ldrb	r3, [r7, #13]
    b190:	f043 0303 	orr.w	r3, r3, #3
    b194:	737b      	strb	r3, [r7, #13]
    b196:	7b7b      	ldrb	r3, [r7, #13]
    b198:	2201      	movs	r2, #1
    b19a:	f362 1305 	bfi	r3, r2, #4, #2
    b19e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b1a2:	7b1b      	ldrb	r3, [r3, #12]
    b1a4:	2b00      	cmp	r3, #0
    b1a6:	d001      	beq.n	b1ac <n25q256a_xip_confirm+0x7c>
    b1a8:	2208      	movs	r2, #8
    b1aa:	e000      	b.n	b1ae <n25q256a_xip_confirm+0x7e>
    b1ac:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b1ae:	7bbb      	ldrb	r3, [r7, #14]
    b1b0:	f362 0304 	bfi	r3, r2, #0, #5
    b1b4:	73bb      	strb	r3, [r7, #14]
    b1b6:	230b      	movs	r3, #11
    b1b8:	743b      	strb	r3, [r7, #16]
    b1ba:	78fb      	ldrb	r3, [r7, #3]
    b1bc:	2b00      	cmp	r3, #0
    b1be:	d001      	beq.n	b1c4 <n25q256a_xip_confirm+0x94>
    b1c0:	2300      	movs	r3, #0
    b1c2:	e000      	b.n	b1c6 <n25q256a_xip_confirm+0x96>
    b1c4:	23ff      	movs	r3, #255	; 0xff
    b1c6:	747b      	strb	r3, [r7, #17]
    b1c8:	2301      	movs	r3, #1
    b1ca:	61bb      	str	r3, [r7, #24]
    b1cc:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b1d0:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b1d2:	f107 030c 	add.w	r3, r7, #12
    b1d6:	4619      	mov	r1, r3
    b1d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b1da:	4b07      	ldr	r3, [pc, #28]	; (b1f8 <n25q256a_xip_confirm+0xc8>)
    b1dc:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b1de:	78fb      	ldrb	r3, [r7, #3]
    b1e0:	2b00      	cmp	r3, #0
    b1e2:	d001      	beq.n	b1e8 <n25q256a_xip_confirm+0xb8>
    b1e4:	2202      	movs	r2, #2
    b1e6:	e000      	b.n	b1ea <n25q256a_xip_confirm+0xba>
    b1e8:	2201      	movs	r2, #1
    b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b1ec:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b1ee:	2300      	movs	r3, #0
}
    b1f0:	4618      	mov	r0, r3
    b1f2:	3730      	adds	r7, #48	; 0x30
    b1f4:	46bd      	mov	sp, r7
    b1f6:	bd80      	pop	{r7, pc}
    b1f8:	000026f9 	.word	0x000026f9

0000b1fc <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b1fc:	b580      	push	{r7, lr}
    b1fe:	b08c      	sub	sp, #48	; 0x30
    b200:	af00      	add	r7, sp, #0
    b202:	6078      	str	r0, [r7, #4]
    b204:	460b      	mov	r3, r1
    b206:	70fb      	strb	r3, [r7, #3]
    b208:	4613      	mov	r3, r2
    b20a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b20c:	2300      	movs	r3, #0
    b20e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b210:	687b      	ldr	r3, [r7, #4]
    b212:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b214:	687b      	ldr	r3, [r7, #4]
    b216:	681b      	ldr	r3, [r3, #0]
    b218:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b21a:	f107 030c 	add.w	r3, r7, #12
    b21e:	2200      	movs	r2, #0
    b220:	601a      	str	r2, [r3, #0]
    b222:	605a      	str	r2, [r3, #4]
    b224:	609a      	str	r2, [r3, #8]
    b226:	60da      	str	r2, [r3, #12]
    b228:	611a      	str	r2, [r3, #16]
    b22a:	615a      	str	r2, [r3, #20]
    b22c:	78fb      	ldrb	r3, [r7, #3]
    b22e:	f003 0307 	and.w	r3, r3, #7
    b232:	b2da      	uxtb	r2, r3
    b234:	7b3b      	ldrb	r3, [r7, #12]
    b236:	f362 0302 	bfi	r3, r2, #0, #3
    b23a:	733b      	strb	r3, [r7, #12]
    b23c:	7b3b      	ldrb	r3, [r7, #12]
    b23e:	f043 0310 	orr.w	r3, r3, #16
    b242:	733b      	strb	r3, [r7, #12]
    b244:	7b3b      	ldrb	r3, [r7, #12]
    b246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b24a:	733b      	strb	r3, [r7, #12]
    b24c:	78bb      	ldrb	r3, [r7, #2]
    b24e:	743b      	strb	r3, [r7, #16]
    b250:	2301      	movs	r3, #1
    b252:	61bb      	str	r3, [r7, #24]
    b254:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b258:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b25c:	7b5b      	ldrb	r3, [r3, #13]
    b25e:	2b00      	cmp	r3, #0
    b260:	d003      	beq.n	b26a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b262:	2100      	movs	r1, #0
    b264:	6878      	ldr	r0, [r7, #4]
    b266:	4b0a      	ldr	r3, [pc, #40]	; (b290 <n25q256a_read_reg+0x94>)
    b268:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b26a:	f107 030c 	add.w	r3, r7, #12
    b26e:	4619      	mov	r1, r3
    b270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b272:	4b08      	ldr	r3, [pc, #32]	; (b294 <n25q256a_read_reg+0x98>)
    b274:	4798      	blx	r3
	if (n25q->xip_mode) {
    b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b278:	7b5b      	ldrb	r3, [r3, #13]
    b27a:	2b00      	cmp	r3, #0
    b27c:	d003      	beq.n	b286 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b27e:	2101      	movs	r1, #1
    b280:	6878      	ldr	r0, [r7, #4]
    b282:	4b03      	ldr	r3, [pc, #12]	; (b290 <n25q256a_read_reg+0x94>)
    b284:	4798      	blx	r3
	}
	return status;
    b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b288:	4618      	mov	r0, r3
    b28a:	3730      	adds	r7, #48	; 0x30
    b28c:	46bd      	mov	sp, r7
    b28e:	bd80      	pop	{r7, pc}
    b290:	0000b131 	.word	0x0000b131
    b294:	000026f9 	.word	0x000026f9

0000b298 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b298:	b580      	push	{r7, lr}
    b29a:	b08c      	sub	sp, #48	; 0x30
    b29c:	af00      	add	r7, sp, #0
    b29e:	60f8      	str	r0, [r7, #12]
    b2a0:	607b      	str	r3, [r7, #4]
    b2a2:	460b      	mov	r3, r1
    b2a4:	72fb      	strb	r3, [r7, #11]
    b2a6:	4613      	mov	r3, r2
    b2a8:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b2aa:	68fb      	ldr	r3, [r7, #12]
    b2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b2ae:	68fb      	ldr	r3, [r7, #12]
    b2b0:	681b      	ldr	r3, [r3, #0]
    b2b2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b2b4:	f107 0310 	add.w	r3, r7, #16
    b2b8:	2200      	movs	r2, #0
    b2ba:	601a      	str	r2, [r3, #0]
    b2bc:	605a      	str	r2, [r3, #4]
    b2be:	609a      	str	r2, [r3, #8]
    b2c0:	60da      	str	r2, [r3, #12]
    b2c2:	611a      	str	r2, [r3, #16]
    b2c4:	615a      	str	r2, [r3, #20]
    b2c6:	7afb      	ldrb	r3, [r7, #11]
    b2c8:	f003 0307 	and.w	r3, r3, #7
    b2cc:	b2da      	uxtb	r2, r3
    b2ce:	7c3b      	ldrb	r3, [r7, #16]
    b2d0:	f362 0302 	bfi	r3, r2, #0, #3
    b2d4:	743b      	strb	r3, [r7, #16]
    b2d6:	7c3b      	ldrb	r3, [r7, #16]
    b2d8:	f043 0310 	orr.w	r3, r3, #16
    b2dc:	743b      	strb	r3, [r7, #16]
    b2de:	7c3b      	ldrb	r3, [r7, #16]
    b2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b2e4:	743b      	strb	r3, [r7, #16]
    b2e6:	7c7b      	ldrb	r3, [r7, #17]
    b2e8:	2202      	movs	r2, #2
    b2ea:	f362 1305 	bfi	r3, r2, #4, #2
    b2ee:	747b      	strb	r3, [r7, #17]
    b2f0:	7abb      	ldrb	r3, [r7, #10]
    b2f2:	753b      	strb	r3, [r7, #20]
    b2f4:	2301      	movs	r3, #1
    b2f6:	61fb      	str	r3, [r7, #28]
    b2f8:	1d3b      	adds	r3, r7, #4
    b2fa:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2fe:	7b5b      	ldrb	r3, [r3, #13]
    b300:	2b00      	cmp	r3, #0
    b302:	d003      	beq.n	b30c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b304:	2100      	movs	r1, #0
    b306:	68f8      	ldr	r0, [r7, #12]
    b308:	4b09      	ldr	r3, [pc, #36]	; (b330 <n25q256a_write_reg+0x98>)
    b30a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b30c:	f107 0310 	add.w	r3, r7, #16
    b310:	4619      	mov	r1, r3
    b312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b314:	4b07      	ldr	r3, [pc, #28]	; (b334 <n25q256a_write_reg+0x9c>)
    b316:	4798      	blx	r3
	if (n25q->xip_mode) {
    b318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b31a:	7b5b      	ldrb	r3, [r3, #13]
    b31c:	2b00      	cmp	r3, #0
    b31e:	d003      	beq.n	b328 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b320:	2101      	movs	r1, #1
    b322:	68f8      	ldr	r0, [r7, #12]
    b324:	4b02      	ldr	r3, [pc, #8]	; (b330 <n25q256a_write_reg+0x98>)
    b326:	4798      	blx	r3
	}
}
    b328:	bf00      	nop
    b32a:	3730      	adds	r7, #48	; 0x30
    b32c:	46bd      	mov	sp, r7
    b32e:	bd80      	pop	{r7, pc}
    b330:	0000b131 	.word	0x0000b131
    b334:	000026f9 	.word	0x000026f9

0000b338 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b338:	b580      	push	{r7, lr}
    b33a:	b090      	sub	sp, #64	; 0x40
    b33c:	af00      	add	r7, sp, #0
    b33e:	6078      	str	r0, [r7, #4]
    b340:	460b      	mov	r3, r1
    b342:	70fb      	strb	r3, [r7, #3]
    b344:	4613      	mov	r3, r2
    b346:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b348:	687b      	ldr	r3, [r7, #4]
    b34a:	681b      	ldr	r3, [r3, #0]
    b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b34e:	78bb      	ldrb	r3, [r7, #2]
    b350:	2b00      	cmp	r3, #0
    b352:	d001      	beq.n	b358 <n25q256a_write_enable+0x20>
    b354:	2306      	movs	r3, #6
    b356:	e000      	b.n	b35a <n25q256a_write_enable+0x22>
    b358:	2304      	movs	r3, #4
    b35a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b35e:	f107 0320 	add.w	r3, r7, #32
    b362:	2200      	movs	r2, #0
    b364:	601a      	str	r2, [r3, #0]
    b366:	605a      	str	r2, [r3, #4]
    b368:	609a      	str	r2, [r3, #8]
    b36a:	60da      	str	r2, [r3, #12]
    b36c:	611a      	str	r2, [r3, #16]
    b36e:	615a      	str	r2, [r3, #20]
    b370:	78fb      	ldrb	r3, [r7, #3]
    b372:	f003 0307 	and.w	r3, r3, #7
    b376:	b2da      	uxtb	r2, r3
    b378:	f897 3020 	ldrb.w	r3, [r7, #32]
    b37c:	f362 0302 	bfi	r3, r2, #0, #3
    b380:	f887 3020 	strb.w	r3, [r7, #32]
    b384:	f897 3020 	ldrb.w	r3, [r7, #32]
    b388:	f043 0310 	orr.w	r3, r3, #16
    b38c:	f887 3020 	strb.w	r3, [r7, #32]
    b390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b394:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b398:	f107 0308 	add.w	r3, r7, #8
    b39c:	2200      	movs	r2, #0
    b39e:	601a      	str	r2, [r3, #0]
    b3a0:	605a      	str	r2, [r3, #4]
    b3a2:	609a      	str	r2, [r3, #8]
    b3a4:	60da      	str	r2, [r3, #12]
    b3a6:	611a      	str	r2, [r3, #16]
    b3a8:	615a      	str	r2, [r3, #20]
    b3aa:	78fb      	ldrb	r3, [r7, #3]
    b3ac:	f003 0307 	and.w	r3, r3, #7
    b3b0:	b2da      	uxtb	r2, r3
    b3b2:	7a3b      	ldrb	r3, [r7, #8]
    b3b4:	f362 0302 	bfi	r3, r2, #0, #3
    b3b8:	723b      	strb	r3, [r7, #8]
    b3ba:	7a3b      	ldrb	r3, [r7, #8]
    b3bc:	f043 0310 	orr.w	r3, r3, #16
    b3c0:	723b      	strb	r3, [r7, #8]
    b3c2:	7a3b      	ldrb	r3, [r7, #8]
    b3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b3c8:	723b      	strb	r3, [r7, #8]
    b3ca:	2305      	movs	r3, #5
    b3cc:	733b      	strb	r3, [r7, #12]
    b3ce:	2301      	movs	r3, #1
    b3d0:	617b      	str	r3, [r7, #20]
    b3d2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b3d6:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b3d8:	f107 0320 	add.w	r3, r7, #32
    b3dc:	4619      	mov	r1, r3
    b3de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b3e0:	4b08      	ldr	r3, [pc, #32]	; (b404 <n25q256a_write_enable+0xcc>)
    b3e2:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b3e4:	f107 0308 	add.w	r3, r7, #8
    b3e8:	4619      	mov	r1, r3
    b3ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b3ec:	4b05      	ldr	r3, [pc, #20]	; (b404 <n25q256a_write_enable+0xcc>)
    b3ee:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b3f0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b3f4:	f003 0302 	and.w	r3, r3, #2
    b3f8:	2b00      	cmp	r3, #0
    b3fa:	d0ed      	beq.n	b3d8 <n25q256a_write_enable+0xa0>
}
    b3fc:	bf00      	nop
    b3fe:	3740      	adds	r7, #64	; 0x40
    b400:	46bd      	mov	sp, r7
    b402:	bd80      	pop	{r7, pc}
    b404:	000026f9 	.word	0x000026f9

0000b408 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b408:	b590      	push	{r4, r7, lr}
    b40a:	b087      	sub	sp, #28
    b40c:	af00      	add	r7, sp, #0
    b40e:	6078      	str	r0, [r7, #4]
    b410:	460b      	mov	r3, r1
    b412:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b414:	687b      	ldr	r3, [r7, #4]
    b416:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b418:	68fb      	ldr	r3, [r7, #12]
    b41a:	7b1b      	ldrb	r3, [r3, #12]
    b41c:	2b00      	cmp	r3, #0
    b41e:	d001      	beq.n	b424 <n25q256a_switch_mode+0x1c>
    b420:	2306      	movs	r3, #6
    b422:	e000      	b.n	b426 <n25q256a_switch_mode+0x1e>
    b424:	2300      	movs	r3, #0
    b426:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b428:	7afb      	ldrb	r3, [r7, #11]
    b42a:	2265      	movs	r2, #101	; 0x65
    b42c:	4619      	mov	r1, r3
    b42e:	6878      	ldr	r0, [r7, #4]
    b430:	4b25      	ldr	r3, [pc, #148]	; (b4c8 <n25q256a_switch_mode+0xc0>)
    b432:	4798      	blx	r3
    b434:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b436:	2300      	movs	r3, #0
    b438:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b43a:	68fb      	ldr	r3, [r7, #12]
    b43c:	7b1b      	ldrb	r3, [r3, #12]
    b43e:	78fa      	ldrb	r2, [r7, #3]
    b440:	429a      	cmp	r2, r3
    b442:	d03d      	beq.n	b4c0 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b444:	78fb      	ldrb	r3, [r7, #3]
    b446:	2b00      	cmp	r3, #0
    b448:	d00b      	beq.n	b462 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b44a:	697b      	ldr	r3, [r7, #20]
    b44c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b450:	2b00      	cmp	r3, #0
    b452:	d011      	beq.n	b478 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b454:	697b      	ldr	r3, [r7, #20]
    b456:	f003 031f 	and.w	r3, r3, #31
    b45a:	617b      	str	r3, [r7, #20]
			modify = 1;
    b45c:	2301      	movs	r3, #1
    b45e:	74fb      	strb	r3, [r7, #19]
    b460:	e00a      	b.n	b478 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b462:	697b      	ldr	r3, [r7, #20]
    b464:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b468:	2b00      	cmp	r3, #0
    b46a:	d105      	bne.n	b478 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b46c:	697b      	ldr	r3, [r7, #20]
    b46e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b472:	617b      	str	r3, [r7, #20]
			modify = 1;
    b474:	2301      	movs	r3, #1
    b476:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b478:	7cfb      	ldrb	r3, [r7, #19]
    b47a:	2b00      	cmp	r3, #0
    b47c:	d021      	beq.n	b4c2 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b47e:	68fb      	ldr	r3, [r7, #12]
    b480:	78fa      	ldrb	r2, [r7, #3]
    b482:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b484:	7afb      	ldrb	r3, [r7, #11]
    b486:	2201      	movs	r2, #1
    b488:	4619      	mov	r1, r3
    b48a:	6878      	ldr	r0, [r7, #4]
    b48c:	4b0f      	ldr	r3, [pc, #60]	; (b4cc <n25q256a_switch_mode+0xc4>)
    b48e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b490:	7af9      	ldrb	r1, [r7, #11]
    b492:	697b      	ldr	r3, [r7, #20]
    b494:	2261      	movs	r2, #97	; 0x61
    b496:	6878      	ldr	r0, [r7, #4]
    b498:	4c0d      	ldr	r4, [pc, #52]	; (b4d0 <n25q256a_switch_mode+0xc8>)
    b49a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b49c:	78fb      	ldrb	r3, [r7, #3]
    b49e:	2b00      	cmp	r3, #0
    b4a0:	d001      	beq.n	b4a6 <n25q256a_switch_mode+0x9e>
    b4a2:	2306      	movs	r3, #6
    b4a4:	e000      	b.n	b4a8 <n25q256a_switch_mode+0xa0>
    b4a6:	2300      	movs	r3, #0
    b4a8:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b4aa:	7afb      	ldrb	r3, [r7, #11]
    b4ac:	2265      	movs	r2, #101	; 0x65
    b4ae:	4619      	mov	r1, r3
    b4b0:	6878      	ldr	r0, [r7, #4]
    b4b2:	4b05      	ldr	r3, [pc, #20]	; (b4c8 <n25q256a_switch_mode+0xc0>)
    b4b4:	4798      	blx	r3
    b4b6:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b4b8:	68fb      	ldr	r3, [r7, #12]
    b4ba:	78fa      	ldrb	r2, [r7, #3]
    b4bc:	731a      	strb	r2, [r3, #12]
    b4be:	e000      	b.n	b4c2 <n25q256a_switch_mode+0xba>
		return;
    b4c0:	bf00      	nop
	}
}
    b4c2:	371c      	adds	r7, #28
    b4c4:	46bd      	mov	sp, r7
    b4c6:	bd90      	pop	{r4, r7, pc}
    b4c8:	0000b1fd 	.word	0x0000b1fd
    b4cc:	0000b339 	.word	0x0000b339
    b4d0:	0000b299 	.word	0x0000b299

0000b4d4 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b4d4:	b580      	push	{r7, lr}
    b4d6:	b086      	sub	sp, #24
    b4d8:	af00      	add	r7, sp, #0
    b4da:	60f8      	str	r0, [r7, #12]
    b4dc:	60b9      	str	r1, [r7, #8]
    b4de:	607a      	str	r2, [r7, #4]
    b4e0:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b4e2:	68fb      	ldr	r3, [r7, #12]
    b4e4:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b4e6:	4a0c      	ldr	r2, [pc, #48]	; (b518 <n25q256a_construct+0x44>)
    b4e8:	68b9      	ldr	r1, [r7, #8]
    b4ea:	68f8      	ldr	r0, [r7, #12]
    b4ec:	4b0b      	ldr	r3, [pc, #44]	; (b51c <n25q256a_construct+0x48>)
    b4ee:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b4f0:	697b      	ldr	r3, [r7, #20]
    b4f2:	2200      	movs	r2, #0
    b4f4:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b4f6:	697b      	ldr	r3, [r7, #20]
    b4f8:	2200      	movs	r2, #0
    b4fa:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b4fc:	697b      	ldr	r3, [r7, #20]
    b4fe:	687a      	ldr	r2, [r7, #4]
    b500:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b502:	78fb      	ldrb	r3, [r7, #3]
    b504:	4619      	mov	r1, r3
    b506:	68f8      	ldr	r0, [r7, #12]
    b508:	4b05      	ldr	r3, [pc, #20]	; (b520 <n25q256a_construct+0x4c>)
    b50a:	4798      	blx	r3
	return me;
    b50c:	68fb      	ldr	r3, [r7, #12]
}
    b50e:	4618      	mov	r0, r3
    b510:	3718      	adds	r7, #24
    b512:	46bd      	mov	sp, r7
    b514:	bd80      	pop	{r7, pc}
    b516:	bf00      	nop
    b518:	0000f784 	.word	0x0000f784
    b51c:	0000b9b1 	.word	0x0000b9b1
    b520:	0000b409 	.word	0x0000b409

0000b524 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b524:	b580      	push	{r7, lr}
    b526:	b08c      	sub	sp, #48	; 0x30
    b528:	af00      	add	r7, sp, #0
    b52a:	60f8      	str	r0, [r7, #12]
    b52c:	60b9      	str	r1, [r7, #8]
    b52e:	607a      	str	r2, [r7, #4]
    b530:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b532:	68fb      	ldr	r3, [r7, #12]
    b534:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b536:	68fb      	ldr	r3, [r7, #12]
    b538:	681b      	ldr	r3, [r3, #0]
    b53a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b53c:	f107 0310 	add.w	r3, r7, #16
    b540:	2200      	movs	r2, #0
    b542:	601a      	str	r2, [r3, #0]
    b544:	605a      	str	r2, [r3, #4]
    b546:	609a      	str	r2, [r3, #8]
    b548:	60da      	str	r2, [r3, #12]
    b54a:	611a      	str	r2, [r3, #16]
    b54c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b550:	7b1b      	ldrb	r3, [r3, #12]
    b552:	2b00      	cmp	r3, #0
    b554:	d001      	beq.n	b55a <n25q256a_read+0x36>
    b556:	2206      	movs	r2, #6
    b558:	e000      	b.n	b55c <n25q256a_read+0x38>
    b55a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b55c:	7c3b      	ldrb	r3, [r7, #16]
    b55e:	f362 0302 	bfi	r3, r2, #0, #3
    b562:	743b      	strb	r3, [r7, #16]
    b564:	7c3b      	ldrb	r3, [r7, #16]
    b566:	f043 0310 	orr.w	r3, r3, #16
    b56a:	743b      	strb	r3, [r7, #16]
    b56c:	7c3b      	ldrb	r3, [r7, #16]
    b56e:	f043 0320 	orr.w	r3, r3, #32
    b572:	743b      	strb	r3, [r7, #16]
    b574:	7c3b      	ldrb	r3, [r7, #16]
    b576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b57a:	743b      	strb	r3, [r7, #16]
    b57c:	7c7b      	ldrb	r3, [r7, #17]
    b57e:	2201      	movs	r2, #1
    b580:	f362 1305 	bfi	r3, r2, #4, #2
    b584:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b588:	7b1b      	ldrb	r3, [r3, #12]
    b58a:	2b00      	cmp	r3, #0
    b58c:	d001      	beq.n	b592 <n25q256a_read+0x6e>
    b58e:	220a      	movs	r2, #10
    b590:	e000      	b.n	b594 <n25q256a_read+0x70>
    b592:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b594:	7cbb      	ldrb	r3, [r7, #18]
    b596:	f362 0304 	bfi	r3, r2, #0, #5
    b59a:	74bb      	strb	r3, [r7, #18]
    b59c:	230b      	movs	r3, #11
    b59e:	753b      	strb	r3, [r7, #20]
    b5a0:	687b      	ldr	r3, [r7, #4]
    b5a2:	61bb      	str	r3, [r7, #24]
    b5a4:	683b      	ldr	r3, [r7, #0]
    b5a6:	61fb      	str	r3, [r7, #28]
    b5a8:	68bb      	ldr	r3, [r7, #8]
    b5aa:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b5ac:	f107 0310 	add.w	r3, r7, #16
    b5b0:	4619      	mov	r1, r3
    b5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b5b4:	4b03      	ldr	r3, [pc, #12]	; (b5c4 <n25q256a_read+0xa0>)
    b5b6:	4798      	blx	r3
	return ERR_NONE;
    b5b8:	2300      	movs	r3, #0
}
    b5ba:	4618      	mov	r0, r3
    b5bc:	3730      	adds	r7, #48	; 0x30
    b5be:	46bd      	mov	sp, r7
    b5c0:	bd80      	pop	{r7, pc}
    b5c2:	bf00      	nop
    b5c4:	000026f9 	.word	0x000026f9

0000b5c8 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b5c8:	b580      	push	{r7, lr}
    b5ca:	b08c      	sub	sp, #48	; 0x30
    b5cc:	af00      	add	r7, sp, #0
    b5ce:	60f8      	str	r0, [r7, #12]
    b5d0:	60b9      	str	r1, [r7, #8]
    b5d2:	607a      	str	r2, [r7, #4]
    b5d4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b5d6:	68fb      	ldr	r3, [r7, #12]
    b5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b5da:	68fb      	ldr	r3, [r7, #12]
    b5dc:	681b      	ldr	r3, [r3, #0]
    b5de:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b5e0:	f107 0310 	add.w	r3, r7, #16
    b5e4:	2200      	movs	r2, #0
    b5e6:	601a      	str	r2, [r3, #0]
    b5e8:	605a      	str	r2, [r3, #4]
    b5ea:	609a      	str	r2, [r3, #8]
    b5ec:	60da      	str	r2, [r3, #12]
    b5ee:	611a      	str	r2, [r3, #16]
    b5f0:	615a      	str	r2, [r3, #20]
    b5f2:	7c3b      	ldrb	r3, [r7, #16]
    b5f4:	f043 0310 	orr.w	r3, r3, #16
    b5f8:	743b      	strb	r3, [r7, #16]
    b5fa:	7c3b      	ldrb	r3, [r7, #16]
    b5fc:	f043 0320 	orr.w	r3, r3, #32
    b600:	743b      	strb	r3, [r7, #16]
    b602:	7c3b      	ldrb	r3, [r7, #16]
    b604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b608:	743b      	strb	r3, [r7, #16]
    b60a:	7c7b      	ldrb	r3, [r7, #17]
    b60c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b610:	747b      	strb	r3, [r7, #17]
    b612:	2302      	movs	r3, #2
    b614:	753b      	strb	r3, [r7, #20]
    b616:	687b      	ldr	r3, [r7, #4]
    b618:	61bb      	str	r3, [r7, #24]
    b61a:	683b      	ldr	r3, [r7, #0]
    b61c:	61fb      	str	r3, [r7, #28]
    b61e:	68bb      	ldr	r3, [r7, #8]
    b620:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b624:	7b1b      	ldrb	r3, [r3, #12]
    b626:	2b00      	cmp	r3, #0
    b628:	d001      	beq.n	b62e <n25q256a_write+0x66>
    b62a:	2206      	movs	r2, #6
    b62c:	e000      	b.n	b630 <n25q256a_write+0x68>
    b62e:	2200      	movs	r2, #0
    b630:	7c3b      	ldrb	r3, [r7, #16]
    b632:	f362 0302 	bfi	r3, r2, #0, #3
    b636:	743b      	strb	r3, [r7, #16]
	while (length) {
    b638:	e035      	b.n	b6a6 <n25q256a_write+0xde>
		cmd.address = address;
    b63a:	687b      	ldr	r3, [r7, #4]
    b63c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b63e:	683b      	ldr	r3, [r7, #0]
    b640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b644:	d802      	bhi.n	b64c <n25q256a_write+0x84>
			cmd.buf_len = length;
    b646:	683b      	ldr	r3, [r7, #0]
    b648:	61fb      	str	r3, [r7, #28]
    b64a:	e002      	b.n	b652 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b64c:	f44f 7380 	mov.w	r3, #256	; 0x100
    b650:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b652:	7c3b      	ldrb	r3, [r7, #16]
    b654:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b658:	b2db      	uxtb	r3, r3
    b65a:	2201      	movs	r2, #1
    b65c:	4619      	mov	r1, r3
    b65e:	68f8      	ldr	r0, [r7, #12]
    b660:	4b19      	ldr	r3, [pc, #100]	; (b6c8 <n25q256a_write+0x100>)
    b662:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b664:	f107 0310 	add.w	r3, r7, #16
    b668:	4619      	mov	r1, r3
    b66a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b66c:	4b17      	ldr	r3, [pc, #92]	; (b6cc <n25q256a_write+0x104>)
    b66e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b670:	bf00      	nop
    b672:	7c3b      	ldrb	r3, [r7, #16]
    b674:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b678:	b2db      	uxtb	r3, r3
    b67a:	2270      	movs	r2, #112	; 0x70
    b67c:	4619      	mov	r1, r3
    b67e:	68f8      	ldr	r0, [r7, #12]
    b680:	4b13      	ldr	r3, [pc, #76]	; (b6d0 <n25q256a_write+0x108>)
    b682:	4798      	blx	r3
    b684:	4603      	mov	r3, r0
    b686:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b68a:	2b00      	cmp	r3, #0
    b68c:	d0f1      	beq.n	b672 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b68e:	6a3a      	ldr	r2, [r7, #32]
    b690:	69fb      	ldr	r3, [r7, #28]
    b692:	4413      	add	r3, r2
    b694:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b696:	69fb      	ldr	r3, [r7, #28]
    b698:	683a      	ldr	r2, [r7, #0]
    b69a:	1ad3      	subs	r3, r2, r3
    b69c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b69e:	69fb      	ldr	r3, [r7, #28]
    b6a0:	687a      	ldr	r2, [r7, #4]
    b6a2:	4413      	add	r3, r2
    b6a4:	607b      	str	r3, [r7, #4]
	while (length) {
    b6a6:	683b      	ldr	r3, [r7, #0]
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	d1c6      	bne.n	b63a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6ae:	7b5b      	ldrb	r3, [r3, #13]
    b6b0:	2b00      	cmp	r3, #0
    b6b2:	d003      	beq.n	b6bc <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b6b4:	2101      	movs	r1, #1
    b6b6:	68f8      	ldr	r0, [r7, #12]
    b6b8:	4b06      	ldr	r3, [pc, #24]	; (b6d4 <n25q256a_write+0x10c>)
    b6ba:	4798      	blx	r3
	}
	return ERR_NONE;
    b6bc:	2300      	movs	r3, #0
}
    b6be:	4618      	mov	r0, r3
    b6c0:	3730      	adds	r7, #48	; 0x30
    b6c2:	46bd      	mov	sp, r7
    b6c4:	bd80      	pop	{r7, pc}
    b6c6:	bf00      	nop
    b6c8:	0000b339 	.word	0x0000b339
    b6cc:	000026f9 	.word	0x000026f9
    b6d0:	0000b1fd 	.word	0x0000b1fd
    b6d4:	0000b131 	.word	0x0000b131

0000b6d8 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b6d8:	b580      	push	{r7, lr}
    b6da:	b090      	sub	sp, #64	; 0x40
    b6dc:	af00      	add	r7, sp, #0
    b6de:	60f8      	str	r0, [r7, #12]
    b6e0:	60b9      	str	r1, [r7, #8]
    b6e2:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b6e4:	68fb      	ldr	r3, [r7, #12]
    b6e6:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b6e8:	68fb      	ldr	r3, [r7, #12]
    b6ea:	681b      	ldr	r3, [r3, #0]
    b6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b6ee:	f107 0314 	add.w	r3, r7, #20
    b6f2:	2200      	movs	r2, #0
    b6f4:	601a      	str	r2, [r3, #0]
    b6f6:	605a      	str	r2, [r3, #4]
    b6f8:	609a      	str	r2, [r3, #8]
    b6fa:	60da      	str	r2, [r3, #12]
    b6fc:	611a      	str	r2, [r3, #16]
    b6fe:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b702:	7b1b      	ldrb	r3, [r3, #12]
    b704:	2b00      	cmp	r3, #0
    b706:	d001      	beq.n	b70c <n25q256a_erase+0x34>
    b708:	2206      	movs	r2, #6
    b70a:	e000      	b.n	b70e <n25q256a_erase+0x36>
    b70c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b70e:	7d3b      	ldrb	r3, [r7, #20]
    b710:	f362 0302 	bfi	r3, r2, #0, #3
    b714:	753b      	strb	r3, [r7, #20]
    b716:	7d3b      	ldrb	r3, [r7, #20]
    b718:	f043 0310 	orr.w	r3, r3, #16
    b71c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b71e:	687b      	ldr	r3, [r7, #4]
    b720:	4a56      	ldr	r2, [pc, #344]	; (b87c <n25q256a_erase+0x1a4>)
    b722:	4293      	cmp	r3, r2
    b724:	bf94      	ite	ls
    b726:	2301      	movls	r3, #1
    b728:	2300      	movhi	r3, #0
    b72a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b72c:	7d3b      	ldrb	r3, [r7, #20]
    b72e:	f362 1345 	bfi	r3, r2, #5, #1
    b732:	753b      	strb	r3, [r7, #20]
    b734:	7d7b      	ldrb	r3, [r7, #21]
    b736:	2202      	movs	r2, #2
    b738:	f362 1305 	bfi	r3, r2, #4, #2
    b73c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b73e:	68bb      	ldr	r3, [r7, #8]
    b740:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b742:	687b      	ldr	r3, [r7, #4]
    b744:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b746:	2300      	movs	r3, #0
    b748:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b74a:	687b      	ldr	r3, [r7, #4]
    b74c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b750:	2b00      	cmp	r3, #0
    b752:	d104      	bne.n	b75e <n25q256a_erase+0x86>
    b754:	68bb      	ldr	r3, [r7, #8]
    b756:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b75a:	2b00      	cmp	r3, #0
    b75c:	d002      	beq.n	b764 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b75e:	f06f 030c 	mvn.w	r3, #12
    b762:	e087      	b.n	b874 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b764:	687b      	ldr	r3, [r7, #4]
    b766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b76a:	d368      	bcc.n	b83e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b76c:	23c7      	movs	r3, #199	; 0xc7
    b76e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b770:	7d3b      	ldrb	r3, [r7, #20]
    b772:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b776:	b2db      	uxtb	r3, r3
    b778:	2201      	movs	r2, #1
    b77a:	4619      	mov	r1, r3
    b77c:	68f8      	ldr	r0, [r7, #12]
    b77e:	4b40      	ldr	r3, [pc, #256]	; (b880 <n25q256a_erase+0x1a8>)
    b780:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b782:	f107 0314 	add.w	r3, r7, #20
    b786:	4619      	mov	r1, r3
    b788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b78a:	4b3e      	ldr	r3, [pc, #248]	; (b884 <n25q256a_erase+0x1ac>)
    b78c:	4798      	blx	r3
    b78e:	e059      	b.n	b844 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b792:	b29b      	uxth	r3, r3
    b794:	2b00      	cmp	r3, #0
    b796:	d11f      	bne.n	b7d8 <n25q256a_erase+0x100>
    b798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b79a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b79e:	d31b      	bcc.n	b7d8 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b7a2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b7a4:	23d8      	movs	r3, #216	; 0xd8
    b7a6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b7a8:	7d3b      	ldrb	r3, [r7, #20]
    b7aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b7ae:	b2db      	uxtb	r3, r3
    b7b0:	2201      	movs	r2, #1
    b7b2:	4619      	mov	r1, r3
    b7b4:	68f8      	ldr	r0, [r7, #12]
    b7b6:	4b32      	ldr	r3, [pc, #200]	; (b880 <n25q256a_erase+0x1a8>)
    b7b8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b7ba:	f107 0314 	add.w	r3, r7, #20
    b7be:	4619      	mov	r1, r3
    b7c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b7c2:	4b30      	ldr	r3, [pc, #192]	; (b884 <n25q256a_erase+0x1ac>)
    b7c4:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b7c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b7d0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b7d4:	63bb      	str	r3, [r7, #56]	; 0x38
    b7d6:	e023      	b.n	b820 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b7da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b7de:	d31b      	bcc.n	b818 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b7e2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b7e4:	2320      	movs	r3, #32
    b7e6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b7e8:	7d3b      	ldrb	r3, [r7, #20]
    b7ea:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b7ee:	b2db      	uxtb	r3, r3
    b7f0:	2201      	movs	r2, #1
    b7f2:	4619      	mov	r1, r3
    b7f4:	68f8      	ldr	r0, [r7, #12]
    b7f6:	4b22      	ldr	r3, [pc, #136]	; (b880 <n25q256a_erase+0x1a8>)
    b7f8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b7fa:	f107 0314 	add.w	r3, r7, #20
    b7fe:	4619      	mov	r1, r3
    b800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b802:	4b20      	ldr	r3, [pc, #128]	; (b884 <n25q256a_erase+0x1ac>)
    b804:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b810:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b814:	63bb      	str	r3, [r7, #56]	; 0x38
    b816:	e003      	b.n	b820 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b818:	f06f 030c 	mvn.w	r3, #12
    b81c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b81e:	e011      	b.n	b844 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b820:	bf00      	nop
    b822:	7d3b      	ldrb	r3, [r7, #20]
    b824:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b828:	b2db      	uxtb	r3, r3
    b82a:	2270      	movs	r2, #112	; 0x70
    b82c:	4619      	mov	r1, r3
    b82e:	68f8      	ldr	r0, [r7, #12]
    b830:	4b15      	ldr	r3, [pc, #84]	; (b888 <n25q256a_erase+0x1b0>)
    b832:	4798      	blx	r3
    b834:	4603      	mov	r3, r0
    b836:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b83a:	2b00      	cmp	r3, #0
    b83c:	d0f1      	beq.n	b822 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b840:	2b00      	cmp	r3, #0
    b842:	d1a5      	bne.n	b790 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b844:	bf00      	nop
    b846:	7d3b      	ldrb	r3, [r7, #20]
    b848:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b84c:	b2db      	uxtb	r3, r3
    b84e:	2270      	movs	r2, #112	; 0x70
    b850:	4619      	mov	r1, r3
    b852:	68f8      	ldr	r0, [r7, #12]
    b854:	4b0c      	ldr	r3, [pc, #48]	; (b888 <n25q256a_erase+0x1b0>)
    b856:	4798      	blx	r3
    b858:	4603      	mov	r3, r0
    b85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b85e:	2b00      	cmp	r3, #0
    b860:	d0f1      	beq.n	b846 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b864:	7b5b      	ldrb	r3, [r3, #13]
    b866:	2b00      	cmp	r3, #0
    b868:	d003      	beq.n	b872 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b86a:	2101      	movs	r1, #1
    b86c:	68f8      	ldr	r0, [r7, #12]
    b86e:	4b07      	ldr	r3, [pc, #28]	; (b88c <n25q256a_erase+0x1b4>)
    b870:	4798      	blx	r3
	}
	return rc;
    b872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b874:	4618      	mov	r0, r3
    b876:	3740      	adds	r7, #64	; 0x40
    b878:	46bd      	mov	sp, r7
    b87a:	bd80      	pop	{r7, pc}
    b87c:	001fffff 	.word	0x001fffff
    b880:	0000b339 	.word	0x0000b339
    b884:	000026f9 	.word	0x000026f9
    b888:	0000b1fd 	.word	0x0000b1fd
    b88c:	0000b131 	.word	0x0000b131

0000b890 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b890:	b590      	push	{r4, r7, lr}
    b892:	b085      	sub	sp, #20
    b894:	af00      	add	r7, sp, #0
    b896:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b898:	687b      	ldr	r3, [r7, #4]
    b89a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b89c:	68fb      	ldr	r3, [r7, #12]
    b89e:	7b1b      	ldrb	r3, [r3, #12]
    b8a0:	2b00      	cmp	r3, #0
    b8a2:	d001      	beq.n	b8a8 <n25q256a_enable_xip+0x18>
    b8a4:	2306      	movs	r3, #6
    b8a6:	e000      	b.n	b8aa <n25q256a_enable_xip+0x1a>
    b8a8:	2300      	movs	r3, #0
    b8aa:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b8ac:	68fb      	ldr	r3, [r7, #12]
    b8ae:	7b5b      	ldrb	r3, [r3, #13]
    b8b0:	2b00      	cmp	r3, #0
    b8b2:	d129      	bne.n	b908 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b8b4:	7afb      	ldrb	r3, [r7, #11]
    b8b6:	2285      	movs	r2, #133	; 0x85
    b8b8:	4619      	mov	r1, r3
    b8ba:	6878      	ldr	r0, [r7, #4]
    b8bc:	4b15      	ldr	r3, [pc, #84]	; (b914 <n25q256a_enable_xip+0x84>)
    b8be:	4798      	blx	r3
    b8c0:	4603      	mov	r3, r0
    b8c2:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b8c4:	7abb      	ldrb	r3, [r7, #10]
    b8c6:	f003 0308 	and.w	r3, r3, #8
    b8ca:	2b00      	cmp	r3, #0
    b8cc:	d015      	beq.n	b8fa <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b8ce:	7abb      	ldrb	r3, [r7, #10]
    b8d0:	f023 0308 	bic.w	r3, r3, #8
    b8d4:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b8d6:	7abb      	ldrb	r3, [r7, #10]
    b8d8:	7af9      	ldrb	r1, [r7, #11]
    b8da:	2281      	movs	r2, #129	; 0x81
    b8dc:	6878      	ldr	r0, [r7, #4]
    b8de:	4c0e      	ldr	r4, [pc, #56]	; (b918 <n25q256a_enable_xip+0x88>)
    b8e0:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b8e2:	bf00      	nop
    b8e4:	7afb      	ldrb	r3, [r7, #11]
    b8e6:	2270      	movs	r2, #112	; 0x70
    b8e8:	4619      	mov	r1, r3
    b8ea:	6878      	ldr	r0, [r7, #4]
    b8ec:	4b09      	ldr	r3, [pc, #36]	; (b914 <n25q256a_enable_xip+0x84>)
    b8ee:	4798      	blx	r3
    b8f0:	4603      	mov	r3, r0
    b8f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d0f4      	beq.n	b8e4 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b8fa:	68fb      	ldr	r3, [r7, #12]
    b8fc:	2201      	movs	r2, #1
    b8fe:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b900:	2101      	movs	r1, #1
    b902:	6878      	ldr	r0, [r7, #4]
    b904:	4b05      	ldr	r3, [pc, #20]	; (b91c <n25q256a_enable_xip+0x8c>)
    b906:	4798      	blx	r3
	}
	return ERR_NONE;
    b908:	2300      	movs	r3, #0
}
    b90a:	4618      	mov	r0, r3
    b90c:	3714      	adds	r7, #20
    b90e:	46bd      	mov	sp, r7
    b910:	bd90      	pop	{r4, r7, pc}
    b912:	bf00      	nop
    b914:	0000b1fd 	.word	0x0000b1fd
    b918:	0000b299 	.word	0x0000b299
    b91c:	0000b131 	.word	0x0000b131

0000b920 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b920:	b580      	push	{r7, lr}
    b922:	b086      	sub	sp, #24
    b924:	af00      	add	r7, sp, #0
    b926:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b928:	687b      	ldr	r3, [r7, #4]
    b92a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b92c:	687b      	ldr	r3, [r7, #4]
    b92e:	681b      	ldr	r3, [r3, #0]
    b930:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b932:	697b      	ldr	r3, [r7, #20]
    b934:	7b1b      	ldrb	r3, [r3, #12]
    b936:	2b00      	cmp	r3, #0
    b938:	d001      	beq.n	b93e <n25q256a_disable_xip+0x1e>
    b93a:	2306      	movs	r3, #6
    b93c:	e000      	b.n	b940 <n25q256a_disable_xip+0x20>
    b93e:	2300      	movs	r3, #0
    b940:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    b942:	2100      	movs	r1, #0
    b944:	6878      	ldr	r0, [r7, #4]
    b946:	4b15      	ldr	r3, [pc, #84]	; (b99c <n25q256a_disable_xip+0x7c>)
    b948:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b94a:	7bfb      	ldrb	r3, [r7, #15]
    b94c:	2285      	movs	r2, #133	; 0x85
    b94e:	4619      	mov	r1, r3
    b950:	6878      	ldr	r0, [r7, #4]
    b952:	4b13      	ldr	r3, [pc, #76]	; (b9a0 <n25q256a_disable_xip+0x80>)
    b954:	4798      	blx	r3
    b956:	4603      	mov	r3, r0
    b958:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b95a:	7bbb      	ldrb	r3, [r7, #14]
    b95c:	f003 0308 	and.w	r3, r3, #8
    b960:	2b00      	cmp	r3, #0
    b962:	d113      	bne.n	b98c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b964:	697b      	ldr	r3, [r7, #20]
    b966:	689b      	ldr	r3, [r3, #8]
    b968:	2b00      	cmp	r3, #0
    b96a:	d00f      	beq.n	b98c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b96c:	693b      	ldr	r3, [r7, #16]
    b96e:	681b      	ldr	r3, [r3, #0]
    b970:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b972:	6938      	ldr	r0, [r7, #16]
    b974:	4b0b      	ldr	r3, [pc, #44]	; (b9a4 <n25q256a_disable_xip+0x84>)
    b976:	4798      	blx	r3
			n25q->pin_exit_xip();
    b978:	697b      	ldr	r3, [r7, #20]
    b97a:	689b      	ldr	r3, [r3, #8]
    b97c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b97e:	68b9      	ldr	r1, [r7, #8]
    b980:	6938      	ldr	r0, [r7, #16]
    b982:	4b09      	ldr	r3, [pc, #36]	; (b9a8 <n25q256a_disable_xip+0x88>)
    b984:	4798      	blx	r3
			qspi_sync_enable(descr);
    b986:	6938      	ldr	r0, [r7, #16]
    b988:	4b08      	ldr	r3, [pc, #32]	; (b9ac <n25q256a_disable_xip+0x8c>)
    b98a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b98c:	697b      	ldr	r3, [r7, #20]
    b98e:	2200      	movs	r2, #0
    b990:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b992:	2300      	movs	r3, #0
}
    b994:	4618      	mov	r0, r3
    b996:	3718      	adds	r7, #24
    b998:	46bd      	mov	sp, r7
    b99a:	bd80      	pop	{r7, pc}
    b99c:	0000b131 	.word	0x0000b131
    b9a0:	0000b1fd 	.word	0x0000b1fd
    b9a4:	000026bd 	.word	0x000026bd
    b9a8:	00002635 	.word	0x00002635
    b9ac:	00002681 	.word	0x00002681

0000b9b0 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b9b0:	b480      	push	{r7}
    b9b2:	b085      	sub	sp, #20
    b9b4:	af00      	add	r7, sp, #0
    b9b6:	60f8      	str	r0, [r7, #12]
    b9b8:	60b9      	str	r1, [r7, #8]
    b9ba:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b9bc:	68fb      	ldr	r3, [r7, #12]
    b9be:	68ba      	ldr	r2, [r7, #8]
    b9c0:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b9c2:	68fb      	ldr	r3, [r7, #12]
    b9c4:	687a      	ldr	r2, [r7, #4]
    b9c6:	605a      	str	r2, [r3, #4]

	return me;
    b9c8:	68fb      	ldr	r3, [r7, #12]
}
    b9ca:	4618      	mov	r0, r3
    b9cc:	3714      	adds	r7, #20
    b9ce:	46bd      	mov	sp, r7
    b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9d4:	4770      	bx	lr

0000b9d6 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b9d6:	b480      	push	{r7}
    b9d8:	b083      	sub	sp, #12
    b9da:	af00      	add	r7, sp, #0
    b9dc:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b9de:	687b      	ldr	r3, [r7, #4]
    b9e0:	781b      	ldrb	r3, [r3, #0]
    b9e2:	b29a      	uxth	r2, r3
    b9e4:	687b      	ldr	r3, [r7, #4]
    b9e6:	3301      	adds	r3, #1
    b9e8:	781b      	ldrb	r3, [r3, #0]
    b9ea:	b29b      	uxth	r3, r3
    b9ec:	021b      	lsls	r3, r3, #8
    b9ee:	b29b      	uxth	r3, r3
    b9f0:	4413      	add	r3, r2
    b9f2:	b29b      	uxth	r3, r3
}
    b9f4:	4618      	mov	r0, r3
    b9f6:	370c      	adds	r7, #12
    b9f8:	46bd      	mov	sp, r7
    b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b9fe:	4770      	bx	lr

0000ba00 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    ba00:	b480      	push	{r7}
    ba02:	b083      	sub	sp, #12
    ba04:	af00      	add	r7, sp, #0
    ba06:	6078      	str	r0, [r7, #4]
	return desc[0];
    ba08:	687b      	ldr	r3, [r7, #4]
    ba0a:	781b      	ldrb	r3, [r3, #0]
}
    ba0c:	4618      	mov	r0, r3
    ba0e:	370c      	adds	r7, #12
    ba10:	46bd      	mov	sp, r7
    ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba16:	4770      	bx	lr

0000ba18 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    ba18:	b580      	push	{r7, lr}
    ba1a:	b082      	sub	sp, #8
    ba1c:	af00      	add	r7, sp, #0
    ba1e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ba20:	6878      	ldr	r0, [r7, #4]
    ba22:	4b05      	ldr	r3, [pc, #20]	; (ba38 <usb_desc_next+0x20>)
    ba24:	4798      	blx	r3
    ba26:	4603      	mov	r3, r0
    ba28:	461a      	mov	r2, r3
    ba2a:	687b      	ldr	r3, [r7, #4]
    ba2c:	4413      	add	r3, r2
}
    ba2e:	4618      	mov	r0, r3
    ba30:	3708      	adds	r7, #8
    ba32:	46bd      	mov	sp, r7
    ba34:	bd80      	pop	{r7, pc}
    ba36:	bf00      	nop
    ba38:	0000ba01 	.word	0x0000ba01

0000ba3c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    ba3c:	b580      	push	{r7, lr}
    ba3e:	b08c      	sub	sp, #48	; 0x30
    ba40:	af00      	add	r7, sp, #0
    ba42:	6078      	str	r0, [r7, #4]
    ba44:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    ba46:	687b      	ldr	r3, [r7, #4]
    ba48:	689b      	ldr	r3, [r3, #8]
    ba4a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    ba4c:	683b      	ldr	r3, [r7, #0]
    ba4e:	681b      	ldr	r3, [r3, #0]
    ba50:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    ba52:	2300      	movs	r3, #0
    ba54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ba58:	e08f      	b.n	bb7a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    ba5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba5c:	2b00      	cmp	r3, #0
    ba5e:	d102      	bne.n	ba66 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    ba60:	f06f 0309 	mvn.w	r3, #9
    ba64:	e092      	b.n	bb8c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    ba66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba68:	789b      	ldrb	r3, [r3, #2]
    ba6a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba6e:	795b      	ldrb	r3, [r3, #5]
    ba70:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    ba72:	7c7b      	ldrb	r3, [r7, #17]
    ba74:	2b02      	cmp	r3, #2
    ba76:	d002      	beq.n	ba7e <cdcdf_acm_enable+0x42>
    ba78:	7c7b      	ldrb	r3, [r7, #17]
    ba7a:	2b0a      	cmp	r3, #10
    ba7c:	d121      	bne.n	bac2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    ba7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ba82:	6a3a      	ldr	r2, [r7, #32]
    ba84:	5cd2      	ldrb	r2, [r2, r3]
    ba86:	7bbb      	ldrb	r3, [r7, #14]
    ba88:	429a      	cmp	r2, r3
    ba8a:	d102      	bne.n	ba92 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    ba8c:	f06f 0311 	mvn.w	r3, #17
    ba90:	e07c      	b.n	bb8c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    ba92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    ba96:	6a3a      	ldr	r2, [r7, #32]
    ba98:	5cd3      	ldrb	r3, [r2, r3]
    ba9a:	2bff      	cmp	r3, #255	; 0xff
    ba9c:	d002      	beq.n	baa4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    ba9e:	f06f 031b 	mvn.w	r3, #27
    baa2:	e073      	b.n	bb8c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    baa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    baa8:	7bb9      	ldrb	r1, [r7, #14]
    baaa:	6a3a      	ldr	r2, [r7, #32]
    baac:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    baae:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bab0:	683b      	ldr	r3, [r7, #0]
    bab2:	685b      	ldr	r3, [r3, #4]
    bab4:	2205      	movs	r2, #5
    bab6:	4619      	mov	r1, r3
    bab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    baba:	4b36      	ldr	r3, [pc, #216]	; (bb94 <cdcdf_acm_enable+0x158>)
    babc:	4798      	blx	r3
    babe:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bac0:	e047      	b.n	bb52 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bac2:	f06f 0309 	mvn.w	r3, #9
    bac6:	e061      	b.n	bb8c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    baca:	789b      	ldrb	r3, [r3, #2]
    bacc:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    bace:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bad0:	78db      	ldrb	r3, [r3, #3]
    bad2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bad6:	3304      	adds	r3, #4
    bad8:	4618      	mov	r0, r3
    bada:	4b2f      	ldr	r3, [pc, #188]	; (bb98 <cdcdf_acm_enable+0x15c>)
    badc:	4798      	blx	r3
    bade:	4603      	mov	r3, r0
    bae0:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bae2:	7ebb      	ldrb	r3, [r7, #26]
    bae4:	7ef9      	ldrb	r1, [r7, #27]
    bae6:	8bba      	ldrh	r2, [r7, #28]
    bae8:	4618      	mov	r0, r3
    baea:	4b2c      	ldr	r3, [pc, #176]	; (bb9c <cdcdf_acm_enable+0x160>)
    baec:	4798      	blx	r3
    baee:	4603      	mov	r3, r0
    baf0:	2b00      	cmp	r3, #0
    baf2:	d002      	beq.n	bafa <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    baf4:	f06f 0313 	mvn.w	r3, #19
    baf8:	e048      	b.n	bb8c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bafa:	7ebb      	ldrb	r3, [r7, #26]
    bafc:	b25b      	sxtb	r3, r3
    bafe:	2b00      	cmp	r3, #0
    bb00:	da0f      	bge.n	bb22 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bb02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb06:	7eb9      	ldrb	r1, [r7, #26]
    bb08:	6a3a      	ldr	r2, [r7, #32]
    bb0a:	4413      	add	r3, r2
    bb0c:	460a      	mov	r2, r1
    bb0e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bb10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb14:	6a3a      	ldr	r2, [r7, #32]
    bb16:	4413      	add	r3, r2
    bb18:	789b      	ldrb	r3, [r3, #2]
    bb1a:	4618      	mov	r0, r3
    bb1c:	4b20      	ldr	r3, [pc, #128]	; (bba0 <cdcdf_acm_enable+0x164>)
    bb1e:	4798      	blx	r3
    bb20:	e007      	b.n	bb32 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bb22:	7eba      	ldrb	r2, [r7, #26]
    bb24:	6a3b      	ldr	r3, [r7, #32]
    bb26:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bb28:	6a3b      	ldr	r3, [r7, #32]
    bb2a:	791b      	ldrb	r3, [r3, #4]
    bb2c:	4618      	mov	r0, r3
    bb2e:	4b1c      	ldr	r3, [pc, #112]	; (bba0 <cdcdf_acm_enable+0x164>)
    bb30:	4798      	blx	r3
			}
			desc->sod = ep;
    bb32:	683b      	ldr	r3, [r7, #0]
    bb34:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bb36:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bb38:	683b      	ldr	r3, [r7, #0]
    bb3a:	681b      	ldr	r3, [r3, #0]
    bb3c:	4618      	mov	r0, r3
    bb3e:	4b19      	ldr	r3, [pc, #100]	; (bba4 <cdcdf_acm_enable+0x168>)
    bb40:	4798      	blx	r3
    bb42:	4602      	mov	r2, r0
    bb44:	683b      	ldr	r3, [r7, #0]
    bb46:	685b      	ldr	r3, [r3, #4]
    bb48:	4619      	mov	r1, r3
    bb4a:	4610      	mov	r0, r2
    bb4c:	4b16      	ldr	r3, [pc, #88]	; (bba8 <cdcdf_acm_enable+0x16c>)
    bb4e:	4798      	blx	r3
    bb50:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb54:	2b00      	cmp	r3, #0
    bb56:	d1b7      	bne.n	bac8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bb58:	683b      	ldr	r3, [r7, #0]
    bb5a:	681b      	ldr	r3, [r3, #0]
    bb5c:	4618      	mov	r0, r3
    bb5e:	4b11      	ldr	r3, [pc, #68]	; (bba4 <cdcdf_acm_enable+0x168>)
    bb60:	4798      	blx	r3
    bb62:	683b      	ldr	r3, [r7, #0]
    bb64:	685b      	ldr	r3, [r3, #4]
    bb66:	2204      	movs	r2, #4
    bb68:	4619      	mov	r1, r3
    bb6a:	4b0a      	ldr	r3, [pc, #40]	; (bb94 <cdcdf_acm_enable+0x158>)
    bb6c:	4798      	blx	r3
    bb6e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bb70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb74:	3301      	adds	r3, #1
    bb76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bb7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb7e:	2b01      	cmp	r3, #1
    bb80:	f67f af6b 	bls.w	ba5a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bb84:	4b09      	ldr	r3, [pc, #36]	; (bbac <cdcdf_acm_enable+0x170>)
    bb86:	2201      	movs	r2, #1
    bb88:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bb8a:	2300      	movs	r3, #0
}
    bb8c:	4618      	mov	r0, r3
    bb8e:	3730      	adds	r7, #48	; 0x30
    bb90:	46bd      	mov	sp, r7
    bb92:	bd80      	pop	{r7, pc}
    bb94:	0000cdfd 	.word	0x0000cdfd
    bb98:	0000b9d7 	.word	0x0000b9d7
    bb9c:	000032ad 	.word	0x000032ad
    bba0:	00003399 	.word	0x00003399
    bba4:	0000ba19 	.word	0x0000ba19
    bba8:	0000ce59 	.word	0x0000ce59
    bbac:	20002584 	.word	0x20002584

0000bbb0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bbb0:	b580      	push	{r7, lr}
    bbb2:	b088      	sub	sp, #32
    bbb4:	af00      	add	r7, sp, #0
    bbb6:	6078      	str	r0, [r7, #4]
    bbb8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bbba:	687b      	ldr	r3, [r7, #4]
    bbbc:	689b      	ldr	r3, [r3, #8]
    bbbe:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bbc0:	683b      	ldr	r3, [r7, #0]
    bbc2:	2b00      	cmp	r3, #0
    bbc4:	d00c      	beq.n	bbe0 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bbc6:	683b      	ldr	r3, [r7, #0]
    bbc8:	681b      	ldr	r3, [r3, #0]
    bbca:	795b      	ldrb	r3, [r3, #5]
    bbcc:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bbce:	7c7b      	ldrb	r3, [r7, #17]
    bbd0:	2b02      	cmp	r3, #2
    bbd2:	d005      	beq.n	bbe0 <cdcdf_acm_disable+0x30>
    bbd4:	7c7b      	ldrb	r3, [r7, #17]
    bbd6:	2b0a      	cmp	r3, #10
    bbd8:	d002      	beq.n	bbe0 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bbda:	f06f 0309 	mvn.w	r3, #9
    bbde:	e035      	b.n	bc4c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bbe0:	2300      	movs	r3, #0
    bbe2:	77fb      	strb	r3, [r7, #31]
    bbe4:	e01f      	b.n	bc26 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bbe6:	7ffb      	ldrb	r3, [r7, #31]
    bbe8:	69ba      	ldr	r2, [r7, #24]
    bbea:	5cd3      	ldrb	r3, [r2, r3]
    bbec:	2bff      	cmp	r3, #255	; 0xff
    bbee:	d016      	beq.n	bc1e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    bbf0:	7ffb      	ldrb	r3, [r7, #31]
    bbf2:	69ba      	ldr	r2, [r7, #24]
    bbf4:	21ff      	movs	r1, #255	; 0xff
    bbf6:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    bbf8:	7ffb      	ldrb	r3, [r7, #31]
    bbfa:	69ba      	ldr	r2, [r7, #24]
    bbfc:	4413      	add	r3, r2
    bbfe:	789b      	ldrb	r3, [r3, #2]
    bc00:	2bff      	cmp	r3, #255	; 0xff
    bc02:	d00d      	beq.n	bc20 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bc04:	7ffb      	ldrb	r3, [r7, #31]
    bc06:	69ba      	ldr	r2, [r7, #24]
    bc08:	4413      	add	r3, r2
    bc0a:	789b      	ldrb	r3, [r3, #2]
    bc0c:	4618      	mov	r0, r3
    bc0e:	4b11      	ldr	r3, [pc, #68]	; (bc54 <cdcdf_acm_disable+0xa4>)
    bc10:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    bc12:	7ffb      	ldrb	r3, [r7, #31]
    bc14:	69ba      	ldr	r2, [r7, #24]
    bc16:	4413      	add	r3, r2
    bc18:	22ff      	movs	r2, #255	; 0xff
    bc1a:	709a      	strb	r2, [r3, #2]
    bc1c:	e000      	b.n	bc20 <cdcdf_acm_disable+0x70>
			continue;
    bc1e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    bc20:	7ffb      	ldrb	r3, [r7, #31]
    bc22:	3301      	adds	r3, #1
    bc24:	77fb      	strb	r3, [r7, #31]
    bc26:	7ffb      	ldrb	r3, [r7, #31]
    bc28:	2b01      	cmp	r3, #1
    bc2a:	d9dc      	bls.n	bbe6 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    bc2c:	69bb      	ldr	r3, [r7, #24]
    bc2e:	791b      	ldrb	r3, [r3, #4]
    bc30:	2bff      	cmp	r3, #255	; 0xff
    bc32:	d007      	beq.n	bc44 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    bc34:	69bb      	ldr	r3, [r7, #24]
    bc36:	791b      	ldrb	r3, [r3, #4]
    bc38:	4618      	mov	r0, r3
    bc3a:	4b06      	ldr	r3, [pc, #24]	; (bc54 <cdcdf_acm_disable+0xa4>)
    bc3c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bc3e:	69bb      	ldr	r3, [r7, #24]
    bc40:	22ff      	movs	r2, #255	; 0xff
    bc42:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    bc44:	4b04      	ldr	r3, [pc, #16]	; (bc58 <cdcdf_acm_disable+0xa8>)
    bc46:	2200      	movs	r2, #0
    bc48:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bc4a:	2300      	movs	r3, #0
}
    bc4c:	4618      	mov	r0, r3
    bc4e:	3720      	adds	r7, #32
    bc50:	46bd      	mov	sp, r7
    bc52:	bd80      	pop	{r7, pc}
    bc54:	00003349 	.word	0x00003349
    bc58:	20002584 	.word	0x20002584

0000bc5c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    bc5c:	b580      	push	{r7, lr}
    bc5e:	b084      	sub	sp, #16
    bc60:	af00      	add	r7, sp, #0
    bc62:	60f8      	str	r0, [r7, #12]
    bc64:	460b      	mov	r3, r1
    bc66:	607a      	str	r2, [r7, #4]
    bc68:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    bc6a:	7afb      	ldrb	r3, [r7, #11]
    bc6c:	2b01      	cmp	r3, #1
    bc6e:	d009      	beq.n	bc84 <cdcdf_acm_ctrl+0x28>
    bc70:	2b02      	cmp	r3, #2
    bc72:	d00d      	beq.n	bc90 <cdcdf_acm_ctrl+0x34>
    bc74:	2b00      	cmp	r3, #0
    bc76:	d10e      	bne.n	bc96 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    bc78:	6879      	ldr	r1, [r7, #4]
    bc7a:	68f8      	ldr	r0, [r7, #12]
    bc7c:	4b09      	ldr	r3, [pc, #36]	; (bca4 <cdcdf_acm_ctrl+0x48>)
    bc7e:	4798      	blx	r3
    bc80:	4603      	mov	r3, r0
    bc82:	e00a      	b.n	bc9a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    bc84:	6879      	ldr	r1, [r7, #4]
    bc86:	68f8      	ldr	r0, [r7, #12]
    bc88:	4b07      	ldr	r3, [pc, #28]	; (bca8 <cdcdf_acm_ctrl+0x4c>)
    bc8a:	4798      	blx	r3
    bc8c:	4603      	mov	r3, r0
    bc8e:	e004      	b.n	bc9a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    bc90:	f06f 031a 	mvn.w	r3, #26
    bc94:	e001      	b.n	bc9a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    bc96:	f06f 030c 	mvn.w	r3, #12
	}
}
    bc9a:	4618      	mov	r0, r3
    bc9c:	3710      	adds	r7, #16
    bc9e:	46bd      	mov	sp, r7
    bca0:	bd80      	pop	{r7, pc}
    bca2:	bf00      	nop
    bca4:	0000ba3d 	.word	0x0000ba3d
    bca8:	0000bbb1 	.word	0x0000bbb1

0000bcac <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bcac:	b590      	push	{r4, r7, lr}
    bcae:	b087      	sub	sp, #28
    bcb0:	af00      	add	r7, sp, #0
    bcb2:	4603      	mov	r3, r0
    bcb4:	6039      	str	r1, [r7, #0]
    bcb6:	71fb      	strb	r3, [r7, #7]
    bcb8:	4613      	mov	r3, r2
    bcba:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    bcbc:	683b      	ldr	r3, [r7, #0]
    bcbe:	799a      	ldrb	r2, [r3, #6]
    bcc0:	79db      	ldrb	r3, [r3, #7]
    bcc2:	021b      	lsls	r3, r3, #8
    bcc4:	4313      	orrs	r3, r2
    bcc6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bcc8:	4b2b      	ldr	r3, [pc, #172]	; (bd78 <cdcdf_acm_set_req+0xcc>)
    bcca:	4798      	blx	r3
    bccc:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    bcce:	683b      	ldr	r3, [r7, #0]
    bcd0:	785b      	ldrb	r3, [r3, #1]
    bcd2:	2b20      	cmp	r3, #32
    bcd4:	d002      	beq.n	bcdc <cdcdf_acm_set_req+0x30>
    bcd6:	2b22      	cmp	r3, #34	; 0x22
    bcd8:	d034      	beq.n	bd44 <cdcdf_acm_set_req+0x98>
    bcda:	e046      	b.n	bd6a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bcdc:	8afb      	ldrh	r3, [r7, #22]
    bcde:	2b07      	cmp	r3, #7
    bce0:	d002      	beq.n	bce8 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    bce2:	f04f 33ff 	mov.w	r3, #4294967295
    bce6:	e042      	b.n	bd6e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    bce8:	79bb      	ldrb	r3, [r7, #6]
    bcea:	2b00      	cmp	r3, #0
    bcec:	d107      	bne.n	bcfe <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    bcee:	8afa      	ldrh	r2, [r7, #22]
    bcf0:	79f8      	ldrb	r0, [r7, #7]
    bcf2:	2300      	movs	r3, #0
    bcf4:	6939      	ldr	r1, [r7, #16]
    bcf6:	4c21      	ldr	r4, [pc, #132]	; (bd7c <cdcdf_acm_set_req+0xd0>)
    bcf8:	47a0      	blx	r4
    bcfa:	4603      	mov	r3, r0
    bcfc:	e037      	b.n	bd6e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bcfe:	693a      	ldr	r2, [r7, #16]
    bd00:	f107 0308 	add.w	r3, r7, #8
    bd04:	6810      	ldr	r0, [r2, #0]
    bd06:	6018      	str	r0, [r3, #0]
    bd08:	8891      	ldrh	r1, [r2, #4]
    bd0a:	7992      	ldrb	r2, [r2, #6]
    bd0c:	8099      	strh	r1, [r3, #4]
    bd0e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bd10:	4b1b      	ldr	r3, [pc, #108]	; (bd80 <cdcdf_acm_set_req+0xd4>)
    bd12:	681b      	ldr	r3, [r3, #0]
    bd14:	2b00      	cmp	r3, #0
    bd16:	d008      	beq.n	bd2a <cdcdf_acm_set_req+0x7e>
    bd18:	4b19      	ldr	r3, [pc, #100]	; (bd80 <cdcdf_acm_set_req+0xd4>)
    bd1a:	681b      	ldr	r3, [r3, #0]
    bd1c:	f107 0208 	add.w	r2, r7, #8
    bd20:	4610      	mov	r0, r2
    bd22:	4798      	blx	r3
    bd24:	4603      	mov	r3, r0
    bd26:	2b00      	cmp	r3, #0
    bd28:	d00a      	beq.n	bd40 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    bd2a:	4b16      	ldr	r3, [pc, #88]	; (bd84 <cdcdf_acm_set_req+0xd8>)
    bd2c:	f107 0208 	add.w	r2, r7, #8
    bd30:	e892 0003 	ldmia.w	r2, {r0, r1}
    bd34:	6018      	str	r0, [r3, #0]
    bd36:	3304      	adds	r3, #4
    bd38:	8019      	strh	r1, [r3, #0]
    bd3a:	3302      	adds	r3, #2
    bd3c:	0c0a      	lsrs	r2, r1, #16
    bd3e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    bd40:	2300      	movs	r3, #0
    bd42:	e014      	b.n	bd6e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    bd44:	2300      	movs	r3, #0
    bd46:	2200      	movs	r2, #0
    bd48:	2100      	movs	r1, #0
    bd4a:	2000      	movs	r0, #0
    bd4c:	4c0b      	ldr	r4, [pc, #44]	; (bd7c <cdcdf_acm_set_req+0xd0>)
    bd4e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    bd50:	4b0d      	ldr	r3, [pc, #52]	; (bd88 <cdcdf_acm_set_req+0xdc>)
    bd52:	681b      	ldr	r3, [r3, #0]
    bd54:	2b00      	cmp	r3, #0
    bd56:	d006      	beq.n	bd66 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    bd58:	4b0b      	ldr	r3, [pc, #44]	; (bd88 <cdcdf_acm_set_req+0xdc>)
    bd5a:	681b      	ldr	r3, [r3, #0]
    bd5c:	683a      	ldr	r2, [r7, #0]
    bd5e:	8852      	ldrh	r2, [r2, #2]
    bd60:	b292      	uxth	r2, r2
    bd62:	4610      	mov	r0, r2
    bd64:	4798      	blx	r3
		}
		return ERR_NONE;
    bd66:	2300      	movs	r3, #0
    bd68:	e001      	b.n	bd6e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    bd6a:	f06f 030c 	mvn.w	r3, #12
	}
}
    bd6e:	4618      	mov	r0, r3
    bd70:	371c      	adds	r7, #28
    bd72:	46bd      	mov	sp, r7
    bd74:	bd90      	pop	{r4, r7, pc}
    bd76:	bf00      	nop
    bd78:	0000ccf9 	.word	0x0000ccf9
    bd7c:	0000cb6d 	.word	0x0000cb6d
    bd80:	20002598 	.word	0x20002598
    bd84:	2000258c 	.word	0x2000258c
    bd88:	20002594 	.word	0x20002594

0000bd8c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bd8c:	b590      	push	{r4, r7, lr}
    bd8e:	b085      	sub	sp, #20
    bd90:	af00      	add	r7, sp, #0
    bd92:	4603      	mov	r3, r0
    bd94:	6039      	str	r1, [r7, #0]
    bd96:	71fb      	strb	r3, [r7, #7]
    bd98:	4613      	mov	r3, r2
    bd9a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    bd9c:	683b      	ldr	r3, [r7, #0]
    bd9e:	799a      	ldrb	r2, [r3, #6]
    bda0:	79db      	ldrb	r3, [r3, #7]
    bda2:	021b      	lsls	r3, r3, #8
    bda4:	4313      	orrs	r3, r2
    bda6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    bda8:	79bb      	ldrb	r3, [r7, #6]
    bdaa:	2b01      	cmp	r3, #1
    bdac:	d101      	bne.n	bdb2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    bdae:	2300      	movs	r3, #0
    bdb0:	e013      	b.n	bdda <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    bdb2:	683b      	ldr	r3, [r7, #0]
    bdb4:	785b      	ldrb	r3, [r3, #1]
    bdb6:	2b21      	cmp	r3, #33	; 0x21
    bdb8:	d10d      	bne.n	bdd6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bdba:	89fb      	ldrh	r3, [r7, #14]
    bdbc:	2b07      	cmp	r3, #7
    bdbe:	d002      	beq.n	bdc6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    bdc0:	f04f 33ff 	mov.w	r3, #4294967295
    bdc4:	e009      	b.n	bdda <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    bdc6:	89fa      	ldrh	r2, [r7, #14]
    bdc8:	79f8      	ldrb	r0, [r7, #7]
    bdca:	2300      	movs	r3, #0
    bdcc:	4905      	ldr	r1, [pc, #20]	; (bde4 <cdcdf_acm_get_req+0x58>)
    bdce:	4c06      	ldr	r4, [pc, #24]	; (bde8 <cdcdf_acm_get_req+0x5c>)
    bdd0:	47a0      	blx	r4
    bdd2:	4603      	mov	r3, r0
    bdd4:	e001      	b.n	bdda <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    bdd6:	f06f 030c 	mvn.w	r3, #12
	}
}
    bdda:	4618      	mov	r0, r3
    bddc:	3714      	adds	r7, #20
    bdde:	46bd      	mov	sp, r7
    bde0:	bd90      	pop	{r4, r7, pc}
    bde2:	bf00      	nop
    bde4:	2000258c 	.word	0x2000258c
    bde8:	0000cb6d 	.word	0x0000cb6d

0000bdec <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bdec:	b580      	push	{r7, lr}
    bdee:	b082      	sub	sp, #8
    bdf0:	af00      	add	r7, sp, #0
    bdf2:	4603      	mov	r3, r0
    bdf4:	6039      	str	r1, [r7, #0]
    bdf6:	71fb      	strb	r3, [r7, #7]
    bdf8:	4613      	mov	r3, r2
    bdfa:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bdfc:	683b      	ldr	r3, [r7, #0]
    bdfe:	781b      	ldrb	r3, [r3, #0]
    be00:	095b      	lsrs	r3, r3, #5
    be02:	b2db      	uxtb	r3, r3
    be04:	f003 0303 	and.w	r3, r3, #3
    be08:	2b01      	cmp	r3, #1
    be0a:	d002      	beq.n	be12 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    be0c:	f06f 0309 	mvn.w	r3, #9
    be10:	e026      	b.n	be60 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    be12:	683b      	ldr	r3, [r7, #0]
    be14:	889b      	ldrh	r3, [r3, #4]
    be16:	b29a      	uxth	r2, r3
    be18:	4b13      	ldr	r3, [pc, #76]	; (be68 <cdcdf_acm_req+0x7c>)
    be1a:	781b      	ldrb	r3, [r3, #0]
    be1c:	b29b      	uxth	r3, r3
    be1e:	429a      	cmp	r2, r3
    be20:	d007      	beq.n	be32 <cdcdf_acm_req+0x46>
    be22:	683b      	ldr	r3, [r7, #0]
    be24:	889b      	ldrh	r3, [r3, #4]
    be26:	b29a      	uxth	r2, r3
    be28:	4b0f      	ldr	r3, [pc, #60]	; (be68 <cdcdf_acm_req+0x7c>)
    be2a:	785b      	ldrb	r3, [r3, #1]
    be2c:	b29b      	uxth	r3, r3
    be2e:	429a      	cmp	r2, r3
    be30:	d114      	bne.n	be5c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    be32:	683b      	ldr	r3, [r7, #0]
    be34:	781b      	ldrb	r3, [r3, #0]
    be36:	b25b      	sxtb	r3, r3
    be38:	2b00      	cmp	r3, #0
    be3a:	da07      	bge.n	be4c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    be3c:	79ba      	ldrb	r2, [r7, #6]
    be3e:	79fb      	ldrb	r3, [r7, #7]
    be40:	6839      	ldr	r1, [r7, #0]
    be42:	4618      	mov	r0, r3
    be44:	4b09      	ldr	r3, [pc, #36]	; (be6c <cdcdf_acm_req+0x80>)
    be46:	4798      	blx	r3
    be48:	4603      	mov	r3, r0
    be4a:	e009      	b.n	be60 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    be4c:	79ba      	ldrb	r2, [r7, #6]
    be4e:	79fb      	ldrb	r3, [r7, #7]
    be50:	6839      	ldr	r1, [r7, #0]
    be52:	4618      	mov	r0, r3
    be54:	4b06      	ldr	r3, [pc, #24]	; (be70 <cdcdf_acm_req+0x84>)
    be56:	4798      	blx	r3
    be58:	4603      	mov	r3, r0
    be5a:	e001      	b.n	be60 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    be5c:	f06f 0309 	mvn.w	r3, #9
	}
}
    be60:	4618      	mov	r0, r3
    be62:	3708      	adds	r7, #8
    be64:	46bd      	mov	sp, r7
    be66:	bd80      	pop	{r7, pc}
    be68:	20002584 	.word	0x20002584
    be6c:	0000bd8d 	.word	0x0000bd8d
    be70:	0000bcad 	.word	0x0000bcad

0000be74 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    be74:	b580      	push	{r7, lr}
    be76:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    be78:	4b0b      	ldr	r3, [pc, #44]	; (bea8 <cdcdf_acm_init+0x34>)
    be7a:	4798      	blx	r3
    be7c:	4603      	mov	r3, r0
    be7e:	2b01      	cmp	r3, #1
    be80:	d902      	bls.n	be88 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    be82:	f06f 0310 	mvn.w	r3, #16
    be86:	e00d      	b.n	bea4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    be88:	4b08      	ldr	r3, [pc, #32]	; (beac <cdcdf_acm_init+0x38>)
    be8a:	4a09      	ldr	r2, [pc, #36]	; (beb0 <cdcdf_acm_init+0x3c>)
    be8c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    be8e:	4b07      	ldr	r3, [pc, #28]	; (beac <cdcdf_acm_init+0x38>)
    be90:	4a08      	ldr	r2, [pc, #32]	; (beb4 <cdcdf_acm_init+0x40>)
    be92:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    be94:	4805      	ldr	r0, [pc, #20]	; (beac <cdcdf_acm_init+0x38>)
    be96:	4b08      	ldr	r3, [pc, #32]	; (beb8 <cdcdf_acm_init+0x44>)
    be98:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    be9a:	4908      	ldr	r1, [pc, #32]	; (bebc <cdcdf_acm_init+0x48>)
    be9c:	2001      	movs	r0, #1
    be9e:	4b08      	ldr	r3, [pc, #32]	; (bec0 <cdcdf_acm_init+0x4c>)
    bea0:	4798      	blx	r3
	return ERR_NONE;
    bea2:	2300      	movs	r3, #0
}
    bea4:	4618      	mov	r0, r3
    bea6:	bd80      	pop	{r7, pc}
    bea8:	0000cd11 	.word	0x0000cd11
    beac:	20002578 	.word	0x20002578
    beb0:	0000bc5d 	.word	0x0000bc5d
    beb4:	20002584 	.word	0x20002584
    beb8:	0000cc79 	.word	0x0000cc79
    bebc:	200001d8 	.word	0x200001d8
    bec0:	0000cba9 	.word	0x0000cba9

0000bec4 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    bec4:	b590      	push	{r4, r7, lr}
    bec6:	b083      	sub	sp, #12
    bec8:	af00      	add	r7, sp, #0
    beca:	6078      	str	r0, [r7, #4]
    becc:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bece:	4b0b      	ldr	r3, [pc, #44]	; (befc <cdcdf_acm_read+0x38>)
    bed0:	4798      	blx	r3
    bed2:	4603      	mov	r3, r0
    bed4:	f083 0301 	eor.w	r3, r3, #1
    bed8:	b2db      	uxtb	r3, r3
    beda:	2b00      	cmp	r3, #0
    bedc:	d002      	beq.n	bee4 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    bede:	f06f 0310 	mvn.w	r3, #16
    bee2:	e007      	b.n	bef4 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bee4:	4b06      	ldr	r3, [pc, #24]	; (bf00 <cdcdf_acm_read+0x3c>)
    bee6:	7918      	ldrb	r0, [r3, #4]
    bee8:	2300      	movs	r3, #0
    beea:	683a      	ldr	r2, [r7, #0]
    beec:	6879      	ldr	r1, [r7, #4]
    beee:	4c05      	ldr	r4, [pc, #20]	; (bf04 <cdcdf_acm_read+0x40>)
    bef0:	47a0      	blx	r4
    bef2:	4603      	mov	r3, r0
}
    bef4:	4618      	mov	r0, r3
    bef6:	370c      	adds	r7, #12
    bef8:	46bd      	mov	sp, r7
    befa:	bd90      	pop	{r4, r7, pc}
    befc:	0000bfe9 	.word	0x0000bfe9
    bf00:	20002584 	.word	0x20002584
    bf04:	0000cb6d 	.word	0x0000cb6d

0000bf08 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    bf08:	b590      	push	{r4, r7, lr}
    bf0a:	b083      	sub	sp, #12
    bf0c:	af00      	add	r7, sp, #0
    bf0e:	6078      	str	r0, [r7, #4]
    bf10:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bf12:	4b0b      	ldr	r3, [pc, #44]	; (bf40 <cdcdf_acm_write+0x38>)
    bf14:	4798      	blx	r3
    bf16:	4603      	mov	r3, r0
    bf18:	f083 0301 	eor.w	r3, r3, #1
    bf1c:	b2db      	uxtb	r3, r3
    bf1e:	2b00      	cmp	r3, #0
    bf20:	d002      	beq.n	bf28 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    bf22:	f06f 0310 	mvn.w	r3, #16
    bf26:	e007      	b.n	bf38 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bf28:	4b06      	ldr	r3, [pc, #24]	; (bf44 <cdcdf_acm_write+0x3c>)
    bf2a:	78d8      	ldrb	r0, [r3, #3]
    bf2c:	2301      	movs	r3, #1
    bf2e:	683a      	ldr	r2, [r7, #0]
    bf30:	6879      	ldr	r1, [r7, #4]
    bf32:	4c05      	ldr	r4, [pc, #20]	; (bf48 <cdcdf_acm_write+0x40>)
    bf34:	47a0      	blx	r4
    bf36:	4603      	mov	r3, r0
}
    bf38:	4618      	mov	r0, r3
    bf3a:	370c      	adds	r7, #12
    bf3c:	46bd      	mov	sp, r7
    bf3e:	bd90      	pop	{r4, r7, pc}
    bf40:	0000bfe9 	.word	0x0000bfe9
    bf44:	20002584 	.word	0x20002584
    bf48:	0000cb6d 	.word	0x0000cb6d

0000bf4c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    bf4c:	b580      	push	{r7, lr}
    bf4e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    bf50:	4b05      	ldr	r3, [pc, #20]	; (bf68 <cdcdf_acm_stop_xfer+0x1c>)
    bf52:	78db      	ldrb	r3, [r3, #3]
    bf54:	4618      	mov	r0, r3
    bf56:	4b05      	ldr	r3, [pc, #20]	; (bf6c <cdcdf_acm_stop_xfer+0x20>)
    bf58:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    bf5a:	4b03      	ldr	r3, [pc, #12]	; (bf68 <cdcdf_acm_stop_xfer+0x1c>)
    bf5c:	791b      	ldrb	r3, [r3, #4]
    bf5e:	4618      	mov	r0, r3
    bf60:	4b02      	ldr	r3, [pc, #8]	; (bf6c <cdcdf_acm_stop_xfer+0x20>)
    bf62:	4798      	blx	r3
}
    bf64:	bf00      	nop
    bf66:	bd80      	pop	{r7, pc}
    bf68:	20002584 	.word	0x20002584
    bf6c:	00003571 	.word	0x00003571

0000bf70 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    bf70:	b580      	push	{r7, lr}
    bf72:	b082      	sub	sp, #8
    bf74:	af00      	add	r7, sp, #0
    bf76:	4603      	mov	r3, r0
    bf78:	6039      	str	r1, [r7, #0]
    bf7a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    bf7c:	79fb      	ldrb	r3, [r7, #7]
    bf7e:	2b03      	cmp	r3, #3
    bf80:	d822      	bhi.n	bfc8 <cdcdf_acm_register_callback+0x58>
    bf82:	a201      	add	r2, pc, #4	; (adr r2, bf88 <cdcdf_acm_register_callback+0x18>)
    bf84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bf88:	0000bf99 	.word	0x0000bf99
    bf8c:	0000bfa9 	.word	0x0000bfa9
    bf90:	0000bfb9 	.word	0x0000bfb9
    bf94:	0000bfc1 	.word	0x0000bfc1
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    bf98:	4b0f      	ldr	r3, [pc, #60]	; (bfd8 <cdcdf_acm_register_callback+0x68>)
    bf9a:	791b      	ldrb	r3, [r3, #4]
    bf9c:	683a      	ldr	r2, [r7, #0]
    bf9e:	2102      	movs	r1, #2
    bfa0:	4618      	mov	r0, r3
    bfa2:	4b0e      	ldr	r3, [pc, #56]	; (bfdc <cdcdf_acm_register_callback+0x6c>)
    bfa4:	4798      	blx	r3
		break;
    bfa6:	e012      	b.n	bfce <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    bfa8:	4b0b      	ldr	r3, [pc, #44]	; (bfd8 <cdcdf_acm_register_callback+0x68>)
    bfaa:	78db      	ldrb	r3, [r3, #3]
    bfac:	683a      	ldr	r2, [r7, #0]
    bfae:	2102      	movs	r1, #2
    bfb0:	4618      	mov	r0, r3
    bfb2:	4b0a      	ldr	r3, [pc, #40]	; (bfdc <cdcdf_acm_register_callback+0x6c>)
    bfb4:	4798      	blx	r3
		break;
    bfb6:	e00a      	b.n	bfce <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    bfb8:	4a09      	ldr	r2, [pc, #36]	; (bfe0 <cdcdf_acm_register_callback+0x70>)
    bfba:	683b      	ldr	r3, [r7, #0]
    bfbc:	6013      	str	r3, [r2, #0]
		break;
    bfbe:	e006      	b.n	bfce <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    bfc0:	4a08      	ldr	r2, [pc, #32]	; (bfe4 <cdcdf_acm_register_callback+0x74>)
    bfc2:	683b      	ldr	r3, [r7, #0]
    bfc4:	6013      	str	r3, [r2, #0]
		break;
    bfc6:	e002      	b.n	bfce <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    bfc8:	f06f 030c 	mvn.w	r3, #12
    bfcc:	e000      	b.n	bfd0 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    bfce:	2300      	movs	r3, #0
}
    bfd0:	4618      	mov	r0, r3
    bfd2:	3708      	adds	r7, #8
    bfd4:	46bd      	mov	sp, r7
    bfd6:	bd80      	pop	{r7, pc}
    bfd8:	20002584 	.word	0x20002584
    bfdc:	0000369d 	.word	0x0000369d
    bfe0:	20002598 	.word	0x20002598
    bfe4:	20002594 	.word	0x20002594

0000bfe8 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    bfe8:	b480      	push	{r7}
    bfea:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    bfec:	4b03      	ldr	r3, [pc, #12]	; (bffc <cdcdf_acm_is_enabled+0x14>)
    bfee:	795b      	ldrb	r3, [r3, #5]
}
    bff0:	4618      	mov	r0, r3
    bff2:	46bd      	mov	sp, r7
    bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    bff8:	4770      	bx	lr
    bffa:	bf00      	nop
    bffc:	20002584 	.word	0x20002584

0000c000 <usb_get_u16>:
{
    c000:	b480      	push	{r7}
    c002:	b083      	sub	sp, #12
    c004:	af00      	add	r7, sp, #0
    c006:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c008:	687b      	ldr	r3, [r7, #4]
    c00a:	781b      	ldrb	r3, [r3, #0]
    c00c:	b29a      	uxth	r2, r3
    c00e:	687b      	ldr	r3, [r7, #4]
    c010:	3301      	adds	r3, #1
    c012:	781b      	ldrb	r3, [r3, #0]
    c014:	b29b      	uxth	r3, r3
    c016:	021b      	lsls	r3, r3, #8
    c018:	b29b      	uxth	r3, r3
    c01a:	4413      	add	r3, r2
    c01c:	b29b      	uxth	r3, r3
}
    c01e:	4618      	mov	r0, r3
    c020:	370c      	adds	r7, #12
    c022:	46bd      	mov	sp, r7
    c024:	f85d 7b04 	ldr.w	r7, [sp], #4
    c028:	4770      	bx	lr

0000c02a <usb_desc_len>:
{
    c02a:	b480      	push	{r7}
    c02c:	b083      	sub	sp, #12
    c02e:	af00      	add	r7, sp, #0
    c030:	6078      	str	r0, [r7, #4]
	return desc[0];
    c032:	687b      	ldr	r3, [r7, #4]
    c034:	781b      	ldrb	r3, [r3, #0]
}
    c036:	4618      	mov	r0, r3
    c038:	370c      	adds	r7, #12
    c03a:	46bd      	mov	sp, r7
    c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c040:	4770      	bx	lr
	...

0000c044 <usb_desc_next>:
{
    c044:	b580      	push	{r7, lr}
    c046:	b082      	sub	sp, #8
    c048:	af00      	add	r7, sp, #0
    c04a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c04c:	6878      	ldr	r0, [r7, #4]
    c04e:	4b05      	ldr	r3, [pc, #20]	; (c064 <usb_desc_next+0x20>)
    c050:	4798      	blx	r3
    c052:	4603      	mov	r3, r0
    c054:	461a      	mov	r2, r3
    c056:	687b      	ldr	r3, [r7, #4]
    c058:	4413      	add	r3, r2
}
    c05a:	4618      	mov	r0, r3
    c05c:	3708      	adds	r7, #8
    c05e:	46bd      	mov	sp, r7
    c060:	bd80      	pop	{r7, pc}
    c062:	bf00      	nop
    c064:	0000c02b 	.word	0x0000c02b

0000c068 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c068:	b580      	push	{r7, lr}
    c06a:	b082      	sub	sp, #8
    c06c:	af00      	add	r7, sp, #0
    c06e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c070:	687b      	ldr	r3, [r7, #4]
    c072:	3302      	adds	r3, #2
    c074:	4618      	mov	r0, r3
    c076:	4b03      	ldr	r3, [pc, #12]	; (c084 <usb_cfg_desc_total_len+0x1c>)
    c078:	4798      	blx	r3
    c07a:	4603      	mov	r3, r0
}
    c07c:	4618      	mov	r0, r3
    c07e:	3708      	adds	r7, #8
    c080:	46bd      	mov	sp, r7
    c082:	bd80      	pop	{r7, pc}
    c084:	0000c001 	.word	0x0000c001

0000c088 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c088:	b590      	push	{r4, r7, lr}
    c08a:	b085      	sub	sp, #20
    c08c:	af00      	add	r7, sp, #0
    c08e:	4603      	mov	r3, r0
    c090:	6039      	str	r1, [r7, #0]
    c092:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c094:	2300      	movs	r3, #0
    c096:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c098:	683b      	ldr	r3, [r7, #0]
    c09a:	799a      	ldrb	r2, [r3, #6]
    c09c:	79db      	ldrb	r3, [r3, #7]
    c09e:	021b      	lsls	r3, r3, #8
    c0a0:	4313      	orrs	r3, r2
    c0a2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c0a4:	897b      	ldrh	r3, [r7, #10]
    c0a6:	2b12      	cmp	r3, #18
    c0a8:	d901      	bls.n	c0ae <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c0aa:	2312      	movs	r3, #18
    c0ac:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c0ae:	68fb      	ldr	r3, [r7, #12]
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d10a      	bne.n	c0ca <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c0b4:	4b0f      	ldr	r3, [pc, #60]	; (c0f4 <usbdc_get_dev_desc+0x6c>)
    c0b6:	681b      	ldr	r3, [r3, #0]
    c0b8:	6818      	ldr	r0, [r3, #0]
    c0ba:	4b0e      	ldr	r3, [pc, #56]	; (c0f4 <usbdc_get_dev_desc+0x6c>)
    c0bc:	681b      	ldr	r3, [r3, #0]
    c0be:	685b      	ldr	r3, [r3, #4]
    c0c0:	2201      	movs	r2, #1
    c0c2:	4619      	mov	r1, r3
    c0c4:	4b0c      	ldr	r3, [pc, #48]	; (c0f8 <usbdc_get_dev_desc+0x70>)
    c0c6:	4798      	blx	r3
    c0c8:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c0ca:	68fb      	ldr	r3, [r7, #12]
    c0cc:	2b00      	cmp	r3, #0
    c0ce:	d101      	bne.n	c0d4 <usbdc_get_dev_desc+0x4c>
		return false;
    c0d0:	2300      	movs	r3, #0
    c0d2:	e00b      	b.n	c0ec <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c0d4:	897a      	ldrh	r2, [r7, #10]
    c0d6:	79f8      	ldrb	r0, [r7, #7]
    c0d8:	2300      	movs	r3, #0
    c0da:	68f9      	ldr	r1, [r7, #12]
    c0dc:	4c07      	ldr	r4, [pc, #28]	; (c0fc <usbdc_get_dev_desc+0x74>)
    c0de:	47a0      	blx	r4
    c0e0:	4603      	mov	r3, r0
    c0e2:	2b00      	cmp	r3, #0
    c0e4:	d001      	beq.n	c0ea <usbdc_get_dev_desc+0x62>
		return false;
    c0e6:	2300      	movs	r3, #0
    c0e8:	e000      	b.n	c0ec <usbdc_get_dev_desc+0x64>
	}
	return true;
    c0ea:	2301      	movs	r3, #1
}
    c0ec:	4618      	mov	r0, r3
    c0ee:	3714      	adds	r7, #20
    c0f0:	46bd      	mov	sp, r7
    c0f2:	bd90      	pop	{r4, r7, pc}
    c0f4:	2000259c 	.word	0x2000259c
    c0f8:	0000cdfd 	.word	0x0000cdfd
    c0fc:	0000cb6d 	.word	0x0000cb6d

0000c100 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c100:	b590      	push	{r4, r7, lr}
    c102:	b087      	sub	sp, #28
    c104:	af00      	add	r7, sp, #0
    c106:	4603      	mov	r3, r0
    c108:	6039      	str	r1, [r7, #0]
    c10a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c10c:	2300      	movs	r3, #0
    c10e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c110:	683b      	ldr	r3, [r7, #0]
    c112:	799a      	ldrb	r2, [r3, #6]
    c114:	79db      	ldrb	r3, [r3, #7]
    c116:	021b      	lsls	r3, r3, #8
    c118:	4313      	orrs	r3, r2
    c11a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c11c:	683b      	ldr	r3, [r7, #0]
    c11e:	885b      	ldrh	r3, [r3, #2]
    c120:	b29b      	uxth	r3, r3
    c122:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c124:	8a7a      	ldrh	r2, [r7, #18]
    c126:	4b1e      	ldr	r3, [pc, #120]	; (c1a0 <usbdc_get_cfg_desc+0xa0>)
    c128:	7f1b      	ldrb	r3, [r3, #28]
    c12a:	3b01      	subs	r3, #1
    c12c:	4013      	ands	r3, r2
    c12e:	2b00      	cmp	r3, #0
    c130:	bf0c      	ite	eq
    c132:	2301      	moveq	r3, #1
    c134:	2300      	movne	r3, #0
    c136:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c138:	697b      	ldr	r3, [r7, #20]
    c13a:	2b00      	cmp	r3, #0
    c13c:	d10c      	bne.n	c158 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c13e:	4b18      	ldr	r3, [pc, #96]	; (c1a0 <usbdc_get_cfg_desc+0xa0>)
    c140:	681b      	ldr	r3, [r3, #0]
    c142:	6818      	ldr	r0, [r3, #0]
    c144:	4b16      	ldr	r3, [pc, #88]	; (c1a0 <usbdc_get_cfg_desc+0xa0>)
    c146:	681b      	ldr	r3, [r3, #0]
    c148:	6859      	ldr	r1, [r3, #4]
    c14a:	7c3b      	ldrb	r3, [r7, #16]
    c14c:	3301      	adds	r3, #1
    c14e:	b2db      	uxtb	r3, r3
    c150:	461a      	mov	r2, r3
    c152:	4b14      	ldr	r3, [pc, #80]	; (c1a4 <usbdc_get_cfg_desc+0xa4>)
    c154:	4798      	blx	r3
    c156:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c158:	697b      	ldr	r3, [r7, #20]
    c15a:	2b00      	cmp	r3, #0
    c15c:	d101      	bne.n	c162 <usbdc_get_cfg_desc+0x62>
		return false;
    c15e:	2300      	movs	r3, #0
    c160:	e019      	b.n	c196 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c162:	6978      	ldr	r0, [r7, #20]
    c164:	4b10      	ldr	r3, [pc, #64]	; (c1a8 <usbdc_get_cfg_desc+0xa8>)
    c166:	4798      	blx	r3
    c168:	4603      	mov	r3, r0
    c16a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c16c:	8a7a      	ldrh	r2, [r7, #18]
    c16e:	89fb      	ldrh	r3, [r7, #14]
    c170:	429a      	cmp	r2, r3
    c172:	d802      	bhi.n	c17a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c174:	2300      	movs	r3, #0
    c176:	747b      	strb	r3, [r7, #17]
    c178:	e001      	b.n	c17e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c17a:	89fb      	ldrh	r3, [r7, #14]
    c17c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c17e:	8a7a      	ldrh	r2, [r7, #18]
    c180:	7c7b      	ldrb	r3, [r7, #17]
    c182:	79f8      	ldrb	r0, [r7, #7]
    c184:	6979      	ldr	r1, [r7, #20]
    c186:	4c09      	ldr	r4, [pc, #36]	; (c1ac <usbdc_get_cfg_desc+0xac>)
    c188:	47a0      	blx	r4
    c18a:	4603      	mov	r3, r0
    c18c:	2b00      	cmp	r3, #0
    c18e:	d001      	beq.n	c194 <usbdc_get_cfg_desc+0x94>
		return false;
    c190:	2300      	movs	r3, #0
    c192:	e000      	b.n	c196 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c194:	2301      	movs	r3, #1
}
    c196:	4618      	mov	r0, r3
    c198:	371c      	adds	r7, #28
    c19a:	46bd      	mov	sp, r7
    c19c:	bd90      	pop	{r4, r7, pc}
    c19e:	bf00      	nop
    c1a0:	2000259c 	.word	0x2000259c
    c1a4:	0000cebd 	.word	0x0000cebd
    c1a8:	0000c069 	.word	0x0000c069
    c1ac:	0000cb6d 	.word	0x0000cb6d

0000c1b0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c1b0:	b590      	push	{r4, r7, lr}
    c1b2:	b085      	sub	sp, #20
    c1b4:	af00      	add	r7, sp, #0
    c1b6:	4603      	mov	r3, r0
    c1b8:	6039      	str	r1, [r7, #0]
    c1ba:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c1bc:	683b      	ldr	r3, [r7, #0]
    c1be:	799a      	ldrb	r2, [r3, #6]
    c1c0:	79db      	ldrb	r3, [r3, #7]
    c1c2:	021b      	lsls	r3, r3, #8
    c1c4:	4313      	orrs	r3, r2
    c1c6:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c1c8:	683b      	ldr	r3, [r7, #0]
    c1ca:	885b      	ldrh	r3, [r3, #2]
    c1cc:	b29b      	uxth	r3, r3
    c1ce:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c1d0:	89fa      	ldrh	r2, [r7, #14]
    c1d2:	4b1a      	ldr	r3, [pc, #104]	; (c23c <usbdc_get_str_desc+0x8c>)
    c1d4:	7f1b      	ldrb	r3, [r3, #28]
    c1d6:	3b01      	subs	r3, #1
    c1d8:	4013      	ands	r3, r2
    c1da:	2b00      	cmp	r3, #0
    c1dc:	bf0c      	ite	eq
    c1de:	2301      	moveq	r3, #1
    c1e0:	2300      	movne	r3, #0
    c1e2:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c1e4:	4b15      	ldr	r3, [pc, #84]	; (c23c <usbdc_get_str_desc+0x8c>)
    c1e6:	681b      	ldr	r3, [r3, #0]
    c1e8:	6818      	ldr	r0, [r3, #0]
    c1ea:	4b14      	ldr	r3, [pc, #80]	; (c23c <usbdc_get_str_desc+0x8c>)
    c1ec:	681b      	ldr	r3, [r3, #0]
    c1ee:	685b      	ldr	r3, [r3, #4]
    c1f0:	7b3a      	ldrb	r2, [r7, #12]
    c1f2:	4619      	mov	r1, r3
    c1f4:	4b12      	ldr	r3, [pc, #72]	; (c240 <usbdc_get_str_desc+0x90>)
    c1f6:	4798      	blx	r3
    c1f8:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c1fa:	68bb      	ldr	r3, [r7, #8]
    c1fc:	2b00      	cmp	r3, #0
    c1fe:	d101      	bne.n	c204 <usbdc_get_str_desc+0x54>
		return false;
    c200:	2300      	movs	r3, #0
    c202:	e017      	b.n	c234 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c204:	68bb      	ldr	r3, [r7, #8]
    c206:	781b      	ldrb	r3, [r3, #0]
    c208:	b29b      	uxth	r3, r3
    c20a:	89fa      	ldrh	r2, [r7, #14]
    c20c:	429a      	cmp	r2, r3
    c20e:	d802      	bhi.n	c216 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c210:	2300      	movs	r3, #0
    c212:	737b      	strb	r3, [r7, #13]
    c214:	e002      	b.n	c21c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c216:	68bb      	ldr	r3, [r7, #8]
    c218:	781b      	ldrb	r3, [r3, #0]
    c21a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c21c:	89fa      	ldrh	r2, [r7, #14]
    c21e:	7b7b      	ldrb	r3, [r7, #13]
    c220:	79f8      	ldrb	r0, [r7, #7]
    c222:	68b9      	ldr	r1, [r7, #8]
    c224:	4c07      	ldr	r4, [pc, #28]	; (c244 <usbdc_get_str_desc+0x94>)
    c226:	47a0      	blx	r4
    c228:	4603      	mov	r3, r0
    c22a:	2b00      	cmp	r3, #0
    c22c:	d001      	beq.n	c232 <usbdc_get_str_desc+0x82>
		return false;
    c22e:	2300      	movs	r3, #0
    c230:	e000      	b.n	c234 <usbdc_get_str_desc+0x84>
	}
	return true;
    c232:	2301      	movs	r3, #1
}
    c234:	4618      	mov	r0, r3
    c236:	3714      	adds	r7, #20
    c238:	46bd      	mov	sp, r7
    c23a:	bd90      	pop	{r4, r7, pc}
    c23c:	2000259c 	.word	0x2000259c
    c240:	0000cf35 	.word	0x0000cf35
    c244:	0000cb6d 	.word	0x0000cb6d

0000c248 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c248:	b580      	push	{r7, lr}
    c24a:	b084      	sub	sp, #16
    c24c:	af00      	add	r7, sp, #0
    c24e:	4603      	mov	r3, r0
    c250:	6039      	str	r1, [r7, #0]
    c252:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c254:	683b      	ldr	r3, [r7, #0]
    c256:	885b      	ldrh	r3, [r3, #2]
    c258:	b29b      	uxth	r3, r3
    c25a:	0a1b      	lsrs	r3, r3, #8
    c25c:	b29b      	uxth	r3, r3
    c25e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c260:	7bfb      	ldrb	r3, [r7, #15]
    c262:	2b02      	cmp	r3, #2
    c264:	d00d      	beq.n	c282 <usbdc_get_desc_req+0x3a>
    c266:	2b03      	cmp	r3, #3
    c268:	d012      	beq.n	c290 <usbdc_get_desc_req+0x48>
    c26a:	2b01      	cmp	r3, #1
    c26c:	d002      	beq.n	c274 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c26e:	bf00      	nop
	}
	return false;
    c270:	2300      	movs	r3, #0
    c272:	e013      	b.n	c29c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c274:	79fb      	ldrb	r3, [r7, #7]
    c276:	6839      	ldr	r1, [r7, #0]
    c278:	4618      	mov	r0, r3
    c27a:	4b0a      	ldr	r3, [pc, #40]	; (c2a4 <usbdc_get_desc_req+0x5c>)
    c27c:	4798      	blx	r3
    c27e:	4603      	mov	r3, r0
    c280:	e00c      	b.n	c29c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c282:	79fb      	ldrb	r3, [r7, #7]
    c284:	6839      	ldr	r1, [r7, #0]
    c286:	4618      	mov	r0, r3
    c288:	4b07      	ldr	r3, [pc, #28]	; (c2a8 <usbdc_get_desc_req+0x60>)
    c28a:	4798      	blx	r3
    c28c:	4603      	mov	r3, r0
    c28e:	e005      	b.n	c29c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c290:	79fb      	ldrb	r3, [r7, #7]
    c292:	6839      	ldr	r1, [r7, #0]
    c294:	4618      	mov	r0, r3
    c296:	4b05      	ldr	r3, [pc, #20]	; (c2ac <usbdc_get_desc_req+0x64>)
    c298:	4798      	blx	r3
    c29a:	4603      	mov	r3, r0
}
    c29c:	4618      	mov	r0, r3
    c29e:	3710      	adds	r7, #16
    c2a0:	46bd      	mov	sp, r7
    c2a2:	bd80      	pop	{r7, pc}
    c2a4:	0000c089 	.word	0x0000c089
    c2a8:	0000c101 	.word	0x0000c101
    c2ac:	0000c1b1 	.word	0x0000c1b1

0000c2b0 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c2b0:	b590      	push	{r4, r7, lr}
    c2b2:	b085      	sub	sp, #20
    c2b4:	af00      	add	r7, sp, #0
    c2b6:	4603      	mov	r3, r0
    c2b8:	6039      	str	r1, [r7, #0]
    c2ba:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c2bc:	683b      	ldr	r3, [r7, #0]
    c2be:	781b      	ldrb	r3, [r3, #0]
    c2c0:	f003 031f 	and.w	r3, r3, #31
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	db1b      	blt.n	c300 <usbdc_get_status_req+0x50>
    c2c8:	2b01      	cmp	r3, #1
    c2ca:	dd02      	ble.n	c2d2 <usbdc_get_status_req+0x22>
    c2cc:	2b02      	cmp	r3, #2
    c2ce:	d003      	beq.n	c2d8 <usbdc_get_status_req+0x28>
    c2d0:	e016      	b.n	c300 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c2d2:	2300      	movs	r3, #0
    c2d4:	60fb      	str	r3, [r7, #12]
		break;
    c2d6:	e015      	b.n	c304 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c2d8:	683b      	ldr	r3, [r7, #0]
    c2da:	889b      	ldrh	r3, [r3, #4]
    c2dc:	b29b      	uxth	r3, r3
    c2de:	b2db      	uxtb	r3, r3
    c2e0:	2102      	movs	r1, #2
    c2e2:	4618      	mov	r0, r3
    c2e4:	4b0f      	ldr	r3, [pc, #60]	; (c324 <usbdc_get_status_req+0x74>)
    c2e6:	4798      	blx	r3
    c2e8:	4603      	mov	r3, r0
    c2ea:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c2ec:	68fb      	ldr	r3, [r7, #12]
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	da01      	bge.n	c2f6 <usbdc_get_status_req+0x46>
			return false;
    c2f2:	2300      	movs	r3, #0
    c2f4:	e012      	b.n	c31c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c2f6:	68fb      	ldr	r3, [r7, #12]
    c2f8:	f003 0301 	and.w	r3, r3, #1
    c2fc:	60fb      	str	r3, [r7, #12]
		break;
    c2fe:	e001      	b.n	c304 <usbdc_get_status_req+0x54>
	default:
		return false;
    c300:	2300      	movs	r3, #0
    c302:	e00b      	b.n	c31c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c304:	4b08      	ldr	r3, [pc, #32]	; (c328 <usbdc_get_status_req+0x78>)
    c306:	695b      	ldr	r3, [r3, #20]
    c308:	89ba      	ldrh	r2, [r7, #12]
    c30a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c30c:	4b06      	ldr	r3, [pc, #24]	; (c328 <usbdc_get_status_req+0x78>)
    c30e:	6959      	ldr	r1, [r3, #20]
    c310:	79f8      	ldrb	r0, [r7, #7]
    c312:	2300      	movs	r3, #0
    c314:	2202      	movs	r2, #2
    c316:	4c05      	ldr	r4, [pc, #20]	; (c32c <usbdc_get_status_req+0x7c>)
    c318:	47a0      	blx	r4
	return true;
    c31a:	2301      	movs	r3, #1
}
    c31c:	4618      	mov	r0, r3
    c31e:	3714      	adds	r7, #20
    c320:	46bd      	mov	sp, r7
    c322:	bd90      	pop	{r4, r7, pc}
    c324:	00003649 	.word	0x00003649
    c328:	2000259c 	.word	0x2000259c
    c32c:	0000cb6d 	.word	0x0000cb6d

0000c330 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c330:	b590      	push	{r4, r7, lr}
    c332:	b085      	sub	sp, #20
    c334:	af00      	add	r7, sp, #0
    c336:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c338:	4b1f      	ldr	r3, [pc, #124]	; (c3b8 <usbdc_get_interface+0x88>)
    c33a:	691b      	ldr	r3, [r3, #16]
    c33c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c33e:	4b1e      	ldr	r3, [pc, #120]	; (c3b8 <usbdc_get_interface+0x88>)
    c340:	7f5b      	ldrb	r3, [r3, #29]
    c342:	461a      	mov	r2, r3
    c344:	687b      	ldr	r3, [r7, #4]
    c346:	889b      	ldrh	r3, [r3, #4]
    c348:	b29b      	uxth	r3, r3
    c34a:	fa42 f303 	asr.w	r3, r2, r3
    c34e:	f003 0301 	and.w	r3, r3, #1
    c352:	2b00      	cmp	r3, #0
    c354:	d128      	bne.n	c3a8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c356:	4b18      	ldr	r3, [pc, #96]	; (c3b8 <usbdc_get_interface+0x88>)
    c358:	695b      	ldr	r3, [r3, #20]
    c35a:	2200      	movs	r2, #0
    c35c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c35e:	4b16      	ldr	r3, [pc, #88]	; (c3b8 <usbdc_get_interface+0x88>)
    c360:	6959      	ldr	r1, [r3, #20]
    c362:	2300      	movs	r3, #0
    c364:	2201      	movs	r2, #1
    c366:	2000      	movs	r0, #0
    c368:	4c14      	ldr	r4, [pc, #80]	; (c3bc <usbdc_get_interface+0x8c>)
    c36a:	47a0      	blx	r4
		return true;
    c36c:	2301      	movs	r3, #1
    c36e:	e01f      	b.n	c3b0 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c370:	68fb      	ldr	r3, [r7, #12]
    c372:	685b      	ldr	r3, [r3, #4]
    c374:	687a      	ldr	r2, [r7, #4]
    c376:	2102      	movs	r1, #2
    c378:	68f8      	ldr	r0, [r7, #12]
    c37a:	4798      	blx	r3
    c37c:	60b8      	str	r0, [r7, #8]
    c37e:	68bb      	ldr	r3, [r7, #8]
    c380:	2b00      	cmp	r3, #0
    c382:	da03      	bge.n	c38c <usbdc_get_interface+0x5c>
			func = func->next;
    c384:	68fb      	ldr	r3, [r7, #12]
    c386:	681b      	ldr	r3, [r3, #0]
    c388:	60fb      	str	r3, [r7, #12]
    c38a:	e00d      	b.n	c3a8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c38c:	4b0a      	ldr	r3, [pc, #40]	; (c3b8 <usbdc_get_interface+0x88>)
    c38e:	695b      	ldr	r3, [r3, #20]
    c390:	68ba      	ldr	r2, [r7, #8]
    c392:	b2d2      	uxtb	r2, r2
    c394:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c396:	4b08      	ldr	r3, [pc, #32]	; (c3b8 <usbdc_get_interface+0x88>)
    c398:	6959      	ldr	r1, [r3, #20]
    c39a:	2300      	movs	r3, #0
    c39c:	2201      	movs	r2, #1
    c39e:	2000      	movs	r0, #0
    c3a0:	4c06      	ldr	r4, [pc, #24]	; (c3bc <usbdc_get_interface+0x8c>)
    c3a2:	47a0      	blx	r4
			return true;
    c3a4:	2301      	movs	r3, #1
    c3a6:	e003      	b.n	c3b0 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c3a8:	68fb      	ldr	r3, [r7, #12]
    c3aa:	2b00      	cmp	r3, #0
    c3ac:	d1e0      	bne.n	c370 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c3ae:	2300      	movs	r3, #0
}
    c3b0:	4618      	mov	r0, r3
    c3b2:	3714      	adds	r7, #20
    c3b4:	46bd      	mov	sp, r7
    c3b6:	bd90      	pop	{r4, r7, pc}
    c3b8:	2000259c 	.word	0x2000259c
    c3bc:	0000cb6d 	.word	0x0000cb6d

0000c3c0 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c3c0:	b590      	push	{r4, r7, lr}
    c3c2:	b083      	sub	sp, #12
    c3c4:	af00      	add	r7, sp, #0
    c3c6:	4603      	mov	r3, r0
    c3c8:	6039      	str	r1, [r7, #0]
    c3ca:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c3cc:	683b      	ldr	r3, [r7, #0]
    c3ce:	785b      	ldrb	r3, [r3, #1]
    c3d0:	2b0a      	cmp	r3, #10
    c3d2:	d83a      	bhi.n	c44a <usbdc_get_req+0x8a>
    c3d4:	a201      	add	r2, pc, #4	; (adr r2, c3dc <usbdc_get_req+0x1c>)
    c3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c3da:	bf00      	nop
    c3dc:	0000c433 	.word	0x0000c433
    c3e0:	0000c44b 	.word	0x0000c44b
    c3e4:	0000c44b 	.word	0x0000c44b
    c3e8:	0000c44b 	.word	0x0000c44b
    c3ec:	0000c44b 	.word	0x0000c44b
    c3f0:	0000c44b 	.word	0x0000c44b
    c3f4:	0000c409 	.word	0x0000c409
    c3f8:	0000c44b 	.word	0x0000c44b
    c3fc:	0000c417 	.word	0x0000c417
    c400:	0000c44b 	.word	0x0000c44b
    c404:	0000c441 	.word	0x0000c441
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c408:	79fb      	ldrb	r3, [r7, #7]
    c40a:	6839      	ldr	r1, [r7, #0]
    c40c:	4618      	mov	r0, r3
    c40e:	4b11      	ldr	r3, [pc, #68]	; (c454 <usbdc_get_req+0x94>)
    c410:	4798      	blx	r3
    c412:	4603      	mov	r3, r0
    c414:	e01a      	b.n	c44c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c416:	4b10      	ldr	r3, [pc, #64]	; (c458 <usbdc_get_req+0x98>)
    c418:	695b      	ldr	r3, [r3, #20]
    c41a:	4a0f      	ldr	r2, [pc, #60]	; (c458 <usbdc_get_req+0x98>)
    c41c:	7ed2      	ldrb	r2, [r2, #27]
    c41e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c420:	4b0d      	ldr	r3, [pc, #52]	; (c458 <usbdc_get_req+0x98>)
    c422:	6959      	ldr	r1, [r3, #20]
    c424:	79f8      	ldrb	r0, [r7, #7]
    c426:	2300      	movs	r3, #0
    c428:	2201      	movs	r2, #1
    c42a:	4c0c      	ldr	r4, [pc, #48]	; (c45c <usbdc_get_req+0x9c>)
    c42c:	47a0      	blx	r4
		return true;
    c42e:	2301      	movs	r3, #1
    c430:	e00c      	b.n	c44c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c432:	79fb      	ldrb	r3, [r7, #7]
    c434:	6839      	ldr	r1, [r7, #0]
    c436:	4618      	mov	r0, r3
    c438:	4b09      	ldr	r3, [pc, #36]	; (c460 <usbdc_get_req+0xa0>)
    c43a:	4798      	blx	r3
    c43c:	4603      	mov	r3, r0
    c43e:	e005      	b.n	c44c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c440:	6838      	ldr	r0, [r7, #0]
    c442:	4b08      	ldr	r3, [pc, #32]	; (c464 <usbdc_get_req+0xa4>)
    c444:	4798      	blx	r3
    c446:	4603      	mov	r3, r0
    c448:	e000      	b.n	c44c <usbdc_get_req+0x8c>
	default:
		return false;
    c44a:	2300      	movs	r3, #0
	}
}
    c44c:	4618      	mov	r0, r3
    c44e:	370c      	adds	r7, #12
    c450:	46bd      	mov	sp, r7
    c452:	bd90      	pop	{r4, r7, pc}
    c454:	0000c249 	.word	0x0000c249
    c458:	2000259c 	.word	0x2000259c
    c45c:	0000cb6d 	.word	0x0000cb6d
    c460:	0000c2b1 	.word	0x0000c2b1
    c464:	0000c331 	.word	0x0000c331

0000c468 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c468:	b590      	push	{r4, r7, lr}
    c46a:	b083      	sub	sp, #12
    c46c:	af00      	add	r7, sp, #0
    c46e:	4603      	mov	r3, r0
    c470:	6039      	str	r1, [r7, #0]
    c472:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c474:	683b      	ldr	r3, [r7, #0]
    c476:	781b      	ldrb	r3, [r3, #0]
    c478:	f003 031f 	and.w	r3, r3, #31
    c47c:	2b02      	cmp	r3, #2
    c47e:	d116      	bne.n	c4ae <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c480:	683b      	ldr	r3, [r7, #0]
    c482:	88db      	ldrh	r3, [r3, #6]
    c484:	b29b      	uxth	r3, r3
    c486:	2b00      	cmp	r3, #0
    c488:	d001      	beq.n	c48e <usbdc_clear_ftr_req+0x26>
			return false;
    c48a:	2300      	movs	r3, #0
    c48c:	e010      	b.n	c4b0 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c48e:	683b      	ldr	r3, [r7, #0]
    c490:	889b      	ldrh	r3, [r3, #4]
    c492:	b29b      	uxth	r3, r3
    c494:	b2db      	uxtb	r3, r3
    c496:	2100      	movs	r1, #0
    c498:	4618      	mov	r0, r3
    c49a:	4b07      	ldr	r3, [pc, #28]	; (c4b8 <usbdc_clear_ftr_req+0x50>)
    c49c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c49e:	79f8      	ldrb	r0, [r7, #7]
    c4a0:	2301      	movs	r3, #1
    c4a2:	2200      	movs	r2, #0
    c4a4:	2100      	movs	r1, #0
    c4a6:	4c05      	ldr	r4, [pc, #20]	; (c4bc <usbdc_clear_ftr_req+0x54>)
    c4a8:	47a0      	blx	r4
		return true;
    c4aa:	2301      	movs	r3, #1
    c4ac:	e000      	b.n	c4b0 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c4ae:	2300      	movs	r3, #0
	}
}
    c4b0:	4618      	mov	r0, r3
    c4b2:	370c      	adds	r7, #12
    c4b4:	46bd      	mov	sp, r7
    c4b6:	bd90      	pop	{r4, r7, pc}
    c4b8:	00003649 	.word	0x00003649
    c4bc:	0000cb6d 	.word	0x0000cb6d

0000c4c0 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c4c0:	b590      	push	{r4, r7, lr}
    c4c2:	b083      	sub	sp, #12
    c4c4:	af00      	add	r7, sp, #0
    c4c6:	4603      	mov	r3, r0
    c4c8:	6039      	str	r1, [r7, #0]
    c4ca:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c4cc:	683b      	ldr	r3, [r7, #0]
    c4ce:	781b      	ldrb	r3, [r3, #0]
    c4d0:	f003 031f 	and.w	r3, r3, #31
    c4d4:	2b02      	cmp	r3, #2
    c4d6:	d116      	bne.n	c506 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c4d8:	683b      	ldr	r3, [r7, #0]
    c4da:	88db      	ldrh	r3, [r3, #6]
    c4dc:	b29b      	uxth	r3, r3
    c4de:	2b00      	cmp	r3, #0
    c4e0:	d001      	beq.n	c4e6 <usbdc_set_ftr_req+0x26>
			return false;
    c4e2:	2300      	movs	r3, #0
    c4e4:	e010      	b.n	c508 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c4e6:	683b      	ldr	r3, [r7, #0]
    c4e8:	889b      	ldrh	r3, [r3, #4]
    c4ea:	b29b      	uxth	r3, r3
    c4ec:	b2db      	uxtb	r3, r3
    c4ee:	2101      	movs	r1, #1
    c4f0:	4618      	mov	r0, r3
    c4f2:	4b07      	ldr	r3, [pc, #28]	; (c510 <usbdc_set_ftr_req+0x50>)
    c4f4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c4f6:	79f8      	ldrb	r0, [r7, #7]
    c4f8:	2301      	movs	r3, #1
    c4fa:	2200      	movs	r2, #0
    c4fc:	2100      	movs	r1, #0
    c4fe:	4c05      	ldr	r4, [pc, #20]	; (c514 <usbdc_set_ftr_req+0x54>)
    c500:	47a0      	blx	r4
		return true;
    c502:	2301      	movs	r3, #1
    c504:	e000      	b.n	c508 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c506:	2300      	movs	r3, #0
	}
}
    c508:	4618      	mov	r0, r3
    c50a:	370c      	adds	r7, #12
    c50c:	46bd      	mov	sp, r7
    c50e:	bd90      	pop	{r4, r7, pc}
    c510:	00003649 	.word	0x00003649
    c514:	0000cb6d 	.word	0x0000cb6d

0000c518 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c518:	b580      	push	{r7, lr}
    c51a:	b082      	sub	sp, #8
    c51c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c51e:	4b0a      	ldr	r3, [pc, #40]	; (c548 <usbdc_unconfig+0x30>)
    c520:	691b      	ldr	r3, [r3, #16]
    c522:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c524:	e008      	b.n	c538 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c526:	687b      	ldr	r3, [r7, #4]
    c528:	685b      	ldr	r3, [r3, #4]
    c52a:	2200      	movs	r2, #0
    c52c:	2101      	movs	r1, #1
    c52e:	6878      	ldr	r0, [r7, #4]
    c530:	4798      	blx	r3
		func = func->next;
    c532:	687b      	ldr	r3, [r7, #4]
    c534:	681b      	ldr	r3, [r3, #0]
    c536:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c538:	687b      	ldr	r3, [r7, #4]
    c53a:	2b00      	cmp	r3, #0
    c53c:	d1f3      	bne.n	c526 <usbdc_unconfig+0xe>
	}
}
    c53e:	bf00      	nop
    c540:	3708      	adds	r7, #8
    c542:	46bd      	mov	sp, r7
    c544:	bd80      	pop	{r7, pc}
    c546:	bf00      	nop
    c548:	2000259c 	.word	0x2000259c

0000c54c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c54c:	b580      	push	{r7, lr}
    c54e:	b088      	sub	sp, #32
    c550:	af00      	add	r7, sp, #0
    c552:	4603      	mov	r3, r0
    c554:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c556:	2300      	movs	r3, #0
    c558:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c55a:	23ff      	movs	r3, #255	; 0xff
    c55c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c55e:	79fb      	ldrb	r3, [r7, #7]
    c560:	2b00      	cmp	r3, #0
    c562:	d103      	bne.n	c56c <usbdc_set_config+0x20>
		usbdc_unconfig();
    c564:	4b2e      	ldr	r3, [pc, #184]	; (c620 <usbdc_set_config+0xd4>)
    c566:	4798      	blx	r3
		return true;
    c568:	2301      	movs	r3, #1
    c56a:	e055      	b.n	c618 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c56c:	69bb      	ldr	r3, [r7, #24]
    c56e:	2b00      	cmp	r3, #0
    c570:	d10a      	bne.n	c588 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c572:	4b2c      	ldr	r3, [pc, #176]	; (c624 <usbdc_set_config+0xd8>)
    c574:	681b      	ldr	r3, [r3, #0]
    c576:	6818      	ldr	r0, [r3, #0]
    c578:	4b2a      	ldr	r3, [pc, #168]	; (c624 <usbdc_set_config+0xd8>)
    c57a:	681b      	ldr	r3, [r3, #0]
    c57c:	685b      	ldr	r3, [r3, #4]
    c57e:	79fa      	ldrb	r2, [r7, #7]
    c580:	4619      	mov	r1, r3
    c582:	4b29      	ldr	r3, [pc, #164]	; (c628 <usbdc_set_config+0xdc>)
    c584:	4798      	blx	r3
    c586:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c588:	69bb      	ldr	r3, [r7, #24]
    c58a:	2b00      	cmp	r3, #0
    c58c:	d101      	bne.n	c592 <usbdc_set_config+0x46>
		return false;
    c58e:	2300      	movs	r3, #0
    c590:	e042      	b.n	c618 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c592:	69b8      	ldr	r0, [r7, #24]
    c594:	4b25      	ldr	r3, [pc, #148]	; (c62c <usbdc_set_config+0xe0>)
    c596:	4798      	blx	r3
    c598:	4603      	mov	r3, r0
    c59a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c59c:	8abb      	ldrh	r3, [r7, #20]
    c59e:	69ba      	ldr	r2, [r7, #24]
    c5a0:	4413      	add	r3, r2
    c5a2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c5a4:	693b      	ldr	r3, [r7, #16]
    c5a6:	2204      	movs	r2, #4
    c5a8:	4619      	mov	r1, r3
    c5aa:	69b8      	ldr	r0, [r7, #24]
    c5ac:	4b20      	ldr	r3, [pc, #128]	; (c630 <usbdc_set_config+0xe4>)
    c5ae:	4798      	blx	r3
    c5b0:	4603      	mov	r3, r0
    c5b2:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c5b4:	e02c      	b.n	c610 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c5b6:	68fb      	ldr	r3, [r7, #12]
    c5b8:	3302      	adds	r3, #2
    c5ba:	781b      	ldrb	r3, [r3, #0]
    c5bc:	7dfa      	ldrb	r2, [r7, #23]
    c5be:	429a      	cmp	r2, r3
    c5c0:	d018      	beq.n	c5f4 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c5c2:	68fb      	ldr	r3, [r7, #12]
    c5c4:	789b      	ldrb	r3, [r3, #2]
    c5c6:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c5c8:	4b16      	ldr	r3, [pc, #88]	; (c624 <usbdc_set_config+0xd8>)
    c5ca:	691b      	ldr	r3, [r3, #16]
    c5cc:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c5ce:	e00c      	b.n	c5ea <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c5d0:	69fb      	ldr	r3, [r7, #28]
    c5d2:	685b      	ldr	r3, [r3, #4]
    c5d4:	f107 020c 	add.w	r2, r7, #12
    c5d8:	2100      	movs	r1, #0
    c5da:	69f8      	ldr	r0, [r7, #28]
    c5dc:	4798      	blx	r3
    c5de:	4603      	mov	r3, r0
    c5e0:	2b00      	cmp	r3, #0
    c5e2:	d006      	beq.n	c5f2 <usbdc_set_config+0xa6>
					func = func->next;
    c5e4:	69fb      	ldr	r3, [r7, #28]
    c5e6:	681b      	ldr	r3, [r3, #0]
    c5e8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c5ea:	69fb      	ldr	r3, [r7, #28]
    c5ec:	2b00      	cmp	r3, #0
    c5ee:	d1ef      	bne.n	c5d0 <usbdc_set_config+0x84>
    c5f0:	e000      	b.n	c5f4 <usbdc_set_config+0xa8>
				} else {
					break;
    c5f2:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c5f4:	68fb      	ldr	r3, [r7, #12]
    c5f6:	4618      	mov	r0, r3
    c5f8:	4b0e      	ldr	r3, [pc, #56]	; (c634 <usbdc_set_config+0xe8>)
    c5fa:	4798      	blx	r3
    c5fc:	4603      	mov	r3, r0
    c5fe:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c600:	68fb      	ldr	r3, [r7, #12]
    c602:	6939      	ldr	r1, [r7, #16]
    c604:	2204      	movs	r2, #4
    c606:	4618      	mov	r0, r3
    c608:	4b09      	ldr	r3, [pc, #36]	; (c630 <usbdc_set_config+0xe4>)
    c60a:	4798      	blx	r3
    c60c:	4603      	mov	r3, r0
    c60e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c610:	68fb      	ldr	r3, [r7, #12]
    c612:	2b00      	cmp	r3, #0
    c614:	d1cf      	bne.n	c5b6 <usbdc_set_config+0x6a>
	}
	return true;
    c616:	2301      	movs	r3, #1
}
    c618:	4618      	mov	r0, r3
    c61a:	3720      	adds	r7, #32
    c61c:	46bd      	mov	sp, r7
    c61e:	bd80      	pop	{r7, pc}
    c620:	0000c519 	.word	0x0000c519
    c624:	2000259c 	.word	0x2000259c
    c628:	0000cebd 	.word	0x0000cebd
    c62c:	0000c069 	.word	0x0000c069
    c630:	0000cdfd 	.word	0x0000cdfd
    c634:	0000c045 	.word	0x0000c045

0000c638 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c638:	b580      	push	{r7, lr}
    c63a:	b082      	sub	sp, #8
    c63c:	af00      	add	r7, sp, #0
    c63e:	4603      	mov	r3, r0
    c640:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c642:	79fb      	ldrb	r3, [r7, #7]
    c644:	4618      	mov	r0, r3
    c646:	4b03      	ldr	r3, [pc, #12]	; (c654 <usbdc_set_address+0x1c>)
    c648:	4798      	blx	r3
}
    c64a:	bf00      	nop
    c64c:	3708      	adds	r7, #8
    c64e:	46bd      	mov	sp, r7
    c650:	bd80      	pop	{r7, pc}
    c652:	bf00      	nop
    c654:	00003265 	.word	0x00003265

0000c658 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c658:	b590      	push	{r4, r7, lr}
    c65a:	b087      	sub	sp, #28
    c65c:	af00      	add	r7, sp, #0
    c65e:	4603      	mov	r3, r0
    c660:	460a      	mov	r2, r1
    c662:	80fb      	strh	r3, [r7, #6]
    c664:	4613      	mov	r3, r2
    c666:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c668:	2300      	movs	r3, #0
    c66a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c66c:	693b      	ldr	r3, [r7, #16]
    c66e:	2b00      	cmp	r3, #0
    c670:	d10b      	bne.n	c68a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c672:	4b43      	ldr	r3, [pc, #268]	; (c780 <usbdc_set_interface+0x128>)
    c674:	681b      	ldr	r3, [r3, #0]
    c676:	6818      	ldr	r0, [r3, #0]
    c678:	4b41      	ldr	r3, [pc, #260]	; (c780 <usbdc_set_interface+0x128>)
    c67a:	681b      	ldr	r3, [r3, #0]
    c67c:	6859      	ldr	r1, [r3, #4]
    c67e:	4b40      	ldr	r3, [pc, #256]	; (c780 <usbdc_set_interface+0x128>)
    c680:	7edb      	ldrb	r3, [r3, #27]
    c682:	461a      	mov	r2, r3
    c684:	4b3f      	ldr	r3, [pc, #252]	; (c784 <usbdc_set_interface+0x12c>)
    c686:	4798      	blx	r3
    c688:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c68a:	693b      	ldr	r3, [r7, #16]
    c68c:	2b00      	cmp	r3, #0
    c68e:	d101      	bne.n	c694 <usbdc_set_interface+0x3c>
		return false;
    c690:	2300      	movs	r3, #0
    c692:	e071      	b.n	c778 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c694:	693b      	ldr	r3, [r7, #16]
    c696:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c698:	6938      	ldr	r0, [r7, #16]
    c69a:	4b3b      	ldr	r3, [pc, #236]	; (c788 <usbdc_set_interface+0x130>)
    c69c:	4798      	blx	r3
    c69e:	4603      	mov	r3, r0
    c6a0:	461a      	mov	r2, r3
    c6a2:	693b      	ldr	r3, [r7, #16]
    c6a4:	4413      	add	r3, r2
    c6a6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c6a8:	68bb      	ldr	r3, [r7, #8]
    c6aa:	68f9      	ldr	r1, [r7, #12]
    c6ac:	2204      	movs	r2, #4
    c6ae:	4618      	mov	r0, r3
    c6b0:	4b36      	ldr	r3, [pc, #216]	; (c78c <usbdc_set_interface+0x134>)
    c6b2:	4798      	blx	r3
    c6b4:	6138      	str	r0, [r7, #16]
    c6b6:	693b      	ldr	r3, [r7, #16]
    c6b8:	2b00      	cmp	r3, #0
    c6ba:	d113      	bne.n	c6e4 <usbdc_set_interface+0x8c>
		return false;
    c6bc:	2300      	movs	r3, #0
    c6be:	e05b      	b.n	c778 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c6c0:	68bb      	ldr	r3, [r7, #8]
    c6c2:	4618      	mov	r0, r3
    c6c4:	4b32      	ldr	r3, [pc, #200]	; (c790 <usbdc_set_interface+0x138>)
    c6c6:	4798      	blx	r3
    c6c8:	4603      	mov	r3, r0
    c6ca:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c6cc:	68bb      	ldr	r3, [r7, #8]
    c6ce:	68f9      	ldr	r1, [r7, #12]
    c6d0:	2204      	movs	r2, #4
    c6d2:	4618      	mov	r0, r3
    c6d4:	4b2d      	ldr	r3, [pc, #180]	; (c78c <usbdc_set_interface+0x134>)
    c6d6:	4798      	blx	r3
    c6d8:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c6da:	693b      	ldr	r3, [r7, #16]
    c6dc:	2b00      	cmp	r3, #0
    c6de:	d101      	bne.n	c6e4 <usbdc_set_interface+0x8c>
			return false;
    c6e0:	2300      	movs	r3, #0
    c6e2:	e049      	b.n	c778 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c6e4:	693b      	ldr	r3, [r7, #16]
    c6e6:	3302      	adds	r3, #2
    c6e8:	781b      	ldrb	r3, [r3, #0]
    c6ea:	b29b      	uxth	r3, r3
    c6ec:	88ba      	ldrh	r2, [r7, #4]
    c6ee:	429a      	cmp	r2, r3
    c6f0:	d1e6      	bne.n	c6c0 <usbdc_set_interface+0x68>
    c6f2:	693b      	ldr	r3, [r7, #16]
    c6f4:	3303      	adds	r3, #3
    c6f6:	781b      	ldrb	r3, [r3, #0]
    c6f8:	b29b      	uxth	r3, r3
    c6fa:	88fa      	ldrh	r2, [r7, #6]
    c6fc:	429a      	cmp	r2, r3
    c6fe:	d1df      	bne.n	c6c0 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c700:	693b      	ldr	r3, [r7, #16]
    c702:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c704:	4b1e      	ldr	r3, [pc, #120]	; (c780 <usbdc_set_interface+0x128>)
    c706:	691b      	ldr	r3, [r3, #16]
    c708:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c70a:	e031      	b.n	c770 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c70c:	697b      	ldr	r3, [r7, #20]
    c70e:	685b      	ldr	r3, [r3, #4]
    c710:	f107 0208 	add.w	r2, r7, #8
    c714:	2101      	movs	r1, #1
    c716:	6978      	ldr	r0, [r7, #20]
    c718:	4798      	blx	r3
    c71a:	4603      	mov	r3, r0
    c71c:	2b00      	cmp	r3, #0
    c71e:	d003      	beq.n	c728 <usbdc_set_interface+0xd0>
			func = func->next;
    c720:	697b      	ldr	r3, [r7, #20]
    c722:	681b      	ldr	r3, [r3, #0]
    c724:	617b      	str	r3, [r7, #20]
    c726:	e023      	b.n	c770 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c728:	697b      	ldr	r3, [r7, #20]
    c72a:	685b      	ldr	r3, [r3, #4]
    c72c:	f107 0208 	add.w	r2, r7, #8
    c730:	2100      	movs	r1, #0
    c732:	6978      	ldr	r0, [r7, #20]
    c734:	4798      	blx	r3
    c736:	4603      	mov	r3, r0
    c738:	2b00      	cmp	r3, #0
    c73a:	d117      	bne.n	c76c <usbdc_set_interface+0x114>
			if (alt_set) {
    c73c:	88fb      	ldrh	r3, [r7, #6]
    c73e:	2b00      	cmp	r3, #0
    c740:	d00c      	beq.n	c75c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c742:	4b0f      	ldr	r3, [pc, #60]	; (c780 <usbdc_set_interface+0x128>)
    c744:	7f5b      	ldrb	r3, [r3, #29]
    c746:	b25a      	sxtb	r2, r3
    c748:	88bb      	ldrh	r3, [r7, #4]
    c74a:	2101      	movs	r1, #1
    c74c:	fa01 f303 	lsl.w	r3, r1, r3
    c750:	b25b      	sxtb	r3, r3
    c752:	4313      	orrs	r3, r2
    c754:	b25b      	sxtb	r3, r3
    c756:	b2da      	uxtb	r2, r3
    c758:	4b09      	ldr	r3, [pc, #36]	; (c780 <usbdc_set_interface+0x128>)
    c75a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c75c:	2300      	movs	r3, #0
    c75e:	2200      	movs	r2, #0
    c760:	2100      	movs	r1, #0
    c762:	2000      	movs	r0, #0
    c764:	4c0b      	ldr	r4, [pc, #44]	; (c794 <usbdc_set_interface+0x13c>)
    c766:	47a0      	blx	r4
			return true;
    c768:	2301      	movs	r3, #1
    c76a:	e005      	b.n	c778 <usbdc_set_interface+0x120>
		} else {
			return false;
    c76c:	2300      	movs	r3, #0
    c76e:	e003      	b.n	c778 <usbdc_set_interface+0x120>
	while (NULL != func) {
    c770:	697b      	ldr	r3, [r7, #20]
    c772:	2b00      	cmp	r3, #0
    c774:	d1ca      	bne.n	c70c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c776:	2300      	movs	r3, #0
}
    c778:	4618      	mov	r0, r3
    c77a:	371c      	adds	r7, #28
    c77c:	46bd      	mov	sp, r7
    c77e:	bd90      	pop	{r4, r7, pc}
    c780:	2000259c 	.word	0x2000259c
    c784:	0000cebd 	.word	0x0000cebd
    c788:	0000c069 	.word	0x0000c069
    c78c:	0000cdfd 	.word	0x0000cdfd
    c790:	0000c045 	.word	0x0000c045
    c794:	0000cb6d 	.word	0x0000cb6d

0000c798 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c798:	b590      	push	{r4, r7, lr}
    c79a:	b083      	sub	sp, #12
    c79c:	af00      	add	r7, sp, #0
    c79e:	4603      	mov	r3, r0
    c7a0:	6039      	str	r1, [r7, #0]
    c7a2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c7a4:	683b      	ldr	r3, [r7, #0]
    c7a6:	785b      	ldrb	r3, [r3, #1]
    c7a8:	3b01      	subs	r3, #1
    c7aa:	2b0a      	cmp	r3, #10
    c7ac:	d85b      	bhi.n	c866 <usbdc_set_req+0xce>
    c7ae:	a201      	add	r2, pc, #4	; (adr r2, c7b4 <usbdc_set_req+0x1c>)
    c7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c7b4:	0000c833 	.word	0x0000c833
    c7b8:	0000c867 	.word	0x0000c867
    c7bc:	0000c841 	.word	0x0000c841
    c7c0:	0000c867 	.word	0x0000c867
    c7c4:	0000c7e1 	.word	0x0000c7e1
    c7c8:	0000c867 	.word	0x0000c867
    c7cc:	0000c867 	.word	0x0000c867
    c7d0:	0000c867 	.word	0x0000c867
    c7d4:	0000c7fb 	.word	0x0000c7fb
    c7d8:	0000c867 	.word	0x0000c867
    c7dc:	0000c84f 	.word	0x0000c84f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c7e0:	79f8      	ldrb	r0, [r7, #7]
    c7e2:	2301      	movs	r3, #1
    c7e4:	2200      	movs	r2, #0
    c7e6:	2100      	movs	r1, #0
    c7e8:	4c21      	ldr	r4, [pc, #132]	; (c870 <usbdc_set_req+0xd8>)
    c7ea:	47a0      	blx	r4
    c7ec:	4603      	mov	r3, r0
    c7ee:	2b00      	cmp	r3, #0
    c7f0:	bf0c      	ite	eq
    c7f2:	2301      	moveq	r3, #1
    c7f4:	2300      	movne	r3, #0
    c7f6:	b2db      	uxtb	r3, r3
    c7f8:	e036      	b.n	c868 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c7fa:	683b      	ldr	r3, [r7, #0]
    c7fc:	885b      	ldrh	r3, [r3, #2]
    c7fe:	b29b      	uxth	r3, r3
    c800:	b2db      	uxtb	r3, r3
    c802:	4618      	mov	r0, r3
    c804:	4b1b      	ldr	r3, [pc, #108]	; (c874 <usbdc_set_req+0xdc>)
    c806:	4798      	blx	r3
    c808:	4603      	mov	r3, r0
    c80a:	f083 0301 	eor.w	r3, r3, #1
    c80e:	b2db      	uxtb	r3, r3
    c810:	2b00      	cmp	r3, #0
    c812:	d001      	beq.n	c818 <usbdc_set_req+0x80>
			return false;
    c814:	2300      	movs	r3, #0
    c816:	e027      	b.n	c868 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c818:	79f8      	ldrb	r0, [r7, #7]
    c81a:	2301      	movs	r3, #1
    c81c:	2200      	movs	r2, #0
    c81e:	2100      	movs	r1, #0
    c820:	4c13      	ldr	r4, [pc, #76]	; (c870 <usbdc_set_req+0xd8>)
    c822:	47a0      	blx	r4
    c824:	4603      	mov	r3, r0
    c826:	2b00      	cmp	r3, #0
    c828:	bf0c      	ite	eq
    c82a:	2301      	moveq	r3, #1
    c82c:	2300      	movne	r3, #0
    c82e:	b2db      	uxtb	r3, r3
    c830:	e01a      	b.n	c868 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    c832:	79fb      	ldrb	r3, [r7, #7]
    c834:	6839      	ldr	r1, [r7, #0]
    c836:	4618      	mov	r0, r3
    c838:	4b0f      	ldr	r3, [pc, #60]	; (c878 <usbdc_set_req+0xe0>)
    c83a:	4798      	blx	r3
    c83c:	4603      	mov	r3, r0
    c83e:	e013      	b.n	c868 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    c840:	79fb      	ldrb	r3, [r7, #7]
    c842:	6839      	ldr	r1, [r7, #0]
    c844:	4618      	mov	r0, r3
    c846:	4b0d      	ldr	r3, [pc, #52]	; (c87c <usbdc_set_req+0xe4>)
    c848:	4798      	blx	r3
    c84a:	4603      	mov	r3, r0
    c84c:	e00c      	b.n	c868 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    c84e:	683b      	ldr	r3, [r7, #0]
    c850:	885b      	ldrh	r3, [r3, #2]
    c852:	b29a      	uxth	r2, r3
    c854:	683b      	ldr	r3, [r7, #0]
    c856:	889b      	ldrh	r3, [r3, #4]
    c858:	b29b      	uxth	r3, r3
    c85a:	4619      	mov	r1, r3
    c85c:	4610      	mov	r0, r2
    c85e:	4b08      	ldr	r3, [pc, #32]	; (c880 <usbdc_set_req+0xe8>)
    c860:	4798      	blx	r3
    c862:	4603      	mov	r3, r0
    c864:	e000      	b.n	c868 <usbdc_set_req+0xd0>
	default:
		return false;
    c866:	2300      	movs	r3, #0
	}
}
    c868:	4618      	mov	r0, r3
    c86a:	370c      	adds	r7, #12
    c86c:	46bd      	mov	sp, r7
    c86e:	bd90      	pop	{r4, r7, pc}
    c870:	0000cb6d 	.word	0x0000cb6d
    c874:	0000c54d 	.word	0x0000c54d
    c878:	0000c469 	.word	0x0000c469
    c87c:	0000c4c1 	.word	0x0000c4c1
    c880:	0000c659 	.word	0x0000c659

0000c884 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c884:	b580      	push	{r7, lr}
    c886:	b082      	sub	sp, #8
    c888:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c88a:	4b0a      	ldr	r3, [pc, #40]	; (c8b4 <usbdc_sof_notify+0x30>)
    c88c:	685b      	ldr	r3, [r3, #4]
    c88e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c890:	e009      	b.n	c8a6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c892:	687b      	ldr	r3, [r7, #4]
    c894:	685b      	ldr	r3, [r3, #4]
    c896:	2b00      	cmp	r3, #0
    c898:	d002      	beq.n	c8a0 <usbdc_sof_notify+0x1c>
			sof->cb();
    c89a:	687b      	ldr	r3, [r7, #4]
    c89c:	685b      	ldr	r3, [r3, #4]
    c89e:	4798      	blx	r3
		}
		sof = sof->next;
    c8a0:	687b      	ldr	r3, [r7, #4]
    c8a2:	681b      	ldr	r3, [r3, #0]
    c8a4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c8a6:	687b      	ldr	r3, [r7, #4]
    c8a8:	2b00      	cmp	r3, #0
    c8aa:	d1f2      	bne.n	c892 <usbdc_sof_notify+0xe>
	}
}
    c8ac:	bf00      	nop
    c8ae:	3708      	adds	r7, #8
    c8b0:	46bd      	mov	sp, r7
    c8b2:	bd80      	pop	{r7, pc}
    c8b4:	2000259c 	.word	0x2000259c

0000c8b8 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c8b8:	b580      	push	{r7, lr}
    c8ba:	b084      	sub	sp, #16
    c8bc:	af00      	add	r7, sp, #0
    c8be:	4603      	mov	r3, r0
    c8c0:	6039      	str	r1, [r7, #0]
    c8c2:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c8c4:	4b0b      	ldr	r3, [pc, #44]	; (c8f4 <usbdc_change_notify+0x3c>)
    c8c6:	68db      	ldr	r3, [r3, #12]
    c8c8:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c8ca:	e00c      	b.n	c8e6 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c8cc:	68fb      	ldr	r3, [r7, #12]
    c8ce:	685b      	ldr	r3, [r3, #4]
    c8d0:	2b00      	cmp	r3, #0
    c8d2:	d005      	beq.n	c8e0 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c8d4:	68fb      	ldr	r3, [r7, #12]
    c8d6:	685b      	ldr	r3, [r3, #4]
    c8d8:	79fa      	ldrb	r2, [r7, #7]
    c8da:	6839      	ldr	r1, [r7, #0]
    c8dc:	4610      	mov	r0, r2
    c8de:	4798      	blx	r3
		}
		cg = cg->next;
    c8e0:	68fb      	ldr	r3, [r7, #12]
    c8e2:	681b      	ldr	r3, [r3, #0]
    c8e4:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c8e6:	68fb      	ldr	r3, [r7, #12]
    c8e8:	2b00      	cmp	r3, #0
    c8ea:	d1ef      	bne.n	c8cc <usbdc_change_notify+0x14>
	}
}
    c8ec:	bf00      	nop
    c8ee:	3710      	adds	r7, #16
    c8f0:	46bd      	mov	sp, r7
    c8f2:	bd80      	pop	{r7, pc}
    c8f4:	2000259c 	.word	0x2000259c

0000c8f8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c8f8:	b580      	push	{r7, lr}
    c8fa:	b084      	sub	sp, #16
    c8fc:	af00      	add	r7, sp, #0
    c8fe:	4603      	mov	r3, r0
    c900:	6039      	str	r1, [r7, #0]
    c902:	71fb      	strb	r3, [r7, #7]
    c904:	4613      	mov	r3, r2
    c906:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c908:	4b12      	ldr	r3, [pc, #72]	; (c954 <usbdc_request_handler+0x5c>)
    c90a:	689b      	ldr	r3, [r3, #8]
    c90c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c90e:	e019      	b.n	c944 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c910:	68fb      	ldr	r3, [r7, #12]
    c912:	685b      	ldr	r3, [r3, #4]
    c914:	2b00      	cmp	r3, #0
    c916:	d012      	beq.n	c93e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c918:	68fb      	ldr	r3, [r7, #12]
    c91a:	685b      	ldr	r3, [r3, #4]
    c91c:	79ba      	ldrb	r2, [r7, #6]
    c91e:	79f8      	ldrb	r0, [r7, #7]
    c920:	6839      	ldr	r1, [r7, #0]
    c922:	4798      	blx	r3
    c924:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c926:	68bb      	ldr	r3, [r7, #8]
    c928:	2b00      	cmp	r3, #0
    c92a:	d101      	bne.n	c930 <usbdc_request_handler+0x38>
				return true;
    c92c:	2301      	movs	r3, #1
    c92e:	e00d      	b.n	c94c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c930:	68bb      	ldr	r3, [r7, #8]
    c932:	f113 0f0a 	cmn.w	r3, #10
    c936:	d002      	beq.n	c93e <usbdc_request_handler+0x46>
				return -1;
    c938:	f04f 33ff 	mov.w	r3, #4294967295
    c93c:	e006      	b.n	c94c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c93e:	68fb      	ldr	r3, [r7, #12]
    c940:	681b      	ldr	r3, [r3, #0]
    c942:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    c944:	68fb      	ldr	r3, [r7, #12]
    c946:	2b00      	cmp	r3, #0
    c948:	d1e2      	bne.n	c910 <usbdc_request_handler+0x18>
	}
	return false;
    c94a:	2300      	movs	r3, #0
}
    c94c:	4618      	mov	r0, r3
    c94e:	3710      	adds	r7, #16
    c950:	46bd      	mov	sp, r7
    c952:	bd80      	pop	{r7, pc}
    c954:	2000259c 	.word	0x2000259c

0000c958 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c958:	b580      	push	{r7, lr}
    c95a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    c95c:	4b01      	ldr	r3, [pc, #4]	; (c964 <usbd_sof_cb+0xc>)
    c95e:	4798      	blx	r3
}
    c960:	bf00      	nop
    c962:	bd80      	pop	{r7, pc}
    c964:	0000c885 	.word	0x0000c885

0000c968 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    c968:	b580      	push	{r7, lr}
    c96a:	b082      	sub	sp, #8
    c96c:	af00      	add	r7, sp, #0
    c96e:	4603      	mov	r3, r0
    c970:	6039      	str	r1, [r7, #0]
    c972:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c974:	79fb      	ldrb	r3, [r7, #7]
    c976:	2200      	movs	r2, #0
    c978:	6839      	ldr	r1, [r7, #0]
    c97a:	4618      	mov	r0, r3
    c97c:	4b14      	ldr	r3, [pc, #80]	; (c9d0 <usbdc_cb_ctl_req+0x68>)
    c97e:	4798      	blx	r3
    c980:	4603      	mov	r3, r0
    c982:	f1b3 3fff 	cmp.w	r3, #4294967295
    c986:	d00b      	beq.n	c9a0 <usbdc_cb_ctl_req+0x38>
    c988:	2b01      	cmp	r3, #1
    c98a:	d007      	beq.n	c99c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    c98c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c98e:	683b      	ldr	r3, [r7, #0]
    c990:	781b      	ldrb	r3, [r3, #0]
    c992:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    c996:	2b00      	cmp	r3, #0
    c998:	d007      	beq.n	c9aa <usbdc_cb_ctl_req+0x42>
    c99a:	e003      	b.n	c9a4 <usbdc_cb_ctl_req+0x3c>
		return true;
    c99c:	2301      	movs	r3, #1
    c99e:	e013      	b.n	c9c8 <usbdc_cb_ctl_req+0x60>
		return false;
    c9a0:	2300      	movs	r3, #0
    c9a2:	e011      	b.n	c9c8 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c9a4:	2b80      	cmp	r3, #128	; 0x80
    c9a6:	d007      	beq.n	c9b8 <usbdc_cb_ctl_req+0x50>
    c9a8:	e00d      	b.n	c9c6 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    c9aa:	79fb      	ldrb	r3, [r7, #7]
    c9ac:	6839      	ldr	r1, [r7, #0]
    c9ae:	4618      	mov	r0, r3
    c9b0:	4b08      	ldr	r3, [pc, #32]	; (c9d4 <usbdc_cb_ctl_req+0x6c>)
    c9b2:	4798      	blx	r3
    c9b4:	4603      	mov	r3, r0
    c9b6:	e007      	b.n	c9c8 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    c9b8:	79fb      	ldrb	r3, [r7, #7]
    c9ba:	6839      	ldr	r1, [r7, #0]
    c9bc:	4618      	mov	r0, r3
    c9be:	4b06      	ldr	r3, [pc, #24]	; (c9d8 <usbdc_cb_ctl_req+0x70>)
    c9c0:	4798      	blx	r3
    c9c2:	4603      	mov	r3, r0
    c9c4:	e000      	b.n	c9c8 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c9c6:	2300      	movs	r3, #0
	}
}
    c9c8:	4618      	mov	r0, r3
    c9ca:	3708      	adds	r7, #8
    c9cc:	46bd      	mov	sp, r7
    c9ce:	bd80      	pop	{r7, pc}
    c9d0:	0000c8f9 	.word	0x0000c8f9
    c9d4:	0000c799 	.word	0x0000c799
    c9d8:	0000c3c1 	.word	0x0000c3c1

0000c9dc <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c9dc:	b580      	push	{r7, lr}
    c9de:	b082      	sub	sp, #8
    c9e0:	af00      	add	r7, sp, #0
    c9e2:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c9e4:	687b      	ldr	r3, [r7, #4]
    c9e6:	781b      	ldrb	r3, [r3, #0]
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	d135      	bne.n	ca58 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c9ec:	687b      	ldr	r3, [r7, #4]
    c9ee:	785b      	ldrb	r3, [r3, #1]
    c9f0:	2b05      	cmp	r3, #5
    c9f2:	d019      	beq.n	ca28 <usbdc_ctrl_status_end+0x4c>
    c9f4:	2b09      	cmp	r3, #9
    c9f6:	d000      	beq.n	c9fa <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c9f8:	e02f      	b.n	ca5a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c9fa:	687b      	ldr	r3, [r7, #4]
    c9fc:	885b      	ldrh	r3, [r3, #2]
    c9fe:	b29b      	uxth	r3, r3
    ca00:	b2da      	uxtb	r2, r3
    ca02:	4b17      	ldr	r3, [pc, #92]	; (ca60 <usbdc_ctrl_status_end+0x84>)
    ca04:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    ca06:	687b      	ldr	r3, [r7, #4]
    ca08:	885b      	ldrh	r3, [r3, #2]
    ca0a:	b29b      	uxth	r3, r3
    ca0c:	2b00      	cmp	r3, #0
    ca0e:	d001      	beq.n	ca14 <usbdc_ctrl_status_end+0x38>
    ca10:	2204      	movs	r2, #4
    ca12:	e000      	b.n	ca16 <usbdc_ctrl_status_end+0x3a>
    ca14:	2203      	movs	r2, #3
    ca16:	4b12      	ldr	r3, [pc, #72]	; (ca60 <usbdc_ctrl_status_end+0x84>)
    ca18:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ca1a:	4b11      	ldr	r3, [pc, #68]	; (ca60 <usbdc_ctrl_status_end+0x84>)
    ca1c:	7e9b      	ldrb	r3, [r3, #26]
    ca1e:	4619      	mov	r1, r3
    ca20:	2001      	movs	r0, #1
    ca22:	4b10      	ldr	r3, [pc, #64]	; (ca64 <usbdc_ctrl_status_end+0x88>)
    ca24:	4798      	blx	r3
		break;
    ca26:	e018      	b.n	ca5a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    ca28:	687b      	ldr	r3, [r7, #4]
    ca2a:	885b      	ldrh	r3, [r3, #2]
    ca2c:	b29b      	uxth	r3, r3
    ca2e:	b2db      	uxtb	r3, r3
    ca30:	4618      	mov	r0, r3
    ca32:	4b0d      	ldr	r3, [pc, #52]	; (ca68 <usbdc_ctrl_status_end+0x8c>)
    ca34:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    ca36:	687b      	ldr	r3, [r7, #4]
    ca38:	885b      	ldrh	r3, [r3, #2]
    ca3a:	b29b      	uxth	r3, r3
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d001      	beq.n	ca44 <usbdc_ctrl_status_end+0x68>
    ca40:	2203      	movs	r2, #3
    ca42:	e000      	b.n	ca46 <usbdc_ctrl_status_end+0x6a>
    ca44:	2202      	movs	r2, #2
    ca46:	4b06      	ldr	r3, [pc, #24]	; (ca60 <usbdc_ctrl_status_end+0x84>)
    ca48:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ca4a:	4b05      	ldr	r3, [pc, #20]	; (ca60 <usbdc_ctrl_status_end+0x84>)
    ca4c:	7e9b      	ldrb	r3, [r3, #26]
    ca4e:	4619      	mov	r1, r3
    ca50:	2001      	movs	r0, #1
    ca52:	4b04      	ldr	r3, [pc, #16]	; (ca64 <usbdc_ctrl_status_end+0x88>)
    ca54:	4798      	blx	r3
		break;
    ca56:	e000      	b.n	ca5a <usbdc_ctrl_status_end+0x7e>
		return;
    ca58:	bf00      	nop
	}
}
    ca5a:	3708      	adds	r7, #8
    ca5c:	46bd      	mov	sp, r7
    ca5e:	bd80      	pop	{r7, pc}
    ca60:	2000259c 	.word	0x2000259c
    ca64:	0000c8b9 	.word	0x0000c8b9
    ca68:	0000c639 	.word	0x0000c639

0000ca6c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    ca6c:	b580      	push	{r7, lr}
    ca6e:	b082      	sub	sp, #8
    ca70:	af00      	add	r7, sp, #0
    ca72:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    ca74:	2201      	movs	r2, #1
    ca76:	6879      	ldr	r1, [r7, #4]
    ca78:	2000      	movs	r0, #0
    ca7a:	4b03      	ldr	r3, [pc, #12]	; (ca88 <usbdc_ctrl_data_end+0x1c>)
    ca7c:	4798      	blx	r3
	return false;
    ca7e:	2300      	movs	r3, #0
}
    ca80:	4618      	mov	r0, r3
    ca82:	3708      	adds	r7, #8
    ca84:	46bd      	mov	sp, r7
    ca86:	bd80      	pop	{r7, pc}
    ca88:	0000c8f9 	.word	0x0000c8f9

0000ca8c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    ca8c:	b580      	push	{r7, lr}
    ca8e:	b082      	sub	sp, #8
    ca90:	af00      	add	r7, sp, #0
    ca92:	4603      	mov	r3, r0
    ca94:	603a      	str	r2, [r7, #0]
    ca96:	71fb      	strb	r3, [r7, #7]
    ca98:	460b      	mov	r3, r1
    ca9a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    ca9c:	79bb      	ldrb	r3, [r7, #6]
    ca9e:	2b00      	cmp	r3, #0
    caa0:	d002      	beq.n	caa8 <usbdc_cb_ctl_done+0x1c>
    caa2:	2b01      	cmp	r3, #1
    caa4:	d004      	beq.n	cab0 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    caa6:	e008      	b.n	caba <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    caa8:	6838      	ldr	r0, [r7, #0]
    caaa:	4b06      	ldr	r3, [pc, #24]	; (cac4 <usbdc_cb_ctl_done+0x38>)
    caac:	4798      	blx	r3
		break;
    caae:	e004      	b.n	caba <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cab0:	6838      	ldr	r0, [r7, #0]
    cab2:	4b05      	ldr	r3, [pc, #20]	; (cac8 <usbdc_cb_ctl_done+0x3c>)
    cab4:	4798      	blx	r3
    cab6:	4603      	mov	r3, r0
    cab8:	e000      	b.n	cabc <usbdc_cb_ctl_done+0x30>
	}
	return false;
    caba:	2300      	movs	r3, #0
}
    cabc:	4618      	mov	r0, r3
    cabe:	3708      	adds	r7, #8
    cac0:	46bd      	mov	sp, r7
    cac2:	bd80      	pop	{r7, pc}
    cac4:	0000c9dd 	.word	0x0000c9dd
    cac8:	0000ca6d 	.word	0x0000ca6d

0000cacc <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    cacc:	b580      	push	{r7, lr}
    cace:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    cad0:	4b10      	ldr	r3, [pc, #64]	; (cb14 <usbdc_reset+0x48>)
    cad2:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cad4:	4b10      	ldr	r3, [pc, #64]	; (cb18 <usbdc_reset+0x4c>)
    cad6:	2202      	movs	r2, #2
    cad8:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    cada:	4b0f      	ldr	r3, [pc, #60]	; (cb18 <usbdc_reset+0x4c>)
    cadc:	2200      	movs	r2, #0
    cade:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cae0:	4b0d      	ldr	r3, [pc, #52]	; (cb18 <usbdc_reset+0x4c>)
    cae2:	2200      	movs	r2, #0
    cae4:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cae6:	2000      	movs	r0, #0
    cae8:	4b0c      	ldr	r3, [pc, #48]	; (cb1c <usbdc_reset+0x50>)
    caea:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    caec:	4b0a      	ldr	r3, [pc, #40]	; (cb18 <usbdc_reset+0x4c>)
    caee:	7f1b      	ldrb	r3, [r3, #28]
    caf0:	4618      	mov	r0, r3
    caf2:	4b0b      	ldr	r3, [pc, #44]	; (cb20 <usbdc_reset+0x54>)
    caf4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    caf6:	4a0b      	ldr	r2, [pc, #44]	; (cb24 <usbdc_reset+0x58>)
    caf8:	2100      	movs	r1, #0
    cafa:	2000      	movs	r0, #0
    cafc:	4b0a      	ldr	r3, [pc, #40]	; (cb28 <usbdc_reset+0x5c>)
    cafe:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cb00:	4a0a      	ldr	r2, [pc, #40]	; (cb2c <usbdc_reset+0x60>)
    cb02:	2102      	movs	r1, #2
    cb04:	2000      	movs	r0, #0
    cb06:	4b08      	ldr	r3, [pc, #32]	; (cb28 <usbdc_reset+0x5c>)
    cb08:	4798      	blx	r3
	usb_d_ep_enable(0);
    cb0a:	2000      	movs	r0, #0
    cb0c:	4b08      	ldr	r3, [pc, #32]	; (cb30 <usbdc_reset+0x64>)
    cb0e:	4798      	blx	r3
}
    cb10:	bf00      	nop
    cb12:	bd80      	pop	{r7, pc}
    cb14:	0000c519 	.word	0x0000c519
    cb18:	2000259c 	.word	0x2000259c
    cb1c:	00003349 	.word	0x00003349
    cb20:	00003285 	.word	0x00003285
    cb24:	0000c969 	.word	0x0000c969
    cb28:	0000369d 	.word	0x0000369d
    cb2c:	0000ca8d 	.word	0x0000ca8d
    cb30:	00003399 	.word	0x00003399

0000cb34 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cb34:	b580      	push	{r7, lr}
    cb36:	b082      	sub	sp, #8
    cb38:	af00      	add	r7, sp, #0
    cb3a:	4603      	mov	r3, r0
    cb3c:	6039      	str	r1, [r7, #0]
    cb3e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cb40:	79fb      	ldrb	r3, [r7, #7]
    cb42:	2b00      	cmp	r3, #0
    cb44:	d002      	beq.n	cb4c <usbd_event_cb+0x18>
    cb46:	2b01      	cmp	r3, #1
    cb48:	d005      	beq.n	cb56 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cb4a:	e007      	b.n	cb5c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cb4c:	6839      	ldr	r1, [r7, #0]
    cb4e:	2000      	movs	r0, #0
    cb50:	4b04      	ldr	r3, [pc, #16]	; (cb64 <usbd_event_cb+0x30>)
    cb52:	4798      	blx	r3
		break;
    cb54:	e002      	b.n	cb5c <usbd_event_cb+0x28>
		usbdc_reset();
    cb56:	4b04      	ldr	r3, [pc, #16]	; (cb68 <usbd_event_cb+0x34>)
    cb58:	4798      	blx	r3
		break;
    cb5a:	bf00      	nop
	}
}
    cb5c:	bf00      	nop
    cb5e:	3708      	adds	r7, #8
    cb60:	46bd      	mov	sp, r7
    cb62:	bd80      	pop	{r7, pc}
    cb64:	0000c8b9 	.word	0x0000c8b9
    cb68:	0000cacd 	.word	0x0000cacd

0000cb6c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cb6c:	b580      	push	{r7, lr}
    cb6e:	b088      	sub	sp, #32
    cb70:	af00      	add	r7, sp, #0
    cb72:	60b9      	str	r1, [r7, #8]
    cb74:	607a      	str	r2, [r7, #4]
    cb76:	461a      	mov	r2, r3
    cb78:	4603      	mov	r3, r0
    cb7a:	73fb      	strb	r3, [r7, #15]
    cb7c:	4613      	mov	r3, r2
    cb7e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cb80:	68bb      	ldr	r3, [r7, #8]
    cb82:	617b      	str	r3, [r7, #20]
    cb84:	687b      	ldr	r3, [r7, #4]
    cb86:	61bb      	str	r3, [r7, #24]
    cb88:	7bfb      	ldrb	r3, [r7, #15]
    cb8a:	773b      	strb	r3, [r7, #28]
    cb8c:	7bbb      	ldrb	r3, [r7, #14]
    cb8e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cb90:	f107 0314 	add.w	r3, r7, #20
    cb94:	4618      	mov	r0, r3
    cb96:	4b03      	ldr	r3, [pc, #12]	; (cba4 <usbdc_xfer+0x38>)
    cb98:	4798      	blx	r3
    cb9a:	4603      	mov	r3, r0
}
    cb9c:	4618      	mov	r0, r3
    cb9e:	3720      	adds	r7, #32
    cba0:	46bd      	mov	sp, r7
    cba2:	bd80      	pop	{r7, pc}
    cba4:	00003409 	.word	0x00003409

0000cba8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    cba8:	b580      	push	{r7, lr}
    cbaa:	b082      	sub	sp, #8
    cbac:	af00      	add	r7, sp, #0
    cbae:	4603      	mov	r3, r0
    cbb0:	6039      	str	r1, [r7, #0]
    cbb2:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cbb4:	79fb      	ldrb	r3, [r7, #7]
    cbb6:	2b01      	cmp	r3, #1
    cbb8:	d009      	beq.n	cbce <usbdc_register_handler+0x26>
    cbba:	2b02      	cmp	r3, #2
    cbbc:	d00c      	beq.n	cbd8 <usbdc_register_handler+0x30>
    cbbe:	2b00      	cmp	r3, #0
    cbc0:	d000      	beq.n	cbc4 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    cbc2:	e00e      	b.n	cbe2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    cbc4:	6839      	ldr	r1, [r7, #0]
    cbc6:	4809      	ldr	r0, [pc, #36]	; (cbec <usbdc_register_handler+0x44>)
    cbc8:	4b09      	ldr	r3, [pc, #36]	; (cbf0 <usbdc_register_handler+0x48>)
    cbca:	4798      	blx	r3
		break;
    cbcc:	e009      	b.n	cbe2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    cbce:	6839      	ldr	r1, [r7, #0]
    cbd0:	4808      	ldr	r0, [pc, #32]	; (cbf4 <usbdc_register_handler+0x4c>)
    cbd2:	4b07      	ldr	r3, [pc, #28]	; (cbf0 <usbdc_register_handler+0x48>)
    cbd4:	4798      	blx	r3
		break;
    cbd6:	e004      	b.n	cbe2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cbd8:	6839      	ldr	r1, [r7, #0]
    cbda:	4807      	ldr	r0, [pc, #28]	; (cbf8 <usbdc_register_handler+0x50>)
    cbdc:	4b04      	ldr	r3, [pc, #16]	; (cbf0 <usbdc_register_handler+0x48>)
    cbde:	4798      	blx	r3
		break;
    cbe0:	bf00      	nop
	}
}
    cbe2:	bf00      	nop
    cbe4:	3708      	adds	r7, #8
    cbe6:	46bd      	mov	sp, r7
    cbe8:	bd80      	pop	{r7, pc}
    cbea:	bf00      	nop
    cbec:	200025a0 	.word	0x200025a0
    cbf0:	000037f5 	.word	0x000037f5
    cbf4:	200025a4 	.word	0x200025a4
    cbf8:	200025a8 	.word	0x200025a8

0000cbfc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cbfc:	b580      	push	{r7, lr}
    cbfe:	b084      	sub	sp, #16
    cc00:	af00      	add	r7, sp, #0
    cc02:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    cc04:	687b      	ldr	r3, [r7, #4]
    cc06:	2b00      	cmp	r3, #0
    cc08:	bf14      	ite	ne
    cc0a:	2301      	movne	r3, #1
    cc0c:	2300      	moveq	r3, #0
    cc0e:	b2db      	uxtb	r3, r3
    cc10:	f240 3255 	movw	r2, #853	; 0x355
    cc14:	4910      	ldr	r1, [pc, #64]	; (cc58 <usbdc_init+0x5c>)
    cc16:	4618      	mov	r0, r3
    cc18:	4b10      	ldr	r3, [pc, #64]	; (cc5c <usbdc_init+0x60>)
    cc1a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    cc1c:	4b10      	ldr	r3, [pc, #64]	; (cc60 <usbdc_init+0x64>)
    cc1e:	4798      	blx	r3
    cc20:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    cc22:	68fb      	ldr	r3, [r7, #12]
    cc24:	2b00      	cmp	r3, #0
    cc26:	da01      	bge.n	cc2c <usbdc_init+0x30>
		return rc;
    cc28:	68fb      	ldr	r3, [r7, #12]
    cc2a:	e010      	b.n	cc4e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    cc2c:	2220      	movs	r2, #32
    cc2e:	2100      	movs	r1, #0
    cc30:	480c      	ldr	r0, [pc, #48]	; (cc64 <usbdc_init+0x68>)
    cc32:	4b0d      	ldr	r3, [pc, #52]	; (cc68 <usbdc_init+0x6c>)
    cc34:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    cc36:	4a0b      	ldr	r2, [pc, #44]	; (cc64 <usbdc_init+0x68>)
    cc38:	687b      	ldr	r3, [r7, #4]
    cc3a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cc3c:	490b      	ldr	r1, [pc, #44]	; (cc6c <usbdc_init+0x70>)
    cc3e:	2000      	movs	r0, #0
    cc40:	4b0b      	ldr	r3, [pc, #44]	; (cc70 <usbdc_init+0x74>)
    cc42:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cc44:	490b      	ldr	r1, [pc, #44]	; (cc74 <usbdc_init+0x78>)
    cc46:	2001      	movs	r0, #1
    cc48:	4b09      	ldr	r3, [pc, #36]	; (cc70 <usbdc_init+0x74>)
    cc4a:	4798      	blx	r3

	return 0;
    cc4c:	2300      	movs	r3, #0
}
    cc4e:	4618      	mov	r0, r3
    cc50:	3710      	adds	r7, #16
    cc52:	46bd      	mov	sp, r7
    cc54:	bd80      	pop	{r7, pc}
    cc56:	bf00      	nop
    cc58:	0000f798 	.word	0x0000f798
    cc5c:	00003719 	.word	0x00003719
    cc60:	00003171 	.word	0x00003171
    cc64:	2000259c 	.word	0x2000259c
    cc68:	0000f0a5 	.word	0x0000f0a5
    cc6c:	0000c959 	.word	0x0000c959
    cc70:	0000321d 	.word	0x0000321d
    cc74:	0000cb35 	.word	0x0000cb35

0000cc78 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    cc78:	b580      	push	{r7, lr}
    cc7a:	b082      	sub	sp, #8
    cc7c:	af00      	add	r7, sp, #0
    cc7e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    cc80:	6879      	ldr	r1, [r7, #4]
    cc82:	4803      	ldr	r0, [pc, #12]	; (cc90 <usbdc_register_function+0x18>)
    cc84:	4b03      	ldr	r3, [pc, #12]	; (cc94 <usbdc_register_function+0x1c>)
    cc86:	4798      	blx	r3
}
    cc88:	bf00      	nop
    cc8a:	3708      	adds	r7, #8
    cc8c:	46bd      	mov	sp, r7
    cc8e:	bd80      	pop	{r7, pc}
    cc90:	200025ac 	.word	0x200025ac
    cc94:	000037f5 	.word	0x000037f5

0000cc98 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cc98:	b580      	push	{r7, lr}
    cc9a:	b082      	sub	sp, #8
    cc9c:	af00      	add	r7, sp, #0
    cc9e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    cca0:	4b0f      	ldr	r3, [pc, #60]	; (cce0 <usbdc_start+0x48>)
    cca2:	7e9b      	ldrb	r3, [r3, #26]
    cca4:	2b00      	cmp	r3, #0
    cca6:	d002      	beq.n	ccae <usbdc_start+0x16>
		return ERR_BUSY;
    cca8:	f06f 0303 	mvn.w	r3, #3
    ccac:	e013      	b.n	ccd6 <usbdc_start+0x3e>
	}

	if (desces) {
    ccae:	687b      	ldr	r3, [r7, #4]
    ccb0:	2b00      	cmp	r3, #0
    ccb2:	d00e      	beq.n	ccd2 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    ccb4:	4a0a      	ldr	r2, [pc, #40]	; (cce0 <usbdc_start+0x48>)
    ccb6:	687b      	ldr	r3, [r7, #4]
    ccb8:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ccba:	687b      	ldr	r3, [r7, #4]
    ccbc:	681b      	ldr	r3, [r3, #0]
    ccbe:	79da      	ldrb	r2, [r3, #7]
    ccc0:	4b07      	ldr	r3, [pc, #28]	; (cce0 <usbdc_start+0x48>)
    ccc2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ccc4:	4b06      	ldr	r3, [pc, #24]	; (cce0 <usbdc_start+0x48>)
    ccc6:	2201      	movs	r2, #1
    ccc8:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ccca:	4b06      	ldr	r3, [pc, #24]	; (cce4 <usbdc_start+0x4c>)
    cccc:	4798      	blx	r3
	return ERR_NONE;
    ccce:	2300      	movs	r3, #0
    ccd0:	e001      	b.n	ccd6 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    ccd2:	f06f 0308 	mvn.w	r3, #8
}
    ccd6:	4618      	mov	r0, r3
    ccd8:	3708      	adds	r7, #8
    ccda:	46bd      	mov	sp, r7
    ccdc:	bd80      	pop	{r7, pc}
    ccde:	bf00      	nop
    cce0:	2000259c 	.word	0x2000259c
    cce4:	00003241 	.word	0x00003241

0000cce8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    cce8:	b580      	push	{r7, lr}
    ccea:	af00      	add	r7, sp, #0
	usb_d_attach();
    ccec:	4b01      	ldr	r3, [pc, #4]	; (ccf4 <usbdc_attach+0xc>)
    ccee:	4798      	blx	r3
}
    ccf0:	bf00      	nop
    ccf2:	bd80      	pop	{r7, pc}
    ccf4:	00003255 	.word	0x00003255

0000ccf8 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    ccf8:	b480      	push	{r7}
    ccfa:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    ccfc:	4b03      	ldr	r3, [pc, #12]	; (cd0c <usbdc_get_ctrl_buffer+0x14>)
    ccfe:	695b      	ldr	r3, [r3, #20]
}
    cd00:	4618      	mov	r0, r3
    cd02:	46bd      	mov	sp, r7
    cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd08:	4770      	bx	lr
    cd0a:	bf00      	nop
    cd0c:	2000259c 	.word	0x2000259c

0000cd10 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    cd10:	b480      	push	{r7}
    cd12:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    cd14:	4b07      	ldr	r3, [pc, #28]	; (cd34 <usbdc_get_state+0x24>)
    cd16:	7e9b      	ldrb	r3, [r3, #26]
    cd18:	f003 0310 	and.w	r3, r3, #16
    cd1c:	2b00      	cmp	r3, #0
    cd1e:	d001      	beq.n	cd24 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    cd20:	2310      	movs	r3, #16
    cd22:	e001      	b.n	cd28 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    cd24:	4b03      	ldr	r3, [pc, #12]	; (cd34 <usbdc_get_state+0x24>)
    cd26:	7e9b      	ldrb	r3, [r3, #26]
}
    cd28:	4618      	mov	r0, r3
    cd2a:	46bd      	mov	sp, r7
    cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd30:	4770      	bx	lr
    cd32:	bf00      	nop
    cd34:	2000259c 	.word	0x2000259c

0000cd38 <usb_get_u16>:
{
    cd38:	b480      	push	{r7}
    cd3a:	b083      	sub	sp, #12
    cd3c:	af00      	add	r7, sp, #0
    cd3e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cd40:	687b      	ldr	r3, [r7, #4]
    cd42:	781b      	ldrb	r3, [r3, #0]
    cd44:	b29a      	uxth	r2, r3
    cd46:	687b      	ldr	r3, [r7, #4]
    cd48:	3301      	adds	r3, #1
    cd4a:	781b      	ldrb	r3, [r3, #0]
    cd4c:	b29b      	uxth	r3, r3
    cd4e:	021b      	lsls	r3, r3, #8
    cd50:	b29b      	uxth	r3, r3
    cd52:	4413      	add	r3, r2
    cd54:	b29b      	uxth	r3, r3
}
    cd56:	4618      	mov	r0, r3
    cd58:	370c      	adds	r7, #12
    cd5a:	46bd      	mov	sp, r7
    cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd60:	4770      	bx	lr

0000cd62 <usb_desc_len>:
{
    cd62:	b480      	push	{r7}
    cd64:	b083      	sub	sp, #12
    cd66:	af00      	add	r7, sp, #0
    cd68:	6078      	str	r0, [r7, #4]
	return desc[0];
    cd6a:	687b      	ldr	r3, [r7, #4]
    cd6c:	781b      	ldrb	r3, [r3, #0]
}
    cd6e:	4618      	mov	r0, r3
    cd70:	370c      	adds	r7, #12
    cd72:	46bd      	mov	sp, r7
    cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd78:	4770      	bx	lr

0000cd7a <usb_desc_type>:
{
    cd7a:	b480      	push	{r7}
    cd7c:	b083      	sub	sp, #12
    cd7e:	af00      	add	r7, sp, #0
    cd80:	6078      	str	r0, [r7, #4]
	return desc[1];
    cd82:	687b      	ldr	r3, [r7, #4]
    cd84:	3301      	adds	r3, #1
    cd86:	781b      	ldrb	r3, [r3, #0]
}
    cd88:	4618      	mov	r0, r3
    cd8a:	370c      	adds	r7, #12
    cd8c:	46bd      	mov	sp, r7
    cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd92:	4770      	bx	lr

0000cd94 <usb_desc_next>:
{
    cd94:	b580      	push	{r7, lr}
    cd96:	b082      	sub	sp, #8
    cd98:	af00      	add	r7, sp, #0
    cd9a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cd9c:	6878      	ldr	r0, [r7, #4]
    cd9e:	4b05      	ldr	r3, [pc, #20]	; (cdb4 <usb_desc_next+0x20>)
    cda0:	4798      	blx	r3
    cda2:	4603      	mov	r3, r0
    cda4:	461a      	mov	r2, r3
    cda6:	687b      	ldr	r3, [r7, #4]
    cda8:	4413      	add	r3, r2
}
    cdaa:	4618      	mov	r0, r3
    cdac:	3708      	adds	r7, #8
    cdae:	46bd      	mov	sp, r7
    cdb0:	bd80      	pop	{r7, pc}
    cdb2:	bf00      	nop
    cdb4:	0000cd63 	.word	0x0000cd63

0000cdb8 <usb_cfg_desc_total_len>:
{
    cdb8:	b580      	push	{r7, lr}
    cdba:	b082      	sub	sp, #8
    cdbc:	af00      	add	r7, sp, #0
    cdbe:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cdc0:	687b      	ldr	r3, [r7, #4]
    cdc2:	3302      	adds	r3, #2
    cdc4:	4618      	mov	r0, r3
    cdc6:	4b03      	ldr	r3, [pc, #12]	; (cdd4 <usb_cfg_desc_total_len+0x1c>)
    cdc8:	4798      	blx	r3
    cdca:	4603      	mov	r3, r0
}
    cdcc:	4618      	mov	r0, r3
    cdce:	3708      	adds	r7, #8
    cdd0:	46bd      	mov	sp, r7
    cdd2:	bd80      	pop	{r7, pc}
    cdd4:	0000cd39 	.word	0x0000cd39

0000cdd8 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    cdd8:	b580      	push	{r7, lr}
    cdda:	b082      	sub	sp, #8
    cddc:	af00      	add	r7, sp, #0
    cdde:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    cde0:	6878      	ldr	r0, [r7, #4]
    cde2:	4b05      	ldr	r3, [pc, #20]	; (cdf8 <usb_cfg_desc_next+0x20>)
    cde4:	4798      	blx	r3
    cde6:	4603      	mov	r3, r0
    cde8:	461a      	mov	r2, r3
    cdea:	687b      	ldr	r3, [r7, #4]
    cdec:	4413      	add	r3, r2
}
    cdee:	4618      	mov	r0, r3
    cdf0:	3708      	adds	r7, #8
    cdf2:	46bd      	mov	sp, r7
    cdf4:	bd80      	pop	{r7, pc}
    cdf6:	bf00      	nop
    cdf8:	0000cdb9 	.word	0x0000cdb9

0000cdfc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    cdfc:	b580      	push	{r7, lr}
    cdfe:	b084      	sub	sp, #16
    ce00:	af00      	add	r7, sp, #0
    ce02:	60f8      	str	r0, [r7, #12]
    ce04:	60b9      	str	r1, [r7, #8]
    ce06:	4613      	mov	r3, r2
    ce08:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ce0a:	e015      	b.n	ce38 <usb_find_desc+0x3c>
		_desc_len_check();
    ce0c:	68f8      	ldr	r0, [r7, #12]
    ce0e:	4b0f      	ldr	r3, [pc, #60]	; (ce4c <usb_find_desc+0x50>)
    ce10:	4798      	blx	r3
    ce12:	4603      	mov	r3, r0
    ce14:	2b01      	cmp	r3, #1
    ce16:	d801      	bhi.n	ce1c <usb_find_desc+0x20>
    ce18:	2300      	movs	r3, #0
    ce1a:	e012      	b.n	ce42 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    ce1c:	68f8      	ldr	r0, [r7, #12]
    ce1e:	4b0c      	ldr	r3, [pc, #48]	; (ce50 <usb_find_desc+0x54>)
    ce20:	4798      	blx	r3
    ce22:	4603      	mov	r3, r0
    ce24:	461a      	mov	r2, r3
    ce26:	79fb      	ldrb	r3, [r7, #7]
    ce28:	4293      	cmp	r3, r2
    ce2a:	d101      	bne.n	ce30 <usb_find_desc+0x34>
			return desc;
    ce2c:	68fb      	ldr	r3, [r7, #12]
    ce2e:	e008      	b.n	ce42 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    ce30:	68f8      	ldr	r0, [r7, #12]
    ce32:	4b08      	ldr	r3, [pc, #32]	; (ce54 <usb_find_desc+0x58>)
    ce34:	4798      	blx	r3
    ce36:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ce38:	68fa      	ldr	r2, [r7, #12]
    ce3a:	68bb      	ldr	r3, [r7, #8]
    ce3c:	429a      	cmp	r2, r3
    ce3e:	d3e5      	bcc.n	ce0c <usb_find_desc+0x10>
	}
	return NULL;
    ce40:	2300      	movs	r3, #0
}
    ce42:	4618      	mov	r0, r3
    ce44:	3710      	adds	r7, #16
    ce46:	46bd      	mov	sp, r7
    ce48:	bd80      	pop	{r7, pc}
    ce4a:	bf00      	nop
    ce4c:	0000cd63 	.word	0x0000cd63
    ce50:	0000cd7b 	.word	0x0000cd7b
    ce54:	0000cd95 	.word	0x0000cd95

0000ce58 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    ce58:	b580      	push	{r7, lr}
    ce5a:	b082      	sub	sp, #8
    ce5c:	af00      	add	r7, sp, #0
    ce5e:	6078      	str	r0, [r7, #4]
    ce60:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ce62:	e019      	b.n	ce98 <usb_find_ep_desc+0x40>
		_desc_len_check();
    ce64:	6878      	ldr	r0, [r7, #4]
    ce66:	4b12      	ldr	r3, [pc, #72]	; (ceb0 <usb_find_ep_desc+0x58>)
    ce68:	4798      	blx	r3
    ce6a:	4603      	mov	r3, r0
    ce6c:	2b01      	cmp	r3, #1
    ce6e:	d801      	bhi.n	ce74 <usb_find_ep_desc+0x1c>
    ce70:	2300      	movs	r3, #0
    ce72:	e018      	b.n	cea6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    ce74:	6878      	ldr	r0, [r7, #4]
    ce76:	4b0f      	ldr	r3, [pc, #60]	; (ceb4 <usb_find_ep_desc+0x5c>)
    ce78:	4798      	blx	r3
    ce7a:	4603      	mov	r3, r0
    ce7c:	2b04      	cmp	r3, #4
    ce7e:	d010      	beq.n	cea2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    ce80:	6878      	ldr	r0, [r7, #4]
    ce82:	4b0c      	ldr	r3, [pc, #48]	; (ceb4 <usb_find_ep_desc+0x5c>)
    ce84:	4798      	blx	r3
    ce86:	4603      	mov	r3, r0
    ce88:	2b05      	cmp	r3, #5
    ce8a:	d101      	bne.n	ce90 <usb_find_ep_desc+0x38>
			return desc;
    ce8c:	687b      	ldr	r3, [r7, #4]
    ce8e:	e00a      	b.n	cea6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    ce90:	6878      	ldr	r0, [r7, #4]
    ce92:	4b09      	ldr	r3, [pc, #36]	; (ceb8 <usb_find_ep_desc+0x60>)
    ce94:	4798      	blx	r3
    ce96:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    ce98:	687a      	ldr	r2, [r7, #4]
    ce9a:	683b      	ldr	r3, [r7, #0]
    ce9c:	429a      	cmp	r2, r3
    ce9e:	d3e1      	bcc.n	ce64 <usb_find_ep_desc+0xc>
    cea0:	e000      	b.n	cea4 <usb_find_ep_desc+0x4c>
			break;
    cea2:	bf00      	nop
	}
	return NULL;
    cea4:	2300      	movs	r3, #0
}
    cea6:	4618      	mov	r0, r3
    cea8:	3708      	adds	r7, #8
    ceaa:	46bd      	mov	sp, r7
    ceac:	bd80      	pop	{r7, pc}
    ceae:	bf00      	nop
    ceb0:	0000cd63 	.word	0x0000cd63
    ceb4:	0000cd7b 	.word	0x0000cd7b
    ceb8:	0000cd95 	.word	0x0000cd95

0000cebc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    cebc:	b580      	push	{r7, lr}
    cebe:	b084      	sub	sp, #16
    cec0:	af00      	add	r7, sp, #0
    cec2:	60f8      	str	r0, [r7, #12]
    cec4:	60b9      	str	r1, [r7, #8]
    cec6:	4613      	mov	r3, r2
    cec8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ceca:	2202      	movs	r2, #2
    cecc:	68b9      	ldr	r1, [r7, #8]
    cece:	68f8      	ldr	r0, [r7, #12]
    ced0:	4b15      	ldr	r3, [pc, #84]	; (cf28 <usb_find_cfg_desc+0x6c>)
    ced2:	4798      	blx	r3
    ced4:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    ced6:	68fb      	ldr	r3, [r7, #12]
    ced8:	2b00      	cmp	r3, #0
    ceda:	d11a      	bne.n	cf12 <usb_find_cfg_desc+0x56>
		return NULL;
    cedc:	2300      	movs	r3, #0
    cede:	e01f      	b.n	cf20 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    cee0:	68f8      	ldr	r0, [r7, #12]
    cee2:	4b12      	ldr	r3, [pc, #72]	; (cf2c <usb_find_cfg_desc+0x70>)
    cee4:	4798      	blx	r3
    cee6:	4603      	mov	r3, r0
    cee8:	2b01      	cmp	r3, #1
    ceea:	d801      	bhi.n	cef0 <usb_find_cfg_desc+0x34>
    ceec:	2300      	movs	r3, #0
    ceee:	e017      	b.n	cf20 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    cef0:	68fb      	ldr	r3, [r7, #12]
    cef2:	3301      	adds	r3, #1
    cef4:	781b      	ldrb	r3, [r3, #0]
    cef6:	2b02      	cmp	r3, #2
    cef8:	d110      	bne.n	cf1c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    cefa:	68fb      	ldr	r3, [r7, #12]
    cefc:	3305      	adds	r3, #5
    cefe:	781b      	ldrb	r3, [r3, #0]
    cf00:	79fa      	ldrb	r2, [r7, #7]
    cf02:	429a      	cmp	r2, r3
    cf04:	d101      	bne.n	cf0a <usb_find_cfg_desc+0x4e>
			return desc;
    cf06:	68fb      	ldr	r3, [r7, #12]
    cf08:	e00a      	b.n	cf20 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    cf0a:	68f8      	ldr	r0, [r7, #12]
    cf0c:	4b08      	ldr	r3, [pc, #32]	; (cf30 <usb_find_cfg_desc+0x74>)
    cf0e:	4798      	blx	r3
    cf10:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cf12:	68fa      	ldr	r2, [r7, #12]
    cf14:	68bb      	ldr	r3, [r7, #8]
    cf16:	429a      	cmp	r2, r3
    cf18:	d3e2      	bcc.n	cee0 <usb_find_cfg_desc+0x24>
    cf1a:	e000      	b.n	cf1e <usb_find_cfg_desc+0x62>
			break;
    cf1c:	bf00      	nop
	}
	return NULL;
    cf1e:	2300      	movs	r3, #0
}
    cf20:	4618      	mov	r0, r3
    cf22:	3710      	adds	r7, #16
    cf24:	46bd      	mov	sp, r7
    cf26:	bd80      	pop	{r7, pc}
    cf28:	0000cdfd 	.word	0x0000cdfd
    cf2c:	0000cd63 	.word	0x0000cd63
    cf30:	0000cdd9 	.word	0x0000cdd9

0000cf34 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    cf34:	b580      	push	{r7, lr}
    cf36:	b086      	sub	sp, #24
    cf38:	af00      	add	r7, sp, #0
    cf3a:	60f8      	str	r0, [r7, #12]
    cf3c:	60b9      	str	r1, [r7, #8]
    cf3e:	4613      	mov	r3, r2
    cf40:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    cf42:	2300      	movs	r3, #0
    cf44:	75fb      	strb	r3, [r7, #23]
    cf46:	e020      	b.n	cf8a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    cf48:	2203      	movs	r2, #3
    cf4a:	68b9      	ldr	r1, [r7, #8]
    cf4c:	68f8      	ldr	r0, [r7, #12]
    cf4e:	4b13      	ldr	r3, [pc, #76]	; (cf9c <usb_find_str_desc+0x68>)
    cf50:	4798      	blx	r3
    cf52:	60f8      	str	r0, [r7, #12]
		if (desc) {
    cf54:	68fb      	ldr	r3, [r7, #12]
    cf56:	2b00      	cmp	r3, #0
    cf58:	d015      	beq.n	cf86 <usb_find_str_desc+0x52>
			_desc_len_check();
    cf5a:	68f8      	ldr	r0, [r7, #12]
    cf5c:	4b10      	ldr	r3, [pc, #64]	; (cfa0 <usb_find_str_desc+0x6c>)
    cf5e:	4798      	blx	r3
    cf60:	4603      	mov	r3, r0
    cf62:	2b01      	cmp	r3, #1
    cf64:	d801      	bhi.n	cf6a <usb_find_str_desc+0x36>
    cf66:	2300      	movs	r3, #0
    cf68:	e014      	b.n	cf94 <usb_find_str_desc+0x60>
			if (i == str_index) {
    cf6a:	7dfa      	ldrb	r2, [r7, #23]
    cf6c:	79fb      	ldrb	r3, [r7, #7]
    cf6e:	429a      	cmp	r2, r3
    cf70:	d101      	bne.n	cf76 <usb_find_str_desc+0x42>
				return desc;
    cf72:	68fb      	ldr	r3, [r7, #12]
    cf74:	e00e      	b.n	cf94 <usb_find_str_desc+0x60>
			}
			i++;
    cf76:	7dfb      	ldrb	r3, [r7, #23]
    cf78:	3301      	adds	r3, #1
    cf7a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    cf7c:	68f8      	ldr	r0, [r7, #12]
    cf7e:	4b09      	ldr	r3, [pc, #36]	; (cfa4 <usb_find_str_desc+0x70>)
    cf80:	4798      	blx	r3
    cf82:	60f8      	str	r0, [r7, #12]
    cf84:	e001      	b.n	cf8a <usb_find_str_desc+0x56>
		} else {
			return NULL;
    cf86:	2300      	movs	r3, #0
    cf88:	e004      	b.n	cf94 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    cf8a:	68fa      	ldr	r2, [r7, #12]
    cf8c:	68bb      	ldr	r3, [r7, #8]
    cf8e:	429a      	cmp	r2, r3
    cf90:	d3da      	bcc.n	cf48 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    cf92:	2300      	movs	r3, #0
}
    cf94:	4618      	mov	r0, r3
    cf96:	3718      	adds	r7, #24
    cf98:	46bd      	mov	sp, r7
    cf9a:	bd80      	pop	{r7, pc}
    cf9c:	0000cdfd 	.word	0x0000cdfd
    cfa0:	0000cd63 	.word	0x0000cd63
    cfa4:	0000cd95 	.word	0x0000cd95

0000cfa8 <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
    cfa8:	b580      	push	{r7, lr}
    cfaa:	b084      	sub	sp, #16
    cfac:	af00      	add	r7, sp, #0
    cfae:	60f8      	str	r0, [r7, #12]
    cfb0:	60b9      	str	r1, [r7, #8]
    cfb2:	607a      	str	r2, [r7, #4]
            return ltoa(value, string, radix);
    cfb4:	687a      	ldr	r2, [r7, #4]
    cfb6:	68b9      	ldr	r1, [r7, #8]
    cfb8:	68f8      	ldr	r0, [r7, #12]
    cfba:	4b03      	ldr	r3, [pc, #12]	; (cfc8 <itoa+0x20>)
    cfbc:	4798      	blx	r3
    cfbe:	4603      	mov	r3, r0
        }
    cfc0:	4618      	mov	r0, r3
    cfc2:	3710      	adds	r7, #16
    cfc4:	46bd      	mov	sp, r7
    cfc6:	bd80      	pop	{r7, pc}
    cfc8:	0000cfcd 	.word	0x0000cfcd

0000cfcc <ltoa>:

        extern char* ltoa(long value, char*string, int radix)
        {
    cfcc:	b480      	push	{r7}
    cfce:	b093      	sub	sp, #76	; 0x4c
    cfd0:	af00      	add	r7, sp, #0
    cfd2:	60f8      	str	r0, [r7, #12]
    cfd4:	60b9      	str	r1, [r7, #8]
    cfd6:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
    cfd8:	f107 0310 	add.w	r3, r7, #16
    cfdc:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
    cfde:	68bb      	ldr	r3, [r7, #8]
    cfe0:	2b00      	cmp	r3, #0
    cfe2:	d101      	bne.n	cfe8 <ltoa+0x1c>
            {
                return 0;
    cfe4:	2300      	movs	r3, #0
    cfe6:	e061      	b.n	d0ac <ltoa+0xe0>
            }

            if (radix > 36 || radix <= 1)
    cfe8:	687b      	ldr	r3, [r7, #4]
    cfea:	2b24      	cmp	r3, #36	; 0x24
    cfec:	dc02      	bgt.n	cff4 <ltoa+0x28>
    cfee:	687b      	ldr	r3, [r7, #4]
    cff0:	2b01      	cmp	r3, #1
    cff2:	dc01      	bgt.n	cff8 <ltoa+0x2c>
            {
                return 0;
    cff4:	2300      	movs	r3, #0
    cff6:	e059      	b.n	d0ac <ltoa+0xe0>
            }

            sign = (radix == 10 && value < 0);
    cff8:	687b      	ldr	r3, [r7, #4]
    cffa:	2b0a      	cmp	r3, #10
    cffc:	d104      	bne.n	d008 <ltoa+0x3c>
    cffe:	68fb      	ldr	r3, [r7, #12]
    d000:	2b00      	cmp	r3, #0
    d002:	da01      	bge.n	d008 <ltoa+0x3c>
    d004:	2301      	movs	r3, #1
    d006:	e000      	b.n	d00a <ltoa+0x3e>
    d008:	2300      	movs	r3, #0
    d00a:	63bb      	str	r3, [r7, #56]	; 0x38
            if (sign)
    d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d00e:	2b00      	cmp	r3, #0
    d010:	d003      	beq.n	d01a <ltoa+0x4e>
            {
                v = -value;
    d012:	68fb      	ldr	r3, [r7, #12]
    d014:	425b      	negs	r3, r3
    d016:	643b      	str	r3, [r7, #64]	; 0x40
    d018:	e023      	b.n	d062 <ltoa+0x96>
            }
            else
            {
                v = (unsigned long)value;
    d01a:	68fb      	ldr	r3, [r7, #12]
    d01c:	643b      	str	r3, [r7, #64]	; 0x40
            }

            while (v || tp == tmp)
    d01e:	e020      	b.n	d062 <ltoa+0x96>
            {
                i = v % radix;
    d020:	687a      	ldr	r2, [r7, #4]
    d022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d024:	fbb3 f1f2 	udiv	r1, r3, r2
    d028:	fb02 f201 	mul.w	r2, r2, r1
    d02c:	1a9b      	subs	r3, r3, r2
    d02e:	637b      	str	r3, [r7, #52]	; 0x34
                v = v / radix;
    d030:	687b      	ldr	r3, [r7, #4]
    d032:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d034:	fbb2 f3f3 	udiv	r3, r2, r3
    d038:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
    d03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d03c:	2b09      	cmp	r3, #9
    d03e:	dc08      	bgt.n	d052 <ltoa+0x86>
                    *tp++ = i + '0';
    d040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d042:	1c5a      	adds	r2, r3, #1
    d044:	647a      	str	r2, [r7, #68]	; 0x44
    d046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d048:	b2d2      	uxtb	r2, r2
    d04a:	3230      	adds	r2, #48	; 0x30
    d04c:	b2d2      	uxtb	r2, r2
    d04e:	701a      	strb	r2, [r3, #0]
    d050:	e007      	b.n	d062 <ltoa+0x96>
                else
                    *tp++ = i + 'a' - 10;
    d052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d054:	1c5a      	adds	r2, r3, #1
    d056:	647a      	str	r2, [r7, #68]	; 0x44
    d058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d05a:	b2d2      	uxtb	r2, r2
    d05c:	3257      	adds	r2, #87	; 0x57
    d05e:	b2d2      	uxtb	r2, r2
    d060:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
    d062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d064:	2b00      	cmp	r3, #0
    d066:	d1db      	bne.n	d020 <ltoa+0x54>
    d068:	f107 0310 	add.w	r3, r7, #16
    d06c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d06e:	429a      	cmp	r2, r3
    d070:	d0d6      	beq.n	d020 <ltoa+0x54>
            }

            sp = string;
    d072:	68bb      	ldr	r3, [r7, #8]
    d074:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (sign)
    d076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d078:	2b00      	cmp	r3, #0
    d07a:	d00e      	beq.n	d09a <ltoa+0xce>
                *sp++ = '-';
    d07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d07e:	1c5a      	adds	r2, r3, #1
    d080:	63fa      	str	r2, [r7, #60]	; 0x3c
    d082:	222d      	movs	r2, #45	; 0x2d
    d084:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d086:	e008      	b.n	d09a <ltoa+0xce>
                *sp++ = *--tp;
    d088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d08a:	1c5a      	adds	r2, r3, #1
    d08c:	63fa      	str	r2, [r7, #60]	; 0x3c
    d08e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d090:	3a01      	subs	r2, #1
    d092:	647a      	str	r2, [r7, #68]	; 0x44
    d094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d096:	7812      	ldrb	r2, [r2, #0]
    d098:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d09a:	f107 0310 	add.w	r3, r7, #16
    d09e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d0a0:	429a      	cmp	r2, r3
    d0a2:	d8f1      	bhi.n	d088 <ltoa+0xbc>
            *sp = 0;
    d0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d0a6:	2200      	movs	r2, #0
    d0a8:	701a      	strb	r2, [r3, #0]

            return string;
    d0aa:	68bb      	ldr	r3, [r7, #8]
        }
    d0ac:	4618      	mov	r0, r3
    d0ae:	374c      	adds	r7, #76	; 0x4c
    d0b0:	46bd      	mov	sp, r7
    d0b2:	bc80      	pop	{r7}
    d0b4:	4770      	bx	lr

0000d0b6 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    d0b6:	b480      	push	{r7}
    d0b8:	b085      	sub	sp, #20
    d0ba:	af00      	add	r7, sp, #0
    d0bc:	60f8      	str	r0, [r7, #12]
    d0be:	460b      	mov	r3, r1
    d0c0:	607a      	str	r2, [r7, #4]
    d0c2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    d0c4:	7afb      	ldrb	r3, [r7, #11]
    d0c6:	68fa      	ldr	r2, [r7, #12]
    d0c8:	01db      	lsls	r3, r3, #7
    d0ca:	4413      	add	r3, r2
    d0cc:	3308      	adds	r3, #8
    d0ce:	687a      	ldr	r2, [r7, #4]
    d0d0:	601a      	str	r2, [r3, #0]
}
    d0d2:	bf00      	nop
    d0d4:	3714      	adds	r7, #20
    d0d6:	46bd      	mov	sp, r7
    d0d8:	bc80      	pop	{r7}
    d0da:	4770      	bx	lr

0000d0dc <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    d0dc:	b480      	push	{r7}
    d0de:	b085      	sub	sp, #20
    d0e0:	af00      	add	r7, sp, #0
    d0e2:	60f8      	str	r0, [r7, #12]
    d0e4:	460b      	mov	r3, r1
    d0e6:	607a      	str	r2, [r7, #4]
    d0e8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    d0ea:	7afb      	ldrb	r3, [r7, #11]
    d0ec:	68fa      	ldr	r2, [r7, #12]
    d0ee:	01db      	lsls	r3, r3, #7
    d0f0:	4413      	add	r3, r2
    d0f2:	3304      	adds	r3, #4
    d0f4:	687a      	ldr	r2, [r7, #4]
    d0f6:	601a      	str	r2, [r3, #0]
}
    d0f8:	bf00      	nop
    d0fa:	3714      	adds	r7, #20
    d0fc:	46bd      	mov	sp, r7
    d0fe:	bc80      	pop	{r7}
    d100:	4770      	bx	lr

0000d102 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    d102:	b480      	push	{r7}
    d104:	b085      	sub	sp, #20
    d106:	af00      	add	r7, sp, #0
    d108:	60f8      	str	r0, [r7, #12]
    d10a:	460b      	mov	r3, r1
    d10c:	607a      	str	r2, [r7, #4]
    d10e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    d110:	7afb      	ldrb	r3, [r7, #11]
    d112:	68fa      	ldr	r2, [r7, #12]
    d114:	01db      	lsls	r3, r3, #7
    d116:	4413      	add	r3, r2
    d118:	3318      	adds	r3, #24
    d11a:	687a      	ldr	r2, [r7, #4]
    d11c:	601a      	str	r2, [r3, #0]
}
    d11e:	bf00      	nop
    d120:	3714      	adds	r7, #20
    d122:	46bd      	mov	sp, r7
    d124:	bc80      	pop	{r7}
    d126:	4770      	bx	lr

0000d128 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    d128:	b480      	push	{r7}
    d12a:	b085      	sub	sp, #20
    d12c:	af00      	add	r7, sp, #0
    d12e:	60f8      	str	r0, [r7, #12]
    d130:	460b      	mov	r3, r1
    d132:	607a      	str	r2, [r7, #4]
    d134:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    d136:	7afb      	ldrb	r3, [r7, #11]
    d138:	68fa      	ldr	r2, [r7, #12]
    d13a:	01db      	lsls	r3, r3, #7
    d13c:	4413      	add	r3, r2
    d13e:	3314      	adds	r3, #20
    d140:	687a      	ldr	r2, [r7, #4]
    d142:	601a      	str	r2, [r3, #0]
}
    d144:	bf00      	nop
    d146:	3714      	adds	r7, #20
    d148:	46bd      	mov	sp, r7
    d14a:	bc80      	pop	{r7}
    d14c:	4770      	bx	lr

0000d14e <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    d14e:	b480      	push	{r7}
    d150:	b085      	sub	sp, #20
    d152:	af00      	add	r7, sp, #0
    d154:	6078      	str	r0, [r7, #4]
    d156:	4608      	mov	r0, r1
    d158:	4611      	mov	r1, r2
    d15a:	461a      	mov	r2, r3
    d15c:	4603      	mov	r3, r0
    d15e:	70fb      	strb	r3, [r7, #3]
    d160:	460b      	mov	r3, r1
    d162:	70bb      	strb	r3, [r7, #2]
    d164:	4613      	mov	r3, r2
    d166:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    d168:	78fa      	ldrb	r2, [r7, #3]
    d16a:	78bb      	ldrb	r3, [r7, #2]
    d16c:	6879      	ldr	r1, [r7, #4]
    d16e:	01d2      	lsls	r2, r2, #7
    d170:	440a      	add	r2, r1
    d172:	4413      	add	r3, r2
    d174:	3330      	adds	r3, #48	; 0x30
    d176:	781b      	ldrb	r3, [r3, #0]
    d178:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    d17a:	7bfb      	ldrb	r3, [r7, #15]
    d17c:	f023 030f 	bic.w	r3, r3, #15
    d180:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    d182:	787b      	ldrb	r3, [r7, #1]
    d184:	f003 030f 	and.w	r3, r3, #15
    d188:	b2da      	uxtb	r2, r3
    d18a:	7bfb      	ldrb	r3, [r7, #15]
    d18c:	4313      	orrs	r3, r2
    d18e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    d190:	78fa      	ldrb	r2, [r7, #3]
    d192:	78bb      	ldrb	r3, [r7, #2]
    d194:	6879      	ldr	r1, [r7, #4]
    d196:	01d2      	lsls	r2, r2, #7
    d198:	440a      	add	r2, r1
    d19a:	4413      	add	r3, r2
    d19c:	3330      	adds	r3, #48	; 0x30
    d19e:	7bfa      	ldrb	r2, [r7, #15]
    d1a0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    d1a2:	bf00      	nop
    d1a4:	3714      	adds	r7, #20
    d1a6:	46bd      	mov	sp, r7
    d1a8:	bc80      	pop	{r7}
    d1aa:	4770      	bx	lr

0000d1ac <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    d1ac:	b480      	push	{r7}
    d1ae:	b085      	sub	sp, #20
    d1b0:	af00      	add	r7, sp, #0
    d1b2:	6078      	str	r0, [r7, #4]
    d1b4:	4608      	mov	r0, r1
    d1b6:	4611      	mov	r1, r2
    d1b8:	461a      	mov	r2, r3
    d1ba:	4603      	mov	r3, r0
    d1bc:	70fb      	strb	r3, [r7, #3]
    d1be:	460b      	mov	r3, r1
    d1c0:	70bb      	strb	r3, [r7, #2]
    d1c2:	4613      	mov	r3, r2
    d1c4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    d1c6:	78fa      	ldrb	r2, [r7, #3]
    d1c8:	78bb      	ldrb	r3, [r7, #2]
    d1ca:	6879      	ldr	r1, [r7, #4]
    d1cc:	01d2      	lsls	r2, r2, #7
    d1ce:	440a      	add	r2, r1
    d1d0:	4413      	add	r3, r2
    d1d2:	3330      	adds	r3, #48	; 0x30
    d1d4:	781b      	ldrb	r3, [r3, #0]
    d1d6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    d1d8:	7bfb      	ldrb	r3, [r7, #15]
    d1da:	f003 030f 	and.w	r3, r3, #15
    d1de:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    d1e0:	787b      	ldrb	r3, [r7, #1]
    d1e2:	011b      	lsls	r3, r3, #4
    d1e4:	b2da      	uxtb	r2, r3
    d1e6:	7bfb      	ldrb	r3, [r7, #15]
    d1e8:	4313      	orrs	r3, r2
    d1ea:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    d1ec:	78fa      	ldrb	r2, [r7, #3]
    d1ee:	78bb      	ldrb	r3, [r7, #2]
    d1f0:	6879      	ldr	r1, [r7, #4]
    d1f2:	01d2      	lsls	r2, r2, #7
    d1f4:	440a      	add	r2, r1
    d1f6:	4413      	add	r3, r2
    d1f8:	3330      	adds	r3, #48	; 0x30
    d1fa:	7bfa      	ldrb	r2, [r7, #15]
    d1fc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    d1fe:	bf00      	nop
    d200:	3714      	adds	r7, #20
    d202:	46bd      	mov	sp, r7
    d204:	bc80      	pop	{r7}
    d206:	4770      	bx	lr

0000d208 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    d208:	b480      	push	{r7}
    d20a:	b085      	sub	sp, #20
    d20c:	af00      	add	r7, sp, #0
    d20e:	6078      	str	r0, [r7, #4]
    d210:	4608      	mov	r0, r1
    d212:	4611      	mov	r1, r2
    d214:	461a      	mov	r2, r3
    d216:	4603      	mov	r3, r0
    d218:	70fb      	strb	r3, [r7, #3]
    d21a:	460b      	mov	r3, r1
    d21c:	70bb      	strb	r3, [r7, #2]
    d21e:	4613      	mov	r3, r2
    d220:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    d222:	78fa      	ldrb	r2, [r7, #3]
    d224:	78bb      	ldrb	r3, [r7, #2]
    d226:	6879      	ldr	r1, [r7, #4]
    d228:	01d2      	lsls	r2, r2, #7
    d22a:	440a      	add	r2, r1
    d22c:	4413      	add	r3, r2
    d22e:	3340      	adds	r3, #64	; 0x40
    d230:	781b      	ldrb	r3, [r3, #0]
    d232:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    d234:	7bfb      	ldrb	r3, [r7, #15]
    d236:	f023 0301 	bic.w	r3, r3, #1
    d23a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    d23c:	787a      	ldrb	r2, [r7, #1]
    d23e:	7bfb      	ldrb	r3, [r7, #15]
    d240:	4313      	orrs	r3, r2
    d242:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    d244:	78fa      	ldrb	r2, [r7, #3]
    d246:	78bb      	ldrb	r3, [r7, #2]
    d248:	6879      	ldr	r1, [r7, #4]
    d24a:	01d2      	lsls	r2, r2, #7
    d24c:	440a      	add	r2, r1
    d24e:	4413      	add	r3, r2
    d250:	3340      	adds	r3, #64	; 0x40
    d252:	7bfa      	ldrb	r2, [r7, #15]
    d254:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    d256:	bf00      	nop
    d258:	3714      	adds	r7, #20
    d25a:	46bd      	mov	sp, r7
    d25c:	bc80      	pop	{r7}
    d25e:	4770      	bx	lr

0000d260 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    d260:	b480      	push	{r7}
    d262:	b085      	sub	sp, #20
    d264:	af00      	add	r7, sp, #0
    d266:	60f8      	str	r0, [r7, #12]
    d268:	460b      	mov	r3, r1
    d26a:	607a      	str	r2, [r7, #4]
    d26c:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    d26e:	7afb      	ldrb	r3, [r7, #11]
    d270:	68fa      	ldr	r2, [r7, #12]
    d272:	01db      	lsls	r3, r3, #7
    d274:	4413      	add	r3, r2
    d276:	3328      	adds	r3, #40	; 0x28
    d278:	687a      	ldr	r2, [r7, #4]
    d27a:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    d27c:	bf00      	nop
    d27e:	3714      	adds	r7, #20
    d280:	46bd      	mov	sp, r7
    d282:	bc80      	pop	{r7}
    d284:	4770      	bx	lr
	...

0000d288 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    d288:	b580      	push	{r7, lr}
    d28a:	b082      	sub	sp, #8
    d28c:	af00      	add	r7, sp, #0
    d28e:	4603      	mov	r3, r0
    d290:	6039      	str	r1, [r7, #0]
    d292:	71fb      	strb	r3, [r7, #7]
    d294:	4613      	mov	r3, r2
    d296:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    d298:	79bb      	ldrb	r3, [r7, #6]
    d29a:	2b01      	cmp	r3, #1
    d29c:	d01c      	beq.n	d2d8 <_gpio_set_direction+0x50>
    d29e:	2b02      	cmp	r3, #2
    d2a0:	d037      	beq.n	d312 <_gpio_set_direction+0x8a>
    d2a2:	2b00      	cmp	r3, #0
    d2a4:	d14e      	bne.n	d344 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    d2a6:	79fb      	ldrb	r3, [r7, #7]
    d2a8:	683a      	ldr	r2, [r7, #0]
    d2aa:	4619      	mov	r1, r3
    d2ac:	482a      	ldr	r0, [pc, #168]	; (d358 <_gpio_set_direction+0xd0>)
    d2ae:	4b2b      	ldr	r3, [pc, #172]	; (d35c <_gpio_set_direction+0xd4>)
    d2b0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    d2b2:	683b      	ldr	r3, [r7, #0]
    d2b4:	b29b      	uxth	r3, r3
    d2b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    d2ba:	79fb      	ldrb	r3, [r7, #7]
    d2bc:	4619      	mov	r1, r3
    d2be:	4826      	ldr	r0, [pc, #152]	; (d358 <_gpio_set_direction+0xd0>)
    d2c0:	4b27      	ldr	r3, [pc, #156]	; (d360 <_gpio_set_direction+0xd8>)
    d2c2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    d2c4:	683b      	ldr	r3, [r7, #0]
    d2c6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    d2c8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    d2cc:	79fb      	ldrb	r3, [r7, #7]
    d2ce:	4619      	mov	r1, r3
    d2d0:	4821      	ldr	r0, [pc, #132]	; (d358 <_gpio_set_direction+0xd0>)
    d2d2:	4b23      	ldr	r3, [pc, #140]	; (d360 <_gpio_set_direction+0xd8>)
    d2d4:	4798      	blx	r3
		break;
    d2d6:	e03a      	b.n	d34e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    d2d8:	79fb      	ldrb	r3, [r7, #7]
    d2da:	683a      	ldr	r2, [r7, #0]
    d2dc:	4619      	mov	r1, r3
    d2de:	481e      	ldr	r0, [pc, #120]	; (d358 <_gpio_set_direction+0xd0>)
    d2e0:	4b1e      	ldr	r3, [pc, #120]	; (d35c <_gpio_set_direction+0xd4>)
    d2e2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    d2e4:	683b      	ldr	r3, [r7, #0]
    d2e6:	b29b      	uxth	r3, r3
    d2e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    d2ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    d2f0:	79f9      	ldrb	r1, [r7, #7]
    d2f2:	461a      	mov	r2, r3
    d2f4:	4818      	ldr	r0, [pc, #96]	; (d358 <_gpio_set_direction+0xd0>)
    d2f6:	4b1a      	ldr	r3, [pc, #104]	; (d360 <_gpio_set_direction+0xd8>)
    d2f8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    d2fa:	683b      	ldr	r3, [r7, #0]
    d2fc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    d2fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    d302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
    d306:	79f9      	ldrb	r1, [r7, #7]
    d308:	461a      	mov	r2, r3
    d30a:	4813      	ldr	r0, [pc, #76]	; (d358 <_gpio_set_direction+0xd0>)
    d30c:	4b14      	ldr	r3, [pc, #80]	; (d360 <_gpio_set_direction+0xd8>)
    d30e:	4798      	blx	r3
		break;
    d310:	e01d      	b.n	d34e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    d312:	79fb      	ldrb	r3, [r7, #7]
    d314:	683a      	ldr	r2, [r7, #0]
    d316:	4619      	mov	r1, r3
    d318:	480f      	ldr	r0, [pc, #60]	; (d358 <_gpio_set_direction+0xd0>)
    d31a:	4b12      	ldr	r3, [pc, #72]	; (d364 <_gpio_set_direction+0xdc>)
    d31c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    d31e:	683b      	ldr	r3, [r7, #0]
    d320:	b29b      	uxth	r3, r3
    d322:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    d326:	79fb      	ldrb	r3, [r7, #7]
    d328:	4619      	mov	r1, r3
    d32a:	480b      	ldr	r0, [pc, #44]	; (d358 <_gpio_set_direction+0xd0>)
    d32c:	4b0c      	ldr	r3, [pc, #48]	; (d360 <_gpio_set_direction+0xd8>)
    d32e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    d330:	683b      	ldr	r3, [r7, #0]
    d332:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    d334:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    d338:	79fb      	ldrb	r3, [r7, #7]
    d33a:	4619      	mov	r1, r3
    d33c:	4806      	ldr	r0, [pc, #24]	; (d358 <_gpio_set_direction+0xd0>)
    d33e:	4b08      	ldr	r3, [pc, #32]	; (d360 <_gpio_set_direction+0xd8>)
    d340:	4798      	blx	r3
		break;
    d342:	e004      	b.n	d34e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    d344:	2246      	movs	r2, #70	; 0x46
    d346:	4908      	ldr	r1, [pc, #32]	; (d368 <_gpio_set_direction+0xe0>)
    d348:	2000      	movs	r0, #0
    d34a:	4b08      	ldr	r3, [pc, #32]	; (d36c <_gpio_set_direction+0xe4>)
    d34c:	4798      	blx	r3
	}
}
    d34e:	bf00      	nop
    d350:	3708      	adds	r7, #8
    d352:	46bd      	mov	sp, r7
    d354:	bd80      	pop	{r7, pc}
    d356:	bf00      	nop
    d358:	41008000 	.word	0x41008000
    d35c:	0000d0dd 	.word	0x0000d0dd
    d360:	0000d261 	.word	0x0000d261
    d364:	0000d0b7 	.word	0x0000d0b7
    d368:	0000f7b0 	.word	0x0000f7b0
    d36c:	00003719 	.word	0x00003719

0000d370 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    d370:	b580      	push	{r7, lr}
    d372:	b082      	sub	sp, #8
    d374:	af00      	add	r7, sp, #0
    d376:	4603      	mov	r3, r0
    d378:	6039      	str	r1, [r7, #0]
    d37a:	71fb      	strb	r3, [r7, #7]
    d37c:	4613      	mov	r3, r2
    d37e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    d380:	79bb      	ldrb	r3, [r7, #6]
    d382:	2b00      	cmp	r3, #0
    d384:	d006      	beq.n	d394 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    d386:	79fb      	ldrb	r3, [r7, #7]
    d388:	683a      	ldr	r2, [r7, #0]
    d38a:	4619      	mov	r1, r3
    d38c:	4806      	ldr	r0, [pc, #24]	; (d3a8 <_gpio_set_level+0x38>)
    d38e:	4b07      	ldr	r3, [pc, #28]	; (d3ac <_gpio_set_level+0x3c>)
    d390:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    d392:	e005      	b.n	d3a0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    d394:	79fb      	ldrb	r3, [r7, #7]
    d396:	683a      	ldr	r2, [r7, #0]
    d398:	4619      	mov	r1, r3
    d39a:	4803      	ldr	r0, [pc, #12]	; (d3a8 <_gpio_set_level+0x38>)
    d39c:	4b04      	ldr	r3, [pc, #16]	; (d3b0 <_gpio_set_level+0x40>)
    d39e:	4798      	blx	r3
}
    d3a0:	bf00      	nop
    d3a2:	3708      	adds	r7, #8
    d3a4:	46bd      	mov	sp, r7
    d3a6:	bd80      	pop	{r7, pc}
    d3a8:	41008000 	.word	0x41008000
    d3ac:	0000d103 	.word	0x0000d103
    d3b0:	0000d129 	.word	0x0000d129

0000d3b4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    d3b4:	b590      	push	{r4, r7, lr}
    d3b6:	b085      	sub	sp, #20
    d3b8:	af00      	add	r7, sp, #0
    d3ba:	6078      	str	r0, [r7, #4]
    d3bc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    d3be:	687b      	ldr	r3, [r7, #4]
    d3c0:	095b      	lsrs	r3, r3, #5
    d3c2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    d3c4:	687b      	ldr	r3, [r7, #4]
    d3c6:	b2db      	uxtb	r3, r3
    d3c8:	f003 031f 	and.w	r3, r3, #31
    d3cc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    d3ce:	683b      	ldr	r3, [r7, #0]
    d3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    d3d4:	d106      	bne.n	d3e4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    d3d6:	7bba      	ldrb	r2, [r7, #14]
    d3d8:	7bf9      	ldrb	r1, [r7, #15]
    d3da:	2300      	movs	r3, #0
    d3dc:	4812      	ldr	r0, [pc, #72]	; (d428 <_gpio_set_pin_function+0x74>)
    d3de:	4c13      	ldr	r4, [pc, #76]	; (d42c <_gpio_set_pin_function+0x78>)
    d3e0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    d3e2:	e01d      	b.n	d420 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    d3e4:	7bba      	ldrb	r2, [r7, #14]
    d3e6:	7bf9      	ldrb	r1, [r7, #15]
    d3e8:	2301      	movs	r3, #1
    d3ea:	480f      	ldr	r0, [pc, #60]	; (d428 <_gpio_set_pin_function+0x74>)
    d3ec:	4c0f      	ldr	r4, [pc, #60]	; (d42c <_gpio_set_pin_function+0x78>)
    d3ee:	47a0      	blx	r4
		if (pin & 1) {
    d3f0:	7bbb      	ldrb	r3, [r7, #14]
    d3f2:	f003 0301 	and.w	r3, r3, #1
    d3f6:	2b00      	cmp	r3, #0
    d3f8:	d009      	beq.n	d40e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    d3fa:	7bbb      	ldrb	r3, [r7, #14]
    d3fc:	105b      	asrs	r3, r3, #1
    d3fe:	b2da      	uxtb	r2, r3
    d400:	683b      	ldr	r3, [r7, #0]
    d402:	b2db      	uxtb	r3, r3
    d404:	7bf9      	ldrb	r1, [r7, #15]
    d406:	4808      	ldr	r0, [pc, #32]	; (d428 <_gpio_set_pin_function+0x74>)
    d408:	4c09      	ldr	r4, [pc, #36]	; (d430 <_gpio_set_pin_function+0x7c>)
    d40a:	47a0      	blx	r4
}
    d40c:	e008      	b.n	d420 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    d40e:	7bbb      	ldrb	r3, [r7, #14]
    d410:	105b      	asrs	r3, r3, #1
    d412:	b2da      	uxtb	r2, r3
    d414:	683b      	ldr	r3, [r7, #0]
    d416:	b2db      	uxtb	r3, r3
    d418:	7bf9      	ldrb	r1, [r7, #15]
    d41a:	4803      	ldr	r0, [pc, #12]	; (d428 <_gpio_set_pin_function+0x74>)
    d41c:	4c05      	ldr	r4, [pc, #20]	; (d434 <_gpio_set_pin_function+0x80>)
    d41e:	47a0      	blx	r4
}
    d420:	bf00      	nop
    d422:	3714      	adds	r7, #20
    d424:	46bd      	mov	sp, r7
    d426:	bd90      	pop	{r4, r7, pc}
    d428:	41008000 	.word	0x41008000
    d42c:	0000d209 	.word	0x0000d209
    d430:	0000d1ad 	.word	0x0000d1ad
    d434:	0000d14f 	.word	0x0000d14f

0000d438 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    d438:	b580      	push	{r7, lr}
    d43a:	b082      	sub	sp, #8
    d43c:	af00      	add	r7, sp, #0
    d43e:	6078      	str	r0, [r7, #4]
    d440:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    d442:	6839      	ldr	r1, [r7, #0]
    d444:	6878      	ldr	r0, [r7, #4]
    d446:	4b03      	ldr	r3, [pc, #12]	; (d454 <gpio_set_pin_function+0x1c>)
    d448:	4798      	blx	r3
}
    d44a:	bf00      	nop
    d44c:	3708      	adds	r7, #8
    d44e:	46bd      	mov	sp, r7
    d450:	bd80      	pop	{r7, pc}
    d452:	bf00      	nop
    d454:	0000d3b5 	.word	0x0000d3b5

0000d458 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    d458:	b580      	push	{r7, lr}
    d45a:	b082      	sub	sp, #8
    d45c:	af00      	add	r7, sp, #0
    d45e:	4603      	mov	r3, r0
    d460:	460a      	mov	r2, r1
    d462:	71fb      	strb	r3, [r7, #7]
    d464:	4613      	mov	r3, r2
    d466:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    d468:	79fb      	ldrb	r3, [r7, #7]
    d46a:	115b      	asrs	r3, r3, #5
    d46c:	b2d8      	uxtb	r0, r3
    d46e:	79fb      	ldrb	r3, [r7, #7]
    d470:	f003 031f 	and.w	r3, r3, #31
    d474:	2201      	movs	r2, #1
    d476:	fa02 f303 	lsl.w	r3, r2, r3
    d47a:	79ba      	ldrb	r2, [r7, #6]
    d47c:	4619      	mov	r1, r3
    d47e:	4b03      	ldr	r3, [pc, #12]	; (d48c <gpio_set_pin_direction+0x34>)
    d480:	4798      	blx	r3
}
    d482:	bf00      	nop
    d484:	3708      	adds	r7, #8
    d486:	46bd      	mov	sp, r7
    d488:	bd80      	pop	{r7, pc}
    d48a:	bf00      	nop
    d48c:	0000d289 	.word	0x0000d289

0000d490 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    d490:	b580      	push	{r7, lr}
    d492:	b082      	sub	sp, #8
    d494:	af00      	add	r7, sp, #0
    d496:	4603      	mov	r3, r0
    d498:	460a      	mov	r2, r1
    d49a:	71fb      	strb	r3, [r7, #7]
    d49c:	4613      	mov	r3, r2
    d49e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    d4a0:	79fb      	ldrb	r3, [r7, #7]
    d4a2:	115b      	asrs	r3, r3, #5
    d4a4:	b2d8      	uxtb	r0, r3
    d4a6:	79fb      	ldrb	r3, [r7, #7]
    d4a8:	f003 031f 	and.w	r3, r3, #31
    d4ac:	2201      	movs	r2, #1
    d4ae:	fa02 f303 	lsl.w	r3, r2, r3
    d4b2:	79ba      	ldrb	r2, [r7, #6]
    d4b4:	4619      	mov	r1, r3
    d4b6:	4b03      	ldr	r3, [pc, #12]	; (d4c4 <gpio_set_pin_level+0x34>)
    d4b8:	4798      	blx	r3
}
    d4ba:	bf00      	nop
    d4bc:	3708      	adds	r7, #8
    d4be:	46bd      	mov	sp, r7
    d4c0:	bd80      	pop	{r7, pc}
    d4c2:	bf00      	nop
    d4c4:	0000d371 	.word	0x0000d371

0000d4c8 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
    d4c8:	b580      	push	{r7, lr}
    d4ca:	b082      	sub	sp, #8
    d4cc:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    d4ce:	2100      	movs	r1, #0
    d4d0:	2008      	movs	r0, #8
    d4d2:	4b24      	ldr	r3, [pc, #144]	; (d564 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    d4d4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    d4d6:	2100      	movs	r1, #0
    d4d8:	202b      	movs	r0, #43	; 0x2b
    d4da:	4b22      	ldr	r3, [pc, #136]	; (d564 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    d4dc:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    d4de:	2100      	movs	r1, #0
    d4e0:	202a      	movs	r0, #42	; 0x2a
    d4e2:	4b20      	ldr	r3, [pc, #128]	; (d564 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
    d4e4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    d4e6:	2102      	movs	r1, #2
    d4e8:	2008      	movs	r0, #8
    d4ea:	4b1f      	ldr	r3, [pc, #124]	; (d568 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    d4ec:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    d4ee:	2102      	movs	r1, #2
    d4f0:	202b      	movs	r0, #43	; 0x2b
    d4f2:	4b1d      	ldr	r3, [pc, #116]	; (d568 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    d4f4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    d4f6:	2102      	movs	r1, #2
    d4f8:	202a      	movs	r0, #42	; 0x2a
    d4fa:	4b1b      	ldr	r3, [pc, #108]	; (d568 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
    d4fc:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    d4fe:	2101      	movs	r1, #1
    d500:	2008      	movs	r0, #8
    d502:	4b1a      	ldr	r3, [pc, #104]	; (d56c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    d504:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    d506:	2100      	movs	r1, #0
    d508:	202b      	movs	r0, #43	; 0x2b
    d50a:	4b18      	ldr	r3, [pc, #96]	; (d56c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    d50c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    d50e:	2100      	movs	r1, #0
    d510:	202a      	movs	r0, #42	; 0x2a
    d512:	4b16      	ldr	r3, [pc, #88]	; (d56c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    d514:	4798      	blx	r3

	delay_us(1);
    d516:	2001      	movs	r0, #1
    d518:	4b15      	ldr	r3, [pc, #84]	; (d570 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    d51a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    d51c:	2300      	movs	r3, #0
    d51e:	607b      	str	r3, [r7, #4]
    d520:	687b      	ldr	r3, [r7, #4]
    d522:	2b06      	cmp	r3, #6
    d524:	dc11      	bgt.n	d54a <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
    d526:	2101      	movs	r1, #1
    d528:	202a      	movs	r0, #42	; 0x2a
    d52a:	4b10      	ldr	r3, [pc, #64]	; (d56c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    d52c:	4798      	blx	r3
		delay_us(1);
    d52e:	2001      	movs	r0, #1
    d530:	4b0f      	ldr	r3, [pc, #60]	; (d570 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    d532:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    d534:	2100      	movs	r1, #0
    d536:	202a      	movs	r0, #42	; 0x2a
    d538:	4b0c      	ldr	r3, [pc, #48]	; (d56c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    d53a:	4798      	blx	r3
		delay_us(1);
    d53c:	2001      	movs	r0, #1
    d53e:	4b0c      	ldr	r3, [pc, #48]	; (d570 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    d540:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    d542:	687b      	ldr	r3, [r7, #4]
    d544:	3301      	adds	r3, #1
    d546:	607b      	str	r3, [r7, #4]
    d548:	e7ea      	b.n	d520 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
    d54a:	2101      	movs	r1, #1
    d54c:	202b      	movs	r0, #43	; 0x2b
    d54e:	4b07      	ldr	r3, [pc, #28]	; (d56c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
    d550:	4798      	blx	r3
	delay_us(1);
    d552:	2001      	movs	r0, #1
    d554:	4b06      	ldr	r3, [pc, #24]	; (d570 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
    d556:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    d558:	4b06      	ldr	r3, [pc, #24]	; (d574 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
    d55a:	4798      	blx	r3
}
    d55c:	bf00      	nop
    d55e:	3708      	adds	r7, #8
    d560:	46bd      	mov	sp, r7
    d562:	bd80      	pop	{r7, pc}
    d564:	0000d439 	.word	0x0000d439
    d568:	0000d459 	.word	0x0000d459
    d56c:	0000d491 	.word	0x0000d491
    d570:	000021e5 	.word	0x000021e5
    d574:	00001335 	.word	0x00001335

0000d578 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
    d578:	b480      	push	{r7}
    d57a:	b083      	sub	sp, #12
    d57c:	af00      	add	r7, sp, #0
    d57e:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
    d580:	687b      	ldr	r3, [r7, #4]
    d582:	4618      	mov	r0, r3
    d584:	370c      	adds	r7, #12
    d586:	46bd      	mov	sp, r7
    d588:	bc80      	pop	{r7}
    d58a:	4770      	bx	lr

0000d58c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    d58c:	b480      	push	{r7}
    d58e:	b083      	sub	sp, #12
    d590:	af00      	add	r7, sp, #0
    d592:	6078      	str	r0, [r7, #4]
    d594:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    d596:	687b      	ldr	r3, [r7, #4]
    d598:	683a      	ldr	r2, [r7, #0]
    d59a:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    d59c:	687b      	ldr	r3, [r7, #4]
    d59e:	4a04      	ldr	r2, [pc, #16]	; (d5b0 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    d5a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    d5a4:	687b      	ldr	r3, [r7, #4]
    d5a6:	4618      	mov	r0, r3
    d5a8:	370c      	adds	r7, #12
    d5aa:	46bd      	mov	sp, r7
    d5ac:	bc80      	pop	{r7}
    d5ae:	4770      	bx	lr
    d5b0:	001fff00 	.word	0x001fff00

0000d5b4 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    d5b4:	b480      	push	{r7}
    d5b6:	b083      	sub	sp, #12
    d5b8:	af00      	add	r7, sp, #0
    d5ba:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    d5bc:	687b      	ldr	r3, [r7, #4]
    d5be:	4618      	mov	r0, r3
    d5c0:	370c      	adds	r7, #12
    d5c2:	46bd      	mov	sp, r7
    d5c4:	bc80      	pop	{r7}
    d5c6:	4770      	bx	lr

0000d5c8 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
    d5c8:	b580      	push	{r7, lr}
    d5ca:	b082      	sub	sp, #8
    d5cc:	af00      	add	r7, sp, #0
    d5ce:	6078      	str	r0, [r7, #4]
	xferDone=false;
    d5d0:	687b      	ldr	r3, [r7, #4]
    d5d2:	2200      	movs	r2, #0
    d5d4:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
    d5d6:	6878      	ldr	r0, [r7, #4]
    d5d8:	4b04      	ldr	r3, [pc, #16]	; (d5ec <_ZN13N25Q256_Class4InitEv+0x24>)
    d5da:	4798      	blx	r3
	return SelfTest();
    d5dc:	6878      	ldr	r0, [r7, #4]
    d5de:	4b04      	ldr	r3, [pc, #16]	; (d5f0 <_ZN13N25Q256_Class4InitEv+0x28>)
    d5e0:	4798      	blx	r3
    d5e2:	4603      	mov	r3, r0
}
    d5e4:	4618      	mov	r0, r3
    d5e6:	3708      	adds	r7, #8
    d5e8:	46bd      	mov	sp, r7
    d5ea:	bd80      	pop	{r7, pc}
    d5ec:	0000d5f5 	.word	0x0000d5f5
    d5f0:	0000d791 	.word	0x0000d791

0000d5f4 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
    d5f4:	b590      	push	{r4, r7, lr}
    d5f6:	b083      	sub	sp, #12
    d5f8:	af00      	add	r7, sp, #0
    d5fa:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
    d5fc:	687b      	ldr	r3, [r7, #4]
    d5fe:	685b      	ldr	r3, [r3, #4]
    d600:	4618      	mov	r0, r3
    d602:	4b08      	ldr	r3, [pc, #32]	; (d624 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
    d604:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    d606:	687b      	ldr	r3, [r7, #4]
    d608:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
    d60a:	2300      	movs	r3, #0
    d60c:	4a06      	ldr	r2, [pc, #24]	; (d628 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
    d60e:	4807      	ldr	r0, [pc, #28]	; (d62c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
    d610:	4c07      	ldr	r4, [pc, #28]	; (d630 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
    d612:	47a0      	blx	r4
    d614:	4602      	mov	r2, r0
    d616:	687b      	ldr	r3, [r7, #4]
    d618:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
    d61c:	bf00      	nop
    d61e:	370c      	adds	r7, #12
    d620:	46bd      	mov	sp, r7
    d622:	bd90      	pop	{r4, r7, pc}
    d624:	00002681 	.word	0x00002681
    d628:	0000d4c9 	.word	0x0000d4c9
    d62c:	200025c0 	.word	0x200025c0
    d630:	0000b4d5 	.word	0x0000b4d5

0000d634 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
    d634:	b580      	push	{r7, lr}
    d636:	b084      	sub	sp, #16
    d638:	af00      	add	r7, sp, #0
    d63a:	6078      	str	r0, [r7, #4]
    d63c:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
    d63e:	687b      	ldr	r3, [r7, #4]
    d640:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d644:	685b      	ldr	r3, [r3, #4]
    d646:	689b      	ldr	r3, [r3, #8]
    d648:	687a      	ldr	r2, [r7, #4]
    d64a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
    d64e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d652:	6839      	ldr	r1, [r7, #0]
    d654:	4798      	blx	r3
    d656:	4603      	mov	r3, r0
    d658:	60fb      	str	r3, [r7, #12]
	return	e;
    d65a:	68fb      	ldr	r3, [r7, #12]
}
    d65c:	4618      	mov	r0, r3
    d65e:	3710      	adds	r7, #16
    d660:	46bd      	mov	sp, r7
    d662:	bd80      	pop	{r7, pc}

0000d664 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    d664:	b590      	push	{r4, r7, lr}
    d666:	b087      	sub	sp, #28
    d668:	af00      	add	r7, sp, #0
    d66a:	60f8      	str	r0, [r7, #12]
    d66c:	60b9      	str	r1, [r7, #8]
    d66e:	607a      	str	r2, [r7, #4]
    d670:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
    d672:	68fb      	ldr	r3, [r7, #12]
    d674:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d678:	685b      	ldr	r3, [r3, #4]
    d67a:	685c      	ldr	r4, [r3, #4]
    d67c:	68fb      	ldr	r3, [r7, #12]
    d67e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    d682:	683b      	ldr	r3, [r7, #0]
    d684:	687a      	ldr	r2, [r7, #4]
    d686:	68b9      	ldr	r1, [r7, #8]
    d688:	47a0      	blx	r4
    d68a:	4603      	mov	r3, r0
    d68c:	617b      	str	r3, [r7, #20]
	return	w;
    d68e:	697b      	ldr	r3, [r7, #20]
}
    d690:	4618      	mov	r0, r3
    d692:	371c      	adds	r7, #28
    d694:	46bd      	mov	sp, r7
    d696:	bd90      	pop	{r4, r7, pc}

0000d698 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    d698:	b590      	push	{r4, r7, lr}
    d69a:	b087      	sub	sp, #28
    d69c:	af00      	add	r7, sp, #0
    d69e:	60f8      	str	r0, [r7, #12]
    d6a0:	60b9      	str	r1, [r7, #8]
    d6a2:	607a      	str	r2, [r7, #4]
    d6a4:	603b      	str	r3, [r7, #0]
	xferDone=false;
    d6a6:	68fb      	ldr	r3, [r7, #12]
    d6a8:	2200      	movs	r2, #0
    d6aa:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
    d6ac:	68fb      	ldr	r3, [r7, #12]
    d6ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    d6b2:	685b      	ldr	r3, [r3, #4]
    d6b4:	681c      	ldr	r4, [r3, #0]
    d6b6:	68fb      	ldr	r3, [r7, #12]
    d6b8:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
    d6bc:	683b      	ldr	r3, [r7, #0]
    d6be:	687a      	ldr	r2, [r7, #4]
    d6c0:	68b9      	ldr	r1, [r7, #8]
    d6c2:	47a0      	blx	r4
    d6c4:	4603      	mov	r3, r0
    d6c6:	617b      	str	r3, [r7, #20]
	return	r;
    d6c8:	697b      	ldr	r3, [r7, #20]
}
    d6ca:	4618      	mov	r0, r3
    d6cc:	371c      	adds	r7, #28
    d6ce:	46bd      	mov	sp, r7
    d6d0:	bd90      	pop	{r4, r7, pc}
	...

0000d6d4 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
    d6d4:	b580      	push	{r7, lr}
    d6d6:	b082      	sub	sp, #8
    d6d8:	af00      	add	r7, sp, #0
    d6da:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
    d6dc:	687a      	ldr	r2, [r7, #4]
    d6de:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    d6e2:	f043 0310 	orr.w	r3, r3, #16
    d6e6:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
    d6ea:	687a      	ldr	r2, [r7, #4]
    d6ec:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
    d6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d6f4:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
    d6f8:	687a      	ldr	r2, [r7, #4]
    d6fa:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
    d6fe:	f36f 1305 	bfc	r3, #4, #2
    d702:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
    d706:	687b      	ldr	r3, [r7, #4]
    d708:	2205      	movs	r2, #5
    d70a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
    d70e:	687b      	ldr	r3, [r7, #4]
    d710:	2201      	movs	r2, #1
    d712:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
    d716:	687b      	ldr	r3, [r7, #4]
    d718:	f203 2212 	addw	r2, r3, #530	; 0x212
    d71c:	687b      	ldr	r3, [r7, #4]
    d71e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
    d722:	687b      	ldr	r3, [r7, #4]
    d724:	685a      	ldr	r2, [r3, #4]
    d726:	687b      	ldr	r3, [r7, #4]
    d728:	f503 7305 	add.w	r3, r3, #532	; 0x214
    d72c:	4619      	mov	r1, r3
    d72e:	4610      	mov	r0, r2
    d730:	4b04      	ldr	r3, [pc, #16]	; (d744 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
    d732:	4798      	blx	r3
		return status;
    d734:	687b      	ldr	r3, [r7, #4]
    d736:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
    d73a:	4618      	mov	r0, r3
    d73c:	3708      	adds	r7, #8
    d73e:	46bd      	mov	sp, r7
    d740:	bd80      	pop	{r7, pc}
    d742:	bf00      	nop
    d744:	000026f9 	.word	0x000026f9

0000d748 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
    d748:	b580      	push	{r7, lr}
    d74a:	b082      	sub	sp, #8
    d74c:	af00      	add	r7, sp, #0
    d74e:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
    d750:	6878      	ldr	r0, [r7, #4]
    d752:	4b0e      	ldr	r3, [pc, #56]	; (d78c <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
    d754:	4798      	blx	r3
    d756:	4603      	mov	r3, r0
    d758:	461a      	mov	r2, r3
    d75a:	687b      	ldr	r3, [r7, #4]
    d75c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
    d760:	687b      	ldr	r3, [r7, #4]
    d762:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    d766:	f003 0301 	and.w	r3, r3, #1
    d76a:	2b00      	cmp	r3, #0
    d76c:	d000      	beq.n	d770 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
    d76e:	e7ef      	b.n	d750 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
    d770:	687b      	ldr	r3, [r7, #4]
    d772:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
    d776:	f003 0301 	and.w	r3, r3, #1
    d77a:	2b00      	cmp	r3, #0
    d77c:	bf0c      	ite	eq
    d77e:	2301      	moveq	r3, #1
    d780:	2300      	movne	r3, #0
    d782:	b2db      	uxtb	r3, r3
}
    d784:	4618      	mov	r0, r3
    d786:	3708      	adds	r7, #8
    d788:	46bd      	mov	sp, r7
    d78a:	bd80      	pop	{r7, pc}
    d78c:	0000d6d5 	.word	0x0000d6d5

0000d790 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
    d790:	b590      	push	{r4, r7, lr}
    d792:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    d796:	b085      	sub	sp, #20
    d798:	af00      	add	r7, sp, #0
    d79a:	f107 0310 	add.w	r3, r7, #16
    d79e:	3b0c      	subs	r3, #12
    d7a0:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
    d7a2:	f107 0310 	add.w	r3, r7, #16
    d7a6:	3b0c      	subs	r3, #12
    d7a8:	681b      	ldr	r3, [r3, #0]
    d7aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    d7ae:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
    d7b2:	f107 0310 	add.w	r3, r7, #16
    d7b6:	3b0c      	subs	r3, #12
    d7b8:	681b      	ldr	r3, [r3, #0]
    d7ba:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    d7be:	f107 0110 	add.w	r1, r7, #16
    d7c2:	3904      	subs	r1, #4
    d7c4:	f107 0010 	add.w	r0, r7, #16
    d7c8:	380c      	subs	r0, #12
    d7ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    d7ce:	6800      	ldr	r0, [r0, #0]
    d7d0:	4c4b      	ldr	r4, [pc, #300]	; (d900 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
    d7d2:	47a0      	blx	r4
	WaitOnBusy();
    d7d4:	f107 0310 	add.w	r3, r7, #16
    d7d8:	3b0c      	subs	r3, #12
    d7da:	6818      	ldr	r0, [r3, #0]
    d7dc:	4b49      	ldr	r3, [pc, #292]	; (d904 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
    d7de:	4798      	blx	r3
	Erase(currentAddress);
    d7e0:	f107 0310 	add.w	r3, r7, #16
    d7e4:	3b0c      	subs	r3, #12
    d7e6:	681b      	ldr	r3, [r3, #0]
    d7e8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    d7ec:	f107 0310 	add.w	r3, r7, #16
    d7f0:	3b0c      	subs	r3, #12
    d7f2:	4611      	mov	r1, r2
    d7f4:	6818      	ldr	r0, [r3, #0]
    d7f6:	4b44      	ldr	r3, [pc, #272]	; (d908 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
    d7f8:	4798      	blx	r3
	WaitOnBusy();
    d7fa:	f107 0310 	add.w	r3, r7, #16
    d7fe:	3b0c      	subs	r3, #12
    d800:	6818      	ldr	r0, [r3, #0]
    d802:	4b40      	ldr	r3, [pc, #256]	; (d904 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
    d804:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
    d806:	f107 0310 	add.w	r3, r7, #16
    d80a:	3b0c      	subs	r3, #12
    d80c:	681b      	ldr	r3, [r3, #0]
    d80e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    d812:	f107 0110 	add.w	r1, r7, #16
    d816:	3904      	subs	r1, #4
    d818:	f107 0010 	add.w	r0, r7, #16
    d81c:	380c      	subs	r0, #12
    d81e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    d822:	6800      	ldr	r0, [r0, #0]
    d824:	4c39      	ldr	r4, [pc, #228]	; (d90c <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
    d826:	47a0      	blx	r4
	WaitOnBusy();
    d828:	f107 0310 	add.w	r3, r7, #16
    d82c:	3b0c      	subs	r3, #12
    d82e:	6818      	ldr	r0, [r3, #0]
    d830:	4b34      	ldr	r3, [pc, #208]	; (d904 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
    d832:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
    d834:	f107 0310 	add.w	r3, r7, #16
    d838:	3b0c      	subs	r3, #12
    d83a:	681b      	ldr	r3, [r3, #0]
    d83c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
    d840:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
    d844:	f101 0110 	add.w	r1, r1, #16
    d848:	3904      	subs	r1, #4
    d84a:	f107 0010 	add.w	r0, r7, #16
    d84e:	380c      	subs	r0, #12
    d850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    d854:	6800      	ldr	r0, [r0, #0]
    d856:	4c2a      	ldr	r4, [pc, #168]	; (d900 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
    d858:	47a0      	blx	r4
	WaitOnBusy();
    d85a:	f107 0310 	add.w	r3, r7, #16
    d85e:	3b0c      	subs	r3, #12
    d860:	6818      	ldr	r0, [r3, #0]
    d862:	4b28      	ldr	r3, [pc, #160]	; (d904 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
    d864:	4798      	blx	r3
	isOK	 = true;
    d866:	f107 0310 	add.w	r3, r7, #16
    d86a:	3b0c      	subs	r3, #12
    d86c:	681b      	ldr	r3, [r3, #0]
    d86e:	2201      	movs	r2, #1
    d870:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
    d874:	2300      	movs	r3, #0
    d876:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    d87a:	f102 020c 	add.w	r2, r2, #12
    d87e:	6013      	str	r3, [r2, #0]
    d880:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    d884:	f103 030c 	add.w	r3, r3, #12
    d888:	681b      	ldr	r3, [r3, #0]
    d88a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d88e:	da2b      	bge.n	d8e8 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
    d890:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
    d894:	f103 0310 	add.w	r3, r3, #16
    d898:	3b04      	subs	r3, #4
    d89a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    d89e:	f102 020c 	add.w	r2, r2, #12
    d8a2:	6812      	ldr	r2, [r2, #0]
    d8a4:	4413      	add	r3, r2
    d8a6:	781a      	ldrb	r2, [r3, #0]
    d8a8:	f107 0310 	add.w	r3, r7, #16
    d8ac:	3b04      	subs	r3, #4
    d8ae:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
    d8b2:	f101 010c 	add.w	r1, r1, #12
    d8b6:	6809      	ldr	r1, [r1, #0]
    d8b8:	440b      	add	r3, r1
    d8ba:	781b      	ldrb	r3, [r3, #0]
    d8bc:	429a      	cmp	r2, r3
    d8be:	d007      	beq.n	d8d0 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
    d8c0:	f107 0310 	add.w	r3, r7, #16
    d8c4:	3b0c      	subs	r3, #12
    d8c6:	681b      	ldr	r3, [r3, #0]
    d8c8:	2200      	movs	r2, #0
    d8ca:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
    d8ce:	e00b      	b.n	d8e8 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
    d8d0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
    d8d4:	f103 030c 	add.w	r3, r3, #12
    d8d8:	681b      	ldr	r3, [r3, #0]
    d8da:	3301      	adds	r3, #1
    d8dc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
    d8e0:	f102 020c 	add.w	r2, r2, #12
    d8e4:	6013      	str	r3, [r2, #0]
    d8e6:	e7cb      	b.n	d880 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
    d8e8:	f107 0310 	add.w	r3, r7, #16
    d8ec:	3b0c      	subs	r3, #12
    d8ee:	681b      	ldr	r3, [r3, #0]
    d8f0:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
    d8f4:	4618      	mov	r0, r3
    d8f6:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
    d8fa:	3714      	adds	r7, #20
    d8fc:	46bd      	mov	sp, r7
    d8fe:	bd90      	pop	{r4, r7, pc}
    d900:	0000d699 	.word	0x0000d699
    d904:	0000d749 	.word	0x0000d749
    d908:	0000d635 	.word	0x0000d635
    d90c:	0000d665 	.word	0x0000d665

0000d910 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
    d910:	b580      	push	{r7, lr}
    d912:	b082      	sub	sp, #8
    d914:	af00      	add	r7, sp, #0
    d916:	6078      	str	r0, [r7, #4]
    d918:	6039      	str	r1, [r7, #0]
    d91a:	687b      	ldr	r3, [r7, #4]
    d91c:	2b01      	cmp	r3, #1
    d91e:	d10d      	bne.n	d93c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d920:	683b      	ldr	r3, [r7, #0]
    d922:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d926:	4293      	cmp	r3, r2
    d928:	d108      	bne.n	d93c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d92a:	4906      	ldr	r1, [pc, #24]	; (d944 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d92c:	4806      	ldr	r0, [pc, #24]	; (d948 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d92e:	4b07      	ldr	r3, [pc, #28]	; (d94c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d930:	4798      	blx	r3
    d932:	4a07      	ldr	r2, [pc, #28]	; (d950 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d934:	4907      	ldr	r1, [pc, #28]	; (d954 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d936:	4804      	ldr	r0, [pc, #16]	; (d948 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d938:	4b07      	ldr	r3, [pc, #28]	; (d958 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d93a:	4798      	blx	r3
    d93c:	bf00      	nop
    d93e:	3708      	adds	r7, #8
    d940:	46bd      	mov	sp, r7
    d942:	bd80      	pop	{r7, pc}
    d944:	2000a3f8 	.word	0x2000a3f8
    d948:	200025d0 	.word	0x200025d0
    d94c:	0000d58d 	.word	0x0000d58d
    d950:	20000000 	.word	0x20000000
    d954:	0000d5b5 	.word	0x0000d5b5
    d958:	0000eeed 	.word	0x0000eeed

0000d95c <_GLOBAL__sub_I_ptrN25Q256Class>:
    d95c:	b580      	push	{r7, lr}
    d95e:	af00      	add	r7, sp, #0
    d960:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d964:	2001      	movs	r0, #1
    d966:	4b01      	ldr	r3, [pc, #4]	; (d96c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    d968:	4798      	blx	r3
    d96a:	bd80      	pop	{r7, pc}
    d96c:	0000d911 	.word	0x0000d911

0000d970 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
    d970:	b580      	push	{r7, lr}
    d972:	b082      	sub	sp, #8
    d974:	af00      	add	r7, sp, #0
    d976:	6078      	str	r0, [r7, #4]
    d978:	687b      	ldr	r3, [r7, #4]
    d97a:	4618      	mov	r0, r3
    d97c:	4b06      	ldr	r3, [pc, #24]	; (d998 <_ZN14Calendar_ClassC1Ev+0x28>)
    d97e:	4798      	blx	r3
    d980:	4a06      	ldr	r2, [pc, #24]	; (d99c <_ZN14Calendar_ClassC1Ev+0x2c>)
    d982:	687b      	ldr	r3, [r7, #4]
    d984:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
    d986:	4a06      	ldr	r2, [pc, #24]	; (d9a0 <_ZN14Calendar_ClassC1Ev+0x30>)
    d988:	687b      	ldr	r3, [r7, #4]
    d98a:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    d98c:	687b      	ldr	r3, [r7, #4]
    d98e:	4618      	mov	r0, r3
    d990:	3708      	adds	r7, #8
    d992:	46bd      	mov	sp, r7
    d994:	bd80      	pop	{r7, pc}
    d996:	bf00      	nop
    d998:	0000dcb9 	.word	0x0000dcb9
    d99c:	0000f7f0 	.word	0x0000f7f0
    d9a0:	20002800 	.word	0x20002800

0000d9a4 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    d9a4:	b580      	push	{r7, lr}
    d9a6:	b082      	sub	sp, #8
    d9a8:	af00      	add	r7, sp, #0
    d9aa:	6078      	str	r0, [r7, #4]
    d9ac:	6039      	str	r1, [r7, #0]
    d9ae:	687b      	ldr	r3, [r7, #4]
    d9b0:	4618      	mov	r0, r3
    d9b2:	4b08      	ldr	r3, [pc, #32]	; (d9d4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    d9b4:	4798      	blx	r3
    d9b6:	4a08      	ldr	r2, [pc, #32]	; (d9d8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    d9b8:	687b      	ldr	r3, [r7, #4]
    d9ba:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    d9bc:	687b      	ldr	r3, [r7, #4]
    d9be:	683a      	ldr	r2, [r7, #0]
    d9c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
    d9c4:	4a05      	ldr	r2, [pc, #20]	; (d9dc <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    d9c6:	687b      	ldr	r3, [r7, #4]
    d9c8:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    d9ca:	687b      	ldr	r3, [r7, #4]
    d9cc:	4618      	mov	r0, r3
    d9ce:	3708      	adds	r7, #8
    d9d0:	46bd      	mov	sp, r7
    d9d2:	bd80      	pop	{r7, pc}
    d9d4:	0000dcb9 	.word	0x0000dcb9
    d9d8:	0000f7f0 	.word	0x0000f7f0
    d9dc:	20002800 	.word	0x20002800

0000d9e0 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    d9e0:	b580      	push	{r7, lr}
    d9e2:	b082      	sub	sp, #8
    d9e4:	af00      	add	r7, sp, #0
    d9e6:	6078      	str	r0, [r7, #4]
    d9e8:	4a05      	ldr	r2, [pc, #20]	; (da00 <_ZN14Calendar_ClassD1Ev+0x20>)
    d9ea:	687b      	ldr	r3, [r7, #4]
    d9ec:	601a      	str	r2, [r3, #0]
    d9ee:	687b      	ldr	r3, [r7, #4]
    d9f0:	4618      	mov	r0, r3
    d9f2:	4b04      	ldr	r3, [pc, #16]	; (da04 <_ZN14Calendar_ClassD1Ev+0x24>)
    d9f4:	4798      	blx	r3
{
} //~Calendar_Class
    d9f6:	687b      	ldr	r3, [r7, #4]
    d9f8:	4618      	mov	r0, r3
    d9fa:	3708      	adds	r7, #8
    d9fc:	46bd      	mov	sp, r7
    d9fe:	bd80      	pop	{r7, pc}
    da00:	0000f7f0 	.word	0x0000f7f0
    da04:	0000dcd9 	.word	0x0000dcd9

0000da08 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    da08:	b580      	push	{r7, lr}
    da0a:	b082      	sub	sp, #8
    da0c:	af00      	add	r7, sp, #0
    da0e:	6078      	str	r0, [r7, #4]
    da10:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    da12:	687b      	ldr	r3, [r7, #4]
    da14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    da18:	6839      	ldr	r1, [r7, #0]
    da1a:	4618      	mov	r0, r3
    da1c:	4b03      	ldr	r3, [pc, #12]	; (da2c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    da1e:	4798      	blx	r3
    da20:	4603      	mov	r3, r0
}
    da22:	4618      	mov	r0, r3
    da24:	3708      	adds	r7, #8
    da26:	46bd      	mov	sp, r7
    da28:	bd80      	pop	{r7, pc}
    da2a:	bf00      	nop
    da2c:	0000205d 	.word	0x0000205d

0000da30 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    da30:	b480      	push	{r7}
    da32:	b083      	sub	sp, #12
    da34:	af00      	add	r7, sp, #0
    da36:	6078      	str	r0, [r7, #4]
    da38:	460b      	mov	r3, r1
    da3a:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    da3c:	887b      	ldrh	r3, [r7, #2]
    da3e:	f003 0303 	and.w	r3, r3, #3
    da42:	2b00      	cmp	r3, #0
    da44:	d001      	beq.n	da4a <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    da46:	2300      	movs	r3, #0
    da48:	e000      	b.n	da4c <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    da4a:	2301      	movs	r3, #1
	}
}
    da4c:	4618      	mov	r0, r3
    da4e:	370c      	adds	r7, #12
    da50:	46bd      	mov	sp, r7
    da52:	bc80      	pop	{r7}
    da54:	4770      	bx	lr
	...

0000da58 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    da58:	b580      	push	{r7, lr}
    da5a:	b086      	sub	sp, #24
    da5c:	af00      	add	r7, sp, #0
    da5e:	6078      	str	r0, [r7, #4]
    da60:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    da62:	2300      	movs	r3, #0
    da64:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    da66:	2300      	movs	r3, #0
    da68:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    da6a:	683b      	ldr	r3, [r7, #0]
    da6c:	88db      	ldrh	r3, [r3, #6]
    da6e:	b2da      	uxtb	r2, r3
    da70:	687b      	ldr	r3, [r7, #4]
    da72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    da76:	699b      	ldr	r3, [r3, #24]
    da78:	b2db      	uxtb	r3, r3
    da7a:	1ad3      	subs	r3, r2, r3
    da7c:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    da7e:	683b      	ldr	r3, [r7, #0]
    da80:	795b      	ldrb	r3, [r3, #5]
    da82:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    da84:	683b      	ldr	r3, [r7, #0]
    da86:	791b      	ldrb	r3, [r3, #4]
    da88:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    da8a:	683b      	ldr	r3, [r7, #0]
    da8c:	789b      	ldrb	r3, [r3, #2]
    da8e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    da90:	683b      	ldr	r3, [r7, #0]
    da92:	785b      	ldrb	r3, [r3, #1]
    da94:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    da96:	683b      	ldr	r3, [r7, #0]
    da98:	781b      	ldrb	r3, [r3, #0]
    da9a:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    da9c:	2300      	movs	r3, #0
    da9e:	613b      	str	r3, [r7, #16]
    daa0:	7bfa      	ldrb	r2, [r7, #15]
    daa2:	693b      	ldr	r3, [r7, #16]
    daa4:	429a      	cmp	r2, r3
    daa6:	d91e      	bls.n	dae6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    daa8:	687b      	ldr	r3, [r7, #4]
    daaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    daae:	699b      	ldr	r3, [r3, #24]
    dab0:	b29a      	uxth	r2, r3
    dab2:	693b      	ldr	r3, [r7, #16]
    dab4:	b29b      	uxth	r3, r3
    dab6:	4413      	add	r3, r2
    dab8:	b29b      	uxth	r3, r3
    daba:	4619      	mov	r1, r3
    dabc:	6878      	ldr	r0, [r7, #4]
    dabe:	4b27      	ldr	r3, [pc, #156]	; (db5c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    dac0:	4798      	blx	r3
    dac2:	4603      	mov	r3, r0
    dac4:	2b00      	cmp	r3, #0
    dac6:	d006      	beq.n	dad6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    dac8:	697b      	ldr	r3, [r7, #20]
    daca:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    dace:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    dad2:	617b      	str	r3, [r7, #20]
    dad4:	e003      	b.n	dade <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    dad6:	697a      	ldr	r2, [r7, #20]
    dad8:	4b21      	ldr	r3, [pc, #132]	; (db60 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    dada:	4413      	add	r3, r2
    dadc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    dade:	693b      	ldr	r3, [r7, #16]
    dae0:	3301      	adds	r3, #1
    dae2:	613b      	str	r3, [r7, #16]
    dae4:	e7dc      	b.n	daa0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    dae6:	2301      	movs	r3, #1
    dae8:	613b      	str	r3, [r7, #16]
    daea:	7bba      	ldrb	r2, [r7, #14]
    daec:	693b      	ldr	r3, [r7, #16]
    daee:	429a      	cmp	r2, r3
    daf0:	d910      	bls.n	db14 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    daf2:	683b      	ldr	r3, [r7, #0]
    daf4:	88db      	ldrh	r3, [r3, #6]
    daf6:	4619      	mov	r1, r3
    daf8:	693b      	ldr	r3, [r7, #16]
    dafa:	b2db      	uxtb	r3, r3
    dafc:	461a      	mov	r2, r3
    dafe:	6878      	ldr	r0, [r7, #4]
    db00:	4b18      	ldr	r3, [pc, #96]	; (db64 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    db02:	4798      	blx	r3
    db04:	4602      	mov	r2, r0
    db06:	697b      	ldr	r3, [r7, #20]
    db08:	4413      	add	r3, r2
    db0a:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    db0c:	693b      	ldr	r3, [r7, #16]
    db0e:	3301      	adds	r3, #1
    db10:	613b      	str	r3, [r7, #16]
    db12:	e7ea      	b.n	daea <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    db14:	7b7b      	ldrb	r3, [r7, #13]
    db16:	3b01      	subs	r3, #1
    db18:	4a13      	ldr	r2, [pc, #76]	; (db68 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    db1a:	fb02 f303 	mul.w	r3, r2, r3
    db1e:	461a      	mov	r2, r3
    db20:	697b      	ldr	r3, [r7, #20]
    db22:	4413      	add	r3, r2
    db24:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    db26:	7b3b      	ldrb	r3, [r7, #12]
    db28:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    db2c:	fb02 f303 	mul.w	r3, r2, r3
    db30:	461a      	mov	r2, r3
    db32:	697b      	ldr	r3, [r7, #20]
    db34:	4413      	add	r3, r2
    db36:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    db38:	7afa      	ldrb	r2, [r7, #11]
    db3a:	4613      	mov	r3, r2
    db3c:	011b      	lsls	r3, r3, #4
    db3e:	1a9b      	subs	r3, r3, r2
    db40:	009b      	lsls	r3, r3, #2
    db42:	461a      	mov	r2, r3
    db44:	697b      	ldr	r3, [r7, #20]
    db46:	4413      	add	r3, r2
    db48:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    db4a:	7abb      	ldrb	r3, [r7, #10]
    db4c:	697a      	ldr	r2, [r7, #20]
    db4e:	4413      	add	r3, r2
    db50:	617b      	str	r3, [r7, #20]

	return tmp;
    db52:	697b      	ldr	r3, [r7, #20]
}
    db54:	4618      	mov	r0, r3
    db56:	3718      	adds	r7, #24
    db58:	46bd      	mov	sp, r7
    db5a:	bd80      	pop	{r7, pc}
    db5c:	0000da31 	.word	0x0000da31
    db60:	01e13380 	.word	0x01e13380
    db64:	0000db6d 	.word	0x0000db6d
    db68:	00015180 	.word	0x00015180

0000db6c <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    db6c:	b580      	push	{r7, lr}
    db6e:	b086      	sub	sp, #24
    db70:	af00      	add	r7, sp, #0
    db72:	60f8      	str	r0, [r7, #12]
    db74:	60b9      	str	r1, [r7, #8]
    db76:	4613      	mov	r3, r2
    db78:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    db7a:	2300      	movs	r3, #0
    db7c:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    db7e:	68bb      	ldr	r3, [r7, #8]
    db80:	b29b      	uxth	r3, r3
    db82:	4619      	mov	r1, r3
    db84:	68f8      	ldr	r0, [r7, #12]
    db86:	4b2f      	ldr	r3, [pc, #188]	; (dc44 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    db88:	4798      	blx	r3
    db8a:	4603      	mov	r3, r0
    db8c:	2b00      	cmp	r3, #0
    db8e:	d028      	beq.n	dbe2 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    db90:	79fb      	ldrb	r3, [r7, #7]
    db92:	3b01      	subs	r3, #1
    db94:	2b0b      	cmp	r3, #11
    db96:	d84c      	bhi.n	dc32 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    db98:	a201      	add	r2, pc, #4	; (adr r2, dba0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    db9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    db9e:	bf00      	nop
    dba0:	0000dbd1 	.word	0x0000dbd1
    dba4:	0000dbd7 	.word	0x0000dbd7
    dba8:	0000dbd1 	.word	0x0000dbd1
    dbac:	0000dbdd 	.word	0x0000dbdd
    dbb0:	0000dbd1 	.word	0x0000dbd1
    dbb4:	0000dbdd 	.word	0x0000dbdd
    dbb8:	0000dbd1 	.word	0x0000dbd1
    dbbc:	0000dbd1 	.word	0x0000dbd1
    dbc0:	0000dbdd 	.word	0x0000dbdd
    dbc4:	0000dbd1 	.word	0x0000dbd1
    dbc8:	0000dbdd 	.word	0x0000dbdd
    dbcc:	0000dbd1 	.word	0x0000dbd1
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    dbd0:	4b1d      	ldr	r3, [pc, #116]	; (dc48 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    dbd2:	617b      	str	r3, [r7, #20]
			break;
    dbd4:	e030      	b.n	dc38 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    dbd6:	4b1d      	ldr	r3, [pc, #116]	; (dc4c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    dbd8:	617b      	str	r3, [r7, #20]
			break;
    dbda:	e02d      	b.n	dc38 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    dbdc:	4b1c      	ldr	r3, [pc, #112]	; (dc50 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    dbde:	617b      	str	r3, [r7, #20]
			break;
    dbe0:	e02a      	b.n	dc38 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    dbe2:	79fb      	ldrb	r3, [r7, #7]
    dbe4:	3b01      	subs	r3, #1
    dbe6:	2b0b      	cmp	r3, #11
    dbe8:	d825      	bhi.n	dc36 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    dbea:	a201      	add	r2, pc, #4	; (adr r2, dbf0 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    dbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dbf0:	0000dc21 	.word	0x0000dc21
    dbf4:	0000dc27 	.word	0x0000dc27
    dbf8:	0000dc21 	.word	0x0000dc21
    dbfc:	0000dc2d 	.word	0x0000dc2d
    dc00:	0000dc21 	.word	0x0000dc21
    dc04:	0000dc2d 	.word	0x0000dc2d
    dc08:	0000dc21 	.word	0x0000dc21
    dc0c:	0000dc21 	.word	0x0000dc21
    dc10:	0000dc2d 	.word	0x0000dc2d
    dc14:	0000dc21 	.word	0x0000dc21
    dc18:	0000dc2d 	.word	0x0000dc2d
    dc1c:	0000dc21 	.word	0x0000dc21
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    dc20:	4b09      	ldr	r3, [pc, #36]	; (dc48 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    dc22:	617b      	str	r3, [r7, #20]
			break;
    dc24:	e008      	b.n	dc38 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    dc26:	4b0b      	ldr	r3, [pc, #44]	; (dc54 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    dc28:	617b      	str	r3, [r7, #20]
			break;
    dc2a:	e005      	b.n	dc38 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    dc2c:	4b08      	ldr	r3, [pc, #32]	; (dc50 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    dc2e:	617b      	str	r3, [r7, #20]
			break;
    dc30:	e002      	b.n	dc38 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    dc32:	bf00      	nop
    dc34:	e000      	b.n	dc38 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    dc36:	bf00      	nop
		}
	}

	return sec_in_month;
    dc38:	697b      	ldr	r3, [r7, #20]
}
    dc3a:	4618      	mov	r0, r3
    dc3c:	3718      	adds	r7, #24
    dc3e:	46bd      	mov	sp, r7
    dc40:	bd80      	pop	{r7, pc}
    dc42:	bf00      	nop
    dc44:	0000da31 	.word	0x0000da31
    dc48:	0028de80 	.word	0x0028de80
    dc4c:	00263b80 	.word	0x00263b80
    dc50:	00278d00 	.word	0x00278d00
    dc54:	0024ea00 	.word	0x0024ea00

0000dc58 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

    dc58:	b580      	push	{r7, lr}
    dc5a:	b082      	sub	sp, #8
    dc5c:	af00      	add	r7, sp, #0
    dc5e:	6078      	str	r0, [r7, #4]
    dc60:	6039      	str	r1, [r7, #0]
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	2b01      	cmp	r3, #1
    dc66:	d10d      	bne.n	dc84 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    dc68:	683b      	ldr	r3, [r7, #0]
    dc6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dc6e:	4293      	cmp	r3, r2
    dc70:	d108      	bne.n	dc84 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    dc72:	4906      	ldr	r1, [pc, #24]	; (dc8c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dc74:	4806      	ldr	r0, [pc, #24]	; (dc90 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dc76:	4b07      	ldr	r3, [pc, #28]	; (dc94 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    dc78:	4798      	blx	r3
    dc7a:	4a07      	ldr	r2, [pc, #28]	; (dc98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    dc7c:	4907      	ldr	r1, [pc, #28]	; (dc9c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    dc7e:	4804      	ldr	r0, [pc, #16]	; (dc90 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dc80:	4b07      	ldr	r3, [pc, #28]	; (dca0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    dc82:	4798      	blx	r3
    dc84:	bf00      	nop
    dc86:	3708      	adds	r7, #8
    dc88:	46bd      	mov	sp, r7
    dc8a:	bd80      	pop	{r7, pc}
    dc8c:	2000a520 	.word	0x2000a520
    dc90:	20002808 	.word	0x20002808
    dc94:	0000d9a5 	.word	0x0000d9a5
    dc98:	20000000 	.word	0x20000000
    dc9c:	0000d9e1 	.word	0x0000d9e1
    dca0:	0000eeed 	.word	0x0000eeed

0000dca4 <_GLOBAL__sub_I_ptrCalendarClass>:
    dca4:	b580      	push	{r7, lr}
    dca6:	af00      	add	r7, sp, #0
    dca8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dcac:	2001      	movs	r0, #1
    dcae:	4b01      	ldr	r3, [pc, #4]	; (dcb4 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    dcb0:	4798      	blx	r3
    dcb2:	bd80      	pop	{r7, pc}
    dcb4:	0000dc59 	.word	0x0000dc59

0000dcb8 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
    dcb8:	b480      	push	{r7}
    dcba:	b083      	sub	sp, #12
    dcbc:	af00      	add	r7, sp, #0
    dcbe:	6078      	str	r0, [r7, #4]
    dcc0:	4a04      	ldr	r2, [pc, #16]	; (dcd4 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    dcc2:	687b      	ldr	r3, [r7, #4]
    dcc4:	601a      	str	r2, [r3, #0]
{
} //~D
    dcc6:	687b      	ldr	r3, [r7, #4]
    dcc8:	4618      	mov	r0, r3
    dcca:	370c      	adds	r7, #12
    dccc:	46bd      	mov	sp, r7
    dcce:	bc80      	pop	{r7}
    dcd0:	4770      	bx	lr
    dcd2:	bf00      	nop
    dcd4:	0000f800 	.word	0x0000f800

0000dcd8 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    dcd8:	b480      	push	{r7}
    dcda:	b083      	sub	sp, #12
    dcdc:	af00      	add	r7, sp, #0
    dcde:	6078      	str	r0, [r7, #4]
    dce0:	4a04      	ldr	r2, [pc, #16]	; (dcf4 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    dce2:	687b      	ldr	r3, [r7, #4]
    dce4:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    dce6:	687b      	ldr	r3, [r7, #4]
    dce8:	4618      	mov	r0, r3
    dcea:	370c      	adds	r7, #12
    dcec:	46bd      	mov	sp, r7
    dcee:	bc80      	pop	{r7}
    dcf0:	4770      	bx	lr
    dcf2:	bf00      	nop
    dcf4:	0000f800 	.word	0x0000f800

0000dcf8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    dcf8:	b480      	push	{r7}
    dcfa:	b083      	sub	sp, #12
    dcfc:	af00      	add	r7, sp, #0
    dcfe:	6078      	str	r0, [r7, #4]
    dd00:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    dd02:	687b      	ldr	r3, [r7, #4]
    dd04:	683a      	ldr	r2, [r7, #0]
    dd06:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    dd08:	687b      	ldr	r3, [r7, #4]
    dd0a:	68db      	ldr	r3, [r3, #12]
    dd0c:	2200      	movs	r2, #0
    dd0e:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    dd10:	4a06      	ldr	r2, [pc, #24]	; (dd2c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    dd12:	687b      	ldr	r3, [r7, #4]
    dd14:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    dd16:	687b      	ldr	r3, [r7, #4]
    dd18:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dd1c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    dd1e:	687b      	ldr	r3, [r7, #4]
    dd20:	4618      	mov	r0, r3
    dd22:	370c      	adds	r7, #12
    dd24:	46bd      	mov	sp, r7
    dd26:	bc80      	pop	{r7}
    dd28:	4770      	bx	lr
    dd2a:	bf00      	nop
    dd2c:	20002998 	.word	0x20002998

0000dd30 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    dd30:	b480      	push	{r7}
    dd32:	b083      	sub	sp, #12
    dd34:	af00      	add	r7, sp, #0
    dd36:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    dd38:	687b      	ldr	r3, [r7, #4]
    dd3a:	2200      	movs	r2, #0
    dd3c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    dd3e:	687b      	ldr	r3, [r7, #4]
    dd40:	4618      	mov	r0, r3
    dd42:	370c      	adds	r7, #12
    dd44:	46bd      	mov	sp, r7
    dd46:	bc80      	pop	{r7}
    dd48:	4770      	bx	lr
	...

0000dd4c <_ZL9InitArrayv>:


static void InitArray(){
    dd4c:	b480      	push	{r7}
    dd4e:	b083      	sub	sp, #12
    dd50:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    dd52:	2301      	movs	r3, #1
    dd54:	607b      	str	r3, [r7, #4]
    dd56:	687b      	ldr	r3, [r7, #4]
    dd58:	2b1f      	cmp	r3, #31
    dd5a:	dc34      	bgt.n	ddc6 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    dd5c:	491e      	ldr	r1, [pc, #120]	; (ddd8 <_ZL9InitArrayv+0x8c>)
    dd5e:	687a      	ldr	r2, [r7, #4]
    dd60:	4613      	mov	r3, r2
    dd62:	009b      	lsls	r3, r3, #2
    dd64:	4413      	add	r3, r2
    dd66:	009b      	lsls	r3, r3, #2
    dd68:	440b      	add	r3, r1
    dd6a:	2200      	movs	r2, #0
    dd6c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    dd6e:	491a      	ldr	r1, [pc, #104]	; (ddd8 <_ZL9InitArrayv+0x8c>)
    dd70:	687a      	ldr	r2, [r7, #4]
    dd72:	4613      	mov	r3, r2
    dd74:	009b      	lsls	r3, r3, #2
    dd76:	4413      	add	r3, r2
    dd78:	009b      	lsls	r3, r3, #2
    dd7a:	440b      	add	r3, r1
    dd7c:	330c      	adds	r3, #12
    dd7e:	2200      	movs	r2, #0
    dd80:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    dd82:	687b      	ldr	r3, [r7, #4]
    dd84:	1e5a      	subs	r2, r3, #1
    dd86:	6879      	ldr	r1, [r7, #4]
    dd88:	460b      	mov	r3, r1
    dd8a:	009b      	lsls	r3, r3, #2
    dd8c:	440b      	add	r3, r1
    dd8e:	009b      	lsls	r3, r3, #2
    dd90:	4911      	ldr	r1, [pc, #68]	; (ddd8 <_ZL9InitArrayv+0x8c>)
    dd92:	4419      	add	r1, r3
    dd94:	4810      	ldr	r0, [pc, #64]	; (ddd8 <_ZL9InitArrayv+0x8c>)
    dd96:	4613      	mov	r3, r2
    dd98:	009b      	lsls	r3, r3, #2
    dd9a:	4413      	add	r3, r2
    dd9c:	009b      	lsls	r3, r3, #2
    dd9e:	4403      	add	r3, r0
    dda0:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    dda2:	4a0e      	ldr	r2, [pc, #56]	; (dddc <_ZL9InitArrayv+0x90>)
    dda4:	687b      	ldr	r3, [r7, #4]
    dda6:	2100      	movs	r1, #0
    dda8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    ddac:	687b      	ldr	r3, [r7, #4]
    ddae:	3b01      	subs	r3, #1
    ddb0:	687a      	ldr	r2, [r7, #4]
    ddb2:	0092      	lsls	r2, r2, #2
    ddb4:	4909      	ldr	r1, [pc, #36]	; (dddc <_ZL9InitArrayv+0x90>)
    ddb6:	440a      	add	r2, r1
    ddb8:	4908      	ldr	r1, [pc, #32]	; (dddc <_ZL9InitArrayv+0x90>)
    ddba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    ddbe:	687b      	ldr	r3, [r7, #4]
    ddc0:	3301      	adds	r3, #1
    ddc2:	607b      	str	r3, [r7, #4]
    ddc4:	e7c7      	b.n	dd56 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    ddc6:	4b06      	ldr	r3, [pc, #24]	; (dde0 <_ZL9InitArrayv+0x94>)
    ddc8:	2201      	movs	r2, #1
    ddca:	701a      	strb	r2, [r3, #0]
		
}
    ddcc:	bf00      	nop
    ddce:	370c      	adds	r7, #12
    ddd0:	46bd      	mov	sp, r7
    ddd2:	bc80      	pop	{r7}
    ddd4:	4770      	bx	lr
    ddd6:	bf00      	nop
    ddd8:	2000299c 	.word	0x2000299c
    dddc:	20002c1c 	.word	0x20002c1c
    dde0:	20002c9c 	.word	0x20002c9c

0000dde4 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    dde4:	b580      	push	{r7, lr}
    dde6:	b082      	sub	sp, #8
    dde8:	af00      	add	r7, sp, #0
    ddea:	6078      	str	r0, [r7, #4]
	ticks=0;
    ddec:	687b      	ldr	r3, [r7, #4]
    ddee:	2200      	movs	r2, #0
    ddf0:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    ddf2:	4b0d      	ldr	r3, [pc, #52]	; (de28 <_ZN11Timer_Class4InitEv+0x44>)
    ddf4:	781b      	ldrb	r3, [r3, #0]
    ddf6:	f083 0301 	eor.w	r3, r3, #1
    ddfa:	b2db      	uxtb	r3, r3
    ddfc:	2b00      	cmp	r3, #0
    ddfe:	d001      	beq.n	de04 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    de00:	4b0a      	ldr	r3, [pc, #40]	; (de2c <_ZN11Timer_Class4InitEv+0x48>)
    de02:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    de04:	6878      	ldr	r0, [r7, #4]
    de06:	4b0a      	ldr	r3, [pc, #40]	; (de30 <_ZN11Timer_Class4InitEv+0x4c>)
    de08:	4798      	blx	r3
    de0a:	4603      	mov	r3, r0
    de0c:	2b00      	cmp	r3, #0
    de0e:	bf0c      	ite	eq
    de10:	2301      	moveq	r3, #1
    de12:	2300      	movne	r3, #0
    de14:	b2da      	uxtb	r2, r3
    de16:	687b      	ldr	r3, [r7, #4]
    de18:	709a      	strb	r2, [r3, #2]
	return isOK;
    de1a:	687b      	ldr	r3, [r7, #4]
    de1c:	789b      	ldrb	r3, [r3, #2]
    de1e:	b2db      	uxtb	r3, r3
}
    de20:	4618      	mov	r0, r3
    de22:	3708      	adds	r7, #8
    de24:	46bd      	mov	sp, r7
    de26:	bd80      	pop	{r7, pc}
    de28:	20002c9c 	.word	0x20002c9c
    de2c:	0000dd4d 	.word	0x0000dd4d
    de30:	0000de35 	.word	0x0000de35

0000de34 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    de34:	b580      	push	{r7, lr}
    de36:	b084      	sub	sp, #16
    de38:	af00      	add	r7, sp, #0
    de3a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    de3c:	687b      	ldr	r3, [r7, #4]
    de3e:	68db      	ldr	r3, [r3, #12]
    de40:	4618      	mov	r0, r3
    de42:	4b04      	ldr	r3, [pc, #16]	; (de54 <_ZN11Timer_Class5StartEv+0x20>)
    de44:	4798      	blx	r3
    de46:	60f8      	str	r0, [r7, #12]
	return status;
    de48:	68fb      	ldr	r3, [r7, #12]
	
}
    de4a:	4618      	mov	r0, r3
    de4c:	3710      	adds	r7, #16
    de4e:	46bd      	mov	sp, r7
    de50:	bd80      	pop	{r7, pc}
    de52:	bf00      	nop
    de54:	00002981 	.word	0x00002981

0000de58 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    de58:	b580      	push	{r7, lr}
    de5a:	b084      	sub	sp, #16
    de5c:	af00      	add	r7, sp, #0
    de5e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    de60:	687b      	ldr	r3, [r7, #4]
    de62:	68db      	ldr	r3, [r3, #12]
    de64:	4618      	mov	r0, r3
    de66:	4b05      	ldr	r3, [pc, #20]	; (de7c <_ZN11Timer_Class4StopEv+0x24>)
    de68:	4798      	blx	r3
    de6a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    de6c:	687b      	ldr	r3, [r7, #4]
    de6e:	2200      	movs	r2, #0
    de70:	705a      	strb	r2, [r3, #1]
	return status;
    de72:	68fb      	ldr	r3, [r7, #12]
}
    de74:	4618      	mov	r0, r3
    de76:	3710      	adds	r7, #16
    de78:	46bd      	mov	sp, r7
    de7a:	bd80      	pop	{r7, pc}
    de7c:	000029e9 	.word	0x000029e9

0000de80 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    de80:	b580      	push	{r7, lr}
    de82:	b086      	sub	sp, #24
    de84:	af00      	add	r7, sp, #0
    de86:	60f8      	str	r0, [r7, #12]
    de88:	60b9      	str	r1, [r7, #8]
    de8a:	607a      	str	r2, [r7, #4]
    de8c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    de8e:	68b9      	ldr	r1, [r7, #8]
    de90:	68f8      	ldr	r0, [r7, #12]
    de92:	4b0e      	ldr	r3, [pc, #56]	; (decc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    de94:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    de96:	68fb      	ldr	r3, [r7, #12]
    de98:	699b      	ldr	r3, [r3, #24]
    de9a:	687a      	ldr	r2, [r7, #4]
    de9c:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    de9e:	68fb      	ldr	r3, [r7, #12]
    dea0:	699b      	ldr	r3, [r3, #24]
    dea2:	68ba      	ldr	r2, [r7, #8]
    dea4:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    dea6:	68fb      	ldr	r3, [r7, #12]
    dea8:	699b      	ldr	r3, [r3, #24]
    deaa:	78fa      	ldrb	r2, [r7, #3]
    deac:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    deae:	68fb      	ldr	r3, [r7, #12]
    deb0:	68da      	ldr	r2, [r3, #12]
    deb2:	68fb      	ldr	r3, [r7, #12]
    deb4:	699b      	ldr	r3, [r3, #24]
    deb6:	4619      	mov	r1, r3
    deb8:	4610      	mov	r0, r2
    deba:	4b05      	ldr	r3, [pc, #20]	; (ded0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    debc:	4798      	blx	r3
    debe:	6178      	str	r0, [r7, #20]
	
	return status;
    dec0:	697b      	ldr	r3, [r7, #20]
}
    dec2:	4618      	mov	r0, r3
    dec4:	3718      	adds	r7, #24
    dec6:	46bd      	mov	sp, r7
    dec8:	bd80      	pop	{r7, pc}
    deca:	bf00      	nop
    decc:	0000dfe9 	.word	0x0000dfe9
    ded0:	00002a55 	.word	0x00002a55

0000ded4 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    ded4:	b580      	push	{r7, lr}
    ded6:	b082      	sub	sp, #8
    ded8:	af00      	add	r7, sp, #0
    deda:	6078      	str	r0, [r7, #4]
    dedc:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    dede:	6839      	ldr	r1, [r7, #0]
    dee0:	6878      	ldr	r0, [r7, #4]
    dee2:	4b0f      	ldr	r3, [pc, #60]	; (df20 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    dee4:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    dee6:	687b      	ldr	r3, [r7, #4]
    dee8:	68db      	ldr	r3, [r3, #12]
    deea:	f103 0218 	add.w	r2, r3, #24
    deee:	687b      	ldr	r3, [r7, #4]
    def0:	699b      	ldr	r3, [r3, #24]
    def2:	4619      	mov	r1, r3
    def4:	4610      	mov	r0, r2
    def6:	4b0b      	ldr	r3, [pc, #44]	; (df24 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    def8:	4798      	blx	r3
    defa:	4603      	mov	r3, r0
    defc:	2b00      	cmp	r3, #0
    defe:	d007      	beq.n	df10 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    df00:	687b      	ldr	r3, [r7, #4]
    df02:	68da      	ldr	r2, [r3, #12]
    df04:	687b      	ldr	r3, [r7, #4]
    df06:	699b      	ldr	r3, [r3, #24]
    df08:	4619      	mov	r1, r3
    df0a:	4610      	mov	r0, r2
    df0c:	4b06      	ldr	r3, [pc, #24]	; (df28 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    df0e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	699b      	ldr	r3, [r3, #24]
    df14:	2200      	movs	r2, #0
    df16:	60da      	str	r2, [r3, #12]
}
    df18:	bf00      	nop
    df1a:	3708      	adds	r7, #8
    df1c:	46bd      	mov	sp, r7
    df1e:	bd80      	pop	{r7, pc}
    df20:	0000e069 	.word	0x0000e069
    df24:	00003741 	.word	0x00003741
    df28:	00002b59 	.word	0x00002b59

0000df2c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    df2c:	b590      	push	{r4, r7, lr}
    df2e:	b087      	sub	sp, #28
    df30:	af00      	add	r7, sp, #0
    df32:	60f8      	str	r0, [r7, #12]
    df34:	60b9      	str	r1, [r7, #8]
    df36:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    df38:	2300      	movs	r3, #0
    df3a:	687a      	ldr	r2, [r7, #4]
    df3c:	68b9      	ldr	r1, [r7, #8]
    df3e:	68f8      	ldr	r0, [r7, #12]
    df40:	4c0c      	ldr	r4, [pc, #48]	; (df74 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    df42:	47a0      	blx	r4
    df44:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    df46:	68fb      	ldr	r3, [r7, #12]
    df48:	68db      	ldr	r3, [r3, #12]
    df4a:	681b      	ldr	r3, [r3, #0]
    df4c:	699b      	ldr	r3, [r3, #24]
    df4e:	68fa      	ldr	r2, [r7, #12]
    df50:	68d2      	ldr	r2, [r2, #12]
    df52:	3204      	adds	r2, #4
    df54:	4610      	mov	r0, r2
    df56:	4798      	blx	r3
    df58:	4603      	mov	r3, r0
    df5a:	2b00      	cmp	r3, #0
    df5c:	d105      	bne.n	df6a <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    df5e:	68fb      	ldr	r3, [r7, #12]
    df60:	68db      	ldr	r3, [r3, #12]
    df62:	4618      	mov	r0, r3
    df64:	4b04      	ldr	r3, [pc, #16]	; (df78 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    df66:	4798      	blx	r3
    df68:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    df6a:	697b      	ldr	r3, [r7, #20]
}
    df6c:	4618      	mov	r0, r3
    df6e:	371c      	adds	r7, #28
    df70:	46bd      	mov	sp, r7
    df72:	bd90      	pop	{r4, r7, pc}
    df74:	0000de81 	.word	0x0000de81
    df78:	00002981 	.word	0x00002981

0000df7c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    df7c:	b480      	push	{r7}
    df7e:	b085      	sub	sp, #20
    df80:	af00      	add	r7, sp, #0
    df82:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    df84:	2300      	movs	r3, #0
    df86:	73fb      	strb	r3, [r7, #15]
    df88:	7bfb      	ldrb	r3, [r7, #15]
    df8a:	2b1f      	cmp	r3, #31
    df8c:	dc23      	bgt.n	dfd6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    df8e:	687b      	ldr	r3, [r7, #4]
    df90:	7f1a      	ldrb	r2, [r3, #28]
    df92:	7bfb      	ldrb	r3, [r7, #15]
    df94:	4413      	add	r3, r2
    df96:	b2db      	uxtb	r3, r3
    df98:	f003 031f 	and.w	r3, r3, #31
    df9c:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    df9e:	7bba      	ldrb	r2, [r7, #14]
    dfa0:	4910      	ldr	r1, [pc, #64]	; (dfe4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dfa2:	4613      	mov	r3, r2
    dfa4:	009b      	lsls	r3, r3, #2
    dfa6:	4413      	add	r3, r2
    dfa8:	009b      	lsls	r3, r3, #2
    dfaa:	440b      	add	r3, r1
    dfac:	330c      	adds	r3, #12
    dfae:	681b      	ldr	r3, [r3, #0]
    dfb0:	2b00      	cmp	r3, #0
    dfb2:	d10c      	bne.n	dfce <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    dfb4:	7bba      	ldrb	r2, [r7, #14]
    dfb6:	4613      	mov	r3, r2
    dfb8:	009b      	lsls	r3, r3, #2
    dfba:	4413      	add	r3, r2
    dfbc:	009b      	lsls	r3, r3, #2
    dfbe:	4a09      	ldr	r2, [pc, #36]	; (dfe4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dfc0:	441a      	add	r2, r3
    dfc2:	687b      	ldr	r3, [r7, #4]
    dfc4:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    dfc6:	687b      	ldr	r3, [r7, #4]
    dfc8:	7bba      	ldrb	r2, [r7, #14]
    dfca:	771a      	strb	r2, [r3, #28]
			return;
    dfcc:	e006      	b.n	dfdc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dfce:	7bfb      	ldrb	r3, [r7, #15]
    dfd0:	3301      	adds	r3, #1
    dfd2:	73fb      	strb	r3, [r7, #15]
    dfd4:	e7d8      	b.n	df88 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    dfd6:	687b      	ldr	r3, [r7, #4]
    dfd8:	4a02      	ldr	r2, [pc, #8]	; (dfe4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dfda:	619a      	str	r2, [r3, #24]

}
    dfdc:	3714      	adds	r7, #20
    dfde:	46bd      	mov	sp, r7
    dfe0:	bc80      	pop	{r7}
    dfe2:	4770      	bx	lr
    dfe4:	2000299c 	.word	0x2000299c

0000dfe8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    dfe8:	b580      	push	{r7, lr}
    dfea:	b084      	sub	sp, #16
    dfec:	af00      	add	r7, sp, #0
    dfee:	6078      	str	r0, [r7, #4]
    dff0:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dff2:	2300      	movs	r3, #0
    dff4:	73fb      	strb	r3, [r7, #15]
    dff6:	7bfb      	ldrb	r3, [r7, #15]
    dff8:	2b1f      	cmp	r3, #31
    dffa:	dc28      	bgt.n	e04e <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    dffc:	687b      	ldr	r3, [r7, #4]
    dffe:	7f1a      	ldrb	r2, [r3, #28]
    e000:	7bfb      	ldrb	r3, [r7, #15]
    e002:	4413      	add	r3, r2
    e004:	b2db      	uxtb	r3, r3
    e006:	f003 031f 	and.w	r3, r3, #31
    e00a:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    e00c:	7bba      	ldrb	r2, [r7, #14]
    e00e:	4913      	ldr	r1, [pc, #76]	; (e05c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e010:	4613      	mov	r3, r2
    e012:	009b      	lsls	r3, r3, #2
    e014:	4413      	add	r3, r2
    e016:	009b      	lsls	r3, r3, #2
    e018:	440b      	add	r3, r1
    e01a:	330c      	adds	r3, #12
    e01c:	681a      	ldr	r2, [r3, #0]
    e01e:	683b      	ldr	r3, [r7, #0]
    e020:	429a      	cmp	r2, r3
    e022:	d110      	bne.n	e046 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    e024:	6839      	ldr	r1, [r7, #0]
    e026:	6878      	ldr	r0, [r7, #4]
    e028:	4b0d      	ldr	r3, [pc, #52]	; (e060 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    e02a:	4798      	blx	r3
			task=&taskArray[j];
    e02c:	7bba      	ldrb	r2, [r7, #14]
    e02e:	4613      	mov	r3, r2
    e030:	009b      	lsls	r3, r3, #2
    e032:	4413      	add	r3, r2
    e034:	009b      	lsls	r3, r3, #2
    e036:	4a09      	ldr	r2, [pc, #36]	; (e05c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    e038:	441a      	add	r2, r3
    e03a:	687b      	ldr	r3, [r7, #4]
    e03c:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    e03e:	687b      	ldr	r3, [r7, #4]
    e040:	7bba      	ldrb	r2, [r7, #14]
    e042:	771a      	strb	r2, [r3, #28]
			return;
    e044:	e006      	b.n	e054 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e046:	7bfb      	ldrb	r3, [r7, #15]
    e048:	3301      	adds	r3, #1
    e04a:	73fb      	strb	r3, [r7, #15]
    e04c:	e7d3      	b.n	dff6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    e04e:	6878      	ldr	r0, [r7, #4]
    e050:	4b04      	ldr	r3, [pc, #16]	; (e064 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    e052:	4798      	blx	r3
	//task=&taskArray[0];

}
    e054:	3710      	adds	r7, #16
    e056:	46bd      	mov	sp, r7
    e058:	bd80      	pop	{r7, pc}
    e05a:	bf00      	nop
    e05c:	2000299c 	.word	0x2000299c
    e060:	0000ded5 	.word	0x0000ded5
    e064:	0000df7d 	.word	0x0000df7d

0000e068 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    e068:	b480      	push	{r7}
    e06a:	b085      	sub	sp, #20
    e06c:	af00      	add	r7, sp, #0
    e06e:	6078      	str	r0, [r7, #4]
    e070:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e072:	2300      	movs	r3, #0
    e074:	73fb      	strb	r3, [r7, #15]
    e076:	7bfb      	ldrb	r3, [r7, #15]
    e078:	2b1f      	cmp	r3, #31
    e07a:	dc19      	bgt.n	e0b0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e07c:	7bfa      	ldrb	r2, [r7, #15]
    e07e:	490f      	ldr	r1, [pc, #60]	; (e0bc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e080:	4613      	mov	r3, r2
    e082:	009b      	lsls	r3, r3, #2
    e084:	4413      	add	r3, r2
    e086:	009b      	lsls	r3, r3, #2
    e088:	440b      	add	r3, r1
    e08a:	330c      	adds	r3, #12
    e08c:	681a      	ldr	r2, [r3, #0]
    e08e:	683b      	ldr	r3, [r7, #0]
    e090:	429a      	cmp	r2, r3
    e092:	d109      	bne.n	e0a8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e094:	7bfa      	ldrb	r2, [r7, #15]
    e096:	4613      	mov	r3, r2
    e098:	009b      	lsls	r3, r3, #2
    e09a:	4413      	add	r3, r2
    e09c:	009b      	lsls	r3, r3, #2
    e09e:	4a07      	ldr	r2, [pc, #28]	; (e0bc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e0a0:	441a      	add	r2, r3
    e0a2:	687b      	ldr	r3, [r7, #4]
    e0a4:	619a      	str	r2, [r3, #24]
			return;
    e0a6:	e004      	b.n	e0b2 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e0a8:	7bfb      	ldrb	r3, [r7, #15]
    e0aa:	3301      	adds	r3, #1
    e0ac:	73fb      	strb	r3, [r7, #15]
    e0ae:	e7e2      	b.n	e076 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    e0b0:	bf00      	nop
}
    e0b2:	3714      	adds	r7, #20
    e0b4:	46bd      	mov	sp, r7
    e0b6:	bc80      	pop	{r7}
    e0b8:	4770      	bx	lr
    e0ba:	bf00      	nop
    e0bc:	2000299c 	.word	0x2000299c

0000e0c0 <_Z41__static_initialization_and_destruction_0ii>:
    e0c0:	b580      	push	{r7, lr}
    e0c2:	b082      	sub	sp, #8
    e0c4:	af00      	add	r7, sp, #0
    e0c6:	6078      	str	r0, [r7, #4]
    e0c8:	6039      	str	r1, [r7, #0]
    e0ca:	687b      	ldr	r3, [r7, #4]
    e0cc:	2b01      	cmp	r3, #1
    e0ce:	d143      	bne.n	e158 <_Z41__static_initialization_and_destruction_0ii+0x98>
    e0d0:	683b      	ldr	r3, [r7, #0]
    e0d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e0d6:	4293      	cmp	r3, r2
    e0d8:	d13e      	bne.n	e158 <_Z41__static_initialization_and_destruction_0ii+0x98>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e0da:	4921      	ldr	r1, [pc, #132]	; (e160 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    e0dc:	4821      	ldr	r0, [pc, #132]	; (e164 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    e0de:	4b22      	ldr	r3, [pc, #136]	; (e168 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    e0e0:	4798      	blx	r3
    e0e2:	4a22      	ldr	r2, [pc, #136]	; (e16c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    e0e4:	4922      	ldr	r1, [pc, #136]	; (e170 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e0e6:	481f      	ldr	r0, [pc, #124]	; (e164 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    e0e8:	4b22      	ldr	r3, [pc, #136]	; (e174 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e0ea:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e0ec:	4922      	ldr	r1, [pc, #136]	; (e178 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e0ee:	4823      	ldr	r0, [pc, #140]	; (e17c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e0f0:	4b1d      	ldr	r3, [pc, #116]	; (e168 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    e0f2:	4798      	blx	r3
    e0f4:	4a1d      	ldr	r2, [pc, #116]	; (e16c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    e0f6:	491e      	ldr	r1, [pc, #120]	; (e170 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e0f8:	4820      	ldr	r0, [pc, #128]	; (e17c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e0fa:	4b1e      	ldr	r3, [pc, #120]	; (e174 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e0fc:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e0fe:	4920      	ldr	r1, [pc, #128]	; (e180 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e100:	4820      	ldr	r0, [pc, #128]	; (e184 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e102:	4b19      	ldr	r3, [pc, #100]	; (e168 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    e104:	4798      	blx	r3
    e106:	4a19      	ldr	r2, [pc, #100]	; (e16c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    e108:	4919      	ldr	r1, [pc, #100]	; (e170 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e10a:	481e      	ldr	r0, [pc, #120]	; (e184 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e10c:	4b19      	ldr	r3, [pc, #100]	; (e174 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e10e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e110:	491d      	ldr	r1, [pc, #116]	; (e188 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e112:	481e      	ldr	r0, [pc, #120]	; (e18c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e114:	4b14      	ldr	r3, [pc, #80]	; (e168 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    e116:	4798      	blx	r3
    e118:	4a14      	ldr	r2, [pc, #80]	; (e16c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    e11a:	4915      	ldr	r1, [pc, #84]	; (e170 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e11c:	481b      	ldr	r0, [pc, #108]	; (e18c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e11e:	4b15      	ldr	r3, [pc, #84]	; (e174 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e120:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e122:	491b      	ldr	r1, [pc, #108]	; (e190 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e124:	481b      	ldr	r0, [pc, #108]	; (e194 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e126:	4b10      	ldr	r3, [pc, #64]	; (e168 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    e128:	4798      	blx	r3
    e12a:	4a10      	ldr	r2, [pc, #64]	; (e16c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    e12c:	4910      	ldr	r1, [pc, #64]	; (e170 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e12e:	4819      	ldr	r0, [pc, #100]	; (e194 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e130:	4b10      	ldr	r3, [pc, #64]	; (e174 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e132:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e134:	4918      	ldr	r1, [pc, #96]	; (e198 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e136:	4819      	ldr	r0, [pc, #100]	; (e19c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e138:	4b0b      	ldr	r3, [pc, #44]	; (e168 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    e13a:	4798      	blx	r3
    e13c:	4a0b      	ldr	r2, [pc, #44]	; (e16c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    e13e:	490c      	ldr	r1, [pc, #48]	; (e170 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e140:	4816      	ldr	r0, [pc, #88]	; (e19c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e142:	4b0c      	ldr	r3, [pc, #48]	; (e174 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e144:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e146:	4916      	ldr	r1, [pc, #88]	; (e1a0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e148:	4816      	ldr	r0, [pc, #88]	; (e1a4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e14a:	4b07      	ldr	r3, [pc, #28]	; (e168 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    e14c:	4798      	blx	r3
    e14e:	4a07      	ldr	r2, [pc, #28]	; (e16c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    e150:	4907      	ldr	r1, [pc, #28]	; (e170 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e152:	4814      	ldr	r0, [pc, #80]	; (e1a4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e154:	4b07      	ldr	r3, [pc, #28]	; (e174 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e156:	4798      	blx	r3
    e158:	bf00      	nop
    e15a:	3708      	adds	r7, #8
    e15c:	46bd      	mov	sp, r7
    e15e:	bd80      	pop	{r7, pc}
    e160:	2000a368 	.word	0x2000a368
    e164:	200028b8 	.word	0x200028b8
    e168:	0000dcf9 	.word	0x0000dcf9
    e16c:	20000000 	.word	0x20000000
    e170:	0000dd31 	.word	0x0000dd31
    e174:	0000eeed 	.word	0x0000eeed
    e178:	2000a3fc 	.word	0x2000a3fc
    e17c:	200028d8 	.word	0x200028d8
    e180:	2000a500 	.word	0x2000a500
    e184:	200028f8 	.word	0x200028f8
    e188:	2000a41c 	.word	0x2000a41c
    e18c:	20002918 	.word	0x20002918
    e190:	2000a4c0 	.word	0x2000a4c0
    e194:	20002938 	.word	0x20002938
    e198:	2000a4e0 	.word	0x2000a4e0
    e19c:	20002958 	.word	0x20002958
    e1a0:	2000a3d8 	.word	0x2000a3d8
    e1a4:	20002978 	.word	0x20002978

0000e1a8 <_GLOBAL__sub_I_ptrTimerClass>:
    e1a8:	b580      	push	{r7, lr}
    e1aa:	af00      	add	r7, sp, #0
    e1ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e1b0:	2001      	movs	r0, #1
    e1b2:	4b01      	ldr	r3, [pc, #4]	; (e1b8 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    e1b4:	4798      	blx	r3
    e1b6:	bd80      	pop	{r7, pc}
    e1b8:	0000e0c1 	.word	0x0000e0c1

0000e1bc <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    e1bc:	b480      	push	{r7}
    e1be:	b083      	sub	sp, #12
    e1c0:	af00      	add	r7, sp, #0
    e1c2:	6078      	str	r0, [r7, #4]
    e1c4:	4a05      	ldr	r2, [pc, #20]	; (e1dc <_ZN5PrintC1Ev+0x20>)
    e1c6:	687b      	ldr	r3, [r7, #4]
    e1c8:	601a      	str	r2, [r3, #0]
    e1ca:	687b      	ldr	r3, [r7, #4]
    e1cc:	2200      	movs	r2, #0
    e1ce:	605a      	str	r2, [r3, #4]
    e1d0:	687b      	ldr	r3, [r7, #4]
    e1d2:	4618      	mov	r0, r3
    e1d4:	370c      	adds	r7, #12
    e1d6:	46bd      	mov	sp, r7
    e1d8:	bc80      	pop	{r7}
    e1da:	4770      	bx	lr
    e1dc:	0000f87c 	.word	0x0000f87c

0000e1e0 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    e1e0:	b480      	push	{r7}
    e1e2:	b083      	sub	sp, #12
    e1e4:	af00      	add	r7, sp, #0
    e1e6:	6078      	str	r0, [r7, #4]
    e1e8:	2300      	movs	r3, #0
    e1ea:	4618      	mov	r0, r3
    e1ec:	370c      	adds	r7, #12
    e1ee:	46bd      	mov	sp, r7
    e1f0:	bc80      	pop	{r7}
    e1f2:	4770      	bx	lr

0000e1f4 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    e1f4:	b480      	push	{r7}
    e1f6:	b083      	sub	sp, #12
    e1f8:	af00      	add	r7, sp, #0
    e1fa:	6078      	str	r0, [r7, #4]
    e1fc:	bf00      	nop
    e1fe:	370c      	adds	r7, #12
    e200:	46bd      	mov	sp, r7
    e202:	bc80      	pop	{r7}
    e204:	4770      	bx	lr
	...

0000e208 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    e208:	b580      	push	{r7, lr}
    e20a:	b082      	sub	sp, #8
    e20c:	af00      	add	r7, sp, #0
    e20e:	6078      	str	r0, [r7, #4]
    e210:	687b      	ldr	r3, [r7, #4]
    e212:	4618      	mov	r0, r3
    e214:	4b06      	ldr	r3, [pc, #24]	; (e230 <_ZN6StreamC1Ev+0x28>)
    e216:	4798      	blx	r3
    e218:	4a06      	ldr	r2, [pc, #24]	; (e234 <_ZN6StreamC1Ev+0x2c>)
    e21a:	687b      	ldr	r3, [r7, #4]
    e21c:	601a      	str	r2, [r3, #0]
    e21e:	687b      	ldr	r3, [r7, #4]
    e220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e224:	609a      	str	r2, [r3, #8]
    e226:	687b      	ldr	r3, [r7, #4]
    e228:	4618      	mov	r0, r3
    e22a:	3708      	adds	r7, #8
    e22c:	46bd      	mov	sp, r7
    e22e:	bd80      	pop	{r7, pc}
    e230:	0000e1bd 	.word	0x0000e1bd
    e234:	0000f840 	.word	0x0000f840

0000e238 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    e238:	b480      	push	{r7}
    e23a:	b083      	sub	sp, #12
    e23c:	af00      	add	r7, sp, #0
    e23e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    e240:	4b06      	ldr	r3, [pc, #24]	; (e25c <_ZL10USBTimeoutPK10timer_task+0x24>)
    e242:	681b      	ldr	r3, [r3, #0]
    e244:	2201      	movs	r2, #1
    e246:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    e248:	4b04      	ldr	r3, [pc, #16]	; (e25c <_ZL10USBTimeoutPK10timer_task+0x24>)
    e24a:	681b      	ldr	r3, [r3, #0]
    e24c:	2200      	movs	r2, #0
    e24e:	741a      	strb	r2, [r3, #16]
	
}
    e250:	bf00      	nop
    e252:	370c      	adds	r7, #12
    e254:	46bd      	mov	sp, r7
    e256:	bc80      	pop	{r7}
    e258:	4770      	bx	lr
    e25a:	bf00      	nop
    e25c:	20002d80 	.word	0x20002d80

0000e260 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e260:	b480      	push	{r7}
    e262:	b083      	sub	sp, #12
    e264:	af00      	add	r7, sp, #0
    e266:	4603      	mov	r3, r0
    e268:	603a      	str	r2, [r7, #0]
    e26a:	71fb      	strb	r3, [r7, #7]
    e26c:	460b      	mov	r3, r1
    e26e:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    e270:	4b08      	ldr	r3, [pc, #32]	; (e294 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e272:	681b      	ldr	r3, [r3, #0]
    e274:	2201      	movs	r2, #1
    e276:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    e278:	4b06      	ldr	r3, [pc, #24]	; (e294 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e27a:	681b      	ldr	r3, [r3, #0]
    e27c:	2201      	movs	r2, #1
    e27e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e280:	4b04      	ldr	r3, [pc, #16]	; (e294 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e282:	681b      	ldr	r3, [r3, #0]
    e284:	2201      	movs	r2, #1
    e286:	741a      	strb	r2, [r3, #16]


	return false;
    e288:	2300      	movs	r3, #0
}
    e28a:	4618      	mov	r0, r3
    e28c:	370c      	adds	r7, #12
    e28e:	46bd      	mov	sp, r7
    e290:	bc80      	pop	{r7}
    e292:	4770      	bx	lr
    e294:	20002d80 	.word	0x20002d80

0000e298 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e298:	b480      	push	{r7}
    e29a:	b083      	sub	sp, #12
    e29c:	af00      	add	r7, sp, #0
    e29e:	4603      	mov	r3, r0
    e2a0:	603a      	str	r2, [r7, #0]
    e2a2:	71fb      	strb	r3, [r7, #7]
    e2a4:	460b      	mov	r3, r1
    e2a6:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    e2a8:	4b08      	ldr	r3, [pc, #32]	; (e2cc <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e2aa:	681b      	ldr	r3, [r3, #0]
    e2ac:	2201      	movs	r2, #1
    e2ae:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    e2b0:	4b06      	ldr	r3, [pc, #24]	; (e2cc <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e2b2:	681b      	ldr	r3, [r3, #0]
    e2b4:	2201      	movs	r2, #1
    e2b6:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e2b8:	4b04      	ldr	r3, [pc, #16]	; (e2cc <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e2ba:	681b      	ldr	r3, [r3, #0]
    e2bc:	2201      	movs	r2, #1
    e2be:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    e2c0:	2300      	movs	r3, #0
}
    e2c2:	4618      	mov	r0, r3
    e2c4:	370c      	adds	r7, #12
    e2c6:	46bd      	mov	sp, r7
    e2c8:	bc80      	pop	{r7}
    e2ca:	4770      	bx	lr
    e2cc:	20002d80 	.word	0x20002d80

0000e2d0 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    e2d0:	b580      	push	{r7, lr}
    e2d2:	b082      	sub	sp, #8
    e2d4:	af00      	add	r7, sp, #0
    e2d6:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    e2d8:	793b      	ldrb	r3, [r7, #4]
    e2da:	f003 0301 	and.w	r3, r3, #1
    e2de:	b2db      	uxtb	r3, r3
    e2e0:	2b00      	cmp	r3, #0
    e2e2:	d013      	beq.n	e30c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    e2e4:	490c      	ldr	r1, [pc, #48]	; (e318 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    e2e6:	2000      	movs	r0, #0
    e2e8:	4b0c      	ldr	r3, [pc, #48]	; (e31c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e2ea:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    e2ec:	490c      	ldr	r1, [pc, #48]	; (e320 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    e2ee:	2001      	movs	r0, #1
    e2f0:	4b0a      	ldr	r3, [pc, #40]	; (e31c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e2f2:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    e2f4:	4b0b      	ldr	r3, [pc, #44]	; (e324 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e2f6:	681b      	ldr	r3, [r3, #0]
    e2f8:	2201      	movs	r2, #1
    e2fa:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    e2fc:	4b09      	ldr	r3, [pc, #36]	; (e324 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e2fe:	681b      	ldr	r3, [r3, #0]
    e300:	2201      	movs	r2, #1
    e302:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    e304:	4b07      	ldr	r3, [pc, #28]	; (e324 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e306:	681b      	ldr	r3, [r3, #0]
    e308:	2201      	movs	r2, #1
    e30a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    e30c:	2300      	movs	r3, #0
}
    e30e:	4618      	mov	r0, r3
    e310:	3708      	adds	r7, #8
    e312:	46bd      	mov	sp, r7
    e314:	bd80      	pop	{r7, pc}
    e316:	bf00      	nop
    e318:	0000e261 	.word	0x0000e261
    e31c:	0000bf71 	.word	0x0000bf71
    e320:	0000e299 	.word	0x0000e299
    e324:	20002d80 	.word	0x20002d80

0000e328 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    e328:	b580      	push	{r7, lr}
    e32a:	b082      	sub	sp, #8
    e32c:	af00      	add	r7, sp, #0
    e32e:	6078      	str	r0, [r7, #4]
    e330:	687b      	ldr	r3, [r7, #4]
    e332:	4618      	mov	r0, r3
    e334:	4b0a      	ldr	r3, [pc, #40]	; (e360 <_ZN9CDC_ClassC1Ev+0x38>)
    e336:	4798      	blx	r3
    e338:	687b      	ldr	r3, [r7, #4]
    e33a:	3310      	adds	r3, #16
    e33c:	4618      	mov	r0, r3
    e33e:	4b09      	ldr	r3, [pc, #36]	; (e364 <_ZN9CDC_ClassC1Ev+0x3c>)
    e340:	4798      	blx	r3
    e342:	4a09      	ldr	r2, [pc, #36]	; (e368 <_ZN9CDC_ClassC1Ev+0x40>)
    e344:	687b      	ldr	r3, [r7, #4]
    e346:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    e348:	687b      	ldr	r3, [r7, #4]
    e34a:	f04f 32ff 	mov.w	r2, #4294967295
    e34e:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    e350:	4a06      	ldr	r2, [pc, #24]	; (e36c <_ZN9CDC_ClassC1Ev+0x44>)
    e352:	687b      	ldr	r3, [r7, #4]
    e354:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    e356:	687b      	ldr	r3, [r7, #4]
    e358:	4618      	mov	r0, r3
    e35a:	3708      	adds	r7, #8
    e35c:	46bd      	mov	sp, r7
    e35e:	bd80      	pop	{r7, pc}
    e360:	0000e209 	.word	0x0000e209
    e364:	0000eaad 	.word	0x0000eaad
    e368:	0000f810 	.word	0x0000f810
    e36c:	20002d80 	.word	0x20002d80

0000e370 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    e370:	b580      	push	{r7, lr}
    e372:	b082      	sub	sp, #8
    e374:	af00      	add	r7, sp, #0
    e376:	6078      	str	r0, [r7, #4]
    e378:	4a06      	ldr	r2, [pc, #24]	; (e394 <_ZN9CDC_ClassD1Ev+0x24>)
    e37a:	687b      	ldr	r3, [r7, #4]
    e37c:	601a      	str	r2, [r3, #0]
    e37e:	687b      	ldr	r3, [r7, #4]
    e380:	3310      	adds	r3, #16
    e382:	4618      	mov	r0, r3
    e384:	4b04      	ldr	r3, [pc, #16]	; (e398 <_ZN9CDC_ClassD1Ev+0x28>)
    e386:	4798      	blx	r3
{
} //~CDC_Class
    e388:	687b      	ldr	r3, [r7, #4]
    e38a:	4618      	mov	r0, r3
    e38c:	3708      	adds	r7, #8
    e38e:	46bd      	mov	sp, r7
    e390:	bd80      	pop	{r7, pc}
    e392:	bf00      	nop
    e394:	0000f810 	.word	0x0000f810
    e398:	0000eacd 	.word	0x0000eacd

0000e39c <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    e39c:	b580      	push	{r7, lr}
    e39e:	b082      	sub	sp, #8
    e3a0:	af00      	add	r7, sp, #0
    e3a2:	6078      	str	r0, [r7, #4]
	
	OnInit();
    e3a4:	687b      	ldr	r3, [r7, #4]
    e3a6:	3310      	adds	r3, #16
    e3a8:	4618      	mov	r0, r3
    e3aa:	4b09      	ldr	r3, [pc, #36]	; (e3d0 <_ZN9CDC_Class4InitEv+0x34>)
    e3ac:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    e3ae:	4909      	ldr	r1, [pc, #36]	; (e3d4 <_ZN9CDC_Class4InitEv+0x38>)
    e3b0:	2003      	movs	r0, #3
    e3b2:	4b09      	ldr	r3, [pc, #36]	; (e3d8 <_ZN9CDC_Class4InitEv+0x3c>)
    e3b4:	4798      	blx	r3
	delay_ms(100);
    e3b6:	2064      	movs	r0, #100	; 0x64
    e3b8:	4b08      	ldr	r3, [pc, #32]	; (e3dc <_ZN9CDC_Class4InitEv+0x40>)
    e3ba:	4798      	blx	r3
		
	if (connected)
    e3bc:	687b      	ldr	r3, [r7, #4]
    e3be:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    e3c0:	2064      	movs	r0, #100	; 0x64
    e3c2:	4b06      	ldr	r3, [pc, #24]	; (e3dc <_ZN9CDC_Class4InitEv+0x40>)
    e3c4:	4798      	blx	r3

	

}
    e3c6:	bf00      	nop
    e3c8:	3708      	adds	r7, #8
    e3ca:	46bd      	mov	sp, r7
    e3cc:	bd80      	pop	{r7, pc}
    e3ce:	bf00      	nop
    e3d0:	0000eae1 	.word	0x0000eae1
    e3d4:	0000e2d1 	.word	0x0000e2d1
    e3d8:	0000bf71 	.word	0x0000bf71
    e3dc:	00002219 	.word	0x00002219

0000e3e0 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e3e0:	b580      	push	{r7, lr}
    e3e2:	b082      	sub	sp, #8
    e3e4:	af00      	add	r7, sp, #0
    e3e6:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e3e8:	4b03      	ldr	r3, [pc, #12]	; (e3f8 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e3ea:	4798      	blx	r3
    e3ec:	4603      	mov	r3, r0
	
}
    e3ee:	4618      	mov	r0, r3
    e3f0:	3708      	adds	r7, #8
    e3f2:	46bd      	mov	sp, r7
    e3f4:	bd80      	pop	{r7, pc}
    e3f6:	bf00      	nop
    e3f8:	0000bfe9 	.word	0x0000bfe9

0000e3fc <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e3fc:	b580      	push	{r7, lr}
    e3fe:	b084      	sub	sp, #16
    e400:	af00      	add	r7, sp, #0
    e402:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e404:	687b      	ldr	r3, [r7, #4]
    e406:	699b      	ldr	r3, [r3, #24]
    e408:	f1b3 3fff 	cmp.w	r3, #4294967295
    e40c:	bf14      	ite	ne
    e40e:	2301      	movne	r3, #1
    e410:	2300      	moveq	r3, #0
    e412:	b2db      	uxtb	r3, r3
    e414:	2b00      	cmp	r3, #0
    e416:	d002      	beq.n	e41e <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e418:	687b      	ldr	r3, [r7, #4]
    e41a:	699b      	ldr	r3, [r3, #24]
    e41c:	e011      	b.n	e442 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e41e:	687b      	ldr	r3, [r7, #4]
    e420:	681b      	ldr	r3, [r3, #0]
    e422:	331c      	adds	r3, #28
    e424:	681b      	ldr	r3, [r3, #0]
    e426:	f107 010f 	add.w	r1, r7, #15
    e42a:	2201      	movs	r2, #1
    e42c:	6878      	ldr	r0, [r7, #4]
    e42e:	4798      	blx	r3
    e430:	4602      	mov	r2, r0
    e432:	687b      	ldr	r3, [r7, #4]
    e434:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e436:	7bfb      	ldrb	r3, [r7, #15]
    e438:	461a      	mov	r2, r3
    e43a:	687b      	ldr	r3, [r7, #4]
    e43c:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e43e:	687b      	ldr	r3, [r7, #4]
    e440:	699b      	ldr	r3, [r3, #24]
}
    e442:	4618      	mov	r0, r3
    e444:	3710      	adds	r7, #16
    e446:	46bd      	mov	sp, r7
    e448:	bd80      	pop	{r7, pc}
	...

0000e44c <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e44c:	b580      	push	{r7, lr}
    e44e:	b086      	sub	sp, #24
    e450:	af00      	add	r7, sp, #0
    e452:	60f8      	str	r0, [r7, #12]
    e454:	60b9      	str	r1, [r7, #8]
    e456:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e458:	68fb      	ldr	r3, [r7, #12]
    e45a:	7c1b      	ldrb	r3, [r3, #16]
    e45c:	b2db      	uxtb	r3, r3
    e45e:	2b00      	cmp	r3, #0
    e460:	d02e      	beq.n	e4c0 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e462:	687a      	ldr	r2, [r7, #4]
    e464:	4613      	mov	r3, r2
    e466:	009b      	lsls	r3, r3, #2
    e468:	4413      	add	r3, r2
    e46a:	005b      	lsls	r3, r3, #1
    e46c:	461a      	mov	r2, r3
    e46e:	4918      	ldr	r1, [pc, #96]	; (e4d0 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e470:	4818      	ldr	r0, [pc, #96]	; (e4d4 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e472:	4b19      	ldr	r3, [pc, #100]	; (e4d8 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e474:	4798      	blx	r3
		rxReady=false;
    e476:	68fb      	ldr	r3, [r7, #12]
    e478:	2200      	movs	r2, #0
    e47a:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e47c:	687b      	ldr	r3, [r7, #4]
    e47e:	4619      	mov	r1, r3
    e480:	68b8      	ldr	r0, [r7, #8]
    e482:	4b16      	ldr	r3, [pc, #88]	; (e4dc <_ZN9CDC_Class8readDataEPvl+0x90>)
    e484:	4798      	blx	r3
    e486:	4603      	mov	r3, r0
    e488:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e48a:	68fb      	ldr	r3, [r7, #12]
    e48c:	7d5b      	ldrb	r3, [r3, #21]
    e48e:	b2db      	uxtb	r3, r3
    e490:	f083 0301 	eor.w	r3, r3, #1
    e494:	b2db      	uxtb	r3, r3
    e496:	2b00      	cmp	r3, #0
    e498:	d006      	beq.n	e4a8 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e49a:	68fb      	ldr	r3, [r7, #12]
    e49c:	7c1b      	ldrb	r3, [r3, #16]
    e49e:	b2db      	uxtb	r3, r3
    e4a0:	2b00      	cmp	r3, #0
    e4a2:	d001      	beq.n	e4a8 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e4a4:	2301      	movs	r3, #1
    e4a6:	e000      	b.n	e4aa <_ZN9CDC_Class8readDataEPvl+0x5e>
    e4a8:	2300      	movs	r3, #0
    e4aa:	2b00      	cmp	r3, #0
    e4ac:	d000      	beq.n	e4b0 <_ZN9CDC_Class8readDataEPvl+0x64>
    e4ae:	e7ec      	b.n	e48a <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e4b0:	4808      	ldr	r0, [pc, #32]	; (e4d4 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e4b2:	4b0b      	ldr	r3, [pc, #44]	; (e4e0 <_ZN9CDC_Class8readDataEPvl+0x94>)
    e4b4:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e4b6:	4906      	ldr	r1, [pc, #24]	; (e4d0 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e4b8:	4806      	ldr	r0, [pc, #24]	; (e4d4 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e4ba:	4b0a      	ldr	r3, [pc, #40]	; (e4e4 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e4bc:	4798      	blx	r3
    e4be:	e001      	b.n	e4c4 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e4c0:	2300      	movs	r3, #0
    e4c2:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e4c4:	7dfb      	ldrb	r3, [r7, #23]
}
    e4c6:	4618      	mov	r0, r3
    e4c8:	3718      	adds	r7, #24
    e4ca:	46bd      	mov	sp, r7
    e4cc:	bd80      	pop	{r7, pc}
    e4ce:	bf00      	nop
    e4d0:	0000e239 	.word	0x0000e239
    e4d4:	20002d40 	.word	0x20002d40
    e4d8:	0000df2d 	.word	0x0000df2d
    e4dc:	0000bec5 	.word	0x0000bec5
    e4e0:	0000de59 	.word	0x0000de59
    e4e4:	0000ded5 	.word	0x0000ded5

0000e4e8 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    e4e8:	b580      	push	{r7, lr}
    e4ea:	b084      	sub	sp, #16
    e4ec:	af00      	add	r7, sp, #0
    e4ee:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e4f0:	687b      	ldr	r3, [r7, #4]
    e4f2:	2200      	movs	r2, #0
    e4f4:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e4f6:	f107 030f 	add.w	r3, r7, #15
    e4fa:	2101      	movs	r1, #1
    e4fc:	4618      	mov	r0, r3
    e4fe:	4b08      	ldr	r3, [pc, #32]	; (e520 <_ZN9CDC_Class4readEv+0x38>)
    e500:	4798      	blx	r3
	while(!rxReady);
    e502:	687b      	ldr	r3, [r7, #4]
    e504:	7d5b      	ldrb	r3, [r3, #21]
    e506:	b2db      	uxtb	r3, r3
    e508:	f083 0301 	eor.w	r3, r3, #1
    e50c:	b2db      	uxtb	r3, r3
    e50e:	2b00      	cmp	r3, #0
    e510:	d000      	beq.n	e514 <_ZN9CDC_Class4readEv+0x2c>
    e512:	e7f6      	b.n	e502 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e514:	7bfb      	ldrb	r3, [r7, #15]
}
    e516:	4618      	mov	r0, r3
    e518:	3710      	adds	r7, #16
    e51a:	46bd      	mov	sp, r7
    e51c:	bd80      	pop	{r7, pc}
    e51e:	bf00      	nop
    e520:	0000bec5 	.word	0x0000bec5

0000e524 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e524:	b580      	push	{r7, lr}
    e526:	b082      	sub	sp, #8
    e528:	af00      	add	r7, sp, #0
    e52a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e52c:	687b      	ldr	r3, [r7, #4]
    e52e:	331c      	adds	r3, #28
    e530:	2140      	movs	r1, #64	; 0x40
    e532:	4618      	mov	r0, r3
    e534:	4b02      	ldr	r3, [pc, #8]	; (e540 <_ZN9CDC_Class5flushEv+0x1c>)
    e536:	4798      	blx	r3
}
    e538:	bf00      	nop
    e53a:	3708      	adds	r7, #8
    e53c:	46bd      	mov	sp, r7
    e53e:	bd80      	pop	{r7, pc}
    e540:	0000bf09 	.word	0x0000bf09

0000e544 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e544:	b580      	push	{r7, lr}
    e546:	b082      	sub	sp, #8
    e548:	af00      	add	r7, sp, #0
    e54a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e54c:	4b02      	ldr	r3, [pc, #8]	; (e558 <_ZN9CDC_Class5clearEv+0x14>)
    e54e:	4798      	blx	r3
}
    e550:	bf00      	nop
    e552:	3708      	adds	r7, #8
    e554:	46bd      	mov	sp, r7
    e556:	bd80      	pop	{r7, pc}
    e558:	0000bf4d 	.word	0x0000bf4d

0000e55c <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e55c:	b580      	push	{r7, lr}
    e55e:	b082      	sub	sp, #8
    e560:	af00      	add	r7, sp, #0
    e562:	6078      	str	r0, [r7, #4]
    e564:	460b      	mov	r3, r1
    e566:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e568:	687b      	ldr	r3, [r7, #4]
    e56a:	7c1b      	ldrb	r3, [r3, #16]
    e56c:	b2db      	uxtb	r3, r3
    e56e:	2b00      	cmp	r3, #0
    e570:	d012      	beq.n	e598 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e572:	687b      	ldr	r3, [r7, #4]
    e574:	7d1b      	ldrb	r3, [r3, #20]
    e576:	b2db      	uxtb	r3, r3
    e578:	f083 0301 	eor.w	r3, r3, #1
    e57c:	b2db      	uxtb	r3, r3
    e57e:	2b00      	cmp	r3, #0
    e580:	d000      	beq.n	e584 <_ZN9CDC_Class5writeEh+0x28>
    e582:	e7f6      	b.n	e572 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e584:	687b      	ldr	r3, [r7, #4]
    e586:	681b      	ldr	r3, [r3, #0]
    e588:	3324      	adds	r3, #36	; 0x24
    e58a:	681b      	ldr	r3, [r3, #0]
    e58c:	1cf9      	adds	r1, r7, #3
    e58e:	2201      	movs	r2, #1
    e590:	6878      	ldr	r0, [r7, #4]
    e592:	4798      	blx	r3
    e594:	4603      	mov	r3, r0
    e596:	e000      	b.n	e59a <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e598:	2300      	movs	r3, #0
	}
		
}
    e59a:	4618      	mov	r0, r3
    e59c:	3708      	adds	r7, #8
    e59e:	46bd      	mov	sp, r7
    e5a0:	bd80      	pop	{r7, pc}
	...

0000e5a4 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e5a4:	b580      	push	{r7, lr}
    e5a6:	b086      	sub	sp, #24
    e5a8:	af00      	add	r7, sp, #0
    e5aa:	60f8      	str	r0, [r7, #12]
    e5ac:	60b9      	str	r1, [r7, #8]
    e5ae:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e5b0:	68fb      	ldr	r3, [r7, #12]
    e5b2:	7c1b      	ldrb	r3, [r3, #16]
    e5b4:	b2db      	uxtb	r3, r3
    e5b6:	2b00      	cmp	r3, #0
    e5b8:	d02f      	beq.n	e61a <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e5ba:	687a      	ldr	r2, [r7, #4]
    e5bc:	4613      	mov	r3, r2
    e5be:	009b      	lsls	r3, r3, #2
    e5c0:	4413      	add	r3, r2
    e5c2:	005b      	lsls	r3, r3, #1
    e5c4:	461a      	mov	r2, r3
    e5c6:	4917      	ldr	r1, [pc, #92]	; (e624 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e5c8:	4817      	ldr	r0, [pc, #92]	; (e628 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e5ca:	4b18      	ldr	r3, [pc, #96]	; (e62c <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e5cc:	4798      	blx	r3
		txReady=false;
    e5ce:	68fb      	ldr	r3, [r7, #12]
    e5d0:	2200      	movs	r2, #0
    e5d2:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e5d4:	687b      	ldr	r3, [r7, #4]
    e5d6:	4619      	mov	r1, r3
    e5d8:	68b8      	ldr	r0, [r7, #8]
    e5da:	4b15      	ldr	r3, [pc, #84]	; (e630 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e5dc:	4798      	blx	r3
    e5de:	4603      	mov	r3, r0
    e5e0:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e5e2:	68fb      	ldr	r3, [r7, #12]
    e5e4:	7d1b      	ldrb	r3, [r3, #20]
    e5e6:	b2db      	uxtb	r3, r3
    e5e8:	f083 0301 	eor.w	r3, r3, #1
    e5ec:	b2db      	uxtb	r3, r3
    e5ee:	2b00      	cmp	r3, #0
    e5f0:	d006      	beq.n	e600 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e5f2:	68fb      	ldr	r3, [r7, #12]
    e5f4:	7c1b      	ldrb	r3, [r3, #16]
    e5f6:	b2db      	uxtb	r3, r3
    e5f8:	2b00      	cmp	r3, #0
    e5fa:	d001      	beq.n	e600 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e5fc:	2301      	movs	r3, #1
    e5fe:	e000      	b.n	e602 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e600:	2300      	movs	r3, #0
    e602:	2b00      	cmp	r3, #0
    e604:	d000      	beq.n	e608 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e606:	e7ec      	b.n	e5e2 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e608:	4807      	ldr	r0, [pc, #28]	; (e628 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e60a:	4b0a      	ldr	r3, [pc, #40]	; (e634 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e60c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e60e:	4905      	ldr	r1, [pc, #20]	; (e624 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e610:	4805      	ldr	r0, [pc, #20]	; (e628 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e612:	4b09      	ldr	r3, [pc, #36]	; (e638 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e614:	4798      	blx	r3
		return r;
    e616:	697b      	ldr	r3, [r7, #20]
    e618:	e000      	b.n	e61c <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e61a:	2300      	movs	r3, #0
	}
	

}
    e61c:	4618      	mov	r0, r3
    e61e:	3718      	adds	r7, #24
    e620:	46bd      	mov	sp, r7
    e622:	bd80      	pop	{r7, pc}
    e624:	0000e239 	.word	0x0000e239
    e628:	20002d40 	.word	0x20002d40
    e62c:	0000df2d 	.word	0x0000df2d
    e630:	0000bf09 	.word	0x0000bf09
    e634:	0000de59 	.word	0x0000de59
    e638:	0000ded5 	.word	0x0000ded5

0000e63c <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e63c:	b580      	push	{r7, lr}
    e63e:	b086      	sub	sp, #24
    e640:	af00      	add	r7, sp, #0
    e642:	60f8      	str	r0, [r7, #12]
    e644:	60b9      	str	r1, [r7, #8]
    e646:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e648:	68fb      	ldr	r3, [r7, #12]
    e64a:	2200      	movs	r2, #0
    e64c:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e64e:	68fb      	ldr	r3, [r7, #12]
    e650:	7c1b      	ldrb	r3, [r3, #16]
    e652:	b2db      	uxtb	r3, r3
    e654:	2b00      	cmp	r3, #0
    e656:	d02a      	beq.n	e6ae <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e658:	687a      	ldr	r2, [r7, #4]
    e65a:	4613      	mov	r3, r2
    e65c:	009b      	lsls	r3, r3, #2
    e65e:	4413      	add	r3, r2
    e660:	005b      	lsls	r3, r3, #1
    e662:	461a      	mov	r2, r3
    e664:	4915      	ldr	r1, [pc, #84]	; (e6bc <_ZN9CDC_Class5writeEPKhj+0x80>)
    e666:	4816      	ldr	r0, [pc, #88]	; (e6c0 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e668:	4b16      	ldr	r3, [pc, #88]	; (e6c4 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e66a:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e66c:	6879      	ldr	r1, [r7, #4]
    e66e:	68b8      	ldr	r0, [r7, #8]
    e670:	4b15      	ldr	r3, [pc, #84]	; (e6c8 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e672:	4798      	blx	r3
    e674:	4603      	mov	r3, r0
    e676:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e678:	68fb      	ldr	r3, [r7, #12]
    e67a:	7d1b      	ldrb	r3, [r3, #20]
    e67c:	b2db      	uxtb	r3, r3
    e67e:	f083 0301 	eor.w	r3, r3, #1
    e682:	b2db      	uxtb	r3, r3
    e684:	2b00      	cmp	r3, #0
    e686:	d006      	beq.n	e696 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e688:	68fb      	ldr	r3, [r7, #12]
    e68a:	7c1b      	ldrb	r3, [r3, #16]
    e68c:	b2db      	uxtb	r3, r3
    e68e:	2b00      	cmp	r3, #0
    e690:	d001      	beq.n	e696 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e692:	2301      	movs	r3, #1
    e694:	e000      	b.n	e698 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e696:	2300      	movs	r3, #0
    e698:	2b00      	cmp	r3, #0
    e69a:	d000      	beq.n	e69e <_ZN9CDC_Class5writeEPKhj+0x62>
    e69c:	e7ec      	b.n	e678 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e69e:	4808      	ldr	r0, [pc, #32]	; (e6c0 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e6a0:	4b0a      	ldr	r3, [pc, #40]	; (e6cc <_ZN9CDC_Class5writeEPKhj+0x90>)
    e6a2:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e6a4:	4905      	ldr	r1, [pc, #20]	; (e6bc <_ZN9CDC_Class5writeEPKhj+0x80>)
    e6a6:	4806      	ldr	r0, [pc, #24]	; (e6c0 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e6a8:	4b09      	ldr	r3, [pc, #36]	; (e6d0 <_ZN9CDC_Class5writeEPKhj+0x94>)
    e6aa:	4798      	blx	r3
    e6ac:	e001      	b.n	e6b2 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e6ae:	2300      	movs	r3, #0
    e6b0:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e6b2:	697b      	ldr	r3, [r7, #20]
}
    e6b4:	4618      	mov	r0, r3
    e6b6:	3718      	adds	r7, #24
    e6b8:	46bd      	mov	sp, r7
    e6ba:	bd80      	pop	{r7, pc}
    e6bc:	0000e239 	.word	0x0000e239
    e6c0:	20002d40 	.word	0x20002d40
    e6c4:	0000df2d 	.word	0x0000df2d
    e6c8:	0000bf09 	.word	0x0000bf09
    e6cc:	0000de59 	.word	0x0000de59
    e6d0:	0000ded5 	.word	0x0000ded5

0000e6d4 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e6d4:	b480      	push	{r7}
    e6d6:	b083      	sub	sp, #12
    e6d8:	af00      	add	r7, sp, #0
    e6da:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e6dc:	687b      	ldr	r3, [r7, #4]
    e6de:	7d5b      	ldrb	r3, [r3, #21]
    e6e0:	b2db      	uxtb	r3, r3
    e6e2:	2b00      	cmp	r3, #0
    e6e4:	d006      	beq.n	e6f4 <_ZN9CDC_Class9availableEv+0x20>
    e6e6:	687b      	ldr	r3, [r7, #4]
    e6e8:	7d1b      	ldrb	r3, [r3, #20]
    e6ea:	b2db      	uxtb	r3, r3
    e6ec:	2b00      	cmp	r3, #0
    e6ee:	d001      	beq.n	e6f4 <_ZN9CDC_Class9availableEv+0x20>
    e6f0:	2301      	movs	r3, #1
    e6f2:	e000      	b.n	e6f6 <_ZN9CDC_Class9availableEv+0x22>
    e6f4:	2300      	movs	r3, #0
    e6f6:	2b00      	cmp	r3, #0
    e6f8:	d001      	beq.n	e6fe <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e6fa:	2301      	movs	r3, #1
    e6fc:	e000      	b.n	e700 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e6fe:	2300      	movs	r3, #0
	}
	
}
    e700:	4618      	mov	r0, r3
    e702:	370c      	adds	r7, #12
    e704:	46bd      	mov	sp, r7
    e706:	bc80      	pop	{r7}
    e708:	4770      	bx	lr
	...

0000e70c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e70c:	b580      	push	{r7, lr}
    e70e:	b082      	sub	sp, #8
    e710:	af00      	add	r7, sp, #0
    e712:	6078      	str	r0, [r7, #4]
    e714:	6039      	str	r1, [r7, #0]
    e716:	687b      	ldr	r3, [r7, #4]
    e718:	2b01      	cmp	r3, #1
    e71a:	d14b      	bne.n	e7b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>
    e71c:	683b      	ldr	r3, [r7, #0]
    e71e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e722:	4293      	cmp	r3, r2
    e724:	d146      	bne.n	e7b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e726:	4925      	ldr	r1, [pc, #148]	; (e7bc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e728:	4825      	ldr	r0, [pc, #148]	; (e7c0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e72a:	4b26      	ldr	r3, [pc, #152]	; (e7c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e72c:	4798      	blx	r3
    e72e:	4a26      	ldr	r2, [pc, #152]	; (e7c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e730:	4926      	ldr	r1, [pc, #152]	; (e7cc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e732:	4823      	ldr	r0, [pc, #140]	; (e7c0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e734:	4b26      	ldr	r3, [pc, #152]	; (e7d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e736:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e738:	4926      	ldr	r1, [pc, #152]	; (e7d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e73a:	4827      	ldr	r0, [pc, #156]	; (e7d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e73c:	4b21      	ldr	r3, [pc, #132]	; (e7c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e73e:	4798      	blx	r3
    e740:	4a21      	ldr	r2, [pc, #132]	; (e7c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e742:	4922      	ldr	r1, [pc, #136]	; (e7cc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e744:	4824      	ldr	r0, [pc, #144]	; (e7d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e746:	4b22      	ldr	r3, [pc, #136]	; (e7d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e748:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e74a:	4924      	ldr	r1, [pc, #144]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e74c:	4824      	ldr	r0, [pc, #144]	; (e7e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e74e:	4b1d      	ldr	r3, [pc, #116]	; (e7c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e750:	4798      	blx	r3
    e752:	4a1d      	ldr	r2, [pc, #116]	; (e7c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e754:	491d      	ldr	r1, [pc, #116]	; (e7cc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e756:	4822      	ldr	r0, [pc, #136]	; (e7e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e758:	4b1d      	ldr	r3, [pc, #116]	; (e7d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e75a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e75c:	4921      	ldr	r1, [pc, #132]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e75e:	4822      	ldr	r0, [pc, #136]	; (e7e8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e760:	4b18      	ldr	r3, [pc, #96]	; (e7c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e762:	4798      	blx	r3
    e764:	4a18      	ldr	r2, [pc, #96]	; (e7c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e766:	4919      	ldr	r1, [pc, #100]	; (e7cc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e768:	481f      	ldr	r0, [pc, #124]	; (e7e8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e76a:	4b19      	ldr	r3, [pc, #100]	; (e7d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e76c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e76e:	491f      	ldr	r1, [pc, #124]	; (e7ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e770:	481f      	ldr	r0, [pc, #124]	; (e7f0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e772:	4b14      	ldr	r3, [pc, #80]	; (e7c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e774:	4798      	blx	r3
    e776:	4a14      	ldr	r2, [pc, #80]	; (e7c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e778:	4914      	ldr	r1, [pc, #80]	; (e7cc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e77a:	481d      	ldr	r0, [pc, #116]	; (e7f0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e77c:	4b14      	ldr	r3, [pc, #80]	; (e7d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e77e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e780:	491c      	ldr	r1, [pc, #112]	; (e7f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e782:	481d      	ldr	r0, [pc, #116]	; (e7f8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e784:	4b0f      	ldr	r3, [pc, #60]	; (e7c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e786:	4798      	blx	r3
    e788:	4a0f      	ldr	r2, [pc, #60]	; (e7c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e78a:	4910      	ldr	r1, [pc, #64]	; (e7cc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e78c:	481a      	ldr	r0, [pc, #104]	; (e7f8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e78e:	4b10      	ldr	r3, [pc, #64]	; (e7d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e790:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e792:	491a      	ldr	r1, [pc, #104]	; (e7fc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e794:	481a      	ldr	r0, [pc, #104]	; (e800 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e796:	4b0b      	ldr	r3, [pc, #44]	; (e7c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e798:	4798      	blx	r3
    e79a:	4a0b      	ldr	r2, [pc, #44]	; (e7c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e79c:	490b      	ldr	r1, [pc, #44]	; (e7cc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e79e:	4818      	ldr	r0, [pc, #96]	; (e800 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e7a0:	4b0b      	ldr	r3, [pc, #44]	; (e7d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e7a2:	4798      	blx	r3
    e7a4:	4817      	ldr	r0, [pc, #92]	; (e804 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e7a6:	4b18      	ldr	r3, [pc, #96]	; (e808 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e7a8:	4798      	blx	r3
    e7aa:	4a07      	ldr	r2, [pc, #28]	; (e7c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e7ac:	4917      	ldr	r1, [pc, #92]	; (e80c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e7ae:	4815      	ldr	r0, [pc, #84]	; (e804 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e7b0:	4b07      	ldr	r3, [pc, #28]	; (e7d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e7b2:	4798      	blx	r3
    e7b4:	bf00      	nop
    e7b6:	3708      	adds	r7, #8
    e7b8:	46bd      	mov	sp, r7
    e7ba:	bd80      	pop	{r7, pc}
    e7bc:	2000a368 	.word	0x2000a368
    e7c0:	20002ca0 	.word	0x20002ca0
    e7c4:	0000dcf9 	.word	0x0000dcf9
    e7c8:	20000000 	.word	0x20000000
    e7cc:	0000dd31 	.word	0x0000dd31
    e7d0:	0000eeed 	.word	0x0000eeed
    e7d4:	2000a3fc 	.word	0x2000a3fc
    e7d8:	20002cc0 	.word	0x20002cc0
    e7dc:	2000a500 	.word	0x2000a500
    e7e0:	20002ce0 	.word	0x20002ce0
    e7e4:	2000a41c 	.word	0x2000a41c
    e7e8:	20002d00 	.word	0x20002d00
    e7ec:	2000a4c0 	.word	0x2000a4c0
    e7f0:	20002d20 	.word	0x20002d20
    e7f4:	2000a4e0 	.word	0x2000a4e0
    e7f8:	20002d40 	.word	0x20002d40
    e7fc:	2000a3d8 	.word	0x2000a3d8
    e800:	20002d60 	.word	0x20002d60
    e804:	20002d84 	.word	0x20002d84
    e808:	0000e329 	.word	0x0000e329
    e80c:	0000e371 	.word	0x0000e371

0000e810 <_GLOBAL__sub_I_ptrCDCClass>:
    e810:	b580      	push	{r7, lr}
    e812:	af00      	add	r7, sp, #0
    e814:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e818:	2001      	movs	r0, #1
    e81a:	4b01      	ldr	r3, [pc, #4]	; (e820 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e81c:	4798      	blx	r3
    e81e:	bd80      	pop	{r7, pc}
    e820:	0000e70d 	.word	0x0000e70d

0000e824 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e824:	b590      	push	{r4, r7, lr}
    e826:	b083      	sub	sp, #12
    e828:	af00      	add	r7, sp, #0
    e82a:	6078      	str	r0, [r7, #4]
    e82c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e82e:	683b      	ldr	r3, [r7, #0]
    e830:	2b00      	cmp	r3, #0
    e832:	d101      	bne.n	e838 <_ZN5Print5writeEPKc+0x14>
    e834:	2300      	movs	r3, #0
    e836:	e00c      	b.n	e852 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e838:	687b      	ldr	r3, [r7, #4]
    e83a:	681b      	ldr	r3, [r3, #0]
    e83c:	3304      	adds	r3, #4
    e83e:	681c      	ldr	r4, [r3, #0]
    e840:	6838      	ldr	r0, [r7, #0]
    e842:	4b06      	ldr	r3, [pc, #24]	; (e85c <_ZN5Print5writeEPKc+0x38>)
    e844:	4798      	blx	r3
    e846:	4603      	mov	r3, r0
    e848:	461a      	mov	r2, r3
    e84a:	6839      	ldr	r1, [r7, #0]
    e84c:	6878      	ldr	r0, [r7, #4]
    e84e:	47a0      	blx	r4
    e850:	4603      	mov	r3, r0
    }
    e852:	4618      	mov	r0, r3
    e854:	370c      	adds	r7, #12
    e856:	46bd      	mov	sp, r7
    e858:	bd90      	pop	{r4, r7, pc}
    e85a:	bf00      	nop
    e85c:	0000f141 	.word	0x0000f141

0000e860 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e860:	b580      	push	{r7, lr}
    e862:	b086      	sub	sp, #24
    e864:	af00      	add	r7, sp, #0
    e866:	60f8      	str	r0, [r7, #12]
    e868:	60b9      	str	r1, [r7, #8]
    e86a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e86c:	2300      	movs	r3, #0
    e86e:	617b      	str	r3, [r7, #20]
  while (size--) {
    e870:	687b      	ldr	r3, [r7, #4]
    e872:	1e5a      	subs	r2, r3, #1
    e874:	607a      	str	r2, [r7, #4]
    e876:	2b00      	cmp	r3, #0
    e878:	bf14      	ite	ne
    e87a:	2301      	movne	r3, #1
    e87c:	2300      	moveq	r3, #0
    e87e:	b2db      	uxtb	r3, r3
    e880:	2b00      	cmp	r3, #0
    e882:	d016      	beq.n	e8b2 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e884:	68fb      	ldr	r3, [r7, #12]
    e886:	681b      	ldr	r3, [r3, #0]
    e888:	681a      	ldr	r2, [r3, #0]
    e88a:	68bb      	ldr	r3, [r7, #8]
    e88c:	1c59      	adds	r1, r3, #1
    e88e:	60b9      	str	r1, [r7, #8]
    e890:	781b      	ldrb	r3, [r3, #0]
    e892:	4619      	mov	r1, r3
    e894:	68f8      	ldr	r0, [r7, #12]
    e896:	4790      	blx	r2
    e898:	4603      	mov	r3, r0
    e89a:	2b00      	cmp	r3, #0
    e89c:	bf14      	ite	ne
    e89e:	2301      	movne	r3, #1
    e8a0:	2300      	moveq	r3, #0
    e8a2:	b2db      	uxtb	r3, r3
    e8a4:	2b00      	cmp	r3, #0
    e8a6:	d003      	beq.n	e8b0 <_ZN5Print5writeEPKhj+0x50>
    e8a8:	697b      	ldr	r3, [r7, #20]
    e8aa:	3301      	adds	r3, #1
    e8ac:	617b      	str	r3, [r7, #20]
  while (size--) {
    e8ae:	e7df      	b.n	e870 <_ZN5Print5writeEPKhj+0x10>
    else break;
    e8b0:	bf00      	nop
  }
  return n;
    e8b2:	697b      	ldr	r3, [r7, #20]
}
    e8b4:	4618      	mov	r0, r3
    e8b6:	3718      	adds	r7, #24
    e8b8:	46bd      	mov	sp, r7
    e8ba:	bd80      	pop	{r7, pc}

0000e8bc <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    e8bc:	b580      	push	{r7, lr}
    e8be:	b082      	sub	sp, #8
    e8c0:	af00      	add	r7, sp, #0
    e8c2:	6078      	str	r0, [r7, #4]
    e8c4:	6039      	str	r1, [r7, #0]
  return write(str);
    e8c6:	6839      	ldr	r1, [r7, #0]
    e8c8:	6878      	ldr	r0, [r7, #4]
    e8ca:	4b03      	ldr	r3, [pc, #12]	; (e8d8 <_ZN5Print5printEPKc+0x1c>)
    e8cc:	4798      	blx	r3
    e8ce:	4603      	mov	r3, r0
}
    e8d0:	4618      	mov	r0, r3
    e8d2:	3708      	adds	r7, #8
    e8d4:	46bd      	mov	sp, r7
    e8d6:	bd80      	pop	{r7, pc}
    e8d8:	0000e825 	.word	0x0000e825

0000e8dc <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    e8dc:	b580      	push	{r7, lr}
    e8de:	b082      	sub	sp, #8
    e8e0:	af00      	add	r7, sp, #0
    e8e2:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    e8e4:	4904      	ldr	r1, [pc, #16]	; (e8f8 <_ZN5Print7printlnEv+0x1c>)
    e8e6:	6878      	ldr	r0, [r7, #4]
    e8e8:	4b04      	ldr	r3, [pc, #16]	; (e8fc <_ZN5Print7printlnEv+0x20>)
    e8ea:	4798      	blx	r3
    e8ec:	4603      	mov	r3, r0
}
    e8ee:	4618      	mov	r0, r3
    e8f0:	3708      	adds	r7, #8
    e8f2:	46bd      	mov	sp, r7
    e8f4:	bd80      	pop	{r7, pc}
    e8f6:	bf00      	nop
    e8f8:	0000f864 	.word	0x0000f864
    e8fc:	0000e825 	.word	0x0000e825

0000e900 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    e900:	b580      	push	{r7, lr}
    e902:	b084      	sub	sp, #16
    e904:	af00      	add	r7, sp, #0
    e906:	6078      	str	r0, [r7, #4]
    e908:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
    e90a:	6839      	ldr	r1, [r7, #0]
    e90c:	6878      	ldr	r0, [r7, #4]
    e90e:	4b07      	ldr	r3, [pc, #28]	; (e92c <_ZN5Print7printlnEPKc+0x2c>)
    e910:	4798      	blx	r3
    e912:	60f8      	str	r0, [r7, #12]
  n += println();
    e914:	6878      	ldr	r0, [r7, #4]
    e916:	4b06      	ldr	r3, [pc, #24]	; (e930 <_ZN5Print7printlnEPKc+0x30>)
    e918:	4798      	blx	r3
    e91a:	4602      	mov	r2, r0
    e91c:	68fb      	ldr	r3, [r7, #12]
    e91e:	4413      	add	r3, r2
    e920:	60fb      	str	r3, [r7, #12]
  return n;
    e922:	68fb      	ldr	r3, [r7, #12]
}
    e924:	4618      	mov	r0, r3
    e926:	3710      	adds	r7, #16
    e928:	46bd      	mov	sp, r7
    e92a:	bd80      	pop	{r7, pc}
    e92c:	0000e8bd 	.word	0x0000e8bd
    e930:	0000e8dd 	.word	0x0000e8dd

0000e934 <hri_port_read_DIR_reg>:
{
    e934:	b480      	push	{r7}
    e936:	b083      	sub	sp, #12
    e938:	af00      	add	r7, sp, #0
    e93a:	6078      	str	r0, [r7, #4]
    e93c:	460b      	mov	r3, r1
    e93e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e940:	78fb      	ldrb	r3, [r7, #3]
    e942:	687a      	ldr	r2, [r7, #4]
    e944:	01db      	lsls	r3, r3, #7
    e946:	4413      	add	r3, r2
    e948:	681b      	ldr	r3, [r3, #0]
}
    e94a:	4618      	mov	r0, r3
    e94c:	370c      	adds	r7, #12
    e94e:	46bd      	mov	sp, r7
    e950:	bc80      	pop	{r7}
    e952:	4770      	bx	lr

0000e954 <hri_port_read_OUT_reg>:
{
    e954:	b480      	push	{r7}
    e956:	b083      	sub	sp, #12
    e958:	af00      	add	r7, sp, #0
    e95a:	6078      	str	r0, [r7, #4]
    e95c:	460b      	mov	r3, r1
    e95e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e960:	78fb      	ldrb	r3, [r7, #3]
    e962:	687a      	ldr	r2, [r7, #4]
    e964:	01db      	lsls	r3, r3, #7
    e966:	4413      	add	r3, r2
    e968:	3310      	adds	r3, #16
    e96a:	681b      	ldr	r3, [r3, #0]
}
    e96c:	4618      	mov	r0, r3
    e96e:	370c      	adds	r7, #12
    e970:	46bd      	mov	sp, r7
    e972:	bc80      	pop	{r7}
    e974:	4770      	bx	lr

0000e976 <hri_port_read_IN_reg>:
{
    e976:	b480      	push	{r7}
    e978:	b083      	sub	sp, #12
    e97a:	af00      	add	r7, sp, #0
    e97c:	6078      	str	r0, [r7, #4]
    e97e:	460b      	mov	r3, r1
    e980:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e982:	78fb      	ldrb	r3, [r7, #3]
    e984:	687a      	ldr	r2, [r7, #4]
    e986:	01db      	lsls	r3, r3, #7
    e988:	4413      	add	r3, r2
    e98a:	3320      	adds	r3, #32
    e98c:	681b      	ldr	r3, [r3, #0]
}
    e98e:	4618      	mov	r0, r3
    e990:	370c      	adds	r7, #12
    e992:	46bd      	mov	sp, r7
    e994:	bc80      	pop	{r7}
    e996:	4770      	bx	lr

0000e998 <_gpio_get_level>:
{
    e998:	b580      	push	{r7, lr}
    e99a:	b086      	sub	sp, #24
    e99c:	af00      	add	r7, sp, #0
    e99e:	4603      	mov	r3, r0
    e9a0:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
    e9a2:	f107 030c 	add.w	r3, r7, #12
    e9a6:	4618      	mov	r0, r3
    e9a8:	4b13      	ldr	r3, [pc, #76]	; (e9f8 <_gpio_get_level+0x60>)
    e9aa:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e9ac:	79fb      	ldrb	r3, [r7, #7]
    e9ae:	4619      	mov	r1, r3
    e9b0:	4812      	ldr	r0, [pc, #72]	; (e9fc <_gpio_get_level+0x64>)
    e9b2:	4b13      	ldr	r3, [pc, #76]	; (ea00 <_gpio_get_level+0x68>)
    e9b4:	4798      	blx	r3
    e9b6:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e9b8:	79fb      	ldrb	r3, [r7, #7]
    e9ba:	4619      	mov	r1, r3
    e9bc:	480f      	ldr	r0, [pc, #60]	; (e9fc <_gpio_get_level+0x64>)
    e9be:	4b11      	ldr	r3, [pc, #68]	; (ea04 <_gpio_get_level+0x6c>)
    e9c0:	4798      	blx	r3
    e9c2:	4602      	mov	r2, r0
    e9c4:	697b      	ldr	r3, [r7, #20]
    e9c6:	43db      	mvns	r3, r3
    e9c8:	4013      	ands	r3, r2
    e9ca:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e9cc:	79fb      	ldrb	r3, [r7, #7]
    e9ce:	4619      	mov	r1, r3
    e9d0:	480a      	ldr	r0, [pc, #40]	; (e9fc <_gpio_get_level+0x64>)
    e9d2:	4b0d      	ldr	r3, [pc, #52]	; (ea08 <_gpio_get_level+0x70>)
    e9d4:	4798      	blx	r3
    e9d6:	4602      	mov	r2, r0
    e9d8:	697b      	ldr	r3, [r7, #20]
    e9da:	4013      	ands	r3, r2
    e9dc:	693a      	ldr	r2, [r7, #16]
    e9de:	4313      	orrs	r3, r2
    e9e0:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    e9e2:	f107 030c 	add.w	r3, r7, #12
    e9e6:	4618      	mov	r0, r3
    e9e8:	4b08      	ldr	r3, [pc, #32]	; (ea0c <_gpio_get_level+0x74>)
    e9ea:	4798      	blx	r3
	return tmp;
    e9ec:	693b      	ldr	r3, [r7, #16]
}
    e9ee:	4618      	mov	r0, r3
    e9f0:	3718      	adds	r7, #24
    e9f2:	46bd      	mov	sp, r7
    e9f4:	bd80      	pop	{r7, pc}
    e9f6:	bf00      	nop
    e9f8:	0000b0e5 	.word	0x0000b0e5
    e9fc:	41008000 	.word	0x41008000
    ea00:	0000e935 	.word	0x0000e935
    ea04:	0000e977 	.word	0x0000e977
    ea08:	0000e955 	.word	0x0000e955
    ea0c:	0000b10b 	.word	0x0000b10b

0000ea10 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    ea10:	b580      	push	{r7, lr}
    ea12:	b082      	sub	sp, #8
    ea14:	af00      	add	r7, sp, #0
    ea16:	4603      	mov	r3, r0
    ea18:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    ea1a:	79fb      	ldrb	r3, [r7, #7]
    ea1c:	115b      	asrs	r3, r3, #5
    ea1e:	b2db      	uxtb	r3, r3
    ea20:	4618      	mov	r0, r3
    ea22:	4b09      	ldr	r3, [pc, #36]	; (ea48 <gpio_get_pin_level+0x38>)
    ea24:	4798      	blx	r3
    ea26:	4601      	mov	r1, r0
    ea28:	79fb      	ldrb	r3, [r7, #7]
    ea2a:	f003 031f 	and.w	r3, r3, #31
    ea2e:	2201      	movs	r2, #1
    ea30:	fa02 f303 	lsl.w	r3, r2, r3
    ea34:	400b      	ands	r3, r1
    ea36:	2b00      	cmp	r3, #0
    ea38:	bf14      	ite	ne
    ea3a:	2301      	movne	r3, #1
    ea3c:	2300      	moveq	r3, #0
    ea3e:	b2db      	uxtb	r3, r3
}
    ea40:	4618      	mov	r0, r3
    ea42:	3708      	adds	r7, #8
    ea44:	46bd      	mov	sp, r7
    ea46:	bd80      	pop	{r7, pc}
    ea48:	0000e999 	.word	0x0000e999

0000ea4c <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    ea4c:	b480      	push	{r7}
    ea4e:	b083      	sub	sp, #12
    ea50:	af00      	add	r7, sp, #0
    ea52:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    ea54:	4b06      	ldr	r3, [pc, #24]	; (ea70 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    ea56:	681b      	ldr	r3, [r3, #0]
    ea58:	2201      	movs	r2, #1
    ea5a:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    ea5c:	4b04      	ldr	r3, [pc, #16]	; (ea70 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    ea5e:	681b      	ldr	r3, [r3, #0]
    ea60:	2200      	movs	r2, #0
    ea62:	705a      	strb	r2, [r3, #1]
}
    ea64:	bf00      	nop
    ea66:	370c      	adds	r7, #12
    ea68:	46bd      	mov	sp, r7
    ea6a:	bc80      	pop	{r7}
    ea6c:	4770      	bx	lr
    ea6e:	bf00      	nop
    ea70:	20002ec4 	.word	0x20002ec4

0000ea74 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    ea74:	b580      	push	{r7, lr}
    ea76:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    ea78:	2040      	movs	r0, #64	; 0x40
    ea7a:	4b0a      	ldr	r3, [pc, #40]	; (eaa4 <_ZL10USBPluggedv+0x30>)
    ea7c:	4798      	blx	r3
    ea7e:	4603      	mov	r3, r0
    ea80:	2b00      	cmp	r3, #0
    ea82:	d004      	beq.n	ea8e <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    ea84:	4b08      	ldr	r3, [pc, #32]	; (eaa8 <_ZL10USBPluggedv+0x34>)
    ea86:	681b      	ldr	r3, [r3, #0]
    ea88:	2201      	movs	r2, #1
    ea8a:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    ea8c:	e007      	b.n	ea9e <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    ea8e:	4b06      	ldr	r3, [pc, #24]	; (eaa8 <_ZL10USBPluggedv+0x34>)
    ea90:	681b      	ldr	r3, [r3, #0]
    ea92:	2200      	movs	r2, #0
    ea94:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    ea96:	4b04      	ldr	r3, [pc, #16]	; (eaa8 <_ZL10USBPluggedv+0x34>)
    ea98:	681b      	ldr	r3, [r3, #0]
    ea9a:	2200      	movs	r2, #0
    ea9c:	701a      	strb	r2, [r3, #0]
}
    ea9e:	bf00      	nop
    eaa0:	bd80      	pop	{r7, pc}
    eaa2:	bf00      	nop
    eaa4:	0000ea11 	.word	0x0000ea11
    eaa8:	20002ec4 	.word	0x20002ec4

0000eaac <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    eaac:	b480      	push	{r7}
    eaae:	b083      	sub	sp, #12
    eab0:	af00      	add	r7, sp, #0
    eab2:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    eab4:	4a04      	ldr	r2, [pc, #16]	; (eac8 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    eab6:	687b      	ldr	r3, [r7, #4]
    eab8:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    eaba:	687b      	ldr	r3, [r7, #4]
    eabc:	4618      	mov	r0, r3
    eabe:	370c      	adds	r7, #12
    eac0:	46bd      	mov	sp, r7
    eac2:	bc80      	pop	{r7}
    eac4:	4770      	bx	lr
    eac6:	bf00      	nop
    eac8:	20002ec4 	.word	0x20002ec4

0000eacc <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    eacc:	b480      	push	{r7}
    eace:	b083      	sub	sp, #12
    ead0:	af00      	add	r7, sp, #0
    ead2:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    ead4:	687b      	ldr	r3, [r7, #4]
    ead6:	4618      	mov	r0, r3
    ead8:	370c      	adds	r7, #12
    eada:	46bd      	mov	sp, r7
    eadc:	bc80      	pop	{r7}
    eade:	4770      	bx	lr

0000eae0 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    eae0:	b580      	push	{r7, lr}
    eae2:	b082      	sub	sp, #8
    eae4:	af00      	add	r7, sp, #0
    eae6:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    eae8:	491e      	ldr	r1, [pc, #120]	; (eb64 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    eaea:	2040      	movs	r0, #64	; 0x40
    eaec:	4b1e      	ldr	r3, [pc, #120]	; (eb68 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    eaee:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    eaf0:	481e      	ldr	r0, [pc, #120]	; (eb6c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    eaf2:	4b1f      	ldr	r3, [pc, #124]	; (eb70 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    eaf4:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    eaf6:	2040      	movs	r0, #64	; 0x40
    eaf8:	4b1e      	ldr	r3, [pc, #120]	; (eb74 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    eafa:	4798      	blx	r3
    eafc:	4603      	mov	r3, r0
    eafe:	461a      	mov	r2, r3
    eb00:	687b      	ldr	r3, [r7, #4]
    eb02:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    eb04:	687b      	ldr	r3, [r7, #4]
    eb06:	78db      	ldrb	r3, [r3, #3]
    eb08:	2b00      	cmp	r3, #0
    eb0a:	d021      	beq.n	eb50 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    eb0c:	687b      	ldr	r3, [r7, #4]
    eb0e:	2200      	movs	r2, #0
    eb10:	709a      	strb	r2, [r3, #2]
			plugged=true;
    eb12:	687b      	ldr	r3, [r7, #4]
    eb14:	2201      	movs	r2, #1
    eb16:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    eb18:	f44f 7216 	mov.w	r2, #600	; 0x258
    eb1c:	4916      	ldr	r1, [pc, #88]	; (eb78 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    eb1e:	4813      	ldr	r0, [pc, #76]	; (eb6c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    eb20:	4b16      	ldr	r3, [pc, #88]	; (eb7c <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    eb22:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    eb24:	4816      	ldr	r0, [pc, #88]	; (eb80 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    eb26:	4b17      	ldr	r3, [pc, #92]	; (eb84 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    eb28:	4798      	blx	r3
    eb2a:	4603      	mov	r3, r0
    eb2c:	f083 0301 	eor.w	r3, r3, #1
    eb30:	b2db      	uxtb	r3, r3
    eb32:	2b00      	cmp	r3, #0
    eb34:	d008      	beq.n	eb48 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    eb36:	687b      	ldr	r3, [r7, #4]
    eb38:	789b      	ldrb	r3, [r3, #2]
    eb3a:	b2db      	uxtb	r3, r3
    eb3c:	2b00      	cmp	r3, #0
    eb3e:	d0f1      	beq.n	eb24 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    eb40:	687b      	ldr	r3, [r7, #4]
    eb42:	2200      	movs	r2, #0
    eb44:	701a      	strb	r2, [r3, #0]
					return;
    eb46:	e009      	b.n	eb5c <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    eb48:	4808      	ldr	r0, [pc, #32]	; (eb6c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    eb4a:	4b0f      	ldr	r3, [pc, #60]	; (eb88 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    eb4c:	4798      	blx	r3
    eb4e:	e005      	b.n	eb5c <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    eb50:	687b      	ldr	r3, [r7, #4]
    eb52:	2200      	movs	r2, #0
    eb54:	701a      	strb	r2, [r3, #0]
			plugged=false;
    eb56:	687b      	ldr	r3, [r7, #4]
    eb58:	2200      	movs	r2, #0
    eb5a:	705a      	strb	r2, [r3, #1]
		}
		
}
    eb5c:	3708      	adds	r7, #8
    eb5e:	46bd      	mov	sp, r7
    eb60:	bd80      	pop	{r7, pc}
    eb62:	bf00      	nop
    eb64:	0000ea75 	.word	0x0000ea75
    eb68:	000022ad 	.word	0x000022ad
    eb6c:	20002e84 	.word	0x20002e84
    eb70:	0000dde5 	.word	0x0000dde5
    eb74:	0000ea11 	.word	0x0000ea11
    eb78:	0000ea4d 	.word	0x0000ea4d
    eb7c:	0000df2d 	.word	0x0000df2d
    eb80:	20002d84 	.word	0x20002d84
    eb84:	0000e3e1 	.word	0x0000e3e1
    eb88:	0000de59 	.word	0x0000de59

0000eb8c <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    eb8c:	b580      	push	{r7, lr}
    eb8e:	b082      	sub	sp, #8
    eb90:	af00      	add	r7, sp, #0
    eb92:	6078      	str	r0, [r7, #4]
    eb94:	6039      	str	r1, [r7, #0]
    eb96:	687b      	ldr	r3, [r7, #4]
    eb98:	2b01      	cmp	r3, #1
    eb9a:	d143      	bne.n	ec24 <_Z41__static_initialization_and_destruction_0ii+0x98>
    eb9c:	683b      	ldr	r3, [r7, #0]
    eb9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eba2:	4293      	cmp	r3, r2
    eba4:	d13e      	bne.n	ec24 <_Z41__static_initialization_and_destruction_0ii+0x98>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    eba6:	4921      	ldr	r1, [pc, #132]	; (ec2c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    eba8:	4821      	ldr	r0, [pc, #132]	; (ec30 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    ebaa:	4b22      	ldr	r3, [pc, #136]	; (ec34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ebac:	4798      	blx	r3
    ebae:	4a22      	ldr	r2, [pc, #136]	; (ec38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    ebb0:	4922      	ldr	r1, [pc, #136]	; (ec3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ebb2:	481f      	ldr	r0, [pc, #124]	; (ec30 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    ebb4:	4b22      	ldr	r3, [pc, #136]	; (ec40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ebb6:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    ebb8:	4922      	ldr	r1, [pc, #136]	; (ec44 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    ebba:	4823      	ldr	r0, [pc, #140]	; (ec48 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ebbc:	4b1d      	ldr	r3, [pc, #116]	; (ec34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ebbe:	4798      	blx	r3
    ebc0:	4a1d      	ldr	r2, [pc, #116]	; (ec38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    ebc2:	491e      	ldr	r1, [pc, #120]	; (ec3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ebc4:	4820      	ldr	r0, [pc, #128]	; (ec48 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ebc6:	4b1e      	ldr	r3, [pc, #120]	; (ec40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ebc8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    ebca:	4920      	ldr	r1, [pc, #128]	; (ec4c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ebcc:	4820      	ldr	r0, [pc, #128]	; (ec50 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ebce:	4b19      	ldr	r3, [pc, #100]	; (ec34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ebd0:	4798      	blx	r3
    ebd2:	4a19      	ldr	r2, [pc, #100]	; (ec38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    ebd4:	4919      	ldr	r1, [pc, #100]	; (ec3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ebd6:	481e      	ldr	r0, [pc, #120]	; (ec50 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ebd8:	4b19      	ldr	r3, [pc, #100]	; (ec40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ebda:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    ebdc:	491d      	ldr	r1, [pc, #116]	; (ec54 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ebde:	481e      	ldr	r0, [pc, #120]	; (ec58 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ebe0:	4b14      	ldr	r3, [pc, #80]	; (ec34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ebe2:	4798      	blx	r3
    ebe4:	4a14      	ldr	r2, [pc, #80]	; (ec38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    ebe6:	4915      	ldr	r1, [pc, #84]	; (ec3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ebe8:	481b      	ldr	r0, [pc, #108]	; (ec58 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    ebea:	4b15      	ldr	r3, [pc, #84]	; (ec40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ebec:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    ebee:	491b      	ldr	r1, [pc, #108]	; (ec5c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    ebf0:	481b      	ldr	r0, [pc, #108]	; (ec60 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ebf2:	4b10      	ldr	r3, [pc, #64]	; (ec34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ebf4:	4798      	blx	r3
    ebf6:	4a10      	ldr	r2, [pc, #64]	; (ec38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    ebf8:	4910      	ldr	r1, [pc, #64]	; (ec3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ebfa:	4819      	ldr	r0, [pc, #100]	; (ec60 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    ebfc:	4b10      	ldr	r3, [pc, #64]	; (ec40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ebfe:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    ec00:	4918      	ldr	r1, [pc, #96]	; (ec64 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    ec02:	4819      	ldr	r0, [pc, #100]	; (ec68 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    ec04:	4b0b      	ldr	r3, [pc, #44]	; (ec34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ec06:	4798      	blx	r3
    ec08:	4a0b      	ldr	r2, [pc, #44]	; (ec38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    ec0a:	490c      	ldr	r1, [pc, #48]	; (ec3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ec0c:	4816      	ldr	r0, [pc, #88]	; (ec68 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    ec0e:	4b0c      	ldr	r3, [pc, #48]	; (ec40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ec10:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    ec12:	4916      	ldr	r1, [pc, #88]	; (ec6c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ec14:	4816      	ldr	r0, [pc, #88]	; (ec70 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    ec16:	4b07      	ldr	r3, [pc, #28]	; (ec34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    ec18:	4798      	blx	r3
    ec1a:	4a07      	ldr	r2, [pc, #28]	; (ec38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    ec1c:	4907      	ldr	r1, [pc, #28]	; (ec3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    ec1e:	4814      	ldr	r0, [pc, #80]	; (ec70 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    ec20:	4b07      	ldr	r3, [pc, #28]	; (ec40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    ec22:	4798      	blx	r3
    ec24:	bf00      	nop
    ec26:	3708      	adds	r7, #8
    ec28:	46bd      	mov	sp, r7
    ec2a:	bd80      	pop	{r7, pc}
    ec2c:	2000a368 	.word	0x2000a368
    ec30:	20002de4 	.word	0x20002de4
    ec34:	0000dcf9 	.word	0x0000dcf9
    ec38:	20000000 	.word	0x20000000
    ec3c:	0000dd31 	.word	0x0000dd31
    ec40:	0000eeed 	.word	0x0000eeed
    ec44:	2000a3fc 	.word	0x2000a3fc
    ec48:	20002e04 	.word	0x20002e04
    ec4c:	2000a500 	.word	0x2000a500
    ec50:	20002e24 	.word	0x20002e24
    ec54:	2000a41c 	.word	0x2000a41c
    ec58:	20002e44 	.word	0x20002e44
    ec5c:	2000a4c0 	.word	0x2000a4c0
    ec60:	20002e64 	.word	0x20002e64
    ec64:	2000a4e0 	.word	0x2000a4e0
    ec68:	20002e84 	.word	0x20002e84
    ec6c:	2000a3d8 	.word	0x2000a3d8
    ec70:	20002ea4 	.word	0x20002ea4

0000ec74 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    ec74:	b580      	push	{r7, lr}
    ec76:	af00      	add	r7, sp, #0
    ec78:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec7c:	2001      	movs	r0, #1
    ec7e:	4b01      	ldr	r3, [pc, #4]	; (ec84 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    ec80:	4798      	blx	r3
    ec82:	bd80      	pop	{r7, pc}
    ec84:	0000eb8d 	.word	0x0000eb8d

0000ec88 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    ec88:	b480      	push	{r7}
    ec8a:	b083      	sub	sp, #12
    ec8c:	af00      	add	r7, sp, #0
    ec8e:	6078      	str	r0, [r7, #4]
    return (void *)0;
    ec90:	2300      	movs	r3, #0
	}
    ec92:	4618      	mov	r0, r3
    ec94:	370c      	adds	r7, #12
    ec96:	46bd      	mov	sp, r7
    ec98:	bc80      	pop	{r7}
    ec9a:	4770      	bx	lr

0000ec9c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    ec9c:	b480      	push	{r7}
    ec9e:	af00      	add	r7, sp, #0
		}
    eca0:	bf00      	nop
    eca2:	46bd      	mov	sp, r7
    eca4:	bc80      	pop	{r7}
    eca6:	4770      	bx	lr

0000eca8 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
    eca8:	4770      	bx	lr

0000ecaa <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
    ecaa:	4770      	bx	lr

0000ecac <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    ecac:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    ecae:	2302      	movs	r3, #2
    ecb0:	4801      	ldr	r0, [pc, #4]	; (ecb8 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
    ecb2:	4c02      	ldr	r4, [pc, #8]	; (ecbc <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
    ecb4:	47a0      	blx	r4
	return	w;
}
    ecb6:	bd10      	pop	{r4, pc}
    ecb8:	200025d0 	.word	0x200025d0
    ecbc:	0000d665 	.word	0x0000d665

0000ecc0 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    ecc0:	b500      	push	{lr}
    ecc2:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
    ecc4:	4b07      	ldr	r3, [pc, #28]	; (ece4 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
    ecc6:	881b      	ldrh	r3, [r3, #0]
    ecc8:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    eccc:	4b06      	ldr	r3, [pc, #24]	; (ece8 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
    ecce:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
    ecd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    ecd4:	3202      	adds	r2, #2
    ecd6:	a901      	add	r1, sp, #4
    ecd8:	4b04      	ldr	r3, [pc, #16]	; (ecec <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
    ecda:	4798      	blx	r3
	return	w;
}
    ecdc:	b003      	add	sp, #12
    ecde:	f85d fb04 	ldr.w	pc, [sp], #4
    ece2:	bf00      	nop
    ece4:	0000f8cc 	.word	0x0000f8cc
    ece8:	20002ec8 	.word	0x20002ec8
    ecec:	0000ecad 	.word	0x0000ecad

0000ecf0 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
    ecf0:	b510      	push	{r4, lr}
    ecf2:	4604      	mov	r4, r0
    ecf4:	30b8      	adds	r0, #184	; 0xb8
    ecf6:	4b03      	ldr	r3, [pc, #12]	; (ed04 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
    ecf8:	4798      	blx	r3
    ecfa:	4620      	mov	r0, r4
    ecfc:	4b02      	ldr	r3, [pc, #8]	; (ed08 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
    ecfe:	4798      	blx	r3
{
} //~MemoryManagment_Class
    ed00:	4620      	mov	r0, r4
    ed02:	bd10      	pop	{r4, pc}
    ed04:	0000eeeb 	.word	0x0000eeeb
    ed08:	0000ecab 	.word	0x0000ecab

0000ed0c <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
    ed0c:	b538      	push	{r3, r4, r5, lr}
    ed0e:	4604      	mov	r4, r0
    ed10:	4b14      	ldr	r3, [pc, #80]	; (ed64 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
    ed12:	4798      	blx	r3
    ed14:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ed18:	4b13      	ldr	r3, [pc, #76]	; (ed68 <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
    ed1a:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    ed1c:	f44f 7500 	mov.w	r5, #512	; 0x200
    ed20:	462a      	mov	r2, r5
    ed22:	2100      	movs	r1, #0
    ed24:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    ed28:	4b10      	ldr	r3, [pc, #64]	; (ed6c <_ZN17MemoryFlash_ClassC1Ev+0x60>)
    ed2a:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
    ed2c:	2300      	movs	r3, #0
    ed2e:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
    ed32:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
    ed36:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
    ed3a:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
    ed3e:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
    ed42:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
    ed46:	4a0a      	ldr	r2, [pc, #40]	; (ed70 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
    ed48:	f246 33b4 	movw	r3, #25524	; 0x63b4
    ed4c:	50e2      	str	r2, [r4, r3]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
    ed4e:	4b09      	ldr	r3, [pc, #36]	; (ed74 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
    ed50:	681b      	ldr	r3, [r3, #0]
    ed52:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
    ed56:	332c      	adds	r3, #44	; 0x2c
    ed58:	f246 32b8 	movw	r2, #25528	; 0x63b8
    ed5c:	50a3      	str	r3, [r4, r2]
} //MemoryManagment_Class
    ed5e:	4620      	mov	r0, r4
    ed60:	bd38      	pop	{r3, r4, r5, pc}
    ed62:	bf00      	nop
    ed64:	0000eca9 	.word	0x0000eca9
    ed68:	0000eee9 	.word	0x0000eee9
    ed6c:	0000f0a5 	.word	0x0000f0a5
    ed70:	20002ecc 	.word	0x20002ecc
    ed74:	20002ec8 	.word	0x20002ec8

0000ed78 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
    ed78:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
    ed7a:	480b      	ldr	r0, [pc, #44]	; (eda8 <_ZN17MemoryFlash_Class4InitEm+0x30>)
    ed7c:	4b0b      	ldr	r3, [pc, #44]	; (edac <_ZN17MemoryFlash_Class4InitEm+0x34>)
    ed7e:	4798      	blx	r3
    ed80:	b948      	cbnz	r0, ed96 <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
    ed82:	4d0b      	ldr	r5, [pc, #44]	; (edb0 <_ZN17MemoryFlash_Class4InitEm+0x38>)
    ed84:	490b      	ldr	r1, [pc, #44]	; (edb4 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
    ed86:	4628      	mov	r0, r5
    ed88:	4c0b      	ldr	r4, [pc, #44]	; (edb8 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    ed8a:	47a0      	blx	r4
    ed8c:	490b      	ldr	r1, [pc, #44]	; (edbc <_ZN17MemoryFlash_Class4InitEm+0x44>)
    ed8e:	4628      	mov	r0, r5
    ed90:	47a0      	blx	r4
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return true;
}
    ed92:	2001      	movs	r0, #1
    ed94:	bd38      	pop	{r3, r4, r5, pc}
    ed96:	4d06      	ldr	r5, [pc, #24]	; (edb0 <_ZN17MemoryFlash_Class4InitEm+0x38>)
    ed98:	4909      	ldr	r1, [pc, #36]	; (edc0 <_ZN17MemoryFlash_Class4InitEm+0x48>)
    ed9a:	4628      	mov	r0, r5
    ed9c:	4c06      	ldr	r4, [pc, #24]	; (edb8 <_ZN17MemoryFlash_Class4InitEm+0x40>)
    ed9e:	47a0      	blx	r4
    eda0:	4906      	ldr	r1, [pc, #24]	; (edbc <_ZN17MemoryFlash_Class4InitEm+0x44>)
    eda2:	4628      	mov	r0, r5
    eda4:	47a0      	blx	r4
    eda6:	e7f4      	b.n	ed92 <_ZN17MemoryFlash_Class4InitEm+0x1a>
    eda8:	200025d0 	.word	0x200025d0
    edac:	0000d5c9 	.word	0x0000d5c9
    edb0:	20002d84 	.word	0x20002d84
    edb4:	0000f8ac 	.word	0x0000f8ac
    edb8:	0000e8bd 	.word	0x0000e8bd
    edbc:	0000f34c 	.word	0x0000f34c
    edc0:	0000f88c 	.word	0x0000f88c

0000edc4 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
		  return	w;
	  }

	  return	r;
  }
   uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
    edc4:	b510      	push	{r4, lr}
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
    edc6:	f246 33b8 	movw	r3, #25528	; 0x63b8
    edca:	58c3      	ldr	r3, [r0, r3]
    edcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    edd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    edd4:	d907      	bls.n	ede6 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x22>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
    edd6:	4b0a      	ldr	r3, [pc, #40]	; (ee00 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x3c>)
    edd8:	681b      	ldr	r3, [r3, #0]
    edda:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
    edde:	332c      	adds	r3, #44	; 0x2c
			   stackpointerEventloger=addRef;
    ede0:	f246 32b8 	movw	r2, #25528	; 0x63b8
    ede4:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
    ede6:	f246 33b8 	movw	r3, #25528	; 0x63b8
    edea:	58c2      	ldr	r2, [r0, r3]
    edec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    edf0:	50c2      	str	r2, [r0, r3]
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
    edf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    edf6:	4803      	ldr	r0, [pc, #12]	; (ee04 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x40>)
    edf8:	4c03      	ldr	r4, [pc, #12]	; (ee08 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x44>)
    edfa:	47a0      	blx	r4
		   return	w;

	 
   }
    edfc:	bd10      	pop	{r4, pc}
    edfe:	bf00      	nop
    ee00:	20002ec8 	.word	0x20002ec8
    ee04:	200025d0 	.word	0x200025d0
    ee08:	0000d665 	.word	0x0000d665

0000ee0c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
    ee0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    ee10:	4c27      	ldr	r4, [pc, #156]	; (eeb0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xa4>)
    ee12:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
    ee16:	4927      	ldr	r1, [pc, #156]	; (eeb4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xa8>)
    ee18:	4628      	mov	r0, r5
    ee1a:	4f27      	ldr	r7, [pc, #156]	; (eeb8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xac>)
    ee1c:	47b8      	blx	r7
    ee1e:	4e27      	ldr	r6, [pc, #156]	; (eebc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb0>)
    ee20:	f8df 80c0 	ldr.w	r8, [pc, #192]	; eee4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>
    ee24:	4632      	mov	r2, r6
    ee26:	4641      	mov	r1, r8
    ee28:	4628      	mov	r0, r5
    ee2a:	4d25      	ldr	r5, [pc, #148]	; (eec0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
    ee2c:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    ee2e:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
    ee32:	4924      	ldr	r1, [pc, #144]	; (eec4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
    ee34:	4648      	mov	r0, r9
    ee36:	47b8      	blx	r7
    ee38:	4632      	mov	r2, r6
    ee3a:	4641      	mov	r1, r8
    ee3c:	4648      	mov	r0, r9
    ee3e:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    ee40:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
    ee44:	4920      	ldr	r1, [pc, #128]	; (eec8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
    ee46:	4648      	mov	r0, r9
    ee48:	47b8      	blx	r7
    ee4a:	4632      	mov	r2, r6
    ee4c:	4641      	mov	r1, r8
    ee4e:	4648      	mov	r0, r9
    ee50:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    ee52:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
    ee56:	491d      	ldr	r1, [pc, #116]	; (eecc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
    ee58:	4648      	mov	r0, r9
    ee5a:	47b8      	blx	r7
    ee5c:	4632      	mov	r2, r6
    ee5e:	4641      	mov	r1, r8
    ee60:	4648      	mov	r0, r9
    ee62:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    ee64:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
    ee68:	4919      	ldr	r1, [pc, #100]	; (eed0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
    ee6a:	4648      	mov	r0, r9
    ee6c:	47b8      	blx	r7
    ee6e:	4632      	mov	r2, r6
    ee70:	4641      	mov	r1, r8
    ee72:	4648      	mov	r0, r9
    ee74:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    ee76:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
    ee7a:	4916      	ldr	r1, [pc, #88]	; (eed4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
    ee7c:	4648      	mov	r0, r9
    ee7e:	47b8      	blx	r7
    ee80:	4632      	mov	r2, r6
    ee82:	4641      	mov	r1, r8
    ee84:	4648      	mov	r0, r9
    ee86:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    ee88:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
    ee8c:	4912      	ldr	r1, [pc, #72]	; (eed8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
    ee8e:	4648      	mov	r0, r9
    ee90:	47b8      	blx	r7
    ee92:	4632      	mov	r2, r6
    ee94:	4641      	mov	r1, r8
    ee96:	4648      	mov	r0, r9
    ee98:	47a8      	blx	r5
    ee9a:	3c18      	subs	r4, #24
    ee9c:	4620      	mov	r0, r4
    ee9e:	4b0f      	ldr	r3, [pc, #60]	; (eedc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
    eea0:	4798      	blx	r3
    eea2:	4632      	mov	r2, r6
    eea4:	490e      	ldr	r1, [pc, #56]	; (eee0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
    eea6:	4620      	mov	r0, r4
    eea8:	47a8      	blx	r5
    eeaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eeae:	bf00      	nop
    eeb0:	20003fc4 	.word	0x20003fc4
    eeb4:	2000a368 	.word	0x2000a368
    eeb8:	0000dcf9 	.word	0x0000dcf9
    eebc:	20000000 	.word	0x20000000
    eec0:	0000eeed 	.word	0x0000eeed
    eec4:	2000a3fc 	.word	0x2000a3fc
    eec8:	2000a500 	.word	0x2000a500
    eecc:	2000a41c 	.word	0x2000a41c
    eed0:	2000a4c0 	.word	0x2000a4c0
    eed4:	2000a4e0 	.word	0x2000a4e0
    eed8:	2000a3d8 	.word	0x2000a3d8
    eedc:	0000ed0d 	.word	0x0000ed0d
    eee0:	0000ecf1 	.word	0x0000ecf1
    eee4:	0000dd31 	.word	0x0000dd31

0000eee8 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
    eee8:	4770      	bx	lr

0000eeea <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
    eeea:	4770      	bx	lr

0000eeec <__aeabi_atexit>:
    eeec:	460b      	mov	r3, r1
    eeee:	4601      	mov	r1, r0
    eef0:	4618      	mov	r0, r3
    eef2:	f000 b801 	b.w	eef8 <__cxa_atexit>
    eef6:	bf00      	nop

0000eef8 <__cxa_atexit>:
    eef8:	4613      	mov	r3, r2
    eefa:	460a      	mov	r2, r1
    eefc:	4601      	mov	r1, r0
    eefe:	2002      	movs	r0, #2
    ef00:	f000 b98c 	b.w	f21c <__register_exitproc>

0000ef04 <ffs>:
    ef04:	b140      	cbz	r0, ef18 <ffs+0x14>
    ef06:	2300      	movs	r3, #0
    ef08:	fa40 f103 	asr.w	r1, r0, r3
    ef0c:	1c5a      	adds	r2, r3, #1
    ef0e:	07c9      	lsls	r1, r1, #31
    ef10:	4613      	mov	r3, r2
    ef12:	d5f9      	bpl.n	ef08 <ffs+0x4>
    ef14:	4610      	mov	r0, r2
    ef16:	4770      	bx	lr
    ef18:	4602      	mov	r2, r0
    ef1a:	4610      	mov	r0, r2
    ef1c:	4770      	bx	lr
    ef1e:	bf00      	nop

0000ef20 <__libc_init_array>:
    ef20:	b570      	push	{r4, r5, r6, lr}
    ef22:	4e0f      	ldr	r6, [pc, #60]	; (ef60 <__libc_init_array+0x40>)
    ef24:	4d0f      	ldr	r5, [pc, #60]	; (ef64 <__libc_init_array+0x44>)
    ef26:	1b76      	subs	r6, r6, r5
    ef28:	10b6      	asrs	r6, r6, #2
    ef2a:	bf18      	it	ne
    ef2c:	2400      	movne	r4, #0
    ef2e:	d005      	beq.n	ef3c <__libc_init_array+0x1c>
    ef30:	3401      	adds	r4, #1
    ef32:	f855 3b04 	ldr.w	r3, [r5], #4
    ef36:	4798      	blx	r3
    ef38:	42a6      	cmp	r6, r4
    ef3a:	d1f9      	bne.n	ef30 <__libc_init_array+0x10>
    ef3c:	4e0a      	ldr	r6, [pc, #40]	; (ef68 <__libc_init_array+0x48>)
    ef3e:	4d0b      	ldr	r5, [pc, #44]	; (ef6c <__libc_init_array+0x4c>)
    ef40:	1b76      	subs	r6, r6, r5
    ef42:	f000 fccb 	bl	f8dc <_init>
    ef46:	10b6      	asrs	r6, r6, #2
    ef48:	bf18      	it	ne
    ef4a:	2400      	movne	r4, #0
    ef4c:	d006      	beq.n	ef5c <__libc_init_array+0x3c>
    ef4e:	3401      	adds	r4, #1
    ef50:	f855 3b04 	ldr.w	r3, [r5], #4
    ef54:	4798      	blx	r3
    ef56:	42a6      	cmp	r6, r4
    ef58:	d1f9      	bne.n	ef4e <__libc_init_array+0x2e>
    ef5a:	bd70      	pop	{r4, r5, r6, pc}
    ef5c:	bd70      	pop	{r4, r5, r6, pc}
    ef5e:	bf00      	nop
    ef60:	0000f8e8 	.word	0x0000f8e8
    ef64:	0000f8e8 	.word	0x0000f8e8
    ef68:	0000f910 	.word	0x0000f910
    ef6c:	0000f8e8 	.word	0x0000f8e8

0000ef70 <memcpy>:
    ef70:	4684      	mov	ip, r0
    ef72:	ea41 0300 	orr.w	r3, r1, r0
    ef76:	f013 0303 	ands.w	r3, r3, #3
    ef7a:	d16d      	bne.n	f058 <memcpy+0xe8>
    ef7c:	3a40      	subs	r2, #64	; 0x40
    ef7e:	d341      	bcc.n	f004 <memcpy+0x94>
    ef80:	f851 3b04 	ldr.w	r3, [r1], #4
    ef84:	f840 3b04 	str.w	r3, [r0], #4
    ef88:	f851 3b04 	ldr.w	r3, [r1], #4
    ef8c:	f840 3b04 	str.w	r3, [r0], #4
    ef90:	f851 3b04 	ldr.w	r3, [r1], #4
    ef94:	f840 3b04 	str.w	r3, [r0], #4
    ef98:	f851 3b04 	ldr.w	r3, [r1], #4
    ef9c:	f840 3b04 	str.w	r3, [r0], #4
    efa0:	f851 3b04 	ldr.w	r3, [r1], #4
    efa4:	f840 3b04 	str.w	r3, [r0], #4
    efa8:	f851 3b04 	ldr.w	r3, [r1], #4
    efac:	f840 3b04 	str.w	r3, [r0], #4
    efb0:	f851 3b04 	ldr.w	r3, [r1], #4
    efb4:	f840 3b04 	str.w	r3, [r0], #4
    efb8:	f851 3b04 	ldr.w	r3, [r1], #4
    efbc:	f840 3b04 	str.w	r3, [r0], #4
    efc0:	f851 3b04 	ldr.w	r3, [r1], #4
    efc4:	f840 3b04 	str.w	r3, [r0], #4
    efc8:	f851 3b04 	ldr.w	r3, [r1], #4
    efcc:	f840 3b04 	str.w	r3, [r0], #4
    efd0:	f851 3b04 	ldr.w	r3, [r1], #4
    efd4:	f840 3b04 	str.w	r3, [r0], #4
    efd8:	f851 3b04 	ldr.w	r3, [r1], #4
    efdc:	f840 3b04 	str.w	r3, [r0], #4
    efe0:	f851 3b04 	ldr.w	r3, [r1], #4
    efe4:	f840 3b04 	str.w	r3, [r0], #4
    efe8:	f851 3b04 	ldr.w	r3, [r1], #4
    efec:	f840 3b04 	str.w	r3, [r0], #4
    eff0:	f851 3b04 	ldr.w	r3, [r1], #4
    eff4:	f840 3b04 	str.w	r3, [r0], #4
    eff8:	f851 3b04 	ldr.w	r3, [r1], #4
    effc:	f840 3b04 	str.w	r3, [r0], #4
    f000:	3a40      	subs	r2, #64	; 0x40
    f002:	d2bd      	bcs.n	ef80 <memcpy+0x10>
    f004:	3230      	adds	r2, #48	; 0x30
    f006:	d311      	bcc.n	f02c <memcpy+0xbc>
    f008:	f851 3b04 	ldr.w	r3, [r1], #4
    f00c:	f840 3b04 	str.w	r3, [r0], #4
    f010:	f851 3b04 	ldr.w	r3, [r1], #4
    f014:	f840 3b04 	str.w	r3, [r0], #4
    f018:	f851 3b04 	ldr.w	r3, [r1], #4
    f01c:	f840 3b04 	str.w	r3, [r0], #4
    f020:	f851 3b04 	ldr.w	r3, [r1], #4
    f024:	f840 3b04 	str.w	r3, [r0], #4
    f028:	3a10      	subs	r2, #16
    f02a:	d2ed      	bcs.n	f008 <memcpy+0x98>
    f02c:	320c      	adds	r2, #12
    f02e:	d305      	bcc.n	f03c <memcpy+0xcc>
    f030:	f851 3b04 	ldr.w	r3, [r1], #4
    f034:	f840 3b04 	str.w	r3, [r0], #4
    f038:	3a04      	subs	r2, #4
    f03a:	d2f9      	bcs.n	f030 <memcpy+0xc0>
    f03c:	3204      	adds	r2, #4
    f03e:	d008      	beq.n	f052 <memcpy+0xe2>
    f040:	07d2      	lsls	r2, r2, #31
    f042:	bf1c      	itt	ne
    f044:	f811 3b01 	ldrbne.w	r3, [r1], #1
    f048:	f800 3b01 	strbne.w	r3, [r0], #1
    f04c:	d301      	bcc.n	f052 <memcpy+0xe2>
    f04e:	880b      	ldrh	r3, [r1, #0]
    f050:	8003      	strh	r3, [r0, #0]
    f052:	4660      	mov	r0, ip
    f054:	4770      	bx	lr
    f056:	bf00      	nop
    f058:	2a08      	cmp	r2, #8
    f05a:	d313      	bcc.n	f084 <memcpy+0x114>
    f05c:	078b      	lsls	r3, r1, #30
    f05e:	d08d      	beq.n	ef7c <memcpy+0xc>
    f060:	f010 0303 	ands.w	r3, r0, #3
    f064:	d08a      	beq.n	ef7c <memcpy+0xc>
    f066:	f1c3 0304 	rsb	r3, r3, #4
    f06a:	1ad2      	subs	r2, r2, r3
    f06c:	07db      	lsls	r3, r3, #31
    f06e:	bf1c      	itt	ne
    f070:	f811 3b01 	ldrbne.w	r3, [r1], #1
    f074:	f800 3b01 	strbne.w	r3, [r0], #1
    f078:	d380      	bcc.n	ef7c <memcpy+0xc>
    f07a:	f831 3b02 	ldrh.w	r3, [r1], #2
    f07e:	f820 3b02 	strh.w	r3, [r0], #2
    f082:	e77b      	b.n	ef7c <memcpy+0xc>
    f084:	3a04      	subs	r2, #4
    f086:	d3d9      	bcc.n	f03c <memcpy+0xcc>
    f088:	3a01      	subs	r2, #1
    f08a:	f811 3b01 	ldrb.w	r3, [r1], #1
    f08e:	f800 3b01 	strb.w	r3, [r0], #1
    f092:	d2f9      	bcs.n	f088 <memcpy+0x118>
    f094:	780b      	ldrb	r3, [r1, #0]
    f096:	7003      	strb	r3, [r0, #0]
    f098:	784b      	ldrb	r3, [r1, #1]
    f09a:	7043      	strb	r3, [r0, #1]
    f09c:	788b      	ldrb	r3, [r1, #2]
    f09e:	7083      	strb	r3, [r0, #2]
    f0a0:	4660      	mov	r0, ip
    f0a2:	4770      	bx	lr

0000f0a4 <memset>:
    f0a4:	b470      	push	{r4, r5, r6}
    f0a6:	0786      	lsls	r6, r0, #30
    f0a8:	d046      	beq.n	f138 <memset+0x94>
    f0aa:	1e54      	subs	r4, r2, #1
    f0ac:	2a00      	cmp	r2, #0
    f0ae:	d041      	beq.n	f134 <memset+0x90>
    f0b0:	b2ca      	uxtb	r2, r1
    f0b2:	4603      	mov	r3, r0
    f0b4:	e002      	b.n	f0bc <memset+0x18>
    f0b6:	f114 34ff 	adds.w	r4, r4, #4294967295
    f0ba:	d33b      	bcc.n	f134 <memset+0x90>
    f0bc:	f803 2b01 	strb.w	r2, [r3], #1
    f0c0:	079d      	lsls	r5, r3, #30
    f0c2:	d1f8      	bne.n	f0b6 <memset+0x12>
    f0c4:	2c03      	cmp	r4, #3
    f0c6:	d92e      	bls.n	f126 <memset+0x82>
    f0c8:	b2cd      	uxtb	r5, r1
    f0ca:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    f0ce:	2c0f      	cmp	r4, #15
    f0d0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    f0d4:	d919      	bls.n	f10a <memset+0x66>
    f0d6:	f103 0210 	add.w	r2, r3, #16
    f0da:	4626      	mov	r6, r4
    f0dc:	3e10      	subs	r6, #16
    f0de:	2e0f      	cmp	r6, #15
    f0e0:	f842 5c10 	str.w	r5, [r2, #-16]
    f0e4:	f842 5c0c 	str.w	r5, [r2, #-12]
    f0e8:	f842 5c08 	str.w	r5, [r2, #-8]
    f0ec:	f842 5c04 	str.w	r5, [r2, #-4]
    f0f0:	f102 0210 	add.w	r2, r2, #16
    f0f4:	d8f2      	bhi.n	f0dc <memset+0x38>
    f0f6:	f1a4 0210 	sub.w	r2, r4, #16
    f0fa:	f022 020f 	bic.w	r2, r2, #15
    f0fe:	f004 040f 	and.w	r4, r4, #15
    f102:	3210      	adds	r2, #16
    f104:	2c03      	cmp	r4, #3
    f106:	4413      	add	r3, r2
    f108:	d90d      	bls.n	f126 <memset+0x82>
    f10a:	461e      	mov	r6, r3
    f10c:	4622      	mov	r2, r4
    f10e:	3a04      	subs	r2, #4
    f110:	2a03      	cmp	r2, #3
    f112:	f846 5b04 	str.w	r5, [r6], #4
    f116:	d8fa      	bhi.n	f10e <memset+0x6a>
    f118:	1f22      	subs	r2, r4, #4
    f11a:	f022 0203 	bic.w	r2, r2, #3
    f11e:	3204      	adds	r2, #4
    f120:	4413      	add	r3, r2
    f122:	f004 0403 	and.w	r4, r4, #3
    f126:	b12c      	cbz	r4, f134 <memset+0x90>
    f128:	b2c9      	uxtb	r1, r1
    f12a:	441c      	add	r4, r3
    f12c:	f803 1b01 	strb.w	r1, [r3], #1
    f130:	429c      	cmp	r4, r3
    f132:	d1fb      	bne.n	f12c <memset+0x88>
    f134:	bc70      	pop	{r4, r5, r6}
    f136:	4770      	bx	lr
    f138:	4614      	mov	r4, r2
    f13a:	4603      	mov	r3, r0
    f13c:	e7c2      	b.n	f0c4 <memset+0x20>
    f13e:	bf00      	nop

0000f140 <strlen>:
    f140:	f890 f000 	pld	[r0]
    f144:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    f148:	f020 0107 	bic.w	r1, r0, #7
    f14c:	f06f 0c00 	mvn.w	ip, #0
    f150:	f010 0407 	ands.w	r4, r0, #7
    f154:	f891 f020 	pld	[r1, #32]
    f158:	f040 8049 	bne.w	f1ee <strlen+0xae>
    f15c:	f04f 0400 	mov.w	r4, #0
    f160:	f06f 0007 	mvn.w	r0, #7
    f164:	e9d1 2300 	ldrd	r2, r3, [r1]
    f168:	f891 f040 	pld	[r1, #64]	; 0x40
    f16c:	f100 0008 	add.w	r0, r0, #8
    f170:	fa82 f24c 	uadd8	r2, r2, ip
    f174:	faa4 f28c 	sel	r2, r4, ip
    f178:	fa83 f34c 	uadd8	r3, r3, ip
    f17c:	faa2 f38c 	sel	r3, r2, ip
    f180:	bb4b      	cbnz	r3, f1d6 <strlen+0x96>
    f182:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    f186:	fa82 f24c 	uadd8	r2, r2, ip
    f18a:	f100 0008 	add.w	r0, r0, #8
    f18e:	faa4 f28c 	sel	r2, r4, ip
    f192:	fa83 f34c 	uadd8	r3, r3, ip
    f196:	faa2 f38c 	sel	r3, r2, ip
    f19a:	b9e3      	cbnz	r3, f1d6 <strlen+0x96>
    f19c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    f1a0:	fa82 f24c 	uadd8	r2, r2, ip
    f1a4:	f100 0008 	add.w	r0, r0, #8
    f1a8:	faa4 f28c 	sel	r2, r4, ip
    f1ac:	fa83 f34c 	uadd8	r3, r3, ip
    f1b0:	faa2 f38c 	sel	r3, r2, ip
    f1b4:	b97b      	cbnz	r3, f1d6 <strlen+0x96>
    f1b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    f1ba:	f101 0120 	add.w	r1, r1, #32
    f1be:	fa82 f24c 	uadd8	r2, r2, ip
    f1c2:	f100 0008 	add.w	r0, r0, #8
    f1c6:	faa4 f28c 	sel	r2, r4, ip
    f1ca:	fa83 f34c 	uadd8	r3, r3, ip
    f1ce:	faa2 f38c 	sel	r3, r2, ip
    f1d2:	2b00      	cmp	r3, #0
    f1d4:	d0c6      	beq.n	f164 <strlen+0x24>
    f1d6:	2a00      	cmp	r2, #0
    f1d8:	bf04      	itt	eq
    f1da:	3004      	addeq	r0, #4
    f1dc:	461a      	moveq	r2, r3
    f1de:	ba12      	rev	r2, r2
    f1e0:	fab2 f282 	clz	r2, r2
    f1e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    f1e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    f1ec:	4770      	bx	lr
    f1ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    f1f2:	f004 0503 	and.w	r5, r4, #3
    f1f6:	f1c4 0000 	rsb	r0, r4, #0
    f1fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    f1fe:	f014 0f04 	tst.w	r4, #4
    f202:	f891 f040 	pld	[r1, #64]	; 0x40
    f206:	fa0c f505 	lsl.w	r5, ip, r5
    f20a:	ea62 0205 	orn	r2, r2, r5
    f20e:	bf1c      	itt	ne
    f210:	ea63 0305 	ornne	r3, r3, r5
    f214:	4662      	movne	r2, ip
    f216:	f04f 0400 	mov.w	r4, #0
    f21a:	e7a9      	b.n	f170 <strlen+0x30>

0000f21c <__register_exitproc>:
    f21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f220:	4d2c      	ldr	r5, [pc, #176]	; (f2d4 <__register_exitproc+0xb8>)
    f222:	4606      	mov	r6, r0
    f224:	6828      	ldr	r0, [r5, #0]
    f226:	4698      	mov	r8, r3
    f228:	460f      	mov	r7, r1
    f22a:	4691      	mov	r9, r2
    f22c:	f000 f882 	bl	f334 <__retarget_lock_acquire_recursive>
    f230:	4b29      	ldr	r3, [pc, #164]	; (f2d8 <__register_exitproc+0xbc>)
    f232:	681c      	ldr	r4, [r3, #0]
    f234:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f238:	2b00      	cmp	r3, #0
    f23a:	d03e      	beq.n	f2ba <__register_exitproc+0x9e>
    f23c:	685a      	ldr	r2, [r3, #4]
    f23e:	2a1f      	cmp	r2, #31
    f240:	dc1c      	bgt.n	f27c <__register_exitproc+0x60>
    f242:	f102 0e01 	add.w	lr, r2, #1
    f246:	b176      	cbz	r6, f266 <__register_exitproc+0x4a>
    f248:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    f24c:	2401      	movs	r4, #1
    f24e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    f252:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    f256:	4094      	lsls	r4, r2
    f258:	4320      	orrs	r0, r4
    f25a:	2e02      	cmp	r6, #2
    f25c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    f260:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    f264:	d023      	beq.n	f2ae <__register_exitproc+0x92>
    f266:	3202      	adds	r2, #2
    f268:	f8c3 e004 	str.w	lr, [r3, #4]
    f26c:	6828      	ldr	r0, [r5, #0]
    f26e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    f272:	f000 f861 	bl	f338 <__retarget_lock_release_recursive>
    f276:	2000      	movs	r0, #0
    f278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f27c:	4b17      	ldr	r3, [pc, #92]	; (f2dc <__register_exitproc+0xc0>)
    f27e:	b30b      	cbz	r3, f2c4 <__register_exitproc+0xa8>
    f280:	f44f 70c8 	mov.w	r0, #400	; 0x190
    f284:	f7ff fd00 	bl	ec88 <malloc>
    f288:	4603      	mov	r3, r0
    f28a:	b1d8      	cbz	r0, f2c4 <__register_exitproc+0xa8>
    f28c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    f290:	6002      	str	r2, [r0, #0]
    f292:	2100      	movs	r1, #0
    f294:	6041      	str	r1, [r0, #4]
    f296:	460a      	mov	r2, r1
    f298:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    f29c:	f04f 0e01 	mov.w	lr, #1
    f2a0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    f2a4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    f2a8:	2e00      	cmp	r6, #0
    f2aa:	d0dc      	beq.n	f266 <__register_exitproc+0x4a>
    f2ac:	e7cc      	b.n	f248 <__register_exitproc+0x2c>
    f2ae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    f2b2:	430c      	orrs	r4, r1
    f2b4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    f2b8:	e7d5      	b.n	f266 <__register_exitproc+0x4a>
    f2ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    f2be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    f2c2:	e7bb      	b.n	f23c <__register_exitproc+0x20>
    f2c4:	6828      	ldr	r0, [r5, #0]
    f2c6:	f000 f837 	bl	f338 <__retarget_lock_release_recursive>
    f2ca:	f04f 30ff 	mov.w	r0, #4294967295
    f2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f2d2:	bf00      	nop
    f2d4:	20000608 	.word	0x20000608
    f2d8:	0000f8d8 	.word	0x0000f8d8
    f2dc:	0000ec89 	.word	0x0000ec89

0000f2e0 <register_fini>:
    f2e0:	4b02      	ldr	r3, [pc, #8]	; (f2ec <register_fini+0xc>)
    f2e2:	b113      	cbz	r3, f2ea <register_fini+0xa>
    f2e4:	4802      	ldr	r0, [pc, #8]	; (f2f0 <register_fini+0x10>)
    f2e6:	f000 b805 	b.w	f2f4 <atexit>
    f2ea:	4770      	bx	lr
    f2ec:	00000000 	.word	0x00000000
    f2f0:	0000f301 	.word	0x0000f301

0000f2f4 <atexit>:
    f2f4:	2300      	movs	r3, #0
    f2f6:	4601      	mov	r1, r0
    f2f8:	461a      	mov	r2, r3
    f2fa:	4618      	mov	r0, r3
    f2fc:	f7ff bf8e 	b.w	f21c <__register_exitproc>

0000f300 <__libc_fini_array>:
    f300:	b538      	push	{r3, r4, r5, lr}
    f302:	4c0a      	ldr	r4, [pc, #40]	; (f32c <__libc_fini_array+0x2c>)
    f304:	4d0a      	ldr	r5, [pc, #40]	; (f330 <__libc_fini_array+0x30>)
    f306:	1b64      	subs	r4, r4, r5
    f308:	10a4      	asrs	r4, r4, #2
    f30a:	d00a      	beq.n	f322 <__libc_fini_array+0x22>
    f30c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    f310:	3b01      	subs	r3, #1
    f312:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    f316:	3c01      	subs	r4, #1
    f318:	f855 3904 	ldr.w	r3, [r5], #-4
    f31c:	4798      	blx	r3
    f31e:	2c00      	cmp	r4, #0
    f320:	d1f9      	bne.n	f316 <__libc_fini_array+0x16>
    f322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f326:	f000 baf3 	b.w	f910 <_fini>
    f32a:	bf00      	nop
    f32c:	0000f920 	.word	0x0000f920
    f330:	0000f91c 	.word	0x0000f91c

0000f334 <__retarget_lock_acquire_recursive>:
    f334:	4770      	bx	lr
    f336:	bf00      	nop

0000f338 <__retarget_lock_release_recursive>:
    f338:	4770      	bx	lr
    f33a:	bf00      	nop

0000f33c <_ZTV18Event_Logger_Class>:
	...
    f344:	da09 0000 da59 0000 0a0d 0000 2a2a 202a     ....Y.......*** 
    f354:	7453 7261 5574 2070 6c41 6f67 6972 6874     StartUp Algorith
    f364:	656d 206e 6554 7473 2a20 2a2a 0000 0000     men Test ***....
    f374:	2a2a 202a 6144 6574 203a 0020 6544 2063     *** Date:  .Dec 
    f384:	3531 3220 3230 0030 5420 6d69 3a65 0020     15 2020. Time: .
    f394:	3031 303a 3a31 3434 0000 0000 6e49 6f66     10:01:44....Info
    f3a4:	4d3a 6d65 726f 2079 7453 7261 6574 0064     :Memory Started.
    f3b4:	2e2e 682f 6c70 702f 726f 2f74 7068 5f6c     ../hpl/port/hpl_
    f3c4:	7067 6f69 625f 7361 2e65 0068 2e2e 682f     gpio_base.h.../h
    f3d4:	6c61 692f 636e 756c 6564 682f 6c61 775f     al/include/hal_w
    f3e4:	7464 682e 0000 0000 2e2e 682f 6c61 732f     dt.h....../hal/s
    f3f4:	6372 682f 6c61 635f 6c61 6e65 6164 2e72     rc/hal_calendar.
    f404:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
    f414:	6c61 635f 6e61 615f 7973 636e 632e 0000     al_can_async.c..
    f424:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
    f434:	6372 735f 6e79 2e63 0063 0000 2e2e 682f     rc_sync.c...../h
    f444:	6c61 732f 6372 682f 6c61 695f 6332 6d5f     al/src/hal_i2c_m
    f454:	735f 6e79 2e63 0063 2e2e 682f 6c61 732f     _sync.c.../hal/s
    f464:	6372 682f 6c61 705f 6d77 632e 0000 0000     rc/hal_pwm.c....
    f474:	2e2e 682f 6c61 732f 6372 682f 6c61 715f     ../hal/src/hal_q
    f484:	7073 5f69 7973 636e 632e 0000 2e2e 682f     spi_sync.c..../h
    f494:	6c61 732f 6372 682f 6c61 735f 6970 6d5f     al/src/hal_spi_m
    f4a4:	735f 6e79 2e63 0063 2e2e 682f 6c61 732f     _sync.c.../hal/s
    f4b4:	6372 682f 6c61 745f 6d69 7265 632e 0000     rc/hal_timer.c..
    f4c4:	2e2e 682f 6c61 752f 6974 736c 732f 6372     ../hal/utils/src
    f4d4:	752f 6974 736c 6c5f 7369 2e74 0063 0000     /utils_list.c...

0000f4e4 <_map>:
    f4e4:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
    f4f4:	0003 0000 0003 0000 0004 0000 0004 0000     ................
    f504:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
    f514:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
    f524:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
    f534:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

0000f544 <user_mux_confs>:
    f544:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

0000f588 <channel_confs>:
    f588:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

0000f5c8 <interrupt_cfg>:
	...
    f648:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
    f658:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
    f668:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
    f678:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    f688:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
    f698:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
    f6a8:	0400 4300 0800 4300 0c00 4300               ...C...C...C

0000f6b4 <sercomspi_regs>:
    f6b4:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
    f6c4:	0c04 3000 0000 0200 0000 0000 1700 ff00     ...0............
    f6d4:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
    f6e4:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
    f6f4:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
    f704:	1400 4300 1800 4300                         ...C...C

0000f70c <_usb_ep_cfgs>:
    f70c:	2140 2000 0000 0000 0040 0000 2180 2000     @!. ....@....!. 
    f71c:	21c0 2000 0040 0040 2200 2000 2240 2000     .!. @.@..". @". 
    f72c:	0040 0040 2280 2000 22c0 2000 0040 0040     @.@..". .". @.@.
    f73c:	2300 2000 2340 2000 0040 0040 0804 0000     .#. @#. @.@.....
    f74c:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
    f75c:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
    f76c:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
    f77c:	625f 7361 2e65 0068                         _base.h.

0000f784 <n25q256a_interface>:
    f784:	b525 0000 b5c9 0000 b6d9 0000 b891 0000     %...............
    f794:	b921 0000 2e2e 752f 6273 642f 7665 6369     !...../usb/devic
    f7a4:	2f65 7375 6462 2e63 0063 0000 2e2e 2e2f     e/usbdc.c...../.
    f7b4:	2f2e 2e2e 412f 554c 445f 6972 6576 2f72     ./../ALU_Driver/
    f7c4:	4c41 5f55 7244 7669 7265 682f 6c70 702f     ALU_Driver/hpl/p
    f7d4:	726f 2f74 7068 5f6c 7067 6f69 625f 7361     ort/hpl_gpio_bas
    f7e4:	2e65 0068                                   e.h.

0000f7e8 <_ZTV14Calendar_Class>:
	...
    f7f0:	da09 0000 da59 0000                         ....Y...

0000f7f8 <_ZTV17DateTimeLog_Class>:
	...
    f800:	ec9d 0000 ec9d 0000                         ........

0000f808 <_ZTV9CDC_Class>:
	...
    f810:	e55d 0000 e63d 0000 e1e1 0000 e525 0000     ]...=.......%...
    f820:	e6d5 0000 e4e9 0000 e3fd 0000 e44d 0000     ............M...
    f830:	e545 0000 e5a5 0000                         E.......

0000f838 <_ZTV6Stream>:
	...
    f840:	ec9d 0000 e861 0000 e1e1 0000 e1f5 0000     ....a...........
    f850:	ec9d 0000 ec9d 0000 ec9d 0000 7830 2e25     ............0x%.
    f860:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
    f870:	766f 0066                                   ovf.

0000f874 <_ZTV5Print>:
	...
    f87c:	ec9d 0000 e861 0000 e1e1 0000 e1f5 0000     ....a...........
    f88c:	6c46 7361 2068 654d 6f6d 7972 5320 6c65     Flash Memory Sel
    f89c:	5466 7365 2074 4150 5353 4445 0000 0000     fTest PASSED....
    f8ac:	6c46 7361 2068 654d 6f6d 7972 5320 6c65     Flash Memory Sel
    f8bc:	5466 7365 2074 4146 4c49 4445 0000 0000     fTest FAILED....

0000f8cc <defaultParameters>:
    f8cc:	4020 0000                                    @..

0000f8d0 <defaultPreferences>:
    f8d0:	00fa 0000 0032 0000                         ....2...

0000f8d8 <_global_impure_ptr>:
    f8d8:	01e0 2000                                   ... 

0000f8dc <_init>:
    f8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8de:	bf00      	nop
    f8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f8e2:	bc08      	pop	{r3}
    f8e4:	469e      	mov	lr, r3
    f8e6:	4770      	bx	lr

0000f8e8 <__init_array_start>:
    f8e8:	0000f2e1 	.word	0x0000f2e1

0000f8ec <__frame_dummy_init_array_entry>:
    f8ec:	00000289 00000545 000007a1 0000d95d     ....E.......]...
    f8fc:	0000dca5 0000e1a9 0000e811 0000ec75     ............u...
    f90c:	0000ee0d                                ....

0000f910 <_fini>:
    f910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f912:	bf00      	nop
    f914:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f916:	bc08      	pop	{r3}
    f918:	469e      	mov	lr, r3
    f91a:	4770      	bx	lr

0000f91c <__fini_array_start>:
    f91c:	00000265 	.word	0x00000265
