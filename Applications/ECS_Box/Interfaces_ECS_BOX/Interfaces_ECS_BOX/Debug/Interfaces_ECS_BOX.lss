
Interfaces_ECS_BOX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f170  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f170  0000f170  0001f170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000056c  20000000  0000f178  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002056c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002056c  2**0
                  CONTENTS
  5 .bss          00000b14  2000056c  0000f6e4  0002056c  2**2
                  ALLOC
  6 .stack        00010000  20001080  000101f8  0002056c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002056c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002059a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000646dd  00000000  00000000  000205f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008a8c  00000000  00000000  00084cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001ad72  00000000  00000000  0008d75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003008  00000000  00000000  000a84ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002d00  00000000  00000000  000ab4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004bc49  00000000  00000000  000ae1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000354aa  00000000  00000000  000f9e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013b6c5  00000000  00000000  0012f2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c7b8  00000000  00000000  0026a990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 10 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	69 5c 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     i\..............
      7c:	d1 02 00 00 d5 4a 00 00 e5 4a 00 00 f5 4a 00 00     .....J...J...J..
      8c:	05 4b 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .K..............
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 f5 6e 00 00 11 6f 00 00 2d 6f 00 00     .....n...o..-o..
     144:	49 6f 00 00 65 6f 00 00 81 6f 00 00 9d 6f 00 00     Io..eo...o...o..
     154:	b9 6f 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .o..............
     164:	d1 02 00 00 d5 6f 00 00 f1 6f 00 00 0d 70 00 00     .....o...o...p..
     174:	29 70 00 00 d1 02 00 00 59 40 00 00 91 aa 00 00     )p......Y@......
     184:	a1 aa 00 00 b1 aa 00 00 c1 aa 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 5d 81 00 00 79 81 00 00     ........]...y...
     1f4:	95 81 00 00 b1 81 00 00 cd 81 00 00 e9 81 00 00     ................
     204:	d1 02 00 00 05 82 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000056c 	.word	0x2000056c
     280:	00000000 	.word	0x00000000
     284:	0000f178 	.word	0x0000f178

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f178 	.word	0x0000f178
     2c4:	20000570 	.word	0x20000570
     2c8:	0000f178 	.word	0x0000f178
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000f178 	.word	0x0000f178
     33c:	2000056c 	.word	0x2000056c
     340:	20001080 	.word	0x20001080
     344:	2000056c 	.word	0x2000056c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000e855 	.word	0x0000e855
     354:	000003e5 	.word	0x000003e5

00000358 <_Z14StartLivePulsev>:
 */ 


#include "main.h"

uint8_t	StartLivePulse(void){
     358:	b508      	push	{r3, lr}
	//usb<<"**** Life Pulse Activated  ****"<<NEWLINE;
	//pwm_set_parameters(&PWM_0, 500, 1000);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     35a:	4802      	ldr	r0, [pc, #8]	; (364 <_Z14StartLivePulsev+0xc>)
     35c:	4b02      	ldr	r3, [pc, #8]	; (368 <_Z14StartLivePulsev+0x10>)
     35e:	4798      	blx	r3
	return p;
}
     360:	b2c0      	uxtb	r0, r0
     362:	bd08      	pop	{r3, pc}
     364:	20000e88 	.word	0x20000e88
     368:	00002351 	.word	0x00002351

0000036c <_Z24WriteUserParametersFlashv>:
bool	WriteUserParametersFlash(void){
     36c:	b570      	push	{r4, r5, r6, lr}
     36e:	b082      	sub	sp, #8

	userParameters	p=defaultParameters;
     370:	4b15      	ldr	r3, [pc, #84]	; (3c8 <_Z24WriteUserParametersFlashv+0x5c>)
     372:	781b      	ldrb	r3, [r3, #0]
     374:	ad02      	add	r5, sp, #8
     376:	f805 3d04 	strb.w	r3, [r5, #-4]!
	flash.eraseFlash((uint32_t)&flashLayout->parameters,sizeof(userParameters));
     37a:	4b14      	ldr	r3, [pc, #80]	; (3cc <_Z24WriteUserParametersFlashv+0x60>)
     37c:	6819      	ldr	r1, [r3, #0]
     37e:	4c14      	ldr	r4, [pc, #80]	; (3d0 <_Z24WriteUserParametersFlashv+0x64>)
     380:	2201      	movs	r2, #1
     382:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
     386:	4620      	mov	r0, r4
     388:	4b12      	ldr	r3, [pc, #72]	; (3d4 <_Z24WriteUserParametersFlashv+0x68>)
     38a:	4798      	blx	r3
	delay_ms(WRITE_DELAY);
     38c:	2064      	movs	r0, #100	; 0x64
     38e:	4e12      	ldr	r6, [pc, #72]	; (3d8 <_Z24WriteUserParametersFlashv+0x6c>)
     390:	47b0      	blx	r6
	flash.flushConfigurationData(&p);
     392:	4629      	mov	r1, r5
     394:	4620      	mov	r0, r4
     396:	4b11      	ldr	r3, [pc, #68]	; (3dc <_Z24WriteUserParametersFlashv+0x70>)
     398:	4798      	blx	r3
	delay_ms(WRITE_DELAY);
     39a:	2064      	movs	r0, #100	; 0x64
     39c:	47b0      	blx	r6
	userParameters	q;
	q=flash.readConfigurationData(q);
     39e:	4669      	mov	r1, sp
     3a0:	4620      	mov	r0, r4
     3a2:	4b0f      	ldr	r3, [pc, #60]	; (3e0 <_Z24WriteUserParametersFlashv+0x74>)
     3a4:	4798      	blx	r3
     3a6:	f88d 0000 	strb.w	r0, [sp]
	if (p.flapperValveOffset==q.flapperValveOffset)
     3aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
     3ae:	b2c0      	uxtb	r0, r0
     3b0:	4283      	cmp	r3, r0
     3b2:	d006      	beq.n	3c2 <_Z24WriteUserParametersFlashv+0x56>
	{
		return true;
	}
	else
	{
		delay_ms(WRITE_DELAY);
     3b4:	2064      	movs	r0, #100	; 0x64
     3b6:	47b0      	blx	r6
		WriteUserParametersFlash();
     3b8:	f7ff ffd8 	bl	36c <_Z24WriteUserParametersFlashv>
		return false;
     3bc:	2000      	movs	r0, #0
	}
}
     3be:	b002      	add	sp, #8
     3c0:	bd70      	pop	{r4, r5, r6, pc}
		return true;
     3c2:	2001      	movs	r0, #1
     3c4:	e7fb      	b.n	3be <_Z24WriteUserParametersFlashv+0x52>
     3c6:	bf00      	nop
     3c8:	0000f094 	.word	0x0000f094
     3cc:	20000ba8 	.word	0x20000ba8
     3d0:	20000bac 	.word	0x20000bac
     3d4:	0000d3d1 	.word	0x0000d3d1
     3d8:	00002005 	.word	0x00002005
     3dc:	0000d1f5 	.word	0x0000d1f5
     3e0:	0000d23d 	.word	0x0000d23d

000003e4 <main>:
	}
}


int main(void)		
{
     3e4:	b500      	push	{lr}
     3e6:	b0c9      	sub	sp, #292	; 0x124
	atmel_start_init();
     3e8:	4b1a      	ldr	r3, [pc, #104]	; (454 <main+0x70>)
     3ea:	4798      	blx	r3
	usb.Init();
     3ec:	481a      	ldr	r0, [pc, #104]	; (458 <main+0x74>)
     3ee:	4b1b      	ldr	r3, [pc, #108]	; (45c <main+0x78>)
     3f0:	4798      	blx	r3
	StartLivePulse();
     3f2:	4b1b      	ldr	r3, [pc, #108]	; (460 <main+0x7c>)
     3f4:	4798      	blx	r3
	delay_ms(500);
     3f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     3fa:	4b1a      	ldr	r3, [pc, #104]	; (464 <main+0x80>)
     3fc:	4798      	blx	r3
	flash.Init();
     3fe:	481a      	ldr	r0, [pc, #104]	; (468 <main+0x84>)
     400:	4b1a      	ldr	r3, [pc, #104]	; (46c <main+0x88>)
     402:	4798      	blx	r3
	WriteUserParametersFlash();
     404:	4b1a      	ldr	r3, [pc, #104]	; (470 <main+0x8c>)
     406:	4798      	blx	r3
	Maintenance_Tool	toolApp;
     408:	4668      	mov	r0, sp
     40a:	4b1a      	ldr	r3, [pc, #104]	; (474 <main+0x90>)
     40c:	4798      	blx	r3
	toolApp.Init();
     40e:	4668      	mov	r0, sp
     410:	4b19      	ldr	r3, [pc, #100]	; (478 <main+0x94>)
     412:	4798      	blx	r3
	while (1)
	{
		if (toolApp.IsAppConnected())
     414:	4c19      	ldr	r4, [pc, #100]	; (47c <main+0x98>)
			
			
		}
		else
		{
			toolApp.setConnected(false);
     416:	4e1a      	ldr	r6, [pc, #104]	; (480 <main+0x9c>)
			delay_ms(100);
     418:	4d12      	ldr	r5, [pc, #72]	; (464 <main+0x80>)
     41a:	e009      	b.n	430 <main+0x4c>
				toolApp.NotifyConnectionAcknowledge();
     41c:	4668      	mov	r0, sp
     41e:	4b19      	ldr	r3, [pc, #100]	; (484 <main+0xa0>)
     420:	4798      	blx	r3
				toolApp.ClearLocalBuffer();
     422:	4668      	mov	r0, sp
     424:	4b18      	ldr	r3, [pc, #96]	; (488 <main+0xa4>)
     426:	4798      	blx	r3
				while (!usb.txReady);
     428:	4a0b      	ldr	r2, [pc, #44]	; (458 <main+0x74>)
     42a:	7d13      	ldrb	r3, [r2, #20]
     42c:	2b00      	cmp	r3, #0
     42e:	d0fc      	beq.n	42a <main+0x46>
		if (toolApp.IsAppConnected())
     430:	4668      	mov	r0, sp
     432:	47a0      	blx	r4
     434:	b138      	cbz	r0, 446 <main+0x62>
			if (toolApp.localBuffer[sizeof(GAINMessageHeader)]==(uint8_t)'f')
     436:	f89d 3009 	ldrb.w	r3, [sp, #9]
     43a:	2b66      	cmp	r3, #102	; 0x66
     43c:	d0ee      	beq.n	41c <main+0x38>
				toolApp.handleCommunication();
     43e:	4668      	mov	r0, sp
     440:	4b12      	ldr	r3, [pc, #72]	; (48c <main+0xa8>)
     442:	4798      	blx	r3
     444:	e7f4      	b.n	430 <main+0x4c>
			toolApp.setConnected(false);
     446:	2100      	movs	r1, #0
     448:	4668      	mov	r0, sp
     44a:	47b0      	blx	r6
			delay_ms(100);
     44c:	2064      	movs	r0, #100	; 0x64
     44e:	47a8      	blx	r5
     450:	e7ee      	b.n	430 <main+0x4c>
     452:	bf00      	nop
     454:	000009c1 	.word	0x000009c1
     458:	20000c6c 	.word	0x20000c6c
     45c:	0000dae1 	.word	0x0000dae1
     460:	00000359 	.word	0x00000359
     464:	00002005 	.word	0x00002005
     468:	20000bac 	.word	0x20000bac
     46c:	0000d191 	.word	0x0000d191
     470:	0000036d 	.word	0x0000036d
     474:	000004b1 	.word	0x000004b1
     478:	0000070d 	.word	0x0000070d
     47c:	000004f9 	.word	0x000004f9
     480:	000004c9 	.word	0x000004c9
     484:	00000599 	.word	0x00000599
     488:	00000579 	.word	0x00000579
     48c:	000008f9 	.word	0x000008f9

00000490 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     490:	4b02      	ldr	r3, [pc, #8]	; (49c <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     492:	681a      	ldr	r2, [r3, #0]
     494:	6813      	ldr	r3, [r2, #0]
     496:	3301      	adds	r3, #1
     498:	6013      	str	r3, [r2, #0]
     49a:	4770      	bx	lr
     49c:	20000588 	.word	0x20000588

000004a0 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     4a0:	4b02      	ldr	r3, [pc, #8]	; (4ac <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     4a2:	681b      	ldr	r3, [r3, #0]
     4a4:	2200      	movs	r2, #0
     4a6:	711a      	strb	r2, [r3, #4]
     4a8:	4770      	bx	lr
     4aa:	bf00      	nop
     4ac:	20000588 	.word	0x20000588

000004b0 <_ZN16Maintenance_ToolC1Ev>:


// default constructor
Maintenance_Tool::Maintenance_Tool()
{
	ptrMaintenanceTool=this;
     4b0:	4a04      	ldr	r2, [pc, #16]	; (4c4 <_ZN16Maintenance_ToolC1Ev+0x14>)
     4b2:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
     4b4:	2200      	movs	r2, #0
     4b6:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	nextMaintenanceSyncTime = 0;
     4ba:	6482      	str	r2, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
     4bc:	64c2      	str	r2, [r0, #76]	; 0x4c
	ticks=0;
     4be:	6002      	str	r2, [r0, #0]
	
} //Maintenance_Tool
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop
     4c4:	20000588 	.word	0x20000588

000004c8 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     4c8:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     4ca:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
		if (isConnected)
     4ce:	b919      	cbnz	r1, 4d8 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     4d0:	4805      	ldr	r0, [pc, #20]	; (4e8 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     4d2:	4b06      	ldr	r3, [pc, #24]	; (4ec <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     4d4:	4798      	blx	r3
     4d6:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     4d8:	f64e 2260 	movw	r2, #60000	; 0xea60
     4dc:	4904      	ldr	r1, [pc, #16]	; (4f0 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     4de:	4802      	ldr	r0, [pc, #8]	; (4e8 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     4e0:	4b04      	ldr	r3, [pc, #16]	; (4f4 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     4e2:	4798      	blx	r3
     4e4:	bd08      	pop	{r3, pc}
     4e6:	bf00      	nop
     4e8:	20000d94 	.word	0x20000d94
     4ec:	0000e331 	.word	0x0000e331
     4f0:	000004a1 	.word	0x000004a1
     4f4:	0000e411 	.word	0x0000e411

000004f8 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     4f8:	b510      	push	{r4, lr}
     4fa:	4604      	mov	r4, r0
	result=false;
     4fc:	2300      	movs	r3, #0
     4fe:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	magic=0;
     502:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	if (gotAccess==true)
     506:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
     50a:	b12b      	cbz	r3, 518 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     50c:	2301      	movs	r3, #1
     50e:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	return	result;
     512:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
}
     516:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     518:	4b13      	ldr	r3, [pc, #76]	; (568 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     51a:	7d5b      	ldrb	r3, [r3, #21]
     51c:	b18b      	cbz	r3, 542 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x4a>
     51e:	1d43      	adds	r3, r0, #5
     520:	3009      	adds	r0, #9
     522:	2200      	movs	r2, #0
				magic|= localBuffer[i];
     524:	f813 1b01 	ldrb.w	r1, [r3], #1
     528:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			for (int i = 0; i < 4; i++)
     52c:	4283      	cmp	r3, r0
     52e:	d1f9      	bne.n	524 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2c>
     530:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     534:	4b0d      	ldr	r3, [pc, #52]	; (56c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
     536:	ea82 0103 	eor.w	r1, r2, r3
     53a:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
			if (xorResult==0)
     53e:	429a      	cmp	r2, r3
     540:	d005      	beq.n	54e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x56>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     542:	2240      	movs	r2, #64	; 0x40
     544:	1d61      	adds	r1, r4, #5
     546:	4808      	ldr	r0, [pc, #32]	; (568 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     548:	4b09      	ldr	r3, [pc, #36]	; (570 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
     54a:	4798      	blx	r3
     54c:	e7e1      	b.n	512 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     54e:	2101      	movs	r1, #1
     550:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
				result=true;
     554:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
				is_MTPC_Beaming=true;
     558:	7121      	strb	r1, [r4, #4]
				setConnected(true);
     55a:	4620      	mov	r0, r4
     55c:	4b05      	ldr	r3, [pc, #20]	; (574 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     55e:	4798      	blx	r3
				return	result;
     560:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     564:	bd10      	pop	{r4, pc}
     566:	bf00      	nop
     568:	20000c6c 	.word	0x20000c6c
     56c:	61626364 	.word	0x61626364
     570:	0000dbc9 	.word	0x0000dbc9
     574:	000004c9 	.word	0x000004c9

00000578 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     578:	b410      	push	{r4}
     57a:	1d02      	adds	r2, r0, #4
     57c:	2301      	movs	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     57e:	2400      	movs	r4, #0
     580:	f802 4f01 	strb.w	r4, [r2, #1]!
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     584:	b2d9      	uxtb	r1, r3
     586:	3301      	adds	r3, #1
     588:	2b41      	cmp	r3, #65	; 0x41
     58a:	d1f9      	bne.n	580 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
     58c:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
	}
	return	i;
}
     590:	4608      	mov	r0, r1
     592:	bc10      	pop	{r4}
     594:	4770      	bx	lr
	...

00000598 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv>:
// 	io.writeData(&checksum, sizeof(checksum));

	return result;
	}
	
bool	Maintenance_Tool::NotifyConnectionAcknowledge(void){
     598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     59a:	4604      	mov	r4, r0
	memcpy(&deviceID.cpuSerialNumber,cpuSerial,sizeof(cpuSerial));
     59c:	f8d0 5102 	ldr.w	r5, [r0, #258]	; 0x102
     5a0:	f8d0 0106 	ldr.w	r0, [r0, #262]	; 0x106
     5a4:	f8d4 110a 	ldr.w	r1, [r4, #266]	; 0x10a
     5a8:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
     5ac:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
     5b0:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
     5b4:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
     5b8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	//deviceID.cpuSerialNumber=cpuSerial;
	delay_us(100);
     5bc:	2064      	movs	r0, #100	; 0x64
     5be:	4b12      	ldr	r3, [pc, #72]	; (608 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x70>)
     5c0:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     5c2:	4912      	ldr	r1, [pc, #72]	; (60c <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x74>)
     5c4:	4812      	ldr	r0, [pc, #72]	; (610 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x78>)
     5c6:	4b13      	ldr	r3, [pc, #76]	; (614 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x7c>)
     5c8:	4798      	blx	r3
	usb<<"CPU Serial: ";
	for (i = 0; i < sizeof(cpuSerial); i++)
     5ca:	2300      	movs	r3, #0
     5cc:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
	{
		usb.print(cpuSerial[i],HEX);
     5d0:	4f0f      	ldr	r7, [pc, #60]	; (610 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x78>)
     5d2:	2610      	movs	r6, #16
     5d4:	4d10      	ldr	r5, [pc, #64]	; (618 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x80>)
     5d6:	4423      	add	r3, r4
     5d8:	4632      	mov	r2, r6
     5da:	f893 1102 	ldrb.w	r1, [r3, #258]	; 0x102
     5de:	4638      	mov	r0, r7
     5e0:	47a8      	blx	r5
	for (i = 0; i < sizeof(cpuSerial); i++)
     5e2:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
     5e6:	3301      	adds	r3, #1
     5e8:	b2db      	uxtb	r3, r3
     5ea:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
     5ee:	2b0f      	cmp	r3, #15
     5f0:	d9f1      	bls.n	5d6 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x3e>
	}

	usb.println();
     5f2:	4807      	ldr	r0, [pc, #28]	; (610 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x78>)
     5f4:	4b09      	ldr	r3, [pc, #36]	; (61c <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x84>)
     5f6:	4798      	blx	r3
	result=(bool)(i>0);
     5f8:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
     5fc:	3000      	adds	r0, #0
     5fe:	bf18      	it	ne
     600:	2001      	movne	r0, #1
     602:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
	return result;
}
     606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     608:	00001fd1 	.word	0x00001fd1
     60c:	0000ec7c 	.word	0x0000ec7c
     610:	20000c6c 	.word	0x20000c6c
     614:	0000debd 	.word	0x0000debd
     618:	0000dedd 	.word	0x0000dedd
     61c:	0000df49 	.word	0x0000df49

00000620 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17GAINMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( GAINMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     620:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
     624:	b92b      	cbnz	r3, 632 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17GAINMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     626:	6483      	str	r3, [r0, #72]	; 0x48
		maintenanceIsConnected = true;
     628:	2301      	movs	r3, #1
     62a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
		bSendNotifications = true;
     62e:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     632:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
     636:	4770      	bx	lr

00000638 <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader>:
bool Maintenance_Tool::WriteParameters(GAINMessageHeader& header)	{

	uint32_t	w,r;
	
	bool	result(header.command == kGAINCommandWriteParameters);
	if (result){
     638:	780b      	ldrb	r3, [r1, #0]
     63a:	2b47      	cmp	r3, #71	; 0x47
     63c:	d001      	beq.n	642 <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader+0xa>
	bool	result(header.command == kGAINCommandWriteParameters);
     63e:	2000      	movs	r0, #0
     640:	4770      	bx	lr
bool Maintenance_Tool::WriteParameters(GAINMessageHeader& header)	{
     642:	b570      	push	{r4, r5, r6, lr}
     644:	4604      	mov	r4, r0
		int n=sizeof(GAINMessageHeader)+1;
		flash.eraseFlash((uint32_t)&flashLayout->parameters,sizeof(userParameters));
     646:	4d0e      	ldr	r5, [pc, #56]	; (680 <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader+0x48>)
     648:	6829      	ldr	r1, [r5, #0]
     64a:	4e0e      	ldr	r6, [pc, #56]	; (684 <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader+0x4c>)
     64c:	2201      	movs	r2, #1
     64e:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
     652:	4630      	mov	r0, r6
     654:	4b0c      	ldr	r3, [pc, #48]	; (688 <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader+0x50>)
     656:	4798      	blx	r3
			
		memcpy((uint8_t*)&parameters,&localBuffer[n+1],sizeof(userParameters));
     658:	7ae3      	ldrb	r3, [r4, #11]
     65a:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
		//uint32_t add=(uint32_t)&framMemory->parameters;
		uint32_t add=(uint32_t)&flashLayout->parameters;
     65e:	682d      	ldr	r5, [r5, #0]
     660:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
		delay_ms(WRITE_DELAY);
     664:	2064      	movs	r0, #100	; 0x64
     666:	4b09      	ldr	r3, [pc, #36]	; (68c <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader+0x54>)
     668:	4798      	blx	r3
		r=flash.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
     66a:	2301      	movs	r3, #1
     66c:	462a      	mov	r2, r5
     66e:	f504 7180 	add.w	r1, r4, #256	; 0x100
     672:	4630      	mov	r0, r6
     674:	4c06      	ldr	r4, [pc, #24]	; (690 <_ZN16Maintenance_Tool15WriteParametersER17GAINMessageHeader+0x58>)
     676:	47a0      	blx	r4
		//	r=fram.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
			result=(bool)(r==0);
     678:	fab0 f080 	clz	r0, r0
     67c:	0940      	lsrs	r0, r0, #5
     67e:	bd70      	pop	{r4, r5, r6, pc}
     680:	20000ba8 	.word	0x20000ba8
     684:	20000bac 	.word	0x20000bac
     688:	0000d3d1 	.word	0x0000d3d1
     68c:	00002005 	.word	0x00002005
     690:	0000d675 	.word	0x0000d675

00000694 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     694:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     696:	0855      	lsrs	r5, r2, #1
     698:	d007      	beq.n	6aa <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     69a:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     69c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     6a0:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     6a2:	3401      	adds	r4, #1
     6a4:	b2a4      	uxth	r4, r4
     6a6:	42ac      	cmp	r4, r5
     6a8:	dbf8      	blt.n	69c <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     6aa:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     6ae:	bf1d      	ittte	ne
     6b0:	189b      	addne	r3, r3, r2
     6b2:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     6b6:	4048      	eorne	r0, r1
     6b8:	4608      	moveq	r0, r1

	return checksum;
	}
     6ba:	bc30      	pop	{r4, r5}
     6bc:	4770      	bx	lr
	...

000006c0 <_ZN16Maintenance_Tool17calculateChecksumERK17GAINMessageHeader>:
	{
     6c0:	b538      	push	{r3, r4, r5, lr}
     6c2:	4604      	mov	r4, r0
	checksum=0;
     6c4:	2500      	movs	r5, #0
     6c6:	f8a0 50fc 	strh.w	r5, [r0, #252]	; 0xfc
	checksum = calculateChecksum(0, sizeof(header), &header);
     6ca:	460b      	mov	r3, r1
     6cc:	2204      	movs	r2, #4
     6ce:	4629      	mov	r1, r5
     6d0:	4d02      	ldr	r5, [pc, #8]	; (6dc <_ZN16Maintenance_Tool17calculateChecksumERK17GAINMessageHeader+0x1c>)
     6d2:	47a8      	blx	r5
     6d4:	f8a4 00fc 	strh.w	r0, [r4, #252]	; 0xfc
	}
     6d8:	bd38      	pop	{r3, r4, r5, pc}
     6da:	bf00      	nop
     6dc:	00000695 	.word	0x00000695

000006e0 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
	}
	return	ticks;
}

void Maintenance_Tool::GetCPUSerialNumber(uint8_t* buffer)
{
     6e0:	b410      	push	{r4}
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
     6e2:	2200      	movs	r2, #0
     6e4:	f880 211c 	strb.w	r2, [r0, #284]	; 0x11c
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     6e8:	4c07      	ldr	r4, [pc, #28]	; (708 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     6ea:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
     6ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (i = 0; i < 4; i++)
     6f2:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
     6f6:	3301      	adds	r3, #1
     6f8:	b2db      	uxtb	r3, r3
     6fa:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
     6fe:	461a      	mov	r2, r3
     700:	2b03      	cmp	r3, #3
     702:	ddf2      	ble.n	6ea <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0xa>
	}

     704:	bc10      	pop	{r4}
     706:	4770      	bx	lr
     708:	41002018 	.word	0x41002018

0000070c <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     70e:	4604      	mov	r4, r0
	ticks=0;
     710:	2600      	movs	r6, #0
     712:	6006      	str	r6, [r0, #0]
	interfaceTimer.Init();
     714:	4d12      	ldr	r5, [pc, #72]	; (760 <_ZN16Maintenance_Tool4InitEv+0x54>)
     716:	4628      	mov	r0, r5
     718:	4b12      	ldr	r3, [pc, #72]	; (764 <_ZN16Maintenance_Tool4InitEv+0x58>)
     71a:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     71c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     720:	4911      	ldr	r1, [pc, #68]	; (768 <_ZN16Maintenance_Tool4InitEv+0x5c>)
     722:	4628      	mov	r0, r5
     724:	4b11      	ldr	r3, [pc, #68]	; (76c <_ZN16Maintenance_Tool4InitEv+0x60>)
     726:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     728:	f504 7581 	add.w	r5, r4, #258	; 0x102
     72c:	4629      	mov	r1, r5
     72e:	4620      	mov	r0, r4
     730:	4b0f      	ldr	r3, [pc, #60]	; (770 <_ZN16Maintenance_Tool4InitEv+0x64>)
     732:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     734:	f8d4 7102 	ldr.w	r7, [r4, #258]	; 0x102
     738:	f8d4 0106 	ldr.w	r0, [r4, #262]	; 0x106
     73c:	f8d4 110a 	ldr.w	r1, [r4, #266]	; 0x10a
     740:	f8d4 210e 	ldr.w	r2, [r4, #270]	; 0x10e
     744:	f8c4 7005 	str.w	r7, [r4, #5]
     748:	f8c4 0009 	str.w	r0, [r4, #9]
     74c:	f8c4 100d 	str.w	r1, [r4, #13]
     750:	f8c4 2011 	str.w	r2, [r4, #17]
	gotAccess=false;
     754:	f884 60f9 	strb.w	r6, [r4, #249]	; 0xf9
}
     758:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     75e:	bf00      	nop
     760:	20000d94 	.word	0x20000d94
     764:	0000e2f3 	.word	0x0000e2f3
     768:	00000491 	.word	0x00000491
     76c:	0000e3c1 	.word	0x0000e3c1
     770:	000006e1 	.word	0x000006e1

00000774 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb>:
	{
     774:	b538      	push	{r3, r4, r5, lr}
     776:	4605      	mov	r5, r0
     778:	460c      	mov	r4, r1
	header.selector = header.command;
     77a:	780b      	ldrb	r3, [r1, #0]
     77c:	704b      	strb	r3, [r1, #1]
	header.command = kGAINNotifyCommandReceived;
     77e:	2165      	movs	r1, #101	; 0x65
     780:	7021      	strb	r1, [r4, #0]
	header.dataSize = 0;
     782:	2100      	movs	r1, #0
     784:	8061      	strh	r1, [r4, #2]
	if (!result)
     786:	b912      	cbnz	r2, 78e <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x1a>
		header.selector |= 0x80;
     788:	f063 037f 	orn	r3, r3, #127	; 0x7f
     78c:	7063      	strb	r3, [r4, #1]
	checksum = calculateChecksum(header);
     78e:	4621      	mov	r1, r4
     790:	4628      	mov	r0, r5
     792:	4b05      	ldr	r3, [pc, #20]	; (7a8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x34>)
     794:	4798      	blx	r3
     796:	f8a5 00fc 	strh.w	r0, [r5, #252]	; 0xfc
	usb.writeData(&header, sizeof(header));
     79a:	2204      	movs	r2, #4
     79c:	4621      	mov	r1, r4
     79e:	4803      	ldr	r0, [pc, #12]	; (7ac <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x38>)
     7a0:	4b03      	ldr	r3, [pc, #12]	; (7b0 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x3c>)
     7a2:	4798      	blx	r3
     7a4:	bd38      	pop	{r3, r4, r5, pc}
     7a6:	bf00      	nop
     7a8:	000006c1 	.word	0x000006c1
     7ac:	20000c6c 	.word	0x20000c6c
     7b0:	0000dca5 	.word	0x0000dca5

000007b4 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader>:
bool Maintenance_Tool::ReadParameters(GAINMessageHeader& header){
     7b4:	b538      	push	{r3, r4, r5, lr}
		if (result){
     7b6:	780b      	ldrb	r3, [r1, #0]
     7b8:	2b48      	cmp	r3, #72	; 0x48
     7ba:	d001      	beq.n	7c0 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0xc>
	 	bool	result(header.command == kGAINCommandReadParameters);
     7bc:	2000      	movs	r0, #0
     7be:	bd38      	pop	{r3, r4, r5, pc}
     7c0:	4604      	mov	r4, r0
			uint32_t add=(uint32_t)&flashLayout->parameters;
     7c2:	4b0b      	ldr	r3, [pc, #44]	; (7f0 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x3c>)
     7c4:	681a      	ldr	r2, [r3, #0]
			r=flash.ReadAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
     7c6:	2301      	movs	r3, #1
     7c8:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     7cc:	f500 7180 	add.w	r1, r0, #256	; 0x100
     7d0:	4808      	ldr	r0, [pc, #32]	; (7f4 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x40>)
     7d2:	4d09      	ldr	r5, [pc, #36]	; (7f8 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x44>)
     7d4:	47a8      	blx	r5
			 if (r>0)
     7d6:	b908      	cbnz	r0, 7dc <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x28>
	 	bool	result(header.command == kGAINCommandReadParameters);
     7d8:	2001      	movs	r0, #1
}
     7da:	bd38      	pop	{r3, r4, r5, pc}
				memcpy((uint8_t*)&localBuffer[n+1],(void*)&parameters,sizeof(userParameters));
     7dc:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
     7e0:	72e3      	strb	r3, [r4, #11]
				 usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     7e2:	2240      	movs	r2, #64	; 0x40
     7e4:	1d61      	adds	r1, r4, #5
     7e6:	4805      	ldr	r0, [pc, #20]	; (7fc <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x48>)
     7e8:	4b05      	ldr	r3, [pc, #20]	; (800 <_ZN16Maintenance_Tool14ReadParametersER17GAINMessageHeader+0x4c>)
     7ea:	4798      	blx	r3
				 result=w>0;
     7ec:	2000      	movs	r0, #0
     7ee:	bd38      	pop	{r3, r4, r5, pc}
     7f0:	20000ba8 	.word	0x20000ba8
     7f4:	20000bac 	.word	0x20000bac
     7f8:	0000d755 	.word	0x0000d755
     7fc:	20000c6c 	.word	0x20000c6c
     800:	0000dd21 	.word	0x0000dd21

00000804 <_ZN16Maintenance_Tool17handleGAINCommandEv>:
bool Maintenance_Tool::handleGAINCommand(void){
     804:	b538      	push	{r3, r4, r5, lr}
     806:	4604      	mov	r4, r0
	if ((localBuffer[n]>=kGAINCommandConnect)
     808:	7a82      	ldrb	r2, [r0, #10]
	&& (localBuffer[n]<kGAINNumberOfCommands))
     80a:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
	if ((localBuffer[n]>=kGAINCommandConnect)
     80e:	b2db      	uxtb	r3, r3
     810:	2b0d      	cmp	r3, #13
     812:	d814      	bhi.n	83e <_ZN16Maintenance_Tool17handleGAINCommandEv+0x3a>
		gotTask=true;
     814:	2301      	movs	r3, #1
     816:	f880 30fb 	strb.w	r3, [r0, #251]	; 0xfb
		result=gotTask;
     81a:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
		header.command=localBuffer[n];
     81e:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
		switch (header.command)
     822:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
     826:	3b41      	subs	r3, #65	; 0x41
     828:	2b0d      	cmp	r3, #13
     82a:	d854      	bhi.n	8d6 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xd2>
     82c:	e8df f003 	tbb	[pc, r3]
     830:	30272119 	.word	0x30272119
     834:	4b431616 	.word	0x4b431616
     838:	533a1616 	.word	0x533a1616
     83c:	1653      	.short	0x1653
		gotTask=false;
     83e:	2300      	movs	r3, #0
     840:	f880 30fb 	strb.w	r3, [r0, #251]	; 0xfb
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     844:	4d26      	ldr	r5, [pc, #152]	; (8e0 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xdc>)
     846:	2240      	movs	r2, #64	; 0x40
     848:	1d41      	adds	r1, r0, #5
     84a:	4628      	mov	r0, r5
     84c:	4b25      	ldr	r3, [pc, #148]	; (8e4 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe0>)
     84e:	4798      	blx	r3
		result=usb.rxReady;
     850:	7d6b      	ldrb	r3, [r5, #21]
     852:	b2db      	uxtb	r3, r3
     854:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	if (result)
     858:	2b00      	cmp	r3, #0
     85a:	d1e2      	bne.n	822 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x1e>
	}
     85c:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     860:	bd38      	pop	{r3, r4, r5, pc}
				result = handleGAINCommandConnect( header);
     862:	f104 0198 	add.w	r1, r4, #152	; 0x98
     866:	4620      	mov	r0, r4
     868:	4b1f      	ldr	r3, [pc, #124]	; (8e8 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe4>)
     86a:	4798      	blx	r3
     86c:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
				break;
     870:	e7f4      	b.n	85c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
	maintenanceIsConnected = false;
     872:	2300      	movs	r3, #0
     874:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	bSendNotifications = false;
     878:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
				break;
     87c:	e7ee      	b.n	85c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
	bSendNotifications = (header.selector == 1);
     87e:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
     882:	2b01      	cmp	r3, #1
     884:	bf14      	ite	ne
     886:	2300      	movne	r3, #0
     888:	2301      	moveq	r3, #1
     88a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
				break;
     88e:	e7e5      	b.n	85c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				notifyGAINCommandReceived( header, result);
     890:	2201      	movs	r2, #1
     892:	f104 0198 	add.w	r1, r4, #152	; 0x98
     896:	4620      	mov	r0, r4
     898:	4b14      	ldr	r3, [pc, #80]	; (8ec <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe8>)
     89a:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     89c:	2301      	movs	r3, #1
     89e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     8a2:	e7db      	b.n	85c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
	bool	result(header.dataSize == sizeof(GAINControllerPortState));
     8a4:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
     8a8:	2b1a      	cmp	r3, #26
     8aa:	bf14      	ite	ne
     8ac:	2300      	movne	r3, #0
     8ae:	2301      	moveq	r3, #1
     8b0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     8b4:	e7d2      	b.n	85c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				result = WriteParameters( header);
     8b6:	f104 0198 	add.w	r1, r4, #152	; 0x98
     8ba:	4620      	mov	r0, r4
     8bc:	4b0c      	ldr	r3, [pc, #48]	; (8f0 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xec>)
     8be:	4798      	blx	r3
     8c0:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
			break;
     8c4:	e7ca      	b.n	85c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				result = ReadParameters( header);
     8c6:	f104 0198 	add.w	r1, r4, #152	; 0x98
     8ca:	4620      	mov	r0, r4
     8cc:	4b09      	ldr	r3, [pc, #36]	; (8f4 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xf0>)
     8ce:	4798      	blx	r3
     8d0:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
			break;
     8d4:	e7c2      	b.n	85c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
				result = false;
     8d6:	2300      	movs	r3, #0
     8d8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     8dc:	e7be      	b.n	85c <_ZN16Maintenance_Tool17handleGAINCommandEv+0x58>
     8de:	bf00      	nop
     8e0:	20000c6c 	.word	0x20000c6c
     8e4:	0000dbc9 	.word	0x0000dbc9
     8e8:	00000621 	.word	0x00000621
     8ec:	00000775 	.word	0x00000775
     8f0:	00000639 	.word	0x00000639
     8f4:	000007b5 	.word	0x000007b5

000008f8 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8fa:	4604      	mov	r4, r0
	result=false;
     8fc:	2300      	movs	r3, #0
     8fe:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	if (gotAccess)
     902:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
     906:	2b00      	cmp	r3, #0
     908:	d044      	beq.n	994 <_ZN16Maintenance_Tool19handleCommunicationEv+0x9c>
		if (usb.rxReady)
     90a:	4b24      	ldr	r3, [pc, #144]	; (99c <_ZN16Maintenance_Tool19handleCommunicationEv+0xa4>)
     90c:	7d5b      	ldrb	r3, [r3, #21]
     90e:	2b00      	cmp	r3, #0
     910:	d03c      	beq.n	98c <_ZN16Maintenance_Tool19handleCommunicationEv+0x94>
			switch (input){
     912:	7a43      	ldrb	r3, [r0, #9]
     914:	2b3d      	cmp	r3, #61	; 0x3d
     916:	d01e      	beq.n	956 <_ZN16Maintenance_Tool19handleCommunicationEv+0x5e>
     918:	2b3e      	cmp	r3, #62	; 0x3e
     91a:	d017      	beq.n	94c <_ZN16Maintenance_Tool19handleCommunicationEv+0x54>
     91c:	2b3c      	cmp	r3, #60	; 0x3c
     91e:	d003      	beq.n	928 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
					gotCommand=false;
     920:	2300      	movs	r3, #0
     922:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
				break;
     926:	e006      	b.n	936 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
					gotCommand=true;
     928:	2301      	movs	r3, #1
     92a:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
					result = handleGAINCommand();
     92e:	4b1c      	ldr	r3, [pc, #112]	; (9a0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa8>)
     930:	4798      	blx	r3
     932:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
			ClearLocalBuffer();
     936:	4620      	mov	r0, r4
     938:	4b1a      	ldr	r3, [pc, #104]	; (9a4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>)
     93a:	4798      	blx	r3
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     93c:	2240      	movs	r2, #64	; 0x40
     93e:	1d61      	adds	r1, r4, #5
     940:	4816      	ldr	r0, [pc, #88]	; (99c <_ZN16Maintenance_Tool19handleCommunicationEv+0xa4>)
     942:	4b19      	ldr	r3, [pc, #100]	; (9a8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb0>)
     944:	4798      	blx	r3
	}
     946:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
     94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					result = handleGAINCommand();
     94c:	4b14      	ldr	r3, [pc, #80]	; (9a0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa8>)
     94e:	4798      	blx	r3
     950:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
				break;
     954:	e7ef      	b.n	936 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
					is_MTPC_Beaming=true;
     956:	2501      	movs	r5, #1
     958:	7105      	strb	r5, [r0, #4]
					interfaceTimer.Stop();
     95a:	4e14      	ldr	r6, [pc, #80]	; (9ac <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     95c:	4630      	mov	r0, r6
     95e:	4b14      	ldr	r3, [pc, #80]	; (9b0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     960:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     962:	4f14      	ldr	r7, [pc, #80]	; (9b4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     964:	4639      	mov	r1, r7
     966:	4630      	mov	r0, r6
     968:	4b13      	ldr	r3, [pc, #76]	; (9b8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     96a:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
     96c:	f242 7210 	movw	r2, #10000	; 0x2710
     970:	4639      	mov	r1, r7
     972:	4630      	mov	r0, r6
     974:	4b11      	ldr	r3, [pc, #68]	; (9bc <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     976:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     978:	2300      	movs	r3, #0
     97a:	64a3      	str	r3, [r4, #72]	; 0x48
					maintenanceIsConnected = true;
     97c:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
					bSendNotifications = true;
     980:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
					result=is_MTPC_Beaming;
     984:	7923      	ldrb	r3, [r4, #4]
     986:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				break;
     98a:	e7d4      	b.n	936 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
			gotCommand=false;
     98c:	2300      	movs	r3, #0
     98e:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
     992:	e7d3      	b.n	93c <_ZN16Maintenance_Tool19handleCommunicationEv+0x44>
		gotCommand=false;
     994:	2300      	movs	r3, #0
     996:	f880 30fa 	strb.w	r3, [r0, #250]	; 0xfa
     99a:	e7d4      	b.n	946 <_ZN16Maintenance_Tool19handleCommunicationEv+0x4e>
     99c:	20000c6c 	.word	0x20000c6c
     9a0:	00000805 	.word	0x00000805
     9a4:	00000579 	.word	0x00000579
     9a8:	0000dbc9 	.word	0x0000dbc9
     9ac:	20000d94 	.word	0x20000d94
     9b0:	0000e331 	.word	0x0000e331
     9b4:	000004a1 	.word	0x000004a1
     9b8:	0000e449 	.word	0x0000e449
     9bc:	0000e411 	.word	0x0000e411

000009c0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     9c0:	b580      	push	{r7, lr}
     9c2:	af00      	add	r7, sp, #0
	system_init();
     9c4:	4b03      	ldr	r3, [pc, #12]	; (9d4 <atmel_start_init+0x14>)
     9c6:	4798      	blx	r3
	usb_init();
     9c8:	4b03      	ldr	r3, [pc, #12]	; (9d8 <atmel_start_init+0x18>)
     9ca:	4798      	blx	r3
	spi_nor_flash_init();
     9cc:	4b03      	ldr	r3, [pc, #12]	; (9dc <atmel_start_init+0x1c>)
     9ce:	4798      	blx	r3
}
     9d0:	bf00      	nop
     9d2:	bd80      	pop	{r7, pc}
     9d4:	00001c65 	.word	0x00001c65
     9d8:	0000b195 	.word	0x0000b195
     9dc:	0000b129 	.word	0x0000b129

000009e0 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     9e0:	b480      	push	{r7}
     9e2:	b085      	sub	sp, #20
     9e4:	af00      	add	r7, sp, #0
     9e6:	60f8      	str	r0, [r7, #12]
     9e8:	460b      	mov	r3, r1
     9ea:	607a      	str	r2, [r7, #4]
     9ec:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     9ee:	7afa      	ldrb	r2, [r7, #11]
     9f0:	68fb      	ldr	r3, [r7, #12]
     9f2:	3220      	adds	r2, #32
     9f4:	6879      	ldr	r1, [r7, #4]
     9f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     9fa:	bf00      	nop
     9fc:	3714      	adds	r7, #20
     9fe:	46bd      	mov	sp, r7
     a00:	f85d 7b04 	ldr.w	r7, [sp], #4
     a04:	4770      	bx	lr

00000a06 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     a06:	b480      	push	{r7}
     a08:	b083      	sub	sp, #12
     a0a:	af00      	add	r7, sp, #0
     a0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     a0e:	687b      	ldr	r3, [r7, #4]
     a10:	691b      	ldr	r3, [r3, #16]
     a12:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a1a:	bf00      	nop
     a1c:	370c      	adds	r7, #12
     a1e:	46bd      	mov	sp, r7
     a20:	f85d 7b04 	ldr.w	r7, [sp], #4
     a24:	4770      	bx	lr

00000a26 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     a26:	b480      	push	{r7}
     a28:	b083      	sub	sp, #12
     a2a:	af00      	add	r7, sp, #0
     a2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	691b      	ldr	r3, [r3, #16]
     a32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a3a:	bf00      	nop
     a3c:	370c      	adds	r7, #12
     a3e:	46bd      	mov	sp, r7
     a40:	f85d 7b04 	ldr.w	r7, [sp], #4
     a44:	4770      	bx	lr

00000a46 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     a46:	b480      	push	{r7}
     a48:	b083      	sub	sp, #12
     a4a:	af00      	add	r7, sp, #0
     a4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	691b      	ldr	r3, [r3, #16]
     a52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a5a:	bf00      	nop
     a5c:	370c      	adds	r7, #12
     a5e:	46bd      	mov	sp, r7
     a60:	f85d 7b04 	ldr.w	r7, [sp], #4
     a64:	4770      	bx	lr

00000a66 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     a66:	b480      	push	{r7}
     a68:	b083      	sub	sp, #12
     a6a:	af00      	add	r7, sp, #0
     a6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	691b      	ldr	r3, [r3, #16]
     a72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     a76:	687b      	ldr	r3, [r7, #4]
     a78:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a7a:	bf00      	nop
     a7c:	370c      	adds	r7, #12
     a7e:	46bd      	mov	sp, r7
     a80:	f85d 7b04 	ldr.w	r7, [sp], #4
     a84:	4770      	bx	lr

00000a86 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     a86:	b480      	push	{r7}
     a88:	b083      	sub	sp, #12
     a8a:	af00      	add	r7, sp, #0
     a8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	695b      	ldr	r3, [r3, #20]
     a92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     a96:	687b      	ldr	r3, [r7, #4]
     a98:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a9a:	bf00      	nop
     a9c:	370c      	adds	r7, #12
     a9e:	46bd      	mov	sp, r7
     aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
     aa4:	4770      	bx	lr

00000aa6 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     aa6:	b480      	push	{r7}
     aa8:	b083      	sub	sp, #12
     aaa:	af00      	add	r7, sp, #0
     aac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	695b      	ldr	r3, [r3, #20]
     ab2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aba:	bf00      	nop
     abc:	370c      	adds	r7, #12
     abe:	46bd      	mov	sp, r7
     ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ac4:	4770      	bx	lr

00000ac6 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     ac6:	b480      	push	{r7}
     ac8:	b083      	sub	sp, #12
     aca:	af00      	add	r7, sp, #0
     acc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     ace:	687b      	ldr	r3, [r7, #4]
     ad0:	695b      	ldr	r3, [r3, #20]
     ad2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ada:	bf00      	nop
     adc:	370c      	adds	r7, #12
     ade:	46bd      	mov	sp, r7
     ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ae4:	4770      	bx	lr

00000ae6 <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     ae6:	b480      	push	{r7}
     ae8:	b083      	sub	sp, #12
     aea:	af00      	add	r7, sp, #0
     aec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     aee:	687b      	ldr	r3, [r7, #4]
     af0:	695b      	ldr	r3, [r3, #20]
     af2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     af6:	687b      	ldr	r3, [r7, #4]
     af8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     afa:	bf00      	nop
     afc:	370c      	adds	r7, #12
     afe:	46bd      	mov	sp, r7
     b00:	f85d 7b04 	ldr.w	r7, [sp], #4
     b04:	4770      	bx	lr

00000b06 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     b06:	b480      	push	{r7}
     b08:	b083      	sub	sp, #12
     b0a:	af00      	add	r7, sp, #0
     b0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	695b      	ldr	r3, [r3, #20]
     b12:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b1a:	bf00      	nop
     b1c:	370c      	adds	r7, #12
     b1e:	46bd      	mov	sp, r7
     b20:	f85d 7b04 	ldr.w	r7, [sp], #4
     b24:	4770      	bx	lr

00000b26 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     b26:	b480      	push	{r7}
     b28:	b083      	sub	sp, #12
     b2a:	af00      	add	r7, sp, #0
     b2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     b2e:	687b      	ldr	r3, [r7, #4]
     b30:	695b      	ldr	r3, [r3, #20]
     b32:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     b36:	687b      	ldr	r3, [r7, #4]
     b38:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b3a:	bf00      	nop
     b3c:	370c      	adds	r7, #12
     b3e:	46bd      	mov	sp, r7
     b40:	f85d 7b04 	ldr.w	r7, [sp], #4
     b44:	4770      	bx	lr

00000b46 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     b46:	b480      	push	{r7}
     b48:	b083      	sub	sp, #12
     b4a:	af00      	add	r7, sp, #0
     b4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	695b      	ldr	r3, [r3, #20]
     b52:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b5a:	bf00      	nop
     b5c:	370c      	adds	r7, #12
     b5e:	46bd      	mov	sp, r7
     b60:	f85d 7b04 	ldr.w	r7, [sp], #4
     b64:	4770      	bx	lr

00000b66 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     b66:	b480      	push	{r7}
     b68:	b083      	sub	sp, #12
     b6a:	af00      	add	r7, sp, #0
     b6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     b6e:	687b      	ldr	r3, [r7, #4]
     b70:	699b      	ldr	r3, [r3, #24]
     b72:	f043 0201 	orr.w	r2, r3, #1
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b7a:	bf00      	nop
     b7c:	370c      	adds	r7, #12
     b7e:	46bd      	mov	sp, r7
     b80:	f85d 7b04 	ldr.w	r7, [sp], #4
     b84:	4770      	bx	lr

00000b86 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     b86:	b480      	push	{r7}
     b88:	b083      	sub	sp, #12
     b8a:	af00      	add	r7, sp, #0
     b8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     b8e:	687b      	ldr	r3, [r7, #4]
     b90:	699b      	ldr	r3, [r3, #24]
     b92:	f043 0202 	orr.w	r2, r3, #2
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b9a:	bf00      	nop
     b9c:	370c      	adds	r7, #12
     b9e:	46bd      	mov	sp, r7
     ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ba4:	4770      	bx	lr

00000ba6 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     ba6:	b480      	push	{r7}
     ba8:	b083      	sub	sp, #12
     baa:	af00      	add	r7, sp, #0
     bac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     bae:	687b      	ldr	r3, [r7, #4]
     bb0:	699b      	ldr	r3, [r3, #24]
     bb2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     bb6:	687b      	ldr	r3, [r7, #4]
     bb8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bba:	bf00      	nop
     bbc:	370c      	adds	r7, #12
     bbe:	46bd      	mov	sp, r7
     bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bc4:	4770      	bx	lr

00000bc6 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     bc6:	b480      	push	{r7}
     bc8:	b083      	sub	sp, #12
     bca:	af00      	add	r7, sp, #0
     bcc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	699b      	ldr	r3, [r3, #24]
     bd2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bda:	bf00      	nop
     bdc:	370c      	adds	r7, #12
     bde:	46bd      	mov	sp, r7
     be0:	f85d 7b04 	ldr.w	r7, [sp], #4
     be4:	4770      	bx	lr

00000be6 <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     be6:	b480      	push	{r7}
     be8:	b083      	sub	sp, #12
     bea:	af00      	add	r7, sp, #0
     bec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     bee:	687b      	ldr	r3, [r7, #4]
     bf0:	699b      	ldr	r3, [r3, #24]
     bf2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     bf6:	687b      	ldr	r3, [r7, #4]
     bf8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bfa:	bf00      	nop
     bfc:	370c      	adds	r7, #12
     bfe:	46bd      	mov	sp, r7
     c00:	f85d 7b04 	ldr.w	r7, [sp], #4
     c04:	4770      	bx	lr

00000c06 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     c06:	b480      	push	{r7}
     c08:	b083      	sub	sp, #12
     c0a:	af00      	add	r7, sp, #0
     c0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	69db      	ldr	r3, [r3, #28]
     c12:	f043 0220 	orr.w	r2, r3, #32
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c1a:	bf00      	nop
     c1c:	370c      	adds	r7, #12
     c1e:	46bd      	mov	sp, r7
     c20:	f85d 7b04 	ldr.w	r7, [sp], #4
     c24:	4770      	bx	lr

00000c26 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     c26:	b480      	push	{r7}
     c28:	b083      	sub	sp, #12
     c2a:	af00      	add	r7, sp, #0
     c2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	69db      	ldr	r3, [r3, #28]
     c32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c3a:	bf00      	nop
     c3c:	370c      	adds	r7, #12
     c3e:	46bd      	mov	sp, r7
     c40:	f85d 7b04 	ldr.w	r7, [sp], #4
     c44:	4770      	bx	lr

00000c46 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     c46:	b480      	push	{r7}
     c48:	b083      	sub	sp, #12
     c4a:	af00      	add	r7, sp, #0
     c4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	69db      	ldr	r3, [r3, #28]
     c52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c5a:	bf00      	nop
     c5c:	370c      	adds	r7, #12
     c5e:	46bd      	mov	sp, r7
     c60:	f85d 7b04 	ldr.w	r7, [sp], #4
     c64:	4770      	bx	lr

00000c66 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     c66:	b480      	push	{r7}
     c68:	b083      	sub	sp, #12
     c6a:	af00      	add	r7, sp, #0
     c6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	6a1b      	ldr	r3, [r3, #32]
     c72:	f043 0201 	orr.w	r2, r3, #1
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c7a:	bf00      	nop
     c7c:	370c      	adds	r7, #12
     c7e:	46bd      	mov	sp, r7
     c80:	f85d 7b04 	ldr.w	r7, [sp], #4
     c84:	4770      	bx	lr

00000c86 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     c86:	b480      	push	{r7}
     c88:	b083      	sub	sp, #12
     c8a:	af00      	add	r7, sp, #0
     c8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	6a1b      	ldr	r3, [r3, #32]
     c92:	f043 0202 	orr.w	r2, r3, #2
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c9a:	bf00      	nop
     c9c:	370c      	adds	r7, #12
     c9e:	46bd      	mov	sp, r7
     ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ca4:	4770      	bx	lr

00000ca6 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     ca6:	b480      	push	{r7}
     ca8:	b083      	sub	sp, #12
     caa:	af00      	add	r7, sp, #0
     cac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	6a1b      	ldr	r3, [r3, #32]
     cb2:	f043 0208 	orr.w	r2, r3, #8
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cba:	bf00      	nop
     cbc:	370c      	adds	r7, #12
     cbe:	46bd      	mov	sp, r7
     cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
     cc4:	4770      	bx	lr

00000cc6 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     cc6:	b480      	push	{r7}
     cc8:	b083      	sub	sp, #12
     cca:	af00      	add	r7, sp, #0
     ccc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	6a1b      	ldr	r3, [r3, #32]
     cd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cda:	bf00      	nop
     cdc:	370c      	adds	r7, #12
     cde:	46bd      	mov	sp, r7
     ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ce4:	4770      	bx	lr

00000ce6 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     ce6:	b480      	push	{r7}
     ce8:	b085      	sub	sp, #20
     cea:	af00      	add	r7, sp, #0
     cec:	60f8      	str	r0, [r7, #12]
     cee:	460b      	mov	r3, r1
     cf0:	607a      	str	r2, [r7, #4]
     cf2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cf4:	7afb      	ldrb	r3, [r7, #11]
     cf6:	68fa      	ldr	r2, [r7, #12]
     cf8:	01db      	lsls	r3, r3, #7
     cfa:	4413      	add	r3, r2
     cfc:	3308      	adds	r3, #8
     cfe:	687a      	ldr	r2, [r7, #4]
     d00:	601a      	str	r2, [r3, #0]
}
     d02:	bf00      	nop
     d04:	3714      	adds	r7, #20
     d06:	46bd      	mov	sp, r7
     d08:	f85d 7b04 	ldr.w	r7, [sp], #4
     d0c:	4770      	bx	lr

00000d0e <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     d0e:	b480      	push	{r7}
     d10:	b085      	sub	sp, #20
     d12:	af00      	add	r7, sp, #0
     d14:	60f8      	str	r0, [r7, #12]
     d16:	460b      	mov	r3, r1
     d18:	607a      	str	r2, [r7, #4]
     d1a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d1c:	7afb      	ldrb	r3, [r7, #11]
     d1e:	68fa      	ldr	r2, [r7, #12]
     d20:	01db      	lsls	r3, r3, #7
     d22:	4413      	add	r3, r2
     d24:	3304      	adds	r3, #4
     d26:	687a      	ldr	r2, [r7, #4]
     d28:	601a      	str	r2, [r3, #0]
}
     d2a:	bf00      	nop
     d2c:	3714      	adds	r7, #20
     d2e:	46bd      	mov	sp, r7
     d30:	f85d 7b04 	ldr.w	r7, [sp], #4
     d34:	4770      	bx	lr

00000d36 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     d36:	b480      	push	{r7}
     d38:	b085      	sub	sp, #20
     d3a:	af00      	add	r7, sp, #0
     d3c:	60f8      	str	r0, [r7, #12]
     d3e:	460b      	mov	r3, r1
     d40:	607a      	str	r2, [r7, #4]
     d42:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d44:	7afb      	ldrb	r3, [r7, #11]
     d46:	68fa      	ldr	r2, [r7, #12]
     d48:	01db      	lsls	r3, r3, #7
     d4a:	4413      	add	r3, r2
     d4c:	3318      	adds	r3, #24
     d4e:	687a      	ldr	r2, [r7, #4]
     d50:	601a      	str	r2, [r3, #0]
}
     d52:	bf00      	nop
     d54:	3714      	adds	r7, #20
     d56:	46bd      	mov	sp, r7
     d58:	f85d 7b04 	ldr.w	r7, [sp], #4
     d5c:	4770      	bx	lr

00000d5e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     d5e:	b480      	push	{r7}
     d60:	b085      	sub	sp, #20
     d62:	af00      	add	r7, sp, #0
     d64:	60f8      	str	r0, [r7, #12]
     d66:	460b      	mov	r3, r1
     d68:	607a      	str	r2, [r7, #4]
     d6a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d6c:	7afb      	ldrb	r3, [r7, #11]
     d6e:	68fa      	ldr	r2, [r7, #12]
     d70:	01db      	lsls	r3, r3, #7
     d72:	4413      	add	r3, r2
     d74:	3314      	adds	r3, #20
     d76:	687a      	ldr	r2, [r7, #4]
     d78:	601a      	str	r2, [r3, #0]
}
     d7a:	bf00      	nop
     d7c:	3714      	adds	r7, #20
     d7e:	46bd      	mov	sp, r7
     d80:	f85d 7b04 	ldr.w	r7, [sp], #4
     d84:	4770      	bx	lr

00000d86 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     d86:	b480      	push	{r7}
     d88:	b085      	sub	sp, #20
     d8a:	af00      	add	r7, sp, #0
     d8c:	6078      	str	r0, [r7, #4]
     d8e:	4608      	mov	r0, r1
     d90:	4611      	mov	r1, r2
     d92:	461a      	mov	r2, r3
     d94:	4603      	mov	r3, r0
     d96:	70fb      	strb	r3, [r7, #3]
     d98:	460b      	mov	r3, r1
     d9a:	70bb      	strb	r3, [r7, #2]
     d9c:	4613      	mov	r3, r2
     d9e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     da0:	78fa      	ldrb	r2, [r7, #3]
     da2:	78bb      	ldrb	r3, [r7, #2]
     da4:	6879      	ldr	r1, [r7, #4]
     da6:	01d2      	lsls	r2, r2, #7
     da8:	440a      	add	r2, r1
     daa:	4413      	add	r3, r2
     dac:	3330      	adds	r3, #48	; 0x30
     dae:	781b      	ldrb	r3, [r3, #0]
     db0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     db2:	7bfb      	ldrb	r3, [r7, #15]
     db4:	f023 030f 	bic.w	r3, r3, #15
     db8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     dba:	787b      	ldrb	r3, [r7, #1]
     dbc:	f003 030f 	and.w	r3, r3, #15
     dc0:	b2da      	uxtb	r2, r3
     dc2:	7bfb      	ldrb	r3, [r7, #15]
     dc4:	4313      	orrs	r3, r2
     dc6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dc8:	78fa      	ldrb	r2, [r7, #3]
     dca:	78bb      	ldrb	r3, [r7, #2]
     dcc:	6879      	ldr	r1, [r7, #4]
     dce:	01d2      	lsls	r2, r2, #7
     dd0:	440a      	add	r2, r1
     dd2:	4413      	add	r3, r2
     dd4:	3330      	adds	r3, #48	; 0x30
     dd6:	7bfa      	ldrb	r2, [r7, #15]
     dd8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     dda:	bf00      	nop
     ddc:	3714      	adds	r7, #20
     dde:	46bd      	mov	sp, r7
     de0:	f85d 7b04 	ldr.w	r7, [sp], #4
     de4:	4770      	bx	lr

00000de6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     de6:	b480      	push	{r7}
     de8:	b085      	sub	sp, #20
     dea:	af00      	add	r7, sp, #0
     dec:	6078      	str	r0, [r7, #4]
     dee:	4608      	mov	r0, r1
     df0:	4611      	mov	r1, r2
     df2:	461a      	mov	r2, r3
     df4:	4603      	mov	r3, r0
     df6:	70fb      	strb	r3, [r7, #3]
     df8:	460b      	mov	r3, r1
     dfa:	70bb      	strb	r3, [r7, #2]
     dfc:	4613      	mov	r3, r2
     dfe:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e00:	78fa      	ldrb	r2, [r7, #3]
     e02:	78bb      	ldrb	r3, [r7, #2]
     e04:	6879      	ldr	r1, [r7, #4]
     e06:	01d2      	lsls	r2, r2, #7
     e08:	440a      	add	r2, r1
     e0a:	4413      	add	r3, r2
     e0c:	3330      	adds	r3, #48	; 0x30
     e0e:	781b      	ldrb	r3, [r3, #0]
     e10:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e12:	7bfb      	ldrb	r3, [r7, #15]
     e14:	f003 030f 	and.w	r3, r3, #15
     e18:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     e1a:	787b      	ldrb	r3, [r7, #1]
     e1c:	011b      	lsls	r3, r3, #4
     e1e:	b2da      	uxtb	r2, r3
     e20:	7bfb      	ldrb	r3, [r7, #15]
     e22:	4313      	orrs	r3, r2
     e24:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e26:	78fa      	ldrb	r2, [r7, #3]
     e28:	78bb      	ldrb	r3, [r7, #2]
     e2a:	6879      	ldr	r1, [r7, #4]
     e2c:	01d2      	lsls	r2, r2, #7
     e2e:	440a      	add	r2, r1
     e30:	4413      	add	r3, r2
     e32:	3330      	adds	r3, #48	; 0x30
     e34:	7bfa      	ldrb	r2, [r7, #15]
     e36:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e38:	bf00      	nop
     e3a:	3714      	adds	r7, #20
     e3c:	46bd      	mov	sp, r7
     e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
     e42:	4770      	bx	lr

00000e44 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     e44:	b480      	push	{r7}
     e46:	b085      	sub	sp, #20
     e48:	af00      	add	r7, sp, #0
     e4a:	6078      	str	r0, [r7, #4]
     e4c:	4608      	mov	r0, r1
     e4e:	4611      	mov	r1, r2
     e50:	461a      	mov	r2, r3
     e52:	4603      	mov	r3, r0
     e54:	70fb      	strb	r3, [r7, #3]
     e56:	460b      	mov	r3, r1
     e58:	70bb      	strb	r3, [r7, #2]
     e5a:	4613      	mov	r3, r2
     e5c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e5e:	78fa      	ldrb	r2, [r7, #3]
     e60:	78bb      	ldrb	r3, [r7, #2]
     e62:	6879      	ldr	r1, [r7, #4]
     e64:	01d2      	lsls	r2, r2, #7
     e66:	440a      	add	r2, r1
     e68:	4413      	add	r3, r2
     e6a:	3340      	adds	r3, #64	; 0x40
     e6c:	781b      	ldrb	r3, [r3, #0]
     e6e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e70:	7bfb      	ldrb	r3, [r7, #15]
     e72:	f023 0301 	bic.w	r3, r3, #1
     e76:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e78:	787a      	ldrb	r2, [r7, #1]
     e7a:	7bfb      	ldrb	r3, [r7, #15]
     e7c:	4313      	orrs	r3, r2
     e7e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e80:	78fa      	ldrb	r2, [r7, #3]
     e82:	78bb      	ldrb	r3, [r7, #2]
     e84:	6879      	ldr	r1, [r7, #4]
     e86:	01d2      	lsls	r2, r2, #7
     e88:	440a      	add	r2, r1
     e8a:	4413      	add	r3, r2
     e8c:	3340      	adds	r3, #64	; 0x40
     e8e:	7bfa      	ldrb	r2, [r7, #15]
     e90:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e92:	bf00      	nop
     e94:	3714      	adds	r7, #20
     e96:	46bd      	mov	sp, r7
     e98:	f85d 7b04 	ldr.w	r7, [sp], #4
     e9c:	4770      	bx	lr

00000e9e <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     e9e:	b490      	push	{r4, r7}
     ea0:	b082      	sub	sp, #8
     ea2:	af00      	add	r7, sp, #0
     ea4:	6078      	str	r0, [r7, #4]
     ea6:	460b      	mov	r3, r1
     ea8:	70fb      	strb	r3, [r7, #3]
     eaa:	4613      	mov	r3, r2
     eac:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     eae:	78fa      	ldrb	r2, [r7, #3]
     eb0:	78bb      	ldrb	r3, [r7, #2]
     eb2:	78f8      	ldrb	r0, [r7, #3]
     eb4:	78b9      	ldrb	r1, [r7, #2]
     eb6:	687c      	ldr	r4, [r7, #4]
     eb8:	01c0      	lsls	r0, r0, #7
     eba:	4420      	add	r0, r4
     ebc:	4401      	add	r1, r0
     ebe:	3140      	adds	r1, #64	; 0x40
     ec0:	7809      	ldrb	r1, [r1, #0]
     ec2:	b2c9      	uxtb	r1, r1
     ec4:	f041 0104 	orr.w	r1, r1, #4
     ec8:	b2c8      	uxtb	r0, r1
     eca:	6879      	ldr	r1, [r7, #4]
     ecc:	01d2      	lsls	r2, r2, #7
     ece:	440a      	add	r2, r1
     ed0:	4413      	add	r3, r2
     ed2:	3340      	adds	r3, #64	; 0x40
     ed4:	4602      	mov	r2, r0
     ed6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ed8:	bf00      	nop
     eda:	3708      	adds	r7, #8
     edc:	46bd      	mov	sp, r7
     ede:	bc90      	pop	{r4, r7}
     ee0:	4770      	bx	lr

00000ee2 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     ee2:	b490      	push	{r4, r7}
     ee4:	b082      	sub	sp, #8
     ee6:	af00      	add	r7, sp, #0
     ee8:	6078      	str	r0, [r7, #4]
     eea:	460b      	mov	r3, r1
     eec:	70fb      	strb	r3, [r7, #3]
     eee:	4613      	mov	r3, r2
     ef0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ef2:	78fa      	ldrb	r2, [r7, #3]
     ef4:	78bb      	ldrb	r3, [r7, #2]
     ef6:	78f8      	ldrb	r0, [r7, #3]
     ef8:	78b9      	ldrb	r1, [r7, #2]
     efa:	687c      	ldr	r4, [r7, #4]
     efc:	01c0      	lsls	r0, r0, #7
     efe:	4420      	add	r0, r4
     f00:	4401      	add	r1, r0
     f02:	3140      	adds	r1, #64	; 0x40
     f04:	7809      	ldrb	r1, [r1, #0]
     f06:	b2c9      	uxtb	r1, r1
     f08:	f021 0104 	bic.w	r1, r1, #4
     f0c:	b2c8      	uxtb	r0, r1
     f0e:	6879      	ldr	r1, [r7, #4]
     f10:	01d2      	lsls	r2, r2, #7
     f12:	440a      	add	r2, r1
     f14:	4413      	add	r3, r2
     f16:	3340      	adds	r3, #64	; 0x40
     f18:	4602      	mov	r2, r0
     f1a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f1c:	bf00      	nop
     f1e:	3708      	adds	r7, #8
     f20:	46bd      	mov	sp, r7
     f22:	bc90      	pop	{r4, r7}
     f24:	4770      	bx	lr

00000f26 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     f26:	b480      	push	{r7}
     f28:	b085      	sub	sp, #20
     f2a:	af00      	add	r7, sp, #0
     f2c:	60f8      	str	r0, [r7, #12]
     f2e:	460b      	mov	r3, r1
     f30:	607a      	str	r2, [r7, #4]
     f32:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f34:	7afb      	ldrb	r3, [r7, #11]
     f36:	68fa      	ldr	r2, [r7, #12]
     f38:	01db      	lsls	r3, r3, #7
     f3a:	4413      	add	r3, r2
     f3c:	3328      	adds	r3, #40	; 0x28
     f3e:	687a      	ldr	r2, [r7, #4]
     f40:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f42:	bf00      	nop
     f44:	3714      	adds	r7, #20
     f46:	46bd      	mov	sp, r7
     f48:	f85d 7b04 	ldr.w	r7, [sp], #4
     f4c:	4770      	bx	lr
	...

00000f50 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     f50:	b580      	push	{r7, lr}
     f52:	b082      	sub	sp, #8
     f54:	af00      	add	r7, sp, #0
     f56:	4603      	mov	r3, r0
     f58:	6039      	str	r1, [r7, #0]
     f5a:	71fb      	strb	r3, [r7, #7]
     f5c:	4613      	mov	r3, r2
     f5e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     f60:	79bb      	ldrb	r3, [r7, #6]
     f62:	2b01      	cmp	r3, #1
     f64:	d01c      	beq.n	fa0 <_gpio_set_direction+0x50>
     f66:	2b02      	cmp	r3, #2
     f68:	d037      	beq.n	fda <_gpio_set_direction+0x8a>
     f6a:	2b00      	cmp	r3, #0
     f6c:	d14e      	bne.n	100c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     f6e:	79fb      	ldrb	r3, [r7, #7]
     f70:	683a      	ldr	r2, [r7, #0]
     f72:	4619      	mov	r1, r3
     f74:	482a      	ldr	r0, [pc, #168]	; (1020 <_gpio_set_direction+0xd0>)
     f76:	4b2b      	ldr	r3, [pc, #172]	; (1024 <_gpio_set_direction+0xd4>)
     f78:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     f7a:	683b      	ldr	r3, [r7, #0]
     f7c:	b29b      	uxth	r3, r3
     f7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     f82:	79fb      	ldrb	r3, [r7, #7]
     f84:	4619      	mov	r1, r3
     f86:	4826      	ldr	r0, [pc, #152]	; (1020 <_gpio_set_direction+0xd0>)
     f88:	4b27      	ldr	r3, [pc, #156]	; (1028 <_gpio_set_direction+0xd8>)
     f8a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     f8c:	683b      	ldr	r3, [r7, #0]
     f8e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     f90:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     f94:	79fb      	ldrb	r3, [r7, #7]
     f96:	4619      	mov	r1, r3
     f98:	4821      	ldr	r0, [pc, #132]	; (1020 <_gpio_set_direction+0xd0>)
     f9a:	4b23      	ldr	r3, [pc, #140]	; (1028 <_gpio_set_direction+0xd8>)
     f9c:	4798      	blx	r3
		break;
     f9e:	e03a      	b.n	1016 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     fa0:	79fb      	ldrb	r3, [r7, #7]
     fa2:	683a      	ldr	r2, [r7, #0]
     fa4:	4619      	mov	r1, r3
     fa6:	481e      	ldr	r0, [pc, #120]	; (1020 <_gpio_set_direction+0xd0>)
     fa8:	4b1e      	ldr	r3, [pc, #120]	; (1024 <_gpio_set_direction+0xd4>)
     faa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     fac:	683b      	ldr	r3, [r7, #0]
     fae:	b29b      	uxth	r3, r3
     fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     fb8:	79f9      	ldrb	r1, [r7, #7]
     fba:	461a      	mov	r2, r3
     fbc:	4818      	ldr	r0, [pc, #96]	; (1020 <_gpio_set_direction+0xd0>)
     fbe:	4b1a      	ldr	r3, [pc, #104]	; (1028 <_gpio_set_direction+0xd8>)
     fc0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     fc2:	683b      	ldr	r3, [r7, #0]
     fc4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     fc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     fce:	79f9      	ldrb	r1, [r7, #7]
     fd0:	461a      	mov	r2, r3
     fd2:	4813      	ldr	r0, [pc, #76]	; (1020 <_gpio_set_direction+0xd0>)
     fd4:	4b14      	ldr	r3, [pc, #80]	; (1028 <_gpio_set_direction+0xd8>)
     fd6:	4798      	blx	r3
		break;
     fd8:	e01d      	b.n	1016 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     fda:	79fb      	ldrb	r3, [r7, #7]
     fdc:	683a      	ldr	r2, [r7, #0]
     fde:	4619      	mov	r1, r3
     fe0:	480f      	ldr	r0, [pc, #60]	; (1020 <_gpio_set_direction+0xd0>)
     fe2:	4b12      	ldr	r3, [pc, #72]	; (102c <_gpio_set_direction+0xdc>)
     fe4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     fe6:	683b      	ldr	r3, [r7, #0]
     fe8:	b29b      	uxth	r3, r3
     fea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     fee:	79fb      	ldrb	r3, [r7, #7]
     ff0:	4619      	mov	r1, r3
     ff2:	480b      	ldr	r0, [pc, #44]	; (1020 <_gpio_set_direction+0xd0>)
     ff4:	4b0c      	ldr	r3, [pc, #48]	; (1028 <_gpio_set_direction+0xd8>)
     ff6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     ff8:	683b      	ldr	r3, [r7, #0]
     ffa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     ffc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1000:	79fb      	ldrb	r3, [r7, #7]
    1002:	4619      	mov	r1, r3
    1004:	4806      	ldr	r0, [pc, #24]	; (1020 <_gpio_set_direction+0xd0>)
    1006:	4b08      	ldr	r3, [pc, #32]	; (1028 <_gpio_set_direction+0xd8>)
    1008:	4798      	blx	r3
		break;
    100a:	e004      	b.n	1016 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    100c:	2246      	movs	r2, #70	; 0x46
    100e:	4908      	ldr	r1, [pc, #32]	; (1030 <_gpio_set_direction+0xe0>)
    1010:	2000      	movs	r0, #0
    1012:	4b08      	ldr	r3, [pc, #32]	; (1034 <_gpio_set_direction+0xe4>)
    1014:	4798      	blx	r3
	}
}
    1016:	bf00      	nop
    1018:	3708      	adds	r7, #8
    101a:	46bd      	mov	sp, r7
    101c:	bd80      	pop	{r7, pc}
    101e:	bf00      	nop
    1020:	41008000 	.word	0x41008000
    1024:	00000d0f 	.word	0x00000d0f
    1028:	00000f27 	.word	0x00000f27
    102c:	00000ce7 	.word	0x00000ce7
    1030:	0000ec8c 	.word	0x0000ec8c
    1034:	00003911 	.word	0x00003911

00001038 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1038:	b580      	push	{r7, lr}
    103a:	b082      	sub	sp, #8
    103c:	af00      	add	r7, sp, #0
    103e:	4603      	mov	r3, r0
    1040:	6039      	str	r1, [r7, #0]
    1042:	71fb      	strb	r3, [r7, #7]
    1044:	4613      	mov	r3, r2
    1046:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1048:	79bb      	ldrb	r3, [r7, #6]
    104a:	2b00      	cmp	r3, #0
    104c:	d006      	beq.n	105c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    104e:	79fb      	ldrb	r3, [r7, #7]
    1050:	683a      	ldr	r2, [r7, #0]
    1052:	4619      	mov	r1, r3
    1054:	4806      	ldr	r0, [pc, #24]	; (1070 <_gpio_set_level+0x38>)
    1056:	4b07      	ldr	r3, [pc, #28]	; (1074 <_gpio_set_level+0x3c>)
    1058:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    105a:	e005      	b.n	1068 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    105c:	79fb      	ldrb	r3, [r7, #7]
    105e:	683a      	ldr	r2, [r7, #0]
    1060:	4619      	mov	r1, r3
    1062:	4803      	ldr	r0, [pc, #12]	; (1070 <_gpio_set_level+0x38>)
    1064:	4b04      	ldr	r3, [pc, #16]	; (1078 <_gpio_set_level+0x40>)
    1066:	4798      	blx	r3
}
    1068:	bf00      	nop
    106a:	3708      	adds	r7, #8
    106c:	46bd      	mov	sp, r7
    106e:	bd80      	pop	{r7, pc}
    1070:	41008000 	.word	0x41008000
    1074:	00000d37 	.word	0x00000d37
    1078:	00000d5f 	.word	0x00000d5f

0000107c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    107c:	b580      	push	{r7, lr}
    107e:	b082      	sub	sp, #8
    1080:	af00      	add	r7, sp, #0
    1082:	4603      	mov	r3, r0
    1084:	71fb      	strb	r3, [r7, #7]
    1086:	460b      	mov	r3, r1
    1088:	71bb      	strb	r3, [r7, #6]
    108a:	4613      	mov	r3, r2
    108c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    108e:	797b      	ldrb	r3, [r7, #5]
    1090:	2b01      	cmp	r3, #1
    1092:	d00a      	beq.n	10aa <_gpio_set_pin_pull_mode+0x2e>
    1094:	2b02      	cmp	r3, #2
    1096:	d01f      	beq.n	10d8 <_gpio_set_pin_pull_mode+0x5c>
    1098:	2b00      	cmp	r3, #0
    109a:	d134      	bne.n	1106 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    109c:	79ba      	ldrb	r2, [r7, #6]
    109e:	79fb      	ldrb	r3, [r7, #7]
    10a0:	4619      	mov	r1, r3
    10a2:	481e      	ldr	r0, [pc, #120]	; (111c <_gpio_set_pin_pull_mode+0xa0>)
    10a4:	4b1e      	ldr	r3, [pc, #120]	; (1120 <_gpio_set_pin_pull_mode+0xa4>)
    10a6:	4798      	blx	r3
		break;
    10a8:	e033      	b.n	1112 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    10aa:	79bb      	ldrb	r3, [r7, #6]
    10ac:	2201      	movs	r2, #1
    10ae:	409a      	lsls	r2, r3
    10b0:	79fb      	ldrb	r3, [r7, #7]
    10b2:	4619      	mov	r1, r3
    10b4:	4819      	ldr	r0, [pc, #100]	; (111c <_gpio_set_pin_pull_mode+0xa0>)
    10b6:	4b1b      	ldr	r3, [pc, #108]	; (1124 <_gpio_set_pin_pull_mode+0xa8>)
    10b8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    10ba:	79ba      	ldrb	r2, [r7, #6]
    10bc:	79fb      	ldrb	r3, [r7, #7]
    10be:	4619      	mov	r1, r3
    10c0:	4816      	ldr	r0, [pc, #88]	; (111c <_gpio_set_pin_pull_mode+0xa0>)
    10c2:	4b19      	ldr	r3, [pc, #100]	; (1128 <_gpio_set_pin_pull_mode+0xac>)
    10c4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    10c6:	79bb      	ldrb	r3, [r7, #6]
    10c8:	2201      	movs	r2, #1
    10ca:	409a      	lsls	r2, r3
    10cc:	79fb      	ldrb	r3, [r7, #7]
    10ce:	4619      	mov	r1, r3
    10d0:	4812      	ldr	r0, [pc, #72]	; (111c <_gpio_set_pin_pull_mode+0xa0>)
    10d2:	4b16      	ldr	r3, [pc, #88]	; (112c <_gpio_set_pin_pull_mode+0xb0>)
    10d4:	4798      	blx	r3
		break;
    10d6:	e01c      	b.n	1112 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    10d8:	79bb      	ldrb	r3, [r7, #6]
    10da:	2201      	movs	r2, #1
    10dc:	409a      	lsls	r2, r3
    10de:	79fb      	ldrb	r3, [r7, #7]
    10e0:	4619      	mov	r1, r3
    10e2:	480e      	ldr	r0, [pc, #56]	; (111c <_gpio_set_pin_pull_mode+0xa0>)
    10e4:	4b0f      	ldr	r3, [pc, #60]	; (1124 <_gpio_set_pin_pull_mode+0xa8>)
    10e6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    10e8:	79ba      	ldrb	r2, [r7, #6]
    10ea:	79fb      	ldrb	r3, [r7, #7]
    10ec:	4619      	mov	r1, r3
    10ee:	480b      	ldr	r0, [pc, #44]	; (111c <_gpio_set_pin_pull_mode+0xa0>)
    10f0:	4b0d      	ldr	r3, [pc, #52]	; (1128 <_gpio_set_pin_pull_mode+0xac>)
    10f2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    10f4:	79bb      	ldrb	r3, [r7, #6]
    10f6:	2201      	movs	r2, #1
    10f8:	409a      	lsls	r2, r3
    10fa:	79fb      	ldrb	r3, [r7, #7]
    10fc:	4619      	mov	r1, r3
    10fe:	4807      	ldr	r0, [pc, #28]	; (111c <_gpio_set_pin_pull_mode+0xa0>)
    1100:	4b0b      	ldr	r3, [pc, #44]	; (1130 <_gpio_set_pin_pull_mode+0xb4>)
    1102:	4798      	blx	r3
		break;
    1104:	e005      	b.n	1112 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1106:	2289      	movs	r2, #137	; 0x89
    1108:	490a      	ldr	r1, [pc, #40]	; (1134 <_gpio_set_pin_pull_mode+0xb8>)
    110a:	2000      	movs	r0, #0
    110c:	4b0a      	ldr	r3, [pc, #40]	; (1138 <_gpio_set_pin_pull_mode+0xbc>)
    110e:	4798      	blx	r3
		break;
    1110:	bf00      	nop
	}
}
    1112:	bf00      	nop
    1114:	3708      	adds	r7, #8
    1116:	46bd      	mov	sp, r7
    1118:	bd80      	pop	{r7, pc}
    111a:	bf00      	nop
    111c:	41008000 	.word	0x41008000
    1120:	00000ee3 	.word	0x00000ee3
    1124:	00000d0f 	.word	0x00000d0f
    1128:	00000e9f 	.word	0x00000e9f
    112c:	00000d37 	.word	0x00000d37
    1130:	00000d5f 	.word	0x00000d5f
    1134:	0000ec8c 	.word	0x0000ec8c
    1138:	00003911 	.word	0x00003911

0000113c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    113c:	b590      	push	{r4, r7, lr}
    113e:	b085      	sub	sp, #20
    1140:	af00      	add	r7, sp, #0
    1142:	6078      	str	r0, [r7, #4]
    1144:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1146:	687b      	ldr	r3, [r7, #4]
    1148:	095b      	lsrs	r3, r3, #5
    114a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	b2db      	uxtb	r3, r3
    1150:	f003 031f 	and.w	r3, r3, #31
    1154:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1156:	683b      	ldr	r3, [r7, #0]
    1158:	f1b3 3fff 	cmp.w	r3, #4294967295
    115c:	d106      	bne.n	116c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    115e:	7bba      	ldrb	r2, [r7, #14]
    1160:	7bf9      	ldrb	r1, [r7, #15]
    1162:	2300      	movs	r3, #0
    1164:	4812      	ldr	r0, [pc, #72]	; (11b0 <_gpio_set_pin_function+0x74>)
    1166:	4c13      	ldr	r4, [pc, #76]	; (11b4 <_gpio_set_pin_function+0x78>)
    1168:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    116a:	e01d      	b.n	11a8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    116c:	7bba      	ldrb	r2, [r7, #14]
    116e:	7bf9      	ldrb	r1, [r7, #15]
    1170:	2301      	movs	r3, #1
    1172:	480f      	ldr	r0, [pc, #60]	; (11b0 <_gpio_set_pin_function+0x74>)
    1174:	4c0f      	ldr	r4, [pc, #60]	; (11b4 <_gpio_set_pin_function+0x78>)
    1176:	47a0      	blx	r4
		if (pin & 1) {
    1178:	7bbb      	ldrb	r3, [r7, #14]
    117a:	f003 0301 	and.w	r3, r3, #1
    117e:	2b00      	cmp	r3, #0
    1180:	d009      	beq.n	1196 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1182:	7bbb      	ldrb	r3, [r7, #14]
    1184:	085b      	lsrs	r3, r3, #1
    1186:	b2da      	uxtb	r2, r3
    1188:	683b      	ldr	r3, [r7, #0]
    118a:	b2db      	uxtb	r3, r3
    118c:	7bf9      	ldrb	r1, [r7, #15]
    118e:	4808      	ldr	r0, [pc, #32]	; (11b0 <_gpio_set_pin_function+0x74>)
    1190:	4c09      	ldr	r4, [pc, #36]	; (11b8 <_gpio_set_pin_function+0x7c>)
    1192:	47a0      	blx	r4
}
    1194:	e008      	b.n	11a8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1196:	7bbb      	ldrb	r3, [r7, #14]
    1198:	085b      	lsrs	r3, r3, #1
    119a:	b2da      	uxtb	r2, r3
    119c:	683b      	ldr	r3, [r7, #0]
    119e:	b2db      	uxtb	r3, r3
    11a0:	7bf9      	ldrb	r1, [r7, #15]
    11a2:	4803      	ldr	r0, [pc, #12]	; (11b0 <_gpio_set_pin_function+0x74>)
    11a4:	4c05      	ldr	r4, [pc, #20]	; (11bc <_gpio_set_pin_function+0x80>)
    11a6:	47a0      	blx	r4
}
    11a8:	bf00      	nop
    11aa:	3714      	adds	r7, #20
    11ac:	46bd      	mov	sp, r7
    11ae:	bd90      	pop	{r4, r7, pc}
    11b0:	41008000 	.word	0x41008000
    11b4:	00000e45 	.word	0x00000e45
    11b8:	00000de7 	.word	0x00000de7
    11bc:	00000d87 	.word	0x00000d87

000011c0 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    11c0:	b580      	push	{r7, lr}
    11c2:	b082      	sub	sp, #8
    11c4:	af00      	add	r7, sp, #0
    11c6:	4603      	mov	r3, r0
    11c8:	460a      	mov	r2, r1
    11ca:	71fb      	strb	r3, [r7, #7]
    11cc:	4613      	mov	r3, r2
    11ce:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    11d0:	79fb      	ldrb	r3, [r7, #7]
    11d2:	095b      	lsrs	r3, r3, #5
    11d4:	b2d8      	uxtb	r0, r3
    11d6:	79fb      	ldrb	r3, [r7, #7]
    11d8:	f003 031f 	and.w	r3, r3, #31
    11dc:	b2db      	uxtb	r3, r3
    11de:	79ba      	ldrb	r2, [r7, #6]
    11e0:	4619      	mov	r1, r3
    11e2:	4b03      	ldr	r3, [pc, #12]	; (11f0 <gpio_set_pin_pull_mode+0x30>)
    11e4:	4798      	blx	r3
}
    11e6:	bf00      	nop
    11e8:	3708      	adds	r7, #8
    11ea:	46bd      	mov	sp, r7
    11ec:	bd80      	pop	{r7, pc}
    11ee:	bf00      	nop
    11f0:	0000107d 	.word	0x0000107d

000011f4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    11f4:	b580      	push	{r7, lr}
    11f6:	b082      	sub	sp, #8
    11f8:	af00      	add	r7, sp, #0
    11fa:	6078      	str	r0, [r7, #4]
    11fc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    11fe:	6839      	ldr	r1, [r7, #0]
    1200:	6878      	ldr	r0, [r7, #4]
    1202:	4b03      	ldr	r3, [pc, #12]	; (1210 <gpio_set_pin_function+0x1c>)
    1204:	4798      	blx	r3
}
    1206:	bf00      	nop
    1208:	3708      	adds	r7, #8
    120a:	46bd      	mov	sp, r7
    120c:	bd80      	pop	{r7, pc}
    120e:	bf00      	nop
    1210:	0000113d 	.word	0x0000113d

00001214 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1214:	b580      	push	{r7, lr}
    1216:	b082      	sub	sp, #8
    1218:	af00      	add	r7, sp, #0
    121a:	4603      	mov	r3, r0
    121c:	460a      	mov	r2, r1
    121e:	71fb      	strb	r3, [r7, #7]
    1220:	4613      	mov	r3, r2
    1222:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1224:	79fb      	ldrb	r3, [r7, #7]
    1226:	095b      	lsrs	r3, r3, #5
    1228:	b2d8      	uxtb	r0, r3
    122a:	79fb      	ldrb	r3, [r7, #7]
    122c:	f003 031f 	and.w	r3, r3, #31
    1230:	2201      	movs	r2, #1
    1232:	fa02 f303 	lsl.w	r3, r2, r3
    1236:	79ba      	ldrb	r2, [r7, #6]
    1238:	4619      	mov	r1, r3
    123a:	4b03      	ldr	r3, [pc, #12]	; (1248 <gpio_set_pin_direction+0x34>)
    123c:	4798      	blx	r3
}
    123e:	bf00      	nop
    1240:	3708      	adds	r7, #8
    1242:	46bd      	mov	sp, r7
    1244:	bd80      	pop	{r7, pc}
    1246:	bf00      	nop
    1248:	00000f51 	.word	0x00000f51

0000124c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    124c:	b580      	push	{r7, lr}
    124e:	b082      	sub	sp, #8
    1250:	af00      	add	r7, sp, #0
    1252:	4603      	mov	r3, r0
    1254:	460a      	mov	r2, r1
    1256:	71fb      	strb	r3, [r7, #7]
    1258:	4613      	mov	r3, r2
    125a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    125c:	79fb      	ldrb	r3, [r7, #7]
    125e:	095b      	lsrs	r3, r3, #5
    1260:	b2d8      	uxtb	r0, r3
    1262:	79fb      	ldrb	r3, [r7, #7]
    1264:	f003 031f 	and.w	r3, r3, #31
    1268:	2201      	movs	r2, #1
    126a:	fa02 f303 	lsl.w	r3, r2, r3
    126e:	79ba      	ldrb	r2, [r7, #6]
    1270:	4619      	mov	r1, r3
    1272:	4b03      	ldr	r3, [pc, #12]	; (1280 <gpio_set_pin_level+0x34>)
    1274:	4798      	blx	r3
}
    1276:	bf00      	nop
    1278:	3708      	adds	r7, #8
    127a:	46bd      	mov	sp, r7
    127c:	bd80      	pop	{r7, pc}
    127e:	bf00      	nop
    1280:	00001039 	.word	0x00001039

00001284 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1284:	b580      	push	{r7, lr}
    1286:	af00      	add	r7, sp, #0
	_init_chip();
    1288:	4b01      	ldr	r3, [pc, #4]	; (1290 <init_mcu+0xc>)
    128a:	4798      	blx	r3
}
    128c:	bf00      	nop
    128e:	bd80      	pop	{r7, pc}
    1290:	00004519 	.word	0x00004519

00001294 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1294:	b580      	push	{r7, lr}
    1296:	b082      	sub	sp, #8
    1298:	af00      	add	r7, sp, #0
    129a:	6078      	str	r0, [r7, #4]
    129c:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    129e:	687b      	ldr	r3, [r7, #4]
    12a0:	2b00      	cmp	r3, #0
    12a2:	d004      	beq.n	12ae <wdt_init+0x1a>
    12a4:	683b      	ldr	r3, [r7, #0]
    12a6:	2b00      	cmp	r3, #0
    12a8:	d001      	beq.n	12ae <wdt_init+0x1a>
    12aa:	2301      	movs	r3, #1
    12ac:	e000      	b.n	12b0 <wdt_init+0x1c>
    12ae:	2300      	movs	r3, #0
    12b0:	f003 0301 	and.w	r3, r3, #1
    12b4:	b2db      	uxtb	r3, r3
    12b6:	2248      	movs	r2, #72	; 0x48
    12b8:	4907      	ldr	r1, [pc, #28]	; (12d8 <wdt_init+0x44>)
    12ba:	4618      	mov	r0, r3
    12bc:	4b07      	ldr	r3, [pc, #28]	; (12dc <wdt_init+0x48>)
    12be:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    12c0:	687b      	ldr	r3, [r7, #4]
    12c2:	683a      	ldr	r2, [r7, #0]
    12c4:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    12c6:	687b      	ldr	r3, [r7, #4]
    12c8:	4618      	mov	r0, r3
    12ca:	4b05      	ldr	r3, [pc, #20]	; (12e0 <wdt_init+0x4c>)
    12cc:	4798      	blx	r3
    12ce:	4603      	mov	r3, r0
}
    12d0:	4618      	mov	r0, r3
    12d2:	3708      	adds	r7, #8
    12d4:	46bd      	mov	sp, r7
    12d6:	bd80      	pop	{r7, pc}
    12d8:	0000eca8 	.word	0x0000eca8
    12dc:	00003911 	.word	0x00003911
    12e0:	0000abcd 	.word	0x0000abcd

000012e4 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    12e4:	b580      	push	{r7, lr}
    12e6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    12e8:	4804      	ldr	r0, [pc, #16]	; (12fc <CRC_CALC_init+0x18>)
    12ea:	4b05      	ldr	r3, [pc, #20]	; (1300 <CRC_CALC_init+0x1c>)
    12ec:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    12ee:	4905      	ldr	r1, [pc, #20]	; (1304 <CRC_CALC_init+0x20>)
    12f0:	4805      	ldr	r0, [pc, #20]	; (1308 <CRC_CALC_init+0x24>)
    12f2:	4b06      	ldr	r3, [pc, #24]	; (130c <CRC_CALC_init+0x28>)
    12f4:	4798      	blx	r3
}
    12f6:	bf00      	nop
    12f8:	bd80      	pop	{r7, pc}
    12fa:	bf00      	nop
    12fc:	40000800 	.word	0x40000800
    1300:	00000b87 	.word	0x00000b87
    1304:	41002000 	.word	0x41002000
    1308:	20000fc4 	.word	0x20000fc4
    130c:	00001f85 	.word	0x00001f85

00001310 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1310:	b580      	push	{r7, lr}
    1312:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1314:	2244      	movs	r2, #68	; 0x44
    1316:	2104      	movs	r1, #4
    1318:	481e      	ldr	r0, [pc, #120]	; (1394 <EXTERNAL_IRQ_0_init+0x84>)
    131a:	4b1f      	ldr	r3, [pc, #124]	; (1398 <EXTERNAL_IRQ_0_init+0x88>)
    131c:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    131e:	481f      	ldr	r0, [pc, #124]	; (139c <EXTERNAL_IRQ_0_init+0x8c>)
    1320:	4b1f      	ldr	r3, [pc, #124]	; (13a0 <EXTERNAL_IRQ_0_init+0x90>)
    1322:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    1324:	2101      	movs	r1, #1
    1326:	2004      	movs	r0, #4
    1328:	4b1e      	ldr	r3, [pc, #120]	; (13a4 <EXTERNAL_IRQ_0_init+0x94>)
    132a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    132c:	2102      	movs	r1, #2
    132e:	2004      	movs	r0, #4
    1330:	4b1d      	ldr	r3, [pc, #116]	; (13a8 <EXTERNAL_IRQ_0_init+0x98>)
    1332:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    1334:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1338:	2004      	movs	r0, #4
    133a:	4b1c      	ldr	r3, [pc, #112]	; (13ac <EXTERNAL_IRQ_0_init+0x9c>)
    133c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    133e:	2101      	movs	r1, #1
    1340:	2005      	movs	r0, #5
    1342:	4b18      	ldr	r3, [pc, #96]	; (13a4 <EXTERNAL_IRQ_0_init+0x94>)
    1344:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    1346:	2102      	movs	r1, #2
    1348:	2005      	movs	r0, #5
    134a:	4b17      	ldr	r3, [pc, #92]	; (13a8 <EXTERNAL_IRQ_0_init+0x98>)
    134c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    134e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1352:	2005      	movs	r0, #5
    1354:	4b15      	ldr	r3, [pc, #84]	; (13ac <EXTERNAL_IRQ_0_init+0x9c>)
    1356:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    1358:	2101      	movs	r1, #1
    135a:	2056      	movs	r0, #86	; 0x56
    135c:	4b11      	ldr	r3, [pc, #68]	; (13a4 <EXTERNAL_IRQ_0_init+0x94>)
    135e:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    1360:	2102      	movs	r1, #2
    1362:	2056      	movs	r0, #86	; 0x56
    1364:	4b10      	ldr	r3, [pc, #64]	; (13a8 <EXTERNAL_IRQ_0_init+0x98>)
    1366:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    1368:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    136c:	2056      	movs	r0, #86	; 0x56
    136e:	4b0f      	ldr	r3, [pc, #60]	; (13ac <EXTERNAL_IRQ_0_init+0x9c>)
    1370:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    1372:	2101      	movs	r1, #1
    1374:	2057      	movs	r0, #87	; 0x57
    1376:	4b0b      	ldr	r3, [pc, #44]	; (13a4 <EXTERNAL_IRQ_0_init+0x94>)
    1378:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    137a:	2102      	movs	r1, #2
    137c:	2057      	movs	r0, #87	; 0x57
    137e:	4b0a      	ldr	r3, [pc, #40]	; (13a8 <EXTERNAL_IRQ_0_init+0x98>)
    1380:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    1382:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1386:	2057      	movs	r0, #87	; 0x57
    1388:	4b08      	ldr	r3, [pc, #32]	; (13ac <EXTERNAL_IRQ_0_init+0x9c>)
    138a:	4798      	blx	r3

	ext_irq_init();
    138c:	4b08      	ldr	r3, [pc, #32]	; (13b0 <EXTERNAL_IRQ_0_init+0xa0>)
    138e:	4798      	blx	r3
}
    1390:	bf00      	nop
    1392:	bd80      	pop	{r7, pc}
    1394:	40001c00 	.word	0x40001c00
    1398:	000009e1 	.word	0x000009e1
    139c:	40000800 	.word	0x40000800
    13a0:	00000ac7 	.word	0x00000ac7
    13a4:	00001215 	.word	0x00001215
    13a8:	000011c1 	.word	0x000011c1
    13ac:	000011f5 	.word	0x000011f5
    13b0:	0000204d 	.word	0x0000204d

000013b4 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    13b4:	b580      	push	{r7, lr}
    13b6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13b8:	2244      	movs	r2, #68	; 0x44
    13ba:	210b      	movs	r1, #11
    13bc:	4804      	ldr	r0, [pc, #16]	; (13d0 <EVENT_SYSTEM_0_init+0x1c>)
    13be:	4b05      	ldr	r3, [pc, #20]	; (13d4 <EVENT_SYSTEM_0_init+0x20>)
    13c0:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    13c2:	4805      	ldr	r0, [pc, #20]	; (13d8 <EVENT_SYSTEM_0_init+0x24>)
    13c4:	4b05      	ldr	r3, [pc, #20]	; (13dc <EVENT_SYSTEM_0_init+0x28>)
    13c6:	4798      	blx	r3

	event_system_init();
    13c8:	4b05      	ldr	r3, [pc, #20]	; (13e0 <EVENT_SYSTEM_0_init+0x2c>)
    13ca:	4798      	blx	r3
}
    13cc:	bf00      	nop
    13ce:	bd80      	pop	{r7, pc}
    13d0:	40001c00 	.word	0x40001c00
    13d4:	000009e1 	.word	0x000009e1
    13d8:	40000800 	.word	0x40000800
    13dc:	00000ba7 	.word	0x00000ba7
    13e0:	00002039 	.word	0x00002039

000013e4 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    13e4:	b580      	push	{r7, lr}
    13e6:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    13e8:	2101      	movs	r1, #1
    13ea:	202b      	movs	r0, #43	; 0x2b
    13ec:	4b2b      	ldr	r3, [pc, #172]	; (149c <QSPI_N25Q256_PORT_init+0xb8>)
    13ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    13f0:	2100      	movs	r1, #0
    13f2:	202b      	movs	r0, #43	; 0x2b
    13f4:	4b2a      	ldr	r3, [pc, #168]	; (14a0 <QSPI_N25Q256_PORT_init+0xbc>)
    13f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    13f8:	492a      	ldr	r1, [pc, #168]	; (14a4 <QSPI_N25Q256_PORT_init+0xc0>)
    13fa:	202b      	movs	r0, #43	; 0x2b
    13fc:	4b2a      	ldr	r3, [pc, #168]	; (14a8 <QSPI_N25Q256_PORT_init+0xc4>)
    13fe:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1400:	2102      	movs	r1, #2
    1402:	2008      	movs	r0, #8
    1404:	4b25      	ldr	r3, [pc, #148]	; (149c <QSPI_N25Q256_PORT_init+0xb8>)
    1406:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1408:	2100      	movs	r1, #0
    140a:	2008      	movs	r0, #8
    140c:	4b27      	ldr	r3, [pc, #156]	; (14ac <QSPI_N25Q256_PORT_init+0xc8>)
    140e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1410:	2100      	movs	r1, #0
    1412:	2008      	movs	r0, #8
    1414:	4b22      	ldr	r3, [pc, #136]	; (14a0 <QSPI_N25Q256_PORT_init+0xbc>)
    1416:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1418:	4925      	ldr	r1, [pc, #148]	; (14b0 <QSPI_N25Q256_PORT_init+0xcc>)
    141a:	2008      	movs	r0, #8
    141c:	4b22      	ldr	r3, [pc, #136]	; (14a8 <QSPI_N25Q256_PORT_init+0xc4>)
    141e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1420:	2102      	movs	r1, #2
    1422:	2009      	movs	r0, #9
    1424:	4b1d      	ldr	r3, [pc, #116]	; (149c <QSPI_N25Q256_PORT_init+0xb8>)
    1426:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1428:	2100      	movs	r1, #0
    142a:	2009      	movs	r0, #9
    142c:	4b1f      	ldr	r3, [pc, #124]	; (14ac <QSPI_N25Q256_PORT_init+0xc8>)
    142e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1430:	2100      	movs	r1, #0
    1432:	2009      	movs	r0, #9
    1434:	4b1a      	ldr	r3, [pc, #104]	; (14a0 <QSPI_N25Q256_PORT_init+0xbc>)
    1436:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1438:	491e      	ldr	r1, [pc, #120]	; (14b4 <QSPI_N25Q256_PORT_init+0xd0>)
    143a:	2009      	movs	r0, #9
    143c:	4b1a      	ldr	r3, [pc, #104]	; (14a8 <QSPI_N25Q256_PORT_init+0xc4>)
    143e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1440:	2102      	movs	r1, #2
    1442:	200a      	movs	r0, #10
    1444:	4b15      	ldr	r3, [pc, #84]	; (149c <QSPI_N25Q256_PORT_init+0xb8>)
    1446:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1448:	2100      	movs	r1, #0
    144a:	200a      	movs	r0, #10
    144c:	4b17      	ldr	r3, [pc, #92]	; (14ac <QSPI_N25Q256_PORT_init+0xc8>)
    144e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1450:	2100      	movs	r1, #0
    1452:	200a      	movs	r0, #10
    1454:	4b12      	ldr	r3, [pc, #72]	; (14a0 <QSPI_N25Q256_PORT_init+0xbc>)
    1456:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1458:	4917      	ldr	r1, [pc, #92]	; (14b8 <QSPI_N25Q256_PORT_init+0xd4>)
    145a:	200a      	movs	r0, #10
    145c:	4b12      	ldr	r3, [pc, #72]	; (14a8 <QSPI_N25Q256_PORT_init+0xc4>)
    145e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1460:	2102      	movs	r1, #2
    1462:	200b      	movs	r0, #11
    1464:	4b0d      	ldr	r3, [pc, #52]	; (149c <QSPI_N25Q256_PORT_init+0xb8>)
    1466:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1468:	2100      	movs	r1, #0
    146a:	200b      	movs	r0, #11
    146c:	4b0f      	ldr	r3, [pc, #60]	; (14ac <QSPI_N25Q256_PORT_init+0xc8>)
    146e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1470:	2100      	movs	r1, #0
    1472:	200b      	movs	r0, #11
    1474:	4b0a      	ldr	r3, [pc, #40]	; (14a0 <QSPI_N25Q256_PORT_init+0xbc>)
    1476:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1478:	4910      	ldr	r1, [pc, #64]	; (14bc <QSPI_N25Q256_PORT_init+0xd8>)
    147a:	200b      	movs	r0, #11
    147c:	4b0a      	ldr	r3, [pc, #40]	; (14a8 <QSPI_N25Q256_PORT_init+0xc4>)
    147e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1480:	2101      	movs	r1, #1
    1482:	202a      	movs	r0, #42	; 0x2a
    1484:	4b05      	ldr	r3, [pc, #20]	; (149c <QSPI_N25Q256_PORT_init+0xb8>)
    1486:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1488:	2100      	movs	r1, #0
    148a:	202a      	movs	r0, #42	; 0x2a
    148c:	4b04      	ldr	r3, [pc, #16]	; (14a0 <QSPI_N25Q256_PORT_init+0xbc>)
    148e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1490:	490b      	ldr	r1, [pc, #44]	; (14c0 <QSPI_N25Q256_PORT_init+0xdc>)
    1492:	202a      	movs	r0, #42	; 0x2a
    1494:	4b04      	ldr	r3, [pc, #16]	; (14a8 <QSPI_N25Q256_PORT_init+0xc4>)
    1496:	4798      	blx	r3
}
    1498:	bf00      	nop
    149a:	bd80      	pop	{r7, pc}
    149c:	00001215 	.word	0x00001215
    14a0:	000011c1 	.word	0x000011c1
    14a4:	002b0007 	.word	0x002b0007
    14a8:	000011f5 	.word	0x000011f5
    14ac:	0000124d 	.word	0x0000124d
    14b0:	00080007 	.word	0x00080007
    14b4:	00090007 	.word	0x00090007
    14b8:	000a0007 	.word	0x000a0007
    14bc:	000b0007 	.word	0x000b0007
    14c0:	002a0007 	.word	0x002a0007

000014c4 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    14c8:	4805      	ldr	r0, [pc, #20]	; (14e0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    14ca:	4b06      	ldr	r3, [pc, #24]	; (14e4 <QSPI_N25Q256_CLOCK_init+0x20>)
    14cc:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    14ce:	4804      	ldr	r0, [pc, #16]	; (14e0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    14d0:	4b05      	ldr	r3, [pc, #20]	; (14e8 <QSPI_N25Q256_CLOCK_init+0x24>)
    14d2:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    14d4:	4802      	ldr	r0, [pc, #8]	; (14e0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    14d6:	4b05      	ldr	r3, [pc, #20]	; (14ec <QSPI_N25Q256_CLOCK_init+0x28>)
    14d8:	4798      	blx	r3
}
    14da:	bf00      	nop
    14dc:	bd80      	pop	{r7, pc}
    14de:	bf00      	nop
    14e0:	40000800 	.word	0x40000800
    14e4:	00000a27 	.word	0x00000a27
    14e8:	00000a67 	.word	0x00000a67
    14ec:	00000c47 	.word	0x00000c47

000014f0 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    14f0:	b580      	push	{r7, lr}
    14f2:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    14f4:	4b04      	ldr	r3, [pc, #16]	; (1508 <QSPI_N25Q256_init+0x18>)
    14f6:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    14f8:	4904      	ldr	r1, [pc, #16]	; (150c <QSPI_N25Q256_init+0x1c>)
    14fa:	4805      	ldr	r0, [pc, #20]	; (1510 <QSPI_N25Q256_init+0x20>)
    14fc:	4b05      	ldr	r3, [pc, #20]	; (1514 <QSPI_N25Q256_init+0x24>)
    14fe:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1500:	4b05      	ldr	r3, [pc, #20]	; (1518 <QSPI_N25Q256_init+0x28>)
    1502:	4798      	blx	r3
}
    1504:	bf00      	nop
    1506:	bd80      	pop	{r7, pc}
    1508:	000014c5 	.word	0x000014c5
    150c:	42003400 	.word	0x42003400
    1510:	20000e4c 	.word	0x20000e4c
    1514:	000023ed 	.word	0x000023ed
    1518:	000013e5 	.word	0x000013e5

0000151c <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    151c:	b580      	push	{r7, lr}
    151e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1520:	4802      	ldr	r0, [pc, #8]	; (152c <DATETIME_CLOCK_CLOCK_init+0x10>)
    1522:	4b03      	ldr	r3, [pc, #12]	; (1530 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1524:	4798      	blx	r3
}
    1526:	bf00      	nop
    1528:	bd80      	pop	{r7, pc}
    152a:	bf00      	nop
    152c:	40000800 	.word	0x40000800
    1530:	00000aa7 	.word	0x00000aa7

00001534 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1534:	b580      	push	{r7, lr}
    1536:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1538:	4b03      	ldr	r3, [pc, #12]	; (1548 <DATETIME_CLOCK_init+0x14>)
    153a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    153c:	4903      	ldr	r1, [pc, #12]	; (154c <DATETIME_CLOCK_init+0x18>)
    153e:	4804      	ldr	r0, [pc, #16]	; (1550 <DATETIME_CLOCK_init+0x1c>)
    1540:	4b04      	ldr	r3, [pc, #16]	; (1554 <DATETIME_CLOCK_init+0x20>)
    1542:	4798      	blx	r3
}
    1544:	bf00      	nop
    1546:	bd80      	pop	{r7, pc}
    1548:	0000151d 	.word	0x0000151d
    154c:	40002400 	.word	0x40002400
    1550:	20000fa0 	.word	0x20000fa0
    1554:	00001e29 	.word	0x00001e29

00001558 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1558:	b580      	push	{r7, lr}
    155a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC17,
    155c:	2100      	movs	r1, #0
    155e:	2051      	movs	r0, #81	; 0x51
    1560:	4b11      	ldr	r3, [pc, #68]	; (15a8 <SPI_HI3593_PORT_init+0x50>)
    1562:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC17, GPIO_DIRECTION_OUT);
    1564:	2102      	movs	r1, #2
    1566:	2051      	movs	r0, #81	; 0x51
    1568:	4b10      	ldr	r3, [pc, #64]	; (15ac <SPI_HI3593_PORT_init+0x54>)
    156a:	4798      	blx	r3

	gpio_set_pin_function(PC17, PINMUX_PC17D_SERCOM0_PAD0);
    156c:	4910      	ldr	r1, [pc, #64]	; (15b0 <SPI_HI3593_PORT_init+0x58>)
    156e:	2051      	movs	r0, #81	; 0x51
    1570:	4b10      	ldr	r3, [pc, #64]	; (15b4 <SPI_HI3593_PORT_init+0x5c>)
    1572:	4798      	blx	r3

	gpio_set_pin_level(PC16,
    1574:	2100      	movs	r1, #0
    1576:	2050      	movs	r0, #80	; 0x50
    1578:	4b0b      	ldr	r3, [pc, #44]	; (15a8 <SPI_HI3593_PORT_init+0x50>)
    157a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC16, GPIO_DIRECTION_OUT);
    157c:	2102      	movs	r1, #2
    157e:	2050      	movs	r0, #80	; 0x50
    1580:	4b0a      	ldr	r3, [pc, #40]	; (15ac <SPI_HI3593_PORT_init+0x54>)
    1582:	4798      	blx	r3

	gpio_set_pin_function(PC16, PINMUX_PC16D_SERCOM0_PAD1);
    1584:	490c      	ldr	r1, [pc, #48]	; (15b8 <SPI_HI3593_PORT_init+0x60>)
    1586:	2050      	movs	r0, #80	; 0x50
    1588:	4b0a      	ldr	r3, [pc, #40]	; (15b4 <SPI_HI3593_PORT_init+0x5c>)
    158a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    158c:	2101      	movs	r1, #1
    158e:	2006      	movs	r0, #6
    1590:	4b06      	ldr	r3, [pc, #24]	; (15ac <SPI_HI3593_PORT_init+0x54>)
    1592:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
    1594:	2100      	movs	r1, #0
    1596:	2006      	movs	r0, #6
    1598:	4b08      	ldr	r3, [pc, #32]	; (15bc <SPI_HI3593_PORT_init+0x64>)
    159a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
    159c:	4908      	ldr	r1, [pc, #32]	; (15c0 <SPI_HI3593_PORT_init+0x68>)
    159e:	2006      	movs	r0, #6
    15a0:	4b04      	ldr	r3, [pc, #16]	; (15b4 <SPI_HI3593_PORT_init+0x5c>)
    15a2:	4798      	blx	r3
}
    15a4:	bf00      	nop
    15a6:	bd80      	pop	{r7, pc}
    15a8:	0000124d 	.word	0x0000124d
    15ac:	00001215 	.word	0x00001215
    15b0:	00510003 	.word	0x00510003
    15b4:	000011f5 	.word	0x000011f5
    15b8:	00500003 	.word	0x00500003
    15bc:	000011c1 	.word	0x000011c1
    15c0:	00060003 	.word	0x00060003

000015c4 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    15c4:	b580      	push	{r7, lr}
    15c6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15c8:	2240      	movs	r2, #64	; 0x40
    15ca:	2107      	movs	r1, #7
    15cc:	4806      	ldr	r0, [pc, #24]	; (15e8 <SPI_HI3593_CLOCK_init+0x24>)
    15ce:	4b07      	ldr	r3, [pc, #28]	; (15ec <SPI_HI3593_CLOCK_init+0x28>)
    15d0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15d2:	2243      	movs	r2, #67	; 0x43
    15d4:	2103      	movs	r1, #3
    15d6:	4804      	ldr	r0, [pc, #16]	; (15e8 <SPI_HI3593_CLOCK_init+0x24>)
    15d8:	4b04      	ldr	r3, [pc, #16]	; (15ec <SPI_HI3593_CLOCK_init+0x28>)
    15da:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
    15dc:	4804      	ldr	r0, [pc, #16]	; (15f0 <SPI_HI3593_CLOCK_init+0x2c>)
    15de:	4b05      	ldr	r3, [pc, #20]	; (15f4 <SPI_HI3593_CLOCK_init+0x30>)
    15e0:	4798      	blx	r3
}
    15e2:	bf00      	nop
    15e4:	bd80      	pop	{r7, pc}
    15e6:	bf00      	nop
    15e8:	40001c00 	.word	0x40001c00
    15ec:	000009e1 	.word	0x000009e1
    15f0:	40000800 	.word	0x40000800
    15f4:	00000ae7 	.word	0x00000ae7

000015f8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    15f8:	b580      	push	{r7, lr}
    15fa:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    15fc:	4b04      	ldr	r3, [pc, #16]	; (1610 <SPI_HI3593_init+0x18>)
    15fe:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM0);
    1600:	4904      	ldr	r1, [pc, #16]	; (1614 <SPI_HI3593_init+0x1c>)
    1602:	4805      	ldr	r0, [pc, #20]	; (1618 <SPI_HI3593_init+0x20>)
    1604:	4b05      	ldr	r3, [pc, #20]	; (161c <SPI_HI3593_init+0x24>)
    1606:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1608:	4b05      	ldr	r3, [pc, #20]	; (1620 <SPI_HI3593_init+0x28>)
    160a:	4798      	blx	r3
}
    160c:	bf00      	nop
    160e:	bd80      	pop	{r7, pc}
    1610:	000015c5 	.word	0x000015c5
    1614:	40003000 	.word	0x40003000
    1618:	20000dd0 	.word	0x20000dd0
    161c:	000028c9 	.word	0x000028c9
    1620:	00001559 	.word	0x00001559

00001624 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    1624:	b580      	push	{r7, lr}
    1626:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    1628:	2100      	movs	r1, #0
    162a:	2010      	movs	r0, #16
    162c:	4b11      	ldr	r3, [pc, #68]	; (1674 <SPI_MEMORIES_PORT_init+0x50>)
    162e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    1630:	2102      	movs	r1, #2
    1632:	2010      	movs	r0, #16
    1634:	4b10      	ldr	r3, [pc, #64]	; (1678 <SPI_MEMORIES_PORT_init+0x54>)
    1636:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1638:	4910      	ldr	r1, [pc, #64]	; (167c <SPI_MEMORIES_PORT_init+0x58>)
    163a:	2010      	movs	r0, #16
    163c:	4b10      	ldr	r3, [pc, #64]	; (1680 <SPI_MEMORIES_PORT_init+0x5c>)
    163e:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    1640:	2100      	movs	r1, #0
    1642:	2011      	movs	r0, #17
    1644:	4b0b      	ldr	r3, [pc, #44]	; (1674 <SPI_MEMORIES_PORT_init+0x50>)
    1646:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    1648:	2102      	movs	r1, #2
    164a:	2011      	movs	r0, #17
    164c:	4b0a      	ldr	r3, [pc, #40]	; (1678 <SPI_MEMORIES_PORT_init+0x54>)
    164e:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1650:	490c      	ldr	r1, [pc, #48]	; (1684 <SPI_MEMORIES_PORT_init+0x60>)
    1652:	2011      	movs	r0, #17
    1654:	4b0a      	ldr	r3, [pc, #40]	; (1680 <SPI_MEMORIES_PORT_init+0x5c>)
    1656:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    1658:	2101      	movs	r1, #1
    165a:	2012      	movs	r0, #18
    165c:	4b06      	ldr	r3, [pc, #24]	; (1678 <SPI_MEMORIES_PORT_init+0x54>)
    165e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    1660:	2100      	movs	r1, #0
    1662:	2012      	movs	r0, #18
    1664:	4b08      	ldr	r3, [pc, #32]	; (1688 <SPI_MEMORIES_PORT_init+0x64>)
    1666:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    1668:	4908      	ldr	r1, [pc, #32]	; (168c <SPI_MEMORIES_PORT_init+0x68>)
    166a:	2012      	movs	r0, #18
    166c:	4b04      	ldr	r3, [pc, #16]	; (1680 <SPI_MEMORIES_PORT_init+0x5c>)
    166e:	4798      	blx	r3
}
    1670:	bf00      	nop
    1672:	bd80      	pop	{r7, pc}
    1674:	0000124d 	.word	0x0000124d
    1678:	00001215 	.word	0x00001215
    167c:	00100002 	.word	0x00100002
    1680:	000011f5 	.word	0x000011f5
    1684:	00110002 	.word	0x00110002
    1688:	000011c1 	.word	0x000011c1
    168c:	00120002 	.word	0x00120002

00001690 <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    1690:	b580      	push	{r7, lr}
    1692:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1694:	2245      	movs	r2, #69	; 0x45
    1696:	2108      	movs	r1, #8
    1698:	4806      	ldr	r0, [pc, #24]	; (16b4 <SPI_MEMORIES_CLOCK_init+0x24>)
    169a:	4b07      	ldr	r3, [pc, #28]	; (16b8 <SPI_MEMORIES_CLOCK_init+0x28>)
    169c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    169e:	224a      	movs	r2, #74	; 0x4a
    16a0:	2103      	movs	r1, #3
    16a2:	4804      	ldr	r0, [pc, #16]	; (16b4 <SPI_MEMORIES_CLOCK_init+0x24>)
    16a4:	4b04      	ldr	r3, [pc, #16]	; (16b8 <SPI_MEMORIES_CLOCK_init+0x28>)
    16a6:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    16a8:	4804      	ldr	r0, [pc, #16]	; (16bc <SPI_MEMORIES_CLOCK_init+0x2c>)
    16aa:	4b05      	ldr	r3, [pc, #20]	; (16c0 <SPI_MEMORIES_CLOCK_init+0x30>)
    16ac:	4798      	blx	r3
}
    16ae:	bf00      	nop
    16b0:	bd80      	pop	{r7, pc}
    16b2:	bf00      	nop
    16b4:	40001c00 	.word	0x40001c00
    16b8:	000009e1 	.word	0x000009e1
    16bc:	40000800 	.word	0x40000800
    16c0:	00000b07 	.word	0x00000b07

000016c4 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    16c4:	b580      	push	{r7, lr}
    16c6:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    16c8:	4b04      	ldr	r3, [pc, #16]	; (16dc <SPI_MEMORIES_init+0x18>)
    16ca:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    16cc:	4904      	ldr	r1, [pc, #16]	; (16e0 <SPI_MEMORIES_init+0x1c>)
    16ce:	4805      	ldr	r0, [pc, #20]	; (16e4 <SPI_MEMORIES_init+0x20>)
    16d0:	4b05      	ldr	r3, [pc, #20]	; (16e8 <SPI_MEMORIES_init+0x24>)
    16d2:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    16d4:	4b05      	ldr	r3, [pc, #20]	; (16ec <SPI_MEMORIES_init+0x28>)
    16d6:	4798      	blx	r3
}
    16d8:	bf00      	nop
    16da:	bd80      	pop	{r7, pc}
    16dc:	00001691 	.word	0x00001691
    16e0:	40003400 	.word	0x40003400
    16e4:	20000db8 	.word	0x20000db8
    16e8:	000028c9 	.word	0x000028c9
    16ec:	00001625 	.word	0x00001625

000016f0 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    16f4:	2100      	movs	r1, #0
    16f6:	203b      	movs	r0, #59	; 0x3b
    16f8:	4b11      	ldr	r3, [pc, #68]	; (1740 <SPI_TEMP_PORT_init+0x50>)
    16fa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    16fc:	2102      	movs	r1, #2
    16fe:	203b      	movs	r0, #59	; 0x3b
    1700:	4b10      	ldr	r3, [pc, #64]	; (1744 <SPI_TEMP_PORT_init+0x54>)
    1702:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1704:	4910      	ldr	r1, [pc, #64]	; (1748 <SPI_TEMP_PORT_init+0x58>)
    1706:	203b      	movs	r0, #59	; 0x3b
    1708:	4b10      	ldr	r3, [pc, #64]	; (174c <SPI_TEMP_PORT_init+0x5c>)
    170a:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    170c:	2100      	movs	r1, #0
    170e:	203a      	movs	r0, #58	; 0x3a
    1710:	4b0b      	ldr	r3, [pc, #44]	; (1740 <SPI_TEMP_PORT_init+0x50>)
    1712:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1714:	2102      	movs	r1, #2
    1716:	203a      	movs	r0, #58	; 0x3a
    1718:	4b0a      	ldr	r3, [pc, #40]	; (1744 <SPI_TEMP_PORT_init+0x54>)
    171a:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    171c:	490c      	ldr	r1, [pc, #48]	; (1750 <SPI_TEMP_PORT_init+0x60>)
    171e:	203a      	movs	r0, #58	; 0x3a
    1720:	4b0a      	ldr	r3, [pc, #40]	; (174c <SPI_TEMP_PORT_init+0x5c>)
    1722:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1724:	2101      	movs	r1, #1
    1726:	203c      	movs	r0, #60	; 0x3c
    1728:	4b06      	ldr	r3, [pc, #24]	; (1744 <SPI_TEMP_PORT_init+0x54>)
    172a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    172c:	2100      	movs	r1, #0
    172e:	203c      	movs	r0, #60	; 0x3c
    1730:	4b08      	ldr	r3, [pc, #32]	; (1754 <SPI_TEMP_PORT_init+0x64>)
    1732:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1734:	4908      	ldr	r1, [pc, #32]	; (1758 <SPI_TEMP_PORT_init+0x68>)
    1736:	203c      	movs	r0, #60	; 0x3c
    1738:	4b04      	ldr	r3, [pc, #16]	; (174c <SPI_TEMP_PORT_init+0x5c>)
    173a:	4798      	blx	r3
}
    173c:	bf00      	nop
    173e:	bd80      	pop	{r7, pc}
    1740:	0000124d 	.word	0x0000124d
    1744:	00001215 	.word	0x00001215
    1748:	003b0003 	.word	0x003b0003
    174c:	000011f5 	.word	0x000011f5
    1750:	003a0003 	.word	0x003a0003
    1754:	000011c1 	.word	0x000011c1
    1758:	003c0003 	.word	0x003c0003

0000175c <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    175c:	b580      	push	{r7, lr}
    175e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1760:	2240      	movs	r2, #64	; 0x40
    1762:	2122      	movs	r1, #34	; 0x22
    1764:	4806      	ldr	r0, [pc, #24]	; (1780 <SPI_TEMP_CLOCK_init+0x24>)
    1766:	4b07      	ldr	r3, [pc, #28]	; (1784 <SPI_TEMP_CLOCK_init+0x28>)
    1768:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    176a:	2243      	movs	r2, #67	; 0x43
    176c:	2103      	movs	r1, #3
    176e:	4804      	ldr	r0, [pc, #16]	; (1780 <SPI_TEMP_CLOCK_init+0x24>)
    1770:	4b04      	ldr	r3, [pc, #16]	; (1784 <SPI_TEMP_CLOCK_init+0x28>)
    1772:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1774:	4804      	ldr	r0, [pc, #16]	; (1788 <SPI_TEMP_CLOCK_init+0x2c>)
    1776:	4b05      	ldr	r3, [pc, #20]	; (178c <SPI_TEMP_CLOCK_init+0x30>)
    1778:	4798      	blx	r3
}
    177a:	bf00      	nop
    177c:	bd80      	pop	{r7, pc}
    177e:	bf00      	nop
    1780:	40001c00 	.word	0x40001c00
    1784:	000009e1 	.word	0x000009e1
    1788:	40000800 	.word	0x40000800
    178c:	00000c67 	.word	0x00000c67

00001790 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1790:	b580      	push	{r7, lr}
    1792:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1794:	4b05      	ldr	r3, [pc, #20]	; (17ac <SPI_TEMP_init+0x1c>)
    1796:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    1798:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    179c:	4804      	ldr	r0, [pc, #16]	; (17b0 <SPI_TEMP_init+0x20>)
    179e:	4b05      	ldr	r3, [pc, #20]	; (17b4 <SPI_TEMP_init+0x24>)
    17a0:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    17a2:	4b05      	ldr	r3, [pc, #20]	; (17b8 <SPI_TEMP_init+0x28>)
    17a4:	4798      	blx	r3
}
    17a6:	bf00      	nop
    17a8:	bd80      	pop	{r7, pc}
    17aa:	bf00      	nop
    17ac:	0000175d 	.word	0x0000175d
    17b0:	20000de8 	.word	0x20000de8
    17b4:	00002715 	.word	0x00002715
    17b8:	000016f1 	.word	0x000016f1

000017bc <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    17bc:	b580      	push	{r7, lr}
    17be:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    17c0:	2100      	movs	r1, #0
    17c2:	2017      	movs	r0, #23
    17c4:	4b07      	ldr	r3, [pc, #28]	; (17e4 <I2C_EXPANDER_PORT_init+0x28>)
    17c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    17c8:	4907      	ldr	r1, [pc, #28]	; (17e8 <I2C_EXPANDER_PORT_init+0x2c>)
    17ca:	2017      	movs	r0, #23
    17cc:	4b07      	ldr	r3, [pc, #28]	; (17ec <I2C_EXPANDER_PORT_init+0x30>)
    17ce:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    17d0:	2100      	movs	r1, #0
    17d2:	2016      	movs	r0, #22
    17d4:	4b03      	ldr	r3, [pc, #12]	; (17e4 <I2C_EXPANDER_PORT_init+0x28>)
    17d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    17d8:	4905      	ldr	r1, [pc, #20]	; (17f0 <I2C_EXPANDER_PORT_init+0x34>)
    17da:	2016      	movs	r0, #22
    17dc:	4b03      	ldr	r3, [pc, #12]	; (17ec <I2C_EXPANDER_PORT_init+0x30>)
    17de:	4798      	blx	r3
}
    17e0:	bf00      	nop
    17e2:	bd80      	pop	{r7, pc}
    17e4:	000011c1 	.word	0x000011c1
    17e8:	00170003 	.word	0x00170003
    17ec:	000011f5 	.word	0x000011f5
    17f0:	00160003 	.word	0x00160003

000017f4 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    17f4:	b580      	push	{r7, lr}
    17f6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17f8:	2242      	movs	r2, #66	; 0x42
    17fa:	2123      	movs	r1, #35	; 0x23
    17fc:	4806      	ldr	r0, [pc, #24]	; (1818 <I2C_EXPANDER_CLOCK_init+0x24>)
    17fe:	4b07      	ldr	r3, [pc, #28]	; (181c <I2C_EXPANDER_CLOCK_init+0x28>)
    1800:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1802:	2246      	movs	r2, #70	; 0x46
    1804:	2103      	movs	r1, #3
    1806:	4804      	ldr	r0, [pc, #16]	; (1818 <I2C_EXPANDER_CLOCK_init+0x24>)
    1808:	4b04      	ldr	r3, [pc, #16]	; (181c <I2C_EXPANDER_CLOCK_init+0x28>)
    180a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    180c:	4804      	ldr	r0, [pc, #16]	; (1820 <I2C_EXPANDER_CLOCK_init+0x2c>)
    180e:	4b05      	ldr	r3, [pc, #20]	; (1824 <I2C_EXPANDER_CLOCK_init+0x30>)
    1810:	4798      	blx	r3
}
    1812:	bf00      	nop
    1814:	bd80      	pop	{r7, pc}
    1816:	bf00      	nop
    1818:	40001c00 	.word	0x40001c00
    181c:	000009e1 	.word	0x000009e1
    1820:	40000800 	.word	0x40000800
    1824:	00000c87 	.word	0x00000c87

00001828 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1828:	b580      	push	{r7, lr}
    182a:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    182c:	4b04      	ldr	r3, [pc, #16]	; (1840 <I2C_EXPANDER_init+0x18>)
    182e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    1830:	4904      	ldr	r1, [pc, #16]	; (1844 <I2C_EXPANDER_init+0x1c>)
    1832:	4805      	ldr	r0, [pc, #20]	; (1848 <I2C_EXPANDER_init+0x20>)
    1834:	4b05      	ldr	r3, [pc, #20]	; (184c <I2C_EXPANDER_init+0x24>)
    1836:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1838:	4b05      	ldr	r3, [pc, #20]	; (1850 <I2C_EXPANDER_init+0x28>)
    183a:	4798      	blx	r3
}
    183c:	bf00      	nop
    183e:	bd80      	pop	{r7, pc}
    1840:	000017f5 	.word	0x000017f5
    1844:	43000400 	.word	0x43000400
    1848:	20000f04 	.word	0x20000f04
    184c:	00002259 	.word	0x00002259
    1850:	000017bd 	.word	0x000017bd

00001854 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1854:	b580      	push	{r7, lr}
    1856:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1858:	2100      	movs	r1, #0
    185a:	2068      	movs	r0, #104	; 0x68
    185c:	4b07      	ldr	r3, [pc, #28]	; (187c <I2C_EEPROM_PORT_init+0x28>)
    185e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1860:	4907      	ldr	r1, [pc, #28]	; (1880 <I2C_EEPROM_PORT_init+0x2c>)
    1862:	2068      	movs	r0, #104	; 0x68
    1864:	4b07      	ldr	r3, [pc, #28]	; (1884 <I2C_EEPROM_PORT_init+0x30>)
    1866:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1868:	2100      	movs	r1, #0
    186a:	2069      	movs	r0, #105	; 0x69
    186c:	4b03      	ldr	r3, [pc, #12]	; (187c <I2C_EEPROM_PORT_init+0x28>)
    186e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1870:	4905      	ldr	r1, [pc, #20]	; (1888 <I2C_EEPROM_PORT_init+0x34>)
    1872:	2069      	movs	r0, #105	; 0x69
    1874:	4b03      	ldr	r3, [pc, #12]	; (1884 <I2C_EEPROM_PORT_init+0x30>)
    1876:	4798      	blx	r3
}
    1878:	bf00      	nop
    187a:	bd80      	pop	{r7, pc}
    187c:	000011c1 	.word	0x000011c1
    1880:	00680002 	.word	0x00680002
    1884:	000011f5 	.word	0x000011f5
    1888:	00690002 	.word	0x00690002

0000188c <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    188c:	b580      	push	{r7, lr}
    188e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1890:	2242      	movs	r2, #66	; 0x42
    1892:	2125      	movs	r1, #37	; 0x25
    1894:	4806      	ldr	r0, [pc, #24]	; (18b0 <I2C_EEPROM_CLOCK_init+0x24>)
    1896:	4b07      	ldr	r3, [pc, #28]	; (18b4 <I2C_EEPROM_CLOCK_init+0x28>)
    1898:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    189a:	2243      	movs	r2, #67	; 0x43
    189c:	2103      	movs	r1, #3
    189e:	4804      	ldr	r0, [pc, #16]	; (18b0 <I2C_EEPROM_CLOCK_init+0x24>)
    18a0:	4b04      	ldr	r3, [pc, #16]	; (18b4 <I2C_EEPROM_CLOCK_init+0x28>)
    18a2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    18a4:	4804      	ldr	r0, [pc, #16]	; (18b8 <I2C_EEPROM_CLOCK_init+0x2c>)
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <I2C_EEPROM_CLOCK_init+0x30>)
    18a8:	4798      	blx	r3
}
    18aa:	bf00      	nop
    18ac:	bd80      	pop	{r7, pc}
    18ae:	bf00      	nop
    18b0:	40001c00 	.word	0x40001c00
    18b4:	000009e1 	.word	0x000009e1
    18b8:	40000800 	.word	0x40000800
    18bc:	00000ca7 	.word	0x00000ca7

000018c0 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    18c0:	b580      	push	{r7, lr}
    18c2:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    18c4:	4b04      	ldr	r3, [pc, #16]	; (18d8 <I2C_EEPROM_init+0x18>)
    18c6:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    18c8:	4904      	ldr	r1, [pc, #16]	; (18dc <I2C_EEPROM_init+0x1c>)
    18ca:	4805      	ldr	r0, [pc, #20]	; (18e0 <I2C_EEPROM_init+0x20>)
    18cc:	4b05      	ldr	r3, [pc, #20]	; (18e4 <I2C_EEPROM_init+0x24>)
    18ce:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    18d0:	4b05      	ldr	r3, [pc, #20]	; (18e8 <I2C_EEPROM_init+0x28>)
    18d2:	4798      	blx	r3
}
    18d4:	bf00      	nop
    18d6:	bd80      	pop	{r7, pc}
    18d8:	0000188d 	.word	0x0000188d
    18dc:	43000c00 	.word	0x43000c00
    18e0:	20000f60 	.word	0x20000f60
    18e4:	00002259 	.word	0x00002259
    18e8:	00001855 	.word	0x00001855

000018ec <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    18ec:	b580      	push	{r7, lr}
    18ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    18f0:	4808      	ldr	r0, [pc, #32]	; (1914 <TIMER_USB_init+0x28>)
    18f2:	4b09      	ldr	r3, [pc, #36]	; (1918 <TIMER_USB_init+0x2c>)
    18f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18f6:	2243      	movs	r2, #67	; 0x43
    18f8:	2109      	movs	r1, #9
    18fa:	4808      	ldr	r0, [pc, #32]	; (191c <TIMER_USB_init+0x30>)
    18fc:	4b08      	ldr	r3, [pc, #32]	; (1920 <TIMER_USB_init+0x34>)
    18fe:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1900:	4b08      	ldr	r3, [pc, #32]	; (1924 <TIMER_USB_init+0x38>)
    1902:	4798      	blx	r3
    1904:	4603      	mov	r3, r0
    1906:	461a      	mov	r2, r3
    1908:	4907      	ldr	r1, [pc, #28]	; (1928 <TIMER_USB_init+0x3c>)
    190a:	4808      	ldr	r0, [pc, #32]	; (192c <TIMER_USB_init+0x40>)
    190c:	4b08      	ldr	r3, [pc, #32]	; (1930 <TIMER_USB_init+0x44>)
    190e:	4798      	blx	r3
}
    1910:	bf00      	nop
    1912:	bd80      	pop	{r7, pc}
    1914:	40000800 	.word	0x40000800
    1918:	00000b27 	.word	0x00000b27
    191c:	40001c00 	.word	0x40001c00
    1920:	000009e1 	.word	0x000009e1
    1924:	00008039 	.word	0x00008039
    1928:	40003800 	.word	0x40003800
    192c:	20000ee8 	.word	0x20000ee8
    1930:	00002b59 	.word	0x00002b59

00001934 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1934:	b580      	push	{r7, lr}
    1936:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    1938:	4808      	ldr	r0, [pc, #32]	; (195c <TIMER_EVENT_init+0x28>)
    193a:	4b09      	ldr	r3, [pc, #36]	; (1960 <TIMER_EVENT_init+0x2c>)
    193c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    193e:	2245      	movs	r2, #69	; 0x45
    1940:	2109      	movs	r1, #9
    1942:	4808      	ldr	r0, [pc, #32]	; (1964 <TIMER_EVENT_init+0x30>)
    1944:	4b08      	ldr	r3, [pc, #32]	; (1968 <TIMER_EVENT_init+0x34>)
    1946:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    1948:	4b08      	ldr	r3, [pc, #32]	; (196c <TIMER_EVENT_init+0x38>)
    194a:	4798      	blx	r3
    194c:	4603      	mov	r3, r0
    194e:	461a      	mov	r2, r3
    1950:	4907      	ldr	r1, [pc, #28]	; (1970 <TIMER_EVENT_init+0x3c>)
    1952:	4808      	ldr	r0, [pc, #32]	; (1974 <TIMER_EVENT_init+0x40>)
    1954:	4b08      	ldr	r3, [pc, #32]	; (1978 <TIMER_EVENT_init+0x44>)
    1956:	4798      	blx	r3
}
    1958:	bf00      	nop
    195a:	bd80      	pop	{r7, pc}
    195c:	40000800 	.word	0x40000800
    1960:	00000b47 	.word	0x00000b47
    1964:	40001c00 	.word	0x40001c00
    1968:	000009e1 	.word	0x000009e1
    196c:	00008039 	.word	0x00008039
    1970:	40003c00 	.word	0x40003c00
    1974:	20000e50 	.word	0x20000e50
    1978:	00002b59 	.word	0x00002b59

0000197c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    197c:	b580      	push	{r7, lr}
    197e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1980:	4808      	ldr	r0, [pc, #32]	; (19a4 <TIMER_ARINC_init+0x28>)
    1982:	4b09      	ldr	r3, [pc, #36]	; (19a8 <TIMER_ARINC_init+0x2c>)
    1984:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1986:	2244      	movs	r2, #68	; 0x44
    1988:	211a      	movs	r1, #26
    198a:	4808      	ldr	r0, [pc, #32]	; (19ac <TIMER_ARINC_init+0x30>)
    198c:	4b08      	ldr	r3, [pc, #32]	; (19b0 <TIMER_ARINC_init+0x34>)
    198e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1990:	4b08      	ldr	r3, [pc, #32]	; (19b4 <TIMER_ARINC_init+0x38>)
    1992:	4798      	blx	r3
    1994:	4603      	mov	r3, r0
    1996:	461a      	mov	r2, r3
    1998:	4907      	ldr	r1, [pc, #28]	; (19b8 <TIMER_ARINC_init+0x3c>)
    199a:	4808      	ldr	r0, [pc, #32]	; (19bc <TIMER_ARINC_init+0x40>)
    199c:	4b08      	ldr	r3, [pc, #32]	; (19c0 <TIMER_ARINC_init+0x44>)
    199e:	4798      	blx	r3
}
    19a0:	bf00      	nop
    19a2:	bd80      	pop	{r7, pc}
    19a4:	40000800 	.word	0x40000800
    19a8:	00000bc7 	.word	0x00000bc7
    19ac:	40001c00 	.word	0x40001c00
    19b0:	000009e1 	.word	0x000009e1
    19b4:	00008039 	.word	0x00008039
    19b8:	4101a000 	.word	0x4101a000
    19bc:	20000ecc 	.word	0x20000ecc
    19c0:	00002b59 	.word	0x00002b59

000019c4 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    19c4:	b580      	push	{r7, lr}
    19c6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    19c8:	4808      	ldr	r0, [pc, #32]	; (19ec <TIMER_HVAC_init+0x28>)
    19ca:	4b09      	ldr	r3, [pc, #36]	; (19f0 <TIMER_HVAC_init+0x2c>)
    19cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19ce:	2245      	movs	r2, #69	; 0x45
    19d0:	211a      	movs	r1, #26
    19d2:	4808      	ldr	r0, [pc, #32]	; (19f4 <TIMER_HVAC_init+0x30>)
    19d4:	4b08      	ldr	r3, [pc, #32]	; (19f8 <TIMER_HVAC_init+0x34>)
    19d6:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    19d8:	4b08      	ldr	r3, [pc, #32]	; (19fc <TIMER_HVAC_init+0x38>)
    19da:	4798      	blx	r3
    19dc:	4603      	mov	r3, r0
    19de:	461a      	mov	r2, r3
    19e0:	4907      	ldr	r1, [pc, #28]	; (1a00 <TIMER_HVAC_init+0x3c>)
    19e2:	4808      	ldr	r0, [pc, #32]	; (1a04 <TIMER_HVAC_init+0x40>)
    19e4:	4b08      	ldr	r3, [pc, #32]	; (1a08 <TIMER_HVAC_init+0x44>)
    19e6:	4798      	blx	r3
}
    19e8:	bf00      	nop
    19ea:	bd80      	pop	{r7, pc}
    19ec:	40000800 	.word	0x40000800
    19f0:	00000be7 	.word	0x00000be7
    19f4:	40001c00 	.word	0x40001c00
    19f8:	000009e1 	.word	0x000009e1
    19fc:	00008039 	.word	0x00008039
    1a00:	4101c000 	.word	0x4101c000
    1a04:	20000f44 	.word	0x20000f44
    1a08:	00002b59 	.word	0x00002b59

00001a0c <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1a0c:	b580      	push	{r7, lr}
    1a0e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1a10:	4808      	ldr	r0, [pc, #32]	; (1a34 <TIMER_MAINTENANCE_init+0x28>)
    1a12:	4b09      	ldr	r3, [pc, #36]	; (1a38 <TIMER_MAINTENANCE_init+0x2c>)
    1a14:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a16:	2246      	movs	r2, #70	; 0x46
    1a18:	211e      	movs	r1, #30
    1a1a:	4808      	ldr	r0, [pc, #32]	; (1a3c <TIMER_MAINTENANCE_init+0x30>)
    1a1c:	4b08      	ldr	r3, [pc, #32]	; (1a40 <TIMER_MAINTENANCE_init+0x34>)
    1a1e:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1a20:	4b08      	ldr	r3, [pc, #32]	; (1a44 <TIMER_MAINTENANCE_init+0x38>)
    1a22:	4798      	blx	r3
    1a24:	4603      	mov	r3, r0
    1a26:	461a      	mov	r2, r3
    1a28:	4907      	ldr	r1, [pc, #28]	; (1a48 <TIMER_MAINTENANCE_init+0x3c>)
    1a2a:	4808      	ldr	r0, [pc, #32]	; (1a4c <TIMER_MAINTENANCE_init+0x40>)
    1a2c:	4b08      	ldr	r3, [pc, #32]	; (1a50 <TIMER_MAINTENANCE_init+0x44>)
    1a2e:	4798      	blx	r3
}
    1a30:	bf00      	nop
    1a32:	bd80      	pop	{r7, pc}
    1a34:	40000800 	.word	0x40000800
    1a38:	00000c07 	.word	0x00000c07
    1a3c:	40001c00 	.word	0x40001c00
    1a40:	000009e1 	.word	0x000009e1
    1a44:	00008039 	.word	0x00008039
    1a48:	42001400 	.word	0x42001400
    1a4c:	20000e30 	.word	0x20000e30
    1a50:	00002b59 	.word	0x00002b59

00001a54 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1a54:	b580      	push	{r7, lr}
    1a56:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1a58:	4808      	ldr	r0, [pc, #32]	; (1a7c <TIMER_INTERFACE_init+0x28>)
    1a5a:	4b09      	ldr	r3, [pc, #36]	; (1a80 <TIMER_INTERFACE_init+0x2c>)
    1a5c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a5e:	2246      	movs	r2, #70	; 0x46
    1a60:	211e      	movs	r1, #30
    1a62:	4808      	ldr	r0, [pc, #32]	; (1a84 <TIMER_INTERFACE_init+0x30>)
    1a64:	4b08      	ldr	r3, [pc, #32]	; (1a88 <TIMER_INTERFACE_init+0x34>)
    1a66:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1a68:	4b08      	ldr	r3, [pc, #32]	; (1a8c <TIMER_INTERFACE_init+0x38>)
    1a6a:	4798      	blx	r3
    1a6c:	4603      	mov	r3, r0
    1a6e:	461a      	mov	r2, r3
    1a70:	4907      	ldr	r1, [pc, #28]	; (1a90 <TIMER_INTERFACE_init+0x3c>)
    1a72:	4808      	ldr	r0, [pc, #32]	; (1a94 <TIMER_INTERFACE_init+0x40>)
    1a74:	4b08      	ldr	r3, [pc, #32]	; (1a98 <TIMER_INTERFACE_init+0x44>)
    1a76:	4798      	blx	r3
}
    1a78:	bf00      	nop
    1a7a:	bd80      	pop	{r7, pc}
    1a7c:	40000800 	.word	0x40000800
    1a80:	00000c27 	.word	0x00000c27
    1a84:	40001c00 	.word	0x40001c00
    1a88:	000009e1 	.word	0x000009e1
    1a8c:	00008039 	.word	0x00008039
    1a90:	42001800 	.word	0x42001800
    1a94:	20000e6c 	.word	0x20000e6c
    1a98:	00002b59 	.word	0x00002b59

00001a9c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1a9c:	b480      	push	{r7}
    1a9e:	af00      	add	r7, sp, #0
}
    1aa0:	bf00      	nop
    1aa2:	46bd      	mov	sp, r7
    1aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1aa8:	4770      	bx	lr
	...

00001aac <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1aac:	b580      	push	{r7, lr}
    1aae:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1ab0:	4804      	ldr	r0, [pc, #16]	; (1ac4 <LIVE_PULSE_CLOCK_init+0x18>)
    1ab2:	4b05      	ldr	r3, [pc, #20]	; (1ac8 <LIVE_PULSE_CLOCK_init+0x1c>)
    1ab4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ab6:	224b      	movs	r2, #75	; 0x4b
    1ab8:	2127      	movs	r1, #39	; 0x27
    1aba:	4804      	ldr	r0, [pc, #16]	; (1acc <LIVE_PULSE_CLOCK_init+0x20>)
    1abc:	4b04      	ldr	r3, [pc, #16]	; (1ad0 <LIVE_PULSE_CLOCK_init+0x24>)
    1abe:	4798      	blx	r3
}
    1ac0:	bf00      	nop
    1ac2:	bd80      	pop	{r7, pc}
    1ac4:	40000800 	.word	0x40000800
    1ac8:	00000cc7 	.word	0x00000cc7
    1acc:	40001c00 	.word	0x40001c00
    1ad0:	000009e1 	.word	0x000009e1

00001ad4 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1ad4:	b580      	push	{r7, lr}
    1ad6:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1ad8:	4b06      	ldr	r3, [pc, #24]	; (1af4 <LIVE_PULSE_init+0x20>)
    1ada:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1adc:	4b06      	ldr	r3, [pc, #24]	; (1af8 <LIVE_PULSE_init+0x24>)
    1ade:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1ae0:	4b06      	ldr	r3, [pc, #24]	; (1afc <LIVE_PULSE_init+0x28>)
    1ae2:	4798      	blx	r3
    1ae4:	4603      	mov	r3, r0
    1ae6:	461a      	mov	r2, r3
    1ae8:	4905      	ldr	r1, [pc, #20]	; (1b00 <LIVE_PULSE_init+0x2c>)
    1aea:	4806      	ldr	r0, [pc, #24]	; (1b04 <LIVE_PULSE_init+0x30>)
    1aec:	4b06      	ldr	r3, [pc, #24]	; (1b08 <LIVE_PULSE_init+0x34>)
    1aee:	4798      	blx	r3
}
    1af0:	bf00      	nop
    1af2:	bd80      	pop	{r7, pc}
    1af4:	00001aad 	.word	0x00001aad
    1af8:	00001a9d 	.word	0x00001a9d
    1afc:	00008049 	.word	0x00008049
    1b00:	43001800 	.word	0x43001800
    1b04:	20000e88 	.word	0x20000e88
    1b08:	000022ed 	.word	0x000022ed

00001b0c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1b10:	2102      	movs	r1, #2
    1b12:	2018      	movs	r0, #24
    1b14:	4b0f      	ldr	r3, [pc, #60]	; (1b54 <CDCUSB_PORT_init+0x48>)
    1b16:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1b18:	2100      	movs	r1, #0
    1b1a:	2018      	movs	r0, #24
    1b1c:	4b0e      	ldr	r3, [pc, #56]	; (1b58 <CDCUSB_PORT_init+0x4c>)
    1b1e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1b20:	2100      	movs	r1, #0
    1b22:	2018      	movs	r0, #24
    1b24:	4b0d      	ldr	r3, [pc, #52]	; (1b5c <CDCUSB_PORT_init+0x50>)
    1b26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1b28:	490d      	ldr	r1, [pc, #52]	; (1b60 <CDCUSB_PORT_init+0x54>)
    1b2a:	2018      	movs	r0, #24
    1b2c:	4b0d      	ldr	r3, [pc, #52]	; (1b64 <CDCUSB_PORT_init+0x58>)
    1b2e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1b30:	2102      	movs	r1, #2
    1b32:	2019      	movs	r0, #25
    1b34:	4b07      	ldr	r3, [pc, #28]	; (1b54 <CDCUSB_PORT_init+0x48>)
    1b36:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1b38:	2100      	movs	r1, #0
    1b3a:	2019      	movs	r0, #25
    1b3c:	4b06      	ldr	r3, [pc, #24]	; (1b58 <CDCUSB_PORT_init+0x4c>)
    1b3e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1b40:	2100      	movs	r1, #0
    1b42:	2019      	movs	r0, #25
    1b44:	4b05      	ldr	r3, [pc, #20]	; (1b5c <CDCUSB_PORT_init+0x50>)
    1b46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1b48:	4907      	ldr	r1, [pc, #28]	; (1b68 <CDCUSB_PORT_init+0x5c>)
    1b4a:	2019      	movs	r0, #25
    1b4c:	4b05      	ldr	r3, [pc, #20]	; (1b64 <CDCUSB_PORT_init+0x58>)
    1b4e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1b50:	bf00      	nop
    1b52:	bd80      	pop	{r7, pc}
    1b54:	00001215 	.word	0x00001215
    1b58:	0000124d 	.word	0x0000124d
    1b5c:	000011c1 	.word	0x000011c1
    1b60:	00180007 	.word	0x00180007
    1b64:	000011f5 	.word	0x000011f5
    1b68:	00190007 	.word	0x00190007

00001b6c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1b6c:	b580      	push	{r7, lr}
    1b6e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1b70:	2242      	movs	r2, #66	; 0x42
    1b72:	210a      	movs	r1, #10
    1b74:	4805      	ldr	r0, [pc, #20]	; (1b8c <CDCUSB_CLOCK_init+0x20>)
    1b76:	4b06      	ldr	r3, [pc, #24]	; (1b90 <CDCUSB_CLOCK_init+0x24>)
    1b78:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1b7a:	4806      	ldr	r0, [pc, #24]	; (1b94 <CDCUSB_CLOCK_init+0x28>)
    1b7c:	4b06      	ldr	r3, [pc, #24]	; (1b98 <CDCUSB_CLOCK_init+0x2c>)
    1b7e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1b80:	4804      	ldr	r0, [pc, #16]	; (1b94 <CDCUSB_CLOCK_init+0x28>)
    1b82:	4b06      	ldr	r3, [pc, #24]	; (1b9c <CDCUSB_CLOCK_init+0x30>)
    1b84:	4798      	blx	r3
}
    1b86:	bf00      	nop
    1b88:	bd80      	pop	{r7, pc}
    1b8a:	bf00      	nop
    1b8c:	40001c00 	.word	0x40001c00
    1b90:	000009e1 	.word	0x000009e1
    1b94:	40000800 	.word	0x40000800
    1b98:	00000a07 	.word	0x00000a07
    1b9c:	00000b67 	.word	0x00000b67

00001ba0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1ba4:	4b03      	ldr	r3, [pc, #12]	; (1bb4 <CDCUSB_init+0x14>)
    1ba6:	4798      	blx	r3
	usb_d_init();
    1ba8:	4b03      	ldr	r3, [pc, #12]	; (1bb8 <CDCUSB_init+0x18>)
    1baa:	4798      	blx	r3
	CDCUSB_PORT_init();
    1bac:	4b03      	ldr	r3, [pc, #12]	; (1bbc <CDCUSB_init+0x1c>)
    1bae:	4798      	blx	r3
}
    1bb0:	bf00      	nop
    1bb2:	bd80      	pop	{r7, pc}
    1bb4:	00001b6d 	.word	0x00001b6d
    1bb8:	00003369 	.word	0x00003369
    1bbc:	00001b0d 	.word	0x00001b0d

00001bc0 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1bc0:	b580      	push	{r7, lr}
    1bc2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1bc4:	4802      	ldr	r0, [pc, #8]	; (1bd0 <WATCHDOG_CLOCK_init+0x10>)
    1bc6:	4b03      	ldr	r3, [pc, #12]	; (1bd4 <WATCHDOG_CLOCK_init+0x14>)
    1bc8:	4798      	blx	r3
}
    1bca:	bf00      	nop
    1bcc:	bd80      	pop	{r7, pc}
    1bce:	bf00      	nop
    1bd0:	40000800 	.word	0x40000800
    1bd4:	00000a87 	.word	0x00000a87

00001bd8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1bd8:	b580      	push	{r7, lr}
    1bda:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1bdc:	4b03      	ldr	r3, [pc, #12]	; (1bec <WATCHDOG_init+0x14>)
    1bde:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1be0:	4903      	ldr	r1, [pc, #12]	; (1bf0 <WATCHDOG_init+0x18>)
    1be2:	4804      	ldr	r0, [pc, #16]	; (1bf4 <WATCHDOG_init+0x1c>)
    1be4:	4b04      	ldr	r3, [pc, #16]	; (1bf8 <WATCHDOG_init+0x20>)
    1be6:	4798      	blx	r3
}
    1be8:	bf00      	nop
    1bea:	bd80      	pop	{r7, pc}
    1bec:	00001bc1 	.word	0x00001bc1
    1bf0:	40002000 	.word	0x40002000
    1bf4:	20000fc0 	.word	0x20000fc0
    1bf8:	00001295 	.word	0x00001295

00001bfc <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1bfc:	b580      	push	{r7, lr}
    1bfe:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1c00:	4904      	ldr	r1, [pc, #16]	; (1c14 <CAN_CCU_PORT_init+0x18>)
    1c02:	202d      	movs	r0, #45	; 0x2d
    1c04:	4b04      	ldr	r3, [pc, #16]	; (1c18 <CAN_CCU_PORT_init+0x1c>)
    1c06:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1c08:	4904      	ldr	r1, [pc, #16]	; (1c1c <CAN_CCU_PORT_init+0x20>)
    1c0a:	202c      	movs	r0, #44	; 0x2c
    1c0c:	4b02      	ldr	r3, [pc, #8]	; (1c18 <CAN_CCU_PORT_init+0x1c>)
    1c0e:	4798      	blx	r3
}
    1c10:	bf00      	nop
    1c12:	bd80      	pop	{r7, pc}
    1c14:	002d0007 	.word	0x002d0007
    1c18:	000011f5 	.word	0x000011f5
    1c1c:	002c0007 	.word	0x002c0007

00001c20 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1c20:	b580      	push	{r7, lr}
    1c22:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1c24:	4807      	ldr	r0, [pc, #28]	; (1c44 <CAN_CCU_init+0x24>)
    1c26:	4b08      	ldr	r3, [pc, #32]	; (1c48 <CAN_CCU_init+0x28>)
    1c28:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c2a:	2243      	movs	r2, #67	; 0x43
    1c2c:	211c      	movs	r1, #28
    1c2e:	4807      	ldr	r0, [pc, #28]	; (1c4c <CAN_CCU_init+0x2c>)
    1c30:	4b07      	ldr	r3, [pc, #28]	; (1c50 <CAN_CCU_init+0x30>)
    1c32:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1c34:	4907      	ldr	r1, [pc, #28]	; (1c54 <CAN_CCU_init+0x34>)
    1c36:	4808      	ldr	r0, [pc, #32]	; (1c58 <CAN_CCU_init+0x38>)
    1c38:	4b08      	ldr	r3, [pc, #32]	; (1c5c <CAN_CCU_init+0x3c>)
    1c3a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1c3c:	4b08      	ldr	r3, [pc, #32]	; (1c60 <CAN_CCU_init+0x40>)
    1c3e:	4798      	blx	r3
}
    1c40:	bf00      	nop
    1c42:	bd80      	pop	{r7, pc}
    1c44:	40000800 	.word	0x40000800
    1c48:	00000a47 	.word	0x00000a47
    1c4c:	40001c00 	.word	0x40001c00
    1c50:	000009e1 	.word	0x000009e1
    1c54:	42000400 	.word	0x42000400
    1c58:	20000ea4 	.word	0x20000ea4
    1c5c:	00001e99 	.word	0x00001e99
    1c60:	00001bfd 	.word	0x00001bfd

00001c64 <system_init>:

void system_init(void)
{
    1c64:	b580      	push	{r7, lr}
    1c66:	af00      	add	r7, sp, #0
	init_mcu();
    1c68:	4b56      	ldr	r3, [pc, #344]	; (1dc4 <system_init+0x160>)
    1c6a:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1c6c:	2101      	movs	r1, #1
    1c6e:	200f      	movs	r0, #15
    1c70:	4b55      	ldr	r3, [pc, #340]	; (1dc8 <system_init+0x164>)
    1c72:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1c74:	2102      	movs	r1, #2
    1c76:	200f      	movs	r0, #15
    1c78:	4b54      	ldr	r3, [pc, #336]	; (1dcc <system_init+0x168>)
    1c7a:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1c7c:	f04f 31ff 	mov.w	r1, #4294967295
    1c80:	200f      	movs	r0, #15
    1c82:	4b53      	ldr	r3, [pc, #332]	; (1dd0 <system_init+0x16c>)
    1c84:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1c86:	2101      	movs	r1, #1
    1c88:	2013      	movs	r0, #19
    1c8a:	4b4f      	ldr	r3, [pc, #316]	; (1dc8 <system_init+0x164>)
    1c8c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1c8e:	2102      	movs	r1, #2
    1c90:	2013      	movs	r0, #19
    1c92:	4b4e      	ldr	r3, [pc, #312]	; (1dcc <system_init+0x168>)
    1c94:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1c96:	f04f 31ff 	mov.w	r1, #4294967295
    1c9a:	2013      	movs	r0, #19
    1c9c:	4b4c      	ldr	r3, [pc, #304]	; (1dd0 <system_init+0x16c>)
    1c9e:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    1ca0:	2101      	movs	r1, #1
    1ca2:	2027      	movs	r0, #39	; 0x27
    1ca4:	4b49      	ldr	r3, [pc, #292]	; (1dcc <system_init+0x168>)
    1ca6:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    1ca8:	2102      	movs	r1, #2
    1caa:	2027      	movs	r0, #39	; 0x27
    1cac:	4b49      	ldr	r3, [pc, #292]	; (1dd4 <system_init+0x170>)
    1cae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    1cb0:	f04f 31ff 	mov.w	r1, #4294967295
    1cb4:	2027      	movs	r0, #39	; 0x27
    1cb6:	4b46      	ldr	r3, [pc, #280]	; (1dd0 <system_init+0x16c>)
    1cb8:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    1cba:	2101      	movs	r1, #1
    1cbc:	203d      	movs	r0, #61	; 0x3d
    1cbe:	4b42      	ldr	r3, [pc, #264]	; (1dc8 <system_init+0x164>)
    1cc0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    1cc2:	2102      	movs	r1, #2
    1cc4:	203d      	movs	r0, #61	; 0x3d
    1cc6:	4b41      	ldr	r3, [pc, #260]	; (1dcc <system_init+0x168>)
    1cc8:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    1cca:	f04f 31ff 	mov.w	r1, #4294967295
    1cce:	203d      	movs	r0, #61	; 0x3d
    1cd0:	4b3f      	ldr	r3, [pc, #252]	; (1dd0 <system_init+0x16c>)
    1cd2:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1cd4:	2101      	movs	r1, #1
    1cd6:	203f      	movs	r0, #63	; 0x3f
    1cd8:	4b3c      	ldr	r3, [pc, #240]	; (1dcc <system_init+0x168>)
    1cda:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1cdc:	2101      	movs	r1, #1
    1cde:	203f      	movs	r0, #63	; 0x3f
    1ce0:	4b3c      	ldr	r3, [pc, #240]	; (1dd4 <system_init+0x170>)
    1ce2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1ce4:	f04f 31ff 	mov.w	r1, #4294967295
    1ce8:	203f      	movs	r0, #63	; 0x3f
    1cea:	4b39      	ldr	r3, [pc, #228]	; (1dd0 <system_init+0x16c>)
    1cec:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1cee:	2101      	movs	r1, #1
    1cf0:	2040      	movs	r0, #64	; 0x40
    1cf2:	4b36      	ldr	r3, [pc, #216]	; (1dcc <system_init+0x168>)
    1cf4:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1cf6:	2102      	movs	r1, #2
    1cf8:	2040      	movs	r0, #64	; 0x40
    1cfa:	4b36      	ldr	r3, [pc, #216]	; (1dd4 <system_init+0x170>)
    1cfc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    1cfe:	f04f 31ff 	mov.w	r1, #4294967295
    1d02:	2040      	movs	r0, #64	; 0x40
    1d04:	4b32      	ldr	r3, [pc, #200]	; (1dd0 <system_init+0x16c>)
    1d06:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1d08:	2100      	movs	r1, #0
    1d0a:	204d      	movs	r0, #77	; 0x4d
    1d0c:	4b2e      	ldr	r3, [pc, #184]	; (1dc8 <system_init+0x164>)
    1d0e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1d10:	2102      	movs	r1, #2
    1d12:	204d      	movs	r0, #77	; 0x4d
    1d14:	4b2d      	ldr	r3, [pc, #180]	; (1dcc <system_init+0x168>)
    1d16:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1d18:	f04f 31ff 	mov.w	r1, #4294967295
    1d1c:	204d      	movs	r0, #77	; 0x4d
    1d1e:	4b2c      	ldr	r3, [pc, #176]	; (1dd0 <system_init+0x16c>)
    1d20:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1d22:	2101      	movs	r1, #1
    1d24:	204e      	movs	r0, #78	; 0x4e
    1d26:	4b28      	ldr	r3, [pc, #160]	; (1dc8 <system_init+0x164>)
    1d28:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1d2a:	2102      	movs	r1, #2
    1d2c:	204e      	movs	r0, #78	; 0x4e
    1d2e:	4b27      	ldr	r3, [pc, #156]	; (1dcc <system_init+0x168>)
    1d30:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1d32:	f04f 31ff 	mov.w	r1, #4294967295
    1d36:	204e      	movs	r0, #78	; 0x4e
    1d38:	4b25      	ldr	r3, [pc, #148]	; (1dd0 <system_init+0x16c>)
    1d3a:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1d3c:	2100      	movs	r1, #0
    1d3e:	204f      	movs	r0, #79	; 0x4f
    1d40:	4b21      	ldr	r3, [pc, #132]	; (1dc8 <system_init+0x164>)
    1d42:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1d44:	2102      	movs	r1, #2
    1d46:	204f      	movs	r0, #79	; 0x4f
    1d48:	4b20      	ldr	r3, [pc, #128]	; (1dcc <system_init+0x168>)
    1d4a:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1d4c:	f04f 31ff 	mov.w	r1, #4294967295
    1d50:	204f      	movs	r0, #79	; 0x4f
    1d52:	4b1f      	ldr	r3, [pc, #124]	; (1dd0 <system_init+0x16c>)
    1d54:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1d56:	2100      	movs	r1, #0
    1d58:	2052      	movs	r0, #82	; 0x52
    1d5a:	4b1b      	ldr	r3, [pc, #108]	; (1dc8 <system_init+0x164>)
    1d5c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1d5e:	2102      	movs	r1, #2
    1d60:	2052      	movs	r0, #82	; 0x52
    1d62:	4b1a      	ldr	r3, [pc, #104]	; (1dcc <system_init+0x168>)
    1d64:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1d66:	f04f 31ff 	mov.w	r1, #4294967295
    1d6a:	2052      	movs	r0, #82	; 0x52
    1d6c:	4b18      	ldr	r3, [pc, #96]	; (1dd0 <system_init+0x16c>)
    1d6e:	4798      	blx	r3

	CRC_CALC_init();
    1d70:	4b19      	ldr	r3, [pc, #100]	; (1dd8 <system_init+0x174>)
    1d72:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1d74:	4b19      	ldr	r3, [pc, #100]	; (1ddc <system_init+0x178>)
    1d76:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1d78:	4b19      	ldr	r3, [pc, #100]	; (1de0 <system_init+0x17c>)
    1d7a:	4798      	blx	r3

	QSPI_N25Q256_init();
    1d7c:	4b19      	ldr	r3, [pc, #100]	; (1de4 <system_init+0x180>)
    1d7e:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1d80:	4b19      	ldr	r3, [pc, #100]	; (1de8 <system_init+0x184>)
    1d82:	4798      	blx	r3

	SPI_HI3593_init();
    1d84:	4b19      	ldr	r3, [pc, #100]	; (1dec <system_init+0x188>)
    1d86:	4798      	blx	r3

	SPI_MEMORIES_init();
    1d88:	4b19      	ldr	r3, [pc, #100]	; (1df0 <system_init+0x18c>)
    1d8a:	4798      	blx	r3

	SPI_TEMP_init();
    1d8c:	4b19      	ldr	r3, [pc, #100]	; (1df4 <system_init+0x190>)
    1d8e:	4798      	blx	r3

	I2C_EXPANDER_init();
    1d90:	4b19      	ldr	r3, [pc, #100]	; (1df8 <system_init+0x194>)
    1d92:	4798      	blx	r3

	I2C_EEPROM_init();
    1d94:	4b19      	ldr	r3, [pc, #100]	; (1dfc <system_init+0x198>)
    1d96:	4798      	blx	r3

	TIMER_USB_init();
    1d98:	4b19      	ldr	r3, [pc, #100]	; (1e00 <system_init+0x19c>)
    1d9a:	4798      	blx	r3
	TIMER_EVENT_init();
    1d9c:	4b19      	ldr	r3, [pc, #100]	; (1e04 <system_init+0x1a0>)
    1d9e:	4798      	blx	r3
	TIMER_ARINC_init();
    1da0:	4b19      	ldr	r3, [pc, #100]	; (1e08 <system_init+0x1a4>)
    1da2:	4798      	blx	r3
	TIMER_HVAC_init();
    1da4:	4b19      	ldr	r3, [pc, #100]	; (1e0c <system_init+0x1a8>)
    1da6:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1da8:	4b19      	ldr	r3, [pc, #100]	; (1e10 <system_init+0x1ac>)
    1daa:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1dac:	4b19      	ldr	r3, [pc, #100]	; (1e14 <system_init+0x1b0>)
    1dae:	4798      	blx	r3
	LIVE_PULSE_init();
    1db0:	4b19      	ldr	r3, [pc, #100]	; (1e18 <system_init+0x1b4>)
    1db2:	4798      	blx	r3

	CDCUSB_init();
    1db4:	4b19      	ldr	r3, [pc, #100]	; (1e1c <system_init+0x1b8>)
    1db6:	4798      	blx	r3

	WATCHDOG_init();
    1db8:	4b19      	ldr	r3, [pc, #100]	; (1e20 <system_init+0x1bc>)
    1dba:	4798      	blx	r3
	CAN_CCU_init();
    1dbc:	4b19      	ldr	r3, [pc, #100]	; (1e24 <system_init+0x1c0>)
    1dbe:	4798      	blx	r3
}
    1dc0:	bf00      	nop
    1dc2:	bd80      	pop	{r7, pc}
    1dc4:	00001285 	.word	0x00001285
    1dc8:	0000124d 	.word	0x0000124d
    1dcc:	00001215 	.word	0x00001215
    1dd0:	000011f5 	.word	0x000011f5
    1dd4:	000011c1 	.word	0x000011c1
    1dd8:	000012e5 	.word	0x000012e5
    1ddc:	00001311 	.word	0x00001311
    1de0:	000013b5 	.word	0x000013b5
    1de4:	000014f1 	.word	0x000014f1
    1de8:	00001535 	.word	0x00001535
    1dec:	000015f9 	.word	0x000015f9
    1df0:	000016c5 	.word	0x000016c5
    1df4:	00001791 	.word	0x00001791
    1df8:	00001829 	.word	0x00001829
    1dfc:	000018c1 	.word	0x000018c1
    1e00:	000018ed 	.word	0x000018ed
    1e04:	00001935 	.word	0x00001935
    1e08:	0000197d 	.word	0x0000197d
    1e0c:	000019c5 	.word	0x000019c5
    1e10:	00001a0d 	.word	0x00001a0d
    1e14:	00001a55 	.word	0x00001a55
    1e18:	00001ad5 	.word	0x00001ad5
    1e1c:	00001ba1 	.word	0x00001ba1
    1e20:	00001bd9 	.word	0x00001bd9
    1e24:	00001c21 	.word	0x00001c21

00001e28 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1e28:	b580      	push	{r7, lr}
    1e2a:	b084      	sub	sp, #16
    1e2c:	af00      	add	r7, sp, #0
    1e2e:	6078      	str	r0, [r7, #4]
    1e30:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1e32:	2300      	movs	r3, #0
    1e34:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1e36:	687b      	ldr	r3, [r7, #4]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	bf14      	ite	ne
    1e3c:	2301      	movne	r3, #1
    1e3e:	2300      	moveq	r3, #0
    1e40:	b2db      	uxtb	r3, r3
    1e42:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1e46:	4911      	ldr	r1, [pc, #68]	; (1e8c <calendar_init+0x64>)
    1e48:	4618      	mov	r0, r3
    1e4a:	4b11      	ldr	r3, [pc, #68]	; (1e90 <calendar_init+0x68>)
    1e4c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	681a      	ldr	r2, [r3, #0]
    1e52:	683b      	ldr	r3, [r7, #0]
    1e54:	429a      	cmp	r2, r3
    1e56:	d101      	bne.n	1e5c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1e58:	2300      	movs	r3, #0
    1e5a:	e013      	b.n	1e84 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	681b      	ldr	r3, [r3, #0]
    1e60:	2b00      	cmp	r3, #0
    1e62:	d002      	beq.n	1e6a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1e64:	f06f 0311 	mvn.w	r3, #17
    1e68:	e00c      	b.n	1e84 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	683a      	ldr	r2, [r7, #0]
    1e6e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1e70:	687b      	ldr	r3, [r7, #4]
    1e72:	4618      	mov	r0, r3
    1e74:	4b07      	ldr	r3, [pc, #28]	; (1e94 <calendar_init+0x6c>)
    1e76:	4798      	blx	r3
    1e78:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1e80:	619a      	str	r2, [r3, #24]

	return ret;
    1e82:	68fb      	ldr	r3, [r7, #12]
}
    1e84:	4618      	mov	r0, r3
    1e86:	3710      	adds	r7, #16
    1e88:	46bd      	mov	sp, r7
    1e8a:	bd80      	pop	{r7, pc}
    1e8c:	0000ecc4 	.word	0x0000ecc4
    1e90:	00003911 	.word	0x00003911
    1e94:	00005b2d 	.word	0x00005b2d

00001e98 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	b084      	sub	sp, #16
    1e9c:	af00      	add	r7, sp, #0
    1e9e:	6078      	str	r0, [r7, #4]
    1ea0:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1ea2:	687b      	ldr	r3, [r7, #4]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d004      	beq.n	1eb2 <can_async_init+0x1a>
    1ea8:	683b      	ldr	r3, [r7, #0]
    1eaa:	2b00      	cmp	r3, #0
    1eac:	d001      	beq.n	1eb2 <can_async_init+0x1a>
    1eae:	2301      	movs	r3, #1
    1eb0:	e000      	b.n	1eb4 <can_async_init+0x1c>
    1eb2:	2300      	movs	r3, #0
    1eb4:	f003 0301 	and.w	r3, r3, #1
    1eb8:	b2db      	uxtb	r3, r3
    1eba:	2241      	movs	r2, #65	; 0x41
    1ebc:	490e      	ldr	r1, [pc, #56]	; (1ef8 <can_async_init+0x60>)
    1ebe:	4618      	mov	r0, r3
    1ec0:	4b0e      	ldr	r3, [pc, #56]	; (1efc <can_async_init+0x64>)
    1ec2:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	6839      	ldr	r1, [r7, #0]
    1ec8:	4618      	mov	r0, r3
    1eca:	4b0d      	ldr	r3, [pc, #52]	; (1f00 <can_async_init+0x68>)
    1ecc:	4798      	blx	r3
    1ece:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1ed0:	68fb      	ldr	r3, [r7, #12]
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	d001      	beq.n	1eda <can_async_init+0x42>
		return rc;
    1ed6:	68fb      	ldr	r3, [r7, #12]
    1ed8:	e009      	b.n	1eee <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1eda:	687b      	ldr	r3, [r7, #4]
    1edc:	4a09      	ldr	r2, [pc, #36]	; (1f04 <can_async_init+0x6c>)
    1ede:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1ee0:	687b      	ldr	r3, [r7, #4]
    1ee2:	4a09      	ldr	r2, [pc, #36]	; (1f08 <can_async_init+0x70>)
    1ee4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	4a08      	ldr	r2, [pc, #32]	; (1f0c <can_async_init+0x74>)
    1eea:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1eec:	2300      	movs	r3, #0
}
    1eee:	4618      	mov	r0, r3
    1ef0:	3710      	adds	r7, #16
    1ef2:	46bd      	mov	sp, r7
    1ef4:	bd80      	pop	{r7, pc}
    1ef6:	bf00      	nop
    1ef8:	0000ece0 	.word	0x0000ece0
    1efc:	00003911 	.word	0x00003911
    1f00:	00003e6d 	.word	0x00003e6d
    1f04:	00001f11 	.word	0x00001f11
    1f08:	00001f35 	.word	0x00001f35
    1f0c:	00001f59 	.word	0x00001f59

00001f10 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1f10:	b580      	push	{r7, lr}
    1f12:	b084      	sub	sp, #16
    1f14:	af00      	add	r7, sp, #0
    1f16:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1f18:	687b      	ldr	r3, [r7, #4]
    1f1a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1f1c:	68fb      	ldr	r3, [r7, #12]
    1f1e:	69db      	ldr	r3, [r3, #28]
    1f20:	2b00      	cmp	r3, #0
    1f22:	d003      	beq.n	1f2c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1f24:	68fb      	ldr	r3, [r7, #12]
    1f26:	69db      	ldr	r3, [r3, #28]
    1f28:	68f8      	ldr	r0, [r7, #12]
    1f2a:	4798      	blx	r3
	}
}
    1f2c:	bf00      	nop
    1f2e:	3710      	adds	r7, #16
    1f30:	46bd      	mov	sp, r7
    1f32:	bd80      	pop	{r7, pc}

00001f34 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1f34:	b580      	push	{r7, lr}
    1f36:	b084      	sub	sp, #16
    1f38:	af00      	add	r7, sp, #0
    1f3a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1f3c:	687b      	ldr	r3, [r7, #4]
    1f3e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1f40:	68fb      	ldr	r3, [r7, #12]
    1f42:	6a1b      	ldr	r3, [r3, #32]
    1f44:	2b00      	cmp	r3, #0
    1f46:	d003      	beq.n	1f50 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1f48:	68fb      	ldr	r3, [r7, #12]
    1f4a:	6a1b      	ldr	r3, [r3, #32]
    1f4c:	68f8      	ldr	r0, [r7, #12]
    1f4e:	4798      	blx	r3
	}
}
    1f50:	bf00      	nop
    1f52:	3710      	adds	r7, #16
    1f54:	46bd      	mov	sp, r7
    1f56:	bd80      	pop	{r7, pc}

00001f58 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1f58:	b580      	push	{r7, lr}
    1f5a:	b084      	sub	sp, #16
    1f5c:	af00      	add	r7, sp, #0
    1f5e:	6078      	str	r0, [r7, #4]
    1f60:	460b      	mov	r3, r1
    1f62:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1f64:	687b      	ldr	r3, [r7, #4]
    1f66:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1f68:	68fb      	ldr	r3, [r7, #12]
    1f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d005      	beq.n	1f7c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1f70:	68fb      	ldr	r3, [r7, #12]
    1f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f74:	78fa      	ldrb	r2, [r7, #3]
    1f76:	4611      	mov	r1, r2
    1f78:	68f8      	ldr	r0, [r7, #12]
    1f7a:	4798      	blx	r3
	}
}
    1f7c:	bf00      	nop
    1f7e:	3710      	adds	r7, #16
    1f80:	46bd      	mov	sp, r7
    1f82:	bd80      	pop	{r7, pc}

00001f84 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1f84:	b580      	push	{r7, lr}
    1f86:	b082      	sub	sp, #8
    1f88:	af00      	add	r7, sp, #0
    1f8a:	6078      	str	r0, [r7, #4]
    1f8c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1f8e:	687b      	ldr	r3, [r7, #4]
    1f90:	2b00      	cmp	r3, #0
    1f92:	d004      	beq.n	1f9e <crc_sync_init+0x1a>
    1f94:	683b      	ldr	r3, [r7, #0]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d001      	beq.n	1f9e <crc_sync_init+0x1a>
    1f9a:	2301      	movs	r3, #1
    1f9c:	e000      	b.n	1fa0 <crc_sync_init+0x1c>
    1f9e:	2300      	movs	r3, #0
    1fa0:	f003 0301 	and.w	r3, r3, #1
    1fa4:	b2db      	uxtb	r3, r3
    1fa6:	222b      	movs	r2, #43	; 0x2b
    1fa8:	4906      	ldr	r1, [pc, #24]	; (1fc4 <crc_sync_init+0x40>)
    1faa:	4618      	mov	r0, r3
    1fac:	4b06      	ldr	r3, [pc, #24]	; (1fc8 <crc_sync_init+0x44>)
    1fae:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1fb0:	687b      	ldr	r3, [r7, #4]
    1fb2:	6839      	ldr	r1, [r7, #0]
    1fb4:	4618      	mov	r0, r3
    1fb6:	4b05      	ldr	r3, [pc, #20]	; (1fcc <crc_sync_init+0x48>)
    1fb8:	4798      	blx	r3
    1fba:	4603      	mov	r3, r0
}
    1fbc:	4618      	mov	r0, r3
    1fbe:	3708      	adds	r7, #8
    1fc0:	46bd      	mov	sp, r7
    1fc2:	bd80      	pop	{r7, pc}
    1fc4:	0000ecfc 	.word	0x0000ecfc
    1fc8:	00003911 	.word	0x00003911
    1fcc:	0000456d 	.word	0x0000456d

00001fd0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1fd0:	b590      	push	{r4, r7, lr}
    1fd2:	b083      	sub	sp, #12
    1fd4:	af00      	add	r7, sp, #0
    1fd6:	4603      	mov	r3, r0
    1fd8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1fda:	4b07      	ldr	r3, [pc, #28]	; (1ff8 <delay_us+0x28>)
    1fdc:	681c      	ldr	r4, [r3, #0]
    1fde:	88fb      	ldrh	r3, [r7, #6]
    1fe0:	4618      	mov	r0, r3
    1fe2:	4b06      	ldr	r3, [pc, #24]	; (1ffc <delay_us+0x2c>)
    1fe4:	4798      	blx	r3
    1fe6:	4603      	mov	r3, r0
    1fe8:	4619      	mov	r1, r3
    1fea:	4620      	mov	r0, r4
    1fec:	4b04      	ldr	r3, [pc, #16]	; (2000 <delay_us+0x30>)
    1fee:	4798      	blx	r3
}
    1ff0:	bf00      	nop
    1ff2:	370c      	adds	r7, #12
    1ff4:	46bd      	mov	sp, r7
    1ff6:	bd90      	pop	{r4, r7, pc}
    1ff8:	2000058c 	.word	0x2000058c
    1ffc:	000042c5 	.word	0x000042c5
    2000:	00004459 	.word	0x00004459

00002004 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2004:	b590      	push	{r4, r7, lr}
    2006:	b083      	sub	sp, #12
    2008:	af00      	add	r7, sp, #0
    200a:	4603      	mov	r3, r0
    200c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    200e:	4b07      	ldr	r3, [pc, #28]	; (202c <delay_ms+0x28>)
    2010:	681c      	ldr	r4, [r3, #0]
    2012:	88fb      	ldrh	r3, [r7, #6]
    2014:	4618      	mov	r0, r3
    2016:	4b06      	ldr	r3, [pc, #24]	; (2030 <delay_ms+0x2c>)
    2018:	4798      	blx	r3
    201a:	4603      	mov	r3, r0
    201c:	4619      	mov	r1, r3
    201e:	4620      	mov	r0, r4
    2020:	4b04      	ldr	r3, [pc, #16]	; (2034 <delay_ms+0x30>)
    2022:	4798      	blx	r3
}
    2024:	bf00      	nop
    2026:	370c      	adds	r7, #12
    2028:	46bd      	mov	sp, r7
    202a:	bd90      	pop	{r4, r7, pc}
    202c:	2000058c 	.word	0x2000058c
    2030:	00004431 	.word	0x00004431
    2034:	00004459 	.word	0x00004459

00002038 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2038:	b580      	push	{r7, lr}
    203a:	af00      	add	r7, sp, #0
	return _event_system_init();
    203c:	4b02      	ldr	r3, [pc, #8]	; (2048 <event_system_init+0x10>)
    203e:	4798      	blx	r3
    2040:	4603      	mov	r3, r0
}
    2042:	4618      	mov	r0, r3
    2044:	bd80      	pop	{r7, pc}
    2046:	bf00      	nop
    2048:	00004ba1 	.word	0x00004ba1

0000204c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    204c:	b580      	push	{r7, lr}
    204e:	b082      	sub	sp, #8
    2050:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2052:	2300      	movs	r3, #0
    2054:	80fb      	strh	r3, [r7, #6]
    2056:	e00e      	b.n	2076 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2058:	88fb      	ldrh	r3, [r7, #6]
    205a:	4a0c      	ldr	r2, [pc, #48]	; (208c <ext_irq_init+0x40>)
    205c:	00db      	lsls	r3, r3, #3
    205e:	4413      	add	r3, r2
    2060:	f04f 32ff 	mov.w	r2, #4294967295
    2064:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2066:	88fb      	ldrh	r3, [r7, #6]
    2068:	4a08      	ldr	r2, [pc, #32]	; (208c <ext_irq_init+0x40>)
    206a:	2100      	movs	r1, #0
    206c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2070:	88fb      	ldrh	r3, [r7, #6]
    2072:	3301      	adds	r3, #1
    2074:	80fb      	strh	r3, [r7, #6]
    2076:	88fb      	ldrh	r3, [r7, #6]
    2078:	2b03      	cmp	r3, #3
    207a:	d9ed      	bls.n	2058 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    207c:	4804      	ldr	r0, [pc, #16]	; (2090 <ext_irq_init+0x44>)
    207e:	4b05      	ldr	r3, [pc, #20]	; (2094 <ext_irq_init+0x48>)
    2080:	4798      	blx	r3
    2082:	4603      	mov	r3, r0
}
    2084:	4618      	mov	r0, r3
    2086:	3708      	adds	r7, #8
    2088:	46bd      	mov	sp, r7
    208a:	bd80      	pop	{r7, pc}
    208c:	20000590 	.word	0x20000590
    2090:	00002099 	.word	0x00002099
    2094:	00004875 	.word	0x00004875

00002098 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2098:	b580      	push	{r7, lr}
    209a:	b084      	sub	sp, #16
    209c:	af00      	add	r7, sp, #0
    209e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    20a0:	2300      	movs	r3, #0
    20a2:	73fb      	strb	r3, [r7, #15]
    20a4:	2304      	movs	r3, #4
    20a6:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    20a8:	e02a      	b.n	2100 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    20aa:	7bba      	ldrb	r2, [r7, #14]
    20ac:	7bfb      	ldrb	r3, [r7, #15]
    20ae:	4413      	add	r3, r2
    20b0:	105b      	asrs	r3, r3, #1
    20b2:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    20b4:	7b7b      	ldrb	r3, [r7, #13]
    20b6:	2b03      	cmp	r3, #3
    20b8:	d827      	bhi.n	210a <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    20ba:	7b7b      	ldrb	r3, [r7, #13]
    20bc:	4a16      	ldr	r2, [pc, #88]	; (2118 <process_ext_irq+0x80>)
    20be:	00db      	lsls	r3, r3, #3
    20c0:	4413      	add	r3, r2
    20c2:	685a      	ldr	r2, [r3, #4]
    20c4:	687b      	ldr	r3, [r7, #4]
    20c6:	429a      	cmp	r2, r3
    20c8:	d10b      	bne.n	20e2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    20ca:	7b7b      	ldrb	r3, [r7, #13]
    20cc:	4a12      	ldr	r2, [pc, #72]	; (2118 <process_ext_irq+0x80>)
    20ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    20d2:	2b00      	cmp	r3, #0
    20d4:	d01b      	beq.n	210e <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    20d6:	7b7b      	ldrb	r3, [r7, #13]
    20d8:	4a0f      	ldr	r2, [pc, #60]	; (2118 <process_ext_irq+0x80>)
    20da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    20de:	4798      	blx	r3
			}
			return;
    20e0:	e015      	b.n	210e <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    20e2:	7b7b      	ldrb	r3, [r7, #13]
    20e4:	4a0c      	ldr	r2, [pc, #48]	; (2118 <process_ext_irq+0x80>)
    20e6:	00db      	lsls	r3, r3, #3
    20e8:	4413      	add	r3, r2
    20ea:	685a      	ldr	r2, [r3, #4]
    20ec:	687b      	ldr	r3, [r7, #4]
    20ee:	429a      	cmp	r2, r3
    20f0:	d203      	bcs.n	20fa <process_ext_irq+0x62>
			lower = middle + 1;
    20f2:	7b7b      	ldrb	r3, [r7, #13]
    20f4:	3301      	adds	r3, #1
    20f6:	73fb      	strb	r3, [r7, #15]
    20f8:	e002      	b.n	2100 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    20fa:	7b7b      	ldrb	r3, [r7, #13]
    20fc:	3b01      	subs	r3, #1
    20fe:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2100:	7bba      	ldrb	r2, [r7, #14]
    2102:	7bfb      	ldrb	r3, [r7, #15]
    2104:	429a      	cmp	r2, r3
    2106:	d2d0      	bcs.n	20aa <process_ext_irq+0x12>
    2108:	e002      	b.n	2110 <process_ext_irq+0x78>
			return;
    210a:	bf00      	nop
    210c:	e000      	b.n	2110 <process_ext_irq+0x78>
			return;
    210e:	bf00      	nop
		}
	}
}
    2110:	3710      	adds	r7, #16
    2112:	46bd      	mov	sp, r7
    2114:	bd80      	pop	{r7, pc}
    2116:	bf00      	nop
    2118:	20000590 	.word	0x20000590

0000211c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    211c:	b580      	push	{r7, lr}
    211e:	b084      	sub	sp, #16
    2120:	af00      	add	r7, sp, #0
    2122:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2124:	687b      	ldr	r3, [r7, #4]
    2126:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	885b      	ldrh	r3, [r3, #2]
    212c:	b29b      	uxth	r3, r3
    212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2132:	2b00      	cmp	r3, #0
    2134:	d107      	bne.n	2146 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    2136:	68fb      	ldr	r3, [r7, #12]
    2138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    213a:	2b00      	cmp	r3, #0
    213c:	d003      	beq.n	2146 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    213e:	68fb      	ldr	r3, [r7, #12]
    2140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2142:	68f8      	ldr	r0, [r7, #12]
    2144:	4798      	blx	r3
		}
	}
}
    2146:	bf00      	nop
    2148:	3710      	adds	r7, #16
    214a:	46bd      	mov	sp, r7
    214c:	bd80      	pop	{r7, pc}

0000214e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    214e:	b580      	push	{r7, lr}
    2150:	b084      	sub	sp, #16
    2152:	af00      	add	r7, sp, #0
    2154:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    215a:	687b      	ldr	r3, [r7, #4]
    215c:	885b      	ldrh	r3, [r3, #2]
    215e:	b29b      	uxth	r3, r3
    2160:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2164:	2b00      	cmp	r3, #0
    2166:	d107      	bne.n	2178 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    2168:	68fb      	ldr	r3, [r7, #12]
    216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    216c:	2b00      	cmp	r3, #0
    216e:	d003      	beq.n	2178 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    2170:	68fb      	ldr	r3, [r7, #12]
    2172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2174:	68f8      	ldr	r0, [r7, #12]
    2176:	4798      	blx	r3
		}
	}
}
    2178:	bf00      	nop
    217a:	3710      	adds	r7, #16
    217c:	46bd      	mov	sp, r7
    217e:	bd80      	pop	{r7, pc}

00002180 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    2180:	b580      	push	{r7, lr}
    2182:	b084      	sub	sp, #16
    2184:	af00      	add	r7, sp, #0
    2186:	6078      	str	r0, [r7, #4]
    2188:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    218e:	687b      	ldr	r3, [r7, #4]
    2190:	885b      	ldrh	r3, [r3, #2]
    2192:	b29b      	uxth	r3, r3
    2194:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2198:	2b00      	cmp	r3, #0
    219a:	d108      	bne.n	21ae <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    219c:	68fb      	ldr	r3, [r7, #12]
    219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    21a0:	2b00      	cmp	r3, #0
    21a2:	d004      	beq.n	21ae <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    21a4:	68fb      	ldr	r3, [r7, #12]
    21a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    21a8:	6839      	ldr	r1, [r7, #0]
    21aa:	68f8      	ldr	r0, [r7, #12]
    21ac:	4798      	blx	r3
		}
	}
}
    21ae:	bf00      	nop
    21b0:	3710      	adds	r7, #16
    21b2:	46bd      	mov	sp, r7
    21b4:	bd80      	pop	{r7, pc}
	...

000021b8 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    21b8:	b580      	push	{r7, lr}
    21ba:	b08a      	sub	sp, #40	; 0x28
    21bc:	af00      	add	r7, sp, #0
    21be:	60f8      	str	r0, [r7, #12]
    21c0:	60b9      	str	r1, [r7, #8]
    21c2:	4613      	mov	r3, r2
    21c4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    21c6:	68fb      	ldr	r3, [r7, #12]
    21c8:	3b28      	subs	r3, #40	; 0x28
    21ca:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    21cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21ce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    21d0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    21d2:	88fb      	ldrh	r3, [r7, #6]
    21d4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    21d6:	f248 0301 	movw	r3, #32769	; 0x8001
    21da:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    21dc:	68bb      	ldr	r3, [r7, #8]
    21de:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    21e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21e2:	f107 0214 	add.w	r2, r7, #20
    21e6:	4611      	mov	r1, r2
    21e8:	4618      	mov	r0, r3
    21ea:	4b06      	ldr	r3, [pc, #24]	; (2204 <i2c_m_async_read+0x4c>)
    21ec:	4798      	blx	r3
    21ee:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    21f0:	6a3b      	ldr	r3, [r7, #32]
    21f2:	2b00      	cmp	r3, #0
    21f4:	d001      	beq.n	21fa <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    21f6:	6a3b      	ldr	r3, [r7, #32]
    21f8:	e000      	b.n	21fc <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    21fa:	88fb      	ldrh	r3, [r7, #6]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3728      	adds	r7, #40	; 0x28
    2200:	46bd      	mov	sp, r7
    2202:	bd80      	pop	{r7, pc}
    2204:	000069f1 	.word	0x000069f1

00002208 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    2208:	b580      	push	{r7, lr}
    220a:	b08a      	sub	sp, #40	; 0x28
    220c:	af00      	add	r7, sp, #0
    220e:	60f8      	str	r0, [r7, #12]
    2210:	60b9      	str	r1, [r7, #8]
    2212:	4613      	mov	r3, r2
    2214:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2216:	68fb      	ldr	r3, [r7, #12]
    2218:	3b28      	subs	r3, #40	; 0x28
    221a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    221e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2220:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2222:	88fb      	ldrh	r3, [r7, #6]
    2224:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    222a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    222c:	68bb      	ldr	r3, [r7, #8]
    222e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2232:	f107 0214 	add.w	r2, r7, #20
    2236:	4611      	mov	r1, r2
    2238:	4618      	mov	r0, r3
    223a:	4b06      	ldr	r3, [pc, #24]	; (2254 <i2c_m_async_write+0x4c>)
    223c:	4798      	blx	r3
    223e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2240:	6a3b      	ldr	r3, [r7, #32]
    2242:	2b00      	cmp	r3, #0
    2244:	d001      	beq.n	224a <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    2246:	6a3b      	ldr	r3, [r7, #32]
    2248:	e000      	b.n	224c <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    224a:	88fb      	ldrh	r3, [r7, #6]
}
    224c:	4618      	mov	r0, r3
    224e:	3728      	adds	r7, #40	; 0x28
    2250:	46bd      	mov	sp, r7
    2252:	bd80      	pop	{r7, pc}
    2254:	000069f1 	.word	0x000069f1

00002258 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    2258:	b580      	push	{r7, lr}
    225a:	b084      	sub	sp, #16
    225c:	af00      	add	r7, sp, #0
    225e:	6078      	str	r0, [r7, #4]
    2260:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	2b00      	cmp	r3, #0
    2266:	bf14      	ite	ne
    2268:	2301      	movne	r3, #1
    226a:	2300      	moveq	r3, #0
    226c:	b2db      	uxtb	r3, r3
    226e:	2289      	movs	r2, #137	; 0x89
    2270:	4915      	ldr	r1, [pc, #84]	; (22c8 <i2c_m_async_init+0x70>)
    2272:	4618      	mov	r0, r3
    2274:	4b15      	ldr	r3, [pc, #84]	; (22cc <i2c_m_async_init+0x74>)
    2276:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	6839      	ldr	r1, [r7, #0]
    227c:	4618      	mov	r0, r3
    227e:	4b14      	ldr	r3, [pc, #80]	; (22d0 <i2c_m_async_init+0x78>)
    2280:	4798      	blx	r3
    2282:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2284:	68fb      	ldr	r3, [r7, #12]
    2286:	2b00      	cmp	r3, #0
    2288:	d001      	beq.n	228e <i2c_m_async_init+0x36>
		return init_status;
    228a:	68fb      	ldr	r3, [r7, #12]
    228c:	e018      	b.n	22c0 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	4a10      	ldr	r2, [pc, #64]	; (22d4 <i2c_m_async_init+0x7c>)
    2292:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	4a10      	ldr	r2, [pc, #64]	; (22d8 <i2c_m_async_init+0x80>)
    2298:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    229a:	687b      	ldr	r3, [r7, #4]
    229c:	4a0f      	ldr	r2, [pc, #60]	; (22dc <i2c_m_async_init+0x84>)
    229e:	2101      	movs	r1, #1
    22a0:	4618      	mov	r0, r3
    22a2:	4b0f      	ldr	r3, [pc, #60]	; (22e0 <i2c_m_async_init+0x88>)
    22a4:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	4a0e      	ldr	r2, [pc, #56]	; (22e4 <i2c_m_async_init+0x8c>)
    22aa:	2102      	movs	r1, #2
    22ac:	4618      	mov	r0, r3
    22ae:	4b0c      	ldr	r3, [pc, #48]	; (22e0 <i2c_m_async_init+0x88>)
    22b0:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	4a0c      	ldr	r2, [pc, #48]	; (22e8 <i2c_m_async_init+0x90>)
    22b6:	2100      	movs	r1, #0
    22b8:	4618      	mov	r0, r3
    22ba:	4b09      	ldr	r3, [pc, #36]	; (22e0 <i2c_m_async_init+0x88>)
    22bc:	4798      	blx	r3

	return ERR_NONE;
    22be:	2300      	movs	r3, #0
}
    22c0:	4618      	mov	r0, r3
    22c2:	3710      	adds	r7, #16
    22c4:	46bd      	mov	sp, r7
    22c6:	bd80      	pop	{r7, pc}
    22c8:	0000ed18 	.word	0x0000ed18
    22cc:	00003911 	.word	0x00003911
    22d0:	00006841 	.word	0x00006841
    22d4:	000021b9 	.word	0x000021b9
    22d8:	00002209 	.word	0x00002209
    22dc:	0000211d 	.word	0x0000211d
    22e0:	00006ac5 	.word	0x00006ac5
    22e4:	0000214f 	.word	0x0000214f
    22e8:	00002181 	.word	0x00002181

000022ec <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    22ec:	b580      	push	{r7, lr}
    22ee:	b084      	sub	sp, #16
    22f0:	af00      	add	r7, sp, #0
    22f2:	60f8      	str	r0, [r7, #12]
    22f4:	60b9      	str	r1, [r7, #8]
    22f6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    22f8:	68fb      	ldr	r3, [r7, #12]
    22fa:	2b00      	cmp	r3, #0
    22fc:	d004      	beq.n	2308 <pwm_init+0x1c>
    22fe:	68bb      	ldr	r3, [r7, #8]
    2300:	2b00      	cmp	r3, #0
    2302:	d001      	beq.n	2308 <pwm_init+0x1c>
    2304:	2301      	movs	r3, #1
    2306:	e000      	b.n	230a <pwm_init+0x1e>
    2308:	2300      	movs	r3, #0
    230a:	f003 0301 	and.w	r3, r3, #1
    230e:	b2db      	uxtb	r3, r3
    2310:	2233      	movs	r2, #51	; 0x33
    2312:	490a      	ldr	r1, [pc, #40]	; (233c <pwm_init+0x50>)
    2314:	4618      	mov	r0, r3
    2316:	4b0a      	ldr	r3, [pc, #40]	; (2340 <pwm_init+0x54>)
    2318:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    231a:	68fb      	ldr	r3, [r7, #12]
    231c:	68b9      	ldr	r1, [r7, #8]
    231e:	4618      	mov	r0, r3
    2320:	4b08      	ldr	r3, [pc, #32]	; (2344 <pwm_init+0x58>)
    2322:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2324:	68fb      	ldr	r3, [r7, #12]
    2326:	4a08      	ldr	r2, [pc, #32]	; (2348 <pwm_init+0x5c>)
    2328:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    232a:	68fb      	ldr	r3, [r7, #12]
    232c:	4a07      	ldr	r2, [pc, #28]	; (234c <pwm_init+0x60>)
    232e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2330:	2300      	movs	r3, #0
}
    2332:	4618      	mov	r0, r3
    2334:	3710      	adds	r7, #16
    2336:	46bd      	mov	sp, r7
    2338:	bd80      	pop	{r7, pc}
    233a:	bf00      	nop
    233c:	0000ed38 	.word	0x0000ed38
    2340:	00003911 	.word	0x00003911
    2344:	00007d7d 	.word	0x00007d7d
    2348:	000023a5 	.word	0x000023a5
    234c:	000023c9 	.word	0x000023c9

00002350 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    2350:	b580      	push	{r7, lr}
    2352:	b082      	sub	sp, #8
    2354:	af00      	add	r7, sp, #0
    2356:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	2b00      	cmp	r3, #0
    235c:	bf14      	ite	ne
    235e:	2301      	movne	r3, #1
    2360:	2300      	moveq	r3, #0
    2362:	b2db      	uxtb	r3, r3
    2364:	224a      	movs	r2, #74	; 0x4a
    2366:	490b      	ldr	r1, [pc, #44]	; (2394 <pwm_enable+0x44>)
    2368:	4618      	mov	r0, r3
    236a:	4b0b      	ldr	r3, [pc, #44]	; (2398 <pwm_enable+0x48>)
    236c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	4618      	mov	r0, r3
    2372:	4b0a      	ldr	r3, [pc, #40]	; (239c <pwm_enable+0x4c>)
    2374:	4798      	blx	r3
    2376:	4603      	mov	r3, r0
    2378:	2b00      	cmp	r3, #0
    237a:	d002      	beq.n	2382 <pwm_enable+0x32>
		return ERR_DENIED;
    237c:	f06f 0310 	mvn.w	r3, #16
    2380:	e004      	b.n	238c <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    2382:	687b      	ldr	r3, [r7, #4]
    2384:	4618      	mov	r0, r3
    2386:	4b06      	ldr	r3, [pc, #24]	; (23a0 <pwm_enable+0x50>)
    2388:	4798      	blx	r3

	return ERR_NONE;
    238a:	2300      	movs	r3, #0
}
    238c:	4618      	mov	r0, r3
    238e:	3708      	adds	r7, #8
    2390:	46bd      	mov	sp, r7
    2392:	bd80      	pop	{r7, pc}
    2394:	0000ed38 	.word	0x0000ed38
    2398:	00003911 	.word	0x00003911
    239c:	00008019 	.word	0x00008019
    23a0:	00007fb9 	.word	0x00007fb9

000023a4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    23a4:	b580      	push	{r7, lr}
    23a6:	b084      	sub	sp, #16
    23a8:	af00      	add	r7, sp, #0
    23aa:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    23b0:	68fb      	ldr	r3, [r7, #12]
    23b2:	695b      	ldr	r3, [r3, #20]
    23b4:	2b00      	cmp	r3, #0
    23b6:	d003      	beq.n	23c0 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    23b8:	68fb      	ldr	r3, [r7, #12]
    23ba:	695b      	ldr	r3, [r3, #20]
    23bc:	68f8      	ldr	r0, [r7, #12]
    23be:	4798      	blx	r3
	}
}
    23c0:	bf00      	nop
    23c2:	3710      	adds	r7, #16
    23c4:	46bd      	mov	sp, r7
    23c6:	bd80      	pop	{r7, pc}

000023c8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    23c8:	b580      	push	{r7, lr}
    23ca:	b084      	sub	sp, #16
    23cc:	af00      	add	r7, sp, #0
    23ce:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    23d0:	687b      	ldr	r3, [r7, #4]
    23d2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    23d4:	68fb      	ldr	r3, [r7, #12]
    23d6:	699b      	ldr	r3, [r3, #24]
    23d8:	2b00      	cmp	r3, #0
    23da:	d003      	beq.n	23e4 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    23dc:	68fb      	ldr	r3, [r7, #12]
    23de:	699b      	ldr	r3, [r3, #24]
    23e0:	68f8      	ldr	r0, [r7, #12]
    23e2:	4798      	blx	r3
	}
}
    23e4:	bf00      	nop
    23e6:	3710      	adds	r7, #16
    23e8:	46bd      	mov	sp, r7
    23ea:	bd80      	pop	{r7, pc}

000023ec <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b082      	sub	sp, #8
    23f0:	af00      	add	r7, sp, #0
    23f2:	6078      	str	r0, [r7, #4]
    23f4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	2b00      	cmp	r3, #0
    23fa:	d004      	beq.n	2406 <qspi_sync_init+0x1a>
    23fc:	683b      	ldr	r3, [r7, #0]
    23fe:	2b00      	cmp	r3, #0
    2400:	d001      	beq.n	2406 <qspi_sync_init+0x1a>
    2402:	2301      	movs	r3, #1
    2404:	e000      	b.n	2408 <qspi_sync_init+0x1c>
    2406:	2300      	movs	r3, #0
    2408:	f003 0301 	and.w	r3, r3, #1
    240c:	b2db      	uxtb	r3, r3
    240e:	2231      	movs	r2, #49	; 0x31
    2410:	4906      	ldr	r1, [pc, #24]	; (242c <qspi_sync_init+0x40>)
    2412:	4618      	mov	r0, r3
    2414:	4b06      	ldr	r3, [pc, #24]	; (2430 <qspi_sync_init+0x44>)
    2416:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2418:	687b      	ldr	r3, [r7, #4]
    241a:	6839      	ldr	r1, [r7, #0]
    241c:	4618      	mov	r0, r3
    241e:	4b05      	ldr	r3, [pc, #20]	; (2434 <qspi_sync_init+0x48>)
    2420:	4798      	blx	r3
    2422:	4603      	mov	r3, r0
}
    2424:	4618      	mov	r0, r3
    2426:	3708      	adds	r7, #8
    2428:	46bd      	mov	sp, r7
    242a:	bd80      	pop	{r7, pc}
    242c:	0000ed50 	.word	0x0000ed50
    2430:	00003911 	.word	0x00003911
    2434:	00005769 	.word	0x00005769

00002438 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2438:	b580      	push	{r7, lr}
    243a:	b082      	sub	sp, #8
    243c:	af00      	add	r7, sp, #0
    243e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2440:	687b      	ldr	r3, [r7, #4]
    2442:	2b00      	cmp	r3, #0
    2444:	bf14      	ite	ne
    2446:	2301      	movne	r3, #1
    2448:	2300      	moveq	r3, #0
    244a:	b2db      	uxtb	r3, r3
    244c:	223f      	movs	r2, #63	; 0x3f
    244e:	4906      	ldr	r1, [pc, #24]	; (2468 <qspi_sync_enable+0x30>)
    2450:	4618      	mov	r0, r3
    2452:	4b06      	ldr	r3, [pc, #24]	; (246c <qspi_sync_enable+0x34>)
    2454:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2456:	687b      	ldr	r3, [r7, #4]
    2458:	4618      	mov	r0, r3
    245a:	4b05      	ldr	r3, [pc, #20]	; (2470 <qspi_sync_enable+0x38>)
    245c:	4798      	blx	r3
    245e:	4603      	mov	r3, r0
}
    2460:	4618      	mov	r0, r3
    2462:	3708      	adds	r7, #8
    2464:	46bd      	mov	sp, r7
    2466:	bd80      	pop	{r7, pc}
    2468:	0000ed50 	.word	0x0000ed50
    246c:	00003911 	.word	0x00003911
    2470:	000057dd 	.word	0x000057dd

00002474 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2474:	b580      	push	{r7, lr}
    2476:	b082      	sub	sp, #8
    2478:	af00      	add	r7, sp, #0
    247a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    247c:	687b      	ldr	r3, [r7, #4]
    247e:	2b00      	cmp	r3, #0
    2480:	bf14      	ite	ne
    2482:	2301      	movne	r3, #1
    2484:	2300      	moveq	r3, #0
    2486:	b2db      	uxtb	r3, r3
    2488:	2246      	movs	r2, #70	; 0x46
    248a:	4906      	ldr	r1, [pc, #24]	; (24a4 <qspi_sync_disable+0x30>)
    248c:	4618      	mov	r0, r3
    248e:	4b06      	ldr	r3, [pc, #24]	; (24a8 <qspi_sync_disable+0x34>)
    2490:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2492:	687b      	ldr	r3, [r7, #4]
    2494:	4618      	mov	r0, r3
    2496:	4b05      	ldr	r3, [pc, #20]	; (24ac <qspi_sync_disable+0x38>)
    2498:	4798      	blx	r3
    249a:	4603      	mov	r3, r0
}
    249c:	4618      	mov	r0, r3
    249e:	3708      	adds	r7, #8
    24a0:	46bd      	mov	sp, r7
    24a2:	bd80      	pop	{r7, pc}
    24a4:	0000ed50 	.word	0x0000ed50
    24a8:	00003911 	.word	0x00003911
    24ac:	00005801 	.word	0x00005801

000024b0 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    24b0:	b580      	push	{r7, lr}
    24b2:	b082      	sub	sp, #8
    24b4:	af00      	add	r7, sp, #0
    24b6:	6078      	str	r0, [r7, #4]
    24b8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    24ba:	687b      	ldr	r3, [r7, #4]
    24bc:	2b00      	cmp	r3, #0
    24be:	d004      	beq.n	24ca <qspi_sync_serial_run_command+0x1a>
    24c0:	683b      	ldr	r3, [r7, #0]
    24c2:	2b00      	cmp	r3, #0
    24c4:	d001      	beq.n	24ca <qspi_sync_serial_run_command+0x1a>
    24c6:	2301      	movs	r3, #1
    24c8:	e000      	b.n	24cc <qspi_sync_serial_run_command+0x1c>
    24ca:	2300      	movs	r3, #0
    24cc:	f003 0301 	and.w	r3, r3, #1
    24d0:	b2db      	uxtb	r3, r3
    24d2:	224d      	movs	r2, #77	; 0x4d
    24d4:	4906      	ldr	r1, [pc, #24]	; (24f0 <qspi_sync_serial_run_command+0x40>)
    24d6:	4618      	mov	r0, r3
    24d8:	4b06      	ldr	r3, [pc, #24]	; (24f4 <qspi_sync_serial_run_command+0x44>)
    24da:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	6839      	ldr	r1, [r7, #0]
    24e0:	4618      	mov	r0, r3
    24e2:	4b05      	ldr	r3, [pc, #20]	; (24f8 <qspi_sync_serial_run_command+0x48>)
    24e4:	4798      	blx	r3
    24e6:	4603      	mov	r3, r0
}
    24e8:	4618      	mov	r0, r3
    24ea:	3708      	adds	r7, #8
    24ec:	46bd      	mov	sp, r7
    24ee:	bd80      	pop	{r7, pc}
    24f0:	0000ed50 	.word	0x0000ed50
    24f4:	00003911 	.word	0x00003911
    24f8:	0000594d 	.word	0x0000594d

000024fc <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    24fc:	b580      	push	{r7, lr}
    24fe:	b084      	sub	sp, #16
    2500:	af00      	add	r7, sp, #0
    2502:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2504:	687b      	ldr	r3, [r7, #4]
    2506:	3b04      	subs	r3, #4
    2508:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    250a:	687b      	ldr	r3, [r7, #4]
    250c:	791b      	ldrb	r3, [r3, #4]
    250e:	2b01      	cmp	r3, #1
    2510:	d80e      	bhi.n	2530 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    2512:	68fb      	ldr	r3, [r7, #12]
    2514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2516:	68fb      	ldr	r3, [r7, #12]
    2518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    251a:	1c58      	adds	r0, r3, #1
    251c:	68f9      	ldr	r1, [r7, #12]
    251e:	6448      	str	r0, [r1, #68]	; 0x44
    2520:	4413      	add	r3, r2
    2522:	781b      	ldrb	r3, [r3, #0]
    2524:	b29b      	uxth	r3, r3
    2526:	4619      	mov	r1, r3
    2528:	6878      	ldr	r0, [r7, #4]
    252a:	4b11      	ldr	r3, [pc, #68]	; (2570 <_spi_dev_tx+0x74>)
    252c:	4798      	blx	r3
    252e:	e00d      	b.n	254c <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    2530:	68fb      	ldr	r3, [r7, #12]
    2532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2534:	68fb      	ldr	r3, [r7, #12]
    2536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2538:	1c58      	adds	r0, r3, #1
    253a:	68f9      	ldr	r1, [r7, #12]
    253c:	6448      	str	r0, [r1, #68]	; 0x44
    253e:	005b      	lsls	r3, r3, #1
    2540:	4413      	add	r3, r2
    2542:	881b      	ldrh	r3, [r3, #0]
    2544:	4619      	mov	r1, r3
    2546:	6878      	ldr	r0, [r7, #4]
    2548:	4b09      	ldr	r3, [pc, #36]	; (2570 <_spi_dev_tx+0x74>)
    254a:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    254c:	68fb      	ldr	r3, [r7, #12]
    254e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2550:	68fb      	ldr	r3, [r7, #12]
    2552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2554:	429a      	cmp	r2, r3
    2556:	d107      	bne.n	2568 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    2558:	2100      	movs	r1, #0
    255a:	6878      	ldr	r0, [r7, #4]
    255c:	4b05      	ldr	r3, [pc, #20]	; (2574 <_spi_dev_tx+0x78>)
    255e:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    2560:	2101      	movs	r1, #1
    2562:	6878      	ldr	r0, [r7, #4]
    2564:	4b04      	ldr	r3, [pc, #16]	; (2578 <_spi_dev_tx+0x7c>)
    2566:	4798      	blx	r3
	}
}
    2568:	bf00      	nop
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}
    2570:	0000762d 	.word	0x0000762d
    2574:	000074f1 	.word	0x000074f1
    2578:	000075c5 	.word	0x000075c5

0000257c <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    257c:	b590      	push	{r4, r7, lr}
    257e:	b085      	sub	sp, #20
    2580:	af00      	add	r7, sp, #0
    2582:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2584:	687b      	ldr	r3, [r7, #4]
    2586:	3b04      	subs	r3, #4
    2588:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    258a:	68fb      	ldr	r3, [r7, #12]
    258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    258e:	2b00      	cmp	r3, #0
    2590:	d021      	beq.n	25d6 <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    2592:	687b      	ldr	r3, [r7, #4]
    2594:	791b      	ldrb	r3, [r3, #4]
    2596:	2b01      	cmp	r3, #1
    2598:	d80e      	bhi.n	25b8 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    259a:	68fb      	ldr	r3, [r7, #12]
    259c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    259e:	68fb      	ldr	r3, [r7, #12]
    25a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    25a2:	1c58      	adds	r0, r3, #1
    25a4:	68f9      	ldr	r1, [r7, #12]
    25a6:	6448      	str	r0, [r1, #68]	; 0x44
    25a8:	18d4      	adds	r4, r2, r3
    25aa:	6878      	ldr	r0, [r7, #4]
    25ac:	4b2e      	ldr	r3, [pc, #184]	; (2668 <_spi_dev_rx+0xec>)
    25ae:	4798      	blx	r3
    25b0:	4603      	mov	r3, r0
    25b2:	b2db      	uxtb	r3, r3
    25b4:	7023      	strb	r3, [r4, #0]
    25b6:	e016      	b.n	25e6 <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    25b8:	68fb      	ldr	r3, [r7, #12]
    25ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    25bc:	68fb      	ldr	r3, [r7, #12]
    25be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    25c0:	1c58      	adds	r0, r3, #1
    25c2:	68f9      	ldr	r1, [r7, #12]
    25c4:	6448      	str	r0, [r1, #68]	; 0x44
    25c6:	005b      	lsls	r3, r3, #1
    25c8:	18d4      	adds	r4, r2, r3
    25ca:	6878      	ldr	r0, [r7, #4]
    25cc:	4b26      	ldr	r3, [pc, #152]	; (2668 <_spi_dev_rx+0xec>)
    25ce:	4798      	blx	r3
    25d0:	4603      	mov	r3, r0
    25d2:	8023      	strh	r3, [r4, #0]
    25d4:	e007      	b.n	25e6 <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    25d6:	6878      	ldr	r0, [r7, #4]
    25d8:	4b23      	ldr	r3, [pc, #140]	; (2668 <_spi_dev_rx+0xec>)
    25da:	4798      	blx	r3
		spi->xfercnt++;
    25dc:	68fb      	ldr	r3, [r7, #12]
    25de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    25e0:	1c5a      	adds	r2, r3, #1
    25e2:	68fb      	ldr	r3, [r7, #12]
    25e4:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    25e6:	68fb      	ldr	r3, [r7, #12]
    25e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    25ea:	68fb      	ldr	r3, [r7, #12]
    25ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    25ee:	429a      	cmp	r2, r3
    25f0:	d226      	bcs.n	2640 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    25f2:	68fb      	ldr	r3, [r7, #12]
    25f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    25f6:	2b00      	cmp	r3, #0
    25f8:	d01b      	beq.n	2632 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    25fa:	687b      	ldr	r3, [r7, #4]
    25fc:	791b      	ldrb	r3, [r3, #4]
    25fe:	2b01      	cmp	r3, #1
    2600:	d80b      	bhi.n	261a <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    2602:	68fb      	ldr	r3, [r7, #12]
    2604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2606:	68fb      	ldr	r3, [r7, #12]
    2608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    260a:	4413      	add	r3, r2
    260c:	781b      	ldrb	r3, [r3, #0]
    260e:	b29b      	uxth	r3, r3
    2610:	4619      	mov	r1, r3
    2612:	6878      	ldr	r0, [r7, #4]
    2614:	4b15      	ldr	r3, [pc, #84]	; (266c <_spi_dev_rx+0xf0>)
    2616:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    2618:	e022      	b.n	2660 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    261a:	68fb      	ldr	r3, [r7, #12]
    261c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    261e:	68fb      	ldr	r3, [r7, #12]
    2620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2622:	005b      	lsls	r3, r3, #1
    2624:	4413      	add	r3, r2
    2626:	881b      	ldrh	r3, [r3, #0]
    2628:	4619      	mov	r1, r3
    262a:	6878      	ldr	r0, [r7, #4]
    262c:	4b0f      	ldr	r3, [pc, #60]	; (266c <_spi_dev_rx+0xf0>)
    262e:	4798      	blx	r3
}
    2630:	e016      	b.n	2660 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    2632:	687b      	ldr	r3, [r7, #4]
    2634:	88db      	ldrh	r3, [r3, #6]
    2636:	4619      	mov	r1, r3
    2638:	6878      	ldr	r0, [r7, #4]
    263a:	4b0c      	ldr	r3, [pc, #48]	; (266c <_spi_dev_rx+0xf0>)
    263c:	4798      	blx	r3
}
    263e:	e00f      	b.n	2660 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    2640:	2100      	movs	r1, #0
    2642:	6878      	ldr	r0, [r7, #4]
    2644:	4b0a      	ldr	r3, [pc, #40]	; (2670 <_spi_dev_rx+0xf4>)
    2646:	4798      	blx	r3
		spi->stat = 0;
    2648:	68fb      	ldr	r3, [r7, #12]
    264a:	2200      	movs	r2, #0
    264c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    2650:	68fb      	ldr	r3, [r7, #12]
    2652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2654:	2b00      	cmp	r3, #0
    2656:	d003      	beq.n	2660 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    2658:	68fb      	ldr	r3, [r7, #12]
    265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    265c:	68f8      	ldr	r0, [r7, #12]
    265e:	4798      	blx	r3
}
    2660:	bf00      	nop
    2662:	3714      	adds	r7, #20
    2664:	46bd      	mov	sp, r7
    2666:	bd90      	pop	{r4, r7, pc}
    2668:	00007685 	.word	0x00007685
    266c:	0000762d 	.word	0x0000762d
    2670:	00007555 	.word	0x00007555

00002674 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    2674:	b580      	push	{r7, lr}
    2676:	b084      	sub	sp, #16
    2678:	af00      	add	r7, sp, #0
    267a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    267c:	687b      	ldr	r3, [r7, #4]
    267e:	3b04      	subs	r3, #4
    2680:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    2682:	68fb      	ldr	r3, [r7, #12]
    2684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2686:	68fb      	ldr	r3, [r7, #12]
    2688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    268a:	429a      	cmp	r2, r3
    268c:	d30f      	bcc.n	26ae <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    268e:	2100      	movs	r1, #0
    2690:	6878      	ldr	r0, [r7, #4]
    2692:	4b09      	ldr	r3, [pc, #36]	; (26b8 <_spi_dev_complete+0x44>)
    2694:	4798      	blx	r3
		spi->stat = 0;
    2696:	68fb      	ldr	r3, [r7, #12]
    2698:	2200      	movs	r2, #0
    269a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    269e:	68fb      	ldr	r3, [r7, #12]
    26a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    26a2:	2b00      	cmp	r3, #0
    26a4:	d003      	beq.n	26ae <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    26a6:	68fb      	ldr	r3, [r7, #12]
    26a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    26aa:	68f8      	ldr	r0, [r7, #12]
    26ac:	4798      	blx	r3
		}
	}
}
    26ae:	bf00      	nop
    26b0:	3710      	adds	r7, #16
    26b2:	46bd      	mov	sp, r7
    26b4:	bd80      	pop	{r7, pc}
    26b6:	bf00      	nop
    26b8:	000075c5 	.word	0x000075c5

000026bc <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    26bc:	b580      	push	{r7, lr}
    26be:	b084      	sub	sp, #16
    26c0:	af00      	add	r7, sp, #0
    26c2:	6078      	str	r0, [r7, #4]
    26c4:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	3b04      	subs	r3, #4
    26ca:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    26cc:	2100      	movs	r1, #0
    26ce:	6878      	ldr	r0, [r7, #4]
    26d0:	4b0d      	ldr	r3, [pc, #52]	; (2708 <_spi_dev_error+0x4c>)
    26d2:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    26d4:	2100      	movs	r1, #0
    26d6:	6878      	ldr	r0, [r7, #4]
    26d8:	4b0c      	ldr	r3, [pc, #48]	; (270c <_spi_dev_error+0x50>)
    26da:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    26dc:	2100      	movs	r1, #0
    26de:	6878      	ldr	r0, [r7, #4]
    26e0:	4b0b      	ldr	r3, [pc, #44]	; (2710 <_spi_dev_error+0x54>)
    26e2:	4798      	blx	r3
	spi->stat = 0;
    26e4:	68fb      	ldr	r3, [r7, #12]
    26e6:	2200      	movs	r2, #0
    26e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    26ec:	68fb      	ldr	r3, [r7, #12]
    26ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    26f0:	2b00      	cmp	r3, #0
    26f2:	d004      	beq.n	26fe <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    26f4:	68fb      	ldr	r3, [r7, #12]
    26f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    26f8:	6839      	ldr	r1, [r7, #0]
    26fa:	68f8      	ldr	r0, [r7, #12]
    26fc:	4798      	blx	r3
	}
}
    26fe:	bf00      	nop
    2700:	3710      	adds	r7, #16
    2702:	46bd      	mov	sp, r7
    2704:	bd80      	pop	{r7, pc}
    2706:	bf00      	nop
    2708:	000074f1 	.word	0x000074f1
    270c:	00007555 	.word	0x00007555
    2710:	000075c5 	.word	0x000075c5

00002714 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    2714:	b580      	push	{r7, lr}
    2716:	b084      	sub	sp, #16
    2718:	af00      	add	r7, sp, #0
    271a:	6078      	str	r0, [r7, #4]
    271c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    271e:	2300      	movs	r3, #0
    2720:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2722:	687b      	ldr	r3, [r7, #4]
    2724:	2b00      	cmp	r3, #0
    2726:	d004      	beq.n	2732 <spi_m_async_init+0x1e>
    2728:	683b      	ldr	r3, [r7, #0]
    272a:	2b00      	cmp	r3, #0
    272c:	d001      	beq.n	2732 <spi_m_async_init+0x1e>
    272e:	2301      	movs	r3, #1
    2730:	e000      	b.n	2734 <spi_m_async_init+0x20>
    2732:	2300      	movs	r3, #0
    2734:	f003 0301 	and.w	r3, r3, #1
    2738:	b2db      	uxtb	r3, r3
    273a:	22a5      	movs	r2, #165	; 0xa5
    273c:	491c      	ldr	r1, [pc, #112]	; (27b0 <spi_m_async_init+0x9c>)
    273e:	4618      	mov	r0, r3
    2740:	4b1c      	ldr	r3, [pc, #112]	; (27b4 <spi_m_async_init+0xa0>)
    2742:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	683a      	ldr	r2, [r7, #0]
    2748:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    274a:	687b      	ldr	r3, [r7, #4]
    274c:	3304      	adds	r3, #4
    274e:	6839      	ldr	r1, [r7, #0]
    2750:	4618      	mov	r0, r3
    2752:	4b19      	ldr	r3, [pc, #100]	; (27b8 <spi_m_async_init+0xa4>)
    2754:	4798      	blx	r3
    2756:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    2758:	68fb      	ldr	r3, [r7, #12]
    275a:	2b00      	cmp	r3, #0
    275c:	db23      	blt.n	27a6 <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	3304      	adds	r3, #4
    2762:	4a16      	ldr	r2, [pc, #88]	; (27bc <spi_m_async_init+0xa8>)
    2764:	2100      	movs	r1, #0
    2766:	4618      	mov	r0, r3
    2768:	4b15      	ldr	r3, [pc, #84]	; (27c0 <spi_m_async_init+0xac>)
    276a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    276c:	687b      	ldr	r3, [r7, #4]
    276e:	3304      	adds	r3, #4
    2770:	4a14      	ldr	r2, [pc, #80]	; (27c4 <spi_m_async_init+0xb0>)
    2772:	2101      	movs	r1, #1
    2774:	4618      	mov	r0, r3
    2776:	4b12      	ldr	r3, [pc, #72]	; (27c0 <spi_m_async_init+0xac>)
    2778:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	3304      	adds	r3, #4
    277e:	4a12      	ldr	r2, [pc, #72]	; (27c8 <spi_m_async_init+0xb4>)
    2780:	2102      	movs	r1, #2
    2782:	4618      	mov	r0, r3
    2784:	4b0e      	ldr	r3, [pc, #56]	; (27c0 <spi_m_async_init+0xac>)
    2786:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	3304      	adds	r3, #4
    278c:	4a0f      	ldr	r2, [pc, #60]	; (27cc <spi_m_async_init+0xb8>)
    278e:	2103      	movs	r1, #3
    2790:	4618      	mov	r0, r3
    2792:	4b0b      	ldr	r3, [pc, #44]	; (27c0 <spi_m_async_init+0xac>)
    2794:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    2796:	687b      	ldr	r3, [r7, #4]
    2798:	4a0d      	ldr	r2, [pc, #52]	; (27d0 <spi_m_async_init+0xbc>)
    279a:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    279c:	687b      	ldr	r3, [r7, #4]
    279e:	4a0d      	ldr	r2, [pc, #52]	; (27d4 <spi_m_async_init+0xc0>)
    27a0:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    27a2:	2300      	movs	r3, #0
    27a4:	e000      	b.n	27a8 <spi_m_async_init+0x94>
		return rc;
    27a6:	68fb      	ldr	r3, [r7, #12]
}
    27a8:	4618      	mov	r0, r3
    27aa:	3710      	adds	r7, #16
    27ac:	46bd      	mov	sp, r7
    27ae:	bd80      	pop	{r7, pc}
    27b0:	0000ed6c 	.word	0x0000ed6c
    27b4:	00003911 	.word	0x00003911
    27b8:	00007151 	.word	0x00007151
    27bc:	000024fd 	.word	0x000024fd
    27c0:	000076d5 	.word	0x000076d5
    27c4:	0000257d 	.word	0x0000257d
    27c8:	00002675 	.word	0x00002675
    27cc:	000026bd 	.word	0x000026bd
    27d0:	000027d9 	.word	0x000027d9
    27d4:	00002859 	.word	0x00002859

000027d8 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    27d8:	b580      	push	{r7, lr}
    27da:	b086      	sub	sp, #24
    27dc:	af00      	add	r7, sp, #0
    27de:	60f8      	str	r0, [r7, #12]
    27e0:	60b9      	str	r1, [r7, #8]
    27e2:	4613      	mov	r3, r2
    27e4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    27e6:	68fb      	ldr	r3, [r7, #12]
    27e8:	2b00      	cmp	r3, #0
    27ea:	bf14      	ite	ne
    27ec:	2301      	movne	r3, #1
    27ee:	2300      	moveq	r3, #0
    27f0:	b2db      	uxtb	r3, r3
    27f2:	f240 1205 	movw	r2, #261	; 0x105
    27f6:	4914      	ldr	r1, [pc, #80]	; (2848 <_spi_m_async_io_read+0x70>)
    27f8:	4618      	mov	r0, r3
    27fa:	4b14      	ldr	r3, [pc, #80]	; (284c <_spi_m_async_io_read+0x74>)
    27fc:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    27fe:	68fb      	ldr	r3, [r7, #12]
    2800:	3b24      	subs	r3, #36	; 0x24
    2802:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    2804:	697b      	ldr	r3, [r7, #20]
    2806:	68ba      	ldr	r2, [r7, #8]
    2808:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    280a:	697b      	ldr	r3, [r7, #20]
    280c:	2200      	movs	r2, #0
    280e:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2810:	88fa      	ldrh	r2, [r7, #6]
    2812:	697b      	ldr	r3, [r7, #20]
    2814:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    2816:	697b      	ldr	r3, [r7, #20]
    2818:	2200      	movs	r2, #0
    281a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    281c:	697b      	ldr	r3, [r7, #20]
    281e:	2210      	movs	r2, #16
    2820:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    2824:	697b      	ldr	r3, [r7, #20]
    2826:	3304      	adds	r3, #4
    2828:	2101      	movs	r1, #1
    282a:	4618      	mov	r0, r3
    282c:	4b08      	ldr	r3, [pc, #32]	; (2850 <_spi_m_async_io_read+0x78>)
    282e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    2830:	697b      	ldr	r3, [r7, #20]
    2832:	3304      	adds	r3, #4
    2834:	f240 11ff 	movw	r1, #511	; 0x1ff
    2838:	4618      	mov	r0, r3
    283a:	4b06      	ldr	r3, [pc, #24]	; (2854 <_spi_m_async_io_read+0x7c>)
    283c:	4798      	blx	r3

	return ERR_NONE;
    283e:	2300      	movs	r3, #0
}
    2840:	4618      	mov	r0, r3
    2842:	3718      	adds	r7, #24
    2844:	46bd      	mov	sp, r7
    2846:	bd80      	pop	{r7, pc}
    2848:	0000ed6c 	.word	0x0000ed6c
    284c:	00003911 	.word	0x00003911
    2850:	00007555 	.word	0x00007555
    2854:	0000762d 	.word	0x0000762d

00002858 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    2858:	b580      	push	{r7, lr}
    285a:	b086      	sub	sp, #24
    285c:	af00      	add	r7, sp, #0
    285e:	60f8      	str	r0, [r7, #12]
    2860:	60b9      	str	r1, [r7, #8]
    2862:	4613      	mov	r3, r2
    2864:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2866:	68fb      	ldr	r3, [r7, #12]
    2868:	2b00      	cmp	r3, #0
    286a:	bf14      	ite	ne
    286c:	2301      	movne	r3, #1
    286e:	2300      	moveq	r3, #0
    2870:	b2db      	uxtb	r3, r3
    2872:	f240 1227 	movw	r2, #295	; 0x127
    2876:	4911      	ldr	r1, [pc, #68]	; (28bc <_spi_m_async_io_write+0x64>)
    2878:	4618      	mov	r0, r3
    287a:	4b11      	ldr	r3, [pc, #68]	; (28c0 <_spi_m_async_io_write+0x68>)
    287c:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    287e:	68fb      	ldr	r3, [r7, #12]
    2880:	3b24      	subs	r3, #36	; 0x24
    2882:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    2884:	697b      	ldr	r3, [r7, #20]
    2886:	2200      	movs	r2, #0
    2888:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    288a:	697b      	ldr	r3, [r7, #20]
    288c:	68ba      	ldr	r2, [r7, #8]
    288e:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2890:	88fa      	ldrh	r2, [r7, #6]
    2892:	697b      	ldr	r3, [r7, #20]
    2894:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    2896:	697b      	ldr	r3, [r7, #20]
    2898:	2200      	movs	r2, #0
    289a:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    289c:	697b      	ldr	r3, [r7, #20]
    289e:	2210      	movs	r2, #16
    28a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    28a4:	697b      	ldr	r3, [r7, #20]
    28a6:	3304      	adds	r3, #4
    28a8:	2101      	movs	r1, #1
    28aa:	4618      	mov	r0, r3
    28ac:	4b05      	ldr	r3, [pc, #20]	; (28c4 <_spi_m_async_io_write+0x6c>)
    28ae:	4798      	blx	r3

	return ERR_NONE;
    28b0:	2300      	movs	r3, #0
}
    28b2:	4618      	mov	r0, r3
    28b4:	3718      	adds	r7, #24
    28b6:	46bd      	mov	sp, r7
    28b8:	bd80      	pop	{r7, pc}
    28ba:	bf00      	nop
    28bc:	0000ed6c 	.word	0x0000ed6c
    28c0:	00003911 	.word	0x00003911
    28c4:	000074f1 	.word	0x000074f1

000028c8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    28c8:	b580      	push	{r7, lr}
    28ca:	b084      	sub	sp, #16
    28cc:	af00      	add	r7, sp, #0
    28ce:	6078      	str	r0, [r7, #4]
    28d0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    28d2:	2300      	movs	r3, #0
    28d4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	2b00      	cmp	r3, #0
    28da:	d004      	beq.n	28e6 <spi_m_sync_init+0x1e>
    28dc:	683b      	ldr	r3, [r7, #0]
    28de:	2b00      	cmp	r3, #0
    28e0:	d001      	beq.n	28e6 <spi_m_sync_init+0x1e>
    28e2:	2301      	movs	r3, #1
    28e4:	e000      	b.n	28e8 <spi_m_sync_init+0x20>
    28e6:	2300      	movs	r3, #0
    28e8:	f003 0301 	and.w	r3, r3, #1
    28ec:	b2db      	uxtb	r3, r3
    28ee:	2240      	movs	r2, #64	; 0x40
    28f0:	4910      	ldr	r1, [pc, #64]	; (2934 <spi_m_sync_init+0x6c>)
    28f2:	4618      	mov	r0, r3
    28f4:	4b10      	ldr	r3, [pc, #64]	; (2938 <spi_m_sync_init+0x70>)
    28f6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    28f8:	687b      	ldr	r3, [r7, #4]
    28fa:	683a      	ldr	r2, [r7, #0]
    28fc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	3304      	adds	r3, #4
    2902:	6839      	ldr	r1, [r7, #0]
    2904:	4618      	mov	r0, r3
    2906:	4b0d      	ldr	r3, [pc, #52]	; (293c <spi_m_sync_init+0x74>)
    2908:	4798      	blx	r3
    290a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    290c:	68fb      	ldr	r3, [r7, #12]
    290e:	2b00      	cmp	r3, #0
    2910:	da01      	bge.n	2916 <spi_m_sync_init+0x4e>
		return rc;
    2912:	68fb      	ldr	r3, [r7, #12]
    2914:	e00a      	b.n	292c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    291c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    291e:	687b      	ldr	r3, [r7, #4]
    2920:	4a07      	ldr	r2, [pc, #28]	; (2940 <spi_m_sync_init+0x78>)
    2922:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2924:	687b      	ldr	r3, [r7, #4]
    2926:	4a07      	ldr	r2, [pc, #28]	; (2944 <spi_m_sync_init+0x7c>)
    2928:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    292a:	2300      	movs	r3, #0
}
    292c:	4618      	mov	r0, r3
    292e:	3710      	adds	r7, #16
    2930:	46bd      	mov	sp, r7
    2932:	bd80      	pop	{r7, pc}
    2934:	0000ed8c 	.word	0x0000ed8c
    2938:	00003911 	.word	0x00003911
    293c:	00007045 	.word	0x00007045
    2940:	000029c1 	.word	0x000029c1
    2944:	00002a19 	.word	0x00002a19

00002948 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2948:	b580      	push	{r7, lr}
    294a:	b082      	sub	sp, #8
    294c:	af00      	add	r7, sp, #0
    294e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	2b00      	cmp	r3, #0
    2954:	bf14      	ite	ne
    2956:	2301      	movne	r3, #1
    2958:	2300      	moveq	r3, #0
    295a:	b2db      	uxtb	r3, r3
    295c:	2257      	movs	r2, #87	; 0x57
    295e:	4906      	ldr	r1, [pc, #24]	; (2978 <spi_m_sync_enable+0x30>)
    2960:	4618      	mov	r0, r3
    2962:	4b06      	ldr	r3, [pc, #24]	; (297c <spi_m_sync_enable+0x34>)
    2964:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2966:	687b      	ldr	r3, [r7, #4]
    2968:	3304      	adds	r3, #4
    296a:	4618      	mov	r0, r3
    296c:	4b04      	ldr	r3, [pc, #16]	; (2980 <spi_m_sync_enable+0x38>)
    296e:	4798      	blx	r3
}
    2970:	bf00      	nop
    2972:	3708      	adds	r7, #8
    2974:	46bd      	mov	sp, r7
    2976:	bd80      	pop	{r7, pc}
    2978:	0000ed8c 	.word	0x0000ed8c
    297c:	00003911 	.word	0x00003911
    2980:	000071e1 	.word	0x000071e1

00002984 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2984:	b580      	push	{r7, lr}
    2986:	b082      	sub	sp, #8
    2988:	af00      	add	r7, sp, #0
    298a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    298c:	687b      	ldr	r3, [r7, #4]
    298e:	2b00      	cmp	r3, #0
    2990:	bf14      	ite	ne
    2992:	2301      	movne	r3, #1
    2994:	2300      	moveq	r3, #0
    2996:	b2db      	uxtb	r3, r3
    2998:	225d      	movs	r2, #93	; 0x5d
    299a:	4906      	ldr	r1, [pc, #24]	; (29b4 <spi_m_sync_disable+0x30>)
    299c:	4618      	mov	r0, r3
    299e:	4b06      	ldr	r3, [pc, #24]	; (29b8 <spi_m_sync_disable+0x34>)
    29a0:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    29a2:	687b      	ldr	r3, [r7, #4]
    29a4:	3304      	adds	r3, #4
    29a6:	4618      	mov	r0, r3
    29a8:	4b04      	ldr	r3, [pc, #16]	; (29bc <spi_m_sync_disable+0x38>)
    29aa:	4798      	blx	r3
}
    29ac:	bf00      	nop
    29ae:	3708      	adds	r7, #8
    29b0:	46bd      	mov	sp, r7
    29b2:	bd80      	pop	{r7, pc}
    29b4:	0000ed8c 	.word	0x0000ed8c
    29b8:	00003911 	.word	0x00003911
    29bc:	00007231 	.word	0x00007231

000029c0 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    29c0:	b580      	push	{r7, lr}
    29c2:	b088      	sub	sp, #32
    29c4:	af00      	add	r7, sp, #0
    29c6:	60f8      	str	r0, [r7, #12]
    29c8:	60b9      	str	r1, [r7, #8]
    29ca:	4613      	mov	r3, r2
    29cc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    29ce:	68fb      	ldr	r3, [r7, #12]
    29d0:	2b00      	cmp	r3, #0
    29d2:	bf14      	ite	ne
    29d4:	2301      	movne	r3, #1
    29d6:	2300      	moveq	r3, #0
    29d8:	b2db      	uxtb	r3, r3
    29da:	2287      	movs	r2, #135	; 0x87
    29dc:	490b      	ldr	r1, [pc, #44]	; (2a0c <_spi_m_sync_io_read+0x4c>)
    29de:	4618      	mov	r0, r3
    29e0:	4b0b      	ldr	r3, [pc, #44]	; (2a10 <_spi_m_sync_io_read+0x50>)
    29e2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    29e4:	68fb      	ldr	r3, [r7, #12]
    29e6:	3b0c      	subs	r3, #12
    29e8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    29ea:	68bb      	ldr	r3, [r7, #8]
    29ec:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    29ee:	2300      	movs	r3, #0
    29f0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    29f2:	88fb      	ldrh	r3, [r7, #6]
    29f4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    29f6:	f107 0310 	add.w	r3, r7, #16
    29fa:	4619      	mov	r1, r3
    29fc:	69f8      	ldr	r0, [r7, #28]
    29fe:	4b05      	ldr	r3, [pc, #20]	; (2a14 <_spi_m_sync_io_read+0x54>)
    2a00:	4798      	blx	r3
    2a02:	4603      	mov	r3, r0
}
    2a04:	4618      	mov	r0, r3
    2a06:	3720      	adds	r7, #32
    2a08:	46bd      	mov	sp, r7
    2a0a:	bd80      	pop	{r7, pc}
    2a0c:	0000ed8c 	.word	0x0000ed8c
    2a10:	00003911 	.word	0x00003911
    2a14:	00002a71 	.word	0x00002a71

00002a18 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2a18:	b580      	push	{r7, lr}
    2a1a:	b088      	sub	sp, #32
    2a1c:	af00      	add	r7, sp, #0
    2a1e:	60f8      	str	r0, [r7, #12]
    2a20:	60b9      	str	r1, [r7, #8]
    2a22:	4613      	mov	r3, r2
    2a24:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2a26:	68fb      	ldr	r3, [r7, #12]
    2a28:	2b00      	cmp	r3, #0
    2a2a:	bf14      	ite	ne
    2a2c:	2301      	movne	r3, #1
    2a2e:	2300      	moveq	r3, #0
    2a30:	b2db      	uxtb	r3, r3
    2a32:	22a3      	movs	r2, #163	; 0xa3
    2a34:	490b      	ldr	r1, [pc, #44]	; (2a64 <_spi_m_sync_io_write+0x4c>)
    2a36:	4618      	mov	r0, r3
    2a38:	4b0b      	ldr	r3, [pc, #44]	; (2a68 <_spi_m_sync_io_write+0x50>)
    2a3a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2a3c:	68fb      	ldr	r3, [r7, #12]
    2a3e:	3b0c      	subs	r3, #12
    2a40:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2a42:	2300      	movs	r3, #0
    2a44:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2a46:	68bb      	ldr	r3, [r7, #8]
    2a48:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2a4a:	88fb      	ldrh	r3, [r7, #6]
    2a4c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2a4e:	f107 0310 	add.w	r3, r7, #16
    2a52:	4619      	mov	r1, r3
    2a54:	69f8      	ldr	r0, [r7, #28]
    2a56:	4b05      	ldr	r3, [pc, #20]	; (2a6c <_spi_m_sync_io_write+0x54>)
    2a58:	4798      	blx	r3
    2a5a:	4603      	mov	r3, r0
}
    2a5c:	4618      	mov	r0, r3
    2a5e:	3720      	adds	r7, #32
    2a60:	46bd      	mov	sp, r7
    2a62:	bd80      	pop	{r7, pc}
    2a64:	0000ed8c 	.word	0x0000ed8c
    2a68:	00003911 	.word	0x00003911
    2a6c:	00002a71 	.word	0x00002a71

00002a70 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2a70:	b580      	push	{r7, lr}
    2a72:	b086      	sub	sp, #24
    2a74:	af00      	add	r7, sp, #0
    2a76:	6078      	str	r0, [r7, #4]
    2a78:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2a7a:	687b      	ldr	r3, [r7, #4]
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	d004      	beq.n	2a8a <spi_m_sync_transfer+0x1a>
    2a80:	683b      	ldr	r3, [r7, #0]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d001      	beq.n	2a8a <spi_m_sync_transfer+0x1a>
    2a86:	2301      	movs	r3, #1
    2a88:	e000      	b.n	2a8c <spi_m_sync_transfer+0x1c>
    2a8a:	2300      	movs	r3, #0
    2a8c:	f003 0301 	and.w	r3, r3, #1
    2a90:	b2db      	uxtb	r3, r3
    2a92:	22b3      	movs	r2, #179	; 0xb3
    2a94:	490c      	ldr	r1, [pc, #48]	; (2ac8 <spi_m_sync_transfer+0x58>)
    2a96:	4618      	mov	r0, r3
    2a98:	4b0c      	ldr	r3, [pc, #48]	; (2acc <spi_m_sync_transfer+0x5c>)
    2a9a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2a9c:	683b      	ldr	r3, [r7, #0]
    2a9e:	681b      	ldr	r3, [r3, #0]
    2aa0:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2aa2:	683b      	ldr	r3, [r7, #0]
    2aa4:	685b      	ldr	r3, [r3, #4]
    2aa6:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2aa8:	683b      	ldr	r3, [r7, #0]
    2aaa:	689b      	ldr	r3, [r3, #8]
    2aac:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	3304      	adds	r3, #4
    2ab2:	f107 020c 	add.w	r2, r7, #12
    2ab6:	4611      	mov	r1, r2
    2ab8:	4618      	mov	r0, r3
    2aba:	4b05      	ldr	r3, [pc, #20]	; (2ad0 <spi_m_sync_transfer+0x60>)
    2abc:	4798      	blx	r3
    2abe:	4603      	mov	r3, r0
}
    2ac0:	4618      	mov	r0, r3
    2ac2:	3718      	adds	r7, #24
    2ac4:	46bd      	mov	sp, r7
    2ac6:	bd80      	pop	{r7, pc}
    2ac8:	0000ed8c 	.word	0x0000ed8c
    2acc:	00003911 	.word	0x00003911
    2ad0:	000073d5 	.word	0x000073d5

00002ad4 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2ad4:	b580      	push	{r7, lr}
    2ad6:	b082      	sub	sp, #8
    2ad8:	af00      	add	r7, sp, #0
    2ada:	6078      	str	r0, [r7, #4]
    2adc:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    2ade:	687b      	ldr	r3, [r7, #4]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d004      	beq.n	2aee <spi_m_sync_get_io_descriptor+0x1a>
    2ae4:	683b      	ldr	r3, [r7, #0]
    2ae6:	2b00      	cmp	r3, #0
    2ae8:	d001      	beq.n	2aee <spi_m_sync_get_io_descriptor+0x1a>
    2aea:	2301      	movs	r3, #1
    2aec:	e000      	b.n	2af0 <spi_m_sync_get_io_descriptor+0x1c>
    2aee:	2300      	movs	r3, #0
    2af0:	f003 0301 	and.w	r3, r3, #1
    2af4:	b2db      	uxtb	r3, r3
    2af6:	22bd      	movs	r2, #189	; 0xbd
    2af8:	4906      	ldr	r1, [pc, #24]	; (2b14 <spi_m_sync_get_io_descriptor+0x40>)
    2afa:	4618      	mov	r0, r3
    2afc:	4b06      	ldr	r3, [pc, #24]	; (2b18 <spi_m_sync_get_io_descriptor+0x44>)
    2afe:	4798      	blx	r3
	*io = &spi->io;
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	f103 020c 	add.w	r2, r3, #12
    2b06:	683b      	ldr	r3, [r7, #0]
    2b08:	601a      	str	r2, [r3, #0]
	return 0;
    2b0a:	2300      	movs	r3, #0
}
    2b0c:	4618      	mov	r0, r3
    2b0e:	3708      	adds	r7, #8
    2b10:	46bd      	mov	sp, r7
    2b12:	bd80      	pop	{r7, pc}
    2b14:	0000ed8c 	.word	0x0000ed8c
    2b18:	00003911 	.word	0x00003911

00002b1c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2b1c:	b480      	push	{r7}
    2b1e:	b083      	sub	sp, #12
    2b20:	af00      	add	r7, sp, #0
    2b22:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2b24:	687b      	ldr	r3, [r7, #4]
    2b26:	681b      	ldr	r3, [r3, #0]
}
    2b28:	4618      	mov	r0, r3
    2b2a:	370c      	adds	r7, #12
    2b2c:	46bd      	mov	sp, r7
    2b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b32:	4770      	bx	lr

00002b34 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2b34:	b480      	push	{r7}
    2b36:	b083      	sub	sp, #12
    2b38:	af00      	add	r7, sp, #0
    2b3a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d002      	beq.n	2b48 <list_get_next_element+0x14>
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	681b      	ldr	r3, [r3, #0]
    2b46:	e000      	b.n	2b4a <list_get_next_element+0x16>
    2b48:	2300      	movs	r3, #0
}
    2b4a:	4618      	mov	r0, r3
    2b4c:	370c      	adds	r7, #12
    2b4e:	46bd      	mov	sp, r7
    2b50:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b54:	4770      	bx	lr
	...

00002b58 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2b58:	b580      	push	{r7, lr}
    2b5a:	b084      	sub	sp, #16
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	60f8      	str	r0, [r7, #12]
    2b60:	60b9      	str	r1, [r7, #8]
    2b62:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2b64:	68fb      	ldr	r3, [r7, #12]
    2b66:	2b00      	cmp	r3, #0
    2b68:	d004      	beq.n	2b74 <timer_init+0x1c>
    2b6a:	68bb      	ldr	r3, [r7, #8]
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d001      	beq.n	2b74 <timer_init+0x1c>
    2b70:	2301      	movs	r3, #1
    2b72:	e000      	b.n	2b76 <timer_init+0x1e>
    2b74:	2300      	movs	r3, #0
    2b76:	f003 0301 	and.w	r3, r3, #1
    2b7a:	b2db      	uxtb	r3, r3
    2b7c:	223b      	movs	r2, #59	; 0x3b
    2b7e:	490a      	ldr	r1, [pc, #40]	; (2ba8 <timer_init+0x50>)
    2b80:	4618      	mov	r0, r3
    2b82:	4b0a      	ldr	r3, [pc, #40]	; (2bac <timer_init+0x54>)
    2b84:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    2b86:	68fb      	ldr	r3, [r7, #12]
    2b88:	68b9      	ldr	r1, [r7, #8]
    2b8a:	4618      	mov	r0, r3
    2b8c:	4b08      	ldr	r3, [pc, #32]	; (2bb0 <timer_init+0x58>)
    2b8e:	4798      	blx	r3
	descr->time                           = 0;
    2b90:	68fb      	ldr	r3, [r7, #12]
    2b92:	2200      	movs	r2, #0
    2b94:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2b96:	68fb      	ldr	r3, [r7, #12]
    2b98:	4a06      	ldr	r2, [pc, #24]	; (2bb4 <timer_init+0x5c>)
    2b9a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2b9c:	2300      	movs	r3, #0
}
    2b9e:	4618      	mov	r0, r3
    2ba0:	3710      	adds	r7, #16
    2ba2:	46bd      	mov	sp, r7
    2ba4:	bd80      	pop	{r7, pc}
    2ba6:	bf00      	nop
    2ba8:	0000eda8 	.word	0x0000eda8
    2bac:	00003911 	.word	0x00003911
    2bb0:	00007acd 	.word	0x00007acd
    2bb4:	00002f01 	.word	0x00002f01

00002bb8 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2bb8:	b580      	push	{r7, lr}
    2bba:	b082      	sub	sp, #8
    2bbc:	af00      	add	r7, sp, #0
    2bbe:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2bc0:	687b      	ldr	r3, [r7, #4]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	bf14      	ite	ne
    2bc6:	2301      	movne	r3, #1
    2bc8:	2300      	moveq	r3, #0
    2bca:	b2db      	uxtb	r3, r3
    2bcc:	2253      	movs	r2, #83	; 0x53
    2bce:	490b      	ldr	r1, [pc, #44]	; (2bfc <timer_start+0x44>)
    2bd0:	4618      	mov	r0, r3
    2bd2:	4b0b      	ldr	r3, [pc, #44]	; (2c00 <timer_start+0x48>)
    2bd4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	4618      	mov	r0, r3
    2bda:	4b0a      	ldr	r3, [pc, #40]	; (2c04 <timer_start+0x4c>)
    2bdc:	4798      	blx	r3
    2bde:	4603      	mov	r3, r0
    2be0:	2b00      	cmp	r3, #0
    2be2:	d002      	beq.n	2bea <timer_start+0x32>
		return ERR_DENIED;
    2be4:	f06f 0310 	mvn.w	r3, #16
    2be8:	e004      	b.n	2bf4 <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	4618      	mov	r0, r3
    2bee:	4b06      	ldr	r3, [pc, #24]	; (2c08 <timer_start+0x50>)
    2bf0:	4798      	blx	r3

	return ERR_NONE;
    2bf2:	2300      	movs	r3, #0
}
    2bf4:	4618      	mov	r0, r3
    2bf6:	3708      	adds	r7, #8
    2bf8:	46bd      	mov	sp, r7
    2bfa:	bd80      	pop	{r7, pc}
    2bfc:	0000eda8 	.word	0x0000eda8
    2c00:	00003911 	.word	0x00003911
    2c04:	00007ff9 	.word	0x00007ff9
    2c08:	00007f99 	.word	0x00007f99

00002c0c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2c0c:	b580      	push	{r7, lr}
    2c0e:	b082      	sub	sp, #8
    2c10:	af00      	add	r7, sp, #0
    2c12:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2c14:	687b      	ldr	r3, [r7, #4]
    2c16:	2b00      	cmp	r3, #0
    2c18:	bf14      	ite	ne
    2c1a:	2301      	movne	r3, #1
    2c1c:	2300      	moveq	r3, #0
    2c1e:	b2db      	uxtb	r3, r3
    2c20:	2261      	movs	r2, #97	; 0x61
    2c22:	490d      	ldr	r1, [pc, #52]	; (2c58 <timer_stop+0x4c>)
    2c24:	4618      	mov	r0, r3
    2c26:	4b0d      	ldr	r3, [pc, #52]	; (2c5c <timer_stop+0x50>)
    2c28:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	4618      	mov	r0, r3
    2c2e:	4b0c      	ldr	r3, [pc, #48]	; (2c60 <timer_stop+0x54>)
    2c30:	4798      	blx	r3
    2c32:	4603      	mov	r3, r0
    2c34:	f083 0301 	eor.w	r3, r3, #1
    2c38:	b2db      	uxtb	r3, r3
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d002      	beq.n	2c44 <timer_stop+0x38>
		return ERR_DENIED;
    2c3e:	f06f 0310 	mvn.w	r3, #16
    2c42:	e004      	b.n	2c4e <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	4618      	mov	r0, r3
    2c48:	4b06      	ldr	r3, [pc, #24]	; (2c64 <timer_stop+0x58>)
    2c4a:	4798      	blx	r3

	return ERR_NONE;
    2c4c:	2300      	movs	r3, #0
}
    2c4e:	4618      	mov	r0, r3
    2c50:	3708      	adds	r7, #8
    2c52:	46bd      	mov	sp, r7
    2c54:	bd80      	pop	{r7, pc}
    2c56:	bf00      	nop
    2c58:	0000eda8 	.word	0x0000eda8
    2c5c:	00003911 	.word	0x00003911
    2c60:	00007ff9 	.word	0x00007ff9
    2c64:	00007fd9 	.word	0x00007fd9

00002c68 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2c68:	b580      	push	{r7, lr}
    2c6a:	b084      	sub	sp, #16
    2c6c:	af00      	add	r7, sp, #0
    2c6e:	6078      	str	r0, [r7, #4]
    2c70:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	2b00      	cmp	r3, #0
    2c76:	d004      	beq.n	2c82 <timer_add_task+0x1a>
    2c78:	683b      	ldr	r3, [r7, #0]
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d001      	beq.n	2c82 <timer_add_task+0x1a>
    2c7e:	2301      	movs	r3, #1
    2c80:	e000      	b.n	2c84 <timer_add_task+0x1c>
    2c82:	2300      	movs	r3, #0
    2c84:	f003 0301 	and.w	r3, r3, #1
    2c88:	b2db      	uxtb	r3, r3
    2c8a:	227a      	movs	r2, #122	; 0x7a
    2c8c:	492d      	ldr	r1, [pc, #180]	; (2d44 <timer_add_task+0xdc>)
    2c8e:	4618      	mov	r0, r3
    2c90:	4b2d      	ldr	r3, [pc, #180]	; (2d48 <timer_add_task+0xe0>)
    2c92:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	7e1b      	ldrb	r3, [r3, #24]
    2c98:	b2db      	uxtb	r3, r3
    2c9a:	f043 0301 	orr.w	r3, r3, #1
    2c9e:	b2da      	uxtb	r2, r3
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    2ca4:	687b      	ldr	r3, [r7, #4]
    2ca6:	3314      	adds	r3, #20
    2ca8:	6839      	ldr	r1, [r7, #0]
    2caa:	4618      	mov	r0, r3
    2cac:	4b27      	ldr	r3, [pc, #156]	; (2d4c <timer_add_task+0xe4>)
    2cae:	4798      	blx	r3
    2cb0:	4603      	mov	r3, r0
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	d00f      	beq.n	2cd6 <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	7e1b      	ldrb	r3, [r3, #24]
    2cba:	b2db      	uxtb	r3, r3
    2cbc:	f023 0301 	bic.w	r3, r3, #1
    2cc0:	b2da      	uxtb	r2, r3
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    2cc6:	227f      	movs	r2, #127	; 0x7f
    2cc8:	491e      	ldr	r1, [pc, #120]	; (2d44 <timer_add_task+0xdc>)
    2cca:	2000      	movs	r0, #0
    2ccc:	4b1e      	ldr	r3, [pc, #120]	; (2d48 <timer_add_task+0xe0>)
    2cce:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2cd0:	f06f 0311 	mvn.w	r3, #17
    2cd4:	e032      	b.n	2d3c <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    2cd6:	687b      	ldr	r3, [r7, #4]
    2cd8:	691a      	ldr	r2, [r3, #16]
    2cda:	683b      	ldr	r3, [r7, #0]
    2cdc:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2cde:	687b      	ldr	r3, [r7, #4]
    2ce0:	f103 0014 	add.w	r0, r3, #20
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	691b      	ldr	r3, [r3, #16]
    2ce8:	461a      	mov	r2, r3
    2cea:	6839      	ldr	r1, [r7, #0]
    2cec:	4b18      	ldr	r3, [pc, #96]	; (2d50 <timer_add_task+0xe8>)
    2cee:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	7e1b      	ldrb	r3, [r3, #24]
    2cf4:	b2db      	uxtb	r3, r3
    2cf6:	f023 0301 	bic.w	r3, r3, #1
    2cfa:	b2da      	uxtb	r2, r3
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2d00:	687b      	ldr	r3, [r7, #4]
    2d02:	7e1b      	ldrb	r3, [r3, #24]
    2d04:	b2db      	uxtb	r3, r3
    2d06:	f003 0302 	and.w	r3, r3, #2
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	d015      	beq.n	2d3a <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    2d0e:	f107 030c 	add.w	r3, r7, #12
    2d12:	4618      	mov	r0, r3
    2d14:	4b0f      	ldr	r3, [pc, #60]	; (2d54 <timer_add_task+0xec>)
    2d16:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2d18:	687b      	ldr	r3, [r7, #4]
    2d1a:	7e1b      	ldrb	r3, [r3, #24]
    2d1c:	b2db      	uxtb	r3, r3
    2d1e:	f023 0302 	bic.w	r3, r3, #2
    2d22:	b2da      	uxtb	r2, r3
    2d24:	687b      	ldr	r3, [r7, #4]
    2d26:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	4618      	mov	r0, r3
    2d2c:	4b0a      	ldr	r3, [pc, #40]	; (2d58 <timer_add_task+0xf0>)
    2d2e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2d30:	f107 030c 	add.w	r3, r7, #12
    2d34:	4618      	mov	r0, r3
    2d36:	4b09      	ldr	r3, [pc, #36]	; (2d5c <timer_add_task+0xf4>)
    2d38:	4798      	blx	r3
	}

	return ERR_NONE;
    2d3a:	2300      	movs	r3, #0
}
    2d3c:	4618      	mov	r0, r3
    2d3e:	3710      	adds	r7, #16
    2d40:	46bd      	mov	sp, r7
    2d42:	bd80      	pop	{r7, pc}
    2d44:	0000eda8 	.word	0x0000eda8
    2d48:	00003911 	.word	0x00003911
    2d4c:	00003939 	.word	0x00003939
    2d50:	00002e51 	.word	0x00002e51
    2d54:	0000b1a5 	.word	0x0000b1a5
    2d58:	00008059 	.word	0x00008059
    2d5c:	0000b1cb 	.word	0x0000b1cb

00002d60 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2d60:	b580      	push	{r7, lr}
    2d62:	b084      	sub	sp, #16
    2d64:	af00      	add	r7, sp, #0
    2d66:	6078      	str	r0, [r7, #4]
    2d68:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    2d6a:	687b      	ldr	r3, [r7, #4]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d004      	beq.n	2d7a <timer_remove_task+0x1a>
    2d70:	683b      	ldr	r3, [r7, #0]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d001      	beq.n	2d7a <timer_remove_task+0x1a>
    2d76:	2301      	movs	r3, #1
    2d78:	e000      	b.n	2d7c <timer_remove_task+0x1c>
    2d7a:	2300      	movs	r3, #0
    2d7c:	f003 0301 	and.w	r3, r3, #1
    2d80:	b2db      	uxtb	r3, r3
    2d82:	2295      	movs	r2, #149	; 0x95
    2d84:	492b      	ldr	r1, [pc, #172]	; (2e34 <timer_remove_task+0xd4>)
    2d86:	4618      	mov	r0, r3
    2d88:	4b2b      	ldr	r3, [pc, #172]	; (2e38 <timer_remove_task+0xd8>)
    2d8a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2d8c:	687b      	ldr	r3, [r7, #4]
    2d8e:	7e1b      	ldrb	r3, [r3, #24]
    2d90:	b2db      	uxtb	r3, r3
    2d92:	f043 0301 	orr.w	r3, r3, #1
    2d96:	b2da      	uxtb	r2, r3
    2d98:	687b      	ldr	r3, [r7, #4]
    2d9a:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	3314      	adds	r3, #20
    2da0:	6839      	ldr	r1, [r7, #0]
    2da2:	4618      	mov	r0, r3
    2da4:	4b25      	ldr	r3, [pc, #148]	; (2e3c <timer_remove_task+0xdc>)
    2da6:	4798      	blx	r3
    2da8:	4603      	mov	r3, r0
    2daa:	f083 0301 	eor.w	r3, r3, #1
    2dae:	b2db      	uxtb	r3, r3
    2db0:	2b00      	cmp	r3, #0
    2db2:	d00f      	beq.n	2dd4 <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	7e1b      	ldrb	r3, [r3, #24]
    2db8:	b2db      	uxtb	r3, r3
    2dba:	f023 0301 	bic.w	r3, r3, #1
    2dbe:	b2da      	uxtb	r2, r3
    2dc0:	687b      	ldr	r3, [r7, #4]
    2dc2:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    2dc4:	229a      	movs	r2, #154	; 0x9a
    2dc6:	491b      	ldr	r1, [pc, #108]	; (2e34 <timer_remove_task+0xd4>)
    2dc8:	2000      	movs	r0, #0
    2dca:	4b1b      	ldr	r3, [pc, #108]	; (2e38 <timer_remove_task+0xd8>)
    2dcc:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2dce:	f06f 0309 	mvn.w	r3, #9
    2dd2:	e02b      	b.n	2e2c <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	3314      	adds	r3, #20
    2dd8:	6839      	ldr	r1, [r7, #0]
    2dda:	4618      	mov	r0, r3
    2ddc:	4b18      	ldr	r3, [pc, #96]	; (2e40 <timer_remove_task+0xe0>)
    2dde:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2de0:	687b      	ldr	r3, [r7, #4]
    2de2:	7e1b      	ldrb	r3, [r3, #24]
    2de4:	b2db      	uxtb	r3, r3
    2de6:	f023 0301 	bic.w	r3, r3, #1
    2dea:	b2da      	uxtb	r2, r3
    2dec:	687b      	ldr	r3, [r7, #4]
    2dee:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	7e1b      	ldrb	r3, [r3, #24]
    2df4:	b2db      	uxtb	r3, r3
    2df6:	f003 0302 	and.w	r3, r3, #2
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d015      	beq.n	2e2a <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    2dfe:	f107 030c 	add.w	r3, r7, #12
    2e02:	4618      	mov	r0, r3
    2e04:	4b0f      	ldr	r3, [pc, #60]	; (2e44 <timer_remove_task+0xe4>)
    2e06:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2e08:	687b      	ldr	r3, [r7, #4]
    2e0a:	7e1b      	ldrb	r3, [r3, #24]
    2e0c:	b2db      	uxtb	r3, r3
    2e0e:	f023 0302 	bic.w	r3, r3, #2
    2e12:	b2da      	uxtb	r2, r3
    2e14:	687b      	ldr	r3, [r7, #4]
    2e16:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	4618      	mov	r0, r3
    2e1c:	4b0a      	ldr	r3, [pc, #40]	; (2e48 <timer_remove_task+0xe8>)
    2e1e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2e20:	f107 030c 	add.w	r3, r7, #12
    2e24:	4618      	mov	r0, r3
    2e26:	4b09      	ldr	r3, [pc, #36]	; (2e4c <timer_remove_task+0xec>)
    2e28:	4798      	blx	r3
	}

	return ERR_NONE;
    2e2a:	2300      	movs	r3, #0
}
    2e2c:	4618      	mov	r0, r3
    2e2e:	3710      	adds	r7, #16
    2e30:	46bd      	mov	sp, r7
    2e32:	bd80      	pop	{r7, pc}
    2e34:	0000eda8 	.word	0x0000eda8
    2e38:	00003911 	.word	0x00003911
    2e3c:	00003939 	.word	0x00003939
    2e40:	00003a9b 	.word	0x00003a9b
    2e44:	0000b1a5 	.word	0x0000b1a5
    2e48:	00008059 	.word	0x00008059
    2e4c:	0000b1cb 	.word	0x0000b1cb

00002e50 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2e50:	b580      	push	{r7, lr}
    2e52:	b088      	sub	sp, #32
    2e54:	af00      	add	r7, sp, #0
    2e56:	60f8      	str	r0, [r7, #12]
    2e58:	60b9      	str	r1, [r7, #8]
    2e5a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2e5c:	2300      	movs	r3, #0
    2e5e:	61bb      	str	r3, [r7, #24]
    2e60:	68f8      	ldr	r0, [r7, #12]
    2e62:	4b23      	ldr	r3, [pc, #140]	; (2ef0 <timer_add_timer_task+0xa0>)
    2e64:	4798      	blx	r3
    2e66:	6138      	str	r0, [r7, #16]

	if (!head) {
    2e68:	693b      	ldr	r3, [r7, #16]
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	d104      	bne.n	2e78 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2e6e:	68b9      	ldr	r1, [r7, #8]
    2e70:	68f8      	ldr	r0, [r7, #12]
    2e72:	4b20      	ldr	r3, [pc, #128]	; (2ef4 <timer_add_timer_task+0xa4>)
    2e74:	4798      	blx	r3
		return;
    2e76:	e037      	b.n	2ee8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2e78:	693b      	ldr	r3, [r7, #16]
    2e7a:	61fb      	str	r3, [r7, #28]
    2e7c:	e022      	b.n	2ec4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2e7e:	69fb      	ldr	r3, [r7, #28]
    2e80:	685a      	ldr	r2, [r3, #4]
    2e82:	687b      	ldr	r3, [r7, #4]
    2e84:	429a      	cmp	r2, r3
    2e86:	d808      	bhi.n	2e9a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2e88:	69fb      	ldr	r3, [r7, #28]
    2e8a:	689a      	ldr	r2, [r3, #8]
    2e8c:	69fb      	ldr	r3, [r7, #28]
    2e8e:	6859      	ldr	r1, [r3, #4]
    2e90:	687b      	ldr	r3, [r7, #4]
    2e92:	1acb      	subs	r3, r1, r3
    2e94:	4413      	add	r3, r2
    2e96:	617b      	str	r3, [r7, #20]
    2e98:	e009      	b.n	2eae <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2e9a:	69fb      	ldr	r3, [r7, #28]
    2e9c:	689a      	ldr	r2, [r3, #8]
    2e9e:	69fb      	ldr	r3, [r7, #28]
    2ea0:	685b      	ldr	r3, [r3, #4]
    2ea2:	441a      	add	r2, r3
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	425b      	negs	r3, r3
    2ea8:	4413      	add	r3, r2
    2eaa:	3301      	adds	r3, #1
    2eac:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2eae:	68bb      	ldr	r3, [r7, #8]
    2eb0:	689a      	ldr	r2, [r3, #8]
    2eb2:	697b      	ldr	r3, [r7, #20]
    2eb4:	429a      	cmp	r2, r3
    2eb6:	d909      	bls.n	2ecc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2eb8:	69fb      	ldr	r3, [r7, #28]
    2eba:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2ebc:	69f8      	ldr	r0, [r7, #28]
    2ebe:	4b0e      	ldr	r3, [pc, #56]	; (2ef8 <timer_add_timer_task+0xa8>)
    2ec0:	4798      	blx	r3
    2ec2:	61f8      	str	r0, [r7, #28]
    2ec4:	69fb      	ldr	r3, [r7, #28]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d1d9      	bne.n	2e7e <timer_add_timer_task+0x2e>
    2eca:	e000      	b.n	2ece <timer_add_timer_task+0x7e>
			break;
    2ecc:	bf00      	nop
	}

	if (it == head) {
    2ece:	69fa      	ldr	r2, [r7, #28]
    2ed0:	693b      	ldr	r3, [r7, #16]
    2ed2:	429a      	cmp	r2, r3
    2ed4:	d104      	bne.n	2ee0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2ed6:	68b9      	ldr	r1, [r7, #8]
    2ed8:	68f8      	ldr	r0, [r7, #12]
    2eda:	4b06      	ldr	r3, [pc, #24]	; (2ef4 <timer_add_timer_task+0xa4>)
    2edc:	4798      	blx	r3
    2ede:	e003      	b.n	2ee8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2ee0:	68b9      	ldr	r1, [r7, #8]
    2ee2:	69b8      	ldr	r0, [r7, #24]
    2ee4:	4b05      	ldr	r3, [pc, #20]	; (2efc <timer_add_timer_task+0xac>)
    2ee6:	4798      	blx	r3
	}
}
    2ee8:	3720      	adds	r7, #32
    2eea:	46bd      	mov	sp, r7
    2eec:	bd80      	pop	{r7, pc}
    2eee:	bf00      	nop
    2ef0:	00002b1d 	.word	0x00002b1d
    2ef4:	00003971 	.word	0x00003971
    2ef8:	00002b35 	.word	0x00002b35
    2efc:	000039c9 	.word	0x000039c9

00002f00 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2f00:	b580      	push	{r7, lr}
    2f02:	b086      	sub	sp, #24
    2f04:	af00      	add	r7, sp, #0
    2f06:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2f0c:	693b      	ldr	r3, [r7, #16]
    2f0e:	3314      	adds	r3, #20
    2f10:	4618      	mov	r0, r3
    2f12:	4b27      	ldr	r3, [pc, #156]	; (2fb0 <timer_process_counted+0xb0>)
    2f14:	4798      	blx	r3
    2f16:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2f18:	693b      	ldr	r3, [r7, #16]
    2f1a:	691b      	ldr	r3, [r3, #16]
    2f1c:	1c5a      	adds	r2, r3, #1
    2f1e:	693b      	ldr	r3, [r7, #16]
    2f20:	611a      	str	r2, [r3, #16]
    2f22:	693b      	ldr	r3, [r7, #16]
    2f24:	691b      	ldr	r3, [r3, #16]
    2f26:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2f28:	693b      	ldr	r3, [r7, #16]
    2f2a:	7e1b      	ldrb	r3, [r3, #24]
    2f2c:	b2db      	uxtb	r3, r3
    2f2e:	f003 0301 	and.w	r3, r3, #1
    2f32:	2b00      	cmp	r3, #0
    2f34:	d106      	bne.n	2f44 <timer_process_counted+0x44>
    2f36:	693b      	ldr	r3, [r7, #16]
    2f38:	7e1b      	ldrb	r3, [r3, #24]
    2f3a:	b2db      	uxtb	r3, r3
    2f3c:	f003 0302 	and.w	r3, r3, #2
    2f40:	2b00      	cmp	r3, #0
    2f42:	d027      	beq.n	2f94 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2f44:	693b      	ldr	r3, [r7, #16]
    2f46:	7e1b      	ldrb	r3, [r3, #24]
    2f48:	b2db      	uxtb	r3, r3
    2f4a:	f043 0302 	orr.w	r3, r3, #2
    2f4e:	b2da      	uxtb	r2, r3
    2f50:	693b      	ldr	r3, [r7, #16]
    2f52:	761a      	strb	r2, [r3, #24]
		return;
    2f54:	e029      	b.n	2faa <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2f56:	697b      	ldr	r3, [r7, #20]
    2f58:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2f5a:	693b      	ldr	r3, [r7, #16]
    2f5c:	3314      	adds	r3, #20
    2f5e:	4618      	mov	r0, r3
    2f60:	4b14      	ldr	r3, [pc, #80]	; (2fb4 <timer_process_counted+0xb4>)
    2f62:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2f64:	68bb      	ldr	r3, [r7, #8]
    2f66:	7c1b      	ldrb	r3, [r3, #16]
    2f68:	2b01      	cmp	r3, #1
    2f6a:	d109      	bne.n	2f80 <timer_process_counted+0x80>
			tmp->time_label = time;
    2f6c:	68bb      	ldr	r3, [r7, #8]
    2f6e:	68fa      	ldr	r2, [r7, #12]
    2f70:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2f72:	693b      	ldr	r3, [r7, #16]
    2f74:	3314      	adds	r3, #20
    2f76:	68fa      	ldr	r2, [r7, #12]
    2f78:	68b9      	ldr	r1, [r7, #8]
    2f7a:	4618      	mov	r0, r3
    2f7c:	4b0e      	ldr	r3, [pc, #56]	; (2fb8 <timer_process_counted+0xb8>)
    2f7e:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2f80:	693b      	ldr	r3, [r7, #16]
    2f82:	3314      	adds	r3, #20
    2f84:	4618      	mov	r0, r3
    2f86:	4b0a      	ldr	r3, [pc, #40]	; (2fb0 <timer_process_counted+0xb0>)
    2f88:	4798      	blx	r3
    2f8a:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2f8c:	68bb      	ldr	r3, [r7, #8]
    2f8e:	68db      	ldr	r3, [r3, #12]
    2f90:	68b8      	ldr	r0, [r7, #8]
    2f92:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2f94:	697b      	ldr	r3, [r7, #20]
    2f96:	2b00      	cmp	r3, #0
    2f98:	d007      	beq.n	2faa <timer_process_counted+0xaa>
    2f9a:	697b      	ldr	r3, [r7, #20]
    2f9c:	685b      	ldr	r3, [r3, #4]
    2f9e:	68fa      	ldr	r2, [r7, #12]
    2fa0:	1ad2      	subs	r2, r2, r3
    2fa2:	697b      	ldr	r3, [r7, #20]
    2fa4:	689b      	ldr	r3, [r3, #8]
    2fa6:	429a      	cmp	r2, r3
    2fa8:	d2d5      	bcs.n	2f56 <timer_process_counted+0x56>
	}
}
    2faa:	3718      	adds	r7, #24
    2fac:	46bd      	mov	sp, r7
    2fae:	bd80      	pop	{r7, pc}
    2fb0:	00002b1d 	.word	0x00002b1d
    2fb4:	00003a69 	.word	0x00003a69
    2fb8:	00002e51 	.word	0x00002e51

00002fbc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2fbc:	b480      	push	{r7}
    2fbe:	b085      	sub	sp, #20
    2fc0:	af00      	add	r7, sp, #0
    2fc2:	4603      	mov	r3, r0
    2fc4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2fc6:	2300      	movs	r3, #0
    2fc8:	73fb      	strb	r3, [r7, #15]
    2fca:	e029      	b.n	3020 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fd0:	4a19      	ldr	r2, [pc, #100]	; (3038 <_usb_d_find_ep+0x7c>)
    2fd2:	015b      	lsls	r3, r3, #5
    2fd4:	4413      	add	r3, r2
    2fd6:	3301      	adds	r3, #1
    2fd8:	781b      	ldrb	r3, [r3, #0]
    2fda:	79fa      	ldrb	r2, [r7, #7]
    2fdc:	429a      	cmp	r2, r3
    2fde:	d102      	bne.n	2fe6 <_usb_d_find_ep+0x2a>
			return i;
    2fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fe4:	e022      	b.n	302c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fea:	4a13      	ldr	r2, [pc, #76]	; (3038 <_usb_d_find_ep+0x7c>)
    2fec:	015b      	lsls	r3, r3, #5
    2fee:	4413      	add	r3, r2
    2ff0:	781b      	ldrb	r3, [r3, #0]
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d10e      	bne.n	3014 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2ff6:	79fb      	ldrb	r3, [r7, #7]
    2ff8:	f003 030f 	and.w	r3, r3, #15
    2ffc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3000:	490d      	ldr	r1, [pc, #52]	; (3038 <_usb_d_find_ep+0x7c>)
    3002:	0152      	lsls	r2, r2, #5
    3004:	440a      	add	r2, r1
    3006:	3201      	adds	r2, #1
    3008:	7812      	ldrb	r2, [r2, #0]
    300a:	4293      	cmp	r3, r2
    300c:	d102      	bne.n	3014 <_usb_d_find_ep+0x58>
			return i;
    300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3012:	e00b      	b.n	302c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3014:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3018:	b2db      	uxtb	r3, r3
    301a:	3301      	adds	r3, #1
    301c:	b2db      	uxtb	r3, r3
    301e:	73fb      	strb	r3, [r7, #15]
    3020:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3024:	2b03      	cmp	r3, #3
    3026:	ddd1      	ble.n	2fcc <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3028:	f04f 33ff 	mov.w	r3, #4294967295
}
    302c:	4618      	mov	r0, r3
    302e:	3714      	adds	r7, #20
    3030:	46bd      	mov	sp, r7
    3032:	f85d 7b04 	ldr.w	r7, [sp], #4
    3036:	4770      	bx	lr
    3038:	200005b0 	.word	0x200005b0

0000303c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    303c:	b580      	push	{r7, lr}
    303e:	b088      	sub	sp, #32
    3040:	af00      	add	r7, sp, #0
    3042:	60ba      	str	r2, [r7, #8]
    3044:	607b      	str	r3, [r7, #4]
    3046:	4603      	mov	r3, r0
    3048:	73fb      	strb	r3, [r7, #15]
    304a:	460b      	mov	r3, r1
    304c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    304e:	68bb      	ldr	r3, [r7, #8]
    3050:	617b      	str	r3, [r7, #20]
    3052:	687b      	ldr	r3, [r7, #4]
    3054:	61bb      	str	r3, [r7, #24]
    3056:	7bbb      	ldrb	r3, [r7, #14]
    3058:	2b00      	cmp	r3, #0
    305a:	d004      	beq.n	3066 <_usb_d_trans+0x2a>
    305c:	7bfb      	ldrb	r3, [r7, #15]
    305e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3062:	b2db      	uxtb	r3, r3
    3064:	e003      	b.n	306e <_usb_d_trans+0x32>
    3066:	7bfb      	ldrb	r3, [r7, #15]
    3068:	f003 030f 	and.w	r3, r3, #15
    306c:	b2db      	uxtb	r3, r3
    306e:	773b      	strb	r3, [r7, #28]
    3070:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3074:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3076:	f107 0314 	add.w	r3, r7, #20
    307a:	4618      	mov	r0, r3
    307c:	4b03      	ldr	r3, [pc, #12]	; (308c <_usb_d_trans+0x50>)
    307e:	4798      	blx	r3
    3080:	4603      	mov	r3, r0
}
    3082:	4618      	mov	r0, r3
    3084:	3720      	adds	r7, #32
    3086:	46bd      	mov	sp, r7
    3088:	bd80      	pop	{r7, pc}
    308a:	bf00      	nop
    308c:	0000a7d9 	.word	0x0000a7d9

00003090 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3090:	b480      	push	{r7}
    3092:	b085      	sub	sp, #20
    3094:	af00      	add	r7, sp, #0
    3096:	60f8      	str	r0, [r7, #12]
    3098:	60b9      	str	r1, [r7, #8]
    309a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    309c:	2300      	movs	r3, #0
}
    309e:	4618      	mov	r0, r3
    30a0:	3714      	adds	r7, #20
    30a2:	46bd      	mov	sp, r7
    30a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    30a8:	4770      	bx	lr
	...

000030ac <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    30ac:	b580      	push	{r7, lr}
    30ae:	b086      	sub	sp, #24
    30b0:	af00      	add	r7, sp, #0
    30b2:	4603      	mov	r3, r0
    30b4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    30b6:	79fb      	ldrb	r3, [r7, #7]
    30b8:	4618      	mov	r0, r3
    30ba:	4b2a      	ldr	r3, [pc, #168]	; (3164 <usb_d_cb_trans_setup+0xb8>)
    30bc:	4798      	blx	r3
    30be:	4603      	mov	r3, r0
    30c0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    30c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30c6:	015b      	lsls	r3, r3, #5
    30c8:	4a27      	ldr	r2, [pc, #156]	; (3168 <usb_d_cb_trans_setup+0xbc>)
    30ca:	4413      	add	r3, r2
    30cc:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    30ce:	693b      	ldr	r3, [r7, #16]
    30d0:	330c      	adds	r3, #12
    30d2:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    30d4:	79fb      	ldrb	r3, [r7, #7]
    30d6:	68f9      	ldr	r1, [r7, #12]
    30d8:	4618      	mov	r0, r3
    30da:	4b24      	ldr	r3, [pc, #144]	; (316c <usb_d_cb_trans_setup+0xc0>)
    30dc:	4798      	blx	r3
    30de:	4603      	mov	r3, r0
    30e0:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    30e2:	7afb      	ldrb	r3, [r7, #11]
    30e4:	2b08      	cmp	r3, #8
    30e6:	d00d      	beq.n	3104 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    30e8:	79fb      	ldrb	r3, [r7, #7]
    30ea:	2101      	movs	r1, #1
    30ec:	4618      	mov	r0, r3
    30ee:	4b20      	ldr	r3, [pc, #128]	; (3170 <usb_d_cb_trans_setup+0xc4>)
    30f0:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    30f2:	79fb      	ldrb	r3, [r7, #7]
    30f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    30f8:	b2db      	uxtb	r3, r3
    30fa:	2101      	movs	r1, #1
    30fc:	4618      	mov	r0, r3
    30fe:	4b1c      	ldr	r3, [pc, #112]	; (3170 <usb_d_cb_trans_setup+0xc4>)
    3100:	4798      	blx	r3
		return;
    3102:	e02b      	b.n	315c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3104:	79fb      	ldrb	r3, [r7, #7]
    3106:	2100      	movs	r1, #0
    3108:	4618      	mov	r0, r3
    310a:	4b19      	ldr	r3, [pc, #100]	; (3170 <usb_d_cb_trans_setup+0xc4>)
    310c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    310e:	79fb      	ldrb	r3, [r7, #7]
    3110:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3114:	b2db      	uxtb	r3, r3
    3116:	2100      	movs	r1, #0
    3118:	4618      	mov	r0, r3
    311a:	4b15      	ldr	r3, [pc, #84]	; (3170 <usb_d_cb_trans_setup+0xc4>)
    311c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    311e:	693b      	ldr	r3, [r7, #16]
    3120:	2201      	movs	r2, #1
    3122:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3124:	693b      	ldr	r3, [r7, #16]
    3126:	695b      	ldr	r3, [r3, #20]
    3128:	79fa      	ldrb	r2, [r7, #7]
    312a:	68f9      	ldr	r1, [r7, #12]
    312c:	4610      	mov	r0, r2
    312e:	4798      	blx	r3
    3130:	4603      	mov	r3, r0
    3132:	f083 0301 	eor.w	r3, r3, #1
    3136:	b2db      	uxtb	r3, r3
    3138:	2b00      	cmp	r3, #0
    313a:	d00f      	beq.n	315c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    313c:	693b      	ldr	r3, [r7, #16]
    313e:	2205      	movs	r2, #5
    3140:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3142:	79fb      	ldrb	r3, [r7, #7]
    3144:	2101      	movs	r1, #1
    3146:	4618      	mov	r0, r3
    3148:	4b09      	ldr	r3, [pc, #36]	; (3170 <usb_d_cb_trans_setup+0xc4>)
    314a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    314c:	79fb      	ldrb	r3, [r7, #7]
    314e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3152:	b2db      	uxtb	r3, r3
    3154:	2101      	movs	r1, #1
    3156:	4618      	mov	r0, r3
    3158:	4b05      	ldr	r3, [pc, #20]	; (3170 <usb_d_cb_trans_setup+0xc4>)
    315a:	4798      	blx	r3
	}
}
    315c:	3718      	adds	r7, #24
    315e:	46bd      	mov	sp, r7
    3160:	bd80      	pop	{r7, pc}
    3162:	bf00      	nop
    3164:	00002fbd 	.word	0x00002fbd
    3168:	200005b0 	.word	0x200005b0
    316c:	0000a731 	.word	0x0000a731
    3170:	0000a5a9 	.word	0x0000a5a9

00003174 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3174:	b580      	push	{r7, lr}
    3176:	b084      	sub	sp, #16
    3178:	af00      	add	r7, sp, #0
    317a:	4603      	mov	r3, r0
    317c:	6039      	str	r1, [r7, #0]
    317e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3180:	79fb      	ldrb	r3, [r7, #7]
    3182:	4618      	mov	r0, r3
    3184:	4b0d      	ldr	r3, [pc, #52]	; (31bc <usb_d_cb_trans_more+0x48>)
    3186:	4798      	blx	r3
    3188:	4603      	mov	r3, r0
    318a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    318c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3190:	015b      	lsls	r3, r3, #5
    3192:	4a0b      	ldr	r2, [pc, #44]	; (31c0 <usb_d_cb_trans_more+0x4c>)
    3194:	4413      	add	r3, r2
    3196:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3198:	68bb      	ldr	r3, [r7, #8]
    319a:	789b      	ldrb	r3, [r3, #2]
    319c:	2b03      	cmp	r3, #3
    319e:	d107      	bne.n	31b0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    31a0:	68bb      	ldr	r3, [r7, #8]
    31a2:	699b      	ldr	r3, [r3, #24]
    31a4:	79fa      	ldrb	r2, [r7, #7]
    31a6:	6839      	ldr	r1, [r7, #0]
    31a8:	4610      	mov	r0, r2
    31aa:	4798      	blx	r3
    31ac:	4603      	mov	r3, r0
    31ae:	e000      	b.n	31b2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    31b0:	2300      	movs	r3, #0
}
    31b2:	4618      	mov	r0, r3
    31b4:	3710      	adds	r7, #16
    31b6:	46bd      	mov	sp, r7
    31b8:	bd80      	pop	{r7, pc}
    31ba:	bf00      	nop
    31bc:	00002fbd 	.word	0x00002fbd
    31c0:	200005b0 	.word	0x200005b0

000031c4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    31c4:	b590      	push	{r4, r7, lr}
    31c6:	b087      	sub	sp, #28
    31c8:	af02      	add	r7, sp, #8
    31ca:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	789b      	ldrb	r3, [r3, #2]
    31d0:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	7b1b      	ldrb	r3, [r3, #12]
    31d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    31da:	2b00      	cmp	r3, #0
    31dc:	bf14      	ite	ne
    31de:	2301      	movne	r3, #1
    31e0:	2300      	moveq	r3, #0
    31e2:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    31e4:	7bfb      	ldrb	r3, [r7, #15]
    31e6:	2b03      	cmp	r3, #3
    31e8:	d13a      	bne.n	3260 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    31ea:	687b      	ldr	r3, [r7, #4]
    31ec:	69db      	ldr	r3, [r3, #28]
    31ee:	687a      	ldr	r2, [r7, #4]
    31f0:	7850      	ldrb	r0, [r2, #1]
    31f2:	687a      	ldr	r2, [r7, #4]
    31f4:	320c      	adds	r2, #12
    31f6:	2101      	movs	r1, #1
    31f8:	4798      	blx	r3
    31fa:	4603      	mov	r3, r0
    31fc:	737b      	strb	r3, [r7, #13]
		if (err) {
    31fe:	7b7b      	ldrb	r3, [r7, #13]
    3200:	2b00      	cmp	r3, #0
    3202:	d015      	beq.n	3230 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	2205      	movs	r2, #5
    3208:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	2202      	movs	r2, #2
    320e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3210:	7bbb      	ldrb	r3, [r7, #14]
    3212:	2b00      	cmp	r3, #0
    3214:	d002      	beq.n	321c <usb_d_ctrl_trans_done+0x58>
    3216:	687b      	ldr	r3, [r7, #4]
    3218:	785b      	ldrb	r3, [r3, #1]
    321a:	e004      	b.n	3226 <usb_d_ctrl_trans_done+0x62>
    321c:	687b      	ldr	r3, [r7, #4]
    321e:	785b      	ldrb	r3, [r3, #1]
    3220:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3224:	b2db      	uxtb	r3, r3
    3226:	2101      	movs	r1, #1
    3228:	4618      	mov	r0, r3
    322a:	4b15      	ldr	r3, [pc, #84]	; (3280 <usb_d_ctrl_trans_done+0xbc>)
    322c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    322e:	e022      	b.n	3276 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3230:	687b      	ldr	r3, [r7, #4]
    3232:	2204      	movs	r2, #4
    3234:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3236:	687b      	ldr	r3, [r7, #4]
    3238:	7858      	ldrb	r0, [r3, #1]
    323a:	7bbb      	ldrb	r3, [r7, #14]
    323c:	2b00      	cmp	r3, #0
    323e:	bf14      	ite	ne
    3240:	2301      	movne	r3, #1
    3242:	2300      	moveq	r3, #0
    3244:	b2db      	uxtb	r3, r3
    3246:	f083 0301 	eor.w	r3, r3, #1
    324a:	b2db      	uxtb	r3, r3
    324c:	f003 0301 	and.w	r3, r3, #1
    3250:	b2d9      	uxtb	r1, r3
    3252:	2301      	movs	r3, #1
    3254:	9300      	str	r3, [sp, #0]
    3256:	2300      	movs	r3, #0
    3258:	2200      	movs	r2, #0
    325a:	4c0a      	ldr	r4, [pc, #40]	; (3284 <usb_d_ctrl_trans_done+0xc0>)
    325c:	47a0      	blx	r4
}
    325e:	e00a      	b.n	3276 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	69db      	ldr	r3, [r3, #28]
    3264:	687a      	ldr	r2, [r7, #4]
    3266:	7850      	ldrb	r0, [r2, #1]
    3268:	687a      	ldr	r2, [r7, #4]
    326a:	320c      	adds	r2, #12
    326c:	2100      	movs	r1, #0
    326e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3270:	687b      	ldr	r3, [r7, #4]
    3272:	2202      	movs	r2, #2
    3274:	709a      	strb	r2, [r3, #2]
}
    3276:	bf00      	nop
    3278:	3714      	adds	r7, #20
    327a:	46bd      	mov	sp, r7
    327c:	bd90      	pop	{r4, r7, pc}
    327e:	bf00      	nop
    3280:	0000a5a9 	.word	0x0000a5a9
    3284:	0000303d 	.word	0x0000303d

00003288 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3288:	b580      	push	{r7, lr}
    328a:	b086      	sub	sp, #24
    328c:	af00      	add	r7, sp, #0
    328e:	4603      	mov	r3, r0
    3290:	60b9      	str	r1, [r7, #8]
    3292:	607a      	str	r2, [r7, #4]
    3294:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3296:	7bfb      	ldrb	r3, [r7, #15]
    3298:	4618      	mov	r0, r3
    329a:	4b2f      	ldr	r3, [pc, #188]	; (3358 <_usb_d_cb_trans_done+0xd0>)
    329c:	4798      	blx	r3
    329e:	4603      	mov	r3, r0
    32a0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    32a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    32a6:	015b      	lsls	r3, r3, #5
    32a8:	4a2c      	ldr	r2, [pc, #176]	; (335c <_usb_d_cb_trans_done+0xd4>)
    32aa:	4413      	add	r3, r2
    32ac:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    32ae:	68bb      	ldr	r3, [r7, #8]
    32b0:	2b00      	cmp	r3, #0
    32b2:	d10e      	bne.n	32d2 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    32b4:	693b      	ldr	r3, [r7, #16]
    32b6:	2200      	movs	r2, #0
    32b8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    32ba:	693b      	ldr	r3, [r7, #16]
    32bc:	781b      	ldrb	r3, [r3, #0]
    32be:	2b00      	cmp	r3, #0
    32c0:	d103      	bne.n	32ca <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    32c2:	6938      	ldr	r0, [r7, #16]
    32c4:	4b26      	ldr	r3, [pc, #152]	; (3360 <_usb_d_cb_trans_done+0xd8>)
    32c6:	4798      	blx	r3
			return;
    32c8:	e043      	b.n	3352 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    32ca:	693b      	ldr	r3, [r7, #16]
    32cc:	2201      	movs	r2, #1
    32ce:	709a      	strb	r2, [r3, #2]
    32d0:	e038      	b.n	3344 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    32d2:	68bb      	ldr	r3, [r7, #8]
    32d4:	2b01      	cmp	r3, #1
    32d6:	d113      	bne.n	3300 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    32d8:	693b      	ldr	r3, [r7, #16]
    32da:	2202      	movs	r2, #2
    32dc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    32de:	693b      	ldr	r3, [r7, #16]
    32e0:	781b      	ldrb	r3, [r3, #0]
    32e2:	2b00      	cmp	r3, #0
    32e4:	d108      	bne.n	32f8 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    32e6:	693b      	ldr	r3, [r7, #16]
    32e8:	2202      	movs	r2, #2
    32ea:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    32ec:	7bfb      	ldrb	r3, [r7, #15]
    32ee:	2100      	movs	r1, #0
    32f0:	4618      	mov	r0, r3
    32f2:	4b1c      	ldr	r3, [pc, #112]	; (3364 <_usb_d_cb_trans_done+0xdc>)
    32f4:	4798      	blx	r3
    32f6:	e025      	b.n	3344 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    32f8:	693b      	ldr	r3, [r7, #16]
    32fa:	2205      	movs	r2, #5
    32fc:	709a      	strb	r2, [r3, #2]
    32fe:	e021      	b.n	3344 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3300:	68bb      	ldr	r3, [r7, #8]
    3302:	2b02      	cmp	r3, #2
    3304:	d10e      	bne.n	3324 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3306:	693b      	ldr	r3, [r7, #16]
    3308:	2204      	movs	r2, #4
    330a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    330c:	693b      	ldr	r3, [r7, #16]
    330e:	781b      	ldrb	r3, [r3, #0]
    3310:	2b00      	cmp	r3, #0
    3312:	d103      	bne.n	331c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3314:	693b      	ldr	r3, [r7, #16]
    3316:	2202      	movs	r2, #2
    3318:	709a      	strb	r2, [r3, #2]
			return;
    331a:	e01a      	b.n	3352 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    331c:	693b      	ldr	r3, [r7, #16]
    331e:	2201      	movs	r2, #1
    3320:	709a      	strb	r2, [r3, #2]
    3322:	e00f      	b.n	3344 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3324:	68bb      	ldr	r3, [r7, #8]
    3326:	2b03      	cmp	r3, #3
    3328:	d106      	bne.n	3338 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    332a:	693b      	ldr	r3, [r7, #16]
    332c:	2200      	movs	r2, #0
    332e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3330:	693b      	ldr	r3, [r7, #16]
    3332:	2205      	movs	r2, #5
    3334:	70da      	strb	r2, [r3, #3]
    3336:	e005      	b.n	3344 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3338:	693b      	ldr	r3, [r7, #16]
    333a:	2206      	movs	r2, #6
    333c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    333e:	693b      	ldr	r3, [r7, #16]
    3340:	2206      	movs	r2, #6
    3342:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3344:	693b      	ldr	r3, [r7, #16]
    3346:	69db      	ldr	r3, [r3, #28]
    3348:	693a      	ldr	r2, [r7, #16]
    334a:	78d1      	ldrb	r1, [r2, #3]
    334c:	687a      	ldr	r2, [r7, #4]
    334e:	7bf8      	ldrb	r0, [r7, #15]
    3350:	4798      	blx	r3
}
    3352:	3718      	adds	r7, #24
    3354:	46bd      	mov	sp, r7
    3356:	bd80      	pop	{r7, pc}
    3358:	00002fbd 	.word	0x00002fbd
    335c:	200005b0 	.word	0x200005b0
    3360:	000031c5 	.word	0x000031c5
    3364:	0000a5a9 	.word	0x0000a5a9

00003368 <usb_d_init>:

int32_t usb_d_init(void)
{
    3368:	b580      	push	{r7, lr}
    336a:	b082      	sub	sp, #8
    336c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    336e:	4b21      	ldr	r3, [pc, #132]	; (33f4 <usb_d_init+0x8c>)
    3370:	4798      	blx	r3
    3372:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3374:	683b      	ldr	r3, [r7, #0]
    3376:	2b00      	cmp	r3, #0
    3378:	da01      	bge.n	337e <usb_d_init+0x16>
		return rc;
    337a:	683b      	ldr	r3, [r7, #0]
    337c:	e036      	b.n	33ec <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    337e:	2280      	movs	r2, #128	; 0x80
    3380:	2100      	movs	r1, #0
    3382:	481d      	ldr	r0, [pc, #116]	; (33f8 <usb_d_init+0x90>)
    3384:	4b1d      	ldr	r3, [pc, #116]	; (33fc <usb_d_init+0x94>)
    3386:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3388:	2300      	movs	r3, #0
    338a:	71fb      	strb	r3, [r7, #7]
    338c:	e01e      	b.n	33cc <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    338e:	79fb      	ldrb	r3, [r7, #7]
    3390:	4a19      	ldr	r2, [pc, #100]	; (33f8 <usb_d_init+0x90>)
    3392:	015b      	lsls	r3, r3, #5
    3394:	4413      	add	r3, r2
    3396:	3301      	adds	r3, #1
    3398:	22ff      	movs	r2, #255	; 0xff
    339a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    339c:	79fb      	ldrb	r3, [r7, #7]
    339e:	4a16      	ldr	r2, [pc, #88]	; (33f8 <usb_d_init+0x90>)
    33a0:	015b      	lsls	r3, r3, #5
    33a2:	4413      	add	r3, r2
    33a4:	3314      	adds	r3, #20
    33a6:	4a16      	ldr	r2, [pc, #88]	; (3400 <usb_d_init+0x98>)
    33a8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    33aa:	79fb      	ldrb	r3, [r7, #7]
    33ac:	4a12      	ldr	r2, [pc, #72]	; (33f8 <usb_d_init+0x90>)
    33ae:	015b      	lsls	r3, r3, #5
    33b0:	4413      	add	r3, r2
    33b2:	3318      	adds	r3, #24
    33b4:	4a12      	ldr	r2, [pc, #72]	; (3400 <usb_d_init+0x98>)
    33b6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    33b8:	79fb      	ldrb	r3, [r7, #7]
    33ba:	4a0f      	ldr	r2, [pc, #60]	; (33f8 <usb_d_init+0x90>)
    33bc:	015b      	lsls	r3, r3, #5
    33be:	4413      	add	r3, r2
    33c0:	331c      	adds	r3, #28
    33c2:	4a0f      	ldr	r2, [pc, #60]	; (3400 <usb_d_init+0x98>)
    33c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    33c6:	79fb      	ldrb	r3, [r7, #7]
    33c8:	3301      	adds	r3, #1
    33ca:	71fb      	strb	r3, [r7, #7]
    33cc:	79fb      	ldrb	r3, [r7, #7]
    33ce:	2b03      	cmp	r3, #3
    33d0:	d9dd      	bls.n	338e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    33d2:	490c      	ldr	r1, [pc, #48]	; (3404 <usb_d_init+0x9c>)
    33d4:	2000      	movs	r0, #0
    33d6:	4b0c      	ldr	r3, [pc, #48]	; (3408 <usb_d_init+0xa0>)
    33d8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    33da:	490c      	ldr	r1, [pc, #48]	; (340c <usb_d_init+0xa4>)
    33dc:	2001      	movs	r0, #1
    33de:	4b0a      	ldr	r3, [pc, #40]	; (3408 <usb_d_init+0xa0>)
    33e0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    33e2:	490b      	ldr	r1, [pc, #44]	; (3410 <usb_d_init+0xa8>)
    33e4:	2002      	movs	r0, #2
    33e6:	4b08      	ldr	r3, [pc, #32]	; (3408 <usb_d_init+0xa0>)
    33e8:	4798      	blx	r3
	return ERR_NONE;
    33ea:	2300      	movs	r3, #0
}
    33ec:	4618      	mov	r0, r3
    33ee:	3708      	adds	r7, #8
    33f0:	46bd      	mov	sp, r7
    33f2:	bd80      	pop	{r7, pc}
    33f4:	00009df1 	.word	0x00009df1
    33f8:	200005b0 	.word	0x200005b0
    33fc:	0000e9d9 	.word	0x0000e9d9
    3400:	00003091 	.word	0x00003091
    3404:	000030ad 	.word	0x000030ad
    3408:	0000aa39 	.word	0x0000aa39
    340c:	00003175 	.word	0x00003175
    3410:	00003289 	.word	0x00003289

00003414 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3414:	b580      	push	{r7, lr}
    3416:	b082      	sub	sp, #8
    3418:	af00      	add	r7, sp, #0
    341a:	4603      	mov	r3, r0
    341c:	6039      	str	r1, [r7, #0]
    341e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3420:	79fb      	ldrb	r3, [r7, #7]
    3422:	6839      	ldr	r1, [r7, #0]
    3424:	4618      	mov	r0, r3
    3426:	4b03      	ldr	r3, [pc, #12]	; (3434 <usb_d_register_callback+0x20>)
    3428:	4798      	blx	r3
}
    342a:	bf00      	nop
    342c:	3708      	adds	r7, #8
    342e:	46bd      	mov	sp, r7
    3430:	bd80      	pop	{r7, pc}
    3432:	bf00      	nop
    3434:	0000a9f1 	.word	0x0000a9f1

00003438 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3438:	b580      	push	{r7, lr}
    343a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    343c:	4b02      	ldr	r3, [pc, #8]	; (3448 <usb_d_enable+0x10>)
    343e:	4798      	blx	r3
    3440:	4603      	mov	r3, r0
}
    3442:	4618      	mov	r0, r3
    3444:	bd80      	pop	{r7, pc}
    3446:	bf00      	nop
    3448:	00009ee1 	.word	0x00009ee1

0000344c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    344c:	b580      	push	{r7, lr}
    344e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3450:	4b01      	ldr	r3, [pc, #4]	; (3458 <usb_d_attach+0xc>)
    3452:	4798      	blx	r3
}
    3454:	bf00      	nop
    3456:	bd80      	pop	{r7, pc}
    3458:	00009f65 	.word	0x00009f65

0000345c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    345c:	b580      	push	{r7, lr}
    345e:	b082      	sub	sp, #8
    3460:	af00      	add	r7, sp, #0
    3462:	4603      	mov	r3, r0
    3464:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3466:	79fb      	ldrb	r3, [r7, #7]
    3468:	4618      	mov	r0, r3
    346a:	4b03      	ldr	r3, [pc, #12]	; (3478 <usb_d_set_address+0x1c>)
    346c:	4798      	blx	r3
}
    346e:	bf00      	nop
    3470:	3708      	adds	r7, #8
    3472:	46bd      	mov	sp, r7
    3474:	bd80      	pop	{r7, pc}
    3476:	bf00      	nop
    3478:	00009f79 	.word	0x00009f79

0000347c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    347c:	b580      	push	{r7, lr}
    347e:	b082      	sub	sp, #8
    3480:	af00      	add	r7, sp, #0
    3482:	4603      	mov	r3, r0
    3484:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3486:	79fb      	ldrb	r3, [r7, #7]
    3488:	b29b      	uxth	r3, r3
    348a:	461a      	mov	r2, r3
    348c:	2100      	movs	r1, #0
    348e:	2000      	movs	r0, #0
    3490:	4b03      	ldr	r3, [pc, #12]	; (34a0 <usb_d_ep0_init+0x24>)
    3492:	4798      	blx	r3
    3494:	4603      	mov	r3, r0
}
    3496:	4618      	mov	r0, r3
    3498:	3708      	adds	r7, #8
    349a:	46bd      	mov	sp, r7
    349c:	bd80      	pop	{r7, pc}
    349e:	bf00      	nop
    34a0:	000034a5 	.word	0x000034a5

000034a4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    34a4:	b580      	push	{r7, lr}
    34a6:	b086      	sub	sp, #24
    34a8:	af00      	add	r7, sp, #0
    34aa:	4603      	mov	r3, r0
    34ac:	71fb      	strb	r3, [r7, #7]
    34ae:	460b      	mov	r3, r1
    34b0:	71bb      	strb	r3, [r7, #6]
    34b2:	4613      	mov	r3, r2
    34b4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    34b6:	79fb      	ldrb	r3, [r7, #7]
    34b8:	4618      	mov	r0, r3
    34ba:	4b1e      	ldr	r3, [pc, #120]	; (3534 <usb_d_ep_init+0x90>)
    34bc:	4798      	blx	r3
    34be:	4603      	mov	r3, r0
    34c0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    34c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34c6:	015b      	lsls	r3, r3, #5
    34c8:	4a1b      	ldr	r2, [pc, #108]	; (3538 <usb_d_ep_init+0x94>)
    34ca:	4413      	add	r3, r2
    34cc:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    34ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34d2:	2b00      	cmp	r3, #0
    34d4:	db02      	blt.n	34dc <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    34d6:	f06f 0313 	mvn.w	r3, #19
    34da:	e027      	b.n	352c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    34dc:	20ff      	movs	r0, #255	; 0xff
    34de:	4b15      	ldr	r3, [pc, #84]	; (3534 <usb_d_ep_init+0x90>)
    34e0:	4798      	blx	r3
    34e2:	4603      	mov	r3, r0
    34e4:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    34e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34ea:	2b00      	cmp	r3, #0
    34ec:	da02      	bge.n	34f4 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    34ee:	f06f 0314 	mvn.w	r3, #20
    34f2:	e01b      	b.n	352c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    34f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34f8:	015b      	lsls	r3, r3, #5
    34fa:	4a0f      	ldr	r2, [pc, #60]	; (3538 <usb_d_ep_init+0x94>)
    34fc:	4413      	add	r3, r2
    34fe:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3500:	88ba      	ldrh	r2, [r7, #4]
    3502:	79b9      	ldrb	r1, [r7, #6]
    3504:	79fb      	ldrb	r3, [r7, #7]
    3506:	4618      	mov	r0, r3
    3508:	4b0c      	ldr	r3, [pc, #48]	; (353c <usb_d_ep_init+0x98>)
    350a:	4798      	blx	r3
    350c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    350e:	68fb      	ldr	r3, [r7, #12]
    3510:	2b00      	cmp	r3, #0
    3512:	da01      	bge.n	3518 <usb_d_ep_init+0x74>
		return rc;
    3514:	68fb      	ldr	r3, [r7, #12]
    3516:	e009      	b.n	352c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3518:	693b      	ldr	r3, [r7, #16]
    351a:	79fa      	ldrb	r2, [r7, #7]
    351c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    351e:	79bb      	ldrb	r3, [r7, #6]
    3520:	f003 0303 	and.w	r3, r3, #3
    3524:	b2da      	uxtb	r2, r3
    3526:	693b      	ldr	r3, [r7, #16]
    3528:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    352a:	2300      	movs	r3, #0
}
    352c:	4618      	mov	r0, r3
    352e:	3718      	adds	r7, #24
    3530:	46bd      	mov	sp, r7
    3532:	bd80      	pop	{r7, pc}
    3534:	00002fbd 	.word	0x00002fbd
    3538:	200005b0 	.word	0x200005b0
    353c:	0000a019 	.word	0x0000a019

00003540 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3540:	b580      	push	{r7, lr}
    3542:	b084      	sub	sp, #16
    3544:	af00      	add	r7, sp, #0
    3546:	4603      	mov	r3, r0
    3548:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    354a:	79fb      	ldrb	r3, [r7, #7]
    354c:	4618      	mov	r0, r3
    354e:	4b0d      	ldr	r3, [pc, #52]	; (3584 <usb_d_ep_deinit+0x44>)
    3550:	4798      	blx	r3
    3552:	4603      	mov	r3, r0
    3554:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3556:	f997 300f 	ldrsb.w	r3, [r7, #15]
    355a:	015b      	lsls	r3, r3, #5
    355c:	4a0a      	ldr	r2, [pc, #40]	; (3588 <usb_d_ep_deinit+0x48>)
    355e:	4413      	add	r3, r2
    3560:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3562:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3566:	2b00      	cmp	r3, #0
    3568:	db07      	blt.n	357a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    356a:	79fb      	ldrb	r3, [r7, #7]
    356c:	4618      	mov	r0, r3
    356e:	4b07      	ldr	r3, [pc, #28]	; (358c <usb_d_ep_deinit+0x4c>)
    3570:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3572:	68bb      	ldr	r3, [r7, #8]
    3574:	22ff      	movs	r2, #255	; 0xff
    3576:	705a      	strb	r2, [r3, #1]
    3578:	e000      	b.n	357c <usb_d_ep_deinit+0x3c>
		return;
    357a:	bf00      	nop
}
    357c:	3710      	adds	r7, #16
    357e:	46bd      	mov	sp, r7
    3580:	bd80      	pop	{r7, pc}
    3582:	bf00      	nop
    3584:	00002fbd 	.word	0x00002fbd
    3588:	200005b0 	.word	0x200005b0
    358c:	0000a14d 	.word	0x0000a14d

00003590 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3590:	b580      	push	{r7, lr}
    3592:	b086      	sub	sp, #24
    3594:	af00      	add	r7, sp, #0
    3596:	4603      	mov	r3, r0
    3598:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    359a:	79fb      	ldrb	r3, [r7, #7]
    359c:	4618      	mov	r0, r3
    359e:	4b15      	ldr	r3, [pc, #84]	; (35f4 <usb_d_ep_enable+0x64>)
    35a0:	4798      	blx	r3
    35a2:	4603      	mov	r3, r0
    35a4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    35a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35aa:	015b      	lsls	r3, r3, #5
    35ac:	4a12      	ldr	r2, [pc, #72]	; (35f8 <usb_d_ep_enable+0x68>)
    35ae:	4413      	add	r3, r2
    35b0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    35b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35b6:	2b00      	cmp	r3, #0
    35b8:	da02      	bge.n	35c0 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    35ba:	f06f 0311 	mvn.w	r3, #17
    35be:	e014      	b.n	35ea <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    35c0:	693b      	ldr	r3, [r7, #16]
    35c2:	781b      	ldrb	r3, [r3, #0]
    35c4:	2b00      	cmp	r3, #0
    35c6:	d101      	bne.n	35cc <usb_d_ep_enable+0x3c>
    35c8:	2202      	movs	r2, #2
    35ca:	e000      	b.n	35ce <usb_d_ep_enable+0x3e>
    35cc:	2201      	movs	r2, #1
    35ce:	693b      	ldr	r3, [r7, #16]
    35d0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    35d2:	79fb      	ldrb	r3, [r7, #7]
    35d4:	4618      	mov	r0, r3
    35d6:	4b09      	ldr	r3, [pc, #36]	; (35fc <usb_d_ep_enable+0x6c>)
    35d8:	4798      	blx	r3
    35da:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    35dc:	68fb      	ldr	r3, [r7, #12]
    35de:	2b00      	cmp	r3, #0
    35e0:	da02      	bge.n	35e8 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    35e2:	693b      	ldr	r3, [r7, #16]
    35e4:	2200      	movs	r2, #0
    35e6:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    35e8:	68fb      	ldr	r3, [r7, #12]
}
    35ea:	4618      	mov	r0, r3
    35ec:	3718      	adds	r7, #24
    35ee:	46bd      	mov	sp, r7
    35f0:	bd80      	pop	{r7, pc}
    35f2:	bf00      	nop
    35f4:	00002fbd 	.word	0x00002fbd
    35f8:	200005b0 	.word	0x200005b0
    35fc:	0000a231 	.word	0x0000a231

00003600 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3600:	b590      	push	{r4, r7, lr}
    3602:	b08d      	sub	sp, #52	; 0x34
    3604:	af02      	add	r7, sp, #8
    3606:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3608:	687b      	ldr	r3, [r7, #4]
    360a:	7a1b      	ldrb	r3, [r3, #8]
    360c:	4618      	mov	r0, r3
    360e:	4b51      	ldr	r3, [pc, #324]	; (3754 <usb_d_ep_transfer+0x154>)
    3610:	4798      	blx	r3
    3612:	4603      	mov	r3, r0
    3614:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3616:	f997 301f 	ldrsb.w	r3, [r7, #31]
    361a:	015b      	lsls	r3, r3, #5
    361c:	4a4e      	ldr	r2, [pc, #312]	; (3758 <usb_d_ep_transfer+0x158>)
    361e:	4413      	add	r3, r2
    3620:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3622:	687b      	ldr	r3, [r7, #4]
    3624:	7a1b      	ldrb	r3, [r3, #8]
    3626:	f003 0380 	and.w	r3, r3, #128	; 0x80
    362a:	2b00      	cmp	r3, #0
    362c:	bf14      	ite	ne
    362e:	2301      	movne	r3, #1
    3630:	2300      	moveq	r3, #0
    3632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3636:	687b      	ldr	r3, [r7, #4]
    3638:	7a5b      	ldrb	r3, [r3, #9]
    363a:	2b00      	cmp	r3, #0
    363c:	bf14      	ite	ne
    363e:	2301      	movne	r3, #1
    3640:	2300      	moveq	r3, #0
    3642:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	685b      	ldr	r3, [r3, #4]
    364a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    364c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3650:	2b00      	cmp	r3, #0
    3652:	da02      	bge.n	365a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3654:	f06f 0311 	mvn.w	r3, #17
    3658:	e077      	b.n	374a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    365a:	f107 0308 	add.w	r3, r7, #8
    365e:	4618      	mov	r0, r3
    3660:	4b3e      	ldr	r3, [pc, #248]	; (375c <usb_d_ep_transfer+0x15c>)
    3662:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3664:	69bb      	ldr	r3, [r7, #24]
    3666:	789b      	ldrb	r3, [r3, #2]
    3668:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    366a:	7bfb      	ldrb	r3, [r7, #15]
    366c:	b2db      	uxtb	r3, r3
    366e:	2b01      	cmp	r3, #1
    3670:	d10c      	bne.n	368c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3672:	69bb      	ldr	r3, [r7, #24]
    3674:	2203      	movs	r2, #3
    3676:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3678:	f107 0308 	add.w	r3, r7, #8
    367c:	4618      	mov	r0, r3
    367e:	4b38      	ldr	r3, [pc, #224]	; (3760 <usb_d_ep_transfer+0x160>)
    3680:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3682:	69bb      	ldr	r3, [r7, #24]
    3684:	781b      	ldrb	r3, [r3, #0]
    3686:	2b00      	cmp	r3, #0
    3688:	d151      	bne.n	372e <usb_d_ep_transfer+0x12e>
    368a:	e017      	b.n	36bc <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    368c:	f107 0308 	add.w	r3, r7, #8
    3690:	4618      	mov	r0, r3
    3692:	4b33      	ldr	r3, [pc, #204]	; (3760 <usb_d_ep_transfer+0x160>)
    3694:	4798      	blx	r3
		switch (state) {
    3696:	7bfb      	ldrb	r3, [r7, #15]
    3698:	b2db      	uxtb	r3, r3
    369a:	2b05      	cmp	r3, #5
    369c:	d004      	beq.n	36a8 <usb_d_ep_transfer+0xa8>
    369e:	2b06      	cmp	r3, #6
    36a0:	d004      	beq.n	36ac <usb_d_ep_transfer+0xac>
    36a2:	2b00      	cmp	r3, #0
    36a4:	d005      	beq.n	36b2 <usb_d_ep_transfer+0xb2>
    36a6:	e007      	b.n	36b8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    36a8:	2302      	movs	r3, #2
    36aa:	e04e      	b.n	374a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    36ac:	f06f 030f 	mvn.w	r3, #15
    36b0:	e04b      	b.n	374a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    36b2:	f06f 0312 	mvn.w	r3, #18
    36b6:	e048      	b.n	374a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    36b8:	2301      	movs	r3, #1
    36ba:	e046      	b.n	374a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    36bc:	69bb      	ldr	r3, [r7, #24]
    36be:	7c9b      	ldrb	r3, [r3, #18]
    36c0:	b29a      	uxth	r2, r3
    36c2:	69bb      	ldr	r3, [r7, #24]
    36c4:	7cdb      	ldrb	r3, [r3, #19]
    36c6:	b29b      	uxth	r3, r3
    36c8:	021b      	lsls	r3, r3, #8
    36ca:	b29b      	uxth	r3, r3
    36cc:	4413      	add	r3, r2
    36ce:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    36d0:	8afb      	ldrh	r3, [r7, #22]
    36d2:	2b00      	cmp	r3, #0
    36d4:	d10b      	bne.n	36ee <usb_d_ep_transfer+0xee>
			dir                 = true;
    36d6:	2301      	movs	r3, #1
    36d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    36dc:	2300      	movs	r3, #0
    36de:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    36e0:	2301      	movs	r3, #1
    36e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    36e6:	69bb      	ldr	r3, [r7, #24]
    36e8:	2204      	movs	r2, #4
    36ea:	709a      	strb	r2, [r3, #2]
    36ec:	e01f      	b.n	372e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    36ee:	69bb      	ldr	r3, [r7, #24]
    36f0:	7b1b      	ldrb	r3, [r3, #12]
    36f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    36f6:	2b00      	cmp	r3, #0
    36f8:	bf14      	ite	ne
    36fa:	2301      	movne	r3, #1
    36fc:	2300      	moveq	r3, #0
    36fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3702:	8afa      	ldrh	r2, [r7, #22]
    3704:	6a3b      	ldr	r3, [r7, #32]
    3706:	429a      	cmp	r2, r3
    3708:	d201      	bcs.n	370e <usb_d_ep_transfer+0x10e>
				len = req_len;
    370a:	8afb      	ldrh	r3, [r7, #22]
    370c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    370e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3712:	2b00      	cmp	r3, #0
    3714:	d008      	beq.n	3728 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3716:	8afa      	ldrh	r2, [r7, #22]
    3718:	6a3b      	ldr	r3, [r7, #32]
    371a:	429a      	cmp	r2, r3
    371c:	bf8c      	ite	hi
    371e:	2301      	movhi	r3, #1
    3720:	2300      	movls	r3, #0
    3722:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3726:	e002      	b.n	372e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3728:	2300      	movs	r3, #0
    372a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    372e:	687b      	ldr	r3, [r7, #4]
    3730:	7a18      	ldrb	r0, [r3, #8]
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	681a      	ldr	r2, [r3, #0]
    3736:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    373a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    373e:	9300      	str	r3, [sp, #0]
    3740:	6a3b      	ldr	r3, [r7, #32]
    3742:	4c08      	ldr	r4, [pc, #32]	; (3764 <usb_d_ep_transfer+0x164>)
    3744:	47a0      	blx	r4
    3746:	6138      	str	r0, [r7, #16]
	return rc;
    3748:	693b      	ldr	r3, [r7, #16]
}
    374a:	4618      	mov	r0, r3
    374c:	372c      	adds	r7, #44	; 0x2c
    374e:	46bd      	mov	sp, r7
    3750:	bd90      	pop	{r4, r7, pc}
    3752:	bf00      	nop
    3754:	00002fbd 	.word	0x00002fbd
    3758:	200005b0 	.word	0x200005b0
    375c:	0000b1a5 	.word	0x0000b1a5
    3760:	0000b1cb 	.word	0x0000b1cb
    3764:	0000303d 	.word	0x0000303d

00003768 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3768:	b580      	push	{r7, lr}
    376a:	b084      	sub	sp, #16
    376c:	af00      	add	r7, sp, #0
    376e:	4603      	mov	r3, r0
    3770:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3772:	79fb      	ldrb	r3, [r7, #7]
    3774:	4618      	mov	r0, r3
    3776:	4b0e      	ldr	r3, [pc, #56]	; (37b0 <usb_d_ep_abort+0x48>)
    3778:	4798      	blx	r3
    377a:	4603      	mov	r3, r0
    377c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    377e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3782:	015b      	lsls	r3, r3, #5
    3784:	4a0b      	ldr	r2, [pc, #44]	; (37b4 <usb_d_ep_abort+0x4c>)
    3786:	4413      	add	r3, r2
    3788:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    378a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    378e:	2b00      	cmp	r3, #0
    3790:	db0a      	blt.n	37a8 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3792:	79fb      	ldrb	r3, [r7, #7]
    3794:	4618      	mov	r0, r3
    3796:	4b08      	ldr	r3, [pc, #32]	; (37b8 <usb_d_ep_abort+0x50>)
    3798:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    379a:	68bb      	ldr	r3, [r7, #8]
    379c:	2201      	movs	r2, #1
    379e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    37a0:	68bb      	ldr	r3, [r7, #8]
    37a2:	2204      	movs	r2, #4
    37a4:	70da      	strb	r2, [r3, #3]
    37a6:	e000      	b.n	37aa <usb_d_ep_abort+0x42>
		return;
    37a8:	bf00      	nop
}
    37aa:	3710      	adds	r7, #16
    37ac:	46bd      	mov	sp, r7
    37ae:	bd80      	pop	{r7, pc}
    37b0:	00002fbd 	.word	0x00002fbd
    37b4:	200005b0 	.word	0x200005b0
    37b8:	0000a99d 	.word	0x0000a99d

000037bc <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    37bc:	b580      	push	{r7, lr}
    37be:	b086      	sub	sp, #24
    37c0:	af00      	add	r7, sp, #0
    37c2:	4603      	mov	r3, r0
    37c4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    37c6:	79fb      	ldrb	r3, [r7, #7]
    37c8:	4618      	mov	r0, r3
    37ca:	4b1a      	ldr	r3, [pc, #104]	; (3834 <_usb_d_ep_halt_clr+0x78>)
    37cc:	4798      	blx	r3
    37ce:	4603      	mov	r3, r0
    37d0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    37d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37d6:	015b      	lsls	r3, r3, #5
    37d8:	4a17      	ldr	r2, [pc, #92]	; (3838 <_usb_d_ep_halt_clr+0x7c>)
    37da:	4413      	add	r3, r2
    37dc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    37de:	f997 3017 	ldrsb.w	r3, [r7, #23]
    37e2:	2b00      	cmp	r3, #0
    37e4:	da02      	bge.n	37ec <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    37e6:	f06f 0311 	mvn.w	r3, #17
    37ea:	e01f      	b.n	382c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    37ec:	79fb      	ldrb	r3, [r7, #7]
    37ee:	2102      	movs	r1, #2
    37f0:	4618      	mov	r0, r3
    37f2:	4b12      	ldr	r3, [pc, #72]	; (383c <_usb_d_ep_halt_clr+0x80>)
    37f4:	4798      	blx	r3
    37f6:	4603      	mov	r3, r0
    37f8:	2b00      	cmp	r3, #0
    37fa:	d016      	beq.n	382a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    37fc:	79fb      	ldrb	r3, [r7, #7]
    37fe:	2100      	movs	r1, #0
    3800:	4618      	mov	r0, r3
    3802:	4b0e      	ldr	r3, [pc, #56]	; (383c <_usb_d_ep_halt_clr+0x80>)
    3804:	4798      	blx	r3
    3806:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3808:	68fb      	ldr	r3, [r7, #12]
    380a:	2b00      	cmp	r3, #0
    380c:	da01      	bge.n	3812 <_usb_d_ep_halt_clr+0x56>
			return rc;
    380e:	68fb      	ldr	r3, [r7, #12]
    3810:	e00c      	b.n	382c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3812:	693b      	ldr	r3, [r7, #16]
    3814:	2201      	movs	r2, #1
    3816:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3818:	693b      	ldr	r3, [r7, #16]
    381a:	2203      	movs	r2, #3
    381c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    381e:	693b      	ldr	r3, [r7, #16]
    3820:	69db      	ldr	r3, [r3, #28]
    3822:	79f8      	ldrb	r0, [r7, #7]
    3824:	2200      	movs	r2, #0
    3826:	2103      	movs	r1, #3
    3828:	4798      	blx	r3
	}
	return ERR_NONE;
    382a:	2300      	movs	r3, #0
}
    382c:	4618      	mov	r0, r3
    382e:	3718      	adds	r7, #24
    3830:	46bd      	mov	sp, r7
    3832:	bd80      	pop	{r7, pc}
    3834:	00002fbd 	.word	0x00002fbd
    3838:	200005b0 	.word	0x200005b0
    383c:	0000a5a9 	.word	0x0000a5a9

00003840 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3840:	b580      	push	{r7, lr}
    3842:	b082      	sub	sp, #8
    3844:	af00      	add	r7, sp, #0
    3846:	4603      	mov	r3, r0
    3848:	460a      	mov	r2, r1
    384a:	71fb      	strb	r3, [r7, #7]
    384c:	4613      	mov	r3, r2
    384e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3850:	79bb      	ldrb	r3, [r7, #6]
    3852:	2b00      	cmp	r3, #0
    3854:	d105      	bne.n	3862 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3856:	79fb      	ldrb	r3, [r7, #7]
    3858:	4618      	mov	r0, r3
    385a:	4b0c      	ldr	r3, [pc, #48]	; (388c <usb_d_ep_halt+0x4c>)
    385c:	4798      	blx	r3
    385e:	4603      	mov	r3, r0
    3860:	e00f      	b.n	3882 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3862:	79bb      	ldrb	r3, [r7, #6]
    3864:	2b01      	cmp	r3, #1
    3866:	d106      	bne.n	3876 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3868:	79fb      	ldrb	r3, [r7, #7]
    386a:	2101      	movs	r1, #1
    386c:	4618      	mov	r0, r3
    386e:	4b08      	ldr	r3, [pc, #32]	; (3890 <usb_d_ep_halt+0x50>)
    3870:	4798      	blx	r3
    3872:	4603      	mov	r3, r0
    3874:	e005      	b.n	3882 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3876:	79fb      	ldrb	r3, [r7, #7]
    3878:	2102      	movs	r1, #2
    387a:	4618      	mov	r0, r3
    387c:	4b04      	ldr	r3, [pc, #16]	; (3890 <usb_d_ep_halt+0x50>)
    387e:	4798      	blx	r3
    3880:	4603      	mov	r3, r0
	}
}
    3882:	4618      	mov	r0, r3
    3884:	3708      	adds	r7, #8
    3886:	46bd      	mov	sp, r7
    3888:	bd80      	pop	{r7, pc}
    388a:	bf00      	nop
    388c:	000037bd 	.word	0x000037bd
    3890:	0000a5a9 	.word	0x0000a5a9

00003894 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3894:	b580      	push	{r7, lr}
    3896:	b086      	sub	sp, #24
    3898:	af00      	add	r7, sp, #0
    389a:	4603      	mov	r3, r0
    389c:	603a      	str	r2, [r7, #0]
    389e:	71fb      	strb	r3, [r7, #7]
    38a0:	460b      	mov	r3, r1
    38a2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    38a4:	79fb      	ldrb	r3, [r7, #7]
    38a6:	4618      	mov	r0, r3
    38a8:	4b16      	ldr	r3, [pc, #88]	; (3904 <usb_d_ep_register_callback+0x70>)
    38aa:	4798      	blx	r3
    38ac:	4603      	mov	r3, r0
    38ae:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    38b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    38b4:	015b      	lsls	r3, r3, #5
    38b6:	4a14      	ldr	r2, [pc, #80]	; (3908 <usb_d_ep_register_callback+0x74>)
    38b8:	4413      	add	r3, r2
    38ba:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    38bc:	683b      	ldr	r3, [r7, #0]
    38be:	2b00      	cmp	r3, #0
    38c0:	d001      	beq.n	38c6 <usb_d_ep_register_callback+0x32>
    38c2:	683b      	ldr	r3, [r7, #0]
    38c4:	e000      	b.n	38c8 <usb_d_ep_register_callback+0x34>
    38c6:	4b11      	ldr	r3, [pc, #68]	; (390c <usb_d_ep_register_callback+0x78>)
    38c8:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    38ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    38ce:	2b00      	cmp	r3, #0
    38d0:	db13      	blt.n	38fa <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    38d2:	79bb      	ldrb	r3, [r7, #6]
    38d4:	2b01      	cmp	r3, #1
    38d6:	d008      	beq.n	38ea <usb_d_ep_register_callback+0x56>
    38d8:	2b02      	cmp	r3, #2
    38da:	d00a      	beq.n	38f2 <usb_d_ep_register_callback+0x5e>
    38dc:	2b00      	cmp	r3, #0
    38de:	d000      	beq.n	38e2 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    38e0:	e00c      	b.n	38fc <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    38e2:	693b      	ldr	r3, [r7, #16]
    38e4:	68fa      	ldr	r2, [r7, #12]
    38e6:	615a      	str	r2, [r3, #20]
		break;
    38e8:	e008      	b.n	38fc <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    38ea:	693b      	ldr	r3, [r7, #16]
    38ec:	68fa      	ldr	r2, [r7, #12]
    38ee:	619a      	str	r2, [r3, #24]
		break;
    38f0:	e004      	b.n	38fc <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    38f2:	693b      	ldr	r3, [r7, #16]
    38f4:	68fa      	ldr	r2, [r7, #12]
    38f6:	61da      	str	r2, [r3, #28]
		break;
    38f8:	e000      	b.n	38fc <usb_d_ep_register_callback+0x68>
		return;
    38fa:	bf00      	nop
	}
}
    38fc:	3718      	adds	r7, #24
    38fe:	46bd      	mov	sp, r7
    3900:	bd80      	pop	{r7, pc}
    3902:	bf00      	nop
    3904:	00002fbd 	.word	0x00002fbd
    3908:	200005b0 	.word	0x200005b0
    390c:	00003091 	.word	0x00003091

00003910 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3910:	b480      	push	{r7}
    3912:	b085      	sub	sp, #20
    3914:	af00      	add	r7, sp, #0
    3916:	4603      	mov	r3, r0
    3918:	60b9      	str	r1, [r7, #8]
    391a:	607a      	str	r2, [r7, #4]
    391c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    391e:	7bfb      	ldrb	r3, [r7, #15]
    3920:	f083 0301 	eor.w	r3, r3, #1
    3924:	b2db      	uxtb	r3, r3
    3926:	2b00      	cmp	r3, #0
    3928:	d000      	beq.n	392c <assert+0x1c>
		__asm("BKPT #0");
    392a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    392c:	bf00      	nop
    392e:	3714      	adds	r7, #20
    3930:	46bd      	mov	sp, r7
    3932:	f85d 7b04 	ldr.w	r7, [sp], #4
    3936:	4770      	bx	lr

00003938 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3938:	b480      	push	{r7}
    393a:	b085      	sub	sp, #20
    393c:	af00      	add	r7, sp, #0
    393e:	6078      	str	r0, [r7, #4]
    3940:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3942:	687b      	ldr	r3, [r7, #4]
    3944:	681b      	ldr	r3, [r3, #0]
    3946:	60fb      	str	r3, [r7, #12]
    3948:	e008      	b.n	395c <is_list_element+0x24>
		if (it == element) {
    394a:	68fa      	ldr	r2, [r7, #12]
    394c:	683b      	ldr	r3, [r7, #0]
    394e:	429a      	cmp	r2, r3
    3950:	d101      	bne.n	3956 <is_list_element+0x1e>
			return true;
    3952:	2301      	movs	r3, #1
    3954:	e006      	b.n	3964 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3956:	68fb      	ldr	r3, [r7, #12]
    3958:	681b      	ldr	r3, [r3, #0]
    395a:	60fb      	str	r3, [r7, #12]
    395c:	68fb      	ldr	r3, [r7, #12]
    395e:	2b00      	cmp	r3, #0
    3960:	d1f3      	bne.n	394a <is_list_element+0x12>
		}
	}

	return false;
    3962:	2300      	movs	r3, #0
}
    3964:	4618      	mov	r0, r3
    3966:	3714      	adds	r7, #20
    3968:	46bd      	mov	sp, r7
    396a:	f85d 7b04 	ldr.w	r7, [sp], #4
    396e:	4770      	bx	lr

00003970 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3970:	b580      	push	{r7, lr}
    3972:	b082      	sub	sp, #8
    3974:	af00      	add	r7, sp, #0
    3976:	6078      	str	r0, [r7, #4]
    3978:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    397a:	6839      	ldr	r1, [r7, #0]
    397c:	6878      	ldr	r0, [r7, #4]
    397e:	4b0f      	ldr	r3, [pc, #60]	; (39bc <list_insert_as_head+0x4c>)
    3980:	4798      	blx	r3
    3982:	4603      	mov	r3, r0
    3984:	2b00      	cmp	r3, #0
    3986:	bf14      	ite	ne
    3988:	2301      	movne	r3, #1
    398a:	2300      	moveq	r3, #0
    398c:	b2db      	uxtb	r3, r3
    398e:	f083 0301 	eor.w	r3, r3, #1
    3992:	b2db      	uxtb	r3, r3
    3994:	f003 0301 	and.w	r3, r3, #1
    3998:	b2db      	uxtb	r3, r3
    399a:	2239      	movs	r2, #57	; 0x39
    399c:	4908      	ldr	r1, [pc, #32]	; (39c0 <list_insert_as_head+0x50>)
    399e:	4618      	mov	r0, r3
    39a0:	4b08      	ldr	r3, [pc, #32]	; (39c4 <list_insert_as_head+0x54>)
    39a2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    39a4:	687b      	ldr	r3, [r7, #4]
    39a6:	681a      	ldr	r2, [r3, #0]
    39a8:	683b      	ldr	r3, [r7, #0]
    39aa:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    39ac:	687b      	ldr	r3, [r7, #4]
    39ae:	683a      	ldr	r2, [r7, #0]
    39b0:	601a      	str	r2, [r3, #0]
}
    39b2:	bf00      	nop
    39b4:	3708      	adds	r7, #8
    39b6:	46bd      	mov	sp, r7
    39b8:	bd80      	pop	{r7, pc}
    39ba:	bf00      	nop
    39bc:	00003939 	.word	0x00003939
    39c0:	0000edc0 	.word	0x0000edc0
    39c4:	00003911 	.word	0x00003911

000039c8 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    39c8:	b480      	push	{r7}
    39ca:	b083      	sub	sp, #12
    39cc:	af00      	add	r7, sp, #0
    39ce:	6078      	str	r0, [r7, #4]
    39d0:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	681a      	ldr	r2, [r3, #0]
    39d6:	683b      	ldr	r3, [r7, #0]
    39d8:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    39da:	687b      	ldr	r3, [r7, #4]
    39dc:	683a      	ldr	r2, [r7, #0]
    39de:	601a      	str	r2, [r3, #0]
}
    39e0:	bf00      	nop
    39e2:	370c      	adds	r7, #12
    39e4:	46bd      	mov	sp, r7
    39e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ea:	4770      	bx	lr

000039ec <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    39ec:	b580      	push	{r7, lr}
    39ee:	b084      	sub	sp, #16
    39f0:	af00      	add	r7, sp, #0
    39f2:	6078      	str	r0, [r7, #4]
    39f4:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    39f6:	687b      	ldr	r3, [r7, #4]
    39f8:	681b      	ldr	r3, [r3, #0]
    39fa:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    39fc:	6839      	ldr	r1, [r7, #0]
    39fe:	6878      	ldr	r0, [r7, #4]
    3a00:	4b16      	ldr	r3, [pc, #88]	; (3a5c <list_insert_at_end+0x70>)
    3a02:	4798      	blx	r3
    3a04:	4603      	mov	r3, r0
    3a06:	2b00      	cmp	r3, #0
    3a08:	bf14      	ite	ne
    3a0a:	2301      	movne	r3, #1
    3a0c:	2300      	moveq	r3, #0
    3a0e:	b2db      	uxtb	r3, r3
    3a10:	f083 0301 	eor.w	r3, r3, #1
    3a14:	b2db      	uxtb	r3, r3
    3a16:	f003 0301 	and.w	r3, r3, #1
    3a1a:	b2db      	uxtb	r3, r3
    3a1c:	224f      	movs	r2, #79	; 0x4f
    3a1e:	4910      	ldr	r1, [pc, #64]	; (3a60 <list_insert_at_end+0x74>)
    3a20:	4618      	mov	r0, r3
    3a22:	4b10      	ldr	r3, [pc, #64]	; (3a64 <list_insert_at_end+0x78>)
    3a24:	4798      	blx	r3

	if (!list->head) {
    3a26:	687b      	ldr	r3, [r7, #4]
    3a28:	681b      	ldr	r3, [r3, #0]
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d109      	bne.n	3a42 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3a2e:	687b      	ldr	r3, [r7, #4]
    3a30:	683a      	ldr	r2, [r7, #0]
    3a32:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3a34:	683b      	ldr	r3, [r7, #0]
    3a36:	2200      	movs	r2, #0
    3a38:	601a      	str	r2, [r3, #0]
		return;
    3a3a:	e00c      	b.n	3a56 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3a3c:	68fb      	ldr	r3, [r7, #12]
    3a3e:	681b      	ldr	r3, [r3, #0]
    3a40:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3a42:	68fb      	ldr	r3, [r7, #12]
    3a44:	681b      	ldr	r3, [r3, #0]
    3a46:	2b00      	cmp	r3, #0
    3a48:	d1f8      	bne.n	3a3c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3a4a:	68fb      	ldr	r3, [r7, #12]
    3a4c:	683a      	ldr	r2, [r7, #0]
    3a4e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3a50:	683b      	ldr	r3, [r7, #0]
    3a52:	2200      	movs	r2, #0
    3a54:	601a      	str	r2, [r3, #0]
}
    3a56:	3710      	adds	r7, #16
    3a58:	46bd      	mov	sp, r7
    3a5a:	bd80      	pop	{r7, pc}
    3a5c:	00003939 	.word	0x00003939
    3a60:	0000edc0 	.word	0x0000edc0
    3a64:	00003911 	.word	0x00003911

00003a68 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3a68:	b480      	push	{r7}
    3a6a:	b085      	sub	sp, #20
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3a70:	687b      	ldr	r3, [r7, #4]
    3a72:	681b      	ldr	r3, [r3, #0]
    3a74:	2b00      	cmp	r3, #0
    3a76:	d009      	beq.n	3a8c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3a78:	687b      	ldr	r3, [r7, #4]
    3a7a:	681b      	ldr	r3, [r3, #0]
    3a7c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	681b      	ldr	r3, [r3, #0]
    3a82:	681a      	ldr	r2, [r3, #0]
    3a84:	687b      	ldr	r3, [r7, #4]
    3a86:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3a88:	68fb      	ldr	r3, [r7, #12]
    3a8a:	e000      	b.n	3a8e <list_remove_head+0x26>
	}

	return NULL;
    3a8c:	2300      	movs	r3, #0
}
    3a8e:	4618      	mov	r0, r3
    3a90:	3714      	adds	r7, #20
    3a92:	46bd      	mov	sp, r7
    3a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a98:	4770      	bx	lr

00003a9a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3a9a:	b480      	push	{r7}
    3a9c:	b085      	sub	sp, #20
    3a9e:	af00      	add	r7, sp, #0
    3aa0:	6078      	str	r0, [r7, #4]
    3aa2:	6039      	str	r1, [r7, #0]
	if (!element) {
    3aa4:	683b      	ldr	r3, [r7, #0]
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d101      	bne.n	3aae <list_delete_element+0x14>
		return false;
    3aaa:	2300      	movs	r3, #0
    3aac:	e024      	b.n	3af8 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3aae:	687b      	ldr	r3, [r7, #4]
    3ab0:	681a      	ldr	r2, [r3, #0]
    3ab2:	683b      	ldr	r3, [r7, #0]
    3ab4:	429a      	cmp	r2, r3
    3ab6:	d106      	bne.n	3ac6 <list_delete_element+0x2c>
		list->head = list->head->next;
    3ab8:	687b      	ldr	r3, [r7, #4]
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	681a      	ldr	r2, [r3, #0]
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	601a      	str	r2, [r3, #0]
		return true;
    3ac2:	2301      	movs	r3, #1
    3ac4:	e018      	b.n	3af8 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3ac6:	687b      	ldr	r3, [r7, #4]
    3ac8:	681b      	ldr	r3, [r3, #0]
    3aca:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3acc:	e002      	b.n	3ad4 <list_delete_element+0x3a>
			it = it->next;
    3ace:	68fb      	ldr	r3, [r7, #12]
    3ad0:	681b      	ldr	r3, [r3, #0]
    3ad2:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3ad4:	68fb      	ldr	r3, [r7, #12]
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d004      	beq.n	3ae4 <list_delete_element+0x4a>
    3ada:	68fb      	ldr	r3, [r7, #12]
    3adc:	681a      	ldr	r2, [r3, #0]
    3ade:	683b      	ldr	r3, [r7, #0]
    3ae0:	429a      	cmp	r2, r3
    3ae2:	d1f4      	bne.n	3ace <list_delete_element+0x34>
		}
		if (it) {
    3ae4:	68fb      	ldr	r3, [r7, #12]
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d005      	beq.n	3af6 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3aea:	683b      	ldr	r3, [r7, #0]
    3aec:	681a      	ldr	r2, [r3, #0]
    3aee:	68fb      	ldr	r3, [r7, #12]
    3af0:	601a      	str	r2, [r3, #0]
			return true;
    3af2:	2301      	movs	r3, #1
    3af4:	e000      	b.n	3af8 <list_delete_element+0x5e>
		}
	}

	return false;
    3af6:	2300      	movs	r3, #0
}
    3af8:	4618      	mov	r0, r3
    3afa:	3714      	adds	r7, #20
    3afc:	46bd      	mov	sp, r7
    3afe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b02:	4770      	bx	lr

00003b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3b04:	b480      	push	{r7}
    3b06:	b083      	sub	sp, #12
    3b08:	af00      	add	r7, sp, #0
    3b0a:	4603      	mov	r3, r0
    3b0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b12:	2b00      	cmp	r3, #0
    3b14:	db0b      	blt.n	3b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b16:	4909      	ldr	r1, [pc, #36]	; (3b3c <__NVIC_EnableIRQ+0x38>)
    3b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b1c:	095b      	lsrs	r3, r3, #5
    3b1e:	88fa      	ldrh	r2, [r7, #6]
    3b20:	f002 021f 	and.w	r2, r2, #31
    3b24:	2001      	movs	r0, #1
    3b26:	fa00 f202 	lsl.w	r2, r0, r2
    3b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3b2e:	bf00      	nop
    3b30:	370c      	adds	r7, #12
    3b32:	46bd      	mov	sp, r7
    3b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b38:	4770      	bx	lr
    3b3a:	bf00      	nop
    3b3c:	e000e100 	.word	0xe000e100

00003b40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3b40:	b480      	push	{r7}
    3b42:	b083      	sub	sp, #12
    3b44:	af00      	add	r7, sp, #0
    3b46:	4603      	mov	r3, r0
    3b48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b4e:	2b00      	cmp	r3, #0
    3b50:	db10      	blt.n	3b74 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b52:	490b      	ldr	r1, [pc, #44]	; (3b80 <__NVIC_DisableIRQ+0x40>)
    3b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b58:	095b      	lsrs	r3, r3, #5
    3b5a:	88fa      	ldrh	r2, [r7, #6]
    3b5c:	f002 021f 	and.w	r2, r2, #31
    3b60:	2001      	movs	r0, #1
    3b62:	fa00 f202 	lsl.w	r2, r0, r2
    3b66:	3320      	adds	r3, #32
    3b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3b6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b70:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3b74:	bf00      	nop
    3b76:	370c      	adds	r7, #12
    3b78:	46bd      	mov	sp, r7
    3b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b7e:	4770      	bx	lr
    3b80:	e000e100 	.word	0xe000e100

00003b84 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3b84:	b480      	push	{r7}
    3b86:	b083      	sub	sp, #12
    3b88:	af00      	add	r7, sp, #0
    3b8a:	4603      	mov	r3, r0
    3b8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b92:	2b00      	cmp	r3, #0
    3b94:	db0c      	blt.n	3bb0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b96:	4909      	ldr	r1, [pc, #36]	; (3bbc <__NVIC_ClearPendingIRQ+0x38>)
    3b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b9c:	095b      	lsrs	r3, r3, #5
    3b9e:	88fa      	ldrh	r2, [r7, #6]
    3ba0:	f002 021f 	and.w	r2, r2, #31
    3ba4:	2001      	movs	r0, #1
    3ba6:	fa00 f202 	lsl.w	r2, r0, r2
    3baa:	3360      	adds	r3, #96	; 0x60
    3bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3bb0:	bf00      	nop
    3bb2:	370c      	adds	r7, #12
    3bb4:	46bd      	mov	sp, r7
    3bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bba:	4770      	bx	lr
    3bbc:	e000e100 	.word	0xe000e100

00003bc0 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3bc0:	b480      	push	{r7}
    3bc2:	b083      	sub	sp, #12
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3bc8:	687b      	ldr	r3, [r7, #4]
    3bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3bcc:	095b      	lsrs	r3, r3, #5
    3bce:	f003 0301 	and.w	r3, r3, #1
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	bf14      	ite	ne
    3bd6:	2301      	movne	r3, #1
    3bd8:	2300      	moveq	r3, #0
    3bda:	b2db      	uxtb	r3, r3
}
    3bdc:	4618      	mov	r0, r3
    3bde:	370c      	adds	r7, #12
    3be0:	46bd      	mov	sp, r7
    3be2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3be6:	4770      	bx	lr

00003be8 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3be8:	b480      	push	{r7}
    3bea:	b083      	sub	sp, #12
    3bec:	af00      	add	r7, sp, #0
    3bee:	6078      	str	r0, [r7, #4]
    3bf0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3bf2:	687b      	ldr	r3, [r7, #4]
    3bf4:	683a      	ldr	r2, [r7, #0]
    3bf6:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bf8:	bf00      	nop
    3bfa:	370c      	adds	r7, #12
    3bfc:	46bd      	mov	sp, r7
    3bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c02:	4770      	bx	lr

00003c04 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3c04:	b480      	push	{r7}
    3c06:	b083      	sub	sp, #12
    3c08:	af00      	add	r7, sp, #0
    3c0a:	6078      	str	r0, [r7, #4]
    3c0c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	683a      	ldr	r2, [r7, #0]
    3c12:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c14:	bf00      	nop
    3c16:	370c      	adds	r7, #12
    3c18:	46bd      	mov	sp, r7
    3c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c1e:	4770      	bx	lr

00003c20 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3c20:	b480      	push	{r7}
    3c22:	b083      	sub	sp, #12
    3c24:	af00      	add	r7, sp, #0
    3c26:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3c28:	687b      	ldr	r3, [r7, #4]
    3c2a:	699b      	ldr	r3, [r3, #24]
    3c2c:	f043 0201 	orr.w	r2, r3, #1
    3c30:	687b      	ldr	r3, [r7, #4]
    3c32:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c34:	bf00      	nop
    3c36:	370c      	adds	r7, #12
    3c38:	46bd      	mov	sp, r7
    3c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c3e:	4770      	bx	lr

00003c40 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3c40:	b480      	push	{r7}
    3c42:	b085      	sub	sp, #20
    3c44:	af00      	add	r7, sp, #0
    3c46:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3c48:	687b      	ldr	r3, [r7, #4]
    3c4a:	699b      	ldr	r3, [r3, #24]
    3c4c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3c4e:	68fb      	ldr	r3, [r7, #12]
    3c50:	f003 0301 	and.w	r3, r3, #1
    3c54:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3c56:	68fb      	ldr	r3, [r7, #12]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	bf14      	ite	ne
    3c5c:	2301      	movne	r3, #1
    3c5e:	2300      	moveq	r3, #0
    3c60:	b2db      	uxtb	r3, r3
}
    3c62:	4618      	mov	r0, r3
    3c64:	3714      	adds	r7, #20
    3c66:	46bd      	mov	sp, r7
    3c68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c6c:	4770      	bx	lr

00003c6e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3c6e:	b480      	push	{r7}
    3c70:	b083      	sub	sp, #12
    3c72:	af00      	add	r7, sp, #0
    3c74:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3c76:	687b      	ldr	r3, [r7, #4]
    3c78:	699b      	ldr	r3, [r3, #24]
    3c7a:	f023 0201 	bic.w	r2, r3, #1
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c82:	bf00      	nop
    3c84:	370c      	adds	r7, #12
    3c86:	46bd      	mov	sp, r7
    3c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c8c:	4770      	bx	lr

00003c8e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3c8e:	b480      	push	{r7}
    3c90:	b083      	sub	sp, #12
    3c92:	af00      	add	r7, sp, #0
    3c94:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3c96:	687b      	ldr	r3, [r7, #4]
    3c98:	699b      	ldr	r3, [r3, #24]
    3c9a:	f043 0202 	orr.w	r2, r3, #2
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ca2:	bf00      	nop
    3ca4:	370c      	adds	r7, #12
    3ca6:	46bd      	mov	sp, r7
    3ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cac:	4770      	bx	lr

00003cae <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3cae:	b480      	push	{r7}
    3cb0:	b083      	sub	sp, #12
    3cb2:	af00      	add	r7, sp, #0
    3cb4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	699b      	ldr	r3, [r3, #24]
    3cba:	f023 0202 	bic.w	r2, r3, #2
    3cbe:	687b      	ldr	r3, [r7, #4]
    3cc0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cc2:	bf00      	nop
    3cc4:	370c      	adds	r7, #12
    3cc6:	46bd      	mov	sp, r7
    3cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ccc:	4770      	bx	lr

00003cce <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3cce:	b480      	push	{r7}
    3cd0:	b083      	sub	sp, #12
    3cd2:	af00      	add	r7, sp, #0
    3cd4:	6078      	str	r0, [r7, #4]
    3cd6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3cd8:	687b      	ldr	r3, [r7, #4]
    3cda:	699a      	ldr	r2, [r3, #24]
    3cdc:	683b      	ldr	r3, [r7, #0]
    3cde:	431a      	orrs	r2, r3
    3ce0:	687b      	ldr	r3, [r7, #4]
    3ce2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ce4:	bf00      	nop
    3ce6:	370c      	adds	r7, #12
    3ce8:	46bd      	mov	sp, r7
    3cea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cee:	4770      	bx	lr

00003cf0 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3cf0:	b480      	push	{r7}
    3cf2:	b083      	sub	sp, #12
    3cf4:	af00      	add	r7, sp, #0
    3cf6:	6078      	str	r0, [r7, #4]
    3cf8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3cfa:	687b      	ldr	r3, [r7, #4]
    3cfc:	683a      	ldr	r2, [r7, #0]
    3cfe:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d00:	bf00      	nop
    3d02:	370c      	adds	r7, #12
    3d04:	46bd      	mov	sp, r7
    3d06:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d0a:	4770      	bx	lr

00003d0c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3d0c:	b480      	push	{r7}
    3d0e:	b083      	sub	sp, #12
    3d10:	af00      	add	r7, sp, #0
    3d12:	6078      	str	r0, [r7, #4]
    3d14:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3d16:	687b      	ldr	r3, [r7, #4]
    3d18:	683a      	ldr	r2, [r7, #0]
    3d1a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d1c:	bf00      	nop
    3d1e:	370c      	adds	r7, #12
    3d20:	46bd      	mov	sp, r7
    3d22:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d26:	4770      	bx	lr

00003d28 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3d28:	b480      	push	{r7}
    3d2a:	b083      	sub	sp, #12
    3d2c:	af00      	add	r7, sp, #0
    3d2e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3d34:	4618      	mov	r0, r3
    3d36:	370c      	adds	r7, #12
    3d38:	46bd      	mov	sp, r7
    3d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d3e:	4770      	bx	lr

00003d40 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3d40:	b480      	push	{r7}
    3d42:	b083      	sub	sp, #12
    3d44:	af00      	add	r7, sp, #0
    3d46:	6078      	str	r0, [r7, #4]
    3d48:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3d4a:	687b      	ldr	r3, [r7, #4]
    3d4c:	683a      	ldr	r2, [r7, #0]
    3d4e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d50:	bf00      	nop
    3d52:	370c      	adds	r7, #12
    3d54:	46bd      	mov	sp, r7
    3d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d5a:	4770      	bx	lr

00003d5c <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3d5c:	b480      	push	{r7}
    3d5e:	b083      	sub	sp, #12
    3d60:	af00      	add	r7, sp, #0
    3d62:	6078      	str	r0, [r7, #4]
    3d64:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3d66:	687b      	ldr	r3, [r7, #4]
    3d68:	683a      	ldr	r2, [r7, #0]
    3d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d6e:	bf00      	nop
    3d70:	370c      	adds	r7, #12
    3d72:	46bd      	mov	sp, r7
    3d74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d78:	4770      	bx	lr

00003d7a <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3d7a:	b480      	push	{r7}
    3d7c:	b083      	sub	sp, #12
    3d7e:	af00      	add	r7, sp, #0
    3d80:	6078      	str	r0, [r7, #4]
    3d82:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3d84:	687b      	ldr	r3, [r7, #4]
    3d86:	683a      	ldr	r2, [r7, #0]
    3d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d8c:	bf00      	nop
    3d8e:	370c      	adds	r7, #12
    3d90:	46bd      	mov	sp, r7
    3d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d96:	4770      	bx	lr

00003d98 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3d98:	b480      	push	{r7}
    3d9a:	b083      	sub	sp, #12
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	6078      	str	r0, [r7, #4]
    3da0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3da2:	687b      	ldr	r3, [r7, #4]
    3da4:	683a      	ldr	r2, [r7, #0]
    3da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3daa:	bf00      	nop
    3dac:	370c      	adds	r7, #12
    3dae:	46bd      	mov	sp, r7
    3db0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3db4:	4770      	bx	lr

00003db6 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3db6:	b480      	push	{r7}
    3db8:	b083      	sub	sp, #12
    3dba:	af00      	add	r7, sp, #0
    3dbc:	6078      	str	r0, [r7, #4]
    3dbe:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3dc0:	687b      	ldr	r3, [r7, #4]
    3dc2:	683a      	ldr	r2, [r7, #0]
    3dc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dc8:	bf00      	nop
    3dca:	370c      	adds	r7, #12
    3dcc:	46bd      	mov	sp, r7
    3dce:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd2:	4770      	bx	lr

00003dd4 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3dd4:	b480      	push	{r7}
    3dd6:	b083      	sub	sp, #12
    3dd8:	af00      	add	r7, sp, #0
    3dda:	6078      	str	r0, [r7, #4]
    3ddc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	683a      	ldr	r2, [r7, #0]
    3de2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3de6:	bf00      	nop
    3de8:	370c      	adds	r7, #12
    3dea:	46bd      	mov	sp, r7
    3dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df0:	4770      	bx	lr

00003df2 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3df2:	b480      	push	{r7}
    3df4:	b083      	sub	sp, #12
    3df6:	af00      	add	r7, sp, #0
    3df8:	6078      	str	r0, [r7, #4]
    3dfa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	683a      	ldr	r2, [r7, #0]
    3e00:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e04:	bf00      	nop
    3e06:	370c      	adds	r7, #12
    3e08:	46bd      	mov	sp, r7
    3e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e0e:	4770      	bx	lr

00003e10 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3e10:	b480      	push	{r7}
    3e12:	b083      	sub	sp, #12
    3e14:	af00      	add	r7, sp, #0
    3e16:	6078      	str	r0, [r7, #4]
    3e18:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3e1a:	687b      	ldr	r3, [r7, #4]
    3e1c:	683a      	ldr	r2, [r7, #0]
    3e1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e22:	bf00      	nop
    3e24:	370c      	adds	r7, #12
    3e26:	46bd      	mov	sp, r7
    3e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2c:	4770      	bx	lr

00003e2e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3e2e:	b480      	push	{r7}
    3e30:	b083      	sub	sp, #12
    3e32:	af00      	add	r7, sp, #0
    3e34:	6078      	str	r0, [r7, #4]
    3e36:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	683a      	ldr	r2, [r7, #0]
    3e3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e40:	bf00      	nop
    3e42:	370c      	adds	r7, #12
    3e44:	46bd      	mov	sp, r7
    3e46:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4a:	4770      	bx	lr

00003e4c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3e4c:	b480      	push	{r7}
    3e4e:	b083      	sub	sp, #12
    3e50:	af00      	add	r7, sp, #0
    3e52:	6078      	str	r0, [r7, #4]
    3e54:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3e56:	687b      	ldr	r3, [r7, #4]
    3e58:	683a      	ldr	r2, [r7, #0]
    3e5a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e5e:	bf00      	nop
    3e60:	370c      	adds	r7, #12
    3e62:	46bd      	mov	sp, r7
    3e64:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e68:	4770      	bx	lr
	...

00003e6c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3e6c:	b580      	push	{r7, lr}
    3e6e:	b082      	sub	sp, #8
    3e70:	af00      	add	r7, sp, #0
    3e72:	6078      	str	r0, [r7, #4]
    3e74:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3e76:	687b      	ldr	r3, [r7, #4]
    3e78:	683a      	ldr	r2, [r7, #0]
    3e7a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	681b      	ldr	r3, [r3, #0]
    3e80:	4618      	mov	r0, r3
    3e82:	4b55      	ldr	r3, [pc, #340]	; (3fd8 <_can_async_init+0x16c>)
    3e84:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3e86:	bf00      	nop
    3e88:	687b      	ldr	r3, [r7, #4]
    3e8a:	681b      	ldr	r3, [r3, #0]
    3e8c:	4618      	mov	r0, r3
    3e8e:	4b53      	ldr	r3, [pc, #332]	; (3fdc <_can_async_init+0x170>)
    3e90:	4798      	blx	r3
    3e92:	4603      	mov	r3, r0
    3e94:	f083 0301 	eor.w	r3, r3, #1
    3e98:	b2db      	uxtb	r3, r3
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d1f4      	bne.n	3e88 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	681b      	ldr	r3, [r3, #0]
    3ea2:	4618      	mov	r0, r3
    3ea4:	4b4e      	ldr	r3, [pc, #312]	; (3fe0 <_can_async_init+0x174>)
    3ea6:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3ea8:	683b      	ldr	r3, [r7, #0]
    3eaa:	4a4e      	ldr	r2, [pc, #312]	; (3fe4 <_can_async_init+0x178>)
    3eac:	4293      	cmp	r3, r2
    3eae:	d17a      	bne.n	3fa6 <_can_async_init+0x13a>
		_can1_dev    = dev;
    3eb0:	4a4d      	ldr	r2, [pc, #308]	; (3fe8 <_can_async_init+0x17c>)
    3eb2:	687b      	ldr	r3, [r7, #4]
    3eb4:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	4a4c      	ldr	r2, [pc, #304]	; (3fec <_can_async_init+0x180>)
    3eba:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	681b      	ldr	r3, [r3, #0]
    3ec0:	f44f 7140 	mov.w	r1, #768	; 0x300
    3ec4:	4618      	mov	r0, r3
    3ec6:	4b4a      	ldr	r3, [pc, #296]	; (3ff0 <_can_async_init+0x184>)
    3ec8:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3eca:	687b      	ldr	r3, [r7, #4]
    3ecc:	681b      	ldr	r3, [r3, #0]
    3ece:	2102      	movs	r1, #2
    3ed0:	4618      	mov	r0, r3
    3ed2:	4b48      	ldr	r3, [pc, #288]	; (3ff4 <_can_async_init+0x188>)
    3ed4:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3ed6:	687b      	ldr	r3, [r7, #4]
    3ed8:	681b      	ldr	r3, [r3, #0]
    3eda:	4947      	ldr	r1, [pc, #284]	; (3ff8 <_can_async_init+0x18c>)
    3edc:	4618      	mov	r0, r3
    3ede:	4b47      	ldr	r3, [pc, #284]	; (3ffc <_can_async_init+0x190>)
    3ee0:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3ee2:	687b      	ldr	r3, [r7, #4]
    3ee4:	681b      	ldr	r3, [r3, #0]
    3ee6:	4946      	ldr	r1, [pc, #280]	; (4000 <_can_async_init+0x194>)
    3ee8:	4618      	mov	r0, r3
    3eea:	4b46      	ldr	r3, [pc, #280]	; (4004 <_can_async_init+0x198>)
    3eec:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3eee:	687b      	ldr	r3, [r7, #4]
    3ef0:	681a      	ldr	r2, [r3, #0]
    3ef2:	4b45      	ldr	r3, [pc, #276]	; (4008 <_can_async_init+0x19c>)
    3ef4:	b29b      	uxth	r3, r3
    3ef6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3efe:	4619      	mov	r1, r3
    3f00:	4610      	mov	r0, r2
    3f02:	4b42      	ldr	r3, [pc, #264]	; (400c <_can_async_init+0x1a0>)
    3f04:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	681b      	ldr	r3, [r3, #0]
    3f0a:	2107      	movs	r1, #7
    3f0c:	4618      	mov	r0, r3
    3f0e:	4b40      	ldr	r3, [pc, #256]	; (4010 <_can_async_init+0x1a4>)
    3f10:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	681b      	ldr	r3, [r3, #0]
    3f16:	2107      	movs	r1, #7
    3f18:	4618      	mov	r0, r3
    3f1a:	4b3e      	ldr	r3, [pc, #248]	; (4014 <_can_async_init+0x1a8>)
    3f1c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	681a      	ldr	r2, [r3, #0]
    3f22:	4b3d      	ldr	r3, [pc, #244]	; (4018 <_can_async_init+0x1ac>)
    3f24:	b29b      	uxth	r3, r3
    3f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3f2a:	4619      	mov	r1, r3
    3f2c:	4610      	mov	r0, r2
    3f2e:	4b3b      	ldr	r3, [pc, #236]	; (401c <_can_async_init+0x1b0>)
    3f30:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	681a      	ldr	r2, [r3, #0]
    3f36:	4b3a      	ldr	r3, [pc, #232]	; (4020 <_can_async_init+0x1b4>)
    3f38:	b29b      	uxth	r3, r3
    3f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f3e:	4619      	mov	r1, r3
    3f40:	4610      	mov	r0, r2
    3f42:	4b38      	ldr	r3, [pc, #224]	; (4024 <_can_async_init+0x1b8>)
    3f44:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	681b      	ldr	r3, [r3, #0]
    3f4a:	2108      	movs	r1, #8
    3f4c:	4618      	mov	r0, r3
    3f4e:	4b36      	ldr	r3, [pc, #216]	; (4028 <_can_async_init+0x1bc>)
    3f50:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	681a      	ldr	r2, [r3, #0]
    3f56:	4b35      	ldr	r3, [pc, #212]	; (402c <_can_async_init+0x1c0>)
    3f58:	b29b      	uxth	r3, r3
    3f5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3f5e:	4619      	mov	r1, r3
    3f60:	4610      	mov	r0, r2
    3f62:	4b33      	ldr	r3, [pc, #204]	; (4030 <_can_async_init+0x1c4>)
    3f64:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	681a      	ldr	r2, [r3, #0]
    3f6a:	4b32      	ldr	r3, [pc, #200]	; (4034 <_can_async_init+0x1c8>)
    3f6c:	b29b      	uxth	r3, r3
    3f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f72:	4619      	mov	r1, r3
    3f74:	4610      	mov	r0, r2
    3f76:	4b30      	ldr	r3, [pc, #192]	; (4038 <_can_async_init+0x1cc>)
    3f78:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3f7a:	687b      	ldr	r3, [r7, #4]
    3f7c:	681b      	ldr	r3, [r3, #0]
    3f7e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3f82:	4618      	mov	r0, r3
    3f84:	4b2d      	ldr	r3, [pc, #180]	; (403c <_can_async_init+0x1d0>)
    3f86:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3f88:	204f      	movs	r0, #79	; 0x4f
    3f8a:	4b2d      	ldr	r3, [pc, #180]	; (4040 <_can_async_init+0x1d4>)
    3f8c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3f8e:	204f      	movs	r0, #79	; 0x4f
    3f90:	4b2c      	ldr	r3, [pc, #176]	; (4044 <_can_async_init+0x1d8>)
    3f92:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3f94:	204f      	movs	r0, #79	; 0x4f
    3f96:	4b2c      	ldr	r3, [pc, #176]	; (4048 <_can_async_init+0x1dc>)
    3f98:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	681b      	ldr	r3, [r3, #0]
    3f9e:	2101      	movs	r1, #1
    3fa0:	4618      	mov	r0, r3
    3fa2:	4b2a      	ldr	r3, [pc, #168]	; (404c <_can_async_init+0x1e0>)
    3fa4:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	681b      	ldr	r3, [r3, #0]
    3faa:	4618      	mov	r0, r3
    3fac:	4b28      	ldr	r3, [pc, #160]	; (4050 <_can_async_init+0x1e4>)
    3fae:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3fb0:	687b      	ldr	r3, [r7, #4]
    3fb2:	681b      	ldr	r3, [r3, #0]
    3fb4:	4618      	mov	r0, r3
    3fb6:	4b27      	ldr	r3, [pc, #156]	; (4054 <_can_async_init+0x1e8>)
    3fb8:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3fba:	bf00      	nop
    3fbc:	687b      	ldr	r3, [r7, #4]
    3fbe:	681b      	ldr	r3, [r3, #0]
    3fc0:	4618      	mov	r0, r3
    3fc2:	4b06      	ldr	r3, [pc, #24]	; (3fdc <_can_async_init+0x170>)
    3fc4:	4798      	blx	r3
    3fc6:	4603      	mov	r3, r0
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d1f7      	bne.n	3fbc <_can_async_init+0x150>
	};

	return ERR_NONE;
    3fcc:	2300      	movs	r3, #0
}
    3fce:	4618      	mov	r0, r3
    3fd0:	3708      	adds	r7, #8
    3fd2:	46bd      	mov	sp, r7
    3fd4:	bd80      	pop	{r7, pc}
    3fd6:	bf00      	nop
    3fd8:	00003c21 	.word	0x00003c21
    3fdc:	00003c41 	.word	0x00003c41
    3fe0:	00003c8f 	.word	0x00003c8f
    3fe4:	42000400 	.word	0x42000400
    3fe8:	200006d0 	.word	0x200006d0
    3fec:	20000004 	.word	0x20000004
    3ff0:	00003ccf 	.word	0x00003ccf
    3ff4:	00003be9 	.word	0x00003be9
    3ff8:	00010c01 	.word	0x00010c01
    3ffc:	00003cf1 	.word	0x00003cf1
    4000:	00010c10 	.word	0x00010c10
    4004:	00003c05 	.word	0x00003c05
    4008:	20001010 	.word	0x20001010
    400c:	00003dd5 	.word	0x00003dd5
    4010:	00003df3 	.word	0x00003df3
    4014:	00003e2f 	.word	0x00003e2f
    4018:	20000fc8 	.word	0x20000fc8
    401c:	00003e11 	.word	0x00003e11
    4020:	20000630 	.word	0x20000630
    4024:	00003e4d 	.word	0x00003e4d
    4028:	00003d5d 	.word	0x00003d5d
    402c:	20000640 	.word	0x20000640
    4030:	00003d7b 	.word	0x00003d7b
    4034:	200006c0 	.word	0x200006c0
    4038:	00003d99 	.word	0x00003d99
    403c:	00003db7 	.word	0x00003db7
    4040:	00003b41 	.word	0x00003b41
    4044:	00003b85 	.word	0x00003b85
    4048:	00003b05 	.word	0x00003b05
    404c:	00003d41 	.word	0x00003d41
    4050:	00003caf 	.word	0x00003caf
    4054:	00003c6f 	.word	0x00003c6f

00004058 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    4058:	b590      	push	{r4, r7, lr}
    405a:	b083      	sub	sp, #12
    405c:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    405e:	4b2c      	ldr	r3, [pc, #176]	; (4110 <CAN1_Handler+0xb8>)
    4060:	681b      	ldr	r3, [r3, #0]
    4062:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4064:	687b      	ldr	r3, [r7, #4]
    4066:	681b      	ldr	r3, [r3, #0]
    4068:	4618      	mov	r0, r3
    406a:	4b2a      	ldr	r3, [pc, #168]	; (4114 <CAN1_Handler+0xbc>)
    406c:	4798      	blx	r3
    406e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4070:	683b      	ldr	r3, [r7, #0]
    4072:	f003 0301 	and.w	r3, r3, #1
    4076:	2b00      	cmp	r3, #0
    4078:	d003      	beq.n	4082 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    407a:	687b      	ldr	r3, [r7, #4]
    407c:	689b      	ldr	r3, [r3, #8]
    407e:	6878      	ldr	r0, [r7, #4]
    4080:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    4082:	683b      	ldr	r3, [r7, #0]
    4084:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4088:	2b00      	cmp	r3, #0
    408a:	d003      	beq.n	4094 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	685b      	ldr	r3, [r3, #4]
    4090:	6878      	ldr	r0, [r7, #4]
    4092:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4094:	683b      	ldr	r3, [r7, #0]
    4096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    409a:	2b00      	cmp	r3, #0
    409c:	d004      	beq.n	40a8 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	68db      	ldr	r3, [r3, #12]
    40a2:	2103      	movs	r1, #3
    40a4:	6878      	ldr	r0, [r7, #4]
    40a6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    40a8:	683b      	ldr	r3, [r7, #0]
    40aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    40ae:	2b00      	cmp	r3, #0
    40b0:	d004      	beq.n	40bc <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	68db      	ldr	r3, [r3, #12]
    40b6:	2100      	movs	r1, #0
    40b8:	6878      	ldr	r0, [r7, #4]
    40ba:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    40bc:	683b      	ldr	r3, [r7, #0]
    40be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    40c2:	2b00      	cmp	r3, #0
    40c4:	d00f      	beq.n	40e6 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	68dc      	ldr	r4, [r3, #12]
    40ca:	687b      	ldr	r3, [r7, #4]
    40cc:	681b      	ldr	r3, [r3, #0]
    40ce:	4618      	mov	r0, r3
    40d0:	4b11      	ldr	r3, [pc, #68]	; (4118 <CAN1_Handler+0xc0>)
    40d2:	4798      	blx	r3
    40d4:	4603      	mov	r3, r0
    40d6:	2b00      	cmp	r3, #0
    40d8:	d001      	beq.n	40de <CAN1_Handler+0x86>
    40da:	2302      	movs	r3, #2
    40dc:	e000      	b.n	40e0 <CAN1_Handler+0x88>
    40de:	2301      	movs	r3, #1
    40e0:	4619      	mov	r1, r3
    40e2:	6878      	ldr	r0, [r7, #4]
    40e4:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    40e6:	683b      	ldr	r3, [r7, #0]
    40e8:	f003 0308 	and.w	r3, r3, #8
    40ec:	2b00      	cmp	r3, #0
    40ee:	d004      	beq.n	40fa <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	68db      	ldr	r3, [r3, #12]
    40f4:	2104      	movs	r1, #4
    40f6:	6878      	ldr	r0, [r7, #4]
    40f8:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	681b      	ldr	r3, [r3, #0]
    40fe:	6839      	ldr	r1, [r7, #0]
    4100:	4618      	mov	r0, r3
    4102:	4b06      	ldr	r3, [pc, #24]	; (411c <CAN1_Handler+0xc4>)
    4104:	4798      	blx	r3
}
    4106:	bf00      	nop
    4108:	370c      	adds	r7, #12
    410a:	46bd      	mov	sp, r7
    410c:	bd90      	pop	{r4, r7, pc}
    410e:	bf00      	nop
    4110:	200006d0 	.word	0x200006d0
    4114:	00003d29 	.word	0x00003d29
    4118:	00003bc1 	.word	0x00003bc1
    411c:	00003d0d 	.word	0x00003d0d

00004120 <__NVIC_SetPendingIRQ>:
{
    4120:	b480      	push	{r7}
    4122:	b083      	sub	sp, #12
    4124:	af00      	add	r7, sp, #0
    4126:	4603      	mov	r3, r0
    4128:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    412a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    412e:	2b00      	cmp	r3, #0
    4130:	db0c      	blt.n	414c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4132:	4909      	ldr	r1, [pc, #36]	; (4158 <__NVIC_SetPendingIRQ+0x38>)
    4134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4138:	095b      	lsrs	r3, r3, #5
    413a:	88fa      	ldrh	r2, [r7, #6]
    413c:	f002 021f 	and.w	r2, r2, #31
    4140:	2001      	movs	r0, #1
    4142:	fa00 f202 	lsl.w	r2, r0, r2
    4146:	3340      	adds	r3, #64	; 0x40
    4148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    414c:	bf00      	nop
    414e:	370c      	adds	r7, #12
    4150:	46bd      	mov	sp, r7
    4152:	f85d 7b04 	ldr.w	r7, [sp], #4
    4156:	4770      	bx	lr
    4158:	e000e100 	.word	0xe000e100

0000415c <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    415c:	b580      	push	{r7, lr}
    415e:	b082      	sub	sp, #8
    4160:	af00      	add	r7, sp, #0
    4162:	4603      	mov	r3, r0
    4164:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    4166:	79fb      	ldrb	r3, [r7, #7]
    4168:	b21b      	sxth	r3, r3
    416a:	4618      	mov	r0, r3
    416c:	4b02      	ldr	r3, [pc, #8]	; (4178 <_irq_set+0x1c>)
    416e:	4798      	blx	r3
}
    4170:	bf00      	nop
    4172:	3708      	adds	r7, #8
    4174:	46bd      	mov	sp, r7
    4176:	bd80      	pop	{r7, pc}
    4178:	00004121 	.word	0x00004121

0000417c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    417c:	b480      	push	{r7}
    417e:	b083      	sub	sp, #12
    4180:	af00      	add	r7, sp, #0
    4182:	4603      	mov	r3, r0
    4184:	6039      	str	r1, [r7, #0]
    4186:	80fb      	strh	r3, [r7, #6]
    4188:	4613      	mov	r3, r2
    418a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    418c:	797b      	ldrb	r3, [r7, #5]
    418e:	3b04      	subs	r3, #4
    4190:	2b05      	cmp	r3, #5
    4192:	d86b      	bhi.n	426c <_get_cycles_for_us_internal+0xf0>
    4194:	a201      	add	r2, pc, #4	; (adr r2, 419c <_get_cycles_for_us_internal+0x20>)
    4196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    419a:	bf00      	nop
    419c:	0000424b 	.word	0x0000424b
    41a0:	0000422b 	.word	0x0000422b
    41a4:	0000420d 	.word	0x0000420d
    41a8:	000041ef 	.word	0x000041ef
    41ac:	000041d1 	.word	0x000041d1
    41b0:	000041b5 	.word	0x000041b5
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    41b4:	88fb      	ldrh	r3, [r7, #6]
    41b6:	683a      	ldr	r2, [r7, #0]
    41b8:	4935      	ldr	r1, [pc, #212]	; (4290 <_get_cycles_for_us_internal+0x114>)
    41ba:	fba1 1202 	umull	r1, r2, r1, r2
    41be:	0c92      	lsrs	r2, r2, #18
    41c0:	fb02 f303 	mul.w	r3, r2, r3
    41c4:	3302      	adds	r3, #2
    41c6:	4a33      	ldr	r2, [pc, #204]	; (4294 <_get_cycles_for_us_internal+0x118>)
    41c8:	fba2 2303 	umull	r2, r3, r2, r3
    41cc:	085b      	lsrs	r3, r3, #1
    41ce:	e059      	b.n	4284 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    41d0:	88fb      	ldrh	r3, [r7, #6]
    41d2:	683a      	ldr	r2, [r7, #0]
    41d4:	0952      	lsrs	r2, r2, #5
    41d6:	4930      	ldr	r1, [pc, #192]	; (4298 <_get_cycles_for_us_internal+0x11c>)
    41d8:	fba1 1202 	umull	r1, r2, r1, r2
    41dc:	09d2      	lsrs	r2, r2, #7
    41de:	fb02 f303 	mul.w	r3, r2, r3
    41e2:	331d      	adds	r3, #29
    41e4:	4a2d      	ldr	r2, [pc, #180]	; (429c <_get_cycles_for_us_internal+0x120>)
    41e6:	fba2 2303 	umull	r2, r3, r2, r3
    41ea:	091b      	lsrs	r3, r3, #4
    41ec:	e04a      	b.n	4284 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    41ee:	88fb      	ldrh	r3, [r7, #6]
    41f0:	683a      	ldr	r2, [r7, #0]
    41f2:	492b      	ldr	r1, [pc, #172]	; (42a0 <_get_cycles_for_us_internal+0x124>)
    41f4:	fba1 1202 	umull	r1, r2, r1, r2
    41f8:	0b52      	lsrs	r2, r2, #13
    41fa:	fb02 f303 	mul.w	r3, r2, r3
    41fe:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4202:	4a28      	ldr	r2, [pc, #160]	; (42a4 <_get_cycles_for_us_internal+0x128>)
    4204:	fba2 2303 	umull	r2, r3, r2, r3
    4208:	095b      	lsrs	r3, r3, #5
    420a:	e03b      	b.n	4284 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    420c:	88fb      	ldrh	r3, [r7, #6]
    420e:	683a      	ldr	r2, [r7, #0]
    4210:	4925      	ldr	r1, [pc, #148]	; (42a8 <_get_cycles_for_us_internal+0x12c>)
    4212:	fba1 1202 	umull	r1, r2, r1, r2
    4216:	0992      	lsrs	r2, r2, #6
    4218:	fb02 f303 	mul.w	r3, r2, r3
    421c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4220:	4a22      	ldr	r2, [pc, #136]	; (42ac <_get_cycles_for_us_internal+0x130>)
    4222:	fba2 2303 	umull	r2, r3, r2, r3
    4226:	099b      	lsrs	r3, r3, #6
    4228:	e02c      	b.n	4284 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    422a:	88fb      	ldrh	r3, [r7, #6]
    422c:	683a      	ldr	r2, [r7, #0]
    422e:	4920      	ldr	r1, [pc, #128]	; (42b0 <_get_cycles_for_us_internal+0x134>)
    4230:	fba1 1202 	umull	r1, r2, r1, r2
    4234:	0952      	lsrs	r2, r2, #5
    4236:	fb02 f303 	mul.w	r3, r2, r3
    423a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    423e:	332f      	adds	r3, #47	; 0x2f
    4240:	4a1c      	ldr	r2, [pc, #112]	; (42b4 <_get_cycles_for_us_internal+0x138>)
    4242:	fba2 2303 	umull	r2, r3, r2, r3
    4246:	0b5b      	lsrs	r3, r3, #13
    4248:	e01c      	b.n	4284 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    424a:	88fb      	ldrh	r3, [r7, #6]
    424c:	683a      	ldr	r2, [r7, #0]
    424e:	491a      	ldr	r1, [pc, #104]	; (42b8 <_get_cycles_for_us_internal+0x13c>)
    4250:	fba1 1202 	umull	r1, r2, r1, r2
    4254:	08d2      	lsrs	r2, r2, #3
    4256:	fb02 f303 	mul.w	r3, r2, r3
    425a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    425e:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4262:	4a16      	ldr	r2, [pc, #88]	; (42bc <_get_cycles_for_us_internal+0x140>)
    4264:	fba2 2303 	umull	r2, r3, r2, r3
    4268:	0c5b      	lsrs	r3, r3, #17
    426a:	e00b      	b.n	4284 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    426c:	88fb      	ldrh	r3, [r7, #6]
    426e:	683a      	ldr	r2, [r7, #0]
    4270:	fb02 f303 	mul.w	r3, r2, r3
    4274:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4278:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    427c:	4a10      	ldr	r2, [pc, #64]	; (42c0 <_get_cycles_for_us_internal+0x144>)
    427e:	fba2 2303 	umull	r2, r3, r2, r3
    4282:	0c9b      	lsrs	r3, r3, #18
	}
}
    4284:	4618      	mov	r0, r3
    4286:	370c      	adds	r7, #12
    4288:	46bd      	mov	sp, r7
    428a:	f85d 7b04 	ldr.w	r7, [sp], #4
    428e:	4770      	bx	lr
    4290:	431bde83 	.word	0x431bde83
    4294:	aaaaaaab 	.word	0xaaaaaaab
    4298:	0a7c5ac5 	.word	0x0a7c5ac5
    429c:	88888889 	.word	0x88888889
    42a0:	d1b71759 	.word	0xd1b71759
    42a4:	1b4e81b5 	.word	0x1b4e81b5
    42a8:	10624dd3 	.word	0x10624dd3
    42ac:	057619f1 	.word	0x057619f1
    42b0:	51eb851f 	.word	0x51eb851f
    42b4:	45e7b273 	.word	0x45e7b273
    42b8:	cccccccd 	.word	0xcccccccd
    42bc:	6fd91d85 	.word	0x6fd91d85
    42c0:	165e9f81 	.word	0x165e9f81

000042c4 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    42c4:	b580      	push	{r7, lr}
    42c6:	b082      	sub	sp, #8
    42c8:	af00      	add	r7, sp, #0
    42ca:	4603      	mov	r3, r0
    42cc:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    42ce:	88fb      	ldrh	r3, [r7, #6]
    42d0:	2209      	movs	r2, #9
    42d2:	4904      	ldr	r1, [pc, #16]	; (42e4 <_get_cycles_for_us+0x20>)
    42d4:	4618      	mov	r0, r3
    42d6:	4b04      	ldr	r3, [pc, #16]	; (42e8 <_get_cycles_for_us+0x24>)
    42d8:	4798      	blx	r3
    42da:	4603      	mov	r3, r0
}
    42dc:	4618      	mov	r0, r3
    42de:	3708      	adds	r7, #8
    42e0:	46bd      	mov	sp, r7
    42e2:	bd80      	pop	{r7, pc}
    42e4:	07270e00 	.word	0x07270e00
    42e8:	0000417d 	.word	0x0000417d

000042ec <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    42ec:	b480      	push	{r7}
    42ee:	b083      	sub	sp, #12
    42f0:	af00      	add	r7, sp, #0
    42f2:	4603      	mov	r3, r0
    42f4:	6039      	str	r1, [r7, #0]
    42f6:	80fb      	strh	r3, [r7, #6]
    42f8:	4613      	mov	r3, r2
    42fa:	717b      	strb	r3, [r7, #5]
	switch (power) {
    42fc:	797b      	ldrb	r3, [r7, #5]
    42fe:	3b04      	subs	r3, #4
    4300:	2b05      	cmp	r3, #5
    4302:	d870      	bhi.n	43e6 <_get_cycles_for_ms_internal+0xfa>
    4304:	a201      	add	r2, pc, #4	; (adr r2, 430c <_get_cycles_for_ms_internal+0x20>)
    4306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    430a:	bf00      	nop
    430c:	000043c9 	.word	0x000043c9
    4310:	000043ad 	.word	0x000043ad
    4314:	00004391 	.word	0x00004391
    4318:	0000436d 	.word	0x0000436d
    431c:	00004349 	.word	0x00004349
    4320:	00004325 	.word	0x00004325
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4324:	88fb      	ldrh	r3, [r7, #6]
    4326:	683a      	ldr	r2, [r7, #0]
    4328:	4937      	ldr	r1, [pc, #220]	; (4408 <_get_cycles_for_ms_internal+0x11c>)
    432a:	fba1 1202 	umull	r1, r2, r1, r2
    432e:	0c92      	lsrs	r2, r2, #18
    4330:	fb02 f303 	mul.w	r3, r2, r3
    4334:	3302      	adds	r3, #2
    4336:	4a35      	ldr	r2, [pc, #212]	; (440c <_get_cycles_for_ms_internal+0x120>)
    4338:	fba2 2303 	umull	r2, r3, r2, r3
    433c:	085b      	lsrs	r3, r3, #1
    433e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4342:	fb02 f303 	mul.w	r3, r2, r3
    4346:	e058      	b.n	43fa <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4348:	88fb      	ldrh	r3, [r7, #6]
    434a:	683a      	ldr	r2, [r7, #0]
    434c:	0952      	lsrs	r2, r2, #5
    434e:	4930      	ldr	r1, [pc, #192]	; (4410 <_get_cycles_for_ms_internal+0x124>)
    4350:	fba1 1202 	umull	r1, r2, r1, r2
    4354:	09d2      	lsrs	r2, r2, #7
    4356:	fb02 f303 	mul.w	r3, r2, r3
    435a:	3302      	adds	r3, #2
    435c:	4a2b      	ldr	r2, [pc, #172]	; (440c <_get_cycles_for_ms_internal+0x120>)
    435e:	fba2 2303 	umull	r2, r3, r2, r3
    4362:	085b      	lsrs	r3, r3, #1
    4364:	2264      	movs	r2, #100	; 0x64
    4366:	fb02 f303 	mul.w	r3, r2, r3
    436a:	e046      	b.n	43fa <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    436c:	88fb      	ldrh	r3, [r7, #6]
    436e:	683a      	ldr	r2, [r7, #0]
    4370:	4928      	ldr	r1, [pc, #160]	; (4414 <_get_cycles_for_ms_internal+0x128>)
    4372:	fba1 1202 	umull	r1, r2, r1, r2
    4376:	0b52      	lsrs	r2, r2, #13
    4378:	fb02 f303 	mul.w	r3, r2, r3
    437c:	3302      	adds	r3, #2
    437e:	4a23      	ldr	r2, [pc, #140]	; (440c <_get_cycles_for_ms_internal+0x120>)
    4380:	fba2 2303 	umull	r2, r3, r2, r3
    4384:	085a      	lsrs	r2, r3, #1
    4386:	4613      	mov	r3, r2
    4388:	009b      	lsls	r3, r3, #2
    438a:	4413      	add	r3, r2
    438c:	005b      	lsls	r3, r3, #1
    438e:	e034      	b.n	43fa <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4390:	88fb      	ldrh	r3, [r7, #6]
    4392:	683a      	ldr	r2, [r7, #0]
    4394:	4920      	ldr	r1, [pc, #128]	; (4418 <_get_cycles_for_ms_internal+0x12c>)
    4396:	fba1 1202 	umull	r1, r2, r1, r2
    439a:	0992      	lsrs	r2, r2, #6
    439c:	fb02 f303 	mul.w	r3, r2, r3
    43a0:	3302      	adds	r3, #2
    43a2:	4a1a      	ldr	r2, [pc, #104]	; (440c <_get_cycles_for_ms_internal+0x120>)
    43a4:	fba2 2303 	umull	r2, r3, r2, r3
    43a8:	085b      	lsrs	r3, r3, #1
    43aa:	e026      	b.n	43fa <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    43ac:	88fb      	ldrh	r3, [r7, #6]
    43ae:	683a      	ldr	r2, [r7, #0]
    43b0:	491a      	ldr	r1, [pc, #104]	; (441c <_get_cycles_for_ms_internal+0x130>)
    43b2:	fba1 1202 	umull	r1, r2, r1, r2
    43b6:	0952      	lsrs	r2, r2, #5
    43b8:	fb02 f303 	mul.w	r3, r2, r3
    43bc:	331d      	adds	r3, #29
    43be:	4a18      	ldr	r2, [pc, #96]	; (4420 <_get_cycles_for_ms_internal+0x134>)
    43c0:	fba2 2303 	umull	r2, r3, r2, r3
    43c4:	091b      	lsrs	r3, r3, #4
    43c6:	e018      	b.n	43fa <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    43c8:	88fb      	ldrh	r3, [r7, #6]
    43ca:	683a      	ldr	r2, [r7, #0]
    43cc:	4915      	ldr	r1, [pc, #84]	; (4424 <_get_cycles_for_ms_internal+0x138>)
    43ce:	fba1 1202 	umull	r1, r2, r1, r2
    43d2:	08d2      	lsrs	r2, r2, #3
    43d4:	fb02 f303 	mul.w	r3, r2, r3
    43d8:	f203 132b 	addw	r3, r3, #299	; 0x12b
    43dc:	4a12      	ldr	r2, [pc, #72]	; (4428 <_get_cycles_for_ms_internal+0x13c>)
    43de:	fba2 2303 	umull	r2, r3, r2, r3
    43e2:	095b      	lsrs	r3, r3, #5
    43e4:	e009      	b.n	43fa <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    43e6:	88fb      	ldrh	r3, [r7, #6]
    43e8:	683a      	ldr	r2, [r7, #0]
    43ea:	fb02 f303 	mul.w	r3, r2, r3
    43ee:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    43f2:	4a0e      	ldr	r2, [pc, #56]	; (442c <_get_cycles_for_ms_internal+0x140>)
    43f4:	fba2 2303 	umull	r2, r3, r2, r3
    43f8:	099b      	lsrs	r3, r3, #6
	}
}
    43fa:	4618      	mov	r0, r3
    43fc:	370c      	adds	r7, #12
    43fe:	46bd      	mov	sp, r7
    4400:	f85d 7b04 	ldr.w	r7, [sp], #4
    4404:	4770      	bx	lr
    4406:	bf00      	nop
    4408:	431bde83 	.word	0x431bde83
    440c:	aaaaaaab 	.word	0xaaaaaaab
    4410:	0a7c5ac5 	.word	0x0a7c5ac5
    4414:	d1b71759 	.word	0xd1b71759
    4418:	10624dd3 	.word	0x10624dd3
    441c:	51eb851f 	.word	0x51eb851f
    4420:	88888889 	.word	0x88888889
    4424:	cccccccd 	.word	0xcccccccd
    4428:	1b4e81b5 	.word	0x1b4e81b5
    442c:	057619f1 	.word	0x057619f1

00004430 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4430:	b580      	push	{r7, lr}
    4432:	b082      	sub	sp, #8
    4434:	af00      	add	r7, sp, #0
    4436:	4603      	mov	r3, r0
    4438:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    443a:	88fb      	ldrh	r3, [r7, #6]
    443c:	2209      	movs	r2, #9
    443e:	4904      	ldr	r1, [pc, #16]	; (4450 <_get_cycles_for_ms+0x20>)
    4440:	4618      	mov	r0, r3
    4442:	4b04      	ldr	r3, [pc, #16]	; (4454 <_get_cycles_for_ms+0x24>)
    4444:	4798      	blx	r3
    4446:	4603      	mov	r3, r0
}
    4448:	4618      	mov	r0, r3
    444a:	3708      	adds	r7, #8
    444c:	46bd      	mov	sp, r7
    444e:	bd80      	pop	{r7, pc}
    4450:	07270e00 	.word	0x07270e00
    4454:	000042ed 	.word	0x000042ed

00004458 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4458:	b480      	push	{r7}
    445a:	b083      	sub	sp, #12
    445c:	af00      	add	r7, sp, #0
    445e:	6078      	str	r0, [r7, #4]
    4460:	6039      	str	r1, [r7, #0]
    4462:	bf00      	nop
    4464:	f3af 8000 	nop.w

00004468 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4468:	3901      	subs	r1, #1
    446a:	d8fd      	bhi.n	4468 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    446c:	bf00      	nop
    446e:	370c      	adds	r7, #12
    4470:	46bd      	mov	sp, r7
    4472:	f85d 7b04 	ldr.w	r7, [sp], #4
    4476:	4770      	bx	lr

00004478 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4478:	b480      	push	{r7}
    447a:	b083      	sub	sp, #12
    447c:	af00      	add	r7, sp, #0
    447e:	6078      	str	r0, [r7, #4]
    4480:	460b      	mov	r3, r1
    4482:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4484:	687b      	ldr	r3, [r7, #4]
    4486:	881b      	ldrh	r3, [r3, #0]
    4488:	b29a      	uxth	r2, r3
    448a:	887b      	ldrh	r3, [r7, #2]
    448c:	021b      	lsls	r3, r3, #8
    448e:	b29b      	uxth	r3, r3
    4490:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4494:	b29b      	uxth	r3, r3
    4496:	4313      	orrs	r3, r2
    4498:	b29a      	uxth	r2, r3
    449a:	687b      	ldr	r3, [r7, #4]
    449c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    449e:	bf00      	nop
    44a0:	370c      	adds	r7, #12
    44a2:	46bd      	mov	sp, r7
    44a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    44a8:	4770      	bx	lr

000044aa <hri_port_set_EVCTRL_reg>:
{
    44aa:	b480      	push	{r7}
    44ac:	b085      	sub	sp, #20
    44ae:	af00      	add	r7, sp, #0
    44b0:	60f8      	str	r0, [r7, #12]
    44b2:	460b      	mov	r3, r1
    44b4:	607a      	str	r2, [r7, #4]
    44b6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    44b8:	7afb      	ldrb	r3, [r7, #11]
    44ba:	7afa      	ldrb	r2, [r7, #11]
    44bc:	68f9      	ldr	r1, [r7, #12]
    44be:	01d2      	lsls	r2, r2, #7
    44c0:	440a      	add	r2, r1
    44c2:	322c      	adds	r2, #44	; 0x2c
    44c4:	6811      	ldr	r1, [r2, #0]
    44c6:	687a      	ldr	r2, [r7, #4]
    44c8:	430a      	orrs	r2, r1
    44ca:	68f9      	ldr	r1, [r7, #12]
    44cc:	01db      	lsls	r3, r3, #7
    44ce:	440b      	add	r3, r1
    44d0:	332c      	adds	r3, #44	; 0x2c
    44d2:	601a      	str	r2, [r3, #0]
}
    44d4:	bf00      	nop
    44d6:	3714      	adds	r7, #20
    44d8:	46bd      	mov	sp, r7
    44da:	f85d 7b04 	ldr.w	r7, [sp], #4
    44de:	4770      	bx	lr

000044e0 <_port_event_init>:

static inline void _port_event_init()
{
    44e0:	b580      	push	{r7, lr}
    44e2:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    44e4:	2200      	movs	r2, #0
    44e6:	2100      	movs	r1, #0
    44e8:	4809      	ldr	r0, [pc, #36]	; (4510 <_port_event_init+0x30>)
    44ea:	4b0a      	ldr	r3, [pc, #40]	; (4514 <_port_event_init+0x34>)
    44ec:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    44ee:	2200      	movs	r2, #0
    44f0:	2101      	movs	r1, #1
    44f2:	4807      	ldr	r0, [pc, #28]	; (4510 <_port_event_init+0x30>)
    44f4:	4b07      	ldr	r3, [pc, #28]	; (4514 <_port_event_init+0x34>)
    44f6:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    44f8:	22ef      	movs	r2, #239	; 0xef
    44fa:	2102      	movs	r1, #2
    44fc:	4804      	ldr	r0, [pc, #16]	; (4510 <_port_event_init+0x30>)
    44fe:	4b05      	ldr	r3, [pc, #20]	; (4514 <_port_event_init+0x34>)
    4500:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4502:	2200      	movs	r2, #0
    4504:	2103      	movs	r1, #3
    4506:	4802      	ldr	r0, [pc, #8]	; (4510 <_port_event_init+0x30>)
    4508:	4b02      	ldr	r3, [pc, #8]	; (4514 <_port_event_init+0x34>)
    450a:	4798      	blx	r3
}
    450c:	bf00      	nop
    450e:	bd80      	pop	{r7, pc}
    4510:	41008000 	.word	0x41008000
    4514:	000044ab 	.word	0x000044ab

00004518 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4518:	b580      	push	{r7, lr}
    451a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    451c:	2104      	movs	r1, #4
    451e:	480b      	ldr	r0, [pc, #44]	; (454c <_init_chip+0x34>)
    4520:	4b0b      	ldr	r3, [pc, #44]	; (4550 <_init_chip+0x38>)
    4522:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4524:	4b0b      	ldr	r3, [pc, #44]	; (4554 <_init_chip+0x3c>)
    4526:	4798      	blx	r3
	_oscctrl_init_sources();
    4528:	4b0b      	ldr	r3, [pc, #44]	; (4558 <_init_chip+0x40>)
    452a:	4798      	blx	r3
	_mclk_init();
    452c:	4b0b      	ldr	r3, [pc, #44]	; (455c <_init_chip+0x44>)
    452e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4530:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4534:	4b0a      	ldr	r3, [pc, #40]	; (4560 <_init_chip+0x48>)
    4536:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4538:	4b0a      	ldr	r3, [pc, #40]	; (4564 <_init_chip+0x4c>)
    453a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    453c:	f640 30df 	movw	r0, #3039	; 0xbdf
    4540:	4b07      	ldr	r3, [pc, #28]	; (4560 <_init_chip+0x48>)
    4542:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4544:	4b08      	ldr	r3, [pc, #32]	; (4568 <_init_chip+0x50>)
    4546:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4548:	bf00      	nop
    454a:	bd80      	pop	{r7, pc}
    454c:	41004000 	.word	0x41004000
    4550:	00004479 	.word	0x00004479
    4554:	00004ea1 	.word	0x00004ea1
    4558:	00005369 	.word	0x00005369
    455c:	00004dc1 	.word	0x00004dc1
    4560:	00004c81 	.word	0x00004c81
    4564:	000053a9 	.word	0x000053a9
    4568:	000044e1 	.word	0x000044e1

0000456c <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    456c:	b480      	push	{r7}
    456e:	b083      	sub	sp, #12
    4570:	af00      	add	r7, sp, #0
    4572:	6078      	str	r0, [r7, #4]
    4574:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4576:	687b      	ldr	r3, [r7, #4]
    4578:	683a      	ldr	r2, [r7, #0]
    457a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    457c:	2300      	movs	r3, #0
}
    457e:	4618      	mov	r0, r3
    4580:	370c      	adds	r7, #12
    4582:	46bd      	mov	sp, r7
    4584:	f85d 7b04 	ldr.w	r7, [sp], #4
    4588:	4770      	bx	lr
	...

0000458c <__NVIC_EnableIRQ>:
{
    458c:	b480      	push	{r7}
    458e:	b083      	sub	sp, #12
    4590:	af00      	add	r7, sp, #0
    4592:	4603      	mov	r3, r0
    4594:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    459a:	2b00      	cmp	r3, #0
    459c:	db0b      	blt.n	45b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    459e:	4909      	ldr	r1, [pc, #36]	; (45c4 <__NVIC_EnableIRQ+0x38>)
    45a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45a4:	095b      	lsrs	r3, r3, #5
    45a6:	88fa      	ldrh	r2, [r7, #6]
    45a8:	f002 021f 	and.w	r2, r2, #31
    45ac:	2001      	movs	r0, #1
    45ae:	fa00 f202 	lsl.w	r2, r0, r2
    45b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    45b6:	bf00      	nop
    45b8:	370c      	adds	r7, #12
    45ba:	46bd      	mov	sp, r7
    45bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    45c0:	4770      	bx	lr
    45c2:	bf00      	nop
    45c4:	e000e100 	.word	0xe000e100

000045c8 <__NVIC_DisableIRQ>:
{
    45c8:	b480      	push	{r7}
    45ca:	b083      	sub	sp, #12
    45cc:	af00      	add	r7, sp, #0
    45ce:	4603      	mov	r3, r0
    45d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    45d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45d6:	2b00      	cmp	r3, #0
    45d8:	db10      	blt.n	45fc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45da:	490b      	ldr	r1, [pc, #44]	; (4608 <__NVIC_DisableIRQ+0x40>)
    45dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45e0:	095b      	lsrs	r3, r3, #5
    45e2:	88fa      	ldrh	r2, [r7, #6]
    45e4:	f002 021f 	and.w	r2, r2, #31
    45e8:	2001      	movs	r0, #1
    45ea:	fa00 f202 	lsl.w	r2, r0, r2
    45ee:	3320      	adds	r3, #32
    45f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    45f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    45f8:	f3bf 8f6f 	isb	sy
}
    45fc:	bf00      	nop
    45fe:	370c      	adds	r7, #12
    4600:	46bd      	mov	sp, r7
    4602:	f85d 7b04 	ldr.w	r7, [sp], #4
    4606:	4770      	bx	lr
    4608:	e000e100 	.word	0xe000e100

0000460c <__NVIC_ClearPendingIRQ>:
{
    460c:	b480      	push	{r7}
    460e:	b083      	sub	sp, #12
    4610:	af00      	add	r7, sp, #0
    4612:	4603      	mov	r3, r0
    4614:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    461a:	2b00      	cmp	r3, #0
    461c:	db0c      	blt.n	4638 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    461e:	4909      	ldr	r1, [pc, #36]	; (4644 <__NVIC_ClearPendingIRQ+0x38>)
    4620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4624:	095b      	lsrs	r3, r3, #5
    4626:	88fa      	ldrh	r2, [r7, #6]
    4628:	f002 021f 	and.w	r2, r2, #31
    462c:	2001      	movs	r0, #1
    462e:	fa00 f202 	lsl.w	r2, r0, r2
    4632:	3360      	adds	r3, #96	; 0x60
    4634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4638:	bf00      	nop
    463a:	370c      	adds	r7, #12
    463c:	46bd      	mov	sp, r7
    463e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4642:	4770      	bx	lr
    4644:	e000e100 	.word	0xe000e100

00004648 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4648:	b480      	push	{r7}
    464a:	b083      	sub	sp, #12
    464c:	af00      	add	r7, sp, #0
    464e:	6078      	str	r0, [r7, #4]
    4650:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4652:	bf00      	nop
    4654:	687b      	ldr	r3, [r7, #4]
    4656:	685a      	ldr	r2, [r3, #4]
    4658:	683b      	ldr	r3, [r7, #0]
    465a:	4013      	ands	r3, r2
    465c:	2b00      	cmp	r3, #0
    465e:	d1f9      	bne.n	4654 <hri_eic_wait_for_sync+0xc>
	};
}
    4660:	bf00      	nop
    4662:	370c      	adds	r7, #12
    4664:	46bd      	mov	sp, r7
    4666:	f85d 7b04 	ldr.w	r7, [sp], #4
    466a:	4770      	bx	lr

0000466c <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    466c:	b480      	push	{r7}
    466e:	b083      	sub	sp, #12
    4670:	af00      	add	r7, sp, #0
    4672:	6078      	str	r0, [r7, #4]
    4674:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	685a      	ldr	r2, [r3, #4]
    467a:	683b      	ldr	r3, [r7, #0]
    467c:	4013      	ands	r3, r2
    467e:	2b00      	cmp	r3, #0
    4680:	bf14      	ite	ne
    4682:	2301      	movne	r3, #1
    4684:	2300      	moveq	r3, #0
    4686:	b2db      	uxtb	r3, r3
}
    4688:	4618      	mov	r0, r3
    468a:	370c      	adds	r7, #12
    468c:	46bd      	mov	sp, r7
    468e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4692:	4770      	bx	lr

00004694 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4694:	b480      	push	{r7}
    4696:	b083      	sub	sp, #12
    4698:	af00      	add	r7, sp, #0
    469a:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    469c:	687b      	ldr	r3, [r7, #4]
    469e:	695b      	ldr	r3, [r3, #20]
}
    46a0:	4618      	mov	r0, r3
    46a2:	370c      	adds	r7, #12
    46a4:	46bd      	mov	sp, r7
    46a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    46aa:	4770      	bx	lr

000046ac <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    46ac:	b480      	push	{r7}
    46ae:	b083      	sub	sp, #12
    46b0:	af00      	add	r7, sp, #0
    46b2:	6078      	str	r0, [r7, #4]
    46b4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    46b6:	687b      	ldr	r3, [r7, #4]
    46b8:	683a      	ldr	r2, [r7, #0]
    46ba:	615a      	str	r2, [r3, #20]
}
    46bc:	bf00      	nop
    46be:	370c      	adds	r7, #12
    46c0:	46bd      	mov	sp, r7
    46c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    46c6:	4770      	bx	lr

000046c8 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    46c8:	b580      	push	{r7, lr}
    46ca:	b082      	sub	sp, #8
    46cc:	af00      	add	r7, sp, #0
    46ce:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    46d0:	687b      	ldr	r3, [r7, #4]
    46d2:	781b      	ldrb	r3, [r3, #0]
    46d4:	b2db      	uxtb	r3, r3
    46d6:	f043 0302 	orr.w	r3, r3, #2
    46da:	b2da      	uxtb	r2, r3
    46dc:	687b      	ldr	r3, [r7, #4]
    46de:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    46e0:	2103      	movs	r1, #3
    46e2:	6878      	ldr	r0, [r7, #4]
    46e4:	4b02      	ldr	r3, [pc, #8]	; (46f0 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    46e6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    46e8:	bf00      	nop
    46ea:	3708      	adds	r7, #8
    46ec:	46bd      	mov	sp, r7
    46ee:	bd80      	pop	{r7, pc}
    46f0:	00004649 	.word	0x00004649

000046f4 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    46f4:	b580      	push	{r7, lr}
    46f6:	b082      	sub	sp, #8
    46f8:	af00      	add	r7, sp, #0
    46fa:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    46fc:	687b      	ldr	r3, [r7, #4]
    46fe:	781b      	ldrb	r3, [r3, #0]
    4700:	b2db      	uxtb	r3, r3
    4702:	f023 0302 	bic.w	r3, r3, #2
    4706:	b2da      	uxtb	r2, r3
    4708:	687b      	ldr	r3, [r7, #4]
    470a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    470c:	2103      	movs	r1, #3
    470e:	6878      	ldr	r0, [r7, #4]
    4710:	4b02      	ldr	r3, [pc, #8]	; (471c <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4712:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4714:	bf00      	nop
    4716:	3708      	adds	r7, #8
    4718:	46bd      	mov	sp, r7
    471a:	bd80      	pop	{r7, pc}
    471c:	00004649 	.word	0x00004649

00004720 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4720:	b580      	push	{r7, lr}
    4722:	b084      	sub	sp, #16
    4724:	af00      	add	r7, sp, #0
    4726:	6078      	str	r0, [r7, #4]
    4728:	460b      	mov	r3, r1
    472a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    472c:	687b      	ldr	r3, [r7, #4]
    472e:	781b      	ldrb	r3, [r3, #0]
    4730:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4732:	7bfb      	ldrb	r3, [r7, #15]
    4734:	f023 0310 	bic.w	r3, r3, #16
    4738:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    473a:	78fb      	ldrb	r3, [r7, #3]
    473c:	011b      	lsls	r3, r3, #4
    473e:	b25a      	sxtb	r2, r3
    4740:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4744:	4313      	orrs	r3, r2
    4746:	b25b      	sxtb	r3, r3
    4748:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    474a:	687b      	ldr	r3, [r7, #4]
    474c:	7bfa      	ldrb	r2, [r7, #15]
    474e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4750:	2103      	movs	r1, #3
    4752:	6878      	ldr	r0, [r7, #4]
    4754:	4b02      	ldr	r3, [pc, #8]	; (4760 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4756:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4758:	bf00      	nop
    475a:	3710      	adds	r7, #16
    475c:	46bd      	mov	sp, r7
    475e:	bd80      	pop	{r7, pc}
    4760:	00004649 	.word	0x00004649

00004764 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4764:	b580      	push	{r7, lr}
    4766:	b084      	sub	sp, #16
    4768:	af00      	add	r7, sp, #0
    476a:	6078      	str	r0, [r7, #4]
    476c:	460b      	mov	r3, r1
    476e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4770:	2103      	movs	r1, #3
    4772:	6878      	ldr	r0, [r7, #4]
    4774:	4b06      	ldr	r3, [pc, #24]	; (4790 <hri_eic_get_CTRLA_reg+0x2c>)
    4776:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4778:	687b      	ldr	r3, [r7, #4]
    477a:	781b      	ldrb	r3, [r3, #0]
    477c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    477e:	7bfa      	ldrb	r2, [r7, #15]
    4780:	78fb      	ldrb	r3, [r7, #3]
    4782:	4013      	ands	r3, r2
    4784:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4786:	7bfb      	ldrb	r3, [r7, #15]
}
    4788:	4618      	mov	r0, r3
    478a:	3710      	adds	r7, #16
    478c:	46bd      	mov	sp, r7
    478e:	bd80      	pop	{r7, pc}
    4790:	00004649 	.word	0x00004649

00004794 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4794:	b580      	push	{r7, lr}
    4796:	b082      	sub	sp, #8
    4798:	af00      	add	r7, sp, #0
    479a:	6078      	str	r0, [r7, #4]
    479c:	460b      	mov	r3, r1
    479e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	78fa      	ldrb	r2, [r7, #3]
    47a4:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    47a6:	2103      	movs	r1, #3
    47a8:	6878      	ldr	r0, [r7, #4]
    47aa:	4b03      	ldr	r3, [pc, #12]	; (47b8 <hri_eic_write_CTRLA_reg+0x24>)
    47ac:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    47ae:	bf00      	nop
    47b0:	3708      	adds	r7, #8
    47b2:	46bd      	mov	sp, r7
    47b4:	bd80      	pop	{r7, pc}
    47b6:	bf00      	nop
    47b8:	00004649 	.word	0x00004649

000047bc <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    47bc:	b480      	push	{r7}
    47be:	b083      	sub	sp, #12
    47c0:	af00      	add	r7, sp, #0
    47c2:	6078      	str	r0, [r7, #4]
    47c4:	460b      	mov	r3, r1
    47c6:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    47c8:	687b      	ldr	r3, [r7, #4]
    47ca:	78fa      	ldrb	r2, [r7, #3]
    47cc:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47ce:	bf00      	nop
    47d0:	370c      	adds	r7, #12
    47d2:	46bd      	mov	sp, r7
    47d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47d8:	4770      	bx	lr

000047da <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    47da:	b480      	push	{r7}
    47dc:	b083      	sub	sp, #12
    47de:	af00      	add	r7, sp, #0
    47e0:	6078      	str	r0, [r7, #4]
    47e2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    47e4:	687b      	ldr	r3, [r7, #4]
    47e6:	683a      	ldr	r2, [r7, #0]
    47e8:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    47ea:	bf00      	nop
    47ec:	370c      	adds	r7, #12
    47ee:	46bd      	mov	sp, r7
    47f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    47f4:	4770      	bx	lr

000047f6 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    47f6:	b480      	push	{r7}
    47f8:	b083      	sub	sp, #12
    47fa:	af00      	add	r7, sp, #0
    47fc:	6078      	str	r0, [r7, #4]
    47fe:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4800:	687b      	ldr	r3, [r7, #4]
    4802:	683a      	ldr	r2, [r7, #0]
    4804:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4806:	bf00      	nop
    4808:	370c      	adds	r7, #12
    480a:	46bd      	mov	sp, r7
    480c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4810:	4770      	bx	lr

00004812 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4812:	b480      	push	{r7}
    4814:	b085      	sub	sp, #20
    4816:	af00      	add	r7, sp, #0
    4818:	60f8      	str	r0, [r7, #12]
    481a:	460b      	mov	r3, r1
    481c:	607a      	str	r2, [r7, #4]
    481e:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4820:	7afb      	ldrb	r3, [r7, #11]
    4822:	68fa      	ldr	r2, [r7, #12]
    4824:	3306      	adds	r3, #6
    4826:	009b      	lsls	r3, r3, #2
    4828:	4413      	add	r3, r2
    482a:	687a      	ldr	r2, [r7, #4]
    482c:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    482e:	bf00      	nop
    4830:	3714      	adds	r7, #20
    4832:	46bd      	mov	sp, r7
    4834:	f85d 7b04 	ldr.w	r7, [sp], #4
    4838:	4770      	bx	lr

0000483a <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    483a:	b480      	push	{r7}
    483c:	b083      	sub	sp, #12
    483e:	af00      	add	r7, sp, #0
    4840:	6078      	str	r0, [r7, #4]
    4842:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	683a      	ldr	r2, [r7, #0]
    4848:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    484a:	bf00      	nop
    484c:	370c      	adds	r7, #12
    484e:	46bd      	mov	sp, r7
    4850:	f85d 7b04 	ldr.w	r7, [sp], #4
    4854:	4770      	bx	lr

00004856 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4856:	b480      	push	{r7}
    4858:	b083      	sub	sp, #12
    485a:	af00      	add	r7, sp, #0
    485c:	6078      	str	r0, [r7, #4]
    485e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4860:	687b      	ldr	r3, [r7, #4]
    4862:	683a      	ldr	r2, [r7, #0]
    4864:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4866:	bf00      	nop
    4868:	370c      	adds	r7, #12
    486a:	46bd      	mov	sp, r7
    486c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4870:	4770      	bx	lr
	...

00004874 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4874:	b580      	push	{r7, lr}
    4876:	b082      	sub	sp, #8
    4878:	af00      	add	r7, sp, #0
    487a:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    487c:	2101      	movs	r1, #1
    487e:	4838      	ldr	r0, [pc, #224]	; (4960 <_ext_irq_init+0xec>)
    4880:	4b38      	ldr	r3, [pc, #224]	; (4964 <_ext_irq_init+0xf0>)
    4882:	4798      	blx	r3
    4884:	4603      	mov	r3, r0
    4886:	f083 0301 	eor.w	r3, r3, #1
    488a:	b2db      	uxtb	r3, r3
    488c:	2b00      	cmp	r3, #0
    488e:	d011      	beq.n	48b4 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4890:	2102      	movs	r1, #2
    4892:	4833      	ldr	r0, [pc, #204]	; (4960 <_ext_irq_init+0xec>)
    4894:	4b34      	ldr	r3, [pc, #208]	; (4968 <_ext_irq_init+0xf4>)
    4896:	4798      	blx	r3
    4898:	4603      	mov	r3, r0
    489a:	2b00      	cmp	r3, #0
    489c:	d006      	beq.n	48ac <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    489e:	4830      	ldr	r0, [pc, #192]	; (4960 <_ext_irq_init+0xec>)
    48a0:	4b32      	ldr	r3, [pc, #200]	; (496c <_ext_irq_init+0xf8>)
    48a2:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    48a4:	2102      	movs	r1, #2
    48a6:	482e      	ldr	r0, [pc, #184]	; (4960 <_ext_irq_init+0xec>)
    48a8:	4b31      	ldr	r3, [pc, #196]	; (4970 <_ext_irq_init+0xfc>)
    48aa:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    48ac:	2101      	movs	r1, #1
    48ae:	482c      	ldr	r0, [pc, #176]	; (4960 <_ext_irq_init+0xec>)
    48b0:	4b30      	ldr	r3, [pc, #192]	; (4974 <_ext_irq_init+0x100>)
    48b2:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    48b4:	2101      	movs	r1, #1
    48b6:	482a      	ldr	r0, [pc, #168]	; (4960 <_ext_irq_init+0xec>)
    48b8:	4b2d      	ldr	r3, [pc, #180]	; (4970 <_ext_irq_init+0xfc>)
    48ba:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    48bc:	2100      	movs	r1, #0
    48be:	4828      	ldr	r0, [pc, #160]	; (4960 <_ext_irq_init+0xec>)
    48c0:	4b2d      	ldr	r3, [pc, #180]	; (4978 <_ext_irq_init+0x104>)
    48c2:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    48c4:	2100      	movs	r1, #0
    48c6:	4826      	ldr	r0, [pc, #152]	; (4960 <_ext_irq_init+0xec>)
    48c8:	4b2c      	ldr	r3, [pc, #176]	; (497c <_ext_irq_init+0x108>)
    48ca:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    48cc:	2100      	movs	r1, #0
    48ce:	4824      	ldr	r0, [pc, #144]	; (4960 <_ext_irq_init+0xec>)
    48d0:	4b2b      	ldr	r3, [pc, #172]	; (4980 <_ext_irq_init+0x10c>)
    48d2:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    48d4:	2130      	movs	r1, #48	; 0x30
    48d6:	4822      	ldr	r0, [pc, #136]	; (4960 <_ext_irq_init+0xec>)
    48d8:	4b2a      	ldr	r3, [pc, #168]	; (4984 <_ext_irq_init+0x110>)
    48da:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    48dc:	2130      	movs	r1, #48	; 0x30
    48de:	4820      	ldr	r0, [pc, #128]	; (4960 <_ext_irq_init+0xec>)
    48e0:	4b29      	ldr	r3, [pc, #164]	; (4988 <_ext_irq_init+0x114>)
    48e2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    48e4:	2100      	movs	r1, #0
    48e6:	481e      	ldr	r0, [pc, #120]	; (4960 <_ext_irq_init+0xec>)
    48e8:	4b28      	ldr	r3, [pc, #160]	; (498c <_ext_irq_init+0x118>)
    48ea:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    48ec:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    48f0:	2100      	movs	r1, #0
    48f2:	481b      	ldr	r0, [pc, #108]	; (4960 <_ext_irq_init+0xec>)
    48f4:	4b26      	ldr	r3, [pc, #152]	; (4990 <_ext_irq_init+0x11c>)
    48f6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    48f8:	2200      	movs	r2, #0
    48fa:	2101      	movs	r1, #1
    48fc:	4818      	ldr	r0, [pc, #96]	; (4960 <_ext_irq_init+0xec>)
    48fe:	4b24      	ldr	r3, [pc, #144]	; (4990 <_ext_irq_init+0x11c>)
    4900:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4902:	4817      	ldr	r0, [pc, #92]	; (4960 <_ext_irq_init+0xec>)
    4904:	4b23      	ldr	r3, [pc, #140]	; (4994 <_ext_irq_init+0x120>)
    4906:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4908:	2010      	movs	r0, #16
    490a:	4b23      	ldr	r3, [pc, #140]	; (4998 <_ext_irq_init+0x124>)
    490c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    490e:	2010      	movs	r0, #16
    4910:	4b22      	ldr	r3, [pc, #136]	; (499c <_ext_irq_init+0x128>)
    4912:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4914:	2010      	movs	r0, #16
    4916:	4b22      	ldr	r3, [pc, #136]	; (49a0 <_ext_irq_init+0x12c>)
    4918:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    491a:	2011      	movs	r0, #17
    491c:	4b1e      	ldr	r3, [pc, #120]	; (4998 <_ext_irq_init+0x124>)
    491e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4920:	2011      	movs	r0, #17
    4922:	4b1e      	ldr	r3, [pc, #120]	; (499c <_ext_irq_init+0x128>)
    4924:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4926:	2011      	movs	r0, #17
    4928:	4b1d      	ldr	r3, [pc, #116]	; (49a0 <_ext_irq_init+0x12c>)
    492a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    492c:	2012      	movs	r0, #18
    492e:	4b1a      	ldr	r3, [pc, #104]	; (4998 <_ext_irq_init+0x124>)
    4930:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4932:	2012      	movs	r0, #18
    4934:	4b19      	ldr	r3, [pc, #100]	; (499c <_ext_irq_init+0x128>)
    4936:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4938:	2012      	movs	r0, #18
    493a:	4b19      	ldr	r3, [pc, #100]	; (49a0 <_ext_irq_init+0x12c>)
    493c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    493e:	2013      	movs	r0, #19
    4940:	4b15      	ldr	r3, [pc, #84]	; (4998 <_ext_irq_init+0x124>)
    4942:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4944:	2013      	movs	r0, #19
    4946:	4b15      	ldr	r3, [pc, #84]	; (499c <_ext_irq_init+0x128>)
    4948:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    494a:	2013      	movs	r0, #19
    494c:	4b14      	ldr	r3, [pc, #80]	; (49a0 <_ext_irq_init+0x12c>)
    494e:	4798      	blx	r3

	callback = cb;
    4950:	4a14      	ldr	r2, [pc, #80]	; (49a4 <_ext_irq_init+0x130>)
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4956:	2300      	movs	r3, #0
}
    4958:	4618      	mov	r0, r3
    495a:	3708      	adds	r7, #8
    495c:	46bd      	mov	sp, r7
    495e:	bd80      	pop	{r7, pc}
    4960:	40002800 	.word	0x40002800
    4964:	0000466d 	.word	0x0000466d
    4968:	00004765 	.word	0x00004765
    496c:	000046f5 	.word	0x000046f5
    4970:	00004649 	.word	0x00004649
    4974:	00004795 	.word	0x00004795
    4978:	00004721 	.word	0x00004721
    497c:	000047bd 	.word	0x000047bd
    4980:	000047db 	.word	0x000047db
    4984:	000047f7 	.word	0x000047f7
    4988:	0000483b 	.word	0x0000483b
    498c:	00004857 	.word	0x00004857
    4990:	00004813 	.word	0x00004813
    4994:	000046c9 	.word	0x000046c9
    4998:	000045c9 	.word	0x000045c9
    499c:	0000460d 	.word	0x0000460d
    49a0:	0000458d 	.word	0x0000458d
    49a4:	200006d4 	.word	0x200006d4

000049a8 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    49a8:	b580      	push	{r7, lr}
    49aa:	b084      	sub	sp, #16
    49ac:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    49ae:	4841      	ldr	r0, [pc, #260]	; (4ab4 <_ext_irq_handler+0x10c>)
    49b0:	4b41      	ldr	r3, [pc, #260]	; (4ab8 <_ext_irq_handler+0x110>)
    49b2:	4798      	blx	r3
    49b4:	4603      	mov	r3, r0
    49b6:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    49b8:	f04f 33ff 	mov.w	r3, #4294967295
    49bc:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    49be:	683b      	ldr	r3, [r7, #0]
    49c0:	4619      	mov	r1, r3
    49c2:	483c      	ldr	r0, [pc, #240]	; (4ab4 <_ext_irq_handler+0x10c>)
    49c4:	4b3d      	ldr	r3, [pc, #244]	; (4abc <_ext_irq_handler+0x114>)
    49c6:	4798      	blx	r3

	ASSERT(callback);
    49c8:	4b3d      	ldr	r3, [pc, #244]	; (4ac0 <_ext_irq_handler+0x118>)
    49ca:	681b      	ldr	r3, [r3, #0]
    49cc:	2b00      	cmp	r3, #0
    49ce:	bf14      	ite	ne
    49d0:	2301      	movne	r3, #1
    49d2:	2300      	moveq	r3, #0
    49d4:	b2db      	uxtb	r3, r3
    49d6:	22f4      	movs	r2, #244	; 0xf4
    49d8:	493a      	ldr	r1, [pc, #232]	; (4ac4 <_ext_irq_handler+0x11c>)
    49da:	4618      	mov	r0, r3
    49dc:	4b3a      	ldr	r3, [pc, #232]	; (4ac8 <_ext_irq_handler+0x120>)
    49de:	4798      	blx	r3

	while (flags) {
    49e0:	e060      	b.n	4aa4 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    49e2:	683b      	ldr	r3, [r7, #0]
    49e4:	4618      	mov	r0, r3
    49e6:	4b39      	ldr	r3, [pc, #228]	; (4acc <_ext_irq_handler+0x124>)
    49e8:	4798      	blx	r3
    49ea:	4603      	mov	r3, r0
    49ec:	b2db      	uxtb	r3, r3
    49ee:	3b01      	subs	r3, #1
    49f0:	b2db      	uxtb	r3, r3
    49f2:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    49f4:	e047      	b.n	4a86 <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    49f6:	2300      	movs	r3, #0
    49f8:	71fb      	strb	r3, [r7, #7]
    49fa:	2304      	movs	r3, #4
    49fc:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    49fe:	e024      	b.n	4a4a <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    4a00:	79ba      	ldrb	r2, [r7, #6]
    4a02:	79fb      	ldrb	r3, [r7, #7]
    4a04:	4413      	add	r3, r2
    4a06:	105b      	asrs	r3, r3, #1
    4a08:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4a0a:	797b      	ldrb	r3, [r7, #5]
    4a0c:	4a30      	ldr	r2, [pc, #192]	; (4ad0 <_ext_irq_handler+0x128>)
    4a0e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4a12:	461a      	mov	r2, r3
    4a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a18:	429a      	cmp	r2, r3
    4a1a:	d106      	bne.n	4a2a <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    4a1c:	797b      	ldrb	r3, [r7, #5]
    4a1e:	4a2c      	ldr	r2, [pc, #176]	; (4ad0 <_ext_irq_handler+0x128>)
    4a20:	00db      	lsls	r3, r3, #3
    4a22:	4413      	add	r3, r2
    4a24:	685b      	ldr	r3, [r3, #4]
    4a26:	60bb      	str	r3, [r7, #8]
					break;
    4a28:	e013      	b.n	4a52 <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    4a2a:	797b      	ldrb	r3, [r7, #5]
    4a2c:	4a28      	ldr	r2, [pc, #160]	; (4ad0 <_ext_irq_handler+0x128>)
    4a2e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4a32:	461a      	mov	r2, r3
    4a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a38:	429a      	cmp	r2, r3
    4a3a:	da03      	bge.n	4a44 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    4a3c:	797b      	ldrb	r3, [r7, #5]
    4a3e:	3301      	adds	r3, #1
    4a40:	71fb      	strb	r3, [r7, #7]
    4a42:	e002      	b.n	4a4a <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    4a44:	797b      	ldrb	r3, [r7, #5]
    4a46:	3b01      	subs	r3, #1
    4a48:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4a4a:	79ba      	ldrb	r2, [r7, #6]
    4a4c:	79fb      	ldrb	r3, [r7, #7]
    4a4e:	429a      	cmp	r2, r3
    4a50:	d2d6      	bcs.n	4a00 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4a52:	68bb      	ldr	r3, [r7, #8]
    4a54:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a58:	d003      	beq.n	4a62 <_ext_irq_handler+0xba>
				callback(pin);
    4a5a:	4b19      	ldr	r3, [pc, #100]	; (4ac0 <_ext_irq_handler+0x118>)
    4a5c:	681b      	ldr	r3, [r3, #0]
    4a5e:	68b8      	ldr	r0, [r7, #8]
    4a60:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a66:	2201      	movs	r2, #1
    4a68:	fa02 f303 	lsl.w	r3, r2, r3
    4a6c:	43da      	mvns	r2, r3
    4a6e:	683b      	ldr	r3, [r7, #0]
    4a70:	4013      	ands	r3, r2
    4a72:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4a74:	683b      	ldr	r3, [r7, #0]
    4a76:	4618      	mov	r0, r3
    4a78:	4b14      	ldr	r3, [pc, #80]	; (4acc <_ext_irq_handler+0x124>)
    4a7a:	4798      	blx	r3
    4a7c:	4603      	mov	r3, r0
    4a7e:	b2db      	uxtb	r3, r3
    4a80:	3b01      	subs	r3, #1
    4a82:	b2db      	uxtb	r3, r3
    4a84:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a8e:	d1b2      	bne.n	49f6 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4a90:	4808      	ldr	r0, [pc, #32]	; (4ab4 <_ext_irq_handler+0x10c>)
    4a92:	4b09      	ldr	r3, [pc, #36]	; (4ab8 <_ext_irq_handler+0x110>)
    4a94:	4798      	blx	r3
    4a96:	4603      	mov	r3, r0
    4a98:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4a9a:	683b      	ldr	r3, [r7, #0]
    4a9c:	4619      	mov	r1, r3
    4a9e:	4805      	ldr	r0, [pc, #20]	; (4ab4 <_ext_irq_handler+0x10c>)
    4aa0:	4b06      	ldr	r3, [pc, #24]	; (4abc <_ext_irq_handler+0x114>)
    4aa2:	4798      	blx	r3
	while (flags) {
    4aa4:	683b      	ldr	r3, [r7, #0]
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d19b      	bne.n	49e2 <_ext_irq_handler+0x3a>
	}
}
    4aaa:	bf00      	nop
    4aac:	3710      	adds	r7, #16
    4aae:	46bd      	mov	sp, r7
    4ab0:	bd80      	pop	{r7, pc}
    4ab2:	bf00      	nop
    4ab4:	40002800 	.word	0x40002800
    4ab8:	00004695 	.word	0x00004695
    4abc:	000046ad 	.word	0x000046ad
    4ac0:	200006d4 	.word	0x200006d4
    4ac4:	0000ee00 	.word	0x0000ee00
    4ac8:	00003911 	.word	0x00003911
    4acc:	0000e839 	.word	0x0000e839
    4ad0:	0000ede0 	.word	0x0000ede0

00004ad4 <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    4ad4:	b580      	push	{r7, lr}
    4ad6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ad8:	4b01      	ldr	r3, [pc, #4]	; (4ae0 <EIC_4_Handler+0xc>)
    4ada:	4798      	blx	r3
} /**
    4adc:	bf00      	nop
    4ade:	bd80      	pop	{r7, pc}
    4ae0:	000049a9 	.word	0x000049a9

00004ae4 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4ae4:	b580      	push	{r7, lr}
    4ae6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ae8:	4b01      	ldr	r3, [pc, #4]	; (4af0 <EIC_5_Handler+0xc>)
    4aea:	4798      	blx	r3
} /**
    4aec:	bf00      	nop
    4aee:	bd80      	pop	{r7, pc}
    4af0:	000049a9 	.word	0x000049a9

00004af4 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4af4:	b580      	push	{r7, lr}
    4af6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4af8:	4b01      	ldr	r3, [pc, #4]	; (4b00 <EIC_6_Handler+0xc>)
    4afa:	4798      	blx	r3
} /**
    4afc:	bf00      	nop
    4afe:	bd80      	pop	{r7, pc}
    4b00:	000049a9 	.word	0x000049a9

00004b04 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4b04:	b580      	push	{r7, lr}
    4b06:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4b08:	4b01      	ldr	r3, [pc, #4]	; (4b10 <EIC_7_Handler+0xc>)
    4b0a:	4798      	blx	r3
}
    4b0c:	bf00      	nop
    4b0e:	bd80      	pop	{r7, pc}
    4b10:	000049a9 	.word	0x000049a9

00004b14 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4b14:	b480      	push	{r7}
    4b16:	b085      	sub	sp, #20
    4b18:	af00      	add	r7, sp, #0
    4b1a:	60f8      	str	r0, [r7, #12]
    4b1c:	460b      	mov	r3, r1
    4b1e:	607a      	str	r2, [r7, #4]
    4b20:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4b22:	7afa      	ldrb	r2, [r7, #11]
    4b24:	68fb      	ldr	r3, [r7, #12]
    4b26:	3248      	adds	r2, #72	; 0x48
    4b28:	6879      	ldr	r1, [r7, #4]
    4b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4b2e:	bf00      	nop
    4b30:	3714      	adds	r7, #20
    4b32:	46bd      	mov	sp, r7
    4b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b38:	4770      	bx	lr

00004b3a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4b3a:	b480      	push	{r7}
    4b3c:	b083      	sub	sp, #12
    4b3e:	af00      	add	r7, sp, #0
    4b40:	6078      	str	r0, [r7, #4]
    4b42:	460b      	mov	r3, r1
    4b44:	70fb      	strb	r3, [r7, #3]
    4b46:	4613      	mov	r3, r2
    4b48:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4b4a:	78fb      	ldrb	r3, [r7, #3]
    4b4c:	687a      	ldr	r2, [r7, #4]
    4b4e:	3304      	adds	r3, #4
    4b50:	00db      	lsls	r3, r3, #3
    4b52:	4413      	add	r3, r2
    4b54:	78ba      	ldrb	r2, [r7, #2]
    4b56:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4b58:	78fb      	ldrb	r3, [r7, #3]
    4b5a:	78ba      	ldrb	r2, [r7, #2]
    4b5c:	43d2      	mvns	r2, r2
    4b5e:	b2d1      	uxtb	r1, r2
    4b60:	687a      	ldr	r2, [r7, #4]
    4b62:	3304      	adds	r3, #4
    4b64:	00db      	lsls	r3, r3, #3
    4b66:	4413      	add	r3, r2
    4b68:	460a      	mov	r2, r1
    4b6a:	711a      	strb	r2, [r3, #4]
}
    4b6c:	bf00      	nop
    4b6e:	370c      	adds	r7, #12
    4b70:	46bd      	mov	sp, r7
    4b72:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b76:	4770      	bx	lr

00004b78 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4b78:	b480      	push	{r7}
    4b7a:	b085      	sub	sp, #20
    4b7c:	af00      	add	r7, sp, #0
    4b7e:	60f8      	str	r0, [r7, #12]
    4b80:	460b      	mov	r3, r1
    4b82:	607a      	str	r2, [r7, #4]
    4b84:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4b86:	7afa      	ldrb	r2, [r7, #11]
    4b88:	68fb      	ldr	r3, [r7, #12]
    4b8a:	3204      	adds	r2, #4
    4b8c:	6879      	ldr	r1, [r7, #4]
    4b8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4b92:	bf00      	nop
    4b94:	3714      	adds	r7, #20
    4b96:	46bd      	mov	sp, r7
    4b98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b9c:	4770      	bx	lr
	...

00004ba0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4ba0:	b580      	push	{r7, lr}
    4ba2:	b082      	sub	sp, #8
    4ba4:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4ba6:	2300      	movs	r3, #0
    4ba8:	71fb      	strb	r3, [r7, #7]
    4baa:	e00b      	b.n	4bc4 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4bac:	79fb      	ldrb	r3, [r7, #7]
    4bae:	4a18      	ldr	r2, [pc, #96]	; (4c10 <_event_system_init+0x70>)
    4bb0:	5cd3      	ldrb	r3, [r2, r3]
    4bb2:	461a      	mov	r2, r3
    4bb4:	79fb      	ldrb	r3, [r7, #7]
    4bb6:	4619      	mov	r1, r3
    4bb8:	4816      	ldr	r0, [pc, #88]	; (4c14 <_event_system_init+0x74>)
    4bba:	4b17      	ldr	r3, [pc, #92]	; (4c18 <_event_system_init+0x78>)
    4bbc:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4bbe:	79fb      	ldrb	r3, [r7, #7]
    4bc0:	3301      	adds	r3, #1
    4bc2:	71fb      	strb	r3, [r7, #7]
    4bc4:	79fb      	ldrb	r3, [r7, #7]
    4bc6:	2b42      	cmp	r3, #66	; 0x42
    4bc8:	d9f0      	bls.n	4bac <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4bca:	2300      	movs	r3, #0
    4bcc:	71fb      	strb	r3, [r7, #7]
    4bce:	e016      	b.n	4bfe <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4bd0:	79fb      	ldrb	r3, [r7, #7]
    4bd2:	4a12      	ldr	r2, [pc, #72]	; (4c1c <_event_system_init+0x7c>)
    4bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4bd8:	461a      	mov	r2, r3
    4bda:	79fb      	ldrb	r3, [r7, #7]
    4bdc:	4619      	mov	r1, r3
    4bde:	480d      	ldr	r0, [pc, #52]	; (4c14 <_event_system_init+0x74>)
    4be0:	4b0f      	ldr	r3, [pc, #60]	; (4c20 <_event_system_init+0x80>)
    4be2:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4be4:	79fb      	ldrb	r3, [r7, #7]
    4be6:	4a0f      	ldr	r2, [pc, #60]	; (4c24 <_event_system_init+0x84>)
    4be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4bec:	b2da      	uxtb	r2, r3
    4bee:	79fb      	ldrb	r3, [r7, #7]
    4bf0:	4619      	mov	r1, r3
    4bf2:	4808      	ldr	r0, [pc, #32]	; (4c14 <_event_system_init+0x74>)
    4bf4:	4b0c      	ldr	r3, [pc, #48]	; (4c28 <_event_system_init+0x88>)
    4bf6:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4bf8:	79fb      	ldrb	r3, [r7, #7]
    4bfa:	3301      	adds	r3, #1
    4bfc:	71fb      	strb	r3, [r7, #7]
    4bfe:	79fb      	ldrb	r3, [r7, #7]
    4c00:	2b1f      	cmp	r3, #31
    4c02:	d9e5      	bls.n	4bd0 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4c04:	2300      	movs	r3, #0
}
    4c06:	4618      	mov	r0, r3
    4c08:	3708      	adds	r7, #8
    4c0a:	46bd      	mov	sp, r7
    4c0c:	bd80      	pop	{r7, pc}
    4c0e:	bf00      	nop
    4c10:	0000ee18 	.word	0x0000ee18
    4c14:	4100e000 	.word	0x4100e000
    4c18:	00004b15 	.word	0x00004b15
    4c1c:	0000ee5c 	.word	0x0000ee5c
    4c20:	00004b79 	.word	0x00004b79
    4c24:	0000ee9c 	.word	0x0000ee9c
    4c28:	00004b3b 	.word	0x00004b3b

00004c2c <hri_gclk_wait_for_sync>:
{
    4c2c:	b480      	push	{r7}
    4c2e:	b083      	sub	sp, #12
    4c30:	af00      	add	r7, sp, #0
    4c32:	6078      	str	r0, [r7, #4]
    4c34:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4c36:	bf00      	nop
    4c38:	687b      	ldr	r3, [r7, #4]
    4c3a:	685a      	ldr	r2, [r3, #4]
    4c3c:	683b      	ldr	r3, [r7, #0]
    4c3e:	4013      	ands	r3, r2
    4c40:	2b00      	cmp	r3, #0
    4c42:	d1f9      	bne.n	4c38 <hri_gclk_wait_for_sync+0xc>
}
    4c44:	bf00      	nop
    4c46:	370c      	adds	r7, #12
    4c48:	46bd      	mov	sp, r7
    4c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c4e:	4770      	bx	lr

00004c50 <hri_gclk_write_GENCTRL_reg>:
{
    4c50:	b580      	push	{r7, lr}
    4c52:	b084      	sub	sp, #16
    4c54:	af00      	add	r7, sp, #0
    4c56:	60f8      	str	r0, [r7, #12]
    4c58:	460b      	mov	r3, r1
    4c5a:	607a      	str	r2, [r7, #4]
    4c5c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4c5e:	7afa      	ldrb	r2, [r7, #11]
    4c60:	68fb      	ldr	r3, [r7, #12]
    4c62:	3208      	adds	r2, #8
    4c64:	6879      	ldr	r1, [r7, #4]
    4c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4c6a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4c6e:	68f8      	ldr	r0, [r7, #12]
    4c70:	4b02      	ldr	r3, [pc, #8]	; (4c7c <hri_gclk_write_GENCTRL_reg+0x2c>)
    4c72:	4798      	blx	r3
}
    4c74:	bf00      	nop
    4c76:	3710      	adds	r7, #16
    4c78:	46bd      	mov	sp, r7
    4c7a:	bd80      	pop	{r7, pc}
    4c7c:	00004c2d 	.word	0x00004c2d

00004c80 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4c80:	b580      	push	{r7, lr}
    4c82:	b082      	sub	sp, #8
    4c84:	af00      	add	r7, sp, #0
    4c86:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	f003 0301 	and.w	r3, r3, #1
    4c8e:	2b00      	cmp	r3, #0
    4c90:	d004      	beq.n	4c9c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4c92:	4a36      	ldr	r2, [pc, #216]	; (4d6c <_gclk_init_generators_by_fref+0xec>)
    4c94:	2100      	movs	r1, #0
    4c96:	4836      	ldr	r0, [pc, #216]	; (4d70 <_gclk_init_generators_by_fref+0xf0>)
    4c98:	4b36      	ldr	r3, [pc, #216]	; (4d74 <_gclk_init_generators_by_fref+0xf4>)
    4c9a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4c9c:	687b      	ldr	r3, [r7, #4]
    4c9e:	f003 0302 	and.w	r3, r3, #2
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	d004      	beq.n	4cb0 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4ca6:	4a34      	ldr	r2, [pc, #208]	; (4d78 <_gclk_init_generators_by_fref+0xf8>)
    4ca8:	2101      	movs	r1, #1
    4caa:	4831      	ldr	r0, [pc, #196]	; (4d70 <_gclk_init_generators_by_fref+0xf0>)
    4cac:	4b31      	ldr	r3, [pc, #196]	; (4d74 <_gclk_init_generators_by_fref+0xf4>)
    4cae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4cb0:	687b      	ldr	r3, [r7, #4]
    4cb2:	f003 0304 	and.w	r3, r3, #4
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d004      	beq.n	4cc4 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4cba:	4a30      	ldr	r2, [pc, #192]	; (4d7c <_gclk_init_generators_by_fref+0xfc>)
    4cbc:	2102      	movs	r1, #2
    4cbe:	482c      	ldr	r0, [pc, #176]	; (4d70 <_gclk_init_generators_by_fref+0xf0>)
    4cc0:	4b2c      	ldr	r3, [pc, #176]	; (4d74 <_gclk_init_generators_by_fref+0xf4>)
    4cc2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	f003 0308 	and.w	r3, r3, #8
    4cca:	2b00      	cmp	r3, #0
    4ccc:	d004      	beq.n	4cd8 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4cce:	4a2c      	ldr	r2, [pc, #176]	; (4d80 <_gclk_init_generators_by_fref+0x100>)
    4cd0:	2103      	movs	r1, #3
    4cd2:	4827      	ldr	r0, [pc, #156]	; (4d70 <_gclk_init_generators_by_fref+0xf0>)
    4cd4:	4b27      	ldr	r3, [pc, #156]	; (4d74 <_gclk_init_generators_by_fref+0xf4>)
    4cd6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4cd8:	687b      	ldr	r3, [r7, #4]
    4cda:	f003 0310 	and.w	r3, r3, #16
    4cde:	2b00      	cmp	r3, #0
    4ce0:	d004      	beq.n	4cec <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4ce2:	4a28      	ldr	r2, [pc, #160]	; (4d84 <_gclk_init_generators_by_fref+0x104>)
    4ce4:	2104      	movs	r1, #4
    4ce6:	4822      	ldr	r0, [pc, #136]	; (4d70 <_gclk_init_generators_by_fref+0xf0>)
    4ce8:	4b22      	ldr	r3, [pc, #136]	; (4d74 <_gclk_init_generators_by_fref+0xf4>)
    4cea:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	f003 0320 	and.w	r3, r3, #32
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d004      	beq.n	4d00 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4cf6:	4a24      	ldr	r2, [pc, #144]	; (4d88 <_gclk_init_generators_by_fref+0x108>)
    4cf8:	2105      	movs	r1, #5
    4cfa:	481d      	ldr	r0, [pc, #116]	; (4d70 <_gclk_init_generators_by_fref+0xf0>)
    4cfc:	4b1d      	ldr	r3, [pc, #116]	; (4d74 <_gclk_init_generators_by_fref+0xf4>)
    4cfe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4d00:	687b      	ldr	r3, [r7, #4]
    4d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4d06:	2b00      	cmp	r3, #0
    4d08:	d004      	beq.n	4d14 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4d0a:	4a20      	ldr	r2, [pc, #128]	; (4d8c <_gclk_init_generators_by_fref+0x10c>)
    4d0c:	2106      	movs	r1, #6
    4d0e:	4818      	ldr	r0, [pc, #96]	; (4d70 <_gclk_init_generators_by_fref+0xf0>)
    4d10:	4b18      	ldr	r3, [pc, #96]	; (4d74 <_gclk_init_generators_by_fref+0xf4>)
    4d12:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4d14:	687b      	ldr	r3, [r7, #4]
    4d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4d1a:	2b00      	cmp	r3, #0
    4d1c:	d004      	beq.n	4d28 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4d1e:	4a1c      	ldr	r2, [pc, #112]	; (4d90 <_gclk_init_generators_by_fref+0x110>)
    4d20:	2107      	movs	r1, #7
    4d22:	4813      	ldr	r0, [pc, #76]	; (4d70 <_gclk_init_generators_by_fref+0xf0>)
    4d24:	4b13      	ldr	r3, [pc, #76]	; (4d74 <_gclk_init_generators_by_fref+0xf4>)
    4d26:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4d28:	687b      	ldr	r3, [r7, #4]
    4d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d004      	beq.n	4d3c <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4d32:	4a18      	ldr	r2, [pc, #96]	; (4d94 <_gclk_init_generators_by_fref+0x114>)
    4d34:	2108      	movs	r1, #8
    4d36:	480e      	ldr	r0, [pc, #56]	; (4d70 <_gclk_init_generators_by_fref+0xf0>)
    4d38:	4b0e      	ldr	r3, [pc, #56]	; (4d74 <_gclk_init_generators_by_fref+0xf4>)
    4d3a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4d3c:	687b      	ldr	r3, [r7, #4]
    4d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4d42:	2b00      	cmp	r3, #0
    4d44:	d004      	beq.n	4d50 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4d46:	4a14      	ldr	r2, [pc, #80]	; (4d98 <_gclk_init_generators_by_fref+0x118>)
    4d48:	210a      	movs	r1, #10
    4d4a:	4809      	ldr	r0, [pc, #36]	; (4d70 <_gclk_init_generators_by_fref+0xf0>)
    4d4c:	4b09      	ldr	r3, [pc, #36]	; (4d74 <_gclk_init_generators_by_fref+0xf4>)
    4d4e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4d50:	687b      	ldr	r3, [r7, #4]
    4d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4d56:	2b00      	cmp	r3, #0
    4d58:	d004      	beq.n	4d64 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4d5a:	4a10      	ldr	r2, [pc, #64]	; (4d9c <_gclk_init_generators_by_fref+0x11c>)
    4d5c:	210b      	movs	r1, #11
    4d5e:	4804      	ldr	r0, [pc, #16]	; (4d70 <_gclk_init_generators_by_fref+0xf0>)
    4d60:	4b04      	ldr	r3, [pc, #16]	; (4d74 <_gclk_init_generators_by_fref+0xf4>)
    4d62:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4d64:	bf00      	nop
    4d66:	3708      	adds	r7, #8
    4d68:	46bd      	mov	sp, r7
    4d6a:	bd80      	pop	{r7, pc}
    4d6c:	00010107 	.word	0x00010107
    4d70:	40001c00 	.word	0x40001c00
    4d74:	00004c51 	.word	0x00004c51
    4d78:	00010907 	.word	0x00010907
    4d7c:	00010906 	.word	0x00010906
    4d80:	00020908 	.word	0x00020908
    4d84:	00010901 	.word	0x00010901
    4d88:	00062901 	.word	0x00062901
    4d8c:	000c2901 	.word	0x000c2901
    4d90:	00082908 	.word	0x00082908
    4d94:	00032901 	.word	0x00032901
    4d98:	00010905 	.word	0x00010905
    4d9c:	00041905 	.word	0x00041905

00004da0 <hri_mclk_write_CPUDIV_reg>:
{
    4da0:	b480      	push	{r7}
    4da2:	b083      	sub	sp, #12
    4da4:	af00      	add	r7, sp, #0
    4da6:	6078      	str	r0, [r7, #4]
    4da8:	460b      	mov	r3, r1
    4daa:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	78fa      	ldrb	r2, [r7, #3]
    4db0:	715a      	strb	r2, [r3, #5]
}
    4db2:	bf00      	nop
    4db4:	370c      	adds	r7, #12
    4db6:	46bd      	mov	sp, r7
    4db8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dbc:	4770      	bx	lr
	...

00004dc0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4dc0:	b580      	push	{r7, lr}
    4dc2:	b082      	sub	sp, #8
    4dc4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4dc6:	4b05      	ldr	r3, [pc, #20]	; (4ddc <_mclk_init+0x1c>)
    4dc8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4dca:	2101      	movs	r1, #1
    4dcc:	6878      	ldr	r0, [r7, #4]
    4dce:	4b04      	ldr	r3, [pc, #16]	; (4de0 <_mclk_init+0x20>)
    4dd0:	4798      	blx	r3
}
    4dd2:	bf00      	nop
    4dd4:	3708      	adds	r7, #8
    4dd6:	46bd      	mov	sp, r7
    4dd8:	bd80      	pop	{r7, pc}
    4dda:	bf00      	nop
    4ddc:	40000800 	.word	0x40000800
    4de0:	00004da1 	.word	0x00004da1

00004de4 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4de4:	b480      	push	{r7}
    4de6:	b083      	sub	sp, #12
    4de8:	af00      	add	r7, sp, #0
    4dea:	6078      	str	r0, [r7, #4]
    4dec:	460b      	mov	r3, r1
    4dee:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	78fa      	ldrb	r2, [r7, #3]
    4df4:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4df6:	bf00      	nop
    4df8:	370c      	adds	r7, #12
    4dfa:	46bd      	mov	sp, r7
    4dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e00:	4770      	bx	lr

00004e02 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4e02:	b480      	push	{r7}
    4e04:	b083      	sub	sp, #12
    4e06:	af00      	add	r7, sp, #0
    4e08:	6078      	str	r0, [r7, #4]
    4e0a:	460b      	mov	r3, r1
    4e0c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4e0e:	687b      	ldr	r3, [r7, #4]
    4e10:	887a      	ldrh	r2, [r7, #2]
    4e12:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e14:	bf00      	nop
    4e16:	370c      	adds	r7, #12
    4e18:	46bd      	mov	sp, r7
    4e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e1e:	4770      	bx	lr

00004e20 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4e20:	b480      	push	{r7}
    4e22:	b083      	sub	sp, #12
    4e24:	af00      	add	r7, sp, #0
    4e26:	6078      	str	r0, [r7, #4]
    4e28:	460b      	mov	r3, r1
    4e2a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4e2c:	687b      	ldr	r3, [r7, #4]
    4e2e:	78fa      	ldrb	r2, [r7, #3]
    4e30:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e32:	bf00      	nop
    4e34:	370c      	adds	r7, #12
    4e36:	46bd      	mov	sp, r7
    4e38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e3c:	4770      	bx	lr

00004e3e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4e3e:	b480      	push	{r7}
    4e40:	b083      	sub	sp, #12
    4e42:	af00      	add	r7, sp, #0
    4e44:	6078      	str	r0, [r7, #4]
    4e46:	460b      	mov	r3, r1
    4e48:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4e4a:	687b      	ldr	r3, [r7, #4]
    4e4c:	78fa      	ldrb	r2, [r7, #3]
    4e4e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e50:	bf00      	nop
    4e52:	370c      	adds	r7, #12
    4e54:	46bd      	mov	sp, r7
    4e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e5a:	4770      	bx	lr

00004e5c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4e5c:	b480      	push	{r7}
    4e5e:	b085      	sub	sp, #20
    4e60:	af00      	add	r7, sp, #0
    4e62:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4e64:	687b      	ldr	r3, [r7, #4]
    4e66:	69db      	ldr	r3, [r3, #28]
    4e68:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4e6a:	68fb      	ldr	r3, [r7, #12]
    4e6c:	0a1b      	lsrs	r3, r3, #8
    4e6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e72:	60fb      	str	r3, [r7, #12]
	return tmp;
    4e74:	68fb      	ldr	r3, [r7, #12]
}
    4e76:	4618      	mov	r0, r3
    4e78:	3714      	adds	r7, #20
    4e7a:	46bd      	mov	sp, r7
    4e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e80:	4770      	bx	lr

00004e82 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4e82:	b480      	push	{r7}
    4e84:	b083      	sub	sp, #12
    4e86:	af00      	add	r7, sp, #0
    4e88:	6078      	str	r0, [r7, #4]
    4e8a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	683a      	ldr	r2, [r7, #0]
    4e90:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e92:	bf00      	nop
    4e94:	370c      	adds	r7, #12
    4e96:	46bd      	mov	sp, r7
    4e98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e9c:	4770      	bx	lr
	...

00004ea0 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4ea0:	b580      	push	{r7, lr}
    4ea2:	b082      	sub	sp, #8
    4ea4:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4ea6:	4b13      	ldr	r3, [pc, #76]	; (4ef4 <_osc32kctrl_init_sources+0x54>)
    4ea8:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4eaa:	2300      	movs	r3, #0
    4eac:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4eae:	f242 018e 	movw	r1, #8334	; 0x208e
    4eb2:	6878      	ldr	r0, [r7, #4]
    4eb4:	4b10      	ldr	r3, [pc, #64]	; (4ef8 <_osc32kctrl_init_sources+0x58>)
    4eb6:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4eb8:	2100      	movs	r1, #0
    4eba:	6878      	ldr	r0, [r7, #4]
    4ebc:	4b0f      	ldr	r3, [pc, #60]	; (4efc <_osc32kctrl_init_sources+0x5c>)
    4ebe:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4ec0:	2100      	movs	r1, #0
    4ec2:	6878      	ldr	r0, [r7, #4]
    4ec4:	4b0e      	ldr	r3, [pc, #56]	; (4f00 <_osc32kctrl_init_sources+0x60>)
    4ec6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4ec8:	6878      	ldr	r0, [r7, #4]
    4eca:	4b0e      	ldr	r3, [pc, #56]	; (4f04 <_osc32kctrl_init_sources+0x64>)
    4ecc:	4798      	blx	r3
    4ece:	4603      	mov	r3, r0
    4ed0:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4ed2:	887b      	ldrh	r3, [r7, #2]
    4ed4:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4ed6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4eda:	4619      	mov	r1, r3
    4edc:	6878      	ldr	r0, [r7, #4]
    4ede:	4b0a      	ldr	r3, [pc, #40]	; (4f08 <_osc32kctrl_init_sources+0x68>)
    4ee0:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4ee2:	2100      	movs	r1, #0
    4ee4:	6878      	ldr	r0, [r7, #4]
    4ee6:	4b09      	ldr	r3, [pc, #36]	; (4f0c <_osc32kctrl_init_sources+0x6c>)
    4ee8:	4798      	blx	r3
	(void)calib;
}
    4eea:	bf00      	nop
    4eec:	3708      	adds	r7, #8
    4eee:	46bd      	mov	sp, r7
    4ef0:	bd80      	pop	{r7, pc}
    4ef2:	bf00      	nop
    4ef4:	40001400 	.word	0x40001400
    4ef8:	00004e03 	.word	0x00004e03
    4efc:	00004e21 	.word	0x00004e21
    4f00:	00004e3f 	.word	0x00004e3f
    4f04:	00004e5d 	.word	0x00004e5d
    4f08:	00004e83 	.word	0x00004e83
    4f0c:	00004de5 	.word	0x00004de5

00004f10 <hri_gclk_wait_for_sync>:
{
    4f10:	b480      	push	{r7}
    4f12:	b083      	sub	sp, #12
    4f14:	af00      	add	r7, sp, #0
    4f16:	6078      	str	r0, [r7, #4]
    4f18:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4f1a:	bf00      	nop
    4f1c:	687b      	ldr	r3, [r7, #4]
    4f1e:	685a      	ldr	r2, [r3, #4]
    4f20:	683b      	ldr	r3, [r7, #0]
    4f22:	4013      	ands	r3, r2
    4f24:	2b00      	cmp	r3, #0
    4f26:	d1f9      	bne.n	4f1c <hri_gclk_wait_for_sync+0xc>
}
    4f28:	bf00      	nop
    4f2a:	370c      	adds	r7, #12
    4f2c:	46bd      	mov	sp, r7
    4f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f32:	4770      	bx	lr

00004f34 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4f34:	b480      	push	{r7}
    4f36:	b083      	sub	sp, #12
    4f38:	af00      	add	r7, sp, #0
    4f3a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4f3c:	687b      	ldr	r3, [r7, #4]
    4f3e:	685b      	ldr	r3, [r3, #4]
    4f40:	089b      	lsrs	r3, r3, #2
    4f42:	f003 0301 	and.w	r3, r3, #1
    4f46:	2b00      	cmp	r3, #0
    4f48:	bf14      	ite	ne
    4f4a:	2301      	movne	r3, #1
    4f4c:	2300      	moveq	r3, #0
    4f4e:	b2db      	uxtb	r3, r3
}
    4f50:	4618      	mov	r0, r3
    4f52:	370c      	adds	r7, #12
    4f54:	46bd      	mov	sp, r7
    4f56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f5a:	4770      	bx	lr

00004f5c <hri_gclk_read_SYNCBUSY_reg>:
{
    4f5c:	b480      	push	{r7}
    4f5e:	b083      	sub	sp, #12
    4f60:	af00      	add	r7, sp, #0
    4f62:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	685b      	ldr	r3, [r3, #4]
}
    4f68:	4618      	mov	r0, r3
    4f6a:	370c      	adds	r7, #12
    4f6c:	46bd      	mov	sp, r7
    4f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f72:	4770      	bx	lr

00004f74 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4f74:	b580      	push	{r7, lr}
    4f76:	b086      	sub	sp, #24
    4f78:	af00      	add	r7, sp, #0
    4f7a:	60f8      	str	r0, [r7, #12]
    4f7c:	460b      	mov	r3, r1
    4f7e:	607a      	str	r2, [r7, #4]
    4f80:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4f82:	7afa      	ldrb	r2, [r7, #11]
    4f84:	68fb      	ldr	r3, [r7, #12]
    4f86:	3208      	adds	r2, #8
    4f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f8c:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4f8e:	697b      	ldr	r3, [r7, #20]
    4f90:	f023 030f 	bic.w	r3, r3, #15
    4f94:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4f96:	687b      	ldr	r3, [r7, #4]
    4f98:	f003 030f 	and.w	r3, r3, #15
    4f9c:	697a      	ldr	r2, [r7, #20]
    4f9e:	4313      	orrs	r3, r2
    4fa0:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4fa2:	7afa      	ldrb	r2, [r7, #11]
    4fa4:	68fb      	ldr	r3, [r7, #12]
    4fa6:	3208      	adds	r2, #8
    4fa8:	6979      	ldr	r1, [r7, #20]
    4faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4fae:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4fb2:	68f8      	ldr	r0, [r7, #12]
    4fb4:	4b02      	ldr	r3, [pc, #8]	; (4fc0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4fb6:	4798      	blx	r3
}
    4fb8:	bf00      	nop
    4fba:	3718      	adds	r7, #24
    4fbc:	46bd      	mov	sp, r7
    4fbe:	bd80      	pop	{r7, pc}
    4fc0:	00004f11 	.word	0x00004f11

00004fc4 <hri_gclk_write_PCHCTRL_reg>:
{
    4fc4:	b480      	push	{r7}
    4fc6:	b085      	sub	sp, #20
    4fc8:	af00      	add	r7, sp, #0
    4fca:	60f8      	str	r0, [r7, #12]
    4fcc:	460b      	mov	r3, r1
    4fce:	607a      	str	r2, [r7, #4]
    4fd0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4fd2:	7afa      	ldrb	r2, [r7, #11]
    4fd4:	68fb      	ldr	r3, [r7, #12]
    4fd6:	3220      	adds	r2, #32
    4fd8:	6879      	ldr	r1, [r7, #4]
    4fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4fde:	bf00      	nop
    4fe0:	3714      	adds	r7, #20
    4fe2:	46bd      	mov	sp, r7
    4fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fe8:	4770      	bx	lr

00004fea <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4fea:	b480      	push	{r7}
    4fec:	b085      	sub	sp, #20
    4fee:	af00      	add	r7, sp, #0
    4ff0:	60f8      	str	r0, [r7, #12]
    4ff2:	460b      	mov	r3, r1
    4ff4:	607a      	str	r2, [r7, #4]
    4ff6:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4ff8:	bf00      	nop
    4ffa:	7afa      	ldrb	r2, [r7, #11]
    4ffc:	68f9      	ldr	r1, [r7, #12]
    4ffe:	4613      	mov	r3, r2
    5000:	009b      	lsls	r3, r3, #2
    5002:	4413      	add	r3, r2
    5004:	009b      	lsls	r3, r3, #2
    5006:	440b      	add	r3, r1
    5008:	333c      	adds	r3, #60	; 0x3c
    500a:	681a      	ldr	r2, [r3, #0]
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	4013      	ands	r3, r2
    5010:	2b00      	cmp	r3, #0
    5012:	d1f2      	bne.n	4ffa <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5014:	bf00      	nop
    5016:	3714      	adds	r7, #20
    5018:	46bd      	mov	sp, r7
    501a:	f85d 7b04 	ldr.w	r7, [sp], #4
    501e:	4770      	bx	lr

00005020 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    5020:	b480      	push	{r7}
    5022:	b083      	sub	sp, #12
    5024:	af00      	add	r7, sp, #0
    5026:	6078      	str	r0, [r7, #4]
    5028:	460b      	mov	r3, r1
    502a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    502c:	78fa      	ldrb	r2, [r7, #3]
    502e:	6879      	ldr	r1, [r7, #4]
    5030:	4613      	mov	r3, r2
    5032:	009b      	lsls	r3, r3, #2
    5034:	4413      	add	r3, r2
    5036:	009b      	lsls	r3, r3, #2
    5038:	440b      	add	r3, r1
    503a:	3340      	adds	r3, #64	; 0x40
    503c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    503e:	f003 0301 	and.w	r3, r3, #1
    5042:	2b00      	cmp	r3, #0
    5044:	bf14      	ite	ne
    5046:	2301      	movne	r3, #1
    5048:	2300      	moveq	r3, #0
    504a:	b2db      	uxtb	r3, r3
}
    504c:	4618      	mov	r0, r3
    504e:	370c      	adds	r7, #12
    5050:	46bd      	mov	sp, r7
    5052:	f85d 7b04 	ldr.w	r7, [sp], #4
    5056:	4770      	bx	lr

00005058 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5058:	b480      	push	{r7}
    505a:	b083      	sub	sp, #12
    505c:	af00      	add	r7, sp, #0
    505e:	6078      	str	r0, [r7, #4]
    5060:	460b      	mov	r3, r1
    5062:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5064:	78fa      	ldrb	r2, [r7, #3]
    5066:	6879      	ldr	r1, [r7, #4]
    5068:	4613      	mov	r3, r2
    506a:	009b      	lsls	r3, r3, #2
    506c:	4413      	add	r3, r2
    506e:	009b      	lsls	r3, r3, #2
    5070:	440b      	add	r3, r1
    5072:	3340      	adds	r3, #64	; 0x40
    5074:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5076:	085b      	lsrs	r3, r3, #1
    5078:	f003 0301 	and.w	r3, r3, #1
    507c:	2b00      	cmp	r3, #0
    507e:	bf14      	ite	ne
    5080:	2301      	movne	r3, #1
    5082:	2300      	moveq	r3, #0
    5084:	b2db      	uxtb	r3, r3
}
    5086:	4618      	mov	r0, r3
    5088:	370c      	adds	r7, #12
    508a:	46bd      	mov	sp, r7
    508c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5090:	4770      	bx	lr
	...

00005094 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5094:	b580      	push	{r7, lr}
    5096:	b082      	sub	sp, #8
    5098:	af00      	add	r7, sp, #0
    509a:	6078      	str	r0, [r7, #4]
    509c:	460b      	mov	r3, r1
    509e:	70fb      	strb	r3, [r7, #3]
    50a0:	4613      	mov	r3, r2
    50a2:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    50a4:	78fa      	ldrb	r2, [r7, #3]
    50a6:	6879      	ldr	r1, [r7, #4]
    50a8:	4613      	mov	r3, r2
    50aa:	009b      	lsls	r3, r3, #2
    50ac:	4413      	add	r3, r2
    50ae:	009b      	lsls	r3, r3, #2
    50b0:	440b      	add	r3, r1
    50b2:	3330      	adds	r3, #48	; 0x30
    50b4:	78ba      	ldrb	r2, [r7, #2]
    50b6:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    50b8:	78fb      	ldrb	r3, [r7, #3]
    50ba:	2202      	movs	r2, #2
    50bc:	4619      	mov	r1, r3
    50be:	6878      	ldr	r0, [r7, #4]
    50c0:	4b02      	ldr	r3, [pc, #8]	; (50cc <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    50c2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    50c4:	bf00      	nop
    50c6:	3708      	adds	r7, #8
    50c8:	46bd      	mov	sp, r7
    50ca:	bd80      	pop	{r7, pc}
    50cc:	00004feb 	.word	0x00004feb

000050d0 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    50d0:	b580      	push	{r7, lr}
    50d2:	b084      	sub	sp, #16
    50d4:	af00      	add	r7, sp, #0
    50d6:	60f8      	str	r0, [r7, #12]
    50d8:	460b      	mov	r3, r1
    50da:	607a      	str	r2, [r7, #4]
    50dc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    50de:	7afa      	ldrb	r2, [r7, #11]
    50e0:	68f9      	ldr	r1, [r7, #12]
    50e2:	4613      	mov	r3, r2
    50e4:	009b      	lsls	r3, r3, #2
    50e6:	4413      	add	r3, r2
    50e8:	009b      	lsls	r3, r3, #2
    50ea:	440b      	add	r3, r1
    50ec:	3334      	adds	r3, #52	; 0x34
    50ee:	687a      	ldr	r2, [r7, #4]
    50f0:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    50f2:	7afb      	ldrb	r3, [r7, #11]
    50f4:	2206      	movs	r2, #6
    50f6:	4619      	mov	r1, r3
    50f8:	68f8      	ldr	r0, [r7, #12]
    50fa:	4b03      	ldr	r3, [pc, #12]	; (5108 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    50fc:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    50fe:	bf00      	nop
    5100:	3710      	adds	r7, #16
    5102:	46bd      	mov	sp, r7
    5104:	bd80      	pop	{r7, pc}
    5106:	bf00      	nop
    5108:	00004feb 	.word	0x00004feb

0000510c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    510c:	b480      	push	{r7}
    510e:	b085      	sub	sp, #20
    5110:	af00      	add	r7, sp, #0
    5112:	60f8      	str	r0, [r7, #12]
    5114:	460b      	mov	r3, r1
    5116:	607a      	str	r2, [r7, #4]
    5118:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    511a:	7afa      	ldrb	r2, [r7, #11]
    511c:	68f9      	ldr	r1, [r7, #12]
    511e:	4613      	mov	r3, r2
    5120:	009b      	lsls	r3, r3, #2
    5122:	4413      	add	r3, r2
    5124:	009b      	lsls	r3, r3, #2
    5126:	440b      	add	r3, r1
    5128:	3338      	adds	r3, #56	; 0x38
    512a:	687a      	ldr	r2, [r7, #4]
    512c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    512e:	bf00      	nop
    5130:	3714      	adds	r7, #20
    5132:	46bd      	mov	sp, r7
    5134:	f85d 7b04 	ldr.w	r7, [sp], #4
    5138:	4770      	bx	lr

0000513a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    513a:	b480      	push	{r7}
    513c:	b083      	sub	sp, #12
    513e:	af00      	add	r7, sp, #0
    5140:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5142:	687b      	ldr	r3, [r7, #4]
    5144:	691b      	ldr	r3, [r3, #16]
    5146:	085b      	lsrs	r3, r3, #1
    5148:	f003 0301 	and.w	r3, r3, #1
    514c:	2b00      	cmp	r3, #0
    514e:	bf14      	ite	ne
    5150:	2301      	movne	r3, #1
    5152:	2300      	moveq	r3, #0
    5154:	b2db      	uxtb	r3, r3
}
    5156:	4618      	mov	r0, r3
    5158:	370c      	adds	r7, #12
    515a:	46bd      	mov	sp, r7
    515c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5160:	4770      	bx	lr

00005162 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5162:	b480      	push	{r7}
    5164:	b083      	sub	sp, #12
    5166:	af00      	add	r7, sp, #0
    5168:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    516a:	687b      	ldr	r3, [r7, #4]
    516c:	691b      	ldr	r3, [r3, #16]
    516e:	0a1b      	lsrs	r3, r3, #8
    5170:	f003 0301 	and.w	r3, r3, #1
    5174:	2b00      	cmp	r3, #0
    5176:	bf14      	ite	ne
    5178:	2301      	movne	r3, #1
    517a:	2300      	moveq	r3, #0
    517c:	b2db      	uxtb	r3, r3
}
    517e:	4618      	mov	r0, r3
    5180:	370c      	adds	r7, #12
    5182:	46bd      	mov	sp, r7
    5184:	f85d 7b04 	ldr.w	r7, [sp], #4
    5188:	4770      	bx	lr

0000518a <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    518a:	b480      	push	{r7}
    518c:	b085      	sub	sp, #20
    518e:	af00      	add	r7, sp, #0
    5190:	6078      	str	r0, [r7, #4]
    5192:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5194:	687b      	ldr	r3, [r7, #4]
    5196:	691b      	ldr	r3, [r3, #16]
    5198:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    519a:	68fa      	ldr	r2, [r7, #12]
    519c:	683b      	ldr	r3, [r7, #0]
    519e:	4013      	ands	r3, r2
    51a0:	60fb      	str	r3, [r7, #12]
	return tmp;
    51a2:	68fb      	ldr	r3, [r7, #12]
}
    51a4:	4618      	mov	r0, r3
    51a6:	3714      	adds	r7, #20
    51a8:	46bd      	mov	sp, r7
    51aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ae:	4770      	bx	lr

000051b0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    51b0:	b480      	push	{r7}
    51b2:	b085      	sub	sp, #20
    51b4:	af00      	add	r7, sp, #0
    51b6:	60f8      	str	r0, [r7, #12]
    51b8:	460b      	mov	r3, r1
    51ba:	607a      	str	r2, [r7, #4]
    51bc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    51be:	7afb      	ldrb	r3, [r7, #11]
    51c0:	68fa      	ldr	r2, [r7, #12]
    51c2:	3304      	adds	r3, #4
    51c4:	009b      	lsls	r3, r3, #2
    51c6:	4413      	add	r3, r2
    51c8:	687a      	ldr	r2, [r7, #4]
    51ca:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51cc:	bf00      	nop
    51ce:	3714      	adds	r7, #20
    51d0:	46bd      	mov	sp, r7
    51d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51d6:	4770      	bx	lr

000051d8 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    51d8:	b480      	push	{r7}
    51da:	b083      	sub	sp, #12
    51dc:	af00      	add	r7, sp, #0
    51de:	6078      	str	r0, [r7, #4]
    51e0:	460b      	mov	r3, r1
    51e2:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	78fa      	ldrb	r2, [r7, #3]
    51e8:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51ea:	bf00      	nop
    51ec:	370c      	adds	r7, #12
    51ee:	46bd      	mov	sp, r7
    51f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    51f4:	4770      	bx	lr

000051f6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    51f6:	b480      	push	{r7}
    51f8:	b085      	sub	sp, #20
    51fa:	af00      	add	r7, sp, #0
    51fc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    51fe:	687b      	ldr	r3, [r7, #4]
    5200:	f893 3020 	ldrb.w	r3, [r3, #32]
    5204:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5206:	7bfb      	ldrb	r3, [r7, #15]
    5208:	f003 0301 	and.w	r3, r3, #1
    520c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    520e:	7bfb      	ldrb	r3, [r7, #15]
    5210:	2b00      	cmp	r3, #0
    5212:	bf14      	ite	ne
    5214:	2301      	movne	r3, #1
    5216:	2300      	moveq	r3, #0
    5218:	b2db      	uxtb	r3, r3
}
    521a:	4618      	mov	r0, r3
    521c:	3714      	adds	r7, #20
    521e:	46bd      	mov	sp, r7
    5220:	f85d 7b04 	ldr.w	r7, [sp], #4
    5224:	4770      	bx	lr

00005226 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5226:	b480      	push	{r7}
    5228:	b083      	sub	sp, #12
    522a:	af00      	add	r7, sp, #0
    522c:	6078      	str	r0, [r7, #4]
    522e:	460b      	mov	r3, r1
    5230:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5232:	687b      	ldr	r3, [r7, #4]
    5234:	78fa      	ldrb	r2, [r7, #3]
    5236:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    523a:	bf00      	nop
    523c:	370c      	adds	r7, #12
    523e:	46bd      	mov	sp, r7
    5240:	f85d 7b04 	ldr.w	r7, [sp], #4
    5244:	4770      	bx	lr

00005246 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5246:	b480      	push	{r7}
    5248:	b083      	sub	sp, #12
    524a:	af00      	add	r7, sp, #0
    524c:	6078      	str	r0, [r7, #4]
    524e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5250:	687b      	ldr	r3, [r7, #4]
    5252:	683a      	ldr	r2, [r7, #0]
    5254:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5256:	bf00      	nop
    5258:	370c      	adds	r7, #12
    525a:	46bd      	mov	sp, r7
    525c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5260:	4770      	bx	lr

00005262 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5262:	b480      	push	{r7}
    5264:	b083      	sub	sp, #12
    5266:	af00      	add	r7, sp, #0
    5268:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    526a:	687b      	ldr	r3, [r7, #4]
    526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    526e:	4618      	mov	r0, r3
    5270:	370c      	adds	r7, #12
    5272:	46bd      	mov	sp, r7
    5274:	f85d 7b04 	ldr.w	r7, [sp], #4
    5278:	4770      	bx	lr

0000527a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    527a:	b480      	push	{r7}
    527c:	b083      	sub	sp, #12
    527e:	af00      	add	r7, sp, #0
    5280:	6078      	str	r0, [r7, #4]
    5282:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5284:	687b      	ldr	r3, [r7, #4]
    5286:	683a      	ldr	r2, [r7, #0]
    5288:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    528a:	bf00      	nop
    528c:	370c      	adds	r7, #12
    528e:	46bd      	mov	sp, r7
    5290:	f85d 7b04 	ldr.w	r7, [sp], #4
    5294:	4770      	bx	lr

00005296 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5296:	b480      	push	{r7}
    5298:	b085      	sub	sp, #20
    529a:	af00      	add	r7, sp, #0
    529c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    529e:	687b      	ldr	r3, [r7, #4]
    52a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    52a4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    52a6:	7bfb      	ldrb	r3, [r7, #15]
    52a8:	085b      	lsrs	r3, r3, #1
    52aa:	b2db      	uxtb	r3, r3
    52ac:	f003 0301 	and.w	r3, r3, #1
    52b0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    52b2:	7bfb      	ldrb	r3, [r7, #15]
    52b4:	2b00      	cmp	r3, #0
    52b6:	bf14      	ite	ne
    52b8:	2301      	movne	r3, #1
    52ba:	2300      	moveq	r3, #0
    52bc:	b2db      	uxtb	r3, r3
}
    52be:	4618      	mov	r0, r3
    52c0:	3714      	adds	r7, #20
    52c2:	46bd      	mov	sp, r7
    52c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    52c8:	4770      	bx	lr

000052ca <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    52ca:	b480      	push	{r7}
    52cc:	b085      	sub	sp, #20
    52ce:	af00      	add	r7, sp, #0
    52d0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    52d2:	687b      	ldr	r3, [r7, #4]
    52d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    52d8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    52da:	7bfb      	ldrb	r3, [r7, #15]
    52dc:	089b      	lsrs	r3, r3, #2
    52de:	b2db      	uxtb	r3, r3
    52e0:	f003 0301 	and.w	r3, r3, #1
    52e4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    52e6:	7bfb      	ldrb	r3, [r7, #15]
    52e8:	2b00      	cmp	r3, #0
    52ea:	bf14      	ite	ne
    52ec:	2301      	movne	r3, #1
    52ee:	2300      	moveq	r3, #0
    52f0:	b2db      	uxtb	r3, r3
}
    52f2:	4618      	mov	r0, r3
    52f4:	3714      	adds	r7, #20
    52f6:	46bd      	mov	sp, r7
    52f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    52fc:	4770      	bx	lr

000052fe <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    52fe:	b480      	push	{r7}
    5300:	b085      	sub	sp, #20
    5302:	af00      	add	r7, sp, #0
    5304:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5306:	687b      	ldr	r3, [r7, #4]
    5308:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    530c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    530e:	7bfb      	ldrb	r3, [r7, #15]
    5310:	08db      	lsrs	r3, r3, #3
    5312:	b2db      	uxtb	r3, r3
    5314:	f003 0301 	and.w	r3, r3, #1
    5318:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    531a:	7bfb      	ldrb	r3, [r7, #15]
    531c:	2b00      	cmp	r3, #0
    531e:	bf14      	ite	ne
    5320:	2301      	movne	r3, #1
    5322:	2300      	moveq	r3, #0
    5324:	b2db      	uxtb	r3, r3
}
    5326:	4618      	mov	r0, r3
    5328:	3714      	adds	r7, #20
    532a:	46bd      	mov	sp, r7
    532c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5330:	4770      	bx	lr

00005332 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5332:	b480      	push	{r7}
    5334:	b085      	sub	sp, #20
    5336:	af00      	add	r7, sp, #0
    5338:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    533a:	687b      	ldr	r3, [r7, #4]
    533c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5340:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5342:	7bfb      	ldrb	r3, [r7, #15]
    5344:	091b      	lsrs	r3, r3, #4
    5346:	b2db      	uxtb	r3, r3
    5348:	f003 0301 	and.w	r3, r3, #1
    534c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    534e:	7bfb      	ldrb	r3, [r7, #15]
    5350:	2b00      	cmp	r3, #0
    5352:	bf14      	ite	ne
    5354:	2301      	movne	r3, #1
    5356:	2300      	moveq	r3, #0
    5358:	b2db      	uxtb	r3, r3
}
    535a:	4618      	mov	r0, r3
    535c:	3714      	adds	r7, #20
    535e:	46bd      	mov	sp, r7
    5360:	f85d 7b04 	ldr.w	r7, [sp], #4
    5364:	4770      	bx	lr
	...

00005368 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5368:	b580      	push	{r7, lr}
    536a:	b082      	sub	sp, #8
    536c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    536e:	4b0a      	ldr	r3, [pc, #40]	; (5398 <_oscctrl_init_sources+0x30>)
    5370:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5372:	4a0a      	ldr	r2, [pc, #40]	; (539c <_oscctrl_init_sources+0x34>)
    5374:	2101      	movs	r1, #1
    5376:	6878      	ldr	r0, [r7, #4]
    5378:	4b09      	ldr	r3, [pc, #36]	; (53a0 <_oscctrl_init_sources+0x38>)
    537a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    537c:	bf00      	nop
    537e:	6878      	ldr	r0, [r7, #4]
    5380:	4b08      	ldr	r3, [pc, #32]	; (53a4 <_oscctrl_init_sources+0x3c>)
    5382:	4798      	blx	r3
    5384:	4603      	mov	r3, r0
    5386:	f083 0301 	eor.w	r3, r3, #1
    538a:	b2db      	uxtb	r3, r3
    538c:	2b00      	cmp	r3, #0
    538e:	d1f6      	bne.n	537e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5390:	bf00      	nop
    5392:	3708      	adds	r7, #8
    5394:	46bd      	mov	sp, r7
    5396:	bd80      	pop	{r7, pc}
    5398:	40001000 	.word	0x40001000
    539c:	03002646 	.word	0x03002646
    53a0:	000051b1 	.word	0x000051b1
    53a4:	0000513b 	.word	0x0000513b

000053a8 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    53a8:	b580      	push	{r7, lr}
    53aa:	b084      	sub	sp, #16
    53ac:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    53ae:	4b6b      	ldr	r3, [pc, #428]	; (555c <_oscctrl_init_referenced_generators+0x1b4>)
    53b0:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    53b2:	2204      	movs	r2, #4
    53b4:	2100      	movs	r1, #0
    53b6:	486a      	ldr	r0, [pc, #424]	; (5560 <_oscctrl_init_referenced_generators+0x1b8>)
    53b8:	4b6a      	ldr	r3, [pc, #424]	; (5564 <_oscctrl_init_referenced_generators+0x1bc>)
    53ba:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    53bc:	bf00      	nop
    53be:	4868      	ldr	r0, [pc, #416]	; (5560 <_oscctrl_init_referenced_generators+0x1b8>)
    53c0:	4b69      	ldr	r3, [pc, #420]	; (5568 <_oscctrl_init_referenced_generators+0x1c0>)
    53c2:	4798      	blx	r3
    53c4:	4603      	mov	r3, r0
    53c6:	2b00      	cmp	r3, #0
    53c8:	d1f9      	bne.n	53be <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    53ca:	2100      	movs	r1, #0
    53cc:	68f8      	ldr	r0, [r7, #12]
    53ce:	4b67      	ldr	r3, [pc, #412]	; (556c <_oscctrl_init_referenced_generators+0x1c4>)
    53d0:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    53d2:	4967      	ldr	r1, [pc, #412]	; (5570 <_oscctrl_init_referenced_generators+0x1c8>)
    53d4:	68f8      	ldr	r0, [r7, #12]
    53d6:	4b67      	ldr	r3, [pc, #412]	; (5574 <_oscctrl_init_referenced_generators+0x1cc>)
    53d8:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    53da:	bf00      	nop
    53dc:	68f8      	ldr	r0, [r7, #12]
    53de:	4b66      	ldr	r3, [pc, #408]	; (5578 <_oscctrl_init_referenced_generators+0x1d0>)
    53e0:	4798      	blx	r3
    53e2:	4603      	mov	r3, r0
    53e4:	2b00      	cmp	r3, #0
    53e6:	d1f9      	bne.n	53dc <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    53e8:	2100      	movs	r1, #0
    53ea:	68f8      	ldr	r0, [r7, #12]
    53ec:	4b63      	ldr	r3, [pc, #396]	; (557c <_oscctrl_init_referenced_generators+0x1d4>)
    53ee:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    53f0:	bf00      	nop
    53f2:	68f8      	ldr	r0, [r7, #12]
    53f4:	4b62      	ldr	r3, [pc, #392]	; (5580 <_oscctrl_init_referenced_generators+0x1d8>)
    53f6:	4798      	blx	r3
    53f8:	4603      	mov	r3, r0
    53fa:	2b00      	cmp	r3, #0
    53fc:	d1f9      	bne.n	53f2 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    53fe:	2302      	movs	r3, #2
    5400:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5402:	7afb      	ldrb	r3, [r7, #11]
    5404:	4619      	mov	r1, r3
    5406:	68f8      	ldr	r0, [r7, #12]
    5408:	4b58      	ldr	r3, [pc, #352]	; (556c <_oscctrl_init_referenced_generators+0x1c4>)
    540a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    540c:	bf00      	nop
    540e:	68f8      	ldr	r0, [r7, #12]
    5410:	4b5c      	ldr	r3, [pc, #368]	; (5584 <_oscctrl_init_referenced_generators+0x1dc>)
    5412:	4798      	blx	r3
    5414:	4603      	mov	r3, r0
    5416:	2b00      	cmp	r3, #0
    5418:	d1f9      	bne.n	540e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    541a:	68f8      	ldr	r0, [r7, #12]
    541c:	4b5a      	ldr	r3, [pc, #360]	; (5588 <_oscctrl_init_referenced_generators+0x1e0>)
    541e:	4798      	blx	r3
    5420:	4603      	mov	r3, r0
    5422:	4619      	mov	r1, r3
    5424:	68f8      	ldr	r0, [r7, #12]
    5426:	4b59      	ldr	r3, [pc, #356]	; (558c <_oscctrl_init_referenced_generators+0x1e4>)
    5428:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    542a:	bf00      	nop
    542c:	68f8      	ldr	r0, [r7, #12]
    542e:	4b58      	ldr	r3, [pc, #352]	; (5590 <_oscctrl_init_referenced_generators+0x1e8>)
    5430:	4798      	blx	r3
    5432:	4603      	mov	r3, r0
    5434:	2b00      	cmp	r3, #0
    5436:	d1f9      	bne.n	542c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5438:	2319      	movs	r3, #25
    543a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    543c:	7afb      	ldrb	r3, [r7, #11]
    543e:	4619      	mov	r1, r3
    5440:	68f8      	ldr	r0, [r7, #12]
    5442:	4b4e      	ldr	r3, [pc, #312]	; (557c <_oscctrl_init_referenced_generators+0x1d4>)
    5444:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5446:	bf00      	nop
    5448:	68f8      	ldr	r0, [r7, #12]
    544a:	4b4d      	ldr	r3, [pc, #308]	; (5580 <_oscctrl_init_referenced_generators+0x1d8>)
    544c:	4798      	blx	r3
    544e:	4603      	mov	r3, r0
    5450:	2b00      	cmp	r3, #0
    5452:	d1f9      	bne.n	5448 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5454:	2245      	movs	r2, #69	; 0x45
    5456:	2101      	movs	r1, #1
    5458:	4841      	ldr	r0, [pc, #260]	; (5560 <_oscctrl_init_referenced_generators+0x1b8>)
    545a:	4b4e      	ldr	r3, [pc, #312]	; (5594 <_oscctrl_init_referenced_generators+0x1ec>)
    545c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    545e:	223b      	movs	r2, #59	; 0x3b
    5460:	2100      	movs	r1, #0
    5462:	68f8      	ldr	r0, [r7, #12]
    5464:	4b4c      	ldr	r3, [pc, #304]	; (5598 <_oscctrl_init_referenced_generators+0x1f0>)
    5466:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5468:	f44f 6201 	mov.w	r2, #2064	; 0x810
    546c:	2100      	movs	r1, #0
    546e:	68f8      	ldr	r0, [r7, #12]
    5470:	4b4a      	ldr	r3, [pc, #296]	; (559c <_oscctrl_init_referenced_generators+0x1f4>)
    5472:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5474:	2242      	movs	r2, #66	; 0x42
    5476:	2100      	movs	r1, #0
    5478:	68f8      	ldr	r0, [r7, #12]
    547a:	4b49      	ldr	r3, [pc, #292]	; (55a0 <_oscctrl_init_referenced_generators+0x1f8>)
    547c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    547e:	4a49      	ldr	r2, [pc, #292]	; (55a4 <_oscctrl_init_referenced_generators+0x1fc>)
    5480:	2101      	movs	r1, #1
    5482:	68f8      	ldr	r0, [r7, #12]
    5484:	4b44      	ldr	r3, [pc, #272]	; (5598 <_oscctrl_init_referenced_generators+0x1f0>)
    5486:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5488:	f44f 6203 	mov.w	r2, #2096	; 0x830
    548c:	2101      	movs	r1, #1
    548e:	68f8      	ldr	r0, [r7, #12]
    5490:	4b42      	ldr	r3, [pc, #264]	; (559c <_oscctrl_init_referenced_generators+0x1f4>)
    5492:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5494:	2202      	movs	r2, #2
    5496:	2101      	movs	r1, #1
    5498:	68f8      	ldr	r0, [r7, #12]
    549a:	4b41      	ldr	r3, [pc, #260]	; (55a0 <_oscctrl_init_referenced_generators+0x1f8>)
    549c:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    549e:	68f8      	ldr	r0, [r7, #12]
    54a0:	4b41      	ldr	r3, [pc, #260]	; (55a8 <_oscctrl_init_referenced_generators+0x200>)
    54a2:	4798      	blx	r3
    54a4:	4603      	mov	r3, r0
    54a6:	2b00      	cmp	r3, #0
    54a8:	d00c      	beq.n	54c4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    54aa:	f44f 6310 	mov.w	r3, #2304	; 0x900
    54ae:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    54b0:	bf00      	nop
    54b2:	6879      	ldr	r1, [r7, #4]
    54b4:	68f8      	ldr	r0, [r7, #12]
    54b6:	4b3d      	ldr	r3, [pc, #244]	; (55ac <_oscctrl_init_referenced_generators+0x204>)
    54b8:	4798      	blx	r3
    54ba:	4602      	mov	r2, r0
    54bc:	687b      	ldr	r3, [r7, #4]
    54be:	429a      	cmp	r2, r3
    54c0:	d1f7      	bne.n	54b2 <_oscctrl_init_referenced_generators+0x10a>
    54c2:	e009      	b.n	54d8 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    54c4:	bf00      	nop
    54c6:	68f8      	ldr	r0, [r7, #12]
    54c8:	4b39      	ldr	r3, [pc, #228]	; (55b0 <_oscctrl_init_referenced_generators+0x208>)
    54ca:	4798      	blx	r3
    54cc:	4603      	mov	r3, r0
    54ce:	f083 0301 	eor.w	r3, r3, #1
    54d2:	b2db      	uxtb	r3, r3
    54d4:	2b00      	cmp	r3, #0
    54d6:	d1f6      	bne.n	54c6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    54d8:	bf00      	nop
    54da:	2100      	movs	r1, #0
    54dc:	68f8      	ldr	r0, [r7, #12]
    54de:	4b35      	ldr	r3, [pc, #212]	; (55b4 <_oscctrl_init_referenced_generators+0x20c>)
    54e0:	4798      	blx	r3
    54e2:	4603      	mov	r3, r0
    54e4:	f083 0301 	eor.w	r3, r3, #1
    54e8:	b2db      	uxtb	r3, r3
    54ea:	2b00      	cmp	r3, #0
    54ec:	d009      	beq.n	5502 <_oscctrl_init_referenced_generators+0x15a>
    54ee:	2100      	movs	r1, #0
    54f0:	68f8      	ldr	r0, [r7, #12]
    54f2:	4b31      	ldr	r3, [pc, #196]	; (55b8 <_oscctrl_init_referenced_generators+0x210>)
    54f4:	4798      	blx	r3
    54f6:	4603      	mov	r3, r0
    54f8:	f083 0301 	eor.w	r3, r3, #1
    54fc:	b2db      	uxtb	r3, r3
    54fe:	2b00      	cmp	r3, #0
    5500:	d1eb      	bne.n	54da <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5502:	bf00      	nop
    5504:	2101      	movs	r1, #1
    5506:	68f8      	ldr	r0, [r7, #12]
    5508:	4b2a      	ldr	r3, [pc, #168]	; (55b4 <_oscctrl_init_referenced_generators+0x20c>)
    550a:	4798      	blx	r3
    550c:	4603      	mov	r3, r0
    550e:	f083 0301 	eor.w	r3, r3, #1
    5512:	b2db      	uxtb	r3, r3
    5514:	2b00      	cmp	r3, #0
    5516:	d009      	beq.n	552c <_oscctrl_init_referenced_generators+0x184>
    5518:	2101      	movs	r1, #1
    551a:	68f8      	ldr	r0, [r7, #12]
    551c:	4b26      	ldr	r3, [pc, #152]	; (55b8 <_oscctrl_init_referenced_generators+0x210>)
    551e:	4798      	blx	r3
    5520:	4603      	mov	r3, r0
    5522:	f083 0301 	eor.w	r3, r3, #1
    5526:	b2db      	uxtb	r3, r3
    5528:	2b00      	cmp	r3, #0
    552a:	d1eb      	bne.n	5504 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    552c:	bf00      	nop
    552e:	480c      	ldr	r0, [pc, #48]	; (5560 <_oscctrl_init_referenced_generators+0x1b8>)
    5530:	4b22      	ldr	r3, [pc, #136]	; (55bc <_oscctrl_init_referenced_generators+0x214>)
    5532:	4798      	blx	r3
    5534:	4603      	mov	r3, r0
    5536:	2b00      	cmp	r3, #0
    5538:	d1f9      	bne.n	552e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    553a:	2207      	movs	r2, #7
    553c:	2100      	movs	r1, #0
    553e:	4808      	ldr	r0, [pc, #32]	; (5560 <_oscctrl_init_referenced_generators+0x1b8>)
    5540:	4b08      	ldr	r3, [pc, #32]	; (5564 <_oscctrl_init_referenced_generators+0x1bc>)
    5542:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5544:	bf00      	nop
    5546:	4806      	ldr	r0, [pc, #24]	; (5560 <_oscctrl_init_referenced_generators+0x1b8>)
    5548:	4b07      	ldr	r3, [pc, #28]	; (5568 <_oscctrl_init_referenced_generators+0x1c0>)
    554a:	4798      	blx	r3
    554c:	4603      	mov	r3, r0
    554e:	2b00      	cmp	r3, #0
    5550:	d1f9      	bne.n	5546 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5552:	bf00      	nop
    5554:	3710      	adds	r7, #16
    5556:	46bd      	mov	sp, r7
    5558:	bd80      	pop	{r7, pc}
    555a:	bf00      	nop
    555c:	40001000 	.word	0x40001000
    5560:	40001c00 	.word	0x40001c00
    5564:	00004f75 	.word	0x00004f75
    5568:	00004f35 	.word	0x00004f35
    556c:	000051d9 	.word	0x000051d9
    5570:	0401bb80 	.word	0x0401bb80
    5574:	0000527b 	.word	0x0000527b
    5578:	00005333 	.word	0x00005333
    557c:	00005227 	.word	0x00005227
    5580:	000052cb 	.word	0x000052cb
    5584:	00005297 	.word	0x00005297
    5588:	00005263 	.word	0x00005263
    558c:	00005247 	.word	0x00005247
    5590:	000052ff 	.word	0x000052ff
    5594:	00004fc5 	.word	0x00004fc5
    5598:	000050d1 	.word	0x000050d1
    559c:	0000510d 	.word	0x0000510d
    55a0:	00005095 	.word	0x00005095
    55a4:	000407a0 	.word	0x000407a0
    55a8:	000051f7 	.word	0x000051f7
    55ac:	0000518b 	.word	0x0000518b
    55b0:	00005163 	.word	0x00005163
    55b4:	00005021 	.word	0x00005021
    55b8:	00005059 	.word	0x00005059
    55bc:	00004f5d 	.word	0x00004f5d

000055c0 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    55c0:	b480      	push	{r7}
    55c2:	b083      	sub	sp, #12
    55c4:	af00      	add	r7, sp, #0
    55c6:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	69db      	ldr	r3, [r3, #28]
    55cc:	0a9b      	lsrs	r3, r3, #10
    55ce:	f003 0301 	and.w	r3, r3, #1
    55d2:	2b00      	cmp	r3, #0
    55d4:	bf14      	ite	ne
    55d6:	2301      	movne	r3, #1
    55d8:	2300      	moveq	r3, #0
    55da:	b2db      	uxtb	r3, r3
}
    55dc:	4618      	mov	r0, r3
    55de:	370c      	adds	r7, #12
    55e0:	46bd      	mov	sp, r7
    55e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55e6:	4770      	bx	lr

000055e8 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    55e8:	b480      	push	{r7}
    55ea:	b083      	sub	sp, #12
    55ec:	af00      	add	r7, sp, #0
    55ee:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    55f0:	687b      	ldr	r3, [r7, #4]
    55f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    55f6:	61da      	str	r2, [r3, #28]
}
    55f8:	bf00      	nop
    55fa:	370c      	adds	r7, #12
    55fc:	46bd      	mov	sp, r7
    55fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5602:	4770      	bx	lr

00005604 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5604:	b480      	push	{r7}
    5606:	b083      	sub	sp, #12
    5608:	af00      	add	r7, sp, #0
    560a:	6078      	str	r0, [r7, #4]
    560c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    560e:	687b      	ldr	r3, [r7, #4]
    5610:	683a      	ldr	r2, [r7, #0]
    5612:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5614:	bf00      	nop
    5616:	370c      	adds	r7, #12
    5618:	46bd      	mov	sp, r7
    561a:	f85d 7b04 	ldr.w	r7, [sp], #4
    561e:	4770      	bx	lr

00005620 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5620:	b480      	push	{r7}
    5622:	b083      	sub	sp, #12
    5624:	af00      	add	r7, sp, #0
    5626:	6078      	str	r0, [r7, #4]
    5628:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    562a:	687b      	ldr	r3, [r7, #4]
    562c:	683a      	ldr	r2, [r7, #0]
    562e:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5630:	bf00      	nop
    5632:	370c      	adds	r7, #12
    5634:	46bd      	mov	sp, r7
    5636:	f85d 7b04 	ldr.w	r7, [sp], #4
    563a:	4770      	bx	lr

0000563c <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    563c:	b480      	push	{r7}
    563e:	b083      	sub	sp, #12
    5640:	af00      	add	r7, sp, #0
    5642:	6078      	str	r0, [r7, #4]
    5644:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5646:	687b      	ldr	r3, [r7, #4]
    5648:	683a      	ldr	r2, [r7, #0]
    564a:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    564c:	bf00      	nop
    564e:	370c      	adds	r7, #12
    5650:	46bd      	mov	sp, r7
    5652:	f85d 7b04 	ldr.w	r7, [sp], #4
    5656:	4770      	bx	lr

00005658 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5658:	b480      	push	{r7}
    565a:	b083      	sub	sp, #12
    565c:	af00      	add	r7, sp, #0
    565e:	6078      	str	r0, [r7, #4]
    5660:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5662:	687b      	ldr	r3, [r7, #4]
    5664:	683a      	ldr	r2, [r7, #0]
    5666:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5668:	bf00      	nop
    566a:	370c      	adds	r7, #12
    566c:	46bd      	mov	sp, r7
    566e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5672:	4770      	bx	lr

00005674 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5674:	b480      	push	{r7}
    5676:	b085      	sub	sp, #20
    5678:	af00      	add	r7, sp, #0
    567a:	6078      	str	r0, [r7, #4]
    567c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    567e:	687b      	ldr	r3, [r7, #4]
    5680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5682:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5684:	68fb      	ldr	r3, [r7, #12]
    5686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    568a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    568c:	683b      	ldr	r3, [r7, #0]
    568e:	b2db      	uxtb	r3, r3
    5690:	68fa      	ldr	r2, [r7, #12]
    5692:	4313      	orrs	r3, r2
    5694:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5696:	687b      	ldr	r3, [r7, #4]
    5698:	68fa      	ldr	r2, [r7, #12]
    569a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    569c:	bf00      	nop
    569e:	3714      	adds	r7, #20
    56a0:	46bd      	mov	sp, r7
    56a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    56a6:	4770      	bx	lr

000056a8 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    56a8:	b480      	push	{r7}
    56aa:	b085      	sub	sp, #20
    56ac:	af00      	add	r7, sp, #0
    56ae:	6078      	str	r0, [r7, #4]
    56b0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    56b2:	687b      	ldr	r3, [r7, #4]
    56b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    56b6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    56b8:	68fb      	ldr	r3, [r7, #12]
    56ba:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    56be:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    56c0:	683b      	ldr	r3, [r7, #0]
    56c2:	041b      	lsls	r3, r3, #16
    56c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    56c8:	68fa      	ldr	r2, [r7, #12]
    56ca:	4313      	orrs	r3, r2
    56cc:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	68fa      	ldr	r2, [r7, #12]
    56d2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    56d4:	bf00      	nop
    56d6:	3714      	adds	r7, #20
    56d8:	46bd      	mov	sp, r7
    56da:	f85d 7b04 	ldr.w	r7, [sp], #4
    56de:	4770      	bx	lr

000056e0 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    56e0:	b480      	push	{r7}
    56e2:	b083      	sub	sp, #12
    56e4:	af00      	add	r7, sp, #0
    56e6:	6078      	str	r0, [r7, #4]
    56e8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    56ea:	687b      	ldr	r3, [r7, #4]
    56ec:	683a      	ldr	r2, [r7, #0]
    56ee:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    56f0:	bf00      	nop
    56f2:	370c      	adds	r7, #12
    56f4:	46bd      	mov	sp, r7
    56f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56fa:	4770      	bx	lr

000056fc <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    56fc:	b480      	push	{r7}
    56fe:	b083      	sub	sp, #12
    5700:	af00      	add	r7, sp, #0
    5702:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5708:	4618      	mov	r0, r3
    570a:	370c      	adds	r7, #12
    570c:	46bd      	mov	sp, r7
    570e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5712:	4770      	bx	lr

00005714 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5714:	b480      	push	{r7}
    5716:	b085      	sub	sp, #20
    5718:	af00      	add	r7, sp, #0
    571a:	60f8      	str	r0, [r7, #12]
    571c:	60b9      	str	r1, [r7, #8]
    571e:	607a      	str	r2, [r7, #4]
	while (count--) {
    5720:	e007      	b.n	5732 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5722:	68fb      	ldr	r3, [r7, #12]
    5724:	1c5a      	adds	r2, r3, #1
    5726:	60fa      	str	r2, [r7, #12]
    5728:	68ba      	ldr	r2, [r7, #8]
    572a:	1c51      	adds	r1, r2, #1
    572c:	60b9      	str	r1, [r7, #8]
    572e:	7812      	ldrb	r2, [r2, #0]
    5730:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5732:	687b      	ldr	r3, [r7, #4]
    5734:	1e5a      	subs	r2, r3, #1
    5736:	607a      	str	r2, [r7, #4]
    5738:	2b00      	cmp	r3, #0
    573a:	d1f2      	bne.n	5722 <_qspi_memcpy+0xe>
	}
}
    573c:	bf00      	nop
    573e:	3714      	adds	r7, #20
    5740:	46bd      	mov	sp, r7
    5742:	f85d 7b04 	ldr.w	r7, [sp], #4
    5746:	4770      	bx	lr

00005748 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5748:	b580      	push	{r7, lr}
    574a:	b082      	sub	sp, #8
    574c:	af00      	add	r7, sp, #0
    574e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5750:	4903      	ldr	r1, [pc, #12]	; (5760 <_qspi_end_transfer+0x18>)
    5752:	6878      	ldr	r0, [r7, #4]
    5754:	4b03      	ldr	r3, [pc, #12]	; (5764 <_qspi_end_transfer+0x1c>)
    5756:	4798      	blx	r3
}
    5758:	bf00      	nop
    575a:	3708      	adds	r7, #8
    575c:	46bd      	mov	sp, r7
    575e:	bd80      	pop	{r7, pc}
    5760:	01000002 	.word	0x01000002
    5764:	00005605 	.word	0x00005605

00005768 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5768:	b580      	push	{r7, lr}
    576a:	b082      	sub	sp, #8
    576c:	af00      	add	r7, sp, #0
    576e:	6078      	str	r0, [r7, #4]
    5770:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5772:	687b      	ldr	r3, [r7, #4]
    5774:	2b00      	cmp	r3, #0
    5776:	d004      	beq.n	5782 <_qspi_sync_init+0x1a>
    5778:	683b      	ldr	r3, [r7, #0]
    577a:	2b00      	cmp	r3, #0
    577c:	d001      	beq.n	5782 <_qspi_sync_init+0x1a>
    577e:	2301      	movs	r3, #1
    5780:	e000      	b.n	5784 <_qspi_sync_init+0x1c>
    5782:	2300      	movs	r3, #0
    5784:	f003 0301 	and.w	r3, r3, #1
    5788:	b2db      	uxtb	r3, r3
    578a:	2240      	movs	r2, #64	; 0x40
    578c:	490c      	ldr	r1, [pc, #48]	; (57c0 <_qspi_sync_init+0x58>)
    578e:	4618      	mov	r0, r3
    5790:	4b0c      	ldr	r3, [pc, #48]	; (57c4 <_qspi_sync_init+0x5c>)
    5792:	4798      	blx	r3
	dev->prvt = hw;
    5794:	687b      	ldr	r3, [r7, #4]
    5796:	683a      	ldr	r2, [r7, #0]
    5798:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    579a:	687b      	ldr	r3, [r7, #4]
    579c:	681b      	ldr	r3, [r3, #0]
    579e:	2101      	movs	r1, #1
    57a0:	4618      	mov	r0, r3
    57a2:	4b09      	ldr	r3, [pc, #36]	; (57c8 <_qspi_sync_init+0x60>)
    57a4:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    57a6:	4909      	ldr	r1, [pc, #36]	; (57cc <_qspi_sync_init+0x64>)
    57a8:	6838      	ldr	r0, [r7, #0]
    57aa:	4b09      	ldr	r3, [pc, #36]	; (57d0 <_qspi_sync_init+0x68>)
    57ac:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    57ae:	4909      	ldr	r1, [pc, #36]	; (57d4 <_qspi_sync_init+0x6c>)
    57b0:	6838      	ldr	r0, [r7, #0]
    57b2:	4b09      	ldr	r3, [pc, #36]	; (57d8 <_qspi_sync_init+0x70>)
    57b4:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    57b6:	2300      	movs	r3, #0
}
    57b8:	4618      	mov	r0, r3
    57ba:	3708      	adds	r7, #8
    57bc:	46bd      	mov	sp, r7
    57be:	bd80      	pop	{r7, pc}
    57c0:	0000ef1c 	.word	0x0000ef1c
    57c4:	00003911 	.word	0x00003911
    57c8:	00005605 	.word	0x00005605
    57cc:	06000011 	.word	0x06000011
    57d0:	00005621 	.word	0x00005621
    57d4:	00241300 	.word	0x00241300
    57d8:	0000563d 	.word	0x0000563d

000057dc <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    57dc:	b580      	push	{r7, lr}
    57de:	b082      	sub	sp, #8
    57e0:	af00      	add	r7, sp, #0
    57e2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    57e4:	687b      	ldr	r3, [r7, #4]
    57e6:	681b      	ldr	r3, [r3, #0]
    57e8:	2102      	movs	r1, #2
    57ea:	4618      	mov	r0, r3
    57ec:	4b03      	ldr	r3, [pc, #12]	; (57fc <_qspi_sync_enable+0x20>)
    57ee:	4798      	blx	r3
	return ERR_NONE;
    57f0:	2300      	movs	r3, #0
}
    57f2:	4618      	mov	r0, r3
    57f4:	3708      	adds	r7, #8
    57f6:	46bd      	mov	sp, r7
    57f8:	bd80      	pop	{r7, pc}
    57fa:	bf00      	nop
    57fc:	00005605 	.word	0x00005605

00005800 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5800:	b580      	push	{r7, lr}
    5802:	b082      	sub	sp, #8
    5804:	af00      	add	r7, sp, #0
    5806:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5808:	687b      	ldr	r3, [r7, #4]
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	2100      	movs	r1, #0
    580e:	4618      	mov	r0, r3
    5810:	4b03      	ldr	r3, [pc, #12]	; (5820 <_qspi_sync_disable+0x20>)
    5812:	4798      	blx	r3
	return ERR_NONE;
    5814:	2300      	movs	r3, #0
}
    5816:	4618      	mov	r0, r3
    5818:	3708      	adds	r7, #8
    581a:	46bd      	mov	sp, r7
    581c:	bd80      	pop	{r7, pc}
    581e:	bf00      	nop
    5820:	00005605 	.word	0x00005605

00005824 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5824:	b580      	push	{r7, lr}
    5826:	b084      	sub	sp, #16
    5828:	af00      	add	r7, sp, #0
    582a:	6078      	str	r0, [r7, #4]
    582c:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    582e:	687b      	ldr	r3, [r7, #4]
    5830:	681b      	ldr	r3, [r3, #0]
    5832:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5834:	683b      	ldr	r3, [r7, #0]
    5836:	781b      	ldrb	r3, [r3, #0]
    5838:	f003 0320 	and.w	r3, r3, #32
    583c:	b2db      	uxtb	r3, r3
    583e:	2b00      	cmp	r3, #0
    5840:	d005      	beq.n	584e <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5842:	683b      	ldr	r3, [r7, #0]
    5844:	689b      	ldr	r3, [r3, #8]
    5846:	4619      	mov	r1, r3
    5848:	68f8      	ldr	r0, [r7, #12]
    584a:	4b13      	ldr	r3, [pc, #76]	; (5898 <_qspi_sync_command_set_ifr+0x74>)
    584c:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    584e:	683b      	ldr	r3, [r7, #0]
    5850:	781b      	ldrb	r3, [r3, #0]
    5852:	f003 0310 	and.w	r3, r3, #16
    5856:	b2db      	uxtb	r3, r3
    5858:	2b00      	cmp	r3, #0
    585a:	d005      	beq.n	5868 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    585c:	683b      	ldr	r3, [r7, #0]
    585e:	791b      	ldrb	r3, [r3, #4]
    5860:	4619      	mov	r1, r3
    5862:	68f8      	ldr	r0, [r7, #12]
    5864:	4b0d      	ldr	r3, [pc, #52]	; (589c <_qspi_sync_command_set_ifr+0x78>)
    5866:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5868:	683b      	ldr	r3, [r7, #0]
    586a:	781b      	ldrb	r3, [r3, #0]
    586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5870:	b2db      	uxtb	r3, r3
    5872:	2b00      	cmp	r3, #0
    5874:	d005      	beq.n	5882 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5876:	683b      	ldr	r3, [r7, #0]
    5878:	795b      	ldrb	r3, [r3, #5]
    587a:	4619      	mov	r1, r3
    587c:	68f8      	ldr	r0, [r7, #12]
    587e:	4b08      	ldr	r3, [pc, #32]	; (58a0 <_qspi_sync_command_set_ifr+0x7c>)
    5880:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5882:	683b      	ldr	r3, [r7, #0]
    5884:	681b      	ldr	r3, [r3, #0]
    5886:	4619      	mov	r1, r3
    5888:	68f8      	ldr	r0, [r7, #12]
    588a:	4b06      	ldr	r3, [pc, #24]	; (58a4 <_qspi_sync_command_set_ifr+0x80>)
    588c:	4798      	blx	r3
}
    588e:	bf00      	nop
    5890:	3710      	adds	r7, #16
    5892:	46bd      	mov	sp, r7
    5894:	bd80      	pop	{r7, pc}
    5896:	bf00      	nop
    5898:	00005659 	.word	0x00005659
    589c:	00005675 	.word	0x00005675
    58a0:	000056a9 	.word	0x000056a9
    58a4:	000056e1 	.word	0x000056e1

000058a8 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    58a8:	b580      	push	{r7, lr}
    58aa:	b084      	sub	sp, #16
    58ac:	af00      	add	r7, sp, #0
    58ae:	6078      	str	r0, [r7, #4]
    58b0:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    58b2:	687b      	ldr	r3, [r7, #4]
    58b4:	681b      	ldr	r3, [r3, #0]
    58b6:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    58b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    58bc:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    58be:	683b      	ldr	r3, [r7, #0]
    58c0:	781b      	ldrb	r3, [r3, #0]
    58c2:	f003 0320 	and.w	r3, r3, #32
    58c6:	b2db      	uxtb	r3, r3
    58c8:	2b00      	cmp	r3, #0
    58ca:	d004      	beq.n	58d6 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    58cc:	683b      	ldr	r3, [r7, #0]
    58ce:	689b      	ldr	r3, [r3, #8]
    58d0:	68fa      	ldr	r2, [r7, #12]
    58d2:	4413      	add	r3, r2
    58d4:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    58d6:	68b8      	ldr	r0, [r7, #8]
    58d8:	4b18      	ldr	r3, [pc, #96]	; (593c <_qspi_sync_run_transfer+0x94>)
    58da:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    58dc:	683b      	ldr	r3, [r7, #0]
    58de:	691b      	ldr	r3, [r3, #16]
    58e0:	2b00      	cmp	r3, #0
    58e2:	d103      	bne.n	58ec <_qspi_sync_run_transfer+0x44>
    58e4:	683b      	ldr	r3, [r7, #0]
    58e6:	695b      	ldr	r3, [r3, #20]
    58e8:	2b00      	cmp	r3, #0
    58ea:	d001      	beq.n	58f0 <_qspi_sync_run_transfer+0x48>
    58ec:	2301      	movs	r3, #1
    58ee:	e000      	b.n	58f2 <_qspi_sync_run_transfer+0x4a>
    58f0:	2300      	movs	r3, #0
    58f2:	f003 0301 	and.w	r3, r3, #1
    58f6:	b2db      	uxtb	r3, r3
    58f8:	2282      	movs	r2, #130	; 0x82
    58fa:	4911      	ldr	r1, [pc, #68]	; (5940 <_qspi_sync_run_transfer+0x98>)
    58fc:	4618      	mov	r0, r3
    58fe:	4b11      	ldr	r3, [pc, #68]	; (5944 <_qspi_sync_run_transfer+0x9c>)
    5900:	4798      	blx	r3

	if (cmd->tx_buf) {
    5902:	683b      	ldr	r3, [r7, #0]
    5904:	691b      	ldr	r3, [r3, #16]
    5906:	2b00      	cmp	r3, #0
    5908:	d008      	beq.n	591c <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    590a:	683b      	ldr	r3, [r7, #0]
    590c:	6919      	ldr	r1, [r3, #16]
    590e:	683b      	ldr	r3, [r7, #0]
    5910:	68db      	ldr	r3, [r3, #12]
    5912:	461a      	mov	r2, r3
    5914:	68f8      	ldr	r0, [r7, #12]
    5916:	4b0c      	ldr	r3, [pc, #48]	; (5948 <_qspi_sync_run_transfer+0xa0>)
    5918:	4798      	blx	r3
    591a:	e007      	b.n	592c <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    591c:	683b      	ldr	r3, [r7, #0]
    591e:	6958      	ldr	r0, [r3, #20]
    5920:	683b      	ldr	r3, [r7, #0]
    5922:	68db      	ldr	r3, [r3, #12]
    5924:	461a      	mov	r2, r3
    5926:	68f9      	ldr	r1, [r7, #12]
    5928:	4b07      	ldr	r3, [pc, #28]	; (5948 <_qspi_sync_run_transfer+0xa0>)
    592a:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    592c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5930:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5934:	bf00      	nop
    5936:	3710      	adds	r7, #16
    5938:	46bd      	mov	sp, r7
    593a:	bd80      	pop	{r7, pc}
    593c:	000056fd 	.word	0x000056fd
    5940:	0000ef1c 	.word	0x0000ef1c
    5944:	00003911 	.word	0x00003911
    5948:	00005715 	.word	0x00005715

0000594c <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    594c:	b580      	push	{r7, lr}
    594e:	b082      	sub	sp, #8
    5950:	af00      	add	r7, sp, #0
    5952:	6078      	str	r0, [r7, #4]
    5954:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5956:	6839      	ldr	r1, [r7, #0]
    5958:	6878      	ldr	r0, [r7, #4]
    595a:	4b14      	ldr	r3, [pc, #80]	; (59ac <_qspi_sync_serial_run_command+0x60>)
    595c:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    595e:	683b      	ldr	r3, [r7, #0]
    5960:	781b      	ldrb	r3, [r3, #0]
    5962:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5966:	b2db      	uxtb	r3, r3
    5968:	2b00      	cmp	r3, #0
    596a:	d003      	beq.n	5974 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    596c:	6839      	ldr	r1, [r7, #0]
    596e:	6878      	ldr	r0, [r7, #4]
    5970:	4b0f      	ldr	r3, [pc, #60]	; (59b0 <_qspi_sync_serial_run_command+0x64>)
    5972:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5974:	687b      	ldr	r3, [r7, #4]
    5976:	681b      	ldr	r3, [r3, #0]
    5978:	4618      	mov	r0, r3
    597a:	4b0e      	ldr	r3, [pc, #56]	; (59b4 <_qspi_sync_serial_run_command+0x68>)
    597c:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    597e:	bf00      	nop
    5980:	687b      	ldr	r3, [r7, #4]
    5982:	681b      	ldr	r3, [r3, #0]
    5984:	4618      	mov	r0, r3
    5986:	4b0c      	ldr	r3, [pc, #48]	; (59b8 <_qspi_sync_serial_run_command+0x6c>)
    5988:	4798      	blx	r3
    598a:	4603      	mov	r3, r0
    598c:	f083 0301 	eor.w	r3, r3, #1
    5990:	b2db      	uxtb	r3, r3
    5992:	2b00      	cmp	r3, #0
    5994:	d1f4      	bne.n	5980 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	4618      	mov	r0, r3
    599c:	4b07      	ldr	r3, [pc, #28]	; (59bc <_qspi_sync_serial_run_command+0x70>)
    599e:	4798      	blx	r3
	return ERR_NONE;
    59a0:	2300      	movs	r3, #0
}
    59a2:	4618      	mov	r0, r3
    59a4:	3708      	adds	r7, #8
    59a6:	46bd      	mov	sp, r7
    59a8:	bd80      	pop	{r7, pc}
    59aa:	bf00      	nop
    59ac:	00005825 	.word	0x00005825
    59b0:	000058a9 	.word	0x000058a9
    59b4:	00005749 	.word	0x00005749
    59b8:	000055c1 	.word	0x000055c1
    59bc:	000055e9 	.word	0x000055e9

000059c0 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    59c0:	b480      	push	{r7}
    59c2:	b083      	sub	sp, #12
    59c4:	af00      	add	r7, sp, #0
    59c6:	6078      	str	r0, [r7, #4]
    59c8:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    59ca:	bf00      	nop
    59cc:	687b      	ldr	r3, [r7, #4]
    59ce:	691a      	ldr	r2, [r3, #16]
    59d0:	683b      	ldr	r3, [r7, #0]
    59d2:	4013      	ands	r3, r2
    59d4:	2b00      	cmp	r3, #0
    59d6:	d1f9      	bne.n	59cc <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    59d8:	bf00      	nop
    59da:	370c      	adds	r7, #12
    59dc:	46bd      	mov	sp, r7
    59de:	f85d 7b04 	ldr.w	r7, [sp], #4
    59e2:	4770      	bx	lr

000059e4 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    59e4:	b480      	push	{r7}
    59e6:	b083      	sub	sp, #12
    59e8:	af00      	add	r7, sp, #0
    59ea:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    59ec:	687b      	ldr	r3, [r7, #4]
    59ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    59f2:	819a      	strh	r2, [r3, #12]
}
    59f4:	bf00      	nop
    59f6:	370c      	adds	r7, #12
    59f8:	46bd      	mov	sp, r7
    59fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    59fe:	4770      	bx	lr

00005a00 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5a00:	b480      	push	{r7}
    5a02:	b083      	sub	sp, #12
    5a04:	af00      	add	r7, sp, #0
    5a06:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5a08:	687b      	ldr	r3, [r7, #4]
    5a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5a0e:	819a      	strh	r2, [r3, #12]
}
    5a10:	bf00      	nop
    5a12:	370c      	adds	r7, #12
    5a14:	46bd      	mov	sp, r7
    5a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a1a:	4770      	bx	lr

00005a1c <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5a1c:	b480      	push	{r7}
    5a1e:	b083      	sub	sp, #12
    5a20:	af00      	add	r7, sp, #0
    5a22:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5a24:	687b      	ldr	r3, [r7, #4]
    5a26:	899b      	ldrh	r3, [r3, #12]
    5a28:	b29b      	uxth	r3, r3
}
    5a2a:	4618      	mov	r0, r3
    5a2c:	370c      	adds	r7, #12
    5a2e:	46bd      	mov	sp, r7
    5a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a34:	4770      	bx	lr

00005a36 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5a36:	b480      	push	{r7}
    5a38:	b083      	sub	sp, #12
    5a3a:	af00      	add	r7, sp, #0
    5a3c:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5a3e:	687b      	ldr	r3, [r7, #4]
    5a40:	895b      	ldrh	r3, [r3, #10]
    5a42:	b29b      	uxth	r3, r3
}
    5a44:	4618      	mov	r0, r3
    5a46:	370c      	adds	r7, #12
    5a48:	46bd      	mov	sp, r7
    5a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a4e:	4770      	bx	lr

00005a50 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5a50:	b580      	push	{r7, lr}
    5a52:	b082      	sub	sp, #8
    5a54:	af00      	add	r7, sp, #0
    5a56:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	881b      	ldrh	r3, [r3, #0]
    5a5c:	b29b      	uxth	r3, r3
    5a5e:	f043 0301 	orr.w	r3, r3, #1
    5a62:	b29a      	uxth	r2, r3
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5a68:	2101      	movs	r1, #1
    5a6a:	6878      	ldr	r0, [r7, #4]
    5a6c:	4b02      	ldr	r3, [pc, #8]	; (5a78 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5a6e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5a70:	bf00      	nop
    5a72:	3708      	adds	r7, #8
    5a74:	46bd      	mov	sp, r7
    5a76:	bd80      	pop	{r7, pc}
    5a78:	000059c1 	.word	0x000059c1

00005a7c <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5a7c:	b580      	push	{r7, lr}
    5a7e:	b084      	sub	sp, #16
    5a80:	af00      	add	r7, sp, #0
    5a82:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5a84:	f248 0103 	movw	r1, #32771	; 0x8003
    5a88:	6878      	ldr	r0, [r7, #4]
    5a8a:	4b0a      	ldr	r3, [pc, #40]	; (5ab4 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5a8c:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5a8e:	687b      	ldr	r3, [r7, #4]
    5a90:	881b      	ldrh	r3, [r3, #0]
    5a92:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5a94:	89fb      	ldrh	r3, [r7, #14]
    5a96:	085b      	lsrs	r3, r3, #1
    5a98:	b29b      	uxth	r3, r3
    5a9a:	f003 0301 	and.w	r3, r3, #1
    5a9e:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5aa0:	89fb      	ldrh	r3, [r7, #14]
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	bf14      	ite	ne
    5aa6:	2301      	movne	r3, #1
    5aa8:	2300      	moveq	r3, #0
    5aaa:	b2db      	uxtb	r3, r3
}
    5aac:	4618      	mov	r0, r3
    5aae:	3710      	adds	r7, #16
    5ab0:	46bd      	mov	sp, r7
    5ab2:	bd80      	pop	{r7, pc}
    5ab4:	000059c1 	.word	0x000059c1

00005ab8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5ab8:	b580      	push	{r7, lr}
    5aba:	b082      	sub	sp, #8
    5abc:	af00      	add	r7, sp, #0
    5abe:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5ac0:	687b      	ldr	r3, [r7, #4]
    5ac2:	881b      	ldrh	r3, [r3, #0]
    5ac4:	b29b      	uxth	r3, r3
    5ac6:	f023 0302 	bic.w	r3, r3, #2
    5aca:	b29a      	uxth	r2, r3
    5acc:	687b      	ldr	r3, [r7, #4]
    5ace:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5ad0:	f248 0103 	movw	r1, #32771	; 0x8003
    5ad4:	6878      	ldr	r0, [r7, #4]
    5ad6:	4b03      	ldr	r3, [pc, #12]	; (5ae4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5ad8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5ada:	bf00      	nop
    5adc:	3708      	adds	r7, #8
    5ade:	46bd      	mov	sp, r7
    5ae0:	bd80      	pop	{r7, pc}
    5ae2:	bf00      	nop
    5ae4:	000059c1 	.word	0x000059c1

00005ae8 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5ae8:	b580      	push	{r7, lr}
    5aea:	b082      	sub	sp, #8
    5aec:	af00      	add	r7, sp, #0
    5aee:	6078      	str	r0, [r7, #4]
    5af0:	460b      	mov	r3, r1
    5af2:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5af4:	687b      	ldr	r3, [r7, #4]
    5af6:	887a      	ldrh	r2, [r7, #2]
    5af8:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5afa:	f248 0103 	movw	r1, #32771	; 0x8003
    5afe:	6878      	ldr	r0, [r7, #4]
    5b00:	4b02      	ldr	r3, [pc, #8]	; (5b0c <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5b02:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5b04:	bf00      	nop
    5b06:	3708      	adds	r7, #8
    5b08:	46bd      	mov	sp, r7
    5b0a:	bd80      	pop	{r7, pc}
    5b0c:	000059c1 	.word	0x000059c1

00005b10 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5b10:	b480      	push	{r7}
    5b12:	b083      	sub	sp, #12
    5b14:	af00      	add	r7, sp, #0
    5b16:	6078      	str	r0, [r7, #4]
    5b18:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5b1a:	687b      	ldr	r3, [r7, #4]
    5b1c:	683a      	ldr	r2, [r7, #0]
    5b1e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5b20:	bf00      	nop
    5b22:	370c      	adds	r7, #12
    5b24:	46bd      	mov	sp, r7
    5b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b2a:	4770      	bx	lr

00005b2c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5b2c:	b580      	push	{r7, lr}
    5b2e:	b082      	sub	sp, #8
    5b30:	af00      	add	r7, sp, #0
    5b32:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5b34:	687b      	ldr	r3, [r7, #4]
    5b36:	2b00      	cmp	r3, #0
    5b38:	d005      	beq.n	5b46 <_calendar_init+0x1a>
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	681b      	ldr	r3, [r3, #0]
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d001      	beq.n	5b46 <_calendar_init+0x1a>
    5b42:	2301      	movs	r3, #1
    5b44:	e000      	b.n	5b48 <_calendar_init+0x1c>
    5b46:	2300      	movs	r3, #0
    5b48:	f003 0301 	and.w	r3, r3, #1
    5b4c:	b2db      	uxtb	r3, r3
    5b4e:	222f      	movs	r2, #47	; 0x2f
    5b50:	491b      	ldr	r1, [pc, #108]	; (5bc0 <_calendar_init+0x94>)
    5b52:	4618      	mov	r0, r3
    5b54:	4b1b      	ldr	r3, [pc, #108]	; (5bc4 <_calendar_init+0x98>)
    5b56:	4798      	blx	r3

	_rtc_dev = dev;
    5b58:	4a1b      	ldr	r2, [pc, #108]	; (5bc8 <_calendar_init+0x9c>)
    5b5a:	687b      	ldr	r3, [r7, #4]
    5b5c:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5b5e:	687b      	ldr	r3, [r7, #4]
    5b60:	681b      	ldr	r3, [r3, #0]
    5b62:	4618      	mov	r0, r3
    5b64:	4b19      	ldr	r3, [pc, #100]	; (5bcc <_calendar_init+0xa0>)
    5b66:	4798      	blx	r3
    5b68:	4603      	mov	r3, r0
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	d00a      	beq.n	5b84 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5b6e:	687b      	ldr	r3, [r7, #4]
    5b70:	681b      	ldr	r3, [r3, #0]
    5b72:	4618      	mov	r0, r3
    5b74:	4b16      	ldr	r3, [pc, #88]	; (5bd0 <_calendar_init+0xa4>)
    5b76:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5b78:	687b      	ldr	r3, [r7, #4]
    5b7a:	681b      	ldr	r3, [r3, #0]
    5b7c:	2102      	movs	r1, #2
    5b7e:	4618      	mov	r0, r3
    5b80:	4b14      	ldr	r3, [pc, #80]	; (5bd4 <_calendar_init+0xa8>)
    5b82:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5b84:	687b      	ldr	r3, [r7, #4]
    5b86:	681b      	ldr	r3, [r3, #0]
    5b88:	4618      	mov	r0, r3
    5b8a:	4b13      	ldr	r3, [pc, #76]	; (5bd8 <_calendar_init+0xac>)
    5b8c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5b8e:	687b      	ldr	r3, [r7, #4]
    5b90:	681b      	ldr	r3, [r3, #0]
    5b92:	2101      	movs	r1, #1
    5b94:	4618      	mov	r0, r3
    5b96:	4b0f      	ldr	r3, [pc, #60]	; (5bd4 <_calendar_init+0xa8>)
    5b98:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5b9a:	687b      	ldr	r3, [r7, #4]
    5b9c:	681b      	ldr	r3, [r3, #0]
    5b9e:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5ba2:	4618      	mov	r0, r3
    5ba4:	4b0d      	ldr	r3, [pc, #52]	; (5bdc <_calendar_init+0xb0>)
    5ba6:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5ba8:	687b      	ldr	r3, [r7, #4]
    5baa:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5bac:	2100      	movs	r1, #0
    5bae:	4618      	mov	r0, r3
    5bb0:	4b0b      	ldr	r3, [pc, #44]	; (5be0 <_calendar_init+0xb4>)
    5bb2:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5bb4:	2300      	movs	r3, #0
}
    5bb6:	4618      	mov	r0, r3
    5bb8:	3708      	adds	r7, #8
    5bba:	46bd      	mov	sp, r7
    5bbc:	bd80      	pop	{r7, pc}
    5bbe:	bf00      	nop
    5bc0:	0000ef34 	.word	0x0000ef34
    5bc4:	00003911 	.word	0x00003911
    5bc8:	200006d8 	.word	0x200006d8
    5bcc:	00005a7d 	.word	0x00005a7d
    5bd0:	00005ab9 	.word	0x00005ab9
    5bd4:	000059c1 	.word	0x000059c1
    5bd8:	00005a51 	.word	0x00005a51
    5bdc:	00005ae9 	.word	0x00005ae9
    5be0:	00005b11 	.word	0x00005b11

00005be4 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5be4:	b580      	push	{r7, lr}
    5be6:	b084      	sub	sp, #16
    5be8:	af00      	add	r7, sp, #0
    5bea:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5bec:	687b      	ldr	r3, [r7, #4]
    5bee:	681b      	ldr	r3, [r3, #0]
    5bf0:	4618      	mov	r0, r3
    5bf2:	4b19      	ldr	r3, [pc, #100]	; (5c58 <_rtc_interrupt_handler+0x74>)
    5bf4:	4798      	blx	r3
    5bf6:	4603      	mov	r3, r0
    5bf8:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5bfa:	687b      	ldr	r3, [r7, #4]
    5bfc:	681b      	ldr	r3, [r3, #0]
    5bfe:	4618      	mov	r0, r3
    5c00:	4b16      	ldr	r3, [pc, #88]	; (5c5c <_rtc_interrupt_handler+0x78>)
    5c02:	4798      	blx	r3
    5c04:	4603      	mov	r3, r0
    5c06:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5c08:	89fa      	ldrh	r2, [r7, #14]
    5c0a:	89bb      	ldrh	r3, [r7, #12]
    5c0c:	4013      	ands	r3, r2
    5c0e:	b29b      	uxth	r3, r3
    5c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5c14:	2b00      	cmp	r3, #0
    5c16:	d009      	beq.n	5c2c <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	685b      	ldr	r3, [r3, #4]
    5c1c:	6878      	ldr	r0, [r7, #4]
    5c1e:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5c20:	687b      	ldr	r3, [r7, #4]
    5c22:	681b      	ldr	r3, [r3, #0]
    5c24:	4618      	mov	r0, r3
    5c26:	4b0e      	ldr	r3, [pc, #56]	; (5c60 <_rtc_interrupt_handler+0x7c>)
    5c28:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5c2a:	e010      	b.n	5c4e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5c2c:	89fa      	ldrh	r2, [r7, #14]
    5c2e:	89bb      	ldrh	r3, [r7, #12]
    5c30:	4013      	ands	r3, r2
    5c32:	b29b      	uxth	r3, r3
    5c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d008      	beq.n	5c4e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5c3c:	687b      	ldr	r3, [r7, #4]
    5c3e:	689b      	ldr	r3, [r3, #8]
    5c40:	6878      	ldr	r0, [r7, #4]
    5c42:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5c44:	687b      	ldr	r3, [r7, #4]
    5c46:	681b      	ldr	r3, [r3, #0]
    5c48:	4618      	mov	r0, r3
    5c4a:	4b06      	ldr	r3, [pc, #24]	; (5c64 <_rtc_interrupt_handler+0x80>)
    5c4c:	4798      	blx	r3
}
    5c4e:	bf00      	nop
    5c50:	3710      	adds	r7, #16
    5c52:	46bd      	mov	sp, r7
    5c54:	bd80      	pop	{r7, pc}
    5c56:	bf00      	nop
    5c58:	00005a1d 	.word	0x00005a1d
    5c5c:	00005a37 	.word	0x00005a37
    5c60:	000059e5 	.word	0x000059e5
    5c64:	00005a01 	.word	0x00005a01

00005c68 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5c68:	b580      	push	{r7, lr}
    5c6a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5c6c:	4b03      	ldr	r3, [pc, #12]	; (5c7c <RTC_Handler+0x14>)
    5c6e:	681b      	ldr	r3, [r3, #0]
    5c70:	4618      	mov	r0, r3
    5c72:	4b03      	ldr	r3, [pc, #12]	; (5c80 <RTC_Handler+0x18>)
    5c74:	4798      	blx	r3
}
    5c76:	bf00      	nop
    5c78:	bd80      	pop	{r7, pc}
    5c7a:	bf00      	nop
    5c7c:	200006d8 	.word	0x200006d8
    5c80:	00005be5 	.word	0x00005be5

00005c84 <__NVIC_EnableIRQ>:
{
    5c84:	b480      	push	{r7}
    5c86:	b083      	sub	sp, #12
    5c88:	af00      	add	r7, sp, #0
    5c8a:	4603      	mov	r3, r0
    5c8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5c92:	2b00      	cmp	r3, #0
    5c94:	db0b      	blt.n	5cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c96:	4909      	ldr	r1, [pc, #36]	; (5cbc <__NVIC_EnableIRQ+0x38>)
    5c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5c9c:	095b      	lsrs	r3, r3, #5
    5c9e:	88fa      	ldrh	r2, [r7, #6]
    5ca0:	f002 021f 	and.w	r2, r2, #31
    5ca4:	2001      	movs	r0, #1
    5ca6:	fa00 f202 	lsl.w	r2, r0, r2
    5caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5cae:	bf00      	nop
    5cb0:	370c      	adds	r7, #12
    5cb2:	46bd      	mov	sp, r7
    5cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cb8:	4770      	bx	lr
    5cba:	bf00      	nop
    5cbc:	e000e100 	.word	0xe000e100

00005cc0 <__NVIC_DisableIRQ>:
{
    5cc0:	b480      	push	{r7}
    5cc2:	b083      	sub	sp, #12
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	4603      	mov	r3, r0
    5cc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5cce:	2b00      	cmp	r3, #0
    5cd0:	db10      	blt.n	5cf4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5cd2:	490b      	ldr	r1, [pc, #44]	; (5d00 <__NVIC_DisableIRQ+0x40>)
    5cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5cd8:	095b      	lsrs	r3, r3, #5
    5cda:	88fa      	ldrh	r2, [r7, #6]
    5cdc:	f002 021f 	and.w	r2, r2, #31
    5ce0:	2001      	movs	r0, #1
    5ce2:	fa00 f202 	lsl.w	r2, r0, r2
    5ce6:	3320      	adds	r3, #32
    5ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5cec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5cf0:	f3bf 8f6f 	isb	sy
}
    5cf4:	bf00      	nop
    5cf6:	370c      	adds	r7, #12
    5cf8:	46bd      	mov	sp, r7
    5cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cfe:	4770      	bx	lr
    5d00:	e000e100 	.word	0xe000e100

00005d04 <__NVIC_ClearPendingIRQ>:
{
    5d04:	b480      	push	{r7}
    5d06:	b083      	sub	sp, #12
    5d08:	af00      	add	r7, sp, #0
    5d0a:	4603      	mov	r3, r0
    5d0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d12:	2b00      	cmp	r3, #0
    5d14:	db0c      	blt.n	5d30 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d16:	4909      	ldr	r1, [pc, #36]	; (5d3c <__NVIC_ClearPendingIRQ+0x38>)
    5d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5d1c:	095b      	lsrs	r3, r3, #5
    5d1e:	88fa      	ldrh	r2, [r7, #6]
    5d20:	f002 021f 	and.w	r2, r2, #31
    5d24:	2001      	movs	r0, #1
    5d26:	fa00 f202 	lsl.w	r2, r0, r2
    5d2a:	3360      	adds	r3, #96	; 0x60
    5d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5d30:	bf00      	nop
    5d32:	370c      	adds	r7, #12
    5d34:	46bd      	mov	sp, r7
    5d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d3a:	4770      	bx	lr
    5d3c:	e000e100 	.word	0xe000e100

00005d40 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5d40:	b480      	push	{r7}
    5d42:	b083      	sub	sp, #12
    5d44:	af00      	add	r7, sp, #0
    5d46:	6078      	str	r0, [r7, #4]
    5d48:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5d4a:	bf00      	nop
    5d4c:	687b      	ldr	r3, [r7, #4]
    5d4e:	69da      	ldr	r2, [r3, #28]
    5d50:	683b      	ldr	r3, [r7, #0]
    5d52:	4013      	ands	r3, r2
    5d54:	2b00      	cmp	r3, #0
    5d56:	d1f9      	bne.n	5d4c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5d58:	bf00      	nop
    5d5a:	370c      	adds	r7, #12
    5d5c:	46bd      	mov	sp, r7
    5d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d62:	4770      	bx	lr

00005d64 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5d64:	b480      	push	{r7}
    5d66:	b083      	sub	sp, #12
    5d68:	af00      	add	r7, sp, #0
    5d6a:	6078      	str	r0, [r7, #4]
    5d6c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5d6e:	687b      	ldr	r3, [r7, #4]
    5d70:	69da      	ldr	r2, [r3, #28]
    5d72:	683b      	ldr	r3, [r7, #0]
    5d74:	4013      	ands	r3, r2
    5d76:	2b00      	cmp	r3, #0
    5d78:	bf14      	ite	ne
    5d7a:	2301      	movne	r3, #1
    5d7c:	2300      	moveq	r3, #0
    5d7e:	b2db      	uxtb	r3, r3
}
    5d80:	4618      	mov	r0, r3
    5d82:	370c      	adds	r7, #12
    5d84:	46bd      	mov	sp, r7
    5d86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d8a:	4770      	bx	lr

00005d8c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5d8c:	b480      	push	{r7}
    5d8e:	b083      	sub	sp, #12
    5d90:	af00      	add	r7, sp, #0
    5d92:	6078      	str	r0, [r7, #4]
    5d94:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5d96:	bf00      	nop
    5d98:	687b      	ldr	r3, [r7, #4]
    5d9a:	69da      	ldr	r2, [r3, #28]
    5d9c:	683b      	ldr	r3, [r7, #0]
    5d9e:	4013      	ands	r3, r2
    5da0:	2b00      	cmp	r3, #0
    5da2:	d1f9      	bne.n	5d98 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5da4:	bf00      	nop
    5da6:	370c      	adds	r7, #12
    5da8:	46bd      	mov	sp, r7
    5daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dae:	4770      	bx	lr

00005db0 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5db0:	b480      	push	{r7}
    5db2:	b083      	sub	sp, #12
    5db4:	af00      	add	r7, sp, #0
    5db6:	6078      	str	r0, [r7, #4]
    5db8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5dba:	687b      	ldr	r3, [r7, #4]
    5dbc:	69da      	ldr	r2, [r3, #28]
    5dbe:	683b      	ldr	r3, [r7, #0]
    5dc0:	4013      	ands	r3, r2
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	bf14      	ite	ne
    5dc6:	2301      	movne	r3, #1
    5dc8:	2300      	moveq	r3, #0
    5dca:	b2db      	uxtb	r3, r3
}
    5dcc:	4618      	mov	r0, r3
    5dce:	370c      	adds	r7, #12
    5dd0:	46bd      	mov	sp, r7
    5dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dd6:	4770      	bx	lr

00005dd8 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5dd8:	b480      	push	{r7}
    5dda:	b083      	sub	sp, #12
    5ddc:	af00      	add	r7, sp, #0
    5dde:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5de0:	687b      	ldr	r3, [r7, #4]
    5de2:	2201      	movs	r2, #1
    5de4:	761a      	strb	r2, [r3, #24]
}
    5de6:	bf00      	nop
    5de8:	370c      	adds	r7, #12
    5dea:	46bd      	mov	sp, r7
    5dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    5df0:	4770      	bx	lr

00005df2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5df2:	b480      	push	{r7}
    5df4:	b083      	sub	sp, #12
    5df6:	af00      	add	r7, sp, #0
    5df8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	2202      	movs	r2, #2
    5dfe:	761a      	strb	r2, [r3, #24]
}
    5e00:	bf00      	nop
    5e02:	370c      	adds	r7, #12
    5e04:	46bd      	mov	sp, r7
    5e06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e0a:	4770      	bx	lr

00005e0c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5e0c:	b480      	push	{r7}
    5e0e:	b083      	sub	sp, #12
    5e10:	af00      	add	r7, sp, #0
    5e12:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	7e1b      	ldrb	r3, [r3, #24]
    5e18:	b2db      	uxtb	r3, r3
}
    5e1a:	4618      	mov	r0, r3
    5e1c:	370c      	adds	r7, #12
    5e1e:	46bd      	mov	sp, r7
    5e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e24:	4770      	bx	lr

00005e26 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    5e26:	b480      	push	{r7}
    5e28:	b083      	sub	sp, #12
    5e2a:	af00      	add	r7, sp, #0
    5e2c:	6078      	str	r0, [r7, #4]
    5e2e:	460b      	mov	r3, r1
    5e30:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    5e32:	687b      	ldr	r3, [r7, #4]
    5e34:	78fa      	ldrb	r2, [r7, #3]
    5e36:	761a      	strb	r2, [r3, #24]
}
    5e38:	bf00      	nop
    5e3a:	370c      	adds	r7, #12
    5e3c:	46bd      	mov	sp, r7
    5e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e42:	4770      	bx	lr

00005e44 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5e44:	b480      	push	{r7}
    5e46:	b085      	sub	sp, #20
    5e48:	af00      	add	r7, sp, #0
    5e4a:	6078      	str	r0, [r7, #4]
    5e4c:	460b      	mov	r3, r1
    5e4e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	7e1b      	ldrb	r3, [r3, #24]
    5e54:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5e56:	7bfa      	ldrb	r2, [r7, #15]
    5e58:	78fb      	ldrb	r3, [r7, #3]
    5e5a:	4013      	ands	r3, r2
    5e5c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5e5e:	7bfb      	ldrb	r3, [r7, #15]
}
    5e60:	4618      	mov	r0, r3
    5e62:	3714      	adds	r7, #20
    5e64:	46bd      	mov	sp, r7
    5e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e6a:	4770      	bx	lr

00005e6c <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5e6c:	b480      	push	{r7}
    5e6e:	b083      	sub	sp, #12
    5e70:	af00      	add	r7, sp, #0
    5e72:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5e74:	687b      	ldr	r3, [r7, #4]
    5e76:	7e1b      	ldrb	r3, [r3, #24]
    5e78:	b2db      	uxtb	r3, r3
}
    5e7a:	4618      	mov	r0, r3
    5e7c:	370c      	adds	r7, #12
    5e7e:	46bd      	mov	sp, r7
    5e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e84:	4770      	bx	lr

00005e86 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5e86:	b480      	push	{r7}
    5e88:	b083      	sub	sp, #12
    5e8a:	af00      	add	r7, sp, #0
    5e8c:	6078      	str	r0, [r7, #4]
    5e8e:	460b      	mov	r3, r1
    5e90:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5e92:	687b      	ldr	r3, [r7, #4]
    5e94:	78fa      	ldrb	r2, [r7, #3]
    5e96:	761a      	strb	r2, [r3, #24]
}
    5e98:	bf00      	nop
    5e9a:	370c      	adds	r7, #12
    5e9c:	46bd      	mov	sp, r7
    5e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ea2:	4770      	bx	lr

00005ea4 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    5ea4:	b480      	push	{r7}
    5ea6:	b083      	sub	sp, #12
    5ea8:	af00      	add	r7, sp, #0
    5eaa:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    5eac:	687b      	ldr	r3, [r7, #4]
    5eae:	2201      	movs	r2, #1
    5eb0:	759a      	strb	r2, [r3, #22]
}
    5eb2:	bf00      	nop
    5eb4:	370c      	adds	r7, #12
    5eb6:	46bd      	mov	sp, r7
    5eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ebc:	4770      	bx	lr

00005ebe <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    5ebe:	b480      	push	{r7}
    5ec0:	b083      	sub	sp, #12
    5ec2:	af00      	add	r7, sp, #0
    5ec4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    5ec6:	687b      	ldr	r3, [r7, #4]
    5ec8:	2201      	movs	r2, #1
    5eca:	751a      	strb	r2, [r3, #20]
}
    5ecc:	bf00      	nop
    5ece:	370c      	adds	r7, #12
    5ed0:	46bd      	mov	sp, r7
    5ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ed6:	4770      	bx	lr

00005ed8 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    5ed8:	b480      	push	{r7}
    5eda:	b083      	sub	sp, #12
    5edc:	af00      	add	r7, sp, #0
    5ede:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    5ee0:	687b      	ldr	r3, [r7, #4]
    5ee2:	2202      	movs	r2, #2
    5ee4:	759a      	strb	r2, [r3, #22]
}
    5ee6:	bf00      	nop
    5ee8:	370c      	adds	r7, #12
    5eea:	46bd      	mov	sp, r7
    5eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ef0:	4770      	bx	lr

00005ef2 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    5ef2:	b480      	push	{r7}
    5ef4:	b083      	sub	sp, #12
    5ef6:	af00      	add	r7, sp, #0
    5ef8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	2202      	movs	r2, #2
    5efe:	751a      	strb	r2, [r3, #20]
}
    5f00:	bf00      	nop
    5f02:	370c      	adds	r7, #12
    5f04:	46bd      	mov	sp, r7
    5f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f0a:	4770      	bx	lr

00005f0c <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    5f0c:	b480      	push	{r7}
    5f0e:	b083      	sub	sp, #12
    5f10:	af00      	add	r7, sp, #0
    5f12:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    5f14:	687b      	ldr	r3, [r7, #4]
    5f16:	2204      	movs	r2, #4
    5f18:	759a      	strb	r2, [r3, #22]
}
    5f1a:	bf00      	nop
    5f1c:	370c      	adds	r7, #12
    5f1e:	46bd      	mov	sp, r7
    5f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f24:	4770      	bx	lr

00005f26 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    5f26:	b480      	push	{r7}
    5f28:	b083      	sub	sp, #12
    5f2a:	af00      	add	r7, sp, #0
    5f2c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    5f2e:	687b      	ldr	r3, [r7, #4]
    5f30:	2204      	movs	r2, #4
    5f32:	751a      	strb	r2, [r3, #20]
}
    5f34:	bf00      	nop
    5f36:	370c      	adds	r7, #12
    5f38:	46bd      	mov	sp, r7
    5f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f3e:	4770      	bx	lr

00005f40 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    5f40:	b480      	push	{r7}
    5f42:	b083      	sub	sp, #12
    5f44:	af00      	add	r7, sp, #0
    5f46:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	7d9b      	ldrb	r3, [r3, #22]
    5f4c:	b2db      	uxtb	r3, r3
}
    5f4e:	4618      	mov	r0, r3
    5f50:	370c      	adds	r7, #12
    5f52:	46bd      	mov	sp, r7
    5f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f58:	4770      	bx	lr
	...

00005f5c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5f5c:	b580      	push	{r7, lr}
    5f5e:	b082      	sub	sp, #8
    5f60:	af00      	add	r7, sp, #0
    5f62:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5f64:	687b      	ldr	r3, [r7, #4]
    5f66:	681b      	ldr	r3, [r3, #0]
    5f68:	f023 0202 	bic.w	r2, r3, #2
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5f70:	2103      	movs	r1, #3
    5f72:	6878      	ldr	r0, [r7, #4]
    5f74:	4b02      	ldr	r3, [pc, #8]	; (5f80 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5f76:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f78:	bf00      	nop
    5f7a:	3708      	adds	r7, #8
    5f7c:	46bd      	mov	sp, r7
    5f7e:	bd80      	pop	{r7, pc}
    5f80:	00005d41 	.word	0x00005d41

00005f84 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5f84:	b480      	push	{r7}
    5f86:	b085      	sub	sp, #20
    5f88:	af00      	add	r7, sp, #0
    5f8a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5f8c:	687b      	ldr	r3, [r7, #4]
    5f8e:	681b      	ldr	r3, [r3, #0]
    5f90:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5f92:	68fb      	ldr	r3, [r7, #12]
    5f94:	0edb      	lsrs	r3, r3, #27
    5f96:	f003 0301 	and.w	r3, r3, #1
    5f9a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5f9c:	68fb      	ldr	r3, [r7, #12]
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	bf14      	ite	ne
    5fa2:	2301      	movne	r3, #1
    5fa4:	2300      	moveq	r3, #0
    5fa6:	b2db      	uxtb	r3, r3
}
    5fa8:	4618      	mov	r0, r3
    5faa:	3714      	adds	r7, #20
    5fac:	46bd      	mov	sp, r7
    5fae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fb2:	4770      	bx	lr

00005fb4 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5fb4:	b580      	push	{r7, lr}
    5fb6:	b084      	sub	sp, #16
    5fb8:	af00      	add	r7, sp, #0
    5fba:	6078      	str	r0, [r7, #4]
    5fbc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5fbe:	2103      	movs	r1, #3
    5fc0:	6878      	ldr	r0, [r7, #4]
    5fc2:	4b07      	ldr	r3, [pc, #28]	; (5fe0 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5fc4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5fc6:	687b      	ldr	r3, [r7, #4]
    5fc8:	681b      	ldr	r3, [r3, #0]
    5fca:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5fcc:	68fa      	ldr	r2, [r7, #12]
    5fce:	683b      	ldr	r3, [r7, #0]
    5fd0:	4013      	ands	r3, r2
    5fd2:	60fb      	str	r3, [r7, #12]
	return tmp;
    5fd4:	68fb      	ldr	r3, [r7, #12]
}
    5fd6:	4618      	mov	r0, r3
    5fd8:	3710      	adds	r7, #16
    5fda:	46bd      	mov	sp, r7
    5fdc:	bd80      	pop	{r7, pc}
    5fde:	bf00      	nop
    5fe0:	00005d41 	.word	0x00005d41

00005fe4 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5fe4:	b580      	push	{r7, lr}
    5fe6:	b082      	sub	sp, #8
    5fe8:	af00      	add	r7, sp, #0
    5fea:	6078      	str	r0, [r7, #4]
    5fec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	683a      	ldr	r2, [r7, #0]
    5ff2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5ff4:	2103      	movs	r1, #3
    5ff6:	6878      	ldr	r0, [r7, #4]
    5ff8:	4b02      	ldr	r3, [pc, #8]	; (6004 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5ffa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ffc:	bf00      	nop
    5ffe:	3708      	adds	r7, #8
    6000:	46bd      	mov	sp, r7
    6002:	bd80      	pop	{r7, pc}
    6004:	00005d41 	.word	0x00005d41

00006008 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6008:	b580      	push	{r7, lr}
    600a:	b082      	sub	sp, #8
    600c:	af00      	add	r7, sp, #0
    600e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	681b      	ldr	r3, [r3, #0]
    6014:	f043 0202 	orr.w	r2, r3, #2
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    601c:	2103      	movs	r1, #3
    601e:	6878      	ldr	r0, [r7, #4]
    6020:	4b02      	ldr	r3, [pc, #8]	; (602c <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    6022:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6024:	bf00      	nop
    6026:	3708      	adds	r7, #8
    6028:	46bd      	mov	sp, r7
    602a:	bd80      	pop	{r7, pc}
    602c:	00005d8d 	.word	0x00005d8d

00006030 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6030:	b580      	push	{r7, lr}
    6032:	b084      	sub	sp, #16
    6034:	af00      	add	r7, sp, #0
    6036:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6038:	2103      	movs	r1, #3
    603a:	6878      	ldr	r0, [r7, #4]
    603c:	4b09      	ldr	r3, [pc, #36]	; (6064 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    603e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6040:	687b      	ldr	r3, [r7, #4]
    6042:	681b      	ldr	r3, [r3, #0]
    6044:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    6046:	68fb      	ldr	r3, [r7, #12]
    6048:	085b      	lsrs	r3, r3, #1
    604a:	f003 0301 	and.w	r3, r3, #1
    604e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6050:	68fb      	ldr	r3, [r7, #12]
    6052:	2b00      	cmp	r3, #0
    6054:	bf14      	ite	ne
    6056:	2301      	movne	r3, #1
    6058:	2300      	moveq	r3, #0
    605a:	b2db      	uxtb	r3, r3
}
    605c:	4618      	mov	r0, r3
    605e:	3710      	adds	r7, #16
    6060:	46bd      	mov	sp, r7
    6062:	bd80      	pop	{r7, pc}
    6064:	00005d8d 	.word	0x00005d8d

00006068 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6068:	b580      	push	{r7, lr}
    606a:	b082      	sub	sp, #8
    606c:	af00      	add	r7, sp, #0
    606e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	681b      	ldr	r3, [r3, #0]
    6074:	f023 0202 	bic.w	r2, r3, #2
    6078:	687b      	ldr	r3, [r7, #4]
    607a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    607c:	2103      	movs	r1, #3
    607e:	6878      	ldr	r0, [r7, #4]
    6080:	4b02      	ldr	r3, [pc, #8]	; (608c <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    6082:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6084:	bf00      	nop
    6086:	3708      	adds	r7, #8
    6088:	46bd      	mov	sp, r7
    608a:	bd80      	pop	{r7, pc}
    608c:	00005d8d 	.word	0x00005d8d

00006090 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6090:	b580      	push	{r7, lr}
    6092:	b084      	sub	sp, #16
    6094:	af00      	add	r7, sp, #0
    6096:	6078      	str	r0, [r7, #4]
    6098:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    609a:	2103      	movs	r1, #3
    609c:	6878      	ldr	r0, [r7, #4]
    609e:	4b07      	ldr	r3, [pc, #28]	; (60bc <hri_sercomspi_get_CTRLA_reg+0x2c>)
    60a0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    60a2:	687b      	ldr	r3, [r7, #4]
    60a4:	681b      	ldr	r3, [r3, #0]
    60a6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    60a8:	68fa      	ldr	r2, [r7, #12]
    60aa:	683b      	ldr	r3, [r7, #0]
    60ac:	4013      	ands	r3, r2
    60ae:	60fb      	str	r3, [r7, #12]
	return tmp;
    60b0:	68fb      	ldr	r3, [r7, #12]
}
    60b2:	4618      	mov	r0, r3
    60b4:	3710      	adds	r7, #16
    60b6:	46bd      	mov	sp, r7
    60b8:	bd80      	pop	{r7, pc}
    60ba:	bf00      	nop
    60bc:	00005d8d 	.word	0x00005d8d

000060c0 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    60c0:	b580      	push	{r7, lr}
    60c2:	b082      	sub	sp, #8
    60c4:	af00      	add	r7, sp, #0
    60c6:	6078      	str	r0, [r7, #4]
    60c8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    60ca:	687b      	ldr	r3, [r7, #4]
    60cc:	683a      	ldr	r2, [r7, #0]
    60ce:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    60d0:	2103      	movs	r1, #3
    60d2:	6878      	ldr	r0, [r7, #4]
    60d4:	4b02      	ldr	r3, [pc, #8]	; (60e0 <hri_sercomspi_write_CTRLA_reg+0x20>)
    60d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60d8:	bf00      	nop
    60da:	3708      	adds	r7, #8
    60dc:	46bd      	mov	sp, r7
    60de:	bd80      	pop	{r7, pc}
    60e0:	00005d8d 	.word	0x00005d8d

000060e4 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    60e4:	b580      	push	{r7, lr}
    60e6:	b082      	sub	sp, #8
    60e8:	af00      	add	r7, sp, #0
    60ea:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    60ec:	687b      	ldr	r3, [r7, #4]
    60ee:	685b      	ldr	r3, [r3, #4]
    60f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60f8:	2104      	movs	r1, #4
    60fa:	6878      	ldr	r0, [r7, #4]
    60fc:	4b02      	ldr	r3, [pc, #8]	; (6108 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    60fe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6100:	bf00      	nop
    6102:	3708      	adds	r7, #8
    6104:	46bd      	mov	sp, r7
    6106:	bd80      	pop	{r7, pc}
    6108:	00005d41 	.word	0x00005d41

0000610c <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    610c:	b580      	push	{r7, lr}
    610e:	b082      	sub	sp, #8
    6110:	af00      	add	r7, sp, #0
    6112:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6114:	687b      	ldr	r3, [r7, #4]
    6116:	685b      	ldr	r3, [r3, #4]
    6118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    611c:	687b      	ldr	r3, [r7, #4]
    611e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6120:	2104      	movs	r1, #4
    6122:	6878      	ldr	r0, [r7, #4]
    6124:	4b02      	ldr	r3, [pc, #8]	; (6130 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6126:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6128:	bf00      	nop
    612a:	3708      	adds	r7, #8
    612c:	46bd      	mov	sp, r7
    612e:	bd80      	pop	{r7, pc}
    6130:	00005d41 	.word	0x00005d41

00006134 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6134:	b580      	push	{r7, lr}
    6136:	b082      	sub	sp, #8
    6138:	af00      	add	r7, sp, #0
    613a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    613c:	687b      	ldr	r3, [r7, #4]
    613e:	685b      	ldr	r3, [r3, #4]
    6140:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6144:	687b      	ldr	r3, [r7, #4]
    6146:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6148:	2104      	movs	r1, #4
    614a:	6878      	ldr	r0, [r7, #4]
    614c:	4b02      	ldr	r3, [pc, #8]	; (6158 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    614e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6150:	bf00      	nop
    6152:	3708      	adds	r7, #8
    6154:	46bd      	mov	sp, r7
    6156:	bd80      	pop	{r7, pc}
    6158:	00005d41 	.word	0x00005d41

0000615c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    615c:	b580      	push	{r7, lr}
    615e:	b082      	sub	sp, #8
    6160:	af00      	add	r7, sp, #0
    6162:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6164:	687b      	ldr	r3, [r7, #4]
    6166:	685b      	ldr	r3, [r3, #4]
    6168:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    616c:	687b      	ldr	r3, [r7, #4]
    616e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6170:	2104      	movs	r1, #4
    6172:	6878      	ldr	r0, [r7, #4]
    6174:	4b02      	ldr	r3, [pc, #8]	; (6180 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    6176:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6178:	bf00      	nop
    617a:	3708      	adds	r7, #8
    617c:	46bd      	mov	sp, r7
    617e:	bd80      	pop	{r7, pc}
    6180:	00005d41 	.word	0x00005d41

00006184 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6184:	b580      	push	{r7, lr}
    6186:	b082      	sub	sp, #8
    6188:	af00      	add	r7, sp, #0
    618a:	6078      	str	r0, [r7, #4]
    618c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    618e:	687b      	ldr	r3, [r7, #4]
    6190:	685a      	ldr	r2, [r3, #4]
    6192:	683b      	ldr	r3, [r7, #0]
    6194:	041b      	lsls	r3, r3, #16
    6196:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    619a:	431a      	orrs	r2, r3
    619c:	687b      	ldr	r3, [r7, #4]
    619e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61a0:	2104      	movs	r1, #4
    61a2:	6878      	ldr	r0, [r7, #4]
    61a4:	4b02      	ldr	r3, [pc, #8]	; (61b0 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    61a6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61a8:	bf00      	nop
    61aa:	3708      	adds	r7, #8
    61ac:	46bd      	mov	sp, r7
    61ae:	bd80      	pop	{r7, pc}
    61b0:	00005d41 	.word	0x00005d41

000061b4 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    61b4:	b580      	push	{r7, lr}
    61b6:	b082      	sub	sp, #8
    61b8:	af00      	add	r7, sp, #0
    61ba:	6078      	str	r0, [r7, #4]
    61bc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    61be:	687b      	ldr	r3, [r7, #4]
    61c0:	683a      	ldr	r2, [r7, #0]
    61c2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61c4:	2104      	movs	r1, #4
    61c6:	6878      	ldr	r0, [r7, #4]
    61c8:	4b02      	ldr	r3, [pc, #8]	; (61d4 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    61ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61cc:	bf00      	nop
    61ce:	3708      	adds	r7, #8
    61d0:	46bd      	mov	sp, r7
    61d2:	bd80      	pop	{r7, pc}
    61d4:	00005d41 	.word	0x00005d41

000061d8 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    61d8:	b580      	push	{r7, lr}
    61da:	b082      	sub	sp, #8
    61dc:	af00      	add	r7, sp, #0
    61de:	6078      	str	r0, [r7, #4]
    61e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    61e2:	687b      	ldr	r3, [r7, #4]
    61e4:	683a      	ldr	r2, [r7, #0]
    61e6:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    61e8:	2117      	movs	r1, #23
    61ea:	6878      	ldr	r0, [r7, #4]
    61ec:	4b02      	ldr	r3, [pc, #8]	; (61f8 <hri_sercomspi_write_CTRLB_reg+0x20>)
    61ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61f0:	bf00      	nop
    61f2:	3708      	adds	r7, #8
    61f4:	46bd      	mov	sp, r7
    61f6:	bd80      	pop	{r7, pc}
    61f8:	00005d8d 	.word	0x00005d8d

000061fc <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    61fc:	b480      	push	{r7}
    61fe:	b083      	sub	sp, #12
    6200:	af00      	add	r7, sp, #0
    6202:	6078      	str	r0, [r7, #4]
    6204:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6206:	687b      	ldr	r3, [r7, #4]
    6208:	683a      	ldr	r2, [r7, #0]
    620a:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    620c:	bf00      	nop
    620e:	370c      	adds	r7, #12
    6210:	46bd      	mov	sp, r7
    6212:	f85d 7b04 	ldr.w	r7, [sp], #4
    6216:	4770      	bx	lr

00006218 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6218:	b480      	push	{r7}
    621a:	b083      	sub	sp, #12
    621c:	af00      	add	r7, sp, #0
    621e:	6078      	str	r0, [r7, #4]
    6220:	460b      	mov	r3, r1
    6222:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6224:	687b      	ldr	r3, [r7, #4]
    6226:	78fa      	ldrb	r2, [r7, #3]
    6228:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    622a:	bf00      	nop
    622c:	370c      	adds	r7, #12
    622e:	46bd      	mov	sp, r7
    6230:	f85d 7b04 	ldr.w	r7, [sp], #4
    6234:	4770      	bx	lr
	...

00006238 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6238:	b580      	push	{r7, lr}
    623a:	b084      	sub	sp, #16
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
    6240:	460b      	mov	r3, r1
    6242:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6248:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    624a:	68fb      	ldr	r3, [r7, #12]
    624c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6250:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6252:	78fb      	ldrb	r3, [r7, #3]
    6254:	039b      	lsls	r3, r3, #14
    6256:	461a      	mov	r2, r3
    6258:	68fb      	ldr	r3, [r7, #12]
    625a:	4313      	orrs	r3, r2
    625c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    625e:	687b      	ldr	r3, [r7, #4]
    6260:	68fa      	ldr	r2, [r7, #12]
    6262:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6264:	2104      	movs	r1, #4
    6266:	6878      	ldr	r0, [r7, #4]
    6268:	4b02      	ldr	r3, [pc, #8]	; (6274 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    626a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    626c:	bf00      	nop
    626e:	3710      	adds	r7, #16
    6270:	46bd      	mov	sp, r7
    6272:	bd80      	pop	{r7, pc}
    6274:	00005d41 	.word	0x00005d41

00006278 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6278:	b580      	push	{r7, lr}
    627a:	b082      	sub	sp, #8
    627c:	af00      	add	r7, sp, #0
    627e:	6078      	str	r0, [r7, #4]
    6280:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	683a      	ldr	r2, [r7, #0]
    6286:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6288:	2104      	movs	r1, #4
    628a:	6878      	ldr	r0, [r7, #4]
    628c:	4b02      	ldr	r3, [pc, #8]	; (6298 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    628e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6290:	bf00      	nop
    6292:	3708      	adds	r7, #8
    6294:	46bd      	mov	sp, r7
    6296:	bd80      	pop	{r7, pc}
    6298:	00005d41 	.word	0x00005d41

0000629c <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    629c:	b580      	push	{r7, lr}
    629e:	b082      	sub	sp, #8
    62a0:	af00      	add	r7, sp, #0
    62a2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62a4:	2104      	movs	r1, #4
    62a6:	6878      	ldr	r0, [r7, #4]
    62a8:	4b03      	ldr	r3, [pc, #12]	; (62b8 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    62aa:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    62ac:	687b      	ldr	r3, [r7, #4]
    62ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    62b0:	4618      	mov	r0, r3
    62b2:	3708      	adds	r7, #8
    62b4:	46bd      	mov	sp, r7
    62b6:	bd80      	pop	{r7, pc}
    62b8:	00005d41 	.word	0x00005d41

000062bc <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    62bc:	b480      	push	{r7}
    62be:	b083      	sub	sp, #12
    62c0:	af00      	add	r7, sp, #0
    62c2:	6078      	str	r0, [r7, #4]
    62c4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    62c6:	687b      	ldr	r3, [r7, #4]
    62c8:	683a      	ldr	r2, [r7, #0]
    62ca:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62cc:	bf00      	nop
    62ce:	370c      	adds	r7, #12
    62d0:	46bd      	mov	sp, r7
    62d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    62d6:	4770      	bx	lr

000062d8 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    62d8:	b580      	push	{r7, lr}
    62da:	b082      	sub	sp, #8
    62dc:	af00      	add	r7, sp, #0
    62de:	6078      	str	r0, [r7, #4]
    62e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	683a      	ldr	r2, [r7, #0]
    62e6:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62e8:	2104      	movs	r1, #4
    62ea:	6878      	ldr	r0, [r7, #4]
    62ec:	4b02      	ldr	r3, [pc, #8]	; (62f8 <hri_sercomi2cm_write_DATA_reg+0x20>)
    62ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62f0:	bf00      	nop
    62f2:	3708      	adds	r7, #8
    62f4:	46bd      	mov	sp, r7
    62f6:	bd80      	pop	{r7, pc}
    62f8:	00005d41 	.word	0x00005d41

000062fc <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    62fc:	b580      	push	{r7, lr}
    62fe:	b082      	sub	sp, #8
    6300:	af00      	add	r7, sp, #0
    6302:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6304:	2104      	movs	r1, #4
    6306:	6878      	ldr	r0, [r7, #4]
    6308:	4b03      	ldr	r3, [pc, #12]	; (6318 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    630a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    630c:	687b      	ldr	r3, [r7, #4]
    630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6310:	4618      	mov	r0, r3
    6312:	3708      	adds	r7, #8
    6314:	46bd      	mov	sp, r7
    6316:	bd80      	pop	{r7, pc}
    6318:	00005d41 	.word	0x00005d41

0000631c <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    631c:	b480      	push	{r7}
    631e:	b083      	sub	sp, #12
    6320:	af00      	add	r7, sp, #0
    6322:	6078      	str	r0, [r7, #4]
    6324:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6326:	687b      	ldr	r3, [r7, #4]
    6328:	683a      	ldr	r2, [r7, #0]
    632a:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    632c:	bf00      	nop
    632e:	370c      	adds	r7, #12
    6330:	46bd      	mov	sp, r7
    6332:	f85d 7b04 	ldr.w	r7, [sp], #4
    6336:	4770      	bx	lr

00006338 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6338:	b480      	push	{r7}
    633a:	b083      	sub	sp, #12
    633c:	af00      	add	r7, sp, #0
    633e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6340:	687b      	ldr	r3, [r7, #4]
    6342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6344:	4618      	mov	r0, r3
    6346:	370c      	adds	r7, #12
    6348:	46bd      	mov	sp, r7
    634a:	f85d 7b04 	ldr.w	r7, [sp], #4
    634e:	4770      	bx	lr

00006350 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6350:	b480      	push	{r7}
    6352:	b083      	sub	sp, #12
    6354:	af00      	add	r7, sp, #0
    6356:	6078      	str	r0, [r7, #4]
    6358:	460b      	mov	r3, r1
    635a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    635c:	687b      	ldr	r3, [r7, #4]
    635e:	78fa      	ldrb	r2, [r7, #3]
    6360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6364:	bf00      	nop
    6366:	370c      	adds	r7, #12
    6368:	46bd      	mov	sp, r7
    636a:	f85d 7b04 	ldr.w	r7, [sp], #4
    636e:	4770      	bx	lr

00006370 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6370:	b480      	push	{r7}
    6372:	b083      	sub	sp, #12
    6374:	af00      	add	r7, sp, #0
    6376:	6078      	str	r0, [r7, #4]
    6378:	460b      	mov	r3, r1
    637a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    637c:	687b      	ldr	r3, [r7, #4]
    637e:	887a      	ldrh	r2, [r7, #2]
    6380:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6382:	bf00      	nop
    6384:	370c      	adds	r7, #12
    6386:	46bd      	mov	sp, r7
    6388:	f85d 7b04 	ldr.w	r7, [sp], #4
    638c:	4770      	bx	lr
	...

00006390 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6390:	b580      	push	{r7, lr}
    6392:	b082      	sub	sp, #8
    6394:	af00      	add	r7, sp, #0
    6396:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6398:	2104      	movs	r1, #4
    639a:	6878      	ldr	r0, [r7, #4]
    639c:	4b04      	ldr	r3, [pc, #16]	; (63b0 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    639e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    63a0:	687b      	ldr	r3, [r7, #4]
    63a2:	8b5b      	ldrh	r3, [r3, #26]
    63a4:	b29b      	uxth	r3, r3
}
    63a6:	4618      	mov	r0, r3
    63a8:	3708      	adds	r7, #8
    63aa:	46bd      	mov	sp, r7
    63ac:	bd80      	pop	{r7, pc}
    63ae:	bf00      	nop
    63b0:	00005d41 	.word	0x00005d41

000063b4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    63b4:	b4b0      	push	{r4, r5, r7}
    63b6:	b08d      	sub	sp, #52	; 0x34
    63b8:	af00      	add	r7, sp, #0
    63ba:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    63bc:	4b13      	ldr	r3, [pc, #76]	; (640c <_sercom_get_hardware_index+0x58>)
    63be:	f107 040c 	add.w	r4, r7, #12
    63c2:	461d      	mov	r5, r3
    63c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    63c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    63c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    63cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    63d0:	2300      	movs	r3, #0
    63d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    63d4:	e010      	b.n	63f8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    63d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63d8:	009b      	lsls	r3, r3, #2
    63da:	f107 0230 	add.w	r2, r7, #48	; 0x30
    63de:	4413      	add	r3, r2
    63e0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    63e4:	461a      	mov	r2, r3
    63e6:	687b      	ldr	r3, [r7, #4]
    63e8:	429a      	cmp	r2, r3
    63ea:	d102      	bne.n	63f2 <_sercom_get_hardware_index+0x3e>
			return i;
    63ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63ee:	b2db      	uxtb	r3, r3
    63f0:	e006      	b.n	6400 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    63f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63f4:	3301      	adds	r3, #1
    63f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    63f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63fa:	2b07      	cmp	r3, #7
    63fc:	d9eb      	bls.n	63d6 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    63fe:	2300      	movs	r3, #0
}
    6400:	4618      	mov	r0, r3
    6402:	3734      	adds	r7, #52	; 0x34
    6404:	46bd      	mov	sp, r7
    6406:	bcb0      	pop	{r4, r5, r7}
    6408:	4770      	bx	lr
    640a:	bf00      	nop
    640c:	0000ef68 	.word	0x0000ef68

00006410 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    6410:	b480      	push	{r7}
    6412:	b083      	sub	sp, #12
    6414:	af00      	add	r7, sp, #0
    6416:	6078      	str	r0, [r7, #4]
    6418:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    6420:	d102      	bne.n	6428 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    6422:	4a0b      	ldr	r2, [pc, #44]	; (6450 <_sercom_init_irq_param+0x40>)
    6424:	683b      	ldr	r3, [r7, #0]
    6426:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    6428:	687b      	ldr	r3, [r7, #4]
    642a:	4a0a      	ldr	r2, [pc, #40]	; (6454 <_sercom_init_irq_param+0x44>)
    642c:	4293      	cmp	r3, r2
    642e:	d102      	bne.n	6436 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    6430:	4a09      	ldr	r2, [pc, #36]	; (6458 <_sercom_init_irq_param+0x48>)
    6432:	683b      	ldr	r3, [r7, #0]
    6434:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    6436:	687b      	ldr	r3, [r7, #4]
    6438:	4a08      	ldr	r2, [pc, #32]	; (645c <_sercom_init_irq_param+0x4c>)
    643a:	4293      	cmp	r3, r2
    643c:	d102      	bne.n	6444 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    643e:	4a08      	ldr	r2, [pc, #32]	; (6460 <_sercom_init_irq_param+0x50>)
    6440:	683b      	ldr	r3, [r7, #0]
    6442:	6013      	str	r3, [r2, #0]
	}
}
    6444:	bf00      	nop
    6446:	370c      	adds	r7, #12
    6448:	46bd      	mov	sp, r7
    644a:	f85d 7b04 	ldr.w	r7, [sp], #4
    644e:	4770      	bx	lr
    6450:	200006f4 	.word	0x200006f4
    6454:	43000400 	.word	0x43000400
    6458:	200006f8 	.word	0x200006f8
    645c:	43000c00 	.word	0x43000c00
    6460:	200006fc 	.word	0x200006fc

00006464 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6464:	b580      	push	{r7, lr}
    6466:	b084      	sub	sp, #16
    6468:	af00      	add	r7, sp, #0
    646a:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    646c:	6878      	ldr	r0, [r7, #4]
    646e:	4b13      	ldr	r3, [pc, #76]	; (64bc <_get_i2cm_index+0x58>)
    6470:	4798      	blx	r3
    6472:	4603      	mov	r3, r0
    6474:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6476:	2300      	movs	r3, #0
    6478:	73fb      	strb	r3, [r7, #15]
    647a:	e010      	b.n	649e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    647c:	7bfa      	ldrb	r2, [r7, #15]
    647e:	4910      	ldr	r1, [pc, #64]	; (64c0 <_get_i2cm_index+0x5c>)
    6480:	4613      	mov	r3, r2
    6482:	005b      	lsls	r3, r3, #1
    6484:	4413      	add	r3, r2
    6486:	00db      	lsls	r3, r3, #3
    6488:	440b      	add	r3, r1
    648a:	781b      	ldrb	r3, [r3, #0]
    648c:	7bba      	ldrb	r2, [r7, #14]
    648e:	429a      	cmp	r2, r3
    6490:	d102      	bne.n	6498 <_get_i2cm_index+0x34>
			return i;
    6492:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6496:	e00d      	b.n	64b4 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6498:	7bfb      	ldrb	r3, [r7, #15]
    649a:	3301      	adds	r3, #1
    649c:	73fb      	strb	r3, [r7, #15]
    649e:	7bfb      	ldrb	r3, [r7, #15]
    64a0:	2b01      	cmp	r3, #1
    64a2:	d9eb      	bls.n	647c <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    64a4:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    64a8:	4906      	ldr	r1, [pc, #24]	; (64c4 <_get_i2cm_index+0x60>)
    64aa:	2000      	movs	r0, #0
    64ac:	4b06      	ldr	r3, [pc, #24]	; (64c8 <_get_i2cm_index+0x64>)
    64ae:	4798      	blx	r3
	return -1;
    64b0:	f04f 33ff 	mov.w	r3, #4294967295
}
    64b4:	4618      	mov	r0, r3
    64b6:	3710      	adds	r7, #16
    64b8:	46bd      	mov	sp, r7
    64ba:	bd80      	pop	{r7, pc}
    64bc:	000063b5 	.word	0x000063b5
    64c0:	20000018 	.word	0x20000018
    64c4:	0000ef4c 	.word	0x0000ef4c
    64c8:	00003911 	.word	0x00003911

000064cc <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    64cc:	b580      	push	{r7, lr}
    64ce:	b082      	sub	sp, #8
    64d0:	af00      	add	r7, sp, #0
    64d2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    64d4:	2103      	movs	r1, #3
    64d6:	6878      	ldr	r0, [r7, #4]
    64d8:	4b02      	ldr	r3, [pc, #8]	; (64e4 <_sercom_i2c_send_stop+0x18>)
    64da:	4798      	blx	r3
}
    64dc:	bf00      	nop
    64de:	3708      	adds	r7, #8
    64e0:	46bd      	mov	sp, r7
    64e2:	bd80      	pop	{r7, pc}
    64e4:	00006185 	.word	0x00006185

000064e8 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    64e8:	b590      	push	{r4, r7, lr}
    64ea:	b087      	sub	sp, #28
    64ec:	af00      	add	r7, sp, #0
    64ee:	60f8      	str	r0, [r7, #12]
    64f0:	60b9      	str	r1, [r7, #8]
    64f2:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    64f4:	68f8      	ldr	r0, [r7, #12]
    64f6:	4b7d      	ldr	r3, [pc, #500]	; (66ec <_sercom_i2c_sync_analyse_flags+0x204>)
    64f8:	4798      	blx	r3
    64fa:	4603      	mov	r3, r0
    64fc:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    64fe:	68f8      	ldr	r0, [r7, #12]
    6500:	4b7b      	ldr	r3, [pc, #492]	; (66f0 <_sercom_i2c_sync_analyse_flags+0x208>)
    6502:	4798      	blx	r3
    6504:	4603      	mov	r3, r0
    6506:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6508:	68bb      	ldr	r3, [r7, #8]
    650a:	f003 0301 	and.w	r3, r3, #1
    650e:	2b00      	cmp	r3, #0
    6510:	f000 8095 	beq.w	663e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6514:	8a7b      	ldrh	r3, [r7, #18]
    6516:	f003 0302 	and.w	r3, r3, #2
    651a:	2b00      	cmp	r3, #0
    651c:	d01d      	beq.n	655a <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    651e:	68f8      	ldr	r0, [r7, #12]
    6520:	4b74      	ldr	r3, [pc, #464]	; (66f4 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6522:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6524:	687b      	ldr	r3, [r7, #4]
    6526:	885b      	ldrh	r3, [r3, #2]
    6528:	b29b      	uxth	r3, r3
    652a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    652e:	b29a      	uxth	r2, r3
    6530:	687b      	ldr	r3, [r7, #4]
    6532:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6534:	687b      	ldr	r3, [r7, #4]
    6536:	885b      	ldrh	r3, [r3, #2]
    6538:	b29b      	uxth	r3, r3
    653a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    653e:	b29a      	uxth	r2, r3
    6540:	687b      	ldr	r3, [r7, #4]
    6542:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6544:	8a7b      	ldrh	r3, [r7, #18]
    6546:	f003 0301 	and.w	r3, r3, #1
    654a:	2b00      	cmp	r3, #0
    654c:	d002      	beq.n	6554 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    654e:	f06f 0304 	mvn.w	r3, #4
    6552:	e0c6      	b.n	66e2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6554:	f06f 0303 	mvn.w	r3, #3
    6558:	e0c3      	b.n	66e2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    655a:	8a7b      	ldrh	r3, [r7, #18]
    655c:	f003 0304 	and.w	r3, r3, #4
    6560:	2b00      	cmp	r3, #0
    6562:	d01f      	beq.n	65a4 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6564:	687b      	ldr	r3, [r7, #4]
    6566:	685b      	ldr	r3, [r3, #4]
    6568:	2b00      	cmp	r3, #0
    656a:	dd07      	ble.n	657c <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    656c:	687b      	ldr	r3, [r7, #4]
    656e:	885b      	ldrh	r3, [r3, #2]
    6570:	b29b      	uxth	r3, r3
    6572:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6576:	b29a      	uxth	r2, r3
    6578:	687b      	ldr	r3, [r7, #4]
    657a:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    657c:	687b      	ldr	r3, [r7, #4]
    657e:	885b      	ldrh	r3, [r3, #2]
    6580:	b29b      	uxth	r3, r3
    6582:	b21b      	sxth	r3, r3
    6584:	2b00      	cmp	r3, #0
    6586:	da02      	bge.n	658e <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6588:	68f8      	ldr	r0, [r7, #12]
    658a:	4b5b      	ldr	r3, [pc, #364]	; (66f8 <_sercom_i2c_sync_analyse_flags+0x210>)
    658c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    658e:	687b      	ldr	r3, [r7, #4]
    6590:	885b      	ldrh	r3, [r3, #2]
    6592:	b29b      	uxth	r3, r3
    6594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6598:	b29a      	uxth	r2, r3
    659a:	687b      	ldr	r3, [r7, #4]
    659c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    659e:	f06f 0301 	mvn.w	r3, #1
    65a2:	e09e      	b.n	66e2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    65a4:	687b      	ldr	r3, [r7, #4]
    65a6:	885b      	ldrh	r3, [r3, #2]
    65a8:	b29b      	uxth	r3, r3
    65aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    65ae:	2b00      	cmp	r3, #0
    65b0:	d01c      	beq.n	65ec <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    65b2:	687b      	ldr	r3, [r7, #4]
    65b4:	881b      	ldrh	r3, [r3, #0]
    65b6:	121b      	asrs	r3, r3, #8
    65b8:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    65ba:	f003 0406 	and.w	r4, r3, #6
    65be:	68f8      	ldr	r0, [r7, #12]
    65c0:	4b4e      	ldr	r3, [pc, #312]	; (66fc <_sercom_i2c_sync_analyse_flags+0x214>)
    65c2:	4798      	blx	r3
    65c4:	4603      	mov	r3, r0
    65c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    65ca:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    65cc:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    65d0:	4619      	mov	r1, r3
    65d2:	68f8      	ldr	r0, [r7, #12]
    65d4:	4b4a      	ldr	r3, [pc, #296]	; (6700 <_sercom_i2c_sync_analyse_flags+0x218>)
    65d6:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	885b      	ldrh	r3, [r3, #2]
    65dc:	b29b      	uxth	r3, r3
    65de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    65e2:	b29a      	uxth	r2, r3
    65e4:	687b      	ldr	r3, [r7, #4]
    65e6:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    65e8:	2300      	movs	r3, #0
    65ea:	e07a      	b.n	66e2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    65ec:	687b      	ldr	r3, [r7, #4]
    65ee:	685b      	ldr	r3, [r3, #4]
    65f0:	2b00      	cmp	r3, #0
    65f2:	d111      	bne.n	6618 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    65f4:	687b      	ldr	r3, [r7, #4]
    65f6:	885b      	ldrh	r3, [r3, #2]
    65f8:	b29b      	uxth	r3, r3
    65fa:	b21b      	sxth	r3, r3
    65fc:	2b00      	cmp	r3, #0
    65fe:	da02      	bge.n	6606 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6600:	68f8      	ldr	r0, [r7, #12]
    6602:	4b3d      	ldr	r3, [pc, #244]	; (66f8 <_sercom_i2c_sync_analyse_flags+0x210>)
    6604:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6606:	687b      	ldr	r3, [r7, #4]
    6608:	885b      	ldrh	r3, [r3, #2]
    660a:	b29b      	uxth	r3, r3
    660c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6610:	b29a      	uxth	r2, r3
    6612:	687b      	ldr	r3, [r7, #4]
    6614:	805a      	strh	r2, [r3, #2]
    6616:	e010      	b.n	663a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6618:	687b      	ldr	r3, [r7, #4]
    661a:	689b      	ldr	r3, [r3, #8]
    661c:	781b      	ldrb	r3, [r3, #0]
    661e:	4619      	mov	r1, r3
    6620:	68f8      	ldr	r0, [r7, #12]
    6622:	4b38      	ldr	r3, [pc, #224]	; (6704 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6624:	4798      	blx	r3
				msg->buffer++;
    6626:	687b      	ldr	r3, [r7, #4]
    6628:	689b      	ldr	r3, [r3, #8]
    662a:	1c5a      	adds	r2, r3, #1
    662c:	687b      	ldr	r3, [r7, #4]
    662e:	609a      	str	r2, [r3, #8]
				msg->len--;
    6630:	687b      	ldr	r3, [r7, #4]
    6632:	685b      	ldr	r3, [r3, #4]
    6634:	1e5a      	subs	r2, r3, #1
    6636:	687b      	ldr	r3, [r7, #4]
    6638:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    663a:	2300      	movs	r3, #0
    663c:	e051      	b.n	66e2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    663e:	68bb      	ldr	r3, [r7, #8]
    6640:	f003 0302 	and.w	r3, r3, #2
    6644:	2b00      	cmp	r3, #0
    6646:	d04b      	beq.n	66e0 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6648:	687b      	ldr	r3, [r7, #4]
    664a:	685b      	ldr	r3, [r3, #4]
    664c:	2b00      	cmp	r3, #0
    664e:	d041      	beq.n	66d4 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6650:	8a7b      	ldrh	r3, [r7, #18]
    6652:	f003 0304 	and.w	r3, r3, #4
    6656:	2b00      	cmp	r3, #0
    6658:	d13c      	bne.n	66d4 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    665a:	687b      	ldr	r3, [r7, #4]
    665c:	685b      	ldr	r3, [r3, #4]
    665e:	1e5a      	subs	r2, r3, #1
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6664:	687b      	ldr	r3, [r7, #4]
    6666:	685b      	ldr	r3, [r3, #4]
    6668:	2b00      	cmp	r3, #0
    666a:	d102      	bne.n	6672 <_sercom_i2c_sync_analyse_flags+0x18a>
    666c:	697b      	ldr	r3, [r7, #20]
    666e:	2b00      	cmp	r3, #0
    6670:	d006      	beq.n	6680 <_sercom_i2c_sync_analyse_flags+0x198>
    6672:	687b      	ldr	r3, [r7, #4]
    6674:	685b      	ldr	r3, [r3, #4]
    6676:	2b01      	cmp	r3, #1
    6678:	d105      	bne.n	6686 <_sercom_i2c_sync_analyse_flags+0x19e>
    667a:	697b      	ldr	r3, [r7, #20]
    667c:	2b00      	cmp	r3, #0
    667e:	d002      	beq.n	6686 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6680:	68f8      	ldr	r0, [r7, #12]
    6682:	4b21      	ldr	r3, [pc, #132]	; (6708 <_sercom_i2c_sync_analyse_flags+0x220>)
    6684:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6686:	687b      	ldr	r3, [r7, #4]
    6688:	685b      	ldr	r3, [r3, #4]
    668a:	2b00      	cmp	r3, #0
    668c:	d113      	bne.n	66b6 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    668e:	687b      	ldr	r3, [r7, #4]
    6690:	885b      	ldrh	r3, [r3, #2]
    6692:	b29b      	uxth	r3, r3
    6694:	b21b      	sxth	r3, r3
    6696:	2b00      	cmp	r3, #0
    6698:	da05      	bge.n	66a6 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    669a:	68f8      	ldr	r0, [r7, #12]
    669c:	4b1b      	ldr	r3, [pc, #108]	; (670c <_sercom_i2c_sync_analyse_flags+0x224>)
    669e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    66a0:	68f8      	ldr	r0, [r7, #12]
    66a2:	4b15      	ldr	r3, [pc, #84]	; (66f8 <_sercom_i2c_sync_analyse_flags+0x210>)
    66a4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    66a6:	687b      	ldr	r3, [r7, #4]
    66a8:	885b      	ldrh	r3, [r3, #2]
    66aa:	b29b      	uxth	r3, r3
    66ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    66b0:	b29a      	uxth	r2, r3
    66b2:	687b      	ldr	r3, [r7, #4]
    66b4:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    66b6:	687b      	ldr	r3, [r7, #4]
    66b8:	689c      	ldr	r4, [r3, #8]
    66ba:	1c62      	adds	r2, r4, #1
    66bc:	687b      	ldr	r3, [r7, #4]
    66be:	609a      	str	r2, [r3, #8]
    66c0:	68f8      	ldr	r0, [r7, #12]
    66c2:	4b13      	ldr	r3, [pc, #76]	; (6710 <_sercom_i2c_sync_analyse_flags+0x228>)
    66c4:	4798      	blx	r3
    66c6:	4603      	mov	r3, r0
    66c8:	b2db      	uxtb	r3, r3
    66ca:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    66cc:	68f8      	ldr	r0, [r7, #12]
    66ce:	4b11      	ldr	r3, [pc, #68]	; (6714 <_sercom_i2c_sync_analyse_flags+0x22c>)
    66d0:	4798      	blx	r3
    66d2:	e005      	b.n	66e0 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    66d4:	68f8      	ldr	r0, [r7, #12]
    66d6:	4b0f      	ldr	r3, [pc, #60]	; (6714 <_sercom_i2c_sync_analyse_flags+0x22c>)
    66d8:	4798      	blx	r3
			return I2C_NACK;
    66da:	f06f 0301 	mvn.w	r3, #1
    66de:	e000      	b.n	66e2 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    66e0:	2300      	movs	r3, #0
}
    66e2:	4618      	mov	r0, r3
    66e4:	371c      	adds	r7, #28
    66e6:	46bd      	mov	sp, r7
    66e8:	bd90      	pop	{r4, r7, pc}
    66ea:	bf00      	nop
    66ec:	00005f85 	.word	0x00005f85
    66f0:	00006391 	.word	0x00006391
    66f4:	00005dd9 	.word	0x00005dd9
    66f8:	000064cd 	.word	0x000064cd
    66fc:	0000629d 	.word	0x0000629d
    6700:	00006279 	.word	0x00006279
    6704:	000062d9 	.word	0x000062d9
    6708:	00006135 	.word	0x00006135
    670c:	0000610d 	.word	0x0000610d
    6710:	000062fd 	.word	0x000062fd
    6714:	00005df3 	.word	0x00005df3

00006718 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6718:	b580      	push	{r7, lr}
    671a:	b086      	sub	sp, #24
    671c:	af00      	add	r7, sp, #0
    671e:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6720:	687b      	ldr	r3, [r7, #4]
    6722:	691b      	ldr	r3, [r3, #16]
    6724:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6726:	6938      	ldr	r0, [r7, #16]
    6728:	4b37      	ldr	r3, [pc, #220]	; (6808 <_sercom_i2c_m_irq_handler+0xf0>)
    672a:	4798      	blx	r3
    672c:	4603      	mov	r3, r0
    672e:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6730:	2300      	movs	r3, #0
    6732:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	2b00      	cmp	r3, #0
    6738:	bf14      	ite	ne
    673a:	2301      	movne	r3, #1
    673c:	2300      	moveq	r3, #0
    673e:	b2db      	uxtb	r3, r3
    6740:	f240 422a 	movw	r2, #1066	; 0x42a
    6744:	4931      	ldr	r1, [pc, #196]	; (680c <_sercom_i2c_m_irq_handler+0xf4>)
    6746:	4618      	mov	r0, r3
    6748:	4b31      	ldr	r3, [pc, #196]	; (6810 <_sercom_i2c_m_irq_handler+0xf8>)
    674a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	691b      	ldr	r3, [r3, #16]
    6750:	2b00      	cmp	r3, #0
    6752:	bf14      	ite	ne
    6754:	2301      	movne	r3, #1
    6756:	2300      	moveq	r3, #0
    6758:	b2db      	uxtb	r3, r3
    675a:	f240 422b 	movw	r2, #1067	; 0x42b
    675e:	492b      	ldr	r1, [pc, #172]	; (680c <_sercom_i2c_m_irq_handler+0xf4>)
    6760:	4618      	mov	r0, r3
    6762:	4b2b      	ldr	r3, [pc, #172]	; (6810 <_sercom_i2c_m_irq_handler+0xf8>)
    6764:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6766:	bf00      	nop
    6768:	68fb      	ldr	r3, [r7, #12]
    676a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    676e:	2b00      	cmp	r3, #0
    6770:	d126      	bne.n	67c0 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6772:	687b      	ldr	r3, [r7, #4]
    6774:	461a      	mov	r2, r3
    6776:	68f9      	ldr	r1, [r7, #12]
    6778:	6938      	ldr	r0, [r7, #16]
    677a:	4b26      	ldr	r3, [pc, #152]	; (6814 <_sercom_i2c_m_irq_handler+0xfc>)
    677c:	4798      	blx	r3
    677e:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6780:	697b      	ldr	r3, [r7, #20]
    6782:	2b00      	cmp	r3, #0
    6784:	d11b      	bne.n	67be <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6786:	68fb      	ldr	r3, [r7, #12]
    6788:	f003 0301 	and.w	r3, r3, #1
    678c:	2b00      	cmp	r3, #0
    678e:	d008      	beq.n	67a2 <_sercom_i2c_m_irq_handler+0x8a>
    6790:	687b      	ldr	r3, [r7, #4]
    6792:	699b      	ldr	r3, [r3, #24]
    6794:	2b00      	cmp	r3, #0
    6796:	d004      	beq.n	67a2 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6798:	687b      	ldr	r3, [r7, #4]
    679a:	699b      	ldr	r3, [r3, #24]
    679c:	6878      	ldr	r0, [r7, #4]
    679e:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    67a0:	e02e      	b.n	6800 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    67a2:	68fb      	ldr	r3, [r7, #12]
    67a4:	f003 0302 	and.w	r3, r3, #2
    67a8:	2b00      	cmp	r3, #0
    67aa:	d029      	beq.n	6800 <_sercom_i2c_m_irq_handler+0xe8>
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	69db      	ldr	r3, [r3, #28]
    67b0:	2b00      	cmp	r3, #0
    67b2:	d025      	beq.n	6800 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    67b4:	687b      	ldr	r3, [r7, #4]
    67b6:	69db      	ldr	r3, [r3, #28]
    67b8:	6878      	ldr	r0, [r7, #4]
    67ba:	4798      	blx	r3
		return;
    67bc:	e020      	b.n	6800 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    67be:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    67c0:	687b      	ldr	r3, [r7, #4]
    67c2:	885b      	ldrh	r3, [r3, #2]
    67c4:	b29b      	uxth	r3, r3
    67c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    67ca:	b29a      	uxth	r2, r3
    67cc:	687b      	ldr	r3, [r7, #4]
    67ce:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    67d0:	687b      	ldr	r3, [r7, #4]
    67d2:	695b      	ldr	r3, [r3, #20]
    67d4:	2b00      	cmp	r3, #0
    67d6:	d014      	beq.n	6802 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    67d8:	697b      	ldr	r3, [r7, #20]
    67da:	2b00      	cmp	r3, #0
    67dc:	d005      	beq.n	67ea <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    67de:	687b      	ldr	r3, [r7, #4]
    67e0:	695b      	ldr	r3, [r3, #20]
    67e2:	6979      	ldr	r1, [r7, #20]
    67e4:	6878      	ldr	r0, [r7, #4]
    67e6:	4798      	blx	r3
    67e8:	e005      	b.n	67f6 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    67ea:	687b      	ldr	r3, [r7, #4]
    67ec:	695b      	ldr	r3, [r3, #20]
    67ee:	f06f 0104 	mvn.w	r1, #4
    67f2:	6878      	ldr	r0, [r7, #4]
    67f4:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    67f6:	2180      	movs	r1, #128	; 0x80
    67f8:	6938      	ldr	r0, [r7, #16]
    67fa:	4b07      	ldr	r3, [pc, #28]	; (6818 <_sercom_i2c_m_irq_handler+0x100>)
    67fc:	4798      	blx	r3
    67fe:	e000      	b.n	6802 <_sercom_i2c_m_irq_handler+0xea>
		return;
    6800:	bf00      	nop
	}
}
    6802:	3718      	adds	r7, #24
    6804:	46bd      	mov	sp, r7
    6806:	bd80      	pop	{r7, pc}
    6808:	00005e0d 	.word	0x00005e0d
    680c:	0000ef4c 	.word	0x0000ef4c
    6810:	00003911 	.word	0x00003911
    6814:	000064e9 	.word	0x000064e9
    6818:	00005e27 	.word	0x00005e27

0000681c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    681c:	b580      	push	{r7, lr}
    681e:	b082      	sub	sp, #8
    6820:	af00      	add	r7, sp, #0
    6822:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6824:	6878      	ldr	r0, [r7, #4]
    6826:	4b05      	ldr	r3, [pc, #20]	; (683c <_sercom_get_irq_num+0x20>)
    6828:	4798      	blx	r3
    682a:	4603      	mov	r3, r0
    682c:	009b      	lsls	r3, r3, #2
    682e:	b2db      	uxtb	r3, r3
    6830:	332e      	adds	r3, #46	; 0x2e
    6832:	b2db      	uxtb	r3, r3
}
    6834:	4618      	mov	r0, r3
    6836:	3708      	adds	r7, #8
    6838:	46bd      	mov	sp, r7
    683a:	bd80      	pop	{r7, pc}
    683c:	000063b5 	.word	0x000063b5

00006840 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6840:	b580      	push	{r7, lr}
    6842:	b086      	sub	sp, #24
    6844:	af00      	add	r7, sp, #0
    6846:	6078      	str	r0, [r7, #4]
    6848:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    684a:	687b      	ldr	r3, [r7, #4]
    684c:	2b00      	cmp	r3, #0
    684e:	bf14      	ite	ne
    6850:	2301      	movne	r3, #1
    6852:	2300      	moveq	r3, #0
    6854:	b2db      	uxtb	r3, r3
    6856:	f240 429e 	movw	r2, #1182	; 0x49e
    685a:	491d      	ldr	r1, [pc, #116]	; (68d0 <_i2c_m_async_init+0x90>)
    685c:	4618      	mov	r0, r3
    685e:	4b1d      	ldr	r3, [pc, #116]	; (68d4 <_i2c_m_async_init+0x94>)
    6860:	4798      	blx	r3

	i2c_dev->hw = hw;
    6862:	687b      	ldr	r3, [r7, #4]
    6864:	683a      	ldr	r2, [r7, #0]
    6866:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6868:	687b      	ldr	r3, [r7, #4]
    686a:	6839      	ldr	r1, [r7, #0]
    686c:	4618      	mov	r0, r3
    686e:	4b1a      	ldr	r3, [pc, #104]	; (68d8 <_i2c_m_async_init+0x98>)
    6870:	4798      	blx	r3
    6872:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6874:	68fb      	ldr	r3, [r7, #12]
    6876:	2b00      	cmp	r3, #0
    6878:	d001      	beq.n	687e <_i2c_m_async_init+0x3e>
		return init_status;
    687a:	68fb      	ldr	r3, [r7, #12]
    687c:	e024      	b.n	68c8 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    687e:	6879      	ldr	r1, [r7, #4]
    6880:	6838      	ldr	r0, [r7, #0]
    6882:	4b16      	ldr	r3, [pc, #88]	; (68dc <_i2c_m_async_init+0x9c>)
    6884:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6886:	6838      	ldr	r0, [r7, #0]
    6888:	4b15      	ldr	r3, [pc, #84]	; (68e0 <_i2c_m_async_init+0xa0>)
    688a:	4798      	blx	r3
    688c:	4603      	mov	r3, r0
    688e:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6890:	2300      	movs	r3, #0
    6892:	613b      	str	r3, [r7, #16]
    6894:	e014      	b.n	68c0 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6896:	7dfb      	ldrb	r3, [r7, #23]
    6898:	b21b      	sxth	r3, r3
    689a:	4618      	mov	r0, r3
    689c:	4b11      	ldr	r3, [pc, #68]	; (68e4 <_i2c_m_async_init+0xa4>)
    689e:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    68a0:	7dfb      	ldrb	r3, [r7, #23]
    68a2:	b21b      	sxth	r3, r3
    68a4:	4618      	mov	r0, r3
    68a6:	4b10      	ldr	r3, [pc, #64]	; (68e8 <_i2c_m_async_init+0xa8>)
    68a8:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    68aa:	7dfb      	ldrb	r3, [r7, #23]
    68ac:	b21b      	sxth	r3, r3
    68ae:	4618      	mov	r0, r3
    68b0:	4b0e      	ldr	r3, [pc, #56]	; (68ec <_i2c_m_async_init+0xac>)
    68b2:	4798      	blx	r3
		irq++;
    68b4:	7dfb      	ldrb	r3, [r7, #23]
    68b6:	3301      	adds	r3, #1
    68b8:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    68ba:	693b      	ldr	r3, [r7, #16]
    68bc:	3301      	adds	r3, #1
    68be:	613b      	str	r3, [r7, #16]
    68c0:	693b      	ldr	r3, [r7, #16]
    68c2:	2b03      	cmp	r3, #3
    68c4:	d9e7      	bls.n	6896 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    68c6:	2300      	movs	r3, #0
}
    68c8:	4618      	mov	r0, r3
    68ca:	3718      	adds	r7, #24
    68cc:	46bd      	mov	sp, r7
    68ce:	bd80      	pop	{r7, pc}
    68d0:	0000ef4c 	.word	0x0000ef4c
    68d4:	00003911 	.word	0x00003911
    68d8:	00006b09 	.word	0x00006b09
    68dc:	00006411 	.word	0x00006411
    68e0:	0000681d 	.word	0x0000681d
    68e4:	00005cc1 	.word	0x00005cc1
    68e8:	00005d05 	.word	0x00005d05
    68ec:	00005c85 	.word	0x00005c85

000068f0 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    68f0:	b590      	push	{r4, r7, lr}
    68f2:	b087      	sub	sp, #28
    68f4:	af00      	add	r7, sp, #0
    68f6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    68f8:	687b      	ldr	r3, [r7, #4]
    68fa:	691b      	ldr	r3, [r3, #16]
    68fc:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    68fe:	687b      	ldr	r3, [r7, #4]
    6900:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6902:	6978      	ldr	r0, [r7, #20]
    6904:	4b33      	ldr	r3, [pc, #204]	; (69d4 <_sercom_i2c_send_address+0xe4>)
    6906:	4798      	blx	r3
    6908:	4603      	mov	r3, r0
    690a:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    690c:	687b      	ldr	r3, [r7, #4]
    690e:	2b00      	cmp	r3, #0
    6910:	bf14      	ite	ne
    6912:	2301      	movne	r3, #1
    6914:	2300      	moveq	r3, #0
    6916:	b2db      	uxtb	r3, r3
    6918:	f240 42cc 	movw	r2, #1228	; 0x4cc
    691c:	492e      	ldr	r1, [pc, #184]	; (69d8 <_sercom_i2c_send_address+0xe8>)
    691e:	4618      	mov	r0, r3
    6920:	4b2e      	ldr	r3, [pc, #184]	; (69dc <_sercom_i2c_send_address+0xec>)
    6922:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6924:	693b      	ldr	r3, [r7, #16]
    6926:	685b      	ldr	r3, [r3, #4]
    6928:	2b01      	cmp	r3, #1
    692a:	d106      	bne.n	693a <_sercom_i2c_send_address+0x4a>
    692c:	68fb      	ldr	r3, [r7, #12]
    692e:	2b00      	cmp	r3, #0
    6930:	d003      	beq.n	693a <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6932:	6978      	ldr	r0, [r7, #20]
    6934:	4b2a      	ldr	r3, [pc, #168]	; (69e0 <_sercom_i2c_send_address+0xf0>)
    6936:	4798      	blx	r3
    6938:	e002      	b.n	6940 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    693a:	6978      	ldr	r0, [r7, #20]
    693c:	4b29      	ldr	r3, [pc, #164]	; (69e4 <_sercom_i2c_send_address+0xf4>)
    693e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6940:	693b      	ldr	r3, [r7, #16]
    6942:	881b      	ldrh	r3, [r3, #0]
    6944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6948:	2b00      	cmp	r3, #0
    694a:	d022      	beq.n	6992 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    694c:	693b      	ldr	r3, [r7, #16]
    694e:	885b      	ldrh	r3, [r3, #2]
    6950:	b29b      	uxth	r3, r3
    6952:	f003 0301 	and.w	r3, r3, #1
    6956:	2b00      	cmp	r3, #0
    6958:	d007      	beq.n	696a <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    695a:	693b      	ldr	r3, [r7, #16]
    695c:	885b      	ldrh	r3, [r3, #2]
    695e:	b29b      	uxth	r3, r3
    6960:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6964:	b29a      	uxth	r2, r3
    6966:	693b      	ldr	r3, [r7, #16]
    6968:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    696a:	693b      	ldr	r3, [r7, #16]
    696c:	881b      	ldrh	r3, [r3, #0]
    696e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6970:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6974:	401c      	ands	r4, r3
    6976:	6978      	ldr	r0, [r7, #20]
    6978:	4b1b      	ldr	r3, [pc, #108]	; (69e8 <_sercom_i2c_send_address+0xf8>)
    697a:	4798      	blx	r3
    697c:	4603      	mov	r3, r0
    697e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6982:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6988:	4619      	mov	r1, r3
    698a:	6978      	ldr	r0, [r7, #20]
    698c:	4b17      	ldr	r3, [pc, #92]	; (69ec <_sercom_i2c_send_address+0xfc>)
    698e:	4798      	blx	r3
    6990:	e01a      	b.n	69c8 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6992:	693b      	ldr	r3, [r7, #16]
    6994:	881b      	ldrh	r3, [r3, #0]
    6996:	005b      	lsls	r3, r3, #1
    6998:	b2db      	uxtb	r3, r3
    699a:	693a      	ldr	r2, [r7, #16]
    699c:	8852      	ldrh	r2, [r2, #2]
    699e:	b292      	uxth	r2, r2
    69a0:	f002 0201 	and.w	r2, r2, #1
    69a4:	2a00      	cmp	r2, #0
    69a6:	bf14      	ite	ne
    69a8:	2201      	movne	r2, #1
    69aa:	2200      	moveq	r2, #0
    69ac:	b2d2      	uxtb	r2, r2
    69ae:	4313      	orrs	r3, r2
    69b0:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    69b2:	6978      	ldr	r0, [r7, #20]
    69b4:	4b0c      	ldr	r3, [pc, #48]	; (69e8 <_sercom_i2c_send_address+0xf8>)
    69b6:	4798      	blx	r3
    69b8:	4603      	mov	r3, r0
    69ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    69be:	4323      	orrs	r3, r4
    69c0:	4619      	mov	r1, r3
    69c2:	6978      	ldr	r0, [r7, #20]
    69c4:	4b09      	ldr	r3, [pc, #36]	; (69ec <_sercom_i2c_send_address+0xfc>)
    69c6:	4798      	blx	r3
	}

	return ERR_NONE;
    69c8:	2300      	movs	r3, #0
}
    69ca:	4618      	mov	r0, r3
    69cc:	371c      	adds	r7, #28
    69ce:	46bd      	mov	sp, r7
    69d0:	bd90      	pop	{r4, r7, pc}
    69d2:	bf00      	nop
    69d4:	00005f85 	.word	0x00005f85
    69d8:	0000ef4c 	.word	0x0000ef4c
    69dc:	00003911 	.word	0x00003911
    69e0:	00006135 	.word	0x00006135
    69e4:	0000615d 	.word	0x0000615d
    69e8:	0000629d 	.word	0x0000629d
    69ec:	00006279 	.word	0x00006279

000069f0 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    69f0:	b580      	push	{r7, lr}
    69f2:	b084      	sub	sp, #16
    69f4:	af00      	add	r7, sp, #0
    69f6:	6078      	str	r0, [r7, #4]
    69f8:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    69fa:	687b      	ldr	r3, [r7, #4]
    69fc:	2b00      	cmp	r3, #0
    69fe:	bf14      	ite	ne
    6a00:	2301      	movne	r3, #1
    6a02:	2300      	moveq	r3, #0
    6a04:	b2db      	uxtb	r3, r3
    6a06:	f240 42f4 	movw	r2, #1268	; 0x4f4
    6a0a:	492a      	ldr	r1, [pc, #168]	; (6ab4 <_i2c_m_async_transfer+0xc4>)
    6a0c:	4618      	mov	r0, r3
    6a0e:	4b2a      	ldr	r3, [pc, #168]	; (6ab8 <_i2c_m_async_transfer+0xc8>)
    6a10:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6a12:	687b      	ldr	r3, [r7, #4]
    6a14:	691b      	ldr	r3, [r3, #16]
    6a16:	2b00      	cmp	r3, #0
    6a18:	bf14      	ite	ne
    6a1a:	2301      	movne	r3, #1
    6a1c:	2300      	moveq	r3, #0
    6a1e:	b2db      	uxtb	r3, r3
    6a20:	f240 42f5 	movw	r2, #1269	; 0x4f5
    6a24:	4923      	ldr	r1, [pc, #140]	; (6ab4 <_i2c_m_async_transfer+0xc4>)
    6a26:	4618      	mov	r0, r3
    6a28:	4b23      	ldr	r3, [pc, #140]	; (6ab8 <_i2c_m_async_transfer+0xc8>)
    6a2a:	4798      	blx	r3
	ASSERT(msg);
    6a2c:	683b      	ldr	r3, [r7, #0]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	bf14      	ite	ne
    6a32:	2301      	movne	r3, #1
    6a34:	2300      	moveq	r3, #0
    6a36:	b2db      	uxtb	r3, r3
    6a38:	f240 42f6 	movw	r2, #1270	; 0x4f6
    6a3c:	491d      	ldr	r1, [pc, #116]	; (6ab4 <_i2c_m_async_transfer+0xc4>)
    6a3e:	4618      	mov	r0, r3
    6a40:	4b1d      	ldr	r3, [pc, #116]	; (6ab8 <_i2c_m_async_transfer+0xc8>)
    6a42:	4798      	blx	r3

	if (msg->len == 0) {
    6a44:	683b      	ldr	r3, [r7, #0]
    6a46:	685b      	ldr	r3, [r3, #4]
    6a48:	2b00      	cmp	r3, #0
    6a4a:	d101      	bne.n	6a50 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6a4c:	2300      	movs	r3, #0
    6a4e:	e02d      	b.n	6aac <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6a50:	687b      	ldr	r3, [r7, #4]
    6a52:	885b      	ldrh	r3, [r3, #2]
    6a54:	b29b      	uxth	r3, r3
    6a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6a5a:	2b00      	cmp	r3, #0
    6a5c:	d002      	beq.n	6a64 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6a5e:	f06f 0303 	mvn.w	r3, #3
    6a62:	e023      	b.n	6aac <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6a64:	683b      	ldr	r3, [r7, #0]
    6a66:	885b      	ldrh	r3, [r3, #2]
    6a68:	b29b      	uxth	r3, r3
    6a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6a6e:	b29a      	uxth	r2, r3
    6a70:	683b      	ldr	r3, [r7, #0]
    6a72:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6a74:	687b      	ldr	r3, [r7, #4]
    6a76:	683a      	ldr	r2, [r7, #0]
    6a78:	ca07      	ldmia	r2, {r0, r1, r2}
    6a7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6a7e:	687b      	ldr	r3, [r7, #4]
    6a80:	691b      	ldr	r3, [r3, #16]
    6a82:	4618      	mov	r0, r3
    6a84:	4b0d      	ldr	r3, [pc, #52]	; (6abc <_i2c_m_async_transfer+0xcc>)
    6a86:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6a88:	6878      	ldr	r0, [r7, #4]
    6a8a:	4b0d      	ldr	r3, [pc, #52]	; (6ac0 <_i2c_m_async_transfer+0xd0>)
    6a8c:	4798      	blx	r3
    6a8e:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6a90:	68fb      	ldr	r3, [r7, #12]
    6a92:	2b00      	cmp	r3, #0
    6a94:	d009      	beq.n	6aaa <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6a96:	687b      	ldr	r3, [r7, #4]
    6a98:	885b      	ldrh	r3, [r3, #2]
    6a9a:	b29b      	uxth	r3, r3
    6a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6aa0:	b29a      	uxth	r2, r3
    6aa2:	687b      	ldr	r3, [r7, #4]
    6aa4:	805a      	strh	r2, [r3, #2]

		return ret;
    6aa6:	68fb      	ldr	r3, [r7, #12]
    6aa8:	e000      	b.n	6aac <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6aaa:	2300      	movs	r3, #0
}
    6aac:	4618      	mov	r0, r3
    6aae:	3710      	adds	r7, #16
    6ab0:	46bd      	mov	sp, r7
    6ab2:	bd80      	pop	{r7, pc}
    6ab4:	0000ef4c 	.word	0x0000ef4c
    6ab8:	00003911 	.word	0x00003911
    6abc:	000060e5 	.word	0x000060e5
    6ac0:	000068f1 	.word	0x000068f1

00006ac4 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6ac4:	b480      	push	{r7}
    6ac6:	b085      	sub	sp, #20
    6ac8:	af00      	add	r7, sp, #0
    6aca:	60f8      	str	r0, [r7, #12]
    6acc:	460b      	mov	r3, r1
    6ace:	607a      	str	r2, [r7, #4]
    6ad0:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6ad2:	7afb      	ldrb	r3, [r7, #11]
    6ad4:	2b01      	cmp	r3, #1
    6ad6:	d008      	beq.n	6aea <_i2c_m_async_register_callback+0x26>
    6ad8:	2b02      	cmp	r3, #2
    6ada:	d00a      	beq.n	6af2 <_i2c_m_async_register_callback+0x2e>
    6adc:	2b00      	cmp	r3, #0
    6ade:	d000      	beq.n	6ae2 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    6ae0:	e00b      	b.n	6afa <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6ae2:	68fb      	ldr	r3, [r7, #12]
    6ae4:	687a      	ldr	r2, [r7, #4]
    6ae6:	615a      	str	r2, [r3, #20]
		break;
    6ae8:	e007      	b.n	6afa <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6aea:	68fb      	ldr	r3, [r7, #12]
    6aec:	687a      	ldr	r2, [r7, #4]
    6aee:	619a      	str	r2, [r3, #24]
		break;
    6af0:	e003      	b.n	6afa <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6af2:	68fb      	ldr	r3, [r7, #12]
    6af4:	687a      	ldr	r2, [r7, #4]
    6af6:	61da      	str	r2, [r3, #28]
		break;
    6af8:	bf00      	nop
	}

	return ERR_NONE;
    6afa:	2300      	movs	r3, #0
}
    6afc:	4618      	mov	r0, r3
    6afe:	3714      	adds	r7, #20
    6b00:	46bd      	mov	sp, r7
    6b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b06:	4770      	bx	lr

00006b08 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6b08:	b580      	push	{r7, lr}
    6b0a:	b084      	sub	sp, #16
    6b0c:	af00      	add	r7, sp, #0
    6b0e:	6078      	str	r0, [r7, #4]
    6b10:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6b12:	6838      	ldr	r0, [r7, #0]
    6b14:	4b42      	ldr	r3, [pc, #264]	; (6c20 <_i2c_m_sync_init_impl+0x118>)
    6b16:	4798      	blx	r3
    6b18:	4603      	mov	r3, r0
    6b1a:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6b1c:	2101      	movs	r1, #1
    6b1e:	6838      	ldr	r0, [r7, #0]
    6b20:	4b40      	ldr	r3, [pc, #256]	; (6c24 <_i2c_m_sync_init_impl+0x11c>)
    6b22:	4798      	blx	r3
    6b24:	4603      	mov	r3, r0
    6b26:	f083 0301 	eor.w	r3, r3, #1
    6b2a:	b2db      	uxtb	r3, r3
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	d020      	beq.n	6b72 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6b30:	7bfa      	ldrb	r2, [r7, #15]
    6b32:	493d      	ldr	r1, [pc, #244]	; (6c28 <_i2c_m_sync_init_impl+0x120>)
    6b34:	4613      	mov	r3, r2
    6b36:	005b      	lsls	r3, r3, #1
    6b38:	4413      	add	r3, r2
    6b3a:	00db      	lsls	r3, r3, #3
    6b3c:	440b      	add	r3, r1
    6b3e:	3304      	adds	r3, #4
    6b40:	681b      	ldr	r3, [r3, #0]
    6b42:	f003 031c 	and.w	r3, r3, #28
    6b46:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6b48:	2102      	movs	r1, #2
    6b4a:	6838      	ldr	r0, [r7, #0]
    6b4c:	4b37      	ldr	r3, [pc, #220]	; (6c2c <_i2c_m_sync_init_impl+0x124>)
    6b4e:	4798      	blx	r3
    6b50:	4603      	mov	r3, r0
    6b52:	2b00      	cmp	r3, #0
    6b54:	d006      	beq.n	6b64 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6b56:	6838      	ldr	r0, [r7, #0]
    6b58:	4b35      	ldr	r3, [pc, #212]	; (6c30 <_i2c_m_sync_init_impl+0x128>)
    6b5a:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6b5c:	2102      	movs	r1, #2
    6b5e:	6838      	ldr	r0, [r7, #0]
    6b60:	4b34      	ldr	r3, [pc, #208]	; (6c34 <_i2c_m_sync_init_impl+0x12c>)
    6b62:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6b64:	68bb      	ldr	r3, [r7, #8]
    6b66:	f043 0301 	orr.w	r3, r3, #1
    6b6a:	4619      	mov	r1, r3
    6b6c:	6838      	ldr	r0, [r7, #0]
    6b6e:	4b32      	ldr	r3, [pc, #200]	; (6c38 <_i2c_m_sync_init_impl+0x130>)
    6b70:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6b72:	2101      	movs	r1, #1
    6b74:	6838      	ldr	r0, [r7, #0]
    6b76:	4b2f      	ldr	r3, [pc, #188]	; (6c34 <_i2c_m_sync_init_impl+0x12c>)
    6b78:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6b7a:	7bfa      	ldrb	r2, [r7, #15]
    6b7c:	492a      	ldr	r1, [pc, #168]	; (6c28 <_i2c_m_sync_init_impl+0x120>)
    6b7e:	4613      	mov	r3, r2
    6b80:	005b      	lsls	r3, r3, #1
    6b82:	4413      	add	r3, r2
    6b84:	00db      	lsls	r3, r3, #3
    6b86:	440b      	add	r3, r1
    6b88:	3304      	adds	r3, #4
    6b8a:	681b      	ldr	r3, [r3, #0]
    6b8c:	4619      	mov	r1, r3
    6b8e:	6838      	ldr	r0, [r7, #0]
    6b90:	4b29      	ldr	r3, [pc, #164]	; (6c38 <_i2c_m_sync_init_impl+0x130>)
    6b92:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6b94:	7bfa      	ldrb	r2, [r7, #15]
    6b96:	4924      	ldr	r1, [pc, #144]	; (6c28 <_i2c_m_sync_init_impl+0x120>)
    6b98:	4613      	mov	r3, r2
    6b9a:	005b      	lsls	r3, r3, #1
    6b9c:	4413      	add	r3, r2
    6b9e:	00db      	lsls	r3, r3, #3
    6ba0:	440b      	add	r3, r1
    6ba2:	3308      	adds	r3, #8
    6ba4:	681b      	ldr	r3, [r3, #0]
    6ba6:	4619      	mov	r1, r3
    6ba8:	6838      	ldr	r0, [r7, #0]
    6baa:	4b24      	ldr	r3, [pc, #144]	; (6c3c <_i2c_m_sync_init_impl+0x134>)
    6bac:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6bae:	7bfa      	ldrb	r2, [r7, #15]
    6bb0:	491d      	ldr	r1, [pc, #116]	; (6c28 <_i2c_m_sync_init_impl+0x120>)
    6bb2:	4613      	mov	r3, r2
    6bb4:	005b      	lsls	r3, r3, #1
    6bb6:	4413      	add	r3, r2
    6bb8:	00db      	lsls	r3, r3, #3
    6bba:	440b      	add	r3, r1
    6bbc:	330c      	adds	r3, #12
    6bbe:	681b      	ldr	r3, [r3, #0]
    6bc0:	4619      	mov	r1, r3
    6bc2:	6838      	ldr	r0, [r7, #0]
    6bc4:	4b1e      	ldr	r3, [pc, #120]	; (6c40 <_i2c_m_sync_init_impl+0x138>)
    6bc6:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6bc8:	7bfa      	ldrb	r2, [r7, #15]
    6bca:	4917      	ldr	r1, [pc, #92]	; (6c28 <_i2c_m_sync_init_impl+0x120>)
    6bcc:	4613      	mov	r3, r2
    6bce:	005b      	lsls	r3, r3, #1
    6bd0:	4413      	add	r3, r2
    6bd2:	00db      	lsls	r3, r3, #3
    6bd4:	440b      	add	r3, r1
    6bd6:	3304      	adds	r3, #4
    6bd8:	681b      	ldr	r3, [r3, #0]
    6bda:	0e1b      	lsrs	r3, r3, #24
    6bdc:	b29b      	uxth	r3, r3
    6bde:	f003 0303 	and.w	r3, r3, #3
    6be2:	b29a      	uxth	r2, r3
    6be4:	687b      	ldr	r3, [r7, #4]
    6be6:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	899b      	ldrh	r3, [r3, #12]
    6bec:	2b01      	cmp	r3, #1
    6bee:	bf8c      	ite	hi
    6bf0:	2301      	movhi	r3, #1
    6bf2:	2300      	movls	r3, #0
    6bf4:	b2db      	uxtb	r3, r3
    6bf6:	4619      	mov	r1, r3
    6bf8:	6838      	ldr	r0, [r7, #0]
    6bfa:	4b12      	ldr	r3, [pc, #72]	; (6c44 <_i2c_m_sync_init_impl+0x13c>)
    6bfc:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6bfe:	7bfa      	ldrb	r2, [r7, #15]
    6c00:	4909      	ldr	r1, [pc, #36]	; (6c28 <_i2c_m_sync_init_impl+0x120>)
    6c02:	4613      	mov	r3, r2
    6c04:	005b      	lsls	r3, r3, #1
    6c06:	4413      	add	r3, r2
    6c08:	00db      	lsls	r3, r3, #3
    6c0a:	440b      	add	r3, r1
    6c0c:	3312      	adds	r3, #18
    6c0e:	881a      	ldrh	r2, [r3, #0]
    6c10:	687b      	ldr	r3, [r7, #4]
    6c12:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6c14:	2300      	movs	r3, #0
}
    6c16:	4618      	mov	r0, r3
    6c18:	3710      	adds	r7, #16
    6c1a:	46bd      	mov	sp, r7
    6c1c:	bd80      	pop	{r7, pc}
    6c1e:	bf00      	nop
    6c20:	00006465 	.word	0x00006465
    6c24:	00005d65 	.word	0x00005d65
    6c28:	20000018 	.word	0x20000018
    6c2c:	00005fb5 	.word	0x00005fb5
    6c30:	00005f5d 	.word	0x00005f5d
    6c34:	00005d41 	.word	0x00005d41
    6c38:	00005fe5 	.word	0x00005fe5
    6c3c:	000061b5 	.word	0x000061b5
    6c40:	000061fd 	.word	0x000061fd
    6c44:	00006239 	.word	0x00006239

00006c48 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    6c48:	b580      	push	{r7, lr}
    6c4a:	b082      	sub	sp, #8
    6c4c:	af00      	add	r7, sp, #0
    6c4e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6c50:	2101      	movs	r1, #1
    6c52:	6878      	ldr	r0, [r7, #4]
    6c54:	4b07      	ldr	r3, [pc, #28]	; (6c74 <_spi_sync_enable+0x2c>)
    6c56:	4798      	blx	r3
    6c58:	4603      	mov	r3, r0
    6c5a:	2b00      	cmp	r3, #0
    6c5c:	d002      	beq.n	6c64 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    6c5e:	f06f 0303 	mvn.w	r3, #3
    6c62:	e003      	b.n	6c6c <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    6c64:	6878      	ldr	r0, [r7, #4]
    6c66:	4b04      	ldr	r3, [pc, #16]	; (6c78 <_spi_sync_enable+0x30>)
    6c68:	4798      	blx	r3

	return ERR_NONE;
    6c6a:	2300      	movs	r3, #0
}
    6c6c:	4618      	mov	r0, r3
    6c6e:	3708      	adds	r7, #8
    6c70:	46bd      	mov	sp, r7
    6c72:	bd80      	pop	{r7, pc}
    6c74:	00005db1 	.word	0x00005db1
    6c78:	00006009 	.word	0x00006009

00006c7c <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    6c7c:	b580      	push	{r7, lr}
    6c7e:	b082      	sub	sp, #8
    6c80:	af00      	add	r7, sp, #0
    6c82:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6c84:	2101      	movs	r1, #1
    6c86:	6878      	ldr	r0, [r7, #4]
    6c88:	4b07      	ldr	r3, [pc, #28]	; (6ca8 <_spi_sync_disable+0x2c>)
    6c8a:	4798      	blx	r3
    6c8c:	4603      	mov	r3, r0
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d002      	beq.n	6c98 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    6c92:	f06f 0303 	mvn.w	r3, #3
    6c96:	e003      	b.n	6ca0 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6c98:	6878      	ldr	r0, [r7, #4]
    6c9a:	4b04      	ldr	r3, [pc, #16]	; (6cac <_spi_sync_disable+0x30>)
    6c9c:	4798      	blx	r3

	return ERR_NONE;
    6c9e:	2300      	movs	r3, #0
}
    6ca0:	4618      	mov	r0, r3
    6ca2:	3708      	adds	r7, #8
    6ca4:	46bd      	mov	sp, r7
    6ca6:	bd80      	pop	{r7, pc}
    6ca8:	00005db1 	.word	0x00005db1
    6cac:	00006069 	.word	0x00006069

00006cb0 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6cb0:	b580      	push	{r7, lr}
    6cb2:	b082      	sub	sp, #8
    6cb4:	af00      	add	r7, sp, #0
    6cb6:	6078      	str	r0, [r7, #4]
    6cb8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6cba:	687b      	ldr	r3, [r7, #4]
    6cbc:	2b00      	cmp	r3, #0
    6cbe:	d004      	beq.n	6cca <_spi_load_regs_master+0x1a>
    6cc0:	683b      	ldr	r3, [r7, #0]
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	d001      	beq.n	6cca <_spi_load_regs_master+0x1a>
    6cc6:	2301      	movs	r3, #1
    6cc8:	e000      	b.n	6ccc <_spi_load_regs_master+0x1c>
    6cca:	2300      	movs	r3, #0
    6ccc:	f003 0301 	and.w	r3, r3, #1
    6cd0:	b2db      	uxtb	r3, r3
    6cd2:	f640 1245 	movw	r2, #2373	; 0x945
    6cd6:	4915      	ldr	r1, [pc, #84]	; (6d2c <_spi_load_regs_master+0x7c>)
    6cd8:	4618      	mov	r0, r3
    6cda:	4b15      	ldr	r3, [pc, #84]	; (6d30 <_spi_load_regs_master+0x80>)
    6cdc:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6cde:	683b      	ldr	r3, [r7, #0]
    6ce0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6ce2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6ce6:	f023 0301 	bic.w	r3, r3, #1
    6cea:	4619      	mov	r1, r3
    6cec:	6878      	ldr	r0, [r7, #4]
    6cee:	4b11      	ldr	r3, [pc, #68]	; (6d34 <_spi_load_regs_master+0x84>)
    6cf0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6cf2:	683b      	ldr	r3, [r7, #0]
    6cf4:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6cf6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6cfa:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6d02:	4619      	mov	r1, r3
    6d04:	6878      	ldr	r0, [r7, #4]
    6d06:	4b0c      	ldr	r3, [pc, #48]	; (6d38 <_spi_load_regs_master+0x88>)
    6d08:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6d0a:	683b      	ldr	r3, [r7, #0]
    6d0c:	7b1b      	ldrb	r3, [r3, #12]
    6d0e:	4619      	mov	r1, r3
    6d10:	6878      	ldr	r0, [r7, #4]
    6d12:	4b0a      	ldr	r3, [pc, #40]	; (6d3c <_spi_load_regs_master+0x8c>)
    6d14:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d16:	683b      	ldr	r3, [r7, #0]
    6d18:	7b5b      	ldrb	r3, [r3, #13]
    6d1a:	4619      	mov	r1, r3
    6d1c:	6878      	ldr	r0, [r7, #4]
    6d1e:	4b08      	ldr	r3, [pc, #32]	; (6d40 <_spi_load_regs_master+0x90>)
    6d20:	4798      	blx	r3
}
    6d22:	bf00      	nop
    6d24:	3708      	adds	r7, #8
    6d26:	46bd      	mov	sp, r7
    6d28:	bd80      	pop	{r7, pc}
    6d2a:	bf00      	nop
    6d2c:	0000ef4c 	.word	0x0000ef4c
    6d30:	00003911 	.word	0x00003911
    6d34:	000060c1 	.word	0x000060c1
    6d38:	000061d9 	.word	0x000061d9
    6d3c:	00006219 	.word	0x00006219
    6d40:	00006351 	.word	0x00006351

00006d44 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6d44:	b580      	push	{r7, lr}
    6d46:	b082      	sub	sp, #8
    6d48:	af00      	add	r7, sp, #0
    6d4a:	6078      	str	r0, [r7, #4]
    6d4c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6d4e:	687b      	ldr	r3, [r7, #4]
    6d50:	2b00      	cmp	r3, #0
    6d52:	d004      	beq.n	6d5e <_spi_load_regs_slave+0x1a>
    6d54:	683b      	ldr	r3, [r7, #0]
    6d56:	2b00      	cmp	r3, #0
    6d58:	d001      	beq.n	6d5e <_spi_load_regs_slave+0x1a>
    6d5a:	2301      	movs	r3, #1
    6d5c:	e000      	b.n	6d60 <_spi_load_regs_slave+0x1c>
    6d5e:	2300      	movs	r3, #0
    6d60:	f003 0301 	and.w	r3, r3, #1
    6d64:	b2db      	uxtb	r3, r3
    6d66:	f640 1259 	movw	r2, #2393	; 0x959
    6d6a:	491a      	ldr	r1, [pc, #104]	; (6dd4 <_spi_load_regs_slave+0x90>)
    6d6c:	4618      	mov	r0, r3
    6d6e:	4b1a      	ldr	r3, [pc, #104]	; (6dd8 <_spi_load_regs_slave+0x94>)
    6d70:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6d72:	683b      	ldr	r3, [r7, #0]
    6d74:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6d76:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6d7a:	f023 0301 	bic.w	r3, r3, #1
    6d7e:	4619      	mov	r1, r3
    6d80:	6878      	ldr	r0, [r7, #4]
    6d82:	4b16      	ldr	r3, [pc, #88]	; (6ddc <_spi_load_regs_slave+0x98>)
    6d84:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6d86:	683b      	ldr	r3, [r7, #0]
    6d88:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6d8a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6d8e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6d96:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6d9a:	4619      	mov	r1, r3
    6d9c:	6878      	ldr	r0, [r7, #4]
    6d9e:	4b10      	ldr	r3, [pc, #64]	; (6de0 <_spi_load_regs_slave+0x9c>)
    6da0:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6da2:	683b      	ldr	r3, [r7, #0]
    6da4:	689b      	ldr	r3, [r3, #8]
    6da6:	4619      	mov	r1, r3
    6da8:	6878      	ldr	r0, [r7, #4]
    6daa:	4b0e      	ldr	r3, [pc, #56]	; (6de4 <_spi_load_regs_slave+0xa0>)
    6dac:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6dae:	683b      	ldr	r3, [r7, #0]
    6db0:	7b5b      	ldrb	r3, [r3, #13]
    6db2:	4619      	mov	r1, r3
    6db4:	6878      	ldr	r0, [r7, #4]
    6db6:	4b0c      	ldr	r3, [pc, #48]	; (6de8 <_spi_load_regs_slave+0xa4>)
    6db8:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6dba:	bf00      	nop
    6dbc:	f04f 31ff 	mov.w	r1, #4294967295
    6dc0:	6878      	ldr	r0, [r7, #4]
    6dc2:	4b0a      	ldr	r3, [pc, #40]	; (6dec <_spi_load_regs_slave+0xa8>)
    6dc4:	4798      	blx	r3
    6dc6:	4603      	mov	r3, r0
    6dc8:	2b00      	cmp	r3, #0
    6dca:	d1f7      	bne.n	6dbc <_spi_load_regs_slave+0x78>
		;
}
    6dcc:	bf00      	nop
    6dce:	3708      	adds	r7, #8
    6dd0:	46bd      	mov	sp, r7
    6dd2:	bd80      	pop	{r7, pc}
    6dd4:	0000ef4c 	.word	0x0000ef4c
    6dd8:	00003911 	.word	0x00003911
    6ddc:	000060c1 	.word	0x000060c1
    6de0:	000061d9 	.word	0x000061d9
    6de4:	000062bd 	.word	0x000062bd
    6de8:	00006351 	.word	0x00006351
    6dec:	00005db1 	.word	0x00005db1

00006df0 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6df0:	b580      	push	{r7, lr}
    6df2:	b084      	sub	sp, #16
    6df4:	af00      	add	r7, sp, #0
    6df6:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6df8:	687b      	ldr	r3, [r7, #4]
    6dfa:	4618      	mov	r0, r3
    6dfc:	4b11      	ldr	r3, [pc, #68]	; (6e44 <_spi_get_regs+0x54>)
    6dfe:	4798      	blx	r3
    6e00:	4603      	mov	r3, r0
    6e02:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6e04:	2300      	movs	r3, #0
    6e06:	73fb      	strb	r3, [r7, #15]
    6e08:	e014      	b.n	6e34 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6e0a:	7bfa      	ldrb	r2, [r7, #15]
    6e0c:	490e      	ldr	r1, [pc, #56]	; (6e48 <_spi_get_regs+0x58>)
    6e0e:	4613      	mov	r3, r2
    6e10:	011b      	lsls	r3, r3, #4
    6e12:	4413      	add	r3, r2
    6e14:	440b      	add	r3, r1
    6e16:	3310      	adds	r3, #16
    6e18:	781b      	ldrb	r3, [r3, #0]
    6e1a:	7bba      	ldrb	r2, [r7, #14]
    6e1c:	429a      	cmp	r2, r3
    6e1e:	d106      	bne.n	6e2e <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6e20:	7bfa      	ldrb	r2, [r7, #15]
    6e22:	4613      	mov	r3, r2
    6e24:	011b      	lsls	r3, r3, #4
    6e26:	4413      	add	r3, r2
    6e28:	4a07      	ldr	r2, [pc, #28]	; (6e48 <_spi_get_regs+0x58>)
    6e2a:	4413      	add	r3, r2
    6e2c:	e006      	b.n	6e3c <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6e2e:	7bfb      	ldrb	r3, [r7, #15]
    6e30:	3301      	adds	r3, #1
    6e32:	73fb      	strb	r3, [r7, #15]
    6e34:	7bfb      	ldrb	r3, [r7, #15]
    6e36:	2b02      	cmp	r3, #2
    6e38:	d9e7      	bls.n	6e0a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6e3a:	2300      	movs	r3, #0
}
    6e3c:	4618      	mov	r0, r3
    6e3e:	3710      	adds	r7, #16
    6e40:	46bd      	mov	sp, r7
    6e42:	bd80      	pop	{r7, pc}
    6e44:	000063b5 	.word	0x000063b5
    6e48:	0000ef88 	.word	0x0000ef88

00006e4c <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    6e4c:	b580      	push	{r7, lr}
    6e4e:	b084      	sub	sp, #16
    6e50:	af00      	add	r7, sp, #0
    6e52:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    6e54:	687b      	ldr	r3, [r7, #4]
    6e56:	681b      	ldr	r3, [r3, #0]
    6e58:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    6e5a:	68f8      	ldr	r0, [r7, #12]
    6e5c:	4b21      	ldr	r3, [pc, #132]	; (6ee4 <_spi_handler+0x98>)
    6e5e:	4798      	blx	r3
    6e60:	4603      	mov	r3, r0
    6e62:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6e64:	68f8      	ldr	r0, [r7, #12]
    6e66:	4b20      	ldr	r3, [pc, #128]	; (6ee8 <_spi_handler+0x9c>)
    6e68:	4798      	blx	r3
    6e6a:	4603      	mov	r3, r0
    6e6c:	461a      	mov	r2, r3
    6e6e:	7afb      	ldrb	r3, [r7, #11]
    6e70:	4013      	ands	r3, r2
    6e72:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6e74:	7afb      	ldrb	r3, [r7, #11]
    6e76:	f003 0301 	and.w	r3, r3, #1
    6e7a:	2b00      	cmp	r3, #0
    6e7c:	d004      	beq.n	6e88 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    6e7e:	687b      	ldr	r3, [r7, #4]
    6e80:	689b      	ldr	r3, [r3, #8]
    6e82:	6878      	ldr	r0, [r7, #4]
    6e84:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    6e86:	e029      	b.n	6edc <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6e88:	7afb      	ldrb	r3, [r7, #11]
    6e8a:	f003 0304 	and.w	r3, r3, #4
    6e8e:	2b00      	cmp	r3, #0
    6e90:	d004      	beq.n	6e9c <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    6e92:	687b      	ldr	r3, [r7, #4]
    6e94:	68db      	ldr	r3, [r3, #12]
    6e96:	6878      	ldr	r0, [r7, #4]
    6e98:	4798      	blx	r3
}
    6e9a:	e01f      	b.n	6edc <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6e9c:	7afb      	ldrb	r3, [r7, #11]
    6e9e:	f003 0302 	and.w	r3, r3, #2
    6ea2:	2b00      	cmp	r3, #0
    6ea4:	d008      	beq.n	6eb8 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    6ea6:	2102      	movs	r1, #2
    6ea8:	68f8      	ldr	r0, [r7, #12]
    6eaa:	4b10      	ldr	r3, [pc, #64]	; (6eec <_spi_handler+0xa0>)
    6eac:	4798      	blx	r3
		dev->callbacks.complete(dev);
    6eae:	687b      	ldr	r3, [r7, #4]
    6eb0:	691b      	ldr	r3, [r3, #16]
    6eb2:	6878      	ldr	r0, [r7, #4]
    6eb4:	4798      	blx	r3
}
    6eb6:	e011      	b.n	6edc <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6eb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	da0d      	bge.n	6edc <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    6ec0:	2104      	movs	r1, #4
    6ec2:	68f8      	ldr	r0, [r7, #12]
    6ec4:	4b0a      	ldr	r3, [pc, #40]	; (6ef0 <_spi_handler+0xa4>)
    6ec6:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6ec8:	2180      	movs	r1, #128	; 0x80
    6eca:	68f8      	ldr	r0, [r7, #12]
    6ecc:	4b07      	ldr	r3, [pc, #28]	; (6eec <_spi_handler+0xa0>)
    6ece:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    6ed0:	687b      	ldr	r3, [r7, #4]
    6ed2:	695b      	ldr	r3, [r3, #20]
    6ed4:	f06f 0112 	mvn.w	r1, #18
    6ed8:	6878      	ldr	r0, [r7, #4]
    6eda:	4798      	blx	r3
}
    6edc:	bf00      	nop
    6ede:	3710      	adds	r7, #16
    6ee0:	46bd      	mov	sp, r7
    6ee2:	bd80      	pop	{r7, pc}
    6ee4:	00005e6d 	.word	0x00005e6d
    6ee8:	00005f41 	.word	0x00005f41
    6eec:	00005e87 	.word	0x00005e87
    6ef0:	00006371 	.word	0x00006371

00006ef4 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    6ef4:	b580      	push	{r7, lr}
    6ef6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6ef8:	4b03      	ldr	r3, [pc, #12]	; (6f08 <SERCOM4_0_Handler+0x14>)
    6efa:	681b      	ldr	r3, [r3, #0]
    6efc:	4618      	mov	r0, r3
    6efe:	4b03      	ldr	r3, [pc, #12]	; (6f0c <SERCOM4_0_Handler+0x18>)
    6f00:	4798      	blx	r3
}
    6f02:	bf00      	nop
    6f04:	bd80      	pop	{r7, pc}
    6f06:	bf00      	nop
    6f08:	200006f4 	.word	0x200006f4
    6f0c:	00006e4d 	.word	0x00006e4d

00006f10 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    6f10:	b580      	push	{r7, lr}
    6f12:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6f14:	4b03      	ldr	r3, [pc, #12]	; (6f24 <SERCOM4_1_Handler+0x14>)
    6f16:	681b      	ldr	r3, [r3, #0]
    6f18:	4618      	mov	r0, r3
    6f1a:	4b03      	ldr	r3, [pc, #12]	; (6f28 <SERCOM4_1_Handler+0x18>)
    6f1c:	4798      	blx	r3
}
    6f1e:	bf00      	nop
    6f20:	bd80      	pop	{r7, pc}
    6f22:	bf00      	nop
    6f24:	200006f4 	.word	0x200006f4
    6f28:	00006e4d 	.word	0x00006e4d

00006f2c <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    6f2c:	b580      	push	{r7, lr}
    6f2e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6f30:	4b03      	ldr	r3, [pc, #12]	; (6f40 <SERCOM4_2_Handler+0x14>)
    6f32:	681b      	ldr	r3, [r3, #0]
    6f34:	4618      	mov	r0, r3
    6f36:	4b03      	ldr	r3, [pc, #12]	; (6f44 <SERCOM4_2_Handler+0x18>)
    6f38:	4798      	blx	r3
}
    6f3a:	bf00      	nop
    6f3c:	bd80      	pop	{r7, pc}
    6f3e:	bf00      	nop
    6f40:	200006f4 	.word	0x200006f4
    6f44:	00006e4d 	.word	0x00006e4d

00006f48 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    6f48:	b580      	push	{r7, lr}
    6f4a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6f4c:	4b03      	ldr	r3, [pc, #12]	; (6f5c <SERCOM4_3_Handler+0x14>)
    6f4e:	681b      	ldr	r3, [r3, #0]
    6f50:	4618      	mov	r0, r3
    6f52:	4b03      	ldr	r3, [pc, #12]	; (6f60 <SERCOM4_3_Handler+0x18>)
    6f54:	4798      	blx	r3
}
    6f56:	bf00      	nop
    6f58:	bd80      	pop	{r7, pc}
    6f5a:	bf00      	nop
    6f5c:	200006f4 	.word	0x200006f4
    6f60:	00006e4d 	.word	0x00006e4d

00006f64 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    6f64:	b580      	push	{r7, lr}
    6f66:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6f68:	4b03      	ldr	r3, [pc, #12]	; (6f78 <SERCOM5_0_Handler+0x14>)
    6f6a:	681b      	ldr	r3, [r3, #0]
    6f6c:	4618      	mov	r0, r3
    6f6e:	4b03      	ldr	r3, [pc, #12]	; (6f7c <SERCOM5_0_Handler+0x18>)
    6f70:	4798      	blx	r3
}
    6f72:	bf00      	nop
    6f74:	bd80      	pop	{r7, pc}
    6f76:	bf00      	nop
    6f78:	200006f8 	.word	0x200006f8
    6f7c:	00006719 	.word	0x00006719

00006f80 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    6f80:	b580      	push	{r7, lr}
    6f82:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6f84:	4b03      	ldr	r3, [pc, #12]	; (6f94 <SERCOM5_1_Handler+0x14>)
    6f86:	681b      	ldr	r3, [r3, #0]
    6f88:	4618      	mov	r0, r3
    6f8a:	4b03      	ldr	r3, [pc, #12]	; (6f98 <SERCOM5_1_Handler+0x18>)
    6f8c:	4798      	blx	r3
}
    6f8e:	bf00      	nop
    6f90:	bd80      	pop	{r7, pc}
    6f92:	bf00      	nop
    6f94:	200006f8 	.word	0x200006f8
    6f98:	00006719 	.word	0x00006719

00006f9c <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    6f9c:	b580      	push	{r7, lr}
    6f9e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6fa0:	4b03      	ldr	r3, [pc, #12]	; (6fb0 <SERCOM5_2_Handler+0x14>)
    6fa2:	681b      	ldr	r3, [r3, #0]
    6fa4:	4618      	mov	r0, r3
    6fa6:	4b03      	ldr	r3, [pc, #12]	; (6fb4 <SERCOM5_2_Handler+0x18>)
    6fa8:	4798      	blx	r3
}
    6faa:	bf00      	nop
    6fac:	bd80      	pop	{r7, pc}
    6fae:	bf00      	nop
    6fb0:	200006f8 	.word	0x200006f8
    6fb4:	00006719 	.word	0x00006719

00006fb8 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    6fb8:	b580      	push	{r7, lr}
    6fba:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6fbc:	4b03      	ldr	r3, [pc, #12]	; (6fcc <SERCOM5_3_Handler+0x14>)
    6fbe:	681b      	ldr	r3, [r3, #0]
    6fc0:	4618      	mov	r0, r3
    6fc2:	4b03      	ldr	r3, [pc, #12]	; (6fd0 <SERCOM5_3_Handler+0x18>)
    6fc4:	4798      	blx	r3
}
    6fc6:	bf00      	nop
    6fc8:	bd80      	pop	{r7, pc}
    6fca:	bf00      	nop
    6fcc:	200006f8 	.word	0x200006f8
    6fd0:	00006719 	.word	0x00006719

00006fd4 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    6fd4:	b580      	push	{r7, lr}
    6fd6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6fd8:	4b03      	ldr	r3, [pc, #12]	; (6fe8 <SERCOM7_0_Handler+0x14>)
    6fda:	681b      	ldr	r3, [r3, #0]
    6fdc:	4618      	mov	r0, r3
    6fde:	4b03      	ldr	r3, [pc, #12]	; (6fec <SERCOM7_0_Handler+0x18>)
    6fe0:	4798      	blx	r3
}
    6fe2:	bf00      	nop
    6fe4:	bd80      	pop	{r7, pc}
    6fe6:	bf00      	nop
    6fe8:	200006fc 	.word	0x200006fc
    6fec:	00006719 	.word	0x00006719

00006ff0 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    6ff0:	b580      	push	{r7, lr}
    6ff2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6ff4:	4b03      	ldr	r3, [pc, #12]	; (7004 <SERCOM7_1_Handler+0x14>)
    6ff6:	681b      	ldr	r3, [r3, #0]
    6ff8:	4618      	mov	r0, r3
    6ffa:	4b03      	ldr	r3, [pc, #12]	; (7008 <SERCOM7_1_Handler+0x18>)
    6ffc:	4798      	blx	r3
}
    6ffe:	bf00      	nop
    7000:	bd80      	pop	{r7, pc}
    7002:	bf00      	nop
    7004:	200006fc 	.word	0x200006fc
    7008:	00006719 	.word	0x00006719

0000700c <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    700c:	b580      	push	{r7, lr}
    700e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7010:	4b03      	ldr	r3, [pc, #12]	; (7020 <SERCOM7_2_Handler+0x14>)
    7012:	681b      	ldr	r3, [r3, #0]
    7014:	4618      	mov	r0, r3
    7016:	4b03      	ldr	r3, [pc, #12]	; (7024 <SERCOM7_2_Handler+0x18>)
    7018:	4798      	blx	r3
}
    701a:	bf00      	nop
    701c:	bd80      	pop	{r7, pc}
    701e:	bf00      	nop
    7020:	200006fc 	.word	0x200006fc
    7024:	00006719 	.word	0x00006719

00007028 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    7028:	b580      	push	{r7, lr}
    702a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    702c:	4b03      	ldr	r3, [pc, #12]	; (703c <SERCOM7_3_Handler+0x14>)
    702e:	681b      	ldr	r3, [r3, #0]
    7030:	4618      	mov	r0, r3
    7032:	4b03      	ldr	r3, [pc, #12]	; (7040 <SERCOM7_3_Handler+0x18>)
    7034:	4798      	blx	r3
}
    7036:	bf00      	nop
    7038:	bd80      	pop	{r7, pc}
    703a:	bf00      	nop
    703c:	200006fc 	.word	0x200006fc
    7040:	00006719 	.word	0x00006719

00007044 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7044:	b580      	push	{r7, lr}
    7046:	b084      	sub	sp, #16
    7048:	af00      	add	r7, sp, #0
    704a:	6078      	str	r0, [r7, #4]
    704c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    704e:	683b      	ldr	r3, [r7, #0]
    7050:	4618      	mov	r0, r3
    7052:	4b35      	ldr	r3, [pc, #212]	; (7128 <_spi_m_sync_init+0xe4>)
    7054:	4798      	blx	r3
    7056:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7058:	687b      	ldr	r3, [r7, #4]
    705a:	2b00      	cmp	r3, #0
    705c:	d004      	beq.n	7068 <_spi_m_sync_init+0x24>
    705e:	683b      	ldr	r3, [r7, #0]
    7060:	2b00      	cmp	r3, #0
    7062:	d001      	beq.n	7068 <_spi_m_sync_init+0x24>
    7064:	2301      	movs	r3, #1
    7066:	e000      	b.n	706a <_spi_m_sync_init+0x26>
    7068:	2300      	movs	r3, #0
    706a:	f003 0301 	and.w	r3, r3, #1
    706e:	b2db      	uxtb	r3, r3
    7070:	f640 12ec 	movw	r2, #2540	; 0x9ec
    7074:	492d      	ldr	r1, [pc, #180]	; (712c <_spi_m_sync_init+0xe8>)
    7076:	4618      	mov	r0, r3
    7078:	4b2d      	ldr	r3, [pc, #180]	; (7130 <_spi_m_sync_init+0xec>)
    707a:	4798      	blx	r3

	if (regs == NULL) {
    707c:	68fb      	ldr	r3, [r7, #12]
    707e:	2b00      	cmp	r3, #0
    7080:	d102      	bne.n	7088 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    7082:	f06f 030c 	mvn.w	r3, #12
    7086:	e04a      	b.n	711e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7088:	2101      	movs	r1, #1
    708a:	6838      	ldr	r0, [r7, #0]
    708c:	4b29      	ldr	r3, [pc, #164]	; (7134 <_spi_m_sync_init+0xf0>)
    708e:	4798      	blx	r3
    7090:	4603      	mov	r3, r0
    7092:	f083 0301 	eor.w	r3, r3, #1
    7096:	b2db      	uxtb	r3, r3
    7098:	2b00      	cmp	r3, #0
    709a:	d019      	beq.n	70d0 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    709c:	68fb      	ldr	r3, [r7, #12]
    709e:	681b      	ldr	r3, [r3, #0]
    70a0:	f003 031c 	and.w	r3, r3, #28
    70a4:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    70a6:	2102      	movs	r1, #2
    70a8:	6838      	ldr	r0, [r7, #0]
    70aa:	4b23      	ldr	r3, [pc, #140]	; (7138 <_spi_m_sync_init+0xf4>)
    70ac:	4798      	blx	r3
    70ae:	4603      	mov	r3, r0
    70b0:	2b00      	cmp	r3, #0
    70b2:	d006      	beq.n	70c2 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    70b4:	6838      	ldr	r0, [r7, #0]
    70b6:	4b21      	ldr	r3, [pc, #132]	; (713c <_spi_m_sync_init+0xf8>)
    70b8:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    70ba:	2102      	movs	r1, #2
    70bc:	6838      	ldr	r0, [r7, #0]
    70be:	4b20      	ldr	r3, [pc, #128]	; (7140 <_spi_m_sync_init+0xfc>)
    70c0:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    70c2:	68bb      	ldr	r3, [r7, #8]
    70c4:	f043 0301 	orr.w	r3, r3, #1
    70c8:	4619      	mov	r1, r3
    70ca:	6838      	ldr	r0, [r7, #0]
    70cc:	4b1d      	ldr	r3, [pc, #116]	; (7144 <_spi_m_sync_init+0x100>)
    70ce:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    70d0:	2101      	movs	r1, #1
    70d2:	6838      	ldr	r0, [r7, #0]
    70d4:	4b1a      	ldr	r3, [pc, #104]	; (7140 <_spi_m_sync_init+0xfc>)
    70d6:	4798      	blx	r3

	dev->prvt = hw;
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	683a      	ldr	r2, [r7, #0]
    70dc:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    70de:	68fb      	ldr	r3, [r7, #12]
    70e0:	681b      	ldr	r3, [r3, #0]
    70e2:	f003 031c 	and.w	r3, r3, #28
    70e6:	2b08      	cmp	r3, #8
    70e8:	d104      	bne.n	70f4 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    70ea:	68f9      	ldr	r1, [r7, #12]
    70ec:	6838      	ldr	r0, [r7, #0]
    70ee:	4b16      	ldr	r3, [pc, #88]	; (7148 <_spi_m_sync_init+0x104>)
    70f0:	4798      	blx	r3
    70f2:	e003      	b.n	70fc <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    70f4:	68f9      	ldr	r1, [r7, #12]
    70f6:	6838      	ldr	r0, [r7, #0]
    70f8:	4b14      	ldr	r3, [pc, #80]	; (714c <_spi_m_sync_init+0x108>)
    70fa:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    70fc:	68fb      	ldr	r3, [r7, #12]
    70fe:	685b      	ldr	r3, [r3, #4]
    7100:	f003 0307 	and.w	r3, r3, #7
    7104:	2b00      	cmp	r3, #0
    7106:	d101      	bne.n	710c <_spi_m_sync_init+0xc8>
    7108:	2201      	movs	r2, #1
    710a:	e000      	b.n	710e <_spi_m_sync_init+0xca>
    710c:	2202      	movs	r2, #2
    710e:	687b      	ldr	r3, [r7, #4]
    7110:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    7112:	68fb      	ldr	r3, [r7, #12]
    7114:	89db      	ldrh	r3, [r3, #14]
    7116:	b29a      	uxth	r2, r3
    7118:	687b      	ldr	r3, [r7, #4]
    711a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    711c:	2300      	movs	r3, #0
}
    711e:	4618      	mov	r0, r3
    7120:	3710      	adds	r7, #16
    7122:	46bd      	mov	sp, r7
    7124:	bd80      	pop	{r7, pc}
    7126:	bf00      	nop
    7128:	00006df1 	.word	0x00006df1
    712c:	0000ef4c 	.word	0x0000ef4c
    7130:	00003911 	.word	0x00003911
    7134:	00005db1 	.word	0x00005db1
    7138:	00006091 	.word	0x00006091
    713c:	00006069 	.word	0x00006069
    7140:	00005d8d 	.word	0x00005d8d
    7144:	000060c1 	.word	0x000060c1
    7148:	00006d45 	.word	0x00006d45
    714c:	00006cb1 	.word	0x00006cb1

00007150 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    7150:	b580      	push	{r7, lr}
    7152:	b086      	sub	sp, #24
    7154:	af00      	add	r7, sp, #0
    7156:	6078      	str	r0, [r7, #4]
    7158:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    715a:	687b      	ldr	r3, [r7, #4]
    715c:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    715e:	6839      	ldr	r1, [r7, #0]
    7160:	6878      	ldr	r0, [r7, #4]
    7162:	4b1a      	ldr	r3, [pc, #104]	; (71cc <_spi_m_async_init+0x7c>)
    7164:	4798      	blx	r3
    7166:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    7168:	68bb      	ldr	r3, [r7, #8]
    716a:	2b00      	cmp	r3, #0
    716c:	da01      	bge.n	7172 <_spi_m_async_init+0x22>
		return rc;
    716e:	68bb      	ldr	r3, [r7, #8]
    7170:	e028      	b.n	71c4 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    7172:	6879      	ldr	r1, [r7, #4]
    7174:	6838      	ldr	r0, [r7, #0]
    7176:	4b16      	ldr	r3, [pc, #88]	; (71d0 <_spi_m_async_init+0x80>)
    7178:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    717a:	68fb      	ldr	r3, [r7, #12]
    717c:	2200      	movs	r2, #0
    717e:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    7180:	68fb      	ldr	r3, [r7, #12]
    7182:	2200      	movs	r2, #0
    7184:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    7186:	68fb      	ldr	r3, [r7, #12]
    7188:	2200      	movs	r2, #0
    718a:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    718c:	6838      	ldr	r0, [r7, #0]
    718e:	4b11      	ldr	r3, [pc, #68]	; (71d4 <_spi_m_async_init+0x84>)
    7190:	4798      	blx	r3
    7192:	4603      	mov	r3, r0
    7194:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7196:	2300      	movs	r3, #0
    7198:	613b      	str	r3, [r7, #16]
    719a:	e00f      	b.n	71bc <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    719c:	7dfb      	ldrb	r3, [r7, #23]
    719e:	b21b      	sxth	r3, r3
    71a0:	4618      	mov	r0, r3
    71a2:	4b0d      	ldr	r3, [pc, #52]	; (71d8 <_spi_m_async_init+0x88>)
    71a4:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    71a6:	7dfb      	ldrb	r3, [r7, #23]
    71a8:	b21b      	sxth	r3, r3
    71aa:	4618      	mov	r0, r3
    71ac:	4b0b      	ldr	r3, [pc, #44]	; (71dc <_spi_m_async_init+0x8c>)
    71ae:	4798      	blx	r3
		irq++;
    71b0:	7dfb      	ldrb	r3, [r7, #23]
    71b2:	3301      	adds	r3, #1
    71b4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    71b6:	693b      	ldr	r3, [r7, #16]
    71b8:	3301      	adds	r3, #1
    71ba:	613b      	str	r3, [r7, #16]
    71bc:	693b      	ldr	r3, [r7, #16]
    71be:	2b03      	cmp	r3, #3
    71c0:	d9ec      	bls.n	719c <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    71c2:	2300      	movs	r3, #0
}
    71c4:	4618      	mov	r0, r3
    71c6:	3718      	adds	r7, #24
    71c8:	46bd      	mov	sp, r7
    71ca:	bd80      	pop	{r7, pc}
    71cc:	00007045 	.word	0x00007045
    71d0:	00006411 	.word	0x00006411
    71d4:	0000681d 	.word	0x0000681d
    71d8:	00005cc1 	.word	0x00005cc1
    71dc:	00005d05 	.word	0x00005d05

000071e0 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    71e0:	b580      	push	{r7, lr}
    71e2:	b082      	sub	sp, #8
    71e4:	af00      	add	r7, sp, #0
    71e6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    71e8:	687b      	ldr	r3, [r7, #4]
    71ea:	2b00      	cmp	r3, #0
    71ec:	d005      	beq.n	71fa <_spi_m_sync_enable+0x1a>
    71ee:	687b      	ldr	r3, [r7, #4]
    71f0:	681b      	ldr	r3, [r3, #0]
    71f2:	2b00      	cmp	r3, #0
    71f4:	d001      	beq.n	71fa <_spi_m_sync_enable+0x1a>
    71f6:	2301      	movs	r3, #1
    71f8:	e000      	b.n	71fc <_spi_m_sync_enable+0x1c>
    71fa:	2300      	movs	r3, #0
    71fc:	f003 0301 	and.w	r3, r3, #1
    7200:	b2db      	uxtb	r3, r3
    7202:	f640 224b 	movw	r2, #2635	; 0xa4b
    7206:	4907      	ldr	r1, [pc, #28]	; (7224 <_spi_m_sync_enable+0x44>)
    7208:	4618      	mov	r0, r3
    720a:	4b07      	ldr	r3, [pc, #28]	; (7228 <_spi_m_sync_enable+0x48>)
    720c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    720e:	687b      	ldr	r3, [r7, #4]
    7210:	681b      	ldr	r3, [r3, #0]
    7212:	4618      	mov	r0, r3
    7214:	4b05      	ldr	r3, [pc, #20]	; (722c <_spi_m_sync_enable+0x4c>)
    7216:	4798      	blx	r3
    7218:	4603      	mov	r3, r0
}
    721a:	4618      	mov	r0, r3
    721c:	3708      	adds	r7, #8
    721e:	46bd      	mov	sp, r7
    7220:	bd80      	pop	{r7, pc}
    7222:	bf00      	nop
    7224:	0000ef4c 	.word	0x0000ef4c
    7228:	00003911 	.word	0x00003911
    722c:	00006c49 	.word	0x00006c49

00007230 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    7230:	b580      	push	{r7, lr}
    7232:	b082      	sub	sp, #8
    7234:	af00      	add	r7, sp, #0
    7236:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7238:	687b      	ldr	r3, [r7, #4]
    723a:	2b00      	cmp	r3, #0
    723c:	d005      	beq.n	724a <_spi_m_sync_disable+0x1a>
    723e:	687b      	ldr	r3, [r7, #4]
    7240:	681b      	ldr	r3, [r3, #0]
    7242:	2b00      	cmp	r3, #0
    7244:	d001      	beq.n	724a <_spi_m_sync_disable+0x1a>
    7246:	2301      	movs	r3, #1
    7248:	e000      	b.n	724c <_spi_m_sync_disable+0x1c>
    724a:	2300      	movs	r3, #0
    724c:	f003 0301 	and.w	r3, r3, #1
    7250:	b2db      	uxtb	r3, r3
    7252:	f640 2267 	movw	r2, #2663	; 0xa67
    7256:	4907      	ldr	r1, [pc, #28]	; (7274 <_spi_m_sync_disable+0x44>)
    7258:	4618      	mov	r0, r3
    725a:	4b07      	ldr	r3, [pc, #28]	; (7278 <_spi_m_sync_disable+0x48>)
    725c:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	681b      	ldr	r3, [r3, #0]
    7262:	4618      	mov	r0, r3
    7264:	4b05      	ldr	r3, [pc, #20]	; (727c <_spi_m_sync_disable+0x4c>)
    7266:	4798      	blx	r3
    7268:	4603      	mov	r3, r0
}
    726a:	4618      	mov	r0, r3
    726c:	3708      	adds	r7, #8
    726e:	46bd      	mov	sp, r7
    7270:	bd80      	pop	{r7, pc}
    7272:	bf00      	nop
    7274:	0000ef4c 	.word	0x0000ef4c
    7278:	00003911 	.word	0x00003911
    727c:	00006c7d 	.word	0x00006c7d

00007280 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    7280:	b580      	push	{r7, lr}
    7282:	b082      	sub	sp, #8
    7284:	af00      	add	r7, sp, #0
    7286:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7288:	bf00      	nop
    728a:	2103      	movs	r1, #3
    728c:	6878      	ldr	r0, [r7, #4]
    728e:	4b06      	ldr	r3, [pc, #24]	; (72a8 <_spi_wait_bus_idle+0x28>)
    7290:	4798      	blx	r3
    7292:	4603      	mov	r3, r0
    7294:	2b00      	cmp	r3, #0
    7296:	d0f8      	beq.n	728a <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7298:	2103      	movs	r1, #3
    729a:	6878      	ldr	r0, [r7, #4]
    729c:	4b03      	ldr	r3, [pc, #12]	; (72ac <_spi_wait_bus_idle+0x2c>)
    729e:	4798      	blx	r3
}
    72a0:	bf00      	nop
    72a2:	3708      	adds	r7, #8
    72a4:	46bd      	mov	sp, r7
    72a6:	bd80      	pop	{r7, pc}
    72a8:	00005e45 	.word	0x00005e45
    72ac:	00005e87 	.word	0x00005e87

000072b0 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    72b0:	b580      	push	{r7, lr}
    72b2:	b086      	sub	sp, #24
    72b4:	af00      	add	r7, sp, #0
    72b6:	60f8      	str	r0, [r7, #12]
    72b8:	60b9      	str	r1, [r7, #8]
    72ba:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    72bc:	68bb      	ldr	r3, [r7, #8]
    72be:	f003 0304 	and.w	r3, r3, #4
    72c2:	2b00      	cmp	r3, #0
    72c4:	d101      	bne.n	72ca <_spi_rx_check_and_receive+0x1a>
		return false;
    72c6:	2300      	movs	r3, #0
    72c8:	e022      	b.n	7310 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    72ca:	68f8      	ldr	r0, [r7, #12]
    72cc:	4b12      	ldr	r3, [pc, #72]	; (7318 <_spi_rx_check_and_receive+0x68>)
    72ce:	4798      	blx	r3
    72d0:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    72d2:	687b      	ldr	r3, [r7, #4]
    72d4:	685b      	ldr	r3, [r3, #4]
    72d6:	2b00      	cmp	r3, #0
    72d8:	d014      	beq.n	7304 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    72da:	687b      	ldr	r3, [r7, #4]
    72dc:	685b      	ldr	r3, [r3, #4]
    72de:	1c59      	adds	r1, r3, #1
    72e0:	687a      	ldr	r2, [r7, #4]
    72e2:	6051      	str	r1, [r2, #4]
    72e4:	697a      	ldr	r2, [r7, #20]
    72e6:	b2d2      	uxtb	r2, r2
    72e8:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    72ea:	687b      	ldr	r3, [r7, #4]
    72ec:	7c1b      	ldrb	r3, [r3, #16]
    72ee:	2b01      	cmp	r3, #1
    72f0:	d908      	bls.n	7304 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    72f2:	687b      	ldr	r3, [r7, #4]
    72f4:	685b      	ldr	r3, [r3, #4]
    72f6:	1c59      	adds	r1, r3, #1
    72f8:	687a      	ldr	r2, [r7, #4]
    72fa:	6051      	str	r1, [r2, #4]
    72fc:	697a      	ldr	r2, [r7, #20]
    72fe:	0a12      	lsrs	r2, r2, #8
    7300:	b2d2      	uxtb	r2, r2
    7302:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7304:	687b      	ldr	r3, [r7, #4]
    7306:	68db      	ldr	r3, [r3, #12]
    7308:	1c5a      	adds	r2, r3, #1
    730a:	687b      	ldr	r3, [r7, #4]
    730c:	60da      	str	r2, [r3, #12]

	return true;
    730e:	2301      	movs	r3, #1
}
    7310:	4618      	mov	r0, r3
    7312:	3718      	adds	r7, #24
    7314:	46bd      	mov	sp, r7
    7316:	bd80      	pop	{r7, pc}
    7318:	00006339 	.word	0x00006339

0000731c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    731c:	b580      	push	{r7, lr}
    731e:	b086      	sub	sp, #24
    7320:	af00      	add	r7, sp, #0
    7322:	60f8      	str	r0, [r7, #12]
    7324:	60b9      	str	r1, [r7, #8]
    7326:	607a      	str	r2, [r7, #4]
    7328:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    732a:	68bb      	ldr	r3, [r7, #8]
    732c:	f003 0301 	and.w	r3, r3, #1
    7330:	2b00      	cmp	r3, #0
    7332:	d028      	beq.n	7386 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	681b      	ldr	r3, [r3, #0]
    7338:	2b00      	cmp	r3, #0
    733a:	d018      	beq.n	736e <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    733c:	687b      	ldr	r3, [r7, #4]
    733e:	681b      	ldr	r3, [r3, #0]
    7340:	1c59      	adds	r1, r3, #1
    7342:	687a      	ldr	r2, [r7, #4]
    7344:	6011      	str	r1, [r2, #0]
    7346:	781b      	ldrb	r3, [r3, #0]
    7348:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    734a:	687b      	ldr	r3, [r7, #4]
    734c:	7c1b      	ldrb	r3, [r3, #16]
    734e:	2b01      	cmp	r3, #1
    7350:	d90f      	bls.n	7372 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    7352:	687b      	ldr	r3, [r7, #4]
    7354:	681b      	ldr	r3, [r3, #0]
    7356:	781b      	ldrb	r3, [r3, #0]
    7358:	021b      	lsls	r3, r3, #8
    735a:	461a      	mov	r2, r3
    735c:	697b      	ldr	r3, [r7, #20]
    735e:	4313      	orrs	r3, r2
    7360:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7362:	687b      	ldr	r3, [r7, #4]
    7364:	681b      	ldr	r3, [r3, #0]
    7366:	1c5a      	adds	r2, r3, #1
    7368:	687b      	ldr	r3, [r7, #4]
    736a:	601a      	str	r2, [r3, #0]
    736c:	e001      	b.n	7372 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    736e:	887b      	ldrh	r3, [r7, #2]
    7370:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7372:	687b      	ldr	r3, [r7, #4]
    7374:	689b      	ldr	r3, [r3, #8]
    7376:	1c5a      	adds	r2, r3, #1
    7378:	687b      	ldr	r3, [r7, #4]
    737a:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    737c:	6979      	ldr	r1, [r7, #20]
    737e:	68f8      	ldr	r0, [r7, #12]
    7380:	4b03      	ldr	r3, [pc, #12]	; (7390 <_spi_tx_check_and_send+0x74>)
    7382:	4798      	blx	r3
    7384:	e000      	b.n	7388 <_spi_tx_check_and_send+0x6c>
		return;
    7386:	bf00      	nop
}
    7388:	3718      	adds	r7, #24
    738a:	46bd      	mov	sp, r7
    738c:	bd80      	pop	{r7, pc}
    738e:	bf00      	nop
    7390:	0000631d 	.word	0x0000631d

00007394 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7394:	b580      	push	{r7, lr}
    7396:	b082      	sub	sp, #8
    7398:	af00      	add	r7, sp, #0
    739a:	6078      	str	r0, [r7, #4]
    739c:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    739e:	687b      	ldr	r3, [r7, #4]
    73a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    73a4:	2b00      	cmp	r3, #0
    73a6:	d00b      	beq.n	73c0 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    73a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    73ac:	6838      	ldr	r0, [r7, #0]
    73ae:	4b07      	ldr	r3, [pc, #28]	; (73cc <_spi_err_check+0x38>)
    73b0:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    73b2:	2180      	movs	r1, #128	; 0x80
    73b4:	6838      	ldr	r0, [r7, #0]
    73b6:	4b06      	ldr	r3, [pc, #24]	; (73d0 <_spi_err_check+0x3c>)
    73b8:	4798      	blx	r3
		return ERR_OVERFLOW;
    73ba:	f06f 0312 	mvn.w	r3, #18
    73be:	e000      	b.n	73c2 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    73c0:	2300      	movs	r3, #0
}
    73c2:	4618      	mov	r0, r3
    73c4:	3708      	adds	r7, #8
    73c6:	46bd      	mov	sp, r7
    73c8:	bd80      	pop	{r7, pc}
    73ca:	bf00      	nop
    73cc:	00006371 	.word	0x00006371
    73d0:	00005e87 	.word	0x00005e87

000073d4 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    73d4:	b590      	push	{r4, r7, lr}
    73d6:	b08b      	sub	sp, #44	; 0x2c
    73d8:	af00      	add	r7, sp, #0
    73da:	6078      	str	r0, [r7, #4]
    73dc:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    73de:	687b      	ldr	r3, [r7, #4]
    73e0:	681b      	ldr	r3, [r3, #0]
    73e2:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    73e4:	2300      	movs	r3, #0
    73e6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    73e8:	683b      	ldr	r3, [r7, #0]
    73ea:	681b      	ldr	r3, [r3, #0]
    73ec:	60bb      	str	r3, [r7, #8]
    73ee:	683b      	ldr	r3, [r7, #0]
    73f0:	685b      	ldr	r3, [r3, #4]
    73f2:	60fb      	str	r3, [r7, #12]
    73f4:	2300      	movs	r3, #0
    73f6:	613b      	str	r3, [r7, #16]
    73f8:	2300      	movs	r3, #0
    73fa:	617b      	str	r3, [r7, #20]
    73fc:	687b      	ldr	r3, [r7, #4]
    73fe:	791b      	ldrb	r3, [r3, #4]
    7400:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7402:	687b      	ldr	r3, [r7, #4]
    7404:	2b00      	cmp	r3, #0
    7406:	d004      	beq.n	7412 <_spi_m_sync_trans+0x3e>
    7408:	6a3b      	ldr	r3, [r7, #32]
    740a:	2b00      	cmp	r3, #0
    740c:	d001      	beq.n	7412 <_spi_m_sync_trans+0x3e>
    740e:	2301      	movs	r3, #1
    7410:	e000      	b.n	7414 <_spi_m_sync_trans+0x40>
    7412:	2300      	movs	r3, #0
    7414:	f003 0301 	and.w	r3, r3, #1
    7418:	b2db      	uxtb	r3, r3
    741a:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    741e:	492b      	ldr	r1, [pc, #172]	; (74cc <_spi_m_sync_trans+0xf8>)
    7420:	4618      	mov	r0, r3
    7422:	4b2b      	ldr	r3, [pc, #172]	; (74d0 <_spi_m_sync_trans+0xfc>)
    7424:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7426:	2107      	movs	r1, #7
    7428:	6a38      	ldr	r0, [r7, #32]
    742a:	4b2a      	ldr	r3, [pc, #168]	; (74d4 <_spi_m_sync_trans+0x100>)
    742c:	4798      	blx	r3
    742e:	4603      	mov	r3, r0
    7430:	2b00      	cmp	r3, #0
    7432:	d002      	beq.n	743a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7434:	f06f 0303 	mvn.w	r3, #3
    7438:	e043      	b.n	74c2 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    743a:	6a38      	ldr	r0, [r7, #32]
    743c:	4b26      	ldr	r3, [pc, #152]	; (74d8 <_spi_m_sync_trans+0x104>)
    743e:	4798      	blx	r3
    7440:	4603      	mov	r3, r0
    7442:	f083 0301 	eor.w	r3, r3, #1
    7446:	b2db      	uxtb	r3, r3
    7448:	2b00      	cmp	r3, #0
    744a:	d002      	beq.n	7452 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    744c:	f06f 0313 	mvn.w	r3, #19
    7450:	e037      	b.n	74c2 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7452:	6a38      	ldr	r0, [r7, #32]
    7454:	4b21      	ldr	r3, [pc, #132]	; (74dc <_spi_m_sync_trans+0x108>)
    7456:	4798      	blx	r3
    7458:	4603      	mov	r3, r0
    745a:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    745c:	f107 0308 	add.w	r3, r7, #8
    7460:	461a      	mov	r2, r3
    7462:	69f9      	ldr	r1, [r7, #28]
    7464:	6a38      	ldr	r0, [r7, #32]
    7466:	4b1e      	ldr	r3, [pc, #120]	; (74e0 <_spi_m_sync_trans+0x10c>)
    7468:	4798      	blx	r3
    746a:	4603      	mov	r3, r0
    746c:	f083 0301 	eor.w	r3, r3, #1
    7470:	b2db      	uxtb	r3, r3
    7472:	2b00      	cmp	r3, #0
    7474:	d00b      	beq.n	748e <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7476:	697a      	ldr	r2, [r7, #20]
    7478:	693b      	ldr	r3, [r7, #16]
    747a:	429a      	cmp	r2, r3
    747c:	d307      	bcc.n	748e <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    747e:	687b      	ldr	r3, [r7, #4]
    7480:	88db      	ldrh	r3, [r3, #6]
    7482:	f107 0208 	add.w	r2, r7, #8
    7486:	69f9      	ldr	r1, [r7, #28]
    7488:	6a38      	ldr	r0, [r7, #32]
    748a:	4c16      	ldr	r4, [pc, #88]	; (74e4 <_spi_m_sync_trans+0x110>)
    748c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    748e:	6a39      	ldr	r1, [r7, #32]
    7490:	69f8      	ldr	r0, [r7, #28]
    7492:	4b15      	ldr	r3, [pc, #84]	; (74e8 <_spi_m_sync_trans+0x114>)
    7494:	4798      	blx	r3
    7496:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    749a:	2b00      	cmp	r3, #0
    749c:	db0c      	blt.n	74b8 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    749e:	693a      	ldr	r2, [r7, #16]
    74a0:	683b      	ldr	r3, [r7, #0]
    74a2:	689b      	ldr	r3, [r3, #8]
    74a4:	429a      	cmp	r2, r3
    74a6:	d3d4      	bcc.n	7452 <_spi_m_sync_trans+0x7e>
    74a8:	697a      	ldr	r2, [r7, #20]
    74aa:	683b      	ldr	r3, [r7, #0]
    74ac:	689b      	ldr	r3, [r3, #8]
    74ae:	429a      	cmp	r2, r3
    74b0:	d3cf      	bcc.n	7452 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    74b2:	693b      	ldr	r3, [r7, #16]
    74b4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    74b6:	e000      	b.n	74ba <_spi_m_sync_trans+0xe6>
			break;
    74b8:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    74ba:	6a38      	ldr	r0, [r7, #32]
    74bc:	4b0b      	ldr	r3, [pc, #44]	; (74ec <_spi_m_sync_trans+0x118>)
    74be:	4798      	blx	r3

	return rc;
    74c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    74c2:	4618      	mov	r0, r3
    74c4:	372c      	adds	r7, #44	; 0x2c
    74c6:	46bd      	mov	sp, r7
    74c8:	bd90      	pop	{r4, r7, pc}
    74ca:	bf00      	nop
    74cc:	0000ef4c 	.word	0x0000ef4c
    74d0:	00003911 	.word	0x00003911
    74d4:	00005db1 	.word	0x00005db1
    74d8:	00006031 	.word	0x00006031
    74dc:	00005e6d 	.word	0x00005e6d
    74e0:	000072b1 	.word	0x000072b1
    74e4:	0000731d 	.word	0x0000731d
    74e8:	00007395 	.word	0x00007395
    74ec:	00007281 	.word	0x00007281

000074f0 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    74f0:	b580      	push	{r7, lr}
    74f2:	b084      	sub	sp, #16
    74f4:	af00      	add	r7, sp, #0
    74f6:	6078      	str	r0, [r7, #4]
    74f8:	460b      	mov	r3, r1
    74fa:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    74fc:	687b      	ldr	r3, [r7, #4]
    74fe:	681b      	ldr	r3, [r3, #0]
    7500:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    7502:	687b      	ldr	r3, [r7, #4]
    7504:	2b00      	cmp	r3, #0
    7506:	d004      	beq.n	7512 <_spi_m_async_enable_tx+0x22>
    7508:	68fb      	ldr	r3, [r7, #12]
    750a:	2b00      	cmp	r3, #0
    750c:	d001      	beq.n	7512 <_spi_m_async_enable_tx+0x22>
    750e:	2301      	movs	r3, #1
    7510:	e000      	b.n	7514 <_spi_m_async_enable_tx+0x24>
    7512:	2300      	movs	r3, #0
    7514:	f003 0301 	and.w	r3, r3, #1
    7518:	b2db      	uxtb	r3, r3
    751a:	f640 327c 	movw	r2, #2940	; 0xb7c
    751e:	4909      	ldr	r1, [pc, #36]	; (7544 <_spi_m_async_enable_tx+0x54>)
    7520:	4618      	mov	r0, r3
    7522:	4b09      	ldr	r3, [pc, #36]	; (7548 <_spi_m_async_enable_tx+0x58>)
    7524:	4798      	blx	r3

	if (state) {
    7526:	78fb      	ldrb	r3, [r7, #3]
    7528:	2b00      	cmp	r3, #0
    752a:	d003      	beq.n	7534 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    752c:	68f8      	ldr	r0, [r7, #12]
    752e:	4b07      	ldr	r3, [pc, #28]	; (754c <_spi_m_async_enable_tx+0x5c>)
    7530:	4798      	blx	r3
    7532:	e002      	b.n	753a <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    7534:	68f8      	ldr	r0, [r7, #12]
    7536:	4b06      	ldr	r3, [pc, #24]	; (7550 <_spi_m_async_enable_tx+0x60>)
    7538:	4798      	blx	r3
	}

	return ERR_NONE;
    753a:	2300      	movs	r3, #0
}
    753c:	4618      	mov	r0, r3
    753e:	3710      	adds	r7, #16
    7540:	46bd      	mov	sp, r7
    7542:	bd80      	pop	{r7, pc}
    7544:	0000ef4c 	.word	0x0000ef4c
    7548:	00003911 	.word	0x00003911
    754c:	00005ea5 	.word	0x00005ea5
    7550:	00005ebf 	.word	0x00005ebf

00007554 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    7554:	b580      	push	{r7, lr}
    7556:	b084      	sub	sp, #16
    7558:	af00      	add	r7, sp, #0
    755a:	6078      	str	r0, [r7, #4]
    755c:	460b      	mov	r3, r1
    755e:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    7560:	687b      	ldr	r3, [r7, #4]
    7562:	681b      	ldr	r3, [r3, #0]
    7564:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    7566:	687b      	ldr	r3, [r7, #4]
    7568:	2b00      	cmp	r3, #0
    756a:	bf14      	ite	ne
    756c:	2301      	movne	r3, #1
    756e:	2300      	moveq	r3, #0
    7570:	b2db      	uxtb	r3, r3
    7572:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    7576:	490f      	ldr	r1, [pc, #60]	; (75b4 <_spi_m_async_enable_rx+0x60>)
    7578:	4618      	mov	r0, r3
    757a:	4b0f      	ldr	r3, [pc, #60]	; (75b8 <_spi_m_async_enable_rx+0x64>)
    757c:	4798      	blx	r3
	ASSERT(hw);
    757e:	68fb      	ldr	r3, [r7, #12]
    7580:	2b00      	cmp	r3, #0
    7582:	bf14      	ite	ne
    7584:	2301      	movne	r3, #1
    7586:	2300      	moveq	r3, #0
    7588:	b2db      	uxtb	r3, r3
    758a:	f640 3291 	movw	r2, #2961	; 0xb91
    758e:	4909      	ldr	r1, [pc, #36]	; (75b4 <_spi_m_async_enable_rx+0x60>)
    7590:	4618      	mov	r0, r3
    7592:	4b09      	ldr	r3, [pc, #36]	; (75b8 <_spi_m_async_enable_rx+0x64>)
    7594:	4798      	blx	r3

	if (state) {
    7596:	78fb      	ldrb	r3, [r7, #3]
    7598:	2b00      	cmp	r3, #0
    759a:	d003      	beq.n	75a4 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    759c:	68f8      	ldr	r0, [r7, #12]
    759e:	4b07      	ldr	r3, [pc, #28]	; (75bc <_spi_m_async_enable_rx+0x68>)
    75a0:	4798      	blx	r3
    75a2:	e002      	b.n	75aa <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    75a4:	68f8      	ldr	r0, [r7, #12]
    75a6:	4b06      	ldr	r3, [pc, #24]	; (75c0 <_spi_m_async_enable_rx+0x6c>)
    75a8:	4798      	blx	r3
	}

	return ERR_NONE;
    75aa:	2300      	movs	r3, #0
}
    75ac:	4618      	mov	r0, r3
    75ae:	3710      	adds	r7, #16
    75b0:	46bd      	mov	sp, r7
    75b2:	bd80      	pop	{r7, pc}
    75b4:	0000ef4c 	.word	0x0000ef4c
    75b8:	00003911 	.word	0x00003911
    75bc:	00005f0d 	.word	0x00005f0d
    75c0:	00005f27 	.word	0x00005f27

000075c4 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    75c4:	b580      	push	{r7, lr}
    75c6:	b082      	sub	sp, #8
    75c8:	af00      	add	r7, sp, #0
    75ca:	6078      	str	r0, [r7, #4]
    75cc:	460b      	mov	r3, r1
    75ce:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    75d0:	687b      	ldr	r3, [r7, #4]
    75d2:	2b00      	cmp	r3, #0
    75d4:	d005      	beq.n	75e2 <_spi_m_async_enable_tx_complete+0x1e>
    75d6:	687b      	ldr	r3, [r7, #4]
    75d8:	681b      	ldr	r3, [r3, #0]
    75da:	2b00      	cmp	r3, #0
    75dc:	d001      	beq.n	75e2 <_spi_m_async_enable_tx_complete+0x1e>
    75de:	2301      	movs	r3, #1
    75e0:	e000      	b.n	75e4 <_spi_m_async_enable_tx_complete+0x20>
    75e2:	2300      	movs	r3, #0
    75e4:	f003 0301 	and.w	r3, r3, #1
    75e8:	b2db      	uxtb	r3, r3
    75ea:	f640 32a3 	movw	r2, #2979	; 0xba3
    75ee:	490b      	ldr	r1, [pc, #44]	; (761c <_spi_m_async_enable_tx_complete+0x58>)
    75f0:	4618      	mov	r0, r3
    75f2:	4b0b      	ldr	r3, [pc, #44]	; (7620 <_spi_m_async_enable_tx_complete+0x5c>)
    75f4:	4798      	blx	r3

	if (state) {
    75f6:	78fb      	ldrb	r3, [r7, #3]
    75f8:	2b00      	cmp	r3, #0
    75fa:	d005      	beq.n	7608 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    75fc:	687b      	ldr	r3, [r7, #4]
    75fe:	681b      	ldr	r3, [r3, #0]
    7600:	4618      	mov	r0, r3
    7602:	4b08      	ldr	r3, [pc, #32]	; (7624 <_spi_m_async_enable_tx_complete+0x60>)
    7604:	4798      	blx	r3
    7606:	e004      	b.n	7612 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7608:	687b      	ldr	r3, [r7, #4]
    760a:	681b      	ldr	r3, [r3, #0]
    760c:	4618      	mov	r0, r3
    760e:	4b06      	ldr	r3, [pc, #24]	; (7628 <_spi_m_async_enable_tx_complete+0x64>)
    7610:	4798      	blx	r3
	}

	return ERR_NONE;
    7612:	2300      	movs	r3, #0
}
    7614:	4618      	mov	r0, r3
    7616:	3708      	adds	r7, #8
    7618:	46bd      	mov	sp, r7
    761a:	bd80      	pop	{r7, pc}
    761c:	0000ef4c 	.word	0x0000ef4c
    7620:	00003911 	.word	0x00003911
    7624:	00005ed9 	.word	0x00005ed9
    7628:	00005ef3 	.word	0x00005ef3

0000762c <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    762c:	b580      	push	{r7, lr}
    762e:	b082      	sub	sp, #8
    7630:	af00      	add	r7, sp, #0
    7632:	6078      	str	r0, [r7, #4]
    7634:	460b      	mov	r3, r1
    7636:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    7638:	687b      	ldr	r3, [r7, #4]
    763a:	2b00      	cmp	r3, #0
    763c:	d005      	beq.n	764a <_spi_m_async_write_one+0x1e>
    763e:	687b      	ldr	r3, [r7, #4]
    7640:	681b      	ldr	r3, [r3, #0]
    7642:	2b00      	cmp	r3, #0
    7644:	d001      	beq.n	764a <_spi_m_async_write_one+0x1e>
    7646:	2301      	movs	r3, #1
    7648:	e000      	b.n	764c <_spi_m_async_write_one+0x20>
    764a:	2300      	movs	r3, #0
    764c:	f003 0301 	and.w	r3, r3, #1
    7650:	b2db      	uxtb	r3, r3
    7652:	f640 32b5 	movw	r2, #2997	; 0xbb5
    7656:	4908      	ldr	r1, [pc, #32]	; (7678 <_spi_m_async_write_one+0x4c>)
    7658:	4618      	mov	r0, r3
    765a:	4b08      	ldr	r3, [pc, #32]	; (767c <_spi_m_async_write_one+0x50>)
    765c:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    765e:	687b      	ldr	r3, [r7, #4]
    7660:	681b      	ldr	r3, [r3, #0]
    7662:	887a      	ldrh	r2, [r7, #2]
    7664:	4611      	mov	r1, r2
    7666:	4618      	mov	r0, r3
    7668:	4b05      	ldr	r3, [pc, #20]	; (7680 <_spi_m_async_write_one+0x54>)
    766a:	4798      	blx	r3

	return ERR_NONE;
    766c:	2300      	movs	r3, #0
}
    766e:	4618      	mov	r0, r3
    7670:	3708      	adds	r7, #8
    7672:	46bd      	mov	sp, r7
    7674:	bd80      	pop	{r7, pc}
    7676:	bf00      	nop
    7678:	0000ef4c 	.word	0x0000ef4c
    767c:	00003911 	.word	0x00003911
    7680:	0000631d 	.word	0x0000631d

00007684 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    7684:	b580      	push	{r7, lr}
    7686:	b082      	sub	sp, #8
    7688:	af00      	add	r7, sp, #0
    768a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    768c:	687b      	ldr	r3, [r7, #4]
    768e:	2b00      	cmp	r3, #0
    7690:	d005      	beq.n	769e <_spi_m_async_read_one+0x1a>
    7692:	687b      	ldr	r3, [r7, #4]
    7694:	681b      	ldr	r3, [r3, #0]
    7696:	2b00      	cmp	r3, #0
    7698:	d001      	beq.n	769e <_spi_m_async_read_one+0x1a>
    769a:	2301      	movs	r3, #1
    769c:	e000      	b.n	76a0 <_spi_m_async_read_one+0x1c>
    769e:	2300      	movs	r3, #0
    76a0:	f003 0301 	and.w	r3, r3, #1
    76a4:	b2db      	uxtb	r3, r3
    76a6:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    76aa:	4907      	ldr	r1, [pc, #28]	; (76c8 <_spi_m_async_read_one+0x44>)
    76ac:	4618      	mov	r0, r3
    76ae:	4b07      	ldr	r3, [pc, #28]	; (76cc <_spi_m_async_read_one+0x48>)
    76b0:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    76b2:	687b      	ldr	r3, [r7, #4]
    76b4:	681b      	ldr	r3, [r3, #0]
    76b6:	4618      	mov	r0, r3
    76b8:	4b05      	ldr	r3, [pc, #20]	; (76d0 <_spi_m_async_read_one+0x4c>)
    76ba:	4798      	blx	r3
    76bc:	4603      	mov	r3, r0
    76be:	b29b      	uxth	r3, r3
}
    76c0:	4618      	mov	r0, r3
    76c2:	3708      	adds	r7, #8
    76c4:	46bd      	mov	sp, r7
    76c6:	bd80      	pop	{r7, pc}
    76c8:	0000ef4c 	.word	0x0000ef4c
    76cc:	00003911 	.word	0x00003911
    76d0:	00006339 	.word	0x00006339

000076d4 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    76d4:	b580      	push	{r7, lr}
    76d6:	b086      	sub	sp, #24
    76d8:	af00      	add	r7, sp, #0
    76da:	60f8      	str	r0, [r7, #12]
    76dc:	460b      	mov	r3, r1
    76de:	607a      	str	r2, [r7, #4]
    76e0:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    76e2:	68fb      	ldr	r3, [r7, #12]
    76e4:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    76e6:	68fb      	ldr	r3, [r7, #12]
    76e8:	2b00      	cmp	r3, #0
    76ea:	d004      	beq.n	76f6 <_spi_m_async_register_callback+0x22>
    76ec:	7afb      	ldrb	r3, [r7, #11]
    76ee:	2b03      	cmp	r3, #3
    76f0:	d801      	bhi.n	76f6 <_spi_m_async_register_callback+0x22>
    76f2:	2301      	movs	r3, #1
    76f4:	e000      	b.n	76f8 <_spi_m_async_register_callback+0x24>
    76f6:	2300      	movs	r3, #0
    76f8:	f003 0301 	and.w	r3, r3, #1
    76fc:	b2db      	uxtb	r3, r3
    76fe:	f640 32e9 	movw	r2, #3049	; 0xbe9
    7702:	4909      	ldr	r1, [pc, #36]	; (7728 <_spi_m_async_register_callback+0x54>)
    7704:	4618      	mov	r0, r3
    7706:	4b09      	ldr	r3, [pc, #36]	; (772c <_spi_m_async_register_callback+0x58>)
    7708:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    770a:	697b      	ldr	r3, [r7, #20]
    770c:	3308      	adds	r3, #8
    770e:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    7710:	7afb      	ldrb	r3, [r7, #11]
    7712:	009b      	lsls	r3, r3, #2
    7714:	693a      	ldr	r2, [r7, #16]
    7716:	4413      	add	r3, r2
    7718:	687a      	ldr	r2, [r7, #4]
    771a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    771c:	2300      	movs	r3, #0
}
    771e:	4618      	mov	r0, r3
    7720:	3718      	adds	r7, #24
    7722:	46bd      	mov	sp, r7
    7724:	bd80      	pop	{r7, pc}
    7726:	bf00      	nop
    7728:	0000ef4c 	.word	0x0000ef4c
    772c:	00003911 	.word	0x00003911

00007730 <__NVIC_EnableIRQ>:
{
    7730:	b480      	push	{r7}
    7732:	b083      	sub	sp, #12
    7734:	af00      	add	r7, sp, #0
    7736:	4603      	mov	r3, r0
    7738:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    773a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    773e:	2b00      	cmp	r3, #0
    7740:	db0b      	blt.n	775a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7742:	4909      	ldr	r1, [pc, #36]	; (7768 <__NVIC_EnableIRQ+0x38>)
    7744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7748:	095b      	lsrs	r3, r3, #5
    774a:	88fa      	ldrh	r2, [r7, #6]
    774c:	f002 021f 	and.w	r2, r2, #31
    7750:	2001      	movs	r0, #1
    7752:	fa00 f202 	lsl.w	r2, r0, r2
    7756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    775a:	bf00      	nop
    775c:	370c      	adds	r7, #12
    775e:	46bd      	mov	sp, r7
    7760:	f85d 7b04 	ldr.w	r7, [sp], #4
    7764:	4770      	bx	lr
    7766:	bf00      	nop
    7768:	e000e100 	.word	0xe000e100

0000776c <__NVIC_DisableIRQ>:
{
    776c:	b480      	push	{r7}
    776e:	b083      	sub	sp, #12
    7770:	af00      	add	r7, sp, #0
    7772:	4603      	mov	r3, r0
    7774:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    777a:	2b00      	cmp	r3, #0
    777c:	db10      	blt.n	77a0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    777e:	490b      	ldr	r1, [pc, #44]	; (77ac <__NVIC_DisableIRQ+0x40>)
    7780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7784:	095b      	lsrs	r3, r3, #5
    7786:	88fa      	ldrh	r2, [r7, #6]
    7788:	f002 021f 	and.w	r2, r2, #31
    778c:	2001      	movs	r0, #1
    778e:	fa00 f202 	lsl.w	r2, r0, r2
    7792:	3320      	adds	r3, #32
    7794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7798:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    779c:	f3bf 8f6f 	isb	sy
}
    77a0:	bf00      	nop
    77a2:	370c      	adds	r7, #12
    77a4:	46bd      	mov	sp, r7
    77a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    77aa:	4770      	bx	lr
    77ac:	e000e100 	.word	0xe000e100

000077b0 <__NVIC_ClearPendingIRQ>:
{
    77b0:	b480      	push	{r7}
    77b2:	b083      	sub	sp, #12
    77b4:	af00      	add	r7, sp, #0
    77b6:	4603      	mov	r3, r0
    77b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    77ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    77be:	2b00      	cmp	r3, #0
    77c0:	db0c      	blt.n	77dc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    77c2:	4909      	ldr	r1, [pc, #36]	; (77e8 <__NVIC_ClearPendingIRQ+0x38>)
    77c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    77c8:	095b      	lsrs	r3, r3, #5
    77ca:	88fa      	ldrh	r2, [r7, #6]
    77cc:	f002 021f 	and.w	r2, r2, #31
    77d0:	2001      	movs	r0, #1
    77d2:	fa00 f202 	lsl.w	r2, r0, r2
    77d6:	3360      	adds	r3, #96	; 0x60
    77d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    77dc:	bf00      	nop
    77de:	370c      	adds	r7, #12
    77e0:	46bd      	mov	sp, r7
    77e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    77e6:	4770      	bx	lr
    77e8:	e000e100 	.word	0xe000e100

000077ec <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    77ec:	b480      	push	{r7}
    77ee:	b083      	sub	sp, #12
    77f0:	af00      	add	r7, sp, #0
    77f2:	6078      	str	r0, [r7, #4]
    77f4:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    77f6:	bf00      	nop
    77f8:	687b      	ldr	r3, [r7, #4]
    77fa:	691a      	ldr	r2, [r3, #16]
    77fc:	683b      	ldr	r3, [r7, #0]
    77fe:	4013      	ands	r3, r2
    7800:	2b00      	cmp	r3, #0
    7802:	d1f9      	bne.n	77f8 <hri_tc_wait_for_sync+0xc>
	};
}
    7804:	bf00      	nop
    7806:	370c      	adds	r7, #12
    7808:	46bd      	mov	sp, r7
    780a:	f85d 7b04 	ldr.w	r7, [sp], #4
    780e:	4770      	bx	lr

00007810 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7810:	b480      	push	{r7}
    7812:	b083      	sub	sp, #12
    7814:	af00      	add	r7, sp, #0
    7816:	6078      	str	r0, [r7, #4]
    7818:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    781a:	687b      	ldr	r3, [r7, #4]
    781c:	691a      	ldr	r2, [r3, #16]
    781e:	683b      	ldr	r3, [r7, #0]
    7820:	4013      	ands	r3, r2
    7822:	2b00      	cmp	r3, #0
    7824:	bf14      	ite	ne
    7826:	2301      	movne	r3, #1
    7828:	2300      	moveq	r3, #0
    782a:	b2db      	uxtb	r3, r3
}
    782c:	4618      	mov	r0, r3
    782e:	370c      	adds	r7, #12
    7830:	46bd      	mov	sp, r7
    7832:	f85d 7b04 	ldr.w	r7, [sp], #4
    7836:	4770      	bx	lr

00007838 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7838:	b480      	push	{r7}
    783a:	b083      	sub	sp, #12
    783c:	af00      	add	r7, sp, #0
    783e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	7a9b      	ldrb	r3, [r3, #10]
    7844:	b2db      	uxtb	r3, r3
    7846:	f003 0301 	and.w	r3, r3, #1
    784a:	2b00      	cmp	r3, #0
    784c:	bf14      	ite	ne
    784e:	2301      	movne	r3, #1
    7850:	2300      	moveq	r3, #0
    7852:	b2db      	uxtb	r3, r3
}
    7854:	4618      	mov	r0, r3
    7856:	370c      	adds	r7, #12
    7858:	46bd      	mov	sp, r7
    785a:	f85d 7b04 	ldr.w	r7, [sp], #4
    785e:	4770      	bx	lr

00007860 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7860:	b480      	push	{r7}
    7862:	b083      	sub	sp, #12
    7864:	af00      	add	r7, sp, #0
    7866:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7868:	687b      	ldr	r3, [r7, #4]
    786a:	2201      	movs	r2, #1
    786c:	729a      	strb	r2, [r3, #10]
}
    786e:	bf00      	nop
    7870:	370c      	adds	r7, #12
    7872:	46bd      	mov	sp, r7
    7874:	f85d 7b04 	ldr.w	r7, [sp], #4
    7878:	4770      	bx	lr

0000787a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    787a:	b480      	push	{r7}
    787c:	b083      	sub	sp, #12
    787e:	af00      	add	r7, sp, #0
    7880:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7882:	687b      	ldr	r3, [r7, #4]
    7884:	2202      	movs	r2, #2
    7886:	729a      	strb	r2, [r3, #10]
}
    7888:	bf00      	nop
    788a:	370c      	adds	r7, #12
    788c:	46bd      	mov	sp, r7
    788e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7892:	4770      	bx	lr

00007894 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7894:	b480      	push	{r7}
    7896:	b083      	sub	sp, #12
    7898:	af00      	add	r7, sp, #0
    789a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    789c:	687b      	ldr	r3, [r7, #4]
    789e:	2201      	movs	r2, #1
    78a0:	725a      	strb	r2, [r3, #9]
}
    78a2:	bf00      	nop
    78a4:	370c      	adds	r7, #12
    78a6:	46bd      	mov	sp, r7
    78a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    78ac:	4770      	bx	lr

000078ae <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    78ae:	b480      	push	{r7}
    78b0:	b083      	sub	sp, #12
    78b2:	af00      	add	r7, sp, #0
    78b4:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    78b6:	687b      	ldr	r3, [r7, #4]
    78b8:	7a5b      	ldrb	r3, [r3, #9]
    78ba:	b2db      	uxtb	r3, r3
    78bc:	085b      	lsrs	r3, r3, #1
    78be:	f003 0301 	and.w	r3, r3, #1
    78c2:	2b00      	cmp	r3, #0
    78c4:	bf14      	ite	ne
    78c6:	2301      	movne	r3, #1
    78c8:	2300      	moveq	r3, #0
    78ca:	b2db      	uxtb	r3, r3
}
    78cc:	4618      	mov	r0, r3
    78ce:	370c      	adds	r7, #12
    78d0:	46bd      	mov	sp, r7
    78d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    78d6:	4770      	bx	lr

000078d8 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    78d8:	b580      	push	{r7, lr}
    78da:	b082      	sub	sp, #8
    78dc:	af00      	add	r7, sp, #0
    78de:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    78e0:	687b      	ldr	r3, [r7, #4]
    78e2:	681b      	ldr	r3, [r3, #0]
    78e4:	f043 0202 	orr.w	r2, r3, #2
    78e8:	687b      	ldr	r3, [r7, #4]
    78ea:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    78ec:	2103      	movs	r1, #3
    78ee:	6878      	ldr	r0, [r7, #4]
    78f0:	4b02      	ldr	r3, [pc, #8]	; (78fc <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    78f2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    78f4:	bf00      	nop
    78f6:	3708      	adds	r7, #8
    78f8:	46bd      	mov	sp, r7
    78fa:	bd80      	pop	{r7, pc}
    78fc:	000077ed 	.word	0x000077ed

00007900 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7900:	b580      	push	{r7, lr}
    7902:	b084      	sub	sp, #16
    7904:	af00      	add	r7, sp, #0
    7906:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7908:	2103      	movs	r1, #3
    790a:	6878      	ldr	r0, [r7, #4]
    790c:	4b09      	ldr	r3, [pc, #36]	; (7934 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    790e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7910:	687b      	ldr	r3, [r7, #4]
    7912:	681b      	ldr	r3, [r3, #0]
    7914:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7916:	68fb      	ldr	r3, [r7, #12]
    7918:	085b      	lsrs	r3, r3, #1
    791a:	f003 0301 	and.w	r3, r3, #1
    791e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7920:	68fb      	ldr	r3, [r7, #12]
    7922:	2b00      	cmp	r3, #0
    7924:	bf14      	ite	ne
    7926:	2301      	movne	r3, #1
    7928:	2300      	moveq	r3, #0
    792a:	b2db      	uxtb	r3, r3
}
    792c:	4618      	mov	r0, r3
    792e:	3710      	adds	r7, #16
    7930:	46bd      	mov	sp, r7
    7932:	bd80      	pop	{r7, pc}
    7934:	000077ed 	.word	0x000077ed

00007938 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7938:	b580      	push	{r7, lr}
    793a:	b082      	sub	sp, #8
    793c:	af00      	add	r7, sp, #0
    793e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7940:	687b      	ldr	r3, [r7, #4]
    7942:	681b      	ldr	r3, [r3, #0]
    7944:	f023 0202 	bic.w	r2, r3, #2
    7948:	687b      	ldr	r3, [r7, #4]
    794a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    794c:	2103      	movs	r1, #3
    794e:	6878      	ldr	r0, [r7, #4]
    7950:	4b02      	ldr	r3, [pc, #8]	; (795c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7952:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7954:	bf00      	nop
    7956:	3708      	adds	r7, #8
    7958:	46bd      	mov	sp, r7
    795a:	bd80      	pop	{r7, pc}
    795c:	000077ed 	.word	0x000077ed

00007960 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7960:	b580      	push	{r7, lr}
    7962:	b084      	sub	sp, #16
    7964:	af00      	add	r7, sp, #0
    7966:	6078      	str	r0, [r7, #4]
    7968:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    796a:	2103      	movs	r1, #3
    796c:	6878      	ldr	r0, [r7, #4]
    796e:	4b07      	ldr	r3, [pc, #28]	; (798c <hri_tc_get_CTRLA_reg+0x2c>)
    7970:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	681b      	ldr	r3, [r3, #0]
    7976:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7978:	68fa      	ldr	r2, [r7, #12]
    797a:	683b      	ldr	r3, [r7, #0]
    797c:	4013      	ands	r3, r2
    797e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7980:	68fb      	ldr	r3, [r7, #12]
}
    7982:	4618      	mov	r0, r3
    7984:	3710      	adds	r7, #16
    7986:	46bd      	mov	sp, r7
    7988:	bd80      	pop	{r7, pc}
    798a:	bf00      	nop
    798c:	000077ed 	.word	0x000077ed

00007990 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7990:	b580      	push	{r7, lr}
    7992:	b082      	sub	sp, #8
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
    7998:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    799a:	687b      	ldr	r3, [r7, #4]
    799c:	683a      	ldr	r2, [r7, #0]
    799e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    79a0:	2103      	movs	r1, #3
    79a2:	6878      	ldr	r0, [r7, #4]
    79a4:	4b02      	ldr	r3, [pc, #8]	; (79b0 <hri_tc_write_CTRLA_reg+0x20>)
    79a6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    79a8:	bf00      	nop
    79aa:	3708      	adds	r7, #8
    79ac:	46bd      	mov	sp, r7
    79ae:	bd80      	pop	{r7, pc}
    79b0:	000077ed 	.word	0x000077ed

000079b4 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    79b4:	b480      	push	{r7}
    79b6:	b083      	sub	sp, #12
    79b8:	af00      	add	r7, sp, #0
    79ba:	6078      	str	r0, [r7, #4]
    79bc:	460b      	mov	r3, r1
    79be:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    79c0:	687b      	ldr	r3, [r7, #4]
    79c2:	887a      	ldrh	r2, [r7, #2]
    79c4:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    79c6:	bf00      	nop
    79c8:	370c      	adds	r7, #12
    79ca:	46bd      	mov	sp, r7
    79cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    79d0:	4770      	bx	lr

000079d2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    79d2:	b480      	push	{r7}
    79d4:	b083      	sub	sp, #12
    79d6:	af00      	add	r7, sp, #0
    79d8:	6078      	str	r0, [r7, #4]
    79da:	460b      	mov	r3, r1
    79dc:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    79de:	687b      	ldr	r3, [r7, #4]
    79e0:	78fa      	ldrb	r2, [r7, #3]
    79e2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    79e4:	bf00      	nop
    79e6:	370c      	adds	r7, #12
    79e8:	46bd      	mov	sp, r7
    79ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ee:	4770      	bx	lr

000079f0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    79f0:	b480      	push	{r7}
    79f2:	b083      	sub	sp, #12
    79f4:	af00      	add	r7, sp, #0
    79f6:	6078      	str	r0, [r7, #4]
    79f8:	460b      	mov	r3, r1
    79fa:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    79fc:	687b      	ldr	r3, [r7, #4]
    79fe:	78fa      	ldrb	r2, [r7, #3]
    7a00:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7a02:	bf00      	nop
    7a04:	370c      	adds	r7, #12
    7a06:	46bd      	mov	sp, r7
    7a08:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a0c:	4770      	bx	lr
	...

00007a10 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7a10:	b580      	push	{r7, lr}
    7a12:	b082      	sub	sp, #8
    7a14:	af00      	add	r7, sp, #0
    7a16:	6078      	str	r0, [r7, #4]
    7a18:	460b      	mov	r3, r1
    7a1a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7a1c:	687b      	ldr	r3, [r7, #4]
    7a1e:	78fa      	ldrb	r2, [r7, #3]
    7a20:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7a22:	2120      	movs	r1, #32
    7a24:	6878      	ldr	r0, [r7, #4]
    7a26:	4b03      	ldr	r3, [pc, #12]	; (7a34 <hri_tccount8_write_PER_reg+0x24>)
    7a28:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a2a:	bf00      	nop
    7a2c:	3708      	adds	r7, #8
    7a2e:	46bd      	mov	sp, r7
    7a30:	bd80      	pop	{r7, pc}
    7a32:	bf00      	nop
    7a34:	000077ed 	.word	0x000077ed

00007a38 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7a38:	b580      	push	{r7, lr}
    7a3a:	b082      	sub	sp, #8
    7a3c:	af00      	add	r7, sp, #0
    7a3e:	6078      	str	r0, [r7, #4]
    7a40:	460b      	mov	r3, r1
    7a42:	70fb      	strb	r3, [r7, #3]
    7a44:	4613      	mov	r3, r2
    7a46:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7a48:	78fb      	ldrb	r3, [r7, #3]
    7a4a:	687a      	ldr	r2, [r7, #4]
    7a4c:	4413      	add	r3, r2
    7a4e:	78ba      	ldrb	r2, [r7, #2]
    7a50:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7a52:	21c0      	movs	r1, #192	; 0xc0
    7a54:	6878      	ldr	r0, [r7, #4]
    7a56:	4b03      	ldr	r3, [pc, #12]	; (7a64 <hri_tccount8_write_CC_reg+0x2c>)
    7a58:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a5a:	bf00      	nop
    7a5c:	3708      	adds	r7, #8
    7a5e:	46bd      	mov	sp, r7
    7a60:	bd80      	pop	{r7, pc}
    7a62:	bf00      	nop
    7a64:	000077ed 	.word	0x000077ed

00007a68 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7a68:	b580      	push	{r7, lr}
    7a6a:	b082      	sub	sp, #8
    7a6c:	af00      	add	r7, sp, #0
    7a6e:	6078      	str	r0, [r7, #4]
    7a70:	460b      	mov	r3, r1
    7a72:	70fb      	strb	r3, [r7, #3]
    7a74:	4613      	mov	r3, r2
    7a76:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7a78:	78fb      	ldrb	r3, [r7, #3]
    7a7a:	687a      	ldr	r2, [r7, #4]
    7a7c:	330c      	adds	r3, #12
    7a7e:	005b      	lsls	r3, r3, #1
    7a80:	4413      	add	r3, r2
    7a82:	883a      	ldrh	r2, [r7, #0]
    7a84:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7a86:	21c0      	movs	r1, #192	; 0xc0
    7a88:	6878      	ldr	r0, [r7, #4]
    7a8a:	4b03      	ldr	r3, [pc, #12]	; (7a98 <hri_tccount16_write_CC_reg+0x30>)
    7a8c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a8e:	bf00      	nop
    7a90:	3708      	adds	r7, #8
    7a92:	46bd      	mov	sp, r7
    7a94:	bd80      	pop	{r7, pc}
    7a96:	bf00      	nop
    7a98:	000077ed 	.word	0x000077ed

00007a9c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7a9c:	b580      	push	{r7, lr}
    7a9e:	b084      	sub	sp, #16
    7aa0:	af00      	add	r7, sp, #0
    7aa2:	60f8      	str	r0, [r7, #12]
    7aa4:	460b      	mov	r3, r1
    7aa6:	607a      	str	r2, [r7, #4]
    7aa8:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7aaa:	7afb      	ldrb	r3, [r7, #11]
    7aac:	68fa      	ldr	r2, [r7, #12]
    7aae:	3306      	adds	r3, #6
    7ab0:	009b      	lsls	r3, r3, #2
    7ab2:	4413      	add	r3, r2
    7ab4:	687a      	ldr	r2, [r7, #4]
    7ab6:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7ab8:	21c0      	movs	r1, #192	; 0xc0
    7aba:	68f8      	ldr	r0, [r7, #12]
    7abc:	4b02      	ldr	r3, [pc, #8]	; (7ac8 <hri_tccount32_write_CC_reg+0x2c>)
    7abe:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ac0:	bf00      	nop
    7ac2:	3710      	adds	r7, #16
    7ac4:	46bd      	mov	sp, r7
    7ac6:	bd80      	pop	{r7, pc}
    7ac8:	000077ed 	.word	0x000077ed

00007acc <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    7acc:	b580      	push	{r7, lr}
    7ace:	b084      	sub	sp, #16
    7ad0:	af00      	add	r7, sp, #0
    7ad2:	6078      	str	r0, [r7, #4]
    7ad4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7ad6:	6838      	ldr	r0, [r7, #0]
    7ad8:	4b93      	ldr	r3, [pc, #588]	; (7d28 <_timer_init+0x25c>)
    7ada:	4798      	blx	r3
    7adc:	4603      	mov	r3, r0
    7ade:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7ae0:	687b      	ldr	r3, [r7, #4]
    7ae2:	683a      	ldr	r2, [r7, #0]
    7ae4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7ae6:	2299      	movs	r2, #153	; 0x99
    7ae8:	4990      	ldr	r1, [pc, #576]	; (7d2c <_timer_init+0x260>)
    7aea:	2001      	movs	r0, #1
    7aec:	4b90      	ldr	r3, [pc, #576]	; (7d30 <_timer_init+0x264>)
    7aee:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7af0:	2101      	movs	r1, #1
    7af2:	6838      	ldr	r0, [r7, #0]
    7af4:	4b8f      	ldr	r3, [pc, #572]	; (7d34 <_timer_init+0x268>)
    7af6:	4798      	blx	r3
    7af8:	4603      	mov	r3, r0
    7afa:	f083 0301 	eor.w	r3, r3, #1
    7afe:	b2db      	uxtb	r3, r3
    7b00:	2b00      	cmp	r3, #0
    7b02:	d011      	beq.n	7b28 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7b04:	2102      	movs	r1, #2
    7b06:	6838      	ldr	r0, [r7, #0]
    7b08:	4b8b      	ldr	r3, [pc, #556]	; (7d38 <_timer_init+0x26c>)
    7b0a:	4798      	blx	r3
    7b0c:	4603      	mov	r3, r0
    7b0e:	2b00      	cmp	r3, #0
    7b10:	d006      	beq.n	7b20 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7b12:	6838      	ldr	r0, [r7, #0]
    7b14:	4b89      	ldr	r3, [pc, #548]	; (7d3c <_timer_init+0x270>)
    7b16:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7b18:	2102      	movs	r1, #2
    7b1a:	6838      	ldr	r0, [r7, #0]
    7b1c:	4b88      	ldr	r3, [pc, #544]	; (7d40 <_timer_init+0x274>)
    7b1e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7b20:	2101      	movs	r1, #1
    7b22:	6838      	ldr	r0, [r7, #0]
    7b24:	4b87      	ldr	r3, [pc, #540]	; (7d44 <_timer_init+0x278>)
    7b26:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7b28:	2101      	movs	r1, #1
    7b2a:	6838      	ldr	r0, [r7, #0]
    7b2c:	4b84      	ldr	r3, [pc, #528]	; (7d40 <_timer_init+0x274>)
    7b2e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7b30:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b34:	4984      	ldr	r1, [pc, #528]	; (7d48 <_timer_init+0x27c>)
    7b36:	4613      	mov	r3, r2
    7b38:	009b      	lsls	r3, r3, #2
    7b3a:	4413      	add	r3, r2
    7b3c:	009b      	lsls	r3, r3, #2
    7b3e:	440b      	add	r3, r1
    7b40:	3304      	adds	r3, #4
    7b42:	681b      	ldr	r3, [r3, #0]
    7b44:	4619      	mov	r1, r3
    7b46:	6838      	ldr	r0, [r7, #0]
    7b48:	4b7e      	ldr	r3, [pc, #504]	; (7d44 <_timer_init+0x278>)
    7b4a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7b4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b50:	497d      	ldr	r1, [pc, #500]	; (7d48 <_timer_init+0x27c>)
    7b52:	4613      	mov	r3, r2
    7b54:	009b      	lsls	r3, r3, #2
    7b56:	4413      	add	r3, r2
    7b58:	009b      	lsls	r3, r3, #2
    7b5a:	440b      	add	r3, r1
    7b5c:	330a      	adds	r3, #10
    7b5e:	781b      	ldrb	r3, [r3, #0]
    7b60:	4619      	mov	r1, r3
    7b62:	6838      	ldr	r0, [r7, #0]
    7b64:	4b79      	ldr	r3, [pc, #484]	; (7d4c <_timer_init+0x280>)
    7b66:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7b68:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b6c:	4976      	ldr	r1, [pc, #472]	; (7d48 <_timer_init+0x27c>)
    7b6e:	4613      	mov	r3, r2
    7b70:	009b      	lsls	r3, r3, #2
    7b72:	4413      	add	r3, r2
    7b74:	009b      	lsls	r3, r3, #2
    7b76:	440b      	add	r3, r1
    7b78:	3308      	adds	r3, #8
    7b7a:	881b      	ldrh	r3, [r3, #0]
    7b7c:	4619      	mov	r1, r3
    7b7e:	6838      	ldr	r0, [r7, #0]
    7b80:	4b73      	ldr	r3, [pc, #460]	; (7d50 <_timer_init+0x284>)
    7b82:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7b84:	2101      	movs	r1, #1
    7b86:	6838      	ldr	r0, [r7, #0]
    7b88:	4b72      	ldr	r3, [pc, #456]	; (7d54 <_timer_init+0x288>)
    7b8a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7b8c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b90:	496d      	ldr	r1, [pc, #436]	; (7d48 <_timer_init+0x27c>)
    7b92:	4613      	mov	r3, r2
    7b94:	009b      	lsls	r3, r3, #2
    7b96:	4413      	add	r3, r2
    7b98:	009b      	lsls	r3, r3, #2
    7b9a:	440b      	add	r3, r1
    7b9c:	3304      	adds	r3, #4
    7b9e:	681b      	ldr	r3, [r3, #0]
    7ba0:	f003 030c 	and.w	r3, r3, #12
    7ba4:	2b08      	cmp	r3, #8
    7ba6:	d11e      	bne.n	7be6 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7ba8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bac:	4966      	ldr	r1, [pc, #408]	; (7d48 <_timer_init+0x27c>)
    7bae:	4613      	mov	r3, r2
    7bb0:	009b      	lsls	r3, r3, #2
    7bb2:	4413      	add	r3, r2
    7bb4:	009b      	lsls	r3, r3, #2
    7bb6:	440b      	add	r3, r1
    7bb8:	330c      	adds	r3, #12
    7bba:	681b      	ldr	r3, [r3, #0]
    7bbc:	461a      	mov	r2, r3
    7bbe:	2100      	movs	r1, #0
    7bc0:	6838      	ldr	r0, [r7, #0]
    7bc2:	4b65      	ldr	r3, [pc, #404]	; (7d58 <_timer_init+0x28c>)
    7bc4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7bc6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bca:	495f      	ldr	r1, [pc, #380]	; (7d48 <_timer_init+0x27c>)
    7bcc:	4613      	mov	r3, r2
    7bce:	009b      	lsls	r3, r3, #2
    7bd0:	4413      	add	r3, r2
    7bd2:	009b      	lsls	r3, r3, #2
    7bd4:	440b      	add	r3, r1
    7bd6:	3310      	adds	r3, #16
    7bd8:	681b      	ldr	r3, [r3, #0]
    7bda:	461a      	mov	r2, r3
    7bdc:	2101      	movs	r1, #1
    7bde:	6838      	ldr	r0, [r7, #0]
    7be0:	4b5d      	ldr	r3, [pc, #372]	; (7d58 <_timer_init+0x28c>)
    7be2:	4798      	blx	r3
    7be4:	e06a      	b.n	7cbc <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7be6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bea:	4957      	ldr	r1, [pc, #348]	; (7d48 <_timer_init+0x27c>)
    7bec:	4613      	mov	r3, r2
    7bee:	009b      	lsls	r3, r3, #2
    7bf0:	4413      	add	r3, r2
    7bf2:	009b      	lsls	r3, r3, #2
    7bf4:	440b      	add	r3, r1
    7bf6:	3304      	adds	r3, #4
    7bf8:	681b      	ldr	r3, [r3, #0]
    7bfa:	f003 030c 	and.w	r3, r3, #12
    7bfe:	2b00      	cmp	r3, #0
    7c00:	d120      	bne.n	7c44 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7c02:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c06:	4950      	ldr	r1, [pc, #320]	; (7d48 <_timer_init+0x27c>)
    7c08:	4613      	mov	r3, r2
    7c0a:	009b      	lsls	r3, r3, #2
    7c0c:	4413      	add	r3, r2
    7c0e:	009b      	lsls	r3, r3, #2
    7c10:	440b      	add	r3, r1
    7c12:	330c      	adds	r3, #12
    7c14:	681b      	ldr	r3, [r3, #0]
    7c16:	b29b      	uxth	r3, r3
    7c18:	461a      	mov	r2, r3
    7c1a:	2100      	movs	r1, #0
    7c1c:	6838      	ldr	r0, [r7, #0]
    7c1e:	4b4f      	ldr	r3, [pc, #316]	; (7d5c <_timer_init+0x290>)
    7c20:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7c22:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c26:	4948      	ldr	r1, [pc, #288]	; (7d48 <_timer_init+0x27c>)
    7c28:	4613      	mov	r3, r2
    7c2a:	009b      	lsls	r3, r3, #2
    7c2c:	4413      	add	r3, r2
    7c2e:	009b      	lsls	r3, r3, #2
    7c30:	440b      	add	r3, r1
    7c32:	3310      	adds	r3, #16
    7c34:	681b      	ldr	r3, [r3, #0]
    7c36:	b29b      	uxth	r3, r3
    7c38:	461a      	mov	r2, r3
    7c3a:	2101      	movs	r1, #1
    7c3c:	6838      	ldr	r0, [r7, #0]
    7c3e:	4b47      	ldr	r3, [pc, #284]	; (7d5c <_timer_init+0x290>)
    7c40:	4798      	blx	r3
    7c42:	e03b      	b.n	7cbc <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7c44:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c48:	493f      	ldr	r1, [pc, #252]	; (7d48 <_timer_init+0x27c>)
    7c4a:	4613      	mov	r3, r2
    7c4c:	009b      	lsls	r3, r3, #2
    7c4e:	4413      	add	r3, r2
    7c50:	009b      	lsls	r3, r3, #2
    7c52:	440b      	add	r3, r1
    7c54:	3304      	adds	r3, #4
    7c56:	681b      	ldr	r3, [r3, #0]
    7c58:	f003 030c 	and.w	r3, r3, #12
    7c5c:	2b04      	cmp	r3, #4
    7c5e:	d12d      	bne.n	7cbc <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7c60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c64:	4938      	ldr	r1, [pc, #224]	; (7d48 <_timer_init+0x27c>)
    7c66:	4613      	mov	r3, r2
    7c68:	009b      	lsls	r3, r3, #2
    7c6a:	4413      	add	r3, r2
    7c6c:	009b      	lsls	r3, r3, #2
    7c6e:	440b      	add	r3, r1
    7c70:	330c      	adds	r3, #12
    7c72:	681b      	ldr	r3, [r3, #0]
    7c74:	b2db      	uxtb	r3, r3
    7c76:	461a      	mov	r2, r3
    7c78:	2100      	movs	r1, #0
    7c7a:	6838      	ldr	r0, [r7, #0]
    7c7c:	4b38      	ldr	r3, [pc, #224]	; (7d60 <_timer_init+0x294>)
    7c7e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7c80:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c84:	4930      	ldr	r1, [pc, #192]	; (7d48 <_timer_init+0x27c>)
    7c86:	4613      	mov	r3, r2
    7c88:	009b      	lsls	r3, r3, #2
    7c8a:	4413      	add	r3, r2
    7c8c:	009b      	lsls	r3, r3, #2
    7c8e:	440b      	add	r3, r1
    7c90:	3310      	adds	r3, #16
    7c92:	681b      	ldr	r3, [r3, #0]
    7c94:	b2db      	uxtb	r3, r3
    7c96:	461a      	mov	r2, r3
    7c98:	2101      	movs	r1, #1
    7c9a:	6838      	ldr	r0, [r7, #0]
    7c9c:	4b30      	ldr	r3, [pc, #192]	; (7d60 <_timer_init+0x294>)
    7c9e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7ca0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ca4:	4928      	ldr	r1, [pc, #160]	; (7d48 <_timer_init+0x27c>)
    7ca6:	4613      	mov	r3, r2
    7ca8:	009b      	lsls	r3, r3, #2
    7caa:	4413      	add	r3, r2
    7cac:	009b      	lsls	r3, r3, #2
    7cae:	440b      	add	r3, r1
    7cb0:	330b      	adds	r3, #11
    7cb2:	781b      	ldrb	r3, [r3, #0]
    7cb4:	4619      	mov	r1, r3
    7cb6:	6838      	ldr	r0, [r7, #0]
    7cb8:	4b2a      	ldr	r3, [pc, #168]	; (7d64 <_timer_init+0x298>)
    7cba:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7cbc:	6838      	ldr	r0, [r7, #0]
    7cbe:	4b2a      	ldr	r3, [pc, #168]	; (7d68 <_timer_init+0x29c>)
    7cc0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7cc2:	6879      	ldr	r1, [r7, #4]
    7cc4:	6838      	ldr	r0, [r7, #0]
    7cc6:	4b29      	ldr	r3, [pc, #164]	; (7d6c <_timer_init+0x2a0>)
    7cc8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7cca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cce:	491e      	ldr	r1, [pc, #120]	; (7d48 <_timer_init+0x27c>)
    7cd0:	4613      	mov	r3, r2
    7cd2:	009b      	lsls	r3, r3, #2
    7cd4:	4413      	add	r3, r2
    7cd6:	009b      	lsls	r3, r3, #2
    7cd8:	440b      	add	r3, r1
    7cda:	3302      	adds	r3, #2
    7cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
    7ce0:	4618      	mov	r0, r3
    7ce2:	4b23      	ldr	r3, [pc, #140]	; (7d70 <_timer_init+0x2a4>)
    7ce4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7ce6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7cea:	4917      	ldr	r1, [pc, #92]	; (7d48 <_timer_init+0x27c>)
    7cec:	4613      	mov	r3, r2
    7cee:	009b      	lsls	r3, r3, #2
    7cf0:	4413      	add	r3, r2
    7cf2:	009b      	lsls	r3, r3, #2
    7cf4:	440b      	add	r3, r1
    7cf6:	3302      	adds	r3, #2
    7cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
    7cfc:	4618      	mov	r0, r3
    7cfe:	4b1d      	ldr	r3, [pc, #116]	; (7d74 <_timer_init+0x2a8>)
    7d00:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7d02:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d06:	4910      	ldr	r1, [pc, #64]	; (7d48 <_timer_init+0x27c>)
    7d08:	4613      	mov	r3, r2
    7d0a:	009b      	lsls	r3, r3, #2
    7d0c:	4413      	add	r3, r2
    7d0e:	009b      	lsls	r3, r3, #2
    7d10:	440b      	add	r3, r1
    7d12:	3302      	adds	r3, #2
    7d14:	f9b3 3000 	ldrsh.w	r3, [r3]
    7d18:	4618      	mov	r0, r3
    7d1a:	4b17      	ldr	r3, [pc, #92]	; (7d78 <_timer_init+0x2ac>)
    7d1c:	4798      	blx	r3

	return ERR_NONE;
    7d1e:	2300      	movs	r3, #0
}
    7d20:	4618      	mov	r0, r3
    7d22:	3710      	adds	r7, #16
    7d24:	46bd      	mov	sp, r7
    7d26:	bd80      	pop	{r7, pc}
    7d28:	00008221 	.word	0x00008221
    7d2c:	0000efbc 	.word	0x0000efbc
    7d30:	00003911 	.word	0x00003911
    7d34:	00007811 	.word	0x00007811
    7d38:	00007961 	.word	0x00007961
    7d3c:	00007939 	.word	0x00007939
    7d40:	000077ed 	.word	0x000077ed
    7d44:	00007991 	.word	0x00007991
    7d48:	20000048 	.word	0x20000048
    7d4c:	000079f1 	.word	0x000079f1
    7d50:	000079b5 	.word	0x000079b5
    7d54:	000079d3 	.word	0x000079d3
    7d58:	00007a9d 	.word	0x00007a9d
    7d5c:	00007a69 	.word	0x00007a69
    7d60:	00007a39 	.word	0x00007a39
    7d64:	00007a11 	.word	0x00007a11
    7d68:	00007895 	.word	0x00007895
    7d6c:	00008289 	.word	0x00008289
    7d70:	0000776d 	.word	0x0000776d
    7d74:	000077b1 	.word	0x000077b1
    7d78:	00007731 	.word	0x00007731

00007d7c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7d7c:	b580      	push	{r7, lr}
    7d7e:	b084      	sub	sp, #16
    7d80:	af00      	add	r7, sp, #0
    7d82:	6078      	str	r0, [r7, #4]
    7d84:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7d86:	6838      	ldr	r0, [r7, #0]
    7d88:	4b73      	ldr	r3, [pc, #460]	; (7f58 <_pwm_init+0x1dc>)
    7d8a:	4798      	blx	r3
    7d8c:	4603      	mov	r3, r0
    7d8e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7d90:	687b      	ldr	r3, [r7, #4]
    7d92:	683a      	ldr	r2, [r7, #0]
    7d94:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7d96:	2101      	movs	r1, #1
    7d98:	6838      	ldr	r0, [r7, #0]
    7d9a:	4b70      	ldr	r3, [pc, #448]	; (7f5c <_pwm_init+0x1e0>)
    7d9c:	4798      	blx	r3
    7d9e:	4603      	mov	r3, r0
    7da0:	f083 0301 	eor.w	r3, r3, #1
    7da4:	b2db      	uxtb	r3, r3
    7da6:	2b00      	cmp	r3, #0
    7da8:	d011      	beq.n	7dce <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7daa:	2102      	movs	r1, #2
    7dac:	6838      	ldr	r0, [r7, #0]
    7dae:	4b6c      	ldr	r3, [pc, #432]	; (7f60 <_pwm_init+0x1e4>)
    7db0:	4798      	blx	r3
    7db2:	4603      	mov	r3, r0
    7db4:	2b00      	cmp	r3, #0
    7db6:	d006      	beq.n	7dc6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7db8:	6838      	ldr	r0, [r7, #0]
    7dba:	4b6a      	ldr	r3, [pc, #424]	; (7f64 <_pwm_init+0x1e8>)
    7dbc:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7dbe:	2102      	movs	r1, #2
    7dc0:	6838      	ldr	r0, [r7, #0]
    7dc2:	4b69      	ldr	r3, [pc, #420]	; (7f68 <_pwm_init+0x1ec>)
    7dc4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7dc6:	2101      	movs	r1, #1
    7dc8:	6838      	ldr	r0, [r7, #0]
    7dca:	4b68      	ldr	r3, [pc, #416]	; (7f6c <_pwm_init+0x1f0>)
    7dcc:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7dce:	2101      	movs	r1, #1
    7dd0:	6838      	ldr	r0, [r7, #0]
    7dd2:	4b65      	ldr	r3, [pc, #404]	; (7f68 <_pwm_init+0x1ec>)
    7dd4:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7dd6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dda:	4965      	ldr	r1, [pc, #404]	; (7f70 <_pwm_init+0x1f4>)
    7ddc:	4613      	mov	r3, r2
    7dde:	009b      	lsls	r3, r3, #2
    7de0:	4413      	add	r3, r2
    7de2:	009b      	lsls	r3, r3, #2
    7de4:	440b      	add	r3, r1
    7de6:	3304      	adds	r3, #4
    7de8:	681b      	ldr	r3, [r3, #0]
    7dea:	4619      	mov	r1, r3
    7dec:	6838      	ldr	r0, [r7, #0]
    7dee:	4b5f      	ldr	r3, [pc, #380]	; (7f6c <_pwm_init+0x1f0>)
    7df0:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7df2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7df6:	495e      	ldr	r1, [pc, #376]	; (7f70 <_pwm_init+0x1f4>)
    7df8:	4613      	mov	r3, r2
    7dfa:	009b      	lsls	r3, r3, #2
    7dfc:	4413      	add	r3, r2
    7dfe:	009b      	lsls	r3, r3, #2
    7e00:	440b      	add	r3, r1
    7e02:	330a      	adds	r3, #10
    7e04:	781b      	ldrb	r3, [r3, #0]
    7e06:	4619      	mov	r1, r3
    7e08:	6838      	ldr	r0, [r7, #0]
    7e0a:	4b5a      	ldr	r3, [pc, #360]	; (7f74 <_pwm_init+0x1f8>)
    7e0c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7e0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e12:	4957      	ldr	r1, [pc, #348]	; (7f70 <_pwm_init+0x1f4>)
    7e14:	4613      	mov	r3, r2
    7e16:	009b      	lsls	r3, r3, #2
    7e18:	4413      	add	r3, r2
    7e1a:	009b      	lsls	r3, r3, #2
    7e1c:	440b      	add	r3, r1
    7e1e:	3308      	adds	r3, #8
    7e20:	881b      	ldrh	r3, [r3, #0]
    7e22:	4619      	mov	r1, r3
    7e24:	6838      	ldr	r0, [r7, #0]
    7e26:	4b54      	ldr	r3, [pc, #336]	; (7f78 <_pwm_init+0x1fc>)
    7e28:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7e2a:	2103      	movs	r1, #3
    7e2c:	6838      	ldr	r0, [r7, #0]
    7e2e:	4b53      	ldr	r3, [pc, #332]	; (7f7c <_pwm_init+0x200>)
    7e30:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7e32:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e36:	494e      	ldr	r1, [pc, #312]	; (7f70 <_pwm_init+0x1f4>)
    7e38:	4613      	mov	r3, r2
    7e3a:	009b      	lsls	r3, r3, #2
    7e3c:	4413      	add	r3, r2
    7e3e:	009b      	lsls	r3, r3, #2
    7e40:	440b      	add	r3, r1
    7e42:	3304      	adds	r3, #4
    7e44:	681b      	ldr	r3, [r3, #0]
    7e46:	f003 030c 	and.w	r3, r3, #12
    7e4a:	2b08      	cmp	r3, #8
    7e4c:	d11e      	bne.n	7e8c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7e4e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e52:	4947      	ldr	r1, [pc, #284]	; (7f70 <_pwm_init+0x1f4>)
    7e54:	4613      	mov	r3, r2
    7e56:	009b      	lsls	r3, r3, #2
    7e58:	4413      	add	r3, r2
    7e5a:	009b      	lsls	r3, r3, #2
    7e5c:	440b      	add	r3, r1
    7e5e:	330c      	adds	r3, #12
    7e60:	681b      	ldr	r3, [r3, #0]
    7e62:	461a      	mov	r2, r3
    7e64:	2100      	movs	r1, #0
    7e66:	6838      	ldr	r0, [r7, #0]
    7e68:	4b45      	ldr	r3, [pc, #276]	; (7f80 <_pwm_init+0x204>)
    7e6a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7e6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e70:	493f      	ldr	r1, [pc, #252]	; (7f70 <_pwm_init+0x1f4>)
    7e72:	4613      	mov	r3, r2
    7e74:	009b      	lsls	r3, r3, #2
    7e76:	4413      	add	r3, r2
    7e78:	009b      	lsls	r3, r3, #2
    7e7a:	440b      	add	r3, r1
    7e7c:	3310      	adds	r3, #16
    7e7e:	681b      	ldr	r3, [r3, #0]
    7e80:	461a      	mov	r2, r3
    7e82:	2101      	movs	r1, #1
    7e84:	6838      	ldr	r0, [r7, #0]
    7e86:	4b3e      	ldr	r3, [pc, #248]	; (7f80 <_pwm_init+0x204>)
    7e88:	4798      	blx	r3
    7e8a:	e031      	b.n	7ef0 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7e8c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e90:	4937      	ldr	r1, [pc, #220]	; (7f70 <_pwm_init+0x1f4>)
    7e92:	4613      	mov	r3, r2
    7e94:	009b      	lsls	r3, r3, #2
    7e96:	4413      	add	r3, r2
    7e98:	009b      	lsls	r3, r3, #2
    7e9a:	440b      	add	r3, r1
    7e9c:	3304      	adds	r3, #4
    7e9e:	681b      	ldr	r3, [r3, #0]
    7ea0:	f003 030c 	and.w	r3, r3, #12
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d120      	bne.n	7eea <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7ea8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7eac:	4930      	ldr	r1, [pc, #192]	; (7f70 <_pwm_init+0x1f4>)
    7eae:	4613      	mov	r3, r2
    7eb0:	009b      	lsls	r3, r3, #2
    7eb2:	4413      	add	r3, r2
    7eb4:	009b      	lsls	r3, r3, #2
    7eb6:	440b      	add	r3, r1
    7eb8:	330c      	adds	r3, #12
    7eba:	681b      	ldr	r3, [r3, #0]
    7ebc:	b29b      	uxth	r3, r3
    7ebe:	461a      	mov	r2, r3
    7ec0:	2100      	movs	r1, #0
    7ec2:	6838      	ldr	r0, [r7, #0]
    7ec4:	4b2f      	ldr	r3, [pc, #188]	; (7f84 <_pwm_init+0x208>)
    7ec6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7ec8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ecc:	4928      	ldr	r1, [pc, #160]	; (7f70 <_pwm_init+0x1f4>)
    7ece:	4613      	mov	r3, r2
    7ed0:	009b      	lsls	r3, r3, #2
    7ed2:	4413      	add	r3, r2
    7ed4:	009b      	lsls	r3, r3, #2
    7ed6:	440b      	add	r3, r1
    7ed8:	3310      	adds	r3, #16
    7eda:	681b      	ldr	r3, [r3, #0]
    7edc:	b29b      	uxth	r3, r3
    7ede:	461a      	mov	r2, r3
    7ee0:	2101      	movs	r1, #1
    7ee2:	6838      	ldr	r0, [r7, #0]
    7ee4:	4b27      	ldr	r3, [pc, #156]	; (7f84 <_pwm_init+0x208>)
    7ee6:	4798      	blx	r3
    7ee8:	e002      	b.n	7ef0 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7eea:	f04f 33ff 	mov.w	r3, #4294967295
    7eee:	e02e      	b.n	7f4e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7ef0:	6879      	ldr	r1, [r7, #4]
    7ef2:	6838      	ldr	r0, [r7, #0]
    7ef4:	4b24      	ldr	r3, [pc, #144]	; (7f88 <_pwm_init+0x20c>)
    7ef6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7ef8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7efc:	491c      	ldr	r1, [pc, #112]	; (7f70 <_pwm_init+0x1f4>)
    7efe:	4613      	mov	r3, r2
    7f00:	009b      	lsls	r3, r3, #2
    7f02:	4413      	add	r3, r2
    7f04:	009b      	lsls	r3, r3, #2
    7f06:	440b      	add	r3, r1
    7f08:	3302      	adds	r3, #2
    7f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f0e:	4618      	mov	r0, r3
    7f10:	4b1e      	ldr	r3, [pc, #120]	; (7f8c <_pwm_init+0x210>)
    7f12:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7f14:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f18:	4915      	ldr	r1, [pc, #84]	; (7f70 <_pwm_init+0x1f4>)
    7f1a:	4613      	mov	r3, r2
    7f1c:	009b      	lsls	r3, r3, #2
    7f1e:	4413      	add	r3, r2
    7f20:	009b      	lsls	r3, r3, #2
    7f22:	440b      	add	r3, r1
    7f24:	3302      	adds	r3, #2
    7f26:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f2a:	4618      	mov	r0, r3
    7f2c:	4b18      	ldr	r3, [pc, #96]	; (7f90 <_pwm_init+0x214>)
    7f2e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7f30:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f34:	490e      	ldr	r1, [pc, #56]	; (7f70 <_pwm_init+0x1f4>)
    7f36:	4613      	mov	r3, r2
    7f38:	009b      	lsls	r3, r3, #2
    7f3a:	4413      	add	r3, r2
    7f3c:	009b      	lsls	r3, r3, #2
    7f3e:	440b      	add	r3, r1
    7f40:	3302      	adds	r3, #2
    7f42:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f46:	4618      	mov	r0, r3
    7f48:	4b12      	ldr	r3, [pc, #72]	; (7f94 <_pwm_init+0x218>)
    7f4a:	4798      	blx	r3

	return 0;
    7f4c:	2300      	movs	r3, #0
}
    7f4e:	4618      	mov	r0, r3
    7f50:	3710      	adds	r7, #16
    7f52:	46bd      	mov	sp, r7
    7f54:	bd80      	pop	{r7, pc}
    7f56:	bf00      	nop
    7f58:	00008221 	.word	0x00008221
    7f5c:	00007811 	.word	0x00007811
    7f60:	00007961 	.word	0x00007961
    7f64:	00007939 	.word	0x00007939
    7f68:	000077ed 	.word	0x000077ed
    7f6c:	00007991 	.word	0x00007991
    7f70:	20000048 	.word	0x20000048
    7f74:	000079f1 	.word	0x000079f1
    7f78:	000079b5 	.word	0x000079b5
    7f7c:	000079d3 	.word	0x000079d3
    7f80:	00007a9d 	.word	0x00007a9d
    7f84:	00007a69 	.word	0x00007a69
    7f88:	00008289 	.word	0x00008289
    7f8c:	0000776d 	.word	0x0000776d
    7f90:	000077b1 	.word	0x000077b1
    7f94:	00007731 	.word	0x00007731

00007f98 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    7f98:	b580      	push	{r7, lr}
    7f9a:	b082      	sub	sp, #8
    7f9c:	af00      	add	r7, sp, #0
    7f9e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7fa0:	687b      	ldr	r3, [r7, #4]
    7fa2:	68db      	ldr	r3, [r3, #12]
    7fa4:	4618      	mov	r0, r3
    7fa6:	4b03      	ldr	r3, [pc, #12]	; (7fb4 <_timer_start+0x1c>)
    7fa8:	4798      	blx	r3
}
    7faa:	bf00      	nop
    7fac:	3708      	adds	r7, #8
    7fae:	46bd      	mov	sp, r7
    7fb0:	bd80      	pop	{r7, pc}
    7fb2:	bf00      	nop
    7fb4:	000078d9 	.word	0x000078d9

00007fb8 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    7fb8:	b580      	push	{r7, lr}
    7fba:	b082      	sub	sp, #8
    7fbc:	af00      	add	r7, sp, #0
    7fbe:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7fc0:	687b      	ldr	r3, [r7, #4]
    7fc2:	691b      	ldr	r3, [r3, #16]
    7fc4:	4618      	mov	r0, r3
    7fc6:	4b03      	ldr	r3, [pc, #12]	; (7fd4 <_pwm_enable+0x1c>)
    7fc8:	4798      	blx	r3
}
    7fca:	bf00      	nop
    7fcc:	3708      	adds	r7, #8
    7fce:	46bd      	mov	sp, r7
    7fd0:	bd80      	pop	{r7, pc}
    7fd2:	bf00      	nop
    7fd4:	000078d9 	.word	0x000078d9

00007fd8 <_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    7fd8:	b580      	push	{r7, lr}
    7fda:	b082      	sub	sp, #8
    7fdc:	af00      	add	r7, sp, #0
    7fde:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7fe0:	687b      	ldr	r3, [r7, #4]
    7fe2:	68db      	ldr	r3, [r3, #12]
    7fe4:	4618      	mov	r0, r3
    7fe6:	4b03      	ldr	r3, [pc, #12]	; (7ff4 <_timer_stop+0x1c>)
    7fe8:	4798      	blx	r3
}
    7fea:	bf00      	nop
    7fec:	3708      	adds	r7, #8
    7fee:	46bd      	mov	sp, r7
    7ff0:	bd80      	pop	{r7, pc}
    7ff2:	bf00      	nop
    7ff4:	00007939 	.word	0x00007939

00007ff8 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    7ff8:	b580      	push	{r7, lr}
    7ffa:	b082      	sub	sp, #8
    7ffc:	af00      	add	r7, sp, #0
    7ffe:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8000:	687b      	ldr	r3, [r7, #4]
    8002:	68db      	ldr	r3, [r3, #12]
    8004:	4618      	mov	r0, r3
    8006:	4b03      	ldr	r3, [pc, #12]	; (8014 <_timer_is_started+0x1c>)
    8008:	4798      	blx	r3
    800a:	4603      	mov	r3, r0
}
    800c:	4618      	mov	r0, r3
    800e:	3708      	adds	r7, #8
    8010:	46bd      	mov	sp, r7
    8012:	bd80      	pop	{r7, pc}
    8014:	00007901 	.word	0x00007901

00008018 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    8018:	b580      	push	{r7, lr}
    801a:	b082      	sub	sp, #8
    801c:	af00      	add	r7, sp, #0
    801e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8020:	687b      	ldr	r3, [r7, #4]
    8022:	691b      	ldr	r3, [r3, #16]
    8024:	4618      	mov	r0, r3
    8026:	4b03      	ldr	r3, [pc, #12]	; (8034 <_pwm_is_enabled+0x1c>)
    8028:	4798      	blx	r3
    802a:	4603      	mov	r3, r0
}
    802c:	4618      	mov	r0, r3
    802e:	3708      	adds	r7, #8
    8030:	46bd      	mov	sp, r7
    8032:	bd80      	pop	{r7, pc}
    8034:	00007901 	.word	0x00007901

00008038 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8038:	b480      	push	{r7}
    803a:	af00      	add	r7, sp, #0
	return NULL;
    803c:	2300      	movs	r3, #0
}
    803e:	4618      	mov	r0, r3
    8040:	46bd      	mov	sp, r7
    8042:	f85d 7b04 	ldr.w	r7, [sp], #4
    8046:	4770      	bx	lr

00008048 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8048:	b480      	push	{r7}
    804a:	af00      	add	r7, sp, #0
	return NULL;
    804c:	2300      	movs	r3, #0
}
    804e:	4618      	mov	r0, r3
    8050:	46bd      	mov	sp, r7
    8052:	f85d 7b04 	ldr.w	r7, [sp], #4
    8056:	4770      	bx	lr

00008058 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    8058:	b580      	push	{r7, lr}
    805a:	b084      	sub	sp, #16
    805c:	af00      	add	r7, sp, #0
    805e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8060:	687b      	ldr	r3, [r7, #4]
    8062:	68db      	ldr	r3, [r3, #12]
    8064:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8066:	68f8      	ldr	r0, [r7, #12]
    8068:	4b0e      	ldr	r3, [pc, #56]	; (80a4 <_timer_set_irq+0x4c>)
    806a:	4798      	blx	r3
    806c:	4603      	mov	r3, r0
    806e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8070:	f240 12a7 	movw	r2, #423	; 0x1a7
    8074:	490c      	ldr	r1, [pc, #48]	; (80a8 <_timer_set_irq+0x50>)
    8076:	2001      	movs	r0, #1
    8078:	4b0c      	ldr	r3, [pc, #48]	; (80ac <_timer_set_irq+0x54>)
    807a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    807c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8080:	490b      	ldr	r1, [pc, #44]	; (80b0 <_timer_set_irq+0x58>)
    8082:	4613      	mov	r3, r2
    8084:	009b      	lsls	r3, r3, #2
    8086:	4413      	add	r3, r2
    8088:	009b      	lsls	r3, r3, #2
    808a:	440b      	add	r3, r1
    808c:	3302      	adds	r3, #2
    808e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8092:	b2db      	uxtb	r3, r3
    8094:	4618      	mov	r0, r3
    8096:	4b07      	ldr	r3, [pc, #28]	; (80b4 <_timer_set_irq+0x5c>)
    8098:	4798      	blx	r3
}
    809a:	bf00      	nop
    809c:	3710      	adds	r7, #16
    809e:	46bd      	mov	sp, r7
    80a0:	bd80      	pop	{r7, pc}
    80a2:	bf00      	nop
    80a4:	00008221 	.word	0x00008221
    80a8:	0000efbc 	.word	0x0000efbc
    80ac:	00003911 	.word	0x00003911
    80b0:	20000048 	.word	0x20000048
    80b4:	0000415d 	.word	0x0000415d

000080b8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    80b8:	b580      	push	{r7, lr}
    80ba:	b084      	sub	sp, #16
    80bc:	af00      	add	r7, sp, #0
    80be:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    80c0:	687b      	ldr	r3, [r7, #4]
    80c2:	68db      	ldr	r3, [r3, #12]
    80c4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    80c6:	68f8      	ldr	r0, [r7, #12]
    80c8:	4b07      	ldr	r3, [pc, #28]	; (80e8 <tc_interrupt_handler+0x30>)
    80ca:	4798      	blx	r3
    80cc:	4603      	mov	r3, r0
    80ce:	2b00      	cmp	r3, #0
    80d0:	d006      	beq.n	80e0 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    80d2:	68f8      	ldr	r0, [r7, #12]
    80d4:	4b05      	ldr	r3, [pc, #20]	; (80ec <tc_interrupt_handler+0x34>)
    80d6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    80d8:	687b      	ldr	r3, [r7, #4]
    80da:	681b      	ldr	r3, [r3, #0]
    80dc:	6878      	ldr	r0, [r7, #4]
    80de:	4798      	blx	r3
	}
}
    80e0:	bf00      	nop
    80e2:	3710      	adds	r7, #16
    80e4:	46bd      	mov	sp, r7
    80e6:	bd80      	pop	{r7, pc}
    80e8:	00007839 	.word	0x00007839
    80ec:	00007861 	.word	0x00007861

000080f0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    80f0:	b580      	push	{r7, lr}
    80f2:	b084      	sub	sp, #16
    80f4:	af00      	add	r7, sp, #0
    80f6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    80f8:	687b      	ldr	r3, [r7, #4]
    80fa:	691b      	ldr	r3, [r3, #16]
    80fc:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    80fe:	68f8      	ldr	r0, [r7, #12]
    8100:	4b12      	ldr	r3, [pc, #72]	; (814c <tc_pwm_interrupt_handler+0x5c>)
    8102:	4798      	blx	r3
    8104:	4603      	mov	r3, r0
    8106:	2b00      	cmp	r3, #0
    8108:	d00a      	beq.n	8120 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    810a:	68f8      	ldr	r0, [r7, #12]
    810c:	4b10      	ldr	r3, [pc, #64]	; (8150 <tc_pwm_interrupt_handler+0x60>)
    810e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8110:	687b      	ldr	r3, [r7, #4]
    8112:	681b      	ldr	r3, [r3, #0]
    8114:	2b00      	cmp	r3, #0
    8116:	d003      	beq.n	8120 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8118:	687b      	ldr	r3, [r7, #4]
    811a:	681b      	ldr	r3, [r3, #0]
    811c:	6878      	ldr	r0, [r7, #4]
    811e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8120:	68f8      	ldr	r0, [r7, #12]
    8122:	4b0c      	ldr	r3, [pc, #48]	; (8154 <tc_pwm_interrupt_handler+0x64>)
    8124:	4798      	blx	r3
    8126:	4603      	mov	r3, r0
    8128:	2b00      	cmp	r3, #0
    812a:	d00a      	beq.n	8142 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    812c:	68f8      	ldr	r0, [r7, #12]
    812e:	4b0a      	ldr	r3, [pc, #40]	; (8158 <tc_pwm_interrupt_handler+0x68>)
    8130:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8132:	687b      	ldr	r3, [r7, #4]
    8134:	685b      	ldr	r3, [r3, #4]
    8136:	2b00      	cmp	r3, #0
    8138:	d003      	beq.n	8142 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    813a:	687b      	ldr	r3, [r7, #4]
    813c:	685b      	ldr	r3, [r3, #4]
    813e:	6878      	ldr	r0, [r7, #4]
    8140:	4798      	blx	r3
		}
	}
}
    8142:	bf00      	nop
    8144:	3710      	adds	r7, #16
    8146:	46bd      	mov	sp, r7
    8148:	bd80      	pop	{r7, pc}
    814a:	bf00      	nop
    814c:	00007839 	.word	0x00007839
    8150:	00007861 	.word	0x00007861
    8154:	000078af 	.word	0x000078af
    8158:	0000787b 	.word	0x0000787b

0000815c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    815c:	b580      	push	{r7, lr}
    815e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8160:	4b03      	ldr	r3, [pc, #12]	; (8170 <TC0_Handler+0x14>)
    8162:	681b      	ldr	r3, [r3, #0]
    8164:	4618      	mov	r0, r3
    8166:	4b03      	ldr	r3, [pc, #12]	; (8174 <TC0_Handler+0x18>)
    8168:	4798      	blx	r3
}
    816a:	bf00      	nop
    816c:	bd80      	pop	{r7, pc}
    816e:	bf00      	nop
    8170:	20000710 	.word	0x20000710
    8174:	000080b9 	.word	0x000080b9

00008178 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    8178:	b580      	push	{r7, lr}
    817a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    817c:	4b03      	ldr	r3, [pc, #12]	; (818c <TC1_Handler+0x14>)
    817e:	681b      	ldr	r3, [r3, #0]
    8180:	4618      	mov	r0, r3
    8182:	4b03      	ldr	r3, [pc, #12]	; (8190 <TC1_Handler+0x18>)
    8184:	4798      	blx	r3
}
    8186:	bf00      	nop
    8188:	bd80      	pop	{r7, pc}
    818a:	bf00      	nop
    818c:	20000714 	.word	0x20000714
    8190:	000080b9 	.word	0x000080b9

00008194 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8194:	b580      	push	{r7, lr}
    8196:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8198:	4b03      	ldr	r3, [pc, #12]	; (81a8 <TC2_Handler+0x14>)
    819a:	681b      	ldr	r3, [r3, #0]
    819c:	4618      	mov	r0, r3
    819e:	4b03      	ldr	r3, [pc, #12]	; (81ac <TC2_Handler+0x18>)
    81a0:	4798      	blx	r3
}
    81a2:	bf00      	nop
    81a4:	bd80      	pop	{r7, pc}
    81a6:	bf00      	nop
    81a8:	20000718 	.word	0x20000718
    81ac:	000080b9 	.word	0x000080b9

000081b0 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    81b0:	b580      	push	{r7, lr}
    81b2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    81b4:	4b03      	ldr	r3, [pc, #12]	; (81c4 <TC3_Handler+0x14>)
    81b6:	681b      	ldr	r3, [r3, #0]
    81b8:	4618      	mov	r0, r3
    81ba:	4b03      	ldr	r3, [pc, #12]	; (81c8 <TC3_Handler+0x18>)
    81bc:	4798      	blx	r3
}
    81be:	bf00      	nop
    81c0:	bd80      	pop	{r7, pc}
    81c2:	bf00      	nop
    81c4:	2000071c 	.word	0x2000071c
    81c8:	000080b9 	.word	0x000080b9

000081cc <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    81cc:	b580      	push	{r7, lr}
    81ce:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    81d0:	4b03      	ldr	r3, [pc, #12]	; (81e0 <TC4_Handler+0x14>)
    81d2:	681b      	ldr	r3, [r3, #0]
    81d4:	4618      	mov	r0, r3
    81d6:	4b03      	ldr	r3, [pc, #12]	; (81e4 <TC4_Handler+0x18>)
    81d8:	4798      	blx	r3
}
    81da:	bf00      	nop
    81dc:	bd80      	pop	{r7, pc}
    81de:	bf00      	nop
    81e0:	20000720 	.word	0x20000720
    81e4:	000080b9 	.word	0x000080b9

000081e8 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    81e8:	b580      	push	{r7, lr}
    81ea:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    81ec:	4b03      	ldr	r3, [pc, #12]	; (81fc <TC5_Handler+0x14>)
    81ee:	681b      	ldr	r3, [r3, #0]
    81f0:	4618      	mov	r0, r3
    81f2:	4b03      	ldr	r3, [pc, #12]	; (8200 <TC5_Handler+0x18>)
    81f4:	4798      	blx	r3
}
    81f6:	bf00      	nop
    81f8:	bd80      	pop	{r7, pc}
    81fa:	bf00      	nop
    81fc:	20000724 	.word	0x20000724
    8200:	000080b9 	.word	0x000080b9

00008204 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8204:	b580      	push	{r7, lr}
    8206:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8208:	4b03      	ldr	r3, [pc, #12]	; (8218 <TC7_Handler+0x14>)
    820a:	681b      	ldr	r3, [r3, #0]
    820c:	4618      	mov	r0, r3
    820e:	4b03      	ldr	r3, [pc, #12]	; (821c <TC7_Handler+0x18>)
    8210:	4798      	blx	r3
}
    8212:	bf00      	nop
    8214:	bd80      	pop	{r7, pc}
    8216:	bf00      	nop
    8218:	20000728 	.word	0x20000728
    821c:	000080f1 	.word	0x000080f1

00008220 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8220:	b580      	push	{r7, lr}
    8222:	b084      	sub	sp, #16
    8224:	af00      	add	r7, sp, #0
    8226:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8228:	6878      	ldr	r0, [r7, #4]
    822a:	4b13      	ldr	r3, [pc, #76]	; (8278 <get_tc_index+0x58>)
    822c:	4798      	blx	r3
    822e:	4603      	mov	r3, r0
    8230:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8232:	2300      	movs	r3, #0
    8234:	73fb      	strb	r3, [r7, #15]
    8236:	e010      	b.n	825a <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8238:	7bfa      	ldrb	r2, [r7, #15]
    823a:	4910      	ldr	r1, [pc, #64]	; (827c <get_tc_index+0x5c>)
    823c:	4613      	mov	r3, r2
    823e:	009b      	lsls	r3, r3, #2
    8240:	4413      	add	r3, r2
    8242:	009b      	lsls	r3, r3, #2
    8244:	440b      	add	r3, r1
    8246:	781b      	ldrb	r3, [r3, #0]
    8248:	7bba      	ldrb	r2, [r7, #14]
    824a:	429a      	cmp	r2, r3
    824c:	d102      	bne.n	8254 <get_tc_index+0x34>
			return i;
    824e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8252:	e00d      	b.n	8270 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8254:	7bfb      	ldrb	r3, [r7, #15]
    8256:	3301      	adds	r3, #1
    8258:	73fb      	strb	r3, [r7, #15]
    825a:	7bfb      	ldrb	r3, [r7, #15]
    825c:	2b06      	cmp	r3, #6
    825e:	d9eb      	bls.n	8238 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8260:	f240 221a 	movw	r2, #538	; 0x21a
    8264:	4906      	ldr	r1, [pc, #24]	; (8280 <get_tc_index+0x60>)
    8266:	2000      	movs	r0, #0
    8268:	4b06      	ldr	r3, [pc, #24]	; (8284 <get_tc_index+0x64>)
    826a:	4798      	blx	r3
	return -1;
    826c:	f04f 33ff 	mov.w	r3, #4294967295
}
    8270:	4618      	mov	r0, r3
    8272:	3710      	adds	r7, #16
    8274:	46bd      	mov	sp, r7
    8276:	bd80      	pop	{r7, pc}
    8278:	00008339 	.word	0x00008339
    827c:	20000048 	.word	0x20000048
    8280:	0000efbc 	.word	0x0000efbc
    8284:	00003911 	.word	0x00003911

00008288 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8288:	b480      	push	{r7}
    828a:	b083      	sub	sp, #12
    828c:	af00      	add	r7, sp, #0
    828e:	6078      	str	r0, [r7, #4]
    8290:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8292:	687b      	ldr	r3, [r7, #4]
    8294:	4a1a      	ldr	r2, [pc, #104]	; (8300 <_tc_init_irq_param+0x78>)
    8296:	4293      	cmp	r3, r2
    8298:	d102      	bne.n	82a0 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    829a:	4a1a      	ldr	r2, [pc, #104]	; (8304 <_tc_init_irq_param+0x7c>)
    829c:	683b      	ldr	r3, [r7, #0]
    829e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    82a0:	687b      	ldr	r3, [r7, #4]
    82a2:	4a19      	ldr	r2, [pc, #100]	; (8308 <_tc_init_irq_param+0x80>)
    82a4:	4293      	cmp	r3, r2
    82a6:	d102      	bne.n	82ae <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    82a8:	4a18      	ldr	r2, [pc, #96]	; (830c <_tc_init_irq_param+0x84>)
    82aa:	683b      	ldr	r3, [r7, #0]
    82ac:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    82ae:	687b      	ldr	r3, [r7, #4]
    82b0:	4a17      	ldr	r2, [pc, #92]	; (8310 <_tc_init_irq_param+0x88>)
    82b2:	4293      	cmp	r3, r2
    82b4:	d102      	bne.n	82bc <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    82b6:	4a17      	ldr	r2, [pc, #92]	; (8314 <_tc_init_irq_param+0x8c>)
    82b8:	683b      	ldr	r3, [r7, #0]
    82ba:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    82bc:	687b      	ldr	r3, [r7, #4]
    82be:	4a16      	ldr	r2, [pc, #88]	; (8318 <_tc_init_irq_param+0x90>)
    82c0:	4293      	cmp	r3, r2
    82c2:	d102      	bne.n	82ca <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    82c4:	4a15      	ldr	r2, [pc, #84]	; (831c <_tc_init_irq_param+0x94>)
    82c6:	683b      	ldr	r3, [r7, #0]
    82c8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    82ca:	687b      	ldr	r3, [r7, #4]
    82cc:	4a14      	ldr	r2, [pc, #80]	; (8320 <_tc_init_irq_param+0x98>)
    82ce:	4293      	cmp	r3, r2
    82d0:	d102      	bne.n	82d8 <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    82d2:	4a14      	ldr	r2, [pc, #80]	; (8324 <_tc_init_irq_param+0x9c>)
    82d4:	683b      	ldr	r3, [r7, #0]
    82d6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    82d8:	687b      	ldr	r3, [r7, #4]
    82da:	4a13      	ldr	r2, [pc, #76]	; (8328 <_tc_init_irq_param+0xa0>)
    82dc:	4293      	cmp	r3, r2
    82de:	d102      	bne.n	82e6 <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    82e0:	4a12      	ldr	r2, [pc, #72]	; (832c <_tc_init_irq_param+0xa4>)
    82e2:	683b      	ldr	r3, [r7, #0]
    82e4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    82e6:	687b      	ldr	r3, [r7, #4]
    82e8:	4a11      	ldr	r2, [pc, #68]	; (8330 <_tc_init_irq_param+0xa8>)
    82ea:	4293      	cmp	r3, r2
    82ec:	d102      	bne.n	82f4 <_tc_init_irq_param+0x6c>
		_tc7_dev = (struct _pwm_device *)dev;
    82ee:	4a11      	ldr	r2, [pc, #68]	; (8334 <_tc_init_irq_param+0xac>)
    82f0:	683b      	ldr	r3, [r7, #0]
    82f2:	6013      	str	r3, [r2, #0]
	}
}
    82f4:	bf00      	nop
    82f6:	370c      	adds	r7, #12
    82f8:	46bd      	mov	sp, r7
    82fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    82fe:	4770      	bx	lr
    8300:	40003800 	.word	0x40003800
    8304:	20000710 	.word	0x20000710
    8308:	40003c00 	.word	0x40003c00
    830c:	20000714 	.word	0x20000714
    8310:	4101a000 	.word	0x4101a000
    8314:	20000718 	.word	0x20000718
    8318:	4101c000 	.word	0x4101c000
    831c:	2000071c 	.word	0x2000071c
    8320:	42001400 	.word	0x42001400
    8324:	20000720 	.word	0x20000720
    8328:	42001800 	.word	0x42001800
    832c:	20000724 	.word	0x20000724
    8330:	43001800 	.word	0x43001800
    8334:	20000728 	.word	0x20000728

00008338 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8338:	b4b0      	push	{r4, r5, r7}
    833a:	b08d      	sub	sp, #52	; 0x34
    833c:	af00      	add	r7, sp, #0
    833e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8340:	4b13      	ldr	r3, [pc, #76]	; (8390 <_get_hardware_offset+0x58>)
    8342:	f107 040c 	add.w	r4, r7, #12
    8346:	461d      	mov	r5, r3
    8348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    834a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    834c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8354:	2300      	movs	r3, #0
    8356:	62fb      	str	r3, [r7, #44]	; 0x2c
    8358:	e010      	b.n	837c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    835c:	009b      	lsls	r3, r3, #2
    835e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8362:	4413      	add	r3, r2
    8364:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8368:	461a      	mov	r2, r3
    836a:	687b      	ldr	r3, [r7, #4]
    836c:	429a      	cmp	r2, r3
    836e:	d102      	bne.n	8376 <_get_hardware_offset+0x3e>
			return i;
    8370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8372:	b2db      	uxtb	r3, r3
    8374:	e006      	b.n	8384 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8378:	3301      	adds	r3, #1
    837a:	62fb      	str	r3, [r7, #44]	; 0x2c
    837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    837e:	2b07      	cmp	r3, #7
    8380:	d9eb      	bls.n	835a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8382:	2300      	movs	r3, #0
}
    8384:	4618      	mov	r0, r3
    8386:	3734      	adds	r7, #52	; 0x34
    8388:	46bd      	mov	sp, r7
    838a:	bcb0      	pop	{r4, r5, r7}
    838c:	4770      	bx	lr
    838e:	bf00      	nop
    8390:	0000efd0 	.word	0x0000efd0

00008394 <__NVIC_EnableIRQ>:
{
    8394:	b480      	push	{r7}
    8396:	b083      	sub	sp, #12
    8398:	af00      	add	r7, sp, #0
    839a:	4603      	mov	r3, r0
    839c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    839e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83a2:	2b00      	cmp	r3, #0
    83a4:	db0b      	blt.n	83be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    83a6:	4909      	ldr	r1, [pc, #36]	; (83cc <__NVIC_EnableIRQ+0x38>)
    83a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83ac:	095b      	lsrs	r3, r3, #5
    83ae:	88fa      	ldrh	r2, [r7, #6]
    83b0:	f002 021f 	and.w	r2, r2, #31
    83b4:	2001      	movs	r0, #1
    83b6:	fa00 f202 	lsl.w	r2, r0, r2
    83ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    83be:	bf00      	nop
    83c0:	370c      	adds	r7, #12
    83c2:	46bd      	mov	sp, r7
    83c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    83c8:	4770      	bx	lr
    83ca:	bf00      	nop
    83cc:	e000e100 	.word	0xe000e100

000083d0 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    83d0:	b480      	push	{r7}
    83d2:	b087      	sub	sp, #28
    83d4:	af00      	add	r7, sp, #0
    83d6:	60f8      	str	r0, [r7, #12]
    83d8:	460b      	mov	r3, r1
    83da:	607a      	str	r2, [r7, #4]
    83dc:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    83de:	7afa      	ldrb	r2, [r7, #11]
    83e0:	68f9      	ldr	r1, [r7, #12]
    83e2:	4613      	mov	r3, r2
    83e4:	009b      	lsls	r3, r3, #2
    83e6:	4413      	add	r3, r2
    83e8:	009b      	lsls	r3, r3, #2
    83ea:	440b      	add	r3, r1
    83ec:	3340      	adds	r3, #64	; 0x40
    83ee:	681b      	ldr	r3, [r3, #0]
    83f0:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    83f2:	697a      	ldr	r2, [r7, #20]
    83f4:	687b      	ldr	r3, [r7, #4]
    83f6:	4013      	ands	r3, r2
    83f8:	617b      	str	r3, [r7, #20]
	return tmp;
    83fa:	697b      	ldr	r3, [r7, #20]
}
    83fc:	4618      	mov	r0, r3
    83fe:	371c      	adds	r7, #28
    8400:	46bd      	mov	sp, r7
    8402:	f85d 7b04 	ldr.w	r7, [sp], #4
    8406:	4770      	bx	lr

00008408 <hri_oscctrl_get_STATUS_reg>:
{
    8408:	b480      	push	{r7}
    840a:	b085      	sub	sp, #20
    840c:	af00      	add	r7, sp, #0
    840e:	6078      	str	r0, [r7, #4]
    8410:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8412:	687b      	ldr	r3, [r7, #4]
    8414:	691b      	ldr	r3, [r3, #16]
    8416:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8418:	68fa      	ldr	r2, [r7, #12]
    841a:	683b      	ldr	r3, [r7, #0]
    841c:	4013      	ands	r3, r2
    841e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8420:	68fb      	ldr	r3, [r7, #12]
}
    8422:	4618      	mov	r0, r3
    8424:	3714      	adds	r7, #20
    8426:	46bd      	mov	sp, r7
    8428:	f85d 7b04 	ldr.w	r7, [sp], #4
    842c:	4770      	bx	lr

0000842e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    842e:	b480      	push	{r7}
    8430:	b085      	sub	sp, #20
    8432:	af00      	add	r7, sp, #0
    8434:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8436:	687b      	ldr	r3, [r7, #4]
    8438:	f893 3020 	ldrb.w	r3, [r3, #32]
    843c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    843e:	7bfb      	ldrb	r3, [r7, #15]
    8440:	f003 0301 	and.w	r3, r3, #1
    8444:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8446:	7bfb      	ldrb	r3, [r7, #15]
    8448:	2b00      	cmp	r3, #0
    844a:	bf14      	ite	ne
    844c:	2301      	movne	r3, #1
    844e:	2300      	moveq	r3, #0
    8450:	b2db      	uxtb	r3, r3
}
    8452:	4618      	mov	r0, r3
    8454:	3714      	adds	r7, #20
    8456:	46bd      	mov	sp, r7
    8458:	f85d 7b04 	ldr.w	r7, [sp], #4
    845c:	4770      	bx	lr

0000845e <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    845e:	b480      	push	{r7}
    8460:	b083      	sub	sp, #12
    8462:	af00      	add	r7, sp, #0
    8464:	6078      	str	r0, [r7, #4]
    8466:	460b      	mov	r3, r1
    8468:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    846a:	bf00      	nop
    846c:	687b      	ldr	r3, [r7, #4]
    846e:	789b      	ldrb	r3, [r3, #2]
    8470:	b2da      	uxtb	r2, r3
    8472:	78fb      	ldrb	r3, [r7, #3]
    8474:	4013      	ands	r3, r2
    8476:	b2db      	uxtb	r3, r3
    8478:	2b00      	cmp	r3, #0
    847a:	d1f7      	bne.n	846c <hri_usb_wait_for_sync+0xe>
	};
}
    847c:	bf00      	nop
    847e:	370c      	adds	r7, #12
    8480:	46bd      	mov	sp, r7
    8482:	f85d 7b04 	ldr.w	r7, [sp], #4
    8486:	4770      	bx	lr

00008488 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8488:	b480      	push	{r7}
    848a:	b083      	sub	sp, #12
    848c:	af00      	add	r7, sp, #0
    848e:	6078      	str	r0, [r7, #4]
    8490:	460b      	mov	r3, r1
    8492:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8494:	687b      	ldr	r3, [r7, #4]
    8496:	789b      	ldrb	r3, [r3, #2]
    8498:	b2da      	uxtb	r2, r3
    849a:	78fb      	ldrb	r3, [r7, #3]
    849c:	4013      	ands	r3, r2
    849e:	b2db      	uxtb	r3, r3
    84a0:	2b00      	cmp	r3, #0
    84a2:	bf14      	ite	ne
    84a4:	2301      	movne	r3, #1
    84a6:	2300      	moveq	r3, #0
    84a8:	b2db      	uxtb	r3, r3
}
    84aa:	4618      	mov	r0, r3
    84ac:	370c      	adds	r7, #12
    84ae:	46bd      	mov	sp, r7
    84b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    84b4:	4770      	bx	lr

000084b6 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    84b6:	b480      	push	{r7}
    84b8:	b085      	sub	sp, #20
    84ba:	af00      	add	r7, sp, #0
    84bc:	6078      	str	r0, [r7, #4]
    84be:	460b      	mov	r3, r1
    84c0:	70fb      	strb	r3, [r7, #3]
    84c2:	4613      	mov	r3, r2
    84c4:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    84c6:	78fb      	ldrb	r3, [r7, #3]
    84c8:	687a      	ldr	r2, [r7, #4]
    84ca:	3308      	adds	r3, #8
    84cc:	015b      	lsls	r3, r3, #5
    84ce:	4413      	add	r3, r2
    84d0:	3307      	adds	r3, #7
    84d2:	781b      	ldrb	r3, [r3, #0]
    84d4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    84d6:	7bfa      	ldrb	r2, [r7, #15]
    84d8:	78bb      	ldrb	r3, [r7, #2]
    84da:	4013      	ands	r3, r2
    84dc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    84de:	7bfb      	ldrb	r3, [r7, #15]
}
    84e0:	4618      	mov	r0, r3
    84e2:	3714      	adds	r7, #20
    84e4:	46bd      	mov	sp, r7
    84e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ea:	4770      	bx	lr

000084ec <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    84ec:	b480      	push	{r7}
    84ee:	b083      	sub	sp, #12
    84f0:	af00      	add	r7, sp, #0
    84f2:	6078      	str	r0, [r7, #4]
    84f4:	460b      	mov	r3, r1
    84f6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    84f8:	78fb      	ldrb	r3, [r7, #3]
    84fa:	687a      	ldr	r2, [r7, #4]
    84fc:	3308      	adds	r3, #8
    84fe:	015b      	lsls	r3, r3, #5
    8500:	4413      	add	r3, r2
    8502:	3307      	adds	r3, #7
    8504:	781b      	ldrb	r3, [r3, #0]
    8506:	b2db      	uxtb	r3, r3
}
    8508:	4618      	mov	r0, r3
    850a:	370c      	adds	r7, #12
    850c:	46bd      	mov	sp, r7
    850e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8512:	4770      	bx	lr

00008514 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8514:	b480      	push	{r7}
    8516:	b083      	sub	sp, #12
    8518:	af00      	add	r7, sp, #0
    851a:	6078      	str	r0, [r7, #4]
    851c:	460b      	mov	r3, r1
    851e:	70fb      	strb	r3, [r7, #3]
    8520:	4613      	mov	r3, r2
    8522:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8524:	78fb      	ldrb	r3, [r7, #3]
    8526:	687a      	ldr	r2, [r7, #4]
    8528:	3308      	adds	r3, #8
    852a:	015b      	lsls	r3, r3, #5
    852c:	4413      	add	r3, r2
    852e:	3307      	adds	r3, #7
    8530:	78ba      	ldrb	r2, [r7, #2]
    8532:	701a      	strb	r2, [r3, #0]
}
    8534:	bf00      	nop
    8536:	370c      	adds	r7, #12
    8538:	46bd      	mov	sp, r7
    853a:	f85d 7b04 	ldr.w	r7, [sp], #4
    853e:	4770      	bx	lr

00008540 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8540:	b480      	push	{r7}
    8542:	b083      	sub	sp, #12
    8544:	af00      	add	r7, sp, #0
    8546:	6078      	str	r0, [r7, #4]
    8548:	460b      	mov	r3, r1
    854a:	70fb      	strb	r3, [r7, #3]
    854c:	4613      	mov	r3, r2
    854e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8550:	78fb      	ldrb	r3, [r7, #3]
    8552:	687a      	ldr	r2, [r7, #4]
    8554:	3308      	adds	r3, #8
    8556:	015b      	lsls	r3, r3, #5
    8558:	4413      	add	r3, r2
    855a:	3305      	adds	r3, #5
    855c:	78ba      	ldrb	r2, [r7, #2]
    855e:	701a      	strb	r2, [r3, #0]
}
    8560:	bf00      	nop
    8562:	370c      	adds	r7, #12
    8564:	46bd      	mov	sp, r7
    8566:	f85d 7b04 	ldr.w	r7, [sp], #4
    856a:	4770      	bx	lr

0000856c <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    856c:	b480      	push	{r7}
    856e:	b083      	sub	sp, #12
    8570:	af00      	add	r7, sp, #0
    8572:	6078      	str	r0, [r7, #4]
    8574:	460b      	mov	r3, r1
    8576:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8578:	78fb      	ldrb	r3, [r7, #3]
    857a:	687a      	ldr	r2, [r7, #4]
    857c:	3308      	adds	r3, #8
    857e:	015b      	lsls	r3, r3, #5
    8580:	4413      	add	r3, r2
    8582:	3306      	adds	r3, #6
    8584:	781b      	ldrb	r3, [r3, #0]
    8586:	b2db      	uxtb	r3, r3
}
    8588:	4618      	mov	r0, r3
    858a:	370c      	adds	r7, #12
    858c:	46bd      	mov	sp, r7
    858e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8592:	4770      	bx	lr

00008594 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8594:	b480      	push	{r7}
    8596:	b083      	sub	sp, #12
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
    859c:	460b      	mov	r3, r1
    859e:	70fb      	strb	r3, [r7, #3]
    85a0:	4613      	mov	r3, r2
    85a2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    85a4:	78fb      	ldrb	r3, [r7, #3]
    85a6:	687a      	ldr	r2, [r7, #4]
    85a8:	3308      	adds	r3, #8
    85aa:	015b      	lsls	r3, r3, #5
    85ac:	4413      	add	r3, r2
    85ae:	3304      	adds	r3, #4
    85b0:	78ba      	ldrb	r2, [r7, #2]
    85b2:	701a      	strb	r2, [r3, #0]
}
    85b4:	bf00      	nop
    85b6:	370c      	adds	r7, #12
    85b8:	46bd      	mov	sp, r7
    85ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    85be:	4770      	bx	lr

000085c0 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    85c0:	b480      	push	{r7}
    85c2:	b083      	sub	sp, #12
    85c4:	af00      	add	r7, sp, #0
    85c6:	6078      	str	r0, [r7, #4]
    85c8:	460b      	mov	r3, r1
    85ca:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    85cc:	78fb      	ldrb	r3, [r7, #3]
    85ce:	687a      	ldr	r2, [r7, #4]
    85d0:	015b      	lsls	r3, r3, #5
    85d2:	4413      	add	r3, r2
    85d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    85d8:	2210      	movs	r2, #16
    85da:	701a      	strb	r2, [r3, #0]
}
    85dc:	bf00      	nop
    85de:	370c      	adds	r7, #12
    85e0:	46bd      	mov	sp, r7
    85e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85e6:	4770      	bx	lr

000085e8 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    85e8:	b480      	push	{r7}
    85ea:	b083      	sub	sp, #12
    85ec:	af00      	add	r7, sp, #0
    85ee:	6078      	str	r0, [r7, #4]
    85f0:	460b      	mov	r3, r1
    85f2:	70fb      	strb	r3, [r7, #3]
    85f4:	4613      	mov	r3, r2
    85f6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    85f8:	78fb      	ldrb	r3, [r7, #3]
    85fa:	687a      	ldr	r2, [r7, #4]
    85fc:	015b      	lsls	r3, r3, #5
    85fe:	4413      	add	r3, r2
    8600:	f203 1309 	addw	r3, r3, #265	; 0x109
    8604:	78ba      	ldrb	r2, [r7, #2]
    8606:	701a      	strb	r2, [r3, #0]
}
    8608:	bf00      	nop
    860a:	370c      	adds	r7, #12
    860c:	46bd      	mov	sp, r7
    860e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8612:	4770      	bx	lr

00008614 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8614:	b480      	push	{r7}
    8616:	b083      	sub	sp, #12
    8618:	af00      	add	r7, sp, #0
    861a:	6078      	str	r0, [r7, #4]
    861c:	460b      	mov	r3, r1
    861e:	70fb      	strb	r3, [r7, #3]
    8620:	4613      	mov	r3, r2
    8622:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8624:	78fb      	ldrb	r3, [r7, #3]
    8626:	687a      	ldr	r2, [r7, #4]
    8628:	015b      	lsls	r3, r3, #5
    862a:	4413      	add	r3, r2
    862c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8630:	78ba      	ldrb	r2, [r7, #2]
    8632:	701a      	strb	r2, [r3, #0]
}
    8634:	bf00      	nop
    8636:	370c      	adds	r7, #12
    8638:	46bd      	mov	sp, r7
    863a:	f85d 7b04 	ldr.w	r7, [sp], #4
    863e:	4770      	bx	lr

00008640 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8640:	b480      	push	{r7}
    8642:	b085      	sub	sp, #20
    8644:	af00      	add	r7, sp, #0
    8646:	6078      	str	r0, [r7, #4]
    8648:	460b      	mov	r3, r1
    864a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    864c:	78fb      	ldrb	r3, [r7, #3]
    864e:	687a      	ldr	r2, [r7, #4]
    8650:	3308      	adds	r3, #8
    8652:	015b      	lsls	r3, r3, #5
    8654:	4413      	add	r3, r2
    8656:	781b      	ldrb	r3, [r3, #0]
    8658:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    865a:	7bfb      	ldrb	r3, [r7, #15]
    865c:	f003 0307 	and.w	r3, r3, #7
    8660:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8662:	7bfb      	ldrb	r3, [r7, #15]
}
    8664:	4618      	mov	r0, r3
    8666:	3714      	adds	r7, #20
    8668:	46bd      	mov	sp, r7
    866a:	f85d 7b04 	ldr.w	r7, [sp], #4
    866e:	4770      	bx	lr

00008670 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8670:	b480      	push	{r7}
    8672:	b085      	sub	sp, #20
    8674:	af00      	add	r7, sp, #0
    8676:	6078      	str	r0, [r7, #4]
    8678:	460b      	mov	r3, r1
    867a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    867c:	78fb      	ldrb	r3, [r7, #3]
    867e:	687a      	ldr	r2, [r7, #4]
    8680:	3308      	adds	r3, #8
    8682:	015b      	lsls	r3, r3, #5
    8684:	4413      	add	r3, r2
    8686:	781b      	ldrb	r3, [r3, #0]
    8688:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    868a:	7bfb      	ldrb	r3, [r7, #15]
    868c:	091b      	lsrs	r3, r3, #4
    868e:	b2db      	uxtb	r3, r3
    8690:	f003 0307 	and.w	r3, r3, #7
    8694:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8696:	7bfb      	ldrb	r3, [r7, #15]
}
    8698:	4618      	mov	r0, r3
    869a:	3714      	adds	r7, #20
    869c:	46bd      	mov	sp, r7
    869e:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a2:	4770      	bx	lr

000086a4 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    86a4:	b480      	push	{r7}
    86a6:	b083      	sub	sp, #12
    86a8:	af00      	add	r7, sp, #0
    86aa:	6078      	str	r0, [r7, #4]
    86ac:	460b      	mov	r3, r1
    86ae:	70fb      	strb	r3, [r7, #3]
    86b0:	4613      	mov	r3, r2
    86b2:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    86b4:	78fb      	ldrb	r3, [r7, #3]
    86b6:	687a      	ldr	r2, [r7, #4]
    86b8:	3308      	adds	r3, #8
    86ba:	015b      	lsls	r3, r3, #5
    86bc:	4413      	add	r3, r2
    86be:	78ba      	ldrb	r2, [r7, #2]
    86c0:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    86c2:	bf00      	nop
    86c4:	370c      	adds	r7, #12
    86c6:	46bd      	mov	sp, r7
    86c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    86cc:	4770      	bx	lr

000086ce <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    86ce:	b480      	push	{r7}
    86d0:	b083      	sub	sp, #12
    86d2:	af00      	add	r7, sp, #0
    86d4:	6078      	str	r0, [r7, #4]
    86d6:	460b      	mov	r3, r1
    86d8:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    86da:	78fb      	ldrb	r3, [r7, #3]
    86dc:	687a      	ldr	r2, [r7, #4]
    86de:	3308      	adds	r3, #8
    86e0:	015b      	lsls	r3, r3, #5
    86e2:	4413      	add	r3, r2
    86e4:	781b      	ldrb	r3, [r3, #0]
    86e6:	b2db      	uxtb	r3, r3
}
    86e8:	4618      	mov	r0, r3
    86ea:	370c      	adds	r7, #12
    86ec:	46bd      	mov	sp, r7
    86ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    86f2:	4770      	bx	lr

000086f4 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    86f4:	b480      	push	{r7}
    86f6:	b083      	sub	sp, #12
    86f8:	af00      	add	r7, sp, #0
    86fa:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    86fc:	687b      	ldr	r3, [r7, #4]
    86fe:	8b9b      	ldrh	r3, [r3, #28]
    8700:	b29b      	uxth	r3, r3
}
    8702:	4618      	mov	r0, r3
    8704:	370c      	adds	r7, #12
    8706:	46bd      	mov	sp, r7
    8708:	f85d 7b04 	ldr.w	r7, [sp], #4
    870c:	4770      	bx	lr

0000870e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    870e:	b480      	push	{r7}
    8710:	b083      	sub	sp, #12
    8712:	af00      	add	r7, sp, #0
    8714:	6078      	str	r0, [r7, #4]
    8716:	460b      	mov	r3, r1
    8718:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    871a:	687b      	ldr	r3, [r7, #4]
    871c:	887a      	ldrh	r2, [r7, #2]
    871e:	839a      	strh	r2, [r3, #28]
}
    8720:	bf00      	nop
    8722:	370c      	adds	r7, #12
    8724:	46bd      	mov	sp, r7
    8726:	f85d 7b04 	ldr.w	r7, [sp], #4
    872a:	4770      	bx	lr

0000872c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    872c:	b480      	push	{r7}
    872e:	b083      	sub	sp, #12
    8730:	af00      	add	r7, sp, #0
    8732:	6078      	str	r0, [r7, #4]
    8734:	460b      	mov	r3, r1
    8736:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8738:	687b      	ldr	r3, [r7, #4]
    873a:	887a      	ldrh	r2, [r7, #2]
    873c:	831a      	strh	r2, [r3, #24]
}
    873e:	bf00      	nop
    8740:	370c      	adds	r7, #12
    8742:	46bd      	mov	sp, r7
    8744:	f85d 7b04 	ldr.w	r7, [sp], #4
    8748:	4770      	bx	lr

0000874a <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    874a:	b480      	push	{r7}
    874c:	b083      	sub	sp, #12
    874e:	af00      	add	r7, sp, #0
    8750:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8752:	687b      	ldr	r3, [r7, #4]
    8754:	8b1b      	ldrh	r3, [r3, #24]
    8756:	b29b      	uxth	r3, r3
}
    8758:	4618      	mov	r0, r3
    875a:	370c      	adds	r7, #12
    875c:	46bd      	mov	sp, r7
    875e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8762:	4770      	bx	lr

00008764 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8764:	b480      	push	{r7}
    8766:	b083      	sub	sp, #12
    8768:	af00      	add	r7, sp, #0
    876a:	6078      	str	r0, [r7, #4]
    876c:	460b      	mov	r3, r1
    876e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8770:	687b      	ldr	r3, [r7, #4]
    8772:	887a      	ldrh	r2, [r7, #2]
    8774:	829a      	strh	r2, [r3, #20]
}
    8776:	bf00      	nop
    8778:	370c      	adds	r7, #12
    877a:	46bd      	mov	sp, r7
    877c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8780:	4770      	bx	lr

00008782 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8782:	b480      	push	{r7}
    8784:	b085      	sub	sp, #20
    8786:	af00      	add	r7, sp, #0
    8788:	6078      	str	r0, [r7, #4]
    878a:	460b      	mov	r3, r1
    878c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    878e:	687b      	ldr	r3, [r7, #4]
    8790:	789b      	ldrb	r3, [r3, #2]
    8792:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8794:	7bfa      	ldrb	r2, [r7, #15]
    8796:	78fb      	ldrb	r3, [r7, #3]
    8798:	4013      	ands	r3, r2
    879a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    879c:	7bfb      	ldrb	r3, [r7, #15]
}
    879e:	4618      	mov	r0, r3
    87a0:	3714      	adds	r7, #20
    87a2:	46bd      	mov	sp, r7
    87a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    87a8:	4770      	bx	lr
	...

000087ac <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    87ac:	b580      	push	{r7, lr}
    87ae:	b082      	sub	sp, #8
    87b0:	af00      	add	r7, sp, #0
    87b2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    87b4:	687b      	ldr	r3, [r7, #4]
    87b6:	781b      	ldrb	r3, [r3, #0]
    87b8:	b2db      	uxtb	r3, r3
    87ba:	f023 0302 	bic.w	r3, r3, #2
    87be:	b2da      	uxtb	r2, r3
    87c0:	687b      	ldr	r3, [r7, #4]
    87c2:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    87c4:	2103      	movs	r1, #3
    87c6:	6878      	ldr	r0, [r7, #4]
    87c8:	4b02      	ldr	r3, [pc, #8]	; (87d4 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    87ca:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    87cc:	bf00      	nop
    87ce:	3708      	adds	r7, #8
    87d0:	46bd      	mov	sp, r7
    87d2:	bd80      	pop	{r7, pc}
    87d4:	0000845f 	.word	0x0000845f

000087d8 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    87d8:	b580      	push	{r7, lr}
    87da:	b084      	sub	sp, #16
    87dc:	af00      	add	r7, sp, #0
    87de:	6078      	str	r0, [r7, #4]
    87e0:	460b      	mov	r3, r1
    87e2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    87e4:	2103      	movs	r1, #3
    87e6:	6878      	ldr	r0, [r7, #4]
    87e8:	4b06      	ldr	r3, [pc, #24]	; (8804 <hri_usb_get_CTRLA_reg+0x2c>)
    87ea:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    87ec:	687b      	ldr	r3, [r7, #4]
    87ee:	781b      	ldrb	r3, [r3, #0]
    87f0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    87f2:	7bfa      	ldrb	r2, [r7, #15]
    87f4:	78fb      	ldrb	r3, [r7, #3]
    87f6:	4013      	ands	r3, r2
    87f8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    87fa:	7bfb      	ldrb	r3, [r7, #15]
}
    87fc:	4618      	mov	r0, r3
    87fe:	3710      	adds	r7, #16
    8800:	46bd      	mov	sp, r7
    8802:	bd80      	pop	{r7, pc}
    8804:	0000845f 	.word	0x0000845f

00008808 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8808:	b580      	push	{r7, lr}
    880a:	b082      	sub	sp, #8
    880c:	af00      	add	r7, sp, #0
    880e:	6078      	str	r0, [r7, #4]
    8810:	460b      	mov	r3, r1
    8812:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8814:	687b      	ldr	r3, [r7, #4]
    8816:	78fa      	ldrb	r2, [r7, #3]
    8818:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    881a:	2103      	movs	r1, #3
    881c:	6878      	ldr	r0, [r7, #4]
    881e:	4b03      	ldr	r3, [pc, #12]	; (882c <hri_usb_write_CTRLA_reg+0x24>)
    8820:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8822:	bf00      	nop
    8824:	3708      	adds	r7, #8
    8826:	46bd      	mov	sp, r7
    8828:	bd80      	pop	{r7, pc}
    882a:	bf00      	nop
    882c:	0000845f 	.word	0x0000845f

00008830 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8830:	b580      	push	{r7, lr}
    8832:	b082      	sub	sp, #8
    8834:	af00      	add	r7, sp, #0
    8836:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8838:	2103      	movs	r1, #3
    883a:	6878      	ldr	r0, [r7, #4]
    883c:	4b04      	ldr	r3, [pc, #16]	; (8850 <hri_usb_read_CTRLA_reg+0x20>)
    883e:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	781b      	ldrb	r3, [r3, #0]
    8844:	b2db      	uxtb	r3, r3
}
    8846:	4618      	mov	r0, r3
    8848:	3708      	adds	r7, #8
    884a:	46bd      	mov	sp, r7
    884c:	bd80      	pop	{r7, pc}
    884e:	bf00      	nop
    8850:	0000845f 	.word	0x0000845f

00008854 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8854:	b480      	push	{r7}
    8856:	b083      	sub	sp, #12
    8858:	af00      	add	r7, sp, #0
    885a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    885c:	687b      	ldr	r3, [r7, #4]
    885e:	891b      	ldrh	r3, [r3, #8]
    8860:	b29b      	uxth	r3, r3
    8862:	f023 0301 	bic.w	r3, r3, #1
    8866:	b29a      	uxth	r2, r3
    8868:	687b      	ldr	r3, [r7, #4]
    886a:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    886c:	bf00      	nop
    886e:	370c      	adds	r7, #12
    8870:	46bd      	mov	sp, r7
    8872:	f85d 7b04 	ldr.w	r7, [sp], #4
    8876:	4770      	bx	lr

00008878 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8878:	b480      	push	{r7}
    887a:	b083      	sub	sp, #12
    887c:	af00      	add	r7, sp, #0
    887e:	6078      	str	r0, [r7, #4]
    8880:	460b      	mov	r3, r1
    8882:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8884:	687b      	ldr	r3, [r7, #4]
    8886:	887a      	ldrh	r2, [r7, #2]
    8888:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    888a:	bf00      	nop
    888c:	370c      	adds	r7, #12
    888e:	46bd      	mov	sp, r7
    8890:	f85d 7b04 	ldr.w	r7, [sp], #4
    8894:	4770      	bx	lr

00008896 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8896:	b480      	push	{r7}
    8898:	b083      	sub	sp, #12
    889a:	af00      	add	r7, sp, #0
    889c:	6078      	str	r0, [r7, #4]
    889e:	460b      	mov	r3, r1
    88a0:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    88a2:	687b      	ldr	r3, [r7, #4]
    88a4:	78fa      	ldrb	r2, [r7, #3]
    88a6:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    88a8:	bf00      	nop
    88aa:	370c      	adds	r7, #12
    88ac:	46bd      	mov	sp, r7
    88ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    88b2:	4770      	bx	lr

000088b4 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    88b4:	b480      	push	{r7}
    88b6:	b083      	sub	sp, #12
    88b8:	af00      	add	r7, sp, #0
    88ba:	6078      	str	r0, [r7, #4]
    88bc:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	683a      	ldr	r2, [r7, #0]
    88c2:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    88c4:	bf00      	nop
    88c6:	370c      	adds	r7, #12
    88c8:	46bd      	mov	sp, r7
    88ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ce:	4770      	bx	lr

000088d0 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    88d0:	b480      	push	{r7}
    88d2:	b083      	sub	sp, #12
    88d4:	af00      	add	r7, sp, #0
    88d6:	6078      	str	r0, [r7, #4]
    88d8:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    88da:	2300      	movs	r3, #0
}
    88dc:	4618      	mov	r0, r3
    88de:	370c      	adds	r7, #12
    88e0:	46bd      	mov	sp, r7
    88e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88e6:	4770      	bx	lr

000088e8 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    88e8:	b480      	push	{r7}
    88ea:	b085      	sub	sp, #20
    88ec:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    88ee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    88f2:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    88f4:	4b28      	ldr	r3, [pc, #160]	; (8998 <_usb_load_calib+0xb0>)
    88f6:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    88f8:	f003 031f 	and.w	r3, r3, #31
    88fc:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    88fe:	4b26      	ldr	r3, [pc, #152]	; (8998 <_usb_load_calib+0xb0>)
    8900:	681b      	ldr	r3, [r3, #0]
    8902:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8904:	f003 031f 	and.w	r3, r3, #31
    8908:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    890a:	4b23      	ldr	r3, [pc, #140]	; (8998 <_usb_load_calib+0xb0>)
    890c:	681b      	ldr	r3, [r3, #0]
    890e:	0a9b      	lsrs	r3, r3, #10
    8910:	f003 0307 	and.w	r3, r3, #7
    8914:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8916:	68fb      	ldr	r3, [r7, #12]
    8918:	2b00      	cmp	r3, #0
    891a:	d002      	beq.n	8922 <_usb_load_calib+0x3a>
    891c:	68fb      	ldr	r3, [r7, #12]
    891e:	2b1f      	cmp	r3, #31
    8920:	d101      	bne.n	8926 <_usb_load_calib+0x3e>
		pad_transn = 9;
    8922:	2309      	movs	r3, #9
    8924:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8926:	68bb      	ldr	r3, [r7, #8]
    8928:	2b00      	cmp	r3, #0
    892a:	d002      	beq.n	8932 <_usb_load_calib+0x4a>
    892c:	68bb      	ldr	r3, [r7, #8]
    892e:	2b1f      	cmp	r3, #31
    8930:	d101      	bne.n	8936 <_usb_load_calib+0x4e>
		pad_transp = 25;
    8932:	2319      	movs	r3, #25
    8934:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8936:	687b      	ldr	r3, [r7, #4]
    8938:	2b00      	cmp	r3, #0
    893a:	d002      	beq.n	8942 <_usb_load_calib+0x5a>
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	2b07      	cmp	r3, #7
    8940:	d101      	bne.n	8946 <_usb_load_calib+0x5e>
		pad_trim = 6;
    8942:	2306      	movs	r3, #6
    8944:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8946:	68fb      	ldr	r3, [r7, #12]
    8948:	b29b      	uxth	r3, r3
    894a:	019b      	lsls	r3, r3, #6
    894c:	b29b      	uxth	r3, r3
    894e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8952:	b29a      	uxth	r2, r3
    8954:	68bb      	ldr	r3, [r7, #8]
    8956:	b29b      	uxth	r3, r3
    8958:	f003 031f 	and.w	r3, r3, #31
    895c:	b29b      	uxth	r3, r3
    895e:	4313      	orrs	r3, r2
    8960:	b29a      	uxth	r2, r3
    8962:	687b      	ldr	r3, [r7, #4]
    8964:	b29b      	uxth	r3, r3
    8966:	031b      	lsls	r3, r3, #12
    8968:	b29b      	uxth	r3, r3
    896a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    896e:	b29b      	uxth	r3, r3
    8970:	4313      	orrs	r3, r2
    8972:	b29a      	uxth	r2, r3
    8974:	683b      	ldr	r3, [r7, #0]
    8976:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8978:	683a      	ldr	r2, [r7, #0]
    897a:	78d3      	ldrb	r3, [r2, #3]
    897c:	f043 0303 	orr.w	r3, r3, #3
    8980:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8982:	683a      	ldr	r2, [r7, #0]
    8984:	78d3      	ldrb	r3, [r2, #3]
    8986:	f043 030c 	orr.w	r3, r3, #12
    898a:	70d3      	strb	r3, [r2, #3]
}
    898c:	bf00      	nop
    898e:	3714      	adds	r7, #20
    8990:	46bd      	mov	sp, r7
    8992:	f85d 7b04 	ldr.w	r7, [sp], #4
    8996:	4770      	bx	lr
    8998:	00800084 	.word	0x00800084

0000899c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    899c:	b580      	push	{r7, lr}
    899e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    89a0:	bf00      	nop
    89a2:	2203      	movs	r2, #3
    89a4:	2100      	movs	r1, #0
    89a6:	4804      	ldr	r0, [pc, #16]	; (89b8 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    89a8:	4b04      	ldr	r3, [pc, #16]	; (89bc <_usb_d_dev_wait_dpll_rdy+0x20>)
    89aa:	4798      	blx	r3
    89ac:	4603      	mov	r3, r0
    89ae:	2b03      	cmp	r3, #3
    89b0:	d1f7      	bne.n	89a2 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    89b2:	bf00      	nop
    89b4:	bd80      	pop	{r7, pc}
    89b6:	bf00      	nop
    89b8:	40001000 	.word	0x40001000
    89bc:	000083d1 	.word	0x000083d1

000089c0 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    89c0:	b580      	push	{r7, lr}
    89c2:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    89c4:	480e      	ldr	r0, [pc, #56]	; (8a00 <_usb_d_dev_wait_dfll_rdy+0x40>)
    89c6:	4b0f      	ldr	r3, [pc, #60]	; (8a04 <_usb_d_dev_wait_dfll_rdy+0x44>)
    89c8:	4798      	blx	r3
    89ca:	4603      	mov	r3, r0
    89cc:	2b00      	cmp	r3, #0
    89ce:	d00a      	beq.n	89e6 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    89d0:	bf00      	nop
    89d2:	f44f 6110 	mov.w	r1, #2304	; 0x900
    89d6:	480a      	ldr	r0, [pc, #40]	; (8a00 <_usb_d_dev_wait_dfll_rdy+0x40>)
    89d8:	4b0b      	ldr	r3, [pc, #44]	; (8a08 <_usb_d_dev_wait_dfll_rdy+0x48>)
    89da:	4798      	blx	r3
    89dc:	4603      	mov	r3, r0
    89de:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    89e2:	d1f6      	bne.n	89d2 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    89e4:	e009      	b.n	89fa <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    89e6:	bf00      	nop
    89e8:	f44f 7180 	mov.w	r1, #256	; 0x100
    89ec:	4804      	ldr	r0, [pc, #16]	; (8a00 <_usb_d_dev_wait_dfll_rdy+0x40>)
    89ee:	4b06      	ldr	r3, [pc, #24]	; (8a08 <_usb_d_dev_wait_dfll_rdy+0x48>)
    89f0:	4798      	blx	r3
    89f2:	4603      	mov	r3, r0
    89f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    89f8:	d1f6      	bne.n	89e8 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    89fa:	bf00      	nop
    89fc:	bd80      	pop	{r7, pc}
    89fe:	bf00      	nop
    8a00:	40001000 	.word	0x40001000
    8a04:	0000842f 	.word	0x0000842f
    8a08:	00008409 	.word	0x00008409

00008a0c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8a0c:	b580      	push	{r7, lr}
    8a0e:	b082      	sub	sp, #8
    8a10:	af00      	add	r7, sp, #0
    8a12:	4603      	mov	r3, r0
    8a14:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8a16:	79fb      	ldrb	r3, [r7, #7]
    8a18:	2b00      	cmp	r3, #0
    8a1a:	d102      	bne.n	8a22 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8a1c:	4b05      	ldr	r3, [pc, #20]	; (8a34 <_usb_d_dev_wait_clk_rdy+0x28>)
    8a1e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8a20:	e004      	b.n	8a2c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8a22:	79fb      	ldrb	r3, [r7, #7]
    8a24:	2b01      	cmp	r3, #1
    8a26:	d101      	bne.n	8a2c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8a28:	4b03      	ldr	r3, [pc, #12]	; (8a38 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8a2a:	4798      	blx	r3
}
    8a2c:	bf00      	nop
    8a2e:	3708      	adds	r7, #8
    8a30:	46bd      	mov	sp, r7
    8a32:	bd80      	pop	{r7, pc}
    8a34:	000089c1 	.word	0x000089c1
    8a38:	0000899d 	.word	0x0000899d

00008a3c <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8a3c:	b580      	push	{r7, lr}
    8a3e:	b082      	sub	sp, #8
    8a40:	af00      	add	r7, sp, #0
    8a42:	4603      	mov	r3, r0
    8a44:	6039      	str	r1, [r7, #0]
    8a46:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8a48:	683b      	ldr	r3, [r7, #0]
    8a4a:	b2da      	uxtb	r2, r3
    8a4c:	79fb      	ldrb	r3, [r7, #7]
    8a4e:	4619      	mov	r1, r3
    8a50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a54:	4b02      	ldr	r3, [pc, #8]	; (8a60 <_usbd_ep_int_ack+0x24>)
    8a56:	4798      	blx	r3
}
    8a58:	bf00      	nop
    8a5a:	3708      	adds	r7, #8
    8a5c:	46bd      	mov	sp, r7
    8a5e:	bd80      	pop	{r7, pc}
    8a60:	00008515 	.word	0x00008515

00008a64 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8a64:	b580      	push	{r7, lr}
    8a66:	b082      	sub	sp, #8
    8a68:	af00      	add	r7, sp, #0
    8a6a:	4603      	mov	r3, r0
    8a6c:	6039      	str	r1, [r7, #0]
    8a6e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8a70:	683b      	ldr	r3, [r7, #0]
    8a72:	b2da      	uxtb	r2, r3
    8a74:	79fb      	ldrb	r3, [r7, #7]
    8a76:	4619      	mov	r1, r3
    8a78:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a7c:	4b02      	ldr	r3, [pc, #8]	; (8a88 <_usbd_ep_int_en+0x24>)
    8a7e:	4798      	blx	r3
}
    8a80:	bf00      	nop
    8a82:	3708      	adds	r7, #8
    8a84:	46bd      	mov	sp, r7
    8a86:	bd80      	pop	{r7, pc}
    8a88:	000085e9 	.word	0x000085e9

00008a8c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8a8c:	b580      	push	{r7, lr}
    8a8e:	b082      	sub	sp, #8
    8a90:	af00      	add	r7, sp, #0
    8a92:	4603      	mov	r3, r0
    8a94:	6039      	str	r1, [r7, #0]
    8a96:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8a98:	683b      	ldr	r3, [r7, #0]
    8a9a:	b2da      	uxtb	r2, r3
    8a9c:	79fb      	ldrb	r3, [r7, #7]
    8a9e:	4619      	mov	r1, r3
    8aa0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8aa4:	4b02      	ldr	r3, [pc, #8]	; (8ab0 <_usbd_ep_int_dis+0x24>)
    8aa6:	4798      	blx	r3
}
    8aa8:	bf00      	nop
    8aaa:	3708      	adds	r7, #8
    8aac:	46bd      	mov	sp, r7
    8aae:	bd80      	pop	{r7, pc}
    8ab0:	00008615 	.word	0x00008615

00008ab4 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8ab4:	b580      	push	{r7, lr}
    8ab6:	b082      	sub	sp, #8
    8ab8:	af00      	add	r7, sp, #0
    8aba:	4603      	mov	r3, r0
    8abc:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8abe:	79fb      	ldrb	r3, [r7, #7]
    8ac0:	4619      	mov	r1, r3
    8ac2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ac6:	4b06      	ldr	r3, [pc, #24]	; (8ae0 <_usbd_ep_is_ctrl+0x2c>)
    8ac8:	4798      	blx	r3
    8aca:	4603      	mov	r3, r0
    8acc:	2b11      	cmp	r3, #17
    8ace:	bf0c      	ite	eq
    8ad0:	2301      	moveq	r3, #1
    8ad2:	2300      	movne	r3, #0
    8ad4:	b2db      	uxtb	r3, r3
}
    8ad6:	4618      	mov	r0, r3
    8ad8:	3708      	adds	r7, #8
    8ada:	46bd      	mov	sp, r7
    8adc:	bd80      	pop	{r7, pc}
    8ade:	bf00      	nop
    8ae0:	000086cf 	.word	0x000086cf

00008ae4 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8ae4:	b580      	push	{r7, lr}
    8ae6:	b082      	sub	sp, #8
    8ae8:	af00      	add	r7, sp, #0
    8aea:	4603      	mov	r3, r0
    8aec:	71fb      	strb	r3, [r7, #7]
    8aee:	460b      	mov	r3, r1
    8af0:	71bb      	strb	r3, [r7, #6]
    8af2:	4613      	mov	r3, r2
    8af4:	717b      	strb	r3, [r7, #5]
	if (st) {
    8af6:	797b      	ldrb	r3, [r7, #5]
    8af8:	2b00      	cmp	r3, #0
    8afa:	d00b      	beq.n	8b14 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8afc:	79bb      	ldrb	r3, [r7, #6]
    8afe:	2210      	movs	r2, #16
    8b00:	fa02 f303 	lsl.w	r3, r2, r3
    8b04:	b2da      	uxtb	r2, r3
    8b06:	79fb      	ldrb	r3, [r7, #7]
    8b08:	4619      	mov	r1, r3
    8b0a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b0e:	4b09      	ldr	r3, [pc, #36]	; (8b34 <_usbd_ep_set_stall+0x50>)
    8b10:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8b12:	e00a      	b.n	8b2a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8b14:	79bb      	ldrb	r3, [r7, #6]
    8b16:	2210      	movs	r2, #16
    8b18:	fa02 f303 	lsl.w	r3, r2, r3
    8b1c:	b2da      	uxtb	r2, r3
    8b1e:	79fb      	ldrb	r3, [r7, #7]
    8b20:	4619      	mov	r1, r3
    8b22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b26:	4b04      	ldr	r3, [pc, #16]	; (8b38 <_usbd_ep_set_stall+0x54>)
    8b28:	4798      	blx	r3
}
    8b2a:	bf00      	nop
    8b2c:	3708      	adds	r7, #8
    8b2e:	46bd      	mov	sp, r7
    8b30:	bd80      	pop	{r7, pc}
    8b32:	bf00      	nop
    8b34:	00008541 	.word	0x00008541
    8b38:	00008595 	.word	0x00008595

00008b3c <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8b3c:	b580      	push	{r7, lr}
    8b3e:	b084      	sub	sp, #16
    8b40:	af00      	add	r7, sp, #0
    8b42:	4603      	mov	r3, r0
    8b44:	460a      	mov	r2, r1
    8b46:	71fb      	strb	r3, [r7, #7]
    8b48:	4613      	mov	r3, r2
    8b4a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8b4c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b50:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8b52:	79fb      	ldrb	r3, [r7, #7]
    8b54:	4619      	mov	r1, r3
    8b56:	68f8      	ldr	r0, [r7, #12]
    8b58:	4b08      	ldr	r3, [pc, #32]	; (8b7c <_usbd_ep_is_stalled+0x40>)
    8b5a:	4798      	blx	r3
    8b5c:	4603      	mov	r3, r0
    8b5e:	4619      	mov	r1, r3
    8b60:	79bb      	ldrb	r3, [r7, #6]
    8b62:	2210      	movs	r2, #16
    8b64:	fa02 f303 	lsl.w	r3, r2, r3
    8b68:	400b      	ands	r3, r1
    8b6a:	2b00      	cmp	r3, #0
    8b6c:	bf14      	ite	ne
    8b6e:	2301      	movne	r3, #1
    8b70:	2300      	moveq	r3, #0
    8b72:	b2db      	uxtb	r3, r3
}
    8b74:	4618      	mov	r0, r3
    8b76:	3710      	adds	r7, #16
    8b78:	46bd      	mov	sp, r7
    8b7a:	bd80      	pop	{r7, pc}
    8b7c:	0000856d 	.word	0x0000856d

00008b80 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8b80:	b580      	push	{r7, lr}
    8b82:	b084      	sub	sp, #16
    8b84:	af00      	add	r7, sp, #0
    8b86:	4603      	mov	r3, r0
    8b88:	460a      	mov	r2, r1
    8b8a:	71fb      	strb	r3, [r7, #7]
    8b8c:	4613      	mov	r3, r2
    8b8e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8b90:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b94:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8b96:	79fb      	ldrb	r3, [r7, #7]
    8b98:	4619      	mov	r1, r3
    8b9a:	68f8      	ldr	r0, [r7, #12]
    8b9c:	4b08      	ldr	r3, [pc, #32]	; (8bc0 <_usbd_ep_is_stall_sent+0x40>)
    8b9e:	4798      	blx	r3
    8ba0:	4603      	mov	r3, r0
    8ba2:	4619      	mov	r1, r3
    8ba4:	79bb      	ldrb	r3, [r7, #6]
    8ba6:	2220      	movs	r2, #32
    8ba8:	fa02 f303 	lsl.w	r3, r2, r3
    8bac:	400b      	ands	r3, r1
    8bae:	2b00      	cmp	r3, #0
    8bb0:	bf14      	ite	ne
    8bb2:	2301      	movne	r3, #1
    8bb4:	2300      	moveq	r3, #0
    8bb6:	b2db      	uxtb	r3, r3
}
    8bb8:	4618      	mov	r0, r3
    8bba:	3710      	adds	r7, #16
    8bbc:	46bd      	mov	sp, r7
    8bbe:	bd80      	pop	{r7, pc}
    8bc0:	000084ed 	.word	0x000084ed

00008bc4 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8bc4:	b580      	push	{r7, lr}
    8bc6:	b082      	sub	sp, #8
    8bc8:	af00      	add	r7, sp, #0
    8bca:	4603      	mov	r3, r0
    8bcc:	460a      	mov	r2, r1
    8bce:	71fb      	strb	r3, [r7, #7]
    8bd0:	4613      	mov	r3, r2
    8bd2:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8bd4:	79bb      	ldrb	r3, [r7, #6]
    8bd6:	2220      	movs	r2, #32
    8bd8:	409a      	lsls	r2, r3
    8bda:	79fb      	ldrb	r3, [r7, #7]
    8bdc:	4611      	mov	r1, r2
    8bde:	4618      	mov	r0, r3
    8be0:	4b02      	ldr	r3, [pc, #8]	; (8bec <_usbd_ep_ack_stall+0x28>)
    8be2:	4798      	blx	r3
}
    8be4:	bf00      	nop
    8be6:	3708      	adds	r7, #8
    8be8:	46bd      	mov	sp, r7
    8bea:	bd80      	pop	{r7, pc}
    8bec:	00008a3d 	.word	0x00008a3d

00008bf0 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8bf0:	b580      	push	{r7, lr}
    8bf2:	b082      	sub	sp, #8
    8bf4:	af00      	add	r7, sp, #0
    8bf6:	4603      	mov	r3, r0
    8bf8:	71fb      	strb	r3, [r7, #7]
    8bfa:	460b      	mov	r3, r1
    8bfc:	71bb      	strb	r3, [r7, #6]
    8bfe:	4613      	mov	r3, r2
    8c00:	717b      	strb	r3, [r7, #5]
	if (en) {
    8c02:	797b      	ldrb	r3, [r7, #5]
    8c04:	2b00      	cmp	r3, #0
    8c06:	d008      	beq.n	8c1a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8c08:	79bb      	ldrb	r3, [r7, #6]
    8c0a:	2220      	movs	r2, #32
    8c0c:	409a      	lsls	r2, r3
    8c0e:	79fb      	ldrb	r3, [r7, #7]
    8c10:	4611      	mov	r1, r2
    8c12:	4618      	mov	r0, r3
    8c14:	4b07      	ldr	r3, [pc, #28]	; (8c34 <_usbd_ep_int_stall_en+0x44>)
    8c16:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8c18:	e007      	b.n	8c2a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8c1a:	79bb      	ldrb	r3, [r7, #6]
    8c1c:	2220      	movs	r2, #32
    8c1e:	409a      	lsls	r2, r3
    8c20:	79fb      	ldrb	r3, [r7, #7]
    8c22:	4611      	mov	r1, r2
    8c24:	4618      	mov	r0, r3
    8c26:	4b04      	ldr	r3, [pc, #16]	; (8c38 <_usbd_ep_int_stall_en+0x48>)
    8c28:	4798      	blx	r3
}
    8c2a:	bf00      	nop
    8c2c:	3708      	adds	r7, #8
    8c2e:	46bd      	mov	sp, r7
    8c30:	bd80      	pop	{r7, pc}
    8c32:	bf00      	nop
    8c34:	00008a65 	.word	0x00008a65
    8c38:	00008a8d 	.word	0x00008a8d

00008c3c <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8c3c:	b580      	push	{r7, lr}
    8c3e:	b082      	sub	sp, #8
    8c40:	af00      	add	r7, sp, #0
    8c42:	4603      	mov	r3, r0
    8c44:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8c46:	79fb      	ldrb	r3, [r7, #7]
    8c48:	4619      	mov	r1, r3
    8c4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c4e:	4b03      	ldr	r3, [pc, #12]	; (8c5c <_usbd_ep_stop_setup+0x20>)
    8c50:	4798      	blx	r3
}
    8c52:	bf00      	nop
    8c54:	3708      	adds	r7, #8
    8c56:	46bd      	mov	sp, r7
    8c58:	bd80      	pop	{r7, pc}
    8c5a:	bf00      	nop
    8c5c:	000085c1 	.word	0x000085c1

00008c60 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8c60:	b580      	push	{r7, lr}
    8c62:	b082      	sub	sp, #8
    8c64:	af00      	add	r7, sp, #0
    8c66:	4603      	mov	r3, r0
    8c68:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8c6a:	79fb      	ldrb	r3, [r7, #7]
    8c6c:	2210      	movs	r2, #16
    8c6e:	4619      	mov	r1, r3
    8c70:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c74:	4b05      	ldr	r3, [pc, #20]	; (8c8c <_usbd_ep_is_setup+0x2c>)
    8c76:	4798      	blx	r3
    8c78:	4603      	mov	r3, r0
    8c7a:	2b00      	cmp	r3, #0
    8c7c:	bf14      	ite	ne
    8c7e:	2301      	movne	r3, #1
    8c80:	2300      	moveq	r3, #0
    8c82:	b2db      	uxtb	r3, r3
}
    8c84:	4618      	mov	r0, r3
    8c86:	3708      	adds	r7, #8
    8c88:	46bd      	mov	sp, r7
    8c8a:	bd80      	pop	{r7, pc}
    8c8c:	000084b7 	.word	0x000084b7

00008c90 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8c90:	b580      	push	{r7, lr}
    8c92:	b082      	sub	sp, #8
    8c94:	af00      	add	r7, sp, #0
    8c96:	4603      	mov	r3, r0
    8c98:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8c9a:	79fb      	ldrb	r3, [r7, #7]
    8c9c:	2110      	movs	r1, #16
    8c9e:	4618      	mov	r0, r3
    8ca0:	4b02      	ldr	r3, [pc, #8]	; (8cac <_usbd_ep_ack_setup+0x1c>)
    8ca2:	4798      	blx	r3
}
    8ca4:	bf00      	nop
    8ca6:	3708      	adds	r7, #8
    8ca8:	46bd      	mov	sp, r7
    8caa:	bd80      	pop	{r7, pc}
    8cac:	00008a3d 	.word	0x00008a3d

00008cb0 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8cb0:	b580      	push	{r7, lr}
    8cb2:	b082      	sub	sp, #8
    8cb4:	af00      	add	r7, sp, #0
    8cb6:	4603      	mov	r3, r0
    8cb8:	71fb      	strb	r3, [r7, #7]
    8cba:	460b      	mov	r3, r1
    8cbc:	71bb      	strb	r3, [r7, #6]
    8cbe:	4613      	mov	r3, r2
    8cc0:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8cc2:	797b      	ldrb	r3, [r7, #5]
    8cc4:	2b00      	cmp	r3, #0
    8cc6:	d00b      	beq.n	8ce0 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8cc8:	79bb      	ldrb	r3, [r7, #6]
    8cca:	2201      	movs	r2, #1
    8ccc:	fa02 f303 	lsl.w	r3, r2, r3
    8cd0:	b2da      	uxtb	r2, r3
    8cd2:	79fb      	ldrb	r3, [r7, #7]
    8cd4:	4619      	mov	r1, r3
    8cd6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8cda:	4b09      	ldr	r3, [pc, #36]	; (8d00 <_usbd_ep_set_toggle+0x50>)
    8cdc:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8cde:	e00a      	b.n	8cf6 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8ce0:	79bb      	ldrb	r3, [r7, #6]
    8ce2:	2201      	movs	r2, #1
    8ce4:	fa02 f303 	lsl.w	r3, r2, r3
    8ce8:	b2da      	uxtb	r2, r3
    8cea:	79fb      	ldrb	r3, [r7, #7]
    8cec:	4619      	mov	r1, r3
    8cee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8cf2:	4b04      	ldr	r3, [pc, #16]	; (8d04 <_usbd_ep_set_toggle+0x54>)
    8cf4:	4798      	blx	r3
}
    8cf6:	bf00      	nop
    8cf8:	3708      	adds	r7, #8
    8cfa:	46bd      	mov	sp, r7
    8cfc:	bd80      	pop	{r7, pc}
    8cfe:	bf00      	nop
    8d00:	00008541 	.word	0x00008541
    8d04:	00008595 	.word	0x00008595

00008d08 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8d08:	b580      	push	{r7, lr}
    8d0a:	b082      	sub	sp, #8
    8d0c:	af00      	add	r7, sp, #0
    8d0e:	4603      	mov	r3, r0
    8d10:	460a      	mov	r2, r1
    8d12:	71fb      	strb	r3, [r7, #7]
    8d14:	4613      	mov	r3, r2
    8d16:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8d18:	79bb      	ldrb	r3, [r7, #6]
    8d1a:	2201      	movs	r2, #1
    8d1c:	409a      	lsls	r2, r3
    8d1e:	79fb      	ldrb	r3, [r7, #7]
    8d20:	4611      	mov	r1, r2
    8d22:	4618      	mov	r0, r3
    8d24:	4b02      	ldr	r3, [pc, #8]	; (8d30 <_usbd_ep_ack_io_cpt+0x28>)
    8d26:	4798      	blx	r3
}
    8d28:	bf00      	nop
    8d2a:	3708      	adds	r7, #8
    8d2c:	46bd      	mov	sp, r7
    8d2e:	bd80      	pop	{r7, pc}
    8d30:	00008a3d 	.word	0x00008a3d

00008d34 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8d34:	b480      	push	{r7}
    8d36:	b085      	sub	sp, #20
    8d38:	af00      	add	r7, sp, #0
    8d3a:	4603      	mov	r3, r0
    8d3c:	603a      	str	r2, [r7, #0]
    8d3e:	71fb      	strb	r3, [r7, #7]
    8d40:	460b      	mov	r3, r1
    8d42:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d44:	79fa      	ldrb	r2, [r7, #7]
    8d46:	79bb      	ldrb	r3, [r7, #6]
    8d48:	0052      	lsls	r2, r2, #1
    8d4a:	4413      	add	r3, r2
    8d4c:	011b      	lsls	r3, r3, #4
    8d4e:	4a06      	ldr	r2, [pc, #24]	; (8d68 <_usbd_ep_set_buf+0x34>)
    8d50:	4413      	add	r3, r2
    8d52:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8d54:	68fb      	ldr	r3, [r7, #12]
    8d56:	683a      	ldr	r2, [r7, #0]
    8d58:	601a      	str	r2, [r3, #0]
}
    8d5a:	bf00      	nop
    8d5c:	3714      	adds	r7, #20
    8d5e:	46bd      	mov	sp, r7
    8d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d64:	4770      	bx	lr
    8d66:	bf00      	nop
    8d68:	20000a34 	.word	0x20000a34

00008d6c <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8d6c:	b480      	push	{r7}
    8d6e:	b085      	sub	sp, #20
    8d70:	af00      	add	r7, sp, #0
    8d72:	4603      	mov	r3, r0
    8d74:	71fb      	strb	r3, [r7, #7]
    8d76:	460b      	mov	r3, r1
    8d78:	71bb      	strb	r3, [r7, #6]
    8d7a:	4613      	mov	r3, r2
    8d7c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8d7e:	79fa      	ldrb	r2, [r7, #7]
    8d80:	79bb      	ldrb	r3, [r7, #6]
    8d82:	0052      	lsls	r2, r2, #1
    8d84:	4413      	add	r3, r2
    8d86:	011b      	lsls	r3, r3, #4
    8d88:	4a08      	ldr	r2, [pc, #32]	; (8dac <_usbd_ep_set_in_count+0x40>)
    8d8a:	4413      	add	r3, r2
    8d8c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8d8e:	88bb      	ldrh	r3, [r7, #4]
    8d90:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8d94:	b299      	uxth	r1, r3
    8d96:	68fa      	ldr	r2, [r7, #12]
    8d98:	6853      	ldr	r3, [r2, #4]
    8d9a:	f361 339b 	bfi	r3, r1, #14, #14
    8d9e:	6053      	str	r3, [r2, #4]
}
    8da0:	bf00      	nop
    8da2:	3714      	adds	r7, #20
    8da4:	46bd      	mov	sp, r7
    8da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8daa:	4770      	bx	lr
    8dac:	20000a34 	.word	0x20000a34

00008db0 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8db0:	b480      	push	{r7}
    8db2:	b085      	sub	sp, #20
    8db4:	af00      	add	r7, sp, #0
    8db6:	4603      	mov	r3, r0
    8db8:	71fb      	strb	r3, [r7, #7]
    8dba:	460b      	mov	r3, r1
    8dbc:	71bb      	strb	r3, [r7, #6]
    8dbe:	4613      	mov	r3, r2
    8dc0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8dc2:	79fa      	ldrb	r2, [r7, #7]
    8dc4:	79bb      	ldrb	r3, [r7, #6]
    8dc6:	0052      	lsls	r2, r2, #1
    8dc8:	4413      	add	r3, r2
    8dca:	011b      	lsls	r3, r3, #4
    8dcc:	4a08      	ldr	r2, [pc, #32]	; (8df0 <_usbd_ep_set_in_size+0x40>)
    8dce:	4413      	add	r3, r2
    8dd0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8dd2:	88bb      	ldrh	r3, [r7, #4]
    8dd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8dd8:	b299      	uxth	r1, r3
    8dda:	68fa      	ldr	r2, [r7, #12]
    8ddc:	6853      	ldr	r3, [r2, #4]
    8dde:	f361 030d 	bfi	r3, r1, #0, #14
    8de2:	6053      	str	r3, [r2, #4]
}
    8de4:	bf00      	nop
    8de6:	3714      	adds	r7, #20
    8de8:	46bd      	mov	sp, r7
    8dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dee:	4770      	bx	lr
    8df0:	20000a34 	.word	0x20000a34

00008df4 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8df4:	b480      	push	{r7}
    8df6:	b085      	sub	sp, #20
    8df8:	af00      	add	r7, sp, #0
    8dfa:	4603      	mov	r3, r0
    8dfc:	71fb      	strb	r3, [r7, #7]
    8dfe:	460b      	mov	r3, r1
    8e00:	71bb      	strb	r3, [r7, #6]
    8e02:	4613      	mov	r3, r2
    8e04:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e06:	79fa      	ldrb	r2, [r7, #7]
    8e08:	79bb      	ldrb	r3, [r7, #6]
    8e0a:	0052      	lsls	r2, r2, #1
    8e0c:	4413      	add	r3, r2
    8e0e:	011b      	lsls	r3, r3, #4
    8e10:	4a08      	ldr	r2, [pc, #32]	; (8e34 <_usbd_ep_set_out_count+0x40>)
    8e12:	4413      	add	r3, r2
    8e14:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8e16:	88bb      	ldrh	r3, [r7, #4]
    8e18:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e1c:	b299      	uxth	r1, r3
    8e1e:	68fa      	ldr	r2, [r7, #12]
    8e20:	6853      	ldr	r3, [r2, #4]
    8e22:	f361 030d 	bfi	r3, r1, #0, #14
    8e26:	6053      	str	r3, [r2, #4]
}
    8e28:	bf00      	nop
    8e2a:	3714      	adds	r7, #20
    8e2c:	46bd      	mov	sp, r7
    8e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e32:	4770      	bx	lr
    8e34:	20000a34 	.word	0x20000a34

00008e38 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8e38:	b480      	push	{r7}
    8e3a:	b085      	sub	sp, #20
    8e3c:	af00      	add	r7, sp, #0
    8e3e:	4603      	mov	r3, r0
    8e40:	71fb      	strb	r3, [r7, #7]
    8e42:	460b      	mov	r3, r1
    8e44:	71bb      	strb	r3, [r7, #6]
    8e46:	4613      	mov	r3, r2
    8e48:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e4a:	79fa      	ldrb	r2, [r7, #7]
    8e4c:	79bb      	ldrb	r3, [r7, #6]
    8e4e:	0052      	lsls	r2, r2, #1
    8e50:	4413      	add	r3, r2
    8e52:	011b      	lsls	r3, r3, #4
    8e54:	4a08      	ldr	r2, [pc, #32]	; (8e78 <_usbd_ep_set_out_size+0x40>)
    8e56:	4413      	add	r3, r2
    8e58:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8e5a:	88bb      	ldrh	r3, [r7, #4]
    8e5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e60:	b299      	uxth	r1, r3
    8e62:	68fa      	ldr	r2, [r7, #12]
    8e64:	6853      	ldr	r3, [r2, #4]
    8e66:	f361 339b 	bfi	r3, r1, #14, #14
    8e6a:	6053      	str	r3, [r2, #4]
}
    8e6c:	bf00      	nop
    8e6e:	3714      	adds	r7, #20
    8e70:	46bd      	mov	sp, r7
    8e72:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e76:	4770      	bx	lr
    8e78:	20000a34 	.word	0x20000a34

00008e7c <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8e7c:	b580      	push	{r7, lr}
    8e7e:	b084      	sub	sp, #16
    8e80:	af00      	add	r7, sp, #0
    8e82:	60ba      	str	r2, [r7, #8]
    8e84:	607b      	str	r3, [r7, #4]
    8e86:	4603      	mov	r3, r0
    8e88:	73fb      	strb	r3, [r7, #15]
    8e8a:	460b      	mov	r3, r1
    8e8c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8e8e:	68bb      	ldr	r3, [r7, #8]
    8e90:	b29a      	uxth	r2, r3
    8e92:	7bb9      	ldrb	r1, [r7, #14]
    8e94:	7bfb      	ldrb	r3, [r7, #15]
    8e96:	4618      	mov	r0, r3
    8e98:	4b06      	ldr	r3, [pc, #24]	; (8eb4 <_usbd_ep_set_in_trans+0x38>)
    8e9a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8e9c:	687b      	ldr	r3, [r7, #4]
    8e9e:	b29a      	uxth	r2, r3
    8ea0:	7bb9      	ldrb	r1, [r7, #14]
    8ea2:	7bfb      	ldrb	r3, [r7, #15]
    8ea4:	4618      	mov	r0, r3
    8ea6:	4b04      	ldr	r3, [pc, #16]	; (8eb8 <_usbd_ep_set_in_trans+0x3c>)
    8ea8:	4798      	blx	r3
}
    8eaa:	bf00      	nop
    8eac:	3710      	adds	r7, #16
    8eae:	46bd      	mov	sp, r7
    8eb0:	bd80      	pop	{r7, pc}
    8eb2:	bf00      	nop
    8eb4:	00008db1 	.word	0x00008db1
    8eb8:	00008d6d 	.word	0x00008d6d

00008ebc <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8ebc:	b580      	push	{r7, lr}
    8ebe:	b084      	sub	sp, #16
    8ec0:	af00      	add	r7, sp, #0
    8ec2:	60ba      	str	r2, [r7, #8]
    8ec4:	607b      	str	r3, [r7, #4]
    8ec6:	4603      	mov	r3, r0
    8ec8:	73fb      	strb	r3, [r7, #15]
    8eca:	460b      	mov	r3, r1
    8ecc:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8ece:	68bb      	ldr	r3, [r7, #8]
    8ed0:	b29a      	uxth	r2, r3
    8ed2:	7bb9      	ldrb	r1, [r7, #14]
    8ed4:	7bfb      	ldrb	r3, [r7, #15]
    8ed6:	4618      	mov	r0, r3
    8ed8:	4b06      	ldr	r3, [pc, #24]	; (8ef4 <_usbd_ep_set_out_trans+0x38>)
    8eda:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8edc:	687b      	ldr	r3, [r7, #4]
    8ede:	b29a      	uxth	r2, r3
    8ee0:	7bb9      	ldrb	r1, [r7, #14]
    8ee2:	7bfb      	ldrb	r3, [r7, #15]
    8ee4:	4618      	mov	r0, r3
    8ee6:	4b04      	ldr	r3, [pc, #16]	; (8ef8 <_usbd_ep_set_out_trans+0x3c>)
    8ee8:	4798      	blx	r3
}
    8eea:	bf00      	nop
    8eec:	3710      	adds	r7, #16
    8eee:	46bd      	mov	sp, r7
    8ef0:	bd80      	pop	{r7, pc}
    8ef2:	bf00      	nop
    8ef4:	00008e39 	.word	0x00008e39
    8ef8:	00008df5 	.word	0x00008df5

00008efc <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8efc:	b480      	push	{r7}
    8efe:	b085      	sub	sp, #20
    8f00:	af00      	add	r7, sp, #0
    8f02:	4603      	mov	r3, r0
    8f04:	460a      	mov	r2, r1
    8f06:	71fb      	strb	r3, [r7, #7]
    8f08:	4613      	mov	r3, r2
    8f0a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8f0c:	79fa      	ldrb	r2, [r7, #7]
    8f0e:	79bb      	ldrb	r3, [r7, #6]
    8f10:	0052      	lsls	r2, r2, #1
    8f12:	4413      	add	r3, r2
    8f14:	011b      	lsls	r3, r3, #4
    8f16:	4a06      	ldr	r2, [pc, #24]	; (8f30 <_usbd_ep_clear_bank_status+0x34>)
    8f18:	4413      	add	r3, r2
    8f1a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8f1c:	68fb      	ldr	r3, [r7, #12]
    8f1e:	2200      	movs	r2, #0
    8f20:	729a      	strb	r2, [r3, #10]
}
    8f22:	bf00      	nop
    8f24:	3714      	adds	r7, #20
    8f26:	46bd      	mov	sp, r7
    8f28:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f2c:	4770      	bx	lr
    8f2e:	bf00      	nop
    8f30:	20000a34 	.word	0x20000a34

00008f34 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8f34:	b580      	push	{r7, lr}
    8f36:	b082      	sub	sp, #8
    8f38:	af00      	add	r7, sp, #0
    8f3a:	4603      	mov	r3, r0
    8f3c:	71fb      	strb	r3, [r7, #7]
    8f3e:	460b      	mov	r3, r1
    8f40:	71bb      	strb	r3, [r7, #6]
    8f42:	4613      	mov	r3, r2
    8f44:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8f46:	797b      	ldrb	r3, [r7, #5]
    8f48:	2b00      	cmp	r3, #0
    8f4a:	d00b      	beq.n	8f64 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8f4c:	79bb      	ldrb	r3, [r7, #6]
    8f4e:	2240      	movs	r2, #64	; 0x40
    8f50:	fa02 f303 	lsl.w	r3, r2, r3
    8f54:	b2da      	uxtb	r2, r3
    8f56:	79fb      	ldrb	r3, [r7, #7]
    8f58:	4619      	mov	r1, r3
    8f5a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f5e:	4b09      	ldr	r3, [pc, #36]	; (8f84 <_usbd_ep_set_in_rdy+0x50>)
    8f60:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8f62:	e00a      	b.n	8f7a <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8f64:	79bb      	ldrb	r3, [r7, #6]
    8f66:	2240      	movs	r2, #64	; 0x40
    8f68:	fa02 f303 	lsl.w	r3, r2, r3
    8f6c:	b2da      	uxtb	r2, r3
    8f6e:	79fb      	ldrb	r3, [r7, #7]
    8f70:	4619      	mov	r1, r3
    8f72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f76:	4b04      	ldr	r3, [pc, #16]	; (8f88 <_usbd_ep_set_in_rdy+0x54>)
    8f78:	4798      	blx	r3
}
    8f7a:	bf00      	nop
    8f7c:	3708      	adds	r7, #8
    8f7e:	46bd      	mov	sp, r7
    8f80:	bd80      	pop	{r7, pc}
    8f82:	bf00      	nop
    8f84:	00008541 	.word	0x00008541
    8f88:	00008595 	.word	0x00008595

00008f8c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8f8c:	b580      	push	{r7, lr}
    8f8e:	b082      	sub	sp, #8
    8f90:	af00      	add	r7, sp, #0
    8f92:	4603      	mov	r3, r0
    8f94:	71fb      	strb	r3, [r7, #7]
    8f96:	460b      	mov	r3, r1
    8f98:	71bb      	strb	r3, [r7, #6]
    8f9a:	4613      	mov	r3, r2
    8f9c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8f9e:	797b      	ldrb	r3, [r7, #5]
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d00b      	beq.n	8fbc <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8fa4:	79bb      	ldrb	r3, [r7, #6]
    8fa6:	2240      	movs	r2, #64	; 0x40
    8fa8:	fa02 f303 	lsl.w	r3, r2, r3
    8fac:	b2da      	uxtb	r2, r3
    8fae:	79fb      	ldrb	r3, [r7, #7]
    8fb0:	4619      	mov	r1, r3
    8fb2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fb6:	4b09      	ldr	r3, [pc, #36]	; (8fdc <_usbd_ep_set_out_rdy+0x50>)
    8fb8:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8fba:	e00a      	b.n	8fd2 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8fbc:	79bb      	ldrb	r3, [r7, #6]
    8fbe:	2240      	movs	r2, #64	; 0x40
    8fc0:	fa02 f303 	lsl.w	r3, r2, r3
    8fc4:	b2da      	uxtb	r2, r3
    8fc6:	79fb      	ldrb	r3, [r7, #7]
    8fc8:	4619      	mov	r1, r3
    8fca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fce:	4b04      	ldr	r3, [pc, #16]	; (8fe0 <_usbd_ep_set_out_rdy+0x54>)
    8fd0:	4798      	blx	r3
}
    8fd2:	bf00      	nop
    8fd4:	3708      	adds	r7, #8
    8fd6:	46bd      	mov	sp, r7
    8fd8:	bd80      	pop	{r7, pc}
    8fda:	bf00      	nop
    8fdc:	00008595 	.word	0x00008595
    8fe0:	00008541 	.word	0x00008541

00008fe4 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8fe4:	b480      	push	{r7}
    8fe6:	b083      	sub	sp, #12
    8fe8:	af00      	add	r7, sp, #0
    8fea:	4603      	mov	r3, r0
    8fec:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8fee:	88fb      	ldrh	r3, [r7, #6]
    8ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8ff4:	d820      	bhi.n	9038 <_usbd_ep_pcksize_size+0x54>
    8ff6:	88fb      	ldrh	r3, [r7, #6]
    8ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8ffc:	d81a      	bhi.n	9034 <_usbd_ep_pcksize_size+0x50>
    8ffe:	88fb      	ldrh	r3, [r7, #6]
    9000:	2b80      	cmp	r3, #128	; 0x80
    9002:	d815      	bhi.n	9030 <_usbd_ep_pcksize_size+0x4c>
    9004:	88fb      	ldrh	r3, [r7, #6]
    9006:	2b40      	cmp	r3, #64	; 0x40
    9008:	d810      	bhi.n	902c <_usbd_ep_pcksize_size+0x48>
    900a:	88fb      	ldrh	r3, [r7, #6]
    900c:	2b20      	cmp	r3, #32
    900e:	d80b      	bhi.n	9028 <_usbd_ep_pcksize_size+0x44>
    9010:	88fb      	ldrh	r3, [r7, #6]
    9012:	2b10      	cmp	r3, #16
    9014:	d806      	bhi.n	9024 <_usbd_ep_pcksize_size+0x40>
    9016:	88fb      	ldrh	r3, [r7, #6]
    9018:	2b08      	cmp	r3, #8
    901a:	bf8c      	ite	hi
    901c:	2301      	movhi	r3, #1
    901e:	2300      	movls	r3, #0
    9020:	b2db      	uxtb	r3, r3
    9022:	e00a      	b.n	903a <_usbd_ep_pcksize_size+0x56>
    9024:	2302      	movs	r3, #2
    9026:	e008      	b.n	903a <_usbd_ep_pcksize_size+0x56>
    9028:	2303      	movs	r3, #3
    902a:	e006      	b.n	903a <_usbd_ep_pcksize_size+0x56>
    902c:	2304      	movs	r3, #4
    902e:	e004      	b.n	903a <_usbd_ep_pcksize_size+0x56>
    9030:	2305      	movs	r3, #5
    9032:	e002      	b.n	903a <_usbd_ep_pcksize_size+0x56>
    9034:	2306      	movs	r3, #6
    9036:	e000      	b.n	903a <_usbd_ep_pcksize_size+0x56>
    9038:	2307      	movs	r3, #7
}
    903a:	4618      	mov	r0, r3
    903c:	370c      	adds	r7, #12
    903e:	46bd      	mov	sp, r7
    9040:	f85d 7b04 	ldr.w	r7, [sp], #4
    9044:	4770      	bx	lr
	...

00009048 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9048:	b480      	push	{r7}
    904a:	b085      	sub	sp, #20
    904c:	af00      	add	r7, sp, #0
    904e:	4603      	mov	r3, r0
    9050:	460a      	mov	r2, r1
    9052:	71fb      	strb	r3, [r7, #7]
    9054:	4613      	mov	r3, r2
    9056:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9058:	79fb      	ldrb	r3, [r7, #7]
    905a:	2b00      	cmp	r3, #0
    905c:	d008      	beq.n	9070 <_usb_d_dev_ept+0x28>
    905e:	79bb      	ldrb	r3, [r7, #6]
    9060:	2b00      	cmp	r3, #0
    9062:	d003      	beq.n	906c <_usb_d_dev_ept+0x24>
    9064:	79fb      	ldrb	r3, [r7, #7]
    9066:	3304      	adds	r3, #4
    9068:	b2db      	uxtb	r3, r3
    906a:	e002      	b.n	9072 <_usb_d_dev_ept+0x2a>
    906c:	79fb      	ldrb	r3, [r7, #7]
    906e:	e000      	b.n	9072 <_usb_d_dev_ept+0x2a>
    9070:	2300      	movs	r3, #0
    9072:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9074:	7bfa      	ldrb	r2, [r7, #15]
    9076:	4613      	mov	r3, r2
    9078:	009b      	lsls	r3, r3, #2
    907a:	4413      	add	r3, r2
    907c:	009b      	lsls	r3, r3, #2
    907e:	3310      	adds	r3, #16
    9080:	4a04      	ldr	r2, [pc, #16]	; (9094 <_usb_d_dev_ept+0x4c>)
    9082:	4413      	add	r3, r2
    9084:	3304      	adds	r3, #4
}
    9086:	4618      	mov	r0, r3
    9088:	3714      	adds	r7, #20
    908a:	46bd      	mov	sp, r7
    908c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9090:	4770      	bx	lr
    9092:	bf00      	nop
    9094:	2000096c 	.word	0x2000096c

00009098 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9098:	b580      	push	{r7, lr}
    909a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    909c:	2104      	movs	r1, #4
    909e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90a2:	4b03      	ldr	r3, [pc, #12]	; (90b0 <_usb_d_dev_sof+0x18>)
    90a4:	4798      	blx	r3
	dev_inst.callbacks.sof();
    90a6:	4b03      	ldr	r3, [pc, #12]	; (90b4 <_usb_d_dev_sof+0x1c>)
    90a8:	681b      	ldr	r3, [r3, #0]
    90aa:	4798      	blx	r3
}
    90ac:	bf00      	nop
    90ae:	bd80      	pop	{r7, pc}
    90b0:	0000870f 	.word	0x0000870f
    90b4:	2000096c 	.word	0x2000096c

000090b8 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    90b8:	b580      	push	{r7, lr}
    90ba:	b084      	sub	sp, #16
    90bc:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    90be:	2300      	movs	r3, #0
    90c0:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    90c2:	f240 2101 	movw	r1, #513	; 0x201
    90c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90ca:	4b1a      	ldr	r3, [pc, #104]	; (9134 <_usb_d_dev_lpmsusp+0x7c>)
    90cc:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    90ce:	f240 2101 	movw	r1, #513	; 0x201
    90d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90d6:	4b18      	ldr	r3, [pc, #96]	; (9138 <_usb_d_dev_lpmsusp+0x80>)
    90d8:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    90da:	2170      	movs	r1, #112	; 0x70
    90dc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90e0:	4b16      	ldr	r3, [pc, #88]	; (913c <_usb_d_dev_lpmsusp+0x84>)
    90e2:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    90e4:	2300      	movs	r3, #0
    90e6:	73fb      	strb	r3, [r7, #15]
    90e8:	e018      	b.n	911c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    90ea:	7bfb      	ldrb	r3, [r7, #15]
    90ec:	015b      	lsls	r3, r3, #5
    90ee:	4a14      	ldr	r2, [pc, #80]	; (9140 <_usb_d_dev_lpmsusp+0x88>)
    90f0:	4413      	add	r3, r2
    90f2:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    90f4:	687b      	ldr	r3, [r7, #4]
    90f6:	891b      	ldrh	r3, [r3, #8]
    90f8:	f3c3 0303 	ubfx	r3, r3, #0, #4
    90fc:	b2db      	uxtb	r3, r3
    90fe:	2b03      	cmp	r3, #3
    9100:	d109      	bne.n	9116 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9102:	687b      	ldr	r3, [r7, #4]
    9104:	891b      	ldrh	r3, [r3, #8]
    9106:	f3c3 130a 	ubfx	r3, r3, #4, #11
    910a:	b29b      	uxth	r3, r3
    910c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    910e:	687b      	ldr	r3, [r7, #4]
    9110:	2200      	movs	r2, #0
    9112:	811a      	strh	r2, [r3, #8]
			break;
    9114:	e005      	b.n	9122 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9116:	7bfb      	ldrb	r3, [r7, #15]
    9118:	3301      	adds	r3, #1
    911a:	73fb      	strb	r3, [r7, #15]
    911c:	7bfb      	ldrb	r3, [r7, #15]
    911e:	2b03      	cmp	r3, #3
    9120:	d9e3      	bls.n	90ea <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9122:	4b08      	ldr	r3, [pc, #32]	; (9144 <_usb_d_dev_lpmsusp+0x8c>)
    9124:	685b      	ldr	r3, [r3, #4]
    9126:	68b9      	ldr	r1, [r7, #8]
    9128:	2003      	movs	r0, #3
    912a:	4798      	blx	r3
}
    912c:	bf00      	nop
    912e:	3710      	adds	r7, #16
    9130:	46bd      	mov	sp, r7
    9132:	bd80      	pop	{r7, pc}
    9134:	0000870f 	.word	0x0000870f
    9138:	00008765 	.word	0x00008765
    913c:	0000872d 	.word	0x0000872d
    9140:	20000a34 	.word	0x20000a34
    9144:	2000096c 	.word	0x2000096c

00009148 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9148:	b580      	push	{r7, lr}
    914a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    914c:	2180      	movs	r1, #128	; 0x80
    914e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9152:	4b04      	ldr	r3, [pc, #16]	; (9164 <_usb_d_dev_ramerr+0x1c>)
    9154:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9156:	4b04      	ldr	r3, [pc, #16]	; (9168 <_usb_d_dev_ramerr+0x20>)
    9158:	685b      	ldr	r3, [r3, #4]
    915a:	2100      	movs	r1, #0
    915c:	2005      	movs	r0, #5
    915e:	4798      	blx	r3
}
    9160:	bf00      	nop
    9162:	bd80      	pop	{r7, pc}
    9164:	0000870f 	.word	0x0000870f
    9168:	2000096c 	.word	0x2000096c

0000916c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    916c:	b580      	push	{r7, lr}
    916e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9170:	2170      	movs	r1, #112	; 0x70
    9172:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9176:	4b0b      	ldr	r3, [pc, #44]	; (91a4 <_usb_d_dev_wakeup+0x38>)
    9178:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    917a:	2170      	movs	r1, #112	; 0x70
    917c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9180:	4b09      	ldr	r3, [pc, #36]	; (91a8 <_usb_d_dev_wakeup+0x3c>)
    9182:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9184:	f240 2101 	movw	r1, #513	; 0x201
    9188:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    918c:	4b07      	ldr	r3, [pc, #28]	; (91ac <_usb_d_dev_wakeup+0x40>)
    918e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9190:	2000      	movs	r0, #0
    9192:	4b07      	ldr	r3, [pc, #28]	; (91b0 <_usb_d_dev_wakeup+0x44>)
    9194:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9196:	4b07      	ldr	r3, [pc, #28]	; (91b4 <_usb_d_dev_wakeup+0x48>)
    9198:	685b      	ldr	r3, [r3, #4]
    919a:	2100      	movs	r1, #0
    919c:	2002      	movs	r0, #2
    919e:	4798      	blx	r3
}
    91a0:	bf00      	nop
    91a2:	bd80      	pop	{r7, pc}
    91a4:	0000870f 	.word	0x0000870f
    91a8:	00008765 	.word	0x00008765
    91ac:	0000872d 	.word	0x0000872d
    91b0:	00008a0d 	.word	0x00008a0d
    91b4:	2000096c 	.word	0x2000096c

000091b8 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    91b8:	b580      	push	{r7, lr}
    91ba:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    91bc:	2200      	movs	r2, #0
    91be:	2100      	movs	r1, #0
    91c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91c4:	4b0d      	ldr	r3, [pc, #52]	; (91fc <_usb_d_dev_reset+0x44>)
    91c6:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    91c8:	2108      	movs	r1, #8
    91ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91ce:	4b0c      	ldr	r3, [pc, #48]	; (9200 <_usb_d_dev_reset+0x48>)
    91d0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    91d2:	2170      	movs	r1, #112	; 0x70
    91d4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91d8:	4b0a      	ldr	r3, [pc, #40]	; (9204 <_usb_d_dev_reset+0x4c>)
    91da:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    91dc:	f240 2101 	movw	r1, #513	; 0x201
    91e0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91e4:	4b08      	ldr	r3, [pc, #32]	; (9208 <_usb_d_dev_reset+0x50>)
    91e6:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    91e8:	4b08      	ldr	r3, [pc, #32]	; (920c <_usb_d_dev_reset+0x54>)
    91ea:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    91ec:	4b08      	ldr	r3, [pc, #32]	; (9210 <_usb_d_dev_reset+0x58>)
    91ee:	685b      	ldr	r3, [r3, #4]
    91f0:	2100      	movs	r1, #0
    91f2:	2001      	movs	r0, #1
    91f4:	4798      	blx	r3
}
    91f6:	bf00      	nop
    91f8:	bd80      	pop	{r7, pc}
    91fa:	bf00      	nop
    91fc:	000086a5 	.word	0x000086a5
    9200:	0000870f 	.word	0x0000870f
    9204:	00008765 	.word	0x00008765
    9208:	0000872d 	.word	0x0000872d
    920c:	00009d75 	.word	0x00009d75
    9210:	2000096c 	.word	0x2000096c

00009214 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9214:	b580      	push	{r7, lr}
    9216:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9218:	f240 2101 	movw	r1, #513	; 0x201
    921c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9220:	4b09      	ldr	r3, [pc, #36]	; (9248 <_usb_d_dev_suspend+0x34>)
    9222:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9224:	f240 2101 	movw	r1, #513	; 0x201
    9228:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    922c:	4b07      	ldr	r3, [pc, #28]	; (924c <_usb_d_dev_suspend+0x38>)
    922e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9230:	2170      	movs	r1, #112	; 0x70
    9232:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9236:	4b06      	ldr	r3, [pc, #24]	; (9250 <_usb_d_dev_suspend+0x3c>)
    9238:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    923a:	4b06      	ldr	r3, [pc, #24]	; (9254 <_usb_d_dev_suspend+0x40>)
    923c:	685b      	ldr	r3, [r3, #4]
    923e:	2100      	movs	r1, #0
    9240:	2004      	movs	r0, #4
    9242:	4798      	blx	r3
}
    9244:	bf00      	nop
    9246:	bd80      	pop	{r7, pc}
    9248:	0000870f 	.word	0x0000870f
    924c:	00008765 	.word	0x00008765
    9250:	0000872d 	.word	0x0000872d
    9254:	2000096c 	.word	0x2000096c

00009258 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9258:	b580      	push	{r7, lr}
    925a:	b082      	sub	sp, #8
    925c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    925e:	2301      	movs	r3, #1
    9260:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9262:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9266:	4b22      	ldr	r3, [pc, #136]	; (92f0 <_usb_d_dev_handle_nep+0x98>)
    9268:	4798      	blx	r3
    926a:	4603      	mov	r3, r0
    926c:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    926e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9272:	4b20      	ldr	r3, [pc, #128]	; (92f4 <_usb_d_dev_handle_nep+0x9c>)
    9274:	4798      	blx	r3
    9276:	4603      	mov	r3, r0
    9278:	461a      	mov	r2, r3
    927a:	88bb      	ldrh	r3, [r7, #4]
    927c:	4013      	ands	r3, r2
    927e:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9280:	88bb      	ldrh	r3, [r7, #4]
    9282:	f003 0304 	and.w	r3, r3, #4
    9286:	2b00      	cmp	r3, #0
    9288:	d003      	beq.n	9292 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    928a:	4b1b      	ldr	r3, [pc, #108]	; (92f8 <_usb_d_dev_handle_nep+0xa0>)
    928c:	4798      	blx	r3
		return true;
    928e:	2301      	movs	r3, #1
    9290:	e02a      	b.n	92e8 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9292:	88bb      	ldrh	r3, [r7, #4]
    9294:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9298:	2b00      	cmp	r3, #0
    929a:	d002      	beq.n	92a2 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    929c:	4b17      	ldr	r3, [pc, #92]	; (92fc <_usb_d_dev_handle_nep+0xa4>)
    929e:	4798      	blx	r3
    92a0:	e021      	b.n	92e6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    92a2:	88bb      	ldrh	r3, [r7, #4]
    92a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    92a8:	2b00      	cmp	r3, #0
    92aa:	d002      	beq.n	92b2 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    92ac:	4b14      	ldr	r3, [pc, #80]	; (9300 <_usb_d_dev_handle_nep+0xa8>)
    92ae:	4798      	blx	r3
    92b0:	e019      	b.n	92e6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    92b2:	88bb      	ldrh	r3, [r7, #4]
    92b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    92b8:	2b00      	cmp	r3, #0
    92ba:	d002      	beq.n	92c2 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    92bc:	4b11      	ldr	r3, [pc, #68]	; (9304 <_usb_d_dev_handle_nep+0xac>)
    92be:	4798      	blx	r3
    92c0:	e011      	b.n	92e6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    92c2:	88bb      	ldrh	r3, [r7, #4]
    92c4:	f003 0308 	and.w	r3, r3, #8
    92c8:	2b00      	cmp	r3, #0
    92ca:	d002      	beq.n	92d2 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    92cc:	4b0e      	ldr	r3, [pc, #56]	; (9308 <_usb_d_dev_handle_nep+0xb0>)
    92ce:	4798      	blx	r3
    92d0:	e009      	b.n	92e6 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    92d2:	88bb      	ldrh	r3, [r7, #4]
    92d4:	f003 0301 	and.w	r3, r3, #1
    92d8:	2b00      	cmp	r3, #0
    92da:	d002      	beq.n	92e2 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    92dc:	4b0b      	ldr	r3, [pc, #44]	; (930c <_usb_d_dev_handle_nep+0xb4>)
    92de:	4798      	blx	r3
    92e0:	e001      	b.n	92e6 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    92e2:	2300      	movs	r3, #0
    92e4:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    92e6:	79fb      	ldrb	r3, [r7, #7]
}
    92e8:	4618      	mov	r0, r3
    92ea:	3708      	adds	r7, #8
    92ec:	46bd      	mov	sp, r7
    92ee:	bd80      	pop	{r7, pc}
    92f0:	000086f5 	.word	0x000086f5
    92f4:	0000874b 	.word	0x0000874b
    92f8:	00009099 	.word	0x00009099
    92fc:	000090b9 	.word	0x000090b9
    9300:	00009149 	.word	0x00009149
    9304:	0000916d 	.word	0x0000916d
    9308:	000091b9 	.word	0x000091b9
    930c:	00009215 	.word	0x00009215

00009310 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9310:	b590      	push	{r4, r7, lr}
    9312:	b089      	sub	sp, #36	; 0x24
    9314:	af00      	add	r7, sp, #0
    9316:	6078      	str	r0, [r7, #4]
    9318:	460b      	mov	r3, r1
    931a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    931c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9320:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9322:	687b      	ldr	r3, [r7, #4]
    9324:	7c9b      	ldrb	r3, [r3, #18]
    9326:	f003 030f 	and.w	r3, r3, #15
    932a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    932c:	7dfb      	ldrb	r3, [r7, #23]
    932e:	015b      	lsls	r3, r3, #5
    9330:	4a73      	ldr	r2, [pc, #460]	; (9500 <_usb_d_dev_in_next+0x1f0>)
    9332:	4413      	add	r3, r2
    9334:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9336:	78fb      	ldrb	r3, [r7, #3]
    9338:	2b00      	cmp	r3, #0
    933a:	d006      	beq.n	934a <_usb_d_dev_in_next+0x3a>
    933c:	693b      	ldr	r3, [r7, #16]
    933e:	3310      	adds	r3, #16
    9340:	685b      	ldr	r3, [r3, #4]
    9342:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9346:	b29b      	uxth	r3, r3
    9348:	e000      	b.n	934c <_usb_d_dev_in_next+0x3c>
    934a:	2300      	movs	r3, #0
    934c:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    934e:	687b      	ldr	r3, [r7, #4]
    9350:	8a1b      	ldrh	r3, [r3, #16]
    9352:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9356:	4293      	cmp	r3, r2
    9358:	d103      	bne.n	9362 <_usb_d_dev_in_next+0x52>
    935a:	687b      	ldr	r3, [r7, #4]
    935c:	8a1b      	ldrh	r3, [r3, #16]
    935e:	b21b      	sxth	r3, r3
    9360:	e004      	b.n	936c <_usb_d_dev_in_next+0x5c>
    9362:	687b      	ldr	r3, [r7, #4]
    9364:	8a1b      	ldrh	r3, [r3, #16]
    9366:	3b01      	subs	r3, #1
    9368:	b29b      	uxth	r3, r3
    936a:	b21b      	sxth	r3, r3
    936c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9370:	4013      	ands	r3, r2
    9372:	b21b      	sxth	r3, r3
    9374:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9376:	2300      	movs	r3, #0
    9378:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    937a:	687b      	ldr	r3, [r7, #4]
    937c:	7cdb      	ldrb	r3, [r3, #19]
    937e:	f003 0307 	and.w	r3, r3, #7
    9382:	b2db      	uxtb	r3, r3
    9384:	2b01      	cmp	r3, #1
    9386:	bf0c      	ite	eq
    9388:	2301      	moveq	r3, #1
    938a:	2300      	movne	r3, #0
    938c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    938e:	78fb      	ldrb	r3, [r7, #3]
    9390:	2b00      	cmp	r3, #0
    9392:	d004      	beq.n	939e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9394:	7dfb      	ldrb	r3, [r7, #23]
    9396:	2101      	movs	r1, #1
    9398:	4618      	mov	r0, r3
    939a:	4b5a      	ldr	r3, [pc, #360]	; (9504 <_usb_d_dev_in_next+0x1f4>)
    939c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    939e:	687b      	ldr	r3, [r7, #4]
    93a0:	689a      	ldr	r2, [r3, #8]
    93a2:	89fb      	ldrh	r3, [r7, #14]
    93a4:	441a      	add	r2, r3
    93a6:	687b      	ldr	r3, [r7, #4]
    93a8:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    93aa:	687b      	ldr	r3, [r7, #4]
    93ac:	689a      	ldr	r2, [r3, #8]
    93ae:	687b      	ldr	r3, [r7, #4]
    93b0:	685b      	ldr	r3, [r3, #4]
    93b2:	429a      	cmp	r2, r3
    93b4:	d243      	bcs.n	943e <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    93b6:	687b      	ldr	r3, [r7, #4]
    93b8:	685b      	ldr	r3, [r3, #4]
    93ba:	b29a      	uxth	r2, r3
    93bc:	687b      	ldr	r3, [r7, #4]
    93be:	689b      	ldr	r3, [r3, #8]
    93c0:	b29b      	uxth	r3, r3
    93c2:	1ad3      	subs	r3, r2, r3
    93c4:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    93c6:	687b      	ldr	r3, [r7, #4]
    93c8:	7cdb      	ldrb	r3, [r3, #19]
    93ca:	f003 0320 	and.w	r3, r3, #32
    93ce:	b2db      	uxtb	r3, r3
    93d0:	2b00      	cmp	r3, #0
    93d2:	d01b      	beq.n	940c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    93d4:	687b      	ldr	r3, [r7, #4]
    93d6:	8a1b      	ldrh	r3, [r3, #16]
    93d8:	8bfa      	ldrh	r2, [r7, #30]
    93da:	429a      	cmp	r2, r3
    93dc:	d902      	bls.n	93e4 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    93de:	687b      	ldr	r3, [r7, #4]
    93e0:	8a1b      	ldrh	r3, [r3, #16]
    93e2:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    93e4:	687b      	ldr	r3, [r7, #4]
    93e6:	68d8      	ldr	r0, [r3, #12]
    93e8:	687b      	ldr	r3, [r7, #4]
    93ea:	681a      	ldr	r2, [r3, #0]
    93ec:	687b      	ldr	r3, [r7, #4]
    93ee:	689b      	ldr	r3, [r3, #8]
    93f0:	4413      	add	r3, r2
    93f2:	8bfa      	ldrh	r2, [r7, #30]
    93f4:	4619      	mov	r1, r3
    93f6:	4b44      	ldr	r3, [pc, #272]	; (9508 <_usb_d_dev_in_next+0x1f8>)
    93f8:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    93fa:	687b      	ldr	r3, [r7, #4]
    93fc:	68db      	ldr	r3, [r3, #12]
    93fe:	461a      	mov	r2, r3
    9400:	7dfb      	ldrb	r3, [r7, #23]
    9402:	2101      	movs	r1, #1
    9404:	4618      	mov	r0, r3
    9406:	4b41      	ldr	r3, [pc, #260]	; (950c <_usb_d_dev_in_next+0x1fc>)
    9408:	4798      	blx	r3
    940a:	e011      	b.n	9430 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    940c:	8bfb      	ldrh	r3, [r7, #30]
    940e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9412:	d902      	bls.n	941a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9418:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    941a:	687b      	ldr	r3, [r7, #4]
    941c:	681a      	ldr	r2, [r3, #0]
    941e:	687b      	ldr	r3, [r7, #4]
    9420:	689b      	ldr	r3, [r3, #8]
    9422:	4413      	add	r3, r2
    9424:	461a      	mov	r2, r3
    9426:	7dfb      	ldrb	r3, [r7, #23]
    9428:	2101      	movs	r1, #1
    942a:	4618      	mov	r0, r3
    942c:	4b37      	ldr	r3, [pc, #220]	; (950c <_usb_d_dev_in_next+0x1fc>)
    942e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9430:	8bfa      	ldrh	r2, [r7, #30]
    9432:	7df8      	ldrb	r0, [r7, #23]
    9434:	2300      	movs	r3, #0
    9436:	2101      	movs	r1, #1
    9438:	4c35      	ldr	r4, [pc, #212]	; (9510 <_usb_d_dev_in_next+0x200>)
    943a:	47a0      	blx	r4
		goto _in_tx_exec;
    943c:	e041      	b.n	94c2 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    943e:	687b      	ldr	r3, [r7, #4]
    9440:	7cdb      	ldrb	r3, [r3, #19]
    9442:	f003 0310 	and.w	r3, r3, #16
    9446:	b2db      	uxtb	r3, r3
    9448:	2b00      	cmp	r3, #0
    944a:	d00b      	beq.n	9464 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    944c:	687a      	ldr	r2, [r7, #4]
    944e:	7cd3      	ldrb	r3, [r2, #19]
    9450:	f36f 1304 	bfc	r3, #4, #1
    9454:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9456:	7df8      	ldrb	r0, [r7, #23]
    9458:	2300      	movs	r3, #0
    945a:	2200      	movs	r2, #0
    945c:	2101      	movs	r1, #1
    945e:	4c2c      	ldr	r4, [pc, #176]	; (9510 <_usb_d_dev_in_next+0x200>)
    9460:	47a0      	blx	r4
		goto _in_tx_exec;
    9462:	e02e      	b.n	94c2 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9464:	7afb      	ldrb	r3, [r7, #11]
    9466:	2b00      	cmp	r3, #0
    9468:	d006      	beq.n	9478 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    946a:	7dfb      	ldrb	r3, [r7, #23]
    946c:	224b      	movs	r2, #75	; 0x4b
    946e:	4619      	mov	r1, r3
    9470:	69b8      	ldr	r0, [r7, #24]
    9472:	4b28      	ldr	r3, [pc, #160]	; (9514 <_usb_d_dev_in_next+0x204>)
    9474:	4798      	blx	r3
    9476:	e005      	b.n	9484 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9478:	7dfb      	ldrb	r3, [r7, #23]
    947a:	224a      	movs	r2, #74	; 0x4a
    947c:	4619      	mov	r1, r3
    947e:	69b8      	ldr	r0, [r7, #24]
    9480:	4b24      	ldr	r3, [pc, #144]	; (9514 <_usb_d_dev_in_next+0x204>)
    9482:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9484:	687b      	ldr	r3, [r7, #4]
    9486:	8a1b      	ldrh	r3, [r3, #16]
    9488:	89ba      	ldrh	r2, [r7, #12]
    948a:	429a      	cmp	r2, r3
    948c:	d114      	bne.n	94b8 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    948e:	687a      	ldr	r2, [r7, #4]
    9490:	7cd3      	ldrb	r3, [r2, #19]
    9492:	f36f 1386 	bfc	r3, #6, #1
    9496:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9498:	4b1f      	ldr	r3, [pc, #124]	; (9518 <_usb_d_dev_in_next+0x208>)
    949a:	68db      	ldr	r3, [r3, #12]
    949c:	687a      	ldr	r2, [r7, #4]
    949e:	7c90      	ldrb	r0, [r2, #18]
    94a0:	687a      	ldr	r2, [r7, #4]
    94a2:	6892      	ldr	r2, [r2, #8]
    94a4:	4611      	mov	r1, r2
    94a6:	4798      	blx	r3
    94a8:	4603      	mov	r3, r0
    94aa:	2b00      	cmp	r3, #0
    94ac:	d124      	bne.n	94f8 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    94ae:	687a      	ldr	r2, [r7, #4]
    94b0:	7cd3      	ldrb	r3, [r2, #19]
    94b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    94b6:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    94b8:	2100      	movs	r1, #0
    94ba:	6878      	ldr	r0, [r7, #4]
    94bc:	4b17      	ldr	r3, [pc, #92]	; (951c <_usb_d_dev_in_next+0x20c>)
    94be:	4798      	blx	r3
	return;
    94c0:	e01b      	b.n	94fa <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    94c2:	78fb      	ldrb	r3, [r7, #3]
    94c4:	f083 0301 	eor.w	r3, r3, #1
    94c8:	b2db      	uxtb	r3, r3
    94ca:	2b00      	cmp	r3, #0
    94cc:	d00d      	beq.n	94ea <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    94ce:	7afb      	ldrb	r3, [r7, #11]
    94d0:	2b00      	cmp	r3, #0
    94d2:	d002      	beq.n	94da <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    94d4:	234e      	movs	r3, #78	; 0x4e
    94d6:	777b      	strb	r3, [r7, #29]
    94d8:	e001      	b.n	94de <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    94da:	234a      	movs	r3, #74	; 0x4a
    94dc:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    94de:	7f7a      	ldrb	r2, [r7, #29]
    94e0:	7dfb      	ldrb	r3, [r7, #23]
    94e2:	4619      	mov	r1, r3
    94e4:	69b8      	ldr	r0, [r7, #24]
    94e6:	4b0e      	ldr	r3, [pc, #56]	; (9520 <_usb_d_dev_in_next+0x210>)
    94e8:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    94ea:	7dfb      	ldrb	r3, [r7, #23]
    94ec:	2201      	movs	r2, #1
    94ee:	2101      	movs	r1, #1
    94f0:	4618      	mov	r0, r3
    94f2:	4b0c      	ldr	r3, [pc, #48]	; (9524 <_usb_d_dev_in_next+0x214>)
    94f4:	4798      	blx	r3
    94f6:	e000      	b.n	94fa <_usb_d_dev_in_next+0x1ea>
			return;
    94f8:	bf00      	nop
}
    94fa:	3724      	adds	r7, #36	; 0x24
    94fc:	46bd      	mov	sp, r7
    94fe:	bd90      	pop	{r4, r7, pc}
    9500:	20000a34 	.word	0x20000a34
    9504:	00008d09 	.word	0x00008d09
    9508:	0000e8a5 	.word	0x0000e8a5
    950c:	00008d35 	.word	0x00008d35
    9510:	00008e7d 	.word	0x00008e7d
    9514:	00008615 	.word	0x00008615
    9518:	2000096c 	.word	0x2000096c
    951c:	0000a639 	.word	0x0000a639
    9520:	000085e9 	.word	0x000085e9
    9524:	00008f35 	.word	0x00008f35

00009528 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9528:	b590      	push	{r4, r7, lr}
    952a:	b08b      	sub	sp, #44	; 0x2c
    952c:	af00      	add	r7, sp, #0
    952e:	6078      	str	r0, [r7, #4]
    9530:	460b      	mov	r3, r1
    9532:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9534:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9538:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    953a:	687b      	ldr	r3, [r7, #4]
    953c:	7c9b      	ldrb	r3, [r3, #18]
    953e:	f003 030f 	and.w	r3, r3, #15
    9542:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9544:	7ffb      	ldrb	r3, [r7, #31]
    9546:	015b      	lsls	r3, r3, #5
    9548:	4a94      	ldr	r2, [pc, #592]	; (979c <_usb_d_dev_out_next+0x274>)
    954a:	4413      	add	r3, r2
    954c:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    954e:	78fb      	ldrb	r3, [r7, #3]
    9550:	2b00      	cmp	r3, #0
    9552:	d005      	beq.n	9560 <_usb_d_dev_out_next+0x38>
    9554:	69bb      	ldr	r3, [r7, #24]
    9556:	685b      	ldr	r3, [r3, #4]
    9558:	f3c3 338d 	ubfx	r3, r3, #14, #14
    955c:	b29b      	uxth	r3, r3
    955e:	e000      	b.n	9562 <_usb_d_dev_out_next+0x3a>
    9560:	2300      	movs	r3, #0
    9562:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9564:	78fb      	ldrb	r3, [r7, #3]
    9566:	2b00      	cmp	r3, #0
    9568:	d005      	beq.n	9576 <_usb_d_dev_out_next+0x4e>
    956a:	69bb      	ldr	r3, [r7, #24]
    956c:	685b      	ldr	r3, [r3, #4]
    956e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9572:	b29b      	uxth	r3, r3
    9574:	e000      	b.n	9578 <_usb_d_dev_out_next+0x50>
    9576:	2300      	movs	r3, #0
    9578:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    957a:	687b      	ldr	r3, [r7, #4]
    957c:	8a1b      	ldrh	r3, [r3, #16]
    957e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9582:	4293      	cmp	r3, r2
    9584:	d004      	beq.n	9590 <_usb_d_dev_out_next+0x68>
    9586:	687b      	ldr	r3, [r7, #4]
    9588:	8a1b      	ldrh	r3, [r3, #16]
    958a:	3b01      	subs	r3, #1
    958c:	b29b      	uxth	r3, r3
    958e:	e001      	b.n	9594 <_usb_d_dev_out_next+0x6c>
    9590:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9594:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9596:	8aba      	ldrh	r2, [r7, #20]
    9598:	8a7b      	ldrh	r3, [r7, #18]
    959a:	4013      	ands	r3, r2
    959c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    959e:	687b      	ldr	r3, [r7, #4]
    95a0:	7cdb      	ldrb	r3, [r3, #19]
    95a2:	f003 0307 	and.w	r3, r3, #7
    95a6:	b2db      	uxtb	r3, r3
    95a8:	2b01      	cmp	r3, #1
    95aa:	bf0c      	ite	eq
    95ac:	2301      	moveq	r3, #1
    95ae:	2300      	movne	r3, #0
    95b0:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    95b2:	78fb      	ldrb	r3, [r7, #3]
    95b4:	2b00      	cmp	r3, #0
    95b6:	d004      	beq.n	95c2 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    95b8:	7ffb      	ldrb	r3, [r7, #31]
    95ba:	2100      	movs	r1, #0
    95bc:	4618      	mov	r0, r3
    95be:	4b78      	ldr	r3, [pc, #480]	; (97a0 <_usb_d_dev_out_next+0x278>)
    95c0:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    95c2:	687b      	ldr	r3, [r7, #4]
    95c4:	7cdb      	ldrb	r3, [r3, #19]
    95c6:	f003 0320 	and.w	r3, r3, #32
    95ca:	b2db      	uxtb	r3, r3
    95cc:	2b00      	cmp	r3, #0
    95ce:	d01c      	beq.n	960a <_usb_d_dev_out_next+0xe2>
    95d0:	687b      	ldr	r3, [r7, #4]
    95d2:	685b      	ldr	r3, [r3, #4]
    95d4:	2b00      	cmp	r3, #0
    95d6:	d018      	beq.n	960a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    95d8:	687b      	ldr	r3, [r7, #4]
    95da:	685b      	ldr	r3, [r3, #4]
    95dc:	b29a      	uxth	r2, r3
    95de:	687b      	ldr	r3, [r7, #4]
    95e0:	689b      	ldr	r3, [r3, #8]
    95e2:	b29b      	uxth	r3, r3
    95e4:	1ad3      	subs	r3, r2, r3
    95e6:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    95e8:	687b      	ldr	r3, [r7, #4]
    95ea:	681a      	ldr	r2, [r3, #0]
    95ec:	687b      	ldr	r3, [r7, #4]
    95ee:	689b      	ldr	r3, [r3, #8]
    95f0:	18d0      	adds	r0, r2, r3
    95f2:	687b      	ldr	r3, [r7, #4]
    95f4:	68d9      	ldr	r1, [r3, #12]
    95f6:	89ba      	ldrh	r2, [r7, #12]
    95f8:	8a3b      	ldrh	r3, [r7, #16]
    95fa:	429a      	cmp	r2, r3
    95fc:	d901      	bls.n	9602 <_usb_d_dev_out_next+0xda>
    95fe:	8a3b      	ldrh	r3, [r7, #16]
    9600:	e000      	b.n	9604 <_usb_d_dev_out_next+0xdc>
    9602:	89bb      	ldrh	r3, [r7, #12]
    9604:	461a      	mov	r2, r3
    9606:	4b67      	ldr	r3, [pc, #412]	; (97a4 <_usb_d_dev_out_next+0x27c>)
    9608:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    960a:	687b      	ldr	r3, [r7, #4]
    960c:	685b      	ldr	r3, [r3, #4]
    960e:	2b00      	cmp	r3, #0
    9610:	d121      	bne.n	9656 <_usb_d_dev_out_next+0x12e>
    9612:	687b      	ldr	r3, [r7, #4]
    9614:	7cdb      	ldrb	r3, [r3, #19]
    9616:	f003 0310 	and.w	r3, r3, #16
    961a:	b2db      	uxtb	r3, r3
    961c:	2b00      	cmp	r3, #0
    961e:	d01a      	beq.n	9656 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9620:	687a      	ldr	r2, [r7, #4]
    9622:	7cd3      	ldrb	r3, [r2, #19]
    9624:	f36f 1304 	bfc	r3, #4, #1
    9628:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    962a:	687a      	ldr	r2, [r7, #4]
    962c:	7cd3      	ldrb	r3, [r2, #19]
    962e:	f043 0320 	orr.w	r3, r3, #32
    9632:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9634:	687b      	ldr	r3, [r7, #4]
    9636:	68db      	ldr	r3, [r3, #12]
    9638:	461a      	mov	r2, r3
    963a:	7ffb      	ldrb	r3, [r7, #31]
    963c:	2100      	movs	r1, #0
    963e:	4618      	mov	r0, r3
    9640:	4b59      	ldr	r3, [pc, #356]	; (97a8 <_usb_d_dev_out_next+0x280>)
    9642:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9644:	687b      	ldr	r3, [r7, #4]
    9646:	8a1b      	ldrh	r3, [r3, #16]
    9648:	461a      	mov	r2, r3
    964a:	7ff8      	ldrb	r0, [r7, #31]
    964c:	2300      	movs	r3, #0
    964e:	2100      	movs	r1, #0
    9650:	4c56      	ldr	r4, [pc, #344]	; (97ac <_usb_d_dev_out_next+0x284>)
    9652:	47a0      	blx	r4
		goto _out_rx_exec;
    9654:	e090      	b.n	9778 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9656:	78fb      	ldrb	r3, [r7, #3]
    9658:	2b00      	cmp	r3, #0
    965a:	d010      	beq.n	967e <_usb_d_dev_out_next+0x156>
    965c:	687b      	ldr	r3, [r7, #4]
    965e:	8a1b      	ldrh	r3, [r3, #16]
    9660:	8a3a      	ldrh	r2, [r7, #16]
    9662:	429a      	cmp	r2, r3
    9664:	d20b      	bcs.n	967e <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9666:	687a      	ldr	r2, [r7, #4]
    9668:	7cd3      	ldrb	r3, [r2, #19]
    966a:	f36f 1304 	bfc	r3, #4, #1
    966e:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9670:	687b      	ldr	r3, [r7, #4]
    9672:	689a      	ldr	r2, [r3, #8]
    9674:	8abb      	ldrh	r3, [r7, #20]
    9676:	441a      	add	r2, r3
    9678:	687b      	ldr	r3, [r7, #4]
    967a:	609a      	str	r2, [r3, #8]
    967c:	e05c      	b.n	9738 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    967e:	687b      	ldr	r3, [r7, #4]
    9680:	689a      	ldr	r2, [r3, #8]
    9682:	8afb      	ldrh	r3, [r7, #22]
    9684:	441a      	add	r2, r3
    9686:	687b      	ldr	r3, [r7, #4]
    9688:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    968a:	687b      	ldr	r3, [r7, #4]
    968c:	689a      	ldr	r2, [r3, #8]
    968e:	687b      	ldr	r3, [r7, #4]
    9690:	685b      	ldr	r3, [r3, #4]
    9692:	429a      	cmp	r2, r3
    9694:	d250      	bcs.n	9738 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9696:	687b      	ldr	r3, [r7, #4]
    9698:	685b      	ldr	r3, [r3, #4]
    969a:	b29a      	uxth	r2, r3
    969c:	687b      	ldr	r3, [r7, #4]
    969e:	689b      	ldr	r3, [r3, #8]
    96a0:	b29b      	uxth	r3, r3
    96a2:	1ad3      	subs	r3, r2, r3
    96a4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    96a6:	687b      	ldr	r3, [r7, #4]
    96a8:	7cdb      	ldrb	r3, [r3, #19]
    96aa:	f003 0320 	and.w	r3, r3, #32
    96ae:	b2db      	uxtb	r3, r3
    96b0:	2b00      	cmp	r3, #0
    96b2:	d010      	beq.n	96d6 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    96b4:	687b      	ldr	r3, [r7, #4]
    96b6:	8a1b      	ldrh	r3, [r3, #16]
    96b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    96ba:	429a      	cmp	r2, r3
    96bc:	d902      	bls.n	96c4 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    96be:	687b      	ldr	r3, [r7, #4]
    96c0:	8a1b      	ldrh	r3, [r3, #16]
    96c2:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    96c4:	687b      	ldr	r3, [r7, #4]
    96c6:	68db      	ldr	r3, [r3, #12]
    96c8:	461a      	mov	r2, r3
    96ca:	7ffb      	ldrb	r3, [r7, #31]
    96cc:	2100      	movs	r1, #0
    96ce:	4618      	mov	r0, r3
    96d0:	4b35      	ldr	r3, [pc, #212]	; (97a8 <_usb_d_dev_out_next+0x280>)
    96d2:	4798      	blx	r3
    96d4:	e029      	b.n	972a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    96d6:	687b      	ldr	r3, [r7, #4]
    96d8:	8a1b      	ldrh	r3, [r3, #16]
    96da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    96dc:	429a      	cmp	r2, r3
    96de:	d90f      	bls.n	9700 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    96e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    96e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    96e6:	d903      	bls.n	96f0 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    96e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    96ec:	84fb      	strh	r3, [r7, #38]	; 0x26
    96ee:	e011      	b.n	9714 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    96f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    96f2:	8a7b      	ldrh	r3, [r7, #18]
    96f4:	4013      	ands	r3, r2
    96f6:	b29b      	uxth	r3, r3
    96f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    96fa:	1ad3      	subs	r3, r2, r3
    96fc:	84fb      	strh	r3, [r7, #38]	; 0x26
    96fe:	e009      	b.n	9714 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9700:	687b      	ldr	r3, [r7, #4]
    9702:	8a1b      	ldrh	r3, [r3, #16]
    9704:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9706:	429a      	cmp	r2, r3
    9708:	d204      	bcs.n	9714 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    970a:	687a      	ldr	r2, [r7, #4]
    970c:	7cd3      	ldrb	r3, [r2, #19]
    970e:	f043 0320 	orr.w	r3, r3, #32
    9712:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9714:	687b      	ldr	r3, [r7, #4]
    9716:	681a      	ldr	r2, [r3, #0]
    9718:	687b      	ldr	r3, [r7, #4]
    971a:	689b      	ldr	r3, [r3, #8]
    971c:	4413      	add	r3, r2
    971e:	461a      	mov	r2, r3
    9720:	7ffb      	ldrb	r3, [r7, #31]
    9722:	2100      	movs	r1, #0
    9724:	4618      	mov	r0, r3
    9726:	4b20      	ldr	r3, [pc, #128]	; (97a8 <_usb_d_dev_out_next+0x280>)
    9728:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    972a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    972c:	7ff8      	ldrb	r0, [r7, #31]
    972e:	2300      	movs	r3, #0
    9730:	2100      	movs	r1, #0
    9732:	4c1e      	ldr	r4, [pc, #120]	; (97ac <_usb_d_dev_out_next+0x284>)
    9734:	47a0      	blx	r4
			goto _out_rx_exec;
    9736:	e01f      	b.n	9778 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9738:	7bfb      	ldrb	r3, [r7, #15]
    973a:	2b00      	cmp	r3, #0
    973c:	d006      	beq.n	974c <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    973e:	7ffb      	ldrb	r3, [r7, #31]
    9740:	222d      	movs	r2, #45	; 0x2d
    9742:	4619      	mov	r1, r3
    9744:	6a38      	ldr	r0, [r7, #32]
    9746:	4b1a      	ldr	r3, [pc, #104]	; (97b0 <_usb_d_dev_out_next+0x288>)
    9748:	4798      	blx	r3
    974a:	e005      	b.n	9758 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    974c:	7ffb      	ldrb	r3, [r7, #31]
    974e:	2225      	movs	r2, #37	; 0x25
    9750:	4619      	mov	r1, r3
    9752:	6a38      	ldr	r0, [r7, #32]
    9754:	4b16      	ldr	r3, [pc, #88]	; (97b0 <_usb_d_dev_out_next+0x288>)
    9756:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9758:	7ffb      	ldrb	r3, [r7, #31]
    975a:	2b00      	cmp	r3, #0
    975c:	d107      	bne.n	976e <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    975e:	687b      	ldr	r3, [r7, #4]
    9760:	68db      	ldr	r3, [r3, #12]
    9762:	461a      	mov	r2, r3
    9764:	7ffb      	ldrb	r3, [r7, #31]
    9766:	2100      	movs	r1, #0
    9768:	4618      	mov	r0, r3
    976a:	4b0f      	ldr	r3, [pc, #60]	; (97a8 <_usb_d_dev_out_next+0x280>)
    976c:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    976e:	2100      	movs	r1, #0
    9770:	6878      	ldr	r0, [r7, #4]
    9772:	4b10      	ldr	r3, [pc, #64]	; (97b4 <_usb_d_dev_out_next+0x28c>)
    9774:	4798      	blx	r3
	return;
    9776:	e031      	b.n	97dc <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9778:	78fb      	ldrb	r3, [r7, #3]
    977a:	f083 0301 	eor.w	r3, r3, #1
    977e:	b2db      	uxtb	r3, r3
    9780:	2b00      	cmp	r3, #0
    9782:	d025      	beq.n	97d0 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9784:	7bfb      	ldrb	r3, [r7, #15]
    9786:	2b00      	cmp	r3, #0
    9788:	d018      	beq.n	97bc <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    978a:	7ffb      	ldrb	r3, [r7, #31]
    978c:	2101      	movs	r1, #1
    978e:	4618      	mov	r0, r3
    9790:	4b09      	ldr	r3, [pc, #36]	; (97b8 <_usb_d_dev_out_next+0x290>)
    9792:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9794:	232d      	movs	r3, #45	; 0x2d
    9796:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    979a:	e012      	b.n	97c2 <_usb_d_dev_out_next+0x29a>
    979c:	20000a34 	.word	0x20000a34
    97a0:	00008d09 	.word	0x00008d09
    97a4:	0000e8a5 	.word	0x0000e8a5
    97a8:	00008d35 	.word	0x00008d35
    97ac:	00008ebd 	.word	0x00008ebd
    97b0:	00008615 	.word	0x00008615
    97b4:	0000a639 	.word	0x0000a639
    97b8:	00008efd 	.word	0x00008efd
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    97bc:	2325      	movs	r3, #37	; 0x25
    97be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    97c2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    97c6:	7ffb      	ldrb	r3, [r7, #31]
    97c8:	4619      	mov	r1, r3
    97ca:	6a38      	ldr	r0, [r7, #32]
    97cc:	4b05      	ldr	r3, [pc, #20]	; (97e4 <_usb_d_dev_out_next+0x2bc>)
    97ce:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    97d0:	7ffb      	ldrb	r3, [r7, #31]
    97d2:	2201      	movs	r2, #1
    97d4:	2100      	movs	r1, #0
    97d6:	4618      	mov	r0, r3
    97d8:	4b03      	ldr	r3, [pc, #12]	; (97e8 <_usb_d_dev_out_next+0x2c0>)
    97da:	4798      	blx	r3
}
    97dc:	372c      	adds	r7, #44	; 0x2c
    97de:	46bd      	mov	sp, r7
    97e0:	bd90      	pop	{r4, r7, pc}
    97e2:	bf00      	nop
    97e4:	000085e9 	.word	0x000085e9
    97e8:	00008f8d 	.word	0x00008f8d

000097ec <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    97ec:	b580      	push	{r7, lr}
    97ee:	b084      	sub	sp, #16
    97f0:	af00      	add	r7, sp, #0
    97f2:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    97f4:	687b      	ldr	r3, [r7, #4]
    97f6:	7c9b      	ldrb	r3, [r3, #18]
    97f8:	f003 030f 	and.w	r3, r3, #15
    97fc:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    97fe:	687b      	ldr	r3, [r7, #4]
    9800:	7cdb      	ldrb	r3, [r3, #19]
    9802:	f003 0307 	and.w	r3, r3, #7
    9806:	b2db      	uxtb	r3, r3
    9808:	2b01      	cmp	r3, #1
    980a:	bf0c      	ite	eq
    980c:	2301      	moveq	r3, #1
    980e:	2300      	movne	r3, #0
    9810:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9812:	7bbb      	ldrb	r3, [r7, #14]
    9814:	f083 0301 	eor.w	r3, r3, #1
    9818:	b2db      	uxtb	r3, r3
    981a:	2b00      	cmp	r3, #0
    981c:	d008      	beq.n	9830 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    981e:	7bfb      	ldrb	r3, [r7, #15]
    9820:	4618      	mov	r0, r3
    9822:	4b20      	ldr	r3, [pc, #128]	; (98a4 <_usb_d_dev_handle_setup+0xb8>)
    9824:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9826:	7bfb      	ldrb	r3, [r7, #15]
    9828:	4618      	mov	r0, r3
    982a:	4b1f      	ldr	r3, [pc, #124]	; (98a8 <_usb_d_dev_handle_setup+0xbc>)
    982c:	4798      	blx	r3
		return;
    982e:	e036      	b.n	989e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9830:	687b      	ldr	r3, [r7, #4]
    9832:	7cdb      	ldrb	r3, [r3, #19]
    9834:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9838:	b2db      	uxtb	r3, r3
    983a:	2b00      	cmp	r3, #0
    983c:	d010      	beq.n	9860 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    983e:	687a      	ldr	r2, [r7, #4]
    9840:	7cd3      	ldrb	r3, [r2, #19]
    9842:	f36f 1386 	bfc	r3, #6, #1
    9846:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9848:	7bfb      	ldrb	r3, [r7, #15]
    984a:	2200      	movs	r2, #0
    984c:	2101      	movs	r1, #1
    984e:	4618      	mov	r0, r3
    9850:	4b16      	ldr	r3, [pc, #88]	; (98ac <_usb_d_dev_handle_setup+0xc0>)
    9852:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9854:	7bfb      	ldrb	r3, [r7, #15]
    9856:	2200      	movs	r2, #0
    9858:	2100      	movs	r1, #0
    985a:	4618      	mov	r0, r3
    985c:	4b14      	ldr	r3, [pc, #80]	; (98b0 <_usb_d_dev_handle_setup+0xc4>)
    985e:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9860:	687a      	ldr	r2, [r7, #4]
    9862:	7cd3      	ldrb	r3, [r2, #19]
    9864:	f36f 03c3 	bfc	r3, #3, #1
    9868:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    986a:	7bfb      	ldrb	r3, [r7, #15]
    986c:	2100      	movs	r1, #0
    986e:	4618      	mov	r0, r3
    9870:	4b10      	ldr	r3, [pc, #64]	; (98b4 <_usb_d_dev_handle_setup+0xc8>)
    9872:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9874:	7bfb      	ldrb	r3, [r7, #15]
    9876:	2101      	movs	r1, #1
    9878:	4618      	mov	r0, r3
    987a:	4b0e      	ldr	r3, [pc, #56]	; (98b4 <_usb_d_dev_handle_setup+0xc8>)
    987c:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    987e:	7bfb      	ldrb	r3, [r7, #15]
    9880:	216f      	movs	r1, #111	; 0x6f
    9882:	4618      	mov	r0, r3
    9884:	4b0c      	ldr	r3, [pc, #48]	; (98b8 <_usb_d_dev_handle_setup+0xcc>)
    9886:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9888:	7bfb      	ldrb	r3, [r7, #15]
    988a:	216f      	movs	r1, #111	; 0x6f
    988c:	4618      	mov	r0, r3
    988e:	4b0b      	ldr	r3, [pc, #44]	; (98bc <_usb_d_dev_handle_setup+0xd0>)
    9890:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9892:	4b0b      	ldr	r3, [pc, #44]	; (98c0 <_usb_d_dev_handle_setup+0xd4>)
    9894:	689b      	ldr	r3, [r3, #8]
    9896:	687a      	ldr	r2, [r7, #4]
    9898:	7c92      	ldrb	r2, [r2, #18]
    989a:	4610      	mov	r0, r2
    989c:	4798      	blx	r3
}
    989e:	3710      	adds	r7, #16
    98a0:	46bd      	mov	sp, r7
    98a2:	bd80      	pop	{r7, pc}
    98a4:	00008c91 	.word	0x00008c91
    98a8:	00008c3d 	.word	0x00008c3d
    98ac:	00008f35 	.word	0x00008f35
    98b0:	00008f8d 	.word	0x00008f8d
    98b4:	00008efd 	.word	0x00008efd
    98b8:	00008a3d 	.word	0x00008a3d
    98bc:	00008a8d 	.word	0x00008a8d
    98c0:	2000096c 	.word	0x2000096c

000098c4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    98c4:	b580      	push	{r7, lr}
    98c6:	b084      	sub	sp, #16
    98c8:	af00      	add	r7, sp, #0
    98ca:	6078      	str	r0, [r7, #4]
    98cc:	460b      	mov	r3, r1
    98ce:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    98d0:	687b      	ldr	r3, [r7, #4]
    98d2:	7c9b      	ldrb	r3, [r3, #18]
    98d4:	f003 030f 	and.w	r3, r3, #15
    98d8:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    98da:	78f9      	ldrb	r1, [r7, #3]
    98dc:	7bfb      	ldrb	r3, [r7, #15]
    98de:	2200      	movs	r2, #0
    98e0:	4618      	mov	r0, r3
    98e2:	4b07      	ldr	r3, [pc, #28]	; (9900 <_usb_d_dev_handle_stall+0x3c>)
    98e4:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    98e6:	4b07      	ldr	r3, [pc, #28]	; (9904 <_usb_d_dev_handle_stall+0x40>)
    98e8:	691b      	ldr	r3, [r3, #16]
    98ea:	687a      	ldr	r2, [r7, #4]
    98ec:	7c90      	ldrb	r0, [r2, #18]
    98ee:	687a      	ldr	r2, [r7, #4]
    98f0:	6892      	ldr	r2, [r2, #8]
    98f2:	2101      	movs	r1, #1
    98f4:	4798      	blx	r3
}
    98f6:	bf00      	nop
    98f8:	3710      	adds	r7, #16
    98fa:	46bd      	mov	sp, r7
    98fc:	bd80      	pop	{r7, pc}
    98fe:	bf00      	nop
    9900:	00008bf1 	.word	0x00008bf1
    9904:	2000096c 	.word	0x2000096c

00009908 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9908:	b580      	push	{r7, lr}
    990a:	b088      	sub	sp, #32
    990c:	af00      	add	r7, sp, #0
    990e:	6078      	str	r0, [r7, #4]
    9910:	460b      	mov	r3, r1
    9912:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9914:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9918:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    991a:	687b      	ldr	r3, [r7, #4]
    991c:	7c9b      	ldrb	r3, [r3, #18]
    991e:	f003 030f 	and.w	r3, r3, #15
    9922:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9924:	4b61      	ldr	r3, [pc, #388]	; (9aac <_usb_d_dev_handle_trfail+0x1a4>)
    9926:	881b      	ldrh	r3, [r3, #0]
    9928:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    992a:	7efb      	ldrb	r3, [r7, #27]
    992c:	015b      	lsls	r3, r3, #5
    992e:	4a60      	ldr	r2, [pc, #384]	; (9ab0 <_usb_d_dev_handle_trfail+0x1a8>)
    9930:	4413      	add	r3, r2
    9932:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9934:	78fb      	ldrb	r3, [r7, #3]
    9936:	2b00      	cmp	r3, #0
    9938:	d006      	beq.n	9948 <_usb_d_dev_handle_trfail+0x40>
    993a:	7efb      	ldrb	r3, [r7, #27]
    993c:	4619      	mov	r1, r3
    993e:	69f8      	ldr	r0, [r7, #28]
    9940:	4b5c      	ldr	r3, [pc, #368]	; (9ab4 <_usb_d_dev_handle_trfail+0x1ac>)
    9942:	4798      	blx	r3
    9944:	4603      	mov	r3, r0
    9946:	e005      	b.n	9954 <_usb_d_dev_handle_trfail+0x4c>
    9948:	7efb      	ldrb	r3, [r7, #27]
    994a:	4619      	mov	r1, r3
    994c:	69f8      	ldr	r0, [r7, #28]
    994e:	4b5a      	ldr	r3, [pc, #360]	; (9ab8 <_usb_d_dev_handle_trfail+0x1b0>)
    9950:	4798      	blx	r3
    9952:	4603      	mov	r3, r0
    9954:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9956:	687b      	ldr	r3, [r7, #4]
    9958:	7cdb      	ldrb	r3, [r3, #19]
    995a:	f003 0307 	and.w	r3, r3, #7
    995e:	b2db      	uxtb	r3, r3
    9960:	2b01      	cmp	r3, #1
    9962:	bf0c      	ite	eq
    9964:	2301      	moveq	r3, #1
    9966:	2300      	movne	r3, #0
    9968:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    996a:	78fb      	ldrb	r3, [r7, #3]
    996c:	011b      	lsls	r3, r3, #4
    996e:	697a      	ldr	r2, [r7, #20]
    9970:	4413      	add	r3, r2
    9972:	7a9b      	ldrb	r3, [r3, #10]
    9974:	b2db      	uxtb	r3, r3
    9976:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9978:	7cfb      	ldrb	r3, [r7, #19]
    997a:	2b02      	cmp	r3, #2
    997c:	d12f      	bne.n	99de <_usb_d_dev_handle_trfail+0xd6>
    997e:	7b3b      	ldrb	r3, [r7, #12]
    9980:	f003 0301 	and.w	r3, r3, #1
    9984:	b2db      	uxtb	r3, r3
    9986:	2b00      	cmp	r3, #0
    9988:	d029      	beq.n	99de <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    998a:	78fb      	ldrb	r3, [r7, #3]
    998c:	011b      	lsls	r3, r3, #4
    998e:	697a      	ldr	r2, [r7, #20]
    9990:	441a      	add	r2, r3
    9992:	7a93      	ldrb	r3, [r2, #10]
    9994:	f36f 0300 	bfc	r3, #0, #1
    9998:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    999a:	78fb      	ldrb	r3, [r7, #3]
    999c:	f107 0220 	add.w	r2, r7, #32
    99a0:	4413      	add	r3, r2
    99a2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    99a6:	7efb      	ldrb	r3, [r7, #27]
    99a8:	4619      	mov	r1, r3
    99aa:	69f8      	ldr	r0, [r7, #28]
    99ac:	4b43      	ldr	r3, [pc, #268]	; (9abc <_usb_d_dev_handle_trfail+0x1b4>)
    99ae:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    99b0:	78fb      	ldrb	r3, [r7, #3]
    99b2:	f107 0220 	add.w	r2, r7, #32
    99b6:	4413      	add	r3, r2
    99b8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    99bc:	7efb      	ldrb	r3, [r7, #27]
    99be:	4619      	mov	r1, r3
    99c0:	69f8      	ldr	r0, [r7, #28]
    99c2:	4b3f      	ldr	r3, [pc, #252]	; (9ac0 <_usb_d_dev_handle_trfail+0x1b8>)
    99c4:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    99c6:	78fb      	ldrb	r3, [r7, #3]
    99c8:	2b00      	cmp	r3, #0
    99ca:	bf14      	ite	ne
    99cc:	2301      	movne	r3, #1
    99ce:	2300      	moveq	r3, #0
    99d0:	b2db      	uxtb	r3, r3
    99d2:	2204      	movs	r2, #4
    99d4:	4619      	mov	r1, r3
    99d6:	6878      	ldr	r0, [r7, #4]
    99d8:	4b3a      	ldr	r3, [pc, #232]	; (9ac4 <_usb_d_dev_handle_trfail+0x1bc>)
    99da:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    99dc:	e062      	b.n	9aa4 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    99de:	7b3b      	ldrb	r3, [r7, #12]
    99e0:	f003 0302 	and.w	r3, r3, #2
    99e4:	b2db      	uxtb	r3, r3
    99e6:	2b00      	cmp	r3, #0
    99e8:	d040      	beq.n	9a6c <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    99ea:	78fb      	ldrb	r3, [r7, #3]
    99ec:	011b      	lsls	r3, r3, #4
    99ee:	697a      	ldr	r2, [r7, #20]
    99f0:	441a      	add	r2, r3
    99f2:	7a93      	ldrb	r3, [r2, #10]
    99f4:	f36f 0341 	bfc	r3, #1, #1
    99f8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    99fa:	78fb      	ldrb	r3, [r7, #3]
    99fc:	f107 0220 	add.w	r2, r7, #32
    9a00:	4413      	add	r3, r2
    9a02:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a06:	7efb      	ldrb	r3, [r7, #27]
    9a08:	4619      	mov	r1, r3
    9a0a:	69f8      	ldr	r0, [r7, #28]
    9a0c:	4b2b      	ldr	r3, [pc, #172]	; (9abc <_usb_d_dev_handle_trfail+0x1b4>)
    9a0e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9a10:	78fb      	ldrb	r3, [r7, #3]
    9a12:	f107 0220 	add.w	r2, r7, #32
    9a16:	4413      	add	r3, r2
    9a18:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a1c:	7efb      	ldrb	r3, [r7, #27]
    9a1e:	4619      	mov	r1, r3
    9a20:	69f8      	ldr	r0, [r7, #28]
    9a22:	4b27      	ldr	r3, [pc, #156]	; (9ac0 <_usb_d_dev_handle_trfail+0x1b8>)
    9a24:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9a26:	7cbb      	ldrb	r3, [r7, #18]
    9a28:	2b00      	cmp	r3, #0
    9a2a:	d03b      	beq.n	9aa4 <_usb_d_dev_handle_trfail+0x19c>
    9a2c:	687b      	ldr	r3, [r7, #4]
    9a2e:	7cdb      	ldrb	r3, [r3, #19]
    9a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9a34:	b2db      	uxtb	r3, r3
    9a36:	2b00      	cmp	r3, #0
    9a38:	d034      	beq.n	9aa4 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9a3a:	687b      	ldr	r3, [r7, #4]
    9a3c:	7cdb      	ldrb	r3, [r3, #19]
    9a3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9a42:	b2db      	uxtb	r3, r3
    9a44:	461a      	mov	r2, r3
    9a46:	78fb      	ldrb	r3, [r7, #3]
    9a48:	4293      	cmp	r3, r2
    9a4a:	d02b      	beq.n	9aa4 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9a4c:	687b      	ldr	r3, [r7, #4]
    9a4e:	7cdb      	ldrb	r3, [r3, #19]
    9a50:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9a54:	b2db      	uxtb	r3, r3
    9a56:	2b00      	cmp	r3, #0
    9a58:	bf14      	ite	ne
    9a5a:	2301      	movne	r3, #1
    9a5c:	2300      	moveq	r3, #0
    9a5e:	b2db      	uxtb	r3, r3
    9a60:	2200      	movs	r2, #0
    9a62:	4619      	mov	r1, r3
    9a64:	6878      	ldr	r0, [r7, #4]
    9a66:	4b17      	ldr	r3, [pc, #92]	; (9ac4 <_usb_d_dev_handle_trfail+0x1bc>)
    9a68:	4798      	blx	r3
}
    9a6a:	e01b      	b.n	9aa4 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9a6c:	78fa      	ldrb	r2, [r7, #3]
    9a6e:	7efb      	ldrb	r3, [r7, #27]
    9a70:	4611      	mov	r1, r2
    9a72:	4618      	mov	r0, r3
    9a74:	4b14      	ldr	r3, [pc, #80]	; (9ac8 <_usb_d_dev_handle_trfail+0x1c0>)
    9a76:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9a78:	78fb      	ldrb	r3, [r7, #3]
    9a7a:	f107 0220 	add.w	r2, r7, #32
    9a7e:	4413      	add	r3, r2
    9a80:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a84:	7efb      	ldrb	r3, [r7, #27]
    9a86:	4619      	mov	r1, r3
    9a88:	69f8      	ldr	r0, [r7, #28]
    9a8a:	4b0c      	ldr	r3, [pc, #48]	; (9abc <_usb_d_dev_handle_trfail+0x1b4>)
    9a8c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9a8e:	78fb      	ldrb	r3, [r7, #3]
    9a90:	f107 0220 	add.w	r2, r7, #32
    9a94:	4413      	add	r3, r2
    9a96:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a9a:	7efb      	ldrb	r3, [r7, #27]
    9a9c:	4619      	mov	r1, r3
    9a9e:	69f8      	ldr	r0, [r7, #28]
    9aa0:	4b07      	ldr	r3, [pc, #28]	; (9ac0 <_usb_d_dev_handle_trfail+0x1b8>)
    9aa2:	4798      	blx	r3
}
    9aa4:	bf00      	nop
    9aa6:	3720      	adds	r7, #32
    9aa8:	46bd      	mov	sp, r7
    9aaa:	bd80      	pop	{r7, pc}
    9aac:	0000f02c 	.word	0x0000f02c
    9ab0:	20000a34 	.word	0x20000a34
    9ab4:	00008671 	.word	0x00008671
    9ab8:	00008641 	.word	0x00008641
    9abc:	00008515 	.word	0x00008515
    9ac0:	00008615 	.word	0x00008615
    9ac4:	0000a681 	.word	0x0000a681
    9ac8:	00008efd 	.word	0x00008efd

00009acc <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9acc:	b580      	push	{r7, lr}
    9ace:	b082      	sub	sp, #8
    9ad0:	af00      	add	r7, sp, #0
    9ad2:	6078      	str	r0, [r7, #4]
    9ad4:	460b      	mov	r3, r1
    9ad6:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9ad8:	78fb      	ldrb	r3, [r7, #3]
    9ada:	f003 0310 	and.w	r3, r3, #16
    9ade:	2b00      	cmp	r3, #0
    9ae0:	d003      	beq.n	9aea <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9ae2:	6878      	ldr	r0, [r7, #4]
    9ae4:	4b0c      	ldr	r3, [pc, #48]	; (9b18 <_usb_d_dev_trans_setup_isr+0x4c>)
    9ae6:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9ae8:	e012      	b.n	9b10 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9aea:	78fb      	ldrb	r3, [r7, #3]
    9aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9af0:	2b00      	cmp	r3, #0
    9af2:	d004      	beq.n	9afe <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9af4:	2101      	movs	r1, #1
    9af6:	6878      	ldr	r0, [r7, #4]
    9af8:	4b08      	ldr	r3, [pc, #32]	; (9b1c <_usb_d_dev_trans_setup_isr+0x50>)
    9afa:	4798      	blx	r3
}
    9afc:	e008      	b.n	9b10 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9afe:	78fb      	ldrb	r3, [r7, #3]
    9b00:	f003 0320 	and.w	r3, r3, #32
    9b04:	2b00      	cmp	r3, #0
    9b06:	d003      	beq.n	9b10 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9b08:	2100      	movs	r1, #0
    9b0a:	6878      	ldr	r0, [r7, #4]
    9b0c:	4b03      	ldr	r3, [pc, #12]	; (9b1c <_usb_d_dev_trans_setup_isr+0x50>)
    9b0e:	4798      	blx	r3
}
    9b10:	bf00      	nop
    9b12:	3708      	adds	r7, #8
    9b14:	46bd      	mov	sp, r7
    9b16:	bd80      	pop	{r7, pc}
    9b18:	000097ed 	.word	0x000097ed
    9b1c:	000098c5 	.word	0x000098c5

00009b20 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9b20:	b580      	push	{r7, lr}
    9b22:	b082      	sub	sp, #8
    9b24:	af00      	add	r7, sp, #0
    9b26:	6078      	str	r0, [r7, #4]
    9b28:	460b      	mov	r3, r1
    9b2a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9b2c:	78fb      	ldrb	r3, [r7, #3]
    9b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b32:	2b00      	cmp	r3, #0
    9b34:	d004      	beq.n	9b40 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9b36:	2101      	movs	r1, #1
    9b38:	6878      	ldr	r0, [r7, #4]
    9b3a:	4b1a      	ldr	r3, [pc, #104]	; (9ba4 <_usb_d_dev_trans_in_isr+0x84>)
    9b3c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9b3e:	e02c      	b.n	9b9a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9b40:	78fb      	ldrb	r3, [r7, #3]
    9b42:	f003 0308 	and.w	r3, r3, #8
    9b46:	2b00      	cmp	r3, #0
    9b48:	d004      	beq.n	9b54 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9b4a:	2101      	movs	r1, #1
    9b4c:	6878      	ldr	r0, [r7, #4]
    9b4e:	4b16      	ldr	r3, [pc, #88]	; (9ba8 <_usb_d_dev_trans_in_isr+0x88>)
    9b50:	4798      	blx	r3
}
    9b52:	e022      	b.n	9b9a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9b54:	78fb      	ldrb	r3, [r7, #3]
    9b56:	f003 0302 	and.w	r3, r3, #2
    9b5a:	2b00      	cmp	r3, #0
    9b5c:	d004      	beq.n	9b68 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9b5e:	2101      	movs	r1, #1
    9b60:	6878      	ldr	r0, [r7, #4]
    9b62:	4b12      	ldr	r3, [pc, #72]	; (9bac <_usb_d_dev_trans_in_isr+0x8c>)
    9b64:	4798      	blx	r3
}
    9b66:	e018      	b.n	9b9a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9b68:	687b      	ldr	r3, [r7, #4]
    9b6a:	7cdb      	ldrb	r3, [r3, #19]
    9b6c:	f003 0307 	and.w	r3, r3, #7
    9b70:	b2db      	uxtb	r3, r3
    9b72:	2b01      	cmp	r3, #1
    9b74:	d111      	bne.n	9b9a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9b76:	78fb      	ldrb	r3, [r7, #3]
    9b78:	f003 0304 	and.w	r3, r3, #4
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	d004      	beq.n	9b8a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9b80:	2100      	movs	r1, #0
    9b82:	6878      	ldr	r0, [r7, #4]
    9b84:	4b08      	ldr	r3, [pc, #32]	; (9ba8 <_usb_d_dev_trans_in_isr+0x88>)
    9b86:	4798      	blx	r3
}
    9b88:	e007      	b.n	9b9a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9b8a:	78fb      	ldrb	r3, [r7, #3]
    9b8c:	f003 0310 	and.w	r3, r3, #16
    9b90:	2b00      	cmp	r3, #0
    9b92:	d002      	beq.n	9b9a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9b94:	6878      	ldr	r0, [r7, #4]
    9b96:	4b06      	ldr	r3, [pc, #24]	; (9bb0 <_usb_d_dev_trans_in_isr+0x90>)
    9b98:	4798      	blx	r3
}
    9b9a:	bf00      	nop
    9b9c:	3708      	adds	r7, #8
    9b9e:	46bd      	mov	sp, r7
    9ba0:	bd80      	pop	{r7, pc}
    9ba2:	bf00      	nop
    9ba4:	000098c5 	.word	0x000098c5
    9ba8:	00009909 	.word	0x00009909
    9bac:	00009311 	.word	0x00009311
    9bb0:	000097ed 	.word	0x000097ed

00009bb4 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9bb4:	b580      	push	{r7, lr}
    9bb6:	b082      	sub	sp, #8
    9bb8:	af00      	add	r7, sp, #0
    9bba:	6078      	str	r0, [r7, #4]
    9bbc:	460b      	mov	r3, r1
    9bbe:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9bc0:	78fb      	ldrb	r3, [r7, #3]
    9bc2:	f003 0320 	and.w	r3, r3, #32
    9bc6:	2b00      	cmp	r3, #0
    9bc8:	d004      	beq.n	9bd4 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9bca:	2100      	movs	r1, #0
    9bcc:	6878      	ldr	r0, [r7, #4]
    9bce:	4b1a      	ldr	r3, [pc, #104]	; (9c38 <_usb_d_dev_trans_out_isr+0x84>)
    9bd0:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9bd2:	e02c      	b.n	9c2e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9bd4:	78fb      	ldrb	r3, [r7, #3]
    9bd6:	f003 0304 	and.w	r3, r3, #4
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d004      	beq.n	9be8 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9bde:	2100      	movs	r1, #0
    9be0:	6878      	ldr	r0, [r7, #4]
    9be2:	4b16      	ldr	r3, [pc, #88]	; (9c3c <_usb_d_dev_trans_out_isr+0x88>)
    9be4:	4798      	blx	r3
}
    9be6:	e022      	b.n	9c2e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9be8:	78fb      	ldrb	r3, [r7, #3]
    9bea:	f003 0301 	and.w	r3, r3, #1
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d004      	beq.n	9bfc <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9bf2:	2101      	movs	r1, #1
    9bf4:	6878      	ldr	r0, [r7, #4]
    9bf6:	4b12      	ldr	r3, [pc, #72]	; (9c40 <_usb_d_dev_trans_out_isr+0x8c>)
    9bf8:	4798      	blx	r3
}
    9bfa:	e018      	b.n	9c2e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9bfc:	687b      	ldr	r3, [r7, #4]
    9bfe:	7cdb      	ldrb	r3, [r3, #19]
    9c00:	f003 0307 	and.w	r3, r3, #7
    9c04:	b2db      	uxtb	r3, r3
    9c06:	2b01      	cmp	r3, #1
    9c08:	d111      	bne.n	9c2e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9c0a:	78fb      	ldrb	r3, [r7, #3]
    9c0c:	f003 0308 	and.w	r3, r3, #8
    9c10:	2b00      	cmp	r3, #0
    9c12:	d004      	beq.n	9c1e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9c14:	2101      	movs	r1, #1
    9c16:	6878      	ldr	r0, [r7, #4]
    9c18:	4b08      	ldr	r3, [pc, #32]	; (9c3c <_usb_d_dev_trans_out_isr+0x88>)
    9c1a:	4798      	blx	r3
}
    9c1c:	e007      	b.n	9c2e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9c1e:	78fb      	ldrb	r3, [r7, #3]
    9c20:	f003 0310 	and.w	r3, r3, #16
    9c24:	2b00      	cmp	r3, #0
    9c26:	d002      	beq.n	9c2e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9c28:	6878      	ldr	r0, [r7, #4]
    9c2a:	4b06      	ldr	r3, [pc, #24]	; (9c44 <_usb_d_dev_trans_out_isr+0x90>)
    9c2c:	4798      	blx	r3
}
    9c2e:	bf00      	nop
    9c30:	3708      	adds	r7, #8
    9c32:	46bd      	mov	sp, r7
    9c34:	bd80      	pop	{r7, pc}
    9c36:	bf00      	nop
    9c38:	000098c5 	.word	0x000098c5
    9c3c:	00009909 	.word	0x00009909
    9c40:	00009529 	.word	0x00009529
    9c44:	000097ed 	.word	0x000097ed

00009c48 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9c48:	b580      	push	{r7, lr}
    9c4a:	b084      	sub	sp, #16
    9c4c:	af00      	add	r7, sp, #0
    9c4e:	6078      	str	r0, [r7, #4]
    9c50:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9c52:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c56:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9c58:	683b      	ldr	r3, [r7, #0]
    9c5a:	7c9b      	ldrb	r3, [r3, #18]
    9c5c:	f003 030f 	and.w	r3, r3, #15
    9c60:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9c62:	7afb      	ldrb	r3, [r7, #11]
    9c64:	2201      	movs	r2, #1
    9c66:	409a      	lsls	r2, r3
    9c68:	687b      	ldr	r3, [r7, #4]
    9c6a:	4013      	ands	r3, r2
    9c6c:	2b00      	cmp	r3, #0
    9c6e:	d03d      	beq.n	9cec <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9c70:	7afb      	ldrb	r3, [r7, #11]
    9c72:	68fa      	ldr	r2, [r7, #12]
    9c74:	3308      	adds	r3, #8
    9c76:	015b      	lsls	r3, r3, #5
    9c78:	4413      	add	r3, r2
    9c7a:	3307      	adds	r3, #7
    9c7c:	781b      	ldrb	r3, [r3, #0]
    9c7e:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9c80:	7afb      	ldrb	r3, [r7, #11]
    9c82:	68fa      	ldr	r2, [r7, #12]
    9c84:	015b      	lsls	r3, r3, #5
    9c86:	4413      	add	r3, r2
    9c88:	f203 1309 	addw	r3, r3, #265	; 0x109
    9c8c:	781b      	ldrb	r3, [r3, #0]
    9c8e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9c90:	7aba      	ldrb	r2, [r7, #10]
    9c92:	7a7b      	ldrb	r3, [r7, #9]
    9c94:	4013      	ands	r3, r2
    9c96:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9c98:	7abb      	ldrb	r3, [r7, #10]
    9c9a:	2b00      	cmp	r3, #0
    9c9c:	d027      	beq.n	9cee <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9c9e:	683b      	ldr	r3, [r7, #0]
    9ca0:	7cdb      	ldrb	r3, [r3, #19]
    9ca2:	f003 0307 	and.w	r3, r3, #7
    9ca6:	b2db      	uxtb	r3, r3
    9ca8:	2b01      	cmp	r3, #1
    9caa:	d10c      	bne.n	9cc6 <_usb_d_dev_handle_eps+0x7e>
    9cac:	683b      	ldr	r3, [r7, #0]
    9cae:	7cdb      	ldrb	r3, [r3, #19]
    9cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9cb4:	b2db      	uxtb	r3, r3
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	d105      	bne.n	9cc6 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9cba:	7abb      	ldrb	r3, [r7, #10]
    9cbc:	4619      	mov	r1, r3
    9cbe:	6838      	ldr	r0, [r7, #0]
    9cc0:	4b0c      	ldr	r3, [pc, #48]	; (9cf4 <_usb_d_dev_handle_eps+0xac>)
    9cc2:	4798      	blx	r3
    9cc4:	e013      	b.n	9cee <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9cc6:	683b      	ldr	r3, [r7, #0]
    9cc8:	7cdb      	ldrb	r3, [r3, #19]
    9cca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9cce:	b2db      	uxtb	r3, r3
    9cd0:	2b00      	cmp	r3, #0
    9cd2:	d005      	beq.n	9ce0 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9cd4:	7abb      	ldrb	r3, [r7, #10]
    9cd6:	4619      	mov	r1, r3
    9cd8:	6838      	ldr	r0, [r7, #0]
    9cda:	4b07      	ldr	r3, [pc, #28]	; (9cf8 <_usb_d_dev_handle_eps+0xb0>)
    9cdc:	4798      	blx	r3
    9cde:	e006      	b.n	9cee <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9ce0:	7abb      	ldrb	r3, [r7, #10]
    9ce2:	4619      	mov	r1, r3
    9ce4:	6838      	ldr	r0, [r7, #0]
    9ce6:	4b05      	ldr	r3, [pc, #20]	; (9cfc <_usb_d_dev_handle_eps+0xb4>)
    9ce8:	4798      	blx	r3
    9cea:	e000      	b.n	9cee <_usb_d_dev_handle_eps+0xa6>
		return;
    9cec:	bf00      	nop
		}
	}
}
    9cee:	3710      	adds	r7, #16
    9cf0:	46bd      	mov	sp, r7
    9cf2:	bd80      	pop	{r7, pc}
    9cf4:	00009acd 	.word	0x00009acd
    9cf8:	00009b21 	.word	0x00009b21
    9cfc:	00009bb5 	.word	0x00009bb5

00009d00 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9d00:	b580      	push	{r7, lr}
    9d02:	b084      	sub	sp, #16
    9d04:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9d06:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d0a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9d0c:	68bb      	ldr	r3, [r7, #8]
    9d0e:	8c1b      	ldrh	r3, [r3, #32]
    9d10:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9d12:	88fb      	ldrh	r3, [r7, #6]
    9d14:	2b00      	cmp	r3, #0
    9d16:	d104      	bne.n	9d22 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9d18:	4b13      	ldr	r3, [pc, #76]	; (9d68 <_usb_d_dev_handler+0x68>)
    9d1a:	4798      	blx	r3
    9d1c:	4603      	mov	r3, r0
    9d1e:	2b00      	cmp	r3, #0
    9d20:	d11e      	bne.n	9d60 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9d22:	2300      	movs	r3, #0
    9d24:	73fb      	strb	r3, [r7, #15]
    9d26:	e017      	b.n	9d58 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9d28:	7bfa      	ldrb	r2, [r7, #15]
    9d2a:	4613      	mov	r3, r2
    9d2c:	009b      	lsls	r3, r3, #2
    9d2e:	4413      	add	r3, r2
    9d30:	009b      	lsls	r3, r3, #2
    9d32:	3310      	adds	r3, #16
    9d34:	4a0d      	ldr	r2, [pc, #52]	; (9d6c <_usb_d_dev_handler+0x6c>)
    9d36:	4413      	add	r3, r2
    9d38:	3304      	adds	r3, #4
    9d3a:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9d3c:	683b      	ldr	r3, [r7, #0]
    9d3e:	7c9b      	ldrb	r3, [r3, #18]
    9d40:	2bff      	cmp	r3, #255	; 0xff
    9d42:	d005      	beq.n	9d50 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9d44:	88fb      	ldrh	r3, [r7, #6]
    9d46:	6839      	ldr	r1, [r7, #0]
    9d48:	4618      	mov	r0, r3
    9d4a:	4b09      	ldr	r3, [pc, #36]	; (9d70 <_usb_d_dev_handler+0x70>)
    9d4c:	4798      	blx	r3
    9d4e:	e000      	b.n	9d52 <_usb_d_dev_handler+0x52>
			continue;
    9d50:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9d52:	7bfb      	ldrb	r3, [r7, #15]
    9d54:	3301      	adds	r3, #1
    9d56:	73fb      	strb	r3, [r7, #15]
    9d58:	7bfb      	ldrb	r3, [r7, #15]
    9d5a:	2b08      	cmp	r3, #8
    9d5c:	d9e4      	bls.n	9d28 <_usb_d_dev_handler+0x28>
    9d5e:	e000      	b.n	9d62 <_usb_d_dev_handler+0x62>
			return;
    9d60:	bf00      	nop
	}
}
    9d62:	3710      	adds	r7, #16
    9d64:	46bd      	mov	sp, r7
    9d66:	bd80      	pop	{r7, pc}
    9d68:	00009259 	.word	0x00009259
    9d6c:	2000096c 	.word	0x2000096c
    9d70:	00009c49 	.word	0x00009c49

00009d74 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9d74:	b580      	push	{r7, lr}
    9d76:	b082      	sub	sp, #8
    9d78:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9d7a:	2300      	movs	r3, #0
    9d7c:	71fb      	strb	r3, [r7, #7]
    9d7e:	e023      	b.n	9dc8 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9d80:	79fa      	ldrb	r2, [r7, #7]
    9d82:	4613      	mov	r3, r2
    9d84:	009b      	lsls	r3, r3, #2
    9d86:	4413      	add	r3, r2
    9d88:	009b      	lsls	r3, r3, #2
    9d8a:	3310      	adds	r3, #16
    9d8c:	4a14      	ldr	r2, [pc, #80]	; (9de0 <_usb_d_dev_reset_epts+0x6c>)
    9d8e:	4413      	add	r3, r2
    9d90:	3304      	adds	r3, #4
    9d92:	2103      	movs	r1, #3
    9d94:	4618      	mov	r0, r3
    9d96:	4b13      	ldr	r3, [pc, #76]	; (9de4 <_usb_d_dev_reset_epts+0x70>)
    9d98:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9d9a:	79fa      	ldrb	r2, [r7, #7]
    9d9c:	4910      	ldr	r1, [pc, #64]	; (9de0 <_usb_d_dev_reset_epts+0x6c>)
    9d9e:	4613      	mov	r3, r2
    9da0:	009b      	lsls	r3, r3, #2
    9da2:	4413      	add	r3, r2
    9da4:	009b      	lsls	r3, r3, #2
    9da6:	440b      	add	r3, r1
    9da8:	3326      	adds	r3, #38	; 0x26
    9daa:	22ff      	movs	r2, #255	; 0xff
    9dac:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9dae:	79fa      	ldrb	r2, [r7, #7]
    9db0:	490b      	ldr	r1, [pc, #44]	; (9de0 <_usb_d_dev_reset_epts+0x6c>)
    9db2:	4613      	mov	r3, r2
    9db4:	009b      	lsls	r3, r3, #2
    9db6:	4413      	add	r3, r2
    9db8:	009b      	lsls	r3, r3, #2
    9dba:	440b      	add	r3, r1
    9dbc:	3327      	adds	r3, #39	; 0x27
    9dbe:	2200      	movs	r2, #0
    9dc0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9dc2:	79fb      	ldrb	r3, [r7, #7]
    9dc4:	3301      	adds	r3, #1
    9dc6:	71fb      	strb	r3, [r7, #7]
    9dc8:	79fb      	ldrb	r3, [r7, #7]
    9dca:	2b08      	cmp	r3, #8
    9dcc:	d9d8      	bls.n	9d80 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9dce:	22a0      	movs	r2, #160	; 0xa0
    9dd0:	2100      	movs	r1, #0
    9dd2:	4805      	ldr	r0, [pc, #20]	; (9de8 <_usb_d_dev_reset_epts+0x74>)
    9dd4:	4b05      	ldr	r3, [pc, #20]	; (9dec <_usb_d_dev_reset_epts+0x78>)
    9dd6:	4798      	blx	r3
}
    9dd8:	bf00      	nop
    9dda:	3708      	adds	r7, #8
    9ddc:	46bd      	mov	sp, r7
    9dde:	bd80      	pop	{r7, pc}
    9de0:	2000096c 	.word	0x2000096c
    9de4:	0000a639 	.word	0x0000a639
    9de8:	20000a34 	.word	0x20000a34
    9dec:	0000e9d9 	.word	0x0000e9d9

00009df0 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9df0:	b580      	push	{r7, lr}
    9df2:	b084      	sub	sp, #16
    9df4:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9df6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9dfa:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9dfc:	2301      	movs	r3, #1
    9dfe:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9e00:	2304      	movs	r3, #4
    9e02:	713b      	strb	r3, [r7, #4]
    9e04:	2300      	movs	r3, #0
    9e06:	717b      	strb	r3, [r7, #5]
    9e08:	2300      	movs	r3, #0
    9e0a:	71bb      	strb	r3, [r7, #6]
    9e0c:	2300      	movs	r3, #0
    9e0e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9e10:	2101      	movs	r1, #1
    9e12:	68f8      	ldr	r0, [r7, #12]
    9e14:	4b26      	ldr	r3, [pc, #152]	; (9eb0 <_usb_d_dev_init+0xc0>)
    9e16:	4798      	blx	r3
    9e18:	4603      	mov	r3, r0
    9e1a:	f083 0301 	eor.w	r3, r3, #1
    9e1e:	b2db      	uxtb	r3, r3
    9e20:	2b00      	cmp	r3, #0
    9e22:	d011      	beq.n	9e48 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9e24:	2102      	movs	r1, #2
    9e26:	68f8      	ldr	r0, [r7, #12]
    9e28:	4b22      	ldr	r3, [pc, #136]	; (9eb4 <_usb_d_dev_init+0xc4>)
    9e2a:	4798      	blx	r3
    9e2c:	4603      	mov	r3, r0
    9e2e:	2b00      	cmp	r3, #0
    9e30:	d006      	beq.n	9e40 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9e32:	68f8      	ldr	r0, [r7, #12]
    9e34:	4b20      	ldr	r3, [pc, #128]	; (9eb8 <_usb_d_dev_init+0xc8>)
    9e36:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9e38:	2102      	movs	r1, #2
    9e3a:	68f8      	ldr	r0, [r7, #12]
    9e3c:	4b1f      	ldr	r3, [pc, #124]	; (9ebc <_usb_d_dev_init+0xcc>)
    9e3e:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9e40:	2101      	movs	r1, #1
    9e42:	68f8      	ldr	r0, [r7, #12]
    9e44:	4b1e      	ldr	r3, [pc, #120]	; (9ec0 <_usb_d_dev_init+0xd0>)
    9e46:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9e48:	2101      	movs	r1, #1
    9e4a:	68f8      	ldr	r0, [r7, #12]
    9e4c:	4b1b      	ldr	r3, [pc, #108]	; (9ebc <_usb_d_dev_init+0xcc>)
    9e4e:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9e50:	4b1c      	ldr	r3, [pc, #112]	; (9ec4 <_usb_d_dev_init+0xd4>)
    9e52:	4a1d      	ldr	r2, [pc, #116]	; (9ec8 <_usb_d_dev_init+0xd8>)
    9e54:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9e56:	4b1b      	ldr	r3, [pc, #108]	; (9ec4 <_usb_d_dev_init+0xd4>)
    9e58:	4a1b      	ldr	r2, [pc, #108]	; (9ec8 <_usb_d_dev_init+0xd8>)
    9e5a:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9e5c:	4b19      	ldr	r3, [pc, #100]	; (9ec4 <_usb_d_dev_init+0xd4>)
    9e5e:	4a1a      	ldr	r2, [pc, #104]	; (9ec8 <_usb_d_dev_init+0xd8>)
    9e60:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9e62:	4b18      	ldr	r3, [pc, #96]	; (9ec4 <_usb_d_dev_init+0xd4>)
    9e64:	4a18      	ldr	r2, [pc, #96]	; (9ec8 <_usb_d_dev_init+0xd8>)
    9e66:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9e68:	4b16      	ldr	r3, [pc, #88]	; (9ec4 <_usb_d_dev_init+0xd4>)
    9e6a:	4a17      	ldr	r2, [pc, #92]	; (9ec8 <_usb_d_dev_init+0xd8>)
    9e6c:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9e6e:	4b17      	ldr	r3, [pc, #92]	; (9ecc <_usb_d_dev_init+0xdc>)
    9e70:	4798      	blx	r3

	_usb_load_calib();
    9e72:	4b17      	ldr	r3, [pc, #92]	; (9ed0 <_usb_d_dev_init+0xe0>)
    9e74:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9e76:	2104      	movs	r1, #4
    9e78:	68f8      	ldr	r0, [r7, #12]
    9e7a:	4b11      	ldr	r3, [pc, #68]	; (9ec0 <_usb_d_dev_init+0xd0>)
    9e7c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9e7e:	4b15      	ldr	r3, [pc, #84]	; (9ed4 <_usb_d_dev_init+0xe4>)
    9e80:	4619      	mov	r1, r3
    9e82:	68f8      	ldr	r0, [r7, #12]
    9e84:	4b14      	ldr	r3, [pc, #80]	; (9ed8 <_usb_d_dev_init+0xe8>)
    9e86:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9e88:	7afb      	ldrb	r3, [r7, #11]
    9e8a:	f107 0210 	add.w	r2, r7, #16
    9e8e:	4413      	add	r3, r2
    9e90:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9e94:	f043 0301 	orr.w	r3, r3, #1
    9e98:	b2db      	uxtb	r3, r3
    9e9a:	b29b      	uxth	r3, r3
    9e9c:	4619      	mov	r1, r3
    9e9e:	68f8      	ldr	r0, [r7, #12]
    9ea0:	4b0e      	ldr	r3, [pc, #56]	; (9edc <_usb_d_dev_init+0xec>)
    9ea2:	4798      	blx	r3

	return ERR_NONE;
    9ea4:	2300      	movs	r3, #0
}
    9ea6:	4618      	mov	r0, r3
    9ea8:	3710      	adds	r7, #16
    9eaa:	46bd      	mov	sp, r7
    9eac:	bd80      	pop	{r7, pc}
    9eae:	bf00      	nop
    9eb0:	00008489 	.word	0x00008489
    9eb4:	000087d9 	.word	0x000087d9
    9eb8:	000087ad 	.word	0x000087ad
    9ebc:	0000845f 	.word	0x0000845f
    9ec0:	00008809 	.word	0x00008809
    9ec4:	2000096c 	.word	0x2000096c
    9ec8:	000088d1 	.word	0x000088d1
    9ecc:	00009d75 	.word	0x00009d75
    9ed0:	000088e9 	.word	0x000088e9
    9ed4:	20000a34 	.word	0x20000a34
    9ed8:	000088b5 	.word	0x000088b5
    9edc:	00008879 	.word	0x00008879

00009ee0 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9ee0:	b580      	push	{r7, lr}
    9ee2:	b082      	sub	sp, #8
    9ee4:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9ee6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9eea:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9eec:	2103      	movs	r1, #3
    9eee:	6878      	ldr	r0, [r7, #4]
    9ef0:	4b17      	ldr	r3, [pc, #92]	; (9f50 <_usb_d_dev_enable+0x70>)
    9ef2:	4798      	blx	r3
    9ef4:	4603      	mov	r3, r0
    9ef6:	2b00      	cmp	r3, #0
    9ef8:	d002      	beq.n	9f00 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9efa:	f06f 0310 	mvn.w	r3, #16
    9efe:	e023      	b.n	9f48 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9f00:	6878      	ldr	r0, [r7, #4]
    9f02:	4b14      	ldr	r3, [pc, #80]	; (9f54 <_usb_d_dev_enable+0x74>)
    9f04:	4798      	blx	r3
    9f06:	4603      	mov	r3, r0
    9f08:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9f0a:	78fb      	ldrb	r3, [r7, #3]
    9f0c:	f003 0302 	and.w	r3, r3, #2
    9f10:	2b00      	cmp	r3, #0
    9f12:	d107      	bne.n	9f24 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9f14:	78fb      	ldrb	r3, [r7, #3]
    9f16:	f043 0302 	orr.w	r3, r3, #2
    9f1a:	b2db      	uxtb	r3, r3
    9f1c:	4619      	mov	r1, r3
    9f1e:	6878      	ldr	r0, [r7, #4]
    9f20:	4b0d      	ldr	r3, [pc, #52]	; (9f58 <_usb_d_dev_enable+0x78>)
    9f22:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9f24:	2050      	movs	r0, #80	; 0x50
    9f26:	4b0d      	ldr	r3, [pc, #52]	; (9f5c <_usb_d_dev_enable+0x7c>)
    9f28:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9f2a:	2051      	movs	r0, #81	; 0x51
    9f2c:	4b0b      	ldr	r3, [pc, #44]	; (9f5c <_usb_d_dev_enable+0x7c>)
    9f2e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9f30:	2052      	movs	r0, #82	; 0x52
    9f32:	4b0a      	ldr	r3, [pc, #40]	; (9f5c <_usb_d_dev_enable+0x7c>)
    9f34:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9f36:	2053      	movs	r0, #83	; 0x53
    9f38:	4b08      	ldr	r3, [pc, #32]	; (9f5c <_usb_d_dev_enable+0x7c>)
    9f3a:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9f3c:	f240 218d 	movw	r1, #653	; 0x28d
    9f40:	6878      	ldr	r0, [r7, #4]
    9f42:	4b07      	ldr	r3, [pc, #28]	; (9f60 <_usb_d_dev_enable+0x80>)
    9f44:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9f46:	2300      	movs	r3, #0
}
    9f48:	4618      	mov	r0, r3
    9f4a:	3708      	adds	r7, #8
    9f4c:	46bd      	mov	sp, r7
    9f4e:	bd80      	pop	{r7, pc}
    9f50:	00008783 	.word	0x00008783
    9f54:	00008831 	.word	0x00008831
    9f58:	00008809 	.word	0x00008809
    9f5c:	00008395 	.word	0x00008395
    9f60:	0000872d 	.word	0x0000872d

00009f64 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9f64:	b580      	push	{r7, lr}
    9f66:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9f68:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f6c:	4b01      	ldr	r3, [pc, #4]	; (9f74 <_usb_d_dev_attach+0x10>)
    9f6e:	4798      	blx	r3
}
    9f70:	bf00      	nop
    9f72:	bd80      	pop	{r7, pc}
    9f74:	00008855 	.word	0x00008855

00009f78 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9f78:	b580      	push	{r7, lr}
    9f7a:	b082      	sub	sp, #8
    9f7c:	af00      	add	r7, sp, #0
    9f7e:	4603      	mov	r3, r0
    9f80:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9f82:	79fb      	ldrb	r3, [r7, #7]
    9f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9f88:	b2db      	uxtb	r3, r3
    9f8a:	4619      	mov	r1, r3
    9f8c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9f90:	4b02      	ldr	r3, [pc, #8]	; (9f9c <_usb_d_dev_set_address+0x24>)
    9f92:	4798      	blx	r3
}
    9f94:	bf00      	nop
    9f96:	3708      	adds	r7, #8
    9f98:	46bd      	mov	sp, r7
    9f9a:	bd80      	pop	{r7, pc}
    9f9c:	00008897 	.word	0x00008897

00009fa0 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9fa0:	b590      	push	{r4, r7, lr}
    9fa2:	b085      	sub	sp, #20
    9fa4:	af00      	add	r7, sp, #0
    9fa6:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9fa8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9fac:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9fae:	687b      	ldr	r3, [r7, #4]
    9fb0:	7c9b      	ldrb	r3, [r3, #18]
    9fb2:	f003 030f 	and.w	r3, r3, #15
    9fb6:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9fb8:	687b      	ldr	r3, [r7, #4]
    9fba:	68db      	ldr	r3, [r3, #12]
    9fbc:	461a      	mov	r2, r3
    9fbe:	7afb      	ldrb	r3, [r7, #11]
    9fc0:	2100      	movs	r1, #0
    9fc2:	4618      	mov	r0, r3
    9fc4:	4b0f      	ldr	r3, [pc, #60]	; (a004 <_usb_d_dev_trans_setup+0x64>)
    9fc6:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9fc8:	687b      	ldr	r3, [r7, #4]
    9fca:	8a1b      	ldrh	r3, [r3, #16]
    9fcc:	461a      	mov	r2, r3
    9fce:	7af8      	ldrb	r0, [r7, #11]
    9fd0:	2300      	movs	r3, #0
    9fd2:	2100      	movs	r1, #0
    9fd4:	4c0c      	ldr	r4, [pc, #48]	; (a008 <_usb_d_dev_trans_setup+0x68>)
    9fd6:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9fd8:	7afb      	ldrb	r3, [r7, #11]
    9fda:	22b0      	movs	r2, #176	; 0xb0
    9fdc:	4619      	mov	r1, r3
    9fde:	68f8      	ldr	r0, [r7, #12]
    9fe0:	4b0a      	ldr	r3, [pc, #40]	; (a00c <_usb_d_dev_trans_setup+0x6c>)
    9fe2:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9fe4:	7afb      	ldrb	r3, [r7, #11]
    9fe6:	2200      	movs	r2, #0
    9fe8:	2100      	movs	r1, #0
    9fea:	4618      	mov	r0, r3
    9fec:	4b08      	ldr	r3, [pc, #32]	; (a010 <_usb_d_dev_trans_setup+0x70>)
    9fee:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9ff0:	7afb      	ldrb	r3, [r7, #11]
    9ff2:	2210      	movs	r2, #16
    9ff4:	4619      	mov	r1, r3
    9ff6:	68f8      	ldr	r0, [r7, #12]
    9ff8:	4b06      	ldr	r3, [pc, #24]	; (a014 <_usb_d_dev_trans_setup+0x74>)
    9ffa:	4798      	blx	r3
}
    9ffc:	bf00      	nop
    9ffe:	3714      	adds	r7, #20
    a000:	46bd      	mov	sp, r7
    a002:	bd90      	pop	{r4, r7, pc}
    a004:	00008d35 	.word	0x00008d35
    a008:	00008ebd 	.word	0x00008ebd
    a00c:	00008595 	.word	0x00008595
    a010:	00008f8d 	.word	0x00008f8d
    a014:	000085e9 	.word	0x000085e9

0000a018 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a018:	b580      	push	{r7, lr}
    a01a:	b088      	sub	sp, #32
    a01c:	af00      	add	r7, sp, #0
    a01e:	4603      	mov	r3, r0
    a020:	71fb      	strb	r3, [r7, #7]
    a022:	460b      	mov	r3, r1
    a024:	71bb      	strb	r3, [r7, #6]
    a026:	4613      	mov	r3, r2
    a028:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a02a:	79fb      	ldrb	r3, [r7, #7]
    a02c:	f003 030f 	and.w	r3, r3, #15
    a030:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a032:	79fb      	ldrb	r3, [r7, #7]
    a034:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a038:	2b00      	cmp	r3, #0
    a03a:	bf14      	ite	ne
    a03c:	2301      	movne	r3, #1
    a03e:	2300      	moveq	r3, #0
    a040:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a042:	7fba      	ldrb	r2, [r7, #30]
    a044:	7ffb      	ldrb	r3, [r7, #31]
    a046:	4611      	mov	r1, r2
    a048:	4618      	mov	r0, r3
    a04a:	4b3e      	ldr	r3, [pc, #248]	; (a144 <_usb_d_dev_ep_init+0x12c>)
    a04c:	4798      	blx	r3
    a04e:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a050:	79bb      	ldrb	r3, [r7, #6]
    a052:	f003 0303 	and.w	r3, r3, #3
    a056:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a058:	7ffa      	ldrb	r2, [r7, #31]
    a05a:	4613      	mov	r3, r2
    a05c:	005b      	lsls	r3, r3, #1
    a05e:	4413      	add	r3, r2
    a060:	009b      	lsls	r3, r3, #2
    a062:	4a39      	ldr	r2, [pc, #228]	; (a148 <_usb_d_dev_ep_init+0x130>)
    a064:	4413      	add	r3, r2
    a066:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a068:	7ffb      	ldrb	r3, [r7, #31]
    a06a:	2b04      	cmp	r3, #4
    a06c:	d902      	bls.n	a074 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a06e:	f06f 0311 	mvn.w	r3, #17
    a072:	e063      	b.n	a13c <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a074:	69bb      	ldr	r3, [r7, #24]
    a076:	7c9b      	ldrb	r3, [r3, #18]
    a078:	2bff      	cmp	r3, #255	; 0xff
    a07a:	d002      	beq.n	a082 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a07c:	f06f 0313 	mvn.w	r3, #19
    a080:	e05c      	b.n	a13c <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a082:	7dfb      	ldrb	r3, [r7, #23]
    a084:	2b00      	cmp	r3, #0
    a086:	d11f      	bne.n	a0c8 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a088:	7fbb      	ldrb	r3, [r7, #30]
    a08a:	2b00      	cmp	r3, #0
    a08c:	bf14      	ite	ne
    a08e:	2301      	movne	r3, #1
    a090:	2300      	moveq	r3, #0
    a092:	b2db      	uxtb	r3, r3
    a094:	f083 0301 	eor.w	r3, r3, #1
    a098:	b2db      	uxtb	r3, r3
    a09a:	f003 0301 	and.w	r3, r3, #1
    a09e:	b2da      	uxtb	r2, r3
    a0a0:	7ffb      	ldrb	r3, [r7, #31]
    a0a2:	4611      	mov	r1, r2
    a0a4:	4618      	mov	r0, r3
    a0a6:	4b27      	ldr	r3, [pc, #156]	; (a144 <_usb_d_dev_ep_init+0x12c>)
    a0a8:	4798      	blx	r3
    a0aa:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a0ac:	68fb      	ldr	r3, [r7, #12]
    a0ae:	7c9b      	ldrb	r3, [r3, #18]
    a0b0:	2bff      	cmp	r3, #255	; 0xff
    a0b2:	d002      	beq.n	a0ba <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a0b4:	f06f 0313 	mvn.w	r3, #19
    a0b8:	e040      	b.n	a13c <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a0ba:	693b      	ldr	r3, [r7, #16]
    a0bc:	681b      	ldr	r3, [r3, #0]
    a0be:	2b00      	cmp	r3, #0
    a0c0:	d102      	bne.n	a0c8 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a0c2:	f06f 0312 	mvn.w	r3, #18
    a0c6:	e039      	b.n	a13c <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a0c8:	7fbb      	ldrb	r3, [r7, #30]
    a0ca:	2b00      	cmp	r3, #0
    a0cc:	d007      	beq.n	a0de <_usb_d_dev_ep_init+0xc6>
    a0ce:	693b      	ldr	r3, [r7, #16]
    a0d0:	685b      	ldr	r3, [r3, #4]
    a0d2:	2b00      	cmp	r3, #0
    a0d4:	bf14      	ite	ne
    a0d6:	2301      	movne	r3, #1
    a0d8:	2300      	moveq	r3, #0
    a0da:	b2db      	uxtb	r3, r3
    a0dc:	e006      	b.n	a0ec <_usb_d_dev_ep_init+0xd4>
    a0de:	693b      	ldr	r3, [r7, #16]
    a0e0:	681b      	ldr	r3, [r3, #0]
    a0e2:	2b00      	cmp	r3, #0
    a0e4:	bf14      	ite	ne
    a0e6:	2301      	movne	r3, #1
    a0e8:	2300      	moveq	r3, #0
    a0ea:	b2db      	uxtb	r3, r3
    a0ec:	2b00      	cmp	r3, #0
    a0ee:	d00f      	beq.n	a110 <_usb_d_dev_ep_init+0xf8>
    a0f0:	7fbb      	ldrb	r3, [r7, #30]
    a0f2:	2b00      	cmp	r3, #0
    a0f4:	d003      	beq.n	a0fe <_usb_d_dev_ep_init+0xe6>
    a0f6:	693b      	ldr	r3, [r7, #16]
    a0f8:	895b      	ldrh	r3, [r3, #10]
    a0fa:	461a      	mov	r2, r3
    a0fc:	e002      	b.n	a104 <_usb_d_dev_ep_init+0xec>
    a0fe:	693b      	ldr	r3, [r7, #16]
    a100:	891b      	ldrh	r3, [r3, #8]
    a102:	461a      	mov	r2, r3
    a104:	88bb      	ldrh	r3, [r7, #4]
    a106:	429a      	cmp	r2, r3
    a108:	da02      	bge.n	a110 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a10a:	f06f 0312 	mvn.w	r3, #18
    a10e:	e015      	b.n	a13c <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a110:	7fbb      	ldrb	r3, [r7, #30]
    a112:	2b00      	cmp	r3, #0
    a114:	d002      	beq.n	a11c <_usb_d_dev_ep_init+0x104>
    a116:	693b      	ldr	r3, [r7, #16]
    a118:	685b      	ldr	r3, [r3, #4]
    a11a:	e001      	b.n	a120 <_usb_d_dev_ep_init+0x108>
    a11c:	693b      	ldr	r3, [r7, #16]
    a11e:	681b      	ldr	r3, [r3, #0]
    a120:	69ba      	ldr	r2, [r7, #24]
    a122:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a124:	69bb      	ldr	r3, [r7, #24]
    a126:	88ba      	ldrh	r2, [r7, #4]
    a128:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a12a:	7dfb      	ldrb	r3, [r7, #23]
    a12c:	3301      	adds	r3, #1
    a12e:	b2da      	uxtb	r2, r3
    a130:	69bb      	ldr	r3, [r7, #24]
    a132:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a134:	69bb      	ldr	r3, [r7, #24]
    a136:	79fa      	ldrb	r2, [r7, #7]
    a138:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a13a:	2300      	movs	r3, #0
}
    a13c:	4618      	mov	r0, r3
    a13e:	3720      	adds	r7, #32
    a140:	46bd      	mov	sp, r7
    a142:	bd80      	pop	{r7, pc}
    a144:	00009049 	.word	0x00009049
    a148:	0000eff0 	.word	0x0000eff0

0000a14c <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a14c:	b580      	push	{r7, lr}
    a14e:	b086      	sub	sp, #24
    a150:	af00      	add	r7, sp, #0
    a152:	4603      	mov	r3, r0
    a154:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a156:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a15a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a15c:	79fb      	ldrb	r3, [r7, #7]
    a15e:	f003 030f 	and.w	r3, r3, #15
    a162:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a164:	79fb      	ldrb	r3, [r7, #7]
    a166:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a16a:	2b00      	cmp	r3, #0
    a16c:	bf14      	ite	ne
    a16e:	2301      	movne	r3, #1
    a170:	2300      	moveq	r3, #0
    a172:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a174:	7cba      	ldrb	r2, [r7, #18]
    a176:	7cfb      	ldrb	r3, [r7, #19]
    a178:	4611      	mov	r1, r2
    a17a:	4618      	mov	r0, r3
    a17c:	4b2a      	ldr	r3, [pc, #168]	; (a228 <_usb_d_dev_ep_deinit+0xdc>)
    a17e:	4798      	blx	r3
    a180:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a182:	7cfb      	ldrb	r3, [r7, #19]
    a184:	2b04      	cmp	r3, #4
    a186:	d84a      	bhi.n	a21e <_usb_d_dev_ep_deinit+0xd2>
    a188:	68fb      	ldr	r3, [r7, #12]
    a18a:	7c9b      	ldrb	r3, [r3, #18]
    a18c:	2bff      	cmp	r3, #255	; 0xff
    a18e:	d046      	beq.n	a21e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a190:	7cbb      	ldrb	r3, [r7, #18]
    a192:	2203      	movs	r2, #3
    a194:	4619      	mov	r1, r3
    a196:	68f8      	ldr	r0, [r7, #12]
    a198:	4b24      	ldr	r3, [pc, #144]	; (a22c <_usb_d_dev_ep_deinit+0xe0>)
    a19a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a19c:	68fb      	ldr	r3, [r7, #12]
    a19e:	7cdb      	ldrb	r3, [r3, #19]
    a1a0:	f003 0307 	and.w	r3, r3, #7
    a1a4:	b2db      	uxtb	r3, r3
    a1a6:	2b01      	cmp	r3, #1
    a1a8:	d107      	bne.n	a1ba <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a1aa:	79fb      	ldrb	r3, [r7, #7]
    a1ac:	697a      	ldr	r2, [r7, #20]
    a1ae:	3308      	adds	r3, #8
    a1b0:	015b      	lsls	r3, r3, #5
    a1b2:	4413      	add	r3, r2
    a1b4:	2200      	movs	r2, #0
    a1b6:	701a      	strb	r2, [r3, #0]
    a1b8:	e02a      	b.n	a210 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a1ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a1be:	2b00      	cmp	r3, #0
    a1c0:	da15      	bge.n	a1ee <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a1c2:	79fb      	ldrb	r3, [r7, #7]
    a1c4:	f003 030f 	and.w	r3, r3, #15
    a1c8:	79fa      	ldrb	r2, [r7, #7]
    a1ca:	f002 020f 	and.w	r2, r2, #15
    a1ce:	6979      	ldr	r1, [r7, #20]
    a1d0:	3208      	adds	r2, #8
    a1d2:	0152      	lsls	r2, r2, #5
    a1d4:	440a      	add	r2, r1
    a1d6:	7812      	ldrb	r2, [r2, #0]
    a1d8:	b2d2      	uxtb	r2, r2
    a1da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a1de:	b2d1      	uxtb	r1, r2
    a1e0:	697a      	ldr	r2, [r7, #20]
    a1e2:	3308      	adds	r3, #8
    a1e4:	015b      	lsls	r3, r3, #5
    a1e6:	4413      	add	r3, r2
    a1e8:	460a      	mov	r2, r1
    a1ea:	701a      	strb	r2, [r3, #0]
    a1ec:	e010      	b.n	a210 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a1ee:	79fb      	ldrb	r3, [r7, #7]
    a1f0:	79fa      	ldrb	r2, [r7, #7]
    a1f2:	6979      	ldr	r1, [r7, #20]
    a1f4:	3208      	adds	r2, #8
    a1f6:	0152      	lsls	r2, r2, #5
    a1f8:	440a      	add	r2, r1
    a1fa:	7812      	ldrb	r2, [r2, #0]
    a1fc:	b2d2      	uxtb	r2, r2
    a1fe:	f022 0207 	bic.w	r2, r2, #7
    a202:	b2d1      	uxtb	r1, r2
    a204:	697a      	ldr	r2, [r7, #20]
    a206:	3308      	adds	r3, #8
    a208:	015b      	lsls	r3, r3, #5
    a20a:	4413      	add	r3, r2
    a20c:	460a      	mov	r2, r1
    a20e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a210:	68fb      	ldr	r3, [r7, #12]
    a212:	2200      	movs	r2, #0
    a214:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a216:	68fb      	ldr	r3, [r7, #12]
    a218:	22ff      	movs	r2, #255	; 0xff
    a21a:	749a      	strb	r2, [r3, #18]
    a21c:	e000      	b.n	a220 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a21e:	bf00      	nop
}
    a220:	3718      	adds	r7, #24
    a222:	46bd      	mov	sp, r7
    a224:	bd80      	pop	{r7, pc}
    a226:	bf00      	nop
    a228:	00009049 	.word	0x00009049
    a22c:	0000a681 	.word	0x0000a681

0000a230 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a230:	b5b0      	push	{r4, r5, r7, lr}
    a232:	b088      	sub	sp, #32
    a234:	af00      	add	r7, sp, #0
    a236:	4603      	mov	r3, r0
    a238:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a23a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a23e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a240:	79fb      	ldrb	r3, [r7, #7]
    a242:	f003 030f 	and.w	r3, r3, #15
    a246:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a248:	79fb      	ldrb	r3, [r7, #7]
    a24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a24e:	2b00      	cmp	r3, #0
    a250:	bf14      	ite	ne
    a252:	2301      	movne	r3, #1
    a254:	2300      	moveq	r3, #0
    a256:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a258:	7eba      	ldrb	r2, [r7, #26]
    a25a:	7efb      	ldrb	r3, [r7, #27]
    a25c:	4611      	mov	r1, r2
    a25e:	4618      	mov	r0, r3
    a260:	4b70      	ldr	r3, [pc, #448]	; (a424 <_usb_d_dev_ep_enable+0x1f4>)
    a262:	4798      	blx	r3
    a264:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a266:	7efb      	ldrb	r3, [r7, #27]
    a268:	4619      	mov	r1, r3
    a26a:	69f8      	ldr	r0, [r7, #28]
    a26c:	4b6e      	ldr	r3, [pc, #440]	; (a428 <_usb_d_dev_ep_enable+0x1f8>)
    a26e:	4798      	blx	r3
    a270:	4603      	mov	r3, r0
    a272:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a274:	7efb      	ldrb	r3, [r7, #27]
    a276:	2b04      	cmp	r3, #4
    a278:	d803      	bhi.n	a282 <_usb_d_dev_ep_enable+0x52>
    a27a:	697b      	ldr	r3, [r7, #20]
    a27c:	7c9b      	ldrb	r3, [r3, #18]
    a27e:	2bff      	cmp	r3, #255	; 0xff
    a280:	d102      	bne.n	a288 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a282:	f06f 0311 	mvn.w	r3, #17
    a286:	e0c8      	b.n	a41a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a288:	7efb      	ldrb	r3, [r7, #27]
    a28a:	015b      	lsls	r3, r3, #5
    a28c:	4a67      	ldr	r2, [pc, #412]	; (a42c <_usb_d_dev_ep_enable+0x1fc>)
    a28e:	4413      	add	r3, r2
    a290:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a292:	697b      	ldr	r3, [r7, #20]
    a294:	7cdb      	ldrb	r3, [r3, #19]
    a296:	f003 0307 	and.w	r3, r3, #7
    a29a:	b2db      	uxtb	r3, r3
    a29c:	2b01      	cmp	r3, #1
    a29e:	d14b      	bne.n	a338 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a2a0:	7cfb      	ldrb	r3, [r7, #19]
    a2a2:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a2a6:	2b00      	cmp	r3, #0
    a2a8:	d002      	beq.n	a2b0 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a2aa:	f06f 0313 	mvn.w	r3, #19
    a2ae:	e0b4      	b.n	a41a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a2b0:	7efb      	ldrb	r3, [r7, #27]
    a2b2:	2211      	movs	r2, #17
    a2b4:	4619      	mov	r1, r3
    a2b6:	69f8      	ldr	r0, [r7, #28]
    a2b8:	4b5d      	ldr	r3, [pc, #372]	; (a430 <_usb_d_dev_ep_enable+0x200>)
    a2ba:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a2bc:	697b      	ldr	r3, [r7, #20]
    a2be:	8a1b      	ldrh	r3, [r3, #16]
    a2c0:	039b      	lsls	r3, r3, #14
    a2c2:	4c5c      	ldr	r4, [pc, #368]	; (a434 <_usb_d_dev_ep_enable+0x204>)
    a2c4:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a2c6:	697b      	ldr	r3, [r7, #20]
    a2c8:	8a1b      	ldrh	r3, [r3, #16]
    a2ca:	4618      	mov	r0, r3
    a2cc:	4b5a      	ldr	r3, [pc, #360]	; (a438 <_usb_d_dev_ep_enable+0x208>)
    a2ce:	4798      	blx	r3
    a2d0:	4603      	mov	r3, r0
    a2d2:	071b      	lsls	r3, r3, #28
    a2d4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a2d8:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a2dc:	68fb      	ldr	r3, [r7, #12]
    a2de:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a2e0:	68fb      	ldr	r3, [r7, #12]
    a2e2:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a2e6:	697b      	ldr	r3, [r7, #20]
    a2e8:	8a1b      	ldrh	r3, [r3, #16]
    a2ea:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a2ee:	697b      	ldr	r3, [r7, #20]
    a2f0:	8a1b      	ldrh	r3, [r3, #16]
    a2f2:	4618      	mov	r0, r3
    a2f4:	4b50      	ldr	r3, [pc, #320]	; (a438 <_usb_d_dev_ep_enable+0x208>)
    a2f6:	4798      	blx	r3
    a2f8:	4603      	mov	r3, r0
    a2fa:	071b      	lsls	r3, r3, #28
    a2fc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a300:	432b      	orrs	r3, r5
    a302:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a304:	7efb      	ldrb	r3, [r7, #27]
    a306:	2200      	movs	r2, #0
    a308:	2100      	movs	r1, #0
    a30a:	4618      	mov	r0, r3
    a30c:	4b4b      	ldr	r3, [pc, #300]	; (a43c <_usb_d_dev_ep_enable+0x20c>)
    a30e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a310:	7efb      	ldrb	r3, [r7, #27]
    a312:	2200      	movs	r2, #0
    a314:	2101      	movs	r1, #1
    a316:	4618      	mov	r0, r3
    a318:	4b49      	ldr	r3, [pc, #292]	; (a440 <_usb_d_dev_ep_enable+0x210>)
    a31a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a31c:	7efb      	ldrb	r3, [r7, #27]
    a31e:	2100      	movs	r1, #0
    a320:	4618      	mov	r0, r3
    a322:	4b48      	ldr	r3, [pc, #288]	; (a444 <_usb_d_dev_ep_enable+0x214>)
    a324:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a326:	7efb      	ldrb	r3, [r7, #27]
    a328:	2101      	movs	r1, #1
    a32a:	4618      	mov	r0, r3
    a32c:	4b45      	ldr	r3, [pc, #276]	; (a444 <_usb_d_dev_ep_enable+0x214>)
    a32e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a330:	6978      	ldr	r0, [r7, #20]
    a332:	4b45      	ldr	r3, [pc, #276]	; (a448 <_usb_d_dev_ep_enable+0x218>)
    a334:	4798      	blx	r3
    a336:	e06f      	b.n	a418 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a338:	7ebb      	ldrb	r3, [r7, #26]
    a33a:	2b00      	cmp	r3, #0
    a33c:	d038      	beq.n	a3b0 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a33e:	7cfb      	ldrb	r3, [r7, #19]
    a340:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a344:	2b00      	cmp	r3, #0
    a346:	d002      	beq.n	a34e <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a348:	f06f 0313 	mvn.w	r3, #19
    a34c:	e065      	b.n	a41a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a34e:	697b      	ldr	r3, [r7, #20]
    a350:	7cdb      	ldrb	r3, [r3, #19]
    a352:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a356:	b2db      	uxtb	r3, r3
    a358:	011b      	lsls	r3, r3, #4
    a35a:	b2db      	uxtb	r3, r3
    a35c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a360:	b2da      	uxtb	r2, r3
    a362:	7cfb      	ldrb	r3, [r7, #19]
    a364:	4313      	orrs	r3, r2
    a366:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a368:	7cfa      	ldrb	r2, [r7, #19]
    a36a:	7efb      	ldrb	r3, [r7, #27]
    a36c:	4619      	mov	r1, r3
    a36e:	69f8      	ldr	r0, [r7, #28]
    a370:	4b2f      	ldr	r3, [pc, #188]	; (a430 <_usb_d_dev_ep_enable+0x200>)
    a372:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a374:	68fb      	ldr	r3, [r7, #12]
    a376:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a37a:	697b      	ldr	r3, [r7, #20]
    a37c:	8a1b      	ldrh	r3, [r3, #16]
    a37e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a382:	697b      	ldr	r3, [r7, #20]
    a384:	8a1b      	ldrh	r3, [r3, #16]
    a386:	4618      	mov	r0, r3
    a388:	4b2b      	ldr	r3, [pc, #172]	; (a438 <_usb_d_dev_ep_enable+0x208>)
    a38a:	4798      	blx	r3
    a38c:	4603      	mov	r3, r0
    a38e:	071b      	lsls	r3, r3, #28
    a390:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a394:	432b      	orrs	r3, r5
    a396:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a398:	7efb      	ldrb	r3, [r7, #27]
    a39a:	2200      	movs	r2, #0
    a39c:	2101      	movs	r1, #1
    a39e:	4618      	mov	r0, r3
    a3a0:	4b27      	ldr	r3, [pc, #156]	; (a440 <_usb_d_dev_ep_enable+0x210>)
    a3a2:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a3a4:	7efb      	ldrb	r3, [r7, #27]
    a3a6:	2101      	movs	r1, #1
    a3a8:	4618      	mov	r0, r3
    a3aa:	4b26      	ldr	r3, [pc, #152]	; (a444 <_usb_d_dev_ep_enable+0x214>)
    a3ac:	4798      	blx	r3
    a3ae:	e033      	b.n	a418 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a3b0:	7cfb      	ldrb	r3, [r7, #19]
    a3b2:	f003 0307 	and.w	r3, r3, #7
    a3b6:	2b00      	cmp	r3, #0
    a3b8:	d002      	beq.n	a3c0 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a3ba:	f06f 0313 	mvn.w	r3, #19
    a3be:	e02c      	b.n	a41a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a3c0:	697b      	ldr	r3, [r7, #20]
    a3c2:	7cdb      	ldrb	r3, [r3, #19]
    a3c4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a3c8:	b2db      	uxtb	r3, r3
    a3ca:	461a      	mov	r2, r3
    a3cc:	7cfb      	ldrb	r3, [r7, #19]
    a3ce:	4313      	orrs	r3, r2
    a3d0:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a3d2:	7cfa      	ldrb	r2, [r7, #19]
    a3d4:	7efb      	ldrb	r3, [r7, #27]
    a3d6:	4619      	mov	r1, r3
    a3d8:	69f8      	ldr	r0, [r7, #28]
    a3da:	4b15      	ldr	r3, [pc, #84]	; (a430 <_usb_d_dev_ep_enable+0x200>)
    a3dc:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a3de:	697b      	ldr	r3, [r7, #20]
    a3e0:	8a1b      	ldrh	r3, [r3, #16]
    a3e2:	039b      	lsls	r3, r3, #14
    a3e4:	4c13      	ldr	r4, [pc, #76]	; (a434 <_usb_d_dev_ep_enable+0x204>)
    a3e6:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a3e8:	697b      	ldr	r3, [r7, #20]
    a3ea:	8a1b      	ldrh	r3, [r3, #16]
    a3ec:	4618      	mov	r0, r3
    a3ee:	4b12      	ldr	r3, [pc, #72]	; (a438 <_usb_d_dev_ep_enable+0x208>)
    a3f0:	4798      	blx	r3
    a3f2:	4603      	mov	r3, r0
    a3f4:	071b      	lsls	r3, r3, #28
    a3f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a3fa:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a3fe:	68fb      	ldr	r3, [r7, #12]
    a400:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a402:	7efb      	ldrb	r3, [r7, #27]
    a404:	2200      	movs	r2, #0
    a406:	2100      	movs	r1, #0
    a408:	4618      	mov	r0, r3
    a40a:	4b0c      	ldr	r3, [pc, #48]	; (a43c <_usb_d_dev_ep_enable+0x20c>)
    a40c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a40e:	7efb      	ldrb	r3, [r7, #27]
    a410:	2100      	movs	r1, #0
    a412:	4618      	mov	r0, r3
    a414:	4b0b      	ldr	r3, [pc, #44]	; (a444 <_usb_d_dev_ep_enable+0x214>)
    a416:	4798      	blx	r3
	}

	return USB_OK;
    a418:	2300      	movs	r3, #0
}
    a41a:	4618      	mov	r0, r3
    a41c:	3720      	adds	r7, #32
    a41e:	46bd      	mov	sp, r7
    a420:	bdb0      	pop	{r4, r5, r7, pc}
    a422:	bf00      	nop
    a424:	00009049 	.word	0x00009049
    a428:	000086cf 	.word	0x000086cf
    a42c:	20000a34 	.word	0x20000a34
    a430:	000086a5 	.word	0x000086a5
    a434:	0fffc000 	.word	0x0fffc000
    a438:	00008fe5 	.word	0x00008fe5
    a43c:	00008f8d 	.word	0x00008f8d
    a440:	00008f35 	.word	0x00008f35
    a444:	00008efd 	.word	0x00008efd
    a448:	00009fa1 	.word	0x00009fa1

0000a44c <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a44c:	b580      	push	{r7, lr}
    a44e:	b084      	sub	sp, #16
    a450:	af00      	add	r7, sp, #0
    a452:	6078      	str	r0, [r7, #4]
    a454:	460b      	mov	r3, r1
    a456:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a458:	687b      	ldr	r3, [r7, #4]
    a45a:	7c9b      	ldrb	r3, [r3, #18]
    a45c:	f003 030f 	and.w	r3, r3, #15
    a460:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a462:	78fa      	ldrb	r2, [r7, #3]
    a464:	7bfb      	ldrb	r3, [r7, #15]
    a466:	4611      	mov	r1, r2
    a468:	4618      	mov	r0, r3
    a46a:	4b03      	ldr	r3, [pc, #12]	; (a478 <_usb_d_dev_ep_stall_get+0x2c>)
    a46c:	4798      	blx	r3
    a46e:	4603      	mov	r3, r0
}
    a470:	4618      	mov	r0, r3
    a472:	3710      	adds	r7, #16
    a474:	46bd      	mov	sp, r7
    a476:	bd80      	pop	{r7, pc}
    a478:	00008b3d 	.word	0x00008b3d

0000a47c <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a47c:	b580      	push	{r7, lr}
    a47e:	b084      	sub	sp, #16
    a480:	af00      	add	r7, sp, #0
    a482:	6078      	str	r0, [r7, #4]
    a484:	460b      	mov	r3, r1
    a486:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a488:	687b      	ldr	r3, [r7, #4]
    a48a:	7c9b      	ldrb	r3, [r3, #18]
    a48c:	f003 030f 	and.w	r3, r3, #15
    a490:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a492:	78f9      	ldrb	r1, [r7, #3]
    a494:	7bfb      	ldrb	r3, [r7, #15]
    a496:	2201      	movs	r2, #1
    a498:	4618      	mov	r0, r3
    a49a:	4b0a      	ldr	r3, [pc, #40]	; (a4c4 <_usb_d_dev_ep_stall_set+0x48>)
    a49c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a49e:	78fb      	ldrb	r3, [r7, #3]
    a4a0:	2220      	movs	r2, #32
    a4a2:	409a      	lsls	r2, r3
    a4a4:	7bfb      	ldrb	r3, [r7, #15]
    a4a6:	4611      	mov	r1, r2
    a4a8:	4618      	mov	r0, r3
    a4aa:	4b07      	ldr	r3, [pc, #28]	; (a4c8 <_usb_d_dev_ep_stall_set+0x4c>)
    a4ac:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a4ae:	687a      	ldr	r2, [r7, #4]
    a4b0:	7cd3      	ldrb	r3, [r2, #19]
    a4b2:	f043 0308 	orr.w	r3, r3, #8
    a4b6:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a4b8:	2300      	movs	r3, #0
}
    a4ba:	4618      	mov	r0, r3
    a4bc:	3710      	adds	r7, #16
    a4be:	46bd      	mov	sp, r7
    a4c0:	bd80      	pop	{r7, pc}
    a4c2:	bf00      	nop
    a4c4:	00008ae5 	.word	0x00008ae5
    a4c8:	00008a65 	.word	0x00008a65

0000a4cc <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a4cc:	b580      	push	{r7, lr}
    a4ce:	b084      	sub	sp, #16
    a4d0:	af00      	add	r7, sp, #0
    a4d2:	6078      	str	r0, [r7, #4]
    a4d4:	460b      	mov	r3, r1
    a4d6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a4d8:	687b      	ldr	r3, [r7, #4]
    a4da:	7c9b      	ldrb	r3, [r3, #18]
    a4dc:	f003 030f 	and.w	r3, r3, #15
    a4e0:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a4e2:	78fa      	ldrb	r2, [r7, #3]
    a4e4:	7bfb      	ldrb	r3, [r7, #15]
    a4e6:	4611      	mov	r1, r2
    a4e8:	4618      	mov	r0, r3
    a4ea:	4b28      	ldr	r3, [pc, #160]	; (a58c <_usb_d_dev_ep_stall_clr+0xc0>)
    a4ec:	4798      	blx	r3
    a4ee:	4603      	mov	r3, r0
    a4f0:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a4f2:	7bbb      	ldrb	r3, [r7, #14]
    a4f4:	f083 0301 	eor.w	r3, r3, #1
    a4f8:	b2db      	uxtb	r3, r3
    a4fa:	2b00      	cmp	r3, #0
    a4fc:	d001      	beq.n	a502 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a4fe:	2300      	movs	r3, #0
    a500:	e040      	b.n	a584 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a502:	78f9      	ldrb	r1, [r7, #3]
    a504:	7bfb      	ldrb	r3, [r7, #15]
    a506:	2200      	movs	r2, #0
    a508:	4618      	mov	r0, r3
    a50a:	4b21      	ldr	r3, [pc, #132]	; (a590 <_usb_d_dev_ep_stall_clr+0xc4>)
    a50c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a50e:	78fb      	ldrb	r3, [r7, #3]
    a510:	2220      	movs	r2, #32
    a512:	409a      	lsls	r2, r3
    a514:	7bfb      	ldrb	r3, [r7, #15]
    a516:	4611      	mov	r1, r2
    a518:	4618      	mov	r0, r3
    a51a:	4b1e      	ldr	r3, [pc, #120]	; (a594 <_usb_d_dev_ep_stall_clr+0xc8>)
    a51c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a51e:	78fa      	ldrb	r2, [r7, #3]
    a520:	7bfb      	ldrb	r3, [r7, #15]
    a522:	4611      	mov	r1, r2
    a524:	4618      	mov	r0, r3
    a526:	4b1c      	ldr	r3, [pc, #112]	; (a598 <_usb_d_dev_ep_stall_clr+0xcc>)
    a528:	4798      	blx	r3
    a52a:	4603      	mov	r3, r0
    a52c:	2b00      	cmp	r3, #0
    a52e:	d00b      	beq.n	a548 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a530:	78fa      	ldrb	r2, [r7, #3]
    a532:	7bfb      	ldrb	r3, [r7, #15]
    a534:	4611      	mov	r1, r2
    a536:	4618      	mov	r0, r3
    a538:	4b18      	ldr	r3, [pc, #96]	; (a59c <_usb_d_dev_ep_stall_clr+0xd0>)
    a53a:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a53c:	78f9      	ldrb	r1, [r7, #3]
    a53e:	7bfb      	ldrb	r3, [r7, #15]
    a540:	2200      	movs	r2, #0
    a542:	4618      	mov	r0, r3
    a544:	4b16      	ldr	r3, [pc, #88]	; (a5a0 <_usb_d_dev_ep_stall_clr+0xd4>)
    a546:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a548:	687b      	ldr	r3, [r7, #4]
    a54a:	7cdb      	ldrb	r3, [r3, #19]
    a54c:	f003 0307 	and.w	r3, r3, #7
    a550:	b2db      	uxtb	r3, r3
    a552:	2b01      	cmp	r3, #1
    a554:	d110      	bne.n	a578 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a556:	7bfb      	ldrb	r3, [r7, #15]
    a558:	4619      	mov	r1, r3
    a55a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a55e:	4b11      	ldr	r3, [pc, #68]	; (a5a4 <_usb_d_dev_ep_stall_clr+0xd8>)
    a560:	4798      	blx	r3
    a562:	4603      	mov	r3, r0
    a564:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a568:	2b00      	cmp	r3, #0
    a56a:	d10a      	bne.n	a582 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a56c:	687a      	ldr	r2, [r7, #4]
    a56e:	7cd3      	ldrb	r3, [r2, #19]
    a570:	f36f 03c3 	bfc	r3, #3, #1
    a574:	74d3      	strb	r3, [r2, #19]
    a576:	e004      	b.n	a582 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a578:	687a      	ldr	r2, [r7, #4]
    a57a:	7cd3      	ldrb	r3, [r2, #19]
    a57c:	f36f 03c3 	bfc	r3, #3, #1
    a580:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a582:	2300      	movs	r3, #0
}
    a584:	4618      	mov	r0, r3
    a586:	3710      	adds	r7, #16
    a588:	46bd      	mov	sp, r7
    a58a:	bd80      	pop	{r7, pc}
    a58c:	00008b3d 	.word	0x00008b3d
    a590:	00008ae5 	.word	0x00008ae5
    a594:	00008a8d 	.word	0x00008a8d
    a598:	00008b81 	.word	0x00008b81
    a59c:	00008bc5 	.word	0x00008bc5
    a5a0:	00008cb1 	.word	0x00008cb1
    a5a4:	0000856d 	.word	0x0000856d

0000a5a8 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a5a8:	b580      	push	{r7, lr}
    a5aa:	b086      	sub	sp, #24
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	4603      	mov	r3, r0
    a5b0:	460a      	mov	r2, r1
    a5b2:	71fb      	strb	r3, [r7, #7]
    a5b4:	4613      	mov	r3, r2
    a5b6:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a5b8:	79fb      	ldrb	r3, [r7, #7]
    a5ba:	f003 030f 	and.w	r3, r3, #15
    a5be:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a5c0:	79fb      	ldrb	r3, [r7, #7]
    a5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a5c6:	2b00      	cmp	r3, #0
    a5c8:	bf14      	ite	ne
    a5ca:	2301      	movne	r3, #1
    a5cc:	2300      	moveq	r3, #0
    a5ce:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a5d0:	7cba      	ldrb	r2, [r7, #18]
    a5d2:	7cfb      	ldrb	r3, [r7, #19]
    a5d4:	4611      	mov	r1, r2
    a5d6:	4618      	mov	r0, r3
    a5d8:	4b13      	ldr	r3, [pc, #76]	; (a628 <_usb_d_dev_ep_stall+0x80>)
    a5da:	4798      	blx	r3
    a5dc:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a5de:	7cfb      	ldrb	r3, [r7, #19]
    a5e0:	2b04      	cmp	r3, #4
    a5e2:	d902      	bls.n	a5ea <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a5e4:	f06f 0311 	mvn.w	r3, #17
    a5e8:	e01a      	b.n	a620 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a5ea:	79bb      	ldrb	r3, [r7, #6]
    a5ec:	2b01      	cmp	r3, #1
    a5ee:	d106      	bne.n	a5fe <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a5f0:	7cbb      	ldrb	r3, [r7, #18]
    a5f2:	4619      	mov	r1, r3
    a5f4:	68f8      	ldr	r0, [r7, #12]
    a5f6:	4b0d      	ldr	r3, [pc, #52]	; (a62c <_usb_d_dev_ep_stall+0x84>)
    a5f8:	4798      	blx	r3
    a5fa:	6178      	str	r0, [r7, #20]
    a5fc:	e00f      	b.n	a61e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a5fe:	79bb      	ldrb	r3, [r7, #6]
    a600:	2b00      	cmp	r3, #0
    a602:	d106      	bne.n	a612 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a604:	7cbb      	ldrb	r3, [r7, #18]
    a606:	4619      	mov	r1, r3
    a608:	68f8      	ldr	r0, [r7, #12]
    a60a:	4b09      	ldr	r3, [pc, #36]	; (a630 <_usb_d_dev_ep_stall+0x88>)
    a60c:	4798      	blx	r3
    a60e:	6178      	str	r0, [r7, #20]
    a610:	e005      	b.n	a61e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a612:	7cbb      	ldrb	r3, [r7, #18]
    a614:	4619      	mov	r1, r3
    a616:	68f8      	ldr	r0, [r7, #12]
    a618:	4b06      	ldr	r3, [pc, #24]	; (a634 <_usb_d_dev_ep_stall+0x8c>)
    a61a:	4798      	blx	r3
    a61c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a61e:	697b      	ldr	r3, [r7, #20]
}
    a620:	4618      	mov	r0, r3
    a622:	3718      	adds	r7, #24
    a624:	46bd      	mov	sp, r7
    a626:	bd80      	pop	{r7, pc}
    a628:	00009049 	.word	0x00009049
    a62c:	0000a47d 	.word	0x0000a47d
    a630:	0000a4cd 	.word	0x0000a4cd
    a634:	0000a44d 	.word	0x0000a44d

0000a638 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a638:	b580      	push	{r7, lr}
    a63a:	b082      	sub	sp, #8
    a63c:	af00      	add	r7, sp, #0
    a63e:	6078      	str	r0, [r7, #4]
    a640:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a642:	687b      	ldr	r3, [r7, #4]
    a644:	7c9b      	ldrb	r3, [r3, #18]
    a646:	2bff      	cmp	r3, #255	; 0xff
    a648:	d014      	beq.n	a674 <_usb_d_dev_trans_done+0x3c>
    a64a:	687b      	ldr	r3, [r7, #4]
    a64c:	7cdb      	ldrb	r3, [r3, #19]
    a64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a652:	b2db      	uxtb	r3, r3
    a654:	2b00      	cmp	r3, #0
    a656:	d00d      	beq.n	a674 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a658:	687a      	ldr	r2, [r7, #4]
    a65a:	7cd3      	ldrb	r3, [r2, #19]
    a65c:	f36f 1386 	bfc	r3, #6, #1
    a660:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a662:	4b06      	ldr	r3, [pc, #24]	; (a67c <_usb_d_dev_trans_done+0x44>)
    a664:	691b      	ldr	r3, [r3, #16]
    a666:	687a      	ldr	r2, [r7, #4]
    a668:	7c90      	ldrb	r0, [r2, #18]
    a66a:	687a      	ldr	r2, [r7, #4]
    a66c:	6892      	ldr	r2, [r2, #8]
    a66e:	6839      	ldr	r1, [r7, #0]
    a670:	4798      	blx	r3
    a672:	e000      	b.n	a676 <_usb_d_dev_trans_done+0x3e>
		return;
    a674:	bf00      	nop
}
    a676:	3708      	adds	r7, #8
    a678:	46bd      	mov	sp, r7
    a67a:	bd80      	pop	{r7, pc}
    a67c:	2000096c 	.word	0x2000096c

0000a680 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a680:	b580      	push	{r7, lr}
    a682:	b086      	sub	sp, #24
    a684:	af00      	add	r7, sp, #0
    a686:	60f8      	str	r0, [r7, #12]
    a688:	460b      	mov	r3, r1
    a68a:	607a      	str	r2, [r7, #4]
    a68c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a68e:	68fb      	ldr	r3, [r7, #12]
    a690:	7c9b      	ldrb	r3, [r3, #18]
    a692:	f003 030f 	and.w	r3, r3, #15
    a696:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a698:	4b1f      	ldr	r3, [pc, #124]	; (a718 <_usb_d_dev_trans_stop+0x98>)
    a69a:	881b      	ldrh	r3, [r3, #0]
    a69c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a69e:	68fb      	ldr	r3, [r7, #12]
    a6a0:	7c9b      	ldrb	r3, [r3, #18]
    a6a2:	2bff      	cmp	r3, #255	; 0xff
    a6a4:	d033      	beq.n	a70e <_usb_d_dev_trans_stop+0x8e>
    a6a6:	68fb      	ldr	r3, [r7, #12]
    a6a8:	7cdb      	ldrb	r3, [r3, #19]
    a6aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a6ae:	b2db      	uxtb	r3, r3
    a6b0:	2b00      	cmp	r3, #0
    a6b2:	d02c      	beq.n	a70e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a6b4:	7afb      	ldrb	r3, [r7, #11]
    a6b6:	2b00      	cmp	r3, #0
    a6b8:	d006      	beq.n	a6c8 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a6ba:	7dfb      	ldrb	r3, [r7, #23]
    a6bc:	2200      	movs	r2, #0
    a6be:	2101      	movs	r1, #1
    a6c0:	4618      	mov	r0, r3
    a6c2:	4b16      	ldr	r3, [pc, #88]	; (a71c <_usb_d_dev_trans_stop+0x9c>)
    a6c4:	4798      	blx	r3
    a6c6:	e005      	b.n	a6d4 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a6c8:	7dfb      	ldrb	r3, [r7, #23]
    a6ca:	2200      	movs	r2, #0
    a6cc:	2100      	movs	r1, #0
    a6ce:	4618      	mov	r0, r3
    a6d0:	4b13      	ldr	r3, [pc, #76]	; (a720 <_usb_d_dev_trans_stop+0xa0>)
    a6d2:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a6d4:	7afb      	ldrb	r3, [r7, #11]
    a6d6:	f107 0218 	add.w	r2, r7, #24
    a6da:	4413      	add	r3, r2
    a6dc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a6e0:	461a      	mov	r2, r3
    a6e2:	7dfb      	ldrb	r3, [r7, #23]
    a6e4:	4611      	mov	r1, r2
    a6e6:	4618      	mov	r0, r3
    a6e8:	4b0e      	ldr	r3, [pc, #56]	; (a724 <_usb_d_dev_trans_stop+0xa4>)
    a6ea:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a6ec:	7afb      	ldrb	r3, [r7, #11]
    a6ee:	f107 0218 	add.w	r2, r7, #24
    a6f2:	4413      	add	r3, r2
    a6f4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a6f8:	461a      	mov	r2, r3
    a6fa:	7dfb      	ldrb	r3, [r7, #23]
    a6fc:	4611      	mov	r1, r2
    a6fe:	4618      	mov	r0, r3
    a700:	4b09      	ldr	r3, [pc, #36]	; (a728 <_usb_d_dev_trans_stop+0xa8>)
    a702:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a704:	6879      	ldr	r1, [r7, #4]
    a706:	68f8      	ldr	r0, [r7, #12]
    a708:	4b08      	ldr	r3, [pc, #32]	; (a72c <_usb_d_dev_trans_stop+0xac>)
    a70a:	4798      	blx	r3
    a70c:	e000      	b.n	a710 <_usb_d_dev_trans_stop+0x90>
		return;
    a70e:	bf00      	nop
}
    a710:	3718      	adds	r7, #24
    a712:	46bd      	mov	sp, r7
    a714:	bd80      	pop	{r7, pc}
    a716:	bf00      	nop
    a718:	0000f030 	.word	0x0000f030
    a71c:	00008f35 	.word	0x00008f35
    a720:	00008f8d 	.word	0x00008f8d
    a724:	00008a3d 	.word	0x00008a3d
    a728:	00008a8d 	.word	0x00008a8d
    a72c:	0000a639 	.word	0x0000a639

0000a730 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a730:	b580      	push	{r7, lr}
    a732:	b086      	sub	sp, #24
    a734:	af00      	add	r7, sp, #0
    a736:	4603      	mov	r3, r0
    a738:	6039      	str	r1, [r7, #0]
    a73a:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a73c:	79fb      	ldrb	r3, [r7, #7]
    a73e:	f003 030f 	and.w	r3, r3, #15
    a742:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a744:	7dfb      	ldrb	r3, [r7, #23]
    a746:	015b      	lsls	r3, r3, #5
    a748:	4a1e      	ldr	r2, [pc, #120]	; (a7c4 <_usb_d_dev_ep_read_req+0x94>)
    a74a:	4413      	add	r3, r2
    a74c:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a74e:	693b      	ldr	r3, [r7, #16]
    a750:	681b      	ldr	r3, [r3, #0]
    a752:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a754:	693b      	ldr	r3, [r7, #16]
    a756:	685b      	ldr	r3, [r3, #4]
    a758:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a75c:	b29b      	uxth	r3, r3
    a75e:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a760:	7dfb      	ldrb	r3, [r7, #23]
    a762:	2b04      	cmp	r3, #4
    a764:	d802      	bhi.n	a76c <_usb_d_dev_ep_read_req+0x3c>
    a766:	683b      	ldr	r3, [r7, #0]
    a768:	2b00      	cmp	r3, #0
    a76a:	d102      	bne.n	a772 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a76c:	f06f 0311 	mvn.w	r3, #17
    a770:	e023      	b.n	a7ba <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a772:	7dfb      	ldrb	r3, [r7, #23]
    a774:	4618      	mov	r0, r3
    a776:	4b14      	ldr	r3, [pc, #80]	; (a7c8 <_usb_d_dev_ep_read_req+0x98>)
    a778:	4798      	blx	r3
    a77a:	4603      	mov	r3, r0
    a77c:	f083 0301 	eor.w	r3, r3, #1
    a780:	b2db      	uxtb	r3, r3
    a782:	2b00      	cmp	r3, #0
    a784:	d002      	beq.n	a78c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a786:	f06f 0312 	mvn.w	r3, #18
    a78a:	e016      	b.n	a7ba <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a78c:	7dfb      	ldrb	r3, [r7, #23]
    a78e:	4618      	mov	r0, r3
    a790:	4b0e      	ldr	r3, [pc, #56]	; (a7cc <_usb_d_dev_ep_read_req+0x9c>)
    a792:	4798      	blx	r3
    a794:	4603      	mov	r3, r0
    a796:	f083 0301 	eor.w	r3, r3, #1
    a79a:	b2db      	uxtb	r3, r3
    a79c:	2b00      	cmp	r3, #0
    a79e:	d001      	beq.n	a7a4 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a7a0:	2300      	movs	r3, #0
    a7a2:	e00a      	b.n	a7ba <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a7a4:	68fb      	ldr	r3, [r7, #12]
    a7a6:	2208      	movs	r2, #8
    a7a8:	4619      	mov	r1, r3
    a7aa:	6838      	ldr	r0, [r7, #0]
    a7ac:	4b08      	ldr	r3, [pc, #32]	; (a7d0 <_usb_d_dev_ep_read_req+0xa0>)
    a7ae:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a7b0:	7dfb      	ldrb	r3, [r7, #23]
    a7b2:	4618      	mov	r0, r3
    a7b4:	4b07      	ldr	r3, [pc, #28]	; (a7d4 <_usb_d_dev_ep_read_req+0xa4>)
    a7b6:	4798      	blx	r3

	return bytes;
    a7b8:	897b      	ldrh	r3, [r7, #10]
}
    a7ba:	4618      	mov	r0, r3
    a7bc:	3718      	adds	r7, #24
    a7be:	46bd      	mov	sp, r7
    a7c0:	bd80      	pop	{r7, pc}
    a7c2:	bf00      	nop
    a7c4:	20000a34 	.word	0x20000a34
    a7c8:	00008ab5 	.word	0x00008ab5
    a7cc:	00008c61 	.word	0x00008c61
    a7d0:	0000e8a5 	.word	0x0000e8a5
    a7d4:	00008c91 	.word	0x00008c91

0000a7d8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a7d8:	b580      	push	{r7, lr}
    a7da:	b086      	sub	sp, #24
    a7dc:	af00      	add	r7, sp, #0
    a7de:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	7a1b      	ldrb	r3, [r3, #8]
    a7e4:	f003 030f 	and.w	r3, r3, #15
    a7e8:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a7ea:	687b      	ldr	r3, [r7, #4]
    a7ec:	7a1b      	ldrb	r3, [r3, #8]
    a7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	bf14      	ite	ne
    a7f6:	2301      	movne	r3, #1
    a7f8:	2300      	moveq	r3, #0
    a7fa:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a7fc:	7d7a      	ldrb	r2, [r7, #21]
    a7fe:	7dbb      	ldrb	r3, [r7, #22]
    a800:	4611      	mov	r1, r2
    a802:	4618      	mov	r0, r3
    a804:	4b5f      	ldr	r3, [pc, #380]	; (a984 <_usb_d_dev_ep_trans+0x1ac>)
    a806:	4798      	blx	r3
    a808:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a80a:	693b      	ldr	r3, [r7, #16]
    a80c:	8a1b      	ldrh	r3, [r3, #16]
    a80e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a812:	4293      	cmp	r3, r2
    a814:	d004      	beq.n	a820 <_usb_d_dev_ep_trans+0x48>
    a816:	693b      	ldr	r3, [r7, #16]
    a818:	8a1b      	ldrh	r3, [r3, #16]
    a81a:	3b01      	subs	r3, #1
    a81c:	b29b      	uxth	r3, r3
    a81e:	e001      	b.n	a824 <_usb_d_dev_ep_trans+0x4c>
    a820:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a824:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a826:	687b      	ldr	r3, [r7, #4]
    a828:	685a      	ldr	r2, [r3, #4]
    a82a:	89fb      	ldrh	r3, [r7, #14]
    a82c:	4013      	ands	r3, r2
    a82e:	2b00      	cmp	r3, #0
    a830:	bf14      	ite	ne
    a832:	2301      	movne	r3, #1
    a834:	2300      	moveq	r3, #0
    a836:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a838:	2300      	movs	r3, #0
    a83a:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a83c:	7dbb      	ldrb	r3, [r7, #22]
    a83e:	2b04      	cmp	r3, #4
    a840:	d902      	bls.n	a848 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a842:	f06f 0311 	mvn.w	r3, #17
    a846:	e098      	b.n	a97a <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a848:	687b      	ldr	r3, [r7, #4]
    a84a:	681b      	ldr	r3, [r3, #0]
    a84c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a850:	d31a      	bcc.n	a888 <_usb_d_dev_ep_trans+0xb0>
    a852:	687b      	ldr	r3, [r7, #4]
    a854:	681b      	ldr	r3, [r3, #0]
    a856:	461a      	mov	r2, r3
    a858:	687b      	ldr	r3, [r7, #4]
    a85a:	685b      	ldr	r3, [r3, #4]
    a85c:	4413      	add	r3, r2
    a85e:	4a4a      	ldr	r2, [pc, #296]	; (a988 <_usb_d_dev_ep_trans+0x1b0>)
    a860:	4293      	cmp	r3, r2
    a862:	d811      	bhi.n	a888 <_usb_d_dev_ep_trans+0xb0>
    a864:	687b      	ldr	r3, [r7, #4]
    a866:	681b      	ldr	r3, [r3, #0]
    a868:	f003 0303 	and.w	r3, r3, #3
    a86c:	2b00      	cmp	r3, #0
    a86e:	d10b      	bne.n	a888 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a870:	7d7b      	ldrb	r3, [r7, #21]
    a872:	f083 0301 	eor.w	r3, r3, #1
    a876:	b2db      	uxtb	r3, r3
    a878:	2b00      	cmp	r3, #0
    a87a:	d00e      	beq.n	a89a <_usb_d_dev_ep_trans+0xc2>
    a87c:	687b      	ldr	r3, [r7, #4]
    a87e:	685b      	ldr	r3, [r3, #4]
    a880:	693a      	ldr	r2, [r7, #16]
    a882:	8a12      	ldrh	r2, [r2, #16]
    a884:	4293      	cmp	r3, r2
    a886:	d208      	bcs.n	a89a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a888:	693b      	ldr	r3, [r7, #16]
    a88a:	68db      	ldr	r3, [r3, #12]
    a88c:	2b00      	cmp	r3, #0
    a88e:	d102      	bne.n	a896 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a890:	f06f 0312 	mvn.w	r3, #18
    a894:	e071      	b.n	a97a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a896:	2301      	movs	r3, #1
    a898:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a89a:	7d7b      	ldrb	r3, [r7, #21]
    a89c:	f083 0301 	eor.w	r3, r3, #1
    a8a0:	b2db      	uxtb	r3, r3
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	d009      	beq.n	a8ba <_usb_d_dev_ep_trans+0xe2>
    a8a6:	7b7b      	ldrb	r3, [r7, #13]
    a8a8:	2b00      	cmp	r3, #0
    a8aa:	d006      	beq.n	a8ba <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a8ac:	693b      	ldr	r3, [r7, #16]
    a8ae:	68db      	ldr	r3, [r3, #12]
    a8b0:	2b00      	cmp	r3, #0
    a8b2:	d102      	bne.n	a8ba <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a8b4:	f06f 0311 	mvn.w	r3, #17
    a8b8:	e05f      	b.n	a97a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a8ba:	693b      	ldr	r3, [r7, #16]
    a8bc:	7cdb      	ldrb	r3, [r3, #19]
    a8be:	f003 0308 	and.w	r3, r3, #8
    a8c2:	b2db      	uxtb	r3, r3
    a8c4:	2b00      	cmp	r3, #0
    a8c6:	d001      	beq.n	a8cc <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a8c8:	2302      	movs	r3, #2
    a8ca:	e056      	b.n	a97a <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a8cc:	f107 0308 	add.w	r3, r7, #8
    a8d0:	4618      	mov	r0, r3
    a8d2:	4b2e      	ldr	r3, [pc, #184]	; (a98c <_usb_d_dev_ep_trans+0x1b4>)
    a8d4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a8d6:	693b      	ldr	r3, [r7, #16]
    a8d8:	7cdb      	ldrb	r3, [r3, #19]
    a8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a8de:	b2db      	uxtb	r3, r3
    a8e0:	2b00      	cmp	r3, #0
    a8e2:	d006      	beq.n	a8f2 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a8e4:	f107 0308 	add.w	r3, r7, #8
    a8e8:	4618      	mov	r0, r3
    a8ea:	4b29      	ldr	r3, [pc, #164]	; (a990 <_usb_d_dev_ep_trans+0x1b8>)
    a8ec:	4798      	blx	r3
		return USB_BUSY;
    a8ee:	2301      	movs	r3, #1
    a8f0:	e043      	b.n	a97a <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a8f2:	693a      	ldr	r2, [r7, #16]
    a8f4:	7cd3      	ldrb	r3, [r2, #19]
    a8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a8fa:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a8fc:	f107 0308 	add.w	r3, r7, #8
    a900:	4618      	mov	r0, r3
    a902:	4b23      	ldr	r3, [pc, #140]	; (a990 <_usb_d_dev_ep_trans+0x1b8>)
    a904:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a906:	687b      	ldr	r3, [r7, #4]
    a908:	681a      	ldr	r2, [r3, #0]
    a90a:	693b      	ldr	r3, [r7, #16]
    a90c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a90e:	687b      	ldr	r3, [r7, #4]
    a910:	685a      	ldr	r2, [r3, #4]
    a912:	693b      	ldr	r3, [r7, #16]
    a914:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a916:	693b      	ldr	r3, [r7, #16]
    a918:	2200      	movs	r2, #0
    a91a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a91c:	693a      	ldr	r2, [r7, #16]
    a91e:	7cd3      	ldrb	r3, [r2, #19]
    a920:	7d79      	ldrb	r1, [r7, #21]
    a922:	f361 13c7 	bfi	r3, r1, #7, #1
    a926:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a928:	693a      	ldr	r2, [r7, #16]
    a92a:	7cd3      	ldrb	r3, [r2, #19]
    a92c:	7df9      	ldrb	r1, [r7, #23]
    a92e:	f361 1345 	bfi	r3, r1, #5, #1
    a932:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a934:	687b      	ldr	r3, [r7, #4]
    a936:	7a5b      	ldrb	r3, [r3, #9]
    a938:	2b00      	cmp	r3, #0
    a93a:	d007      	beq.n	a94c <_usb_d_dev_ep_trans+0x174>
    a93c:	7b7b      	ldrb	r3, [r7, #13]
    a93e:	f083 0301 	eor.w	r3, r3, #1
    a942:	b2db      	uxtb	r3, r3
    a944:	2b00      	cmp	r3, #0
    a946:	d001      	beq.n	a94c <_usb_d_dev_ep_trans+0x174>
    a948:	2301      	movs	r3, #1
    a94a:	e000      	b.n	a94e <_usb_d_dev_ep_trans+0x176>
    a94c:	2300      	movs	r3, #0
    a94e:	b2db      	uxtb	r3, r3
    a950:	f003 0301 	and.w	r3, r3, #1
    a954:	b2d9      	uxtb	r1, r3
    a956:	693a      	ldr	r2, [r7, #16]
    a958:	7cd3      	ldrb	r3, [r2, #19]
    a95a:	f361 1304 	bfi	r3, r1, #4, #1
    a95e:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a960:	7d7b      	ldrb	r3, [r7, #21]
    a962:	2b00      	cmp	r3, #0
    a964:	d004      	beq.n	a970 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a966:	2100      	movs	r1, #0
    a968:	6938      	ldr	r0, [r7, #16]
    a96a:	4b0a      	ldr	r3, [pc, #40]	; (a994 <_usb_d_dev_ep_trans+0x1bc>)
    a96c:	4798      	blx	r3
    a96e:	e003      	b.n	a978 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a970:	2100      	movs	r1, #0
    a972:	6938      	ldr	r0, [r7, #16]
    a974:	4b08      	ldr	r3, [pc, #32]	; (a998 <_usb_d_dev_ep_trans+0x1c0>)
    a976:	4798      	blx	r3
	}

	return ERR_NONE;
    a978:	2300      	movs	r3, #0
}
    a97a:	4618      	mov	r0, r3
    a97c:	3718      	adds	r7, #24
    a97e:	46bd      	mov	sp, r7
    a980:	bd80      	pop	{r7, pc}
    a982:	bf00      	nop
    a984:	00009049 	.word	0x00009049
    a988:	20041fff 	.word	0x20041fff
    a98c:	0000b1a5 	.word	0x0000b1a5
    a990:	0000b1cb 	.word	0x0000b1cb
    a994:	00009311 	.word	0x00009311
    a998:	00009529 	.word	0x00009529

0000a99c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    a99c:	b580      	push	{r7, lr}
    a99e:	b084      	sub	sp, #16
    a9a0:	af00      	add	r7, sp, #0
    a9a2:	4603      	mov	r3, r0
    a9a4:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    a9a6:	79fb      	ldrb	r3, [r7, #7]
    a9a8:	f003 030f 	and.w	r3, r3, #15
    a9ac:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    a9ae:	79fb      	ldrb	r3, [r7, #7]
    a9b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a9b4:	2b00      	cmp	r3, #0
    a9b6:	bf14      	ite	ne
    a9b8:	2301      	movne	r3, #1
    a9ba:	2300      	moveq	r3, #0
    a9bc:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a9be:	7bba      	ldrb	r2, [r7, #14]
    a9c0:	7bfb      	ldrb	r3, [r7, #15]
    a9c2:	4611      	mov	r1, r2
    a9c4:	4618      	mov	r0, r3
    a9c6:	4b08      	ldr	r3, [pc, #32]	; (a9e8 <_usb_d_dev_ep_abort+0x4c>)
    a9c8:	4798      	blx	r3
    a9ca:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    a9cc:	7bfb      	ldrb	r3, [r7, #15]
    a9ce:	2b04      	cmp	r3, #4
    a9d0:	d806      	bhi.n	a9e0 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    a9d2:	7bbb      	ldrb	r3, [r7, #14]
    a9d4:	2202      	movs	r2, #2
    a9d6:	4619      	mov	r1, r3
    a9d8:	68b8      	ldr	r0, [r7, #8]
    a9da:	4b04      	ldr	r3, [pc, #16]	; (a9ec <_usb_d_dev_ep_abort+0x50>)
    a9dc:	4798      	blx	r3
    a9de:	e000      	b.n	a9e2 <_usb_d_dev_ep_abort+0x46>
		return;
    a9e0:	bf00      	nop
}
    a9e2:	3710      	adds	r7, #16
    a9e4:	46bd      	mov	sp, r7
    a9e6:	bd80      	pop	{r7, pc}
    a9e8:	00009049 	.word	0x00009049
    a9ec:	0000a681 	.word	0x0000a681

0000a9f0 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a9f0:	b480      	push	{r7}
    a9f2:	b085      	sub	sp, #20
    a9f4:	af00      	add	r7, sp, #0
    a9f6:	4603      	mov	r3, r0
    a9f8:	6039      	str	r1, [r7, #0]
    a9fa:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a9fc:	683b      	ldr	r3, [r7, #0]
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d001      	beq.n	aa06 <_usb_d_dev_register_callback+0x16>
    aa02:	683b      	ldr	r3, [r7, #0]
    aa04:	e000      	b.n	aa08 <_usb_d_dev_register_callback+0x18>
    aa06:	4b0a      	ldr	r3, [pc, #40]	; (aa30 <_usb_d_dev_register_callback+0x40>)
    aa08:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    aa0a:	79fb      	ldrb	r3, [r7, #7]
    aa0c:	2b01      	cmp	r3, #1
    aa0e:	d103      	bne.n	aa18 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    aa10:	4a08      	ldr	r2, [pc, #32]	; (aa34 <_usb_d_dev_register_callback+0x44>)
    aa12:	68fb      	ldr	r3, [r7, #12]
    aa14:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    aa16:	e005      	b.n	aa24 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    aa18:	79fb      	ldrb	r3, [r7, #7]
    aa1a:	2b00      	cmp	r3, #0
    aa1c:	d102      	bne.n	aa24 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    aa1e:	4a05      	ldr	r2, [pc, #20]	; (aa34 <_usb_d_dev_register_callback+0x44>)
    aa20:	68fb      	ldr	r3, [r7, #12]
    aa22:	6013      	str	r3, [r2, #0]
}
    aa24:	bf00      	nop
    aa26:	3714      	adds	r7, #20
    aa28:	46bd      	mov	sp, r7
    aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa2e:	4770      	bx	lr
    aa30:	000088d1 	.word	0x000088d1
    aa34:	2000096c 	.word	0x2000096c

0000aa38 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    aa38:	b480      	push	{r7}
    aa3a:	b085      	sub	sp, #20
    aa3c:	af00      	add	r7, sp, #0
    aa3e:	4603      	mov	r3, r0
    aa40:	6039      	str	r1, [r7, #0]
    aa42:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    aa44:	683b      	ldr	r3, [r7, #0]
    aa46:	2b00      	cmp	r3, #0
    aa48:	d001      	beq.n	aa4e <_usb_d_dev_register_ep_callback+0x16>
    aa4a:	683b      	ldr	r3, [r7, #0]
    aa4c:	e000      	b.n	aa50 <_usb_d_dev_register_ep_callback+0x18>
    aa4e:	4b0e      	ldr	r3, [pc, #56]	; (aa88 <_usb_d_dev_register_ep_callback+0x50>)
    aa50:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    aa52:	79fb      	ldrb	r3, [r7, #7]
    aa54:	2b00      	cmp	r3, #0
    aa56:	d103      	bne.n	aa60 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    aa58:	4a0c      	ldr	r2, [pc, #48]	; (aa8c <_usb_d_dev_register_ep_callback+0x54>)
    aa5a:	68fb      	ldr	r3, [r7, #12]
    aa5c:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    aa5e:	e00c      	b.n	aa7a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    aa60:	79fb      	ldrb	r3, [r7, #7]
    aa62:	2b01      	cmp	r3, #1
    aa64:	d103      	bne.n	aa6e <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    aa66:	4a09      	ldr	r2, [pc, #36]	; (aa8c <_usb_d_dev_register_ep_callback+0x54>)
    aa68:	68fb      	ldr	r3, [r7, #12]
    aa6a:	60d3      	str	r3, [r2, #12]
}
    aa6c:	e005      	b.n	aa7a <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    aa6e:	79fb      	ldrb	r3, [r7, #7]
    aa70:	2b02      	cmp	r3, #2
    aa72:	d102      	bne.n	aa7a <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    aa74:	4a05      	ldr	r2, [pc, #20]	; (aa8c <_usb_d_dev_register_ep_callback+0x54>)
    aa76:	68fb      	ldr	r3, [r7, #12]
    aa78:	6113      	str	r3, [r2, #16]
}
    aa7a:	bf00      	nop
    aa7c:	3714      	adds	r7, #20
    aa7e:	46bd      	mov	sp, r7
    aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa84:	4770      	bx	lr
    aa86:	bf00      	nop
    aa88:	000088d1 	.word	0x000088d1
    aa8c:	2000096c 	.word	0x2000096c

0000aa90 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    aa90:	b580      	push	{r7, lr}
    aa92:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aa94:	4b01      	ldr	r3, [pc, #4]	; (aa9c <USB_0_Handler+0xc>)
    aa96:	4798      	blx	r3
}
    aa98:	bf00      	nop
    aa9a:	bd80      	pop	{r7, pc}
    aa9c:	00009d01 	.word	0x00009d01

0000aaa0 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    aaa0:	b580      	push	{r7, lr}
    aaa2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aaa4:	4b01      	ldr	r3, [pc, #4]	; (aaac <USB_1_Handler+0xc>)
    aaa6:	4798      	blx	r3
}
    aaa8:	bf00      	nop
    aaaa:	bd80      	pop	{r7, pc}
    aaac:	00009d01 	.word	0x00009d01

0000aab0 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    aab0:	b580      	push	{r7, lr}
    aab2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aab4:	4b01      	ldr	r3, [pc, #4]	; (aabc <USB_2_Handler+0xc>)
    aab6:	4798      	blx	r3
}
    aab8:	bf00      	nop
    aaba:	bd80      	pop	{r7, pc}
    aabc:	00009d01 	.word	0x00009d01

0000aac0 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    aac0:	b580      	push	{r7, lr}
    aac2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    aac4:	4b01      	ldr	r3, [pc, #4]	; (aacc <USB_3_Handler+0xc>)
    aac6:	4798      	blx	r3
}
    aac8:	bf00      	nop
    aaca:	bd80      	pop	{r7, pc}
    aacc:	00009d01 	.word	0x00009d01

0000aad0 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    aad0:	b480      	push	{r7}
    aad2:	b083      	sub	sp, #12
    aad4:	af00      	add	r7, sp, #0
    aad6:	6078      	str	r0, [r7, #4]
    aad8:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    aada:	bf00      	nop
    aadc:	687b      	ldr	r3, [r7, #4]
    aade:	689a      	ldr	r2, [r3, #8]
    aae0:	683b      	ldr	r3, [r7, #0]
    aae2:	4013      	ands	r3, r2
    aae4:	2b00      	cmp	r3, #0
    aae6:	d1f9      	bne.n	aadc <hri_wdt_wait_for_sync+0xc>
	};
}
    aae8:	bf00      	nop
    aaea:	370c      	adds	r7, #12
    aaec:	46bd      	mov	sp, r7
    aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaf2:	4770      	bx	lr

0000aaf4 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    aaf4:	b580      	push	{r7, lr}
    aaf6:	b084      	sub	sp, #16
    aaf8:	af00      	add	r7, sp, #0
    aafa:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aafc:	210e      	movs	r1, #14
    aafe:	6878      	ldr	r0, [r7, #4]
    ab00:	4b0a      	ldr	r3, [pc, #40]	; (ab2c <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ab02:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ab04:	687b      	ldr	r3, [r7, #4]
    ab06:	781b      	ldrb	r3, [r3, #0]
    ab08:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ab0a:	7bfb      	ldrb	r3, [r7, #15]
    ab0c:	085b      	lsrs	r3, r3, #1
    ab0e:	b2db      	uxtb	r3, r3
    ab10:	f003 0301 	and.w	r3, r3, #1
    ab14:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ab16:	7bfb      	ldrb	r3, [r7, #15]
    ab18:	2b00      	cmp	r3, #0
    ab1a:	bf14      	ite	ne
    ab1c:	2301      	movne	r3, #1
    ab1e:	2300      	moveq	r3, #0
    ab20:	b2db      	uxtb	r3, r3
}
    ab22:	4618      	mov	r0, r3
    ab24:	3710      	adds	r7, #16
    ab26:	46bd      	mov	sp, r7
    ab28:	bd80      	pop	{r7, pc}
    ab2a:	bf00      	nop
    ab2c:	0000aad1 	.word	0x0000aad1

0000ab30 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    ab30:	b580      	push	{r7, lr}
    ab32:	b082      	sub	sp, #8
    ab34:	af00      	add	r7, sp, #0
    ab36:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ab38:	687b      	ldr	r3, [r7, #4]
    ab3a:	781b      	ldrb	r3, [r3, #0]
    ab3c:	b2db      	uxtb	r3, r3
    ab3e:	f023 0304 	bic.w	r3, r3, #4
    ab42:	b2da      	uxtb	r2, r3
    ab44:	687b      	ldr	r3, [r7, #4]
    ab46:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ab48:	210e      	movs	r1, #14
    ab4a:	6878      	ldr	r0, [r7, #4]
    ab4c:	4b02      	ldr	r3, [pc, #8]	; (ab58 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    ab4e:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    ab50:	bf00      	nop
    ab52:	3708      	adds	r7, #8
    ab54:	46bd      	mov	sp, r7
    ab56:	bd80      	pop	{r7, pc}
    ab58:	0000aad1 	.word	0x0000aad1

0000ab5c <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    ab5c:	b580      	push	{r7, lr}
    ab5e:	b084      	sub	sp, #16
    ab60:	af00      	add	r7, sp, #0
    ab62:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ab64:	210e      	movs	r1, #14
    ab66:	6878      	ldr	r0, [r7, #4]
    ab68:	4b08      	ldr	r3, [pc, #32]	; (ab8c <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    ab6a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ab6c:	687b      	ldr	r3, [r7, #4]
    ab6e:	781b      	ldrb	r3, [r3, #0]
    ab70:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    ab72:	7bfb      	ldrb	r3, [r7, #15]
    ab74:	09db      	lsrs	r3, r3, #7
    ab76:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ab78:	7bfb      	ldrb	r3, [r7, #15]
    ab7a:	2b00      	cmp	r3, #0
    ab7c:	bf14      	ite	ne
    ab7e:	2301      	movne	r3, #1
    ab80:	2300      	moveq	r3, #0
    ab82:	b2db      	uxtb	r3, r3
}
    ab84:	4618      	mov	r0, r3
    ab86:	3710      	adds	r7, #16
    ab88:	46bd      	mov	sp, r7
    ab8a:	bd80      	pop	{r7, pc}
    ab8c:	0000aad1 	.word	0x0000aad1

0000ab90 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    ab90:	b480      	push	{r7}
    ab92:	b085      	sub	sp, #20
    ab94:	af00      	add	r7, sp, #0
    ab96:	6078      	str	r0, [r7, #4]
    ab98:	460b      	mov	r3, r1
    ab9a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    ab9c:	687b      	ldr	r3, [r7, #4]
    ab9e:	785b      	ldrb	r3, [r3, #1]
    aba0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    aba2:	7bfb      	ldrb	r3, [r7, #15]
    aba4:	f023 030f 	bic.w	r3, r3, #15
    aba8:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    abaa:	78fb      	ldrb	r3, [r7, #3]
    abac:	f003 030f 	and.w	r3, r3, #15
    abb0:	b2da      	uxtb	r2, r3
    abb2:	7bfb      	ldrb	r3, [r7, #15]
    abb4:	4313      	orrs	r3, r2
    abb6:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    abb8:	687b      	ldr	r3, [r7, #4]
    abba:	7bfa      	ldrb	r2, [r7, #15]
    abbc:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    abbe:	bf00      	nop
    abc0:	3714      	adds	r7, #20
    abc2:	46bd      	mov	sp, r7
    abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    abc8:	4770      	bx	lr
	...

0000abcc <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    abcc:	b580      	push	{r7, lr}
    abce:	b082      	sub	sp, #8
    abd0:	af00      	add	r7, sp, #0
    abd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    abd4:	687b      	ldr	r3, [r7, #4]
    abd6:	2b00      	cmp	r3, #0
    abd8:	d005      	beq.n	abe6 <_wdt_init+0x1a>
    abda:	687b      	ldr	r3, [r7, #4]
    abdc:	681b      	ldr	r3, [r3, #0]
    abde:	2b00      	cmp	r3, #0
    abe0:	d001      	beq.n	abe6 <_wdt_init+0x1a>
    abe2:	2301      	movs	r3, #1
    abe4:	e000      	b.n	abe8 <_wdt_init+0x1c>
    abe6:	2300      	movs	r3, #0
    abe8:	f003 0301 	and.w	r3, r3, #1
    abec:	b2db      	uxtb	r3, r3
    abee:	2250      	movs	r2, #80	; 0x50
    abf0:	4913      	ldr	r1, [pc, #76]	; (ac40 <_wdt_init+0x74>)
    abf2:	4618      	mov	r0, r3
    abf4:	4b13      	ldr	r3, [pc, #76]	; (ac44 <_wdt_init+0x78>)
    abf6:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    abf8:	687b      	ldr	r3, [r7, #4]
    abfa:	681b      	ldr	r3, [r3, #0]
    abfc:	4618      	mov	r0, r3
    abfe:	4b12      	ldr	r3, [pc, #72]	; (ac48 <_wdt_init+0x7c>)
    ac00:	4798      	blx	r3
    ac02:	4603      	mov	r3, r0
    ac04:	2b00      	cmp	r3, #0
    ac06:	d107      	bne.n	ac18 <_wdt_init+0x4c>
    ac08:	687b      	ldr	r3, [r7, #4]
    ac0a:	681b      	ldr	r3, [r3, #0]
    ac0c:	4618      	mov	r0, r3
    ac0e:	4b0f      	ldr	r3, [pc, #60]	; (ac4c <_wdt_init+0x80>)
    ac10:	4798      	blx	r3
    ac12:	4603      	mov	r3, r0
    ac14:	2b00      	cmp	r3, #0
    ac16:	d002      	beq.n	ac1e <_wdt_init+0x52>
		return ERR_DENIED;
    ac18:	f06f 0310 	mvn.w	r3, #16
    ac1c:	e00b      	b.n	ac36 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    ac1e:	687b      	ldr	r3, [r7, #4]
    ac20:	681b      	ldr	r3, [r3, #0]
    ac22:	4618      	mov	r0, r3
    ac24:	4b0a      	ldr	r3, [pc, #40]	; (ac50 <_wdt_init+0x84>)
    ac26:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ac28:	687b      	ldr	r3, [r7, #4]
    ac2a:	681b      	ldr	r3, [r3, #0]
    ac2c:	210b      	movs	r1, #11
    ac2e:	4618      	mov	r0, r3
    ac30:	4b08      	ldr	r3, [pc, #32]	; (ac54 <_wdt_init+0x88>)
    ac32:	4798      	blx	r3
	}

	return ERR_NONE;
    ac34:	2300      	movs	r3, #0
}
    ac36:	4618      	mov	r0, r3
    ac38:	3708      	adds	r7, #8
    ac3a:	46bd      	mov	sp, r7
    ac3c:	bd80      	pop	{r7, pc}
    ac3e:	bf00      	nop
    ac40:	0000f034 	.word	0x0000f034
    ac44:	00003911 	.word	0x00003911
    ac48:	0000ab5d 	.word	0x0000ab5d
    ac4c:	0000aaf5 	.word	0x0000aaf5
    ac50:	0000ab31 	.word	0x0000ab31
    ac54:	0000ab91 	.word	0x0000ab91

0000ac58 <hri_port_set_DIR_reg>:
{
    ac58:	b480      	push	{r7}
    ac5a:	b085      	sub	sp, #20
    ac5c:	af00      	add	r7, sp, #0
    ac5e:	60f8      	str	r0, [r7, #12]
    ac60:	460b      	mov	r3, r1
    ac62:	607a      	str	r2, [r7, #4]
    ac64:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    ac66:	7afb      	ldrb	r3, [r7, #11]
    ac68:	68fa      	ldr	r2, [r7, #12]
    ac6a:	01db      	lsls	r3, r3, #7
    ac6c:	4413      	add	r3, r2
    ac6e:	3308      	adds	r3, #8
    ac70:	687a      	ldr	r2, [r7, #4]
    ac72:	601a      	str	r2, [r3, #0]
}
    ac74:	bf00      	nop
    ac76:	3714      	adds	r7, #20
    ac78:	46bd      	mov	sp, r7
    ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac7e:	4770      	bx	lr

0000ac80 <hri_port_clear_DIR_reg>:
{
    ac80:	b480      	push	{r7}
    ac82:	b085      	sub	sp, #20
    ac84:	af00      	add	r7, sp, #0
    ac86:	60f8      	str	r0, [r7, #12]
    ac88:	460b      	mov	r3, r1
    ac8a:	607a      	str	r2, [r7, #4]
    ac8c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    ac8e:	7afb      	ldrb	r3, [r7, #11]
    ac90:	68fa      	ldr	r2, [r7, #12]
    ac92:	01db      	lsls	r3, r3, #7
    ac94:	4413      	add	r3, r2
    ac96:	3304      	adds	r3, #4
    ac98:	687a      	ldr	r2, [r7, #4]
    ac9a:	601a      	str	r2, [r3, #0]
}
    ac9c:	bf00      	nop
    ac9e:	3714      	adds	r7, #20
    aca0:	46bd      	mov	sp, r7
    aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aca6:	4770      	bx	lr

0000aca8 <hri_port_set_OUT_reg>:
{
    aca8:	b480      	push	{r7}
    acaa:	b085      	sub	sp, #20
    acac:	af00      	add	r7, sp, #0
    acae:	60f8      	str	r0, [r7, #12]
    acb0:	460b      	mov	r3, r1
    acb2:	607a      	str	r2, [r7, #4]
    acb4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    acb6:	7afb      	ldrb	r3, [r7, #11]
    acb8:	68fa      	ldr	r2, [r7, #12]
    acba:	01db      	lsls	r3, r3, #7
    acbc:	4413      	add	r3, r2
    acbe:	3318      	adds	r3, #24
    acc0:	687a      	ldr	r2, [r7, #4]
    acc2:	601a      	str	r2, [r3, #0]
}
    acc4:	bf00      	nop
    acc6:	3714      	adds	r7, #20
    acc8:	46bd      	mov	sp, r7
    acca:	f85d 7b04 	ldr.w	r7, [sp], #4
    acce:	4770      	bx	lr

0000acd0 <hri_port_clear_OUT_reg>:
{
    acd0:	b480      	push	{r7}
    acd2:	b085      	sub	sp, #20
    acd4:	af00      	add	r7, sp, #0
    acd6:	60f8      	str	r0, [r7, #12]
    acd8:	460b      	mov	r3, r1
    acda:	607a      	str	r2, [r7, #4]
    acdc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    acde:	7afb      	ldrb	r3, [r7, #11]
    ace0:	68fa      	ldr	r2, [r7, #12]
    ace2:	01db      	lsls	r3, r3, #7
    ace4:	4413      	add	r3, r2
    ace6:	3314      	adds	r3, #20
    ace8:	687a      	ldr	r2, [r7, #4]
    acea:	601a      	str	r2, [r3, #0]
}
    acec:	bf00      	nop
    acee:	3714      	adds	r7, #20
    acf0:	46bd      	mov	sp, r7
    acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    acf6:	4770      	bx	lr

0000acf8 <hri_port_write_PMUX_PMUXE_bf>:
{
    acf8:	b480      	push	{r7}
    acfa:	b085      	sub	sp, #20
    acfc:	af00      	add	r7, sp, #0
    acfe:	6078      	str	r0, [r7, #4]
    ad00:	4608      	mov	r0, r1
    ad02:	4611      	mov	r1, r2
    ad04:	461a      	mov	r2, r3
    ad06:	4603      	mov	r3, r0
    ad08:	70fb      	strb	r3, [r7, #3]
    ad0a:	460b      	mov	r3, r1
    ad0c:	70bb      	strb	r3, [r7, #2]
    ad0e:	4613      	mov	r3, r2
    ad10:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ad12:	78fa      	ldrb	r2, [r7, #3]
    ad14:	78bb      	ldrb	r3, [r7, #2]
    ad16:	6879      	ldr	r1, [r7, #4]
    ad18:	01d2      	lsls	r2, r2, #7
    ad1a:	440a      	add	r2, r1
    ad1c:	4413      	add	r3, r2
    ad1e:	3330      	adds	r3, #48	; 0x30
    ad20:	781b      	ldrb	r3, [r3, #0]
    ad22:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ad24:	7bfb      	ldrb	r3, [r7, #15]
    ad26:	f023 030f 	bic.w	r3, r3, #15
    ad2a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ad2c:	787b      	ldrb	r3, [r7, #1]
    ad2e:	f003 030f 	and.w	r3, r3, #15
    ad32:	b2da      	uxtb	r2, r3
    ad34:	7bfb      	ldrb	r3, [r7, #15]
    ad36:	4313      	orrs	r3, r2
    ad38:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ad3a:	78fa      	ldrb	r2, [r7, #3]
    ad3c:	78bb      	ldrb	r3, [r7, #2]
    ad3e:	6879      	ldr	r1, [r7, #4]
    ad40:	01d2      	lsls	r2, r2, #7
    ad42:	440a      	add	r2, r1
    ad44:	4413      	add	r3, r2
    ad46:	3330      	adds	r3, #48	; 0x30
    ad48:	7bfa      	ldrb	r2, [r7, #15]
    ad4a:	701a      	strb	r2, [r3, #0]
}
    ad4c:	bf00      	nop
    ad4e:	3714      	adds	r7, #20
    ad50:	46bd      	mov	sp, r7
    ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad56:	4770      	bx	lr

0000ad58 <hri_port_write_PMUX_PMUXO_bf>:
{
    ad58:	b480      	push	{r7}
    ad5a:	b085      	sub	sp, #20
    ad5c:	af00      	add	r7, sp, #0
    ad5e:	6078      	str	r0, [r7, #4]
    ad60:	4608      	mov	r0, r1
    ad62:	4611      	mov	r1, r2
    ad64:	461a      	mov	r2, r3
    ad66:	4603      	mov	r3, r0
    ad68:	70fb      	strb	r3, [r7, #3]
    ad6a:	460b      	mov	r3, r1
    ad6c:	70bb      	strb	r3, [r7, #2]
    ad6e:	4613      	mov	r3, r2
    ad70:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ad72:	78fa      	ldrb	r2, [r7, #3]
    ad74:	78bb      	ldrb	r3, [r7, #2]
    ad76:	6879      	ldr	r1, [r7, #4]
    ad78:	01d2      	lsls	r2, r2, #7
    ad7a:	440a      	add	r2, r1
    ad7c:	4413      	add	r3, r2
    ad7e:	3330      	adds	r3, #48	; 0x30
    ad80:	781b      	ldrb	r3, [r3, #0]
    ad82:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    ad84:	7bfb      	ldrb	r3, [r7, #15]
    ad86:	f003 030f 	and.w	r3, r3, #15
    ad8a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    ad8c:	787b      	ldrb	r3, [r7, #1]
    ad8e:	011b      	lsls	r3, r3, #4
    ad90:	b2da      	uxtb	r2, r3
    ad92:	7bfb      	ldrb	r3, [r7, #15]
    ad94:	4313      	orrs	r3, r2
    ad96:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ad98:	78fa      	ldrb	r2, [r7, #3]
    ad9a:	78bb      	ldrb	r3, [r7, #2]
    ad9c:	6879      	ldr	r1, [r7, #4]
    ad9e:	01d2      	lsls	r2, r2, #7
    ada0:	440a      	add	r2, r1
    ada2:	4413      	add	r3, r2
    ada4:	3330      	adds	r3, #48	; 0x30
    ada6:	7bfa      	ldrb	r2, [r7, #15]
    ada8:	701a      	strb	r2, [r3, #0]
}
    adaa:	bf00      	nop
    adac:	3714      	adds	r7, #20
    adae:	46bd      	mov	sp, r7
    adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    adb4:	4770      	bx	lr

0000adb6 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    adb6:	b480      	push	{r7}
    adb8:	b085      	sub	sp, #20
    adba:	af00      	add	r7, sp, #0
    adbc:	6078      	str	r0, [r7, #4]
    adbe:	4608      	mov	r0, r1
    adc0:	4611      	mov	r1, r2
    adc2:	461a      	mov	r2, r3
    adc4:	4603      	mov	r3, r0
    adc6:	70fb      	strb	r3, [r7, #3]
    adc8:	460b      	mov	r3, r1
    adca:	70bb      	strb	r3, [r7, #2]
    adcc:	4613      	mov	r3, r2
    adce:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    add0:	78fa      	ldrb	r2, [r7, #3]
    add2:	78bb      	ldrb	r3, [r7, #2]
    add4:	6879      	ldr	r1, [r7, #4]
    add6:	01d2      	lsls	r2, r2, #7
    add8:	440a      	add	r2, r1
    adda:	4413      	add	r3, r2
    addc:	3340      	adds	r3, #64	; 0x40
    adde:	781b      	ldrb	r3, [r3, #0]
    ade0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    ade2:	7bfb      	ldrb	r3, [r7, #15]
    ade4:	f023 0301 	bic.w	r3, r3, #1
    ade8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    adea:	787a      	ldrb	r2, [r7, #1]
    adec:	7bfb      	ldrb	r3, [r7, #15]
    adee:	4313      	orrs	r3, r2
    adf0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    adf2:	78fa      	ldrb	r2, [r7, #3]
    adf4:	78bb      	ldrb	r3, [r7, #2]
    adf6:	6879      	ldr	r1, [r7, #4]
    adf8:	01d2      	lsls	r2, r2, #7
    adfa:	440a      	add	r2, r1
    adfc:	4413      	add	r3, r2
    adfe:	3340      	adds	r3, #64	; 0x40
    ae00:	7bfa      	ldrb	r2, [r7, #15]
    ae02:	701a      	strb	r2, [r3, #0]
}
    ae04:	bf00      	nop
    ae06:	3714      	adds	r7, #20
    ae08:	46bd      	mov	sp, r7
    ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae0e:	4770      	bx	lr

0000ae10 <hri_port_write_WRCONFIG_reg>:
{
    ae10:	b480      	push	{r7}
    ae12:	b085      	sub	sp, #20
    ae14:	af00      	add	r7, sp, #0
    ae16:	60f8      	str	r0, [r7, #12]
    ae18:	460b      	mov	r3, r1
    ae1a:	607a      	str	r2, [r7, #4]
    ae1c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    ae1e:	7afb      	ldrb	r3, [r7, #11]
    ae20:	68fa      	ldr	r2, [r7, #12]
    ae22:	01db      	lsls	r3, r3, #7
    ae24:	4413      	add	r3, r2
    ae26:	3328      	adds	r3, #40	; 0x28
    ae28:	687a      	ldr	r2, [r7, #4]
    ae2a:	601a      	str	r2, [r3, #0]
}
    ae2c:	bf00      	nop
    ae2e:	3714      	adds	r7, #20
    ae30:	46bd      	mov	sp, r7
    ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae36:	4770      	bx	lr

0000ae38 <_gpio_set_direction>:
{
    ae38:	b580      	push	{r7, lr}
    ae3a:	b082      	sub	sp, #8
    ae3c:	af00      	add	r7, sp, #0
    ae3e:	4603      	mov	r3, r0
    ae40:	6039      	str	r1, [r7, #0]
    ae42:	71fb      	strb	r3, [r7, #7]
    ae44:	4613      	mov	r3, r2
    ae46:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    ae48:	79bb      	ldrb	r3, [r7, #6]
    ae4a:	2b01      	cmp	r3, #1
    ae4c:	d01c      	beq.n	ae88 <_gpio_set_direction+0x50>
    ae4e:	2b02      	cmp	r3, #2
    ae50:	d037      	beq.n	aec2 <_gpio_set_direction+0x8a>
    ae52:	2b00      	cmp	r3, #0
    ae54:	d14e      	bne.n	aef4 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ae56:	79fb      	ldrb	r3, [r7, #7]
    ae58:	683a      	ldr	r2, [r7, #0]
    ae5a:	4619      	mov	r1, r3
    ae5c:	482a      	ldr	r0, [pc, #168]	; (af08 <_gpio_set_direction+0xd0>)
    ae5e:	4b2b      	ldr	r3, [pc, #172]	; (af0c <_gpio_set_direction+0xd4>)
    ae60:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ae62:	683b      	ldr	r3, [r7, #0]
    ae64:	b29b      	uxth	r3, r3
    ae66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ae6a:	79fb      	ldrb	r3, [r7, #7]
    ae6c:	4619      	mov	r1, r3
    ae6e:	4826      	ldr	r0, [pc, #152]	; (af08 <_gpio_set_direction+0xd0>)
    ae70:	4b27      	ldr	r3, [pc, #156]	; (af10 <_gpio_set_direction+0xd8>)
    ae72:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ae74:	683b      	ldr	r3, [r7, #0]
    ae76:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ae78:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ae7c:	79fb      	ldrb	r3, [r7, #7]
    ae7e:	4619      	mov	r1, r3
    ae80:	4821      	ldr	r0, [pc, #132]	; (af08 <_gpio_set_direction+0xd0>)
    ae82:	4b23      	ldr	r3, [pc, #140]	; (af10 <_gpio_set_direction+0xd8>)
    ae84:	4798      	blx	r3
		break;
    ae86:	e03a      	b.n	aefe <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ae88:	79fb      	ldrb	r3, [r7, #7]
    ae8a:	683a      	ldr	r2, [r7, #0]
    ae8c:	4619      	mov	r1, r3
    ae8e:	481e      	ldr	r0, [pc, #120]	; (af08 <_gpio_set_direction+0xd0>)
    ae90:	4b1e      	ldr	r3, [pc, #120]	; (af0c <_gpio_set_direction+0xd4>)
    ae92:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ae94:	683b      	ldr	r3, [r7, #0]
    ae96:	b29b      	uxth	r3, r3
    ae98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ae9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    aea0:	79f9      	ldrb	r1, [r7, #7]
    aea2:	461a      	mov	r2, r3
    aea4:	4818      	ldr	r0, [pc, #96]	; (af08 <_gpio_set_direction+0xd0>)
    aea6:	4b1a      	ldr	r3, [pc, #104]	; (af10 <_gpio_set_direction+0xd8>)
    aea8:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    aeaa:	683b      	ldr	r3, [r7, #0]
    aeac:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    aeae:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    aeb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    aeb6:	79f9      	ldrb	r1, [r7, #7]
    aeb8:	461a      	mov	r2, r3
    aeba:	4813      	ldr	r0, [pc, #76]	; (af08 <_gpio_set_direction+0xd0>)
    aebc:	4b14      	ldr	r3, [pc, #80]	; (af10 <_gpio_set_direction+0xd8>)
    aebe:	4798      	blx	r3
		break;
    aec0:	e01d      	b.n	aefe <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    aec2:	79fb      	ldrb	r3, [r7, #7]
    aec4:	683a      	ldr	r2, [r7, #0]
    aec6:	4619      	mov	r1, r3
    aec8:	480f      	ldr	r0, [pc, #60]	; (af08 <_gpio_set_direction+0xd0>)
    aeca:	4b12      	ldr	r3, [pc, #72]	; (af14 <_gpio_set_direction+0xdc>)
    aecc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    aece:	683b      	ldr	r3, [r7, #0]
    aed0:	b29b      	uxth	r3, r3
    aed2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    aed6:	79fb      	ldrb	r3, [r7, #7]
    aed8:	4619      	mov	r1, r3
    aeda:	480b      	ldr	r0, [pc, #44]	; (af08 <_gpio_set_direction+0xd0>)
    aedc:	4b0c      	ldr	r3, [pc, #48]	; (af10 <_gpio_set_direction+0xd8>)
    aede:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    aee0:	683b      	ldr	r3, [r7, #0]
    aee2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    aee4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    aee8:	79fb      	ldrb	r3, [r7, #7]
    aeea:	4619      	mov	r1, r3
    aeec:	4806      	ldr	r0, [pc, #24]	; (af08 <_gpio_set_direction+0xd0>)
    aeee:	4b08      	ldr	r3, [pc, #32]	; (af10 <_gpio_set_direction+0xd8>)
    aef0:	4798      	blx	r3
		break;
    aef2:	e004      	b.n	aefe <_gpio_set_direction+0xc6>
		ASSERT(false);
    aef4:	2246      	movs	r2, #70	; 0x46
    aef6:	4908      	ldr	r1, [pc, #32]	; (af18 <_gpio_set_direction+0xe0>)
    aef8:	2000      	movs	r0, #0
    aefa:	4b08      	ldr	r3, [pc, #32]	; (af1c <_gpio_set_direction+0xe4>)
    aefc:	4798      	blx	r3
}
    aefe:	bf00      	nop
    af00:	3708      	adds	r7, #8
    af02:	46bd      	mov	sp, r7
    af04:	bd80      	pop	{r7, pc}
    af06:	bf00      	nop
    af08:	41008000 	.word	0x41008000
    af0c:	0000ac81 	.word	0x0000ac81
    af10:	0000ae11 	.word	0x0000ae11
    af14:	0000ac59 	.word	0x0000ac59
    af18:	0000f04c 	.word	0x0000f04c
    af1c:	00003911 	.word	0x00003911

0000af20 <_gpio_set_level>:
{
    af20:	b580      	push	{r7, lr}
    af22:	b082      	sub	sp, #8
    af24:	af00      	add	r7, sp, #0
    af26:	4603      	mov	r3, r0
    af28:	6039      	str	r1, [r7, #0]
    af2a:	71fb      	strb	r3, [r7, #7]
    af2c:	4613      	mov	r3, r2
    af2e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    af30:	79bb      	ldrb	r3, [r7, #6]
    af32:	2b00      	cmp	r3, #0
    af34:	d006      	beq.n	af44 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    af36:	79fb      	ldrb	r3, [r7, #7]
    af38:	683a      	ldr	r2, [r7, #0]
    af3a:	4619      	mov	r1, r3
    af3c:	4806      	ldr	r0, [pc, #24]	; (af58 <_gpio_set_level+0x38>)
    af3e:	4b07      	ldr	r3, [pc, #28]	; (af5c <_gpio_set_level+0x3c>)
    af40:	4798      	blx	r3
}
    af42:	e005      	b.n	af50 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    af44:	79fb      	ldrb	r3, [r7, #7]
    af46:	683a      	ldr	r2, [r7, #0]
    af48:	4619      	mov	r1, r3
    af4a:	4803      	ldr	r0, [pc, #12]	; (af58 <_gpio_set_level+0x38>)
    af4c:	4b04      	ldr	r3, [pc, #16]	; (af60 <_gpio_set_level+0x40>)
    af4e:	4798      	blx	r3
}
    af50:	bf00      	nop
    af52:	3708      	adds	r7, #8
    af54:	46bd      	mov	sp, r7
    af56:	bd80      	pop	{r7, pc}
    af58:	41008000 	.word	0x41008000
    af5c:	0000aca9 	.word	0x0000aca9
    af60:	0000acd1 	.word	0x0000acd1

0000af64 <_gpio_set_pin_function>:
{
    af64:	b590      	push	{r4, r7, lr}
    af66:	b085      	sub	sp, #20
    af68:	af00      	add	r7, sp, #0
    af6a:	6078      	str	r0, [r7, #4]
    af6c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    af6e:	687b      	ldr	r3, [r7, #4]
    af70:	095b      	lsrs	r3, r3, #5
    af72:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    af74:	687b      	ldr	r3, [r7, #4]
    af76:	b2db      	uxtb	r3, r3
    af78:	f003 031f 	and.w	r3, r3, #31
    af7c:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    af7e:	683b      	ldr	r3, [r7, #0]
    af80:	f1b3 3fff 	cmp.w	r3, #4294967295
    af84:	d106      	bne.n	af94 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    af86:	7bba      	ldrb	r2, [r7, #14]
    af88:	7bf9      	ldrb	r1, [r7, #15]
    af8a:	2300      	movs	r3, #0
    af8c:	4812      	ldr	r0, [pc, #72]	; (afd8 <_gpio_set_pin_function+0x74>)
    af8e:	4c13      	ldr	r4, [pc, #76]	; (afdc <_gpio_set_pin_function+0x78>)
    af90:	47a0      	blx	r4
}
    af92:	e01d      	b.n	afd0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    af94:	7bba      	ldrb	r2, [r7, #14]
    af96:	7bf9      	ldrb	r1, [r7, #15]
    af98:	2301      	movs	r3, #1
    af9a:	480f      	ldr	r0, [pc, #60]	; (afd8 <_gpio_set_pin_function+0x74>)
    af9c:	4c0f      	ldr	r4, [pc, #60]	; (afdc <_gpio_set_pin_function+0x78>)
    af9e:	47a0      	blx	r4
		if (pin & 1) {
    afa0:	7bbb      	ldrb	r3, [r7, #14]
    afa2:	f003 0301 	and.w	r3, r3, #1
    afa6:	2b00      	cmp	r3, #0
    afa8:	d009      	beq.n	afbe <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    afaa:	7bbb      	ldrb	r3, [r7, #14]
    afac:	085b      	lsrs	r3, r3, #1
    afae:	b2da      	uxtb	r2, r3
    afb0:	683b      	ldr	r3, [r7, #0]
    afb2:	b2db      	uxtb	r3, r3
    afb4:	7bf9      	ldrb	r1, [r7, #15]
    afb6:	4808      	ldr	r0, [pc, #32]	; (afd8 <_gpio_set_pin_function+0x74>)
    afb8:	4c09      	ldr	r4, [pc, #36]	; (afe0 <_gpio_set_pin_function+0x7c>)
    afba:	47a0      	blx	r4
}
    afbc:	e008      	b.n	afd0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    afbe:	7bbb      	ldrb	r3, [r7, #14]
    afc0:	085b      	lsrs	r3, r3, #1
    afc2:	b2da      	uxtb	r2, r3
    afc4:	683b      	ldr	r3, [r7, #0]
    afc6:	b2db      	uxtb	r3, r3
    afc8:	7bf9      	ldrb	r1, [r7, #15]
    afca:	4803      	ldr	r0, [pc, #12]	; (afd8 <_gpio_set_pin_function+0x74>)
    afcc:	4c05      	ldr	r4, [pc, #20]	; (afe4 <_gpio_set_pin_function+0x80>)
    afce:	47a0      	blx	r4
}
    afd0:	bf00      	nop
    afd2:	3714      	adds	r7, #20
    afd4:	46bd      	mov	sp, r7
    afd6:	bd90      	pop	{r4, r7, pc}
    afd8:	41008000 	.word	0x41008000
    afdc:	0000adb7 	.word	0x0000adb7
    afe0:	0000ad59 	.word	0x0000ad59
    afe4:	0000acf9 	.word	0x0000acf9

0000afe8 <gpio_set_pin_function>:
{
    afe8:	b580      	push	{r7, lr}
    afea:	b082      	sub	sp, #8
    afec:	af00      	add	r7, sp, #0
    afee:	6078      	str	r0, [r7, #4]
    aff0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    aff2:	6839      	ldr	r1, [r7, #0]
    aff4:	6878      	ldr	r0, [r7, #4]
    aff6:	4b03      	ldr	r3, [pc, #12]	; (b004 <gpio_set_pin_function+0x1c>)
    aff8:	4798      	blx	r3
}
    affa:	bf00      	nop
    affc:	3708      	adds	r7, #8
    affe:	46bd      	mov	sp, r7
    b000:	bd80      	pop	{r7, pc}
    b002:	bf00      	nop
    b004:	0000af65 	.word	0x0000af65

0000b008 <gpio_set_pin_direction>:
{
    b008:	b580      	push	{r7, lr}
    b00a:	b082      	sub	sp, #8
    b00c:	af00      	add	r7, sp, #0
    b00e:	4603      	mov	r3, r0
    b010:	460a      	mov	r2, r1
    b012:	71fb      	strb	r3, [r7, #7]
    b014:	4613      	mov	r3, r2
    b016:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b018:	79fb      	ldrb	r3, [r7, #7]
    b01a:	095b      	lsrs	r3, r3, #5
    b01c:	b2d8      	uxtb	r0, r3
    b01e:	79fb      	ldrb	r3, [r7, #7]
    b020:	f003 031f 	and.w	r3, r3, #31
    b024:	2201      	movs	r2, #1
    b026:	fa02 f303 	lsl.w	r3, r2, r3
    b02a:	79ba      	ldrb	r2, [r7, #6]
    b02c:	4619      	mov	r1, r3
    b02e:	4b03      	ldr	r3, [pc, #12]	; (b03c <gpio_set_pin_direction+0x34>)
    b030:	4798      	blx	r3
}
    b032:	bf00      	nop
    b034:	3708      	adds	r7, #8
    b036:	46bd      	mov	sp, r7
    b038:	bd80      	pop	{r7, pc}
    b03a:	bf00      	nop
    b03c:	0000ae39 	.word	0x0000ae39

0000b040 <gpio_set_pin_level>:
{
    b040:	b580      	push	{r7, lr}
    b042:	b082      	sub	sp, #8
    b044:	af00      	add	r7, sp, #0
    b046:	4603      	mov	r3, r0
    b048:	460a      	mov	r2, r1
    b04a:	71fb      	strb	r3, [r7, #7]
    b04c:	4613      	mov	r3, r2
    b04e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b050:	79fb      	ldrb	r3, [r7, #7]
    b052:	095b      	lsrs	r3, r3, #5
    b054:	b2d8      	uxtb	r0, r3
    b056:	79fb      	ldrb	r3, [r7, #7]
    b058:	f003 031f 	and.w	r3, r3, #31
    b05c:	2201      	movs	r2, #1
    b05e:	fa02 f303 	lsl.w	r3, r2, r3
    b062:	79ba      	ldrb	r2, [r7, #6]
    b064:	4619      	mov	r1, r3
    b066:	4b03      	ldr	r3, [pc, #12]	; (b074 <gpio_set_pin_level+0x34>)
    b068:	4798      	blx	r3
}
    b06a:	bf00      	nop
    b06c:	3708      	adds	r7, #8
    b06e:	46bd      	mov	sp, r7
    b070:	bd80      	pop	{r7, pc}
    b072:	bf00      	nop
    b074:	0000af21 	.word	0x0000af21

0000b078 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b078:	b580      	push	{r7, lr}
    b07a:	b082      	sub	sp, #8
    b07c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b07e:	2100      	movs	r1, #0
    b080:	2008      	movs	r0, #8
    b082:	4b24      	ldr	r3, [pc, #144]	; (b114 <QSPI_N25Q256_exit_xip+0x9c>)
    b084:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b086:	2100      	movs	r1, #0
    b088:	202b      	movs	r0, #43	; 0x2b
    b08a:	4b22      	ldr	r3, [pc, #136]	; (b114 <QSPI_N25Q256_exit_xip+0x9c>)
    b08c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b08e:	2100      	movs	r1, #0
    b090:	202a      	movs	r0, #42	; 0x2a
    b092:	4b20      	ldr	r3, [pc, #128]	; (b114 <QSPI_N25Q256_exit_xip+0x9c>)
    b094:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b096:	2102      	movs	r1, #2
    b098:	2008      	movs	r0, #8
    b09a:	4b1f      	ldr	r3, [pc, #124]	; (b118 <QSPI_N25Q256_exit_xip+0xa0>)
    b09c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b09e:	2102      	movs	r1, #2
    b0a0:	202b      	movs	r0, #43	; 0x2b
    b0a2:	4b1d      	ldr	r3, [pc, #116]	; (b118 <QSPI_N25Q256_exit_xip+0xa0>)
    b0a4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b0a6:	2102      	movs	r1, #2
    b0a8:	202a      	movs	r0, #42	; 0x2a
    b0aa:	4b1b      	ldr	r3, [pc, #108]	; (b118 <QSPI_N25Q256_exit_xip+0xa0>)
    b0ac:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b0ae:	2101      	movs	r1, #1
    b0b0:	2008      	movs	r0, #8
    b0b2:	4b1a      	ldr	r3, [pc, #104]	; (b11c <QSPI_N25Q256_exit_xip+0xa4>)
    b0b4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b0b6:	2100      	movs	r1, #0
    b0b8:	202b      	movs	r0, #43	; 0x2b
    b0ba:	4b18      	ldr	r3, [pc, #96]	; (b11c <QSPI_N25Q256_exit_xip+0xa4>)
    b0bc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b0be:	2100      	movs	r1, #0
    b0c0:	202a      	movs	r0, #42	; 0x2a
    b0c2:	4b16      	ldr	r3, [pc, #88]	; (b11c <QSPI_N25Q256_exit_xip+0xa4>)
    b0c4:	4798      	blx	r3

	delay_us(1);
    b0c6:	2001      	movs	r0, #1
    b0c8:	4b15      	ldr	r3, [pc, #84]	; (b120 <QSPI_N25Q256_exit_xip+0xa8>)
    b0ca:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b0cc:	2300      	movs	r3, #0
    b0ce:	607b      	str	r3, [r7, #4]
    b0d0:	e010      	b.n	b0f4 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b0d2:	2101      	movs	r1, #1
    b0d4:	202a      	movs	r0, #42	; 0x2a
    b0d6:	4b11      	ldr	r3, [pc, #68]	; (b11c <QSPI_N25Q256_exit_xip+0xa4>)
    b0d8:	4798      	blx	r3
		delay_us(1);
    b0da:	2001      	movs	r0, #1
    b0dc:	4b10      	ldr	r3, [pc, #64]	; (b120 <QSPI_N25Q256_exit_xip+0xa8>)
    b0de:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b0e0:	2100      	movs	r1, #0
    b0e2:	202a      	movs	r0, #42	; 0x2a
    b0e4:	4b0d      	ldr	r3, [pc, #52]	; (b11c <QSPI_N25Q256_exit_xip+0xa4>)
    b0e6:	4798      	blx	r3
		delay_us(1);
    b0e8:	2001      	movs	r0, #1
    b0ea:	4b0d      	ldr	r3, [pc, #52]	; (b120 <QSPI_N25Q256_exit_xip+0xa8>)
    b0ec:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b0ee:	687b      	ldr	r3, [r7, #4]
    b0f0:	3301      	adds	r3, #1
    b0f2:	607b      	str	r3, [r7, #4]
    b0f4:	687b      	ldr	r3, [r7, #4]
    b0f6:	2b06      	cmp	r3, #6
    b0f8:	ddeb      	ble.n	b0d2 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b0fa:	2101      	movs	r1, #1
    b0fc:	202b      	movs	r0, #43	; 0x2b
    b0fe:	4b07      	ldr	r3, [pc, #28]	; (b11c <QSPI_N25Q256_exit_xip+0xa4>)
    b100:	4798      	blx	r3
	delay_us(1);
    b102:	2001      	movs	r0, #1
    b104:	4b06      	ldr	r3, [pc, #24]	; (b120 <QSPI_N25Q256_exit_xip+0xa8>)
    b106:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b108:	4b06      	ldr	r3, [pc, #24]	; (b124 <QSPI_N25Q256_exit_xip+0xac>)
    b10a:	4798      	blx	r3
}
    b10c:	bf00      	nop
    b10e:	3708      	adds	r7, #8
    b110:	46bd      	mov	sp, r7
    b112:	bd80      	pop	{r7, pc}
    b114:	0000afe9 	.word	0x0000afe9
    b118:	0000b009 	.word	0x0000b009
    b11c:	0000b041 	.word	0x0000b041
    b120:	00001fd1 	.word	0x00001fd1
    b124:	000013e5 	.word	0x000013e5

0000b128 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b128:	b598      	push	{r3, r4, r7, lr}
    b12a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b12c:	4806      	ldr	r0, [pc, #24]	; (b148 <spi_nor_flash_init+0x20>)
    b12e:	4b07      	ldr	r3, [pc, #28]	; (b14c <spi_nor_flash_init+0x24>)
    b130:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b132:	2300      	movs	r3, #0
    b134:	4a06      	ldr	r2, [pc, #24]	; (b150 <spi_nor_flash_init+0x28>)
    b136:	4904      	ldr	r1, [pc, #16]	; (b148 <spi_nor_flash_init+0x20>)
    b138:	4806      	ldr	r0, [pc, #24]	; (b154 <spi_nor_flash_init+0x2c>)
    b13a:	4c07      	ldr	r4, [pc, #28]	; (b158 <spi_nor_flash_init+0x30>)
    b13c:	47a0      	blx	r4
    b13e:	4602      	mov	r2, r0
    b140:	4b06      	ldr	r3, [pc, #24]	; (b15c <spi_nor_flash_init+0x34>)
    b142:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b144:	bf00      	nop
    b146:	bd98      	pop	{r3, r4, r7, pc}
    b148:	20000e4c 	.word	0x20000e4c
    b14c:	00002439 	.word	0x00002439
    b150:	0000b079 	.word	0x0000b079
    b154:	20000ad4 	.word	0x20000ad4
    b158:	0000b595 	.word	0x0000b595
    b15c:	20001058 	.word	0x20001058

0000b160 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b160:	b580      	push	{r7, lr}
    b162:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b164:	4805      	ldr	r0, [pc, #20]	; (b17c <cdc_device_acm_init+0x1c>)
    b166:	4b06      	ldr	r3, [pc, #24]	; (b180 <cdc_device_acm_init+0x20>)
    b168:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b16a:	4b06      	ldr	r3, [pc, #24]	; (b184 <cdc_device_acm_init+0x24>)
    b16c:	4798      	blx	r3

	usbdc_start(single_desc);
    b16e:	4806      	ldr	r0, [pc, #24]	; (b188 <cdc_device_acm_init+0x28>)
    b170:	4b06      	ldr	r3, [pc, #24]	; (b18c <cdc_device_acm_init+0x2c>)
    b172:	4798      	blx	r3
	usbdc_attach();
    b174:	4b06      	ldr	r3, [pc, #24]	; (b190 <cdc_device_acm_init+0x30>)
    b176:	4798      	blx	r3
}
    b178:	bf00      	nop
    b17a:	bd80      	pop	{r7, pc}
    b17c:	20000b24 	.word	0x20000b24
    b180:	0000ccbd 	.word	0x0000ccbd
    b184:	0000bf35 	.word	0x0000bf35
    b188:	2000012c 	.word	0x2000012c
    b18c:	0000cd59 	.word	0x0000cd59
    b190:	0000cda9 	.word	0x0000cda9

0000b194 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b194:	b580      	push	{r7, lr}
    b196:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b198:	4b01      	ldr	r3, [pc, #4]	; (b1a0 <usb_init+0xc>)
    b19a:	4798      	blx	r3
}
    b19c:	bf00      	nop
    b19e:	bd80      	pop	{r7, pc}
    b1a0:	0000b161 	.word	0x0000b161

0000b1a4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b1a4:	b480      	push	{r7}
    b1a6:	b085      	sub	sp, #20
    b1a8:	af00      	add	r7, sp, #0
    b1aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b1ac:	f3ef 8310 	mrs	r3, PRIMASK
    b1b0:	60fb      	str	r3, [r7, #12]
  return(result);
    b1b2:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b1b4:	687b      	ldr	r3, [r7, #4]
    b1b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b1b8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b1ba:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b1be:	bf00      	nop
    b1c0:	3714      	adds	r7, #20
    b1c2:	46bd      	mov	sp, r7
    b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1c8:	4770      	bx	lr

0000b1ca <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b1ca:	b480      	push	{r7}
    b1cc:	b085      	sub	sp, #20
    b1ce:	af00      	add	r7, sp, #0
    b1d0:	6078      	str	r0, [r7, #4]
    b1d2:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b1d6:	687b      	ldr	r3, [r7, #4]
    b1d8:	681b      	ldr	r3, [r3, #0]
    b1da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b1dc:	68fb      	ldr	r3, [r7, #12]
    b1de:	f383 8810 	msr	PRIMASK, r3
}
    b1e2:	bf00      	nop
    b1e4:	3714      	adds	r7, #20
    b1e6:	46bd      	mov	sp, r7
    b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1ec:	4770      	bx	lr
	...

0000b1f0 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b1f0:	b580      	push	{r7, lr}
    b1f2:	b08c      	sub	sp, #48	; 0x30
    b1f4:	af00      	add	r7, sp, #0
    b1f6:	6078      	str	r0, [r7, #4]
    b1f8:	460b      	mov	r3, r1
    b1fa:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b1fc:	687b      	ldr	r3, [r7, #4]
    b1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b200:	687b      	ldr	r3, [r7, #4]
    b202:	681b      	ldr	r3, [r3, #0]
    b204:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b206:	f107 030c 	add.w	r3, r7, #12
    b20a:	2200      	movs	r2, #0
    b20c:	601a      	str	r2, [r3, #0]
    b20e:	605a      	str	r2, [r3, #4]
    b210:	609a      	str	r2, [r3, #8]
    b212:	60da      	str	r2, [r3, #12]
    b214:	611a      	str	r2, [r3, #16]
    b216:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b21a:	7b1b      	ldrb	r3, [r3, #12]
    b21c:	2b00      	cmp	r3, #0
    b21e:	d001      	beq.n	b224 <n25q256a_xip_confirm+0x34>
    b220:	2206      	movs	r2, #6
    b222:	e000      	b.n	b226 <n25q256a_xip_confirm+0x36>
    b224:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b226:	7b3b      	ldrb	r3, [r7, #12]
    b228:	f362 0302 	bfi	r3, r2, #0, #3
    b22c:	733b      	strb	r3, [r7, #12]
    b22e:	7b3b      	ldrb	r3, [r7, #12]
    b230:	f043 0310 	orr.w	r3, r3, #16
    b234:	733b      	strb	r3, [r7, #12]
    b236:	7b3b      	ldrb	r3, [r7, #12]
    b238:	f043 0320 	orr.w	r3, r3, #32
    b23c:	733b      	strb	r3, [r7, #12]
    b23e:	7b3b      	ldrb	r3, [r7, #12]
    b240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b244:	733b      	strb	r3, [r7, #12]
    b246:	7b3b      	ldrb	r3, [r7, #12]
    b248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b24c:	733b      	strb	r3, [r7, #12]
    b24e:	7b7b      	ldrb	r3, [r7, #13]
    b250:	f043 0303 	orr.w	r3, r3, #3
    b254:	737b      	strb	r3, [r7, #13]
    b256:	7b7b      	ldrb	r3, [r7, #13]
    b258:	2201      	movs	r2, #1
    b25a:	f362 1305 	bfi	r3, r2, #4, #2
    b25e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b262:	7b1b      	ldrb	r3, [r3, #12]
    b264:	2b00      	cmp	r3, #0
    b266:	d001      	beq.n	b26c <n25q256a_xip_confirm+0x7c>
    b268:	2208      	movs	r2, #8
    b26a:	e000      	b.n	b26e <n25q256a_xip_confirm+0x7e>
    b26c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b26e:	7bbb      	ldrb	r3, [r7, #14]
    b270:	f362 0304 	bfi	r3, r2, #0, #5
    b274:	73bb      	strb	r3, [r7, #14]
    b276:	230b      	movs	r3, #11
    b278:	743b      	strb	r3, [r7, #16]
    b27a:	78fb      	ldrb	r3, [r7, #3]
    b27c:	2b00      	cmp	r3, #0
    b27e:	d001      	beq.n	b284 <n25q256a_xip_confirm+0x94>
    b280:	2300      	movs	r3, #0
    b282:	e000      	b.n	b286 <n25q256a_xip_confirm+0x96>
    b284:	23ff      	movs	r3, #255	; 0xff
    b286:	747b      	strb	r3, [r7, #17]
    b288:	2301      	movs	r3, #1
    b28a:	61bb      	str	r3, [r7, #24]
    b28c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b290:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b292:	f107 030c 	add.w	r3, r7, #12
    b296:	4619      	mov	r1, r3
    b298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b29a:	4b07      	ldr	r3, [pc, #28]	; (b2b8 <n25q256a_xip_confirm+0xc8>)
    b29c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b29e:	78fb      	ldrb	r3, [r7, #3]
    b2a0:	2b00      	cmp	r3, #0
    b2a2:	d001      	beq.n	b2a8 <n25q256a_xip_confirm+0xb8>
    b2a4:	2202      	movs	r2, #2
    b2a6:	e000      	b.n	b2aa <n25q256a_xip_confirm+0xba>
    b2a8:	2201      	movs	r2, #1
    b2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2ac:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b2ae:	2300      	movs	r3, #0
}
    b2b0:	4618      	mov	r0, r3
    b2b2:	3730      	adds	r7, #48	; 0x30
    b2b4:	46bd      	mov	sp, r7
    b2b6:	bd80      	pop	{r7, pc}
    b2b8:	000024b1 	.word	0x000024b1

0000b2bc <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b2bc:	b580      	push	{r7, lr}
    b2be:	b08c      	sub	sp, #48	; 0x30
    b2c0:	af00      	add	r7, sp, #0
    b2c2:	6078      	str	r0, [r7, #4]
    b2c4:	460b      	mov	r3, r1
    b2c6:	70fb      	strb	r3, [r7, #3]
    b2c8:	4613      	mov	r3, r2
    b2ca:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b2cc:	2300      	movs	r3, #0
    b2ce:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b2d0:	687b      	ldr	r3, [r7, #4]
    b2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b2d4:	687b      	ldr	r3, [r7, #4]
    b2d6:	681b      	ldr	r3, [r3, #0]
    b2d8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b2da:	f107 030c 	add.w	r3, r7, #12
    b2de:	2200      	movs	r2, #0
    b2e0:	601a      	str	r2, [r3, #0]
    b2e2:	605a      	str	r2, [r3, #4]
    b2e4:	609a      	str	r2, [r3, #8]
    b2e6:	60da      	str	r2, [r3, #12]
    b2e8:	611a      	str	r2, [r3, #16]
    b2ea:	615a      	str	r2, [r3, #20]
    b2ec:	78fb      	ldrb	r3, [r7, #3]
    b2ee:	f003 0307 	and.w	r3, r3, #7
    b2f2:	b2da      	uxtb	r2, r3
    b2f4:	7b3b      	ldrb	r3, [r7, #12]
    b2f6:	f362 0302 	bfi	r3, r2, #0, #3
    b2fa:	733b      	strb	r3, [r7, #12]
    b2fc:	7b3b      	ldrb	r3, [r7, #12]
    b2fe:	f043 0310 	orr.w	r3, r3, #16
    b302:	733b      	strb	r3, [r7, #12]
    b304:	7b3b      	ldrb	r3, [r7, #12]
    b306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b30a:	733b      	strb	r3, [r7, #12]
    b30c:	78bb      	ldrb	r3, [r7, #2]
    b30e:	743b      	strb	r3, [r7, #16]
    b310:	2301      	movs	r3, #1
    b312:	61bb      	str	r3, [r7, #24]
    b314:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b318:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b31c:	7b5b      	ldrb	r3, [r3, #13]
    b31e:	2b00      	cmp	r3, #0
    b320:	d003      	beq.n	b32a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b322:	2100      	movs	r1, #0
    b324:	6878      	ldr	r0, [r7, #4]
    b326:	4b0a      	ldr	r3, [pc, #40]	; (b350 <n25q256a_read_reg+0x94>)
    b328:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b32a:	f107 030c 	add.w	r3, r7, #12
    b32e:	4619      	mov	r1, r3
    b330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b332:	4b08      	ldr	r3, [pc, #32]	; (b354 <n25q256a_read_reg+0x98>)
    b334:	4798      	blx	r3
	if (n25q->xip_mode) {
    b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b338:	7b5b      	ldrb	r3, [r3, #13]
    b33a:	2b00      	cmp	r3, #0
    b33c:	d003      	beq.n	b346 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b33e:	2101      	movs	r1, #1
    b340:	6878      	ldr	r0, [r7, #4]
    b342:	4b03      	ldr	r3, [pc, #12]	; (b350 <n25q256a_read_reg+0x94>)
    b344:	4798      	blx	r3
	}
	return status;
    b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b348:	4618      	mov	r0, r3
    b34a:	3730      	adds	r7, #48	; 0x30
    b34c:	46bd      	mov	sp, r7
    b34e:	bd80      	pop	{r7, pc}
    b350:	0000b1f1 	.word	0x0000b1f1
    b354:	000024b1 	.word	0x000024b1

0000b358 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b358:	b580      	push	{r7, lr}
    b35a:	b08c      	sub	sp, #48	; 0x30
    b35c:	af00      	add	r7, sp, #0
    b35e:	60f8      	str	r0, [r7, #12]
    b360:	607b      	str	r3, [r7, #4]
    b362:	460b      	mov	r3, r1
    b364:	72fb      	strb	r3, [r7, #11]
    b366:	4613      	mov	r3, r2
    b368:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b36a:	68fb      	ldr	r3, [r7, #12]
    b36c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b36e:	68fb      	ldr	r3, [r7, #12]
    b370:	681b      	ldr	r3, [r3, #0]
    b372:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b374:	f107 0310 	add.w	r3, r7, #16
    b378:	2200      	movs	r2, #0
    b37a:	601a      	str	r2, [r3, #0]
    b37c:	605a      	str	r2, [r3, #4]
    b37e:	609a      	str	r2, [r3, #8]
    b380:	60da      	str	r2, [r3, #12]
    b382:	611a      	str	r2, [r3, #16]
    b384:	615a      	str	r2, [r3, #20]
    b386:	7afb      	ldrb	r3, [r7, #11]
    b388:	f003 0307 	and.w	r3, r3, #7
    b38c:	b2da      	uxtb	r2, r3
    b38e:	7c3b      	ldrb	r3, [r7, #16]
    b390:	f362 0302 	bfi	r3, r2, #0, #3
    b394:	743b      	strb	r3, [r7, #16]
    b396:	7c3b      	ldrb	r3, [r7, #16]
    b398:	f043 0310 	orr.w	r3, r3, #16
    b39c:	743b      	strb	r3, [r7, #16]
    b39e:	7c3b      	ldrb	r3, [r7, #16]
    b3a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b3a4:	743b      	strb	r3, [r7, #16]
    b3a6:	7c7b      	ldrb	r3, [r7, #17]
    b3a8:	2202      	movs	r2, #2
    b3aa:	f362 1305 	bfi	r3, r2, #4, #2
    b3ae:	747b      	strb	r3, [r7, #17]
    b3b0:	7abb      	ldrb	r3, [r7, #10]
    b3b2:	753b      	strb	r3, [r7, #20]
    b3b4:	2301      	movs	r3, #1
    b3b6:	61fb      	str	r3, [r7, #28]
    b3b8:	1d3b      	adds	r3, r7, #4
    b3ba:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3be:	7b5b      	ldrb	r3, [r3, #13]
    b3c0:	2b00      	cmp	r3, #0
    b3c2:	d003      	beq.n	b3cc <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b3c4:	2100      	movs	r1, #0
    b3c6:	68f8      	ldr	r0, [r7, #12]
    b3c8:	4b09      	ldr	r3, [pc, #36]	; (b3f0 <n25q256a_write_reg+0x98>)
    b3ca:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b3cc:	f107 0310 	add.w	r3, r7, #16
    b3d0:	4619      	mov	r1, r3
    b3d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b3d4:	4b07      	ldr	r3, [pc, #28]	; (b3f4 <n25q256a_write_reg+0x9c>)
    b3d6:	4798      	blx	r3
	if (n25q->xip_mode) {
    b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3da:	7b5b      	ldrb	r3, [r3, #13]
    b3dc:	2b00      	cmp	r3, #0
    b3de:	d003      	beq.n	b3e8 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b3e0:	2101      	movs	r1, #1
    b3e2:	68f8      	ldr	r0, [r7, #12]
    b3e4:	4b02      	ldr	r3, [pc, #8]	; (b3f0 <n25q256a_write_reg+0x98>)
    b3e6:	4798      	blx	r3
	}
}
    b3e8:	bf00      	nop
    b3ea:	3730      	adds	r7, #48	; 0x30
    b3ec:	46bd      	mov	sp, r7
    b3ee:	bd80      	pop	{r7, pc}
    b3f0:	0000b1f1 	.word	0x0000b1f1
    b3f4:	000024b1 	.word	0x000024b1

0000b3f8 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b3f8:	b580      	push	{r7, lr}
    b3fa:	b090      	sub	sp, #64	; 0x40
    b3fc:	af00      	add	r7, sp, #0
    b3fe:	6078      	str	r0, [r7, #4]
    b400:	460b      	mov	r3, r1
    b402:	70fb      	strb	r3, [r7, #3]
    b404:	4613      	mov	r3, r2
    b406:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b408:	687b      	ldr	r3, [r7, #4]
    b40a:	681b      	ldr	r3, [r3, #0]
    b40c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b40e:	78bb      	ldrb	r3, [r7, #2]
    b410:	2b00      	cmp	r3, #0
    b412:	d001      	beq.n	b418 <n25q256a_write_enable+0x20>
    b414:	2306      	movs	r3, #6
    b416:	e000      	b.n	b41a <n25q256a_write_enable+0x22>
    b418:	2304      	movs	r3, #4
    b41a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b41e:	f107 0320 	add.w	r3, r7, #32
    b422:	2200      	movs	r2, #0
    b424:	601a      	str	r2, [r3, #0]
    b426:	605a      	str	r2, [r3, #4]
    b428:	609a      	str	r2, [r3, #8]
    b42a:	60da      	str	r2, [r3, #12]
    b42c:	611a      	str	r2, [r3, #16]
    b42e:	615a      	str	r2, [r3, #20]
    b430:	78fb      	ldrb	r3, [r7, #3]
    b432:	f003 0307 	and.w	r3, r3, #7
    b436:	b2da      	uxtb	r2, r3
    b438:	f897 3020 	ldrb.w	r3, [r7, #32]
    b43c:	f362 0302 	bfi	r3, r2, #0, #3
    b440:	f887 3020 	strb.w	r3, [r7, #32]
    b444:	f897 3020 	ldrb.w	r3, [r7, #32]
    b448:	f043 0310 	orr.w	r3, r3, #16
    b44c:	f887 3020 	strb.w	r3, [r7, #32]
    b450:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b454:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b458:	f107 0308 	add.w	r3, r7, #8
    b45c:	2200      	movs	r2, #0
    b45e:	601a      	str	r2, [r3, #0]
    b460:	605a      	str	r2, [r3, #4]
    b462:	609a      	str	r2, [r3, #8]
    b464:	60da      	str	r2, [r3, #12]
    b466:	611a      	str	r2, [r3, #16]
    b468:	615a      	str	r2, [r3, #20]
    b46a:	78fb      	ldrb	r3, [r7, #3]
    b46c:	f003 0307 	and.w	r3, r3, #7
    b470:	b2da      	uxtb	r2, r3
    b472:	7a3b      	ldrb	r3, [r7, #8]
    b474:	f362 0302 	bfi	r3, r2, #0, #3
    b478:	723b      	strb	r3, [r7, #8]
    b47a:	7a3b      	ldrb	r3, [r7, #8]
    b47c:	f043 0310 	orr.w	r3, r3, #16
    b480:	723b      	strb	r3, [r7, #8]
    b482:	7a3b      	ldrb	r3, [r7, #8]
    b484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b488:	723b      	strb	r3, [r7, #8]
    b48a:	2305      	movs	r3, #5
    b48c:	733b      	strb	r3, [r7, #12]
    b48e:	2301      	movs	r3, #1
    b490:	617b      	str	r3, [r7, #20]
    b492:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b496:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b498:	f107 0320 	add.w	r3, r7, #32
    b49c:	4619      	mov	r1, r3
    b49e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b4a0:	4b08      	ldr	r3, [pc, #32]	; (b4c4 <n25q256a_write_enable+0xcc>)
    b4a2:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b4a4:	f107 0308 	add.w	r3, r7, #8
    b4a8:	4619      	mov	r1, r3
    b4aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b4ac:	4b05      	ldr	r3, [pc, #20]	; (b4c4 <n25q256a_write_enable+0xcc>)
    b4ae:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b4b0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b4b4:	f003 0302 	and.w	r3, r3, #2
    b4b8:	2b00      	cmp	r3, #0
    b4ba:	d0ed      	beq.n	b498 <n25q256a_write_enable+0xa0>
}
    b4bc:	bf00      	nop
    b4be:	3740      	adds	r7, #64	; 0x40
    b4c0:	46bd      	mov	sp, r7
    b4c2:	bd80      	pop	{r7, pc}
    b4c4:	000024b1 	.word	0x000024b1

0000b4c8 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b4c8:	b590      	push	{r4, r7, lr}
    b4ca:	b087      	sub	sp, #28
    b4cc:	af00      	add	r7, sp, #0
    b4ce:	6078      	str	r0, [r7, #4]
    b4d0:	460b      	mov	r3, r1
    b4d2:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b4d4:	687b      	ldr	r3, [r7, #4]
    b4d6:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b4d8:	68fb      	ldr	r3, [r7, #12]
    b4da:	7b1b      	ldrb	r3, [r3, #12]
    b4dc:	2b00      	cmp	r3, #0
    b4de:	d001      	beq.n	b4e4 <n25q256a_switch_mode+0x1c>
    b4e0:	2306      	movs	r3, #6
    b4e2:	e000      	b.n	b4e6 <n25q256a_switch_mode+0x1e>
    b4e4:	2300      	movs	r3, #0
    b4e6:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b4e8:	7afb      	ldrb	r3, [r7, #11]
    b4ea:	2265      	movs	r2, #101	; 0x65
    b4ec:	4619      	mov	r1, r3
    b4ee:	6878      	ldr	r0, [r7, #4]
    b4f0:	4b25      	ldr	r3, [pc, #148]	; (b588 <n25q256a_switch_mode+0xc0>)
    b4f2:	4798      	blx	r3
    b4f4:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b4f6:	2300      	movs	r3, #0
    b4f8:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b4fa:	68fb      	ldr	r3, [r7, #12]
    b4fc:	7b1b      	ldrb	r3, [r3, #12]
    b4fe:	78fa      	ldrb	r2, [r7, #3]
    b500:	429a      	cmp	r2, r3
    b502:	d03d      	beq.n	b580 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b504:	78fb      	ldrb	r3, [r7, #3]
    b506:	2b00      	cmp	r3, #0
    b508:	d00b      	beq.n	b522 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b50a:	697b      	ldr	r3, [r7, #20]
    b50c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b510:	2b00      	cmp	r3, #0
    b512:	d011      	beq.n	b538 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b514:	697b      	ldr	r3, [r7, #20]
    b516:	f003 031f 	and.w	r3, r3, #31
    b51a:	617b      	str	r3, [r7, #20]
			modify = 1;
    b51c:	2301      	movs	r3, #1
    b51e:	74fb      	strb	r3, [r7, #19]
    b520:	e00a      	b.n	b538 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b522:	697b      	ldr	r3, [r7, #20]
    b524:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b528:	2b00      	cmp	r3, #0
    b52a:	d105      	bne.n	b538 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b52c:	697b      	ldr	r3, [r7, #20]
    b52e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b532:	617b      	str	r3, [r7, #20]
			modify = 1;
    b534:	2301      	movs	r3, #1
    b536:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b538:	7cfb      	ldrb	r3, [r7, #19]
    b53a:	2b00      	cmp	r3, #0
    b53c:	d021      	beq.n	b582 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b53e:	68fb      	ldr	r3, [r7, #12]
    b540:	78fa      	ldrb	r2, [r7, #3]
    b542:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b544:	7afb      	ldrb	r3, [r7, #11]
    b546:	2201      	movs	r2, #1
    b548:	4619      	mov	r1, r3
    b54a:	6878      	ldr	r0, [r7, #4]
    b54c:	4b0f      	ldr	r3, [pc, #60]	; (b58c <n25q256a_switch_mode+0xc4>)
    b54e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b550:	7af9      	ldrb	r1, [r7, #11]
    b552:	697b      	ldr	r3, [r7, #20]
    b554:	2261      	movs	r2, #97	; 0x61
    b556:	6878      	ldr	r0, [r7, #4]
    b558:	4c0d      	ldr	r4, [pc, #52]	; (b590 <n25q256a_switch_mode+0xc8>)
    b55a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b55c:	78fb      	ldrb	r3, [r7, #3]
    b55e:	2b00      	cmp	r3, #0
    b560:	d001      	beq.n	b566 <n25q256a_switch_mode+0x9e>
    b562:	2306      	movs	r3, #6
    b564:	e000      	b.n	b568 <n25q256a_switch_mode+0xa0>
    b566:	2300      	movs	r3, #0
    b568:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b56a:	7afb      	ldrb	r3, [r7, #11]
    b56c:	2265      	movs	r2, #101	; 0x65
    b56e:	4619      	mov	r1, r3
    b570:	6878      	ldr	r0, [r7, #4]
    b572:	4b05      	ldr	r3, [pc, #20]	; (b588 <n25q256a_switch_mode+0xc0>)
    b574:	4798      	blx	r3
    b576:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b578:	68fb      	ldr	r3, [r7, #12]
    b57a:	78fa      	ldrb	r2, [r7, #3]
    b57c:	731a      	strb	r2, [r3, #12]
    b57e:	e000      	b.n	b582 <n25q256a_switch_mode+0xba>
		return;
    b580:	bf00      	nop
	}
}
    b582:	371c      	adds	r7, #28
    b584:	46bd      	mov	sp, r7
    b586:	bd90      	pop	{r4, r7, pc}
    b588:	0000b2bd 	.word	0x0000b2bd
    b58c:	0000b3f9 	.word	0x0000b3f9
    b590:	0000b359 	.word	0x0000b359

0000b594 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b594:	b580      	push	{r7, lr}
    b596:	b086      	sub	sp, #24
    b598:	af00      	add	r7, sp, #0
    b59a:	60f8      	str	r0, [r7, #12]
    b59c:	60b9      	str	r1, [r7, #8]
    b59e:	607a      	str	r2, [r7, #4]
    b5a0:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b5a2:	68fb      	ldr	r3, [r7, #12]
    b5a4:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b5a6:	4a0c      	ldr	r2, [pc, #48]	; (b5d8 <n25q256a_construct+0x44>)
    b5a8:	68b9      	ldr	r1, [r7, #8]
    b5aa:	68f8      	ldr	r0, [r7, #12]
    b5ac:	4b0b      	ldr	r3, [pc, #44]	; (b5dc <n25q256a_construct+0x48>)
    b5ae:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b5b0:	697b      	ldr	r3, [r7, #20]
    b5b2:	2200      	movs	r2, #0
    b5b4:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b5b6:	697b      	ldr	r3, [r7, #20]
    b5b8:	2200      	movs	r2, #0
    b5ba:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b5bc:	697b      	ldr	r3, [r7, #20]
    b5be:	687a      	ldr	r2, [r7, #4]
    b5c0:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b5c2:	78fb      	ldrb	r3, [r7, #3]
    b5c4:	4619      	mov	r1, r3
    b5c6:	68f8      	ldr	r0, [r7, #12]
    b5c8:	4b05      	ldr	r3, [pc, #20]	; (b5e0 <n25q256a_construct+0x4c>)
    b5ca:	4798      	blx	r3
	return me;
    b5cc:	68fb      	ldr	r3, [r7, #12]
}
    b5ce:	4618      	mov	r0, r3
    b5d0:	3718      	adds	r7, #24
    b5d2:	46bd      	mov	sp, r7
    b5d4:	bd80      	pop	{r7, pc}
    b5d6:	bf00      	nop
    b5d8:	0000f068 	.word	0x0000f068
    b5dc:	0000ba71 	.word	0x0000ba71
    b5e0:	0000b4c9 	.word	0x0000b4c9

0000b5e4 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b5e4:	b580      	push	{r7, lr}
    b5e6:	b08c      	sub	sp, #48	; 0x30
    b5e8:	af00      	add	r7, sp, #0
    b5ea:	60f8      	str	r0, [r7, #12]
    b5ec:	60b9      	str	r1, [r7, #8]
    b5ee:	607a      	str	r2, [r7, #4]
    b5f0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b5f2:	68fb      	ldr	r3, [r7, #12]
    b5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b5f6:	68fb      	ldr	r3, [r7, #12]
    b5f8:	681b      	ldr	r3, [r3, #0]
    b5fa:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b5fc:	f107 0310 	add.w	r3, r7, #16
    b600:	2200      	movs	r2, #0
    b602:	601a      	str	r2, [r3, #0]
    b604:	605a      	str	r2, [r3, #4]
    b606:	609a      	str	r2, [r3, #8]
    b608:	60da      	str	r2, [r3, #12]
    b60a:	611a      	str	r2, [r3, #16]
    b60c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b610:	7b1b      	ldrb	r3, [r3, #12]
    b612:	2b00      	cmp	r3, #0
    b614:	d001      	beq.n	b61a <n25q256a_read+0x36>
    b616:	2206      	movs	r2, #6
    b618:	e000      	b.n	b61c <n25q256a_read+0x38>
    b61a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b61c:	7c3b      	ldrb	r3, [r7, #16]
    b61e:	f362 0302 	bfi	r3, r2, #0, #3
    b622:	743b      	strb	r3, [r7, #16]
    b624:	7c3b      	ldrb	r3, [r7, #16]
    b626:	f043 0310 	orr.w	r3, r3, #16
    b62a:	743b      	strb	r3, [r7, #16]
    b62c:	7c3b      	ldrb	r3, [r7, #16]
    b62e:	f043 0320 	orr.w	r3, r3, #32
    b632:	743b      	strb	r3, [r7, #16]
    b634:	7c3b      	ldrb	r3, [r7, #16]
    b636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b63a:	743b      	strb	r3, [r7, #16]
    b63c:	7c7b      	ldrb	r3, [r7, #17]
    b63e:	2201      	movs	r2, #1
    b640:	f362 1305 	bfi	r3, r2, #4, #2
    b644:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b648:	7b1b      	ldrb	r3, [r3, #12]
    b64a:	2b00      	cmp	r3, #0
    b64c:	d001      	beq.n	b652 <n25q256a_read+0x6e>
    b64e:	220a      	movs	r2, #10
    b650:	e000      	b.n	b654 <n25q256a_read+0x70>
    b652:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b654:	7cbb      	ldrb	r3, [r7, #18]
    b656:	f362 0304 	bfi	r3, r2, #0, #5
    b65a:	74bb      	strb	r3, [r7, #18]
    b65c:	230b      	movs	r3, #11
    b65e:	753b      	strb	r3, [r7, #20]
    b660:	687b      	ldr	r3, [r7, #4]
    b662:	61bb      	str	r3, [r7, #24]
    b664:	683b      	ldr	r3, [r7, #0]
    b666:	61fb      	str	r3, [r7, #28]
    b668:	68bb      	ldr	r3, [r7, #8]
    b66a:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b66c:	f107 0310 	add.w	r3, r7, #16
    b670:	4619      	mov	r1, r3
    b672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b674:	4b03      	ldr	r3, [pc, #12]	; (b684 <n25q256a_read+0xa0>)
    b676:	4798      	blx	r3
	return ERR_NONE;
    b678:	2300      	movs	r3, #0
}
    b67a:	4618      	mov	r0, r3
    b67c:	3730      	adds	r7, #48	; 0x30
    b67e:	46bd      	mov	sp, r7
    b680:	bd80      	pop	{r7, pc}
    b682:	bf00      	nop
    b684:	000024b1 	.word	0x000024b1

0000b688 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b688:	b580      	push	{r7, lr}
    b68a:	b08c      	sub	sp, #48	; 0x30
    b68c:	af00      	add	r7, sp, #0
    b68e:	60f8      	str	r0, [r7, #12]
    b690:	60b9      	str	r1, [r7, #8]
    b692:	607a      	str	r2, [r7, #4]
    b694:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b696:	68fb      	ldr	r3, [r7, #12]
    b698:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b69a:	68fb      	ldr	r3, [r7, #12]
    b69c:	681b      	ldr	r3, [r3, #0]
    b69e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b6a0:	f107 0310 	add.w	r3, r7, #16
    b6a4:	2200      	movs	r2, #0
    b6a6:	601a      	str	r2, [r3, #0]
    b6a8:	605a      	str	r2, [r3, #4]
    b6aa:	609a      	str	r2, [r3, #8]
    b6ac:	60da      	str	r2, [r3, #12]
    b6ae:	611a      	str	r2, [r3, #16]
    b6b0:	615a      	str	r2, [r3, #20]
    b6b2:	7c3b      	ldrb	r3, [r7, #16]
    b6b4:	f043 0310 	orr.w	r3, r3, #16
    b6b8:	743b      	strb	r3, [r7, #16]
    b6ba:	7c3b      	ldrb	r3, [r7, #16]
    b6bc:	f043 0320 	orr.w	r3, r3, #32
    b6c0:	743b      	strb	r3, [r7, #16]
    b6c2:	7c3b      	ldrb	r3, [r7, #16]
    b6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b6c8:	743b      	strb	r3, [r7, #16]
    b6ca:	7c7b      	ldrb	r3, [r7, #17]
    b6cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b6d0:	747b      	strb	r3, [r7, #17]
    b6d2:	2302      	movs	r3, #2
    b6d4:	753b      	strb	r3, [r7, #20]
    b6d6:	687b      	ldr	r3, [r7, #4]
    b6d8:	61bb      	str	r3, [r7, #24]
    b6da:	683b      	ldr	r3, [r7, #0]
    b6dc:	61fb      	str	r3, [r7, #28]
    b6de:	68bb      	ldr	r3, [r7, #8]
    b6e0:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6e4:	7b1b      	ldrb	r3, [r3, #12]
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	d001      	beq.n	b6ee <n25q256a_write+0x66>
    b6ea:	2206      	movs	r2, #6
    b6ec:	e000      	b.n	b6f0 <n25q256a_write+0x68>
    b6ee:	2200      	movs	r2, #0
    b6f0:	7c3b      	ldrb	r3, [r7, #16]
    b6f2:	f362 0302 	bfi	r3, r2, #0, #3
    b6f6:	743b      	strb	r3, [r7, #16]
	while (length) {
    b6f8:	e035      	b.n	b766 <n25q256a_write+0xde>
		cmd.address = address;
    b6fa:	687b      	ldr	r3, [r7, #4]
    b6fc:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b6fe:	683b      	ldr	r3, [r7, #0]
    b700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b704:	d802      	bhi.n	b70c <n25q256a_write+0x84>
			cmd.buf_len = length;
    b706:	683b      	ldr	r3, [r7, #0]
    b708:	61fb      	str	r3, [r7, #28]
    b70a:	e002      	b.n	b712 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b70c:	f44f 7380 	mov.w	r3, #256	; 0x100
    b710:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b712:	7c3b      	ldrb	r3, [r7, #16]
    b714:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b718:	b2db      	uxtb	r3, r3
    b71a:	2201      	movs	r2, #1
    b71c:	4619      	mov	r1, r3
    b71e:	68f8      	ldr	r0, [r7, #12]
    b720:	4b19      	ldr	r3, [pc, #100]	; (b788 <n25q256a_write+0x100>)
    b722:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b724:	f107 0310 	add.w	r3, r7, #16
    b728:	4619      	mov	r1, r3
    b72a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b72c:	4b17      	ldr	r3, [pc, #92]	; (b78c <n25q256a_write+0x104>)
    b72e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b730:	bf00      	nop
    b732:	7c3b      	ldrb	r3, [r7, #16]
    b734:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b738:	b2db      	uxtb	r3, r3
    b73a:	2270      	movs	r2, #112	; 0x70
    b73c:	4619      	mov	r1, r3
    b73e:	68f8      	ldr	r0, [r7, #12]
    b740:	4b13      	ldr	r3, [pc, #76]	; (b790 <n25q256a_write+0x108>)
    b742:	4798      	blx	r3
    b744:	4603      	mov	r3, r0
    b746:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b74a:	2b00      	cmp	r3, #0
    b74c:	d0f1      	beq.n	b732 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b74e:	6a3a      	ldr	r2, [r7, #32]
    b750:	69fb      	ldr	r3, [r7, #28]
    b752:	4413      	add	r3, r2
    b754:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b756:	69fb      	ldr	r3, [r7, #28]
    b758:	683a      	ldr	r2, [r7, #0]
    b75a:	1ad3      	subs	r3, r2, r3
    b75c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b75e:	69fb      	ldr	r3, [r7, #28]
    b760:	687a      	ldr	r2, [r7, #4]
    b762:	4413      	add	r3, r2
    b764:	607b      	str	r3, [r7, #4]
	while (length) {
    b766:	683b      	ldr	r3, [r7, #0]
    b768:	2b00      	cmp	r3, #0
    b76a:	d1c6      	bne.n	b6fa <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b76e:	7b5b      	ldrb	r3, [r3, #13]
    b770:	2b00      	cmp	r3, #0
    b772:	d003      	beq.n	b77c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b774:	2101      	movs	r1, #1
    b776:	68f8      	ldr	r0, [r7, #12]
    b778:	4b06      	ldr	r3, [pc, #24]	; (b794 <n25q256a_write+0x10c>)
    b77a:	4798      	blx	r3
	}
	return ERR_NONE;
    b77c:	2300      	movs	r3, #0
}
    b77e:	4618      	mov	r0, r3
    b780:	3730      	adds	r7, #48	; 0x30
    b782:	46bd      	mov	sp, r7
    b784:	bd80      	pop	{r7, pc}
    b786:	bf00      	nop
    b788:	0000b3f9 	.word	0x0000b3f9
    b78c:	000024b1 	.word	0x000024b1
    b790:	0000b2bd 	.word	0x0000b2bd
    b794:	0000b1f1 	.word	0x0000b1f1

0000b798 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b798:	b580      	push	{r7, lr}
    b79a:	b090      	sub	sp, #64	; 0x40
    b79c:	af00      	add	r7, sp, #0
    b79e:	60f8      	str	r0, [r7, #12]
    b7a0:	60b9      	str	r1, [r7, #8]
    b7a2:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b7a4:	68fb      	ldr	r3, [r7, #12]
    b7a6:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b7a8:	68fb      	ldr	r3, [r7, #12]
    b7aa:	681b      	ldr	r3, [r3, #0]
    b7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b7ae:	f107 0314 	add.w	r3, r7, #20
    b7b2:	2200      	movs	r2, #0
    b7b4:	601a      	str	r2, [r3, #0]
    b7b6:	605a      	str	r2, [r3, #4]
    b7b8:	609a      	str	r2, [r3, #8]
    b7ba:	60da      	str	r2, [r3, #12]
    b7bc:	611a      	str	r2, [r3, #16]
    b7be:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b7c2:	7b1b      	ldrb	r3, [r3, #12]
    b7c4:	2b00      	cmp	r3, #0
    b7c6:	d001      	beq.n	b7cc <n25q256a_erase+0x34>
    b7c8:	2206      	movs	r2, #6
    b7ca:	e000      	b.n	b7ce <n25q256a_erase+0x36>
    b7cc:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b7ce:	7d3b      	ldrb	r3, [r7, #20]
    b7d0:	f362 0302 	bfi	r3, r2, #0, #3
    b7d4:	753b      	strb	r3, [r7, #20]
    b7d6:	7d3b      	ldrb	r3, [r7, #20]
    b7d8:	f043 0310 	orr.w	r3, r3, #16
    b7dc:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b7de:	687b      	ldr	r3, [r7, #4]
    b7e0:	4a56      	ldr	r2, [pc, #344]	; (b93c <n25q256a_erase+0x1a4>)
    b7e2:	4293      	cmp	r3, r2
    b7e4:	bf94      	ite	ls
    b7e6:	2301      	movls	r3, #1
    b7e8:	2300      	movhi	r3, #0
    b7ea:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b7ec:	7d3b      	ldrb	r3, [r7, #20]
    b7ee:	f362 1345 	bfi	r3, r2, #5, #1
    b7f2:	753b      	strb	r3, [r7, #20]
    b7f4:	7d7b      	ldrb	r3, [r7, #21]
    b7f6:	2202      	movs	r2, #2
    b7f8:	f362 1305 	bfi	r3, r2, #4, #2
    b7fc:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b7fe:	68bb      	ldr	r3, [r7, #8]
    b800:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b802:	687b      	ldr	r3, [r7, #4]
    b804:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b806:	2300      	movs	r3, #0
    b808:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b80a:	687b      	ldr	r3, [r7, #4]
    b80c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b810:	2b00      	cmp	r3, #0
    b812:	d104      	bne.n	b81e <n25q256a_erase+0x86>
    b814:	68bb      	ldr	r3, [r7, #8]
    b816:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b81a:	2b00      	cmp	r3, #0
    b81c:	d002      	beq.n	b824 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b81e:	f06f 030c 	mvn.w	r3, #12
    b822:	e087      	b.n	b934 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b824:	687b      	ldr	r3, [r7, #4]
    b826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b82a:	d368      	bcc.n	b8fe <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b82c:	23c7      	movs	r3, #199	; 0xc7
    b82e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b830:	7d3b      	ldrb	r3, [r7, #20]
    b832:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b836:	b2db      	uxtb	r3, r3
    b838:	2201      	movs	r2, #1
    b83a:	4619      	mov	r1, r3
    b83c:	68f8      	ldr	r0, [r7, #12]
    b83e:	4b40      	ldr	r3, [pc, #256]	; (b940 <n25q256a_erase+0x1a8>)
    b840:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b842:	f107 0314 	add.w	r3, r7, #20
    b846:	4619      	mov	r1, r3
    b848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b84a:	4b3e      	ldr	r3, [pc, #248]	; (b944 <n25q256a_erase+0x1ac>)
    b84c:	4798      	blx	r3
    b84e:	e059      	b.n	b904 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b852:	b29b      	uxth	r3, r3
    b854:	2b00      	cmp	r3, #0
    b856:	d11f      	bne.n	b898 <n25q256a_erase+0x100>
    b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b85a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b85e:	d31b      	bcc.n	b898 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b862:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b864:	23d8      	movs	r3, #216	; 0xd8
    b866:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b868:	7d3b      	ldrb	r3, [r7, #20]
    b86a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b86e:	b2db      	uxtb	r3, r3
    b870:	2201      	movs	r2, #1
    b872:	4619      	mov	r1, r3
    b874:	68f8      	ldr	r0, [r7, #12]
    b876:	4b32      	ldr	r3, [pc, #200]	; (b940 <n25q256a_erase+0x1a8>)
    b878:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b87a:	f107 0314 	add.w	r3, r7, #20
    b87e:	4619      	mov	r1, r3
    b880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b882:	4b30      	ldr	r3, [pc, #192]	; (b944 <n25q256a_erase+0x1ac>)
    b884:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b888:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b88c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b890:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b894:	63bb      	str	r3, [r7, #56]	; 0x38
    b896:	e023      	b.n	b8e0 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b89a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b89e:	d31b      	bcc.n	b8d8 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8a2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b8a4:	2320      	movs	r3, #32
    b8a6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b8a8:	7d3b      	ldrb	r3, [r7, #20]
    b8aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b8ae:	b2db      	uxtb	r3, r3
    b8b0:	2201      	movs	r2, #1
    b8b2:	4619      	mov	r1, r3
    b8b4:	68f8      	ldr	r0, [r7, #12]
    b8b6:	4b22      	ldr	r3, [pc, #136]	; (b940 <n25q256a_erase+0x1a8>)
    b8b8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b8ba:	f107 0314 	add.w	r3, r7, #20
    b8be:	4619      	mov	r1, r3
    b8c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b8c2:	4b20      	ldr	r3, [pc, #128]	; (b944 <n25q256a_erase+0x1ac>)
    b8c4:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b8d0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b8d4:	63bb      	str	r3, [r7, #56]	; 0x38
    b8d6:	e003      	b.n	b8e0 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b8d8:	f06f 030c 	mvn.w	r3, #12
    b8dc:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b8de:	e011      	b.n	b904 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b8e0:	bf00      	nop
    b8e2:	7d3b      	ldrb	r3, [r7, #20]
    b8e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b8e8:	b2db      	uxtb	r3, r3
    b8ea:	2270      	movs	r2, #112	; 0x70
    b8ec:	4619      	mov	r1, r3
    b8ee:	68f8      	ldr	r0, [r7, #12]
    b8f0:	4b15      	ldr	r3, [pc, #84]	; (b948 <n25q256a_erase+0x1b0>)
    b8f2:	4798      	blx	r3
    b8f4:	4603      	mov	r3, r0
    b8f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b8fa:	2b00      	cmp	r3, #0
    b8fc:	d0f1      	beq.n	b8e2 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b900:	2b00      	cmp	r3, #0
    b902:	d1a5      	bne.n	b850 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b904:	bf00      	nop
    b906:	7d3b      	ldrb	r3, [r7, #20]
    b908:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b90c:	b2db      	uxtb	r3, r3
    b90e:	2270      	movs	r2, #112	; 0x70
    b910:	4619      	mov	r1, r3
    b912:	68f8      	ldr	r0, [r7, #12]
    b914:	4b0c      	ldr	r3, [pc, #48]	; (b948 <n25q256a_erase+0x1b0>)
    b916:	4798      	blx	r3
    b918:	4603      	mov	r3, r0
    b91a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b91e:	2b00      	cmp	r3, #0
    b920:	d0f1      	beq.n	b906 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b924:	7b5b      	ldrb	r3, [r3, #13]
    b926:	2b00      	cmp	r3, #0
    b928:	d003      	beq.n	b932 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b92a:	2101      	movs	r1, #1
    b92c:	68f8      	ldr	r0, [r7, #12]
    b92e:	4b07      	ldr	r3, [pc, #28]	; (b94c <n25q256a_erase+0x1b4>)
    b930:	4798      	blx	r3
	}
	return rc;
    b932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b934:	4618      	mov	r0, r3
    b936:	3740      	adds	r7, #64	; 0x40
    b938:	46bd      	mov	sp, r7
    b93a:	bd80      	pop	{r7, pc}
    b93c:	001fffff 	.word	0x001fffff
    b940:	0000b3f9 	.word	0x0000b3f9
    b944:	000024b1 	.word	0x000024b1
    b948:	0000b2bd 	.word	0x0000b2bd
    b94c:	0000b1f1 	.word	0x0000b1f1

0000b950 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b950:	b590      	push	{r4, r7, lr}
    b952:	b085      	sub	sp, #20
    b954:	af00      	add	r7, sp, #0
    b956:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b958:	687b      	ldr	r3, [r7, #4]
    b95a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b95c:	68fb      	ldr	r3, [r7, #12]
    b95e:	7b1b      	ldrb	r3, [r3, #12]
    b960:	2b00      	cmp	r3, #0
    b962:	d001      	beq.n	b968 <n25q256a_enable_xip+0x18>
    b964:	2306      	movs	r3, #6
    b966:	e000      	b.n	b96a <n25q256a_enable_xip+0x1a>
    b968:	2300      	movs	r3, #0
    b96a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b96c:	68fb      	ldr	r3, [r7, #12]
    b96e:	7b5b      	ldrb	r3, [r3, #13]
    b970:	2b00      	cmp	r3, #0
    b972:	d129      	bne.n	b9c8 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b974:	7afb      	ldrb	r3, [r7, #11]
    b976:	2285      	movs	r2, #133	; 0x85
    b978:	4619      	mov	r1, r3
    b97a:	6878      	ldr	r0, [r7, #4]
    b97c:	4b15      	ldr	r3, [pc, #84]	; (b9d4 <n25q256a_enable_xip+0x84>)
    b97e:	4798      	blx	r3
    b980:	4603      	mov	r3, r0
    b982:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b984:	7abb      	ldrb	r3, [r7, #10]
    b986:	f003 0308 	and.w	r3, r3, #8
    b98a:	2b00      	cmp	r3, #0
    b98c:	d015      	beq.n	b9ba <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b98e:	7abb      	ldrb	r3, [r7, #10]
    b990:	f023 0308 	bic.w	r3, r3, #8
    b994:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b996:	7abb      	ldrb	r3, [r7, #10]
    b998:	7af9      	ldrb	r1, [r7, #11]
    b99a:	2281      	movs	r2, #129	; 0x81
    b99c:	6878      	ldr	r0, [r7, #4]
    b99e:	4c0e      	ldr	r4, [pc, #56]	; (b9d8 <n25q256a_enable_xip+0x88>)
    b9a0:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b9a2:	bf00      	nop
    b9a4:	7afb      	ldrb	r3, [r7, #11]
    b9a6:	2270      	movs	r2, #112	; 0x70
    b9a8:	4619      	mov	r1, r3
    b9aa:	6878      	ldr	r0, [r7, #4]
    b9ac:	4b09      	ldr	r3, [pc, #36]	; (b9d4 <n25q256a_enable_xip+0x84>)
    b9ae:	4798      	blx	r3
    b9b0:	4603      	mov	r3, r0
    b9b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b9b6:	2b00      	cmp	r3, #0
    b9b8:	d0f4      	beq.n	b9a4 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b9ba:	68fb      	ldr	r3, [r7, #12]
    b9bc:	2201      	movs	r2, #1
    b9be:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b9c0:	2101      	movs	r1, #1
    b9c2:	6878      	ldr	r0, [r7, #4]
    b9c4:	4b05      	ldr	r3, [pc, #20]	; (b9dc <n25q256a_enable_xip+0x8c>)
    b9c6:	4798      	blx	r3
	}
	return ERR_NONE;
    b9c8:	2300      	movs	r3, #0
}
    b9ca:	4618      	mov	r0, r3
    b9cc:	3714      	adds	r7, #20
    b9ce:	46bd      	mov	sp, r7
    b9d0:	bd90      	pop	{r4, r7, pc}
    b9d2:	bf00      	nop
    b9d4:	0000b2bd 	.word	0x0000b2bd
    b9d8:	0000b359 	.word	0x0000b359
    b9dc:	0000b1f1 	.word	0x0000b1f1

0000b9e0 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b9e0:	b580      	push	{r7, lr}
    b9e2:	b086      	sub	sp, #24
    b9e4:	af00      	add	r7, sp, #0
    b9e6:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b9e8:	687b      	ldr	r3, [r7, #4]
    b9ea:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b9ec:	687b      	ldr	r3, [r7, #4]
    b9ee:	681b      	ldr	r3, [r3, #0]
    b9f0:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b9f2:	697b      	ldr	r3, [r7, #20]
    b9f4:	7b1b      	ldrb	r3, [r3, #12]
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	d001      	beq.n	b9fe <n25q256a_disable_xip+0x1e>
    b9fa:	2306      	movs	r3, #6
    b9fc:	e000      	b.n	ba00 <n25q256a_disable_xip+0x20>
    b9fe:	2300      	movs	r3, #0
    ba00:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    ba02:	2100      	movs	r1, #0
    ba04:	6878      	ldr	r0, [r7, #4]
    ba06:	4b15      	ldr	r3, [pc, #84]	; (ba5c <n25q256a_disable_xip+0x7c>)
    ba08:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ba0a:	7bfb      	ldrb	r3, [r7, #15]
    ba0c:	2285      	movs	r2, #133	; 0x85
    ba0e:	4619      	mov	r1, r3
    ba10:	6878      	ldr	r0, [r7, #4]
    ba12:	4b13      	ldr	r3, [pc, #76]	; (ba60 <n25q256a_disable_xip+0x80>)
    ba14:	4798      	blx	r3
    ba16:	4603      	mov	r3, r0
    ba18:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    ba1a:	7bbb      	ldrb	r3, [r7, #14]
    ba1c:	f003 0308 	and.w	r3, r3, #8
    ba20:	2b00      	cmp	r3, #0
    ba22:	d113      	bne.n	ba4c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    ba24:	697b      	ldr	r3, [r7, #20]
    ba26:	689b      	ldr	r3, [r3, #8]
    ba28:	2b00      	cmp	r3, #0
    ba2a:	d00f      	beq.n	ba4c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    ba2c:	693b      	ldr	r3, [r7, #16]
    ba2e:	681b      	ldr	r3, [r3, #0]
    ba30:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    ba32:	6938      	ldr	r0, [r7, #16]
    ba34:	4b0b      	ldr	r3, [pc, #44]	; (ba64 <n25q256a_disable_xip+0x84>)
    ba36:	4798      	blx	r3
			n25q->pin_exit_xip();
    ba38:	697b      	ldr	r3, [r7, #20]
    ba3a:	689b      	ldr	r3, [r3, #8]
    ba3c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    ba3e:	68b9      	ldr	r1, [r7, #8]
    ba40:	6938      	ldr	r0, [r7, #16]
    ba42:	4b09      	ldr	r3, [pc, #36]	; (ba68 <n25q256a_disable_xip+0x88>)
    ba44:	4798      	blx	r3
			qspi_sync_enable(descr);
    ba46:	6938      	ldr	r0, [r7, #16]
    ba48:	4b08      	ldr	r3, [pc, #32]	; (ba6c <n25q256a_disable_xip+0x8c>)
    ba4a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    ba4c:	697b      	ldr	r3, [r7, #20]
    ba4e:	2200      	movs	r2, #0
    ba50:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ba52:	2300      	movs	r3, #0
}
    ba54:	4618      	mov	r0, r3
    ba56:	3718      	adds	r7, #24
    ba58:	46bd      	mov	sp, r7
    ba5a:	bd80      	pop	{r7, pc}
    ba5c:	0000b1f1 	.word	0x0000b1f1
    ba60:	0000b2bd 	.word	0x0000b2bd
    ba64:	00002475 	.word	0x00002475
    ba68:	000023ed 	.word	0x000023ed
    ba6c:	00002439 	.word	0x00002439

0000ba70 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    ba70:	b480      	push	{r7}
    ba72:	b085      	sub	sp, #20
    ba74:	af00      	add	r7, sp, #0
    ba76:	60f8      	str	r0, [r7, #12]
    ba78:	60b9      	str	r1, [r7, #8]
    ba7a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    ba7c:	68fb      	ldr	r3, [r7, #12]
    ba7e:	68ba      	ldr	r2, [r7, #8]
    ba80:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    ba82:	68fb      	ldr	r3, [r7, #12]
    ba84:	687a      	ldr	r2, [r7, #4]
    ba86:	605a      	str	r2, [r3, #4]

	return me;
    ba88:	68fb      	ldr	r3, [r7, #12]
}
    ba8a:	4618      	mov	r0, r3
    ba8c:	3714      	adds	r7, #20
    ba8e:	46bd      	mov	sp, r7
    ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba94:	4770      	bx	lr

0000ba96 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    ba96:	b480      	push	{r7}
    ba98:	b083      	sub	sp, #12
    ba9a:	af00      	add	r7, sp, #0
    ba9c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ba9e:	687b      	ldr	r3, [r7, #4]
    baa0:	781b      	ldrb	r3, [r3, #0]
    baa2:	b29a      	uxth	r2, r3
    baa4:	687b      	ldr	r3, [r7, #4]
    baa6:	3301      	adds	r3, #1
    baa8:	781b      	ldrb	r3, [r3, #0]
    baaa:	b29b      	uxth	r3, r3
    baac:	021b      	lsls	r3, r3, #8
    baae:	b29b      	uxth	r3, r3
    bab0:	4413      	add	r3, r2
    bab2:	b29b      	uxth	r3, r3
}
    bab4:	4618      	mov	r0, r3
    bab6:	370c      	adds	r7, #12
    bab8:	46bd      	mov	sp, r7
    baba:	f85d 7b04 	ldr.w	r7, [sp], #4
    babe:	4770      	bx	lr

0000bac0 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    bac0:	b480      	push	{r7}
    bac2:	b083      	sub	sp, #12
    bac4:	af00      	add	r7, sp, #0
    bac6:	6078      	str	r0, [r7, #4]
	return desc[0];
    bac8:	687b      	ldr	r3, [r7, #4]
    baca:	781b      	ldrb	r3, [r3, #0]
}
    bacc:	4618      	mov	r0, r3
    bace:	370c      	adds	r7, #12
    bad0:	46bd      	mov	sp, r7
    bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
    bad6:	4770      	bx	lr

0000bad8 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    bad8:	b580      	push	{r7, lr}
    bada:	b082      	sub	sp, #8
    badc:	af00      	add	r7, sp, #0
    bade:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    bae0:	6878      	ldr	r0, [r7, #4]
    bae2:	4b05      	ldr	r3, [pc, #20]	; (baf8 <usb_desc_next+0x20>)
    bae4:	4798      	blx	r3
    bae6:	4603      	mov	r3, r0
    bae8:	461a      	mov	r2, r3
    baea:	687b      	ldr	r3, [r7, #4]
    baec:	4413      	add	r3, r2
}
    baee:	4618      	mov	r0, r3
    baf0:	3708      	adds	r7, #8
    baf2:	46bd      	mov	sp, r7
    baf4:	bd80      	pop	{r7, pc}
    baf6:	bf00      	nop
    baf8:	0000bac1 	.word	0x0000bac1

0000bafc <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bafc:	b580      	push	{r7, lr}
    bafe:	b08c      	sub	sp, #48	; 0x30
    bb00:	af00      	add	r7, sp, #0
    bb02:	6078      	str	r0, [r7, #4]
    bb04:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bb06:	687b      	ldr	r3, [r7, #4]
    bb08:	689b      	ldr	r3, [r3, #8]
    bb0a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    bb0c:	683b      	ldr	r3, [r7, #0]
    bb0e:	681b      	ldr	r3, [r3, #0]
    bb10:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bb12:	2300      	movs	r3, #0
    bb14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bb18:	e08f      	b.n	bc3a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    bb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb1c:	2b00      	cmp	r3, #0
    bb1e:	d102      	bne.n	bb26 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    bb20:	f06f 0309 	mvn.w	r3, #9
    bb24:	e092      	b.n	bc4c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    bb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb28:	789b      	ldrb	r3, [r3, #2]
    bb2a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    bb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb2e:	795b      	ldrb	r3, [r3, #5]
    bb30:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bb32:	7c7b      	ldrb	r3, [r7, #17]
    bb34:	2b02      	cmp	r3, #2
    bb36:	d002      	beq.n	bb3e <cdcdf_acm_enable+0x42>
    bb38:	7c7b      	ldrb	r3, [r7, #17]
    bb3a:	2b0a      	cmp	r3, #10
    bb3c:	d121      	bne.n	bb82 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bb3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb42:	6a3a      	ldr	r2, [r7, #32]
    bb44:	5cd2      	ldrb	r2, [r2, r3]
    bb46:	7bbb      	ldrb	r3, [r7, #14]
    bb48:	429a      	cmp	r2, r3
    bb4a:	d102      	bne.n	bb52 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    bb4c:	f06f 0311 	mvn.w	r3, #17
    bb50:	e07c      	b.n	bc4c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bb52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb56:	6a3a      	ldr	r2, [r7, #32]
    bb58:	5cd3      	ldrb	r3, [r2, r3]
    bb5a:	2bff      	cmp	r3, #255	; 0xff
    bb5c:	d002      	beq.n	bb64 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    bb5e:	f06f 031b 	mvn.w	r3, #27
    bb62:	e073      	b.n	bc4c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bb64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bb68:	7bb9      	ldrb	r1, [r7, #14]
    bb6a:	6a3a      	ldr	r2, [r7, #32]
    bb6c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bb6e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bb70:	683b      	ldr	r3, [r7, #0]
    bb72:	685b      	ldr	r3, [r3, #4]
    bb74:	2205      	movs	r2, #5
    bb76:	4619      	mov	r1, r3
    bb78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bb7a:	4b36      	ldr	r3, [pc, #216]	; (bc54 <cdcdf_acm_enable+0x158>)
    bb7c:	4798      	blx	r3
    bb7e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bb80:	e047      	b.n	bc12 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bb82:	f06f 0309 	mvn.w	r3, #9
    bb86:	e061      	b.n	bc4c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb8a:	789b      	ldrb	r3, [r3, #2]
    bb8c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb90:	78db      	ldrb	r3, [r3, #3]
    bb92:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb96:	3304      	adds	r3, #4
    bb98:	4618      	mov	r0, r3
    bb9a:	4b2f      	ldr	r3, [pc, #188]	; (bc58 <cdcdf_acm_enable+0x15c>)
    bb9c:	4798      	blx	r3
    bb9e:	4603      	mov	r3, r0
    bba0:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bba2:	7ebb      	ldrb	r3, [r7, #26]
    bba4:	7ef9      	ldrb	r1, [r7, #27]
    bba6:	8bba      	ldrh	r2, [r7, #28]
    bba8:	4618      	mov	r0, r3
    bbaa:	4b2c      	ldr	r3, [pc, #176]	; (bc5c <cdcdf_acm_enable+0x160>)
    bbac:	4798      	blx	r3
    bbae:	4603      	mov	r3, r0
    bbb0:	2b00      	cmp	r3, #0
    bbb2:	d002      	beq.n	bbba <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bbb4:	f06f 0313 	mvn.w	r3, #19
    bbb8:	e048      	b.n	bc4c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bbba:	7ebb      	ldrb	r3, [r7, #26]
    bbbc:	b25b      	sxtb	r3, r3
    bbbe:	2b00      	cmp	r3, #0
    bbc0:	da0f      	bge.n	bbe2 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bbc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbc6:	7eb9      	ldrb	r1, [r7, #26]
    bbc8:	6a3a      	ldr	r2, [r7, #32]
    bbca:	4413      	add	r3, r2
    bbcc:	460a      	mov	r2, r1
    bbce:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbd4:	6a3a      	ldr	r2, [r7, #32]
    bbd6:	4413      	add	r3, r2
    bbd8:	789b      	ldrb	r3, [r3, #2]
    bbda:	4618      	mov	r0, r3
    bbdc:	4b20      	ldr	r3, [pc, #128]	; (bc60 <cdcdf_acm_enable+0x164>)
    bbde:	4798      	blx	r3
    bbe0:	e007      	b.n	bbf2 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bbe2:	7eba      	ldrb	r2, [r7, #26]
    bbe4:	6a3b      	ldr	r3, [r7, #32]
    bbe6:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bbe8:	6a3b      	ldr	r3, [r7, #32]
    bbea:	791b      	ldrb	r3, [r3, #4]
    bbec:	4618      	mov	r0, r3
    bbee:	4b1c      	ldr	r3, [pc, #112]	; (bc60 <cdcdf_acm_enable+0x164>)
    bbf0:	4798      	blx	r3
			}
			desc->sod = ep;
    bbf2:	683b      	ldr	r3, [r7, #0]
    bbf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bbf6:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bbf8:	683b      	ldr	r3, [r7, #0]
    bbfa:	681b      	ldr	r3, [r3, #0]
    bbfc:	4618      	mov	r0, r3
    bbfe:	4b19      	ldr	r3, [pc, #100]	; (bc64 <cdcdf_acm_enable+0x168>)
    bc00:	4798      	blx	r3
    bc02:	4602      	mov	r2, r0
    bc04:	683b      	ldr	r3, [r7, #0]
    bc06:	685b      	ldr	r3, [r3, #4]
    bc08:	4619      	mov	r1, r3
    bc0a:	4610      	mov	r0, r2
    bc0c:	4b16      	ldr	r3, [pc, #88]	; (bc68 <cdcdf_acm_enable+0x16c>)
    bc0e:	4798      	blx	r3
    bc10:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bc14:	2b00      	cmp	r3, #0
    bc16:	d1b7      	bne.n	bb88 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bc18:	683b      	ldr	r3, [r7, #0]
    bc1a:	681b      	ldr	r3, [r3, #0]
    bc1c:	4618      	mov	r0, r3
    bc1e:	4b11      	ldr	r3, [pc, #68]	; (bc64 <cdcdf_acm_enable+0x168>)
    bc20:	4798      	blx	r3
    bc22:	683b      	ldr	r3, [r7, #0]
    bc24:	685b      	ldr	r3, [r3, #4]
    bc26:	2204      	movs	r2, #4
    bc28:	4619      	mov	r1, r3
    bc2a:	4b0a      	ldr	r3, [pc, #40]	; (bc54 <cdcdf_acm_enable+0x158>)
    bc2c:	4798      	blx	r3
    bc2e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bc30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bc34:	3301      	adds	r3, #1
    bc36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bc3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bc3e:	2b01      	cmp	r3, #1
    bc40:	f67f af6b 	bls.w	bb1a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bc44:	4b09      	ldr	r3, [pc, #36]	; (bc6c <cdcdf_acm_enable+0x170>)
    bc46:	2201      	movs	r2, #1
    bc48:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bc4a:	2300      	movs	r3, #0
}
    bc4c:	4618      	mov	r0, r3
    bc4e:	3730      	adds	r7, #48	; 0x30
    bc50:	46bd      	mov	sp, r7
    bc52:	bd80      	pop	{r7, pc}
    bc54:	0000cebd 	.word	0x0000cebd
    bc58:	0000ba97 	.word	0x0000ba97
    bc5c:	000034a5 	.word	0x000034a5
    bc60:	00003591 	.word	0x00003591
    bc64:	0000bad9 	.word	0x0000bad9
    bc68:	0000cf19 	.word	0x0000cf19
    bc6c:	20000b70 	.word	0x20000b70

0000bc70 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bc70:	b580      	push	{r7, lr}
    bc72:	b088      	sub	sp, #32
    bc74:	af00      	add	r7, sp, #0
    bc76:	6078      	str	r0, [r7, #4]
    bc78:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bc7a:	687b      	ldr	r3, [r7, #4]
    bc7c:	689b      	ldr	r3, [r3, #8]
    bc7e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bc80:	683b      	ldr	r3, [r7, #0]
    bc82:	2b00      	cmp	r3, #0
    bc84:	d00c      	beq.n	bca0 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bc86:	683b      	ldr	r3, [r7, #0]
    bc88:	681b      	ldr	r3, [r3, #0]
    bc8a:	795b      	ldrb	r3, [r3, #5]
    bc8c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bc8e:	7c7b      	ldrb	r3, [r7, #17]
    bc90:	2b02      	cmp	r3, #2
    bc92:	d005      	beq.n	bca0 <cdcdf_acm_disable+0x30>
    bc94:	7c7b      	ldrb	r3, [r7, #17]
    bc96:	2b0a      	cmp	r3, #10
    bc98:	d002      	beq.n	bca0 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bc9a:	f06f 0309 	mvn.w	r3, #9
    bc9e:	e035      	b.n	bd0c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bca0:	2300      	movs	r3, #0
    bca2:	77fb      	strb	r3, [r7, #31]
    bca4:	e01f      	b.n	bce6 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bca6:	7ffb      	ldrb	r3, [r7, #31]
    bca8:	69ba      	ldr	r2, [r7, #24]
    bcaa:	5cd3      	ldrb	r3, [r2, r3]
    bcac:	2bff      	cmp	r3, #255	; 0xff
    bcae:	d016      	beq.n	bcde <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    bcb0:	7ffb      	ldrb	r3, [r7, #31]
    bcb2:	69ba      	ldr	r2, [r7, #24]
    bcb4:	21ff      	movs	r1, #255	; 0xff
    bcb6:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    bcb8:	7ffb      	ldrb	r3, [r7, #31]
    bcba:	69ba      	ldr	r2, [r7, #24]
    bcbc:	4413      	add	r3, r2
    bcbe:	789b      	ldrb	r3, [r3, #2]
    bcc0:	2bff      	cmp	r3, #255	; 0xff
    bcc2:	d00d      	beq.n	bce0 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bcc4:	7ffb      	ldrb	r3, [r7, #31]
    bcc6:	69ba      	ldr	r2, [r7, #24]
    bcc8:	4413      	add	r3, r2
    bcca:	789b      	ldrb	r3, [r3, #2]
    bccc:	4618      	mov	r0, r3
    bcce:	4b11      	ldr	r3, [pc, #68]	; (bd14 <cdcdf_acm_disable+0xa4>)
    bcd0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    bcd2:	7ffb      	ldrb	r3, [r7, #31]
    bcd4:	69ba      	ldr	r2, [r7, #24]
    bcd6:	4413      	add	r3, r2
    bcd8:	22ff      	movs	r2, #255	; 0xff
    bcda:	709a      	strb	r2, [r3, #2]
    bcdc:	e000      	b.n	bce0 <cdcdf_acm_disable+0x70>
			continue;
    bcde:	bf00      	nop
	for (i = 0; i < 2; i++) {
    bce0:	7ffb      	ldrb	r3, [r7, #31]
    bce2:	3301      	adds	r3, #1
    bce4:	77fb      	strb	r3, [r7, #31]
    bce6:	7ffb      	ldrb	r3, [r7, #31]
    bce8:	2b01      	cmp	r3, #1
    bcea:	d9dc      	bls.n	bca6 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    bcec:	69bb      	ldr	r3, [r7, #24]
    bcee:	791b      	ldrb	r3, [r3, #4]
    bcf0:	2bff      	cmp	r3, #255	; 0xff
    bcf2:	d007      	beq.n	bd04 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    bcf4:	69bb      	ldr	r3, [r7, #24]
    bcf6:	791b      	ldrb	r3, [r3, #4]
    bcf8:	4618      	mov	r0, r3
    bcfa:	4b06      	ldr	r3, [pc, #24]	; (bd14 <cdcdf_acm_disable+0xa4>)
    bcfc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bcfe:	69bb      	ldr	r3, [r7, #24]
    bd00:	22ff      	movs	r2, #255	; 0xff
    bd02:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    bd04:	4b04      	ldr	r3, [pc, #16]	; (bd18 <cdcdf_acm_disable+0xa8>)
    bd06:	2200      	movs	r2, #0
    bd08:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bd0a:	2300      	movs	r3, #0
}
    bd0c:	4618      	mov	r0, r3
    bd0e:	3720      	adds	r7, #32
    bd10:	46bd      	mov	sp, r7
    bd12:	bd80      	pop	{r7, pc}
    bd14:	00003541 	.word	0x00003541
    bd18:	20000b70 	.word	0x20000b70

0000bd1c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    bd1c:	b580      	push	{r7, lr}
    bd1e:	b084      	sub	sp, #16
    bd20:	af00      	add	r7, sp, #0
    bd22:	60f8      	str	r0, [r7, #12]
    bd24:	460b      	mov	r3, r1
    bd26:	607a      	str	r2, [r7, #4]
    bd28:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    bd2a:	7afb      	ldrb	r3, [r7, #11]
    bd2c:	2b01      	cmp	r3, #1
    bd2e:	d009      	beq.n	bd44 <cdcdf_acm_ctrl+0x28>
    bd30:	2b02      	cmp	r3, #2
    bd32:	d00d      	beq.n	bd50 <cdcdf_acm_ctrl+0x34>
    bd34:	2b00      	cmp	r3, #0
    bd36:	d10e      	bne.n	bd56 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    bd38:	6879      	ldr	r1, [r7, #4]
    bd3a:	68f8      	ldr	r0, [r7, #12]
    bd3c:	4b09      	ldr	r3, [pc, #36]	; (bd64 <cdcdf_acm_ctrl+0x48>)
    bd3e:	4798      	blx	r3
    bd40:	4603      	mov	r3, r0
    bd42:	e00a      	b.n	bd5a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    bd44:	6879      	ldr	r1, [r7, #4]
    bd46:	68f8      	ldr	r0, [r7, #12]
    bd48:	4b07      	ldr	r3, [pc, #28]	; (bd68 <cdcdf_acm_ctrl+0x4c>)
    bd4a:	4798      	blx	r3
    bd4c:	4603      	mov	r3, r0
    bd4e:	e004      	b.n	bd5a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    bd50:	f06f 031a 	mvn.w	r3, #26
    bd54:	e001      	b.n	bd5a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    bd56:	f06f 030c 	mvn.w	r3, #12
	}
}
    bd5a:	4618      	mov	r0, r3
    bd5c:	3710      	adds	r7, #16
    bd5e:	46bd      	mov	sp, r7
    bd60:	bd80      	pop	{r7, pc}
    bd62:	bf00      	nop
    bd64:	0000bafd 	.word	0x0000bafd
    bd68:	0000bc71 	.word	0x0000bc71

0000bd6c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bd6c:	b590      	push	{r4, r7, lr}
    bd6e:	b087      	sub	sp, #28
    bd70:	af00      	add	r7, sp, #0
    bd72:	4603      	mov	r3, r0
    bd74:	6039      	str	r1, [r7, #0]
    bd76:	71fb      	strb	r3, [r7, #7]
    bd78:	4613      	mov	r3, r2
    bd7a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    bd7c:	683b      	ldr	r3, [r7, #0]
    bd7e:	799a      	ldrb	r2, [r3, #6]
    bd80:	79db      	ldrb	r3, [r3, #7]
    bd82:	021b      	lsls	r3, r3, #8
    bd84:	4313      	orrs	r3, r2
    bd86:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bd88:	4b2b      	ldr	r3, [pc, #172]	; (be38 <cdcdf_acm_set_req+0xcc>)
    bd8a:	4798      	blx	r3
    bd8c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    bd8e:	683b      	ldr	r3, [r7, #0]
    bd90:	785b      	ldrb	r3, [r3, #1]
    bd92:	2b20      	cmp	r3, #32
    bd94:	d002      	beq.n	bd9c <cdcdf_acm_set_req+0x30>
    bd96:	2b22      	cmp	r3, #34	; 0x22
    bd98:	d034      	beq.n	be04 <cdcdf_acm_set_req+0x98>
    bd9a:	e046      	b.n	be2a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bd9c:	8afb      	ldrh	r3, [r7, #22]
    bd9e:	2b07      	cmp	r3, #7
    bda0:	d002      	beq.n	bda8 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    bda2:	f04f 33ff 	mov.w	r3, #4294967295
    bda6:	e042      	b.n	be2e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    bda8:	79bb      	ldrb	r3, [r7, #6]
    bdaa:	2b00      	cmp	r3, #0
    bdac:	d107      	bne.n	bdbe <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    bdae:	8afa      	ldrh	r2, [r7, #22]
    bdb0:	79f8      	ldrb	r0, [r7, #7]
    bdb2:	2300      	movs	r3, #0
    bdb4:	6939      	ldr	r1, [r7, #16]
    bdb6:	4c21      	ldr	r4, [pc, #132]	; (be3c <cdcdf_acm_set_req+0xd0>)
    bdb8:	47a0      	blx	r4
    bdba:	4603      	mov	r3, r0
    bdbc:	e037      	b.n	be2e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    bdbe:	693a      	ldr	r2, [r7, #16]
    bdc0:	f107 0308 	add.w	r3, r7, #8
    bdc4:	6810      	ldr	r0, [r2, #0]
    bdc6:	6018      	str	r0, [r3, #0]
    bdc8:	8891      	ldrh	r1, [r2, #4]
    bdca:	7992      	ldrb	r2, [r2, #6]
    bdcc:	8099      	strh	r1, [r3, #4]
    bdce:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    bdd0:	4b1b      	ldr	r3, [pc, #108]	; (be40 <cdcdf_acm_set_req+0xd4>)
    bdd2:	681b      	ldr	r3, [r3, #0]
    bdd4:	2b00      	cmp	r3, #0
    bdd6:	d008      	beq.n	bdea <cdcdf_acm_set_req+0x7e>
    bdd8:	4b19      	ldr	r3, [pc, #100]	; (be40 <cdcdf_acm_set_req+0xd4>)
    bdda:	681b      	ldr	r3, [r3, #0]
    bddc:	f107 0208 	add.w	r2, r7, #8
    bde0:	4610      	mov	r0, r2
    bde2:	4798      	blx	r3
    bde4:	4603      	mov	r3, r0
    bde6:	2b00      	cmp	r3, #0
    bde8:	d00a      	beq.n	be00 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    bdea:	4b16      	ldr	r3, [pc, #88]	; (be44 <cdcdf_acm_set_req+0xd8>)
    bdec:	f107 0208 	add.w	r2, r7, #8
    bdf0:	e892 0003 	ldmia.w	r2, {r0, r1}
    bdf4:	6018      	str	r0, [r3, #0]
    bdf6:	3304      	adds	r3, #4
    bdf8:	8019      	strh	r1, [r3, #0]
    bdfa:	3302      	adds	r3, #2
    bdfc:	0c0a      	lsrs	r2, r1, #16
    bdfe:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    be00:	2300      	movs	r3, #0
    be02:	e014      	b.n	be2e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    be04:	2300      	movs	r3, #0
    be06:	2200      	movs	r2, #0
    be08:	2100      	movs	r1, #0
    be0a:	2000      	movs	r0, #0
    be0c:	4c0b      	ldr	r4, [pc, #44]	; (be3c <cdcdf_acm_set_req+0xd0>)
    be0e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    be10:	4b0d      	ldr	r3, [pc, #52]	; (be48 <cdcdf_acm_set_req+0xdc>)
    be12:	681b      	ldr	r3, [r3, #0]
    be14:	2b00      	cmp	r3, #0
    be16:	d006      	beq.n	be26 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    be18:	4b0b      	ldr	r3, [pc, #44]	; (be48 <cdcdf_acm_set_req+0xdc>)
    be1a:	681b      	ldr	r3, [r3, #0]
    be1c:	683a      	ldr	r2, [r7, #0]
    be1e:	8852      	ldrh	r2, [r2, #2]
    be20:	b292      	uxth	r2, r2
    be22:	4610      	mov	r0, r2
    be24:	4798      	blx	r3
		}
		return ERR_NONE;
    be26:	2300      	movs	r3, #0
    be28:	e001      	b.n	be2e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    be2a:	f06f 030c 	mvn.w	r3, #12
	}
}
    be2e:	4618      	mov	r0, r3
    be30:	371c      	adds	r7, #28
    be32:	46bd      	mov	sp, r7
    be34:	bd90      	pop	{r4, r7, pc}
    be36:	bf00      	nop
    be38:	0000cdb9 	.word	0x0000cdb9
    be3c:	0000cc2d 	.word	0x0000cc2d
    be40:	20000b84 	.word	0x20000b84
    be44:	20000b78 	.word	0x20000b78
    be48:	20000b80 	.word	0x20000b80

0000be4c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    be4c:	b590      	push	{r4, r7, lr}
    be4e:	b085      	sub	sp, #20
    be50:	af00      	add	r7, sp, #0
    be52:	4603      	mov	r3, r0
    be54:	6039      	str	r1, [r7, #0]
    be56:	71fb      	strb	r3, [r7, #7]
    be58:	4613      	mov	r3, r2
    be5a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    be5c:	683b      	ldr	r3, [r7, #0]
    be5e:	799a      	ldrb	r2, [r3, #6]
    be60:	79db      	ldrb	r3, [r3, #7]
    be62:	021b      	lsls	r3, r3, #8
    be64:	4313      	orrs	r3, r2
    be66:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    be68:	79bb      	ldrb	r3, [r7, #6]
    be6a:	2b01      	cmp	r3, #1
    be6c:	d101      	bne.n	be72 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    be6e:	2300      	movs	r3, #0
    be70:	e013      	b.n	be9a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    be72:	683b      	ldr	r3, [r7, #0]
    be74:	785b      	ldrb	r3, [r3, #1]
    be76:	2b21      	cmp	r3, #33	; 0x21
    be78:	d10d      	bne.n	be96 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    be7a:	89fb      	ldrh	r3, [r7, #14]
    be7c:	2b07      	cmp	r3, #7
    be7e:	d002      	beq.n	be86 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    be80:	f04f 33ff 	mov.w	r3, #4294967295
    be84:	e009      	b.n	be9a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    be86:	89fa      	ldrh	r2, [r7, #14]
    be88:	79f8      	ldrb	r0, [r7, #7]
    be8a:	2300      	movs	r3, #0
    be8c:	4905      	ldr	r1, [pc, #20]	; (bea4 <cdcdf_acm_get_req+0x58>)
    be8e:	4c06      	ldr	r4, [pc, #24]	; (bea8 <cdcdf_acm_get_req+0x5c>)
    be90:	47a0      	blx	r4
    be92:	4603      	mov	r3, r0
    be94:	e001      	b.n	be9a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    be96:	f06f 030c 	mvn.w	r3, #12
	}
}
    be9a:	4618      	mov	r0, r3
    be9c:	3714      	adds	r7, #20
    be9e:	46bd      	mov	sp, r7
    bea0:	bd90      	pop	{r4, r7, pc}
    bea2:	bf00      	nop
    bea4:	20000b78 	.word	0x20000b78
    bea8:	0000cc2d 	.word	0x0000cc2d

0000beac <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    beac:	b580      	push	{r7, lr}
    beae:	b082      	sub	sp, #8
    beb0:	af00      	add	r7, sp, #0
    beb2:	4603      	mov	r3, r0
    beb4:	6039      	str	r1, [r7, #0]
    beb6:	71fb      	strb	r3, [r7, #7]
    beb8:	4613      	mov	r3, r2
    beba:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bebc:	683b      	ldr	r3, [r7, #0]
    bebe:	781b      	ldrb	r3, [r3, #0]
    bec0:	095b      	lsrs	r3, r3, #5
    bec2:	b2db      	uxtb	r3, r3
    bec4:	f003 0303 	and.w	r3, r3, #3
    bec8:	2b01      	cmp	r3, #1
    beca:	d002      	beq.n	bed2 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    becc:	f06f 0309 	mvn.w	r3, #9
    bed0:	e026      	b.n	bf20 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    bed2:	683b      	ldr	r3, [r7, #0]
    bed4:	889b      	ldrh	r3, [r3, #4]
    bed6:	b29a      	uxth	r2, r3
    bed8:	4b13      	ldr	r3, [pc, #76]	; (bf28 <cdcdf_acm_req+0x7c>)
    beda:	781b      	ldrb	r3, [r3, #0]
    bedc:	b29b      	uxth	r3, r3
    bede:	429a      	cmp	r2, r3
    bee0:	d007      	beq.n	bef2 <cdcdf_acm_req+0x46>
    bee2:	683b      	ldr	r3, [r7, #0]
    bee4:	889b      	ldrh	r3, [r3, #4]
    bee6:	b29a      	uxth	r2, r3
    bee8:	4b0f      	ldr	r3, [pc, #60]	; (bf28 <cdcdf_acm_req+0x7c>)
    beea:	785b      	ldrb	r3, [r3, #1]
    beec:	b29b      	uxth	r3, r3
    beee:	429a      	cmp	r2, r3
    bef0:	d114      	bne.n	bf1c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    bef2:	683b      	ldr	r3, [r7, #0]
    bef4:	781b      	ldrb	r3, [r3, #0]
    bef6:	b25b      	sxtb	r3, r3
    bef8:	2b00      	cmp	r3, #0
    befa:	da07      	bge.n	bf0c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    befc:	79ba      	ldrb	r2, [r7, #6]
    befe:	79fb      	ldrb	r3, [r7, #7]
    bf00:	6839      	ldr	r1, [r7, #0]
    bf02:	4618      	mov	r0, r3
    bf04:	4b09      	ldr	r3, [pc, #36]	; (bf2c <cdcdf_acm_req+0x80>)
    bf06:	4798      	blx	r3
    bf08:	4603      	mov	r3, r0
    bf0a:	e009      	b.n	bf20 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    bf0c:	79ba      	ldrb	r2, [r7, #6]
    bf0e:	79fb      	ldrb	r3, [r7, #7]
    bf10:	6839      	ldr	r1, [r7, #0]
    bf12:	4618      	mov	r0, r3
    bf14:	4b06      	ldr	r3, [pc, #24]	; (bf30 <cdcdf_acm_req+0x84>)
    bf16:	4798      	blx	r3
    bf18:	4603      	mov	r3, r0
    bf1a:	e001      	b.n	bf20 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    bf1c:	f06f 0309 	mvn.w	r3, #9
	}
}
    bf20:	4618      	mov	r0, r3
    bf22:	3708      	adds	r7, #8
    bf24:	46bd      	mov	sp, r7
    bf26:	bd80      	pop	{r7, pc}
    bf28:	20000b70 	.word	0x20000b70
    bf2c:	0000be4d 	.word	0x0000be4d
    bf30:	0000bd6d 	.word	0x0000bd6d

0000bf34 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    bf34:	b580      	push	{r7, lr}
    bf36:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    bf38:	4b0b      	ldr	r3, [pc, #44]	; (bf68 <cdcdf_acm_init+0x34>)
    bf3a:	4798      	blx	r3
    bf3c:	4603      	mov	r3, r0
    bf3e:	2b01      	cmp	r3, #1
    bf40:	d902      	bls.n	bf48 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    bf42:	f06f 0310 	mvn.w	r3, #16
    bf46:	e00d      	b.n	bf64 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bf48:	4b08      	ldr	r3, [pc, #32]	; (bf6c <cdcdf_acm_init+0x38>)
    bf4a:	4a09      	ldr	r2, [pc, #36]	; (bf70 <cdcdf_acm_init+0x3c>)
    bf4c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bf4e:	4b07      	ldr	r3, [pc, #28]	; (bf6c <cdcdf_acm_init+0x38>)
    bf50:	4a08      	ldr	r2, [pc, #32]	; (bf74 <cdcdf_acm_init+0x40>)
    bf52:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    bf54:	4805      	ldr	r0, [pc, #20]	; (bf6c <cdcdf_acm_init+0x38>)
    bf56:	4b08      	ldr	r3, [pc, #32]	; (bf78 <cdcdf_acm_init+0x44>)
    bf58:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bf5a:	4908      	ldr	r1, [pc, #32]	; (bf7c <cdcdf_acm_init+0x48>)
    bf5c:	2001      	movs	r0, #1
    bf5e:	4b08      	ldr	r3, [pc, #32]	; (bf80 <cdcdf_acm_init+0x4c>)
    bf60:	4798      	blx	r3
	return ERR_NONE;
    bf62:	2300      	movs	r3, #0
}
    bf64:	4618      	mov	r0, r3
    bf66:	bd80      	pop	{r7, pc}
    bf68:	0000cdd1 	.word	0x0000cdd1
    bf6c:	20000b64 	.word	0x20000b64
    bf70:	0000bd1d 	.word	0x0000bd1d
    bf74:	20000b70 	.word	0x20000b70
    bf78:	0000cd39 	.word	0x0000cd39
    bf7c:	20000134 	.word	0x20000134
    bf80:	0000cc69 	.word	0x0000cc69

0000bf84 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    bf84:	b590      	push	{r4, r7, lr}
    bf86:	b083      	sub	sp, #12
    bf88:	af00      	add	r7, sp, #0
    bf8a:	6078      	str	r0, [r7, #4]
    bf8c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bf8e:	4b0b      	ldr	r3, [pc, #44]	; (bfbc <cdcdf_acm_read+0x38>)
    bf90:	4798      	blx	r3
    bf92:	4603      	mov	r3, r0
    bf94:	f083 0301 	eor.w	r3, r3, #1
    bf98:	b2db      	uxtb	r3, r3
    bf9a:	2b00      	cmp	r3, #0
    bf9c:	d002      	beq.n	bfa4 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    bf9e:	f06f 0310 	mvn.w	r3, #16
    bfa2:	e007      	b.n	bfb4 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bfa4:	4b06      	ldr	r3, [pc, #24]	; (bfc0 <cdcdf_acm_read+0x3c>)
    bfa6:	7918      	ldrb	r0, [r3, #4]
    bfa8:	2300      	movs	r3, #0
    bfaa:	683a      	ldr	r2, [r7, #0]
    bfac:	6879      	ldr	r1, [r7, #4]
    bfae:	4c05      	ldr	r4, [pc, #20]	; (bfc4 <cdcdf_acm_read+0x40>)
    bfb0:	47a0      	blx	r4
    bfb2:	4603      	mov	r3, r0
}
    bfb4:	4618      	mov	r0, r3
    bfb6:	370c      	adds	r7, #12
    bfb8:	46bd      	mov	sp, r7
    bfba:	bd90      	pop	{r4, r7, pc}
    bfbc:	0000c0a9 	.word	0x0000c0a9
    bfc0:	20000b70 	.word	0x20000b70
    bfc4:	0000cc2d 	.word	0x0000cc2d

0000bfc8 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    bfc8:	b590      	push	{r4, r7, lr}
    bfca:	b083      	sub	sp, #12
    bfcc:	af00      	add	r7, sp, #0
    bfce:	6078      	str	r0, [r7, #4]
    bfd0:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bfd2:	4b0b      	ldr	r3, [pc, #44]	; (c000 <cdcdf_acm_write+0x38>)
    bfd4:	4798      	blx	r3
    bfd6:	4603      	mov	r3, r0
    bfd8:	f083 0301 	eor.w	r3, r3, #1
    bfdc:	b2db      	uxtb	r3, r3
    bfde:	2b00      	cmp	r3, #0
    bfe0:	d002      	beq.n	bfe8 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    bfe2:	f06f 0310 	mvn.w	r3, #16
    bfe6:	e007      	b.n	bff8 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bfe8:	4b06      	ldr	r3, [pc, #24]	; (c004 <cdcdf_acm_write+0x3c>)
    bfea:	78d8      	ldrb	r0, [r3, #3]
    bfec:	2301      	movs	r3, #1
    bfee:	683a      	ldr	r2, [r7, #0]
    bff0:	6879      	ldr	r1, [r7, #4]
    bff2:	4c05      	ldr	r4, [pc, #20]	; (c008 <cdcdf_acm_write+0x40>)
    bff4:	47a0      	blx	r4
    bff6:	4603      	mov	r3, r0
}
    bff8:	4618      	mov	r0, r3
    bffa:	370c      	adds	r7, #12
    bffc:	46bd      	mov	sp, r7
    bffe:	bd90      	pop	{r4, r7, pc}
    c000:	0000c0a9 	.word	0x0000c0a9
    c004:	20000b70 	.word	0x20000b70
    c008:	0000cc2d 	.word	0x0000cc2d

0000c00c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c00c:	b580      	push	{r7, lr}
    c00e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c010:	4b05      	ldr	r3, [pc, #20]	; (c028 <cdcdf_acm_stop_xfer+0x1c>)
    c012:	78db      	ldrb	r3, [r3, #3]
    c014:	4618      	mov	r0, r3
    c016:	4b05      	ldr	r3, [pc, #20]	; (c02c <cdcdf_acm_stop_xfer+0x20>)
    c018:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c01a:	4b03      	ldr	r3, [pc, #12]	; (c028 <cdcdf_acm_stop_xfer+0x1c>)
    c01c:	791b      	ldrb	r3, [r3, #4]
    c01e:	4618      	mov	r0, r3
    c020:	4b02      	ldr	r3, [pc, #8]	; (c02c <cdcdf_acm_stop_xfer+0x20>)
    c022:	4798      	blx	r3
}
    c024:	bf00      	nop
    c026:	bd80      	pop	{r7, pc}
    c028:	20000b70 	.word	0x20000b70
    c02c:	00003769 	.word	0x00003769

0000c030 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c030:	b580      	push	{r7, lr}
    c032:	b082      	sub	sp, #8
    c034:	af00      	add	r7, sp, #0
    c036:	4603      	mov	r3, r0
    c038:	6039      	str	r1, [r7, #0]
    c03a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c03c:	79fb      	ldrb	r3, [r7, #7]
    c03e:	2b03      	cmp	r3, #3
    c040:	d822      	bhi.n	c088 <cdcdf_acm_register_callback+0x58>
    c042:	a201      	add	r2, pc, #4	; (adr r2, c048 <cdcdf_acm_register_callback+0x18>)
    c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c048:	0000c059 	.word	0x0000c059
    c04c:	0000c069 	.word	0x0000c069
    c050:	0000c079 	.word	0x0000c079
    c054:	0000c081 	.word	0x0000c081
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c058:	4b0f      	ldr	r3, [pc, #60]	; (c098 <cdcdf_acm_register_callback+0x68>)
    c05a:	791b      	ldrb	r3, [r3, #4]
    c05c:	683a      	ldr	r2, [r7, #0]
    c05e:	2102      	movs	r1, #2
    c060:	4618      	mov	r0, r3
    c062:	4b0e      	ldr	r3, [pc, #56]	; (c09c <cdcdf_acm_register_callback+0x6c>)
    c064:	4798      	blx	r3
		break;
    c066:	e012      	b.n	c08e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c068:	4b0b      	ldr	r3, [pc, #44]	; (c098 <cdcdf_acm_register_callback+0x68>)
    c06a:	78db      	ldrb	r3, [r3, #3]
    c06c:	683a      	ldr	r2, [r7, #0]
    c06e:	2102      	movs	r1, #2
    c070:	4618      	mov	r0, r3
    c072:	4b0a      	ldr	r3, [pc, #40]	; (c09c <cdcdf_acm_register_callback+0x6c>)
    c074:	4798      	blx	r3
		break;
    c076:	e00a      	b.n	c08e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c078:	4a09      	ldr	r2, [pc, #36]	; (c0a0 <cdcdf_acm_register_callback+0x70>)
    c07a:	683b      	ldr	r3, [r7, #0]
    c07c:	6013      	str	r3, [r2, #0]
		break;
    c07e:	e006      	b.n	c08e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c080:	4a08      	ldr	r2, [pc, #32]	; (c0a4 <cdcdf_acm_register_callback+0x74>)
    c082:	683b      	ldr	r3, [r7, #0]
    c084:	6013      	str	r3, [r2, #0]
		break;
    c086:	e002      	b.n	c08e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c088:	f06f 030c 	mvn.w	r3, #12
    c08c:	e000      	b.n	c090 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c08e:	2300      	movs	r3, #0
}
    c090:	4618      	mov	r0, r3
    c092:	3708      	adds	r7, #8
    c094:	46bd      	mov	sp, r7
    c096:	bd80      	pop	{r7, pc}
    c098:	20000b70 	.word	0x20000b70
    c09c:	00003895 	.word	0x00003895
    c0a0:	20000b84 	.word	0x20000b84
    c0a4:	20000b80 	.word	0x20000b80

0000c0a8 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c0a8:	b480      	push	{r7}
    c0aa:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c0ac:	4b03      	ldr	r3, [pc, #12]	; (c0bc <cdcdf_acm_is_enabled+0x14>)
    c0ae:	795b      	ldrb	r3, [r3, #5]
}
    c0b0:	4618      	mov	r0, r3
    c0b2:	46bd      	mov	sp, r7
    c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0b8:	4770      	bx	lr
    c0ba:	bf00      	nop
    c0bc:	20000b70 	.word	0x20000b70

0000c0c0 <usb_get_u16>:
{
    c0c0:	b480      	push	{r7}
    c0c2:	b083      	sub	sp, #12
    c0c4:	af00      	add	r7, sp, #0
    c0c6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c0c8:	687b      	ldr	r3, [r7, #4]
    c0ca:	781b      	ldrb	r3, [r3, #0]
    c0cc:	b29a      	uxth	r2, r3
    c0ce:	687b      	ldr	r3, [r7, #4]
    c0d0:	3301      	adds	r3, #1
    c0d2:	781b      	ldrb	r3, [r3, #0]
    c0d4:	b29b      	uxth	r3, r3
    c0d6:	021b      	lsls	r3, r3, #8
    c0d8:	b29b      	uxth	r3, r3
    c0da:	4413      	add	r3, r2
    c0dc:	b29b      	uxth	r3, r3
}
    c0de:	4618      	mov	r0, r3
    c0e0:	370c      	adds	r7, #12
    c0e2:	46bd      	mov	sp, r7
    c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0e8:	4770      	bx	lr

0000c0ea <usb_desc_len>:
{
    c0ea:	b480      	push	{r7}
    c0ec:	b083      	sub	sp, #12
    c0ee:	af00      	add	r7, sp, #0
    c0f0:	6078      	str	r0, [r7, #4]
	return desc[0];
    c0f2:	687b      	ldr	r3, [r7, #4]
    c0f4:	781b      	ldrb	r3, [r3, #0]
}
    c0f6:	4618      	mov	r0, r3
    c0f8:	370c      	adds	r7, #12
    c0fa:	46bd      	mov	sp, r7
    c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c100:	4770      	bx	lr
	...

0000c104 <usb_desc_next>:
{
    c104:	b580      	push	{r7, lr}
    c106:	b082      	sub	sp, #8
    c108:	af00      	add	r7, sp, #0
    c10a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c10c:	6878      	ldr	r0, [r7, #4]
    c10e:	4b05      	ldr	r3, [pc, #20]	; (c124 <usb_desc_next+0x20>)
    c110:	4798      	blx	r3
    c112:	4603      	mov	r3, r0
    c114:	461a      	mov	r2, r3
    c116:	687b      	ldr	r3, [r7, #4]
    c118:	4413      	add	r3, r2
}
    c11a:	4618      	mov	r0, r3
    c11c:	3708      	adds	r7, #8
    c11e:	46bd      	mov	sp, r7
    c120:	bd80      	pop	{r7, pc}
    c122:	bf00      	nop
    c124:	0000c0eb 	.word	0x0000c0eb

0000c128 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c128:	b580      	push	{r7, lr}
    c12a:	b082      	sub	sp, #8
    c12c:	af00      	add	r7, sp, #0
    c12e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c130:	687b      	ldr	r3, [r7, #4]
    c132:	3302      	adds	r3, #2
    c134:	4618      	mov	r0, r3
    c136:	4b03      	ldr	r3, [pc, #12]	; (c144 <usb_cfg_desc_total_len+0x1c>)
    c138:	4798      	blx	r3
    c13a:	4603      	mov	r3, r0
}
    c13c:	4618      	mov	r0, r3
    c13e:	3708      	adds	r7, #8
    c140:	46bd      	mov	sp, r7
    c142:	bd80      	pop	{r7, pc}
    c144:	0000c0c1 	.word	0x0000c0c1

0000c148 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c148:	b590      	push	{r4, r7, lr}
    c14a:	b085      	sub	sp, #20
    c14c:	af00      	add	r7, sp, #0
    c14e:	4603      	mov	r3, r0
    c150:	6039      	str	r1, [r7, #0]
    c152:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c154:	2300      	movs	r3, #0
    c156:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c158:	683b      	ldr	r3, [r7, #0]
    c15a:	799a      	ldrb	r2, [r3, #6]
    c15c:	79db      	ldrb	r3, [r3, #7]
    c15e:	021b      	lsls	r3, r3, #8
    c160:	4313      	orrs	r3, r2
    c162:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c164:	897b      	ldrh	r3, [r7, #10]
    c166:	2b12      	cmp	r3, #18
    c168:	d901      	bls.n	c16e <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c16a:	2312      	movs	r3, #18
    c16c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c16e:	68fb      	ldr	r3, [r7, #12]
    c170:	2b00      	cmp	r3, #0
    c172:	d10a      	bne.n	c18a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c174:	4b0f      	ldr	r3, [pc, #60]	; (c1b4 <usbdc_get_dev_desc+0x6c>)
    c176:	681b      	ldr	r3, [r3, #0]
    c178:	6818      	ldr	r0, [r3, #0]
    c17a:	4b0e      	ldr	r3, [pc, #56]	; (c1b4 <usbdc_get_dev_desc+0x6c>)
    c17c:	681b      	ldr	r3, [r3, #0]
    c17e:	685b      	ldr	r3, [r3, #4]
    c180:	2201      	movs	r2, #1
    c182:	4619      	mov	r1, r3
    c184:	4b0c      	ldr	r3, [pc, #48]	; (c1b8 <usbdc_get_dev_desc+0x70>)
    c186:	4798      	blx	r3
    c188:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c18a:	68fb      	ldr	r3, [r7, #12]
    c18c:	2b00      	cmp	r3, #0
    c18e:	d101      	bne.n	c194 <usbdc_get_dev_desc+0x4c>
		return false;
    c190:	2300      	movs	r3, #0
    c192:	e00b      	b.n	c1ac <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c194:	897a      	ldrh	r2, [r7, #10]
    c196:	79f8      	ldrb	r0, [r7, #7]
    c198:	2300      	movs	r3, #0
    c19a:	68f9      	ldr	r1, [r7, #12]
    c19c:	4c07      	ldr	r4, [pc, #28]	; (c1bc <usbdc_get_dev_desc+0x74>)
    c19e:	47a0      	blx	r4
    c1a0:	4603      	mov	r3, r0
    c1a2:	2b00      	cmp	r3, #0
    c1a4:	d001      	beq.n	c1aa <usbdc_get_dev_desc+0x62>
		return false;
    c1a6:	2300      	movs	r3, #0
    c1a8:	e000      	b.n	c1ac <usbdc_get_dev_desc+0x64>
	}
	return true;
    c1aa:	2301      	movs	r3, #1
}
    c1ac:	4618      	mov	r0, r3
    c1ae:	3714      	adds	r7, #20
    c1b0:	46bd      	mov	sp, r7
    c1b2:	bd90      	pop	{r4, r7, pc}
    c1b4:	20000b88 	.word	0x20000b88
    c1b8:	0000cebd 	.word	0x0000cebd
    c1bc:	0000cc2d 	.word	0x0000cc2d

0000c1c0 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c1c0:	b590      	push	{r4, r7, lr}
    c1c2:	b087      	sub	sp, #28
    c1c4:	af00      	add	r7, sp, #0
    c1c6:	4603      	mov	r3, r0
    c1c8:	6039      	str	r1, [r7, #0]
    c1ca:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c1cc:	2300      	movs	r3, #0
    c1ce:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c1d0:	683b      	ldr	r3, [r7, #0]
    c1d2:	799a      	ldrb	r2, [r3, #6]
    c1d4:	79db      	ldrb	r3, [r3, #7]
    c1d6:	021b      	lsls	r3, r3, #8
    c1d8:	4313      	orrs	r3, r2
    c1da:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c1dc:	683b      	ldr	r3, [r7, #0]
    c1de:	885b      	ldrh	r3, [r3, #2]
    c1e0:	b29b      	uxth	r3, r3
    c1e2:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c1e4:	8a7a      	ldrh	r2, [r7, #18]
    c1e6:	4b1e      	ldr	r3, [pc, #120]	; (c260 <usbdc_get_cfg_desc+0xa0>)
    c1e8:	7f1b      	ldrb	r3, [r3, #28]
    c1ea:	3b01      	subs	r3, #1
    c1ec:	4013      	ands	r3, r2
    c1ee:	2b00      	cmp	r3, #0
    c1f0:	bf0c      	ite	eq
    c1f2:	2301      	moveq	r3, #1
    c1f4:	2300      	movne	r3, #0
    c1f6:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c1f8:	697b      	ldr	r3, [r7, #20]
    c1fa:	2b00      	cmp	r3, #0
    c1fc:	d10c      	bne.n	c218 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c1fe:	4b18      	ldr	r3, [pc, #96]	; (c260 <usbdc_get_cfg_desc+0xa0>)
    c200:	681b      	ldr	r3, [r3, #0]
    c202:	6818      	ldr	r0, [r3, #0]
    c204:	4b16      	ldr	r3, [pc, #88]	; (c260 <usbdc_get_cfg_desc+0xa0>)
    c206:	681b      	ldr	r3, [r3, #0]
    c208:	6859      	ldr	r1, [r3, #4]
    c20a:	7c3b      	ldrb	r3, [r7, #16]
    c20c:	3301      	adds	r3, #1
    c20e:	b2db      	uxtb	r3, r3
    c210:	461a      	mov	r2, r3
    c212:	4b14      	ldr	r3, [pc, #80]	; (c264 <usbdc_get_cfg_desc+0xa4>)
    c214:	4798      	blx	r3
    c216:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c218:	697b      	ldr	r3, [r7, #20]
    c21a:	2b00      	cmp	r3, #0
    c21c:	d101      	bne.n	c222 <usbdc_get_cfg_desc+0x62>
		return false;
    c21e:	2300      	movs	r3, #0
    c220:	e019      	b.n	c256 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c222:	6978      	ldr	r0, [r7, #20]
    c224:	4b10      	ldr	r3, [pc, #64]	; (c268 <usbdc_get_cfg_desc+0xa8>)
    c226:	4798      	blx	r3
    c228:	4603      	mov	r3, r0
    c22a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c22c:	8a7a      	ldrh	r2, [r7, #18]
    c22e:	89fb      	ldrh	r3, [r7, #14]
    c230:	429a      	cmp	r2, r3
    c232:	d802      	bhi.n	c23a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c234:	2300      	movs	r3, #0
    c236:	747b      	strb	r3, [r7, #17]
    c238:	e001      	b.n	c23e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c23a:	89fb      	ldrh	r3, [r7, #14]
    c23c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c23e:	8a7a      	ldrh	r2, [r7, #18]
    c240:	7c7b      	ldrb	r3, [r7, #17]
    c242:	79f8      	ldrb	r0, [r7, #7]
    c244:	6979      	ldr	r1, [r7, #20]
    c246:	4c09      	ldr	r4, [pc, #36]	; (c26c <usbdc_get_cfg_desc+0xac>)
    c248:	47a0      	blx	r4
    c24a:	4603      	mov	r3, r0
    c24c:	2b00      	cmp	r3, #0
    c24e:	d001      	beq.n	c254 <usbdc_get_cfg_desc+0x94>
		return false;
    c250:	2300      	movs	r3, #0
    c252:	e000      	b.n	c256 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c254:	2301      	movs	r3, #1
}
    c256:	4618      	mov	r0, r3
    c258:	371c      	adds	r7, #28
    c25a:	46bd      	mov	sp, r7
    c25c:	bd90      	pop	{r4, r7, pc}
    c25e:	bf00      	nop
    c260:	20000b88 	.word	0x20000b88
    c264:	0000cf7d 	.word	0x0000cf7d
    c268:	0000c129 	.word	0x0000c129
    c26c:	0000cc2d 	.word	0x0000cc2d

0000c270 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c270:	b590      	push	{r4, r7, lr}
    c272:	b085      	sub	sp, #20
    c274:	af00      	add	r7, sp, #0
    c276:	4603      	mov	r3, r0
    c278:	6039      	str	r1, [r7, #0]
    c27a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c27c:	683b      	ldr	r3, [r7, #0]
    c27e:	799a      	ldrb	r2, [r3, #6]
    c280:	79db      	ldrb	r3, [r3, #7]
    c282:	021b      	lsls	r3, r3, #8
    c284:	4313      	orrs	r3, r2
    c286:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c288:	683b      	ldr	r3, [r7, #0]
    c28a:	885b      	ldrh	r3, [r3, #2]
    c28c:	b29b      	uxth	r3, r3
    c28e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c290:	89fa      	ldrh	r2, [r7, #14]
    c292:	4b1a      	ldr	r3, [pc, #104]	; (c2fc <usbdc_get_str_desc+0x8c>)
    c294:	7f1b      	ldrb	r3, [r3, #28]
    c296:	3b01      	subs	r3, #1
    c298:	4013      	ands	r3, r2
    c29a:	2b00      	cmp	r3, #0
    c29c:	bf0c      	ite	eq
    c29e:	2301      	moveq	r3, #1
    c2a0:	2300      	movne	r3, #0
    c2a2:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c2a4:	4b15      	ldr	r3, [pc, #84]	; (c2fc <usbdc_get_str_desc+0x8c>)
    c2a6:	681b      	ldr	r3, [r3, #0]
    c2a8:	6818      	ldr	r0, [r3, #0]
    c2aa:	4b14      	ldr	r3, [pc, #80]	; (c2fc <usbdc_get_str_desc+0x8c>)
    c2ac:	681b      	ldr	r3, [r3, #0]
    c2ae:	685b      	ldr	r3, [r3, #4]
    c2b0:	7b3a      	ldrb	r2, [r7, #12]
    c2b2:	4619      	mov	r1, r3
    c2b4:	4b12      	ldr	r3, [pc, #72]	; (c300 <usbdc_get_str_desc+0x90>)
    c2b6:	4798      	blx	r3
    c2b8:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c2ba:	68bb      	ldr	r3, [r7, #8]
    c2bc:	2b00      	cmp	r3, #0
    c2be:	d101      	bne.n	c2c4 <usbdc_get_str_desc+0x54>
		return false;
    c2c0:	2300      	movs	r3, #0
    c2c2:	e017      	b.n	c2f4 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c2c4:	68bb      	ldr	r3, [r7, #8]
    c2c6:	781b      	ldrb	r3, [r3, #0]
    c2c8:	b29b      	uxth	r3, r3
    c2ca:	89fa      	ldrh	r2, [r7, #14]
    c2cc:	429a      	cmp	r2, r3
    c2ce:	d802      	bhi.n	c2d6 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c2d0:	2300      	movs	r3, #0
    c2d2:	737b      	strb	r3, [r7, #13]
    c2d4:	e002      	b.n	c2dc <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c2d6:	68bb      	ldr	r3, [r7, #8]
    c2d8:	781b      	ldrb	r3, [r3, #0]
    c2da:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c2dc:	89fa      	ldrh	r2, [r7, #14]
    c2de:	7b7b      	ldrb	r3, [r7, #13]
    c2e0:	79f8      	ldrb	r0, [r7, #7]
    c2e2:	68b9      	ldr	r1, [r7, #8]
    c2e4:	4c07      	ldr	r4, [pc, #28]	; (c304 <usbdc_get_str_desc+0x94>)
    c2e6:	47a0      	blx	r4
    c2e8:	4603      	mov	r3, r0
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d001      	beq.n	c2f2 <usbdc_get_str_desc+0x82>
		return false;
    c2ee:	2300      	movs	r3, #0
    c2f0:	e000      	b.n	c2f4 <usbdc_get_str_desc+0x84>
	}
	return true;
    c2f2:	2301      	movs	r3, #1
}
    c2f4:	4618      	mov	r0, r3
    c2f6:	3714      	adds	r7, #20
    c2f8:	46bd      	mov	sp, r7
    c2fa:	bd90      	pop	{r4, r7, pc}
    c2fc:	20000b88 	.word	0x20000b88
    c300:	0000cff5 	.word	0x0000cff5
    c304:	0000cc2d 	.word	0x0000cc2d

0000c308 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c308:	b580      	push	{r7, lr}
    c30a:	b084      	sub	sp, #16
    c30c:	af00      	add	r7, sp, #0
    c30e:	4603      	mov	r3, r0
    c310:	6039      	str	r1, [r7, #0]
    c312:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c314:	683b      	ldr	r3, [r7, #0]
    c316:	885b      	ldrh	r3, [r3, #2]
    c318:	b29b      	uxth	r3, r3
    c31a:	0a1b      	lsrs	r3, r3, #8
    c31c:	b29b      	uxth	r3, r3
    c31e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c320:	7bfb      	ldrb	r3, [r7, #15]
    c322:	2b02      	cmp	r3, #2
    c324:	d00d      	beq.n	c342 <usbdc_get_desc_req+0x3a>
    c326:	2b03      	cmp	r3, #3
    c328:	d012      	beq.n	c350 <usbdc_get_desc_req+0x48>
    c32a:	2b01      	cmp	r3, #1
    c32c:	d002      	beq.n	c334 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c32e:	bf00      	nop
	}
	return false;
    c330:	2300      	movs	r3, #0
    c332:	e013      	b.n	c35c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c334:	79fb      	ldrb	r3, [r7, #7]
    c336:	6839      	ldr	r1, [r7, #0]
    c338:	4618      	mov	r0, r3
    c33a:	4b0a      	ldr	r3, [pc, #40]	; (c364 <usbdc_get_desc_req+0x5c>)
    c33c:	4798      	blx	r3
    c33e:	4603      	mov	r3, r0
    c340:	e00c      	b.n	c35c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c342:	79fb      	ldrb	r3, [r7, #7]
    c344:	6839      	ldr	r1, [r7, #0]
    c346:	4618      	mov	r0, r3
    c348:	4b07      	ldr	r3, [pc, #28]	; (c368 <usbdc_get_desc_req+0x60>)
    c34a:	4798      	blx	r3
    c34c:	4603      	mov	r3, r0
    c34e:	e005      	b.n	c35c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c350:	79fb      	ldrb	r3, [r7, #7]
    c352:	6839      	ldr	r1, [r7, #0]
    c354:	4618      	mov	r0, r3
    c356:	4b05      	ldr	r3, [pc, #20]	; (c36c <usbdc_get_desc_req+0x64>)
    c358:	4798      	blx	r3
    c35a:	4603      	mov	r3, r0
}
    c35c:	4618      	mov	r0, r3
    c35e:	3710      	adds	r7, #16
    c360:	46bd      	mov	sp, r7
    c362:	bd80      	pop	{r7, pc}
    c364:	0000c149 	.word	0x0000c149
    c368:	0000c1c1 	.word	0x0000c1c1
    c36c:	0000c271 	.word	0x0000c271

0000c370 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c370:	b590      	push	{r4, r7, lr}
    c372:	b085      	sub	sp, #20
    c374:	af00      	add	r7, sp, #0
    c376:	4603      	mov	r3, r0
    c378:	6039      	str	r1, [r7, #0]
    c37a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c37c:	683b      	ldr	r3, [r7, #0]
    c37e:	781b      	ldrb	r3, [r3, #0]
    c380:	f003 031f 	and.w	r3, r3, #31
    c384:	2b00      	cmp	r3, #0
    c386:	db1b      	blt.n	c3c0 <usbdc_get_status_req+0x50>
    c388:	2b01      	cmp	r3, #1
    c38a:	dd02      	ble.n	c392 <usbdc_get_status_req+0x22>
    c38c:	2b02      	cmp	r3, #2
    c38e:	d003      	beq.n	c398 <usbdc_get_status_req+0x28>
    c390:	e016      	b.n	c3c0 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c392:	2300      	movs	r3, #0
    c394:	60fb      	str	r3, [r7, #12]
		break;
    c396:	e015      	b.n	c3c4 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c398:	683b      	ldr	r3, [r7, #0]
    c39a:	889b      	ldrh	r3, [r3, #4]
    c39c:	b29b      	uxth	r3, r3
    c39e:	b2db      	uxtb	r3, r3
    c3a0:	2102      	movs	r1, #2
    c3a2:	4618      	mov	r0, r3
    c3a4:	4b0f      	ldr	r3, [pc, #60]	; (c3e4 <usbdc_get_status_req+0x74>)
    c3a6:	4798      	blx	r3
    c3a8:	4603      	mov	r3, r0
    c3aa:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c3ac:	68fb      	ldr	r3, [r7, #12]
    c3ae:	2b00      	cmp	r3, #0
    c3b0:	da01      	bge.n	c3b6 <usbdc_get_status_req+0x46>
			return false;
    c3b2:	2300      	movs	r3, #0
    c3b4:	e012      	b.n	c3dc <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c3b6:	68fb      	ldr	r3, [r7, #12]
    c3b8:	f003 0301 	and.w	r3, r3, #1
    c3bc:	60fb      	str	r3, [r7, #12]
		break;
    c3be:	e001      	b.n	c3c4 <usbdc_get_status_req+0x54>
	default:
		return false;
    c3c0:	2300      	movs	r3, #0
    c3c2:	e00b      	b.n	c3dc <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c3c4:	4b08      	ldr	r3, [pc, #32]	; (c3e8 <usbdc_get_status_req+0x78>)
    c3c6:	695b      	ldr	r3, [r3, #20]
    c3c8:	89ba      	ldrh	r2, [r7, #12]
    c3ca:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c3cc:	4b06      	ldr	r3, [pc, #24]	; (c3e8 <usbdc_get_status_req+0x78>)
    c3ce:	6959      	ldr	r1, [r3, #20]
    c3d0:	79f8      	ldrb	r0, [r7, #7]
    c3d2:	2300      	movs	r3, #0
    c3d4:	2202      	movs	r2, #2
    c3d6:	4c05      	ldr	r4, [pc, #20]	; (c3ec <usbdc_get_status_req+0x7c>)
    c3d8:	47a0      	blx	r4
	return true;
    c3da:	2301      	movs	r3, #1
}
    c3dc:	4618      	mov	r0, r3
    c3de:	3714      	adds	r7, #20
    c3e0:	46bd      	mov	sp, r7
    c3e2:	bd90      	pop	{r4, r7, pc}
    c3e4:	00003841 	.word	0x00003841
    c3e8:	20000b88 	.word	0x20000b88
    c3ec:	0000cc2d 	.word	0x0000cc2d

0000c3f0 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c3f0:	b590      	push	{r4, r7, lr}
    c3f2:	b085      	sub	sp, #20
    c3f4:	af00      	add	r7, sp, #0
    c3f6:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c3f8:	4b1f      	ldr	r3, [pc, #124]	; (c478 <usbdc_get_interface+0x88>)
    c3fa:	691b      	ldr	r3, [r3, #16]
    c3fc:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c3fe:	4b1e      	ldr	r3, [pc, #120]	; (c478 <usbdc_get_interface+0x88>)
    c400:	7f5b      	ldrb	r3, [r3, #29]
    c402:	461a      	mov	r2, r3
    c404:	687b      	ldr	r3, [r7, #4]
    c406:	889b      	ldrh	r3, [r3, #4]
    c408:	b29b      	uxth	r3, r3
    c40a:	fa42 f303 	asr.w	r3, r2, r3
    c40e:	f003 0301 	and.w	r3, r3, #1
    c412:	2b00      	cmp	r3, #0
    c414:	d128      	bne.n	c468 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c416:	4b18      	ldr	r3, [pc, #96]	; (c478 <usbdc_get_interface+0x88>)
    c418:	695b      	ldr	r3, [r3, #20]
    c41a:	2200      	movs	r2, #0
    c41c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c41e:	4b16      	ldr	r3, [pc, #88]	; (c478 <usbdc_get_interface+0x88>)
    c420:	6959      	ldr	r1, [r3, #20]
    c422:	2300      	movs	r3, #0
    c424:	2201      	movs	r2, #1
    c426:	2000      	movs	r0, #0
    c428:	4c14      	ldr	r4, [pc, #80]	; (c47c <usbdc_get_interface+0x8c>)
    c42a:	47a0      	blx	r4
		return true;
    c42c:	2301      	movs	r3, #1
    c42e:	e01f      	b.n	c470 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c430:	68fb      	ldr	r3, [r7, #12]
    c432:	685b      	ldr	r3, [r3, #4]
    c434:	687a      	ldr	r2, [r7, #4]
    c436:	2102      	movs	r1, #2
    c438:	68f8      	ldr	r0, [r7, #12]
    c43a:	4798      	blx	r3
    c43c:	60b8      	str	r0, [r7, #8]
    c43e:	68bb      	ldr	r3, [r7, #8]
    c440:	2b00      	cmp	r3, #0
    c442:	da03      	bge.n	c44c <usbdc_get_interface+0x5c>
			func = func->next;
    c444:	68fb      	ldr	r3, [r7, #12]
    c446:	681b      	ldr	r3, [r3, #0]
    c448:	60fb      	str	r3, [r7, #12]
    c44a:	e00d      	b.n	c468 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c44c:	4b0a      	ldr	r3, [pc, #40]	; (c478 <usbdc_get_interface+0x88>)
    c44e:	695b      	ldr	r3, [r3, #20]
    c450:	68ba      	ldr	r2, [r7, #8]
    c452:	b2d2      	uxtb	r2, r2
    c454:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c456:	4b08      	ldr	r3, [pc, #32]	; (c478 <usbdc_get_interface+0x88>)
    c458:	6959      	ldr	r1, [r3, #20]
    c45a:	2300      	movs	r3, #0
    c45c:	2201      	movs	r2, #1
    c45e:	2000      	movs	r0, #0
    c460:	4c06      	ldr	r4, [pc, #24]	; (c47c <usbdc_get_interface+0x8c>)
    c462:	47a0      	blx	r4
			return true;
    c464:	2301      	movs	r3, #1
    c466:	e003      	b.n	c470 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c468:	68fb      	ldr	r3, [r7, #12]
    c46a:	2b00      	cmp	r3, #0
    c46c:	d1e0      	bne.n	c430 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c46e:	2300      	movs	r3, #0
}
    c470:	4618      	mov	r0, r3
    c472:	3714      	adds	r7, #20
    c474:	46bd      	mov	sp, r7
    c476:	bd90      	pop	{r4, r7, pc}
    c478:	20000b88 	.word	0x20000b88
    c47c:	0000cc2d 	.word	0x0000cc2d

0000c480 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c480:	b590      	push	{r4, r7, lr}
    c482:	b083      	sub	sp, #12
    c484:	af00      	add	r7, sp, #0
    c486:	4603      	mov	r3, r0
    c488:	6039      	str	r1, [r7, #0]
    c48a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c48c:	683b      	ldr	r3, [r7, #0]
    c48e:	785b      	ldrb	r3, [r3, #1]
    c490:	2b0a      	cmp	r3, #10
    c492:	d83a      	bhi.n	c50a <usbdc_get_req+0x8a>
    c494:	a201      	add	r2, pc, #4	; (adr r2, c49c <usbdc_get_req+0x1c>)
    c496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c49a:	bf00      	nop
    c49c:	0000c4f3 	.word	0x0000c4f3
    c4a0:	0000c50b 	.word	0x0000c50b
    c4a4:	0000c50b 	.word	0x0000c50b
    c4a8:	0000c50b 	.word	0x0000c50b
    c4ac:	0000c50b 	.word	0x0000c50b
    c4b0:	0000c50b 	.word	0x0000c50b
    c4b4:	0000c4c9 	.word	0x0000c4c9
    c4b8:	0000c50b 	.word	0x0000c50b
    c4bc:	0000c4d7 	.word	0x0000c4d7
    c4c0:	0000c50b 	.word	0x0000c50b
    c4c4:	0000c501 	.word	0x0000c501
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c4c8:	79fb      	ldrb	r3, [r7, #7]
    c4ca:	6839      	ldr	r1, [r7, #0]
    c4cc:	4618      	mov	r0, r3
    c4ce:	4b11      	ldr	r3, [pc, #68]	; (c514 <usbdc_get_req+0x94>)
    c4d0:	4798      	blx	r3
    c4d2:	4603      	mov	r3, r0
    c4d4:	e01a      	b.n	c50c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c4d6:	4b10      	ldr	r3, [pc, #64]	; (c518 <usbdc_get_req+0x98>)
    c4d8:	695b      	ldr	r3, [r3, #20]
    c4da:	4a0f      	ldr	r2, [pc, #60]	; (c518 <usbdc_get_req+0x98>)
    c4dc:	7ed2      	ldrb	r2, [r2, #27]
    c4de:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c4e0:	4b0d      	ldr	r3, [pc, #52]	; (c518 <usbdc_get_req+0x98>)
    c4e2:	6959      	ldr	r1, [r3, #20]
    c4e4:	79f8      	ldrb	r0, [r7, #7]
    c4e6:	2300      	movs	r3, #0
    c4e8:	2201      	movs	r2, #1
    c4ea:	4c0c      	ldr	r4, [pc, #48]	; (c51c <usbdc_get_req+0x9c>)
    c4ec:	47a0      	blx	r4
		return true;
    c4ee:	2301      	movs	r3, #1
    c4f0:	e00c      	b.n	c50c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c4f2:	79fb      	ldrb	r3, [r7, #7]
    c4f4:	6839      	ldr	r1, [r7, #0]
    c4f6:	4618      	mov	r0, r3
    c4f8:	4b09      	ldr	r3, [pc, #36]	; (c520 <usbdc_get_req+0xa0>)
    c4fa:	4798      	blx	r3
    c4fc:	4603      	mov	r3, r0
    c4fe:	e005      	b.n	c50c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c500:	6838      	ldr	r0, [r7, #0]
    c502:	4b08      	ldr	r3, [pc, #32]	; (c524 <usbdc_get_req+0xa4>)
    c504:	4798      	blx	r3
    c506:	4603      	mov	r3, r0
    c508:	e000      	b.n	c50c <usbdc_get_req+0x8c>
	default:
		return false;
    c50a:	2300      	movs	r3, #0
	}
}
    c50c:	4618      	mov	r0, r3
    c50e:	370c      	adds	r7, #12
    c510:	46bd      	mov	sp, r7
    c512:	bd90      	pop	{r4, r7, pc}
    c514:	0000c309 	.word	0x0000c309
    c518:	20000b88 	.word	0x20000b88
    c51c:	0000cc2d 	.word	0x0000cc2d
    c520:	0000c371 	.word	0x0000c371
    c524:	0000c3f1 	.word	0x0000c3f1

0000c528 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c528:	b590      	push	{r4, r7, lr}
    c52a:	b083      	sub	sp, #12
    c52c:	af00      	add	r7, sp, #0
    c52e:	4603      	mov	r3, r0
    c530:	6039      	str	r1, [r7, #0]
    c532:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c534:	683b      	ldr	r3, [r7, #0]
    c536:	781b      	ldrb	r3, [r3, #0]
    c538:	f003 031f 	and.w	r3, r3, #31
    c53c:	2b02      	cmp	r3, #2
    c53e:	d116      	bne.n	c56e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c540:	683b      	ldr	r3, [r7, #0]
    c542:	88db      	ldrh	r3, [r3, #6]
    c544:	b29b      	uxth	r3, r3
    c546:	2b00      	cmp	r3, #0
    c548:	d001      	beq.n	c54e <usbdc_clear_ftr_req+0x26>
			return false;
    c54a:	2300      	movs	r3, #0
    c54c:	e010      	b.n	c570 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c54e:	683b      	ldr	r3, [r7, #0]
    c550:	889b      	ldrh	r3, [r3, #4]
    c552:	b29b      	uxth	r3, r3
    c554:	b2db      	uxtb	r3, r3
    c556:	2100      	movs	r1, #0
    c558:	4618      	mov	r0, r3
    c55a:	4b07      	ldr	r3, [pc, #28]	; (c578 <usbdc_clear_ftr_req+0x50>)
    c55c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c55e:	79f8      	ldrb	r0, [r7, #7]
    c560:	2301      	movs	r3, #1
    c562:	2200      	movs	r2, #0
    c564:	2100      	movs	r1, #0
    c566:	4c05      	ldr	r4, [pc, #20]	; (c57c <usbdc_clear_ftr_req+0x54>)
    c568:	47a0      	blx	r4
		return true;
    c56a:	2301      	movs	r3, #1
    c56c:	e000      	b.n	c570 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c56e:	2300      	movs	r3, #0
	}
}
    c570:	4618      	mov	r0, r3
    c572:	370c      	adds	r7, #12
    c574:	46bd      	mov	sp, r7
    c576:	bd90      	pop	{r4, r7, pc}
    c578:	00003841 	.word	0x00003841
    c57c:	0000cc2d 	.word	0x0000cc2d

0000c580 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c580:	b590      	push	{r4, r7, lr}
    c582:	b083      	sub	sp, #12
    c584:	af00      	add	r7, sp, #0
    c586:	4603      	mov	r3, r0
    c588:	6039      	str	r1, [r7, #0]
    c58a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c58c:	683b      	ldr	r3, [r7, #0]
    c58e:	781b      	ldrb	r3, [r3, #0]
    c590:	f003 031f 	and.w	r3, r3, #31
    c594:	2b02      	cmp	r3, #2
    c596:	d116      	bne.n	c5c6 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c598:	683b      	ldr	r3, [r7, #0]
    c59a:	88db      	ldrh	r3, [r3, #6]
    c59c:	b29b      	uxth	r3, r3
    c59e:	2b00      	cmp	r3, #0
    c5a0:	d001      	beq.n	c5a6 <usbdc_set_ftr_req+0x26>
			return false;
    c5a2:	2300      	movs	r3, #0
    c5a4:	e010      	b.n	c5c8 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c5a6:	683b      	ldr	r3, [r7, #0]
    c5a8:	889b      	ldrh	r3, [r3, #4]
    c5aa:	b29b      	uxth	r3, r3
    c5ac:	b2db      	uxtb	r3, r3
    c5ae:	2101      	movs	r1, #1
    c5b0:	4618      	mov	r0, r3
    c5b2:	4b07      	ldr	r3, [pc, #28]	; (c5d0 <usbdc_set_ftr_req+0x50>)
    c5b4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c5b6:	79f8      	ldrb	r0, [r7, #7]
    c5b8:	2301      	movs	r3, #1
    c5ba:	2200      	movs	r2, #0
    c5bc:	2100      	movs	r1, #0
    c5be:	4c05      	ldr	r4, [pc, #20]	; (c5d4 <usbdc_set_ftr_req+0x54>)
    c5c0:	47a0      	blx	r4
		return true;
    c5c2:	2301      	movs	r3, #1
    c5c4:	e000      	b.n	c5c8 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c5c6:	2300      	movs	r3, #0
	}
}
    c5c8:	4618      	mov	r0, r3
    c5ca:	370c      	adds	r7, #12
    c5cc:	46bd      	mov	sp, r7
    c5ce:	bd90      	pop	{r4, r7, pc}
    c5d0:	00003841 	.word	0x00003841
    c5d4:	0000cc2d 	.word	0x0000cc2d

0000c5d8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c5d8:	b580      	push	{r7, lr}
    c5da:	b082      	sub	sp, #8
    c5dc:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c5de:	4b0a      	ldr	r3, [pc, #40]	; (c608 <usbdc_unconfig+0x30>)
    c5e0:	691b      	ldr	r3, [r3, #16]
    c5e2:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c5e4:	e008      	b.n	c5f8 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c5e6:	687b      	ldr	r3, [r7, #4]
    c5e8:	685b      	ldr	r3, [r3, #4]
    c5ea:	2200      	movs	r2, #0
    c5ec:	2101      	movs	r1, #1
    c5ee:	6878      	ldr	r0, [r7, #4]
    c5f0:	4798      	blx	r3
		func = func->next;
    c5f2:	687b      	ldr	r3, [r7, #4]
    c5f4:	681b      	ldr	r3, [r3, #0]
    c5f6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c5f8:	687b      	ldr	r3, [r7, #4]
    c5fa:	2b00      	cmp	r3, #0
    c5fc:	d1f3      	bne.n	c5e6 <usbdc_unconfig+0xe>
	}
}
    c5fe:	bf00      	nop
    c600:	3708      	adds	r7, #8
    c602:	46bd      	mov	sp, r7
    c604:	bd80      	pop	{r7, pc}
    c606:	bf00      	nop
    c608:	20000b88 	.word	0x20000b88

0000c60c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c60c:	b580      	push	{r7, lr}
    c60e:	b088      	sub	sp, #32
    c610:	af00      	add	r7, sp, #0
    c612:	4603      	mov	r3, r0
    c614:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c616:	2300      	movs	r3, #0
    c618:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c61a:	23ff      	movs	r3, #255	; 0xff
    c61c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c61e:	79fb      	ldrb	r3, [r7, #7]
    c620:	2b00      	cmp	r3, #0
    c622:	d103      	bne.n	c62c <usbdc_set_config+0x20>
		usbdc_unconfig();
    c624:	4b2e      	ldr	r3, [pc, #184]	; (c6e0 <usbdc_set_config+0xd4>)
    c626:	4798      	blx	r3
		return true;
    c628:	2301      	movs	r3, #1
    c62a:	e055      	b.n	c6d8 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c62c:	69bb      	ldr	r3, [r7, #24]
    c62e:	2b00      	cmp	r3, #0
    c630:	d10a      	bne.n	c648 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c632:	4b2c      	ldr	r3, [pc, #176]	; (c6e4 <usbdc_set_config+0xd8>)
    c634:	681b      	ldr	r3, [r3, #0]
    c636:	6818      	ldr	r0, [r3, #0]
    c638:	4b2a      	ldr	r3, [pc, #168]	; (c6e4 <usbdc_set_config+0xd8>)
    c63a:	681b      	ldr	r3, [r3, #0]
    c63c:	685b      	ldr	r3, [r3, #4]
    c63e:	79fa      	ldrb	r2, [r7, #7]
    c640:	4619      	mov	r1, r3
    c642:	4b29      	ldr	r3, [pc, #164]	; (c6e8 <usbdc_set_config+0xdc>)
    c644:	4798      	blx	r3
    c646:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c648:	69bb      	ldr	r3, [r7, #24]
    c64a:	2b00      	cmp	r3, #0
    c64c:	d101      	bne.n	c652 <usbdc_set_config+0x46>
		return false;
    c64e:	2300      	movs	r3, #0
    c650:	e042      	b.n	c6d8 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c652:	69b8      	ldr	r0, [r7, #24]
    c654:	4b25      	ldr	r3, [pc, #148]	; (c6ec <usbdc_set_config+0xe0>)
    c656:	4798      	blx	r3
    c658:	4603      	mov	r3, r0
    c65a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c65c:	8abb      	ldrh	r3, [r7, #20]
    c65e:	69ba      	ldr	r2, [r7, #24]
    c660:	4413      	add	r3, r2
    c662:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c664:	693b      	ldr	r3, [r7, #16]
    c666:	2204      	movs	r2, #4
    c668:	4619      	mov	r1, r3
    c66a:	69b8      	ldr	r0, [r7, #24]
    c66c:	4b20      	ldr	r3, [pc, #128]	; (c6f0 <usbdc_set_config+0xe4>)
    c66e:	4798      	blx	r3
    c670:	4603      	mov	r3, r0
    c672:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c674:	e02c      	b.n	c6d0 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c676:	68fb      	ldr	r3, [r7, #12]
    c678:	3302      	adds	r3, #2
    c67a:	781b      	ldrb	r3, [r3, #0]
    c67c:	7dfa      	ldrb	r2, [r7, #23]
    c67e:	429a      	cmp	r2, r3
    c680:	d018      	beq.n	c6b4 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c682:	68fb      	ldr	r3, [r7, #12]
    c684:	789b      	ldrb	r3, [r3, #2]
    c686:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c688:	4b16      	ldr	r3, [pc, #88]	; (c6e4 <usbdc_set_config+0xd8>)
    c68a:	691b      	ldr	r3, [r3, #16]
    c68c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c68e:	e00c      	b.n	c6aa <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c690:	69fb      	ldr	r3, [r7, #28]
    c692:	685b      	ldr	r3, [r3, #4]
    c694:	f107 020c 	add.w	r2, r7, #12
    c698:	2100      	movs	r1, #0
    c69a:	69f8      	ldr	r0, [r7, #28]
    c69c:	4798      	blx	r3
    c69e:	4603      	mov	r3, r0
    c6a0:	2b00      	cmp	r3, #0
    c6a2:	d006      	beq.n	c6b2 <usbdc_set_config+0xa6>
					func = func->next;
    c6a4:	69fb      	ldr	r3, [r7, #28]
    c6a6:	681b      	ldr	r3, [r3, #0]
    c6a8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c6aa:	69fb      	ldr	r3, [r7, #28]
    c6ac:	2b00      	cmp	r3, #0
    c6ae:	d1ef      	bne.n	c690 <usbdc_set_config+0x84>
    c6b0:	e000      	b.n	c6b4 <usbdc_set_config+0xa8>
				} else {
					break;
    c6b2:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c6b4:	68fb      	ldr	r3, [r7, #12]
    c6b6:	4618      	mov	r0, r3
    c6b8:	4b0e      	ldr	r3, [pc, #56]	; (c6f4 <usbdc_set_config+0xe8>)
    c6ba:	4798      	blx	r3
    c6bc:	4603      	mov	r3, r0
    c6be:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c6c0:	68fb      	ldr	r3, [r7, #12]
    c6c2:	6939      	ldr	r1, [r7, #16]
    c6c4:	2204      	movs	r2, #4
    c6c6:	4618      	mov	r0, r3
    c6c8:	4b09      	ldr	r3, [pc, #36]	; (c6f0 <usbdc_set_config+0xe4>)
    c6ca:	4798      	blx	r3
    c6cc:	4603      	mov	r3, r0
    c6ce:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c6d0:	68fb      	ldr	r3, [r7, #12]
    c6d2:	2b00      	cmp	r3, #0
    c6d4:	d1cf      	bne.n	c676 <usbdc_set_config+0x6a>
	}
	return true;
    c6d6:	2301      	movs	r3, #1
}
    c6d8:	4618      	mov	r0, r3
    c6da:	3720      	adds	r7, #32
    c6dc:	46bd      	mov	sp, r7
    c6de:	bd80      	pop	{r7, pc}
    c6e0:	0000c5d9 	.word	0x0000c5d9
    c6e4:	20000b88 	.word	0x20000b88
    c6e8:	0000cf7d 	.word	0x0000cf7d
    c6ec:	0000c129 	.word	0x0000c129
    c6f0:	0000cebd 	.word	0x0000cebd
    c6f4:	0000c105 	.word	0x0000c105

0000c6f8 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c6f8:	b580      	push	{r7, lr}
    c6fa:	b082      	sub	sp, #8
    c6fc:	af00      	add	r7, sp, #0
    c6fe:	4603      	mov	r3, r0
    c700:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c702:	79fb      	ldrb	r3, [r7, #7]
    c704:	4618      	mov	r0, r3
    c706:	4b03      	ldr	r3, [pc, #12]	; (c714 <usbdc_set_address+0x1c>)
    c708:	4798      	blx	r3
}
    c70a:	bf00      	nop
    c70c:	3708      	adds	r7, #8
    c70e:	46bd      	mov	sp, r7
    c710:	bd80      	pop	{r7, pc}
    c712:	bf00      	nop
    c714:	0000345d 	.word	0x0000345d

0000c718 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c718:	b590      	push	{r4, r7, lr}
    c71a:	b087      	sub	sp, #28
    c71c:	af00      	add	r7, sp, #0
    c71e:	4603      	mov	r3, r0
    c720:	460a      	mov	r2, r1
    c722:	80fb      	strh	r3, [r7, #6]
    c724:	4613      	mov	r3, r2
    c726:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c728:	2300      	movs	r3, #0
    c72a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c72c:	693b      	ldr	r3, [r7, #16]
    c72e:	2b00      	cmp	r3, #0
    c730:	d10b      	bne.n	c74a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c732:	4b43      	ldr	r3, [pc, #268]	; (c840 <usbdc_set_interface+0x128>)
    c734:	681b      	ldr	r3, [r3, #0]
    c736:	6818      	ldr	r0, [r3, #0]
    c738:	4b41      	ldr	r3, [pc, #260]	; (c840 <usbdc_set_interface+0x128>)
    c73a:	681b      	ldr	r3, [r3, #0]
    c73c:	6859      	ldr	r1, [r3, #4]
    c73e:	4b40      	ldr	r3, [pc, #256]	; (c840 <usbdc_set_interface+0x128>)
    c740:	7edb      	ldrb	r3, [r3, #27]
    c742:	461a      	mov	r2, r3
    c744:	4b3f      	ldr	r3, [pc, #252]	; (c844 <usbdc_set_interface+0x12c>)
    c746:	4798      	blx	r3
    c748:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c74a:	693b      	ldr	r3, [r7, #16]
    c74c:	2b00      	cmp	r3, #0
    c74e:	d101      	bne.n	c754 <usbdc_set_interface+0x3c>
		return false;
    c750:	2300      	movs	r3, #0
    c752:	e071      	b.n	c838 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c754:	693b      	ldr	r3, [r7, #16]
    c756:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c758:	6938      	ldr	r0, [r7, #16]
    c75a:	4b3b      	ldr	r3, [pc, #236]	; (c848 <usbdc_set_interface+0x130>)
    c75c:	4798      	blx	r3
    c75e:	4603      	mov	r3, r0
    c760:	461a      	mov	r2, r3
    c762:	693b      	ldr	r3, [r7, #16]
    c764:	4413      	add	r3, r2
    c766:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c768:	68bb      	ldr	r3, [r7, #8]
    c76a:	68f9      	ldr	r1, [r7, #12]
    c76c:	2204      	movs	r2, #4
    c76e:	4618      	mov	r0, r3
    c770:	4b36      	ldr	r3, [pc, #216]	; (c84c <usbdc_set_interface+0x134>)
    c772:	4798      	blx	r3
    c774:	6138      	str	r0, [r7, #16]
    c776:	693b      	ldr	r3, [r7, #16]
    c778:	2b00      	cmp	r3, #0
    c77a:	d113      	bne.n	c7a4 <usbdc_set_interface+0x8c>
		return false;
    c77c:	2300      	movs	r3, #0
    c77e:	e05b      	b.n	c838 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c780:	68bb      	ldr	r3, [r7, #8]
    c782:	4618      	mov	r0, r3
    c784:	4b32      	ldr	r3, [pc, #200]	; (c850 <usbdc_set_interface+0x138>)
    c786:	4798      	blx	r3
    c788:	4603      	mov	r3, r0
    c78a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c78c:	68bb      	ldr	r3, [r7, #8]
    c78e:	68f9      	ldr	r1, [r7, #12]
    c790:	2204      	movs	r2, #4
    c792:	4618      	mov	r0, r3
    c794:	4b2d      	ldr	r3, [pc, #180]	; (c84c <usbdc_set_interface+0x134>)
    c796:	4798      	blx	r3
    c798:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c79a:	693b      	ldr	r3, [r7, #16]
    c79c:	2b00      	cmp	r3, #0
    c79e:	d101      	bne.n	c7a4 <usbdc_set_interface+0x8c>
			return false;
    c7a0:	2300      	movs	r3, #0
    c7a2:	e049      	b.n	c838 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c7a4:	693b      	ldr	r3, [r7, #16]
    c7a6:	3302      	adds	r3, #2
    c7a8:	781b      	ldrb	r3, [r3, #0]
    c7aa:	b29b      	uxth	r3, r3
    c7ac:	88ba      	ldrh	r2, [r7, #4]
    c7ae:	429a      	cmp	r2, r3
    c7b0:	d1e6      	bne.n	c780 <usbdc_set_interface+0x68>
    c7b2:	693b      	ldr	r3, [r7, #16]
    c7b4:	3303      	adds	r3, #3
    c7b6:	781b      	ldrb	r3, [r3, #0]
    c7b8:	b29b      	uxth	r3, r3
    c7ba:	88fa      	ldrh	r2, [r7, #6]
    c7bc:	429a      	cmp	r2, r3
    c7be:	d1df      	bne.n	c780 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c7c0:	693b      	ldr	r3, [r7, #16]
    c7c2:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c7c4:	4b1e      	ldr	r3, [pc, #120]	; (c840 <usbdc_set_interface+0x128>)
    c7c6:	691b      	ldr	r3, [r3, #16]
    c7c8:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c7ca:	e031      	b.n	c830 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c7cc:	697b      	ldr	r3, [r7, #20]
    c7ce:	685b      	ldr	r3, [r3, #4]
    c7d0:	f107 0208 	add.w	r2, r7, #8
    c7d4:	2101      	movs	r1, #1
    c7d6:	6978      	ldr	r0, [r7, #20]
    c7d8:	4798      	blx	r3
    c7da:	4603      	mov	r3, r0
    c7dc:	2b00      	cmp	r3, #0
    c7de:	d003      	beq.n	c7e8 <usbdc_set_interface+0xd0>
			func = func->next;
    c7e0:	697b      	ldr	r3, [r7, #20]
    c7e2:	681b      	ldr	r3, [r3, #0]
    c7e4:	617b      	str	r3, [r7, #20]
    c7e6:	e023      	b.n	c830 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c7e8:	697b      	ldr	r3, [r7, #20]
    c7ea:	685b      	ldr	r3, [r3, #4]
    c7ec:	f107 0208 	add.w	r2, r7, #8
    c7f0:	2100      	movs	r1, #0
    c7f2:	6978      	ldr	r0, [r7, #20]
    c7f4:	4798      	blx	r3
    c7f6:	4603      	mov	r3, r0
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	d117      	bne.n	c82c <usbdc_set_interface+0x114>
			if (alt_set) {
    c7fc:	88fb      	ldrh	r3, [r7, #6]
    c7fe:	2b00      	cmp	r3, #0
    c800:	d00c      	beq.n	c81c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c802:	4b0f      	ldr	r3, [pc, #60]	; (c840 <usbdc_set_interface+0x128>)
    c804:	7f5b      	ldrb	r3, [r3, #29]
    c806:	b25a      	sxtb	r2, r3
    c808:	88bb      	ldrh	r3, [r7, #4]
    c80a:	2101      	movs	r1, #1
    c80c:	fa01 f303 	lsl.w	r3, r1, r3
    c810:	b25b      	sxtb	r3, r3
    c812:	4313      	orrs	r3, r2
    c814:	b25b      	sxtb	r3, r3
    c816:	b2da      	uxtb	r2, r3
    c818:	4b09      	ldr	r3, [pc, #36]	; (c840 <usbdc_set_interface+0x128>)
    c81a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c81c:	2300      	movs	r3, #0
    c81e:	2200      	movs	r2, #0
    c820:	2100      	movs	r1, #0
    c822:	2000      	movs	r0, #0
    c824:	4c0b      	ldr	r4, [pc, #44]	; (c854 <usbdc_set_interface+0x13c>)
    c826:	47a0      	blx	r4
			return true;
    c828:	2301      	movs	r3, #1
    c82a:	e005      	b.n	c838 <usbdc_set_interface+0x120>
		} else {
			return false;
    c82c:	2300      	movs	r3, #0
    c82e:	e003      	b.n	c838 <usbdc_set_interface+0x120>
	while (NULL != func) {
    c830:	697b      	ldr	r3, [r7, #20]
    c832:	2b00      	cmp	r3, #0
    c834:	d1ca      	bne.n	c7cc <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c836:	2300      	movs	r3, #0
}
    c838:	4618      	mov	r0, r3
    c83a:	371c      	adds	r7, #28
    c83c:	46bd      	mov	sp, r7
    c83e:	bd90      	pop	{r4, r7, pc}
    c840:	20000b88 	.word	0x20000b88
    c844:	0000cf7d 	.word	0x0000cf7d
    c848:	0000c129 	.word	0x0000c129
    c84c:	0000cebd 	.word	0x0000cebd
    c850:	0000c105 	.word	0x0000c105
    c854:	0000cc2d 	.word	0x0000cc2d

0000c858 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c858:	b590      	push	{r4, r7, lr}
    c85a:	b083      	sub	sp, #12
    c85c:	af00      	add	r7, sp, #0
    c85e:	4603      	mov	r3, r0
    c860:	6039      	str	r1, [r7, #0]
    c862:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c864:	683b      	ldr	r3, [r7, #0]
    c866:	785b      	ldrb	r3, [r3, #1]
    c868:	3b01      	subs	r3, #1
    c86a:	2b0a      	cmp	r3, #10
    c86c:	d85b      	bhi.n	c926 <usbdc_set_req+0xce>
    c86e:	a201      	add	r2, pc, #4	; (adr r2, c874 <usbdc_set_req+0x1c>)
    c870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c874:	0000c8f3 	.word	0x0000c8f3
    c878:	0000c927 	.word	0x0000c927
    c87c:	0000c901 	.word	0x0000c901
    c880:	0000c927 	.word	0x0000c927
    c884:	0000c8a1 	.word	0x0000c8a1
    c888:	0000c927 	.word	0x0000c927
    c88c:	0000c927 	.word	0x0000c927
    c890:	0000c927 	.word	0x0000c927
    c894:	0000c8bb 	.word	0x0000c8bb
    c898:	0000c927 	.word	0x0000c927
    c89c:	0000c90f 	.word	0x0000c90f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c8a0:	79f8      	ldrb	r0, [r7, #7]
    c8a2:	2301      	movs	r3, #1
    c8a4:	2200      	movs	r2, #0
    c8a6:	2100      	movs	r1, #0
    c8a8:	4c21      	ldr	r4, [pc, #132]	; (c930 <usbdc_set_req+0xd8>)
    c8aa:	47a0      	blx	r4
    c8ac:	4603      	mov	r3, r0
    c8ae:	2b00      	cmp	r3, #0
    c8b0:	bf0c      	ite	eq
    c8b2:	2301      	moveq	r3, #1
    c8b4:	2300      	movne	r3, #0
    c8b6:	b2db      	uxtb	r3, r3
    c8b8:	e036      	b.n	c928 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c8ba:	683b      	ldr	r3, [r7, #0]
    c8bc:	885b      	ldrh	r3, [r3, #2]
    c8be:	b29b      	uxth	r3, r3
    c8c0:	b2db      	uxtb	r3, r3
    c8c2:	4618      	mov	r0, r3
    c8c4:	4b1b      	ldr	r3, [pc, #108]	; (c934 <usbdc_set_req+0xdc>)
    c8c6:	4798      	blx	r3
    c8c8:	4603      	mov	r3, r0
    c8ca:	f083 0301 	eor.w	r3, r3, #1
    c8ce:	b2db      	uxtb	r3, r3
    c8d0:	2b00      	cmp	r3, #0
    c8d2:	d001      	beq.n	c8d8 <usbdc_set_req+0x80>
			return false;
    c8d4:	2300      	movs	r3, #0
    c8d6:	e027      	b.n	c928 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c8d8:	79f8      	ldrb	r0, [r7, #7]
    c8da:	2301      	movs	r3, #1
    c8dc:	2200      	movs	r2, #0
    c8de:	2100      	movs	r1, #0
    c8e0:	4c13      	ldr	r4, [pc, #76]	; (c930 <usbdc_set_req+0xd8>)
    c8e2:	47a0      	blx	r4
    c8e4:	4603      	mov	r3, r0
    c8e6:	2b00      	cmp	r3, #0
    c8e8:	bf0c      	ite	eq
    c8ea:	2301      	moveq	r3, #1
    c8ec:	2300      	movne	r3, #0
    c8ee:	b2db      	uxtb	r3, r3
    c8f0:	e01a      	b.n	c928 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    c8f2:	79fb      	ldrb	r3, [r7, #7]
    c8f4:	6839      	ldr	r1, [r7, #0]
    c8f6:	4618      	mov	r0, r3
    c8f8:	4b0f      	ldr	r3, [pc, #60]	; (c938 <usbdc_set_req+0xe0>)
    c8fa:	4798      	blx	r3
    c8fc:	4603      	mov	r3, r0
    c8fe:	e013      	b.n	c928 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    c900:	79fb      	ldrb	r3, [r7, #7]
    c902:	6839      	ldr	r1, [r7, #0]
    c904:	4618      	mov	r0, r3
    c906:	4b0d      	ldr	r3, [pc, #52]	; (c93c <usbdc_set_req+0xe4>)
    c908:	4798      	blx	r3
    c90a:	4603      	mov	r3, r0
    c90c:	e00c      	b.n	c928 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    c90e:	683b      	ldr	r3, [r7, #0]
    c910:	885b      	ldrh	r3, [r3, #2]
    c912:	b29a      	uxth	r2, r3
    c914:	683b      	ldr	r3, [r7, #0]
    c916:	889b      	ldrh	r3, [r3, #4]
    c918:	b29b      	uxth	r3, r3
    c91a:	4619      	mov	r1, r3
    c91c:	4610      	mov	r0, r2
    c91e:	4b08      	ldr	r3, [pc, #32]	; (c940 <usbdc_set_req+0xe8>)
    c920:	4798      	blx	r3
    c922:	4603      	mov	r3, r0
    c924:	e000      	b.n	c928 <usbdc_set_req+0xd0>
	default:
		return false;
    c926:	2300      	movs	r3, #0
	}
}
    c928:	4618      	mov	r0, r3
    c92a:	370c      	adds	r7, #12
    c92c:	46bd      	mov	sp, r7
    c92e:	bd90      	pop	{r4, r7, pc}
    c930:	0000cc2d 	.word	0x0000cc2d
    c934:	0000c60d 	.word	0x0000c60d
    c938:	0000c529 	.word	0x0000c529
    c93c:	0000c581 	.word	0x0000c581
    c940:	0000c719 	.word	0x0000c719

0000c944 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c944:	b580      	push	{r7, lr}
    c946:	b082      	sub	sp, #8
    c948:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c94a:	4b0a      	ldr	r3, [pc, #40]	; (c974 <usbdc_sof_notify+0x30>)
    c94c:	685b      	ldr	r3, [r3, #4]
    c94e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c950:	e009      	b.n	c966 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c952:	687b      	ldr	r3, [r7, #4]
    c954:	685b      	ldr	r3, [r3, #4]
    c956:	2b00      	cmp	r3, #0
    c958:	d002      	beq.n	c960 <usbdc_sof_notify+0x1c>
			sof->cb();
    c95a:	687b      	ldr	r3, [r7, #4]
    c95c:	685b      	ldr	r3, [r3, #4]
    c95e:	4798      	blx	r3
		}
		sof = sof->next;
    c960:	687b      	ldr	r3, [r7, #4]
    c962:	681b      	ldr	r3, [r3, #0]
    c964:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c966:	687b      	ldr	r3, [r7, #4]
    c968:	2b00      	cmp	r3, #0
    c96a:	d1f2      	bne.n	c952 <usbdc_sof_notify+0xe>
	}
}
    c96c:	bf00      	nop
    c96e:	3708      	adds	r7, #8
    c970:	46bd      	mov	sp, r7
    c972:	bd80      	pop	{r7, pc}
    c974:	20000b88 	.word	0x20000b88

0000c978 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c978:	b580      	push	{r7, lr}
    c97a:	b084      	sub	sp, #16
    c97c:	af00      	add	r7, sp, #0
    c97e:	4603      	mov	r3, r0
    c980:	6039      	str	r1, [r7, #0]
    c982:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c984:	4b0b      	ldr	r3, [pc, #44]	; (c9b4 <usbdc_change_notify+0x3c>)
    c986:	68db      	ldr	r3, [r3, #12]
    c988:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c98a:	e00c      	b.n	c9a6 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c98c:	68fb      	ldr	r3, [r7, #12]
    c98e:	685b      	ldr	r3, [r3, #4]
    c990:	2b00      	cmp	r3, #0
    c992:	d005      	beq.n	c9a0 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c994:	68fb      	ldr	r3, [r7, #12]
    c996:	685b      	ldr	r3, [r3, #4]
    c998:	79fa      	ldrb	r2, [r7, #7]
    c99a:	6839      	ldr	r1, [r7, #0]
    c99c:	4610      	mov	r0, r2
    c99e:	4798      	blx	r3
		}
		cg = cg->next;
    c9a0:	68fb      	ldr	r3, [r7, #12]
    c9a2:	681b      	ldr	r3, [r3, #0]
    c9a4:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c9a6:	68fb      	ldr	r3, [r7, #12]
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	d1ef      	bne.n	c98c <usbdc_change_notify+0x14>
	}
}
    c9ac:	bf00      	nop
    c9ae:	3710      	adds	r7, #16
    c9b0:	46bd      	mov	sp, r7
    c9b2:	bd80      	pop	{r7, pc}
    c9b4:	20000b88 	.word	0x20000b88

0000c9b8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c9b8:	b580      	push	{r7, lr}
    c9ba:	b084      	sub	sp, #16
    c9bc:	af00      	add	r7, sp, #0
    c9be:	4603      	mov	r3, r0
    c9c0:	6039      	str	r1, [r7, #0]
    c9c2:	71fb      	strb	r3, [r7, #7]
    c9c4:	4613      	mov	r3, r2
    c9c6:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c9c8:	4b12      	ldr	r3, [pc, #72]	; (ca14 <usbdc_request_handler+0x5c>)
    c9ca:	689b      	ldr	r3, [r3, #8]
    c9cc:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c9ce:	e019      	b.n	ca04 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c9d0:	68fb      	ldr	r3, [r7, #12]
    c9d2:	685b      	ldr	r3, [r3, #4]
    c9d4:	2b00      	cmp	r3, #0
    c9d6:	d012      	beq.n	c9fe <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c9d8:	68fb      	ldr	r3, [r7, #12]
    c9da:	685b      	ldr	r3, [r3, #4]
    c9dc:	79ba      	ldrb	r2, [r7, #6]
    c9de:	79f8      	ldrb	r0, [r7, #7]
    c9e0:	6839      	ldr	r1, [r7, #0]
    c9e2:	4798      	blx	r3
    c9e4:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c9e6:	68bb      	ldr	r3, [r7, #8]
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	d101      	bne.n	c9f0 <usbdc_request_handler+0x38>
				return true;
    c9ec:	2301      	movs	r3, #1
    c9ee:	e00d      	b.n	ca0c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c9f0:	68bb      	ldr	r3, [r7, #8]
    c9f2:	f113 0f0a 	cmn.w	r3, #10
    c9f6:	d002      	beq.n	c9fe <usbdc_request_handler+0x46>
				return -1;
    c9f8:	f04f 33ff 	mov.w	r3, #4294967295
    c9fc:	e006      	b.n	ca0c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c9fe:	68fb      	ldr	r3, [r7, #12]
    ca00:	681b      	ldr	r3, [r3, #0]
    ca02:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    ca04:	68fb      	ldr	r3, [r7, #12]
    ca06:	2b00      	cmp	r3, #0
    ca08:	d1e2      	bne.n	c9d0 <usbdc_request_handler+0x18>
	}
	return false;
    ca0a:	2300      	movs	r3, #0
}
    ca0c:	4618      	mov	r0, r3
    ca0e:	3710      	adds	r7, #16
    ca10:	46bd      	mov	sp, r7
    ca12:	bd80      	pop	{r7, pc}
    ca14:	20000b88 	.word	0x20000b88

0000ca18 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    ca18:	b580      	push	{r7, lr}
    ca1a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    ca1c:	4b01      	ldr	r3, [pc, #4]	; (ca24 <usbd_sof_cb+0xc>)
    ca1e:	4798      	blx	r3
}
    ca20:	bf00      	nop
    ca22:	bd80      	pop	{r7, pc}
    ca24:	0000c945 	.word	0x0000c945

0000ca28 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    ca28:	b580      	push	{r7, lr}
    ca2a:	b082      	sub	sp, #8
    ca2c:	af00      	add	r7, sp, #0
    ca2e:	4603      	mov	r3, r0
    ca30:	6039      	str	r1, [r7, #0]
    ca32:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    ca34:	79fb      	ldrb	r3, [r7, #7]
    ca36:	2200      	movs	r2, #0
    ca38:	6839      	ldr	r1, [r7, #0]
    ca3a:	4618      	mov	r0, r3
    ca3c:	4b14      	ldr	r3, [pc, #80]	; (ca90 <usbdc_cb_ctl_req+0x68>)
    ca3e:	4798      	blx	r3
    ca40:	4603      	mov	r3, r0
    ca42:	f1b3 3fff 	cmp.w	r3, #4294967295
    ca46:	d00b      	beq.n	ca60 <usbdc_cb_ctl_req+0x38>
    ca48:	2b01      	cmp	r3, #1
    ca4a:	d007      	beq.n	ca5c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    ca4c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ca4e:	683b      	ldr	r3, [r7, #0]
    ca50:	781b      	ldrb	r3, [r3, #0]
    ca52:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    ca56:	2b00      	cmp	r3, #0
    ca58:	d007      	beq.n	ca6a <usbdc_cb_ctl_req+0x42>
    ca5a:	e003      	b.n	ca64 <usbdc_cb_ctl_req+0x3c>
		return true;
    ca5c:	2301      	movs	r3, #1
    ca5e:	e013      	b.n	ca88 <usbdc_cb_ctl_req+0x60>
		return false;
    ca60:	2300      	movs	r3, #0
    ca62:	e011      	b.n	ca88 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ca64:	2b80      	cmp	r3, #128	; 0x80
    ca66:	d007      	beq.n	ca78 <usbdc_cb_ctl_req+0x50>
    ca68:	e00d      	b.n	ca86 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    ca6a:	79fb      	ldrb	r3, [r7, #7]
    ca6c:	6839      	ldr	r1, [r7, #0]
    ca6e:	4618      	mov	r0, r3
    ca70:	4b08      	ldr	r3, [pc, #32]	; (ca94 <usbdc_cb_ctl_req+0x6c>)
    ca72:	4798      	blx	r3
    ca74:	4603      	mov	r3, r0
    ca76:	e007      	b.n	ca88 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    ca78:	79fb      	ldrb	r3, [r7, #7]
    ca7a:	6839      	ldr	r1, [r7, #0]
    ca7c:	4618      	mov	r0, r3
    ca7e:	4b06      	ldr	r3, [pc, #24]	; (ca98 <usbdc_cb_ctl_req+0x70>)
    ca80:	4798      	blx	r3
    ca82:	4603      	mov	r3, r0
    ca84:	e000      	b.n	ca88 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    ca86:	2300      	movs	r3, #0
	}
}
    ca88:	4618      	mov	r0, r3
    ca8a:	3708      	adds	r7, #8
    ca8c:	46bd      	mov	sp, r7
    ca8e:	bd80      	pop	{r7, pc}
    ca90:	0000c9b9 	.word	0x0000c9b9
    ca94:	0000c859 	.word	0x0000c859
    ca98:	0000c481 	.word	0x0000c481

0000ca9c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    ca9c:	b580      	push	{r7, lr}
    ca9e:	b082      	sub	sp, #8
    caa0:	af00      	add	r7, sp, #0
    caa2:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    caa4:	687b      	ldr	r3, [r7, #4]
    caa6:	781b      	ldrb	r3, [r3, #0]
    caa8:	2b00      	cmp	r3, #0
    caaa:	d135      	bne.n	cb18 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    caac:	687b      	ldr	r3, [r7, #4]
    caae:	785b      	ldrb	r3, [r3, #1]
    cab0:	2b05      	cmp	r3, #5
    cab2:	d019      	beq.n	cae8 <usbdc_ctrl_status_end+0x4c>
    cab4:	2b09      	cmp	r3, #9
    cab6:	d000      	beq.n	caba <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    cab8:	e02f      	b.n	cb1a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    caba:	687b      	ldr	r3, [r7, #4]
    cabc:	885b      	ldrh	r3, [r3, #2]
    cabe:	b29b      	uxth	r3, r3
    cac0:	b2da      	uxtb	r2, r3
    cac2:	4b17      	ldr	r3, [pc, #92]	; (cb20 <usbdc_ctrl_status_end+0x84>)
    cac4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cac6:	687b      	ldr	r3, [r7, #4]
    cac8:	885b      	ldrh	r3, [r3, #2]
    caca:	b29b      	uxth	r3, r3
    cacc:	2b00      	cmp	r3, #0
    cace:	d001      	beq.n	cad4 <usbdc_ctrl_status_end+0x38>
    cad0:	2204      	movs	r2, #4
    cad2:	e000      	b.n	cad6 <usbdc_ctrl_status_end+0x3a>
    cad4:	2203      	movs	r2, #3
    cad6:	4b12      	ldr	r3, [pc, #72]	; (cb20 <usbdc_ctrl_status_end+0x84>)
    cad8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cada:	4b11      	ldr	r3, [pc, #68]	; (cb20 <usbdc_ctrl_status_end+0x84>)
    cadc:	7e9b      	ldrb	r3, [r3, #26]
    cade:	4619      	mov	r1, r3
    cae0:	2001      	movs	r0, #1
    cae2:	4b10      	ldr	r3, [pc, #64]	; (cb24 <usbdc_ctrl_status_end+0x88>)
    cae4:	4798      	blx	r3
		break;
    cae6:	e018      	b.n	cb1a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    cae8:	687b      	ldr	r3, [r7, #4]
    caea:	885b      	ldrh	r3, [r3, #2]
    caec:	b29b      	uxth	r3, r3
    caee:	b2db      	uxtb	r3, r3
    caf0:	4618      	mov	r0, r3
    caf2:	4b0d      	ldr	r3, [pc, #52]	; (cb28 <usbdc_ctrl_status_end+0x8c>)
    caf4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    caf6:	687b      	ldr	r3, [r7, #4]
    caf8:	885b      	ldrh	r3, [r3, #2]
    cafa:	b29b      	uxth	r3, r3
    cafc:	2b00      	cmp	r3, #0
    cafe:	d001      	beq.n	cb04 <usbdc_ctrl_status_end+0x68>
    cb00:	2203      	movs	r2, #3
    cb02:	e000      	b.n	cb06 <usbdc_ctrl_status_end+0x6a>
    cb04:	2202      	movs	r2, #2
    cb06:	4b06      	ldr	r3, [pc, #24]	; (cb20 <usbdc_ctrl_status_end+0x84>)
    cb08:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cb0a:	4b05      	ldr	r3, [pc, #20]	; (cb20 <usbdc_ctrl_status_end+0x84>)
    cb0c:	7e9b      	ldrb	r3, [r3, #26]
    cb0e:	4619      	mov	r1, r3
    cb10:	2001      	movs	r0, #1
    cb12:	4b04      	ldr	r3, [pc, #16]	; (cb24 <usbdc_ctrl_status_end+0x88>)
    cb14:	4798      	blx	r3
		break;
    cb16:	e000      	b.n	cb1a <usbdc_ctrl_status_end+0x7e>
		return;
    cb18:	bf00      	nop
	}
}
    cb1a:	3708      	adds	r7, #8
    cb1c:	46bd      	mov	sp, r7
    cb1e:	bd80      	pop	{r7, pc}
    cb20:	20000b88 	.word	0x20000b88
    cb24:	0000c979 	.word	0x0000c979
    cb28:	0000c6f9 	.word	0x0000c6f9

0000cb2c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    cb2c:	b580      	push	{r7, lr}
    cb2e:	b082      	sub	sp, #8
    cb30:	af00      	add	r7, sp, #0
    cb32:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    cb34:	2201      	movs	r2, #1
    cb36:	6879      	ldr	r1, [r7, #4]
    cb38:	2000      	movs	r0, #0
    cb3a:	4b03      	ldr	r3, [pc, #12]	; (cb48 <usbdc_ctrl_data_end+0x1c>)
    cb3c:	4798      	blx	r3
	return false;
    cb3e:	2300      	movs	r3, #0
}
    cb40:	4618      	mov	r0, r3
    cb42:	3708      	adds	r7, #8
    cb44:	46bd      	mov	sp, r7
    cb46:	bd80      	pop	{r7, pc}
    cb48:	0000c9b9 	.word	0x0000c9b9

0000cb4c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    cb4c:	b580      	push	{r7, lr}
    cb4e:	b082      	sub	sp, #8
    cb50:	af00      	add	r7, sp, #0
    cb52:	4603      	mov	r3, r0
    cb54:	603a      	str	r2, [r7, #0]
    cb56:	71fb      	strb	r3, [r7, #7]
    cb58:	460b      	mov	r3, r1
    cb5a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cb5c:	79bb      	ldrb	r3, [r7, #6]
    cb5e:	2b00      	cmp	r3, #0
    cb60:	d002      	beq.n	cb68 <usbdc_cb_ctl_done+0x1c>
    cb62:	2b01      	cmp	r3, #1
    cb64:	d004      	beq.n	cb70 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cb66:	e008      	b.n	cb7a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    cb68:	6838      	ldr	r0, [r7, #0]
    cb6a:	4b06      	ldr	r3, [pc, #24]	; (cb84 <usbdc_cb_ctl_done+0x38>)
    cb6c:	4798      	blx	r3
		break;
    cb6e:	e004      	b.n	cb7a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cb70:	6838      	ldr	r0, [r7, #0]
    cb72:	4b05      	ldr	r3, [pc, #20]	; (cb88 <usbdc_cb_ctl_done+0x3c>)
    cb74:	4798      	blx	r3
    cb76:	4603      	mov	r3, r0
    cb78:	e000      	b.n	cb7c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    cb7a:	2300      	movs	r3, #0
}
    cb7c:	4618      	mov	r0, r3
    cb7e:	3708      	adds	r7, #8
    cb80:	46bd      	mov	sp, r7
    cb82:	bd80      	pop	{r7, pc}
    cb84:	0000ca9d 	.word	0x0000ca9d
    cb88:	0000cb2d 	.word	0x0000cb2d

0000cb8c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    cb8c:	b580      	push	{r7, lr}
    cb8e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    cb90:	4b10      	ldr	r3, [pc, #64]	; (cbd4 <usbdc_reset+0x48>)
    cb92:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cb94:	4b10      	ldr	r3, [pc, #64]	; (cbd8 <usbdc_reset+0x4c>)
    cb96:	2202      	movs	r2, #2
    cb98:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    cb9a:	4b0f      	ldr	r3, [pc, #60]	; (cbd8 <usbdc_reset+0x4c>)
    cb9c:	2200      	movs	r2, #0
    cb9e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cba0:	4b0d      	ldr	r3, [pc, #52]	; (cbd8 <usbdc_reset+0x4c>)
    cba2:	2200      	movs	r2, #0
    cba4:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cba6:	2000      	movs	r0, #0
    cba8:	4b0c      	ldr	r3, [pc, #48]	; (cbdc <usbdc_reset+0x50>)
    cbaa:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    cbac:	4b0a      	ldr	r3, [pc, #40]	; (cbd8 <usbdc_reset+0x4c>)
    cbae:	7f1b      	ldrb	r3, [r3, #28]
    cbb0:	4618      	mov	r0, r3
    cbb2:	4b0b      	ldr	r3, [pc, #44]	; (cbe0 <usbdc_reset+0x54>)
    cbb4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cbb6:	4a0b      	ldr	r2, [pc, #44]	; (cbe4 <usbdc_reset+0x58>)
    cbb8:	2100      	movs	r1, #0
    cbba:	2000      	movs	r0, #0
    cbbc:	4b0a      	ldr	r3, [pc, #40]	; (cbe8 <usbdc_reset+0x5c>)
    cbbe:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cbc0:	4a0a      	ldr	r2, [pc, #40]	; (cbec <usbdc_reset+0x60>)
    cbc2:	2102      	movs	r1, #2
    cbc4:	2000      	movs	r0, #0
    cbc6:	4b08      	ldr	r3, [pc, #32]	; (cbe8 <usbdc_reset+0x5c>)
    cbc8:	4798      	blx	r3
	usb_d_ep_enable(0);
    cbca:	2000      	movs	r0, #0
    cbcc:	4b08      	ldr	r3, [pc, #32]	; (cbf0 <usbdc_reset+0x64>)
    cbce:	4798      	blx	r3
}
    cbd0:	bf00      	nop
    cbd2:	bd80      	pop	{r7, pc}
    cbd4:	0000c5d9 	.word	0x0000c5d9
    cbd8:	20000b88 	.word	0x20000b88
    cbdc:	00003541 	.word	0x00003541
    cbe0:	0000347d 	.word	0x0000347d
    cbe4:	0000ca29 	.word	0x0000ca29
    cbe8:	00003895 	.word	0x00003895
    cbec:	0000cb4d 	.word	0x0000cb4d
    cbf0:	00003591 	.word	0x00003591

0000cbf4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cbf4:	b580      	push	{r7, lr}
    cbf6:	b082      	sub	sp, #8
    cbf8:	af00      	add	r7, sp, #0
    cbfa:	4603      	mov	r3, r0
    cbfc:	6039      	str	r1, [r7, #0]
    cbfe:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cc00:	79fb      	ldrb	r3, [r7, #7]
    cc02:	2b00      	cmp	r3, #0
    cc04:	d002      	beq.n	cc0c <usbd_event_cb+0x18>
    cc06:	2b01      	cmp	r3, #1
    cc08:	d005      	beq.n	cc16 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cc0a:	e007      	b.n	cc1c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cc0c:	6839      	ldr	r1, [r7, #0]
    cc0e:	2000      	movs	r0, #0
    cc10:	4b04      	ldr	r3, [pc, #16]	; (cc24 <usbd_event_cb+0x30>)
    cc12:	4798      	blx	r3
		break;
    cc14:	e002      	b.n	cc1c <usbd_event_cb+0x28>
		usbdc_reset();
    cc16:	4b04      	ldr	r3, [pc, #16]	; (cc28 <usbd_event_cb+0x34>)
    cc18:	4798      	blx	r3
		break;
    cc1a:	bf00      	nop
	}
}
    cc1c:	bf00      	nop
    cc1e:	3708      	adds	r7, #8
    cc20:	46bd      	mov	sp, r7
    cc22:	bd80      	pop	{r7, pc}
    cc24:	0000c979 	.word	0x0000c979
    cc28:	0000cb8d 	.word	0x0000cb8d

0000cc2c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cc2c:	b580      	push	{r7, lr}
    cc2e:	b088      	sub	sp, #32
    cc30:	af00      	add	r7, sp, #0
    cc32:	60b9      	str	r1, [r7, #8]
    cc34:	607a      	str	r2, [r7, #4]
    cc36:	461a      	mov	r2, r3
    cc38:	4603      	mov	r3, r0
    cc3a:	73fb      	strb	r3, [r7, #15]
    cc3c:	4613      	mov	r3, r2
    cc3e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cc40:	68bb      	ldr	r3, [r7, #8]
    cc42:	617b      	str	r3, [r7, #20]
    cc44:	687b      	ldr	r3, [r7, #4]
    cc46:	61bb      	str	r3, [r7, #24]
    cc48:	7bfb      	ldrb	r3, [r7, #15]
    cc4a:	773b      	strb	r3, [r7, #28]
    cc4c:	7bbb      	ldrb	r3, [r7, #14]
    cc4e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cc50:	f107 0314 	add.w	r3, r7, #20
    cc54:	4618      	mov	r0, r3
    cc56:	4b03      	ldr	r3, [pc, #12]	; (cc64 <usbdc_xfer+0x38>)
    cc58:	4798      	blx	r3
    cc5a:	4603      	mov	r3, r0
}
    cc5c:	4618      	mov	r0, r3
    cc5e:	3720      	adds	r7, #32
    cc60:	46bd      	mov	sp, r7
    cc62:	bd80      	pop	{r7, pc}
    cc64:	00003601 	.word	0x00003601

0000cc68 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    cc68:	b580      	push	{r7, lr}
    cc6a:	b082      	sub	sp, #8
    cc6c:	af00      	add	r7, sp, #0
    cc6e:	4603      	mov	r3, r0
    cc70:	6039      	str	r1, [r7, #0]
    cc72:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cc74:	79fb      	ldrb	r3, [r7, #7]
    cc76:	2b01      	cmp	r3, #1
    cc78:	d009      	beq.n	cc8e <usbdc_register_handler+0x26>
    cc7a:	2b02      	cmp	r3, #2
    cc7c:	d00c      	beq.n	cc98 <usbdc_register_handler+0x30>
    cc7e:	2b00      	cmp	r3, #0
    cc80:	d000      	beq.n	cc84 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    cc82:	e00e      	b.n	cca2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    cc84:	6839      	ldr	r1, [r7, #0]
    cc86:	4809      	ldr	r0, [pc, #36]	; (ccac <usbdc_register_handler+0x44>)
    cc88:	4b09      	ldr	r3, [pc, #36]	; (ccb0 <usbdc_register_handler+0x48>)
    cc8a:	4798      	blx	r3
		break;
    cc8c:	e009      	b.n	cca2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    cc8e:	6839      	ldr	r1, [r7, #0]
    cc90:	4808      	ldr	r0, [pc, #32]	; (ccb4 <usbdc_register_handler+0x4c>)
    cc92:	4b07      	ldr	r3, [pc, #28]	; (ccb0 <usbdc_register_handler+0x48>)
    cc94:	4798      	blx	r3
		break;
    cc96:	e004      	b.n	cca2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cc98:	6839      	ldr	r1, [r7, #0]
    cc9a:	4807      	ldr	r0, [pc, #28]	; (ccb8 <usbdc_register_handler+0x50>)
    cc9c:	4b04      	ldr	r3, [pc, #16]	; (ccb0 <usbdc_register_handler+0x48>)
    cc9e:	4798      	blx	r3
		break;
    cca0:	bf00      	nop
	}
}
    cca2:	bf00      	nop
    cca4:	3708      	adds	r7, #8
    cca6:	46bd      	mov	sp, r7
    cca8:	bd80      	pop	{r7, pc}
    ccaa:	bf00      	nop
    ccac:	20000b8c 	.word	0x20000b8c
    ccb0:	000039ed 	.word	0x000039ed
    ccb4:	20000b90 	.word	0x20000b90
    ccb8:	20000b94 	.word	0x20000b94

0000ccbc <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    ccbc:	b580      	push	{r7, lr}
    ccbe:	b084      	sub	sp, #16
    ccc0:	af00      	add	r7, sp, #0
    ccc2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    ccc4:	687b      	ldr	r3, [r7, #4]
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	bf14      	ite	ne
    ccca:	2301      	movne	r3, #1
    cccc:	2300      	moveq	r3, #0
    ccce:	b2db      	uxtb	r3, r3
    ccd0:	f240 3255 	movw	r2, #853	; 0x355
    ccd4:	4910      	ldr	r1, [pc, #64]	; (cd18 <usbdc_init+0x5c>)
    ccd6:	4618      	mov	r0, r3
    ccd8:	4b10      	ldr	r3, [pc, #64]	; (cd1c <usbdc_init+0x60>)
    ccda:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    ccdc:	4b10      	ldr	r3, [pc, #64]	; (cd20 <usbdc_init+0x64>)
    ccde:	4798      	blx	r3
    cce0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    cce2:	68fb      	ldr	r3, [r7, #12]
    cce4:	2b00      	cmp	r3, #0
    cce6:	da01      	bge.n	ccec <usbdc_init+0x30>
		return rc;
    cce8:	68fb      	ldr	r3, [r7, #12]
    ccea:	e010      	b.n	cd0e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    ccec:	2220      	movs	r2, #32
    ccee:	2100      	movs	r1, #0
    ccf0:	480c      	ldr	r0, [pc, #48]	; (cd24 <usbdc_init+0x68>)
    ccf2:	4b0d      	ldr	r3, [pc, #52]	; (cd28 <usbdc_init+0x6c>)
    ccf4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    ccf6:	4a0b      	ldr	r2, [pc, #44]	; (cd24 <usbdc_init+0x68>)
    ccf8:	687b      	ldr	r3, [r7, #4]
    ccfa:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    ccfc:	490b      	ldr	r1, [pc, #44]	; (cd2c <usbdc_init+0x70>)
    ccfe:	2000      	movs	r0, #0
    cd00:	4b0b      	ldr	r3, [pc, #44]	; (cd30 <usbdc_init+0x74>)
    cd02:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cd04:	490b      	ldr	r1, [pc, #44]	; (cd34 <usbdc_init+0x78>)
    cd06:	2001      	movs	r0, #1
    cd08:	4b09      	ldr	r3, [pc, #36]	; (cd30 <usbdc_init+0x74>)
    cd0a:	4798      	blx	r3

	return 0;
    cd0c:	2300      	movs	r3, #0
}
    cd0e:	4618      	mov	r0, r3
    cd10:	3710      	adds	r7, #16
    cd12:	46bd      	mov	sp, r7
    cd14:	bd80      	pop	{r7, pc}
    cd16:	bf00      	nop
    cd18:	0000f07c 	.word	0x0000f07c
    cd1c:	00003911 	.word	0x00003911
    cd20:	00003369 	.word	0x00003369
    cd24:	20000b88 	.word	0x20000b88
    cd28:	0000e9d9 	.word	0x0000e9d9
    cd2c:	0000ca19 	.word	0x0000ca19
    cd30:	00003415 	.word	0x00003415
    cd34:	0000cbf5 	.word	0x0000cbf5

0000cd38 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    cd38:	b580      	push	{r7, lr}
    cd3a:	b082      	sub	sp, #8
    cd3c:	af00      	add	r7, sp, #0
    cd3e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    cd40:	6879      	ldr	r1, [r7, #4]
    cd42:	4803      	ldr	r0, [pc, #12]	; (cd50 <usbdc_register_function+0x18>)
    cd44:	4b03      	ldr	r3, [pc, #12]	; (cd54 <usbdc_register_function+0x1c>)
    cd46:	4798      	blx	r3
}
    cd48:	bf00      	nop
    cd4a:	3708      	adds	r7, #8
    cd4c:	46bd      	mov	sp, r7
    cd4e:	bd80      	pop	{r7, pc}
    cd50:	20000b98 	.word	0x20000b98
    cd54:	000039ed 	.word	0x000039ed

0000cd58 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cd58:	b580      	push	{r7, lr}
    cd5a:	b082      	sub	sp, #8
    cd5c:	af00      	add	r7, sp, #0
    cd5e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    cd60:	4b0f      	ldr	r3, [pc, #60]	; (cda0 <usbdc_start+0x48>)
    cd62:	7e9b      	ldrb	r3, [r3, #26]
    cd64:	2b00      	cmp	r3, #0
    cd66:	d002      	beq.n	cd6e <usbdc_start+0x16>
		return ERR_BUSY;
    cd68:	f06f 0303 	mvn.w	r3, #3
    cd6c:	e013      	b.n	cd96 <usbdc_start+0x3e>
	}

	if (desces) {
    cd6e:	687b      	ldr	r3, [r7, #4]
    cd70:	2b00      	cmp	r3, #0
    cd72:	d00e      	beq.n	cd92 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    cd74:	4a0a      	ldr	r2, [pc, #40]	; (cda0 <usbdc_start+0x48>)
    cd76:	687b      	ldr	r3, [r7, #4]
    cd78:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    cd7a:	687b      	ldr	r3, [r7, #4]
    cd7c:	681b      	ldr	r3, [r3, #0]
    cd7e:	79da      	ldrb	r2, [r3, #7]
    cd80:	4b07      	ldr	r3, [pc, #28]	; (cda0 <usbdc_start+0x48>)
    cd82:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    cd84:	4b06      	ldr	r3, [pc, #24]	; (cda0 <usbdc_start+0x48>)
    cd86:	2201      	movs	r2, #1
    cd88:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    cd8a:	4b06      	ldr	r3, [pc, #24]	; (cda4 <usbdc_start+0x4c>)
    cd8c:	4798      	blx	r3
	return ERR_NONE;
    cd8e:	2300      	movs	r3, #0
    cd90:	e001      	b.n	cd96 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    cd92:	f06f 0308 	mvn.w	r3, #8
}
    cd96:	4618      	mov	r0, r3
    cd98:	3708      	adds	r7, #8
    cd9a:	46bd      	mov	sp, r7
    cd9c:	bd80      	pop	{r7, pc}
    cd9e:	bf00      	nop
    cda0:	20000b88 	.word	0x20000b88
    cda4:	00003439 	.word	0x00003439

0000cda8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    cda8:	b580      	push	{r7, lr}
    cdaa:	af00      	add	r7, sp, #0
	usb_d_attach();
    cdac:	4b01      	ldr	r3, [pc, #4]	; (cdb4 <usbdc_attach+0xc>)
    cdae:	4798      	blx	r3
}
    cdb0:	bf00      	nop
    cdb2:	bd80      	pop	{r7, pc}
    cdb4:	0000344d 	.word	0x0000344d

0000cdb8 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    cdb8:	b480      	push	{r7}
    cdba:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    cdbc:	4b03      	ldr	r3, [pc, #12]	; (cdcc <usbdc_get_ctrl_buffer+0x14>)
    cdbe:	695b      	ldr	r3, [r3, #20]
}
    cdc0:	4618      	mov	r0, r3
    cdc2:	46bd      	mov	sp, r7
    cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdc8:	4770      	bx	lr
    cdca:	bf00      	nop
    cdcc:	20000b88 	.word	0x20000b88

0000cdd0 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    cdd0:	b480      	push	{r7}
    cdd2:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    cdd4:	4b07      	ldr	r3, [pc, #28]	; (cdf4 <usbdc_get_state+0x24>)
    cdd6:	7e9b      	ldrb	r3, [r3, #26]
    cdd8:	f003 0310 	and.w	r3, r3, #16
    cddc:	2b00      	cmp	r3, #0
    cdde:	d001      	beq.n	cde4 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    cde0:	2310      	movs	r3, #16
    cde2:	e001      	b.n	cde8 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    cde4:	4b03      	ldr	r3, [pc, #12]	; (cdf4 <usbdc_get_state+0x24>)
    cde6:	7e9b      	ldrb	r3, [r3, #26]
}
    cde8:	4618      	mov	r0, r3
    cdea:	46bd      	mov	sp, r7
    cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdf0:	4770      	bx	lr
    cdf2:	bf00      	nop
    cdf4:	20000b88 	.word	0x20000b88

0000cdf8 <usb_get_u16>:
{
    cdf8:	b480      	push	{r7}
    cdfa:	b083      	sub	sp, #12
    cdfc:	af00      	add	r7, sp, #0
    cdfe:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ce00:	687b      	ldr	r3, [r7, #4]
    ce02:	781b      	ldrb	r3, [r3, #0]
    ce04:	b29a      	uxth	r2, r3
    ce06:	687b      	ldr	r3, [r7, #4]
    ce08:	3301      	adds	r3, #1
    ce0a:	781b      	ldrb	r3, [r3, #0]
    ce0c:	b29b      	uxth	r3, r3
    ce0e:	021b      	lsls	r3, r3, #8
    ce10:	b29b      	uxth	r3, r3
    ce12:	4413      	add	r3, r2
    ce14:	b29b      	uxth	r3, r3
}
    ce16:	4618      	mov	r0, r3
    ce18:	370c      	adds	r7, #12
    ce1a:	46bd      	mov	sp, r7
    ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce20:	4770      	bx	lr

0000ce22 <usb_desc_len>:
{
    ce22:	b480      	push	{r7}
    ce24:	b083      	sub	sp, #12
    ce26:	af00      	add	r7, sp, #0
    ce28:	6078      	str	r0, [r7, #4]
	return desc[0];
    ce2a:	687b      	ldr	r3, [r7, #4]
    ce2c:	781b      	ldrb	r3, [r3, #0]
}
    ce2e:	4618      	mov	r0, r3
    ce30:	370c      	adds	r7, #12
    ce32:	46bd      	mov	sp, r7
    ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce38:	4770      	bx	lr

0000ce3a <usb_desc_type>:
{
    ce3a:	b480      	push	{r7}
    ce3c:	b083      	sub	sp, #12
    ce3e:	af00      	add	r7, sp, #0
    ce40:	6078      	str	r0, [r7, #4]
	return desc[1];
    ce42:	687b      	ldr	r3, [r7, #4]
    ce44:	3301      	adds	r3, #1
    ce46:	781b      	ldrb	r3, [r3, #0]
}
    ce48:	4618      	mov	r0, r3
    ce4a:	370c      	adds	r7, #12
    ce4c:	46bd      	mov	sp, r7
    ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce52:	4770      	bx	lr

0000ce54 <usb_desc_next>:
{
    ce54:	b580      	push	{r7, lr}
    ce56:	b082      	sub	sp, #8
    ce58:	af00      	add	r7, sp, #0
    ce5a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ce5c:	6878      	ldr	r0, [r7, #4]
    ce5e:	4b05      	ldr	r3, [pc, #20]	; (ce74 <usb_desc_next+0x20>)
    ce60:	4798      	blx	r3
    ce62:	4603      	mov	r3, r0
    ce64:	461a      	mov	r2, r3
    ce66:	687b      	ldr	r3, [r7, #4]
    ce68:	4413      	add	r3, r2
}
    ce6a:	4618      	mov	r0, r3
    ce6c:	3708      	adds	r7, #8
    ce6e:	46bd      	mov	sp, r7
    ce70:	bd80      	pop	{r7, pc}
    ce72:	bf00      	nop
    ce74:	0000ce23 	.word	0x0000ce23

0000ce78 <usb_cfg_desc_total_len>:
{
    ce78:	b580      	push	{r7, lr}
    ce7a:	b082      	sub	sp, #8
    ce7c:	af00      	add	r7, sp, #0
    ce7e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ce80:	687b      	ldr	r3, [r7, #4]
    ce82:	3302      	adds	r3, #2
    ce84:	4618      	mov	r0, r3
    ce86:	4b03      	ldr	r3, [pc, #12]	; (ce94 <usb_cfg_desc_total_len+0x1c>)
    ce88:	4798      	blx	r3
    ce8a:	4603      	mov	r3, r0
}
    ce8c:	4618      	mov	r0, r3
    ce8e:	3708      	adds	r7, #8
    ce90:	46bd      	mov	sp, r7
    ce92:	bd80      	pop	{r7, pc}
    ce94:	0000cdf9 	.word	0x0000cdf9

0000ce98 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    ce98:	b580      	push	{r7, lr}
    ce9a:	b082      	sub	sp, #8
    ce9c:	af00      	add	r7, sp, #0
    ce9e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    cea0:	6878      	ldr	r0, [r7, #4]
    cea2:	4b05      	ldr	r3, [pc, #20]	; (ceb8 <usb_cfg_desc_next+0x20>)
    cea4:	4798      	blx	r3
    cea6:	4603      	mov	r3, r0
    cea8:	461a      	mov	r2, r3
    ceaa:	687b      	ldr	r3, [r7, #4]
    ceac:	4413      	add	r3, r2
}
    ceae:	4618      	mov	r0, r3
    ceb0:	3708      	adds	r7, #8
    ceb2:	46bd      	mov	sp, r7
    ceb4:	bd80      	pop	{r7, pc}
    ceb6:	bf00      	nop
    ceb8:	0000ce79 	.word	0x0000ce79

0000cebc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    cebc:	b580      	push	{r7, lr}
    cebe:	b084      	sub	sp, #16
    cec0:	af00      	add	r7, sp, #0
    cec2:	60f8      	str	r0, [r7, #12]
    cec4:	60b9      	str	r1, [r7, #8]
    cec6:	4613      	mov	r3, r2
    cec8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ceca:	e015      	b.n	cef8 <usb_find_desc+0x3c>
		_desc_len_check();
    cecc:	68f8      	ldr	r0, [r7, #12]
    cece:	4b0f      	ldr	r3, [pc, #60]	; (cf0c <usb_find_desc+0x50>)
    ced0:	4798      	blx	r3
    ced2:	4603      	mov	r3, r0
    ced4:	2b01      	cmp	r3, #1
    ced6:	d801      	bhi.n	cedc <usb_find_desc+0x20>
    ced8:	2300      	movs	r3, #0
    ceda:	e012      	b.n	cf02 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    cedc:	68f8      	ldr	r0, [r7, #12]
    cede:	4b0c      	ldr	r3, [pc, #48]	; (cf10 <usb_find_desc+0x54>)
    cee0:	4798      	blx	r3
    cee2:	4603      	mov	r3, r0
    cee4:	461a      	mov	r2, r3
    cee6:	79fb      	ldrb	r3, [r7, #7]
    cee8:	4293      	cmp	r3, r2
    ceea:	d101      	bne.n	cef0 <usb_find_desc+0x34>
			return desc;
    ceec:	68fb      	ldr	r3, [r7, #12]
    ceee:	e008      	b.n	cf02 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    cef0:	68f8      	ldr	r0, [r7, #12]
    cef2:	4b08      	ldr	r3, [pc, #32]	; (cf14 <usb_find_desc+0x58>)
    cef4:	4798      	blx	r3
    cef6:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cef8:	68fa      	ldr	r2, [r7, #12]
    cefa:	68bb      	ldr	r3, [r7, #8]
    cefc:	429a      	cmp	r2, r3
    cefe:	d3e5      	bcc.n	cecc <usb_find_desc+0x10>
	}
	return NULL;
    cf00:	2300      	movs	r3, #0
}
    cf02:	4618      	mov	r0, r3
    cf04:	3710      	adds	r7, #16
    cf06:	46bd      	mov	sp, r7
    cf08:	bd80      	pop	{r7, pc}
    cf0a:	bf00      	nop
    cf0c:	0000ce23 	.word	0x0000ce23
    cf10:	0000ce3b 	.word	0x0000ce3b
    cf14:	0000ce55 	.word	0x0000ce55

0000cf18 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    cf18:	b580      	push	{r7, lr}
    cf1a:	b082      	sub	sp, #8
    cf1c:	af00      	add	r7, sp, #0
    cf1e:	6078      	str	r0, [r7, #4]
    cf20:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cf22:	e019      	b.n	cf58 <usb_find_ep_desc+0x40>
		_desc_len_check();
    cf24:	6878      	ldr	r0, [r7, #4]
    cf26:	4b12      	ldr	r3, [pc, #72]	; (cf70 <usb_find_ep_desc+0x58>)
    cf28:	4798      	blx	r3
    cf2a:	4603      	mov	r3, r0
    cf2c:	2b01      	cmp	r3, #1
    cf2e:	d801      	bhi.n	cf34 <usb_find_ep_desc+0x1c>
    cf30:	2300      	movs	r3, #0
    cf32:	e018      	b.n	cf66 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    cf34:	6878      	ldr	r0, [r7, #4]
    cf36:	4b0f      	ldr	r3, [pc, #60]	; (cf74 <usb_find_ep_desc+0x5c>)
    cf38:	4798      	blx	r3
    cf3a:	4603      	mov	r3, r0
    cf3c:	2b04      	cmp	r3, #4
    cf3e:	d010      	beq.n	cf62 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cf40:	6878      	ldr	r0, [r7, #4]
    cf42:	4b0c      	ldr	r3, [pc, #48]	; (cf74 <usb_find_ep_desc+0x5c>)
    cf44:	4798      	blx	r3
    cf46:	4603      	mov	r3, r0
    cf48:	2b05      	cmp	r3, #5
    cf4a:	d101      	bne.n	cf50 <usb_find_ep_desc+0x38>
			return desc;
    cf4c:	687b      	ldr	r3, [r7, #4]
    cf4e:	e00a      	b.n	cf66 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    cf50:	6878      	ldr	r0, [r7, #4]
    cf52:	4b09      	ldr	r3, [pc, #36]	; (cf78 <usb_find_ep_desc+0x60>)
    cf54:	4798      	blx	r3
    cf56:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    cf58:	687a      	ldr	r2, [r7, #4]
    cf5a:	683b      	ldr	r3, [r7, #0]
    cf5c:	429a      	cmp	r2, r3
    cf5e:	d3e1      	bcc.n	cf24 <usb_find_ep_desc+0xc>
    cf60:	e000      	b.n	cf64 <usb_find_ep_desc+0x4c>
			break;
    cf62:	bf00      	nop
	}
	return NULL;
    cf64:	2300      	movs	r3, #0
}
    cf66:	4618      	mov	r0, r3
    cf68:	3708      	adds	r7, #8
    cf6a:	46bd      	mov	sp, r7
    cf6c:	bd80      	pop	{r7, pc}
    cf6e:	bf00      	nop
    cf70:	0000ce23 	.word	0x0000ce23
    cf74:	0000ce3b 	.word	0x0000ce3b
    cf78:	0000ce55 	.word	0x0000ce55

0000cf7c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    cf7c:	b580      	push	{r7, lr}
    cf7e:	b084      	sub	sp, #16
    cf80:	af00      	add	r7, sp, #0
    cf82:	60f8      	str	r0, [r7, #12]
    cf84:	60b9      	str	r1, [r7, #8]
    cf86:	4613      	mov	r3, r2
    cf88:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    cf8a:	2202      	movs	r2, #2
    cf8c:	68b9      	ldr	r1, [r7, #8]
    cf8e:	68f8      	ldr	r0, [r7, #12]
    cf90:	4b15      	ldr	r3, [pc, #84]	; (cfe8 <usb_find_cfg_desc+0x6c>)
    cf92:	4798      	blx	r3
    cf94:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    cf96:	68fb      	ldr	r3, [r7, #12]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d11a      	bne.n	cfd2 <usb_find_cfg_desc+0x56>
		return NULL;
    cf9c:	2300      	movs	r3, #0
    cf9e:	e01f      	b.n	cfe0 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    cfa0:	68f8      	ldr	r0, [r7, #12]
    cfa2:	4b12      	ldr	r3, [pc, #72]	; (cfec <usb_find_cfg_desc+0x70>)
    cfa4:	4798      	blx	r3
    cfa6:	4603      	mov	r3, r0
    cfa8:	2b01      	cmp	r3, #1
    cfaa:	d801      	bhi.n	cfb0 <usb_find_cfg_desc+0x34>
    cfac:	2300      	movs	r3, #0
    cfae:	e017      	b.n	cfe0 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    cfb0:	68fb      	ldr	r3, [r7, #12]
    cfb2:	3301      	adds	r3, #1
    cfb4:	781b      	ldrb	r3, [r3, #0]
    cfb6:	2b02      	cmp	r3, #2
    cfb8:	d110      	bne.n	cfdc <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    cfba:	68fb      	ldr	r3, [r7, #12]
    cfbc:	3305      	adds	r3, #5
    cfbe:	781b      	ldrb	r3, [r3, #0]
    cfc0:	79fa      	ldrb	r2, [r7, #7]
    cfc2:	429a      	cmp	r2, r3
    cfc4:	d101      	bne.n	cfca <usb_find_cfg_desc+0x4e>
			return desc;
    cfc6:	68fb      	ldr	r3, [r7, #12]
    cfc8:	e00a      	b.n	cfe0 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    cfca:	68f8      	ldr	r0, [r7, #12]
    cfcc:	4b08      	ldr	r3, [pc, #32]	; (cff0 <usb_find_cfg_desc+0x74>)
    cfce:	4798      	blx	r3
    cfd0:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cfd2:	68fa      	ldr	r2, [r7, #12]
    cfd4:	68bb      	ldr	r3, [r7, #8]
    cfd6:	429a      	cmp	r2, r3
    cfd8:	d3e2      	bcc.n	cfa0 <usb_find_cfg_desc+0x24>
    cfda:	e000      	b.n	cfde <usb_find_cfg_desc+0x62>
			break;
    cfdc:	bf00      	nop
	}
	return NULL;
    cfde:	2300      	movs	r3, #0
}
    cfe0:	4618      	mov	r0, r3
    cfe2:	3710      	adds	r7, #16
    cfe4:	46bd      	mov	sp, r7
    cfe6:	bd80      	pop	{r7, pc}
    cfe8:	0000cebd 	.word	0x0000cebd
    cfec:	0000ce23 	.word	0x0000ce23
    cff0:	0000ce99 	.word	0x0000ce99

0000cff4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    cff4:	b580      	push	{r7, lr}
    cff6:	b086      	sub	sp, #24
    cff8:	af00      	add	r7, sp, #0
    cffa:	60f8      	str	r0, [r7, #12]
    cffc:	60b9      	str	r1, [r7, #8]
    cffe:	4613      	mov	r3, r2
    d000:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d002:	2300      	movs	r3, #0
    d004:	75fb      	strb	r3, [r7, #23]
    d006:	e020      	b.n	d04a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d008:	2203      	movs	r2, #3
    d00a:	68b9      	ldr	r1, [r7, #8]
    d00c:	68f8      	ldr	r0, [r7, #12]
    d00e:	4b13      	ldr	r3, [pc, #76]	; (d05c <usb_find_str_desc+0x68>)
    d010:	4798      	blx	r3
    d012:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d014:	68fb      	ldr	r3, [r7, #12]
    d016:	2b00      	cmp	r3, #0
    d018:	d015      	beq.n	d046 <usb_find_str_desc+0x52>
			_desc_len_check();
    d01a:	68f8      	ldr	r0, [r7, #12]
    d01c:	4b10      	ldr	r3, [pc, #64]	; (d060 <usb_find_str_desc+0x6c>)
    d01e:	4798      	blx	r3
    d020:	4603      	mov	r3, r0
    d022:	2b01      	cmp	r3, #1
    d024:	d801      	bhi.n	d02a <usb_find_str_desc+0x36>
    d026:	2300      	movs	r3, #0
    d028:	e014      	b.n	d054 <usb_find_str_desc+0x60>
			if (i == str_index) {
    d02a:	7dfa      	ldrb	r2, [r7, #23]
    d02c:	79fb      	ldrb	r3, [r7, #7]
    d02e:	429a      	cmp	r2, r3
    d030:	d101      	bne.n	d036 <usb_find_str_desc+0x42>
				return desc;
    d032:	68fb      	ldr	r3, [r7, #12]
    d034:	e00e      	b.n	d054 <usb_find_str_desc+0x60>
			}
			i++;
    d036:	7dfb      	ldrb	r3, [r7, #23]
    d038:	3301      	adds	r3, #1
    d03a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d03c:	68f8      	ldr	r0, [r7, #12]
    d03e:	4b09      	ldr	r3, [pc, #36]	; (d064 <usb_find_str_desc+0x70>)
    d040:	4798      	blx	r3
    d042:	60f8      	str	r0, [r7, #12]
    d044:	e001      	b.n	d04a <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d046:	2300      	movs	r3, #0
    d048:	e004      	b.n	d054 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d04a:	68fa      	ldr	r2, [r7, #12]
    d04c:	68bb      	ldr	r3, [r7, #8]
    d04e:	429a      	cmp	r2, r3
    d050:	d3da      	bcc.n	d008 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d052:	2300      	movs	r3, #0
}
    d054:	4618      	mov	r0, r3
    d056:	3718      	adds	r7, #24
    d058:	46bd      	mov	sp, r7
    d05a:	bd80      	pop	{r7, pc}
    d05c:	0000cebd 	.word	0x0000cebd
    d060:	0000ce23 	.word	0x0000ce23
    d064:	0000ce55 	.word	0x0000ce55

0000d068 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    d068:	b480      	push	{r7}
    d06a:	b085      	sub	sp, #20
    d06c:	af00      	add	r7, sp, #0
    d06e:	60f8      	str	r0, [r7, #12]
    d070:	460b      	mov	r3, r1
    d072:	607a      	str	r2, [r7, #4]
    d074:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    d076:	7afb      	ldrb	r3, [r7, #11]
    d078:	68fa      	ldr	r2, [r7, #12]
    d07a:	01db      	lsls	r3, r3, #7
    d07c:	4413      	add	r3, r2
    d07e:	3318      	adds	r3, #24
    d080:	687a      	ldr	r2, [r7, #4]
    d082:	601a      	str	r2, [r3, #0]
}
    d084:	bf00      	nop
    d086:	3714      	adds	r7, #20
    d088:	46bd      	mov	sp, r7
    d08a:	bc80      	pop	{r7}
    d08c:	4770      	bx	lr

0000d08e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    d08e:	b480      	push	{r7}
    d090:	b085      	sub	sp, #20
    d092:	af00      	add	r7, sp, #0
    d094:	60f8      	str	r0, [r7, #12]
    d096:	460b      	mov	r3, r1
    d098:	607a      	str	r2, [r7, #4]
    d09a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    d09c:	7afb      	ldrb	r3, [r7, #11]
    d09e:	68fa      	ldr	r2, [r7, #12]
    d0a0:	01db      	lsls	r3, r3, #7
    d0a2:	4413      	add	r3, r2
    d0a4:	3314      	adds	r3, #20
    d0a6:	687a      	ldr	r2, [r7, #4]
    d0a8:	601a      	str	r2, [r3, #0]
}
    d0aa:	bf00      	nop
    d0ac:	3714      	adds	r7, #20
    d0ae:	46bd      	mov	sp, r7
    d0b0:	bc80      	pop	{r7}
    d0b2:	4770      	bx	lr

0000d0b4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    d0b4:	b580      	push	{r7, lr}
    d0b6:	b082      	sub	sp, #8
    d0b8:	af00      	add	r7, sp, #0
    d0ba:	4603      	mov	r3, r0
    d0bc:	6039      	str	r1, [r7, #0]
    d0be:	71fb      	strb	r3, [r7, #7]
    d0c0:	4613      	mov	r3, r2
    d0c2:	71bb      	strb	r3, [r7, #6]
	if (level) {
    d0c4:	79bb      	ldrb	r3, [r7, #6]
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	d006      	beq.n	d0d8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    d0ca:	79fb      	ldrb	r3, [r7, #7]
    d0cc:	683a      	ldr	r2, [r7, #0]
    d0ce:	4619      	mov	r1, r3
    d0d0:	4806      	ldr	r0, [pc, #24]	; (d0ec <_gpio_set_level+0x38>)
    d0d2:	4b07      	ldr	r3, [pc, #28]	; (d0f0 <_gpio_set_level+0x3c>)
    d0d4:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    d0d6:	e005      	b.n	d0e4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    d0d8:	79fb      	ldrb	r3, [r7, #7]
    d0da:	683a      	ldr	r2, [r7, #0]
    d0dc:	4619      	mov	r1, r3
    d0de:	4803      	ldr	r0, [pc, #12]	; (d0ec <_gpio_set_level+0x38>)
    d0e0:	4b04      	ldr	r3, [pc, #16]	; (d0f4 <_gpio_set_level+0x40>)
    d0e2:	4798      	blx	r3
}
    d0e4:	bf00      	nop
    d0e6:	3708      	adds	r7, #8
    d0e8:	46bd      	mov	sp, r7
    d0ea:	bd80      	pop	{r7, pc}
    d0ec:	41008000 	.word	0x41008000
    d0f0:	0000d069 	.word	0x0000d069
    d0f4:	0000d08f 	.word	0x0000d08f

0000d0f8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    d0f8:	b580      	push	{r7, lr}
    d0fa:	b082      	sub	sp, #8
    d0fc:	af00      	add	r7, sp, #0
    d0fe:	4603      	mov	r3, r0
    d100:	460a      	mov	r2, r1
    d102:	71fb      	strb	r3, [r7, #7]
    d104:	4613      	mov	r3, r2
    d106:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    d108:	79fb      	ldrb	r3, [r7, #7]
    d10a:	115b      	asrs	r3, r3, #5
    d10c:	b2d8      	uxtb	r0, r3
    d10e:	79fb      	ldrb	r3, [r7, #7]
    d110:	f003 031f 	and.w	r3, r3, #31
    d114:	2201      	movs	r2, #1
    d116:	fa02 f303 	lsl.w	r3, r2, r3
    d11a:	79ba      	ldrb	r2, [r7, #6]
    d11c:	4619      	mov	r1, r3
    d11e:	4b03      	ldr	r3, [pc, #12]	; (d12c <gpio_set_pin_level+0x34>)
    d120:	4798      	blx	r3
}
    d122:	bf00      	nop
    d124:	3708      	adds	r7, #8
    d126:	46bd      	mov	sp, r7
    d128:	bd80      	pop	{r7, pc}
    d12a:	bf00      	nop
    d12c:	0000d0b5 	.word	0x0000d0b5

0000d130 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    d130:	b580      	push	{r7, lr}
    d132:	b082      	sub	sp, #8
    d134:	af00      	add	r7, sp, #0
    d136:	6078      	str	r0, [r7, #4]
    d138:	6039      	str	r1, [r7, #0]
    d13a:	687b      	ldr	r3, [r7, #4]
    d13c:	3318      	adds	r3, #24
    d13e:	4618      	mov	r0, r3
    d140:	4b08      	ldr	r3, [pc, #32]	; (d164 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    d142:	4798      	blx	r3
{
	appParameters=defaultParameters;
    d144:	687b      	ldr	r3, [r7, #4]
    d146:	4a08      	ldr	r2, [pc, #32]	; (d168 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    d148:	7812      	ldrb	r2, [r2, #0]
    d14a:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    d14c:	687b      	ldr	r3, [r7, #4]
    d14e:	683a      	ldr	r2, [r7, #0]
    d150:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    d152:	4b06      	ldr	r3, [pc, #24]	; (d16c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    d154:	681a      	ldr	r2, [r3, #0]
    d156:	687b      	ldr	r3, [r7, #4]
    d158:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    d15a:	687b      	ldr	r3, [r7, #4]
    d15c:	4618      	mov	r0, r3
    d15e:	3708      	adds	r7, #8
    d160:	46bd      	mov	sp, r7
    d162:	bd80      	pop	{r7, pc}
    d164:	0000e60d 	.word	0x0000e60d
    d168:	0000f094 	.word	0x0000f094
    d16c:	20000ba8 	.word	0x20000ba8

0000d170 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    d170:	b580      	push	{r7, lr}
    d172:	b082      	sub	sp, #8
    d174:	af00      	add	r7, sp, #0
    d176:	6078      	str	r0, [r7, #4]
    d178:	687b      	ldr	r3, [r7, #4]
    d17a:	3318      	adds	r3, #24
    d17c:	4618      	mov	r0, r3
    d17e:	4b03      	ldr	r3, [pc, #12]	; (d18c <_ZN16FlashMemoryClassD1Ev+0x1c>)
    d180:	4798      	blx	r3
{
} //~FlashMemoryClass
    d182:	687b      	ldr	r3, [r7, #4]
    d184:	4618      	mov	r0, r3
    d186:	3708      	adds	r7, #8
    d188:	46bd      	mov	sp, r7
    d18a:	bd80      	pop	{r7, pc}
    d18c:	0000e62d 	.word	0x0000e62d

0000d190 <_ZN16FlashMemoryClass4InitEv>:
	flashOpen();
	//WriteStatusRegister(kFlashInitialStatus);
	flashClose();
	
}
void	FlashMemoryClass::Init(void){
    d190:	b580      	push	{r7, lr}
    d192:	b082      	sub	sp, #8
    d194:	af00      	add	r7, sp, #0
    d196:	6078      	str	r0, [r7, #4]
	spi.SetDescriptor(spi_descriptor);
    d198:	687b      	ldr	r3, [r7, #4]
    d19a:	f103 0218 	add.w	r2, r3, #24
    d19e:	687b      	ldr	r3, [r7, #4]
    d1a0:	695b      	ldr	r3, [r3, #20]
    d1a2:	4619      	mov	r1, r3
    d1a4:	4610      	mov	r0, r2
    d1a6:	4b0e      	ldr	r3, [pc, #56]	; (d1e0 <_ZN16FlashMemoryClass4InitEv+0x50>)
    d1a8:	4798      	blx	r3
	spi.init();
    d1aa:	687b      	ldr	r3, [r7, #4]
    d1ac:	3318      	adds	r3, #24
    d1ae:	4618      	mov	r0, r3
    d1b0:	4b0c      	ldr	r3, [pc, #48]	; (d1e4 <_ZN16FlashMemoryClass4InitEv+0x54>)
    d1b2:	4798      	blx	r3


	memoryMap=0x00;
    d1b4:	687b      	ldr	r3, [r7, #4]
    d1b6:	2200      	movs	r2, #0
    d1b8:	601a      	str	r2, [r3, #0]
	
	flashOpen();
    d1ba:	6878      	ldr	r0, [r7, #4]
    d1bc:	4b0a      	ldr	r3, [pc, #40]	; (d1e8 <_ZN16FlashMemoryClass4InitEv+0x58>)
    d1be:	4798      	blx	r3
//	WriteStatusRegister(0x02);
//	SoftwareReset();
//	ChipErase();
	status=ReadStatusRegister();
    d1c0:	6878      	ldr	r0, [r7, #4]
    d1c2:	4b0a      	ldr	r3, [pc, #40]	; (d1ec <_ZN16FlashMemoryClass4InitEv+0x5c>)
    d1c4:	4798      	blx	r3
    d1c6:	4603      	mov	r3, r0
    d1c8:	461a      	mov	r2, r3
    d1ca:	687b      	ldr	r3, [r7, #4]
    d1cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
//	functionsRegister=ReadFunctionRegister();
	
	flashClose();
    d1d0:	6878      	ldr	r0, [r7, #4]
    d1d2:	4b07      	ldr	r3, [pc, #28]	; (d1f0 <_ZN16FlashMemoryClass4InitEv+0x60>)
    d1d4:	4798      	blx	r3
	
}
    d1d6:	bf00      	nop
    d1d8:	3708      	adds	r7, #8
    d1da:	46bd      	mov	sp, r7
    d1dc:	bd80      	pop	{r7, pc}
    d1de:	bf00      	nop
    d1e0:	0000e679 	.word	0x0000e679
    d1e4:	0000e641 	.word	0x0000e641
    d1e8:	0000d281 	.word	0x0000d281
    d1ec:	0000d57d 	.word	0x0000d57d
    d1f0:	0000d5f5 	.word	0x0000d5f5

0000d1f4 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters>:

void FlashMemoryClass::flushConfigurationData(userParameters *data)
{
    d1f4:	b590      	push	{r4, r7, lr}
    d1f6:	b085      	sub	sp, #20
    d1f8:	af00      	add	r7, sp, #0
    d1fa:	6078      	str	r0, [r7, #4]
    d1fc:	6039      	str	r1, [r7, #0]

	userParameters	appData;
	appData=*data;
    d1fe:	683b      	ldr	r3, [r7, #0]
    d200:	781b      	ldrb	r3, [r3, #0]
    d202:	733b      	strb	r3, [r7, #12]
	flashOpen();
    d204:	6878      	ldr	r0, [r7, #4]
    d206:	4b0a      	ldr	r3, [pc, #40]	; (d230 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters+0x3c>)
    d208:	4798      	blx	r3
//	writeFlash((uint32_t)&memoryMap->parameters,&appData, sizeof(userParameters));
	WriteAddress((uint8_t*)&appData,(uint32_t)&memoryMap->parameters, sizeof(userParameters));
    d20a:	687b      	ldr	r3, [r7, #4]
    d20c:	681b      	ldr	r3, [r3, #0]
    d20e:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    d212:	461a      	mov	r2, r3
    d214:	f107 010c 	add.w	r1, r7, #12
    d218:	2301      	movs	r3, #1
    d21a:	6878      	ldr	r0, [r7, #4]
    d21c:	4c05      	ldr	r4, [pc, #20]	; (d234 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters+0x40>)
    d21e:	47a0      	blx	r4
	flashClose();
    d220:	6878      	ldr	r0, [r7, #4]
    d222:	4b05      	ldr	r3, [pc, #20]	; (d238 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters+0x44>)
    d224:	4798      	blx	r3

}
    d226:	bf00      	nop
    d228:	3714      	adds	r7, #20
    d22a:	46bd      	mov	sp, r7
    d22c:	bd90      	pop	{r4, r7, pc}
    d22e:	bf00      	nop
    d230:	0000d281 	.word	0x0000d281
    d234:	0000d675 	.word	0x0000d675
    d238:	0000d5f5 	.word	0x0000d5f5

0000d23c <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters>:
		
	
}

userParameters FlashMemoryClass::readConfigurationData(userParameters& p)
{
    d23c:	b590      	push	{r4, r7, lr}
    d23e:	b083      	sub	sp, #12
    d240:	af00      	add	r7, sp, #0
    d242:	6078      	str	r0, [r7, #4]
    d244:	6039      	str	r1, [r7, #0]
	
	flashOpen();
    d246:	6878      	ldr	r0, [r7, #4]
    d248:	4b0a      	ldr	r3, [pc, #40]	; (d274 <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters+0x38>)
    d24a:	4798      	blx	r3
	ReadAddress((uint8_t*)&p, (uint32_t)&memoryMap->parameters, sizeof(userParameters));
    d24c:	687b      	ldr	r3, [r7, #4]
    d24e:	681b      	ldr	r3, [r3, #0]
    d250:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    d254:	461a      	mov	r2, r3
    d256:	2301      	movs	r3, #1
    d258:	6839      	ldr	r1, [r7, #0]
    d25a:	6878      	ldr	r0, [r7, #4]
    d25c:	4c06      	ldr	r4, [pc, #24]	; (d278 <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters+0x3c>)
    d25e:	47a0      	blx	r4
	//readFlash((void*)&p, (uint32_t)&memoryMap->parameters, sizeof(userParameters));
	flashClose();
    d260:	6878      	ldr	r0, [r7, #4]
    d262:	4b06      	ldr	r3, [pc, #24]	; (d27c <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters+0x40>)
    d264:	4798      	blx	r3
	return	p;
    d266:	683b      	ldr	r3, [r7, #0]
    d268:	781b      	ldrb	r3, [r3, #0]

}
    d26a:	4618      	mov	r0, r3
    d26c:	370c      	adds	r7, #12
    d26e:	46bd      	mov	sp, r7
    d270:	bd90      	pop	{r4, r7, pc}
    d272:	bf00      	nop
    d274:	0000d281 	.word	0x0000d281
    d278:	0000d755 	.word	0x0000d755
    d27c:	0000d5f5 	.word	0x0000d5f5

0000d280 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
    d280:	b580      	push	{r7, lr}
    d282:	b082      	sub	sp, #8
    d284:	af00      	add	r7, sp, #0
    d286:	6078      	str	r0, [r7, #4]
	garbage=spi.enable();
    d288:	687b      	ldr	r3, [r7, #4]
    d28a:	3318      	adds	r3, #24
    d28c:	4618      	mov	r0, r3
    d28e:	4b05      	ldr	r3, [pc, #20]	; (d2a4 <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
    d290:	4798      	blx	r3
    d292:	4603      	mov	r3, r0
    d294:	461a      	mov	r2, r3
    d296:	687b      	ldr	r3, [r7, #4]
    d298:	609a      	str	r2, [r3, #8]
	
	
}
    d29a:	bf00      	nop
    d29c:	3708      	adds	r7, #8
    d29e:	46bd      	mov	sp, r7
    d2a0:	bd80      	pop	{r7, pc}
    d2a2:	bf00      	nop
    d2a4:	0000e69d 	.word	0x0000e69d

0000d2a8 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	spi.read((uint8_t *)dest, (uint16_t)size);
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
    d2a8:	b580      	push	{r7, lr}
    d2aa:	b082      	sub	sp, #8
    d2ac:	af00      	add	r7, sp, #0
    d2ae:	6078      	str	r0, [r7, #4]
	garbage=0;
    d2b0:	687b      	ldr	r3, [r7, #4]
    d2b2:	2200      	movs	r2, #0
    d2b4:	609a      	str	r2, [r3, #8]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
    d2b6:	2100      	movs	r1, #0
    d2b8:	200f      	movs	r0, #15
    d2ba:	4b05      	ldr	r3, [pc, #20]	; (d2d0 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    d2bc:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
    d2be:	2101      	movs	r1, #1
    d2c0:	2013      	movs	r0, #19
    d2c2:	4b03      	ldr	r3, [pc, #12]	; (d2d0 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    d2c4:	4798      	blx	r3
}
    d2c6:	bf00      	nop
    d2c8:	3708      	adds	r7, #8
    d2ca:	46bd      	mov	sp, r7
    d2cc:	bd80      	pop	{r7, pc}
    d2ce:	bf00      	nop
    d2d0:	0000d0f9 	.word	0x0000d0f9

0000d2d4 <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
    d2d4:	b580      	push	{r7, lr}
    d2d6:	b082      	sub	sp, #8
    d2d8:	af00      	add	r7, sp, #0
    d2da:	6078      	str	r0, [r7, #4]
	garbage=0;
    d2dc:	687b      	ldr	r3, [r7, #4]
    d2de:	2200      	movs	r2, #0
    d2e0:	609a      	str	r2, [r3, #8]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    d2e2:	2101      	movs	r1, #1
    d2e4:	200f      	movs	r0, #15
    d2e6:	4b05      	ldr	r3, [pc, #20]	; (d2fc <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    d2e8:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
    d2ea:	2101      	movs	r1, #1
    d2ec:	2013      	movs	r0, #19
    d2ee:	4b03      	ldr	r3, [pc, #12]	; (d2fc <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    d2f0:	4798      	blx	r3
}
    d2f2:	bf00      	nop
    d2f4:	3708      	adds	r7, #8
    d2f6:	46bd      	mov	sp, r7
    d2f8:	bd80      	pop	{r7, pc}
    d2fa:	bf00      	nop
    d2fc:	0000d0f9 	.word	0x0000d0f9

0000d300 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
    d300:	b580      	push	{r7, lr}
    d302:	b082      	sub	sp, #8
    d304:	af00      	add	r7, sp, #0
    d306:	6078      	str	r0, [r7, #4]
    d308:	460b      	mov	r3, r1
    d30a:	70fb      	strb	r3, [r7, #3]
	//WaitBusy();
	spi.write(&byte,1);
    d30c:	687b      	ldr	r3, [r7, #4]
    d30e:	3318      	adds	r3, #24
    d310:	1cf9      	adds	r1, r7, #3
    d312:	2201      	movs	r2, #1
    d314:	4618      	mov	r0, r3
    d316:	4b03      	ldr	r3, [pc, #12]	; (d324 <_ZN16FlashMemoryClass9Send_ByteEh+0x24>)
    d318:	4798      	blx	r3
	return byte;
    d31a:	78fb      	ldrb	r3, [r7, #3]
}
    d31c:	4618      	mov	r0, r3
    d31e:	3708      	adds	r7, #8
    d320:	46bd      	mov	sp, r7
    d322:	bd80      	pop	{r7, pc}
    d324:	0000e6d9 	.word	0x0000e6d9

0000d328 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
    d328:	b580      	push	{r7, lr}
    d32a:	b084      	sub	sp, #16
    d32c:	af00      	add	r7, sp, #0
    d32e:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.read(&byte,1);
    d330:	687b      	ldr	r3, [r7, #4]
    d332:	3318      	adds	r3, #24
    d334:	f107 010f 	add.w	r1, r7, #15
    d338:	2201      	movs	r2, #1
    d33a:	4618      	mov	r0, r3
    d33c:	4b03      	ldr	r3, [pc, #12]	; (d34c <_ZN16FlashMemoryClass8Get_ByteEv+0x24>)
    d33e:	4798      	blx	r3
	
	return byte;
    d340:	7bfb      	ldrb	r3, [r7, #15]
}
    d342:	4618      	mov	r0, r3
    d344:	3710      	adds	r7, #16
    d346:	46bd      	mov	sp, r7
    d348:	bd80      	pop	{r7, pc}
    d34a:	bf00      	nop
    d34c:	0000e71d 	.word	0x0000e71d

0000d350 <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
    d350:	b580      	push	{r7, lr}
    d352:	b082      	sub	sp, #8
    d354:	af00      	add	r7, sp, #0
    d356:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
    d358:	6878      	ldr	r0, [r7, #4]
    d35a:	4b0d      	ldr	r3, [pc, #52]	; (d390 <_ZN16FlashMemoryClass4WRENEv+0x40>)
    d35c:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
    d35e:	2106      	movs	r1, #6
    d360:	6878      	ldr	r0, [r7, #4]
    d362:	4b0c      	ldr	r3, [pc, #48]	; (d394 <_ZN16FlashMemoryClass4WRENEv+0x44>)
    d364:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
    d366:	6878      	ldr	r0, [r7, #4]
    d368:	4b0b      	ldr	r3, [pc, #44]	; (d398 <_ZN16FlashMemoryClass4WRENEv+0x48>)
    d36a:	4798      	blx	r3
		status=ReadStatusRegister();
    d36c:	6878      	ldr	r0, [r7, #4]
    d36e:	4b0b      	ldr	r3, [pc, #44]	; (d39c <_ZN16FlashMemoryClass4WRENEv+0x4c>)
    d370:	4798      	blx	r3
    d372:	4603      	mov	r3, r0
    d374:	461a      	mov	r2, r3
    d376:	687b      	ldr	r3, [r7, #4]
    d378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	} while ((status&&(0x02))==0);
    d37c:	687b      	ldr	r3, [r7, #4]
    d37e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    d382:	2b00      	cmp	r3, #0
    d384:	d100      	bne.n	d388 <_ZN16FlashMemoryClass4WRENEv+0x38>
	do
    d386:	e7e7      	b.n	d358 <_ZN16FlashMemoryClass4WRENEv+0x8>

}
    d388:	bf00      	nop
    d38a:	3708      	adds	r7, #8
    d38c:	46bd      	mov	sp, r7
    d38e:	bd80      	pop	{r7, pc}
    d390:	0000d2a9 	.word	0x0000d2a9
    d394:	0000d301 	.word	0x0000d301
    d398:	0000d2d5 	.word	0x0000d2d5
    d39c:	0000d57d 	.word	0x0000d57d

0000d3a0 <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
    d3a0:	b580      	push	{r7, lr}
    d3a2:	b082      	sub	sp, #8
    d3a4:	af00      	add	r7, sp, #0
    d3a6:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
    d3a8:	6878      	ldr	r0, [r7, #4]
    d3aa:	4b06      	ldr	r3, [pc, #24]	; (d3c4 <_ZN16FlashMemoryClass4WRDIEv+0x24>)
    d3ac:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
    d3ae:	2104      	movs	r1, #4
    d3b0:	6878      	ldr	r0, [r7, #4]
    d3b2:	4b05      	ldr	r3, [pc, #20]	; (d3c8 <_ZN16FlashMemoryClass4WRDIEv+0x28>)
    d3b4:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
    d3b6:	6878      	ldr	r0, [r7, #4]
    d3b8:	4b04      	ldr	r3, [pc, #16]	; (d3cc <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
    d3ba:	4798      	blx	r3
	
}
    d3bc:	bf00      	nop
    d3be:	3708      	adds	r7, #8
    d3c0:	46bd      	mov	sp, r7
    d3c2:	bd80      	pop	{r7, pc}
    d3c4:	0000d2a9 	.word	0x0000d2a9
    d3c8:	0000d301 	.word	0x0000d301
    d3cc:	0000d2d5 	.word	0x0000d2d5

0000d3d0 <_ZN16FlashMemoryClass10eraseFlashEmm>:
		return *srcPtr;

	}
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
    d3d0:	b580      	push	{r7, lr}
    d3d2:	b086      	sub	sp, #24
    d3d4:	af00      	add	r7, sp, #0
    d3d6:	60f8      	str	r0, [r7, #12]
    d3d8:	60b9      	str	r1, [r7, #8]
    d3da:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
    d3dc:	687b      	ldr	r3, [r7, #4]
    d3de:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
    d3e0:	68bb      	ldr	r3, [r7, #8]
    d3e2:	613b      	str	r3, [r7, #16]
	flashOpen();
    d3e4:	68f8      	ldr	r0, [r7, #12]
    d3e6:	4b21      	ldr	r3, [pc, #132]	; (d46c <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>)
    d3e8:	4798      	blx	r3
	while (eraseRemaining > 0)
    d3ea:	697b      	ldr	r3, [r7, #20]
    d3ec:	2b00      	cmp	r3, #0
    d3ee:	d035      	beq.n	d45c <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>
	{
	WREN();
    d3f0:	68f8      	ldr	r0, [r7, #12]
    d3f2:	4b1f      	ldr	r3, [pc, #124]	; (d470 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa0>)
    d3f4:	4798      	blx	r3
	if (eraseRemaining <= 4 * 1024)
    d3f6:	697b      	ldr	r3, [r7, #20]
    d3f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d3fc:	d806      	bhi.n	d40c <_ZN16FlashMemoryClass10eraseFlashEmm+0x3c>
		{
		Sector_Erase(eraseAddress);
    d3fe:	6939      	ldr	r1, [r7, #16]
    d400:	68f8      	ldr	r0, [r7, #12]
    d402:	4b1c      	ldr	r3, [pc, #112]	; (d474 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    d404:	4798      	blx	r3
		eraseRemaining = 0;
    d406:	2300      	movs	r3, #0
    d408:	617b      	str	r3, [r7, #20]
    d40a:	e020      	b.n	d44e <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}
	else if (eraseRemaining < 64 * 1024)
    d40c:	697b      	ldr	r3, [r7, #20]
    d40e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d412:	d20c      	bcs.n	d42e <_ZN16FlashMemoryClass10eraseFlashEmm+0x5e>
		{
		Sector_Erase(eraseAddress);
    d414:	6939      	ldr	r1, [r7, #16]
    d416:	68f8      	ldr	r0, [r7, #12]
    d418:	4b16      	ldr	r3, [pc, #88]	; (d474 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    d41a:	4798      	blx	r3
		eraseAddress += (4 * 1024);
    d41c:	693b      	ldr	r3, [r7, #16]
    d41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d422:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (4 * 1024);
    d424:	697b      	ldr	r3, [r7, #20]
    d426:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    d42a:	617b      	str	r3, [r7, #20]
    d42c:	e00f      	b.n	d44e <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}

	else if (eraseRemaining >= 64 * 1024)
    d42e:	697b      	ldr	r3, [r7, #20]
    d430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d434:	d30b      	bcc.n	d44e <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		{
		Block_Erase_64K(eraseAddress);
    d436:	6939      	ldr	r1, [r7, #16]
    d438:	68f8      	ldr	r0, [r7, #12]
    d43a:	4b0f      	ldr	r3, [pc, #60]	; (d478 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa8>)
    d43c:	4798      	blx	r3
		eraseAddress += (64 * 1024);
    d43e:	693b      	ldr	r3, [r7, #16]
    d440:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d444:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (64 * 1024);
    d446:	697b      	ldr	r3, [r7, #20]
    d448:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    d44c:	617b      	str	r3, [r7, #20]
		Block_Erase_32K(eraseAddress);
		eraseAddress += (32 * 1024);
		eraseRemaining -= (32 * 1024);
		}
*/
	WaitBusy();
    d44e:	68f8      	ldr	r0, [r7, #12]
    d450:	4b0a      	ldr	r3, [pc, #40]	; (d47c <_ZN16FlashMemoryClass10eraseFlashEmm+0xac>)
    d452:	4798      	blx	r3
	WRDI();
    d454:	68f8      	ldr	r0, [r7, #12]
    d456:	4b0a      	ldr	r3, [pc, #40]	; (d480 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb0>)
    d458:	4798      	blx	r3
	while (eraseRemaining > 0)
    d45a:	e7c6      	b.n	d3ea <_ZN16FlashMemoryClass10eraseFlashEmm+0x1a>
	}
	flashClose();
    d45c:	68f8      	ldr	r0, [r7, #12]
    d45e:	4b09      	ldr	r3, [pc, #36]	; (d484 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb4>)
    d460:	4798      	blx	r3
}
    d462:	bf00      	nop
    d464:	3718      	adds	r7, #24
    d466:	46bd      	mov	sp, r7
    d468:	bd80      	pop	{r7, pc}
    d46a:	bf00      	nop
    d46c:	0000d281 	.word	0x0000d281
    d470:	0000d351 	.word	0x0000d351
    d474:	0000d619 	.word	0x0000d619
    d478:	0000d489 	.word	0x0000d489
    d47c:	0000d4e5 	.word	0x0000d4e5
    d480:	0000d3a1 	.word	0x0000d3a1
    d484:	0000d5f5 	.word	0x0000d5f5

0000d488 <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
    d488:	b580      	push	{r7, lr}
    d48a:	b082      	sub	sp, #8
    d48c:	af00      	add	r7, sp, #0
    d48e:	6078      	str	r0, [r7, #4]
    d490:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
    d492:	6878      	ldr	r0, [r7, #4]
    d494:	4b10      	ldr	r3, [pc, #64]	; (d4d8 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x50>)
    d496:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
    d498:	21d8      	movs	r1, #216	; 0xd8
    d49a:	6878      	ldr	r0, [r7, #4]
    d49c:	4b0f      	ldr	r3, [pc, #60]	; (d4dc <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    d49e:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    d4a0:	683b      	ldr	r3, [r7, #0]
    d4a2:	0c1b      	lsrs	r3, r3, #16
    d4a4:	b2db      	uxtb	r3, r3
    d4a6:	4619      	mov	r1, r3
    d4a8:	6878      	ldr	r0, [r7, #4]
    d4aa:	4b0c      	ldr	r3, [pc, #48]	; (d4dc <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    d4ac:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
    d4ae:	683b      	ldr	r3, [r7, #0]
    d4b0:	0a1b      	lsrs	r3, r3, #8
    d4b2:	b2db      	uxtb	r3, r3
    d4b4:	4619      	mov	r1, r3
    d4b6:	6878      	ldr	r0, [r7, #4]
    d4b8:	4b08      	ldr	r3, [pc, #32]	; (d4dc <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    d4ba:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
    d4bc:	683b      	ldr	r3, [r7, #0]
    d4be:	b2db      	uxtb	r3, r3
    d4c0:	4619      	mov	r1, r3
    d4c2:	6878      	ldr	r0, [r7, #4]
    d4c4:	4b05      	ldr	r3, [pc, #20]	; (d4dc <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    d4c6:	4798      	blx	r3
		CE_High_Flash();				// disable device
    d4c8:	6878      	ldr	r0, [r7, #4]
    d4ca:	4b05      	ldr	r3, [pc, #20]	; (d4e0 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x58>)
    d4cc:	4798      	blx	r3
		
}
    d4ce:	bf00      	nop
    d4d0:	3708      	adds	r7, #8
    d4d2:	46bd      	mov	sp, r7
    d4d4:	bd80      	pop	{r7, pc}
    d4d6:	bf00      	nop
    d4d8:	0000d2a9 	.word	0x0000d2a9
    d4dc:	0000d301 	.word	0x0000d301
    d4e0:	0000d2d5 	.word	0x0000d2d5

0000d4e4 <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
    d4e4:	b580      	push	{r7, lr}
    d4e6:	b082      	sub	sp, #8
    d4e8:	af00      	add	r7, sp, #0
    d4ea:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
    d4ec:	6878      	ldr	r0, [r7, #4]
    d4ee:	4b0f      	ldr	r3, [pc, #60]	; (d52c <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    d4f0:	4798      	blx	r3
    d4f2:	4603      	mov	r3, r0
    d4f4:	461a      	mov	r2, r3
    d4f6:	687b      	ldr	r3, [r7, #4]
    d4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    d4fc:	687b      	ldr	r3, [r7, #4]
    d4fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    d502:	f003 0301 	and.w	r3, r3, #1
    d506:	2b00      	cmp	r3, #0
    d508:	d008      	beq.n	d51c <_ZN16FlashMemoryClass8WaitBusyEv+0x38>
			status = ReadStatusRegister();
    d50a:	6878      	ldr	r0, [r7, #4]
    d50c:	4b07      	ldr	r3, [pc, #28]	; (d52c <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    d50e:	4798      	blx	r3
    d510:	4603      	mov	r3, r0
    d512:	461a      	mov	r2, r3
    d514:	687b      	ldr	r3, [r7, #4]
    d516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    d51a:	e7ef      	b.n	d4fc <_ZN16FlashMemoryClass8WaitBusyEv+0x18>
		}
		
		return	status;
    d51c:	687b      	ldr	r3, [r7, #4]
    d51e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
	}
    d522:	4618      	mov	r0, r3
    d524:	3708      	adds	r7, #8
    d526:	46bd      	mov	sp, r7
    d528:	bd80      	pop	{r7, pc}
    d52a:	bf00      	nop
    d52c:	0000d57d 	.word	0x0000d57d

0000d530 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
    d530:	b580      	push	{r7, lr}
    d532:	b082      	sub	sp, #8
    d534:	af00      	add	r7, sp, #0
    d536:	6078      	str	r0, [r7, #4]
	
	flashOpen();
    d538:	6878      	ldr	r0, [r7, #4]
    d53a:	4b0d      	ldr	r3, [pc, #52]	; (d570 <_ZN16FlashMemoryClass7IsReadyEv+0x40>)
    d53c:	4798      	blx	r3
	status = ReadStatusRegister();
    d53e:	6878      	ldr	r0, [r7, #4]
    d540:	4b0c      	ldr	r3, [pc, #48]	; (d574 <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
    d542:	4798      	blx	r3
    d544:	4603      	mov	r3, r0
    d546:	461a      	mov	r2, r3
    d548:	687b      	ldr	r3, [r7, #4]
    d54a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	flashClose();
    d54e:	6878      	ldr	r0, [r7, #4]
    d550:	4b09      	ldr	r3, [pc, #36]	; (d578 <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
    d552:	4798      	blx	r3
	return	(status&0x01)==0;
    d554:	687b      	ldr	r3, [r7, #4]
    d556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    d55a:	f003 0301 	and.w	r3, r3, #1
    d55e:	2b00      	cmp	r3, #0
    d560:	bf0c      	ite	eq
    d562:	2301      	moveq	r3, #1
    d564:	2300      	movne	r3, #0
    d566:	b2db      	uxtb	r3, r3
}
    d568:	4618      	mov	r0, r3
    d56a:	3708      	adds	r7, #8
    d56c:	46bd      	mov	sp, r7
    d56e:	bd80      	pop	{r7, pc}
    d570:	0000d281 	.word	0x0000d281
    d574:	0000d57d 	.word	0x0000d57d
    d578:	0000d5f5 	.word	0x0000d5f5

0000d57c <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
    d57c:	b580      	push	{r7, lr}
    d57e:	b082      	sub	sp, #8
    d580:	af00      	add	r7, sp, #0
    d582:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
    d584:	2105      	movs	r1, #5
    d586:	6878      	ldr	r0, [r7, #4]
    d588:	4b06      	ldr	r3, [pc, #24]	; (d5a4 <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x28>)
    d58a:	4798      	blx	r3
    d58c:	4603      	mov	r3, r0
    d58e:	461a      	mov	r2, r3
    d590:	687b      	ldr	r3, [r7, #4]
    d592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		return status;
    d596:	687b      	ldr	r3, [r7, #4]
    d598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
	}
    d59c:	4618      	mov	r0, r3
    d59e:	3708      	adds	r7, #8
    d5a0:	46bd      	mov	sp, r7
    d5a2:	bd80      	pop	{r7, pc}
    d5a4:	0000d5a9 	.word	0x0000d5a9

0000d5a8 <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
    d5a8:	b580      	push	{r7, lr}
    d5aa:	b084      	sub	sp, #16
    d5ac:	af00      	add	r7, sp, #0
    d5ae:	6078      	str	r0, [r7, #4]
    d5b0:	460b      	mov	r3, r1
    d5b2:	70fb      	strb	r3, [r7, #3]
	uint8_t b = 0;
    d5b4:	2300      	movs	r3, #0
    d5b6:	73fb      	strb	r3, [r7, #15]
	CE_Low_Flash();			// enable device
    d5b8:	6878      	ldr	r0, [r7, #4]
    d5ba:	4b0a      	ldr	r3, [pc, #40]	; (d5e4 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x3c>)
    d5bc:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
    d5be:	78fb      	ldrb	r3, [r7, #3]
    d5c0:	4619      	mov	r1, r3
    d5c2:	6878      	ldr	r0, [r7, #4]
    d5c4:	4b08      	ldr	r3, [pc, #32]	; (d5e8 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x40>)
    d5c6:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
    d5c8:	6878      	ldr	r0, [r7, #4]
    d5ca:	4b08      	ldr	r3, [pc, #32]	; (d5ec <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x44>)
    d5cc:	4798      	blx	r3
    d5ce:	4603      	mov	r3, r0
    d5d0:	73fb      	strb	r3, [r7, #15]
	CE_High_Flash();			// disable device
    d5d2:	6878      	ldr	r0, [r7, #4]
    d5d4:	4b06      	ldr	r3, [pc, #24]	; (d5f0 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x48>)
    d5d6:	4798      	blx	r3
	return b;
    d5d8:	7bfb      	ldrb	r3, [r7, #15]
}
    d5da:	4618      	mov	r0, r3
    d5dc:	3710      	adds	r7, #16
    d5de:	46bd      	mov	sp, r7
    d5e0:	bd80      	pop	{r7, pc}
    d5e2:	bf00      	nop
    d5e4:	0000d2a9 	.word	0x0000d2a9
    d5e8:	0000d301 	.word	0x0000d301
    d5ec:	0000d329 	.word	0x0000d329
    d5f0:	0000d2d5 	.word	0x0000d2d5

0000d5f4 <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
    d5f4:	b580      	push	{r7, lr}
    d5f6:	b082      	sub	sp, #8
    d5f8:	af00      	add	r7, sp, #0
    d5fa:	6078      	str	r0, [r7, #4]
	garbage=0;
    d5fc:	687b      	ldr	r3, [r7, #4]
    d5fe:	2200      	movs	r2, #0
    d600:	609a      	str	r2, [r3, #8]
		spi.disable();
    d602:	687b      	ldr	r3, [r7, #4]
    d604:	3318      	adds	r3, #24
    d606:	4618      	mov	r0, r3
    d608:	4b02      	ldr	r3, [pc, #8]	; (d614 <_ZN16FlashMemoryClass10flashCloseEv+0x20>)
    d60a:	4798      	blx	r3
	}
    d60c:	bf00      	nop
    d60e:	3708      	adds	r7, #8
    d610:	46bd      	mov	sp, r7
    d612:	bd80      	pop	{r7, pc}
    d614:	0000e761 	.word	0x0000e761

0000d618 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
    d618:	b580      	push	{r7, lr}
    d61a:	b082      	sub	sp, #8
    d61c:	af00      	add	r7, sp, #0
    d61e:	6078      	str	r0, [r7, #4]
    d620:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
    d622:	6878      	ldr	r0, [r7, #4]
    d624:	4b10      	ldr	r3, [pc, #64]	; (d668 <_ZN16FlashMemoryClass12Sector_EraseEm+0x50>)
    d626:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
    d628:	2120      	movs	r1, #32
    d62a:	6878      	ldr	r0, [r7, #4]
    d62c:	4b0f      	ldr	r3, [pc, #60]	; (d66c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    d62e:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    d630:	683b      	ldr	r3, [r7, #0]
    d632:	0c1b      	lsrs	r3, r3, #16
    d634:	b2db      	uxtb	r3, r3
    d636:	4619      	mov	r1, r3
    d638:	6878      	ldr	r0, [r7, #4]
    d63a:	4b0c      	ldr	r3, [pc, #48]	; (d66c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    d63c:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
    d63e:	683b      	ldr	r3, [r7, #0]
    d640:	0a1b      	lsrs	r3, r3, #8
    d642:	b2db      	uxtb	r3, r3
    d644:	4619      	mov	r1, r3
    d646:	6878      	ldr	r0, [r7, #4]
    d648:	4b08      	ldr	r3, [pc, #32]	; (d66c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    d64a:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
    d64c:	683b      	ldr	r3, [r7, #0]
    d64e:	b2db      	uxtb	r3, r3
    d650:	4619      	mov	r1, r3
    d652:	6878      	ldr	r0, [r7, #4]
    d654:	4b05      	ldr	r3, [pc, #20]	; (d66c <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    d656:	4798      	blx	r3
	CE_High_Flash();				// disable device
    d658:	6878      	ldr	r0, [r7, #4]
    d65a:	4b05      	ldr	r3, [pc, #20]	; (d670 <_ZN16FlashMemoryClass12Sector_EraseEm+0x58>)
    d65c:	4798      	blx	r3
}
    d65e:	bf00      	nop
    d660:	3708      	adds	r7, #8
    d662:	46bd      	mov	sp, r7
    d664:	bd80      	pop	{r7, pc}
    d666:	bf00      	nop
    d668:	0000d2a9 	.word	0x0000d2a9
    d66c:	0000d301 	.word	0x0000d301
    d670:	0000d2d5 	.word	0x0000d2d5

0000d674 <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    d674:	b580      	push	{r7, lr}
    d676:	b086      	sub	sp, #24
    d678:	af00      	add	r7, sp, #0
    d67a:	60f8      	str	r0, [r7, #12]
    d67c:	60b9      	str	r1, [r7, #8]
    d67e:	607a      	str	r2, [r7, #4]
    d680:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
    d682:	68f8      	ldr	r0, [r7, #12]
    d684:	4b2b      	ldr	r3, [pc, #172]	; (d734 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc0>)
    d686:	4798      	blx	r3
    d688:	4603      	mov	r3, r0
    d68a:	f083 0301 	eor.w	r3, r3, #1
    d68e:	b2db      	uxtb	r3, r3
    d690:	2b00      	cmp	r3, #0
    d692:	d000      	beq.n	d696 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x22>
    d694:	e7f5      	b.n	d682 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
    d696:	68f8      	ldr	r0, [r7, #12]
    d698:	4b27      	ldr	r3, [pc, #156]	; (d738 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc4>)
    d69a:	4798      	blx	r3
	WREN();
    d69c:	68f8      	ldr	r0, [r7, #12]
    d69e:	4b27      	ldr	r3, [pc, #156]	; (d73c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc8>)
    d6a0:	4798      	blx	r3
	CE_Low_Flash();
    d6a2:	68f8      	ldr	r0, [r7, #12]
    d6a4:	4b26      	ldr	r3, [pc, #152]	; (d740 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xcc>)
    d6a6:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
    d6a8:	68fb      	ldr	r3, [r7, #12]
    d6aa:	2202      	movs	r2, #2
    d6ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    d6b0:	687b      	ldr	r3, [r7, #4]
    d6b2:	0c1b      	lsrs	r3, r3, #16
    d6b4:	b2da      	uxtb	r2, r3
    d6b6:	68fb      	ldr	r3, [r7, #12]
    d6b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    d6bc:	687b      	ldr	r3, [r7, #4]
    d6be:	0a1b      	lsrs	r3, r3, #8
    d6c0:	b2da      	uxtb	r2, r3
    d6c2:	68fb      	ldr	r3, [r7, #12]
    d6c4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	localBuffer[3]=(uint8_t)(addr&0xFF);
    d6c8:	687b      	ldr	r3, [r7, #4]
    d6ca:	b2da      	uxtb	r2, r3
    d6cc:	68fb      	ldr	r3, [r7, #12]
    d6ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	for (uint32_t i = 4; i <(size)+4; i++)
    d6d2:	2304      	movs	r3, #4
    d6d4:	617b      	str	r3, [r7, #20]
    d6d6:	683b      	ldr	r3, [r7, #0]
    d6d8:	1d1a      	adds	r2, r3, #4
    d6da:	697b      	ldr	r3, [r7, #20]
    d6dc:	429a      	cmp	r2, r3
    d6de:	d90e      	bls.n	d6fe <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8a>
	{
		localBuffer[i]=*p;
    d6e0:	68bb      	ldr	r3, [r7, #8]
    d6e2:	7819      	ldrb	r1, [r3, #0]
    d6e4:	68fa      	ldr	r2, [r7, #12]
    d6e6:	697b      	ldr	r3, [r7, #20]
    d6e8:	4413      	add	r3, r2
    d6ea:	332c      	adds	r3, #44	; 0x2c
    d6ec:	460a      	mov	r2, r1
    d6ee:	701a      	strb	r2, [r3, #0]
		p++;
    d6f0:	68bb      	ldr	r3, [r7, #8]
    d6f2:	3301      	adds	r3, #1
    d6f4:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
    d6f6:	697b      	ldr	r3, [r7, #20]
    d6f8:	3301      	adds	r3, #1
    d6fa:	617b      	str	r3, [r7, #20]
    d6fc:	e7eb      	b.n	d6d6 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x62>
	}


	w=spi.write(&localBuffer[0],size+4);
    d6fe:	68fb      	ldr	r3, [r7, #12]
    d700:	f103 0018 	add.w	r0, r3, #24
    d704:	68fb      	ldr	r3, [r7, #12]
    d706:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    d70a:	683b      	ldr	r3, [r7, #0]
    d70c:	3304      	adds	r3, #4
    d70e:	461a      	mov	r2, r3
    d710:	4b0c      	ldr	r3, [pc, #48]	; (d744 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd0>)
    d712:	4798      	blx	r3
    d714:	4603      	mov	r3, r0
    d716:	613b      	str	r3, [r7, #16]

	CE_High_Flash();
    d718:	68f8      	ldr	r0, [r7, #12]
    d71a:	4b0b      	ldr	r3, [pc, #44]	; (d748 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
    d71c:	4798      	blx	r3
	WRDI();
    d71e:	68f8      	ldr	r0, [r7, #12]
    d720:	4b0a      	ldr	r3, [pc, #40]	; (d74c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
    d722:	4798      	blx	r3
	flashClose();
    d724:	68f8      	ldr	r0, [r7, #12]
    d726:	4b0a      	ldr	r3, [pc, #40]	; (d750 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
    d728:	4798      	blx	r3
	return	w;
    d72a:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    d72c:	4618      	mov	r0, r3
    d72e:	3718      	adds	r7, #24
    d730:	46bd      	mov	sp, r7
    d732:	bd80      	pop	{r7, pc}
    d734:	0000d531 	.word	0x0000d531
    d738:	0000d281 	.word	0x0000d281
    d73c:	0000d351 	.word	0x0000d351
    d740:	0000d2a9 	.word	0x0000d2a9
    d744:	0000e6d9 	.word	0x0000e6d9
    d748:	0000d2d5 	.word	0x0000d2d5
    d74c:	0000d3a1 	.word	0x0000d3a1
    d750:	0000d5f5 	.word	0x0000d5f5

0000d754 <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    d754:	b580      	push	{r7, lr}
    d756:	b086      	sub	sp, #24
    d758:	af00      	add	r7, sp, #0
    d75a:	60f8      	str	r0, [r7, #12]
    d75c:	60b9      	str	r1, [r7, #8]
    d75e:	607a      	str	r2, [r7, #4]
    d760:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
	while(!IsReady());
    d762:	68f8      	ldr	r0, [r7, #12]
    d764:	4b21      	ldr	r3, [pc, #132]	; (d7ec <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x98>)
    d766:	4798      	blx	r3
    d768:	4603      	mov	r3, r0
    d76a:	f083 0301 	eor.w	r3, r3, #1
    d76e:	b2db      	uxtb	r3, r3
    d770:	2b00      	cmp	r3, #0
    d772:	d000      	beq.n	d776 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x22>
    d774:	e7f5      	b.n	d762 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
    d776:	68f8      	ldr	r0, [r7, #12]
    d778:	4b1d      	ldr	r3, [pc, #116]	; (d7f0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x9c>)
    d77a:	4798      	blx	r3
	CE_Low_Flash();
    d77c:	68f8      	ldr	r0, [r7, #12]
    d77e:	4b1d      	ldr	r3, [pc, #116]	; (d7f4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa0>)
    d780:	4798      	blx	r3
	instruction[0]=kFlashRead;
    d782:	68fb      	ldr	r3, [r7, #12]
    d784:	2203      	movs	r2, #3
    d786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    d78a:	687b      	ldr	r3, [r7, #4]
    d78c:	0c1b      	lsrs	r3, r3, #16
    d78e:	b2da      	uxtb	r2, r3
    d790:	68fb      	ldr	r3, [r7, #12]
    d792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    d796:	687b      	ldr	r3, [r7, #4]
    d798:	0a1b      	lsrs	r3, r3, #8
    d79a:	b2da      	uxtb	r2, r3
    d79c:	68fb      	ldr	r3, [r7, #12]
    d79e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	instruction[3]=(uint8_t)(addr&0xFF);
    d7a2:	687b      	ldr	r3, [r7, #4]
    d7a4:	b2da      	uxtb	r2, r3
    d7a6:	68fb      	ldr	r3, [r7, #12]
    d7a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		
	uint32_t	r=spi.write(instruction,4);
    d7ac:	68fb      	ldr	r3, [r7, #12]
    d7ae:	f103 0018 	add.w	r0, r3, #24
    d7b2:	68fb      	ldr	r3, [r7, #12]
    d7b4:	3340      	adds	r3, #64	; 0x40
    d7b6:	2204      	movs	r2, #4
    d7b8:	4619      	mov	r1, r3
    d7ba:	4b0f      	ldr	r3, [pc, #60]	; (d7f8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
    d7bc:	4798      	blx	r3
    d7be:	4603      	mov	r3, r0
    d7c0:	617b      	str	r3, [r7, #20]
	r=spi.read(p,size);
    d7c2:	68fb      	ldr	r3, [r7, #12]
    d7c4:	3318      	adds	r3, #24
    d7c6:	683a      	ldr	r2, [r7, #0]
    d7c8:	68b9      	ldr	r1, [r7, #8]
    d7ca:	4618      	mov	r0, r3
    d7cc:	4b0b      	ldr	r3, [pc, #44]	; (d7fc <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
    d7ce:	4798      	blx	r3
    d7d0:	4603      	mov	r3, r0
    d7d2:	617b      	str	r3, [r7, #20]
	CE_High_Flash();
    d7d4:	68f8      	ldr	r0, [r7, #12]
    d7d6:	4b0a      	ldr	r3, [pc, #40]	; (d800 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
    d7d8:	4798      	blx	r3
	flashClose();
    d7da:	68f8      	ldr	r0, [r7, #12]
    d7dc:	4b09      	ldr	r3, [pc, #36]	; (d804 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
    d7de:	4798      	blx	r3
	
	return	r;
    d7e0:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    d7e2:	4618      	mov	r0, r3
    d7e4:	3718      	adds	r7, #24
    d7e6:	46bd      	mov	sp, r7
    d7e8:	bd80      	pop	{r7, pc}
    d7ea:	bf00      	nop
    d7ec:	0000d531 	.word	0x0000d531
    d7f0:	0000d281 	.word	0x0000d281
    d7f4:	0000d2a9 	.word	0x0000d2a9
    d7f8:	0000e6d9 	.word	0x0000e6d9
    d7fc:	0000e71d 	.word	0x0000e71d
    d800:	0000d2d5 	.word	0x0000d2d5
    d804:	0000d5f5 	.word	0x0000d5f5

0000d808 <_Z41__static_initialization_and_destruction_0ii>:
    d808:	b580      	push	{r7, lr}
    d80a:	b082      	sub	sp, #8
    d80c:	af00      	add	r7, sp, #0
    d80e:	6078      	str	r0, [r7, #4]
    d810:	6039      	str	r1, [r7, #0]
    d812:	687b      	ldr	r3, [r7, #4]
    d814:	2b01      	cmp	r3, #1
    d816:	d10d      	bne.n	d834 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d818:	683b      	ldr	r3, [r7, #0]
    d81a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d81e:	4293      	cmp	r3, r2
    d820:	d108      	bne.n	d834 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d822:	4906      	ldr	r1, [pc, #24]	; (d83c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d824:	4806      	ldr	r0, [pc, #24]	; (d840 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d826:	4b07      	ldr	r3, [pc, #28]	; (d844 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d828:	4798      	blx	r3
    d82a:	4a07      	ldr	r2, [pc, #28]	; (d848 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d82c:	4907      	ldr	r1, [pc, #28]	; (d84c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d82e:	4804      	ldr	r0, [pc, #16]	; (d840 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d830:	4b07      	ldr	r3, [pc, #28]	; (d850 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d832:	4798      	blx	r3
    d834:	bf00      	nop
    d836:	3708      	adds	r7, #8
    d838:	46bd      	mov	sp, r7
    d83a:	bd80      	pop	{r7, pc}
    d83c:	20000db8 	.word	0x20000db8
    d840:	20000bac 	.word	0x20000bac
    d844:	0000d131 	.word	0x0000d131
    d848:	20000000 	.word	0x20000000
    d84c:	0000d171 	.word	0x0000d171
    d850:	0000e821 	.word	0x0000e821

0000d854 <_GLOBAL__sub_I_flashLayout>:
    d854:	b580      	push	{r7, lr}
    d856:	af00      	add	r7, sp, #0
    d858:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d85c:	2001      	movs	r0, #1
    d85e:	4b01      	ldr	r3, [pc, #4]	; (d864 <_GLOBAL__sub_I_flashLayout+0x10>)
    d860:	4798      	blx	r3
    d862:	bd80      	pop	{r7, pc}
    d864:	0000d809 	.word	0x0000d809

0000d868 <_ZN17FRAM_Memory_ClassD1Ev>:
		spiPort=0;
		memoryAddress=framMemory;
} //FRAM_Memory_Class

// default destructor
FRAM_Memory_Class::~FRAM_Memory_Class()
    d868:	b580      	push	{r7, lr}
    d86a:	b082      	sub	sp, #8
    d86c:	af00      	add	r7, sp, #0
    d86e:	6078      	str	r0, [r7, #4]
    d870:	687b      	ldr	r3, [r7, #4]
    d872:	3318      	adds	r3, #24
    d874:	4618      	mov	r0, r3
    d876:	4b03      	ldr	r3, [pc, #12]	; (d884 <_ZN17FRAM_Memory_ClassD1Ev+0x1c>)
    d878:	4798      	blx	r3
{
} //~FRAM_Memory_Class
    d87a:	687b      	ldr	r3, [r7, #4]
    d87c:	4618      	mov	r0, r3
    d87e:	3708      	adds	r7, #8
    d880:	46bd      	mov	sp, r7
    d882:	bd80      	pop	{r7, pc}
    d884:	0000e62d 	.word	0x0000e62d

0000d888 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor>:
FRAM_Memory_Class::FRAM_Memory_Class(uint8_t sp){
	spiPort=sp;
	memoryAddress=framMemory;
	
}
FRAM_Memory_Class::FRAM_Memory_Class(spi_m_sync_descriptor *spi_des)
    d888:	b580      	push	{r7, lr}
    d88a:	b082      	sub	sp, #8
    d88c:	af00      	add	r7, sp, #0
    d88e:	6078      	str	r0, [r7, #4]
    d890:	6039      	str	r1, [r7, #0]
    d892:	687b      	ldr	r3, [r7, #4]
    d894:	3318      	adds	r3, #24
    d896:	4618      	mov	r0, r3
    d898:	4b08      	ldr	r3, [pc, #32]	; (d8bc <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x34>)
    d89a:	4798      	blx	r3
{
	appParameters=defaultParameters;
    d89c:	687b      	ldr	r3, [r7, #4]
    d89e:	4a08      	ldr	r2, [pc, #32]	; (d8c0 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x38>)
    d8a0:	7812      	ldrb	r2, [r2, #0]
    d8a2:	741a      	strb	r2, [r3, #16]
	spi_descriptor=spi_des;
    d8a4:	687b      	ldr	r3, [r7, #4]
    d8a6:	683a      	ldr	r2, [r7, #0]
    d8a8:	615a      	str	r2, [r3, #20]
	memoryAddress=framMemory;
    d8aa:	4b06      	ldr	r3, [pc, #24]	; (d8c4 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x3c>)
    d8ac:	681a      	ldr	r2, [r3, #0]
    d8ae:	687b      	ldr	r3, [r7, #4]
    d8b0:	60da      	str	r2, [r3, #12]
} //FlashMemoryClass
    d8b2:	687b      	ldr	r3, [r7, #4]
    d8b4:	4618      	mov	r0, r3
    d8b6:	3708      	adds	r7, #8
    d8b8:	46bd      	mov	sp, r7
    d8ba:	bd80      	pop	{r7, pc}
    d8bc:	0000e60d 	.word	0x0000e60d
    d8c0:	0000f094 	.word	0x0000f094
    d8c4:	20000bf4 	.word	0x20000bf4

0000d8c8 <_Z41__static_initialization_and_destruction_0ii>:
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}

    d8c8:	b580      	push	{r7, lr}
    d8ca:	b082      	sub	sp, #8
    d8cc:	af00      	add	r7, sp, #0
    d8ce:	6078      	str	r0, [r7, #4]
    d8d0:	6039      	str	r1, [r7, #0]
    d8d2:	687b      	ldr	r3, [r7, #4]
    d8d4:	2b01      	cmp	r3, #1
    d8d6:	d10d      	bne.n	d8f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d8d8:	683b      	ldr	r3, [r7, #0]
    d8da:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d8de:	4293      	cmp	r3, r2
    d8e0:	d108      	bne.n	d8f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    d8e2:	4906      	ldr	r1, [pc, #24]	; (d8fc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    d8e4:	4806      	ldr	r0, [pc, #24]	; (d900 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d8e6:	4b07      	ldr	r3, [pc, #28]	; (d904 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    d8e8:	4798      	blx	r3
    d8ea:	4a07      	ldr	r2, [pc, #28]	; (d908 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    d8ec:	4907      	ldr	r1, [pc, #28]	; (d90c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    d8ee:	4804      	ldr	r0, [pc, #16]	; (d900 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    d8f0:	4b07      	ldr	r3, [pc, #28]	; (d910 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    d8f2:	4798      	blx	r3
    d8f4:	bf00      	nop
    d8f6:	3708      	adds	r7, #8
    d8f8:	46bd      	mov	sp, r7
    d8fa:	bd80      	pop	{r7, pc}
    d8fc:	20000db8 	.word	0x20000db8
    d900:	20000bf8 	.word	0x20000bf8
    d904:	0000d889 	.word	0x0000d889
    d908:	20000000 	.word	0x20000000
    d90c:	0000d869 	.word	0x0000d869
    d910:	0000e821 	.word	0x0000e821

0000d914 <_GLOBAL__sub_I_framMemory>:
    d914:	b580      	push	{r7, lr}
    d916:	af00      	add	r7, sp, #0
    d918:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d91c:	2001      	movs	r0, #1
    d91e:	4b01      	ldr	r3, [pc, #4]	; (d924 <_GLOBAL__sub_I_framMemory+0x10>)
    d920:	4798      	blx	r3
    d922:	bd80      	pop	{r7, pc}
    d924:	0000d8c9 	.word	0x0000d8c9

0000d928 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    d928:	b480      	push	{r7}
    d92a:	b083      	sub	sp, #12
    d92c:	af00      	add	r7, sp, #0
    d92e:	6078      	str	r0, [r7, #4]
    d930:	4a05      	ldr	r2, [pc, #20]	; (d948 <_ZN5PrintC1Ev+0x20>)
    d932:	687b      	ldr	r3, [r7, #4]
    d934:	601a      	str	r2, [r3, #0]
    d936:	687b      	ldr	r3, [r7, #4]
    d938:	2200      	movs	r2, #0
    d93a:	605a      	str	r2, [r3, #4]
    d93c:	687b      	ldr	r3, [r7, #4]
    d93e:	4618      	mov	r0, r3
    d940:	370c      	adds	r7, #12
    d942:	46bd      	mov	sp, r7
    d944:	bc80      	pop	{r7}
    d946:	4770      	bx	lr
    d948:	0000f114 	.word	0x0000f114

0000d94c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    d94c:	b480      	push	{r7}
    d94e:	b083      	sub	sp, #12
    d950:	af00      	add	r7, sp, #0
    d952:	6078      	str	r0, [r7, #4]
    d954:	2300      	movs	r3, #0
    d956:	4618      	mov	r0, r3
    d958:	370c      	adds	r7, #12
    d95a:	46bd      	mov	sp, r7
    d95c:	bc80      	pop	{r7}
    d95e:	4770      	bx	lr

0000d960 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    d960:	b480      	push	{r7}
    d962:	b083      	sub	sp, #12
    d964:	af00      	add	r7, sp, #0
    d966:	6078      	str	r0, [r7, #4]
    d968:	bf00      	nop
    d96a:	370c      	adds	r7, #12
    d96c:	46bd      	mov	sp, r7
    d96e:	bc80      	pop	{r7}
    d970:	4770      	bx	lr
	...

0000d974 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    d974:	b580      	push	{r7, lr}
    d976:	b082      	sub	sp, #8
    d978:	af00      	add	r7, sp, #0
    d97a:	6078      	str	r0, [r7, #4]
    d97c:	687b      	ldr	r3, [r7, #4]
    d97e:	4618      	mov	r0, r3
    d980:	4b06      	ldr	r3, [pc, #24]	; (d99c <_ZN6StreamC1Ev+0x28>)
    d982:	4798      	blx	r3
    d984:	4a06      	ldr	r2, [pc, #24]	; (d9a0 <_ZN6StreamC1Ev+0x2c>)
    d986:	687b      	ldr	r3, [r7, #4]
    d988:	601a      	str	r2, [r3, #0]
    d98a:	687b      	ldr	r3, [r7, #4]
    d98c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d990:	609a      	str	r2, [r3, #8]
    d992:	687b      	ldr	r3, [r7, #4]
    d994:	4618      	mov	r0, r3
    d996:	3708      	adds	r7, #8
    d998:	46bd      	mov	sp, r7
    d99a:	bd80      	pop	{r7, pc}
    d99c:	0000d929 	.word	0x0000d929
    d9a0:	0000f0d8 	.word	0x0000f0d8

0000d9a4 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d9a4:	b480      	push	{r7}
    d9a6:	b083      	sub	sp, #12
    d9a8:	af00      	add	r7, sp, #0
    d9aa:	4603      	mov	r3, r0
    d9ac:	603a      	str	r2, [r7, #0]
    d9ae:	71fb      	strb	r3, [r7, #7]
    d9b0:	460b      	mov	r3, r1
    d9b2:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    d9b4:	4b08      	ldr	r3, [pc, #32]	; (d9d8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d9b6:	681b      	ldr	r3, [r3, #0]
    d9b8:	2201      	movs	r2, #1
    d9ba:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
    d9bc:	4b06      	ldr	r3, [pc, #24]	; (d9d8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d9be:	681b      	ldr	r3, [r3, #0]
    d9c0:	2201      	movs	r2, #1
    d9c2:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    d9c4:	4b04      	ldr	r3, [pc, #16]	; (d9d8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d9c6:	681b      	ldr	r3, [r3, #0]
    d9c8:	2201      	movs	r2, #1
    d9ca:	741a      	strb	r2, [r3, #16]


	return false;
    d9cc:	2300      	movs	r3, #0
}
    d9ce:	4618      	mov	r0, r3
    d9d0:	370c      	adds	r7, #12
    d9d2:	46bd      	mov	sp, r7
    d9d4:	bc80      	pop	{r7}
    d9d6:	4770      	bx	lr
    d9d8:	20000c68 	.word	0x20000c68

0000d9dc <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d9dc:	b480      	push	{r7}
    d9de:	b083      	sub	sp, #12
    d9e0:	af00      	add	r7, sp, #0
    d9e2:	4603      	mov	r3, r0
    d9e4:	603a      	str	r2, [r7, #0]
    d9e6:	71fb      	strb	r3, [r7, #7]
    d9e8:	460b      	mov	r3, r1
    d9ea:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    d9ec:	4b08      	ldr	r3, [pc, #32]	; (da10 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d9ee:	681b      	ldr	r3, [r3, #0]
    d9f0:	2201      	movs	r2, #1
    d9f2:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
    d9f4:	4b06      	ldr	r3, [pc, #24]	; (da10 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d9f6:	681b      	ldr	r3, [r3, #0]
    d9f8:	2201      	movs	r2, #1
    d9fa:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
    d9fc:	4b04      	ldr	r3, [pc, #16]	; (da10 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d9fe:	681b      	ldr	r3, [r3, #0]
    da00:	2201      	movs	r2, #1
    da02:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    da04:	2300      	movs	r3, #0
}
    da06:	4618      	mov	r0, r3
    da08:	370c      	adds	r7, #12
    da0a:	46bd      	mov	sp, r7
    da0c:	bc80      	pop	{r7}
    da0e:	4770      	bx	lr
    da10:	20000c68 	.word	0x20000c68

0000da14 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    da14:	b580      	push	{r7, lr}
    da16:	b082      	sub	sp, #8
    da18:	af00      	add	r7, sp, #0
    da1a:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    da1c:	793b      	ldrb	r3, [r7, #4]
    da1e:	f003 0301 	and.w	r3, r3, #1
    da22:	b2db      	uxtb	r3, r3
    da24:	2b00      	cmp	r3, #0
    da26:	d013      	beq.n	da50 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    da28:	490c      	ldr	r1, [pc, #48]	; (da5c <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    da2a:	2000      	movs	r0, #0
    da2c:	4b0c      	ldr	r3, [pc, #48]	; (da60 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    da2e:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    da30:	490c      	ldr	r1, [pc, #48]	; (da64 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    da32:	2001      	movs	r0, #1
    da34:	4b0a      	ldr	r3, [pc, #40]	; (da60 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    da36:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    da38:	4b0b      	ldr	r3, [pc, #44]	; (da68 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    da3a:	681b      	ldr	r3, [r3, #0]
    da3c:	2201      	movs	r2, #1
    da3e:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    da40:	4b09      	ldr	r3, [pc, #36]	; (da68 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    da42:	681b      	ldr	r3, [r3, #0]
    da44:	2201      	movs	r2, #1
    da46:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
    da48:	4b07      	ldr	r3, [pc, #28]	; (da68 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    da4a:	681b      	ldr	r3, [r3, #0]
    da4c:	2201      	movs	r2, #1
    da4e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    da50:	2300      	movs	r3, #0
}
    da52:	4618      	mov	r0, r3
    da54:	3708      	adds	r7, #8
    da56:	46bd      	mov	sp, r7
    da58:	bd80      	pop	{r7, pc}
    da5a:	bf00      	nop
    da5c:	0000d9a5 	.word	0x0000d9a5
    da60:	0000c031 	.word	0x0000c031
    da64:	0000d9dd 	.word	0x0000d9dd
    da68:	20000c68 	.word	0x20000c68

0000da6c <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    da6c:	b580      	push	{r7, lr}
    da6e:	b082      	sub	sp, #8
    da70:	af00      	add	r7, sp, #0
    da72:	6078      	str	r0, [r7, #4]
    da74:	687b      	ldr	r3, [r7, #4]
    da76:	4618      	mov	r0, r3
    da78:	4b0a      	ldr	r3, [pc, #40]	; (daa4 <_ZN9CDC_ClassC1Ev+0x38>)
    da7a:	4798      	blx	r3
    da7c:	687b      	ldr	r3, [r7, #4]
    da7e:	3310      	adds	r3, #16
    da80:	4618      	mov	r0, r3
    da82:	4b09      	ldr	r3, [pc, #36]	; (daa8 <_ZN9CDC_ClassC1Ev+0x3c>)
    da84:	4798      	blx	r3
    da86:	4a09      	ldr	r2, [pc, #36]	; (daac <_ZN9CDC_ClassC1Ev+0x40>)
    da88:	687b      	ldr	r3, [r7, #4]
    da8a:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    da8c:	687b      	ldr	r3, [r7, #4]
    da8e:	f04f 32ff 	mov.w	r2, #4294967295
    da92:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    da94:	4a06      	ldr	r2, [pc, #24]	; (dab0 <_ZN9CDC_ClassC1Ev+0x44>)
    da96:	687b      	ldr	r3, [r7, #4]
    da98:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    da9a:	687b      	ldr	r3, [r7, #4]
    da9c:	4618      	mov	r0, r3
    da9e:	3708      	adds	r7, #8
    daa0:	46bd      	mov	sp, r7
    daa2:	bd80      	pop	{r7, pc}
    daa4:	0000d975 	.word	0x0000d975
    daa8:	0000e131 	.word	0x0000e131
    daac:	0000f0a8 	.word	0x0000f0a8
    dab0:	20000c68 	.word	0x20000c68

0000dab4 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    dab4:	b580      	push	{r7, lr}
    dab6:	b082      	sub	sp, #8
    dab8:	af00      	add	r7, sp, #0
    daba:	6078      	str	r0, [r7, #4]
    dabc:	4a06      	ldr	r2, [pc, #24]	; (dad8 <_ZN9CDC_ClassD1Ev+0x24>)
    dabe:	687b      	ldr	r3, [r7, #4]
    dac0:	601a      	str	r2, [r3, #0]
    dac2:	687b      	ldr	r3, [r7, #4]
    dac4:	3310      	adds	r3, #16
    dac6:	4618      	mov	r0, r3
    dac8:	4b04      	ldr	r3, [pc, #16]	; (dadc <_ZN9CDC_ClassD1Ev+0x28>)
    daca:	4798      	blx	r3
{
} //~CDC_Class
    dacc:	687b      	ldr	r3, [r7, #4]
    dace:	4618      	mov	r0, r3
    dad0:	3708      	adds	r7, #8
    dad2:	46bd      	mov	sp, r7
    dad4:	bd80      	pop	{r7, pc}
    dad6:	bf00      	nop
    dad8:	0000f0a8 	.word	0x0000f0a8
    dadc:	0000e151 	.word	0x0000e151

0000dae0 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    dae0:	b580      	push	{r7, lr}
    dae2:	b082      	sub	sp, #8
    dae4:	af00      	add	r7, sp, #0
    dae6:	6078      	str	r0, [r7, #4]
	
	OnInit();
    dae8:	687b      	ldr	r3, [r7, #4]
    daea:	3310      	adds	r3, #16
    daec:	4618      	mov	r0, r3
    daee:	4b07      	ldr	r3, [pc, #28]	; (db0c <_ZN9CDC_Class4InitEv+0x2c>)
    daf0:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    daf2:	4907      	ldr	r1, [pc, #28]	; (db10 <_ZN9CDC_Class4InitEv+0x30>)
    daf4:	2003      	movs	r0, #3
    daf6:	4b07      	ldr	r3, [pc, #28]	; (db14 <_ZN9CDC_Class4InitEv+0x34>)
    daf8:	4798      	blx	r3
	
		
	if (plugged)
    dafa:	687b      	ldr	r3, [r7, #4]
    dafc:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
    dafe:	20c8      	movs	r0, #200	; 0xc8
    db00:	4b05      	ldr	r3, [pc, #20]	; (db18 <_ZN9CDC_Class4InitEv+0x38>)
    db02:	4798      	blx	r3

}
    db04:	bf00      	nop
    db06:	3708      	adds	r7, #8
    db08:	46bd      	mov	sp, r7
    db0a:	bd80      	pop	{r7, pc}
    db0c:	0000e165 	.word	0x0000e165
    db10:	0000da15 	.word	0x0000da15
    db14:	0000c031 	.word	0x0000c031
    db18:	00002005 	.word	0x00002005

0000db1c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    db1c:	b580      	push	{r7, lr}
    db1e:	b082      	sub	sp, #8
    db20:	af00      	add	r7, sp, #0
    db22:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    db24:	4b03      	ldr	r3, [pc, #12]	; (db34 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    db26:	4798      	blx	r3
    db28:	4603      	mov	r3, r0
	
}
    db2a:	4618      	mov	r0, r3
    db2c:	3708      	adds	r7, #8
    db2e:	46bd      	mov	sp, r7
    db30:	bd80      	pop	{r7, pc}
    db32:	bf00      	nop
    db34:	0000c0a9 	.word	0x0000c0a9

0000db38 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    db38:	b580      	push	{r7, lr}
    db3a:	b084      	sub	sp, #16
    db3c:	af00      	add	r7, sp, #0
    db3e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    db40:	687b      	ldr	r3, [r7, #4]
    db42:	699b      	ldr	r3, [r3, #24]
    db44:	f1b3 3fff 	cmp.w	r3, #4294967295
    db48:	bf14      	ite	ne
    db4a:	2301      	movne	r3, #1
    db4c:	2300      	moveq	r3, #0
    db4e:	b2db      	uxtb	r3, r3
    db50:	2b00      	cmp	r3, #0
    db52:	d002      	beq.n	db5a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    db54:	687b      	ldr	r3, [r7, #4]
    db56:	699b      	ldr	r3, [r3, #24]
    db58:	e011      	b.n	db7e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    db5a:	687b      	ldr	r3, [r7, #4]
    db5c:	681b      	ldr	r3, [r3, #0]
    db5e:	331c      	adds	r3, #28
    db60:	681b      	ldr	r3, [r3, #0]
    db62:	f107 010f 	add.w	r1, r7, #15
    db66:	2201      	movs	r2, #1
    db68:	6878      	ldr	r0, [r7, #4]
    db6a:	4798      	blx	r3
    db6c:	4602      	mov	r2, r0
    db6e:	687b      	ldr	r3, [r7, #4]
    db70:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    db72:	7bfb      	ldrb	r3, [r7, #15]
    db74:	461a      	mov	r2, r3
    db76:	687b      	ldr	r3, [r7, #4]
    db78:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    db7a:	687b      	ldr	r3, [r7, #4]
    db7c:	699b      	ldr	r3, [r3, #24]
}
    db7e:	4618      	mov	r0, r3
    db80:	3710      	adds	r7, #16
    db82:	46bd      	mov	sp, r7
    db84:	bd80      	pop	{r7, pc}
	...

0000db88 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    db88:	b580      	push	{r7, lr}
    db8a:	b086      	sub	sp, #24
    db8c:	af00      	add	r7, sp, #0
    db8e:	60f8      	str	r0, [r7, #12]
    db90:	60b9      	str	r1, [r7, #8]
    db92:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	rxReady=false;
    db94:	68fb      	ldr	r3, [r7, #12]
    db96:	2200      	movs	r2, #0
    db98:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    db9a:	687b      	ldr	r3, [r7, #4]
    db9c:	4619      	mov	r1, r3
    db9e:	68b8      	ldr	r0, [r7, #8]
    dba0:	4b08      	ldr	r3, [pc, #32]	; (dbc4 <_ZN9CDC_Class8readDataEPvl+0x3c>)
    dba2:	4798      	blx	r3
    dba4:	4603      	mov	r3, r0
    dba6:	75fb      	strb	r3, [r7, #23]
	while(!rxReady);
    dba8:	68fb      	ldr	r3, [r7, #12]
    dbaa:	7d5b      	ldrb	r3, [r3, #21]
    dbac:	b2db      	uxtb	r3, r3
    dbae:	f083 0301 	eor.w	r3, r3, #1
    dbb2:	b2db      	uxtb	r3, r3
    dbb4:	2b00      	cmp	r3, #0
    dbb6:	d000      	beq.n	dbba <_ZN9CDC_Class8readDataEPvl+0x32>
    dbb8:	e7f6      	b.n	dba8 <_ZN9CDC_Class8readDataEPvl+0x20>
	return r;
    dbba:	7dfb      	ldrb	r3, [r7, #23]
}
    dbbc:	4618      	mov	r0, r3
    dbbe:	3718      	adds	r7, #24
    dbc0:	46bd      	mov	sp, r7
    dbc2:	bd80      	pop	{r7, pc}
    dbc4:	0000bf85 	.word	0x0000bf85

0000dbc8 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    dbc8:	b580      	push	{r7, lr}
    dbca:	b086      	sub	sp, #24
    dbcc:	af00      	add	r7, sp, #0
    dbce:	60f8      	str	r0, [r7, #12]
    dbd0:	60b9      	str	r1, [r7, #8]
    dbd2:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    dbd4:	68fb      	ldr	r3, [r7, #12]
    dbd6:	2200      	movs	r2, #0
    dbd8:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    dbda:	687b      	ldr	r3, [r7, #4]
    dbdc:	4619      	mov	r1, r3
    dbde:	68b8      	ldr	r0, [r7, #8]
    dbe0:	4b04      	ldr	r3, [pc, #16]	; (dbf4 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    dbe2:	4798      	blx	r3
    dbe4:	4603      	mov	r3, r0
    dbe6:	617b      	str	r3, [r7, #20]
	return r;
    dbe8:	697b      	ldr	r3, [r7, #20]
}
    dbea:	4618      	mov	r0, r3
    dbec:	3718      	adds	r7, #24
    dbee:	46bd      	mov	sp, r7
    dbf0:	bd80      	pop	{r7, pc}
    dbf2:	bf00      	nop
    dbf4:	0000bf85 	.word	0x0000bf85

0000dbf8 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    dbf8:	b580      	push	{r7, lr}
    dbfa:	b084      	sub	sp, #16
    dbfc:	af00      	add	r7, sp, #0
    dbfe:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    dc00:	687b      	ldr	r3, [r7, #4]
    dc02:	2200      	movs	r2, #0
    dc04:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    dc06:	f107 030f 	add.w	r3, r7, #15
    dc0a:	2101      	movs	r1, #1
    dc0c:	4618      	mov	r0, r3
    dc0e:	4b08      	ldr	r3, [pc, #32]	; (dc30 <_ZN9CDC_Class4readEv+0x38>)
    dc10:	4798      	blx	r3
	while(!rxReady);
    dc12:	687b      	ldr	r3, [r7, #4]
    dc14:	7d5b      	ldrb	r3, [r3, #21]
    dc16:	b2db      	uxtb	r3, r3
    dc18:	f083 0301 	eor.w	r3, r3, #1
    dc1c:	b2db      	uxtb	r3, r3
    dc1e:	2b00      	cmp	r3, #0
    dc20:	d000      	beq.n	dc24 <_ZN9CDC_Class4readEv+0x2c>
    dc22:	e7f6      	b.n	dc12 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    dc24:	7bfb      	ldrb	r3, [r7, #15]
}
    dc26:	4618      	mov	r0, r3
    dc28:	3710      	adds	r7, #16
    dc2a:	46bd      	mov	sp, r7
    dc2c:	bd80      	pop	{r7, pc}
    dc2e:	bf00      	nop
    dc30:	0000bf85 	.word	0x0000bf85

0000dc34 <_ZN9CDC_Class5flushEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	while(!rxReady);
	return r;
}
void	CDC_Class::flush(void){
    dc34:	b580      	push	{r7, lr}
    dc36:	b082      	sub	sp, #8
    dc38:	af00      	add	r7, sp, #0
    dc3a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    dc3c:	687b      	ldr	r3, [r7, #4]
    dc3e:	331c      	adds	r3, #28
    dc40:	2140      	movs	r1, #64	; 0x40
    dc42:	4618      	mov	r0, r3
    dc44:	4b02      	ldr	r3, [pc, #8]	; (dc50 <_ZN9CDC_Class5flushEv+0x1c>)
    dc46:	4798      	blx	r3
}
    dc48:	bf00      	nop
    dc4a:	3708      	adds	r7, #8
    dc4c:	46bd      	mov	sp, r7
    dc4e:	bd80      	pop	{r7, pc}
    dc50:	0000bfc9 	.word	0x0000bfc9

0000dc54 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    dc54:	b580      	push	{r7, lr}
    dc56:	b082      	sub	sp, #8
    dc58:	af00      	add	r7, sp, #0
    dc5a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    dc5c:	4b02      	ldr	r3, [pc, #8]	; (dc68 <_ZN9CDC_Class5clearEv+0x14>)
    dc5e:	4798      	blx	r3
}
    dc60:	bf00      	nop
    dc62:	3708      	adds	r7, #8
    dc64:	46bd      	mov	sp, r7
    dc66:	bd80      	pop	{r7, pc}
    dc68:	0000c00d 	.word	0x0000c00d

0000dc6c <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    dc6c:	b580      	push	{r7, lr}
    dc6e:	b082      	sub	sp, #8
    dc70:	af00      	add	r7, sp, #0
    dc72:	6078      	str	r0, [r7, #4]
    dc74:	460b      	mov	r3, r1
    dc76:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    dc78:	687b      	ldr	r3, [r7, #4]
    dc7a:	7d1b      	ldrb	r3, [r3, #20]
    dc7c:	b2db      	uxtb	r3, r3
    dc7e:	f083 0301 	eor.w	r3, r3, #1
    dc82:	b2db      	uxtb	r3, r3
    dc84:	2b00      	cmp	r3, #0
    dc86:	d000      	beq.n	dc8a <_ZN9CDC_Class5writeEh+0x1e>
    dc88:	e7f6      	b.n	dc78 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    dc8a:	687b      	ldr	r3, [r7, #4]
    dc8c:	681b      	ldr	r3, [r3, #0]
    dc8e:	3324      	adds	r3, #36	; 0x24
    dc90:	681b      	ldr	r3, [r3, #0]
    dc92:	1cf9      	adds	r1, r7, #3
    dc94:	2201      	movs	r2, #1
    dc96:	6878      	ldr	r0, [r7, #4]
    dc98:	4798      	blx	r3
    dc9a:	4603      	mov	r3, r0
}
    dc9c:	4618      	mov	r0, r3
    dc9e:	3708      	adds	r7, #8
    dca0:	46bd      	mov	sp, r7
    dca2:	bd80      	pop	{r7, pc}

0000dca4 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    dca4:	b580      	push	{r7, lr}
    dca6:	b086      	sub	sp, #24
    dca8:	af00      	add	r7, sp, #0
    dcaa:	60f8      	str	r0, [r7, #12]
    dcac:	60b9      	str	r1, [r7, #8]
    dcae:	607a      	str	r2, [r7, #4]
	
	txReady=false;
    dcb0:	68fb      	ldr	r3, [r7, #12]
    dcb2:	2200      	movs	r2, #0
    dcb4:	751a      	strb	r2, [r3, #20]
	if (CheckTerminal())
    dcb6:	68fb      	ldr	r3, [r7, #12]
    dcb8:	3310      	adds	r3, #16
    dcba:	4618      	mov	r0, r3
    dcbc:	4b14      	ldr	r3, [pc, #80]	; (dd10 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    dcbe:	4798      	blx	r3
    dcc0:	4603      	mov	r3, r0
    dcc2:	2b00      	cmp	r3, #0
    dcc4:	d01e      	beq.n	dd04 <_ZN9CDC_Class9writeDataEPKvl+0x60>
	{
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dcc6:	687b      	ldr	r3, [r7, #4]
    dcc8:	4619      	mov	r1, r3
    dcca:	68b8      	ldr	r0, [r7, #8]
    dccc:	4b11      	ldr	r3, [pc, #68]	; (dd14 <_ZN9CDC_Class9writeDataEPKvl+0x70>)
    dcce:	4798      	blx	r3
    dcd0:	4603      	mov	r3, r0
    dcd2:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted)){
    dcd4:	68fb      	ldr	r3, [r7, #12]
    dcd6:	7d1b      	ldrb	r3, [r3, #20]
    dcd8:	b2db      	uxtb	r3, r3
    dcda:	f083 0301 	eor.w	r3, r3, #1
    dcde:	b2db      	uxtb	r3, r3
    dce0:	2b00      	cmp	r3, #0
    dce2:	d006      	beq.n	dcf2 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    dce4:	68fb      	ldr	r3, [r7, #12]
    dce6:	7c5b      	ldrb	r3, [r3, #17]
    dce8:	b2db      	uxtb	r3, r3
    dcea:	2b00      	cmp	r3, #0
    dcec:	d001      	beq.n	dcf2 <_ZN9CDC_Class9writeDataEPKvl+0x4e>
    dcee:	2301      	movs	r3, #1
    dcf0:	e000      	b.n	dcf4 <_ZN9CDC_Class9writeDataEPKvl+0x50>
    dcf2:	2300      	movs	r3, #0
    dcf4:	2b00      	cmp	r3, #0
    dcf6:	d000      	beq.n	dcfa <_ZN9CDC_Class9writeDataEPKvl+0x56>
    dcf8:	e7ec      	b.n	dcd4 <_ZN9CDC_Class9writeDataEPKvl+0x30>
			
			};
			usbTerminalTimer.Stop();
    dcfa:	4807      	ldr	r0, [pc, #28]	; (dd18 <_ZN9CDC_Class9writeDataEPKvl+0x74>)
    dcfc:	4b07      	ldr	r3, [pc, #28]	; (dd1c <_ZN9CDC_Class9writeDataEPKvl+0x78>)
    dcfe:	4798      	blx	r3
		return r;
    dd00:	697b      	ldr	r3, [r7, #20]
    dd02:	e000      	b.n	dd06 <_ZN9CDC_Class9writeDataEPKvl+0x62>
	} 
	else
	{
		return 0;
    dd04:	2300      	movs	r3, #0
	}
	

}
    dd06:	4618      	mov	r0, r3
    dd08:	3718      	adds	r7, #24
    dd0a:	46bd      	mov	sp, r7
    dd0c:	bd80      	pop	{r7, pc}
    dd0e:	bf00      	nop
    dd10:	0000e201 	.word	0x0000e201
    dd14:	0000bfc9 	.word	0x0000bfc9
    dd18:	20000d74 	.word	0x20000d74
    dd1c:	0000e331 	.word	0x0000e331

0000dd20 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    dd20:	b580      	push	{r7, lr}
    dd22:	b086      	sub	sp, #24
    dd24:	af00      	add	r7, sp, #0
    dd26:	60f8      	str	r0, [r7, #12]
    dd28:	60b9      	str	r1, [r7, #8]
    dd2a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    dd2c:	68fb      	ldr	r3, [r7, #12]
    dd2e:	2200      	movs	r2, #0
    dd30:	751a      	strb	r2, [r3, #20]
/*	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);*/
 	if (plugged){
    dd32:	68fb      	ldr	r3, [r7, #12]
    dd34:	7c1b      	ldrb	r3, [r3, #16]
    dd36:	b2db      	uxtb	r3, r3
    dd38:	2b00      	cmp	r3, #0
    dd3a:	d01c      	beq.n	dd76 <_ZN9CDC_Class5writeEPKhj+0x56>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dd3c:	6879      	ldr	r1, [r7, #4]
    dd3e:	68b8      	ldr	r0, [r7, #8]
    dd40:	4b10      	ldr	r3, [pc, #64]	; (dd84 <_ZN9CDC_Class5writeEPKhj+0x64>)
    dd42:	4798      	blx	r3
    dd44:	4603      	mov	r3, r0
    dd46:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(terminalStarted));
    dd48:	68fb      	ldr	r3, [r7, #12]
    dd4a:	7d1b      	ldrb	r3, [r3, #20]
    dd4c:	b2db      	uxtb	r3, r3
    dd4e:	f083 0301 	eor.w	r3, r3, #1
    dd52:	b2db      	uxtb	r3, r3
    dd54:	2b00      	cmp	r3, #0
    dd56:	d006      	beq.n	dd66 <_ZN9CDC_Class5writeEPKhj+0x46>
    dd58:	68fb      	ldr	r3, [r7, #12]
    dd5a:	7c5b      	ldrb	r3, [r3, #17]
    dd5c:	b2db      	uxtb	r3, r3
    dd5e:	2b00      	cmp	r3, #0
    dd60:	d001      	beq.n	dd66 <_ZN9CDC_Class5writeEPKhj+0x46>
    dd62:	2301      	movs	r3, #1
    dd64:	e000      	b.n	dd68 <_ZN9CDC_Class5writeEPKhj+0x48>
    dd66:	2300      	movs	r3, #0
    dd68:	2b00      	cmp	r3, #0
    dd6a:	d000      	beq.n	dd6e <_ZN9CDC_Class5writeEPKhj+0x4e>
    dd6c:	e7ec      	b.n	dd48 <_ZN9CDC_Class5writeEPKhj+0x28>
		//while((!txReady));
		usbTerminalTimer.Stop();
    dd6e:	4806      	ldr	r0, [pc, #24]	; (dd88 <_ZN9CDC_Class5writeEPKhj+0x68>)
    dd70:	4b06      	ldr	r3, [pc, #24]	; (dd8c <_ZN9CDC_Class5writeEPKhj+0x6c>)
    dd72:	4798      	blx	r3
    dd74:	e001      	b.n	dd7a <_ZN9CDC_Class5writeEPKhj+0x5a>
	}else{
 		r=0;
    dd76:	2300      	movs	r3, #0
    dd78:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    dd7a:	697b      	ldr	r3, [r7, #20]
}
    dd7c:	4618      	mov	r0, r3
    dd7e:	3718      	adds	r7, #24
    dd80:	46bd      	mov	sp, r7
    dd82:	bd80      	pop	{r7, pc}
    dd84:	0000bfc9 	.word	0x0000bfc9
    dd88:	20000d74 	.word	0x20000d74
    dd8c:	0000e331 	.word	0x0000e331

0000dd90 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    dd90:	b480      	push	{r7}
    dd92:	b083      	sub	sp, #12
    dd94:	af00      	add	r7, sp, #0
    dd96:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    dd98:	687b      	ldr	r3, [r7, #4]
    dd9a:	7d5b      	ldrb	r3, [r3, #21]
    dd9c:	b2db      	uxtb	r3, r3
    dd9e:	2b00      	cmp	r3, #0
    dda0:	d006      	beq.n	ddb0 <_ZN9CDC_Class9availableEv+0x20>
    dda2:	687b      	ldr	r3, [r7, #4]
    dda4:	7d1b      	ldrb	r3, [r3, #20]
    dda6:	b2db      	uxtb	r3, r3
    dda8:	2b00      	cmp	r3, #0
    ddaa:	d001      	beq.n	ddb0 <_ZN9CDC_Class9availableEv+0x20>
    ddac:	2301      	movs	r3, #1
    ddae:	e000      	b.n	ddb2 <_ZN9CDC_Class9availableEv+0x22>
    ddb0:	2300      	movs	r3, #0
    ddb2:	2b00      	cmp	r3, #0
    ddb4:	d001      	beq.n	ddba <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    ddb6:	2301      	movs	r3, #1
    ddb8:	e000      	b.n	ddbc <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    ddba:	2300      	movs	r3, #0
	}
	
}
    ddbc:	4618      	mov	r0, r3
    ddbe:	370c      	adds	r7, #12
    ddc0:	46bd      	mov	sp, r7
    ddc2:	bc80      	pop	{r7}
    ddc4:	4770      	bx	lr
	...

0000ddc8 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    ddc8:	b580      	push	{r7, lr}
    ddca:	b082      	sub	sp, #8
    ddcc:	af00      	add	r7, sp, #0
    ddce:	6078      	str	r0, [r7, #4]
    ddd0:	6039      	str	r1, [r7, #0]
    ddd2:	687b      	ldr	r3, [r7, #4]
    ddd4:	2b01      	cmp	r3, #1
    ddd6:	d10c      	bne.n	ddf2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ddd8:	683b      	ldr	r3, [r7, #0]
    ddda:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ddde:	4293      	cmp	r3, r2
    dde0:	d107      	bne.n	ddf2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    dde2:	4806      	ldr	r0, [pc, #24]	; (ddfc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dde4:	4b06      	ldr	r3, [pc, #24]	; (de00 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dde6:	4798      	blx	r3
    dde8:	4a06      	ldr	r2, [pc, #24]	; (de04 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    ddea:	4907      	ldr	r1, [pc, #28]	; (de08 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    ddec:	4803      	ldr	r0, [pc, #12]	; (ddfc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ddee:	4b07      	ldr	r3, [pc, #28]	; (de0c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ddf0:	4798      	blx	r3
    ddf2:	bf00      	nop
    ddf4:	3708      	adds	r7, #8
    ddf6:	46bd      	mov	sp, r7
    ddf8:	bd80      	pop	{r7, pc}
    ddfa:	bf00      	nop
    ddfc:	20000c6c 	.word	0x20000c6c
    de00:	0000da6d 	.word	0x0000da6d
    de04:	20000000 	.word	0x20000000
    de08:	0000dab5 	.word	0x0000dab5
    de0c:	0000e821 	.word	0x0000e821

0000de10 <_GLOBAL__sub_I_ptrCDCClass>:
    de10:	b580      	push	{r7, lr}
    de12:	af00      	add	r7, sp, #0
    de14:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de18:	2001      	movs	r0, #1
    de1a:	4b01      	ldr	r3, [pc, #4]	; (de20 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    de1c:	4798      	blx	r3
    de1e:	bd80      	pop	{r7, pc}
    de20:	0000ddc9 	.word	0x0000ddc9

0000de24 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    de24:	b590      	push	{r4, r7, lr}
    de26:	b083      	sub	sp, #12
    de28:	af00      	add	r7, sp, #0
    de2a:	6078      	str	r0, [r7, #4]
    de2c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    de2e:	683b      	ldr	r3, [r7, #0]
    de30:	2b00      	cmp	r3, #0
    de32:	d101      	bne.n	de38 <_ZN5Print5writeEPKc+0x14>
    de34:	2300      	movs	r3, #0
    de36:	e00c      	b.n	de52 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    de38:	687b      	ldr	r3, [r7, #4]
    de3a:	681b      	ldr	r3, [r3, #0]
    de3c:	3304      	adds	r3, #4
    de3e:	681c      	ldr	r4, [r3, #0]
    de40:	6838      	ldr	r0, [r7, #0]
    de42:	4b06      	ldr	r3, [pc, #24]	; (de5c <_ZN5Print5writeEPKc+0x38>)
    de44:	4798      	blx	r3
    de46:	4603      	mov	r3, r0
    de48:	461a      	mov	r2, r3
    de4a:	6839      	ldr	r1, [r7, #0]
    de4c:	6878      	ldr	r0, [r7, #4]
    de4e:	47a0      	blx	r4
    de50:	4603      	mov	r3, r0
    }
    de52:	4618      	mov	r0, r3
    de54:	370c      	adds	r7, #12
    de56:	46bd      	mov	sp, r7
    de58:	bd90      	pop	{r4, r7, pc}
    de5a:	bf00      	nop
    de5c:	0000ea81 	.word	0x0000ea81

0000de60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    de60:	b580      	push	{r7, lr}
    de62:	b086      	sub	sp, #24
    de64:	af00      	add	r7, sp, #0
    de66:	60f8      	str	r0, [r7, #12]
    de68:	60b9      	str	r1, [r7, #8]
    de6a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    de6c:	2300      	movs	r3, #0
    de6e:	617b      	str	r3, [r7, #20]
  while (size--) {
    de70:	687b      	ldr	r3, [r7, #4]
    de72:	1e5a      	subs	r2, r3, #1
    de74:	607a      	str	r2, [r7, #4]
    de76:	2b00      	cmp	r3, #0
    de78:	bf14      	ite	ne
    de7a:	2301      	movne	r3, #1
    de7c:	2300      	moveq	r3, #0
    de7e:	b2db      	uxtb	r3, r3
    de80:	2b00      	cmp	r3, #0
    de82:	d016      	beq.n	deb2 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    de84:	68fb      	ldr	r3, [r7, #12]
    de86:	681b      	ldr	r3, [r3, #0]
    de88:	681a      	ldr	r2, [r3, #0]
    de8a:	68bb      	ldr	r3, [r7, #8]
    de8c:	1c59      	adds	r1, r3, #1
    de8e:	60b9      	str	r1, [r7, #8]
    de90:	781b      	ldrb	r3, [r3, #0]
    de92:	4619      	mov	r1, r3
    de94:	68f8      	ldr	r0, [r7, #12]
    de96:	4790      	blx	r2
    de98:	4603      	mov	r3, r0
    de9a:	2b00      	cmp	r3, #0
    de9c:	bf14      	ite	ne
    de9e:	2301      	movne	r3, #1
    dea0:	2300      	moveq	r3, #0
    dea2:	b2db      	uxtb	r3, r3
    dea4:	2b00      	cmp	r3, #0
    dea6:	d003      	beq.n	deb0 <_ZN5Print5writeEPKhj+0x50>
    dea8:	697b      	ldr	r3, [r7, #20]
    deaa:	3301      	adds	r3, #1
    deac:	617b      	str	r3, [r7, #20]
  while (size--) {
    deae:	e7df      	b.n	de70 <_ZN5Print5writeEPKhj+0x10>
    else break;
    deb0:	bf00      	nop
  }
  return n;
    deb2:	697b      	ldr	r3, [r7, #20]
}
    deb4:	4618      	mov	r0, r3
    deb6:	3718      	adds	r7, #24
    deb8:	46bd      	mov	sp, r7
    deba:	bd80      	pop	{r7, pc}

0000debc <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    debc:	b580      	push	{r7, lr}
    debe:	b082      	sub	sp, #8
    dec0:	af00      	add	r7, sp, #0
    dec2:	6078      	str	r0, [r7, #4]
    dec4:	6039      	str	r1, [r7, #0]
  return write(str);
    dec6:	6839      	ldr	r1, [r7, #0]
    dec8:	6878      	ldr	r0, [r7, #4]
    deca:	4b03      	ldr	r3, [pc, #12]	; (ded8 <_ZN5Print5printEPKc+0x1c>)
    decc:	4798      	blx	r3
    dece:	4603      	mov	r3, r0
}
    ded0:	4618      	mov	r0, r3
    ded2:	3708      	adds	r7, #8
    ded4:	46bd      	mov	sp, r7
    ded6:	bd80      	pop	{r7, pc}
    ded8:	0000de25 	.word	0x0000de25

0000dedc <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    dedc:	b580      	push	{r7, lr}
    dede:	b084      	sub	sp, #16
    dee0:	af00      	add	r7, sp, #0
    dee2:	60f8      	str	r0, [r7, #12]
    dee4:	460b      	mov	r3, r1
    dee6:	607a      	str	r2, [r7, #4]
    dee8:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    deea:	7afb      	ldrb	r3, [r7, #11]
    deec:	687a      	ldr	r2, [r7, #4]
    deee:	4619      	mov	r1, r3
    def0:	68f8      	ldr	r0, [r7, #12]
    def2:	4b03      	ldr	r3, [pc, #12]	; (df00 <_ZN5Print5printEhi+0x24>)
    def4:	4798      	blx	r3
    def6:	4603      	mov	r3, r0
}
    def8:	4618      	mov	r0, r3
    defa:	3710      	adds	r7, #16
    defc:	46bd      	mov	sp, r7
    defe:	bd80      	pop	{r7, pc}
    df00:	0000df05 	.word	0x0000df05

0000df04 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
    df04:	b580      	push	{r7, lr}
    df06:	b084      	sub	sp, #16
    df08:	af00      	add	r7, sp, #0
    df0a:	60f8      	str	r0, [r7, #12]
    df0c:	60b9      	str	r1, [r7, #8]
    df0e:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	2b00      	cmp	r3, #0
    df14:	d109      	bne.n	df2a <_ZN5Print5printEmi+0x26>
    df16:	68fb      	ldr	r3, [r7, #12]
    df18:	681b      	ldr	r3, [r3, #0]
    df1a:	681b      	ldr	r3, [r3, #0]
    df1c:	68ba      	ldr	r2, [r7, #8]
    df1e:	b2d2      	uxtb	r2, r2
    df20:	4611      	mov	r1, r2
    df22:	68f8      	ldr	r0, [r7, #12]
    df24:	4798      	blx	r3
    df26:	4603      	mov	r3, r0
    df28:	e007      	b.n	df3a <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    df2a:	687b      	ldr	r3, [r7, #4]
    df2c:	b2db      	uxtb	r3, r3
    df2e:	461a      	mov	r2, r3
    df30:	68b9      	ldr	r1, [r7, #8]
    df32:	68f8      	ldr	r0, [r7, #12]
    df34:	4b03      	ldr	r3, [pc, #12]	; (df44 <_ZN5Print5printEmi+0x40>)
    df36:	4798      	blx	r3
    df38:	4603      	mov	r3, r0
}
    df3a:	4618      	mov	r0, r3
    df3c:	3710      	adds	r7, #16
    df3e:	46bd      	mov	sp, r7
    df40:	bd80      	pop	{r7, pc}
    df42:	bf00      	nop
    df44:	0000df6d 	.word	0x0000df6d

0000df48 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    df48:	b580      	push	{r7, lr}
    df4a:	b082      	sub	sp, #8
    df4c:	af00      	add	r7, sp, #0
    df4e:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    df50:	4904      	ldr	r1, [pc, #16]	; (df64 <_ZN5Print7printlnEv+0x1c>)
    df52:	6878      	ldr	r0, [r7, #4]
    df54:	4b04      	ldr	r3, [pc, #16]	; (df68 <_ZN5Print7printlnEv+0x20>)
    df56:	4798      	blx	r3
    df58:	4603      	mov	r3, r0
}
    df5a:	4618      	mov	r0, r3
    df5c:	3708      	adds	r7, #8
    df5e:	46bd      	mov	sp, r7
    df60:	bd80      	pop	{r7, pc}
    df62:	bf00      	nop
    df64:	0000f0fc 	.word	0x0000f0fc
    df68:	0000de25 	.word	0x0000de25

0000df6c <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    df6c:	b580      	push	{r7, lr}
    df6e:	b08e      	sub	sp, #56	; 0x38
    df70:	af00      	add	r7, sp, #0
    df72:	60f8      	str	r0, [r7, #12]
    df74:	60b9      	str	r1, [r7, #8]
    df76:	4613      	mov	r3, r2
    df78:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    df7a:	f107 0310 	add.w	r3, r7, #16
    df7e:	3320      	adds	r3, #32
    df80:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    df82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    df84:	2200      	movs	r2, #0
    df86:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    df88:	79fb      	ldrb	r3, [r7, #7]
    df8a:	2b01      	cmp	r3, #1
    df8c:	dc01      	bgt.n	df92 <_ZN5Print11printNumberEmh+0x26>
    df8e:	230a      	movs	r3, #10
    df90:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    df92:	79fa      	ldrb	r2, [r7, #7]
    df94:	68bb      	ldr	r3, [r7, #8]
    df96:	fbb3 f1f2 	udiv	r1, r3, r2
    df9a:	fb02 f201 	mul.w	r2, r2, r1
    df9e:	1a9b      	subs	r3, r3, r2
    dfa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    dfa4:	79fb      	ldrb	r3, [r7, #7]
    dfa6:	68ba      	ldr	r2, [r7, #8]
    dfa8:	fbb2 f3f3 	udiv	r3, r2, r3
    dfac:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    dfae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dfb0:	3b01      	subs	r3, #1
    dfb2:	637b      	str	r3, [r7, #52]	; 0x34
    dfb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    dfb8:	2b09      	cmp	r3, #9
    dfba:	dc04      	bgt.n	dfc6 <_ZN5Print11printNumberEmh+0x5a>
    dfbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    dfc0:	3330      	adds	r3, #48	; 0x30
    dfc2:	b2db      	uxtb	r3, r3
    dfc4:	e003      	b.n	dfce <_ZN5Print11printNumberEmh+0x62>
    dfc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    dfca:	3337      	adds	r3, #55	; 0x37
    dfcc:	b2db      	uxtb	r3, r3
    dfce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    dfd0:	7013      	strb	r3, [r2, #0]
  } while(n);
    dfd2:	68bb      	ldr	r3, [r7, #8]
    dfd4:	2b00      	cmp	r3, #0
    dfd6:	d000      	beq.n	dfda <_ZN5Print11printNumberEmh+0x6e>
  do {
    dfd8:	e7db      	b.n	df92 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    dfda:	6b79      	ldr	r1, [r7, #52]	; 0x34
    dfdc:	68f8      	ldr	r0, [r7, #12]
    dfde:	4b03      	ldr	r3, [pc, #12]	; (dfec <_ZN5Print11printNumberEmh+0x80>)
    dfe0:	4798      	blx	r3
    dfe2:	4603      	mov	r3, r0
}
    dfe4:	4618      	mov	r0, r3
    dfe6:	3738      	adds	r7, #56	; 0x38
    dfe8:	46bd      	mov	sp, r7
    dfea:	bd80      	pop	{r7, pc}
    dfec:	0000de25 	.word	0x0000de25

0000dff0 <hri_port_read_DIR_reg>:
{
    dff0:	b480      	push	{r7}
    dff2:	b083      	sub	sp, #12
    dff4:	af00      	add	r7, sp, #0
    dff6:	6078      	str	r0, [r7, #4]
    dff8:	460b      	mov	r3, r1
    dffa:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    dffc:	78fb      	ldrb	r3, [r7, #3]
    dffe:	687a      	ldr	r2, [r7, #4]
    e000:	01db      	lsls	r3, r3, #7
    e002:	4413      	add	r3, r2
    e004:	681b      	ldr	r3, [r3, #0]
}
    e006:	4618      	mov	r0, r3
    e008:	370c      	adds	r7, #12
    e00a:	46bd      	mov	sp, r7
    e00c:	bc80      	pop	{r7}
    e00e:	4770      	bx	lr

0000e010 <hri_port_read_OUT_reg>:
{
    e010:	b480      	push	{r7}
    e012:	b083      	sub	sp, #12
    e014:	af00      	add	r7, sp, #0
    e016:	6078      	str	r0, [r7, #4]
    e018:	460b      	mov	r3, r1
    e01a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e01c:	78fb      	ldrb	r3, [r7, #3]
    e01e:	687a      	ldr	r2, [r7, #4]
    e020:	01db      	lsls	r3, r3, #7
    e022:	4413      	add	r3, r2
    e024:	3310      	adds	r3, #16
    e026:	681b      	ldr	r3, [r3, #0]
}
    e028:	4618      	mov	r0, r3
    e02a:	370c      	adds	r7, #12
    e02c:	46bd      	mov	sp, r7
    e02e:	bc80      	pop	{r7}
    e030:	4770      	bx	lr

0000e032 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e032:	b480      	push	{r7}
    e034:	b083      	sub	sp, #12
    e036:	af00      	add	r7, sp, #0
    e038:	6078      	str	r0, [r7, #4]
    e03a:	460b      	mov	r3, r1
    e03c:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e03e:	78fb      	ldrb	r3, [r7, #3]
    e040:	687a      	ldr	r2, [r7, #4]
    e042:	01db      	lsls	r3, r3, #7
    e044:	4413      	add	r3, r2
    e046:	3320      	adds	r3, #32
    e048:	681b      	ldr	r3, [r3, #0]
}
    e04a:	4618      	mov	r0, r3
    e04c:	370c      	adds	r7, #12
    e04e:	46bd      	mov	sp, r7
    e050:	bc80      	pop	{r7}
    e052:	4770      	bx	lr

0000e054 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e054:	b580      	push	{r7, lr}
    e056:	b086      	sub	sp, #24
    e058:	af00      	add	r7, sp, #0
    e05a:	4603      	mov	r3, r0
    e05c:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e05e:	f107 030c 	add.w	r3, r7, #12
    e062:	4618      	mov	r0, r3
    e064:	4b13      	ldr	r3, [pc, #76]	; (e0b4 <_gpio_get_level+0x60>)
    e066:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e068:	79fb      	ldrb	r3, [r7, #7]
    e06a:	4619      	mov	r1, r3
    e06c:	4812      	ldr	r0, [pc, #72]	; (e0b8 <_gpio_get_level+0x64>)
    e06e:	4b13      	ldr	r3, [pc, #76]	; (e0bc <_gpio_get_level+0x68>)
    e070:	4798      	blx	r3
    e072:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e074:	79fb      	ldrb	r3, [r7, #7]
    e076:	4619      	mov	r1, r3
    e078:	480f      	ldr	r0, [pc, #60]	; (e0b8 <_gpio_get_level+0x64>)
    e07a:	4b11      	ldr	r3, [pc, #68]	; (e0c0 <_gpio_get_level+0x6c>)
    e07c:	4798      	blx	r3
    e07e:	4602      	mov	r2, r0
    e080:	697b      	ldr	r3, [r7, #20]
    e082:	43db      	mvns	r3, r3
    e084:	4013      	ands	r3, r2
    e086:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e088:	79fb      	ldrb	r3, [r7, #7]
    e08a:	4619      	mov	r1, r3
    e08c:	480a      	ldr	r0, [pc, #40]	; (e0b8 <_gpio_get_level+0x64>)
    e08e:	4b0d      	ldr	r3, [pc, #52]	; (e0c4 <_gpio_get_level+0x70>)
    e090:	4798      	blx	r3
    e092:	4602      	mov	r2, r0
    e094:	697b      	ldr	r3, [r7, #20]
    e096:	4013      	ands	r3, r2
    e098:	693a      	ldr	r2, [r7, #16]
    e09a:	4313      	orrs	r3, r2
    e09c:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e09e:	f107 030c 	add.w	r3, r7, #12
    e0a2:	4618      	mov	r0, r3
    e0a4:	4b08      	ldr	r3, [pc, #32]	; (e0c8 <_gpio_get_level+0x74>)
    e0a6:	4798      	blx	r3

	return tmp;
    e0a8:	693b      	ldr	r3, [r7, #16]
}
    e0aa:	4618      	mov	r0, r3
    e0ac:	3718      	adds	r7, #24
    e0ae:	46bd      	mov	sp, r7
    e0b0:	bd80      	pop	{r7, pc}
    e0b2:	bf00      	nop
    e0b4:	0000b1a5 	.word	0x0000b1a5
    e0b8:	41008000 	.word	0x41008000
    e0bc:	0000dff1 	.word	0x0000dff1
    e0c0:	0000e033 	.word	0x0000e033
    e0c4:	0000e011 	.word	0x0000e011
    e0c8:	0000b1cb 	.word	0x0000b1cb

0000e0cc <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e0cc:	b580      	push	{r7, lr}
    e0ce:	b082      	sub	sp, #8
    e0d0:	af00      	add	r7, sp, #0
    e0d2:	4603      	mov	r3, r0
    e0d4:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e0d6:	79fb      	ldrb	r3, [r7, #7]
    e0d8:	115b      	asrs	r3, r3, #5
    e0da:	b2db      	uxtb	r3, r3
    e0dc:	4618      	mov	r0, r3
    e0de:	4b09      	ldr	r3, [pc, #36]	; (e104 <gpio_get_pin_level+0x38>)
    e0e0:	4798      	blx	r3
    e0e2:	4601      	mov	r1, r0
    e0e4:	79fb      	ldrb	r3, [r7, #7]
    e0e6:	f003 031f 	and.w	r3, r3, #31
    e0ea:	2201      	movs	r2, #1
    e0ec:	fa02 f303 	lsl.w	r3, r2, r3
    e0f0:	400b      	ands	r3, r1
    e0f2:	2b00      	cmp	r3, #0
    e0f4:	bf14      	ite	ne
    e0f6:	2301      	movne	r3, #1
    e0f8:	2300      	moveq	r3, #0
    e0fa:	b2db      	uxtb	r3, r3
}
    e0fc:	4618      	mov	r0, r3
    e0fe:	3708      	adds	r7, #8
    e100:	46bd      	mov	sp, r7
    e102:	bd80      	pop	{r7, pc}
    e104:	0000e055 	.word	0x0000e055

0000e108 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e108:	b480      	push	{r7}
    e10a:	b083      	sub	sp, #12
    e10c:	af00      	add	r7, sp, #0
    e10e:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e110:	4b06      	ldr	r3, [pc, #24]	; (e12c <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e112:	681b      	ldr	r3, [r3, #0]
    e114:	2201      	movs	r2, #1
    e116:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->terminalStarted=false;
    e118:	4b04      	ldr	r3, [pc, #16]	; (e12c <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e11a:	681b      	ldr	r3, [r3, #0]
    e11c:	2200      	movs	r2, #0
    e11e:	705a      	strb	r2, [r3, #1]
}
    e120:	bf00      	nop
    e122:	370c      	adds	r7, #12
    e124:	46bd      	mov	sp, r7
    e126:	bc80      	pop	{r7}
    e128:	4770      	bx	lr
    e12a:	bf00      	nop
    e12c:	20000ccc 	.word	0x20000ccc

0000e130 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e130:	b480      	push	{r7}
    e132:	b083      	sub	sp, #12
    e134:	af00      	add	r7, sp, #0
    e136:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e138:	4a04      	ldr	r2, [pc, #16]	; (e14c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e13a:	687b      	ldr	r3, [r7, #4]
    e13c:	6013      	str	r3, [r2, #0]
} //SerialTerminal_Class
    e13e:	687b      	ldr	r3, [r7, #4]
    e140:	4618      	mov	r0, r3
    e142:	370c      	adds	r7, #12
    e144:	46bd      	mov	sp, r7
    e146:	bc80      	pop	{r7}
    e148:	4770      	bx	lr
    e14a:	bf00      	nop
    e14c:	20000ccc 	.word	0x20000ccc

0000e150 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e150:	b480      	push	{r7}
    e152:	b083      	sub	sp, #12
    e154:	af00      	add	r7, sp, #0
    e156:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e158:	687b      	ldr	r3, [r7, #4]
    e15a:	4618      	mov	r0, r3
    e15c:	370c      	adds	r7, #12
    e15e:	46bd      	mov	sp, r7
    e160:	bc80      	pop	{r7}
    e162:	4770      	bx	lr

0000e164 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e164:	b580      	push	{r7, lr}
    e166:	b082      	sub	sp, #8
    e168:	af00      	add	r7, sp, #0
    e16a:	6078      	str	r0, [r7, #4]
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e16c:	2040      	movs	r0, #64	; 0x40
    e16e:	4b1c      	ldr	r3, [pc, #112]	; (e1e0 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>)
    e170:	4798      	blx	r3
    e172:	4603      	mov	r3, r0
    e174:	461a      	mov	r2, r3
    e176:	687b      	ldr	r3, [r7, #4]
    e178:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e17a:	687b      	ldr	r3, [r7, #4]
    e17c:	78db      	ldrb	r3, [r3, #3]
    e17e:	2b00      	cmp	r3, #0
    e180:	d024      	beq.n	e1cc <_ZN20SerialTerminal_Class6OnInitEv+0x68>
		{
			timeout=false;
    e182:	687b      	ldr	r3, [r7, #4]
    e184:	2200      	movs	r2, #0
    e186:	709a      	strb	r2, [r3, #2]
			terminalStarted=true;
    e188:	687b      	ldr	r3, [r7, #4]
    e18a:	2201      	movs	r2, #1
    e18c:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e18e:	f44f 7216 	mov.w	r2, #600	; 0x258
    e192:	4914      	ldr	r1, [pc, #80]	; (e1e4 <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    e194:	4814      	ldr	r0, [pc, #80]	; (e1e8 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e196:	4b15      	ldr	r3, [pc, #84]	; (e1ec <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e198:	4798      	blx	r3
			usbTerminalTimer.Start();
    e19a:	4813      	ldr	r0, [pc, #76]	; (e1e8 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e19c:	4b14      	ldr	r3, [pc, #80]	; (e1f0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e19e:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e1a0:	4814      	ldr	r0, [pc, #80]	; (e1f4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e1a2:	4b15      	ldr	r3, [pc, #84]	; (e1f8 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e1a4:	4798      	blx	r3
    e1a6:	4603      	mov	r3, r0
    e1a8:	f083 0301 	eor.w	r3, r3, #1
    e1ac:	b2db      	uxtb	r3, r3
    e1ae:	2b00      	cmp	r3, #0
    e1b0:	d008      	beq.n	e1c4 <_ZN20SerialTerminal_Class6OnInitEv+0x60>
				if (timeout)
    e1b2:	687b      	ldr	r3, [r7, #4]
    e1b4:	789b      	ldrb	r3, [r3, #2]
    e1b6:	b2db      	uxtb	r3, r3
    e1b8:	2b00      	cmp	r3, #0
    e1ba:	d0f1      	beq.n	e1a0 <_ZN20SerialTerminal_Class6OnInitEv+0x3c>
				{
					plugged=false;
    e1bc:	687b      	ldr	r3, [r7, #4]
    e1be:	2200      	movs	r2, #0
    e1c0:	701a      	strb	r2, [r3, #0]
					return;
    e1c2:	e009      	b.n	e1d8 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e1c4:	4808      	ldr	r0, [pc, #32]	; (e1e8 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e1c6:	4b0d      	ldr	r3, [pc, #52]	; (e1fc <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e1c8:	4798      	blx	r3
    e1ca:	e005      	b.n	e1d8 <_ZN20SerialTerminal_Class6OnInitEv+0x74>
		} 
		else
		{
			plugged=false;
    e1cc:	687b      	ldr	r3, [r7, #4]
    e1ce:	2200      	movs	r2, #0
    e1d0:	701a      	strb	r2, [r3, #0]
			terminalStarted=false;
    e1d2:	687b      	ldr	r3, [r7, #4]
    e1d4:	2200      	movs	r2, #0
    e1d6:	705a      	strb	r2, [r3, #1]
		}
		
}
    e1d8:	3708      	adds	r7, #8
    e1da:	46bd      	mov	sp, r7
    e1dc:	bd80      	pop	{r7, pc}
    e1de:	bf00      	nop
    e1e0:	0000e0cd 	.word	0x0000e0cd
    e1e4:	0000e109 	.word	0x0000e109
    e1e8:	20000d74 	.word	0x20000d74
    e1ec:	0000e3e9 	.word	0x0000e3e9
    e1f0:	0000e30d 	.word	0x0000e30d
    e1f4:	20000c6c 	.word	0x20000c6c
    e1f8:	0000db1d 	.word	0x0000db1d
    e1fc:	0000e331 	.word	0x0000e331

0000e200 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTerminalTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
    e200:	b580      	push	{r7, lr}
    e202:	b082      	sub	sp, #8
    e204:	af00      	add	r7, sp, #0
    e206:	6078      	str	r0, [r7, #4]
	if (terminalStarted)
    e208:	687b      	ldr	r3, [r7, #4]
    e20a:	785b      	ldrb	r3, [r3, #1]
    e20c:	b2db      	uxtb	r3, r3
    e20e:	2b00      	cmp	r3, #0
    e210:	d01f      	beq.n	e252 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x52>
	{
		if (plugged||usb.IsEnabled())
    e212:	687b      	ldr	r3, [r7, #4]
    e214:	781b      	ldrb	r3, [r3, #0]
    e216:	b2db      	uxtb	r3, r3
    e218:	2b00      	cmp	r3, #0
    e21a:	d105      	bne.n	e228 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x28>
    e21c:	4812      	ldr	r0, [pc, #72]	; (e268 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x68>)
    e21e:	4b13      	ldr	r3, [pc, #76]	; (e26c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x6c>)
    e220:	4798      	blx	r3
    e222:	4603      	mov	r3, r0
    e224:	2b00      	cmp	r3, #0
    e226:	d001      	beq.n	e22c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2c>
    e228:	2301      	movs	r3, #1
    e22a:	e000      	b.n	e22e <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
    e22c:	2300      	movs	r3, #0
    e22e:	2b00      	cmp	r3, #0
    e230:	d00b      	beq.n	e24a <_ZN20SerialTerminal_Class13CheckTerminalEv+0x4a>
		{
			terminalStarted=usbTerminalTimer.Start()==0;
    e232:	480f      	ldr	r0, [pc, #60]	; (e270 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x70>)
    e234:	4b0f      	ldr	r3, [pc, #60]	; (e274 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x74>)
    e236:	4798      	blx	r3
    e238:	4603      	mov	r3, r0
    e23a:	2b00      	cmp	r3, #0
    e23c:	bf0c      	ite	eq
    e23e:	2301      	moveq	r3, #1
    e240:	2300      	movne	r3, #0
    e242:	b2da      	uxtb	r2, r3
    e244:	687b      	ldr	r3, [r7, #4]
    e246:	705a      	strb	r2, [r3, #1]
    e248:	e007      	b.n	e25a <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
		else
		{
			terminalStarted=false;
    e24a:	687b      	ldr	r3, [r7, #4]
    e24c:	2200      	movs	r2, #0
    e24e:	705a      	strb	r2, [r3, #1]
    e250:	e003      	b.n	e25a <_ZN20SerialTerminal_Class13CheckTerminalEv+0x5a>
		}
	}
	else
	{
		return	terminalStarted;
    e252:	687b      	ldr	r3, [r7, #4]
    e254:	785b      	ldrb	r3, [r3, #1]
    e256:	b2db      	uxtb	r3, r3
    e258:	e002      	b.n	e260 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x60>
	}
	
	return	terminalStarted;
    e25a:	687b      	ldr	r3, [r7, #4]
    e25c:	785b      	ldrb	r3, [r3, #1]
    e25e:	b2db      	uxtb	r3, r3
}
    e260:	4618      	mov	r0, r3
    e262:	3708      	adds	r7, #8
    e264:	46bd      	mov	sp, r7
    e266:	bd80      	pop	{r7, pc}
    e268:	20000c6c 	.word	0x20000c6c
    e26c:	0000db1d 	.word	0x0000db1d
    e270:	20000d74 	.word	0x20000d74
    e274:	0000e30d 	.word	0x0000e30d

0000e278 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    e278:	b580      	push	{r7, lr}
    e27a:	b082      	sub	sp, #8
    e27c:	af00      	add	r7, sp, #0
    e27e:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    e280:	4b04      	ldr	r3, [pc, #16]	; (e294 <_ZL7task_cbPK10timer_task+0x1c>)
    e282:	681b      	ldr	r3, [r3, #0]
    e284:	4618      	mov	r0, r3
    e286:	4b04      	ldr	r3, [pc, #16]	; (e298 <_ZL7task_cbPK10timer_task+0x20>)
    e288:	4798      	blx	r3
}
    e28a:	bf00      	nop
    e28c:	3708      	adds	r7, #8
    e28e:	46bd      	mov	sp, r7
    e290:	bd80      	pop	{r7, pc}
    e292:	bf00      	nop
    e294:	20000cd0 	.word	0x20000cd0
    e298:	0000e359 	.word	0x0000e359

0000e29c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    e29c:	b480      	push	{r7}
    e29e:	b083      	sub	sp, #12
    e2a0:	af00      	add	r7, sp, #0
    e2a2:	6078      	str	r0, [r7, #4]
    e2a4:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e2a6:	687b      	ldr	r3, [r7, #4]
    e2a8:	683a      	ldr	r2, [r7, #0]
    e2aa:	60da      	str	r2, [r3, #12]
	ptrTimerSerialClass=this;
    e2ac:	4a08      	ldr	r2, [pc, #32]	; (e2d0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    e2ae:	687b      	ldr	r3, [r7, #4]
    e2b0:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e2b2:	687b      	ldr	r3, [r7, #4]
    e2b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e2b8:	615a      	str	r2, [r3, #20]
	task->cb=task_cb;
    e2ba:	687b      	ldr	r3, [r7, #4]
    e2bc:	689b      	ldr	r3, [r3, #8]
    e2be:	4a05      	ldr	r2, [pc, #20]	; (e2d4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    e2c0:	60da      	str	r2, [r3, #12]
} //Timer_Class
    e2c2:	687b      	ldr	r3, [r7, #4]
    e2c4:	4618      	mov	r0, r3
    e2c6:	370c      	adds	r7, #12
    e2c8:	46bd      	mov	sp, r7
    e2ca:	bc80      	pop	{r7}
    e2cc:	4770      	bx	lr
    e2ce:	bf00      	nop
    e2d0:	20000cd0 	.word	0x20000cd0
    e2d4:	0000e279 	.word	0x0000e279

0000e2d8 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    e2d8:	b480      	push	{r7}
    e2da:	b083      	sub	sp, #12
    e2dc:	af00      	add	r7, sp, #0
    e2de:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e2e0:	687b      	ldr	r3, [r7, #4]
    e2e2:	2200      	movs	r2, #0
    e2e4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e2e6:	687b      	ldr	r3, [r7, #4]
    e2e8:	4618      	mov	r0, r3
    e2ea:	370c      	adds	r7, #12
    e2ec:	46bd      	mov	sp, r7
    e2ee:	bc80      	pop	{r7}
    e2f0:	4770      	bx	lr

0000e2f2 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
void TimerSerial_Class::Init(void){
    e2f2:	b480      	push	{r7}
    e2f4:	b083      	sub	sp, #12
    e2f6:	af00      	add	r7, sp, #0
    e2f8:	6078      	str	r0, [r7, #4]
	ticks=0;
    e2fa:	687b      	ldr	r3, [r7, #4]
    e2fc:	2200      	movs	r2, #0
    e2fe:	619a      	str	r2, [r3, #24]
}
    e300:	bf00      	nop
    e302:	370c      	adds	r7, #12
    e304:	46bd      	mov	sp, r7
    e306:	bc80      	pop	{r7}
    e308:	4770      	bx	lr
	...

0000e30c <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    e30c:	b580      	push	{r7, lr}
    e30e:	b084      	sub	sp, #16
    e310:	af00      	add	r7, sp, #0
    e312:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e314:	687b      	ldr	r3, [r7, #4]
    e316:	68db      	ldr	r3, [r3, #12]
    e318:	4618      	mov	r0, r3
    e31a:	4b04      	ldr	r3, [pc, #16]	; (e32c <_ZN17TimerSerial_Class5StartEv+0x20>)
    e31c:	4798      	blx	r3
    e31e:	60f8      	str	r0, [r7, #12]
	return status;
    e320:	68fb      	ldr	r3, [r7, #12]
	
}
    e322:	4618      	mov	r0, r3
    e324:	3710      	adds	r7, #16
    e326:	46bd      	mov	sp, r7
    e328:	bd80      	pop	{r7, pc}
    e32a:	bf00      	nop
    e32c:	00002bb9 	.word	0x00002bb9

0000e330 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    e330:	b580      	push	{r7, lr}
    e332:	b084      	sub	sp, #16
    e334:	af00      	add	r7, sp, #0
    e336:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e338:	687b      	ldr	r3, [r7, #4]
    e33a:	68db      	ldr	r3, [r3, #12]
    e33c:	4618      	mov	r0, r3
    e33e:	4b05      	ldr	r3, [pc, #20]	; (e354 <_ZN17TimerSerial_Class4StopEv+0x24>)
    e340:	4798      	blx	r3
    e342:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e344:	687b      	ldr	r3, [r7, #4]
    e346:	2200      	movs	r2, #0
    e348:	705a      	strb	r2, [r3, #1]
	return status;
    e34a:	68fb      	ldr	r3, [r7, #12]
}
    e34c:	4618      	mov	r0, r3
    e34e:	3710      	adds	r7, #16
    e350:	46bd      	mov	sp, r7
    e352:	bd80      	pop	{r7, pc}
    e354:	00002c0d 	.word	0x00002c0d

0000e358 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    e358:	b480      	push	{r7}
    e35a:	b083      	sub	sp, #12
    e35c:	af00      	add	r7, sp, #0
    e35e:	6078      	str	r0, [r7, #4]
	timeout=1;
    e360:	687b      	ldr	r3, [r7, #4]
    e362:	2201      	movs	r2, #1
    e364:	705a      	strb	r2, [r3, #1]
}
    e366:	bf00      	nop
    e368:	370c      	adds	r7, #12
    e36a:	46bd      	mov	sp, r7
    e36c:	bc80      	pop	{r7}
    e36e:	4770      	bx	lr

0000e370 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e370:	b580      	push	{r7, lr}
    e372:	b086      	sub	sp, #24
    e374:	af00      	add	r7, sp, #0
    e376:	60f8      	str	r0, [r7, #12]
    e378:	60b9      	str	r1, [r7, #8]
    e37a:	607a      	str	r2, [r7, #4]
    e37c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e37e:	68f8      	ldr	r0, [r7, #12]
    e380:	4b0d      	ldr	r3, [pc, #52]	; (e3b8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e382:	4798      	blx	r3
	task->interval = interval;
    e384:	68fb      	ldr	r3, [r7, #12]
    e386:	689b      	ldr	r3, [r3, #8]
    e388:	687a      	ldr	r2, [r7, #4]
    e38a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e38c:	68fb      	ldr	r3, [r7, #12]
    e38e:	689b      	ldr	r3, [r3, #8]
    e390:	68ba      	ldr	r2, [r7, #8]
    e392:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e394:	68fb      	ldr	r3, [r7, #12]
    e396:	689b      	ldr	r3, [r3, #8]
    e398:	78fa      	ldrb	r2, [r7, #3]
    e39a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e39c:	68fb      	ldr	r3, [r7, #12]
    e39e:	68da      	ldr	r2, [r3, #12]
    e3a0:	68fb      	ldr	r3, [r7, #12]
    e3a2:	689b      	ldr	r3, [r3, #8]
    e3a4:	4619      	mov	r1, r3
    e3a6:	4610      	mov	r0, r2
    e3a8:	4b04      	ldr	r3, [pc, #16]	; (e3bc <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e3aa:	4798      	blx	r3
    e3ac:	6178      	str	r0, [r7, #20]
	
	return status;
    e3ae:	697b      	ldr	r3, [r7, #20]
}
    e3b0:	4618      	mov	r0, r3
    e3b2:	3718      	adds	r7, #24
    e3b4:	46bd      	mov	sp, r7
    e3b6:	bd80      	pop	{r7, pc}
    e3b8:	0000e4a1 	.word	0x0000e4a1
    e3bc:	00002c69 	.word	0x00002c69

0000e3c0 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    e3c0:	b590      	push	{r4, r7, lr}
    e3c2:	b087      	sub	sp, #28
    e3c4:	af00      	add	r7, sp, #0
    e3c6:	60f8      	str	r0, [r7, #12]
    e3c8:	60b9      	str	r1, [r7, #8]
    e3ca:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    e3cc:	2301      	movs	r3, #1
    e3ce:	687a      	ldr	r2, [r7, #4]
    e3d0:	68b9      	ldr	r1, [r7, #8]
    e3d2:	68f8      	ldr	r0, [r7, #12]
    e3d4:	4c03      	ldr	r4, [pc, #12]	; (e3e4 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
    e3d6:	47a0      	blx	r4
    e3d8:	6178      	str	r0, [r7, #20]
		return status;
    e3da:	697b      	ldr	r3, [r7, #20]
}
    e3dc:	4618      	mov	r0, r3
    e3de:	371c      	adds	r7, #28
    e3e0:	46bd      	mov	sp, r7
    e3e2:	bd90      	pop	{r4, r7, pc}
    e3e4:	0000e371 	.word	0x0000e371

0000e3e8 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    e3e8:	b590      	push	{r4, r7, lr}
    e3ea:	b087      	sub	sp, #28
    e3ec:	af00      	add	r7, sp, #0
    e3ee:	60f8      	str	r0, [r7, #12]
    e3f0:	60b9      	str	r1, [r7, #8]
    e3f2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e3f4:	2300      	movs	r3, #0
    e3f6:	687a      	ldr	r2, [r7, #4]
    e3f8:	68b9      	ldr	r1, [r7, #8]
    e3fa:	68f8      	ldr	r0, [r7, #12]
    e3fc:	4c03      	ldr	r4, [pc, #12]	; (e40c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    e3fe:	47a0      	blx	r4
    e400:	6178      	str	r0, [r7, #20]
	return status;
    e402:	697b      	ldr	r3, [r7, #20]
}
    e404:	4618      	mov	r0, r3
    e406:	371c      	adds	r7, #28
    e408:	46bd      	mov	sp, r7
    e40a:	bd90      	pop	{r4, r7, pc}
    e40c:	0000e371 	.word	0x0000e371

0000e410 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e410:	b590      	push	{r4, r7, lr}
    e412:	b087      	sub	sp, #28
    e414:	af00      	add	r7, sp, #0
    e416:	60f8      	str	r0, [r7, #12]
    e418:	60b9      	str	r1, [r7, #8]
    e41a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e41c:	2300      	movs	r3, #0
    e41e:	687a      	ldr	r2, [r7, #4]
    e420:	68b9      	ldr	r1, [r7, #8]
    e422:	68f8      	ldr	r0, [r7, #12]
    e424:	4c06      	ldr	r4, [pc, #24]	; (e440 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    e426:	47a0      	blx	r4
    e428:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    e42a:	68fb      	ldr	r3, [r7, #12]
    e42c:	68db      	ldr	r3, [r3, #12]
    e42e:	4618      	mov	r0, r3
    e430:	4b04      	ldr	r3, [pc, #16]	; (e444 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    e432:	4798      	blx	r3
    e434:	6178      	str	r0, [r7, #20]
	return status;
    e436:	697b      	ldr	r3, [r7, #20]
}
    e438:	4618      	mov	r0, r3
    e43a:	371c      	adds	r7, #28
    e43c:	46bd      	mov	sp, r7
    e43e:	bd90      	pop	{r4, r7, pc}
    e440:	0000e371 	.word	0x0000e371
    e444:	00002bb9 	.word	0x00002bb9

0000e448 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    e448:	b580      	push	{r7, lr}
    e44a:	b082      	sub	sp, #8
    e44c:	af00      	add	r7, sp, #0
    e44e:	6078      	str	r0, [r7, #4]
    e450:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e452:	6839      	ldr	r1, [r7, #0]
    e454:	6878      	ldr	r0, [r7, #4]
    e456:	4b0f      	ldr	r3, [pc, #60]	; (e494 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    e458:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e45a:	687b      	ldr	r3, [r7, #4]
    e45c:	68db      	ldr	r3, [r3, #12]
    e45e:	f103 0214 	add.w	r2, r3, #20
    e462:	687b      	ldr	r3, [r7, #4]
    e464:	689b      	ldr	r3, [r3, #8]
    e466:	4619      	mov	r1, r3
    e468:	4610      	mov	r0, r2
    e46a:	4b0b      	ldr	r3, [pc, #44]	; (e498 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    e46c:	4798      	blx	r3
    e46e:	4603      	mov	r3, r0
    e470:	2b00      	cmp	r3, #0
    e472:	d007      	beq.n	e484 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e474:	687b      	ldr	r3, [r7, #4]
    e476:	68da      	ldr	r2, [r3, #12]
    e478:	687b      	ldr	r3, [r7, #4]
    e47a:	689b      	ldr	r3, [r3, #8]
    e47c:	4619      	mov	r1, r3
    e47e:	4610      	mov	r0, r2
    e480:	4b06      	ldr	r3, [pc, #24]	; (e49c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    e482:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e484:	687b      	ldr	r3, [r7, #4]
    e486:	689b      	ldr	r3, [r3, #8]
    e488:	2200      	movs	r2, #0
    e48a:	60da      	str	r2, [r3, #12]
}
    e48c:	bf00      	nop
    e48e:	3708      	adds	r7, #8
    e490:	46bd      	mov	sp, r7
    e492:	bd80      	pop	{r7, pc}
    e494:	0000e509 	.word	0x0000e509
    e498:	00003939 	.word	0x00003939
    e49c:	00002d61 	.word	0x00002d61

0000e4a0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    e4a0:	b480      	push	{r7}
    e4a2:	b083      	sub	sp, #12
    e4a4:	af00      	add	r7, sp, #0
    e4a6:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
    e4a8:	687b      	ldr	r3, [r7, #4]
    e4aa:	2200      	movs	r2, #0
    e4ac:	771a      	strb	r2, [r3, #28]
    e4ae:	687b      	ldr	r3, [r7, #4]
    e4b0:	7f1b      	ldrb	r3, [r3, #28]
    e4b2:	2b07      	cmp	r3, #7
    e4b4:	dc1f      	bgt.n	e4f6 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x56>
	{
			if (taskArray[i].cb==NULL)
    e4b6:	687b      	ldr	r3, [r7, #4]
    e4b8:	7f1b      	ldrb	r3, [r3, #28]
    e4ba:	4619      	mov	r1, r3
    e4bc:	4a11      	ldr	r2, [pc, #68]	; (e504 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    e4be:	460b      	mov	r3, r1
    e4c0:	009b      	lsls	r3, r3, #2
    e4c2:	440b      	add	r3, r1
    e4c4:	009b      	lsls	r3, r3, #2
    e4c6:	4413      	add	r3, r2
    e4c8:	330c      	adds	r3, #12
    e4ca:	681b      	ldr	r3, [r3, #0]
    e4cc:	2b00      	cmp	r3, #0
    e4ce:	d10b      	bne.n	e4e8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x48>
			{
				
				task=&taskArray[i];
    e4d0:	687b      	ldr	r3, [r7, #4]
    e4d2:	7f1b      	ldrb	r3, [r3, #28]
    e4d4:	461a      	mov	r2, r3
    e4d6:	4613      	mov	r3, r2
    e4d8:	009b      	lsls	r3, r3, #2
    e4da:	4413      	add	r3, r2
    e4dc:	009b      	lsls	r3, r3, #2
    e4de:	4a09      	ldr	r2, [pc, #36]	; (e504 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    e4e0:	441a      	add	r2, r3
    e4e2:	687b      	ldr	r3, [r7, #4]
    e4e4:	609a      	str	r2, [r3, #8]
			return;
    e4e6:	e009      	b.n	e4fc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
    e4e8:	687b      	ldr	r3, [r7, #4]
    e4ea:	7f1b      	ldrb	r3, [r3, #28]
    e4ec:	3301      	adds	r3, #1
    e4ee:	b2da      	uxtb	r2, r3
    e4f0:	687b      	ldr	r3, [r7, #4]
    e4f2:	771a      	strb	r2, [r3, #28]
    e4f4:	e7db      	b.n	e4ae <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xe>
				
			}
	}
	task=&taskArray[0];
    e4f6:	687b      	ldr	r3, [r7, #4]
    e4f8:	4a02      	ldr	r2, [pc, #8]	; (e504 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    e4fa:	609a      	str	r2, [r3, #8]

}
    e4fc:	370c      	adds	r7, #12
    e4fe:	46bd      	mov	sp, r7
    e500:	bc80      	pop	{r7}
    e502:	4770      	bx	lr
    e504:	20000cd4 	.word	0x20000cd4

0000e508 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    e508:	b480      	push	{r7}
    e50a:	b083      	sub	sp, #12
    e50c:	af00      	add	r7, sp, #0
    e50e:	6078      	str	r0, [r7, #4]
    e510:	6039      	str	r1, [r7, #0]
	for (i = 0; i < TASK_NUMBER; i++)
    e512:	687b      	ldr	r3, [r7, #4]
    e514:	2200      	movs	r2, #0
    e516:	771a      	strb	r2, [r3, #28]
    e518:	687b      	ldr	r3, [r7, #4]
    e51a:	7f1b      	ldrb	r3, [r3, #28]
    e51c:	2b07      	cmp	r3, #7
    e51e:	dc20      	bgt.n	e562 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	{
		if (taskArray[i].cb==(timer_cb_t)func)
    e520:	687b      	ldr	r3, [r7, #4]
    e522:	7f1b      	ldrb	r3, [r3, #28]
    e524:	4619      	mov	r1, r3
    e526:	4a11      	ldr	r2, [pc, #68]	; (e56c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    e528:	460b      	mov	r3, r1
    e52a:	009b      	lsls	r3, r3, #2
    e52c:	440b      	add	r3, r1
    e52e:	009b      	lsls	r3, r3, #2
    e530:	4413      	add	r3, r2
    e532:	330c      	adds	r3, #12
    e534:	681a      	ldr	r2, [r3, #0]
    e536:	683b      	ldr	r3, [r7, #0]
    e538:	429a      	cmp	r2, r3
    e53a:	d10b      	bne.n	e554 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4c>
		{
			
			task=&taskArray[i];
    e53c:	687b      	ldr	r3, [r7, #4]
    e53e:	7f1b      	ldrb	r3, [r3, #28]
    e540:	461a      	mov	r2, r3
    e542:	4613      	mov	r3, r2
    e544:	009b      	lsls	r3, r3, #2
    e546:	4413      	add	r3, r2
    e548:	009b      	lsls	r3, r3, #2
    e54a:	4a08      	ldr	r2, [pc, #32]	; (e56c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    e54c:	441a      	add	r2, r3
    e54e:	687b      	ldr	r3, [r7, #4]
    e550:	609a      	str	r2, [r3, #8]
			return;
    e552:	e006      	b.n	e562 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	for (i = 0; i < TASK_NUMBER; i++)
    e554:	687b      	ldr	r3, [r7, #4]
    e556:	7f1b      	ldrb	r3, [r3, #28]
    e558:	3301      	adds	r3, #1
    e55a:	b2da      	uxtb	r2, r3
    e55c:	687b      	ldr	r3, [r7, #4]
    e55e:	771a      	strb	r2, [r3, #28]
    e560:	e7da      	b.n	e518 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x10>
			
		}
	}


}
    e562:	370c      	adds	r7, #12
    e564:	46bd      	mov	sp, r7
    e566:	bc80      	pop	{r7}
    e568:	4770      	bx	lr
    e56a:	bf00      	nop
    e56c:	20000cd4 	.word	0x20000cd4

0000e570 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e570:	b580      	push	{r7, lr}
    e572:	b082      	sub	sp, #8
    e574:	af00      	add	r7, sp, #0
    e576:	6078      	str	r0, [r7, #4]
    e578:	6039      	str	r1, [r7, #0]
    e57a:	687b      	ldr	r3, [r7, #4]
    e57c:	2b01      	cmp	r3, #1
    e57e:	d116      	bne.n	e5ae <_Z41__static_initialization_and_destruction_0ii+0x3e>
    e580:	683b      	ldr	r3, [r7, #0]
    e582:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e586:	4293      	cmp	r3, r2
    e588:	d111      	bne.n	e5ae <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    e58a:	490b      	ldr	r1, [pc, #44]	; (e5b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e58c:	480b      	ldr	r0, [pc, #44]	; (e5bc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e58e:	4b0c      	ldr	r3, [pc, #48]	; (e5c0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e590:	4798      	blx	r3
    e592:	4a0c      	ldr	r2, [pc, #48]	; (e5c4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e594:	490c      	ldr	r1, [pc, #48]	; (e5c8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e596:	4809      	ldr	r0, [pc, #36]	; (e5bc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e598:	4b0c      	ldr	r3, [pc, #48]	; (e5cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e59a:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e59c:	490c      	ldr	r1, [pc, #48]	; (e5d0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e59e:	480d      	ldr	r0, [pc, #52]	; (e5d4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e5a0:	4b07      	ldr	r3, [pc, #28]	; (e5c0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e5a2:	4798      	blx	r3
    e5a4:	4a07      	ldr	r2, [pc, #28]	; (e5c4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e5a6:	4908      	ldr	r1, [pc, #32]	; (e5c8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e5a8:	480a      	ldr	r0, [pc, #40]	; (e5d4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e5aa:	4b08      	ldr	r3, [pc, #32]	; (e5cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e5ac:	4798      	blx	r3
    e5ae:	bf00      	nop
    e5b0:	3708      	adds	r7, #8
    e5b2:	46bd      	mov	sp, r7
    e5b4:	bd80      	pop	{r7, pc}
    e5b6:	bf00      	nop
    e5b8:	20000ee8 	.word	0x20000ee8
    e5bc:	20000d74 	.word	0x20000d74
    e5c0:	0000e29d 	.word	0x0000e29d
    e5c4:	20000000 	.word	0x20000000
    e5c8:	0000e2d9 	.word	0x0000e2d9
    e5cc:	0000e821 	.word	0x0000e821
    e5d0:	20000e30 	.word	0x20000e30
    e5d4:	20000d94 	.word	0x20000d94

0000e5d8 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    e5d8:	b580      	push	{r7, lr}
    e5da:	af00      	add	r7, sp, #0
    e5dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e5e0:	2001      	movs	r0, #1
    e5e2:	4b01      	ldr	r3, [pc, #4]	; (e5e8 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    e5e4:	4798      	blx	r3
    e5e6:	bd80      	pop	{r7, pc}
    e5e8:	0000e571 	.word	0x0000e571

0000e5ec <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e5ec:	b480      	push	{r7}
    e5ee:	b083      	sub	sp, #12
    e5f0:	af00      	add	r7, sp, #0
    e5f2:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e5f4:	2300      	movs	r3, #0
	}
    e5f6:	4618      	mov	r0, r3
    e5f8:	370c      	adds	r7, #12
    e5fa:	46bd      	mov	sp, r7
    e5fc:	bc80      	pop	{r7}
    e5fe:	4770      	bx	lr

0000e600 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e600:	b480      	push	{r7}
    e602:	af00      	add	r7, sp, #0
		}
    e604:	bf00      	nop
    e606:	46bd      	mov	sp, r7
    e608:	bc80      	pop	{r7}
    e60a:	4770      	bx	lr

0000e60c <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    e60c:	b480      	push	{r7}
    e60e:	b083      	sub	sp, #12
    e610:	af00      	add	r7, sp, #0
    e612:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    e614:	4a04      	ldr	r2, [pc, #16]	; (e628 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    e616:	687b      	ldr	r3, [r7, #4]
    e618:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    e61a:	687b      	ldr	r3, [r7, #4]
    e61c:	4618      	mov	r0, r3
    e61e:	370c      	adds	r7, #12
    e620:	46bd      	mov	sp, r7
    e622:	bc80      	pop	{r7}
    e624:	4770      	bx	lr
    e626:	bf00      	nop
    e628:	20000db4 	.word	0x20000db4

0000e62c <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    e62c:	b480      	push	{r7}
    e62e:	b083      	sub	sp, #12
    e630:	af00      	add	r7, sp, #0
    e632:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    e634:	687b      	ldr	r3, [r7, #4]
    e636:	4618      	mov	r0, r3
    e638:	370c      	adds	r7, #12
    e63a:	46bd      	mov	sp, r7
    e63c:	bc80      	pop	{r7}
    e63e:	4770      	bx	lr

0000e640 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    e640:	b580      	push	{r7, lr}
    e642:	b082      	sub	sp, #8
    e644:	af00      	add	r7, sp, #0
    e646:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    e648:	687b      	ldr	r3, [r7, #4]
    e64a:	685a      	ldr	r2, [r3, #4]
    e64c:	687b      	ldr	r3, [r7, #4]
    e64e:	3308      	adds	r3, #8
    e650:	4619      	mov	r1, r3
    e652:	4610      	mov	r0, r2
    e654:	4b06      	ldr	r3, [pc, #24]	; (e670 <_ZN13SPI_Syn_Class4initEv+0x30>)
    e656:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    e658:	687b      	ldr	r3, [r7, #4]
    e65a:	685b      	ldr	r3, [r3, #4]
    e65c:	4618      	mov	r0, r3
    e65e:	4b05      	ldr	r3, [pc, #20]	; (e674 <_ZN13SPI_Syn_Class4initEv+0x34>)
    e660:	4798      	blx	r3
	
	ready=true;
    e662:	687b      	ldr	r3, [r7, #4]
    e664:	2201      	movs	r2, #1
    e666:	701a      	strb	r2, [r3, #0]
	
}
    e668:	bf00      	nop
    e66a:	3708      	adds	r7, #8
    e66c:	46bd      	mov	sp, r7
    e66e:	bd80      	pop	{r7, pc}
    e670:	00002ad5 	.word	0x00002ad5
    e674:	00002949 	.word	0x00002949

0000e678 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
    e678:	b480      	push	{r7}
    e67a:	b083      	sub	sp, #12
    e67c:	af00      	add	r7, sp, #0
    e67e:	6078      	str	r0, [r7, #4]
    e680:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
    e682:	4a05      	ldr	r2, [pc, #20]	; (e698 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
    e684:	687b      	ldr	r3, [r7, #4]
    e686:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
    e688:	687b      	ldr	r3, [r7, #4]
    e68a:	683a      	ldr	r2, [r7, #0]
    e68c:	605a      	str	r2, [r3, #4]
}
    e68e:	bf00      	nop
    e690:	370c      	adds	r7, #12
    e692:	46bd      	mov	sp, r7
    e694:	bc80      	pop	{r7}
    e696:	4770      	bx	lr
    e698:	20000db4 	.word	0x20000db4

0000e69c <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
    e69c:	b580      	push	{r7, lr}
    e69e:	b082      	sub	sp, #8
    e6a0:	af00      	add	r7, sp, #0
    e6a2:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    e6a4:	687b      	ldr	r3, [r7, #4]
    e6a6:	685a      	ldr	r2, [r3, #4]
    e6a8:	687b      	ldr	r3, [r7, #4]
    e6aa:	3308      	adds	r3, #8
    e6ac:	4619      	mov	r1, r3
    e6ae:	4610      	mov	r0, r2
    e6b0:	4b07      	ldr	r3, [pc, #28]	; (e6d0 <_ZN13SPI_Syn_Class6enableEv+0x34>)
    e6b2:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    e6b4:	687b      	ldr	r3, [r7, #4]
    e6b6:	685b      	ldr	r3, [r3, #4]
    e6b8:	4618      	mov	r0, r3
    e6ba:	4b06      	ldr	r3, [pc, #24]	; (e6d4 <_ZN13SPI_Syn_Class6enableEv+0x38>)
    e6bc:	4798      	blx	r3
	ready=true;
    e6be:	687b      	ldr	r3, [r7, #4]
    e6c0:	2201      	movs	r2, #1
    e6c2:	701a      	strb	r2, [r3, #0]
	return 0;
    e6c4:	2300      	movs	r3, #0
}
    e6c6:	4618      	mov	r0, r3
    e6c8:	3708      	adds	r7, #8
    e6ca:	46bd      	mov	sp, r7
    e6cc:	bd80      	pop	{r7, pc}
    e6ce:	bf00      	nop
    e6d0:	00002ad5 	.word	0x00002ad5
    e6d4:	00002949 	.word	0x00002949

0000e6d8 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
    e6d8:	b580      	push	{r7, lr}
    e6da:	b086      	sub	sp, #24
    e6dc:	af00      	add	r7, sp, #0
    e6de:	60f8      	str	r0, [r7, #12]
    e6e0:	60b9      	str	r1, [r7, #8]
    e6e2:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    e6e4:	68fb      	ldr	r3, [r7, #12]
    e6e6:	2201      	movs	r2, #1
    e6e8:	741a      	strb	r2, [r3, #16]
	w= io_write(spio,p,(uint16_t)n);
    e6ea:	68fb      	ldr	r3, [r7, #12]
    e6ec:	689b      	ldr	r3, [r3, #8]
    e6ee:	687a      	ldr	r2, [r7, #4]
    e6f0:	b292      	uxth	r2, r2
    e6f2:	68b9      	ldr	r1, [r7, #8]
    e6f4:	4618      	mov	r0, r3
    e6f6:	4b08      	ldr	r3, [pc, #32]	; (e718 <_ZN13SPI_Syn_Class5writeEPKhl+0x40>)
    e6f8:	4798      	blx	r3
    e6fa:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    e6fc:	697b      	ldr	r3, [r7, #20]
    e6fe:	2b00      	cmp	r3, #0
    e700:	bf14      	ite	ne
    e702:	2301      	movne	r3, #1
    e704:	2300      	moveq	r3, #0
    e706:	b2da      	uxtb	r2, r3
    e708:	68fb      	ldr	r3, [r7, #12]
    e70a:	741a      	strb	r2, [r3, #16]
	 return w;
    e70c:	697b      	ldr	r3, [r7, #20]
	
}
    e70e:	4618      	mov	r0, r3
    e710:	3718      	adds	r7, #24
    e712:	46bd      	mov	sp, r7
    e714:	bd80      	pop	{r7, pc}
    e716:	bf00      	nop
    e718:	0000e781 	.word	0x0000e781

0000e71c <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
    e71c:	b580      	push	{r7, lr}
    e71e:	b086      	sub	sp, #24
    e720:	af00      	add	r7, sp, #0
    e722:	60f8      	str	r0, [r7, #12]
    e724:	60b9      	str	r1, [r7, #8]
    e726:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    e728:	68fb      	ldr	r3, [r7, #12]
    e72a:	2201      	movs	r2, #1
    e72c:	745a      	strb	r2, [r3, #17]
	r=io_read(spio,p,(uint16_t)n);
    e72e:	68fb      	ldr	r3, [r7, #12]
    e730:	689b      	ldr	r3, [r3, #8]
    e732:	687a      	ldr	r2, [r7, #4]
    e734:	b292      	uxth	r2, r2
    e736:	68b9      	ldr	r1, [r7, #8]
    e738:	4618      	mov	r0, r3
    e73a:	4b08      	ldr	r3, [pc, #32]	; (e75c <_ZN13SPI_Syn_Class4readEPhl+0x40>)
    e73c:	4798      	blx	r3
    e73e:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    e740:	697b      	ldr	r3, [r7, #20]
    e742:	2b00      	cmp	r3, #0
    e744:	bf14      	ite	ne
    e746:	2301      	movne	r3, #1
    e748:	2300      	moveq	r3, #0
    e74a:	b2da      	uxtb	r2, r3
    e74c:	68fb      	ldr	r3, [r7, #12]
    e74e:	745a      	strb	r2, [r3, #17]
	return  r;
    e750:	697b      	ldr	r3, [r7, #20]
}
    e752:	4618      	mov	r0, r3
    e754:	3718      	adds	r7, #24
    e756:	46bd      	mov	sp, r7
    e758:	bd80      	pop	{r7, pc}
    e75a:	bf00      	nop
    e75c:	0000e7d1 	.word	0x0000e7d1

0000e760 <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
    e760:	b580      	push	{r7, lr}
    e762:	b082      	sub	sp, #8
    e764:	af00      	add	r7, sp, #0
    e766:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    e768:	687b      	ldr	r3, [r7, #4]
    e76a:	685b      	ldr	r3, [r3, #4]
    e76c:	4618      	mov	r0, r3
    e76e:	4b03      	ldr	r3, [pc, #12]	; (e77c <_ZN13SPI_Syn_Class7disableEv+0x1c>)
    e770:	4798      	blx	r3
	
}
    e772:	bf00      	nop
    e774:	3708      	adds	r7, #8
    e776:	46bd      	mov	sp, r7
    e778:	bd80      	pop	{r7, pc}
    e77a:	bf00      	nop
    e77c:	00002985 	.word	0x00002985

0000e780 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    e780:	b580      	push	{r7, lr}
    e782:	b084      	sub	sp, #16
    e784:	af00      	add	r7, sp, #0
    e786:	60f8      	str	r0, [r7, #12]
    e788:	60b9      	str	r1, [r7, #8]
    e78a:	4613      	mov	r3, r2
    e78c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e78e:	68fb      	ldr	r3, [r7, #12]
    e790:	2b00      	cmp	r3, #0
    e792:	d004      	beq.n	e79e <io_write+0x1e>
    e794:	68bb      	ldr	r3, [r7, #8]
    e796:	2b00      	cmp	r3, #0
    e798:	d001      	beq.n	e79e <io_write+0x1e>
    e79a:	2301      	movs	r3, #1
    e79c:	e000      	b.n	e7a0 <io_write+0x20>
    e79e:	2300      	movs	r3, #0
    e7a0:	f003 0301 	and.w	r3, r3, #1
    e7a4:	b2db      	uxtb	r3, r3
    e7a6:	2234      	movs	r2, #52	; 0x34
    e7a8:	4907      	ldr	r1, [pc, #28]	; (e7c8 <io_write+0x48>)
    e7aa:	4618      	mov	r0, r3
    e7ac:	4b07      	ldr	r3, [pc, #28]	; (e7cc <io_write+0x4c>)
    e7ae:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    e7b0:	68fb      	ldr	r3, [r7, #12]
    e7b2:	681b      	ldr	r3, [r3, #0]
    e7b4:	88fa      	ldrh	r2, [r7, #6]
    e7b6:	68b9      	ldr	r1, [r7, #8]
    e7b8:	68f8      	ldr	r0, [r7, #12]
    e7ba:	4798      	blx	r3
    e7bc:	4603      	mov	r3, r0
}
    e7be:	4618      	mov	r0, r3
    e7c0:	3710      	adds	r7, #16
    e7c2:	46bd      	mov	sp, r7
    e7c4:	bd80      	pop	{r7, pc}
    e7c6:	bf00      	nop
    e7c8:	0000f124 	.word	0x0000f124
    e7cc:	00003911 	.word	0x00003911

0000e7d0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    e7d0:	b580      	push	{r7, lr}
    e7d2:	b084      	sub	sp, #16
    e7d4:	af00      	add	r7, sp, #0
    e7d6:	60f8      	str	r0, [r7, #12]
    e7d8:	60b9      	str	r1, [r7, #8]
    e7da:	4613      	mov	r3, r2
    e7dc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e7de:	68fb      	ldr	r3, [r7, #12]
    e7e0:	2b00      	cmp	r3, #0
    e7e2:	d004      	beq.n	e7ee <io_read+0x1e>
    e7e4:	68bb      	ldr	r3, [r7, #8]
    e7e6:	2b00      	cmp	r3, #0
    e7e8:	d001      	beq.n	e7ee <io_read+0x1e>
    e7ea:	2301      	movs	r3, #1
    e7ec:	e000      	b.n	e7f0 <io_read+0x20>
    e7ee:	2300      	movs	r3, #0
    e7f0:	f003 0301 	and.w	r3, r3, #1
    e7f4:	b2db      	uxtb	r3, r3
    e7f6:	223d      	movs	r2, #61	; 0x3d
    e7f8:	4907      	ldr	r1, [pc, #28]	; (e818 <io_read+0x48>)
    e7fa:	4618      	mov	r0, r3
    e7fc:	4b07      	ldr	r3, [pc, #28]	; (e81c <io_read+0x4c>)
    e7fe:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    e800:	68fb      	ldr	r3, [r7, #12]
    e802:	685b      	ldr	r3, [r3, #4]
    e804:	88fa      	ldrh	r2, [r7, #6]
    e806:	68b9      	ldr	r1, [r7, #8]
    e808:	68f8      	ldr	r0, [r7, #12]
    e80a:	4798      	blx	r3
    e80c:	4603      	mov	r3, r0
}
    e80e:	4618      	mov	r0, r3
    e810:	3710      	adds	r7, #16
    e812:	46bd      	mov	sp, r7
    e814:	bd80      	pop	{r7, pc}
    e816:	bf00      	nop
    e818:	0000f124 	.word	0x0000f124
    e81c:	00003911 	.word	0x00003911

0000e820 <__aeabi_atexit>:
    e820:	460b      	mov	r3, r1
    e822:	4601      	mov	r1, r0
    e824:	4618      	mov	r0, r3
    e826:	f000 b801 	b.w	e82c <__cxa_atexit>
    e82a:	bf00      	nop

0000e82c <__cxa_atexit>:
    e82c:	4613      	mov	r3, r2
    e82e:	460a      	mov	r2, r1
    e830:	4601      	mov	r1, r0
    e832:	2002      	movs	r0, #2
    e834:	f000 b992 	b.w	eb5c <__register_exitproc>

0000e838 <ffs>:
    e838:	b140      	cbz	r0, e84c <ffs+0x14>
    e83a:	2300      	movs	r3, #0
    e83c:	fa40 f103 	asr.w	r1, r0, r3
    e840:	1c5a      	adds	r2, r3, #1
    e842:	07c9      	lsls	r1, r1, #31
    e844:	4613      	mov	r3, r2
    e846:	d5f9      	bpl.n	e83c <ffs+0x4>
    e848:	4610      	mov	r0, r2
    e84a:	4770      	bx	lr
    e84c:	4602      	mov	r2, r0
    e84e:	4610      	mov	r0, r2
    e850:	4770      	bx	lr
    e852:	bf00      	nop

0000e854 <__libc_init_array>:
    e854:	b570      	push	{r4, r5, r6, lr}
    e856:	4e0f      	ldr	r6, [pc, #60]	; (e894 <__libc_init_array+0x40>)
    e858:	4d0f      	ldr	r5, [pc, #60]	; (e898 <__libc_init_array+0x44>)
    e85a:	1b76      	subs	r6, r6, r5
    e85c:	10b6      	asrs	r6, r6, #2
    e85e:	bf18      	it	ne
    e860:	2400      	movne	r4, #0
    e862:	d005      	beq.n	e870 <__libc_init_array+0x1c>
    e864:	3401      	adds	r4, #1
    e866:	f855 3b04 	ldr.w	r3, [r5], #4
    e86a:	4798      	blx	r3
    e86c:	42a6      	cmp	r6, r4
    e86e:	d1f9      	bne.n	e864 <__libc_init_array+0x10>
    e870:	4e0a      	ldr	r6, [pc, #40]	; (e89c <__libc_init_array+0x48>)
    e872:	4d0b      	ldr	r5, [pc, #44]	; (e8a0 <__libc_init_array+0x4c>)
    e874:	1b76      	subs	r6, r6, r5
    e876:	f000 fc61 	bl	f13c <_init>
    e87a:	10b6      	asrs	r6, r6, #2
    e87c:	bf18      	it	ne
    e87e:	2400      	movne	r4, #0
    e880:	d006      	beq.n	e890 <__libc_init_array+0x3c>
    e882:	3401      	adds	r4, #1
    e884:	f855 3b04 	ldr.w	r3, [r5], #4
    e888:	4798      	blx	r3
    e88a:	42a6      	cmp	r6, r4
    e88c:	d1f9      	bne.n	e882 <__libc_init_array+0x2e>
    e88e:	bd70      	pop	{r4, r5, r6, pc}
    e890:	bd70      	pop	{r4, r5, r6, pc}
    e892:	bf00      	nop
    e894:	0000f148 	.word	0x0000f148
    e898:	0000f148 	.word	0x0000f148
    e89c:	0000f160 	.word	0x0000f160
    e8a0:	0000f148 	.word	0x0000f148

0000e8a4 <memcpy>:
    e8a4:	4684      	mov	ip, r0
    e8a6:	ea41 0300 	orr.w	r3, r1, r0
    e8aa:	f013 0303 	ands.w	r3, r3, #3
    e8ae:	d16d      	bne.n	e98c <memcpy+0xe8>
    e8b0:	3a40      	subs	r2, #64	; 0x40
    e8b2:	d341      	bcc.n	e938 <memcpy+0x94>
    e8b4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8b8:	f840 3b04 	str.w	r3, [r0], #4
    e8bc:	f851 3b04 	ldr.w	r3, [r1], #4
    e8c0:	f840 3b04 	str.w	r3, [r0], #4
    e8c4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8c8:	f840 3b04 	str.w	r3, [r0], #4
    e8cc:	f851 3b04 	ldr.w	r3, [r1], #4
    e8d0:	f840 3b04 	str.w	r3, [r0], #4
    e8d4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8d8:	f840 3b04 	str.w	r3, [r0], #4
    e8dc:	f851 3b04 	ldr.w	r3, [r1], #4
    e8e0:	f840 3b04 	str.w	r3, [r0], #4
    e8e4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8e8:	f840 3b04 	str.w	r3, [r0], #4
    e8ec:	f851 3b04 	ldr.w	r3, [r1], #4
    e8f0:	f840 3b04 	str.w	r3, [r0], #4
    e8f4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8f8:	f840 3b04 	str.w	r3, [r0], #4
    e8fc:	f851 3b04 	ldr.w	r3, [r1], #4
    e900:	f840 3b04 	str.w	r3, [r0], #4
    e904:	f851 3b04 	ldr.w	r3, [r1], #4
    e908:	f840 3b04 	str.w	r3, [r0], #4
    e90c:	f851 3b04 	ldr.w	r3, [r1], #4
    e910:	f840 3b04 	str.w	r3, [r0], #4
    e914:	f851 3b04 	ldr.w	r3, [r1], #4
    e918:	f840 3b04 	str.w	r3, [r0], #4
    e91c:	f851 3b04 	ldr.w	r3, [r1], #4
    e920:	f840 3b04 	str.w	r3, [r0], #4
    e924:	f851 3b04 	ldr.w	r3, [r1], #4
    e928:	f840 3b04 	str.w	r3, [r0], #4
    e92c:	f851 3b04 	ldr.w	r3, [r1], #4
    e930:	f840 3b04 	str.w	r3, [r0], #4
    e934:	3a40      	subs	r2, #64	; 0x40
    e936:	d2bd      	bcs.n	e8b4 <memcpy+0x10>
    e938:	3230      	adds	r2, #48	; 0x30
    e93a:	d311      	bcc.n	e960 <memcpy+0xbc>
    e93c:	f851 3b04 	ldr.w	r3, [r1], #4
    e940:	f840 3b04 	str.w	r3, [r0], #4
    e944:	f851 3b04 	ldr.w	r3, [r1], #4
    e948:	f840 3b04 	str.w	r3, [r0], #4
    e94c:	f851 3b04 	ldr.w	r3, [r1], #4
    e950:	f840 3b04 	str.w	r3, [r0], #4
    e954:	f851 3b04 	ldr.w	r3, [r1], #4
    e958:	f840 3b04 	str.w	r3, [r0], #4
    e95c:	3a10      	subs	r2, #16
    e95e:	d2ed      	bcs.n	e93c <memcpy+0x98>
    e960:	320c      	adds	r2, #12
    e962:	d305      	bcc.n	e970 <memcpy+0xcc>
    e964:	f851 3b04 	ldr.w	r3, [r1], #4
    e968:	f840 3b04 	str.w	r3, [r0], #4
    e96c:	3a04      	subs	r2, #4
    e96e:	d2f9      	bcs.n	e964 <memcpy+0xc0>
    e970:	3204      	adds	r2, #4
    e972:	d008      	beq.n	e986 <memcpy+0xe2>
    e974:	07d2      	lsls	r2, r2, #31
    e976:	bf1c      	itt	ne
    e978:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e97c:	f800 3b01 	strbne.w	r3, [r0], #1
    e980:	d301      	bcc.n	e986 <memcpy+0xe2>
    e982:	880b      	ldrh	r3, [r1, #0]
    e984:	8003      	strh	r3, [r0, #0]
    e986:	4660      	mov	r0, ip
    e988:	4770      	bx	lr
    e98a:	bf00      	nop
    e98c:	2a08      	cmp	r2, #8
    e98e:	d313      	bcc.n	e9b8 <memcpy+0x114>
    e990:	078b      	lsls	r3, r1, #30
    e992:	d08d      	beq.n	e8b0 <memcpy+0xc>
    e994:	f010 0303 	ands.w	r3, r0, #3
    e998:	d08a      	beq.n	e8b0 <memcpy+0xc>
    e99a:	f1c3 0304 	rsb	r3, r3, #4
    e99e:	1ad2      	subs	r2, r2, r3
    e9a0:	07db      	lsls	r3, r3, #31
    e9a2:	bf1c      	itt	ne
    e9a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e9a8:	f800 3b01 	strbne.w	r3, [r0], #1
    e9ac:	d380      	bcc.n	e8b0 <memcpy+0xc>
    e9ae:	f831 3b02 	ldrh.w	r3, [r1], #2
    e9b2:	f820 3b02 	strh.w	r3, [r0], #2
    e9b6:	e77b      	b.n	e8b0 <memcpy+0xc>
    e9b8:	3a04      	subs	r2, #4
    e9ba:	d3d9      	bcc.n	e970 <memcpy+0xcc>
    e9bc:	3a01      	subs	r2, #1
    e9be:	f811 3b01 	ldrb.w	r3, [r1], #1
    e9c2:	f800 3b01 	strb.w	r3, [r0], #1
    e9c6:	d2f9      	bcs.n	e9bc <memcpy+0x118>
    e9c8:	780b      	ldrb	r3, [r1, #0]
    e9ca:	7003      	strb	r3, [r0, #0]
    e9cc:	784b      	ldrb	r3, [r1, #1]
    e9ce:	7043      	strb	r3, [r0, #1]
    e9d0:	788b      	ldrb	r3, [r1, #2]
    e9d2:	7083      	strb	r3, [r0, #2]
    e9d4:	4660      	mov	r0, ip
    e9d6:	4770      	bx	lr

0000e9d8 <memset>:
    e9d8:	b470      	push	{r4, r5, r6}
    e9da:	0786      	lsls	r6, r0, #30
    e9dc:	d046      	beq.n	ea6c <memset+0x94>
    e9de:	1e54      	subs	r4, r2, #1
    e9e0:	2a00      	cmp	r2, #0
    e9e2:	d041      	beq.n	ea68 <memset+0x90>
    e9e4:	b2ca      	uxtb	r2, r1
    e9e6:	4603      	mov	r3, r0
    e9e8:	e002      	b.n	e9f0 <memset+0x18>
    e9ea:	f114 34ff 	adds.w	r4, r4, #4294967295
    e9ee:	d33b      	bcc.n	ea68 <memset+0x90>
    e9f0:	f803 2b01 	strb.w	r2, [r3], #1
    e9f4:	079d      	lsls	r5, r3, #30
    e9f6:	d1f8      	bne.n	e9ea <memset+0x12>
    e9f8:	2c03      	cmp	r4, #3
    e9fa:	d92e      	bls.n	ea5a <memset+0x82>
    e9fc:	b2cd      	uxtb	r5, r1
    e9fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    ea02:	2c0f      	cmp	r4, #15
    ea04:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    ea08:	d919      	bls.n	ea3e <memset+0x66>
    ea0a:	f103 0210 	add.w	r2, r3, #16
    ea0e:	4626      	mov	r6, r4
    ea10:	3e10      	subs	r6, #16
    ea12:	2e0f      	cmp	r6, #15
    ea14:	f842 5c10 	str.w	r5, [r2, #-16]
    ea18:	f842 5c0c 	str.w	r5, [r2, #-12]
    ea1c:	f842 5c08 	str.w	r5, [r2, #-8]
    ea20:	f842 5c04 	str.w	r5, [r2, #-4]
    ea24:	f102 0210 	add.w	r2, r2, #16
    ea28:	d8f2      	bhi.n	ea10 <memset+0x38>
    ea2a:	f1a4 0210 	sub.w	r2, r4, #16
    ea2e:	f022 020f 	bic.w	r2, r2, #15
    ea32:	f004 040f 	and.w	r4, r4, #15
    ea36:	3210      	adds	r2, #16
    ea38:	2c03      	cmp	r4, #3
    ea3a:	4413      	add	r3, r2
    ea3c:	d90d      	bls.n	ea5a <memset+0x82>
    ea3e:	461e      	mov	r6, r3
    ea40:	4622      	mov	r2, r4
    ea42:	3a04      	subs	r2, #4
    ea44:	2a03      	cmp	r2, #3
    ea46:	f846 5b04 	str.w	r5, [r6], #4
    ea4a:	d8fa      	bhi.n	ea42 <memset+0x6a>
    ea4c:	1f22      	subs	r2, r4, #4
    ea4e:	f022 0203 	bic.w	r2, r2, #3
    ea52:	3204      	adds	r2, #4
    ea54:	4413      	add	r3, r2
    ea56:	f004 0403 	and.w	r4, r4, #3
    ea5a:	b12c      	cbz	r4, ea68 <memset+0x90>
    ea5c:	b2c9      	uxtb	r1, r1
    ea5e:	441c      	add	r4, r3
    ea60:	f803 1b01 	strb.w	r1, [r3], #1
    ea64:	429c      	cmp	r4, r3
    ea66:	d1fb      	bne.n	ea60 <memset+0x88>
    ea68:	bc70      	pop	{r4, r5, r6}
    ea6a:	4770      	bx	lr
    ea6c:	4614      	mov	r4, r2
    ea6e:	4603      	mov	r3, r0
    ea70:	e7c2      	b.n	e9f8 <memset+0x20>
    ea72:	bf00      	nop
	...

0000ea80 <strlen>:
    ea80:	f890 f000 	pld	[r0]
    ea84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    ea88:	f020 0107 	bic.w	r1, r0, #7
    ea8c:	f06f 0c00 	mvn.w	ip, #0
    ea90:	f010 0407 	ands.w	r4, r0, #7
    ea94:	f891 f020 	pld	[r1, #32]
    ea98:	f040 8049 	bne.w	eb2e <strlen+0xae>
    ea9c:	f04f 0400 	mov.w	r4, #0
    eaa0:	f06f 0007 	mvn.w	r0, #7
    eaa4:	e9d1 2300 	ldrd	r2, r3, [r1]
    eaa8:	f891 f040 	pld	[r1, #64]	; 0x40
    eaac:	f100 0008 	add.w	r0, r0, #8
    eab0:	fa82 f24c 	uadd8	r2, r2, ip
    eab4:	faa4 f28c 	sel	r2, r4, ip
    eab8:	fa83 f34c 	uadd8	r3, r3, ip
    eabc:	faa2 f38c 	sel	r3, r2, ip
    eac0:	bb4b      	cbnz	r3, eb16 <strlen+0x96>
    eac2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    eac6:	fa82 f24c 	uadd8	r2, r2, ip
    eaca:	f100 0008 	add.w	r0, r0, #8
    eace:	faa4 f28c 	sel	r2, r4, ip
    ead2:	fa83 f34c 	uadd8	r3, r3, ip
    ead6:	faa2 f38c 	sel	r3, r2, ip
    eada:	b9e3      	cbnz	r3, eb16 <strlen+0x96>
    eadc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    eae0:	fa82 f24c 	uadd8	r2, r2, ip
    eae4:	f100 0008 	add.w	r0, r0, #8
    eae8:	faa4 f28c 	sel	r2, r4, ip
    eaec:	fa83 f34c 	uadd8	r3, r3, ip
    eaf0:	faa2 f38c 	sel	r3, r2, ip
    eaf4:	b97b      	cbnz	r3, eb16 <strlen+0x96>
    eaf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    eafa:	f101 0120 	add.w	r1, r1, #32
    eafe:	fa82 f24c 	uadd8	r2, r2, ip
    eb02:	f100 0008 	add.w	r0, r0, #8
    eb06:	faa4 f28c 	sel	r2, r4, ip
    eb0a:	fa83 f34c 	uadd8	r3, r3, ip
    eb0e:	faa2 f38c 	sel	r3, r2, ip
    eb12:	2b00      	cmp	r3, #0
    eb14:	d0c6      	beq.n	eaa4 <strlen+0x24>
    eb16:	2a00      	cmp	r2, #0
    eb18:	bf04      	itt	eq
    eb1a:	3004      	addeq	r0, #4
    eb1c:	461a      	moveq	r2, r3
    eb1e:	ba12      	rev	r2, r2
    eb20:	fab2 f282 	clz	r2, r2
    eb24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    eb28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    eb2c:	4770      	bx	lr
    eb2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    eb32:	f004 0503 	and.w	r5, r4, #3
    eb36:	f1c4 0000 	rsb	r0, r4, #0
    eb3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    eb3e:	f014 0f04 	tst.w	r4, #4
    eb42:	f891 f040 	pld	[r1, #64]	; 0x40
    eb46:	fa0c f505 	lsl.w	r5, ip, r5
    eb4a:	ea62 0205 	orn	r2, r2, r5
    eb4e:	bf1c      	itt	ne
    eb50:	ea63 0305 	ornne	r3, r3, r5
    eb54:	4662      	movne	r2, ip
    eb56:	f04f 0400 	mov.w	r4, #0
    eb5a:	e7a9      	b.n	eab0 <strlen+0x30>

0000eb5c <__register_exitproc>:
    eb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eb60:	4d2c      	ldr	r5, [pc, #176]	; (ec14 <__register_exitproc+0xb8>)
    eb62:	4606      	mov	r6, r0
    eb64:	6828      	ldr	r0, [r5, #0]
    eb66:	4698      	mov	r8, r3
    eb68:	460f      	mov	r7, r1
    eb6a:	4691      	mov	r9, r2
    eb6c:	f000 f882 	bl	ec74 <__retarget_lock_acquire_recursive>
    eb70:	4b29      	ldr	r3, [pc, #164]	; (ec18 <__register_exitproc+0xbc>)
    eb72:	681c      	ldr	r4, [r3, #0]
    eb74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    eb78:	2b00      	cmp	r3, #0
    eb7a:	d03e      	beq.n	ebfa <__register_exitproc+0x9e>
    eb7c:	685a      	ldr	r2, [r3, #4]
    eb7e:	2a1f      	cmp	r2, #31
    eb80:	dc1c      	bgt.n	ebbc <__register_exitproc+0x60>
    eb82:	f102 0e01 	add.w	lr, r2, #1
    eb86:	b176      	cbz	r6, eba6 <__register_exitproc+0x4a>
    eb88:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    eb8c:	2401      	movs	r4, #1
    eb8e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    eb92:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    eb96:	4094      	lsls	r4, r2
    eb98:	4320      	orrs	r0, r4
    eb9a:	2e02      	cmp	r6, #2
    eb9c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    eba0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    eba4:	d023      	beq.n	ebee <__register_exitproc+0x92>
    eba6:	3202      	adds	r2, #2
    eba8:	f8c3 e004 	str.w	lr, [r3, #4]
    ebac:	6828      	ldr	r0, [r5, #0]
    ebae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ebb2:	f000 f861 	bl	ec78 <__retarget_lock_release_recursive>
    ebb6:	2000      	movs	r0, #0
    ebb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ebbc:	4b17      	ldr	r3, [pc, #92]	; (ec1c <__register_exitproc+0xc0>)
    ebbe:	b30b      	cbz	r3, ec04 <__register_exitproc+0xa8>
    ebc0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ebc4:	f7ff fd12 	bl	e5ec <malloc>
    ebc8:	4603      	mov	r3, r0
    ebca:	b1d8      	cbz	r0, ec04 <__register_exitproc+0xa8>
    ebcc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ebd0:	6002      	str	r2, [r0, #0]
    ebd2:	2100      	movs	r1, #0
    ebd4:	6041      	str	r1, [r0, #4]
    ebd6:	460a      	mov	r2, r1
    ebd8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ebdc:	f04f 0e01 	mov.w	lr, #1
    ebe0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    ebe4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    ebe8:	2e00      	cmp	r6, #0
    ebea:	d0dc      	beq.n	eba6 <__register_exitproc+0x4a>
    ebec:	e7cc      	b.n	eb88 <__register_exitproc+0x2c>
    ebee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ebf2:	430c      	orrs	r4, r1
    ebf4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    ebf8:	e7d5      	b.n	eba6 <__register_exitproc+0x4a>
    ebfa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    ebfe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ec02:	e7bb      	b.n	eb7c <__register_exitproc+0x20>
    ec04:	6828      	ldr	r0, [r5, #0]
    ec06:	f000 f837 	bl	ec78 <__retarget_lock_release_recursive>
    ec0a:	f04f 30ff 	mov.w	r0, #4294967295
    ec0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ec12:	bf00      	nop
    ec14:	20000568 	.word	0x20000568
    ec18:	0000f138 	.word	0x0000f138
    ec1c:	0000e5ed 	.word	0x0000e5ed

0000ec20 <register_fini>:
    ec20:	4b02      	ldr	r3, [pc, #8]	; (ec2c <register_fini+0xc>)
    ec22:	b113      	cbz	r3, ec2a <register_fini+0xa>
    ec24:	4802      	ldr	r0, [pc, #8]	; (ec30 <register_fini+0x10>)
    ec26:	f000 b805 	b.w	ec34 <atexit>
    ec2a:	4770      	bx	lr
    ec2c:	00000000 	.word	0x00000000
    ec30:	0000ec41 	.word	0x0000ec41

0000ec34 <atexit>:
    ec34:	2300      	movs	r3, #0
    ec36:	4601      	mov	r1, r0
    ec38:	461a      	mov	r2, r3
    ec3a:	4618      	mov	r0, r3
    ec3c:	f7ff bf8e 	b.w	eb5c <__register_exitproc>

0000ec40 <__libc_fini_array>:
    ec40:	b538      	push	{r3, r4, r5, lr}
    ec42:	4c0a      	ldr	r4, [pc, #40]	; (ec6c <__libc_fini_array+0x2c>)
    ec44:	4d0a      	ldr	r5, [pc, #40]	; (ec70 <__libc_fini_array+0x30>)
    ec46:	1b64      	subs	r4, r4, r5
    ec48:	10a4      	asrs	r4, r4, #2
    ec4a:	d00a      	beq.n	ec62 <__libc_fini_array+0x22>
    ec4c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    ec50:	3b01      	subs	r3, #1
    ec52:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ec56:	3c01      	subs	r4, #1
    ec58:	f855 3904 	ldr.w	r3, [r5], #-4
    ec5c:	4798      	blx	r3
    ec5e:	2c00      	cmp	r4, #0
    ec60:	d1f9      	bne.n	ec56 <__libc_fini_array+0x16>
    ec62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ec66:	f000 ba7b 	b.w	f160 <_fini>
    ec6a:	bf00      	nop
    ec6c:	0000f170 	.word	0x0000f170
    ec70:	0000f16c 	.word	0x0000f16c

0000ec74 <__retarget_lock_acquire_recursive>:
    ec74:	4770      	bx	lr
    ec76:	bf00      	nop

0000ec78 <__retarget_lock_release_recursive>:
    ec78:	4770      	bx	lr
    ec7a:	bf00      	nop
    ec7c:	20555043 	.word	0x20555043
    ec80:	69726553 	.word	0x69726553
    ec84:	203a6c61 	.word	0x203a6c61
    ec88:	00000000 	.word	0x00000000
    ec8c:	682f2e2e 	.word	0x682f2e2e
    ec90:	702f6c70 	.word	0x702f6c70
    ec94:	2f74726f 	.word	0x2f74726f
    ec98:	5f6c7068 	.word	0x5f6c7068
    ec9c:	6f697067 	.word	0x6f697067
    eca0:	7361625f 	.word	0x7361625f
    eca4:	00682e65 	.word	0x00682e65
    eca8:	682f2e2e 	.word	0x682f2e2e
    ecac:	692f6c61 	.word	0x692f6c61
    ecb0:	756c636e 	.word	0x756c636e
    ecb4:	682f6564 	.word	0x682f6564
    ecb8:	775f6c61 	.word	0x775f6c61
    ecbc:	682e7464 	.word	0x682e7464
    ecc0:	00000000 	.word	0x00000000
    ecc4:	682f2e2e 	.word	0x682f2e2e
    ecc8:	732f6c61 	.word	0x732f6c61
    eccc:	682f6372 	.word	0x682f6372
    ecd0:	635f6c61 	.word	0x635f6c61
    ecd4:	6e656c61 	.word	0x6e656c61
    ecd8:	2e726164 	.word	0x2e726164
    ecdc:	00000063 	.word	0x00000063
    ece0:	682f2e2e 	.word	0x682f2e2e
    ece4:	732f6c61 	.word	0x732f6c61
    ece8:	682f6372 	.word	0x682f6372
    ecec:	635f6c61 	.word	0x635f6c61
    ecf0:	615f6e61 	.word	0x615f6e61
    ecf4:	636e7973 	.word	0x636e7973
    ecf8:	0000632e 	.word	0x0000632e
    ecfc:	682f2e2e 	.word	0x682f2e2e
    ed00:	732f6c61 	.word	0x732f6c61
    ed04:	682f6372 	.word	0x682f6372
    ed08:	635f6c61 	.word	0x635f6c61
    ed0c:	735f6372 	.word	0x735f6372
    ed10:	2e636e79 	.word	0x2e636e79
    ed14:	00000063 	.word	0x00000063
    ed18:	682f2e2e 	.word	0x682f2e2e
    ed1c:	732f6c61 	.word	0x732f6c61
    ed20:	682f6372 	.word	0x682f6372
    ed24:	695f6c61 	.word	0x695f6c61
    ed28:	6d5f6332 	.word	0x6d5f6332
    ed2c:	7973615f 	.word	0x7973615f
    ed30:	632e636e 	.word	0x632e636e
    ed34:	00000000 	.word	0x00000000
    ed38:	682f2e2e 	.word	0x682f2e2e
    ed3c:	732f6c61 	.word	0x732f6c61
    ed40:	682f6372 	.word	0x682f6372
    ed44:	705f6c61 	.word	0x705f6c61
    ed48:	632e6d77 	.word	0x632e6d77
    ed4c:	00000000 	.word	0x00000000
    ed50:	682f2e2e 	.word	0x682f2e2e
    ed54:	732f6c61 	.word	0x732f6c61
    ed58:	682f6372 	.word	0x682f6372
    ed5c:	715f6c61 	.word	0x715f6c61
    ed60:	5f697073 	.word	0x5f697073
    ed64:	636e7973 	.word	0x636e7973
    ed68:	0000632e 	.word	0x0000632e
    ed6c:	682f2e2e 	.word	0x682f2e2e
    ed70:	732f6c61 	.word	0x732f6c61
    ed74:	682f6372 	.word	0x682f6372
    ed78:	735f6c61 	.word	0x735f6c61
    ed7c:	6d5f6970 	.word	0x6d5f6970
    ed80:	7973615f 	.word	0x7973615f
    ed84:	632e636e 	.word	0x632e636e
    ed88:	00000000 	.word	0x00000000
    ed8c:	682f2e2e 	.word	0x682f2e2e
    ed90:	732f6c61 	.word	0x732f6c61
    ed94:	682f6372 	.word	0x682f6372
    ed98:	735f6c61 	.word	0x735f6c61
    ed9c:	6d5f6970 	.word	0x6d5f6970
    eda0:	6e79735f 	.word	0x6e79735f
    eda4:	00632e63 	.word	0x00632e63
    eda8:	682f2e2e 	.word	0x682f2e2e
    edac:	732f6c61 	.word	0x732f6c61
    edb0:	682f6372 	.word	0x682f6372
    edb4:	745f6c61 	.word	0x745f6c61
    edb8:	72656d69 	.word	0x72656d69
    edbc:	0000632e 	.word	0x0000632e
    edc0:	682f2e2e 	.word	0x682f2e2e
    edc4:	752f6c61 	.word	0x752f6c61
    edc8:	736c6974 	.word	0x736c6974
    edcc:	6372732f 	.word	0x6372732f
    edd0:	6974752f 	.word	0x6974752f
    edd4:	6c5f736c 	.word	0x6c5f736c
    edd8:	2e747369 	.word	0x2e747369
    eddc:	00000063 	.word	0x00000063

0000ede0 <_map>:
    ede0:	00000004 00000004 00000005 00000005     ................
    edf0:	00000006 00000056 00000007 00000057     ....V.......W...
    ee00:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    ee10:	632e6369 00000000                       ic.c....

0000ee18 <user_mux_confs>:
    ee18:	00000100 00000000 00000000 00000000     ................
	...

0000ee5c <channel_confs>:
    ee5c:	0000065e 00000000 00000000 00000000     ^...............
	...

0000ee9c <interrupt_cfg>:
	...
    ef1c:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    ef2c:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    ef3c:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    ef4c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    ef5c:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    ef6c:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    ef7c:	43000400 43000800 43000c00              ...C...C...C

0000ef88 <sercomspi_regs>:
    ef88:	0020000c 00020000 00000000 01ff00fe     .. .............
    ef98:	20008c00 02000000 00000000 ff006300     ... .........c..
    efa8:	000c0101 00000020 00000002 00fe0000     .... ...........
    efb8:	000401ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    efc8:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    efd8:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    efe8:	43001400 43001800                       ...C...C

0000eff0 <_usb_ep_cfgs>:
    eff0:	2000072c 00000000 00000040 2000076c     ,.. ....@...l.. 
    f000:	200007ac 00400040 200007ec 2000082c     ... @.@.... ,.. 
    f010:	00400040 2000086c 200008ac 00400040     @.@.l.. ... @.@.
    f020:	200008ec 2000092c 00400040 00000804     ... ,.. @.@.....
    f030:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    f040:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    f050:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    f060:	7361625f 00682e65                       _base.h.

0000f068 <n25q256a_interface>:
    f068:	0000b5e5 0000b689 0000b799 0000b951     ............Q...
    f078:	0000b9e1 752f2e2e 642f6273 63697665     ....../usb/devic
    f088:	73752f65 2e636462 00000063              e/usbdc.c...

0000f094 <defaultParameters>:
    f094:	00000082                                ....

0000f098 <defaultPreferences>:
    f098:	000000fa 00000032                       ....2...

0000f0a0 <_ZTV9CDC_Class>:
	...
    f0a8:	0000dc6d 0000dd21 0000d94d 0000dc35     m...!...M...5...
    f0b8:	0000dd91 0000dbf9 0000db39 0000db89     ........9.......
    f0c8:	0000dc55 0000dca5                       U.......

0000f0d0 <_ZTV6Stream>:
	...
    f0d8:	0000e601 0000de61 0000d94d 0000d961     ....a...M...a...
    f0e8:	0000e601 0000e601 0000e601 2e257830     ............0x%.
    f0f8:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f108:	0066766f                                ovf.

0000f10c <_ZTV5Print>:
	...
    f114:	0000e601 0000de61 0000d94d 0000d961     ....a...M...a...
    f124:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f134:	00632e6f                                o.c.

0000f138 <_global_impure_ptr>:
    f138:	20000140                                @.. 

0000f13c <_init>:
    f13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f13e:	bf00      	nop
    f140:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f142:	bc08      	pop	{r3}
    f144:	469e      	mov	lr, r3
    f146:	4770      	bx	lr

0000f148 <__init_array_start>:
    f148:	0000ec21 	.word	0x0000ec21

0000f14c <__frame_dummy_init_array_entry>:
    f14c:	00000289 0000d855 0000d915 0000de11     ....U...........
    f15c:	0000e5d9                                ....

0000f160 <_fini>:
    f160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f162:	bf00      	nop
    f164:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f166:	bc08      	pop	{r3}
    f168:	469e      	mov	lr, r3
    f16a:	4770      	bx	lr

0000f16c <__fini_array_start>:
    f16c:	00000265 	.word	0x00000265
